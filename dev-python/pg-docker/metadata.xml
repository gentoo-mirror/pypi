<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PG DockerA python package to provide containerized postgres databases in python**Why would you need this?**If you are using postgres and want to write tests that run against a real database, then this will make your life easier.## InstallationInstall via pip:```pip install pg-docker```You will also need to have [docker](https://www.docker.com/).## UsageNote: *This package is mainly built with pytest in mind, but you can use the context managers documented below with other testing frameworks as well.*### ExampleWith pytest:```pyimport psycopg2pytest_plugins = [&quot;pg_docker&quot;]def test_using_a_database(pg_database):    db_connection = psycopg2.connect(**pg_database.connection_kwargs())    cursor = db_connection.cursor()    cursor.execute(&quot;SELECT 'hello world!'&quot;)    assert cursor.fetchone() == (&quot;hello world!&quot;,)```### Usage with pytestYou first need to enable the plugin. To do this add a `conftest.py` to the root directory of your tests and add:```pypytest_plugins = [&quot;pg_docker&quot;]```You can find more details on how to activate plugins in the [pytest docs](https://docs.pytest.org/en/latest/how-to/plugins.html#requiring-loading-plugins-in-a-test-module-or-conftest-file)The plugin The following fixtures: - `pg_database`: `DatabaseParams` for a clean database. - `pg_database_pool`: A `DatabasePool` instance. Use this if you need more than one database in your tests at a time.### Configuring Database MigrationsUse the below template in your `conftest.py` to configure how your databases are set up. ```pydef setup_db(pg_params):    &quot;&quot;&quot;Add any setup logic for your database in here.&quot;&quot;&quot;    pass@pytest.fixture(scope=&quot;session&quot;)def pg_setup_db():    return setup_db```Note: *You might be inclined to edit the above code to nest the setup_db function inside of the fixture function. This will not work, because the fixture result needs to be [pickleable](https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled)!*### Advanced Usage (and other testing frameworks)For other use cases you can use the `database_pool` context manager:```pywith database_pool() as db_pool:    with db_pool.database as db_params:        connection = psycopg2.connect(**db_params.connection_kwargs())```</longdescription>
</pkgmetadata>