<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Denorm[![PyPI](https://img.shields.io/pypi/v/denorm)](https://pypi.org/project/denorm/)&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;doc/logo.png&quot;&gt;&lt;/p&gt;Denormalized and aggregated tables for PostgreSQL.Keywords: PostgreSQL, denormalization, aggregation, incremental viewmaintenance, materialized view&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;- [Overview](#overview)- [Install](#install)- [Usage](#usage)- [Operations](#operations)- [Performance](#performance)- [Migration](#migration)- [Limitations](#limitations)- [Developing](#developing)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;## OverviewDernom is similar to PostgreSQL's[`REFRESH MATERIALIZED VIEW`](https://www.postgresql.org/docs/13/sql-refreshmaterializedview.html),except that it updates materialized table incrementally.How it works: Define the query, the tables, and their relationships in JSON.Denorm generates the SQL DDL statements that create the necessary functions andtriggers. Apply the generated SQL statements to the database. Now, thematerialized target is automatically kept in sync with the source tables.### Features- Efficient incremental updates- Arbitrarily complex SQL features and expressions- Configurable consistency- Deadlock-free## Install### Pip```pip3 install denorm```## UsageFor CLI usage, see [Usage](doc/usage.md).## OperationsDenorm has two operations:### AggregateCreate a materalized aggregate of a single table.See [Aggregate](doc/agg.md).### JoinCreate a materialized join of several tables.See [Join](doc/join.md).## PerformanceMaterialized views exchange slower write performance for higher readperformance.While it's impossible to escape the fundamental trade-off, Denorm is as fast orfaster than hand-written triggers. It uses statement-level transitions tables tomake batch updates especially efficient.In deferred mode, Denorm uses temp tables to defer updates until the end of thetransaction. Using temp tables and `ON DELETE COMMIT` reduces I/O overhead andobviates the need for vacuuming. Since PostgreSQL does not support globaltemporary tables, the tables are created as necessary for each session. Thus thefirst saliant update in a session may have several millseconds of overhead asthe trigger creates the temporary tables. Pool connections to reduce overhead,and vacuum reguarly to prevent system tables from bloating.## MigrationDenorm does not generate migration scripts.Consider a tool like [migra](https://databaseci.com/docs/migra) to help generatemigration scripts.## LimitationsDenorm mangles names for generated objects, Long IDs and table names may runinto the PostgreSQL limit of 63 characters for identifiers.## DevelopingInstall: `make install`Generate JSONSchema: `make schema`Test: `make test`Generate documentation: `make doc`Format: `make format`### Publish1. Update denorm/version.py.2. Create commit `Version &lt;version&gt;`.3. Tag `v&lt;version&gt;`.4. Push master branch and tag.5. Publish to PyPI: `make publish`.</longdescription>
</pkgmetadata>