<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Ghidra `.pyi` GeneratorThe Ghidra `.pyi` Generator generates `.pyi` [type stubs][pep-0484]for the entire Ghidra API.Those stub files can later be used in PyCharm to enhance the development experience.You can either use the stubs released [here][latest-release], or follow the instructions below to generate them yourself.## Using The Stubs### Installation The release contains  [PEP 561 stub package][pep-561-stub], which can simply be installed with `pip install ghidra-stubs*.whl`into the environment in which the real `ghidra` module is available. Any conformant tool will then use the stub packagefor type analysis purposes.  If you want to manually add the stub files to PyCharm, follow the instructions in [Install, uninstall, and upgrade interpreter paths][interpreter-paths].### UsageOnce installed, all you need to do is import the Ghidra modules as usual, and PyCharm will do the rest.```pythonimport ghidra```To get support for the Ghidra builtins, you need to import them as well. The type hints for those exist inthe generated `ghidra_builtins.pyi` stub. Since it is not a real Python module, importing it at runtime will fail.But the `.pyi` gives PyCharm all the information it needs to help you.```pythontry:    from ghidra.ghidra_builtins import *except:    pass```If you are using [ghidra_bridge](https://github.com/justfoxing/ghidra_bridge) from a Python 3 environment where no real `ghidra` moduleexists you can use a snippet like the following:```pythonimport typingif typing.TYPE_CHECKING:    import ghidra    from ghidra.ghidra_builtins import *else:    b = ghidra_bridge.GhidraBridge(namespace=globals())# actual code follows here````typing.TYPE_CHECKING` is a special value that is always `False` at runtime but `True` during any kind of type checking or completion.Once done, just code &amp; enjoy.![Pycharm Demo][pycharm-demo]## Dependencies### Ghidra DocsTo properly extract all types from Ghidra, make sure to extract the API documentation.1. Open the Ghidra CodeBrowser2. Go to `Help -&gt; Ghidra API Help`3. Wait for Ghidra to extract the docs### Python PackagesThe script depends on both the `attr` and `typing` packages.They are now vendored under the `vendor` directory as Python2.7 support is graduallybeing dropped from the ecosystem, making it hard to install and fetch packages.```bash # Create Jython's site-pacakges directory.jython_site_packages=~/.local/lib/jython2.7/site-packagesmkdir -p $jython_site_packages # Create a PTH file to point Jython to our vendored site-packages# Outside a virtualenv, useecho &quot;$(realpath ./vendor)&quot; &gt; $jython_site_packages/python.pth```## Creating the `.pyi` files### GUI1. Add this directory to the `Script Directories` in the Ghidra Script Manager2. Refresh the script list3. Run `generate_ghidra_pyi.py` (will be located under `IDE Helpers`)4. When a directory-selection dialog appears, choose the directory you'd like to save the `.pyi` files in.### CLI```bash$GHIDRA_ROOT/support/analyzeHeadless /tmp tmp -scriptPath $(pwd) -preScript generate_ghidra_pyi.py ./```## Python Package`generate_ghidra_pyi.py` generates a `setup.py` inside the directory that was selected.This allows using `pip install` to install a  [PEP 561 stub package][pep-561-stub] that is recognized by PyCharm and other tools as containing type information for the ghidra module.[interpreter-paths]: https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-reloading-interpreter-paths.html[latest-release]: https://github.com/VDOO-Connected-Trust/ghidra-pyi-generator/releases/latest[pep-0484]: https://www.python.org/dev/peps/pep-0484/[pycharm-demo]: ./media/pycharm_demo.gif[pep-561-stub]: https://www.python.org/dev/peps/pep-0561/#stub-only-packages</longdescription>
</pkgmetadata>