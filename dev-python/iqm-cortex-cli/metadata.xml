<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|CI badge| |Release badge| |Black badge|.. |CI badge| image:: https://github.com/iqm-finland/cortex-cli/actions/workflows/ci.yml/badge.svg.. |Release badge| image:: https://img.shields.io/github/release/iqm-finland/cortex-cli.svg.. |Black badge| image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black==========Cortex CLI==========Command-line interface (CLI) for interacting with an IQM quantum computer.Installing Cortex CLI---------------------Requirements for installing:- Python 3.9- `pip &lt;https://pypi.org/project/pip/&gt;`_.. code-block:: bash  $ pip install iqm-cortex-cliUsing Cortex CLI----------------For general usage instructions, run.. code-block:: bash  $ cortex --helpInitialization^^^^^^^^^^^^^^First, Cortex CLI needs initialization, which produces a configuration file:.. code-block:: bash  $ cortex initCortex CLI will ask a few questions. You can also pass the values via command line to avoid having an interactiveprompt. See ``cortex init --help`` for details.Login^^^^^To log in, use.. code-block:: bash  $ cortex auth loginThis will ask you to enter your username and password.After a successful authentication, tokens will be saved into a tokens file (path specified in the configuration file),and a token manager daemon will start in the background. Token manager will periodically refresh the session andre-write the tokens file.To use the token manager in a foreground mode (not as daemon), run ``cortex auth login --no-daemon``. This requireskeeping the shell session alive. However, you can start the process in the background by adding ``&amp;`` after thecommand: ``cortex auth login --no-daemon &amp;``. This applies to Bash, zsh and similar shells, but may not be availableon all shells.To login and get tokens once, without starting a token manager at all, run ``cortex auth login --no-refresh``.If the tokens file already exists, then running ``cortex auth login`` will first attempt to refresh the session withoutasking you for a username and password. If that fails (because existing tokens may already have expired), you'll beasked to re-enter your credentials.See ``cortex auth login --help`` for more details.Use with Cirq on IQM, Qiskit on IQM, etc.^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Adapters based on IQM Client, such as Cirq on IQM and Qiskit on IQM, can take advantage of the tokens file maintained byCortex CLI. This way you won't need to provide the authentication server URL, username, or password to the adapterlibrary itself. To achieve this, follow the instructions printed on the screen after running ``cortex auth login``.Namely, set the ``IQM_TOKENS_FILE`` environment variable to point to your tokens file, for example:.. code-block:: bash  $ export IQM_TOKENS_FILE=/home/user/iqm_tokens.jsonOnce set, this environment variable is read by the instance of IQM Client associated with the adapter. As a result,from the point of view of the adapter it looks like authentication is simply not required (i.e. noauthentication-related information has to be provided to the adapter).Status^^^^^^To see the current status of the token manager, use:.. code-block:: bash  $ cortex auth statusIf the tokens file exists, ``cortex auth status`` will report whether the corresponding tokenmanager is running. It will also print the time of the last successful refresh request, andhow much time is left until current tokens expire.See ``cortex auth status --help`` for more details.Logout^^^^^^To log out, run.. code-block:: bash  $ cortex auth logoutThis will send a logout request to the authentication server, kill the token manager daemon (if any), and delete thetokens file.You may want to stop the token manager, but maintain the session on the server and keep the tokens file intact.To do so, run:.. code-block:: bash  $ cortex auth logout --keep-tokensSee ``cortex auth logout --help`` for more details.Multiple configuration files^^^^^^^^^^^^^^^^^^^^^^^^^^^^By default, all Cortex CLI commands read the configuration file from the default location``~/.config/iqm-cortex-cli/config.json``. You can specify a different filepath by providing the ``--config-file`` value,for example:.. code-block:: bash  $ cortex auth status --config-file /home/joe/config.json  $ cortex auth login --config-file /home/joe/config.json  $ cortex auth logout --config-file /home/joe/config.jsonUsing Cortex CLI for circuits-----------------------------Circuit-related commands require additional dependencies to be installed. To install them, run.. code-block:: bash  $ pip install &quot;iqm-cortex-cli[circuit]&quot;Circuit validation^^^^^^^^^^^^^^^^^^.. code-block:: bash  $ cortex circuit validate my_circuit.qasmvalidates the quantum circuit in file ``my_circuit.qasm``, and reports errors if the circuit is notvalid OpenQASM 2.0. The exit code is 0 if and only if the circuit is valid.Executing circuits on a quantum computer^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^You can execute a quantum circuit on an IQM quantum computer with.. code-block:: bash  $ export IQM_SERVER_URL=&quot;https://example.com/iqm-server&quot;  $ cortex circuit run --shots 100 --qasm-qubit-placement my_qubit_placement.json my_circuit.qasmThe server URL can be set either with command-line option or as an environment variable.By default, authentication is handled the same way as with other Cortex CLI commands. You canoverride this and provide your own server URL, username, and password by setting environmentvariables IQM_AUTH_SERVER, IQM_AUTH_USERNAME and IQM_AUTH_PASSWORD.Note that the circuit needs to be transpiled so that it only contains operations natively supported by the IQM quantumcomputer you are using.For information on all the parameters and their usage, run.. code-block:: bash  $ cortex circuit run --helpThe results of all the measurements in the circuit can be returned in human-readable or machine-readable format:``--output frequencies`` provides a human-readable output of the measurement frequencies, this is the default format:.. code-block:: bash  $ cortex circuit run --output frequencies --shots 5000 --iqm-json ./tests/resources/valid_circuit_2.json  Circuit &quot;My Circuit&quot; results using calibration set 41 over 5000 shots:  QB1QB2QB3QB4QB5  000000.0288  000010.0276  000100.027  000110.03  001000.033  001010.0348  001100.0332  001110.0328  010000.0344  010010.031  010100.0294  010110.0286  011000.0352  011010.0264  011100.0312  011110.033  100000.0366  100010.0342  100100.0252  100110.0352  101000.031  101010.0304  101100.0302  101110.0322  110000.0354  110010.0308  110100.0314  110110.0262  111000.0324  111010.0332  111100.0264  111110.0328  $ cortex circuit run --output frequencies --shots 100 --qasm-qubit-placement ./tests/resources/qasm_qubit_placement.json ./tests/resources/valid_circuit.qasm  Circuit &quot;valid_circuit.qasm&quot; results using calibration set 41 over 5000 shots:  q[0]q[1]  000.2386  010.26  100.2538  110.2476``--output shots`` provides a human-readable output of all the shots:.. code-block:: bash  $ cortex circuit run --output shots --shots 5 --qasm-qubit-placement ./tests/resources/qasm_qubit_placement.json ./tests/resources/valid_circuit.qasm  Circuit &quot;valid_circuit.qasm&quot; results using calibration set 41 over 5 shots:  shotq[0]q[1]  101  210  311  400  511``--output json`` provides a machine-readable output of raw ``RunResult`` json returned by the Cortex server:.. code-block:: bash  $ cortex circuit run --output json --shots 100 --qasm-qubit-placement ./tests/resources/qasm_qubit_placement.json ./tests/resources/valid_circuit.qasm  {&quot;status&quot;: &quot;ready&quot;, &quot;measurements&quot;: [{&quot;b_0&quotquot;b_1&quot}], &quot;metadata&quot;: {&quot;shots&quot;: 100, &quot;circuits&quot;: [{&quot;name&quot;: &quot;valid_circuit.qasm&quot;, &quot;instructions&quot;: [{&quot;name&quot;: &quot;phased_rx&quot;, &quot;qubits&quot;: [&quot;QB1&quot;], &quot;args&quot;: {&quot;angle_t&quot;: 0.5, &quot;phase_t&quot;: 0}}, {&quot;name&quot;: &quot;cz&quot;, &quot;qubits&quot;: [&quot;QB1&quot;, &quot;QB2&quot;], &quot;args&quot;: {}}, {&quot;name&quot;: &quot;measurement&quot;, &quot;qubits&quot;: [&quot;QB1&quot;], &quot;args&quot;: {&quot;key&quot;: &quot;b_0&quot;}}, {&quot;name&quot;: &quot;measurement&quot;, &quot;qubits&quot;: [&quot;QB2&quot;], &quot;args&quot;: {&quot;key&quot;: &quot;b_1&quot;}}]}], &quot;calibration_set_id&quot;: &quot;d4b0afff-06b7-4157-a677-0f00cb34e429&quot;}}</longdescription>
</pkgmetadata>