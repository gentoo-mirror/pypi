<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==================AWS Lambda Logging==================.. image:: https://gitlab.com/hadrien/aws_lambda_logging/badges/master/build.svg.. image:: https://gitlab.com/hadrien/aws_lambda_logging/badges/master/coverage.svg?job=Run%20py.testBetter logging for aws lambda running on python runtime environment with ahighly opinionated JSON formatting to ease parsing on any logging system.Usage=====.. code::    import aws_lambda_logging    def handler(event, context):        aws_lambda_logging.setup(level='DEBUG')        ...You can separately set the logging level for Boto (defaults to the same level):.. code::    import aws_lambda_logging    def handler(event, context):        aws_lambda_logging.setup(level='DEBUG', boto_level='CRITICAL')        ...You can add keyword arguments to be logged each time, such as lambda requestid... code::    import aws_lambda_logging    def handler(event, context):        aws_lambda_logging.setup(level='DEBUG',                                 aws_request_id=context.get('aws_request_id'))        log.debug('Just a try!')        ...It will output JSON formatted message:.. code::    {        &quot;level&quot;: &quot;DEBUG&quot;,        &quot;timestamp&quot;: &quot;2016-10-03 13:27:57,438&quot;,        &quot;apigw_request_id&quot;: &quot;323fee86-896d-11e6-b7fd-2d914ea80962&quot;,        &quot;location&quot;: &quot;root.handler:6&quot;,        &quot;message&quot;: &quot;Just a try!&quot;    }You can input a JSON string:.. code::    log.debug('{&quot;Details&quot;: [1,2,3]}')It will output JSON formatted message with the JSON string embedded properly:.. code::    {        &quot;level&quot;: &quot;DEBUG&quot;,        &quot;timestamp&quot;: &quot;2016-10-03 13:27:57,438&quot;,        &quot;apigw_request_id&quot;: &quot;323fee86-896d-11e6-b7fd-2d914ea80962&quot;,        &quot;location&quot;: &quot;root.handler:6&quot;,        &quot;message&quot;: {            &quot;Details&quot;: [                1,                2,                3            ]        }    }You can input a dict:.. code::    log.debug({&quot;Details&quot;: [1,2,3]})It will output JSON formatted message with the dict values:.. code::    {        &quot;level&quot;: &quot;DEBUG&quot;,        &quot;timestamp&quot;: &quot;2016-10-03 13:27:57,438&quot;,        &quot;apigw_request_id&quot;: &quot;323fee86-896d-11e6-b7fd-2d914ea80962&quot;,        &quot;location&quot;: &quot;root.handler:6&quot;,        &quot;message&quot;: {            &quot;Details&quot;: [                1,                2,                3            ]        }    }Any values that can otherwise be serialisabled to JSON are coerced tostrings.  This behaviour can be changed by parsing a formatterfunction to the ``json_default`` keyword argument.</longdescription>
</pkgmetadata>