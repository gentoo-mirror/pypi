<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>base62======|Build Status| |Coveralls| |PyPI|A Python module for ``base62`` encoding. Ported from PHP code that I wrotein mid-2000, which can be found`here &lt;http://philosophical.one/posts/base62&gt;`__... |Build Status| image:: https://github.com/suminb/base62/actions/workflows/ci.yml/badge.svg   :target: https://github.com/suminb/base62/actions/workflows/ci.yml?query=branch%3Adevelop.. |PyPI| image:: https://img.shields.io/pypi/v/pybase62.svg   :target: https://pypi.python.org/pypi/pybase62.. |Coveralls| image:: https://coveralls.io/repos/github/suminb/base62/badge.svg?branch=master   :target: https://coveralls.io/github/suminb/base62?branch=developRationale---------When writing a web application, often times we would like to keep the URLsshort.::    http://localhost/posts/V1BiicwtThis certainly gives a more concise look than the following.::    http://localhost/posts/109237591284123This was the original motivation to write this module, but there shall be muchmore broader potential use cases of this module. The main advantage of``base62`` is that it is URL-safe (as opposed to ``base64``) due to the lack ofspecial characters such as '``/``' or '``=``'. Another key aspect is that thealphabetical orders of the original (unencoded) data is preserved when encoded.In other words, encoded data can be sorted without being decoded at all.Installation============``base62`` can be installed via ``pypi``. Unfortunately, the package name``base62`` on ``pypi`` had already been occupied by someone else, so we had togo by ``pybase62``.::    pip install pybase62Alternatively, you may clone the code to manually install it.::    git clone https://github.com/suminb/base62    cd base62 &amp;&amp; python setup.py installUsage=====The following section describes a basic usage of ``base62``... code:: python    &gt;&gt;&gt; import base62    &gt;&gt;&gt; base62.encode(34441886726)    'base62'    &gt;&gt;&gt; base62.decode('base62')    34441886726From version ``0.2.0``, ``base62`` supports ``bytes`` array encoding as well... code:: python    &gt;&gt;&gt; base62.encodebytes(b'\0')    0    &gt;&gt;&gt; base62.encodebytes(b'\xff\xff')    H31    &gt;&gt;&gt; base62.decodebytes('0')    b''    &gt;&gt;&gt; base62.decodebytes('1')    b'\x01'Some may be inclined to assume that they both take ``bytes`` types as inputdue to their namings. However, ``encodebytes()`` takes ``bytes`` typeswhereas ``decodebytes()`` takes ``str`` types as an input. They are intendedto be commutative, so that a *roundtrip* between both functions yields theoriginal value.Formally speaking, we say function *f* and *g* commute if *f∘g* = *g∘f* where*f(g(x))* = *(f∘g)(x)*.Therefore, we may expect the following relationships:* ``value == encodebytes(decodebytes(value))``* ``value == decodebytes(encodebytes(value))``Tests=====You may run some test cases to ensure all functionalities are operational.::    pytest -vIf ``pytest`` is not installed, you may want to run the following command:::    pip install -r tests/requirements.txtDeployment==========Deploy a source package (to `pypi &lt;https://pypi.org&gt;`_) as follows:::    python setup.py sdist upload</longdescription>
</pkgmetadata>