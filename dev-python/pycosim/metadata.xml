<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyCoSim================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;## Features- Importing an FMU file, getting information of the model description  and running a single FMU simulation,- Importing a system configuration, configuring output logging and  scenario, running co-simulation and retrieving the results,- Creating a system configuration, adding fmus, connections, initial  values## Install``` shpip install pycosim```## How to use### Creating the simulation instance using the given filesIn the case that you already have all the configuration files and fmufiles ready for the simulation, you can just import files to create thesimulation instance. From the simulation instance, use `run_simulation`method to run simulation. It returns the output instance which containslogging, error and result. The result is a dict of names of componentsas keys and time-series outputs as data.``` pythonimport osfrom pycosim.osp_command_line import LoggingLevelfrom pycosim.simulation import FMU, SimulationConfigurationimport pandaspandas.options.plotting.backend = &quot;plotly&quot;path_to_osp_system_strucuture_file = os.path.join(&quot;..&quot;, &quot;test_data&quot;, &quot;OspSystemStructureTest.xml&quot;)path_to_dir = os.path.dirname(path_to_osp_system_strucuture_file)simulation_config = SimulationConfiguration(    system_structure=path_to_osp_system_strucuture_file,    path_to_fmu=path_to_dir)```Note that the path to the directories that contain all the relevant FMUsshould be provided together with the source for the system structurefile. When the system is configured, you can run the simulation for agiven simulation time with default settings:``` pythonsimulation_output = simulation_config.run_simulation(    duration=10,    logging_level=LoggingLevel.info)print(f&quot;Logging: {simulation_output.log}&quot;)print(f&quot;Error: {simulation_output.error}&quot;)for name, output in simulation_output.result.items():    fig = output.plot(title=name)    fig.write_image(os.path.join(&quot;..&quot;, &quot;resources&quot;, f&quot;{name}_0.png&quot;))```    Logging: Output csv files will be saved in the following directory: C:\Users\keviny\AppData\Local\Temp\pycosim_tmp\sim_0bb5ed62-1e64-45a4-8e23-0f05dcfab787\    Simulation will run until {10} seconds.    Running simulation.    info: Using cache directory: &quot;C:\\Users\\keviny\\AppData\\Local\\cosim&quot;    info: [FMI Library: FMILIB] Loading 'win64' binary with 'default' platform types    info: [FMI Library: FMILIB] Loading 'win64' binary with 'default' platform types    info: [FMI Library: FMILIB] Loading 'win64' binary with 'default' platform types    info: 10% complete, t=1.000000    info: 20% complete, t=2.000000    info: 30% complete, t=3.000000    info: 40% complete, t=4.000000    info: 50% complete, t=5.000000    info: 60% complete, t=6.000000    info: 70% complete, t=7.000000    info: 80% complete, t=8.000000    info: 90% complete, t=9.000000    info: 100% complete, t=10.000000    Error: ![Chassis-Plot](/resources/chassis_0.png)![Chassis-Plot](/resources/wheel_0.png)![Chassis-Plot](/resources/ground_0.png)Default setting for the simulation is: - No scenario - No loggingconfiguration (All variables will be logged at each time step.) - Thesystem structure and output files are saved in the same directory as thetemporary one where FMUs are deployed. - Only warning from simulationsetting up and progress messages are logged.### Scenario configurationA scenario is a collection of events that override / bias / reset avariable of components in the target system. A scenario can be createdas follows:``` pythonfrom pyOSPParser.scenario import OSPScenario, OSPEventsimulation_end_time = 10simulation_config.scenario = OSPScenario(name='test_scenario', end=simulation_end_time)# Adding an event to the scenariosimulation_config.scenario.add_event(OSPEvent(    time=5,  # Time when the event happens    model='chassis',  # Name_of_the_component    variable='C.mChassis', # name_of_the_variable,    action=OSPEvent.OVERRIDE, # Type of actions among OVERRIDE, BIAS, RESET    value=19.4 # Value (only for OVERRIDE and BIAS)))```    &lt;pyOSPParser.scenario.OSPEvent at 0x1fe02485c40&gt;### Logging configurationA logging configuration specifies which variables will be logged asoutput of the simulation. A logging configuration can be defined usingOspLoggingConfiguration class:``` pythonfrom pyOSPParser.logging_configuration import OspVariableForLogging, OspSimulatorForLogging, OspLoggingConfiguration# Create a variable object for loggingvariables = [OspVariableForLogging(name=&quot;zChassis&quot;), OspVariableForLogging(name=&quot;p.e&quot;)]# Create a logging configuration of a componentname_of_component = 'chassis'logging_config_comp = OspSimulatorForLogging(    name=name_of_component,    decimation_factor=10, # Relative period of how often the logging is made. 10 means once every ten time steps    variables=variables)# Create a logging configuration instance for the systemsimulation_config.logging_config = OspLoggingConfiguration(simulators=[logging_config_comp])```You can set the logging level for the messages during setting up andrunning a simulation. You can do that by passing the[`LoggingLevel`](https://kevinksyTRD.github.io/pycosim/osp_command_line_interface.html#logginglevel)member when running the simulation. If not specified, it will be‘warning’ by default.Let’s run the simulation again and see how the new configurationaffected the outputs.``` pythonfrom pycosim.simulation import LoggingLevelsimulation_output = simulation_config.run_simulation(    duration=simulation_end_time,    logging_level=LoggingLevel.warning)print(f&quot;Logging: {simulation_output.log}&quot;)print(f&quot;Error: {simulation_output.error}&quot;)for name, output in simulation_output.result.items():    fig = output.plot(title=name)    fig.write_image(os.path.join(&quot;..&quot;, &quot;resources&quot;, f&quot;{name}_1.png&quot;))```![chassis-plot](/resources/chassis_1.png)![chassis-plot](/resources/wheel_1.png)![chassis-plot](/resources/ground_1.png)</longdescription>
</pkgmetadata>