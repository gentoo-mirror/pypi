<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># formio-data (Python)formio.js (JSON Form Builder) data API for Python.For information about the formio.js project, see https://github.com/formio/formio.js## Introduction**python-formio-data** is a Python package, which loads and transformsformio.js **Builder JSON** and **Form JSON** into **usable Python objects**.  It's mainaim is to provide easy access to a Form its components/fields, alsocaptured as **Python objects**, which makes this API very versatile and usable.**Notes about terms:**  - **Builder:** The Form Builder which is the design/blueprint of a Form.  - **Form:** A filled-in Form, aka Form submission.  - **Component:** Input (field) or layout component in the Form Builder and Form.## Features  - Compatible with Python 3.6 and later  - Constructor of the **Builder** and **Form** class, only requires    the JSON and an optional language code for translations.  - Get a Form object its Components as a usable object e.g. datetime, boolean, dict (for select component) etc.  - Open source (MIT License)## InstallationThe source code is currently hosted on GitHub at:https://github.com/novacode-nl/python-formio-data### PyPI - Python Package IndexBinary installers for the latest released version are available at the [PythonPackage Index](https://pypi.python.org/pypi/formio-data)```shpip(3) install formio-data```#### Optional dependenciesTo support conditional visibility using JSON logic, you can installthe `json-logic-qubit` package (the `json-logic` package it is forkedoff of is currently unmaintained).  It's also possible to install itvia the pip feature `json_logic` like so:```shpip(3) install -U formio-data[json_logic]```### Source Install with Poetry (recommended)Convenient for developers. Also useful for running the (unit)tests.```shgit clone git@github.com:novacode-nl/python-formio-data.gitpoetry install```#### Optional dependenciesWhen working in the project itself, use```shpoetry install -E json_logic```### Source Install with pipOptional dependencies need to be installed separately.```shpip(3) install -U -e python-formio-data```## Using direnvYou can use [nixpkgs](https://nixos.org/) to run a self-containedPython environment without any additional setup.  Once you'veinstalled nixpkgs, switch into the directory and type &quot;nix-shell&quot; toget a shell from which the correct Python with packages is available.If you're using [direnv](https://direnv.net/), use `direnv allow`after changing into the project directory and you're good to go.  Alsoconsider [nix-direnv](https://github.com/nix-community/nix-direnv) tospeed up the experience (it can re-use a cached local installation).## License[MIT](LICENSE)## ContributingAll contributions, bug reports, bug fixes, documentation improvements, enhancements and ideas are welcome.## Usage examplesFor more examples of usage, see the unit-tests.``` python&gt;&gt; from formiodata import Builder, Form&gt;&gt;# builder_json is a formio.js Builder JSON document (text/string)# form_json is a formio.js Form JSON document (text/string)&gt;&gt;&gt;&gt; builder = Builder(builder_json)&gt;&gt; form = Form(builder, form_json)################### input components################### textfield label&gt;&gt; print(form.input_components['firstname'].label)'First Name'# textfield value&gt;&gt; print(form.input_components['firstname'].value)'Bob'# datetime label&gt;&gt; print(form.input_components['birthday'].label)'Birthday'# datetime value&gt;&gt; print(form.input_components['birthday'].value)datetime.date(2009 10 16)# datagrid (rows property)&gt;&gt; print(form.input_components['datagridMeasurements'].rows)[  {'measurementDatetime': &lt;datetimeComponent&gt;, 'measurementFahrenheit': &lt;numberComponent&gt;},   {'measurementDatetime': &lt;datetimeComponent&gt;, 'measurementFahrenheit': &lt;numberComponent&gt;}]&gt;&gt; for row in form.input_components['datagridMeasurements'].rows:&gt;&gt;    dtime = row['measurementDatetime']&gt;&gt;    fahrenheit = row['measurementFahrenheit']&gt;&gt;    print(%s: %s, %s: %s' % (dt.label, dt.value, fahrenheit.label, fahrenheit.value))Datetime: datetime.datetime(2021, 5, 8, 11, 39, 0, 296487), Fahrenheit: 122Datetime: datetime.datetime(2021, 5, 8, 11, 41, 5, 919943), Fahrenheit: 131# alternative example, by getattr&gt;&gt; print(form.data.firstname.label)'First Name'&gt;&gt; print(form.data.firstname.value)'Bob'################################## components (layout, input etc.)################################## columns&gt;&gt; print(form.components['addressColumns'])&lt;columnsComponent&gt;&gt;&gt; print(form.components['addressColumns'].rows)[   {'firstName': &lt;textfieldComponent&gt;, 'lastName: &lt;textfieldComponent&gt;},   {'email': &lt;emailComponent&gt;, 'companyName: &lt;textfieldComponent&gt;}]```## Unit tests**Note:**Internet access is recommended for running the `filecStorageUrlComponentTestCase`, because this also tests the URL Storage (type).\If no internet access, this test won't fail and a WARNING shall be logged regarding a ConnectionError.### Run all unittestsFrom toplevel directory:```poetry install -E json_logic  # if you haven't alreadypoetry run python -m unittest```### Run component unittestsAll Components, from toplevel directory:```poetry run python -m unittest tests/test_component_*.py```Nested components (complexity), from toplevel directory:```poetry run python -m unittest tests/test_nested_components.py```### Run specific component unittest```poetry run python -m unittest tests.test_component_day.dayComponentTestCase.test_get_form_dayMonthYear```</longdescription>
</pkgmetadata>