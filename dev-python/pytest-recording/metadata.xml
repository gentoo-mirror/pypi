<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytest-recording================|codecov| |Build| |Version| |Python versions| |License|A pytest plugin that records network interactions in your tests via VCR.py.Features--------- Straightforward ``pytest.mark.vcr``, that reflects ``VCR.use_cassettes`` API;- Combining multiple VCR cassettes;- Network access blocking;- The ``rewrite`` recording mode that rewrites cassettes from scratch.Usage-----.. code:: python    import pytest    import requests    # cassettes/{module_name}/test_single.yaml will be used    @pytest.mark.vcr    def test_single():        assert requests.get(&quot;http://httpbin.org/get&quot;).text == '{&quot;get&quot;: true}'    # cassettes/{module_name}/example.yaml will be used    @pytest.mark.default_cassette(&quot;example.yaml&quot;)    @pytest.mark.vcr    def test_default():        assert requests.get(&quot;http://httpbin.org/get&quot;).text == '{&quot;get&quot;: true}'    # these cassettes will be used in addition to the default one    @pytest.mark.vcr(&quot;/path/to/ip.yaml&quot;, &quot;/path/to/get.yaml&quot;)    def test_multiple():        assert requests.get(&quot;http://httpbin.org/get&quot;).text == '{&quot;get&quot;: true}'        assert requests.get(&quot;http://httpbin.org/ip&quot;).text == '{&quot;ip&quot;: true}'Run your tests:.. code:: bash    pytest --record-mode=once test_network.pyDefault recording mode~~~~~~~~~~~~~~~~~~~~~~``pytest-recording`` uses the ``none`` VCR recording mode by default to prevent unintentional network requests.To allow them you need to pass a different recording mode (e.g. ``once``) via the ``--record-mode`` CLI option to your test command.See more information about available recording modes in the `official VCR documentation &lt;https://vcrpy.readthedocs.io/en/latest/usage.html#record-modes&gt;`_Configuration~~~~~~~~~~~~~You can provide the recording configuration with the ``vcr_config`` fixture, which could be any scope - ``session``,``package``, ``module``, or ``function``. It should return a dictionary that will be passed directly to ``VCR.use_cassettes``under the hood... code:: python    import pytest    @pytest.fixture(scope=&quot;module&quot;)    def vcr_config():        return {&quot;filter_headers&quot;: [&quot;authorization&quot;]}For more granular control you need to pass these keyword arguments to individual ``pytest.mark.vcr`` marks, and in this caseall arguments will be merged into a single dictionary with the following priority (low -&gt; high):- ``vcr_config`` fixture- all marks from the most broad scope (&quot;session&quot;) to the most narrow one (&quot;function&quot;)Example:.. code:: python    import pytest    pytestmark = [pytest.mark.vcr(ignore_localhost=True)]    @pytest.fixture(scope=&quot;module&quot;)    def vcr_config():        return {&quot;filter_headers&quot;: [&quot;authorization&quot;]}    @pytest.mark.vcr(filter_headers=[])    def test_one():        ...    @pytest.mark.vcr(filter_query_parameters=[&quot;api_key&quot;])    def test_two():        ...Resulting VCR configs for each test:- ``test_one`` - ``{&quot;ignore_localhost&quot;: True, &quot;filter_headers&quot;: []}``- ``test_two`` - ``{&quot;ignore_localhost&quot;: True, &quot;filter_headers&quot;: [&quot;authorization&quot;], &quot;filter_query_parameters&quot;: [&quot;api_key&quot;]}``You can get access to the used ``VCR`` instance via ``pytest_recording_configure`` hook. It might be useful for registeringcustom matchers, persisters, etc.:.. code:: python    # conftest.py    def jurassic_matcher(r1, r2):        assert r1.uri == r2.uri and &quot;JURASSIC PARK&quot; in r1.body, \            &quot;required string (JURASSIC PARK) not found in request body&quot;    def pytest_recording_configure(config, vcr):        vcr.register_matcher(&quot;jurassic&quot;, jurassic_matcher)You can disable the VCR.py integration entirely by passing the ``--disable-recording`` CLI option.Rewrite record mode~~~~~~~~~~~~~~~~~~~It is possible to rewrite a cassette from scratch and not extend it with new entries as it works now with the ``all`` record mode from VCR.py.However, it will rewrite only the default cassette and won't touch extra cassettes... code:: python    import pytest    @pytest.fixture(scope=&quot;module&quot;)    def vcr_config():        return {&quot;record_mode&quot;: &quot;rewrite&quot;}Or via command-line option:.. code:: bash    $ pytest --record-mode=rewrite tests/Blocking network access~~~~~~~~~~~~~~~~~~~~~~~To have more confidence that your tests will not go over the wire, you can block it with ``pytest.mark.block_network`` mark:.. code:: python    import pytest    import requests    @pytest.mark.block_network    def test_multiple():        assert requests.get(&quot;http://httpbin.org/get&quot;).text == '{&quot;get&quot;: true}'    ...    # in case of access    RuntimeError: Network is disabledBesides marks, the network access could be blocked globally with ``--block-network`` command-line option.However, if VCR.py recording is enabled, the network is not blocked for tests with ``pytest.mark.vcr``.Example:.. code:: python    import pytest    import requests    @pytest.mark.vcr    def test_multiple():        assert requests.get(&quot;http://httpbin.org/get&quot;).text == '{&quot;get&quot;: true}'Run ``pytest``:.. code:: bash    $ pytest --record-mode=once --block-network tests/The network blocking feature supports ``socket``-based transports and ``pycurl``.It is possible to allow access to specified hosts during network blocking:.. code:: python    import pytest    import requests    @pytest.mark.block_network(allowed_hosts=[&quot;httpbin.*&quot;])    def test_access():        assert requests.get(&quot;http://httpbin.org/get&quot;).text == '{&quot;get&quot;: true}'        with pytest.raises(RuntimeError, match=r&quot;^Network is disabled$&quot;):            requests.get(&quot;http://example.com&quot;)Or via command-line option:.. code:: bash    $ pytest --record-mode=once --block-network --allowed-hosts=httpbin.*,localhost tests/Or via `vcr_config` fixture:.. code:: python    import pytest    @pytest.fixture(autouse=True)    def vcr_config():        return {&quot;allowed_hosts&quot;: [&quot;httpbin.*&quot;]}Additional resources--------------------Looking for more examples? Check out `this article &lt;https://code.kiwi.com/pytest-cassettes-forget-about-mocks-or-live-requests-a9336e1caee6&gt;`_ about ``pytest-recording``.Contributing------------To run the tests:.. code:: bash    $ tox -p allFor more information, take a look at `our contributing guide &lt;https://github.com/kiwicom/pytest-recording/blob/master/CONTRIBUTING.rst&gt;`_Python support--------------Pytest-recording supports:- CPython 3.7, 3.8, 3.9, 3.10 and 3.11- PyPy 7 (3.6)License-------The code in this project is licensed under `MIT license`_. By contributing to ``pytest-recording``, you agree that your contributions will be licensed under its MIT license... |codecov| image:: https://codecov.io/gh/kiwicom/pytest-recording/branch/master/graph/badge.svg   :target: https://codecov.io/gh/kiwicom/pytest-recording.. |Build| image:: https://github.com/kiwicom/pytest-recording/actions/workflows/build.yml/badge.svg   :target: https://github.com/kiwicom/pytest-recording/actions?query=workflow%3Abuild.. |Version| image:: https://img.shields.io/pypi/v/pytest-recording.svg   :target: https://pypi.org/project/pytest-recording/.. |Python versions| image:: https://img.shields.io/pypi/pyversions/pytest-recording.svg   :target: https://pypi.org/project/pytest-recording/.. |License| image:: https://img.shields.io/pypi/l/pytest-recording.svg   :target: https://opensource.org/licenses/MIT.. _MIT license: https://opensource.org/licenses/MIT</longdescription>
</pkgmetadata>