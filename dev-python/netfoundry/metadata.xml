<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NetFoundry Python ModuleThis module has a general-purpose library for using the NetFoundry API and installs the CLI `nfctl`.## User Guide[Python module guide](https://developer.netfoundry.io/guides/python/)## Find the Version```bash $ python3 -m netfoundry.versionv5.2.0 # or $ nfctl versionv5.2.0```## Play the demoThis creates a demo network with your API account file named `credentials.json` stored in the current directory or the XDG config directory e.g. `~/.config/netfoundry/`. Learn how to obtain and use an API account for your NetFoundry organization in [the Authentication Guide](https://developer.netfoundry.io/guides/authentication/)```bashnfctl demo```## Create network snippet from demo.py```python#!/usr/bin/env python3import netfoundry# user-default path is ~/.netfoundry/organization = netfoundry.Organization(credentials=&quot;credentials.json&quot;)# use some network group, default is to use the first and there's typically only onenetwork_group = netfoundry.NetworkGroup(organization)# create a networknetwork_name = &quot;BibbidiBobbidiBoo&quot;if network_group.network_exists(network_name):    # use the network    network = netfoundry.Network(network_group, network_name=network_name)    network.wait_for_status(&quot;PROVISIONED&quot;)else:    network_id = network_group.create_network(name=network_name)['id']    network = netfoundry.Network(network_group, network_id=network_id)    network.wait_for_status(&quot;PROVISIONED&quot;)```## Publish a new version of the module[![Video Tour of Release Procedure](https://img.youtube.com/vi/RlIa2mv8YIM/0.jpg)](https://youtu.be/RlIa2mv8YIM)```00:00 Welcome Pythonistas00:50 Determine next version number01:30 GitFlow Release Start02:10 Project Conventional Release Branch Name in Actions Workflow02:30 Make a Change to Patch the Module04:00 Git Commit the Change04:30 GitFlow Publish Release to Git Remote05:00 Create Pull Request05:30 GitHub Actions Checks Triggered by Pull Request06:00 Local testing with &quot;editable&quot; module and TestPyPi09:00 Complete Pull Request09:30 GitFlow Release Finish and Push Git Tags10:30 GitHub Create Release12:00 Verify Published Artifacts in PyPi and Hub12:30 PyPi Upgrade Gets New Version13:30 Docker Run Check Version```</longdescription>
</pkgmetadata>