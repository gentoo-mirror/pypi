<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h2 align=&quot;center&quot;&gt;Health Check for HTTP APIs&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/healthpy/&quot;&gt;&lt;img alt=&quot;pypi version&quot; src=&quot;https://img.shields.io/pypi/v/healthpy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://travis-ci.com/Colin-b/healthpy&quot;&gt;&lt;img alt=&quot;Build status&quot; src=&quot;https://api.travis-ci.com/Colin-b/healthpy.svg?branch=master&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://travis-ci.com/Colin-b/healthpy&quot;&gt;&lt;img alt=&quot;Coverage&quot; src=&quot;https://img.shields.io/badge/coverage-100%25-brightgreen&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://travis-ci.com/Colin-b/healthpy&quot;&gt;&lt;img alt=&quot;Number of tests&quot; src=&quot;https://img.shields.io/badge/tests-140 passed-blue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/healthpy/&quot;&gt;&lt;img alt=&quot;Number of downloads&quot; src=&quot;https://img.shields.io/pypi/dm/healthpy&quot;&gt;&lt;/a&gt;&lt;/p&gt;Create an health check endpoint on your REST API following [Health Check RFC](https://inadarei.github.io/rfc-healthcheck/) draft version 4.- [Perform checks](#perform-checks)  - [Of an external HTTP resource](#http)  - [Of a redis server](#redis)- [Return health check result](#return-result)  - [Aggregate multiple statuses](#compute-status-from-multiple-statuses)  - [Use a custom status](#using-custom-status)  - [HTTP response body](#http-response-body)  - [HTTP response status code](#http-response-status-code)- [Endpoint](#endpoint)  - [Starlette](#starlette)  - [Flask-RestX](#flask-restx)## Perform checksIn case you have external dependencies, you should check the health of those dependencies.### HTTPIf you have an external HTTP resource, you can check its health, as in the following sample:```pythonimport healthpy.httpxstatus, checks = healthpy.httpx.check(&quot;petstore&quot;, &quot;https://petstore3.swagger.io/api/v3/openapi.json&quot;)```Note: [httpx](https://pypi.python.org/pypi/httpx) module must be installed to perform HTTP health checks.Alternatively, you can use [requests](https://pypi.python.org/pypi/requests) to perform the exact same check:```pythonimport healthpy.requestsstatus, checks = healthpy.requests.check(&quot;petstore&quot;, &quot;https://petstore3.swagger.io/api/v3/openapi.json&quot;)```### RedisIf you rely on redis, you should check its health.[redis](https://pypi.python.org/pypi/redis) module must be installed to perform Redis health checks.```pythonimport healthpy.redisstatus, checks = healthpy.redis.check(&quot;redis://redis_url&quot;, &quot;redis_key&quot;)```## Return resultOnce all checks have been performed you should return the result to your client.### Compute status from multiple statusesIf you performed more than one check, you have to compute an aggregated status from all the checks.```pythonimport healthpystatus1 = healthpy.pass_status status2 = healthpy.warn_statusstatusN = healthpy.fail_statusstatus = healthpy.status(status1, status2, statusN)```### Using custom statusBy default pass status is &quot;pass&quot;, warn status is &quot;warn&quot; and fail status is &quot;fail&quot;.It can be tweaked by setting the value of healthpy.*_status as in the following sample:```pythonimport healthpyhealthpy.pass_status = &quot;ok&quot;healthpy.warn_status = &quot;custom&quot;healthpy.fail_status = &quot;error&quot;```### HTTP response bodyHTTP response body can be retrieved as a dictionary to be returned as JSON.```pythonimport healthpystatus = healthpy.pass_status  # replace with the aggregated statuschecks = {}  # replace with the computed checksbody = healthpy.response_body(status, checks=checks)```Checks results are not mandatory in the response.```pythonimport healthpystatus = healthpy.pass_status  # replace with the aggregated statusbody = healthpy.response_body(status)```### HTTP response status codeHTTP response status code can be retrieved as an integer.```pythonimport healthpystatus = healthpy.pass_status  # replace with the aggregated statusstatus_code = healthpy.response_status_code(status)```#### ConsulHTTP response status code should be a bit different for [Consul](https://www.consul.io/docs/agent/checks.html) health checks.```pythonimport healthpystatus = healthpy.pass_status  # replace with the aggregated statusstatus_code = healthpy.consul_response_status_code(status)```## Endpoint### StarletteAn helper function is available to create a [starlette](https://www.starlette.io) endpoint for [Consul](https://www.consul.io/docs/agent/checks.html) health check.```pythonfrom starlette.applications import Starletteimport healthpyimport healthpy.httpximport healthpy.redisfrom healthpy.starlette import add_consul_health_endpointapp = Starlette()async def health_check():    # TODO Replace by your own checks.    status_1, checks_1 = healthpy.httpx.check(&quot;my external dependency&quot;, &quot;http://url_to_check&quot;)    status_2, checks_2 = healthpy.redis.check(&quot;redis://redis_url&quot;, &quot;key_to_check&quot;)    return healthpy.status(status_1, status_2), {**checks_1, **checks_2}# /health endpoint will call the health_check coroutine.add_consul_health_endpoint(app, health_check)```Note: [starlette](https://pypi.python.org/pypi/starlette) module must be installed.### Flask-RestXAn helper function is available to create a [Flask-RestX](https://flask-restx.readthedocs.io/en/latest/) endpoint for health check.```pythonimport flaskimport flask_restximport healthpyimport healthpy.httpximport healthpy.redisfrom healthpy.flask_restx import add_health_endpointapp = flask.Flask(__name__)api = flask_restx.Api(app)async def health_check():    # TODO Replace by your own checks.    status_1, checks_1 = healthpy.httpx.check(&quot;my external dependency&quot;, &quot;http://url_to_check&quot;)    status_2, checks_2 = healthpy.redis.check(&quot;redis://redis_url&quot;, &quot;key_to_check&quot;)    return healthpy.status(status_1, status_2), {**checks_1, **checks_2}# /health endpoint will call the health_check coroutine.add_health_endpoint(api, health_check)```Note: [flask-restx](https://pypi.python.org/pypi/flask-restx) module must be installed.#### Consul Service Health checkAn helper function is available to create a [Flask-RestX](https://flask-restx.readthedocs.io/en/latest/) endpoint for [Consul](https://www.consul.io/docs/agent/checks.html) health check.```pythonimport flaskimport flask_restximport healthpyimport healthpy.httpximport healthpy.redisfrom healthpy.flask_restx import add_consul_health_endpointapp = flask.Flask(__name__)api = flask_restx.Api(app)async def health_check():    # TODO Replace by your own checks.    status_1, checks_1 = healthpy.httpx.check(&quot;my external dependency&quot;, &quot;http://url_to_check&quot;)    status_2, checks_2 = healthpy.redis.check(&quot;redis://redis_url&quot;, &quot;key_to_check&quot;)    return healthpy.status(status_1, status_2), {**checks_1, **checks_2}# /health endpoint will call the health_check coroutine.add_consul_health_endpoint(api, health_check)```Note: [flask-restx](https://pypi.python.org/pypi/flask-restx) module must be installed.## TestingA `pytest` fixture can be used to mock the datetime returned in http health check.```pythonfrom healthpy.testing import mock_http_health_datetimedef test_http(mock_http_health_datetime):    # Time will be returned as &quot;2018-10-11T15:05:05.663979&quot;    pass  # Add your test calling healthpy.http.check```## How to install1. [python 3.7+](https://www.python.org/downloads/) must be installed2. Use pip to install module:```shpython -m pip install healthpy```</longdescription>
</pkgmetadata>