<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Yak-toto[![PyPI](https://img.shields.io/pypi/v/yak-server?label=stable)](https://pypi.org/project/yak-server/)[![Python Versions](https://img.shields.io/pypi/pyversions/yak-server)](https://pypi.org/project/yak-server/)[![codecov](https://codecov.io/gh/yak-toto/yak-server/branch/master/graph/badge.svg?token=EZZK5SY5BL)](https://codecov.io/gh/yak-toto/yak-server)[![üîê CodeQL](https://github.com/yak-toto/yak-server/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/yak-toto/yak-server/actions/workflows/codeql-analysis.yml)## Requisites- Ubuntu 22.04- MySQL 8.0.30## How to build the project### DatabaseInstall and start mysql server on port 3306. Add a database named `yak_toto`. In root folder, create a dotenv file named `.flaskenv` and fill your MySQL user name, password and database. When backend start, this configuration is automaticaly loaded.```textMYSQL_USER_NAME=my_user_nameMYSQL_PASSWORD=my_passwordMYSQL_DB=my_database_name```You can also set MySQL port by adding `MYSQL_PORT=my_port` to `.flaskenv` file. If not set, it will be 3306 by default.### BackendRun your project in a Python env is highly recommend. You can use `venv` with the following command:```bashpython3 -m venv &lt;my_env_name&gt;```Then activate it with:```bashsource &lt;my_env_name&gt;/bin/activate```Fetch all packages using poetry with the following command:```bashpoetry install```Before starting the backend, add `JWT_SECRET_KEY` and `JWT_EXPIRATION_TIME` in `.flaskenv` same as the MySQL user name and password. Aslogin system is using JSON Web Token, a secret key is required and an expiration time (in seconds). To generate one, you can use the python built-in `secrets` module.```py&gt;&gt;&gt; import secrets&gt;&gt;&gt; secrets.token_hex(16)'9292f79e10ed7ed03ffad66d196217c4'``````textJWT_SECRET_KEY=9292f79e10ed7ed03ffad66d196217c4```Also, automatic backup can be done through `yak_server/cli/backup_database` script. It can be run using `flask db backup`.Finally, flask needs some configuration to start. Please add `FLASK_APP=yak_server` variable to indicate main location. Last thing, for development environment, debug needs to be activated with a addditional environment variable:```textFLASK_DEBUG=1```And then start backend with:```bashflask run```### Data initializationTo run local testing, you can use the script `create_database.py`, `initialize_database.py` and `create_admin.py` located in `yak_server/cli` folder. To select, set `COMPETITION` environment variable in `.flaskenv`. It will read data from `yak_server/data/{COMPETITION}/`.### TestingTo set up test, please add a MySQL database named `yak_toto_test`. It will contain all the records created during unit tests. This database is cleaned everytime you run test. That's why a different database is created to avoid deleting records you use for your local testing.Yak-server is using `pytest` to run tests and can run them using `poetry run pytest` command into root folder.</longdescription>
</pkgmetadata>