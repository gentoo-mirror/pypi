<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ESPnet Model Zoo[![PyPI version](https://badge.fury.io/py/espnet-model-zoo.svg)](https://badge.fury.io/py/espnet-model-zoo)[![Python Versions](https://img.shields.io/pypi/pyversions/espnet_model_zoo.svg)](https://pypi.org/project/espnet_model_zoo/)[![Downloads](https://pepy.tech/badge/espnet_model_zoo)](https://pepy.tech/project/espnet_model_zoo)[![GitHub license](https://img.shields.io/github/license/espnet/espnet_model_zoo.svg)](https://github.com/espnet/espnet_model_zoo)[![Unitest](https://github.com/espnet/espnet_model_zoo/workflows/Unitest/badge.svg)](https://github.com/espnet/espnet_model_zoo/actions?query=workflow%3AUnitest)[![Model test](https://github.com/espnet/espnet_model_zoo/workflows/Model%20test/badge.svg)](https://github.com/espnet/espnet_model_zoo/actions?query=workflow%3A%22Model+test%22)[![codecov](https://codecov.io/gh/espnet/espnet_model_zoo/branch/master/graph/badge.svg)](https://codecov.io/gh/espnet/espnet_model_zoo)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Utilities managing the pretrained models created by [ESPnet](https://github.com/espnet/espnet). This function is inspired by the [Asteroid pretrained model function](https://github.com/mpariente/asteroid/blob/master/docs/source/readmes/pretrained_models.md).- **From version 0.1.0, the huggingface models can be also used**: https://huggingface.co/models?filter=espnet- Zenodo community: https://zenodo.org/communities/espnet/- Registered models: [table.csv](espnet_model_zoo/table.csv)## Install```pip install torchpip install espnet_model_zoo```## Python API for inference`model_name` in the following section should be `huggingface_id` or one of the tags in the [table.csv](espnet_model_zoo/table.csv).Or you can directly provide zenodo URL (e.g., `https://zenodo.org/record/xxxxxxx/files/hogehoge.zip?download=1`).### ASR```pythonimport soundfilefrom espnet2.bin.asr_inference import Speech2Textspeech2text = Speech2Text.from_pretrained(    &quot;model_name&quot;,    # Decoding parameters are not included in the model file    maxlenratio=0.0,    minlenratio=0.0,    beam_size=20,    ctc_weight=0.3,    lm_weight=0.5,    penalty=0.0,    nbest=1)# Confirm the sampling rate is equal to that of the training corpus.# If not, you need to resample the audio data before inputting to speech2textspeech, rate = soundfile.read(&quot;speech.wav&quot;)nbests = speech2text(speech)text, *_ = nbests[0]print(text)```### TTS```pythonimport soundfilefrom espnet2.bin.tts_inference import Text2Speechtext2speech = Text2Speech.from_pretrained(&quot;model_name&quot;)speech = text2speech(&quot;foobar&quot;)[&quot;wav&quot;]soundfile.write(&quot;out.wav&quot;, speech.numpy(), text2speech.fs, &quot;PCM_16&quot;)```### Speech separation```pythonimport soundfilefrom espnet2.bin.enh_inference import SeparateSpeechseparate_speech = SeparateSpeech.from_pretrained(    &quot;model_name&quot;,    # for segment-wise process on long speech    segment_size=2.4,    hop_size=0.8,    normalize_segment_scale=False,    show_progressbar=True,    ref_channel=None,    normalize_output_wav=True,)# Confirm the sampling rate is equal to that of the training corpus.# If not, you need to resample the audio data before inputting to speech2textspeech, rate = soundfile.read(&quot;long_speech.wav&quot;)waves = separate_speech(speech[None, ...], fs=rate)```This API allows processing both short audio samples and long audio samples. For long audio samples, you can set the value of arguments segment_size, hop_size (optionally normalize_segment_scale and show_progressbar) to perform segment-wise speech enhancement/separation on the input speech. Note that the segment-wise processing is disabled by default.&lt;details&gt;&lt;summary&gt;For old ESPnet (&lt;=10.1) &lt;/summary&gt;&lt;div&gt;### ASR```pythonimport soundfilefrom espnet_model_zoo.downloader import ModelDownloaderfrom espnet2.bin.asr_inference import Speech2Textd = ModelDownloader()speech2text = Speech2Text(    **d.download_and_unpack(&quot;model_name&quot;),    # Decoding parameters are not included in the model file    maxlenratio=0.0,    minlenratio=0.0,    beam_size=20,    ctc_weight=0.3,    lm_weight=0.5,    penalty=0.0,    nbest=1)```### TTS```pythonimport soundfilefrom espnet_model_zoo.downloader import ModelDownloaderfrom espnet2.bin.tts_inference import Text2Speechd = ModelDownloader()text2speech = Text2Speech(**d.download_and_unpack(&quot;model_name&quot;))```### Speech separation```pythonimport soundfilefrom espnet_model_zoo.downloader import ModelDownloaderfrom espnet2.bin.enh_inference import SeparateSpeechd = ModelDownloader()separate_speech = SeparateSpeech(    **d.download_and_unpack(&quot;model_name&quot;),    # for segment-wise process on long speech    segment_size=2.4,    hop_size=0.8,    normalize_segment_scale=False,    show_progressbar=True,    ref_channel=None,    normalize_output_wav=True,)```&lt;/div&gt;&lt;/details&gt;## Instruction for ModelDownloader```pythonfrom espnet_model_zoo.downloader import ModelDownloaderd = ModelDownloader(&quot;~/.cache/espnet&quot;)  # Specify cachedird = ModelDownloader()  # &lt;module_dir&gt; is used as cachedir by default```To obtain a model, you need to give a `huggingface_id`model` or a tag , which is listed in [table.csv](espnet_model_zoo/table.csv).```python&gt;&gt;&gt; d.download_and_unpack(&quot;kamo-naoyuki/mini_an4_asr_train_raw_bpe_valid.acc.best&quot;){&quot;asr_train_config&quot;: &lt;config path&gt;, &quot;asr_model_file&quot;: &lt;model path&gt;, ...}```You can specify the revision if it's huggingface_id giving with `@`:```python&gt;&gt;&gt; d.download_and_unpack(&quot;kamo-naoyuki/mini_an4_asr_train_raw_bpe_valid.acc.best@&lt;revision&gt;&quot;){&quot;asr_train_config&quot;: &lt;config path&gt;, &quot;asr_model_file&quot;: &lt;model path&gt;, ...}```Note that if the model already exists, you can skip downloading and unpacking.You can also get a model with certain conditions.```pythond.download_and_unpack(task=&quot;asr&quot;, corpus=&quot;wsj&quot;)```If multiple models are found with the condition, the last model is selected.You can also specify the condition using &quot;version&quot; option.```pythond.download_and_unpack(task=&quot;asr&quot;, corpus=&quot;wsj&quot;, version=-1)  # Get the last modeld.download_and_unpack(task=&quot;asr&quot;, corpus=&quot;wsj&quot;, version=-2)  # Get previous model```You can also obtain it from the URL directly.```pythond.download_and_unpack(&quot;https://zenodo.org/record/...&quot;)```If you need to use a local model file using this API, you can also give it.```pythond.download_and_unpack(&quot;./some/where/model.zip&quot;)```In this case, the contents are also expanded in the cache directory,but the model is identified by the file path,so if you move the model to somewhere and unpack again,it's treated as another model,thus the contents are expanded again at another place.## Query model namesYou can view the model names from our Zenodo community, https://zenodo.org/communities/espnet/,or using `query()`.  All information are written in [table.csv](espnet_model_zoo/table.csv).```pythond.query(&quot;name&quot;)```You can also show them with specifying certain conditions.```pythond.query(&quot;name&quot;, task=&quot;asr&quot;)```## Command line tools- `espnet_model_zoo_query`    ```sh    # Query model name    espnet_model_zoo_query task=asr corpus=wsj    # Show all model name    espnet_model_zoo_query    # Query the other key    espnet_model_zoo_query --key url task=asr corpus=wsj    ```- `espnet_model_zoo_download`    ```sh    espnet_model_zoo_download &lt;model_name&gt;  # Print the path of the downloaded file    espnet_model_zoo_download --unpack true &lt;model_name&gt;   # Print the path of unpacked files    ```- `espnet_model_zoo_upload`    ```sh    export ACCESS_TOKEN=&lt;access_token&gt;    espnet_zenodo_upload \        --file &lt;packed_model&gt; \        --title &lt;title&gt; \        --description &lt;description&gt; \        --creator_name &lt;your-git-account&gt;    ```## Use pretrained model in ESPnet recipe```sh# e.g. ASR WSJ taskgit clone https://github.com/espnet/espnetpip install -e .cd egs2/wsj/asr1./run.sh --skip_data_prep false --skip_train true --download_model kamo-naoyuki/wsj```## Register your model### Huggingface1. Upload your model using huggingface API    Coming soon...1. Create a Pull Request to modify [table.csv](espnet_model_zoo/table.csv)    The models registered in this `table.csv`, the model are tested in the CI.    Indeed, the model can be downloaded without modification `table.csv`.1. (Administrator does) Increment the third version number of [setup.py](setup.py), e.g. 0.0.3 -&gt; 0.0.41. (Administrator does) Release new version### Zenodo (Obsolete)1. Upload your model to Zenodo    You need to [signup to Zenodo](https://zenodo.org/) and [create an access token](https://zenodo.org/account/settings/applications/tokens/new/) to upload models.    You can upload your own model by using `espnet_model_zoo_upload` command freely,    but we normally upload a model using [recipes](https://github.com/espnet/espnet/blob/master/egs2/TEMPLATE).1. Create a Pull Request to modify [table.csv](espnet_model_zoo/table.csv)    You need to append your record at the last line.1. (Administrator does) Increment the third version number of [setup.py](setup.py), e.g. 0.0.3 -&gt; 0.0.41. (Administrator does) Release new version</longdescription>
</pkgmetadata>