<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div class=&quot;badges&quot;&gt;    &lt;a href=&quot;http://travis-ci.org/gecBurton/django-rest-framework-jsonschema&quot;&gt;        &lt;img src=&quot;https://travis-ci.org/gecBurton/django-rest-framework-jsonschema.svg?branch=master&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/djangorestframework-jsonschema&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/djangorestframework-jsonschema.svg&quot;&gt;    &lt;/a&gt;&lt;/div&gt;---# djangorestframework-jsonschema---## OverviewThis package provides a management command that builds a Django-REST-Framework solution from a JSONSchema specification.## Requirements* Python (3.8+)* Django (3.0+)* Django-Rest-Framework (3.11)* JSONSchema (3.2)* Jinja2 (2.11)## InstallationInstall using `pip`...```bash$ pip install djangorestframework-jsonschema```This app needs to included it in the `INSTALLED_APPS` of your project, it shouldcome after `rest_framework` and `django_filters`, both of which are required,but before anything specific to your project.```pythonINSTALLED_APPS = [    &quot;django.contrib.admin&quot;,    ...    &quot;rest_framework&quot;,    &quot;django_filters&quot;,    &quot;jsonschema2dj&quot;,    ...]```## ExampleSave the following as `schema.json` in a new DRF app `example_app````json{  &quot;definitions&quot;: {    &quot;identifiers&quot;: {      &quot;properties&quot;: {        &quot;ISBN&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;pattern&quot;: &quot;[0-9]*[-| ][0-9]*[-| ][0-9]*[-| ][0-9]*[-| ][0-9]*&quot;        },        &quot;Dewey Decimal Classification&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;pattern&quot;: &quot;\\d{3}|\\d{3}\\.\\d+|[12456]--\\d+|3[ABC]?--\\d+&quot;        }      }    },    &quot;Book&quot;: {      &quot;properties&quot;: {        &quot;title&quot;: {          &quot;type&quot;: &quot;string&quot;        },        &quot;other&quot;: {&quot;$ref&quot;: &quot;#/definitions/identifiers&quot;},        &quot;genre&quot;: {          &quot;enum&quot;: [            &quot;celebrity-nonsense&quot;,            &quot;military-tat&quot;,            &quot;other&quot;          ]        },        &quot;author&quot;: {          &quot;$ref&quot;: &quot;#/definitions/Author&quot;        }      }    }  },  &quot;properties&quot;:{    &quot;Book&quot;: {&quot;$ref&quot;:  &quot;#/definitions/Book&quot;},    &quot;Author&quot;: {      &quot;properties&quot;: {        &quot;name&quot;: {          &quot;type&quot;: &quot;string&quot;        },        &quot;date_of_birth&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;format&quot;: &quot;date&quot;        }      }    }  }}```now run```bash$ python manage.py jsonschema2dj example_app```and the following are produced:* models.py* views.py* serializers.py* urls.py* filters.py* admin.pyThese files are built using jinja templates using sensible default choices where possible. It is expected that the user will modify these files to suit theirneeds.eg. `models.py` would be:```pythonclass Book(models.Model):    title = models.CharField(null=True, max_length=255)    other = JSONField(validators=[JSONSchemaValidator({'$ref': '#/definitions/identifiers'}, DEFINITIONS)])    genre = models.CharField(null=True, max_length=25, choices=[        ('celebrity_nonsense', 'celebrity nonsense'),        ('military-tat', 'military-tat'),        ('other', 'other')    ])    author = models.ForeignKey(&quot;Author&quot;, null=True, on_delete=models.CASCADE)class Author(models.Model):    name = models.CharField(null=True, max_length=255)    date_of_birth = models.DateField(null=True)```This is intended to be:* accessible to anyone with knowledge of JSONSchema* extensible by anyone with a rudimentary understanding of Django## RulesModels are objects at the root level of the `properties` of the `schema.json`.A model's fields are its root level properties.The definitions maybe used freely without constraint.There are three types of field:### simple fieldsIf a field has a `jsonschema:type` that is anything other than an `object` or `items` or this can be inferred then this field is mapped to a djngo field approximately as:* &quot;string&quot; -&gt; CharField* &quot;integer&quot; -&gt; IntegerField* &quot;number&quot; -&gt; DecimalField* &quot;boolean&quot; -&gt; BooleanFieldIf the field's name is `id` then this wil be the primary key.### reference-fieldsIf a field has a `jsonschema:type` that is an `object` or `items` and this references an object (model) with a schema also defined in the top levelproperties then this is modeled as relationship to that object (model) like:* `&quot;$ref&quot;: &quot;Model-X&quot;` -&gt; one-to-one or one-to-many* `&quot;items&quot;: {&quot;$ref&quot;: &quot;Model-X&quot;}` -&gt; many-to-one or many-to-manyNote that the exact cardinality can only be determined by comparing both sides ofthe relationship. If only one side is specified the it is assumed that it is one-to-many or many-to-many respectively.### json-fieldsLastly if a field has a `jsonschema:type` that is an `object` or `items` and this references an object (model) with a schema that is not defined in the top level properties then this is modeled as a jsons object in its own right, i.e.: * &quot;object&quot; -&gt; JSONFieldIts schema will be enfoced by the serializer.## Testing```bash$ ./runtests.py```</longdescription>
</pkgmetadata>