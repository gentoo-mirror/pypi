<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># xerparserRead the contents of a P6 .xer file and convert it into a Python object.  *Disclaimers:  It's helpfull if you are already familiar with the mapping and schemas used by P6 during the export process.Refer to the [Oracle Documentation]( https://docs.oracle.com/cd/F25600_01/English/Mapping_and_Schema/xer_import_export_data_map_project/index.htm) for more information regarding how data is mapped to the XER format.  Tested on .xer files exported as versions 15.2 through 19.12.*  &lt;br/&gt;## Install**Windows**:```bashpip install xerparser```**Linux/Mac**:```bashpip3 install xerparser```&lt;br/&gt;  ## Usage  Import the `Xer` class from `xerparser`  and pass the contents of a .xer file as an argument. Use the `Xer` class variable `CODEC` to set the proper encoding to decode the file.```pythonfrom xerparser import Xerfile = r&quot;/path/to/file.xer&quot;with open(file, encoding=Xer.CODEC, errors=&quot;ignore&quot;) as f:    file_contents = f.read()xer = Xer(file_contents)```Do not pass the the .xer file directly as an argument to the `Xer` class. The file must be decoded and read into a string, which can then be passed as an argument. Or, pass the .xer file into the `Xer.reader` classmethod, which accepts:* str or pathlib.Path objects for files stored locally or on a server.* Binary files from requests, Flask, FastAPI, etc...```pythonfrom xerparser import Xerfile = r&quot;/path/to/file.xer&quot;xer = Xer.reader(file)```&lt;br/&gt;## AttributesThe tables stored in the .xer file are accessable as either Global, Project specific, Task specific, or Resource specific:### Global  ```python  xer.export_info           # export data  xer.activity_code_types   # dict of ACTVTYPE objects  xer.activity_code_values  # dict of ACTVCODE objects  xer.calendars             # dict of all CALENDAR objects  xer.financial_periods     # dict of FINDATES objects  xer.notebook_topics       # dict of MEMOTYPE objects  xer.projects              # dict of PROJECT objects  xer.project_code_types    # dict of PCATTYPE objects  xer.project_code_values   # dict of PCATVAL objects  xer.tasks                 # dict of all TASK objects  xer.relationships         # dict of all TASKPRED objects  xer.resources             # dict of RSRC objects  xer.udf_types             # dict of UDFTYPE objects  xer.wbs_nodes             # dict of all PROJWBS objects  ```  ### Project Specific```python# Get first projectproject = list(xer.projects.values())[0]project.activity_codes        # list of project specific ACTVTYPE objectsproject.calendars             # list of project specific CALENDAR objectsproject.project_codes         # dict of PCATTYPE: PCATVAL objectsproject.tasks                 # list of project specific TASK objectsproject.relationships         # list of project specific TASKPRED objectsproject.user_defined_fields   # dict of `UDFTYPE`: `UDF Value` pairs  project.wbs_nodes             # list of project specific PROJWBS objects```### Task Specific```python# Get first tasktask = project.tasks[0]task.activity_codes       # dict of ACTVTYPE: ACTVCODE objectstask.memos                # list of TASKMEMO objectstask.periods              # list of TASKFIN objectstask.resources            # dict of TASKRSRC objectstask.user_defined_fields  # dict of `UDFTYPE`: `UDF Value` pairs ```### Resource Specific```python# Get first task resourceresource = list(task.resources.values())[0]resource.periods              # list of TRSRCFIN objectsresource.user_defined_fields  # dict of `UDFTYPE`: `UDF Value` pairs ```&lt;br/&gt;## Error CheckingSometimes the xer file is corrupted during the export process. If this is the case, a `CorruptXerFile` Exception will be raised during initialization.  A list of the errors can be accessed from the `CorruptXerFile` Exception, or by using the `find_xer_errors` function.### Option 1 - `errors` attribute of `CorruptXerFile` exception  (preferred)```pythonfrom xerparser import Xer, CorruptXerFilefile = r&quot;/path/to/file.xer&quot;try:    xer = Xer.reader(file)except CorruptXerFile as e:    for error in e.errors:        print(error)```  ### Option 2 - `find_xer_errors` function```pythonfrom xerparser import parser, file_reader, find_xer_errorsfile = r&quot;/path/to/file.xer&quot;xer_data = parser(file_reader(file))file_errors = find_xer_errors(xer_data)for error in file_errors:    print(error)```### Errors- Minimum required tables - an error is recorded if one of the following tables is missing:  - CALENDAR  - PROJECT  - PROJWBS  - TASK  - TASKPRED  - Required table pairs - an error is recorded if Table 1 is included but not Table 2:      | Table 1       | Table 2       | Notes    |  | :----------- |:-------------|----------|  | TASKFIN | FINDATES | *Financial Period Data for Task* |  | TRSRCFIN | FINDATES | *Financial Period Data for Task Resource* |  | TASKRSRC | RSRC | *Resource Data* |  | TASKMEMO | MEMOTYPE | *Notebook Data* |  | ACTVCODE | ACTVTYPE | *Activity Code Data* |  | TASKACTV | ACTVCODE | *Activity Code Data* |  | PCATVAL | PCATTYPE | *Project Code Data* |  | PROJPCAT | PCATVAL | *Project Code Data* |  | UDFVALUE | UDFTYPE | *User Defined Field Data* |- Non-existent calendars assigned to tasks.- Non-existent resources assigned to task resources.</longdescription>
</pkgmetadata>