<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Baluhn: Base-agnostic LuhnBaluhn provides a base-independent implementation of the [Luhnalgorithm](http://en.wikipedia.org/wiki/Luhn_algorithm) for Python. It isuseful for generating and verifying check digits in arbitrary bases.From Wikipedia:&gt; The Luhn algorithm or Luhn formula, also known as the &quot;modulus 10&quot; or &quot;mod&gt; 10&quot; algorithm, is a simple checksum formula used to validate a variety of&gt; identification numbers, such as credit card numbers, IMEI numbers,&gt; National Provider Identifier numbers in US and Canadian Social Insurance&gt; Numbers.## InstallationUse `pip install baluhn` or `python setup.py install`.## UsageThe `baluhn` module provides two functions: `verify` and `generate`.`generate` calculates the Luhn check character for the given input string inthe given base. This character should be appended to the input string toproduce a valid Luhn string. `verify` tests whether or not a string is a validLuhn string in the given base. By default, Baluhn operates in base 10:```python&gt;&gt;&gt; from baluhn import generate, verify&gt;&gt;&gt; verify('5105105105105100') # MasterCard test numberTrue&gt;&gt;&gt; value = '510510510510510' # note the missing check digit&gt;&gt;&gt; generate(value)'0'&gt;&gt;&gt; verify(value + '0')True&gt;&gt;&gt; verify(value + '7')False```When operating in a base other than decimal, encoder and decoder callablesshould be supplied. The encoder should take a single argument, an integer, andreturn the character corresponding to that integer in the operating base.Conversely, the decoder should take a string containing a single character andreturn its integer value in the operating base. Note that the mapping betweenvalues and characters defined by the encoder and decoder should be one-to-one.For example, when working in hexadecimal:```python&gt;&gt;&gt; hex_alphabet = '0123456789abcdef'&gt;&gt;&gt; hex_encoder = lambda i: hex_alphabet[i]&gt;&gt;&gt; hex_decoder = lambda s: hex_alphabet.index(s)&gt;&gt;&gt; value = 'a8b56f'&gt;&gt;&gt; generate(value, base=16, encoder=hex_encoder, decoder=hex_decoder)'b'&gt;&gt;&gt; verify('a8b56fb', base=16, decoder=hex_decoder)True&gt;&gt;&gt; verify('a8b56fc', base=16, decoder=hex_decoder)False```## AuthorBaluhn is written by [Ben Hodgson](http://benhodgson.com/) and maintained by [Four Digits](https://fourdigits.nl/).## (Un)licenseThis is free and unencumbered software released into the public domain.Anyone is free to copy, modify, publish, use, compile, sell, or distributethis software, either in source code form or as a compiled binary, for anypurpose, commercial or non-commercial, and by any means.In jurisdictions that recognize copyright laws, the author or authors of thissoftware dedicate any and all copyright interest in the software to the publicdomain. We make this dedication for the benefit of the public at large and tothe detriment of our heirs and successors. We intend this dedication to be anovert act of relinquishment in perpetuity of all present and future rights tothis software under copyright law.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN ANACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTIONWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.For more information, please refer to &lt;http://unlicense.org/&gt;</longdescription>
</pkgmetadata>