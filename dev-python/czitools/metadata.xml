<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># czitools[![PyPI](https://img.shields.io/pypi/v/czitools.svg?color=green)](https://pypi.org/project/czitools)[![PyPI - Downloads](https://img.shields.io/pypi/dm/czitools)](https://pypistats.org/packages/czitools)[![License](https://img.shields.io/pypi/l/czitools.svg?color=green)](https://github.com/sebi06/czitools/raw/master/LICENSE)[![Python Version](https://img.shields.io/pypi/pyversions/czitools.svg?color=green)](https://python.org)[![Development Status](https://img.shields.io/pypi/status/czitools.svg)](https://en.wikipedia.org/wiki/Software_release_life_cycle#Alpha)This repository provides a collection of tools to simplify reading CZI (Carl Zeiss Image) pixel and metadata in Python. In addition it also contains other useful utilities to visualize CZI images inside Napari (needs to be installed). It is also available as a [Python Package on PyPi](https://pypi.org/project/czitools/)## Reading the metadataPlease check [use_pylibczirw_metadata_class.py](examples/scripts/use_pylibczirw_metadata_class.py) for some examples.```python# get the metadata at once as one big classmdata = czimd.CziMetadata(filepath)# get only specific metadataczi_dimensions = czimd.CziDimensions(filepath)print(&quot;SizeS: &quot;, czi_dimensions.SizeS)print(&quot;SizeT: &quot;, czi_dimensions.SizeT)print(&quot;SizeZ: &quot;, czi_dimensions.SizeZ)print(&quot;SizeC: &quot;, czi_dimensions.SizeC)print(&quot;SizeY: &quot;, czi_dimensions.SizeY)print(&quot;SizeX: &quot;, czi_dimensions.SizeX)# try to write XML to filexmlfile = czimd.writexml(filepath)# get info about the channelsczi_channels = czimd.CziChannelInfo(filepath)# get the complete metadata from the CZI as one big objectczimd_complete = czimd.get_metadata_as_object(filepath)# get an object containing only the dimension informationczi_dimensions = czimd.CziDimensions(filepath)# get an object containing only the dimension informationczi_scale = czimd.CziScaling(filepath)# get an object containing information about the sampleczi_sample = czimd.CziSampleInfo(filepath)# get info about the objective, the microscope and the detectorsczi_objectives = czimd.CziObjectives(filepath)czi_detectors = czimd.CziDetector(filepath)czi_microscope = czimd.CziMicroscope(filepath)# get info about the sample carrierczi_sample = czimd.CziSampleInfo(filepath)# get additional metainformationczi_addmd = czimd.CziAddMetaData(filepath)# get the complete data about the bounding boxesczi_bbox = czimd.CziBoundingBox(filepath)```## Reading CZI pixeldataWhile the [pylibCZIrw](https://pypi.org/project/pylibCZIrw/) is focussing on reading individual planes it is also helpful to read CZI pixel data as a STZCYX(A) stack. Please check [use_pylibczirw_md_read.py](https://github.com/sebi06/czitools/raw/main/demo/scripts/use_pylibczirw_md_read.py) for some examples.```python# return a array with dimension order STZCYX(A)array6d, mdata, dim_string6d = pylibczirw_tools.read_6darray(filepath,                                                             output_order=&quot;STZCYX&quot;,                                                             output_dask=False,                                                             remove_adim=True                                                             )# show array inside napari viewerviewer = napari.Viewer()layers = napari_tools.show(viewer, array6d, mdata,                           dim_string=dim_string6d,                           blending=&quot;additive&quot;,                           contrast='napari_auto',                           gamma=0.85,                           add_mdtable=True,                           name_sliders=True)napari.run()```![5D CZI inside Napari](https://github.com/sebi06/czitools/raw/main/images/czi_napari1.png)</longdescription>
</pkgmetadata>