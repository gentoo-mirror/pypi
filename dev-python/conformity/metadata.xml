<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Conformity - Declarative Schema for Python==========================================.. image:: https://readthedocs.org/projects/conformity/badge/    :target: https://conformity.readthedocs.io.. image:: https://pepy.tech/badge/conformity    :target: https://pepy.tech/project/conformity.. image:: https://img.shields.io/pypi/l/conformity.svg    :target: https://pypi.python.org/pypi/conformity.. image:: https://api.travis-ci.org/eventbrite/conformity.svg    :target: https://travis-ci.org/eventbrite/conformity.. image:: https://img.shields.io/pypi/v/conformity.svg    :target: https://pypi.python.org/pypi/conformity.. image:: https://img.shields.io/pypi/wheel/conformity.svg    :target: https://pypi.python.org/pypi/conformity.. image:: https://img.shields.io/pypi/pyversions/conformity.svg    :target: https://pypi.python.org/pypi/conformity**Conformity** is a declarative schema validation library designed for use in libraries, services, applicationsettings, and more.------------Declare a schema:.. code-block:: python    from conformity.fields import Dictionary, Float, Integer, List, UnicodeString    person = Dictionary({        &quot;name&quot;: UnicodeString(),        &quot;height&quot;: Float(gte=0),        &quot;event_ids&quot;: List(Integer(gt=0)),    })Check to see if data is valid:.. code-block:: python    data = {&quot;name&quot;: &quot;Andrew&quot;, &quot;height&quot;: 180.3, &quot;event_ids&quot;: [1, &quot;3&quot;]}    errors = person.errors(data)    # Key event_ids: Index 1: Not an integerAnd wrap functions to validate on the way in and out:.. code-block:: python    kwargs = Dictionary({        &quot;name&quot;: UnicodeString(),        &quot;score&quot;: Integer(),    }, optional_keys=[&quot;score&quot;])    @validate_call(kwargs, UnicodeString())    def greet(name, score=0):        if score &gt; 10:            return &quot;So nice to meet you, {}!&quot;.format(name)        else:            return &quot;Hello, {}.&quot;.format(name)There's support for basic string, numeric, geographic, temporal, networking, and other field types, with everythingeasily extensible (optionally via subclassing). Conformity also boasts support for full-blown application settingsschema definition and validation complete with definable defaults, and includes Sphinx ``autodoc`` extensions to helpyou generate meaningful documentation for your code using Conformity.License-------Conformity is licensed under the `Apache License, version 2.0 &lt;LICENSE&gt;`_.Installation------------Conformity is available in PyPi and can be installing directly via Pip or listed in ``setup.py``, ``requirements.txt``,or ``Pipfile``:.. code-block:: bash    pip install 'conformity~=1.26'.. code-block:: python    install_requires=[        ...        'conformity~=1.26',        ...    ].. code-block:: text    conformity~=1.26.. code-block:: text    conformity = {version=&quot;~=1.26&quot;}Documentation-------------The complete Conformity documentation is available on `Read the Docs &lt;https://conformity.readthedocs.io&gt;`_!</longdescription>
</pkgmetadata>