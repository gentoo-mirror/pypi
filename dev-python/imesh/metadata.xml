<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mesh Python Client[![Build Status](https://travis-ci.org/ducesoft/babel.svg?branch=master)](https://travis-ci.org/ducesoft/babel)[![Financial Contributors on Open Collective](https://opencollective.com/babel/all/badge.svg?label=financial+contributors)](https://opencollective.com/babel) [![codecov](https://codecov.io/gh/babel/babel/branch/master/graph/badge.svg)](https://codecov.io/gh/babel/babel)![license](https://img.shields.io/github/license/ducesoft/babel.svg)中文版 [README](README_CN.md)## IntroductionMesh is a standard implementation for [Private Transmission Protocol](Specifications.md) specification.Mesh Python develop kits base on Python3.6. Recommend use [poetry](https://github.com/python-poetry/poetry) to managedependencies.## FeaturesAs an open source Internet of Data infrastructure develop kits, Mesh has the following core functions:* Minimal kernel with SPI plugin architecture, everything is replacement.* Support full stack of service mesh architecture.* Support full stack of service oriented architecture.* Support transport with TCP, HTTP, or other RPC protocols.* Support rich routing features.* Support reliable upstream management and load balancing capabilities.* Support network and protocol layer observability.* Support mTLS and protocols on TLS.* Support rich extension mechanism to provide highly customizable expansion capabilities.* Support process smooth upgrade.## Get Started```bashpoetry add imesh```or```bashpip install imesh```### RPCDeclared rpc interface Facade.```pythonfrom abc import ABC, abstractmethodfrom mesh import spi, mpi@spi(&quot;mesh&quot;)class Tokenizer(ABC):    @abstractmethod    @mpi(&quot;mesh.trust.apply&quot;)    def apply(self, kind: str, duration: int) -&gt; str:        &quot;&quot;&quot;        Apply a node token.        :param kind:        :param duration:        :return:        &quot;&quot;&quot;        pass    @abstractmethod    @mpi(&quot;mesh.trust.verify&quot;)    def verify(self, token: str) -&gt; bool:        &quot;&quot;&quot;        Verify some token verifiable.        :param token:        :return:        &quot;&quot;&quot;        pass```Declared rpc service Implement.```pythonfrom mesh import mps, Tokenizer@mpsclass MeshTokenizer(Tokenizer):    def apply(self, kind: str, duration: int) -&gt; str:        return &quot;foo&quot;    def verify(self, token: str) -&gt; bool:        return True```Remote reference procedure call.```pythonfrom mesh import mpi, Tokenizerclass Component:    @mpi    def tokenizer(self) -&gt; Tokenizer:        pass    def invoke(self) -&gt; bool:        token = self.tokenizer().apply('PERMIT', 1000 * 60 * 5)        return self.tokenizer().verify(token)```### TransportTransport is a full duplex communication stream implement.```pythonimport meshfrom mesh import Mesh, log, ServiceLoader, Transport, Routablefrom mesh.prsim import Metadatadef main():    mesh.start()    transport = Routable.of(ServiceLoader.load(Transport).get(&quot;mesh&quot;))    session = transport.with_address(&quot;10.99.1.33:570&quot;).local().open('session_id_008', {        Metadata.MESH_VERSION.key(): '',        Metadata.MESH_TECH_PROVIDER_CODE.key(): 'LX',        Metadata.MESH_TRACE_ID.key(): Mesh.context().get_trace_id(),        Metadata.MESH_TOKEN.key(): 'x',        Metadata.MESH_SESSION_ID.key(): 'session_id_008',        Metadata.MESH_TARGET_INST_ID.key(): 'JG0100000100000000',    })    for index in range(100):        inbound = f&quot;节点4发送给节点5报文{index}&quot;        log.info(f&quot;节点4发送:{inbound}&quot;)        session.push(inbound.encode('utf-8'), {}, &quot;topic&quot;)        outbound = session.pop(10000, &quot;topic&quot;)        if outbound:            log.info(f&quot;节点4接收:{outbound.decode('utf-8')}&quot;)```</longdescription>
</pkgmetadata>