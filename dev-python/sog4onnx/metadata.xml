<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sog4onnxSimple ONNX operation generator. **S**imple **O**peration **G**enerator for **ONNX**.https://github.com/PINTO0309/simple-onnx-processing-tools[![Downloads](https://static.pepy.tech/personalized-badge/sog4onnx?period=total&amp;units=none&amp;left_color=grey&amp;right_color=brightgreen&amp;left_text=Downloads)](https://pepy.tech/project/sog4onnx) ![GitHub](https://img.shields.io/github/license/PINTO0309/sog4onnx?color=2BAF2B) [![PyPI](https://img.shields.io/pypi/v/sog4onnx?color=2BAF2B)](https://pypi.org/project/sog4onnx/) [![CodeQL](https://github.com/PINTO0309/sog4onnx/workflows/CodeQL/badge.svg)](https://github.com/PINTO0309/sog4onnx/actions?query=workflow%3ACodeQL)&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://user-images.githubusercontent.com/33194443/170155206-3e771286-b5c4-4ac0-a5d7-ec9a0196cbbb.png&quot; /&gt;&lt;/p&gt;# Key concept- [x] Variable, Constant, Operation and Attribute can be generated externally.- [x] Allow Opset to be specified externally.- [x] No check for consistency of Operations within the tool, as new OPs are added frequently and the definitions of existing OPs change with each new version of ONNX's Opset.- [x] Only one OP can be defined at a time, and the goal is to generate free ONNX graphs using a combination of **[snc4onnx](https://github.com/PINTO0309/snc4onnx)**, **[sne4onnx](https://github.com/PINTO0309/sne4onnx)**, **[snd4onnx](https://github.com/PINTO0309/snd4onnx)** and **[scs4onnx](https://github.com/PINTO0309/scs4onnx)**.- [x] List of parameters that can be specified: https://github.com/onnx/onnx/blob/main/docs/Operators.md## 1. Setup### 1-1. HostPC```bash### option$ echo export PATH=&quot;~/.local/bin:$PATH&quot; &gt;&gt; ~/.bashrc \&amp;&amp; source ~/.bashrc### run$ pip install -U onnx \&amp;&amp; python3 -m pip install -U onnx_graphsurgeon --index-url https://pypi.ngc.nvidia.com \&amp;&amp; pip install -U sog4onnx```### 1-2. Dockerhttps://github.com/PINTO0309/simple-onnx-processing-tools#docker## 2. CLI Usage```$ sog4onnx -husage: sog4onnx [-h]  --ot OP_TYPE  --os OPSET  --on OP_NAME  [-iv NAME TYPE VALUE]  [-ov NAME TYPE VALUE]  [-a NAME DTYPE VALUE]  [-of OUTPUT_ONNX_FILE_PATH]  [-n]optional arguments:  -h, --help    show this help message and exit  -ot OP_TYPE, --op_type OP_TYPE    ONNX OP type.    https://github.com/onnx/onnx/blob/main/docs/Operators.md  -os OPSET, --opset OPSET    ONNX opset number.  -on OP_NAME, --op_name OP_NAME    OP name.  -iv INPUT_VARIABLES INPUT_VARIABLES INPUT_VARIABLES, --input_variables INPUT_VARIABLES INPUT_VARIABLES INPUT_VARIABLES    input_variables can be specified multiple times.    --input_variables variable_name numpy.dtype shape    https://github.com/onnx/onnx/blob/main/docs/Operators.md    e.g.    --input_variables i1 float32 [1,3,5,5] \    --input_variables i2 int32 [1] \    --input_variables i3 float64 [1,3,224,224]  -ov OUTPUT_VARIABLES OUTPUT_VARIABLES OUTPUT_VARIABLES, --output_variables OUTPUT_VARIABLES OUTPUT_VARIABLES OUTPUT_VARIABLES    output_variables can be specified multiple times.    --output_variables variable_name numpy.dtype shape    https://github.com/onnx/onnx/blob/main/docs/Operators.md    e.g.    --output_variables o1 float32 [1,3,5,5] \    --output_variables o2 int32 [1] \    --output_variables o3 float64 [1,3,224,224]  -a ATTRIBUTES ATTRIBUTES ATTRIBUTES, --attributes ATTRIBUTES ATTRIBUTES ATTRIBUTES    attributes can be specified multiple times.    dtype is one of &quot;float32&quot; or &quot;float64&quot; or &quot;int32&quot; or &quot;int64&quot; or &quot;str&quot;.    --attributes name dtype value    https://github.com/onnx/onnx/blob/main/docs/Operators.md    e.g.    --attributes alpha float32 1.0 \    --attributes beta float32 1.0 \    --attributes transA int32 0 \    --attributes transB int32 0  -of OUTPUT_ONNX_FILE_PATH, --output_onnx_file_path OUTPUT_ONNX_FILE_PATH    Output onnx file path.    If not specified, a file with the OP type name is generated.    e.g. op_type=&quot;Gemm&quot; -&gt; Gemm.onnx  -n, --non_verbose    Do not show all information logs. Only error logs are displayed.```## 3. In-script Usage```python$ python&gt;&gt;&gt; from sog4onnx import generate&gt;&gt;&gt; help(generate)Help on function generate in module sog4onnx.onnx_operation_generator:generate(  op_type: str,  opset: int,  op_name: str,  input_variables: dict,  output_variables: dict,  attributes: Union[dict, NoneType] = None,  output_onnx_file_path: Union[str, NoneType] = '',  non_verbose: Union[bool, NoneType] = False) -&gt; onnx.onnx_ml_pb2.ModelProto    Parameters    ----------    op_type: str        ONNX op type.        See below for the types of OPs that can be specified.        https://github.com/onnx/onnx/blob/main/docs/Operators.md        e.g. &quot;Add&quot;, &quot;Div&quot;, &quot;Gemm&quot;, ...    opset: int        ONNX opset number.        e.g. 11    op_name: str        OP name.    input_variables: Optional[dict]        Specify input variables for the OP to be generated.        See below for the variables that can be specified.        https://github.com/onnx/onnx/blob/main/docs/Operators.md        {&quot;input_var_name1&quot;: [numpy.dtype, shape], &quot;input_var_name2&quot;: [dtype, shape], ...}        e.g.        input_variables = {          &quot;name1&quot;: [np.float32, [1,224,224,3]],          &quot;name2&quot;: [np.bool_, [0]],          ...        }    output_variables: Optional[dict]        Specify output variables for the OP to be generated.        See below for the variables that can be specified.        https://github.com/onnx/onnx/blob/main/docs/Operators.md        {&quot;output_var_name1&quot;: [numpy.dtype, shape], &quot;output_var_name2&quot;: [dtype, shape], ...}        e.g.        output_variables = {          &quot;name1&quot;: [np.float32, [1,224,224,3]],          &quot;name2&quot;: [np.bool_, [0]],          ...        }    attributes: Optional[dict]        Specify output attributes for the OP to be generated.        See below for the attributes that can be specified.        When specifying Tensor format values, specify an array converted to np.ndarray.        https://github.com/onnx/onnx/blob/main/docs/Operators.md        {&quot;attr_name1&quot;: value1, &quot;attr_name2&quot;: value2, &quot;attr_name3&quot;: value3, ...}        e.g.        attributes = {          &quot;alpha&quot;: 1.0,          &quot;beta&quot;: 1.0,          &quot;transA&quot;: 0,          &quot;transB&quot;: 0        }        Default: None    output_onnx_file_path: Optional[str]        Output of onnx file path.        If not specified, no .onnx file is output.        Default: ''    non_verbose: Optional[bool]        Do not show all information logs. Only error logs are displayed.        Default: False    Returns    -------    single_op_graph: onnx.ModelProto        Single op onnx ModelProto```## 4. CLI Execution```bash$ sog4onnx \--op_type Gemm \--opset 1 \--op_name gemm_custom1 \--input_variables i1 float32 [1,2,3] \--input_variables i2 float32 [1,1] \--input_variables i3 int32 [0] \--output_variables o1 float32 [1,2,3] \--attributes alpha float32 1.0 \--attributes beta float32 1.0 \--attributes transA int32 0 \--attributes transB int32 0```## 5. In-script Execution```pythonimport numpy as npfrom sog4onnx import generatesingle_op_graph = generate(    op_type = 'Gemm',    opset = 1,    op_name = &quot;gemm_custom1&quot;,    input_variables = {      &quot;i1&quot;: [np.float32, [1,2,3]],      &quot;i2&quot;: [np.float32, [1,1]],      &quot;i3&quot;: [np.int32, [0]],    },    output_variables = {      &quot;o1&quot;: [np.float32, [1,2,3]],    },    attributes = {      &quot;alpha&quot;: 1.0,      &quot;beta&quot;: 1.0,      &quot;broadcast&quot;: 0,      &quot;transA&quot;: 0,      &quot;transB&quot;: 0,    },    non_verbose = True,)```## 6. Sample### 6-1. opset=1, Gemm```bash$ sog4onnx \--op_type Gemm \--opset 1 \--op_name gemm_custom1 \--input_variables i1 float32 [1,2,3] \--input_variables i2 float32 [1,1] \--input_variables i3 int32 [0] \--output_variables o1 float32 [1,2,3] \--attributes alpha float32 1.0 \--attributes beta float32 1.0 \--attributes transA int32 0 \--attributes transB int32 0--non_verbose```![image](https://user-images.githubusercontent.com/33194443/163018526-f2d5c647-c3e9-4e65-9b9a-c1c4fa5da8a5.png)![image](https://user-images.githubusercontent.com/33194443/163018647-a6880370-8772-4af1-9ffe-59820a621c30.png)### 6-2. opset=11, Add```bash$ sog4onnx \--op_type Add \--opset 11 \--op_name add_custom1 \--input_variables i1 float32 [1,2,3] \--input_variables i2 float32 [1,2,3] \--output_variables o1 float32 [1,2,3] \--non_verbose```![image](https://user-images.githubusercontent.com/33194443/163042479-9998ba73-ee26-44ea-bd6b-dcd04539190b.png)![image](https://user-images.githubusercontent.com/33194443/163042529-5dbd1b5f-e8d1-47d0-8a9e-aacd91539c2b.png)### 6-3. opset=11, NonMaxSuppression```bash$ sog4onnx \--op_type NonMaxSuppression \--opset 11 \--op_name nms_custom1 \--input_variables boxes float32 [1,6,4] \--input_variables scores float32 [1,1,6] \--input_variables max_output_boxes_per_class int64 [1] \--input_variables iou_threshold float32 [1] \--input_variables score_threshold float32 [1] \--output_variables selected_indices int64 [3,3] \--attributes center_point_box int64 1```![image](https://user-images.githubusercontent.com/33194443/163291737-8bd7ad7e-f9e5-4ce9-a8ba-444f1a8e77bb.png)![image](https://user-images.githubusercontent.com/33194443/163291789-59e4e5c8-26f4-4971-ab22-1486093f1be0.png)### 6-4. opset=11, Constant```bash$ sog4onnx \--op_type Constant \--opset 11 \--op_name const_custom1 \--output_variables boxes float32 [1,6,4] \--attributes value float32 \[[\[0.5,0.5,1.0,1.0],\[0.5,0.6,1.0,1.0],\[0.5,0.4,1.0,1.0],\[0.5,10.5,1.0,1.0],\[0.5,10.6,1.0,1.0],\[0.5,100.5,1.0,1.0]\]]```![image](https://user-images.githubusercontent.com/33194443/163311192-b559134f-d42d-4119-8990-0f7ac63230e3.png)## 7. Reference1. https://github.com/onnx/onnx/blob/main/docs/Operators.md2. https://docs.nvidia.com/deeplearning/tensorrt/onnx-graphsurgeon/docs/index.html3. https://github.com/NVIDIA/TensorRT/tree/main/tools/onnx-graphsurgeon4. https://github.com/PINTO0309/sne4onnx5. https://github.com/PINTO0309/snd4onnx6. https://github.com/PINTO0309/snc4onnx7. https://github.com/PINTO0309/scs4onnx8. https://github.com/PINTO0309/PINTO_model_zoo## 8. Issueshttps://github.com/PINTO0309/simple-onnx-processing-tools/issues</longdescription>
</pkgmetadata>