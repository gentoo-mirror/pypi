<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MConMini software construction and build framework## About MConMCon provides a framework for building software similar to Make or SCons. Dependencies and builddefinitions are declared via a Python script, and the framework computes a dependency graph,determines what needs building, and executes the defined builders.MCon's initial purpose was to have a small tool to build Python Wheel distribution files whilestill being flexible enough to integrate in other build steps such as extension modules, Cythontranslation, Sphinx documentation building, Django collect static steps, etc. However, MCon'score framework is flexible enough to build software other than Python distributions.## Project Goals* Use Python scripts to specify build dependencies and build processes.* Statically compute a dependency graph and a &quot;to build&quot; list before any building starts* Fully type annotated to enable strong typing in construction files.* Support Builders with dynamic sets of output files* Flexible Builder APIMCon is heavily influenced by, and shares many similarities with SCons. But the goals for mconare slightly different. SCons forces a common interface for builders, which enablesbetter composeability of builders within a larger dependency graph. However, in my opinion itmakes extending and writing your own builders more cumbersome. Writing your own builder is nota top priority in SCons (for example, extending SCons isn't covered in the manual until chapter17), and instead SCons relies on its extensive standard library of built-in builders.With mcon, a Builder is just a class with a ``build()`` method. Builders declare targets anddeclare dependencies, but otherwise are free to expose whatever API they wish to the rest ofyour construction code.Strong typing and full mypy compatibility make up for this loosely defined builder interface.Builders will, by convention, provide a ``.target`` attribute to expose to other builders thefile(s) they build, but this is not required. The Python distribution builder, for example,provides a ``.wheel()`` and ``.sdist()`` *method* to expose those respective targets for use asa source in other builders.MCon is written from scratch to be extensible and embeddable into a larger project, in additionto providing a command line interface. As an example, the ``pybuild.py`` module provides aPEP 517 build backend for integrating with build frontend tools such as pip and[build](https://pypa-build.readthedocs.io/en/stable/index.html).## Installing mconInstall mcon with ``pip install mcon``If developing mcon itself, check out the source code from https://github.com/brownan/mcon and theninstall in editable mode with ``pip install -e '.[dev]'``## MCon quickstartCreate a ``construct.py`` file in the top level directory of your project.This script is run to declare a number of &quot;builders&quot; which define how to build various files.Each script should create an ``mcon.Environment`` object with with everything else is associated.After that, create a number of builder objects for each item you want to build. Here's an exampleof a simple construct.py to build a C program:```pythonfrom mcon import Environment, register_aliasfrom mcon.builders.c import Programenv = Environment()program = Program(env, &quot;hello&quot;, &quot;hello.c&quot;)register_alias(&quot;all&quot;, program)```Now running ``mcon all`` on the command line will build the program ``hello`` from the sourcefile ``hello.c``A few stock builders are provided, but I have only written and included so far the builders thatI personally need and use. The builder interface is relatively easy to use, so I encourageyou to write your own Builders for your own purposes rather than relying on a large library ofstock builders.Yes, this makes the framework a bit less platform independent, and hopefully one day we'll geta more extensive and platform-independent set of generic builders. But since that's a lot of work,the idea for now is to make writing new builders as easy as possible for developers.## Building Python DistributionsIncluded is a Python Distribution builder. This build system does not rely on setuptools andis written from scratch to produce valid wheel files and compile valid Python extension modules.To use this builder, create a Distribution object in your construct file, and then call``.wheel()`` to generate a wheel target. The returned ``Wheel`` object has a ``.add_sources()``method which should be called with the complete set of source files to add to the wheel.Similarly, use ``Wheel.sdist()`` to create a source distribution target. The returned object alsohas a ``.add_sources()`` method, which should get the set of files to include in the sourcedistribution.Here's a simple example:```pythonfrom mcon import Environment, register_aliasfrom mcon.builders.python import Distribution, get_pure_tagenv = Environment()dist = Distribution(env)wheel_sources = [    env.root.glob(&quot;mcon/**/*.py&quot;),    &quot;mcon/py.typed&quot;,]wheel = dist.wheel(get_pure_tag())wheel.add_sources(wheel_sources)register_alias(&quot;wheel&quot;, wheel)sdist = dist.sdist()sdist.add_sources(wheel_sources + [&quot;pyproject.toml&quot;, &quot;construct.py&quot;, &quot;README.md&quot;])sdist.add_sources(env.root.glob(&quot;test/**/*.py&quot;))register_alias(&quot;sdist&quot;, sdist)```Running ``mcon wheel sdist`` will now build both a wheel file and source distribution and placethem in the `dist` directory (by default).## Project StatusI'd consider this project to be in the &quot;alpha&quot; stage, in that I think it's in a state that maybe useful to others, but the ideas and interfaces are not necessarily finalized. As I use mconfor my own other projects, I'll be refining and improving it.</longdescription>
</pkgmetadata>