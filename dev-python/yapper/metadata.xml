<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># YapperYapper converts Python docstrings to `astro` files for use by the [Astro](https://astro.build/) static site generator.It uses [`griffe`](https://github.com/mkdocstrings/griffe) to parse python modules and extracts numpy style docstrings.Docstrings and parameter descriptions will be passed through as raw markdown wrapped in Astro `&lt;Markdown is:raw&gt;&lt;/Markdown&gt;` components.Class and function elements are wrapped with `html` with `css` classes that can be styled from Astro.&gt; See the [`cityseer.benchmarkurbanism.com`](https://cityseer.benchmarkurbanism.com) documentation site and associated [docs repo](https://github.com/benchmark-urbanism/cityseer-api/tree/master/docs) for a working example.Conversion of markdown formatting, code blocks, admonitions, etc., is all handled downstream by Astro's remark and rehype plugins. Styling is likewise handled downstream via `css` targeting the associated element classes.## ConfigurationConfiguration is provided in `pyproject.toml` file placed in the current directory, else a `--config` parameter can be provided with a relative or absolute filepath to a `toml` config file.```bashyapper --config ./custom_config.toml```The `toml` file must include a `[tool.yapper]` section, with keys corresponding to the default configuration options:```toml[tool.yapper]package_root_relative_path = './'intro_template = &quot;&quot;&quot;---\nimport { Markdown } from 'astro/components';\n---\n&quot;&quot;&quot;outro_template = &quot;&quot;module_map = [  { module = &quot;test.mock_file&quot;, astro = &quot;./tests/mock_default.astro&quot; },]```If you want to wrap the `.astro` output in a particular layout, then set the `intro_template` and `outro_template` accordingly, for example, the following will import the `PageLayout` layout and will wrap the generated content accordingly:```toml[tool.yapper]package_root_relative_path = './'intro_template = &quot;&quot;&quot;---\nimport { Markdown } from 'astro/components';\nimport PageLayout from '../layouts/PageLayout.astro'\n---\n\n&lt;PageLayout&gt;&quot;&quot;&quot;outro_template = &quot;&quot;&quot;&lt;/PageLayout&gt;\n&quot;&quot;&quot;module_map = [  { module = &quot;test.mock_file&quot;, py = &quot;./tests/mock_file.py&quot;, astro = &quot;./tests/mock_default.astro&quot; },]```The `module_map` is mandatory and specifies the names of the python modules to be processed via the `module` key and an `astro` key corresponding to the output file:## Development`yapper` uses a `pyproject.toml` file to specify project dependencies and scripts related to project development and publishing.See `pyproject.toml` for available scripts.</longdescription>
</pkgmetadata>