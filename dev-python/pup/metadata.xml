<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>``pup`` | Pluggable Micro Packager==================================``pup`` is (in the early stages of becoming) a packaging tool for Python GUI programs.Fundamentally,its *raison d'Ãªtre* is producing macOS and Windows native packagesfor distributing the `Mu Editor &lt;https://codewith.mu/&gt;`_to Python beginners around the world.As a by-product of that,it may very likely be effective at packaginggeneric Python written GUI programs.If that ever is the case,then great.Otherwise,that's fine too.The purpose,again,is to package `Mu Editor &lt;https://codewith.mu/&gt;`_for macOS and Windows distribution.Capabilities------------The current version of ``pup``,while still very limited and somewhat exploratory,can package,at least,the `Mu Editor &lt;https://codewith.mu/&gt;`_and `puppy &lt;https://github.com/tmontes/puppy/&gt;`_ into distributable:* **Windows MSI installer files**  Minimally featured, user-installable,  with an optional License Agreement GUI,  adding an entry to the Windows Start Menu,  with an optional custom icon.  The packaged binary files can be signed,  as well as the final MSI file.  As a side-effect of the process,  a relocatable directory holding the aplication is produced,  paving the way for the creation &quot;portable&quot; Windows applications.* **macOS DMG files**  Holding the relocatable ``.app`` application bundle,  with an optional custom icon,  properly signed and notarized as required for distribution,  Including an optional License Agreement GUI  and custom volume icon.* **Linux AppImage files**  Preliminary support:  limited to Python 3.8 on x86_64 systems,  with the Desktop Entry's Categories hard-coded to &quot;Education&quot;.As of this writing,``pup`` should be able to package any Python GUI application that:* Runs on Python 3.7, on macOS or Windows.* Runs on Python 3.8, on macOS, Linux or Windows.* Is ``pip``-installable (no need to be on PyPI, though).* Is launchable from the CLI with ``python -m &lt;launch-module&gt;``.No specific efforts have been put forth to ensure that that is the case,however,so YMMV.Installation------------``pup`` is distributed via `PyPI &lt;https://pypi.org/pypi/pup&gt;`_.Install it with:.. code-block:: console$ pip install pupGeneric Usage-------------To package an application, run:.. code-block:: console        $ pup package &lt;pip-install-src&gt;Where:* ``&lt;pip-install-src&gt;`` is the argument  in the ``pip install &lt;pip-install-src&gt;`` command  to install the application on the local Python environment.  In general,  if it's ``pip``-installable then it's probably ``pup``-packageable.This usage patternassumes that the application GUI is launchable with ``python -m &lt;name&gt;``,where ``&lt;name&gt;`` is extractedfrom the metadata of a wheel created from ``&lt;pip-install-src&gt;``.If that is not the case,``pup`` can be told otherwise.Read on.When completed,the final distributable artifact will be placed under ``./dist/``.Packaging Options~~~~~~~~~~~~~~~~~* Use ``--launch-module=&lt;name&gt;``  to set the module name  that should be used to launch the application GUI,  as with the ``python -m &lt;name&gt;`` command.* Use ``--nice-name=&lt;name&gt;``  to set a &quot;nice name&quot; for the application  to be used used throughout the packaging process:  in file and directory names,  for macOS's application bundle and DMG file names,  and for the Windows Start Menu entry.  When omitted,  that name is obtained from the metadata of a wheel  created from ``&lt;pip-install-src&gt;``,  that very often does not match the exact product spelling,  as communicated to end-users.* Use ``--icon-path=&lt;icon-path&gt;``  to include a custom icon in the packaging process.  On macOS the given file can be either an  `ICNS &lt;https://en.wikipedia.org/wiki/Apple_Icon_Image_format&gt;`_ or  `PNG &lt;https://en.wikipedia.org/wiki/Portable_Network_Graphics&gt;`_ file  which will be used as the icon for both the packaged application bundle  and the DMG file volume icon.  On Linux the file should be a  `PNG &lt;https://en.wikipedia.org/wiki/Portable_Network_Graphics&gt;`_ file  which will be used as the icon for the running application.  On Windows the file can be either an  `ICO &lt;https://en.wikipedia.org/wiki/ICO_(file_format)&gt;`_ or  `PNG &lt;https://en.wikipedia.org/wiki/Portable_Network_Graphics&gt;`_ file  which will be used on the Windows Start Menu entry and  on the Windows Programs and Features listing.* Use ``--license-path=&lt;license-path&gt;`` to bundle the given license text  and require users to accept it before installation  (not currently supported on Linux AppImage).  The given ``&lt;license-path&gt;`` must be an ASCII-encoded text file.* Use ``--launch-pyflag=&lt;flag&gt;`` to override the default ``-I``  `Python launch flag &lt;https://docs.python.org/3/using/cmdline.html#cmdoption-I&gt;`_  (repeat for each flag to be used or set ``&lt;flag&gt;`` to the empty string to use none).Signing~~~~~~~Signing is optional and varies slightly between platforms.``pup`` will only sign the application for distributionwhen all of the following conditions are true.On macOS,``pup`` will also complete the Apple required notarization process:for that,the packaging system must be online andable to connect to Apple's notarization servicesover the internet.**macOS*** XCode 10.3 or later must be installed  -- the Command Line Tools are not enough.* The following environment variables must be set:  * ``PUP_SIGNING_IDENTITY``:    10-digit identifier on the Apple Developer Certificate.  * ``PUP_NOTARIZE_USER``:    email address for the Apple Developer Account.  * ``PUP_NOTARIZE_PASSWORD``:    Application Specific Password.**Windows*** The Windows SDK must be installed,  providing the ``signtool.exe`` utility.* The following environment variable must be set:  * ``PUP_SIGNING_IDENTITY``:    *cname* of the code signing certificate.Behaviour Notes~~~~~~~~~~~~~~~In the first run,``pup`` downloads one or more files,which are cached locally for later use:* A relocatable Python Runtime from the  `Python Build Standalone &lt;https://python-build-standalone.readthedocs.io/&gt;`_  project.* On Windows,  the `WiX toolset &lt;https://wixtoolset.org&gt;`_,  used to create MSI files.``pup`` logs its progress to STDERR,with fewer per-event details when it's a TTY.The logging level defaults to ``INFO`` and can be changedwith either the ``--log-level`` CLI option,or by setting the ``PUP_LOG_LEVEL`` environment variable.Other than the locally cached files,``pup`` creates files under:* ``./build/pup/`` containing all intermediate artifacts..* ``./dist/`` where the final distributable artifact is delivered..-------------------------Packaging the Mu Editor on Windows----------------------------------Requirements for signing:* The Windows SDK must be installed.* A code signing certificate must be available under Windows' *certmgr* utility.Run:.. code-block:: console        &gt; set PUP_SIGNING_IDENTITY=&lt;signer&gt;Where:* ``&lt;signer&gt;`` is the *cname* attribute of the code signing certificate.Then, assuming the current working directory is Mu Editor's repository root, run:.. code-block:: console        &gt; pup package              --launch-module=mu              --nice-name=&quot;Mu Editor&quot;              --icon-path=.\package\icons\win_icon.ico              --license-path=.\LICENSE              .Note:* The command is line-wrapped for readability, but must be input as a single line.* One of the last packaging stages is signing.* It will take a while as there are many files to be signed,  but progress is continuously displayed,  with the defaul log level.Once completed:* The resulting MSI file will be ``./dist/Mu Editor &lt;version&gt;.msi``.* A by-product of that is the ``./build/pup/Mu Editor &lt;version&gt;/`` relocatable directory,  containing a GUI-clickable script that launches Mu.  Creating a ZIP file from it for distribution  results in a minimally working &quot;portable&quot; Windows application.Packaging the Mu Editor on macOS--------------------------------Requirements for signing and notarization:* Must have XCode 10.3 or later installed.* Must have an Apple Developer Certificate --  see `this article's step 4  &lt;https://glyph.twistedmatrix.com/2018/01/shipping-pygame-mac-app.html&gt;`_,  for guidance.* Must create an Application Specific Password --  see `this article &lt;https://support.apple.com/en-us/HT204397&gt;`_,  for guidance.Run:.. code-block:: console        $ export PUP_SIGNING_IDENTITY=&lt;signer&gt;        $ export PUP_NOTARIZE_USER=&lt;user&gt;        $ export PUP_NOTARIZE_PASSWORD=&lt;asp&gt;Where:* ``&lt;signer&gt;`` is the 10-digit identifier on your Apple Developer Certificate's cname.* ``&lt;user&gt;`` is the email address associated to you Apple Developer Account.* ``&lt;asp&gt;`` is the Application Specific Password.Then, assuming the current working directory is Mu Editor's repository root, run:.. code-block:: console        $ pup package \              --launch-module=mu \              --nice-name=&quot;Mu Editor&quot; \              --icon-path=./package/icons/mac_icon.icns \              --license-path=./LICENSE \              .Note:* One of the last packaging stages is notarization.* It will take a while --  no less than 3 minutes,  IME,  sometimes 10-15 minutes.* The logged messages should help understand that the &quot;thing&quot; is not hung.* Just be patient, I guess! :)Once completed:* The resulting DMG file will be ``./dist/&lt;name&gt; &lt;version&gt;.dmg``.* A by-product of that is  the ``./build/pup/Mu Editor.app/`` relocatable application bundle.  Archiving it into a ZIP file, for distribution, should be perfectly fine.More----To learn more about ``pup``refer to the `online documentation &lt;https://pup.readthedocs.io/&gt;`_:at this early stage,it is mostly a collectionof thoughts and ideasaround behaviour,requirements,and very very rough internal design.Development moves forwardon GitHub at https://github.com/mu-editor/pup/... marker-end-welcome-dont-removeThanks------.. marker-start-thanks-dont-remove- To Nicholas Tollervey, for the amazing `Mu Editor &lt;https://codewith.mu/&gt;`_.- To the Mu Editor contributors  I've been having the privilege of working more directly with,  Carlos Pereira Atencio, Martin Dybdal, and Tim Golden, as well as the others  whom I haven't met yet but whose contributions I highly respect.- To Russell Keith-Magee, for the inspiring `BeeWare &lt;https://beeware.org&gt;`_ project  and, in particular, for `briefcase &lt;https://pypi.org/project/briefcase/&gt;`_ that  being used as the packaging tool for Mu on macOS as of this writing, serves as a  great inspiration to ``pup``.- To Gregory Szorc, for the incredible  `Python Standalone Builds &lt;https://python-build-standalone.readthedocs.io/&gt;`_  project,  on top of which ``pup`` packages redistributable Python GUI applications.- To Donald Stufft,  for letting us pick up the ``pup`` name in `PyPI &lt;https://pypi.org/project/pup/&gt;`__.- To Glyph Lefkowitz, for the very useful,  high quality `Tips And Tricks for Shipping a PyGame App on the Mac  &lt;https://glyph.twistedmatrix.com/2018/01/shipping-pygame-mac-app.html&gt;`_  article,  and for his generous hands-on involvement in the first-steps of ``pup``'s take  on the subject `in this issue &lt;https://github.com/mu-editor/pup/issues/43&gt;`_.- To Alastair Houghton, for `dmgbuild &lt;https://pypi.org/project/dmgbuild/&gt;`_,  that ``pup`` uses to create macOS DMG files.- To the `WiX Toolset &lt;https://wixtoolset.org/&gt;`__ developers, maintainers,  contributors, and sponsors:  not sure how ``pup`` would go about building Windows MSI installers without it... marker-end-thanks-dont-removeAbout-----.. marker-start-about-dont-remove``pup`` is in the process of being created by Tiago Montes,with the wonderful support of the Mu development team... marker-end-about-dont-remove</longdescription>
</pkgmetadata>