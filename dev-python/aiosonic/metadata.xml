<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![github status](https://github.com/sonic182/aiosonic/actions/workflows/python.yml/badge.svg)[![Coverage Status](https://coveralls.io/repos/github/sonic182/aiosonic/badge.svg?branch=master)](https://coveralls.io/github/sonic182/aiosonic?branch=master)[![PyPI version](https://badge.fury.io/py/aiosonic.svg)](https://badge.fury.io/py/aiosonic)[![Documentation Status](https://readthedocs.org/projects/aiosonic/badge/?version=latest)](https://aiosonic.readthedocs.io/en/latest/?badge=latest)[![Discord](https://img.shields.io/discord/898929656969965648)](https://discord.gg/e7tBnYSRjj)# aiosonic - lightweight Python asyncio http clientVery fast, lightweight Python asyncio http clientHere is some [documentation](https://aiosonic.readthedocs.io/en/latest/).There is a performance script in tests folder which shows very nice numbers```Â» python tests/performance.pydoing tests...{ &quot;aiosonic&quot;: &quot;1000 requests in 182.03 ms&quot;, &quot;aiosonic cyclic&quot;: &quot;1000 requests in 370.55 ms&quot;, &quot;aiohttp&quot;: &quot;1000 requests in 367.66 ms&quot;, &quot;requests&quot;: &quot;1000 requests in 4613.77 ms&quot;, &quot;httpx&quot;: &quot;1000 requests in 812.41 ms&quot;}aiosonic is 101.97% faster than aiohttpaiosonic is 2434.55% faster than requestsaiosonic is 103.56% faster than aiosonic cyclicaiosonic is 346.29% faster than httpx```This is a *very basic, dummy test*, machine dependant. If you look for performance, test and compare your code with this and other packages like aiohttp.You can perform this test by installing all test dependencies with `pip install -e &quot;.[test]&quot;` and doing `python tests/performance.py` in your own machine# Requirements:* Python&gt;=3.7* PyPy&gt;=3.7# Features:* Keepalive and smart pool of connections* Multipart File Uploads* Chunked responses handling* Chunked requests* Connection Timeouts* Automatic Decompression* Follow Redirects* Fully type annotated.* 100% test coverage (Sometimes not).* HTTP2 (BETA) when using the correct flag# Installation`pip install aiosonic`# Usage```pythonimport asyncioimport aiosonicimport jsonasync def run():    client = aiosonic.HTTPClient()    # ##################    # Sample get request    # ##################    response = await client.get('https://www.google.com/')    assert response.status_code == 200    assert 'Google' in (await response.text())    # ##################    # Post data as multipart form    # ##################    url = &quot;https://postman-echo.com/post&quot;    posted_data = {'foo': 'bar'}    response = await client.post(url, data=posted_data)    assert response.status_code == 200    data = json.loads(await response.content())    assert data['form'] == posted_data    # ##################    # Posted as json    # ##################    response = await client.post(url, json=posted_data)    assert response.status_code == 200    data = json.loads(await response.content())    assert data['json'] == posted_data    # ##################    # Sample request + timeout    # ##################    from aiosonic.timeout import Timeouts    timeouts = Timeouts(        sock_read=10,        sock_connect=3    )    response = await client.get('https://www.google.com/', timeouts=timeouts)    assert response.status_code == 200    assert 'Google' in (await response.text())    await client.shutdown()    print('success')if __name__ == '__main__':    loop = asyncio.get_event_loop()    loop.run_until_complete(run())```# [TODO'S](https://github.com/sonic182/aiosonic/projects/1)* HTTP2  * [x] Get  * [x] Request with data sending  * [ ] Do a aiosonic release with stable http2* Better documentation* International Domains and URLs (idna + cache)* Basic/Digest Authentication* [x] Requests using a http proxy* [x] Sessions with Cookie Persistence* [x] Elegant Key/Value Cookies# DevelopmentInstall packages with pip-tools:```bashpip install pip-toolspip-compilepip-compile test-requirements.inpip-sync requirements.txt test-requirements.txt```# Contribute1. Fork2. create a branch `feature/your_feature`3. commit - push - pull requestThanks :)# Contributors&lt;a href=&quot;https://github.com/sonic182/aiosonic/graphs/contributors&quot;&gt; &lt;img src=&quot;https://contributors-img.web.app/image?repo=sonic182/aiosonic&quot; /&gt;&lt;/a&gt;</longdescription>
</pkgmetadata>