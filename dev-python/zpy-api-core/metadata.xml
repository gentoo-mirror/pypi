<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a  href=&quot;https://github.com/NoeCruzMW/zpy-flask-msc-docs&quot;&gt;&lt;img width=&quot;150&quot; src=&quot;https://lh3.googleusercontent.com/a-/AOh14GjLO5qYYR5nQl5hgavUKz4Dv3LVzWDvGtV4xNam=s600-k-no-rp-mo&quot; alt=&quot;Zurck'z&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;ZPy Core, Layer for build microservices&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;/p&gt;---# ZPy Core&gt; Zurck'z Py Flask Micro Services CoreThis package contains some helpers features for build python microservices using Flask frameworkZPy use the following packages:- Flask- marshmallow- marshmallow_objects- requests- aws-lambda-wsgi## Requirements- Python 3.6+## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install py flask micro service core .```bashpip install zpy-api-core```## FeaturesContains some helper features.- Api    - Api Builder    - Response Builder    - Models    - Hooks    - Middlewares    - Exceptions- Cloud Implementations    - Aws Handler decorators    - [See: AWS Package](https://pypi.org/project/zpy-cloud-utils)- CLI    - DDD Project structure generator    - Bounded Context Generator    - UseCases generator- Database    - [See: SQL Oracle &amp; MySQL](https://pypi.org/project/zpy-db-core)- Logger    - Stream- Utils    - Collections        - element finder    - Dates        - Time zones        - Transforms    - Ciphers        - [See: Crypto Wrappers](https://pypi.org/project/zpy-ciphers-utils)    - Functions    - Parallel        - map parallel        - run parallel    - Objects    - gzip## Basic UsageGenerate project using _zpy CLI_```shell# Generate project with basic information. for more type: zpy --helpzpy make -p awesome-api -d &quot;My awsome users api&quot; -c Users -uc UserSearcher -op...cd awesome-api```zpy will generate the project with the following structure```awesome-api│   .env│   .gitignore│   CHANGELOG.md│   CHANGELOG.md│   README.md│   requirements.txt    │└───src│   │   di.py│   │   handler.py│   │   local_deploy.py│   ││   └───┬api│       │   routes.py│       │   ...│       └contexts│       │   ...│       └───users│         │   ...│         └───┬application│         │   │ ...│         └───┬domain│         │   │ ...│         └───┬infraestructure│             │ ...└───tests    │   user_searcher_test.py    ```Dependencies file```python# 🛸 Generated by zPyfrom zpy.utils import get_env_or_throw as varfrom zpy.app.usecase import UseCasefrom typing import Any# * Setup Dependencies 📃from contexts.users.domain.repositories import UserRepositoryfrom contexts.users.infraestructure.payment_repository import AwesomeUserRepositoryfrom contexts.users.application.user_searcher import UserSearcherrepository: UserRepository = AwesomeUserRepository()# Setup UseCasesuser_searcher_uc: UseCase[Any, None] = UserSearcher(repository)print(&quot;🚀 Dependencies loaded successfully...&quot;)```routes.py```python# 🛸 Generated by zPyfrom di import user_searcher_ucfrom flask import Flaskfrom zpy.api.http.response import response_builderfrom zpy.api.flask import create_appapp: Flask = create_app()@app.route(&quot;/api/users&quot;, methods=[&quot;GET&quot;])@response_builderdef users():    return user_searcher_uc.execute(None)```Use Case```python# 🛸 Generated by zPyfrom typing import Anyfrom zpy.app.usecase import UseCasefrom ..domain.repositories import UserRepositoryclass UserSearcher(UseCase[Any, Any]):    &quot;&quot;&quot;        Use Case description.    &quot;&quot;&quot;    def __init__(self, repository: PaymentRepository) -&gt; None:        self.repository = repository    def execute(self, data: Any, *args, **kwargs) -&gt; None:        # TODO Do magic with business rules 😁        return self.repository.user_searcher(data)```Local Dev Deploy```python# 🛸 Generated by zPyfrom dotenv import load_dotenvload_dotenv(    dotenv_path=&quot;|3:\\projects\\demos\\awesome-api\\.env&quot;)from api.routes import appif __name__ == &quot;__main__&quot;:    app.run(host=&quot;127.0.0.1&quot;, port=5050, debug=True)```handler.py configure for aws lambda and api gateway```python# 🛸 Generated by zPyfrom zpy.api.flask.cloud_handlers import aws_lambdafrom api.routes import appimport aws_lambda_wsgi as awsgi@aws_lambda()def handle(event: dict, context: dict) -&gt; any:    return awsgi.response(app, event, context)```## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## License[MIT](https://choosealicense.com/licenses/mit/)## Authors[Noé Cruz](https://www.linkedin.com/in/zurckz/)</longdescription>
</pkgmetadata>