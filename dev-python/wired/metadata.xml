<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====wired=====.. image:: https://img.shields.io/pypi/v/wired.svg    :target: https://pypi.org/pypi/wired.. image:: https://github.com/mmerickel/wired/workflows/Build/test%20on%20Linux/badge.svg    :target: https://github.com/mmerickel/wired/actions?query=workflow%3A%22Build%2Ftest+on+Linux%22.. image:: https://github.com/mmerickel/wired/workflows/Build/test%20on%20MacOS/badge.svg    :target: https://github.com/mmerickel/wired/actions?query=workflow%3A%22Build%2Ftest+on+MacOS%22.. image:: https://github.com/mmerickel/wired/workflows/Build/test%20on%20Windows/badge.svg    :target: https://github.com/mmerickel/wired/actions?query=workflow%3A%22Build%2Ftest+on+Windows%22.. image:: https://readthedocs.org/projects/wired/badge/?version=latest    :target: https://readthedocs.org/projects/wired/?badge=latest    :alt: Documentation StatusHave a large application where you want to *decrease coupling* between components?Need to *supply configuration* to your application's various services? Want tomake a *pluggable application* where others can supply services?`Inversion of Control &lt;https://en.wikipedia.org/wiki/Inversion_of_control&gt;`_ and`Dependency Injection &lt;https://en.wikipedia.org/wiki/Dependency_injection&gt;`_ aretwo patterns commonly used for these goals.``wired`` is an implementation of an inversion-of-control (IoC) container andmay be used as the core of a dependency injection (DI) framework or simply asa way to separate config-time from runtime for services in an application. Italso provides caching such that a container maintains a local copy of eachservice as they are instantiated.`wired` aims to scale down to the simplest cases and up to very large, customsystems. It has one dependency and that dependency has one dependency.See https://wired.readthedocs.io or``docs/index.rst`` in this distribution for detailed documentation.0.3 (2020-11-29)================- Added the ``__wired_factory__`` protocol which enables classes/functions.  This feature allows objects to declare their factory in a reusable way  near the definition of the class/function instead of near the  ``ServiceRegistry.register_factory`` invocation. Build some decorators  that automatically inject this protocol!  See https://github.com/mmerickel/wired/pull/41- Added the ``wired.service_factory`` venusian decorator which can be used  to discover factories by setting up a ``venusian.Scanner`` and scanning  your code to auto-register the services. In the future ``wired`` will likely  provide top-level scanning, but for now you have to do it yourself and  there are examples in the docs.  See https://github.com/mmerickel/wired/pull/410.2.2 (2020-05-26)==================- Added a ``name`` argument to ``wired.dataclasses.register_dataclass``  to support registering services by name.  See https://github.com/mmerickel/wired/pull/32- Removed the &quot;how to write an injector&quot; tutorial, then flatten a lot of the  docs into no more than two levels (to please the RTD theme.)  See https://github.com/mmerickel/wired/pull/320.2.1 (2019-08-12)==================- Added ``wired.dataclasses`` optional package with support for automatically  generating service factories for Python 3.7's typed-dataclasses.  Thanks Paul!  See https://github.com/mmerickel/wired/pull/19- Added a new tutorial on writing a DI framework around Python 3.7's  typed-dataclasses. Thanks again Paul!  See https://github.com/mmerickel/wired/pull/160.2 (2019-04-22)================Backward Incompatibilities--------------------------- ``wired.ServiceContainer.set`` has been redefined to set a service instance  for a specific context object instead of for a type-of-context. The new  method ``wired.ServiceContainer.register_singleton`` is a direct replacement  for the old behavior.Features--------- Add ``wired.ServiceContainer.register_factory`` and  ``wired.ServiceContainer.register_singleton`` which are per-container  analogues to their per-registry variants on ``wired.ServiceRegistry``.- Edit docs to (a) improve sales pitch, (b) split into a couple of sub-pages,  and (c) provide a tutorial. Update README and ``setup.py`` description a  bit as well.  See https://github.com/mmerickel/wired/pull/60.1.2 (2019-03-23)==================- Add support for Python 3.7.- Fix an issue where two different service classes with the same name would  be treated as the same service, defeating the type-based lookup.0.1.1 (2018-08-04)==================- Improve memory management slightly in cases where many short-lived context  objects are used by tracking and cleaning up their weakrefs.0.1 (2018-08-01)================- Initial release.</longdescription>
</pkgmetadata>