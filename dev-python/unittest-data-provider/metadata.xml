<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Package for this snippet:http://melp.nl/2011/02/phpunit-style-dataprovider-in-python-unit-test/Install::    pip install unittest-data-providerImport::    import unittest    from unittest_data_provider import data_providerYou can then use data_provider without having to stick this snippet somewhere...Thanks drm !Original blog post by drm pasted here in case the original link goes down=========================================================================PHPUnit has a handy feature with which you can provide testdata to your tests.This is called a data provider, and is implemented by annotating a test with@dataProvider methodName. Python’s unittest module doesn’t seem to have such afeature.PHPUnit’s version-----------------The data provider returns a two-dimensional array of test arguments. Forexample::    class CssParserTest extends PHPUnit_Framework_TestCase {        function setUp() {            $this-&gt;parser = new CssParser();        }            /**        * @dataProvider cssColors        */        function testParseColor($color, $notation) {            $this-&gt;assertEquals($color, $this-&gt;parser-&gt;parseColor($notation));        }                function cssColors() {            return array(                array(array(0, 0, 0), '#000'),                array(array(0, 0, 0), '#000000'),                array(array(0, 0, 0), 'rgb(0, 0, 0)')                array(array(0, 0, 0), 'black')            );        }    }Running this test would call the testParseColor() test 4 times, with each ofthe arrays returned by cssColors() as the arguments.Python: providing test data using a decorator---------------------------------------------While writing tests for some Python code, I discovered that Python’s unittestdoesn’t seem to have such a feature. So I implemented my own, using adecorator::    def data_provider(fn_data_provider):        &quot;&quot;&quot;Data provider decorator, allows another callable to provide the data for the test&quot;&quot;&quot;        def test_decorator(fn):            def repl(self, *args):                for i in fn_data_provider():                    try:                        fn(self, *i)                    except AssertionError:                        print &quot;Assertion error caught with data set &quot;, i                        raise            return repl        return test_decoratorExample usage::    class CssParserTest:        def setUp(self):            self.parser = CssColor()            colors = lambda: (            ( (0, 0, 0), '#000' ),            ( (0, 0, 0), '#000000' ),            ( (0, 0, 0), 'rgb(0, 0, 0)' ),            ( (0, 0, 0), 'black' )        )            @data_provider(colors):        def test_parse_color(self, color, notation):            self.assertEquals(color, self.parser.parse_color(notation))Suggestions of alternatives are greatly appreciated, by the way.</longdescription>
</pkgmetadata>