<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![](https://img.shields.io/badge/Community%20Extension-An%20open%20source%20community%20maintained%20project-FF4700)](https://github.com/camunda-community-hub/community)[![](https://img.shields.io/badge/Lifecycle-Stable-brightgreen)](https://github.com/Camunda-Community-Hub/community/blob/main/extension-lifecycle.md#stable-)[![Coverage Status](https://coveralls.io/repos/github/JonatanMartens/pyzeebe/badge.svg?branch=master)](https://coveralls.io/github/JonatanMartens/pyzeebe?branch=master)![Test pyzeebe](https://github.com/camunda-community-hub/pyzeebe/workflows/Test%20pyzeebe/badge.svg)![Integration test pyzeebe](https://github.com/camunda-community-hub/pyzeebe/workflows/Integration%20test%20pyzeebe/badge.svg)![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/camunda-community-hub/pyzeebe)![PyPI](https://img.shields.io/pypi/v/pyzeebe)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyzeebe)[![Documentation Status](https://readthedocs.org/projects/pyzeebe/badge/?version=latest)](https://pyzeebe.readthedocs.io/en/latest/?badge=stable)# Pyzeebepyzeebe is a python grpc client for Zeebe.Zeebe version support:| Pyzeebe version | Tested Zeebe versions  || :-------------: | ---------------------- ||      3.x.x      | 1.0.0                  ||      2.x.x      | 0.23, 0.24, 0.25, 0.26 ||      1.x.x      | 0.23, 0.24             |## Getting StartedTo install:`pip install pyzeebe`For full documentation please visit: https://pyzeebe.readthedocs.io/en/stable/## Usage### WorkerThe `ZeebeWorker` class uses threading to get and run jobs.```pythonimport asynciofrom pyzeebe import ZeebeWorker, Job, create_insecure_channelchannel = create_insecure_channel(hostname=&quot;localhost&quot;, port=26500) # Create grpc channelworker = ZeebeWorker(channel) # Create a zeebe workerasync def on_error(exception: Exception, job: Job):    &quot;&quot;&quot;    on_error will be called when the task fails    &quot;&quot;&quot;    print(exception)    await job.set_error_status(f&quot;Failed to handle job {job}. Error: {str(exception)}&quot;)@worker.task(task_type=&quot;example&quot;, exception_handler=on_error)def example_task(input: str) -&gt; dict:    return {&quot;output&quot;: f&quot;Hello world, {input}!&quot;}@worker.task(task_type=&quot;example2&quot;, exception_handler=on_error)async def another_example_task(name: str) -&gt; dict: # Tasks can also be async    return {&quot;output&quot;: f&quot;Hello world, {name} from async task!&quot;}loop = asyncio.get_running_loop()loop.run_until_complete(worker.work()) # Now every time that a task with type `example` or `example2` is called, the corresponding function will be called```Stop a worker:```pythonawait zeebe_worker.stop() # Stops worker after all running jobs have been completed```### Client```pythonfrom pyzeebe import ZeebeClient, create_insecure_channel# Create a zeebe clientchannel = create_insecure_channel(hostname=&quot;localhost&quot;, port=26500)zeebe_client = ZeebeClient(channel)# Run a Zeebe process instanceprocess_instance_key = await zeebe_client.run_process(bpmn_process_id=&quot;My zeebe process&quot;, variables={})# Run a process and receive the resultprocess_instance_key, process_result = await zeebe_client.run_process_with_result(    bpmn_process_id=&quot;My zeebe process&quot;,    timeout=10000)# Deploy a BPMN process definitionawait zeebe_client.deploy_process(&quot;process.bpmn&quot;)# Cancel a running processawait zeebe_client.cancel_process_instance(process_instance_key=12345)# Publish messageawait zeebe_client.publish_message(name=&quot;message_name&quot;, correlation_key=&quot;some_id&quot;)```## TestsUse the package manager [pip](https://pip.pypa.io/en/stable/) to install pyzeebe`pytest tests/unit`## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## VersioningWe use [SemVer](semver.org) for versioning. For the versions available, see the tags on this repository.In order to bump the current version run:```shell$ bump2version &lt;part&gt;```where part is the part that will be bumped (major/minor/patch/rc).This will bump the version in all relevant files as well as create a git commit.## LicenseWe use the MIT license, see [LICENSE.md](LICENSE.md) for details</longdescription>
</pkgmetadata>