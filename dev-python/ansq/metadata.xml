<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ansq - Async NSQ[![PyPI version](https://badge.fury.io/py/ansq.svg)](https://badge.fury.io/py/ansq)![Tests](https://github.com/list-family/ansq/workflows/Test/badge.svg)[![Coverage](https://codecov.io/gh/list-family/ansq/branch/master/graph/badge.svg)](https://codecov.io/gh/list-family/ansq)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ansq)Written with native Asyncio NSQ package## Installation```commandlinepython -m pip install ansq```## Overview- `Reader` — high-level class for building consumers with `nsqlookupd` support- `Writer` — high-level producer class supporting async publishing of messages to `nsqd`  over the TCP protocol- `NSQConnection` — low-level class representing a TCP connection to `nsqd`:    - full TCP wrapper    - one connection for `sub` and `pub`    - self-healing: when the connection is lost, reconnects, sends identify      and auth commands, subscribes to previous topic/channel## Features- [x] SUB- [x] PUB- [x] Discovery- [ ] Backoff- [ ] TLS- [ ] Deflate- [ ] Snappy- [x] Sampling- [ ] AUTH## Usage### ConsumerA simple consumer reads messages from &quot;example_topic&quot; and prints them to stdout.```pythonimport asyncioimport ansqasync def main():    reader = await ansq.create_reader(        topic=&quot;example_topic&quot;,        channel=&quot;example_channel&quot;,    )    async for message in reader.messages():        print(f&quot;Message: {message.body}&quot;)        await message.fin()    await reader.close()if __name__ == &quot;__main__&quot;:    asyncio.run(main())```### ProducerA simple producer sends a &quot;Hello, world!&quot; message to &quot;example_topic&quot;.```pythonimport asyncioimport ansqasync def main():    writer = await ansq.create_writer()    await writer.pub(        topic=&quot;example_topic&quot;,        message=&quot;Hello, world!&quot;,    )    await writer.close()if __name__ == &quot;__main__&quot;:    asyncio.run(main())```## ContributingCreate and activate a development virtual environment.```bashpython -m venv venvsource venv/bin/activate```Install `ansq` in editable mode and its testing dependencies.```bashpython -m pip install -e .[testing]```Run tests.```bashpytest```</longdescription>
</pkgmetadata>