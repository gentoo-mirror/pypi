<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ♻️ aioridwell: A Python3, asyncio-based API for interacting with Ridwell[![CI][ci-badge]][ci][![PyPI][pypi-badge]][pypi][![Version][version-badge]][version][![License][license-badge]][license][![Code Coverage][codecov-badge]][codecov][![Maintainability][maintainability-badge]][maintainability]&lt;a href=&quot;https://www.buymeacoffee.com/bachya1208P&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; height=&quot;41&quot; width=&quot;174&quot;&gt;&lt;/a&gt;`aioridwell` is a Python 3, asyncio-friendly library for interacting with[Ridwell][ridwell] to view information on upcoming recycling pickups.- [Installation](#installation)- [Python Versions](#python-versions)- [Usage](#usage)- [Contributing](#contributing)# Installation```bashpip install aioridwell```# Python Versions`aioridwell` is currently supported on:- Python 3.10- Python 3.11- Python 3.12# Usage## Creating and Using a ClientThe `Client` is the primary method of interacting with the API:```pythonimport asynciofrom aioridwell import async_get_clientasync def main() -&gt; None:    client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;)    # ...asyncio.run(main())```By default, the library creates a new connection to the API with each coroutine. Ifyou are calling a large number of coroutines (or merely want to squeeze out every secondof runtime savings possible), an [`aiohttp`][aiohttp] `ClientSession` can be used forconnection pooling:```pythonimport asynciofrom aiohttp import ClientSessionfrom aiowatttime import Clientasync def main() -&gt; None:    async with ClientSession() as session:        client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;, session=session)        # ...asyncio.run(main())```## Getting the User's Dashboard URL```pythonimport asynciofrom aioridwell import async_get_clientasync def main() -&gt; None:    client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;)    client.get_dashboard_url()    # &gt;&gt;&gt; https://www.ridwell.com/users/userId1/dashboardasyncio.run(main())```## Getting AccountsGetting all accounts associated with this email address is easy:```pythonimport asynciofrom aioridwell import async_get_clientasync def main() -&gt; None:    client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;)    accounts = await client.async_get_accounts()    # &gt;&gt;&gt; {&quot;account_id_1&quot;: RidwellAccount(...), ...}asyncio.run(main())```The `RidwellAccount` object comes with some useful properties:- `account_id`: the Ridwell ID for the account- `address`: the address being serviced- `email`: the email address on the account- `full_name`: the full name of the account owner- `phone`: the phone number of the account owner- `subscription_id`: the Ridwell ID for the primary subscription- `subscription_active`: whether the primary subscription is active## Getting Pickup EventsGetting pickup events associated with an account is easy, too:```pythonimport asynciofrom aioridwell import async_get_clientasync def main() -&gt; None:    client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;)    accounts = await client.async_get_accounts()    for account in accounts.values():        events = await account.async_get_pickup_events()        # &gt;&gt;&gt; [RidwellPickupEvent(...), ...]        # You can also get just the next pickup event from today's date:        next_event = await account.async_get_next_pickup_event()        # &gt;&gt;&gt; RidwellPickupEvent(...)asyncio.run(main())```The `RidwellPickupEvent` object comes with some useful properties:- `pickup_date`: the date of the pickup (in `datetime.date` format)- `pickups`: a list of `RidwellPickup` objects- `state`: an `EventState` enum whose name represents the current state of the pickup eventLikewise, the `RidwellPickup` object comes with some useful properties:- `category`: a `PickupCategory` enum whose name represents the type of pickup- `name`: the name of the item being picked up- `offer_id`: the Ridwell ID for this particular offer- `priority`: the pickup priority- `product_id`: the Ridwell ID for this particular product- `quantity`: the amount of the product being picked up### Opting Into or Out Of a Pickup Event```pythonimport asynciofrom aioridwell import async_get_clientasync def main() -&gt; None:    client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;)    accounts = await client.async_get_accounts()    for account in accounts.values():        events = await account.async_get_pickup_events()        # &gt;&gt;&gt; [RidwellPickupEvent(...), ...]        await events[0].async_opt_in()        await events[0].async_opt_out()asyncio.run(main())```### Calculating a Pickup Event's Estimated Cost```pythonimport asynciofrom aioridwell import async_get_clientasync def main() -&gt; None:    client = await async_get_client(&quot;&lt;EMAIL&gt;&quot;, &quot;&lt;PASSWORD&gt;&quot;)    accounts = await client.async_get_accounts()    for account in accounts.values():        events = await account.async_get_pickup_events()        # &gt;&gt;&gt; [RidwellPickupEvent(...), ...]        event_1_cost = await events[0].async_get_estimated_cost()        # &gt;&gt;&gt; 22.00asyncio.run(main())```# ContributingThanks to all of [our contributors][contributors] so far!1. [Check for open features/bugs][issues] or [initiate a discussion on one][new-issue].2. [Fork the repository][fork].3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`4. (_optional, but highly recommended_) Enter the virtual environment: `source ./.venv/bin/activate`5. Install the dev environment: `script/setup`6. Code your new feature or bug fix on a new branch.7. Write tests that cover your new functionality.8. Run tests and ensure 100% code coverage: `poetry run pytest --cov aioridwell tests`9. Update `README.md` with any new documentation.10. Submit a pull request![aiohttp]: https://github.com/aio-libs/aiohttp[ci-badge]: https://github.com/bachya/aioridwell/workflows/CI/badge.svg[ci]: https://github.com/bachya/aioridwell/actions[codecov-badge]: https://codecov.io/gh/bachya/aioridwell/branch/dev/graph/badge.svg[codecov]: https://codecov.io/gh/bachya/aioridwell[contributors]: https://github.com/bachya/aioridwell/graphs/contributors[fork]: https://github.com/bachya/aioridwell/fork[issues]: https://github.com/bachya/aioridwell/issues[license-badge]: https://img.shields.io/pypi/l/aioridwell.svg[license]: https://github.com/bachya/aioridwell/blob/main/LICENSE[maintainability-badge]: https://api.codeclimate.com/v1/badges/9c1dcc1c991cecb06eda/maintainability[maintainability]: https://codeclimate.com/github/bachya/aioridwell/maintainability[new-issue]: https://github.com/bachya/aioridwell/issues/new[new-issue]: https://github.com/bachya/aioridwell/issues/new[pypi-badge]: https://img.shields.io/pypi/v/aioridwell.svg[pypi]: https://pypi.python.org/pypi/aioridwell[ridwell]: https://ridwell.com[version-badge]: https://img.shields.io/pypi/pyversions/aioridwell.svg[version]: https://pypi.python.org/pypi/aioridwell</longdescription>
</pkgmetadata>