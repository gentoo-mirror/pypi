<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. Copyright 2023 Vincent Jacques.. WARNING, this README is rendered to HTML in several places    - on GitHub (https://github.com/mics-lab/lincs/)    - on PyPI after publication of the package (https://pypi.org/project/lincs/)    - on GitHub Pages (https://mics-lab.github.io/lincs/)    So when you change it, take care to check all those places.*lincs* (Learn and Infer Non Compensatory Sortings) is a collection of MCDA algorithms, usable as a command-line utility.We plan to make it usable as a C++ library and a Python (3.7+) package as well. (@todo(Feature, later))*lincs* is licensed under the GNU Lesser General Public License v3.0 as indicated by the two files `COPYING &lt;https://github.com/MICS-Lab/lincs/blob/v0.7.0/COPYING&gt;`_ and `COPYING.LESSER &lt;https://github.com/MICS-Lab/lincs/blob/v0.7.0/COPYING.LESSER&gt;`_.@todo(Project management, when we publish a paper) Add a note asking academics to kindly cite our work.*lincs* is available for install from the `Python package index &lt;https://pypi.org/project/lincs/&gt;`_.Its `documentation &lt;http://mics-lab.github.io/lincs/&gt;`_and its `source code &lt;https://github.com/mics-lab/lincs/&gt;`_ are on GitHub.Questions? Remarks? Bugs? Want to contribute? Open `an issue &lt;https://github.com/MICS-Lab/lincs/issues&gt;`_ or `a discussion &lt;https://github.com/MICS-Lab/lincs/discussions&gt;`_!Contributors and previous work==============================*lincs* is developed by the `MICS &lt;https://mics.centralesupelec.fr/&gt;`_ research team at `CentraleSupélec &lt;https://www.centralesupelec.fr/&gt;`_.Its main authors are (alphabetical order):- `Laurent Cabaret &lt;https://cabaretl.pages.centralesupelec.fr/&gt;`_ (performance optimization)- `Vincent Jacques &lt;https://vincent-jacques.net&gt;`_ (engineering)- `Vincent Mousseau &lt;https://www.centralesupelec.fr/fr/2EBDCB86-64A4-4747-96E8-C3066CB61F3D&gt;`_ (domain expertise)- `Wassila Ouerdane &lt;https://wassilaouerdane.github.io/&gt;`_ (domain expertise)Fondamental concepts--------------------*lincs* is based on the following concepts.Note that we describe them in our `conceptual overview documentation &lt;https://mics-lab.github.io/lincs/conceptual-overview.html&gt;`_.This section is here to give credit to their authors.The Non-Compensatory Sorting (NCS) model~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The concept of the NCS model was first introduced by Denis Bouyssou and Thierry Marchant in their articles `An axiomatic approach to noncompensatory sorting methods in MCDM I: The case of two categories &lt;https://hal.science/hal-00958022&gt;`_ and `... II: More than two categories &lt;https://hal.science/hal-00013762v1&gt;`_.Particular cases of the NCS model~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The Uc-NCS model is a particular case of the NCS model.The MR-Sort model is a particular case of the Uc-NCS model introduced by Agnès Leroy *et al.* in `Learning the Parameters of a Multiple Criteria Sorting Method &lt;https://link.springer.com/chapter/10.1007/978-3-642-24873-3_17&gt;`_.Although *lincs* can sort alternatives according to general NCS models (without veto), it only implements learning Uc-NCS and MR-Sort models.Learning algorithms-------------------*lincs* provides new implementations of the following algorithms:Learning Uc-NCS models with a SAT-based approaches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The following learning algorithms were implemented using their description by Ali Tlili, Khaled Belahcène *et al.* in `Learning non-compensatory sorting models using efficient SAT/MaxSAT formulations &lt;https://www.sciencedirect.com/science/article/abs/pii/S0377221721006858&gt;`_:- learning exact Uc-NCS models with a &quot;SAT by coalitions&quot; approach- learning approximate Uc-NCS models with a &quot;max-SAT by coalitions&quot; approach- learning exact Uc-NCS models with a &quot;SAT by separation&quot; approach- learning approximate Uc-NCS models with a &quot;max-SAT by separation&quot; approachNote that they were introduced in previous articles, and that this article conveniently gathers them in a single place.Learning approximate MR-Sort with a heuristic approach~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This approach, described by `Olivier Sobrie &lt;http://olivier.sobrie.be/&gt;`_ in his `Ph.D thesis &lt;http://olivier.sobrie.be/papers/phd_2016_sobrie.pdf&gt;`_,is based on splitting the learning into three phases: optimize the weights (linear programming), improve the profiles (heuristic) and breed the population of intermediate models.We call it the &quot;weights, profiles, breed&quot; learning strategy in *lincs*.It was originaly `implemented in Python &lt;https://github.com/oso/pymcda&gt;`_ by Olivier Sobrie.Emma Dixneuf, Thibault Monsel and Thomas Vindard then provided a sequential `C++ implementation of Sobrie's heuristic &lt;https://github.com/Mostah/fastPL/&gt;`_.*lincs* provides two parallel implementations of this approach (using OpenMP and CUDA).Project goals=============Provide MCDA tools usable out of the box----------------------------------------You should be able to use *lincs* without being a specialist of MCDA and/or NCS models.Just follow the `Get started &lt;#get-started&gt;`_ section below.Provide a base for developing new MCDA algorithms-------------------------------------------------*lincs* is designed to be easy to extend with new algorithms of even replace parts of existing algorithms.See our `contributor guide &lt;https://mics-lab.github.io/lincs/contributor-guide.html&gt;`_ for more details.*lincs* will also provide a benchmark framework to compare algorithms (@todo(Feature, later)).This should make it easier to understand the relative strengths and weaknesses of each algorithm.Get started===========Depending on your favorite approach, you can either start with our `hands-on &quot;Get started&quot; guide &lt;https://mics-lab.github.io/lincs/get-started.html&gt;`_or with our `conceptual overview documentation &lt;https://mics-lab.github.io/lincs/conceptual-overview.html&gt;`_.The former will show you how to use our tools, the latter will explain the concepts behind them: what's MCDA, what are NCS models, *etc.*If in doubt, start with the conceptual overview.We highly recommend you read the other one just after.Once you've used *lincs* a bit, you can follow up with our `user guide &lt;https://mics-lab.github.io/lincs/user-guide.html&gt;`_and `reference documentation &lt;https://mics-lab.github.io/lincs/reference.html&gt;`_.Versioning==========Starting with version 1.0.0, *lincs* tries to apply `semantic versioning &lt;https://semver.org/&gt;`_ at a *code* level:upgrading patch and minor releases should not require changes in client code but may require you to recompile and link it.Develop *lincs* itself======================See our `contributor guide &lt;https://mics-lab.github.io/lincs/contributor-guide.html&gt;`_.</longdescription>
</pkgmetadata>