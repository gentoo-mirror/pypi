<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `gitignorefile`[![Black](https://github.com/excitoon/gitignorefile/actions/workflows/black.yml/badge.svg)](https://github.com/excitoon/gitignorefile/actions/workflows/black.yml)[![Linux](https://github.com/excitoon/gitignorefile/actions/workflows/ubuntu.yml/badge.svg)](https://github.com/excitoon/gitignorefile/actions/workflows/ubuntu.yml)[![OS X](https://github.com/excitoon/gitignorefile/actions/workflows/macos.yml/badge.svg)](https://github.com/excitoon/gitignorefile/actions/workflows/macos.yml)[![Windows](https://github.com/excitoon/gitignorefile/actions/workflows/windows.yml/badge.svg)](https://github.com/excitoon/gitignorefile/actions/workflows/windows.yml)[![PyPI](https://badge.fury.io/py/gitignorefile.svg)](https://badge.fury.io/py/gitignorefile)A spec-compliant `.gitignore` parser for Python.## Installation```pip3 install gitignorefile```## Usage### `gitignorefile.parse()`Parses single `.gitignore` file. Suppose `/home/michael/project/.gitignore` contains the following:```__pycache__/*.py[cod]```Then:```python3import gitignorefilematches = gitignorefile.parse(&quot;/home/michael/project/.gitignore&quot;)matches(&quot;/home/michael/project/main.py&quot;) # Falsematches(&quot;/home/michael/project/main.pyc&quot;) # Truematches(&quot;/home/michael/project/dir/main.pyc&quot;) # Truematches(&quot;/home/michael/project/__pycache__&quot;) # True```### `gitignorefile.ignore()``shutil.copytree()` ignore function which checks if file is ignored by any `.gitignore` in the directory tree.Example:```python3import shutilimport gitignorefileshutil.copytree(&quot;/source&quot;, &quot;/destination&quot;, ignore=gitignorefile.ignore())```### `gitignorefile.ignored()`Checks if file is ignored by any `.gitignore` in the directory tree.```python3import gitignorefilegitignorefile.ignored(&quot;/home/michael/project/main.py&quot;) # False```### `gitignorefile.Cache`Caches `.gitignore` rules discovered in the directory tree.```python3import gitignorefilematches = gitignorefile.Cache()matches(&quot;/home/michael/project/main.py&quot;) # Falsematches(&quot;/home/michael/project/main.pyc&quot;) # Truematches(&quot;/home/michael/project/dir/main.pyc&quot;) # Truematches(&quot;/home/michael/project/__pycache__&quot;) # True```### Custom ignore file sourcesYou could override files, that will be used to fetch ignore rules. Default value is `[&quot;.gitignore&quot;, &quot;.git/info/exclude&quot;]`.```python3import gitignorefilematches = gitignorefile.Cache(ignore_names=[&quot;.mylovelytoolignore&quot;])matches(&quot;/home/michael/project/main.py&quot;) # Falsematches(&quot;/home/michael/project/main.pyc&quot;) # Truematches(&quot;/home/michael/project/dir/main.pyc&quot;) # Truematches(&quot;/home/michael/project/__pycache__&quot;) # True```## Credits- https://github.com/snark/ignorance by Steve Cook- https://github.com/mherrmann/gitignore_parser by Michael Herrmann- https://github.com/bitranox/igittigitt by Robert Nowotny- https://github.com/cpburnz/python-path-specification by Caleb Burns</longdescription>
</pkgmetadata>