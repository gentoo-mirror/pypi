<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cfgpieSimplified `ConfigParser` setup.This module automates, to some extent, the setup of [ConfigParser](https://docs.python.org/3.7/library/configparser.html)with cmd-line args parsing ability.---#### Installation:```commandlinepython -m pip install [--upgrade] cfgpie```---#### Usage:After installation, simply import the class `CfgParser` from `cfgpie` module:```pythonfrom cfgpie import CfgParser```By passing a name with the `name` param we can have multiple named instances:```python# mymodule.pyfrom cfgpie import CfgParsercfg1: CfgParser = CfgParser(name=&quot;root&quot;)cfg2: CfgParser = CfgParser(name=&quot;root&quot;)cfg3: CfgParser = CfgParser(name=&quot;other&quot;)if __name__ == '__main__':    print(&quot;*&quot; * 80)    print(&quot;cfg1:&quot;, cfg1.name)    print(&quot;cfg2:&quot;, cfg2.name)    print(&quot;cfg3:&quot;, cfg3.name)    print(&quot;*&quot; * 80)    print(&quot;cfg1 == cfg3:&quot;, cfg1 == cfg3)    print(&quot;cfg1 is cfg3:&quot;, cfg1 is cfg3)    print(&quot;*&quot; * 80)    print(&quot;cfg1 == cfg2:&quot;, cfg1 == cfg2)    print(&quot;cfg1 is cfg2:&quot;, cfg1 is cfg2)``````********************************************************************************cfg1: rootcfg2: rootcfg3: other********************************************************************************cfg1 == cfg3: Falsecfg1 is cfg3: False********************************************************************************cfg1 == cfg2: Truecfg1 is cfg2: True```Setting up our configuration:```python# -*- coding: UTF-8 -*-from os.path import dirname, realpath, joinfrom sys import modulesfrom types import ModuleTypefrom cfgpie import CfgParser# main python module:MODULE: ModuleType = modules.get(&quot;__main__&quot;)# root directory:ROOT: str = dirname(realpath(MODULE.__file__))# config default file path:CONFIG: str = join(ROOT, &quot;config&quot;, &quot;config.ini&quot;)BACKUP: dict = {    &quot;FOLDERS&quot;: {        &quot;logger&quot;: r&quot;${DEFAULT:directory}\logs&quot;,  # extended interpolation    },    &quot;TESTS&quot;: {        &quot;option_1&quot;: &quot;some_value&quot;,        &quot;option_2&quot;: 23453,        &quot;option_3&quot;: True,        &quot;option_4&quot;: r&quot;${DEFAULT:directory}\value&quot;,  # extended interpolation        &quot;option_5&quot;: [&quot;abc&quot;, 345, 232.545, &quot;3534.5435&quot;, True, {&quot;key_&quot;: &quot;value_&quot;}, False],    }}cfg: CfgParser = CfgParser(    &quot;root&quot;,    defaults={&quot;directory&quot;: ROOT})# we can update `DEFAULT` section:# cfg.set_defaults(directory=ROOT)# we can provide a backup dictionary# in case our config file does not exist# and by default a new file will be createdcfg.open(    file_path=CONFIG,    encoding=&quot;UTF-8&quot;,    fallback=BACKUP,)if __name__ == '__main__':    # we're parsing cmd-line arguments    cfg.read_argv()        # cmd-args are fetched as a list of strings:    # cfg.read_argv([&quot;--tests-option_1&quot;, &quot;another_value&quot;, &quot;--tests-option_2&quot;, &quot;6543&quot;])    print(cfg.get(&quot;TESTS&quot;, &quot;option_1&quot;))    print(cfg.getint(&quot;TESTS&quot;, &quot;option_2&quot;))```For interpolation, refer to `interpolation-of-values`[documentation](https://docs.python.org/3.7/library/configparser.html#interpolation-of-values).To pass cmd-line arguments:```commandlinepython -O main.py --section-option value --section-option value```cmd-line args have priority over config file and will override the cfg params.---#### Defaults:If not provided, by default, `CfgParser` will set:* `defaults` parameter as dict with section `DEFAULT` and option `directory` to the root folder of the `__main__` module.* `name` parameter to: `cfgpie`;* `interpolation` parameter to [ExtendedInterpolation](https://docs.python.org/3.7/library/configparser.html#configparser.ExtendedInterpolation);* `converters` parameter to evaluate:    * `list`, `tuple`, `set` and `dict` objects using [ast.literal_eval()](https://docs.python.org/3.7/library/ast.html#ast.literal_eval) function;    * `decimal` objects using [decimal.Decimal()](https://docs.python.org/3.7/library/decimal.html);    * `path` strings using [os.path.realpath()](https://docs.python.org/3.7/library/os.path.html#os.path.realpath);    * `folder` and `file` paths which:        * return a path-like formatted string depending on the operating system;        * will recursively create the folder structure if missing (see `folder()` &amp; `file()` methods in [utils.py](src/cfgpie/utils.py)).  &gt; All of which can be accessed by prefixing them with `get`:  &gt;  &gt; * `getlist(&quot;SECTION&quot;, &quot;option&quot;)`  &gt; * `gettuple(&quot;SECTION&quot;, &quot;option&quot;)`  &gt; * `getset(&quot;SECTION&quot;, &quot;option&quot;)`  &gt; * `getdict(&quot;SECTION&quot;, &quot;option&quot;)`  &gt; * `getdecimal(&quot;SECTION&quot;, &quot;option&quot;)`  &gt; * `getpath(&quot;SECTION&quot;, &quot;option&quot;)`  &gt; * `getfolder(&quot;SECTION&quot;, &quot;option&quot;)`  &gt; * `getfile(&quot;SECTION&quot;, &quot;option&quot;)`All other parameters are passed directly to[ConfigParser](https://docs.python.org/3.7/library/configparser.html).---</longdescription>
</pkgmetadata>