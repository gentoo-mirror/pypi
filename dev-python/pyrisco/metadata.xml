<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyRiscoA python interface to Risco alarm systems through [Risco Cloud](https://riscocloud.com/ELAS/WebUI).## InstallationYou can install pyrisco from [PyPI](https://pypi.org/project/pyrisco/):    pip3 install pyriscoPython 3.7 and above are supported.## How to use### Cloud```pythonfrom pyrisco import RiscoCloudr = RiscoCloud(&quot;&lt;username&gt;&quot;, &quot;&lt;password&gt;&quot;, &quot;&lt;pincode&gt;&quot;)# you can also pass your own session to login. It will not be closedawait r.login()alarm = await r.get_state()# partitions and zones are zero-based in Cloudprint(alarm.partitions[0].armed)events = await r.get_events(&quot;2020-06-17T00:00:00Z&quot;, 10)print(events[0].name)print(alarm.zones[0].name)print(alarm.zones[0].triggered)print(alarm.zones[0].bypassed)# arm partition 0await r.partitions[0].arm()# and disarm itawait r.partitions[0].disarm()# Partial armingawait r.partitions[0].partial_arm()# Group armingawait r.partitions[0].group_arm(&quot;B&quot;)# or a zero based indexawait r.partitions[0].group_arm(1)# Don't forget to close when you're doneawait r.close()```### Local```pythonfrom pyrisco import RiscoLocalr = RiscoLocal(&quot;&lt;host&gt;&quot;, &lt;port&gt;, &quot;&lt;pincode&gt;&quot;)await r.connect()# Register handlersasync def _error(error):  print(f'Error handler: {error}')remove_error = r.add_error_handler(_error)async def _event(event):  print(f'Event handler: {event}')remove_event = r.add_event_handler(_event)async def _default(command, result, *params):  print(f'Default handler: {command}, {result}, {params}')remove_default = r.add_default_handler(_default)async def _zone(zone_id, zone):  print(f'Zone handler: {zone_id}, {vars(zone)}')remove_zone = r.add_zone_handler(_zone)async def _partition(partition_id, partition):  print(f'Partition handler: {partition_id}, {vars(partition)}')remove_partition = r.add_partition_handler(_partition)await r.connect()# partitions and zones are one-based in Cloudprint(r.partitions[1].armed)print(r.zones[1].name)print(r.zones[1].triggered)print(r.zones[1].bypassed)# arm partition 1await r.partitions[1].arm()# and disarm itawait r.partitions[1].disarm()# Partial armingawait r.partitions[1].partial_arm()# Group armingawait r.partitions[1].group_arm(&quot;B&quot;)# or a zero based indexawait r.partitions[1].group_arm(1)# Don't forget to close when you're doneawait r.disconnect()```</longdescription>
</pkgmetadata>