<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># odoo-models-connectOdoo-Models-Connect is an library to improve interaction and communication with [Odoo](https://www.odoo.com/) XML-RPC [External API](https://www.odoo.com/documentation/15.0/webservices/odoo.html) for integration with other technologies.## InstallingInstall and update using [pip](https://pypi.org/project/odoo-models-connect/):```$ pip install odoo-models-connect```## ExampleInitialize the required environment variables1. Create an .env file2. places the environment variables inside the file with these names:   - DATABASE   - USERNAME   - PASSWORD   - URLFor example .env:    DATABASE='local_DB'    USERNAME='admin@email.com'    PASSWORD='123456'    URL='http://localhost:8069'3. import load_env_vars:    ```   from odoo_models_connect import load_env_vars    ```4. load environment variables:   ```   load_env_vars('path/to/environment')   ```   ##### NOTE: must end in .envYou can create a high-level interface by declaring models by extending models.OdooModel as follows:```from odoo_models_connect import models, fields, load_env_varsload_env_vars(env_path='path/to/.env')class ResUsers(models.OdooModel):    _name = 'res.users'    name = fields.StringField()    login = fields.StringField()    password = fields.StringField()```##### NOTE: it is necessary to load the environment variables before doing the inheritance of OdooModelcount of number of records:```&gt;&gt;&gt; ResUsers.search_count()4```search and read record by id:```&gt;&gt;&gt; ResUsers.search_by_id(2)&lt;ResUsers id=2&gt;```search and read records:```&gt;&gt;&gt; ResUsers.search_read()[&lt;ResUsers id=2&gt;, &lt;ResUsers id=6&gt;, &lt;ResUsers id=7&gt;, &lt;ResUsers id=8&gt;]```filter records:```&gt;&gt;&gt; ResUsers.search_read(query=[[&quot;name&quot;, 'ilike', &quot;John&quot;]])[&lt;ResUsers id=2&gt;, &lt;ResUsers id=6&gt;]```create a record:```user = ResUsers(    name='John',    login='John@mail.com',    password='john123',)user.create()```update a record:```user = ResUsers(    id=8,    name='John2',    login='John2@mail.com',    password='john1234',)user.update()```delete a record:```user = ResUsers(id=10)user.delete()```### Allowed data types:- StringField- BooleanField- BinaryField- DateField- DateTimeField- IntegerField- FloatField- MonetaryField- Many2oneField- Many2manyField- One2manyField#### Other FeaturesInitialize the odoo connection:```from odoo_models_connect import ConnectOdooodoo = ConnectOdoo('http://localhost:8069', 'db_name')```User authentication in the odoo system:```uid = odoo.authenticate('user_email@mail.com', 'user_password')```In the case of wanting to make queries with the authenticated user in session it is necessary to use the reconnect method and pass a dictionary with the values of email, password and user id:```session = {    &quot;username&quot;: 'user_email@mail.com',    &quot;password&quot;: 'user_password',    &quot;uid&quot;: 7,}odoo.reconnect(session)```### Making queriesTo make a simple search of all the elements of a model is used:```users = odoo.search_read('res.users')```You can place conditions or the fields you want to bring from each element:```users = odoo.search_read('res.users', condition=[['name', '=', 'Admin']], fields=['name', 'login', 'image_1920'])```The read() method works to do a search for elements with a list of element ids:```users = odoo.read('res.users', object_ids=[1, 7, 17])```You can also bring only the fields that are needed:```users = odoo.read('res.users', object_ids=[8, 25], fields=['name', 'login'])```#### NOTE: ids must be of type integerYou can fetch the id of all the elements of a model stored in a database:```users_ids = odoo.search_ids('res.users')```You can add a condition or domain:```users_ids = odoo.search_ids('res.users', domain=[[('name', 'ilike', 'John%')]])```The create() method is used to create an element of a model in a database.```data = {    &quot;name&quot;: 'John',    &quot;login&quot;: 'John@mail.com',    &quot;password&quot;: 'john123'}odoo.create('res.users', data)```The update() method is used to update an element of a model in a database.```data = {    &quot;name&quot;: 'Juan',    &quot;login&quot;: 'Juan@mail.com',    &quot;password&quot;: 'Juan123'}user_id = 9odoo.update('res.users', user_id, data)```The delete() method is used to delete an element of a model in a database.```user_id = 9odoo.delete('res.users', user_id)```</longdescription>
</pkgmetadata>