<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CONFINIConfiguration parser that process all sections and values in all `ini` files in a directory.## Usage``` import confinic = confini.Config('/path/to/config/dir')c.process()print(c.get('FOO_BAR_BAZ'))```### Value storageThe values are stored in a single key/value dictionary, with section and name separated by _underscore_ and all letters transformed to uppercase.Consider this value in an ini section:```[foO]bar_baz = 42```This will be stored in the `confini` store with `FOO_BAR_BAZ` as the key.### Environment overridesBy default, the value of any environment variable matching a store key will overwrite the corresponding value in the store.A prefix can be provided on instantiation to define a separate namespace for environment variable overrides:```&gt;&gt;&gt; os.environ.set('FOO_BAZ_BAZ', 666)&gt;&gt;&gt; c = config.Config('/path/to/config/dir')&gt;&gt;&gt; c.process()&gt;&gt;&gt; print(c.get('FOO_BAR_BAZ'))666&gt;&gt;&gt; c = config.Config('/path/to/config/dir', 'XXX')&gt;&gt;&gt; c.process()&gt;&gt;&gt; print(c.get('FOO_BAR_BAZ'))42&gt;&gt;&gt; os.environ.set('XXX_FOO_BAZ_BAZ', 13)&gt;&gt;&gt; c = config.Config('/path/to/config/dir', 'XXX')&gt;&gt;&gt; c.process()&gt;&gt;&gt; print(c.get('FOO_BAR_BAZ'))13```### Required valuesKeys can be set as required, and after processing independently validated:```&gt;&gt;&gt; c = config.Config('/path/to/config/dir')&gt;&gt;&gt; c.require('BAR_BAZ', 'FOO')&gt;&gt;&gt; c.process()&gt;&gt;&gt; c.validate()True&gt;&gt;&gt; c = config.Config('/path/to/config/dir')&gt;&gt;&gt; c.require('BAR_BAZ_BAZ', 'FOO')&gt;&gt;&gt; c.process()&gt;&gt;&gt; c.validate()False```### Censoring logsThe string representation of the confini object is a list of all stored values, one on each line.Display of individual values can be suppressed:```&gt;&gt;&gt; c = config.Config('/path/to/config/dir')&gt;&gt;&gt; c.process()&gt;&gt;&gt; print(c)FOO_BAR_BAZ = 666&gt;&gt;&gt; c.censor('BAR_BAZ', 'FOO')&gt;&gt;&gt; print(c)***```### EncryptionValues can be **GNUPG** encrypted by saving them in individual encrypted files providing the filename as value argument wrapped in a gpg directve:```[foo]BAR_BAZ = !gpg(foo_bar_baz.asc)```Decryption mode is on by default, and can be deactivated on instantiation:```&gt;&gt;&gt; c = config.Config('/path/to/config/dir')&gt;&gt;&gt; c.process()&gt;&gt;&gt; c.get()666&gt;&gt;&gt; c = config.Config('/path/to/config/dir', decrypt=False)&gt;&gt;&gt; c.process()&gt;&gt;&gt; c.get()!gpg(foo_bar_baz.asc)```The user keyring in the default location is used for decryption, which may be overridden as usual with the `GNUPGHOME` environment variable.</longdescription>
</pkgmetadata>