<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-rest-framework-datatables================================|build-status-image| |codecov-image| |documentation-status-image| |pypi-version| |py-versions|Overview--------This package provides seamless integration between `Django REST framework &lt;https://www.django-rest-framework.org&gt;`_ and `Datatables &lt;https://datatables.net&gt;`_.Install django-rest-framework-datatables, call your API with ``?format=datatables`` and it will return a JSON structure that is fully compatible with what Datatables expects.It handles searching, filtering, ordering and most usecases you can imagine with Datatables.The great benefit of django-rest-framework-datatables is that you don't have to create a different API, your API still work exactly the same unless you specify the ``datatables`` format on your request.Full documentation is available on `Read the Docs &lt;http://django-rest-framework-datatables.readthedocs.io/en/latest/&gt;`_ !You can play with a demo of the example app on `Python Anywhere &lt;https://izimobil.pythonanywhere.com&gt;`_.Requirements------------- Python (3.7, 3.8, 3.9)- Django (2.0, 2.1, 2.2, 3.0, 3.1, 3.2, 4.0)- Django REST Framework (3.7, 3.8, 3.9, 3.10, 3.11, 3.12)Please note:- Django 3.X branch is only supported with Django REST Framework 3.11 or superior and DRF-datatables version 0.5.1 or superior.- Django 4.X branch is only supported with Django REST Framework 3.12 or superior and DRF-datatables version 0.7.0 or superior.Quickstart----------Installation~~~~~~~~~~~~Just use ``pip``:.. code:: bash    $ pip install djangorestframework-datatablesConfiguration~~~~~~~~~~~~~To enable Datatables support in your project, add ``'rest_framework_datatables'`` to your ``INSTALLED_APPS``, and modify your ``REST_FRAMEWORK`` settings like this:.. code:: python    REST_FRAMEWORK = {        'DEFAULT_RENDERER_CLASSES': (            'rest_framework.renderers.JSONRenderer',            'rest_framework.renderers.BrowsableAPIRenderer',            'rest_framework_datatables.renderers.DatatablesRenderer',        ),        'DEFAULT_FILTER_BACKENDS': (            'rest_framework_datatables.filters.DatatablesFilterBackend',        ),        'DEFAULT_PAGINATION_CLASS': 'rest_framework_datatables.pagination.DatatablesPageNumberPagination',        'PAGE_SIZE': 50,    }And that's it !~~~~~~~~~~~~~~~Your API is now fully compatible with Datatables and will provide searching, filtering, ordering and pagination without any modification of your API code !Always Serialize Specific Fields~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Sometimes you may want to expose fields regardless of datatable's url parameters. You can do so by setting the ``datatables_always_serialize`` tuple like so:.. code:: python    class ArtistSerializer(serializers.ModelSerializer):        id = serializers.IntegerField(read_only=True)            class Meta:            model = Artist            fields = (                'id', 'name',            )            datatables_always_serialize = ('id',)An example of Datatable~~~~~~~~~~~~~~~~~~~~~~~.. code:: html    &lt;!doctype html&gt;    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;      &lt;meta charset=&quot;utf-8&quot;&gt;      &lt;title&gt;Rolling Stone Top 500 albums of all time&lt;/title&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.css&quot;&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css&quot;&gt;    &lt;/head&gt;        &lt;body&gt;      &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;          &lt;div class=&quot;col-sm-12&quot;&gt;            &lt;table id=&quot;albums&quot; class=&quot;table table-striped table-bordered&quot; style=&quot;width:100%&quot;&gt;              &lt;thead&gt;                &lt;tr&gt;                  &lt;th&gt;Rank&lt;/th&gt;                  &lt;th&gt;Artist&lt;/th&gt;                  &lt;th&gt;Album name&lt;/th&gt;                  &lt;th&gt;Year&lt;/th&gt;                  &lt;th&gt;Genres&lt;/th&gt;                &lt;/tr&gt;              &lt;/thead&gt;            &lt;/table&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;script src=&quot;//code.jquery.com/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;      &lt;script src=&quot;//cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt;      &lt;script src=&quot;//cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js&quot;&gt;&lt;/script&gt;      &lt;script&gt;          $(document).ready(function() {              var table = $('#albums').DataTable({                  &quot;serverSide&quot;: true,                  &quot;ajax&quot;: &quot;/api/albums/?format=datatables&quot;,                  &quot;columns&quot;: [                      {&quot;data&quot;: &quot;rank&quot;, &quot;searchable&quot;: false},                      {&quot;data&quot;: &quot;artist_name&quot;, &quot;name&quot;: &quot;artist.name&quot;},                      {&quot;data&quot;: &quot;name&quot;},                      {&quot;data&quot;: &quot;year&quot;},                      {&quot;data&quot;: &quot;genres&quot;, &quot;name&quot;: &quot;genres.name&quot;, &quot;sortable&quot;: false},                  ]              });          });      &lt;/script&gt;    &lt;/body&gt;    &lt;/html&gt;Example project---------------To play with the example project, just clone the repository and run the dev server... code:: bash    $ git clone https://github.com/izimobil/django-rest-framework-datatables.git    $ cd django-rest-framework-datatables    $ pip install -r requirements-dev.txt    $ python example/manage.py runserver    $ firefox http://127.0.0.1:8000Testing-------Install development requirements... code:: bash    $ pip install -r requirements-dev.txtRun the tests... code:: bash    $ python example/manage.py testYou can also use the excellent `tox`_ testing tool to run the testsagainst all supported versions of Python and Django. Install toxglobally, and then simply run:.. code:: bash    $ toxIf you want to check the coverage, use:.. code:: bash    $ coverage run ./example/manage.py test    $ coverage report -mDocumentation-------------The documentation is available online on `Read the Docs &lt;http://django-rest-framework-datatables.readthedocs.io/en/latest/&gt;`_.To build the documentation, youâ€™ll need to install ``sphinx``... code:: bash    $ pip install -r requirements-docs.txtTo build the documentation:.. code:: bash    $ cd docs    $ make clean &amp;&amp; make build.. _tox: http://tox.readthedocs.org/en/latest/.. |build-status-image| image:: https://api.travis-ci.com/izimobil/django-rest-framework-datatables.svg?branch=master   :target: http://travis-ci.com/izimobil/django-rest-framework-datatables?branch=master   :alt: Travis build.. |codecov-image| image:: https://codecov.io/gh/izimobil/django-rest-framework-datatables/branch/master/graph/badge.svg  :target: https://codecov.io/gh/izimobil/django-rest-framework-datatables.. |pypi-version| image:: https://img.shields.io/pypi/v/djangorestframework-datatables.svg   :target: https://pypi.python.org/pypi/djangorestframework-datatables   :alt: Pypi version.. |documentation-status-image| image:: https://readthedocs.org/projects/django-rest-framework-datatables/badge/?version=latest   :target: http://django-rest-framework-datatables.readthedocs.io/en/latest/?badge=latest   :alt: Documentation Status.. |py-versions| image:: https://img.shields.io/pypi/pyversions/djangorestframework-datatables.svg   :target: https://img.shields.io/pypi/pyversions/djangorestframework-datatables.svg   :alt: Python versions.. |dj-versions| image:: https://img.shields.io/pypi/djversions/djangorestframework-datatables.svg   :target: https://img.shields.io/pypi/djversions/djangorestframework-datatables.svg   :alt: Django versionsChangelog=========Version 0.7.0 (2021-12-09):---------------------------- Django 4.0 compatibility- Added global search support to YADCFModelMultipleChoiceFilter- Various fixes on filters- Various fixes on pagination- Fixed / improved documentation and examplesMany thanks to all the contributors on this release !Version 0.6.0 (2021-02-09):---------------------------- Integration with django-filter- Example of using yadcf and django-filter to create a multi-select column- Fixed support for POST requests from datatables- Some fixes on paginationMany thanks to all the contributors on this release !Version 0.5.2 (2020-04-10):---------------------------- Added support for POST requests from datatables- Avoid extra count queries- Handle dummy columns gracefullyVersion 0.5.1 (2020-01-13):---------------------------- Added support for Django 3.0- Added support for disabling pagination when the client requests it with length=-1 parameter- Added optional column sorting to handle ties- Minor code fixesVersion 0.5.0 (2019-03-31):---------------------------- Fixed total number of rows when view is using multiple filter back-ends- New meta option ``datatables_extra_json`` on view for adding key/value pairs to rendered JSON- Minor docs fixesVersion 0.4.1 (2018-11-16):---------------------------- Added support for Django 2.1 and DRF 3.9- Updated READMEVersion 0.4.0 (2018-06-22):---------------------------- Added top level filtering for nested serializers- Added multiple field filtering- Added a ?keep= parameter that allows to bypass the filtering of unused fields- Better detection of the requested format- Fixed typo in Queryset.count() method nameVersion 0.3.0 (2018-05-11):---------------------------- Added a serializer Meta option ``datatables_always_serialize`` that allows to specify a tuple of fields that should always be serialized in the response, regardless of what fields are requested in the Datatables request- Optimize filters- Use AND operator for column filtering instead of OR, to be consistant with the client-side behavior of DatatablesVersion 0.2.1 (2018-04-11):---------------------------- This version replaces the 0.2.0 who was broken (bad setup.py)Version 0.2.0 (2018-04-11):---------------------------- Added full documentation- Removed serializers, they are no longer necessary, filtering of columns is made by the rendererVersion 0.1.0 (2018-04-10):---------------------------Initial release.</longdescription>
</pkgmetadata>