<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FastAPI SSOFastAPI plugin to enable SSO to most common providers (such as Facebook login, Google login and login via Microsoft Office 365 account).This allows you to implement the famous `Login with Google/Facebook/Microsoft` buttons functionality on your backend very easily.## Support this projectIf you'd like to support this project, consider [buying me a coffee â˜•](https://www.buymeacoffee.com/tomas.votava).I tend to process Pull Requests faster when properly caffeinated ðŸ˜‰.&lt;a href=&quot;https://www.buymeacoffee.com/tomas.votava&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 60px !important;width: 217px !important;&quot; &gt;&lt;/a&gt;## Supported login providers### Official- Google- Microsoft- Facebook- Spotify- Fitbit- Github (credits to [Brandl](https://github.com/Brandl) for hint using `accept` header)- generic (see [docs](https://tomasvotava.github.io/fastapi-sso/sso/generic.html))### Contributed- Kakao (by Jae-Baek Song - [thdwoqor](https://github.com/thdwoqor))See [Contributing](#contributing) for a guide on how to contribute your own login provider.## Installation### Install using `pip````consolepip install fastapi-sso```### Install using `poetry````consolepoetry add fastapi-sso```## ExampleFor more examples, see [`examples`](/examples/) directory.### `example.py````python&quot;&quot;&quot;This is an example usage of fastapi-sso.&quot;&quot;&quot;from fastapi import FastAPIfrom starlette.requests import Requestfrom fastapi_sso.sso.google import GoogleSSOapp = FastAPI()google_sso = GoogleSSO(&quot;my-client-id&quot;, &quot;my-client-secret&quot;, &quot;https://my.awesome-web.com/google/callback&quot;)@app.get(&quot;/google/login&quot;)async def google_login():    &quot;&quot;&quot;Generate login url and redirect&quot;&quot;&quot;    return await google_sso.get_login_redirect()@app.get(&quot;/google/callback&quot;)async def google_callback(request: Request):    &quot;&quot;&quot;Process login response from Google and return user info&quot;&quot;&quot;    user = await google_sso.verify_and_process(request)    return {        &quot;id&quot;: user.id,        &quot;picture&quot;: user.picture,        &quot;display_name&quot;: user.display_name,        &quot;email&quot;: user.email,        &quot;provider&quot;: user.provider,    }```Run using `uvicorn example:app`.### Specify `redirect_uri` on request timeIn scenarios you cannot provide the `redirect_uri` upon the SSO class initialization, you may simply omitthe parameter and provide it when calling `get_login_redirect` method.```python...google_sso = GoogleSSO(&quot;my-client-id&quot;, &quot;my-client-secret&quot;)@app.get(&quot;/google/login&quot;)async def google_login(request: Request):    &quot;&quot;&quot;Generate login url and redirect&quot;&quot;&quot;    return await google_sso.get_login_redirect(redirect_uri=request.url_for(&quot;google_callback&quot;))@app.get(&quot;/google/callback&quot;)async def google_callback(request: Request):    ...```### Specify scopeSince `0.4.0` you may specify `scope` when initializing the SSO class.```pythonfrom fastapi_sso.sso.microsoft import MicrosoftSSOsso = MicrosoftSSO(client_id=&quot;client-id&quot;, client_secret=&quot;client-secret&quot;, scope=[&quot;openid&quot;, &quot;email&quot;])```### Additional query parametersSince `0.4.0` you may provide additional query parameters to besent to the login screen.E.g. sometimes you want to specify `access_type=offline` or `prompt=consent` in order forGoogle to return `refresh_token`.```pythonasync def google_login(request: Request):    return await google_sso.get_login_redirect(        redirect_uri=request.url_for(&quot;google_callback&quot;),        params={&quot;prompt&quot;: &quot;consent&quot;, &quot;access_type&quot;: &quot;offline&quot;}        )```## HTTP and development**You should always use `https` in production**. But in case you need to test on `localhost` and do not want touse self-signed certificate, make sure you set up redirect uri within your SSO provider to `http://localhost:{port}`and then add this to your environment:```bashOAUTHLIB_INSECURE_TRANSPORT=1```And make sure you pass `allow_insecure_http = True` to SSO class' constructor, such as:```pythongoogle_sso = GoogleSSO(&quot;client-id&quot;, &quot;client-secret&quot;, allow_insecure_http=True)```See [this issue](https://github.com/tomasvotava/fastapi-sso/issues/2) for more information.## StateState is useful if you want the server to return something back to you to help you understand in whatcontext the authentication was initiated. It is mostly used to store the url you want your user to be redirectedto after successful login. You may use `.state` property to get the state returned from the server.Example:```pythonfrom fastapi import Requestfrom fastapi.responses import RedirectResponse# E.g. https://example.com/auth/login?return_url=https://example.com/welcomeasync def google_login(return_url: str):    google_sso = GoogleSOO(&quot;client-id&quot;, &quot;client-secret&quot;)    # Send return_url to Google as a state so that Google knows to return it back to us    return await google_sso.get_login_redirect(redirect_uri=request.url_for(&quot;google_callback&quot;), state=return_url)async def google_callback(request: Request):    google_sso = GoogleSOO(&quot;client-id&quot;, &quot;client-secret&quot;)    user = await google_sso.verify_and_process(request)    # google_sso.state now holds your return_url (https://example.com/welcome)    return RedirectResponse(google_sso.state)```**Deprecation Warning**: legacy `use_state` argument in `SSOBase` constructor is deprecated and will be removed.## ContributingIf you'd like to contribute and add your specific login provider, please see [CONTRIBUTING.md](CONTRIBUTING.md) file.</longdescription>
</pkgmetadata>