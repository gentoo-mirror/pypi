<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Tensorflow Object Detection APICreating accurate machine learning models capable of localizing and identifyingmultiple objects in a single image remains a core challenge in computer vision.The TensorFlow Object Detection API is an open source framework built on top ofTensorFlow that makes it easy to construct, train and deploy object detectionmodels.  At Google weâ€™ve certainly found this codebase to be useful for ourcomputer vision needs, and we hope that you will as well.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;g3doc/img/kites_detections_output.jpg&quot; width=676 height=450&gt;&lt;/p&gt;Contributions to the codebase are welcome and we would love to hear back fromyou if you find this API useful.  Finally if you use the Tensorflow ObjectDetection API for a research publication, please consider citing:```&quot;Speed/accuracy trade-offs for modern convolutional object detectors.&quot;Huang J, Rathod V, Sun C, Zhu M, Korattikara A, Fathi A, Fischer I, Wojna Z,Song Y, Guadarrama S, Murphy K, CVPR 2017```\[[link](https://arxiv.org/abs/1611.10012)\]\[[bibtex](https://scholar.googleusercontent.com/scholar.bib?q=info:l291WsrB-hQJ:scholar.google.com/&amp;output=citation&amp;scisig=AAGBfm0AAAAAWUIIlnPZ_L9jxvPwcC49kDlELtaeIyU-&amp;scisf=4&amp;ct=citation&amp;cd=-1&amp;hl=en&amp;scfhb=1)\]&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;g3doc/img/tf-od-api-logo.png&quot; width=140 height=195&gt;&lt;/p&gt;## Maintainers* Jonathan Huang, github: [jch1](https://github.com/jch1)* Vivek Rathod, github: [tombstone](https://github.com/tombstone)* Ronny Votel, github: [ronnyvotel](https://github.com/ronnyvotel)* Derek Chow, github: [derekjchow](https://github.com/derekjchow)* Chen Sun, github: [jesu9](https://github.com/jesu9)* Menglong Zhu, github: [dreamdragon](https://github.com/dreamdragon)* Alireza Fathi, github: [afathi3](https://github.com/afathi3)* Zhichao Lu, github: [pkulzc](https://github.com/pkulzc)## Table of contentsSetup:  * &lt;a href='g3doc/installation.md'&gt;Installation&lt;/a&gt;&lt;br&gt;Quick Start:  * &lt;a href='object_detection_tutorial.ipynb'&gt;      Quick Start: Jupyter notebook for off-the-shelf inference&lt;/a&gt;&lt;br&gt;  * &lt;a href=&quot;g3doc/running_pets.md&quot;&gt;Quick Start: Training a pet detector&lt;/a&gt;&lt;br&gt;Customizing a Pipeline:  * &lt;a href='g3doc/configuring_jobs.md'&gt;      Configuring an object detection pipeline&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/preparing_inputs.md'&gt;Preparing inputs&lt;/a&gt;&lt;br&gt;Running:  * &lt;a href='g3doc/running_locally.md'&gt;Running locally&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/running_on_cloud.md'&gt;Running on the cloud&lt;/a&gt;&lt;br&gt;Extras:  * &lt;a href='g3doc/detection_model_zoo.md'&gt;Tensorflow detection model zoo&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/exporting_models.md'&gt;      Exporting a trained model for inference&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/defining_your_own_model.md'&gt;      Defining your own model architecture&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/using_your_own_dataset.md'&gt;      Bringing in your own dataset&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/evaluation_protocols.md'&gt;      Supported object detection evaluation protocols&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/oid_inference_and_evaluation.md'&gt;      Inference and evaluation on the Open Images dataset&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/instance_segmentation.md'&gt;      Run an instance segmentation model&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/challenge_evaluation.md'&gt;      Run the evaluation for the Open Images Challenge 2018&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/tpu_compatibility.md'&gt;      TPU compatible detection pipelines&lt;/a&gt;&lt;br&gt;  * &lt;a href='g3doc/running_on_mobile_tensorflowlite.md'&gt;      Running object detection on mobile devices with TensorFlow Lite&lt;/a&gt;&lt;br&gt;## Getting HelpTo get help with issues you may encounter using the Tensorflow Object DetectionAPI, create a new question on [StackOverflow](https://stackoverflow.com/) withthe tags &quot;tensorflow&quot; and &quot;object-detection&quot;.Please report bugs (actually broken code, not usage questions) to thetensorflow/models GitHub[issue tracker](https://github.com/tensorflow/models/issues), prefixing theissue name with &quot;object_detection&quot;.Please check [FAQ](g3doc/faq.md) for frequently asked questions beforereporting an issue.## Release information### Sep 17, 2018We have released Faster R-CNN detectors with ResNet-50 / ResNet-101 featureextractors trained on the [iNaturalist Species Detection Dataset](https://github.com/visipedia/inat_comp/blob/master/2017/README.md#bounding-boxes).The models are trained on the training split of the iNaturalist data for 4Miterations, they achieve 55% and 58% mean AP@.5 over 2854 classes respectively.For more details please refer to this [paper](https://arxiv.org/abs/1707.06642).&lt;b&gt;Thanks to contributors&lt;/b&gt;: Chen Sun### July 13, 2018There are many new updates in this release, extending the functionality andcapability of the API:* Moving from slim-based training to [Estimator](https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator)-basedtraining.* Support for [RetinaNet](https://arxiv.org/abs/1708.02002), and a [MobileNet](https://ai.googleblog.com/2017/06/mobilenets-open-source-models-for.html)adaptation of RetinaNet.* A novel SSD-based architecture called the [Pooling Pyramid Network](https://arxiv.org/abs/1807.03284) (PPN).* Releasing several [TPU](https://cloud.google.com/tpu/)-compatible models.These can be found in the `samples/configs/` directory with a comment in thepipeline configuration files indicating TPU compatibility.* Support for quantized training.* Updated documentation for new binaries, Cloud training, and [Tensorflow Lite](https://www.tensorflow.org/mobile/tflite/).See also our [expanded announcement blogpost](https://ai.googleblog.com/2018/07/accelerated-training-and-inference-with.html) and accompanying tutorial at the [TensorFlow blog](https://medium.com/tensorflow/training-and-serving-a-realtime-mobile-object-detector-in-30-minutes-with-cloud-tpus-b78971cf1193).&lt;b&gt;Thanks to contributors&lt;/b&gt;: Sara Robinson, Aakanksha Chowdhery, Derek Chow,Pengchong Jin, Jonathan Huang, Vivek Rathod, Zhichao Lu, Ronny Votel### June 25, 2018Additional evaluation tools for the [Open Images Challenge 2018](https://storage.googleapis.com/openimages/web/challenge.html) are out.Check out our short tutorial on data preparation and running evaluation [here](g3doc/challenge_evaluation.md)!&lt;b&gt;Thanks to contributors&lt;/b&gt;: Alina Kuznetsova### June 5, 2018We have released the implementation of evaluation metrics for both tracks of the [Open Images Challenge 2018](https://storage.googleapis.com/openimages/web/challenge.html) as a part of the Object Detection API - see the [evaluation protocols](g3doc/evaluation_protocols.md) for more details.Additionally, we have released a tool for hierarchical labels expansion for the Open Images Challenge: check out [oid_hierarchical_labels_expansion.py](dataset_tools/oid_hierarchical_labels_expansion.py).&lt;b&gt;Thanks to contributors&lt;/b&gt;: Alina Kuznetsova, Vittorio Ferrari, Jasper Uijlings### April 30, 2018We have released a Faster R-CNN detector with ResNet-101 feature extractor trained on [AVA](https://research.google.com/ava/) v2.1.Compared with other commonly used object detectors, it changes the action classification loss function to per-class Sigmoid loss to handle boxes with multiple labels.The model is trained on the training split of AVA v2.1 for 1.5M iterations, it achieves mean AP of 11.25% over 60 classes on the validation split of AVA v2.1.For more details please refer to this [paper](https://arxiv.org/abs/1705.08421).&lt;b&gt;Thanks to contributors&lt;/b&gt;: Chen Sun, David Ross### April 2, 2018Supercharge your mobile phones with the next generation mobile object detector!We are adding support for MobileNet V2 with SSDLite presented in[MobileNetV2: Inverted Residuals and Linear Bottlenecks](https://arxiv.org/abs/1801.04381).This model is 35% faster than Mobilenet V1 SSD on a Google Pixel phone CPU (200ms vs. 270ms) at the same accuracy.Along with the model definition, we are also releasing a model checkpoint trained on the COCO dataset.&lt;b&gt;Thanks to contributors&lt;/b&gt;: Menglong Zhu, Mark Sandler, Zhichao Lu, Vivek Rathod, Jonathan Huang### February 9, 2018We now support instance segmentation!!  In this API update we support a number of instance segmentation models similar to those discussed in the [Mask R-CNN paper](https://arxiv.org/abs/1703.06870). For further details refer to[our slides](http://presentations.cocodataset.org/Places17-GMRI.pdf) from the 2017 Coco + Places Workshop.Refer to the section on [Running an Instance Segmentation Model](g3doc/instance_segmentation.md) for instructions on how to configure a modelthat predicts masks in addition to object bounding boxes.&lt;b&gt;Thanks to contributors&lt;/b&gt;: Alireza Fathi, Zhichao Lu, Vivek Rathod, Ronny Votel, Jonathan Huang### November 17, 2017As a part of the Open Images V3 release we have released:* An implementation of the Open Images evaluation metric and the [protocol](g3doc/evaluation_protocols.md#open-images).* Additional tools to separate inference of detection and evaluation (see [this tutorial](g3doc/oid_inference_and_evaluation.md)).* A new detection model trained on the Open Images V2 data release (see [Open Images model](g3doc/detection_model_zoo.md#open-images-models)).See more information on the [Open Images website](https://github.com/openimages/dataset)!&lt;b&gt;Thanks to contributors&lt;/b&gt;: Stefan Popov, Alina Kuznetsova### November 6, 2017We have re-released faster versions of our (pre-trained) models in the&lt;a href='g3doc/detection_model_zoo.md'&gt;model zoo&lt;/a&gt;.  In addition to whatwas available before, we are also adding Faster R-CNN models trained on COCOwith Inception V2 and Resnet-50 feature extractors, as well as a Faster R-CNNwith Resnet-101 model trained on the KITTI dataset.&lt;b&gt;Thanks to contributors&lt;/b&gt;: Jonathan Huang, Vivek Rathod, Derek Chow,Tal Remez, Chen Sun.### October 31, 2017We have released a new state-of-the-art model for object detection usingthe Faster-RCNN with the[NASNet-A image featurization](https://arxiv.org/abs/1707.07012). Thismodel achieves mAP of 43.1% on the test-dev validation dataset for COCO,improving on the best available model in the zoo by 6% in termsof absolute mAP.&lt;b&gt;Thanks to contributors&lt;/b&gt;: Barret Zoph, Vijay Vasudevan, Jonathon Shlens, Quoc Le### August 11, 2017We have released an update to the [Android Detectdemo](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/android)which will now run models trained using the Tensorflow ObjectDetection API on an Android device.  By default, it currently runs afrozen SSD w/Mobilenet detector trained on COCO, but we encourageyou to try out other detection models!&lt;b&gt;Thanks to contributors&lt;/b&gt;: Jonathan Huang, Andrew Harp### June 15, 2017In addition to our base Tensorflow detection model definitions, thisrelease includes:* A selection of trainable detection models, including:  * Single Shot Multibox Detector (SSD) with MobileNet,  * SSD with Inception V2,  * Region-Based Fully Convolutional Networks (R-FCN) with Resnet 101,  * Faster RCNN with Resnet 101,  * Faster RCNN with Inception Resnet v2* Frozen weights (trained on the COCO dataset) for each of the above models to  be used for out-of-the-box inference purposes.* A [Jupyter notebook](object_detection_tutorial.ipynb) for performing  out-of-the-box inference with one of our released models* Convenient [local training](g3doc/running_locally.md) scripts as well as  distributed training and evaluation pipelines via  [Google Cloud](g3doc/running_on_cloud.md).&lt;b&gt;Thanks to contributors&lt;/b&gt;: Jonathan Huang, Vivek Rathod, Derek Chow,Chen Sun, Menglong Zhu, Matthew Tang, Anoop Korattikara, Alireza Fathi, Ian Fischer, Zbigniew Wojna, Yang Song, Sergio Guadarrama, Jasper Uijlings,Viacheslav Kovalevskyi, Kevin Murphy</longdescription>
</pkgmetadata>