<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CircleCI](https://circleci.com/gh/o3o3o/django-fakeredis.svg?style=svg)](https://circleci.com/gh/o3o3o/django-fakeredis)Easier use [fakeredis](https://pypi.org/project/fakeredis) in Django.### Install```pip install django-fakeredis```## Why use it?I have experienced many times to find bugs which is caused by mutiple fakeredis instances in tests.We just want to use fakerredis like redis with one redis-server and different connections and can debug with MONITOR command in redis### Features:* One fakeredis server with mutiple connections for tests like the way of using redis. * Combine override settings to Local-memory and fake [get_redis_connection](https://github.com/niwinz/django-redis), [django's cache](https://docs.djangoproject.com/en/2.2/topics/cache/)* To disable the fake action with passing env: &quot;NOFAKE_REDIS=1&quot;  `NOFAKE_REDIS=1 python manage.py test`Before you use `django_fakeredis`, your tests code maybe like that:```pythonserver = fakeredis.FakeServer()@override_settings(CACHES={&quot;default&quot;: {&quot;BACKEND&quot;: &quot;django.core.cache.backends.dummy.DummyCache&quot; }})@patch('foo.get_redis_connection', fakeredis.FakeRedis(server=server)def test_sth():    ....```Now your can just:```python@FakeRedis(&quot;yourpath.get_redis_connection&quot;)def test_sth():    ...```### Usage```pythonfrom django_fakeredis import FakeRedis@FakeRedis(&quot;yourpath.get_redis_connection&quot;)def test_foo():    ...``````pythonfrom django_fakeredis import FakeRediswith FakeRedis(&quot;yourpath.get_redis_connection&quot;):    foo()``````pythonfrom django_fakeredis import FakeRediswith FakeRedis(&quot;yourpath.cache&quot;):    foo()```#### NOTE1. If you want to mock `django.core.cache.cache` with fakeredis, django-fakeredis do nothing but just override CACHE settings into [Local-Memory](https://docs.djangoproject.com/en/2.2/topics/cache/#local-memory-caching) for using the internal cast. So there are two mocked redis instance for django.cache and get_redis_connection .If you want to use more redis commands, such as: sets, list...,  you may need use [django_redis]((https://github.com/niwinz/django-redis)), and cast the result by hand.django.cache:```from django.core.cache import cachecache.set(&quot;key&quot;, 2)assert cache.get(&quot;key&quot;) == 2```you have to cast by hand, when using fakeredis or django_redis directly, you have to cast by hand:```import fakerediscon = fakeredis.FakeStrictRedis()con.set(&quot;key&quot;, 2)assert con.get(&quot;key&quot;).decode('utf8') == &quot;2&quot;```2. if you have a problem that mock is not worked, you may should to see [where to patch](https://docs.python.org/3/library/unittest.mock.html#where-to-patch)</longdescription>
</pkgmetadata>