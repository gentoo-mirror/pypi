<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![workflow-badge](https://github.com/voschezang/mash/actions/workflows/python-app.yml/badge.svg)&lt;a href=&quot;https://pypi.org/project/mash-shell&quot; title=&quot;Python versions&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/python-3.8%20|%203.10%20|%203.11-blue&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/mash-shell&quot; title=&quot;PyPI&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/pypi-v0.2.0-blue&quot;/&gt;&lt;/a&gt;**Docs**:[MAIN](https://github.com/voschezang/mash/blob/main/README.md) | [SHELL.md](https://github.com/voschezang/mash/blob/main/SHELL.md)| [REFERENCE.md](https://github.com/voschezang/mash/blob/main/SHELL_REFERENCE.md)&lt;img src=&quot;https://github.com/voschezang/mash/blob/main/img/dall-E/bosh-terminal-icon.png?raw=true&quot; style=&quot;max-width: 5%&quot; alt=&quot;A drawing of a terminal&quot;&gt;&lt;/img&gt;# Mash | My Automation ShellA *shell* that can be used to for automation and (REST) resource discovery. It can be used as a [cli](https://en.wikipedia.org/wiki/Command-line_interface), [repl](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop). It exposes a [complete](https://en.wikipedia.org/wiki/Turing_completeness) programming [language](SHELL_REFERENCE.md) with variables, functions, conditions and pipes. The language can be tailored towards [domain-specific](https://en.wikipedia.org/wiki/Domain-specific_language) applications and it has interoperability with Bash. In addition, this repository contains a library of  utilities.Features:- A **DSL** that can interpret user-defined commands: `shell.py`.- A **file-browser**. Query both static datastructures and REST APIs: `examples/filesystem.py`,- A **REST client** to browse APIs with a programmatic yet intuitive interface: `examples/discoverable_api.py`.- An **object parser** which converts JSON data to Python classes: `object_parser.py`.- An **OAS-generator** for Python classes: `oas.py`.- A subshell wrapper, to redirect the output of shell scripts: `subshell.py`.- A parallelization framework for load testing: `parallel.py`.Links- [PyPI](https://pypi.org/project/mash-shell)- [github](https://github.com/voschezang/mash)## Shell&lt;img src=&quot;https://github.com/voschezang/mash/blob/main/img/shell_dropdown.png?raw=true&quot; style=&quot;max-height: 180px;&quot; alt=&quot;Example of a shell with a dropdown completion menu&quot;&gt;&lt;/img&gt;```shpip install mash-shellpython -m mash```See [`src/examples`](src/examples) for advances usage examples.**Documentation**- Implementation: [SHELL.md](https://github.com/voschezang/mash/blob/main/SHELL.md)- Language: [REFERENCE.md](https://github.com/voschezang/mash/blob/main/SHELL_REFERENCE.md).# UsageSee [reference](SHELL_REFERENCE.md).### CLI```shâ–¶ python -m mash -husage: shell.py [-hvsr][-f FILE] [--session SESSION] [cmd [cmd ...]]If no positional arguments are given then an interactive subshell is started.positional arguments:  cmd                   A comma- or newline-separated list of commandsoptional arguments:  -h, --help            show this help message and exit  -v, --verbose  -s, --safe            Safe-mode. Ask for confirmation before executing commands.  -f FILE, --file FILE  Read and run FILE as a commands  -r, --reload          Reload last session  --session SESSION     Use session SESSION```## Filesystem (CRUD Operations)See `examples/filesystem.py` and `examples/discoverable.py`.| Example             | Description                                                  || ------------------- | ------------------------------------------------------------ || `ls [PATH]`         | List the items in a directory. Use the current working directory by default. Alias: `list` || `cd`, `use [PATH]`  | Change the current working directory. Alias: `use`           || `get NAME`          | Retrieve a file.                                             || `set NAME VALUE`    | Modify a file.                                               || `new NAME [NAME..]` | Create new directories.                                      || `show [NAME]`       | Display detailed information about a directory.              || `cp`, `mv`, `rm`    | Modify files. I.e. copy, move, rename or remove files.       || `home [PATH]`       | Set home directory.                                          || `reset`             | Refresh cached values.                                       |## Usage ExamplesFor real-world examples, see [lib](https://github.com/voschezang/mash/blob/main/src/lib/math.sh).### Example 1See `src/shell_example.py`. It shows how to use a user-definnable mapping of custom functions.It uses the library `quo` to create a user-friendly subshell with autocompletion prompts.```sh# py src/shell.py echo hello, echo worldhelloworld``````sh# py src/shell_example.pyWelcome.  Type help or ? to list commands.$ ?Documented commands (type help &lt;topic&gt;):========================================e  example  f  g  h  help  ls  shell$ help gg x [y] Parameters ----------  x: int  y```### Example 2: CommandsRun commands from a file with `python src/shell -f FILE` or `python -m src.shell -f FILE`.```sh# write to fileprint A sentence. &gt; out.txt !cat out.txt |&gt; export x # save text from fileprint $xy &lt;- shell expr 2 + 2 # store result in variable $yprint &quot;result:&quot; $y # prints &quot;result: 4shell expr 2 + 2 -&gt; z # store result in variable $zprint &quot;result:&quot; $z # prints &quot;result: 4```### Example 3: File System SimulationSupport both static and dynamic data.#### With Static DataSee `examples/filesystem_example.py`. This simulates a REST resources with a directory hierarchy.In addition, it provides fuzzy name completion.```sh$ python src/examples/shell_example.py tree# example data with dicts and listsrepository = {'worlds': [    {'name': 'earth',     'animals': [         {'name': 'terrestrial',          'snakes': [{'name': 'python'},                     {'name': 'cobra'}]},         {'name': 'aquatic',          'penquins': [{'name': 'tux'}]}     ]}]}``````sh# note the autocompletion$ python src/examples/filesystem.py 'cd world; cd a; cd t; cd snakes; ll'pythoncobra```### With Dynamic DataSee `examples/discoverable.py`.```sh# list remote/auto-generated data$ python src/examples/discoverable.py 'ls'department_805, department_399# refresh data, then save$ py src/examples/discoverable.py 'ls ; save'department_750, department_14# reload data$ python src/examples/discoverable.py 'ls'department_750, department_14```# Library &amp; Tools## SetupUsing a `Makefile` for convenience.```shmake installmake test```## Parallelization UtilitiesSome experiments with parallelization, concurrency and `asyncio` in Python.### TestStart a dummy server.```shpython3 src/server.py```Do a simple load test```shpython3 src/parallel.py -v```## Object Parser- [src/object_parser/object_parser.py](object_parser.py) parses JSON data and instantiate Python objects.- [src/object_parser/oas.py](oas.py) converts domain-models to OAS.### Example```shpython src/object_parser_example.py```&lt;img src=&quot;https://github.com/voschezang/data-science-templates/blob/main/img/generated_oas.png?raw=true&quot; style=&quot;width: 400px&quot; alt=&quot;OAS Example&quot;&gt;### REST APIServer```shpython src/object_parser_server.py```Client```shcurl -X 'POST' 'http://localhost:5000/v1/organizations' \  -H 'Content-Type: application/json' \  -d '{ &quot;board&quot;: [ &quot;string&quot; ], &quot;ceo&quot;: &quot;string&quot;, &quot;departments&quot;: [ { &quot;manager&quot;: &quot;string&quot;, &quot;teams&quot;: [ { &quot;manager&quot;: &quot;string&quot;, &quot;members&quot;: [ &quot;string&quot; ], &quot;team_type&quot;: &quot;A&quot;, &quot;active&quot;: true, &quot;capacity&quot;: 0, &quot;value&quot;: 0 } ] } ] }'```</longdescription>
</pkgmetadata>