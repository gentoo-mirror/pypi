<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyelmer[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![DOI](https://zenodo.org/badge/294339020.svg)](https://zenodo.org/badge/latestdoi/294339020)[![Documentation Status](https://readthedocs.org/projects/pyelmer/badge/?version=stable)](https://pyelmer.readthedocs.io/en/stable/?badge=stable)## Project descriptionThe pyelmer package provides a simple object-oriented way to set up [Elmer FEM](http://www.elmerfem.org/) simulations from python.Some utility-functions for pre-processing using the [gmsh python API](https://pypi.org/project/gmsh/), execution of ElmerGrid and ElmerSolver, and some post-processing routines are provided.## Prerequisitespyelmer requires Python &gt;= 3.7. To run simulations, an Elmer executable is needed. As pyelmer was developed to be used with gmsh, an installation of this package is required (even though it may also be used without gmsh). Simulation settings, solver, and materials are stored in yaml-files. Therefore pyelmer depends on pyyaml. Furthermore, matplotlib is used for visualization.The required packages should be installed automatically when installing pyelmer. If you encounter any problems, try to run:```shellpip install --upgrade gmshpip install --upgrade pyyamlpip install --upgrade matplotlib```## InstallationYou can install pyelmer using pip:```shellpip install pyelmer```## Basic principlesThe basic working principle of pyelmer is the representation of sif-file entries in dictionaries. Each section of the sif-file is represented by instances of the classes- *Solver*- *Equation*- *Material*- *Body*- *Boundary*- *Component*- *BodyForce*- *InitialCondition*The parameters of e.g. a material are stored in```pythonmaterial.data = {    'Density': 1.1885,    'Heat Capacity': 1006.4,    'Heat Conductivity': 0.025873}```An object of the class *Simulation* is used to manage all members of the sif-file:```pythonimport pyelmer.elmer as elmer# simulation objectsim = elmer.Simulation()# create material and add it to simair = elmer.Material(sim, 'air')air.data = {    # material data here}# add solvers, equations, bodies, ...heat_solver = elmer.Solver(sim, 'heat')heat_solver.data = {    # solver data here}# ...# write sif-filesim.write_sif('./simulation_directory/')```## ExamplesThe following example shows the setup of a simple heat transfer simulation. The domain consists of two quadratic bodies stacked on top of each other, the lower one is water and the upper one is air. At the bottom a constant temperature of 80Â°C, and at the top a constant temperature of 20Â°C is set. You may consider this as a very simple model of the heat distribution when boiling water in a pot:&lt;img src=&quot;https://raw.githubusercontent.com/nemocrys/pyelmer/master/examples/2D_heat_transfer/heat_transfer_setup.png&quot;&gt;The example uses the OpenCASCADE geometry kernel of gmsh. Note, that you may also use the build-in &quot;geo-style&quot; kernel in python. Alternatively, it is also possible to manually set the body-ids of the mesh created with the tool of your choice.```pythonimport osimport gmshfrom pyelmer import elmerfrom pyelmer import executefrom pyelmer.post import scan_logfilefrom objectgmsh import add_physical_group, get_boundaries_in_box################ set up working directorysim_dir = &quot;./simdata&quot;if not os.path.exists(sim_dir):    os.mkdir(sim_dir)################ geometry modeling using gmshgmsh.initialize()gmsh.option.setNumber(&quot;General.Terminal&quot;, 1)gmsh.model.add(&quot;heat-transfer-2d&quot;)factory = gmsh.model.occ# main bodieswater = factory.addRectangle(0, 0, 0, 1, 1)air = factory.addRectangle(0, 1, 0, 1, 1)# create connection between the two bodiesfactory.synchronize()factory.fragment([(2, water)], [(2, air)])# add physical groupsfactory.synchronize()ph_water = add_physical_group(2, [water], &quot;water&quot;)ph_air = add_physical_group(2, [air], &quot;air&quot;)# detect boundariesline = get_boundaries_in_box(0, 0, 0, 1, 0, 0, 2, water)ph_bottom = add_physical_group(1, [line], &quot;bottom&quot;)line = get_boundaries_in_box(0, 2, 0, 1, 2, 0, 2, air)ph_top = add_physical_group(1, [line], &quot;top&quot;)# create meshgmsh.model.mesh.setSize(gmsh.model.getEntities(0), 0.1)gmsh.model.mesh.generate(2)# show mesh &amp; exportgmsh.fltk.run()  # comment this line out if your system doesn't support the gmsh GUIgmsh.write(sim_dir + &quot;/case.msh&quot;)################ elmer setupelmer.data_dir=&quot;./data&quot;sim = elmer.load_simulation(&quot;2D_steady&quot;)air = elmer.load_material(&quot;air&quot;, sim)water = elmer.load_material(&quot;water&quot;, sim)solver_heat = elmer.load_solver(&quot;HeatSolver&quot;, sim)solver_output = elmer.load_solver(&quot;ResultOutputSolver&quot;, sim)eqn = elmer.Equation(sim, &quot;main&quot;, [solver_heat])T0 = elmer.InitialCondition(sim, &quot;T0&quot;, {&quot;Temperature&quot;: 273.15})bdy_water = elmer.Body(sim, &quot;water&quot;, [ph_water])bdy_water.material = waterbdy_water.initial_condition = T0bdy_water.equation = eqnbdy_air = elmer.Body(sim, &quot;air&quot;, [ph_air])bdy_air.material = airbdy_air.initial_condition = T0bdy_air.equation = eqnbndry_bottom = elmer.Boundary(sim, &quot;bottom&quot;, [ph_bottom])bndry_bottom.data.update({&quot;Temperature&quot;: 353.15})  # 80 Â°Cbndry_top = elmer.Boundary(sim, &quot;top&quot;, [ph_top])bndry_top.data.update({&quot;Temperature&quot;: 293.15})  # 20 Â°Csim.write_startinfo(sim_dir)sim.write_sif(sim_dir)############### execute ElmerGrid &amp; ElmerSolverexecute.run_elmer_grid(sim_dir, &quot;case.msh&quot;)execute.run_elmer_solver(sim_dir)################ scan log for errors and warningserr, warn, stats = scan_logfile(sim_dir)print(&quot;Errors:&quot;, err)print(&quot;Warnings:&quot;, warn)print(&quot;Statistics:&quot;, stats)```The pre-defined materials and solvers can be found in the directory pyelmer/examples/2D_heat_transfer/data. An alternative version of this example, without using the pre-defined materials and solvers, can be found in the examples folder.## Advanced examplesAdditional examples can be found on GitHub in the examples directory:- [Simplified 2D crystal growth](https://github.com/nemocrys/pyelmer/tree/master/examples/2D_crystal_growth)- [3D Electrostatic Capacitance](https://github.com/nemocrys/pyelmer/tree/master/examples/3D_Electrostatic_Capacitance)## Geometry generationSome utility functions for the geometry generation with gmsh are provided in pyelmer/gmsh.py (e.g. add_physical_group, get_boundaries_in_box used in the example). An advanced object-oriente gmsh interface using the OpenCASCADE kernel, which facilitates the detection of the boundaries is used in crystal_growth_2d.py.Note, that it may also be worth trying [pygmsh](https://pypi.org/project/pygmsh/), which is build on top of the rather complicated [gmsh python API](https://pypi.org/project/gmsh/) used in this example.## Video tutorialsThere are two video tutorial on pyelmer (using deprecated solver-specific keywords):- [Heating up water](https://youtu.be/KZ1N2FM6J7E)- [Crystal growth](https://youtu.be/0lnX-ytKTH8)A presentation from the elmer webinar series (using these two examples) can be found [here](https://youtu.be/QIfAa_5pvHU).## Backward compatibilityIn earlier versions of pyelmer solver-specific keywords were used, for maintainability reasons these are not included any longer. For the old implementation with solver-specific keywords use:```pythonimport pyelmer.elmerkw as elmer# instead of# from pyelmer import elmer```## DocumentationTo get an overview of the program have a look at [pyelmer's Read the Docs page](https://pyelmer.readthedocs.io/en/stable/). In case of questions please open an issue!## Licensepyelmer is published under the [GPLv3 license](https://www.gnu.org/licenses/gpl-3.0.html).## ReferencingIf you use pyelmer in your research, we would be grateful if you cite us using the information provided [here](https://zenodo.org/badge/latestdoi/294339020).## Acknowledgements[This project](https://nemocrys.github.io/) has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation programme (grant agreement No 851768).&lt;img src=&quot;https://raw.githubusercontent.com/nemocrys/pyelmer/master/EU-ERC.png&quot;&gt;## ContributionAny help to improve this package is very welcome!</longdescription>
</pkgmetadata>