<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>CLIPS Python bindings=====================Python CFFI_ bindings for the 'C' Language Integrated Production System CLIPS_ 6.41.:Source: https://github.com/noxdafox/clipspy:Documentation: https://clipspy.readthedocs.io:Download: https://pypi.python.org/pypi/clipspy|build badge| |docs badge|.. |build badge| image:: https://github.com/noxdafox/clipspy/actions/workflows/action.yml/badge.svg   :target: https://github.com/noxdafox/clipspy/actions/workflows/action.yml   :alt: Build Status.. |docs badge| image:: https://readthedocs.org/projects/clipspy/badge/?version=latest   :target: http://clipspy.readthedocs.io/en/latest/?badge=latest   :alt: Documentation StatusInitially developed at NASA's Johnson Space Center, CLIPS is a rule-based programming language useful for creating expert and production systems where a heuristic solution is easier to implement and maintain than an imperative one. CLIPS is designed to facilitate the development of software to model human knowledge or expertise.CLIPSPy brings CLIPS capabilities within the Python ecosystem.Installation------------Linux and MAC+++++++++++++On Linux and MAC, CLIPSPy is packaged for `x86_64` architecture as a wheel according to PEP-513_ guidelines.Most of the distributions should be supported... code:: bash    $ pip install clipspyApple M architecture is not yet supported.Windows+++++++CLIPSPy comes as a wheel for most of the Python versions and architectures... code:: batch    &gt; pip install clipspyBuilding from sources+++++++++++++++++++++The provided Makefiles take care of retrieving the CLIPS source code and compiling the Python bindings together with it... code:: bash    $ make    # make installPlease check the documentation_ for more information regarding building CLIPSPy from sources.Example-------.. code:: python    import clips    DEFTEMPLATE_STRING = &quot;&quot;&quot;    (deftemplate person      (slot name (type STRING))      (slot surname (type STRING))      (slot birthdate (type SYMBOL)))    &quot;&quot;&quot;    DEFRULE_STRING = &quot;&quot;&quot;    (defrule hello-world      &quot;Greet a new person.&quot;      (person (name ?name) (surname ?surname))      =&gt;      (println &quot;Hello &quot; ?name &quot; &quot; ?surname))    &quot;&quot;&quot;    environment = clips.Environment()    # define constructs    environment.build(DEFTEMPLATE_STRING)    environment.build(DEFRULE_STRING)    # retrieve the fact template    template = environment.find_template('person')    # assert a new fact through its template    fact = template.assert_fact(name='John',                                surname='Doe',                                birthdate=clips.Symbol('01/01/1970'))    # fact slots can be accessed as dictionary elements    assert fact['name'] == 'John'    # execute the activations in the agenda    environment.run().. _CLIPS: http://www.clipsrules.net/.. _CFFI: https://cffi.readthedocs.io/en/latest/index.html.. _PEP-513: https://www.python.org/dev/peps/pep-0513/.. _documentation: https://clipspy.readthedocs.io</longdescription>
</pkgmetadata>