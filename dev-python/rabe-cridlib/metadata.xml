<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RaBe cridlib for PythonGenerate [RaBe CRIDs](https://github.com/radiorabe/crid-spec) based on several data sources:* Songticker for current CRID* `archiv.rabe.ch` for past CRIDs* LibreTime for future CRIDs (currently only data for the next 7 days and only available internally at RaBe)## Installation```bashpoetry add rabe-cridlib# or on old setup style projectspip -m install rabe-cridlib```## Usage```python&gt;&gt;&gt; import cridlib&gt;&gt;&gt;&gt;&gt;&gt; # parse an existing crid&gt;&gt;&gt; crid = cridlib.parse(&quot;crid://rabe.ch/v1/klangbecken#t=clock=19930301T131200.00Z&quot;)&gt;&gt;&gt; print(f&quot;version: {crid.version}, show: {crid.show}, start: {crid.start}&quot;)version: v1, show: klangbecken, start: 1993-03-01 13:12:00&gt;&gt;&gt; # get crid for current show&gt;&gt;&gt; crid = cridlib.get()&gt;&gt;&gt; print(f&quot;version: {crid.version}, show: {crid.show}&quot;)  # doctest:+ELLIPSISversion: v1, show: ...```## Development```bash# setup a dev envpython -mvenv env. env/bin/activate# install a modern poetry versionpython -mpip install poetry&gt;=1.2.0# install deps and dev versionpoetry install# make changes, run testspytest```## Release ManagementThe CI/CD setup uses semantic commit messages following the [conventional commits standard](https://www.conventionalcommits.org/en/v1.0.0/).There is a GitHub Action [`semantic-release.yaml` in radiorabe/actions](https://github.com/radiorabe/actions/blob/main/.github/workflows/semantic-release.yaml)that uses [go-semantic-commit](https://go-semantic-release.xyz/) to create newreleases.The commit message should be structured as follows:```&lt;type&gt;[optional scope]: &lt;description&gt;[optional body][optional footer(s)]```The commit contains the following structural elements, to communicate intent to the consumers of your library:1. **fix:** a commit of the type `fix` patches gets released with a PATCH version bump1. **feat:** a commit of the type `feat` gets released as a MINOR version bump1. **BREAKING CHANGE:** a commit that has a footer `BREAKING CHANGE:` gets released as a MAJOR version bump1. types other than `fix:` and `feat:` are allowed and don't trigger a releaseIf a commit does not contain a conventional commit style message you can fixit during the squash and merge operation on the PR.Once a commit has landed on the `main` branch a release will be created and automatically published to [pypi](https://pypi.org/)using the GitHub Action in [.github/workflows/release.yaml](./.github/workflows/release.yaml) which uses [poetry](https://python-poetry.org/)to publish the package to pypi.## LicenseThis package is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3 of the License.## CopyrightCopyright (c) 2022 [Radio Bern RaBe](http://www.rabe.ch)</longdescription>
</pkgmetadata>