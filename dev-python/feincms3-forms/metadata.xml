<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==============feincms3-forms==============.. image:: https://github.com/matthiask/feincms3-forms/actions/workflows/tests.yml/badge.svg    :target: https://github.com/matthiask/feincms3-forms/    :alt: CI StatusThis is an extremely flexible forms builder for the Django admin interface. Itallows using `django-content-editor&lt;https://django-content-editor.readthedocs.io/&gt;`__ for your form which enables:- Build your own form in the CMS and not have to ask programmers to change  anything.- Reorder, add and remove pre-existing fields.- Add content (text, images, anything) between form fields.- Use regions to add additional structure to a form, e.g. to build configurable  multi-step forms (wizards).- Add your own form field plugins with all the flexibility and configurability  you desire.If you only want to integrate short and simple forms (e.g. a contact form)you're probably better off using `form_designer&lt;https://github.com/feincms/form_designer&gt;`__. The feincms3 documentationcontains a `guide showing how to integrate it&lt;https://feincms3.readthedocs.io/en/latest/guides/apps-form-builder.html&gt;`__.High level overview===================The documentation is very sparse, sorry for that.Models~~~~~~FormFieldBase-------------Form fields have to inherit ``FormFieldBase``. ``FormFieldBase`` only has a``name`` field. This field can be checked for clashes etc. The base class isused instead of duck typing in various places where the code may encounter notonly form field plugins but also other django-content-editor plugins. Thelatter are useful e.g. to add blocks of text or other content between formfields.The ``FormFieldBase`` model defines the basic API of form fields:- ``get_fields()``: Return a dictionary of form fields.- ``get_initial()``: Return initial values of said fields.- ``get_cleaners()``: Return a list of callables which receive the form  instance, return the cleaned data and may raise ``ValidationError``  exceptions.- ``get_loaders()``: Return a list of loaders. The purpose of loaders is to  load form submissions, e.g. for reporting purposes. Loaders are callables  which receive the serialized form data and return a dictionary of the  following shape: ``{&quot;name&quot;: ..., &quot;label&quot;: ..., &quot;value&quot;: ...}``.FormField---------The ``FormField`` offers a basic set of attributes for standard fields such asa label, a help text and whether the field should be required or not. You donot have to use this model if you want to define your own. It's purpose is justto offer a few good defaults.SimpleFieldBase---------------The ``SimpleFieldBase`` should be instantiated in your project and can be usedto cheaply add support for many basic field types such as text fields, emailfields, checkboxes, choice fields and more with a single backing database tableand model.The ``SimpleFieldBase`` has a corresponding ``SimpleFieldInline`` in the``feincms3_forms.admin`` module which shows and hides fields depending on thefield type. For example, it makes no sense to define placeholders forcheckboxes (browsers do not support them) therefore the field is omitted in theCMS.Renderer~~~~~~~~The renderer functions are responsible for creating and instantiating the formclass. Form class creation and instantiation happens at once.Validation~~~~~~~~~~The validation module offers utilities to validate a form when it it defined inthe CMS. For example, the backend code may require that an email field alwaysexists and always has a certain predefined name (for example ``email`` üòè).These rules are not enforced at the moment but the user is always notified andcan therefore choose to head them. Or bad things may happen depending on thecode you write.Reporting~~~~~~~~~The reporting functions are mostly useful if you want to do something withsubmitted data.Installation and usage======================Create a module containing the models for the form builder (``app.forms.models``):.. code-block:: python    from content_editor.models import Region, create_plugin_base    from django.db import models    from feincms3 import plugins    from feincms3_forms import models as forms_models    class ConfiguredForm(forms_models.ConfiguredForm):        FORMS = [            forms_models.FormType(                key=&quot;contact&quot;,                label=&quot;contact form&quot;,                regions=[Region(key=&quot;form&quot;, title=&quot;form&quot;)],                # Base class for the dynamically created form:                # form_class=&quot;...&quot;,                # Validation hook for configured form (the bundled ModelAdmin                # class calls this):                # validate=&quot;...&quot;,                # Processing function which you can call after submission                # (feincms3-forms never calls this function itself, but it                # may be a nice convention):                process=&quot;app.forms.forms.process_contact_form&quot;,            ),        ]    ConfiguredFormPlugin = create_plugin_base(ConfiguredForm)    class SimpleField(forms_models.SimpleFieldBase, ConfiguredFormPlugin):        pass    Text = SimpleField.proxy(SimpleField.Type.TEXT)    Email = SimpleField.proxy(SimpleField.Type.EMAIL)    URL = SimpleField.proxy(SimpleField.Type.URL)    Date = SimpleField.proxy(SimpleField.Type.DATE)    Integer = SimpleField.proxy(SimpleField.Type.INTEGER)    Textarea = SimpleField.proxy(SimpleField.Type.TEXTAREA)    Checkbox = SimpleField.proxy(SimpleField.Type.CHECKBOX)    Select = SimpleField.proxy(SimpleField.Type.SELECT)    Radio = SimpleField.proxy(SimpleField.Type.RADIO)    SelectMultiple = SimpleField.proxy(SimpleField.Type.SELECT_MULTIPLE)    CheckboxSelectMultiple = SimpleField.proxy(SimpleField.Type.CHECKBOX_SELECT_MULTIPLE)    class RichText(plugins.richtext.RichText, ConfiguredFormPlugin):        passAdd the processing function referenced above (``app.forms.forms``):.. code-block:: python    from django.core.mail import mail_managers    from django.http import HttpResponse    def process_contact_form(request, form, *, configured_form):        mail_managers(&quot;Contact form&quot;, repr(form.cleaned_data))        return HttpResponseRedirect(&quot;.&quot;)Add the renderer and the view (``app.forms.views``):.. code-block:: python    from content_editor.contents import contents_for_item    from django.shortcuts import render    from feincms3.renderer import RegionRenderer, render_in_context, template_renderer    from feincms3_forms.renderer import create_form, short_prefix    from app.forms import models    renderer = RegionRenderer()    renderer.register(models.RichText, template_renderer(&quot;plugins/richtext.html&quot;))    renderer.register(        models.SimpleField,        lambda plugin, context: render_in_context(            context,            &quot;forms/simple-field.html&quot;,            {&quot;plugin&quot;: plugin, &quot;fields&quot;: context[&quot;form&quot;].get_form_fields(plugin)},        ),    )    def form(request):        context = {}        cf = models.ConfiguredForm.objects.first()        contents = contents_for_item(cf, plugins=renderer.plugins())        # Add a prefix in case more than one form exists on the same page:        form_kwargs = {&quot;prefix&quot;: short_prefix(cf, &quot;form&quot;)}        if request.method == &quot;POST&quot;:            form_kwargs |= {&quot;data&quot;: request.POST, &quot;files&quot;: request.FILES}        form = create_form(            contents[&quot;form&quot;],            form_class=cf.type.form_class,            form_kwargs=form_kwargs,        )        if form.is_valid():            return cf.type.process(request, form, configured_form=cf)        context[&quot;form&quot;] = form        context[&quot;form_other_fields&quot;] = form.get_form_fields(None)        context[&quot;form_regions&quot;] = renderer.regions_from_contents(contents)        return render(request, &quot;forms/form.html&quot;, context)The ``forms/simple-field.html`` template referenced above might look asfollows:.. code-block:: html+django    {% for field in fields.values %}{{ field }}{% endfor %}An example ``forms/form.html``:.. code-block:: html+django    {% extends &quot;base.html&quot; %}    {% load feincms3 i18n %}    {% block content %}    &lt;div class=&quot;content&quot;&gt;      &lt;form class=&quot;form&quot; method=&quot;post&quot;&gt;        {% csrf_token %}        {{ form.errors }}        {% render_region form_regions 'form' %}        {% for field in form_other_fields.values %}{{ field }}{% endfor %}        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;      &lt;/form&gt;    &lt;/div&gt;    {% endblock content %}Finally, the form would have to be added to the admin site (``app.forms.admin``):.. code-block:: python    from content_editor.admin import ContentEditorInline    from django.contrib import admin    from feincms3 import plugins    from feincms3_forms.admin import ConfiguredFormAdmin, SimpleFieldInline    from app.forms import models    @admin.register(models.ConfiguredForm)    class ConfiguredFormAdmin(ConfiguredFormAdmin):        inlines = [            plugins.richtext.RichTextInline.create(model=models.RichText),            SimpleFieldInline.create(                model=models.Text,                button='&lt;i class=&quot;material-icons&quot;&gt;short_text&lt;/i&gt;',            ),            SimpleFieldInline.create(                model=models.Email,                button='&lt;i class=&quot;material-icons&quot;&gt;alternate_email&lt;/i&gt;',            ),            SimpleFieldInline.create(                model=models.URL,                button='&lt;i class=&quot;material-icons&quot;&gt;link&lt;/i&gt;',            ),            SimpleFieldInline.create(                model=models.Date,                button='&lt;i class=&quot;material-icons&quot;&gt;event&lt;/i&gt;',            ),            SimpleFieldInline.create(                model=models.Integer,                button='&lt;i class=&quot;material-icons&quot;&gt;looks_one&lt;/i&gt;',            ),            SimpleFieldInline.create(                model=models.Textarea,                button='&lt;i class=&quot;material-icons&quot;&gt;notes&lt;/i&gt;',            ),            SimpleFieldInline.create(                model=models.Checkbox,                button='&lt;i class=&quot;material-icons&quot;&gt;check_box&lt;/i&gt;',            ),            SimpleFieldInline.create(                model=models.Select,                button='&lt;i class=&quot;material-icons&quot;&gt;arrow_drop_down_circle&lt;/i&gt;',            ),            SimpleFieldInline.create(                model=models.Radio,                button='&lt;i class=&quot;material-icons&quot;&gt;radio_button_checked&lt;/i&gt;',            ),        ]And last but not least, create and apply migrations. That should be basicallyit. We haven't touched validating the configured form, reporting utilities orcreating your own (compound) field types yet, for now you have to check thetestsuite.</longdescription>
</pkgmetadata>