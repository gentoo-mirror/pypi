<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fastapi-event[![license]](/LICENSE)[![pypi]](https://pypi.org/project/fastapi-event/)[![pyversions]](http://pypi.python.org/pypi/fastapi-event)[![Downloads](https://pepy.tech/badge/fastapi-event)](https://pepy.tech/project/fastapi-event)---fastapi-event is event dispatcher for FastAPI framework.## Installation```pythonpip3 install fastapi-event```## Usage### Make Event```pythonfrom fastapi_event import BaseEventclass TestEvent(BaseEvent):    async def run(self, parameter=None):        ...```Inherit `BaseEvent` and override `run()` method.```pythonfrom fastapi_event import BaseEventclass FirstEvent(BaseEvent):    ORDER = 1  # HERE(Optional)        async def run(self, parameter=None):        ...class SecondEvent(BaseEvent):    ORDER = 2  # HERE(Optional)        async def run(self, parameter=None):        ...```If you want to determine the order between events, specify `ORDER` in your event. Then, regardless of the order in which the events are stored, they will be executed in the order specified in `ORDER` variable.However, `ORDER` does not work when `run_at_once=True`.### Parameter(optional)```pythonfrom pydantic import BaseModelclass TestEventParameter(BaseModel):    id: str    pw: str```In case of need parameter, you have to inherit `BaseModel` and set fields.### Middleware```pythonfrom fastapi import FastAPIfrom fastapi_event import EventHandlerMiddlewareapp = FastAPI()app.add_middleware(EventHandlerMiddleware)```### EventListener```pythonfrom fastapi_event import EventListener@EventListener()async def test():    ...```Set `@EventListener()` decorator on the function that emits the event.```python@EventListener(run_at_once=False)```If you pass `run_at_once=False`, it will execute in the order in which `store()` is called. (or according to the `ORDER` variable defined in the event)Otherwise, it will execute through `asyncio.gather()` to run at once.### Store event```pythonfrom fastapi_event import EventListener, event_handler@EventListener()async def test():    await event_handler.store(        event=TestEvent,        parameter=TestParameter(id=&quot;hide&quot;, pw=&quot;hide&quot;),  # Optional    )```Store your event to handler via `store()` method. (parameter is optional)An event will be emitted after the function has finished executing.[license]: https://img.shields.io/badge/License-Apache%202.0-blue.svg[pypi]: https://img.shields.io/pypi/v/fastapi-event[pyversions]: https://img.shields.io/pypi/pyversions/fastapi-event</longdescription>
</pkgmetadata>