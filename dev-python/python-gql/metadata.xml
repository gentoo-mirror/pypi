<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-gqlPython schema-first GraphQL library based on GraphQL-core.## RequirementsPython 3.7+## Installation`pip install python-gql`## Getting start```pythonimport graphqlfrom gql import gql, make_schema, query, mutatetype_defs = gql(&quot;&quot;&quot;type Query {    hello(name: String!): String!}type Post {    author: String!    comment: String!}type Mutation {    addPost(author: String, comment: String): Post!}&quot;&quot;&quot;)@querydef hello(parent, info, name: str) -&gt; str:    return name@mutatedef add_post(parent, info, author: str = None, comment: str = None) -&gt; dict:    return {'author': author, 'comment': comment}schema = make_schema(type_defs)q = &quot;&quot;&quot;query {    hello(name: &quot;graphql&quot;)}&quot;&quot;&quot;result = graphql.graphql_sync(schema, q)print(result.data)# result: {'hello': 'graphql'}q = &quot;&quot;&quot;mutation {    addPost(author: &quot;syfun&quot;, comment: &quot;This is a good library.&quot;) {        author        comment    }}&quot;&quot;&quot;result = graphql.graphql_sync(schema, q)print(result.data)# result: {'addPost': {'author': 'syfun', 'comment': 'This is a good library.'}}```## Build schemaThis library is `schema-first`, so you must build a schema explicitly.Here, we have two methods to build a schema, by `a type definitions` or `a schema file`.```pythonfrom gql import gql, make_schematype_defs = gql(&quot;&quot;&quot;type Query {    hello(name: String!): String!}&quot;&quot;&quot;)schema = make_schema(type_defs)```&gt; `gql` function will check your type definitions syntax.```pythonfrom gql import make_schema_from_fileschema = make_schema_from_file('./schema.graphql')```## Resolver decorators&gt; In Python, `decorator` is my favorite function, it save my life!We can use `query`, `mutation`, `subscribe` to bind functions to GraphQL resolvers.```python@querydef hello(parent, info, name: str) -&gt; str:    return name```These decorators will auto convert the snake function to camel one.```python# add_port =&gt; addPost@mutatedef add_post(parent, info, author: str = None, comment: str = None) -&gt; dict:    return {'author': author, 'comment': comment}```When the funcation name different from the resolver name, you can give a name argument to these decorators.```python@query('hello')def hello_function(parent, info, name: str) -&gt; str:    return name```About `subscribe`, please see [gql-subscriptions](gql-subscriptions).## Enum type decoratorUse `enum_type` decorator with a python Enum class.```pythonfrom enum import Enumfrom gql import enum_type@enum_typeclass Gender(Enum):    MALE = 1    FEMALE = 2```## Custom ScalarUse `scalar_type` decorator with a python class.```pythonfrom gql import scalar_type@scalar_typeclass JSONString:    description = &quot;The `JSONString` represents a json string.&quot;    @staticmethod    def serialize(value: Any) -&gt; str:        return json.dumps(value)    @staticmethod    def parse_value(value: Any) -&gt; dict:        if not isinstance(value, str):            raise TypeError(f'JSONString cannot represent non string value: {inspect(value)}')        return json.loads(value)    @staticmethod    def parse_literal(ast, _variables=None):        if isinstance(ast, StringValueNode):            return json.loads(ast.value)        return INVALID```## Custom directive```pythonfrom gql import gql, make_schema, query, SchemaDirectiveVisitorfrom gql.resolver import default_field_resolvertype_defs = gql(&quot;&quot;&quot;directive @upper on FIELD_DEFINITIONtype Query {    hello(name: String!): String! @upper}&quot;&quot;&quot;)class UpperDirective(SchemaDirectiveVisitor):    def visit_field_definition(self, field, object_type):        original_resolver = field.resolve or default_field_resolver        def resolve_upper(obj, info, **kwargs):            result = original_resolver(obj, info, **kwargs)            if result is None:                return None            return result.upper()        field.resolve = resolve_upper        return fieldschema = make_schema(type_defs, directives={'upper': UpperDirective})```## Apollo Federation[Example](https://github.com/syfun/starlette-graphql/tree/master/examples/federation)[Apollo Federation](https://www.apollographql.com/docs/apollo-server/federation/introduction/)Thanks to [Ariadne](https://ariadnegraphql.org/docs/apollo-federation)## Framework support- [Starlette GraphQL](https://github.com/syfun/starlette-graphql)- [Django GraphQL](https://github.com/syfun/django-graphql)</longdescription>
</pkgmetadata>