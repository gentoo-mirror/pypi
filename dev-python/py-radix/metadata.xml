<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>py-radix========.. image:: https://travis-ci.org/mjschultz/py-radix.svg?branch=master   :target: https://travis-ci.org/mjschultz/py-radix.. image:: https://coveralls.io/repos/mjschultz/py-radix/badge.png?branch=master   :target: https://coveralls.io/r/mjschultz/py-radix?branch=masterpy-radix implements the radix tree data structure for the storage andretrieval of IPv4 and IPv6 network prefixes.The radix tree is commonly used for routing table lookups. It efficientlystores network prefixes of varying lengths and allows fast lookups ofcontaining networks.Installation------------Installation is a breeze via pip: ::    pip install py-radixOr with the standard Python distutils incantation: ::python setup.py buildpython setup.py installThe C extension will be built for supported python versions. If you do notwant the C extension, set the environment variable ``RADIX_NO_EXT=1``.Tests are in the ``tests/`` directory and can be run with``python setup.py nosetests``.Usage-----A simple example that demonstrates most of the features: ::import radix# Create a new treertree = radix.Radix()# Adding a node returns a RadixNode object. You can create# arbitrary members in its 'data' dict to store your datarnode = rtree.add(&quot;10.0.0.0/8&quot;)rnode.data[&quot;blah&quot;] = &quot;whatever you want&quot;# You can specify nodes as CIDR addresses, or networks with# separate mask lengths. The following three invocations are# identical:rnode = rtree.add(&quot;10.0.0.0/16&quot;)rnode = rtree.add(&quot;10.0.0.0&quot;, 16)rnode = rtree.add(network = &quot;10.0.0.0&quot;, masklen = 16)# It is also possible to specify nodes using binary packed# addresses, such as those returned by the socket module# functions. In this case, the radix module will assume that# a four-byte address is an IPv4 address and a sixteen-byte# address is an IPv6 address. For example:binary_addr = inet_ntoa(&quot;172.18.22.0&quot;)rnode = rtree.add(packed = binary_addr, masklen = 23)# Exact search will only return prefixes you have entered# You can use all of the above ways to specify the addressrnode = rtree.search_exact(&quot;10.0.0.0/8&quot;)# Get your data back outprint rnode.data[&quot;blah&quot;]# Use a packed addressaddr = socket.inet_ntoa(&quot;10.0.0.0&quot;)rnode = rtree.search_exact(packed = addr, masklen = 8)# Best-match search will return the longest matching prefix# that contains the search term (routing-style lookup)rnode = rtree.search_best(&quot;10.123.45.6&quot;)# Worst-search will return the shortest matching prefix# that contains the search term (inverse routing-style lookup)rnode = rtree.search_worst(&quot;10.123.45.6&quot;)# Covered search will return all prefixes inside the given# search term, as a list (including the search term itself,# if present in the tree)rnodes = rtree.search_covered(&quot;10.123.0.0/16&quot;)# There are a couple of implicit members of a RadixNode:print rnode.network# -&gt; &quot;10.0.0.0&quot;print rnode.prefix# -&gt; &quot;10.0.0.0/8&quot;print rnode.prefixlen# -&gt; 8print rnode.family# -&gt; socket.AF_INETprint rnode.packed# -&gt; '\n\x00\x00\x00'# IPv6 prefixes are fully supported in the same treernode = rtree.add(&quot;2001:DB8::/3&quot;)rnode = rtree.add(&quot;::/0&quot;)# Use the nodes() method to return all RadixNodes creatednodes = rtree.nodes()for rnode in nodes:print rnode.prefix# The prefixes() method will return all the prefixes (as a# list of strings) that have been enteredprefixes = rtree.prefixes()# You can also directly iterate over the tree itself# this would save some memory if the tree is big# NB. Don't modify the tree (add or delete nodes) while# iterating otherwise you will abort the iteration and# receive a RuntimeWarning. Changing a node's data dict# is permitted.for rnode in rtree:  print rnode.prefixLicense-------py-radix is licensed under a ISC/BSD licence. The underlying radix tree implementation is taken (and modified) from MRTd and is subject to a 4-term BSD license. See the LICENSE file for details.Contributing------------Please report bugs via GitHub at https://github.com/mjschultz/py-radix/issues.Code changes can be contributed through a pull request on GitHub or emaileddirectly to me &lt;mjschultz@gmail.com&gt;.The main portions of the directory tree are as follows: ::    .    ├── radix/*.py      # Pure Python code    ├── radix/_radix.c  # C extension code (compatible with pure python code)    ├── radix/_radix/*  # C extension code (compatible with pure python code)    ├── tests/          # Tests (regression and unit)    └── setup.py        # Standard setup.py for installation/testing/etc.</longdescription>
</pkgmetadata>