<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Helpers for using Django from threadsWhen handling requests django [manages database connection lifecycles foryou](https://github.com/django/django/blob/ca9872905559026af82000e46cde6f7dedc897b6/django/db/__init__.py#L34-L42).  By default closing them after each request or keepingthem alive allowing re-use for a specified amount of time when `CONN_MAX_AGE` is set so long as no errors are encountered.Sometimes you want to do work outside of a web request. When the work is large and you would like to distribute it, likely to places other than where the web requests areserved, there are systems like [Celery](https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html).  There are other cases though were you're just tryingto do work outside of the request &amp; response cycle even and it's lightweight enough that running a full-blown job queuing system and it's associated data store is tooinvolved.  You just want [Thread](https://docs.python.org/3/library/threading.html#thread-objects)s or even better a[ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor).If you just jump straight in and use either of those you'll run into slow to manifest and tough to track down problems with broken database connections.  This is becauseDjango automatically opens a connection per-thread when a database is accessed and leaves them lying around in that thread indefinitely.  This results in errors when thedatabase has timed out the connection or it has otherwise encountered problems.`django_thread` provides a this problem by implementing a `Thread` class that mimics Django's request connection handling and provides a `ThreadPoolExecutor` that does soaround the invocations of submitted calls.## Usage### Thread`django_thread.Thread` is a 100% drop-in replacement for `threading.Thread`.  See [threading.Thread](https://docs.python.org/3/library/threading.html#thread-objects) forusage and documentation.```pythonfrom django_thread import Threadclass ExampleThread(Thread):    def run(self):        for some_model in SomeModel.objects.filter(...):            ...thread = ExampleThread()thread.start()# do other thingsthread.join()```### ThreadPoolExecutor`django_thread.ThreadPoolExecutor` is a 100% drop-in replacement for `concurrent.futures.ThreadPoolExecutor`.  See[concurrent.futures.ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor) for usage and documentation.```pythonfrom concurrent.futures import as_completedfrom django_thread import ThreadPoolExecutordef update_or_create_thing(name):    thing, _ = Thing.objects.update_or_create(name=name)    return thing.idexecutor = ThreadPoolExecutor()futures = []for i in range(5):    future = executor.submit(update_or_create_thing, f'Name i')    futures.append(future)ids = [f.result() for f in futures]```</longdescription>
</pkgmetadata>