<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Coal Mine - Periodic task execution monitor===========================================Home page is [on Github](https://github.com/quantopian/coal-mine/).Releases are available [in PyPI](https://pypi.python.org/pypi/coal_mine).Please support this project [on Patreon](https://patreon.com/jikseclecticofferings).What is Coal Mine?------------------Periodic, recurring tasks are ubiquitous in computing, and so one ofthe most common problems in systems administration and operations isensuring that such tasks execute as expected. Designing the tasks toreport errors is necessary but not sufficient; what if a task isn'tbeing run at all (crashed daemon, misconfigured crontab) or is runningmuch more slowly than it should be?Coal Mine provides a simple yet powerful tool for solving thisproblem. In a nutshell:* Each recurring task has a Coal Mine &quot;canary&quot; associated with it.* The task triggers the canary when it is finished executing.* The canary knows how often the task is supposed to execute.* Coal Mine alerts by email when a canary is late and alerts again  when the late canary resumes.* Coal Mine keeps a (partial) history of when each canary was  triggered.Track tasks that are supposed to execute periodically using &quot;canaries&quot;that the tasks trigger when they execute. Alert by email when a canaryis late. Alert again when a late canary resumes. Keep a partialhistory of canary trigger times.The server notifies immediately when the deadline for an unpausedcanary passes. Similarly, the server notifies immediately when apreviously late canary is triggered.Prerequisites-------------* Python 3.2* MongoDB for storage (pull requests to add additional storage engines  are welcome)* requirements listed in requirements.txt* for development, requirements listed in requirements_dev.txtConcepts--------Coal Mine provides two interfaces, a REST API and a command-lineinterface (CLI). Since triggering a canary requires nothing more thanhitting its endpoint with a GET or POST query, it's best to dotriggering through the API, so that the CLI doesn't need to beinstalled on every system running monitoring tasks. For administrativeoperations, on the other hand, the CLI is usually easier.All timestamps stored and displayed by Coal Mine are in UTC.### OperationsThe operations that can be performed on canaries through the CLI orAPI are:* create* delete* reconfigure* get information about* pause -- stop monitoring and alerting* unpause* trigger* list -- all canaries or the ones matching search termsCoal Mine security is rudimentary. If the server is configured with anoptional authentication key, then the key must be specified with alloperations except trigger.### DataThese canary attributes are specified when it is created or updated:* name* description* periodicity -- the maximum number of seconds that can elapse before  a canary is late, _or_ a schedule in the format described  [below](#periodicity), which allows the periodicity of the canary to  vary over time* zero or more notification email address(es)These are created and maintained by Coal Mine:* slug -- the canary's name, lower-cased, with spaces and underscores  converted to hyphens and other non-alphanumeric characters removed* a random identifier consisting of eight lower-case letters,  generated when the canary is created and guaranteed to be unique  against other canaries in the database* late state (boolean)* notify state (boolean) indicating whether a notification needs to be  sent out for this canary (used when notifications are being handled  by a separate background task)* paused state (boolean)* deadline by which the canary should be triggered to avoid being late* a history of triggers, pruned when &gt;1000 or (&gt;100 and older than one  week)#### Scheduled periodicity  &lt;a name=&quot;periodicity&quot;&gt;&lt;/a&gt;Coal Mine allows the periodicity of a canary to vary automaticallybased on the time, date, day of week, etc. There are three contexts inwhich this is useful:1. a recurring task executes with different frequencies at different   times;2. a continuous recurring task takes more or less time to finish at   different times; or3. the urgency of responding to delays in a recurring task varies at   different times.To specify a varying periodicity for a canary, instead of justspecifying a number of seconds, you specify a serious of[crontab-like directives](https://github.com/josiahcarlson/parse-crontab)separated by semicolons. Here's an example, split onto multiple linesfor clarity:    # 5-minute delays are ok on weekends ;    * * * * sat,sun 300 ;    # 5-minute days are ok overnight ;    * 0-12 * * mon-fri 300 ;    # otherwise, we require a shorter periodicity ;    * 13-23 * * mon-fri 90Notes:* The last field in each directive is the periodicity value, i.e., the  maximum number of seconds to allow between triggers during the  specified time range.* As indicated above, even though the example is shown split across  multiple lines, it must be specified all on one line when providing  it to Coal Mine.* Note that comments like the ones shown above really are allowed in  the schedule you specify to Coal Mine -- they're not just for  decoration in the example -- but you need to remember to end them  with semicolons.* Schedule directives _cannot overlap_. For example, this won't work,  because the second directive overlaps with the first one every  Saturday and Sunday between midnight and noon:        * * * * sat,sun 60 ;        * 0-11 * * * 90* If a canary's schedule has gaps, then _the canary is effectively  paused_ during them. For example, in this schedule, the canary would  be paused all day Saturday:        * * * * sun 300 ;        * * * * mon-fri 60* As with everything else in Coal Mine, the hours and minutes  specified here are in UTC.* When you create or update a canary with a periodicity schedule, the  canary data returned to you in response will include a  &quot;periodicity_schedule&quot; field showing how the schedule you specified  plays out. The schedule will extend far enough into the future for  each of the directives you specified to be be shown at least once,  or for a week, whichever is longer.Installation and configuration------------------------------### Server1. `pip install coal-mine`2. Create `/etc/coal-mine.ini` (see [below](#ini-file)) or [use   environment variables](#env-vars-config)3. Run `coal-mine &amp;`4. Put that in `/etc/rc.local` or something as needed to ensure that   it is restarted on reboot.#### Server configuration file  &lt;a name=&quot;ini-file&quot;&gt;&lt;/a&gt;The server configuration file, `coal-mine.ini`, can go in the currentdirectory where the server is launched, `/etc`, or`/usr/local/etc`. (If you need to put it somewhere else, modify thelist of directories near the top of `main()` in `server.py`.)The file is (obviously) in INI format. Here are the sections andsettings that it can or must contain:* \[logging\] -- optional  * file -- log file path; otherwise logging goes to stderr  * rotate -- if true, then rotate the log file when it gets too large  * max\_size -- max log file size before rotating (default: 1048576)  * backup\_count -- number of rotated log files to keep (default: 5)* \[mongodb\] -- required  * hosts -- MongoDB URI or comma-separated list of one or more host    names  * database -- database name. Coal Mine will create only one    collection in the database, called &quot;canaries&quot;. Omit if    `hosts` contains a MongoDB URI  * username -- omit if no authentication is required or `hosts`    contains a URI  * password -- omit if no authentication is required or if `hosts`    contains a URI  * replicaSet -- must be specified if using a replicaset and `hosts`    isn't a URI  * other arguments will be passed through to MongoClient     * for example, tls can be set to True or False* \[email\]  * sender (required) -- email address to put in the From line of    notification emails  * host (optiona) -- SMTP host to connect to  * port (optional) -- SMTP port to connect to  * username (optional) -- SMTP username, must be specified if    password is  * password (optional) -- SMTP password, must be specified if    username is* \[wsgi\] -- optional  * port -- port number the server should listen on (default: 80)  * auth\_key -- if non-empty, then the specified key must be    specified as a parameter of the same name with all API requests    except &quot;trigger&quot;.#### Configurating via environment variables  &lt;a name=&quot;env-vars-config&quot;&gt;&lt;/a&gt;If the environment variable `MONGODB_URI` is set, then the server willread its configuration from environment variables _instead of_`coal-mine.ini`. (i.e., the configuration file will neither besearched for nor read). When configured this way, loggingconfiguration is not supported, the `mongodb` configuration filesection is replaced with the `MONGODB_URI` variable, and the remainingconfiguration settings are specified as follows:* email.sender -&gt; `EMAIL_SENDER`* email.host -&gt; `SMTP_HOST`* email.port -&gt; `SMTP_PORT`* email.username -&gt; `SMTP_USERNAME`* email.password -&gt; `SMTP_PASSWORD`* wsgi.port -&gt; `WSGI_PORT`* wsgi.auth_key -&gt; `WSGI_AUTH_KEY`### Deploying the Server to HerokuThere's a `Procfile` in the source tree which allows you to deploythis app to Heroku. This is new functionality which has not beenextensively tested, so please [file bug reports][bugs] if you run intoany issues! Here's how to do it in a nutshell:[bugs]: https://github.com/quantopian/coal-mine/issues1. Create a new Heroku app to hold it.2. Connect a MongoDB database to the Heroku app via the `MONGODB_URI`   config variable, via an add-on (I think ObjectRocket will work?),   MongoDB Atlas, your own self-hosted MongoDB cluster, or whatever.   It doesn't matter where the MongoDB database lives as long as   Heroku can connect to it and its full URI is in `MONGODB_URI`.3. Set `EMAIL_SENDER`, `SMTP_HOST`, `SMTP_PORT`, `SMTP_USERNAME`,   `SMTP_PASSWORD`. You'll need to add an SMTP add-on to the Heroku   app or have an SMTP server somewhere else you can use; if you use   an add-on, it'll probably call these settings by different names,   so you'll have to copy them into the names that Coal Mine expects.4. Set `WSGI_AUTH_KEY` to something long and random, since you don't   want anyone on the internet to be able to mess with your Coal Mine   instance.5. Push the code to the Heroku app.6. Make sure the app is configured to run at least one web dyno   (should happen by default) and exactly 1 worker dyno.Once all that's done you'll need to configure your CLI to talk to theHeroku app as described below. Make sure to specify `https://` at thestart of the host name when configuring the CLI.### CLI1. `pip install coal-mine`2. `cmcli configure [--host server-host-name] [--port server-port]        [--auth-key key | --no-auth-key]`The `--host` argument can take a URL base (i.e.,`http://server-host-name` or `https://server-host-name`) as well. Thisis useful if, for example, you've put your Coal Mine server behind anSSL proxy so the CLI needs to use SSL to connect to it (which youprobably will, e.g., if you are deploying to Heroku as describedabove).The CLI stores its configuration in `~/.coal-mine.ini`. Note that theauthentication key is stored in plaintext. Any configurationparameters the CLI needs that aren't stored in the INI file must bespecified explicitly on the command line when using the CLI.Using Coal Mine---------------### CLIThe Coal Mine CLI, `cmcli`, provides convenient access to the fullrange of Coal Mine's functionality.To make the CLI easier to use, you can configure it as shown above,but you also have the option of specifying the server connectioninformation every time you use it. Also, connnection informationspecified on the command line overrides the stored configuration.Here are some example commands:    cmcli create --help        cmcli create --name 'My Second Canary' --periodicity $((60*60*25))  # $((60*60*25)) is 25 hours    cmcli trigger --id aseprogj    cmcli delete --slug 'my-second-canary'Run `cmcli --help` for more information.For commands that operate on individual canaries, you can identify thecanary with `--id`, `--name`, or `--slug`. Note that for the `update`command, if you want to update the name of a canary you will need toidentify it `--id` or `--slug`, because in that case the `--name`argument is used to specify the new name.API usage examples------------------### Example commands    $ coal-mine &amp;    [1] 7564    $ curl 'http://coal-mine-server/coal-mine/v1/canary/create?name=My+First+Canary&amp;periodicity=3600'    {        &quot;status&quot;: &quot;ok&quot;,        &quot;canary&quot;: {            &quot;deadline&quot;: &quot;2015-03-19T02:08:44.885182&quot;,            &quot;id&quot;: &quot;fbkvlsby&quot;,            &quot;paused&quot;: false,            &quot;description&quot;: &quot;&quot;,            &quot;periodicity&quot;: 3600,            &quot;name&quot;: &quot;My First Canary&quot;,            &quot;slug&quot;: &quot;my-first-canary&quot;,            &quot;emails&quot;: [],            &quot;history&quot;: [                [                    &quot;2015-03-19T01:08:44.885182&quot;,                    &quot;Canary created&quot;                ]            ],            &quot;late&quot;: false        }    }    $ curl 'http://coal-mine-server/fbkvlsby?comment=short+form+trigger+url'    {        &quot;recovered&quot;: false,        &quot;unpaused&quot;: false,        &quot;status&quot;: &quot;ok&quot;    }    $ curl 'http://coal-mine-server/coal-mine/v1/canary/trigger?slug=my-first-canary&amp;comment=long+form+trigger+url'    {        &quot;recovered&quot;: false,        &quot;unpaused&quot;: false,        &quot;status&quot;: &quot;ok&quot;    }    $ curl 'http://coal-mine-server/coal-mine/v1/canary/get?name=My+First+Canary'    {        &quot;canary&quot;: {            &quot;paused&quot;: false,            &quot;name&quot;: &quot;My First Canary&quot;,            &quot;history&quot;: [                [                    &quot;2015-03-19T01:11:56.408000&quot;,                    &quot;Triggered (long form trigger url)&quot;                ],                [                    &quot;2015-03-19T01:10:42.608000&quot;,                    &quot;Triggered (short form trigger url)&quot;                ],                [                    &quot;2015-03-19T01:08:44.885000&quot;,                    &quot;Canary created&quot;                ]            ],            &quot;emails&quot;: [],            &quot;id&quot;: &quot;fbkvlsby&quot;,            &quot;late&quot;: false,            &quot;slug&quot;: &quot;my-first-canary&quot;,            &quot;deadline&quot;: &quot;2015-03-19T02:11:56.408000&quot;,            &quot;periodicity&quot;: 3600,            &quot;description&quot;: &quot;&quot;        },        &quot;status&quot;: &quot;ok&quot;    }All API endpoints are fully documented below.### Watching a cron job     0 0 * * * my-backup-script.sh &amp;&amp; (curl http://coal-mine-server/fbkvlsby &amp;&gt;/dev/null)API reference-------------All API endpoints are submitted as http(s) GET requests. Results arereturned in JSON.All results have a &quot;status&quot; field which is &quot;ok&quot; on success or &quot;error&quot;on failure. Failures also return a reasonable HTTP error status code.Boolean fields in API should be specified as &quot;true&quot;, &quot;yes&quot;, or &quot;1&quot; fortrue, or &quot;false&quot;, &quot;no&quot;, &quot;0&quot;, or empty string for false. Boolean fieldsin responses are standard JSON, i.e., &quot;true&quot; or &quot;false&quot;.Timestamps returned by the API are always UTC.### Create canaryEndpoint: `/coal-mine/v1/canary/create`Side effects:Adds canary to database. Creates history record at current time with&quot;Canary created&quot; as its comment. Sets deadline to current time plusperiodicity, unless &quot;paused&quot; was specified.Required parameters:* name* periodicity* auth\_key (if authentication is enabled in the server)Optional parameters:* description - empty if unspecified* email - specify multiple times for multiple addresses; no  notifications if unspecified* paused - allows canary to be created already in paused stateResponse is the same as shown for get().### Delete canaryEndpoint: `/coal-mine/v1/canary/delete`Required parameters:* name, id, or slug* auth\_keyResponse:    {'status': 'ok'}### Update canaryEndpoint: `/coal-mine/v1/canary/update`Side effects:Updates the specified canary attributes. Updates deadline to latesthistory timestamp plus periodicity if periodicity is updated andcanary is unpaused, and sets late state if new deadline is beforenow. Sends notification if canary goes from not late to late or viceversa.Required parameters:* id or slug (_not_ name, which should only be specified to update the  name and slug)* auth\_keyOptional parameters:* name* periodicity* description* email - specify a single value of &quot;-&quot; to clear existing email addressesResponse is the same as shown for get().### Get canaryEndpoint: `/coal-mine/v1/canary/get`Required parameters:* name, id, or slug* auth\_keyResponse:    {'status': 'ok',     'canary': {'name': name,               'description': description,               'id': identifier,               'slug': slug,               'periodicity': seconds,               'emails': [address, ...],               'late': boolean,               'paused': boolean,               'deadline': 'YYYY-MM-DDTHH:MM:SSZ',               'history': [['YYYY-MM-DDTHH:MM:SSZ', comment], ...]}}### List canariesEndpoint: `/coal-mine/v1/canary/list`Required parameters:* auth\_keyOptional parameters:* verbose - include all query output for each canary* paused - boolean, whether to list paused / unpaused canaries only* late - boolean, whether to list late / timely canaries only* search - string, regular expression to match against name, identifier, and  slugResponse:    {'status': 'ok',     'canaries': [{'name': name,                 'id': identifier},                ...]}If &quot;verbose&quot; is true, then the JSON for each canary includes all thefields shown above, not just the name and identifier.### Trigger canaryEndpoint: `/coal-mine/v1/canary/trigger`Also: /_identifier_, in which case the &quot;id&quot; parameter is impliedNote that the server will accept POST requests for triggers as well asGET requests, so that you can use triggers as webhooks in applicationsthat expect to be able to POST. The content of the POST is ignored;even when using POST, the API parameters must still be specified as aquery string.Side effects:Sets late state to false. Sets deadline to now plus periodicity. Addshistory record. Prunes history records. Unpauses canary. Generatesnotification email if canary was previously late.Required parameters:* name, id, or slugOptional parameters:* comment - stored in history with trigger recordResponse:    {'status': 'ok', 'recovered': boolean, 'unpaused': boolean}* recovered - indicates whether the canary was previously late before  this trigger* unpaused - indicates whether the canary was previously paused before  this trigger### Pause canaryEndpoint: `/coal-mine/v1/canary/pause`Side effects:Clears deadline. Sets late state to false if necessary. Pausescanary. Adds history record about pause. Prunes history records.Required parameters:* name, id, or slug* auth\_keyOptional parameters:* commentResponse is the same as shown for get().### Unpause canaryEndpoint: `/coal-mine/v1/canary/unpause`Side effects:Sets deadline to now plus periodicity. Unpauses canary. Adds historyrecord about unpause. Prunes history records.Required parameters:* name, id, or slug* auth\_keyOptional parameters:* commentResponse is the same as shown for get().Quis custodiet ipsos custodes?------------------------------Obviously, if you're relying on Coal Mine to let you know whensomething is wrong, you need to make sure that Coal Mine itself staysrunning. One way to do that is to have a cron job which periodicallytriggers a canary and generates output (which crond will email to you)if the trigger fails. Something like:    0 * * * * (curl http://coal-mine-server/atvywzoa | grep -q -s '&quot;status&quot;: &quot;ok&quot;') || echo &quot;Failed to trigger canary.&quot;I also recommend using a log-monitoring service such as Papertrail tomonitor and alert about errors in the Coal Mine log.Contacts--------[Github](https://github.com/quantopian/coal-mine)[Email](mailto:jik@kamens.us)[PyPI](https://pypi.python.org/pypi/coal_mine)Contributors------------Coal Mine was created by Jonathan Kamens, with design help from theawesome folks at [Quantopian](https://www.quantopian.com/). Thanks,also, to Quantopian for supporting the development and open-sourcingof this project.Maintaining the package-----------------------### TestsTests are expecting to be run with `pytest`. With all the packages in`requirements.txt` and `requirements_dev.txt` installed, run `python3-m pytest`.### BuildingAfter installing the requirements in `requirements.txt` and`requirements_dev.txt`, do `python3 -m build` to build packages.### Uploading to PyPIWe're currently using Twine for uploading to PyPI. You need to install therequirements in `requirements.txt` and `requirements_dev.txt` in orderto use it. You also need to configure it. See the [Twinedocumentation](https://twine.readthedocs.io/en/stable/) for more info.Development philosophy----------------------Use Python.Do one, simple thing well. There are several similar projects outthere that do more than this project attempts to do.Make the implementation as simple and straightforward as possible. Thecode should be small. What everything does should be obvious fromreading it.Minimize external dependencies. If something is simple andstraightforward to do ourselves, don't use a third-party package justfor the sake of using a third-party package.Alternatives------------Alternatives to Coal Mine include:* [Dead Man's Snitch](https://deadmanssnitch.com/)* [Cronitor.io](https://cronitor.io/)* [Sheriff](https://github.com/dawanda/sheriff)We chose to write something new, rather than using what's already outthere, for several reasons:* We wanted more control over the stability and reliability of our  watch service than the commercial alternatives provide.* We wanted fine-grained control over the periodicity of our watches,  as well as assurance that we would be notified immediately when a  watch is late, something that not all of the alternatives  guarantee.* We like Python.* We like OSS.### To Do(Pull requests welcome!)Other storage engines.Other notification mechanisms.Web UI.Links to Web UI in email notifications.Repeat notifications if a canary remains late for an extended periodof time? Not even sure I want this.Better authentication?Support time-zone localization of displayed timestamps.SSL support in server</longdescription>
</pkgmetadata>