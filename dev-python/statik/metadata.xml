<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Statik[![Build Status](https://travis-ci.org/thanethomson/statik.svg?branch=master)](https://travis-ci.org/thanethomson/statik)[![PyPI](https://img.shields.io/pypi/v/statik.svg)](https://pypi.python.org/pypi/statik)[![PyPI](https://img.shields.io/pypi/pyversions/statik.svg)](https://pypi.python.org/pypi/statik)## Overview**Statik** aims to be a simple, yet powerful, generic static web site generator.Instead of forcing you to adhere to a particular data structure/model (like thestandard blog data model, with posts, pages and tags), **Statik** allows you todefine your own data models in YAML format, and instances of those data modelseither in YAML or Markdown. This is all loaded into an in-memory[SQLAlchemy](http://www.sqlalchemy.org/) SQLite database when rendering your*views*.Then, code up your templates using the [Jinja2](http://jinja.pocoo.org/)templating engine (very similar to the Django templating engine), or[Mustache](http://mustache.github.io/) templates.Finally, define your *views* (either complex or simple) in YAML format, telling**Statik** how to render your data and templates to specific URLs for your shinynew static web site. Write queries for your views in SQLAlchemy's [ORMsyntax](http://docs.sqlalchemy.org/en/rel_1_0/orm/tutorial.html), or[MLAlchemy](https://github.com/thanethomson/MLAlchemy) to make your life easier.See the [wiki](https://github.com/thanethomson/statik/wiki) for more details.## RequirementsIn order to install **Statik**, you will need:* Python 3.6+* `pip` or `easy_install`## InstallationSimply run the following:```bash&gt; pip install statik```To upgrade, just run the following:```bash&gt; pip install --upgrade statik```## UsageTo build the project in the current directory, writing output files to the`public` directory within the current directory:```bash&gt; statik```To build a project in another directory, writing output files to the `public`directory within *that* directory:```bash&gt; statik -p /path/to/project/folder```To build a project in another directory, with control over where to place theoutput files:```bash&gt; statik -p /path/to/project/folder -o /path/to/output/folder```## Project QuickStartTo create an empty project folder with the required project structure, simplyrun:```bash&gt; statik -p /path/to/project/ --quickstart```## Statik ProjectsA **Statik** project must adhere to the directory structure as follows:```config.yml    - YAML configuration file for the overall project.assets/       - Static assets for the project (images, CSS files,                scripts, etc.). Ignored if themes are used.data/         - Instances for each of the different models, defined either in                YAML or Markdown format.models/       - A folder specifically dedicated to model definitions, in YAML                format.templates/    - Jinja2/Mustache template files. Ignored if themes are used.templatetags/ - Python scripts defining custom Jinja2 template tags and                filters.themes/       - If your project uses themes, place them here. Each theme                must be uniquely named, and must contain an &quot;assets&quot;                and &quot;templates&quot; folder.views/        - Configuration files, in YAML format, defining &quot;recipes&quot; for how                to generate various different URLs (which models to use, which                data and which templates).```For example projects, see the `examples` directory in the source repository.For more information, see the[wiki](https://github.com/thanethomson/statik/wiki).## ThemesThemes for **Statik** will slowly start appearing in the [StatikThemes](https://github.com/thanethomson/statik-themes) repository. Watch thatspace!## Remote upload**Statik** can publish your generated site for you through SFTP or through[Netlify](https://netlify.com).### SFTPTo publish your website via SFTP, you can configure certain values by way ofconfiguration file or environment variable-based options. Some sensitiveoptions, however, must be configured exclusively by way of environmentvariables.For your configuration file:```yamldeploy:  sftp:    host: your-server.com    dest-path: /folder/on/your/server/    user: youruserforyourserver    # you can also optionally specify which SSH private key to use    key-file: ~/.ssh/my-private-key    # optionally specify SFTP port (default: 22)    port: 2222```Set up your sensitive environment variables prior to running Statik:```bash# If your server requires password-based authentication&gt; export SFTP_PASSWORD=mysftppassword# If your SSH key file is encrypted and it requires a password to decrypt&gt; export SFTP_KEY_FILE_PASSWORD=mysftpkeyfilepassword```Alternatively, you could set up all SFTP variables through environment variablesalone:```bash&gt; export SFTP_HOST=your-server.com&gt; export SFTP_PORT=2222                  # optionally set SFTP port&gt; export SFTP_DEST_PATH=/folder/on/your/server&gt; export SFTP_USER=youruserforyourserver&gt; export SFTP_PASSWORD=mysftppassword&gt; export SFTP_KEY_FILE=~/.ssh/my-private-key&gt; export SFTP_KEY_FILE_PASSWORD=mysftpkeyfilepassword```Then run Statik using the following deployment command:```bash&gt; statik --deploy sftp```For troubleshooting SFTP connections, run this using the `-v` flag to increaseoutput verbosity:```bash&gt; statik --deploy sftp -v```### NetlifyTo publish your website via Netlify, you will need 2 things: your Netlify accesstoken and your Netlify site ID.First, specify your access token and site ID as environment variables:Linux:```bash&gt; export NETLIFY_AUTH_TOKEN=&lt;netlify_token&gt;&gt; export NETLIFY_SITE_ID=&lt;netlify_site_id&gt;```Windows```bash&gt; set NETLIFY_AUTH_TOKEN=&lt;netlify_token&gt;&gt; set NETLIFY_SITE_ID=&lt;netlify_site_id&gt;```Then, run **Statik** by passing in `--deploy=netlify`.```bashstatik --deploy netlify```**Statik** will upload the static site that it outputs.## License**The MIT License (MIT)**Copyright (c) 2016-2019 Thane ThomsonPermission is hereby granted, free of charge, to any person obtaining a copy ofthis software and associated documentation files (the &quot;Software&quot;), to deal inthe Software without restriction, including without limitation the rights touse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies ofthe Software, and to permit persons to whom the Software is furnished to do so,subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESSFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ORCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHERIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR INCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>