<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Help Scout API clientThis package contains a wrapper to query Help Scout's API.The package tries to be as general and assume as little as possible about theAPI. Therefore, it will allow any endpoint to be requested and objects andtypes will be created on the fly.Information about the available endpoints, objects and other stuff can be foundon the [API's documentation](https://developer.helpscout.com/mailbox-api/).The client contains as little internal knowledge of the API as possible, mostlyauthentication, pagination and how are objects returned.In order to handle pagination calls to API are done inside a generator.As a consequence, even post and deletes have to be &quot;nexted&quot; if using the *hit_*method.## InstallationThe package can be installed cloning the repository and doing`python setup.py install` or `pip install .`.It can also be install from pypi.org doing `pip install python-helpscout-v2`.## AuthenticationIn order to use the API you need an app id and app secret.More about credentials can be found in[helpscout's documentation](https://developer.helpscout.com/mailbox-api/overview/authentication/).## General useThe general use is by instantiating a client and then hitting the API bydoing `client.&lt;endpoint&gt;.&lt;method&gt;(&lt;resource_id&gt;, &lt;params&gt;)`. Where:* *Endpoint* is one of the endpoints defined in the API's documentation.* *Method* is one of get, post, patch, put or delete as defined in the API.* *Resource id* can be None or the id of the specific resource to access,  update or delete. E.g.: a conversation id.* *Params* can be None, a string or a dictionary with the parameters to access  in the get method or the data to send otherwise.To access attributes of specific resources, like the tags of a conversation,you can do:`client.&lt;endpoint&gt;[&lt;resource_id&gt;].&lt;attribute&gt;.&lt;method&gt;(&lt;resource_id&gt;, &lt;params&gt;)`.Example: `client.conversations[212109].threads.get()`## Examples### Listing all users```python&gt; from helpscout import HelpScout&gt; hs = HelpScout(app_id='ax0912n', app_secret='axon129')&gt; users = hs.users.get()&gt; users[0]User(id=12391,     firstName=&quot;John&quot;,     lastName=&quot;Doe&quot;,     email=&quot;john.doe@gmail.com&quot;,     role=&quot;user&quot;,     timezone=&quot;America/New_York&quot;,     createdAt=&quot;2019-01-03T19:00:00Z&quot;,     updatedAt=&quot;2019-05-20T18:00:00Z&quot;,     type=&quot;user&quot;,     mention=&quot;johnny&quot;,     initials=&quot;JD&quot;,     _links={'self': {'href': 'https://api.helpscout.net/v2/users/12391'}})&gt; users[1].id9320```### Hitting the API directly to get all mailboxes```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='laknsdo', app_secret='12haosd9')&gt; for mailbox in hs.hit('mailboxes', 'get'):&gt;      print(mailbox){'mailboxes': [   {'id': 1930,    'name': 'Fake Support',    'slug': '0912301u',    'email': 'support@fake.com',    'createdAt': '2018-12-20T20:00:00Z',    'updatedAt': '2019-05-01T16:00:00Z',    '_links': {      'fields': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/fields/'},      'folders': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/folders/'},      'self': {'href': 'https://api.helpscout.net/v2/mailboxes/1930'}    }   } ]}```### Hitting the API directly to get all mailboxes but handling requests with pagination as iteration goes on```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='laknsdo', app_secret='12haosd9')&gt; for mailbox in hs.hit_('mailboxes', 'get'):&gt;      print(mailbox){'mailboxes': [   {'id': 1930,    'name': 'Fake Support',    'slug': '0912301u',    'email': 'support@fake.com',    'createdAt': '2018-12-20T20:00:00Z',    'updatedAt': '2019-05-01T16:00:00Z',    '_links': {      'fields': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/fields/'},      'folders': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/folders/'},      'self': {'href': 'https://api.helpscout.net/v2/mailboxes/1930'}    }   } ]}```### Hitting the API directly to get a specific mailbox```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='laknsdo', app_secret='12haosd9')&gt; for mailbox in hs.hit('mailboxes', 'get', resource_id=1930):&gt;      print(mailbox){'id': 1930, 'name': 'Fake Support', 'slug': '0912301u', 'email': 'support@fake.com', 'createdAt': '2018-12-20T20:00:00Z', 'updatedAt': '2019-05-01T16:00:00Z', '_links': {   'fields': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/fields/'},   'folders': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/folders/'},   'self': {'href': 'https://api.helpscout.net/v2/mailboxes/1930'} }}```### Hitting the API directly to get a specific mailbox dictionary styleIn this case, you will have to select the first element of the list yourself,as it is not quite clear if one or more elements should be expected from theapi depending on the endpoint.```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='laknsdo', app_secret='12haosd9')&gt; print(hs.mailboxes[1930].get())Mailbox( id=1930, name='Fake Support', slug='0912301u', email='support@fake.com', createdAt='2018-12-20T20:00:00Z', updatedAt='2019-05-01T16:00:00Z', _links={   'fields': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/fields/'},   'folders': {'href': 'https://api.helpscout.net/v2/mailboxes/1930/folders/'},   'self': {'href': 'https://api.helpscout.net/v2/mailboxes/1930'} })```### Listing conversations using a dictionary parameters```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='asd12', app_secret='onas912')&gt; params = {'status': 'active'}&gt; conversations = hs.conversations.get(params=params)```### Listing conversations using a string with parameters```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='asdon123', app_secret='asdoin1')&gt; params = 'query=(createdAt:[2019-06-20T00:00:00Z TO 2019-06-22T23:59:59Z])'&gt; conversations = hs.conversations.get(params=params)```### Deleting a conversation```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='asdon123', app_secret='asdoin1')&gt; conversation_id = 10&gt; hs.conversations.delete(resource_id=conversation_id)```### Requesting a pre-made report```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='asdon123', app_secret='asdoin1')&gt; report_url = 'reports/happiness?start=2019-06-01T00:00:00Z&amp;end=2019-06-15:00:00Z'&gt; next(hs.hit_(report_url, 'get'))...```or```python&gt; from helpscout.client import HelpScout&gt; hs = HelpScout(app_id='asdon123', app_secret='asdoin1')&gt; report_url = 'reports/happiness?start=2019-06-01T00:00:00Z&amp;end=2019-06-15:00:00Z'&gt; hs.hit(report_url, 'get')...```### Adding tags to a conversation```python&gt; from helpscout import HelpScout&gt; helpscout_client = HelpScout(app_id='ax0912n', app_secret='axon129')&gt; conversation_id = 999&gt; endpoint = 'conversations/%s/tags' % conversation_id&gt; data = {'tags': conversation_tags}&gt; helpscout_client.hit(endpoint, 'put', data=data)```or```python&gt; from helpscout import HelpScout&gt; helpscout_client = HelpScout(app_id='ax0912n', app_secret='axon129')&gt; conversation_id = 999&gt; endpoint = 'conversations/%s/tags' % conversation_id&gt; data = {'tags': conversation_tags}&gt; next(helpscout_client.hit_(endpoint, 'put', data=data))```or```python&gt; from helpscout import HelpScout&gt; helpscout_client = HelpScout(app_id='ax0912n', app_secret='axon129')&gt; conversation_id = 999&gt; data = {'tags': conversation_tags}&gt; helpscout_client.conversations[999].tags.put(data=data)```</longdescription>
</pkgmetadata>