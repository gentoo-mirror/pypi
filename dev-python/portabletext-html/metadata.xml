<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![pypi](https://img.shields.io/pypi/v/portabletext-html.svg)](https://pypi.org/project/portabletext-html/)[![test](https://github.com/otovo/python-portabletext-html/actions/workflows/test.yml/badge.svg)](https://github.com/otovo/python-portabletext-html/actions/workflows/test.yml)[![code coverage](https://codecov.io/gh/otovo/python-portabletext-html/branch/main/graph/badge.svg)](https://codecov.io/gh/otovo/python-portabletext-html)[![supported python versions](https://img.shields.io/badge/python-3.7%2B-blue)](https://pypi.org/project/python-portabletext-html/)# Portable Text HTML Renderer for PythonThis package generates HTML from [Portable Text](https://github.com/portabletext/portabletext).For the most part, it mirrors [Sanity's](https://www.sanity.io/) own [block-content-to-html](https://www.npmjs.com/package/%40sanity/block-content-to-html) NPM library.## Installation```pip install portabletext-html```## UsageInstantiate the `PortableTextRenderer` class with your content and call the `render` method.The following content```pythonfrom portabletext_html import PortableTextRendererrenderer = PortableTextRenderer({    &quot;_key&quot;: &quot;R5FvMrjo&quot;,    &quot;_type&quot;: &quot;block&quot;,    &quot;children&quot;: [        {&quot;_key&quot;: &quot;cZUQGmh4&quot;, &quot;_type&quot;: &quot;span&quot;, &quot;marks&quot;: [&quot;strong&quot;], &quot;text&quot;: &quot;A word of&quot;},        {&quot;_key&quot;: &quot;toaiCqIK&quot;, &quot;_type&quot;: &quot;span&quot;, &quot;marks&quot;: [&quot;strong&quot;], &quot;text&quot;: &quot; warning;&quot;},        {&quot;_key&quot;: &quot;gaZingsA&quot;, &quot;_type&quot;: &quot;span&quot;, &quot;marks&quot;: [], &quot;text&quot;: &quot; Sanity is addictive.&quot;}    ],    &quot;markDefs&quot;: [],    &quot;style&quot;: &quot;normal&quot;})renderer.render()```Generates this HTML```html&lt;p&gt;&lt;strong&gt;A word of warning;&lt;/strong&gt; Sanity is addictive.&lt;/p&gt;```### Supported typesThe `block` and `span` types are supported out of the box.### Custom typesBeyond the built-in types, you have the freedom to provideyour own serializers to render any custom `_type` the way youwould like to.To illustrate, if you passed this data to the renderer class:```pythonfrom portabletext_html import PortableTextRendererrenderer = PortableTextRenderer({    &quot;_type&quot;: &quot;block&quot;,    &quot;_key&quot;: &quot;foo&quot;,    &quot;style&quot;: &quot;normal&quot;,    &quot;children&quot;: [        {            &quot;_type&quot;: &quot;span&quot;,            &quot;text&quot;: &quot;Press, &quot;        },        {            &quot;_type&quot;: &quot;button&quot;,            &quot;text&quot;: &quot;here&quot;        },        {            &quot;_type&quot;: &quot;span&quot;,            &quot;text&quot;: &quot;, now!&quot;        }    ]})renderer.render()```The renderer would actually throw an error here, since `button`does not have a corresponding built-in type serializer by default.To render this text you must provide your own serializer, like this:```pythonfrom portabletext_html import PortableTextRendererdef button_serializer(node: dict, context: Optional[Block], list_item: bool):    return f'&lt;button&gt;{node[&quot;text&quot;]}&lt;/button&gt;'renderer = PortableTextRenderer(    ...,    custom_serializers={'button': button_serializer})output = renderer.render()```With the custom serializer provided, the renderer would now successfullyoutput the following HTML:```html&lt;p&gt;Press &lt;button&gt;here&lt;/button&gt;, now!&lt;/p&gt;```### Supported mark definitionsThe package provides several built-in marker definitions and styles:**decorator marker definitions**- `em`- `strong`- `code`- `underline`- `strike-through`**annotation marker definitions**- `link`- `comment`### Custom mark definitionsLike with custom type serializers, additional serializers formarker definitions and styles can be passed in like this:```pythonfrom portabletext_html import PortableTextRendererrenderer = PortableTextRenderer(    ...,    custom_marker_definitions={'em': ComicSansEmphasis})renderer.render()```The primary difference between a type serializer and a mark definition serializeris that the latter uses a class structure, and has three required methods.Here's an example of a custom style, adding an extra fontto the built-in equivalent serializer:```pythonfrom portabletext_html.marker_definitions import MarkerDefinitionclass ComicSansEmphasis(MarkerDefinition):    tag = 'em'    @classmethod    def render_prefix(cls, span: Span, marker: str, context: Block) -&gt; str:        return f'&lt;{cls.tag} style=&quot;font-family: &quot;Comic Sans MS&quot;, &quot;Comic Sans&quot;, cursive;&quot;&gt;'    @classmethod    def render_suffix(cls, span: Span, marker: str, context: Block) -&gt; str:        return f'&lt;/{cls.tag}&gt;'    @classmethod    def render_text(cls, span: Span, marker: str, context: Block) -&gt; str:        # custom rendering logic can be placed here        return str(span.text)    @classmethod    def render(cls, span: Span, marker: str, context: Block) -&gt; str:        result = cls.render_prefix(span, marker, context)        result += str(span.text)        result += cls.render_suffix(span, marker, context)        return result```Since the `render_suffix` and `render` methods here are actually identical to the base class,they do not need to be specified, and the whole example can be reduced to:```pythonfrom portabletext_html.marker_definitions import MarkerDefinition  # basefrom portabletext_html import PortableTextRendererclass ComicSansEmphasis(MarkerDefinition):    tag = 'em'    @classmethod    def render_prefix(cls, span: Span, marker: str, context: Block) -&gt; str:        return f'&lt;{cls.tag} style=&quot;font-family: &quot;Comic Sans MS&quot;, &quot;Comic Sans&quot;, cursive;&quot;&gt;'renderer = PortableTextRenderer(    ...,    custom_marker_definitions={'em': ComicSansEmphasis})renderer.render()```### Supported stylesBlocks can optionally define a `style` tag. These styles are supported:- `h1`- `h2`- `h3`- `h4`- `h5`- `h6`- `blockquote`- `normal`## Missing featuresFor anyone interested, we would be happy to see adefault built-in serializer for the `image` type added.In the meantime, users should be able to serialize image types by passing a custom serializer.## ContributingContributions are always appreciated üëèFor details, see the [CONTRIBUTING.md](https://github.com/otovo/python-portabletext-html/blob/main/CONTRIBUTING.md).</longdescription>
</pkgmetadata>