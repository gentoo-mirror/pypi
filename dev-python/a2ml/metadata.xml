<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># a2ml - Automation of AutoML [![CircleCI](https://img.shields.io/circleci/build/gh/augerai/a2ml/master)](https://circleci.com/gh/augerai/a2ml)[![Join the chat](https://img.shields.io/gitter/room/augerai/a2ml.svg)](https://gitter.im/augerai/a2ml)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://raw.githubusercontent.com/augerai/a2ml/master/LICENSE)[![Python](https://img.shields.io/pypi/pyversions/a2ml.svg)](https://pypi.org/project/a2ml/)[![PyPI - A2ML Versions](https://img.shields.io/pypi/v/a2ml.svg)](https://pypi.org/project/a2ml/)The A2ML (&quot;Automate AutoML&quot;) project is a Python API and set of command line tools to automate Automated Machine Learning tools from multiple vendors. The intention is to provide a common API for all Cloud-oriented AutoML vendors.  Data scientists can then train their datasets against multiple AutoML models to get the best possible predictive model.  May the best &quot;algorithm/hyperparameter search&quot; win.  Full documentation for A2ML is available at [a2ml.org](http://a2ml.org)## The PREDIT PipelineEvery AutoML vendor has their own API to manage the datasets and create andmanage predictive models.  They are similar but not identical APIs.  But they share acommon set of stages:* Importing data for training* Train models with multiple algorithms and hyperparameters* Evaluate model performance and choose one or more for deployment* Deploy selected models* Predict results with new data against deployed models* Review performance of deployed modelsSince ITEDPR is hard to remember we refer to this pipeline by its conveniently mnemonic anagram: &quot;PREDIT&quot; (French for &quot;predict&quot;). The A2ML project provides classes which implement this pipeline for various Cloud AutoML providersand a command line interface that invokes stages of the pipeline.## SetupA2ML is distributed as a python package, so to install it:```sh$ pip install -U a2ml```It will install Auger provider.To use Azure AutoML:### Mac:```sh$ brew install libomp```#### For Mac OS High Sierra and below:```sh$ SKLEARN_NO_OPENMP=1 pip install &quot;scikit-learn==0.21.3&quot;$ pip install &quot;a2ml[azure]&quot; --ignore-installed onnxruntime onnx nimbusml```### Linux:```sh$ apt-get update &amp;&amp; apt-get -y install gcc g++ libgomp1``````sh$ pip install &quot;a2ml[azure]&quot;```To use Google Cloud:```sh$ pip install &quot;a2ml[google]&quot;```To install everything including testing and server code:```sh$ pip install &quot;a2ml[all]&quot;```## DevelopmentTo release a new version the flow should be:1. Change the `__version__` variable in `a2ml/__init__.py` to match what you want to release, minus the &quot;v&quot;. By default it would be &quot;&lt;current-milestone&gt;.dev0&quot;, for example &quot;0.3.0.dev0&quot;. This ensures we don’t accidentally release a dev version to pypi.org. So for when we’re ready to release 0.3.0, the   `__version__` variable should simply be &quot;0.3.0&quot;.2. Commit and push the changes above.```shgit tag v&lt;the-version&gt; (for example: git tag v0.3.0)git push --tags```3. verify circleci build passed and docker image tag exists:```shpip install -U a2ml==0.3.0docker pull augerai/a2ml:v0.3.0```4. Increment the `__version__` variable in `a2ml/__init__.py` to the next version in the current milestone. For example, &quot;0.3.1.dev0&quot;</longdescription>
</pkgmetadata>