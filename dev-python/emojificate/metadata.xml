<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>emojificate===========|status| |release| |date| .. |status| image:: https://img.shields.io/github/actions/workflow/status/glasnt/emojificate/pytest.yml?branch=latest&amp;label=pytest&amp;style=flat-square   :alt: GitHub Workflow Status.. |release| image:: https://img.shields.io/github/v/release/glasnt/emojificate?sort=semver&amp;style=flat-square   :alt: GitHub release (latest SemVer).. |date| image:: https://img.shields.io/github/release-date/glasnt/emojificate?style=flat-square   :alt: GitHub Release DateEmojificate is a Python implementation of a concept of using fallback images, alt text, title text and aria labels to represent emoji in HTML, a more accessible method than browser defaults. Installation------------emojificate is available on pypi::    pip install emojificateUsage-----To convert a string from the command line::    $ python3 -m emojificate &quot;I ðŸ’œ emoji ðŸ˜Š&quot;    I    &lt;img src=&quot;https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/72x72/1f49c.png&quot;         css=&quot;emojificiate&quot; alt=&quot;ðŸ’œ&quot; title=&quot;Purple Heart&quot;          aria-label=&quot;Emoji: Purple Heart&quot;&gt;    emoji         &lt;img src=&quot;https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/72x72/1f60a.png&quot;        css=&quot;emojificiate&quot; alt=&quot;ðŸ˜Š&quot; title=&quot;Smiling Face With Smiling Eyes&quot;        aria-label=&quot;Emoji: Smiling Face With Smiling Eyes&quot;&gt;Change the class with ``--css-class`` (default &quot;emojificate&quot;). To get SVG instead of PNG, use ``--filetype svg``.Or, if you've got a Django project, put ``emojificate`` into your ``INSTALLED_APPS``, and then use the following in a template::    {% load emojificate %}    This is some {{ user_content|emojificate }} that has emoji in it.    {% emojified %}    This is some template content that ðŸ’œ emoji as well.    {% endemojified %}Configure with ``EMOJIFICATE_FILETYPE`` and ``EMOJIFICIATE_CSS_CLASS`` in your ``settings.py``, and add some css to make the emoji not huge.Implementation--------------TL;DR: Take a string, split it into tokens, and if a token is emoji, process it into a nice format.As of 0.4.0, string-splitting is now handled by `grapheme &lt;https://github.com/alvinlindstam/grapheme&gt;`__.Given a list of tokens, we can leverage the native `unicodedata &lt;https://docs.python.org/3/library/unicodedata.html&gt;`__ to:* see if a token is a unicode Symbol (an emoji)* get the codepoint for the emoji, and* get the name of the emoji.If a token is a grapheme and not a character, there won't be a record of what it is in unicodedata. In that case emojificate defaults to a human-readable version of the shortcode provided by `emoji &lt;https://github.com/carpedm20/emoji&gt;`__. From there, we construct an ``&lt;img&gt;`` replacement for the emoji:* Use images from `twemoji &lt;https://github.com/twitter/twemoji&gt;`__, Twitter's emoji set (if the URL exists)* Have an ``alt`` parameter containing the original emoji. This allows for copying-pasting.* Use the name of the emoji in the ``title`` parameter. This allows for hover-tooltips.* Add an ``aria-label`` for screen-reader accessibility.For more information, see `Solve For Emoji &lt;https://glasnt.com/blog/solve-for-emoji/&gt;`__.Implementation in other languages---------------------------------Ruby~~~~~.. code-block:: ruby    require 'gemoji'    def cdn        &quot;https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/72x72/&quot;    end    def emojificate(string)      string.split(&quot;&quot;).each do |s|          e = Emoji.find_by_unicode(s)          if e then               u = s.ord.to_s(16) # e.g. 1f431               d = e.description  # e.g. &quot;cat face&quot;               img = &quot;&lt;img src=\&quot;#{cdn}/#{u}.png\&quot; alt=\&quot;#{s}\&quot; title=\&quot;#{d}\&quot; aria-label=\&quot;Emoji: #{d}\&quot;&gt;&quot;               print img           else               print s           end       end     end</longdescription>
</pkgmetadata>