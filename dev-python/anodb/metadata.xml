<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AnoDBConvenient Wrapper around [aiosql](https://github.com/nackjicholson/aiosql)and a [Database Connection](https://www.python.org/dev/peps/pep-0249).![Status](https://github.com/zx80/anodb/actions/workflows/anodb-package.yml/badge.svg?branch=master&amp;style=flat)![Tests](https://img.shields.io/badge/tests-11%20✓-success)![Coverage](https://img.shields.io/badge/coverage-100%25-success)![Python](https://img.shields.io/badge/python-3-informational)![Databases](https://img.shields.io/badge/databases-5-informational)![Drivers](https://img.shields.io/badge/drivers-10-informational)![Version](https://img.shields.io/pypi/v/anodb)![Badges](https://img.shields.io/badge/badges-9-informational)![License](https://img.shields.io/pypi/l/anodb?style=flat)## DescriptionThis class creates a persistent database connection and importsSQL queries from a file as simple Python functions.If the connection is broken, a new connection is attempted.Compared to `aiosql`, the point is not to need to pass a connectionas an argument on each call: The `DB` class embeds both connection*and* query methods.For concurrent programming (threads, greenlets…), a relevant setupshould also consider thread-locals and pooling issues at some higher level.## ExampleInstall the module with `pip install anodb` or whatever method you like.Once available:```pythonimport anodb# parameters: driver, connection string, SQL filedb = anodb.DB(&quot;sqlite3&quot;, &quot;test.db&quot;, &quot;test.sql&quot;)db.do_some_insert(key=1, val=&quot;hello&quot;)db.do_some_update(key=1, val=&quot;world&quot;)print(&quot;data&quot;, db.do_some_select(key=1))db.commit()db.close()```With file `test.sql` containing something like:```sql-- name: do_some_selectSELECT * FROM Stuff WHERE key = :key;-- name: do_some_insert!INSERT INTO Stuff(key, val) VALUES (:key, :val);-- name: do_some_update!UPDATE Stuff SET val = :val WHERE key = :key;```## DocumentationThe `anodb` module provides the `DB` class which embeds both a[PEP 249](https://peps.python.org/pep-0249/) database connection(providing methods `commit`, `rollback`, `cursor`, `close` andits `connect` counterpart to re-connect) *and* SQL queries wrappedinto dynamically generated functions by[aiosql](https://pypi.org/project/aiosql/).Such functions may be loaded from a string (`add_queries_from_str`) or apath (`add_queries_from_path`).The `DB` constructor parameters are:- `db` the name of the database driver: `sqlite3`, `psycopg`, `pymysql`, see  [aiosql documentation](https://nackjicholson.github.io/aiosql/database-driver-adapters.html)  for a list of supported drivers.- `conn` an optional connection string used to initiate a connection with the  driver.  For instance, `psycopg` accepts a  [libpq connection string](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING)  such as: `&quot;host=db1.my.org port=5432 dbname=acme user=calvin …&quot;`.- `queries` a path name or list of path names from which to read query   definitions.- `options` a dictionary or string to pass additional connection parameters.- `auto_reconnect` whether to attempt a reconnection if the connection is lost.  Default is `True`.- `debug` whether to generate debugging messages.  Default is `False`.- other named parameters are passed as additional connection parameters.```pythonimport anodbdb = anodb.DB(&quot;sqlite3&quot;, &quot;acme.db&quot;, &quot;acme-queries.sql&quot;)db = anodb.DB(&quot;duckdb&quot;, &quot;acme.db&quot;, &quot;acme-queries.sql&quot;)db = anodb.DB(&quot;psycopg&quot;, &quot;host=localhost dbname=acme&quot;, &quot;acme-queries.sql&quot;)db = anodb.DB(&quot;psycopg&quot;, None, &quot;acme-queries.sql&quot;, host=&quot;localhost&quot;, user=&quot;calvin&quot;, password=&quot;...&quot;, dbname=&quot;acme&quot;)db = anodb.DB(&quot;psycopg2&quot;, &quot;host=localhost dbname=acme&quot;, &quot;acme-queries.sql&quot;)db = anodb.DB(&quot;pygresql&quot;, None, &quot;acme-queries.sql&quot;, host=&quot;localhost:5432&quot;, user=&quot;calvin&quot;, password=&quot;...&quot;, database=&quot;acme&quot;)db = anodb.DB(&quot;pg8000&quot;, None, &quot;acme-queries.sql&quot;, host=&quot;localhost&quot;, port=5432, user=&quot;calvin&quot;, password=&quot;...&quot;, database=&quot;acme&quot;)db = anodb.DB(&quot;MySQLdb&quot;, None, &quot;acme-queries.sql&quot;, host=&quot;localhost&quot;, port=3306, user=&quot;calvin&quot;, password=&quot;...&quot;, database=&quot;acme&quot;)db = anodb.DB(&quot;pymysql&quot;, None, &quot;acme-queries.sql&quot;, host=&quot;localhost&quot;, port=3306, user=&quot;calvin&quot;, password=&quot;...&quot;, database=&quot;acme&quot;)db = anodb.DB(&quot;mysql-connector&quot;, None, &quot;acme-queries.sql&quot;, host=&quot;localhost&quot;, port=3306, user=&quot;calvin&quot;, password=&quot;...&quot;, database=&quot;acme&quot;)db = anodb.DB(&quot;mariadb&quot;, None, &quot;acme-queries.sql&quot;, host=&quot;localhost&quot;, port=3306, user=&quot;calvin&quot;, password=&quot;...&quot;, database=&quot;acme&quot;)```## Versions[Sources](https://github.com/zx80/anodb),[documentation](https://zx80.github.io/anodb/) and[issues](https://github.com/zx80/anodb/issues)are available on [GitHub](https://github.com/).Latest version is *8.2* on 2023-07-15.See [all versions](VERSIONS.md)</longdescription>
</pkgmetadata>