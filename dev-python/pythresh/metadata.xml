<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>################################################## Python Outlier Detection Thresholding (PyThresh)##################################################**Deployment, Stats, &amp; License**.. image:: https://img.shields.io/pypi/v/pythresh.svg?color=brightgreen&amp;logo=pypi&amp;logoColor=white   :target: https://pypi.org/project/pythresh/   :alt: PyPI version.. image:: https://img.shields.io/conda/vn/conda-forge/pythresh?color=brightgreen&amp;logo=conda-forge&amp;logoColor=white   :target: https://anaconda.org/conda-forge/pythresh   :alt: Anaconda version.. image:: https://img.shields.io/readthedocs/pythresh.svg?version=latest&amp;logo=read-the-docs&amp;logoColor=white   :target: http://pythresh.readthedocs.io/?badge=latest   :alt: Documentation status.. image:: https://github.com/KulikDM/pythresh/actions/workflows/python-package.yml/badge.svg   :target: https://github.com/KulikDM/pythresh/actions/workflows/python-package.yml   :alt: testing.. image:: https://codecov.io/gh/KulikDM/pythresh/branch/main/graph/badge.svg?token=8ZAPXTLW9Y   :target: https://codecov.io/gh/KulikDM/pythresh   :alt: Codecov.. image:: https://img.shields.io/github/stars/KulikDM/pythresh.svg?logo=github&amp;logoColor=white   :target: https://github.com/KulikDM/pythresh/stargazers   :alt: GitHub stars.. image:: https://pepy.tech/badge/pythresh?   :target: https://pepy.tech/project/pythresh   :alt: Downloads.. image:: https://img.shields.io/pypi/pyversions/pythresh.svg?logo=python&amp;logoColor=white   :target: https://pypi.org/project/pythresh/   :alt: Python versions.. image:: https://img.shields.io/github/license/KulikDM/pythresh.svg   :target: https://github.com/KulikDM/pythresh/blob/master/LICENSE   :alt: License.. image:: https://zenodo.org/badge/497683169.svg   :target: https://zenodo.org/badge/latestdoi/497683169   :alt: Zenodo DOI----PyThresh is a comprehensive and scalable **Python toolkit** for**thresholding outlier detection scores** in univariate/multivariatedata. It has been writen to work in tandem with PyOD and has similarsyntax and data structures. However, it is not limited to this singlelibrary. PyThresh is meant to threshold scores generated by an outlierdetection. It thresholds scores without the need to set a contaminationlevel or have the user guess the amount of outliers that may exist inthe dataset beforehand. These non-parametric methods were written toreduce the user's input/guess work and rather rely on statistics insteadto threshold outlier scores. For thresholding to be applied correctly,the outlier detection scores must follow this rule: the higher thescore, the higher the probability that it is an outlier in the dataset.All threshold functions return a binary array where inliers and outliersare represented by a 0 and 1 respectively.PyThresh includes more than 30 thresholding algorithms. These algorithmsrange from using simple statistical analysis like the Z-score to morecomplex mathematical methods that involve graph theory and topology.************************ Documentation &amp; Citing************************Visit `PyThresh Docs&lt;https://pythresh.readthedocs.io/en/latest/?badge=latest&gt;`_ for fulldocumentation or see below for a quickstart installation and usageexample.To cite this work you can visit `PyThresh Citation&lt;https://zenodo.org/badge/latestdoi/497683169&gt;`_----**Outlier Detection Thresholding with 7 Lines of Code**:.. code:: python   # train the KNN detector   from pyod.models.knn import KNN   from pythresh.thresholds.clust import CLUST   clf = KNN()   clf.fit(X_train)   # get outlier scores   decision_scores = clf.decision_scores_  # raw outlier scores on the train data   # get outlier labels   thres = CLUST()   labels = thres.eval(decision_scores)************** Installation**************It is recommended to use **pip** or **conda** for installation:.. code:: bash   pip install pythresh            # normal install   pip install --upgrade pythresh  # or update if needed.. code:: bash   conda install -c conda-forge pythreshAlternatively, you can get the version with the latest updates bycloning the repo and run setup.py file:.. code:: bash   git clone https://github.com/KulikDM/pythresh.git   cd pythresh   pip install .Or with **pip**:.. code:: bash   pip install https://github.com/KulikDM/pythresh/archive/main.zip**Required Dependencies**:-  matplotlib-  numpy&gt;=1.13-  pyod-  scipy&gt;=1.3.1-  scikit_learn&gt;=0.20.0-  six**Optional Dependencies**:-  pyclustering (used in the CLUST thresholder)-  ruptures (used in the CPD thresholder)-  geomstats (used in the KARCH thresholder)-  scikit-lego (used in the META thresholder)-  joblib&gt;=0.14.1 (used in the META thresholder)-  pandas (used in the META thresholder)-  torch (used in the VAE thresholder)-  tqdm (used in the VAE thresholder)**************** API Cheatsheet****************-  **eval(score)**: evaluate outlier score.Key Attributes of threshold:-  **thresh_**: Return the threshold value that separates inliers from   outliers. Outliers are considered all values above this threshold   value. Note the threshold value has been derived from normalized   scores.-  **confidence_interval_**: Return the lower and upper confidence   interval of the contamination level. Only applies to the COMB   thresholder************************ External Feature Cases**************************Towards Data Science**: `Thresholding Outlier Detection Scores withPyThresh&lt;https://towardsdatascience.com/thresholding-outlier-detection-scores-with-pythresh-f26299d14fa&gt;`_**Towards Data Science**: `When Outliers are Significant: WeightedLinear Regression&lt;https://towardsdatascience.com/when-outliers-are-significant-weighted-linear-regression-bcdc8389ab10&gt;`_**ArXiv**: `Estimating the Contamination Factor's Distribution inUnsupervised Anomaly Detection &lt;https://arxiv.org/abs/2210.10487&gt;`_*********************************** Available Thresholding Algorithms***********************************+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| Abbr      | Description                               | References         | Documentation                                                                                                                                          |+===========+===========================================+====================+========================================================================================================================================================+| AUCP      | Area Under Curve Percentage               | [#aucp1]_          | `pythresh.thresholds.aucp module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.aucp&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| BOOT      | Bootstrapping                             | [#boot1]_          | `pythresh.thresholds.boot module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.boot&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| CHAU      | Chauvenet's Criterion                     | [#chau1]_          | `pythresh.thresholds.chau module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.chau&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| CLF       | Trained Linear Classifier                 | [#clf1]_           | `pythresh.thresholds.clf module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.clf&gt;`_                  |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| CLUST     | Clustering Based                          | [#clust1]_         | `pythresh.thresholds.clust module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.clust&gt;`_              |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| CPD       | Change Point Detection                    | [#cpd1]_           | `pythresh.thresholds.cpd module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.cpd&gt;`_                  |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| DECOMP    | Decomposition                             | [#decomp1]_        | `pythresh.thresholds.decomp module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.decomp&gt;`_            |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| DSN       | Distance Shift from Normal                | [#dsn1]_           | `pythresh.thresholds.dsn module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.dsn&gt;`_                  |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| EB        | Elliptical Boundary                       | [#eb1]_            | `pythresh.thresholds.eb module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.eb&gt;`_                    |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| FGD       | Fixed Gradient Descent                    | [#fgd1]_           | `pythresh.thresholds.fgd module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.fgd&gt;`_                  |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| FILTER    | Filtering Based                           | [#filter1]_        | `pythresh.thresholds.filter module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.filter&gt;`_            |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| FWFM      | Full Width at Full Minimum                | [#fwfm1]_          | `pythresh.thresholds.fwfm module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.fwfm&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| GESD      | Generalized Extreme Studentized Deviate   | [#gesd1]_          | `pythresh.thresholds.gesd module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.gesd&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| HIST      | Histogram Based                           | [#hist1]_          | `pythresh.thresholds.hist module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.hist&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| IQR       | Inter-Quartile Region                     | [#iqr1]_           | `pythresh.thresholds.iqr module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.iqr&gt;`_                  |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| KARCH     | Karcher mean (Riemannian Center of Mass)  | [#karch1]_         | `pythresh.thresholds.karch module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.karch&gt;`_              |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| MAD       | Median Absolute Deviation                 | [#mad1]_           | `pythresh.thresholds.mad module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.mad&gt;`_                  |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| MCST      | Monte Carlo Shapiro Tests                 | [#mcst1]_          | `pythresh.thresholds.mcst module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.mcst&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| META      | Meta-model Trained Classifier             | [#meta1]_          | `pythresh.thresholds.meta module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.meta&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| MOLL      | Friedrichs' Mollifier                     | [#moll1]_          | `pythresh.thresholds.moll module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.moll&gt;`_                ||           |                                           | [#moll2]_          |                                                                                                                                                        |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| MTT       | Modified Thompson Tau Test                | [#mtt1]_           | `pythresh.thresholds.mtt module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.mtt&gt;`_                  |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| OCSVM     | One-Class Support Vector Machine          | [#ocsvm]_          | `pythresh.thresholds.ocsvm module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#pythresh-thresholds-ocsvm-module&gt;`_              |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| QMCD      | Quasi-Monte Carlo Discrepancy             | [#qmcd1]_          | `pythresh.thresholds.qmcd module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.qmcd&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| REGR      | Regression Based                          | [#regr1]_          | `pythresh.thresholds.regr module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.regr&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| VAE       | Variational Autoencoder                   | [#vae1]_           | `pythresh.thresholds.vae module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.vae&gt;`_                  |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| WIND      | Topological Winding Number                | [#wind1]_          | `pythresh.thresholds.wind module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.wind&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| YJ        | Yeo-Johnson Transformation                | [#yj1]_            | `pythresh.thresholds.yj module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.yj&gt;`_                    |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| ZSCORE    | Z-score                                   | [#zscore1]_        | `pythresh.thresholds.zscore module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.zscore&gt;`_            |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+| COMB      | Thresholder Combination                   | None               | `pythresh.thresholds.comb module &lt;https://pythresh.readthedocs.io/en/latest/pythresh.thresholds.html#module-pythresh.thresholds.comb&gt;`_                |+-----------+-------------------------------------------+--------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+****************************** Implementations &amp; Benchmarks********************************The comparison among implemented models and general implementation**is made available belowAdditional `benchmarking&lt;https://pythresh.readthedocs.io/en/latest/benchmark.html&gt;`_ has beendone on all the thresholders and it was found that the ``META``thresholder performed best while the ``CLF`` thresholder provided thesmallest uncertainty about its mean and is the most robust (best leastaccurate prediction). However, for interpretability and generalperformance the ``FILTER`` thresholder is a good fit.----For Jupyter Notebooks, please navigate to `notebooks&lt;https://github.com/KulikDM/pythresh/tree/main/notebooks&gt;`_.A quick look at all the thresholders performance can be found at**&quot;/notebooks/Compare All Models.ipynb&quot;**.. image:: https://raw.githubusercontent.com/KulikDM/pythresh/main/imgs/All.png   :target: https://raw.githubusercontent.com/KulikDM/pythresh/main/imgs/All.png   :alt: Comparision_of_All----************** Contributing**************Anyone is welcome to contribute to PyThresh:-  Please share your ideas and ask questions by opening an issue.-  To contribute, first check the Issue list for the &quot;help wanted&quot; tag   and comment on the one that you are interested in. The issue will   then be assigned to you.-  If the bug, feature, or documentation change is novel (not in the   Issue list), you can either log a new issue or create a pull request   for the new changes.-  To start, fork the main branch and add your   improvement/modification/fix.-  To make sure the code has the same style and standard, please refer   to qmcd.py for example.-  Create a pull request to the **main branch** and follow the pull   request template `PR template   &lt;https://github.com/KulikDM/pythresh/blob/main/.github/PULL_REQUEST_TEMPLATE.md&gt;`_-  Please make sure that all code changes are accompanied with proper   new/updated test functions. Automatic tests will be triggered. Before   the pull request can be merged, make sure that all the tests pass.----************ References**************Please Note** not all references' exact methods have been employed inPyThresh. Rather, the references serve to demonstrate the validity ofthe threshold types available in PyThresh... [#aucp1]   `A Robust AUC Maximization Framework With Simultaneous Outlier Detection   and Feature Selection for Positive-Unlabeled Classification   &lt;https://arxiv.org/abs/1803.06604&gt;`_.. [#boot1]   `An evaluation of bootstrap methods for outlier detection in least   squares regression   &lt;https://www.researchgate.net/publication/24083638_An_evaluation_of_bootstrap_methods_for_outlier_detection_in_least_squares_regression&gt;`_.. [#chau1]   `Chauvenet’s Test in the Classical Theory of Errors   &lt;https://epubs.siam.org/doi/10.1137/1119078&gt;`_.. [#clf1]   `Linear Models for Outlier Detection   &lt;https://link.springer.com/chapter/10.1007/978-3-319-47578-3_3&gt;`_.. [#clust1]   `Cluster Analysis for Outlier Detection   &lt;https://www.researchgate.net/publication/224990195_Cluster_Analysis_for_Outlier_Detection&gt;`_.. [#cpd1]   `Changepoint Detection in the Presence of Outliers   &lt;https://arxiv.org/abs/1609.07363&gt;`_.. [#decomp1]   `Influence functions and outlier detection under the common principal   components model: A robust approach   &lt;https://www.researchgate.net/publication/5207186_Influence_functions_and_outlier_detection_under_the_common_principal_components_model_A_robust_approach&gt;`_.. [#dsn1]   `Fast and Exact Outlier Detection in Metric Spaces: A Proximity   Graph-based Approach &lt;https://arxiv.org/abs/2110.08959&gt;`_.. [#eb1]   `Elliptical Insights: Understanding Statistical Methods through   Elliptical Geometry &lt;https://arxiv.org/abs/1302.4881&gt;`_.. [#fgd1]   `Iterative gradient descent for outlier detection   &lt;https://www.worldscientific.com/doi/10.1142/S0219691321500041&gt;`_.. [#filter1]   `Filtering Approaches for Dealing with Noise in Anomaly Detection   &lt;https://ieeexplore.ieee.org/document/9029258/&gt;`_.. [#fwfm1]   `Sparse Auto-Regressive: Robust Estimation of AR Parameters   &lt;https://arxiv.org/abs/1306.3317&gt;`_.. [#gesd1]   `An adjusted Grubbs' and generalized extreme studentized deviation   &lt;https://www.degruyter.com/document/doi/10.1515/dema-2021-0041/html?lang=en&gt;`_.. [#hist1]   `Effective Histogram Thresholding Techniques for Natural Images Using   Segmentation   &lt;http://www.joig.net/uploadfile/2015/0116/20150116042320548.pdf&gt;`_.. [#iqr1]   `A new non-parametric detector of univariate outliers for distributions   with unbounded support &lt;https://arxiv.org/abs/1509.02473&gt;`_.. [#karch1]   `Riemannian center of mass and mollifier smoothing   &lt;https://www.jstor.org/stable/41059320&gt;`_.. [#mad1]   `Periodicity Detection of Outlier Sequences Using Constraint Based   Pattern Tree with MAD &lt;https://arxiv.org/abs/1507.01685&gt;`_.. [#mcst1]   `Testing normality in the presence of outliers   &lt;https://www.researchgate.net/publication/24065017_Testing_normality_in_the_presence_of_outliers&gt;`_.. [#meta1]   `Automating Outlier Detection via Meta-Learning   &lt;https://arxiv.org/abs/2009.10606&gt;`_.. [#moll1]   `Riemannian center of mass and mollifier smoothing   &lt;https://www.jstor.org/stable/41059320&gt;`_.. [#moll2]   `Using the mollifier method to characterize datasets and models: The   case of the Universal Soil Loss Equation   &lt;https://www.researchgate.net/publication/286670128_Using_the_mollifier_method_to_characterize_datasets_and_models_The_case_of_the_Universal_Soil_Loss_Equation&gt;`_.. [#mtt1]   `Towards a More Reliable Interpretation of Machine Learning Outputs for   Safety-Critical Systems using Feature Importance Fusion   &lt;https://arxiv.org/abs/2009.05501&gt;`_.. [#ocsvm]   `Rule extraction in unsupervised anomaly detection for model   explainability: Application to OneClass SVM   &lt;https://arxiv.org/abs/1911.09315&gt;`_.. [#qmcd1]   `Deterministic and quasi-random sampling of optimized Gaussian mixture   distributions for vibronic Monte Carlo   &lt;https://arxiv.org/abs/1912.11594&gt;`_.. [#regr1]   `Linear Models for Outlier Detection   &lt;https://link.springer.com/chapter/10.1007/978-3-319-47578-3_3&gt;`_.. [#vae1]   `Likelihood Regret: An Out-of-Distribution Detection Score For   Variational Auto-encoder &lt;https://arxiv.org/abs/2003.02977&gt;`_.. [#wind1]   `Robust Inside-Outside Segmentation Using Generalized Winding Numbers   &lt;https://www.researchgate.net/publication/262165781_Robust_Inside-Outside_Segmentation_Using_Generalized_Winding_Numbers&gt;`_.. [#yj1]   `Transforming variables to central normality   &lt;https://arxiv.org/abs/2005.07946&gt;`_.. [#zscore1]   `Multiple outlier detection tests for parametric models   &lt;https://arxiv.org/abs/1910.10426&gt;`_</longdescription>
</pkgmetadata>