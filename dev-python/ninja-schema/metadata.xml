<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Test](https://github.com/eadwinCode/ninja-schema/workflows/Test/badge.svg)[![PyPI version](https://badge.fury.io/py/ninja-schema.svg)](https://badge.fury.io/py/ninja-schema)[![PyPI version](https://img.shields.io/pypi/pyversions/ninja-schema.svg)](https://pypi.python.org/pypi/ninja-schema)[![PyPI version](https://img.shields.io/pypi/djversions/ninja-schema.svg)](https://pypi.python.org/pypi/ninja-schema)[![Codecov](https://img.shields.io/codecov/c/gh/eadwinCode/ninja-schema)](https://codecov.io/gh/eadwinCode/ninja-schema)[![Downloads](https://static.pepy.tech/badge/ninja-schema)](https://pepy.tech/project/ninja-schema)# Ninja SchemaNinja Schema converts your Django ORM models to Pydantic schemas with more Pydantic features supported.**Inspired by**: [django-ninja](https://django-ninja.rest-framework.com/) and [djantic](https://jordaneremieff.github.io/djantic/)### NoticeStarting version `0.13.4`, Ninja schema will support both v1 and v2 of pydantic library and will closely monitor V1 support on pydantic package.### RequirementsPython &gt;= 3.8django &gt;= 3pydantic &gt;= 1.6**Key features:**- **Custom Field Support**: Ninja Schema converts django model to native pydantic types which gives you quick field validation out of the box. eg Enums, email, IPAddress, URLs, JSON, etc- **Field Validator**: Fields can be validated with **model_validator** just like pydantic **[validator](https://pydantic-docs.helpmanual.io/usage/validators/)** or **[root_validator](https://pydantic-docs.helpmanual.io/usage/validators/)**.   ## Installation```pip install ninja-schema```## ExampleCheckout this sample project: https://github.com/eadwinCode/bookstoreapi## Configuration Properties- **model**: Django Model- **include**: Fields to include, `default: '__all__'`. Please note that when include = `__all__`, model's **PK** becomes optional- **exclude**: Fields to exclude, `default: set()`- **optional**: Fields to mark optional,` default: set()``optional = '__all__'` will make all schema fields optional - **depth**: defines depth to nested generated schema, `default: 0`## `model_validator(*args, **kwargs)`**model_validator** is a substitute for **pydantic [validator](https://pydantic-docs.helpmanual.io/usage/validators/)** used for pre and post fields validation.There functionalities are the same. More info [pydantic validators](https://pydantic-docs.helpmanual.io/usage/validators/)```Pythonfrom django.contrib.auth import get_user_modelfrom ninja_schema import ModelSchema, model_validatorUserModel = get_user_model()class CreateUserSchema(ModelSchema):    class Config:        model = UserModel        include = ['username', 'email', 'password']    @model_validator('username')    def validate_unique_username(cls, value_data: str) -&gt; str:        if UserModel.objects.filter(username__icontains=value_data).exists():            raise ValueError('Username exists')        return value_data```##  `from_orm(cls, obj: Any)`You can generate a schema instance from your django model instance```Pythonfrom typings import Optionalfrom django.contrib.auth import get_user_modelfrom ninja_schema import ModelSchema, model_validatorUserModel = get_user_model()new_user = UserModel.objects.create_user(    username='eadwin', email='eadwin@example.com',     password='password', first_name='Emeka', last_name='Okoro')class UserSchema(ModelSchema):    class Config:        model = UserModel        include = ['id','first_name', 'last_name', 'username', 'email']schema = UserSchema.from_orm(new_user)print(schema.json(indent=2){    &quot;id&quot;: 1,    &quot;first_name&quot;: &quot;Emeka&quot;,    &quot;last_name&quot;: &quot;Okoro&quot;,    &quot;email&quot;: &quot;eadwin@example.com&quot;,    &quot;username&quot;: &quot;eadwin&quot;,}```## `apply(self, model_instance, **kwargs)`You can transfer data from your ModelSchema to Django Model instance using the `apply` function.The `apply` function uses Pydantic model `.dict` function, `dict` function filtering that can be passed as `kwargs` to the `.apply` function.For more info, visit [Pydantic model export](https://pydantic-docs.helpmanual.io/usage/exporting_models/)```Pythonfrom typings import Optionalfrom django.contrib.auth import get_user_modelfrom ninja_schema import ModelSchema, model_validatorUserModel = get_user_model()new_user = UserModel.objects.create_user(username='eadwin', email='eadwin@example.com', password='password')class UpdateUserSchema(ModelSchema):    class Config:        model = UserModel        include = ['first_name', 'last_name', 'username']        optional = ['username']  # `username` is now optionalschema = UpdateUserSchema(first_name='Emeka', last_name='Okoro')schema.apply(new_user, exclude_none=True)assert new_user.first_name == 'Emeka' # Trueassert new_user.username == 'eadwin' # True```## Generated Schema Sample```Pythonfrom django.contrib.auth import get_user_modelfrom ninja_schema import ModelSchema, model_validatorUserModel = get_user_model()class UserSchema(ModelSchema):    class Config:        model = UserModel        include = '__all__'        depth = 2        print(UserSchema.schema()){    &quot;title&quot;: &quot;UserSchema&quot;,    &quot;type&quot;: &quot;object&quot;,    &quot;properties&quot;: {        &quot;id&quot;: {&quot;title&quot;: &quot;Id&quot;, &quot;extra&quot;: {}, &quot;type&quot;: &quot;integer&quot;},        &quot;password&quot;: {&quot;title&quot;: &quot;Password&quot;, &quot;maxLength&quot;: 128, &quot;type&quot;: &quot;string&quot;},        &quot;last_login&quot;: {&quot;title&quot;: &quot;Last Login&quot;,&quot;type&quot;: &quot;string&quot;, &quot;format&quot;: &quot;date-time&quot;},        &quot;is_superuser&quot;: {&quot;title&quot;: &quot;Superuser Status&quot;,            &quot;description&quot;: &quot;Designates that this user has all permissions without explicitly assigning them.&quot;,            &quot;default&quot;: false,            &quot;type&quot;: &quot;boolean&quot;        },        &quot;username&quot;: {            &quot;title&quot;: &quot;Username&quot;,            &quot;description&quot;: &quot;Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.&quot;,            &quot;maxLength&quot;: 150,            &quot;type&quot;: &quot;string&quot;        },        &quot;first_name&quot;: {            &quot;title&quot;: &quot;First Name&quot;,            &quot;maxLength&quot;: 150,            &quot;type&quot;: &quot;string&quot;        },        &quot;last_name&quot;: {            &quot;title&quot;: &quot;Last Name&quot;,            &quot;maxLength&quot;: 150,            &quot;type&quot;: &quot;string&quot;        },        &quot;email&quot;: {            &quot;title&quot;: &quot;Email Address&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;format&quot;: &quot;email&quot;        },        &quot;is_staff&quot;: {            &quot;title&quot;: &quot;Staff Status&quot;,            &quot;description&quot;: &quot;Designates whether the user can log into this admin site.&quot;,            &quot;default&quot;: false,            &quot;type&quot;: &quot;boolean&quot;        },        &quot;is_active&quot;: {            &quot;title&quot;: &quot;Active&quot;,            &quot;description&quot;: &quot;Designates whether this user should be treated as active. Unselect this instead of deleting accounts.&quot;,            &quot;default&quot;: true,            &quot;type&quot;: &quot;boolean&quot;        },        &quot;date_joined&quot;: {            &quot;title&quot;: &quot;Date Joined&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;format&quot;: &quot;date-time&quot;        },        &quot;groups&quot;: {            &quot;title&quot;: &quot;Groups&quot;,            &quot;description&quot;: &quot;The groups this user belongs to. A user will get all permissions granted to each of their groups.&quot;,            &quot;type&quot;: &quot;array&quot;,            &quot;items&quot;: {                &quot;$ref&quot;: &quot;#/definitions/Group&quot;            }        },        &quot;user_permissions&quot;: {            &quot;title&quot;: &quot;User Permissions&quot;,            &quot;description&quot;: &quot;Specific permissions for this user.&quot;,            &quot;type&quot;: &quot;array&quot;,            &quot;items&quot;: {                &quot;$ref&quot;: &quot;#/definitions/Permission&quot;            }        }    },    &quot;required&quot;: [        &quot;password&quot;,        &quot;username&quot;,        &quot;groups&quot;,        &quot;user_permissions&quot;    ],    &quot;definitions&quot;: {        &quot;Permission&quot;: {            &quot;title&quot;: &quot;Permission&quot;,            &quot;type&quot;: &quot;object&quot;,            &quot;properties&quot;: {                &quot;id&quot;: {                    &quot;title&quot;: &quot;Id&quot;,                    &quot;extra&quot;: {},                    &quot;type&quot;: &quot;integer&quot;                },                &quot;name&quot;: {                    &quot;title&quot;: &quot;Name&quot;,                    &quot;maxLength&quot;: 255,                    &quot;type&quot;: &quot;string&quot;                },                &quot;content_type_id&quot;: {                    &quot;title&quot;: &quot;Content Type&quot;,                    &quot;type&quot;: &quot;integer&quot;                },                &quot;codename&quot;: {                    &quot;title&quot;: &quot;Codename&quot;,                    &quot;maxLength&quot;: 100,                    &quot;type&quot;: &quot;string&quot;                }            },            &quot;required&quot;: [                &quot;name&quot;,                &quot;content_type_id&quot;,                &quot;codename&quot;            ]        },        &quot;Group&quot;: {            &quot;title&quot;: &quot;Group&quot;,            &quot;type&quot;: &quot;object&quot;,            &quot;properties&quot;: {                &quot;id&quot;: {                    &quot;title&quot;: &quot;Id&quot;,                    &quot;extra&quot;: {},                    &quot;type&quot;: &quot;integer&quot;                },                &quot;name&quot;: {                    &quot;title&quot;: &quot;Name&quot;,                    &quot;maxLength&quot;: 150,                    &quot;type&quot;: &quot;string&quot;                },                &quot;permissions&quot;: {                    &quot;title&quot;: &quot;Permissions&quot;,                    &quot;type&quot;: &quot;array&quot;,                    &quot;items&quot;: {                        &quot;$ref&quot;: &quot;#/definitions/Permission&quot;                    }                }            },            &quot;required&quot;: [                &quot;name&quot;,                &quot;permissions&quot;            ]        }    }}```</longdescription>
</pkgmetadata>