<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pynamodb-encoder![Build](https://github.com/lyang/pynamodb-encoder/actions/workflows/build.yml/badge.svg) ![CodeQL](https://github.com/lyang/pynamodb-encoder/actions/workflows/codeql-analysis.yml/badge.svg) [![codecov](https://codecov.io/gh/lyang/pynamodb-encoder/branch/main/graph/badge.svg?token=P51YVL86N8)](https://codecov.io/gh/lyang/pynamodb-encoder) [![Maintainability](https://api.codeclimate.com/v1/badges/1e5c3b615dedb2bffb0c/maintainability)](https://codeclimate.com/github/lyang/pynamodb-encoder/maintainability) [![PyPI version](https://badge.fury.io/py/pynamodb-encoder.svg)](https://badge.fury.io/py/pynamodb-encoder)[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/pynamodb-encoder.svg)](https://pypi.python.org/pypi/pynamodb-encoder/)## Introduction`pynamodb-encoder` provides helper classes that can convert [PynamoDB](https://github.com/pynamodb/PynamoDB) `Model` objects into `JSON` serializable `dict`. It can also decode such `dict` back into those `Model` objects. [Polymorphic](https://pynamodb.readthedocs.io/en/latest/polymorphism.html) models and attributes are also supported.## Examples```pythondef test_encode_complex_model(encoder: Encoder):    class Pet(DynamicMapAttribute):        cls = DiscriminatorAttribute()        name = UnicodeAttribute()    class Cat(Pet, discriminator=&quot;Cat&quot;):        pass    class Dog(Pet, discriminator=&quot;Dog&quot;):        pass    class Human(Model):        name = UnicodeAttribute()        pets = ListAttribute(of=Pet)    jon = Human(name=&quot;Jon&quot;, pets=[Cat(name=&quot;Garfield&quot;, age=43), Dog(name=&quot;Odie&quot;)])    assert encoder.encode(jon) == {        &quot;name&quot;: &quot;Jon&quot;,        &quot;pets&quot;: [{&quot;cls&quot;: &quot;Cat&quot;, &quot;name&quot;: &quot;Garfield&quot;, &quot;age&quot;: 43}, {&quot;cls&quot;: &quot;Dog&quot;, &quot;name&quot;: &quot;Odie&quot;}],    }def test_decode_complex_model(decoder: Decoder):    class Pet(DynamicMapAttribute):        cls = DiscriminatorAttribute()    class Cat(Pet, discriminator=&quot;Cat&quot;):        name = UnicodeAttribute()    class Dog(Pet, discriminator=&quot;Dog&quot;):        breed = UnicodeAttribute()    class Human(Model):        name = UnicodeAttribute()        age = NumberAttribute()        pets = ListAttribute(of=Pet)    jon = decoder.decode(        Human,        {            &quot;name&quot;: &quot;Jon&quot;,            &quot;age&quot;: 70,            &quot;pets&quot;: [{&quot;cls&quot;: &quot;Cat&quot;, &quot;name&quot;: &quot;Garfield&quot;}, {&quot;cls&quot;: &quot;Dog&quot;, &quot;breed&quot;: &quot;Terrier&quot;}],        },    )    assert jon.name == &quot;Jon&quot;    assert jon.age == 70    assert isinstance(jon.pets, list)    assert len(jon.pets) == 2    assert isinstance(jon.pets[0], Cat)    assert jon.pets[0].name == &quot;Garfield&quot;    assert isinstance(jon.pets[1], Dog)    assert jon.pets[1].breed == &quot;Terrier&quot;```More examples can be found in [encoder_test.py](tests/encoder_test.py) and [decoder_test.py](tests/decoder_test.py)</longdescription>
</pkgmetadata>