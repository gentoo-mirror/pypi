<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.clarifai.com/&quot;&gt;&lt;img alt=&quot;Clarifai&quot; title=&quot;Clarifai&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/b/bc/Clarifai_Logo_FC_Web.png&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 align=&quot;center&quot;&gt;Clarifai Python SDK&lt;/a&gt;&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://clarifaicommunity.slack.com/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/slack-chat-green.svg?logo=slack&amp;color=4ec528&quot; alt=&quot;Slack&quot;&gt;  &lt;/a&gt;&lt;/p&gt;This is the official Python client for interacting with our powerful [API](https://docs.clarifai.com). The Clarifai Python SDK offers a comprehensive set of tools to integrate Clarifai's AI platform to leverage computer vision capabiities like classification , detection ,segementation and natural language capabilities like classification , summarisation , generation , Q&amp;A ,etc into your applications. With just a few lines of code, you can leverage cutting-edge artificial intelligence to unlock valuable insights from visual and textual content.---**Website**: [https://www.clarifai.com](https://www.clarifai.com/)**Demo**: [https://clarifai.com/demo](https://clarifai.com/demo)**Sign up for a free Account**: [https://clarifai.com/signup](https://clarifai.com/signup)**Developer Guide**: [https://docs.clarifai.com](https://docs.clarifai.com/)**Clarifai Community**: [https://clarifai.com/explore](https://clarifai.com/explore)**Python SDK Docs**: [https://docs.clarifai.com/python-sdk/api-reference](https://docs.clarifai.com/python-sdk/api-reference)---## InstallationInstall from PyPi:```bashpip install -U clarifai```Install from Source:```bashgit clone https://github.com/Clarifai/clarifai-python.gitcd clarifai-pythonpython3 -m venv envsource env/bin/activatepip3 install -r requirements.txt```## Getting startedClarifai uses **Personal Access Tokens(PATs)** to validate requests. You can create and manage PATs under your Clarifai account security settings.Export your PAT as an environment variable. Then, import and initialize the API Client.```cmdexport CLARIFAI_PAT={your personal access token}``````python# Note: CLARIFAI_PAT must be set as env variable.from clarifai.client.user import Userclient = User(user_id=&quot;user_id&quot;)# Get all appsapps = client.list_apps()```### Interacting with Datasets```python# Note: CLARIFAI_PAT must be set as env variable.# Create app and datasetapp = client.create_app(app_id=&quot;demo_app&quot;, base_workflow=&quot;Universal&quot;)dataset = app.create_dataset(dataset_id=&quot;demo_dataset&quot;)# execute data upload to Clarifai app datasetdataset.upload_dataset(task='visual_segmentation', split=&quot;train&quot;, dataset_loader='coco_segmentation')#upload text from csvdataset.upload_from_csv(csv_path='csv_path', input_type='text', csv_type='raw', labels=True)#upload data from folderdataset.upload_from_folder(folder_path='folder_path', input_type='text', labels=True)# Export Dataset Inputsfrom clarifai.client.dataset import Dataset# Note: clarifai-data-protobuf.zip is acquired through exporting datasets within the Clarifai Platform.Dataset().export(save_path='output.zip', local_archive_path='clarifai-data-protobuf.zip')```### Interacting with Inputs```python# Note: CLARIFAI_PAT must be set as env variable.from clarifai.client.user import Userapp = User(user_id=&quot;user_id&quot;).app(app_id=&quot;app_id&quot;)input_obj = app.inputs()#input upload from urlinput_obj.upload_from_url(input_id = 'demo', image_url='https://samples.clarifai.com/metro-north.jpg')#input upload from filenameinput_obj.upload_from_file(input_id = 'demo', video_file='demo.mp4')#listing inputsinput_obj.list_inputs()# text uploadinput_obj.upload_text(input_id = 'demo', raw_text = 'This is a test')```### Interacting with Models#### Model Predict```python# Note: CLARIFAI_PAT must be set as env variable.from clarifai.client.model import Model# Model Predictmodel_prediction = Model(&quot;https://clarifai.com/anthropic/completion/models/claude-v2&quot;).predict_by_bytes(b&quot;Write a tweet on future of AI&quot;, &quot;text&quot;)model = Model(user_id=&quot;user_id&quot;, app_id=&quot;app_id&quot;, model_id=&quot;model_id&quot;)model_prediction = model.predict_by_url(url=&quot;url&quot;, input_type=&quot;image&quot;) # Supports image, text, audio, video# Customizing Model Inference Outputmodel = Model(user_id=&quot;user_id&quot;, app_id=&quot;app_id&quot;, model_id=&quot;model_id&quot;,                  output_config={&quot;min_value&quot;: 0.98}) # Return predictions having prediction confidence &gt; 0.98model_prediction = model.predict_by_filepath(filepath=&quot;local_filepath&quot;, input_type=&quot;text&quot;) # Supports image, text, audio, videomodel = Model(user_id=&quot;user_id&quot;, app_id=&quot;app_id&quot;, model_id=&quot;model_id&quot;,                    output_config={&quot;sample_ms&quot;: 2000}) # Return predictions for specified intervalmodel_prediction = model.predict_by_url(url=&quot;VIDEO_URL&quot;, input_type=&quot;video&quot;)```#### Models Listing```python# Note: CLARIFAI_PAT must be set as env variable.# List all model versionsall_model_versions = model.list_versions()# Go to specific model versionmodel_v1 = client.app(&quot;app_id&quot;).model(model_id=&quot;model_id&quot;, model_version_id=&quot;model_version_id&quot;)# List all models in an appall_models = app.list_models()# List all models in community filtered by model_type, descriptionall_llm_community_models = App().list_models(filter_by={&quot;query&quot;: &quot;LLM&quot;,                                                        &quot;model_type_id&quot;: &quot;text-to-text&quot;}, only_in_app=False)```### Interacting with Workflows#### Workflow Predict```python# Note: CLARIFAI_PAT must be set as env variable.from clarifai.client.workflow import Workflow# Workflow Predictworkflow = Workflow(&quot;workflow_url&quot;) # Example: https://clarifai.com/clarifai/main/workflows/Face-Sentimentworkflow_prediction = workflow.predict_by_url(url=&quot;url&quot;, input_type=&quot;image&quot;) # Supports image, text, audio, video# Customizing Workflow Inference Outputworkflow = Workflow(user_id=&quot;user_id&quot;, app_id=&quot;app_id&quot;, workflow_id=&quot;workflow_id&quot;,                  output_config={&quot;min_value&quot;: 0.98}) # Return predictions having prediction confidence &gt; 0.98workflow_prediction = workflow.predict_by_filepath(filepath=&quot;local_filepath&quot;, input_type=&quot;text&quot;) # Supports image, text, audio, video```#### Workflows Listing```python# Note: CLARIFAI_PAT must be set as env variable.# List all workflow versionsall_workflow_versions = workflow.list_versions()# Go to specific workflow versionworkflow_v1 = Workflow(workflow_id=&quot;workflow_id&quot;, workflow_version=dict(id=&quot;workflow_version_id&quot;), app_id=&quot;app_id&quot;, user_id=&quot;user_id&quot;)# List all workflow in an appall_workflow = app.list_workflow()# List all workflow in community filtered by descriptionall_face_community_workflows = App().list_workflows(filter_by={&quot;query&quot;: &quot;face&quot;}, only_in_app=False) # Get all face related workflows```#### Workflow CreateCreate a new workflow specified by a yaml config file.```python# Note: CLARIFAI_PAT must be set as env variable.from clarifai.client.app import Appapp = App(app_id=&quot;app_id&quot;, user_id=&quot;user_id&quot;)workflow = app.create_workflow(config_filepath=&quot;config.yml&quot;)```#### Workflow ExportExport an existing workflow from Clarifai as a local yaml file.```python# Note: CLARIFAI_PAT must be set as env variable.from clarifai.client.workflow import Workflowworkflow = Workflow(&quot;https://clarifai.com/clarifai/main/workflows/Demographics&quot;)workflow.export('demographics_workflow.yml')```## More ExamplesSee many more code examples in this [repo](https://github.com/Clarifai/examples).Also see the official [Python SDK docs](https://clarifai-python.readthedocs.io/en/latest/index.html)</longdescription>
</pkgmetadata>