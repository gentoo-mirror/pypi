<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>onesignal_sdk=============.. image:: https://img.shields.io/pypi/pyversions/onesignal-sdk.svg    :target: https://pypi.org/project/onesignal-sdk/.. image:: https://img.shields.io/pypi/v/onesignal-sdk.svg    :target: https://pypi.org/project/onesignal-sdk/.. image:: https://travis-ci.com/zeyneloz/onesignal_sdk.svg?branch=master    :target: https://travis-ci.com/zeyneloz/onesignal_sdk.. image:: https://codecov.io/gh/zeyneloz/onesignal_sdk/branch/master/graph/badge.svg    :target: https://codecov.io/gh/zeyneloz/onesignal_sdkA Python client library for `OneSignal &lt;https://onesignal.com/&gt;`__ REST API. Supports **async/await**.Please read `v1.x documentation &lt;https://github.com/zeyneloz/onesignal_sdk/tree/v1.x&gt;`__ for older versions.Table of Contents------------------  `Installation &lt;#installation&gt;`__-  `Example Usage &lt;#example-usage&gt;`__-  `Async Example Usage &lt;#async-example-usage&gt;`__-  `Handling Exceptions &lt;#handling-exceptions&gt;`__-  `API methods &lt;#api-methods&gt;`__    -   `.send_notification &lt;#send-notification&gt;`__    -   `.cancel_notification &lt;#cancel-notification&gt;`__    -   `.view_notification &lt;#view-notification&gt;`__    -   `.view_notifications &lt;#view-notifications&gt;`__    -   `.notification_history &lt;#notification-history&gt;`__    -   `.view_device &lt;#view-device&gt;`__    -   `.view_devices &lt;#view-devices&gt;`__    -   `.add_device &lt;#add-device&gt;`__    -   `.edit_device &lt;#edit-device&gt;`__    -   `.edit_tags &lt;#edit-tags&gt;`__    -   `.new_session &lt;#new-session&gt;`__    -   `.new_purchase &lt;#new-purchase&gt;`__    -   `.csv_export &lt;#csv-export&gt;`__    -   `.create_segment &lt;#create-segment&gt;`__    -   `.delete_segment &lt;#delete-segment&gt;`__    -   `.view_outcomes &lt;#view-outcomes&gt;`__    -   `.view_apps &lt;#view-apps&gt;`__    -   `.view_app &lt;#view-app&gt;`__    -   `.create_app &lt;#create-app&gt;`__    -   `.update_app &lt;#update-app&gt;`__-  `License &lt;#license&gt;`__Installation------------::    pip install onesignal-sdkExample Usage-------------You can think this library as a wrapper around OneSignal REST API. It is fairly simple to use:- Create an instance of **Client** with your credentials. `user_auth_key` is not required but necessary for some API calls.- Build your request body and call related method on the client.- Client will make the request with required authentication headers and parse the response for you... code:: python    from onesignal_sdk.client import Client    client = Client(app_id=APP_ID, rest_api_key=REST_API_KEY, user_auth_key=USER_AUTH_KEY)    notification_body = {        'contents': {'tr': 'Yeni bildirim', 'en': 'New notification'},        'included_segments': ['Active Users'],        'filters': [{'field': 'tag', 'key': 'level', 'relation': '&gt;', 'value': 10}],    }    response = client.send_notification(notification_body)    print(response.body)Async Example Usage-------------------**AsyncClient** and **Client** shares exactly the same interface, method signatures. All the examples for **Client**  in thisdocumentation is also valid for **AsyncClient**... code:: python    from onesignal_sdk.client import AsyncClient    async def main():        client = AsyncClient(app_id=APP_ID, rest_api_key=REST_API_KEY)        notification_body = {'contents': ...}        response = await client.send_notification(notification_body)        print(response.body)Handling Response-----------------We are using `httpx &lt;https://github.com/encode/httpx&gt;`_ library for making http requests underneath. Responses from OneSignalREST API are parsed as JSON and returned to you as an instance of `OneSignalResponse`, which is just a simple classconsisting of following attributes:- **.body**: JSON parsed body of the response, as a Python dictionary.- **.status_code**: HTTP status code of the response.- **.http_response**: Original `httpx.Response` object, in case you want to access more attributes.Sample code:.. code:: python    client = AsyncClient(...)    response = await client.view_apps()    print(response.body) # JSON parsed response    print(response.status_code) # Status code of response    print(response.http_response) # Original http response object.Handling Exceptions-------------------An instance of **OneSignalHTTPError** is raised whenever http responses have a status code other than 2xx.For instance, if status code of an http response is 404, `OneSignalHTTPError` is raised with additional details. Seethe sample snippet below, error handling is the same of `AsyncClient`.. code:: python    from onesignal_sdk.client import Client    from onesignal_sdk.error import OneSignalHTTPError    # Create a One Signal client using API KEYS.    client = Client(app_id=APP_ID, rest_api_key=REST_API_KEY, user_auth_key=USER_AUTH_KEY)    notification_body = {        'contents': {'tr': 'Yeni bildirim', 'en': 'New notification'},        'included_segments': ['Active Users'],        'filters': [{'field': 'tag', 'key': 'level', 'relation': '&gt;', 'value': 10}],    }    response = client.send_notification(notification_body)    print(response.body)    try:        notification_body = {            'contents': {'en': 'New notification'},            'included_segments': ['Active Users'],        }        # Make a request to OneSignal and parse response        response = client.send_notification(notification_body)        print(response.body) # JSON parsed response        print(response.status_code) # Status code of response        print(response.http_response) # Original http response object.    except OneSignalHTTPError as e: # An exception is raised if response.status_code != 2xx        print(e)        print(e.status_code)        print(e.http_response.json()) # You can see the details of error by parsing original responseAPI methods===========send_notification-----------------Reference: https://documentation.onesignal.com/reference/create-notification.. code:: python    notification_body = {        'contents': {'en': 'New notification'},        'included_segments': ['Active Users'],    }    response = client.send_notification(notification_body)cancel_notification-------------------Reference: https://documentation.onesignal.com/reference/cancel-notification.. code:: python    response = client.cancel_notification('notification-id')view_notification-----------------Reference: https://documentation.onesignal.com/reference/view-notification.. code:: python    response = client.view_notification('notification-id')view_notifications------------------Reference: https://documentation.onesignal.com/reference/view-notifications.. code:: python    request_query = {'limit': 5, 'offset': 2}    response = client.view_notification(request_query)notification_history--------------------Reference: https://documentation.onesignal.com/reference/notification-history.. code:: python    body = {        'events': 'clicked',        'email': 'test@email.com'    }    response = client.notification_history('notification-id', body)view_device-----------Reference: https://documentation.onesignal.com/reference/view-device.. code:: python    response = client.view_device('device-id')view_devices------------Reference: https://documentation.onesignal.com/reference/view-devices.. code:: python    request_query = {'limit': 1}    response = client.view_devices(request_query)    // or no query    response = client.view_devices()add_device----------Reference: https://documentation.onesignal.com/reference/add-a-device.. code:: python    body = {        'device_type': 1,        'identifier': '7a8bbbb00000'    }    response = client.add_device(body)edit_device-----------Reference: https://documentation.onesignal.com/reference/edit-device.. code:: python    body = {        'device_type': 1,        'identifier': '7a8bbbb00000'    }    response = client.edit_device('2ada581e-1380-4967-bcd2-2bb4457d6171', body)edit_tags---------Reference: https://documentation.onesignal.com/reference/edit-tags-with-external-user-id.. code:: python    body = {        'tags': {            'foo': '',            'bar': 'new_value',        }    }    response = client.edit_tags('f0f0f0f0', body)new_session-----------Reference: https://documentation.onesignal.com/reference/new-session.. code:: python    body = {        'language': 'de',        'timezone': -28800    }    response = client.new_session('foo-device-id', body)new_purchase------------Reference: https://documentation.onesignal.com/reference/new-purchase.. code:: python    body = {        'purchases': [            {'sku': 'SKU123', 'iso': 'EUR'}        ]    }    response = client.new_purchase('foo-device-id', body)csv_export----------Reference: https://documentation.onesignal.com/reference/csv-export.. code:: python    body = {        'extra_fields': ['country', 'location'],        'last_active_since': '1469392779',    }    response = client.csv_export(body)create_segment--------------Reference: https://documentation.onesignal.com/reference/create-segments.. code:: python    body = {        'name': 'new-segment',        'filters': [{'field': 'session_count', 'relation': '&gt;', 'value': 1}],    }    response = client.create_segment(body)delete_segment--------------Reference: https://documentation.onesignal.com/reference/delete-segments.. code:: python    response = client.delete_segment('segment-id-1')view_outcomes-------------Reference: https://documentation.onesignal.com/reference/view-outcomes.. code:: python    extra_http_params = {        'outcome_platforms': 0    }    outcome_names = ['os__click.count']    response = client.view_outcomes(outcome_names, extra_http_params)view_apps---------Reference: https://documentation.onesignal.com/reference/view-apps-appsRequires `user_auth_key`!.. code:: python    response = client.view_apps()view_app--------Reference: https://documentation.onesignal.com/reference/view-an-appRequires `user_auth_key`!.. code:: python    response = client.view_app('034744e7-4eb-1c6a647e47b')create_app----------Reference: https://documentation.onesignal.com/reference/create-an-appRequires `user_auth_key`!.. code:: python     app_body = {        'name': 'new-android-app',        'apns_env': 'production',    }    response = client.create_app(app_body)update_app----------Reference: https://documentation.onesignal.com/reference/update-an-appRequires `user_auth_key`!.. code:: python     app_body = {        'name': 'new-app',    }    response = client.update_app('f33c318b-6c99', app_body)License-------This project is under the MIT license.</longdescription>
</pkgmetadata>