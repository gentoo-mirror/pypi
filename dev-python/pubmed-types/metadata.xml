<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pubmed-types (v0.2.0)&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/dm/pubmed-types?style=flat-square&quot; /&gt;    &lt;img src=&quot;https://img.shields.io/pypi/l/pubmed-types?style=flat-square&quot;/&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/pubmed-types?style=flat-square&quot;/&gt;    &lt;a href=&quot;https://github.com/tefra/xsdata-pydantic&quot;&gt;        &lt;img alt=&quot;Built with: xsdata-pydantic&quot; src=&quot;https://img.shields.io/badge/Built%20with-xsdata--pydantic-blue&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/dbrgn/coverage-badge&quot;&gt;        &lt;img src=&quot;./images/coverage.svg&quot;&gt;    &lt;/a&gt;&lt;/p&gt;## IntroductionA complete implementation of the XML schema for PMC Open Access articles and Pubmedarticle sets (citations).This package helps to parse PubMed XML data into Pydantic models. This validates theinput xml data and provides typehints for working with the complex XML structurespresent in PubMed data.## Most Recent Changes* **Breaking Change:** The `parse_pubmed_xml` is replaced by `pmc_article` and `pubmed_article_set`.* More test coverage* Pubmed Articles can now parse MathML* Restructured code to separate out `jats` (pmc open access articles) and `pubmed` (pubmed article set)* One unit test with 99% coverage* Added [CHANGELOG.md](CHANGELOG.md)## Why do I need this?PubMed keeps track of 10s of millions of research data, and a complex XML structure isused to store it. Parsing XML on its own is challenging enough. Add to it the featurerich data inside of each citation, and you will find yourself with hours or days ofnavigating the XML structure.The approach here was to autogenerate Pydantic classes to parse the XML using the`xsdata-pydantic` tool. This approach has the benefit of making sure every piece of datais parsed properly, and an error is thrown is something is missing or incorrect. Insteadof using dictionaries to hold the data, Pydantic classes have the benefit of providingtype hints with tab completion for IDEs, making it easier to navigate the complexstructure of the citation data.## How do I use it?It is possible to use `xsdata-pydantic` and the autogenerated classes directly to parsean XML file, but we provide a convenience function to easily open PubMed XMl citationsand PMC open access articles.### Example 1: A PMC Open Access Article```pythonimport tarfileimport urllib.request as requestfrom contextlib import closingfrom pathlib import Pathfrom pubmed_types import pmc_article# Input file source and output file destinationsource = (    &quot;ftp://ftp.ncbi.nlm.nih.gov&quot;    + &quot;/pub/pmc/oa_bulk/oa_comm/xml&quot;    + &quot;/oa_comm_xml.incr.2023-03-21.tar.gz&quot;)destination = Path(&quot;downloads&quot;)destination.mkdir(exist_ok=True)# 1. Get an open access article dataset from the FTP serverwith closing(request.urlopen(source)) as url:    with tarfile.open(fileobj=url, mode=&quot;r:gz&quot;) as fr:        fr.extractall(destination)# 2. Parse the filefile_path = destination.joinpath(&quot;PMC009xxxxxx&quot;).joinpath(&quot;PMC9970662.xml&quot;)full_text = pmc_article(file_path)# 3. Print out the article titleprint(f&quot;Title: {full_text.front.article_meta.title_group.article_title.content[0]}&quot;)```Output:```bashTitle: Lactate as a myokine and exerkine: drivers and signals of physiology and metabolism```### Example 2: A Pubmed baseline citation file```pythonimport gzipimport urllib.request as requestfrom contextlib import closingfrom pathlib import Pathfrom pubmed_types import pubmed_article_set# Input file source and output file destinationsource = &quot;ftp://ftp.ncbi.nlm.nih.gov&quot; + &quot;/pubmed/updatefiles&quot; + &quot;/pubmed23n1168.xml.gz&quot;destination = Path(&quot;downloads&quot;).joinpath(&quot;pubmed23n1168.xml&quot;)destination.parent.mkdir(exist_ok=True)# 1. Get a pubmed citation daily update file from the FTP serverwith closing(request.urlopen(source)) as url:    with gzip.GzipFile(fileobj=url, mode=&quot;rb&quot;) as fr:        with open(destination, mode=&quot;wb&quot;) as fw:            fw.write(fr.read())# 2. Parse the filearticle_set = pubmed_article_set(destination)# 3. Get the number of citations in the fileprint(f&quot;Number of citations: {len(article_set.pubmed_article)}&quot;)print(    f&quot;{article_set.pubmed_article[0].medline_citation.article.article_title.content[0]}&quot;)```Output:```bashNumber of citations: 2543A Patent and Pattern Mother.```## FAQ### Why does it take so long to parse a pubmed citation setThere is a lot of data, and the schema is deep and complex.### Why are the return structures so complicated?The return structures are a direct reflection of the XML format defined by the NLM. Inthe future some utility classes might be made for common components (title, authors,etc), but for now this is intended to be an unbiased way of parsing the XML.</longdescription>
</pkgmetadata>