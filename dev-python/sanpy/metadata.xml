<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sanpy---[![PyPI version](https://badge.fury.io/py/sanpy.svg)](https://badge.fury.io/py/sanpy)Python client for cryptocurrency data from [Santiment API](https://api.santiment.net/).This library provides utilities for accessing the GraphQL Santiment API endpointand convert the result to pandas dataframe.More documentation regarding the API and definitions of metrics can be found on [Santiment Academy]()# Table of contents- [sanpy](#sanpy)- [Table of contents](#table-of-contents)  - [Installation](#installation)  - [Upgrade to latest version](#upgrade-to-latest-version)  - [Install extra packages](#install-extra-packages)  - [Restricted metrics](#restricted-metrics)  - [Configuration](#configuration)    - [Read the API key from the environment](#read-the-api-key-from-the-environment)    - [Manually configure an API key](#manually-configure-an-api-key)    - [How to obtain an API key](#how-to-obtain-an-api-key)  - [Getting the data](#getting-the-data)    - [Using the provided functions](#using-the-provided-functions)    - [Execute an arbitrary GraphQL request](#execute-an-arbitrary-graphql-request)  - [Execute SQL queries and get the result](#execute-sql-queries-and-get-the-result)  - [Available metrics](#available-metrics)  - [Available Metrics for Slug](#available-metrics-for-slug)  - [Fetch timeseries metric](#fetch-timeseries-metric)  - [Fetching metadata for a metric](#fetching-metadata-for-a-metric)  - [Batching multiple queries](#batching-multiple-queries)  - [Rate Limit Tools](#rate-limit-tools)  - [Metric Complexity](#metric-complexity)  - [Include Incomplete Data Flag](#include-incomplete-data-flag)  - [Metric/Asset pair available cince](#metricasset-pair-available-cince)  - [Transform the result](#transform-the-result)  - [Available projects](#available-projects)  - [Non-standard metrics](#non-standard-metrics)    - [Other Price metrics](#other-price-metrics)      - [Marketcap, Price USD, Price BTC and Trading Volume](#marketcap-price-usd-price-btc-and-trading-volume)      - [Open, High, Close, Low Prices, Volume, Marketcap](#open-high-close-low-prices-volume-marketcap)    - [Mining Pools Distribution](#mining-pools-distribution)    - [Historical Balance](#historical-balance)    - [Ethereum Top Transactions](#ethereum-top-transactions)    - [Ethereum Spent Over Time](#ethereum-spent-over-time)    - [Token Top Transactions](#token-top-transactions)    - [Top Transfers](#top-transfers)    - [Emerging Trends](#emerging-trends)    - [Top Social Gainers Losers](#top-social-gainers-losers)  - [Extras](#extras)  - [Development](#development)  - [Running tests](#running-tests)  - [Running integration tests](#running-integration-tests)## InstallationTo install the latest [sanpy from PyPI](https://pypi.org/project/sanpy/):```bashpip install sanpy```## Upgrade to latest version```bashpip install --upgrade sanpy```## Install extra packagesThere are few scripts under [extras](/san/extras) directory related to backtesting and event studies. To install their dependencies use:```bashpip install sanpy[extras]```## Restricted metricsIn order to access real-time data or historical data for some of the metrics,you'll need to set the [API key](#configuration), generated from an account witha paid API plan.## ConfigurationYou can provide an API key which gives access to the restricted metrics in two different ways:### Read the API key from the environmentDuring loading of the `san` module, if the `SANPY_APIKEY` exists, its contentis read and set as the API key.```shellexport SANPY_APIKEY=&quot;my_apikey&quot;``````pythonimport san&gt;&gt;&gt; san.ApiConfig.api_key'my_apikey'```### Manually configure an API key```pythonimport sansan.ApiConfig.api_key = &quot;my_apikey&quot;```### How to obtain an API keyTo obtain an API key you should [log in to sanbase](https://app.santiment.net/login)and go to the `Account` page - [https://app.santiment.net/account](https://app.santiment.net/account).There is an `API Keys` section and a `Generate new api key` button.## Getting the data### Using the provided functionsThe library provides the `get` and `get_many` functions that are used to fetch data.`get` is used to fetch timeseries data for a single metric/asset pair.`get_many` is used to fetch timeseries data for a single metric, but many assets. This is counted as 1 API call.The first argument to the functions is the metric name.The rest of the parameters are::- `slug` - (for `get`) The project identificator, as seen in [the Available projects section](#available-projects)- `slugs` - (for `get_many`) A list of projects' identificators, as seen in [the Available projects section](#available-projects)- `selector` - Allow for more flexible selection of the target. Some metrics are  computed on blockchain addresses, for others you can provide a list of slugs,  labels, amount of top holders. etc.- `from_date` - A date or datetime in ISO8601 format specifying the start of the queried period. Defaults to `datetime.utcnow() - 365 days` - `to_date` - A date or datetime in ISO86091 format specifying the end of the queried period. Defaults to `datetime.utcnow()`- `interval` - The interval between the data points in the timeseries. Defaults to `'1d'`  It is represented in two different ways:  - a fixed range:  an integer followed by one of: `s`, `m`, `h`, `d` or `w`  - a function, providing some semantic or a dynamic range: `toStartOfMonth`, `toStartOfDay`, `toStartOfWeek`, `toMonday`..The returned result for time-series data is transformed into `pandas DataFrame` and is indexed by `datetime`.For `get`, the value column is named `value`.For `get_many`, there is one column per asset queried. The asset slugs are used for the column names.For backwards compatibility, fetching the metric by providing `&quot;metric/slug&quot;` asthe first instead of using a separate `'slug'`/`'selector'` continues to work,but it is not the recommended approach.For non-metric related data like getting the list of available assets, the datais fetched by providing a string in the format `query/argument` and additionalparameters.The examples below contain some of the described scenarios.Fetch metric by providing `metric` as first argument and `slug` as named parameter:```pythonimport sansan.get(  &quot;price_usd&quot;,  slug=&quot;bitcoin&quot;,  from_date=&quot;2022-01-01&quot;,  to_date=&quot;2022-01-05&quot;,  interval=&quot;1d&quot;)``````datetime                   value2022-01-01 00:00:00+00:00  47686.8115092022-01-02 00:00:00+00:00  47345.2205642022-01-03 00:00:00+00:00  46458.1169592022-01-04 00:00:00+00:00  45928.6610632022-01-05 00:00:00+00:00  43569.003348```Fetch prices for multiple assets:```pythonimport sansan.get_many(  &quot;price_usd&quot;,  slugs=[&quot;bitcoin&quot;, &quot;ethereum&quot;, &quot;tether&quot;],  from_date=&quot;2022-01-01&quot;,  to_date=&quot;2022-01-05&quot;,  interval=&quot;1d&quot;)``````datetime                   bitcoin       ethereum     tether                                            2022-01-01 00:00:00+00:00  47686.811509  3769.696916  1.0005002022-01-02 00:00:00+00:00  47345.220564  3829.565045  1.0004602022-01-03 00:00:00+00:00  46458.116959  3761.380274  1.0001652022-01-04 00:00:00+00:00  45928.661063  3795.890130  1.0002082022-01-05 00:00:00+00:00  43569.003348  3550.386882  1.000122```Fetch development activity of a specific Github organization:```pythonimport sansan.get(  &quot;dev_activity&quot;,  selector={&quot;organization&quot;: &quot;google&quot;},  from_date=&quot;2022-01-01&quot;,  to_date=&quot;2022-01-05&quot;,  interval=&quot;1d&quot;)``````datetime                    value     2022-01-01 00:00:00+00:00   176.02022-01-02 00:00:00+00:00   129.02022-01-03 00:00:00+00:00   562.02022-01-04 00:00:00+00:00  1381.02022-01-05 00:00:00+00:00  1334.0```Fetch a metric for a contract address, not a slug:```pythonimport sansan.get(  &quot;contract_transactions_count&quot;,  selector={&quot;contractAddress&quot;: &quot;0x00000000219ab540356cBB839Cbe05303d7705Fa&quot;},  from_date=&quot;2022-01-01&quot;,  to_date=&quot;2022-01-05&quot;,  interval=&quot;1d&quot;)``````datetime                   value     2022-01-01 00:00:00+00:00   90.02022-01-02 00:00:00+00:00  339.02022-01-03 00:00:00+00:00  486.02022-01-04 00:00:00+00:00  314.02022-01-05 00:00:00+00:00  328.0```Fetch top holders metric and specify the number of top holders to be counted:```pythonimport sansan.get(  &quot;amount_in_top_holders&quot;,  selector={&quot;slug&quot;: &quot;santiment&quot;, &quot;holdersCount&quot;: 10},  from_date=&quot;2022-01-01&quot;,  to_date=&quot;2022-01-05&quot;,  interval=&quot;1d&quot;)``````datetime                   value2022-01-01 00:00:00+00:00  7.391186e+072022-01-02 00:00:00+00:00  7.391438e+072022-01-03 00:00:00+00:00  7.391984e+072022-01-04 00:00:00+00:00  7.391984e+072022-01-05 00:00:00+00:00  7.391984e+07```Fetch trade volume of a given DEX for a given slug```pythonimport san# This requires Santiment API PRO apikey configuredsan.get(  &quot;total_trade_volume_by_dex&quot;,  selector={&quot;slug&quot;: &quot;ethereum&quot;, &quot;label&quot;: &quot;decentralized_exchange&quot;, &quot;owner&quot;: &quot;UniswapV2&quot;},  from_date=&quot;2022-01-01&quot;,  to_date=&quot;2022-01-05&quot;,  interval=&quot;1d&quot;)``````datetime                    value2022-01-01 00:00:00+00:00   96882.1768462022-01-02 00:00:00+00:00   85184.9702492022-01-03 00:00:00+00:00  107489.8461632022-01-04 00:00:00+00:00  105204.6775032022-01-05 00:00:00+00:00  174178.848916```Fetch metric by providing `metric/slug` as first argument and no `slug` as named parameter:```pythonimport sansan.get(    &quot;daily_active_addresses/bitcoin&quot;,    from_date=&quot;2018-06-01&quot;,    to_date=&quot;2018-06-05&quot;,    interval=&quot;1d&quot;)``````datetime                   value      2018-06-01 00:00:00+00:00  692508.02018-06-02 00:00:00+00:00  521887.02018-06-03 00:00:00+00:00  531464.02018-06-04 00:00:00+00:00  702902.02018-06-05 00:00:00+00:00  655695.0```Fetch non-timeseries data:```pythonimport sansan.get(&quot;projects/all&quot;)``````                name             slug ticker   totalSupply0             0chain           0chain    ZCN     4000000001                 0x               0x    ZRX    10000000002          0xBitcoin            0xbtc  0xBTC      20999984...```### Execute an arbitrary GraphQL requestSome of the available queries in the [Santiment API](https://api.santiment.net) do not have a dedicated sanpy function. Alternatively, if the returned format needs to be parsed differently, this approachcan be used, too. They can be fetched by providing the raw GraphQL query.Fetching data for many slugs at the same time. Note that this is also available as `san.get_many````pythonimport sanimport pandas as pdresult = san.graphql.execute_gql(&quot;&quot;&quot;{  getMetric(metric: &quot;price_usd&quot;) {    timeseriesDataPerSlug(      selector: {slugs: [&quot;ethereum&quot;, &quot;bitcoin&quot;]}      from: &quot;2022-05-05T00:00:00Z&quot;      to: &quot;2022-05-08T00:00:00Z&quot;      interval: &quot;1d&quot;) {        datetime        data{          value          slug        }    }  }}&quot;&quot;&quot;)data = result['getMetric']['timeseriesDataPerSlug']rows = []for datetime_point in data:    row = {'datetime': datetime_point['datetime']}    for slug_data in datetime_point['data']:        row[slug_data['slug']] = slug_data['value']    rows.append(row)df = pd.DataFrame(rows)df.set_index('datetime', inplace=True)``````datetime              bitcoin       ethereum                2022-05-05T00:00:00Z  36575.142133  2749.2130422022-05-06T00:00:00Z  36040.922350  2694.9796842022-05-07T00:00:00Z  35501.954144  2636.092958```Fetching a specific set of fields for a project:```pythonimport sanimport pandas as pdresult = san.graphql.execute_gql(&quot;&quot;&quot;{  projectBySlug(slug: &quot;santiment&quot;) {    slug    name    ticker    infrastructure    mainContractAddress    twitterLink  }}&quot;&quot;&quot;)pd.DataFrame(result[&quot;projectBySlug&quot;], index=[0])``````  infrastructure                         mainContractAddress       name       slug ticker                        twitterLink0            ETH  0x7c5a0ce9267ed19b22f8cae653f198e3e8daf098  Santiment  santiment    SAN  https://twitter.com/santimentfeed```## Execute SQL queries and get the resultOne of the Santiment products is [Santiment Queries](https://academy.santiment.net/santiment-queries/). It allows you to execute SQL queries on a database hosted by Santiment. Explore the documentation in order to get familiar with the available data and how to write SQL queries.In order to execute a query you need to provide your API key.Executing a query and getting the result as a pandas DataFrame:```pythonimport sansan.execute_sql(query=&quot;SELECT * FROM daily_metrics_v2 LIMIT 5&quot;)``````   metric_id  asset_id                    dt  value           computed_at0         10      1369  2015-07-17T00:00:00Z    0.0  2020-10-21T08:48:42Z1         10      1369  2015-07-18T00:00:00Z    0.0  2020-10-21T08:48:42Z2         10      1369  2015-07-19T00:00:00Z    0.0  2020-10-21T08:48:42Z3         10      1369  2015-07-20T00:00:00Z    0.0  2020-10-21T08:48:42Z4         10      1369  2015-07-21T00:00:00Z    0.0  2020-10-21T08:48:42Z```In order to change the index to one of the columns, provide the `set_index` parameter:```pythonimport sansan.execute_sql(query=&quot;SELECT * FROM daily_metrics_v2 LIMIT 5&quot;, set_index=&quot;dt&quot;)``````dt                    metric_id  asset_id  value           computed_at2015-07-17T00:00:00Z         10      1369    0.0  2020-10-21T08:48:42Z2015-07-18T00:00:00Z         10      1369    0.0  2020-10-21T08:48:42Z2015-07-19T00:00:00Z         10      1369    0.0  2020-10-21T08:48:42Z2015-07-20T00:00:00Z         10      1369    0.0  2020-10-21T08:48:42Z2015-07-21T00:00:00Z         10      1369    0.0  2020-10-21T08:48:42Z```The queries can be parametrized. In the query the parameters are named parameters,surrounded by two curly brackets `{{key}}`. The parameters is a dictionary. The querycan be a multiline string:```pythonsan.execute_sql(query=&quot;&quot;&quot;  SELECT    get_metric_name(metric_id) AS metric,    get_asset_name(asset_id) AS asset,    dt,    argMax(value, computed_at)  FROM daily_metrics_v2  WHERE    asset_id = get_asset_id({{slug}}) AND    metric_id = get_metric_id({{metric}}) AND    dt &gt;= now() - INTERVAL {{last_n_days}} DAY  GROUP BY dt, metric_id, asset_id  ORDER BY dt ASC&quot;&quot;&quot;,parameters={'slug': 'bitcoin', 'metric': 'daily_active_addresses', 'last_n_days': 7},set_index=&quot;dt&quot;)``````dt                                         metric   asset  value                     2023-03-22T00:00:00Z  daily_active_addresses  bitcoin                    941446.02023-03-23T00:00:00Z  daily_active_addresses  bitcoin                    913215.02023-03-24T00:00:00Z  daily_active_addresses  bitcoin                    884271.02023-03-25T00:00:00Z  daily_active_addresses  bitcoin                    906851.02023-03-26T00:00:00Z  daily_active_addresses  bitcoin                    835596.02023-03-27T00:00:00Z  daily_active_addresses  bitcoin                   1052637.02023-03-28T00:00:00Z  daily_active_addresses  bitcoin                    311566.0```## Available metricsGetting all of the metrics as a list is done using the following code:```pythonsan.available_metrics()```## Available Metrics for SlugGetting all of the metrics for a given slug is achieved with the following code:```pythonsan.available_metrics_for_slug(&quot;santiment&quot;)```## Fetch timeseries metric```pythonimport sansan.get(    &quot;daily_active_addresses&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2018-06-01&quot;,    to_date=&quot;2018-06-05&quot;,    interval=&quot;1d&quot;)```Using the defaults params (last 1 year of data with 1 day interval):```pythonsan.get(&quot;daily_active_addresses&quot;, slug=&quot;santiment&quot;)san.get(&quot;price_usd&quot;, slug=&quot;santiment&quot;)```## Fetching metadata for a metricFetching the metadata for an on-chain metric.```pythonsan.metadata(    &quot;nvt&quot;,    arr=[&quot;availableSlugs&quot;, &quot;defaultAggregation&quot;, &quot;humanReadableName&quot;, &quot;isAccessible&quot;, &quot;isRestricted&quot;, &quot;restrictedFrom&quot;, &quot;restrictedTo&quot;])```Example result:```python{&quot;availableSlugs&quot;: [&quot;0chain&quot;, &quot;0x&quot;, &quot;0xbtc&quot;, &quot;0xcert&quot;, &quot;1sg&quot;, ...],&quot;defaultAggregation&quot;: &quot;AVG&quot;, &quot;humanReadableName&quot;: &quot;NVT (Using Circulation)&quot;, &quot;isAccessible&quot;: True, &quot;isRestricted&quot;: True, &quot;restrictedFrom&quot;: &quot;2020-03-21T08:44:14Z&quot;, &quot;restrictedTo&quot;: &quot;2020-06-17T08:44:14Z&quot;}```- `availableSlugs` - A list of all slugs available for this metric.- `defaultAggregation` - If big interval are queried, all values that fall into  this interval will be aggregated with this aggregation.- `humanReadableName` - A name of the metric suitable for showing to users.- `isAccessible` - `True` if the metric is accessible. If API key is configured, c  hecks the API plan subscriptions. `False` if the metric is not accessible. For example  `circulation_1d` requires `PRO` plan subscription in order to be accessible at  all.- `isRestricted` - `True` if time restrictions apply to the metric and your  current plan (`Free` if no API key is configured). Check `restrictedFrom` and  `restrictedTo`.- `restrictedFrom` - The first datetime available of that metric for your current plan.- `restrictedTo` - The last datetime available of that metric and your current plan.## Batching multiple queriesMultiple queries can be executed in a batch to speed up the performance.There are two batch classes provided - `Batch` and `AsyncBatch`.&gt; Note: Batching improves the performance and the developer experience, but every&gt; query put inside the batch is still counted as one separate API call.&gt; To fetch a metric for multiple assets at a time take a look at `san.get_many`  - `AsyncBatch` is the recommended batch class. It executes all the queries in  separate HTTP requests. The benefit of using `AsyncBatch` over looping and  executing every API call is that the queries can be executed concurrently.   Putting multiple API calls in separate HTTP calls also allows to fetch more  data, otherwise you might run into [Complexity](https://academy.santiment.net/for-developers/#graphql-api-complexity) issues.   The concurrency is controlled by the `max_workers` optional parameter to the  `execute` function. By default the `max_workers` value is 10.  It also supports `get_many` function to fetch data for many assets.- `Batch` combines all the provided queries in a single GraphQL document and  executes them in a single HTTP request. This batching technique should be used  when lightweight queries that don't fetch a lot of data are used. The reason is  that the [complexity](https://academy.santiment.net/for-developers/#graphql-api-complexity) of each query  is accumulated and the batch can be rejected.  Note: If you have been using `Batch()` and want to switch to the newer `AsyncBatch()` you only need tochange the batch initialization. The functions for adding queries and executing the batch, as well as theformat of the response, are the same.```pythonfrom san import Batchbatch = Batch()batch.get(    &quot;daily_active_addresses&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2018-06-01&quot;,    to_date=&quot;2018-06-05&quot;,    interval=&quot;1d&quot;)batch.get(    &quot;transaction_volume&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2018-06-01&quot;,    to_date=&quot;2018-06-05&quot;,    interval=&quot;1d&quot;)[daa, trx_volume] = batch.execute()``````pythonfrom san import AsyncBatchbatch = AsyncBatch()batch.get(    &quot;daily_active_addresses&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2018-06-01&quot;,    to_date=&quot;2018-06-05&quot;,    interval=&quot;1d&quot;)batch.get_many(    &quot;daily_active_addresses&quot;,    slugs=[&quot;bitcoin&quot;, &quot;ethereum&quot;],    from_date=&quot;2018-06-01&quot;,    to_date=&quot;2018-06-05&quot;,    interval=&quot;1d&quot;)[daa, daa_many] = batch.execute(max_workers=10)```## Rate Limit ToolsThere are two functions, which can help you in handling the rate limits:* ``is_rate_limit_exception`` - Returns whether the exception caught is because of rate limitation* ``rate_limit_time_left`` - Returns the time left before the rate limit expires* ``api_calls_made`` - Returns the API calls for each day in which it was used* ``api_calls_remaining`` - Returns the API calls remaining for the month, hour and minuteExample:```pythonimport timeimport santry:  san.get(    &quot;price_usd&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;utc_now-30d&quot;,    to_date=&quot;utc_now&quot;,    interval=&quot;1d&quot;  )except Exception as e:  if san.is_rate_limit_exception(e):    rate_limit_seconds = san.rate_limit_time_left(e)    print(f&quot;Will sleep for {rate_limit_seconds}&quot;)    time.sleep(rate_limit_seconds)...calls_by_day = san.api_calls_made()calls_remaining = san.api_calls_remaining()```## Metric ComplexityFetch the complexity of a metric. The complexity depends on the from/to/intervalparameters, as well as the metric and the subscription plan. A request mighthave a maximum complexity of 50000. If a request has a higher complexity thereare a few ways to solve the issue:- Break down the request into multiple requests with smaller from-to ranges.- Upgrade to a higher subscription plan.More about the complexity can be found on [Santiment Academy]()```pythonsan.metric_complexity(    metric=&quot;price_usd&quot;,    from_date=&quot;2020-01-01&quot;,    to_date=&quot;2020-02-20&quot;,    interval=&quot;1d&quot;)```## Include Incomplete Data FlagDaily metrics have one value per day. For the current day, the latest computedvalue will not include a full day of data. For example, computing`daily_active_addresses` at 08:00 includes data for one third of the day. Toreduce confusion, the current day value for metrics that have this behaviour isexcluded. To force fetching the current day value, the `includeIncompleteData`flag must be used.```pythonsan.get(  &quot;daily_active_addresses/bitcoin&quot;,  from_date=&quot;utc_now-3d&quot;,  to_date=&quot;utc_now&quot;,  interval=&quot;1d&quot;,  include_incomplete_data=True)```## Metric/Asset pair available cinceFetch the first datetime for which a metric is available for a given slug.```pythonsan.available_metric_for_slug_since(metric=&quot;daily_active_addresses&quot;, slug=&quot;santiment&quot;)```## Transform the resultExample usage:```pythonsan.get(  &quot;price_usd&quot;,  slug=&quot;santiment&quot;,  from_date=&quot;2020-06-01&quot;,  to_date=&quot;2021-06-05&quot;,  interval=&quot;1d&quot;,  transform={&quot;type&quot;: &quot;moving_average&quot;, &quot;moving_average_base&quot;: 100},  aggregation=&quot;LAST&quot;)```Where the parameters, that are not mentioned, are optional:`transform` - Apply a transformation on the data. The supported transformations are:- &quot;moving_average&quot; - Replace every value V&lt;sub&gt;i&lt;/sub&gt; with the average of the last &quot;moving_average_base&quot; values.- &quot;consecutive_differences&quot; - Replace every value V&lt;sub&gt;i&lt;/sub&gt; with the value V&lt;sub&gt;i&lt;/sub&gt; - V&lt;sub&gt;i-1&lt;/sub&gt; where i is the position in the list. Automatically fetches some extra data needed in order to compute the first value.- &quot;percent_change&quot; - Replace every value V&lt;sub&gt;i&lt;/sub&gt; with the percent change of V&lt;sub&gt;i-1&lt;/sub&gt; and V&lt;sub&gt;i&lt;/sub&gt; ( (V&lt;sub&gt;i&lt;/sub&gt; / V&lt;sub&gt;i-1&lt;/sub&gt; - 1) * 100) where i is the position in the list. Automatically fetches some extra data needed in order to compute the first value.`aggregation` - the aggregation which is used for the query results.## Available projectsReturns a DataFrame with all the projects available in the Santiment API. Not allmetrics will be available for each of the projects.`slug` is the unique identifier of a project, used in the metrics fetching.```pythonsan.get(&quot;projects/all&quot;)```Example result:```                 name             slug ticker   totalSupply0              0chain           0chain    ZCN     4000000001                  0x               0x    ZRX    10000000002           0xBitcoin            0xbtc  0xBTC      209999843     0xcert Protocol           0xcert    ZXC     5000000004              1World           1world    1WO      372194535        AB-Chain RTB     ab-chain-rtb    RTB      278578136             Abulaba          abulaba    AAA     3970000007                 AC3              ac3    AC3    80235326.0...```## Non-standard metricsHere is a list of metrics that are not part of the returned list of metrics found above.This is due to having different response format and semantics.### Other Price metrics#### Marketcap, Price USD, Price BTC and Trading Volume```pythonsan.get(    &quot;prices&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2018-06-01&quot;,    to_date=&quot;2018-06-05&quot;,    interval=&quot;1d&quot;)```#### Open, High, Close, Low Prices, Volume, MarketcapNote: this query cannot be batched!```pythonsan.get(    &quot;ohlcv&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2018-06-01&quot;,    to_date=&quot;2018-06-05&quot;,    interval=&quot;1d&quot;)```Example result:```pythondatetime                        openPriceUsd  closePriceUsd  highPriceUsd  lowPriceUsd   volume  marketcap2018-06-01 00:00:00+00:00       1.24380        1.27668       1.26599       1.19099       852857  7.736268e+072018-06-02 00:00:00+00:00       1.26136        1.30779       1.27612       1.20958      1242520  7.864724e+072018-06-03 00:00:00+00:00       1.28270        1.28357       1.24625       1.21872      1032910  7.844339e+072018-06-04 00:00:00+00:00       1.23276        1.24910       1.18528       1.18010       617451  7.604326e+07```### Mining Pools DistributionReturns distribution of miners between mining pools. What part of the miners are using top3, top10 and all the other pools. Currently only ETH is supported.[Premium metric](#premium-metrics)```pythonsan.get(    &quot;mining_pools_distribution&quot;,    slug=&quot;ethereum&quot;,    from_date=&quot;2019-06-01&quot;,    to_date=&quot;2019-06-05&quot;,    interval=&quot;1d&quot;)```Example result:```datetime                      other     top10      top32019-06-01 00:00:00+00:00  0.129237  0.249906  0.6208572019-06-02 00:00:00+00:00  0.127432  0.251903  0.6206662019-06-03 00:00:00+00:00  0.122058  0.249603  0.6283392019-06-04 00:00:00+00:00  0.127726  0.254982  0.6172932019-06-05 00:00:00+00:00  0.120436  0.265842  0.613722```### Historical BalanceHistorical balance for erc20 token or eth address. Returns the historical balance for a given address in the given interval.```pythonsan.get(    &quot;historical_balance&quot;,    slug=&quot;santiment&quot;,    address=&quot;0x1f3df0b8390bb8e9e322972c5e75583e87608ec2&quot;,    from_date=&quot;2019-04-18&quot;,    to_date=&quot;2019-04-23&quot;,    interval=&quot;1d&quot;)```Example result:```datetime                     balance2019-04-18 00:00:00+00:00  382338.332019-04-19 00:00:00+00:00  382338.332019-04-20 00:00:00+00:00  382338.332019-04-21 00:00:00+00:00  215664.332019-04-22 00:00:00+00:00  215664.33```### Ethereum Top TransactionsTop ETH transactions for project's team wallets.Available transaction types:- ALL- IN- OUT```pythonsan.get(    &quot;eth_top_transactions&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2019-04-18&quot;,    to_date=&quot;2019-04-30&quot;,    limit=5,    transaction_type=&quot;ALL&quot;)```Example result:**The result is shortened for convenience**```datetime                           fromAddress  fromAddressInExchange           toAddress  toAddressInExchange              trxHash      trxValue2019-04-29 21:33:31+00:00  0xe76fe52a251c8f...                  False  0x45d6275d9496b...                False  0x776cd57382456a...        100.002019-04-29 21:21:18+00:00  0xe76fe52a251c8f...                  False  0x468bdccdc334f...                False  0x848414fb5c382f...         40.952019-04-19 14:14:52+00:00  0x1f3df0b8390bb8...                  False  0xd69bc0585e05e...                False  0x590512e1f1fbcf...         19.482019-04-19 14:09:58+00:00  0x1f3df0b8390bb8...                  False  0x723fb5c14eaff...                False  0x78e0720b9e72d1...         15.15```### Ethereum Spent Over TimeETH spent for each interval from the project's team wallet and time period```pythonsan.get(    &quot;eth_spent_over_time&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2019-04-18&quot;,    to_date=&quot;2019-04-23&quot;,    interval=&quot;1d&quot;)```Example result:```datetime                    ethSpent2019-04-18 00:00:00+00:00   0.0000002019-04-19 00:00:00+00:00  34.6302842019-04-20 00:00:00+00:00   0.0000002019-04-21 00:00:00+00:00   0.0001582019-04-22 00:00:00+00:00   0.000000```### Token Top TransactionsTop transactions for the token of a given project```pythonsan.get(    &quot;token_top_transactions&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;2019-04-18&quot;,    to_date=&quot;2019-04-30&quot;,    limit=5)```Example result:**The result is shortened for convenience**```datetime                           fromAddress  fromAddressInExchange           toAddress  toAddressInExchange              trxHash      trxValue2019-04-21 13:51:59+00:00  0x1f3df0b8390bb8...                  False  0x5eaae5e949952...                False  0xdbced935b09dd0...  166674.000002019-04-28 07:43:38+00:00  0x0a920bfdf7f977...                  False  0x868074aab18ea...                False  0x5f2214d34bcdc3...   33181.822792019-04-28 07:53:32+00:00  0x868074aab18ea3...                  False  0x876eabf441b2e...                 True  0x90bd286da38a2b...   33181.822792019-04-26 14:38:45+00:00  0x876eabf441b2ee...                   True  0x76af586d041d6...                False  0xe45b86f415e930...   28999.640232019-04-30 15:17:28+00:00  0x876eabf441b2ee...                   True  0x1f4a90043cf2d...                False  0xc85892b9ef8c64...   20544.42975```### Top TransfersTop transfers for the token of a given project, ``address`` and ``transaction_type`` arguments can be added as well, in the form of a key-value pair. The ``transaction_type`` parameter can have one of these three values: ``ALL``, ``OUT``, ``IN``.```pythonsan.get(    &quot;top_transfers&quot;,    slug=&quot;santiment&quot;,    from_date=&quot;utc_now-30d&quot;,    to_date=&quot;utc_now&quot;,)```**The result is shortened for convenience**Example result:```                          fromAddress   toAddress     trxHash       trxValuedatetime                                                                                                                                                                                                                          2021-06-17 00:16:26+00:00  0xa48df...  0x876ea...  0x62a56...  136114.0697332021-06-17 00:10:05+00:00  0xbd3c2...  0x876ea...  0x732a5...  117339.7798902021-06-19 21:36:03+00:00  0x59646...  0x0d45b...  0x5de31...  112336.882707...``````pythonsan.get(    &quot;top_transfers&quot;,    slug=&quot;santiment&quot;,    address=&quot;0x26e068650ae54b6c1b149e1b926634b07e137b9f&quot;,    transaction_type=&quot;ALL&quot;,    from_date=&quot;utc_now-30d&quot;,    to_date=&quot;utc_now&quot;,)```Example result:```                          fromAddress  toAddress    trxHash   trxValuedatetime                                                                                                                                                                                        2021-06-13 09:14:01+00:00  0x26e06...  0xfd3d...  0x4af6...  69854.5282021-06-13 09:13:01+00:00  0x876ea...  0x26e0...  0x18c1...  69854.5282021-06-14 08:54:52+00:00  0x876ea...  0x26e0...  0xdceb...  59920.591...```### Emerging TrendsEmerging trends for a given period of time. ```pythonsan.get(    &quot;emerging_trends&quot;,    from_date=&quot;2019-07-01&quot;,    to_date=&quot;2019-07-02&quot;,    interval=&quot;1d&quot;,    size=5)```Example result:```datetime                        score    word2019-07-01 00:00:00+00:00  375.160034    lnbc2019-07-01 00:00:00+00:00  355.323281    dent2019-07-01 00:00:00+00:00  268.653820    link2019-07-01 00:00:00+00:00  231.721809  shorts2019-07-01 00:00:00+00:00  206.812798     btt2019-07-02 00:00:00+00:00  209.343752  bounce2019-07-02 00:00:00+00:00  135.412811    vidt2019-07-02 00:00:00+00:00  116.842801     bat2019-07-02 00:00:00+00:00   98.517600  bottom2019-07-02 00:00:00+00:00   89.309975   haiku```### Top Social Gainers LosersTop social gainers/losers returns the social volume changes for crypto projects.```pythonsan.get(    &quot;top_social_gainers_losers&quot;,    from_date=&quot;2019-07-18&quot;,    to_date=&quot;2019-07-30&quot;,    size=5,    time_window=&quot;2d&quot;,    status=&quot;ALL&quot;)```Example result:**The result is shortened for convenience**```datetime                              slug     change    status2019-07-28 01:00:00+00:00     libra-credit  21.000000    GAINER2019-07-28 01:00:00+00:00             aeon  -1.000000     LOSER2019-07-28 01:00:00+00:00    thunder-token   5.000000  NEWCOMER2019-07-28 02:00:00+00:00     libra-credit  43.000000    GAINER...                                    ...        ...       ...2019-07-30 07:00:00+00:00            storj  12.000000  NEWCOMER2019-07-30 11:00:00+00:00            storj  21.000000    GAINER2019-07-30 11:00:00+00:00            aergo  -1.000000     LOSER2019-07-30 11:00:00+00:00            litex   8.000000  NEWCOMER```## ExtrasTake a look at the [examples](/examples/extras) folder.## DevelopmentIt is recommended to use [pipenv](https://github.com/pypa/pipenv) for managing your local environment.Setup project:```bashpipenv install```Install main dependencies:```bashpipenv run pip install -e .```Install extra dependencies:```bashpipenv run pip install -e '.[extras]'```## Running tests```bashpython setup.py test```## Running integration tests```bashpython setup.py nosetests -a integration```</longdescription>
</pkgmetadata>