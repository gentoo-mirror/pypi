<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Hestia Engine OrchestratorOrchestrate your different models to run on a Cycle, an ImpactAssessment or a Site.## DocumentationDocumentation can be found in the [source folder](./hestia_earth/orchestrator).## Install1. Install the library:```bashpip install hestia_earth.orchestrator```You can now install your own models or follow the steps below to use the default Hestia models.### Install the Hestia ModelsIf you want to use the [hestia default models](/hestia-earth/hestia-engine-models), follow these steps:1. Install the library:```bashpip install hestia_earth.models```2. Download the latest configuration files:```bashcurl https://gitlab.com/hestia-earth/hestia-engine-orchestrator/-/raw/master/scripts/download_config.sh?inline=false -o download_config.sh &amp;&amp; chmod +x download_config.sh# pip default install directory is /usr/local/lib/python&lt;version&gt;/site-packages./download_config.sh &lt;pip install directory&gt;```### Using your own modelsYou can create your own models in addition (or instead of) the default set of models provided by Hestia.The model needs to expose only one method:```pythondef run(key: str, data): ...```It will be given the data that has been given to the orchestrator, i.e. by calling:```pythonfrom hestia_earth.orchestrator import runmy_data = {'@type': 'Cycle', 'inputs': []}config = {  &quot;models&quot;: [{    &quot;key&quot;: &quot;inputs&quot;,    &quot;model&quot;: &quot;my_model&quot;,    &quot;value&quot;: &quot;my_model_value&quot;,    &quot;runStrategy&quot;: &quot;add_if_missing_key&quot;  }]}run(my_data, config)```Will be calling in your own model `my_model.py`:```pythondef run('my_model_value', my_data: dict): ...```### Usage```python# will work with either Cycle or Sitefrom hestia_earth.orchestrator import run# cycle is a JSONLD node cyclecycle = {'@type': 'Cycle', ...}result = run(cycle, '/path/to/my-config.json')  # configuration stored in a fileprint(result)```</longdescription>
</pkgmetadata>