<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bond-asyncAsynchronous Python wrapper library over Bond Local APIForked from https://github.com/prystupa/bond-apiThanks @prystupa for the great work!## InstallationFrom PyPi:```bashpip3 install bond-async```## Library Usage```python3import asynciofrom aiohttp import ClientResponseError, ClientConnectorErrorfrom bond_async import Bond, Actionasync def main():    &quot;&quot;&quot;Example of library usage.&quot;&quot;&quot;        bond = Bond(&quot;[your ip or hostname here]&quot;, &quot;[your bond API token here]&quot;)    try:        print(&quot;Version:&quot;)        print(await bond.version())        print(&quot;Device IDs:&quot;)        device_ids = await bond.devices()        print(device_ids)        print(&quot;Devices:&quot;)        devices = await asyncio.gather(*[bond.device(device_id) for device_id in device_ids])        print(devices)        print(&quot;Devices Properties:&quot;)        properties = await asyncio.gather(*[bond.device_properties(device_id) for device_id in device_ids])        print(properties)        print(&quot;Devices State:&quot;)        state = await asyncio.gather(*[bond.device_state(device_id) for device_id in device_ids])        print(state)        print(&quot;Turn on fan!&quot;)        await bond.action(&quot;[your fan device ID here]&quot;, Action.turn_on())        print(&quot;Change fan speed!&quot;)        await bond.action(&quot;[your fan device ID here]&quot;, Action.set_speed(2))        print(&quot;Turn off fan!&quot;)        await bond.action(&quot;[your fan device ID here]&quot;, Action.turn_off())            except ClientResponseError as x:        print(&quot;Client response error: &quot;, x)    except ClientConnectorError as x:        print(&quot;Client connector error: &quot;, x)if __name__ == '__main__':    loop = asyncio.get_event_loop()    loop.run_until_complete(main())```</longdescription>
</pkgmetadata>