<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Alconna Graia该项目为 [`Alconna`](https://github.com/ArcletProject/Alconna) 为 [`GraiaProject`](https://github.com/GraiaProject) 下项目的内建支持包括解析器、Dispatcher、SayaSchema 和 附加组件## 安装```shellpip install arclet-alconna-graia, arclet-alconna-ariadnepdm add arclet-alconna-graia, arclet-alconna-ariadne```或```shellpip install arclet-alconna-graia, arclet-alconna-avillapdm add arclet-alconna-graia, arclet-alconna-avilla```或```shellpip install arclet-alconna-graia, arclet-alconna-ichikapdm add arclet-alconna-graia, arclet-alconna-ichika```## 前提Alconna-Graia 现在依赖 `Launart` 的 `service` 功能你需要在你使用 Alconna-Graia 组件时加入如下代码：```pythonfrom launart import Launartfrom arclet.alconna.graia import AlconnaGraiaServicefrom arclet.alconna.xxx import AlconnaXXXAdapter...manager = Launart(...)manager.add_service(AlconnaGraiaService(AlconnaXXXAdapter))````adapater` 的使用可以直接导入：```pythonfrom launart import Launartfrom arclet.alconna.graia import AlconnaGraiaServiceimport arclet.alconna.xxx...manager = Launart(...)manager.add_service(AlconnaGraiaService())```或传入 endpoint, 其等价于直接导入:```pythonfrom launart import Launartfrom arclet.alconna.graia import AlconnaGraiaService...manager = Launart(...)manager.add_service(AlconnaGraiaService(&quot;xxx&quot;))```不指定 adapter 时 Alconna-Graia 默认使用基础 adapter## 快速使用### 单文件ariadne:```pythonfrom arclet.alconna import Argsfrom arclet.alconna.graia import Alconna, AlconnaDispatcher, Match, CommandResultfrom arclet.alconna.graia.service import AlconnaGraiaServiceimport arclet.alconna.ariadne...manager = Launart(...)manager.add_service(AlconnaGraiaService())app = Ariadne(...)alc = Alconna(&quot;!jrrp&quot;, Args[&quot;sth&quot;, str, 1123])@app.broadcast.receiver(    GroupMessage,    dispatchers=[AlconnaDispatcher(alc, send_flag='stay')])async def test2(    group: Group,    result: CommandResult[GroupMessage],    sth: Match[str]):    print(&quot;sign:&quot;, result.result)    print(&quot;sender:&quot;, group)    print(&quot;match&quot;, sth.available, sth.result)```avilla:```pythonfrom arclet.alconna import Argsfrom arclet.alconna.graia import Alconna, AlconnaDispatcher, Match, CommandResultfrom arclet.alconna.graia.service import AlconnaGraiaServiceimport arclet.alconna.avilla...broadcast = create(Broadcast)manager = Launart(...)manager.add_service(AlconnaGraiaService())avilla = Avilla(...)alc = Alconna(&quot;!jrrp&quot;, Args[&quot;sth&quot;, str, 1123])@broadcast.receiver(    MessageReceived,    dispatchers=[AlconnaDispatcher(alc, send_flag='stay')])async def test2(    context: Context,    result: CommandResult[MessageReceived],    sth: Match[str]):    print(&quot;sign:&quot;, result.result)    print(&quot;sender:&quot;, context.scene)    print(&quot;match&quot;, sth.available, sth.result)```### 使用 Sayain module.py:```pythonfrom arclet.alconna.graia import Alconna, AlconnaDispatcher, Match, CommandResult, AlconnaSchemafrom arclet.alconna import Args...channel = Channel.current()alc = Alconna(&quot;!jrrp&quot;, Args[&quot;sth&quot;, str, 1123])@channel.use(AlconnaSchema(AlconnaDispatcher(alc)))@channel.use(ListenerSchema([...]))async def test2(result: CommandResult[...], sth: Match[str]):    print(&quot;sign:&quot;, result.result)    print(&quot;match&quot;, sth.available, sth.result)```in main.py:```pythonfrom arclet.alconna.graia import AlconnaBehaviourfrom creart import create...saya = create(Saya)create(AlconnaBehaviour)with saya.module_context():    saya.require(&quot;module&quot;)```### 使用 Saya Utilin module.py:```pythonfrom graiax.shortcut.saya import listenfrom arclet.alconna.graia import alcommand, Alconna, Match, from_command, startswith, endswithfrom arclet.alconna import  Args, Arpamar...@alcommand(Alconna(&quot;!jrrp&quot;, Args[&quot;sth&quot;, str, 1123]), private=False)async def test1(result: Arpamar, sth: Match[str]):    print(&quot;sign:&quot;, result)    print(&quot;match&quot;, sth.available, sth.result)@alcommand(&quot;[!|.]hello &lt;name:str&gt;&quot;, send_error=True)async def test1(result: Arpamar, name: Match[str]):    print(&quot;sign:&quot;, result)    print(&quot;match&quot;, name.available, name.result)    @listen(...) @from_command(&quot;foo bar {baz}&quot;)async def test2(baz: int):    print(&quot;baz&quot;, baz)        @listen(...)@startswith(&quot;foo bar&quot;)async def test3(event: ...):    ...@listen(...)@endswith(int)async def test4(event: ...):    ...```in main.py:```pythonfrom creart import create...saya = create(Saya)with saya.module_context():    saya.require(&quot;module&quot;)```## AlconnaDispatcher 参数说明```pythonclass AlconnaDispatcher(BaseDispatcher, Generic[TOHandler]):    def __init__(        self,        command: Alconna | AlconnaGroup,        *,        send_flag: Literal[&quot;reply&quot;, &quot;post&quot;, &quot;stay&quot;] = &quot;stay&quot;,        skip_for_unmatch: bool = True,        comp_session: Optional[CompConfig] = None,        message_converter: Callable[[OutType, str], MessageChain | Coroutine[Any, Any, MessageChain]] | None = None,    ): ...````command`: 使用的 Alconna 指令`send_flag`: 解析期间输出信息的发送方式- reply: 直接发送给指令发送者- post: 以事件通过 Broadcast 广播- stay: 存入 CommandResult 传递给事件处理器`skip_for_unmatch`: 解析失败时是否跳过, 否则错误信息按 send_flag 处理`comp_session`: 补全会话配置, 不传入则不启用补全会话`message_converter`: send_flag 为 reply 时 输出信息的预处理器## 附加组件- `Match`: 查询某个参数是否匹配，如`foo: Match[int]`。使用时以 `Match.available` 判断是否匹配成功，以`Match.result` 获取匹配结果- `Query`: 查询某个参数路径是否存在，如`sth: Query[int] = Query(&quot;foo.bar&quot;)`；可以指定默认值如`Query(&quot;foo.bar&quot;, 1234)`。使用时以 `Query.available` 判断是否匹配成功，以 `Query.result` 获取匹配结果- `Header`: 表示命令头部为特殊形式时的头部匹配- `assign`: 依托路径是否匹配成功为命令分发处理器。```pythonfrom arclet.alconna.graia import assign, alcommandfrom arclet.alconna import Alconna, Arpamar...alc = Alconna(...)@alcommand(alc, private=False)@assign(&quot;foo&quot;)async def foo(result: Arpamar):    ...@alcommand(alc, private=False)@assign(&quot;bar.baz&quot;, 1)async def bar_baz_1(result: Arpamar):    ...```## 便捷方法```pythonfrom arclet.alconna.graia import Match, Alc...@app.broadcast.receiver(    ..., dispatchers=[Alc.from_format(&quot;foo bar {baz:int}&quot;)])async def test2(baz: Match[int]):    print(&quot;match&quot;, baz.available, baz.result)```or```pythonfrom arclet.alconna.graia import Match, AlconnaSchema...channel = Channel.current()@channel.use(AlconnaSchema.from_(&quot;foo {sth:str} bar {baz:int}&quot;))@channel.use(ListenerSchema([...]))async def test2(sth: Match[str]):    print(&quot;match&quot;, sth.available, sth.result)```## 文档[链接](https://graiax.cn/guide/alconna.html#kirakira%E2%98%86dokidoki%E7%9A%84dispatcher)</longdescription>
</pkgmetadata>