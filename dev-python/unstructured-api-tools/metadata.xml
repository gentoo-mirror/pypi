<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h3 align=&quot;center&quot;&gt;  &lt;img    src=&quot;https://raw.githubusercontent.com/Unstructured-IO/unstructured-api-tools/main/img/unstructured_logo.png&quot;    height=&quot;200&quot;  &gt;&lt;/h3&gt;&lt;h3 align=&quot;center&quot;&gt;  &lt;p&gt;Open-Source Pre-Processing Tools for Unstructured Data&lt;/p&gt;&lt;/h3&gt;The `unstructured_api_tools` library includes utilities for converting pipeline notebooks intoREST API applications. `unstructured_api_tools` is intended for use in conjunction withpipeline repos. See [`pipeline-sec-filings`](https://github.com/Unstructured-IO/pipeline-sec-filings)for an example of a repo that uses `unstructured_api_tools`.## InstallationTo install the library, run `pip install unstructured_api_tools`.## Developer Quick Start* Using `pyenv` to manage virtualenv's is recommended* Mac install instructions. See [here](https://github.com/Unstructured-IO/community#mac--homebrew) for more detailed instructions.* `brew install pyenv-virtualenv`  * `pyenv install 3.8.15`  * Linux instructions are available [here](https://github.com/Unstructured-IO/community#linux).* Create a virtualenv to work in and activate it, e.g. for one named `unstructured_api_tools`:`pyenv  virtualenv 3.8.15 unstructured_api_tools` &lt;br /&gt;`pyenv activate unstructured_api_tools`* Run `make install-project-local`## UsageUse the CLI command to convert pipeline notebooks to scripts, for example:```bashunstructured_api_tools convert-pipeline-notebooks \  --input-directory pipeline-family-sec-filings/pipeline-notebooks \  --output-directory pipeline-family-sec-filings/prepline_sec_filings/api \  --pipeline-family sec-filings \  --semver 0.2.1```If you do not provide the `pipeline-family` and `semver` arguments, those values are parsed from`preprocessing-pipeline-family.yaml`. You can provide the `preprocessing-pipeline-family.yaml` fileexplicitly with `--config-filename` or the `PIPELINE_FAMILY_CONFIG` environment variable. If neitherof those is specified, the fallback is to use the `preprocessing-pipeline-family.yaml` file in thecurrent working directory.The API file undergoes `black`, `flake8` and `mypy` checks after being generated. If you want`flake8` to ignore specific errors, you can specify them through the CLI with`--flake8-ignore F401, E402`.See the [`flake8` docs](https://flake8.pycqa.org/en/latest/user/error-codes.html#error-violation-codes)for a full list of error codes.### Conversion from `pipeline_api` to FastAPIThe command described in [**Usage**](#Usage) generates a FastAPI API route for each `pipeline_api`function defined in the notebook. The signature of the `pipeline_api` method determines whatparameters the generated FastAPI accepts.Currently, only plain text file uploads are supported and as such the first argument must always be`text`, but support for multiple files and binary files is coming soon!In addition, any number of string array parameters may be specified. Any kwarg beginning with`m_` indicates a multi-value string parameter that is accepted by the FastAPI API.For example, in a notebook containing:    def pipeline_api(text, m_subject=[], m_name=[]):`text` represents the content of a file posted to the FastAPI API, and the `m_subject` and `m_name`keyword args represent optional parameters that may be posted to the API as well, both allowingmultiple string parameters. A `curl` request against such an API could look like this:    curl -X 'POST' \      'https://&lt;hostname&gt;/&lt;pipeline-family-name&gt;/&lt;pipeline-family-version&gt;/&lt;api-name&gt;' \      -H 'accept: application/json'  \      -H 'Content-Type: multipart/form-data' \      -F 'file=@file-to-process.txt' \      -F 'subject=art' \      -F 'subject=history'      -F 'subject=math' \      -F 'name=feynman'In addition, you can specify the response type if `pipeline_api` can support both &quot;application/json&quot;and &quot;text/csv&quot; as return types.For example, in a notebook containing a kwarg `response_type`:    def pipeline_api(text, response_type=&quot;text/csv&quot;, m_subject=[], m_name=[]):The consumer of the API may then specify &quot;text/csv&quot; as the requested response content type with the usualHTTP Accept header, e.g. `Accept: application/json` or `Accept: text/csv`.## Security PolicySee our [security policy](https://github.com/Unstructured-IO/unstructured-api-tools/security/policy) forinformation on how to report security vulnerabilities.## Learn more| Section | Description ||-|-|| [Company Website](https://unstructured.io) | Unstructured.io product and company info |</longdescription>
</pkgmetadata>