<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>baseconvert===========Convert any rational number, from any (positive integer) base, to any(positive integer) base. Output numbers as tuple or string.-  Any rational number-  Arbitrary precision-  Fractions-  Recurring/repeating fractional digits.-  Input numbers as tuple or string or number.-  Output numbers as tuple or string.MIT License (MIT) Copyright (c) 2016 Joshua Deakin`github &lt;https://github.com/squdle/baseconvert&gt;`__contact@joshuadeakin.comRequires---------  Python 3Install / Uninstall-------------------Install:::    pip install baseconvertUninstall:::    pip uninstall baseconvertQuickstart----------::    # base(number, input_base, output_base)    &gt;&gt;&gt; base((15, 15, 0, &quot;.&quot;, 8), 16, 10)    (4, 0, 8, 0, '.', 5)    &gt;&gt;&gt; base(&quot;FF0.8&quot;, 16, 10, string=True)    '4080.5'    &gt;&gt;&gt; base(&quot;4080.5&quot;, 10, 16, string=True)    'FF0.8'Or from command line::     $ echo 4080.5 | python -m baseconvert -i 10 -o 16     FF0.8     $ python -m baseconvert -n 4080.5 -i 10 -o 16     FF0.8Tuple representation--------------------Numbers are represented as a sequence of digits. Each digit is a base-10integer value. The radix point, which separates the integer andfractional parts, is denoted by a string period.::     (int, int, int, ... , '.', ... , int, int, int)     (   integer part    , '.',  fractional part   )String representation---------------------String digits (after z the values are in ascending Unicode):::    0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz    |  Value  | Representation |    |---------|----------------|    |  0 -  9 |    0  -  9     |    | 10 - 53 |    A  -  Z     |    | 36 - 61 |    a  -  z     |    | 62 +    | unicode 123 +  |    For bases higher than 61 it's recommended to use tuple representation.Examples--------::    # base(number, input_base, output_base)    &gt;&gt;&gt; n = (15,15,&quot;.&quot;,0,8)    &gt;&gt;&gt; base(n, 16, 10)    (2, 5, 5, '.', 0, 3, 1, 2, 5)    &gt;&gt;&gt; base(n, 16, 10, string=True)    '255.03125'    &gt;&gt;&gt; base(&quot;FF.08&quot;, 16, 10) == base((15,15,&quot;.&quot;,0,8), 16, 10)    True    # A callable BaseConverter object can also be created.    # This is useful for when several numbers need to be converted.    &gt;&gt;&gt; b = BaseConverter(input_base=16, output_base=8)    &gt;&gt;&gt; b(&quot;FF&quot;)    (3, 7, 7)    &gt;&gt;&gt; b((15, 15))    (3, 7, 7)    &gt;&gt;&gt; b(&quot;FF&quot;) == b((15,15))    True    &gt;&gt;&gt; base(0.1, 3, 10, string=True)    '0.[3]'Recurring digits~~~~~~~~~~~~~~~~Recurring digits at the end of a fractional part will be enclosed by &quot;[&quot;and &quot;]&quot; in both string and tuple representation. This behavior can beturned off by setting the recurring argument of base or BaseConverterobject to False.::    &gt;&gt;&gt; base(&quot;0.1&quot;, 3, 10, string=True)    '0.[3]'    &gt;&gt;&gt; base(&quot;0.1&quot;, 3, 10, string=True, recurring=False)    '0.3333333333'Max fractional depth~~~~~~~~~~~~~~~~~~~~Integer parts are always of arbitrary size. Fractional depth (number ofdigits) can must be specified by setting the max\_depth argument of baseor a BaseConverter object (default 10).::    &gt;&gt;&gt; base(&quot;0.2&quot;, 10, 8)    (0, '.', 1, 4, 6, 3, 1, 4, 6, 3, 1, 4)    &gt;&gt;&gt; base(&quot;0.2&quot;, 10, 8, max_depth=1)    (0, '.', 1)</longdescription>
</pkgmetadata>