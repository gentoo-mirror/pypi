<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dynareadoutAn Ansi C library for parsing binary output files of LS Dyna (d3plot, binout) with bindings for python## DocumentationYou can find a [Wiki](https://github.com/PucklaJ/dynareadout/wiki) with API Documentation for python.## Examples### Binout```pythonfrom dynareadout import Binout, BinoutTypebin_file = Nonetry:  # This library also supports opening multiple binout files at once by globing them  bin_file = Binout(&quot;simulation/binout*&quot;)except RuntimeError as e:  print(&quot;Failed to open binout: {}&quot;.format(e))  exit(1)# Print the children of the binoutchildren = bin_file.read(&quot;/&quot;)for (i, child) in enumerate(children):  print(&quot;Child {}: {}&quot;.format(i, child))# Read some data. This read method can read variables with different types, but# there are also read methods for particular typesnode_ids = bin_file.read(&quot;nodout/ids&quot;)for (i, nid) in enumerate(node_ids):  print(&quot;Node ID {}: {}&quot;.format(i, nid))# You can also read this variable with the read method of the particular type# First find out what the type isnode_ids_type = bin_file.get_type_id(&quot;/nodout/metadata/ids&quot;)# Then read the data using the special read method.# If you already know the exact type and path of a variable# these methods can be a bit more performant,# since the library does not need the get the type and path first.if node_ids_type == BinoutType.Int32:  node_ids = bin_file.read_int32(&quot;/nodout/metadata/ids&quot;)elif node_ids_type == BinoutType.Int64:  node_ids = bin_file.read_int64(&quot;/nodout/metadata/ids&quot;)else:  print(&quot;The node ids are not 32-Bit or 64-Bit integers&quot;)  exit(1)for (i, nid) in enumerate(node_ids):  print(&quot;Node ID {}: {}&quot;.format(i, nid))# If you want to read &quot;timed&quot; data (x_displacement, x_force, etc.) you can do so also with the read methodx_displacement = bin_file.read(&quot;nodout/x_displacement&quot;)for (t, time_step) in enumerate(x_displacement):  for (n, x_disp) in enumerate(time_step):    print(&quot;X Displacement time_step={}, node_id={}: {}&quot;.format(t, node_ids[n], x_displacement[t][n]))```### D3plot```pythonfrom dynareadout import D3plotplot_file = Nonetry:  # Just give it the first d3plot file and it opens all of them  plot_file = D3plot(&quot;simulation/d3plot&quot;)except e as RuntimeError:  print(&quot;Failed to open: {}&quot;.format(e))  exit(1)# Read the titletitle = plot_file.read_title()print(&quot;Title: {}&quot;.format(title))# Read node idsnode_ids = plot_file.read_node_ids()print(&quot;Nodes: {}&quot;.format(len(node_ids)))for (i, nid) in enumerate(node_ids):  print(&quot;Node {}: {}&quot;.format(i, nid))# Read node coordinates of time step 10node_coords = plot_file.read_node_coordinates(10)for i in range(len(node_coords)):  print(&quot;Node Coords {}: ({:.2f}, {:.2f}, {:.2f})&quot;.format(i, node_coords[i][0], node_coords[i][1], node_coords[i][2]))```### KeyFile```pythonfrom dynareadout import key_file_parsekeywords = key_file_parse(&quot;simulation/input.k&quot;)# Parse all nodesnode_keywords = keywords[&quot;NODE&quot;]for i in range(len(node_keywords)):  for j in range(len(node_keywords[i])):    node = node_keywords[i][j]    node_data = node.parse_whole([8, 16, 16, 16])    nid = node_data[0]    x = node_data[1]    y = node_data[2]    z = node_data[3]    print(f&quot;NODE {nid:d}: ({x:.3f}; {y:.3f}; {z:.3f})&quot;)```## Other languagesThis library is also available for C and C++ this version can be found [here](https://github.com/PucklaJ/dynareadout).## Installation```consolepython -m pip install dynareadout```## Uploading to PyPI1. Make sure that the dynareadout submodule has the correct version2. Update the version in `setup.py` and `pyproject.toml`. Also check if new source files have been added3. Publish a new release4. Create source distribution```consolepython setup.py sdist```5. Upload to `test.pypi.org````consolepython -m twine upload --repository testpypi dist/*```Then insert `__token__` as username and the token as password.6. Install package from `test.pypi.org` to test it```consolepython -m pip install --upgrade --no-build-isolation --index-url https://test.pypi.org/simple/ dynareadout```7. If it works upload it to `pypi.org`8. Create windows wheel```consolepython -m build```9. Upload windows wheel to `test.pypi.org` and test it.10. If it works upload it to `pypi.org````consolepython -m twine upload dist/*```</longdescription>
</pkgmetadata>