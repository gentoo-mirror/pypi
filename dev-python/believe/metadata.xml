<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Believe## Motivation* We often need to compare expected results in our test. It's lousy to check expected result under the following way.```import uuidclass TestCases:    def test_user(self):        user = {                    &quot;name&quot;: &quot;John&quot;,                    &quot;id&quot;: &quot;30e7b1e2-4c80-44c2-8fe5-23bad73ed8f2&quot;                }        assert set(&quot;name&quot;, &quot;id&quot;) == set(user.keys())        assert isinstance(user[&quot;name&quot;], str)        assert 0 &lt; len(user[&quot;name&quot;]) &lt; 64        assert isinstance(user[&quot;id&quot;], str)        uuid.UUID(user[&quot;id&quot;])```* By using this package, we could compare the value using the following way. It's easier to read and maintain.```import believe as Bclass TestCases:    def test_user(self):        user = {                    &quot;name&quot;: &quot;John&quot;,                    &quot;id&quot;: &quot;30e7b1e2-4c80-44c2-8fe5-23bad73ed8f2&quot;                }        assert user == {&quot;name&quot;: B.AnyStr(min_len=1, max_len=63),                        &quot;id&quot;: B.AnyUUID()}```* If you are looking for web framework input validation, I suggest use [FastAPI](https://fastapi.tiangolo.com/). It properly integrate with openapi as well.## Installation```pip install believe```## Basic usage```import believe as Bimport time# Match any stringassert B.AnyStr() == &quot;any_str&quot;# Match string length &gt;= 1 and &lt;= 10assert B.AnyStr(min_len=1, max_len=10) == &quot;a&quot;# Match any string that can be converted to intassert B.AnyIntStr() == &quot;123&quot;# Match any UUID format stringassert B.AnyUUID() == &quot;732c0743-2638-47d5-902d-0daa3080348b&quot;# Match any sha1 stringassert B.AnySHA1() == &quot;b130c4b97d0640eaf3f45f7360a5b4dbbf561f58&quot;# Match any IPv4 stringassert B.AnyIPV4() == &quot;1.2.3.4&quot;# Match integer that is &gt;=1 and &lt;= 10assert B.AnyInt(min_value=1, max_value=10) == 5# Match any float that is &gt;= 1.0 and &lt;= 10.0assert B.AnyFloat(min_value=1.0, max_value=10.0) == 5.0 # 1.0 &lt;= X &lt;= 10.0# Match if values is &quot;one&quot; or &quot;two&quot;assert B.OneOf(&quot;one&quot;, &quot;two&quot;) == &quot;one&quot;# Sometimes we don't care about the order, we can use AnyOrderassert B.AnyOrder([1, 2, 3]) == [2, 1, 3]# Sometimes we assign value as timestamp but test cases takes more than 1 sec# We can use almost to accept a range of valuesassert B.Almost(time.time(), ts_range=3) == time.time() # Allow 3 sec gap# If we allow None or any stringassert B.Nullable(B.AnyStr()) == Noneassert B.Nullable(B.AnyStr()) == &quot;123&quot;# Only check typeassert B.Any(bytes) == b'123'# Reverse check result, anything but &quot;A&quot; or &quot;B&quot;assert B.Not(B.OneOf(&quot;A&quot;, &quot;B&quot;)) == &quot;C&quot;# Match listassert B.ListOf(B.AnyStr()) == [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]assert B.ListOf(B.AnyStr(), n_item=3) == [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]  # exact 3 itemsassert B.ListOf(B.AnyStr(), min_item=1) == [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]  # &gt;= 1 itemsassert B.ListOf(B.AnyStr(), max_item=5) == [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]  # &lt;= 5 items```## Advance Usage```# If we don't want to use json.load('{&quot;foo&quot;: &quot;bar&quot;}') == {&quot;foo&quot;: &quot;bar&quot;}, we can use the following wayassert B.AnyJsonStr({&quot;foo&quot;: &quot;bar&quot;}) == '{&quot;foo&quot;: &quot;bar&quot;}'# We can use AnyUrl to compare the normalized url# 1. We can compare one with default port and one without, they are identicalassert B.AnyUrl(&quot;https://foo.com/&quot;) == &quot;https://foo.com:443/&quot;assert B.AnyUrl(&quot;http://foo.com/&quot;) == &quot;http://foo.com:80/&quot;# 2. We can ignore the order in query stringassert B.AnyUrl(&quot;https://foo.com/bar?p1=1&amp;p2=2&quot;) == &quot;https://foo.com/bar?p2=2&amp;p1=1&quot;# We can use Dict to compare a dict with Optional fieldassert B.Dict({&quot;name&quot;: B.AnyStr(), &quot;value&quot;: B.Optional(B.AnyStr())}) == {&quot;name&quot;: &quot;abc&quot;}assert B.Dict({&quot;name&quot;: B.AnyStr(), &quot;value&quot;: B.Optional(B.AnyStr())}) == {&quot;name&quot;: &quot;abc&quot;, &quot;value&quot;: &quot;def&quot;}# If key is a dynamic value, we can use DictOf(&lt;key_matcher&gt;, &lt;value_matcher&gt;)# i.e. We want to match a dict with random uuid as keyassert B.DictOf(B.AnyUUID(), B.OneOf(&quot;ok&quot;, &quot;fail&quot;)) == {&quot;732c0743-2638-47d5-902d-0daa3080348b&quot;: &quot;ok&quot;,                                                        &quot;5cfd50ba-c3d3-4fb7-b2fe-e9a6e039ad29&quot;: &quot;fail&quot;}```## Use Validate Function```# validate with error exceptionimport believe as Bvalidator = B.Dict({&quot;name&quot;: B.AnyInt()})B.validate(validator, {&quot;name&quot;: &quot;ken&quot;})  # believe.error.ValidateError: [e_path=$.name] 'ken' != AnyInt()```## A Complex Example```import believe as Bimport timeresult_json = {&quot;name&quot;: &quot;john&quot;,               &quot;age&quot;: 32,               &quot;download_link&quot;: &quot;https://download.server.com/?name=john&amp;id=abc&quot;,               &quot;role&quot;: &quot;admin&quot;,               &quot;address&quot;: &quot;10.1.2.3&quot;,               &quot;updated_at&quot;: int(time.time()),               &quot;tags&quot;: [&quot;admin&quot;, &quot;john&quot;]}exp_result = B.Dict({&quot;name&quot;: B.AnyStr(min_len=1, max_len=64),                     &quot;age&quot;: B.AnyInt(min_value=0, max_value=200),                     &quot;download_link&quot;: B.AnyUrl(&quot;https://download.server.com/?id=abc&amp;name=john&quot;),                     &quot;role&quot;: B.OneOf(&quot;admin&quot;, &quot;user&quot;),                     &quot;address&quot;: B.AnyIPV4(),                     &quot;updated_at&quot;: B.Almost(int(time.time())),                     &quot;tags&quot;: B.ListOf(B.AnyStr()),                     &quot;extra&quot;: B.Optional(B.Nullable(B.AnyStr()))})B.validate(exp_result, result_json)```</longdescription>
</pkgmetadata>