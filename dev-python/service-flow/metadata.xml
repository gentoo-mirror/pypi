<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># service-flow&lt;img src='https://www.worksmartsystems.com/images/C3_4StationL3.gif' width=&quot;35%&quot; height=&quot;35%&quot; align=&quot;right&quot; /&gt;A small, simple, and elegant component/function orchestration framework for Python, `service-flow` enables separation of a functionality into single-responsibility and bite-size functions/service objects, which are testable and reuseable. It further helps with readability and maintainability of the embedding application. It supports both sync and async services.- [Implementation](#implementation)  - [flow](#flow)    - [basic example (`&gt;&gt;`)](#basic-example-)    - [fork example (`&lt;`)](#fork-example-)  - [services](#services)    - [example](#example)      - [basic service](#basic-service)      - [decorator service](#decorator-service)    - [async service](#async-service)    - [lambda service](#lambda-service)    - [conventions](#conventions)      - [initialization parameters](#initialization-parameters)      - [function parameters](#function-parameters)      - [return value](#return-value)  - [exceptions](#exceptions)- [inspiration](#inspiration)- [TODOs](#todos)- [install](#install)## Implementation`service-flow` has two parts -- a `flow` and multiple `services` (Note: the word `service` here refers to a function, not RESTful services):### flowa flow is the definition of processing procedure. It is defined as the following:#### basic example (`&gt;&gt;`)```pythonflow = Service1() &gt;&gt; \        Service2(*args) &gt;&gt; \        ...        ServiceN(**kwargs)output = flow(input) ## input is a dictionary with all the input parameters as attributes```Python `&gt;&gt;` operator is overloaded to define the sequence of the processing. `Service1()`, ..., `ServiceN()` are instances of the services, or functions.for each processing of the input, `service-flow` creates a **context**, a dictionary-like object that serves as input and gather outputs from all the services.#### fork example (`&lt;`)```pythonflow = Service1() &gt;&gt; \        Service2(*args) &lt; \        ('context_var_name', {            'var_value1': (Service3() &gt;&gt; Service4(**kwargs)),            'var_value2': (Service5() &gt;&gt; Service4(**kwargs)),          }        )output = flow(input) ## input is a dictionary with all the input parameters as attributes```Python `&lt;` operator is overloaded to define a fork in processing. In this example, `context_var_name` is the name of context key, and `var_value1`, `var_value2` are potential values for forking.A fork can not be the first service in a flow definition.### servicesA service is the equivalent of a Python function.#### example##### basic serviceA element in a list of services that composes the flow. it inherits from `service_flow.middleware.Middleware`.```pythonclass InplaceModification(Middleware):    def __init__(self, increment): # initialization        self.increment = 1    def __call__(self, bar: list): # service call        return {'bar': [i + self.increment for i in bar]}```##### decorator serviceAs the name implies, decorator service works similiarly to a python decorator that is nested on top of the subsequent flow.A decorator service inherits from `service_flow.middleware.DecoratorMiddleware` and has one additional instance variable `app`, which is the reference to the subsequent flow.```pythonclass ExceptionHandler(DecoratorMiddleware):    def __call__(self, context):        try:            self.app(context)        except ZeroDivisionError:            return {'error': 'decided by zero'}```#### async serviceAs asyncio was introduced in python version 3.4, `service-flow` now supports async middlewares. here is example:```pythonimport aiohttpclass GetPythonSiteHTML(Middleware):    def __init__(self, increment):        self.increment = increment    async def __call__(self, bar: list):      async with aiohttp.ClientSession() as session:          async with session.get('http://python.org') as response:              html = await response.text()      return await {'response': html}```#### lambda service`service-flow` supports simple functionality as a service in the form a lambda type. Note the following:1. a lambda service is always sync2. a lambda service can not be the first service on stack.#### conventionsIt needs to follow the convention below:##### initialization parametersparameters that initializes the service and is shared for all the calls to the service.##### function parametersThese parameters are used as inputs to a service. They normally have to be existing attributes in the context object.The only exception is if there is only one parameter and its name is &quot;context&quot;, in which case the entire context dictionary will be passed in as the value of the context parameter.##### return valuethe return value of a service is optional. If a service does return values:1. if it is a dictionary, it will add/update the aforementioned processing *context*.2. otherwise, the return value is ignored and a warning message is logged.### exceptions`service-flow` raises a few types of exceptions:1. `StopFlowException`: raised inside a service to signal stop processing. typical use cases include when incoming request is invalid.2. `RetryException`: raised inside a service to signal re-processing of the same request. typical use cases include when a http request issued from the service times out or database transaction level violation.3. `FatalException`: raised inside a service to restart the processor. typical use cases include when database connection is broken or other infrastructure related errors.## inspiration`service-flow` draws inspiration from the following Ruby projects:1. [Rack](https://github.com/rack/rack)2. [Light Service](https://github.com/adomokos/light-service)3. [Ruby Middleware](https://github.com/Ibsciss/ruby-middleware)## TODOs## install```cmdpip install service-flow```</longdescription>
</pkgmetadata>