<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ASDF - Advanced Scientific Data Format======================================.. _begin-badges:.. image:: https://github.com/asdf-format/asdf/workflows/CI/badge.svg    :target: https://github.com/asdf-format/asdf/actions    :alt: CI Status.. image:: https://github.com/asdf-format/asdf/workflows/s390x/badge.svg    :target: https://github.com/asdf-format/asdf/actions    :alt: s390x Status.. image:: https://github.com/asdf-format/asdf/workflows/Downstream/badge.svg    :target: https://github.com/asdf-format/asdf/actions    :alt: Downstream CI Status.. image:: https://readthedocs.org/projects/asdf/badge/?version=latest    :target: https://asdf.readthedocs.io/en/latest/.. image:: https://codecov.io/gh/asdf-format/asdf/branch/main/graphs/badge.svg    :target: https://codecov.io/gh/asdf-format/asdf.. _begin-zenodo:.. image:: https://zenodo.org/badge/18112754.svg    :target: https://zenodo.org/badge/latestdoi/18112754.. _end-zenodo:.. image:: https://img.shields.io/pypi/l/asdf.svg    :target: https://img.shields.io/pypi/l/asdf.svg.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white    :target: https://github.com/pre-commit/pre-commit    :alt: pre-commit.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black.. _end-badges:.. _begin-summary-text:The **A**\ dvanced **S**\ cientific **D**\ ata **F**\ ormat (ASDF) is anext-generation interchange format for scientific data. This packagecontains the Python implementation of the ASDF Standard. Moreinformation on the ASDF Standard itself can be found`here &lt;https://asdf-standard.readthedocs.io&gt;`__.The ASDF format has the following features:* A hierarchical, human-readable metadata format (implemented using `YAML  &lt;http://yaml.org&gt;`__)* Numerical arrays are stored as binary data blocks which can be memory  mapped. Data blocks can optionally be compressed.* The structure of the data can be automatically validated using schemas  (implemented using `JSON Schema &lt;http://json-schema.org&gt;`__)* Native Python data types (numerical types, strings, dicts, lists) are  serialized automatically* ASDF can be extended to serialize custom data types.. _end-summary-text:ASDF is under active development `on github&lt;https://github.com/asdf-format/asdf&gt;`__. More information on contributingcan be found `below &lt;#contributing&gt;`__.Overview--------This section outlines basic use cases of the ASDF package for creatingand reading ASDF files.Creating a file~~~~~~~~~~~~~~~.. _begin-create-file-text:We're going to store several `numpy` arrays and other data to an ASDF file. Wedo this by creating a &quot;tree&quot;, which is simply a `dict`, and we provide it asinput to the constructor of `AsdfFile`:.. code:: python    import asdf    import numpy as np    # Create some data    sequence = np.arange(100)    squares = sequence**2    random = np.random.random(100)    # Store the data in an arbitrarily nested dictionary    tree = {        &quot;foo&quot;: 42,        &quot;name&quot;: &quot;Monty&quot;,        &quot;sequence&quot;: sequence,        &quot;powers&quot;: {&quot;squares&quot;: squares},        &quot;random&quot;: random,    }    # Create the ASDF file object from our data tree    af = asdf.AsdfFile(tree)    # Write the data to a new file    af.write_to(&quot;example.asdf&quot;)If we open the newly created file's metadata section, we can see some of the key featuresof ASDF on display:.. _begin-example-asdf-metadata:.. code:: yaml    #ASDF 1.0.0    #ASDF_STANDARD 1.2.0    %YAML 1.1    %TAG ! tag:stsci.edu:asdf/    --- !core/asdf-1.1.0    asdf_library: !core/software-1.0.0 {author: The ASDF Developers, homepage: 'http://github.com/asdf-format/asdf',      name: asdf, version: 2.0.0}    history:      extensions:      - !core/extension_metadata-1.0.0        extension_class: asdf.extension.BuiltinExtension        software: {name: asdf, version: 2.0.0}    foo: 42    name: Monty    powers:      squares: !core/ndarray-1.0.0        source: 1        datatype: int64        byteorder: little        shape: [100]    random: !core/ndarray-1.0.0      source: 2      datatype: float64      byteorder: little      shape: [100]    sequence: !core/ndarray-1.0.0      source: 0      datatype: int64      byteorder: little      shape: [100]    ..... _end-example-asdf-metadata:The metadata in the file mirrors the structure of the tree that was stored. Itis hierarchical and human-readable. Notice that metadata has been added to thetree that was not explicitly given by the user. Notice also that the numericalarray data is not stored in the metadata tree itself. Instead, it is stored asbinary data blocks below the metadata section (not shown above)... _end-create-file-text:.. _begin-compress-file:It is possible to compress the array data when writing the file:.. code:: python    af.write_to(&quot;compressed.asdf&quot;, all_array_compression=&quot;zlib&quot;)The built-in compression algorithms are ``'zlib'``, and ``'bzp2'``.  The``'lz4'`` algorithm becomes available when the `lz4 &lt;https://python-lz4.readthedocs.io/&gt;`__ packageis installed.  Other compression algorithms may be available via extensions... _end-compress-file:Reading a file~~~~~~~~~~~~~~.. _begin-read-file-text:To read an existing ASDF file, we simply use the top-level `open` function ofthe `asdf` package:.. code:: python    import asdf    af = asdf.open(&quot;example.asdf&quot;)The `open` function also works as a context handler:.. code:: python    with asdf.open(&quot;example.asdf&quot;) as af:        ...To get a quick overview of the data stored in the file, use the top-level`AsdfFile.info()` method:.. code:: pycon    &gt;&gt;&gt; import asdf    &gt;&gt;&gt; af = asdf.open(&quot;example.asdf&quot;)    &gt;&gt;&gt; af.info()    root (AsdfObject)    ├─asdf_library (Software)    │ ├─author (str): The ASDF Developers    │ ├─homepage (str): http://github.com/asdf-format/asdf    │ ├─name (str): asdf    │ └─version (str): 2.8.0    ├─history (dict)    │ └─extensions (list)    │   └─[0] (ExtensionMetadata)    │     ├─extension_class (str): asdf.extension.BuiltinExtension    │     └─software (Software)    │       ├─name (str): asdf    │       └─version (str): 2.8.0    ├─foo (int): 42    ├─name (str): Monty    ├─powers (dict)    │ └─squares (NDArrayType): shape=(100,), dtype=int64    ├─random (NDArrayType): shape=(100,), dtype=float64    └─sequence (NDArrayType): shape=(100,), dtype=int64The `AsdfFile` behaves like a Python `dict`, and nodes are accessed likeany other dictionary entry:.. code:: pycon    &gt;&gt;&gt; af[&quot;name&quot;]    'Monty'    &gt;&gt;&gt; af[&quot;powers&quot;]    {'squares': &lt;array (unloaded) shape: [100] dtype: int64&gt;}Array data remains unloaded until it is explicitly accessed:.. code:: pycon    &gt;&gt;&gt; af[&quot;powers&quot;][&quot;squares&quot;]    array([   0,    1,    4,    9,   16,   25,   36,   49,   64,   81,  100,            121,  144,  169,  196,  225,  256,  289,  324,  361,  400,  441,            484,  529,  576,  625,  676,  729,  784,  841,  900,  961, 1024,           1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849,           1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916,           3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225,           4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776,           5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569,           7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604,           9801])    &gt;&gt;&gt; import numpy as np    &gt;&gt;&gt; expected = [x**2 for x in range(100)]    &gt;&gt;&gt; np.equal(af[&quot;powers&quot;][&quot;squares&quot;], expected).all()    TrueBy default, uncompressed data blocks are memory mapped for efficientaccess. Memory mapping can be disabled by using the ``copy_arrays``option of `open` when reading:.. code:: python    af = asdf.open(&quot;example.asdf&quot;, copy_arrays=True).. _end-read-file-text:For more information and for advanced usage examples, see the`documentation &lt;#documentation&gt;`__.Extending ASDF~~~~~~~~~~~~~~Out of the box, the ``asdf`` package automatically serializes anddeserializes native Python types. It is possible to extend ``asdf`` byimplementing custom tags that correspond to custom user types. Moreinformation on extending ASDF can be found in the `officialdocumentation &lt;http://asdf.readthedocs.io/en/latest/#extending-asdf&gt;`__.Installation------------.. _begin-pip-install-text:Stable releases of the ASDF Python package are registered `atPyPi &lt;https://pypi.python.org/pypi/asdf&gt;`__. The latest stable versioncan be installed using ``pip``:::    $ pip install asdf.. _begin-source-install-text:The latest development version of ASDF is available from the ``main`` branch`on github &lt;https://github.com/asdf-format/asdf&gt;`__. To clone the project:::    $ git clone https://github.com/asdf-format/asdfTo install:::    $ cd asdf    $ pip install .To install in `developmentmode &lt;https://packaging.python.org/tutorials/distributing-packages/#working-in-development-mode&gt;`__::    $ pip install -e ... _end-source-install-text:Testing-------.. _begin-testing-text:To install the test dependencies from a source checkout of the repository:::    $ pip install -e &quot;.[tests]&quot;To run the unit tests from a source checkout of the repository:::    $ pytestIt is also possible to run the test suite from an installed version ofthe package.::    $ pip install &quot;asdf[tests]&quot;    $ pytest --pyargs asdfIt is also possible to run the tests using `tox&lt;https://tox.readthedocs.io/en/latest/&gt;`__.::   $ pip install toxTo list all available environments:::   $ tox -vaTo run a specific environment:::   $ tox -e &lt;envname&gt;.. _end-testing-text:Documentation-------------More detailed documentation on this software package can be found`here &lt;https://asdf.readthedocs.io&gt;`__.More information on the ASDF Standard itself can be found`here &lt;https://asdf-standard.readthedocs.io&gt;`__.There are two mailing lists for ASDF:* `asdf-users &lt;https://groups.google.com/forum/#!forum/asdf-users&gt;`_* `asdf-developers &lt;https://groups.google.com/forum/#!forum/asdf-developers&gt;`_    If you are looking for the **A**\ daptable **S**\ eismic **D**\ ata    **F**\ ormat, information can be found    `here &lt;https://seismic-data.org/&gt;`__.License-------ASDF is licensed under a BSD 3-clause style license. See `LICENSE.rst &lt;LICENSE.rst&gt;`_for the `licenses folder &lt;licenses&gt;`_ forlicenses for any included software.Contributing------------We welcome feedback and contributions to the project. Contributions ofcode, documentation, or general feedback are all appreciated. Pleasefollow the `contributing guidelines &lt;CONTRIBUTING.rst&gt;`__ to submit anissue or a pull request.We strive to provide a welcoming community to all of our users byabiding to the `Code of Conduct &lt;CODE_OF_CONDUCT.md&gt;`__.</longdescription>
</pkgmetadata>