<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://raw.githubusercontent.com/BrianPugh/autoregistry/main/assets/logo_400w.png|Python compat| |PyPi| |GHA tests| |Codecov report| |readthedocs|.. inclusion-marker-do-not-removeAutoRegistry============Invoking functions and class-constructors from a string is a common design patternthat AutoRegistry aims to solve.For example, a user might specify a backend of type ``&quot;sqlite&quot;`` in a yaml configurationfile, for which our program needs to construct the ``SQLite`` subclass of our ``Database`` class.Classically, you would need to manually create a lookup, mapping the string ``&quot;sqlite&quot;`` tothe ``SQLite`` constructor.With AutoRegistry, the lookup is automatically created for you.AutoRegistry has a single  powerful class ``Registry`` that can do the following:* Be inherited to automatically register subclasses by their name.* Be directly invoked ``my_registry = Registry()`` to create a decorator  for registering callables like functions.* Traverse and automatically create registries for other python libraries... inclusion-marker-removeAutoRegistry is also highly configurable, with features like name-schema-enforcement and name-conversion-rules.`Checkout the docs for more information &lt;https://autoregistry.readthedocs.io/en/latest/?badge=latest/&gt;`_.`Watch AutoRegistry in action! &lt;https://youtu.be/4No_NE7bUOM&gt;`_Installation============AutoRegistry requires Python ``&gt;=3.8``... code-block:: bash   python -m pip install autoregistryExamples========Class Inheritance^^^^^^^^^^^^^^^^^``Registry`` adds a dictionary-like interface to class constructorsfor looking up subclasses... code-block:: python   from abc import abstractmethod   from dataclasses import dataclass   from autoregistry import Registry   @dataclass   class Pokemon(Registry):       level: int       hp: int       @abstractmethod       def attack(self, target):           &quot;&quot;&quot;Attack another Pokemon.&quot;&quot;&quot;   class Charmander(Pokemon):       def attack(self, target):           return 1   class Pikachu(Pokemon):       def attack(self, target):           return 2   class SurfingPikachu(Pikachu):       def attack(self, target):           return 3   print(f&quot;{len(Pokemon)} Pokemon types registered:&quot;)   print(f&quot;    {list(Pokemon)}&quot;)   # By default, lookup is case-insensitive   charmander = Pokemon[&quot;cHaRmAnDer&quot;](level=7, hp=31)   print(f&quot;Created Pokemon: {charmander}&quot;)This code block produces the following output:.. code-block::   3 Pokemon types registered:       ['charmander', 'pikachu', 'surfingpikachu']   Created Pokemon: Charmander(level=7, hp=31)Function Registry^^^^^^^^^^^^^^^^^Directly instantiating a ``Registry`` object allows you toregister functions by decorating them... code-block:: python   from autoregistry import Registry   pokeballs = Registry()   @pokeballs   def masterball(target):       return 1.0   @pokeballs   def pokeball(target):       return 0.1   for ball in [&quot;pokeball&quot;, &quot;masterball&quot;]:       success_rate = pokeballs[ball](None)       print(f&quot;Ash used {ball} and had {success_rate=}&quot;)This code block produces the following output:.. code-block:: text   Ash used pokeball and had success_rate=0.1   Ash used masterball and had success_rate=1.0Module Registry^^^^^^^^^^^^^^^Create a registry for another python module... code-block:: python   import torch   from autoregistry import Registry   optims = Registry(torch.optim)   # &quot;adamw&quot; and ``lr`` could be coming from a configuration file.   optimizer = optims[&quot;adamw&quot;](model.parameters(), lr=3e-3)   assert list(optims) == [       &quot;asgd&quot;,       &quot;adadelta&quot;,       &quot;adagrad&quot;,       &quot;adam&quot;,       &quot;adamw&quot;,       &quot;adamax&quot;,       &quot;lbfgs&quot;,       &quot;nadam&quot;,       &quot;optimizer&quot;,       &quot;radam&quot;,       &quot;rmsprop&quot;,       &quot;rprop&quot;,       &quot;sgd&quot;,       &quot;sparseadam&quot;,       &quot;lr_scheduler&quot;,       &quot;swa_utils&quot;,   ].. |GHA tests| image:: https://github.com/BrianPugh/autoregistry/workflows/tests/badge.svg   :target: https://github.com/BrianPugh/autoregistry/actions?query=workflow%3Atests   :alt: GHA Status.. |Codecov report| image:: https://codecov.io/github/BrianPugh/autoregistry/coverage.svg?branch=main   :target: https://codecov.io/github/BrianPugh/autoregistry?branch=main   :alt: Coverage.. |readthedocs| image:: https://readthedocs.org/projects/autoregistry/badge/?version=latest        :target: https://autoregistry.readthedocs.io/en/latest/?badge=latest        :alt: Documentation Status.. |Python compat| image:: https://img.shields.io/badge/&gt;=python-3.8-blue.svg.. |PyPi| image:: https://img.shields.io/pypi/v/autoregistry.svg        :target: https://pypi.python.org/pypi/autoregistry</longdescription>
</pkgmetadata>