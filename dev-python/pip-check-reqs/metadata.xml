<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build Status| |codecov| |PyPI|.. |Build Status| image:: https://github.com/r1chardj0n3s/pip-check-reqs/workflows/CI/badge.svg   :target: https://github.com/r1chardj0n3s/pip-check-reqs/actions.. |codecov| image:: https://codecov.io/gh/r1chardj0n3s/pip-check-reqs/branch/master/graph/badge.svg   :target: https://codecov.io/gh/r1chardj0n3s/pip-check-reqs.. |PyPI| image:: https://badge.fury.io/py/pip-check-reqs.svg   :target: https://badge.fury.io/py/pip-check-reqspip-check-reqs==============It happens: you start using a module in your project and it works and youdon't realise that it's only being included in your `virtualenv`_ becauseit's a dependency of a package you're using. pip-missing-reqs finds thosemodules so you can include them in the `requirements.txt`_ for the project.Alternatively, you have a long-running project that has some packages inrequirements.txt that are no longer actively used in the codebase. Thepip-extra-reqs tool will find those modules so you can remove them... _`virtualenv`: https://virtualenv.pypa.io/en/latest/.. _`requirements.txt`: https://pip.pypa.io/en/latest/user_guide.html#requirements-filesAssuming your project follows a layout like the suggested sample project::    setup.py    setup.cfg    requirements.txt    sample/__init__.py    sample/sample.py    sample/tests/test_sample.pyBasic usage, running in your project directory::    &lt;activate virtualenv for your project&gt;    pip-missing-reqs --ignore-file=sample/tests/* sampleThis will find all imports in the code in &quot;sample&quot; and check that thepackages those modules belong to are in the requirements.txt file.Additionally it is possible to check that there are no dependencies inrequirements.txt that are then unused in the project::    &lt;activate virtualenv for your project&gt;    pip-extra-reqs --ignore-file=sample/tests/* sampleThis would find anything that is listed in requirements.txt but that is notimported by sample.Sample tox.ini configuration----------------------------To make your life easier, copy something like this into your tox.ini::    [testenv:pip-check-reqs]    deps=-rrequirements.txt    commands=        pip-missing-reqs --ignore-file=sample/tests/* sample        pip-extra-reqs --ignore-file=sample/tests/* sampleExcluding test files (or others) from this check------------------------------------------------Your test files will sometimes be present in the same directory as yourapplication source (&quot;sample&quot; in the above examples). The requirements forthose tests generally should not be in the requirements.txt file, and youdon't want this tool to generate false hits for those.You may exclude those test files from your check using the `--ignore-file`option (shorthand is `-f`). Multiple instances of the option are allowed.Excluding modules from the check--------------------------------If your project has modules which are conditionally imported, or requirementswhich are conditionally included, you may exclude certain modules from thecheck by name (or glob pattern) using `--ignore-module` (shorthand is `-m`)::    # ignore the module spam    pip-missing-reqs --ignore-module=spam sample    # ignore the whole package spam as well    pip-missing-reqs --ignore-module=spam --ignore-module=spam.* sampleWith Thanks To--------------Josh Hesketh -- who refactored code and contributed the pip-extra-reqs tool.Wil Cooley -- who handled the removal of normalize_name and fixed some bugs.Release History---------------2.4.4- Bump `packaging` requirement to &gt;= 20.5. Older versions of `pip-check-reqs`     may be broken with the previously-specified version requirements.2.4.3- Improves performance on Python 3.11.2.4.2- Added support for Python 3.11.- Added `python_requires` to metadata; from now on, releases of  `pip-check-reqs` are marked as compatible with Python 3.8.0 and up.- Made `--version` flag show interpretter version and path to the package which  pip-check-reqs is running from, similar to information shown by `pip  --version`.- `-V` is now an alias of `--version`.2.3.2- Fixed support for pip &lt; 21.32.3.1- Fixed `--skip-incompatible` skipping other requirements too.- Support pip &gt;= 21.32.3.0- Support pip &gt;= 21.2.12.2.2- AST parsing failures will now report tracebacks with a proper filename for  the parsed frame, instead of `&lt;unknown&gt;`.2.2.1- Python source is now always read using utf-8, even if default encoding for  reading files is set otherwise.2.2.0- Added `--skip-incompatible` flag to `pip-extra-reqs`, which makes it ignore  requirements with environment markers that are incompatible with the current  environment.- Added `--requirements-file` flag to `pip-extra-reqs` and `pip-missing-reqs`  commands. This flag makes it possible to specify a path to the requirements  file. Previously, `&quot;requirements.txt&quot;` was always used.- Fixed some of the logs not being visible with `-d` and `-v` flags.2.1.1- Bug fix: Though Python 2 support was removed from the source code, the published wheel was still universal.  The published wheel now explicitly does not support Python 2.  Please use version 2.0.4 for Python 2.2.1.0- Remove support for Python 2.  Please use an older version of this tool if you require that support.- Remove requirement for setuptools.- Support newer versions of pip, including the current version, for more features (20.1.1).  Thanks to @Czaki for important parts of this change.2.0.1- handled removal of normalize_name from pip.utils- handle packages with no files2.0 **renamed package to pip_check_reqs**- added tool pip-extra-reqs to find packages installed but not used  (contributed by Josh Hesketh)1.2.1- relax requirement to 6.0+1.2.0- bumped pip requirement to 6.0.8+- updated use of pip internals to match that version1.1.9- test fixes and cleanup- remove hard-coded simplejson debugging behaviour1.1.8- use os.path.realpath to avoid symlink craziness on debian/ubuntu1.1.7- tweak to debug output1.1.6- add debug (very verbose) run output1.1.5- add header to output to make it clearer when in a larger test run- fix tests and self-test1.1.4- add --version- remove debug print from released code lol1.1.3- fix program to generate exit code useful for testing1.1.2- corrected version of vendored search_packages_info() from pip- handle relative imports1.1.1- fixed handling of import from __future__- self-tested and added own requirements.txt- cleaned up usage to require a file or directory to scan (rather than  defaulting to &quot;.&quot;)- vendored code from pip 1.6dev which fixes bug in search_packages_info  until pip 1.6 is released1.1.0- implemented --ignore-module</longdescription>
</pkgmetadata>