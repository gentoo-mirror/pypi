<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sqla-utilsOpinionated utilities for working with SQLAlchemy[![MIT License](https://img.shields.io/pypi/l/sqla-utils.svg)](https://pypi.python.org/pypi/sqla-utils/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/sqla-utils)](https://pypi.python.org/pypi/sqla-utils/)[![GitHub](https://img.shields.io/github/release/srittau/sqla-utils/all.svg)](https://github.com/srittau/sqla-utils/releases/)[![pypi](https://img.shields.io/pypi/v/sqla-utils.svg)](https://pypi.python.org/pypi/sqla-utils/)[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/srittau/sqla-utils/test-and-lint.yml?branch=main)](https://github.com/srittau/sqla-utils/actions/workflows/test-and-lint.yml)## Contents### Transaction Wrapper**FIXME**### `DBObjectBase``DBObjectBase` is a base class for mapped classes.Example:```pythonfrom datetime import datetimefrom sqlalchemy import Column, DateTime, Integer, Stringfrom sqla_utils import DBObjectBase, Transactionclass DBAppointment(DBObjectBase):    __tablename__ = &quot;appointments&quot;    id = Column(Integer, primary_key=True)    date = Column(DateTime, nullable=False)    description = Column(String(1000), nullable=False, default=&quot;&quot;)```Appointment items can then be queried like this:```pythonfrom sqla_utils import begin_transactionwith begin_transaction() as t:    app123 = DBAppointment.fetch_by_id(t, 123)    great_apps = DBAppointment.fetch_all(t, DBAppointment.description.like(&quot;%great%&quot;))```It is recommended to add custom query, creation, and update methods:```pythonclass DBAppointment(DBObjectBase):    ...    @classmethod    def create(cls, t: Transaction, date: datetime, description: str) -&gt; DBAppointment:        o = cls()        o.date = date        o.description = description        t.add(o)        return o    @classmethod    def fetch_all_after(cls, t: Transaction, date: datetime) -&gt; List[DBAppointment]:        return cls.fetch_all(t, cls.start &gt;= dates.start)    def update_description(self, t: Transaction, new_description: str) -&gt; None:        self.description = new_description        t.changed(self)```### Database Builder**FIXME**### pytest UtilitiesThe `sqla_utils.test` module contains a few utilities for working with pytest and SQLAlchemy.**FIXME**</longdescription>
</pkgmetadata>