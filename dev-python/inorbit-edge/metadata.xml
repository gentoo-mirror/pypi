<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># InOrbit Python Edge SDK[![Build Status](https://github.com/inorbit-ai/edge-sdk-python/workflows/Build%20Main/badge.svg)](https://github.com/inorbit-ai/edge-sdk-python/actions)[![Code Coverage](https://codecov.io/gh/inorbit/edge-sdk-python/branch/main/graph/badge.svg)](https://codecov.io/gh/inorbit/edge-sdk-python)The `InOrbit Edge SDK` allows Python programs to communicate with `InOrbit` platform on behalf of robots - providing robot data and handling robot actions. It's goal is to ease the integration between `InOrbit` and any other software that handles robot data.---## Features- Robot session handling through a `RobotSessionPool`.- Publish key-values.- Publish robot poses.- Publish robot odometry.- Publish robot path.- Publish robot laser.- Execute callbacks on Custom Action execution.- Execute scripts (or any program) in response to Custom Action execution.## Quick Start```pythonfrom inorbit_edge.robot import RobotSessionFactory, RobotSessionPooldef my_command_handler(robot_id, command_name, args, options):    &quot;&quot;&quot;Callback for processing custom command calls.    Args:        robot_id (str): InOrbit robot ID        command_name (str): InOrbit command e.g. 'customCommand'        args (list): Command arguments        options (dict): object that includes            - `result_function` can be called to report command execution result. It            has the following signature: `result_function(return_code)`.            - `progress_function` can be used to report command output and has the            following signature: `progress_function(output, error)`.            - `metadata` is reserved for the future and will contains additional            information about the received command request.    &quot;&quot;&quot;    if command_name == &quot;customCommand&quot;:        print(f&quot;Received '{command_name}' for robot '{robot_id}'!. {args}&quot;)        # Return '0' for success        options[&quot;result_function&quot;](&quot;0&quot;)robot_session_factory = RobotSessionFactory(    api_key=&quot;&lt;YOUR_API_KEY&gt;&quot;)# Register commands handlers. Note that all handlers are invoked.robot_session_factory.register_command_callback(my_command_handler)robot_session_factory.register_executable_commands(&quot;./user_scripts&quot;, r&quot;.*\.sh&quot;)robot_session_pool = RobotSessionPool(robot_session_factory)robot_session = robot_session_pool.get_session(    robot_id=&quot;my_robot_id_123&quot;, robot_name=&quot;Python SDK Quick Start Robot&quot;)robot_session.publish_pose(x=0.0, y=0.0, yaw=0.0)```## Installation**Stable Release:** `pip install inorbit-edge`&lt;br&gt;**Development Head:** `pip install git+https://github.com/inorbit-ai/edge-sdk-python.git`## DocumentationFor full package documentation please visit [InOrbit Developer Portal](https://developer.inorbit.ai/docs?hsLang=en#edge-sdk).## DevelopmentSee [CONTRIBUTING.md](CONTRIBUTING.md) for information related to developing the code.## The Three Commands You Need To Know1. `pip install -e .[dev]`    This will install your package in editable mode with all the required development    dependencies (i.e. `tox`).2. `make build`    This will run `tox` which will run all your tests in both Python 3.7    and Python 3.8 as well as linting your code.3. `make clean`    This will clean up various Python and build generated files so that you can ensure    that you are working in a clean environment.</longdescription>
</pkgmetadata>