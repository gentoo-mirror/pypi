<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Concise ConceptsWhen wanting to apply NER to concise concepts, it is really easy to come up with examples, but pretty difficult to train an entire pipeline. Concise Concepts uses few-shot NER based on word embedding similarity to get you goingwith easy! Now with entity scoring![![Python package](https://github.com/Pandora-Intelligence/concise-concepts/actions/workflows/python-package.yml/badge.svg?branch=main)](https://github.com/Pandora-Intelligence/concise-concepts/actions/workflows/python-package.yml)[![Current Release Version](https://img.shields.io/github/release/pandora-intelligence/concise-concepts.svg?style=flat-square&amp;logo=github)](https://github.com/pandora-intelligence/concise-concepts/releases)[![pypi Version](https://img.shields.io/pypi/v/concise-concepts.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/concise-concepts/)[![PyPi downloads](https://static.pepy.tech/personalized-badge/concise-concepts?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=orange&amp;left_text=pip%20downloads)](https://pypi.org/project/concise-concepts/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)## UsageThis library defines matching patterns based on the most similar words found in each group, which are used to fill a [spaCy EntityRuler](https://spacy.io/api/entityruler). To better understand the rule definition, I recommend playing around with the [spaCy Rule-based Matcher Explorer](https://demos.explosion.ai/matcher).### Tutorials- [TechVizTheDataScienceGuy](https://www.youtube.com/c/TechVizTheDataScienceGuy) created a [nice tutorial](https://prakhar-mishra.medium.com/few-shot-named-entity-recognition-in-natural-language-processing-92d31f0d1143) on how to use it.- [I](https://www.linkedin.com/in/david-berenstein-1bab11105/) created a [tutorial](https://www.rubrix.ml/blog/concise-concepts-rubrix/) in collaboration with Rubrix.The section [Matching Pattern Rules](#matching-pattern-rules) expands on the construction, analysis and customization of these matching patterns.# Install```pip install concise-concepts```# QuickstartTake a look at the [configuration section](#configuration) for more info.## Spacy Pipeline ComponentNote that, [custom embedding models](#custom-embedding-models) are passed via `model_path`.```pythonimport spacyfrom spacy import displacyimport concise_conceptsdata = {    &quot;fruit&quot;: [&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;],    &quot;vegetable&quot;: [&quot;broccoli&quot;, &quot;spinach&quot;, &quot;tomato&quot;],    &quot;meat&quot;: ['beef', 'pork', 'turkey', 'duck']}text = &quot;&quot;&quot;    Heat the oil in a large pan and add the Onion, celery and carrots.    Then, cook over a medium–low heat for 10 minutes, or until softened.    Add the courgette, garlic, red peppers and oregano and cook for 2–3 minutes.    Later, add some oranges and chickens. &quot;&quot;&quot;nlp = spacy.load(&quot;en_core_web_md&quot;, disable=[&quot;ner&quot;])nlp.add_pipe(    &quot;concise_concepts&quot;,    config={        &quot;data&quot;: data,        &quot;ent_score&quot;: True,  # Entity Scoring section        &quot;verbose&quot;: True,        &quot;exclude_pos&quot;: [&quot;VERB&quot;, &quot;AUX&quot;],        &quot;exclude_dep&quot;: [&quot;DOBJ&quot;, &quot;PCOMP&quot;],        &quot;include_compound_words&quot;: False,        &quot;json_path&quot;: &quot;./fruitful_patterns.json&quot;,        &quot;topn&quot;: (100,500,300)    },)doc = nlp(text)options = {    &quot;colors&quot;: {&quot;fruit&quot;: &quot;darkorange&quot;, &quot;vegetable&quot;: &quot;limegreen&quot;, &quot;meat&quot;: &quot;salmon&quot;},    &quot;ents&quot;: [&quot;fruit&quot;, &quot;vegetable&quot;, &quot;meat&quot;],}ents = doc.entsfor ent in ents:    new_label = f&quot;{ent.label_} ({ent._.ent_score:.0%})&quot;    options[&quot;colors&quot;][new_label] = options[&quot;colors&quot;].get(ent.label_.lower(), None)    options[&quot;ents&quot;].append(new_label)    ent.label_ = new_labeldoc.ents = entsdisplacy.render(doc, style=&quot;ent&quot;, options=options)```![](https://raw.githubusercontent.com/Pandora-Intelligence/concise-concepts/master/img/example.png)## StandaloneThis might be useful when iterating over few_shot training data when not wanting to reload larger models continuously.Note that, [custom embedding models](#custom-embedding-models) are passed via `model`.```pythonimport gensimimport spacyfrom concise_concepts import Conceptualizermodel = gensim.downloader.load(&quot;fasttext-wiki-news-subwords-300&quot;)nlp = spacy.load(&quot;en_core_web_sm&quot;)data = {    &quot;disease&quot;: [&quot;cancer&quot;, &quot;diabetes&quot;, &quot;heart disease&quot;, &quot;influenza&quot;, &quot;pneumonia&quot;],    &quot;symptom&quot;: [&quot;headache&quot;, &quot;fever&quot;, &quot;cough&quot;, &quot;nausea&quot;, &quot;vomiting&quot;, &quot;diarrhea&quot;],}conceptualizer = Conceptualizer(nlp, data, model)conceptualizer.nlp(&quot;I have a headache and a fever.&quot;).entsdata = {    &quot;disease&quot;: [&quot;cancer&quot;, &quot;diabetes&quot;],    &quot;symptom&quot;: [&quot;headache&quot;, &quot;fever&quot;],}conceptualizer = Conceptualizer(nlp, data, model)conceptualizer.nlp(&quot;I have a headache and a fever.&quot;).ents```# Configuration## Matching Pattern RulesA general introduction about the usage of matching patterns in the [usage section](#usage).### Customizing Matching Pattern RulesEven though the baseline parameters provide a decent result, the construction of these matching rules can be customized via the config passed to the spaCy pipeline. - `exclude_pos`: A list of POS tags to be excluded from the rule-based match. - `exclude_dep`: A list of dependencies to be excluded from the rule-based match. - `include_compound_words`:  If True, it will include compound words in the entity. For example, if the entity is &quot;New York&quot;, it will also include &quot;New York City&quot; as an entity. - `case_sensitive`: Whether to match the case of the words in the text.### Analyze Matching Pattern RulesTo motivate actually looking at the data and support interpretability, the matching patterns that have been generated are stored as `./main_patterns.json`. This behavior can be changed by using the `json_path` variable via the config passed to the spaCy pipeline.## Fuzzy matching using `spaczz` - `fuzzy`: A boolean value that determines whether to use fuzzy matching```pythondata = {    &quot;fruit&quot;: [&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;],    &quot;vegetable&quot;: [&quot;broccoli&quot;, &quot;spinach&quot;, &quot;tomato&quot;],    &quot;meat&quot;: [&quot;beef&quot;, &quot;pork&quot;, &quot;fish&quot;, &quot;lamb&quot;]}nlp.add_pipe(&quot;concise_concepts&quot;, config={&quot;data&quot;: data, &quot;fuzzy&quot;: True})```## Most Similar Word Expansion- `topn`: Use a specific number of words to expand over.```pythondata = {    &quot;fruit&quot;: [&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;],    &quot;vegetable&quot;: [&quot;broccoli&quot;, &quot;spinach&quot;, &quot;tomato&quot;],    &quot;meat&quot;: [&quot;beef&quot;, &quot;pork&quot;, &quot;fish&quot;, &quot;lamb&quot;]}topn = [50, 50, 150]assert len(topn) == lennlp.add_pipe(&quot;concise_concepts&quot;, config={&quot;data&quot;: data, &quot;topn&quot;: topn})```## Entity Scoring- `ent_score`: Use embedding based word similarity to score entities against their groups```pythonimport spacyimport concise_conceptsdata = {    &quot;ORG&quot;: [&quot;Google&quot;, &quot;Apple&quot;, &quot;Amazon&quot;],    &quot;GPE&quot;: [&quot;Netherlands&quot;, &quot;France&quot;, &quot;China&quot;],}text = &quot;&quot;&quot;Sony was founded in Japan.&quot;&quot;&quot;nlp = spacy.load(&quot;en_core_web_lg&quot;)nlp.add_pipe(&quot;concise_concepts&quot;, config={&quot;data&quot;: data, &quot;ent_score&quot;: True, &quot;case_sensitive&quot;: True})doc = nlp(text)print([(ent.text, ent.label_, ent._.ent_score) for ent in doc.ents])# output## [('Sony', 'ORG', 0.5207586), ('Japan', 'GPE', 0.7371268)]```## Custom Embedding Models- `model_path`: Use custom `sense2vec.Sense2Vec`, `gensim.Word2vec` `gensim.FastText`, or `gensim.KeyedVectors`, or a pretrained model from [gensim](https://radimrehurek.com/gensim/downloader.html) library or a custom model path. For using a `sense2vec.Sense2Vec` take a look [here](https://github.com/explosion/sense2vec#pretrained-vectors).- `model`: within [standalone usage](#standalone), it is possible to pass these models directly.```pythondata = {    &quot;fruit&quot;: [&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;],    &quot;vegetable&quot;: [&quot;broccoli&quot;, &quot;spinach&quot;, &quot;tomato&quot;],    &quot;meat&quot;: [&quot;beef&quot;, &quot;pork&quot;, &quot;fish&quot;, &quot;lamb&quot;]}# model from https://radimrehurek.com/gensim/downloader.html or path to local filemodel_path = &quot;glove-wiki-gigaword-300&quot;nlp.add_pipe(&quot;concise_concepts&quot;, config={&quot;data&quot;: data, &quot;model_path&quot;: model_path})````</longdescription>
</pkgmetadata>