<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![N|Python](https://www.python.org/static/community_logos/python-powered-w-100x40.png)](https://www.python.org)[![CircleCI](https://circleci.com/gh/fusion-energy/cad_to_h5m/tree/main.svg?style=svg)](https://circleci.com/gh/fusion-energy/cad_to_h5m/tree/main) [![CI with docker build](https://github.com/fusion-energy/cad_to_h5m/actions/workflows/ci_with_docker_build.yml/badge.svg)](https://github.com/fusion-energy/cad_to_h5m/actions/workflows/ci_with_docker_build.yml)[![PyPI](https://img.shields.io/pypi/v/cad-to-h5m?color=brightgreen&amp;label=pypi&amp;logo=grebrightgreenen&amp;logoColor=green)](https://pypi.org/project/cad-to-h5m/)&lt;!-- can't report coverage as cubit init changes scope[![codecov](https://codecov.io/gh/fusion-energy/cad_to_h5m/branch/main/graph/badge.svg)](https://codecov.io/gh/fusion-energy/cad_to_h5m) --&gt;[![docker-publish-release](https://github.com/fusion-energy/cad_to_h5m/actions/workflows/docker_publish.yml/badge.svg)](https://github.com/fusion-energy/cad_to_h5m/actions/workflows/docker_publish.yml)This is a minimal Python package that provides both **command line** and**API** interfaces for converting **multiple** CAD files (STP and SAT format)into a DAGMC h5m file using the Cubit Python API.This is useful for creating the DAGMC geometry for use in compatible neutronicscodes such as OpenMC, FLUKA and MCNP.The geometry is tagged wih material names, optional imprinted and mergingduring the process which can speed up particle transport.&lt;!-- # Command line usagePerhaps the most common use of this program is to convert a STP file intoDAGMC geometry.```bashcad-to-h5m -i part1.stp -o dagmc.h5m -t mat:1 -c /opt/Coreform-Cubit-2021.5/bin/```- the ```-i``` or ```--input``` argument specifies the input CAD filename(s)- the ```-o``` or ```--output``` argument specifies the output h5m filename- the ```-t``` or ```--tags``` argument specifies the tags to apply to the CAD volumes.- the ```-c``` or ```--cubit``` argument specifies the path to the Cubit python3 folder- the ```-v``` or ```--verbose``` argument enables (true) or disables (false) the printing of additional detailsMultiple STP or SAT files can also be combined and converted into a DAGMCgeometry. This example combines two STP files into a single geometry withseparate material tags for each STP file and saves the result as a h5m file.```bashcad-to-h5m -i part1.stp part2.stp -o dagmc.h5m -t mat:1 mat:2 -c /opt/Coreform-Cubit-2021.5/bin/```It is also possible to convert .sat files in the following way.```bashcad-to-h5m -i part1.sat -o dagmc.h5m -t mat:1 -c /opt/Coreform-Cubit-2021.5/bin/``` --&gt;# InstallationThe package is available via the PyPi package manager and the recommendedmethod of installing is via pip.```bashpip install cad_to_h5m```In addition [Cubit](https://coreform.com/products/coreform-cubit/) and the [Svalinn Plugin](https://github.com/svalinn/Cubit-plugin) needs to beinstalled to make full use of this package.# Python API usageCreating a h5m file from a single STP file called ```part1.stp``` and applyinga material tag to the volume.```pythonfrom cad_to_h5m import cad_to_h5mcad_to_h5m(    files_with_tags=[{'cad_filename':'part1.stp', 'material_tag':'m1'}],    h5m_filename='dagmc.h5m',    cubit_path='/opt/Coreform-Cubit-2021.5/bin/')```Creating a h5m file from two STP files called ```part1.stp``` and ```part2.stp```.Both parts have distinct material tag applied to them and the result is outputas a h5m file with the filename dagmc.h5m.```pythonfrom cad_to_h5m import cad_to_h5mcad_to_h5m(    files_with_tags=[        {'cad_filename':'part1.stp', 'material_tag':'m1'},        {'cad_filename':'part2.stp', 'material_tag':'m2'}    ],    h5m_filename='dagmc.h5m',    cubit_path='/opt/Coreform-Cubit-2021.5/bin/')```Creating a h5m file from a single SAT is a similar process. Note the .sat fileextension.```pythonfrom cad_to_h5m import cad_to_h5mcad_to_h5m(    files_with_tags=[{'cad_filename':'part1.sat', 'material_tag':'m1'}],    h5m_filename='dagmc.h5m',    cubit_path='/opt/Coreform-Cubit-2021.5/bin/')```Creating a tet mesh files compatible with the OpenMC / DAGMC Unstructured meshformat is also possible. Another key called ```tet_mesh``` to the ```files_with_tags``` dictionary will trigger the meshing of that CAD file.The value of the key will be passed to the Cubit mesh command as an instruction.The following command will produce a ```unstructured_mesh_file.exo```file that can then be used in DAGMC compatible neutronics codes. There are examples[1](https://docs.openmc.org/en/latest/examples/unstructured-mesh-part-i.html)[2](https://docs.openmc.org/en/latest/examples/unstructured-mesh-part-ii.html) for the use of unstructured meshes in OpenMC.```pythonfrom cad_to_h5m import cad_to_h5mcad_to_h5m(    files_with_tags=[        {            'cad_filename':'part1.sat',            'material_tag':'m1',            'tet_mesh': 'size 0.5'        }    ],    h5m_filename='dagmc.h5m',    cubit_path='/opt/Coreform-Cubit-2021.5/bin/'    exo_filename='unstructured_mesh_file.exo')```Use if ```exo``` files requires OpenMC to be compiled with LibMesh. OpenMC alsoaccepts DAGMC tet meshes made with MOAB which is another option. The followingexample creates a ```cub``` file that contains a mesh. The MOAB tool ```mbconvert``` is then used to extract the tet mesh and save it as a ```h5m```file which cna be used in OpenMC as shown in the OpenMC [examples](https://docs.openmc.org/en/stable/examples/unstructured-mesh-part-i.html)```pythonfrom cad_to_h5m import cad_to_h5mcad_to_h5m(    files_with_tags=[        {            'cad_filename':'part1.sat',            'material_tag':'m1',            'tet_mesh': 'size 0.5'        }    ],    h5m_filename='dagmc.h5m',    cubit_path='/opt/Coreform-Cubit-2021.5/bin/',    cubit_filename='unstructured_mesh_file.cub')```The ```cub``` file produced contains a tet mesh as well as the faceted geometry.The tet mesh can be extracted and converted to another ```h5m``` file for use inOpenMC. MOAB is needed to convert the file and includes the command line tool```mbconvert```, MOAB can be installed into a Conda environment with:```conda install -c conda-forge moab```Then ```mbconvert``` can be used to extract and convert the tet mesh from the```cub``` file into a ```h5m``` file.```bashmbconvert unstructured_mesh_file.cub unstructured_mesh_file.h5m```Scaling geometry is also possible. This is useful as particle transport codesoften make use of cm as the default unit. CAD files typically appear in mm asthe default limit. Some CAD packages ignore units while others make use of them.The h5m files are assumed to be in cm by particle transport codes so often itis necessary to scale up or down the geometry. This can be done by addinganother key called ```scale``` and a value to the ```files_with_tags```dictionary. This example multiplies the geometry by 10.```pythonfrom cad_to_h5m import cad_to_h5mcad_to_h5m(    files_with_tags=[        {            'cad_filename':'part1.sat',            'material_tag':'m1',            'scale': 10        }    ],    h5m_filename='dagmc.h5m',)```Assigning a material to the implicit complement is also possible. This can be useful on large complex geometries where boolean operations can result in robustness issues. This is implemented by assigning the desired material tag of the implicit complement to the optional ```implicit_complement_material_tag``` argument. Defaults to vacuum.```pythonfrom cad_to_h5m import cad_to_h5mcad_to_h5m(    files_with_tags=[        {            'cad_filename':'part1.sat',            'material_tag':'m1',        }    ],    h5m_filename='dagmc.h5m',    implicit_complement_material_tag = 'm2')```</longdescription>
</pkgmetadata>