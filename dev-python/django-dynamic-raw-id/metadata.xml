<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/django-dynamic-raw-id.svg    :target: https://pypi.org/project/django-dynamic-raw-id/.. image:: https://github.com/lincolnloop/django-dynamic-raw-id/actions/workflows/test.yml/badge.svg    :target: https://travis-ci.org/lincolnloop/django-dynamic-raw-id----=====================django-dynamic-raw-id=====================A Django admin raw_id_fields widget replacement that handles display of anobject's string value on change and can be overridden via a template.See this example:.. image:: http://d.pr/i/10GtM.png    :target: http://d.pr/i/1kv7d.pngCompatibility Matrix:============================== === === === ====Py/Dj     3.7 3.8 3.9 3.10========= === === === ====3.2         ✓   ✓   ✓   ✓4.0         ✓   ✓   ✓   ✓========= === === === ====Installation============Install the package with ``pip``:.. code-block:: bash    $ pip install django-dynamic-raw-idPut ``dynamic_raw_id`` to your list of ``INSTALLED_APPS``:.. code-block:: python    INSTALLED_APPS = (        # ... other apps        'dynamic_raw_id',    )And add the ``urlpattern``. Make sure its listed *before* the generic``admin.site.urls`` urlpattern include:.. code-block:: python    urlpatterns = [        # ...        path('admin/dynamic_raw_id/', include('dynamic_raw_id.urls')),        path(&quot;admin/&quot;, admin.site.urls),    ]``dynamic_raw_id`` comes with some static files so don't forget to run``manage.py collectstatic``.Usage=====To start using django-dynamic-raw-id in your application all you need to do isimplement ``DynamicRawIDMixin`` in your  ``ModelAdmin`` class and add the desiredfields to a list of ``dynamic_raw_id_fields``:.. code-block:: python    from dynamic_raw_id.admin import DynamicRawIDMixin    class UserProfileAdmin(DynamicRawIDMixin, admin.ModelAdmin):        dynamic_raw_id_fields = ('user',)You can use dynamic_raw_id widgets in a Admin filter as well:.. code-block:: python    from dynamic_raw_id.admin import DynamicRawIDMixin    from dynamic_raw_id.filters import DynamicRawIDFilter    class UserProfileAdmin(DynamicRawIDMixin, admin.ModelAdmin):       list_filter = (           ('dynamic_raw_id_fk', DynamicRawIDFilter),       )Customizing the value of the dynamic widget===========================================The coolest feature of django-dynamic-raw-id is the ability to customize the outputof the value displayed alongside the ``DynamicRawIDWidget``.  There is a basicimplementation if all you want is your object's ``__unicode__`` value. To changethe value displayed all you need to do is implement the correct template.django-dynamic-raw-id looks for this template structure ``dynamic_raw_id/&lt;app&gt;/&lt;model&gt;.html``and ``dynamic_raw_id/&lt;app&gt;/multi_&lt;model&gt;.html`` (for multi-value lookups).For instance, if I have a blog post with a ``User`` dynamic_raw_id field that I wantdisplay as ``Firstname Lastname``, I would create the template``dynamic_raw_id/auth/user.html`` with:.. code-block:: html+django    &lt;span&gt;{{ object.0.first_name }} {{ object.0.last_name }}&lt;/span&gt;A custom admin URL prefix=========================If you have your admin *and* the dynamic_raw_id scripts located on a differentprefix than ``/admin/dynamic_raw_id/`` you need adjust the ``DYNAMIC_RAW_ID_MOUNT_URL``JS variable.Example:.. code-block::    # In case the app is setup at /foobar/dynamic_raw_id/    url(r'^foobar/dynamic_raw_id/', include('dynamic_raw_id.urls')),    # Provide a    &lt;script&gt;        window.DYNAMIC_RAW_ID_MOUNT_URL = &quot;{% url &quot;admin:index&quot; %}&quot;;    &lt;/script&gt;An ideal place is the admin ``base_site.html`` template. Full example:.. code-block:: html+django    {% extends &quot;admin/base.html&quot; %}    {% block title %}{{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}    {% block extrahead %}      {{ block.super }}      &lt;script&gt;        window.DYNAMIC_RAW_ID_MOUNT_URL = &quot;{% url &quot;admin:index&quot; %}&quot;;      &lt;/script&gt;    {% endblock %}    {% block branding %}    &lt;h1 id=&quot;site-name&quot;&gt;&lt;a href=&quot;{% url 'admin:index' %}&quot;&gt;{{ site_header|default:_('Django administration') }}&lt;/a&gt;&lt;/h1&gt;    {% endblock %}    {% block nav-global %}{% endblock %}Testing and Local Development=============================The testsuite uses Selenium to do frontend tests, we require Firefox andgeckodriver_ to be installed. You can install geckodriver on OS X withHomebrew:.. code-block:: bash    $ brew install geckodriverRun the testsuite in your local environment using:.. code-block:: bash    $ cd django-dynamic-raw-id/    $ pipenv install --dev    $ pipenv run pytestOr use tox to test against various Django and Python versions:.. code-block:: bash    $ tox -rYou can also invoke the test suite or other 'manage.py' commands by callingthe ``django-admin`` tool with the test app settings:.. code-block:: bash    $ cd django-dynamic-raw-id/    $ pipenv install --dev    $ pipenv run pytestThis also allows you to run the internal testing app in a testserver, topreview a sample of what django-dynamic-raw-id is doing:.. code-block:: bash    $ pipenv run django-admin migrate    $ pipenv run django-admin createsuperuser    $ pipenv run django-admin runserver.. note:: The default settings file is set in the ``.env`` file which   pipenv automatically exposes:.. code-block:: bash    DJANGO_SETTINGS_MODULE=dynamic_raw_id.tests.testapp.settings.. _geckodriver: https://github.com/mozilla/geckodriver=========Changelog=========v3.0 (2022-03-20)=======================- Django 4.0 compatibility and tests.- Requires Django 3.2 or up.- Requires Python 3.7 or up.- *Note:* You may now need to change the order and put the dynamic-raw-id  include before the generic admin include. See Readme for details.v2.8 (2020-12-02)=======================- Django 3.1 compatibility and tests.v2.7 (2020-05-02)=======================- Django 3.0 compatibility and tests.v2.6 (2019-06-21)=================- BACKWARDS INCOMPATIBLE: Dropped support for Django &lt;1.11.- BACKWARDS INCOMPATIBLE: Dropped support for Python 3.4.- Django 2.2 compatibility and tests.- General code cleanup.- Pipenv support for local development.- Some visual fixes around icons and alignment.v2.5 (2018-12-09)=================- Django 2.1 compatibility and tests.v2.4 (2018-04-09)=================- Fixes missing icons in Admin views.- Fixes missing JS handling when using a custom /admin/ url.v2.3 (2018-01-18)=================- BACKWARDS INCOMPATIBLE: Renamed the project to `django-dynamic-raw-id`.  to reflect what it's  actually doing.- Fixed glass lookup icon in Django 1.10 and below.- Specific ordering of media asset loading.v1.2 (2018-01-17)=================- Multiple fixes and enhancements.- Full Selenium based testsuite.- Django 2.0 and Python 3 compatibility.- pipenv support.</longdescription>
</pkgmetadata>