<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># secimport[![Upload Python Package](https://github.com/avilum/secimport/actions/workflows/python-publish.yml/badge.svg)](https://github.com/avilum/secimport/actions/workflows/python-publish.yml)## The Tailor-Made Sandbox for Your Application`secimport` is production-oriented sandbox toolkit.&lt;br&gt;It traces your code, and runs an executable that allows only the same syscalls per module.- ðŸš€ Trace which syscalls are called by each module in your code.  - secimport uses USDT (Userland Statically Defined Tracing) probes in the runtime using eBPF or dtrace instrumentation scripts.- ðŸš€ Control the execution or third-party and open-source packages you can't fully control.  - Avoid incidents like &lt;a href=&quot;https://en.wikipedia.org/wiki/Log4Shell&quot;&gt;log4shell&lt;/a&gt;.- ðŸš€ Prevent code execution, reduce the risk of supply chain attacks.  - Trace the syscalls flow of your application at the user-space/os/kernel level and per module.  - Run your application while enforcing syscalls per module.  - Upon violation of the policy, it can log, stop, or kill the process.- ðŸš€ Has negligible performance impact and is production-ready thanks to eBPF. Check out the [Performance](https://github.com/avilum/secimport/wiki/Performance-Benchmarks) benchmarks.secimport is a production-oriented sandbox toolkit that traces your code and runs an executable that allows only the same syscalls per module.ðŸš€ Trace which syscalls are called by each module in your code.secimport uses USDT (Userland Statically Defined Tracing) probes in the runtime using eBPF or dtrace instrumentation scripts.ðŸš€ Control the execution of third-party and open-source packages you can't fully control.Avoid incidents like log4shell.ðŸš€ Prevent code execution, reduce the risk of supply chain attacks.Trace the syscalls flow of your application at the user-space/os/kernel level and per module.Run your application while enforcing syscalls per module.Upon violation of the policy, it can log, stop, or kill the process.ðŸš€ Has negligible performance impact and is production-ready thanks to eBPF. Check out the Performance Benchmarks.## InstallationTested on Ubuntu, Debian, Rocky (Linux x86/AMD/ARM) and MacOS in (x86/M1).&lt;br&gt;### With DockerFor quicker evaluation, we recommend using the &lt;a href=&quot;#Docker&quot;&gt;Docker&lt;/a&gt; image instead of self-installing.&lt;br&gt;- Build and run the Docker container with a custom kernel that matches your existing OS kernel version:  ```  cd docker/ &amp;&amp; ./build.sh &amp;&amp; ./run.sh  ```  A temporary container will be created, and you will be logged in as the root user.### Without Docker1. Install python with USDT probes by &lt;a href=&quot;https://github.com/avilum/secimport/wiki/Installation#python-interpreter-requirements&quot;&gt;configuring it with '--dtrace'&lt;/a&gt;2. Install one of the backends: &lt;a href=&quot;https://github.com/avilum/secimport/wiki/Installation&quot;&gt;eBPF or DTrace&lt;/a&gt;.3. Install secimport  - Install from pypi    - ```      python3 -m pip install secimport      ```  - Install from source    - ```      git clone https://github.com/avilum/secimport.git &amp;&amp; cd secimport      python3 -m pip install poetry &amp;&amp; python3 -m poetry install      ```## UsageTo sandbox your program using the CLI, start a bpftrace program that logs all the syscalls for all the modules in your application into a file with the secimport trace command. Once you have covered the logic you would like to sandbox, hit CTRL+C or CTRL+D, or wait for the program to finish. Then, build a sandbox from the trace using the secimport build command, and run the sandbox with the secimport run command.```shellNAME    SecImport - A toolkit for Tracing and Securing Python Runtime using USDT probes and eBPF/DTraceSYNOPSIS    cli.py COMMANDDESCRIPTION    QUICK START:            &gt;&gt;&gt; secimport interactive    EXAMPLES:        1. trace:            $  secimport trace            $  secimport trace -h            $  secimport trace_pid 123            $  secimport trace_pid -h        2. build:            $ secimport build            $ secimport build -h        3. run:            $  secimport run            $  secimport run --entrypoint my_custom_main.py            $  secimport run --entrypoint my_custom_main.py --stop_on_violation=true            $  secimport run --entrypoint my_custom_main.py --kill_on_violation=true            $  secimport run --sandbox_executable /path/to/my_sandbox.bt --pid 2884            $  secimport run --sandbox_executable /path/to/my_sandbox.bt --sandbox_logfile my_log.log            $  secimport run -hCOMMANDS    COMMAND is one of the following:     build     interactive     run       Run a python process inside the sandbox.     trace       Traces     trace_pid       Traces a running process by pid. It might require sudo privilleges on some hosts.```## Stop on violation ```root@1bc0531d91d0:/workspace# secimport run  --stop_on_violation=true &gt;&gt;&gt; secimport run[WARNING]: This sandbox will send SIGSTOP to the program upon violation. RUNNING SANDBOX... ['./sandbox.bt', '--unsafe', ' -c ', '/workspace/Python-3.10.0/python', 'STOP']Attaching 4 probes...Python 3.10.0 (default, Apr 28 2023, 11:32:40) [GCC 9.4.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import os&gt;&gt;&gt; os.system('ps')[SECURITY PROFILE VIOLATED]: &lt;stdin&gt; called syscall 56 at depth 8022^^^ STOPPING PROCESS 85918 DUE TO SYSCALL VIOLATION ^^^PROCESS 85918 STOPPED.```## Kill on violation```root@ee4bc99bb011:/workspace# secimport run --kill_on_violation &gt;&gt;&gt; secimport run[WARNING]: This sandbox will send SIGKILL to the program upon violation. RUNNING SANDBOX... ['./sandbox.bt', '--unsafe', ' -c ', '/workspace/Python-3.10.0/python', 'KILL']import osoAttaching 4 probes...sPython 3.10.0 (default, Apr 28 2023, 11:32:40) [GCC 9.4.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import os&gt;&gt;&gt; os.system('ps')[SECURITY PROFILE VIOLATED]: &lt;stdin&gt; called syscall 56 at depth 8022^^^ KILLING PROCESS 86466 DUE TO SYSCALL VIOLATION ^^^KILLED. SANDBOX EXITED;```## Dynamic profiling - trace, build sandbox, run.```shellroot@1fa3d6f09989:/workspace# secimport interactiveLet's create our first tailor-made sandbox with secimport!- A python shell will be opened- The behavior will be recorded.OK? (y): y &gt;&gt;&gt; secimport traceTRACING: ['/workspace/secimport/profiles/trace.bt', '-c', '/workspace/Python-3.10.0/python', '-o', 'trace.log']                        Press CTRL+D to stop the trace;Python 3.10.0 (default, Mar 19 2023, 08:34:46) [GCC 9.4.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import this&gt;&gt;&gt; TRACING DONE; &gt;&gt;&gt; secimport buildSECIMPORT COMPILING...CREATED JSON TEMPLATE:  traced_modules.jsonCREATED YAML TEMPLATE:  traced_modules.yamlcompiling template traced_modules.yamlDTRACE SANDBOX:  traced_modules.dBPFTRCE SANDBOX:  sandbox.bt```Now, let's run the sandbox.```python- Run the same commands as before, they should run without any problem;.- Do something new in the shell; e.g:   &gt;&gt;&gt; __import__(&quot;os&quot;).system(&quot;ps&quot;)        OK? (y): y &gt;&gt;&gt; secimport run RUNNING SANDBOX... ['./sandbox.bt', '--unsafe', ' -c ', '/workspace/Python-3.10.0/python']Attaching 5 probes...REGISTERING SYSCALLS...STARTEDPython 3.10.0 (default, Mar 19 2023, 08:34:46) [GCC 9.4.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import this&gt;&gt;&gt; import os[SECIMPORT VIOLATION]: &lt;stdin&gt; called syscall ioctl at depth 0[SECIMPORT VIOLATION]: &lt;stdin&gt; called syscall ioctl at depth 0```For more detailed usage instructions, see the [Command-Line Usage](https://github.com/avilum/secimport/wiki/Command-Line-Usage) page.## Python APIYou can also use `secimport` by replacing `import` with `secimport.secure_import` for selected modules. See the [Python Imports](examples/python_imports/) example for more details.## DockerThe quickest way to evaluate `secimport` is to use our [Docker container](docker/README.md), which includes `bpftrace` (`ebpf`) and other plug-and-play examples.## ExamplesThe [Sandbox Examples](https://github.com/avilum/secimport/wiki/Sandbox-Examples) page contains basic and advanced real-world examples.## ContributingFor information on how to contribute to `secimport`, see the [Contributing](https://github.com/avilum/secimport/blob/master/docs/CONTRIBUTING.md) guide.## RoadmapSee the [Roadmap](https://github.com/avilum/secimport/blob/master/docs/ROADMAP.md) for the planned features and development milestones.## ChangelogSee the [Changelog](https://github.com/avilum/secimport/blob/master/docs/CHANGELOG.md) for development progress and existing features.</longdescription>
</pkgmetadata>