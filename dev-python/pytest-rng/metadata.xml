<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**********pytest-rng**********``pytest-rng`` provides fixtures forensuring &quot;randomness&quot; in your tests is reproduciblefrom one run to the next.It also allows the seed for all tests to be changed if requested,to help ensure that test successes are not dependent onparticular random number seeds.- Use the ``rng`` fixture to get a pre-seeded random number generator (RNG)  that exposes NumPy's `~numpy.random.mtrand.RandomState` interface.- Use the ``seed`` fixture to get an integer seed  that can be used to initialize your own RNG.The following example prints the same four random numbersevery time the test is run... code-block:: python   import numpy as np   def test_rectification(rng, seed):       print(rng.uniform(-1, 1, size=3))       print(seed)To use these fixtures, install with.. code-block:: bash   pip install pytest-rngOnce installed, you can use these fixtures like any other fixture:add ``rng`` or ``seed`` to the arguments of a test function or class.Seed generation===============For the ``seed`` fixture, we generate a seed by doing the following:1. Concatenate the test's ``nodeid`` and a ``salt`` value, if provided.2. Hash that string to yield an integer seed.For the ``rng`` fixture, we also add the string ``&quot;rng&quot;`` to the ``salt``value before generating the seed as above.The seed is used to instantiate a `~numpy.random.mtrand.RandomState`,which is returned... note:: We add ``&quot;rng&quot;`` to the salt to ensure that random numbers          are different when using the ``rng`` fixture          and when manually instantiating a ``RandomState``          with the ``seed`` fixture.salt====``salt`` is a string that is added to the test's ``nodeid``in order to change the seed for all tests.It is advantageous to change seeds regularly to ensure thatyour test suite is robust to different seeds.The salt value can be specified in a configuration filelike ``setup.cfg`` or ``pytest.ini``... code-block:: ini   [tool:pytest]   rng_salt = v0.3.0The salt value can also be specified through the command line... code-block:: bash   pytest --rng-salt &quot;v0.4.0&quot;The salt value passed through the command line takes precedenceover the value set in the configuration fileso that you can change seeds on-the-fly.~~~~~See the full`documentation &lt;https://www.nengo.ai/pytest-rng&gt;`__for more details.***************Release History***************.. Changelog entries should follow this format:   version (release date)   ======================   **section**   - One-line description of change (link to Github issue/PR).. Changes should be organized in one of several sections:   - Added   - Changed   - Deprecated   - Removed   - Fixed1.0.0 (August 8, 2019)======================Initial release of ``pytest-rng``!Thanks to all of the contributors for making this possible!</longdescription>
</pkgmetadata>