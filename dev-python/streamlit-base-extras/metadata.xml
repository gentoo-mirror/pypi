<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Streamlit ExtrasThese are some components and modules designed to make working with streamlit easier.I had a project that required some of these parts, I tried some other community projects that were similar,but none of them had the features I required, so I ended up rewriting my own implementations of them.## Installation and RequirementsInstall from PyPI with pip:`python3 -m pip install streamlit-base-extras`Requires Streamlit 1.13.0+ and Python 3.9+,will consider releasing versions compatible with older Python3 if people show interest.Some helper functions require `streamlit-javascript` too.## The modules#### RouterPage router with various features.```Pythonimport randomimport streamlit as stfrom streamlitextras.router import get_routerrouter = Nonedef main():    global router    pages = {        &quot;main&quot;: main_page,        &quot;other&quot;: another_page,    }    st.set_page_config(        page_title=&quot;MyApp&quot;,        layout=&quot;wide&quot;,        initial_sidebar_state=&quot;auto&quot;    )    router = get_router()    router.delayed_init()  # This is required to make sure current Router stays in session state    computed_chance = random.randrange(10)    if computed_chance &gt; 1:        router.route()    else:        router.route(&quot;other&quot;, computed_chance)def main_page(page_state = None):    st.write(&quot;This is the main.&quot;)def another_page(page_state = None):    st.write(f&quot;This is another page, you're lucky to be here. Number {page_state} lucky.&quot;)if __name__ == &quot;__main__&quot;:    main()```See the [package readme](streamlitextras/router) or [API docs](https://streamlitextras.readthedocs.io/en/latest/api/streamlitextras.html) for more details.#### Cookie ManagerComponent function to manage in-browser cookies from streamlit.```Pythonimport streamlit as stfrom streamlitextras.cookiemanager import get_cookie_managercookie_manager = Nonedef main():    global cookie_manager    cookie_manager = get_cookie_manager()    cookie_manager.delayed_init() # Makes sure CookieManager stays in st.session_state    cookie_manager.set(&quot;my_cookie_name&quot;, &quot;I'm a cookie!&quot;)    my_cookie_value = cookie_manager.get(&quot;my_cookie_name&quot;)    print(my_cookie_value) # &quot;I'm a cookie&quot;    my_cookies = cookie_manager.get_all()    print(my_cookies) # {&quot;my_cookie_name&quot;: &quot;I'm a cookie!&quot;}    cookie_manager.delete(&quot;my_cookie_name&quot;)    my_cookie_value = cookie_manager.get(&quot;my_cookie_name&quot;)    print(my_cookie_value) # Noneif __name__ == &quot;__main__&quot;:    main()```See the [package readme](streamlitextras/cookiemanager) or [API docs](https://streamlitextras.readthedocs.io/en/latest/api/streamlitextras.html) for more details.#### AuthenticatorAuthentication module that creates streamlit register/login forms, and uses firebase auth to register and manage users.Can also be inherited to use a custom authentication provider.```Pythonimport streamlit as stfrom streamlitextras.authenticator import get_authauth = Nonedef main():    global auth    auth = get_auth(&quot;my_cookie_name&quot;)    auth.delayed_init() # This is required to make sure current Authenticator stays in session state    auth_status = auth.auth_status    user = auth.current_user    if auth_status and user:        st.write(f&quot;Welcome {user.displayName}!&quot;)    else:        auth_page()def auth_page():    info_box = st.container()    if auth.current_form == &quot;login&quot; or not auth.current_form:        user, res, error = auth.login(&quot;Login&quot;)    if auth.current_form == &quot;register&quot;:        res, error = auth.register_user(&quot;Register&quot;)    elif auth.current_form == &quot;reset_password&quot;:        res, error = auth.reset_password(&quot;Request password change email&quot;)    if res:        info_box.info(&quot;Success!&quot;)    if error:        info_box.error(error.message)if __name__ == &quot;__main__&quot;:    main()```See the [package readme](streamlitextras/authenticator) or [API docs](https://streamlitextras.readthedocs.io/en/latest/api/streamlitextras.html) for more details.#### ThreaderMakes spawning and working with `threading.Threads` with streamlit easy.```Pythonimport timeimport streamlit as stimport reruntriggerfrom streamlitextras.threader import lock, trigger_rerun, \                                     streamlit_thread, get_thread, \                                     last_trigger_timedef main():    thread_name = streamlit_thread(my_threaded_function, (5,))    st.write(&quot;This should be here before my_threaded_function() is done!&quot;)    st.button(&quot;Thread info&quot;, on_click=button_callback, args=(thread_name,))def button_callback(thread_name):    # Sometimes streamlit will trigger button callbacks when re-running,    # So we block them if we triggered a rerun recently    if last_trigger_time() &lt; 1:        return    my_thread = get_thread(thread_name)    st.write(my_thread) # threading.Threaddef my_threaded_function(time):    time.sleep(time)    with lock:        # Do something that might interfere with other threads,        # file operations or setting st.session_state        pass    print(f&quot;Thread done! I slept for {time} seconds.&quot;)if __name__ == &quot;__main__&quot;:    main()```See the [package readme](streamlitextras/threader) or [API docs](https://streamlitextras.readthedocs.io/en/latest/api/streamlitextras.html) for more details.#### LoggerImplementation of Loguru set up to work well with this package.```Pythonimport streamlit as stfrom streamlitextras.logger import logdef main():    log.debug(&quot;My app just started!&quot;)    st.write(&quot;My app&quot;)if __name__ == &quot;__main__&quot;:    main()```See the [package readme](streamlitextras/logger) or [API docs](https://streamlitextras.readthedocs.io/en/latest/api/streamlitextras.html) for more details.#### Other helpersSee the [API docs](https://streamlitextras.readthedocs.io/en/latest/api/streamlitextras.html) for a full list of functions and their usage in these files.###### streamlitextras.webutilsSome utility functions to run javascript, wrappers around various javascript routines,and some other browser related formatting utilities.```Pythonimport streamlit as stfrom streamlitextras.webutils import stxs_javascript, get_user_timezone, \                                    bytes_to_data_uri, trigger_downloaddef main():    # Returns tz database name can be used with pytz and datetime    timezone = get_user_timezone()    continent, city = timezone.split(&quot;/&quot;)    stxs_javascript(f&quot;&quot;&quot;alert(&quot;Hello person from {city}! Welcome to my streamlit app.&quot;);&quot;&quot;&quot;    uploaded_file = st.file_uploader(&quot;Upload a file&quot;)    if uploaded_file:        data_uri = bytes_to_data_uri(uploaded_file)        # Browser will prompt to save the file        trigger_download(data_uri, &quot;The file you just uploaded.renamed&quot;)if __name__ == &quot;__main__&quot;:    main()```See the [source code](streamlitextras/webutils.py).###### streamlitextras.helpersClass implementation that streamlines creating basic HTML elements with st.markdown,and some other useful functions.See the [source code](streamlitextras/helpers.py).###### streamlitextras.storageserviceHelper to interact with Google Cloud Storage with a service worker account.It has some basic wrapper functions to use the service account to manage buckets and blobs,as well as computing hashes from Python bytes objects that match gcloud blobs.See the [source code](streamlitextras/storageservice.py) and the [google python api reference](https://googleapis.dev/python/storage/latest/) for more.```Pythonimport streamlitextras.storageservice as storageservicewith open(&quot;my.file&quot;, &quot;rb&quot;) as f:    computed_md5_hash = storageservice.compute_bytes_md5hash(f.read())buckets = storageservice.get_buckets() # Returns an iterablelist_buckets = []for bucket in buckets:    list_buckets.append(buckets)buckets = list_bucketsblobs = get_blobs(buckets[0].name) # Returns an iterablelist_blobs = p[]for blob in blobs:    list_blobs.append(blob)blobs = list_blobsmy_file_blob = blobs[0] # my.fileassert my_file_blob.md5_hash == computed_md5_hash # True```You will need to set up a service worker on your google cloud project or firebase project,and add the details from its .json key to `.streamlit/secrets.toml````TOML[gcp_service_account]type = &quot;&quot;project_id = &quot;&quot;private_key_id = &quot;&quot;private_key = &quot;&quot;client_email = &quot;&quot;client_id = &quot;&quot;auth_uri = &quot;&quot;token_uri = &quot;&quot;auth_provider_x509_cert_url = &quot;&quot;client_x509_cert_url = &quot;&quot;```###### streamlitextras.utilsSome utility functions for Python development.See the [source code](streamlitextras/utils.py).</longdescription>
</pkgmetadata>