<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Formatter](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Build Status](https://github.com/Barbora-Data-Science/s3-path-wrangler/actions/workflows/main.yml/badge.svg)](https://github.com/Barbora-Data-Science/s3-path-wrangler/actions/workflows/main.yml)[![codecov](https://codecov.io/gh/Barbora-Data-Science/s3-path-wrangler/branch/main/graph/badge.svg?token=MJSSVCSFJV)](https://codecov.io/gh/Barbora-Data-Science/s3-path-wrangler)[![PyPI version](https://badge.fury.io/py/s3-path-wrangler.svg)](https://pypi.org/project/s3-path-wrangler/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/s3-path-wrangler)](https://pypi.org/project/s3-path-wrangler/)# DescriptionProvides S3 path manipulation, similar to PurePath in pathlib. S3Path is _only_ meant for path manipulation and does not implement any methods which interact with S3 itself.Avoiding S3 interaction means that a user can use their own boto3 session and are not forced to use the default one.For S3Path implementations that do path manipulation _and_ interaction, see [s3path](https://github.com/liormizr/s3path) instead.# InstallationThis is a pure python package, so it can be installed with `pip install s3-path-wrangler` or any other dependency manager.# UsageThis library provides a single (meant to be) immutable class - `S3Path`.Class features:```pythonfrom s3_path_wrangler.paths import S3Path# various options for creating path objectsfull_path = S3Path(&quot;s3://your-bucket/some/path/file.json&quot;)from_list = S3Path.from_parts([&quot;your-bucket&quot;, &quot;some&quot;, &quot;path&quot;, &quot;file.json&quot;], is_absolute=True)relative = S3Path(&quot;some/path/&quot;)relative_from_list = S3Path.from_parts([&quot;some&quot;, &quot;path&quot;]) # or is_absolute=False# convenient attributesassert full_path.parts == [&quot;your-bucket&quot;, &quot;some&quot;, &quot;path&quot;, &quot;file.json&quot;]assert full_path.is_absolute == Trueassert full_path.bucket == &quot;your-bucket&quot;assert full_path.key == &quot;some/path/file.json&quot;assert full_path.name == &quot;file.json&quot;assert full_path.parent == S3Path(&quot;s3://your-bucket/some/path&quot;)# paths are comparable to strings (directories will not have trailing slashes)assert S3Path.from_parts([&quot;some&quot;, &quot;path&quot;]) == &quot;some/path&quot;# paths can be manipulated via '/'assert relative / &quot;file.json&quot; == S3Path(&quot;some/path/file.json&quot;)```# DevelopmentThis library uses the [poetry](https://python-poetry.org/) package manager, which has to be installed before installingother dependencies. Afterwards, run `poetry install` to create a virtualenv and install all dependencies.[Black](https://github.com/psf/black) is used (and enforced via workflows) to format all code. Poetry will install itautomatically, but running it is up to the user. To format the entire project, run `black .`.To run tests, either activate the virtualenv via `poetry shell` and run `pytest ./tests`,or simply run `poetry run pytest ./tests`.# ContributingThis project uses the Apache 2.0 license and is maintained by the data science team @ Barbora. All contribution are welcome in the form of PRs or raised issues.</longdescription>
</pkgmetadata>