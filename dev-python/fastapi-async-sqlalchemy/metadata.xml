<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SQLAlchemy FastAPI middleware[![ci](https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;labelColor=005BBB)](https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;labelColor=005BBB)[![ci](https://github.com/h0rn3t/fastapi-async-sqlalchemy/workflows/ci/badge.svg)](https://github.com/h0rn3t/fastapi-async-sqlalchemy/workflows/ci/badge.svg)[![codecov](https://codecov.io/gh/h0rn3t/fastapi-async-sqlalchemy/branch/main/graph/badge.svg?token=F4NJ34WKPY)](https://codecov.io/gh/h0rn3t/fastapi-async-sqlalchemy)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![pip](https://img.shields.io/pypi/v/fastapi_async_sqlalchemy?color=blue)](https://pypi.org/project/fastapi-async-sqlalchemy/)[![Downloads](https://pepy.tech/badge/fastapi-async-sqlalchemy)](https://pepy.tech/project/fastapi-async-sqlalchemy)[![Updates](https://pyup.io/repos/github/h0rn3t/fastapi-async-sqlalchemy/shield.svg)](https://pyup.io/repos/github/h0rn3t/fastapi-async-sqlalchemy/)### DescriptionProvides SQLAlchemy middleware for FastAPI using AsyncSession and async engine.### Install```bash  pip install fastapi-async-sqlalchemy```### Important !!!If you use ```sqlmodel``` install ```sqlalchemy&lt;=1.4.41```### ExamplesNote that the session object provided by ``db.session`` is based on the Python3.7+ ``ContextVar``. This means thateach session is linked to the individual request context in which it was created.```pythonfrom fastapi import FastAPIfrom fastapi_async_sqlalchemy import SQLAlchemyMiddlewarefrom fastapi_async_sqlalchemy import db  # provide access to a database sessionfrom sqlalchemy import columnfrom sqlalchemy import tableapp = FastAPI()app.add_middleware(    SQLAlchemyMiddleware,    db_url=&quot;postgresql+asyncpg://user:user@192.168.88.200:5432/primary_db&quot;,    engine_args={              # engine arguments example        &quot;echo&quot;: True,          # print all SQL statements        &quot;pool_pre_ping&quot;: True, # feature will normally emit SQL equivalent to “SELECT 1” each time a connection is checked out from the pool        &quot;pool_size&quot;: 5,        # number of connections to keep open at a time        &quot;max_overflow&quot;: 10,    # number of connections to allow to be opened above pool_size    },)# once the middleware is applied, any route can then access the database session# from the global ``db``foo = table(&quot;ms_files&quot;, column(&quot;id&quot;))# Usage inside of a route@app.get(&quot;/&quot;)async def get_files():    result = await db.session.execute(foo.select())    return result.fetchall()async def get_db_fetch():    # It uses the same ``db`` object and use it as a context manager:    async with db():        result = await db.session.execute(foo.select())        return result.fetchall()# Usage inside of a route using a db context@app.get(&quot;/db_context&quot;)async def db_context():    return await get_db_fetch()# Usage outside of a route using a db context@app.on_event(&quot;startup&quot;)async def on_startup():    # We are outside of a request context, therefore we cannot rely on ``SQLAlchemyMiddleware``    # to create a database session for us.    result = await get_db_fetch()if __name__ == &quot;__main__&quot;:    import uvicorn    uvicorn.run(app, host=&quot;0.0.0.0&quot;, port=8002)```</longdescription>
</pkgmetadata>