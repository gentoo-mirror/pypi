<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Thoth Messaging---------------.. image:: https://img.shields.io/github/v/tag/thoth-station/messaging?style=plastic  :target: https://github.com/thoth-station/messaging/releases  :alt: GitHub tag (latest by date).. image:: https://img.shields.io/pypi/v/thoth-messaging?style=plastic  :target: https://pypi.org/project/thoth-messaging  :alt: PyPI - Module Version.. image:: https://img.shields.io/pypi/l/thoth-messaging?style=plastic  :target: https://pypi.org/project/thoth-messaging  :alt: PyPI - License.. image:: https://img.shields.io/pypi/dm/thoth-messaging?style=plastic  :target: https://pypi.org/project/thoth-messaging  :alt: PyPI - Downloads.. image:: https://quay.io/repository/thoth-station/messaging/status  :target: https://quay.io/repository/thoth-station/messaging?tab=tags  :alt: Quay - BuildThis provides a library called `thoth-messaging&lt;https://pypi.org/project/thoth-messaging&gt;`_ used in project `Thoth&lt;https://thoth-station.ninja&gt;`_.  It is a basic module to encapsule all messaging (here it is Kafka via Faust) primitives.Type Hinting With MyPy######################This module uses pydantic for type hinting and enforcing a regular schema in messaging.  If you are using mypy to checkyour code please add the following to your mypy configuration file:.. code-block:: toml  [mypy]  plugins = pydantic.mypyIf you are creating an instance of a pydantic model in your own module you should directly use the `MessageContents`class within the associate message file. Using ``foo_bar_message.model`` will only type hint for `BaseMessageContents`.Development and Testing#######################For development and testing it is very useful to have a local instance of Kafka running on your machineWe provide a ``docker-compose`` file to get you up and running quickly with a basic Kafka server; this file is based on`Single Zookeeper/Multiple Kafka &lt;https://github.com/simplesteph/kafka-stack-docker-compose#single-zookeeper--multiple-kafka&gt;`__.In order to start Zookeeper as well as the Kafka Servers simply run `$ podman-compose up` or `$ docker-compose up`,choose the appropriate option based on the system which you are using.Once you have Kafka up and running you should be ready to begin coding your own messaging producers and consumers.  Theinterface between `Kafka` and `Python` is handled by a library called `Confluent Kafka &lt;https://docs.confluent.io/current/clients/python.html&gt;`__.Faust's documentation will be extremely helpful to you when you are developing your own applications. If you would likeexamples of producers and consumers from Team Thoth, look at the following two repositories,`investigator &lt;https://github.com/thoth-station/investigator&gt;`__ and `package-update &lt;https://github.com/thoth-station/package-update-job&gt;`__.You may find it useful to use console producers and consumers while testing your, to create one simply attach a bash shellto one of your Kafka Servers by running: `$ podman exec -it messaging_kafka1_1 bash`, your container names should bethe same as given here, if not, run `$ podman ps` and choose the correct container.  These containers have all Kafkabinaries in appropriate places so you can simply run `$ kafka-console-consumer`, `$ kafka-console-producer`, or any otherkafka command that you may find useful.*example:*.. code-block:: console  kafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginningYou can test sending a message via the CLI using a file as -*example:*.. code-block:: console  pipenv shell  python cli.py --message-file messages_to_be_sent.json*Note*Data is not persistent. Once pods are deleted so is the data associated with them.Pitfalls########Some schemas in this library are defined as `Dict[str, Any]`.  This usually does not accurately reflect the actualschema required. These schemas can be purposefully vague because they are defined elsewhere and importing them fromthe requisite libraries couples `thoth-messaging` version too closely to other components in the best case, andintroduces circular dependencies in the worst case.  In short, `thoth-messaging` is naive and can only enforce schemaswhich it has defined.</longdescription>
</pkgmetadata>