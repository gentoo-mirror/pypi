<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># crownstone-lib-python-cloudAsynchronous Python library to get data from the cloud, and switch Crownstones.## Functionality* Async: using asyncio and aiohttp, optimized for speed.* Easy to use: sync all your Crownstone Cloud data with just one command!* Structurally sound: find your data with ease!* Complete: set the switch state and brightness of your Crownstones remotely!* Flexible: Login and get the data for multiple accounts at once!## Requirements* Python 3.8 or higher* Aiohttp 3.7.4## Standard installationcd to the project folder and run:```console$ python setup.py install```## Install in a virtual environmentTo install the library execute the following command:```console$ python -m venv venv```Activate your venv using:```console$ source venv/bin/activate```Once activated, the venv is used to executed python files, and libraries will be installed in the venv.&lt;br&gt;To install this library, cd to the project folder and run:```console$ python setup.py install```## Getting started### Examples#### Async example```pythonfrom crownstone_cloud import CrownstoneCloud, create_clientsessionimport loggingimport asyncio# Enable logging.logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)async def main():    # Every instance creates it's own websession for easy accessibility, however using 1 websession is recommended.    # Create your websession like so:    websession = create_clientsession()    # Initialize cloud.    cloud_user_1 = CrownstoneCloud('email_user_1', 'password_user_1', websession)    # Login to the Crownstone Cloud and synchronize all cloud data.    await cloud_user_1.async_initialize()    # Get a crownstone by name that can dim, and put it on 20% brightness for user 1    crownstone_lamp = cloud_user_1.get_crownstone('Lamp')    await crownstone_lamp.async_set_brightness(20)    # Login &amp; synchronize data for an other account.    cloud_user_2 = CrownstoneCloud('email_user_2', 'password_user_2', websession)    await cloud_user_2.async_initialize()    # Get a crownstone by name and turn it on for user 2.    crownstone_tv = cloud_user_2.get_crownstone('TV')    await crownstone_tv.async_turn_on()    # If you want to update specific data you can get the cloud data object for your user.    # This object has all the cloud data for your user saved in it, which was synced with async_initialize()    # Parts of the data can also be synced individually without touching the other data.    # To sync all data at once, use async_synchronize() instead.    my_sphere = cloud_user_1.cloud_data.find(&quot;my_sphere_name&quot;)    # request to sync only the locations with the cloud    await my_sphere.locations.async_update_location_data()    # get the keys for this sphere so you can use them with the Crownstone BLE python library    sphere_keys = await my_sphere.async_get_keys()    # Close the aiohttp clientsession after we are done.    await websession.close()asyncio.run(main())```#### Sync example```pythonfrom crownstone_cloud import CrownstoneCloud, run_asyncimport logging# Enable logging.logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)# Initialize cloud.cloud = CrownstoneCloud('email', 'password')# Use 'run_async' to run async functions in sync context.# Login &amp; synchronize all cloud data.run_async(cloud.async_initialize())# Get a crownstone by name and turn it on.crownstone_coffee_machine = cloud.get_crownstone('Coffee machine')run_async(crownstone_coffee_machine.async_turn_on())# Close the session after we are done.run_async(cloud.async_close_session())```### InitializationThe Crownstone cloud is initialized with the email and password of a user:```pythoncloud = CrownstoneCloud('email', 'password')```If you do not yet have a Crownstone account, go to [My Crownstone](https://my.crownstone.rocks) to set one up.The email and password are used to re-login after an access token has expired.You can log into multiple accounts by creating more CrownstoneCloud objects. When doing so, it is recommended to useonly 1 websession for all your requests. Create a websession and append it as parameter to all your CrownstoneCloudobjects. Take a look at the async example above.```pythoncloud = CrownstoneCloud('email', 'password', websession)```To log in and get all your Crownstone from the cloud:```pythonawait cloud.async_initialize()```## Data structureThe cloud can be displayed with the following structure:* User    * Keys    * Spheres        * Locations        * Crownstones        * Users        ### UserThe user is the to whom the data belongs.&lt;br&gt; The user is the one that logs in using email and password.&lt;br&gt;By getting a user specific access token after login, the data for that specific user can be requested.### KeysThe keys are user specific.&lt;br&gt; They are required to connect to the crownstone bluetooth mesh.&lt;br&gt;The most common used keys are the sphere keys. They are located within each individual sphere.&lt;br&gt;### SpheresSpheres are the main data entry. They have rooms (locations), Crownstones and users in them.&lt;br&gt;Example spheres:* House* Office* ApartmentA Sphere has the following fields in the cloud lib:* crownstones: Crownstones* locations: Locations* users: Users* keys: Dict (optional, default = None)* name: String* cloud_id: String* unique_id: String* present_people: List### LocationsLocations are the rooms in your house or other building.&lt;br&gt;For example for a house: * Living room* Bedroom* Garage* BathroomA Location has the following fields in the cloud lib:* present_people: List* name: String* cloud_id: String* unique_id: String### CrownstonesCrownstones are smart plugs that can make every device that isn't smart, way smarter!&lt;br&gt;Crownstones are located within a sphere.&lt;br&gt;Example names of Crownstones:* Lamp* Charger* TelevisionA Crownstone has the following fields in the cloud lib:* abilities: Dict* state: Int (0..100)* name: String* unique_id: String* cloud_id: String* type: String* sw_version: String### UsersUsers are people who have access to a sphere.&lt;br&gt;A user can have 3 roles:* Admin* Member* GuestA User has the following fields in the cloud lib:* role: String* first_name: String* last_name: String* email: String* cloud_id: String* email_verified: Bool## Function list### Cloud#### async_initialize()&gt; Login and sync all data for the user from the cloud.#### async_synchronize()&gt; Synchronize all data for a user. Use case is to update the local data with new data from the cloud.&gt; This function is already called in `async_initialize()`.#### get_crownstone(crownstone_name: String, sphere_id: String = None) -&gt; Crownstone&gt; Get a Crownstone object by name for a user. Raises CrownstoneNotFoundError if it doesn't exist.&gt; You can optionally provide a sphere id to match where the Crownstone should be found.#### get_crownstone_by_id(crownstone_id: String, sphere_id: String = None) -&gt; Crownstone&gt; Get a Crownstone object by it's id for a user. Raises CrownstoneNotFoundError if it doesn't exist.&gt; You can optionally provide a sphere id to match where the Crownstone should be found.#### get_crownstone_by_uid(crownstone_uid: int, sphere_id: String = None) -&gt; Crownstone&gt; Get a Crownstone object by it's uid for a user. Raises CrownstoneNotFoundError if it doesn't exist.&gt; You can optionally provide a sphere id to match where the Crownstone should be found.#### async_close_session()&gt; Async function. This will close the websession in requestHandler to cleanup nicely after the program has finished.### Spheres#### async_update_sphere_data()&gt; Async function. Sync the Spheres with the cloud. Calling the function again after init will update the current data.#### find(sphere_name: String) -&gt; Sphere&gt; Returns a sphere object if one exists by that name.#### find_by_id(sphere_id: String) -&gt; Sphere&gt; Return a sphere object if one exists by that id.### Sphere#### async_update_sphere_presence()&gt; Async function. Sync the presence of users in the sphere with the cloud.#### async_get_keys() -&gt; Dict&gt; Async function. Returns a dict with the keys of this sphere. &gt; The keys can be used for BLE connectivity with the Crownstones.### Crownstones#### async_update_crownstone_data()&gt; Async function. Sync the Crownstones with the cloud for a sphere. &gt; Calling the function again after init will update the current data.#### find(crownstone_name: String) -&gt; Crownstone&gt; Return a Crownstone object if one exists by that name.#### find_by_id(crownstone_id: String) -&gt; Crownstone&gt; Return a Crownstone object if one exists by that id.### Crownstone#### async_turn_on()&gt; Async function. Send a command to turn a Crownstone on. &gt; To make this work make sure to be in the selected sphere and have Bluetooth enabled on your phone.#### async_turn_off()&gt; Async function. Send a command to turn a Crownstone off. &gt; To make this work make sure to be in the selected sphere and have Bluetooth enabled on your phone.#### async_set_brightness(value: Integer)&gt; Async function. Send a command to set a Crownstone to a given brightness level. &gt; To make this work make sure to be in the selected sphere and have Bluetooth enabled on your phone.&gt; The value parameter should be between 0 and 100.### Locations#### async_update_location_data()&gt; Async function. Sync the Locations with the cloud for a sphere. Calling the function again after init will update the current data.#### async_update_location_presence()&gt; Async function. Sync the presence with the cloud. This will replace the current presence with the new presence.#### find(location_name: String) -&gt; Location&gt; Return a location object if one exists by that name.#### find_by_id(location_id: String) -&gt; Location&gt; Return a location object if one exists by that id.### Users#### async_update_user_data()&gt; Async function. Sync the Users with the cloud for a sphere. Calling the function again after init will update the current data.#### find_by_first_name(first_name: String) -&gt; List&gt; Returns a list of all users with that first name, as duplicate first names can exist.#### find_by_last_name(last_name: String) -&gt; List&gt; Return a list of all users with that last name, as duplicate last names can exist.#### find_by_id(user_id: String) -&gt; Location&gt; Return a location object if one exists by that id.## Async vs syncThe lib can be used synchronously and asynchronously.&lt;br&gt;The disadvantage of sync context is that all functions are blocking. The program will simply wait until a function is complete. In async context, functions (coroutines) can yield control,which means that functions can be &quot;paused&quot; while they are waiting for external data to come in, like data from a server.Other functions can then be executed in the meantime. This way the program is always busy.&lt;br&gt;All async functions in the library API functions in this library have the prefix **async_**Async functions need to be awaited:```Pythonawait cloud.async_close_session()```All the async functions mentioned above can also be used synchronously.&lt;br&gt;Use the `run_async()` function like so:```Pythonfrom crownstone_cloud import run_asyncrun_async(cloud.async_close_session())```Make sure to see the examples above!## TestingTo run the tests using tox install tox first by running:```console$ pip install tox```To execute the tests cd to the project folder and run:```console$ tox```To see which parts of the code are covered by the tests, a coverage report is generated after the tests have been successful.&lt;br&gt;To see the coverage report run:```console$ coverage report```If you like to get a better overview of the test you can generate a HTML file like so:```console$ coverage html```To view your html file directly on Linux:```console$ ./htmlcov/index.html```On Windows simply navigate to the htmlcov folder inside the project folder, and double-click index.html. It will be executed in your selected browser.# License## Open-source licenseThis software is provided under a noncontagious open-source license towards the open-source community. It's available under three open-source licenses: * License: LGPL v3+, Apache, MIT&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;http://www.gnu.org/licenses/lgpl-3.0&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/License-LGPL%20v3-blue.svg&quot; alt=&quot;License: LGPL v3&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg&quot; alt=&quot;License: MIT&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://opensource.org/licenses/Apache-2.0&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/License-Apache%202.0-blue.svg&quot; alt=&quot;License: Apache 2.0&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;## Commercial licenseThis software can also be provided under a commercial license. If you are not an open-source developer or are not planning to release adaptations to the code under one or multiple of the mentioned licenses, contact us to obtain a commercial license.* License: Crownstone commercial license# ContactFor any question contact us at &lt;https://crownstone.rocks/contact/&gt; or on our discord server through &lt;https://crownstone.rocks/forum/&gt;.</longdescription>
</pkgmetadata>