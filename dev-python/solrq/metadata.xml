<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/swistakm/solrq.svg?branch=master)](https://travis-ci.org/swistakm/solrq)[![Coverage Status](https://coveralls.io/repos/swistakm/solrq/badge.svg)](https://coveralls.io/r/swistakm/solrq)[![Documentation Status](https://readthedocs.org/projects/solrq/badge/?version=latest)](https://readthedocs.org/projects/solrq/?badge=latest)# solrq`solrq` is a Python Solr query utility. It helps making query strings for Solrand also helps with escaping reserved characters. `solrq` is has no externaldependencies and is compatibile with `python3.7`, `python3,8`, `python3.9`, `python3.10`, `python3.11`, `pypy` and `pypy3`.It might be compatibile with other python releases/implentations but this hasnot been tested yet or is no longer tested (e.g `python3.2` or `python2.7`).    pip install solrq    And you're ready to go!# usageEverything in `solrq` is about `Q()` object. Drop into python repl and justfeed it with bunch of field and search terms to see how it works:```python&gt;&gt;&gt; from solrq import Q&gt;&gt;&gt; # note: all terms in single Q object are implicitely joined with 'AND'&gt;&gt;&gt; query = Q(type=&quot;animal&quot;, species=&quot;dog&quot;)&gt;&gt;&gt; query&lt;Q: type:animal AND species:dog&gt;&gt;&gt;&gt; # ohh, forgot about cats?&gt;&gt;&gt; query | Q(type=&quot;animal&quot;, species=&quot;cat&quot;)&lt;Q: (type:animal AND species:dog) OR (type:animal AND species:cat)&gt;&gt;&gt;&gt;# more a cat lover? Let's give them a boost boost&gt;&gt;&gt; Q(type=&quot;animal&quot;) &amp; (Q(species=&quot;cat&quot;)^2 | Q(species=&quot;dog&quot;))&lt;Q: type:animal AND ((species:cat^2) OR species:dog)&gt;```But what to do with this `Q`? Simply pass it to your Solr library of choice, like [pysolr](https://github.com/toastdriven/pysolr) or [mysolr](https://github.com/RedTuna/mysolr). Most of python Solr librariesexpect simple string as a query parameter and do not bother with escapingof reserved characters so you must take care of that by yourself. This is why`solrq` integrates so easily. Here is an example how you can use it with [pysolr](https://github.com/toastdriven/pysolr):```pythonfrom solrq import Qimport pysolrsolr = Solr(&quot;&lt;your solr url&gt;&quot;)# simply using Q objectsolr.search(Q(text=&quot;easy as f***&quot;))# or explicitely making it stringsolr.search(str(Q(text=&quot;easy as f***&quot;)))```    ## quick referenceFull reference can be found in [API reference documentation page](http://solrq.readthedocs.org/en/latest/api-reference.html) but here is a short reference.### boosting queriesUse python `^` operator:```python&gt;&gt;&gt; Q(text='cat') ^ 2&lt;Q: text:cat^2&gt;```### AND queriesUse python `&amp;` operator:```python&gt;&gt;&gt; Q(text='cat') &amp; Q(text='dog')&lt;Q: text:cat AND text:dog&gt;```### OR queriesUse python `|` operator:```python&gt;&gt;&gt; Q(text='cat') | Q(text='dog')&lt;Q: text:cat OR text:dog&gt;```### NOT queriesUse python `~` operator:```python&gt;&gt;&gt; ~ Q(text='cat')&lt;Q: !text:cat&gt;```    ### rangesUse `solrq.Range` wrapper:```python&gt;&gt;&gt; from solrq import Range&gt;&gt;&gt; Q(age=Range(18, 25))&lt;Q: age:[18 TO 25]&gt;```### proximity searchesUse `solrq.Proximity` wrapper:```python&gt;&gt;&gt; from solrq import Proximity&gt;&gt;&gt; Q(age=Proximity(&quot;cat dogs&quot;, 5))&lt;Q: age:&quot;cat\ dogs&quot;~5&gt;```### safe stringsAll raw string values are treated as unsafe by default and will be escaped to ensure that final query string will not be broken by some rougue search value.This of course can be disabled if you know what you're doing using`Value` wrapper:```python&gt;&gt;&gt; from solrq import Q, Value&gt;&gt;&gt; Q(type='foo bar[]')&lt;Q: type:foo\ bar\[\]&gt;&gt;&gt;&gt; Q(type=Value('foo bar[]', safe=True))&lt;Q: type:foo bar[]&gt;```### timedeltas, datetimesSimply as:```python&gt;&gt;&gt; from datetime import datetime, timedelta&gt;&gt;&gt; Q(date=datetime(1970, 1, 1))&lt;Q: date:&quot;1970-01-01T00:00:00Z&quot;&gt;&gt;&gt;&gt; # note that timedeltas has any sense mostly with ranges&gt;&gt;&gt; Q(delta=timedelta(days=1))&lt;Q: delta:NOW+1DAYS+0SECONDS+0MILLISECONDS&gt;```### field wildcardIf you need to use wildcards in field names just use dict and unpack it insideof `Q()` instead of using keyword arguments:```python    &gt;&gt;&gt; Q(**{&quot;*_t&quot;: &quot;text_to_search&quot;})    &lt;Q: *_t:text_to_search&gt;```# contributingAny contribution is welcome. Issues, suggestions, pull requests - whatever. There are no strict contribution guidelines beyond PEP-8 and sanity. Code style is checked with flakes8 and any PR that has failed buildwill not be merged.One thing: if you submit a PR please do not rebase it later unless youare asked for that explicitely. Reviewing pull requests that suddenly had their history rewritten just drives me crazy.# testingTests are run using tox. Simply install it and run:    pip install tox    tox    And that's all.</longdescription>
</pkgmetadata>