<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AiiDAlab-ELN[![Continuous Integration](https://github.com/aiidalab/aiidalab-eln/actions/workflows/pre-commit.yml/badge.svg)](https://github.com/aiidalab/aiidalab-eln/actions/workflows/pre-commit.yml)Integrate AiiDAlab with Electronic Laboratory Notebooks (ELN). This repository implements a general API for interfacing AiiDAlab with some ELN and a concrete implementation for the integration with the [cheminfo ELN](cheminfo.github.io/).## AiiDAlab-Cheminfo ELN implementationAs a first prototype we implemented an integration with the open-source [cheminfo ELN](cheminfo.github.io/).The ELN and integration can be tested via the [public deployment of the ELN](c6h6.org). Documentation on how to use the frontend can be found [here](docs.c6h6.org).## API- `eln_instance` refers to the URL of the ELN API.- `eln_type` referst to the type of ELN, e.g. &quot;cheminfo&quot;, &quot;openbis&quot;.- `data_type` &quot;subfolder&quot; in the cheminfo data schema of characterization techniques, e.g., &quot;xray&quot;, &quot;isotherm&quot; `spectrum_type` will be renamed to this- `sample_uuid` refers to the sample unique identifier in the ELN database- `file_name` refers to the name of the file attached to the sample and containing information of the specified `data_type`.- `file_content` refers to the content of the file attached to the sample.- `node` refers to the AiiDA database node.- `token` refers to the token that gives access to the ELN database.- `export_data()` sends the AiiDA node (stored in the `node` attribute) to the ELN.- `import_data()` import ELN data into an AiiDA node.- `sample` object that refers to an ELN sample, previously known as `sample_manager`.- `sample.put_data()` - put data into the ELN sample.- `sample.get_data()` - get data from the ELN sample.## For maintainersTo create a new release, clone the repository, install development dependencies with `pip install '.[dev]'`, and then execute `bumpver update --major/--minor/--patch`.This will:  1. Create a tagged release with bumped version and push it to the repository.  2. Trigger a GitHub actions workflow that creates a GitHub release.Additional notes:  - Use the `--dry` option to preview the release change.  - The release tag (e.g. a/b/rc) is determined from the last release.    Use the `--tag` option to switch the release tag.## AcknowledgementsThis work is supported by the [MARVEL National Centre for Competency in Research](&lt;http://nccr-marvel.ch&gt;)funded by the [Swiss National Science Foundation](&lt;http://www.snf.ch/en&gt;), as well as by the [MaXEuropean Centre of Excellence](&lt;http://www.max-centre.eu/&gt;) funded by the Horizon 2020 EINFRA-5 program,Grant No. 676598 and an European Research Council (ERC) Advanced Grant (Grant Agreement No. 666983, MaGic).&lt;div style=&quot;text-align:center&quot;&gt; &lt;img src=&quot;miscellaneous/logos/MARVEL.png&quot; alt=&quot;MARVEL&quot; height=&quot;75px&quot;&gt; &lt;img src=&quot;miscellaneous/logos/MaX.png&quot; alt=&quot;MaX&quot; height=&quot;75px&quot;&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>