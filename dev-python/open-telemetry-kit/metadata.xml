<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Open Telemetry Kit![Image of Open Telemetry Kit](https://raw.githubusercontent.com/Hivemapper/open-telemetry-kit/master/OTK.jpg)The Open Telemetry Kit (OTK) is an open source package for extracting and parsing telemetry associated with video streams and converting to common formats.It comes out of a need for a singular API that can be used for multiple different video telemetry formats.Telemetry that can be parsed includes: GPS, time, camera information, speedFeatures:- Automatically detect telemetry format- Manipulate telemetry with ease- Write telemetry to a new format## Getting Started### DependenciesPython version: `&gt;=3.6``ffmpeg` and `ffprobe`.On Debian systems these can be installed with:&gt;$ sudo apt install ffmpeg`dateutil`On Debian systems this can be installed with:&gt;$ pip3 install python-dateutil### Installation&gt;$ pip3 install open-telemetry-kit### ImportingThe OTK package can be imported into your python3 project with:&gt;import open_telemetry_kit as otk### Quick Start#### Download the OTK Quickstart package with sample dataDownload the OTK quickstart package (~90 MB).(Mac users can install `wget` using [these instructions](https://www.maketecheasier.com/install-wget-mac/))&gt;$ wget https://hivemapper-sample-videos.s3-us-west-2.amazonaws.com/OTK/OTK_quickstart.tgzThis includes a sample `.csv`, `.srt`, and `.mov` with embedded telemetry.It also contains `quickstart.py` which you can use to extract the telemetry from the sample files.Extract the package:&gt;$ tar xzvf OTK_quickstart.tgzThis will extract everything into a new directory called `OTK_quickstart/`The `quickstart.py` script accepts a standalone `.csv` or `.srt` or a video file with an embedded `.srt`. It will read in the data, convert it to JSON, and write it to the provided destination. #### Telemetry extraction and conversion exampleIn your terminal go to the new `OTK_quickstart` directory.Extract telemetry from the sample video:&gt;$ python3 quickstart.py embedded_srt_example.mov embedded_srt_example.jsonExtract telemetry from the sample `srt` or `csv` files respectively:&gt;$ python3 quickstart.py srt_example.srt srt_example.json&gt;$ python3 quickstart.py csv_example.csv csv_example.json_Note: This process will create a new JSON file containing the telemetry extracted from the sample file.The data is organized into an array of objects (or, in python terminology, a list of dictionaries)_#### Data manipulation exampleFor an example of simple data manipulation, open `quickstart.py` and uncomment the lines:```# gps = Telemetry()# for packet in telemetry:#   gps.append({ k:v for k, v in packet.items() if k in ['latitude', 'longitude', 'altitude']})# write.telemetryToJson(gps, dest)```Rerun the script with one of the provided commands above.### Current Functionality#### Input FormatsThe OTK currently supports the following forms of telemetry:- `.csv` files- `.srt` files- Most videos file with embedded telemetry encoded as a `.srt` (e.g. video taken with some DJI drone models)- `.gpx` files- `.kml` files- KLV/MISB embedded data- Open Camera `.srt`#### Output Formats- JSON- CSV### Future ReleasesPlanned expansions and updates for the OTK include:#### Input Formats#### Output Formats- geoJSON#### Other- Unit Tests</longdescription>
</pkgmetadata>