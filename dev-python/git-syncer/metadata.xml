<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Git syncerAllows cron job control and command execution on a remote machine using gitinfrastructure.[![Tests](https://github.com/asaf-kali/git-syncer/actions/workflows/tests.yml/badge.svg)](https://github.com/asaf-kali/git-syncer/actions/workflows/tests.yml)[![Lint](https://github.com/asaf-kali/git-syncer/actions/workflows/lint.yml/badge.svg)](https://github.com/asaf-kali/git-syncer/actions/workflows/lint.yml)[![PyPI version](https://badge.fury.io/py/git-syncer.svg)](https://badge.fury.io/py/git-syncer)üë∑üèª *Please note, this project is still a work-in-progress* üèóÔ∏è&lt;h2 id=&quot;quick-start&quot;&gt;Quick start&lt;/h2&gt;On your computer, set up the basic repository(checkout the `example_project` in this repository to see how this should generally look):1. [Create](https://github.com/new) a **private** GitHub repository and clone it.2. Create a `requirements.txt` file, and add the `git-syncer` dependency.3. Create a `main.py` file:```python3from git_syncer import runfrom git_syncer.runnables import registerregister()  # Add boot jobs, cron jobs, and remote commands here üèãüèª‚ôÇÔ∏èif __name__ == &quot;__main__&quot;:    run()```4. Add a `.gitignore` file (tip: use [gitignore.io](https://www.toptal.com/developers/gitignore)).   It must contain `out/` directory.5. Commit and push your changes.On your remote machine (SSH to it):6. Set up GitHub credentials to clone your new repository.&lt;br&gt;   **Highly recommended**: instead of providing your own personal GitHub credentials on the remote machine,   [add an SSH deploy key to your repository](https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys)   . If you choose to do so, check the `Allow write access` checkbox.7. Clone your new repository to the remote machine.8. Set up a [virtual environment](https://docs.python.org/library/venv.html) for this project and activate it   (using `source &lt;venv_dir&gt;/bin/activate`).9. `cd` to your repository directory.10. Install dependencies using `pip install -r requirements.txt` (`git-syncer` should be installed).11. ‚ö†Ô∏è **THIS STEP WILL OVERRIDE YOUR EXISTING CRONTAB SETTINGS!** ‚ö†Ô∏è&lt;br&gt;    Activate the syncer using the CLI command `init-syncer`.From now on, you can add new [cron jobs](#cron-jobs) and execute [remote commands](#remote-commands) on theremote machine using this git repository. For more details, see the [usage section](#usage).&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;Note: this tool writes logs to `~/logs/git-syncer/`.&lt;h4 id=&quot;runnables&quot;&gt;Runnables&lt;/h4&gt;A `Runnable` is the basic class that the package uses.To define your own custom commands, create your own class, inherit `Runnable`,and implement the mandatory abstract methods:```python3# File: my_runnables.pyfrom git_syncer.models import Runnableclass HelloWorld(Runnable):    @property    def verbose_name(self) -&gt; str:        return &quot;Hello World&quot;    def run(self) -&gt; str:        return &quot;This runnable was called!&quot;```...and register your runnable in `main.py`:```python3# File: main.pyfrom git_syncer.runnables import registerfrom my_runnables import HelloWorldregister(HelloWorld())```&lt;h3 id=&quot;boot-jobs&quot;&gt;Boot jobs&lt;/h3&gt;Boot jobs will execute once the remote machine turns on.In order to make a `Runnable` into a boot job, set the `run_on_boot` property to `True`:```python3class HelloWorld(Runnable):    @property    def run_on_boot(self) -&gt; bool:        return True    ...```&lt;h3 id=&quot;cron-jobs&quot;&gt;Cron jobs&lt;/h3&gt;To create a cron job, inherit the `CronJob` class, and fill the `expression` property:```python3from git_syncer.models import CronJobclass MyCronJob(CronJob):    @property    def verbose_name(self) -&gt; str:        return &quot;Ping&quot;    @property    def expression(self) -&gt; str:        # Every 5 minutes        return &quot;*/5 * * * *&quot;    def run(self) -&gt; str:        return &quot;This job runs every 5 minutes&quot;```&lt;h3 id=&quot;remote-commands&quot;&gt;Execute jobs on command&lt;/h3&gt;In order to make a non-cron runnable execute on the remote machine:1. On your local machine, commit an empty file matching your `Runnable` name under `execute` folder (for example,   if the runnable class name is `GetIP`, commit a file named `execute/get-ip`).2. Push your changes.3. On the next round minute:   1. The runnable will execute on the remote device,   2. The execution result will be written in a file matching your runnable name (for example, if the runnable      class name is `GetIP`, the result file will be named `execute/get-ip-result.txt`, and the `execute/get-ip`      file will be removed).   3. The changes will be committed and pushed back to the repository.4. Wait a few seconds and pull your repository. You will see the execution result in the expected result file.Expert mode: every minute, in order the check if a non-cron `Runnable` should be executed, its `should_execute` methodis called (matching file names to the runnable class name). In order to execute your runnable based on different logic,override the `should_execute` method:```python3from typing import Setfrom git_syncer.models import Runnableimport randomclass HelloWorld(Runnable):    @property    def verbose_name(self) -&gt; str:        return &quot;Hello World&quot;    def run(self) -&gt; str:        return &quot;This runnable was called!&quot;     def should_execute(self, inputs: Set[str]) -&gt; bool:        # Take a look at the base method and implement your own logic.        return random.randint(1, 100) % 5 == 0```&lt;h3 id=&quot;error-handling&quot;&gt;Error handling&lt;/h3&gt;üë∑üèª TODO</longdescription>
</pkgmetadata>