<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># **bgnlp**: Model-first approach to Bulgarian NLP&lt;a href=&quot;https://colab.research.google.com/drive/1etvcxad0f754pjSdjremDftq16o_oMTh?usp=sharing&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667&quot; alt=&quot;Open In Colab&quot; data-canonical-src=&quot;https://colab.research.google.com/assets/colab-badge.svg&quot; style=&quot;max-width: 100%;&quot;&gt;&lt;/a&gt;[![Downloads](https://static.pepy.tech/personalized-badge/bgnlp?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=pip%20downloads)](https://pypi.org/project/bgnlp/)```shpip install bgnlp```## Package functionalities### Part-of-speech (PoS) tagging```pythonfrom bgnlp import PosTagger, PosTaggerConfigconfig = PosTaggerConfig()pos = PosTagger(config=config)print(pos(&quot;Това е библиотека за обработка на естествен език.&quot;))``````json[{    &quot;word&quot;: &quot;Това&quot;,    &quot;tag&quot;: &quot;PDOsn&quot;,    &quot;bg_desc&quot;: &quot;местоимение&quot;,    &quot;en_desc&quot;: &quot;pronoun&quot;}, {    &quot;word&quot;: &quot;е&quot;,    &quot;tag&quot;: &quot;VLINr3s&quot;,    &quot;bg_desc&quot;: &quot;глагол&quot;,    &quot;en_desc&quot;: &quot;verb&quot;}, {    &quot;word&quot;: &quot;библиотека&quot;,    &quot;tag&quot;: &quot;NCFsof&quot;,    &quot;bg_desc&quot;: &quot;съществително име&quot;,    &quot;en_desc&quot;: &quot;noun&quot;}, {    &quot;word&quot;: &quot;за&quot;,    &quot;tag&quot;: &quot;R&quot;,    &quot;bg_desc&quot;: &quot;предлог&quot;,    &quot;en_desc&quot;: &quot;preposition&quot;}, {    &quot;word&quot;: &quot;обработка&quot;,    &quot;tag&quot;: &quot;NCFsof&quot;,    &quot;bg_desc&quot;: &quot;съществително име&quot;,    &quot;en_desc&quot;: &quot;noun&quot;}, {    &quot;word&quot;: &quot;на&quot;,    &quot;tag&quot;: &quot;R&quot;,    &quot;bg_desc&quot;: &quot;предлог&quot;,    &quot;en_desc&quot;: &quot;preposition&quot;}, {    &quot;word&quot;: &quot;естествен&quot;,    &quot;tag&quot;: &quot;Asmo&quot;,    &quot;bg_desc&quot;: &quot;прилагателно име&quot;,    &quot;en_desc&quot;: &quot;adjective&quot;}, {    &quot;word&quot;: &quot;език&quot;,    &quot;tag&quot;: &quot;NCMsom&quot;,    &quot;bg_desc&quot;: &quot;съществително име&quot;,    &quot;en_desc&quot;: &quot;noun&quot;}, {    &quot;word&quot;: &quot;.&quot;,    &quot;tag&quot;: &quot;U&quot;,    &quot;bg_desc&quot;: &quot;препинателен знак&quot;,    &quot;en_desc&quot;: &quot;punctuation&quot;}]```### Lemmatization```pythonfrom bgnlp import LemmaTaggerConfig, LemmaTaggerlemma = LemmaTagger(config=LemmaTaggerConfig())text = &quot;Добре дошли!&quot;print(lemma(text))``````bash[{'word': 'Добре', 'lemma': 'Добре'}, {'word': 'дошли', 'lemma': 'дойда'}, {'word': '!', 'lemma': '!'}]``````python# Generating a string of lemmas.print(lemma(text, as_string=True))``````bashДобре дойда!```### Named Entity Recognition (NER) taggingCurrently, the available NER tags are:- `PER` - Person- `ORG` - Organization- `LOC` - Location```pythonfrom bgnlp import NerTagger, NerTaggerConfigner = NerTagger(config=NerTaggerConfig())text = &quot;Барух Спиноза е роден в Амстердам&quot;print(f&quot;Input: {text}&quot;)print(&quot;Result:&quot;, ner(text))``````bashInput: Барух Спиноза е роден в АмстердамResult: [{'word': 'Барух Спиноза', 'entity_group': 'PER'}, {'word': 'Амстердам', 'entity_group': 'LOC'}]```### Using a Config objectA tagger Config is used to define the underlying model. You can change the device on which it makes inference:```python# Make inference using the GPU (by default it is &quot;cpu&quot;):config = NerTaggerConfig(device=&quot;cuda&quot;)ner = NerTagger(config=config)# ...```You can also change the path to the model weights. For `NerTagger` you can directly pass the HuggingFace's Model Hub path. All other taggers use weights uploaded to Google Drive.```python# Define the path to the model weights. It can be a single .pt file or a path to HuggingFace's Model Hub (only for NerTagger).config = NerTaggerConfig(model_path=&quot;path/to/model&quot;)ner = NerTagger(config=config)# ...```Please, note that the model should be of the same architecture as the one used by the certain Tagger.</longdescription>
</pkgmetadata>