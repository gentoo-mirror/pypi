<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pyNVML======Python bindings to the NVIDIA Management Library------------------------------------------------Provides a Python interface to GPU management and monitoring functions.This is a wrapper around the NVML library.For information about the NVML library, see the NVML developer pagehttp://developer.nvidia.com/nvidia-management-library-nvmlDownload the latest package from:http://pypi.python.org/pypi/nvidia-ml-py/Note this file can be run with 'python -m doctest -v README.txt'although the results are system dependentThe nvml header file contains function documentation that is relevantto this wrapper. The header file is distributed with.https://developer.nvidia.com/gpu-deployment-kitThe main difference is this library handles allocating structs andpassing pointers to the functions, before returning the desired value.Non-success return codes are raised as exceptions as described in thesection below.REQUIRES--------Python 2.5, or an earlier version with the ctypes module.INSTALLATION------------Pip Installation with python3:- `python3 -m pip install nvidia-ml-py`Manual Installation:```$ tar -xzf nvidia-ml-py-$major-$minor-$patch.tar.gz`$ cd nvidia-ml-py-$major-$minor-$patch$ sudo python setup.py install```USAGE-----```&gt;&gt;&gt; from pynvml import *&gt;&gt;&gt; nvmlInit()&gt;&gt;&gt; print(f&quot;Driver Version: {nvmlSystemGetDriverVersion()}&quot;)Driver Version: 11.515.48&gt;&gt;&gt; deviceCount = nvmlDeviceGetCount()&gt;&gt;&gt; for i in range(deviceCount):...     handle = nvmlDeviceGetHandleByIndex(i)...     print(f&quot;Device {i} : {nvmlDeviceGetName(handle)}&quot;)...Device 0 : Tesla K40c&gt;&gt;&gt; nvmlShutdown()```FUNCTIONS---------Python methods wrap NVML functions, implemented in a C shared library.Each function's use is the same with the following exceptions:- Instead of returning error codes, failing error codes are raised as Python exceptions.```&gt;&gt;&gt; try:...     nvmlDeviceGetCount()... except NVMLError as error:...     print(error)...Uninitialized```- C function output parameters are returned from the corresponding Python function left to right.```nvmlReturn_t nvmlDeviceGetEccMode(nvmlDevice_t device,                                  nvmlEnableState_t *current,                                  nvmlEnableState_t *pending);&gt;&gt;&gt; nvmlInit()&gt;&gt;&gt; handle = nvmlDeviceGetHandleByIndex(0)&gt;&gt;&gt; (current, pending) = nvmlDeviceGetEccMode(handle)```- C structs are converted into Python classes.```// C Function and typedef structnvmlReturn_t DECLDIR nvmlDeviceGetMemoryInfo(nvmlDevice_t device,                                             nvmlMemory_t *memory);typedef struct nvmlMemory_st {    unsigned long long total;    unsigned long long free;    unsigned long long used;} nvmlMemory_t;# Python call to function and accessing members of ctype struct&gt;&gt;&gt; info = nvmlDeviceGetMemoryInfo(handle)&gt;&gt;&gt; print(f&quot;Total memory: {info.total}&quot;)Total memory: 5636292608&gt;&gt;&gt; print(f&quot;Free memory:, {info.free}&quot;)Free memory: 5578420224&gt;&gt;&gt; print(f&quot;Used memory: {info.used}&quot;)Used memory: 57872384```- Python handles string buffer creation.```// C Function that needs character array and lengthnvmlReturn_t nvmlSystemGetDriverVersion(char* version,                                        unsigned int length);# Python function handles memory&gt;&gt;&gt; version = nvmlSystemGetDriverVersion()&gt;&gt;&gt; print(version)... 11.520.75&gt;&gt;&gt; nvmlShutdown()```For usage information see the NVML documentation.VARIABLES---------All meaningful NVML constants and enums are exposed in Python.The NVML_VALUE_NOT_AVAILABLE constant is not used.  Instead None is mapped to the field.EXCEPTIONS----------Since the C library uses return codes and python prefers exception handling, thelibrary converts all return codes to various exceptions. The exceptions are generatedautomatically via a function at run time instead of being defined manually.The list of exceptions can be found in NVMLError base class.The example seen above in the FUNCTIONS section:```&gt;&gt;&gt; try:...     nvmlDeviceGetCount()... except NVMLError as error:...     print(error)...Uninitialized```Can be more accurately caught like this:```&gt;&gt;&gt; try:...     nvmlDeviceGetCount()... except NVMLError_Uninitialized as error:...     print(error)...Uninitialized```The conversion from name to exception is like this for all exceptions:* `NVML_ERROR_UNINITIALIZED` =&gt; `NVMLError_Uninitialized`* `NVML_ERROR_LIBRARY_NOT_FOUND` =&gt; `NVMLError_LibraryNotFound`* `NVML_ERROR_ALREADY_INITIALIZED` =&gt; `NVMLError_AlreadyInitialized`RELEASE NOTES-------------Version 2.285.0- Added new functions for NVML 2.285.  See NVML documentation for more information.- Ported to support Python 3.0 and Python 2.0 syntax.- Added nvidia_smi.py tool as a sample app.Version 3.295.0- Added new functions for NVML 3.295.  See NVML documentation for more information.- Updated nvidia_smi.py tool- Includes additional error handlingVersion 4.304.0- Added new functions for NVML 4.304.  See NVML documentation for more information.- Updated nvidia_smi.py toolVersion 4.304.3- Fixing nvmlUnitGetDeviceCount bugVersion 5.319.0- Added new functions for NVML 5.319.  See NVML documentation for more information.Version 6.340.0- Added new functions for NVML 6.340.  See NVML documentation for more information.Version 7.346.0- Added new functions for NVML 7.346.  See NVML documentation for more information.Version 7.352.0- Added new functions for NVML 7.352.  See NVML documentation for more information.Version 10.418- Added new functions for NVML 10.418.  See NVML documentation for more information.- Fixed issues with using the bindings with Python 3.x- Replaced sample app nvidia_smi.py with example.pyVersion 11.515.48- Python3 support added- Updated API to add function new to NVML, bringing pynvml up to date with NVML- Added auto-version to handle byte and string conversion automatically for both structs and functions- Minor bug fixes- Added README.txt correctly in long_description for pypi.orgVersion 11.520- Updated Long Description to be actual markdown- Added new functions for NVML 11.520Version 11.525- Added new functions for NVML 11.525COPYRIGHT---------Copyright (c) 2011-2023, NVIDIA Corporation.  All rights reserved.LICENSE-------Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.- Neither the name of the NVIDIA Corporation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</longdescription>
</pkgmetadata>