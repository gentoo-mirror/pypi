<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;jaal/assets/logo.png&quot; alt=&quot;jaal logo&quot;/&gt;![PyPI](https://img.shields.io/pypi/v/jaal) [![PyPI dm](https://img.shields.io/pypi/dm/jaal.svg)](https://img.shields.io/pypi/jaal) [![Join the chat at https://gitter.im/imm-jaal/community](https://badges.gitter.im/imm-jaal/community.svg)](https://gitter.im/imm-jaal/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge) ![GitHub](https://img.shields.io/github/license/imohitmayank/jaal) ![GitHub Repo stars](https://img.shields.io/github/stars/imohitmayank/jaal?style=social)*Your interactive network visualizing dashboard*Documentation: [Here](http://mohitmayank.com/jaal/)## ðŸ‘‰ What is JaalJaal is a python based interactive network visualizing tool built using Dash and Visdcc. Along with the basic features, Jaal also provides multiple option to play with the network data such as searching graph, filtering and even coloring nodes and edges in the graph. And all of this within 2 lines of codes :)## ðŸ‘‰ RequirementsJaal requires following python packages, 1. Dash    - dash_core_components    - dash_html_components 2. dash_bootstrap_components3. visdcc4. pandas## ðŸ‘‰ InstallInstalling Jaal is super easy, just do the following,```bashpip install jaal```And you are done :)Note, it's recommended to create a virtual enivornment before installing. This can be easily done using `python -m venv myenv` and then to activate the env we need,1. (Windows) `.\\myvenv\\Scripts\\activate.bat`2. (Linux) `source myvenv/bin/activate`## ðŸ‘‰ Getting startedAfter installing Jaal, we need to fetch the data and call `plot` function in Jaal. This can be shown by playing with an included Game of Thrones dataset, as follows,```python# importfrom jaal import Jaalfrom jaal.datasets import load_got# load the dataedge_df, node_df = load_got()# init Jaal and run serverJaal(edge_df, node_df).plot()```Here first we import `Jaal` main class and the dataset loading function `load_got`. Later we load the GoT dataset from the datasets included in the package. This gives us two files,1. **edge_df:** its a pandas dataframe with atleast `from` and `to` column, which represents the edge relationship between the entities2. **node_df:** its an optional parameter, but should contains a `id` column with unique node names. Note, edge_df is mandatory and node_df is optional. Also we can include additional columns in these files which are automatically considered as edge or node features respectively.After running the plot, the console will prompt the default localhost address (`127.0.0.1:8050`) where Jaal is running. Access it to see the following dashboard,&lt;img src=&quot;jaal/assets/dashboard.png&quot; alt=&quot;dashboard&quot;/&gt;## ðŸ‘‰ FeaturesAt present, the dashboard consist of following sections,1. **Setting panel:** here we can play with the graph data, it further contain following sections:    - **Search:** can be used to find a node in graph    - **Filter:** supports pandas query language and can be used to filter the graph data based on nodes or edge features.    - **Color:** can be used to color nodes or edges based on their categorical features. Note, currently only features with at max 20 cardinality are supported.     - **Size:** can be used to size nodes or edges based on their numerical features.2. **Graph:** the network graph in all its glory :)## ðŸ‘‰ Examples### 1. Searching&lt;img src=&quot;jaal/assets/jaal_search.gif&quot; alt=&quot;dashboard&quot;/&gt;### 2. Filtering&lt;img src=&quot;jaal/assets/jaal_filter.gif&quot; alt=&quot;dashboard&quot;/&gt;### 3. Coloring&lt;img src=&quot;jaal/assets/jaal_color.gif&quot; alt=&quot;dashboard&quot;/&gt;### 4. Size&lt;img src=&quot;jaal/assets/jaal_size.gif&quot; alt=&quot;dashboard&quot;/&gt;## ðŸ‘‰ Extra settings### Display edge labelTo display labels over edges, we need to add a `label` attribute (column) in the `edge_df`. Also, it has to be in `string` format. For example, using the GoT dataset, by adding the following line before the `Jaal` call, we can display the edge labels.```python# add edge labelsedge_df.loc[:, 'label'] = edge_df.loc[:, 'weight'].astype(str)```### Display image in nodeCurrently it is possible to show image within node (with circular shape). For this, we need to put `node_image_url` column in the `node_df` with URLs for each node.&lt;img src=&quot;jaal/assets/jaal_node_image.png&quot; width=&quot;300&quot; height=&quot;200&quot; alt=&quot;dashboard&quot;/&gt;### Directed edgesBy default, `Jaal` plot undirected edges. This setting can be changed by,```pythonJaal(edge_df, node_df).plot(directed=True)```### Showing TooltipBy default, `nodeid` is shown as tooltip. To overwrite this, include a `title` column with the respective data.### Using vis.js settingsWe can tweak any of the `vis.js` related network visualization settings. An example is,```python# init Jaal and run serverJaal(edge_df, node_df).plot(vis_opts={'height': '600px', # change height                                      'interaction':{'hover': True}, # turn on-off the hover                                       'physics':{'stabilization':{'iterations': 100}}}) # define the convergence iteration of network```For a complete list of settings, visit [vis.js website](https://visjs.github.io/vis-network/docs/network/).### Using gunicornWe can host Jaal on production level HTTP server using `gunicorn` by first creating the app file (`jaal_app.py`),```python# importfrom jaal import Jaalfrom jaal.datasets import load_got# load the dataedge_df, node_df = load_got()# create the app and serverapp = Jaal(edge_df, node_df).create()server = app.server```then from the command line, start the server by,```gunicorn jaal_app:server```Note, `Jaal.create()` takes `directed` and `vis_opts` as arguments. (same as `Jaal.plot()` except the `host` and `port` arguments)## ðŸ‘‰ Common Problems### Port related issueIf you are facing port related issue, please try the following way to run Jaal. It will try different ports, until an empty one is found.```pythonport=8050while True:    try:        Jaal(edge_df, node_df).plot(port=port)    except:        port+=1```## ðŸ‘‰ Issue trackerPlease report any bug or feature idea using Jaal issue tracker: https://github.com/imohitmayank/jaal/issues## ðŸ‘‰ CollaborationAny type of collaboration is appreciated. It could be  testing, development, documentation and other tasks that is useful to the project. Feel free to connect with me regarding this.## ðŸ‘‰ ContactYou can connect with me on [LinkedIn](https://www.linkedin.com/in/imohitmayank/) or mail me at mohitmayank1@gmail.com.## ðŸ‘‰ LicenseJaal is licensed under the terms of the MIT License (see the fileLICENSE).</longdescription>
</pkgmetadata>