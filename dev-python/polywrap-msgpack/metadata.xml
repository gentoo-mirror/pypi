<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Polywrap Msgpack================polywrap-msgpack adds ability to encode/decode to/from msgpack format.It provides msgpack_encode and msgpack_decode functionswhich allows user to encode and decode to/from msgpack bytesIt also defines the default Extension types and extension hook forcustom extension types defined by WRAP standardQuickstart----------Encoding-Decoding Native types and objects~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&gt;&gt;&gt; from polywrap_msgpack import msgpack_decode, msgpack_encode&gt;&gt;&gt; dictionary = {...     &quot;foo&quot;: 5,...     &quot;bar&quot;: [True, False],...     &quot;baz&quot;: {...         &quot;prop&quot;: &quot;value&quot;...     }... }&gt;&gt;&gt; encoded = msgpack_encode(dictionary)&gt;&gt;&gt; decoded = msgpack_decode(encoded)&gt;&gt;&gt; assert dictionary == decoded&gt;&gt;&gt; print(decoded){'foo': 5, 'bar': [True, False], 'baz': {'prop': 'value'}}    Encoding-Decoding Extension types~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&gt;&gt;&gt; from polywrap_msgpack import msgpack_decode, msgpack_encode, GenericMap&gt;&gt;&gt; counter: GenericMap[str, int] = GenericMap({...     &quot;a&quot;: 3,...     &quot;b&quot;: 2,...     &quot;c&quot;: 5... })&gt;&gt;&gt; encoded = msgpack_encode(counter)&gt;&gt;&gt; decoded = msgpack_decode(encoded)&gt;&gt;&gt; assert counter == decoded&gt;&gt;&gt; print(decoded)GenericMap({'a': 3, 'b': 2, 'c': 5})</longdescription>
</pkgmetadata>