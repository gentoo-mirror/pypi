<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Require Login[![Build Status](https://travis-ci.org/laactech/django-require-login.svg?branch=master)](https://travis-ci.org/laactech/django-require-login)[![codecov](https://codecov.io/gh/laactech/django-require-login/branch/master/graph/badge.svg)](https://codecov.io/gh/laactech/django-require-login)[![PyPI](https://img.shields.io/pypi/v/django-require-login)](https://pypi.org/project/django-require-login/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://github.com/laactech/django-require-login/blob/master/LICENSE.md)Forked from [django-stronghold](https://github.com/mgrouchy/django-stronghold)Require login on all your django URLs by default## Supported Versions* Python 3.6, 3.7, 3.8, 3.9, 3.10* Django 2.2, 3.0, 3.1, 3.2, 4.0## Installation and SetupInstall via pip.```shpip install django-require-login```Then add the middleware to your MIDDLEWARE in your Django settings file```pythonMIDDLEWARE = [    #...    &quot;django_require_login.middleware.LoginRequiredMiddleware&quot;,]```After adding the middleware, all your Django views will default to login required.If your `LOGIN_URL` and `LOGOUT_REDIRECT_URL` contain a[named URL pattern](https://docs.djangoproject.com/en/2.2/topics/http/urls/#naming-url-patterns)add `REQUIRE_LOGIN_PUBLIC_NAMED_URLS` to your settings file with your `LOGIN_URL` and`LOGOUT_REDIRECT_URL````pythonREQUIRE_LOGIN_PUBLIC_NAMED_URLS = (LOGIN_URL, LOGOUT_REDIRECT_URL)```If your `LOGIN_URL` and `LOGOUT_REDIRECT_URL` don't contain a named URL pattern add `REQUIRE_LOGIN_PUBLIC_URLS` to your settings file with your `LOGIN_URL` and`LOGOUT_REDIRECT_URL````pythonREQUIRE_LOGIN_PUBLIC_URLS = (LOGIN_URL, LOGOUT_REDIRECT_URL)```## UsageTo make a view public again you can use the public decorator:### For function based views```pythonfrom django_require_login.decorators import publicfrom django.http import HttpResponse@publicdef my_view(request):    return HttpResponse(&quot;Public&quot;)```### For class based views (decorator)```pythonfrom django.utils.decorators import method_decoratorfrom django_require_login.decorators import publicfrom django.views.generic import Viewfrom django.http import HttpResponseclass SomeView(View):    def get(self, request, *args, **kwargs):        return HttpResponse(&quot;Public view&quot;)        @method_decorator(public)    def dispatch(self, *args, **kwargs):        return super().dispatch(*args, **kwargs)```### For class based views (mixin)```pythonfrom django_require_login.mixins import PublicViewMixinfrom django.views.generic import Viewclass SomeView(PublicViewMixin, View):pass```## Configuration (optional)You can add a tuple of url regexes in your settings file with the`REQUIRE_LOGIN_PUBLIC_URLS` setting. Any url that matches against these patterns will be made public without using the `@public` decorator.### REQUIRE_LOGIN_PUBLIC_URLS**Default**:```pythonREQUIRE_LOGIN_PUBLIC_URLS = ()```#### Development DefaultsIf `DEBUG` is True, `REQUIRE_LOGIN_PUBLIC_URLS` contains:```pythonfrom django.conf import settings(    r'{}.+$'.format(settings.STATIC_URL),    r'{}.+$'.format(settings.MEDIA_URL),)```This is additive to your settings to support serving static files and media files fromthe development server. It does not replace any settings you may have in`REQUIRE_LOGIN_PUBLIC_URLS`.&gt; Note: Public URL regexes are matched against &gt;[HttpRequest.path_info](https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.path_info).### REQUIRE_LOGIN_PUBLIC_NAMED_URLSYou can add a tuple of url names in your settings file with the`REQUIRE_LOGIN_PUBLIC_NAMED_URLS` setting. Names in this setting will be reversed using`django.urls.reverse` and any url matching the output of the reversecall will be made public without using the `@public` decorator:**Default**:```pythonREQUIRE_LOGIN_PUBLIC_NAMED_URLS = ()```### REQUIRE_LOGIN_USER_TEST_FUNCOptionally, set REQUIRE_LOGIN_USER_TEST_FUNC to a callable to limit access to usersthat pass a custom test. The callback receives a `User` object and shouldreturn `True` if the user is authorized. This is equivalent to decorating aview with `user_passes_test`.**Example**:```pythonREQUIRE_LOGIN_USER_TEST_FUNC = lambda user: user.is_staff```**Default**:```pythonREQUIRE_LOGIN_USER_TEST_FUNC = lambda user: user.is_authenticated```## Integration with Django REST FrameworkDjango REST Framework is not part of Django and uses its own authentication system.For this reason, you need to make all of your DRF views public and rely on DRF'sauthentication system.### ExampleAssuming all your DRF views live under `/api/` you can make them all public using a regex:```pythonREQUIRE_LOGIN_PUBLIC_URLS = (r&quot;^/api/.*&quot;,)```## SecurityIf you believe you've found a bug with security implications, please do not disclose thisissue in a public forum.Email us at [support@laac.dev](mailto:support@laac.dev)## ContributeSee [CONTRIBUTING.md](https://github.com/laactech/django-require-login/blob/master/CONTRIBUTING.md)</longdescription>
</pkgmetadata>