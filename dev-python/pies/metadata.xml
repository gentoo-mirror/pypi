<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Pies|======|PyPI version| |PyPi downloads| |Build Status| |License| |Bitdeli Badge|The simplest (and tastiest) way to write one program that runs on bothPython 2.6+ and Python 3.Let's eat some pies!====================Installing pies::    pip install piesor if you prefer:::    easy_install piesOverview========Pies is a Python2 &amp; 3 Compatibility layer with the philosophy that allcode should be Python3 code. Starting from this viewpoint means thatwhen running on Python3 pies adds virtually no overhead.Instead of providing a bunch of custom methods (leading to Python codethat looks out of place on any version) pies aims to back port as manyof the Python3 api calls, imports, and objects to Python2 - Relying onspecial syntax only when absolutely necessary.How does pies differ from six?==============================Pies is significantly smaller and simpler than six because it assumesfor everything possible the developer is using the Python 3 compatibleversions included with Python 2.6+, whereas six tries to maintaincompatibility with Python 2.4 - leading to many more overrides andfurther into different language territory. Additionally, as statedabove, where possible pies tries to enable you to not have to changesyntax at all.Integrating pies into your diet===============================Using and integrating pies into an existing Python 3+ code base (toachieve Python 2 &amp; 3 dual support) couldn't be simpler:::    from __future__ import absolute_import, division, print_function, unicode_literals    from pies.overrides import *Then simply write standard Python3 code, and enjoy Python2 Support.Works Unchanged (The Good)==========================The best part of Pies is how much Python3 code works unchanged inPython2Functions:-  round-  next-  filter-  map-  zip-  input-  rangeTypes:-  object (**str** automatically has correct behavior on all versions of   Python)-  chr (creates a unichr object in Python2)-  str (creates a unicode object in Python2)-  dict (creating a dict using dict() will give you all the special   Python3 itemview results, but using {} will not)Imports:-  html-  http-  xmlrpc-  \_thread-  builtins-  configparser-  copyreg-  queue-  reprlib-  socketserver-  ipaddress-  argparse-  enum (also adds this library to Python 3.0-3.3)Different Imports (The Bad)===========================Some Python3 Modules have moved around so much compared to their Python2counterpart, that I found it necessary to create special versions ofthem to obtain the Python3 naming on both environments. Since thesemodules exist already in Python2 allowing them to be imported by thePython3 module name directly is not possible. Instead, you must importthese modules from pies.Example:::    from pies import pickleFull List:-  dbm-  urllib-  collections-  functools-  imp-  itertools-  pickle-  StringIO-  sys-  unittestSpecial Syntax (The Ugly)=========================Sadly, there is still special syntax that is present for corner cases.-  PY2 - True if running on Python2-  PY3 - True if running on Python3-  u('text') - should replace u'text' made available for ease of porting   code from Python2-  itemsview(collection) - should replace collection.iteritems() where   you do not control the collection passed in-  valuesview(collection) - should replace collection.values() where you   do not control the collection passed in-  keysview(collection) - should replace collection.keys() where you do   not control the collection passed in-  execute() - enables Python 3 style exec statements on both   environments.-  integer\_types - may want to use isinstance(variable, integer\_types)   instead of type(variable, int) as long values will not match int in   Python2.-  NewClass(with\_metaclass(metaclass, parent\_class)) - Should replace   both &quot;**metaclass** = metaclass&quot; and &quot;NewClass(metaclass=metaclass)&quot;   as a way to assign meta-classes.What Could be Improved?=======================I'm pretty sure a bunch. If you run into any problems or have any ideasplease don't hesitate to file a bug, submit a pull request, or email meat timothy.crosley@gmail.com.--------------Thanks and I hope you enjoy pies!~Timothy Crosley.. |Pies| image:: https://raw.github.com/timothycrosley/pies/develop/logo.png.. |PyPI version| image:: https://badge.fury.io/py/pies.png   :target: http://badge.fury.io/py/pies.. |PyPi downloads| image:: https://pypip.in/d/pies/badge.png   :target: https://crate.io/packages/pies/.. |Build Status| image:: https://travis-ci.org/timothycrosley/pies.png?branch=develop   :target: https://travis-ci.org/timothycrosley/pies.. |License| image:: https://pypip.in/license/pies/badge.png   :target: https://pypi.python.org/pypi/pies/.. |Bitdeli Badge| image:: https://d2weczhvl823v0.cloudfront.net/timothycrosley/pies/trend.png   :target: https://bitdeli.com/free</longdescription>
</pkgmetadata>