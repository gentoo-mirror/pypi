<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RetinaFace&lt;div align=&quot;center&quot;&gt;[![PyPI Downloads](https://static.pepy.tech/personalized-badge/retina-face?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=pypi%20downloads)](https://pepy.tech/project/retina-face)[![Conda Downloads](https://img.shields.io/conda/dn/conda-forge/retina-face?color=green&amp;label=conda%20downloads)](https://anaconda.org/conda-forge/retina-face)[![Stars](https://img.shields.io/github/stars/serengil/retinaface?color=yellow)](https://github.com/serengil/retinaface)[![License](http://img.shields.io/:license-MIT-green.svg?style=flat)](https://github.com/serengil/retinaface/blob/master/LICENSE)[![Support me on Patreon](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dserengil%26type%3Dpatrons&amp;style=flat)](https://www.patreon.com/serengil?repo=retinaface)[![Twitter](https://img.shields.io/twitter/follow/serengil?color=blue&amp;logo=twitter&amp;style=flat)](https://twitter.com/serengil)[![DOI](http://img.shields.io/:DOI-10.1109/ICEET53442.2021.9659697-blue.svg?style=flat)](https://doi.org/10.1109/ICEET53442.2021.9659697)&lt;/div&gt;RetinaFace is a deep learning based cutting-edge facial detector for Python coming with facial landmarks. Its detection performance is amazing even in the crowd as shown in the following illustration.RetinaFace is the face detection module of [insightface](https://github.com/deepinsight/insightface) project. The original implementation is mainly based on mxnet. Then, its tensorflow based [re-implementation](https://github.com/StanislasBertrand/RetinaFace-tf2) is published by [Stanislas Bertrand](https://github.com/StanislasBertrand). So, this repo is heavily inspired from the study of Stanislas Bertrand. Its source code is simplified and it is transformed to pip compatible but the main structure of the reference model and its pre-trained weights are same.&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/serengil/retinaface/master/tests/outputs/img3.jpg&quot; width=&quot;90%&quot; height=&quot;90%&quot;&gt;&lt;br&gt;&lt;em&gt;Fenerbahce Women Volleyball Team&lt;/em&gt;&lt;/p&gt;## Installation [![PyPI](https://img.shields.io/pypi/v/retina-face.svg)](https://pypi.org/project/retina-face/) [![Conda](https://img.shields.io/conda/vn/conda-forge/retina-face.svg)](https://anaconda.org/conda-forge/retina-face)The easiest way to install retinaface is to download it from [PyPI](https://pypi.org/project/retina-face/). It's going to install the library itself and its prerequisites as well.```shell$ pip install retina-face```RetinaFace is also available at [`Conda`](https://anaconda.org/conda-forge/retina-face). You can alternatively install the package via conda.```shell$ conda install -c conda-forge retina-face```Then, you will be able to import the library and use its functionalities.```pythonfrom retinaface import RetinaFace```**Face Detection** - [`Demo`](https://youtu.be/Wm1DucuQk70)RetinaFace offers a face detection function. It expects an exact path of an image as input.```pythonresp = RetinaFace.detect_faces(&quot;img1.jpg&quot;)```Then, it will return the facial area coordinates and some landmarks (eyes, nose and mouth) with a confidence score.```json{    &quot;face_1&quot;: {        &quot;score&quot;: 0.9993440508842468,        &quot;facial_area&quot;: [155, 81, 434, 443],        &quot;landmarks&quot;: {          &quot;right_eye&quot;: [257.82974, 209.64787],          &quot;left_eye&quot;: [374.93427, 251.78687],          &quot;nose&quot;: [303.4773, 299.91144],          &quot;mouth_right&quot;: [228.37329, 338.73193],          &quot;mouth_left&quot;: [320.21982, 374.58798]        }  }}```**Alignment** - [`Tutorial`](https://sefiks.com/2020/02/23/face-alignment-for-face-recognition-in-python-within-opencv/), [`Demo`](https://youtu.be/WA9i68g4meI)A modern face recognition [pipeline](https://sefiks.com/2020/05/01/a-gentle-introduction-to-face-recognition-in-deep-learning/) consists of 4 common stages: detect, [align](https://sefiks.com/2020/02/23/face-alignment-for-face-recognition-in-python-within-opencv/), [normalize](https://sefiks.com/2020/11/20/facial-landmarks-for-face-recognition-with-dlib/), [represent](https://sefiks.com/2020/12/14/deep-face-recognition-with-arcface-in-keras-and-python/) and [verify](https://sefiks.com/2020/05/22/fine-tuning-the-threshold-in-face-recognition/). Experiments show that alignment increases the face recognition accuracy almost 1%. Here, retinaface can find the facial landmarks including eye coordinates. In this way, it can apply alignment to detected faces with its extracting faces function.```pythonimport matplotlib.pyplot as pltfaces = RetinaFace.extract_faces(img_path = &quot;img.jpg&quot;, align = True)for face in faces:  plt.imshow(face)  plt.show()```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/serengil/retinaface/master/tests/outputs/alignment-procedure.png&quot; width=&quot;80%&quot; height=&quot;80%&quot;&gt;&lt;/p&gt;**Face Recognition** - [`Demo`](https://youtu.be/WnUVYQP4h44)Notice that face recognition module of insightface project is [ArcFace](https://sefiks.com/2020/12/14/deep-face-recognition-with-arcface-in-keras-and-python/), and face detection module is RetinaFace. ArcFace and RetinaFace pair is wrapped in [deepface](https://github.com/serengil/deepface) library for Python. Consider to use deepface if you need an end-to-end face recognition pipeline.```python#!pip install deepfacefrom deepface import DeepFaceobj = DeepFace.verify(&quot;img1.jpg&quot;, &quot;img2.jpg&quot;          , model_name = 'ArcFace', detector_backend = 'retinaface')print(obj[&quot;verified&quot;])```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/serengil/retinaface/master/tests/outputs/retinaface-arcface.png&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;/p&gt;Notice that ArcFace got 99.40% accuracy on [LFW data set](https://sefiks.com/2020/08/27/labeled-faces-in-the-wild-for-face-recognition/) whereas human beings just have 97.53% confidence.## SupportThere are many ways to support a project. Starring‚≠êÔ∏è the repo is just one üôèYou can also support this work on [Patreon](https://www.patreon.com/serengil?repo=retinaface)&lt;a href=&quot;https://www.patreon.com/serengil?repo=retinaface&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/serengil/retinaface/master/icons/patreon.png&quot; width=&quot;30%&quot; height=&quot;30%&quot;&gt;&lt;/a&gt;## AcknowledgementsThis work is mainly based on the [insightface](https://github.com/deepinsight/insightface) project and [retinaface](https://arxiv.org/pdf/1905.00641.pdf) paper; and it is heavily inspired from the re-implementation of [retinaface-tf2](https://github.com/StanislasBertrand/RetinaFace-tf2) by [Stanislas Bertrand](https://github.com/StanislasBertrand). Finally, Bertrand's [implemenation](https://github.com/StanislasBertrand/RetinaFace-tf2/blob/master/rcnn/cython/cpu_nms.pyx) uses [Fast R-CNN](https://arxiv.org/abs/1504.08083) written by [Ross Girshick](https://github.com/rbgirshick/fast-rcnn) in the background. All of those reference studies are licensed under MIT license.## CitationIf you are using RetinaFace in your research, please consider to cite its [original research paper](https://arxiv.org/abs/1905.00641). Besides, if you are using this re-implementation of retinaface, please consider to cite the following research papers as well. Here are examples of BibTeX entries:```BibTeX@inproceedings{serengil2020lightface,  title        = {LightFace: A Hybrid Deep Face Recognition Framework},  author       = {Serengil, Sefik Ilkin and Ozpinar, Alper},  booktitle    = {2020 Innovations in Intelligent Systems and Applications Conference (ASYU)},  pages        = {23-27},  year         = {2020},  doi          = {10.1109/ASYU50717.2020.9259802},  url          = {https://doi.org/10.1109/ASYU50717.2020.9259802},  organization = {IEEE}}``````BibTeX@inproceedings{serengil2021lightface,  title        = {HyperExtended LightFace: A Facial Attribute Analysis Framework},  author       = {Serengil, Sefik Ilkin and Ozpinar, Alper},  booktitle    = {2021 International Conference on Engineering and Emerging Technologies (ICEET)},  pages        = {1-4},  year         = {2021},  doi          = {10.1109/ICEET53442.2021.9659697},  url          = {https://doi.org/10.1109/ICEET53442.2021.9659697},  organization = {IEEE}}```Finally, if you use this RetinaFace re-implementation in your GitHub projects, please add retina-face dependency in the requirements.txt.## LicenceThis project is licensed under the MIT License - see [`LICENSE`](https://github.com/serengil/retinaface/blob/master/LICENSE) for more details.</longdescription>
</pkgmetadata>