<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyyaml-include[![GitHub tag](https://img.shields.io/github/tag/tanbro/pyyaml-include.svg)](https://github.com/tanbro/pyyaml-include)[![Python Package](https://github.com/tanbro/pyyaml-include/workflows/Python%20package/badge.svg)](https://github.com/tanbro/pyyaml-include/actions?query=workflow%3A%22Python+package%22)[![Documentation Status](https://readthedocs.org/projects/pyyaml-include/badge/?version=stable)](https://pyyaml-include.readthedocs.io/en/stable/?badge=stable)[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=tanbro_pyyaml-include&amp;metric=alert_status)](https://sonarcloud.io/dashboard?id=tanbro_pyyaml-include)[![PyPI](https://img.shields.io/pypi/v/pyyaml-include.svg)](https://pypi.org/project/pyyaml-include/)[![PyPI - License](https://img.shields.io/pypi/l/pyyaml-include.svg)](https://pypi.org/project/pyyaml-include/)[![PyPI - Format](https://img.shields.io/pypi/format/pyyaml-include.svg)](https://pypi.org/project/pyyaml-include/)[![PyPI - Status](https://img.shields.io/pypi/status/pyyaml-include.svg)](https://pypi.org/project/pyyaml-include/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyyaml-include.svg)](https://pypi.org/project/pyyaml-include/)[![PyPI - Implementation](https://img.shields.io/pypi/implementation/pyyaml-include.svg)](https://pypi.org/project/pyyaml-include/)An extending constructor of [PyYAML][]: include [YAML][] files into [YAML][] document.## Install```shpip install pyyaml-include```## UsageConsider we have such [YAML] files:```text├── 0.yml└── include.d    ├── 1.yml    └── 2.yml```- `1.yml` 's content:  ```yaml  name: &quot;1&quot;  ```- `2.yml` 's content:  ```yaml  name: &quot;2&quot;  ```To include `1.yml`, `2.yml` in `0.yml`, we shall add `YamlIncludeConstructor` to [PyYAML]'s loader, then add an `!include` tag in `0.yaml`:```pythonimport yamlfrom yamlinclude import YamlIncludeConstructorYamlIncludeConstructor.add_to_loader_class(loader_class=yaml.FullLoader, base_dir='/your/conf/dir')with open('0.yml') as f:    data = yaml.load(f, Loader=yaml.FullLoader)print(data)```### MappingIf `0.yml` was:```yamlfile1: !include include.d/1.ymlfile2: !include include.d/2.yml```We'll get:```yamlfile1:  name: &quot;1&quot;file2:  name: &quot;2&quot;```### SequenceIf `0.yml` was:```yamlfiles:  - !include include.d/1.yml  - !include include.d/2.yml```We'll get:```yamlfiles:  - name: &quot;1&quot;  - name: &quot;2&quot;```&gt; ℹ **Note**:&gt;&gt; File name can be either absolute (like `/usr/conf/1.5/Make.yml`) or relative (like `../../cfg/img.yml`).### WildcardsFile name can contain shell-style wildcards. Data loaded from the file(s) found by wildcards will be set in a sequence.That is to say, a list will be returned when including file name contains wildcards.Length of the returned list equals number of matched files:- when only 1 file matched, length of list will be 1- when there are no files matched, an empty list will be returnedIf `0.yml` was:```yamlfiles: !include include.d/*.yml```We'll get:```yamlfiles:  - name: &quot;1&quot;  - name: &quot;2&quot;```&gt; ℹ **Note**:&gt;&gt; - For `Python&gt;=3.5`, if `recursive` argument of `!include` [YAML] tag is `true`, the pattern `“**”` will match any files and zero or more directories and subdirectories.&gt; - Using the `“**”` pattern in large directory trees may consume an inordinate amount of time because of recursive search.In order to enable `recursive` argument, we shall set it in `Mapping` or `Sequence` arguments mode:- Arguments in `Sequence` mode:  ```yaml  !include [tests/data/include.d/**/*.yml, true]  ```- Arguments in `Mapping` mode:  ```yaml  !include {pathname: tests/data/include.d/**/*.yml, recursive: true}  ```### Non YAML filesThis extending constructor can now load data from non YAML files, supported file types are:- `json`- `toml` (only available when [toml](https://pypi.org/project/toml/) installed)- `ini`The constructor read non YAML files by different readers according to a pattern table defined in `src/yamlinclude/readers.py`.Default reader table can be replaced by a custom `reader_map` when call `add_to_loader_class`.[YAML]: http://yaml.org/[PyYaml]: https://pypi.org/project/PyYAML/# AUTHORS* Liu Xue Yan (&lt;liu_xue_yan@foxmail.com&gt;)  [![liu_xue_yan@foxmail.com](https://www.gravatar.com/avatar/049d2fae1fd2df6439e87d1383d0276b)](mailto:liu_xue_yan@foxmail.com)# Changelog## 1.3Date: 2022-04-24- New:  - PyYAML 6.0 supported- Misc:  - Better CI processes## 1.2Date: 2019-02-03- New:  - non YAML file including- Misc:  - adjust docs  - add pip and conda configure file of development environment- Fix:  - add `PlainTextReader` into `__all__` list of `reders` module## 1.1Date: 2019-03-18- Change:  - Update PyYAML to 5.*  - Rename: Argument `loader_class` of `YamlIncludeConstructor.add_to_loader_class()` (former: `loader_cls`)## 1.0.4Date: 2019-01-07- Change:  - rename: `TAG` ==&gt; `DEFAULT_TAG_NAME`  - add: `encoding` argument- Fix:  - A wrong logging text format- Misc:  - add: `.pylintrc`## 1.0.3Date: 2018-12-04- New Feature:  - Add `base_dir` argument- Misc:  - Add some new unit-test  - Add Python3.7 in CircleCI## 1.0.2Date: 2018-07-11- Add:  - `encoding` argument- Bug fix:  - encoding error if non-ascii characters on non-utf8 os.## 1.0.1Date: 2018-07-03- Add:  - Old Python2.6 and new Python3.7 compatibilities  - class method `add_to_loader_class`    A class method to add the constructor itself into YAML loader class  - Sphinx docs- Change:  - Rename module file `include.py` to `constructor.py`  - Rename class data member `DEFAULT_TAG` to `TAG`## 1.0Date: 2018-06-08</longdescription>
</pkgmetadata>