<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![pywwt on PyPI](https://badge.fury.io/py/pywwt.svg)](https://badge.fury.io/py/pywwt)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7164147.svg)](https://doi.org/10.5281/zenodo.7164147)[![Build Status](https://dev.azure.com/aasworldwidetelescope/WWT/_apis/build/status/WorldWideTelescope.pywwt?branchName=master)](https://dev.azure.com/aasworldwidetelescope/WWT/_build/latest?definitionId=2&amp;branchName=master)# pywwt: WorldWide Telescope from Python/JupyterüöÄüöÄ [Click here to try out pywwt in the cloud!][go-cloud] üöÄüöÄ[go-cloud]: https://mybinder.org/v2/gh/WorldWideTelescope/pywwt-notebooks/master?urlpath=lab/tree/Start%20Here.ipynb*Note: the cloud servers usually start up quickly, but if they were recentlyupdated you may have to wait a few minutes for the backing software images to berebuilt.*## AboutThe [pywwt] package is the official toolkit for visualizing astronomical data inPython using [WorldWide Telescope][wwt] (WWT), a free, open-source astronomyvisualization system. WWT includes a sophisticated 4D WebGL rendering engine anda cloud-based web service for sharing and visualizing terabytes of astronomicaldata.[pywwt]: https://pywwt.readthedocs.io/[wwt]: https://worldwidetelescope.org/home[dnf]: https://dotnetfoundation.org/![A WWT screenshot showing exoplanets in the Kepler field overlaid on a background sky map.](docs/images/data_layers_kepler.png &quot;Kepler exoplanets in pywwt&quot;)With [pywwt] you can:* Visualize and explore astronomical data interactively in the [Jupyter and  JupyterLab][jupyter] environments through an HTML widget* Do the same in standalone applications with a [Qt][qt] widget* Load data from common astronomical data formats (e.g. [AstroPy  tables][tables]) into WWT* Control a running instance of the WWT Windows application[jupyter]: https://jupyter.org/[qt]: https://www.qt.io/[tables]: https://docs.astropy.org/en/stable/table/[//]: # (numfocus-fiscal-sponsor-attribution)The WorldWide Telescope project uses an [open governancemodel](https://worldwidetelescope.org/about/governance/) and is fiscallysponsored by [NumFOCUS](https://numfocus.org/). Consider making a[tax-deductible donation](https://numfocus.org/donate-for-worldwide-telescope)to help the project pay for developer time, professional services, travel,workshops, and a variety of other needs.&lt;div align=&quot;center&quot;&gt;  &lt;a href=&quot;https://numfocus.org/donate-for-worldwide-telescope&quot;&gt;    &lt;img height=&quot;60px&quot;         src=&quot;https://raw.githubusercontent.com/numfocus/templates/master/images/numfocus-logo.png&quot;&gt;  &lt;/a&gt;&lt;/div&gt;## InstallationThe full pywwt documentation, including installation instructions, can be foundat &lt;https://pywwt.readthedocs.io/&gt;.## Reporting issuesIf you run into any issues, please open an issue [here](https://github.com/WorldWideTelescope/pywwt/issues).## For Developers: TestingTo test your pywwt checkout, use the `pytest` command.The pywwt test suite includes a set of image tests that generate imagery usingthe WWT Qt widget and compare the results to a set of reference images. Thiscomponent of the test suite can be finicky, even when everything is workingproperly, because the details of the rendering are dependent upon your operatingsystem and OpenGL implementation. If your setup is yielding visually correctresults, but the test suite is not passing for you, you can fix that asdescribed below.For a bit more context, each ‚Äúimage test‚Äù generates a WWT visual and compares itto multiple reference images. If *any* of those images is sufficiently close tothe WWT result, the test passes. So if you‚Äôre running the test suite and thecomparisons are failing, you need add appropriate new images to the corpus.For a test like `image_layer_equ`, the reference images are stored in thesubdirectory `pywwt/tests/data/refimg_image_layer_equ`. The filenames of thereference images within that directory don't matter, and are intentionallyuninformative since the same reference image might match a wide variety ofrendering platforms.If you run the test suite with the environment variable `$PYWWT_TEST_IMAGE_DIR`set to a non-empty value, the WWT visuals generated during the test run will besaved in the named directory. For any images that fail tests, difference imageswith names resembling `image_layer_equ_vs_a.png` will also be saved. So toupdate the image corpus so that the test suite passes for you, run the testsuite in this mode, then copy the failing images to the appropriate referenceimage data directories. Don't forget to `git add` the new files! And you shouldalso verify that your new images do in fact look ‚Äúreasonable‚Äù compared to what‚Äôsexpected for the test.You can also run `python -m pywwt.tests $imgdir1 $imgdir2 ...`, where `$imgdirN`are paths to directories or Zip files containing images generated during one ormore test runs. This will compare those images to the current corpus ofreference images, and indicate whether there are images in the reference corpusthat could potentially be removed. **Note**, however, that this is only safe ifyour collection of `$imgdirN` spans *all* pywwt rendering platforms of interest.If there‚Äôs a developer that runs the test suite on MacOS 10.10 and yourcollection doesn't include those samples, you run the risk of breaking the testsuite for that person if you remove the reference files that they need. Thatbeing said, it is quite possible for reference images to get out-of-date as therendering code and test suite evolve. On the third hand, deleting files fromthe Git repository doesn't actually make it smaller, so removing old referenceimages only helps a bit with housekeeping.## Continuous Integration and DeploymentThis repository uses [Cranko] to automate release workflows. This automation isessential to the smooth and reproducible deployment of the WWT web services.[Cranko]: https://pkgw.github.io/cranko/## Getting involvedWe love it when people get involved in the WWT community! You can get startedby [participating in our user forum] or by[signing up for our low-traffic newsletter]. If you would like to help makeWWT better, our [Contributor Hub] aims to be your one-stop shop forinformation about how to contribute to the project, with the[Contributors‚Äô Guide] being the first thing you should read. Here on GitHub weoperate with a standard [fork-and-pull] model.[participating in our user forum]: https://wwt-forum.org/[signing up for our low-traffic newsletter]: https://bit.ly/wwt-signup[Contributor Hub]: https://worldwidetelescope.github.io/[Contributors‚Äô Guide]: https://worldwidetelescope.github.io/contributing/[fork-and-pull]: https://help.github.com/en/articles/about-collaborative-development-modelsAll participation in WWT communities is conditioned on your adherence to the[WWT Code of Conduct], which basically says that you should not be a jerk.[WWT Code of Conduct]: https://worldwidetelescope.github.io/code-of-conduct/## AcknowledgmentsWork on the WorldWide Telescope system has been supported by the [AmericanAstronomical Society] (AAS), the [.NET Foundation], and other partners. See [theWWT user website][acks] for details.[American Astronomical Society]: https://aas.org/[.NET Foundation]: https://dotnetfoundation.org/[acks]: https://worldwidetelescope.org/about/acknowledgments/## LegalitiesThe WWT code is licensed under the [MIT License]. The copyright to the code isowned by the [.NET Foundation].[MIT License]: https://opensource.org/licenses/MIT</longdescription>
</pkgmetadata>