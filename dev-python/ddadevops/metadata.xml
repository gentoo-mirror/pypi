<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dda-devops-build[![Slack](https://img.shields.io/badge/chat-clojurians-green.svg?style=flat)](https://clojurians.slack.com/messages/#dda-pallet/) | [&lt;img src=&quot;https://meissa-gmbh.de/img/community/Mastodon_Logotype.svg&quot; width=20 alt=&quot;team@social.meissa-gmbh.de&quot;&gt; team@social.meissa-gmbh.de](https://social.meissa-gmbh.de/@team) | [Website &amp; Blog](https://domaindrivenarchitecture.org)![release prod](https://github.com/DomainDrivenArchitecture/dda-devops-build/workflows/release%20prod/badge.svg)dda-devops-build integrates all the tools we use to work with clouds &amp; provide some nice functions around.Tools we support are* terraform: for setting up the plain infrastructure around.* docker: for creating images* c4k: for generating kubernetes manifests* provs: for setting up small single-node k3s clusters* gopass: for credential management on devops computers* cloud providers: hetzner, digitalocean, awsIn addition we provide a ReleaseMixin for release related tasks like tag / publish &amp; version-bump```mermaidclassDiagram    class DevopsBuild {        name()        build_path()        initialize_build_dir()    }    class DevopsTerraformBuild {        initialize_build_dir()        post_build()        read_output_json()        plan()        plan_fail_on_diff()        apply(auto_approve=False)        refresh()        destroy(auto_approve=False)        tf_import(tf_import_name,tf_import_resource)    }    class DevopsImageBuild {        initialize_build_dir()        image()        drun()        dockerhub_login()        dockerhub_publish()        test()    }    class ReleaseMixin {        prepare_release()        tag_and_push_release()    }        class ProvsK3sBuild {        def update_runtime_config(dns_record)        write_provs_config()        provs_apply(dry_run=False)    }    class C4kBuild {        def update_runtime_config(dns_record)        def write_c4k_config()        def write_c4k_auth()        c4k_apply(dry_run=False)    }    DevopsBuild &lt;|-- DevopsImageBuild    DevopsBuild &lt;|-- DevopsTerraformBuild    DevopsBuild &lt;|-- ReleaseMixin    DevopsBuild &lt;|-- ProvsK3sBuild    DevopsBuild &lt;|-- C4kBuild    link DevopsBuild &quot;dda-devops-build/src/doc/DevopsBuild.md&quot;    link DevopsImageBuild &quot;dda-devops-build/src/doc/DevopsImageBuild.md&quot;    link DevopsTerraformBuild &quot;dda-devops-build/src/doc/DevopsTerraformBuild.md&quot;    link ReleaseMixin &quot;dda-devops-build/src/doc/ReleaseMixin.md&quot;    link ProvsK3sBuild &quot;dda-devops-build/src/doc/ProvsK3sBuild.md&quot;    link C4kBuild &quot;dda-devops-build/src/doc/C4kBuild.md&quot;```Principles we follow are:* Seperate build artefacts from version controlled code* Domain Driven Design - in order to stay sustainable## InstallationEnsure that yout python3 version is at least Python 3.10```sudo apt install python3-pippip3 install -r requirements.txtexport PATH=$PATH:~/.local/bin```## Reference* [DevopsBuild](./doc/DevopsBuild.md)* [DevopsImageBuild](./doc/DevopsImageBuild.md)* [DevopsTerraformBuild](./doc/DevopsTerraformBuild.md)  * [AwsProvider](doc/DevopsTerraformBuildWithAwsProvider.md)  * [DigitaloceanProvider](doc/DevopsTerraformBuildWithDigitaloceanProvider.md)  * [HetznerProvider](doc/DevopsTerraformBuildWithHetznerProvider.md)* [ReleaseMixin](./doc/ReleaseMixin.md)* [ProvsK3sBuild](doc/ProvsK3sBuild.md)* [C4kBuild](doc/C4kBuild.md)## Example Buildlets assume the following project structure```my-project   | -&gt; my-module   |       | -&gt; build.py   |       | -&gt; some-terraform.tf   | -&gt; an-other-module   | -&gt; target  (here will the build happen)   |       | -&gt; ...``````pythonfrom pybuilder.core import task, initfrom ddadevops import *name = 'my-project'MODULE = 'my-module'PROJECT_ROOT_PATH = '..'@initdef initialize(project):    project.build_depends_on(&quot;ddadevops&gt;=4.0.0-dev&quot;)    config = {        &quot;credentials_mapping&quot;: [            {                &quot;gopass_path&quot;: environ.get(&quot;DIGITALOCEAN_TOKEN_KEY_PATH&quot;, None),                &quot;name&quot;: &quot;do_api_key&quot;,            },            {                &quot;gopass_path&quot;: environ.get(&quot;HETZNER_API_KEY_PATH&quot;, None),                &quot;name&quot;: &quot;hetzner_api_key&quot;,            },        ],        &quot;name&quot;: name,        &quot;module&quot;: MODULE,        &quot;stage&quot;: environ[&quot;STAGE&quot;],        &quot;project_root_path&quot;: PROJECT_ROOT_PATH,        &quot;build_types&quot;: [&quot;TERRAFORM&quot;],        &quot;mixin_types&quot;: [],        &quot;tf_provider_types&quot;: [&quot;DIGITALOCEAN&quot;, &quot;HETZNER&quot;],        &quot;tf_use_workspace&quot;: False,        &quot;tf_terraform_semantic_version&quot;: &quot;1.4.2&quot;,        &quot;do_as_backend&quot;: True,        &quot;do_bucket&quot;: &quot;your-bucket&quot;,    }    build = DevopsTerraformBuild(project, config)    build.initialize_build_dir()@taskdef plan(project):    build = get_devops_build(project)    build.plan()@taskdef apply(project):    build = get_devops_build(project)    build.apply(True)@taskdef destroy(project):    build = get_devops_build(project)    build.destroy(True)```## Snapshot &amp; Release```pyb dev publish uploadpip3 install --upgrade ddadevops --prepyb [patch|minor|major]pip3 install --upgrade ddadevops```## Development &amp; mirrorsDevelopment happens at: https://repo.prod.meissa.de/meissa/dda-devops-buildMirrors are:* https://gitlab.com/domaindrivenarchitecture/dda-devops-build (issues and PR, CI)For more details about our repository model see: https://repo.prod.meissa.de/meissa/federate-your-repos## LicenseCopyright © 2021 meissa GmbHLicensed under the [Apache License, Version 2.0](LICENSE) (the &quot;License&quot;)## LicenseCopyright © 2023 meissa GmbHLicensed under the [Apache License, Version 2.0](LICENSE) (the &quot;License&quot;)</longdescription>
</pkgmetadata>