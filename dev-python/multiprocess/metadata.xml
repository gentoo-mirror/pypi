<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>-----------------------------------------------------------------multiprocess: better multiprocessing and multithreading in python-----------------------------------------------------------------About Multiprocess==================``multiprocess`` is a fork of ``multiprocessing``. ``multiprocess`` extends ``multiprocessing`` to provide enhanced serialization, using `dill`. ``multiprocess`` leverages ``multiprocessing`` to support the spawning of processes using the API of the python standard library's ``threading`` module. ``multiprocessing`` has been distributed as part of the standard library since python 2.6.``multiprocess`` is part of ``pathos``,  a python framework for heterogeneous computing.``multiprocess`` is in active development, so any user feedback, bug reports, comments,or suggestions are highly appreciated.  A list of issues is located at https://github.com/uqfoundation/multiprocess/issues, with a legacy list maintained at https://uqfoundation.github.io/project/pathos/query.Major Features==============``multiprocess`` enables:    - objects to be transferred between processes using pipes or multi-producer/multi-consumer queues    - objects to be shared between processes using a server process or (for simple data) shared memory``multiprocess`` provides:    - equivalents of all the synchronization primitives in ``threading``    - a ``Pool`` class to facilitate submitting tasks to worker processes    - enhanced serialization, using ``dill``Current Release===============The latest released version of ``multiprocess`` is available from:    https://pypi.org/project/multiprocess``multiprocess`` is distributed under a 3-clause BSD license, and is a fork of ``multiprocessing``.Development Version===================You can get the latest development version with all the shiny new features at:    https://github.com/uqfoundationIf you have a new contribution, please submit a pull request.Installation============``multiprocess`` can be installed with ``pip``::    $ pip install multiprocessFor python 2, a C compiler is required to build the included extension module from source. Python 3 and binary installs do not require a C compiler.Requirements============``multiprocess`` requires:    - ``python`` (or ``pypy``), **&gt;=3.7**    - ``setuptools``, **&gt;=42**    - ``dill``, **&gt;=0.3.6**Basic Usage===========The ``multiprocess.Process`` class follows the API of ``threading.Thread``.For example ::    from multiprocess import Process, Queue    def f(q):        q.put('hello world')    if __name__ == '__main__':        q = Queue()        p = Process(target=f, args=[q])        p.start()        print (q.get())        p.join()Synchronization primitives like locks, semaphores and conditions areavailable, for example ::    &gt;&gt;&gt; from multiprocess import Condition    &gt;&gt;&gt; c = Condition()    &gt;&gt;&gt; print (c)    &lt;Condition(&lt;RLock(None, 0)&gt;), 0&gt;    &gt;&gt;&gt; c.acquire()    True    &gt;&gt;&gt; print (c)    &lt;Condition(&lt;RLock(MainProcess, 1)&gt;), 0&gt;One can also use a manager to create shared objects either in sharedmemory or in a server process, for example ::    &gt;&gt;&gt; from multiprocess import Manager    &gt;&gt;&gt; manager = Manager()    &gt;&gt;&gt; l = manager.list(range(10))    &gt;&gt;&gt; l.reverse()    &gt;&gt;&gt; print (l)    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]    &gt;&gt;&gt; print (repr(l))    &lt;Proxy[list] object at 0x00E1B3B0&gt;Tasks can be offloaded to a pool of worker processes in various ways,for example ::    &gt;&gt;&gt; from multiprocess import Pool    &gt;&gt;&gt; def f(x): return x*x    ...    &gt;&gt;&gt; p = Pool(4)    &gt;&gt;&gt; result = p.map_async(f, range(10))    &gt;&gt;&gt; print (result.get(timeout=1))    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]When ``dill`` is installed, serialization is extended to most objects,for example ::    &gt;&gt;&gt; from multiprocess import Pool    &gt;&gt;&gt; p = Pool(4)    &gt;&gt;&gt; print (p.map(lambda x: (lambda y:y**2)(x) + x, xrange(10)))    [0, 2, 6, 12, 20, 30, 42, 56, 72, 90]More Information================Probably the best way to get started is to look at the documentation athttp://multiprocess.rtfd.io. See ``multiprocess.examples`` for a set of examplescripts. You can also run the test suite with ``python -m multiprocess.tests``.Please feel free to submit a ticket on github, or ask a question onstackoverflow (**@Mike McKerns**).  If you would like to share how you use``multiprocess`` in your work, please send an email (to **mmckerns at uqfoundation dot org**).Citation========If you use ``multiprocess`` to do research that leads to publication, we ask that youacknowledge use of ``multiprocess`` by citing the following in your publication::    M.M. McKerns, L. Strand, T. Sullivan, A. Fang, M.A.G. Aivazis,    &quot;Building a framework for predictive science&quot;, Proceedings of    the 10th Python in Science Conference, 2011;    http://arxiv.org/pdf/1202.1056    Michael McKerns and Michael Aivazis,    &quot;pathos: a framework for heterogeneous computing&quot;, 2010- ;    https://uqfoundation.github.io/project/pathosPlease see https://uqfoundation.github.io/project/pathos orhttp://arxiv.org/pdf/1202.1056 for further information.</longdescription>
</pkgmetadata>