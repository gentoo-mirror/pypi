<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://github.com/geopython/pygeometa/workflows/build%20%E2%9A%99%EF%B8%8F/badge.svg)](https://github.com/geopython/pygeometa/actions)[![Join the chat at https://matrix.to/#/#geopython_pygeometa:gitter.im](https://badges.gitter.im/Join%20Chat.svg)](https://matrix.to/#/#geopython_pygeometa:gitter.im)# pygeometa[pygeometa](https://geopython.github.io/pygeometa) is a Python package togenerate metadata for geospatial datasets.## Installationpygeometa is best installed and used within a Python virtualenv.### Requirements* Python 3 and above* Python [virtualenv](https://virtualenv.pypa.io/) package### DependenciesDependencies are listed in [requirements.txt](requirements.txt). Dependenciesare automatically installed during pygeometa's installation.### Installing the Package```bashpython3 -m venv my-envcd my-env. bin/activategit clone https://github.com/geopython/pygeometa.gitcd pygeometapython3 setup.py buildpython3 setup.py install```## Running### From the command line```bash# show all subcommandspygeometa# show all supported schemaspygeometa metadata schemas# provide a basic sanity check/report on an MCFpygeometa metadata info path/to/file.yml# generate an ISO 19139 document to stdoutpygeometa metadata generate path/to/file.yml --schema=iso19139# generate an ISO 19139 document to diskpygeometa metadata generate path/to/file.yml --schema=iso19139 --output=some_file.xml# generate an ISO 19139 document to disk with debugging (ERROR, WARNING, INFO, DEBUG)pygeometa metadata generate path/to/file.yml --schema=iso19139 --output=some_file.xml --verbosity=DEBUG # add verbose (ERROR, WARNING, INFO, DEBUG)# use your own defined schemapygeometa metadata generate path/to/file.yml --schema_local=/path/to/my-schema --output=some_file.xml  # to file# validate your MCFpygeometa metadata validate path/to/file.yml# import a metadata document to MCFpygeometa metadata import path/to/file.xml --schema=iso19139# transform from one metadata representation to anotherpygeometa metadata transform path/to/file.xml --input-schema=iso19139 --output-schema=oarec-record```### Supported schemasSchemas supported by pygeometa:* dcat, [reference](https://www.w3.org/TR/vocab-dcat-2/)* iso19139, [reference](http://www.iso.org/iso/catalogue_detail.htm?csnumber=32557)* iso19139-hnap, [reference](http://www.gcpedia.gc.ca/wiki/Federal_Geospatial_Platform/Policies_and_Standards/Catalogue/Release/Appendix_B_Guidelines_and_Best_Practices/Guide_to_Harmonized_ISO_19115:2003_NAP)* OGC API - Records - Part 1: Core, record model, [reference](https://github.com/opengeospatial/ogcapi-records/blob/master/core/openapi/schemas/record.yaml)* SpatioTemporal Asset Catalog [(STAC)](https://stacspec.org)* iso19139-2, [reference](https://www.iso.org/standard/67039.html)* [wmo-cmp](doc/content/reference/formats/wmo-cmp.md), [reference](http://wis.wmo.int/2013/metadata/version_1-3-0/WMO_Core_Metadata_Profile_v1.3_Part_1.pdf)* [wmo-wcmp2](doc/content/reference/formats/wmo-wcmp2.md), [reference](https://wmo-im.github.io/wcmp2)* [wmo-wigos](doc/content/reference/formats/wmo-wigos.md), [reference](https://library.wmo.int/opac/doc_num.php?explnum_id=3653)* Local schema, specified with ```--schema_local=/path/to/my-schema```### Using the API from Python```pythonfrom pygeometa.core import read_mcf, render_j2_template# read from diskmcf_dict = read_mcf('/path/to/file.yml')# read from stringmcf_dict = read_mcf(mcf_string)# choose ISO 19139 output schemafrom pygeometa.schemas.iso19139 import ISO19139OutputSchemaiso_os = ISO19139OutputSchema()# default schemaxml_string = iso_os.write(mcf_dict)# user-defined schemaxml_string = render_j2_template(mcf_dict, template_dir='/path/to/new-schema')# write to diskwith open('output.xml', 'wb') as ff:    ff.write(xml_string)```## Development### Setting up a Development EnvironmentSame as installing a package.  Use a virtualenv.  Also install developerrequirements:```bashpip3 install -r requirements-dev.txt```### Adding a Metadata Schema to the CoreAdding an output metadata schemas to pygeometa involves extending`pygeometa.schemas.base.BaseOutputSchema` and supporting the `write`function to return a string of exported metadata content.  If you are usingJinja2 templates, see the next section.  If you are using another means ofgenerating metadata (lxml, xml.etree, json, etc.), override the ABS `write`class to emit a string using your tooling/workflow accordingly.  See thebelow sections for examples.Once you have added your metadata schema, you need to register it withpygeometa's schema registry:```bashvi pygeometa/schemas/__init__.py# edit the SCHEMAS dict with the metadata schema name and dotted path of class```#### Jinja2 templatesTo add support for a new metadata schema using Jinja2 templates:```bashcp -r pygeometa/schemas/iso19139 pygeometa/schemas/new-schema```Then modify `*.j2` files in the new `pygeometa/schemas/new-schema` directoryto comply to new metadata schema.#### Custom toolingTo add support for a new metadata schemas using other tooling/workflow:```bashmkdir pygeometa/schemas/foocp pygeometa/schemas/iso19139/__init__.py pygeometa/schemas/foovi pygeometa/schemas/foo/__init__.py# update class name and super().__init__() function accordingly ### Running Tests```bash# via setuptoolspython3 setup.py test# manuallycd testspython3 run_tests.py```## Releasing```bash# update versionvi pygeometa/__init__.pyvi debian/changelog  # add changelog entry and summary of updatesgit commit -m 'update release version' pygeometa/__init__.py debian/changelog# push changesgit push origin mastergit tag -a x.y.z -m 'tagging release x.y.z'# push taggit push --tagsrm -fr build dist *.egg-infopython3 setup.py sdist bdist_wheel --universaltwine upload dist/*```### Code Conventions* [PEP8](https://www.python.org/dev/peps/pep-0008)### Bugs and IssuesAll bugs, enhancements and issues are managed on [GitHub](https://github.com/geopython/pygeometa/issues).## Contact* [Tom Kralidis](https://github.com/tomkralidis)* [Alexandre Leroux](https://github.com/alexandreleroux)</longdescription>
</pkgmetadata>