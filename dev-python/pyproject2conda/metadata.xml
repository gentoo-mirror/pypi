<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- markdownlint-disable MD041 --&gt;[![Repo][repo-badge]][repo-link] [![Docs][docs-badge]][docs-link][![PyPI license][license-badge]][license-link][![PyPI version][pypi-badge]][pypi-link][![Conda (channel only)][conda-badge]][conda-link][![Code style: black][black-badge]][black-link]&lt;!--  For more badges, see  https://shields.io/category/other  https://naereen.github.io/badges/  [pypi-badge]: https://badge.fury.io/py/pyproject2conda--&gt;[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg[black-link]: https://github.com/psf/black[pypi-badge]: https://img.shields.io/pypi/v/pyproject2conda[pypi-link]: https://pypi.org/project/pyproject2conda[docs-badge]: https://img.shields.io/badge/docs-sphinx-informational[docs-link]: https://pages.nist.gov/pyproject2conda/[repo-badge]: https://img.shields.io/badge/--181717?logo=github&amp;logoColor=ffffff[repo-link]: https://github.com/usnistgov/pyproject2conda[conda-badge]: https://img.shields.io/conda/v/conda-forge/pyproject2conda[conda-link]: https://anaconda.org/conda-forge/pyproject2conda[license-badge]: https://img.shields.io/pypi/l/cmomy?color=informational[license-link]: https://github.com/usnistgov/pyproject2conda/blob/main/LICENSE&lt;!-- other links --&gt;[poetry2conda]: https://github.com/dojeda/poetry2conda# `pyproject2conda`A script to convert `pyproject.toml` dependencies to `environemnt.yaml` files.## OverviewThe main goal of `pyproject2conda` is to provide a means to keep all basicdependency information, for both `pip` based and `conda` based environments, in`pyproject.toml`. I often use a mix of pip and conda when developing packages,and in my everyday workflow. Some packages just aren't available on both. If youuse poetry, I'd highly recommend [poetry2conda].## Features- Simple comment based syntax to add information to dependencies when creating  `environment.yaml`## StatusThis package is actively used by the author, but is still very much a work inprogress. Please feel free to create a pull request for wanted features andsuggestions!## Quick startUse one of the following```bashpip install pyproject2conda```or```bashconda install -c conda-forge pyproject2conda```## Example usage### Basic usage&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cogimport subprocessimport shlexfrom functools import lru_cache@lru_cachedef get_pyproject(path):    with open(path, 'r') as f:        lines = [_.strip() for _ in f]    return linesdef run_command(cmd, wrapper=&quot;bash&quot;, include_cmd=True, bounds=None):    args = shlex.split(cmd)    output = subprocess.check_output(args)    total = output.decode()    if bounds is not None:        total = total.split(&quot;\n&quot;)[bounds[0]:bounds[1]]        if bounds[0] is not None:            total = [&quot;...\n&quot;] + total        if bounds[1] is not None:            total = total + [&quot;\n ...\n&quot;]        total = &quot;\n&quot;.join(total)    if include_cmd:        total = f&quot;$ {cmd}\n{total}&quot;    if wrapper:        total = f&quot;```{wrapper}\n&quot;  + total + &quot;```\n&quot;    print(total)def cat_lines(        path=&quot;tests/data/test-pyproject.toml&quot;,        begin=None, end=None, begin_dot=None, end_dot=None,    ):    lines = get_pyproject(path)    begin_dot = begin_dot or begin is not None    end_dot = end_dot or end is not None    if isinstance(begin, str):        begin = lines.index(begin)    if isinstance(end, str):        end = lines.index(end)    output = '\n'.join(lines[slice(begin, end)])    if begin_dot:        output = &quot;# ...\n&quot; +  output    if end_dot:        output = output + &quot;\n# ...&quot;    output = &quot;\n```toml\n&quot; + output + &quot;\n```\n&quot;    print(output)]]] --&gt;&lt;!-- [[[end]]] --&gt;Consider the `toml` file[test-pyproject.toml](./tests/data/test-pyproject.toml).&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=None, end=&quot;[project.optional-dependencies]&quot;, begin_dot=False)]]] --&gt;```toml[project]name = &quot;hello&quot;requires-python = &quot;&gt;=3.8,&lt;3.11&quot;dependencies = [&quot;athing&quot;, # p2c: -p # a comment&quot;bthing&quot;, # p2c: -s &quot;bthing-conda&quot;&quot;cthing; python_version &lt; '3.10'&quot;, # p2c: -c conda-forge]# ...```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;Note the comment lines `# p2c:...`. These are special tokens that`pyproject2conda` will analyze. The basic options are:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;&quot;&quot;python -c &quot;from pyproject2conda.parser import _default_parser; _default_parser().parse_args(['--help'])&quot; &quot;&quot;&quot;, include_cmd=False, wrapper=&quot;bash&quot;)]]] --&gt;```bashusage: -c [-h] [-c CHANNEL] [-p] [-s] [package ...]Parser searches for comments '# p2c: [OPTIONS] CONDA-PACKAGESpositional arguments:  packageoptions:  -h, --help            show this help message and exit  -c CHANNEL, --channel CHANNEL                        Channel to add to the pyproject requirement  -p, --pip             If specified, install pyproject dependency with pip  -s, --skip            If specified skip pyproject dependency on this line```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;So, if we run the following, we get:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.tomlchannels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;Note that other comments can be mixed in.By default, the python version is not included in the resulting conda output. Toinclude the specification from `pyproject.toml`, use `--python-include` option:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml --python-include&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml --python-includechannels:  - conda-forgedependencies:  - python&gt;=3.8,&lt;3.11  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;### Specify python versionTo specify a specific value of python in the output, pass a value with:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml --python-include python=3.9&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml --python-include python=3.9channels:  - conda-forgedependencies:  - python=3.9  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;Note that this is for including python in the resulting environment file.You can also constrain packages by the python version using the standard`pyproject.toml` syntax `&quot;...; python_version &lt; 'some-version-number'&quot;`. For isparsed for both the pip packages and conda packages:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml --python-version 3.10&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml --python-version 3.10channels:  - conda-forgedependencies:  - bthing-conda  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;It is common to want to specify the python version and include it in theresulting environment file. You could, for example use:&lt;!-- markdownlint-disable MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml --python-version 3.10 --python-include python=3.10&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml --python-version 3.10 --python-include python=3.10channels:  - conda-forgedependencies:  - python=3.10  - bthing-conda  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;&lt;!-- markdownlint-enable MD013 --&gt;Because this is common, you can also just pass the option `-p/--python`:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml --python 3.10&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml --python 3.10channels:  - conda-forgedependencies:  - python=3.10  - bthing-conda  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;### Adding extra conda dependencies and pip requirementsYou can also add additional conda and pip dependencies with the flags`-d/--deps` and `-r/--reqs`, respectively. Adding the last example:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml -d dep -r req&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml -d dep -r reqchannels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - dep  - pip  - pip:      - athing      - req```&lt;!-- [[[end]]] --&gt;These will also obey dependencies like `dep:python_version&lt;={version}`. Pass theflags multiple times to pass multiple dependencies.### Command &quot;aliases&quot;The name `pyproject2conda` can be a bit long to type. For this reason, thepackage also ships with the alias `p2c`, which has the exact same functionality.Additionally, the subcommands can be shortened to a unique match:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;p2c y -f tests/data/test-pyproject.toml --python 3.10&quot;)]]] --&gt;```bash$ p2c y -f tests/data/test-pyproject.toml --python 3.10channels:  - conda-forgedependencies:  - python=3.10  - bthing-conda  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;### Installing extrasGiven the extra dependency:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=&quot;[project.optional-dependencies]&quot;, end=&quot;[tool.pyproject2conda]&quot;)]]] --&gt;```toml# ...[project.optional-dependencies]test = [&quot;pandas&quot;,&quot;pytest&quot;, # p2c: -c conda-forge]dev-extras = [# p2c: -s &quot;additional-thing; python_version &lt; '3.9'&quot; # this is an additional conda package## p2c: -s &quot;another-thing&quot; # this will be skipped because of ## before p2c.&quot;matplotlib&quot;, # p2c: -s conda-matplotlib]dev = [&quot;hello[test]&quot;, &quot;hello[dev-extras]&quot;]dist-pypi = [# this is intended to be parsed with --no-base option&quot;setuptools&quot;,&quot;build&quot;, # p2c: -p]# ...```&lt;!-- [[[end]]] --&gt;&lt;!-- markdownlint-restore --&gt;&lt;!-- prettier-ignore-end --&gt;and running the following gives:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml -e test&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml -e testchannels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - conda-forge::pytest  - pandas  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;`pyproject2conda` also works with self referenced dependencies:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml -e dev&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml -e devchannels:  - conda-forgedependencies:  - additional-thing  - bthing-conda  - conda-forge::cthing  - conda-forge::pytest  - conda-matplotlib  - pandas  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;This also shows that `p2c` comments without dependencies are also parsed. Tocomment out such lines, make sure `p2c` is preceded by `##`.### Header in outputBy default, `pyproject2conda` includes a header in most output files to notethat the files are auto generated. No header is included by default when writingto standard output. To override this behavior, pass `--header/--noheader`:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml --header&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml --header## This file is autogenerated by pyproject2conda# with the following command:##     $ pyproject2conda yaml -f tests/data/test-pyproject.toml --header## You should not manually edit this file.# Instead edit the corresponding pyproject.toml file.#channels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;### Usage within python`pyproject2conda` can also be used within python:```pycon&gt;&gt;&gt; from pyproject2conda import PyProject2Conda&gt;&gt;&gt; p = PyProject2Conda.from_path(&quot;./tests/data/test-pyproject.toml&quot;)# Basic environment&gt;&gt;&gt; print(p.to_conda_yaml(python_include=&quot;get&quot;).strip())channels:  - conda-forgedependencies:  - python&gt;=3.8,&lt;3.11  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing# Environment with extras&gt;&gt;&gt; print(p.to_conda_yaml(extras=&quot;test&quot;).strip())channels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - conda-forge::pytest  - pandas  - pip  - pip:      - athing```### Configuration`pyproject2conda` can be configured with a `[tool.pyproject2conda]` section in`pyproject.toml`. To specify conda channels use:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=&quot;[tool.pyproject2conda]&quot;, end=None)]]] --&gt;```toml# ...[tool.pyproject2conda]channels = ['conda-forge']# these are the same as the default values of `p2c project`template_python = &quot;py{py}-{env}&quot;template = &quot;{env}&quot;style = &quot;yaml&quot;# optionspython = [&quot;3.10&quot;]# Note that this is relative to the location of pyproject.tomluser_config = &quot;config/userconfig.toml&quot;default_envs = [&quot;test&quot;, &quot;dev&quot;, &quot;dist-pypi&quot;][tool.pyproject2conda.envs.&quot;test-extras&quot;]extras = [&quot;test&quot;]style = [&quot;yaml&quot;, &quot;requirements&quot;][[tool.pyproject2conda.overrides]]envs = ['test-extras', &quot;dist-pypi&quot;]base = false[[tool.pyproject2conda.overrides]]envs = [&quot;test&quot;, &quot;test-extras&quot;]python = [&quot;3.10&quot;, &quot;3.11&quot;]```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;Note that specifying channels at the command line overrides`tool.pyproject2conda.channels`.You can also specify environments without the base dependencies (those under`project.dependencies`) by passing the `--no-base` flag. This is useful fordefining environments for build, etc, that do not require the package beinstalled. For example:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=22, end=26)]]] --&gt;```toml# ...dev = [&quot;hello[test]&quot;, &quot;hello[dev-extras]&quot;]dist-pypi = [# this is intended to be parsed with --no-base option&quot;setuptools&quot;,# ...```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;These can be accessed using either of the following:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/data/test-pyproject.toml -e dist-pypi --no-base&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/data/test-pyproject.toml -e dist-pypi --no-basechannels:  - conda-forgedependencies:  - setuptools  - pip  - pip:      - build```&lt;!-- [[[end]]] --&gt;or```pycon&gt;&gt;&gt; from pyproject2conda import PyProject2Conda&gt;&gt;&gt; p = PyProject2Conda.from_path(&quot;./tests/data/test-pyproject.toml&quot;)# Basic environment&gt;&gt;&gt; print(p.to_conda_yaml(extras='dist-pypi', include_base_dependencies=False).strip())channels:  - conda-forgedependencies:  - setuptools  - pip  - pip:      - build```### Creating multiple environments from `pyproject.toml``pyproject2conda` provides a means to create all needed environment/requirementfiles in one go. We configure the environments using the `pyproject.toml` filesin the `[tool.pyproject2conda]` section. For example, example the configuration:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=&quot;[tool.pyproject2conda]&quot;, end=None)]]] --&gt;```toml# ...[tool.pyproject2conda]channels = ['conda-forge']# these are the same as the default values of `p2c project`template_python = &quot;py{py}-{env}&quot;template = &quot;{env}&quot;style = &quot;yaml&quot;# optionspython = [&quot;3.10&quot;]# Note that this is relative to the location of pyproject.tomluser_config = &quot;config/userconfig.toml&quot;default_envs = [&quot;test&quot;, &quot;dev&quot;, &quot;dist-pypi&quot;][tool.pyproject2conda.envs.&quot;test-extras&quot;]extras = [&quot;test&quot;]style = [&quot;yaml&quot;, &quot;requirements&quot;][[tool.pyproject2conda.overrides]]envs = ['test-extras', &quot;dist-pypi&quot;]base = false[[tool.pyproject2conda.overrides]]envs = [&quot;test&quot;, &quot;test-extras&quot;]python = [&quot;3.10&quot;, &quot;3.11&quot;]```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;run through the command `pyproject2conda project` (or `p2c project`):&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;p2c project -f tests/data/test-pyproject.toml --dry&quot;, wrapper=&quot;bash&quot;, bounds=(None, 45))]]] --&gt;```bash$ p2c project -f tests/data/test-pyproject.toml --dry# Creating yaml py310-test-extras.yamlchannels:  - conda-forgedependencies:  - python=3.10  - conda-forge::pytest  - pandas# Creating yaml py311-test-extras.yamlchannels:  - conda-forgedependencies:  - python=3.11  - conda-forge::pytest  - pandas# Creating requirements test-extras.txtpandaspytest# Creating yaml py310-test.yamlchannels:  - conda-forgedependencies:  - python=3.10  - bthing-conda  - conda-forge::pytest  - pandas  - pip  - pip:      - athing# Creating yaml py311-test.yamlchannels:  - conda-forgedependencies:  - python=3.11  - bthing-conda  - conda-forge::pytest  - pandas  - pip  - pip:      - athing# Creating yaml py310-dev.yamlchannels:  - conda-forgedependencies:  - python=3.10  - bthing-conda ...```&lt;!-- [[[end]]] --&gt;Note that here, we have used the `--dry` option to just print the output. Inproduction, you'd omit this flag, and files according to `--template` and`--template-python` would be used.The options under `[tool.pyproject2conda]` follow the command line options(replace `-` with `_`). To specify an environment, you can either use the`[tool.pyproject.envs.&quot;environment-name&quot;]` method, or, if the environment is thesame as the &quot;extras&quot; name, you can just specify it under`tool.pyproject2conda.default_envs`:```toml[tool.pyproject2conda]# ...default_envs = [&quot;test&quot;]```is equivalent to```toml[tool.pyproject2conda.envs.test]extras = [&quot;tests&quot;]```To specify a conda environment (`yaml`) file, pass `style = &quot;yaml&quot;` (thedefault). To specify a requirements file, pass `style = &quot;requirements&quot;`. You canspecify both to make both.Options in a given `tool.pyproject2conda.envs.&quot;environemnt-name&quot;` sectionoverride those at the `tool.pyproject2conda` level. So, for example:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(begin='[tool.pyproject2conda.envs.&quot;test-extras&quot;]', end='[[tool.pyproject2conda.overrides]]', begin_dot=False)]]] --&gt;```toml# ...[tool.pyproject2conda.envs.&quot;test-extras&quot;]extras = [&quot;test&quot;]style = [&quot;yaml&quot;, &quot;requirements&quot;]# ...```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;will override use the two styles instead of the default of `yaml`.You can also override options for multiple environments using the`[[tools.pyproject2conda.overrides]]` list. Just specify the override option(s)and the environments to apply them to. For example, above we specify that thebase option is `False` for envs `test-extras` and `dist-pypi`, and that thepython version should be `3.10` and `3.11` for envs `test` and `test-extras`.So in all, options are picked up, in order, from the environment definition,then the overrides list, and finally, from the default options.You can also define &quot;user defined&quot; configurations. This can be done through theoption `--user-config`. This allows you to define your own environments outsideof the (most likely source controlled) `pyproject.toml` file. For example, wehave the option `user_config=config/userconfig.toml`.&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(path=&quot;./tests/data/config/userconfig.toml&quot;, begin=None, end=None)]]] --&gt;```toml[tool.pyproject2conda.envs.&quot;user-dev&quot;]extras = [&quot;dev&quot;, &quot;dist-pypi&quot;]deps = [&quot;extra-dep&quot;]reqs = [&quot;extra-req&quot;]name = &quot;hello&quot;```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;Note that the full path of this file is note that the path of the `user_conifg`file is relative to them`pyproject.toml` file. So, if the `pyproject.toml` fileis at `a/path/pyproject.toml`, the path of user configuration files will be`a/path/config/userconfig.toml`. We then can run the following:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;p2c project -f tests/data/test-pyproject.toml --dry --envs user-dev&quot;, wrapper=&quot;bash&quot;)]]] --&gt;```bash$ p2c project -f tests/data/test-pyproject.toml --dry --envs user-dev# Creating yaml py310-user-dev.yamlname: hellochannels:  - conda-forgedependencies:  - python=3.10  - bthing-conda  - conda-forge::pytest  - conda-matplotlib  - extra-dep  - pandas  - setuptools  - pip  - pip:      - athing      - build      - extra-req```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;### CLI options&lt;!-- markdownlint-disable MD013 --&gt;&lt;!-- prettier-ignore-start --&gt;&lt;!-- [[[cog  import os  os.environ[&quot;COG_MAX_WIDTH&quot;] = &quot;90&quot;  run_command(&quot;pyproject2conda --help&quot;, wrapper=&quot;bash&quot;)  cmds = [    &quot;list&quot;,    &quot;yaml&quot;,    &quot;requirements&quot;,    &quot;project&quot;,    &quot;conda-requirements&quot;,    &quot;json&quot;  ]  for cmd in cmds:    print(f&quot;#### {cmd}\n&quot;)    run_command(f&quot;pyproject2conda {cmd} --help&quot;, wrapper=&quot;bash&quot;)]]] --&gt;```bash$ pyproject2conda --help Usage: pyproject2conda [OPTIONS] COMMAND [ARGS]...╭─ Options ──────────────────────────────────────────────────────────────────────────────╮│ --version      Show the version and exit.                                              ││ --help         Show this message and exit.                                             │╰────────────────────────────────────────────────────────────────────────────────────────╯╭─ Commands ─────────────────────────────────────────────────────────────────────────────╮│ conda-requirements  Create requirement files for conda and pip.                        ││ json                Create json representation.                                        ││ list                List available extras                                              ││ project             Create multiple environment files from `pyproject.toml`            ││                     specification.                                                     ││ requirements        Create requirements.txt for pip dependencies.                      ││ yaml                Create yaml file from dependencies and optional-dependencies.      │╰────────────────────────────────────────────────────────────────────────────────────────╯```#### list```bash$ pyproject2conda list --help Usage: pyproject2conda list [OPTIONS] List available extras╭─ Options ──────────────────────────────────────────────────────────────────────────────╮│ --file     -f  PATH  input pyproject.toml file                                         ││ --verbose  -v                                                                          ││ --help               Show this message and exit.                                       │╰────────────────────────────────────────────────────────────────────────────────────────╯```#### yaml```bash$ pyproject2conda yaml --help Usage: pyproject2conda yaml [OPTIONS] Create yaml file from dependencies and optional-dependencies.╭─ Options ──────────────────────────────────────────────────────────────────────────────╮│ --file                -f  PATH                input pyproject.toml file                ││ --extra               -e  TEXT                Extra depenedencies. Can specify         ││                                               multiple times for multiple extras.      ││ --channel             -c  TEXT                conda channel.  Can specify. Overrides   ││                                               [tool.pyproject2conda.channels]          ││ --output              -o  PATH                File to output results                   ││ --name                -n  TEXT                Name of conda env                        ││ --python-include          TEXT                If flag passed without options, include  ││                                               python spec from pyproject.toml in yaml  ││                                               output. If value passed, use this value  ││                                               (exactly) in the output. So, for         ││                                               example, pass `--python-include          ││                                               &quot;python=3.8&quot;`                            ││ --python-version          TEXT                Python version to check `python_verion   ││                                               &lt;=&gt; {python_version}` lines against.     ││                                               That is, this version is used to limit   ││                                               packages in resulting output. For        ││                                               example, if have a line like `a-package; ││                                               python_version &lt; '3.9'`, Using           ││                                               `--python-version 3.10` will not include ││                                               `a-package`, while `--python-version     ││                                               3.8` will include `a-package`.           ││ --python              -p  TEXT                Python version. Passing `--python        ││                                               {version}` is equivalent to passing      ││                                               `--python-version={version}              ││                                               --python-include=python{version}`. If    ││                                               passed, this overrides values of passed  ││                                               via `--python-version` and               ││                                               `--python-include`.                      ││ --base/--no-base                              Default is to include base               ││                                               (project.dependencies) with extras.      ││                                               However, passing `--no-base` will        ││                                               exclude base dependencies. This is       ││                                               useful to define environments that       ││                                               should exclude base dependencies (like   ││                                               build, etc) in pyproject.toml.           ││ --sort/--no-sort                              Default is to sort the dependencies      ││                                               (excluding `--python-include`). Pass     ││                                               `--no-sort` to instead place             ││                                               dependencies in order they are gathered. ││ --header/--no-header                          If True (--header) include header line   ││                                               in output. Default is to include the     ││                                               header for output to a file, and not to  ││                                               include header when writing to stdout.   ││ --overwrite           -w  [check|force|skip]  What to do if output file exists.        ││                                               * check (default): check if output       ││                                               exists. Create if missing. If output     ││                                               exists and                               ││                                                 passed `--file` is newer, recreate     ││                                               output, else skip.                       ││                                               * skip: If output exists, skip.          ││                                               * force: force recreate output.          ││ --verbose             -v                                                               ││ --deps                -d  TEXT                Additional conda dependencies.           ││ --reqs                -r  TEXT                Additional pip requirements.             ││ --help                                        Show this message and exit.              │╰────────────────────────────────────────────────────────────────────────────────────────╯```#### requirements```bash$ pyproject2conda requirements --help Usage: pyproject2conda requirements [OPTIONS] Create requirements.txt for pip dependencies.╭─ Options ──────────────────────────────────────────────────────────────────────────────╮│ --extra               -e  TEXT                Extra depenedencies. Can specify         ││                                               multiple times for multiple extras.      ││ --file                -f  PATH                input pyproject.toml file                ││ --output              -o  PATH                File to output results                   ││ --base/--no-base                              Default is to include base               ││                                               (project.dependencies) with extras.      ││                                               However, passing `--no-base` will        ││                                               exclude base dependencies. This is       ││                                               useful to define environments that       ││                                               should exclude base dependencies (like   ││                                               build, etc) in pyproject.toml.           ││ --sort/--no-sort                              Default is to sort the dependencies      ││                                               (excluding `--python-include`). Pass     ││                                               `--no-sort` to instead place             ││                                               dependencies in order they are gathered. ││ --header/--no-header                          If True (--header) include header line   ││                                               in output. Default is to include the     ││                                               header for output to a file, and not to  ││                                               include header when writing to stdout.   ││ --overwrite           -w  [check|force|skip]  What to do if output file exists.        ││                                               * check (default): check if output       ││                                               exists. Create if missing. If output     ││                                               exists and                               ││                                                 passed `--file` is newer, recreate     ││                                               output, else skip.                       ││                                               * skip: If output exists, skip.          ││                                               * force: force recreate output.          ││ --verbose             -v                                                               ││ --reqs                -r  TEXT                Additional pip requirements.             ││ --help                                        Show this message and exit.              │╰────────────────────────────────────────────────────────────────────────────────────────╯```#### project```bash$ pyproject2conda project --help Usage: pyproject2conda project [OPTIONS] Create multiple environment files from `pyproject.toml` specification.╭─ Options ──────────────────────────────────────────────────────────────────────────────╮│ --file                -f  PATH                input pyproject.toml file                ││ --envs                    TEXT                List of environments to build files for. ││                                               Default to building all environments     ││ --template                TEXT                Template for environments that do not    ││                                               have a python version. Defaults to       ││                                               `{env}`.                                 ││ --template-python         TEXT                Template for environments that do have a ││                                               python version. Defaults to              ││                                               &quot;py{py}-{env}&quot;. For example, with        ││                                               `--template-python=&quot;py{py}-{env}&quot;` and   ││                                               `--python=3.8` and environment &quot;dev&quot;,    ││                                               output would be &quot;py38-dev&quot;               ││                                               * {py} -&gt; &quot;38&quot;                           ││                                               * {py_version} -&gt; &quot;3.8&quot;                  ││                                               * {env} -&gt; &quot;dev&quot;                         ││ --sort/--no-sort                              Default is to sort the dependencies      ││                                               (excluding `--python-include`). Pass     ││                                               `--no-sort` to instead place             ││                                               dependencies in order they are gathered. ││ --header/--no-header                          If True (--header) include header line   ││                                               in output. Default is to include the     ││                                               header for output to a file, and not to  ││                                               include header when writing to stdout.   ││ --overwrite           -w  [check|force|skip]  What to do if output file exists.        ││                                               * check (default): check if output       ││                                               exists. Create if missing. If output     ││                                               exists and                               ││                                                 passed `--file` is newer, recreate     ││                                               output, else skip.                       ││                                               * skip: If output exists, skip.          ││                                               * force: force recreate output.          ││ --verbose             -v                                                               ││ --dry/--no-dry                                If true, do a dry run                    ││ --user-config             TEXT                Additional toml file to supply           ││                                               configuration. This can be used to       ││                                               override/add environment files for your  ││                                               own use (apart from project env files).  ││                                               The (default) value `infer` means to     ││                                               infer the configuration from             ││                                               `--filename`.                            ││ --help                                        Show this message and exit.              │╰────────────────────────────────────────────────────────────────────────────────────────╯```#### conda-requirements```bash$ pyproject2conda conda-requirements --help Usage: pyproject2conda conda-requirements [OPTIONS] [PATH_CONDA] [PATH_PIP] Create requirement files for conda and pip. These can be install with, for example, conda install --file {path_conda} pip install -r {path_pip}╭─ Options ──────────────────────────────────────────────────────────────────────────────╮│ --extra               -e  TEXT  Extra depenedencies. Can specify multiple times for    ││                                 multiple extras.                                       ││ --python-include          TEXT  If flag passed without options, include python spec    ││                                 from pyproject.toml in yaml output. If value passed,   ││                                 use this value (exactly) in the output. So, for        ││                                 example, pass `--python-include &quot;python=3.8&quot;`          ││ --python-version          TEXT  Python version to check `python_verion &lt;=&gt;             ││                                 {python_version}` lines against. That is, this version ││                                 is used to limit packages in resulting output. For     ││                                 example, if have a line like `a-package;               ││                                 python_version &lt; '3.9'`, Using `--python-version 3.10` ││                                 will not include `a-package`, while `--python-version  ││                                 3.8` will include `a-package`.                         ││ --python              -p  TEXT  Python version. Passing `--python {version}` is        ││                                 equivalent to passing `--python-version={version}      ││                                 --python-include=python{version}`. If passed, this     ││                                 overrides values of passed via `--python-version` and  ││                                 `--python-include`.                                    ││ --channel             -c  TEXT  conda channel.  Can specify. Overrides                 ││                                 [tool.pyproject2conda.channels]                        ││ --file                -f  PATH  input pyproject.toml file                              ││ --base/--no-base                Default is to include base (project.dependencies) with ││                                 extras. However, passing `--no-base` will exclude base ││                                 dependencies. This is useful to define environments    ││                                 that should exclude base dependencies (like build,     ││                                 etc) in pyproject.toml.                                ││ --sort/--no-sort                Default is to sort the dependencies (excluding         ││                                 `--python-include`). Pass `--no-sort` to instead place ││                                 dependencies in order they are gathered.               ││ --header/--no-header            If True (--header) include header line in output.      ││                                 Default is to include the header for output to a file, ││                                 and not to include header when writing to stdout.      ││ --prefix                  TEXT  set conda-output=prefix + 'conda.txt',                 ││                                 pip-output=prefix + 'pip.txt'                          ││ --prepend-channel                                                                      ││ --deps                -d  TEXT  Additional conda dependencies.                         ││ --reqs                -r  TEXT  Additional pip requirements.                           ││ --help                          Show this message and exit.                            │╰────────────────────────────────────────────────────────────────────────────────────────╯```#### json```bash$ pyproject2conda json --help Usage: pyproject2conda json [OPTIONS] Create json representation. Keys are: &quot;dependencies&quot;: conda dependencies. &quot;pip&quot;: pip dependencies. &quot;channels&quot;: conda channels.╭─ Options ──────────────────────────────────────────────────────────────────────────────╮│ --extra           -e  TEXT  Extra depenedencies. Can specify multiple times for        ││                             multiple extras.                                           ││ --python-include      TEXT  If flag passed without options, include python spec from   ││                             pyproject.toml in yaml output. If value passed, use this   ││                             value (exactly) in the output. So, for example, pass       ││                             `--python-include &quot;python=3.8&quot;`                            ││ --python-version      TEXT  Python version to check `python_verion &lt;=&gt;                 ││                             {python_version}` lines against. That is, this version is  ││                             used to limit packages in resulting output. For example,   ││                             if have a line like `a-package; python_version &lt; '3.9'`,   ││                             Using `--python-version 3.10` will not include             ││                             `a-package`, while `--python-version 3.8` will include     ││                             `a-package`.                                               ││ --channel         -c  TEXT  conda channel.  Can specify. Overrides                     ││                             [tool.pyproject2conda.channels]                            ││ --file            -f  PATH  input pyproject.toml file                                  ││ --sort/--no-sort            Default is to sort the dependencies (excluding             ││                             `--python-include`). Pass `--no-sort` to instead place     ││                             dependencies in order they are gathered.                   ││ --output          -o  PATH  File to output results                                     ││ --base/--no-base            Default is to include base (project.dependencies) with     ││                             extras. However, passing `--no-base` will exclude base     ││                             dependencies. This is useful to define environments that   ││                             should exclude base dependencies (like build, etc) in      ││                             pyproject.toml.                                            ││ --deps            -d  TEXT  Additional conda dependencies.                             ││ --reqs            -r  TEXT  Additional pip requirements.                               ││ --help                      Show this message and exit.                                │╰────────────────────────────────────────────────────────────────────────────────────────╯```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;&lt;!-- markdownlint-enable MD013 --&gt;&lt;!-- end-docs --&gt;## DocumentationSee the [documentation][docs-link] for a look at `pyproject2conda` in action.## LicenseThis is free software. See [LICENSE][license-link].## Related workTBD## ContactThe author can be reached at &lt;wpk@nist.gov&gt;.## CreditsThis package was created with[Cookiecutter](https://github.com/audreyr/cookiecutter) and the[wpk-nist-gov/cookiecutter-pypackage](https://github.com/wpk-nist-gov/cookiecutter-pypackage)Project template forked from[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage).&lt;!--  LocalWords:  conda subcommands --&gt;&lt;!-- markdownlint-disable MD024 --&gt;# ChangelogChangelog for `pyproject2conda`## UnreleasedSee the fragment files in[changelog.d](https://github.com/usnistgov/pyproject2conda)&lt;!-- scriv-insert-here --&gt;## v0.5.1 — 2023-09-09### Added- Added `--sort/--no-sort` flag to cli. Default is to sort dependencies. This  fixes issues with changing order in `pyproject.toml` leading to different yaml  files.### Changed- Changed structure of the repo to better support some third party tools.- Moved nox environments from `.nox` to `.nox/{project-name}/envs`. This fixes  issues with ipykernel giving odd names for locally installed environments.- Moved repo specific dot files to the `config` directory (e.g.,  `.noxconfig.toml` to `config/userconfig.toml`). This cleans up the top level  of the repo.- added some support for using `nbqa` to run mypy/pyright on notebooks.- Added ability to bootstrap development environment using pipx. This should  simplify initial setup. See Contributing for more info.- Main repo now on usnistgov.This software was developed by employees of the National Institute of Standardsand Technology (NIST), an agency of the Federal Government. Pursuant to title 17United States Code Section 105, works of NIST employees are not subject tocopyright protection in the United States and are considered to be in the publicdomain. Permission to freely use, copy, modify, and distribute this software andits documentation without fee is hereby granted, provided that this notice anddisclaimer of warranty appears in all copies.THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHEREXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTYTHAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM FROMINFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO THESOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE. IN NO EVENTSHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DIRECT,INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, ORIN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT BASED UPON WARRANTY,CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS SUSTAINED BY PERSONS ORPROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUTOF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.Distributions of NIST software should also include copyright and licensingstatements of any third-party software that are legally bundled with the code incompliance with the conditions of those licenses.</longdescription>
</pkgmetadata>