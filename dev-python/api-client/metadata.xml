<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Unit Tests](https://github.com/MikeWooster/api-client/actions/workflows/test.yml/badge.svg)](https://github.com/MikeWooster/api-client/actions/workflows/test.yml)# Python API ClientA client for communicating with an api should be a clean abstractionover the third part api you are communicating with. It should be easy tounderstand and have the sole responsibility of calling the endpoints andreturning data.To achieve this, `APIClient` takes care of the other (often duplicated)responsibilities, such as authentication and response handling, movingthat code away from the clean abstraction you have designed.## Quick links1. [Installation](#Installation)2. [Client in action](#Usage)3. [Adding retries to requests](#Retrying)4. [Working with paginated responses](#Pagination)5. [Authenticating your requests](#Authentication-Methods)6. [Handling the formats of your responses](#Response-Handlers)7. [Correctly encoding your outbound request data](#Request-Formatters)8. [Handling bad requests and responses](#Exceptions)9. [Endpoints as code](#Endpoints)10. [Extensions](#Extensions)## Installation```bashpip install api-client```## Usage### Simple Example```pythonfrom apiclient import APIClientclass MyClient(APIClient):    def list_customers(self):        url = &quot;http://example.com/customers&quot;        return self.get(url)    def add_customer(self, customer_info):        url = &quot;http://example.com/customers&quot;        return self.post(url, data=customer_info)&gt;&gt;&gt; client = MyClient()&gt;&gt;&gt; client.add_customer({&quot;name&quot;: &quot;John Smith&quot;, &quot;age&quot;: 28})&gt;&gt;&gt; client.list_customers()[    ...,    {&quot;name&quot;: &quot;John Smith&quot;, &quot;age&quot;: 28},]```The `APIClient` exposes a number of predefined methods that you can callThis example uses `get` to perform a GET request on an endpoint.Other methods include: `post`, `put`, `patch` and `delete`. Moreinformation on these methods is documented in the [Interface](#APIClient-Interface).For a more complex use case example, see: [Extended example](#Extended-Example)## RetryingTo add some robustness to your client, the power of [tenacity](https://github.com/jd/tenacity)has been harnessed to add a `@retry_request` decorator to the `apiclient` toolkit.This will retry any request which responds with a 5xx status_code (which is normally safeto do as this indicates something went wrong when trying to make the request), or when an`UnexpectedError` occurs when attempting to establish the connection.`@retry_request` has been configured to retry for a maximum of 5 minutes, with an exponentialbackoff strategy.  For more complicated uses, the user can use tenacity themselves to createtheir own custom decorator.Usage:```pythonfrom apiclient import retry_requestclass MyClient(APIClient):    @retry_request    def retry_enabled_method():        ...```For more complex use cases, you can build your own retry decorator usingtenacity along with the custom retry strategy.For example, you can build a retry decorator that retries `APIRequestError`which waits for 2 seconds between retries and gives up after 5 attempts.```pythonimport tenacityfrom apiclient.retrying import retry_if_api_request_errorretry_decorator = tenacity.retry(    retry=retry_if_api_request_error(),    wait=tenacity.wait_fixed(2),    stop=tenacity.stop_after_attempt(5),    reraise=True,)```Or you can build a decorator that will retry only on specific statuscodes (following a failure).```pythonretry_decorator = tenacity.retry(    retry=retry_if_api_request_error(status_codes=[500, 501, 503]),    wait=tenacity.wait_fixed(2),    stop=tenacity.stop_after_attempt(5),    reraise=True,)```## PaginationIn order to support contacting pages that respond with multiple pages of data when making get requests,add a `@paginated` decorator to your client method.  `@paginated` can paginate the requests either wherethe pages are specified in the query parameters, or by modifying the url.Usage is simple in both cases; paginator decorators take a Callable with two required arguments:- `by_query_params` -&gt; callable takes `response` and `previous_page_params`.- `by_url` -&gt; callable takes `respones` and `previous_page_url`.The callable will need to return either the params in the case of `by_query_params`, or a new url in thecase of `by_url`.If the response is the last page, the function should return None.Usage:```pythonfrom apiclient import paginateddef next_page_by_params(response, previous_page_params):    # Function reads the response data and returns the query param    # that tells the next request to go to.    return {&quot;next&quot;: response[&quot;pages&quot;][&quot;next&quot;]}def next_page_by_url(response, previous_page_url):    # Function reads the response and returns the url as string    # where the next page of data lives.    return response[&quot;pages&quot;][&quot;next&quot;][&quot;url&quot;]class MyClient(APIClient):    @paginated(by_query_params=next_page_by_params)    def paginated_example_one():        ...    @paginated(by_url=next_page_by_url)    def paginated_example_two():        ...```## Authentication MethodsAuthentication methods provide a way in which you can customize theclient with various authentication schemes through dependency injection,meaning you can change the behaviour of the client without changing theunderlying implementation.The apiclient supports the following authentication methods, by specifyingthe initialized class on initialization of the client, as follows:```pythonclient = ClientImplementation(   authentication_method=&lt;AuthenticationMethodClass&gt;(),   response_handler=...,   request_formatter=...,)```### `NoAuthentication`This authentication method simply does not add anything to the client,allowing the api to contact APIs that do not enforce any authentication.Example:```pythonclient = ClientImplementation(   authentication_method=NoAuthentication(),   response_handler=...,   request_formatter=...,)```### `QueryParameterAuthentication`This authentication method adds the relevant parameter and token to theclient query parameters.  Usage is as follows:```pythonclient = ClientImplementation(    authentication_method=QueryParameterAuthentication(parameter=&quot;apikey&quot;, token=&quot;secret_token&quot;),    response_handler=...,    request_formatter=...,)```Example. Contacting a url with the following data```http://api.example.com/users?age=27```Will add the authentication parameters to the outgoing request:```http://api.example.com/users?age=27&amp;apikey=secret_token```### `HeaderAuthentication`This authentication method adds the relevant authorization header tothe outgoing request.  Usage is as follows:```pythonclient = ClientImplementation(    authentication_method=HeaderAuthentication(token=&quot;secret_value&quot;),    response_handler=...,    request_formatter=...,)# Constructs request header:{&quot;Authorization&quot;: &quot;Bearer secret_value&quot;}```The `Authorization` parameter and `Bearer` scheme can be adjusted byspecifying on method initialization.```pythonauthentication_method=HeaderAuthentication(   token=&quot;secret_value&quot;   parameter=&quot;apikey&quot;,   scheme=&quot;Token&quot;,)# Constructs request header:{&quot;apikey&quot;: &quot;Token secret_value&quot;}```Or alternatively, when APIs do not require a scheme to be set, you canspecify it as a value that evaluates to False to remove the scheme fromthe header:```pythonauthentication_method=HeaderAuthentication(   token=&quot;secret_value&quot;   parameter=&quot;token&quot;,   scheme=None,)# Constructs request header:{&quot;token&quot;: &quot;secret_value&quot;}```Additional header values can be passed in as a dict here when API's require more than oneheader to authenticate:```pythonauthentication_method=HeaderAuthentication(   token=&quot;secret_value&quot;   parameter=&quot;token&quot;,   scheme=None,   extra={&quot;more&quot;: &quot;another_secret&quot;})# Constructs request header:{&quot;token&quot;: &quot;secret_value&quot;, &quot;more&quot;: &quot;another_secret&quot;}```### `BasicAuthentication`This authentication method enables specifying a username and password to APIsthat require such.```pythonclient = ClientImplementation(    authentication_method=BasicAuthentication(username=&quot;foo&quot;, password=&quot;secret_value&quot;),    response_handler=...,    request_formatter=...,)```### `CookieAuthentication`This authentication method allows a user to specify a url which is usedto authenticate an initial request, made at APIClient initialization,with the authorization tokens then persisted for the duration of theclient instance in cookie storage.These cookies use the `http.cookiejar.CookieJar()` and are set on thesession so that all future requests contain these cookies.As the method of authentication at the endpoint is not standardisedacross API's, the authentication method can be customized using one ofthe already defined authentication methods; `QueryParameterAuthentication`,`HeaderAuthentication`, `BasicAuthentication`.```pythonclient = ClientImplementation(    authentication_method=(        CookieAuthentication(            auth_url=&quot;https://example.com/authenticate&quot;,            authentication=HeaderAuthentication(&quot;1234-secret-key&quot;),        ),    response_handler=...,    request_formatter=...,)```## Response HandlersResponse handlers provide a standard way of handling the final responsefollowing a successful request to the API.  These must inherit from`BaseResponseHandler` and implement the `get_request_data()` method whichwill take the `requests.Response` object and parse the data accordingly.The apiclient supports the following response handlers, by specifyingthe class on initialization of the client as follows:The response handler can be omitted, in which case no formatting is applied to theoutgoing data.```pythonclient = ClientImplementation(   authentication_method=...,   response_handler=&lt;ResponseHandlerClass&gt;,   request_formatter=...,)```### `RequestsResponseHandler`Handler that simply returns the original `Response` object with noalteration.Example:```pythonclient = ClientImplementation(    authentication_method=...,    response_handler=RequestsResponseHandler,    request_formatter=...,)```### `JsonResponseHandler`Handler that parses the response data to `json` and returns the dictionary.If an error occurs trying to parse to json then a `UnexpectedError`will be raised.Example:```pythonclient = ClientImplementation(    authentication_method=...,    response_handler=JsonResponseHandler,    request_formatter=...,)```### `XmlResponseHandler`Handler that parses the response data to an `xml.etree.ElementTree.Element`.If an error occurs trying to parse to xml then a `UnexpectedError`will be raised.Example:```pythonclient = ClientImplementation(    authentication_method=...,    response_handler=XmlResponseHandler,    request_formatter=...,)```## Request FormattersRequest formatters provide a way in which the outgoing request data canbe encoded before being sent, and to set the headers appropriately.These must inherit from `BaseRequestFormatter` and implement the `format()`method which will take the outgoing `data` object and format accordinglybefore making the request.The apiclient supports the following request formatters, by specifyingthe class on initialization of the client as follows:```pythonclient = ClientImplementation(   authentication_method=...,   response_handler=...,   request_formatter=&lt;RequestFormatterClass&gt;,)```### `JsonRequestFormatter`Formatter that converts the data into a json format and adds the`application/json` Content-type header to the outgoing requests.Example:```pythonclient = ClientImplementation(    authentication_method=...,    response_handler=...,    request_formatter=JsonRequestFormatter,)```## ExceptionsThe exception handling for `api-client` has been designed in a way so that all exceptions inherit fromone base exception type: `APIClientError`.  From there, the exceptions have been broken down into thefollowing categories:### `ResponseParseError`Something went wrong when trying to parse the successful response into the defined format.  This could be dueto a misuse of the ResponseHandler, i.e. configuring the client with an `XmlResponseHandler` instead ofa `JsonResponseHandler`### `APIRequestError`Something went wrong when making the request.  These are broken down further into the following categories to providegreater granularity and control.#### `RedirectionError`A redirection status code (3xx) was returned as a final code when making therequest. This means that no data can be returned to the client as we couldnot find the requested resource as it had moved.### `ClientError`A clienterror status code (4xx) was returned when contacting the API. The most common cause ofthese errors is misuse of the client, i.e. sending bad data to the API.### `ServerError`The API was unreachable when making the request.  I.e. a 5xx status code.### `UnexpectedError`An unexpected error occurred when using the client.  This will typically happen when attemptingto make the request, for example, the client never receives a response.  It can also occur tounexpected status codes (&gt;= 600).## Custom Error HandlingError handlers allow you to customize the way request errors are handled in the application.Create a new error handler, extending `BaseErrorHandler` and implement the `get_exception`static method.Pass the custom error handler into your client upon initialization.Example:```pythonfrom apiclient.error_handlers import BaseErrorHandlerfrom apiclient import exceptionsfrom apiclient.response import Responseclass MyErrorHandler(BaseErrorHandler):    @staticmethod    def get_exception(response: Response) -&gt; exceptions.APIRequestError:        &quot;&quot;&quot;Parses client errors to extract bad request reasons.&quot;&quot;&quot;        if 400 &lt;= response.get_status_code() &lt; 500:            json = response.get_json()            return exceptions.ClientError(json[&quot;error&quot;][&quot;reason&quot;])                return exceptions.APIRequestError(&quot;something went wrong&quot;)        ```In the above example, you will notice that we are utilising an internal`Response` object. This has been designed to abstract away the underlying responsereturned from whatever strategy that you are using. The `Response` contains the followingmethods:* `get_original`: returns the underlying response object. This has been implementedfor convenience and shouldn't be relied on.* `get_status_code`: returns the integer status code.* `get_raw_data`: returns the textual data from the response.* `get_json`: should return the json from the response.* `get_status_reason`: returns the reason for any HTTP error code.* `get_requested_url`: returns the url that the client was requesting.## Request StrategyThe design of the client provides a stub of a client, exposing the required methods; `get`, `post`, etc. And this then calls the implemented methods of a request strategy.This allows us to swap in/out strategies when needed. I.e. you can write your ownstrategy that implements a different library (e.g. `urllib`). Or you could pass in amock strategy for testing purposes.Example strategy for testing:```pythonfrom unittest.mock import Mockfrom apiclient import APIClientfrom apiclient.request_strategies import BaseRequestStrategydef test_get_method():    &quot;&quot;&quot;test that the get method is called on the underlying strategy.        This does not execute any external HTTP call.    &quot;&quot;&quot;    mock_strategy = Mock(spec=BaseRequestStrategy)    client = APIClient(request_strategy=mock_strategy)    client.get(&quot;http://google.com&quot;)    mock_strategy.get.assert_called_with(&quot;http://google.com&quot;, params=None)```## EndpointsThe apiclient also provides a convenient way of defining url endpoints withuse of the `@endpoint` decorator.  In order to decorate a class with `@endpoint`the decorated class must define a `base_url` attribute along with the requiredresources.  The decorator will combine the base_url with the resource.Example:```pythonfrom apiclient import endpoint@endpoint(base_url=&quot;http://foo.com&quot;)class Endpoint:    resource = &quot;search&quot;&gt;&gt;&gt; Endpoint.resource&quot;http://foo.com/search&quot;```## Extensions### Marshalling JSON[api-client-jsonmarshal](https://github.com/MikeWooster/api-client-jsonmarshal): automaticallymarshal to/from JSON into plain python dataclasses. Full usage examples can be found in the extensions home page.### Pydantic[api-client-pydantic](https://github.com/mom1/api-client-pydantic): validate request data and converting json straight to pydantic class.## Extended Example```pythonfrom apiclient import (    APIClient,    endpoint,    paginated,    retry_request,    HeaderAuthentication,    JsonResponseHandler,    JsonRequestFormatter,)from apiclient.exceptions import APIClientError# Define endpoints, using the provided decorator.@endpoint(base_url=&quot;https://jsonplaceholder.typicode.com&quot;)class Endpoint:    todos = &quot;todos&quot;    todo = &quot;todos/{id}&quot;def get_next_page(response):    return {        &quot;limit&quot;: response[&quot;limit&quot;],        &quot;offset&quot;: response[&quot;offset&quot;] + response[&quot;limit&quot;],    }# Extend the client for your API integration.class JSONPlaceholderClient(APIClient):    @paginated(by_query_params=get_next_page)    def get_all_todos(self) -&gt; dict:        return self.get(Endpoint.todos)    @retry_request    def get_todo(self, todo_id: int) -&gt; dict:        url = Endpoint.todo.format(id=todo_id)        return self.get(url)# Initialize the client with the correct authentication method,# response handler and request formatter.&gt;&gt;&gt; client = JSONPlaceholderClient(    authentication_method=HeaderAuthentication(token=&quot;&lt;secret_value&gt;&quot;),    response_handler=JsonResponseHandler,    request_formatter=JsonRequestFormatter,)# Call the client methods.&gt;&gt;&gt; client.get_all_todos()[    {        'userId': 1,        'id': 1,        'title': 'delectus aut autem',        'completed': False    },    ...,    {        'userId': 10,        'id': 200,        'title': 'ipsam aperiam voluptates qui',        'completed': False    }]&gt;&gt;&gt; client.get_todo(45){    'userId': 3,    'id': 45,    'title': 'velit soluta adipisci molestias reiciendis harum',    'completed': False}# REST APIs correctly adhering to the status codes to provide meaningful# responses will raise the appropriate exeptions.&gt;&gt;&gt; client.get_todo(450)# NotFound: 404 Error: Not Found for url: https://jsonplaceholder.typicode.com/todos/450&gt;&gt;&gt; try:...     client.get_todo(450)... except APIClientError:...     print(&quot;All client exceptions inherit from APIClientError&quot;)&quot;All client exceptions inherit from APIClientError&quot;```## APIClient InterfaceThe `APIClient` provides the following public interface:* `post(self, endpoint: str, data: dict, params: OptionalDict = None)`   Delegate to POST method to send data and return response from endpoint.* `get(endpoint: str, params: OptionalDict = None)`   Delegate to GET method to get response from endpoint.* `put(endpoint: str, data: dict, params: OptionalDict = None)`   Delegate to PUT method to send and overwrite data and return response from endpoint.* `patch(endpoint: str, data: dict, params: OptionalDict = None)`   Delegate to PATCH method to send and update data and return response from endpoint* `delete(endpoint: str, params: OptionalDict = None)`   Delegate to DELETE method to remove resource located at endpoint.* `get_request_timeout() -&gt; float`   By default, all requests have been set to have a default timeout of 10.0 s.  This   is to avoid the request waiting forever for a response, and is recommended   to always be set to a value in production applications.  It is however possible to   override this method to return the timeout required by your application.## MentionsMany thanks to [JetBrains](https://www.jetbrains.com/?from=api-client) for supplying me with a license to use their product in the developmentof this tool.![JetBrains](readme-data/jetbrains.svg)</longdescription>
</pkgmetadata>