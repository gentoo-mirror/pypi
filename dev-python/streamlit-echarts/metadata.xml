<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Streamlit - ECharts[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://share.streamlit.io/andfanilo/streamlit-echarts-demo/master/app.py)A Streamlit component to display [ECharts](https://echarts.apache.org/en/index.html).![](./img/demo.gif)## Install```shell scriptpip install streamlit-echarts```## UsageThis library provides 2 functions to display echarts :- `st_echarts` to display charts from ECharts json options as Python dicts- `st_pyecharts` to display charts from Pyecharts instancesCheck out the [demo](https://share.streamlit.io/andfanilo/streamlit-echarts-demo/master/app.py) and [source code](https://github.com/andfanilo/streamlit-echarts-demo) for more examples.**st_echarts example**```pythonfrom streamlit_echarts import st_echartsoptions = {    &quot;xAxis&quot;: {        &quot;type&quot;: &quot;category&quot;,        &quot;data&quot;: [&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;],    },    &quot;yAxis&quot;: {&quot;type&quot;: &quot;value&quot;},    &quot;series&quot;: [        {&quot;data&quot;: [820, 932, 901, 934, 1290, 1330, 1320], &quot;type&quot;: &quot;line&quot;}    ],}st_echarts(options=options)```**st_pyecharts example**```pythonfrom pyecharts import options as optsfrom pyecharts.charts import Barfrom streamlit_echarts import st_pyechartsb = (    Bar()    .add_xaxis([&quot;Microsoft&quot;, &quot;Amazon&quot;, &quot;IBM&quot;, &quot;Oracle&quot;, &quot;Google&quot;, &quot;Alibaba&quot;])    .add_yaxis(        &quot;2017-2018 Revenue in (billion $)&quot;, [21.2, 20.4, 10.3, 6.08, 4, 2.2]    )    .set_global_opts(        title_opts=opts.TitleOpts(            title=&quot;Top cloud providers 2018&quot;, subtitle=&quot;2017-2018 Revenue&quot;        ),        toolbox_opts=opts.ToolboxOpts(),    ))st_pyecharts(b)```## API### st_echarts API```st_echarts(    options: Dict    theme: Union[str, Dict]    events: Dict[str, str]    height: str    width: str    renderer: str    map: Map    key: str)```- **options** : Python dictionary that resembles the JSON counterpart of  [echarts options](https://echarts.apache.org/en/tutorial.html#ECharts%20Basic%20Concepts%20Overview).  For example the basic line chart in JS :```javascript// JS codeoption = {  xAxis: {    type: &quot;category&quot;,    data: [&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;],  },  yAxis: { type: &quot;value&quot; },  series: [{ data: [820, 932, 901, 934, 1290, 1330, 1320], type: &quot;line&quot; }],};```is represented in Python :```python# Python codeoption = {    &quot;xAxis&quot;: {        &quot;type&quot;: &quot;category&quot;,        &quot;data&quot;: [&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;],    },    &quot;yAxis&quot;: { &quot;type&quot;: &quot;value&quot; },    &quot;series&quot;: [        {&quot;data&quot;: [820, 932, 901, 934, 1290, 1330, 1320], &quot;type&quot;: &quot;line&quot; }    ],}```- **theme** : [echarts theme](https://echarts.apache.org/en/tutorial.html#Overview%20of%20Style%20Customization).  You can specify built-int themes or pass over style configuration as a Python dict.- **events** : Python dictionary which maps an [event](https://echarts.apache.org/en/tutorial.html#Events%20and%20Actions%20in%20ECharts) to a Js function as string.  For example :```python{    &quot;click&quot;: &quot;function(params) { console.log(params.name) }&quot;}```will get mapped to :```javascriptmyChart.on(&quot;click&quot;, function (params) {  console.log(params.name);});```Return values from events are sent back to Python, for example:```pythonoption = {    &quot;xAxis&quot;: {        &quot;type&quot;: &quot;category&quot;,        &quot;data&quot;: [&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;],    },    &quot;yAxis&quot;: { &quot;type&quot;: &quot;value&quot; },    &quot;series&quot;: [        {&quot;data&quot;: [820, 932, 901, 934, 1290, 1330, 1320], &quot;type&quot;: &quot;line&quot; }    ],}events = {    &quot;click&quot;: &quot;function(params) { console.log(params.name); return params.name }&quot;,    &quot;dblclick&quot;:&quot;function(params) { return [params.type, params.name, params.value] }&quot;}value = st_echarts(option, events=events)st.write(value)  # shows name on bar click and type+name+value on bar double click```The JS code needs to be a one-liner. You can use Javascript minifiers like https://javascript-minifier.com/ or https://www.minifier.org/ to transform your Javascript code to a one-liner.- **height** / **width** : size of the div wrapper- **map** : register a map using the dedicated `Map` class```pythonfrom streamlit_echarts import Mapwith open(&quot;USA.json&quot;, &quot;r&quot;) as f:    map = Map(        &quot;USA&quot;,        json.loads(f.read()),        {            &quot;Alaska&quot;: {&quot;left&quot;: -131, &quot;top&quot;: 25, &quot;width&quot;: 15},            &quot;Hawaii&quot;: {&quot;left&quot;: -110, &quot;top&quot;: 28, &quot;width&quot;: 5},            &quot;Puerto Rico&quot;: {&quot;left&quot;: -76, &quot;top&quot;: 26, &quot;width&quot;: 2},        },    )options = {...}st_echarts(options, map=map)```You'll find a lot of GeoJSON data inside the [source code of echarts-countries-js](https://github.com/echarts-maps/echarts-countries-js/tree/master/echarts-countries-js).- **renderer** : SVG or canvas- **key** : assign a fixed identity if you want to change its arguments over time and not have it be re-created.### st_pyecharts API```pythondef st_pyecharts(    chart: Base    theme: Union[str, Dict]    events: Dict[str, str]    height: str    width: str    renderer: str    map: Map    key: str)```- **chart** : Pyecharts instanceThe docs for the remaining inputs are the same as its `st_echarts` counterpart.## Development### Install- JS side```shell scriptcd frontendnpm install```- Python side```shell scriptconda create -n streamlit-echarts python=3.7conda activate streamlit-echartspip install -e .```### RunBoth webpack dev server and Streamlit need to run for development mode.- JS side```shell scriptcd frontendnpm run start```- Python sideDemo example is on https://github.com/andfanilo/streamlit-echarts-demo.```shell scriptgit clone https://github.com/andfanilo/streamlit-echarts-democd streamlit-echarts-demo/streamlit run app.py```## Caveats### Theme definition- Defining the theme in Pyecharts when instantiating chart like `Bar(init_opts=opts.InitOpts(theme=ThemeType.LIGHT))`  does not work, you need to call theme in `st_pyecharts(c, theme=ThemeType.LIGHT)`.### On Javascript functionsThis library also provides the `JsCode` util class directly from `pyecharts`.This class is used to indicate javascript code by wrapping it with a specific placeholder.On the custom component side, we parse every value in options looking for this specific placeholderto determine whether a value is a JS function.As such, if you want to pass JS functions as strings in your options,you should use the corresponding `JsCode` module to wrap code with this placeholder :- In Python dicts representing the JSON option counterpart,  wrap any JS string function with `streamlit_echarts.JsCode` by calling `JsCode(function).jscode`.  It's a smaller version of `pyecharts.commons.utils.JsCode` so you don't need to install `pyecharts` to use it.```series: [    {        type: 'scatter', // this is scatter chart        itemStyle: {            opacity: 0.8        },        symbolSize: JsCode(&quot;function (val) { return val[2] * 40;}&quot;).js_code,        data: [[&quot;14.616&quot;,&quot;7.241&quot;,&quot;0.896&quot;],[&quot;3.958&quot;,&quot;5.701&quot;,&quot;0.955&quot;],[&quot;2.768&quot;,&quot;8.971&quot;,&quot;0.669&quot;],[&quot;9.051&quot;,&quot;9.710&quot;,&quot;0.171&quot;],[&quot;14.046&quot;,&quot;4.182&quot;,&quot;0.536&quot;],[&quot;12.295&quot;,&quot;1.429&quot;,&quot;0.962&quot;],[&quot;4.417&quot;,&quot;8.167&quot;,&quot;0.113&quot;],[&quot;0.492&quot;,&quot;4.771&quot;,&quot;0.785&quot;],[&quot;7.632&quot;,&quot;2.605&quot;,&quot;0.645&quot;],[&quot;14.242&quot;,&quot;5.042&quot;,&quot;0.368&quot;]]    }]```- In Pyecharts, use `pyecharts.commons.utils.JsCode` directly, JsCode automatically calls `.jscode` when dumping options.```.set_series_opts(        label_opts=opts.LabelOpts(            position=&quot;right&quot;,            formatter=JsCode(                &quot;function(x){return Number(x.data.percent * 100).toFixed() + '%';}&quot;            ),        )    )```**Note**: you need the JS string to be on one-line. You can use Javascript minifiers like https://javascript-minifier.com/ or https://www.minifier.org/ to transform your Javascript code to a one-liner.### st_pyecharts VS using pyecharts with components.htmlWhile this package provides a `st_pyecharts` method, if you're using `pyecharts` you can directly embed your pyecharts visualization inside `st.html`by passing the output of the chart's `.render_embed()`.```pythonfrom pyecharts.charts import Barfrom pyecharts import options as optsimport streamlit.components.v1 as componentsc = (Bar()    .add_xaxis([&quot;Microsoft&quot;, &quot;Amazon&quot;, &quot;IBM&quot;, &quot;Oracle&quot;, &quot;Google&quot;, &quot;Alibaba&quot;])    .add_yaxis('2017-2018 Revenue in (billion $)', [21.2, 20.4, 10.3, 6.08, 4, 2.2])    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Top cloud providers 2018&quot;, subtitle=&quot;2017-2018 Revenue&quot;),                     toolbox_opts=opts.ToolboxOpts())    .render_embed() # generate a local HTML file)components.html(c, width=1000, height=1000)```Using `st_pyecharts` is still something you would want if you need to change data regularlywithout remounting the component, check for examples `examples/app_pyecharts.py` for `Chart with randomization` example.![](./img/randomize.gif)## Credits- It's really a wrapper around [echarts-for-react](https://github.com/hustcc/echarts-for-react).# Support me&lt;a href=&quot;https://www.buymeacoffee.com/andfanilo&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; height=&quot;41&quot; width=&quot;174&quot;&gt;&lt;/a&gt;</longdescription>
</pkgmetadata>