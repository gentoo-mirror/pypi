<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sdm_modbussdm_modbus is a python library that collects data from Eastron SDM single- and three-phase kWh meters over Modbus RTU, Modbus TCP or Modbus UDP.Supported devices:* [Eastron SDM72D-M](https://www.eastroneurope.com/products/view/sdm72modbus)* [Eastron SDM72D-M v2](https://xn--stromzhler-v5a.eu/media/pdf/93/17/d7/SDM72DM-V2.pdf)* [Eastron SDM120-Modbus](https://www.eastroneurope.com/products/view/sdm120modbus)* [Eastron SDM230-Modbus](https://www.eastroneurope.com/products/view/sdm230modbus)* [Eastron SDM630-Modbus](https://www.eastroneurope.com/products/view/sdm630modbus)* [Garo GNM3D-RS485](https://www.garo.se/en/professional/products/installation-products/din-rail-components/energy-meters/energymeter-3p-modbus-rs485)* [ESP2866/32 P1 Modbus](https://github.com/nmakel/esp_p1_modbus)* [TAIYEDQ TAC4300-CT](http://www.taiye-electric.com/productdetail/tac4300-ct-three-phase-multi-function-energy-meter.html)## InstallationTo install, either clone this project and install using `setup.py`:```python3 setup.py install```or install the package from PyPi:```pip3 install sdm_modbus```## UsageThe script `example-tcp-udp.py` provides a minimal example of connecting to and displaying all input and holding registers on a **SDM120** over **Modbus TCP or UDP**. To display values as a JSON object, add `--json`.```usage: example-tcp-udp.py [-h] [--unit UNIT] [--json] [--udp] host portpositional arguments:  host         Modbus TCP/UDP address  port         Modbus TCP/UDP portoptional arguments:  -h, --help         show this help message and exit  --udp              Use Modbus UDP mode  --timeout TIMEOUT  Connection timeout  --framer FRAMER    Framer (rtu|socket|ascii|binary)  --unit UNIT        Modbus device address  --json             Output as JSON```Output:```SDM120(10.0.0.123:502, connectionType.TCP: timeout=1, retries=3, unit=0x1):Input Registers:    Voltage: 237.00V    Current: 8.63A    Power (Active): -1919.70W    Power (Apparent): 2035.57VA    Power (Reactive): -676.70VA    Power Factor: -0.94    Phase Angle: 0.00Â°    Frequency: 50.00Hz    Imported Energy (Active): 1551.37kWh    Imported Energy (Active): 1335.69kWh    Imported Energy (Reactive): 0.01kVAh    Exported Energy (Reactive): 4362.14kVAh    Total Demand Power (Active): 1668.02W    Maximum Total Demand Power (Active): 3347.26W    Import Demand Power (Active): 0.00W    Maximum Import Demand Power (Active): 3347.26W    Export Demand Power (Active): 1668.02W    Maximum Export Demand Power (Active): 2109.45W    Total Demand Current: 7.57A    Maximum Total Demand Current: 14.97A    Total Energy (Active): 2887.07kWh    Total Energy (Reactive): 0.00kVAhHolding Registers:    Demand Time: 1s    Demand Period: 60s    Relay Pulse Width: 60ms    Network Parity Stop: N-1    Meter ID: 1    Baud Rate: 9600    P1 Output Mode: Export Energy (Active)    Display Scroll Timing: 0s    P1 Divisor: 0.001kWh/imp    Measurement Mode: 0    Pulse/LED Indicator Mode: Import + Export Energy (Active)```### ConnectingIf you wish to use Modbus TCP or UDP the following parameters are relevant:`host = IP or DNS name of your Modbus TCP gateway, required`  `port = TCP port of the Modbus TCP gateway, required`  `unit = Modbus device address, default=1, optional``udp = Use Modbus UDP mode, default=False, optional``framer = Modbus protocol, default=socket, optional`If you are using a Modbus RTU connection you can specify:`device = path to serial device, e.g. /dev/ttyUSB0, required`  `baud = baud rate of your SDM unit, defaults to factory default, optional`  `unit = Modbus device address, defaults to 1, optional`Connecting to the meter:```    &gt;&gt;&gt; import sdm_modbus    # SDM120 over Modbus TCP    &gt;&gt;&gt; device = sdm_modbus.SDM120(host=&quot;10.0.0.123&quot;, port=502)    # SDM120 over Modbus UDP    &gt;&gt;&gt; device = sdm_modbus.SDM120(host=&quot;10.0.0.123&quot;, port=502, udp=True)    # SDM630 over Modbus RTU    &gt;&gt;&gt; device = sdm_modbus.SDM630(device=&quot;/dev/ttyUSB0&quot;, baud=9600)```Test the connection:```    &gt;&gt;&gt; device.connected()    True```Printing the object yields basic device parameters:```    &gt;&gt;&gt; device    SDM120(10.0.0.123:502, connectionType.TCP: timeout=1, retries=3, unit=0x1):```### Connecting to Multiple DevicesRe-using an existing RTU, TCP or UDP connection is possible by providing an already connected device as `parent` when creating a new instance. This may be necessary if the Modbus TCP/UDP gateway only accepts a limited number of connections, or you wish to address multiple RTU devices on the same bus. For example:```    # Connect to a SDM630 over Modbus TCP    &gt;&gt;&gt; device_1 = sdm_modbus.SDM630(host=&quot;10.0.0.123&quot;, port=502, unit=1)    # Connect to a SDM630 using the existing connection    &gt;&gt;&gt; device_2 = sdm_modbus.SDM630(parent=device_1, unit=2)```### Reading RegistersReading a single input register by name:```    &gt;&gt;&gt; device.read(&quot;voltage&quot;)    236.89999389648438```Read all registers of a given `registerType` by calling `read_all()`. By default this polls all `sdm_modbus.registerType.INPUT` registers. Pass `sdm_modbus.registerType.HOLDING` to poll all holding registers.```    &gt;&gt;&gt; device.read_all(sdm_modbus.registerType.INPUT)    {        &quot;voltage&quot;: 238.60000610351562,        &quot;current&quot;: 7.59499979019165,        &quot;power_active&quot;: -1673.800048828125,        &quot;power_apparent&quot;: 1797.5904541015625,        &quot;power_reactive&quot;: -655.4000244140625,        &quot;power_factor&quot;: -0.9311425685882568,        &quot;phase_angle&quot;: 0.0,        &quot;frequency&quot;: 50.0,        &quot;import_energy_active&quot;: 1556.35595703125,        &quot;export_energy_active&quot;: 1345.9210205078125,        &quot;import_energy_reactive&quot;: 0.014999999664723873,        &quot;export_energy_reactive&quot;: 4376.02001953125,        &quot;total_demand_power_active&quot;: 1659.360107421875,        &quot;maximum_total_demand_power_active&quot;: 3347.26318359375,        &quot;import_demand_power_active&quot;: 0.0,        &quot;maximum_import_demand_power_active&quot;: 3347.26318359375,        &quot;export_demand_power_active&quot;: 1659.360107421875,        &quot;maximum_export_demand_power_active&quot;: 2109.4541015625,        &quot;total_demand_current&quot;: 7.531858921051025,        &quot;maximum_total_demand_current&quot;: 14.968546867370605,        &quot;total_energy_active&quot;: 2902.277099609375,        &quot;total_energy_reactive&quot;: 4376.03515625    }    &gt;&gt;&gt; device.read_all(sdm_modbus.registerType.HOLDING)    {        &quot;demand_time&quot;: 1,        &quot;demand_period&quot;: 60,        &quot;relay_pulse_width&quot;: 60,        &quot;network_parity_stop&quot;: 0,        &quot;meter_id&quot;: 1,        &quot;baud&quot;: 2,        &quot;p1_output_mode&quot;: 4,        &quot;display_scroll_timing&quot;: 0,        &quot;p1_divisor&quot;: 0,        &quot;measurement_mode&quot;: 0,        &quot;indicator_mode&quot;: 0    }```### Writing RegistersWriting to holding registers is also possible. Setting a new baud rate, for example:```    &gt;&gt;&gt; device.write(&quot;baud&quot;, 2)    WriteMultipleRegisterResponse (28,2)```You will need to **enable setup mode on your device** by pressing the setup button for 5 seconds, otherwise you will receive a `Exception Response(134, 6, GatewayNoResponse)` or similar.### Register DetailsIf you need more information about a particular register, to look up the units or enumerations, for example:```    &gt;&gt;&gt; device.registers[&quot;voltage&quot;]        # address, length, type, datatype, valuetype, name, unit, batching        (            0,            2,            &lt;registerType.INPUT: 1&gt;,            &lt;registerDataType.FLOAT32: 11&gt;,            &lt;class 'float'&gt;,            'Voltage',            'V',            1        )    &gt;&gt;&gt; device.registers[&quot;p1_divisor&quot;]        # address, length, type, datatype, valuetype, name, unit, batching        (            63760,            2,            &lt;registerType.HOLDING: 2&gt;,            &lt;registerDataType.FLOAT32: 11&gt;,            &lt;class 'int'&gt;,            'P1 Divisor',            ['0.001kWh/imp', '0.01kWh/imp', '0.1kWh/imp', '1kWh/imp'],            2        )```## ContributingContributions are more than welcome, especially testing on supported units, and adding other Eastron SDM units.</longdescription>
</pkgmetadata>