<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Fancy Galaxy Code (FGC)Fancy Galaxy Code (FGC) is an open source standard for fast and reliable data representation while maintaining a nice look and feel.  FGC strifes to serve as a prettier QR-Code straight from the future.  Contributions and integrations into projects are highly appreciated!    ## Links[PyPI Package](https://pypi.org/project/fgc-tools/)  [Online FGC Creator](https://ghostfox.de/fgc)    ## Specification### Data processing- 4 Version bits- n Data + Hamming Code correction bits### Data representation#### General structureCenter point is thick and has a fixed distance to the arc surrounding it, which equals the distance from layer to layer.   The dot in the ring around the center point represents the orientation (0 degrees).  For the exact distance calculations see the code.  Every ring can store up to degrees_per_bit - 1 bits, since the first bit of every layer is always a 0.  The degrees per bit can be looked up:  ```Layer 1: 20° per bit = 360° / 20° - 1 bits = 17 bits Layer 2: 15° per bitLayer 3: 12° per bitLayer 4: 10° per bit... 9, 8, 8, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4 ...After the last 4° layer (layer 19), every following layer (&gt;= 20) has 3° per bit and can therefore store 360° / 3° -1 bits = 119 bits```  #### Data representationIf the next bit is the same as this bit: Draw an arc  If the next bit is not the same as this bit: Draw a dot      #### Visual explanation![FGC Explanation](./static/explanation.jpg)  ## FGC-tools package usageInstall the package via:```shpip install fgc-tools```  Import the FGCCreator class and create an fgc:```pythonfrom fgc_tools import FGCCreatorFGCCreator.create_fgc(    color_inner=&quot;#009060&quot;,     color_outer=&quot;#006090&quot;,    data=&quot;Example&quot;,     output_file=&quot;example.svg&quot;,    color_background=&quot;#ffffff&quot;,    write_data_as_text=True)```      Import the FGCReader and ReadResult class and read an fgc:```pythonfrom fgc_tools import FGCReaderfrom fgc_tools import ReadResult# Read image from file pathread_result:ReadResult = FGCReader.read_image(    image_path=&quot;example.jpg&quot;)# Read image from bytesread_result:ReadResult = FGCReader.read_image(    image_file=myPreviouslyDefinedByteArray )```    ## Code executionIf you want to experiment with the code in this repository, install the requirements first:```pip install -r requirements.txt```  </longdescription>
</pkgmetadata>