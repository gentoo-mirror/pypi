<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*****************RecombeeApiClient*****************A Python 3 client for easy use of the `Recombee &lt;https://www.recombee.com/&gt;`_  recommendation API.If you don't have an account at Recombee yet, you can create a free account `here &lt;https://www.recombee.com/&gt;`_.Documentation of the API can be found at `docs.recombee.com &lt;https://docs.recombee.com/&gt;`_.=============Installation=============Install the client with pip:.. code-block:: bash    $ pip install recombee-api-client========Examples========-------------Basic example-------------.. code-block:: python    from recombee_api_client.api_client import RecombeeClient, Region    from recombee_api_client.exceptions import APIException    from recombee_api_client.api_requests import *    import random    client = RecombeeClient('--my-database-id--', '--db-private-token--', region=Region.US_WEST)    #Generate some random purchases of items by users    PROBABILITY_PURCHASED = 0.1    NUM = 100    purchase_requests = []    for user_id in [&quot;user-%s&quot; % i for i in range(NUM) ]:      for item_id in [&quot;item-%s&quot; % i for i in range(NUM) ]:        if random.random() &lt; PROBABILITY_PURCHASED:          request = AddPurchase(user_id, item_id, cascade_create=True)          purchase_requests.append(request)    try:        # Send the data to Recombee, use Batch for faster processing of larger data        print('Send purchases')        client.send(Batch(purchase_requests))        # Get recommendations for user 'user-25'        response = client.send(RecommendItemsToUser('user-25', 5))        print(&quot;Recommended items: %s&quot; % response)        # User scrolled down - get next 3 recommended items        response = client.send(RecommendNextItems(response['recommId'], 3))        print(&quot;Next recommended items: %s&quot; % response)    except APIException as e:        print(e)---------------------Using property values---------------------.. code-block:: python    from recombee_api_client.api_client import RecombeeClient, Region    from recombee_api_client.api_requests import AddItemProperty, SetItemValues, AddPurchase    from recombee_api_client.api_requests import RecommendItemsToItem, SearchItems, Batch, ResetDatabase    import random    NUM = 100    PROBABILITY_PURCHASED = 0.1    client = RecombeeClient('--my-database-id--', '--db-private-token--', region=Region.AP_SE)    # Clear the entire database    client.send(ResetDatabase())    # We will use computers as items in this example    # Computers have four properties     #   - price (floating point number)    #   - number of processor cores (integer number)    #   - description (string)    #   - image (url of computer's photo)    # Add properties of items    client.send(AddItemProperty('price', 'double'))    client.send(AddItemProperty('num-cores', 'int'))    client.send(AddItemProperty('description', 'string'))    client.send(AddItemProperty('image', 'image'))    # Prepare requests for setting a catalog of computers    requests = [SetItemValues(        &quot;computer-%s&quot; % i, #itemId        #values:        {           'price': random.uniform(500, 2000),          'num-cores': random.randrange(1,9),          'description': 'Great computer',          'image': 'http://examplesite.com/products/computer-%s.jpg' % i        },        cascade_create=True   # Use cascadeCreate for creating item                              # with given itemId if it doesn't exist      ) for i in range(NUM)]    # Send catalog to the recommender system    client.send(Batch(requests))    # Prepare some purchases of items by users    requests = []    items = [&quot;computer-%s&quot; % i for i in range(NUM)]    users = [&quot;user-%s&quot; % i for i in range(NUM)]    for item_id in items:        #Use cascadeCreate to create unexisting users        purchasing_users = [user_id for user_id in users if random.random() &lt; PROBABILITY_PURCHASED]        requests += [AddPurchase(user_id, item_id, cascade_create=True) for user_id in purchasing_users]    # Send purchases to the recommender system    client.send(Batch(requests))    # Get 5 recommendations for user-42, who is currently viewing computer-6    # Recommend only computers that have at least 3 cores    recommended = client.send(        RecommendItemsToItem('computer-6', 'user-42', 5, filter=&quot;'num-cores'&gt;=3&quot;)    )    print(&quot;Recommended items with at least 3 processor cores: %s&quot; % recommended)    # Recommend only items that are more expensive then currently viewed item (up-sell)    recommended = client.send(        RecommendItemsToItem('computer-6', 'user-42', 5, filter=&quot;'price' &gt; context_item[\&quot;price\&quot;]&quot;)    )    print(&quot;Recommended up-sell items: %s&quot; % recommended)    # Filters, boosters and other settings can be also set in the Admin UI (admin.recombee.com)    # when scenario is specified    recommended = client.send(      RecommendItemsToItem('computer-6', 'user-42', 5, scenario='product_detail')      )    # Perform personalized full-text search with a user's search query (e.g. 'computers').    matches = client.send(SearchItems('user-42', 'computers', 5, scenario='search_top'))    print(&quot;Matched items: %s&quot; % matches)------------------Exception handling------------------For the sake of brevity, the above examples omit exception handling. However, various exceptions can occur while processing request, for example because of adding an already existing item, submitting interaction of nonexistent user or because of timeout.We are doing our best to provide the fastest and most reliable service, but production-level applications must implement a fallback solution since errors can always happen. The fallback might be, for example, showing the most popular items from the current category, or not displaying recommendations at all.Example:.. code-block:: python  from recombee_api_client.exceptions import *  try:    recommended = client.send(        RecommendItemsToItem('computer-6', 'user-42', 5, filter=&quot;'price' &gt; context_item[\&quot;price\&quot;]&quot;)    )  except ResponseException as e:    #Handle errorneous request =&gt; use fallback  except ApiTimeoutException as e:    #Handle timeout =&gt; use fallback  except APIException as e:    #APIException is parent of both ResponseException and ApiTimeoutException</longdescription>
</pkgmetadata>