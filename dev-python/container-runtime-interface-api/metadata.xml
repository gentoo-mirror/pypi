<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## container-runtime-interface-apiPython library for communication with the Kubernetes [Container Runtime Interface API](https://github.com/kubernetes/cri-api).### UsageInstall `container-runtime-interface-api` with `pipenv` or `pip`:```shell$ pipenv install container-runtime-interface-apiAdding container-runtime-interface-api to Pipfile's [packages]…✔ Installation Succeeded...```This project currently supports Python 3.7+.#### ConnectionConnection to the CRI API is generally done through a UNIX socket, but any gRPC address supported by [insecure_channel](https://grpc.github.io/grpc/python/grpc.html#grpc.insecure_channel) will work.```pythonfrom cri_api.channel import Channelchannel = Channel.from_env() # Loads from RUNTIME_SOCKchannel = Channel(&quot;unix:///var/run/dockershim.sock&quot;) # Explicit argument```#### ImagesThe `Images` class is a thin wrapper around the existing ImageService API:```pythonfrom cri_api.images import Imageschannel = Channel.from_env()images = Images(channel)images.list_images()images.pull_image(&quot;busybox&quot;)busybox_images = [i[&quot;id&quot;] for i in images.list_images() if any(&quot;busybox&quot; in r for r in i[&quot;repoTags&quot;])][images.remove_image(i) for i in busybox_images]```#### ContainersThe `Containers` class is a thin wrapper around the existing RuntimeService API:```pythonfrom cri_api.images import Imagesfrom cri_api import ContainerFilter, ContainerState, ContainerStateValuechannel = Channel.from_env()images = Containers(channel)containers.list_containers()containers.list_containers(ContainerFilter(state=ContainerStateValue(state=ContainerState.CONTAINER_EXITED)))containers.get_container(&quot;9d81052cc027a1fb2ec61b898ea0fd6fc88216ce730ad75f4c52b29849cb440f&quot;)```#### RawRaw access to the underlying CRI API objects can be done by importing from `cri_api`:```pythonfrom os import getenvfrom grpc import insecure_channelfrom cri_api import RuntimeServiceStub, ListContainersRequeststub = RuntimeServiceStub(insecure_channel(getenv(&quot;RUNTIME_SOCK&quot;)))response = stub.ListContainers(ListContainersRequest())containers = response.containers```### Updating Protobuf Python Generated Code```shell$ bin/update-proto.sh```Commit &amp; create a new pull request!### DevelopmentInteractive development on MacOS can be done by leveraging [minikube](https://kubernetes.io/docs/tasks/tools/install-minikube/):```shell$ minikube start --container-runtime=cri-o$ minikube ssh$ socat -d -d TCP4-LISTEN:15432,fork UNIX-CONNECT:/var/run/crio/crio.sock# In another window, you can now connect on $(minikube ip):15432$ export RUNTIME_SOCK=$(minikube ip):15432...```### TestingUnit tests are run against all supported Python versions: 3.7, 3.8, and 3.9.A basic set of integration tests is included alongside the unit tests, but are only run if the `RUNTIME_SOCK` environment variable is set correctly.They are verified in CI against a minikube installation running Docker and `dockershim`.Run unit tests with:```shell$ pytest```</longdescription>
</pkgmetadata>