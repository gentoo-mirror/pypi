<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># behaving[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/ggozad/behaving/ci.yml)](https://github.com/ggozad/behaving/actions/workflows/ci.yml)[![PyPI](https://img.shields.io/pypi/v/behaving)](https://pypi.org/project/behaving/)[![Docker Image Version (latest by date)](https://img.shields.io/docker/v/behaving/behaving)](https://hub.docker.com/repository/docker/behaving/behaving)_behaving_ is a web application testing framework forBehavior-Driven-Development, based on[behave](http://pypi.python.org/pypi/behave) and[splinter](https://github.com/cobrateam/splinter)._behave_ is written in Python and is similar to[Cucumber](http://cucumber.io/)._behaving_ adds the step-libraries for multi-user web/email/sms/gcminteractions, and provides the Python _behaving_ namespace so thatindependent step-libraries can work together.Please refer to _behave_'s excellent[documentation](http://behave.readthedocs.io/en/latest/) for a guide onhow to use it, how to write your custom steps and make it possible toextend _behaving_.## Hello worldStarting to use _behaving_ is pretty easy. Inside some python module,add your _features_ consisting each of one or more scenarios. Thesefeatures are Gherkin language files with an extension of `.feature`. Inthe same directory you should have a steps module which imports the_behaving_ steps as well as your own custom steps (more on that later inthe setup\_ section) . Here's a basic example:```gherkinFeature: Text presence    Background:        Given a browser    Scenario: Search for BDD        When I visit &quot;http://www.wikipedia.org/&quot;        And I fill in &quot;search&quot; with &quot;BDD&quot;        And I press &quot;go&quot;        Then I should see &quot;Behavior-driven development&quot; within 5 seconds```## Email, SMS &amp; GCM (Google Cloud Messaging)While the web is the focus of _behaving_, it also includes simple mocksfor a mail, SMS and a GCM server. These come with a small collection ofsteps allowing you to do things like:```gherkinFeature: Email &amp; SMS    Scenario: Click link in an email        Given a browser        When I send an email to &quot;foo@bar.com&quot; with subject &quot;Hello&quot; and body &quot;Try out this website at http://google.com&quot;        And I click the link in the email I received at &quot;foo@bar.com&quot;        Then the browser's URL should be &quot;http://google.com/&quot;    Scenario: Receive SMS with body        When I send an sms to &quot;+4745690001&quot; with body &quot;Hello world&quot;        Then I should receive an sms at &quot;+4745690001&quot; containing &quot;world&quot;    Scenario: Receive GCM Notification        When I send a gcm message &quot;{&quot;to&quot;:&quot;deviceID&quot;, &quot;data&quot;: {&quot;message&quot;: &quot;Foo Bar&quot;, &quot;badge&quot;: 6}}&quot;        Then I should receive a gcm notification at &quot;deviceID&quot; containing &quot;{'data': {'message': 'Foo Bar'}}&quot;```Typically, it will be your web application that sendsemail/sms/notifications and testing it comes down to configuring theapplication to send email/sms/notifications to the mock servers.## Personas &amp; stateA lot of web apps today rely on multi-user interactions. To help youwith those interactions, _behaving_ uses the notion of _personas_. Apersona within a test runs in its own instance of a browser and you canhave more than one persona (and its browser instance) runningconcurrently. You switch among personas by calling```gherkinGiven &quot;PersonaName&quot; as the persona```Personas are also typically implemented as simple dictionaries allowingthem to carry state, save and reuse variables inside a scenario. When apersona is first invoked it is created as an empty dictionary. You canpredefine personas though with set values.Let's take the familiar LOTR characters as our test users. On setting upthe test environment (details later in the setup\_ section), we set upthe characters basic variables we might be needing in the tests as such:```pythonPERSONAS = {    'Frodo': dict(        fullname=u'Frodo Baggins',        email=u'frodo@shire.com',        password=u'frodopass',        mobile='+4745690001',        address: {            street: &quot;The Shire&quot;,            zip: &quot;4321&quot;        }    ),    'Gandalf': dict(        fullname=u'Gandalf the Grey',        email=u'gandalf@wizardry.com',        password=u'gandalfpass',        mobile='+4745690004',        address: {            street: &quot;Rivendell street 1&quot;,            zip: &quot;1234&quot;        }  ),  ...}def before_scenario(context, scenario):    ...    context.personas = PERSONAS```Within a test and given a persona, you can now use `$var_name` to accessa variable of a persona. You can also set new variables on personas. Sothe following,```gherkinGiven &quot;Gandalf&quot; as the personaWhen I fill in &quot;name&quot; with &quot;$fullname&quot;And I fill in &quot;street&quot; with &quot;$address.street&quot;And I set &quot;title&quot; to the text of &quot;document-title&quot;And I fill in &quot;delete&quot; with &quot;$title&quot;And I set &quot;address.country&quot; to the text of &quot;country&quot;And I set &quot;postaddress&quot; to:&quot;&quot;&quot;$fullname$address.street, $address.zip, $address.country&quot;&quot;&quot;```would fill in the field with id `name` with `Gandalf the Grey`, `street`with `Rivendell street 1` set the variable `title` to the text of theelement with id `document-title` and reuse the variable `title` to fillin the field with id `delete`. It would also store the value of thefield with id &quot;country&quot; in address[`country`]. The `$var_name` patternis also usable in the text received by steps that expect a body of text,which means that the `postaddress` persona variable will containGandalf's complete snail-mail postage address nicely formatted onmultiple lines.## Hello Persona exampleLet us assume the following (coming from a real example) scenario.[Crypho](https://crypho.com), is an online messaging/sharing site thatprovides users with end-to-end encrypted real-time communications._behaving_ was written to help test Crypho.In Crypho, teams collaborate in _spaces_. To invite somebody in a_space_ the invitee has to share a token with an invitor, so both canverify each other's identity.```gherkinFeature: Frodo invites Gandalf to The Shire space    Given state &quot;the-shire&quot;    Scenario: Frodo invites Gandalf to The Shire        Given &quot;Gandalf&quot; as the persona        When I log in```Before the scenarios start, the custom step `Given state &quot;the-shire&quot;`executes. This preloads the db with data, sets up the server etc. Thenthe scenario executes:First Gandalf logs in. The step `Given &quot;Gandalf&quot; as the persona`, firesup a browser that belongs to the persona Gandalf. The following step,`When I log in` is a custom step defined as follows:```python@when('I log in')def log_in(context):    assert context.persona    context.execute_steps(u&quot;&quot;&quot;        When I go to Home            Then I should see an element with id &quot;email&quot; within 2 seconds        When I fill in &quot;email&quot; with &quot;$email&quot;        And I press &quot;send-sms&quot;            Then I should see &quot;We have sent you an SMS with a security code&quot; within 2 seconds            And I should receive an sms at &quot;$mobile&quot;            And &quot;token&quot; should be enabled        When I parse the sms I received at &quot;$mobile&quot; and set &quot;Your Crypho code is {token}&quot;        And I fill in &quot;token&quot; with &quot;$token&quot;        And I fill in &quot;password&quot; with &quot;$password&quot;        And I press &quot;login&quot;            Then I should see &quot;Crypho&quot; within 5 seconds    &quot;&quot;&quot;)```Observe above how the current persona (Gandalf) parses the sms itreceives and saves it as &quot;token&quot;. Later Gandalf reuses it to fill in thetwo-factor authentication field.Now that Gandalf is logged in, the test proceeds with Frodo. Frodo willlog in, and invite Gandalf to a private space.```gherkinGiven &quot;Frodo&quot; as the personaWhen I log inAnd I click the link with text that contains &quot;My spaces&quot;And I click the link with text that contains &quot;The Shire&quot;And I press &quot;invite-members&quot;    Then I should see &quot;Invite members&quot; within 1 secondsWhen I fill in &quot;invitees&quot; with &quot;gandalf@wizardry.com&quot;And I fill in &quot;invitation-message&quot; with &quot;Come and join us!&quot;And I press &quot;send-invitations&quot;    Then I should see &quot;Your invitations have been sent&quot; within 2 seconds```Once the invitations are sent we switch back to Gandalf's browser, whoshould have received a notification in his browser, as well as an email.He then proceeds to send an sms to Frodo with the token who completesthe invitation.```gherkinGiven &quot;Gandalf&quot; as the personaThen I should see &quot;Your invitations have been updated&quot; within 2 secondsAnd I should receive an email at &quot;gandalf@wizardry.com&quot; containing &quot;Frodo Baggins has invited you to join a private workspace in Crypho&quot;When I click the link with text that contains &quot;Invitations&quot;And I click the link with text that contains &quot;Pending invitations&quot;    Then I should see &quot;Come and join us!&quot;When I set &quot;token&quot; to the text of &quot;invitation-token&quot;And I send an sms to &quot;45699900&quot; with body &quot;$token&quot;Given &quot;Frodo&quot; as the persona    Then I should receive an sms at &quot;45699900&quot;When I set &quot;FrodoToken&quot; to the body of the sms I received at &quot;45699900&quot;And I click the link with text that contains &quot;Invitations&quot;And I click the link with text that contains &quot;Enter authorization token&quot;And I fill in &quot;auth-token&quot; with &quot;$FrodoToken&quot;And I press &quot;Submit&quot;    Then I should see &quot;The invitation has been accepted.&quot; within 5 seconds    And I should see &quot;Gandalf the Grey has joined the space, invited by Frodo Baggins&quot; within 10 seconds```You can see the test in action on video[here](http://vimeo.com/63672466/).## Setting up a test environmentStart by installing _behaving_ by using either `pip` or `easy_install`.This will also install dependencies and create the `behave` script withwhich you invoke your tests. If you prefer using buildout, clone thepackage itself from its repository, it contains already a buildoutconfiguration.Typically you will be having a folder containing all your features andsteps. For example a directory structure like the following:```features/features/mytest.featurefeatures/myothertest.featurefeatures/environment.pyfeatures/steps/features/steps/steps.py```In the steps directory you will need to import the _behaving_ steps youneed. You can also define your own steps. So `steps.py` might look like:```pythonfrom behave import whenfrom behaving.web.steps import *from behaving.sms.steps import *from behaving.mail.steps import *from behaving.notifications.gcm.steps import *from behaving.personas.steps import *@when('I go to home')def go_to_home(context):    context.browser.visit('https://web/')```In `environment.py` you specify settings as well the things that need tohappen at various stages of testing, i.e. before and after everything, afeature run, or a scenario run. For convenience you can import and reuse`behaving.environment` which will perform default actions like closingall browsers after a scenario, clean the email folder etc.It is also possible to use `behaving.web.environment`,`behaving.mail.environment`, `behaving.sms.environment` and`behaving.personas.environment` on their own, if you don't have need forSMS for example.An example of an environment that does simply set some variables andthen rely on default actions for the various stages, might look like thefollowing:```pythonimport osfrom behaving import environment as benvPERSONAS = {}def before_all(context):    import mypackage    context.attachment_dir = os.path.join(os.path.dirname(mypackage.__file__), 'tests/data')    context.sms_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/sms/')    context.gcm_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/gcm/')    context.mail_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/mail/')    benv.before_all(context)def after_all(context):    benv.after_all(context)def before_feature(context, feature):    benv.before_feature(context, feature)def after_feature(context, feature):    benv.after_feature(context, feature)def before_scenario(context, scenario):    benv.before_scenario(context, scenario)    context.personas = PERSONASdef after_scenario(context, scenario):    benv.after_scenario(context, scenario)```The following variables are supported and can be set to overridedefaults:- `screenshots_dir` (the path where screenshots will be saved. If it  is set, any failure in a scenario will result in a screenshot of the  browser at the time when the failure happened.)- `attachment_dir` (the path where file attachments can be found)- `sms_path` (the path to be used by `smsmock` to save sms. Defaults  to `current_dir/sms` )- `gcm_path` (the path to be used by `gcmmock` to save gcm  notifications. Defaults to `current_dir/gcm` )- `mail_path` (the path to be used by `mailmock` to save mail.  Defaults to `current_dir/mail` )- `default_browser`- `default_browser_size` (tuple (width, height), applied to each  browser as it's created)- `max_browser_attempts` (how many times to retry creating the browser  if it fails)- `remote_webdriver_url` (points to your selenium hub url or remote  webdriver. Defaults to `None`)- `browser_args` (a dict of additional keyword arguments used when  creating a browser)- `base_url` (the base url for a browser, allows you to use relative  paths)- `accept_ssl_certs` (setting to `True` will accept self-signed/invalid  certificates. Defaults to `None`)You can run the tests simply by issuing```sh./bin/behave ./features```For chrome and docker issues, the code below is useful```pythonfrom selenium.webdriver.chrome.options import Optionschrome_options = Options()chrome_options.add_argument('--no-sandbox')context.browser_args = {    'options': chrome_options}```## Mail, GCM and SMS mock serversWhen _behaving_ is installed, it creates three scripts to help you testmail, gcm and sms, `mailmock`, `gcmmock` and `smsmock` respectively. Youcan directly invoke them before running your tests, they all take a portas well as the directory to output data as parameters. For example,```sh./bin/smsmock -p 8081 -o ./var/sms./bin/gcmmock -p 8082 -o ./var/notifications/gcm./bin/mailmock -p 8083 -o ./var/mail [--no-stdout]```## `behaving.web` Supported matchers/steps- Browsers  - Given a browser [opens the default browser, i.e. Firefox]  - Given `brand` as the default browser [sets the default browser to be `brand`, this is the browser name when using the remote webdriver or Firefox, Chrome, Safari]  - Given the electron app &quot;`app_path`&quot; [for use with electron-based desktop apps]  - Given browser &quot;`name`&quot; [opens the browser named `name`]  - When I reload  - When I go back  - When I go forward  - When I resize the browser to `width`x`height`  - When I resize the viewport to `width`x`height`  - When I take a screenshot [will save a screenshot of the browser if `screenshots_dir` is set on the environment. Also, if `screenshots_dir` is set, all failing tests will result in a screenshot.]  - When I execute the script &quot;`script`&quot;  - When I set the cookie &quot;`key`&quot; to &quot;`value`&quot;  - When I delete the cookie &quot;`key`&quot;  - When I delete all cookies  - When I close the browser &quot;`name`&quot;- Frames  - When I switch to frame with css &quot;`css`&quot;  - When I switch back to the main page- Windows  - When I open a new window named &quot;`name`&quot; at &quot;`url`&quot;  - When I name the current window &quot;`name`&quot;  - When I switch to the window named &quot;`name`&quot;- URLs  - Given the base url &quot;`url`&quot; [sets the base url to `url`, alternatively set `context.base_url` directly in `environment.py`]  - When I visit &quot;`url`&quot;  - When I go to &quot;`url`&quot;  - When I parse the url path and set &quot;`{expression}`&quot;  - Then the browser's URL should be &quot;`url`&quot;  - Then the browser's URL should contain &quot;`text`&quot;  - Then the browser's URL should not contain &quot;`text`&quot;- Links  - When I click the link to &quot;`url`&quot;  - When I click the link to a url that contains &quot;`url`&quot;  - When I click the link with text &quot;`text`&quot;  - When I click the link with text that contains &quot;`text`&quot;- Text, element &amp; class presence  - When I wait for `timeout` seconds  - When I show the element with id &quot;`id`&quot;  - When I hide the element with id &quot;`id`&quot;  - Text    - Then I should see &quot;`text`&quot;    - Then I should not see &quot;`text`&quot;    - Then I should see &quot;`text`&quot; within `timeout` seconds    - Then I should not see &quot;`text`&quot; within `timeout` seconds  - ID    - Then I should see an element with id &quot;`id`&quot;    - Then I should not see an element with id &quot;`id`&quot;    - Then I should see an element with id &quot;`id`&quot; within `timeout` seconds    - Then I should not see an element with id &quot;`id`&quot; within `timeout` seconds- CSS  - Existence    - Then I should see an element with the css selector &quot;`selector`&quot;    - Then I should not see an element with the css selector &quot;`selector`&quot;    - Then I should see an element with the css selector &quot;`selector`&quot; within `timeout` seconds    - Then I should not see an element with the css selector &quot;`selector`&quot; within `timeout` seconds    - Then I should see `n` elements with the css selector &quot;`css`&quot;    - Then I should see at least `n` elements with the css selector &quot;`css`&quot; within `timeout` seconds  - Visibility    - Then the element with the css selector &quot;`css`&quot; should be visible    - Then the element with the css selector &quot;`css`&quot; should be visible within `timeout` seconds    - Then the element with the css selector &quot;`css`&quot; should not be visible    - Then the element with the css selector &quot;`css`&quot; should be visible within `timeout` seconds    - Then {n:d} elements with the css selector &quot;`css`&quot; should be visible    - Then {n:d} elements with the css selector &quot;`css`&quot; should be visible within `timeout` seconds    - Then at least {n:d} elements with the css selector &quot;`css`&quot; should be visible    - Then at least {n:d} elements with the css selector &quot;`css`&quot; should be visible within `timeout` seconds  - Existence of a class on an element    - Then the element with xpath &quot;`xpath`&quot; should have the class &quot;`cls`&quot;    - Then the element with xpath &quot;`xpath`&quot; should not have the class &quot;`cls`&quot;    - Then the element with xpath &quot;`xpath`&quot; should have the class &quot;`cls`&quot; within `timeout` seconds    - Then the element with xpath &quot;`xpath`&quot; should not have the class &quot;`cls`&quot; within `timeout` seconds    - Then &quot;`name`&quot; should have the class &quot;`cls`&quot;    - Then &quot;`name`&quot; should not have the class &quot;`cls`&quot;    - Then &quot;`name`&quot; should have the class &quot;`cls`&quot; within `timeout` seconds    - Then &quot;`name`&quot; should not have the class &quot;`cls`&quot; within `timeout:d` seconds  - XPath    - Then I should see an element with xpath &quot;`xpath`&quot;    - Then I should not see an element with xpath &quot;`xpath`&quot;    - Then I should see an element with xpath &quot;`xpath`&quot; within `timeout` seconds    - Then I should not see an element with xpath &quot;`xpath`&quot; within `timeout` seconds- Forms  - When I fill in &quot;`name|id`&quot; with &quot;`value`&quot;  - When I clear field &quot;`name|id`&quot;  - When I type &quot;`value`&quot; to &quot;`name|id`&quot; [same as fill, but happens slowly triggering keyboard events]  - When I choose &quot;`value`&quot; from &quot;`name`&quot;  - When I check &quot;`name|id`&quot;  - When I uncheck &quot;`name|id`&quot;  - When I toggle &quot;`name|id`&quot;  - When I select &quot;`value`&quot; from &quot;`name`&quot;&quot;  - When I select by text &quot;`text`&quot; from &quot;`name`&quot;&quot;  - When I press &quot;`name|id|text|innerText`&quot;  - When I press the element with xpath &quot;`xpath`&quot;  - When I attach the file &quot;`path`&quot; to &quot;`name`&quot;  - When I set the innner HTML of the element with id &quot;`id`&quot; to &quot;`contents`&quot; [Sets html on a `contenteditable` element with id `id` to `contents`]  - When I set the innner HTML of the element with class &quot;`class`&quot; to &quot;`contents`&quot;  - When I set the innner HTML of the element with class &quot;`class`&quot; to &quot;`contents`&quot;  - When I send &quot;`KEY`&quot; to &quot;`name`&quot;  - When I focus on &quot;`name`&quot;  - Then field &quot;`name`&quot; should have the value &quot;`value`&quot;  - Then field &quot;`name`&quot; should have the value &quot;`value`&quot; within `timeout` seconds  - Then the selection &quot;`name`&quot; should have the options &quot;`valueA, valueB`&quot; selected  - Then &quot;`name`&quot; should be enabled  - Then &quot;`name`&quot; should be disabled  - Then &quot;`name`&quot; should not be enabled  - Then &quot;`name`&quot; should be valid  - Then &quot;`name`&quot; should be invalid  - Then &quot;`name`&quot; should not be valid  - Then &quot;`name`&quot; should be required  - Then &quot;`name`&quot; should not be required- HTML tables  - Then the table with id &quot;`id`&quot; should be      | header1 | header2 | ... | header(m) |      | cell00 | cell01 | ... | cell0m |      | cell10 | cell11 | ... | cell1m |      ...      | celln0 | celln1 | ... | cellnm |  - Then the table with xpath &quot;`xpath`&quot; should be      | header1 | header2 | ... | header(m) |      | cell00 | cell01 | ... | cell0m |      | cell10 | cell11 | ... | cell1m |      ...      | celln0 | celln1 | ... | cellnm |  - Then the table with id &quot;`id`&quot; should contain the rows      | cell00 | cell01 | ... | cell0m |      | cell10 | cell11 | ... | cell1m |  - Then the table with xpath &quot;`xpath`&quot; should contain the rows      | cell00 | cell01 | ... | cell0m |      | cell10 | cell11 | ... | cell1m |  - Then the table with id &quot;`id`&quot; should not contain the rows      | cell00 | cell01 | ... | cell0m |      | cell10 | cell11 | ... | cell1m |  - Then the table with xpath &quot;`xpath`&quot; should not contain the rows      | cell00 | cell01 | ... | cell0m |      | cell10 | cell11 | ... | cell1m |  - Then row `row_no` in the table with id &quot;`id`&quot; should be      | cell00 | cell01 | ... | cell0m |  - Then row `row_no` in the table with xpath &quot;`xpath`&quot; should be      | cell00 | cell01 | ... | cell0m |  - Then the value of the cell in row `row_no`, column `col_no` in the table with id &quot;`id`&quot; should be &quot;`value`&quot;  - Then the value of the cell in row `row_no`, column `col_no` in the table with xpath &quot;`xpath`&quot; should be &quot;`value`&quot;  - Then the value of the cell in row `row_no`, column &quot;`col_header`&quot; in the table with id &quot;`id`&quot; should be &quot;`value`&quot;  - Then the value of the cell in row `row_no`, column &quot;`col_header`&quot; in the table with xpath &quot;`xpath`&quot; should be &quot;`value`&quot;- Alerts &amp; prompts  - When I enter &quot;`text`&quot; to the alert - When I accept the alert - When I dismiss the alert - Then I should see an alert - Then I should see an alert within `timeout` seconds - Then I should see an alert containing &quot;`text`&quot; - Then I should see an alert containing &quot;`text`&quot; within `timeout` seconds- Mouse  - When I mouse over the element with xpath &quot;`xpath`&quot;  - When I mouse out of the element with xpath &quot;`xpath`&quot;- Downloads  - Then the file &quot;`filename`&quot; with contents &quot;`text`&quot; should have been downloaded within `timeout` seconds  - Then the file &quot;`filename`&quot; should have been downloaded within `timeout` seconds- Persona interaction &amp; variables  - When I set &quot;`key`&quot; to the text of &quot;`id|name`&quot;  - When I set &quot;`key`&quot; to the attribute &quot;`attr`&quot; of the element with xpath &quot;`xpath`&quot;  - When I evaluate the script &quot;`script`&quot; and assign the result to &quot;`key`&quot;## `behaving.mail` Supported matchers/steps- When I click the link in the email I received at &quot;`address`&quot;- When I parse the email I received at &quot;`address`&quot; and set &quot;`expression`&quot;- When I clear the email messages- Then I should receive an email at &quot;`address`&quot;- Then I should receive an email at &quot;`address`&quot; with subject &quot;`subject`&quot;- Then I should receive an email at &quot;`address`&quot; containing &quot;`text`&quot;- Then I should receive an email at &quot;`address`&quot; with attachment &quot;`filename`&quot;- Then I should not have received any emails at &quot;`address`&quot;## `behaving.sms` Supported matchers/steps- When I set &quot;`key`&quot; to the body of the sms I received at &quot;`number`&quot;- When I parse the sms I received at &quot;`number`&quot; and set &quot;`expression`&quot;- Then I should receive an sms at &quot;`number`&quot;- Then I should receive an sms at &quot;`number`&quot; containing &quot;`text`&quot;## `behaving.notifications.gcm` Supported matchers/steps- When I send a gcm message &quot;{&quot;to&quot;:&quot;deviceID&quot;, &quot;data&quot;: {&quot;message&quot;:&quot;Foo Bar&quot;, &quot;badge&quot;: 6}}&quot;- Then I should receive a gcm notification at &quot;deviceID&quot; containing &quot;{'data': {'message': 'Foo Bar'}}&quot;- Then I should have received any gcm notifications at &quot;deviceID&quot;## `behaving.personas` Supported matchers/steps- Given &quot;`name`&quot; as the persona- When I set &quot;`key`&quot; to &quot;`value`&quot;- When I set &quot;`key`&quot; to:    &quot;&quot;&quot; `some longer body of text`     `usually multiline`    &quot;&quot;&quot;- When I clone persona &quot;`source`&quot; to &quot;`target`&quot;- Then &quot;`key`&quot; is set to &quot;`value`&quot;## Debugging- When I pause the tests## Docker integrationA `Dockerfile` as well as a complete setup using `docker-compose` are provided to help you create selenium grid configurations that run your tests. In addition dev container configuration is included if VSCode is your thing.In addition we provide pre-build images on docker hub for the `linux/amd64` and `linux/arm64` platforms. Use```bashdocker pull behaving/behaving:latest```to pull the image.## Running behaving testsYou can run all behaving tests as follows:Start docker compose:```docker-compose up```Open a shell in the behaving container:```docker-compose exec behaving bash```Run behaving tests:```behave tests/features```</longdescription>
</pkgmetadata>