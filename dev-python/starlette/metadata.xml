<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.starlette.io/&quot;&gt;&lt;img width=&quot;420px&quot; src=&quot;https://raw.githubusercontent.com/encode/starlette/master/docs/img/starlette.png&quot; alt='starlette'&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;✨ The little ASGI framework that shines. ✨&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/encode/starlette/actions&quot;&gt;    &lt;img src=&quot;https://github.com/encode/starlette/workflows/Test%20Suite/badge.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/starlette/&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/starlette.svg&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation**: [https://www.starlette.io/](https://www.starlette.io/)---# StarletteStarlette is a lightweight [ASGI][asgi] framework/toolkit,which is ideal for building async web services in Python.It is production-ready, and gives you the following:* A lightweight, low-complexity HTTP web framework.* WebSocket support.* In-process background tasks.* Startup and shutdown events.* Test client built on `httpx`.* CORS, GZip, Static Files, Streaming responses.* Session and Cookie support.* 100% test coverage.* 100% type annotated codebase.* Few hard dependencies.* Compatible with `asyncio` and `trio` backends.* Great overall performance [against independent benchmarks][techempower].## RequirementsPython 3.7+ (For Python 3.6 support, install version 0.19.1)## Installation```shell$ pip3 install starlette```You'll also want to install an ASGI server, such as [uvicorn](http://www.uvicorn.org/), [daphne](https://github.com/django/daphne/), or [hypercorn](https://pgjones.gitlab.io/hypercorn/).```shell$ pip3 install uvicorn```## Example**example.py**:```pythonfrom starlette.applications import Starlettefrom starlette.responses import JSONResponsefrom starlette.routing import Routeasync def homepage(request):    return JSONResponse({'hello': 'world'})routes = [    Route(&quot;/&quot;, endpoint=homepage)]app = Starlette(debug=True, routes=routes)```Then run the application using Uvicorn:```shell$ uvicorn example:app```For a more complete example, see [encode/starlette-example](https://github.com/encode/starlette-example).## DependenciesStarlette only requires `anyio`, and the following are optional:* [`httpx`][httpx] - Required if you want to use the `TestClient`.* [`jinja2`][jinja2] - Required if you want to use `Jinja2Templates`.* [`python-multipart`][python-multipart] - Required if you want to support form parsing, with `request.form()`.* [`itsdangerous`][itsdangerous] - Required for `SessionMiddleware` support.* [`pyyaml`][pyyaml] - Required for `SchemaGenerator` support.You can install all of these with `pip3 install starlette[full]`.## Framework or ToolkitStarlette is designed to be used either as a complete framework, or asan ASGI toolkit. You can use any of its components independently.```pythonfrom starlette.responses import PlainTextResponseasync def app(scope, receive, send):    assert scope['type'] == 'http'    response = PlainTextResponse('Hello, world!')    await response(scope, receive, send)```Run the `app` application in `example.py`:```shell$ uvicorn example:appINFO: Started server process [11509]INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)```Run uvicorn with `--reload` to enable auto-reloading on code changes.## ModularityThe modularity that Starlette is designed on promotes building re-usablecomponents that can be shared between any ASGI framework. This should enablean ecosystem of shared middleware and mountable applications.The clean API separation also means it's easier to understand each componentin isolation.---&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Starlette is &lt;a href=&quot;https://github.com/encode/starlette/blob/master/LICENSE.md&quot;&gt;BSD licensed&lt;/a&gt; code.&lt;br/&gt;Designed &amp; crafted with care.&lt;/i&gt;&lt;/br&gt;&amp;mdash; ⭐️ &amp;mdash;&lt;/p&gt;[asgi]: https://asgi.readthedocs.io/en/latest/[httpx]: https://www.python-httpx.org/[jinja2]: https://jinja.palletsprojects.com/[python-multipart]: https://andrew-d.github.io/python-multipart/[itsdangerous]: https://pythonhosted.org/itsdangerous/[sqlalchemy]: https://www.sqlalchemy.org[pyyaml]: https://pyyaml.org/wiki/PyYAMLDocumentation[techempower]: https://www.techempower.com/benchmarks/#hw=ph&amp;test=fortune&amp;l=zijzen-sf</longdescription>
</pkgmetadata>