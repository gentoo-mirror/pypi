<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)![Python CI Checks](https://github.com/prodigyeducation/python-graphql-client/workflows/Python%20CI%20Checks/badge.svg)![Upload Python Package](https://github.com/prodigyeducation/python-graphql-client/workflows/Upload%20Python%20Package/badge.svg)# Python GraphQL Client&gt; Simple package for making requests to a graphql server.&lt;!-- Badges here. --&gt;## Installation```bashpip install python-graphql-client```## Usage- Query/Mutation```pyfrom python_graphql_client import GraphqlClient# Instantiate the client with an endpoint.client = GraphqlClient(endpoint=&quot;https://countries.trevorblades.com&quot;)# Create the query string and variables required for the request.query = &quot;&quot;&quot;    query countryQuery($countryCode: String) {        country(code:$countryCode) {            code            name        }    }&quot;&quot;&quot;variables = {&quot;countryCode&quot;: &quot;CA&quot;}# Synchronous requestdata = client.execute(query=query, variables=variables)print(data)  # =&gt; {'data': {'country': {'code': 'CA', 'name': 'Canada'}}}# Asynchronous requestimport asynciodata = asyncio.run(client.execute_async(query=query, variables=variables))print(data)  # =&gt; {'data': {'country': {'code': 'CA', 'name': 'Canada'}}}```- Subscription```pyfrom python_graphql_client import GraphqlClient# Instantiate the client with a websocket endpoint.client = GraphqlClient(endpoint=&quot;wss://www.your-api.com/graphql&quot;)# Create the query string and variables required for the request.query = &quot;&quot;&quot;    subscription onMessageAdded {        messageAdded    }&quot;&quot;&quot;# Asynchronous requestimport asyncioasyncio.run(client.subscribe(query=query, handle=print))# =&gt; {'data': {'messageAdded': 'Error omnis quis.'}}# =&gt; {'data': {'messageAdded': 'Enim asperiores omnis.'}}# =&gt; {'data': {'messageAdded': 'Unde ullam consequatur quam eius vel.'}}# ...```## Advanced Usage### Disable SSL verificationSet the keyword argument `verify=False` ether when instantiating the `GraphqlClient` class.```pyfrom python_graphql_client import GraphqlClientclient = GraphqlClient(endpoint=&quot;wss://www.your-api.com/graphql&quot;, verify=False)```Alternatively, you can set it when calling the `execute` method.```pyfrom python_graphql_client import GraphqlClientclient = GraphqlClient(endpoint=&quot;wss://www.your-api.com/graphql&quot;client.execute(query=&quot;&lt;Your Query&gt;&quot;, verify=False)```### Custom Authentication```pyfrom requests.auth import HTTPBasicAuthfrom python_graphql_client import GraphqlClientauth = HTTPBasicAuth('fake@example.com', 'not_a_real_password')client = GraphqlClient(endpoint=&quot;wss://www.your-api.com/graphql&quot;, auth=auth)```## RoadmapTo start we'll try and use a Github project board for listing current work and updating priorities of upcoming features.## ContributingRead the [Contributing](docs/CONTRIBUTING.md) documentation for details on the process for submitting pull requests to the project. Also take a peek at our [Code of Conduct](docs/CODE_OF_CONDUCT.md).## Authors and AcknowledgementKudos to @xkludge, @DaleSeo, and @mattbullock for getting this project started.## License[MIT License](LICENSE)</longdescription>
</pkgmetadata>