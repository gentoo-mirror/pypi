<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================xmljson===============================.. image:: https://img.shields.io/travis/sanand0/xmljson.svg        :target: https://travis-ci.org/sanand0/xmljson.. image:: https://img.shields.io/pypi/v/xmljson.svg        :target: https://pypi.python.org/pypi/xmljsonThis library is not actively maintained. Alternatives are `xmltodict`_ and `untangle`_.Use only if you need to parse using specific XML to JSON `conventions`_... _conventions: http://wiki.open311.org/JSON_and_XML_Conversion/.. _xmltodict: https://github.com/martinblech/xmltodict.. _untangle: https://untangle.readthedocs.io/en/latest/xmljson converts XML into Python dictionary structures (trees, like in JSON) and vice-versa.About-----XML can be converted to a data structure (such as JSON) and back. For example::    &lt;employees&gt;        &lt;person&gt;            &lt;name value=&quot;Alice&quot;/&gt;        &lt;/person&gt;        &lt;person&gt;            &lt;name value=&quot;Bob&quot;/&gt;        &lt;/person&gt;    &lt;/employees&gt;can be converted into this data structure (which also a valid JSON object)::    {        &quot;employees&quot;: [{            &quot;person&quot;: {                &quot;name&quot;: {                    &quot;@value&quot;: &quot;Alice&quot;                }            }        }, {            &quot;person&quot;: {                &quot;name&quot;: {                    &quot;@value&quot;: &quot;Bob&quot;                }            }        }]    }This uses the `BadgerFish`_ convention that prefixes attributes with ``@``.The conventions supported by this library are:* `Abdera`_: Use ``&quot;attributes&quot;`` for attributes, ``&quot;children&quot;`` for nodes* `BadgerFish`_: Use ``&quot;$&quot;`` for text content, ``@`` to prefix attributes* `Cobra`_: Use ``&quot;attributes&quot;`` for sorted attributes (even when empty), ``&quot;children&quot;`` for nodes, values are strings* `GData`_: Use ``&quot;$t&quot;`` for text content, attributes added as-is* `Parker`_: Use tail nodes for text content, ignore attributes* `Yahoo`_ Use ``&quot;content&quot;`` for text content, attributes added as-is.. _Abdera: http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention.. _BadgerFish: http://www.sklar.com/badgerfish/.. _Cobra: http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention.. _GData: http://wiki.open311.org/JSON_and_XML_Conversion/#the-gdata-convention.. _Parker: https://developer.mozilla.org/en-US/docs/JXON#The_Parker_Convention.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xmlConvert data to XML-------------------To convert from a data structure to XML using the BadgerFish convention::    &gt;&gt;&gt; from xmljson import badgerfish as bf    &gt;&gt;&gt; bf.etree({'p': {'@id': 'main', '$': 'Hello', 'b': 'bold'}})This returns an **array** of `etree.Element`_ structures. In this case, theresult is identical to::    &gt;&gt;&gt; from xml.etree.ElementTree import fromstring    &gt;&gt;&gt; [fromstring('&lt;p id=&quot;main&quot;&gt;Hello&lt;b&gt;bold&lt;/b&gt;&lt;/p&gt;')].. _etree.Element: http://effbot.org/zone/element-index.htmThe result can be inserted into any existing root `etree.Element`_::    &gt;&gt;&gt; from xml.etree.ElementTree import Element, tostring    &gt;&gt;&gt; result = bf.etree({'p': {'@id': 'main'}}, root=Element('root'))    &gt;&gt;&gt; tostring(result)    '&lt;root&gt;&lt;p id=&quot;main&quot;/&gt;&lt;/root&gt;'This includes `lxml.html &lt;http://lxml.de/lxmlhtml.html&gt;`_ as well::    &gt;&gt;&gt; from lxml.html import Element, tostring    &gt;&gt;&gt; result = bf.etree({'p': {'@id': 'main'}}, root=Element('html'))    &gt;&gt;&gt; tostring(result, doctype='&lt;!DOCTYPE html&gt;')    '&lt;!DOCTYPE html&gt;\n&lt;html&gt;&lt;p id=&quot;main&quot;&gt;&lt;/p&gt;&lt;/html&gt;'For ease of use, strings are treated as node text. For example, both thefollowing are the same::    &gt;&gt;&gt; bf.etree({'p': {'$': 'paragraph text'}})    &gt;&gt;&gt; bf.etree({'p': 'paragraph text'})By default, non-string values are converted to strings using Python's ``str``,except for booleans -- which are converted into ``true`` and ``false`` (lowercase). Override this behaviour using ``xml_fromstring``::    &gt;&gt;&gt; tostring(bf.etree({'x': 1.23, 'y': True}, root=Element('root')))    '&lt;root&gt;&lt;y&gt;true&lt;/y&gt;&lt;x&gt;1.23&lt;/x&gt;&lt;/root&gt;'    &gt;&gt;&gt; from xmljson import BadgerFish              # import the class    &gt;&gt;&gt; bf_str = BadgerFish(xml_tostring=str)       # convert using str()    &gt;&gt;&gt; tostring(bf_str.etree({'x': 1.23, 'y': True}, root=Element('root')))    '&lt;root&gt;&lt;y&gt;True&lt;/y&gt;&lt;x&gt;1.23&lt;/x&gt;&lt;/root&gt;'If the data contains invalid XML keys, these can be dropped via``invalid_tags='drop'`` in the constructor::    &gt;&gt;&gt; bf_drop = BadgerFish(invalid_tags='drop')    &gt;&gt;&gt; data = bf_drop.etree({'$': '1', 'x': '1'}, root=Element('root'))    # Drops invalid &lt;$&gt; tag    &gt;&gt;&gt; tostring(data)    '&lt;root&gt;1&lt;x&gt;1&lt;/x&gt;&lt;/root&gt;'Convert XML to data-------------------To convert from XML to a data structure using the BadgerFish convention::    &gt;&gt;&gt; bf.data(fromstring('&lt;p id=&quot;main&quot;&gt;Hello&lt;b&gt;bold&lt;/b&gt;&lt;/p&gt;'))    {&quot;p&quot;: {&quot;$&quot;: &quot;Hello&quot;, &quot;@id&quot;: &quot;main&quot;, &quot;b&quot;: {&quot;$&quot;: &quot;bold&quot;}}}To convert this to JSON, use::    &gt;&gt;&gt; from json import dumps    &gt;&gt;&gt; dumps(bf.data(fromstring('&lt;p id=&quot;main&quot;&gt;Hello&lt;b&gt;bold&lt;/b&gt;&lt;/p&gt;')))    '{&quot;p&quot;: {&quot;b&quot;: {&quot;$&quot;: &quot;bold&quot;}, &quot;@id&quot;: &quot;main&quot;, &quot;$&quot;: &quot;Hello&quot;}}'To preserve the order of attributes and children, specify the ``dict_type`` as``OrderedDict`` (or any other dictionary-like type) in the constructor::    &gt;&gt;&gt; from collections import OrderedDict    &gt;&gt;&gt; from xmljson import BadgerFish              # import the class    &gt;&gt;&gt; bf = BadgerFish(dict_type=OrderedDict)      # pick dict classBy default, values are parsed into boolean, int or float where possible (exceptin the Yahoo method). Override this behaviour using ``xml_fromstring``::    &gt;&gt;&gt; dumps(bf.data(fromstring('&lt;x&gt;1&lt;/x&gt;')))    '{&quot;x&quot;: {&quot;$&quot;: 1}}'    &gt;&gt;&gt; bf_str = BadgerFish(xml_fromstring=False)   # Keep XML values as strings    &gt;&gt;&gt; dumps(bf_str.data(fromstring('&lt;x&gt;1&lt;/x&gt;')))    '{&quot;x&quot;: {&quot;$&quot;: &quot;1&quot;}}'    &gt;&gt;&gt; bf_str = BadgerFish(xml_fromstring=repr)    # Custom string parser    '{&quot;x&quot;: {&quot;$&quot;: &quot;\'1\'&quot;}}'``xml_fromstring`` can be any custom function that takes a string and returns avalue. In the example below, only the integer ``1`` is converted to an integer.Everything else is retained as a float::    &gt;&gt;&gt; def convert_only_int(val):    ...     return int(val) if val.isdigit() else val    &gt;&gt;&gt; bf_int = BadgerFish(xml_fromstring=convert_only_int)    &gt;&gt;&gt; dumps(bf_int.data(fromstring('&lt;p&gt;&lt;x&gt;1&lt;/x&gt;&lt;y&gt;2.5&lt;/y&gt;&lt;z&gt;NaN&lt;/z&gt;&lt;/p&gt;')))    '{&quot;p&quot;: {&quot;x&quot;: {&quot;$&quot;: 1}, &quot;y&quot;: {&quot;$&quot;: &quot;2.5&quot;}, &quot;z&quot;: {&quot;$&quot;: &quot;NaN&quot;}}}'Conventions-----------To use a different conversion method, replace ``BadgerFish`` with one of theother classes. Currently, these are supported::    &gt;&gt;&gt; from xmljson import abdera          # == xmljson.Abdera()    &gt;&gt;&gt; from xmljson import badgerfish      # == xmljson.BadgerFish()    &gt;&gt;&gt; from xmljson import cobra           # == xmljson.Cobra()    &gt;&gt;&gt; from xmljson import gdata           # == xmljson.GData()    &gt;&gt;&gt; from xmljson import parker          # == xmljson.Parker()    &gt;&gt;&gt; from xmljson import yahoo           # == xmljson.Yahoo()Options-------Conventions may support additional options.The `Parker`_ convention absorbs the root element by default.``parker.data(preserve_root=True)`` preserves the root instance::    &gt;&gt;&gt; from xmljson import parker, Parker    &gt;&gt;&gt; from xml.etree.ElementTree import fromstring    &gt;&gt;&gt; from json import dumps    &gt;&gt;&gt; dumps(parker.data(fromstring('&lt;x&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;/x&gt;')))    '{&quot;a&quot;: 1, &quot;b&quot;: 2}'    &gt;&gt;&gt; dumps(parker.data(fromstring('&lt;x&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;/x&gt;'), preserve_root=True))    '{&quot;x&quot;: {&quot;a&quot;: 1, &quot;b&quot;: 2}}'Installation------------This is a pure-Python package built for Python 2.7+ and Python 3.0+. To set up::    pip install xmljsonSimple CLI utility------------------After installation, you can benefit from using this package as simple CLI utility. By now only XML to JSON conversion supported. Example::    $ python -m xmljson -h    usage: xmljson [-h] [-o OUT_FILE]                [-d {abdera,badgerfish,cobra,gdata,parker,xmldata,yahoo}]                [in_file]    positional arguments:    in_file               defaults to stdin    optional arguments:    -h, --help            show this help message and exit    -o OUT_FILE, --out_file OUT_FILE                            defaults to stdout    -d {abdera,badgerfish,...}, --dialect {...}                            defaults to parker    $ python -m xmljson -d parker tests/mydata.xml    {      &quot;foo&quot;: &quot;spam&quot;,      &quot;bar&quot;: 42    }This is a typical UNIX filter program: it reads file (or ``stdin``), processes it in some way (convert XML to JSON in this case), then prints it to ``stdout`` (or file). Example with pipe::    $ some-xml-producer | python -m xmljson | some-json-processorThere is also ``pip``'s ``console_script`` entry-point, you can call this utility as ``xml2json``::    $ xml2json -d abdera mydata.xmlRoadmap-------* Test cases for Unicode* Support for namespaces and namespace prefixes* Support XML commentsHistory-------0.2.1 (25 Apr 2020)~~~~~~~~~~~~~~~~~~~~~- Bugfix: Don't strip whitespace in xml text values (@imoore76)- Bugfix: Yahoo convention should convert ``&lt;x&gt;0&lt;/x&gt;`` into ``{x: 0}``. Empty elements become ``''`` not ``{}``- Suggest alternate libraries in documentation0.2.0 (21 Nov 2018)~~~~~~~~~~~~~~~~~~~~~- ``xmljson`` command line script converts from XML to JSON (@tribals)- ``invalid_tags='drop'`` in the constructor drops invalid XML tags in ``.etree()`` (@Zurga)- Bugfix: Parker converts ``{'x': null}`` to ``&lt;x&gt;&lt;/x&gt;`` instead of ``&lt;x&gt;None&lt;/x&gt;`` (@jorndoe #29)0.1.9 (1 Aug 2017)~~~~~~~~~~~~~~~~~~- Bugfix and test cases for multiple nested children in Abdera_ conventionThanks to @mukultaneja0.1.8 (9 May 2017)~~~~~~~~~~~~~~~~~~- Add Abdera_ and Cobra_ conventions- Add ``Parker.data(preserve_root=True)`` option to preserve root element in  Parker convention.Thanks to @dagwieers.. _Abdera: http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention.. _Cobra: http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention0.1.6 (18 Feb 2016)~~~~~~~~~~~~~~~~~~~- Add ``xml_fromstring=`` and ``xml_tostring=`` parameters to constructor to  customise string conversion from and to XML.0.1.5 (23 Sep 2015)~~~~~~~~~~~~~~~~~~~- Add the Yahoo_ XML to JSON conversion method... _Yahoo: https://developer.yahoo.com/javascript/json.html#xml0.1.4 (20 Sep 2015)~~~~~~~~~~~~~~~~~~~- Fix ``GData.etree()`` conversion of attributes. (They were ignored. They  should be added as-is.)0.1.3 (20 Sep 2015)~~~~~~~~~~~~~~~~~~~- Simplify ``{'p': {'$': 'text'}}`` to ``{'p': 'text'}`` in BadgerFish and GData  conventions.- Add test cases for ``.etree()`` -- mainly from the `MDN JXON article`_.- ``dict_type``/``list_type`` do not need to inherit from ``dict``/``list``.. _MDN JXON article: https://developer.mozilla.org/en-US/docs/JXON#In_summary0.1.2 (18 Sep 2015)~~~~~~~~~~~~~~~~~~~- Always use the ``dict_type`` class to create dictionaries (which defaults to  ``OrderedDict`` to preserve order of keys)- Update documentation, test cases- Remove support for Python 2.6 (since we need ``collections.Counter``)- Make the `Travis CI build`_ pass.. _Travis CI build: https://travis-ci.org/sanand0/xmljson0.1.1 (18 Sep 2015)~~~~~~~~~~~~~~~~~~~- Convert ``true``, ``false`` and numeric values from strings to Python types- ``xmljson.parker.data()`` is compliant with Parker convention (bugs resolved)0.1.0 (15 Sep 2015)~~~~~~~~~~~~~~~~~~~- Two-way conversions via BadgerFish, GData and Parker conventions.- First release on PyPI.</longdescription>
</pkgmetadata>