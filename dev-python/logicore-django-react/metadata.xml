<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># logicore-django-reactA little Python module helping to use Django and React on a single port during development and productionServes as a foundation for [logicore-django-react-pages](https://github.com/Logicore-project/logicore-django-react-pages) project, but can be used without it### Running Django and React on a single port during developmentTODO: Motivation### Usage from scratch: starting a Django + React project for development&gt; TODO: automated script/project template1. Install Django and start the project```bashmkvirtualenv django_react_project1 # Or venv etcpython3 -m pip install Djangodjango-admin.py startproject django_react_project1cd django_react_project1# Configure database, etc and commit```Now you have fresh Django! Check it works:```commandlinepython manage.py runserver```and stop the development server.**Hint:** Don't forget to add minimal `.gitignore` file for Python/Django development, such as:```gitignore*.swp*.py[cod]__pycache__*.sqlite3/static/**/media/**```2. Make a React for-development installation (inside a Django folder), called `frontend`.Then, commit the changes and eject (we need it all): ```commandlinecreate-react-app frontendgit add --all :/ &amp;&amp; git commit -m &quot;added frontend&quot;cd frontendyarn ejectgit add --all :/ &amp;&amp; git commit -m &quot;ejected frontend&quot;```3. Install `logicore_django_react` and make use of it from your Django project:```commandlinepip install -U logicore_django_react```(`-U` is required to ensure to get latest version)Add to `urls.py`:```pythonfrom logicore_django_react.urls import react_reload_and_static_urls, react_html_template_urlsurlpatterns = [    # ...]# add static/media endpoints here if needed# urlpatterns += static(...)# lastly, combine with logicore_django_react urlsurlpatterns = react_reload_and_static_urls + urlpatterns + react_html_template_urls```Which will add necessary views for React to work via Django:* `react_reload_and_static_urls` — serves hot-reload hooks and static files* `react_html_template_urls` — global (aka _match-all_, `.*`) view, that just serves HTML template that includes ReactThe latter (HTML template) might be overridden by changingthe `LOGICORE_DJANGO_REACT_TEMPLATE` setting, which is by default set to`logicore_django_react/home.html` filename.Please see source of a corresponding template file as an example.**Important:** In order for template file and template tags to work, add `logicore_django_react` to `INSTALLED_APPS`.Also to settings, add:```pythonFRONTEND_DEV_MODE = os.environ.get(&quot;FRONTEND_DEV_MODE&quot;, None)```(otherwise you may see an error message).This environment variable is required todistinguish if Django is running in development or production mode.4. Either:* create your main app in Django (e.g. called `main`)* or add non-app templates and static folders to prepare for React build bundles (templates and static files) to be saved into and remember it for the next step:```bashpython manage.py startapp main # and add to INSTALLED_APPSmkdir main/templates/ # here, &quot;react&quot; folder will automatically be added latermkdir main/static/ # here, &quot;react&quot; folder will automatically be added later```or```bash# add &quot;my_global_templates&quot; to TEMPLATE_DIRSmkdir my_global_templates/ # here, &quot;react&quot; folder will automatically be added later# add &quot;my_global_static&quot; to STATICFILES_DIRSmkdir my_global_static/ # here, &quot;react&quot; folder will automatically be added later```_Hints:_ - When creating an app, don't forget to add it to `INSTALLTED_APPS` - gitkeep the templates/static folders created5. Make modifications to `frontend` sub-project:* in frontend/config/env.js — replace:```javascript    WDS_SOCKET_PORT: process.env.WDS_SOCKET_PORT,```by```javascript    WDS_SOCKET_PORT: 3000,```This will make React project's built-in websocket to the right port — where the React's serveris and not e.g. 8000.* In `frontend/scripts/start.js` comment out `openBrowser` command. Before:```javascript      openBrowser(urls.localUrlForBrowser);```after:```javascript      //openBrowser(urls.localUrlForBrowser);```which doesn't open a browser at port `3000`, 'cause we don't want direct outputof React's dev server (it will be got by Django instead).* make the following modifications to `frontend/scripts/build.js` file(to make build process also integrate with Django):  * Add to the beginning:```javascriptconst rimraf = require('rimraf');const mkdirp = require('mkdirp');```  * and also, install that modules (inside your `frontend` folder):```commandlineyarn add -D rimraf mkdirp```* before the first `.catch(...)` statement in the file, prepend the following extra step:```javascript.then(function () {    const filename = __dirname + '/../build/asset-manifest.json';    const chunks = {};    JSON.parse(fs.readFileSync(filename)).entrypoints.map(e =&gt; {      let ext = e.split('.');      ext = ext[ext.length - 1];      if (!chunks[ext]) chunks[ext] = [];      chunks[ext].push(e.replace('static/', '/static/react/'));    });    const appBase = __dirname + '/../../main/';    const templates = {      css: url =&gt; `&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;${url}&quot; /&gt;`,      js: url =&gt; `&lt;script type=&quot;text/javascript&quot; src=&quot;${url}&quot;&gt;&lt;/script&gt;`,    }    for (let [k, v] of Object.entries(templates)) {      const html = chunks[k]?.map(v).join('');      const fileDir = `${appBase}templates/react/`;      mkdirp.sync(fileDir);      fs.writeFileSync(`${fileDir}bundle_${k}.html`, html);    }    const srcDir = __dirname + '/../build/static/';    const destDir = appBase + 'static/react/';    console.log(`will remove dir ${destDir}`);    rimraf.sync(destDir);    fs.copySync(srcDir, destDir, { overwrite: true }, function (err) {      if (err) {        console.error(err);      } else {        console.log(chalk.green(&quot;copy assets to build: success!&quot;));      }    });  })```and check that the path `__dirname + '/../../main/` (the `appBase`) points exactly to where yourlocation for auto-generated (during the build) templates and static files is.This example is given for storing the files inside the folders of an app called `main` .* Finally, in `frontend/config/webpack.config.js` replace two occurrencesof `static/media/` by `react-static/media/`:```javascript      assetModuleFilename: 'static/media/[name].[hash][ext]',```to```javascript      assetModuleFilename: 'react-static/media/[name].[hash][ext]',```and```javascript                    name: 'static/media/[name].[hash].[ext]',```to```javascript                    name: 'react-static/media/[name].[hash].[ext]',```to give specifically included static files, such as included images their own directory('cause `static` may be already taken by Django).6. _gitignore_ the auto-generated folders of yours:```gitignoremain/templates/react/**main/static/react/**```7. Add files and commit — now you should have ready-to-go setup fordeveloping and deploying Django + React project on a single port!### DevelopmentIn root folder:```bashexport FRONTEND_DEV_MODE=1python manage.py runserver```In `frontend/` folder:```bashyarn start```### Production1. Build frontend and collect static```bashcd frontend/yarn buildcd ..python manage.py collectstatic```2. Deploy as normal (according to Django docs)</longdescription>
</pkgmetadata>