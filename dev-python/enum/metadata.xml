<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>..  Important:: Superseded by Python standard library.    Python 3 now has in its standard library an `enum`_    implementation (also available for older Python versions as    the third-party `enum34`_ distribution) that supersedes this    library.    ..  _enum: https://docs.python.org/3/library/enum.html    ..  _enum34: https://pypi.org/project/enum34/This package provides a module for robust enumerations in Python.An enumeration object is created with a sequence of string argumentsto the Enum() constructor::    &gt;&gt;&gt; from enum import Enum    &gt;&gt;&gt; Colours = Enum('red', 'blue', 'green')    &gt;&gt;&gt; Weekdays = Enum('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun')The return value is an immutable sequence object with a value for eachof the string arguments. Each value is also available as an attributenamed from the corresponding string argument::    &gt;&gt;&gt; pizza_night = Weekdays[4]    &gt;&gt;&gt; shirt_colour = Colours.greenThe values are constants that can be compared only with values fromthe same enumeration; comparison with other values will invokePython's fallback comparisons::    &gt;&gt;&gt; pizza_night == Weekdays.fri    True    &gt;&gt;&gt; shirt_colour &gt; Colours.red    True    &gt;&gt;&gt; shirt_colour == &quot;green&quot;    FalseEach value from an enumeration exports its sequence indexas an integer, and can be coerced to a simple string matching theoriginal arguments used to create the enumeration::    &gt;&gt;&gt; str(pizza_night)    'fri'    &gt;&gt;&gt; shirt_colour.index    2</longdescription>
</pkgmetadata>