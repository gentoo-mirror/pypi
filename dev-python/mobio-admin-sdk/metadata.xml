<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>##  Thư viện Admin SDK dành cho các module.### Cài đặt:```bash $ pip3 install mobio-admin-sdk ```### Chức năng:* Verify token ### Sử dụng:##### 1. Verify token:   ```python    from mobio.sdks.admin import MobioAdminSDK    MobioAdminSDK().config(        admin_host=&quot;&quot;,# admin host        redis_uri=&quot;&quot;,# redis uri        module_use=&quot;&quot;,# liên hệ admin để khai báo tên của module        module_encrypt=&quot;&quot;,# liên hệ admin để lấy mã        api_admin_version=&quot;api/v2.1&quot;,   # danh sách api có thể sử dụng [&quot;v1.0&quot;, &quot;api/v2.0&quot;, &quot;api/v2.1&quot;]    )    auth = MobioAdminSDK().create_mobio_verify_token()        @service_mod.route(url_path, methods=[&quot;get&quot;])    @auth.verify_token    @try_catch_error    def get_config(merchant_id):        return build_response_message(Config(merchant_id).get_data())   ```##### 2. Merchant config:   ```python    from mobio.sdks.admin import MobioAdminSDK    MobioAdminSDK().request_get_merchant_config_host(            merchant_id,            key=None,       # key muốn lấy giá trị            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ        )    MobioAdminSDK().request_get_merchant_config_other(            merchant_id,            list_key=None,       # danh sách key muốn lấy giá trị            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ        )    MobioAdminSDK().request_check_merchant_is_brand(            merchant_id,            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ            token_value=None,  # token_value dạng là Bearer hoặc Basic, nếu nơi gọi là request đã authen thì                                 # không cần truyền, token_value sẽ lấy từ header của request         )    MobioAdminSDK().request_get_info_staff(            merchant_id,            account_id,            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ            token_value=None,  # token_value dạng là Bearer hoặc Basic, nếu nơi gọi là request đã authen thì                                # không cần truyền, token_value sẽ lấy từ header của request        )    MobioAdminSDK().request_get_list_info_staff(            merchant_id,            params=None, # tham số của api  VD: {&quot;per_page&quot;: -1}            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ            token_value=None,  # token_value dạng là Bearer hoặc Basic, nếu nơi gọi là request đã authen thì                                # không cần truyền, token_value sẽ lấy từ header của request        )    MobioAdminSDK().request_get_list_parent_merchant(            merchant_id,            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ            token_value=None,  # token_value dạng là Bearer hoặc Basic, nếu nơi gọi là request đã authen thì                                # không cần truyền, token_value sẽ lấy từ header của request        )    MobioAdminSDK().request_get_list_profile_group(            merchant_id=None,            params=None,            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ            token_value=None,  # token_value dạng là Bearer hoặc Basic, nếu nơi gọi là request đã authen thì                                # không cần truyền, token_value sẽ lấy từ header của request        )    MobioAdminSDK().request_get_list_sub_brand(            params=None,        # tham số của api  VD: {&quot;merchant_id&quot;: &quot;&quot;}            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ            token_value=None,  # token_value dạng là Bearer hoặc Basic, nếu nơi gọi là request đã authen thì                                # không cần truyền, token_value sẽ lấy từ header của request        )    MobioAdminSDK().request_get_info_sub_brand(            subbrand_id=None,            admin_version=None, # api version admin muốn gọi trong trường hợp chỉ có version đó hỗ trợ            token_value=None,  # token_value dạng là Bearer hoặc Basic, nếu nơi gọi là request đã authen thì                                # không cần truyền, token_value sẽ lấy từ header của request        )    MobioAdminSDK().request_get_partner_info(            partner_key=None,            decrypt_data=False,    )   # result: { &quot;code&quot;: 200, &quot;data&quot;: &quot;&quot;}, {&quot;code&quot;: 400, &quot;message&quot;: &quot;key not found&quot;}, {&quot;code&quot;: 412, &quot;message&quot;: &quot;key not active&quot;}, {&quot;code&quot;: 413, &quot;message&quot;: &quot;key expire&quot;}            MobioAdminSDK().request_get_config_time_and_currency(merchant_id=&quot;&quot;)       # result: {     #      &quot;config_time&quot;: {    #             &quot;timezone&quot;: 7,    #             &quot;text&quot;: &quot;(UTC+07:00) Bangkok, Hanoi, Jakarta&quot;,    #             &quot;location&quot;: &quot;Asia/Saigon&quot;,    #         },    #         &quot;currency_code&quot;: &quot;vnd&quot;    # }        ```##### 3. Save log action account:   ```python    from mobio.sdks.admin import MobioAdminSDK    action_account = {            'account_id': &quot;uuid&quot;,# required            'action_name_vi': 'action name',# required            'action_name_en': 'action name',# required            'merchant_id': &quot;uuid&quot;,# required            'created_time': 0129301293  # required (timestamp(utcnow))        }    MobioAdminSDK().admin_save_log_action_account(action_account)   ```#### Log - 1.0.1    - release sdk#### Log - 1.0.2    - Kiểm tra license server còn hạn sử dụng hay không #### Log - 1.0.3    - Fix lỗi đọc file license #### Log - 1.0.4    - Authen app key data out #### Log - 1.0.5    - update lib kafka v2#### Log - 1.0.6    - encrypt, decrypt field by config#### Log - 1.0.7    - kiểm tra thông tin field trước khi encrypt, decrypt #### Log - 1.0.8    - sdk tự lấy thông tin REDIS_URI  #### Log - 1.0.9    - bỏ encoding trong json.loads  #### Log - 1.0.10    - thêm hàm lấy cấu hình múi giờ và tiền tệ    - cập nhật kết nối redis theo loại</longdescription>
</pkgmetadata>