<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=justify&gt;&lt;div align=center&gt;automap=======[![latest version](https://img.shields.io/github/release-pre/brandtbucher/automap.svg?style=for-the-badge&amp;label=latest)![latest release date](https://img.shields.io/github/release-date-pre/brandtbucher/automap.svg?style=for-the-badge&amp;label=released)](https://github.com/brandtbucher/automap/releases)[![build status](https://img.shields.io/github/workflow/status/brandtbucher/automap/CI/master.svg?style=for-the-badge)](https://github.com/brandtbucher/automap/actions)[![issues](https://img.shields.io/github/issues-raw/brandtbucher/automap.svg?label=issues&amp;style=for-the-badge)](https://github.com/brandtbucher/automap/issues)&lt;br&gt;&lt;/div&gt;`automap` is a Python package containing high-performance autoincrementedinteger-valued mappings.To install, just run `pip install automap`.Examples--------`automap` objects are sort of like &quot;inverse sequences&quot;. They come in twovariants:### FrozenAutoMap```py&gt;&gt;&gt; from automap import FrozenAutoMap````FrozenAutoMap` objects are immutable. They can be constructed from any iterableof hashable, unique keys.```py&gt;&gt;&gt; a = FrozenAutoMap(&quot;AAA&quot;)Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ValueError: 'A'&gt;&gt;&gt; a = FrozenAutoMap(&quot;ABC&quot;)&gt;&gt;&gt; aautomap.FrozenAutoMap(['A', 'B', 'C'])```The values are integers, incrementing according to the order of the originalkeys:```py&gt;&gt;&gt; a[&quot;A&quot;]0&gt;&gt;&gt; a[&quot;C&quot;]2&gt;&gt;&gt; a[&quot;X&quot;]Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;KeyError: 'X'```The full `Mapping` interface is provided:```py&gt;&gt;&gt; [*a.keys()]['A', 'B', 'C']&gt;&gt;&gt; [*a.values()][0, 1, 2]&gt;&gt;&gt; [*a.items()][('A', 0), ('B', 1), ('C', 2)]&gt;&gt;&gt; a.get(&quot;X&quot;, 42)42&gt;&gt;&gt; &quot;B&quot; in aTrue&gt;&gt;&gt; [*a]['A', 'B', 'C']```They may also be combined with each other using the `|` operator:```py&gt;&gt;&gt; b = FrozenAutoMap(range(5))&gt;&gt;&gt; c = FrozenAutoMap(range(5, 10))&gt;&gt;&gt; b | cautomap.FrozenAutoMap([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&gt;&gt;&gt; b |= c  # Note that b is reassigned, not mutated!&gt;&gt;&gt; bautomap.FrozenAutoMap([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])```### AutoMap```py&gt;&gt;&gt; from automap import AutoMap```Unlike `FrozenAutoMap` objects, `AutoMap` objects can grow; new keys may beadded, but existing ones may not be deleted or changed.```py&gt;&gt;&gt; d = AutoMap(&quot;ABC&quot;)&gt;&gt;&gt; dautomap.AutoMap(['A', 'B', 'C'])&gt;&gt;&gt; d |= &quot;DEF&quot;  # Here, d *is* mutated!&gt;&gt;&gt; dautomap.AutoMap(['A', 'B', 'C', 'D', 'E', 'F'])```They also have `add` and `update` methods for adding new keys:```py&gt;&gt;&gt; e = AutoMap([&quot;I&quot;, &quot;II&quot;, &quot;III&quot;])&gt;&gt;&gt; e.add(&quot;IV&quot;)&gt;&gt;&gt; eautomap.AutoMap(['I', 'II', 'III', 'IV'])&gt;&gt;&gt; e.update([&quot;V&quot;, &quot;VI&quot;, &quot;VII&quot;])&gt;&gt;&gt; eautomap.AutoMap(['I', 'II', 'III', 'IV', 'V', 'VI', 'VII'])```Performance-----------Tests show string-keyed `AutoMap` objects being created 70% faster and accessed5% faster than the equivalent `dict` construction, on average. They also tend totake up the same amount of memory. You can run `invoke performance` from thisrepository to see the comparison on your machine.More details on the design can be found in `automap.c`.&lt;/div&gt;</longdescription>
</pkgmetadata>