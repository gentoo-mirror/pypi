<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># asyncdagpi[![Build Status](https://travis-ci.com/Daggy1234/asyncdagpi.svg?branch=master)](https://travis-ci.com/Daggy1234/asyncdagpi) [![License](https://img.shields.io/github/license/daggy1234/asyncdagpi)](https://mit-license.org/) ![version](https://img.shields.io/pypi/v/asyncdagpi) [![python](https://img.shields.io/pypi/pyversions/asyncdagpi)](https://pypi.org/p/asyncdagpi) [![Documentation Status](https://readthedocs.org/projects/asyncdagpi/badge/?version=latest)](https://asyncdagpi.readthedocs.io/en/latest/?badge=latest) [![Codecov](https://img.shields.io/codecov/c/github/daggy1234/asyncdagpi?logo=codecov)](https://codecov.io/gh/daggy1234/asyncdagpi) [![Codacy Badge](https://app.codacy.com/project/badge/Grade/ad36f1ea6211444792e84f32a14326dd)](https://www.codacy.com/gh/Daggy1234/asyncdagpi/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=Daggy1234/asyncdagpi&amp;amp;utm_campaign=Badge_Grade)Powerful Asynchronous Wrapper for dagpi [dagpi.xyz](https://dagpi.xyz)## Installation```shell scriptpip install asyncdagpi```## Data APISome endpoints like WTP, PickupLine and Logo will return Objects while Waifu will return a Dictionary. Everything else will return a string.```pythonfrom asyncdagpi import Clientdagpi = Client(&quot;dagpi token&quot;)# For WTP Objectwtp = await dagpi.wtp()#For Roastroast = await dagpi.roast()```## Image ManipulationAll Image endpoints return an Image object. This has many properties that can be useful for developers. For Basic implementations are displayed### Discord.py```pythonfrom discord.ext import commandsimport discordfrom asyncdagpi import Client, ImageFeaturesbot = commands.Bot(command_prefix=&quot;!&quot;)dagpi = Client(&quot;dagpi token&quot;)@bot.command()async def pixel(ctx, member: discord.Member):    url = str(member.display_avatar.with_format(&quot;png&quot;).with_size(1024))    img = await dagpi.image_process(ImageFeatures.pixel(), url)    file = discord.File(fp=img.image,filename=f&quot;pixel.{img.format}&quot;)    await ctx.send(file=file)```### Pycord```pythonfrom discord.ext import commandsimport discordfrom asyncdagpi import Client, ImageFeaturesbot = discord.Bot()dagpi = Client(&quot;dagpi token&quot;)@bot.slash_command(guild_ids=[...])async def pixel(    ctx, member: discord.Member = None):  # Passing a default value makes the argument optional    user = member or ctx.author    url = str(member.display_avatar.with_format(&quot;png&quot;).with_size(1024))    img = await dagpi.image_process(ImageFeatures.pixel(), url)    file = discord.File(fp=img.image,filename=f&quot;pixel.{img.format}&quot;)```### Writing To File```pythonfrom asyncdagpi import Client, ImageFeaturesdagpi = Client(&quot;dagpi token&quot;)img = await dagpi.image_process(ImageFeatures.pixel(), &quot;https://dagbot-is.the-be.st/logo.png&quot;)#it will auto chose the right format and write to current directoryimg.write(&quot;pixel&quot;)#will create pixel.png in this case```### Python Pillow```pythonfrom asyncdagpi import ImageFeatures, Clientfrom PIL import Imagedagpi = Client(&quot;dagpi token&quot;)img = await dagpi.image_process(ImageFeatures.pixel(), &quot;https://dagbot-is.the-be.st/logo.png&quot;)im = Image.open(img.image)```### Kwargs Example```pythonfrom asyncdagpi import ImageFeatures, Clientdagpi = Client(&quot;dagpi token&quot;)img = await dagpi.image_process(ImageFeatures.tweet(), &quot;https://dagbot-is.the-be.st/logo.png&quot;, text=&quot;This is asyncdagpi tweeting live from dagpi.xyz!&quot;, username=&quot;Asyncdagpi&quot;)```### For More Thorough Examples and Feature list read the documentation[Docs](https://asyncdagpi.rtfd.io)[Dagpi Docs](https://dagpi.docs.apiary.io)</longdescription>
</pkgmetadata>