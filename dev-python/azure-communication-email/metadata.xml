<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Azure Communication Email client library for PythonThis package contains a Python SDK for Azure Communication Services for Email.## Key conceptsThe Azure Communication Email package is used to send emails to multiple types of recipients.## Getting started### PrerequisitesYou need an [Azure subscription][azure_sub], a [Communication Service Resource][communication_resource_docs], and an [Email Communication Resource][email_resource_docs] with an active [Domain][domain_overview].To create these resource, you can use the [Azure Portal][communication_resource_create_portal], the [Azure PowerShell][communication_resource_create_power_shell], or the [.NET management client library][communication_resource_create_net].### InstallingInstall the Azure Communication Email client library for Python with [pip](https://pypi.org/project/pip/):```bashpip install azure-communication-email```## Examples`EmailClient` provides the functionality to send email messages.## AuthenticationEmail clients can be authenticated using the connection string acquired from an Azure Communication Resource in the [Azure Portal][azure_portal].```pythonfrom azure.communication.email import EmailClientconnection_string = &quot;endpoint=https://&lt;resource-name&gt;.communication.azure.com/;accessKey=&lt;Base64-Encoded-Key&gt;&quot;client = EmailClient.from_connection_string(connection_string);```Alternatively, you can also use Active Directory authentication using DefaultAzureCredential.```pythonfrom azure.communication.email import EmailClientfrom azure.identity import DefaultAzureCredential# To use Azure Active Directory Authentication (DefaultAzureCredential) make sure to have AZURE_TENANT_ID, AZURE_CLIENT_ID and AZURE_CLIENT_SECRET as env variables.endpoint = &quot;https://&lt;resource-name&gt;.communication.azure.com&quot;client = EmailClient(endpoint, DefaultAzureCredential())```Email clients can also be authenticated using an [AzureKeyCredential][azure-key-credential].```pythonfrom azure.communication.email import EmailClientfrom azure.core.credentials import AzureKeyCredentialcredential = AzureKeyCredential(&quot;&lt;api_key&gt;&quot;)endpoint = &quot;https://&lt;resource-name&gt;.communication.azure.com/&quot;client = EmailClient(endpoint, credential);```### Send an Email MessageTo send an email message, call the `begin_send` function from the `EmailClient`. This will return a poller. You can use this poller to check on the status of the operation and retrieve the result once it's finished.```pythonmessage = {    &quot;content&quot;: {        &quot;subject&quot;: &quot;This is the subject&quot;,        &quot;plainText&quot;: &quot;This is the body&quot;,        &quot;html&quot;: &quot;html&gt;&lt;h1&gt;This is the body&lt;/h1&gt;&lt;/html&gt;&quot;    },    &quot;recipients&quot;: {        &quot;to&quot;: [            {                &quot;address&quot;: &quot;customer@domain.com&quot;,                &quot;displayName&quot;: &quot;Customer Name&quot;            }        ]    },    &quot;senderAddress&quot;: &quot;sender@contoso.com&quot;}poller = email_client.begin_send(message)result = poller.result()```### Send an Email Message to Multiple RecipientsTo send an email message to multiple recipients, add a object for each recipient type and an object for each recipient.```pythonmessage = {    &quot;content&quot;: {        &quot;subject&quot;: &quot;This is the subject&quot;,        &quot;plainText&quot;: &quot;This is the body&quot;,        &quot;html&quot;: &quot;html&gt;&lt;h1&gt;This is the body&lt;/h1&gt;&lt;/html&gt;&quot;    },    &quot;recipients&quot;: {        &quot;to&quot;: [            {&quot;address&quot;: &quot;customer@domain.com&quot;, &quot;displayName&quot;: &quot;Customer Name&quot;},            {&quot;address&quot;: &quot;customer2@domain.com&quot;, &quot;displayName&quot;: &quot;Customer Name 2&quot;}        ],        &quot;cc&quot;: [            {&quot;address&quot;: &quot;ccCustomer@domain.com&quot;, &quot;displayName&quot;: &quot;CC Customer Name&quot;},            {&quot;address&quot;: &quot;ccCustomer2@domain.com&quot;, &quot;displayName&quot;: &quot;CC Customer Name 2&quot;}        ],        &quot;bcc&quot;: [            {&quot;address&quot;: &quot;bccCustomer@domain.com&quot;, &quot;displayName&quot;: &quot;BCC Customer Name&quot;},            {&quot;address&quot;: &quot;bccCustomer2@domain.com&quot;, &quot;displayName&quot;: &quot;BCC Customer Name 2&quot;}        ]    },    &quot;senderAddress&quot;: &quot;sender@contoso.com&quot;}poller = email_client.begin_send(message)result = poller.result()```### Send Email with AttachmentsAzure Communication Services support sending email with attachments.```pythonimport base64with open(&quot;C://readme.txt&quot;, &quot;r&quot;) as file:    file_contents = file.read()file_bytes_b64 = base64.b64encode(bytes(file_contents, 'utf-8'))message = {    &quot;content&quot;: {        &quot;subject&quot;: &quot;This is the subject&quot;,        &quot;plainText&quot;: &quot;This is the body&quot;,        &quot;html&quot;: &quot;html&gt;&lt;h1&gt;This is the body&lt;/h1&gt;&lt;/html&gt;&quot;    },    &quot;recipients&quot;: {        &quot;to&quot;: [            {                &quot;address&quot;: &quot;customer@domain.com&quot;,                &quot;displayName&quot;: &quot;Customer Name&quot;            }        ]    },    &quot;senderAddress&quot;: &quot;sender@contoso.com&quot;,    &quot;attachments&quot;: [        {            &quot;name&quot;: &quot;attachment.txt&quot;,            &quot;attachmentType&quot;: &quot;text/plain&quot;,            &quot;contentInBase64&quot;: file_bytes_b64.decode()        }    ]}poller = email_client.begin_send(message)result = poller.result()```## TroubleshootingEmail operations will throw an exception if the request to the server fails. The Email client will raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md).```pythonfrom azure.core.exceptions import HttpResponseErrortry:    response = email_client.send(message)except HttpResponseError as ex:    print('Exception:')    print(ex)```## Next steps- [Read more about Email in Azure Communication Services][nextsteps]## ContributingThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].This project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.&lt;!-- LINKS --&gt;[azure_sub]: https://azure.microsoft.com/free/dotnet/[azure_portal]: https://portal.azure.com[azure-key-credential]: https://aka.ms/azsdk-python-core-azurekeycredential[cla]: https://cla.microsoft.com[coc]: https://opensource.microsoft.com/codeofconduct/[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/[coc_contact]: mailto:opencode@microsoft.com[communication_resource_docs]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&amp;pivots=platform-azp[email_resource_docs]: https://aka.ms/acsemail/createemailresource[communication_resource_create_portal]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&amp;pivots=platform-azp[communication_resource_create_power_shell]: https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice[communication_resource_create_net]: https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&amp;pivots=platform-net[package]: https://www.nuget.org/packages/Azure.Communication.Common/[product_docs]: https://aka.ms/acsemail/overview[nextsteps]: https://aka.ms/acsemail/overview[nuget]: https://www.nuget.org/[source]: https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/communication[domain_overview]: https://aka.ms/acsemail/domainsoverview# Release History## 1.0.0 (2023-03-31)### Features AddedThe public release of the Azure Communication Services SDK for Email has the following features:- send emails with a variety of options (multiple recipients, attachments, etc.)- poll for the status of the email that was sent to track its progress## 1.0.0b2 (2023-03-01)### Features Added- Adding support for AAD token authentication- Added the ability to specify the API version by an optional `api_version` keyword parameter.### Breaking Changes- Made the SDK Model-less. Objects are now constructed using a dictionary instead of a model.- Reworked the SDK to follow the LRO (long running operation) approach. The 'begin_send' method returns a poller that can be used to check for the status of sending the email and retrieve the result. The return object has been adjusted to fit this approach. - The `get_send_status` method has been removed.- The `sender` property has been changed to `senderAddress`.- The `email` property under the recipient object has been changed to `address`.- The `attachmentType` property under `attachments` has been changed to 'contentType'. This now accepts the attachment mime type.- The `contentBytesBase64` property under `attachments` has been changed to `contentInBase64`- Custom headers in the email message are now key/value pairs.- The importance property was removed. Email importance can now be specified through either the `x-priority` or `x-msmail-priority` custom headers.### Other ChangesPython 3.6 is no longer supported. Please use Python version 3.7 or later. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).## 1.0.0b1 (2022-08-09)The first preview of the Azure Communication Email Client has the following features:- send emails to multiple recipients with attachments- get the status of a sent message</longdescription>
</pkgmetadata>