<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Gridworks Proactor[![PyPI](https://img.shields.io/pypi/v/gridworks-proactor.svg)][pypi status][![Status](https://img.shields.io/pypi/status/gridworks-proactor.svg)][pypi status][![Python Version](https://img.shields.io/pypi/pyversions/gridworks-proactor)][pypi status][![License](https://img.shields.io/pypi/l/gridworks-proactor)][license][![Read the documentation at https://gridworks-proactor.readthedocs.io/](https://img.shields.io/readthedocs/gridworks-proactor/latest.svg?label=Read%20the%20Docs)][read the docs][![Tests](https://github.com/thegridelectric/gridworks-proactor/workflows/Tests/badge.svg)][tests][![Codecov](https://codecov.io/gh/thegridelectric/gridworks-proactor/branch/main/graph/badge.svg)][codecov][![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)][pre-commit][![Black](https://img.shields.io/badge/code%20style-black-000000.svg)][black][pypi status]: https://pypi.org/project/gridworks-proactor/[read the docs]: https://gridworks-proactor.readthedocs.io/[tests]: https://github.com/thegridelectric/gridworks-proactor/actions?workflow=Tests[codecov]: https://app.codecov.io/gh/thegridelectric/gridworks-proactor[pre-commit]: https://github.com/pre-commit/pre-commit[black]: https://github.com/psf/blackThis packages provides &quot;live actor&quot; and &quot;application monitored communication&quot; infrastructure for the[GridWorks SpaceHeat SCADA](https://github.com/thegridelectric/gw-scada-spaceheat-python) project. This separationallows the scada code to be more focussed on on application specific details and provides the potential to re-use the&quot;live actor&quot; and &quot;application monitored&quot; infrastructure.## Features- [](Proactor), a single threaded event loop running on asyncio, for exchanging messages between the main application  object, &quot;live actor&quot; subobjects and MQTT clients.- A [communication state] (&quot;active&quot; or not) for each external communications link is available to the proactor and  sub-objects. &quot;Active&quot; communications is defined as ALL of the following:  - The underlying communications mechanism (MQTT) is connected.  - All input channels of underlying mechanism (MQTT topics) are established.  - A application messages requiring acknowledgement have been ACKed in timely fashion (by default 5 seconds).  - A message has been received &quot;recently&quot; (by default within 1 minute).- Reliable delievery of &quot;Events&quot; generated locally. Generated Events are stored locally until they are acknowledged  and unacknowledged Events are retransmitted when the &quot;Active&quot; communication state is restored.- [](gwproactor_test), a test package for development and test environments of projects that implement a class derived  from [](Proactor), allowing the derived class to be tested with the base-class tests.## Requirements### MosquittoTesting requires an MQTT broker. The Mosquitto broker can be installed with:```shellbrew install mosquittobrew services restart mosquitto```### TLSTesting uses TLS by default. The tests require the path to the CA certificate and private key used to sign the certificateof the MQTT broker. To set up TLS:Install gridworks-cert (gwcert):```shellpipx install gridworks-cert```Create a local Certificate Authority:```shellgwcert ca create```Create certificate and key for the Mosquitto MQTT broker:```shellgwcert key add --dns localhost mosquitto```Find the path to `mosquitto.conf` in the output of:```shellbrew services info mosquitto -v```Modify `mosquitto.conf` with the TLS configuration in [example-test-mosquitto.conf](tests/config/example-test-mosquitto.conf),fixing up the paths with real absolute paths to certificate, key and CA certificate files. These paths can be found with:```shellgwcert ca info```Restart the Mosquitto server:```shellbrew services restart mosquitto```Test Mosquitto 'clear' port:```shell# in one windowmosquitto_sub -h localhost -p 1883 -t foo# in another windowmosquitto_pub -h localhost -p 1883 -t foo -m '{&quot;bla&quot;:1}'```Test Mosquitto TLS port:```shellgwcert key add pubsub# in one windowmosquitto_sub -h localhost -p 8883 -t foo \     --cafile $HOME/.local/share/gridworks/ca/ca.crt \     --cert $HOME/.local/share/gridworks/ca/certs/pubsub/pubsub.crt \     --key $HOME/.local/share/gridworks/ca/certs/pubsub/private/pubsub.pem# in another windowmosquitto_pub -h localhost -p 8883 -t foo \     --cafile $HOME/.local/share/gridworks/ca/ca.crt \     --cert $HOME/.local/share/gridworks/ca/certs/pubsub/pubsub.crt \     --key $HOME/.local/share/gridworks/ca/certs/pubsub/private/pubsub.pem \     -m '{&quot;bar&quot;:1}'```#### Troubleshooting MosquittoMosquitto logging can be enabled in the `mosquitto.conf` file with the lines:```log_dest stderrlog_type all```To see the console output, stop the Mosquitto service and start it explicitly on the command line:```shellbrew services stop mosquittomosquitto -c /opt/homebrew/etc/mosquitto/mosquitto.conf```#### Pre-existing key filesIf CA or Mosquito certificate can key files _already_ exist, their paths can be specified in `mosquitto.conf` as above andfor the tests with there GWPROACTOR_TEST_CA_CERT_PATH and GWPROACTOR_TEST_CA_KEY_PATH environment variables.#### Disabling TLSTo disable testing of TLS, modify the the file `tests/.env-gwproactor-test` with:```GWCHILD_PARENT_MQTT__TLS__USE_TLS=falseGWPARENT_CHILD_MQTT__TLS__USE_TLS=false```## InstallationYou can install _Gridworks Proactor_ via [pip] from [PyPI]:```console$ pip install gridworks-proactor```## ContributingContributions are very welcome. In order to develop, do this:```console$ poetry install --all-extras```To learn more, see the [Contributor Guide].## LicenseDistributed under the terms of the [MIT license][license],_Gridworks Proactor_ is free and open source software.## IssuesIf you encounter any problems,please [file an issue] along with a detailed description.## CreditsThis project was generated from [@cjolowicz]'s [Hypermodern Python Cookiecutter] template.[@cjolowicz]: https://github.com/cjolowicz[pypi]: https://pypi.org/[hypermodern python cookiecutter]: https://github.com/cjolowicz/cookiecutter-hypermodern-python[file an issue]: https://github.com/thegridelectric/gridworks-proactor/issues[pip]: https://pip.pypa.io/&lt;!-- github-only --&gt;[license]: https://github.com/thegridelectric/gridworks-proactor/blob/main/LICENSE[contributor guide]: https://github.com/thegridelectric/gridworks-proactor/blob/main/CONTRIBUTING.md[communication state]: https://gridworks-proactor.readthedocs.io/en/latest/comm_state.html</longdescription>
</pkgmetadata>