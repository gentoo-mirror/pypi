<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sdc-cryptography[![Build Status](https://travis-ci.org/ONSdigital/sdc-cryptography.svg?branch=master)](https://travis-ci.org/ONSdigital/sdc-cryptography)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/b7b2eb54a248411086ddffb66097e578)](https://www.codacy.com/app/ONS/sdc-cryptography?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=ONSdigital/sdc-cryptography&amp;amp;utm_campaign=Badge_Grade)[![codecov](https://codecov.io/gh/ONSdigital/sdc-cryptography/branch/master/graph/badge.svg)](https://codecov.io/gh/ONSdigital/sdc-cryptography)A common source code library for SDC services that use JWE. Apps wishing to use this should add the sdc_cryptographydependency to their requirements.txt and install with pip.## Basic Use (with pipenv, recommended)### Install requirements```bashpip install pipenvmake build```### Run the unit tests```bashpipenv run make test```### Create a package for deployment```bashpipenv run make sdist```## Basic Use (with activated virtual environment)### Install requirementsThese commands will generate a requirements file that pip can use.  It doesn't have to be created this way but this is the easiest way.```bashpip install pipenvpipenv lock -r --dev &gt; requirements.txtpip install -r requirements.txt```### Run the unit tests```bashmake test```### Create a package for deployment```bashmake sdist```## UsageNeed to generate a keys.yml file first.  Note, this requires a file systemto store the file.  Then it needs to be loaded, and a key store generated.```bashgenerate_keys.py &lt;key_folder_location&gt;```After this has been configured, encrypting and decrypting can be done as in theexample below.```pythonsecrets_from_file = yaml.safe_load(&quot;keys.yml&quot;)validate_required_secrets(secrets_from_file, EXPECTED_SECRETS, KEY_PURPOSE_SUBMISSION)key_store = KeyStore(secrets_from_file)# Encrypt JSON (Purpose has a single encryption key in the key store)from sdc.crypto.encrypter import encryptencrypted_json = encrypt(json, key_store, key_purpose)# Encrypt JSON with encryption service (Purpose has multiple encryption keys in the key store each tagged with a service)from sdc.crypto.encrypter import encryptencrypted_json = encrypt(json, key_store, key_purpose, encryption_for_service=&quot;some-service&quot;)# Decrypt UTF8 jwe tokenfrom sdc.crypto.decrypter import decryptdata_bytes = data.decode('UTF8')decrypted_json = decrypt(data_bytes, key_store, key_purpose)```## PyPiThis repo is available from PyPi at [sdc-cryptography](https://pypi.org/project/sdc-cryptography/)The package is published automatically to PyPi when a tag is created in Github. The configuration for this is in the.travis.yml file.</longdescription>
</pkgmetadata>