<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ReBNF&lt;div&gt;  &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%96%20Version-0.9-ec3832.svg?color=ec3832&amp;style=flat&quot;/&gt;&lt;/a&gt;  &lt;a href=&quot;https://opsocket.com&quot; style=&quot;text-decoration: none;&quot;&gt;    &lt;img alt=&quot;opsocket&quot; height=&quot;42&quot; src=&quot;https://gitlab.com/opsocket/rebnf/-/raw/main/docs/assets/imgs/logo.svg&quot; loading=&quot;lazy&quot; /&gt;  &lt;/a&gt;&lt;/div&gt;**ReBNF** (*Regexes for Extended Backus-Naur Form*) is a notation used to define thesyntax of a language using regular expressions.It is an extension of the EBNF (Extended Backus-Naur Form) notation, allowingfor more flexibility and ease of use.```ooooooooo.             oooooooooo.  ooooo      ooo oooooooooooo `888   `Y88.           `888'   `Y8b `888b.     `8' `888'     `8  888   .d88'  .ooooo.   888     888  8 `88b.    8   888          888ooo88P'  d88' `88b  888oooo888'  8   `88b.  8   888oooo8     888`88b.    888ooo888  888    `88b  8     `88b.8   888    &quot;     888  `88b.  888    .o  888    .88P  8       `888   888         o888o  o888o `Y8bod8P' o888bood8P'  o8o        `8  o888o       ```## Table of Contents- [Syntax](#syntax)- [Example](#example)- [Usage](#usage)- [Contributing](#contributing)- [License](#license)## SyntaxThe **ReBNF** notation uses regular expressions to define the structure of alanguage. Each *rule* consists of a *left-hand side* (non-terminal) and a*right-hand side* separated by an **assignment operator** (either `::=`, `:=` or `=`).The general syntax of a **ReBNF** rule is as follows:```&lt;alnum&gt; ::= r&quot;[a-zA-Z0-9]&quot; ; # any alphanumeric character```The alphanumeric set is composed of all letters and all digits, which sums up36 characters. The **EBNF** syntax requires *quotes* and `|` operators in between characters todefine the `alnum` identifier as matching any alphanumeric character, which sums up to 143 characters.Using **ReBNF**, a single regex is required such as `r&quot;[a-zA-Z0-9]&quot;`, which sums up to 14 characters.### Identifiers The enclosures `&lt;` and `&gt;` are optional, such as:```alnum = r&quot;[a-zA-Z0-9]&quot;       # shorter definition```To improve readability and consistency, spaces are removed from *identifiers*,and the **snake_case** naming convention is used instead.Snake case identifiers consist of **lowercase letters**, **digits**,and **underscores**. The naming convention also dictates that each word within an identifier isseparated by an underscore.This convention makes a clear distinction between individual words andensures that identifiers are easily recognizable.For example, an identifier `non-terminal symbol` would have to be written as `non_terminal_symbol`. By adhering to the snake case convention, ReBNF identifiers maintain astandardized and consistent style throughout the notation, enabling easiercomprehension and usage.### ModularityIn **ReBNF**, `import` statements are used to bring in *grammar rules* definedin separate specification files. This enables the reuse of existing rules andpromotes modular design in grammar specifications.As a result, we can organize grammar rules into separate `.rebnf`specification files, making it easier to manage and maintain complexgrammars. This allows for better code organization, reuse of common rules,and separation of concerns.To import rules from another specification file, we can use the `import`statement followed by the dotted path to a specification file or the `from`statement to import only specific items. This enables us to selectively useand reference rules defined in other files.Given a folder hierarchy such as:```grammar/├── common.rebnf└── spec.rebnf```Here's an example:```from common import *```Using modularity in **ReBNF** files can lead to more maintainable and scalablegrammar specifications.### Optional groupsSquare brackets `[ ]` are used to define optional groups rather thanrepetition. In **EBNF**, `3 * [aa]` would indicate the generation of multipleoccurrences of `aa` (e.g., A, AA, AAA), whereas in **ReBNF**, it denotes anoptional group that can occur *zero or one* times.In **EBNF**:```aa = &quot;A&quot;;bb = 3 * aa, &quot;B&quot;;cc = 3 * [aa], &quot;C&quot;;```Which means:- `aa`: A- `bb`: AAAB- `cc`: C, AC, AAC, AAACIn **ReBNF**:```aa = &quot;A&quot;;bb = 3 * aa &quot;B&quot;;cc = 3 * [aa] &quot;C&quot;;```Which means:- `aa`: A- `bb`: AAAB- `cc`: AAAC### Concatenation**ReBNF** also introduces a change in concatenation. In **EBNF**, explicit concatenation is required using a comma `,` between twoidentifiers. However, in **ReBNF**, since snake cased identifiers are enforced,concatenation is implicit. Adjacent terminals or identifiers areconcatenated.That's why we are able to drop the comma in `3 * aa, &quot;C&quot;` if we want `cc` to be `&quot;AAAC&quot;`.## ExampleHere's a short example of a **ReBNF** definition for a simple arithmeticexpression language:```expression = term { ('+' | '-') term }term = factor { ('*' | '/') factor }factor = number | expressionnumber = r'\d+'```## Usage**ReBNF** notation is used to define the syntax of programming languages,configuration file formats, or any other formal language. It provides a concise and powerful way to express language structures with aaddition of regular expressions.&gt; Note that the functions in this module are only designed to parse&gt; syntactically valid **ReBNF** code (code that does not raise when parsed&gt; using `parse()`). The behavior of the functions in this module is undefined&gt; when providing invalid **ReBNF** code and it can change at any point. ## ContributingContributions are welcome! If you have suggestions, improvements, or new ideasrelated to the **ReBNF** notation, please feel free to open an issue orsubmit a pull request.## LicenseThis project is licensed under the [GPLv3][#gplv3] license - see [LICENSE.md][#license] for details.[#gplv3]: https://www.gnu.org/licenses/gpl-3.0.html[#license]: https://gitlab.com/opsocket/rebnf/-/blob/main/LICENSE.md</longdescription>
</pkgmetadata>