<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Zapier TriggersDjango app for managing Zapier trigger authenticationThis app provides the minimal scaffolding required to support a Zapiertrigger in your application. Specifically it supports token-basedauthentication for [pollingtriggers](https://platform.zapier.com/docs/triggers#polling-trigger).### Version supportThis app supports Django 3.2+ (`HttpResponse.headers`), and Python 3.8+(`:=` operator).## How does it work?The app has a single model that stores an API token (UUID) against aUser. The token object has the concept of &quot;scope&quot; which is an array ofstrings representing API triggers that are supported. In effect it usesthe token UUID for authentication, and the token scopes forauthorization.A trigger itself is just a view that returns some data in the prescribedZapier format - which in Python terms is a JSON-serializable list of dicts,each of which must contain an `id` attr:```python[    {&quot;id&quot;: 1, &quot;name&quot;: &quot;Fred&quot;},    { ... }]```For simple scenarios where you want to return a queryset, there is a baseCBV `PollingTriggerView` which you can subclass.## InstallationInstall the package using pip / poetry```pip install django-zapier-triggers```## Configuration1. Add the app to your `INSTALLED_APPS````python# settings.pyINSTALLED_APPS = [    ...,    zapier,]```2. Run migrations to add model tables```$ python manage.py migrate```3. Add a url for the Zapier auth check```python# urls.pyurlpatterns = [    ...    path(        &quot;zapier/auth-check/&quot;,        zapier.views.zapier_token_check,        name=&quot;zapier_auth_check&quot;,    ),]```4. Configure Zapier trigger (https://platform.zapier.com/docs/triggers)This app supports the &quot;API Key&quot; auth model for Zapier appshttps://platform.zapier.com/docs/apikeyYou must configure your Zapier authentication to use API Keyauthentication, and in the step &quot;Configure a Test Request &amp; ConnectionLabel&quot; you should ensure that you are passing the API Key as a requestheader called &quot;X-Api-Token&quot;, and not in the URL.NB You will need to host your application somewhere that is visible onthe internet in order to confirm that the authentication works. `ngrok`is a good option to run the application locally.## UsageNow that you have authentication set up, you can create your triggers. Apolling trigger is nothing more that a GET endpoint that supports thetoken authentication and that returns an ordered list of JSON objects.Zapier itself handles deduplication of objects using the `id` propertyof each object that is returned - you can read more about deduplicationhere - https://zapier.com/help/create/basics/data-deduplication-in-zapsThis package is responsible for the endpoint authentication - everythingelse is up to you. You can use the `polling_trigger` view functiondecorator to guard the functions that you set up as triggers. Thedecorator takes a required string argument, which is a scope that mustmatch the incoming `request.auth`. The decorator handles requestauthentication, setting the `request.user` and `request.auth`properties.```python# views.py@zapier.decorators.polling_trigger(&quot;new_books&quot;)def new_books_trigger(request: HttpRequest) -&gt; JsonResponse:    latest_id = request.auth.get_latest_id(&quot;new_books&quot;) or -1    books = Book.objects.filter(id__gt=latest_id).order_by(&quot;-id&quot;)[:25]    data = [{&quot;id&quot;: book.id, &quot;title&quot;: book.title} for book in books]    return JsonReponse(data)```</longdescription>
</pkgmetadata>