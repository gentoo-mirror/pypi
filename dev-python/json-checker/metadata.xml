<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>json_checker===============================================================================.. image:: https://travis-ci.org/DKorytkin/json_checker.svg?branch=master    :alt: Build    :target: https://travis-ci.org/DKorytkin/json_checker.. image:: https://codecov.io/gh/DKorytkin/json_checker/branch/master/graph/badge.svg    :alt: Cov    :target: https://codecov.io/gh/DKorytkin/json_checker.. image:: https://img.shields.io/badge/python-3.6%2C%20%203.7%2C%20%203.8-blue.svg    :alt: Python versions    :target: https://pypi.python.org/pypi/json_checker.. image:: https://img.shields.io/pypi/v/json_checker.svg       :alt: PyPI    :target: https://pypi.python.org/pypi/json_checker.. image:: https://img.shields.io/pypi/dm/json_checker.svg       :alt: PyPI - Downloads    :target: https://pypistats.org/packages/json-checker**json_checker** is a library for validating Python data structures,such as those obtained from JSON (or something else) to Python data-types.json_checker has a parameter (soft=True) that allows you validate all json andraise all errors after validation done, it`s very profitable from API testing:.. code:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt;    &gt;&gt;&gt; from json_checker import Checker    &gt;&gt;&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; def test_api():    &gt;&gt;&gt;     res = requests.get(API_URL).json()    &gt;&gt;&gt;     assert Checker(EXPECTED_RESPONSE, soft=True).validate(res) == resInstallation-------------------------------------------------------------------------------.. code-block:: sh    $ pip install json_checkerExample----------------------------------------------------------------------------Here is a quick example to get a feeling of **json_checker**,validating a list of entries with personal information:.. code:: python    &gt;&gt;&gt; from json_checker import Checker    &gt;&gt;&gt; current_data = {'first_key': 1, 'second_key': '2'}    &gt;&gt;&gt; expected_schema = {'first_key': int, 'second_key': str}    &gt;&gt;&gt; checker = Checker(expected_schema)    &gt;&gt;&gt; result = checker.validate(current_data)    &gt;&gt;&gt; assert result == current_dataIf data is valid, ``Checker.validate`` will return the validated dataIf data is invalid, ``Checker`` will raise ``CheckerError``.How ``json_checker`` validates data-------------------------------------------------------------------------------Types~~~~~If ``Checker(...)`` encounters a type (such as ``int``, ``str``),it will check if the corresponding piece of data is an instance of that type,otherwise it will raise ``CheckerError``... code:: python    &gt;&gt;&gt; from json_checker import Checker    &gt;&gt;&gt; Checker(int).validate(123)    123    &gt;&gt;&gt; Checker(int).validate('123')    Traceback (most recent call last):    ...    checker_exceptions.TypeCheckerError:    current value '123' (str) is not intLists, similar containers~~~~~~~~~~~~~~~~~~~~~~~~~If ``Checker(...)`` encounters an instance of ``list``, ``tuple``, ``set`` or``frozenset``, it will validate contents of corresponding data containeragainst schemas listed inside that container:if param ``soft`` is True validate all data,and if have not valid data raise exception after validation.. code:: python    &gt;&gt;&gt; Checker([int]).validate([1, 1, 0, 1])    [1, 1, 0, 1]    &gt;&gt;&gt; Checker([str], soft=True).validate((1, 2, 3))    Traceback (most recent call last):    ...    checker_exceptions.CheckerError:    ListCheckerErrors:    current value 1 (int) is not str    current value 2 (int) is not str    current value 3 (int) is not str    &gt;&gt;&gt; Checker([str]).validate((1, 2, 3))    Traceback (most recent call last):    ...    checker_exceptions.ListCheckerError:    current value 1 (int) is not strDictionaries~~~~~~~~~~~~If ``Checker(...)`` encounters an instance of ``dict``, it will validate datakey-value pairs:.. code:: python    &gt;&gt;&gt; current_dict = {'first_key': 1, 'second_key': '2'}    &gt;&gt;&gt; checker = Checker({'first_key': int, 'second_key': int})    &gt;&gt;&gt; checker.validate(current_dict)    Traceback (most recent call last):    ...    checker_exceptions.DictCheckerError:    From key=&quot;second_key&quot;        current value '2' (str) is not intOperators Or, And, OptionalKey~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If you needed validate data from some conditions, use And operatorfor example current data must be int instance and greater than 0 and less 99try it:.. code:: python    &gt;&gt;&gt; from json_checker import Checker, And    &gt;&gt;&gt; checker = Checker(And(int, lambda x: 0 &lt; x &lt; 99))    &gt;&gt;&gt; checker.validate(12)    12    &gt;&gt;&gt; checker.validate(100)    Traceback (most recent call last):    ...    checker_exceptions.CheckerError:    Not valid data And(int, &lt;lambda&gt;),        function errorIf you need validation not required data value, use Or operatorfor example current data must be int or Nonetry it:.. code:: python    &gt;&gt;&gt; from json_checker import Checker, Or    &gt;&gt;&gt; checker = Checker(Or(int, None))    &gt;&gt;&gt; checker.validate(122)    122    &gt;&gt;&gt; checker.validate('666')    Traceback (most recent call last):    ...    checker_exceptions.CheckerError:    Not valid data Or('int', None),        current value '666' (str) is not int, current value '666' (str) is not NoneIf you need validate no required dict key, use OptionalKey.. code:: python    &gt;&gt;&gt; from json_checker import Checker, OptionalKey    &gt;&gt;&gt; expected_schema = {'key1': str, OptionalKey('key2'): int}    &gt;&gt;&gt; Checker(expected_schema).validate({'key1': 'value'})    {'key1': 'value'}    &gt;&gt;&gt; Checker(expected_schema).validate({'key1': 'value', 'key2': 'value2'})    Traceback (most recent call last):    ...    checker_exceptions.DictCheckerError:    From key=&quot;OptionalKey(key2)&quot;        current value 'value2' (str) is not intMore logs for debug~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python    &gt;&gt;&gt; import logging    &gt;&gt;&gt; from json_checker import Checker    &gt;&gt;&gt; logging.basicConfig(level=logging.DEBUG)    &gt;&gt;&gt; Checker({'k': str}, soft=True).validate({'k': 1})    DEBUG:json_checker.app:Checker settings: ignore_extra_keys=False, soft=True    DEBUG:json_checker.app:DictChecker({'k': &lt;class 'str'&gt;} (dict)) start with: {'k': 1}    DEBUG:json_checker.app:TypeChecker(str) start with: 1    DEBUG:json_checker.app:TypeChecker(str) error current value 1 (int) is not str    DEBUG:json_checker.app:DictChecker({'k': &lt;class 'str'&gt;} (dict)) error From key=&quot;k&quot;: current value 1 (int) is not str    Traceback (most recent call last):    ...    CheckerError:    From key=&quot;k&quot;: current value 1 (int) is not str</longdescription>
</pkgmetadata>