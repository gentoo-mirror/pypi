<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># rust_deciderRust implementation of bucketing, targeting, overrides, and dynamic config logic.# Usage## class `Decider`A class used to expose these APIs:- ```  choose(     feature_name: str,     context: Mapping[str, JsonValue]  ) -&gt; Decision  ```- ```  choose_all(     context: Mapping[str, JsonValue],     bucketing_field_filter: Optional[str] = None  ) -&gt; Dict[str, Decision]  ```(dynamic configurations)- ```  get_bool(    feature_name: str,    context: Mapping[str, JsonValue],  ) -&gt; bool  ```- ```  get_int(    feature_name: str,    context: Mapping[str, JsonValue],  ) -&gt; int  ```- ```  get_float(    feature_name: str,    context: Mapping[str, JsonValue],  ) -&gt; float  ```- ```  get_string(    feature_name: str,    context: Mapping[str, JsonValue],  ) -&gt; str  ```- ```  get_map(    feature_name: str,    context: Mapping[str, JsonValue],  ) -&gt; Dict[str, Any]  ```- ```  all_values(     context: Mapping[str, JsonValue],  ) -&gt; Dict[str, Any]  ```misc:- ```  get_feature(    feature_name: str,  ) -&gt; Feature  ```### `choose()` examples:```pythonfrom rust_decider import Deciderfrom rust_decider import DeciderExceptionfrom rust_decider import FeatureNotFoundExceptionfrom rust_decider import DeciderInitExceptionfrom rust_decider import PartialLoadExceptionfrom rust_decider import ValueTypeMismatchException# initialize Decider instancetry:    decider = Decider(&quot;../cfg.json&quot;)except PartialLoadException as e:    # log errors of misconfigured features    print(f&quot;{e.args[0]}: {e.args[2]}&quot;)    # use partially initialized Decider instance    decider = e.args[1]except DeciderInitException as e:    print(e)# get a Decision for a feature via choose()try:    decision = decider.choose(feature_name=&quot;exp_1&quot;, context={&quot;user_id&quot;: &quot;3&quot;, &quot;app_name&quot;: &quot;ios&quot;})except DeciderException as e:    print(e)assert dict(decision) == {    &quot;variant&quot;: &quot;variant_0&quot;,    &quot;value&quot;: None,    &quot;feature_id&quot;: 3246,    &quot;feature_name&quot;: &quot;exp_1&quot;,    &quot;feature_version&quot;: 2,    &quot;events&quot;: [      &quot;0::::3246::::exp_1::::2::::variant_0::::3::::user_id::::37173982::::2147483648::::test&quot;    ]}# `user_id` targeting not satisfied so &quot;variant&quot; is `None` in the returned Decisiontry:    decision = decider.choose(feature_name=&quot;exp_1&quot;, context={&quot;user_id&quot;: &quot;1&quot;})except DeciderException as e:    print(e)assert dict(decision) == {  &quot;variant&quot;: None,  &quot;value&quot;: None,  &quot;feature_id&quot;: 3246,  &quot;feature_name&quot;: &quot;exp_1&quot;,  &quot;feature_version&quot;: 2,  &quot;events&quot;: []}# handle &quot;feature not found&quot; exception# (`FeatureNotFoundException` is a subclass of `DeciderException`)try:    decision = decider.choose(feature_name=&quot;not_here&quot;, context={&quot;user_id&quot;: &quot;1&quot;})except FeatureNotFoundException as e:  print(&quot;handle feature not found exception:&quot;)  print(e)except DeciderException as e:    print(e)```### `choose_all()` examples:```python# `decider` initialized same as abovedecisions = decider.choose_all(context={&quot;user_id&quot;: &quot;3&quot;, &quot;app_name&quot;: &quot;ios&quot;}, bucketing_field_filter=&quot;user_id&quot;)assert dict(decisions[&quot;exp_67&quot;]) == {  &quot;variant&quot;: &quot;variant_0&quot;,  &quot;value&quot;: None,  &quot;feature_id&quot;: 3125,  &quot;feature_name&quot;: &quot;exp_67&quot;,  &quot;feature_version&quot;: 4,  &quot;events&quot;: [    &quot;0::::3125::::exp_67::::4::::variant_0::::3::::user_id::::37173982::::2147483648::::test&quot;  ]}```### Dynamic Configurations + misc. examples:```python# `decider` initialized same as abovetry:    dc_bool = decider.get_bool(&quot;dc_bool&quot;, context={})    dc_int = decider.get_int(&quot;dc_int&quot;, context={})    dc_float = decider.get_float(&quot;dc_float&quot;, context={})    dc_string = decider.get_string(&quot;dc_string&quot;, context={})    dc_map = decider.get_map(&quot;dc_map&quot;, context={})    feature = decider.get_feature(&quot;dc_map&quot;)except FeatureNotFoundException as e:    print(&quot;handle feature not found exception:&quot;)    print(e)except ValueTypeMismatchException as e:    print(&quot;handle type mismatch:&quot;)    print(e)except DeciderException as e:    print(e)assert dc_bool == Trueassert dc_int == 99assert dc_float == 3.0assert dc_string == &quot;some_string&quot;assert dc_map == {  &quot;v&quot;: {      &quot;nested_map&quot;: {          &quot;w&quot;: False,          &quot;x&quot;: 1,          &quot;y&quot;: &quot;some_string&quot;,          &quot;z&quot;: 3.0      }  },  &quot;w&quot;: False,  &quot;x&quot;: 1,  &quot;y&quot;: &quot;some_string&quot;,  &quot;z&quot;: 3.0}assert dict(feature) == {  &quot;id&quot;: 3393,  &quot;name&quot;: &quot;dc_bool&quot;,  &quot;version&quot;: 2,  &quot;bucket_val&quot;: '',  &quot;start_ts&quot;: 0,  &quot;stop_ts&quot;: 0,  &quot;owner&quot;: &quot;test&quot;,  &quot;emit_event&quot;: False}```### Dynamic Configuration `all_values()` example:```python# `decider` initialized same as abovedecisions = decider.all_values(context={})assert decisions[&quot;dc_int&quot;] == 99```## python bindings used in `Decider` class```pythonimport rust_decider# Init deciderdecider = rust_decider.init(&quot;darkmode overrides targeting holdout mutex_group fractional_availability value&quot;, &quot;../cfg.json&quot;)# Bucketing needs a contextctx = rust_decider.make_ctx({&quot;user_id&quot;: &quot;7&quot;})# Get a decisionchoice = decider.choose(&quot;exp_1&quot;, ctx)assert choice.err() is None # check for errorschoice.decision() # get the variant# Get a dynamic config valuedc = decider.get_map(&quot;dc_map&quot;, ctx) # fetch a map DCassert dc.err() is None # check for errorsdc.val() # get the actual map itself```# Development## Updating package with latest `src/lib.rs` changes```sh# In a virtualenv, python &gt;= 3.7$ cd decider-py$ pip install -r requirements-dev.txt$ maturin develop```## Running tests```sh$ pytest decider-py/test/```## PublishingUse [conventional commit format](https://www.conventionalcommits.org/en/v1.0.0/#summary) in PR titles to trigger releases via `release-please` task in drone pipeline.- `chore:` &amp; `build:` commits don't trigger releases (used for changes like updating config files or documentation)- `fix:` bumps the patch version- `feat:` bumps the minor version- `feat!:` bumps the major version## Cross-CompilationWe're [using](https://www.maturin.rs/distribution.html#use-zig) Zig for cross-compilation which is reflected in the switch from the &quot;FLAVOR&quot; approach to &quot;TARGET&quot;. Cross-compilation is useful when we want to build code on one type of machine (like our CI server), but have it run on a different type of machine (like a server or user's machine with a different architecture).To build wheels for multiple platforms more effectively, we use &quot;TARGET&quot; variable in the .drone.yml. This includes platforms like &quot;linux-aarch64&quot; and &quot;linux-musl-x86_64&quot;.# Formatting / Linting```sh$ cargo fmt    --manifest-path decider-py/test/Cargo.toml$ cargo clippy --manifest-path decider-py/test/Cargo.toml```</longdescription>
</pkgmetadata>