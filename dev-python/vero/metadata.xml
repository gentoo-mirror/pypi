<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>vero: Python client for Vero============================.. image:: https://circleci.com/gh/waveaccounting/vero-python.svg?style=svg   :target: https://circleci.com/gh/waveaccounting/vero-python   :alt: Circle CI.. image:: https://readthedocs.org/projects/pip/badge/?version=latest   :target: https://vero.readthedocs.org/en/latest/   :alt: Read the DocsFull documentation can be found on `ReadTheDocs &lt;https://vero.readthedocs.org/en/latest/&gt;`_Vero is an API wrapper for event logging in your Python application.Fetch your auth token from your `Vero &lt;http://getvero.com&gt;`_ account and use the python interface instead of `API &lt;http://github.com/getvero/vero-api&gt;`_ web hooks.::    &gt;&gt;&gt; from vero import VeroEventLogger    &gt;&gt;&gt; logger = VeroEventLogger(auth_token)    &gt;&gt;&gt; user_id = 42    &gt;&gt;&gt; user_data = {            'full_name': 'Jane Doe'        }    &gt;&gt;&gt; response = logger.add_user(user_id, user_data)    &gt;&gt;&gt; response.status_code    200Features--------Modify user data and log events. Run in live or test mode.- Add user- Delete user- Edit user- Add user tags- Remove user tags- Unsubscribe user- Resubscribe user- Add event- Check heartbeatInstallation------------Install the package from PyPI::  pip install veroRun Tests------------Run Tests from command line.::   VERO_AUTH_TOKEN=[ Your Token here ] python setup.py testUsage-----Create instance~~~~~~~~~~~~~~~Use the authorization token from your Vero account page to create a VeroEventLogger object.::    &gt;&gt;&gt; from vero import VeroEventLogger    &gt;&gt;&gt; auth_token = &quot;foobar&quot;    &gt;&gt;&gt; logger = VeroEventLogger(auth_token)After creating an instance of VeroEventLogger as ``logger`` use any of the following methods to access Vero.Add user~~~~~~~~Create a new user with the information in ``user_data``. ``user_email`` is optional but is needed to trigger emails to the user.::    &gt;&gt;&gt; user_id = 1    &gt;&gt;&gt; user_email = 'johndoe@example.com'    &gt;&gt;&gt; user_data = {            'first name': 'John',            'last name': 'Doe'        }    &gt;&gt;&gt; logger.add_user(user_id, user_data, user_email=user_email)Edit user~~~~~~~~~Add or change fields in ``user_data`` for the user.::    &gt;&gt;&gt; user_id = 1    &gt;&gt;&gt; user_data = {            'first name': 'Jane'        }    &gt;&gt;&gt; logger.edit_user(user_id, user_data)Add user tags~~~~~~~~~~~~~Add each tag in ``tag_list`` to the user.::    &gt;&gt;&gt; user_id = 1    &gt;&gt;&gt; tag_list = ['blue', 'red', 'yellow']    &gt;&gt;&gt; logger.add_tags(user_id, tag_list)Remove user tags~~~~~~~~~~~~~~~~Remove each tag in ``tag_list`` from the user.::    &gt;&gt;&gt; user_id = 1    &gt;&gt;&gt; tag_list = ['yellow']    &gt;&gt;&gt; logger.remove_tags(user_id, tag_list)Unsubscribe user~~~~~~~~~~~~~~~~Unsubscribe the user from triggering future events.::    &gt;&gt;&gt; user_id = 1    &gt;&gt;&gt; logger.unsubscribe_user(user_id)Resubscribe user~~~~~~~~~~~~~~~~Resubscribe the user to allow triggering future events.::    &gt;&gt;&gt; user_id = 1    &gt;&gt;&gt; logger.resubscribe_user(user_id)Add event~~~~~~~~~Note: adding an event with a user id that doesn't exist will create the user.Event data can contain whatever fields are needed.::    &gt;&gt;&gt; user_id = 2    &gt;&gt;&gt; user_email = 'janedoe@example.com'    &gt;&gt;&gt; event_name = 'Visited Website'    &gt;&gt;&gt; event_data = {            'date': 'today',            'visited': 'front page'        }    &gt;&gt;&gt; logger.add_event(event_name, event_data, user_id, user_email=user_email)Re-identify a user~~~~~~~~~~~~~Change a user's ``identifier`` (or ID) in Vero. This method accept their current (old) ``identifier`` and the ``identifier`` to replace it.::    &gt;&gt;&gt; user_id = 1    &gt;&gt;&gt; new_user_id = 2     &gt;&gt;&gt; logger.reidentify_user(user_id, new_user_id)Delete user~~~~~~~~~~~~~~~~Delete the user::    &gt;&gt;&gt; user_id = 1    &gt;&gt;&gt; logger.delete_user(user_id)</longdescription>
</pkgmetadata>