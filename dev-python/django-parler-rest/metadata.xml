<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-parler-rest**Adding translation support to [django-rest-framework](http://www.django-rest-framework.org/)**.[![Tests](https://github.com/django-parler/django-parler-rest/actions/workflows/tests.yml/badge.svg)](https://github.com/django-parler/django-parler-rest/actions/workflows/tests.yml)[![PyPI](https://img.shields.io/pypi/pyversions/django-parler-rest.svg)](https://pypi.python.org/pypi/django-parler-rest)[![PyPI version](https://img.shields.io/pypi/v/django-parler-rest.svg)](https://pypi.python.org/pypi/django-parler-rest)[![License](https://img.shields.io/pypi/l/django-parler-rest.svg)](https://pypi.python.org/pypi/django-parler-rest)[![Coverage](https://img.shields.io/codecov/c/github/django-parler/django-parler-rest/master.svg)](https://codecov.io/github/django-parler/django-parler-rest?branch=master)This package adds support for TranslatableModels from [django-parler](https://github.com/django-parler/django-parler)to [django-rest-framework](http://www.django-rest-framework.org/).## Installation```shellpip install django-parler-rest```## Usage* First make sure you have django-parler_ installed and configured.* Use the serializers as demonstrated below to expose the translations.First configure a model, following the [django-parler documentation](https://django-parler.readthedocs.io/en/latest/):```pythonfrom django.db import modelsfrom django.utils.translation import gettext_lazy as _from parler.models import TranslatableModel, TranslatedFieldsclass Country(TranslatableModel):    &quot;&quot;&quot;    Country database model.    &quot;&quot;&quot;    country_code = models.CharField(_(&quot;Country code&quot;), unique=True, db_index=True)    translations = TranslatedFields(        name = models.CharField(_(&quot;Name&quot;), max_length=200)        url = models.URLField(_(&quot;Webpage&quot;), max_length=200, blank=True)    )    class Meta:        verbose_name = _(&quot;Country&quot;)        verbose_name_plural = _(&quot;Countries&quot;)    def __str__(self):        return self.name```The model translations can be exposed as a separate serializer:```pythonfrom rest_framework import serializersfrom parler_rest.serializers import TranslatableModelSerializer, TranslatedFieldsFieldfrom .models import Country  # Example modelclass CountrySerializer(TranslatableModelSerializer):    translations = TranslatedFieldsField(shared_model=Country)    class Meta:        model = Country        fields = ('id', 'country_code', 'translations')```**Note:** The `TranslatedFieldsField` can only be used in a serializer that inherits from`TranslatableModelSerializer`.This will expose the fields as a separate dictionary in the JSON output:```json{    &quot;id&quot;: 528,    &quot;country_code&quot;: &quot;NL&quot;,    &quot;translations&quot;: {        &quot;nl&quot;: {            &quot;name&quot;: &quot;Nederland&quot;,            &quot;url&quot;: &quot;http://nl.wikipedia.org/wiki/Nederland&quot;        },        &quot;en&quot;: {            &quot;name&quot;: &quot;Netherlands&quot;,            &quot;url&quot;: &quot;http://en.wikipedia.org/wiki/Netherlands&quot;        },        &quot;de&quot;: {            &quot;name&quot;: &quot;Niederlande&quot;,            &quot;url&quot;: &quot;http://de.wikipedia.org/wiki/Niederlande&quot;        }    }}```## ContributingThis module is designed to be generic. In case there is anything you didn't like about it,or think it's not flexible enough, please let us know. We'd love to improve it!If you have any other valuable contribution, suggestion or idea,please let us know as well because we will look into it.Pull requests are welcome too. :-)## Running testsTests are run with `py.test`:```shellpython setup.py test  # install dependencies and run tests with coverage```</longdescription>
</pkgmetadata>