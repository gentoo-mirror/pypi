<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![ci_status](https://github.com/landing-ai/landingai-python/actions/workflows/ci_cd.yml/badge.svg)[![PyPI version](https://badge.fury.io/py/landingai.svg?)](https://badge.fury.io/py/landingai)![version](https://img.shields.io/pypi/pyversions/landingai)![license](https://img.shields.io/github/license/landing-ai/landingai-python)[![downloads](https://static.pepy.tech/badge/landingai/month)](https://pepy.tech/project/landingai)&lt;br&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://github.com/landing-ai/landingai-python/raw/main/assets/avi-logo.png&quot;&gt;&lt;/p&gt;# LandingLens Python SDKThe LandingLens Python SDK contains the LandingLens development library and examples that show how to integrate your app with LandingLens in a variety of scenarios. The examples cover different model types, image acquisition sources, and post-procesing techniques.## Documentation-  [Landing AI Python SDK Docs](https://landing-ai.github.io/landingai-python/)-  [Landing AI Support Center](https://support.landing.ai/)-  [LandingLens Walk-Through Video](https://www.youtube.com/watch?v=779kvo2dxb4)## Quick start### InstallFirst, install the Landing AI Python library:```bashpip install landingai```### Acquire Your First ImagesAfter installing the Landing AI Python library, you can start acquiring images from one of many image sources.For example, from a single image file:```pyfrom landingai.pipeline.frameset import Frameframe = Frame.from_image(&quot;/path/to/your/image.jpg&quot;)frame.resize(width=512, height=512)frame.save_image(&quot;/tmp/resized-image.png&quot;)```You can also extract frames from your webcam. For example:```pyfrom landingai.pipeline.image_source import Webcamwith Webcam(fps=0.5) as webcam:    for frame in webcam:        frame.resize(width=512, height=512)        frame.save_image(&quot;/tmp/webcam-image.png&quot;)```To learn how to acquire images from more sources, go to [Image Acquisition](https://landing-ai.github.io/landingai-python/image-acquisition/image-acquisition/).### Run InferenceIf you have deployed a computer vision model in LandingLens, you can use this library to send images to that model for inference.For example, let's say we've created and deployed a model in LandingLens that detects coffee mugs. Now, we'll use the code below to extract images (frames) from a webcam and run inference on those images.&gt; [!NOTE]&gt; If you don't have a LandingLens account, create one [here](https://app.landing.ai/). You will need to get an &quot;endpoint ID&quot; and &quot;API key&quot; from LandingLens in order to run inferences. Check our [Running Inferences / Getting Started](https://landing-ai.github.io/landingai-python/inferences/getting-started/).&gt; [!NOTE]&gt; Learn how to use LandingLens from our [Support Center]([https://support.landing.ai/docs/landinglens-workflow](https://support.landing.ai/landinglens/en)) and [Video Tutorial Library](https://support.landing.ai/docs/landinglens-workflow-2).&gt; Need help with specific use cases? Post your questions in our [Community](https://community.landing.ai/home).```pyfrom landingai.pipeline.image_source import Webcamfrom landingai.predict import Predictorpredictor = Predictor(    endpoint_id=&quot;abcdef01-abcd-abcd-abcd-01234567890&quot;,    api_key=&quot;land_sk_xxxxxx&quot;,)with Webcam(fps=0.5) as webcam:    for frame in webcam:        frame.resize(width=512)        frame.run_predict(predictor=predictor)        frame.overlay_predictions()        if &quot;coffee-mug&quot; in frame.predictions:            frame.save_image(&quot;/tmp/latest-webcam-image.png&quot;, include_predictions=True)```## ExamplesWe've provided some examples in Jupyter Notebooks to focus on ease of use, and some examples in Python apps to provide a more robust and complete experience.&lt;!-- Generated using https://www.tablesgenerator.com/markdown_tables --&gt;| Example | Description | Type ||---|---|---|| [Poker Card Suit Identification](https://github.com/landing-ai/landingai-python/blob/main/examples/webcam-collab-notebook/webcam-collab-notebook.ipynb) | This notebook shows how to use an object detection model from LandingLens to detect suits on playing cards. A webcam is used to take photos of playing cards. | Jupyter Notebook [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/landing-ai/landingai-python/blob/main/examples/webcam-collab-notebook/webcam-collab-notebook.ipynb)|| [Door Monitoring for Home Automation](https://github.com/landing-ai/landingai-python/blob/main/examples/rtsp-capture-notebook/rtsp-capture.ipynb) | This notebook shows how to use an object detection model from LandingLens to detect whether a door is open or closed. An RTSP camera is used to acquire images. | Jupyter Notebook [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/landing-ai/landingai-python/blob/main/examples/rtsp-capture-notebook/rtsp-capture.ipynb) || [Satellite Images and Post-Processing](https://github.com/landing-ai/landingai-python/tree/main/examples/post-processings/farmland-coverage/farmland-coverage.ipynb) | This notebook shows how to use a Visual Prompting model from LandingLens to identify different objects in satellite images. The notebook includes post-processing scripts that calculate the percentage of ground cover that each object takes up. | Jupyter Notebook [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/landing-ai/landingai-python/blob/main/examples/post-processings/farmland-coverage/farmland-coverage.ipynb) || [License Plate Detection and Recognition](https://github.com/landing-ai/landingai-python/tree/main/examples/license-plate-ocr-notebook/license_plate_ocr.ipynb) | This notebook shows how to extract frames from a video file and use a object detection model and OCR from LandingLens to identify and recognize different license plates. | Jupyter Notebook [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/landing-ai/landingai-python/blob/main/examples/license-plate-ocr-notebook/license_plate_ocr.ipynb) || [Streaming Video](https://github.com/landing-ai/landingai-python/tree/main/examples/capture-service) | This application shows how to continuously run inference on images extracted from a streaming RTSP video camera feed. | Python application |## Run Examples LocallyAll the examples in this repo can be run locally.To give you some guidance, here's how you can run the [`rtsp-capture`](https://github.com/landing-ai/landingai-python/tree/main/examples/capture-service) example locally in a shell environment:1. Clone the repo to local: `git clone https://github.com/landing-ai/landingai-python.git`2. Install the library: `poetry install --with examples` (See the [poetry docs](https://python-poetry.org/docs/#installation) for how to install `poetry`)3. Activate the virtual environment: `poetry shell`4. Run: `python landingai-python/examples/capture-service/run.py`</longdescription>
</pkgmetadata>