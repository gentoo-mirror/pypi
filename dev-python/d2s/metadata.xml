<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Version](https://img.shields.io/pypi/v/d2s)](https://pypi.org/project/d2s) [![Python versions](https://img.shields.io/pypi/pyversions/d2s)](https://pypi.org/project/d2s)[![Test Python package](https://github.com/MaastrichtU-IDS/d2s-cli/actions/workflows/test.yml/badge.svg)](https://github.com/MaastrichtU-IDS/d2s-cli/actions/workflows/test.yml) [![Publish Python package](https://github.com/MaastrichtU-IDS/d2s-cli/actions/workflows/publish.yml/badge.svg)](https://github.com/MaastrichtU-IDS/d2s-cli/actions/workflows/publish.yml)A Command Line Interface to help orchestrate the integration of heterogenous data sources under a common [RDF Knowledge Graph](https://www.w3.org/RDF/) using Python, RML mappings, Bash, and GitHub Actions workflows (YAML). You can find more informations about the Data2Services project on the [d2s documentation website ðŸ“–](https://d2s.semanticscience.org/docs/d2s-installation)## Installation Requirements:* [Python 3.7+](https://d2s.semanticscience.org/docs/d2s-installation#install-pip)* [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)* Optional: Java 11+ to use `d2s sparql upload`* Optional: [`oc` command line tool](https://maastrichtu-ids.github.io/dsri-documentation/docs/openshift-install) for deploying to the [DSRI OpenShift cluster](https://maastrichtu-ids.github.io/dsri-documentation/) (for Maastricht University academics and students)### Install from pypi```bashpip install d2s```&gt; Use [pip](https://pypi.org/project/pip/), pip3 or [pipx](https://pipxproject.github.io/pipx/) depending on your preferences.### Update```bashpip install --upgrade d2s ```### Install from GitHub branchYou can also install it from the `master` branch, if you want the latest updates:```bashpip install git+https://github.com/MaastrichtU-IDS/d2s-cli.git@master```### Uninstall```bashpip uninstall d2s```## Use d2sDisplay the default help command```bashd2s```### Generate metadataAnalyze a SPARQL endpoint metadata to generate [HCLS descriptive metadata](https://www.w3.org/TR/hcls-dataset/) for each graph:```bashd2s metadata analyze https://graphdb.dumontierlab.com/repositories/umids-kg -o metadata.ttl```Analyze a SPARQL endpoint metadata to generate metadata specific to Bio2RDF for each graph:```bashd2s metadata analyze https://bio2rdf.137.120.31.102.nip.io/sparql -o metadata.ttl -m bio2rdf```You can also generate detailed HCLS metadata for the dataset version and distribution by answering the questions after running this command:```bashd2s metadata create -o metadata.ttl```### Bootstrap a datasets conversion project`d2s` can be used to help you converting datasets to RDF.You will need to initialize the current folder, it is highly recommended to do this at the root of a Git repository where the conversion will be stored:```bashd2s init```This command will create a `datasets` folder to store the datasets conversions and a `.github/workflows` folder for the workflows, if it does not exist already. &gt; All `d2s` commands are designed to be run from the project folderYou can create a new dataset conversion:```bashd2s new dataset```You will be asked a few questions about the dataset via the terminal, then a folder will be generated with:* Your dataset metadata* Example YARRRML and RML mappings* Example python preprocessing script* Example bash script to download the data to convert* A GitHub Action workflow to run the different steps of the processingYou can now edit the file generated in the `datasets` folder to implement your data conversion.### Run the RML mapperRequirements: Java installedThis feature is still experimental`d2s` can be used to easily run the RML mapper:```bashd2s rml my-dataset```## Enable autocompletionEnable commandline autocompletion in the terminal&gt; Recommended, it makes `d2s` much more user-friendly * **ZSH**: add the import autocomplete line to the `~/.zshrc` file.```bashecho 'eval &quot;$(_D2S_COMPLETE=source_zsh d2s)&quot;' &gt;&gt; ~/.zshrc```&gt; Set your terminal to use [ZSH](https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH) by default:&gt;&gt; ```shell&gt; chsh -s /bin/zsh&gt; ```&gt; A [oh-my-zsh](https://ohmyz.sh/) theme can be easily chosen for a personalized experience. See [the zsh-theme-biradate](https://github.com/vemonet/zsh-theme-biradate) to easily install a simple theme and configure your terminal in a few minutes.* **Bash**: add the import autocomplete line to the `~/.bashrc` file. Something like this probably:```bashecho 'eval &quot;$(_D2S_COMPLETE=source d2s)&quot;' &gt;&gt; ~/.bashrc```## Build and publish### Install d2s for developmentInstall `d2s` as executable to run it from the terminalClone the repository:```bashgit clone https://github.com/MaastrichtU-IDS/d2s-cli.gitcd d2s-cli```Install `d2s`:```bashpip install -e .```&gt; `d2s` will be updated directly on change in the code.#### Optional: isolate with a Virtual EnvironmentIf you face conflicts with already installed packages, then you might want to use a [Virtual Environment](https://docs.python.org/3/tutorial/venv.html) to isolate the installation in the current folder before installing `d2s`:```bash# Create the virtual environment folder in your workspacepython3 -m venv .venv# Activate it using a script in the created foldersource .venv/bin/activate```### Publish using DockerTo publish a new version on [pypi](https://pypi.org/project/d2s/):* upgrade the version in [setup.py](https://github.com/MaastrichtU-IDS/d2s-cli/blob/master/setup.py#L6) (e.g. from `0.2.1` to `0.2.2`)* use the following script to build and publish automatically using [Docker](https://docs.docker.com/install/):```bash./publish_pip.sh```&gt; A test will be run using Docker before publishing to make sure `d2s init` works.### Build locallyBuilding and publishing can be done locally:```bash# Build packages in dist/ folderpython3 setup.py sdist bdist_wheel# Publish packages previously built in the dist/ foldertwine upload --repository-url https://upload.pypi.org/legacy/ dist/*```Additional instructions to install twine locally (not needed)```bashpip install twine```&gt; If you experience issues with Bash or ZSH because `d2s` is not defined when installing for dev. Then add `pip install --editable develop/d2s-cli` to `.zshrc`You might need to install Python3.7 for dev (dev with python3.7 should work though)```bashsudo apt-get install python3.7 python3.7-venv python3.7-dev# Set python3 to use 3.7sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1sudo update-alternatives --config python3```&gt; ```bash&gt;vim /usr/bin/gnome-terminal&gt; &gt; #!/usr/bin/python3.7&gt; ```If you face issue uploading the package on pypi:```bashtwine check dist/d2s-*-py3-none-any.whl```</longdescription>
</pkgmetadata>