<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mure[![downloads](https://static.pepy.tech/personalized-badge/mure?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=black&amp;left_text=downloads)](https://pepy.tech/project/mure)[![downloads/month](https://static.pepy.tech/personalized-badge/mure?period=month&amp;units=abbreviation&amp;left_color=black&amp;right_color=black&amp;left_text=downloads/month)](https://pepy.tech/project/mure)[![downloads/week](https://static.pepy.tech/personalized-badge/mure?period=week&amp;units=abbreviation&amp;left_color=black&amp;right_color=black&amp;left_text=downloads/week)](https://pepy.tech/project/mure)This is a thin layer on top of [`aiohttp`](https://docs.aiohttp.org/en/stable/) to perform multiple HTTP requests in parallel – without writing boilerplate code or worrying about `async` functions.`mure` means **mu**ltiple **re**quests, but is also the German term for a form of mass wasting involving fast-moving flow of debris and dirt that has become liquified by the addition of water.![Göscheneralp. Kolorierung des Dias durch Margrit Wehrli-Frey](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/ETH-BIB-Muhrgang_zur_Kehlen-Reuss_vom_Rotfirn-Dia_247-13368.tif/lossy-page1-1280px-ETH-BIB-Muhrgang_zur_Kehlen-Reuss_vom_Rotfirn-Dia_247-13368.tif.jpg)(The photo was taken by [Leo Wehrli](https://de.wikipedia.org/wiki/Leo_Wehrli) and is licensed under CC BY-SA 4.0)## InstallationInstall the latest stable version from [PyPI](https://pypi.org/project/mure):```pip install mure```## UsagePass an iterable of dictionaries (a typed dictionary `Resource`, to be precise) with at least a value for `url` and get a `ResponseIterator` with the corresponding responses:```python&gt;&gt;&gt; import mure&gt;&gt;&gt; from mure.dtos import Resource&gt;&gt;&gt; resources: list[Resource] = [...     {&quot;url&quot;: &quot;https://httpbin.org/get&quot;},...     {&quot;url&quot;: &quot;https://httpbin.org/get&quot;, &quot;params&quot;: {&quot;foo&quot;: &quot;bar&quot;}},...     {&quot;url&quot;: &quot;invalid&quot;},... ]&gt;&gt;&gt; responses = mure.get(resources, batch_size=2)&gt;&gt;&gt; responses&lt;ResponseIterator: 3 pending&gt;&gt;&gt;&gt; for resource, response in zip(resources, responses):...     print(resource, &quot;status code:&quot;, response.status)...{'url': 'https://httpbin.org/get'} status code: 200{'url': 'https://httpbin.org/get', 'params': {'foo': 'bar'}} status code: 200{'url': 'invalid'} status code: 0&gt;&gt;&gt; responses&lt;ResponseIterator: 0 pending&gt;```The keyword argument `batch_size` defines the number of requests to perform in parallel (don't be too greedy). The resources are requested batch-wise, i. e. only one batch of responses is kept in memory (depends of course also on how you use the `ResponseIterator`).For example, if you set `batch_size` to `2`, have four resources and execute:```python&gt;&gt;&gt; next(responses)```the first two resources are requested in parallel and blocks until both of the responses are available (i.e. if resource 1 takes 1 second and resource 2 takes 10 seconds, it blocks 10 seconds although resource 1 is already available after 1 second). The response of resource 1 is yielded.Executing `next()` a second time:```python&gt;&gt;&gt; next(response)```will be super fast, because the response of resource 2 is already available. Executing `next()` a third time will be &quot;slow&quot; again, because the next batch of resources is requested.However, there is also a convenience function for POST requests:```python&gt;&gt;&gt; resources = [...     {&quot;url&quot;: &quot;https://httpbin.org/post&quot;},...     {&quot;url&quot;: &quot;https://httpbin.org/post&quot;, &quot;json&quot;: {&quot;foo&quot;: &quot;bar&quot;}},...     {&quot;url&quot;: &quot;invalid&quot;},... ]&gt;&gt;&gt; responses = mure.post(resources)```You can even mix HTTP methods in the list of resources (but have to specify the method for each resource):```python&gt;&gt;&gt; resources = [...     {&quot;method&quot;: &quot;GET&quot;, &quot;url&quot;: &quot;https://httpbin.org/get&quot;},...     {&quot;method&quot;: &quot;GET&quot;, &quot;url&quot;: &quot;https://httpbin.org/get&quot;, &quot;params&quot;: {&quot;foo&quot;: &quot;bar&quot;}},...     {&quot;method&quot;: &quot;POST&quot;, &quot;url&quot;: &quot;https://httpbin.org/post&quot;},...     {&quot;method&quot;: &quot;POST&quot;, &quot;url&quot;: &quot;https://httpbin.org/post&quot;, &quot;json&quot;: {&quot;foo&quot;: &quot;bar&quot;}},...     {&quot;method&quot;: &quot;GET&quot;, &quot;url&quot;: &quot;invalid&quot;},... ]&gt;&gt;&gt; responses = mure.request(resources)```### VerbosityControl verbosity with the `log_errors` argument:```python&gt;&gt;&gt; import mure&gt;&gt;&gt; next(mure.get([{&quot;url&quot;: &quot;invalid&quot;}], log_errors=True))invalidTraceback (most recent call last):  File &quot;/home/severin/git/mure/mure/iterator.py&quot;, line 131, in _process    async with session.request(resource[&quot;method&quot;], resource[&quot;url&quot;], **kwargs) as response:  File &quot;/home/severin/git/mure/.env/lib/python3.11/site-packages/aiohttp/client.py&quot;, line 1141, in __aenter__    self._resp = await self._coro                 ^^^^^^^^^^^^^^^^  File &quot;/home/severin/git/mure/.env/lib/python3.11/site-packages/aiohttp/client.py&quot;, line 508, in _request    req = self._request_class(          ^^^^^^^^^^^^^^^^^^^^  File &quot;/home/severin/git/mure/.env/lib/python3.11/site-packages/aiohttp/client_reqrep.py&quot;, line 305, in __init__    self.update_host(url)  File &quot;/home/severin/git/mure/.env/lib/python3.11/site-packages/aiohttp/client_reqrep.py&quot;, line 364, in update_host    raise InvalidURL(url)aiohttp.client_exceptions.InvalidURL: invalidResponse(status=0, reason='&lt;InvalidURL invalid&gt;', ok=False, text='')&gt;&gt;&gt; next(mure.get([{&quot;url&quot;: &quot;invalid&quot;}], log_errors=False))Response(status=0, reason='&lt;InvalidURL invalid&gt;', ok=False, text='')```</longdescription>
</pkgmetadata>