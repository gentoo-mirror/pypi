<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/pythological/python-cons.svg?branch=main)](https://travis-ci.org/pythological/python-cons) [![Coverage Status](https://coveralls.io/repos/github/pythological/python-cons/badge.svg?branch=main)](https://coveralls.io/github/pythological/python-cons?branch=main) [![PyPI](https://img.shields.io/pypi/v/cons)](https://pypi.org/project/cons/)# Python `cons`An implementation of [`cons`][cons] in Python.## Usage and DesignThe `cons` package attempts to emulate the semantics of Lisp/Scheme's `cons` as closely as possible while incorporating all the built-in Python sequence types:```python&gt;&gt;&gt; from cons import cons, car, cdr&gt;&gt;&gt; cons(1, [])[1]&gt;&gt;&gt; cons(1, ())(1,)&gt;&gt;&gt; cons(1, [2, 3])[1, 2, 3]```In general, `cons` is designed to work with `collections.abc.Sequence` types.According to the `cons` package, `None` corresponds to the empty built-in `list`, as `nil` does in some Lisps:```python&gt;&gt;&gt; cons(1, None)[1]```The `cons` package follows Scheme-like semantics for empty sequences:```python&gt;&gt;&gt; car([])Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ConsError: Not a cons pair&gt;&gt;&gt; cdr([])Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;ConsError: Not a cons pair```By default, `str` types are not considered cons-pairs, although they are sequences:```python&gt;&gt;&gt; cons(&quot;a&quot;, &quot;string&quot;)ConsPair('a' 'a string')```This setting can be overridden and other types can be similarly excluded from consideration by registering classes with the `abc`-based classes `MaybeCons` and `NonCons`.## Features* Built-in support for the standard Python ordered sequence types: i.e. `list`, `tuple`, `Iterator`, `OrderedDict`.```python&gt;&gt;&gt; from collections import OrderedDict&gt;&gt;&gt; cons(('a', 1), OrderedDict())OrderedDict([('a', 1)])```* Existing `cons` behavior can be changed and support for new collections can be added through the generic functions `cons.core._car` and `cons.core._cdr`.* Built-in support for [`unification`][un].```python&gt;&gt;&gt; from unification import unify, reify, var&gt;&gt;&gt; unify([1, 2], cons(var('car'), var('cdr')), {}){~car: 1, ~cdr: [2]}&gt;&gt;&gt; reify(cons(1, var('cdr')), {var('cdr'): [2, 3]})[1, 2, 3]&gt;&gt;&gt; reify(cons(1, var('cdr')), {var('cdr'): None})[1]```## Installation```pythonpip install cons```### DevelopmentFirst obtain the project source:```bashgit clone git@github.com:pythological/python-cons.git```Create a virtual environment and install the development dependencies:```bash$ pip install -r requirements.txt```Set up `pre-commit` hooks:```bash$ pre-commit install --install-hooks```[cons]: https://en.wikipedia.org/wiki/Cons[un]: https://github.com/pythological/unification</longdescription>
</pkgmetadata>