<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># logx: best practice python logging with zero configConfiguring logging is tedious. Reading the logging module docs makes me tired.Wouldn't it be nice to log as easily as doing a print statement, without any upfront config?## Obligatory exampleEnter `logx`. It's as simple as:    &gt;&gt;&gt; from logx import log    &gt;&gt;&gt; log.info('hello world')    hello world    &gt;&gt;&gt; log.set_default_format()    &gt;&gt;&gt; log.warn('warning!')    [2018-02-26 21:51:16,971] WARNING [__main__.&lt;module&gt;:1] warning!Logs get logged automatically to the logger whose name matches the current module.## List of sweet features- Creates loggers lazily/as needed/on demand and **logs to the appropriate logger automatically**. If you're in the &quot;acme&quot; module it'll log to a log called &quot;acme&quot;, no need worry about logger names and instances.- **Shows all log messages by default**, which follows the principle of least surprise and is probably what you want when debugging.- Included default handler **logs to the appropriate standard output stream by default**: Errors and warnings to stderr, the rest to stdout.- Allows easy following of best practice when including log statements in a library: **Just call log.create_null_handler() in your module.**- **Uses the standard logging library**, so you can still customize your setup as much as you want/need. Plays nicely with your existing logging config files.- **Includes the very useful logging_tree module** for viewing your current logging configuration. `logx.print_diagram()`## Install    &gt;&gt;&gt; pip install logx## ContributeIssues and pull requests welcome, hit me. Am I doing logging completely wrong? Critique welcome, even if very pedantic.</longdescription>
</pkgmetadata>