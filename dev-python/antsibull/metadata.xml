<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--Copyright (c) Ansible ProjectGNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)SPDX-License-Identifier: GPL-3.0-or-later--&gt;# antsibull -- Ansible Build Scripts[![Discuss on Matrix at #community:ansible.com](https://img.shields.io/matrix/community:ansible.com.svg?server_fqdn=ansible-accounts.ems.host&amp;label=Discuss%20on%20Matrix%20at%20%23community:ansible.com&amp;logo=matrix)](https://matrix.to/#/#community:ansible.com)[![Nox badge](https://github.com/ansible-community/antsibull/actions/workflows/nox.yml/badge.svg)](https://github.com/ansible-community/antsibull/actions/workflows/nox.yml)[![dumb PyPI on GH pages badge](https://github.com/ansible-community/antsibull/workflows/ðŸ‘·%20dumb%20PyPI%20on%20GH%20pages/badge.svg?event=push&amp;branch=main)](https://github.com/ansible-community/antsibull/actions?query=workflow%3A%22ðŸ‘·+dumb+PyPI+on+GH+pages%22+branch%3Amain)[![Codecov badge](https://img.shields.io/codecov/c/github/ansible-community/antsibull)](https://codecov.io/gh/ansible-community/antsibull)Tooling for building various things related to AnsibleScripts that are here:* antsibull-build - Builds Ansible-2.10+ from component collections ([docs](docs/build-ansible.rst))Related projects are [antsibull-changelog](https://pypi.org/project/antsibull-changelog/) and [antsibull-docs](https://pypi.org/project/antsibull-docs/), which are in their own repositories ([antsibull-changelog repository](https://github.com/ansible-community/antsibull-changelog/), [antsibull-docs repository](https://github.com/ansible-community/antsibull-docs/)). Currently antsibull-changelog is a dependency of antsibull. Therefore, the scripts contained in it will be available as well when installing antsibull.You can find a list of changes in [the Antsibull changelog](./CHANGELOG.rst).Unless otherwise noted in the code, it is licensed under the terms of the GNUGeneral Public License v3 or, at your option, later.antsibull is covered by the [Ansible Code of Conduct](https://docs.ansible.com/ansible/latest/community/code_of_conduct.html).## Versioning and compatibilityFrom version 0.1.0 on, antsibull sticks to semantic versioning and aims at providing no backwards compatibility breaking changes **to the command line API (antsibull)** during a major release cycle. We might make exceptions from this in case of security fixes for vulnerabilities that are severe enough.We explicitly exclude code compatibility. **antsibull is not supposed to be used as a library.** The only exception are potential dependencies with other antsibull projects (currently, none). If you want to use a certain part of antsibull as a library, please create an issue so we can discuss whether we add a stable interface for **parts** of the Python code. We do not promise that this will actually happen though.## DevelopmentInstall and run `nox` to run all tests. That's it for simple contributions!`nox` will create virtual environments in `.nox` inside the checked out projectand install the requirements needed to run the tests there.---antsibull depends on the sister antsibull-core and antsibull-changelog projects.By default, `nox` will install development versions of these projects fromGithub.If you're hacking on antsibull-core or antsibull-changelog alongside antsibull,nox will automatically install the projects from `../antsibull-core` and`../antsibull-changelog` when running tests if those paths exist.You can change this behavior through the `OTHER_ANTSIBULL_MODE` env var:- `OTHER_ANTSIBULL_MODE=auto` â€” the default behavior described above- `OTHER_ANTSIBULL_MODE=local` â€” install the projects from `../antsibull-core`  and `../antsibull-changelog`. Fail if those paths don't exist.- `OTHER_ANTSIBULL_MODE=git` â€” install the projects from the Github main branch- `OTHER_ANTSIBULL_MODE=pypi` â€” install the latest version from PyPITo run specific tests:1. `nox -e test` to only run unit tests;2. `nox -e lint` to run all linters;3. `nox -e codeqa` to run `flake8`, `pylint`, and `reuse lint`;4. `nox -e typing` to run `mypy` and `pyre`.5. `nox -e coverage_release` to build a test ansible release.   This is expensive, so it's not run by default.6. `nox -e coverage` to display combined coverage results after running `nox -e   test coverage_release`;To create a more complete local development env:``` consolegit clone https://github.com/ansible-community/antsibull-changelog.gitgit clone https://github.com/ansible-community/antsibull-core.gitgit clone https://github.com/ansible-community/antsibull.gitcd antsibullpython3 -m venv venv. ./venv/bin/activatepip install -e '.[dev]' -e ../antsibull-changelog -e ../antsibull-core[...]nox```## Creating a new release:1. Run `nox -e bump -- &lt;version&gt; &lt;release_summary_message&gt;`. This:   * Bumps the package version in `pyproject.toml`.   * Creates `changelogs/fragments/&lt;version&gt;.yml` with a `release_summary` section.   * Runs `antsibull-changelog release` and adds the changed files to git.   * Commits with message `Release &lt;version&gt;.` and runs `git tag -a -m 'antsibull &lt;version&gt;' &lt;version&gt;`.   * Runs `hatch build`.2. Run `git push` to the appropriate remotes.3. Once CI passes on GitHub, run `nox -e publish`. This:   * Runs `hatch publish`;   * Bumps the version to `&lt;version&gt;.post0`;   * Adds the changed file to git and run `git commit -m 'Post-release version bump.'`;4. Run `git push --follow-tags` to the appropriate remotes and create a GitHub release.</longdescription>
</pkgmetadata>