<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Slotted=======.. image:: https://github.com/brunonicko/slotted/workflows/MyPy/badge.svg   :target: https://github.com/brunonicko/slotted/actions?query=workflow%3AMyPy.. image:: https://github.com/brunonicko/slotted/workflows/Lint/badge.svg   :target: https://github.com/brunonicko/slotted/actions?query=workflow%3ALint.. image:: https://github.com/brunonicko/slotted/workflows/Tests/badge.svg   :target: https://github.com/brunonicko/slotted/actions?query=workflow%3ATests.. image:: https://readthedocs.org/projects/slotted/badge/?version=stable   :target: https://slotted.readthedocs.io/en/stable/.. image:: https://img.shields.io/github/license/brunonicko/slotted?color=light-green   :target: https://github.com/brunonicko/slotted/blob/master/LICENSE.. image:: https://static.pepy.tech/personalized-badge/slotted?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=brightgreen&amp;left_text=Downloads   :target: https://pepy.tech/project/slotted.. image:: https://img.shields.io/pypi/pyversions/slotted?color=light-green&amp;style=flat   :target: https://pypi.org/project/slotted/Overview--------Enforces usage of ``__slots__`` for Python classes.Motivation----------Besides the performance benefits, using ``__slots__`` also prevents the client code fromsetting attributes that were not initially defined for instances of classes, whichusually happens by mistake especially in environments where static type checking is notbeing performed.So forcing it upon a class and its subclasses might be a desirable thing to do forclasses that are part of an API, for example.Examples--------When defining a ``Slotted`` class with no ``__slots__`` declaration, it assumes it hasempty slots, which is equivalent to declaring ``__slots__ = ()``... code:: python    &gt;&gt;&gt; from slotted import Slotted    &gt;&gt;&gt; class Foo(Slotted):    ...     pass  # implicit declaration of __slots__ = ()    ...    &gt;&gt;&gt; foo = Foo()    &gt;&gt;&gt; foo.bar = 1    Traceback (most recent call last):    AttributeError: 'Foo' object has no attribute 'bar'Slotted classes can be mixed with regular classes as long as they and all of their basesimplement ``__slots__``... code:: python    &gt;&gt;&gt; from slotted import Slotted    &gt;&gt;&gt; class Bar(object):    ...     __slots__ = (&quot;bar&quot;,)    &gt;&gt;&gt; class Foo(Bar, Slotted):    ...     __slots__ = (&quot;foo&quot;,)    ...    &gt;&gt;&gt; foo = Foo()If any non-``Slotted`` class anywhere in the chain does not implement ``__slots__``, a``TypeError`` exception is raised... code:: python    &gt;&gt;&gt; from slotted import Slotted        &gt;&gt;&gt; class Bar(object):    ...     pass    &gt;&gt;&gt; class Foo(Bar, Slotted):    ...     __slots__ = (&quot;foo&quot;,)    ...    Traceback (most recent call last):    TypeError: base 'Bar' is not slotted``Slotted`` behavior can also be achieved by using the ``SlottedMeta`` metaclass... code:: python    &gt;&gt;&gt; from six import with_metaclass    &gt;&gt;&gt; from slotted import SlottedMeta    &gt;&gt;&gt; class Foo(with_metaclass(SlottedMeta, object)):    ...     pass  # implicit declaration of __slots__ = ()    ...    &gt;&gt;&gt; foo = Foo()    &gt;&gt;&gt; foo.bar = 1    Traceback (most recent call last):    AttributeError: 'Foo' object has no attribute 'bar'abc^^^`slotted` also provides generic versions of the `collection.abc` classes... code:: python    &gt;&gt;&gt; from typing import TypeVar    &gt;&gt;&gt; from slotted import SlottedMapping, SlottedSequence, SlottedSet    &gt;&gt;&gt; KT = TypeVar(&quot;KT&quot;)    &gt;&gt;&gt; VT = TypeVar(&quot;VT&quot;)    &gt;&gt;&gt; class MyMapping(SlottedMapping[KT, VT]):    ...     pass # implicit declaration of __slots__ = ()    ...    &gt;&gt;&gt; class MySequence(SlottedSequence[VT]):    ...     pass # implicit declaration of __slots__ = ()    ...    &gt;&gt;&gt; class MySet(SlottedSet[VT]):    ...     pass # implicit declaration of __slots__ = ()    ...For Python 2.7, `slotted` adds a `SlottedCollection` class, even though the original`Collection` is not available... code:: python    &gt;&gt;&gt; from typing import TypeVar    &gt;&gt;&gt; from slotted import SlottedCollection    &gt;&gt;&gt; T = TypeVar(&quot;T&quot;)    &gt;&gt;&gt; class MyCollection(SlottedCollection[T]):    ...     pass # implicit declaration of __slots__ = ()    ...</longdescription>
</pkgmetadata>