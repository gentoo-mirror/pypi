<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># neattextNeatText:a simple NLP package for cleaning textual data and text preprocessing.Simplifying Text Cleaning For NLP &amp; ML[![Build Status](https://travis-ci.org/Jcharis/neattext.svg?branch=master)](https://travis-ci.org/Jcharis/neattext)[![GitHub license](https://img.shields.io/github/license/Jcharis/neattext)](https://github.com/Jcharis/neattext/blob/master/LICENSE)#### Problem+ Cleaning of unstructured text data+ Reduce noise [special characters,stopwords]+ Reducing repetition of using the same code for text preprocessing#### Solution+ convert the already known solution for cleaning text into a reuseable package#### Docs+ Check out the full docs [here](https://jcharis.github.io/neattext/)#### Installation```bashpip install neattext```### Usage+ The OOP Way(Object Oriented Way)+ NeatText offers 5 main classes for working with text data- TextFrame : a frame-like object for cleaning text- TextCleaner: remove or replace specifics- TextExtractor: extract unwanted text data- TextMetrics: word stats and metrics- TextPipeline: combine multiple functions in a pipeline### Overall Components of NeatText![](images/neattext_features_jcharistech.png)### Using TextFrame+ Keeps the text as `TextFrame` object. This allows us to do more with our text. + It inherits the benefits of the TextCleaner and the TextMetrics out of the box with some additional features for handling text data.+ This is the simplest way for text preprocessing with this library alternatively you can utilize the other classes too.```python&gt;&gt;&gt; import neattext as nt &gt;&gt; mytext = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š.&quot;&gt;&gt;&gt; docx = nt.TextFrame(text=mytext)&gt;&gt;&gt; docx.text &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š.&quot;&gt;&gt;&gt;&gt;&gt;&gt; docx.describe()Key      Value          Length  : 73             vowels  : 21             consonants: 34             stopwords: 4              punctuations: 8              special_char: 8              tokens(whitespace): 10             tokens(words): 14             &gt;&gt;&gt; &gt;&gt;&gt; docx.length73&gt;&gt;&gt; # Scan Percentage of Noise(Unclean data) in text&gt;&gt;&gt; d.noise_scan(){'text_noise': 19.17808219178082, 'text_length': 73, 'noise_count': 14}&gt;&gt;&gt; &gt;&gt;&gt; docs.head(16)'This is the mail'&gt;&gt;&gt; docx.tail()&gt;&gt;&gt; docx.count_vowels()&gt;&gt;&gt; docx.count_stopwords()&gt;&gt;&gt; docx.count_consonants()&gt;&gt;&gt; docx.nlongest()&gt;&gt;&gt; docx.nshortest()&gt;&gt;&gt; docx.readability()```#### Basic NLP Task (Tokenization,Ngram,Text Generation)```python&gt;&gt;&gt; docx.word_tokens()&gt;&gt;&gt;&gt;&gt;&gt; docx.sent_tokens()&gt;&gt;&gt;&gt;&gt;&gt; docx.term_freq()&gt;&gt;&gt;&gt;&gt;&gt; docx.bow()```#### Basic Text Preprocessing```python&gt;&gt;&gt; docx.normalize()'this is the mail example@gmail.com ,our website is https://example.com ðŸ˜Š.'&gt;&gt;&gt; docx.normalize(level='deep')'this is the mail examplegmailcom our website is httpsexamplecom '&gt;&gt;&gt; docx.remove_puncts()&gt;&gt;&gt; docx.remove_stopwords()&gt;&gt;&gt; docx.remove_html_tags()&gt;&gt;&gt; docx.remove_special_characters()&gt;&gt;&gt; docx.remove_emojis()&gt;&gt;&gt; docx.fix_contractions()```##### Handling Files with NeatText+ Read txt file directly into TextFrame```python&gt;&gt;&gt; import neattext as nt &gt;&gt;&gt; docx_df = nt.read_txt('file.txt')```+ Alternatively you can instantiate a TextFrame and read a text file into it```python&gt;&gt;&gt; import neattext as nt &gt;&gt;&gt; docx_df = nt.TextFrame().read_txt('file.txt')```##### Chaining Methods on TextFrame```python&gt;&gt;&gt; t1 = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š and it will cost $100 to subscribe.&quot;&gt;&gt;&gt; docx = TextFrame(t1)&gt;&gt;&gt; result = docx.remove_emails().remove_urls().remove_emojis()&gt;&gt;&gt; print(result)'This is the mail  ,our WEBSITE is   and it will cost $100 to subscribe.'```#### Clean Text+ Clean text by removing emails,numbers,stopwords,emojis,etc+ A simplified method for cleaning text by specifying as True/False what to clean from a text```python&gt;&gt;&gt; from neattext.functions import clean_text&gt;&gt;&gt; &gt;&gt;&gt; mytext = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š.&quot;&gt;&gt;&gt; &gt;&gt;&gt; clean_text(mytext)'mail example@gmail.com ,our website https://example.com .'```+ You can remove punctuations,stopwords,urls,emojis,multiple_whitespaces,etc by setting them to True.+ You can choose to remove or not remove punctuations by setting to True/False respectively```python&gt;&gt;&gt; clean_text(mytext,puncts=True)'mail example@gmailcom website https://examplecom '&gt;&gt;&gt; &gt;&gt;&gt; clean_text(mytext,puncts=False)'mail example@gmail.com ,our website https://example.com .'&gt;&gt;&gt; &gt;&gt;&gt; clean_text(mytext,puncts=False,stopwords=False)'this is the mail example@gmail.com ,our website is https://example.com .'&gt;&gt;&gt; ```+ You can also remove the other non-needed items accordingly```python&gt;&gt;&gt; clean_text(mytext,stopwords=False)'this is the mail example@gmail.com ,our website is https://example.com .'&gt;&gt;&gt;&gt;&gt;&gt; clean_text(mytext,urls=False)'mail example@gmail.com ,our website https://example.com .'&gt;&gt;&gt; &gt;&gt;&gt; clean_text(mytext,urls=True)'mail example@gmail.com ,our website .'&gt;&gt;&gt; ```#### Removing Punctuations [A Very Common Text Preprocessing Step]+ You remove the most common punctuations such as fullstop,comma,exclamation marks and question marks by setting most_common=True which is the default+ Alternatively you can also remove all known punctuations from a text.```python&gt;&gt;&gt; import neattext as nt &gt;&gt;&gt; mytext = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š. Please don't forget the email when you enter !!!!!&quot;&gt;&gt;&gt; docx = nt.TextFrame(mytext)&gt;&gt;&gt; docx.remove_puncts()TextFrame(text=&quot;This is the mail example@gmailcom our WEBSITE is https://examplecom ðŸ˜Š Please dont forget the email when you enter &quot;)&gt;&gt;&gt; docx.remove_puncts(most_common=False)TextFrame(text=&quot;This is the mail examplegmailcom our WEBSITE is httpsexamplecom ðŸ˜Š Please dont forget the email when you enter &quot;)```#### Removing Stopwords [A Very Common Text Preprocessing Step]+ You can remove stopwords from a text by specifying the language. The default language is English+ Supported Languages include English(en),Spanish(es),French(fr)|Russian(ru)|Yoruba(yo)|German(de)```python&gt;&gt;&gt; import neattext as nt &gt;&gt;&gt; mytext = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š. Please don't forget the email when you enter !!!!!&quot;&gt;&gt;&gt; docx = nt.TextFrame(mytext)&gt;&gt;&gt; docx.remove_stopwords(lang='en')TextFrame(text=&quot;mail example@gmail.com ,our WEBSITE https://example.com ðŸ˜Š. forget email enter !!!!!&quot;)```#### Remove Emails,Numbers,Phone Numbers,Dates,Btc Address,VisaCard Address,etc ```python&gt;&gt;&gt; print(docx.remove_emails())&gt;&gt;&gt; 'This is the mail  ,our WEBSITE is https://example.com ðŸ˜Š.'&gt;&gt;&gt;&gt;&gt;&gt; print(docx.remove_stopwords())&gt;&gt;&gt; 'This mail example@gmail.com ,our WEBSITE https://example.com ðŸ˜Š.'&gt;&gt;&gt;&gt;&gt;&gt; print(docx.remove_numbers())&gt;&gt;&gt; docx.remove_phone_numbers()&gt;&gt;&gt; docx.remove_btc_address()```#### Remove Special Characters```python&gt;&gt;&gt; docx.remove_special_characters()```#### Remove Emojis```python&gt;&gt;&gt; print(docx.remove_emojis())&gt;&gt;&gt; 'This is the mail example@gmail.com ,our WEBSITE is https://example.com .'```#### Remove Custom Pattern+ You can also specify your own custom pattern, incase you cannot find what you need in the functions using the `remove_custom_pattern()` function```python&gt;&gt;&gt; import neattext.functions as nfx &gt;&gt;&gt; ex = &quot;Last !RT tweeter multiple &amp;#7777&quot;&gt;&gt;&gt; &gt;&gt;&gt; nfx.remove_custom_pattern(e,r'&amp;#\d+')'Last !RT tweeter multiple  '```#### Replace Emails,Numbers,Phone Numbers```python&gt;&gt;&gt; docx.replace_emails()&gt;&gt;&gt; docx.replace_numbers()&gt;&gt;&gt; docx.replace_phone_numbers()```#### Chain Multiple Methods```python&gt;&gt;&gt; t1 = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š and it will cost $100 to subscribe.&quot;&gt;&gt;&gt; docx = TextCleaner(t1)&gt;&gt;&gt; result = docx.remove_emails().remove_urls().remove_emojis()&gt;&gt;&gt; print(result)'This is the mail  ,our WEBSITE is   and it will cost $100 to subscribe.'```### Using TextExtractor+ To Extract emails,phone numbers,numbers,urls,emojis from text```python&gt;&gt;&gt; from neattext import TextExtractor&gt;&gt;&gt; docx = TextExtractor()&gt;&gt;&gt; docx.text = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š.&quot;&gt;&gt;&gt; docx.extract_emails()&gt;&gt;&gt; ['example@gmail.com']&gt;&gt;&gt;&gt;&gt;&gt; docx.extract_emojis()&gt;&gt;&gt; ['ðŸ˜Š']```### Using TextMetrics+ To Find the Words Stats such as counts of vowels,consonants,stopwords,word-stats```python&gt;&gt;&gt; from neattext import TextMetrics&gt;&gt;&gt; docx = TextMetrics()&gt;&gt;&gt; docx.text = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š.&quot;&gt;&gt;&gt; docx.count_vowels()&gt;&gt;&gt; docx.count_consonants()&gt;&gt;&gt; docx.count_stopwords()&gt;&gt;&gt; docx.word_stats()&gt;&gt;&gt; docx.memory_usage()```### Usage + The MOP(method/function oriented way) Way```python&gt;&gt;&gt; from neattext.functions import clean_text,extract_emails&gt;&gt;&gt; t1 = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com .&quot;&gt;&gt;&gt; clean_text(t1,puncts=True,stopwords=True)&gt;&gt;&gt;'this mail examplegmailcom website httpsexamplecom'&gt;&gt;&gt; extract_emails(t1)&gt;&gt;&gt; ['example@gmail.com']```+ Alternatively you can also use this approach```python&gt;&gt;&gt; import neattext.functions as nfx &gt;&gt;&gt; t1 = &quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com .&quot;&gt;&gt;&gt; nfx.clean_text(t1,puncts=True,stopwords=True)&gt;&gt;&gt;'this mail examplegmailcom website httpsexamplecom'&gt;&gt;&gt; nfx.extract_emails(t1)&gt;&gt;&gt; ['example@gmail.com']```### Explainer+ Explain an emoji or unicode for emoji - emoji_explainer()- emojify()- unicode_2_emoji()```python&gt;&gt;&gt; from neattext.explainer import emojify&gt;&gt;&gt; emojify('Smiley')&gt;&gt;&gt; 'ðŸ˜ƒ'``````python&gt;&gt;&gt; from neattext.explainer import emoji_explainer&gt;&gt;&gt; emoji_explainer('ðŸ˜ƒ')&gt;&gt;&gt; 'SMILING FACE WITH OPEN MOUTH'``````python&gt;&gt;&gt; from neattext.explainer import unicode_2_emoji&gt;&gt;&gt; unicode_2_emoji('0x1f49b')'FLUSHED FACE'```### Usage + The Pipeline Way```python&gt;&gt;&gt; from neattext.pipeline import TextPipeline&gt;&gt;&gt; t1 = &quot;&quot;&quot;This is the mail example@gmail.com ,our WEBSITE is https://example.com ðŸ˜Š. This is visa 4111 1111 1111 1111 and bitcoin 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2 with mastercard 5500 0000 0000 0004. Send it to PO Box 555, KNU&quot;&quot;&quot;&gt;&gt;&gt; p = TextPipeline(steps=[remove_emails,remove_numbers,remove_emojis])&gt;&gt;&gt; p.fit(t1)'This is the mail  ,our WEBSITE is https://example.com . This is visa     and bitcoin BvBMSEYstWetqTFnAumGFgxJaNVN with mastercard    . Send it to PO Box , KNU'```+ Check For steps and named steps```python&gt;&gt;&gt; p.steps&gt;&gt;&gt; p.named_steps```+ Alternatively you can also use this approach### DocumentationPlease read the [documentation](https://github.com/Jcharis/neattext/wiki) for more information on what neattext does and how to use is for your needs.You can also check out our readthedocs page [here](https://jcharis.github.io/neattext/)### More Features To Add+ basic nlp task+ currency normalizer#### Acknowledgements+ Inspired by packages like `clean-text` from Johannes Fillter and `textify` by JCharisTech#### NB+ Contributions Are Welcomed+ Notice a bug, please let us know.+ Thanks A lot#### By+ Jesse E.Agbe(JCharis)+ Jesus Saves @JCharisTech</longdescription>
</pkgmetadata>