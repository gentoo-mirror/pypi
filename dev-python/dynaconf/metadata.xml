<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- [![Dynaconf](docs/img/logo_400.svg?sanitize=true)](http://dynaconf.com) --&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/art/header.png?v2&quot; alt=&quot;dynaconf. new logo&quot;&gt;&lt;/p&gt;&gt; **dynaconf** - Configuration Management for Python.[![MIT License](https://img.shields.io/badge/license-MIT-007EC7.svg?style=flat-square)](/LICENSE) [![PyPI](https://img.shields.io/pypi/v/dynaconf.svg)](https://pypi.python.org/pypi/dynaconf) [![PyPI](https://img.shields.io/pypi/pyversions/dynaconf.svg)]() ![PyPI - Downloads](https://img.shields.io/pypi/dm/dynaconf.svg?label=pip%20installs&amp;logo=python) [![CI](https://github.com/dynaconf/dynaconf/actions/workflows/main.yml/badge.svg)](https://github.com/dynaconf/dynaconf/actions/workflows/main.yml) [![codecov](https://codecov.io/gh/dynaconf/dynaconf/branch/master/graph/badge.svg)](https://codecov.io/gh/dynaconf/dynaconf) [![Codacy Badge](https://app.codacy.com/project/badge/Grade/3fb2de98464442f99a7663181803b400)](https://www.codacy.com/gh/dynaconf/dynaconf/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=dynaconf/dynaconf&amp;amp;utm_campaign=Badge_Grade)  ![GitHub stars](https://img.shields.io/github/stars/dynaconf/dynaconf.svg) ![GitHub Release Date](https://img.shields.io/github/release-date/dynaconf/dynaconf.svg) ![GitHub commits since latest release](https://img.shields.io/github/commits-since/dynaconf/dynaconf/latest.svg) ![GitHub last commit](https://img.shields.io/github/last-commit/dynaconf/dynaconf.svg) [![Code Style Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black/)![GitHub issues](https://img.shields.io/github/issues/dynaconf/dynaconf.svg) [![User Forum](https://img.shields.io/badge/users-forum-blue.svg?logo=googlechat)](https://github.com/dynaconf/dynaconf/discussions) [![Join the chat at https://gitter.im/dynaconf/dev](https://badges.gitter.im/dynaconf/dev.svg)](https://gitter.im/dynaconf/dev?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge) [![ Matrix](https://img.shields.io/badge/dev-room-blue.svg?logo=matrix)](https://matrix.to/#/#dynaconf:matrix.org)## Features- Inspired by the [12-factor application guide](https://12factor.net/config)- Settings management (default values, validation, parsing, templating)- Protection of sensitive information (passwords/tokens)- Multiple file formats `toml|yaml|json|ini|py` and also customizable loaders.- Full support for environment variables to override existing settings (dotenv support included).- Optional layered system for multi environments `[default, development, testing, production]`- Built-in support for Hashicorp Vault and Redis as settings and secrets storage.- Built-in extensions for **Django** and **Flask** web frameworks.- CLI for common operations such as `init, list, write, validate, export`.- full docs on https://dynaconf.com### Install```bash$ pip install dynaconf```#### Initialize Dynaconf on project root directory```plain$ cd path/to/your/project/$ dynaconf init -f toml‚öôÔ∏è  Configuring your Dynaconf environment------------------------------------------üêç The file `config.py` was generated.üéõÔ∏è  settings.toml created to hold your settings.üîë .secrets.toml created to hold your secrets.üôà the .secrets.* is also included in `.gitignore`  beware to not push your secrets to a public repo.üéâ Dynaconf is configured! read more on https://dynaconf.com```&gt; **TIP:** You can select `toml|yaml|json|ini|py` on `dynaconf init -f &lt;fileformat&gt;`  **toml** is the default and also the most recommended format for configuration.#### Dynaconf init creates the following files```plain.‚îú‚îÄ‚îÄ config.py       # This is from where you import your settings object (required)‚îú‚îÄ‚îÄ .secrets.toml   # This is to hold sensitive data like passwords and tokens (optional)‚îî‚îÄ‚îÄ settings.toml   # This is to hold your application settings (optional)```On the file `config.py` Dynaconf init generates the following boilerpate```pyfrom dynaconf import Dynaconfsettings = Dynaconf(    envvar_prefix=&quot;DYNACONF&quot;,  # export envvars with `export DYNACONF_FOO=bar`.    settings_files=['settings.yaml', '.secrets.yaml'],  # Load files in the given order.)```&gt; **TIP:** You can create the files yourself instead of using the `init` command as shown above and you can give any name you want instead of the default `config.py` (the file must be in your importable python path) - See more options that you can pass to `Dynaconf` class initializer on https://dynaconf.com#### Using DynaconfPut your settings on `settings.{toml|yaml|ini|json|py}````tomlusername = &quot;admin&quot;port = 5555database = {name='mydb', schema='main'}```Put sensitive information on `.secrets.{toml|yaml|ini|json|py}````tomlpassword = &quot;secret123&quot;```&gt; **IMPORTANT:** `dynaconf init` command puts the `.secrets.*` in your `.gitignore` to avoid it to be exposed on public repos but it is your responsibility to keep it safe in your local environment, also the recommendation for production environments is to use the built-in support for Hashicorp Vault service for password and tokens.Optionally you can now use environment variables to override values per execution or per environment.```bash# override `port` from settings.toml file and automatically casts as `int` value.export DYNACONF_PORT=9900```On your code import the `settings` object```pyfrom path.to.project.config import settings# Reading the settingssettings.username == &quot;admin&quot;  # dot notation with multi nesting supportsettings.PORT == 9900  # case insensitivesettings['password'] == &quot;secret123&quot;  # dict like accesssettings.get(&quot;nonexisting&quot;, &quot;default value&quot;)  # Default values just like a dictsettings.databases.name == &quot;mydb&quot;  # Nested key traversingsettings['databases.schema'] == &quot;main&quot;  # Nested key traversing```## More- Settings Schema Validation- Custom Settings Loaders- Vault Services- Template substitutions- etc...There is a lot more you can do, **read the docs:** http://dynaconf.com## ContributeMain discussions happens on [Discussions Tab](https://github.com/dynaconf/dynaconf/discussions) learn more about how to get involved on [CONTRIBUTING.md guide](CONTRIBUTING.md)## MoreIf you are looking for something similar to Dynaconf to use in your Rust projects: https://github.com/rubik/hydroconfAnd a special thanks to [Caneco](https://twitter.com/caneco) for the logo.</longdescription>
</pkgmetadata>