<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Quilt3 catalog: Local development modeOpen source implementation of the Quilt3 registry that works in the localenvironment (not requiring AWS cloud services aside from S3 / S3 Select).This package is not intended to be installed/used directly by end users.Instead, install `quilt3[catalog]` and use `quilt3 catalog` CLI command.## Developing### TL;DR```shell# set up venv, assuming poetry is available in the PATHpoetry install# build catalog bundle(cd ../catalog &amp;&amp; npm i &amp;&amp; npm run build &amp;&amp; cp -r build ../quilt3_local/quilt3_local/catalog_bundle)# run the app at http://localhost:3000poetry run quilt3-local```### Set-up#### Python environment set-upFirst, you need [`poetry` installed](https://python-poetry.org/docs/#installation).Then, you have to set up the virtualenv by running `poetry install` from theproject directory -- it will create a virtualenv and install the requirements.#### Catalog (node.js) environment set-upRefer to the [catalog documentation](../catalog/).### RunningYou can either serve a static catalog bundle (produced by `npm run build`) orproxy static files from a running catalog instance.**NOTE**: you need valid AWS credentials available, see[boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#configuring-credentials) for details.#### Serving a static catalog bundleRun `poetry run quilt3-local` to start the app on port 3000 serving the staticcatalog bundle from the `./quilt3_local/catalog_bundle` directory.Path to the bundle can be overriden by `QUILT_CATALOG_BUNDLE` env var.Port can be configured via `PORT` env var.In order to serve the bundle, you should first build it by running`npm run build` from the catalog directory and then either copying it to`./quilt3_loca/catalog_bundle` or overriding `QUILT_CATALOG_BUNDLE` to point toyour bundle.However, this approach is not very convenient when developing catalog features,since it requires rebuilding the bundle to pick up the changes.To address this there's a &quot;proxy&quot; mode available.#### Proxying a running catalog instanceIn this mode the app proxies all the static files requests to a running cataloginstance. One can be started by executing `PORT=3001 npm start` from the catalogdirectory (setting port to `3001` required to avoid conflict with the `quilt3_local`app's default settings).After starting up a catalog instance, you can start the `quilt3_local` app andpoint it to that instance by running`QUILT_CATALOG_URL=http://localhost:3001 poetry run quilt3-local`(the app will be available at `http://localhost:3000` and will serve staticfiles from the catalog running at `http://localhost:3001`, catalog URLconfigurable via `QUILT_CATALOG_URL` env var).### Building and publishing1. Make sure you set up [credentials for `poetry`](https://python-poetry.org/docs/repositories/#configuring-credentials)2. Bump package version in `pyproject.toml` and update `CHANGELOG.md`3. Update catalog commit hash in `catalog-commit` if required4. Commit, tag, push: `git c -am &quot;release X.Y.Z&quot; &amp;&amp; git tag vX.Y.Z &amp;&amp; git push &amp;&amp; git push --tags`5. Build and publish the package: `make publish`</longdescription>
</pkgmetadata>