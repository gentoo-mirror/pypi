<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**NOTE**: * Repository: [https://bitbucket.org/victorykit/py-aws-spitzel](https://bitbucket.org/victorykit/py-aws-spitzel)* Documentation: [https://victorykit.bitbucket.io/py-aws-spitzel](https://victorykit.bitbucket.io/py-aws-spitzel)* Issue Tracker: [https://bitbucket.org/victorykit/py-aws-spitzel/issues](https://bitbucket.org/victorykit/py-aws-spitzel/issues)* Mailing List: [https://groups.google.com/a/victory-k.it/g/py-aws-spitzel](https://groups.google.com/a/victory-k.it/g/py-aws-spitzel)Heuristic CloudTrail Event History Lookup for AWS IAM ForensicsLightweight and flexible AWS DevOps command-line tool and Python 3.9 module for security operation duties (SOC) of AWS platform services.This program extends the [native AWS CloudTrail API LookupEvents action](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_LookupEvents.html) by being able to query against CloudTrail event objects with JSONPath expressions and a barebone implementation of comparison operations for Python built-in types, andregular expressions. In addition, the UNIX filename pattern of AWS IAM policy statement actions is used for filtering events by service and action (e.g. `s3:List\*`), instead of the CloudTrail API schema attributes.(`eventName`, `eventSource`, etc.).This program is licensed under the “Data licence Germany – attribution – Version 2.0”.[URL](http://www.govdata.de/dl-de/by-2-0)Run the following to get additional information on using the command-line interface:&gt; $ aws-spitzel –helpIf you neither specifiy `--from`, nor `--to`, nor `--last-minute`, the entire available date range will be used.```defaultusage: aws-spitzel [-h] [--match EXPRESSION] [--from DATETIME] [--to DATETIME] [--last-minute MINUTES] IAM_ACTION [IAM_ACTION ...]```# Positional Arguments# Named ArgumentsMake sure to specify the correct AWS CLI profile through the AWS_PROFILE environment variable# AboutThings currently change a lot and sometimes they break features, and routinesthat have been previously established. It’s noisy, but one gets to a pointof true system resilience much quicker. After the migration to a different IAMscheme, a project suffered from the loss of access to an AWS service. Theproject manager claimed that an AWS service isn’t accessible anymore, but wasso in the past. The new IAM scheme restricts access to more AWS services, so itmight be possible to accidentally have restricted access to the servicementioned by the project manager. All services accessed by projects wereregarded when defining the new IAM scheme. According to the compliance criteriaof the German BSI C5 catalogue for operating certifiable cloud services inaccordance with German data privacy protection regulations, events like thesestill fall under the security incident management requirements. These are justthe *nice* kind of security incidents, where somebody accidentally get’s lockedout. Unpleasant for the principal affected, but to quote the great Elton John:“I’m still standing…”. However, it would still  be required to properlyclassify this incident accordingly (BSI C5 SIM-02). Depending on thecorrectness of the project managers statements, remediation actions may bepostponed.It is obvious which actions, and services are applicable as CloudTrail eventsand when they should have occured, however this would mean joining multiplequeries against the AWS CloudTrail API `LookupEvent` action, since itcurrently allows only 1 query attribute at a time. One needs some more advancedquery utility in order to do that. Amazon Athena is a perfect fit for that,since it supports SQL and advanced JSON-oriented queries. However, it is agiant and has rather extensive requirements, like an already existing S3 bucketpopulated with CloudTrail trail log events, even though CloudTrail is storingall events in the Nirvana for 90 days, regardless of somebody proactivelycreating a CloudTrail trail. The effort of getting the Amazon Athenafunctionality wasn’t worth it, because this program is what came up in themeantime. Besides some JSON-oriented query the only real operations requiredare some basic comparisons and regular expresssion substring evaluations. Thereis XPath for XML queries, and now there is JSONPath for JSON queries. ThePython standard library itself  (ast - abstract syntax tree for parsing stringsas definitions of Python built-in types) and a custom basic tokenizer forparsing the tokens of an operand-operation-operand expression built on top ofit can deliver the rest.System interchange is possible through line-delimited JSON streaming via stdout.The program routine is parallelized through multi-threading, making it fastenough to keep up with the AWS API throttling threshold.Due to the AWS CloudTrail API `LookupEvents` throttling threshold (100events, across 2 requests per principal, per second) this program is optimizedfor single-core execution. Multi-core execution makes sense, when more than twoaccess keys for the same AWS environment are being used, therefore doubling thenetworking throughput. An implementation for that will be covered in thefuture, when support for CloudTrail trails with S3 backends has beenestablished by this program. This is currently planned for the middle of Q2 in2023.# How It WorksA main thread spawns a handler thread. The handler executes`cloudtrail:LookupEvents` requests in a loop indefinetly until apagination token is no longer provided. Meanwhile, each paginated API responsewill spawn a worker thread, which are registered inside the handler thread.Each worker thread will loop through the list of events of the API response,and match each list item against one or multiple JSONPath expressions. Anymatching item will then be compared against a specified Python built-in type,or regular expression.**WARNING**: This program uses a[quasi-port of the original Javascript JSONPath reference implementation](http://www.ultimate.com/phil/python/#jsonpath).Expect resolution as described in[IETF draft-goessner-dispatch-jsonpath-00](https://datatracker.ietf.org/doc/draft-goessner-dispatch-jsonpath/).**NOTE**: Supported filter expression operators:* ==: equal comparison to int, str, dict, bool, None, tuple, or list values* !=: not equal comparison to int, str, dict, bool, None, tuple, or list values* regex: compare by matching against a regular expression (only supportedfor str built-in types)**NOTE**: ECMAScript behaviour of non-existing object properties being of type`undefined` is being emulated through get() method on dictionaries, sothat JSONPath expressions not matching against any items can be comparedto `None` (e.g. `$.errorCode != None`).Should the item match, it will be pushed onto a priority queue as a queue item.After the thread looped over the entire event list, it will return.The main thread loops over the priority queue indefinetly. Each time itretrieves a lookup match item from the queue, it will yield the item. Should itreceive a stop signal, it will set the queue item retrieval timeout, so thatthe main thread’s loop will be broken, should there be no more items to beexpected coming from the queue.# Getting StartedGet familiarized with the[CloudTrail event format](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-examples.html#error-code-and-error-message)and configure API access to the AWS environment in question ([https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html).).The following is a sample AWS CloudTrail event```json{    &quot;eventVersion&quot;: &quot;1.04&quot;,    &quot;userIdentity&quot;: {        &quot;type&quot;: &quot;IAMUser&quot;,        &quot;principalId&quot;: &quot;EX_PRINCIPAL_ID&quot;,        &quot;arn&quot;: &quot;arn:aws:iam::123456789012:user/Alice&quot;,        &quot;accountId&quot;: &quot;123456789012&quot;,        &quot;accessKeyId&quot;: &quot;EXAMPLE_KEY_ID&quot;,        &quot;userName&quot;: &quot;AliceIsNotBob&quot;    },    &quot;eventTime&quot;: &quot;2016-07-14T19:15:45Z&quot;,    &quot;eventSource&quot;: &quot;cloudtrail.amazonaws.com&quot;,    &quot;eventName&quot;: &quot;UpdateTrail&quot;,    &quot;awsRegion&quot;: &quot;us-east-2&quot;,    &quot;sourceIPAddress&quot;: &quot;205.251.233.182&quot;,    &quot;userAgent&quot;: &quot;aws-cli/1.10.32 Python/2.7.9 Windows/7 botocore/1.4.22&quot;,    &quot;errorCode&quot;: &quot;TrailNotFoundException&quot;,    &quot;errorMessage&quot;: &quot;Unknown trail: myTrail2 for the user: 123456789012&quot;,    &quot;requestParameters&quot;: {&quot;name&quot;: &quot;myTrail2&quot;},    &quot;responseElements&quot;: null,    &quot;requestID&quot;: &quot;5d40662a-49f7-11e6-97e4-d9cb6ff7d6a3&quot;,    &quot;eventID&quot;: &quot;b7d4398e-b2f0-4faa-9c76-e2d316a8d67f&quot;,    &quot;eventType&quot;: &quot;AwsApiCall&quot;,    &quot;recipientAccountId&quot;: &quot;123456789012&quot;}```With aws-spitzel, it is possible to query any attribute with a JSONPath query(e.g. `$.userIdentity.userName`) and compare it to a string, or number```shell$ aws-spitzel 'cloudtrail:Update*' \    --match '$.userIdentity.userName == &quot;AliceIsNotBob&quot;'``````shell$ aws-spitzel 'cloudtrail:Update*' \    --match '$.userIdentity.userName != &quot;AliceIsNotBob&quot;'```You can also execute a regular expression substring search```shell$ aws-spitzel 'cloudtrail:Update*' \    --match '$.userIdentity.userName regex &quot;AliceIsNot.*&quot;'```**NOTE**: operations occur on each single CloudTrail event, any JSON containerobjects (e.g. `Records` arrays) will not be available.The following commands are required:* `python3`* `pip`* `pipenv` (Development)Next, install and make sure the command is available.```shell$ python3 -m pip install victorykit-aws-spitzel``````shell$ aws-spitzel --help```Alternatively, you can clone the repository```shell$ mkdir py-aws-spitzel &amp;&amp; cd $_ &amp;&amp; git clone https://bitbucket.org/victorykit/py-aws-spitzel.git .```install via pipenv (development)```shell$ python3 -m pipenv install -d``````shell$ python3 -m pipenv run aws-spitzel --help```or pip```shell$ python3 -m pipenv install .``````shell$ aws-spitzel --help```More information in the [Contribution Guidelines](CONTRIBUTING.md)# Usage ExamplesMake sure to configure the AWS API through setting the [well-known AWS CLIenvironment variables](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html).The defaults are, to get all events within the last 90 days```shell$ aws-spitzel 's3:Get*' 'dynamodb:Get*'```There is a shorthand for *the last x minutes*```shell$ aws-spitzel 's3:Get*' 'dynamodb:*' --last-minute 300```Also, date ranges can be explicitly specified and will default to *now* and *90days before now*:```shell$ aws-spitzel \    --from '2023-03-31 14:00:12' \    --to '2023-04-01 00:00:00' \    's3:Get*' \    'dynamodb:*'```The following example finds all CloudTrail events of the AWS Transfer FamilyAPI, not made by AWS IAM user `Alice` existing in AWS account `000000000000`that we’re not denied and came from the host `147.161.171.112`. Strangequery, but hopefully the point comes across.```shell$ aws-spitzel \    --match '$.errorCode == &quot;AccessDenied&quot;' \    --match '$.userIdentity.principalId regex &quot;.*:^((?!Alice).)&quot;' \    --match '$.userIdentity.accountId == &quot;060862059283&quot;' \    --match '$.sourceIPAddress == &quot;147.161.171.112&quot;' \    &quot;transfer:List*&quot;```The next example gets all *Get* events on S3 and DynamoDB API calls in the last3 hours, which were denied for an IAM user *MyUser* from the principal account*060862059283*, that assumed the role *MyRole* in the target account.```shell$ aws-spitzel \    --match '$.errorCode == &quot;AccessDenied&quot;' \    --match '$.userIdentity.arn regex &quot;.*/MyRole/MyUser&quot;' \    --match '$.userIdentity.accountId == &quot;060862059283&quot;' \    --match ''    --last-minute 300 \    's3:Get*' \    'dynamodb:Get*' \```Piping is supported (warnings and errors are written to *stderr*)```shellwhile [ 1 -eq 1 ]; do    echo &quot;getting CloudTrail&quot;    aws-spitzel \        --match '$.errorCode != &quot;AccessDenied&quot;' \        --last-minute 300 \        &quot;s3:*Acl&quot; \        &quot;ssm:List*&quot; \    | \    jq '.'    echo &quot;waiting for CloudTrail (3000 seconds)&quot;    sleep 3000done```# License```defaultDL-DE-&gt;BY-2.0Datenlizenz Deutschland – Namensnennung – Version 2.0(1) Jede Nutzung ist unter den Bedingungen dieser „Datenlizenz Deutschland – Namensnennung – Version 2.0&quot; zulässig.Die bereitgestellten Daten und Metadaten dürfen für die kommerzielle und nicht kommerzielle Nutzung insbesonderevervielfältigt, ausgedruckt, präsentiert, verändert, bearbeitet sowie an Dritte übermittelt werden;mit eigenen Daten und Daten Anderer zusammengeführt und zu selbständigen neuen Datensätzen verbunden werden;in interne und externe Geschäftsprozesse, Produkte und Anwendungen in öffentlichen und nicht öffentlichen elektronischen Netzwerken eingebunden werden.(2) Bei der Nutzung ist sicherzustellen, dass folgende Angaben als Quellenvermerk enthalten sind:Bezeichnung des Bereitstellers nach dessen Maßgabe,der Vermerk „Datenlizenz Deutschland – Namensnennung – Version 2.0&quot; oder „dl-de/by-2-0&quot; mit Verweis auf den Lizenztext unter www.govdata.de/dl-de/by-2-0 sowieeinen Verweis auf den Datensatz (URI).Dies gilt nur soweit die datenhaltende Stelle die Angaben 1. bis 3. zum Quellenvermerk bereitstellt.(3) Veränderungen, Bearbeitungen, neue Gestaltungen oder sonstige Abwandlungen sind im Quellenvermerk mit dem Hinweis zu versehen, dass die Daten geändert wurden.Data licence Germany – attribution – version 2.0(1) Any use will be permitted provided it fulfils the requirements of this &quot;Data licence Germany – attribution – Version 2.0&quot;.The data and meta-data provided may, for commercial and non-commercial use, in particularbe copied, printed, presented, altered, processed and transmitted to third parties;be merged with own data and with the data of others and be combined to form new and independent datasets;be integrated in internal and external business processes, products and applications in public and non-public electronic networks.(2) The user must ensure that the source note contains the following information:the name of the provider,the annotation &quot;Data licence Germany – attribution – Version 2.0&quot; or &quot;dl-de/by-2-0&quot; referring to the licence text available at www.govdata.de/dl-de/by-2-0, anda reference to the dataset (URI).This applies only if the entity keeping the data provides the pieces of information 1-3 for the source note.(3) Changes, editing, new designs or other amendments must be marked as such in the source note.URL: http://www.govdata.de/dl-de/by-2-0```</longdescription>
</pkgmetadata>