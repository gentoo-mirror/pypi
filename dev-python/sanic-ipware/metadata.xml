<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================``sanic-ipware``=================This is a fork of `django-ipware &lt;https://github.com/un33k/django-ipware&gt;`_ to work with `Sanic &lt;https://sanicframework.org/&gt;`_.Overview--------**Best attempt** to get client's IP address while keeping it **DRY**.Notice------There is no real good &quot;out-of-the-box&quot; solution against fake IP addresses, aka &quot;IP Address Spoofing&quot;. You are encouraged to read the `Advanced users &lt;README.rst#advanced-users&gt;`_ section of this page and use ``trusted_proxies_ips`` and/or ``proxy_count`` features to match your needs, especially *if* you are planning to include ``sanic-ipware`` in any authentication, security or &quot;anti-fraud&quot; related architecture.How to install--------------The best way to install ``sanic-ipware`` would be using ``pip``:.. code-block::    pip install sanic-ipwareHow to use----------There's basically one method that should be usable from ``sanic_ipware``, called ``get_client_ip``. The result is a ``Tuple[Optional[str], bool]`` of ``(ipaddr, routable)``... code-block:: python    from sanic_ipware import get_client_ip    @app.get(&quot;/some/handler&quot;)    async def somehandler(request):        ip, routable = get_client_ip(request)        if ip is not None:            if routable:                # we have a (probably) real, public ip address for user            else:                # we have ip address, but it might not be public routable        else:            # we don't have a ip address for the userAdvanced users--------------.. code-block:: python    # you can provide your own meta precedence order by using the    # request_header_order in the function call:    ip, routable = get_client_ip(        request,        request_header_order=['Forwarded-For', 'X-Forwarded-For'])    # if you're going to do this a lot, wrap the function somewhere with    # functools.partial    from functools import partial    my_get_client_ip = partial(        get_client_ip,        request_header_order=['Forwarded-For', 'X-Forwarded-For'])    ip, routable = my_get_client_ip(request)    # if you plan to use sanic_ipware in any authentication, security or    # &quot;anti-fraud&quot; related architecture, you should configure it to only    # &quot;trust&quot; one or more &quot;known&quot; proxy server(s)), in the function call:    ip, routable = get_client_ip(request, proxy_trusted_ips=['198.84.193.158'])    # you can perform the same functools.partial trick with these trusted IPsLicense-------MIT, the same as ``django-ipware`` `license &lt;https://github.com/un33k/django-ipware/blob/57897c03026913892e61a164bc8b022778802ab9/LICENSE&gt;`_ .Changelog=========v0.1.0 on 2018-09-28--------------------* First release on PyPI. Not stable.</longdescription>
</pkgmetadata>