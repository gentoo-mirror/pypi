<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># resource-backed-dask-array[![License](https://img.shields.io/pypi/l/resource-backed-dask-array.svg?color=green)](https://github.com/tlambert03/resource-backed-dask-array/raw/main/LICENSE)[![PyPI](https://img.shields.io/pypi/v/resource-backed-dask-array.svg?color=green)](https://pypi.org/project/resource-backed-dask-array)[![Python Version](https://img.shields.io/pypi/pyversions/resource-backed-dask-array.svg?color=green)](https://python.org)[![CI](https://github.com/tlambert03/resource-backed-dask-array/actions/workflows/ci.yml/badge.svg)](https://github.com/tlambert03/resource-backed-dask-array/actions/workflows/ci.yml)[![codecov](https://codecov.io/gh/tlambert03/resource-backed-dask-array/branch/main/graph/badge.svg)](https://codecov.io/gh/tlambert03/resource-backed-dask-array)`ResourceBackedDaskArray` is an experimental Dask array subclassthat opens/closes a resource when computing (but only once per compute call).## installation```shpip install resource-backed-dask-array```## motivation for this packageConsider the following class that simulates a file reader capable of returning adask array (using[dask.array.map_blocks](https://docs.dask.org/en/latest/generated/dask.array.map_blocks.html))The file handle must be in an *open* state in order to read a chunk, otherwiseit segfaults (or otherwise errors)```pythonimport dask.array as daimport numpy as npclass FileReader:    def __init__(self):        self._closed = False    def close(self):        &quot;&quot;&quot;close the imaginary file&quot;&quot;&quot;        self._closed = True    @property    def closed(self):        return self._closed    def __enter__(self):        if self.closed:            self._closed = False  # open        return self    def __exit__(self, *_):        self.close()    def to_dask(self) -&gt; da.Array:        &quot;&quot;&quot;Method that returns a dask array for this file.&quot;&quot;&quot;        return da.map_blocks(            self._dask_block,            chunks=((1,) * 4, 4, 4),            dtype=float,        )    def _dask_block(self):        &quot;&quot;&quot;simulate getting a single chunk of the file.&quot;&quot;&quot;        if self.closed:            raise RuntimeError(&quot;Segfault!&quot;)        return np.random.rand(1, 4, 4)```As long as the file stays open, everything works fine:```python&gt;&gt;&gt; fr = FileReader()&gt;&gt;&gt; dsk_ary = fr.to_dask()&gt;&gt;&gt; dsk_ary.compute().shape(4, 4, 4)```However, if one closes the file, the dask array returnedfrom `to_dask` will now fail:```python&gt;&gt;&gt; fr.close()&gt;&gt;&gt; dsk_ary.compute()  # RuntimeError: Segfault!```A &quot;quick-and-dirty&quot; solution here might be to force the `_dask_block` method totemporarily reopen the file if it finds the file in the closed state, but if thefile-open process takes any amount of time, this could incur significantoverhead as it opens-and-closes for *every* chunk in the array.## usage`ResourceBackedDaskArray.from_array`This library attempts to provide a solution to the above problem with a`ResourceBackedDaskArray` object.  This manages the opening/closing ofan underlying resource whenever [`.compute()`](https://docs.dask.org/en/stable/generated/dask.array.Array.compute.html#dask.array.Array.compute) is called â€“ and does so only once for all chunks in a single compute task graph.```python&gt;&gt;&gt; from resource_backed_dask_array import resource_backed_dask_array&gt;&gt;&gt; safe_dsk_ary = resource_backed_dask_array(dsk_ary, fr)&gt;&gt;&gt; safe_dsk_ary.compute().shape(4, 4, 4)&gt;&gt;&gt; fr.closed  # leave it as we found itTrue```The second argument passed to `from_array` must be a [resuable context manager](https://docs.python.org/3/library/contextlib.html#reusable-context-managers)that additionally provides a `closed` attribute (like [io.IOBase](https://docs.python.org/3/library/io.html#io.IOBase.closed)).  In other words,it must implement the following protocol:1. it must have an [`__enter__` method](https://docs.python.org/3/reference/datamodel.html#object.__enter__) that opens the underlying resource2. it must have an [`__exit__` method](https://docs.python.org/3/reference/datamodel.html#object.__exit__) that closes the resource and optionally handles exceptions3. it must have a `closed` attribute that reports whether or not the resource is closed.In the example above, the `FileReader` class itself implemented this protocol, and so was suitable as the second argument to `ResourceBackedDaskArray.from_array` above.## Important CaveatsThis was created for single-process (and maybe just single-threaded?)use cases where dask's out-of-core lazy loading is still very desireable.  Usagewith `dask.distributed` is untested and may very well fail.  Using stateful objects (such as the reusable context manager used here) in multi-threaded/processed tasks is error prone.</longdescription>
</pkgmetadata>