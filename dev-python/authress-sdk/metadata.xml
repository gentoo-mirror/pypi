<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># authress-sdkAuthress SDK for Python.[![NuGet version](https://badge.fury.io/py/authress-sdk.svg)](https://badge.fury.io/py/authress-sdk) [![Build Status](https://travis-ci.com/Authress/authress-sdk.py.svg?branch=release%2F1.0)](https://travis-ci.com/authress/authress-sdk.py)This is the Authress SDK used to integrate with the authorization as a service provider Authress at https://authress.io.## Usage```shpip install authress-sdk```(you may need to run `pip` with root permission: `sudo pip install authress-sdk`)Then import the package:```pythonimport authress_sdk```## Getting Started### Authorize using a user token```pythonfrom authress_sdk import AuthressClient# create an instance of the API class during service initialization# Authress custom domain or if there isn't one yet, use the authress account specific urlhost = &quot;https://login.your.domain.com&quot; # or &quot;https://ACCOUNT_ID.api.authress.io&quot;authress_client = AuthressClient(host)# on api routefrom flask import requestfrom authress_sdk import ApiException@app.route('/resources/&lt;resourceId&gt;')def get_resource(resourceId):  # Get the user token and pass it to authress  authorization_token = request.headers.get('authorization')  authress_client.set_token(authorization_token)  # Check Authress to authorize the user  try    authress_client.users.authorize_user(None, f'resources/{resourceId}', 'READ')  except ApiException as api_exception:    # Will throw except if the user is not authorized to read the resource    if api_exception.status is 403:      return 403    raise api_exception  # On success, continue with the route code to load resource and return it  return 'Resource', 200```### Authorize with a service client```pythonfrom authress_sdk import AuthressClient# create an instance of the API class during service initialization# Authress custom domain or if there isn't one yet, use the authress account specific urlhost = &quot;https://login.your.domain.com&quot; # or &quot;https://ACCOUNT_ID.api.authress.io&quot;# Create a service client in the Authress management portal and past the access token hereaccess_token = 'eyJrZXlJ....'authress_client = AuthressClient(host, access_token)# on api routefrom flask import requestfrom authress_sdk import ApiException@app.route('/resources/&lt;resourceId&gt;')def get_resource(resourceId):  # Get the user  user_id = get_user_id(request)  # Check Authress to authorize the user  try    authress_client.users.authorize_user(user_id, f'resources/{resourceId}', 'READ')  except ApiException as api_exception:    # Will throw except if the user is not authorized to read the resource    if api_exception.status is 403:      return 403    raise api_exception  # On success, continue with the route code to load resource and return it  return 'Resource', 200```## Using the Authress service client as an API keyYou can use the Authress service client access token as an api key for your application. This is as simple as pulling in the SDK and referencing the token provider.### Application SDK example```pythonfrom authress_sdk import AuthressClientaccess_key = &quot;eyARB5k-...&quot; # For your API clients, these can be created via the API at https://authress.io/app/#/apiauthress_host = None # Optionally you can call the Authress API if there are authress resources to be fetchedauthress_client = AuthressClient(authress_host, access_key)# Generates a JWT to be used as a Bearer token for your APIjwt_token = authress_client.get_client_token()```In the case of a CLI or an SDK, the recommendation is to receive the access key from the user, perform these steps and then use the resulting `jwt_token` with your API. You can handle the JWTs as you would validate any JWT, in most cases it might be easier to make a request to Authress on the service side for token validation. An example is above:```pythonauthress_client.set_token(jwt_token)authress_client.users.authorize_user(...)```### Generation of service clientSince part of this process involves creating the service client and access token as part of your api. First create a service client which has `Authress:Owner` to resource `Authress:ServiceClients/*`. Then execute the following on user request to create a new api key.```pythonfrom authress_sdk import AuthressClientfrom authress_sdk.models import *# Your service's service client access tokenaccess_token = 'eyJrZXlJ....'# Authress custom domain or if there isn't one yet, use the authress account specific urlhost = &quot;https://login.your.domain.com&quot; # or &quot;https://ACCOUNT_ID.api.authress.io&quot;authress_client = AuthressClient(host, access_token)# User to create access token foruser_id = 'USER_A1'# Create the service clientnew_client = authress_client.clients.create_client(Client(name=f'ServiceClient for User {user_id}'))# Give the service client access to the users dataauthress_client.records.create_record(AccessRecord(  name=f'API Key {new_client.client_id}',  users=[AccessRecordUser(f'Authress:ServiceClients/{new_client.client_id}')],  # Add the list of permissions this api key should have, for example here we've added all access to all the users resources as defined in Authress  statements=[AccessRecordStatement(['Authress:Owner'], [AccessRecordResource(f'/users/{user_id}')])]))# Request a new access key for that clientdata = service_client_api.request_access_key(new_client.client_id)# Return the access key to the user for usagereturn data.access_key```### Token VerifierTo verify incoming tokens from Authress call the `verify_token` method on the `AuthressClient````pythonfrom authress_sdk import AuthressClient# User's access token from requestauthorization_token = request.headers.get(&quot;authorization&quot;)# Authress custom domain or if there isn't one yet, use the authress account specific urlhost = &quot;https://login.your.domain.com&quot; # or &quot;https://ACCOUNT_ID.api.authress.io&quot;# Instantiate the clientauthress_client = AuthressClient(host)# Verify the token, on successful verification the response is the decoded user identity JWT. On failure this raises an exceptionuser_identity = authress_client.verify_token(authorization_token)```</longdescription>
</pkgmetadata>