<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pydantic-kms-secrets[![PyPI version](https://badge.fury.io/py/pydantic-kms-secrets.svg)](https://badge.fury.io/py/pydantic-kms-secrets)![Upload Python Package](https://github.com/nplutt/pydantic-kms-secrets/workflows/Upload%20Python%20Package/badge.svg)[![codecov](https://codecov.io/gh/nplutt/pydantic-kms-secrets/branch/master/graph/badge.svg)](https://codecov.io/gh/nplutt/pydantic-kms-secrets)Utility to decrypt and encrypt secrets using [AWS KMS keys](https://aws.amazon.com/kms/) that also integrates with [pydantic](https://pydantic-docs.helpmanual.io/) models which allows forencrypted values to be stored in `.env` files and be decrypted at runtime.## InstallationFrom PyPi:```bash$ pip install pydantic-kms-secrets```## Usage### CLIEncrypt a secret:```bash$ pks -k your-kms-key-id -v my-secret-password -e```Decrypt a secret:```bash$ pks -k your-kms-key-id -v your-encrypted-secret -d```Help docs:```bash$ pks --helpusage: pks [-h] [-k KEY_ID] -v VALUE [-e] [-d]Tool to encrypt and decrypt secrets via a KMS keyoptional arguments:  -h, --help            show this help message and exit  -k KEY_ID, --key-id KEY_ID                        ID of the KMS key to use  -v VALUE, --value VALUE                        The value to be encrypted  -e, --encrypt         Set to encrypt value  -d, --decrypt         Set to decrypt value```### PydanticPydantic KMS Secrets is able to integrate and add functionality on top of Pydantic's [dotenv extension](https://pydantic-docs.helpmanual.io/usage/settings/) by allowing youto store encrypted values in your `.env` files and decrypt them at runtime. A basic implementationwould look something like: **Pydantic Settings Model**```pythonfrom pydantic import BaseSettingsfrom pydantic_kms_secrets import KMSSecretStr, decrypt_kms_secretsclass Settings(BaseSettings):    env: str    secrets_kms_key_id: str  # This model attribute must exist to decrypt secrets    kms_secret_1: KMSSecretStr    kms_secret_2: KMSSecretStr    class Config:        env_file = &quot;.env&quot;# Don't forget to call decrypt_kms_secrets, if you don't the secrets will not be decryptedsettings = decrypt_kms_secrets(Settings())```**`.env` File**```bashENV=&quot;prod&quot;SECRETS_KMS_KEY_ID=&quot;your-kms-key-id&quot;  # This environment variable must be set to decrypt secretsKMS_SECRET_1=&quot;my-first-encrypted-secret&quot;KMS_SECRET_2=&quot;my-second-encrypted-secret&quot;```**KMSSecretStr** ClassThe `KMSSecretStr` class is almost identical to the [SecretStr](https://pydantic-docs.helpmanual.io/usage/types/#secret-types)type in pydantic. ```python# This example uses the settings value from the python example above# Standard access methods will not display the secretprint(settings)#&gt; env='prod' secrets_kms_key_id='your-kms-key-id' kms_secret_1=KMSSecretStr('**********') kms_secret_2=KMSSecretStr('**********')print(settings.kms_secret_1)#&gt; **********print(settings.dict())&quot;&quot;&quot;{    'env': 'prod',    'secret_kms_key_id': 'your-kms-key-id',    'kms_secret_1': KMSSecretStr('**********'),    'kms_secret_2': KMSSecretStr('**********'),}&quot;&quot;&quot;print(settings.json())#&gt; {&quot;env&quot;: &quot;prod&quot;, &quot;secret_kms_key_id&quot;: &quot;your-kms-key-id&quot;, &quot;kms_secret_1&quot;: &quot;**********&quot;, &quot;kms_secret_2&quot;: &quot;**********&quot;}# Use get_secret_value method to see the secret's content.print(settings.kms_secret_1.get_secret_value())#&gt; my-first-encrypted-secretprint(settings.kms_secret_2.get_secret_value())#&gt; my-second-encrypted-secret```</longdescription>
</pkgmetadata>