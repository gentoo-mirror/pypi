<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sag_py_auth[![Maintainability][codeclimate-image]][codeclimate-url][![Coverage Status][coveralls-image]][coveralls-url][![Known Vulnerabilities](https://snyk.io/test/github/SamhammerAG/sag_py_auth/badge.svg)](https://snyk.io/test/github/SamhammerAG/sag_py_auth)[coveralls-image]:https://coveralls.io/repos/github/SamhammerAG/sag_py_auth/badge.svg?branch=master[coveralls-url]:https://coveralls.io/github/SamhammerAG/sag_py_auth?branch=master[codeclimate-image]:https://api.codeclimate.com/v1/badges/2da48e3952f9640f702f/maintainability[codeclimate-url]:https://codeclimate.com/github/SamhammerAG/sag_py_auth/maintainabilityThis provides a way to secure your fastapi with keycloak jwt bearer authentication.## What it does* Secure your api endpoints* Verifies auth tokens: signature, expiration, issuer, audience* Allows to set permissions by specifying roles and realm roles## How to use### Installationpip install sag-py-auth### Secure your apisFirst create the fast api dependency with the auth config:```pythonfrom sag_py_auth.models import AuthConfig, TokenRolefrom sag_py_auth.jwt_auth import JwtAuthfrom fastapi import Dependsauth_config = AuthConfig(&quot;https://authserver.com/auth/realms/projectName&quot;, &quot;myaudience&quot;)required_roles = [TokenRole(&quot;clientname&quot;, &quot;adminrole&quot;)]required_realm_roles = [&quot;additionalrealmrole&quot;]requires_admin = Depends(JwtAuth(auth_config, required_roles, required_realm_roles))```Afterwards you can use it in your route like that:```python@app.post(&quot;/posts&quot;, dependencies=[requires_admin], tags=[&quot;posts&quot;])async def add_post(post: PostSchema) -&gt; dict:```Or if you use sub routes, auth can also be enforced for the entire route like that:```pythonrouter = APIRouter()router.include_router(sub_router, tags=[&quot;my_api_tag&quot;], prefix=&quot;/subroute&quot;,dependencies=[requires_admin])```### Get user informationThe Jwt call directly returns a token object that can be used to get additional information.Furthermore you can access the context directly:```pythonfrom sag_py_auth.auth_context import get_token as get_token_from_contexttoken = get_token_from_context()```This works in async calls but not in sub threads (without additional changes).See:* https://docs.python.org/3/library/contextvars.html* https://kobybass.medium.com/python-contextvars-and-multithreading-faa33dbe953d#### Methods available on the token object* get_field_value: to get the value of a claim field (or an empty string if not present)* get_roles: Gets the roles of a specific client* has_role: Verify if a spcific client has a role* get_realm_roles: Get the realm roles* has_realm_role: Check if the user has a specific realm role### Log user dataIt is possible to log the preferred_username and the azp value (party that created the token) of the token by adding a filter.```pythonimport loggingfrom sag_py_auth import UserNameLoggingFilterconsole_handler = logging.StreamHandler(sys.stdout)console_handler.addFilter(UserNameLoggingFilter())```The filter provides the following two fields as soon as the user is authenticated: user_name, authorized_party### How a token has to look like```json{    &quot;iss&quot;: &quot;https://authserver.com/auth/realms/projectName&quot;,    &quot;aud&quot;: [&quot;audienceOne&quot;, &quot;audienceTwo&quot;],    &quot;typ&quot;: &quot;Bearer&quot;,    &quot;azp&quot;: &quot;public-project-swagger&quot;,    &quot;preferred_username&quot;: &quot;preferredUsernameValue&quot;,    .....    &quot;realm_access&quot;: {        &quot;roles&quot;: [&quot;myRealmRoleOne&quot;]    },    &quot;resource_access&quot;: {        &quot;my-client-one&quot;: {            &quot;roles&quot;: [&quot;a-permission-role&quot;, &quot;user&quot;]        },        &quot;my-client-two&quot;: {            &quot;roles&quot;: [&quot;a-permission-role&quot;, &quot;admin&quot;]        }    }}```* realm_access contains the realm roles* resource_access contains the token roles for one or multiple clients## How to start developing### With vscodeJust install vscode with dev containers extension. All required extensions and configurations are prepared automatically.### With pycharm* Install latest pycharm* Install pycharm plugin BlackConnect* Install pycharm plugin Mypy* Configure the python interpreter/venv* pip install requirements-dev.txt* pip install black[d]* Ctl+Alt+S =&gt; Check Tools =&gt; BlackConnect =&gt; Trigger when saving changed files* Ctl+Alt+S =&gt; Check Tools =&gt; BlackConnect =&gt; Trigger on code reformat* Ctl+Alt+S =&gt; Click Tools =&gt; BlackConnect =&gt; &quot;Load from pyproject.yaml&quot; (ensure line length is 120)* Ctl+Alt+S =&gt; Click Tools =&gt; BlackConnect =&gt; Configure path to the blackd.exe at the &quot;local instance&quot; config (e.g. C:\Python310\Scripts\blackd.exe)* Ctl+Alt+S =&gt; Click Tools =&gt; Actions on save =&gt; Reformat code* Restart pycharm## How to publish* Update the version in setup.py and commit your change* Create a tag with the same version number* Let github do the rest</longdescription>
</pkgmetadata>