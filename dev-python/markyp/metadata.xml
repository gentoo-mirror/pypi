<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/volfpeter/markyp.svg?branch=master)](https://travis-ci.org/volfpeter/markyp)[![Downloads](https://pepy.tech/badge/markyp)](https://pepy.tech/project/markyp)[![Downloads](https://pepy.tech/badge/markyp/month)](https://pepy.tech/project/markyp/month)[![Downloads](https://pepy.tech/badge/markyp/week)](https://pepy.tech/project/markyp/week)# markypPython 3 tools for creating markup documents.## InstallationThe project is listed on the Python Package Index, it can be installed simply by executing `pip install markyp`.## General conceptsElement creation in `markyp` and its derivates usually works as follows:- If an element can have children, then the positional arguments passed to the component become the children of the created element.- If an element can have attributes, then keyword arguments that are not listed explicitly on the argument list (i.e. `**kwargs`) are turned into element attributes.- Explicitly declared keyword arguments work as documented.The markup defined by the created elements can be obtained by converting to root element to string (`str()`) or by using the root element's `markup` property.## Getting startedCreating new `markyp` element types is typically as simple as deriving new classes with the right name from the base elements that are provided by the project. The following example shows the creation of some HTML elements:```Pythonfrom markyp import ElementTypefrom markyp.elements import Element, StringElementclass html(Element):    __slots__ = ()    def __str__(self) -&gt; str:        return f&quot;&lt;!DOCTYPE html&gt;\n{(super().__str__())}&quot;class head(Element):    __slots__ = ()class body(Element):    __slots__ = ()class title(StringElement):    __slots__ = ()class p(Element):    __slots__ = ()    @property    def inline_children(self) -&gt; bool:        return Trueclass code(StringElement):    __slots__ = ()class ul(Element):    __slots__ = ()class li(Element):    __slots__ = ()```Once you have defined the basic components that are required by your project, you can make document creation easier by creating higher order functions that convert your data into markup elements.```Pythondef create_unordered_list(*items: ElementType) -&gt; ul:    &quot;&quot;&quot;Creates an unordered list from the received arguments.&quot;&quot;&quot;    return ul(        *(li(item, class_=&quot;fancy-list-item&quot;, style=&quot;color:blue;&quot;) for item in items),        class_=&quot;fancy-list&quot;    )```When everything is in place, a document can be created simply by instantiating the elements that make up the document. Notice that during element construction, positional arguments are treated as children elements and keyword arguments are treated as element attributes, allowing you to create documents using a markup-like syntax.```Pythondocument = html(    head(title(&quot;Hello World!&quot;)),    body(        p(code(&quot;markyp&quot;), &quot;HTML example.&quot;, style=&quot;font-weight:bold;&quot;),        p(&quot;Creating lists is easy as&quot;, style=&quot;color:blue;&quot;),        create_unordered_list(&quot;One&quot;, p(&quot;Two&quot;, style=&quot;font-style:italic;&quot;), &quot;Three&quot;),        style=&quot;font-size:20px&quot;    ))```At this point, you have a Python object representing your document. The actual markup is created only when you convert this object into a string using either the `str()` method or the `markup` property of the element.```Pythonprint(document)```## Domain-specific `markyp` extensions`markyp` extensions should follow the `markyp-{domain-or-extension-name}` naming convention. Here is a list of domain-specific extensions:- `markyp-rss`: RSS 2 implementation at https://github.com/volfpeter/markyp-rss, contribution is welcome.- `markyp-html`: HTML implementation at https://github.com/volfpeter/markyp-html, contribution is welcome.- `markyp-highlightjs`: HTML code highlighting using `highlight.js` at https://github.com/volfpeter/markyp-highlightjs, contribution is welcome.markyp-highlightjs- `markyp-bootstrap4`: Bootstrap 4 implementation at https://github.com/volfpeter/markyp-bootstrap4, contribution is welcome.If you have created an open source `markyp` extension, please let us know and we will include your project in this list.## Community guidelinesIn general, please treat each other with respect and follow the below guidelines to interact with the project:- _Questions, feedback_: Open an issue with a `[Question] &lt;issue-title&gt;` title.- _Bug reports_: Open an issue with a `[Bug] &lt;issue-title&gt;` title, an adequate description of the bug, and a code snippet that reproduces the issue if possible.- _Feature requests and ideas_: Open an issue with an `[Enhancement] &lt;issue-title&gt;` title and a clear description of the enhancement proposal.## Contribution guidelinesEvery form of contribution is welcome, including documentation improvements, tests, bug fixes, and feature implementations.Please follow these guidelines to contribute to the project:- Make sure your changes match the documentation and coding style of the project, including [PEP 484](https://www.python.org/dev/peps/pep-0484/) type annotations.- `mypy` is used to type-check the codebase, submitted code should not produce typing errors. See [this page](http://mypy-lang.org/) for more information on `mypy`.- _Small_ fixes can be submitted simply by creating a pull request.- Non-trivial changes should have an associated [issue](#community-guidelines) in the issue tracker that commits must reference (typically by adding `#refs &lt;issue-id&gt;` to the end of commit messages).- Please write [tests](#testing) for the changes you make (if applicable).If you have any questions about contributing to the project, please contact the project owner.## TestingAs mentioned in the [contribution guidelines](#contribution-guidelines), the project is type-checked using `mypy`, so first of all, the project must pass `mypy`'s static code analysis.The project is tested using `pytest`. The chosen test layout is that tests are outside the application code, see [this page](https://docs.pytest.org/en/latest/goodpractices.html#tests-outside-application-code) for details on what it means in practice.If `pytest` is installed, the test set can be executed using the `pytest test` command from within the project directory.If `pytest-cov` is also installed, a test coverage report can be generated by executing `pytest test --cov markyp` from the root directory of the project.## License - MITThe library is open-sourced under the conditions of the MIT [license](https://choosealicense.com/licenses/mit/).</longdescription>
</pkgmetadata>