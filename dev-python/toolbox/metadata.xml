<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸ§° Toolbox&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/synchronizing/toolbox/actions?query=workflow%3ABuild&quot;&gt;    &lt;img src=&quot;https://github.com/synchronizing/toolbox/workflows/Build/badge.svg?branch=master&amp;event=push&quot;&gt;  &lt;/a&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/&quot;&gt;    &lt;img src=&quot;https://github.com/synchronizing/toolbox/workflows/Docs/badge.svg?branch=master&amp;event=push&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://coveralls.io/github/synchronizing/toolbox?branch=master&quot;&gt;    &lt;img src=&quot;https://coveralls.io/repos/github/synchronizing/toolbox/badge.svg?branch=master&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/License-MIT-yellow.svg&quot;&gt;  &lt;/a&gt;&lt;/p&gt;Toolbox is a small (~0.2MB) set of tools that expands the [Python Standard Library](https://docs.python.org/3/library/).## Installing```pip install toolbox```## DocumentationDocumentation can be found [**here**](http://synchronizing.github.io/toolbox/).## Tools### `asyncio`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/asyncio.html#toolbox.asyncio.cache.future_lru_cache&quot;&gt;&lt;code&gt;future_lru_cache&lt;/code&gt;&lt;/a&gt; â€” &lt;code&gt;lru_cache&lt;/code&gt; for async functions.&lt;/summary&gt;&lt;br&gt;  ```pythonfrom toolbox import future_lru_cacheimport asyncio@future_lru_cacheasync def func():    await asyncio.sleep(10)    return 42async def main():    await func() # Runs once.    await func() # Returns cached value.asyncio.run(main())````&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/asyncio.html#toolbox.asyncio.threads.to_thread&quot;&gt;&lt;code&gt;to_thread&lt;/code&gt;&lt;/a&gt; â€” Run a synchronous function in a separate thread.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import to_threadimport asyncioimport timedef func():    time.sleep(2)    return &quot;Hello world&quot;async def main():    await to_thread(func)asyncio.run(main())````&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/asyncio.html#toolbox.asyncio.threads.awaitable&quot;&gt;&lt;code&gt;awaitable&lt;/code&gt;&lt;/a&gt; â€” Convert synchronous function to an async function via thread.&lt;/summary&gt;&lt;br&gt;  Leverages the `to_thread` function above.```pythonfrom toolbox import awaitableimport asyncioimport time@awaitabledef func():    time.sleep(2)    return &quot;Hello world&quot;async def main():    await func()asyncio.run(func())```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/asyncio.html#toolbox.asyncio.streams.tls_handshake&quot;&gt;&lt;code&gt;tls_handshake&lt;/code&gt;&lt;/a&gt; â€” Perform TLS handshake with a stream reader &amp; writer.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import tls_handshakeimport asyncioasync def client():    reader, writer = await asyncio.open_connection(&quot;httpbin.org&quot;, 443, ssl=False)    await tls_handshake(reader=reader, writer=writer)    # Communication is now encrypted.asyncio.run(client())```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/asyncio.html#toolbox.asyncio.pattern.CoroutineClass&quot;&gt;&lt;code&gt;CoroutineClass&lt;/code&gt;&lt;/a&gt; â€” Class pattern for implementing object-based coroutines. &lt;/summary&gt;&lt;br&gt;  Pattern for creating a coroutine-like class that has multiple ways to start it.```pythonfrom toolbox import CoroutineClassimport asyncioclass Coroutine(CoroutineClass):    def __init__(self, run: bool = False):        super().__init__(run=run)    # Default entry function.    async def entry(self):        await asyncio.sleep(1)        return &quot;Hello world&quot;# Start coroutine outside Python async context.def iomain():    # via __init__    coro = Coroutine(run=True)    print(coro.result)  # Hello world    # via .run()    coro = Coroutine()    result = coro.run()    print(result)  # Hello world# Start coroutine inside Python async context.async def aiomain():    # via __init__    coro = Coroutine(run=True)    await asyncio.sleep(1)    coro.stop()    print(coro.result)  # None - because process was stopped before completion.    # via .run()    coro = Coroutine()    coro.run()    await asyncio.sleep(1)    result = coro.stop()  # None - because coroutine was stopped before completion.    print(result)  # Hello world    # via await    coro = Coroutine()    result = await coro  # You can also start, and await later.    print(result)  # Hello World    # via context manager    async with Coroutine() as coro:        result = await coro    print(result)  # Hello World```&lt;/details&gt;### `builtins`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/builtins.html#toolbox.builtins.property.classproperty&quot;&gt;&lt;code&gt;classproperty&lt;/code&gt;&lt;/a&gt; â€” Decorator for defining a method as a property and classmethod.&lt;/summary&gt;&lt;br&gt;Allows access to computed class attributes.```pythonfrom toolbox import classpropertyclass Animal:    @classproperty    def dog(cls):        return &quot;whoof!&quot;print(Animal.dog) #  'whoof!'```&lt;/details&gt;### `collections`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.item.Item&quot;&gt;&lt;code&gt;Item&lt;/code&gt;&lt;/a&gt; â€” An interface for type-agnostic operations between different types.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import Itemitem = Item(100)print(item == b&quot;100&quot; == &quot;100&quot; == 100) #  True```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.namedtuple.nestednamedtuple&quot;&gt;&lt;code&gt;nestednamedtuple&lt;/code&gt;&lt;/a&gt; â€” Creates a nested &lt;code&gt;namedtuple&lt;/code&gt;.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import nestednamedtuplent = nestednamedtuple({&quot;hello&quot;: {&quot;ola&quot;: &quot;mundo&quot;}})print(nt)           #  namedtupled(hello=namedtupled(ola='mundo'))print(nt.hello.ola) #  mundo```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.namedtuple.fdict&quot;&gt;&lt;code&gt;fdict&lt;/code&gt;&lt;/a&gt; â€” Forces &lt;code&gt;nestednamedtuple&lt;/code&gt; to not convert &lt;code&gt;dict&lt;/code&gt; to &lt;code&gt;namedtuple&lt;/code&gt;. &lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import nestednamedtuple, fdictd = {&quot;hello&quot;: &quot;world&quot;}nt = nestednamedtuple({&quot;forced&quot;: fdict(d), &quot;notforced&quot;: d})print(nt.notforced) #  namedtupled(hello='world')print(nt.forced)    #  {'hello': 'world'}```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.mapping.BidirectionalDict&quot;&gt;&lt;code&gt;BidirectionalDict&lt;/code&gt;&lt;/a&gt; â€” Dictionary with two-way capabilities.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import BidirectionalDictd = BidirectionalDict({&quot;hello&quot;: &quot;world&quot;})print(d) #  {'hello': 'world', 'world': 'hello'}```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.mapping.ObjectDict&quot;&gt;&lt;code&gt;ObjectDict&lt;/code&gt;&lt;/a&gt; â€” Dictionary that can be accessed as though it was an object.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import ObjectDictd = ObjectDict({&quot;hello&quot;: &quot;world&quot;})print(d.hello) #  'world'```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.mapping.OverloadedDict&quot;&gt;&lt;code&gt;OverloadedDict&lt;/code&gt;&lt;/a&gt; â€” Dictionary that can be added or subtracted to.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import OverloadedDictd1 = OverloadedDict({&quot;hello&quot;: &quot;world&quot;})d2 = OverloadedDict({&quot;ola&quot;: &quot;mundo&quot;})d1 += d2print(d1) #  {'hello': 'world', 'ola': 'mundo'}d1 -= d2print(d1) #  {'hello': 'world'}```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.mapping.UnderscoreAccessDict&quot;&gt;&lt;code&gt;UnderscoreAccessDict&lt;/code&gt;&lt;/a&gt; â€” Dictionary with underscore access.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import UnderscoreAccessDictd = UnderscoreAccessDict({&quot;hello&quot;: &quot;world&quot;})print(d.hello) #  'world'```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.mapping.FrozenDict&quot;&gt;&lt;code&gt;FrozenDict&lt;/code&gt;&lt;/a&gt; â€” Dictionary that is frozen.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import FrozenDictd = FrozenDict({&quot;hello&quot;: &quot;world&quot;})d[&quot;hello&quot;] = &quot;mundo&quot; # KeyError: Cannot set key and value because this is a frozen dictionary.```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.mapping.MultiEntryDict&quot;&gt;&lt;code&gt;MultiEntryDict&lt;/code&gt;&lt;/a&gt; â€” Dictionary that can have multiple entries for the same key.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import MultiEntryDictd = MultiEntryDict({&quot;hello&quot;: &quot;world&quot;})d[&quot;hello&quot;] = &quot;mundo&quot;print(d) #  {'hello': ['world', 'mundo']}```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/collections.html#toolbox.collections.mapping.ItemDict&quot;&gt;&lt;code&gt;ItemDict&lt;/code&gt;&lt;/a&gt; â€” Dictionary that utilizes &lt;a href=&quot;#Item&quot;&gt;&lt;code&gt;Item&lt;/code&gt;&lt;/a&gt; for key and values.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import ItemDict, Itemd = ItemDict({&quot;100&quot;: &quot;one hundred&quot;})print(d[100])                                          #  one hundredprint(d[100] == d['100'] == d[b'100'] == d[Item(100)]) #  True```&lt;/details&gt;All `*Dict` types above can be combined together (as mixins) to create unique dictionary types.### `config`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/config.html#toolbox.config.globalconfig.make_config&quot;&gt;&lt;code&gt;make_config&lt;/code&gt;&lt;/a&gt; â€” Stores configuration dictionary in-memory.&lt;/summary&gt;&lt;br&gt;Creates a global configuration that can be accessed by other portions of the code via `conf` or `config` function calls. Minimizes the need to create `Config` objects and pass them around different modules, classes, functions, etc.```pythonfrom toolbox import make_configmake_config(hello=&quot;world&quot;)```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/config.html#toolbox.config.globalconfig.config&quot;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/a&gt; â€” Access in-memory configuration as dictionary.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import configprint(config()['hello']) #  'world'```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/config.html#toolbox.config.globalconfig.conf&quot;&gt;&lt;code&gt;conf&lt;/code&gt;&lt;/a&gt; â€” Access in-memory configuration as &lt;code&gt;nestednametuple&lt;/code&gt;.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import confprint(conf().hello) #  'world'```&lt;/details&gt;### `functools`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/functools.html#toolbox.functools.timeout.timeout&quot;&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/a&gt; â€” Decorator to add timeout for synchronous and asychronous functions.&lt;/summary&gt;&lt;br&gt;Decorator that adds support for synchronous and asynchronous function timeout. Quits function after an amount of time passes.```pythonfrom toolbox import timeoutimport asyncioimport time@timeout(seconds=1)def func():    time.sleep(15)@timeout(seconds=1)async def func():    await asyncio.sleep(15)```&lt;/details&gt;### `pdb`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/pdb.html#toolbox.pdb.sprinke.sprinkle&quot;&gt;&lt;code&gt;sprinkle&lt;/code&gt;&lt;/a&gt; â€”  Prints the line and file that this function was just called from.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox.pdb.sprinkle import sprinklesprinkle() # &gt;&gt;&gt; 3 this_file.pysprinkle(&quot;hello&quot;, &quot;world&quot;) # &gt;&gt;&gt; 4 this_file.py hello world```&lt;/details&gt;### `pkgutil`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/pkgutil.html#toolbox.pkgutil.package.search_package&quot;&gt;&lt;code&gt;search_package&lt;/code&gt;&lt;/a&gt; â€” Searches for packages installed in the system.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import search_packageprint(search_package(&quot;toolbox&quot;, method=&quot;is&quot;))#  {'toolbox': &lt;module 'toolbox' from '.../toolbox/__init__.py'&gt;}```&lt;/details&gt;### `sockets`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/sockets.html#toolbox.sockets.ip.is_ip&quot;&gt;&lt;code&gt;is_ip&lt;/code&gt;&lt;/a&gt; â€” Checks if a string is an IP address.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import is_ipprint(is_ip('127.0.0.1')) # Trueprint(is_ip('localhost')) # False```&lt;/details&gt;### `string`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/string.html#color&quot;&gt;ANSI Formatting&lt;/a&gt; â€” Color formatting.&lt;/summary&gt;&lt;br&gt;Check documentation [here](https://synchronizing.github.io/toolbox/module/string.html#color) for further information on all built-in formats.```pythonfrom toolbox import bold, redprint(red(&quot;This text is red!&quot;))print(bold(&quot;This text is bolded!&quot;))```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/string.html#toolbox.string.color.Format&quot;&gt;&lt;code&gt;Format&lt;/code&gt;&lt;/a&gt; â€” Persistent ANSI formatter that takes a custom ANSI code.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import Formatbold = Format(code=1)print(bold(&quot;hello world&quot;))```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/string.html#toolbox.string.color.Style&quot;&gt;&lt;code&gt;Style&lt;/code&gt;&lt;/a&gt; â€” Persistent ANSI formatter that allows multiple ANSI codes.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import Style, red, bolderror = Style(red, bold)print(error(&quot;This is red &amp; bolded error.&quot;))```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/string.html#toolbox.string.color.supports_color&quot;&gt;&lt;code&gt;supports_color&lt;/code&gt;&lt;/a&gt; â€” Check's if the user's terminal supports color.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import supports_colorprint(supports_color()) # True```&lt;/details&gt;&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/string.html#toolbox.string.color.strip_ansi&quot;&gt;&lt;code&gt;strip_ansi&lt;/code&gt;&lt;/a&gt; â€” Removes ANSI codes from string.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import strip_ansiprint(strip_ansi(&quot;\x1b[1mhello world\x1b[0m&quot;)) #  hello world```&lt;/details&gt;### `textwrap`&lt;details&gt;  &lt;summary&gt;&lt;a href=&quot;https://synchronizing.github.io/toolbox/module/textwrap.html#toolbox.textwrap.text.unindent&quot;&gt;&lt;code&gt;unindent&lt;/code&gt;&lt;/a&gt; â€” Removes indent and white-space from docstrings.&lt;/summary&gt;&lt;br&gt;```pythonfrom toolbox import unindentdef test():    text = &quot;&quot;&quot;           hello world           this is a test           &quot;&quot;&quot;    print(text)    text = unindent(        &quot;&quot;&quot;        hello world        this is a test        &quot;&quot;&quot;    )    print(text)test()#           hello world#           this is a test## hello world# this is a test```&lt;/details&gt;</longdescription>
</pkgmetadata>