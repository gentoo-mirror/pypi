<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Document whitening (foreground separation)This package tries to separate text/line foreground and background by 2D medianfilter.&lt;img src=&quot;data/IMG_3262.jpg&quot; alt=&quot;original&quot; width=&quot;250&quot;&gt;&lt;img src=&quot;data/IMG_3262_fg.jpg&quot; alt=&quot;foreground&quot; width=&quot;250&quot;&gt;&lt;img src=&quot;data/IMG_3262_bg.jpg&quot; alt=&quot;background&quot; width=&quot;250&quot;&gt;## InstallationInstall from PyPI. Works on Python 3.```bashpip install whitening```## Example usage### Python APIIt works with images represented as `PIL.Image` or as a numpy array. Images canbe either RGB or grayscale.```pythonimport numpy as npimport PIL.Imagefrom whitening import whiten# possible to use numpy array as input/outputimage = np.asarray(PIL.Image.open('image.jpg'), dtype='uint8')foreground, background = whiten(image, kernel_size=20, downsample=4)PIL.Image.fromarray(foreground).save('foreground.jpg', 'jpeg')# or directly a PIL imageimage = PIL.Image.open('image.jpg')foreground, background = whiten(image, kernel_size=20, downsample=4)foreground.save('foreground.jpg', 'jpeg')```### CLIIt install an entry point called `whiten`.```bash# help$ whiten -h# whiten an image and save the foreground output$ whiten input.jpg foreground.jpg# specify the kernel size$ whiten input.jpg foreground.jpg -k 100# work in grayscale instead of RGB (3x faster)$ whiten input.jpg foreground.jpg -g# downsample the image 4x (faster, but a bit less precise)$ whiten input.jpg foreground.jpg -d 4# save also the background$ whiten input.jpg foreground.jpg -b background.jpg```We assume the original images is a product of foreground and background,thus we can recover the foreground by dividing the image by the background:`I = F * B =&gt; F = I / B`. We try to approximate the background by 2D medianfiltering the original image which suppresses sparse features such as text andlines.Select kernel size that's enough for not making artifacts while small enoughto keep computation fast. A good starting point is 50 pixels.A 9.5 Mpx image can be processed on a MacBook in 15 s, with grayscale anddownsampling 4x the run time can be reduced to 1 s! Quite good results can beobtained even with kernel size 10 and downsampling 16x.More info: http://bohumirzamecnik.cz/blog/2015/image-whitening/## DevelopmentSee the `Makefile` for various development tasks.## LicenseAuthor: Bohumír Zámečník &lt;bohumir.zamecnik@gmail.com&gt;Supported by [Rossum](https://rossum.ai), creating a world without manual data entry.</longdescription>
</pkgmetadata>