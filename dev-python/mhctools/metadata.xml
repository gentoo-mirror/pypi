<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/openvax/mhctools.svg?branch=master)](https://travis-ci.org/openvax/mhctools) [![Coverage Status](https://coveralls.io/repos/openvax/mhctools/badge.svg?branch=master)](https://coveralls.io/r/openvax/mhctools?branch=master)&lt;a href=&quot;https://pypi.python.org/pypi/mhctools/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/mhctools.svg?maxAge=1000&quot; alt=&quot;PyPI&quot; /&gt;&lt;/a&gt;&lt;!-- &lt;a href='https://mhctools.readthedocs.io/en/latest/?badge=latest'&gt;    &lt;img src='https://readthedocs.org/projects/mhctools/badge/?version=latest' alt='Documentation Status' /&gt;&lt;/a&gt;--&gt; &lt;!-- [![DOI](https://zenodo.org/badge/18834/openvax/mhctools.svg)](https://zenodo.org/badge/latestdoi/18834/openvax/mhctools)--&gt;# mhctoolsPython interface to running command-line and web-based MHC binding predictors.## Commandline examples### Prediction for user-supplied peptide sequences```shmhctools --sequence SIINFEKL SIINFEKLQ --mhc-predictor netmhc --mhc-alleles A0201```### Automatically extract peptides as subsequences of specified length```shmhctools --sequence AAAQQQSIINFEKL --extract-subsequences --mhc-peptide-lengths 8-10 --mhc-predictor mhcflurry --mhc-alleles A0201```## Python usage```pythonfrom mhctools import NetMHCpan# Run NetMHCpan for alleles HLA-A*01:01 and HLA-A*02:01predictor = NetMHCpan(alleles=[&quot;A*02:01&quot;, &quot;hla-a0101&quot;])# scan the short proteins 1L2Y and 1L3Y for epitopesprotein_sequences = {  &quot;1L2Y&quot;: &quot;NLYIQWLKDGGPSSGRPPPS&quot;,  &quot;1L3Y&quot;: &quot;ECDTINCERYNGQVCGGPGRGLCFCGKCRCHPGFEGSACQA&quot;}binding_predictions = predictor.predict_subsequences(protein_sequences, peptide_lengths=[9])# flatten binding predictions into a Pandas DataFramedf = binding_predictions.to_dataframe()# epitope collection is sorted by percentile rank# of binding predictionsfor binding_prediction in binding_predictions:    if binding_prediction.affinity &lt; 100:        print(&quot;Strong binder: %s&quot; % (binding_prediction,))```## APIThe following MHC binding predictors are available in `mhctools`:* `MHCflurry`: open source predictor installed by default with `mhctools`, requires the user run `mhcflurry-downloads fetch` first to download MHCflurry models* `NetMHC3`: requires locally installed version of [NetMHC 3.x](http://www.cbs.dtu.dk/services/NetMHC-3.4/)* `NetMHC4`: requires locally installed version of [NetMHC 4.x](http://www.cbs.dtu.dk/services/NetMHC/)* `NetMHC`: a wrapper function to automatically use `NetMHC3` or `NetMHC4` depending on what's installed.* `NetMHCpan`: requires locally installed version of [NetMHCpan](http://www.cbs.dtu.dk/services/NetMHCpan/)* `NetMHCIIpan`: requires locally installed version of [NetMHCIIpan](http://www.cbs.dtu.dk/services/NetMHCIIpan/)* `NetMHCcons`: requires locally installed version of [NetMHCcons](http://www.cbs.dtu.dk/services/NetMHCcons/)* `IedbMhcClass1`: Uses IEDB's REST API for class I binding predictions.* `IedbMhcClass2`: Uses IEDB's REST API for class II binding predictions.* `RandomBindingPredictor`: Creates binding predictions with random IC50 and percentile rank values.Every binding predictor is constructed with an `alleles` argument specifying the HLA type for which to make predictions. Predictions are generated by calling the `predict` method with a dictionary mapping sequence IDs or names to amino acid sequences.Additionally there is a module for running the [NetChop](http://www.cbs.dtu.dk/services/NetChop)  proteosomal cleavage predictor:* `NetChop`: requires locally installed version of [NetChop-3.1](http://www.cbs.dtu.dk/services/NetChop/)</longdescription>
</pkgmetadata>