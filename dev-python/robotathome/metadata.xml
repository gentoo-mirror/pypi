<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Robot@Home2 Dataset Toolbox #[![PyPI](https://img.shields.io/pypi/v/robotathome)](https://pypi.org/project/robotathome/ &quot;R@H2 as PyPI package ready to install&quot;)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7811795.svg)](https://doi.org/10.5281/zenodo.7811795 &quot;The downloadable R@H2 dataset in Zenodo&quot;)[![DOI](https://zenodo.org/badge/245370645.svg)](https://doi.org/10.5281/zenodo.7812048 &quot;This repository released on Zenodo&quot;)[![Open In Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://drive.google.com/drive/folders/1ENnxbKP5MJdlGl2Q93WTbIlofuy6Icxq)The Robot-at-Home dataset (Robot@Home, paper[here](http://mapir.uma.es/papersrepo/2017/2017-raul-IJRR-Robot_at_home_dataset.pdf))is a collection of raw and processed data from five domestic settings compiledby a mobile robot equipped with 4 RGB-D cameras and a 2D laser scanner. Its mainpurpose is to serve as a testbed for semantic mapping algorithms through thecategorization of objects and/or rooms.Nevertheless, the Robot@Home dataset has been updated to **Robot@Home2**. Thisupdate is made up of a relational database file in SQLite format with all theoriginal data and a size of only 2,2 GB. The image and scene files have beenreorganized and now takes only 25,9 GB.The database, named `rh.db`, is a relational sql database accessible with theSQLite engine that usually accompanies the python environment and is popularlyused in the development of current applications in both fixed (linux andwindows) and mobile environments. (android).The data files have been organized into two main groups. On the one hand, thefiles with RGBD data (RGB images and depth images) and on the other the 3Dscenes in point cloud files.The intensity (RGB) and depth (D) image files have a standard *png* format sothey can be opened directly. In addition, the files are linked to the data inthe database through tables that relate them. Moreover, the database containstables that relate the files of the new version with those of the old version.  In the case of 3D scene files, these are plain text files that store thecoordinates and colors of the points that make up the 3D cloud. These files canbe easily visualized with current software for the visualization of pointclouds like [MeshLab](https://www.meshlab.net/).You no longer need to waste time diving the obscure data formats (despite an API-**dataset.py**- for that is provided). Instead, you can simply surf the datasetthrough SQL queries or the new toolbox.The toolbox (**toolbox.py**) has been coded for various purposes. The first oneconsists of encapsulating frequent queries as functions and integrating theresults with a data analysis library such as Pandas. Pandas library is widelyused in data science and machine learning disciplines in the Python framework.The second one is the integration of the data set with the GluonCV library toapply deep learning algorithms in artificial vision.## Prerequisites: Installing the Python Development EnvironmentLaunched in 1991, Python has achieved enormous popularity in the scientificcommunity in recent years. Python is an interpreted high-level general-purposeprogramming language with a many useful features. It's platform independent,simple, consistent and with a great code readability. Moreover, it has anextensive set of libraries that help to reduce development time.Artificial Intelligence (AI) and Machine Learning (ML) projects differ fromsoftware projects in other areas due to differences in the technology stack andthe skills needed to deal with them.Python offers AI and ML programmers many features that help to develop and testcomplex algorithms. Even in Computer Vision (CV), there are solid softwarelibraries that allow developers to focus on their research areas.There are several different Python distributions, each one created with adifferent approach and for different audiences.Robot@Home2 Toolbox is written in Python and works well with Anaconda which is adistribution of the Python and R programming languages for scientific computing.Of course, other distributions can be used to run the toolbox.### Short installation on LinuxTo install Anaconda in Linux you must follow these steps.Download the Anaconda installer```shell$ cd ~/Downloads$ wget https://repo.anaconda.com/archive/Anaconda3-2022.10-Linux-x86_64.sh```&gt; replace `~/Downloads` with the path of your choiceInstall the distribution```shell$ bash ~/Downloads/Anaconda3-2022.10-Linux-x86_64.sh```&gt; include the `bash` command regardless of whether or not you are using Bash shell.Review and agree the license agreement. Accept the default install location.When the installer prompts *“Do you wish the installer to initialize Anaconda3 by running conda init?”*, we recommend *“yes”*.Finally, for the installation to take effect```shell$ source ~/.bashrc```For more detailed/updated installation information, go to [Anaconda installation page](https://docs.anaconda.com/anaconda/install/).### Installation on WindowsDue to the graphic abundance of the installation procedure, we refer you tothe specific [Anaconda documentation page for installation on Windows](https://docs.anaconda.com/anaconda/install/windows/).### Verifying your installation on LinuxEnter the command `python`. This command runs the Python shell. If Anaconda isinstalled and working, the version information it displays when it starts upwill include `“Anaconda”`. To exit the Python shell, enter the `quit()` command.    $ python    Python 3.9.16 (main, Jan 11 2023, 16:05:54)     [GCC 11.2.0] :: Anaconda, Inc. on linux    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.    &gt;&gt;&gt; quit()You can also display a list of installed packages and their versions running `conda list`    $ conda list    # packages in environment at /home/user/anaconda3:    #    # Name                    Version                   Build  Channel    ...### Verifying in WindowsClick Start, search, or select **Anaconda Prompt** from the menu. After openingAnaconda Prompt on the terminal enter the command `python`. This command runsthe Python shell. If Anaconda is installed and working, the versioninformation it displays when it starts up will include `Anaconda` . To exitthe Python shell, enter the command `quit()`.As in Linux you can also display a list of installed packages and theirversions running `conda list`### Making a virtual environmentA virtual environment is a Python environment such that the Python interpreter,libraries and scripts installed into it are isolated from those installed inother virtual environmentsWhen a virtual environment is active, the installations tools install Pythonpackages into the virtual environment without needing to be told to do soexplicitly and without interfering in other virtual environments.That's the reason why it's recommended to work with a virtual environmentspecifically for Robot@Home2. To do that with conda```shell$ conda create --name rh python=3.9```&gt; change `rh` to a name of your choice&gt; Robot@Home2 runs with python 3.6 or higher. Also, version 3.6 is recommended for&gt; Windowsonce it has been created, it can already be activated```shell$ conda activate rh```to deactivate run```shell$ conda deactivate```### Literate programming with JupyterLiterate programming is a programming paradigm introduced by Donald Knuth inwhich a computer program is given an explanation of its logic in a naturallanguage, such as English, interspersed with snippets of macros and traditionalsource code. The approach is typically used in scientific computing and in datascience routinely for reproducible research and open access purposes.On the other hand, the **[Jupyter](https://jupyter.org) \*Notebook** is an open-source web application thatallows you to create and share documents that contain live code, equations,visualizations and narrative text. Additionally **JupyterLab** is a web-basedinteractive development environment for Jupyter notebooks, code, and data.Jupyter is an application of literate programming and Robot@Home2 includesJupyter notebooks for introductions, easy learning, and technical explanations.Installing Jupyter in Anaconda distribution is an easy task```shell$ conda install -c conda-forge jupyterlab```&gt; remember to previously activate your virtual environment with \`conda activate\` commandIf you have followed the previous sections you have the right workingenvironment to open [this notebook](https://github.com/goyoambrosio/RobotAtHome_API/blob/master/notebooks/10-Download-and-install.ipynb) with Jupyter to download and install both the toolbox and the dataset.However, if jupyter notebook is not your choice right now you can try thefollowing instructions.## Time to install Robot@Home2### Installing the toolboxRobot@Home2 Toolbox can be installed through the Python package manager.1.  Confirm you are in the right virtual environment    ```shell    $ conda activate rh    ```2.  Enter this command to install `robotathome` with [Jupyter](https://jupyter.org) to run notebooks.    ```shell    $ pip install robotathome    ```    &gt; `pip` is a common Python package manager that is included in Anaconda and many other distributions    If you have not previously installed `jupyterlab` you can do it right now adding    the `interactive` option to the `pip` command as follows:        ```shell    $ pip install robotathome[interactive]    ```    &gt; `interactive` will include jupyter and needed libraries.3.  Run `python` and import the `robotathome` library    ```    $ python    Python 3.10.9 (main, Jan 11 2023, 15:21:40) [GCC 11.2.0] on linux    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.    &gt;&gt;&gt; import robotathome as rh    &gt;&gt;&gt; print (rh.__version__)    1.1.1    ```4.  Congratulations ! the `robotathome` package has been installed successfully.### Downloading the datasetRobot@Home resides in Zenodo site where all data versions can be downloaded.Latest version ([v2.0.3](https://zenodo.org/record/7811795)) is composed of twofiles: `Robot@Home2_db.tgz` and `Robot@Home2_files.tgz`. The first one contains thedatabase, and the second one contains the bunch of RGBD images and 3D scenesYou can choose to download it on your own or through the new brand toolbox.In case you are considering Linux```shell$ wget https://zenodo.org/record/7811795/files/Robot@Home2_db.tgz$ wget https://zenodo.org/record/7811795/files/Robot@Home2_files.tgz```check the files integrity```shell$ md5sum Robot@Home2_db.tgz d34fb44c01f31c87be8ab14e5ecd0767  Robot@Home2_db.tgz$ md5sum Robot@Home2_files.tgz c55465536738ec3470c75e1671bab5f2  Robot@Home2_files.tgz```and to finish unzip files```shell$ pv /home/user/Downloads/Robot@Home2_db.tgz | tar -xzf - -C /home/user/WORKSPACE/$ pv /home/user/Downloads/Robot@Home2_files.tgz | tar -xzf - -C /home/user/WORKSPACE/files```or even better, now you can do the same programmatically using the toolbox```pythonimport robotathome as rh# Download filesrh.download('https://zenodo.org/record/7811795/files/Robot@Home2_db.tgz', '~/Downloads')rh.download('https://zenodo.org/record/7811795/files/Robot@Home2_files.tgz', '~/Downloads')# Compute md5 checksumsmd5_checksum_db = rh.get_md5('~/Downloads/Robot@Home2_db.tgz')md5_checksum_files = rh.get_md5('~/Downloads/Robot@Home2_files.tgz')# Check the files integrity and downloadif md5_checksum_db == 'd34fb44c01f31c87be8ab14e5ecd0767':    rh.uncompress('~/Downloads/Robot@Home2_db.tgz', '~/WORKSPACE')else:    print('Integrity of Robot@Home2_db.tgz is compromised, please download again')    if md5_checksum_files == 'c55465536738ec3470c75e1671bab5f2':    rh.uncompress('~/Downloads/Robot@Home2_files.tgz', '~/WORKSPACE/files')else:    print('Integrity of Robot@Home2_files.tgz is compromised, please download again')```</longdescription>
</pkgmetadata>