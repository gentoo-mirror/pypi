<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![screenshot-light](https://github.com/unfoldadmin/django-unfold/assets/10785882/291e69c9-abdd-4f7e-a0d6-2af210a9013a#gh-light-mode-only)](https://github.com/unfoldadmin/django-unfold/assets/10785882/291e69c9-abdd-4f7e-a0d6-2af210a9013a#gh-light-mode-only)[![screenshot-dark](https://github.com/unfoldadmin/django-unfold/assets/10785882/94a2e90f-924a-4aaf-b6d9-cb1592000c55#gh-dark-mode-only)](https://github.com/unfoldadmin/django-unfold/assets/10785882/94a2e90f-924a-4aaf-b6d9-cb1592000c55#gh-dark-mode-only)## Unfold Django Admin Theme &lt;!-- omit from toc --&gt;[![Build](https://img.shields.io/github/actions/workflow/status/unfoldadmin/django-unfold/release.yml?style=for-the-badge)](https://github.com/unfoldadmin/django-unfold/actions?query=workflow%3Arelease)[![PyPI - Version](https://img.shields.io/pypi/v/django-unfold.svg?style=for-the-badge)](https://pypi.org/project/django-unfold/)![Code Style - Black](https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge)![Pre Commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white&amp;style=for-the-badge)Unfold is theme for Django admin incorporating most common practises for building full-fledged admin areas. It is designed to work at the top of default administration provided by Django.- **Unfold:** demo site is available at [unfoldadmin.com](https://unfoldadmin.com)- **Formula:** repository with demo implementation at [github.com/unfoldadmin/formula](https://github.com/unfoldadmin/formula)- **Turbo:** Django &amp; Next.js boilerplate implementing Unfold at [github.com/unfoldadmin/turbo](https://github.com/unfoldadmin/turbo)## Features &lt;!-- omit from toc --&gt;- **Visual**: provides new user interface based on Tailwind CSS framework- **Sidebar:** simplifies definition of custom sidebar navigation with icons- **Dark mode:** supports both light and dark mode versions- **Configuration:** most of the basic options can be changed in settings.py- **Dependencies:** completely based only on `django.contrib.admin`- **Actions:** multiple ways how to define actions within different parts of admin- **WYSIWYG:** built-in support for WYSIWYG (Trix)- **Custom filters:** widgets for filtering number &amp; datetime values- **Dashboard:** custom components for rapid dashboard development- **Tabs:** define custom tab navigations for models- **Colors:** possibility to override default color scheme- **Third party packages:** default support for multiple popular applications- **Environment label**: distinguish between environments by displaying a label## Table of contents &lt;!-- omit from toc --&gt;- [Installation](#installation)- [Configuration](#configuration)  - [Available settings.py options](#available-settingspy-options)  - [Available unfold.admin.ModelAdmin options](#available-unfoldadminmodeladmin-options)- [Actions](#actions)  - [Actions overview](#actions-overview)  - [Custom unfold @action decorator](#custom-unfold-action-decorator)  - [Action handler functions](#action-handler-functions)  - [Action examples](#action-examples)- [Filters](#filters)  - [Numeric filters](#numeric-filters)  - [Date/time filters](#datetime-filters)- [Display decorator](#display-decorator)- [Third party packages](#third-party-packages)  - [django-celery-beat](#django-celery-beat)  - [django-guardian](#django-guardian)  - [django-import-export](#django-import-export)  - [django-modeltranslation](#django-modeltranslation)  - [django-money](#django-money)  - [django-simple-history](#django-simple-history)- [User Admin Form](#user-admin-form)- [Adding custom styles and scripts](#adding-custom-styles-and-scripts)- [Project level Tailwind stylesheet](#project-level-tailwind-stylesheet)- [Admin dashboard](#admin-dashboard)  - [Overriding template](#overriding-template)  - [Custom variables](#custom-variables)  - [Unfold components](#unfold-components)- [Unfold development](#unfold-development)  - [Pre-commit](#pre-commit)  - [Poetry configuration](#poetry-configuration)  - [Compiling Tailwind](#compiling-tailwind)- [Credits](#credits)## InstallationThe installation process is minimal. Everything what is needed after installation is to put new application at the beginning of **INSTALLED_APPS**. Default admin configuration in urls.py can stay as it is and there are no changes required.```python# settings.pyINSTALLED_APPS = [    &quot;unfold&quot;,  # before django.contrib.admin    &quot;unfold.contrib.filters&quot;,  # optional, if special filters are needed    &quot;unfold.contrib.forms&quot;,  # optional, if special form elements are needed    &quot;unfold.contrib.import_export&quot;,  # optional, if django-import-export package is used    &quot;unfold.contrib.guardian&quot;,  # optional, if django-guardian package is used    &quot;unfold.contrib.simple_history&quot;,  # optional, if django-simple-history package is used    &quot;django.contrib.admin&quot;,  # required]```In case you need installation command below are the versions for `pip` and `poetry` which needs to be executed in shell.```bashpip install django-unfoldpoetry add django-unfold```Just for an example below is the minimal admin configuration in terms of adding Unfold into URL paths.```python# urls.pyfrom django.contrib import adminfrom django.urls import pathurlpatterns = [    path(&quot;admin/&quot;, admin.site.urls),    # Other URL paths]```After installation, it is required that admin classes are going to inherit from custom `ModelAdmin` available in `unfold.admin`.```python# admin.pyfrom django.contrib import adminfrom unfold.admin import ModelAdmin@admin.register(MyModel)class CustomAdminClass(ModelAdmin):    pass```**Note:** Registered admin models coming from third party packages are not going to properly work with Unfold because of parent class. By default, these models are registered by using `django.contrib.admin.ModelAdmin` but it is needed to use `unfold.admin.ModelAdmin`. Solution for this problem is to unregister model and then again register it back by using `unfold.admin.ModelAdmin`.```python# admin.pyfrom django.contrib import adminfrom django.contrib.auth.admin import UserAdmin as BaseUserAdminfrom django.contrib.auth.models import Userfrom unfold.admin import ModelAdminadmin.site.unregister(User)@admin.register(User)class UserAdmin(BaseUserAdmin, ModelAdmin):    pass```## Configuration### Available settings.py options```python# settings.pyfrom django.templatetags.static import staticfrom django.urls import reverse_lazyfrom django.utils.translation import gettext_lazy as _UNFOLD = {    &quot;SITE_TITLE&quot;: None,    &quot;SITE_HEADER&quot;: None,    &quot;SITE_URL&quot;: &quot;/&quot;,    # &quot;SITE_ICON&quot;: lambda request: static(&quot;icon.svg&quot;),  # both modes, optimise for 32px height    &quot;SITE_ICON&quot;: {        &quot;light&quot;: lambda request: static(&quot;icon-light.svg&quot;),  # light mode        &quot;dark&quot;: lambda request: static(&quot;icon-dark.svg&quot;),  # dark mode    },    # &quot;SITE_LOGO&quot;: lambda request: static(&quot;logo.svg&quot;),  # both modes, optimise for 32px height    &quot;SITE_LOGO&quot;: {        &quot;light&quot;: lambda request: static(&quot;logo-light.svg&quot;),  # light mode        &quot;dark&quot;: lambda request: static(&quot;logo-dark.svg&quot;),  # dark mode    },    &quot;SITE_SYMBOL&quot;: &quot;speed&quot;,  # symbol from icon set    &quot;SHOW_HISTORY&quot;: True, # show/hide &quot;History&quot; button, default: True    &quot;SHOW_VIEW_ON_SITE&quot;: True, # show/hide &quot;View on site&quot; button, default: True    &quot;ENVIRONMENT&quot;: &quot;sample_app.environment_callback&quot;,    &quot;DASHBOARD_CALLBACK&quot;: &quot;sample_app.dashboard_callback&quot;,    &quot;LOGIN&quot;: {        &quot;image&quot;: lambda request: static(&quot;sample/login-bg.jpg&quot;),        &quot;redirect_after&quot;: lambda request: reverse_lazy(&quot;admin:APP_MODEL_changelist&quot;),    },    &quot;STYLES&quot;: [        lambda request: static(&quot;css/style.css&quot;),    ],    &quot;SCRIPTS&quot;: [        lambda request: static(&quot;js/script.js&quot;),    ],    &quot;COLORS&quot;: {        &quot;primary&quot;: {            &quot;50&quot;: &quot;250 245 255&quot;,            &quot;100&quot;: &quot;243 232 255&quot;,            &quot;200&quot;: &quot;233 213 255&quot;,            &quot;300&quot;: &quot;216 180 254&quot;,            &quot;400&quot;: &quot;192 132 252&quot;,            &quot;500&quot;: &quot;168 85 247&quot;,            &quot;600&quot;: &quot;147 51 234&quot;,            &quot;700&quot;: &quot;126 34 206&quot;,            &quot;800&quot;: &quot;107 33 168&quot;,            &quot;900&quot;: &quot;88 28 135&quot;,            &quot;950&quot;: &quot;59 7 100&quot;,        },    },    &quot;EXTENSIONS&quot;: {        &quot;modeltranslation&quot;: {            &quot;flags&quot;: {                &quot;en&quot;: &quot;ðŸ‡¬ðŸ‡§&quot;,                &quot;fr&quot;: &quot;ðŸ‡«ðŸ‡·&quot;,                &quot;nl&quot;: &quot;ðŸ‡§ðŸ‡ª&quot;,            },        },    },    &quot;SIDEBAR&quot;: {        &quot;show_search&quot;: False,  # Search in applications and models names        &quot;show_all_applications&quot;: False,  # Dropdown with all applications and models        &quot;navigation&quot;: [            {                &quot;title&quot;: _(&quot;Navigation&quot;),                &quot;separator&quot;: True,  # Top border                &quot;items&quot;: [                    {                        &quot;title&quot;: _(&quot;Dashboard&quot;),                        &quot;icon&quot;: &quot;dashboard&quot;,  # Supported icon set: https://fonts.google.com/icons                        &quot;link&quot;: reverse_lazy(&quot;admin:index&quot;),                        &quot;badge&quot;: &quot;sample_app.badge_callback&quot;,                        &quot;permission&quot;: lambda request: request.user.is_superuser,                    },                    {                        &quot;title&quot;: _(&quot;Users&quot;),                        &quot;icon&quot;: &quot;people&quot;,                        &quot;link&quot;: reverse_lazy(&quot;admin:users_user_changelist&quot;),                    },                ],            },        ],    },    &quot;TABS&quot;: [        {            &quot;models&quot;: [                &quot;app_label.model_name_in_lowercase&quot;,            ],            &quot;items&quot;: [                {                    &quot;title&quot;: _(&quot;Your custom title&quot;),                    &quot;link&quot;: reverse_lazy(&quot;admin:app_label_model_name_changelist&quot;),                    &quot;permission&quot;: &quot;sample_app.permission_callback&quot;,                },            ],        },    ],}def dashboard_callback(request, context):    &quot;&quot;&quot;    Callback to prepare custom variables for index template which is used as dashboard    template. It can be overridden in application by creating custom admin/index.html.    &quot;&quot;&quot;    context.update(        {            &quot;sample&quot;: &quot;example&quot;,  # this will be injected into templates/admin/index.html        }    )    return contextdef environment_callback(request):    &quot;&quot;&quot;    Callback has to return a list of two values represeting text value and the color    type of the label displayed in top right corner.    &quot;&quot;&quot;    return [&quot;Production&quot;, &quot;danger&quot;] # info, danger, warning, successdef badge_callback(request):    return 3def permission_callback(request):    return request.user.has_perm(&quot;sample_app.change_model&quot;)```### Available unfold.admin.ModelAdmin options```python# admin.pyfrom django import modelsfrom django.contrib import adminfrom django.db import modelsfrom unfold.admin import ModelAdminfrom unfold.contrib.forms.widgets import WysiwygWidget@admin.register(MyModel)class CustomAdminClass(ModelAdmin):    # Preprocess content of readonly fields before render    readonly_preprocess_fields = {        &quot;model_field_name&quot;: &quot;html.unescape&quot;,        &quot;other_field_name&quot;: lambda content: content.strip(),    }    # Display submit button in filters    list_filter_submit = False    # Custom actions    actions_list = []  # Displayed above the results list    actions_row = []  # Displayed in a table row in results list    actions_detail = []  # Displayed at the top of for in object detail    actions_submit_line = []  # Displayed near save in object detail    formfield_overrides = {        models.TextField: {            &quot;widget&quot;: WysiwygWidget,        }    }```## ActionsIt is highly recommended to read the base [Django actions documentation](https://docs.djangoproject.com/en/4.2/ref/contrib/admin/actions/) before reading this section, since Unfold actions are derived from Django actions.### Actions overviewBesides traditional actions selected from dropdown, Unfold supports several other types of actions. Following tablegives overview of all available actions together with their recommended usage:| Type of action | Appearance                               | Usage                                                                                      | Examples of usage                      || -------------- | ---------------------------------------- | ------------------------------------------------------------------------------------------ | -------------------------------------- || Default        | List view - top of listing (in dropdown) | Actions, where you want to select specific subset of instances to perform this action upon | Bulk deleting, bulk activation         || Global         | List view - top of listing (as buttons)  | General actions for model, without selecting specific instances                            | Import, export                         || Row            | List view - in each row                  | Action for one specific instance, executable from listing                                  | Activation, sync with external service || Detail         | Detail view - top of detail              | Action for one specific instance, executable from detail                                   | Activation, sync with external service || Submit line    | Detail view - near submit button         | Action performed during form submit (instance save)                                        | Publishing article together with save  |### Custom unfold @action decoratorUnfold also uses custom `@action` decorator, supporting 2 more parameters in comparison to base `@action` decorator:- `url_path`: Action path name, used to override the path under which the action will be available  (if not provided, URL path will be generated by Unfold)- `attrs`: Dictionary of the additional attributes added to the `&lt;a&gt;` element, used for e.g. opening action in new tab (`{&quot;target&quot;: &quot;_blank&quot;}`)### Action handler functionsThis section provides explanation of how the action handler functions should be constructed for Unfold actions.For default actions, follow official Django admin documentation.#### For submit row action &lt;!-- omit from toc --&gt;Submit row actions work a bit differently when compared to other custom Unfold actions.These actions first invoke form save (same as if you hit `Save` button) and then lets youperform additional logic on already saved instance.#### For global, row and detail action &lt;!-- omit from toc --&gt;All these actions are based on custom URLs generated for each of them. Handler function for these views isbasically function based view.For actions without intermediate steps, you can write all the logic inside handler directly. Request and object IDare both passed to these action handler functions, so you are free to fetch the instance from database and perform anyoperations with it. In the end, it is recommended to return redirect back to either detail or listing, based on wherethe action was triggered from.For actions with intermediate steps, it is recommended to use handler function only to redirect to custom URL with customview. This view can be extended from base Unfold view, to have unified experience.If that's confusing, there are examples for both these actions in next section.### Action examples```python# admin.pyfrom django.db.models import Modelfrom django.contrib.admin import registerfrom django.shortcuts import redirectfrom django.urls import reverse_lazyfrom django.utils.translation import gettext_lazy as _from django.http import HttpRequestfrom unfold.admin import ModelAdminfrom unfold.decorators import actionclass User(Model):    pass@register(User)class UserAdmin(ModelAdmin):    actions_list = [&quot;changelist_global_action_import&quot;]    actions_row = [&quot;changelist_row_action_view_on_website&quot;]    actions_detail = [&quot;change_detail_action_block&quot;]    actions_submit_line = [&quot;submit_line_action_activate&quot;]    @action(description=_(&quot;Save &amp; Activate&quot;))    def submit_line_action_activate(self, request: HttpRequest, obj: User):        &quot;&quot;&quot;        If instance is modified in any way, it also needs to be saved,        since this handler is invoked after instance is saved.        :param request:        :param obj: Model instance that was manipulated, with changes already saved to database        :return: None, this handler should not return anything        &quot;&quot;&quot;        obj.is_active = True        obj.save()    @action(description=_(&quot;Import&quot;), url_path=&quot;import&quot;)    def changelist_global_action_import(self, request: HttpRequest):        &quot;&quot;&quot;        Handler for global actions does not receive any queryset or object ids, because it is        meant to be used for general actions for given model.        :param request:        :return: View, as described in section above        &quot;&quot;&quot;        # This is example of action redirecting to custom page, where the action will be handled        # (with intermediate steps)        return redirect(          reverse_lazy(&quot;view-where-import-will-be-handled&quot;)        )    @action(description=_(&quot;Row&quot;), url_path=&quot;row-action&quot;, attrs={&quot;target&quot;: &quot;_blank&quot;})    def changelist_row_action_view_on_website(self, request: HttpRequest, object_id: int):        &quot;&quot;&quot;        Handler for list row action.        :param request:        :param object_id: ID of instance that this action was invoked for        :return: View, as described in section above        &quot;&quot;&quot;        return redirect(f&quot;https://example.com/{object_id}&quot;)    @action(description=_(&quot;Detail&quot;), url_path=&quot;detail-action&quot;, attrs={&quot;target&quot;: &quot;_blank&quot;})    def change_detail_action_block(self, request: HttpRequest, object_id: int):        &quot;&quot;&quot;        Handler for detail action.        :param request:        :param object_id: ID of instance that this action was invoked for        :return: View, as described in section above        &quot;&quot;&quot;        # This is example of action that handled whole logic inside handler        # function and redirects back to object detail        user = User.objects.get(pk=object_id)        user.block()        return redirect(            reverse_lazy(&quot;admin:users_user_change&quot;, args=(object_id,))        )```## FiltersBy default, Django admin handles all filters as regular HTML links pointing at the same URL with different query parameters. This approach is for basic filtering more than enough. In the case of more advanced filtering by incorporating input fields, it is not going to work.**Note:** when implementing a filter which contains input fields, there is a no way that user can submit the values, because default filters does not contain submit button. To implement submit button, `unfold.admin.ModelAdmin` contains boolean `list_filter_submit` flag which enables submit button in filter form.### Numeric filtersCurrently, Unfold implements numeric filters inside `unfold.contrib.filters` application. In order to use these filters, it is required to add this application into `INSTALLED_APPS` in `settings.py` right after `unfold` application.```python# admin.pyfrom django.contrib import adminfrom django.contrib.auth.models import Userfrom unfold.admin import ModelAdminfrom unfold.contrib.filters.admin import (    RangeNumericListFilter,    RangeNumericFilter,    SingleNumericFilter,    SliderNumericFilter,)class CustomSliderNumericFilter(SliderNumericFilter):    MAX_DECIMALS = 2    STEP = 10class CustomRangeNumericListFilter(RangeNumericListFilter):    parameter_name = &quot;items_count&quot;    title = &quot;items&quot;@admin.register(User)class YourModelAdmin(ModelAdmin):    list_filter_submit = True  # Submit button at the bottom of the filter    list_filter = (        (&quot;field_A&quot;, SingleNumericFilter),  # Numeric single field search, __gte lookup        (&quot;field_B&quot;, RangeNumericFilter),  # Numeric range search, __gte and __lte lookup        (&quot;field_C&quot;, SliderNumericFilter),  # Numeric range filter but with slider        (&quot;field_D&quot;, CustomSliderNumericFilter),  # Numeric filter with custom attributes        CustomRangeNumericListFilter,  # Numeric range search not restricted to a model field    )    def get_queryset(self, request):        return super().get_queryset().annotate(items_count=Count(&quot;item&quot;, distinct=True))```### Date/time filters```python# admin.pyfrom django.contrib import adminfrom django.contrib.auth.models import Userfrom unfold.admin import ModelAdminfrom unfold.contrib.filters.admin import (    RangeDateFilter,    RangeDateTimeFilter,)@admin.register(User)class YourModelAdmin(ModelAdmin):    list_filter_submit = True  # Submit button at the bottom of the filter    list_filter = (        (&quot;field_E&quot;, RangeDateFilter),  # Date filter        (&quot;field_F&quot;, RangeDateTimeFilter),  # Datetime filter    )```## Display decoratorUnfold introduces it's own `unfold.decorators.display` decorator. By default it has exactly same behavior as native `django.contrib.admin.decorators.display` but it adds same customizations which helps to extends default logic.`@display(label=True)`, `@display(label={&quot;value1&quot;: &quot;success&quot;})` displays a result as a label. This option fits for different types of statuses. Label can be either boolean indicating we want to use label with default color or dict where the dict is responsible for displaying labels in different colors. At the moment these color combinations are supported: success(green), info(blue), danger(red) and warning(orange).`@display(header=True)` displays in results list two information in one table cell. Good example is when we want to display customer information, first line is going to be customer's name and right below the name display corresponding email address. Method with such a decorator is supposed to return a list with two elements `return &quot;Full name&quot;, &quot;E-mail address&quot;`. There is a third optional argument, which is type of the string and its value is displayed in a circle before first two values on the front end. Its optimal usage is for displaying initials.```python# admin.pyfrom django.db.models import TextChoicesfrom django.utils.translation import gettext_lazy as _from unfold.admin import ModelAdminfrom unfold.decorators import displayclass UserStatus(TextChoices):    ACTIVE = &quot;ACTIVE&quot;, _(&quot;Active&quot;)    PENDING = &quot;PENDING&quot;, _(&quot;Pending&quot;)    INACTIVE = &quot;INACTIVE&quot;, _(&quot;Inactive&quot;)    CANCELLED = &quot;CANCELLED&quot;, _(&quot;Cancelled&quot;)class UserAdmin(ModelAdmin):    list_display = [        &quot;display_as_two_line_heading&quot;,        &quot;show_status&quot;,        &quot;show_status_with_custom_label&quot;,    ]    @display(        description=_(&quot;Status&quot;),        ordering=&quot;status&quot;,        label=True    )    def show_status_default_color(self, obj):        return obj.status    @display(        description=_(&quot;Status&quot;),        ordering=&quot;status&quot;,        label={            UserStatus.ACTIVE: &quot;success&quot;,  # green            UserStatus.PENDING: &quot;info&quot;,  # blue            UserStatus.INACTIVE: &quot;warning&quot;,  # orange            UserStatus.CANCELLED: &quot;danger&quot;,  # red        },    )    def show_status_customized_color(self, obj):        return obj.status    @display(description=_(&quot;Status with label&quot;), ordering=&quot;status&quot;, label=True)    def show_status_with_custom_label(self, obj):        return obj.status, obj.get_status_display()    @display(header=True)    def display_as_two_line_heading(self, obj):        &quot;&quot;&quot;        Third argument is short text which will appear as prefix in circle        &quot;&quot;&quot;        return &quot;First main heading&quot;, &quot;Smaller additional description&quot;, &quot;AB&quot;```## Third party packages### django-celery-beatIn general, django-celery-beat does not have any components that require special styling. The default changelist templates are not inheriting from Unfold's `ModelAdmin` but they are using default `ModelAdmin` coming from `django.contrib.admin` which is causing some design discrepancies in the changelist.In the source code below you can find a short code snippet to unregister all `django-celery-beat` admin classes and register them with the proper parent `ModelAdmin` class.```python# admin.pyfrom django.contrib import adminfrom unfold.admin import ModelAdminfrom django_celery_beat.models import (    ClockedSchedule,    CrontabSchedule,    IntervalSchedule,    PeriodicTask,    SolarSchedule,)admin.site.unregister(PeriodicTask)admin.site.unregister(IntervalSchedule)admin.site.unregister(CrontabSchedule)admin.site.unregister(SolarSchedule)admin.site.unregister(ClockedSchedule)@admin.register(PeriodicTask)class PeriodicTaskAdmin(ModelAdmin):    pass@admin.register(IntervalSchedule)class IntervalScheduleAdmin(ModelAdmin):    pass@admin.register(CrontabSchedule)class CrontabScheduleAdmin(ModelAdmin):    pass@admin.register(SolarSchedule)class SolarScheduleAdmin(ModelAdmin):    pass```### django-guardianAdding support for django-guardian is quote straightforward in Unfold, just add `unfold.contrib.guardian` to `INSTALLED_APPS` at the beggining of the file. This action will override all templates coming from the django-guardian. Please note that **Object permissions** link is available in top right dropdown navigation.### django-import-export1. Add `unfold.contrib.import_export` to `INSTALLED_APPS` at the beggining of the file. This action will override all templates coming from the application.2. Change `import_form_class` and `export_form_class` in ModelAdmin which is inheriting from `ImportExportModelAdmin`. This chunk of code is responsible for adding proper styling to form elements.```python# admin.pyfrom unfold.admin import ModelAdminfrom unfold.contrib.import_export.forms import ExportForm, ImportFormclass ExampleAdmin(ModelAdmin, ImportExportModelAdmin):    import_form_class = ImportForm    export_form_class = ExportForm```### django-modeltranslationBy default Unfold does not contain any specific implementation for django-modeltranslation and the application is partially supported. Basic behavior is supported except of tab navigation provided by django-modeltranslation. At the moment there are no plans in supporting this behavior.For django-modeltranslation fields for spefic languages, it is possible to define custom flags which will appear as a suffix in field's label. It is recommended to use emojis as suffix.```python# settings.pyUNFOLD = {    &quot;EXTENSIONS&quot;: {        &quot;modeltranslation&quot;: {            &quot;flags&quot;: {                &quot;en&quot;: &quot;ðŸ‡¬ðŸ‡§&quot;,                &quot;fr&quot;: &quot;ðŸ‡«ðŸ‡·&quot;,                &quot;nl&quot;: &quot;ðŸ‡§ðŸ‡ª&quot;,            },        },    },}```### django-moneyThis application is supported in Unfold by default. It is not needed to add any other applications into `INSTALLED_APPS`. Unfold is recognizing special form widget coming from django-money and applying specific styling.### django-simple-historyTo make this application work, add `unfold.contrib.simple_history` into `settings.py` in `INSTALLED_APPS` variable before right after `unfold`. This app should ensure that templates coming from django-simple-history are overriden by Unfold.## User Admin FormUser's admin in Django is specific as it contains several forms which are requiring custom styling. All of these forms has been inherited and accordingly adjusted. In user admin class it is needed to use these inherited form classes to enable custom styling matching rest of the website.```python# models.pyfrom django.contrib.admin import registerfrom django.contrib.auth.models import Userfrom django.contrib.auth.admin import UserAdmin as BaseUserAdminfrom unfold.admin import ModelAdminfrom unfold.forms import AdminPasswordChangeForm, UserChangeForm, UserCreationForm@register(User)class UserAdmin(BaseUserAdmin, ModelAdmin):    form = UserChangeForm    add_form = UserCreationForm    change_password_form = AdminPasswordChangeForm```## Adding custom styles and scriptsTo add new custom styles, for example for custom dashboard, it is possible to load them via **STYLES** key in **UNFOLD** dict. This key accepts a list of strings or lambda functions which will be loaded on all pages. JavaScript files can be loaded by using similar apprach, but **SCRIPTS** is used.```python# settings.pyfrom django.templatetags.static import staticUNFOLD = {    &quot;STYLES&quot;: [        lambda request: static(&quot;css/style.css&quot;),    ],    &quot;SCRIPTS&quot;: [        lambda request: static(&quot;js/script.js&quot;),    ],}```## Project level Tailwind stylesheetWhen creating custom dashboard or adding custom components, it is needed to add own styles. Adding custom styles is described above. Most of the time, it is supposed that new elements are going to match with the rest of the administration panel. First of all, create tailwind.config.js in your application. Below is located minimal configuration for this file.```javascript// tailwind.config.jsmodule.exports = {  content: [&quot;./your_project/**/*.{html,py,js}&quot;],  // In case custom colors are defined in UNFOLD[&quot;COLORS&quot;]  colors: {    primary: {      50: &quot;rgb(var(--color-primary-50) / &lt;alpha-value&gt;)&quot;,      100: &quot;rgb(var(--color-primary-100) / &lt;alpha-value&gt;)&quot;,      200: &quot;rgb(var(--color-primary-200) / &lt;alpha-value&gt;)&quot;,      300: &quot;rgb(var(--color-primary-300) / &lt;alpha-value&gt;)&quot;,      400: &quot;rgb(var(--color-primary-400) / &lt;alpha-value&gt;)&quot;,      500: &quot;rgb(var(--color-primary-500) / &lt;alpha-value&gt;)&quot;,      600: &quot;rgb(var(--color-primary-600) / &lt;alpha-value&gt;)&quot;,      700: &quot;rgb(var(--color-primary-700) / &lt;alpha-value&gt;)&quot;,      800: &quot;rgb(var(--color-primary-800) / &lt;alpha-value&gt;)&quot;,      900: &quot;rgb(var(--color-primary-900) / &lt;alpha-value&gt;)&quot;,      950: &quot;rgb(var(--color-primary-950) / &lt;alpha-value&gt;)&quot;,    },  },};```Once the configuration file is set, it is possible to compile new styles which can be loaded into admin by using **STYLES** key in **UNFOLD** dict.```bashnpx tailwindcss -o your_project/static/css/styles.css --watch --minify```## Admin dashboard### Overriding templateCreate `templates/admin/index.html` in your project and paste the base template below into it. By default, all your custom styles here are not compiled because CSS classes are located in your specific project. Here it is needed to set up the Tailwind for your project and all requried instructions are located in [Project Level Tailwind Stylesheet](#project-level-tailwind-stylesheet) chapter.```html+django{% extends 'unfold/layouts/base_simple.html' %}{% load cache humanize i18n %}{% block breadcrumbs %}{% endblock %}{% block title %}    {% if subtitle %}        {{ subtitle }} |    {% endif %}    {{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}{% block branding %}    &lt;h1 id=&quot;site-name&quot;&gt;        &lt;a href=&quot;{% url 'admin:index' %}&quot;&gt;            {{ site_header|default:_('Django administration') }}        &lt;/a&gt;    &lt;/h1&gt;{% endblock %}{% block content %}    Start creating your own Tailwind components here{% endblock %}```### Custom variablesWhen you are building a new dashboard, you need to display some data mostly coming from the database. To pass these data to the dashboard template, Unfold contains a special `DASHBOARD_CALLBACK` parameter which allows passing a dictionary of variables to `templates/admin/index.html` template.```python# views.pydef dashboard_callback(request, context):    context.update({        &quot;custom_variable&quot;: &quot;value&quot;,    })    return context``````python# settings.pyUNFOLD = {    &quot;DASHBOARD_CALLBACK&quot;: &quot;app.views.dashboard_callback&quot;,}```### Unfold componentsUnfold provides a set of already predefined templates to speed up overall dashboard development. These templates contain predefined design which matches global design style so there is no need to spend any time adjusting styles.The biggest benefit of Unfold components is the possibility to nest them inside one template file provides an unlimited amount of possible combinations. Then each component includes `children` variable which contains a value specified in the parent component. Except for `children` variable, components can have multiple variables coming from the parent template as component variables. These parameters can be specified in the same as parameters when using `{% include with param1=value1 param2=value2 %}` template tag.```html+django{% compontent &quot;unfold/components/flex.html&quot; with col=1 %}    {% component &quot;unfold/components/card.html&quot; %}        {% compontent &quot;unfold/components/title.html&quot; %}            Card Title        {% endcomponent %}    {% endcomponent %}{% endcompontent %}```Below you can find a more complex example which is using multiple components and processing them based on the passed variables from the `DASHBOARD_CALLBACK`.```html+django{% load i18n %}{% block content %}    {% component &quot;unfold/components/container.html&quot; %}        {% component &quot;unfold/components/flex.html&quot; with class=&quot;gap-4&quot;%}            {% component &quot;unfold/components/navigation.html&quot; with items=navigation %}            {% endcomponent %}            {% component &quot;unfold/components/navigation.html&quot; with class=&quot;ml-auto&quot; items=filters %}            {% endcomponent %}        {% endcomponent %}        {% component &quot;unfold/components/flex.html&quot; with class=&quot;gap-8 mb-8 flex-col lg:flex-row&quot; %}            {% for card in cards %}                {% trans &quot;Last 7 days&quot; as label %}                {% component &quot;unfold/components/card.html&quot; with class=&quot;lg:w-1/3&quot; %}                    {% component &quot;unfold/components/text.html&quot; %}                        {{ card.title }}                    {% endcomponent %}                    {% component &quot;unfold/components/title.html&quot; %}                        {{ card.metric }}                    {% endcomponent %}                {% endcomponent %}            {% endfor %}        {% endcomponent %}    {% endcomponent %}{% endblock %}```#### List of available components &lt;!-- omit from toc --&gt;| Component                         | Description                    | Arguments                        || --------------------------------- | ------------------------------ | -------------------------------- || unfold/components/chart/bar.html  | Bar chart implementation       | class, data, height, width       || unfold/components/chart/line.html | Line chart implementation      | class, data, height, width       || unfold/components/card.html       | Card component                 | class, title, footer, label      || unfold/components/container.html  | Wrapper for settings max width | class                            || unfold/components/flex.html       | Flex items                     | class, col                       || unfold/components/navigation.html | List of navigation links       | class, items                     || unfold/components/progress.html   | Percentual progress bar        | class, value, title, description || unfold/components/separator.html  | Separator, horizontal rule     | class                            || unfold/components/text.html       | Paragraph of text              | class                            || unfold/components/title.html      | Basic heading element          | class                            |## Unfold development### Pre-commitBefore adding any source code, it is recommended to have pre-commit installed on your local computer to check for all potential issues when comitting the code.```bashpip install pre-commitpre-commit installpre-commit install --hook-type commit-msg```### Poetry configurationTo add a new feature or fix the easiest approach is to use django-unfold in combination with Poetry. The process looks like:- Install django-unfold via `poetry add django-unfold`- After that it is needed to git clone the repository somewhere on local computer.- Edit _pyproject.toml_ and update django-unfold line `django-unfold = { path = &quot;../django-unfold&quot;, develop = true}`- Lock and update via `poetry lock &amp;&amp; poetry update`### Compiling TailwindAt the moment project contains package.json with all dependencies required to compile new CSS file. Tailwind configuration file is set to check all html, js and py files for Tailwind's classeses occurrences.```bashnpm installnpx tailwindcss -i src/unfold/styles.css -o src/unfold/static/unfold/css/styles.css --watch --minifynpm run tailwind:watch # run after each change in codenpm run tailwind:build # run once```Some components like datepickers, calendars or selectors in admin was not possible to style by overriding html templates so their default styles are overriden in **styles.css**.**Note:** most of the custom styles located in style.css are created via `@apply some-tailwind-class;` as is not possible to manually add CSS class to element which are for example created via jQuery.## Credits- [TailwindCSS](https://tailwindcss.com/) - CSS framework- [HTMX](https://htmx.org/) - AJAX communication with backend- [Material Icons](https://fonts.google.com/icons) - Icons from Google Fonts- [Trix](https://trix-editor.org/) - WYSIWYG editor- [Alpine.js](https://alpinejs.dev/) - JavaScript interactions</longdescription>
</pkgmetadata>