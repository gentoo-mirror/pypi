<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/voicemeeter-api.svg)](https://badge.fury.io/py/voicemeeter-api)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/onyx-and-iris/voicemeeter-api-python/blob/dev/LICENSE)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)![Tests Status](./tests/basic.svg?dummy=8484744)![Tests Status](./tests/banana.svg?dummy=8484744)![Tests Status](./tests/potato.svg?dummy=8484744)# Python Wrapper for Voicemeeter APIThis package offers a Python interface for the Voicemeeter Remote C API.For an outline of past/future changes refer to: [CHANGELOG](CHANGELOG.md)## Tested against-   Basic 1.0.8.8-   Banana 2.0.6.8-   Potato 3.0.2.8## Requirements-   [Voicemeeter](https://voicemeeter.com/)-   Python 3.10 or greater## Installation`pip install voicemeeter-api`## `Use`Simplest use case, use a context manager to request a Remote class of a kind.Login and logout are handled for you in this scenario.#### `__main__.py````pythonimport voicemeeterlibclass ManyThings:    def __init__(self, vm):        self.vm = vm    def things(self):        self.vm.strip[0].label = &quot;podmic&quot;        self.vm.strip[0].mute = True        print(            f&quot;strip 0 ({self.vm.strip[0].label}) mute has been set to {self.vm.strip[0].mute}&quot;        )    def other_things(self):        self.vm.bus[3].gain = -6.3        self.vm.bus[4].eq.on = True        info = (            f&quot;bus 3 gain has been set to {self.vm.bus[3].gain}&quot;,            f&quot;bus 4 eq has been set to {self.vm.bus[4].eq.on}&quot;,        )        print(&quot;\n&quot;.join(info))def main():    KIND_ID = &quot;banana&quot;    with voicemeeterlib.api(KIND_ID) as vm:        do = ManyThings(vm)        do.things()        do.other_things()        # set many parameters at once        vm.apply(            {                &quot;strip-2&quot;: {&quot;A1&quot;: True, &quot;B1&quot;: True, &quot;gain&quot;: -6.0},                &quot;bus-2&quot;: {&quot;mute&quot;: True, &quot;eq&quot;: {&quot;on&quot;: True}},                &quot;button-0&quot;: {&quot;state&quot;: True},                &quot;vban-in-0&quot;: {&quot;on&quot;: True},                &quot;vban-out-1&quot;: {&quot;name&quot;: &quot;streamname&quot;},            }        )if __name__ == &quot;__main__&quot;:    main()```Otherwise you must remember to call `vm.login()`, `vm.logout()` at the start/end of your code.## `KIND_ID`Pass the kind of Voicemeeter as an argument. KIND_ID may be:-   `basic`-   `banana`-   `potato`## `Available commands`### StripThe following properties are available.-   `mono`: boolean-   `solo`: boolean-   `mute`: boolean-   `gain`: float, from -60.0 to 12.0-   `audibility`: float, from 0.0 to 10.0-   `limit`: int, from -40 to 12-   `A1 - A5`, `B1 - B3`: boolean-   `label`: string-   `mc`: boolean-   `k`: int, from 0 to 4-   `bass`: float, from -12.0 to 12.0-   `mid`: float, from -12.0 to 12.0-   `treble`: float, from -12.0 to 12.0-   `reverb`: float, from 0.0 to 10.0-   `delay`: float, from 0.0 to 10.0-   `fx1`: float, from 0.0 to 10.0-   `fx2`: float, from 0.0 to 10.0-   `pan_x`: float, from -0.5 to 0.5-   `pan_y`: float, from 0.0 to 1.0-   `color_x`: float, from -0.5 to 0.5-   `color_y`: float, from 0.0 to 1.0-   `fx_x`: float, from -0.5 to 0.5-   `fx_y`: float, from 0.0 to 1.0-   `postreverb`: boolean-   `postdelay`: boolean-   `postfx1`: boolean-   `postfx2`: booleanexample:```pythonvm.strip[3].gain = 3.7print(vm.strip[0].label)```The following methods are available.-   `appgain(name, value)`: string, float, from 0.0 to 1.0Set the gain in db by value for the app matching name.-   `appmute(name, value)`: string, boolSet mute state as value for the app matching name.example:```pythonvm.strip[5].appmute(&quot;Spotify&quot;, True)vm.strip[5].appgain(&quot;Spotify&quot;, 0.5)```#### Strip.CompThe following properties are available.-   `knob`: float, from 0.0 to 10.0-   `gainin`: float, from -24.0 to 24.0-   `ratio`: float, from 1.0 to 8.0-   `threshold`: float, from -40.0 to -3.0-   `attack`: float, from 0.0 to 200.0-   `release`: float, from 0.0 to 5000.0-   `knee`: float, from 0.0 to 1.0-   `gainout`: float, from -24.0 to 24.0-   `makeup`: booleanexample:```pythonprint(vm.strip[4].comp.knob)```Strip Comp parameters are defined for PhysicalStrips.`knob` defined for all versions, all other parameters potato only.#### Strip.GateThe following properties are available.-   `knob`: float, from 0.0 to 10.0-   `threshold`: float, from -60.0 to -10.0-   `damping`: float, from -60.0 to -10.0-   `bpsidechain`: int, from 100 to 4000-   `attack`: float, from 0.0 to 1000.0-   `hold`: float, from 0.0 to 5000.0-   `release`: float, from 0.0 to 5000.0example:```pythonvm.strip[2].gate.attack = 300.8```Strip Gate parameters are defined for PhysicalStrips.`knob` defined for all versions, all other parameters potato only.#### Strip.DenoiserThe following properties are available.-   `knob`: float, from 0.0 to 10.0example:```pythonvm.strip[0].denoiser.knob = 0.5```Strip Denoiser parameters are defined for PhysicalStrips, potato version only.#### Strip.EQThe following properties are available.-   `on`: boolean-   `ab`: booleanexample:```pythonvm.strip[0].eq.ab = True```Strip EQ parameters are defined for PhysicalStrips, potato version only.##### Strip.Gainlayers-   `gain`: float, from -60.0 to 12.0example:```pythonvm.strip[3].gainlayer[3].gain = 3.7```Gainlayers are defined for potato version only.##### Strip.LevelsThe following properties are available.-   `prefader`-   `postfader`-   `postmute`example:```pythonprint(vm.strip[3].levels.prefader)```Level properties will return -200.0 if no audio detected.### BusThe following properties are available.-   `mono`: boolean-   `mute`: boolean-   `sel`: boolean-   `gain`: float, from -60.0 to 12.0-   `label`: string-   `returnreverb`: float, from 0.0 to 10.0-   `returndelay`: float, from 0.0 to 10.0-   `returnfx1`: float, from 0.0 to 10.0-   `returnfx2`: float, from 0.0 to 10.0-   `monitor`: booleanexample:```pythonvm.bus[3].gain = 3.7print(vm.bus[0].label)vm.bus[4].mono = True```##### Bus.EQThe following properties are available.-   `on`: boolean-   `ab`: booleanexample:```pythonvm.bus[3].eq.on = True```##### Bus.ModesThe following properties are available.-   `normal`: boolean-   `amix`: boolean-   `bmix`: boolean-   `composite`: boolean-   `tvmix`: boolean-   `upmix21`: boolean-   `upmix41`: boolean-   `upmix61`: boolean-   `centeronly`: boolean-   `lfeonly`: boolean-   `rearonly`: booleanThe following methods are available.-   `get()`: Returns the current bus modeexample:```pythonvm.bus[4].mode.amix = Trueprint(vm.bus[2].mode.get())```##### Bus.LevelsThe following properties are available.-   `all`example:```pythonprint(vm.bus[0].levels.all)````levels.all` will return -200.0 if no audio detected.### Strip | BusThe following methods are available.-   `fadeto(amount, time)`: float, int-   `fadeby(amount, time)`: float, intModify gain to or by the selected amount in db over a time interval in ms.example:```pythonvm.strip[0].fadeto(-10.3, 1000)vm.bus[3].fadeby(-5.6, 500)```#### Strip.Device | Bus.DeviceThe following properties are available-   `name`: str-   `sr`: int-   `wdm`: str-   `ks`: str-   `mme`: str-   `asio`: strexample:```pythonprint(vm.strip[0].device.name)vm.bus[0].device.asio = &quot;Audient USB Audio ASIO Driver&quot;```strip|bus device parameters are defined for physical channels only.name, sr are read only. wdm, ks, mme, asio are write only.### MacrobuttonsThe following properties are available.-   `state`: boolean-   `stateonly`: boolean-   `trigger`: booleanexample:```pythonvm.button[37].state = Truevm.button[55].trigger = False```### RecorderThe following methods are available-   `play()`-   `stop()`-   `pause()`-   `record()`-   `ff()`-   `rew()`-   `load(filepath)`: raw string-   `goto(time_string)`: time string in format `hh:mm:ss`-   `filetype(filetype)`: string, (&quot;wav&quot;, &quot;aiff&quot;, &quot;bwf&quot;, &quot;mp3&quot;)The following properties are available-   `A1 - A5`: boolean-   `B1 - B3`: boolean-   `samplerate`: int, (22050, 24000, 32000, 44100, 48000, 88200, 96000, 176400, 192000)-   `bitresolution`: int, (8, 16, 24, 32)-   `channel`: int, from 1 to 8-   `kbps`: int, (32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320)-   `gain`: float, from -60.0 to 12.0example:```pythonvm.recorder.play()vm.recorder.stop()# Disable recorder out channel B2vm.recorder.B2 = False# filepath as raw stringvm.recorder.load(r'C:\music\mytune.mp3')# set the goto time to 1m 30svm.recorder.goto(&quot;00:01:30&quot;)```#### Recorder.ModeThe following properties are available-   `recbus`: boolean-   `playonload`: boolean-   `loop`: boolean-   `multitrack`: booleanexample:```python# Enable loop playvm.recorder.mode.loop = True```#### Recorder.ArmStrip[i]|ArmBus[i]The following method is available-   `set(val)`: booleanexample:```python# Arm strip 3vm.recorder.armstrip[3].set(True)# Arm bus 0vm.recorder.armbus[0].set(True)```### VBAN-   `vm.vban.enable()` `vm.vban.disable()` Turn VBAN on or off##### Instream | OutstreamThe following properties are available.-   `on`: boolean-   `name`: string-   `ip`: string-   `port`: int, range from 1024 to 65535-   `sr`: int, (11025, 16000, 22050, 24000, 32000, 44100, 48000, 64000, 88200, 96000)-   `channel`: int, from 1 to 8-   `bit`: int, 16 or 24-   `quality`: int, from 0 to 4-   `route`: int, from 0 to 8`SR`, `channel` and `bit` are defined as:-   readonly for instreams.-   read and write for outstreams.example:```python# turn VBAN onvm.vban.enable()# turn on vban instream 0vm.vban.instream[0].on = True# set bit property for outstream 3 to 24vm.vban.outstream[3].bit = 24```### CommandCertain 'special' commands are defined by the API as performing actions rather than setting values.The following methods are available:-   `show()` : Bring Voiceemeter GUI to the front-   `shutdown()` : Shuts down the GUI-   `restart()` : Restart the audio engine-   `reset()`: Applies the `reset` config. (phys strip B1, virt strip A1, gains, comp, gate 0.0, mute, mono, solo, eq false)The following properties are available.-   `showvbanchat`: boolean-   `lock`: booleanexample:```pythonvm.command.restart()vm.command.showvbanchat = True````showvbanchat` and `lock` are write only.### Device-   `ins` `outs` : Returns the number of input/output devices-   `input(i)` `output(i)` : Returns a dict of device properties for device[i]example:```pythonimport voicemeeterlibwith voicemeeterlib.api(KIND_ID) as vm:    for i in range(vm.device.ins):        print(vm.device.input(i))```### FXThe following properties are available:-   `reverb`: boolean-   `reverb_ab`: boolean-   `delay`: boolean-   `delay_ab`: booleanexample:```pythonvm.fx.reverb_ab = True```### PatchThe following properties are available:-   `postfadercomposite`: boolean-   `postfxinsert`: booleanexample:```pythonvm.patch.postfxinsert = False```##### asio[i]-   `get()`: int-   `set(patch_in)`: int, valid range determined by connected device.example:```pythonvm.patch.asio[3].set(4)```i, from 0 to 10##### A2[i] - A5[i]-   `get()`: int-   `set(patch_out)`: int, valid range determined by connected device.example:```pythonvm.patch.A3[5].set(3)```i, from 0 to 8.##### composite[i]-   `get()`: int-   `set(channel)`: int, from 0 up to number of channels depending on version.example:```pythonvm.patch.composite[7].set(4)```i, from 0 to 8.##### insert[i]-   `on`: booleanexample:```pythonvm.patch.insert[18].on = True```i, from 0 up to number of channels depending on version.### OptionThe following properties are available:-   `sr`: int-   `asiosr`: boolean-   `monitoronsel`: booleanexample:```pythonvm.option.sr = 48000```The following methods are available:-   `buffer(driver, buf)` : Set buffer size for particular audio driver.    -   buf: int, from 128 to 2048    -   driver:str, (&quot;mme&quot;, &quot;wdm&quot;, &quot;ks&quot;, &quot;asio&quot;)example:```pythonvm.option.buffer(&quot;wdm&quot;, 512)```##### delay[i]-   `get()`: int-   `set(delay)`: int, from 0 to 500example:```pythonvm.option.delay[4].set(30)```i, from 0 up to 4.### MidiThe following properties are available:-   `channel`: int, returns the midi channel-   `current`: int, returns the current (or most recently pressed) keyThe following methods are available:-   `get(key)`: int, returns most recent velocity value for a keyexample:```pythonprint(vm.midi.get(12))```get() may return None if no value for requested key in midi cache### Multiple parameters-   `apply`    Set many strip/bus/macrobutton/vban parameters at once, for example:```pythonvm.apply(    {        &quot;strip-2&quot;: {&quot;A1&quot;: True, &quot;B1&quot;: True, &quot;gain&quot;: -6.0},        &quot;bus-2&quot;: {&quot;mute&quot;: True, &quot;eq&quot;: {&quot;on&quot;: True}},        &quot;button-0&quot;: {&quot;state&quot;: True},        &quot;vban-in-0&quot;: {&quot;on&quot;: True},        &quot;vban-out-1&quot;: {&quot;name&quot;: &quot;streamname&quot;},    })```Or for each class you may do:```pythonvm.strip[0].apply(mute: True, gain: 3.2, A1: True)vm.vban.outstream[0].apply(on: True, name: 'streamname', bit: 24)```## Config Files`vm.apply_config(configname)`You may load config files in TOML format.Three example configs have been included with the package. Remember to savecurrent settings before loading a user config. To load one you may do:```pythonimport voicemeeterlibwith voicemeeterlib.api('banana') as vm:    vm.apply_config('example')```Your configs may be located in one of the following paths:-   \&lt;current working directory\&gt; / &quot;configs&quot; / kind_id-   \&lt;user home directory\&gt; / &quot;.config&quot; / &quot;voicemeeter&quot; / kind_id-   \&lt;user home directory\&gt; / &quot;Documents&quot; / &quot;Voicemeeter&quot; / &quot;configs&quot; / kind_idIf a config with the same name is located in multiple locations, only the first one found is loaded into memory, in the above order.#### `config extends`You may also load a config that extends another config with overrides or additional parameters.You just need to define a key `extends` in the config TOML, that names the config to be extended.Three example 'extender' configs are included with the repo. You may load them with:```pythonimport voicemeeterlibwith voicemeeterlib.api('banana') as vm:    vm.apply_config('extender')```## EventsBy default, NO events are listened for. Use events kwargs to enable specific event types.example:```pythonimport voicemeeterlib# Set event updates to occur every 50ms# Listen for level updates onlywith voicemeeterlib.api('banana', ratelimit=0.05, ldirty=True}) as vm:    ...```#### `vm.observer`Use the Subject class to register an app as event observer.The following methods are available:-   `add`: registers an app as an event observer-   `remove`: deregisters an app as an event observerexample:```python# register an app to receive updatesclass App():    def __init__(self, vm):        vm.observer.add(self)        ...```#### `vm.event`Use the event class to toggle updates as necessary.The following properties are available:-   `pdirty`: boolean-   `mdirty`: boolean-   `midi`: boolean-   `ldirty`: booleanexample:```pythonvm.event.ldirty = Truevm.event.pdirty = False```Or add, remove a list of events.The following methods are available:-   `add()`-   `remove()`-   `get()`example:```pythonvm.event.remove([&quot;pdirty&quot;, &quot;mdirty&quot;, &quot;midi&quot;])# get a list of currently subscribedprint(vm.event.get())```## Remote class`voicemeeterlib.api(KIND_ID: str)`You may pass the following optional keyword arguments:-   `sync`: boolean=False, force the getters to wait for dirty parameters to clear. For most cases leave this as False.-   `ratelimit`: float=0.033, how often to check for updates in ms.-   `pdirty`: boolean=False, parameter updates-   `mdirty`: boolean=False, macrobutton updates-   `midi`: boolean=False, midi updates-   `ldirty`: boolean=False, level updatesAccess to lower level Getters and Setters are provided with these functions:-   `vm.get(param, is_string=False)`: For getting the value of any parameter. Set string to True if getting a property value expected to return a string.-   `vm.set(param, value)`: For setting the value of any parameter.example:```pythonvm.get('Strip[2].Mute')vm.set('Strip[4].Label', 'stripname')vm.set('Strip[0].Gain', -3.6)```Access to lower level polling functions are provided with the following property objects:#### `vm.pdirty`True iff a parameter has been updated.#### `vm.mdirty`True iff a macrobutton has been updated.#### `vm.ldirty`True iff a level has been updated.### Run testsTo run all tests:```pytest -v```### Official Documentation-   [Voicemeeter Remote C API](https://github.com/onyx-and-iris/Voicemeeter-SDK/blob/update-docs/VoicemeeterRemoteAPI.pdf)</longdescription>
</pkgmetadata>