<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IP Fabric IPFabric is a Python module for connecting to and communicating against an IP Fabric instance.## AboutFounded in 2015, [IP Fabric](https://ipfabric.io/) develops network infrastructure visibility and analytics solution tohelp enterprise network and security teams with network assurance and automation across multi-domain heterogeneousenvironments. From in-depth discovery, through graph visualization, to packet walks and complete network history, IPFabric enables to confidently replace manual tasks necessary to handle growing network complexity driven by relentlessdigital transformation. ## v6.3.1 Deprecation NoticesIn `ipfabric&gt;=v6.3.1` Python 3.7 support will be removed.  This was originally planned for `v7.0.0` however to add new functionality of Pandas Dataframe we are required to move this forward.**Python 3.7 is now End of Life as of June 27th 2023**## v7.0.0 Deprecation NoticesIn `ipfabric&gt;=v7.0.0` the following will be changed/deprecated:- In v7.0 `IPFDiagram` will be removed as it is now located in `IPFClient().diagram`, the following will be changed:  - `IPFDiagram().diagram_model()` -&gt; `IPFClient().diagram.model()`   - `IPFDiagram().diagram_json()` -&gt; `IPFClient().diagram.json()`   - `IPFDiagram().diagram_svg()` -&gt; `IPFClient().diagram.svg()`   -`IPFDiagram().diagram_png()` -&gt; `IPFClient().diagram.png()` - The use of `token='&lt;TOKEN&gt;'` or `username='&lt;USER&gt;', password='&lt;PASS&gt;'` in `IPFClient()` will be removed:  - Token: `IPFClient(auth='TOKEN')`  - User/Pass: `IPFClient(auth=('USER', 'PASS'))`  - `.env` file will only accept `IPF_TOKEN` or (`IPF_USERNAME` and `IPF_PASSWORD`) and not `auth`## VersioningStarting with IP Fabric version 5.0.x the python-ipfabric and python-ipfabric-diagrams will need tomatch your IP Fabric version.  The API's are changing and instead of `api/v1` they will now be `api/v5.0`.Version 5.1 will have backwards compatability with version 5.0 however 6.0 will not support any 5.x versions.By ensuring that your ipfabric SDK's match your IP Fabric Major Version will ensure compatibility and will continue to work.## Streaming Data Support**STREAMING HAS BEEN DEFAULTED TO TRUE IN `v6.5.0`**In IP Fabric version `6.3.0` the option to return table data using a streamingGET request instead of a paginated POST request has been added. **FOR CUSTOMERS USING RBAC. Please ensure you are running IP Fabric `&gt;=6.3.1` due to a bug where custom RBAC Policies do not allow you to create a Policy to the GETendpoints and only admins can query data.THIS AFFECTS CSV EXPORT AND STREAMING JSON EXPORT.*** GET URL is limited to 4096 characters, complex queries and filters could go over this limit; however in testing it was very difficult to reach this.* Since request has been changed from `httpx.post` to `httpx.stream` no changes in timeout was required in testing.* Performance Testing on 1.7M rows:  * POST requires 1,719 requests (1k rows per request) ~ 82 minutes  * Streaming GET requires 1 request ~ 6.2 minutes* No degradation in navigating the GUI including viewing table data or creating diagrams.* Supports `csv` and `json` exports:  * CSV     * Only supported with a streaming GET request and return a bytes string of data in the Python SDK.    * It will also convert times to human-readable format.    * **`reports` (returning Intent Check data) is not supported with CSV export, however is required when filtering based on Intents (colors).**  * JSON provides same support as POST.```pythonfrom ipfabric import IPFClientipf = IPFClient(streaming=True)dev = ipf.inventory.devices.all()dev_2 = ipf.fetch_all('tables/inventory/devices')print(dev == dev_2)  # Trueprint(type(dev))  # list dev_csv = ipf.inventory.devices.all(export='csv')dev_csv_2 = ipf.fetch_all('tables/inventory/devices', export='csv')print(dev_csv == dev_csv_2 ) # Trueprint(type(dev_csv))  # bytes # Timezone can be changed for CSV export; see `ipfabric.tools.shared.TIMEZONES`dev_csv_tz = ipf.inventory.devices.all(export='csv', csv_tz='UTC')# If specifying to return reports and CSV request will drop reports input and use GETdev_csv_reports = ipf.fetch_all('tables/inventory/devices', reports=True, export='csv')&quot;&quot;&quot;CSV export does not return reports, parameter has been excluded.&quot;&quot;&quot;print(type(dev_csv_reports))  # bytes# If URL exceeds 4096 characters the following exception will be raised:# raise InvalidURL(f&quot;URL exceeds max character limit of 4096: length={len(url)}.&quot;)```## Installation```pip install ipfabric```To use `export='pandas'` on some methods please install `pandas` with `ipfabric````pip install ipfabric[pd]```## IntroductionPlease take a look at [API Programmability - Part 1: The Basics](https://ipfabric.io/blog/api-programmability-part-1/)for instructions on creating an API token.Most of the methods and features can be located in [Examples](examples) to show how to use this package. Another great introduction to this package can be found at [API Programmability - Part 2: Python](https://ipfabric.io/blog/api-programmability-python/)## DiagramsDiagramming in IP Fabric version v4.3 and above has been moved to it's own package.Diagramming will move back to this project in v7.0```pip install ipfabric-diagrams```## Authentication### Username/PasswordSupply in client:```pythonfrom ipfabric import IPFClientipf = IPFClient('https://demo3.ipfabric.io/', auth=('user', 'pass'))```### Token```pythonfrom ipfabric import IPFClientipf = IPFClient('https://demo3.ipfabric.io/', auth='token')```### Environment The easiest way to use this package is with a `.env` file.  You can copy the sample and edit it with your environment variables. ```commandlinecp sample.env .env```This contains the following variables which can also be set as environment variables instead of a .env file.```IPF_URL=&quot;https://demo3.ipfabric.io&quot;IPF_TOKEN=TOKENIPF_VERIFY=true```Or if using Username/Password:```IPF_URL=&quot;https://demo3.ipfabric.io&quot;IPF_USERNAME=USERIPF_PASSWORD=PASS```## Development### Poetry InstallationIPFabric uses [Poetry](https://pypi.org/project/poetry/) to make setting up a virtual environment with all dependenciesinstalled quick and easy.Install poetry globally:```pip install poetry```To install a virtual environment run the following command in the root of this directory.```poetry install```To run examples, install extras:```poetry install ipfabric -E examples```### Test and Build```poetry run pytestpoetry build```Prior to pushing changes run:```poetry run black ipfabricpoetry update```</longdescription>
</pkgmetadata>