<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django_slotsAllows multiline strings to be captured and passed to template tags.## Demo1. Register a component  ```python# app/templatetags/component_tags.pyfrom django_slots import Library, Componentregister = Library()@register.block_componentclass Details(Component):  pass```2. Create a template```html+django{# app/templates/components/details.html #}&lt;details&gt;&lt;summary&gt;{{ summary|default:slots.summary }}&lt;/summary&gt;{{ slot }}&lt;/details&gt;```Usage:```html+django{% load component_tags %}{% load slot_tags %}{% details summary=&quot;the summary&quot; %}  the default slot{% /details %}{% details %}  {% slot summary %}the &lt;b&gt;summary&lt;/b&gt;{% /slot %}  the default slot{% /details %}```## Installation```shellpip install django-slots``````pythonINSTALLED_APPS = [    # ...        'django_slots',]```## SlotsUse `{% slot name %}{% /slot %}` to capture and name a slot. These slots will be available in the template in a dictionary called `slots`. eg `{{ slots.name }}`.Any lines not surrounded by a slot tag will be available in the component template as `{{ slot }}`.## TemplateThe default the template path is `components/&lt;component_name&gt;.html`.Use `template_name` attribute or `get_template_name()` method to override.## Change nameBy default, the template tag name will be the Component class name converted to snake case. Use the `name` attribute to override.eg:```pythonfrom django_slots import Component, Libraryregister = Library()@register.inline_componentclass Button(Component):    name = 'btn'``````html+django{% btn %}```## Change name formatBy default, inline tags are named `&quot;{name}/&quot;` and block tags are named `&quot;{name}&quot;, &quot;/{name}&quot;`. To change this format specify `inline_tag_name` and `block_tag_names` attributes.eg:```pythonfrom django_slots import Component, Libraryregister = Library()class AppComponent(Component):    inline_tag_name = &quot;{name}end&quot;    block_tag_names = &quot;{name}&quot;, &quot;end{name}&quot;        @register.componentclass Button(AppComponent):    pass``````html+django{% buttonend %}{% button %}{% endbutton %}```## Inline only template tagUse `@register.inline_component` to only allow `{% inline/ %}` use.## Block only template tagUse `@register.block_component` to only allow `{% block %}{% /block %}` use.## Validate argumentsImplement `def get_content_data(slots, **kwargs)` to validate arguments. eg:```pythonfrom django_slots import Component, Libraryregister = Library()@register.componentclass Button(Component):    STYLE = [&quot;primary&quot;, &quot;secondary&quot;]    def get_context_data(self, slots, *, style: str):        if style not in self.STYLE:            raise self.validation_error(f&quot;style {style!r} not in {self.STYLE!r}&quot;)        return super().get_context_data(slots, style=style)```## Namespace componentsComponents can be namespaced which is useful for creating a third party app.```pythonfrom django_slots import Library, Componentregister = Library()class NHSUKComponent(Component):    namespace = 'nhsuk'@register.componentclass Button(NHSUKComponent):    pass``````html+django{% nhsuk:button %}  Save and continue{% /nhsuk:button %}```See https://github.com/nwjlyons/nhsuk-components</longdescription>
</pkgmetadata>