<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># auto_everythingLinux automation#### Help WantedI lost my job for almost 2 years. If you wish to see me alive, please buy me some food:* Paypal: https://paypal.me/yingshaoxo* Patron: https://www.patreon.com/bePatron?u=45200693&lt;!-- [&lt;img src=&quot;https://github.com/yingshaoxo/yingshaoxo/raw/master/become_a_patron_button.png&quot; width=&quot;200&quot;&gt;](https://www.patreon.com/bePatron?u=45200693) --&gt;#### Installation (For Python &gt;= 3.10)```bashcurl -sSL https://install.python-poetry.org | python3poetry add &quot;git+https://github.com/yingshaoxo/auto_everything.git@dev&quot;orsudo pip3 install &quot;git+https://github.com/yingshaoxo/auto_everything.git@dev&quot;orsudo pip3 install &quot;git+https://github.com/yingshaoxo/auto_everything.git@dev&quot; --break-system-packages```&gt; What the fuck the `debian` or `pip` or `python community` is thinking of? Why we can't use pip to directly install a package anymore?&gt; Those **assohle** who in charge never want to make things easy, are they?#### Installation (For 3.5 &lt;= Python &lt; 3.10)```bashpoetry add auto_everything==3.9orsudo pip3 install auto_everything==3.9```#### Magic```bashsudo sucurl -sSL https://github.com/yingshaoxo/auto_everything/raw/master/env_setup.sh | bashwget -O - https://github.com/yingshaoxo/auto_everything/raw/master/example/install_YouCompleteMe.py | python3exitwget -O - https://github.com/yingshaoxo/auto_everything/raw/master/example/install_YouCompleteMe.py | python3```#### Docshttps://yingshaoxo.github.io/auto_everything---## Basic API#### Import```pythonfrom auto_everything.terminal import Terminalt = Terminal()```#### Run a command and get reply```pythonreply = t.run_command('uname -a')print(reply)```#### Run commands and get direct screen output```pythoncommands = &quot;&quot;&quot;sudo apt updateuname -a&quot;&quot;&quot;t.run(commands)```#### Run a program```pythont.run_program('firefox')```#### Run a python script```pythont.run_py('your_file.py')```#### Run a bash script```pythont.run_sh('your_file.sh')```#### Detect if a program or script is running```pythonstatus = t.is_running('terminal')print(status)```#### Kill it```pythont.kill('terminal')```---## For simplifying python development#### Import```pythonfrom auto_everything.python import Pythonpy = Python()```#### Turn `Python Class` into a `Command Line Program````pythonpy.fire(your_class_name)```#### Make it `global executable`:```pythonpy.make_it_global_runnable(executable_name=&quot;Tools&quot;)```#### ExampleLet's assume you have a file named `Tools.py`:```pythonfrom auto_everything.base import Pythonpy = Python()class Tools():    def push(self, comment):        t.run('git add .')        t.run('git commit -m &quot;{}&quot;'.format(comment))        t.run('git push origin')    def pull(self):        t.run(&quot;&quot;&quot;git fetch --allgit reset --hard origin/master&quot;&quot;&quot;)    def undo(self):        t.run(&quot;&quot;&quot;git reset --mixed HEAD~1&quot;&quot;&quot;)    def reset(self):        t.run(&quot;&quot;&quot;git reset --hard HEAD^&quot;&quot;&quot;)    def hi(self):        print(&quot;Hi, Python!&quot;)py.fire(Tools)py.make_it_global_runnable(executable_name=&quot;MyTools&quot;)```After the first running of this script by `python3 Tools.py hi`, you would be able to use `MyTools` to run this script at anywhere within your machine:```bashyingshaoxo@pop-os:~$ MyTools hiHi, Python!```---## For simplifying general `server and client` development#### Define YRPC Protocols```grpcservice Greeter {    rpc say_hello (hello_request) returns (HelloReply);}enum UserStatus {    OFFLINE = 0;    ONLINE = 1;}message hello_request {   string name = 1;   UserStatus user_status = 2;   repeated UserStatus user_status_list = 3;}message HelloReply {    string message = 1;}```#### Generate `Python, Flutter, Typescript` code```pythonfrom auto_everything.develop import YRPCyrpc = YRPC()for language in [&quot;python&quot;, &quot;dart&quot;, &quot;typescript&quot;]:    yrpc.generate_code(        which_language=language,        input_folder=&quot;/home/yingshaoxo/CS/protocol_test/protocols&quot;,        input_files=[&quot;english.proto&quot;],        output_folder=&quot;/Users/yingshaoxo/CS/protocol_test/generated_yrpc&quot;    )```&gt; Here, we only use python to do the server part job.#### Then, you can use it like this:```pythonfrom generated_yrpc.english_rpc import *class NewService(Service_english):    async def say_hello(self, item: hello_request) -&gt; HelloReply:        reply = HelloReply()        reply.message = item.name        return replyservice_instance = NewService()run(service_instance, port=&quot;6060&quot;)``````dartvoid main() async {  var client = Client_english(    service_url: &quot;http://127.0.0.1:6060&quot;,    error_handle_function: (error_message) {      print(error_message);    },  );  var result = await client.say_hello(    item: hello_request(name: &quot;yingshaoxo&quot;)  );  if (result != null) {    print(result);  }}```___## Others#### Simpler IO```pythonfrom auto_everything.base import IOio = IO()io.write(&quot;hi.txt&quot;, &quot;Hello, world!&quot;)print(io.read(&quot;hi.txt&quot;))io.append(&quot;hi.txt&quot;, &quot;\n\nI'm yingshaoxo.&quot;)print(io.read(&quot;hi.txt&quot;))```#### Quick File Operation```pythonfrom auto_everything.disk import Diskfrom pprint import pprintdisk = Disk()files = disk.get_files(folder=&quot;.&quot;, type_limiter=[&quot;.mp4&quot;])files = disk.sort_files_by_time(files)pprint(files)```#### Easy Store```pythonfrom auto_everything.disk import Storestore = Store(&quot;test&quot;)store.set(&quot;author&quot;, &quot;yingshaoxo&quot;)store.delete(&quot;author&quot;)store.set(&quot;author&quot;, {&quot;email&quot;: &quot;yingshaoxo@gmail.com&quot;, &quot;name&quot;: &quot;yingshaoxo&quot;})print(store.get_items())print(store.has_key(&quot;author&quot;))print(store.get(&quot;author&quot;, default_value=&quot;&quot;))print(store.get(&quot;whatever&quot;, default_value=&quot;alsjdasdfasdfsakfla&quot;))store.reset()print(store.get_items())```#### Encryption and Decryption```pythonencryption_and_decryption = EncryptionAndDecryption()a_dict = encryption_and_decryption.get_secret_alphabet_dict(&quot;hello, world&quot;)a_sentence = &quot;I'm yingshaoxo.&quot;encrypted_sentence = encryption_and_decryption.encode_message(a_secret_dict=a_dict, message=a_sentence)print()print(encrypted_sentence)&gt; B'i ybjdqahkxk.decrypted_sentence = encryption_and_decryption.decode_message(a_secret_dict=a_dict, message=encrypted_sentence)print(decrypted_sentence)&gt; I'm yingshaoxo.```#### JWT Tool (Json-Web-Token Tool) ```pythonjwt_tool  = JWT_Tool()secret = &quot;I'm going to tell you a secret: yingshaoxo is the best.&quot;a_jwt_string = jwt_tool.my_jwt_encode(data={&quot;name&quot;: &quot;yingshaoxo&quot;}, a_secret_string_for_integrity_verifying=secret)print(a_jwt_string)&gt; eyJhbGciOiAiTUQ1IiwgInR5cCI6ICJKV1QifQ==.eyJuYW1lIjogInlpbmdzaGFveG8ifQ==.583085987ba46636662dc71ca6227c0aoriginal_dict = jwt_tool.my_jwt_decode(jwt_string=a_jwt_string, a_secret_string_for_integrity_verifying=secret)print(original_dict)&gt; {'name': 'yingshaoxo'}fake_jwt_string = &quot;aaaaaa.bbbbbb.abcdefg&quot;original_dict = jwt_tool.my_jwt_decode(jwt_string=fake_jwt_string, a_secret_string_for_integrity_verifying=secret)print(original_dict)&gt; None```#### Web automation```pythonfrom auto_everything.web import Seleniummy_selenium = Selenium(&quot;https://www.google.com&quot;, headless=False)d = my_selenium.driver# get input boxxpath = '//*[@id=&quot;lst-ib&quot;]'elements = my_selenium.wait_until_elements_exists(xpath)if len(elements) == 0:    exit()# text inputingelements[0].send_keys('\b' * 20, &quot;yingshaoxo&quot;)# click search buttonelements = my_selenium.wait_until_elements_exists('//input[@value=&quot;Google Search&quot;]')if len(elements):    elements[0].click()# exitmy_selenium.sleep(30)d.quit()```</longdescription>
</pkgmetadata>