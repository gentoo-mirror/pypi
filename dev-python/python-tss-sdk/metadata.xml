<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The Delinea Secret Server Python SDK[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)![PyPI Version](https://img.shields.io/pypi/v/python-tss-sdk) ![License](https://img.shields.io/github/license/DelineaXPM/python-tss-sdk) ![Python Versions](https://img.shields.io/pypi/pyversions/python-tss-sdk)The [Delinea](https://delinea.com/) [Secret Server](https://delinea.com/products/secret-server/) Python SDK contains classes that interact with Secret Server via the REST API.## Install```shellpython -m pip install python-tss-sdk```## Secret Server AuthenticationThere are three ways in which you can authorize the `SecretServer` and `SecretServerCloud` classes to fetch secrets.- Password Authorization (with `PasswordGrantAuthorizer`)- Domain Authorization (with `DomainPasswordGrantAuthorizer`)- Access Token Authorization (with `AccessTokenAuthorizer`)### Usage#### Password AuthorizationIf using traditional `username` and `password` authentication to log in to your Secret Server, you can pass the `PasswordGrantAuthorizer` into the `SecretServer` class at instantiation. The `PasswordGrantAuthorizer` requires a `base_url`, `username`, and `password`. It optionally takes a `token_path_uri`, but defaults to `/oauth2/token`.```pythonfrom delinea.secrets.server import PasswordGrantAuthorizerauthorizer = PasswordGrantAuthorizer(&quot;https://hostname/SecretServer&quot;, &quot;myusername&quot;, &quot;mypassword&quot;)```#### Domain AuthorizationTo use a domain credential, use the `DomainPasswordGrantAuthorizer`. It requires a `base_url`, `username`, `domain`, and `password`. It optionally takes a `token_path_uri`, but defaults to `/oauth2/token`.```pythonfrom delinea.secrets.server import DomainPasswordGrantAuthorizerauthorizer = DomainPasswordGrantAuthorizer(&quot;https://hostname/SecretServer&quot;, &quot;myusername&quot;, &quot;mydomain&quot;, &quot;mypassword&quot;)```#### Access Token AuthorizationIf you already have an `access_token`, you can pass directly via the `AccessTokenAuthorizer`.```pythonfrom delinea.secrets.server import AccessTokenAuthorizerauthorizer = AccessTokenAuthorizer(&quot;AgJ1slfZsEng9bKsssB-tic0Kh8I...&quot;)```## Secret Server CloudThe SDK API requires an `Authorizer` and a `tenant`.`tenant` simplifies the configuration when using Secret Server Cloud by assuming the default folder structure and creating the _base URL_ from a template that takes the `tenant` and an optional top-level domain (TLD) that defaults to `com`, as parameters.### UseageInstantiate the `SecretServerCloud` class with `tenant` and an `Authorizer` (optionally include a `tld`). To retrieve a secret, pass an integer `id` to `get_secret()` which will return the secret as a JSON encoded string.```pythonfrom delinea.secrets.server import SecretServerCloudsecret_server = SecretServerCloud(&quot;mytenant&quot;, authorizer)secret = secret_server.get_secret(1)```The SDK API also contains a `Secret` `@dataclass` containing a subset of the Secret's attributes and a dictionary of all the fields keyed by the Secret's `slug`.## Initializing SecretServer### Useage&gt; NOTE: In v1.0.0 `SecretServer` replaces `SecretServerV1`. However, `SecretServerV0` is available to use instead, for backwards compatibility with v0.0.5 and v0.0.6.To instantiate the `SecretServer` class, it requires a `base_url`, an `Authorizer` object (see above), and an optional `api_path_uri` (defaults to `&quot;/api/v1&quot;`)```pythonfrom delinea.secrets.server import SecretServersecret_server = SecretServer(&quot;https://hostname/SecretServer&quot;, my_authorizer)```Secrets can be fetched using the `get_secret` method, which takes an integer `id` of the secret and, returns a `json` object:```pythonsecret = secret_server.get_secret(1)print(f&quot;username: {secret.fields['username'].value}\npassword: {secret.fields['password'].value}&quot;)```Alternatively, you can use pass the json to `ServerSecret` which returns a `dataclass` object representation of the secret:```shellfrom delinea.secrets.server import ServerSecretsecret = ServerSecret(**secret_server.get_secret(1))username = secret.fields['username'].value```It is also now possible to fetch a secret by the secrets `path` using the `get_secret_by_path` method on the `SecretServer` object. This, too, returns a `json` object.```pythonsecret = secret_server.get_secret_by_path(r&quot;\FolderPath\Secret Name&quot;)print(f&quot;username: {secret.fields['username'].value}\npassword: {secret.fields['password'].value}&quot;)```&gt; Note: The `path` must be the full folder path and name of the secret.## Using Self-Signed CertificatesWhen using a self-signed certificate for SSL, the `REQUESTS_CA_BUNDLE` environment variable should be set to the path of the certificate (in `.pem` format). This will negate the need to ignore SSL certificate verification, which makes your application vunerable. Please reference the [`requests` documentation](https://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification) for further details on the `REQUESTS_CA_BUNDLE` environment variable, should you require it.## Create a Build Environment (optional)The SDK requires [Python 3.7](https://www.python.org/downloads/) or higher.First, ensure Python is in `$PATH`, then run:```shell# Clone the repogit clone https://github.com/DelineaXPM/python-tss-sdkcd python-tss-sdk# Create a virtual environmentpython -m venv venv. venv/bin/activate# Install dependenciespython -m pip install --upgrade pippip install -r requirements.txt```Valid credentials are required to run the unit tests. The credentials should be stored in environment variables or in a `.env` file:```shellexport TSS_USERNAME=myusernameexport TSS_PASSWORD=mysecretpasswordexport TSS_TENANT=mytenantexport SECRET_ID=42export SECRET_PATH=\Test Secrets\SecretName```The tests assume that the user associated with the specified `TSS_USERNAME` and `TSS_PASSWORD` can read the secret to be fetched, and that the Secret itself contains `username` and `password` fields.To run the tests with `tox`:```shelltox```To build the package, use [Flit](https://flit.readthedocs.io/en/latest/):```shellflit build```</longdescription>
</pkgmetadata>