<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OM Quant FinThe Outspoken Market is training the next quantitative generation. OM Quant Fin is a modern Python package for quantitative trading analysis. Our mission is to make your quant life easier and more accurate.## Project Structure```pythonom_quant_fin/               # Root directory of the project├── om_quant_fin/           # Python package containing the library's code│   ├── __init__.py         # Marks the directory as a package and can contain package-level code or imports│   └── om_quant_fin.py     # Contains library's functions├── setup.py                # Provides package metadata and dependencies for packaging and distribution├── .gitignore              # Lists files and folders that should not be tracked by Git└── README.md               # Markdown file with a description of the project, usage instructions, and other information```## What's new in version 1.1.0- OM Quant Fin now introduces the iFat! The iFat is a fantastic indicator for the measurement of the presence of fat tails. The closest to 0, fatter are the tails. Thin tails otherwise.- You also have a new function that create 27 attributes optimizide for the volatility estimation of any give asset. Apply the model methodology of choice into this attributes, evaluate it with the &quot;regression_metrics&quot; method and forecast the volatility with the &quot;prediction_report&quot; method.## OM Quant Fin Features- Download stock data from Yahoo Finance- Calculates rolling Z-scores- Calculates the rolling ratio of adjusted close and its mean (RSL indicator)- Evaluates a model with AUC and Gini for classification models and respective plots- QCut fit method for the proper binning of unseen data- Robustness test with bootstrapping- Calculates the Pain Index which is a measure of portfolio risk that takes into account both the depth and duration of drawdowns- Calculates the first ACF component for a given time series- Z-score function only (no rolling)- Z-score based on the median- Function to find the next business day given an input date- Mean Standard Deviation (MAD) Python implementation- iFat: fat tail index calculation- Function to create a data frame with 27 attributes for volatility estimation- Generates a report with main regression metrics: RMSE and MAE- Generates a report with predicted value and actions to take for a given volatility model## InstallationInstall the library using pip:```pythonpip install om_quant_fin```## Some sample usage```pythonimport om_quant_fin as mql#Download stock data:  data = mql.download_data(&quot;AAPL&quot;, &quot;2020-01-01&quot;, &quot;2022-12-31&quot;)#Calculates rolling Z-score:  z_score = mql.rolling_z_score(data[&quot;Adj Close&quot;], window = 20)#Calculates rolling ratio:  ratio = mql.rolling_ratio(data[&quot;Adj Close&quot;], window = 20)#Calculates returns:  returns = mql.calculate_returns(data[&quot;Adj Close&quot;], period = 1)#Pain index  window_size = 52 #rolling window for the pain index  data[&quot;Pain_index&quot;] = data[&quot;Adj Close&quot;].rolling(window_size).apply(mql.pain_index, raw = True)  mql.plot_pain_index(ticker1, data.index, data[&quot;Adj Close&quot;], data[&quot;Pain_index&quot;])#Bootstrapping  bs = mql.model_bs(model, x_train, y_train, x_test, y_test, n_iterations = 1000, range_bs = 0.1)  mql.plot_bs(bs[&quot;accuracy_train&quot;])  mql.plot_bs(bs[&quot;accuracy_test&quot;])#qcut fit and transformerlabels = [&quot;bin1&quot;, &quot;bin2&quot;, &quot;bin3&quot;, &quot;bin4&quot;, &quot;bin5&quot;, &quot;bin6&quot;, &quot;bin7&quot;, &quot;bin8&quot;, &quot;bin9&quot;, &quot;bin10&quot;          ,&quot;bin11&quot;, &quot;bin12&quot;, &quot;bin13&quot;, &quot;bin14&quot;, &quot;bin15&quot;, &quot;bin16&quot;, &quot;bin17&quot;, &quot;bin18&quot;, &quot;bin19&quot;, &quot;bin20&quot;]qcut_transformer = mql.QCutTransformer(q = 20, labels = labels)qcut_transformer.fit(data[&quot;column&quot;])qcut_transformer.transform(data[&quot;column&quot;])#Creates a data frame with 27 attributes for volatility estimationstart_date = = &quot;2015-01-01&quot; end_date = &quot;2023-12-31&quot;data = create_vars(&quot;^VIX&quot;, start_date, end_date, p = 10):data.head(5)#Creates a data frame with 27 attributes for volatility estimationstart_date = = &quot;2015-01-01&quot; end_date = &quot;2023-12-31&quot;data = create_vars(&quot;^VIX&quot;, start_date, end_date, p = 10):data.head(5)#Calculates the iFatifat, mstd = ifat(data[&quot;Returns&quot;], p = 67)```## LicenseThis project is licensed under the MIT License.</longdescription>
</pkgmetadata>