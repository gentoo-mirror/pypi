<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># stream-inflate [![CircleCI](https://circleci.com/gh/michalc/stream-inflate.svg?style=shield)](https://circleci.com/gh/michalc/stream-inflate) [![Test Coverage](https://api.codeclimate.com/v1/badges/1131e6ac6efb36647a9b/test_coverage)](https://codeclimate.com/github/michalc/stream-inflate/test_coverage)Uncompress Deflate and Deflate64 streams in pure Python.## Installation```bashpip install stream-inflate```## UsageTo uncompress Deflate, use the `stream_inflate` function.```pythonfrom stream_inflate import stream_inflateimport httpxdef compressed_chunks():    # Iterable that yields the bytes of a DEFLATE-compressed stream    with httpx.stream('GET', 'https://www.example.com/my.txt') as r:        yield from r.iter_raw(chunk_size=65536)for uncompressed_chunk in stream_inflate()[0](compressed_chunks()):    print(uncompressed_chunk)```To uncompress Deflate64, use the `stream_inflate64` function.```pythonfor uncompressed_chunk in stream_inflate64()[0](compressed_chunks()):    print(uncompressed_chunk)```For Deflate streams of unknown length where there may be other data _after_ the compressed part, the following pattern can be used to find how many bytes are not part of the compressed stream.```pythonuncompressed_chunks, is_done, num_bytes_unconsumed = stream_inflate()it = iter(compressed_chunks())while not is_done():    chunk = next(it)    for uncompressed in uncompressed_chunks((chunk,))        print(uncompressed)print(num_bytes_unconsumed())```This can be useful in certain ZIP files.</longdescription>
</pkgmetadata>