<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Test IT TMS adapter for Behave![Test IT](https://raw.githubusercontent.com/testit-tms/adapters-python/master/images/banner.png)## Getting Started### Installation```pip install testit-adapter-behave```## Usage### Configuration#### File1. Create **connection_config.ini** file in the root directory of the project:    ```    [testit]    URL = &lt;url&gt;    privateToken = &lt;token&gt;    projectId = &lt;id&gt;    configurationId = &lt;id&gt;    testRunId = &lt;optional id&gt;    testRunName = &lt;optional name&gt;    adapterMode = &lt;optional&gt;    certValidation = &lt;optional boolean&gt;    automaticCreationTestCases = &lt;optional boolean&gt;        # This section are optional. It enables debug mode.    [debug]    tmsProxy = {&quot;http&quot;: &quot;http://localhost:8888&quot;, &quot;https&quot;: &quot;http://localhost:8888&quot;}    ```2. Fill parameters with your configuration, where:    * `URL` - location of the TMS instance    * `privateToken` - API secret key        1. go to the https://{DOMAIN}/user-profile profile        2. copy the API secret key    * `projectId` - ID of project in TMS instance.        1. create a project        2. open DevTools -&gt; network        3. go to the project https://{DOMAIN}/projects/{PROJECT_GLOBAL_ID}/tests        4. GET-request project, Preview tab, copy id field    * `configurationId` - ID of configuration in TMS instance.        1. create a project        2. open DevTools -&gt; network        3. go to the project https://{DOMAIN}/projects/{PROJECT_GLOBAL_ID}/tests        4. GET-request configurations, Preview tab, copy id field    * `testRunId` - id of the created test run in TMS instance. `testRunId` is optional. If it is not provided, it is      created automatically.    * `testRunName` - parameter for specifying the name of test run in TMS instance. `testRunName` is optional. If it is      not provided, it is created automatically.    * `adapterMode` - adapter mode. Default value - 0. The adapter supports following modes:        * 0 - in this mode, the adapter filters tests by test run ID and configuration ID, and sends the results to the          test run.        * 1 - in this mode, the adapter sends all results to the test run without filtering.        * 2 - in this mode, the adapter creates a new test run and sends results to the new test run.        * `certValidation` - it enables/disables certificate validation. Default value - true.    * `automaticCreationTestCases` - mode of automatic creation test cases. Default value - false. The adapter supports following modes:        * true - in this mode, the adapter will create a test case linked to the created autotest (not to the updated autotest).        * false - in this mode, the adapter will not create a test case.    * `tmsProxy` - it enables debug mode. `tmsProxy` is optional.#### ENVYou can use environment variables (environment variables take precedence over file variables):* `TMS_URL` - location of the TMS instance.* `TMS_PRIVATE_TOKEN` - API secret key.* `TMS_PROJECT_ID` - ID of a project in TMS instance.* `TMS_CONFIGURATION_ID` - ID of a configuration in TMS instance.* `TMS_ADAPTER_MODE` - adapter mode. Default value - 0.* `TMS_TEST_RUN_ID` - ID of the created test-run in TMS instance. `TMS_TEST_RUN_ID` is optional. If it is not provided,  it is created automatically.* `TMS_TEST_RUN_NAME` - name of the new test-run.`TMS_TEST_RUN_NAME` is optional. If it is not provided, it is created  automatically.* `TMS_CONFIG_FILE` - name of the configuration file. `TMS_CONFIG_FILE` is optional. If it is not provided, it is used  default file name.* `TMS_PROXY` - it enables debug mode. `TMS_PROXY` is optional.* `TMS_CERT_VALIDATION` - it enables/disables certificate validation. Default value - true.* `TMS_AUTOMATIC_CREATION_TEST_CASES` - mode of automatic creation test cases. Default value - false.#### Command lineYou also can CLI variables (CLI variables take precedence over environment variables):* `tmsUrl` - location of the TMS instance.* `tmsPrivateToken` - API secret key.* `tmsProjectId` - ID of a project in TMS instance.* `tmsConfigurationId` - ID of a configuration in TMS instance.* `tmsAdapterMode` - adapter mode. Default value - 0.* `tmsTestRunId` - ID of the created test-run in TMS instance. `tmsTestRunId` is optional. If it is not provided, it is  created automatically.* `tmsTestRunName` - name of the new test-run.`tmsTestRunName` is optional. If it is not provided, it is created  automatically.* `tmsConfigFile` - name of the configuration file. `tmsConfigFile` is optional. If it is not provided, it is used  default file name.* `tmsProxy` - it enables debug mode. `tmsProxy` is optional.* `tmsCertValidation` - it enables/disables certificate validation. Default value - true.* `tmsAutomaticCreationTestCases` - mode of automatic creation test cases. Default value - false.#### ExamplesLaunch with a connection_config.ini file in the root directory of the project:```$ behave -f testit_adapter_behave.formatter:AdapterFormatter```Launch with command-line parameters:```$ behave -f testit_adapter_behave.formatter:AdapterFormatter -D tmsUrl=&lt;url&gt; -D tmsPrivateToken=&lt;token&gt; -DtmsProjectId=&lt;id&gt; -D tmsConfigurationId=&lt;id&gt; -D tmsTestRunId=&lt;optional id&gt; -D tmsAdapterMode=&lt;optional&gt; -DtmsTestRunName=&lt;optional name&gt; -D tmsProxy='{&quot;http&quot;:&quot;http://localhost:8888&quot;,&quot;https&quot;:&quot;http://localhost:8888&quot;}' -DtmsCertValidation=&lt;optional boolean&gt; -D tmsAutomaticCreationTestCases=&lt;optional boolean&gt;```If you want to enable debug mode thensee [How to enable debug logging?](https://github.com/testit-tms/adapters-python/tree/main/testit-python-commons)### TagsUse tags to specify information about autotest.Description of tags:- `WorkItemIds` - linking an autotest to a test case- `DisplayName` - name of the autotest in the TMS system- `ExternalId` - ID of the autotest within the project in the TMS system- `Title` - title in the autotest card- `Description` - description in the autotest card- `Labels` - tags in the autotest card- `Links` - links in the autotest card- `NameSpace` - directory in the TMS system (default - file's name of test)- `ClassName` - subdirectory in the TMS system (default - class's name of test)Description of methods:- `testit.addLinks` - links in the autotest result- `testit.addAttachments` - uploading files in the autotest result- `testit.addMessage` - information about autotest in the autotest result- `testit.step` - usage in the &quot;with&quot; construct to designation a step in the body of the test### Examples#### Simple Test```pyimport testitfrom behave import givenfrom behave import thenfrom behave import when@given(&quot;I authorize on the portal&quot;)def authorization(context):    with testit.step(&quot;I set login&quot;):        pass    with testit.step(&quot;I set password&quot;):        pass@when(&quot;I create a project&quot;)def create_project(context):    pass@when(&quot;I open the project&quot;)def enter_project(context):    pass@when(&quot;I create a section&quot;)def create_section(context):    testit.addLinks(        title='component_dump.dmp',        type=testit.LinkType.RELATED,        url='https://dumps.example.com/module/some_module_dump',        description='Description'    )@then(&quot;I create a test case&quot;)def create_test_case(context):    testit.addAttachments('pictures/picture.jpg')``````buildoutcfgFeature: Sample  Background:    Given I authorize on the portal  @ExternalId=failed_with_all_annotations  @DisplayName=Failed_test_with_all_annotations  @WorkItemIds=123  @Title=Title_in_the_autotest_card  @Description=Test_with_all_annotations  @Labels=Tag1,Tag2  @Links={&quot;url&quot;:&quot;https://dumps.example.com/module/repository&quot;,&quot;title&quot;:&quot;Repository&quot;,&quot;description&quot;:&quot;Example_of_repository&quot;,&quot;type&quot;:&quot;Repository&quot;}  Scenario: Create new project, section and test case    When I create a project    And I open the project    And I create a section    Then I create a test case```#### Parameterized test```pyfrom behave import whenfrom behave import then@when(&quot;Summing {left:d}+{right:d}&quot;)def step_impl(context, left, right):    context.sum = left + right@then(&quot;Result is {result:d}&quot;)def step_impl(context, result):    assert context.sum == result``````buildoutcfgFeature: Rule  Tests that use Rule  Scenario Outline: Summing    When Summing &lt;left&gt;+&lt;right&gt;    Then Result is &lt;result&gt;    Examples:      | left | right | result |      | 1    | 1     | 3      |      | 9    | 9     | 18     |```# ContributingYou can help to develop the project. Any contributions are **greatly appreciated**.* If you have suggestions for adding or removing projects, feel free  to [open an issue](https://github.com/testit-tms/adapters-python/issues/new) to discuss it, or directly create a pull  request after you edit the *README.md* file with necessary changes.* Please make sure you check your spelling and grammar.* Create individual PR for each suggestion.* Please also read through  the [Code Of Conduct](https://github.com/testit-tms/adapters-python/blob/master/CODE_OF_CONDUCT.md) before posting  your first idea as well.# LicenseDistributed under the Apache-2.0 License.See [LICENSE](https://github.com/testit-tms/adapters-python/blob/master/LICENSE.md) for more information.</longdescription>
</pkgmetadata>