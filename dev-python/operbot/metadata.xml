<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>README######**NAME****OPERBOT** - operator bot**SYNOPSIS**:: operbot [-c|-d|-h] operbot &lt;cmd&gt; [key=value] [key==value]**DESCRIPTION****OPERBOT** is a bot, intended to be programmable, with a client program todevelop modules on and a systemd version with code included to run a 24/7presence in a channel.**OPERBOT** uses object programming, where the methods are seperatedout into functions that use the object as the first argument of that funcion.This gives base class definitions a clean namespace to inherit from and to loadjson data into the object's __dict__. A clean namespace prevents a json loadedattribute to overwrite any methods.**OPERBOT** provides object persistence, an event handler and some basic code toload modules that can provide additional commands.**OPERBOT** has some functionality, mostly feeding RSS feeds into a ircchannel. It can do some logging of txt and take note of things todo.**MISSION**OPERBOT is a contribution back to society, placed in the Public Domain.**INSTALL**:: $ sudo python3 -m pip install operbot --upgrade --force-reinstall**CONFIGURATION**configuration is done by calling the ``cfg`` command of ``operbot``**irc**:: $ operbot cfg server=&lt;server&gt; channel=&lt;channel&gt; nick=&lt;nick&gt; (*) default channel/server is #operbot on localhost**sasl**:: $ operbot pwd &lt;nickservnick&gt; &lt;nickservpass&gt; $ operbot cfg password=&lt;outputfrompwd&gt;**users**as default the user's userhost is not checked when a user types a command in achannel. To enable userhost checking disable users with the ``cfg``command:: $ operbot cfg users=TrueTo add a user to the bot use the met command:: $ operbot met &lt;userhost&gt;to delete a user use the dlt command with a substring of the userhost:: $ operbot dlt &lt;substring&gt;**rss**:: $ operbot rss &lt;url&gt;**RUNNING**this part shows how to run ``operbot``.**cli**without any arguments ``operbot`` doesn't respond, add arguments to have``operbot`` execute a command:: $ operbot $the ``cmd`` command shows you a list of available commands:: $ operbot cmd $ cfg,cmd,dlt,dpl,flt,ftc,met,,mre,nme,pwd,rem,rss,thr,upt**console**use the -c option to start the bot as a console:: $ operbot -c OPERBOT started at Fri Jan 6 01:49:58 2023 &gt; cmd cmd,dlt,dpl,flt,ftc,krn,log,met,mre,nme,pwd,rem,rss,thr,upt &gt;running the bot in the background is done with the -d option:: $ operbot -d**24/7**paste the following into /etc/systemd/system/operbot.service:: [Unit] Description=operator bot After=multi-user.target [Service] Type=forking KillMode=mixed User=operbot Group=operbot DynamicUser=yes StateDirectory=operbot LogsDirectory=operbot CacheDirectory=operbot ExecStart=/usr/local/bin/operbotd CapabilityBoundingSet=CAP_NET_RAW [Install] WantedBy=multi-user.targetand run the following with systemctl:: &gt; sudo systemctl enable operbot --now**COMMANDS**here is a short description of the commands:: cfg - show the irc configuration, also edits the config cmd - show all commands dlt - remove a user dne - flag todo as done dpl - set display items for a rss feed flt - show a list of bot registered to the bus fnd - allow you to display objects on the datastore, read-only json files on disk  ftc - run a rss feed fetching batch log - log some text met - add a users with there irc userhost mre - displays cached output, channel wise. nme - set name of a rss feed pwd - combine a nickserv name/password into a sasl password rem - remove a rss feed by matching is to its url rss - add a feed to fetch, fetcher runs every 5 minutes thr - show the running threads tdo - adds a todo item, no options returns list of todo's upt - show uptime**SYSTEMD**to run the bot after reboot, install the service file and start the serviceby enabling it with ``--now``:: $ sudo cp /usr/local/operbot/operbot.service /etc/systemd/system $ sudo systemctl enable operbot --now (*) default channel/server is #operbot on localhostuse ``operbotctl`` instead of the use ``operbot`` program:: $ sudo operbotctl cfg server=&lt;server&gt; channel=&lt;channel&gt; nick=&lt;nick&gt; $ sudo operbotctl pwd &lt;nickservnick&gt; &lt;nickservpass&gt; $ sudo operbotctl cfg password=&lt;outputfrompwd&gt; $ sudo operbotctl cfg users=True $ sudo operbotctl met &lt;userhost&gt; $ sudo operbotctl rss &lt;url&gt;**PROGRAMMING**The ``operbot`` package provides an Object class, that mimics a dict while usingattribute access and provides a save/load to/from json files on disk.Objects can be searched with database functions and uses read-only filesto improve persistence and a type in filename for reconstruction. Methods arefactored out into functions to have a clean namespace to read JSON data into.basic usage is this:: &gt;&gt;&gt; from operbot.objects import Object &gt;&gt;&gt; o = Object() &gt;&gt;&gt; o.key = &quot;value&quot; &gt;&gt;&gt; o.key 'value'Objects try to mimic a dictionary while trying to be an object with normalattribute access as well. hidden methods are provided, the methods arefactored out into functions like get, items, keys, register, set, updateand values.load/save from/to disk:: &gt;&gt;&gt; from operbot.persist import Object, read, write &gt;&gt;&gt; o = Object() &gt;&gt;&gt; o.key = &quot;value&quot; &gt;&gt;&gt; p = write(o) &gt;&gt;&gt; obj = Object() &gt;&gt;&gt; read(obj, p) &gt;&gt;&gt; obj.key 'value'**AUTHOR**| Bart Thate - operbot100@gmail.com|**COPYRIGHT**``operbot`` is placed in the Public Domain.</longdescription>
</pkgmetadata>