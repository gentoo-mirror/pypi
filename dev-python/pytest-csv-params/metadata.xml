<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![pytest-csv-params](https://docs.codebau.dev/pytest-plugins/pytest-csv-params/_images/pytest-csv-params.png)# pytest-csv-paramsA pytest plugin to parametrize data-driven tests by CSV files.[![Build Status](https://build.codebau.dev/buildStatus/icon?job=pytest-csv-params&amp;style=flat)](https://git.codebau.dev/pytest-plugins/pytest-csv-params)[![PyPI - Downloads](https://img.shields.io/pypi/dw/pytest-csv-params?label=PyPI%20downloads&amp;style=flat&amp;logo=pypi)](https://pypi.org/project/pytest-csv-params/)[![PyPI - Version](https://img.shields.io/pypi/v/pytest-csv-params?label=PyPI%20version&amp;style=flat&amp;logo=pypi)](https://pypi.org/project/pytest-csv-params/)[![PyPI - Status](https://img.shields.io/pypi/status/pytest-csv-params?label=PyPI%20status&amp;style=flat&amp;logo=pypi)](https://pypi.org/project/pytest-csv-params/)[![PyPI - Format](https://img.shields.io/pypi/format/pytest-csv-params?label=PyPI%20format&amp;style=flat&amp;logo=pypi)](https://pypi.org/project/pytest-csv-params/)## Requirements - Python 3.8, 3.9, 3.10, 3.11- pytest &gt;= 7.4There's no operating system dependent code in this plugin, so it should run anywhere where pytest runs.## InstallationSimply install it with pip...```bashpip install pytest-csv-params```... or poetry ...```bashpoetry add --dev pytest-csv-params```## Documentation / User Guide**Detailed documentation can be found under[docs.codebau.dev/pytest-plugins/pytest-csv-params/](https://docs.codebau.dev/pytest-plugins/pytest-csv-params/)**## Usage: Command Line Argument| Argument                | Required      | Description                                                          | Example                                      ||-------------------------|---------------|----------------------------------------------------------------------|----------------------------------------------|| `--csv-params-base-dir` | no (optional) | Define a base dir for all relative-path CSV data files (since 0.1.0) | `pytest --csv-params-base-dir /var/testdata` |## Usage: DecoratorSimply decorate your test method with `@csv_params` (`pytest_csv_params.decorator.csv_params`) and the following parameters:| Parameter        | Type                     | Description                                                                                                                            | Example                                                                                        ||------------------|--------------------------|----------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------|| `data_file`      | `str`                    | The CSV file to use, relative or absolute path                                                                                         | `&quot;/var/testdata/test1.csv&quot;`                                                                    || `base_dir`       | `str` (optional)         | Directory to look up relative CSV files (see `data_file`); overrides the command line argument                                         | `join(dirname(__file__), &quot;assets&quot;)`                                                            || `id_col`         | `str` (optional)         | Column name of the CSV that contains test case IDs                                                                                     | `&quot;ID#&quot;`                                                                                        || `dialect`        | `csv.Dialect` (optional) | CSV Dialect definition (see [Python CSV Documentation](https://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters)) | `csv.excel_tab`                                                                                || `data_casts`     | `dict` (optional)        | Cast Methods for the CSV Data (see &quot;Data Casting&quot; below)                                                                               | `{ &quot;a&quot;: int, &quot;b&quot;: float }`                                                                     || `header_renames` | `dict` (optional)        | Replace headers from the CSV file, so that they can be used as parameters for the test function (since 0.3.0)                          | `{ &quot;Annual Amount of Bananas&quot;: &quot;banana_count&quot;, &quot;Cherry export price&quot;: &quot;cherry_export_price&quot; }` | ## CSV FormatThe default CSV format is:- `\r\n` as line ending- All non-numeric fields are surrounded by `&quot;`- If you need a `&quot;` in the value, use `&quot;&quot;` (double quote)- Fields are separated by comma (`,`)## Usage ExampleThis example uses the CSV example from above.```pythonfrom pytest_csv_params.decorator import csv_params@csv_params(    data_file=&quot;/data/test-lib/cases/addition.csv&quot;,    id_col=&quot;ID#&quot;,    data_casts={        &quot;part_a&quot;: int,        &quot;part_b&quot;: int,        &quot;expected_result&quot;: int,    },)def test_addition(part_a, part_b, expected_result):    assert part_a + part_b == expected_result```Shorthand example (no ID col, only string values):```pythonfrom pytest_csv_params.decorator import csv_params@csv_params(&quot;/data/test-lib/cases/texts.csv&quot;)def test_texts(text_a, text_b, text_c):    assert f&quot;{text_a}:{text_b}&quot; == text_c```### More complex exampleThis example features nearly all things the plugin has to offer. You find this example also in the test cases, see `tests/test_complex_example.py`.The CSV file (`tests/assets/example.csv`):```text&quot;Test ID&quot;,&quot;Bananas shipped&quot;,&quot;Single Banana Weight&quot;,&quot;Apples shipped&quot;,&quot;Single Apple Weight&quot;,&quot;Container Size&quot;&quot;Order-7&quot;,&quot;1503&quot;,&quot;0.5&quot;,&quot;2545&quot;,&quot;0.25&quot;,&quot;1500&quot;&quot;Order-15&quot;,&quot;101&quot;,&quot;0.55&quot;,&quot;1474&quot;,&quot;0.33&quot;,&quot;550&quot;```The Test (`tests/test_complex_example.py`):```pythonfrom math import ceilfrom os.path import join, dirnamefrom pytest_csv_params.decorator import csv_params@csv_params(    data_file=&quot;example.csv&quot;,    base_dir=join(dirname(__file__), &quot;assets&quot;),    id_col=&quot;Test ID&quot;,    header_renames={        &quot;Bananas shipped&quot;: &quot;bananas_shipped&quot;,        &quot;Single Banana Weight&quot;: &quot;banana_weight&quot;,        &quot;Apples shipped&quot;: &quot;apples_shipped&quot;,        &quot;Single Apple Weight&quot;: &quot;apple_weight&quot;,        &quot;Container Size&quot;: &quot;container_size&quot;,    },    data_casts={        &quot;bananas_shipped&quot;: int,        &quot;banana_weight&quot;: float,        &quot;apples_shipped&quot;: int,        &quot;apple_weight&quot;: float,        &quot;container_size&quot;: int,    },)def test_container_size_is_big_enough(    bananas_shipped: int, banana_weight: float, apples_shipped: int, apple_weight: float, container_size: int) -&gt; None:    &quot;&quot;&quot;    This is just an example test case for the documentation.    &quot;&quot;&quot;    gross_weight = (banana_weight * bananas_shipped) + (apple_weight * apples_shipped)    assert ceil(gross_weight) &lt;= container_size```If you decide not to rename the columns, the test would look like this:```python@csv_params(    data_file=&quot;example.csv&quot;,    base_dir=join(dirname(__file__), &quot;assets&quot;),    id_col=&quot;Test ID&quot;,    data_casts={        &quot;Bananas_Shipped&quot;: int,        &quot;Single_Banana_Weight&quot;: float,        &quot;Apples_Shipped&quot;: int,        &quot;Single_Apple_Weight&quot;: float,        &quot;Container_Size&quot;: int,    },)def test_container_size_is_big_enough(    Bananas_Shipped: int, Single_Banana_Weight: float, Apples_Shipped: int, Single_Apple_Weight: float, Container_Size: int) -&gt; None:    ...```## Changelog- A detailed changelog is here:  [docs.codebau.dev/pytest-plugins/pytest-csv-params/pages/changelog.html](https://docs.codebau.dev/pytest-plugins/pytest-csv-params/pages/changelog.html)## Bugs etc.Please send your issues to `csv-params_issues` (at) `jued.de`. Please include the following:- Plugin Version used- Pytest version- Python version with operating systemIt would be great if you could include example code that clarifies your issue.See [CONTRIBUTING.md](CONTRIBUTING.md) for details.## Pull RequestsPull requests are always welcome. Since this Gitea instance is not open to public, just send an e-mail to discuss options.Any changes that are made are to be backed by tests. Please give me a sign if you're going to break the existing API and let us discuss ways to handle that.See [CONTRIBUTING.md](CONTRIBUTING.md) for details.## Where are the sources?The source code is available under [git.codebau.dev/pytest-plugins/pytest-csv-params](https://git.codebau.dev/pytest-plugins/pytest-csv-params).</longdescription>
</pkgmetadata>