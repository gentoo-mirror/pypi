<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytest-mccabe=============.. image:: https://travis-ci.org/The-Compiler/pytest-mccabe.svg?branch=master    :target: https://travis-ci.org/The-Compiler/pytest-mccabepytest plugin for checking cyclomatic complexity of python source with`mccabe`_.**NOTE:** I (`@The-Compiler`_) stopped using this plugin in 2016. While I will still review pull requests and release new versions if needed by the community, I do not have the time to continue maintaining this plugin myself. You might want to consider switching to `pytest-flake8`_ or `tox`_ + `flake8`_ instead (see some `arguments`_ on why)... _mccabe: https://pypi.python.org/pypi/mccabe/.. _@The-Compiler: https://github.com/The-Compiler.. _pytest-flake8: https://github.com/tholo/pytest-flake8.. _tox: https://tox.readthedocs.io/.. _arguments: https://github.com/The-Compiler/pytest-mccabe/issues/7#issuecomment-654698075Usage-----install via::    pip install pytest-mccabeif you then type::    pytest --mccabeevery file ending in ``.py`` will be discovered and run through mccabe,starting from the command line arguments.Simple usage example--------------------Consider you have this (deliberately bad and complex) code:.. code-block:: python    # module.py    import random    import os.path    def some_function():        num = random.random()        if 0 &lt;= num &lt; 0.1:            print(&quot;1&quot;)        elif 0.1 &lt;= num &lt; 0.2:            print(&quot;2&quot;)        elif 0.2 &lt;= num &lt; 0.3:            print(&quot;3&quot;)        elif 0.3 &lt;= num &lt; 0.4:            print(&quot;4&quot;)        elif 0.4 &lt;= num &lt; 0.5:            print(&quot;5&quot;)        elif 0.5 &lt;= num &lt; 0.6:            print(&quot;6&quot;)        elif 0.6 &lt;= num &lt; 0.7:            print(&quot;7&quot;)        elif 0.7 &lt;= num &lt; 0.8:            print(&quot;8&quot;)        elif 0.8 &lt;= num &lt; 0.9:            print(&quot;9&quot;)        elif 0.9 &lt;= num &lt; 1:            print(&quot;10&quot;)Running pytest with pytest-mccabe installed shows you this function isconsidered too complex::   $ pytest -q --mccabe module.py   F   ============================== FAILURES ==============================   ____________________________ mccabe-check ____________________________   .../module.py:4: C901 'some_function' is too complex (11)Configuring mccabe complexity per project and file--------------------------------------------------You may configure the maximum complexity for your projectby adding an ``mccabe-complexity`` entry to pytest config file (e.g.``setup.cfg``) like this:.. code-block:: ini    [pytest]    mccabe-complexity=15Rerunning with the above example will now look better::    $ pytest -q --mccabe foo.py    .    1 passed in 0.00 secondsIf you have some files where you want to set a higher complexity than theproject-wide one, you can start a mccabe-complexity line with a glob-pattern:.. code-block:: ini    [pytest]    mccabe-complexity =        *.py 7        magic.py 10Ignoring certain functions--------------------------You can exclude certain functions from the complexity check by adding commentslike this:.. code-block:: python    def some_function():  # noqa        ...    def another_function():  # pragma: no mccabe        ...(both will work - ``# noqa`` is mainly there for `flake8`_ compatibility).. _flake8: https://pypi.python.org/pypi/flake8Running mccabe checks and no other tests----------------------------------------You can restrict your test run to only perform &quot;mccabe&quot; testsand not any other tests by typing::    pytest --mccabe -m mccabeThis will only run tests that are marked with the &quot;mccabe&quot; keywordwhich is added for the mccabe test items added by this plugin.If you are using pytest &lt; 2.4, then use the following invocationto the same effect::    pytest --mccabe -k mccabeNotes-----The repository of this plugin is at https://github.com/The-Compiler/pytest-mccabeFor more info on pytest see https://pytest.orgThe code is based on Florian Schulze's excellent `pytest-flakes`_ - Thanks!.. _pytest-flakes: https://pypi.python.org/pypi/pytest-flakesChanges=======0.1---- Initial release.1.0---- Drop support for Python 2.6, 3.2, 3.3 and 3.4- Add support for Python 3.5, 3.6 and 3.7- Make this plugin compatible with pytest 4.x and 5.x- Drop support for &quot;setup.py test&quot;- Remove outdated pytest-cache dependency- Various code/CI cleanups2.0---- Drop support for Python 2.7- Drop support for pytest &lt; 5.4- Add support for Python 3.8 (no changes required)- Fix deprecation warnings with pytest &gt;= 5.4 (thanks to Martin Thoma for the PR!)- Various code/CI cleanups</longdescription>
</pkgmetadata>