<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># kadetEasily define and reuse complex Python objects that serialize into JSON or YAML.![GitHub Workflow Status](https://img.shields.io/github/workflow/status/kapicorp/kadet/Python%20lint%20and%20tests)## Example```pythonfrom kadet import BaseObjfrom pprint import pprintships = BaseObj()ships.root.type.container = [&quot;panamax&quot;, &quot;suezmax&quot;, &quot;post-panamax&quot;]ships.root.type.carrier = [&quot;conventional&quot;, &quot;geared&quot;, &quot;gearless&quot;]ships.root.type.tanker = BaseObj.from_yaml(&quot;tankers.yml&quot;)pprint(ships.root)# output{'type': {'carrier': ['conventional',                      'geared',                      'gearless'],          'container': ['panamax',                        'suezmax',                        'post-panamax'],          'tanker': ['oil', 'liquified-gas', 'chemical']}}```## InstallationInstall using `pip install kadet`.## Overview### BaseObjBaseObj implements the basic object that serializes into JSON or YAML.Setting keys in `self.root` means they will be serialized. Keys can be set as an hierarchy of attributes.The `self.body()` method is reserved for setting self.root on instantiation.The example below:```pythonclass MyApp(BaseObj):  def body(self):    self.root.name = &quot;myapp&quot;    self.root.inner.foo = &quot;bar&quot;    self.root.list = [1, 2, 3]yaml.dump(MyApp().dump())```serializes into:```yaml---name: myappinner:  foo: barlist:  - 1  - 2  - 3```The `self.new()` method can be used to define a basic constructor.`self.need()` checks if a key is set and errors if it isn't (with an optional custom error message).`self.optional()` sets a key as optional. Use `default` keyword to set default value when not set.Both `self.new()` and `self.body()` method accept the `istype` keyword to validate value type on runtime.Supports `typing` types.`kwargs` that are passed onto a new instance of BaseObj are always accessible via `self.kwargs``self.new_with()` is an utility method to call `super().new()` while passing kwargs to the super class.In this example, MyApp needs `name` and `foo` to be passed as kwargs.```pythonclass MyApp(BaseObj):  def new(self):    self.need(&quot;name&quot;)    self.need(&quot;foo&quot;, msg=&quot;please provide a value for foo&quot;)    self.optional(&quot;baz&quot;)  def body(self):    self.root.name = self.kwargs.name    self.root.inner.foo = self.kwargs.foo    self.root.list = [1, 2, 3]obj = MyApp(name=&quot;myapp&quot;, foo=&quot;bar&quot;)```### Setting a skeletonDefining a large body with Python can be quite hard and repetitive to read and write.The `self.root_file()` method allows importing a YAML/JSON file to set `self.root`.MyApp's skeleton can be set instead like this:```yaml#skel.yml---name: myappinner:  foo: barlist:  - 1  - 2  - 3``````pythonclass MyApp(BaseObj):  def new(self):    self.need(&quot;name&quot;)    self.need(&quot;foo&quot;, msg=&quot;please provide a value for foo&quot;)    self.root_file(&quot;path/to/skel.yml&quot;)```Extending a MyApp's skeleton is possible just by implementing `self.body()`:```pythonclass MyApp(BaseObj):  def new(self):    self.need(&quot;name&quot;)    self.need(&quot;foo&quot;, msg=&quot;please provide a value for foo&quot;)    self.root_file(&quot;path/to/skel.yml&quot;)  def body(self):    self.set_replicas()    self.root.metadata.labels = {&quot;app&quot;: &quot;mylabel&quot;}  def set_replicas(self):    self.root.spec.replicas = 5```### InheritancePython inheritance will work as expected:```pythonclass MyOtherApp(MyApp):  def new(self):    super().new()  # MyApp's new()    self.need(&quot;size&quot;)  def body(self):    super().body()  #  we want to extend MyApp's body    self.root.size = self.kwargs.size    del self.root.list  # get rid of &quot;list&quot;obj = MyOtherApp(name=&quot;otherapp1&quot;, foo=&quot;bar2&quot;, size=3)yaml.dump(obj.dump())```serializes to:```yaml---name: otherapp1inner:  foo: bar2replicas: 5size: 3```### BaseModelBaseModel integrates Kadet semantics with [Pydantic](https://github.com/pydantic/pydantic)'s BaseModel together with powerful data validation and type hinting features.Just like in BaseObj, keys in `self.root` will be serialized, but kwargs is no longer necessary as BaseModel's parameters are set as attributes in `self`.The `self.body()` method is reserved for setting self.root on instantiation.The example below:```pythonclass Boat(BaseModel):  name: str  # Required  length: int  # Required  description: str = &quot;I am a boat&quot;  # Default description  def body(self):    self.root.name = self.name    self.root.details.length = self.length    self.root.details.description = self.descriptionprint(yaml.dump(Boat(name=&quot;Boaty&quot;, length=600).dump()))---details:  description: I am a boat  length: 600name: Boaty```</longdescription>
</pkgmetadata>