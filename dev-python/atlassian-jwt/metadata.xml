<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>atlassian-jwt (Python)======================`codebeatbadge &lt;https://codebeat.co/projects/bitbucket-org-atlassian-atlassian-jwt-py/ratings&gt;`__`JSON Web Token &lt;https://jwt.io/&gt;`__ (JWT) authentication and encodinglibrary for Python 2 and 3. Extends`pyjwt &lt;https://github.com/jpadilla/pyjwt&gt;`__ to include AtlassianConnect’s custom `query stringhash &lt;https://developer.atlassian.com/blog/2015/01/understanding-jwt/&gt;`__(qsh) claim.This package is on `pypi &lt;https://pypi.python.org/pypi/atlassian-jwt&gt;`__so you can use pip to install it::   pip install atlassian-jwtTenant information------------------This package makes references to Atlassian Connect’s `tenant informationdatastructure &lt;https://developer.atlassian.com/static/connect/docs/latest/modules/lifecycle.html&gt;`__.Specfically the ``clientKey`` and ``sharedSecret`` fields are used whenencoding a JWT token. Here is an example of the complete tenantinformation data structure as is passed to a Connect Addon with the``installed`` lifecycle callback.::   {     &quot;key&quot;: &quot;installed-addon-key&quot;,     &quot;clientKey&quot;: &quot;unique-client-identifier&quot;,     &quot;publicKey&quot;: &quot;MIGf....ZRWzwIDAQAB&quot;,     &quot;sharedSecret&quot;: &quot;a-secret-key-not-to-be-lost&quot;,     &quot;serverVersion&quot;: &quot;server-version&quot;,     &quot;pluginsVersion&quot;: &quot;version-of-connect&quot;,     &quot;baseUrl&quot;: &quot;http://example.atlassian.net&quot;,     &quot;productType&quot;: &quot;jira&quot;,     &quot;description&quot;: &quot;Atlassian JIRA at https://example.atlassian.net&quot;,     &quot;serviceEntitlementNumber&quot;: &quot;SEN-number&quot;,     &quot;eventType&quot;: &quot;installed&quot;   }Where-  *clientKey* is an identifying key for the Atlassian product instance   that the add-on was installed into.-  *sharedSecret* is the string that should be used to sign outgoing JWT   tokens and validate incoming JWT tokens.Authentication--------------This package provides an abstract base class that can be subclassed toprovide authentication to an Atlassian Connect Addon. Here is an exampleof that use::   import atlassian_jwt   class MyAddon(atlassian_jwt.Authenticator):       def __init__(self, tenant_info_store):           super(MyAddon, self).__init__()           self.tenant_info_store = tenant_info_store       def get_shared_secret(self, client_key):           tenant_info = self.tenant_info_store.get(client_key)           return tenant_info['sharedSecret']   my_auth = MyAddon(tenant_info_store)   try:       client_key, claims = my_auth.authenticate(http_method, url, headers)       # authentication succeeded   except atlassian_jwt.DecodeError:       # authentication failed       passEncoding--------Atlassian Connect Addon can make API calls back to the host application.These API calls include a JWT token for authentication. This packageprovides an ``encode_token`` function to do this work. Here is anexample of its use::   import atlassian_jwt   token = atlassian_jwt.encode_token(http_method, url, **tenant_info)   headers = {'Authorization': 'JWT {}'.format(token)}Understanding JWT for Atlassian Connect----------------------------------------  `Understanding JWT for Atlassian   Connect &lt;https://developer.atlassian.com/blog/2015/01/understanding-jwt/&gt;`__-  `Understanding   JWT &lt;https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html&gt;`__-  `Creating a query string   hash &lt;https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html#qsh&gt;`__Running the tests-----------------::   pip3.8 install -e . &amp;&amp; pip3.8 install -r requirements.txt &amp;&amp; python3.8 -m pytest</longdescription>
</pkgmetadata>