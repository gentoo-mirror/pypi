<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>drfexts=======[![GitHub license](https://img.shields.io/github/license/aiden520/drfexts)](https://github.com/aiden520/drfexts/blob/master/LICENSE)[![pypi-version](https://img.shields.io/pypi/v/drfexts.svg)](https://pypi.python.org/pypi/drfexts)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/drfexts)[![PyPI - Django Version](https://img.shields.io/badge/django-%3E%3D3.0-44B78B)](https://www.djangoproject.com/)[![PyPI - DRF Version](https://img.shields.io/badge/djangorestframework-%3E%3D3.0-red)](https://www.django-rest-framework.org)[![Build Status](https://app.travis-ci.com/aiden520/drfexts.svg?branch=master)](https://app.travis-ci.com/aiden520/drfexts)[![Black code style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)**Extensions for Django REST Framework**Installation------------``` {.bash}$ pip install drfexts```Usage-----*views.py*``` {.python}from rest_framework.views import APIViewfrom rest_framework.settings import api_settingsfrom drfexts.viewsets import ExportMixinclass MyView (ExportMixin, APIView):    ...```Ordered Fields--------------By default, a `CSVRenderer` will output fields in sorted order. Tospecify an alternative field ordering you can override the `header`attribute. There are two ways to do this:1)  Create a new renderer class and override the `header` attribute    directly:    &gt; ``` {.python}    &gt; class MyUserRenderer (CSVRenderer):    &gt;     header = ['first', 'last', 'email']    &gt;    &gt; @api_view(['GET'])    &gt; @renderer_classes((MyUserRenderer,))    &gt; def my_view(request):    &gt;     users = User.objects.filter(active=True)    &gt;     content = [{'first': user.first_name,    &gt;                 'last': user.last_name,    &gt;                 'email': user.email}    &gt;                for user in users]    &gt;     return Response(content)    &gt; ```2)  Use the `renderer_context` to override the field ordering on the    fly:    &gt; ``` {.python}    &gt; class MyView (APIView):    &gt;     renderer_classes = [CSVRenderer]    &gt;    &gt;     def get_renderer_context(self):    &gt;         context = super().get_renderer_context()    &gt;         context['header'] = (    &gt;             self.request.GET['fields'].split(',')    &gt;             if 'fields' in self.request.GET else None)    &gt;         return context    &gt;    &gt;     ...    &gt; ```Labeled Fields--------------Custom labels can be applied to the `CSVRenderer` using the `labels`dict attribute where each key corresponds to the header and the valuecorresponds to the custom label for that header.1\) Create a new renderer class and override the `header` and `labels`attribute directly:&gt; ``` {.python}&gt; class MyBazRenderer (CSVRenderer):&gt;     header = ['foo.bar']&gt;     labels = {&gt;         'foo.bar': 'baz'&gt;     }&gt; ```Pagination----------Using the renderer with paginated data is also possible with the new[PaginatedCSVRenderer]{.title-ref} class and should be used with viewsthat paginate dataFor more information about using renderers with Django REST Framework,see the [APIGuide](http://django-rest-framework.org/api-guide/renderers/) or the[Tutorial](http://django-rest-framework.org/tutorial/1-serialization/).Running the tests-----------------To run the tests against the current environment:``` {.bash}$ ./manage.py test```### Changelog1.0.0------   Initial release## Thanks[![PyCharm](docs/pycharm.svg)](https://www.jetbrains.com/?from=drfexts)</longdescription>
</pkgmetadata>