<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Cleo[![Tests](https://github.com/python-poetry/cleo/actions/workflows/tests.yml/badge.svg)](https://github.com/python-poetry/cleo/actions/workflows/tests.yml)[![PyPI version](https://img.shields.io/pypi/v/cleo)](https://pypi.org/project/cleo/)Create beautiful and testable command-line interfaces.## Resources- [Documentation](http://cleo.readthedocs.io)- [Issue Tracker](https://github.com/python-poetry/cleo/issues)## UsageTo make a command that greets you from the command line, create`greet_command.py` and add the following to it:```pythonfrom cleo.commands.command import Commandfrom cleo.helpers import argument, optionclass GreetCommand(Command):    name = &quot;greet&quot;    description = &quot;Greets someone&quot;    arguments = [        argument(            &quot;name&quot;,            description=&quot;Who do you want to greet?&quot;,            optional=True        )    ]    options = [        option(            &quot;yell&quot;,            &quot;y&quot;,            description=&quot;If set, the task will yell in uppercase letters&quot;,            flag=True        )    ]    def handle(self):        name = self.argument(&quot;name&quot;)        if name:            text = f&quot;Hello {name}&quot;        else:            text = &quot;Hello&quot;        if self.option(&quot;yell&quot;):            text = text.upper()        self.line(text)```You also need to create the file `application.py` to run at the command line whichcreates an `Application` and adds commands to it:```python#!/usr/bin/env pythonfrom greet_command import GreetCommandfrom cleo.application import Applicationapplication = Application()application.add(GreetCommand())if __name__ == &quot;__main__&quot;:    application.run()```Test the new command by running the following```bash$ python application.py greet John```This will print the following to the command line:```textHello John```You can also use the `--yell` option to make everything uppercase:```bash$ python application.py greet John --yell```This prints:```textHELLO JOHN```### Coloring the OutputWhenever you output text, you can surround the text with tags to colorits output. For example:```python# blue textself.line(&quot;&lt;info&gt;foo&lt;/info&gt;&quot;)# green textself.line(&quot;&lt;comment&gt;foo&lt;/comment&gt;&quot;)# cyan textself.line(&quot;&lt;question&gt;foo&lt;/question&gt;&quot;)# bold red textself.line(&quot;&lt;error&gt;foo&lt;/error&gt;&quot;)```The closing tag can be replaced by `&lt;/&gt;`, which revokes all formattingoptions established by the last opened tag.It is possible to define your own styles using the `add_style()` method:```pythonself.add_style(&quot;fire&quot;, fg=&quot;red&quot;, bg=&quot;yellow&quot;, options=[&quot;bold&quot;, &quot;blink&quot;])self.line(&quot;&lt;fire&gt;foo&lt;/fire&gt;&quot;)```Available foreground and background colors are: `black`, `red`, `green`,`yellow`, `blue`, `magenta`, `cyan` and `white`.And available options are: `bold`, `underscore`, `blink`, `reverse` and`conceal`.You can also set these colors and options inside the tag name:```python# green textself.line(&quot;&lt;fg=green&gt;foo&lt;/&gt;&quot;)# black text on a cyan backgroundself.line(&quot;&lt;fg=black;bg=cyan&gt;foo&lt;/&gt;&quot;)# bold text on a yellow backgroundself.line(&quot;&lt;bg=yellow;options=bold&gt;foo&lt;/&gt;&quot;)```### Verbosity LevelsCleo has four verbosity levels. These are defined in the `Output` class:| Mode                     | Meaning                            | Console option    || ------------------------ | ---------------------------------- | ----------------- || `Verbosity.QUIET`        | Do not output any messages         | `-q` or `--quiet` || `Verbosity.NORMAL`       | The default verbosity level        | (none)            || `Verbosity.VERBOSE`      | Increased verbosity of messages    | `-v`              || `Verbosity.VERY_VERBOSE` | Informative non essential messages | `-vv`             || `Verbosity.DEBUG`        | Debug messages                     | `-vvv`            |It is possible to print a message in a command for only a specificverbosity level. For example:```pythonif Verbosity.VERBOSE &lt;= self.io.verbosity:    self.line(...)```There are also more semantic methods you can use to test for each of theverbosity levels:```pythonif self.output.is_quiet():    # ...if self.output.is_verbose():    # ...```You can also pass the verbosity flag directly to `line()`.```pythonself.line(&quot;&quot;, verbosity=Verbosity.VERBOSE)```When the quiet level is used, all output is suppressed.### Using ArgumentsThe most interesting part of the commands are the arguments and optionsthat you can make available. Arguments are the strings - separated byspaces - that come after the command name itself. They are ordered, andcan be optional or required. For example, add an optional `last_name`argument to the command and make the `name` argument required:```pythonclass GreetCommand(Command):    name = &quot;greet&quot;    description = &quot;Greets someone&quot;    arguments = [        argument(            &quot;name&quot;,            description=&quot;Who do you want to greet?&quot;,        ),        argument(            &quot;last_name&quot;,            description=&quot;Your last name?&quot;,            optional=True        )    ]    options = [        option(            &quot;yell&quot;,            &quot;y&quot;,            description=&quot;If set, the task will yell in uppercase letters&quot;,            flag=True        )    ]```You now have access to a `last_name` argument in your command:```pythonlast_name = self.argument(&quot;last_name&quot;)if last_name:    text += f&quot; {last_name}&quot;```The command can now be used in either of the following ways:```bash$ python application.py greet John$ python application.py greet John Doe```It is also possible to let an argument take a list of values (imagineyou want to greet all your friends). For this it must be specified atthe end of the argument list:```pythonclass GreetCommand(Command):    name = &quot;greet&quot;    description = &quot;Greets someone&quot;    arguments = [        argument(            &quot;names&quot;,            description=&quot;Who do you want to greet?&quot;,            multiple=True        )    ]    options = [        option(            &quot;yell&quot;,            &quot;y&quot;,            description=&quot;If set, the task will yell in uppercase letters&quot;,            flag=True        )    ]```To use this, just specify as many names as you want:```bash$ python application.py greet John Jane```You can access the `names` argument as a list:```pythonnames = self.argument(&quot;names&quot;)if names:    text = &quot;Hello &quot; + &quot;, &quot;.join(names)```### Using OptionsUnlike arguments, options are not ordered (meaning you can specify themin any order) and are specified with two dashes (e.g. `--yell` - you canalso declare a one-letter shortcut that you can call with a single dashlike `-y`). Options are _always_ optional, and can be setup to accept avalue (e.g. `--dir=src`) or simply as a boolean flag without a value(e.g. `--yell`).&gt; _Tip_: It is also possible to make an option _optionally_ accept a value (so&gt; that `--yell` or `--yell=loud` work). Options can also be configured to&gt; accept a list of values.For example, add a new option to the command that can be used to specifyhow many times in a row the message should be printed:```pythonclass GreetCommand(Command):    name = &quot;greet&quot;    description = &quot;Greets someone&quot;    arguments = [        argument(            &quot;name&quot;,            description=&quot;Who do you want to greet?&quot;,            optional=True        )    ]    options = [        option(            &quot;yell&quot;,            &quot;y&quot;,            description=&quot;If set, the task will yell in uppercase letters&quot;,            flag=True        ),        option(            &quot;iterations&quot;,            description=&quot;How many times should the message be printed?&quot;,            default=1        )    ]```Next, use this in the command to print the message multiple times:```pythonfor _ in range(int(self.option(&quot;iterations&quot;))):    self.line(text)```Now, when you run the task, you can optionally specify a `--iterations`flag:```bash$ python application.py greet John$ python application.py greet John --iterations=5```The first example will only print once, since `iterations` is empty anddefaults to `1`. The second example will print five times.Recall that options don\'t care about their order. So, either of thefollowing will work:```bash$ python application.py greet John --iterations=5 --yell$ python application.py greet John --yell --iterations=5```### Testing CommandsCleo provides several tools to help you test your commands. The mostuseful one is the `CommandTester` class. It uses a special IO class toease testing without a real console:```pythonfrom greet_command import GreetCommandfrom cleo.application import Applicationfrom cleo.testers.command_tester import CommandTesterdef test_execute():    application = Application()    application.add(GreetCommand())    command = application.find(&quot;greet&quot;)    command_tester = CommandTester(command)    command_tester.execute()    assert &quot;...&quot; == command_tester.io.fetch_output()```The `CommandTester.io.fetch_output()` method returns what would havebeen displayed during a normal call from the console.`CommandTester.io.fetch_error()` is also available to get what you havebeen written to the stderr.You can test sending arguments and options to the command by passingthem as a string to the `CommandTester.execute()` method:```pythonfrom greet_command import GreetCommandfrom cleo.application import Applicationfrom cleo.testers.command_tester import CommandTesterdef test_execute():    application = Application()    application.add(GreetCommand())    command = application.find(&quot;greet&quot;)    command_tester = CommandTester(command)    command_tester.execute(&quot;John&quot;)    assert &quot;John&quot; in command_tester.io.fetch_output()```You can also test a whole console application by using the`ApplicationTester` class.### Calling an existing CommandIf a command depends on another one being run before it, instead ofasking the user to remember the order of execution, you can call itdirectly yourself. This is also useful if you want to create a \&quot;meta\&quot;command that just runs a bunch of other commands.Calling a command from another one is straightforward:```pythondef handle(self):    return_code = self.call(&quot;greet&quot;, &quot;John --yell&quot;)    return return_code```If you want to suppress the output of the executed command, you can usethe `call_silent()` method instead.### AutocompletionCleo supports automatic (tab) completion in `bash`, `zsh` and `fish`.By default, your application will have a `completions` command. To register these completions for your application, run one of the following in a terminal (replacing `[program]` with the command you use to run your application):```bash# Bash[program] completions bash | sudo tee /etc/bash_completion.d/[program].bash-completion# Bash - macOS/Homebrew (requires `brew install bash-completion`)[program] completions bash &gt; $(brew --prefix)/etc/bash_completion.d/[program].bash-completion# Zshmkdir ~/.zfuncecho &quot;fpath+=~/.zfunc&quot; &gt;&gt; ~/.zshrc[program] completions zsh &gt; ~/.zfunc/_[program]# Zsh - macOS/Homebrew[program] completions zsh &gt; $(brew --prefix)/share/zsh/site-functions/_[program]# Fish[program] completions fish &gt; ~/.config/fish/completions/[program].fish```</longdescription>
</pkgmetadata>