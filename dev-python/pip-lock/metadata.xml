<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========pip-lock========.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/pip-lock/main.yml?branch=main&amp;style=for-the-badge   :target: https://github.com/adamchainz/pip-lock/actions?workflow=CI.. image:: https://img.shields.io/pypi/v/pip-lock.svg?style=for-the-badge   :target: https://pypi.org/project/pip-lock/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge   :target: https://github.com/psf/black.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white&amp;style=for-the-badge   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commitCheck for differences between requirements.txt files and the current environment.Installation============Install with ``python -m pip install pip-lock``.Python 3.7 to 3.12 supported.----**Working on a Django project?**Check out my book `Boost Your Django DX &lt;https://adamchainz.gumroad.com/l/byddx&gt;`__ which covers many ways to improve your development experience.----Example usage=============Call ``pip_lock.check_requirements()`` at your application startup to verify that the current virtual environment matches your requirements file.This gives instant feedback to developers changing branches etc. who would otherwise experience unexpected behaviour or errors due to out of sync requirements.In a Django project, it makes sense to add the check inside the ``manage.py`` file, which is the projectâ€™s main entrypoint.You can add a call to ``pip_lock.check_requirements()`` after the first import of Django.For example:.. code-block:: python    #!/usr/bin/env python    import os    import sys    from pathlib import Path    def main():        os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;example.settings&quot;)        try:            from django.core.management import execute_from_command_line        except ImportError as exc:            raise ImportError(                &quot;Couldn't import Django. Are you sure it's installed and &quot;                &quot;available on your PYTHONPATH environment variable? Did you &quot;                &quot;forget to activate a virtual environment?&quot;            ) from exc        try:            import pip_lock        except ImportError:            raise ImportError(                &quot;Couldn't import pip-lock. Are you on the right virtualenv and up &quot;                + &quot;to date?&quot;            )        requirements_path = str(Path(__file__).parent / &quot;requirements.txt&quot;)        pip_lock.check_requirements(            requirements_path,            post_text=&quot;\nRun the following:\n\npython -m pip install -r requirements.txt\n&quot;,        )        execute_from_command_line(sys.argv)    if __name__ == &quot;__main__&quot;:        main()API===``check_requirements(requirements_file_path: str, post_text: str='') -&gt; None``------------------------------------------------------------------------------Exit with exit code 1 and output to stderr if there are mismatches between the environment and requirements file.``requirements_file_path`` is the path to the ``requirements.txt`` file - we recommend using an absolute file path.``post_text`` is optional text which is displayed after the stderr message. This can be used to display instructionson how to update the requirements.Example:.. code-block:: python    check_requirements(        &quot;requirements.txt&quot;,        post_text=&quot;\nRun the following on your host machine: \n\n    vagrant provision\n&quot;,    ).. code-block:: bash    There are requirement mismatches with requirements.txt:        * Package Django has version 1.9.10 but you have version 1.9.0 installed.        * Package requests has version 2.11.1 but you have version 2.11.0 installed.        * Package requests-oauthlib is in requirements.txt but not in virtualenv    Run the following on your host machine:        vagrant provision``get_mismatches(requirements_file_path: str) -&gt; dict[str, tuple[str, str | None]]``------------------------------------------------------------------------------------Return a dictionary of package names to tuples of ``(expected_version, actual_version)`` for mismatched packages.``requirements_file_path`` is the path to the ``requirements.txt`` file - we recommend using an absolute file path.Example:.. code-block:: pycon    &gt;&gt;&gt; get_mismatches(&quot;requirements.txt&quot;)    {'django': ('1.10.2', '1.9.0'), 'requests': ('2.11.1', '2.9.2'), 'request-oauthlib': ('0.7.0', None)}</longdescription>
</pkgmetadata>