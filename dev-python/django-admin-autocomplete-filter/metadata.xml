<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/django-admin-autocomplete-filter.svg?kill_cache=1)](https://badge.fury.io/py/django-admin-autocomplete-filter)Django Admin Autocomplete Filter================================A simple Django app to render list filters in django admin using an autocomplete widget. This app is heavily inspired by [dal-admin-filters.](https://github.com/shamanu4/dal_admin_filters)Overview:---------Django comes preshipped with an admin panel which is a great utility to create quick CRUD's.Version 2.0 came with a much needed [`autocomplete_fields`](https://docs.djangoproject.com/en/2.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.autocomplete_fields &quot;autocomplete_fields&quot;) property which uses a select2 widget to load the options asynchronously.  We leverage this in `django-admin-list-filter`.Requirements:-------------Requires Django version &gt;= 2.0Features:-------------* Custom search view/endpoint ([more details](#functionality-to-provide-custom-view-for-search))* `list_filter` Filter Factory support ([more details](#shortcut-for-creating-filters))* Custom widget text ([more details](#customizing-widget-text))* Support for [Grappelli](https://grappelliproject.com/)Installation:-------------You can install it via pip.  To get the latest version clone this repo.```shell scriptpip install django-admin-autocomplete-filter```Add `admin_auto_filters` to your `INSTALLED_APPS` inside settings.py of your project.Usage:------Let's say we have following models:```pythonfrom django.db import modelsclass Artist(models.Model):    name = models.CharField(max_length=128)class Album(models.Model):    name = models.CharField(max_length=64)    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)    cover = models.CharField(max_length=256, null=True, default=None)```And you would like to filter results in `AlbumAdmin` on the basis of `artist`.  You need to define `search fields` in `Artist` and then define filter like this:```pythonfrom django.contrib import adminfrom admin_auto_filters.filters import AutocompleteFilterclass ArtistFilter(AutocompleteFilter):    title = 'Artist' # display title    field_name = 'artist' # name of the foreign key fieldclass ArtistAdmin(admin.ModelAdmin):    search_fields = ['name'] # this is required for django's autocomplete functionality    # ...class AlbumAdmin(admin.ModelAdmin):    list_filter = [ArtistFilter]    # ...```After following these steps you may see the filter as:![](https://raw.githubusercontent.com/farhan0581/django-admin-autocomplete-filter/master/admin_auto_filters/media/screenshot1.png)![](https://raw.githubusercontent.com/farhan0581/django-admin-autocomplete-filter/master/admin_auto_filters/media/screenshot2.png)Functionality to provide a custom view for search:--------------------------------------------------You can also register your custom view instead of using Django admin's `search_results` to control the results in the autocomplete. For this you will need to create your custom view and register the URL in your admin class as shown below:In your `views.py`:```pythonfrom admin_auto_filters.views import AutocompleteJsonViewclass CustomSearchView(AutocompleteJsonView):    def get_queryset(self):        &quot;&quot;&quot;           your custom logic goes here.        &quot;&quot;&quot;        queryset = super().get_queryset()        queryset = queryset.order_by('name')        return queryset```After this, register this view in your admin class:```pythonfrom django.contrib import adminfrom django.urls import pathclass AlbumAdmin(admin.ModelAdmin):    list_filter = [ArtistFilter]    def get_urls(self):        urls = super().get_urls()        custom_urls = [            path('custom_search/', self.admin_site.admin_view(CustomSearchView.as_view(model_admin=self)),                 name='custom_search'),        ]        return custom_urls + urls```Finally, just tell the filter class to use this new view:```pythonfrom django.shortcuts import reversefrom admin_auto_filters.filters import AutocompleteFilterclass ArtistFilter(AutocompleteFilter):    title = 'Artist'    field_name = 'artist'    def get_autocomplete_url(self, request, model_admin):        return reverse('admin:custom_search')```Shortcut for creating filters:------------------------------It's also possible to use the `AutocompleteFilterFactory` shortcut to createfilters on the fly, as shown below. Nested relations are supported too, withno need to specify the model.```pythonfrom django.contrib import adminfrom admin_auto_filters.filters import AutocompleteFilterFactoryclass AlbumAdmin(admin.ModelAdmin):    list_filter = [        AutocompleteFilterFactory('Artist', 'artist', 'admin:custom_search', True)    ]    def get_urls(self):        &quot;&quot;&quot;As above...&quot;&quot;&quot;```Customizing widget text-----------------------You can customize the text displayed in the filter widget, to use somethingother than `str(obj)`. This needs to be configured for both the dropdownendpoint and the widget itself.In your `views.py`, override `display_text`:```pythonfrom admin_auto_filters.views import AutocompleteJsonViewclass CustomSearchView(AutocompleteJsonView):    @staticmethod    def display_text(obj):        return obj.my_str_method()    def get_queryset(self):        &quot;&quot;&quot;As above...&quot;&quot;&quot;```Then use either of two options to customize the text.Option one is to specify the form_field in an AutocompleteFilter in your`admin.py`:```pythonfrom django import formsfrom django.contrib import adminfrom django.shortcuts import reversefrom admin_auto_filters.filters import AutocompleteFilterclass FoodChoiceField(forms.ModelChoiceField):    def label_from_instance(self, obj):        return obj.my_str_method()class ArtistFilter(AutocompleteFilter):    title = 'Artist'    field_name = 'artist'    form_field = FoodChoiceField    def get_autocomplete_url(self, request, model_admin):        return reverse('admin:custom_search')class AlbumAdmin(admin.ModelAdmin):    list_filter = [ArtistFilter]    def get_urls(self):        &quot;&quot;&quot;As above...&quot;&quot;&quot;```Option two is to use an AutocompleteFilterFactory in your `admin.py`add a `label_by` argument:```pythonfrom django.contrib import adminfrom admin_auto_filters.filters import AutocompleteFilterFactoryclass AlbumAdmin(admin.ModelAdmin):    list_filter = [        AutocompleteFilterFactory('Artist', 'artist', 'admin:custom_search', True, label_by='my_str_method')    ]    def get_urls(self):        &quot;&quot;&quot;As above...&quot;&quot;&quot;```Contributing:------------This project is a combined effort of a lot of selfless developers who try to make things easier. Your contribution is most welcome.Please make a pull-request to the branch `pre_release`, make sure your branch does not have any conflicts, and clearly mention the problems or improvements your PR is addressing.License:--------Django Admin Autocomplete Filter is an Open Source project licensed under the terms of the GNU GENERAL PUBLIC LICENSE.</longdescription>
</pkgmetadata>