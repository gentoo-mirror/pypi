<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># prettyformatterPretty formatter enables pretty formatting using aligned and hangingindents for JSON, dataclasses, named tuples, and any custom formattedobject such as Numpy arrays.For the full documentation, see[here](https://simpleart.github.io/prettyformatter/).## InstallationWindows:```py -m pip install prettyformatter```Unix/MacOS:```python3 -m pip install prettyformatter```## Imports```pythonfrom prettyformatter import PrettyClass, PrettyDataclassfrom prettyformatter import pprint, pformat, register```## JSON Data`prettyformatter` works with JSON data.```pythonbatters = [    {&quot;id&quot;: &quot;1001&quot;, &quot;type&quot;: &quot;Regular&quot;},    {&quot;id&quot;: &quot;1002&quot;, &quot;type&quot;: &quot;Chocolate&quot;},    {&quot;id&quot;: &quot;1003&quot;, &quot;type&quot;: &quot;Blueberry&quot;},    {&quot;id&quot;: &quot;1004&quot;, &quot;type&quot;: &quot;Devil's Food&quot;},]toppings = [    {&quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: None},    {&quot;id&quot;: &quot;5002&quot;, &quot;type&quot;: &quot;Glazed&quot;},    {&quot;id&quot;: &quot;5005&quot;, &quot;type&quot;: &quot;Sugar&quot;},    {&quot;id&quot;: &quot;5007&quot;, &quot;type&quot;: &quot;Powdered Sugar&quot;},    {&quot;id&quot;: &quot;5006&quot;, &quot;type&quot;: &quot;Chocolate with Sprinkles&quot;},    {&quot;id&quot;: &quot;5003&quot;, &quot;type&quot;: &quot;Chocolate&quot;},    {&quot;id&quot;: &quot;5004&quot;, &quot;type&quot;: &quot;Maple&quot;},]data = {&quot;id&quot;: &quot;0001&quot;, &quot;type&quot;: &quot;donut&quot;, &quot;name&quot;: &quot;Cake&quot;, &quot;ppu&quot;: 0.55, &quot;batters&quot;: batters, &quot;topping&quot;: toppings}```## `pprint`:`prettyformatter` attempts to compromise between alignment,readability, and horizontal/vertical compactness.Support for JSON data is also as easy as `pprint(json=True)`.```pythonfrom prettyformatter import pprintpprint(data, json=True)&quot;&quot;&quot;{    &quot;id&quot;    : &quot;0001&quot;,    &quot;type&quot;  : &quot;donut&quot;,    &quot;name&quot;  : &quot;Cake&quot;,    &quot;ppu&quot;   : 0.55,    &quot;batters&quot;:        [            {&quot;id&quot;: &quot;1001&quot;, &quot;type&quot;: &quot;Regular&quot;},            {&quot;id&quot;: &quot;1002&quot;, &quot;type&quot;: &quot;Chocolate&quot;},            {&quot;id&quot;: &quot;1003&quot;, &quot;type&quot;: &quot;Blueberry&quot;},            {&quot;id&quot;: &quot;1004&quot;, &quot;type&quot;: &quot;Devil's Food&quot;}        ],    &quot;topping&quot;:        [            {&quot;id&quot;: &quot;5001&quot;, &quot;type&quot;: None},            {&quot;id&quot;: &quot;5002&quot;, &quot;type&quot;: &quot;Glazed&quot;},            {&quot;id&quot;: &quot;5005&quot;, &quot;type&quot;: &quot;Sugar&quot;},            {&quot;id&quot;: &quot;5007&quot;, &quot;type&quot;: &quot;Powdered Sugar&quot;},            {&quot;id&quot;: &quot;5006&quot;, &quot;type&quot;: &quot;Chocolate with Sprinkles&quot;},            {&quot;id&quot;: &quot;5003&quot;, &quot;type&quot;: &quot;Chocolate&quot;},            {&quot;id&quot;: &quot;5004&quot;, &quot;type&quot;: &quot;Maple&quot;}        ]}&quot;&quot;&quot;````pprint` supports the same parameters as `print`, meaning saving tofiles is as easy as `file=file`.```pythonfrom prettyformatter import pprintwith open(&quot;cake.json&quot;, mode=&quot;w&quot;) as file:    pprint(data, json=True, file=file)```## `PrettyDataclass``prettyformatter` supports dataclasses easily.```python@dataclassclass Person(PrettyDataclass):    name: str    birthday: str    phone_number: str    address: strprint(Person(&quot;Jane Doe&quot;, &quot;2001-01-01&quot;, &quot;012-345-6789&quot;, &quot;123 Sample St.&quot;))&quot;&quot;&quot;Person(    name=        &quot;Jane Doe&quot;,    birthday=        &quot;2001-01-01&quot;,    phone_number=        &quot;012-345-6789&quot;,    address=        &quot;123 Sample St.&quot;,)&quot;&quot;&quot;```## `register`Custom formatters for existing classes can be registered.```pythonimport numpy as np@register(np.ndarray)def pformat_ndarray(obj, specifier, depth, indent, shorten, json):    if json:        return pformat(obj.tolist(), specifier, depth, indent, shorten, json)    with np.printoptions(formatter=dict(all=lambda x: format(x, specifier))):        return repr(obj).replace(&quot;\n&quot;, &quot;\n&quot; + &quot; &quot; * depth)pprint(dict.fromkeys(&quot;ABC&quot;, np.arange(9).reshape(3, 3)))&quot;&quot;&quot;{    &quot;A&quot;:        array([[0, 1, 2],               [3, 4, 5],               [6, 7, 8]]),    &quot;B&quot;:        array([[0, 1, 2],               [3, 4, 5],               [6, 7, 8]]),    &quot;C&quot;:        array([[0, 1, 2],               [3, 4, 5],               [6, 7, 8]]),}&quot;&quot;&quot;pprint(dict.fromkeys(&quot;ABC&quot;, np.arange(9).reshape(3, 3)), json=True)&quot;&quot;&quot;{    &quot;A&quot; : [[0, 1, 2], [3, 4, 5], [6, 7, 8]],    &quot;B&quot; : [[0, 1, 2], [3, 4, 5], [6, 7, 8]],    &quot;C&quot; : [[0, 1, 2], [3, 4, 5], [6, 7, 8]]}&quot;&quot;&quot;```</longdescription>
</pkgmetadata>