<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub](https://img.shields.io/badge/GitHub-dtrx--py/dtrx-8da0cb?style=for-the-badge&amp;logo=github)](https://github.com/dtrx-py/dtrx)[![PyPIversion](https://img.shields.io/pypi/v/dtrx.svg?style=for-the-badge&amp;logo=PyPi&amp;logoColor=white)](https://pypi.org/project/dtrx/)[![PyPIpyversions](https://img.shields.io/pypi/pyversions/dtrx.svg?style=for-the-badge&amp;logo=python&amp;logoColor=white&amp;color=ff69b4)](https://pypi.python.org/pypi/dtrx/)[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/dtrx-py/dtrx/main-ci/master?logo=github-actions&amp;logoColor=white&amp;style=for-the-badge)](https://github.com/dtrx-py/dtrx/actions)&lt;!-- toc --&gt;- [dtrx](#dtrx)  - [Changes in this repo](#changes-in-this-repo)  - [Development](#development)    - [Contributions](#contributions)    - [Issues](#issues)    - [Releases](#releases)    - [Invoke + Tests](#invoke--tests)    - [Linting](#linting)    - [Docker](#docker)&lt;!-- tocstop --&gt;# dtrx&quot;**Do The Right eXtraction**&quot; - don't remember what set of `tar` flags or whereto pipe the output to extract it? no worries!TL;DR```bashpip install dtrxdtrx yolo.tar.gz```This is a copy-paste of the original dtrx repo, and **all credit for thissoftware** should be attributed to the original author, Brett Smith @brettcs:https://github.com/brettcs/dtrxSee the original [`README`](README) for more details on what this does!## Changes in this repoThis repo contains some patches on top of the original source to enable using`dtrx` with python3. The original motivation was to enable `dtrx` on Ubuntu20.04+, where the `dtrx` apt package was removed from the default ppas (likelydue to being python2 only).I attempted to get the tests all working via `tox` , for which I used aDockerfile to try to get some kind of environment consistency. You can run thetests by running (requires Docker installed):```bash./test.sh```## Development### ContributionsContributions are gladly welcomed! Feel free to open a Pull Request with anychanges.### IssuesWhen posting an issue, it can be very handy to provide any example files (forexample, the archive that failed to extract) or reproduction steps so we canaddress the problem quickly.### ReleasesReleases are tagged in this repo and published to pypi.org. The release processfor maintainers is the below steps:1. update the version specifier:   ```bash   # update the VERSION value in dtrx/dtrx.py, then:   ❯ git add dtrx/dtrx.py   ❯ git commit  # fill in the commit message   ```2. create an annotated tag for the release. usually good to put a list of new   commits since the previous tag, for example by listing them with:   ```bash   ❯ git log $(git describe --tags --abbrev=0)..HEAD --oneline   # create the annotated tag   ❯ git tag -a &lt;version number&gt;   ```   be sure to push the tag, `git push --tags`.3. use the `make publish-release` command to build and publish to GitHub and   PyPiSee the [`Makefile`](Makefile) for details on what that rule does.### Invoke + TestsThere's some minimal helper scripts for pyinvoke under [`tasks/`](tasks/).To bootstrap, run `pip install -r requirements.txt`, then `inv --list` to seeavailable tasks:```bash❯ inv --listAvailable tasks:  build-docker                build docker image  push-docker                 push docker image  quick-test                  run quick tests in docker  rst2man                     run rst2man in docker  test-nonexistent-file-cmd   run test-nonexistent-file-cmd.sh  tox                         run tox in docker  windows                     just check that windows install fails. pulls a minimal wine docker image to test```To run the tests, run `inv tox`. Takes a couple of minutes to go through all thepython versions.### LintingLinting is provided by [pre-commit](pre-commit.com). To use it, first installthe pre-commit hook:```bashpip install pre-commitpre-commit install```pre-commit will run anytime `git commit` runs (disable with `--no-verify`). Youcan manually run it with `pre-commit run`.### DockerThe tests in CI (and locally) can be run inside a Docker container, whichprovides all the tested python versions.This image is defined at [`Dockerfile`](Dockerfile). It's pushed to the GitHubContainer Registry so it can be managed by the `dtrx-py` organization on GitHub-Docker Hub charges for Organizations.There are Invoke tasks for building + pushing the Docker image, which push botha `:latest` tag as well as a `:2022-09-16` ISO8601 numbered tag. The tag canthen be updated in the GitHub actions runner.&gt; Note: there's a bit of complexity around how the image is used, because the&gt; dtrx tests need to run as a non-root user (there's one test that checks for&gt; error handling when the output directory is not accessible by the current&gt; user). To deal with this, there's an entrypoint script that switches user to a&gt; non-root user, but that still has read/write access to the mounted host volume&gt; (which is the cwd, intended for local development work). This is required on&gt; Linux, where it's nice to have the host+container UID+GUID matching, so any&gt; changes to the mounted host volume have the same permissions set.&gt;&gt; In the GitHub actions runner, we need to run inside the same container (to&gt; have access to the correct python versions for testing), and the github action&gt; for checkout assumes it can write to somewhat arbitrary locations in the file&gt; system (basically root access). So we switch to the non-root user _after_&gt; checkout.</longdescription>
</pkgmetadata>