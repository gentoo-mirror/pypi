<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==============django-upgrade==============.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/django-upgrade/main.yml?branch=main&amp;style=for-the-badge   :target: https://github.com/adamchainz/django-upgrade/actions?workflow=CI.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge  :target: https://github.com/adamchainz/django-upgrade/actions?workflow=CI.. image:: https://img.shields.io/pypi/v/django-upgrade.svg?style=for-the-badge   :target: https://pypi.org/project/django-upgrade/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge   :target: https://github.com/psf/black.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white&amp;style=for-the-badge   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commitAutomatically upgrade your Django project code.Installation============Use **pip**:.. code-block:: sh    python -m pip install django-upgradePython 3.8 to 3.12 supported.(Python 3.12+ is required to correctly apply fixes within f-strings.)pre-commit hook---------------You can also install django-upgrade as a `pre-commit &lt;https://pre-commit.com/&gt;`__ hook.Add the following to the ``repos`` section of your ``.pre-commit-config.yaml`` file (`docs &lt;https://pre-commit.com/#plugins&gt;`__), above any code formatters (such as Black):.. code-block:: yaml    -   repo: https://github.com/adamchainz/django-upgrade        rev: &quot;&quot;  # replace with latest tag on GitHub        hooks:        -   id: django-upgrade            args: [--target-version, &quot;4.1&quot;]   # Replace with Django versionThen, upgrade your entire project:.. code-block:: sh    pre-commit run django-upgrade --all-filesCommit any changes.In the process, your other hooks will run, potentially reformatting django-upgrade’s changes to match your project’s code style.Keep the hook installed in order to upgrade all code added to your project.pre-commit’s ``autoupdate`` command will also let you take advantage of future django-upgrade features.----**Want to improve your code quality?**Check out my book `Boost Your Django DX &lt;https://adamchainz.gumroad.com/l/byddx&gt;`__ which covers using  pre-commit, django-upgrade, and many other tools.I wrote django-upgrade whilst working on the book!----Usage=====``django-upgrade`` is a commandline tool that rewrites files in place.Pass your Django version as ``&lt;major&gt;.&lt;minor&gt;`` to the ``--target-version`` flag.django-upgrade will run all its fixers for versions up to and including the target version.These fixers rewrite your code to avoid ``DeprecationWarning``\s and use some new features.For example:.. code-block:: sh    django-upgrade --target-version 4.1 example/core/models.py example/settings.pyThe ``--target-version`` flag defaults to 2.2, the oldest supported version when this project was created.For more on usage run ``django-upgrade --help``.``django-upgrade`` focuses on upgrading your code and not on making it look nice.Run django-upgrade before formatters like `Black &lt;https://black.readthedocs.io/en/stable/&gt;`__.``django-upgrade`` does not have any ability to recurse through directories.Use the pre-commit integration, globbing, or another technique for applying to many files.Some fixers depend on the names of containing directories to activate, so ensure you run django-upgrade with paths relative to the root of your project.For example, |with git ls-files pipe xargs|_:.. |with git ls-files pipe xargs| replace:: with ``git ls-files | xargs``.. _with git ls-files pipe xargs: https://adamj.eu/tech/2022/03/09/how-to-run-a-command-on-many-files-in-your-git-repository/.. code-block:: sh    git ls-files -z -- '*.py' | xargs -0 django-upgrade --target-version 4.1…or PowerShell’s |ForEach-Object|__:.. |ForEach-Object| replace:: ``ForEach-Object``__ https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/foreach-object.. code-block:: powershell    git ls-files -- '*.py' | %{django-upgrade --target-version 4.1 $_}The full list of fixers is documented below.History=======`django-codemod &lt;https://django-codemod.readthedocs.io/en/latest/&gt;`__ is a pre-existing, more complete Django auto-upgrade tool, written by Bruno Alla.Unfortunately its underlying library `LibCST &lt;https://pypi.org/project/libcst/&gt;`__ is particularly slow, making it annoying to run django-codemod on every commit and in CI.django-upgrade is an experiment in reimplementing such a tool using the same techniques as the fantastic `pyupgrade &lt;https://github.com/asottile/pyupgrade&gt;`__.The tool leans on the standard library’s `ast &lt;https://docs.python.org/3/library/ast.html&gt;`__ and `tokenize &lt;https://docs.python.org/3/library/tokenize.html&gt;`__ modules, the latter via the `tokenize-rt wrapper &lt;https://github.com/asottile/tokenize-rt&gt;`__.This means it will always be fast and support the latest versions of Python.For a quick benchmark: running django-codemod against a medium Django repository with 153k lines of Python takes 133 seconds.pyupgrade and django-upgrade both take less than 0.5 seconds.Fixers======All Versions------------The below fixers run regardless of the target version.Versioned blocks~~~~~~~~~~~~~~~~Removes outdated comparisons and blocks from ``if`` statements comparing to ``django.VERSION``.Supports comparisons of the form:.. code-block:: text    if django.VERSION &lt;comparator&gt; (&lt;X&gt;, &lt;Y&gt;):        ...Where ``&lt;comparator&gt;`` is one of ``&lt;``, ``&lt;=`` , ``&gt;``, or ``&gt;=``, and ``&lt;X&gt;`` and ``&lt;Y&gt;`` are integer literals.A single ``else`` block may be present, but ``elif`` is not supported... code-block:: diff    -if django.VERSION &lt; (4, 1):    -    class RenameIndex:    -        ...    -if django.VERSION &gt;= (4, 1):    -    constraint.validate()    -else:    -    custom_validation(constraint)    +constraint.validate()See also `pyupgrade’s similar feature &lt;https://github.com/asottile/pyupgrade/#python2-and-old-python3x-blocks&gt;`__ that removes outdated code from checks on the Python version.Django 1.7----------`Release Notes &lt;https://docs.djangoproject.com/en/stable/releases/1.7/&gt;`__Admin model registration~~~~~~~~~~~~~~~~~~~~~~~~Rewrites ``admin.site.register()`` calls to the new |@admin.register|_ decorator syntax when eligible.This only applies in files that use ``from django.contrib import admin`` or ``from django.contrib.gis import admin``... |@admin.register| replace:: ``@admin.register()``.. _@admin.register: https://docs.djangoproject.com/en/stable/ref/contrib/admin/#the-register-decorator.. code-block:: diff     from django.contrib import admin    +@admin.register(MyModel1, MyModel2)     class MyCustomAdmin(admin.ModelAdmin):         ...    -admin.site.register(MyModel1, MyCustomAdmin)    -admin.site.register(MyModel2, MyCustomAdmin)This also works with custom admin sites.Such calls are detected heuristically based on three criteria:1. The object whose ``register()`` method is called has a name ending with ``site``.2. The registered class has a name ending with ``Admin``.3. The filename has the word ``admin`` somewhere in its path... code-block:: diff    from myapp.admin import custom_site    from django.contrib import admin    +@admin.register(MyModel)    +@admin.register(MyModel, site=custom_site)    class MyModelAdmin(admin.ModelAdmin):        pass    -custom_site.register(MyModel, MyModelAdmin)    -admin.site.register(MyModel, MyModelAdmin)If a ``register()`` call is preceded by an ``unregister()`` call that includes the same model, it is ignored... code-block:: python    from django.contrib import admin    class MyCustomAdmin(admin.ModelAdmin):        ...    admin.site.unregister(MyModel1)    admin.site.register(MyModel1, MyCustomAdmin)Django 1.9-----------`Release Notes &lt;https://docs.djangoproject.com/en/stable/releases/1.9/&gt;`__``on_delete`` argument~~~~~~~~~~~~~~~~~~~~~~Add ``on_delete=models.CASCADE`` to ``ForeignKey`` and ``OneToOneField``:.. code-block:: diff     from django.db import models    -models.ForeignKey(&quot;auth.User&quot;)    +models.ForeignKey(&quot;auth.User&quot;, on_delete=models.CASCADE)    -models.OneToOneField(&quot;auth.User&quot;)    +models.OneToOneField(&quot;auth.User&quot;, on_delete=models.CASCADE)This fixer also support from-imports:.. code-block:: diff    -from django.db.models import ForeignKey    +from django.db.models import CASCADE, ForeignKey    -ForeignKey(&quot;auth.User&quot;)    +ForeignKey(&quot;auth.User&quot;, on_delete=CASCADE)``DATABASES``~~~~~~~~~~~~~Update the ``DATABASES`` setting backend path ``django.db.backends.postgresql_psycopg2`` to use the renamed version ``django.db.backends.postgresql``.Settings files are heuristically detected as modules with the whole word “settings” somewhere in their path.For example ``myproject/settings.py`` or ``myproject/settings/production.py``... code-block:: diff    DATABASES = {        &quot;default&quot;: {   -        &quot;ENGINE&quot;: &quot;django.db.backends.postgresql_psycopg2&quot;,   +        &quot;ENGINE&quot;: &quot;django.db.backends.postgresql&quot;,            &quot;NAME&quot;: &quot;mydatabase&quot;,            &quot;USER&quot;: &quot;mydatabaseuser&quot;,            &quot;PASSWORD&quot;: &quot;mypassword&quot;,            &quot;HOST&quot;: &quot;127.0.0.1&quot;,            &quot;PORT&quot;: &quot;5432&quot;,        }    }Compatibility imports~~~~~~~~~~~~~~~~~~~~~Rewrites some compatibility imports:* ``django.forms.utils.pretty_name`` in ``django.forms.forms``* ``django.forms.boundfield.BoundField`` in ``django.forms.forms``Whilst mentioned in the `Django 3.1 release notes &lt;https://docs.djangoproject.com/en/3.1/releases/3.1/#id1&gt;`_, these have been possible since Django 1.9... code-block:: diff    -from django.forms.forms import pretty_name    +from django.forms.utils import pretty_nameDjango 1.11-----------`Release Notes &lt;https://docs.djangoproject.com/en/1.11/releases/1.11/&gt;`__Compatibility imports~~~~~~~~~~~~~~~~~~~~~Rewrites some compatibility imports:* ``django.core.exceptions.EmptyResultSet`` in ``django.db.models.query``, ``django.db.models.sql``, and ``django.db.models.sql.datastructures``* ``django.core.exceptions.FieldDoesNotExist`` in ``django.db.models.fields``Whilst mentioned in the `Django 3.1 release notes &lt;https://docs.djangoproject.com/en/3.1/releases/3.1/#id1&gt;`_, these have been possible since Django 1.11... code-block:: diff    -from django.db.models.query import EmptyResultSet    +from django.core.exceptions import EmptyResultSet    -from django.db.models.fields import FieldDoesNotExist    +from django.core.exceptions import FieldDoesNotExistDjango 2.0----------`Release Notes &lt;https://docs.djangoproject.com/en/2.0/releases/2.0/&gt;`__URL’s~~~~~Rewrites imports of ``include()`` and ``url()`` from ``django.conf.urls`` to ``django.urls``.``url()`` calls using compatible regexes are rewritten to the |new path() syntax|_, otherwise they are converted to call ``re_path()``... |new path() syntax| replace:: new ``path()`` syntax.. _new path() syntax: https://docs.djangoproject.com/en/2.0/releases/2.0/#simplified-url-routing-syntax.. code-block:: diff    -from django.conf.urls import include, url    +from django.urls import include, path, re_path     urlpatterns = [    -    url(r'^$', views.index, name='index'),    +    path('', views.index, name='index'),    -    url(r'^about/$', views.about, name='about'),    +    path('about/', views.about, name='about'),    -    url(r'^post/(?P&lt;slug&gt;[-a-zA-Z0-9_]+)/$', views.post, name='post'),    +    path('post/&lt;slug:slug&gt;/', views.post, name='post'),    -    url(r'^weblog', include('blog.urls')),    +    re_path(r'^weblog', include('blog.urls')),     ]Existing ``re_path()`` calls are also rewritten to the ``path()`` syntax when eligible... code-block:: diff    -from django.urls import include, re_path    +from django.urls import include, path, re_path     urlpatterns = [    -    re_path(r'^about/$', views.about, name='about'),    +    path('about/', views.about, name='about'),         re_path(r'^post/(?P&lt;slug&gt;[\w-]+)/$', views.post, name='post'),     ]The compatible regexes that will be converted to use `path converters &lt;https://docs.djangoproject.com/en/stable/topics/http/urls/#path-converters&gt;`__ are the following:* ``[^/]+`` → ``str``* ``[0-9]+`` → ``int``* ``[-a-zA-Z0-9_]+`` → ``slug``* ``[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}`` → ``uuid``* ``.+`` → ``path``These are taken from the path converter classes.For some cases, this change alters the type of the arguments passed to the view, from ``str`` to the converted type (e.g. ``int``).This is not guaranteed backwards compatible: there is a chance that the view expects a string, rather than the converted type.But, pragmatically, it seems 99.9% of views do not require strings, and instead work with either strings or the converted type.Thus, you should test affected paths after this fixer makes any changes.Note that ``[\w-]`` is sometimes used for slugs, but is not converted because it might be incompatible.That pattern matches all Unicode word characters, such as “α”, unlike Django's ``slug`` converter, which only matches Latin characters.``lru_cache``~~~~~~~~~~~~~Rewrites imports of ``lru_cache`` from ``django.utils.functional`` to use ``functools``... code-block:: diff    -from django.utils.functional import lru_cache    +from functools import lru_cache``&lt;func&gt;.allow_tags = True``~~~~~~~~~~~~~~~~~~~~~~~~~~~~Removes assignments of ``allow_tags`` attributes to ``True``.This was an admin feature to allow display functions to return HTML without marking it as unsafe,  deprecated in Django 1.9.In practice, most display functions that return HTML already use |format_html()|_ or similar, so the attribute wasn’t necessary.This only applies in files that use ``from django.contrib import admin`` or ``from django.contrib.gis import admin``... |format_html()| replace:: ``format_html()``.. _format_html(): https://docs.djangoproject.com/en/stable/ref/utils/#django.utils.html.format_html.. code-block:: diff    from django.contrib import admin    def upper_case_name(obj):        ...   -upper_case_name.allow_tags = TrueDjango 2.2----------`Release Notes &lt;https://docs.djangoproject.com/en/2.2/releases/2.2/&gt;`__``HttpRequest.headers``~~~~~~~~~~~~~~~~~~~~~~~Rewrites use of ``request.META`` to read HTTP headers to instead use |request.headers|_.Header lookups are done in lowercase per `the HTTP/2 specification &lt;https://httpwg.org/specs/rfc9113.html#HttpHeaders&gt;`__... |request.headers| replace:: ``request.headers``.. _request.headers: https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.headers.. code-block:: diff    -request.META['HTTP_ACCEPT_ENCODING']    +request.headers['accept-encoding']    -self.request.META.get('HTTP_SERVER', '')    +self.request.headers.get('server', '')    -request.META.get('CONTENT_LENGTH')    +request.headers.get('content-length')    -&quot;HTTP_SERVER&quot; in request.META    +&quot;server&quot; in request.headers``QuerySetPaginator``~~~~~~~~~~~~~~~~~~~~~Rewrites deprecated alias ``django.core.paginator.QuerySetPaginator`` to ``Paginator``... code-block:: diff    -from django.core.paginator import QuerySetPaginator    +from django.core.paginator import Paginator    -QuerySetPaginator(...)    +Paginator(...)``FixedOffset``~~~~~~~~~~~~~~~Rewrites deprecated class ``FixedOffset(x, y))`` to ``timezone(timedelta(minutes=x), y)``Known limitation: this fixer will leave code broken with an ``ImportError`` if ``FixedOffset`` is called with only ``*args`` or ``**kwargs``... code-block:: diff    -from django.utils.timezone import FixedOffset    -FixedOffset(120, &quot;Super time&quot;)    +from datetime import timedelta, timezone    +timezone(timedelta(minutes=120), &quot;Super time&quot;)``FloatRangeField``~~~~~~~~~~~~~~~~~~~Rewrites model and form fields using ``FloatRangeField`` to ``DecimalRangeField``, from the relevant ``django.contrib.postgres`` modules... code-block:: diff     from django.db.models import Model    -from django.contrib.postgres.fields import FloatRangeField    +from django.contrib.postgres.fields import DecimalRangeField     class MyModel(Model):    -    my_field = FloatRangeField(&quot;My range of numbers&quot;)    +    my_field = DecimalRangeField(&quot;My range of numbers&quot;)``TestCase`` class database declarations~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites the ``allow_database_queries`` and ``multi_db`` attributes of Django’s ``TestCase`` classes to the new ``databases`` attribute.This only applies in test files, which are heuristically detected as files with either “test” or “tests” somewhere in their path.Note that this will only rewrite to ``databases = []`` or ``databases = &quot;__all__&quot;``.With multiple databases you can save some test time by limiting test cases to the databases they require (which is why Django made the change)... code-block:: diff     from django.test import SimpleTestCase     class MyTests(SimpleTestCase):    -    allow_database_queries = True    +    databases = &quot;__all__&quot;         def test_something(self):             self.assertEqual(2 * 2, 4)Django 3.0----------`Release Notes &lt;https://docs.djangoproject.com/en/3.0/releases/3.0/&gt;`__``django.utils.encoding`` aliases~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites ``smart_text()`` to ``smart_str()``, and ``force_text()`` to ``force_str()``... code-block:: diff    -from django.utils.encoding import force_text, smart_text    +from django.utils.encoding import force_str, smart_str    -force_text(&quot;yada&quot;)    -smart_text(&quot;yada&quot;)    +force_str(&quot;yada&quot;)    +smart_str(&quot;yada&quot;)``django.utils.http`` deprecations~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites the ``urlquote()``, ``urlquote_plus()``, ``urlunquote()``, and ``urlunquote_plus()`` functions to the ``urllib.parse`` versions.Also rewrites the internal function ``is_safe_url()`` to ``url_has_allowed_host_and_scheme()``... code-block:: diff    -from django.utils.http import urlquote    +from urllib.parse import quote    -escaped_query_string = urlquote(query_string)    +escaped_query_string = quote(query_string)``django.utils.text`` deprecation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites ``unescape_entities()`` with the standard library ``html.escape()``... code-block:: diff    -from django.utils.text import unescape_entities    +import html    -unescape_entities(&quot;some input string&quot;)    +html.escape(&quot;some input string&quot;)``django.utils.translation`` deprecations~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites the ``ugettext()``, ``ugettext_lazy()``, ``ugettext_noop()``, ``ungettext()``, and ``ungettext_lazy()`` functions to their non-u-prefixed versions... code-block:: diff    -from django.utils.translation import ugettext as _, ungettext    +from django.utils.translation import gettext as _, ngettext    -ungettext(&quot;octopus&quot;, &quot;octopodes&quot;, n)    +ngettext(&quot;octopus&quot;, &quot;octopodes&quot;, n)Django 3.1----------`Release Notes &lt;https://docs.djangoproject.com/en/3.1/releases/3.1/&gt;`__``JSONField``~~~~~~~~~~~~~Rewrites imports of ``JSONField`` and related transform classes from those in ``django.contrib.postgres`` to the new all-database versions.Ignores usage in migration files, since Django kept the old class around to support old migrations.You will need to make migrations after this fix makes changes to models... code-block:: diff    -from django.contrib.postgres.fields import JSONField    +from django.db.models import JSONField``PASSWORD_RESET_TIMEOUT_DAYS``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites the setting ``PASSWORD_RESET_TIMEOUT_DAYS`` to ``PASSWORD_RESET_TIMEOUT``, adding the multiplication by the number of seconds in a day.Settings files are heuristically detected as modules with the whole word “settings” somewhere in their path.For example ``myproject/settings.py`` or ``myproject/settings/production.py``... code-block:: diff    -PASSWORD_RESET_TIMEOUT_DAYS = 4    +PASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 4``Signal``~~~~~~~~~~Removes the deprecated documentation-only ``providing_args`` argument... code-block:: diff     from django.dispatch import Signal    -my_cool_signal = Signal(providing_args=[&quot;documented&quot;, &quot;arg&quot;])    +my_cool_signal = Signal()``get_random_string``~~~~~~~~~~~~~~~~~~~~~Injects the now-required ``length`` argument, with its previous default ``12``... code-block:: diff     from django.utils.crypto import get_random_string    -key = get_random_string(allowed_chars=&quot;01234567899abcdef&quot;)    +key = get_random_string(length=12, allowed_chars=&quot;01234567899abcdef&quot;)``NullBooleanField``~~~~~~~~~~~~~~~~~~~~Transforms the ``NullBooleanField()`` model field to ``BooleanField(null=True)``.Ignores usage in migration files, since Django kept the old class around to support old migrations.You will need to make migrations after this fix makes changes to models... code-block:: diff    -from django.db.models import Model, NullBooleanField    +from django.db.models import Model, BooleanField     class Book(Model):    -    valuable = NullBooleanField(&quot;Valuable&quot;)    +    valuable = BooleanField(&quot;Valuable&quot;, null=True)``ModelMultipleChoiceField``~~~~~~~~~~~~~~~~~~~~~~~~~~~~Replace ``list`` error message key with ``list_invalid`` on forms ``ModelMultipleChoiceField``... code-block:: diff    -forms.ModelMultipleChoiceField(error_messages={&quot;list&quot;: &quot;Enter multiple values.&quot;})    +forms.ModelMultipleChoiceField(error_messages={&quot;invalid_list&quot;: &quot;Enter multiple values.&quot;})Django 3.2----------`Release Notes &lt;https://docs.djangoproject.com/en/3.2/releases/3.2/&gt;`__``@admin.action()``~~~~~~~~~~~~~~~~~~~Rewrites functions that have admin action attributes assigned to them to use the new |@admin.action decorator|_.This only applies in files that use ``from django.contrib import admin`` or ``from django.contrib.gis import admin``... |@admin.action decorator| replace:: ``@admin.action()`` decorator.. _@admin.action decorator: https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/#django.contrib.admin.action.. code-block:: diff     from django.contrib import admin     # Module-level actions:    +@admin.action(    +    description=&quot;Publish articles&quot;,    +)     def make_published(modeladmin, request, queryset):         ...    -make_published.short_description = &quot;Publish articles&quot;     # …and within classes:     @admin.register(Book)     class BookAdmin(admin.ModelAdmin):    +    @admin.action(    +        description=&quot;Unpublish articles&quot;,    +        permissions=(&quot;unpublish&quot;,),    +    )         def make_unpublished(self, request, queryset):             ...    -    make_unpublished.allowed_permissions = (&quot;unpublish&quot;,)    -    make_unpublished.short_description = &quot;Unpublish articles&quot;``@admin.display()``~~~~~~~~~~~~~~~~~~~~Rewrites functions that have admin display attributes assigned to them to use the new |@admin.display decorator|_.This only applies in files that use ``from django.contrib import admin`` or ``from django.contrib.gis import admin``... |@admin.display decorator| replace:: ``@admin.display()`` decorator.. _@admin.display decorator: https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.display.. code-block:: diff     from django.contrib import admin     # Module-level display functions:    +@admin.display(    +    description=&quot;NAME&quot;,    +)     def upper_case_name(obj):         ...    -upper_case_name.short_description = &quot;NAME&quot;     # …and within classes:     @admin.register(Book)     class BookAdmin(admin.ModelAdmin):    +    @admin.display(    +        description='Is Published?',    +        boolean=True,    +        ordering='-publish_date',    +    )         def is_published(self, obj):             ...    -    is_published.boolean = True    -    is_published.admin_order_field = '-publish_date'    -    is_published.short_description = 'Is Published?'``BaseCommand.requires_system_checks``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites the ``requires_system_checks`` attributes of management command classes from bools to ``&quot;__all__&quot;`` or ``[]`` as appropriate.This only applies in command files, which are heuristically detected as files with ``management/commands`` somewhere in their path... code-block:: diff     from django.core.management.base import BaseCommand     class Command(BaseCommand):    -    requires_system_checks = True    +    requires_system_checks = &quot;__all__&quot;     class SecondCommand(BaseCommand):    -    requires_system_checks = False    +    requires_system_checks = []``EmailValidator``~~~~~~~~~~~~~~~~~~Rewrites the ``whitelist`` keyword argument to its new name ``allowlist``... code-block:: diff     from django.core.validators import EmailValidator    -EmailValidator(whitelist=[&quot;example.com&quot;])    +EmailValidator(allowlist=[&quot;example.com&quot;])``default_app_config``~~~~~~~~~~~~~~~~~~~~~~Removes module-level ``default_app_config`` assignments from ``__init__.py`` files:.. code-block:: diff    -default_app_config = 'my_app.apps.AppConfig'Django 4.0----------`Release Notes &lt;https://docs.djangoproject.com/en/4.0/releases/4.0/&gt;`__``USE_L10N``~~~~~~~~~~~~Removes the deprecated ``USE_L10N`` setting if set to its default value of ``True``.Settings files are heuristically detected as modules with the whole word “settings” somewhere in their path.For example ``myproject/settings.py`` or ``myproject/settings/production.py``... code-block:: diff    -USE_L10N = True``lookup_needs_distinct``~~~~~~~~~~~~~~~~~~~~~~~~~Renames the undocumented ``django.contrib.admin.utils.lookup_needs_distinct`` to ``lookup_spawns_duplicates``:.. code-block:: diff    -from django.contrib.admin.utils import lookup_needs_distinct    +from django.contrib.admin.utils import lookup_spawns_duplicates    -if lookup_needs_distinct(self.opts, search_spec):    +if lookup_spawns_duplicates(self.opts, search_spec):        ...Django 4.1----------`Release Notes &lt;https://docs.djangoproject.com/en/4.1/releases/4.1/&gt;`__``django.utils.timezone.utc`` deprecations~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites imports of ``django.utils.timezone.utc`` to use ``datetime.timezone.utc``.Requires an existing import of the ``datetime`` module... code-block:: diff     import datetime    -from django.utils.timezone import utc    -calculate_some_datetime(utc)    +calculate_some_datetime(datetime.timezone.utc).. code-block:: diff     import datetime as dt     from django.utils import timezone    -do_a_thing(timezone.utc)    +do_a_thing(dt.timezone.utc)``assertFormError()`` and ``assertFormsetError()``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites calls to these test case methods from the old signatures to the new ones... code-block:: diff    -self.assertFormError(response, &quot;form&quot;, &quot;username&quot;, [&quot;Too long&quot;])    +self.assertFormError(response.context[&quot;form&quot;], &quot;username&quot;, [&quot;Too long&quot;])    -self.assertFormError(response, &quot;form&quot;, &quot;username&quot;, None)    +self.assertFormError(response.context[&quot;form&quot;], &quot;username&quot;, [])    -self.assertFormsetError(response, &quot;formset&quot;, 0, &quot;username&quot;, [&quot;Too long&quot;])    +self.assertFormsetError(response.context[&quot;formset&quot;], 0, &quot;username&quot;, [&quot;Too long&quot;])    -self.assertFormsetError(response, &quot;formset&quot;, 0, &quot;username&quot;, None)    +self.assertFormsetError(response.context[&quot;formset&quot;], 0, &quot;username&quot;, [])Django 4.2----------`Release Notes &lt;https://docs.djangoproject.com/en/4.2/releases/4.2/&gt;`__``STORAGES`` setting~~~~~~~~~~~~~~~~~~~~Combines deprecated settings ``DEFAULT_FILE_STORAGE`` and ``STATICFILES_STORAGE`` into the new ``STORAGES`` setting, within settings files.Only applies if all old settings are defined as strings, at module level, and a ``STORAGES`` setting hasn’t been defined.Settings files are heuristically detected as modules with the whole word “settings” somewhere in their path.For example ``myproject/settings.py`` or ``myproject/settings/production.py``... code-block:: diff    -DEFAULT_FILE_STORAGE = &quot;example.storages.ExtendedFileSystemStorage&quot;    -STATICFILES_STORAGE = &quot;example.storages.ExtendedS3Storage&quot;    +STORAGES = {    +    &quot;default&quot;: {    +        &quot;BACKEND&quot;: &quot;example.storages.ExtendedFileSystemStorage&quot;,    +    },    +    &quot;staticfiles&quot;: {    +        &quot;BACKEND&quot;: &quot;example.storages.ExtendedS3Storage&quot;,    +    },    +}If the module has a ``from ... import *`` with a module path mentioning “settings”, django-upgrade makes an educated guess that a base ``STORAGES`` setting is imported from there.It then uses ``**`` to extend that with any values in the current module:.. code-block:: diff     from example.settings.base import *    -DEFAULT_FILE_STORAGE = &quot;example.storages.S3Storage&quot;    +STORAGES = {    +    **STORAGES,    +    &quot;default&quot;: {    +        &quot;BACKEND&quot;: &quot;example.storages.S3Storage&quot;,    +    },    +}Test client HTTP headers~~~~~~~~~~~~~~~~~~~~~~~~Transforms HTTP headers from the old WSGI kwarg format to use the new ``headers`` dictionary, for:* ``Client`` method like ``self.client.get()``* ``Client`` instantiation* ``RequestFactory`` instantiationRequires Python 3.9+ due to changes in ``ast.keyword``... code-block:: diff    -response = self.client.get(&quot;/&quot;, HTTP_ACCEPT=&quot;text/plain&quot;)    +response = self.client.get(&quot;/&quot;, headers={&quot;accept&quot;: &quot;text/plain&quot;})     from django.test import Client    -Client(HTTP_ACCEPT_LANGUAGE=&quot;fr-fr&quot;)    +Client(headers={&quot;accept-language&quot;: &quot;fr-fr&quot;})     from django.test import RequestFactory    -RequestFactory(HTTP_USER_AGENT=&quot;curl&quot;)    +RequestFactory(headers={&quot;user-agent&quot;: &quot;curl&quot;})``assertFormsetError`` and ``assertQuerysetEqual``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Rewrites calls to these test case methods from the old names to the new ones with capitalized “Set”... code-block:: diff    -self.assertFormsetError(response.context[&quot;form&quot;], &quot;username&quot;, [&quot;Too long&quot;])    +self.assertFormSetError(response.context[&quot;form&quot;], &quot;username&quot;, [&quot;Too long&quot;])    -self.assertQuerysetEqual(authors, [&quot;Brad Dayley&quot;], lambda a: a.name)    +self.assertQuerySetEqual(authors, [&quot;Brad Dayley&quot;], lambda a: a.name)</longdescription>
</pkgmetadata>