<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Prodmodel](https://github.com/prodmodel/prodmodel/blob/master/logo.png)Prodmodel is a [build system](https://en.wikipedia.org/wiki/List_of_build_automation_software) for data science pipelines.Users, testers, contributors are welcome!&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://pypi.org/project/prodmodel&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/prodmodel.svg&quot;&gt;&lt;/img&gt;&lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/prodmodel&quot; alt=&quot;Downloads&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/dw/prodmodel.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/prodmodel/prodmodel/graphs/contributors&quot; alt=&quot;Contributors&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/contributors/prodmodel/prodmodel.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/prodmodel/prodmodel/pulse&quot; alt=&quot;Activity&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/prodmodel/prodmodel.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/prodmodel/prodmodel/issues&quot; alt=&quot;Issues&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/issues/prodmodel/prodmodel.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/prodmodel/prodmodel/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aclosed&quot; alt=&quot;Closed issues&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/issues-closed/prodmodel/prodmodel.svg&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/prodmodel/prodmodel/pulls&quot; alt=&quot;Pulls&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/issues-pr/prodmodel/prodmodel.svg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 align=&quot;center&quot;&gt;  &lt;a href=&quot;#motivation&quot;&gt;Motivation&lt;/a&gt;  &lt;span&gt; · &lt;/span&gt;  &lt;a href=&quot;#concepts&quot;&gt;Concepts&lt;/a&gt;  &lt;span&gt; · &lt;/span&gt;  &lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;  &lt;span&gt; · &lt;/span&gt;  &lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;  &lt;span&gt; · &lt;/span&gt;  &lt;a href=&quot;#contributing&quot;&gt;Contributing&lt;/a&gt;  &lt;span&gt; · &lt;/span&gt;  &lt;a href=&quot;#contact&quot;&gt;Contact&lt;/a&gt;  &lt;span&gt; · &lt;/span&gt;  &lt;a href=&quot;#licence&quot;&gt;Licence&lt;/a&gt;&lt;/h3&gt;## Motivation * Performance. No need to rerun things, everything is cached, switching between multiple versions is super easy. Prodmodel can   **figure out if a particular partial code path has already been executed using a particular piece of data** and just use the cached output. * Easy debugging. Every single dependency - code or data - is version controlled and tracked. * Deploy to production. Models are more than just a file. Prodmodel makes sure that the correct version of label encoders,   feature transformation code and data and model files are all packaged together.## ConceptsA build system is a [DAG](https://en.wikipedia.org/wiki/Directed_acyclic_graph) of `rules` (transformations), `inputs` and `targets`.In Prodmodel `inputs` can be * data, * Python code, * and configuration.A `rule` is transforming any of the above to an output (which can in turn be depended on by other rules). Therefore rules need to bere-executed (and their outputs re-created) if any of their dependencies change. Prodmodel keeps track all of these dependencies.The outputs of the `rules` are `targets`. Every `target` corresponds to an output (e.g. a model or a dataset). These outputsare cached and version controlled.Prodmodel therefore ensures * correctness, by executing every code (e.g. feature transformation, model building, tests) which can potentially be affected by a change, and * performance, by executing only the necessary code, saving time compared to rerunning the whole pipeline.### RulesEvery rule is a statically typed function, where the inputs are targets, data, or configs. The execution ofa rule outputs some data (e.g. a different feature set or a model), which can be used in other rules.In order to use Prodmodel your code has to be structured as functions which the rules can call into.### TargetsTargets are created by rule functions. Targets can be executed to generate output files. `IterableDataTarget` is a special targetwhich can be used as an iterable of `dicts` to make iterating over datasets easier. Regular `DataTargets` can represent anyPython object.## InstallationProdmodel requires at least Python3.6. Use [pip](https://pip.pypa.io/en/stable/) to install prodmodel.```bashpip install prodmodel --user```## UsageCreate a `build.py` file in your data science folder. The build file contains references to your inputs and the build rules you can execute.```pythonfrom prodmodel.rules import rulescsv_data = rules.data_source(file='data.csv', type='csv', dtypes={...})my_model = rules.transform(objects={'data': csv_data}, file='kmeans.py', fn='compute_kmeans')```Now you can build your model by running `prodmodel my_model` from the directory of `build.py`,or `prodmodel &lt;path_to_my_directory&gt;:my_model` from any directory.Prodmodel creates a `.prodmodel` directory under the home directory of the user to store log and config files.### DocumentationCheck out a complete [example project](https://github.com/prodmodel/prodmodel/tree/master/example) for more examples.The complete list of build rules can be found [here](https://github.com/prodmodel/prodmodel/blob/master/doc/api_doc.md).Prodmodel searches for a config file under `&lt;user home dir&gt;/.prodmodel/config`. The config file can be created manuallybased on this [template](https://github.com/prodmodel/prodmodel/blob/master/doc/config).### Arguments * `--force_external`: Some data sources are remote (e.g. an SQL server), therefore tracking changes is not always feasible.   This argument gives the user manual control over when to reload these data sources. * `--cache_data`: Cache local data files if changed. This can be useful for debugging / reproducibility by making sure every   data source used for a specific build is saved. * `--output_format`: One of `none`, `str`, `bytes` and `log`. The output format of the data produced by the build target   written to stdout.### List targets in build file * Run `prodmodel ls &lt;path_to_build&gt;` to list targets in a build file where `&lt;path_to_build&gt;` to the build file or its directory.### Cleaning old cache files * Run `prodmodel clean &lt;target&gt; --cutoff_date=&lt;cutoff datetime&gt;` to delete output cache files of a target created before   the cutoff datetime, which has to be in `%Y-%m-%dT%H:%M%S` (`YYYY-mm-ddTHH:MM:SS`) format.## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.## ContactFeel free to email me at gergely.svigruha@prodmodel.com if you have any question, need help or would like to contribute to the code.## Licence[Apache 2.0](https://github.com/prodmodel/prodmodel/blob/master/LICENCE)</longdescription>
</pkgmetadata>