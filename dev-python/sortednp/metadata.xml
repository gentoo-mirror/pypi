<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sortednp[![Pipeline](https://gitlab.sauerburger.com/frank/sortednp/badges/master/pipeline.svg)](https://gitlab.sauerburger.com/frank/sortednp/-/pipelines)[![Pylint](https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/pylint.svg?job=pylint)](https://gitlab.sauerburger.com/frank/sortednp)[![C++ lint](https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/cxxlint.svg?job=cpplint)](https://gitlab.sauerburger.com/frank/sortednp)[![License](https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/license.svg?job=badges)](https://gitlab.sauerburger.com/frank/sortednp/-/blob/master/LICENSE)[![PyPI](https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/pypi.svg?job=badges)](https://pypi.org/project/sortednp/)Numpy and Numpy arrays are a really great tool. However, intersecting andmerging multiple sorted numpy arrays is rather less performant. The current numpyimplementation concatenates the two arrays and sorts the combination. If youwant to merge or intersect multiple numpy arrays, there is a much faster way,by using the property, that the resulting array is sorted.Sortednp (sorted numpy) operates on sorted numpy arrays to calculate theintersection or the union of two numpy arrays in an efficient way. Theresulting array is again a sorted numpy array, which can be merged orintersected with the next array. The intended use case is that sorted numpyarrays are sorted as the basic data structure and merged or intersected atrequest. Typical applications include information retrieval and search enginesin particular.It is also possible to implement a k-way merging or intersecting algorithm,which operates on an arbitrary number of arrays at the same time. This packageis intended to deal with arrays with $`10^6`$ or $`10^{10}`$ items. Usually, thesearrays are too large to keep more than two of them in memory at the sametime. This package implements methods to merge and intersect multiple arrays,which can be loaded on-demand.## InstallationThere are two different methods to install `sortednp`.### Using `pip` (recommended)You can install the package directly from PyPI using `pip` (here `pip3`). There arepre-compiled wheels for `linux` 32- and 64bit.```bash$ pip3 install sortednp```### Using `setuptools`Alternatively, you can clone the git repository and run thesetup script.```bash$ git clone https://gitlab.sauerburger.com/frank/sortednp.git$ cd sortednp$ python3 setup.py install```### Numpy DependencyThe installation fails in some cases, because of a build-time dependency onnumpy. Usually, the problem can be solved by manually installing a recent numpyversion via `pip3 install -U numpy`.## UsageThe package provides two different kinds of methods. The first class is intendedto operate on two arrays. The second class operates on two or more arrays andcalls the first class of methods internally.### Two-way methodsTwo numpy sorted arrays can be merged with the `merge` method, which takes twonumpy arrays and returns the sorted union of the two arrays.&lt;!-- write merge.py --&gt;```python## merge.pyimport numpy as npimport sortednp as snpa = np.array([0, 3, 4, 6, 7])b = np.array([1, 2, 3, 5, 7, 9])m = snp.merge(a, b)print(m)```If you run this, you should see the union of both arrays as a sorted numpyarray.&lt;!-- console_output --&gt;```python$ python3 merge.py[0 1 2 3 3 4 5 6 7 7 9]```Two sorted numpy arrays can be intersected with the `intersect` method, which takes twonumpy arrays and returns the sorted intersection of the two arrays.&lt;!-- write intersect.py --&gt;```python## intersect.pyimport numpy as npimport sortednp as snpa = np.array([0, 3, 4, 6, 7])b = np.array([1, 2, 3, 5, 7, 9])i = snp.intersect(a, b)print(i)```If you run this, you should see the intersection of both arrays as a sorted numpyarray.&lt;!-- console_output --&gt;```python$ python3 intersect.py[3 7]```Since version 0.4.0, the library provides the `issubset(a, b)` method whichchecks if the array `a` is a subset of `b`, and the `isitem(v, a)` method whichchecks if `value` is contained in array `a`.&lt;!-- write set.py --&gt;```python## set.pyimport numpy as npimport sortednp as snpa = np.array([2, 4, 5, 10])b = np.array([1, 2, 3, 4, 5, 6, 10, 11])print(snp.issubset(a, b))  # a is subset of bprint(snp.issubset(b, a))  # b is not a subset of aprint(snp.isitem(4, a))  # 4 is an item of aprint(snp.isitem(3, a))  # 3 is not an item of a```If you execute this example, you get the expected result: `a` is a subset ob`b`, `4` is a member of `a`.&lt;!-- console_output --&gt;```python$ python3 set.pyTrueFalseTrueFalse```### Returning array indicesThe `intersect` method takes an optional argument `indices` which is `False`by default. If this is set to `True`, the return value consists of theintersection array and a tuple with the indices of the common values for botharrays. The index arrays have the length of the output. The indices show theposition in the input from which the value was copied.&lt;!-- write intersect_indices.py --&gt;```python## intersect_indices.pyimport numpy as npimport sortednp as snpa = np.array([2,4,6,8,10])b = np.array([1,2,3,4])intersection, indices = snp.intersect(a,b, indices=True)print(intersection)print(indices)```The above example gives:&lt;!-- console_output --&gt;```python$ python3 intersect_indices.py[2 4](array([0, 1]), array([1, 3]))```The first line shows the intersection of the two arrays. The second lineprints a tuple with the indices where the common values appeared in the inputarrays. For example, the value `4` is at position `1` in array `a` and at position`3` in array `b`. Since version 0.3.0, the `merge` has to `indices` argument too. The returnedindices have the length of the inputs. The indices show the position in theoutput to which an input value was copied.&lt;!-- write merge_indices.py --&gt;```python## merge_indices.pyimport numpy as npimport sortednp as snpa = np.array([2,4])b = np.array([3,4,5])merged, indices = snp.merge(a,b, indices=True)print(merged)print(indices)```The above example gives:&lt;!-- console_output --&gt;```python$ python3 merge_indices.py[2 3 4 4 5](array([0, 2]), array([1, 3, 4]))```The first line shows that the two arrays have been merged. The second lineprints a tuple with the indices. For example, the value `3` from array `b` canbe found at position `1` in the output.### Duplicate treatmentSince version 0.3.0, sortednp supported multiple different strategies to dealwith duplicated entries.#### Duplicates during intersectingThere are three different duplicate treatments for the intersect method: - `sortednp.DROP`: Ignore any duplicated entries. The output will    contain only unique values. - `sortednp.KEEP_MIN_N`: If an entry occurs `n` times in one input array and `m`   times in the other input array, the output will contain the entry `min(n, m)`   times. - `sortednp.KEEP_MAX_N`: If an entry occurs `n` times in one input array and `m`   times in the other input array, the output will contain the entry `max(n, m)`   times (assuming the entry occurs at least once in both arrays, i.e.   `n &gt; 0` and `m &gt; 0`).The strategy can be selected with the optional `duplicates` argument of`intersect`. The default is `sortednp.KEEP_MIN_N`. Consider the following example.&lt;!-- write intersect_duplicates.py --&gt;```python## intersect_duplicates.pyimport numpy as npimport sortednp as snpa = np.array([2, 4, 4, 5])    # Twiceb = np.array([3, 4, 4, 4, 5]) # Three timesintersect_drop = snp.intersect(a, b, duplicates=snp.DROP)print(intersect_drop)  # Contains a single 4intersect_min = snp.intersect(a, b, duplicates=snp.KEEP_MIN_N)print(intersect_min)  # Contains 4 twiceintersect_max = snp.intersect(a, b, duplicates=snp.KEEP_MAX_N)print(intersect_max)  # Contains 4 three times```The above example gives:&lt;!-- console_output --&gt;```python$ python3 intersect_duplicates.py[4 5][4 4 5][4 4 4 5]```#### Duplicates during mergingThe `merge` method offers three different duplicates treatment strategies: - `sortednp.DROP`: Ignore any duplicated entries. The output will    contain only unique values. - `sortednp.DROP_IN_INPUT`: Ignores duplicated entries in the input arrays   separately. This is the same as ensuring that each input array unique values.   The output contains every value at most twice. - `sortednp.KEEP`: Keep all duplicated entries. If an item occurs `n` times in   one input array and `m` times in the other input array, the output contains   the item `n + m` times.The strategy can be selected with the optional `duplicates`.The default is `sortednp.KEEP`. Consider the following example.&lt;!-- write merge_duplicates.py --&gt;```python## merge_duplicates.pyimport numpy as npimport sortednp as snpa = np.array([2, 4, 4, 5])    # Twiceb = np.array([3, 4, 4, 4, 5]) # Three timesmerge_drop = snp.merge(a, b, duplicates=snp.DROP)print(merge_drop)  # Contains a single 4merge_dii = snp.merge(a, b, duplicates=snp.DROP_IN_INPUT)print(merge_dii)  # Contains 4 twicemerge_keep = snp.merge(a, b, duplicates=snp.KEEP)print(merge_keep)  # Contains 4 five times```The above example gives:&lt;!-- console_output --&gt;```python$ python3 merge_duplicates.py[2 3 4 5][2 3 4 4 5 5][2 3 4 4 4 4 4 5 5]```#### Duplicates during subset checksThe `issubset` method offers two different duplicates treatment strategies: - `sortednp.IGNORE`: Ignore any duplications. The method returns True if each   value in the first array is contained at least once in the second array.   Duplicated entries in the first array do not change the return value. - `sortednp.REPEAT`: For each duplicated item in the first array, require at   least as many items in the second array. If for one value the first array   contains more duplicated entries than the second array, the method returns   False.The strategy can be selected with the optional `duplicates`.The default is `sortednp.IGNORE`. Consider the following example.&lt;!-- write subset_duplicates.py --&gt;```python## subset_duplicates.pyimport numpy as npimport sortednp as snpa = np.array([3, 4, 4, 5])    # Twiceb = np.array([3, 4, 4, 4, 5]) # Three times# Number of occurances ignoredprint(snp.issubset(a, b, duplicates=snp.IGNORE))  # is subsetprint(snp.issubset(b, a, duplicates=snp.IGNORE))  # is subset# Number of in subset must be smaller or equalprint(snp.issubset(a, b, duplicates=snp.REPEAT))  # is subset# three 4s not subset of two 4sprint(snp.issubset(b, a, duplicates=snp.REPEAT))```The above example gives:&lt;!-- console_output --&gt;```python$ python3 subset_duplicates.pyTrueTrueTrueFalse```#### Index tracking and duplicatesTracking indices with the `indices=True` argument is possible while selecting anon-default duplicate treatment strategy. For merging the indices point to theposition in the output array. If the input has duplicates that were skipped, theindex is simply repeated. For example with `snp.DROP`, if the input is `[9, 9,9, 9]`, the index array for this input contains four times the position where`9` is found in the output.Similarly, with `snp.KEEP_MAX_N` and `intersect`, the index of the last item inthe array with less occurrences is duplicates.&lt;!-- write duplicates_index.py --&gt;```python## duplicates_index.pyimport numpy as npimport sortednp as snpa = np.array([2, 4, 4, 5])    # Twiceb = np.array([3, 4, 4, 4, 5]) # Three times# Mergemerge_drop, (index_a, index_b) = snp.merge(a, b,                                           duplicates=snp.DROP,                                           indices=True)print(index_b)# Intersectintersect_max, (index_a, index_b) = snp.intersect(a, b,                                                  duplicates=snp.KEEP_MAX_N,                                                  indices=True)print(index_a)```The above example gives:&lt;!-- console_output --&gt;```python$ python3 duplicates_index.py[1 2 2 2 3][1 2 2 3]```For merging, this means that the three `4`s from the input all appear at same positionin the output, namely position `2`.For the intersect, this means that the second and third occurrence of `4` in theoutput, both came from item at position `2` in the input.### k-way methodsSimilarly, the k-way intersect and merge methods take two or more arrays andperform the merge or intersect operation on its arguments.&lt;!-- write kway_intersect.py --&gt;```python## kway_intersect.pyimport numpy as npimport sortednp as snpa = np.array([0, 3, 4, 6, 7])b = np.array([0, 3, 5, 7, 9])c = np.array([1, 2, 3, 5, 7, 9])d = np.array([2, 3, 6, 7, 8])i = snp.kway_intersect(a, b, c, d)print(i)```If you run this, you should see the intersection of all four arrays as a sorted numpyarray.&lt;!-- console_output --&gt;```python$ python3 kway_intersect.py[3 7]```The k-way merger `sortednp.kway_merge` works analogously. However, the native`numpy` implementation is faster compared to the merge provided by this package.The k-way merger has been added for completeness. The package `heapq` providesefficient methods to merge multiple arrays simultaneously.The methods `kway_merge` and `kway_intersect` accept the optional keywordargument `assume_sorted`. By default, it is set to `True`. If it is set to `False`,the method calls `sort()` on the input arrays before performing the operation.The default should be kept if the arrays are already sorted to save the time ittakes to sort the arrays.Since the arrays might be too large to keep all of them in memory at the sametime, it is possible to pass a `callable` instead of an array to the methods.The `callable` is expected to return the actual array. It is called immediatelybefore the array is required. This reduces the memory consumption.### AlgorithmsIntersections are calculated by iterating both arrays. For a given element inone array, the method needs to search the other and check if the element iscontained. In order to make this more efficient, we can use the fact that thearrays are sorted. There are three search methods, which can be selected via theoptional keyword argument `algorithm`. * `sortednp.SIMPLE_SEARCH`: Search for an element by linearly iterating over the   array element-by-element.   [More Information](https://en.wikipedia.org/wiki/Linear_search). * `sortednp.BINARY_SEARCH`: Slice the remainder of the array in halves and   repeat the procedure on the slice which contains the searched element.   [More Information](https://en.wikipedia.org/wiki/Binary_search_algorithm). * `sortednp.GALLOPING_SEARCH`: First, search for an element linearly, doubling   the step size after each step. If a step goes beyond the search element,   perform a binary search between the last two positions.   [More Information](https://en.wikipedia.org/wiki/Exponential_search).The default is `sortednp.GALLOPING_SEARCH`. The performance of all threealgorithms is compared in the next section. The methods `issubset()` and`isitem()` also support the algorithm keyword.## PerformanceThe performance of the package can be compared with the default implementationof numpy, the intersect1d` method. The ratio of the execution time between sortednp and numpy isshown for various different benchmark tests.The merge or intersect time can be estimated under two different assumptions. Ifthe arrays, which are merged or intersected, are already sorted, one should notconsider the time it takes to sort the random arrays in the benchmark. On theother hand, if one considers a scenario in which the arrays are not sorted, oneshould take the sorting time into account. The benchmarks here on this page,assume that the arrays are already sorted. If you would like to benchmark thepackage and include the sorting time, have a look at the methods defined in`ci/benchmark.py`.The random scattering of the points indicates the uncertainty caused by randomload fluctuations on the benchmark machine (Spikes of serveral orders ofmagnitude usualy mean that there was a shortage of memory and large chunks hadto be moved to SWAP.)### IntersectThe performance of the intersection operation depends on the sparseness of thetwo arrays. For example, if the first element of one of the arrays is largerthan all elements in the other array, only the other array has to be searched(linearly, binarily, or exponentially). Similarly, if the common elements arefar apart in the arrays (sparseness), large chunks of the arrays can be skipped.The arrays in the benchmark contain random (unique) integers. The sparseness isdefined as the average difference between two consecutive elements in one array.The first set of tests studies the performance dependence on the size of thearrays. The second set of tests studies the dependence on the sparseness of thearray for a fixed size of array. Every shows a color-coded comparison of theperformance of intersecting more than two arrays.&lt;table&gt;  &lt;tr&gt;    &lt;th&gt;Test&lt;/th&gt;    &lt;th&gt;Simple Search&lt;/th&gt;    &lt;th&gt;Binary Search&lt;/th&gt;    &lt;th&gt;Galloping Search&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;th&gt;Intersect&lt;/th&gt;    &lt;td&gt; &lt;img src=&quot;https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/bm_intersect_assume_sorted_simple.png?job=benchmark&quot; /&gt; &lt;/td&gt;    &lt;td&gt; &lt;img src=&quot;https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/bm_intersect_assume_sorted_binary.png?job=benchmark&quot; /&gt; &lt;/td&gt;    &lt;td&gt; &lt;img src=&quot;https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/bm_intersect_assume_sorted_galloping.png?job=benchmark&quot; /&gt; &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;th&gt;Sparseness&lt;/th&gt;    &lt;td&gt; &lt;img src=&quot;https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/bm_sparseness_assume_sorted_simple.png?job=benchmark&quot; /&gt; &lt;/td&gt;    &lt;td&gt; &lt;img src=&quot;https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/bm_sparseness_assume_sorted_binary.png?job=benchmark&quot; /&gt; &lt;/td&gt;    &lt;td&gt; &lt;img src=&quot;https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/bm_sparseness_assume_sorted_galloping.png?job=benchmark&quot; /&gt; &lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;### MergeThe following chart shows the performance of merging 2 or more arrays as afunction of the array size. It is assumed that the arrays are already sorted.&lt;img src=&quot;https://gitlab.sauerburger.com/frank/sortednp/-/jobs/artifacts/master/raw/bm_merge_assume_sorted.png?job=benchmark&quot; /&gt; </longdescription>
</pkgmetadata>