<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Control.lab.lyLab Equipment Automation Package## DescriptionUser-friendly package that enables flexible automation an reconfigurable setups for high-throughput experimentation and machine learning.## Package Structure1. Analyse2. Compound3. Control4. Make5. Measure6. Move7. Transfer8. View## Device support- Make  - Multi-channel LED array \[Arduino\]  - Multi-channel spin-coater \[Arduino\]  - Peltier device \[Arduino\]- Measure  - (Keithley) 2450 Source Measure Unit (SMU) Instrument  - (PiezoRobotics) Dynamic Mechanical Analyser (DMA)  - Precision mass balance \[Arduino\]- Move  - (Creality) Ender-3  - (Dobot) M1 Pro  - (Dobot) MG400  - Primitiv \[Arduino\]- Transfer  - (Dobot) Gripper attachments  - (Sartorius) rLINEÂ® dispensing modules  - (TriContinent) C Series syringe pumps  - Peristaltic pump and syringe system \[Arduino\]- View  - (FLIR) AX8 thermal imaging camera - *full functionality in development*  - Web cameras \[General\]## InstallationControl.lab.ly can be found on PyPI and can be installed easily with `pip install`.```shell$ pip install control-lab-ly```## Basic UsageSimple start-up guide for basic usage of the package.### Import desired class```pythonfrom controllably.Move.Cartesian import Endermover = Ender(...)mover.safeMoveTo((x,y,z))```More details for each class / module / package can be explored by using the `help` function.```pythonhelp(controllably.Move)   # help on packagehelp(Ender)               # help on classhelp(mover)               # help on instance/object```Alternatively, you can use the native `pydoc` documentation generator.```shell$ python -m pydoc controllably.Move```&gt;Tip: when using Interactive Python (IPython) (e.g. Jupyter notebooks), add a exclamation mark (`!`) in front of the shell command```python&gt;&gt;&gt; !python -m pydoc controllably.Move&gt;&gt;&gt; !python -m pydoc -b   # Generates a static HTML site to browse package documentation```For basic usage, this is all you need to know. Check the documentation for more details on each respective class.---## Advanced UsageFor more advanced uses, Control.lab.ly provides a host of tools to streamline the development of lab equipment automation.### 0. Import packageThe convention is to import Control-lab-ly as `lab`.```pythonimport controllably as lab```### Contents1. Projects2. Setups3. Decks4. Safety measures5. Plugins### 1. Creating a new projectCreate a `/configs` folder in the base folder of your project repository to store all configuration related files from which the package will read from.\This only has to be done once when you first set up the project folder.```pythonlab.create_configs()```A different address may be used by different machines for the same device. To manage the different addresses used by different machines, you first need your machine's unique identifier.```python# Get your machine's IDprint(lab.Helper.get_node())```A template of `registry.yaml` has also been added to the folder to hold the machine-specific addresses of your connected devices (i.e. COM ports).\Populate the YAML file in the format shown below.```yaml### registry.yaml ###'012345678901234':          # insert your machine's 15-digit ID here (from the above step)    cam_index:              # camera index of the connected imaging devices      __cam_01__: 1         # keep the leading and trailing double underscores      __cam_02__: 0    port:                   # addresses of serial COM ports      __device_01__: COM3   # keep the leading and trailing double underscores      __device_02__: COM16```To find the COM port address(es) of the device(s) that is/are currently connected to your machine, use:```pythonlab.Helper.get_ports()```### 2. Creating a new setupCreate a new folder for the configuration files of your new setup. If you had skipped the previous step of creating a project, calling `lab.create_setup()` will also generate the required file structure. However, be sure to populate your machine ID and device addresses in the `registry.yaml` file.```pythonlab.create_setup(setup_name = &quot;_Setup01_&quot;)# replace &quot;_Setup01_&quot; with the desired name for your setup```This creates a `/_Setup01_` folder that holds the configuration files for the setup, which includes `config.yaml` and `layout.json`.#### 2.1 `config.yaml`Configuration and calibration values for your devices is stored in `config.yaml`.\Each configuration starts with the `name` of your device, then its `module`, `class`, and `settings`.```yaml_Device01_:                                     # name of simple device (user-defined)  module: _module_name_01_                      # device module  class: _submodule_1A_._class_1A_              # device class  settings:    port: __device_01__                         # port addresses defined in registry.yaml    _setting_A_: {'tuple': [300,0,200]}         # use keys to define the type of iterable    _setting_B_: {'array': [[0,1,0],[-1,0,0]]}  # only tuple and np.array supported````Compound` devices are similarly configured. The configuration values for its component devices are defined under the `component_config` setting. The structure of the configuration values for the component devices are similar to that shown above, except indented to fall under the indentation of the `component_config` setting.```yaml_Device02_:                                 # name of 'Compound' device (user-defined)  module: Compound                              class: _submodule_2A_._class_2A_  settings:    _setting_C_: 1                          # other settings for your 'Compound' device    component_config:                       # nest component configuration settings here      _Component01_:                        # name of component        module: _module_name_03_        class: _submodule_3A_._class_3A_        settings:          ip_address: '192.0.0.1'           # IP addresses do not vary between machines      _Component02_:         module: _module_name_04_        class: _submodule_4A_._class_4A_        settings:          _setting_D_: 2                    # settings for your component device```Lastly, you can define shortcuts to quickly access components of `Compound` devices.```yamlSHORTCUTS:  _Nickname1_: '_Device02_._Component01_'  _Nickname2_: '_Device02_._Component02_'```#### 2.2 `layout.json`Layout configuration of your physical workspace (`Deck`) will be stored in `layout.json`. This package uses the same Labware files as those provided by [Opentrons](https://opentrons.com/), which can be found [here](https://labware.opentrons.com/), and custom Labware files can be created [here](https://labware.opentrons.com/create/). Labware files are JSON files that specifies the external and internal dimensions of a Labware block/object.*Optional: if your setup does not involve moving objects around in a pre-defined workspace,  a layout configuration may not be required.*```json{  &quot;reference_points&quot;:{    &quot;1&quot;: [&quot;_x01_&quot;,&quot;_y01_&quot;,&quot;_z01_&quot;],    &quot;2&quot;: [&quot;_x02_&quot;,&quot;_y02_&quot;,&quot;_z02_&quot;]  },  &quot;slots&quot;:{    &quot;1&quot;: {      &quot;name&quot;: &quot;_Labware01_&quot;,      &quot;exclusion_height&quot;: -1,      &quot;filepath&quot;: &quot;_repo_/.../_Labware01_.json&quot;    },    &quot;2&quot;: {      &quot;name&quot;: &quot;_Labware02_&quot;,      &quot;exclusion_height&quot;: 0,      &quot;filepath&quot;: &quot;_repo_/.../_Labware02_.json&quot;    },    &quot;3&quot;: {      &quot;name&quot;: &quot;_Labware03_&quot;,      &quot;exclusion_height&quot;: 10,      &quot;filepath&quot;: &quot;_repo_/.../_Labware03_.json&quot;    }  }}```In `reference_points`, the bottom-left coordinates of each slot in the workspace are defined. Slots are positions where Labware blocks may be placed.In `slots`, the name of each slot and the file reference for Labware block that occupies that slot are defined. The filepath starts with the repository's base folder name.The `exclusion_height` is the height (in mm) above the dimensions of the Labware block to steer clear from when performing move actions. Defaults to -1 (i.e. do not avoid).\*(Note: only applies to final coordinates (i.e. destination). Does not guarantee collision avoidance when using point-to-point move actions. Use* `safeMoveTo()` *instead.)*#### 2.3 Load setupThe initialisation of the setup occurs during the import `setup` from within `configs/_Setup01_`.```python# Add repository folder to sys.pathfrom pathlib import Pathimport sysREPO = '_repo_' # replace &quot;_repo_&quot; with your base directory for the projectROOT = str(Path().absolute()).split(REPO)[0]sys.path.append(f'{ROOT}{REPO}')# Import the initialised setupfrom configs._Setup01_ import setupthis = setupthis._Device01_this._Nickname2_```With `this`, you can access all the devices that you have defined in `configs.yaml`.### 3. Managing a deck*Optional: if your setup does not involve moving objects around in a pre-defined workspace,  a* `Deck` *may not be required.*#### 3.1 Loading a deckTo load the `Deck` from the layout file, use the `loadDeck()` function.```pythonfrom configs._Setup01_ import LAYOUT_FILEthis._Device02_.loadDeck(LAYOUT_FILE)deck = this._Device02.deck``` #### 3.2 Loading a LabwareTo load the `Labware` into the `Deck`, use the `load_labware()` method.```pythondeck.load_labware(...)``` ### 4. Setting up safety measuresYou can optionally set the safety policy for session. This has to be done before importing any of the classes.```pythonlab.set_safety('high')  # Pauses for input before every move actionlab.set_safety('low')   # Waits for countdown before every move action# Import other classes from control-lab-ly only after setting the safety policy```### 5. Using pluginsUser-defined plugins can be integrated into Control.lab.ly without making additions or modifications to the package itself. All classes and functions can be found in `lab.modules`.```pythonprint(lab.modules)  # view the entire package (only those that have been imported during the session)lab.modules.Make.Something.Good.myClass# this expression returns the registered class```#### 5.1 Directly registering a Class or FunctionYou can import the class and register the object using the `Factory.register()` function.```pythonfrom my_module import myClasslab.Factory.register(myClass, &quot;Make.Something.Good&quot;)```#### 5.2 Registering a Python moduleAlternatively, you can automatically register all Classes and Functions in a Python module just by importing it.\Declare a `__where__` global variable to indicate where to register the module.```python### my_module.py__where__ = &quot;Make.Something.Good&quot;                 # Where to register this module todef myClass:                                      # Main body of code goes here  ...from controllably import include_this_moduleinclude_this_module()                             # Registers only the Classes and Functions defined above in this .py file```At the end of the .py file, import and call  the `include_this_module()` function.---## Dependencies- Dash (&gt;=2.7.1)- Impedance (&gt;=1.4.1)- Imutils (&gt;=0.5.4)- Matplotlib (&gt;=3.3.4)- Nest-asyncio (&gt;=1.5.1)- Numpy (&gt;=1.19.5)- Opencv-python (&gt;=4.5.4.58)- Pandas (&gt;=1.2.4)- Plotly (&gt;=5.3.1)- PyModbusTCP (&gt;=0.2.0)- Pyserial (&gt;=3.5)- PySimpleGUI (&gt;=4.60.4)- PyVISA (&gt;=1.12.0)- PyYAML (&gt;=6.0)- Scipy (&gt;=1.6.2)## Contributors[@kylejeanlewis](https://github.com/kylejeanlewis)\[@mat-fox](https://github.com/mat-fox)\[@Quijanove](https://github.com/Quijanove)\[@AniketChitre](https://github.com/AniketChitre)## How to Contribute[Issues](https://github.com/kylejeanlewis/control-lab-le/issues) and feature requests are welcome!## LicenseThis project is distributed under the [MIT License](https://github.com/kylejeanlewis/control-lab-le/blob/main/LICENSE).---# Change Log## Unreleased*Items under development*## 1.0.0.xMajor overhaul in package structure. Standardisation of methods and consolidation of common methods. First released 12 Apr 2023.### Added#### 1.0.0- Usage of Abstract Base Classes (ABCs) to define a base class with abstract methods that needs to be implemented through sub-classing- Usage of Protocols to provide an interface between different classes of objects- Usage of Dataclasses to store complex data - Usage of decorators to modify methods- Introduced different functions to parse the program docstring and find program parameters### Changed#### 1.0.0- Standardised methods and consolidated common methods- Added type hints- Moved Dobot attachments from Mover to Transfer.Substrate- Split GUI Panels into individual files- Split Dobot arms into individual files- Split functions/methods in `misc.py` into individual files.- Changed `_flags` to a public attribute `flags`- Update documentation### Removed#### 1.0.0- Unnecessary commented-out blocks of code## 0.0.4.xIntroduced control for Peltier device and TriContinent Series C syringe pumps. First released 10 Mar 2023.### Added#### 0.0.4- Added control for `Peltier`  - set and get temperatures  - hold temperatures for desired duration  - checks if target temperature has been reached by checking power level lower than a threshold or time passed over a predefined duration, once the temperature is within tolerance  - ability to record temperatures and timestamps - Added control for `TriContinent` and `TriContinentEnsemble`  - single actions such as `empty`, `fill`, `initialise`, move actions, set speeds and valves, and wait  - compound actions such as `aspirate`, `dispense`, and `prime`### Changed#### 0.0.4- Update documentation## 0.0.3.xMinor changes to movement robot safety and pipette control. Introduced control for LED array. First released 08 Mar 2023.### Added#### 0.0.3- Added safety measures for movement actions  - In `Deck`, added exclusion zones when reading the `layout.json` file and new method `is_excluded()` to check if target coordinate is within the exclusion zone  - In `Mover`, update `isFeasible()` method to check if target coordinates violates the deck's exclusion zone  - New function `set_safety()` defines safety modes when starting a new session to pause for input (in &quot;high&quot; safety setting) and to wait for safety countdown (in &quot;low&quot; safety setting)- `Make.Light.LEDArray` for controlling LEDs in the photo-reactor, as well as timing the LED &quot;on&quot; durations### Changed#### 0.0.3.1- Update documentation#### 0.0.3- `Sartorius`  - made the blowout/home optional for the dispense method upon emptying the pipette- Update documentation## 0.0.2.xUpdates in setting up configuration files. First released 24 Feb 2023.### Added#### 0.0.2.2- Added import of `CompoundSetup` class#### 0.0.2- `Deck.at()` method for directly referencing slots using either index numbers or names- New `CompoundSetup` class for common methods of `Compound` devices- New `load_deck()` function to load `Deck` after initialisation### Changed#### 0.0.2.1- Changed template files for `lab.create_setup()`#### 0.0.2- Update documentation## 0.0.1.xFirst release of [Control.lab.ly](https://pypi.org/project/control-lab-ly/) distributed on 23 Feb 2023.### Added- Make  - Multi-channel spin-coater \[Arduino\]- Measure  - (Keithley) 2450 Source Measure Unit (SMU) Instrument  - (PiezoRobotics) Dynamic Mechanical Analyser (DMA)  - Precision mass balance \[Arduino\]- Move  - (Creality) Ender-3  - (Dobot) M1 Pro  - (Dobot) MG400  - Primitiv \[Arduino\]- Transfer  - (Sartorius) rLINEÂ® dispensing modules  - Peristaltic pump and syringe system \[Arduino\]- View  - (FLIR) AX8 thermal imaging camera - full functionality in development   - Web cameras \[General\] - misc  - Helper class for most common actions  - create_configs: make new directory for configuration files  - create_setup: make new directory for specific setup-related files  - load_setup: initialise setup on import during runtime## 0.0.0.xPre-release packaging checks</longdescription>
</pkgmetadata>