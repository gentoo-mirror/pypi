<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Formal Admin Python SDKThis is the Python SDK for the Formal Admin API.## Installing    pip install formal-sdk## Example UseCreate and Get a Native Role```pythonimport osimport formal_sdkif __name__ == '__main__':    dataStoreId = &quot;&quot;    nativeRoleId = &quot;&quot;    nativeRoleSecret = &quot;&quot;    useAsDefault = True    apiKey = os.environ.get('TEST_API_KEY')        newClient = formal_sdk.Client(apiKey)    # Create Native Role    createdRole = newClient.DataStoreClient.CreateNativeRole(dataStoreId=dataStoreId, nativeRoleId=nativeRoleId, nativeRoleSecret=nativeRoleSecret, useAsDefault=useAsDefault)        # Get Native Role        previousRole = newClient.DataStoreClient.GetNativeRole(dataStoreId=dataStoreId, nativeRoleId=nativeRoleId)    print(f'DataStoreId: {previousRole.dataStoreId}')    print(f'NativeRoleId: {previousRole.nativeRoleId}')    print(f'NativeRoleSecret: {previousRole.nativeRoleSecret}')    print(f'UseAsDefault: {previousRole.useAsDefault}')    # Get sidecar tls certificate and private key    sidecarId = &quot;&quot;    certificate, privateKey, fullSecret = newClient.SidecarClient.GetTLSCertificate(sidecarId)``````pythonimport osimport formal_sdkfrom formal_sdk import inventoryif __name__ == '__main__':    datastoreId = &quot;&quot;    apiKey = os.environ.get('API_KEY')    newClient = formal_sdk.Client(apiKey).InventoryClient    column_dict = {        &quot;path&quot;: &quot;database.schema.table.column&quot;,        &quot;name&quot;: &quot;column&quot;,        &quot;dataType&quot;: &quot;string&quot;    }    # Create Inventory Object    createInventoryObjectRequest = inventory.CreateInventoryObjectRequest(        datastoreId=datastoreId,        objectType=&quot;column&quot;,        column=column_dict    )    newClient.CreateInventoryObject(createInventoryObjectRequest)    # Get Inventory Object    getInventoryObjectRequest = inventory.GetInventoryObjectRequest(datastoreId=datastoreId,                                                                               path=&quot;database.schema.table.column&quot;)    inventoryColumn = newClient.GetInventoryObject(getInventoryObjectRequest)    print(f'DatastoreId: {inventoryColumn.datastoreId}')    print(f'Path: {inventoryColumn.path}')    print(f'Name: {inventoryColumn.name}')    print(f'DataType: {inventoryColumn.dataType}')    # Create and Get Inventory Tag    createInventoryTagRequest = inventory.CreateInventoryTagRequest(name=&quot;important&quot;)    createInventoryTagResponse = newClient.CreateInventoryTag(createInventoryTagRequest)    inventoryTags = newClient.GetInventoryTags()    for tag in inventoryTags.tags:        print(f'TagId: {tag.id}')        print(f'TagName: {tag.name}')        print(f'CreatedAt: {tag.createdAt}')        newClient.DeleteInventoryTag(id=tag.id)```</longdescription>
</pkgmetadata>