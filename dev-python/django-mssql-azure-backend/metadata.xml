<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-mssql-azure-backend==========================.. image:: https://img.shields.io/pypi/v/django-mssql-backend.svg   :target: https://pypi.python.org/pypi/django-mssql-backend*django-mssql-azure-backend* is a fork of`django-mssql-backend &lt;https://github.com/ESSolutions/django-mssql-backend&gt;`__Features---------  Supports Django 2.2, 3.0-  Supports Microsoft SQL Server 2008/2008R2, 2012, 2014, 2016, 2017, 2019-  Passes most of the tests of the Django test suite-  Compatible with   `Micosoft ODBC Driver for SQL Server &lt;https://docs.microsoft.com/en-us/sql/connect/odbc/microsoft-odbc-driver-for-sql-server&gt;`__,   `SQL Server Native Client &lt;https://msdn.microsoft.com/en-us/library/ms131321(v=sql.120).aspx&gt;`__,   and `FreeTDS &lt;http://www.freetds.org/&gt;`__ ODBC driversDependencies-------------  Django 2.2 or newer-  pyodbc 3.0 or newerInstallation------------1. Install pyodbc and Django2. Install django-mssql-azure-backend ::    pip install django-mssql-azure-backend3. Now you can point the ``ENGINE`` setting in the settings file used by   your Django application or project to the ``'sql_server.pyodbc'``   module path ::    'ENGINE': 'sql_server.pyodbc'Regex Support-------------django-mssql-backend supports regex using a CLR .dll file. To install it, run ::    python manage.py install_regex_clr {database_name}Configuration-------------Standard Django settings~~~~~~~~~~~~~~~~~~~~~~~~The following entries in a database-level settings dictionaryin DATABASES control the behavior of the backend:-  ENGINE   String. It must be ``&quot;sql_server.pyodbc&quot;``.-  NAME   String. Database name. Required.-  HOST   String. SQL Server instance in ``&quot;server\instance&quot;`` format.-  PORT   String. Server instance port.   An empty string means the default port.-  USER   String. Database user name in ``&quot;user&quot;`` format.   If not given then MS Integrated Security will be used.-  PASSWORD   String. Database user password.-  IS_AZURE_BASED_TOKEN   Boolean. Set this to True if you want to connect azure DB without userid and password   if it false or not given, DB will connect using userid and password-  AUTOCOMMIT   Boolean. Set this to False if you want to disable   Django's transaction management and implement your own.and the following entries are also available in the TEST dictionaryfor any given database-level settings dictionary:-  NAME   String. The name of database to use when running the test suite.   If the default value (``None``) is used, the test database will use   the name &quot;test\_&quot; + ``NAME``.-  COLLATION   String. The collation order to use when creating the test database.   If the default value (``None``) is used, the test database is assigned   the default collation of the instance of SQL Server.-  DEPENDENCIES   String. The creation-order dependencies of the database.   See the official Django documentation for more details.-  MIRROR   String. The alias of the database that this database should   mirror during testing. Default value is ``None``.   See the official Django documentation for more details.OPTIONS~~~~~~~Dictionary. Current available keys are:-  driver   String. ODBC Driver to use (``&quot;ODBC Driver 13 for SQL Server&quot;``,   ``&quot;SQL Server Native Client 11.0&quot;``, ``&quot;FreeTDS&quot;`` etc).   Default is ``&quot;ODBC Driver 13 for SQL Server&quot;``.-  isolation_level   String. Sets `transaction isolation level   &lt;https://docs.microsoft.com/en-us/sql/t-sql/statements/set-transaction-isolation-level-transact-sql&gt;`__   for each database session. Valid values for this entry are   ``READ UNCOMMITTED``, ``READ COMMITTED``, ``REPEATABLE READ``,   ``SNAPSHOT``, and ``SERIALIZABLE``. Default is ``None`` which means   no isolation levei is set to a database session and SQL Server default   will be used.-  dsn   String. A named DSN can be used instead of ``HOST``.-  host_is_server   Boolean. Only relevant if using the FreeTDS ODBC driver under   Unix/Linux.   By default, when using the FreeTDS ODBC driver the value specified in   the ``HOST`` setting is used in a ``SERVERNAME`` ODBC connection   string component instead of being used in a ``SERVER`` component;   this means that this value should be the name of a *dataserver*   definition present in the ``freetds.conf`` FreeTDS configuration file   instead of a hostname or an IP address.   But if this option is present and it's value is ``True``, this   special behavior is turned off.   See http://www.freetds.org/userguide/dsnless.htm for more information.-  unicode_results   Boolean. If it is set to ``True``, pyodbc's *unicode_results* feature   is activated and strings returned from pyodbc are always Unicode.   Default value is ``False``.-  extra_params   String. Additional parameters for the ODBC connection. The format is   ``&quot;param=value;param=value&quot;``.-  collation   String. Name of the collation to use when performing text field   lookups against the database. Default is ``None``; this means no   collation specifier is added to your lookup SQL (the default   collation of your database will be used). For Chinese language you   can set it to ``&quot;Chinese_PRC_CI_AS&quot;``.-  connection_timeout   Integer. Sets the timeout in seconds for the database connection process.   Default value is ``0`` which disables the timeout.-  connection_retries   Integer. Sets the times to retry the database connection process.   Default value is ``5``.-  connection_retry_backoff_time   Integer. Sets the back off time in seconds for reries of   the database connection process. Default value is ``5``.-  query_timeout   Integer. Sets the timeout in seconds for the database query.   Default value is ``0`` which disables the timeout.backend-specific settings~~~~~~~~~~~~~~~~~~~~~~~~~The following project-level settings also control the behavior of the backend:-  DATABASE_CONNECTION_POOLING   Boolean. If it is set to ``False``, pyodbc's connection pooling feature   won't be activated.Example~~~~~~~Here is an example of the database settings for **azure token**:::    DATABASES = {        'default': {            'ENGINE': 'sql_server.pyodbc',            'NAME': 'mydb',            'HOST': 'myserver.database.windows.net',            'PORT': '',            'IS_AZURE_BASED_TOKEN': True            'OPTIONS': {                'driver': 'ODBC Driver 13 for SQL Server',            },        },    }If you are using a **local SQL server**, use the below configuration.::    DATABASES = {        'default': {            'ENGINE': 'sql_server.pyodbc',            'NAME': 'mydb',            'USER': 'user@myserver',            'PASSWORD': 'password',            'HOST': 'myserver.database.windows.net',            'PORT': '',            'IS_AZURE_BASED_TOKEN': False            'OPTIONS': {                'driver': 'ODBC Driver 13 for SQL Server',            },        },    }    # set this to False if you want to turn off pyodbc's connection pooling    DATABASE_CONNECTION_POOLING = FalseLimitations-----------The following features are currently not supported:- Altering a model field from or to AutoField at migration</longdescription>
</pkgmetadata>