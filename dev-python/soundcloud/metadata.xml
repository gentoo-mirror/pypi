<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================soundcloud-python=================.. image:: https://travis-ci.org/soundcloud/soundcloud-python.svg    :target: https://travis-ci.org/soundcloud/soundcloud-pythonA friendly wrapper around the `Soundcloud API`_... _Soundcloud API: http://developers.soundcloud.com/Installation------------To install soundcloud-python, simply: ::    pip install soundcloudOr if you're not hip to the pip: ::    easy_install soundcloudBasic Use---------To use soundcloud-python, you must first create a `Client` instance,passing at a minimum the client id you obtained when you `registeredyour app`_: ::    import soundcloud    client = soundcloud.Client(client_id=YOUR_CLIENT_ID)The client instance can then be used to fetch or modify resources: ::    tracks = client.get('/tracks', limit=10)    for track in tracks:        print track.title    app = client.get('/apps/124')    print app.permalink_url.. _registered your app: http://soundcloud.com/you/apps/Authentication--------------All `OAuth2 authorization flows`_ supported by the Soundcloud API areavailable in soundcloud-python. If you only need read-only access topublic resources, simply provide a client id when creating a `Client`instance: ::    import soundcloud    client = soundcloud.Client(client_id=YOUR_CLIENT_ID)    track = client.get('/tracks/30709985')    print track.titleIf however, you need to access private resources or modify a resource,you will need to have a user delegate access to your application. To dothis, you can use one of the following OAuth2 authorization flows.**Authorization Code Flow**The `Authorization Code Flow`_ involves redirecting the user to soundcloud.comwhere they will log in and grant access to your application: ::    import soundcloud    client = soundcloud.Client(        client_id=YOUR_CLIENT_ID,        client_secret=YOUR_CLIENT_SECRET,        redirect_uri='http://yourapp.com/callback'    )    redirect(client.authorize_url())Note that `redirect_uri` must match the value you provided when youregistered your application. After granting access, the user will beredirected to this uri, at which point your application can exchangethe returned code for an access token: ::    access_token, expires, scope, refresh_token = client.exchange_token(        code=request.args.get('code'))    render_text(&quot;Hi There, %s&quot; % client.get('/me').username)**User Credentials Flow**The `User Credentials Flow`_ allows you to exchange a username andpassword for an access token. Be cautious about using this flow, it'snot very kind to ask your users for their password, but may benecessary in some use cases: ::    import soundcloud    client = soundcloud.Client(        client_id=YOUR_CLIENT_ID,        client_secret=YOUR_CLIENT_SECRET,        username='jane@example.com',        password='janespassword'    )    print client.get('/me').username.. _`OAuth2 authorization flows`: http://developers.soundcloud.com/docs/api/authentication.. _`Authorization Code Flow`: http://developers.soundcloud.com/docs/api/authentication#user-agent-flow.. _`User Credentials Flow`: http://developers.soundcloud.com/docs/api/authentication#user-credentials-flowExamples--------Resolve a track and print its id: ::    import soundcloud    client = soundcloud.Client(client_id=YOUR_CLIENT_ID)    track = client.get('/resolve', url='http://soundcloud.com/forss/flickermood')    print track.idUpload a track: ::    import soundcloud    client = soundcloud.Client(access_token=&quot;a valid access token&quot;)    track = client.post('/tracks', track={        'title': 'This is a sample track',        'sharing': 'private',        'asset_data': open('mytrack.mp4', 'rb')    })    print track.titleStart following a user: ::    import soundcloud    client = soundcloud.Client(access_token=&quot;a valid access token&quot;)    user_id_to_follow = 123    client.put('/me/followings/%d' % user_id_to_follow)Update your profile description: ::    import soundcloud    client = soundcloud.Client(access_token=&quot;a valid access token&quot;)    client.put('/me', user={        'description': &quot;a new description&quot;    })Proxy Support-------------If you're behind a proxy, you can specify it when creating a client: ::    import soundcloud    proxies = {        'http': 'example.com:8000'    }    client = soundcloud.Client(access_token=&quot;a valid access token&quot;,                               proxies=proxies)The proxies kwarg is a dictionary with protocols as keys and host:port as values.Redirects---------By default, 301 or 302 redirects will be followed for idempotent methods. There are certain cases where you may want to disable this, for example: ::    import soundcloud    client = soundcloud.Client(access_token=&quot;a valid access token&quot;)    track = client.get('/tracks/293/stream', allow_redirects=False)    print track.locationWill print a tracks streaming URL. If ``allow_redirects`` was omitted, a binary stream would be returned instead.Running Tests-------------To run the tests, run: ::    $ pip install -r requirements.txt    $ nosetests --with-doctest    ..................Success!Contributing------------Contributions are awesome. You are most welcome to `submit issues`_,or `fork the repository`_.soundcloud-python is published under a `BSD License`_... _`submit issues`: https://github.com/soundcloud/soundcloud-python/issues.. _`fork the repository`: https://github.com/soundcloud/soundcloud-python.. _`BSD License`: https://github.com/soundcloud/soundcloud-python/blob/master/README</longdescription>
</pkgmetadata>