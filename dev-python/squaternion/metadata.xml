<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Inscription_on_Broom_Bridge_%28Dublin%29_regarding_the_discovery_of_Quaternions_multiplication_by_Sir_William_Rowan_Hamilton.jpg/800px-Inscription_on_Broom_Bridge_%28Dublin%29_regarding_the_discovery_of_Quaternions_multiplication_by_Sir_William_Rowan_Hamilton.jpg)# Simple Quaternions (`squaternion`)[![Actions Status](https://github.com/MomsFriendlyRobotCompany/squaternion/workflows/CheckPackage/badge.svg)](https://github.com/MomsFriendlyRobotCompany/squaternion/actions)![GitHub](https://img.shields.io/github/license/MomsFriendlyRobotCompany/squaternion)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/squaternion)![PyPI](https://img.shields.io/pypi/v/squaternion)![PyPI - Downloads](https://img.shields.io/pypi/dm/squaternion?color=aqua)Generally I don't need all of the capabilities (or complexity) of `quaternion`math libraries. Basically I just need a way to convert between Euler andQuaternion representations and have a nice way to print them out.This has basically no imports outside of standard python 3.x libraries.It should be easier to get on embedded python systems without having to build`numpy`. Also, this tries to be *fast* by using a frozen class.## Install```pip install squaternion```## Usage```pythonfrom squaternion import Quaternion# if you know the values you want Quaternion(w, x, y, z), note this is a# attr frozen class so it is immutable once createdq = Quaternion(1,0,0,0)# multiplication for scalar (int, double) and with another quaternionq = Quaternion(1,2,3,4)q*q =&gt; Quaternion(w=-28, x=4, y=6, z=8)3*q =&gt; Quaternion(w=3, x=6, y=9, z=12)q*3.0 =&gt; Quaternion(w=3.0, x=6.0, y=9.0, z=12.0)# Addition and subtractionq = Quaternion(1,2,3,4)q+q =&gt; Quaternion(w=2, x=4, y=6, z=8)# numpy can do some things, but it will change the tuple to an array, so you might# need to transform it back to a quaternionq = Quaternion(1,2,3,4)np.dot(q,q) =&gt; 30np.sqrt(np.dot(q,q)) =&gt; 5.477225575051661q/np.sqrt(np.dot(q,q)) =&gt; array([0.18257419, 0.36514837, 0.54772256, 0.73029674])Quaternion(*(q/np.sqrt(np.dot(q,q)))) =&gt; Quaternion(w=0.18257418583505536, x=0.3651483716701107, y=0.5477225575051661, z=0.7302967433402214)# however you typically don't think in 4 dimensions, so create from# euler angles from_eluer(roll, pitch, yaw), default is radians, but set# degrees true if giving degreesq = Quaternion.from_euler(0, -90, 100, degrees=True)# can get the euler angles back out in degrees (set to True)e = q.to_euler(degrees=True)d = q.to_dict()# iterate through valuesfor i in q:    print(f&quot;{i}&quot;)# indexing like a namedtuplez = q[3]z = q[-1]v = q[-3:]w = q[0]# class propertiesv = q.vector     # returns a tuple (x,y,z)s = q.scalar     # returns a double (w)n = q.normalize  # returns unit quaternionm = q.magnitude  # returns the magnitude of the quaterniona = q.angle      # returns angle of rotation in radiansa = q.axis       # returns axis of rotation# useful attr functionsq == q    # compare will return Trueq != q    # will return Falseprint(q)  # pretty printw = q.wx = q.xy = q.yz = q.zprint(f&quot;{q:.4f}&quot;) # print only 4 decimal places```## AlternativesThis is a basic library that converts between Euler angles and Quaternions.There are other libraries that do so much more listed below ... but I don'tneed all of that.- [scipy.spatial.transform.Rotation](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html#scipy.spatial.transform.Rotation): has everything you could want, with lots of imports- [tinyquaternion](https://github.com/rezaahmadzadeh/tinyquaternion): appears to be more functional but needs `numpy`- [quaternions](https://github.com/mjsobrep/quaternions): another good lightweight quaternion package- [pyrr](https://github.com/adamlwgriffiths/Pyrr): seems good, integrated with `numpy`## References- [Wikipedia Convert Between Quaternions and Euler Angles](https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles)- [Wikipedia Euler Angle Definitions](https://en.wikipedia.org/wiki/Euler_angles#Conventions_2)- [Wikipedia Gimbal Lock](https://en.wikipedia.org/wiki/Gimbal_lock)# MIT LicenseCopyright (c) 2018 Kevin WalchkoPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>