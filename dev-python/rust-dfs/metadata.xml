<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://github.com/alteryx/rust_dfs/actions?query=branch%3Amain+workflow%3ATests&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/alteryx/rust_dfs/actions/workflows/tests.yml/badge.svg&quot; alt=&quot;Tests&quot; /&gt;&lt;/a&gt;- [Documentation](https://alteryx.github.io/rust_dfs/rust_dfs/)# Deep Feature Synthesis in RustThis is a project to implement the [Deep Feature Synthesis](https://github.com/alteryx/featuretools/blob/main/featuretools/synthesis/dfs.py) algorithm in Rust.## Roadmap- [X] (30JUL2022[^1]) Parity with Featuretools creating feature definitions (no calculation) on single table- [ ] Parity with Featuretools creating feature definitions (no calculation) on multiple tables- [ ] Explore Calculation on single table using Polars- [ ] Explore Calculation on multiple tables using Polars[^1]: 3 primitives are not yet passing tests. `'diff_datetime', 'geomidpoint', 'age'`## Running in Python`pip install rust_dfs`Using from python```python# Import Featuretools, rust_dfs, and some other utility functionsimport featuretools as ftfrom rust_dfs.utils import *from rust_dfs import generate_features, compare_featuresets, Featurefrom rust_dfs.generate_fake_dataframe import generate_pandas_fake_dataframe# Generate a fake dataset with 4 Numeric columnsdf = generate_pandas_fake_dataframe(    n_rows=10,    col_defs=[        (&quot;Numeric&quot;, 4),    ])# pick some primitivesf_primitives = [    ft.primitives.GreaterThan,    # ft.primitives.LessThan]# or use all of them# f_primitives = list(ft.primitives.utils.get_transform_primitives().values())# convert datafame to an entitysetes = df_to_es(df)# run dfs with features_only=Trueft_feats = ft.dfs(    entityset=es,     target_dataframe_name=&quot;nums&quot;,     trans_primitives=f_primitives,     features_only=True,    max_depth=1)# ft_feats = [&lt;Feature: F_0&gt;, &lt;Feature: F_1&gt;, &lt;Feature: F_0 &gt; F_1&gt;, &lt;Feature: F_1 &gt; F_0&gt;]# Convert back into a format that we can use to compare with rustc_feats = list(convert_features(ft_feats).values())# Now run using Rust# convert featuretools primitives to rust primitivesr_primitives = convert_primitives(f_primitives)# convert dataframe to rust featuresr_features = dataframe_to_features(es.dataframes[0])# generate engineered features using Rust (create new features only)r_derived_feats = generate_features(r_features, r_primitives)a,b = compare_featuresets(c_feats, r_derived_feats)print(&quot;=== Features generated by Featuretools, that were NOT generated by Rust ===&quot;)print(a)print()print(&quot;=== Features generated by Rust, that were NOT generated by Featuretools ===&quot;)print(b)# Persist Rust Features to diskFeature.save_features(r_derived_feats, &quot;all_features.json&quot;)```## Develop GuideInstall `pipenv````pip install pipenvpipenv installpipenv shell```Ensure `Cargo.toml` is configured```toml[lib]name = &quot;rust_dfs&quot;crate-type = [&quot;cdylib&quot;]```Run `maturin````maturin develop```## Run `main.rs`To run as a rust binary:```cargo run --no-default-features```## Test```cargo test --no-default-features```Why `--no-default-features`? Because we are using `pyo3` and is describe [here](https://pyo3.rs/main/building_and_distribution.html):&gt;Finally, don't forget that on MacOS the extension-module feature will cause cargo test to fail without the --no-default-features flag (see the FAQ).</longdescription>
</pkgmetadata>