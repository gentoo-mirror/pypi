<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Model Tooling library[![Build Status](https://github.com/andersbogsnes/ml_tooling/workflows/Integration/badge.svg)](https://github.com/andersbogsnes/ml_tooling/actions?workflow=Tests)[![codecov](https://codecov.io/gh/andersbogsnes/ml_tooling/branch/main/graph/badge.svg)](https://codecov.io/gh/andersbogsnes/ml_tooling)[![Python 3](https://img.shields.io/pypi/pyversions/ml_tooling.svg)](https://pyup.io/repos/github/andersbogsnes/ml_tooling/)[![CodeFactor](https://www.codefactor.io/repository/github/andersbogsnes/ml_tooling/badge)](https://www.codefactor.io/repository/github/andersbogsnes/ml_tooling)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)## InstallationUse pip to install:`pip install ml-tooling`Or use conda`conda install -c conda-forge ml_tooling`## TestWe use `tox` for managing build and test environments, to install `tox` run:`pip install tox`And to run tests:`tox -e py`## Example usageDefine a class using ModelData and implement the two required methods.Here we simply implement a linear regression on the Boston dataset using sklearn.datasets```pythonfrom sklearn.datasets import fetch_california_housingfrom sklearn.linear_model import LinearRegressionfrom ml_tooling import Modelfrom ml_tooling.data import Dataset# Define a new data classclass CaliforniaData(Dataset):    def load_prediction_data(self, idx):        x, _ = fetch_california_housing(return_X_y=True)        return x[idx] # Return given observation    def load_training_data(self):        return fetch_california_housing(return_X_y=True)# Instantiate a model with an estimatorlinear_california = Model(LinearRegression())# Instantiate the datadata = CaliforniaData()# Split training and test datadata.create_train_test()# Score the estimator yielding a Result objectresult = linear_california.score_estimator(data)# Visualize the resultresult.plot.prediction_error()print(result)&lt;Result LinearRegression: {'r2': 0.68}&gt;```## Links* Documentation: https://ml-tooling.readthedocs.io* Releases: https://pypi.org/project/ml_tooling/* Code: https://github.com/andersbogsnes/ml_tooling* Issue Tracker: https://github.com/andersbogsnes/ml_tooling/issues</longdescription>
</pkgmetadata>