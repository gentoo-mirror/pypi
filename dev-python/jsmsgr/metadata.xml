<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JsmsgrAn easy way to publish transactional messages (SMS, EMAIL, etc.) to Semaphore for their publication!# RequirementsThis app requires two other apps to work properly:* jsm-user-services;* django-stomp.Both apps must have been configured properly. Their configs are as follows, including `jsmsgr` lib:```python######################### Django settings file #########################import osINSTALLED_APPS = [    &quot;...&quot;,    &quot;django_stomp&quot;,    &quot;jsm_user_services&quot;,    &quot;jsmsgr&quot;,  # add this lib to the INSTALLED_APPS]# django-stomp configSTOMP_SERVER_HOST = os.getenv(&quot;STOMP_SERVER_HOST&quot;)STOMP_SERVER_PORT = os.getenv(&quot;STOMP_SERVER_PORT&quot;)STOMP_SERVER_USER = os.getenv(&quot;STOMP_SERVER_USER&quot;)STOMP_SERVER_PASSWORD = os.getenv(&quot;STOMP_SERVER_PASSWORD&quot;)STOMP_USE_SSL = os.getenv(&quot;STOMP_USE_SSL&quot;, &quot;True&quot;)LISTENER_CLIENT_ID = os.getenv(&quot;STOMP_CONSUMPTION_QUEUE&quot;)# jsm-user-services configUSER_API_HOST = os.environ.get(&quot;USER_API_HOST&quot;)```# Installing```pip install jsmsgr   ```# SetupIn order to use the lib, add the following env variable which sets the final semaphore destination name:```pythonimport osJSMSGR_DESTINATION=os.getenv(&quot;JSMSGR_DESTINATION&quot;)```# Using the lib## Publishing a single message```pythonfrom jsmsgr.api import send_msg_to_usermsg_dict = {    &quot;msg&quot;: &quot;Hello, there, ###_USER_NAME_###&quot;,    &quot;type&quot;: &quot;sms&quot;,    &quot;external_id&quot;: &quot;external123&quot;,    &quot;callback_mo_destination&quot;: &quot;/queue/mo&quot;,    &quot;to_user_id&quot;: &quot;a58c4853-2fa5-4891-80c7-f48287dbf403&quot;,  # user_id to send the msg to}send_msg_to_user(msg_dict)  # creates a publisher internallysend_msg_to_user(msg_dict, semaphore_publisher=your_publisher)  # user your publisher```## Publishing a list of messages```pythonfrom jsmsgr.api import send_msgs_to_usermsgs_dict = {    &quot;msgs&quot;: [        {            &quot;msg&quot;: &quot;Hello, there, ###_USER_NAME_###&quot;,            &quot;type&quot;: &quot;sms&quot;,            &quot;external_id&quot;: &quot;external123&quot;,            &quot;callback_mo_destination&quot;: &quot;/queue/mo&quot;,            &quot;to_user_id&quot;: &quot;a58c4853-2fa5-4891-80c7-f48287dbf403&quot;,  # user_id to send the msg to        },        {            &quot;msg&quot;: &quot;&lt;strong&gt;Hello world there, ###_USER_NAME_###&lt;/strong&gt;&quot;,            &quot;subject&quot;: &quot;sub1&quot;,            &quot;type&quot;: &quot;email&quot;,            &quot;to_user_id&quot;: &quot;a58c4853-2fa5-4891-80c7-f48287dbf403&quot;,        },        {            &quot;msg&quot;: &quot;&lt;strong&gt;Hello world there once again, ###_USER_NAME_###&lt;/strong&gt;&quot;,            &quot;subject&quot;: &quot;sub1&quot;,            &quot;type&quot;: &quot;email&quot;,            &quot;to_user_id&quot;: &quot;a58c4853-2fa5-4891-80c7-f48287dbf403&quot;,        }                ]}send_msgs_to_user(msgs_dict)  # creates a publisher internallysend_msgs_to_user(msgs_dict, semaphore_publisher=your_publisher) # user your publisher```## Replacing tags in the original messageSome tags are used to perform string replacements, such as the user name, in the original message. Some tagsare the following:`###_USER_NAME_###`: Replaced by user name (name of the user with the given `to_user_id` parameter value).Example:```&quot;Hello there, ###_USER_NAME### !&quot;```Is sent as:```&quot;Hello there, Igor !&quot;```</longdescription>
</pkgmetadata>