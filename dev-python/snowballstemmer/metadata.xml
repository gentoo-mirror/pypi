<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Snowball stemming library collection for Python===============================================Python 3 (&gt;= 3.3) is supported.  We no longer actively support Python 2 asthe Python developers stopped supporting it at the start of 2020.  Snowball2.1.0 was the last release to officially support Python 2.What is Stemming?-----------------Stemming maps different forms of the same word to a common &quot;stem&quot; - forexample, the English stemmer maps *connection*, *connections*, *connective*,*connected*, and *connecting* to *connect*.  So a searching for *connected*would also find documents which only have the other forms.This stem form is often a word itself, but this is not always the case as thisis not a requirement for text search systems, which are the intended field ofuse.  We also aim to conflate words with the same meaning, rather than allwords with a common linguistic root (so *awe* and *awful* don't have the samestem), and over-stemming is more problematic than under-stemming so we tend notto stem in cases that are hard to resolve.  If you want to always reduce wordsto a root form and/or get a root form which is itself a word then Snowball'sstemming algorithms likely aren't the right answer.How to use library------------------The ``snowballstemmer`` module has two functions.The ``snowballstemmer.algorithms`` function returns a list of availablealgorithm names.The ``snowballstemmer.stemmer`` function takes an algorithm name and returns a``Stemmer`` object.``Stemmer`` objects have a ``Stemmer.stemWord(word)`` method and a``Stemmer.stemWords(word[])`` method... code-block:: python   import snowballstemmer   stemmer = snowballstemmer.stemmer('english');   print(stemmer.stemWords(&quot;We are the world&quot;.split()));Automatic Acceleration----------------------`PyStemmer &lt;https://pypi.org/project/PyStemmer/&gt;`_ is a wrapper module forSnowball's ``libstemmer_c`` and should provide results 100% compatible to**snowballstemmer**.**PyStemmer** is faster because it wraps generated C versions of the stemmers;**snowballstemmer** uses generate Python code and is slower but offers a purePython solution.If PyStemmer is installed, ``snowballstemmer.stemmer`` returns a ``PyStemmer````Stemmer`` object which provides the same ``Stemmer.stemWord()`` and``Stemmer.stemWords()`` methods.Benchmark~~~~~~~~~This is a crude benchmark which measures the time for running each stemmer onevery word in its sample vocabulary (10,787,583 words over 26 languages).  It'snot a realistic test of normal use as a real application would do much morethan just stemming.  It's also skewed towards the stemmers which do more workper word and towards those with larger sample vocabularies.* Python 2.7 + **snowballstemmer** : 13m00s (15.0 * PyStemmer)* Python 3.7 + **snowballstemmer** : 12m19s (14.2 * PyStemmer)* PyPy 7.1.1 (Python 2.7.13) + **snowballstemmer** : 2m14s (2.6 * PyStemmer)* PyPy 7.1.1 (Python 3.6.1) + **snowballstemmer** : 1m46s (2.0 * PyStemmer)* Python 2.7 + **PyStemmer** : 52sFor reference the equivalent test for C runs in 9 seconds.These results are for Snowball 2.0.0.  They're likely to evolve over time asthe code Snowball generates for both Python and C continues to improve (fora much older test over a different set of stemmers using Python 2.7,**snowballstemmer** was 30 times slower than **PyStemmer**, or 9 times slowerwith **PyPy**).The message to take away is that if you're stemming a lot of words you shouldeither install **PyStemmer** (which **snowballstemmer** will then automaticallyuse for you as described above) or use PyPy.The TestApp example-------------------The ``testapp.py`` example program allows you to run any of the stemmerson a sample vocabulary.Usage::   testapp.py &lt;algorithm&gt; &quot;sentences ... &quot;.. code-block:: bash   $ python testapp.py English &quot;sentences... &quot;</longdescription>
</pkgmetadata>