<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenAI functionsThe `openai-functions` Python project simplifies the usage of OpenAI's ChatGPT [function calling](https://platform.openai.com/docs/guides/gpt/function-calling) feature. It abstracts away the complexity of parsing function signatures and docstrings by providing developers with a clean and intuitive interface.![Tests](https://github.com/rizerphe/openai-functions/actions/workflows/tests.yml/badge.svg) [![Coverage Status](https://coveralls.io/repos/github/rizerphe/openai-functions/badge.svg?branch=main)](https://coveralls.io/github/rizerphe/openai-functions?branch=main) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![PyPI version](https://badge.fury.io/py/openai-functions.svg)](https://badge.fury.io/py/openai-functions) [![Documentation Status](https://readthedocs.org/projects/openai-functions/badge/?version=latest)](https://openai-functions.readthedocs.io/en/latest/?badge=latest)## InstallationYou can install `openai-functions` from PyPI using pip:```pip install openai-functions```## Usage1. Import the necessary modules and provide your API key:```pythonimport enumimport openaifrom openai_functions import Conversationopenai.api_key = &quot;&lt;YOUR_API_KEY&gt;&quot;```2. Create a `Conversation` instance:```pythonconversation = Conversation()```3. Define your functions using the `@conversation.add_function` decorator:```pythonclass Unit(enum.Enum):    FAHRENHEIT = &quot;fahrenheit&quot;    CELSIUS = &quot;celsius&quot;@conversation.add_function()def get_current_weather(location: str, unit: Unit = Unit.FAHRENHEIT) -&gt; dict:    &quot;&quot;&quot;Get the current weather in a given location.    Args:        location (str): The city and state, e.g., San Francisco, CA        unit (Unit): The unit to use, e.g., fahrenheit or celsius    &quot;&quot;&quot;    return {        &quot;location&quot;: location,        &quot;temperature&quot;: &quot;72&quot;,        &quot;unit&quot;: unit.value,        &quot;forecast&quot;: [&quot;sunny&quot;, &quot;windy&quot;],    }```4. Ask the AI a question:```pythonresponse = conversation.ask(&quot;What's the weather in San Francisco?&quot;)# Should return something like:# The current weather in San Francisco is 72 degrees Fahrenheit and it is sunny and windy.```You can read more about how to use `Conversation` [here](https://openai-functions.readthedocs.io/en/latest/conversation.html).## More barebones use - just schema generation and result parsing:```pythonfrom openai_functions import FunctionWrapperwrapper = FunctionWrapper(get_current_weather)schema = wrapper.schemaresult = wrapper({&quot;location&quot;: &quot;San Francisco, CA&quot;})```Or you could use [skills](https://openai-functions.readthedocs.io/en/latest/skills.html).## Another use case: data extraction1. Import the necessary modules and provide your API key:```pythonfrom dataclasses import dataclassimport openaifrom openai_functions import nlpopenai.api_key = &quot;&lt;YOUR_API_KEY&gt;&quot;```3. Define your data container using the `@nlp` decorator:```python@nlp@dataclassclass Person:    &quot;&quot;&quot;Extract personal info&quot;&quot;&quot;    name: str    age: int```4. Ask the AI for the extracted data:```pythonperson = Person.from_natural_language(&quot;I'm Jack and I'm 20 years old.&quot;)```You can read more about `@nlp` [here](https://openai-functions.readthedocs.io/en/latest/nlp_interface.html).Note: mypy does not parse class decorators ([#3135](https://github.com/python/mypy/issues/3135)), so you might have trouble getting type checking when using it like this. Consider using something like `nlp(Person).from_natural_language` to get proper type support.## How it Works`openai-functions` takes care of the following tasks:- Parsing the function signatures (with type annotations) and docstrings.- Sending the conversation and function descriptions to the OpenAI model.- Deciding whether to call a function based on the model's response.- Calling the appropriate function with the provided arguments.- Updating the conversation with the function response.- Repeating the process until the model generates a user-facing message.This abstraction allows developers to focus on defining their functions and adding user messages without worrying about the details of function calling.## NotePlease note that `openai-functions` is an unofficial project not maintained by OpenAI. Use it at your discretion.</longdescription>
</pkgmetadata>