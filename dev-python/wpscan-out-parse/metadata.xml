<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># WPScan Output Parser**`wpscan_out_parse` is a Python parser for WPScan output files** (JSON and CLI).  It analyze vulnerabilities, miscellaneous alerts and warnings and other findings.  &lt;a href=&quot;https://github.com/tristanlatr/wpscan_out_parse/actions&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/tristanlatr/wpscan_out_parse/workflows/test/badge.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/tristanlatr/wpscan_out_parse&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/tristanlatr/wpscan_out_parse/branch/master/graph/badge.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/wpscan-out-parse/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/wpscan-out-parse.svg&quot;&gt;&lt;/a&gt;### Features- Support WPScan JSON and CLI output files- Display results to stdout in CLI, JSON or HTML output format- Generate a summary table of your wordpress component containing version and vulnerabilities  - Divide the results in &quot;Alerts&quot;, &quot;Warnings&quot; and &quot;Informations&quot;- Additionnal alerts depending of finding type (SQL dump, etc.)  - Signal result via exit code- Ignore messages based on false positives strings - Simple Python library usage - Colorized output by defaultDesign of summary table is largely inspired by [wpscan-analyze](https://github.com/lukaspustina/wpscan-analyze) (Rust code).  ### Install```python3 -m pip install wpscan-out-parse```## How to use### As a CLI toolRun WPScan```bashwpscan --url https://mysite.com --output file.json --format json --api-token YOUR_API_TOKEN```Run **`wpscan_out_parse`**  ```bashpython3 -m wpscan_out_parse file.json```And process output and/or exit code.#### Exit codes- 5 -&gt; ALERT: Your WordPress site is vulnerable- 6 -&gt; WARNING: You WordPress site is oudated or potentially vulnerable- 4 -&gt; ERROR: WPScan failed- 1 -&gt; ERROR: Parser error- 0 -&gt; All OK#### ExemplesDisplay results in HTML format```bash% python3 -m wpscan_out_parse ./test/output_files/potential_vulns.json --format html &gt; html_output.html```![WPWatcher Report](https://github.com/tristanlatr/wpscan_out_parse/raw/master/sample/html_output.png &quot;HTML Output&quot;)### As a Python librarySee the [API reference](https://tristanlatr.github.io/wpscan_out_parse/wpscan_out_parse.html). ### Additionnal alerts stringsSome additionnal warnings and alerts are raised when detecting the following strings in your output file.  Alerts ```python&quot;SQL Dump found&quot;,&quot;Full Path Disclosure found&quot;,&quot;www.owasp.org/index.php/Full_Path_Disclosure&quot;,&quot;codex.wordpress.org/Resetting_Your_Password#Using_the_Emergency_Password_Reset_Script&quot;,&quot;www.exploit-db.com/ghdb/3981/&quot;,&quot;A backup directory has been found&quot;,&quot;github.com/wpscanteam/wpscan/issues/422&quot;,&quot;ThemeMakers migration file found&quot;,&quot;packetstormsecurity.com/files/131957&quot;,&quot;Search Replace DB script found&quot;,&quot;interconnectit.com/products/search-and-replace-for-wordpress-databases/&quot;```Warnings```python&quot;Upload directory has listing enabled&quot;,&quot;Registration is enabled&quot;,&quot;Debug Log found&quot;,&quot;codex.wordpress.org/Debugging_in_WordPress&quot;,&quot;Fantastico list found&quot;,&quot;www.acunetix.com/vulnerabilities/fantastico-fileslist/&quot;```### Full help```bash% python3 -m wpscan_out_parse -husage: python3 -m wpscan_out_parse [Options] &lt;File path&gt;wpscan_out_parse is a Python parser for WPScan output files (JSON and CLI).  It analyze vulnerabilities, miscellaneous alerts and warnings and other findings.positional arguments:  &lt;File path&gt;           WPScan output file to parse.optional arguments:  -h, --help            show this help message and exit  --format &lt;Format&gt;     output format, choices are: &quot;cli&quot;, &quot;html&quot;, &quot;json&quot;  --summary             display ony the summary of issues per component.  --inline              display only one line like: &quot;WPScan result summary:                        alerts={}, warnings={}, infos={}, error={}&quot;.  --no_warnings         do not display warnings, only summary and alerts.                        Implies --no_infos.  --no_infos            do not display informations and findinds.  --no_summary          do not display the summary of issues.  --show_all            show all findings details (found by, confidence,                        confirmed by).  --false_positive String [String ...]                        consider all matching messages as infos and add                        &quot;[False positive]&quot; prefix.  --no_color            do not colorize output.  --version             print wpscan_out_parse version and exit.  ```</longdescription>
</pkgmetadata>