<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># finalfusion-python[![Documentation Status](https://readthedocs.org/projects/finalfusion-python/badge/?version=latest)](https://finalfusion-python.readthedocs.io/en/0.7.1/?badge=0.7.1)## Introduction`finalfusion` is a Python package for reading, writing and using [finalfusion](https://finalfusion.github.io) embeddings, but alsosupports other commonly used embeddings like fastText, GloVe andword2vec. The Python package supports the same types of embeddings as the[finalfusion-rust crate](https://docs.rs/finalfusion/):* Vocabulary:  * No subwords  * Subwords* Embedding matrix:  * Array  * Memory-mapped  * Quantized* Norms* Metadata## InstallationThe finalfusion module is[available](https://pypi.org/project/finalfusion/#files) on PyPi for Linux,Mac and Windows. You can use `pip` to install the module:~~~shell$ pip install --upgrade finalfusion~~~## Installing from sourceBuilding from source depends on `Cython`. If you install the package using`pip`, you don't need to explicitly install the dependency since it isspecified in `pyproject.toml`.~~~shell$ git clone https://github.com/finalfusion/finalfusion-python$ cd finalfusion-python$ pip install .~~~If you want to build wheels from source, `wheel` needs to be installed.It's then possible to build wheels through:~~~shell$ python setup.py bdist_wheel~~~The wheels can be found in `dist`.## Package Usage### Basic usage~~~pythonimport finalfusion# loading from different formatsw2v_embeds = finalfusion.load_word2vec(&quot;/path/to/w2v.bin&quot;)text_embeds = finalfusion.load_text(&quot;/path/to/embeds.txt&quot;)text_dims_embeds = finalfusion.load_text_dims(&quot;/path/to/embeds.dims.txt&quot;)fasttext_embeds = finalfusion.load_fasttext(&quot;/path/to/fasttext.bin&quot;)fifu_embeds = finalfusion.load_finalfusion(&quot;/path/to/embeddings.fifu&quot;)# serialization to formats works similarlyfinalfusion.compat.write_word2vec(&quot;to_word2vec.bin&quot;, fifu_embeds)# embedding lookupembedding = fifu_embeds[&quot;Test&quot;]# reading an embedding into a bufferimport numpy as npbuffer = np.zeros(fifu_embeds.storage.shape[1], dtype=np.float32)fifu_embeds.embedding(&quot;Test&quot;, out=buffer)# similarity and analogy querysim_query = fifu_embeds.word_similarity(&quot;Test&quot;)analogy_query = fifu_embeds.analogy(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)# accessing the vocab and printing the first 10 wordsvocab = fifu_embeds.vocabprint(vocab.words[:10])# SubwordVocabs give access to the subword indexer:subword_indexer = vocab.subword_indexerprint(subword_indexer.subword_indices(&quot;Test&quot;, with_ngrams=True))# accessing the storage and calculate its dot product with an embeddingres = embedding.dot(fifu_embeds.storage)# printing metadataprint(fifu_embeds.metadata) ~~~### Beyond Embeddings~~~Python# load only a vocab from a finalfusion filefrom finalfusion import load_vocabvocab = load_vocab(&quot;/path/to/finalfusion_file.fifu&quot;)# serialize vocab to single filevocab.write(&quot;/path/to/vocab_file.fifu.voc&quot;)# more specific loading functions existfrom finalfusion.vocab import load_finalfusion_bucket_vocabfifu_bucket_vocab = load_finalfusion_bucket_vocab(&quot;/path/to/vocab_file.fifu.voc&quot;)~~~The package supports loading and writing all `finalfusion` chunks this way.This is only supported by the Python package, reading will fail with e.g.the `finalfusion-rust`.## Scripts`finalfusion` also includes a conversion script `ffp-convert` to convertbetween the supported formats.~~~shell# convert from fastText format to finalfusion$ ffp-convert -f fasttext fasttext.bin -t finalfusion embeddings.fifu~~~`ffp-bucket-to-explicit` can be used to convert bucket embeddings to embeddingswith an explicit ngram lookup.~~~shell# convert finalfusion bucket embeddings to explicit$ ffp-bucket-to-explicit -f finalfusion embeddings.fifu explicit.fifu~~~ Finally, the package comes with `ffp-similar` and `ffp-analogy` to doanalogy and similarity queries.~~~shell# get the 5 nearest neighbours of &quot;T端bingen&quot;$ echo T端bingen | ffp-similar embeddings.fifu# get the 5 top answers for &quot;T端bingen&quot; is to &quot;Stuttgart&quot; like &quot;Heidelberg&quot; to...$ echo T端bingen Stuttgart Heidelberg | ffp-analogy embeddings.fifu~~~## Where to go from here  * [documentation](https://finalfusion-python.readthedocs.io/en/0.7.1)  * [finalfrontier](https://finalfusion.github.io/finalfrontier)  * [finalfusion](https://finalfusion.github.io/)  * [pretrained embeddings](https://finalfusion.github.io/pretrained)</longdescription>
</pkgmetadata>