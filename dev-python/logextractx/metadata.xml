<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># LogExtraCtxThis small humble library is for making logging extra parameters in logging a bit easier. ## RationaleI have [blognote] about it.## Usage(look also into docstrings of modules and classes)### Pure pythonUse `getLogger` from `logextractx.logger`, and then create local logger with localcontext:```pythonfrom logextractx.logger import getLoggerlogger = getLogger(__name__)[...]loclogger = logger.local(extra={'DATA_IN': 'CURRENT_CONTEXT'})```Eg:```pythonfrom logextractx.logger import getLoggerlogger = getLogger(__name__)def send_message(environment: str, requester: str, recipient: str, text: str) -&gt; bool:    &quot;&quot;&quot; Function send_message sends MSG to the specified recipient.  &quot;&quot;&quot;    # extra data to be indexed    loclogger = logger.local(extra={'ACTION_TYPE': 'SEND_MSG',                                    'requester': requester,                                    'recipient': recipient,                                    'user': str(request.user),                                    'environment': env_type})    try:        r = requests.post(settings.MSG_PROVIDER, json={'recipient': recipient, 'content': text},                          ... &lt; other params &gt; ....)        r.raise_for_status()    except requests.exceptions.RequestException as e:        loclogger.error('Sending MSG failed. Response text: &quot;%s&quot;', e)        loclogger.debug(&quot;headers=%r&quot;, r.result.headers)        return False    loclogger.info('Sending MSG success.')    return True```### DjangoTo tie all log records with common `request-id` and `session-id`, do the following:* append `logextractx.middleware.LogCtxDjangoMiddleware` to your `MIDDLEWARE` in settings: ```pythonMIDDLEWARE = [    [...]     'django.contrib.sessions.middleware.SessionMiddleware',    [...]    'logextractx.middleware.LogCtxDjangoMiddleware', ]```And instead of `logextractx.logger` use `logextractx.middleware` so:    ```pythonfrom logextractx.logger import getLoggerlogger = getLogger(__name__)[...]```Also, you need to add filter into logging```python    'filters': {        'RidFilter': {            '()': 'logextractx.middleware.RidFilter'        }    }```And that's all. Now every log entry will contain `request_id` and `session_id` fields.#### Django + DjHueyIf you want to also pass `request/session-id` to working[Huey/DjHuey](https://huey.readthedocs.io/en/latest/django.html) by such modifications:Instead```pythonfrom huey.contrib.djhuey import db_periodic_task, db_task, task```you should use ```pythonfrom logextractx.djhuey import db_periodic_task, db_task, task```If you do so, then all extra context, including `request-id` and `session-id` will bepassed to logger on the Djhuey side.### FlaskLogExtraCtx in Flask is quite similar to usage in Django:```pythonfrom logextractx.flask import init_logctxfrom logextractx.middleware import getLogger[...]app = flask.Flask(__name__)app.secret_key = &quot;don't tell anyone&quot;init_logctx(app)[...]logger = getLogger(__name__)```### Extra FormatterIf you use plain logging format, you may be interested in using`logextractx.formatter.ExtraFormatter`.  Just add following in your formatter definition (DictConfig):```python        'formatters': {            'simple': {                '()': 'logextractx.formatter.ExtraFormatter',                'fmt': '%(levelname)s %(asctime)s %(name)s: %(message)s [%(extras)s]'            }        }```And then you will have all extra in single log line.# License:Licensed under the Apache License, Version 2.0[blognote]: https://blog.allegro.tech/2021/06/python-logging.html</longdescription>
</pkgmetadata>