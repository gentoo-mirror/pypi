<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># emoji-data[![CircleCI](https://github.com/tanbro/emoji-data/actions/workflows/python-package.yml/badge.svg)](https://github.com/tanbro/emoji-data/actions/workflows/python-package.yml)[![Documentation Status](https://readthedocs.org/projects/emoji-data/badge/?version=latest)](https://emoji-data.readthedocs.io/en/latest/?badge=latest)[![PyPI](https://img.shields.io/pypi/v/emoji-data.svg)](https://pypi.org/project/emoji-data/)A library represents emoji sequences and characters in [Unicode® Technical Standard #51 Data Files](http://www.unicode.org/reports/tr51/#Data_Files_Table)## How to useExamples below are also in a [notebook](notebooks/example)Class `EmojiSequence` is most useful:### Iterate EmojisPrint first 5 emoji sequence objects:```python&gt;&gt;&gt; from emoji_data import EmojiSequence&gt;&gt;&gt; for (s, seq), *_ in zip(EmojiSequence.items(), range(5)):&gt;&gt;&gt;     print(s, repr(seq))👨❤️👨 &lt;EmojiSequence code_points='1F468 200D 2764 FE0F 200D 1F468' status='fully-qualified', string='👨\u200d❤️\u200d👨', description='couple with heart: man, man'&gt;👨❤️💋👨 &lt;EmojiSequence code_points='1F468 200D 2764 FE0F 200D 1F48B 200D 1F468' status='fully-qualified', string='👨\u200d❤️\u200d💋\u200d👨', description='kiss: man, man'&gt;👨👦 &lt;EmojiSequence code_points='1F468 200D 1F466' status='fully-qualified', string='👨\u200d👦', description='family: man, boy'&gt;👨👦👦 &lt;EmojiSequence code_points='1F468 200D 1F466 200D 1F466' status='fully-qualified', string='👨\u200d👦\u200d👦', description='family: man, boy, boy'&gt;👨👧 &lt;EmojiSequence code_points='1F468 200D 1F467' status='fully-qualified', string='👨\u200d👧', description='family: man, girl'&gt;```### Convert HEX to Emoji```python&gt;&gt;&gt; from emoji_data import EmojiSequence&gt;&gt;&gt; emojis_data = [&gt;&gt;&gt;     '1F6A3',&gt;&gt;&gt;     '1F468 1F3FC 200D F68F',&gt;&gt;&gt;     '1F468 1F3FB 200D 2708 FE0F',&gt;&gt;&gt;     '023A',&gt;&gt;&gt;     '1F469 200D 1F52C',&gt;&gt;&gt;     '1F468 200D 1F468 200D 1F467 200D 1F467',&gt;&gt;&gt;     '1F441 FE0F 200D 1F5E8 FE0E'&gt;&gt;&gt; ]&gt;&gt;&gt; for hex_data in emojis_data:&gt;&gt;&gt;     try:&gt;&gt;&gt;         es = EmojiSequence.from_hex(hex_data)&gt;&gt;&gt;     except KeyError:&gt;&gt;&gt;         print('{} is NOT Emoji!'.format(hex_data))&gt;&gt;&gt;     else:&gt;&gt;&gt;         print('{} is Emoji {}'.format(hex_data, es.string))1F 6A3 is Emoji 🚣1F468 1F3FC 200D F68F is NOT Emoji!1F468 1F3FB 200D 2708 FE0F is Emoji 👨🏻✈️023A is NOT Emoji!1F469 200D 1F52C is Emoji 👩🔬1F468 200D 1F468 200D 1F467 200D 1F467 is Emoji 👨👨👧👧1F441 FE0F 200D 1F5E8 FE0E is NOT Emoji!```### Check if a string is Emoji```python&gt;&gt;&gt; from emoji_data import EmojiSequence&gt;&gt;&gt; print('👨' in EmojiSequence)True&gt;&gt;&gt; print('©' in EmojiSequence)  # 00AE, unqualifiedTrue&gt;&gt;&gt; print('5️⃣' in EmojiSequence)True&gt;&gt;&gt; print('9⃣' in EmojiSequence)  # 0039 20E3, unqualifiedTrue```### Search Emojis in text```python&gt;&gt;&gt; from emoji_data import EmojiSequence&gt;&gt;&gt; strings = [&gt;&gt;&gt;     &quot;First:👨🏻⚕️. Second:👨🏻.&quot;,&gt;&gt;&gt;     &quot;The two emojis 👨👨👧👨👨👧👧 are long. Today is a 🌞⛈️ day, I am 😀.&quot;,&gt;&gt;&gt;     &quot;© 00AE is unqualified, the full-qualified one is 00A9 FE0F ©️&quot;,&gt;&gt;&gt;     &quot;9⃣ 0039 20E3 is also unqualified, but it can be matched!&quot;&gt;&gt;&gt; ]&gt;&gt;&gt; for s in strings:&gt;&gt;&gt;     for es, begin, end in EmojiSequence.iter_find(s):&gt;&gt;&gt;         print('[{} : {}] : {}'.format(begin, end, es))&gt;&gt;&gt;     print('------')[6 : 11] : 👨🏻⚕️[20 : 22] : 👨🏻------[15 : 20] : 👨👨👧[20 : 27] : 👨👨👧👧[49 : 50] : 🌞[50 : 52] : ⛈️[63 : 64] : 😀------[0 : 1] : ©[59 : 61] : ©️------[0 : 2] : 9⃣```</longdescription>
</pkgmetadata>