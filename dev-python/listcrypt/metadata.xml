<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># &lt;p align='center'&gt;ListCrypt&lt;/p&gt;&lt;h3 align='center'&gt; Symmetric cryptographic algorithm built in python3.8 &lt;/h3&gt;&lt;h4 align='center'&gt; ( ListCrypt is NOT intended for production use ) &lt;/h4&gt;&lt;br&gt;&lt;br&gt;# Example Use```python&gt;&gt;&gt; from listcrypt import encrypt,decrypt&gt;&gt;&gt;&gt;&gt;&gt; key = &quot;example key&quot;&gt;&gt;&gt; data = &quot;testing 1.. 2.. 3..&quot; &gt;&gt;&gt;&gt;&gt;&gt; e = encrypt(key, data)&gt;&gt;&gt; print(e)b'AV#\x18t*\x12\x1c@\x01\x1b%U4k&gt;M*w z\x7f\x17]afh\x07 \x04'&gt;&gt;&gt;&gt;&gt;&gt; d = decrypt(key, e)&gt;&gt;&gt; print(d)testing 1.. 2.. 3..```&lt;h4&gt;Easily Encrypt and Decrypt Files with the 'encrypt_file' and 'decrypt_file' Functions&lt;/h4&gt;```python&gt;&gt;&gt; from listcrypt import encrypt_file, decrypt_file&gt;&gt;&gt;&gt;&gt;&gt; file_name = &quot;file.txt&quot;&gt;&gt;&gt; key = &quot;example key&quot;&gt;&gt;&gt;&gt;&gt;&gt; encrypt_file(key, path)True&gt;&gt;&gt; decrypt_file(key, path)True```&lt;br&gt;# Documentation```python'''Functions:    sha256(data: str) -&gt; str:        Simple hashing function, utilizes the builtin hashlib module    data_verification(key:str, data:str) -&gt; bool:        Verifies that your data will be encrypted and decrypted without error    convert_data(key:str, data:'any data type') -&gt; str and str:        Converts the data to a string format for encryption    convert_data_back(metadata: list) -&gt; any        Converts the data back to its origional type as given by the 'origional_data_type' parameter        in the 'metadata' list.  This is built to work seamlessly with the 'convert_data' function.    range_finder(data:str or bytes) -&gt; int:        Finds the character with the largest integer equivalent in your data    create_key(key:str, data_length:int) -&gt; bytes        Uses the sha256 hash of the 'key' parameter to create and concatenate more keys (based upon the origional) to a new        key variable that is either the same size as or slighty larger than the length of the data    segment_data(data:str, segments:int) -&gt; list        Splits the data evenly amongst the amount of 'segments' requiredpull_metadata(key:str, data:bytes) -&gt; dictPulls metadata from the encrypted bytes and puts it in a dictionary for easy readibility    encrypt(key:'any data type', data:'any data type', processes=cpu_count()) -&gt; bytes        Encrypts the data by adding each characters integer equivalent to the integer equivalent of the character in        the same position in the new key variable generated by the 'key parameter'        Nested Function:            multiprocess_decryption(data:str, segment:int, shared_dictionary:dict) -&gt; bool                Takes chuncks of data and adds them to a shared dictionary,                with the keys being the segments origional position for concatenation                after encryption    decrypt(key:&quot;any data type&quot;, encrypted_data:bytes, processes=cpu_count()) -&gt; &quot;origional data&quot;        Encrypts the data by adding each characters integer equivalent to the integer equivalent of the character in        the same position in the new key variable generated by the 'key parameter'        Nested_Function:            multiprocess_encryption(data:str, segment:int, shared_dictionary:dict) -&gt; bool                Takes chuncks of data and adds them to a shared dictionary,                with the keys being the segments origional position for concatenation                after decryption    remove_image_exif(path:str) -&gt; bool        Removes the metadata from the provided image, which may cause        unwanted effects like image rotating, but will reduce the file size greatly    encrypt_file(key:str, path:str, metadata_removal=True) -&gt; bool        This function enables the easy encryption of files    decrypt_file(key:str, path:str) -&gt; bool        This function enables the easy decryption of files'''```</longdescription>
</pkgmetadata>