<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![preview](https://github.com/moderngl/moderngl/raw/master/.github/preview.png)](#readme)# ModernGL[![pypi](https://badge.fury.io/py/moderngl.svg)](https://pypi.python.org/pypi/moderngl) [![anaconda](https://anaconda.org/conda-forge/moderngl/badges/version.svg)](https://anaconda.org/conda-forge/moderngl/) &lt;img src=&quot;https://raw.githubusercontent.com/moderngl/moderngl/master/.github/python-versions.svg?sanitize=true&quot;&gt; [![rtd](https://readthedocs.org/projects/moderngl/badge/?version=latest)](https://moderngl.readthedocs.io)ModernGL is a python wrapper over OpenGL 3.3+ core that simplifies the creation of simple graphics applications like scientific simulations, games or user interfaces. Usually, acquiring in-depth knowledge of OpenGL requires a steep learning curve. In contrast, ModernGL is easy to learn and use, moreover it is capable of rendering with high performance and quality, with less code written. The majority of the modernglcode base is also written in C++ for high performance.```shpip install moderngl```- [Documentation](https://moderngl.readthedocs.io/)- [Examples](https://github.com/moderngl/moderngl/tree/master/examples/#readme)- [ModernGL on Github](https://github.com/moderngl/moderngl/)- [ModernGL on PyPI](https://pypi.org/project/ModernGL/)- [ModernGL Discord Server](https://discord.gg/UEMtW8D)- [glcontext]- [moderngl-window] (Window creation, resource loading, ..)&gt; **NOTE: From moderngl 5.6 context creation is delegated to the [glcontext] package.  This makes us able to expand and improve context creation without releasing new  versions of moderngl. It also makes it possible for users to customize their own  context creation and the bar for contributing should be lower. New backends  can be created using ctypes or C++.**## Features- GPU accelerated high quality graphics- Rendering modern OpenGL scenes with less headache- Simpler and faster than PyOpenGL- Can render without a window- 100% Pythonic## Sample usage```py&gt;&gt;&gt; import moderngl&gt;&gt;&gt; ctx = moderngl.create_standalone_context()&gt;&gt;&gt; buf = ctx.buffer(b'Hello World!')  # allocated on the GPU&gt;&gt;&gt; buf.read()b'Hello World!'```For complete examples please visit the [Examples](https://github.com/moderngl/moderngl/tree/master/examples/#readme).## Easy to use with Pillow and Numpy```py&gt;&gt;&gt; img = Image.open('texture.jpg')&gt;&gt;&gt; ctx.texture(img.size, 3, img.tobytes())&lt;Texture: 1&gt;``````py&gt;&gt;&gt; ctx.buffer(np.array([0.0, 0.0, 1.0, 1.0], dtype='f4'))&lt;Buffer: 1&gt;```## Compared to PyOpenGLWith PyOpenGL, using the original OpenGL API, you have to write three lines toachieve a simple task like binding a VBO:```pyvbo1 = glGenBuffers(1)GL.glBindBuffer(GL_ARRAY_BUFFER, vbo1)GL.glBufferData(GL_ARRAY_BUFFER, b'Hello World!', GL_STATIC_DRAW)vbo2 = glGenBuffers(1)GL.glBindBuffer(GL_ARRAY_BUFFER, vbo2)GL.glBufferData(GL_ARRAY_BUFFER, b'\x00' * 1024, GL_DYNAMIC_DRAW)```With ModernGL you need just one simple line per VBO to achieve the sameresults:```pyvbo1 = ctx.buffer(b'Hello World!')vbo2 = ctx.buffer(reserve=1024, dynamic=True)```## Build[![build](https://github.com/moderngl/moderngl/actions/workflows/build.yml/badge.svg)](https://github.com/moderngl/moderngl/actions/workflows/build.yml) [![test](https://github.com/moderngl/moderngl/actions/workflows/test.yml/badge.svg)](https://github.com/moderngl/moderngl/actions/workflows/test.yml)```shpython setup.py build_ext --inplace```## FAQ### Is ModernGL faster than PyOpenGL?In many cases **yes**, the core functions of ModernGL are written in C++,OpenGL functions are called in quick succession so these calls togethercount as a single python function call.### What version of OpenGL is used?Most of the calls only require **OpenGL 3.3** but Subroutines and ComputeShaders require **OpenGL 4.0** and **OpenGL 4.3**### Is my old PC supported?OpenGL 3.3 came out in February 2010. With **up to date drivers** you willbe able to use the most of the ModernGL functions, even on integrated graphics cards. _(Compute Shaders will likely not workdepending on how old your PC is.)_You can still try [using Mesa](https://moderngl.readthedocs.io/en/latest/installation.html#using-with-mesa-3d-on-windows) but performance would be limited.### Where can I use ModernGL?**Anywhere where OpenGL is supported.** ModernGL is capable of renderingusing a [standalone_context] as well. Rendering to a window only requiresa valid OpenGL context.[standalone_context]: https://github.com/moderngl/moderngl/tree/master/examples/old-examples/standalone### Can ModernGL create a Window?**NO**, but we provide a utility library [moderngl-window] making windowcreation and resource loading very simple.### Limitations using ModernGL over PyOpenGL?All the necessary calls are (or can be) implemented in ModernGL. Howeveryou can interact with the ModernGL objects from PyOpenGL. If something ismissing write an [issue](https://github.com/moderngl/moderngl/issues)or raise a [PR](https://github.com/moderngl/moderngl/pulls).## Supported platforms- [x] Windows- [x] Linux- [x] Mac## Installing from source### Installing on Ubuntu from source```shapt-get install python3-dev libgl1-mesa-dev libx11-devpython3 setup.py install```### Building the sphinx documentation```shpip install -r docs/requirements.txtpython setup.py build_sphinx```### Running tests```shpip install -r tests/requirements.txtpytest tests```&gt; Some of the tests may be skipped when the supported OpenGL version is below the requirements of the given test.### Headless rendering```shapt-get install xvfbalias xpy='xvfb-run -s &quot;-screen 0 1x1x24&quot; python3'xpy -m moderngl```## Code qualityCode is tested with [pep8], [flake8], [prospector] and [pylint][pep8]: https://www.python.org/dev/peps/pep-0008/[flake8]: http://flake8.pycqa.org/en/latest/[prospector]: https://prospector.readthedocs.io/en/master/[pylint]: https://www.pylint.org/[moderngl-window]: https://github.com/moderngl/moderngl-window[glcontext]: https://github.com/moderngl/glcontext## Community- [Code of conduct](https://github.com/moderngl/moderngl/blob/master/.github/CODE_OF_CONDUCT.md)## CitationIf you need to cite this repository in academic research:```txt@Online{Dombi2020,  author = {Szabolcs Dombi},  title = {ModernGL, high performance python bindings for OpenGL 3.3+},  date = {2020-05-01},  publisher = {GitHub},  journal = {GitHub repository},  howpublished = {\url{https://github.com/moderngl/moderngl}},  commit = {&lt;insert hash if needed&gt;}}```If commit hash is required this can be found per release here:https://github.com/moderngl/moderngl/releases## Contributors- [Szabolcs Dombi](https://github.com/cprogrammer1994)- [SimLeek](https://github.com/SimLeek)- [Aljenci](https://github.com/Aljenci)- [MinchinWeb](https://github.com/MinchinWeb)- [Silexstudio](https://github.com/Silexstudio)- [stuaxo](https://github.com/stuaxo)- [Tomi Aarnio](https://github.com/toaarnio)- [Joshua Reibert](https://github.com/joshua-r)- [Einar Forselv](https://github.com/einarf)- [Jonathan Hartley](https://github.com/tartley)- [yoyonel](https://github.com/yoyonel)- [Naveen M K](https://github.com/naveen521kk)and [many others](https://github.com/moderngl/moderngl/graphs/contributors)Thank You!Contributions are welcome. _(Please add yourself to the list)_</longdescription>
</pkgmetadata>