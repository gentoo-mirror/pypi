<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Ming Ke Ming (名可名) -- Account Module (Python)[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/dimchat/mkm-py/blob/master/LICENSE)[![Version](https://img.shields.io/badge/alpha-0.10.12-red.svg)](https://github.com/dimchat/mkm-py/wiki)[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/dimchat/mkm-py/pulls)[![Platform](https://img.shields.io/badge/Platform-Python%203-brightgreen.svg)](https://github.com/dimchat/mkm-py/wiki)This [document](https://github.com/moky/DIMP/blob/master/MingKeMing-Identity.md) introduces a common **Account Module** for decentralized user identity authentication.Copyright &amp;copy; 2018-2019 Albert Moky- [Meta](#meta)    - [Type](#meta-type)    - [Key](#meta-key)    - [Seed](#meta-seed)    - [Fingerprint](#meta-fingerprint)- [ID](#id)    - [Type](#id-type)    - [Name](#id-name)    - [Address](#id-address)    - [Terminal](#id-terminal)- [Samples](#samples)## &lt;span id=&quot;meta&quot;&gt;0. Meta&lt;/span&gt;The **Meta** was generated by your **private key**, it can be used to build a new ID for entity, or verify the ID/PK pair.It consists of 4 fields:| Field       | Description                   || ----------- | ----------------------------- || type        | Meta Algorithm Version        || key         | Public Key                    || seed        | Entity Name                   || fingerprint | Signature to generate address |### &lt;span id=&quot;meta-type&quot;&gt;0.0. Meta Type&lt;/span&gt;* ```0x01``` **Default version*** ```0x02``` BTC version* ```0x03``` Extended BTC version* ```0x04``` ETH version* ```0x05``` Extended ETH version### &lt;span id=&quot;meta-key&quot;&gt;0.1. Key&lt;/span&gt;A **public key** (PK) was bound to an ID by the **Meta Algorithm**.### &lt;span id=&quot;meta-seed&quot;&gt;0.2. Seed&lt;/span&gt;A string as same as **ID.name** for generate the fingerprint.### &lt;span id=&quot;meta-fingerprint&quot;&gt;0.3. Fingerprint&lt;/span&gt;THe **fingerprint** field was generated by your **private key** and **seed**:````pythondata = seed.encode('utf-8')fingerprint = private_key.sign(data)````## &lt;span id=&quot;id&quot;&gt;1. ID&lt;/span&gt;The **ID** is used to identify an **entity**(user/group). It consists of 3 fields and 2 extended properties:| Field       | Description                   || ----------- | ----------------------------- || name        | Same with meta.seed           || address     | Unique Identification         || terminal    | Login point, it's optional.   || type        | Network type                  |The ID format is ```name@address[/terminal]```.### &lt;span id=&quot;id-type&quot;&gt;1.0. ID Type&lt;/span&gt;The **network type** of a person is ```8```, and group is ```16```:```pythonclass NetworkType(IntEnum):    # Person Account    MAIN = 0x08         # 0000 1000 (Person)    # Virtual Groups    GROUP = 0x10        # 0001 0000 (Multi-Persons)    POLYLOGUE = 0x10    # 0001 0000 (Multi-Persons Chat, N &lt; 100)    CHATROOM = 0x30     # 0011 0000 (Multi-Persons Chat, N &gt;= 100)    # Network    PROVIDER = 0x76     # 0111 0110 (Service Provider)    STATION = 0x88      # 1000 1000 (Server Node)    # Internet of Things    THING = 0x80        # 1000 0000 (IoT)    ROBOT = 0xC8        # 1100 1000```### &lt;span id=&quot;id-name&quot;&gt;1.1. Name&lt;/span&gt;The **Name** field is a username, or just a random string for group:1. The length of name must more than 1 byte, less than 32 bytes;2. It should be composed by a-z, A-Z, 0-9, or charactors '_', '-', '.';3. It cannot contain key charactors('@', '/').```python# Name examplesuser_name  = &quot;Albert.Moky&quot;group_name = &quot;Group-9527&quot;```### &lt;span id=&quot;id-address&quot;&gt;1.2. Address&lt;/span&gt;The **Address** field was created with the **Fingerprint** in Meta and a **Network ID**:```pythondef check_code(data: bytes) -&gt; bytes:    # check code in BTC address    return sha256(sha256(data))[:4]class BTCAddress(Address):    @classmethod    def new(cls, data: bytes, network: NetworkType=0) -&gt; Address:        &quot;&quot;&quot;Generate address with fingerprint and network ID        :param data:    fingerprint (signature/key.data)        :param network: address type        :return:        Address object        &quot;&quot;&quot;        prefix = chr(network).encode('latin1')        digest = ripemd160(sha256(data))        code = check_code(prefix + digest)        address = base58_encode(prefix + digest + code)        return BTCAddress(address)```When you get a meta for the entity ID from the network,you must verify it with the consensus algorithm before accept its **public key**.### &lt;span id=&quot;id-terminal&quot;&gt;1.3. Terminal&lt;/span&gt;A resource identifier as **Login Point**.## &lt;span id=&quot;samples&quot;&gt;2. Samples&lt;/span&gt;### ID```python# ID examplesID1 = &quot;hulk@4YeVEN3aUnvC1DNUufCq1bs9zoBSJTzVEj&quot;  # Immortal HulkID2 = &quot;moki@4WDfe3zZ4T7opFSi3iDAKiuTnUHjxmXekk&quot;  # Monkey King```### Meta```javascript/* Meta(JsON) for hulk@4YeVEN3aUnvC1DNUufCq1bs9zoBSJTzVEj */{    &quot;version&quot;     : 0x01,    &quot;key&quot;         : {        &quot;algorithm&quot; : &quot;RSA&quot;,        &quot;data&quot;      : &quot;-----BEGIN PUBLIC KEY-----\nMIGJAoGBALB+vbUK48UU9rjlgnohQowME+3JtTb2hLPqtatVOW364/EKFq0/PSdnZVE9V2Zq+pbX7dj3nCS4pWnYf40ELH8wuDm0Tc4jQ70v4LgAcdy3JGTnWUGiCsY+0Z8kNzRkm3FJid592FL7ryzfvIzB9bjg8U2JqlyCVAyUYEnKv4lDAgMBAAE=\n-----END PUBLIC KEY-----&quot;,        // other parameters        &quot;mode&quot;      : &quot;ECB&quot;,        &quot;padding&quot;   : &quot;PKCS1&quot;,        &quot;digest&quot;    : &quot;SHA256&quot;    },    &quot;seed&quot;        : &quot;hulk&quot;,    &quot;fingerprint&quot; : &quot;jIPGWpWSbR/DQH6ol3t9DSFkYroVHQDvtbJErmFztMUP2DgRrRSNWuoKY5Y26qL38wfXJQXjYiWqNWKQmQe/gK8M8NkU7lRwm+2nh9wSBYV6Q4WXsCboKbnM0+HVn9Vdfp21hMMGrxTX1pBPRbi0567ZjNQC8ffdW2WvQSoec2I=&quot;}```(All data encode with **BASE64** algorithm as default, excepts the **address**)</longdescription>
</pkgmetadata>