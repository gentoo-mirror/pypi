<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>About=====.. image:: https://travis-ci.org/scidam/solver.svg?branch=master    :target: https://travis-ci.org/scidam/solver*A simple problem solver written in pure Python*Module provides an easy way to solve various problems that requirecalculations. Lets imagine a problem formulated ina text file using a some template language. Some placeswithin the problem formulation text correspond to variablesthat have default values. What does `to solve a problem` mean in this context?To solve the problem is to 1) define output template (used to render solution), 2) write codethat exploits input variables, 3) set up output variables in the code and, finally, 4) render the solution template.With help of solver classes these steps of getting a problem solutioncan be made easily.Solver features:    * arbitrary and independent input and output markups      used in problem formulation and solution templates.    * ability of asynchronous problem solving (Celery is required).    * heuristic testing of problem solvability.    * using all of Python computational power (with third party libraries) to solve your problems.    * using jinja2 template language to produce dynamic parts of a problem      formulation/solution.Requirements============The solver works under Python 2.7.x and Python 3.3 and higher. The only requirements:- ``jinja2``- ``six``Installation============Install ``pysolver`` ::$ pip install python-solverTesting=======To run tests enter the command (additionally ``numpy`` is required): ::$ python -m solver.testsUsage example=============**A simple test problem.** My name is John. I have 100 $.I want to buy several papers. Each paper worth is 5 $. How many papers can I buy?Test problem  (abstraction level) .. code-block:: pythontest_problem_template_formulation = &quot;&quot;&quot;My name is {{username}}. I have {{total}} $.I want to buy several papers. Each paper worth is {{paper_cost}}$.How many papers can I buy?&quot;&quot;&quot;test_problem_solution_code = &quot;&quot;&quot;    OUTPUTS['result']=INPUTS['total']/INPUTS['paper_cost']    OUTPUTS['name'] = INPUTS['username']    &quot;&quot;&quot;test_problem_output_template=&quot;&quot;&quot;    My name is {{name}} and answer is {{result}}.    &quot;&quot;&quot;from solver import Task, Solvertask = Task(test_problem_template_formulation,            default_vals={'username': 'John',            'total': 100, 'paper_cost': 20},            solution_template=test_problem_output_template,            code = test_problem_solution_code            )psolver = Solver(task)Solve the problem ::$ psolver.solve()or you can try to solve the problem asynchronously instead.if error occur in async_solve, the solve() method will be invoked by default. ::psolver.async_solve()Before rendering the results check the problem solution is ready(This step is required, when getting the solution asynchronously).. code-block:: pythonif psolver.is_solved:    task.render_outputs()         print(task.output) And, finally, print rendered template or do something else.</longdescription>
</pkgmetadata>