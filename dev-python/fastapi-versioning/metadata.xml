<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fastapi-versioningapi versioning for fastapi web applications# Installation`pip install fastapi-versioning`## Examples```pythonfrom fastapi import FastAPIfrom fastapi_versioning import VersionedFastAPI, versionapp = FastAPI(title=&quot;My App&quot;)@app.get(&quot;/greet&quot;)@version(1, 0)def greet_with_hello():    return &quot;Hello&quot;@app.get(&quot;/greet&quot;)@version(1, 1)def greet_with_hi():    return &quot;Hi&quot;app = VersionedFastAPI(app)```this will generate two endpoints:```/v1_0/greet/v1_1/greet```as well as:```/docs/v1_0/docs/v1_1/docs/v1_0/openapi.json/v1_1/openapi.json```There's also the possibility of adding a set of additional endpoints thatredirect the most recent API version. To do that make the argument`enable_latest` true:```pythonapp = VersionedFastAPI(app, enable_latest=True)```this will generate the following additional endpoints:```/latest/greet/latest/docs/latest/openapi.json```In this example, `/latest` endpoints will reflect the same data as `/v1.1`.Try it out:```shpip install pipenvpipenv install --devpipenv run uvicorn example.annotation.app:app# pipenv run uvicorn example.folder_name.app:app```## Usage without minor version```pythonfrom fastapi import FastAPIfrom fastapi_versioning import VersionedFastAPI, versionapp = FastAPI(title='My App')@app.get('/greet')@version(1)def greet():  return 'Hello'@app.get('/greet')@version(2)def greet():  return 'Hi'app = VersionedFastAPI(app,    version_format='{major}',    prefix_format='/v{major}')```this will generate two endpoints:```/v1/greet/v2/greet```as well as:```/docs/v1/docs/v2/docs/v1/openapi.json/v2/openapi.json```## Extra FastAPI constructor argumentsIt's important to note that only the `title` from the original FastAPI will beprovided to the VersionedAPI app. If you have any middleware, event handlersetc these arguments will also need to be provided to the VersionedAPI functioncall, as in the example below```pythonfrom fastapi import FastAPI, Requestfrom fastapi_versioning import VersionedFastAPI, versionfrom starlette.middleware import Middlewarefrom starlette.middleware.sessions import SessionMiddlewareapp = FastAPI(    title='My App',    description='Greet uses with a nice message',    middleware=[        Middleware(SessionMiddleware, secret_key='mysecretkey')    ])@app.get('/greet')@version(1)def greet(request: Request):    request.session['last_version_used'] = 1    return 'Hello'@app.get('/greet')@version(2)def greet(request: Request):    request.session['last_version_used'] = 2    return 'Hi'@app.get('/version')def last_version(request: Request):    return f'Your last greeting was sent from version {request.session[&quot;last_version_used&quot;]}'app = VersionedFastAPI(app,    version_format='{major}',    prefix_format='/v{major}',    description='Greet users with a nice message',    middleware=[        Middleware(SessionMiddleware, secret_key='mysecretkey')    ])```</longdescription>
</pkgmetadata>