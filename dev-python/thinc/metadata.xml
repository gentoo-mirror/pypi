<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://explosion.ai&quot;&gt;&lt;img src=&quot;https://explosion.ai/assets/img/logo.svg&quot; width=&quot;125&quot; height=&quot;125&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;# Thinc: A refreshing functional take on deep learning, compatible with your favorite libraries### From the makers of [spaCy](https://spacy.io) and [Prodigy](https://prodi.gy)[Thinc](https://thinc.ai) is a **lightweight deep learning library** that offersan elegant, type-checked, functional-programming API for **composing models**,with support for layers defined in other frameworks such as **PyTorch,TensorFlow and MXNet**. You can use Thinc as an interface layer, a standalonetoolkit or a flexible way to develop new models. Previous versions of Thinc havebeen running quietly in production in thousands of companies, via both[spaCy](https://spacy.io) and [Prodigy](https://prodi.gy). We wrote the newversion to let users **compose, configure and deploy custom models** built withtheir favorite framework.[![tests](https://github.com/explosion/thinc/actions/workflows/tests.yml/badge.svg)](https://github.com/explosion/thinc/actions/workflows/tests.yml)[![Current Release Version](https://img.shields.io/github/v/release/explosion/thinc.svg?include_prereleases&amp;sort=semver&amp;style=flat-square&amp;logo=github)](https://github.com/explosion/thinc/releases)[![PyPi Version](https://img.shields.io/pypi/v/thinc.svg?include_prereleases&amp;sort=semver&amp;style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.python.org/pypi/thinc)[![conda Version](https://img.shields.io/conda/vn/conda-forge/thinc.svg?style=flat-square&amp;logo=conda-forge&amp;logoColor=white)](https://anaconda.org/conda-forge/thinc)[![Python wheels](https://img.shields.io/badge/wheels-%E2%9C%93-4c1.svg?longCache=true&amp;style=flat-square&amp;logo=python&amp;logoColor=white)](https://github.com/explosion/wheelwright/releases)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)[![Open demo in Colab][colab]][intro_to_thinc_colab]## üî• Features- **Type-check** your model definitions with custom types and  [`mypy`](https://mypy.readthedocs.io/en/latest/) plugin.- Wrap **PyTorch**, **TensorFlow** and **MXNet** models for use in your network.- Concise **functional-programming** approach to model definition, using  composition rather than inheritance.- Optional custom infix notation via **operator overloading**.- Integrated **config system** to describe trees of objects and hyperparameters.- Choice of **extensible backends**.- **[Read more &amp;rarr;](https://thinc.ai/docs)**## üöÄ QuickstartThinc is compatible with **Python 3.6+** and runs on **Linux**, **macOS** and**Windows**. The latest releases with binary wheels are available from[pip](https://pypi.python.org/pypi/thinc). Before you install Thinc and itsdependencies, make sure that your `pip`, `setuptools` and `wheel` are up todate. For the most recent releases, pip 19.3 or newer is recommended.```bashpip install -U pip setuptools wheelpip install thinc```See the [extended installation docs](https://thinc.ai/docs/install#extended) fordetails on optional dependencies for different backends and GPU. You might alsowant to[set up static type checking](https://thinc.ai/docs/install#type-checking) totake advantage of Thinc's type system.&gt; ‚ö†Ô∏è If you have installed PyTorch and you are using Python 3.7+, uninstall the&gt; package `dataclasses` with `pip uninstall dataclasses`, since it may have been&gt; installed by PyTorch and is incompatible with Python 3.7+.### üìì Selected examples and notebooksAlso see the [`/examples`](examples) directory and[usage documentation](https://thinc.ai/docs) for more examples. Most examplesare Jupyter notebooks ‚Äì to launch them on[Google Colab](https://colab.research.google.com) (with GPU support!) click onthe button next to the notebook name.| Notebook                                                                                                              | Description                                                                                                                                                                                       || --------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || [`intro_to_thinc`][intro_to_thinc]&lt;br /&gt;[![Open in Colab][colab]][intro_to_thinc_colab]                               | Everything you need to know to get started. Composing and training a model on the MNIST data, using config files, registering custom functions and wrapping PyTorch, TensorFlow and MXNet models. || [`transformers_tagger_bert`][transformers_tagger_bert]&lt;br /&gt;[![Open in Colab][colab]][transformers_tagger_bert_colab] | How to use Thinc, `transformers` and PyTorch to train a part-of-speech tagger. From model definition and config to the training loop.                                                             || [`pos_tagger_basic_cnn`][pos_tagger_basic_cnn]&lt;br /&gt;[![Open in Colab][colab]][pos_tagger_basic_cnn_colab]             | Implementing and training a basic CNN for part-of-speech tagging model without external dependencies and using different levels of Thinc's config system.                                         || [`parallel_training_ray`][parallel_training_ray]&lt;br /&gt;[![Open in Colab][colab]][parallel_training_ray_colab]          | How to set up synchronous and asynchronous parameter server training with Thinc and [Ray](https://ray.readthedocs.io/en/latest/).                                                                 |**[View more &amp;rarr;](examples)**[colab]:  https://gistcdn.githack.com/ines/dcf354aa71a7665ae19871d7fd14a4e0/raw/461fc1f61a7bc5860f943cd4b6bcfabb8c8906e7/colab-badge.svg[intro_to_thinc]: examples/00_intro_to_thinc.ipynb[intro_to_thinc_colab]:  https://colab.research.google.com/github/explosion/thinc/blob/master/examples/00_intro_to_thinc.ipynb[transformers_tagger_bert]: examples/02_transformers_tagger_bert.ipynb[transformers_tagger_bert_colab]:  https://colab.research.google.com/github/explosion/thinc/blob/master/examples/02_transformers_tagger_bert.ipynb[pos_tagger_basic_cnn]: examples/03_pos_tagger_basic_cnn.ipynb[pos_tagger_basic_cnn_colab]:  https://colab.research.google.com/github/explosion/thinc/blob/master/examples/03_pos_tagger_basic_cnn.ipynb[parallel_training_ray]: examples/04_parallel_training_ray.ipynb[parallel_training_ray_colab]:  https://colab.research.google.com/github/explosion/thinc/blob/master/examples/04_parallel_training_ray.ipynb### üìñ Documentation &amp; usage guides| Documentation                                                                     | Description                                           || --------------------------------------------------------------------------------- | ----------------------------------------------------- || [Introduction](https://thinc.ai/docs)                                             | Everything you need to know.                          || [Concept &amp; Design](https://thinc.ai/docs/concept)                                 | Thinc's conceptual model and how it works.            || [Defining and using models](https://thinc.ai/docs/usage-models)                   | How to compose models and update state.               || [Configuration system](https://thinc.ai/docs/usage-config)                        | Thinc's config system and function registry.          || [Integrating PyTorch, TensorFlow &amp; MXNet](https://thinc.ai/docs/usage-frameworks) | Interoperability with machine learning frameworks     || [Layers API](https://thinc.ai/docs/api-layers)                                    | Weights layers, transforms, combinators and wrappers. || [Type Checking](https://thinc.ai/docs/usage-type-checking)                        | Type-check your model definitions and more.           |## üó∫ What's where| Module                                    | Description                                                                       || ----------------------------------------- | --------------------------------------------------------------------------------- || [`thinc.api`](thinc/api.py)               | **User-facing API.** All classes and functions should be imported from here.      || [`thinc.types`](thinc/types.py)           | Custom [types and dataclasses](https://thinc.ai/docs/api-types).                  || [`thinc.model`](thinc/model.py)           | The `Model` class. All Thinc models are an instance (not a subclass) of `Model`.  || [`thinc.layers`](thinc/layers)            | The layers. Each layer is implemented in its own module.                          || [`thinc.shims`](thinc/shims)              | Interface for external models implemented in PyTorch, TensorFlow etc.             || [`thinc.loss`](thinc/loss.py)             | Functions to calculate losses.                                                    || [`thinc.optimizers`](thinc/optimizers.py) | Functions to create optimizers. Currently supports &quot;vanilla&quot; SGD, Adam and RAdam. || [`thinc.schedules`](thinc/schedules.py)   | Generators for different rates, schedules, decays or series.                      || [`thinc.backends`](thinc/backends)        | Backends for `numpy` and `cupy`.                                                  || [`thinc.config`](thinc/config.py)         | Config parsing and validation and function registry system.                       || [`thinc.util`](thinc/util.py)             | Utilities and helper functions.                                                   |## üêç Development notesThinc uses [`black`](https://github.com/psf/black) for auto-formatting,[`flake8`](http://flake8.pycqa.org/en/latest/) for linting and[`mypy`](https://mypy.readthedocs.io/en/latest/) for type checking. All code iswritten compatible with **Python 3.6+**, with type hints wherever possible. Seethe [type reference](https://thinc.ai/docs/api-types) for more details onThinc's custom types.### üë∑‚ôÄÔ∏è Building Thinc from sourceBuilding Thinc from source requires the full dependencies listed in[`requirements.txt`](requirements.txt) to be installed. You'll also need acompiler to build the C extensions.```bashgit clone https://github.com/explosion/thinccd thincpython -m venv .envsource .env/bin/activatepip install -U pip setuptools wheelpip install -r requirements.txtpip install --no-build-isolation .```Alternatively, install in editable mode:```bashpip install -r requirements.txtpip install --no-build-isolation --editable .```Or by setting `PYTHONPATH`:```bashexport PYTHONPATH=`pwd`pip install -r requirements.txtpython setup.py build_ext --inplace```### üö¶ Running testsThinc comes with an [extensive test suite](thinc/tests). The following shouldall pass and not report any warnings or errors:```bashpython -m pytest thinc    # test suitepython -m mypy thinc      # type checkspython -m flake8 thinc    # linting```To view test coverage, you can run `python -m pytest thinc --cov=thinc`. We aimfor a 100% test coverage. This doesn't mean that we meticulously write tests forevery single line ‚Äì we ignore blocks that are not relevant or difficult to testand make sure that the tests execute all code paths.</longdescription>
</pkgmetadata>