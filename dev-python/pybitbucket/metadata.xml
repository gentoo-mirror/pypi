<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============= PyBitbucket=============A Python wrapper for the Bitbucket Cloud REST API.This is not known to work with Bitbucket Server,previously known as Stash.To start working with this library, just do: :code:`pip install pybitbucket`.. image:: https://img.shields.io/pypi/v/pybitbucket.svg    :target: https://pypi.python.org/pypi/pybitbucket/0.12.0.. image:: https://img.shields.io/pypi/status/pybitbucket.svg    :target: https://pypi.python.org/pypi/pybitbucket.. image:: https://img.shields.io/pypi/pyversions/pybitbucket.svg    :target: https://pypi.python.org/pypi/pybitbucket.. image:: https://img.shields.io/pypi/l/pybitbucket.svg    :target: https://bitbucket.org/atlassian/python-bitbucket/src/master/LICENSE.txt.. image:: https://img.shields.io/pypi/dm/pybitbucket.svg    :target: https://pypi.python.org/pypi/pybitbucket---------------------Adopting this library---------------------Authenticate============The :code:`Authenticator` subclasses prepare API requests with credentials.The simplest case is :code:`Anonymous` which connects with no credentials.:code:`Anonymous` can be used with an publicly available resources.For private resources,:code:`BasicAuthenticator` uses email, username, and password as credentials.If your client application has it's own mechanisms for working with these values,you can subclass the :code:`BasicAuthenticator` to provide custom behavior.To &quot;plug in&quot; your implementation or a standard one, just do:::    bitbucket = Client(        BasicAuthenticator(            'your_username_here',            'your_secret_password_here',            'pybitbucket@mailinator.com'))If you have enabled `two-step verification &lt;https://confluence.atlassian.com/bitbucket/two-step-verification-777023203.html&gt;`_,then you will need to use an `app password &lt;https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication#app-pw&gt;`_ with the :code:`BasicAuthenticator`,not your regular user password.The :code:`OAuth2Authenticator` is intended as an example and superclass.It may work for some command-line clients.Other clients like web applicationswill need an appropriate implementation of :code:`obtain_authorization()`and perhaps may need to use a different grant types.Find Things===========For example, to find all your snippets:::    for snip in Snippet.find_snippets_for_role(client=bitbucket):        print(snip)The method says &quot;for role&quot; but, if not provided, it will use the default of owner.Hence, all your snippets.In general, finding things is done with a static find method on each type of resource.If the resource is plural, like &quot;snippets&quot; above, then the find method is a generator.You can use it with iterators or comprehensions.The resources you can find are:* user and team* repository and snippet* pull request and comment* commit and build status* hook and branch restrictionCreate Things=============For example, to create a new snippet:::    snip = Snippet.create(        files=open_files([&quot;README.rst&quot;]),        payload=SnippetPayload().add_title(&quot;My New Snippet&quot;),        client=bitbucket)The resources you can create are:* repository and snippet* pull request and comment* build status* hook and branch restrictionExamine Things==============For example, to examine attributes on a snippet:::    snip = Snippet.find_snippet_by_id(&quot;Xqoz8&quot;, bitbucket)    s = '\n'.join([        &quot;id          : {}&quot;.format(snip.id),        &quot;is_private  : {}&quot;.format(snip.is_private),        &quot;title       : {}&quot;.format(snip.title),        &quot;files       : {}&quot;.format(snip.filenames),        &quot;created_on  : {}&quot;.format(snip.created_on),        &quot;updated_on  : {}&quot;.format(snip.updated_on),        &quot;scm         : {}&quot;.format(snip.scm),        ]) if snip else 'Snippet not found.'    print(s)What attributes are available?You will not find them hardcoded in Python.They are populated dynamically from the JSON response.You can query the list via a convenience method:::    snip = Snippet.find_snippet_by_id(&quot;Xqoz8&quot;, bitbucket)    print(snip.attributes())Beware. The attributes for the same resource may change depending on how you got to it.Navigate Relationships======================For example, to list the commits for a snippet:::    snip = Snippet.find_snippet_by_id(&quot;Xqoz8&quot;, bitbucket)    for commit in snip.commits():        print(commit)What relationships are available?You will not find them hardcoded in Python.They are populated dynamically from the JSON response.You can query the list via a convenience method:::    snip = Snippet.find_snippet_by_id(&quot;Xqoz8&quot;, bitbucket)    print(snip.relationships())Just like attributes, the relationships for the same resource may change depending on how you got to it.If you need the canonical resource with all attributes, use the :code:`self()` relationship:::    snips = Snippet.find_snippets_for_role(client=bitbucket)    one_snip = next(snips)    # one_snip has no files relationship in this context.    real_snip = next(one_snip.self())    print(real_snip.files)----------Developing----------Python Virtual Environment Setup (for OS X)===========================================It's not virtual like a virtual machine. More like a specialized container for a Python version and libraries.1. :code:`brew install python` This installs the latest version of Python 2.7 with a version of setuptools and pip. Unfortunately, those versions of setuptools and pip seem to be broken.2. :code:`pip install --upgrade --no-use-wheel setuptools`3. :code:`pip install --upgrade --no-use-wheel pip`4. :code:`pip install virtualenvwrapper`Project Setup=============1. Clone the repository and set it as the current working directory.2. *(Optional, but good practice)* Create a `virtual environment &lt;http://docs.python-guide.org/en/latest/dev/virtualenvs/&gt;`_: :code:`mkvirtualenv python-bitbucket` Once created, use :code:`workon python-bitbucket` to restore the virtual environment.3. :code:`pip install -r requirements-dev.txt` Loads required libraries into the virtual environment.4. :code:`paver test_all` Run all the unit tests and analyze the source code.----TODO----* :code:`PUT` and :code:`DELETE` for :code:`snippet.watch` from `snippets Endpoint &lt;https://confluence.atlassian.com/display/BITBUCKET/snippets+endpoint&gt;`_.* Wrap the `version 1 endpoints &lt;https://confluence.atlassian.com/display/BITBUCKET/Version+1&gt;`_ for:    - groups    - group-privileges    - invitations</longdescription>
</pkgmetadata>