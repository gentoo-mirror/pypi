<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>What's this lib?================This project is a Python library to connect and manage the OpenVAS servers using the OMP protocol. OpenVAS 6, 7, 8 and 9 are supported (7 and 8 versions are still experimental)Also, you can parse and interpret OpenVas XML reports.Why this lib?=============There is an [official python library](https://pypi.python.org/pypi/openvas.omplib) for OpenVAS, but it doesn't work with OMPv4 based versions (OpenVAS 6).Also, the official library has many unfixed bugs, and it's not capable to read and interpret the XML reports.License=======This library is released under BSD Clause 3 licensePython versions===============Currently, this library only runs under Python 2.7 and above. Port to Python 3.x is not scheduled.Bug, ports and new features===========================Feel free to port, patch or add any new feature to this library, and send us the pull request. We thank you in advance :)Quick start===========Installing----------Downloading from code_____________________To download the latest source code enter the following command:.. code-block:: bash    git clone https://github.com/golismero/openvas_lib.gitThen, install the library in your default Python installation run the following command:.. code-block:: bash    python setup.py installInstall using pip_________________.. code-block:: bash    pip install openvas_libManage OpenVas server---------------------Connect to the server_____________________.. code-block:: python    from openvas_lib import VulnscanManager, VulnscanException    try:        scanner = VulnscanManager(HOST, USER, PASSWORD, PORT, TIMEOUT)    except VulnscanException as e:        print(&quot;Error:&quot;)        print(e)Launch a simple scan____________________.. code-block:: python    from openvas_lib import VulnscanManager, VulnscanException    scanner = VulnscanManager(HOST, USER, PASSWORD, PORT, TIMEOUT)    scan_id, target_id = scanner.launch_scan(target = &quot;127.0.0.1&quot;, # Target to scan                                             profile = &quot;Full and fast&quot;)Launch advanced scan____________________The library supports callbacks. They will be run every 10 seconds and report the status of the scan (&quot;callback_progress&quot;) or the end of the scan (&quot;callback_end&quot;)... code-block:: python    from threading import Semaphore    from functools import partial    from openvas_lib import VulnscanManager, VulnscanException    def my_print_status(i):        print(str(i))    def my_launch_scanner():        sem = Semaphore(0)        # Configure        manager = VulnscanManager(&quot;localhost&quot;, &quot;admin&quot;, &quot;admin&quot;)        # Launch        manager.launch_scan(target,                            profile = &quot;empty&quot;,                            callback_end = partial(lambda x: x.release(), sem),                            callback_progress = my_print_status)        # Wait        Sem.acquire()        # Finished scan        print(&quot;finished&quot;)Running it:.. code-block:: python    &gt;&gt;&gt; my_launch_scanner() # It can take some time    0    10    39    60    90    finishedGet results of scan___________________.. code-block:: python    from __future__ import print_function    from openvas_lib import VulnscanManager, VulnscanException    scanner = VulnscanManager(HOST, USER, PASSWORD, PORT, TIMEOUT)    openvas_results = scanner.get_results(SCAN_ID)Delete scan___________.. code-block:: python    from __future__ import print_function    from openvas_lib import VulnscanManager, VulnscanException    scanner = VulnscanManager(HOST, USER, PASSWORD, PORT, TIMEOUT)    scanner.delete_scan(SCAN_ID)Delete target_____________.. code-block:: python    from __future__ import print_function    from openvas_lib import VulnscanManager, VulnscanException    scanner = VulnscanManager(HOST, USER, PASSWORD, PORT, TIMEOUT)    scanner.delete_target(TARGET_ID)Parse OpenVas XML report------------------------You can use examples reports, available in test/ folder, as &quot;xml&quot; extension. This reports was made using MetasploitableLinux distribution... code-block:: pycon    &gt;&gt;&gt; from __future__ import print_function    &gt;&gt;&gt; from openvas_lib import report_parser    &gt;&gt;&gt; results = report_parser(&quot;tests/metasploitable_all.xml&quot;)    &gt;&gt;&gt; print(results)    [&lt;openvas_lib.data.OpenVASResult object at 0x108f2d250&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2d290&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e7fcd0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e88e90&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e88050&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e88410&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e88550&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2d650&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2d750&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2d850&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2d950&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2da50&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2db50&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2dc50&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108eb56d0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108eb5750&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2ded0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f2dfd0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35110&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108eb5950&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35210&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108eb5a90&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108eb5ad0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f355d0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f356d0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108eb5dd0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f357d0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108eb5f90&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e101d0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e10390&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108eb5d90&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35910&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35a10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35b10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35c10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35d10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35e10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f35f10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3a050&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e102d0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e10910&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e10ad0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e10c10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3a150&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3a250&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3a350&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3a450&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3a550&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e10e50&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e10e90&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28090&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3a750&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3a910&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3aa10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28250&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28210&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28350&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28450&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3ad10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3ae10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3ac10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e287d0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28890&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e289d0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28ad0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28c10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3e210&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28710&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28d90&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28ed0&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28f10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108e28f90&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3e510&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3e610&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3e710&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3e810&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3e910&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3ea10&gt;, &lt;openvas_lib.data.OpenVASResult object at 0x108f3eb10&gt;]    # get properties from a vuln with more info    &gt;&gt;&gt; r = None    &gt;&gt;&gt; for x in results:      if x.id == &quot;07cdd3dc-9f5b-4a75-a173-f7ca50bfb4f3&quot;:        r = x    &gt;&gt;&gt; r.id    '07cdd3dc-9f5b-4a75-a173-f7ca50bfb4f3'    &gt;&gt;&gt; r.host    '10.211.55.35'    &gt;&gt;&gt; r.raw_description    &quot;\n  Summary:\n  The host is running MySQL and is prone to Denial Of Service\n  vulnerability.\n\n  Vulnerability Insight:\n  The flaw is due to an error when processing the 'ALTER DATABASE' statement and\n  can be exploited to corrupt the MySQL data directory using the '#mysql50#'\n  prefix followed by a '.' or '..'.\n\n  NOTE: Successful exploitation requires 'ALTER' privileges on a database.\n  Impact:\n  Successful exploitation could allow an attacker to cause a Denial of Service.\n  Impact Level: Application\n\n  Affected Software/OS:\n  MySQL version priot to 5.1.48 on all running platform.\n\n  Solution:\n  Upgrade to MySQL version 5.1.48\n  For updates refer to http://dev.mysql.com/downloads\n&quot;    &gt;&gt;&gt; print(r.raw_description)      Summary:      The host is running MySQL and is prone to Denial Of Service      vulnerability.      Vulnerability Insight:      The flaw is due to an error when processing the 'ALTER DATABASE' statement and      can be exploited to corrupt the MySQL data directory using the '#mysql50#'      prefix followed by a '.' or '..'.      NOTE: Successful exploitation requires 'ALTER' privileges on a database.      Impact:      Successful exploitation could allow an attacker to cause a Denial of Service.      Impact Level: Application      Affected Software/OS:      MySQL version priot to 5.1.48 on all running platform.      Solution:      Upgrade to MySQL version 5.1.48      For updates refer to http://dev.mysql.com/downloads    &gt;&gt;&gt; r.summary    'The host is running MySQL and is prone to Denial Of Service vulnerability.'    &gt;&gt;&gt; r.vulnerability_insight    &quot;The flaw is due to an error when processing the 'ALTER DATABASE' statement and can be exploited to corrupt the MySQL data directory using the '#mysql50#' prefix followed by a '.' or '..'. NOTE: Successful exploitation requires 'ALTER' privileges on a database.&quot;    &gt;&gt;&gt; r.impact    'Successful exploitation could allow an attacker to cause a Denial of Service. Impact Level: Application'    &gt;&gt;&gt; r.affected_software    'MySQL version priot to 5.1.48 on all running platform.'    &gt;&gt;&gt; r.solution    'Upgrade to MySQL version 5.1.48 For updates refer to http://dev.mysql.com/downloads'    &gt;&gt;&gt; r.threat    'Medium'    &gt;&gt;&gt; r.port.number    3306    &gt;&gt;&gt; r.port.proto    'tcp'    &gt;&gt;&gt; r.port.port_name    'mysql'</longdescription>
</pkgmetadata>