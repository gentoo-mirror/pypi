<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Bottle Elastic APMSimple plugin to use ELK with APM server for your bottle application### Using default_app&gt; `default_app()` uses AppStack, so you only need to install it once.```pythonfrom bottle import default_app, runfrom bottle_elastic_apm import ElasticAPM, make_apm_clientELK_CONFIG = {    'service_name': 'my-app',}app = default_app()app2 = default_app()apm_client = make_apm_client(**ELK_CONFIG) # avoid multi client instancesapp.install(ElasticAPM(client=apm_client))@app.get('/')def index():    return 'Hello world!'@app2.get('/2')def index2():    return 'Hello world!'run(app)```### Using Bottle()&gt; `Bottle()` don't uses AppStack, so you need to install on all of them.```pythonfrom bottle import Bottle, runfrom bottle_elastic_apm import ElasticAPM, make_apm_clientELK_CONFIG = {    'service_name': 'my-app',}app = Bottle()app2 = Bottle()app.mount('v2', app2)apm_client = make_apm_client(**ELK_CONFIG) # avoid multi client instancesapp.install(ElasticAPM(client=apm_client))app2.install(ElasticAPM(client=apm_client))@app.get('/')def index():    return 'Hello world!'@app2.get('/2')def index2():    return 'Hello world!'run(app)```### Avoid capture specific errors```pythonfrom bottle import default_appfrom bottle_elastic_apm import ElasticAPM, make_apm_clientELK_CONFIG = {    'service_name': 'my-app',}app = default_app()apm_client = make_apm_client(**ELK_CONFIG) # avoid multi client instancesapp.install(ElasticAPM(client=apm_client, avoided_errors={(401, 'JWT: Signature has expired',)}))```</longdescription>
</pkgmetadata>