<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;docs/source/logo.png&quot; height=&quot;150&quot;&gt;&lt;/p&gt;--&gt;&lt;h1 align=&quot;center&quot;&gt;  Zenodo Client&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/cthoyt/zenodo-client/actions?query=workflow%3ATests&quot;&gt;        &lt;img alt=&quot;Tests&quot; src=&quot;https://github.com/cthoyt/zenodo-client/workflows/Tests/badge.svg&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/cthoyt/cookiecutter-python-package&quot;&gt;        &lt;img alt=&quot;Cookiecutter template from @cthoyt&quot; src=&quot;https://img.shields.io/badge/Cookiecutter-snekpack-blue&quot; /&gt;     &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/zenodo_client&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/zenodo_client&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/zenodo_client&quot;&gt;        &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/zenodo_client&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/cthoyt/zenodo-client/blob/main/LICENSE&quot;&gt;        &lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/zenodo_client&quot; /&gt;    &lt;/a&gt;    &lt;a href='https://zenodo_client.readthedocs.io/en/latest/?badge=latest'&gt;        &lt;img src='https://readthedocs.org/projects/zenodo_client/badge/?version=latest' alt='Documentation Status' /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://zenodo.org/badge/latestdoi/343513445&quot;&gt;        &lt;img src=&quot;https://zenodo.org/badge/343513445.svg&quot; alt=&quot;DOI&quot;&gt;    &lt;/a&gt;&lt;/p&gt;A wrapper for the Zenodo API.## üí™ Getting StartedThe first example shows how you can set some configuration then never worry about whether it's beenuploaded already or not - all baked in with [`pystow`](https://github.com/cthoyt/pystow). On thefirst time this script is run, the new deposition is made, published, and the identifier is storedwith the given key in your `~/.config/zenodo.ini`. Next time it's run, the deposition will be lookedup, and the data will be uploaded. Versioning is given automatically by date, and if multipleversions are uploaded on one day, then a dash and the revision are appended.```pythonfrom zenodo_client import Creator, Metadata, ensure_zenodo# Define the metadata that will be used on initial uploaddata = Metadata(    title='Test Upload 3',    upload_type='dataset',    description='test description',    creators=[        Creator(            name='Hoyt, Charles Tapley',            affiliation='Harvard Medical School',            orcid='0000-0003-4423-4370',        ),    ],)res = ensure_zenodo(    key='test3',  # this is a unique key you pick that will be used to store                  # the numeric deposition ID on your local system's cache    data=data,    paths=[        '/Users/cthoyt/Desktop/test1.png',    ],    sandbox=True,  # remove this when you're ready to upload to real Zenodo)from pprint import pprintpprint(res.json())```A real-world example can be found here: https://github.com/cthoyt/nsockg.The following example shows how to use the Zenodo uploader if you already know what your depositionidentifier is.```pythonfrom zenodo_client import update_zenodo# The ID from your depositionSANDBOX_DEP_ID = '724868'# Paths to local files. Good to use in combination with resources that are always# dumped to the same place by a given scriptpaths = [    # os.path.join(DATABASE_DIRECTORY, 'alts_sample.tsv')    '/Users/cthoyt/Desktop/alts_sample.tsv',]# Don't forget to set the ZENODO_API_TOKEN environment variable or# any valid way to get zenodo/api_token from PyStow.update_zenodo(SANDBOX_DEP_ID, paths)```The following example shows how to look up the latest version of a record.```pythonfrom zenodo_client import Zenodozenodo = Zenodo()OOH_NA_NA_RECORD = '4020486'new_record = zenodo.get_latest_record(OOH_NA_NA_RECORD)```Even further, the latest version of `names.tsv.gz` can be automatically downloaded to the`~/.data/zenodo/&lt;conceptrecid&gt;/&lt;version&gt;/&lt;path&gt;` via `pystow` with:```pythonfrom zenodo_client import Zenodozenodo = Zenodo()OOH_NA_NA_RECORD = '4020486'new_record = zenodo.download_latest(OOH_NA_NA_RECORD, 'names.tsv.gz')```A real-world example can be found [here](https://github.com/pyobo/pyobo/blob/master/src/pyobo/resource_utils.py)where the latest build of the [Ooh Na Na](https://cthoyt.com/2020/04/18/ooh-na-na.html) nomenclaturedatabase is automatically downloaded from Zenodo, even though the PyOBO package only hardcodes thefirst deposition ID.### Command Line InterfaceThe zenodo_client command line tool is automatically installed. It can be used from the shell withthe `--help` flag to show all subcommands:```shell$ zenodo_client --help```It can be run with `zenodo_client &lt;deposition ID&gt; &lt;path 1&gt; ... &lt;path N&gt;`## ‚¨áÔ∏è InstallationThe most recent release can be installed from[PyPI](https://pypi.org/project/zenodo_client/) with:```bash$ pip install zenodo_client```The most recent code and data can be installed directly from GitHub with:```bash$ pip install git+https://github.com/cthoyt/zenodo-client.git```To install in development mode, use the following:```bash$ git clone git+https://github.com/cthoyt/zenodo-client.git$ cd zenodo-client$ pip install -e .```## ‚öñÔ∏è LicenseThe code in this package is licensed under the MIT License.## üôè ContributingContributions, whether filing an issue, making a pull request, or forking, are appreciated. See[CONTRIBUTING.rst](https://github.com/cthoyt/zenodo-client/blob/master/CONTRIBUTING.rst) for moreinformation on getting involved.## üç™ Cookiecutter AcknowledgementThis package was created with [@audreyr](https://github.com/audreyr)'s[cookiecutter](https://github.com/cookiecutter/cookiecutter) packageusing [@cthoyt](https://github.com/cthoyt)'s[cookiecutter-python-package](https://github.com/cthoyt/cookiecutter-python-package) template.## üõ†Ô∏è DevelopmentThe final section of the README is for if you want to get involved by making a code contribution.### ‚ùì TestingAfter cloning the repository and installing `tox` with `pip install tox`, the unit tests inthe `tests/` folder can be run reproducibly with:```shell$ tox```Additionally, these tests are automatically re-run with each commit ina [GitHub Action](https://github.com/cthoyt/zenodo-client/actions?query=workflow%3ATests).### üì¶ Making a ReleaseAfter installing the package in development mode and installing`tox` with `pip install tox`, the commands for making a new release are contained withinthe `finish` environment in `tox.ini`. Run the following from the shell:```shell$ tox -e finish```This script does the following:1. Uses BumpVersion to switch the version number in the `setup.cfg` and   `src/zenodo_client/version.py` to not have the `-dev` suffix2. Packages the code in both a tar archive and a wheel3. Uploads to PyPI using `twine`. Be sure to have a `.pypirc` file configured to avoid the need for   manual input at this step4. Push to GitHub. You'll need to make a release going with the commit where the version was bumped.5. Bump the version to the next patch. If you made big changes and want to bump the version by   minor, you can use `tox -e bumpversion minor` after.</longdescription>
</pkgmetadata>