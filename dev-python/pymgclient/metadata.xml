<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pymgclient - Memgraph database adapter for Python languagepymgclient is a [Memgraph](https://memgraph.com) database adapter for Pythonprogramming language compliant with the DB-API 2.0 specification described byPEP 249.mgclient module is the current implementation of the adapter. It is implementedin C as a wrapper around [mgclient](https://github.com/memgraph/mgclient), theofficial Memgraph client library. As a C extension, it is only compatible withthe CPython implementation of the Python programming language.pymgclient only works with Python 3.Check out the documentation if you need help with[installation](https://memgraph.github.io/pymgclient/introduction.html#installation)or if you want to[build](https://memgraph.github.io/pymgclient/introduction.html#install-from-source)pymgclient for yourself!## DocumentationOnline documentation can be found on [GitHubpages](https://memgraph.github.io/pymgclient/).You can also build a local version of the documentation by running `make` fromthe `docs` directory. You will need [Sphinx](http://www.sphinx-doc.org/)installed in order to do that.## Code sampleHere is an example of an interactive session showing some of the basiccommands:```python&gt;&gt;&gt; import mgclient# Make a connection to the database&gt;&gt;&gt; conn = mgclient.connect(host='127.0.0.1', port=7687)# Create a cursor for query execution&gt;&gt;&gt; cursor = conn.cursor()# Execute a query&gt;&gt;&gt; cursor.execute(&quot;&quot;&quot;        CREATE (n:Person {name: 'John'})-[e:KNOWS]-&gt;               (m:Person {name: 'Steve'})        RETURN n, e, m    &quot;&quot;&quot;)# Fetch one row of query results&gt;&gt;&gt; row = cursor.fetchone()&gt;&gt;&gt; print(row[0])(:Person {'name': 'John'})&gt;&gt;&gt; print(row[1])[:KNOWS]&gt;&gt;&gt; print(row[2])(:Person {'name': 'Steve'})# Make database changes persistent&gt;&gt;&gt; conn.commit()```</longdescription>
</pkgmetadata>