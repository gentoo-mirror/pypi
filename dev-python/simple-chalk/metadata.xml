<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Simple Chalk*Note: This document is best viewed [on github](github.com/olsonpm/py_simple-chalk).Pypi's headers are all caps which presents inaccurate information*&quot;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;&lt;!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;**Table of Contents**- [Intro](#intro)   - [What is it?](#what-is-it)   - [Why create it?](#why-create-it)   - [Why the subset of features?](#why-the-subset-of-features)- [Install](#install)- [Usage](#usage)- [Api](#api)   - [`chalk` (string) =&gt; string](#chalk-string--string)   - [`newChalk` () =&gt; Chalk](#newchalk---chalk)- [Test](#test)- [Features included from js version of Chalk](#features-included-from-js-version-of-chalk)- [Features omitted](#features-omitted)&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;### Intro##### What is it?A terminal string styling library for python.  It implements a subset ofSindre Sorhus' [chalk](https://github.com/chalk/chalk) (which is for js).e.g. `chalk.green.bold(&quot;success&quot;)` prints like you'd expect in the console.##### Why create it?I am familiar with and enjoy the syntax of [chalk](https://github.com/chalk/chalk).Anthonyalmarza's  [chalk](https://github.com/anthonyalmarza/chalk)deviates from that syntax and so I created my own.I'm also new to python so this was a good way to learn.##### Why the subset of features?I only use chalk for very simple purposes so I left out things like 256 colors.### Install```sh$ pip install simple_chalk```### Usage```pythonfrom simple_chalk import chalk, green# both of these are the sameprint(chalk.green(&quot;success&quot;))print(green(&quot;success&quot;))# chainedprint(green.bold(&quot;success&quot;))# assign combinationssuccess = green.bold.underlineprint(success(&quot;we did it!&quot;))# last color winsprint(green.red(&quot;this is red&quot;))# background and foreground colors are separatewhyNot = green.bgWhite.red.bgGrayprint(whyNot(&quot;this is red text with a gray background&quot;))```### Api`simple_chalk` exports the following##### `chalk` (string) =&gt; string - A singleton that can be used instead of importing the colors and   styles directly. - `chalk` and all exported colors/styles are chainable callables.  When called,   they take a single string argument and return a string wrapped in the   appropriate ascii color codes.##### `newChalk` () =&gt; Chalk - You probably don't need this, but it creates a new chalk instance in case   another library is misbehaving.The following colors are exported- black  - red  - green  - yellow  - blue  - magenta  - cyan  - white  - blackBright (also 'gray' and 'grey')- redBright- greenBright- yellowBright- blueBright- magentaBright- cyanBright- whiteBrightEach color also has a camel-cased `bg` equivalent.  e.g. `bgBlack`and `bgYellowBright`Finally the following miscellaneous styles are exported- bold- dim- underline- hidden### Test```shhub clone olsonpm/py_simple-chalkcd py_simple-chalkpython runTests.py```### Features included from js version of Chalk- chainable api- same color names (with added aliases)### Features omitted\*\* Features marked with `*` are ones I'd pull in should someone create a PR.- 256 colors and TrueColor support- multiple arguments, and thus nested styles- \*color support detection- \*blue -&gt; blueBright auto conversion on windows- \*ability to disable- \*modifiers other than the miscellaneous styles noted above.  e.g. `reset`, `italic`, `inverse` etc.</longdescription>
</pkgmetadata>