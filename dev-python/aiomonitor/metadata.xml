<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aiomonitor==========.. image:: https://github.com/aio-libs/aiomonitor/workflows/CI/badge.svg   :target: https://github.com/aio-libs/aiomonitor/actions?query=workflow%3ACI   :alt: GitHub Actions status for the main branch.. image:: https://codecov.io/gh/aio-libs/aiomonitor/branch/main/graph/badge.svg   :target: https://codecov.io/gh/aio-libs/aiomonitor   :alt: codecov.io status for the main branch.. image:: https://badge.fury.io/py/aiomonitor.svg   :target: https://pypi.org/project/aiomonitor   :alt: Latest PyPI package version.. image:: https://img.shields.io/pypi/dm/aiomonitor   :target: https://pypistats.org/packages/aiomonitor   :alt: Downloads count.. image:: https://readthedocs.org/projects/aiomonitor-ng/badge/?version=latest   :target: https://aiomonitor.aio-libs.org/en/latest/?badge=latest   :alt: Documentation Status**aiomonitor** is a module that adds monitor and cli capabilitiesfor asyncio_ applications. Idea and code were borrowed from curio_ project.Task monitor that runs concurrently to the asyncio_ loop (or fast drop-inreplacement uvloop_) in a separate thread as result monitor will work even ifthe event loop is blocked for some reason.This library provides a python console using aioconsole_ module. It is possibleto execute asynchronous commands inside your running application. Extensiblewith you own commands, in the style of the standard library's cmd_ module.. image:: https://raw.githubusercontent.com/aio-libs/aiomonitor/main/docs/screenshot-ps-where-example.png   :alt: An example to run the aiomonitor shellInstallation------------Installation process is simple, just::    $ pip install aiomonitorExample-------Monitor has context manager interface:.. code:: python    import aiomonitor    async def main():        loop = asyncio.get_running_loop()        run_forever = loop.create_future()        with aiomonitor.start_monitor(loop):            await run_forever    try:        asyncio.run(main())    except KeyboardInterrupt:        passNow from separate terminal it is possible to connect to the application::    $ telnet localhost 50101or the included python client::    $ python -m aiomonitor.cliTutorial--------Let's create a simple aiohttp_ application, and see how ``aiomonitor`` canbe integrated with it... code:: python    import asyncio    import aiomonitor    from aiohttp import web    # Simple handler that returns response after 100s    async def simple(request):        loop = request.app.loop        print('Start sleeping')        await asyncio.sleep(100)        return web.Response(text=&quot;Simple answer&quot;)    loop = asyncio.get_event_loop()    # create application and register route    app = web.Application()    app.router.add_get('/simple', simple)    # it is possible to pass a dictionary with local variables    # to the python console environment    host, port = &quot;localhost&quot;, 8090    locals_ = {&quot;port&quot;: port, &quot;host&quot;: host}    # init monitor just before run_app    with aiomonitor.start_monitor(loop=loop, locals=locals_):        # run application with built-in aiohttp run_app function        web.run_app(app, port=port, host=host)Let's save this code in file ``simple_srv.py``, so we can run it with the following command::    $ python simple_srv.py    ======== Running on http://localhost:8090 ========    (Press CTRL+C to quit)And now one can connect to a running application from a separate terminal, withthe ``telnet`` command, and ``aiomonitor`` will immediately respond with prompt::    $ telnet localhost 50101    Asyncio Monitor: 1 tasks running    Type help for commands    monitor &gt;&gt;&gt;Now you can type commands, for instance, ``help``::    monitor &gt;&gt;&gt; help    Usage: help [OPTIONS] COMMAND [ARGS]...      To see the usage of each command, run them with &quot;--help&quot; option.    Commands:      cancel                  Cancel an indicated task      console                 Switch to async Python REPL      exit (q,quit)           Leave the monitor client session      help (?,h)              Show the list of commands      ps (p)                  Show task table      ps-terminated (pst,pt)  List recently terminated/cancelled tasks      signal                  Send a Unix signal      stacktrace (st,stack)   Print a stack trace from the event loop thread      where (w)               Show stack frames and the task creation chain of a task      where-terminated (wt)   Show stack frames and the termination/cancellation chain of a task``aiomonitor`` also supports async python console inside a running event loopso you can explore the state of your application::    monitor &gt;&gt;&gt; console    Python 3.10.7 (main, Sep  9 2022, 12:31:20) [Clang 13.1.6 (clang-1316.0.21.2.5)] on darwin    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.    ---    This console is running in an asyncio event loop.    It allows you to wait for coroutines using the 'await' syntax.    Try: await asyncio.sleep(1, result=3)    ---    &gt;&gt;&gt; await asyncio.sleep(1, result=3)    3    &gt;&gt;&gt;To leave the console type ``exit()`` or press Ctrl+D::    &gt;&gt;&gt; exit()    âœ“ The console session is closed.    monitor &gt;&gt;&gt;Extension---------Additional console variables~~~~~~~~~~~~~~~~~~~~~~~~~~~~You may add more variables that can be directly referenced in the ``console`` command.Refer `the console-variables example code &lt;https://github.com/aio-libs/aiomonitor/tree/main/examples/console-variables.py&gt;`_Custom console commands~~~~~~~~~~~~~~~~~~~~~~~``aiomonitor`` is very easy to extend with your own console commands.Refer `the extension example code &lt;https://github.com/aio-libs/aiomonitor/tree/main/examples/extension.py&gt;`_Requirements------------* Python_ 3.8+ (3.10.7+ recommended)* aioconsole_* Click_* prompt_toolkit_* uvloop_ (optional).. _PEP492: https://www.python.org/dev/peps/pep-0492/.. _Python: https://www.python.org.. _aioconsole: https://github.com/vxgmichel/aioconsole.. _aiohttp: https://github.com/aio-libs/aiohttp.. _asyncio: http://docs.python.org/3/library/asyncio.html.. _Click: https://click.palletsprojects.com.. _curio: https://github.com/dabeaz/curio.. _prompt_toolkit: https://python-prompt-toolkit.readthedocs.io.. _uvloop: https://github.com/MagicStack/uvloop.. _cmd: http://docs.python.org/3/library/cmd.htmlCHANGES=======0.5.0 (undefined)-----------------* Fix a regression in Python 3.10 due to #10 (#11)* Support Python 3.11 properly by allowing the optional `name` and `context` kwargs passed to `asyncio.create_task()` in the hooked task factory function (#10)* Update development dependencies* Selective persistent termination logs (#9)* Implement cancellation chain tracker (#8)* Trigger auto-completion only when Tab is pressed* Support auto-completion of commands and arguments (#7)* Add missing explicit dependency to Click* Promote `console_locals` as public attr* Reimplement console command (#6)* Migrate to Click-based command line interface (#5)* Adopt `prompt_toolkit` and support concurrent clients (#4)* Show the total number of tasks when executing `ps` (#3)* Apply black, isort, mypy, flake8 and automate CI workflows using GitHub Actions* Fix the task creation location in the 'ps' command output* Remove loop=loop from all asynchronous calls to support newer Python versions (#329)* Added the task creation stack chain display to the 'where' command by setting a custom task factory (#1)These are the backported changes from [aiomonitor-ng](https://github.com/achimnol/aiomonitor-ng).As the version bumps have gone far away in the fork, all those extra releases are squashed into the v0.5.0 release.0.4.5 (2019-11-03)------------------* Fixed endless loop on EOF (thanks @apatrushev)0.4.4 (2019-03-23)------------------* Simplified python console start end #175* Added python 3.7 compatibility #1760.4.3 (2019-02-02)------------------* Reworked console server start/close logic #1690.4.2 (2019-01-13)------------------* Fixed issue with type annotations from 0.4.1 release #1640.4.1 (2019-01-10)------------------* Fixed Python 3.5 support #161 (thanks @bmerry)0.4.0 (2019-01-04)------------------* Added support for custom commands #133 (thanks @yggdr)* Fixed OptLocals being passed as the default value for &quot;locals&quot; #122 (thanks @agronholm)* Added an API inspired by the standard library's cmd module #135 (thanks @yggdr)* Correctly report the port running aioconsole #124 (thanks @bmerry)0.3.1 (2018-07-03)------------------* Added the stacktrace command #120 (thanks @agronholm)0.3.0 (2017-09-08)------------------* Added _locals_ parameter for passing environment to python REPL0.2.1 (2016-01-03)------------------* Fixed import in telnet cli in #12 (thanks @hellysmile)0.2.0 (2016-01-01)------------------* Added basic documentation* Most of methods of Monitor class are not not private api0.1.0 (2016-12-14)------------------* Added missed LICENSE file* Updated API, added start_monitor() function0.0.3 (2016-12-11)------------------* Fixed README.rst0.0.2 (2016-12-11)------------------* Tests more stable now* Added simple tutorial to README.rst0.0.1 (2016-12-10)------------------* Initial release.</longdescription>
</pkgmetadata>