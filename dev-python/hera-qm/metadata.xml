<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HERA Quality Metrics[![](https://github.com/HERA-Team/hera_qm/workflows/Run%20Tests/badge.svg?branch=master)](https://github.com/HERA-Team/hera_qm/actions)[![codecov](https://codecov.io/gh/HERA-Team/hera_qm/branch/master/graph/badge.svg)](https://codecov.io/gh/HERA-Team/hera_qm)`hera_qm` is a python package for calculating quality metrics of HERA data.It is integrated in the Real-Time Pipeline (RTP), automatically generating metricsfor all HERA data as it is taken. But `hera_qm` can also be used offline forfurther analysis.## MotivationData quality metrics are useful and needed throughout the analysis of interferometric data.This repository is a centralized place for the HERA team to develop metrics to 1)run on data in the RTP and deliver to the wider collaboration; 2) store these metricsin the Monitor and Control database for easy access; and 3) use offline in individualanalyses. As a consequence of the first two goals, contributions to `hera_qm` willbe vetted by the community and require thorough unittests. However, the code basewill also be flexible to enable the third goal, and we welcome contributions (see below).## InstallationPreferred method of installation for users is simply `pip install .`(or `pip install git+https://github.com/HERA-Team/hera_qm`). This will installrequired dependencies. See below for manual dependency management.### DependenciesIf you are using `conda`, you may wish to install the following dependencies manuallyto avoid them being installed automatically by `pip`::    $ conda install -c conda-forge &quot;numpy&gt;=1.10&quot; &quot;astropy&gt;=3.2.3&quot; &quot;aipy&gt;=3.0rc2&quot; h5py pyuvdata pyyaml### DevelopingIf you are developing `hera_qm`, it is preferred that you do so in a fresh `conda`environment. The following commands will install all relevant development packages::    $ git clone https://github.com/HERA-Team/hera_qm.git    $ cd hera_qm    $ conda create -n hera_qm python=3    $ conda activate hera_qm    $ conda env update -n hera_qm -f environment.yml    $ pip install -e .This will install extra dependencies required for testing/development as well as thestandard ones.### Running TestsUses the `pytest` package to execute test suite.From the source `hera_qm` directory run: ```pytest``` or ```python -m pytest```.## Package Details and UsageThere are currently five primary modules which drive HERA quality metrics.### ant_metricsA module to handle visibility-based metrics designed to identify misbehaving antennas.The module includes methods to calculate several metrics to identify cross-polarized antennasor dead antennas, based on either their redundancy with other antennas or their relative power.The primary class, `AntennaMetrics`, includes interfaces to these methods and functions forloading data, iteratively running metrics and removing misbehaving antennas, and saving theresults of those metrics in a JSON. And example of using this moduleis in`scripts/ant_metrics_example_notebook.ipynb`.### firstcal_metricsA module to calculate metrics based on firstcal delay solutions. These metricsidentify large variations in delay solutions across time or across the arrayfor a given time. Included are functions for plotting firstcal delay solutions,running the firstcal metrics, plotting the metrics, and writing them to file.An example of using this module is in `scripts/firstcal_metrics.ipynb`.### omnical_metricsA module to calculate metrics based on omnical solutions. Currently, these metricsaim to identify discontinuities in the phase solutions of the gains and model visibilities,as well as outliers in the antenna-based chi-square output from omnical. Routines forcalculating the metrics, writing them to file, and plotting the metrics (as well as thegain solutions and model visibilities) are included. For an example of how to use thesemetrics see `scripts/omnical_metrics_example.ipynb`. The metrics themselves are detailedthere as well as in the doc-strings of the source code in `hera_qm.Omnical_Metrics.run_metrics()`.### xrfiThis module contains the tools to for radio frequency interference (RFI) detectionand flagging. Low-level preprocessing functions act on 2D arrays to filter dataand/or calculate significance metrics. Flagging algorithms implement the low-levelfunctions or flag in other ways (e.g. &quot;watershed&quot; around existing flags). &quot;Pipelines&quot;define the flagging strategy to apply to some data. For example, `xrfi_h1c_pipe` showsthe flagging scheme we used for H1C observing season. Wrappers handle the file I/O,and call pipelines. `xrfi_h1c_run` is a wrapper we retroactively made to reflectwhat we did for H1C.### UVFlagUVFlag has been moved to [pyuvdata](https://github.com/RadioAstronomySoftwareGroup/pyuvdata).## Known Issues and Planned ImprovementsIssues are tracked in the [issue log](https://github.com/HERA-Team/hera_qm/issues).Major current issues and planned improvements include:* A unified metric class structure* Develop Tsys calculations into metrics (HERA Memos 16 and 34)* Develop closure quantities into metrics (HERA Memo 15)## ContributingContributions to this package to introduce new functionality or address any of theissues in the [issue log](https://github.com/HERA-Team/hera_qm/issues) are very welcome.Please submit improvements as pull requests against the repo after verifying thatthe existing tests pass and any new code is well covered by unit tests.Bug reports or feature requests are also very welcome, please add them to theissue log after verifying that the issue does not already exist.Comments on existing issues are also welcome.</longdescription>
</pkgmetadata>