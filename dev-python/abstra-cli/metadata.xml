<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![pypi](https://img.shields.io/pypi/v/abstra-cli.svg)](https://pypi.python.org/pypi/abstra-cli) [![PyPI Downloads](https://img.shields.io/pypi/dm/abstra-cli.svg)](https://pypi.org/project/abstra-cli/) [![Code check](https://github.com/abstra-app/abstra-cli/actions/workflows/code_check.yml/badge.svg)](https://github.com/abstra-app/abstra-cli/actions/workflows/code_check.yml)# Abstra CLICommand Line Interface for Abstra Cloud## Getting Started### InstallationDownload preferably using pipx:```shpipx install abstra-cli```Or using pip:```shpip install abstra-cli```### AuthenticationYou will need to be authenticated to run most commands.1. Run command below:```shabstra login```- Credentials are stored at `.abstra/credentials` path inside current directory.- Alternatively you can set the `ABSTRA_API_TOKEN` environment variable.- Alternatively you can run `abstra configure &lt;token&gt;` if you already have a token.## CRUD CommandsThe general structure of the commands follows the pattern below:```shabstra &lt;command&gt; &lt;resource&gt; [&lt;argument&gt;...] [--&lt;optional-argument-name&gt; &lt;optional-argument-value&gt; ...]```The available commands are:- `list`- `add`- `update`- `remove`- `play`- `logs`Remote resources can be:- `forms`- `hooks`- `jobs`- `files`- `vars`- `packages`- `subdomain`- `dash`### List resourcesList remote resources on your workspace.```shabstra list RESOURCE{forms, hooks, jobs, files, vars, packages}```Examples:```shabstra list packagesabstra list varsabstra list filesabstra list formsabstra list hooksabstra list jobsabstra list subdomain# Saving cloud packages to a requirements.txt fileabstra list packages &gt; requirements.txt# Saving cloud environment variables to a .env fileabstra list vars &gt; .env```### Add resourceAdds remote resources on your workspace.```shabstra add RESOURCE [...OPTIONS]```The current options for each resource are:#### `forms`:- `--name` or `--n` or `--title`: string- `--path`: string- `--file` or `--f`: file_path\*- `--code` or `--c`: string\*- `--enabled`: boolean- `--background`: image_path or string- `--main-color`: string- `--start-message`: string- `--error-message`: string- `--end-message`: string- `--start-button-text`: string- `--restart-button-text`: string- `--timeout-message`: string- `--logo-url`: string- `--show-sidebar`: boolean- `--log-messages`: boolean- `--font-color`: string- `--auto-start`: boolean- `--allow-restart`: boolean- `--welcome-title`: string- `--brand-name`: string- `--upsert`: boolean\* Note: set either file or code, not both.Examples:```shabstra add form --name=&quot;my_form&quot; -f main.py --background '#fffeee'abstra add form --path=test -f test.py --enabled=Falseabstra add form --name=&quot;Form Name&quot; --code &quot;from hackerforms import * \n\ndisplay('hello_world')&quot; --background '#fffeee' --main-color red --start-message 'start message' --error-message 'error-message' --end-message 'end message' --start-button-text 'start button text' --show-sidebar --allow-restart```#### `hooks`- `--name` or `--n` or `--title`: string- `--path`: string- `--file` or `--f`: file_path\*- `--code` or `--c`: string\*- `--enabled`: boolean- `--upsert`: boolean\* Note: set either file or code, but not both.Examples:```shabstra add hook --name=&quot;test hook&quot; -f main.py --upsertabstra add hook --path=test -f test.py --enabled=False```#### `jobs`- `--name` or `--n` or `--title`: string- `--identifier` or `--idt`: string- `--schedule` or `--crontab`: string- `--file` or `--f`: file_path- `--code` or `--c`: string- `--enabled`: boolean- `--upsert`: boolean\* Note: set either file or code, but not both.Examples:```shabstra add job --idt new-job --noenabled --name=&quot;Test Job&quot; --upsertabstra add job --idt daily --schedule=&quot;00 00 1 * *&quot; --name=&quot;Every midnight&quot;```#### `files`- file_path[]: list of file or directory paths. Defaults to `.`Examples:```shabstra add files foo.txt bar.logabstra add files foo/ ./```#### `vars`- environment_variable[]: list of Key=Value env vars- -f or \-\-file: file_path (ex. -f .env)Examples:```shabstra add vars ENVIRONMENT=production VERSION=1.0.0abstra add vars -f .envabstra add vars --file .env```#### `packages`- package_name[]: list of packages with optional version (ex. numpy=1.0.1)- -f or \-\-file: file_path (ex. --file requirements.txt). Defaults to `requirements.txt`Examples:```shabstra add packages pandas numpy=1.0.1 scipy&gt;=1.0.1abstra add packages -f requirements.txtabstra add packages -r requirements.txtabstra add packages --file requirements.txtabstra add packages --requirement requirements.txt```### Update resourceUpdates remote resources on your workspace._Currently only available for forms, hooks and jobs_```shabstra update [IDENTIFIER OR PATH] [...OPTIONS]```The options for each resource are:#### `forms`- `form_path`: string (required parameter)- `--name`: string- `--path`: string- `--file`: file_path- `--code`: string- `--enabled`: boolean- `--background`: image_path or string- `--main-color`: string- `--start-message`: string- `--error-message`: string- `--end-message`: string- `--start-button-text`: string- `--restart-button-text`: string- `--timeout-message`: string- `--logo-url`: string- `--show-sidebar`: boolean- `--log-messages`: boolean- `--font-color`: string- `--auto-start`: boolean- `--allow-restart`: boolean- `--welcome-title`: string- `--brand-name`: stringExamples:```shabstra update form new-onboarding --name=&quot;Another name&quot; --allow-restart```#### `jobs`:- `identifier`: string (required parameter)- `--name` or `--n` or `--title`: string- `--identifier` or `--idt`: string- `--schedule` or `--crontab`: string- `--file` or `--f`: file_path- `--code` or `--c`: string- `--enabled`: booleanExample:```shabstra update job daily --schedule=&quot;00 00 5 * *&quot;```#### `hooks`- `hook_path`: string (required parameter)- `--name` or `--n` or `--title`: string- `--path`: string- `--file` or `--f`: file_path- `--code` or `--c`: string- `--enabled`: booleanExamples:```shabstra update hook stripe-callback --enabled```#### `subdomain`- `--name`: string (required parameter)Examples:```shabstra update subdomain new-subdomain-name```### Remove resourceRemove remote resources from your workspace.```shabstra remove RESOURCE [...OPTIONS]```Examples:```shabstra remove form sales-onboardingabstra remove job monthlyabstra remove hook stripe-testabstra remove files foo.txt bar.logabstra remove vars ENVIRONMENT VERSIONabstra remove packages pandas numpy scipy```### Play resourceRun the resource on Abstra Cloud._Currently only available for forms._```shabstra play RESOURCE [...OPTIONS]```Examples:```shabstra play form b2b-ingestion```## Deploy CommandThis command allows you to specify several resources in a JSON file and deploy them in one command (great for CI/CD workflows).  The default path is `abstra.json` in the root directory.```shabstra deploy [--file or -f]```Examples:```shabstra deploy -f prod.json```The file shoud follow a structure similar to what you can pass in each resource add command (using deploy the upsert flag will be added).Example file:```json{  &quot;forms&quot;: [    {      &quot;name&quot;: &quot;Main Form&quot;,      &quot;path&quot;: &quot;main&quot;,      &quot;file&quot;: &quot;forms/main.py&quot;    },    {      &quot;name&quot;: &quot;Secondary Form&quot;,      &quot;path&quot;: &quot;secondary&quot;,      &quot;code&quot;: &quot;forms/secondary.py&quot;,      &quot;enabled&quot;: false    }  ],  &quot;hooks&quot;: [    {      &quot;name&quot;: &quot;Test&quot;,      &quot;path&quot;: &quot;test&quot;,      &quot;file&quot;: &quot;hooks/test.py&quot;    },    {      &quot;name&quot;: &quot;Stripe&quot;,      &quot;path&quot;: &quot;stripe&quot;,      &quot;file&quot;: &quot;hooks/stripe.py&quot;    }  ],  &quot;jobs&quot;: [    {      &quot;name&quot;: &quot;Monthly&quot;,      &quot;idt&quot;: &quot;month&quot;,      &quot;file&quot;: &quot;jobs/month.py&quot;,      &quot;schedule&quot;: &quot;00 00 1 * *&quot;,      &quot;enabled&quot;: false    },    {      &quot;name&quot;: &quot;Weekly&quot;,      &quot;idt&quot;: &quot;week&quot;,      &quot;file&quot;: &quot;jobs/week.py&quot;,      &quot;schedule&quot;: &quot;00 00 * * 1&quot;    }  ],  &quot;files&quot;: [&quot;root.json&quot;, &quot;files/&quot;],  &quot;packages&quot;: {    &quot;file&quot;: &quot;requirements.txt&quot;  },  &quot;vars&quot;: {    &quot;file&quot;: &quot;.env&quot;  }}```For packages and vars you can also specify manually:```json{  &quot;packages&quot;: [&quot;pydash&quot;, &quot;stripe==1.1.0&quot;],  &quot;vars&quot;: [&quot;ABSTRA_CLOUD=test&quot;, &quot;STRIPE_KEY=foobar&quot;]}```## Logs CommandThis command allows you to see the logs of one resource in your workspace.```shabstra logs RESOURCE [...OPTIONS]```The options for each resource are:#### `dash`- `--path`: string (optional)- `--limit`: integer (optional, default to 20. To disable set to 0)- `--offset`: integer (optional, default to 0)Examples:```shabstra logs dash --path my-dash --limit 10 --offset 0```#### `form`- `--id`: string (optional)- `--limit`: integer (optional, default to 20. To disable set to 0)- `--offset`: integer (optional, default to 0)```shabstra logs form --limit 10 --offset 0```#### `hook`- `--id`: string (optional)- `--limit`: integer (optional, default to 20. To disable set to 0)- `--offset`: integer (optional, default to 0)```shabstra logs hook --limit 10 --offset 0```#### `job`- `--id`: string (optional)- `--limit`: integer (optional, default to 20. To disable set to 0)- `--offset`: integer (optional, default to 0)```shabstra logs job --limit 10 --offset 0```#### `workspace`It lists the logs of all resources in your workspace.- `--limit`: integer (optional, default to 20. To disable set to 0)- `--offset`: integer (optional, default to 0)```shabstra logs workspace```## AliasesSome commands have aliases.#### `upload````sh# Alias for `abstra add files` with default argument `.`abstra upload [FILES or DIRECTORIES, default: .]```#### `ls````sh# Alias for `abstra list files`abstra ls```#### `rm````sh# Alias for `abstra remove files`abstra rm```#### `install````sh# Alias for `abstra add packages`abstra install [PACKAGES]```## Ignoring filesYou can ignore files placing a text file named `.abstraignore` at the target directory. The file `.abstraignore` itself will always be ignored.Example:```__pycache__tests/*.ipynb```</longdescription>
</pkgmetadata>