<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;table&gt;    &lt;tr style=&quot;border: none;&quot;&gt;        &lt;td style=&quot;border: none;&quot;&gt;            &lt;img src=&quot;https://ucarecdn.com/2f4864b7-ed0e-4411-965b-8148623aa680/-/inline/yes/uploadcare-logo-mark.svg&quot; target=&quot;&quot; width=&quot;64&quot; height=&quot;64&quot;&gt;        &lt;/td&gt;        &lt;th style=&quot;vertical-align: center; border: none;&quot;&gt;            &lt;h1&gt;PyUploadcare: a Python library for Uploadcare&lt;/h1&gt;        &lt;/th&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;p&gt;  &lt;img src=&quot;https://badge.fury.io/py/pyuploadcare.svg&quot; height=&quot;25&quot; /&gt;  &lt;img src=&quot;https://github.com/uploadcare/pyuploadcare/actions/workflows/test.yml/badge.svg&quot; height=&quot;25&quot; /&gt;   &lt;img src=&quot;https://readthedocs.org/projects/pyuploadcare/badge/?version=latest&quot; height=&quot;25&quot; /&gt;  &lt;img src=&quot;https://coveralls.io/repos/github/uploadcare/pyuploadcare/badge.svg?branch=master&quot; height=&quot;25&quot; /&gt;  &lt;img src=&quot;https://img.shields.io/badge/tech-stack-0690fa.svg?style=flat&quot; height=&quot;25&quot; /&gt;&lt;/p&gt;Uploadcare Python &amp; Django integrations handle uploads and further operationswith files by wrapping Upload and REST APIs.Simple file uploads for the web are of most importance for us. Today, everyoneis used to the routine of allowing users to upload their pics or attach resumes.The routine covers it all: installing image processing libraries, adjustingpermissions, ensuring servers never go down, and enabling CDN.This library consists of the Uploadcare API interface and a couple of Djangogoodies.Simple as that, Uploadcare `ImageField` can be added to anexisting Django project in just a couple of [simple steps](https://pyuploadcare.readthedocs.org/en/latest/quickstart.html).This will enable your users to see the upload progress, pick filesfrom Google Drive or Instagram, and edit a form while files arebeing uploaded asynchronously.You can find an example project [here](https://github.com/uploadcare/pyuploadcare-example).```python    from django import forms    from django.db import models    from pyuploadcare.dj.models import ImageField    from pyuploadcare.dj.forms import FileWidget, ImageField as ImageFormField    class Candidate(models.Model):        photo = ImageField(blank=True, manual_crop=&quot;&quot;)    # optional. provide advanced widget options: https://uploadcare.com/docs/uploads/widget/config/#options    class CandidateForm(forms.Form):        photo = ImageFormField(widget=FileWidget(attrs={            'data-cdn-base': 'https://cdn.super-candidates.com',            'data-image-shrink': '1024x1024',        }))```![](https://ucarecdn.com/dbb4021e-b20e-40fa-907b-3da0a4f8ed70/-/resize/800/manual_crop.png)## DocumentationDetailed documentation is available [on RTD](https://pyuploadcare.readthedocs.io/en/latest/).## FeedbackIssues and PRs are welcome. You can provide your feedback or drop us a supportrequest at [hello@uploadcare.com](hello@uploadcare.com).</longdescription>
</pkgmetadata>