<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>The configuration is a JSON structure. We'll use the following for thecoming examples.```JSON{  &quot;courses&quot;: {    &quot;datintro22&quot;: {      &quot;timesheet&quot;: {        &quot;url&quot;: &quot;https://sheets.google...&quot;      },      &quot;schedule&quot;: {        &quot;url&quot;: &quot;https://timeedit.net/...&quot;      }    }  }}```The format is actually irrelevant to anyone outside of this library,since it will never be accessed directly anyway. But it will be used toillustrate the examples.We can access values by dot-separated addresses. For instance, we canuse `courses.datintro22.schedule.url` to access the TimeEdit URL of thedatintro22 course.Let's have a look at some usage examples.### A command-line applicationSay we have the program `nytid` that wants to use this config module andsubcommand.```pythonimport typerimport typerconf as configcli = typer.Typer()# add some other subcommandsconfig.add_config_cmd(cli)```We want the CLI command to have the following form when used with`nytid`.```bash  nytid config courses.datintro22.schedule.url --set https://timeedit.net/...```will set the configuration value at the path, whereas```bash  nytid config courses.datintro22.schedule.url```will return it.Internally, `nytid`'s different parts can access the config through thefollowing API.```pythonimport typerconf as configurl = config.get(&quot;courses.datintro22.schedule.url&quot;)```### Without the CLIWe can also use it without the CLI and application features. Then it'sthe `typerconf.Config` class that is of interest.Let's assume that we have the structure from above in the file `~/.config/app.config`. Consider the following code.```pythondefaults = {  &quot;courses&quot;: {    &quot;datintro22&quot;: {      &quot;root&quot;: &quot;/afs/kth.se/...&quot;    }  }}conf = Config(json_data=defaults, conf_file=&quot;~/.config/app.config&quot;)print(f&quot;datintro22 root directory = {conf.get('courses.datintro22.root')}&quot;)print(f&quot;datintro22 schedule = {conf.get('courses.datintro22.schedule')}&quot;)```When we construct `conf` above, we merge the default configwith the values set in the config file that was loaded.We note that the construction of `conf` above, can be replacedby the equivalent```pythonconf = Config(defaults)conf.read_config(&quot;~/.config/app.config&quot;, writeback=True)```The meaning of `writeback` is that whenever we change theconfig, it will automatically be written back to the file from which itwas read. Writeback is enabled by default when supplying the file to theconstructor. It's disabled by default for the method`conf.read_config`, but we can turn it on by passing the`writeback=True`.We can change the config by using the `conf.set` method.```pythonconf.set(&quot;courses.datintro22.root&quot;, &quot;/home/dbosk/...&quot;)```That would change the root that we got from the default config. Since weenabled writeback above, this would automatically update the config filewith the new values.</longdescription>
</pkgmetadata>