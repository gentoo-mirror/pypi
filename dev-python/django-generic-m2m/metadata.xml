<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==================django-generic-m2m==================relate anything to anything.  the image below is a screenshot of the `example app &lt;https://django-generic-m2m.readthedocs.io/en/latest/example.html&gt;`_ and shows a blog post that has been &quot;related&quot; to 2 &quot;Place&quot; models and a &quot;City&quot; model:.. image:: http://media.charlesleifer.com/images/photos/genericm2m-tagging.pngcheck the `documentation &lt;https://django-generic-m2m.readthedocs.io/en/latest/&gt;`_ formore examples and an in-depth description of the app (or keep reading forthe 30 second version).what it does------------the purpose of this project is to allow you to create database-levelrelationships between various objects using a consistent api.example app-----------bundled with the source code is an example app which shows how generic-m2mcan be used to create &quot;tags&quot; between models.  it uses `nathanborror's basic apps &lt;https://github.com/nathanborror/django-basic-apps&gt;`_with `django-completion &lt;https://github.com/coleifer/django-completion&gt;`_ (shameless plug)to allow users to &quot;autocomplete&quot; various relationships between models, so if I'ma user and want to create a new blog post I can tag it withrelationships to objects representing a city, a place, a funny photo of a cat, etc... image:: http://media.charlesleifer.com/images/photos/generic-m2m-rel-objs.pngquick overview--------------say you have a couple models::    class Food(models.Model):        name = models.CharField(max_length=255)        related = RelatedObjectsDescriptor()        def __unicode__(self):            return self.name    class Beverage(models.Model):        name = models.CharField(max_length=255)        related = RelatedObjectsDescriptor()        def __unicode__(self):            return self.nameHere's a sample interactive interpreter session to show the basic API::    &gt;&gt;&gt; pizza = Food.objects.create(name='pizza')    &gt;&gt;&gt; pepperoni = Food.objects.create(name='pepperoni')    &gt;&gt;&gt; beer = Beverage.objects.create(name='beer')    &gt;&gt;&gt; soda = Beverage.objects.create(name='soda')    &gt;&gt;&gt; pizza.related.connect(pepperoni)    &lt;RelatedObject: pizza related to pepperoni (&quot;&quot;)&gt;    &gt;&gt;&gt; pizza.related.connect(beer)    &lt;RelatedObject: pizza related to beer (&quot;&quot;)&gt;    &gt;&gt;&gt; pepperoni.related.related_to()      [&lt;RelatedObject: pizza related to pepperoni (&quot;&quot;)&gt;]    &gt;&gt;&gt; pizza.related.all()    [&lt;RelatedObject: pizza related to beer (&quot;&quot;)&gt;, &lt;RelatedObject: pizza related to pepperoni (&quot;&quot;)&gt;]    &gt;&gt;&gt; pizza.related.all().generic_objects()    [&lt;Beverage: beer&gt;, &lt;Food: pepperoni&gt;]    &gt;&gt;&gt; Food.related.all()    [&lt;RelatedObject: pizza related to beer (&quot;&quot;)&gt;, &lt;RelatedObject: pizza related to pepperoni (&quot;&quot;)&gt;]</longdescription>
</pkgmetadata>