<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=========================django-mongoengine-filter=========================``django-mongoengine-filter`` is a reusable Django application for allowingusers to filter `mongoengine querysets`_ dynamically. It's very similar topopular ``django-filter`` library and is designed to be used as a drop-inreplacement (as much as it's possible) strictly tied to ``MongoEngine``.Full documentation on `Read the docs`_... image:: https://img.shields.io/pypi/v/django-mongoengine-filter.svg   :target: https://pypi.python.org/pypi/django-mongoengine-filter   :alt: PyPI Version.. image:: https://img.shields.io/pypi/pyversions/django-mongoengine-filter.svg    :target: https://pypi.python.org/pypi/django-mongoengine-filter/    :alt: Supported Python versions.. image:: https://github.com/barseghyanartur/django-mongoengine-filter/workflows/test/badge.svg   :target: https://github.com/barseghyanartur/django-mongoengine-filter/actions   :alt: Build Status.. image:: https://readthedocs.org/projects/django-mongoengine-filter/badge/?version=latest    :target: http://django-mongoengine-filter.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://img.shields.io/badge/license-GPL--2.0--only%20OR%20LGPL--2.1--or--later-blue.svg   :target: https://github.com/barseghyanartur/django-mongoengine-filter/#License   :alt: GPL-2.0-only OR LGPL-2.1-or-later.. image:: https://coveralls.io/repos/github/barseghyanartur/django-mongoengine-filter/badge.svg?branch=master    :target: https://coveralls.io/github/barseghyanartur/django-mongoengine-filter?branch=master    :alt: CoverageRequirements============* Python 3.7, 3.8, 3.9, 3.10 or 3.11.* MongoDB 3.x, 4.x, 5.x.* Django 2.2, 3.0, 3.1, 3.2, 4.0 or 4.1.Installation============Install using pip:.. code-block:: sh    pip install django-mongoengine-filterOr latest development version:.. code-block:: sh    pip install https://github.com/barseghyanartur/django-mongoengine-filter/archive/master.zipUsage=====**Sample document**.. code-block:: python    from mongoengine import fields, document    from .constants import PROFILE_TYPES, PROFILE_TYPE_FREE, GENDERS, GENDER_MALE    class Person(document.Document):        name = fields.StringField(            required=True,            max_length=255,            default=&quot;Robot&quot;,            verbose_name=&quot;Name&quot;        )        age = fields.IntField(required=True, verbose_name=&quot;Age&quot;)        num_fingers = fields.IntField(            required=False,            verbose_name=&quot;Number of fingers&quot;        )        profile_type = fields.StringField(            required=False,            blank=False,            null=False,            choices=PROFILE_TYPES,            default=PROFILE_TYPE_FREE,        )        gender = fields.StringField(            required=False,            blank=False,            null=False,            choices=GENDERS,            default=GENDER_MALE        )        def __str__(self):            return self.name**Sample filter**.. code-block:: python    import django_mongoengine_filter    class PersonFilter(django_mongoengine_filter.FilterSet):        profile_type = django_mongoengine_filter.StringFilter()        ten_fingers = django_mongoengine_filter.MethodFilter(            action=&quot;ten_fingers_filter&quot;        )        class Meta:            model = Person            fields = [&quot;profile_type&quot;, &quot;ten_fingers&quot;]        def ten_fingers_filter(self, queryset, name, value):            if value == 'yes':                return queryset.filter(num_fingers=10)            return queryset**Sample view**With function-based views:.. code-block:: python    def person_list(request):        filter = PersonFilter(request.GET, queryset=Person.objects)        return render(request, &quot;dfm_app/person_list.html&quot;, {&quot;object_list&quot;: filter.qs})Or class-based views:.. code-block:: python    from django_mongoengine_filter.views import FilterView    class PersonListView(FilterView):        filterset_class = PersonFilter        template_name = &quot;dfm_app/person_list.html&quot;**Sample template**.. code-block:: html    &lt;ul&gt;    {% for obj in object_list %}        &lt;li&gt;{{ obj.name }} - {{ obj.age }}&lt;/li&gt;    {% endfor %}    &lt;/ul&gt;**Sample requests**- GET /persons/- GET /persons/?profile_type=free&amp;gender=male- GET /persons/?profile_type=free&amp;gender=female- GET /persons/?profile_type=member&amp;gender=female- GET /persons/?ten_fingers=yesDevelopment===========Testing-------To run tests in your working environment type:.. code-block:: sh    pytest -vrxTo test with all supported Python versions type:.. code-block:: sh    toxRunning MongoDB---------------The easiest way is to run it via Docker:.. code-block:: sh    docker pull mongo:latest    docker run -p 27017:27017 mongo:latestWriting documentation---------------------Keep the following hierarchy... code-block:: text    =====    title    =====    header    ======    sub-header    ----------    sub-sub-header    ~~~~~~~~~~~~~~    sub-sub-sub-header    ^^^^^^^^^^^^^^^^^^    sub-sub-sub-sub-header    ++++++++++++++++++++++    sub-sub-sub-sub-sub-header    **************************License=======GPL-2.0-only OR LGPL-2.1-or-laterSupport=======For any security issues contact me at the e-mail given in the `Author`_ section.For overall issues, go to `GitHub &lt;https://github.com/barseghyanartur/django-mongoengine-filter/issues&gt;`_.Author======Artur Barseghyan &lt;artur.barseghyan@gmail.com&gt;.. _`mongoengine querysets`: http://mongoengine-odm.readthedocs.org/apireference.html#module-mongoengine.queryset.. _`read the docs`: https://django-mongoengine-filter.readthedocs.org/</longdescription>
</pkgmetadata>