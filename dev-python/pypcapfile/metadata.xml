<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pypcapfile==========pypcapfile is a pure Python library for handling libpcap savefiles.Installing----------| The easiest way to install is from| `pypi &lt;http://pypi.python.org/pypi/pypcapfile/&gt;`__:.. code:: bash    sudo pip install pypcapfile| Note that for pip, the package name is ``pypcapfile``; in your code  you will need to| import ``pcapfile``.| Alternatively, you can install from source. Clone the repository, and  run setup.py with| an install argument:.. code:: bash    git clone git://github.com/kisom/pypcapfile.git    cd pypcapfile    ./setup.py install| This does require the Python  `distutils &lt;http://docs.python.org/install/&gt;`__ to be| installed.Introduction------------The core functionality is implemented in ``pcapfile.savefile``:.. code:: python    &gt;&gt;&gt; from pcapfile import savefile    &gt;&gt;&gt; testcap = open('test.pcap', 'rb')    &gt;&gt;&gt; capfile = savefile.load_savefile(testcap, verbose=True)    [+] attempting to load test.pcap    [+] found valid header    [+] loaded 11 packets    [+] finished loading savefile.    &gt;&gt;&gt; print capfile    little-endian capture file version 2.4    microsecond time resolution    snapshot length: 65535    linklayer type: LINKTYPE_ETHERNET    number of packets: 11You can take a look at the packets in ``capfile.packets``:.. code:: python    &gt;&gt;&gt; pkt = capfile.packets[0]    &gt;&gt;&gt; pkt.raw()    &lt;binary data snipped&gt;    &gt;&gt;&gt; pkt.timestamp    1343676707L| Right now there is very basic support for Ethernet frames and IPv4  packet| parsing.Automatically decoding layers-----------------------------| The ``layers`` argument to ``load_savefile`` determines how many  layers to| decode; the default value of 0 does no decoding, 1 will load only the  link| layer, etc... For example, with no decoding:.. code:: python    &gt;&gt;&gt; from pcapfile import savefile    &gt;&gt;&gt; from pcapfile.protocols.linklayer import ethernet    &gt;&gt;&gt; from pcapfile.protocols.network import ip    &gt;&gt;&gt; import binascii    &gt;&gt;&gt; testcap = open('samples/test.pcap', 'rb')    &gt;&gt;&gt; capfile = savefile.load_savefile(testcap, verbose=True)    [+] attempting to load samples/test.pcap    [+] found valid header    [+] loaded 3 packets    [+] finished loading savefile.    &gt;&gt;&gt; eth_frame = ethernet.Ethernet(capfile.packets[0].raw())    &gt;&gt;&gt; print eth_frame    ethernet from 00:11:22:33:44:55 to ff:ee:dd:cc:bb:aa type IPv4    &gt;&gt;&gt; ip_packet = ip.IP(binascii.unhexlify(eth_frame.payload))    &gt;&gt;&gt; print ip_packet    ipv4 packet from 192.168.2.47 to 173.194.37.82 carrying 44 bytesand this example:.. code:: python    &gt;&gt;&gt; from pcapfile import savefile    &gt;&gt;&gt; testcap = open('samples/test.pcap', 'rb')    &gt;&gt;&gt; capfile = savefile.load_savefile(testcap, layers=1, verbose=True)    [+] attempting to load samples/test.pcap    [+] found valid header    [+] loaded 3 packets    [+] finished loading savefile.    &gt;&gt;&gt; print capfile.packets[0].packet.src    00:11:22:33:44:55    &gt;&gt;&gt; print capfile.packets[0].packet.payload    &lt;hex string snipped&gt;and lastly:.. code:: python    &gt;&gt;&gt; from pcapfile import savefile    &gt;&gt;&gt; testcap = open('samples/test.pcap', 'rb')    &gt;&gt;&gt; capfile = savefile.load_savefile(testcap, layers=2, verbose=True)    &gt;&gt;&gt; print capfile.packets[0].packet.payload    ipv4 packet from 192.168.2.47 to 173.194.37.82 carrying 44 bytes| The IPv4 module (``ip``) currently only supports basic IP headers,  i.e. it| doesn't yet parse options or add in padding.The interface is still a bit messy.Future planned improvements----------------------------  IP options parsing (END and NOP is supported)-  IPv6 support-  TCP options parsing-  ARP supportTODO----#. write unit tests#. add ``__repr__`` method that shows all of the values of the fields in   IP packets   and Ethernet frames.See also---------  The project's `PyPi page &lt;http://pypi.python.org/pypi/pypcapfile&gt;`__.-  The project's `Sphinx &lt;http://sphinx.pocoo.org/&gt;`__   `documentation on PyPI &lt;http://packages.python.org/pypcapfile/&gt;`__-  The `libpcap homepage &lt;http://www.tcpdump.org&gt;`__Contributors------------A list of the project's contributors may be found in the AUTHORS file.</longdescription>
</pkgmetadata>