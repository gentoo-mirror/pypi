<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiocloudpaymentsPython Async [CloudPayments](https://developers.cloudpayments.ru/#api) Library# Client Basic Usage Example```from datetime import datefrom aiocloudpayments import AioCpClientasync def main():    client = AioCpClient(PUBLIC_ID, API_SECRET)    await client.test()    await client.charge_card(        amount=10,        currency=&quot;RUB&quot;,        invoice_id=&quot;1234567&quot;,        ip_address=&quot;123.123.123.123&quot;,        description=&quot;Payment for goods in example.com&quot;,        account_id=&quot;user_x&quot;,        name=&quot;CARDHOLDER NAME&quot;,        card_cryptogram_packet=&quot;01492500008719030128SMfLeYdKp5dSQVIiO5l6ZCJiPdel4uDjdFTTz1UnXY+3QaZcNOW8lmXg0H670MclS4lI+qLkujKF4pR5Ri+T/E04Ufq3t5ntMUVLuZ998DLm+OVHV7FxIGR7snckpg47A73v7/y88Q5dxxvVZtDVi0qCcJAiZrgKLyLCqypnMfhjsgCEPF6d4OMzkgNQiynZvKysI2q+xc9cL0+CMmQTUPytnxX52k9qLNZ55cnE8kuLvqSK+TOG7Fz03moGcVvbb9XTg1oTDL4pl9rgkG3XvvTJOwol3JDxL1i6x+VpaRxpLJg0Zd9/9xRJOBMGmwAxo8/xyvGuAj85sxLJL6fA==&quot;,        payer=Person(            first_name=&quot;Test&quot;,            last_name=&quot;Test&quot;,            middle_name=&quot;Test&quot;,            birth=date(1998, 1, 16),            address=&quot;12A, 123&quot;,            street=&quot;Test Avenue&quot;,            city=&quot;LosTestels, City of Test Angels&quot;,            country=&quot;Testland&quot;,            phone=&quot;+1 111 11 11&quot;,            post_code=&quot;101011010&quot;        )    )    await client.disconnect()```# AiohttpDispatcher Basic Usage Example```from aiocloudpayments import AiohttpDispatcher, Resultfrom aiocloudpayments.types import PayNotification, CancelNotification, CheckNotificationCERT_FILE = &quot;cert.pem&quot;CERT_FILE = &quot;pkey.pem&quot;def main():    dp = AiohttpDispatcher()    # router is not needed here, but I am just showing the logic    router = Router()    # register with router    @router.cancel(lambda n: 5 &gt; n.amount &gt; 1)    async def foo(notification: CancelNotification):        print(f&quot;{notification=}&quot;)        # return {&quot;result&quot;: 0}        return Result.OK    # register with router    @router.pay(lambda n: n.amount &lt;= 1)    async def foo(notification: PayNotification):        print(f&quot;{notification.amount=}&quot;)        # return {&quot;result&quot;: 0}        return Result.OK           # register with router    @router.check()    async def foo(notification: CheckNotification):        print(f&quot;{notification.amount=}&quot;)        # return {&quot;result&quot;: 12}        return Result.WRONG_AMOUNT    # register with dp    @dp.cancel(lambda n: n.amount &gt; 5)    async def foo(notification: CancelNotification):        print(f&quot;{notification.amount=}, &gt; 5&quot;)        # if you don't return anything, Result.OK is assumed    dp.include_router(router)    ssl_context = SSLContext()    ssl_context.load_cert_chain(CERT_FILE, KEY_FILE)    dp.run_app(        AioCpClient(PUBLIC_ID, API_SECRET),        &quot;/test&quot;,        pay_path=&quot;/pay&quot;,        cancel_path=&quot;/cancel&quot;,        ssl_context=ssl_context,        check_hmac=False  # disable hmac check, only use in development environments    )```architecture inspired by [aiogram](https://github.com/aiogram/aiogram)</longdescription>
</pkgmetadata>