<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>arpreq======.. image:: https://travis-ci.org/sebschrader/python-arpreq.svg?branch=master    :target: https://travis-ci.org/sebschrader/python-arpreq.. image:: https://img.shields.io/pypi/v/arpreq.svg?maxAge=2592000    :target: https://pypi.python.org/pypi/arpreq.. image:: https://img.shields.io/pypi/pyversions/arpreq.svg?maxAge=2592000    :target: https://pypi.python.org/pypi/arpreq.. image:: https://img.shields.io/pypi/implementation/arpreq.svg?maxAge=2592000    :target: https://pypi.python.org/pypi/arpreq.. image:: https://img.shields.io/pypi/wheel/arpreq.svg?maxAge=2592000    :target: https://pypi.python.org/pypi/arpreq.. image:: https://img.shields.io/pypi/l/arpreq.svg?maxAge=2592000    :target: https://pypi.python.org/pypi/arpreqPython C extension to query the Kernel ARP cache for the MAC address ofa given IP address.Usage-----The ``arpreq`` module exposes a single function ``arpreq``, that willresolve a given IPv4 address into a MAC address.An IP address can only be resolved to a MAC address if it is on the samesubnet as your machine.Let's assume your current machine has the address ``192.168.1.10`` andanother machine with the address ``192.168.1.1`` is on the same subnet:.. code:: python    &gt;&gt;&gt; import arpreq    &gt;&gt;&gt; arpreq.arpreq('192.168.1.1')    '00:11:22:33:44:55'If a IP address can not be resolved to an MAC address, None is returned... code:: python    &gt;&gt;&gt; arpreq.arpreq('8.8.8.8') is None    TrueIP addresses may be also be specified as int or rich IP address data typeof the common ``ipaddr``, ``ipaddress``, or ``netaddr`` modules... code:: python    &gt;&gt;&gt; arpreq.arpreq(0x7F000001)    '00:00:00:00:00:00'    &gt;&gt;&gt; import netaddr    &gt;&gt;&gt; arpreq.arpreq(netaddr.IPAddress('127.0.0.1'))    '00:00:00:00:00:00'    &gt;&gt;&gt; import ipaddr # on Python 2    &gt;&gt;&gt; arpreq.arpreq(ipaddr.IPv4Address('127.0.0.1'))    '00:00:00:00:00:00'    &gt;&gt;&gt; import ipaddress    &gt;&gt;&gt; arpreq.arpreq(ipaddress.IPv4Address(u'127.0.0.1'))    '00:00:00:00:00:00'Supported Platforms-------------------This extension has only been tested on Linux, it should however work onany platform that supports the ``SIOCGARP`` ioctl, which is virtuallyevery BSD, Linux and Mac OS.Changelog---------v0.3.3 (2017-05-03)^^^^^^^^^^^^^^^^^^^* Disable PEP-489 on PyPy3* Disable PyModule_GetState on PyPy3* Provide a Debian packagev0.3.2 (2017-05-03)^^^^^^^^^^^^^^^^^^^* Support point-to-point veth pairs (See #6)* Accept unicode objects on Python 2 and bytes objects on Python 3 (See #5)* Some test improvementsv0.3.1 (2016-07-06)^^^^^^^^^^^^^^^^^^^* Don't use private _PyErr_ChainExceptions (breaks on Debian Jessie)v0.3.0 (2016-06-26)^^^^^^^^^^^^^^^^^^^* Use PEP 489 multi-phase extension module initialization on Python 3.5+* Close socket if module initialization failed* Code cleanupv0.2.1 (2016-06-26)^^^^^^^^^^^^^^^^^^^* Fix memset overflowv0.2.0 (2016-06-09)^^^^^^^^^^^^^^^^^^^* Provide Python wheels* Support int and rich IP address objects as IP address arguments* Release the GIL during arpreq* Add units tests* Rework MAC string creation* Restructure module initializationv0.1.0 (2015-11-28)^^^^^^^^^^^^^^^^^^^* Initial release</longdescription>
</pkgmetadata>