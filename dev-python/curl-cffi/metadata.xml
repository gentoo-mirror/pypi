<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># curl_cffiPython binding for [curl-impersonate](https://github.com/lwthiker/curl-impersonate)via [CFFI](https://cffi.readthedocs.io/en/latest/).[中文文档](README-zh.md)Unlike other pure python http clients like `httpx` or `requests`, this package canimpersonate browsers' TLS signatures or JA3 fingerprints. If you are blocked by somewebsite for no obvious reason, you can give this package a try.## Note on Chrome 110+ JA3 fingerprintsChrome introduces ClientHello permutation in version 110, which means the order ofextensions will be random, thus JA3 fingerprints will be random. So, when comparingJA3 fingerprints of `curl_cffi` and a browser, they may differ. However, this does notmean that TLS fingerprints will not be a problem, ClientHello extension order is justone factor of how servers can tell automated requests from browsers.See more from [this article](https://www.fastly.com/blog/a-first-look-at-chromes-tls-clienthello-permutation-in-the-wild)and [curl-impersonate notes](https://github.com/lwthiker/curl-impersonate/pull/148)## Install    pip install --upgrade curl_cffiThis should work for Linux(x86_64/aarch64), macOS(Intel/Apple Silicon), Windows(amd64).If it does not work, you may need to compile and install `curl-impersonate` first.## Usage`requests/httpx`-like API:```pythonfrom curl_cffi import requests# Notice the impersonate parameterr = requests.get(&quot;https://tls.browserleaks.com/json&quot;, impersonate=&quot;chrome101&quot;)print(r.json())# output: {'ja3_hash': '53ff64ddf993ca882b70e1c82af5da49'# the fingerprint should be the same as target browser# proxies are supportedproxies = {&quot;https&quot;: &quot;http://localhost:3128&quot;}r = requests.get(&quot;https://tls.browserleaks.com/json&quot;, impersonate=&quot;chrome101&quot;, proxies=proxies)# socks proxies are also supportedproxies = {&quot;https&quot;: &quot;socks://localhost:3128&quot;}r = requests.get(&quot;https://tls.browserleaks.com/json&quot;, impersonate=&quot;chrome101&quot;, proxies=proxies)```### Sessions```python# sessions are supporteds = requests.Session()# httpbin is a http test websites.get(&quot;https://httpbin.org/cookies/set/foo/bar&quot;)print(s.cookies)# &lt;Cookies[&lt;Cookie foo=bar for httpbin.org /&gt;]&gt;r = s.get(&quot;https://httpbin.org/cookies&quot;)print(r.json())# {'cookies': {'foo': 'bar'}}```Supported impersonate versions:- chrome99- chrome100- chrome101- chrome104- chrome107- chrome110- chrome99_android- edge99- edge101- safari15_3- safari15_5Alternatively, you can use the low-level curl-like API:```pythonfrom curl_cffi import Curl, CurlOptfrom io import BytesIObuffer = BytesIO()c = Curl()c.setopt(CurlOpt.URL, b'https://tls.browserleaks.com/json')c.setopt(CurlOpt.WRITEDATA, buffer)c.impersonate(&quot;chrome101&quot;)c.perform()c.close()body = buffer.getvalue()print(body.decode())```See `example.py` or `tests/` for more examples.## APIRequests: almost the same as requests.Curl object:* `setopt(CurlOpt, value)`: Sets curl options as in `curl_easy_setopt`* `perform()`: Performs curl request, as in `curl_easy_perform`* `getinfo(CurlInfo)`: Gets information in response after curl perform, as in `curl_easy_getinfo`* `close()`: Closes and cleans up the curl object, as in `curl_easy_cleanup`Enum values to be used with `setopt` and `getinfo`, and can be accessed from `CurlOpt` and `CurlInfo`.## Trouble Shooting### Pyinstaller `ModuleNotFoundError: No module named '_cffi_backend'`You need to tell pyinstaller to pack cffi and data files inside the package:    pyinstaller -F .\example.py --hidden-import=_cffi_backend --collect-all curl_cffi### Using https proxy, error: `OPENSSL_internal:WRONG_VERSION_NUMBER`You are messing up https-over-http proxy and https-over-https proxy, for most cases, youshould change `{&quot;https&quot;: &quot;https://localhost:3128&quot;}` to `{&quot;https&quot;: &quot;http://localhost:3128&quot;}`.Note the protocol in the url for https proxy is `http` not `https`.See [this issue](https://github.com/yifeikong/curl_cffi/issues/6#issuecomment-1415162495) for a detailed explaination.## Current StatusThis implementation is very hacky now, but it works for most common systems.When people installing other python curl bindings, like `pycurl`, they often facecompiling issues or OpenSSL issues, so I really hope that this package can be distributedas a compiled binary package, uses would be able to use it by a simple `pip install`, nomore compile errors.For now, I just download the pre-compiled `libcurl-impersonate` from github and build abdist wheel, which is a binary package format used by PyPI, and upload it. However, theright way is to download curl and curl-impersonate sources on our side and compile themall together.Help wanted!TODOs:- [ ] Write docs.- [x] Binary package for macOS(Intel/AppleSilicon) and Windows.- [ ] Support musllinux(alpine) bdist by building from source.- [x] Exclude the curl headers from source, download them when building.- [x] Update curl header files and constants via scripts.- [x] Implement `requests.Session/httpx.Client`.- [x] Create [ABI3 wheels](https://cibuildwheel.readthedocs.io/en/stable/faq/#abi3) to reduce package size and build time.- [ ] Set default headers as in curl-impersonate wrapper scripts.- [ ] Support stream in asyncio mode    &lt;!--use loop.call_soon(q.put_nowait), wait for headers, then let user iter over content --&gt;## Change Log- 0.5.0    - Added asyncio support- 0.4.0    - Removed c shim callback function, use cffi native callback function- 0.3.6    - Updated to curl-impersonate v0.5.4, supported chrome107 and chrome110- 0.3.0, copied more code from `httpx` to support session    - Add `requests.Session`    - Breaking change: `Response.cookies` changed from `http.cookies.SimpleCookie` to `curl_cffi.requests.Cookies`    - Using ABI3 wheels to reduce package size.## Acknowledgement- This package was originally forked from https://github.com/multippt/python_curl_cffi , which is under the MIT license.- headers/cookies files are copied from https://github.com/encode/httpx/blob/master/httpx/_models.py , which is under the BSD license.- Asyncio support is inspired by Tornado's curl http client.</longdescription>
</pkgmetadata>