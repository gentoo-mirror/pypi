<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IntroductionIf you've ever tried to make an API wrapperyou probably know that the code written canonly be used as sync or async, well, not anymore.## Features- **Lightweight**: Extremely lightweight and minimal- **Easy to use**: Implement features in no time with the- **Async and blocking**: Provides both async and blocking calls- **Test without a server**: Since the library internally uses httpx, it can be used to test itself using an `ASGI` or `WSGI` application.- **DRY**: _Don't repeat yourself_, helps avoid code duplication and write reusable code- **Routing**: An `APIRouter` class with simliar API to `APIClient`- **Modular**: Create reusable routers that can be added to any client, independant of each other## Example Usage```pyfrom apiclient import APIClient, endpoint, Postclass CodeExecClient(APIClient):  base_url = &quot;https://pathtomysite.com/api/1.0&quot;   # Note the missing / suffix  @endpoint  def run(self, language:str, code:str):    # Do any processing with the data here!    # Also note the / prefix in the url    return Post(&quot;/execute&quot;, params={'lang':language, 'code':code})# Using the API clientfrom httpx import Clientclient = CodeExecClient(session=Client())response = client.run(&quot;py&quot;, &quot;print('hello world!')&quot;)```## Documentation is under works</longdescription>
</pkgmetadata>