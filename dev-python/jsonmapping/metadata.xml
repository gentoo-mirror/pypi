<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jsonmapping [![Build Status](https://travis-ci.org/pudo/jsonmapping.svg?branch=master)](https://travis-ci.org/pudo/jsonmapping)To transform flat data structures into nested object graphs matching JSONschema definitions, this package defines a mapping language. It defines howthe columns of a source data set (e.g. a CSV file, database table) are to beconverted to the fields of a JSON schema.The format allows mapping nested structures, including arrays. It also supportsthe application of very basic data transformation steps, such as generating aURL slug or hashing a column value.## Example mappingThe mapping format is independent of any particular JSON schema, such thatmultiple mappings could be defined for any one particular schema.```json{    &quot;schema&quot;: {&quot;$ref&quot;: &quot;http://www.popoloproject.com/schemas/person.json&quot;},    &quot;mapping&quot;: {        &quot;id&quot;: {&quot;column&quot;: &quot;person_id&quot;},        &quot;name&quot;: {&quot;column&quot;: &quot;person_name&quot;},        &quot;memberships&quot;: [{            &quot;mapping&quot;: {                &quot;role&quot;: {&quot;default&quot;: &quot;Member of Organization&quot;},                &quot;organization&quot;: {                    &quot;mapping&quot;: {                        &quot;id&quot;: {                            &quot;columns&quot;: [&quot;org_id&quot;],                            &quot;constant&quot;: &quot;default-org&quot;                        },                        &quot;name&quot;: {                            &quot;column&quot;: &quot;org_name&quot;,                            &quot;constant&quot;: &quot;Default Organization&quot;,                            &quot;transforms&quot;: [&quot;strip&quot;]                        }                    }                }            }        }]    }}```This mapping would apply to a four-column CSV file and map it to a set ofnested JSON objects (a [Popolo](http://www.popoloproject.com/) person, with amembership in an organization).## Data TransformsWhile ``jsonmapping`` is not a data cleaning tool, it supports some very basicdata transformation operations that can be applied on a particular column orset of columns. These include:* ``coalesce``: Select the first non-null value from the list of items.* ``slugify``: Transform each string into a URL slug form.* ``join``: Merge together the string values of all selected columns.* ``upper``: Transform the text to upper case.* ``lower``: Transform the text to lower case.* ``strip``: Remove leading and trailing whitespace.* ``hash``: Generate a SHA1 hash of the given value.## Usage``jsonmapping`` is available on the Python Package Index:```bash$ pip install jsonmapping```The library can then be used as follows:```pythonfrom jsonschema import RefResolverfrom jsonmapping import Mapper# ... load the mapping ...mapping = load_mapping()resolver = RefResolver.from_schema(mapping)# ... grab some data ...rows = read_csv()objs = []# This will transform flat data rows into nested JSON objects:for obj, err in Mapper.apply_iter(rows, mapping, resolver):    if err is None:        objs.append(obj)```## TestsThe test suite will usually be executed in it's own ``virtualenv`` and perform acoverage check as well as the tests. To execute on a system with ``virtualenv``and ``make`` installed, type:```bash$ make test```</longdescription>
</pkgmetadata>