<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pybpmn## IntroductionBPMN is a notation to describe a business process. The implementation and execution of the business process can be done with various technologies. As technologies evolve, the implementation becomes more easier to adopt and maintain. This python module implements some basics BPMN features for cloud to keep the things as simple as possible.## Design approach- The bpmn process is backed by a python handler class to realize the desired functionality.- Generic on_enter_task and on_exit_task callbacks are available- task specific on_enter_&lt;task_name&gt; , on_exit_&lt;task_name&gt; and on_&lt;task_name&gt; could be implemented to get callbacks from the moduleSample code is as shown below```pythonclass Handler():    def on_enter_task(self,**kargs):        logger.info(&quot;Entering task&quot;)        def on_exit_task(self,**kargs):        logger.info(&quot;Exiting task&quot;)    def on_enter_task_2(self,**kargs):        logger.info(&quot;Entering task task_2&quot;)    def on_task_2(self,**kargs):        context = kargs.get(&quot;context&quot;)        payload = kargs.get(&quot;payload&quot;)        payload[&quot;user&quot;] = True        task_context = kargs.get(&quot;task&quot;)        task_context.update({            &quot;name1&quot; : &quot;value1&quot;        })        logger.info(&quot;Process task task_2&quot;)    def on_exit_task_2(self,**kargs):        logger.info(&quot;Exiting task task_2&quot;)    def on_enter_task_3(self,**kargs):        logger.info(&quot;Entering task task_3&quot;)    def on_task_3(self,**kargs):        logger.info(&quot;Process task task_3&quot;)    def on_exit_task_3(self,**kargs):        logger.info(&quot;Exiting task task_3&quot;)    def on_enter_task_4(self,**kargs):        logger.info(&quot;Entering task task_4&quot;)    def on_task_4(self,**kargs):        time.sleep(3)        logger.info(&quot;Process task task_4&quot;)    def on_exit_task_4(self,**kargs):        logger.info(&quot;Exiting task task_4&quot;)    def on_enter_task_5(self,**kargs):        logger.info(&quot;Entering task task_5&quot;)    def on_task_5(self,**kargs):        time.sleep(5)        context = kargs.get(&quot;context&quot;)        context[&quot;user&quot;] = True        task_context = kargs.get(&quot;task&quot;)        task_context.update({            &quot;name1&quot; : &quot;value1&quot;        })        logger.info(&quot;Process task task_5&quot;)    def on_exit_task_5(self,**kargs):        logger.info(&quot;Exiting task task_5&quot;)    def on_enter_task_6(self,**kargs):        logger.info(&quot;Entering task task_6&quot;)    def on_exit_task_6(self,**kargs):        logger.info(&quot;Exiting task task_6&quot;)def test_process():    instance = BpmnProcess()    instance.start_process(open(&quot;tests/data/test_bpmn.xml&quot;,&quot;r&quot;).read(),Handler())    instance.get_activity_by_name(&quot;task_3&quot;).complete({&quot;datatoadd&quot;:&quot;Valuetoadd&quot;})    instance.get_activity_by_name(&quot;task_5&quot;).complete({&quot;datatoadd1&quot;:&quot;Valuetoadd2&quot;})```## Supported features### EventsThe below list of events are currently supported. - start- end### Tasks#### Service TaskThese are automated tasks which are pure functions which does desired functionality.#### User TaskThese are user tasks, the main difference between user and service tasks is, user tasks are required to be completed explicity to move the token in the process. Tasks can be completed by using the code as shown below```pythoninstance.get_activity_by_name(&quot;task_3&quot;).complete({&quot;datatoadd&quot;:&quot;Valuetoadd&quot;})```### Gateways#### Exclusive gatewayExclusive gateways could be diverging or converging. For diverging gateway, only one path should evaluate to true or first path that gets evaluated to true, will be the path the bpmn process will take. Path's with no conditional expression ( python ) is considered to be 'True'For converging gateways, atleast one incoming pathways will move the token up the process.### Inclusive gatewayInclusive gateways again could be diverging or converging. These gateways by definition, will allow more than one pathways to be taken during process execution. All paths whose conditional expression evaluates to true OR doesnt have an expression will be chosen for execution. All paths will be executed in parallel until a blocking task is encountered.For coverging gateways, the naming convention should be conv_&lt;diverging_pair_name&gt;. The inclusive gateway will await for as many as diverged paths to proceed execution of process.### Parallel gatewayParallel gateways will execute all diverging paths, and awaits every converging path in the process.</longdescription>
</pkgmetadata>