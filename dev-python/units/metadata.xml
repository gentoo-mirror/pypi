<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Provides support for quantities and units, which strictly disallowinvalid operations between incompatible quantities. For example, we cannot add2 metres to 5 seconds, because this doesn't make sense.Why?From Wikipedia:The Mars Climate Orbiter was intended to enter orbit at an altitude of140-150 km (460,000-500,000 ft.) above Mars. However, a navigation errorcaused the spacecraft to reach as low as 57 km (190,000 ft.). The spacecraftwas destroyed by atmospheric stresses and friction at this low altitude. Thenavigation error arose because a NASA subcontractor (Lockheed Martin) usedImperial units (pound-seconds) instead of the metric system.Installation============This module is distributed via PyPI. So, you can do:: pip install unitsor:: easy_install unitsor, you can download a bundle yourself at http://pypi.python.org/pypi/units/If you want the latest:: pip install -e hg+https://bitbucket.org/adonohue/units/#egg=unitsHow to Use==========Make Quantities---------------Units are objects that you use to make quantities::  &gt;&gt;&gt; from units import unit  &gt;&gt;&gt; metre = unit('m')  &gt;&gt;&gt; print(metre(7) + metre(11))  18.00 mYou can mix and match these quantities in some ways::  &gt;&gt;&gt; from units import unit  &gt;&gt;&gt; metre = unit('m')  &gt;&gt;&gt; second = unit('s')  &gt;&gt;&gt; print(metre(10) / second(2))  5.00 m / s  &gt;&gt;&gt; print(metre(10) ** 3)  1000.00 m * m * mBut if you make a mistake, you get a safety net::  &gt;&gt;&gt; from units import unit  &gt;&gt;&gt; try:  ...   unit('m')(5) + unit('s')(5)  ... except units.exception.IncompatibleUnitsError:  ...   print('Got an error!')  Got an error!Make Your Own Units-------------------Before you start making your own units, you should check out the units thatyou get for free::  &gt;&gt;&gt; import units.predefined  &gt;&gt;&gt; units.predefined.define_units()It includes all the official SI units, some units for measuring time such asdays and weeks, units for volumes like cups, gallons and litres, imperialunits and more.You've already seen how to make your own simple units. You callthe unit function and give it a string::  &gt;&gt;&gt; from units import unit  &gt;&gt;&gt; blog = unit('blog')  &gt;&gt;&gt; print(blog(3))  3.00 blogThese units are automatically incompatible with other units.You can combine units with multiplication and division to make new units::  &gt;&gt;&gt; from units import unit  &gt;&gt;&gt; blogs_per_network = unit('blog') / unit('network')  &gt;&gt;&gt; print(blogs_per_network(2.34))  2.34 blog / networkThere's a built-in shortcut for making new units that are scalar multiplesof other units::  &gt;&gt;&gt; from units import unit, scaled_unit  &gt;&gt;&gt; sickle = scaled_unit('sickle', 'knut', 29)  &gt;&gt;&gt; galleon = scaled_unit('galleon', 'sickle', 17)  &gt;&gt;&gt; knut = unit('knut')  &gt;&gt;&gt; galleon(3.0) + sickle(1.0) - knut(25.0) == knut(1483)  TrueThere's also a shortcut for giving names to slightly more complicated units::  &gt;&gt;&gt; from units import unit, named_unit  &gt;&gt;&gt; from units.predefined import define_units  &gt;&gt;&gt; define_units()  &gt;&gt;&gt; twp = named_unit('tweetpack', ['tweet', 'meme'], ['day'], 5)  &gt;&gt;&gt; # A tweetpack is 5 tweetmemes per day  &gt;&gt;&gt; print(twp(2))  2.00 tweetpack  &gt;&gt;&gt; tweet, meme, day = [unit(x) for x in ['tweet', 'meme', 'day']]  &gt;&gt;&gt; print(twp(5) - (tweet(5) * meme(4) / day(2)))  3.00 tweetpackIf two units are compatible, you can convert between them easily::  &gt;&gt;&gt; from units import unit  &gt;&gt;&gt; from units.predefined import define_units  &gt;&gt;&gt; define_units()  &gt;&gt;&gt; furlongs_per_fortnight = unit('fur') / unit('fortnight')  &gt;&gt;&gt; kph = unit('km') / unit('h')  &gt;&gt;&gt; print(furlongs_per_fortnight(kph(100)))  167024.58 fur / fortnightYou can also use lower-level constructors to make your own units andquantities. The ways shown above are easier, though.Warnings--------This module doesn't solve problems with numerical accuracy orfloating point conversions, and Python 2 vs. 3 issues abound::  from units import unit  unit('m')(5) / unit('m')(7)  # 0 in Python 2.x, 0.7142857142857143 in Python 3.More dangerously, certain internal operations have implicit arithmeticthat can surprise you::  from units import unit, scaled_unit  sickle = scaled_unit('sickle', 'knut', 29)  galleon = scaled_unit('galleon', 'sickle', 17)  knut = unit('knut')  galleon(3) + sickle(1) - knut(25) == galleon(3)  # True in Python 2.x, False in Python 3Using Modified Python---------------------In units-enhanced Python, you can do::  print(2cm / 0.5 s)  -&gt; 4.0 cm / sUnits-enhanced Python is a version of PyPy with built-in supportfor units. You can find it in the unitPython directory. Essentially,apply the supplied patches to r66797 of PyPy. If you're on a suitableUNIX, the included unitPython/unitPython.sh does this for you.@requires: U{Python&lt;http://python.org/&gt;} &gt;= 2.5@since: 2009-Aug-10@status: under development</longdescription>
</pkgmetadata>