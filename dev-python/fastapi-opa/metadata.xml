<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Open Policy Agent middleware for FastAPI## Table of contents- [Contributors](#contributors)- [What does fastapi-opa do](#about)- [Installation](#installation)- [How to get started](#getting-started)- [Open Policy Agent](#opa)- [Authentication flow](#auth-flow)  - [API key authentication](#api-key-auth)  - [OIDC authentication](#oidc-auth)  - [SAML authentication](#saml-auth)- [Custom payload enrichment](#custom-payload-enrichment)  - [GraphQL enrichment](#gql-enrichment)&lt;a name=&quot;contributors&quot;/&gt;## ContributorsThanks to all the contributors below. Furthermore thanks for raising issues.&lt;a href=&quot;https://github.com/morestanna&quot;&gt;  &lt;img src=&quot;https://avatars.githubusercontent.com/morestanna&quot; width=&quot;60&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/busykoala&quot;&gt;  &lt;img src=&quot;https://avatars.githubusercontent.com/busykoala&quot; width=&quot;60&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/TracyWR&quot;&gt;  &lt;img src=&quot;https://avatars.githubusercontent.com/TracyWR&quot; width=&quot;60&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/loikki&quot;&gt;  &lt;img src=&quot;https://avatars.githubusercontent.com/loikki&quot; width=&quot;60&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ejsyx&quot;&gt;  &lt;img src=&quot;https://avatars.githubusercontent.com/ejsyx&quot; width=&quot;60&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JimFawkes&quot;&gt;  &lt;img src=&quot;https://avatars.githubusercontent.com/JimFawkes&quot; width=&quot;60&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;&lt;a name=&quot;about&quot;/&gt;## What does fastapi-opa doThe FastAPI extension `fastapi-opa` allows to add login flows and integratesOpen Policy Agent to your app.![Flow Diagram](https://raw.githubusercontent.com/busykoala/fastapi-opa/master/assets/diagram.png)The middleware redirects the request to the identity provider. After theauthentication it validates the token. Using the token, Open Policy Agentdecides if the response has success or failure status.&lt;a name=&quot;installation&quot;/&gt;## Installation```bashpoetry add [--extras &quot;graphql&quot;] [--extras &quot;saml&quot;] fastapi-opa ```&lt;a name=&quot;getting-started&quot;/&gt;## How to get started:bulb: checkout the wiki for an environment setup with Keycloak and Open Policy Agent:  [Getting Started with FastAPI app with Authentication and Authorization](https://github.com/busykoala/fastapi-opa/wiki#dev-setup)The package combines authentication and authorization with FastAPI. You cancustomize the `OPAMiddleware` depending on your authentication flow.Check out these examples for the most common flows:- OIDC: `fastapi_opa.example_oidc.py`- SAML: `fastapi_opa.example_saml.py`## Open Policy AgentThe middleware sends the validated and authenticated user token to OpenPolicy Agent. It adds the extra attributes `request_method` and`request_path`.```json{    &quot;input&quot;: {        &quot;exp&quot;: 1617466243,        &quot;iat&quot;: 1617465943,        &quot;auth_time&quot;: 1617465663,        &quot;jti&quot;: &quot;9aacb638-70c6-4f0a-b0c8-dbc67f92e3d1&quot;,        &quot;iss&quot;: &quot;http://localhost:8080/auth/realms/example-realm&quot;,        &quot;aud&quot;: &quot;example-client&quot;,        &quot;sub&quot;: &quot;ccf78dc0-e1d6-4606-99d4-9009e74e3ab4&quot;,        &quot;typ&quot;: &quot;ID&quot;,        &quot;azp&quot;: &quot;david&quot;,        &quot;session_state&quot;: &quot;41640fe7-39d2-44bc-818c-a3360b36fb87&quot;,        &quot;at_hash&quot;: &quot;2IGw-B9f5910Sll1tnfQRg&quot;,        &quot;acr&quot;: &quot;0&quot;,        &quot;email_verified&quot;: false,        &quot;hr&quot;: &quot;true&quot;,        &quot;preferred_username&quot;: &quot;david&quot;,        &quot;user&quot;: &quot;david&quot;,        &quot;subordinates&quot;: [],        &quot;request_method&quot;: &quot;GET&quot;,        &quot;request_path&quot;: [&quot;finance&quot;, &quot;salary&quot;, &quot;david&quot;]    }}```In Open Policy Agent you can create policies using user roles,routes, request methods etc.An example policy (from [the official Open Policy Agentdocs](https://www.openpolicyagent.org/docs/v0.11.0/http-api-authorization/))for this setup could look like this:```regopackage httpapi.authz# bob is alice's manager, and betty is charlie's.subordinates = {&quot;alice&quot;: [], &quot;charlie&quot;: [], &quot;bob&quot;: [&quot;alice&quot;], &quot;betty&quot;: [&quot;charlie&quot;]}# HTTP API requestimport inputdefault allow = false# Allow users to get their own salaries.allow {  some username  input.request_method == &quot;GET&quot;  input.request_path = [&quot;finance&quot;, &quot;salary&quot;, username]  input.user == username}# Allow managers to get their subordinates' salaries.allow {  some username  input.request_method == &quot;GET&quot;  input.request_path = [&quot;finance&quot;, &quot;salary&quot;, username]  subordinates[input.user][_] == username}```&lt;a name=&quot;auth-flow&quot;/&gt;## Authentication flowUse the provided interface to set up your desired authentication flow. Theninsert it into `OPAMiddleware` (`fastapi_opa.auth.auth_interface.AuthInterface`).Consider submitting a pull request with new flows.You can also use these ready-to-go implementations:&lt;a name=&quot;api-key-auth&quot;/&gt;### API key authenticationIn the API key authentication a request header needs to match a given value.```python# Configure API keysapi_key_config = APIKeyConfig(    header_key=&quot;test&quot;,    api_key=&quot;1234&quot;)api_key_auth = APIKeyAuthentication(api_key_config)```In the example the header `header[&quot;test&quot;] = &quot;1234&quot;` authenticates the request.For Open Policy Agent, set user to `APIKey` and the variable `client` to theclient address.&lt;a name=&quot;oidc-auth&quot;/&gt;### OIDC authenticationThe example in [How to get started](#getting-started) provides an example forthe implementation of the OIDC Authentication.&lt;a name=&quot;saml-auth&quot;/&gt;### SAML authenticationFor the saml implementation create your certs using`openssl req -new -x509 -days 3652 -nodes -out sp.crt -keyout sp.key` andadd the keys to the sp section of your `settings.json`. Checkout the testsettings to get an idea (`tests/test_data/saml/*.json`).Provide the path to your own `settings.json` and `advanced_settings.json`in the `SAMLAuthConfig` like in the example below (don't use the test data inproduction).```pythonfrom fastapi_opa import OPAConfigfrom fastapi_opa.auth.auth_saml import SAMLAuthenticationfrom fastapi_opa.auth.auth_saml import SAMLConfigopa_host = &quot;http://localhost:8181&quot;saml_config = SAMLConfig(settings_directory=&quot;./tests/test_data/saml&quot;)saml_auth = SAMLAuthentication(saml_config)opa_config = OPAConfig(authentication=saml_auth, opa_host=opa_host,                       accepted_methods=[&quot;id_token&quot;, &quot;access_token&quot;])```Upload the certificate to your identity provider. Using Keycloak as anidentity provider you need to configure `encrypt assertion`,`client signature required`, `force POST bindings` on creating the client.Also configure: `Client Scopes` -&gt; `role_list (saml)` -&gt; `Mappers tab` -&gt;`role list` -&gt; `Single Role Attribute`&lt;a name=&quot;custom-payload-enrichment&quot;/&gt;## Custom payload enrichmentUse the interface `fastapi_opa.opa.opa_config.Injectable` to addmore information to the payload sent to Open Policy Agent.Configure the injectables in the `OPAConfig`:```pythonclass FancyInjectable(Injectable):    async def extract(self, request: Request) -&gt; List:        return [&quot;some&quot;, &quot;custom&quot;, &quot;stuff&quot;]fancy_inj = FancyInjectable(&quot;fancy_key&quot;, skip_endpoints=[&quot;/health&quot;, &quot;/api/[^/]*/test])opa_config = OPAConfig(    authentication=oidc_auth, opa_host=opa_host, injectables=[fancy_inj])```Use `skip_endpoints` to choose which endpoints the injectable shouldn't affect.To define an endpoint, specify an exact string or a regular expression.&lt;a name=&quot;gql-enrichment&quot;/&gt;### GraphQL enrichmentFor GraphQL you can use the ready to go injectable:```pythonfrom fastapi_opa.opa.enrichment.graphql_enrichment import GraphQLInjectable`graphql = GraphQLInjectable(&quot;gql_injectable&quot;)opa_config = OPAConfig(authentication=oidc_auth, opa_host=opa_host, injectables=[graphql])```</longdescription>
</pkgmetadata>