<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;   &lt;img src=&quot;https://gitlab.com/outflow-project/outflow/-/raw/develop/docs/sections/images/logo.svg&quot; width=&quot;500&quot; style=&quot;max-width: 500px;&quot;&gt;&lt;/div&gt;&lt;div align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/outflow/&quot;&gt;  &lt;img src=&quot;https://img.shields.io/pypi/pyversions/outflow.svg&quot; alt=&quot;python&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/outflow/&quot;&gt;  &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/outflow&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://gitlab.com/outflow-project/outflow/-/pipelines/master/latest&quot;&gt;  &lt;img alt=&quot;pipeline status&quot; src=&quot;https://gitlab.com/outflow-project/outflow/badges/master/pipeline.svg&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://gitlab.com/outflow-project/outflow/-/pipelines/master/latest&quot;&gt;  &lt;img alt=&quot;coverage report&quot; src=&quot;https://gitlab.com/outflow-project/outflow/badges/master/coverage.svg&quot; /&gt;&lt;/a&gt;&lt;a href=https://github.com/ambv/black&gt;    &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;a href='https://docs.outflow.dev'&gt;  &lt;img src='https://readthedocs.org/projects/outflow/badge/?version=latest' alt='Documentation Status' /&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.python.org/pypi/outflow&quot;&gt;  &lt;img src=&quot;https://img.shields.io/pypi/l/outflow.svg&quot; alt=&quot;license&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://discord.outflow.dev/&quot;&gt;  &lt;img src=&quot;https://img.shields.io/badge/discord-support-7389D8?logo=discord&amp;style=flat&amp;logoColor=fff&quot; alt=&quot;chat-discord-support&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Outflow is a framework that helps you build and run task workflows.The api is as simple as possible while still giving the user full control over the definition and execution of theworkflows.**Feature highlight :**- Simple but powerful API- Support for **parallelized and distributed execution**- Centralized **command line interface** for your pipeline commands- Integrated **database** access, sqlalchemy models and alembic migrations- Executions and exceptions logging for **tracability**- Strict type and input/output checking for a **robust** pipelineCheck out our [documentation][outflow readthedocs] for more information.[outflow readthedocs]: https://docs.outflow.dev# InstallingInstall and update using [pip](https://pip.pypa.io/en/stable/):```pip install -U outflow```# Quick start## One file starterFirst, create a `pipeline.py` script:```python# -- pipeline.pyfrom outflow.core.commands import Command, RootCommandfrom outflow.core.pipeline import Pipelinefrom outflow.core.tasks import as_task# with the as_task decorator, the function will be automatically converted into a Task subclass# the signature of the function, including the return type, is used to determine task inputs and outputs@as_taskdef GetValues() -&gt; {&quot;word1&quot;: str, &quot;word2&quot;: str}:    return {&quot;word1&quot;: &quot;Hello&quot;, &quot;word2&quot;: &quot;world!&quot;}# default values can also be used as inputs@as_taskdef Concatenate(word1: str, word2: str) -&gt; {&quot;result&quot;: str}:    result = f&quot;{word1} {word2}&quot;    return result  # you can return the value directly if your task has only one output# A task can have side-effects and returns nothing@as_taskdef PrintResult(result: str):    print(result)@RootCommand.subcommand()class HelloWorld(Command):    def setup_tasks(self):        # instantiate the tasks        get_values = GetValues()        concatenate = Concatenate(word2=&quot;outflow!&quot;)  # you can override task inputs value at instantiation        print_result = PrintResult()        # build the workflow        get_values &gt;&gt; concatenate &gt;&gt; print_result# instantiate and run the pipelinewith Pipeline(        root_directory=None,        settings_module=&quot;outflow.core.pipeline.default_settings&quot;,        force_dry_run=True,) as pipeline:    result = pipeline.run()```and run your first Outflow pipeline:```$ python pipeline.py hello_world```## A robust, configurable and well-organized pipelineYou had a brief overview of Outflow's features and you want to go further. Outflow offers command line tools to help you to start your pipeline project.First, we will need to auto-generate the pipeline structure -- a collection of files including the pipeline settings, the database and the cluster configuration, etc.```$ python -m outflow management create pipeline my_pipeline```Then, we have to create a plugin -- a dedicated folder regrouping the commands, the tasks as well as the description of the database (the models)```$ python -m outflow management create plugin my_namespace.my_plugin --plugin_dir my_pipeline/plugins/my_plugin```In the my_pipeline/settings.py file, add your new plugin to the plugin list:```pythonPLUGINS = [    'outflow.management',    'my_namespace.my_plugin',]```and run the following command:```$ python ./my_pipeline/manage.py my_plugin```You'll see the following output on the command line:``` * outflow.core.pipeline.pipeline - pipeline.py:325 - INFO - No cluster config found in configuration file, running in a local cluster * my_namespace.my_plugin.commands - commands.py:49 - INFO - Hello from my_plugin```Your pipeline is up and running. You can now start adding new tasks and commands.# ContributingFor guidance on setting up a development environment and how to make a contribution to Outflow, see the [contributing guidelines](https://gitlab.lam.fr/CONCERTO/outflow/-/blob/master/CONTRIBUTING.md).</longdescription>
</pkgmetadata>