<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>- [About](#about)- [Usage](#usage)- [Development](#development)  - [Getting the code](#getting-the-code)  - [Python version support](#python-version-support)  - [Dependency management](#dependency-management)    - [wrapt](#wrapt)  - [Linting](#linting)  - [Testing](#testing)    - [pytest](#pytest)    - [tox](#tox)  - [Code Coverage](#code-coverage)# About`appmap-python` is a Python package for recording[AppMaps](https://github.com/applandinc/appmap) of your code. &quot;AppMap&quot; is a data formatwhich records code structure (modules, classes, and methods), code execution events(function calls and returns), and code metadata (repo name, repo URL, commit SHA, labels,etc). It's more granular than a performance profile, but it's less granular than a fulldebug trace. It's designed to be optimal for understanding the design intent and structureof code and key data flows.# UsageVisit the [AppMap for Python](https://appland.com/docs/reference/appmap-python.html) reference page on AppLand.com for a complete reference guide.# Development [![Build Status](https://travis-ci.com/getappmap/appmap-python.svg?branch=master)](https://travis-ci.com/getappmap/appmap-python)## Getting the codeClone the repo to begin development. Note that vendored dependencies are included assubmodules.```shell% git clone --recurse-submodules https://github.com/applandinc/appmap-python.gitCloning into 'appmap-python'...remote: Enumerating objects: 167, done.remote: Counting objects: 100% (167/167), done.remote: Compressing objects: 100% (100/100), done.remote: Total 962 (delta 95), reused 116 (delta 61), pack-reused 795Receiving objects: 100% (962/962), 217.31 KiB | 4.62 MiB/s, done.Resolving deltas: 100% (653/653), done.Submodule 'extern/wrapt' (https://github.com/applandinc/wrapt.git) registered for path 'vendor/wrapt'Cloning into '/private/tmp/appmap-python/vendor/wrapt'...remote: Enumerating objects: 46, done.remote: Counting objects: 100% (46/46), done.remote: Compressing objects: 100% (39/39), done.remote: Total 2537 (delta 9), reused 19 (delta 4), pack-reused 2491Receiving objects: 100% (2537/2537), 755.94 KiB | 7.48 MiB/s, done.Resolving deltas: 100% (1643/1643), done.Submodule path 'vendor/wrapt': checked out '9bdfbe54b88a64069cba1f3c36e77edc3c1339c9'% ls appmap-python/vendor/wraptLICENSEMakefileappveyor.ymldocssrctestsMANIFEST.inREADME.rstblogsetup.pytddium.ymltox.ini```## Python version supportAs a package intended to be installed in as many environments as possible, `appmap-python`needs to avoid using features of Python or the standard library that were added after theoldest version currently supported (see the[supported versions](https://appland.com/docs/reference/appmap-python.html#supported-versions)).## Dependency management[poetry](https://https://python-poetry.org/) for dependency management:```% brew install poetry% cd appmap-python% poetry install```### wraptThe one dependency that is not managed using `poetry` is `wrapt`. Because it's possible thatprojects that use `appmap` may also need an unmodified version of `wrapt` (e.g. `pylint` depends on`astroid`, which in turn depends on `wrapt`), we use[vendoring](https://github.com/pradyunsg/vendoring) to vendor `wrapt`.To update `wrapt`, use `tox` (described below) to run the `vendoring` environment.## Linting[pylint](https://www.pylint.org/) for linting:```% cd appmap-python% poetry run pylint appmap--------------------------------------------------------------------Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)```[Note that the current configuration has a threshold set which must be met for the Travis build topass. To make this easier to achieve, a number of checks have both been disabled. They should bereenabled as soon as possible.]## Testing### pytestNote that you must install the dependencies contained in[requirements-test.txt](requirements-test.txt) before running tests. See the explanation in[pyproject.toml](pyproject.toml) for details.[pytest](https://docs.pytest.org/en/stable/) for testing:```% cd appmap-python% pip install -r requirements-test.txt% poetry run pytest```### toxAdditionally, the `tox` configuration provides the ability to run the tests for allsupported versions of Python and djanggo. `tox` requires that all the correct versions of Python to be available to createthe test environments. [pyenv](https://github.com/pyenv/pyenv) is an easy way to managemultiple versions of Python, and the [xxenv-latestplugin](https://github.com/momo-lab/xxenv-latest) can help get all the latest versions.```sh% brew install pyenv% git clone https://github.com/momo-lab/xxenv-latest.git &quot;$(pyenv root)&quot;/plugins/xxenv-latest% cd appmap-python% pyenv latest local 3.{9,6,7,8}% for v in 3.{9,6,7,8}; do pyenv latest install $v; done% poetry run tox```## Code Coverage[coverage](https://coverage.readthedocs.io/) for coverage:```% cd appmap-python% poetry run coverage run -m pytest% poetry run coverage html% open htmlcov/index.html```</longdescription>
</pkgmetadata>