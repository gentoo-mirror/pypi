<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Download market data from Yahoo! Finance's API&lt;table border=1 cellpadding=10&gt;&lt;tr&gt;&lt;td&gt;#### \*\*\* IMPORTANT LEGAL DISCLAIMER \*\*\*---**Yahoo!, Y!Finance, and Yahoo! finance are registered trademarks ofYahoo, Inc.**yfinance is **not** affiliated, endorsed, or vetted by Yahoo, Inc. It'san open-source tool that uses Yahoo's publicly available APIs, and isintended for research and educational purposes.**You should refer to Yahoo!'s terms of use**([here](https://policies.yahoo.com/us/en/yahoo/terms/product-atos/apiforydn/index.htm),[here](https://legal.yahoo.com/us/en/yahoo/terms/otos/index.html), and[here](https://policies.yahoo.com/us/en/yahoo/terms/index.htm)) **fordetails on your rights to use the actual data downloaded. Remember - theYahoo! finance API is intended for personal use only.**&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;---&lt;a target=&quot;new&quot; href=&quot;https://pypi.python.org/pypi/yfinance&quot;&gt;&lt;img border=0 src=&quot;https://img.shields.io/badge/python-2.7,%203.6+-blue.svg?style=flat&quot; alt=&quot;Python version&quot;&gt;&lt;/a&gt;&lt;a target=&quot;new&quot; href=&quot;https://pypi.python.org/pypi/yfinance&quot;&gt;&lt;img border=0 src=&quot;https://img.shields.io/pypi/v/yfinance.svg?maxAge=60%&quot; alt=&quot;PyPi version&quot;&gt;&lt;/a&gt;&lt;a target=&quot;new&quot; href=&quot;https://pypi.python.org/pypi/yfinance&quot;&gt;&lt;img border=0 src=&quot;https://img.shields.io/pypi/status/yfinance.svg?maxAge=60&quot; alt=&quot;PyPi status&quot;&gt;&lt;/a&gt;&lt;a target=&quot;new&quot; href=&quot;https://pypi.python.org/pypi/yfinance&quot;&gt;&lt;img border=0 src=&quot;https://img.shields.io/pypi/dm/yfinance.svg?maxAge=2592000&amp;label=installs&amp;color=%2327B1FF&quot; alt=&quot;PyPi downloads&quot;&gt;&lt;/a&gt;&lt;a target=&quot;new&quot; href=&quot;https://travis-ci.com/github/ranaroussi/yfinance&quot;&gt;&lt;img border=0 src=&quot;https://img.shields.io/travis/ranaroussi/yfinance/main.svg?maxAge=1&quot; alt=&quot;Travis-CI build status&quot;&gt;&lt;/a&gt;&lt;a target=&quot;new&quot; href=&quot;https://www.codefactor.io/repository/github/ranaroussi/yfinance&quot;&gt;&lt;img border=0 src=&quot;https://www.codefactor.io/repository/github/ranaroussi/yfinance/badge&quot; alt=&quot;CodeFactor&quot;&gt;&lt;/a&gt;&lt;a target=&quot;new&quot; href=&quot;https://github.com/ranaroussi/yfinance&quot;&gt;&lt;img border=0 src=&quot;https://img.shields.io/github/stars/ranaroussi/yfinance.svg?style=social&amp;label=Star&amp;maxAge=60&quot; alt=&quot;Star this repo&quot;&gt;&lt;/a&gt;&lt;a target=&quot;new&quot; href=&quot;https://twitter.com/aroussi&quot;&gt;&lt;img border=0 src=&quot;https://img.shields.io/twitter/follow/aroussi.svg?style=social&amp;label=Follow&amp;maxAge=60&quot; alt=&quot;Follow me on twitter&quot;&gt;&lt;/a&gt;**yfinance** offers a threaded and Pythonic way to download market data from [Yahoo!Ⓡ finance](https://finance.yahoo.com).→ Check out this [Blog post](https://aroussi.com/#post/python-yahoo-finance) for a detailed tutorial with code examples.[Changelog »](https://github.com/ranaroussi/yfinance/blob/main/CHANGELOG.rst)---## Quick Start### The Ticker moduleThe `Ticker` module, which allows you to access ticker data in a more Pythonic way:```pythonimport yfinance as yfmsft = yf.Ticker(&quot;MSFT&quot;)# get all stock infomsft.info# get historical market datahist = msft.history(period=&quot;1mo&quot;)# show meta information about the history (requires history() to be called first)msft.history_metadata# show actions (dividends, splits, capital gains)msft.actionsmsft.dividendsmsft.splitsmsft.capital_gains  # only for mutual funds &amp; etfs# show share countmsft.get_shares_full(start=&quot;2022-01-01&quot;, end=None)# show financials:# - income statementmsft.income_stmtmsft.quarterly_income_stmt# - balance sheetmsft.balance_sheetmsft.quarterly_balance_sheet# - cash flow statementmsft.cashflowmsft.quarterly_cashflow# see `Ticker.get_income_stmt()` for more options# show holdersmsft.major_holdersmsft.institutional_holdersmsft.mutualfund_holders# Show future and historic earnings dates, returns at most next 4 quarters and last 8 quarters by default. # Note: If more are needed use msft.get_earnings_dates(limit=XX) with increased limit argument.msft.earnings_dates# show ISIN code - *experimental*# ISIN = International Securities Identification Numbermsft.isin# show options expirationsmsft.options# show newsmsft.news# get option chain for specific expirationopt = msft.option_chain('YYYY-MM-DD')# data available via: opt.calls, opt.puts```If you want to use a proxy server for downloading data, use:```pythonimport yfinance as yfmsft = yf.Ticker(&quot;MSFT&quot;)msft.history(..., proxy=&quot;PROXY_SERVER&quot;)msft.get_actions(proxy=&quot;PROXY_SERVER&quot;)msft.get_dividends(proxy=&quot;PROXY_SERVER&quot;)msft.get_splits(proxy=&quot;PROXY_SERVER&quot;)msft.get_capital_gains(proxy=&quot;PROXY_SERVER&quot;)msft.get_balance_sheet(proxy=&quot;PROXY_SERVER&quot;)msft.get_cashflow(proxy=&quot;PROXY_SERVER&quot;)msft.option_chain(..., proxy=&quot;PROXY_SERVER&quot;)...```### Multiple tickersTo initialize multiple `Ticker` objects, use```pythonimport yfinance as yftickers = yf.Tickers('msft aapl goog')# access each ticker using (example)tickers.tickers['MSFT'].infotickers.tickers['AAPL'].history(period=&quot;1mo&quot;)tickers.tickers['GOOG'].actions```To download price history into one table:```pythonimport yfinance as yfdata = yf.download(&quot;SPY AAPL&quot;, period=&quot;1mo&quot;)```#### `yf.download()` and `Ticker.history()` have many options for configuring fetching and processing. [Review the Wiki](https://github.com/ranaroussi/yfinance/wiki) for more options and detail.### Logging`yfinance` now uses the `logging` module to handle messages, default behaviour is only print errors. If debugging, use `yf.enable_debug_mode()` to switch logging to debug with custom formatting.### Smarter scrapingTo use a custom `requests` session (for example to cache calls to theAPI or customize the `User-agent` header), pass a `session=` argument tothe Ticker constructor.```pythonimport requests_cachesession = requests_cache.CachedSession('yfinance.cache')session.headers['User-agent'] = 'my-program/1.0'ticker = yf.Ticker('msft', session=session)# The scraped response will be stored in the cacheticker.actions```Combine a `requests_cache` with rate-limiting to avoid triggering Yahoo's rate-limiter/blocker that can corrupt data.```pythonfrom requests import Sessionfrom requests_cache import CacheMixin, SQLiteCachefrom requests_ratelimiter import LimiterMixin, MemoryQueueBucketfrom pyrate_limiter import Duration, RequestRate, Limiterclass CachedLimiterSession(CacheMixin, LimiterMixin, Session):    passsession = CachedLimiterSession(    limiter=Limiter(RequestRate(2, Duration.SECOND*5)),  # max 2 requests per 5 seconds    bucket_class=MemoryQueueBucket,    backend=SQLiteCache(&quot;yfinance.cache&quot;),)```### Managing Multi-Level ColumnsThe following answer on Stack Overflow is for [How to deal withmulti-level column names downloaded withyfinance?](https://stackoverflow.com/questions/63107801)-   `yfinance` returns a `pandas.DataFrame` with multi-level column    names, with a level for the ticker and a level for the stock price    data    -   The answer discusses:        -   How to correctly read the the multi-level columns after            saving the dataframe to a csv with `pandas.DataFrame.to_csv`        -   How to download single or multiple tickers into a single            dataframe with single level column names and a ticker column### `pandas_datareader` overrideIf your code uses `pandas_datareader` and you want to download datafaster, you can &quot;hijack&quot; `pandas_datareader.data.get_data_yahoo()`method to use **yfinance** while making sure the returned data is in thesame format as **pandas\_datareader**'s `get_data_yahoo()`.```pythonfrom pandas_datareader import data as pdrimport yfinance as yfyf.pdr_override() # &lt;== that's all it takes :-)# download dataframedata = pdr.get_data_yahoo(&quot;SPY&quot;, start=&quot;2017-01-01&quot;, end=&quot;2017-04-30&quot;)```### Timezone cache storeWhen fetching price data, all dates are localized to stock exchange timezone. But timezone retrieval is relatively slow, so yfinance attemps to cache them in your users cache folder. You can direct cache to use a different location with `set_tz_cache_location()`:```pythonimport yfinance as yfyf.set_tz_cache_location(&quot;custom/cache/location&quot;)...```---## InstallationInstall `yfinance` using `pip`:``` {.sourceCode .bash}$ pip install yfinance --upgrade --no-cache-dir```Test new features by installing betas, provide feedback in [corresponding Discussion](https://github.com/ranaroussi/yfinance/discussions):``` {.sourceCode .bash}$ pip install yfinance --upgrade --no-cache-dir --pre```To install `yfinance` using `conda`, see[this](https://anaconda.org/ranaroussi/yfinance).### Requirements-   [Python](https://www.python.org) \&gt;= 2.7, 3.4+-   [Pandas](https://github.com/pydata/pandas) \&gt;= 1.3.0-   [Numpy](http://www.numpy.org) \&gt;= 1.16.5-   [requests](http://docs.python-requests.org/en/master) \&gt;= 2.31-   [lxml](https://pypi.org/project/lxml) \&gt;= 4.9.1-   [appdirs](https://pypi.org/project/appdirs) \&gt;= 1.4.4-   [pytz](https://pypi.org/project/pytz) \&gt;=2022.5-   [frozendict](https://pypi.org/project/frozendict) \&gt;= 2.3.4-   [beautifulsoup4](https://pypi.org/project/beautifulsoup4) \&gt;= 4.11.1-   [html5lib](https://pypi.org/project/html5lib) \&gt;= 1.1#### Optional (if you want to use `pandas_datareader`)-   [pandas\_datareader](https://github.com/pydata/pandas-datareader)    \&gt;= 0.4.0## Developers: want to contribute?`yfinance` relies on community to investigate bugs and contribute code. Developer guide: https://github.com/ranaroussi/yfinance/discussions/1084---### Legal Stuff**yfinance** is distributed under the **Apache Software License**. Seethe [LICENSE.txt](./LICENSE.txt) file in the release for details.AGAIN - yfinance is **not** affiliated, endorsed, or vetted by Yahoo, Inc. It'san open-source tool that uses Yahoo's publicly available APIs, and isintended for research and educational purposes. You should refer to Yahoo!'s terms of use([here](https://policies.yahoo.com/us/en/yahoo/terms/product-atos/apiforydn/index.htm),[here](https://legal.yahoo.com/us/en/yahoo/terms/otos/index.html), and[here](https://policies.yahoo.com/us/en/yahoo/terms/index.htm)) fordetailes on your rights to use the actual data downloaded.---### P.S.Please drop me an note with any feedback you have.**Ran Aroussi**</longdescription>
</pkgmetadata>