<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;    &lt;h1&gt;Kinopoisk Dev Api&lt;/h1&gt;    &lt;p&gt;Python-модуль для взаимодействия с неофициальным &lt;a href=&quot;https://kinopoisk.dev/&quot;&gt;API КиноПоиска&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;## Установка### Pip```pip install kinopoisk-dev```### Poetry```poetry add kinopoisk-dev```## Получение токенаДля получения токена необходимо перейти [kinopoisk.dev](https://kinopoisk.dev/documentation.html) и написать поконтактам.## Методы взаимодействия### RandomПолучить рандомный тайтл из базы- Endpoint - `/v1/movie/random`- [Примеры](./example/example_movie_random.py)#### Async```pythonimport asynciofrom kinopoisk_dev import KinopoiskDevkp = KinopoiskDev(token=TOKEN)item = asyncio.run(kp.arandom())```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDevkp = KinopoiskDev(token=TOKEN)item = kp.random()```### Possible values by fieldПолучить все возможные значения полей- Endpoint - `/v1/movie/possible-values-by-field`- [Примеры](./example/example_movie_possible_values_by_field.py)#### Async```pythonimport asynciofrom kinopoisk_dev import KinopoiskDev, PossValFieldkp = KinopoiskDev(token=TOKEN)item = asyncio.run(kp.apossible_values_by_field(params=PossValField.GENRES))```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDev, PossValFieldkp = KinopoiskDev(token=TOKEN)item = kp.possible_values_by_field(params=PossValField.GENRES)```### MoviesПоиск тайтлов- Ендпоинт - `/v1/movie/`- [Примеры](./example/example_movie.py)#### Async```pythonimport asynciofrom kinopoisk_dev import KinopoiskDev, MovieParams, MovieFieldkp = KinopoiskDev(token=TOKEN)items = asyncio.run(kp.afind_many_movies(params=[    MovieParams(keys=MovieField.name, value=&quot;Аватар&quot;),    MovieParams(keys=MovieField.page, value=&quot;1&quot;),    MovieParams(keys=MovieField.limit, value=&quot;1000&quot;)]))```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDev, MovieParams, MovieFieldkp = KinopoiskDev(token=TOKEN)items = kp.find_many_movies(params=[    MovieParams(keys=MovieField.name, value=&quot;Аватар&quot;),    MovieParams(keys=MovieField.page, value=&quot;1&quot;),    MovieParams(keys=MovieField.limit, value=&quot;1000&quot;)])```### MovieПоиск по id- Ендпоинт - `/v1/movie/{id}`- [Примеры](./example/example_movie_id.py)#### Async```pythonfrom kinopoisk_dev import KinopoiskDevkp = KinopoiskDev(token=TOKEN)item = asyncio.run(kp.afind_one_movie(666))```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDevkp = KinopoiskDev(token=TOKEN)item = kp.find_one_movie(666)```### Season- Ендпоинт - `/v1/season`- [Пример](./example/example_season.py)#### Async```pythonimport asynciofrom kinopoisk_dev import KinopoiskDev, SeasonParams, SeasonFieldkp = KinopoiskDev(token=TOKEN)item = asyncio.run(kp.aseasons(params=[    SeasonParams(keys=SeasonField.PAGE, value=1),    SeasonParams(keys=SeasonField.LIMIT, value=100)]))```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDev, SeasonParams, SeasonFieldkp = KinopoiskDev(token=TOKEN)item = kp.seasons(params=[    SeasonParams(keys=SeasonField.PAGE, value=1),    SeasonParams(keys=SeasonField.LIMIT, value=100)])```### Review- Ендпоинт - `/v1/review`- [Пример](./example/example_review.py)#### Async```pythonimport asynciofrom kinopoisk_dev import KinopoiskDev, ReviewParams, ReviewFieldkp = KinopoiskDev(token=TOKEN)item = asyncio.run(kp.areview(params=[    ReviewParams(keys=ReviewField.PAGE, value=1),    ReviewParams(keys=ReviewField.LIMIT, value=100)]))```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDev, ReviewParams, ReviewFieldkp = KinopoiskDev(token=TOKEN)item = kp.review(params=[    ReviewParams(keys=ReviewField.PAGE, value=1),    ReviewParams(keys=ReviewField.LIMIT, value=100)])```### Persons- Ендпоинт - `/v1/person`- [Пример](./example/example_person.py)#### Async```pythonimport asynciofrom kinopoisk_dev import KinopoiskDev, PersonParams, PersonFieldkp = KinopoiskDev(token=TOKEN)item = asyncio.run(kp.afind_many_person(params=[    PersonParams(keys=PersonField.PAGE, value=1),    PersonParams(keys=PersonField.LIMIT, value=100)]))```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDev, PersonParams, PersonFieldkp = KinopoiskDev(token=TOKEN)item = kp.find_many_person(params=[    PersonParams(keys=PersonField.PAGE, value=1),    PersonParams(keys=PersonField.LIMIT, value=100)])```### Person- Ендпоинт - `/v1/person/{id}`- [Пример](./example/example_person_id.py)#### Async```pythonimport asynciofrom kinopoisk_dev import KinopoiskDevkp = KinopoiskDev(token=TOKEN)item = asyncio.run(kp.afind_one_person(24262))```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDevkp = KinopoiskDev(token=TOKEN)item = kp.find_one_person(24262)```### Image- Ендпоинт - `/v1/image`- [Пример](./example/example_image.py)#### Async```pythonimport asynciofrom kinopoisk_dev import KinopoiskDev, ImageParams, ImageFieldkp = KinopoiskDev(token=TOKEN)item = asyncio.run(kp.aimage(params=[    ImageParams(keys=ImageField.PAGE, value=1),    ImageParams(keys=ImageField.LIMIT, value=100)]))```#### Sync```pythonfrom kinopoisk_dev import KinopoiskDev, ImageParams, ImageFieldkp = KinopoiskDev(token=TOKEN)item = kp.image(params=[    ImageParams(keys=ImageField.PAGE, value=1),    ImageParams(keys=ImageField.LIMIT, value=100)])```</longdescription>
</pkgmetadata>