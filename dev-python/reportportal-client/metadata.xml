<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ReportPortal python client[![PyPI](https://img.shields.io/pypi/v/reportportal-client.svg?maxAge=259200)](https://pypi.python.org/pypi/reportportal-client)[![Python versions](https://img.shields.io/pypi/pyversions/reportportal-client.svg)](https://pypi.org/project/reportportal-client)[![Build Status](https://github.com/reportportal/client-Python/actions/workflows/tests.yml/badge.svg)](https://github.com/reportportal/client-Python/actions/workflows/tests.yml)[![codecov.io](https://codecov.io/gh/reportportal/client-Python/branch/develop/graph/badge.svg)](https://codecov.io/gh/reportportal/client-Python)[![Join Slack chat!](https://slack.epmrpp.reportportal.io/badge.svg)](https://slack.epmrpp.reportportal.io/)[![stackoverflow](https://img.shields.io/badge/reportportal-stackoverflow-orange.svg?style=flat)](http://stackoverflow.com/questions/tagged/reportportal)[![Build with Love](https://img.shields.io/badge/build%20with-‚ù§%EF%B8%8F%E2%80%8D-lightgrey.svg)](http://reportportal.io?style=flat)Library used only for implementors of custom listeners for ReportPortal## Already implemented listeners:- [PyTest Framework](https://github.com/reportportal/agent-python-pytest)- [Robot Framework](https://github.com/reportportal/agent-Python-RobotFramework)- [Behave Framework](https://github.com/reportportal/agent-python-behave)- [Nose Framework (archived)](https://github.com/reportportal/agent-python-nosetests)## InstallationThe latest stable version is available on PyPI:```pip install reportportal-client```## UsageBasic usage example:```pythonimport osimport subprocessfrom mimetypes import guess_typefrom reportportal_client import RPClientfrom reportportal_client.helpers import timestampendpoint = &quot;http://docker.local:8080&quot;project = &quot;default&quot;# You can get UUID from user profile page in the ReportPortal.api_key = &quot;1adf271d-505f-44a8-ad71-0afbdf8c83bd&quot;launch_name = &quot;Test launch&quot;launch_doc = &quot;Testing logging with attachment.&quot;client = RPClient(endpoint=endpoint, project=project,                  api_key=api_key)# Start log upload threadclient.start()# Start launch.launch = client.start_launch(name=launch_name,                             start_time=timestamp(),                             description=launch_doc)item_id = client.start_test_item(name=&quot;Test Case&quot;,                                 description=&quot;First Test Case&quot;,                                 start_time=timestamp(),                                 attributes=[{&quot;key&quot;: &quot;key&quot;, &quot;value&quot;: &quot;value&quot;},                                             {&quot;value&quot;, &quot;tag&quot;}],                                 item_type=&quot;STEP&quot;,                                 parameters={&quot;key1&quot;: &quot;val1&quot;,                                             &quot;key2&quot;: &quot;val2&quot;})# Create text log message with INFO level.client.log(time=timestamp(),           message=&quot;Hello World!&quot;,           level=&quot;INFO&quot;)# Create log message with attached text output and WARN level.client.log(time=timestamp(),           message=&quot;Too high memory usage!&quot;,           level=&quot;WARN&quot;,           attachment={               &quot;name&quot;: &quot;free_memory.txt&quot;,               &quot;data&quot;: subprocess.check_output(&quot;free -h&quot;.split()),               &quot;mime&quot;: &quot;text/plain&quot;           })# Create log message with binary file, INFO level and custom mimetype.image = &quot;/tmp/image.png&quot;with open(image, &quot;rb&quot;) as fh:    attachment = {        &quot;name&quot;: os.path.basename(image),        &quot;data&quot;: fh.read(),        &quot;mime&quot;: guess_type(image)[0] or &quot;application/octet-stream&quot;    }    client.log(timestamp(), &quot;Screen shot of issue.&quot;, &quot;INFO&quot;, attachment)client.finish_test_item(item_id=item_id, end_time=timestamp(), status=&quot;PASSED&quot;)# Finish launch.client.finish_launch(end_time=timestamp())# Due to async nature of the service we need to call terminate() method which# ensures all pending requests to server are processed.# Failure to call terminate() may result in lost data.client.terminate()```# Send attachment (screenshots)The client uses `requests` library for working with RP and the same semanticsto work with attachments (data).To log an attachment you need to pass file content and metadata to `````pythonimport loggingfrom reportportal_client import RPLogger, RPLogHandlerlogging.setLoggerClass(RPLogger)rp_logger = logging.getLogger(__name__)rp_logger.setLevel(logging.DEBUG)rp_logger.addHandler(RPLogHandler())screenshot_file_path = 'path/to/file.png'with open(screenshot_file_path, &quot;rb&quot;) as image_file:    file_data = image_file.read()    # noinspection PyArgumentList    rp_logger.info(        &quot;Some Text Here&quot;,        attachment={&quot;name&quot;: &quot;test_name_screenshot.png&quot;,                    &quot;data&quot;: file_data,                    &quot;mime&quot;: &quot;image/png&quot;}    )```# Copyright NoticeLicensed under the [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0)license (see the LICENSE.txt file).</longdescription>
</pkgmetadata>