<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>What is Rx?===========When adding an API to your web service, you have to choose how to encode thedata you send across the line. XML is one common choice for this, but it cangrow arcane and cumbersome pretty quickly. Lots of webservice authors want toavoid thinking about XML, and instead choose formats that provide a few simpledata types that correspond to common data structures in modern programminglanguages. In other words, JSON and YAML.Unfortunately, while these formats make it easy to pass around complex datastructures, they lack a system for validation. XML has XML Schemas and RELAXNG, but these are complicated and sometimes confusing standards. They're notvery portable to the kind of data structure provided by JSON, and if you wantedto avoid XML as a data encoding, writing more XML to validate the first XML isprobably even less appealing.Rx is meant to provide a system for data validation that matches up withJSON-style data structures and is as easy to work with as JSON itself.rxjson======rxjson is a python package that helps you validate your generated JSONagainst a standardized json schema directly in your python app.It is a packaged version of http://rx.codesimply.com/.. image:: https://secure.travis-ci.org/spiral-project/rxjson.png   :target: http://travis-ci.org/spiral-project/rxjson/   :alt: Travis-ci: continuous integration status.Usage=====Here is a little example of how to validate your json against a rx schema:.. code-block:: python    import requests    from rxjson import Rx    import unittest        class SporeTest(unittest.TestCase):        &quot;&quot;&quot;Test generate spore schema.&quot;&quot;&quot;        def test_spore(self):            rx = Rx.Factory({ &quot;register_core_types&quot;: True })            with open('spore_validation.rx') as f:                spore_json_schema = json.loads(f.read())                spore_schema = rx.make_schema(spore_json_schema)                resp = requests.get('http://localhost:8000/spore', headers={'Content-Type': 'application/json'})                self.assertTrue(spore_schema.check(resp.json))Or even quicker:.. code-block:: python    &gt;&gt;&gt; import json    &gt;&gt;&gt; from rxjson import Rx    &gt;&gt;&gt; rx = Rx.Factory({ &quot;register_core_types&quot;: True })    &gt;&gt;&gt; spore_json_schema = json.loads(open('spore_validation.rx').read())    &gt;&gt;&gt; spore_schema = rx.make_schema(spore_json_schema)    &gt;&gt;&gt; js = json.loads(&quot;&quot;&quot;{    ...     &quot;base_url&quot;: &quot;http://localhost:8000&quot;,    ...     &quot;expected_status&quot;: [200],    ...     &quot;version&quot;: &quot;0.1&quot;,    ...     &quot;methods&quot;: {    ...         &quot;put_data_item&quot;: {    ...             &quot;path&quot;: &quot;/data/:model_name/:data_item_id&quot;,    ...             &quot;description&quot;: &quot;Update a data item.&quot;,    ...             &quot;required_params&quot;: [&quot;model_name&quot;, &quot;data_item_id&quot;],    ...             &quot;method&quot;: &quot;PUT&quot;,    ...             &quot;formats&quot;: [&quot;json&quot;]    ...         }    ...     },    ...     &quot;name&quot;: &quot;daybed&quot;    ... }&quot;&quot;&quot;)    &gt;&gt;&gt; spore_schema.check(js)    True* ``spore_validation.rx`` is part of https://github.com/SPORE/specifications* ``daybed`` is a form model validation API: https://github.com/spiral-project/daybed</longdescription>
</pkgmetadata>