<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>gdriveaudio===================[![](https://badge.fury.io/py/gdriveaudio.svg)](https://badge.fury.io/py/gdriveaudio)Play audio files in the google drive.## Requirments- Python3- MPlayer and FFmpeg  - Ubuntu: `sudo apt install mplayer ffmpeg`  - MacOSX: `brew install mplayer ffmpeg`  - Windows: Follow official instructionat [MPlayer](http://www.mplayerhq.hu/design7/dload.html) and [FFmpeg](https://ffmpeg.org/download.html)- Google account, access to the google cloud platform## Set up with Google cloud### Enable google drive API- Log in to the google cloud console and create or choose the project to use.- Go to [Google Drive API](https://console.cloud.google.com/apis/library/drive.googleapis.com) page and enable it.### Create a service account to access google drive- Log in to the google cloud console and create or choose the project to use.- Go to [IAM &amp; Admin &gt; Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts).- Click &quot;CREATE SERVICE ACCOUNT&quot;.- Type in an arbitrary service account name (e.g. `gdriveaudio-sa`).- Click &quot;DONE&quot;.- Note the email address of the service account name (e.g.` gdriveaudio-sa@gdriveaudio-project.iam.gserviceaccount.com`).### Give the service account the access to the music folder- Open [Google Drive](https://drive.google.com/).- Open the folder that contains music files.- Click the folder name and choose &quot;Share&quot;.- Paste the email address of the service account noted in the previous step.- Click &quot;Done&quot;.### Create the credentials file of the service account- Log in to the google cloud console and choose the project to use.- Open [IAM &amp; Admin &gt; Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts).- Click the service account created above.- Click &quot;KEYS&quot; in the top menu.- Click &quot;ADD KEY&quot; and then &quot;Create new key&quot;- Choose &quot;JSON&quot; key type and click &quot;CREATE&quot;.- Rename the downloaded file as `_credentials.json` and move to a folder to use for this tool.## Install```shell# from pypi$ pip3 install gdriveaudio# from github$ git clone --depth=1 https://github.com/kota7/gdriveaudio.git$ pip3 install -U ./gdriveaudio```## Start playingFor the program to locate the credential file, either- Run the commands in the folder that has the &quot;_credentials.json&quot;- Set `GDRIVEAUDIO_DIRECTORY` environment variable as the directory containing &quot;_credentials.json&quot;, or- Run the commands with `--workdir={directory}` option to specify the directory containing &quot;_credentials.json&quot;```shell# Initialize data#   Delete pre-fetched data#   Create SQLite database file '_gdriveaudio.db'$ gdriveaudio init# Update data#   -U for updating file list#   -F for updating folder structure information#   -M for updating audio metadata (this can take hours)$ gdriveaudio update -UF# or$ gdriveaudio update -UFM# Play all files$ gdriveaudio play # Play files with some condition#   -k: case-insensitive keywords to search#   -K: case-sensitive keywords to search#   -q: Query inside 'WHERE' condition (follow SQLite dialect)$ gdriveaudio play -k &quot;beethoven&quot;$ gdriveaudio play -K &quot;Michael J&quot;       # case sensitive search$ gdriveaudio play -k &quot;name:lucky&quot;      # search only inside 'name' field$ gdriveaudio play -q &quot;duration &gt; 600&quot;  # 10+ min only# Show data# -k, -K, -q filters also work$ gdriveaudio data -n 5$ gdriveaudio data -n 10 -k &quot;beethoven&quot;# See full command options$ gdriveaudio -h$ gdriveaudio {init,update,play,data} -h```The audio player can be controled by key strokes (See full description at `man mplayer`):```shell &lt;-  or  -&gt;       seek backward/forward 10 seconds down or up       seek backward/forward  1 minute pgdown or pgup   seek backward/forward 10 minutes &lt; or &gt;           step backward/forward in playlist p or SPACE       pause movie (press any key to continue) q or ESC         stop playing and quit program + or -           adjust audio delay by +/- 0.1 second o                cycle OSD mode:  none / seekbar / seekbar + timer * or /           increase or decrease PCM volume x or z           adjust subtitle delay by +/- 0.1 second r or t           adjust subtitle position up/down, also see -vf expand```</longdescription>
</pkgmetadata>