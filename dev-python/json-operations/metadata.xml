<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># json-operationsSpecify complex conditional operations in JSON. The conditional operations can be run securelyagainst a JSON value (Python dictionary) and will return a boolean. ```pythonfrom json_operations import executeoperations = [&quot;&gt;&quot;, [&quot;key&quot;, &quot;items&quot;], 30]data1 = {    &quot;items&quot;: 31}data2 = {    &quot;items&quot;: 29}execute(operations, data1) # -&gt; Trueexecute(operations, data2) # -&gt; False```## SecurityAll operations are safe (no use of eval). It's good to enforce a length limit if you are taking inputfrom an untrusted source.## API### executeRun the json operations against a data dictionary. Return True/False. Can raise aJsonOperationError if operations are invalid or keys don't exist```pythonfrom json_operations import executeexecute(&lt;operations&gt;, &lt;data_dictionary&gt;) -&gt; bool```### get_json_schemaReturns the [JSON Schema](https://json-schema.org/) for json operations. This is useful for validating operations before running them```pythonfrom json_operations import get_json_schemaget_json_schema() -&gt; Dict```### get_keysReturns the keys inside json operations. This is useful for getting a list of keys necessary for the json operationsand validating that all keys are inside the data dictionary```pythonfrom json_operations import get_keysget_keys(&lt;operations&gt;) -&gt; List[Dict] # [{&quot;name&quot;: &quot;key1&quot;, &quot;type&quot;: &quot;number&quot;, &quot;index&quot;: 0}, ...]```## Operators### == (Equal operator)Check whether one value equal to another.##### Syntax```python[&quot;==&quot;, &lt;operator_or_literal&gt;, &lt;operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;==&quot;, [&quot;key&quot;, &quot;items&quot;], 30]data1 = {    &quot;items&quot;: 30}data2 = {    &quot;items&quot;: 31}execute(operations, data1) # -&gt; Trueexecute(operations, data2) # -&gt; False```### != (Not equal operator)Check whether one value is not equal to another.##### Syntax```python[&quot;!=&quot;, &lt;operator_or_literal&gt;, &lt;operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;!=&quot;, [&quot;key&quot;, &quot;items&quot;], 30]data1 = {    &quot;items&quot;: 30}data2 = {    &quot;items&quot;: 31}execute(operations, data1) # -&gt; Falseexecute(operations, data2) # -&gt; True```### \&gt; (Greater than operator)Check whether one value is greater than another.##### Syntax```python[&quot;&gt;&quot;, &lt;operator_or_literal&gt;, &lt;operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;&gt;&quot;, [&quot;key&quot;, &quot;items&quot;], 30]data1 = {    &quot;items&quot;: 31}data2 = {    &quot;items&quot;: 29}execute(operations, data1) # -&gt; Trueexecute(operations, data2) # -&gt; False```### \&gt;= (Greater than or equal operator)Check whether one value is greater than or equal to another.##### Syntax```python[&quot;&gt;=&quot;, &lt;operator_or_literal&gt;, &lt;operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;&gt;=&quot;, [&quot;key&quot;, &quot;items&quot;], 30]data1 = {    &quot;items&quot;: 30}data2 = {    &quot;items&quot;: 29}execute(operations, data1) # -&gt; Trueexecute(operations, data2) # -&gt; False```### &lt; (Less than operator)Check whether one value is less than another.##### Syntax```python[&quot;&lt;&quot;, &lt;operator_or_literal&gt;, &lt;operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;&lt;&quot;, [&quot;key&quot;, &quot;items&quot;], 30]data1 = {    &quot;items&quot;: 31}data2 = {    &quot;items&quot;: 29}execute(operations, data1) # -&gt; Falseexecute(operations, data2) # -&gt; True```### &lt; (Less than or equal operator)Check whether one value is less or equal to than another.##### Syntax```python[&quot;&lt;=&quot;, &lt;operator_or_literal&gt;, &lt;operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;&lt;=&quot;, [&quot;key&quot;, &quot;items&quot;], 30]data1 = {    &quot;items&quot;: 31}data2 = {    &quot;items&quot;: 30}execute(operations, data1) # -&gt; Falseexecute(operations, data2) # -&gt; True```### in (In operator)Check whether one value is contained in another.##### Syntax```python[&quot;in&quot;, &lt;operator_or_literal&gt;, &lt;operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;in&quot;, &quot;my_type&quot;,  [&quot;key&quot;, &quot;types&quot;]]data1 = {    &quot;types&quot;: [        &quot;type1&quot;, &quot;type2&quot;    ]}data2 = {    &quot;types&quot;: [        &quot;my_type&quot;, &quot;type1&quot;    ]}execute(operations, data1) # -&gt; Falseexecute(operations, data2) # -&gt; True```### !in (Not In operator)Check whether one value is NOT contained in another.##### Syntax```python[&quot;!in&quot;, &lt;operator_or_literal&gt;, &lt;operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;!in&quot;, &quot;my_type&quot;,  [&quot;key&quot;, &quot;types&quot;]]data1 = {    &quot;types&quot;: [        &quot;type1&quot;, &quot;type2&quot;    ]}data2 = {    &quot;types&quot;: [        &quot;my_type&quot;, &quot;type1&quot;    ]}execute(operations, data1) # -&gt; Trueexecute(operations, data2) # -&gt; False```### btw (Between operator)Check whether one value is between 2 other values. Equivalent to```low &lt;= val &lt;= high```Both low and high value are included.##### Syntax```python[&quot;btw&quot;, &lt;value_operator_or_literal&gt;, [&lt;low_operator_or_literal&gt;, &lt;high_operator_or_literal&gt;]]```##### Example```pythonfrom json_operations import executeoperations = [&quot;btw&quot;, [&quot;key&quot;, &quot;val&quot;],  [1, 3]]data1 = {    &quot;val&quot;: 2}data2 = {    &quot;val&quot; : 4}execute(operations, data1) # -&gt; Trueexecute(operations, data2) # -&gt; False```### &amp; (Intersection operator)Check whether 2 arrays have any members in common##### Syntax```python[&quot;&amp;&quot;, &lt;value_operator_or_literal&gt;, &lt;value_operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;&amp;&quot;, [&quot;key&quot;, &quot;val&quot;],  [1, 2]]data1 = {    &quot;val&quot;: [2,3]}data2 = {    &quot;val&quot; : [3,4]}execute(operations, data1) # -&gt; Trueexecute(operations, data2) # -&gt; False```### !&amp; (Not Intersection operator)Check whether 2 arrays have no members in common##### Syntax```python[&quot;!&amp;&quot;, &lt;value_operator_or_literal&gt;, &lt;value_operator_or_literal&gt;]```##### Example```pythonfrom json_operations import executeoperations = [&quot;!&amp;&quot;, [&quot;key&quot;, &quot;val&quot;],  [1, 2]]data1 = {    &quot;val&quot;: [2,3]}data2 = {    &quot;val&quot; : [3,4]}execute(operations, data1) # -&gt; Falseexecute(operations, data2) # -&gt; True```### and (And operator)Check whether all values are True. `and` supports nesting other operation insideit (See complex example).##### Syntax```python[&quot;and&quot;, ...&lt;operators_or_literals&gt;]```##### Examples```pythonfrom json_operations import executeoperations = [&quot;and&quot;, [&quot;key&quot;, &quot;a&quot;],  [&quot;key&quot;, &quot;b&quot;]]data1 = {    &quot;a&quot;: True,    &quot;b&quot;: False,}data2 = {    &quot;a&quot;: True,    &quot;b&quot;: True,}execute(operations, data1) # -&gt; Falseexecute(operations, data2) # -&gt; True```### or (Or operator)Check whether any values are True. `or` supports nesting other operation insideit (See complex example).##### Syntax```python[&quot;or&quot;, ...&lt;operators_or_literals&gt;]```##### Examples```pythonfrom json_operations import executeoperations = [&quot;or&quot;, [&quot;key&quot;, &quot;a&quot;],  [&quot;key&quot;, &quot;b&quot;]]data1 = {    &quot;a&quot;: False,    &quot;b&quot;: False,}data2 = {    &quot;a&quot;: False,    &quot;b&quot;: True,}execute(operations, data1) # -&gt; Falseexecute(operations, data2) # -&gt; True```## Complex Operator Example```pythonfrom json_operations import execute# (a &gt; 1 or b &lt; 5) and (c == 0 or d != 10) and (val in e or f &gt;= 0)operations = [&quot;and&quot;,                 [&quot;or&quot;, [&quot;&gt;&quot;, [&quot;key&quot;, &quot;a&quot;], 1], [&quot;&lt;&quot;, [&quot;key&quot;, &quot;b&quot;], 5]],                 [&quot;or&quot;, [&quot;==&quot;, [&quot;key&quot;, &quot;c&quot;], 0], [&quot;!=&quot;, [&quot;key&quot;, &quot;d&quot;], 10]],                [&quot;or&quot;, [&quot;in&quot;, &quot;val&quot;,  [&quot;key&quot;, &quot;e&quot;]], [&quot;&gt;=&quot;, [&quot;key&quot;, &quot;f&quot;], 0]],              ]data1 = {    &quot;a&quot;: 0,    &quot;b&quot;: 5,    &quot;c&quot;: 0,    &quot;d&quot;: 9,    &quot;e&quot;: [&quot;val&quot;, &quot;another_val&quot;],    &quot;f&quot;: 0,}data2 = {    &quot;a&quot;: 0,    &quot;b&quot;: 4,    &quot;c&quot;: 0,    &quot;d&quot;: 9,    &quot;e&quot;: [&quot;val&quot;, &quot;another_val&quot;],    &quot;f&quot;: -1,}# (0 &gt; 1 or 5 &lt; 5) and (0 == 0 or 9 != 10) and (val in [&quot;val&quot;, &quot;another_val&quot;] or 0 &gt;= 0)execute(operations, data1) # -&gt; False# (0 &gt; 1 or 4 &lt; 5) and (0 == 0 or 9 != 10) and (val in [&quot;val&quot;, &quot;another_val&quot;] or -1 &gt;= 0)execute(operations, data2) # -&gt; True```## Differences from json-logic https://jsonlogic.com/- Operations are always type safe (cannot compare different types). json-logic will automatically convert different types and compare them, which can lead to issues that are tough to find- Invalid operations are errors instead of ignored. json-logic tries to avoid all errors and instead continues with unexpected input. This can lead to issues- More compact and intuitive syntax:```python[&quot;or&quot;, [&quot;key&quot;, &quot;a&quot;], [&quot;key&quot;, &quot;b&quot;]]``` vs ```python{&quot;or&quot;: [{&quot;var&quot;: [&quot;a&quot;]}, {&quot;var&quot;: [&quot;b&quot;]}]}```- Only supports boolean logic. json-logic supports all types of operations (addition, subtraction, etc.), not just boolean logic</longdescription>
</pkgmetadata>