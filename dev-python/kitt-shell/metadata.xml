<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># KittKitt is a container based portable shell environment manager.Build, spawn, push and distribute your shell, with your tools, and your config, anywhere.## Demo![](./docs/static/example01.png)## InstallationFirst, make sure you have python3 and Docker installed.To use kitt as a non root user, you should be in docker group : `sudo usermod -aG docker USER`.```➜  pip install kitt-shell```.. or just run `kitt.py` from sources.&gt; ## How to use KittFill a configuration file (see [examples folder](./examples)) either in `toml` or `json` format. Feed it to Kitt and let the magic happend !```➜  kitt build examples/devops.conf devops✓ Build success !➜  kitt run devopsuser@kitt:~# ```Not your computer but you need your tools ? No problem.```➜  kitt pull senges/kitt devops✓  Image devops pull done➜  kitt run devopsuser@kitt:~# ```Few commands workflow examples are available in [examples folder](./examples/commands.md).### Kitt CLI reference```➜  kitt --helpUsage: kitt [OPTIONS] COMMAND [ARGS]...  main command groupOptions:  -h, --help   Show this message and exit.  -d, --debug  Debug modeCommands:  build    Build image from source config file  inspect  Show image metadata  list     List local images  patch    Patch image runtime metadata  prune    Prune local images  pull     Pull image and exit  push     Push kitt image to registry  refresh  Pull latest version of local images  remove   Remove local image  run      Run kitt shell  version  Show version```## Configuration### Basics```toml[options]docker_in_docker = false    # Share docker socketforward_x11 = false         # Configure x11 forward[workspace]image = &quot;ubuntu:22.04&quot;  # OCI System Imagetools = []              # Nix toolsuser = &quot;user&quot;           # Username inside containerhostname = &quot;kitt&quot;       # Container hostnamedefault_shell = &quot;bash&quot;  # One of bash, zsh, sh, dashpaths = []              # Additional folders in $PATH# [[workspace.envs]]  # Container exported ENV (multiple)# name = &quot;&quot;# value = &quot;&quot;# [[workspace.volumes]]   # Container bind volumes (multiple)# host = &quot;&quot;   # Local directory# bind = &quot;&quot;   # Bin inside container# mode = &quot;&quot;   # Mode (default is 'rw')# [secrets]# [[secrets.files]]   # File entry (multiple)# src = &quot;&quot;                    # Host path# dest = &quot;&quot;                   # Container path# [[secrets.envs]]   # Env variable (multiple)# name = &quot;&quot;                   # Variable name# value = &quot;&quot;                  # Secret value```For more details about **Nix tools**, see [tools installation](#Tools-installation) section.### SecretsKitt is able to embed password encrypted secrets (files and env vars) inside an image.A password prompt will be shown at container runtime to decrypt and restore the secrets :* Env vars are loaded inside the container* Files are restored insed a tempFS destoyed at container exit&gt; **Warning**  &gt; Kitt vault uses SHA256(password) as AES encryption key.&gt; Use with caution, weak password could lead to sensitive information leak.### PluginsKitt offers multiple _optional_ plugins to improve environment customization.| Plugin     | Description                           | Requires ||------------|---------------------------------------|----------|| _zsh_      | install and setup Zsh (oh-my-zsh)     |          || _copy_     | copy local files inside container     |          || _download_ | download ressources inside container  | curl     || _git_      | clone git repository inside container | git      || _pip_      | install pip package                   | pip      |See [PLUGINS.md](./PLUGINS.md) for configuration details.**Need another plugin ?**Add jinja formated plugin inside `kitt/static/plugins` folder and use it in your config file under the same name.## How does it work ?Kitt will build an [OCI Container Image](https://github.com/opencontainers/image-spec) (compatible with Docker, Podman, ...), according to the provided configuration file. It will install requested tools inside, setup your desired shell(s), shortcuts, completion, plugins, and add your configuration files.At runtime, Kitt will create a container from this image, spawn a shell inside and attach it to your current TTY. ### Tools installationFor the tool installation part, Kitt relies on the huge 80k+ packages [NixOS Store](https://search.nixos.org). It does provide an uniform OS agnostic way of installing tools inside containers, and can be extended if necessary.Thanks to Nix, you can effortlessly change your base image OS, anytime.### Containerization&gt; At first, kitt was meant to run with Podman as it is rootless by design (which solves uig/gid mapping problems).  &gt; However, for multiple reasons, it should now mainly run with Docker.&gt; Podman support is in progress, see branch `feat/podman`.**What is UID/GID reflexion ?**&gt; TL;DR: It's great for shared folders file rigths.Kitt uses [fixuid](https://github.com/boxboat/fixuid) project to reflect host user UID/GID inside the container. What does that means ?As Docker containers run as root (except rootless ones, but still), if you have a shared volumebetween your host and container, files created inside the container will be owned by root on the host. This mecanism makes working with volumes for user owned files very unconvenient.With `fixuid`, the user inside the container will have the exact same real `uid` as your current host user. So if you bind a directory (your `home` for example), any file created by the user inside the container will be own by your user on the host side instead of root.</longdescription>
</pkgmetadata>