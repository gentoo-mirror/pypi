<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================== Tornado OpenAPI 3===================.. image:: https://travis-ci.com/correl/tornado-openapi3.svg?branch=master    :target: https://travis-ci.com/correl/tornado-openapi3.. image:: https://codecov.io/gh/correl/tornado-openapi3/branch/master/graph/badge.svg?token=CTYWWDXTL9    :target: https://codecov.io/gh/correl/tornado-openapi3.. image:: https://readthedocs.org/projects/tornado-openapi3/badge/    :target: https://tornado-openapi3.readthedocs.io.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/blackTornado OpenAPI 3 request and response validation library.Provides integration between the `Tornado`_ web framework and `Openapi-core`_library for validating request and response objects against an `OpenAPI 3`_specification.Full documentation is available at https://tornado-openapi3.readthedocs.ioUsage=====Adding validation to request handlers-------------------------------------.. code:: python   import tornado.ioloop   import tornado.web   from tornado_openapi3.handler import OpenAPIRequestHandler   class MyRequestHandler(OpenAPIRequestHandler):       spec_dict = {           &quot;openapi&quot;: &quot;3.0.0&quot;,           &quot;info&quot;: {               &quot;title&quot;: &quot;Simple Example&quot;,               &quot;version&quot;: &quot;1.0.0&quot;,           },           &quot;paths&quot;: {               &quot;/&quot;: {                   &quot;get&quot;: {                       &quot;responses&quot;: {                           &quot;200&quot;: {                               &quot;description&quot;: &quot;Index&quot;,                               &quot;content&quot;: {                                   &quot;text/html&quot;: {                                       &quot;schema&quot;: {&quot;type&quot;: &quot;string&quot;},                                   }                               },                           }                       }                   }               }           },       }   class RootHandler(MyRequestHandler):       async def get(self):           self.finish(&quot;Hello, World!&quot;)   if __name__ == &quot;__main__&quot;:       app = tornado.web.Application([(r&quot;/&quot;, RootHandler)])       app.listen(8888)       tornado.ioloop.IOLoop.current().start()Validating responses in tests-----------------------------.. code:: python   import unittest   import tornado.web   from tornado_openapi3.testing import AsyncOpenAPITestCase   class RootHandler(tornado.web.RequestHandler):       async def get(self):           self.finish(&quot;Hello, World!&quot;)   class BaseTestCase(AsyncOpenAPITestCase):       spec_dict = {           &quot;openapi&quot;: &quot;3.0.0&quot;,           &quot;info&quot;: {               &quot;title&quot;: &quot;Simple Example&quot;,               &quot;version&quot;: &quot;1.0.0&quot;,           },           &quot;paths&quot;: {               &quot;/&quot;: {                   &quot;get&quot;: {                       &quot;responses&quot;: {                           &quot;200&quot;: {                               &quot;description&quot;: &quot;Index&quot;,                               &quot;content&quot;: {                                   &quot;text/html&quot;: {                                       &quot;schema&quot;: {&quot;type&quot;: &quot;string&quot;},                                   }                               },                           }                       }                   }               }           },       }       def get_app(self):           return tornado.web.Application([(r&quot;/&quot;, RootHandler)])       def test_root_endpoint(self):           response = self.fetch(&quot;/&quot;)           self.assertEqual(200, response.code)           self.assertEqual(b&quot;Hello, World!&quot;, response.body)   if __name__ == &quot;__main__&quot;:       unittest.main()Contributing============Getting Started---------------This project uses `Poetry`_ to manage its dependencies. To set up a localdevelopment environment, just run:.. code:: sh    poetry installFormatting Code---------------The `Black`_ tool is used by this project to format Python code. It is includedas a development dependency, and should be run on all committed code. To formatcode prior to committing it and submitting a PR, run:.. code:: sh    poetry run black .Running Tests-------------`pytest`_ is the preferred test runner for this project. It is included as adevelopment dependency, and is configured to track code coverage, `Flake8`_style compliance, and `Black`_ code formatting. Tests can be run in yourdevelopment environment by running:.. code:: sh    poetry run pytestAdditionally, tests can be run using `tox`_, which will run the tests usingmultiple versions of both Python and Tornado to ensure broad compatibility.Configuring Hypothesis^^^^^^^^^^^^^^^^^^^^^^Many of the tests make use of `Hypothesis`_ to specify their expectations andgenerate a large volume of randomized test input. Because of this, the tests maytake a long time to run on slower computers. Two profiles are defined forHypothesis to use which can be selected by setting the ``HYPOTHESIS_PROFILE``environment variable to one of the following values:``ci``  Runs tests using the default Hypothesis settings (100 examples per test) and  no completion deadline.``dev``  The fastest profile, meant for local development only. Uses only 10 examples  per test with no completion deadline... _Black: https://github.com/psf/black.. _Flake8: https://flake8.pycqa.org/.. _Hypothesis: https://hypothesis.readthedocs.io/.. _OpenAPI 3: https://swagger.io/specification/.. _Openapi-core: https://github.com/p1c2u/openapi-core.. _Poetry: https://python-poetry.org/.. _Tornado: https://www.tornadoweb.org/.. _pytest: https://pytest.org/.. _tox: https://tox.readthedocs.io/</longdescription>
</pkgmetadata>