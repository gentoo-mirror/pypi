<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># stepcountA Python package to estimate step counts from accelerometer data.The algorithm is tuned for wrist-worn AX3 data collected at 100 Hz, using data from the open-source [OxWalk Dataset](https://ora.ox.ac.uk/objects/uuid:19d3cb34-e2b3-4177-91b6-1bad0e0163e7), making it compatible with the [UK Biobank Accelerometer Dataset](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0169649). Check out the 5-minute video tutorial to get started: [https://www.youtube.com/watch?v=FPb7H-jyRVQ](https://www.youtube.com/watch?v=FPb7H-jyRVQ).## Getting started### Prerequisite- Python 3.8 or greater    ```console    $ python --version  # or python3 --version    ```- Java 8 (1.8.0) or greater    ```console    $ java -version    ```### Install (Windows)For Windows users, we recommend running stepcount using the **Anaconda Prompt** from **Miniconda** via the following steps:1. Download [Miniconda](https://docs.conda.io/en/latest/miniconda.html) (light-weight version of Anaconda). Choose **Miniconda3 Windows 64-bit**.2. Install. Use the default recommended settings.3. From the Start menu, search and open the **Anaconda Prompt**.```console$ pip install stepcount```For further information running Anaconda on Windows using virtual environments, see [this guide](anaconda_on_windows.md).### Install (Linux)&lt;!-- ```console$ pip install git+https://github.com/OxWearables/stepcount.git@master#egg=stepcount``` --&gt;&lt;!-- ```console$ pip install git+ssh://git@github.com/OxWearables/stepcount.git@master#egg=stepcount``` --&gt;```console$ pip install stepcount```## Usage```bash# Process an AX3 file$ stepcount sample.cwa# Or an ActiGraph file$ stepcount sample.gt3x# Or a GENEActiv file$ stepcount sample.bin# Or a CSV file (see data format below)$ stepcount sample.csv```Output:```consoleSummary-------{    &quot;Filename&quot;: &quot;sample.cwa&quot;,    &quot;Filesize(MB)&quot;: 65.1,    &quot;Device&quot;: &quot;Axivity&quot;,    &quot;DeviceID&quot;: 2278,    &quot;ReadErrors&quot;: 0,    &quot;SampleRate&quot;: 100.0,    &quot;ReadOK&quot;: 1,    &quot;StartTime&quot;: &quot;2013-10-21 10:00:07&quot;,    &quot;EndTime&quot;: &quot;2013-10-28 10:00:01&quot;,    &quot;TotalWalking(min)&quot;: 655.75,    &quot;TotalSteps&quot;: 43132,    ...}Estimated Daily Steps---------------------              stepstime2013-10-21     53682013-10-22     76342013-10-23    10009...Output: outputs/sample/```### Output filesBy default, output files will be stored in a folder named after the input file, `outputs/{filename}/`, created in the current working directory. You can change the output path with the `-o` flag:```console$ stepcount sample.cwa -o /path/to/some/folder/```The following output files are created:- *Info.json* Summary info, as shown above.- *Steps.csv* Raw time-series of step counts- *HourlySteps.csv* Hourly step counts- *DailySteps.csv* Daily step counts- *HourlyStepsAdjusted.csv* Like HourlySteps but accounting for missing data (see section below).- *DailyStepsAdjusted.csv* Like DailySteps but accounting for missing data (see section below).### Crude vs. Adjusted EstimatesAdjusted estimates are provided that account for missing data.Missing values in the time-series are imputed with the mean of the same timepoint of other available days.For adjusted totals and daily statistics, 24h multiples are needed and will be imputed if necessary.Estimates will be NaN where data is still missing after imputation.### Processing CSV filesIf a CSV file is provided, it must have the following header: `time`, `x`, `y`, `z`. Example:```consoletime,x,y,z2013-10-21 10:00:08.000,-0.078923,0.396706,0.9177592013-10-21 10:00:08.010,-0.094370,0.381479,0.9335802013-10-21 10:00:08.020,-0.094370,0.366252,0.9019382013-10-21 10:00:08.030,-0.078923,0.411933,0.901938...```### Processing multiple files#### WindowsTo process multiple files you can create a text file in Notepad which includes one line for each file you wish to process, as shown below for *file1.cwa*, *file2.cwa*, and *file2.cwa*.Example text file *commands.txt*: ```consolestepcount file1.cwa &amp;stepcount file2.cwa &amp;stepcount file3.cwa :END````Once this file is created, run `cmd &lt; commands.txt` from the terminal.#### LinuxCreate a file *command.sh* with:```consolestepcount file1.cwastepcount file2.cwastepcount file3.cwa```Then, run `bash command.sh` from the terminal.#### Collating outputsA utility script is provided to collate outputs from multiple runs:```consolestepcount-collate-outputs outputs/```This will collate all *-Info.json files found in outputs/ and generate a CSV file.## ValidationValidation for this algorithm is presented in a preprint on medRxiv at: [https://www.medrxiv.org/content/10.1101/2023.02.20.23285750v1](https://www.medrxiv.org/content/10.1101/2023.02.20.23285750v1). ## Citing our workWhen using this tool, please consider citing the works listed in [CITATION.md](CITATION.md).## LicenceSee [LICENSE.md](LICENSE.md).## AcknowledgementsWe would like to thank all our code contributors, manuscript co-authors, and research participants for their help in making this work possible.</longdescription>
</pkgmetadata>