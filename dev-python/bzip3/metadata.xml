<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;&lt;i&gt;✨ python-bz3 ✨ &lt;/i&gt;&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;The python binding for &lt;a href=&quot;https://github.com/kspalaiologos/bzip3/tree/master&quot;&gt;bzip3&lt;/a&gt; with parallel support&lt;/h3&gt;[![pypi](https://img.shields.io/pypi/v/bzip3.svg)](https://pypi.org/project/bzip3/)![python](https://img.shields.io/pypi/pyversions/bzip3)![implementation](https://img.shields.io/pypi/implementation/bzip3)![wheel](https://img.shields.io/pypi/wheel/bzip3)![license](https://img.shields.io/github/license/synodriver/python-bz3.svg)![action](https://img.shields.io/github/workflow/status/synodriver/python-bz3/build%20wheel)### install```bashpip install bzip3```### Usage```pythonfrom bz3 import compress_file, decompress_file, test_file, compress, decompressimport bz3with open(&quot;test_inp.txt&quot;, &quot;rb&quot;) as inp, open(&quot;compressed.bz3&quot;, &quot;wb&quot;) as out:    compress_file(inp, out, 1000 * 1000)with open(&quot;compressed.bz3&quot;, &quot;rb&quot;) as inp:    test_file(inp, True)    with open(&quot;compressed.bz3&quot;, &quot;rb&quot;) as inp, open(&quot;output.txt&quot;, &quot;wb&quot;) as out:    decompress_file(inp, out)print(decompress(compress(b&quot;12121&quot;)))with bz3.open(&quot;test.bz3&quot;, &quot;wt&quot;, encoding=&quot;utf-8&quot;, num_threads=4) as f:    f.write(&quot;test data&quot;)with bz3.open(&quot;test.bz3&quot;, &quot;rt&quot;, encoding=&quot;utf-8&quot;, num_threads=4) as f:    print(f.read())```- use ```BZ3_USE_CFFI``` env var to specify a backend- ```num_threads``` is only available on cython backend which have openmp support### Public functions```pythonfrom typing import IO, Optional, Uniondef compress_file(input: IO, output: IO, block_size: int) -&gt; None: ...def decompress_file(input: IO, output: IO) -&gt; None: ...def recover_file(input: IO, output: IO) -&gt; None: ...def test_file(input: IO, should_raise: bool = ...) -&gt; bool: ...class BZ3File:    def __init__(self, filename, mode: str = ..., block_size: int = ..., num_threads: int = ..., ignore_error: bool = False) -&gt; None: ...    def close(self) -&gt; None: ...    @property    def closed(self): ...    def fileno(self): ...    def seekable(self): ...    def readable(self): ...    def writable(self): ...    def peek(self, n: int = ...): ...    def read(self, size: int = ...): ...    def read1(self, size: int = ...): ...    def readinto(self, b): ...    def readline(self, size: int = ...): ...    def readlines(self, size: int = ...): ...    def write(self, data): ...    def writelines(self, seq): ...    def seek(self, offset, whence=...): ...    def tell(self): ...def open(filename, mode: str = ..., block_size: int = ..., encoding: str = ..., errors: str = ..., newline: str = ..., num_threads: int = 1, ignore_error: bool = False) -&gt; BZ3File: ...def compress(data: bytes, block_size: int = ..., num_threads: int = 1) -&gt; bytes: ...def decompress(data: bytes, num_threads: int = 1) -&gt; bytes: ...def libversion() -&gt; str: ... # Get bzip3 versiondef bound(inp: int) -&gt; int: ... # Return the recommended size of the output buffer for the compression functions.# High-level api# Compress a block of data into out buffer, zerocopy, both parameters accept objects which implements buffer-protocol.# out must be writabel, size of out must be at least equal to bound(len(inp))def compress_into(inp: Union[bytes, bytearray], out: bytearray) -&gt; int: ...# Decompress a block of data into out buffer, zerocopydef decompress_into(inp: Union[bytes, bytearray], out: bytearray) -&gt; int: ...```- Note, high-level api won't work with low-level api, see [this](https://github.com/kspalaiologos/bzip3/issues/70)</longdescription>
</pkgmetadata>