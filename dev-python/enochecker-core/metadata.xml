<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># enochecker_core [![PyPI version](https://badge.fury.io/py/enochecker-core.svg)](https://pypi.org/project/enochecker-core) [![Build Status](https://github.com/enowars/enochecker_core/actions/workflows/pythonapp.yml/badge.svg?branch=main)](https://github.com/enowars/enochecker_core/actions/workflows/pythonapp.yml) ![Lines of code](https://tokei.rs/b1/github/enowars/enochecker_core)This package provides dataclasses and enums adhering to the [specification](https://github.com/enowars/specification).Since the specification defines keys in camel case, whereas this package follows python naming convention and has keys in snake case, the keys need to be transformed when sending/receiving them over the wire. The recommended way is to use the `jsons` (not `json`) package.Example:```&gt;&gt;&gt; from enochecker_core import CheckerTaskResult, CheckerResultMessage&gt;&gt;&gt; import jsons&gt;&gt;&gt; jsons.dumps(CheckerResultMessage(result=CheckerTaskResult.OK, message=&quot;some message&quot;), use_enum_name=False, key_transformer=jsons.KEY_TRANSFORMER_CAMELCASE)'{&quot;message&quot;: &quot;some message&quot;, &quot;result&quot;: &quot;OK&quot;}'&gt;&gt;&gt; jsons.loads('{&quot;message&quot;: &quot;some message&quot;, &quot;result&quot;: &quot;OK&quot;}', CheckerResultMessage, key_transformer=jsons.KEY_TRANSFORMER_SNAKECASE, strict=True)CheckerResultMessage(result=&lt;CheckerTaskResult.OK: 'OK'&gt;, message='some message')```</longdescription>
</pkgmetadata>