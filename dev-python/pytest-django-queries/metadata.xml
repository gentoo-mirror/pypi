<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align='center'&gt;  &lt;h1&gt;pytest-django-queries&lt;/h1&gt;  &lt;p&gt;Generate performance reports from your django database performance tests  (inspired by &lt;a href='https://coverage.readthedocs.io/en/v4.5.x/'&gt;coverage.py&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;    &lt;a href='https://travis-ci.org/NyanKiyoshi/pytest-django-queries/'&gt;      &lt;img src='https://travis-ci.org/NyanKiyoshi/pytest-django-queries.svg?branch=master' alt='Requirement Status' /&gt;    &lt;/a&gt;    &lt;a href='https://codecov.io/gh/NyanKiyoshi/pytest-django-queries'&gt;      &lt;img src='https://codecov.io/gh/NyanKiyoshi/pytest-django-queries/branch/master/graph/badge.svg' alt='Coverage Status' /&gt;    &lt;/a&gt;    &lt;a href='https://pytest-django-queries.readthedocs.io/en/latest/?badge=latest'&gt;      &lt;img src='https://readthedocs.org/projects/pytest-django-queries/badge/?version=latest' alt='Documentation Status' /&gt;    &lt;/a&gt;    &lt;a href='https://pypi.python.org/pypi/pytest-django-queries'&gt;      &lt;img src='https://img.shields.io/pypi/v/pytest-django-queries.svg' alt='Version' /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/pytest-django-queries/1.2rc1/&quot;&gt;      &lt;img src=&quot;https://img.shields.io/badge/pypi%20unstable-v1.2rc1-FF0000.svg&quot; alt=&quot;Latest Unstable on pypi&quot;&gt;    &lt;/a&gt;  &lt;/p&gt;  &lt;p&gt;    &lt;a href='https://github.com/NyanKiyoshi/pytest-django-queries/compare/v1.2.0...master'&gt;      &lt;img src='https://img.shields.io/github/commits-since/NyanKiyoshi/pytest-django-queries/v1.2.0.svg' alt='Commits since latest release' /&gt;    &lt;/a&gt;    &lt;a href='https://pypi.python.org/pypi/pytest-django-queries'&gt;      &lt;img src='https://img.shields.io/pypi/pyversions/pytest-django-queries.svg' alt='Supported versions' /&gt;    &lt;/a&gt;    &lt;a href='https://pypi.python.org/pypi/pytest-django-queries'&gt;      &lt;img src='https://img.shields.io/pypi/implementation/pytest-django-queries.svg' alt='Supported implementations' /&gt;    &lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;## UsageInstall `pytest-django-queries`, write your pytest tests and mark anytest that should be counted or use the `count_queries` fixture.Note: to use the latest development build, use `pip install --pre pytest-django-queries````pythonimport pytest@pytest.mark.count_queriesdef test_query_performances():    Model.objects.all()# Or...def test_another_query_performances(count_queries):    Model.objects.all()```Each test file and/or package is considered as a category. Each test inside a &quot;category&quot;compose its data, see [Visualising Results](#visualising-results) for more details.You will find the [full documentation here](https://pytest-django-queries.readthedocs.io/).&lt;!-- TODO: insert a graphic here to explain how it works --&gt;## Recommendation when Using FixturesYou might end up in the case where you want to add fixtures that are generating queriesthat you don't want to be counted in the resultsâ€“or simply, you want to use the`pytest-django` plugin alongside of `pytest-django-queries`, which will generateunwanted queries in your results.For that, you will want to put the `count_queries` fixture as the last fixture to execute.But at the same time, you might want to use the the power of pytest markers, to separatethe queries counting tests from other tests. In that case, you might want to do somethinglike this to tell the marker to not automatically inject the `count_queries` fixture intoyour test:```pythonimport pytest@pytest.mark.count_queries(autouse=False)def test_retrieve_main_menu(fixture_making_queries, count_queries):    pass```Notice the usage of the keyword argument `autouse=False` and the `count_queries` fixturebeing placed last.## Using pytest-django alongside of pytest-django-queriesWe recommend you to do the following when using `pytest-django`:```pythonimport pytest@pytest.mark.django_db@pytest.mark.count_queries(autouse=False)def test_retrieve_main_menu(any_fixture, other_fixture, count_queries):    pass```## Integrating with GitHubTBA.## Testing LocallySimply install `pytest-django-queries` through pip and run yourtests using `pytest`. A report should have been generated in yourcurrent working directory in a file called with `.pytest-queries`.Note: to override the save path, pass the `--django-db-bench PATH` option to pytest.## Visualising ResultsYou can generate a table from the tests results by using the `show` command:```shelldjango-queries show```You will get something like this to represent the results:```shell+---------+--------------------------------------+| Module  |          Tests                       |+---------+--------------------------------------+| module1 | +-----------+---------+------------+ ||         | | Test Name | Queries | Duplicated | ||         | +-----------+---------+------------+ ||         | |   test1   |    0    |     0      | ||         | +-----------+---------+------------+ ||         | |   test2   |    1    |     0      | ||         | +-----------+---------+------------+ |+---------+--------------------------------------+| module2 | +-----------+---------+------------+ ||         | | Test Name | Queries | Duplicated | ||         | +-----------+---------+------------+ ||         | |   test1   |   123   |     0      | ||         | +-----------+---------+------------+ |+---------+--------------------------------------+```## Exporting the Results (HTML)For a nicer presentation, use the `html` command, to export the results as HTML.```shelldjango-queries html```It will generate something [like this](https://pytest-django-queries.readthedocs.io/en/latest/html_export_results.html).## Comparing ResultsYou can run `django-queries backup` (can take a path, optionally) afterrunning your tests then rerun them. After that, you can run `django-queries diff`to generate results looking like this:&lt;a href='./docs/_static/diff_results.png'&gt;  &lt;img src='./docs/_static/diff_results.png' alt='screenshot' width='500px' /&gt;&lt;/a&gt;## DevelopmentFirst of all, clone the project locally. Then, install it using the below command.```shell./setup.py develop```After that, you need to install the development and testing requirements. For that,run the below command.```shellpip install -e .[test]```</longdescription>
</pkgmetadata>