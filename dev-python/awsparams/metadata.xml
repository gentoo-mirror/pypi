<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NoteVersion 1 of this library is drastically different than previous versions.The CLI Application hasn't changed but the library it uses has.Please pay extra attention to the examples below or look at the underlying class for more information.# Why this script?The current (Jul 2017) AWS Console for the Systems Manager ParameterStore is good for adding and editing the values of parameters, butmisses key productivity functions like copying (especially en mass),renaming, etc. The current `aws ssm` CLI is very similar infunctionality to the AWS Console.This script is to automate a lot of the manual work currently neededwith the existing AWS-provided UIs.# DocsFull documentation can be found here: https://awsparams.readthedocs.io/en/latest/# Installation  - AWSParams requires Python 3.6+  - Depending on your Python3.6 install either `pip install awsparams` or `pip3 install awsparams`    - If you're on windows, make sure that `C:\Users\{your user}\AppData\Roaming\Python\{your python version}\Scripts` has been added to your user path.# Usage## Library:```pythonfrom awsparams import AWSParams # Using default Profileaws_params = AWSParams()# Using a Custome Profileaws_params = AWSParams('MyProfile')#get a single parameterparam = get_parameter('test1')# ParamResult(Name='test1', Value='test123', Type='SecureString')#ParamResult is a named tuple with properties Name, Value, Typeparam.Name # 'test1'param.Value # 'test123'param.Type # 'SecureString'# get multiple parameters with a prefixparams = get_all_parameters(prefix=&quot;testing.testing.&quot;)# [ParamResult(Name='testing', Value='1234', Type='String'),#  ParamResult(Name='testing2', Value='1234', Type='String')]# get multiple parameters by pathparams = get_all_parameters(prefix=&quot;/testing/testing/&quot;, by_path=True)# [ParamResult(Name='testing', Value='1234', Type='String'),#  ParamResult(Name='testing2', Value='1234', Type='String')]# get multiple parameters by pathparams = get_all_parameters(prefix=&quot;/testing/testing/&quot;, by_path=True, trim_name=False)# [ParamResult(Name='/testing/testing/testing', Value='1234', Type='String'),#  ParamResult(Name='/testing/testing/testing2', Value='1234', Type='String')]# get just a parameter valuevalue = get_parameter_value('test1')# test123```For more detailed examples of usage as a library see the cli implementation [here](https://github.com/byu-oit/awsparams/blob/master/awsparams/cli.py).## CLI application:Usage can be referenced by running `awsparams --help` or `awsparamssubcommand --help` commands:    Usage: awsparams [OPTIONS] COMMAND [ARGS]...        Options:    --version  Show the version and exit.    --help     Show this message and exit.        Commands:    cp   Copy a parameter, optionally across accounts    ls   List Paramters, optional matching a specific...    mv   Move or rename a parameter    new  Create a new parameter    rm   Remove/Delete a parameter    set  Edit an existing parameter# Command Examples## ls usagels names only: `awsparams ls`ls with values no decryption: `awsparams ls --values` or `awsparams ls -v`ls with values and decryption: `awsparams ls --with-decryption`ls by prefix: `awsparams ls appname.prd`ls with values, formatted as an environment variable string: `awsparams ls -v --env-format &lt;prefix&gt;` or `awsparams ls -v -f &lt;prefix&gt;`&gt; *`--env-format`/`-f` is used for easy quickly pasting into run configurations in IDE's*## new usagenew interactively: `awsparams new`new semi-interactively: `awsparams new --name appname.prd.username`new non-interactive: `awsparams new --name appname.prd.usrname --value parameter_value--description parameter_descripton`## cp usagecopy a parameter: `awsparams cp appname.prd.username newappname.prd.username`copy set of parameters with prefix appname.dev. to appname.prd.: `awsparams cp appname.dev. appname.prd. --prefix`copy set of parameters starting with prefix repometa-generator.prdoverwrite existing parameters accross different accounts: `awsparams cp repometa-generator.prd --src_profile=dev --dst_profile=trn--prefix=True`copy single parameters accross different accounts: `awsparams cp appname.dev.username appname.trb.us`</longdescription>
</pkgmetadata>