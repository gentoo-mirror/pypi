<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># clientcentral-api-python[![version](https://img.shields.io/badge/version-12.4.0-brightgreen.svg)]()[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)# Install```bashpip install clientcentral --user```# Upgrading```bashpip install --user --upgrade clientcentral```A specific version can also be installed by adding the tag:```bashpip install --user --upgrade clientcentral==12.4.0```# RequirementsThis library was built and tested on `Python 3.11` a minimal Python version of `Python 3.7.x` is required.`Python 2` is not supported.# Features- Object Oriented API- Querying- Lazy loading (Events)# ConfigThe token that will be used can either be sent as an environement variable:```bashCC_TOKEN=&lt;TOKEN&gt; python3 main.py```or parsed to the constructor:```pythoncc = ClientCentral(production=True, token=&quot;123&quot;)```# Example usage```pythonimport clientcentral.ticketformatting as tffrom clientcentral.clientcentral import ClientCentral# Production 'false' will run on qa.cccc = ClientCentral(production=True)# This will create a ticket in the Managed Services workspace.# In this example custom_fields {&quot;id&quot;: 17, &quot;values&quot;: 0} refer to &quot;Security related&quot; -&gt; &quot;No&quot;# Theses values can be found by following the following instructions: https://clientcentral.io/support/cc/kb/articles/1661-tickets-api-creating-ticketsticket = cc.create_ticket(subject=&quot;New awesome subject&quot; ,                          description=&quot;this is an awesome ticket&quot;,                          account_vp=1,                          customer_user_vp=1,                          project_id=8,                          workspace_id=16,                          custom_fields_attributes=[{                              &quot;id&quot;: 17,                              &quot;values&quot;: 0                          }, {                              &quot;id&quot;: 75,                              &quot;values&quot;: 363                          }])ticket.comment(&quot;&lt;p&gt;&quot; + tf.bold(&quot;I am BOLD&quot;) + &quot;&lt;/p&gt;&quot;)# Get the ticket's creatorprint(&quot;Ticket creator: &quot; + ticket.owner.name)# Get the ticket's statusprint(&quot;Ticket status:&quot; + ticket.status.name)# Print the ticket's descriptionprint(&quot;Ticket description: &quot; + ticket.description)# Add a user to watchersticket.add_user_watcher(14012) # 14012 refers to the user id in this case its &quot;Thomas Scholtz&quot;# Change the description of the ticketticket.description = &quot;New and improved ticket description&quot;# Finally after making all changes commit them.ticket.commit()for comment in ticket.comments:    if comment.created_by_user:        print(&quot;Comment from: &quot; + comment.created_by_user.name + &quot; says: &quot; + comment.comment)# Ticket events, change_events and comments are lazy loaded.for change_event in ticket.change_events:    if change_event.created_by_user:        print(&quot;Change by: &quot; + str(change_event.created_by_user.name))    for change in change_event.changes:        print(&quot;Changed: &quot; + str(change.name) + &quot; from: &quot; + str(change.from_value) + &quot; to: &quot; + str(change.to_value))```# Example query```pythonfrom clientcentral.clientcentral import ClientCentralimport clientcentral.query as operators# Production 'false' will run on qa.clientcentral.iocc = ClientCentral(production=True)# This will return a list of all tickets that are:# open,# in workspace with id 87,# created by the user with the email 'thomas@labs.epiuse.com',# has not been updated since 2019-02-20,# subject contains 'New awesome subject'tickets = cc.query_tickets().filter_by(            operators.and_( operators.statement(&quot;status.open&quot;),                            operators.comparison(&quot;workspace_id&quot;, &quot;=&quot;, &quot;87&quot;),                            operators.comparison(&quot;created_by_user.email&quot;, &quot;=&quot;, &quot;'thomas@labs.epiuse.com'&quot;),                            operators.comparison(&quot;updated_at&quot;, &quot;&lt;&quot;, &quot;'2019-02-20'&quot;),                            operators.comparison(&quot;subject&quot;, &quot;CONTAINS&quot;, &quot;'New awesome subject'&quot;))                           ).all()for ticket in tickets:    # Get the ticket's creator    print(&quot;Ticket creator: &quot; + ticket.owner.name)    # Get the ticket's status    print(&quot;Ticket status:&quot; + ticket.status.name)    # Print the ticket's description    print(&quot;Ticket description: &quot; + ticket.description)    # Ticket events, change_events and comments are lazy loaded.    for comment in ticket.comments:        if comment.created_by_user:            print(&quot;Comment from: &quot; + comment.created_by_user.name +                  &quot; says: &quot; + comment.comment)    for change_event in ticket.change_events:        if change_event.created_by_user:            print(&quot;Change by: &quot; + str(change_event.created_by_user.name))        for change in change_event.changes:            print(&quot;Changed: &quot; + str(change.name) + &quot; from: &quot; +                  str(change.from_value) + &quot; to: &quot; + str(change.to_value))```# ContributingFor this repository we are enforcing the use of `Commitizen`. Respective merge requests require to follow the format created from `Commitizen`. More info can be found at: http://commitizen.github.io/cz-cli/</longdescription>
</pkgmetadata>