<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://research.virtualfortknox.de&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;    &lt;img src=&quot;https://research.virtualfortknox.de/static/cms/img/vfk_research_logo.png&quot; alt=&quot;VFK Research Logo&quot; height=&quot;70&quot; &gt;  &lt;/a&gt;&lt;/p&gt;# MSB websocket client library for Python![Build Status](https://github.com/research-virtualfortknox/msb-client-websocket-python/actions/workflows/build.yml/badge.svg)[![PyPI version](https://badge.fury.io/py/msb-client-websocket-python.svg)](https://badge.fury.io/py/msb-client-websocket-python)[![Coverage Status](https://coveralls.io/repos/github/research-virtualfortknox/msb-client-websocket-python/badge.svg?branch=feature-coveralls)](https://coveralls.io/github/research-virtualfortknox/msb-client-websocket-python?branch=feature-coveralls)[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fresearch-virtualfortknox%2Fmsb-client-websocket-python.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fresearch-virtualfortknox%2Fmsb-client-websocket-python?ref=badge_shield)**Compatibility Matrix**Client version compatibility to MSB versions:| | **1.5.x-RELEASE** | **1.6.x-RELEASE** ||---|:---:|:---:|| 1.0.x       | x | x |## WelcomeIf you want to contribute, please read the [Contribution Guidelines](.github/CONTRIBUTING.md).If you want to test this client by using its sources and a sample app, read the [App Sample](doc/app_sample.md).If you want to know how to use this client in your own project, read below.## What is VFK MSBTODO: Link to general documentation about VFK MSBYou can use this client to connect a python app to VFK MSB.## Prerequisites* Setup [Python](https://www.python.org/downloads/) **version 3.8.x**     * last client version supporting Python 2.7 is v1.0.8    * last client version supporting Python 3.6 is v1.0.11    * last client version supporting Python 3.7 is v1.0.13* MSB client installed using PyPi* Optional: Use pipenv to run your python app in a virtual environment to avoid dependency isssues with other appsInstall MSB client from PyPi```shpip install msb-client-websocket-python```Import to your applicaton```pythonfrom msb_client.ComplexDataFormat import ComplexDataFormatfrom msb_client.DataType import DataTypefrom msb_client.Event import Eventfrom msb_client.Function import Functionfrom msb_client.MsbClient import MsbClient```## Create self-descriptionThe figure below shows a minimal required `self-description model` of a smart object / application.Every smart object / application requires (must have) a uuid and a token.The uuid is competent for identificationand the token is used to verify the smart object / application for its owner on the MSB side.![Self Description](doc/images/self-description.png)TODO: Here you can find more information aboutthe `self-description structure` and `supported data formats`.### Alternative 1 - By application.propertiesAdd the main description by adding an `application.poperties` file to the root of your project:Generate the uuid e.g. by a tool like https://www.uuidgenerator.net/```shmsb.uuid=76499d88-34cf-4836-8cc1-7e0d9c54dacxmsb.name=YourSmartObjectNamemsb.description=YourSmartObjectDescmsb.token=5e0d9c54dacxmsb.type=SmartObject```When initializing your msb client instance, the `application.properties` file will be loaded.```pythonmyMsbClient = MsbClient()```You can also set a custom path to the `application.properties` file.```pythonmyMsbClient = MsbClient(applicationPropertiesCustomPath=&quot;./your/path/to/application.properties&quot;)```### Alternative 2 - By constructorIf you do not provide an application.properties file, use the constructorto define the basic self description.```pythonSERVICE_TYPE = &quot;SmartObject&quot;SO_UUID = str(uuid.uuid1()) # you can type in an own uuid here instead of generating itSO_NAME = &quot;YourSmartObjectName&quot;SO_DESCRIPTION = &quot;YourSmartObjectDesc&quot;  SO_TOKEN = SO_UUID[-6:]myMsbClient = MsbClient(    SERVICE_TYPE,    SO_UUID,    SO_NAME,    SO_DESCRIPTION,    SO_TOKEN,)```## Add EventsAdd `events` to your smart object / application which can be send to MSB.### Alternative 1: Simple event creation sample (using method params):```pythonevent_id = &quot;E1&quot;event_name = &quot;EVENT &quot; + event_idevent_description = &quot;EVENT Description &quot; + event_idevent_dataformat = DataType.STRINGevent_priority = 1 # 0 (LOW), 1 (MEDIUM), 2 (HIGH)isArray = False # just one value or array of it?# add the eventmyMsbClient.addEvent(    event_id,    event_name,    event_description,    event_dataformat,    event_priority,    isArray,)```### Alternative 2: Complex event creation sample (using object):```pythonevent_id = &quot;E2&quot;event_name = &quot;EVENT &quot; + event_idevent_description = &quot;EVENT Description &quot; + event_idevent_priority = 1 # 0 (LOW), 1 (MEDIUM), 2 (HIGH)isArray = False # just one value or array of it?# define a complex data format to be used in an event# init the complex data formatmyDevice = ComplexDataFormat(&quot;MyDevice&quot;)myModule = ComplexDataFormat(&quot;MyModule&quot;)# add the properties to the complex objects# (property_name, property_datatype, isArray)myModule.addProperty(&quot;moduleName&quot;, DataType.STRING, False)myDevice.addProperty(&quot;deviceName&quot;, DataType.STRING, False)myDevice.addProperty(&quot;deviceWeight&quot;, DataType.FLOAT, False)myDevice.addProperty(&quot;submodules&quot;, myModule, True)# add the event (with the root of the nested complex object)myMsbClient.addEvent(    event_id,    event_name,    event_description,    myDevice,    event_priority,    isArray,)```### Alternative 3: Complex event creation sample (using json object):```pythonevent_id = &quot;E3&quot;event_name = &quot;EVENT &quot; + event_idevent_description = &quot;EVENT Description &quot; + event_idevent_priority = 1 # 0 (LOW), 1 (MEDIUM), 2 (HIGH)isArray = False # just one value or array of it?# add the event (with the MSB-ready json object)myMsbClient.addEvent(    event_id,    event_name,    event_description,    {        &quot;Team&quot; : {            &quot;type&quot; : &quot;object&quot;,            &quot;properties&quot; : {                &quot;staff&quot; : {                    &quot;type&quot; : &quot;array&quot;,                    &quot;items&quot; : {                        &quot;$ref&quot; : &quot;#/definitions/Member&quot;                    }                }            }        },        &quot;Member&quot; : {            &quot;type&quot; : &quot;object&quot;,            &quot;properties&quot; : {                &quot;name&quot; : {                    &quot;type&quot; : &quot;string&quot;                },                &quot;status&quot; : {                    &quot;enum&quot; : [ &quot;present&quot;, &quot;absent&quot; ],                    &quot;type&quot; : &quot;string&quot;                }            }        },        &quot;dataObject&quot; : {            &quot;$ref&quot; : &quot;#/definitions/Team&quot;        }    },    event_priority,    isArray,)```See `app_sample.py` for more event creation examples.## Add FunctionsAdd `functions` and their implementations your smart object / application is able to handle.### Alternative 1: Simple function creation sample (using method params):```pythonfunction_id = &quot;F1&quot;function_name = &quot;FUNC &quot; + function_idfunction_description = &quot;FUNC Description &quot; + function_idfunction_dataformat = DataType.STRINGisArray = False # handle array of values or just one value?responseEvents = None # you can link to response events here by a list of event is e.g. [&quot;E1&quot;]# define the function which will be passed to the function description# this function implementation will be calleddef printMsg(msg):    print(str(msg[&quot;dataObject&quot;]))# add the functionmyMsbClient.addFunction(    function_id,    function_name,    function_description,    function_dataformat,    printMsg,    isArray,    responseEvents,)```### Alternative 2: Complex function creation sample (using object):```pythonfunction_id = &quot;F2&quot;function_name = &quot;FUNC &quot; + function_idfunction_description = &quot;FUNC Description &quot; + function_idisArray = False # handle array of values or just one value?responseEvents = None # you can link to response events here by a list of event is e.g. [&quot;E1&quot;]# define a complex data format to be used in an event# init the complex data formatmyCar = ComplexDataFormat(&quot;MyCar&quot;)# add the properties to the complex objects# (property_name, property_datatype, isArray)myCar.addProperty(&quot;carColor&quot;, DataType.STRING, False)myCar.addProperty(&quot;carNrOfSeats&quot;, DataType.INT32, False)myCar.addProperty(&quot;carWeight&quot;, DataType.FLOAT, False)# define the function which will be passed to the function description# this function implementation will be calleddef printMsg(msg):    print(str(msg[&quot;dataObject&quot;]))# add the functionmyMsbClient.addFunction(    function_id,    function_name,    function_description,    myCar,    printMsg,    isArray,    responseEvents,)```### Alternative 3: Complex function creation sample (using json object):```pythonfunction_id = &quot;F3&quot;function_name = &quot;FUNC &quot; + function_idfunction_description = &quot;FUNC Description &quot; + function_idisArray = False # handle array of values or just one value?responseEvents = None # you can link to response events here by a list of event is e.g. [&quot;E1&quot;]# define the function which will be passed to the function description# this function implementation will be calleddef printMsg(msg):    print(str(msg[&quot;dataObject&quot;]))# add the functionmyMsbClient.addFunction(    function_id,    function_name,    function_description,    {        &quot;MyCar&quot; : {            &quot;type&quot; : &quot;object&quot;,            &quot;properties&quot; : {                &quot;carColor&quot; : {                    &quot;type&quot; : &quot;string&quot;                },                &quot;carNrOfSeats&quot; : {                    &quot;format&quot;: &quot;int32&quot;,                    &quot;type&quot;: &quot;integer&quot;                },                &quot;carWeight&quot; : {                    &quot;format&quot;: &quot;float&quot;,                    &quot;type&quot;: &quot;number&quot;                },                &quot;wheels&quot; : {                    &quot;type&quot; : &quot;array&quot;,                    &quot;items&quot; : {                        &quot;$ref&quot; : &quot;#/definitions/MyWheel&quot;                    }                }            }        },        &quot;MyWheel&quot; : {            &quot;type&quot; : &quot;object&quot;,            &quot;properties&quot; : {                &quot;position&quot; : {                    &quot;enum&quot; : [ &quot;br&quot;, &quot;bl&quot;, &quot;fr&quot;, &quot;fl&quot; ],                    &quot;type&quot; : &quot;string&quot;                }            }        },        &quot;dataObject&quot; : {            &quot;$ref&quot; : &quot;#/definitions/MyCar&quot;        }    },    printMsg,    isArray,    responseEvents,)```See `app_sample.py` of the application template for more (and complex) examples.## Connect and Register Client```pythonmsb_url = 'ws://127.0.0.1:8085'myMsbClient.connect(msb_url)myMsbClient.register()```You will get an `IO_CONNECTED` and `IO_REGISTERED` event from MSB, if successful.## Event publishingFor publishing an event to a websocket broker interface,only the `eventId` and `data` are required of the already specified event (see above).```pythonevent_id = &quot;E1&quot;event_value = 'Hello World!'myMsbClient.publish(  event_id,   event_value)```The MSB responds with an `IO_PUBLISHED` event, if successful.By default events are published with a low priority.It is also possible to `set the priority` of an event.There are three possible priorities for events like it is shown at the following table.| `Constant` | `Value` ||:---:|:---:|| LOW | 0 || MEDIUM| 1 || HIGH| 2 |```pythonevent_id = &quot;E1&quot;event_value = 'Hello World!'event_priority = 2myMsbClient.publish(  event_id,   event_value,  event_priority)```Another option is to publish an event as `cached event` by setting the cache parameter to true.And you can add a `post date`.This means that the event is not deleted if the connection is broken.```pythonevent_id = &quot;E1&quot;event_value = 'Hello World!'event_priority = 2event_isCached = Trueevent_postDate = datetime.datetime.utcnow().isoformat()[:-3] + &quot;Z&quot;myMsbClient.publish(  event_id,   event_value,  event_priority,  event_isCached,  event_postDate)```You cann also handle `correlation ids` to identify an event among flows.```pythonevent_id = &quot;E1&quot;event_value = 'Hello World!'event_priority = 2event_isCached = Trueevent_postDate = datetime.datetime.utcnow().isoformat()[:-3] + &quot;Z&quot;event_correlationId = &quot;72047f33-a9ae-4aa5-b7ae-c1c4a2797cac&quot;myMsbClient.publish(  event_id,   event_value,  event_priority,  event_isCached,  event_postDate,  event_correlationId)```For values based on complex data formats it will look like this:```pythonevent_id = &quot;E2&quot;event_priority = 2event_isCached = Trueevent_postDate = datetime.datetime.utcnow().isoformat()[:-3] + &quot;Z&quot;event_correlationId = &quot;72047f33-a9ae-4aa5-b7ae-c1c4a2797cac&quot;# pepare the complex ovbject based on a complex data format# use it as event valuemyModuleObj = {}myModuleObj['moduleName'] = 'Module 1'myDeviceObj = {}myDeviceObj['deviceName'] = 'Device 1'myDeviceObj['deviceWeight'] = 1.3myDeviceObj['submodules'] = [myModuleObj]myMsbClient.publish(  event_id,   myDeviceObj,  event_priority,  event_isCached,  event_postDate,  event_correlationId)```## Function call handlingAs shown above the addFunction method includes a `function pointer`to point to the function implementation.## Configuration parametersConfiguration parameters are a simple list of key value pairs for the smart object / application.It is displayed and can be customized in the MSB UI to change your apps behaviour during runtime.`Add` condifuration parameters:```pythonparam_name_1 = &quot;testParam1&quot;param_value_1 = Trueparam_datatype_1 = DataType.BOOLEANmyMsbClient.addConfigParameter(param_name_1, param_value_1, param_datatype_1)param_name_2 = &quot;testParam2&quot;param_value_2 = &quot;StringValue&quot;param_datatype_2 = DataType.STRINGmyMsbClient.addConfigParameter(param_name_2, param_value_2, param_datatype_2)param_name_3 = &quot;testParam3&quot;param_value_3 = 1000param_datatype_3 = DataType.INT32myMsbClient.addConfigParameter(param_name_3, param_value_3, param_datatype_3)````Get` configuration parameter (after changed in MSB UI) to change your app behaviour:```python# get by getConfigParameter using name as keyparameterValueFound_1 = myMsbClient.getConfigParameter(param_name_1)parameterValueFound_2 = myMsbClient.getConfigParameter(param_name_2)parameterValueFound_3 = myMsbClient.getConfigParameter(param_name_3)```## SSL/TLS connection configurationTo enable `SSL/TLS`, you need to specify wss:// or https:// in the URL instead of ws:// or http://.Furthermore, it is necessary to specify a trust store in the client,which contains the public certificate of the MSB interface, so that it is considered trustworthy.```pythonmsb_url = 'wss://&lt;hostname&gt;:&lt;port&gt;'myMsbClient.connect(msb_url)myMsbClient.register()```If you use an IP instead of a public url during development,it will be necessary to disable the hostname verification to connect via web socket secure.```pythonmyMsbClient.disableHostnameVerification(True)  ```## Connection recoveryIf connection to the common websocket interface is broken the client performs a reconnect.After a reconnect the registration at the MSB will be redone automatically by the client.You can change this interval by setting an integer value in `ms` for the reconnect interval.```pythonmyMsbClient.setReconnectInterval(10000)```Or you can disable the automatic reconnect.```pythonmyMsbClient.disableAutoReconnect(True)```## Event cachingIf the client loses the connection, the published events are cached in a queue.After a successfull reconnection, the queued events are published to MSB (FIFO principle).The default size of the queue is 1000 entries. The size can be changed:```pythonmyMsbClient.setEventCacheSize(1000)```If no event caching is needed, you can disable it.```pythonmyMsbClient.disableEventCache(True)```## Debug modeTo debug your clients communication with MSB, you can enable the debug mode```pythonmyMsbClient.enableDebug(True)```To enable the trace of the websocket communication use also```pythonmyMsbClient.enableTrace(True)```It mgiht be also helpful to enable data format validation, to check if an event value is valid```pythonmyMsbClient.enableDataFormatValidation(True)```## License[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fresearch-virtualfortknox%2Fmsb-client-websocket-python.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fresearch-virtualfortknox%2Fmsb-client-websocket-python?ref=badge_large)</longdescription>
</pkgmetadata>