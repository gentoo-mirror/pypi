<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================================================================pyexcel-xls - Let you focus on data, instead of xls format================================================================================.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png   :target: https://www.patreon.com/chfw.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel-mobans/master/images/awesome-badge.svg   :target: https://awesome-python.com/#specific-formats-processing.. image:: https://github.com/pyexcel/pyexcel-xls/workflows/run_tests/badge.svg   :target: http://github.com/pyexcel/pyexcel-xls/actions.. image:: https://codecov.io/gh/pyexcel/pyexcel-xls/branch/master/graph/badge.svg   :target: https://codecov.io/gh/pyexcel/pyexcel-xls.. image:: https://badge.fury.io/py/pyexcel-xls.svg   :target: https://pypi.org/project/pyexcel-xls.. image:: https://anaconda.org/conda-forge/pyexcel-xls/badges/version.svg   :target: https://anaconda.org/conda-forge/pyexcel-xls.. image:: https://pepy.tech/badge/pyexcel-xls/month   :target: https://pepy.tech/project/pyexcel-xls.. image:: https://anaconda.org/conda-forge/pyexcel-xls/badges/downloads.svg   :target: https://anaconda.org/conda-forge/pyexcel-xls.. image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg   :target: https://gitter.im/pyexcel/Lobby.. image:: https://img.shields.io/static/v1?label=continuous%20templating&amp;message=%E6%A8%A1%E7%89%88%E6%9B%B4%E6%96%B0&amp;color=blue&amp;style=flat-square    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects.. image:: https://img.shields.io/static/v1?label=coding%20style&amp;message=black&amp;color=black&amp;style=flat-square    :target: https://github.com/psf/black**pyexcel-xls** is a tiny wrapper library to read, manipulate andwrite data in xls format and it can read xlsx and xlsm fromat.You are likely to use it with `pyexcel &lt;https://github.com/pyexcel/pyexcel&gt;`_.Oct 2021 - Update:===================1. v0.6.3 removed the pin on xlrd &lt; 2. If you have xlrd &gt;= 2, thislibrary will NOT read 'xlsx' format and you need to install pyexcel-xlsx. Othwise,this library can use xlrd &lt; 2 to read xlsx format for you. So 'xlsx' supportin this library will vary depending on the installed version of xlrd.2. v0.6.3 can write datetime.timedelta. but when the value is read out,you will get datetime.datetime. so you as the developer decides what to do with it.Past news===========`detect_merged_cells` allows you to spread the same value amongall merged cells. But be aware that this may slow down its readingperformance.`skip_hidden_row_and_column` allows you to skip hidden rowsand columns and is defaulted to **True**. It may slow down its readingperformance. And it is only valid for 'xls' files. For 'xlsx' files,please use pyexcel-xlsx.Warning================================================================================**xls file cannot contain more than 65,000 rows**. You are risking the reputationof yourself/your company/`your country &lt;https://www.bbc.co.uk/news/technology-54423988&gt;`_ if you keepusing xls and are not aware of its row limit.Support the project================================================================================If your company has embedded pyexcel and its components into a revenue generatingproduct, please support me on github, `patreon &lt;https://www.patreon.com/bePatron?u=5537627&gt;`_or `bounty source &lt;https://salt.bountysource.com/teams/chfw-pyexcel&gt;`_ to maintainthe project and develop it further.If you are an individual, you are welcome to support me too and for however longyou feel like. As my backer, you will receive`early access to pyexcel related contents &lt;https://www.patreon.com/pyexcel/posts&gt;`_.And your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.With your financial support, I will be able to investa little bit more time in coding, documentation and writing interesting posts.Known constraints==================Fonts, colors and charts are not supported.Nor to read password protected xls, xlsx and ods files.Installation================================================================================You can install pyexcel-xls via pip:.. code-block:: bash    $ pip install pyexcel-xlsor clone it and install it:.. code-block:: bash    $ git clone https://github.com/pyexcel/pyexcel-xls.git    $ cd pyexcel-xls    $ python setup.py installUsage================================================================================As a standalone library--------------------------------------------------------------------------------Write to an xls file********************************************************************************Here's the sample code to write a dictionary to an xls file:.. code-block:: python    &gt;&gt;&gt; from pyexcel_xls import save_data    &gt;&gt;&gt; data = OrderedDict() # from collections import OrderedDict    &gt;&gt;&gt; data.update({&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]]})    &gt;&gt;&gt; data.update({&quot;Sheet 2&quot;: [[&quot;row 1&quot;, &quot;row 2&quot;, &quot;row 3&quot;]]})    &gt;&gt;&gt; save_data(&quot;your_file.xls&quot;, data)Read from an xls file********************************************************************************Here's the sample code:.. code-block:: python    &gt;&gt;&gt; from pyexcel_xls import get_data    &gt;&gt;&gt; data = get_data(&quot;your_file.xls&quot;)    &gt;&gt;&gt; import json    &gt;&gt;&gt; print(json.dumps(data))    {&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]], &quot;Sheet 2&quot;: [[&quot;row 1&quot;, &quot;row 2&quot;, &quot;row 3&quot;]]}Write an xls to memory********************************************************************************Here's the sample code to write a dictionary to an xls file:.. code-block:: python    &gt;&gt;&gt; from pyexcel_xls import save_data    &gt;&gt;&gt; data = OrderedDict()    &gt;&gt;&gt; data.update({&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]]})    &gt;&gt;&gt; data.update({&quot;Sheet 2&quot;: [[7, 8, 9], [10, 11, 12]]})    &gt;&gt;&gt; io = StringIO()    &gt;&gt;&gt; save_data(io, data)    &gt;&gt;&gt; # do something with the io    &gt;&gt;&gt; # In reality, you might give it to your http response    &gt;&gt;&gt; # object for downloadingRead from an xls from memory********************************************************************************Continue from previous example:.. code-block:: python    &gt;&gt;&gt; # This is just an illustration    &gt;&gt;&gt; # In reality, you might deal with xls file upload    &gt;&gt;&gt; # where you will read from requests.FILES['YOUR_XLS_FILE']    &gt;&gt;&gt; data = get_data(io)    &gt;&gt;&gt; print(json.dumps(data))    {&quot;Sheet 1&quot;: [[1, 2, 3], [4, 5, 6]], &quot;Sheet 2&quot;: [[7, 8, 9], [10, 11, 12]]}Pagination feature********************************************************************************Let's assume the following file is a huge xls file:.. code-block:: python   &gt;&gt;&gt; huge_data = [   ...     [1, 21, 31],   ...     [2, 22, 32],   ...     [3, 23, 33],   ...     [4, 24, 34],   ...     [5, 25, 35],   ...     [6, 26, 36]   ... ]   &gt;&gt;&gt; sheetx = {   ...     &quot;huge&quot;: huge_data   ... }   &gt;&gt;&gt; save_data(&quot;huge_file.xls&quot;, sheetx)And let's pretend to read partial data:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.xls&quot;, start_row=2, row_limit=3)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[3, 23, 33], [4, 24, 34], [5, 25, 35]]}And you could as well do the same for columns:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.xls&quot;, start_column=1, column_limit=2)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[21, 31], [22, 32], [23, 33], [24, 34], [25, 35], [26, 36]]}Obvious, you could do both at the same time:.. code-block:: python   &gt;&gt;&gt; partial_data = get_data(&quot;huge_file.xls&quot;,   ...     start_row=2, row_limit=3,   ...     start_column=1, column_limit=2)   &gt;&gt;&gt; print(json.dumps(partial_data))   {&quot;huge&quot;: [[23, 33], [24, 34], [25, 35]]}As a pyexcel plugin--------------------------------------------------------------------------------No longer, explicit import is needed since pyexcel version 0.2.2. Instead,this library is auto-loaded. So if you want to read data in xls format,installing it is enough.Reading from an xls file********************************************************************************Here is the sample code:.. code-block:: python    &gt;&gt;&gt; import pyexcel as pe    &gt;&gt;&gt; sheet = pe.get_book(file_name=&quot;your_file.xls&quot;)    &gt;&gt;&gt; sheet    Sheet 1:    +---+---+---+    | 1 | 2 | 3 |    +---+---+---+    | 4 | 5 | 6 |    +---+---+---+    Sheet 2:    +-------+-------+-------+    | row 1 | row 2 | row 3 |    +-------+-------+-------+Writing to an xls file********************************************************************************Here is the sample code:.. code-block:: python    &gt;&gt;&gt; sheet.save_as(&quot;another_file.xls&quot;)Reading from a IO instance********************************************************************************You got to wrap the binary content with stream to get xls working:.. code-block:: python    &gt;&gt;&gt; # This is just an illustration    &gt;&gt;&gt; # In reality, you might deal with xls file upload    &gt;&gt;&gt; # where you will read from requests.FILES['YOUR_XLS_FILE']    &gt;&gt;&gt; xlsfile = &quot;another_file.xls&quot;    &gt;&gt;&gt; with open(xlsfile, &quot;rb&quot;) as f:    ...     content = f.read()    ...     r = pe.get_book(file_type=&quot;xls&quot;, file_content=content)    ...     print(r)    ...    Sheet 1:    +---+---+---+    | 1 | 2 | 3 |    +---+---+---+    | 4 | 5 | 6 |    +---+---+---+    Sheet 2:    +-------+-------+-------+    | row 1 | row 2 | row 3 |    +-------+-------+-------+Writing to a StringIO instance********************************************************************************You need to pass a StringIO instance to Writer:.. code-block:: python    &gt;&gt;&gt; data = [    ...     [1, 2, 3],    ...     [4, 5, 6]    ... ]    &gt;&gt;&gt; io = StringIO()    &gt;&gt;&gt; sheet = pe.Sheet(data)    &gt;&gt;&gt; io = sheet.save_to_memory(&quot;xls&quot;, io)    &gt;&gt;&gt; # then do something with io    &gt;&gt;&gt; # In reality, you might give it to your http response    &gt;&gt;&gt; # object for downloadingLicense================================================================================New BSD LicenseDeveloper guide==================Development steps for code changes#. git clone https://github.com/pyexcel/pyexcel-xls.git#. cd pyexcel-xlsUpgrade your setup tools and pip. They are needed for development and testing only:#. pip install --upgrade setuptools pipThen install relevant development requirements:#. pip install -r rnd_requirements.txt # if such a file exists#. pip install -r requirements.txt#. pip install -r tests/requirements.txtOnce you have finished your changes, please provide test case(s), relevant documentationand update changelog.yml.. note::    As to rnd_requirements.txt, usually, it is created when a dependent    library is not released. Once the dependecy is installed    (will be released), the future    version of the dependency in the requirements.txt will be valid.How to test your contribution------------------------------Although `nose` and `doctest` are both used in code testing, it is adviable that unit tests are put in tests. `doctest` is incorporated only to make sure the code examples in documentation remain valid across different development releases.On Linux/Unix systems, please launch your tests like this::    $ makeOn Windows, please issue this command::    &gt; test.batBefore you commit------------------------------Please run::    $ make formatso as to beautify your code otherwise your build may fail your unit test.Known Issues=============* If a zero was typed in a DATE formatted field in xls, you will get &quot;01/01/1900&quot;.* If a zero was typed in a TIME formatted field in xls, you will get &quot;00:00:00&quot;.3 contributors================================================================================In alphabetical order:* `John Vandenberg &lt;https://github.com/jayvdb&gt;`_* `Peter Carnesciali &lt;https://github.com/pcarn&gt;`_* `vinraspa &lt;https://github.com/vinraspa&gt;`_Change log================================================================================0.7.0 - 07.10.2021--------------------------------------------------------------------------------**Removed**#. `#46 &lt;https://github.com/pyexcel/pyexcel-xls/issues/46&gt;`_: remove the hard   pin on xlrd version &lt; 2.0**Added**#. `#47 &lt;https://github.com/pyexcel/pyexcel-xls/issues/47&gt;`_: limit support to   persist datetime.timedelta. see more details in doc0.6.2 - 12.12.2020--------------------------------------------------------------------------------**Updated**#. lock down xlrd version less than version 2.0, because 2.0+ does not support   xlsx read0.6.1 - 21.10.2020--------------------------------------------------------------------------------**Updated**#. Restrict this library to get installed on python 3.6+, because pyexcel-io   0.6.0+ supports only python 3.6+.0.6.0 - 8.10.2020--------------------------------------------------------------------------------**Updated**#. New style xlsx plugins, promoted by pyexcel-io v0.6.2.0.5.9 - 29.08.2020--------------------------------------------------------------------------------**Added**#. `#35 &lt;https://github.com/pyexcel/pyexcel-xls/issues/35&gt;`_, include tests0.5.8 - 22.08.2018--------------------------------------------------------------------------------**Added**#. `pyexcel#151 &lt;https://github.com/pyexcel/pyexcel/issues/151&gt;`_, read cell   error as #N/A.0.5.7 - 15.03.2018--------------------------------------------------------------------------------**Added**#. `pyexcel#54 &lt;https://github.com/pyexcel/pyexcel/issues/54&gt;`_, Book.datemode   attribute of that workbook should be passed always.0.5.6 - 15.03.2018--------------------------------------------------------------------------------**Added**#. `pyexcel#120 &lt;https://github.com/pyexcel/pyexcel/issues/120&gt;`_, xlwt cannot   save a book without any sheet. So, let's raise an exception in this case in   order to warn the developers.0.5.5 - 8.11.2017--------------------------------------------------------------------------------**Added**#. `#25 &lt;https://github.com/pyexcel/pyexcel-xls/issues/25&gt;`_, detect merged cell   in .xls0.5.4 - 2.11.2017--------------------------------------------------------------------------------**Added**#. `#24 &lt;https://github.com/pyexcel/pyexcel-xls/issues/24&gt;`_, xlsx format cannot   use skip_hidden_row_and_column. please use pyexcel-xlsx instead.0.5.3 - 2.11.2017--------------------------------------------------------------------------------**Added**#. `#21 &lt;https://github.com/pyexcel/pyexcel-xls/issues/21&gt;`_, skip hidden rows   and columns under 'skip_hidden_row_and_column' flag.0.5.2 - 23.10.2017--------------------------------------------------------------------------------**updated**#. pyexcel `pyexcel#105 &lt;https://github.com/pyexcel/pyexcel/issues/105&gt;`_,   remove gease from setup_requires, introduced by 0.5.1.#. remove python2.6 test support#. update its dependecy on pyexcel-io to 0.5.30.5.1 - 20.10.2017--------------------------------------------------------------------------------**added**#. `pyexcel#103 &lt;https://github.com/pyexcel/pyexcel/issues/103&gt;`_, include   LICENSE file in MANIFEST.in, meaning LICENSE file will appear in the released   tar ball.0.5.0 - 30.08.2017--------------------------------------------------------------------------------**Updated**#. `#20 &lt;https://github.com/pyexcel/pyexcel-xls/issues/20&gt;`_, is handled in   pyexcel-io#. put dependency on pyexcel-io 0.5.0, which uses cStringIO instead of StringIO.   Hence, there will be performance boost in handling files in memory.0.4.1 - 25.08.2017--------------------------------------------------------------------------------**Updated**#. `#20 &lt;https://github.com/pyexcel/pyexcel-xls/issues/20&gt;`_, handle unseekable   stream given by http response.0.4.0 - 19.06.2017--------------------------------------------------------------------------------**Updated**#. `pyexcel-xlsx#15 &lt;https://github.com/pyexcel/pyexcel-xlsx/issues/15&gt;`_, close   file handle#. pyexcel-io plugin interface now updated to use `lml   &lt;https://github.com/chfw/lml&gt;`_.0.3.3 - 30/05/2017--------------------------------------------------------------------------------**Updated**#. `#18 &lt;https://github.com/pyexcel/pyexcel-xls/issues/18&gt;`_, pass on   encoding_override and others to xlrd.0.3.2 - 18.05.2017--------------------------------------------------------------------------------**Updated**#. `#16 &lt;https://github.com/pyexcel/pyexcel-xls/issues/16&gt;`_, allow mmap to be   passed as file content0.3.1 - 16.01.2017--------------------------------------------------------------------------------**Updated**#. `#14 &lt;https://github.com/pyexcel/pyexcel-xls/issues/14&gt;`_, Python 3.6 -   cannot use LOCALE flag with a str pattern#. fix its dependency on pyexcel-io 0.3.00.3.0 - 22.12.2016--------------------------------------------------------------------------------**Updated**#. `#13 &lt;https://github.com/pyexcel/pyexcel-xls/issues/13&gt;`_, alert on empyty   file content#. Support pyexcel-io v0.3.00.2.3 - 20.09.2016--------------------------------------------------------------------------------**Updated**#. `#10 &lt;https://github.com/pyexcel/pyexcel-xls/issues/10&gt;`_, To support   generator as member of the incoming two dimensional data0.2.2 - 31.08.2016--------------------------------------------------------------------------------**Added**#. support pagination. two pairs: start_row, row_limit and start_column,   column_limit help you deal with large files.0.2.1 - 13.07.2016--------------------------------------------------------------------------------**Added**#. `#9 &lt;https://github.com/pyexcel/pyexcel-xls/issues/9&gt;`_, `skip_hidden_sheets`   is added. By default, hidden sheets are skipped when reading all sheets.   Reading sheet by name or by index are not affected.0.2.0 - 01.06.2016--------------------------------------------------------------------------------**Added**#. By default, `float` will be converted to `int` where fits. `auto_detect_int`,   a flag to switch off the autoatic conversion from `float` to `int`.#. 'library=pyexcel-xls' was added so as to inform pyexcel to use it instead of   other libraries, in the situation where there are more than one plugin for a   file type, e.g. xlsm**Updated**#. support the auto-import feature of pyexcel-io 0.2.0#. xlwt is now used for python 2 implementation while xlwt-future is used for   python 30.1.0 - 17.01.2016--------------------------------------------------------------------------------**Added**#. Passing &quot;streaming=True&quot; to get_data, you will get the two dimensional array   as a generator#. Passing &quot;data=your_generator&quot; to save_data is acceptable too.</longdescription>
</pkgmetadata>