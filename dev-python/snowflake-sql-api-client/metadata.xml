<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Snowflake SQL API ClientThe Snowflake SQL API is a REST API that you can use to access and update data in a Snowflake database.Contact Support - Email: tungnq@gmail.com ## Requirements.Python 2.7 and 3.4+## Installation &amp; Usage### Install a Virtual Environment using Venv```shpip install virtualenv```Go to project folder```shpython -m venv env```### Activate the Virtual Environment```sh env/Scripts/activate.bat //In CMD env/Scripts/Activate.ps1 //In Powershel```### pip install```shpip install -r requirements.txt```If the python package is hosted on Github, you can install directly from Github```shpip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git```(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)Then import the package:```pythonimport snowflake_sql_api_client ```### SetuptoolsInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).```shpython setup.py install --user```(or `sudo python setup.py install` to install the package for all users)Then import the package:```pythonimport snowflake_sql_api_client```### Generate the distribution archives on local machine - https://towardsdatascience.com/how-to-publish-a-python-package-to-pypi-7be9dd5d6dcdUpgrade setuptools wheel```shpython -m pip install –-user –-upgrade setuptools wheel```Generate the distribution files.```shpython setup.py sdist bdist_wheel```### Install the package on local machine.```shpip install -e .```### Publish the package to the PyPi repository```shpython -m twine upload dist/*```## Getting StartedPlease follow the [installation procedure](#installation--usage) and then run the following:```pythonfrom __future__ import print_functionimport timeimport snowflake_sql_api_clientfrom snowflake_sql_api_client.rest import ApiExceptionfrom pprint import pprintfrom snowflake_sql_api_client.utilities.sql_api_generate_jwt import JWTGenerator # Generate JWT Tokenjwt_token = JWTGenerator(    account=[YOUR SNOWFLAKE HOST]    , user=[YOUR USERNAME]    , private_key=[YOUR USENAME PRIVATE_KEY]    , lifetime=timedelta(minutes=lifetime_in_minutes)    , renewal_delay=timedelta(minutes=renewal_delay_in_minutes)    ).get_token()# Configure API key authorization: bearerAuthconfiguration = snowflake_sql_api_client.Configuration()configuration.api_key['Authorization'] = jwt_token# Uncomment below to setup prefix (e.g. Bearer) for API key, if neededconfiguration.api_key_prefix['Authorization'] = 'Bearer'# create an instance of the API classapi_instance = snowflake_sql_api_client.Apiv2statementsApi(snowflake_sql_api_client.ApiClient(configuration))body = NULL # object |  (optional)user_agent = 'user_agent_example' # str | (Required) Set this to the name and version of your application (e.g. â€œapplicationName/applicationVersionâ€). You must use a value that complies with RFC 7231. (optional)x_snowflake_authorization_token_type = 'x_snowflake_authorization_token_type_example' # str | Specify the authorization token type for the Authorization header. KEYPAIR_JWT is for Keypair JWT or OAUTH for oAuth token. If not specified, OAUTH is assumed. (optional)content_type = 'content_type_example' # str |  (optional)accept = 'accept_example' # str |  (optional)request_id = 'request_id_example' # str | Unique ID of the API request. This ensures that the execution is idempotent. If not specified, a new UUID is generated and assigned. (optional)_async = '_async_example' # str | Set to true to execute the statement asynchronously and return the statement handle. If the parameter is not specified or is set to false, a statement is executed and the first result is returned if the execution is completed in 45 seconds. If the statement execution takes longer to complete, the statement handle is returned. (optional)nullable = 'nullable_example' # str | Set to true to execute the statement to generate the result set including null. If the parameter is set to false, the result set value null will be replaced with a string 'null'. (optional)try:    # Submits a SQL statement for execution.    api_response = api_instance.api_v2_statements_post(body=body, user_agent=user_agent, x_snowflake_authorization_token_type=x_snowflake_authorization_token_type, content_type=content_type, accept=accept, request_id=request_id, _async=_async, nullable=nullable)    pprint(api_response)except ApiException as e:    print(&quot;Exception when calling Apiv2statementsApi-&gt;api_v2_statements_post: %s\n&quot; % e)```## Documentation for API EndpointsAll URIs are relative to *https://virtserver.swaggerhub.com/Home4677/Snowflake_SQL_API_V2/1.0.0*Class | Method | HTTP request | Description------------ | ------------- | ------------- | -------------*Apiv2statementsApi* | [**api_v2_statements_post**](docs/Apiv2statementsApi.md#api_v2_statements_post) | **POST** /api/v2/statements | Submits a SQL statement for execution.*Apiv2statementsStatementHandleApi* | [**api_v2_statements_statement_handle_cancel_post**](docs/Apiv2statementsStatementHandleApi.md#api_v2_statements_statement_handle_cancel_post) | **POST** /api/v2/statements/{statementHandle}/cancel | Cancels the execution of a statement.*Apiv2statementsStatementHandleApi* | [**api_v2_statements_statement_handle_get**](docs/Apiv2statementsStatementHandleApi.md#api_v2_statements_statement_handle_get) | **GET** /api/v2/statements/{statementHandle} | Checks the status of the execution of a statement## Documentation For Models## Documentation For Authorization## bearerAuth- **Type**: API key- **API key parameter name**: Authorization- **Location**: HTTP header## Author</longdescription>
</pkgmetadata>