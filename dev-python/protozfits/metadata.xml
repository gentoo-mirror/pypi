<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># protozfits Python BindingsTable of Contents* [Usage](#usage)   * [Open a file](#open-a-file)   * [Get an event](#getting-an-event)   * [RunHeader](#runHeader)   * [Table header](#table-header)* [Performance](#isnt-this-a-little-slow)* [Installation](#installation)* [Where does this come from?](#where-does-this-come-from)## UsageIf you are just starting with proto-z-fits files and would like to explore the file contents, try this:### Open a file```&gt;&gt;&gt; from protozfits import File&gt;&gt;&gt; example_path = 'protozfits/tests/resources/example_9evts_NectarCAM.fits.fz'&gt;&gt;&gt; file = File(example_path)&gt;&gt;&gt; fileFile({    'RunHeader': Table(1xDataModel.CameraRunHeader),    'Events': Table(9xDataModel.CameraEvent)})```From this we learn, the `file` contains two `Table` named `RunHeader` and `Events` whichcontains 9 rows of type `CameraEvent`. There might be more tables withother types of rows in other files. For instance LST has its `RunHeader` called `CameraConfig`.### Getting an eventUsually people just iterate over a whole `Table` like this:```pythonfor event in file.Events:    # do something with the event    pass```But if you happen to know exactly which event you want, you can alsodirectly get an event, like this:```pythonevent_17 = file.Events[17]```You can also get a range of events, like this:```pythonfor event in file.Events[100:200]:    # do something events 100 until 200    pass```It is not yet possible to specify negative indices, like `file.Events[:-10]`does *not work*.If you happen to have a list or any iterable or a generator with event idsyou are interested in you can get the events in question like this:```pythoninteresting_event_ids = range(100, 200, 3)for event in file.Events[interesting_event_ids]:    # do something with intesting events    pass```### RunHeaderEven though there is usually **only one** run header per file, technicallythis single run header is stored in a Table. This table could contain multiple&quot;rows&quot; and to me it is not clear what this would mean... but technically it ispossible.At the moment I would recommend getting the run header out of the filewe opened above like this (replace RunHeader with CameraConfig for LST data):```pythonassert len(file.RunHeader) == 1header = file.RunHeader[0]```For now, I will just get the next event```pythonevent = file.Events[0]type(event)&lt;class 'protozfits.CameraEvent'&gt;event._fields('telescopeID', 'dateMJD', 'eventType', 'eventNumber', 'arrayEvtNum', 'hiGain', 'loGain', 'trig', 'head', 'muon', 'geometry', 'hilo_offset', 'hilo_scale', 'cameraCounters', 'moduleStatus', 'pixelPresence', 'acquisitionMode', 'uctsDataPresence', 'uctsData', 'tibDataPresence', 'tibData', 'swatDataPresence', 'swatData', 'chipsFlags', 'firstCapacitorIds', 'drsTagsHiGain', 'drsTagsLoGain', 'local_time_nanosec', 'local_time_sec', 'pixels_flags', 'trigger_map', 'event_type', 'trigger_input_traces', 'trigger_output_patch7', 'trigger_output_patch19', 'trigger_output_muon', 'gps_status', 'time_utc', 'time_ns', 'time_s', 'flags', 'ssc', 'pkt_len', 'muon_tag', 'trpdm', 'pdmdt', 'pdmt', 'daqtime', 'ptm', 'trpxlid', 'pdmdac', 'pdmpc', 'pdmhi', 'pdmlo', 'daqmode', 'varsamp', 'pdmsum', 'pdmsumsq', 'pulser', 'ftimeoffset', 'ftimestamp', 'num_gains')event.hiGain.waveforms.samplesarray([241, 245, 248, ..., 218, 214, 215], dtype=int16)```An LST event will look something like so:```python&gt;&gt;&gt; eventCameraEvent(    configuration_id=1    event_id=1    tel_event_id=1    trigger_time_s=0    trigger_time_qns=0    trigger_type=0    waveform=array([  0,   0, ..., 288, 263], dtype=uint16)    pixel_status=array([ 0,  0,  0,  0,  0,  0,  0, 12, 12, 12, 12, 12, 12, 12], dtype=uint8)    ped_id=0    nectarcam=NectarCamEvent(        module_status=array([], dtype=float64)        extdevices_presence=0        tib_data=array([], dtype=float64)        cdts_data=array([], dtype=float64)        swat_data=array([], dtype=float64)        counters=array([], dtype=float64))    lstcam=LstCamEvent(        module_status=array([0, 1], dtype=uint8)        extdevices_presence=0        tib_data=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=uint8)        cdts_data=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,               0, 0, 0, 0, 0, 0, 0, 0], dtype=uint8)        swat_data=array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,               0, 0, 0, 0], dtype=uint8)        counters=array([  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,                 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,                 0,   0,   1,   0,   0,   0,  31,   0,   0,   0, 243, 170, 204,                 0,   0,   0,   0,   0], dtype=uint8)        chips_flags=array([    0,     0,     0,     0,     0,     0,     0,     0, 61440,                 245, 61440,   250, 61440,   253, 61440,   249], dtype=uint16)        first_capacitor_id=array([    0,     0,     0,     0,     0,     0,     0,     0, 61440,                 251, 61440,   251, 61440,   241, 61440,   245], dtype=uint16)        drs_tag_status=array([ 0, 12], dtype=uint8)        drs_tag=array([   0,    0, ..., 2021, 2360], dtype=uint16))    digicam=DigiCamEvent(        ))&gt;&gt;&gt; event.waveformarray([  0,   0,   0, ..., 292, 288, 263], dtype=uint16)````event` supports tab-completion, which I regard as very important while exploring.It is implemented using [`collections.namedtuple`](https://docs.python.org/3.6/library/collections.html#collections.namedtuple).I tried to create a useful string represenation, it is very long, yes ... but Ihope you can still enjoy it:```python&gt;&gt;&gt; eventCameraEvent(    telescopeID=1    dateMJD=0.0    eventType=&lt;eventType.NONE: 0&gt;    eventNumber=97750287    arrayEvtNum=0    hiGain=PixelsChannel(        waveforms=WaveFormData(            samples=array([241, 245, ..., 214, 215], dtype=int16)            pixelsIndices=array([425, 461, ..., 727, 728], dtype=uint16)            firstSplIdx=array([], dtype=float64)            num_samples=0            baselines=array([232, 245, ..., 279, 220], dtype=int16)            peak_time_pos=array([], dtype=float64)            time_over_threshold=array([], dtype=float64))        integrals=IntegralData(            gains=array([], dtype=float64)            maximumTimes=array([], dtype=float64)            tailTimes=array([], dtype=float64)            raiseTimes=array([], dtype=float64)            pixelsIndices=array([], dtype=float64)            firstSplIdx=array([], dtype=float64)))# [...]```### Table header`fits.fz` files are still normal [FITS files](https://fits.gsfc.nasa.gov/) andeach Table in the file corresponds to a so called &quot;BINTABLE&quot; extension, which has aheader. You can access this header like this:```&gt;&gt;&gt; file.EventsTable(100xDataModel.CameraEvent)&gt;&gt;&gt; file.Events.header# this is just a sulection of all the contents of the headerXTENSION= 'BINTABLE'           / binary table extensionBITPIX  =                    8 / 8-bit bytesNAXIS   =                    2 / 2-dimensional binary tableNAXIS1  =                  192 / width of table in bytesNAXIS2  =                    1 / number of rows in tableTFIELDS =                   12 / number of fields in each rowEXTNAME = 'Events'             / name of extension tableCHECKSUM= 'BnaGDmS9BmYGBmY9'   / Checksum for the whole HDUDATASUM = '1046602664'         / Checksum for the data blockDATE    = '2017-10-31T02:04:55' / File creation dateORIGIN  = 'CTA'                / Institution that wrote the fileWORKPKG = 'ACTL'               / Workpackage that wrote the fileDATEEND = '1970-01-01T00:00:00' / File closing datePBFHEAD = 'DataModel.CameraEvent' / Written message nameCREATOR = 'N4ACTL2IO14ProtobufZOFitsE' / Class that wrote this fileCOMPILED= 'Oct 26 2017 16:02:50' / Compile timeTIMESYS = 'UTC'                / Time system&gt;&gt;&gt; file.Events.header['DATE']'2017-10-31T02:04:55'&gt;&gt;&gt; type(file.Events.header)&lt;class 'astropy.io.fits.header.Header'&gt;```The header is provided by [`astropy`](http://docs.astropy.org/en/stable/io/fits/#working-with-fits-headers).### Isn't this a little slow?Well, indeed, converting the original google protobuf instances into namedtuples full of&quot;useful&quot; Python values takes time. And in case you for example know exactly what you wantfrom the file, then you can get a speed up doing it like this:```&gt;&gt;&gt; from protozfits import File&gt;&gt;&gt; file = File(example_path, pure_protobuf=True)&gt;&gt;&gt; event = next(file.Events)&gt;&gt;&gt; type(event)&lt;class 'L0_pb2.CameraEvent'&gt;```Now iterating over the file is much faster then before. But you have notab-completion and some contents are useless for you, but some are just fine:```&gt;&gt;&gt; event.eventNumber97750288   # &lt;--- just fine&gt;&gt;&gt; event.hiGain.waveforms.samplestype: S16data: &quot;\362\000\355\000 ... &quot;   # &lt;---- goes on &quot;forever&quot; .. utterly useless&gt;&gt;&gt; type(event.hiGain.waveforms.samples)&lt;class 'CoreMessages_pb2.AnyArray'&gt;```You can convert these `AnyArray`s into numpy arrays like this:```&gt;&gt;&gt; from protozfits import any_array_to_numpy&gt;&gt;&gt; any_array_to_numpy(event.hiGain.waveforms.samples)array([242, 237, 234, ..., 218, 225, 229], dtype=int16)```So ... I hope based on this little example you can implement your own reader,which is optimized for your telescope.If you have questions, please open an issue or a pull request to improve this documentation.## InstallationWe all use [Anaconda](https://www.anaconda.com/) and this package is testedagainst Anaconda and python 3.5, 3.6 and 3.7. You can [download anaconda](https://www.anaconda.com/download) for your system for free.You do not have to use a [conda environment](https://conda.io/docs/user-guide/tasks/manage-environments.html) to use this package. It cleanly installs and uninstalls with [pip](https://docs.python.org/3.6/installing/). If you plan to play around with different versions of this package your might want to use environments though.Installing from source (including from PyPI on macOS) requires a C++11 compiler,`protobuf` and `zeromq` with development headers.On macOS, we recommend using brew and then `brew install zeromq protobuf`.### Linux / OSX (with anaconda)    pip install protozfits### Most common issues and possible remedies- Cannot import `_message`, message along the lines of:```    from google.protobuf.pyext import _message    ImportError: cannot import name _message```Try uninstalling conda-protobuf and reinstalling from pypi, like this:    conda uninstall protobuf --yes    pip install protobuf### Editable installsEditable installs `pip installa -e .` are possible, but remember thatwe have compiled components, so editable only works for thepython part of the bindings. Any changes to the C++ code require running`pip install -e .` to compile again.</longdescription>
</pkgmetadata>