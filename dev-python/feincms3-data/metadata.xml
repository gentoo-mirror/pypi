<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============feincms3-data=============.. image:: https://github.com/matthiask/feincms3-data/actions/workflows/tests.yml/badge.svg    :target: https://github.com/matthiask/feincms3-data/    :alt: CI StatusWhy===Utilities for loading and dumping database data as JSON.These utilities (partially) replace Django's built-in ``dumpdata`` and``loaddata`` management commands.Suppose you want to move data between systems incrementally. In this case itisn't sufficient to only know the data which has been created or updated; youalso want to know which data has been deleted in the meantime. Django's``dumpdata`` and ``loaddata`` management commands only support the former case,not the latter. They also do not including dependent objects in the dump.This package offers utilities and management commands to address theseshortcomings.How===``pip install feincms3-data``.Add ``feincms3_data`` to ``INSTALLED_APPS`` so that the included managementcommands are discovered.Add datasets somewhere describing the models and relationships you want todump, e.g. in a module named ``app.f3datasets``:.. code-block:: python    from feincms3_data.data import (        specs_for_app_models,        specs_for_derived_models,        specs_for_models,    )    from app.dashboard import models as dashboard_models    from app.world import models as world_models    def districts(args):        pks = [int(arg) for arg in args.split(&quot;,&quot;) if arg]        return [            *specs_for_models(                [world_models.District],                {                    &quot;filter&quot;: {&quot;pk__in&quot;: pks},                    &quot;delete_missing&quot;: True,                },            ),            *specs_for_models(                [world_models.Exercise],                {                    &quot;filter&quot;: {&quot;district__in&quot;: pks},                    &quot;delete_missing&quot;: True,                },            ),            # All derived non-abstract models which aren't proxies:            *specs_for_derived_models(                world_models.ExercisePlugin,                {                    &quot;filter&quot;: {&quot;parent__district__in&quot;: pks},                    &quot;delete_missing&quot;: True,                },            ),        ]    def datasets():        return {            &quot;articles&quot;: {                &quot;specs&quot;: lambda args: specs_for_app_models(                    &quot;articles&quot;,                    {&quot;delete_missing&quot;: True},                ),            },            &quot;pages&quot;: {                &quot;specs&quot;: lambda args: specs_for_app_models(                    &quot;pages&quot;,                    {&quot;delete_missing&quot;: True},                ),            },            &quot;teachingmaterials&quot;: {                &quot;specs&quot;: lambda args: specs_for_models(                    [                        dashboard_models.TeachingMaterialGroup,                        dashboard_models.TeachingMaterial,                    ],                    {&quot;delete_missing&quot;: True},                ),            },            &quot;districts&quot;: {                &quot;specs&quot;: districts,            },        }Add a setting with the Python module path to the specs function:.. code-block:: python    FEINCMS3_DATA_DATASETS = &quot;app.f3datasets.datasets&quot;Now, to dump e.g. pages you would run::    ./manage.py f3dumpdata pages &gt; tmp/pages.jsonTo dump the districts with the primary key of 42 and 43 you would run::    ./manage.py f3dumpdata districts:42,43 &gt; tmp/districts.jsonThe resulting JSON file has three top-level keys:- ``&quot;version&quot;: 1``: The version of the dump, because not versioning dumps is a  recipe for pain down the road.- ``&quot;specs&quot;: [...]``: A list of model specs.- ``&quot;objects&quot;: [...]``: A list of model instances; uses the same serializer as  Django's ``dumpdata``, everything looks the same.Model specs consist of the following fields:- ``&quot;model&quot;``: The lowercased label (``app_label.model_name``) of a model.- ``&quot;filter&quot;``: A dictionary which can be passed to the ``.filter()`` queryset  method as keyword arguments; used for determining the objects to dump and the  objects to remove after loading.- ``&quot;delete_missing&quot;``: This flag makes the loader delete all objects matching  ``&quot;filter&quot;`` which do not exist in the dump.- ``&quot;ignore_missing_m2m&quot;``: A list of field names where deletions of related  models should be ignored when restoring. This may be especially useful when  only transferring content partially between databases.- ``&quot;save_as_new&quot;``: If present and truish, objects are inserted using new  primary keys into the database instead of (potentially) overwriting  pre-existing objects.- ``&quot;defer_values&quot;``: A list of fields which should receive random garbage when  loading initially and only receive their real value later. This is especially  useful to avoid unique constraint errors when loading partial graphs.The dumps can be loaded back into the database by running::    ./manage.py f3loaddata -v2 tmp/pages.json tmp/districts.jsonEach dump is processed in an individual transaction. The data is first loadedinto the database; at the end, data *matching* the filters but whose primarykey wasn't contained in the dump is deleted from the database (if``&quot;delete_missing&quot;: True``).</longdescription>
</pkgmetadata>