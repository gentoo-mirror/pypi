<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Koda ValidateBuild typesafe validators automatically or explicitly -- or write your own. Combine them tobuild validators of arbitrary complexity. Koda Validate is async-friendly, pure Python, and1.5x - 12x faster than Pydantic.Docs: [https://koda-validate.readthedocs.io/en/stable/](https://koda-validate.readthedocs.io/en/stable/)```pythonfrom typing import TypedDictfrom koda_validate import (StringValidator, MaxLength, MinLength,                           ListValidator, TypedDictValidator, Valid, Invalid)from koda_validate.serialization import to_serializable_errsfrom koda_validate.signature import validate_signature# Automatic Validatorsclass Person(TypedDict):    name: str    hobbies: list[str]person_validator = TypedDictValidator(Person)# Produce readable errorsmatch person_validator({&quot;name&quot;: &quot;Guido&quot;}):    case Valid(string_list):        print(f&quot;woohoo, valid!&quot;)    case Invalid() as invalid:        print(to_serializable_errs(invalid))# prints: {'hobbies': ['key missing']}# Explicit Validatorsstring_validator = StringValidator(MinLength(8), MaxLength(20))list_string_validator = ListValidator(string_validator)# Runtime type checking@validate_signaturedef add(a: int, b: int) -&gt; int:    return a + b```There's much, much more... Check out the [Docs](https://koda-validate.readthedocs.io/en/stable/).## Something's Missing Or Wrong Open an [issue on GitHub](https://github.com/keithasaurus/koda-validate/issues) please!</longdescription>
</pkgmetadata>