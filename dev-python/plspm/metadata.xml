<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PLSPM: A library implementing Partial Least Squares Path Modeling [![PyPI version](https://badge.fury.io/py/plspm.svg)](https://badge.fury.io/py/plspm)_Please note: This is not an officially supported Google product._**plspm** is a Python 3 package dedicated to Partial Least Squares Path Modeling (PLS-PM) analysis. It is a port of the R package [plspm](https://github.com/gastonstat/plspm), with additional features adopted from the R package [seminr](https://github.com/sem-in-r/seminr)PLSPM (partial least squares path modeling) is a correlation-based structural equation modeling (SEM) algorithm. It allows for estimation of complex cause-effect or prediction models using latent/manifest variables. PLSPM may be preferred to other SEM methods for several reasons: it is a method that is appropriate for exploratory research, can be used with small-to-medium sample sizes (as well as large data sets), and does not require assumptions of multivariate normality. (See Hulland, J. (1999). Use of partial least squares (PLS) in strategic management research: a review of four recent studies. Strategic management journal, 20(2), 195-204.) In contrast to covariance-based SEM (CBSEM), goodness of fit is less important, because the purpose of the algorithm is to optimize for prediction of the dependent variable vs. fit of data to a predetermined model. (See &quot;goodness of fit&quot; vs &quot;goodness of model&quot; in Chin, W. W. (2010). How to write up and report PLS analyses. In Handbook of partial least squares (pp. 655-690). Springer, Berlin, Heidelberg.)### Features* Uses variance-based PLS esimation to model composite constructs using Mode A and Mode B* Uses a natural-feeling, domain specific language to build and estimate structural equation models, including second-order constructs* Supports centroid, factorial, and path schemes* Supports metric and non-metric numerical data (including nominal and ordinal)* Handles missing data* Bootstrapping with multi-core support* Tested against [seminr](https://github.com/sem-in-r/seminr), which is, in turn, tested against SmartPLS (Ringle et al., 2015) and ADANCO (Henseler and Dijkstra, 2015), as well as other R packages such as semPLS (Monecke and Leisch, 2012) and matrixpls (Rönkkö, 2016).### Planned but not yet implemented* Native modeling of moderation* Improved assessment measures such as HTMT, VIF, f^2, Q^2, and q^2* Modeling formative constructs using the PLS consistent (PLSc) algorithm## InstallationYou can install the latest version of this package using pip:```shpython3 -m pip install --user plspm```It's hosted on pypi: https://pypi.org/project/plspm/## Useplspm expects to get a Pandas DataFrame containing your data. You start by creating a [Config](https://plspm.readthedocs.io/en/latest/source/plspm.config.html) object with the details of the model, and then pass it, along with the data and optionally some further configuration, to an instance of [Plspm](https://plspm.readthedocs.io/en/latest/source/plspm.plspm.html). Use the examples below to get started, or browse the [documentation](https://plspm.readthedocs.io/) (start with [Config](https://plspm.readthedocs.io/en/latest/source/plspm.config.html) and [Plspm](https://plspm.readthedocs.io/en/latest/source/plspm.plspm.html))## Examples### PLS-PM with metric dataTypical example with a Customer Satisfaction Model```py#!/usr/bin/env python3import pandas as pd, plspm.config as cfrom plspm.plspm import Plspmfrom plspm.scheme import Schemefrom plspm.mode import Modesatisfaction = pd.read_csv(&quot;file:tests/data/satisfaction.csv&quot;, index_col=0)structure = c.Structure()structure.add_path([&quot;IMAG&quot;], [&quot;EXPE&quot;, &quot;SAT&quot;, &quot;LOY&quot;])structure.add_path([&quot;EXPE&quot;], [&quot;QUAL&quot;, &quot;VAL&quot;, &quot;SAT&quot;])structure.add_path([&quot;QUAL&quot;], [&quot;VAL&quot;, &quot;SAT&quot;])structure.add_path([&quot;VAL&quot;], [&quot;SAT&quot;])structure.add_path([&quot;SAT&quot;], [&quot;LOY&quot;])config = c.Config(structure.path(), scaled=False)config.add_lv_with_columns_named(&quot;IMAG&quot;, Mode.A, satisfaction, &quot;imag&quot;)config.add_lv_with_columns_named(&quot;EXPE&quot;, Mode.A, satisfaction, &quot;expe&quot;)config.add_lv_with_columns_named(&quot;QUAL&quot;, Mode.A, satisfaction, &quot;qual&quot;)config.add_lv_with_columns_named(&quot;VAL&quot;, Mode.A, satisfaction, &quot;val&quot;)config.add_lv_with_columns_named(&quot;SAT&quot;, Mode.A, satisfaction, &quot;sat&quot;)config.add_lv_with_columns_named(&quot;LOY&quot;, Mode.A, satisfaction, &quot;loy&quot;)plspm_calc = Plspm(satisfaction, config, Scheme.CENTROID)print(plspm_calc.inner_summary())print(plspm_calc.path_coefficients())```This will produce the output:```            type  r_squared  block_communality  mean_redundancy       aveEXPE  Endogenous   0.335194           0.616420         0.206620  0.616420IMAG   Exogenous   0.000000           0.582269         0.000000  0.582269LOY   Endogenous   0.509923           0.639052         0.325867  0.639052QUAL  Endogenous   0.719688           0.658572         0.473966  0.658572SAT   Endogenous   0.707321           0.758891         0.536779  0.758891VAL   Endogenous   0.590084           0.664416         0.392061  0.664416          IMAG      EXPE      QUAL       VAL       SAT  LOYIMAG  0.000000  0.000000  0.000000  0.000000  0.000000    0EXPE  0.578959  0.000000  0.000000  0.000000  0.000000    0QUAL  0.000000  0.848344  0.000000  0.000000  0.000000    0VAL   0.000000  0.105478  0.676656  0.000000  0.000000    0SAT   0.200724 -0.002754  0.122145  0.589331  0.000000    0LOY   0.275150  0.000000  0.000000  0.000000  0.495479    0```### Specifying higher-order constructsExample using [seminr](https://github.com/sem-in-r/seminr)'s mobile industry data set:```pymobi = pd.read_csv(&quot;file:tests/data/mobi.csv&quot;, index_col=0)structure = c.Structure()structure.add_path([&quot;Expectation&quot;, &quot;Quality&quot;], [&quot;Satisfaction&quot;])structure.add_path([&quot;Satisfaction&quot;], [&quot;Complaints&quot;, &quot;Loyalty&quot;])config = c.Config(structure.path(), default_scale=Scale.NUM)config.add_higher_order(&quot;Satisfaction&quot;, Mode.A, [&quot;Image&quot;, &quot;Value&quot;])config.add_lv_with_columns_named(&quot;Expectation&quot;, Mode.A, mobi, &quot;CUEX&quot;)config.add_lv_with_columns_named(&quot;Quality&quot;, Mode.B, mobi, &quot;PERQ&quot;)config.add_lv_with_columns_named(&quot;Loyalty&quot;, Mode.A, mobi, &quot;CUSL&quot;)config.add_lv_with_columns_named(&quot;Image&quot;, Mode.A, mobi, &quot;IMAG&quot;)config.add_lv_with_columns_named(&quot;Complaints&quot;, Mode.A, mobi, &quot;CUSCO&quot;)config.add_lv_with_columns_named(&quot;Value&quot;, Mode.A, mobi, &quot;PERV&quot;)mobi_pls = Plspm(mobi, config, Scheme.PATH, 100, 0.00000001)print(plspm_calc.inner_model())```This will produce the output:```                                     from            to  estimate  std error          t         p&gt;|t|index                                                                                                Quality -&gt; Satisfaction           Quality  Satisfaction  0.743041   0.046318  16.042102  3.633866e-40Expectation -&gt; Satisfaction   Expectation  Satisfaction  0.089572   0.046318   1.933832  5.427626e-02Satisfaction -&gt; Loyalty      Satisfaction       Loyalty  0.627940   0.049420  12.706272  7.996788e-29Satisfaction -&gt; Complaints   Satisfaction    Complaints  0.486696   0.055472   8.773752  2.841768e-16```### PLS-PM with nonmetric dataExample with the classic Russett data (original data set)```py#!/usr/bin/env python3import pandas as pd, plspm.config as cfrom plspm.plspm import Plspmfrom plspm.scale import Scalefrom plspm.scheme import Schemefrom plspm.mode import Moderussa = pd.read_csv(&quot;file:tests/data/russa.csv&quot;, index_col=0)structure = c.Structure()structure.add_path([&quot;AGRI&quot;, &quot;IND&quot;], [&quot;POLINS&quot;])config = c.Config(structure.path(), default_scale=Scale.NUM)config.add_lv(&quot;AGRI&quot;, Mode.A, c.MV(&quot;gini&quot;), c.MV(&quot;farm&quot;), c.MV(&quot;rent&quot;))config.add_lv(&quot;IND&quot;, Mode.A, c.MV(&quot;gnpr&quot;), c.MV(&quot;labo&quot;))config.add_lv(&quot;POLINS&quot;, Mode.A, c.MV(&quot;ecks&quot;), c.MV(&quot;death&quot;), c.MV(&quot;demo&quot;), c.MV(&quot;inst&quot;))plspm_calc = Plspm(russa, config, Scheme.CENTROID, 100, 0.0000001)print(plspm_calc.inner_summary())print(plspm_calc.effects())```This will produce the output:```              type  r_squared  block_communality  mean_redundancy       aveAGRI     Exogenous   0.000000           0.739560         0.000000  0.739560IND      Exogenous   0.000000           0.907524         0.000000  0.907524POLINS  Endogenous   0.592258           0.565175         0.334729  0.565175   from      to    direct  indirect     total0  AGRI  POLINS  0.225639       0.0  0.2256391   IND  POLINS  0.671457       0.0  0.671457```#### Example 2: Different ScalingPLS-PM using data set `russa`, and different scaling```py#!/usr/bin/python3import pandas as pd, plspm.config as c, plspm.util as utilfrom plspm.plspm import Plspmfrom plspm.scale import Scalefrom plspm.scheme import Schemefrom plspm.mode import Moderussa = pd.read_csv(&quot;file:tests/data/russa.csv&quot;, index_col=0)structure = c.Structure()structure.add_path([&quot;AGRI&quot;, &quot;IND&quot;], [&quot;POLINS&quot;])config = c.Config(structure.path(), default_scale=Scale.NUM)config.add_lv(&quot;AGRI&quot;, Mode.A, c.MV(&quot;gini&quot;), c.MV(&quot;farm&quot;), c.MV(&quot;rent&quot;))config.add_lv(&quot;IND&quot;, Mode.A, c.MV(&quot;gnpr&quot;, Scale.ORD), c.MV(&quot;labo&quot;, Scale.ORD))config.add_lv(&quot;POLINS&quot;, Mode.A, c.MV(&quot;ecks&quot;), c.MV(&quot;death&quot;), c.MV(&quot;demo&quot;, Scale.NOM), c.MV(&quot;inst&quot;))plspm_calc = Plspm(russa, config, Scheme.CENTROID, 100, 0.0000001)```#### Example 3: Missing Data```py#!/usr/bin/env python3import pandas as pd, plspm.config as cfrom plspm.plspm import Plspmfrom plspm.scale import Scalefrom plspm.scheme import Schemefrom plspm.mode import Moderussa = pd.read_csv(&quot;file:tests/data/russa.csv&quot;, index_col=0)russa.iloc[0, 0] = np.NaNrussa.iloc[3, 3] = np.NaNrussa.iloc[5, 5] = np.NaNstructure = c.Structure()structure.add_path([&quot;AGRI&quot;, &quot;IND&quot;], [&quot;POLINS&quot;])config = c.Config(structure.path(), default_scale=Scale.NUM)config.add_lv(&quot;AGRI&quot;, Mode.A, c.MV(&quot;gini&quot;), c.MV(&quot;farm&quot;), c.MV(&quot;rent&quot;))config.add_lv(&quot;IND&quot;, Mode.A, c.MV(&quot;gnpr&quot;), c.MV(&quot;labo&quot;))config.add_lv(&quot;POLINS&quot;, Mode.A, c.MV(&quot;ecks&quot;), c.MV(&quot;death&quot;), c.MV(&quot;demo&quot;), c.MV(&quot;inst&quot;))plspm_calc = Plspm(russa, config, Scheme.CENTROID, 100, 0.0000001)```## Maintainers[Jez Humble](https://continuousdelivery.com/)  (`humble at google.com`)[Nicole Forsgren](https://nicolefv.com/)  (`nicolefv at google.com`)</longdescription>
</pkgmetadata>