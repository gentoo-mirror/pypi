<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build Status| |Docs| |codecov.io| |Blue|The Falcon Web Framework========================`Falcon &lt;https://falconframework.org&gt;`__ is a minimalist ASGI/WSGI framework forbuilding mission-critical REST APIs and microservices, with a focus onreliability, correctness, and performance at scale.When it comes to building HTTP APIs, other frameworks weigh you down with tonsof dependencies and unnecessary abstractions. Falcon cuts to the chase with aclean design that embraces HTTP and the REST architectural style.Falcon apps work with any `WSGI &lt;https://www.python.org/dev/peps/pep-3333/&gt;`_or `ASGI &lt;https://asgi.readthedocs.io/en/latest/&gt;`_ server, and run like achamp under CPython 3.5+ and PyPy 3.5+ (3.6+ required for ASGI).Quick Links-----------* `Read the docs &lt;https://falcon.readthedocs.io/en/stable&gt;`_  (`FAQ &lt;https://falcon.readthedocs.io/en/stable/user/faq.html&gt;`_ -  `getting help &lt;https://falcon.readthedocs.io/en/stable/community/help.html&gt;`_ -  `reference &lt;https://falcon.readthedocs.io/en/stable/api/index.html&gt;`_)* `Falcon add-ons and complementary packages &lt;https://github.com/falconry/falcon/wiki&gt;`_* `Falcon articles, talks and podcasts &lt;https://github.com/falconry/falcon/wiki/Articles,-Talks-and-Podcasts&gt;`_* `falconry/user for Falcon users &lt;https://gitter.im/falconry/user&gt;`_ @ Gitter* `falconry/dev for Falcon contributors &lt;https://gitter.im/falconry/dev&gt;`_ @ GitterWhat People are Saying----------------------&quot;Falcon is rock solid and it's fast.&quot;&quot;We have been using Falcon as a replacement for [another framework] andwe simply love the performance (three times faster) and code base size (easilyhalf of our [original] code).&quot;&quot;I'm loving #falconframework! Super clean and simple, I finallyhave the speed and flexibility I need!&quot;&quot;Falcon looks great so far. I hacked together a quick test for atiny server of mine and was ~40% faster with only 20 minutes ofwork.&quot;&quot;I feel like I'm just talking HTTP at last, with nothing in themiddle. Falcon seems like the requests of backend.&quot;&quot;The source code for Falcon is so good, I almost prefer it todocumentation. It basically can't be wrong.&quot;&quot;What other framework has integrated support for 786 TRY IT NOW ?&quot;Features--------Falcon tries to do as little as possible while remaining highly effective.- ASGI, WSGI, and WebSocket support- Native ``asyncio`` support- No reliance on magic globals for routing and state management- Stable interfaces with an emphasis on backwards-compatibility- Simple API modeling through centralized RESTful routing- Highly-optimized, extensible code base- Easy access to headers and bodies through request and response  classes- DRY request processing via middleware components and hooks- Strict adherence to RFCs- Idiomatic HTTP error responses- Straightforward exception handling- Snappy testing with WSGI/ASGI helpers and mocks- CPython 3.5+ and PyPy 3.5+ supportSupport Falcon Development--------------------------Has Falcon helped you make an awesome app? Show your support today with a one-time donation or by becoming a patron. Supporters get cool gear, an opportunity to promote their brand to Python developers, andprioritized support.* `Learn how to support Falcon development &lt;https://falconframework.org/#sectionSupportFalconDevelopment&gt;`_Thanks!How is Falcon Different?------------------------    Perfection is finally attained not when there is no longer anything    to add, but when there is no longer anything to take away.    *- Antoine de Saint-Exup√©ry*We designed Falcon to support the demanding needs of large-scalemicroservices and responsive app backends. Falcon complements moregeneral Python web frameworks by providing bare-metal performance,reliability, and flexibility wherever you need it.**Reliable.** We go to great lengths to avoid introducing breaking changes, andwhen we do they are fully documented and only introduced (in the spirit of`SemVer &lt;http://semver.org/&gt;`_) with a major version increment. The code isrigorously tested with numerous inputs and we require 100% coverage at alltimes. Falcon has no dependencies outside the standard library, helpingminimize your app's attack surface while avoiding transitive bugs and breakingchanges.**Debuggable.** Falcon eschews magic. It's easy to tell which inputs lead towhich outputs. Unhandled exceptions are never encapsulated or masked.Potentially surprising behaviors, such as automatic request body parsing, arewell-documented and disabled by default. Finally, when it comes to theframework itself, we take care to keep logic paths simple and understandable.All this makes it easier to reason about the code and to debug edge cases inlarge-scale deployments.**Fast.** Same hardware, more requests. Falcon turns around requestssignificantly faster than other popular Python frameworks like Django andFlask. For an extra speed boost, Falcon compiles itself with Cython whenavailable, and also works well with `PyPy &lt;https://pypy.org&gt;`_. Considering amove to another programming language? Benchmark with Falcon+PyPy first!**Flexible.** Falcon leaves a lot of decisions and implementation details toyou, the API developer. This gives you a lot of freedom to customize and tuneyour implementation. It also helps you understand your apps at a deeper level,making them easier to tune, debug, and refactor over the long run. Falcon'sminimalist design provides space for Python community members to independentlyinnovate on `Falcon add-ons and complementary packages&lt;https://github.com/falconry/falcon/wiki&gt;`_.Who's Using Falcon?-------------------Falcon is used around the world by a growing number of organizations,including:- 7ideas- Cronitor- EMC- Hurricane Electric- Leadpages- OpenStack- Rackspace- Shiftgig- tempfil.es- Opera SoftwareIf you are using the Falcon framework for a community or commercialproject, please consider adding your information to our wiki under`Who's Using Falcon? &lt;https://github.com/falconry/falcon/wiki/Who's-using-Falcon%3F&gt;`_Community---------A number of Falcon add-ons, templates, and complementary packages areavailable for use in your projects. We've listed several of these on the`Falcon wiki &lt;https://github.com/falconry/falcon/wiki&gt;`_ as a startingpoint, but you may also wish to search PyPI for additional resources.The Falconry community on Gitter is a great place to ask questions andshare your ideas. You can find us in `falconry/user&lt;https://gitter.im/falconry/user&gt;`_. We also have a`falconry/dev &lt;https://gitter.im/falconry/dev&gt;`_ room for discussingthe design and development of the framework itself.Per our`Code of Conduct &lt;https://github.com/falconry/falcon/blob/master/CODEOFCONDUCT.md&gt;`_,we expect everyone who participates in community discussions to actprofessionally, and lead by example in encouraging constructivediscussions. Each individual in the community is responsible forcreating a positive, constructive, and productive culture.Installation------------PyPy^^^^`PyPy &lt;http://pypy.org/&gt;`__ is the fastest way to run your Falcon app.PyPy3.5+ is supported as of PyPy v5.10... code:: bash    $ pip install falconOr, to install the latest beta or release candidate, if any:.. code:: bash    $ pip install --pre falconCPython^^^^^^^Falcon also fully supports`CPython &lt;https://www.python.org/downloads/&gt;`__ 3.5+.The latest stable version of Falcon can be installed directly from PyPI:.. code:: bash    $ pip install falconOr, to install the latest beta or release candidate, if any:.. code:: bash    $ pip install --pre falconIn order to provide an extra speed boost, Falcon can compile itself withCython. Wheels containing pre-compiled binaries are available from PyPI forseveral common platforms. However, if a wheel for your platform of choice is notavailable, you can install the source distribution. The installation processwill automatically try to cythonize Falcon for your environment, falling back toa normal pure-Python install if any issues are encountered during thecythonization step:.. code:: bash    $ pip install --no-binary :all: falconIf you want to verify that Cython is being invoked, simplypass the verbose flag `-v` to pip in order to echo the compilation commands.The cythonization step is only active when using the ``CPython`` Pythonimplementation, so installing using ``PyPy`` will skip it.If you want to skip Cython compilation step and installthe pure-Python version directly you can set the environment variable``FALCON_DISABLE_CYTHON`` to a non empty value before install:.. code:: bash    $ FALCON_DISABLE_CYTHON=Y pip install -v --no-binary :all: falconPlease note that ``pip&gt;=10`` is required to be able to install Falcon fromsource.**Installing on OS X**Xcode Command Line Tools are required to compile Cython. Install themwith this command:.. code:: bash    $ xcode-select --installThe Clang compiler treats unrecognized command-line options aserrors, for example:.. code:: bash    clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]You might also see warnings about unused functions. You can work aroundthese issues by setting additional Clang C compiler flags as follows:.. code:: bash    $ export CFLAGS=&quot;-Qunused-arguments -Wno-unused-function&quot;Dependencies^^^^^^^^^^^^Falcon does not require the installation of any other packages, although ifCython has been installed into the environment, it will be used to optimizethe framework as explained above.WSGI Server-----------Falcon speaks `WSGI &lt;https://www.python.org/dev/peps/pep-3333/&gt;`_ (or`ASGI &lt;https://asgi.readthedocs.io/en/latest/&gt;`_; see also below). In order toserve a Falcon app, you will need a WSGI server. Gunicorn and uWSGI are some ofthe more popular ones out there, but anything that can load a WSGI app will do... code:: bash    $ pip install [gunicorn|uwsgi]ASGI Server-----------In order to serve a Falcon ASGI app, you will need an ASGI server. Uvicornis a popular choice:.. code:: bash    $ pip install uvicornSource Code-----------Falcon `lives on GitHub &lt;https://github.com/falconry/falcon&gt;`_, making thecode easy to browse, download, fork, etc. Pull requests are always welcome! Also,please remember to star the project if it makes you happy. :)Once you have cloned the repo or downloaded a tarball from GitHub, youcan install Falcon like this:.. code:: bash    $ cd falcon    $ pip install .Or, if you want to edit the code, first fork the main repo, clone the forkto your desktop, and then run the following to install it using symboliclinking, so that when you change your code, the changes will be automagicallyavailable to your app without having to reinstall the package:.. code:: bash    $ cd falcon    $ pip install -e .You can manually test changes to the Falcon framework by switching to thedirectory of the cloned repo and then running pytest:.. code:: bash    $ cd falcon    $ pip install -r requirements/tests    $ pytest testsOr, to run the default set of tests:.. code:: bash    $ pip install tox &amp;&amp; toxSee also the `tox.ini &lt;https://github.com/falconry/falcon/blob/master/tox.ini&gt;`_file for a full list of available environments.Read the Docs-------------The docstrings in the Falcon code base are quite extensive, and werecommend keeping a REPL running while learning the framework so thatyou can query the various modules and classes as you have questions.Online docs are available at: https://falcon.readthedocs.ioYou can build the same docs locally as follows:.. code:: bash    $ pip install tox &amp;&amp; tox -e docsOnce the docs have been built, you can view them by opening the followingindex page in your browser. On OS X it's as simple as::    $ open docs/_build/html/index.htmlOr on Linux:.. code:: bash    $ xdg-open docs/_build/html/index.htmlGetting Started---------------Here is a simple, contrived example showing how to create a Falcon-basedWSGI app (the ASGI version is included further down):.. code:: python    # examples/things.py    # Let's get this party started!    from wsgiref.simple_server import make_server    import falcon    # Falcon follows the REST architectural style, meaning (among    # other things) that you think in terms of resources and state    # transitions, which map to HTTP verbs.    class ThingsResource:        def on_get(self, req, resp):            &quot;&quot;&quot;Handles GET requests&quot;&quot;&quot;            resp.status = falcon.HTTP_200  # This is the default status            resp.content_type = falcon.MEDIA_TEXT  # Default is JSON, so override            resp.text = ('\nTwo things awe me most, the starry sky '                         'above me and the moral law within me.\n'                         '\n'                         '    ~ Immanuel Kant\n\n')    # falcon.App instances are callable WSGI apps...    # in larger applications the app is created in a separate file    app = falcon.App()    # Resources are represented by long-lived class instances    things = ThingsResource()    # things will handle all requests to the '/things' URL path    app.add_route('/things', things)    if __name__ == '__main__':        with make_server('', 8000, app) as httpd:            print('Serving on port 8000...')            # Serve until process is killed            httpd.serve_forever()You can run the above example directly using the included wsgiref server:.. code:: bash    $ pip install falcon    $ python things.pyThen, in another terminal:.. code:: bash    $ curl localhost:8000/thingsThe ASGI version of the example is similar:.. code:: python    # examples/things_asgi.py    import falcon    import falcon.asgi    # Falcon follows the REST architectural style, meaning (among    # other things) that you think in terms of resources and state    # transitions, which map to HTTP verbs.    class ThingsResource:        async def on_get(self, req, resp):            &quot;&quot;&quot;Handles GET requests&quot;&quot;&quot;            resp.status = falcon.HTTP_200  # This is the default status            resp.content_type = falcon.MEDIA_TEXT  # Default is JSON, so override            resp.text = ('\nTwo things awe me most, the starry sky '                         'above me and the moral law within me.\n'                         '\n'                         '    ~ Immanuel Kant\n\n')    # falcon.asgi.App instances are callable ASGI apps...    # in larger applications the app is created in a separate file    app = falcon.asgi.App()    # Resources are represented by long-lived class instances    things = ThingsResource()    # things will handle all requests to the '/things' URL path    app.add_route('/things', things)You can run the ASGI version with uvicorn or any other ASGI server:.. code:: bash    $ pip install falcon uvicorn    $ uvicorn things_asgi:appA More Complex Example (WSGI)-----------------------------Here is a more involved example that demonstrates reading headers and queryparameters, handling errors, and working with request and response bodies.Note that this example assumes that the`requests &lt;https://pypi.org/project/requests/&gt;`_ package has been installed.(For the equivalent ASGI app, see: `A More Complex Example (ASGI)`_)... code:: python    # examples/things_advanced.py    import json    import logging    import uuid    from wsgiref import simple_server    import falcon    import requests    class StorageEngine:        def get_things(self, marker, limit):            return [{'id': str(uuid.uuid4()), 'color': 'green'}]        def add_thing(self, thing):            thing['id'] = str(uuid.uuid4())            return thing    class StorageError(Exception):        @staticmethod        def handle(ex, req, resp, params):            # TODO: Log the error, clean up, etc. before raising            raise falcon.HTTPInternalServerError()    class SinkAdapter:        engines = {            'ddg': 'https://duckduckgo.com',            'y': 'https://search.yahoo.com/search',        }        def __call__(self, req, resp, engine):            url = self.engines[engine]            params = {'q': req.get_param('q', True)}            result = requests.get(url, params=params)            resp.status = str(result.status_code) + ' ' + result.reason            resp.content_type = result.headers['content-type']            resp.text = result.text    class AuthMiddleware:        def process_request(self, req, resp):            token = req.get_header('Authorization')            account_id = req.get_header('Account-ID')            challenges = ['Token type=&quot;Fernet&quot;']            if token is None:                description = ('Please provide an auth token '                               'as part of the request.')                raise falcon.HTTPUnauthorized(title='Auth token required',                                              description=description,                                              challenges=challenges,                                              href='http://docs.example.com/auth')            if not self._token_is_valid(token, account_id):                description = ('The provided auth token is not valid. '                               'Please request a new token and try again.')                raise falcon.HTTPUnauthorized(title='Authentication required',                                              description=description,                                              challenges=challenges,                                              href='http://docs.example.com/auth')        def _token_is_valid(self, token, account_id):            return True  # Suuuuuure it's valid...    class RequireJSON:        def process_request(self, req, resp):            if not req.client_accepts_json:                raise falcon.HTTPNotAcceptable(                    description='This API only supports responses encoded as JSON.',                    href='http://docs.examples.com/api/json')            if req.method in ('POST', 'PUT'):                if 'application/json' not in req.content_type:                    raise falcon.HTTPUnsupportedMediaType(                        title='This API only supports requests encoded as JSON.',                        href='http://docs.examples.com/api/json')    class JSONTranslator:        # NOTE: Normally you would simply use req.media and resp.media for        # this particular use case; this example serves only to illustrate        # what is possible.        def process_request(self, req, resp):            # req.stream corresponds to the WSGI wsgi.input environ variable,            # and allows you to read bytes from the request body.            #            # See also: PEP 3333            if req.content_length in (None, 0):                # Nothing to do                return            body = req.stream.read()            if not body:                raise falcon.HTTPBadRequest(title='Empty request body',                                            description='A valid JSON document is required.')            try:                req.context.doc = json.loads(body.decode('utf-8'))            except (ValueError, UnicodeDecodeError):                description = ('Could not decode the request body. The '                               'JSON was incorrect or not encoded as '                               'UTF-8.')                raise falcon.HTTPBadRequest(title='Malformed JSON',                                            description=description)        def process_response(self, req, resp, resource, req_succeeded):            if not hasattr(resp.context, 'result'):                return            resp.text = json.dumps(resp.context.result)    def max_body(limit):        def hook(req, resp, resource, params):            length = req.content_length            if length is not None and length &gt; limit:                msg = ('The size of the request is too large. The body must not '                       'exceed ' + str(limit) + ' bytes in length.')                raise falcon.HTTPPayloadTooLarge(                    title='Request body is too large', description=msg)        return hook    class ThingsResource:        def __init__(self, db):            self.db = db            self.logger = logging.getLogger('thingsapp.' + __name__)        def on_get(self, req, resp, user_id):            marker = req.get_param('marker') or ''            limit = req.get_param_as_int('limit') or 50            try:                result = self.db.get_things(marker, limit)            except Exception as ex:                self.logger.error(ex)                description = ('Aliens have attacked our base! We will '                               'be back as soon as we fight them off. '                               'We appreciate your patience.')                raise falcon.HTTPServiceUnavailable(                    title='Service Outage',                    description=description,                    retry_after=30)            # NOTE: Normally you would use resp.media for this sort of thing;            # this example serves only to demonstrate how the context can be            # used to pass arbitrary values between middleware components,            # hooks, and resources.            resp.context.result = result            resp.set_header('Powered-By', 'Falcon')            resp.status = falcon.HTTP_200        @falcon.before(max_body(64 * 1024))        def on_post(self, req, resp, user_id):            try:                doc = req.context.doc            except AttributeError:                raise falcon.HTTPBadRequest(                    title='Missing thing',                    description='A thing must be submitted in the request body.')            proper_thing = self.db.add_thing(doc)            resp.status = falcon.HTTP_201            resp.location = '/%s/things/%s' % (user_id, proper_thing['id'])    # Configure your WSGI server to load &quot;things.app&quot; (app is a WSGI callable)    app = falcon.App(middleware=[        AuthMiddleware(),        RequireJSON(),        JSONTranslator(),    ])    db = StorageEngine()    things = ThingsResource(db)    app.add_route('/{user_id}/things', things)    # If a responder ever raises an instance of StorageError, pass control to    # the given handler.    app.add_error_handler(StorageError, StorageError.handle)    # Proxy some things to another service; this example shows how you might    # send parts of an API off to a legacy system that hasn't been upgraded    # yet, or perhaps is a single cluster that all data centers have to share.    sink = SinkAdapter()    app.add_sink(sink, r'/search/(?P&lt;engine&gt;ddg|y)\Z')    # Useful for debugging problems in your API; works with pdb.set_trace(). You    # can also use Gunicorn to host your app. Gunicorn can be configured to    # auto-restart workers when it detects a code change, and it also works    # with pdb.    if __name__ == '__main__':        httpd = simple_server.make_server('127.0.0.1', 8000, app)        httpd.serve_forever()Again this code uses wsgiref, but you can also run the above example usingany WSGI server, such as uWSGI or Gunicorn. For example:.. code:: bash    $ pip install requests gunicorn    $ gunicorn things:appOn Windows you can run Gunicorn and uWSGI via WSL, or you might try Waitress:.. code:: bash    $ pip install requests waitress    $ waitress-serve --port=8000 things:appTo test this example, open another terminal and run:.. code:: bash    $ http localhost:8000/1/things authorization:custom-tokenYou can also view the application configuration from the CLI via the``falcon-inspect-app`` script that is bundled with the framework:.. code:: bash    falcon-inspect-app things_advanced:appA More Complex Example (ASGI)-----------------------------Here's the ASGI version of the app from above. Note that it uses the`httpx &lt;https://pypi.org/project/httpx/&gt;`_ package in lieu of`requests &lt;https://pypi.org/project/requests/&gt;`_... code:: python    # examples/things_advanced_asgi.py    import json    import logging    import uuid    import falcon    import falcon.asgi    import httpx    class StorageEngine:        async def get_things(self, marker, limit):            return [{'id': str(uuid.uuid4()), 'color': 'green'}]        async def add_thing(self, thing):            thing['id'] = str(uuid.uuid4())            return thing    class StorageError(Exception):        @staticmethod        async def handle(ex, req, resp, params):            # TODO: Log the error, clean up, etc. before raising            raise falcon.HTTPInternalServerError()    class SinkAdapter:        engines = {            'ddg': 'https://duckduckgo.com',            'y': 'https://search.yahoo.com/search',        }        async def __call__(self, req, resp, engine):            url = self.engines[engine]            params = {'q': req.get_param('q', True)}            async with httpx.AsyncClient() as client:                result = await client.get(url, params=params)            resp.status = result.status_code            resp.content_type = result.headers['content-type']            resp.text = result.text    class AuthMiddleware:        async def process_request(self, req, resp):            token = req.get_header('Authorization')            account_id = req.get_header('Account-ID')            challenges = ['Token type=&quot;Fernet&quot;']            if token is None:                description = ('Please provide an auth token '                               'as part of the request.')                raise falcon.HTTPUnauthorized(title='Auth token required',                                              description=description,                                              challenges=challenges,                                              href='http://docs.example.com/auth')            if not self._token_is_valid(token, account_id):                description = ('The provided auth token is not valid. '                               'Please request a new token and try again.')                raise falcon.HTTPUnauthorized(title='Authentication required',                                              description=description,                                              challenges=challenges,                                              href='http://docs.example.com/auth')        def _token_is_valid(self, token, account_id):            return True  # Suuuuuure it's valid...    class RequireJSON:        async def process_request(self, req, resp):            if not req.client_accepts_json:                raise falcon.HTTPNotAcceptable(                    description='This API only supports responses encoded as JSON.',                    href='http://docs.examples.com/api/json')            if req.method in ('POST', 'PUT'):                if 'application/json' not in req.content_type:                    raise falcon.HTTPUnsupportedMediaType(                        description='This API only supports requests encoded as JSON.',                        href='http://docs.examples.com/api/json')    class JSONTranslator:        # NOTE: Normally you would simply use req.get_media() and resp.media for        # this particular use case; this example serves only to illustrate        # what is possible.        async def process_request(self, req, resp):            # NOTE: Test explicitly for 0, since this property could be None in            # the case that the Content-Length header is missing (in which case we            # can't know if there is a body without actually attempting to read            # it from the request stream.)            if req.content_length == 0:                # Nothing to do                return            body = await req.stream.read()            if not body:                raise falcon.HTTPBadRequest(title='Empty request body',                                            description='A valid JSON document is required.')            try:                req.context.doc = json.loads(body.decode('utf-8'))            except (ValueError, UnicodeDecodeError):                description = ('Could not decode the request body. The '                               'JSON was incorrect or not encoded as '                               'UTF-8.')                raise falcon.HTTPBadRequest(title='Malformed JSON',                                            description=description)        async def process_response(self, req, resp, resource, req_succeeded):            if not hasattr(resp.context, 'result'):                return            resp.text = json.dumps(resp.context.result)    def max_body(limit):        async def hook(req, resp, resource, params):            length = req.content_length            if length is not None and length &gt; limit:                msg = ('The size of the request is too large. The body must not '                       'exceed ' + str(limit) + ' bytes in length.')                raise falcon.HTTPPayloadTooLarge(                    title='Request body is too large', description=msg)        return hook    class ThingsResource:        def __init__(self, db):            self.db = db            self.logger = logging.getLogger('thingsapp.' + __name__)        async def on_get(self, req, resp, user_id):            marker = req.get_param('marker') or ''            limit = req.get_param_as_int('limit') or 50            try:                result = await self.db.get_things(marker, limit)            except Exception as ex:                self.logger.error(ex)                description = ('Aliens have attacked our base! We will '                               'be back as soon as we fight them off. '                               'We appreciate your patience.')                raise falcon.HTTPServiceUnavailable(                    title='Service Outage',                    description=description,                    retry_after=30)            # NOTE: Normally you would use resp.media for this sort of thing;            # this example serves only to demonstrate how the context can be            # used to pass arbitrary values between middleware components,            # hooks, and resources.            resp.context.result = result            resp.set_header('Powered-By', 'Falcon')            resp.status = falcon.HTTP_200        @falcon.before(max_body(64 * 1024))        async def on_post(self, req, resp, user_id):            try:                doc = req.context.doc            except AttributeError:                raise falcon.HTTPBadRequest(                    title='Missing thing',                    description='A thing must be submitted in the request body.')            proper_thing = await self.db.add_thing(doc)            resp.status = falcon.HTTP_201            resp.location = '/%s/things/%s' % (user_id, proper_thing['id'])    # The app instance is an ASGI callable    app = falcon.asgi.App(middleware=[        # AuthMiddleware(),        RequireJSON(),        JSONTranslator(),    ])    db = StorageEngine()    things = ThingsResource(db)    app.add_route('/{user_id}/things', things)    # If a responder ever raises an instance of StorageError, pass control to    # the given handler.    app.add_error_handler(StorageError, StorageError.handle)    # Proxy some things to another service; this example shows how you might    # send parts of an API off to a legacy system that hasn't been upgraded    # yet, or perhaps is a single cluster that all data centers have to share.    sink = SinkAdapter()    app.add_sink(sink, r'/search/(?P&lt;engine&gt;ddg|y)\Z')You can run the ASGI version with any ASGI server, such as uvicorn:.. code:: bash    $ pip install falcon httpx uvicorn    $ uvicorn things_advanced_asgi:appContributing------------Thanks for your interest in the project! We welcome pull requests fromdevelopers of all skill levels. To get started, simply fork the master branchon GitHub to your personal account and then clone the fork into yourdevelopment environment.If you would like to contribute but don't already have something in mind,we invite you to take a look at the issues listed under our`next milestone &lt;https://github.com/falconry/falcon/milestones&gt;`_.If you see one you'd like to work on, please leave a quick comment so that we don'tend up with duplicated effort. Thanks in advance!Please note that all contributors and maintainers of this project are subject to our `Code of Conduct &lt;https://github.com/falconry/falcon/blob/master/CODEOFCONDUCT.md&gt;`_.Before submitting a pull request, please ensure you have added/updatedthe appropriate tests (and that all existing tests still pass with yourchanges), and that your coding style follows PEP 8 and doesn't causepyflakes to complain.Commit messages should be formatted using `AngularJSconventions &lt;https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines&gt;`__.Comments follow `Google's style guide &lt;https://google.github.io/styleguide/pyguide.html?showone=Comments#Comments&gt;`__,with the additional requirement of prefixing inline comments using yourGitHub nick and an appropriate prefix:- TODO(riker): Damage report!- NOTE(riker): Well, that's certainly good to know.- PERF(riker): Travel time to the nearest starbase?- APPSEC(riker): In all trust, there is the possibility for betrayal.The core Falcon project maintainers are:- Kurt Griffiths, Project Lead (**kgriffs** on GH, Gitter, and Twitter)- John Vrbanac (**jmvrbanac** on GH, Gitter, and Twitter)- Vytautas Liuolia (**vytas7** on GH and Gitter, and **vliuolia** on Twitter)- Nick Zaccardi (**nZac** on GH and Gitter)- Federico Caselli (**CaselIT** on GH and Gitter)Please don't hesitate to reach out if you have any questions, or just need alittle help getting started. You can find us in`falconry/dev &lt;https://gitter.im/falconry/dev&gt;`_ on Gitter.See also: `CONTRIBUTING.md &lt;https://github.com/falconry/falcon/blob/master/CONTRIBUTING.md&gt;`__Legal-----Copyright 2013-2022 by Individual and corporate contributors asnoted in the individual source files.Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you maynot use any portion of the Falcon framework except in compliance withthe License. Contributors agree to license their work under the sameLicense. You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License... |Docs| image:: https://readthedocs.org/projects/falcon/badge/?version=stable    :target: https://falcon.readthedocs.io/en/stable/?badge=stable    :alt: Falcon web framework docs.. |Build Status| image:: https://github.com/falconry/falcon/workflows/Run%20tests/badge.svg   :target: https://github.com/falconry/falcon/actions?query=workflow%3A%22Run+tests%22.. |codecov.io| image:: https://codecov.io/gh/falconry/falcon/branch/master/graphs/badge.svg   :target: http://codecov.io/gh/falconry/falcon.. |Blue| image:: https://img.shields.io/badge/code%20style-blue-blue.svg    :target: https://blue.readthedocs.io/    :alt: code style: blue</longdescription>
</pkgmetadata>