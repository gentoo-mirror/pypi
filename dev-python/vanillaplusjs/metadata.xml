<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Vanilla Plus JS[https://vanillaplusjs.com/](https://vanillaplusjs.com/)This is a framework for building web frontends which are as faithful to vanillahtml/css/js as possible without forcing the developer to sacrifice significantperformance enhancements or to repeat themselves in an error-prone way. The hopewould be that as more features are implemented into the browser, this frameworkcould slowly be removed until it is no longer necessary.This framework is compatible with the following content security policy:`default-src 'self'; object-src 'none';`This generates a static folder which can be served using any static file server,but example configurations will only be given for Nginx.## Folder StructureA vanillaplusjs project is assumed to be structured as follows:```src/    public/        (all your html/js/css files can go here or in subfolders)        img/            (most images go here, see Images)        assets/            (particularly large non-image files go here)        js/            (all your js files go here or in subfolders)    partials/        (html templates go here)out/    (overwritten by vanillaplusjs)    www/        (this is the folder that is served that you can copy in your CI/CD)artifacts/    (overwritten by vanillaplusjs)vanillaplusjs.json (configuration)```You should exclude `out/` from your repository via gitignore. It's recommendedto include `artifacts/` in your repository, as it may take a large amount ofmemory to produce (e.g., cropping images). You will need to use git-lfs for this.The recommended `.gitattributes` are```txt*.png filter=lfs diff=lfs merge=lfs -text*.jpg filter=lfs diff=lfs merge=lfs -text*.jpeg filter=lfs diff=lfs merge=lfs -text*.webp filter=lfs diff=lfs merge=lfs -textsrc/public/assets/* filter=lfs diff=lfs merge=lfs -text```## RunningThe general concept for setup, once you have a virtual environment, is```bashvanillaplusjs init```Then to build and run, automatically watching for changes, it's```bashvanillaplusjs dev --port 8888 --watch```Or to just build it's```bashvanillaplusjs build```Or to just run (not suitable at all for production) it's```bashvanillaplusjs run --port 8888```Note that `dev` will build using `vanillaplusjs build --dev` whichmay behave very slightly differently than `vanillaplusjs build`;in particular, see the Constants section.## Features### Cache-bustingProjects all need to update themselves occassionally. When they are updated,the point is that clients receive the updated versions relatively quickly. However,we also don't want to force each client to download the entire js tree on everypage load - that would dramatically increase server load and bandwidth and reducepage load speed on the client.This project will recursively calculate stable hashes of all imported or preloadedjavascript and css files and append them to all import URLs. So for example,```html&lt;html&gt;&lt;head&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;&lt;/head&gt;&lt;body&gt;Test&lt;/body&gt;&lt;/html&gt;```will be replaced with something like```html&lt;html&gt;&lt;head&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css?v=7e2541f06a8d1f1e2806a3634186917922a219a1b54b76cf04da636fbb7faf87&amp;pv=1&quot;&gt;&lt;/head&gt;&lt;body&gt;Test&lt;/body&gt;&lt;/html&gt;```This applies to link tags, script tags, and imports within javascript modules. Youshould configure your reverse proxy to add cache control headers when there is anexact match of path, the `v` query parameter, and `pv` query parameter on js/cssfiles. For example, in nginx```conf# ... omitting standard boilerplate ...location ~* \.(js|css) {    if ($args ~ &quot;^v=[^&amp;]+(&amp;pv=[^&amp;]+)?$&quot;) {        add_header Cache-Control &quot;public, max-age=31536000&quot;;    }}```### Image preprocessingA very common task on the web is serving images. When serving images they shouldbe transcoded to common web formats and compressed as much as possible. Thisreduces server load and bandwidth, while reducing page size. The effect can beextremely dramatic.Without any tooling this is very tedious and error prone. This project usesPillow to perform the image preprocessing, and stores the results in the`artifacts/` folder. The image preprocessing will take advantage of multiplecores, but by nature can still be slow. Hence we ensure that the artifactsfolder is byte-for-byte reproducible, thus it can be easily included in yourrepository, and then just downloaded by your CI/CD pipeline rather thanregenerated from scratch.The image processor is deterministic, but it does need to sample differentcompression levels to find the best one for a given image. The trade-offfor compression vs accuracy is configurable in `vanillaplusjs.json`.Our image processing will also handling cropping an image using a `cover-fit`algorithm. In the most basic case, to render a 375x370 image, it would looklike the following:```html&lt;html&gt;&lt;head&gt;    &lt;title&gt;Image Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--[IMAGE: /img/hero/mobile.jpg 375 370]--&gt;&lt;/body&gt;&lt;/html&gt;```Which will generate something like the following:```html&lt;html&gt;&lt;head&gt;    &lt;title&gt;Image Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;picture&gt;&lt;source srcset=&quot;/img/hero/mobile/375x370-100.webp 375w, /img/hero/mobile/562x555-85.webp 562w, /img/hero/mobile/750x740-85.webp 750w, /img/hero/mobile/937x925-75.webp 937w, /img/hero/mobile/1125x1110-75.webp 1125w, /img/hero/mobile/1312x1295-75.webp 1312w, /img/hero/mobile/1500x1480-75.webp 1500w, /img/hero/mobile/1687x1665-75.webp 1687w, /img/hero/mobile/1875x1850-75.webp 1875w&quot; type=&quot;image/webp&quot;&gt;&lt;img width=&quot;375&quot; height=&quot;370&quot; loading=&quot;lazy&quot; src=&quot;/img/hero/mobile/375x370-100.jpeg&quot; srcset=&quot;/img/hero/mobile/375x370-100.jpeg 375w, /img/hero/mobile/562x555-85.jpeg 562w, /img/hero/mobile/750x740-85.jpeg 750w, /img/hero/mobile/937x925-85.jpeg 937w, /img/hero/mobile/1125x1110-85.jpeg 1125w, /img/hero/mobile/1312x1295-85.jpeg 1312w, /img/hero/mobile/1500x1480-85.jpeg 1500w, /img/hero/mobile/1687x1665-85.jpeg 1687w, /img/hero/mobile/1875x1850-85.jpeg 1875w&quot;&gt;&lt;/picture&gt;&lt;/body&gt;```Notice how it includes both webp and jpeg files and will have the browser selectthe appropriate resolution based on the screen width.You can also control the crop by specifying a minimum crop for any of the sides.If the source image is 5000x5000, the following will ensure we only use thebottom 3600 pixels before resizing in the final image:```html&lt;html&gt;&lt;head&gt;    &lt;title&gt;Image Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--[IMAGE: /img/hero/mobile.jpg 375 370 cover {&quot;pre_top_crop&quot;: 1400}]--&gt;&lt;/body&gt;&lt;/html&gt;```This is typically used as a last resort when the image crop is important for thelegibility of the page, and so you need to use many different crops at differentbreakpoints. Typically this comes up for full bleed images with text on them,where the text has to go over a particular part of the image to have enoughcontrast.#### Static images in javascriptIt is sometimes helpful to be able to control images in javascript, but stilltake advantage of the preprocessing described above. For this purpose we willhandle the files with the extension `.images.json` as intending to produce afile called `.images.js`. The JSON file should be in the following format:```json{    &quot;img1&quot;: {        &quot;path&quot;: &quot;/img/admin/img1.jpg&quot;,        &quot;width&quot;: 100,        &quot;height&quot;: 100,        &quot;crop_style&quot;: &quot;cover&quot;,        &quot;crop_arguments&quot;: {},        &quot;lazy&quot;: true    }}```This will produce a placeholder file adjacent to it with the extension`.images.js`:```js/** * The output for this file is generated via the json file by the same name - * this file is just for type hints. *//** * Maps from the image name to the image metadata. For each image, * contains the settings used to produce that image from the source * image as well as the outputs produced. * * @type {Object.&lt;string, {target: {settings: {width: number, height: number, crop: 'cover', crop_settings: {pre_top_crop: number, pre_left_crop: number, pre_bottom_crop: number, pre_right_crop: number, crop_left_percentage: number, crop_top_percentage: number}}, outputs: Object.&lt;string, Array.&lt;{width: number, height: number, url: string, choice: string}&gt;&gt;}}&gt;} */export default {};```And will produce a corresponding output file which is functionallyidentical to the following:```jsexport default {    &quot;img1&quot;: {        &quot;target&quot;: {            &quot;outputs&quot;: {                &quot;jpeg&quot;: [                    {                        &quot;choice&quot;: &quot;100&quot;,                        &quot;height&quot;: 20,                        &quot;url&quot;: &quot;/img/test/1/20x20.jpeg&quot;,                        &quot;width&quot;: 20                    },                    {                        &quot;choice&quot;: &quot;100&quot;,                        &quot;height&quot;: 30,                        &quot;url&quot;: &quot;/img/test/1/30x30.jpeg&quot;,                        &quot;width&quot;: 30                    }                ],                &quot;webp&quot;: [                    {                        &quot;choice&quot;: &quot;lossless&quot;,                        &quot;height&quot;: 20,                        &quot;url&quot;: &quot;/img/test/1/20x20.webp&quot;,                        &quot;width&quot;: 20                    },                    {                        &quot;choice&quot;: &quot;lossless&quot;,                        &quot;height&quot;: 30,                        &quot;url&quot;: &quot;/img/test/1/30x30.webp&quot;,                        &quot;width&quot;: 30                    }                ]            },            &quot;settings&quot;: {                &quot;crop&quot;: &quot;cover&quot;,                &quot;crop_settings&quot;: {                    &quot;crop_left_percentage&quot;: 0.5,                    &quot;crop_top_percentage&quot;: 0.5,                    &quot;pre_bottom_crop&quot;: 0,                    &quot;pre_left_crop&quot;: 0,                    &quot;pre_right_crop&quot;: 0,                    &quot;pre_top_crop&quot;: 0                },                &quot;height&quot;: 20,                &quot;width&quot;: 20            }        }    }};```### Outlining js/cssVanillaplusjs is expected to be run under the strictest content security policy,and to facilitate this will automatically outline scripts and stylesheets intotheir own separate files which are imported appropriately.It's recommended that only test scripts or _very_ small script tags utilizethis, but it does avoid CSP issues causing code to work when running locallythat fails when deployed.### TemplatesSome parts of the HTML are quite repetitive. This library does not intendto completely remove the boilerplate and does prefer clarity over brevity,however, some amount of DRY is necessary to keep the code readable.Extremely basic HTML templating is supported with constant variables.The template file should go in the `partials` subdirectory of `src` folderand works as follows:src/public/index.html```html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;!--[TEMPLATE: [&quot;/head/standard.html&quot;, {&quot;title&quot;: &quot;Try it Now&quot;}]]--&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;```src/partials/head/standard.html```html&lt;title&gt;&lt;!--[STACK: [&quot;retrieve&quot;, &quot;title&quot;]]--&gt;&lt;/title&gt;&lt;meta charset=&quot;utf-8&quot;&gt;```You can also use the stack to define local variables:```html&lt;!--[STACK: [&quot;define&quot;, &quot;price&quot;, &quot;$24.99&quot;]]--&gt;&lt;p&gt;Get it today! Just &lt;!--[STACK: [&quot;retrieve&quot;, &quot;price&quot;]]--&gt;&lt;/p&gt;```### Outlining ImagesIf images are specified in CSS files via data URIs, they will be outlinedin order to support the desired content security policy. This is particularlyuseful when combined with external files, since e.g., bootstrap will inlineSVGs.This a performance trade-off and can cause some flashing, but this projectprefers the security assurances of the CSP to the performance gains of inlinedscripts and images. Note that the browser could resolve this flashing in thefuture by loading svgs referenced in stylesheets in the background after thepage has loaded.### External filesIf you have files that are required but should not be distributed via sourcecontrol then you can instruct vanillaplusjs to download them from a CDN prior tobuilding. For example, if you want to include bootstrap 5.2.0-beta1 in your project, youwould update the `external_files` section of `vanillaplusjs.json` as follows:```json{    &quot;external_files&quot;: {        &quot;src/public/css/lib/bootstrap.min.css&quot;: {            &quot;url&quot;: &quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css&quot;,            &quot;integrity&quot;: &quot;sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor&quot;        },        &quot;src/public/js/lib/bootstrap.min.js&quot;: {            &quot;url&quot;: &quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js&quot;,            &quot;integrity&quot;: &quot;sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2&quot;        }    }}```Note that to update dependencies you must do a cold build (`vanillaplusjs build`) as they will notbe updated during a hot build (`vanillaplusjs dev --watch`)### Canonical URLsFor SEO purposes it's often necessary to set a canonical URL for a page.These URLs can't be reliably specified via relative URLs. This is a bitof a pain if you want to be able to change the domain name of the site,e.g., to facilitate test environments.Hence the preprocessor makes these easier to work with. For the mostcommon case where the canonical url should just be the url where thefile would be accessed using a standard static file server, just omitthe href:```html&lt;link rel=&quot;canonical&quot;&gt;```an the tag will be replaced with the full url include the file extension for you:```html&lt;link href=&quot;https://example.com/account.html&quot; rel=&quot;canonical&quot;&gt;```Alternatively, you can specify the relative path:```html&lt;link href=&quot;/&quot; rel=&quot;canonical&quot;&gt;```becomes```html&lt;link href=&quot;https://example.com/&quot; rel=&quot;canonical&quot;&gt;```This functions identically for the meta property `og:url`### CSS NestingCSS without nesting can quickly be painful if you want to support the mainbrowsers. We support a very simplistic nesting system. We assume you have a`/css/main.css` file which will act as the default source of imports. In thatfile you can do:```css.unstyle {    appearance: none;    border: none;    box-shadow: none;    /* etc */}.button {    /*! PREPROCESSOR: import .unstyle */    /* etc */}```For colors and other variables it's recommended you use CSS custom properties.### IconsIcons with a strict CSP can also be somewhat painful to use. We have a specificCSS preprocessor action for dealing with icons, supposing that you follow aspecific naming convention.Suppose you have an SVG icon for a navbar toggler, which we will call`navbar-toggler.svg`, and this is a pretty simplistic svg: it has exactly onecolor in it. Now also suppose that you also have defined CSS variables followingthe given pattern on the `:root` selector in the `src/public/css/main.css` file:```css:root {    --col-primary: #333;    --col-primary-dark: #000;    --col-primary-light: #666;    --icon-size-large: 1.5rem;    --icon-size-medium: 1rem;    --icon-size-small: 0.75rem;}```Lets assume the svg is specified in `primary`, ie., the only color in the fileis `#333` (`--col-primary`).If the icon is stored at `src/public/img/icons/navbar-toggler.svg`, then in CSSyou may use the following preprocessor command:```css/*! PREPROCESSOR: icon navbar-toggler primary all-colors all-sizes */```and it will generate the following classes:- `.icon-navbar-toggler-large-primary`- `.icon-navbar-toggler-medium-primary`- `.icon-navbar-toggler-small-primary`- `.icon-navbar-toggler-large-primary-dark`- `.icon-navbar-toggler-medium-primary-dark`- `.icon-navbar-toggler-small-primary-dark`- `.icon-navbar-toggler-large-primary-light`- `.icon-navbar-toggler-medium-primary-light`- `.icon-navbar-toggler-small-primary-light`- `.icon-btn-navbar-toggler-large`- `.icon-btn-navbar-toggler-medium`- `.icon-btn-navbar-toggler-small`Which can be used as follows:To just show the icon in html:```html&lt;span&gt;Hello, heres the toggler: &lt;span class=&quot;icon-navbar-toggler-large-primary&quot;&gt;&lt;/span&gt;&lt;/span&gt;```Or you can create a button which will have hover and disabled colors:```html&lt;button class=&quot;icon-btn-navbar-toggler-large&quot; title=&quot;Toggle Navigation&quot;&gt;    &lt;span class=&quot;icon-btn--icon&quot;&gt;&lt;/span&gt;&lt;/button&gt;```You can instead specify the exact colors or sizes you want to generate, which isparticularly useful if you have a lot of colors, and you can suppress the buttonclass```css/*! PREPROCESSOR: icon navbar-toggler primary [&quot;primary-dark&quot;] all-sizes no-btn */```would only generate the `primary-dark` icon color, and would do so for all thesizes specified.In case you need it, such as to reference the icon in other css, thelarge primary-dark file would be at`/img/icons/navbar-toggler/large/primary-dark.svg`### ConstantsEditable in the `vanillaplusjs.json` file, you can specify a file that acts as theconstants file. For example,```json{    &quot;js_constants&quot;: {        &quot;relpath&quot;: &quot;src/public/js/constants.js&quot;,        &quot;shared&quot;: {},        &quot;dev&quot;: {&quot;API_URL&quot;: &quot;http://127.0.0.1:8080&quot;},        &quot;prod&quot;: {&quot;API_URL&quot;: &quot;&quot;},    }}```Then, if you create the file at the corresponding path, in this case,`src/public/js/constants.js`, the contents of that file will be ignored and theoutputted file will depend on the build environment. In production mode,`vanillaplusjs build`, the file at `out/www/js/constants.js` will be```jsexport const API_URL = &quot;&quot;;```In development mode, `vanillaplusjs build --dev`, it will instead be```jsexport const API_URL = &quot;http://127.0.0.1:8080&quot;;```This can be used, for example, to create an API wrapper:```jsimport { API_URL } from '/js/constants.js';export function apiFetch(url, options) {    if (url.startsWith('/')) {        url = API_URL + url;    }    return fetch(url, options);}```Which will allow you to run the backend server on a different portlocally, but in production mode, it will use the same port as the frontend.### Commenting Non-Functional LinesNon-functional lines of javascript which are used primarily for type hints,such as those for describing function overloading, can be commented out byincluding a comment which is exclusively `@@type-hints` (plus whitespace).For example:```jsexport function foo(a, b); // @type-hintexport function foo(...args) {    // ...}```will become```js/*export function foo(a, b); /* @@type-hint *\/*/export function foo(...args) {    /* ...*/}```## ContributingThis package uses `pre-commit` to install git commit hooks. Beforecontributing, configure your virtual environment with the developmentdependencies and initialize the pre-commit hooks:```bashpython -m venv venv&quot;venv/bin/activate&quot;python -m pip install -U pippip install -r requirements.txtpre-commit install```For windows```bashpython -m venv venv&quot;venv/Scripts/Activate.bat&quot;python -m pip install -U pippip install -r requirements.txt```Then, in Git Bash for Windows,```bash&quot;venv/Scripts/pre-commit.exe&quot; install```</longdescription>
</pkgmetadata>