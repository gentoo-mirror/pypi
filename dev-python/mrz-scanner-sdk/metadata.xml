<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Extension: MRZ Scanner SDK The goal of this project is to provide a Python-C++ binding for [Dynamsoft Label Recognizer](https://www.dynamsoft.com/label-recognition/overview/), enabling developers to create **MRZ scanner** applications for both Windows and Linux platforms using Python.## License KeyGet a [30-day FREE trial license](https://www.dynamsoft.com/customer/license/trialLicense/?product=dlr) to activate the SDK.## Supported Python Edition* Python 3.x## Install Dependencies```bash pip install mrz opencv-python```## Command-line Usage```bash $ scanmrz &lt;file-name&gt; -l &lt;license-key&gt;# Show the image with OpenCV$ scanmrz &lt;file-name&gt; -u 1 -l &lt;license-key&gt;```![python mrz scanner](https://www.dynamsoft.com/codepool/img/2022/08/python-mrz-scanner.png)## Quick Start```pythonimport mrzscannerfrom mrz.checker.td1 import TD1CodeCheckerfrom mrz.checker.td2 import TD2CodeCheckerfrom mrz.checker.td3 import TD3CodeCheckerfrom mrz.checker.mrva import MRVACodeCheckerfrom mrz.checker.mrvb import MRVBCodeCheckerdef check(lines):    try:        td1_check = TD1CodeChecker(lines)        if bool(td1_check):            return &quot;TD1&quot;, td1_check.fields()    except Exception as err:        pass        try:        td2_check = TD2CodeChecker(lines)        if bool(td2_check):            return &quot;TD2&quot;, td2_check.fields()    except Exception as err:        pass        try:        td3_check = TD3CodeChecker(lines)        if bool(td3_check):            return &quot;TD3&quot;, td3_check.fields()    except Exception as err:        pass        try:        mrva_check = MRVACodeChecker(lines)        if bool(mrva_check):            return &quot;MRVA&quot;, mrva_check.fields()    except Exception as err:        pass        try:        mrvb_check = MRVBCodeChecker(lines)        if bool(mrvb_check):            return &quot;MRVB&quot;, mrvb_check.fields()    except Exception as err:        pass        return 'No valid MRZ information found'# set licensemrzscanner.initLicense(&quot;DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==&quot;)# initialize mrz scannerscanner = mrzscanner.createInstance()# load MRZ modelscanner.loadModel(mrzscanner.load_settings())print('')# decodeFile()s = &quot;&quot;results = scanner.decodeFile(&quot;images/1.png&quot;)for result in results:    print(result.text)    s += result.text + '\n'print('')print(check(s[:-1]))print('')```## Methods- `mrzscanner.initLicense('YOUR-LICENSE-KEY')` # set the license globally        ```python    mrzscanner.initLicense(&quot;DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==&quot;)    ```- `mrzscanner.createInstance()` # create a MRZ scanner instance        ```python    scanner = mrzscanner.createInstance()    ```- `scanner.loadModel(&lt;model configuration file&gt;)` # load MRZ model        ```python    scanner.loadModel(mrzscanner.load_settings())    ```- `decodeFile(&lt;image file&gt;)` # recognize MRZ from an image file    ```python    results = scanner.decodeFile(&lt;image-file&gt;)    for result in results:        print(result.text)    ```- `decodeMat(&lt;opencv mat data&gt;)` # recognize MRZ from OpenCV Mat    ```python    import cv2    image = cv2.imread(&lt;image-file&gt;)    results = scanner.decodeMat(image)    for result in results:        print(result.text)    ```- `addAsyncListener(callback function)` # start a native thread and register a Python function for receiving the MRZ recognition results- `decodeMatAsync(&lt;opencv mat data&gt;)` # recognize MRZ from OpenCV Mat asynchronously    ```python    def callback(results):        s = &quot;&quot;        for result in results:            print(result.text)            s += result.text + '\n'            print('')        print(check(s[:-1]))        import cv2    image = cv2.imread(&lt;image-file&gt;)    scanner.addAsyncListener(callback)    for i in range (2):        scanner.decodeMatAsync(image)        sleep(1)    ```## How to Build the Python MRZ Scanner Extension- Create a source distribution:        ```bash    python setup.py sdist    ```- setuptools:        ```bash    python setup.py build    python setup.py develop     ```- Build wheel:        ```bash    pip wheel . --verbose    # Or    python setup.py bdist_wheel    ```</longdescription>
</pkgmetadata>