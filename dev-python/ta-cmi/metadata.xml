<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TA-CMIA Python wrapper to read out  sensors from Technische Alternative using the C.M.I.## How to use package### Json API```pythonimport asynciofrom ta_cmi import CMI, Languages, ApiError, RateLimitError, InvalidCredentialsError, InvalidDeviceError, ChannelTypeasync def main():    try:        cmi = CMI(&quot;http://192.168.1.101&quot;, &quot;admin&quot;, &quot;admin&quot;)        devices = await cmi.get_devices()        device = devices[0]        # Set type automatically        await device.fetch_type()        # Set type manually        device.set_device_type(&quot;UVR16x2&quot;)        await device.update()        print(str(device))        inputChannels = device.get_channels(ChannelType.INPUT)        outputChannels = device.get_channels(ChannelType.OUTPUT)        analogLogging = device.get_channels(ChannelType.ANALOG_LOGGING)        for i in inputChannels:            ch = inputChannels.get(i)            print(str(ch))        for o in outputChannels:            ch = outputChannels.get(o)            print(f&quot;{str(ch)} - {ch.get_unit(Languages.DE)}&quot;)        for al in analogLogging:            ch = analogLogging.get(al)            print(f&quot;{str(ch)} - {ch.get_unit(Languages.DE)}&quot;)    except (ApiError, RateLimitError, InvalidCredentialsError, InvalidDeviceError) as error:        print(f&quot;Error: {error}&quot;)loop = asyncio.get_event_loop()loop.run_until_complete(main())loop.close()```## Supported data types| Device type | Inputs | Outputs | DL-inputs | System-values: General | System-values: Date | System-values: Time | System-values: Sun | System-values: Electrical power | Analog network inputs | Digital network inputs | M-Bus | Modbus | KNX | Analog logging | Digital logging ||-------------|:------:|:-------:|:---------:|:----------------------:|:-------------------:|:-------------------:|:------------------:|:-------------------------------:|:---------------------:|:----------------------:|:-----:|:------:|:---:|:--------------:|:---------------:|| UVR1611     |   ✔    |    ✔    |     ❌     |           ❌            |          ❌          |          ❌          |         ❌          |                ❌                |           ✔           |           ✔            |   ❌   |   ❌    |  ❌  |       ❌        |        ❌        || UVR16x2     |   ✔    |    ✔    |     ✔     |           ✔            |          ✔          |          ✔          |         ✔          |                ❌                |           ❌           |           ❌            |   ❌   |   ❌    |  ❌  |       ✔        |        ✔        || RSM610      |   ✔    |    ✔    |     ✔     |           ❌            |          ❌          |          ❌          |         ❌          |                ❌                |           ❌           |           ❌            |   ✔   |   ❌    |  ❌  |       ❌        |        ❌        || CAN-I/O45   |   ✔    |    ✔    |     ❌     |           ❌            |          ❌          |          ❌          |         ❌          |                ❌                |           ❌           |           ❌            |   ❌   |   ❌    |  ❌  |       ❌        |        ❌        || CAN-EZ2     |   ✔    |    ✔    |     ❌     |           ❌            |          ❌          |          ❌          |         ❌          |                ✔                |           ❌           |           ❌            |   ❌   |   ❌    |  ❌  |       ❌        |        ❌        || CAN-MTx2    |   ✔    |    ✔    |     ❌     |           ❌            |          ❌          |          ❌          |         ❌          |                ❌                |           ❌           |           ❌            |   ❌   |   ❌    |  ❌  |       ❌        |        ❌        || CAN-BC2     |   ❌    |    ❌    |     ❌     |           ❌            |          ❌          |          ❌          |         ❌          |                ❌                |           ❌           |           ❌            |   ✔   |   ✔    |  ✔  |       ❌        |        ❌        || UVR65       |   ✔    |    ✔    |     ❌     |           ❌            |          ❌          |          ❌          |         ❌          |                ❌                |           ❌           |           ❌            |   ❌   |   ❌    |  ❌  |       ❌        |        ❌        || CAN-EZ3     |   ❌    |    ❌    |     ✔     |           ✔            |          ✔          |          ✔          |         ✔          |                ✔                |           ❌           |           ❌            |   ❌   |   ✔    |  ❌  |       ✔        |        ✔        || UVR610      |   ✔    |    ✔    |     ✔     |           ❌            |          ❌          |          ❌          |         ❌          |                ❌                |           ❌           |           ❌            |   ✔   |   ❌    |  ❌  |       ❌        |        ❌        || UVR67       |   ✔    |    ✔    |     ❌     |           ❌            |          ❌          |          ❌          |         ❌          |                ❌                |           ❌           |           ❌            |   ❌   |   ❌    |  ❌  |       ❌        |        ❌        |&gt; **Note**&gt; The supported data types may differ from the official API. If a device type supports other data types than listed here, please create an issue.### CoE ServerData can be retrieved using [this](https://gitlab.com/DeerMaximum/ta-coe) CoE to HTTP server```pythonimport asynciofrom ta_cmi import (    ApiError,    ChannelMode,    CoE,    InvalidCredentialsError,    InvalidDeviceError,    Languages,    RateLimitError,)async def main():    try:        coe = CoE(&quot;http://192.168.2.201:9000&quot;)        await coe.update()        analog_channels = coe.get_channels(ChannelMode.ANALOG)        digital_channels = coe.get_channels(ChannelMode.DIGITAL)        for i in analog_channels:            ch = analog_channels.get(i)            print(str(ch))        for o in digital_channels:            ch = digital_channels.get(o)            print(f&quot;{str(ch)} - {ch.get_unit(Languages.DE)}&quot;)    except (ApiError, RateLimitError, InvalidCredentialsError, InvalidDeviceError) as error:        print(f&quot;Error: {error}&quot;)loop = asyncio.get_event_loop()loop.run_until_complete(main())loop.close()```</longdescription>
</pkgmetadata>