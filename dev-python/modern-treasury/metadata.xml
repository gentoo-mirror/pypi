<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Modern Treasury Python API library&gt; **Migration Guide**&gt;&gt; We've made some major improvements to how you pass arguments to methods which will require migrating your existing code.&gt;&gt; If you want to migrate to the new patterns incrementally you can do so by installing `v0.5.0`. This release contains both&gt; the new and old patterns with a backwards compatibility layer.&gt;&gt; You can find a guide to migrating in [this document](#migration-guide).[![PyPI version](https://img.shields.io/pypi/v/modern-treasury.svg)](https://pypi.org/project/modern-treasury/)The Modern Treasury Python library provides convenient access to the Modern Treasury REST API from any Python 3.7+application. The library includes type definitions for all request params and response fields,and offers both synchronous and asynchronous clients powered by [httpx](https://github.com/encode/httpx).https://user-images.githubusercontent.com/704302/216504942-09ed8dd7-7f44-40a6-a580-3764e91f11b4.mov## DocumentationThe API documentation can be found [here](https://docs.moderntreasury.com).## Installation```shpip install modern-treasury```## UsageThe full API of this library can be found in [api.md](https://www.github.com/Modern-Treasury/modern-treasury-python/blob/main/api.md).```pythonfrom modern_treasury import ModernTreasuryclient = ModernTreasury(    # defaults to os.environ.get(&quot;MODERN_TREASURY_ORGANIZATION_ID&quot;)    organization_id=&quot;my-organization-ID&quot;,    # defaults to os.environ.get(&quot;MODERN_TREASURY_API_KEY&quot;)    api_key=&quot;My API Key&quot;,)external_account = client.external_accounts.create(    counterparty_id=&quot;9eba513a-53fd-4d6d-ad52-ccce122ab92a&quot;,    name=&quot;my bank&quot;,)print(external_account.id)```While you can provide a `organization_id` keyword argument,we recommend using [python-dotenv](https://pypi.org/project/python-dotenv/)to add `MODERN_TREASURY_ORGANIZATION_ID=&quot;my-organization-ID&quot;` to your `.env` fileso that your Organization ID is not stored in source control.## Async usageSimply import `AsyncModernTreasury` instead of `ModernTreasury` and use `await` with each API call:```pythonfrom modern_treasury import AsyncModernTreasuryclient = AsyncModernTreasury(    # defaults to os.environ.get(&quot;MODERN_TREASURY_ORGANIZATION_ID&quot;)    organization_id=&quot;my-organization-ID&quot;,    # defaults to os.environ.get(&quot;MODERN_TREASURY_API_KEY&quot;)    api_key=&quot;My API Key&quot;,)async def main():    external_account = await client.external_accounts.create(        counterparty_id=&quot;9eba513a-53fd-4d6d-ad52-ccce122ab92a&quot;,        name=&quot;my bank&quot;,    )    print(external_account.id)asyncio.run(main())```Functionality between the synchronous and asynchronous clients is otherwise identical.## Using typesNested request parameters are [TypedDicts](https://docs.python.org/3/library/typing.html#typing.TypedDict). Responses are [Pydantic models](https://docs.pydantic.dev), which provide helper methods for things like serializing back into JSON ([v1](https://docs.pydantic.dev/1.10/usage/models/), [v2](https://docs.pydantic.dev/latest/usage/serialization/)). To get a dictionary, call `dict(model)`.Typed requests and responses provide autocomplete and documentation within your editor. If you would like to see type errors in VS Code to help catch bugs earlier, set `python.analysis.typeCheckingMode` to `basic`.## PaginationList methods in the Modern Treasury API are paginated.This library provides auto-paginating iterators with each list response, so you do not have to request successive pages manually:```pythonimport modern_treasuryclient = ModernTreasury()all_external_accounts = []# Automatically fetches more pages as needed.for external_account in client.external_accounts.list():    # Do something with external_account here    all_external_accounts.append(external_account)print(all_external_accounts)```Or, asynchronously:```pythonimport asyncioimport modern_treasuryclient = AsyncModernTreasury()async def main() -&gt; None:    all_external_accounts = []    # Iterate through items across all pages, issuing requests as needed.    async for external_account in client.external_accounts.list():        all_external_accounts.append(external_account)    print(all_external_accounts)asyncio.run(main())```Alternatively, you can use the `.has_next_page()`, `.next_page_info()`, or `.get_next_page()` methods for more granular control working with pages:```pythonfirst_page = await client.external_accounts.list()if first_page.has_next_page():    print(f&quot;will fetch next page using these details: {first_page.next_page_info()}&quot;)    next_page = await first_page.get_next_page()    print(f&quot;number of items we just fetched: {len(next_page.items)}&quot;)# Remove `await` for non-async usage.```Or just work directly with the returned data:```pythonfirst_page = await client.external_accounts.list()print(f&quot;next page cursor: {first_page.after_cursor}&quot;)  # =&gt; &quot;next page cursor: ...&quot;for external_account in first_page.items:    print(external_account.id)# Remove `await` for non-async usage.```## Nested paramsNested parameters are dictionaries, typed using `TypedDict`, for example:```pythonfrom modern_treasury import ModernTreasuryclient = ModernTreasury()client.external_accounts.create(    foo={        &quot;bar&quot;: True,    },)```## File UploadsRequest parameters that correspond to file uploads can be passed as `bytes`, a [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike) instance or a tuple of `(filename, contents, media type)`.```pythonfrom pathlib import Pathfrom modern_treasury import ModernTreasuryclient = ModernTreasury()client.documents.create(    file=Path(&quot;my/file.txt&quot;),    documentable_type=&quot;counterparties&quot;,    documentable_id=&quot;24c6b7a3-02...&quot;,)```The async client uses the exact same interface. If you pass a [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike) instance, the file contents will be read asynchronously automatically.## Handling errorsWhen the library is unable to connect to the API (for example, due to network connection problems or a timeout), a subclass of `modern_treasury.APIConnectionError` is raised.When the API returns a non-success status code (that is, 4xx or 5xxresponse), a subclass of `modern_treasury.APIStatusError` is raised, containing `status_code` and `response` properties.All errors inherit from `modern_treasury.APIError`.```pythonimport modern_treasuryfrom modern_treasury import ModernTreasuryclient = ModernTreasury()try:    client.external_accounts.create(        counterparty_id=&quot;missing&quot;,    )except modern_treasury.APIConnectionError as e:    print(&quot;The server could not be reached&quot;)    print(e.__cause__)  # an underlying Exception, likely raised within httpx.except modern_treasury.RateLimitError as e:    print(&quot;A 429 status code was received; we should back off a bit.&quot;)except modern_treasury.APIStatusError as e:    print(&quot;Another non-200-range status code was received&quot;)    print(e.status_code)    print(e.response)```Error codes are as followed:| Status Code | Error Type                 || ----------- | -------------------------- || 400         | `BadRequestError`          || 401         | `AuthenticationError`      || 403         | `PermissionDeniedError`    || 404         | `NotFoundError`            || 422         | `UnprocessableEntityError` || 429         | `RateLimitError`           || &gt;=500       | `InternalServerError`      || N/A         | `APIConnectionError`       |### RetriesCertain errors are automatically retried 2 times by default, with a short exponential backoff.Connection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict,429 Rate Limit, and &gt;=500 Internal errors are all retried by default.You can use the `max_retries` option to configure or disable retry settings:```pythonfrom modern_treasury import ModernTreasury# Configure the default for all requests:client = ModernTreasury(    # default is 2    max_retries=0,)# Or, configure per-request:client.with_options(max_retries=5).external_accounts.list()```### TimeoutsBy default requests time out after 1 minute. You can configure this with a `timeout` option,which accepts a float or an [`httpx.Timeout`](https://www.python-httpx.org/advanced/#fine-tuning-the-configuration) object:```pythonfrom modern_treasury import ModernTreasury# Configure the default for all requests:client = ModernTreasury(    # default is 60s    timeout=20.0,)# More granular control:client = ModernTreasury(    timeout=httpx.Timeout(60.0, read=5.0, write=10.0, connect=2.0),)# Override per-request:client.with_options(timeout=5 * 1000).external_accounts.list(    party_name=&quot;my bank&quot;,)```On timeout, an `APITimeoutError` is thrown.Note that requests that time out are [retried twice by default](#retries).## Advanced### LoggingWe use the standard library [`logging`](https://docs.python.org/3/library/logging.html) module.You can enable logging by setting the environment variable `MODERN_TREASURY_LOG` to `debug`.```shell$ export MODERN_TREASURY_LOG=debug```### How to tell whether `None` means `null` or missingIn an API response, a field may be explicitly `null`, or missing entirely; in either case, its value is `None` in this library. You can differentiate the two cases with `.model_fields_set`:```pyif response.my_field is None:  if 'my_field' not in response.model_fields_set:    print('Got json like {}, without a &quot;my_field&quot; key present at all.')  else:    print('Got json like {&quot;my_field&quot;: null}.')```### Configuring the HTTP clientYou can directly override the [httpx client](https://www.python-httpx.org/api/#client) to customize it for your use case, including:- Support for proxies- Custom transports- Additional [advanced](https://www.python-httpx.org/advanced/#client-instances) functionality```pythonimport httpxfrom modern_treasury import ModernTreasuryclient = ModernTreasury(    base_url=&quot;http://my.test.server.example.com:8083&quot;,    http_client=httpx.Client(        proxies=&quot;http://my.test.proxy.example.com&quot;,        transport=httpx.HTTPTransport(local_address=&quot;0.0.0.0&quot;),    ),)```### Managing HTTP resourcesBy default the library closes underlying HTTP connections whenever the client is [garbage collected](https://docs.python.org/3/reference/datamodel.html#object.__del__). You can manually close the client using the `.close()` method if desired, or with a context manager that closes when exiting.# Migration guideThis section outlines the features that were deprecated in `v0.5.0`, and subsequently removed in `v0.6.0` and how to migrate your code.## Breaking changes### TypedDict → keyword argumentsThe way you pass arguments to methods has been changed from a single `TypedDict` to individual arguments. For example, this snippet:```pythonaccount = await client.external_accounts.create(    {        &quot;name&quot;: &quot;my bank&quot;,        &quot;counterparty_id&quot;: &quot;123&quot;,    })```Now becomes:```pythonaccount = await client.external_accounts.create(    name=&quot;my bank&quot;,    counterparty_id=&quot;123&quot;,)```#### MigratingThe easiest way to make your code compatible with this change is to add `**{`, for example:```diff- account = await client.external_accounts.create({-   &quot;name&quot;: &quot;my bank&quot;,-   &quot;counterparty_id&quot;: &quot;123&quot;,- })+ account = await client.external_accounts.create(**{+   &quot;name&quot;: &quot;my bank&quot;,+   &quot;counterparty_id&quot;: &quot;123&quot;,+ })```However, it is highly recommended to completely switch to explicit keyword arguments:```diff- account = await client.external_accounts.create({-   &quot;name&quot;: &quot;my bank&quot;,-   &quot;counterparty_id&quot;: &quot;123&quot;,- })+ account = await client.external_accounts.create(+   name='my bank',+   counterparty_id='123',+ )```### Named path argumentsAll but the last path parameter must now be passed as named arguments instead of positional arguments, for example, for a method that calls the endpoint `/api/{itemizable_type}/{itemizable_id}/line_items/{id}` you would've been able to call the method like this:```pythonline_item = await client.line_items.retrieve(    &quot;itemizable_type&quot;,    &quot;itemizable_id&quot;,    &quot;my_line_id&quot;,)```But now you must call the method like this:```pythonline_item = await client.line_items.retrieve(    &quot;my_line_id&quot;,    itemizable_id=&quot;itemizable_id&quot;,    itemizable_type=&quot;itemizable_type&quot;,)```If you have type checking enabled in your IDE it will tell you which parts of your code need to be updated.### Request optionsYou used to be able to set request options on a per-method basis, now you can only set them on the client. There are two methods that you can use to make this easy, `with_options` and `copy`.If you need to make multiple requests with changed options, you can use `.copy()` to get a new client object with those options. This can be useful if you need to set a custom header for multiple requests, for example:```pythoncopied = client.copy(default_headers={&quot;X-My-Header&quot;: &quot;Foo&quot;})account = await copied.external_accounts.create(    name=&quot;my bank&quot;,    counterparty_id=&quot;123&quot;,)await copied.cards.provision(card.token, digital_wallet=&quot;GOOGLE_PAY&quot;)```If you just need to override one of the client options for one request, you can use `.with_options()`, for example:```pythonawait client.with_options(timeout=None).external_accounts.create(    name=&quot;my bank&quot;,    counterparty_id=&quot;123&quot;,)```It should be noted that the `.with_options()` method is simply an alias to `.copy()`, you can use them interchangeably.You can pass nearly every argument that is supported by the Client `__init__` method to the `.copy()` method, except for `proxies` and `transport`.```pythoncopied = client.copy(    api_key=&quot;...&quot;,    timeout=httpx.Timeout(read=10),    max_retries=5,    default_headers={        &quot;X-My-Header&quot;: &quot;value&quot;,    },    default_query={        &quot;my_default_param&quot;: &quot;value&quot;,    },)```## New features### Pass custom headersIf you need to add additional headers to a request you can easily do so with the `extra_headers` argument:```pythonaccount = await client.external_accounts.create(    name=&quot;my bank&quot;,    counterparty_id=&quot;123&quot;,    extra_headers={        &quot;X-Foo&quot;: &quot;my header&quot;,    },)```### Pass custom JSON propertiesYou can add additional properties to the JSON request body that are not included directly in the method definition through the `extra_body` argument. This can be useful when there are in new properties in the API that are in beta and aren't in the SDK yet.```pythonaccount = await client.external_accounts.create(    name=&quot;my bank&quot;,    counterparty_id=&quot;123&quot;,    extra_body={        &quot;special_prop&quot;: &quot;foo&quot;,    },)# sends this to the API:# {&quot;name&quot;: &quot;my bank&quot;, &quot;counterparty_id&quot;: &quot;123&quot;, &quot;special_prop&quot;: &quot;foo&quot;}```### Pass custom query parametersYou can add additional query parameters that aren't specified in the method definition through the `extra_query` argument. This can be useful when there are any new/beta query parameters that are not yet in the SDK.```pythonaccount = await client.external_accounts.create(    name=&quot;my bank&quot;,    counterparty_id=&quot;123&quot;,    extra_query={        &quot;special_param&quot;: &quot;bar&quot;,    },)# makes the request to this URL:# https://app.moderntreasury.com/api/external_accounts?special_param=bar```## Array items type name improvementsIn `v1.5.0` we improved the names for types that come from arrays so that they always us a singular name, e.g. `LedgerEntries` -&gt; `LedgerEntry`.We've added aliases for the old type names so you can continue to use them without any breaking changes but they will be removed in the future.Full list of all changed type names:- `Accounts` -&gt; `Account`- `Balances` -&gt; `Balance`- `Documents` -&gt; `Document`- `LineItems` -&gt; `LineItem`- `LedgerEntries` -&gt; `LedgerEntry`- `AccountDetail` -&gt; `AccountDetail`- `RoutingDetail` -&gt; `RoutingDetail`- `AccountDetails` -&gt; `AccountDetail`- `ContactDetails` -&gt; `ContactDetail`- `RoutingDetails` -&gt; `RoutingDetail`- `ReferenceNumbers` -&gt; `ReferenceNumber`- `AccountsPartyAddress` -&gt; `AccountPartyAddress`- `AccountsAccountDetails` -&gt; `AccountAccountDetail`- `AccountsContactDetails` -&gt; `AccountContactDetail`- `AccountsRoutingDetails` -&gt; `AccountRoutingDetail`- `RoutingDetailBankAddress` -&gt; `RoutingDetailBankAddress`- `LedgerTransactionLedgerEntries` -&gt; `LedgerTransactionLedgerEntry`- `ReceivingAccountAccountDetails` -&gt; `ReceivingAccountAccountDetail`- `ReceivingAccountContactDetails` -&gt; `ReceivingAccountContactDetail`- `ReceivingAccountRoutingDetails` -&gt; `ReceivingAccountRoutingDetail`- `LedgerEntriesResultingLedgerAccountBalances` -&gt; `LedgerEntryResultingLedgerAccountBalances`- `LedgerEntriesResultingLedgerAccountBalancesPostedBalance` -&gt; `LedgerEntryResultingLedgerAccountBalancesPostedBalance`- `LedgerEntriesResultingLedgerAccountBalancesPendingBalance` -&gt; `LedgerEntryResultingLedgerAccountBalancesPendingBalance`- `LedgerEntriesResultingLedgerAccountBalancesAvailableBalance` -&gt; `LedgerEntryResultingLedgerAccountBalancesAvailableBalance`## Rich `date` and `datetime` typesWe've improved the types for response fields / request params that correspond to `date` or `datetime` values!Previously they were just raw strings but now response fields will be instances of `date` or `datetime`.This means that if you're working with these fields and parsing them into `datetime` instances manually you will have to removeany code that performs said parsing.```diffaccount = client.internal_accounts.retrieve('&lt;id&gt;')- created_at = datetime.fromisoformat(account.created_at)+ created_at = account.created_atprint(created_at.month)```For request params you can continue to pass in strings if you want to use a datetime library other than the standard library version but if youwere writing code that looked like this:```pydt = datetime(...)for counterparty in client.counterparties.list(created_at_upper_bound=dt.isoformat()):  ...```You can remove the explicit call to `isoformat`!```diffdt = datetime(...)- for counterparty in client.counterparties.list(created_at_upper_bound=dt.isoformat()):+ for counterparty in client.counterparties.list(created_at_upper_bound=dt):  ...```## VersioningThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:1. Changes that only affect static types, without breaking runtime behavior.2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals)_.3. Changes that we do not expect to impact the vast majority of users in practice.We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.We are keen for your feedback; please open an [issue](https://www.github.com/Modern-Treasury/modern-treasury-python/issues) with questions, bugs, or suggestions.## RequirementsPython 3.7 or higher.</longdescription>
</pkgmetadata>