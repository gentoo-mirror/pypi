<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-schema![](https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8-blue?logo=python) [![PyPI version](https://img.shields.io/pypi/v/pytest-schema.svg)](https://pypi.python.org/pypi/pytest-schema/) [![PyPI download month](https://img.shields.io/pypi/dm/pytest-schema.svg)](https://pypi.python.org/pypi/pytest-schema/) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)üëç Validate return values against a schema-like object in testing[`keleshev/schema`](https://github.com/keleshev/schema) is a library for validating Python data structures, such asthose obtained from config-files, forms, external services orcommand-line parsing, converted from JSON/YAML (or something else) to Python data-types.## Install```bashpip install pytest-schema```## Basic ExampleHere is a quick example of using **`schema`**:```pythonfrom pytest_schema import schema, exact, likearticle_v1 = {    &quot;id&quot;: int,    &quot;title&quot;: str,    &quot;completed&quot;: bool,    &quot;engagement&quot;: {        &quot;viewer&quot;: list,        &quot;rating&quot;: float,    },    &quot;metadata&quot;: dict}def test_article_v1_endpoint(test_client):    &quot;&quot;&quot;    Test calling v1 endpoint and validating the response    is in the correctly/expected format.    &quot;&quot;&quot;    response_v1 = test_client.get(&quot;/api/v1/article/1&quot;)    assert exact(article_v1) == response_v1    # Same as:    # assert schema(article_v1) == response_v1article_v2 = {    **article_v1,    &quot;someNewField&quot;: int}def test_article_v2_endpoint(test_client):    &quot;&quot;&quot;    Test calling v2 endpoint is backwards compatible with v1    &quot;&quot;&quot;    response_v2 = test_client.get(&quot;/api/v2/article/1&quot;)    assert like(article_v1) == value```## Full ExampleHere is a more complex example of using **`schema`**:``` pythonfrom pytest_schema import schema, And, Enum, Optional, Or, Regex# single user schemauser = {    # id must be int    &quot;id&quot;: int,    # name must be type str    &quot;name&quot;: str,    # email must be type str or nullable    &quot;description&quot;: Or(None, str),    # email valid str format    &quot;email&quot;: Regex(r&quot;.*?@.*?\.[A-Za-z]{2,6}&quot;),    # age converted to int then validated gt 18 lt 99 and must be type str    &quot;age&quot;: And(int, lambda n: 18 &lt;= n &lt;= 99),    # gender key is optional but must be str    Optional(&quot;gender&quot;): str,    # role of enum values    &quot;role&quot;: Enum([&quot;user&quot;, &quot;super-user&quot;, &quot;admin&quot;]),    # list of ids ref friends    &quot;friends&quot;: [ int ],    # nested dict to valid as address    &quot;address&quot;: {        &quot;street&quot;: str,        Optional(&quot;street2&quot;): str,        &quot;city&quot;: str,        &quot;state&quot;: And(str, lambda s: len(s) == 2),        &quot;zipcode&quot;: str,    }}# multiple users schemausers = [ user ]def test_users_endpoint():    &quot;&quot;&quot;    Test calling a users endpoint and validating its    response of users info is correct format.    &quot;&quot;&quot;    response = [        # ‚úÖ Valid         {            &quot;id&quot;: 2,            &quot;name&quot;: &quot;Sue&quot;,            &quot;age&quot;: 28,            &quot;email&quot;: &quot;sue@gmail.com&quot;,            &quot;gender&quot;: &quot;female&quot;,            &quot;role&quot;: &quot;admin&quot;,            &quot;friends&quot;: [5, 6],            &quot;address&quot;: {                &quot;street&quot;: &quot;123 Washington Ave.&quot;,                &quot;city&quot;: &quot;New York&quot;,                &quot;state&quot;: &quot;NY&quot;,                &quot;zipcode&quot;: &quot;099012&quot;,            }        },        # ‚úÖ Valid        {            &quot;id&quot;: 5            &quot;name&quot;: &quot;Sam&quot;,            &quot;age&quot;: 42,            &quot;email&quot;: &quot;sam@aol.com&quot;,            &quot;role&quot;: &quot;user&quot;,            &quot;friends&quot;: [2, 6, 7],            &quot;address&quot;: {                &quot;street&quot;: &quot;5 Sunset St.&quot;,                &quot;street2&quot;: &quot;Apt # 55-b&quot;,                &quot;city&quot;: &quot;San Jose&quot;,                &quot;state&quot;: &quot;CA&quot;,                &quot;zipcode&quot;: &quot;054053&quot;,            }        },    ]    assert schema(users) == responsedef test_users_endpoint_INVALID():    &quot;&quot;&quot;    Test calling a users endpoint and validating its    response of users info is INVALID format.    &quot;&quot;&quot;    response = [        # ‚ùå Invalid        {            &quot;id&quot;: &quot;null&quot;,            &quot;name&quot;: None,            &quot;age&quot;: 0,            &quot;email&quot;: &quot;unknown@msn&quot;,            &quot;role&quot;: &quot;unknown&quot;,            &quot;friends&quot;: None,            &quot;address&quot;: &quot;5 Sunset St., San Jose, CA, 054053&quot;,        },    ]    # Option 1:    assert schema(users) != response        # Option 2:    with pytest.raises(SchemaError):        schema(users) == response```If data is **`valid`**, it will return the `True`.If data is **`invalid`**, it will raise `SchemaError` exception.## Supported validationsSee: [keleshev/schema](https://github.com/keleshev/schema) full documentation.</longdescription>
</pkgmetadata>