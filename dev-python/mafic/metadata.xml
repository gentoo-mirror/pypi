<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mafic[![MIT License](https://custom-icon-badges.demolab.com/github/license/ooliver1/mafic?color=845ec2&amp;logo=code-square)](https://github.com/ooliver1/mafic/blob/master/LICENSE &quot;License File&quot;)[![Releases](https://custom-icon-badges.demolab.com/github/v/release/ooliver1/mafic?display_name=tag&amp;include_prereleases&amp;sort=semver&amp;logo=commit&amp;color=c25db8)](https://github.com/ooliver1/mafic/releases &quot;Mafic Releases&quot;)[![Discord](https://img.shields.io/discord/864563184919773226?color=f062a4&amp;logo=discord&amp;logoColor=white)](https://discord.gg/mMvUABNegY &quot;Discord Server&quot;)[![Lint Workflow Status](https://custom-icon-badges.demolab.com/github/actions/workflow/status/ooliver1/mafic/lint.yml?label=lint&amp;logo=codescan-checkmark&amp;color=ff738c)](https://github.com/ooliver1/mafic/actions/workflows/lint.yml &quot;Lint Workflow&quot;)[![PyPI - Status](https://img.shields.io/pypi/status/mafic?color=ff9075&amp;label=PyPI&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/mafic &quot;Mafic PyPI Project&quot;)[![Open Issues](https://custom-icon-badges.demolab.com/github/issues-raw/ooliver1/mafic?logo=issue-opened&amp;color=ffb263)](https://github.com/ooliver1/mafic/issues &quot;Open Issues&quot;)[![Open PRs](https://custom-icon-badges.demolab.com/github/issues-pr-raw/ooliver1/mafic?logo=git-pull-request&amp;color=ffd55f)](https://github.com/ooliver1/mafic/pulls &quot;Open Pull Requests&quot;)[![Read the Docs](https://img.shields.io/readthedocs/mafic?logo=read%20the%20docs&amp;logoColor=white&amp;color=f9f871)](https://mafic.readthedocs.io/en/latest/)A properly typehinted lavalink client for discord.py, nextcord, disnake and py-cord.## Installation```bashpip install mafic```&gt; **Note**&gt; Use `python -m`, `py -m`, `python3 -m` or similar if that is how you install packages.&gt; Generally windows uses `py -m pip` and linux uses `python3 -m pip`## Discord Server[Join the Discord Server](https://discord.gg/mMvUABNegY) for support and updates.## Documentation[Read the docs](https://mafic.readthedocs.io/en/latest/).## Features- Fully customisable node balancing.- Multi-node support.- Filters.- Full API coverage.- Properly typehinted for Pyright strict.## UsageGo to the [Lavalink Repository](https://github.com/freyacodes/lavalink#server-configuration)to set up a Lavalink node.```pythonimport osimport maficimport nextcordfrom nextcord.ext import commandsclass MyBot(commands.Bot):    def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)        self.pool = mafic.NodePool(self)        self.loop.create_task(self.add_nodes())    async def add_nodes(self):        await self.pool.create_node(            host=&quot;127.0.0.1&quot;,            port=2333,            label=&quot;MAIN&quot;,            password=&quot;&lt;password&gt;&quot;,        )bot = MyBot(intents=nextcord.Intents(guilds=True, voice_states=True))@bot.slash_command(dm_permission=False)async def play(inter: nextcord.Interaction, query: str):    if not inter.guild.voice_client:        player = await inter.user.voice.channel.connect(cls=mafic.Player)    else:        player = inter.guild.voice_client    tracks = await player.fetch_tracks(query)    if not tracks:        return await inter.send(&quot;No tracks found.&quot;)    track = tracks[0]    await player.play(track)    await inter.send(f&quot;Playing {track.title}.&quot;)bot.run(...)```</longdescription>
</pkgmetadata>