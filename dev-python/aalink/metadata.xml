<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======aalink======aalink is a Python wrapper for Ableton Link built for interactive applicationsusing asyncio event loops.It provides awaitable objects for synchronizing Python code with other peersin an Ableton Link session, but it may also be used for writing fullystandalone scripts with tempo/beat synchronization, such as applicationsfor light and sound control.Installation============aalink requires at least Python 3.7. It can be installed using pip::    pip3 install aalinkIt may be required to install the latest version of MSVC Runtime librarieson Windows to use the binary wheels currently hosted on PyPI.Usage=====aalink uses asyncio. To connect to a Link session, create a ``Link`` object,passing the asyncio event loop to the constructor, and await for``Link.sync()`` as follows:.. code-block:: python    import asyncio    from aalink import Link    async def main():        loop = asyncio.get_running_loop()        link = Link(120, loop)        link.enabled = True        while True:            await link.sync(1)            print('bang!')    asyncio.run(main())``Link.sync(n)`` returns a ``Future`` scheduled to be *done* when Link timereaches next n-th beat on the timeline.In the above example, awaiting for ``link.sync(1)`` will pause and resumethe ``main`` coroutine at beats 1, 2, 3, and so on.Keep in mind that awaiting for ``sync(n)`` does not cause a coroutine to sleepfor the given number of beats. Regardless of the moment when the coroutine issuspended, it will resume when the next closest n-th beat is reached on theshared Link timeline, e.g. awaiting for ``sync(2)`` at beat 11.5 will resumeat beat 12.Non-integral beat syncing is supported. For example:.. code-block:: python    await link.sync(1/2) # resumes at beats 0.5, 1, 1.5...    await link.sync(3/2) # resumes at beats 1.5, 3, 4.5...Sync events can be scheduled with an offset (also expressed in beats) bypassing an ``offset`` argument to ``sync()``. Use this to add groove to thecoroutine rhythm... code-block:: python    async def arpeggiate():        for i in range(16):            swing = 0.25 if i % 2 == 1 else 0            await link.sync(1/2, offset=swing)            print('###', i)            await link.sync(1/2, offset=0)            print('@@@', i)Combine synced coroutines to run in series or concurrently:.. code-block:: python    import asyncio    from aalink import Link    async def main():        loop = asyncio.get_running_loop()        link = Link(120, loop)        link.enabled = True        async def sequence(name):            for i in range(4):                await link.sync(1)                print('bang!', name)        await sequence('a')        await sequence('b')        await asyncio.gather(sequence('c'), sequence('d'))    asyncio.run(main())Limitations-----------Start/stop syncing is not implemented yet.aalink aims to be punctual, but it is not 100% accurate due to the processingdelay in the internal scheduler and the uncertainty of event loop iterationstiming.For convenience, the numerical values of futures returned from ``sync()``aren't equal to the exact beat time from the moment the futures are *done*.They correspond to the previously estimated resume times instead... code-block:: python    b = await link.sync(1) # b will be 1.0, returned at beat 1.00190    b = await link.sync(1) # b will be 2.0, returned at beat 2.00027    b = await link.sync(1) # b will be 3.0, returned at beat 3.00005License-------Copyright (c) 2023 Artem Popov &lt;art@artfwo.net&gt;aalink is licensed under the GNU General Public License (GPL) version 3.You can find the full text of the GPL license in the ``LICENSE`` file includedin this repository.aalink includes code from pybind11 and Ableton Link.`pybind11 &lt;https://pybind11.readthedocs.io/&gt;`_Copyright (c) 2016 Wenzel Jakob &lt;wenzel.jakob@epfl.ch&gt;, All rights reserved.`pybind11 license &lt;https://github.com/pybind/pybind11/blob/master/LICENSE&gt;`_`Ableton Link &lt;https://ableton.github.io/link/&gt;`_Copyright 2016, Ableton AG, Berlin. All rights reserved.`Ableton Link license &lt;https://github.com/Ableton/link/blob/master/LICENSE.md&gt;`_</longdescription>
</pkgmetadata>