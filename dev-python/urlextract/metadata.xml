<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>URLExtract----------URLExtract is python class for collecting (extracting) URLs from giventext based on locating TLD... image:: https://img.shields.io/github/workflow/status/lipoja/URLExtract/Upload%20Python%20Package    :target: https://github.com/lipoja/URLExtract/actions/workflows/python-publish.yml    :alt: Build Status.. image:: https://img.shields.io/github/tag/lipoja/URLExtract.svg    :target: https://github.com/lipoja/URLExtract/tags    :alt: Git tag.. image:: https://img.shields.io/pypi/pyversions/urlextract.svg    :target: https://pypi.python.org/pypi/urlextract    :alt: Python Version CompatibilityHow does it work~~~~~~~~~~~~~~~~It tries to find any occurrence of TLD in given text. If TLD is found itstarts from that position to expand boundaries to both sides searchingfor &quot;stop character&quot; (usually whitespace, comma, single or doublequote).A dns check option is available to also reject invalid domain names.NOTE: List of TLDs is downloaded from iana.org to keep you up to date with new TLDs.Installation~~~~~~~~~~~~Package is available on PyPI - you can install it via pip... image:: https://img.shields.io/pypi/v/urlextract.svg    :target: https://pypi.python.org/pypi/urlextract.. image:: https://img.shields.io/pypi/status/urlextract.svg    :target: https://pypi.python.org/pypi/urlextract::   pip install urlextractDocumentation~~~~~~~~~~~~~Online documentation is published at http://urlextract.readthedocs.io/Requirements~~~~~~~~~~~~- IDNA for converting links to IDNA format- uritools for domain name validation- platformdirs for determining user's cache directory- dnspython to cache DNS results   ::       pip install idna       pip install uritools       pip install platformdirs       pip install dnspythonOr you can install the requirements with `requirements.txt`:   ::       pip install -r requirements.txtRun tox~~~~~~~Install tox:   ::       pip install toxThen run it:   ::       toxExample~~~~~~~You can look at command line program at the end of *urlextract.py*.But everything you need to know is this:.. code:: python    from urlextract import URLExtract    extractor = URLExtract()    urls = extractor.find_urls(&quot;Text with URLs. Let's have URL janlipovsky.cz as an example.&quot;)    print(urls) # prints: ['janlipovsky.cz']Or you can get generator over URLs in text by:.. code:: python    from urlextract import URLExtract    extractor = URLExtract()    example_text = &quot;Text with URLs. Let's have URL janlipovsky.cz as an example.&quot;    for url in extractor.gen_urls(example_text):        print(url) # prints: ['janlipovsky.cz']Or if you want to just check if there is at least one URL you can do:.. code:: python    from urlextract import URLExtract    extractor = URLExtract()    example_text = &quot;Text with URLs. Let's have URL janlipovsky.cz as an example.&quot;    if extractor.has_urls(example_text):        print(&quot;Given text contains some URL&quot;)If you want to have up to date list of TLDs you can use ``update()``:.. code:: python    from urlextract import URLExtract    extractor = URLExtract()    extractor.update()or ``update_when_older()`` method:.. code:: python    from urlextract import URLExtract    extractor = URLExtract()    extractor.update_when_older(7) # updates when list is older that 7 daysKnown issues~~~~~~~~~~~~Since TLD can be not only shortcut but also some meaningful word we might see &quot;false matches&quot; when we are searchingfor URL in some HTML pages. The false match can occur for example in css or JS when you are referring to HTML itemusing its classes.Example HTML code:.. code-block:: html  &lt;p class=&quot;bold name&quot;&gt;Jan&lt;/p&gt;  &lt;style&gt;    p.bold.name {      font-weight: bold;    }  &lt;/style&gt;If this HTML snippet is on the input of ``urlextract.find_urls()`` it will return ``p.bold.name`` as an URL.Behavior of urlextract is correct, because ``.name`` is valid TLD and urlextract just see that there is ``bold.name``valid domain name and ``p`` is valid sub-domain.License~~~~~~~This piece of code is licensed under The MIT License.</longdescription>
</pkgmetadata>