<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyloudnorm  [![Build Status](https://travis-ci.org/csteinmetz1/pyloudnorm.svg?branch=master)](https://travis-ci.org/csteinmetz1/pyloudnorm) ![Zenodo](https://zenodo.org/badge/DOI/10.5281/zenodo.3551801.svg)Flexible audio loudness meter in Python. Implementation of [ITU-R BS.1770-4](https://www.itu.int/dms_pubrec/itu-r/rec/bs/R-REC-BS.1770-4-201510-I!!PDF-E.pdf). &lt;br/&gt;Allows control over gating block size and frequency weighting filters for additional control. For full details on the implementation see our [paper](https://csteinmetz1.github.io/pyloudnorm-eval/paper/pyloudnorm_preprint.pdf) with a summary in our [AES presentation video](https://www.youtube.com/watch?v=krSJpQ3d4gE).## InstallationYou can install with pip as follows```pip install pyloudnorm```For the latest releases always install from the GitHub repo```pip install git+https://github.com/csteinmetz1/pyloudnorm```## Usage### Find the loudness of an audio fileIt's easy to measure the loudness of a wav file. Here we use PySoundFile to read a .wav file as an ndarray.```pythonimport soundfile as sfimport pyloudnorm as pylndata, rate = sf.read(&quot;test.wav&quot;) # load audio (with shape (samples, channels))meter = pyln.Meter(rate) # create BS.1770 meterloudness = meter.integrated_loudness(data) # measure loudness```### Loudness normalize and peak normalize audio filesMethods are included to normalize audio files to desired peak values or desired loudness.```pythonimport soundfile as sfimport pyloudnorm as pylndata, rate = sf.read(&quot;test.wav&quot;) # load audio# peak normalize audio to -1 dBpeak_normalized_audio = pyln.normalize.peak(data, -1.0)# measure the loudness first meter = pyln.Meter(rate) # create BS.1770 meterloudness = meter.integrated_loudness(data)# loudness normalize audio to -12 dB LUFSloudness_normalized_audio = pyln.normalize.loudness(data, loudness, -12.0)```### Advanced operationA number of alternate weighting filters are available, as well as the ability to adjust the analysis block size. Examples are shown below.```pythonimport soundfile as sfimport pyloudnorm as pylnfrom pyloudnorm import IIRfilterdata, rate = sf.read(&quot;test.wav&quot;) # load audio# block sizemeter1 = pyln.Meter(rate)                               # 400ms block sizemeter2 = pyln.Meter(rate, block_size=0.200)             # 200ms block size# filter classesmeter3 = pyln.Meter(rate)                               # BS.1770 metermeter4 = pyln.Meter(rate, filter_class=&quot;DeMan&quot;)         # fully compliant filters  meter5 = pyln.Meter(rate, filter_class=&quot;Fenton/Lee 1&quot;)  # low complexity improvement by Fenton and Leemeter6 = pyln.Meter(rate, filter_class=&quot;Fenton/Lee 2&quot;)  # higher complexity improvement by Fenton and Leemeter7 = pyln.Meter(rate, filter_class=&quot;Dash et al.&quot;)   # early modification option# create your own IIR filtersmy_high_pass  = IIRfilter(0.0, 0.5, 20.0, rate, 'high_pass')my_high_shelf = IIRfilter(2.0, 0.7, 1525.0, rate, 'high_shelf')# create a meter initialized without filtersmeter8 = pyln.Meter(rate, filter_class=&quot;custom&quot;)# load your filters into the metermeter8._filters = {'my_high_pass' : my_high_pass, 'my_high_shelf' : my_high_shelf}```## Dependancies- **SciPy** ([https://www.scipy.org/](https://www.scipy.org/))- **NumPy** ([http://www.numpy.org/](http://www.numpy.org/))## CitationIf you use pyloudnorm in your work please consider citing us.```@inproceedings{steinmetz2021pyloudnorm,        title={pyloudnorm: {A} simple yet flexible loudness meter in Python},        author={Steinmetz, Christian J. and Reiss, Joshua D.},        booktitle={150th AES Convention},        year={2021}}```## References&gt; Ian Dash, Luis Miranda, and Densil Cabrera, &quot;[Multichannel Loudness Listening Test](http://www.aes.org/e-lib/browse.cfm?elib=14581),&quot;&gt; 124th International Convention of the Audio Engineering Society, May 2008&gt; Pedro D. Pestana and Álvaro Barbosa, &quot;[Accuracy of ITU-R BS.1770 Algorithm in Evaluating Multitrack Material](http://www.aes.org/e-lib/online/browse.cfm?elib=16608),&quot;&gt; 133rd International Convention of the Audio Engineering Society, October 2012&gt; Pedro D. Pestana, Josh D. Reiss, and Álvaro Barbosa, &quot;[Loudness Measurement of Multitrack Audio Content Using Modifications of ITU-R BS.1770](http://www.aes.org/e-lib/browse.cfm?elib=16714),&quot;&gt; 134th International Convention of the Audio Engineering Society, May 2013&gt; Steven Fenton and Hyunkook Lee, &quot;[Alternative Weighting Filters for Multi-Track Program Loudness Measurement](http://www.aes.org/e-lib/browse.cfm?elib=19215),&quot;&gt; 143rd International Convention of the Audio Engineering Society, October 2017&gt; Brecht De Man, &quot;[Evaluation of Implementations of the EBU R128 Loudness Measurement](http://www.aes.org/e-lib/browse.cfm?elib=19790),&quot; &gt; 145th International Convention of the Audio Engineering Society, October 2018. </longdescription>
</pkgmetadata>