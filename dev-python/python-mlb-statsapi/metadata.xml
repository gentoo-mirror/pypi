<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;# Python MLB Stats API**The Unofficial Python Wrapper for the MLB Stats API**[![PyPI version](https://badge.fury.io/py/python-mlb-statsapi.svg)](https://badge.fury.io/py/python-mlb-statsapi)![Development Branch Status](https://github.com/zero-sum-seattle/python-mlb-statsapi/actions/workflows/build-and-test-mlbstatsapi-test.yml/badge.svg?event=push)![Periodic External Test Status](https://github.com/zero-sum-seattle/python-mlb-statsapi/actions/workflows/catch-and-report.yml/badge.svg?event=schedule)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/python-mlb-statsapi)![GitHub](https://img.shields.io/github/license/zero-sum-seattle/python-mlb-statsapi)&lt;div align=&quot;left&quot;&gt;### *Copyright Notice*  This package and its authors are not affiliated with MLB or any MLB team. This API wrapper interfaces with MLB's Stats API. Use of MLB data is subject to the notice posted at http://gdx.mlb.com/components/copyright.txt.###### This is an educational project - Not for commercial use. ![MLB Stats API](https://user-images.githubusercontent.com/2068393/203456246-dfdbdf0f-1e43-4329-aaa9-1c4008f9800d.jpg)## Getting Started*Python-mlb-statsapi* is a Python library that provides developers with access to the MLB Stats API which allows developers to retrieve information related to MLB teams, players, stats, and more. *Python-mlb-statsapi* written in python 3.10+.To get started with the library, refer to the information provided in this README. For a more detailed explanation, check out the documentation and the Wiki section. The Wiki contains information on return objects, endpoint structure, usage examples, and more. It is a valuable resource for getting started, working with the library, and finding the information you need.&lt;div align=&quot;center&quot;&gt;### [Examples](#examples) | [Wiki](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki) | [API](https://statsapi.mlb.com/) &lt;div align=&quot;left&quot;&gt;## Installation```pythonpython3 -m pip install python-mlb-statsapi==0.5.13```## Usage```pythonpython3&gt;&gt;&gt; import mlbstatsapi&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; mlb.get_people_id(&quot;Ty France&quot;)[664034]&gt;&gt;&gt; stats = ['season', 'seasonAdvanced']&gt;&gt;&gt; groups = ['hitting']&gt;&gt;&gt; params = {'season': 2022}&gt;&gt;&gt; mlb.get_player_stats(664034, stats, groups, **params){'hitting': {'season': Stat, 'seasonadvanced': Stat }}&gt;&gt;&gt; mlb.get_team_id(&quot;Oakland Athletics&quot;)[133]&gt;&gt;&gt; stats = ['season', 'seasonAdvanced']&gt;&gt;&gt; groups = ['pitching']&gt;&gt;&gt; params = {'season': 2022}&gt;&gt;&gt; mlb.get_team_stats(133, stats, groups, **params){'pitching': {'season': Stat, 'seasonadvanced': Stat }}```## Documentation### [People, Person, Players, Coaches](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-People)* `Mlb.get_people_id(self, fullname: str, sport_id: int = 1, search_key: str = 'fullname', **params)` - Return Person Id(s) from fullname* `Mlb.get_person(self, player_id: int, **params)` - Return Person Object from Id* `Mlb.get_people(self, sport_id: int = 1, **params)` - Return all Players from Sport### [Draft](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Draft(round))* `Mlb.get_draft(self, year_id: int, **params)` - Return a draft for a given year### [Awards](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Award)* `Mlb.get_awards(self, award_id: int, **params)` - Return rewards recipinets for a given award### [Teams](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Team)* `Mlb.get_team_id(self, team_name: str, search_key: str = 'name', **params)` - Return Team Id(s) from name* `Mlb.get_team(self, team_id: int, **params)` - Return Team Object from Team Id* `Mlb.get_teams(self, sport_id: int = 1, **params)` - Return all Teams for Sport* `Mlb.get_team_coaches(self, team_id: int, **params)` - Return coaching roster for team for current or specified season* `Mlb.get_team_roster(self, team_id: int, **params)` - Return player roster for team for current or specified season### [Stats](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Stats)* `Mlb.get_player_stats(self, person_id: int, stats: list, groups: list, **params)` - Return stats by player id, stat type and groups* `Mlb.get_team_stats(self, team_id: int, stats: list, groups: list, **params)` - Return stats by team id, stat types and groups* `Mlb.get_stats(self, stats: list, groups: list, **params: dict)` - Return stats by stat type and group args* `Mlb.get_players_stats_for_game(self, person_id: int, game_id: int, **params)` - Return player stats for a game### [Gamepace](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Gamepace)* `Mlb.get_gamepace(self, season: str, sport_id=1, **params)` - Return pace of game metrics for specific sport, league or team.### [Venues](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Venue)* `Mlb.get_venue_id(self, venue_name: str, search_key: str = 'name', **params)` - Return Venue Id(s)* `Mlb.get_venue(self, venue_id: int, **params)` - Return Venue Object from venue Id* `Mlb.get_venues(self, **params)` - Return all Venues### [Sports](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Sport)* `Mlb.get_sport(self, sport_id: int, **params)` - Return a Sport object from Id* `Mlb.get_sports(self, **params)` - Return all teams for Sport Id* `Mlb.get_sport_id(self, sport_name: str, search_key: str = 'name', **params)`- Return Sport Id from name### [Schedules](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Schedule)* `Mlb.get_schedule(self, date: str, start_date: str, end_date: str, sport_id: int, team_id: int, **params)` - Return a Schedule### [Divisions](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Division)* `Mlb.get_division(self, division_id: int, **params)` - Return a Divison * `Mlb.get_divisions(self, **params)` - Return all Divisions* `Mlb.get_division_id(self, division_name: str, search_key: str = 'name', **params)` - Return Division Id(s) from name### [Leagues](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-League)* `Mlb.get_league(self, league_id: int, **params)` - Return a League from Id* `Mlb.get_leagues(self, **params)` - Return all Leagues* `Mlb.get_league_id(self, league_name: str, search_key: str = 'name', **params)` - Return League Id(s)### [Seasons](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Season)* `Mlb.get_season(self, season_id: str, sport_id: int = None, **params)` - Return a season* `Mlb.get_seasons(self, sportid: int = None, **params)` - Return all seasons### [Standings](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Standings)* `Mlb.get_standings(self, league_id: int, season: str, **params)` - Return standings### [Schedules](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Schedule)* `Mlb.get_schedule(self, date: str = None, start_date: str = None, end_date: str = None, sport_id: int = 1, team_id: int = None, **params)` - Return a Schedule from dates* `Mlb.get_scheduled_games_by_date(self, date: str = None,start_date: str = None, end_date: str = None, sport_id: int = 1, **params)` - Return game ids from dates### [Games](https://github.com/zero-sum-seattle/python-mlb-statsapi/wiki/Data-Types:-Game)* `Mlb.get_game(self, game_id: int, **params)` - Return the Game for a specific Game Id* `Mlb.get_game_play_by_play(self, game_id: int, **params)` - Return Play by play data for a game* `Mlb.get_game_line_score(self, game_id: int, **params)` - Return a Linescore for a game* `Mlb.get_game_box_score(self, game_id: int, **params)` - Return a Boxscore for a game## ExamplesLet's show some examples of getting stat objects from the API. What is baseball with out stats right?### MLB Stats#### Player StatsGet the Id(s) of the players you want stats for and set stat types and groups.```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; player_id = mlb.get_people_id(&quot;Ty France&quot;)[0]&gt;&gt;&gt; stats = ['season', 'career']&gt;&gt;&gt; groups = ['hitting', 'pitching']&gt;&gt;&gt; params = {'season': 2022}```Use player.id and stat types and groups to return a stats dictionary```python&gt;&gt;&gt; stat_dict = mlb.get_player_stats(player_id, stats=stats, groups=groups, **params)&gt;&gt;&gt; season_hitting_stat = stat_dict['hitting']['season']&gt;&gt;&gt; career_pitching_stat = stat_dict['pitching']['career']```Print season hitting stats```python&gt;&gt;&gt; for split in season_hitting_stat.splits:...     for k, v in split.stat.__dict__.items():...             print(k, v)gamesplayed 140groundouts 163airouts 148runs 65doubles 27triples 1homeruns 20strikeouts 94baseonballs 35...&gt;&gt;&gt; for split in career_pitching_stat.splits:...     for k, v in split.stat.__dict__.items():...             print(k, v)gamesplayed 2gamesstarted 0groundouts 2airouts 4runs 1doubles 0triples 0homeruns 1strikeouts 0baseonballs 0intentionalwalks 0hits 2hitbypitch 0...```#### Team statsGet the Team Id(s)```pythonpython3&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; team_id = mlb.get_team_id('Seattle Mariners')[0]```Set the stat types and groups.```python&gt;&gt;&gt; stats = ['season', 'seasonAdvanced']&gt;&gt;&gt; groups = ['hitting']&gt;&gt;&gt; params = {'season': 2022}```Use team.id and the stat types and groups to return season hitting stats```pythonstats = mlb.get_team_stats(team_id, stats=stats, groups=groups, **params)season_hitting = stats['hitting']['season']advanced_hitting = stats['hitting']['seasonadvanced']```Print season and seasonadvanced stats```python&gt;&gt;&gt; for split in season_hitting.splits:...     for k, v in split.stat.__dict__.items():...         print(k, v)gamesplayed 162groundouts 1273airouts 1523runs 690doubles 229triples 19&gt;&gt;&gt;&gt;&gt;&gt; for split in advanced_hitting.splits:...     for k, v in split.stat.__dict__.items():...         print(k, v)...plateappearances 6117totalbases 2094leftonbase 1129sacbunts 9sacflies 45```### More stats examples#### Expected StatsGet player Id's```python&gt;&gt;&gt; player_id = mlb.get_people_id('Ty France')[0]```Set the stat type and group```python&gt;&gt;&gt; stats = ['expectedStatistics']&gt;&gt;&gt; group = ['hitting']&gt;&gt;&gt; params = {'season': 2022}```Get Stats```python&gt;&gt;&gt; stats = mlb.get_player_stats(player_id, stats=stats, groups=group, **params)&gt;&gt;&gt; expectedstats = stats['hitting']['expectedstatistics']&gt;&gt;&gt; for split in expectedstats.splits:...     for k, v in split.stat.__dict__.items():...         print(k, v)avg .259slg .394woba .317wobacon .338```#### vsPlayerGet pitcher and batter player Ids```python&gt;&gt;&gt; ty_france_id = mlb.get_people_id('Ty France')[0]&gt;&gt;&gt; shohei_ohtani_id = mlb.get_people_id('Shohei Ohtani')[0]```Set stat type, stat groups, and params```python&gt;&gt;&gt; stats = ['vsPlayer']&gt;&gt;&gt; group = ['hitting']&gt;&gt;&gt; params = {'opposingPlayerId': shohei_ohtani_id, 'season': 2022}```Get stats```python&gt;&gt;&gt; stats = mlb.get_player_stats(ty_france_id, stats=stats, groups=group, **params)&gt;&gt;&gt; vs_player_total = stats['hitting']['vsplayertotal']&gt;&gt;&gt; for split in vs_player_total.splits:...     for k, v in split.stat.__dict__.items():...             print(k, v)gamesplayed 4groundouts 3airouts 4runs Nonedoubles 1triples 0homeruns 0...&gt;&gt;&gt; vs_player = stats['hitting']['vsplayer']&gt;&gt;&gt; for split in vs_player.splits:...     for k, v in split.stat.__dict__.items():...             print(k, v)gamesplayed 2groundouts 1airouts 2runs Nonedoubles 1triples 0homeruns 0```#### hotColdZonesGet player Id's```python&gt;&gt;&gt; ty_france_id = mlb.get_people_id('Ty France')[0]&gt;&gt;&gt; shohei_ohtani_id = mlb.get_people_id('Shohei Ohtani')[0]```Set the stat types and groups```python&gt;&gt;&gt; stats = ['hotColdZones']&gt;&gt;&gt; hitting_group = ['hitting']&gt;&gt;&gt; pitching_group = ['pitching']&gt;&gt;&gt; params = {'season': 2022}```The stat groups pitching and hitting both return hotColdZones for a pitcher and hitter. hotColdZones are not assigned to astat group because of issues related to the REST API. So hotColdZones will be assigned to the stat key in stats return dict.```python&gt;&gt;&gt; hitting_hotcoldzones = mlb.get_player_stats(ty_france_id stats=stats, groups=hitting_group, **params)&gt;&gt;&gt; pitching_hotcoldzones = mlb.get_player_stats(shohei_ohtani_id, stats=stats, groups=pitching_group, **params)```hotColdZones returns a list of the HotColdZones```python&gt;&gt;&gt; ty_france_hotcoldzones = hitting_hotcoldzones['stats']['hotcoldzones']&gt;&gt;&gt; shohei_ohtani_hotcoldzones = pitching_hotcoldzones['stats']['hotcoldzones']```Loop through hotColdZone objects for Ty France```python&gt;&gt;&gt; for split in ty_france_hotcoldzones.splits:...     print(split.stat.name)...onBasePercentageonBasePlusSluggingsluggingPercentageexitVelocitybattingAverage```Loop through hotColdZone objects for Shoei Ohtani```python&gt;&gt;&gt; for split in shohei_ohtani_hotcoldzones.splits:...     print(split.stat.name)...onBasePercentageonBasePlusSluggingsluggingPercentageexitVelocitybattingAverage```Print zone information for obp```python&gt;&gt;&gt; for split in ty_france_hotcoldzones.splits:...     if split.stat.name == 'onBasePercentage':...             for zone in split.stat.zones:...                 print('zone: ', zone.zone)...                 print('value: ', zone.value)zone:  01value:  .226zone:  02value:  .400zone:  03value:  .375zone:  04```#### Passing paramsGet Team Ids```pythonpython3&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; team_id = mlb.get_team_id('Seattle Mariners')[0]```Set the stat types and groups.```python&gt;&gt;&gt; stats = ['season', 'seasonAdvanced']&gt;&gt;&gt; groups = ['hitting']&gt;&gt;&gt; params = {'season': 2022}```Pass season to get_team_stats()```pythonstats = mlb.get_team_stats(team_id, stats=stats, groups=groups, **params)season_hitting = stats['hitting']['season']advanced_hitting = stats['hitting']['seasonadvanced']```season should be 2018```python&gt;&gt;&gt; for split in season_hitting.splits:...     print('Season: ', split.season)...     for k, v in split.stat.__dict__.items():...         print(k, v)...Season:  2018gamesplayed 162groundouts 1535airouts 1425runs 677...&gt;&gt;&gt; for split in advanced_hitting.splits:...     print('Season: ', split.season)...     for k, v in split.stat.__dict__.items():...         print(k, v)...Season:  2018plateappearances 6087totalbases 2250leftonbase 1084sacbunts 29sacflies 41...```### Gamepace examplesGet pace of game metrics for specific sport, league or team.```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; season = 2021&gt;&gt;&gt; gamepace = mlb.get_gamepace(season)```### Schedule ExamplesGet a schedule for given date```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; schedule = mlb.get_schedule_date('2022-10-13')```Get ScheduleDates from Schedule```pythondates = schedule.dates```Print Game status and Home and Away Teams```python&gt;&gt;&gt; for date in dates:...     for game in date.games:...             print(game.status)...             print(game.teams.home)...             print(game.teams.away)```### Game ExamplesGet a Game for a given game id```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; game = mlb.get_game(662242)```Get the weather for a game for a given game id```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; game = mlb.get_game(662242)&gt;&gt;&gt; weather = game.gamedata.weather&gt;&gt;&gt;&gt;&gt;&gt; print(weather.condition)&gt;&gt;&gt; print(weather.temp)&gt;&gt;&gt; print(weather.wind)```Get the current status of a game for a given game id```python&gt;&gt;&gt; mlb = mlbstatsapi.mlb()&gt;&gt;&gt; game = mlb.get_game(662242)&gt;&gt;&gt;&gt;&gt;&gt; linescore = game.livedata.linescore&gt;&gt;&gt; hometeaminfo = game.gamedata.teams.home&gt;&gt;&gt; awayteaminfo = game.gamedata.teams.away&gt;&gt;&gt; hometeamstatus = linescore.teams.home&gt;&gt;&gt; awayteamstatus = linescore.teams.away&gt;&gt;&gt;&gt;&gt;&gt; print(&quot;home: &quot;, hometeaminfo.franchisename, hometeaminfo.clubname)&gt;&gt;&gt; print(&quot;      runs:&quot;, hometeamstatus.runs)&gt;&gt;&gt; print(&quot;      hits:&quot;, hometeamstatus.hits)&gt;&gt;&gt; print(&quot;      errors:&quot;, hometeamstatus.errors)&gt;&gt;&gt; print(&quot;away: &quot;, awayteaminfo.franchisename, awayteaminfo.clubname)&gt;&gt;&gt; print(&quot;      runs:&quot;, awayteamstatus.runs)&gt;&gt;&gt; print(&quot;      hits:&quot;, awayteamstatus.hits)&gt;&gt;&gt; print(&quot;      errors:&quot;, awayteamstatus.errors)&gt;&gt;&gt; print(&quot;&quot;)&gt;&gt;&gt; print(&quot;inning:&quot;, linescore.inninghalf, linescore.currentinningordinal)&gt;&gt;&gt; print(&quot;balls:&quot;, linescore.balls)&gt;&gt;&gt; print(&quot;strikes:&quot;, linescore.strikes)&gt;&gt;&gt; print(&quot;Outs:&quot;, linescore.outs)```Get the play by play, line score, and box score objects from a game```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; game = mlb.get_game(662242)&gt;&gt;&gt;&gt;&gt;&gt; play_by_play = game.livedata.plays&gt;&gt;&gt; line_score = game.livedata.linescore&gt;&gt;&gt; box_score = game.livedata.boxscore```#### Play by PlayGet only the play by play for a given game id```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; playbyplay = mlb.get_play_by_play(662242)```#### Line ScoreGet only the line score for a given game id```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; linescore = mlb.get_line_score(662242)```#### Box ScoreGet only the box score for a given game id```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; boxscore = mlb.get_box_score(662242)```### People ExamplesGet all Players for a given sport id```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; sport_id = mlb.get_sport_id()&gt;&gt;&gt; players = mlb.get_players(sport_id=sport_id)&gt;&gt;&gt; for player in players:...     print(player.id)```Get a player id```python&gt;&gt;&gt; player_id = mlb.get_people_id(&quot;Ty France&quot;)&gt;&gt;&gt; print(player_id[0])&gt;&gt;&gt; [664034]```### Team ExamplesGet a Team```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; team_ids = mlb.get_team_id(&quot;Seattle Mariners&quot;)&gt;&gt;&gt; team_id = team_ids[0]&gt;&gt;&gt; team = mlb.get_team(team_id.id)&gt;&gt;&gt; print(team.id)&gt;&gt;&gt; print(team.name)```Get a Player Roster```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; team_id = 133&gt;&gt;&gt; players = mlb.get_team_roster(team_id)&gt;&gt;&gt; for player in players:        print(player.jerseynumber)```Get a Coach Roster```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; team_id = 133&gt;&gt;&gt; coaches = mlb.get_team_coaches(team_id)&gt;&gt;&gt; for coach in coaches:        print(coach.title)```### Draft ExamplesGet a draft for a year```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; draft_year = '2019'&gt;&gt;&gt; draft = mlb.get_draft(draft_year)```Get Players from Draft```python&gt;&gt;&gt; draftpicks = draft[0].picks&gt;&gt;&gt; for draftpick in draftpicks:...     print(draftpick.id)...     print(draftpick.pickround)```### Award ExamplesGet awards for a given award id```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; retiredjersy = self.mlb.get_awards(award_id='RETIREDUNI_108')&gt;&gt;&gt; for recipient in retiredjersy.awards:...     print (recipient.player.nameFirstLast, recipient.name, recipient.date)```### Venue ExamplesGet a Venue```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; vevue_ids = mlb.get_venue_id('PNC Park')&gt;&gt;&gt; venue_id = venue_ids[0]&gt;&gt;&gt; venue = mlb.get_team(venue.id)&gt;&gt;&gt; print(venue.id)&gt;&gt;&gt; print(venue.name)```### Sport ExamplesGet a Sport```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; sport_ids = mlb.get_sport_id('Major League Baseball')&gt;&gt;&gt; sport_id = sport_ids[0]&gt;&gt;&gt; sport = mlb.get_sport(sport_id)```### Division ExamplesGet a division```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; division = mlb.get_division(200)&gt;&gt;&gt; print(division.name)```### League ExamplesGet a league```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; league = mlb.get_league(103)&gt;&gt;&gt; print(league.name)```### Season ExamplesGet a Season```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; season = mlb.get_season(2018)&gt;&gt;&gt; print(season.seasonid)```### Standings ExamplesGet a Standings```python&gt;&gt;&gt; mlb = mlbstatsapi.Mlb()&gt;&gt;&gt; standings = mlb.get_standings(103, 2018)```</longdescription>
</pkgmetadata>