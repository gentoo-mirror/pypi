<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pyhacrf=======.. image:: https://travis-ci.org/dedupeio/pyhacrf.svg?branch=master    :target: https://travis-ci.org/dedupeio/pyhacrf    .. image:: https://ci.appveyor.com/api/projects/status/kibqrd7wnsk2ilpf/branch/master?svg=true    :target: https://ci.appveyor.com/project/fgregg/pyhacrfHidden alignment conditional random field for classifying string pairs -a learnable edit distance.Part of the Dedupe.io cloud service and open source toolset for de-duplicating and finding fuzzy matches in your data: https://dedupe.ioThis package aims to implement the HACRF machine learning model with a``sklearn``-like interface. It includes ways to fit a model to trainingexamples and score new example.The model takes string pairs as input and classify them into any numberof classes. In McCallum's original paper the model was applied to thedatabase deduplication problem. Each database entry was paired withevery other entry and the model then classified whether the pair was a'match' or a 'mismatch' based on training examples of matches andmismatches.I also tried to use it as learnable string edit distance for normalizingnoisy text. See *A Conditional Random Field for Discriminatively-trainedFinite-state String Edit Distance* by McCallum, Bellare, and Pereira,and the report *Conditional Random Fields for Noisy text normalisation*by Dirko Coetsee.Example-------.. code:: python    from pyhacrf import StringPairFeatureExtractor, Hacrf    training_X = [('helloooo', 'hello'), # Matching examples                  ('h0me', 'home'),                  ('krazii', 'crazy'),                  ('non matching string example', 'no really'), # Non-matching examples                  ('and another one', 'yep')]    training_y = ['match',                  'match',                  'match',                  'non-match',                  'non-match']    # Extract features    feature_extractor = StringPairFeatureExtractor(match=True, numeric=True)    training_X_extracted = feature_extractor.fit_transform(training_X)    # Train model    model = Hacrf(l2_regularization=1.0)    model.fit(training_X_extracted, training_y)    # Evaluate    from sklearn.metrics import confusion_matrix    predictions = model.predict(training_X_extracted)    print(confusion_matrix(training_y, predictions))    &gt; [[0 3]    &gt;  [2 0]]    print(model.predict_proba(training_X_extracted))    &gt; [[ 0.94914812  0.05085188]    &gt;  [ 0.92397711  0.07602289]    &gt;  [ 0.86756034  0.13243966]    &gt;  [ 0.05438812  0.94561188]    &gt;  [ 0.02641275  0.97358725]]Dependencies------------This package depends on ``numpy``. The LBFGS optimizer in ``pylbfgs`` isused, but alternative optimizers can be passed.Install-------Install by running:::    python setup.py installor from pypi:::    pip install pyhacrfDeveloping----------Clone from repository, then::    pip install -r requirements.txt    cython pyhacrf/*.pyx    python setup.py installTo deploy to pypi, make sure you have compiled the \*.pyx files to \*.c</longdescription>
</pkgmetadata>