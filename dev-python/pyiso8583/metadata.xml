<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>iso8583 - a Python package for parsing ISO8583 data===================================================|pypi| |docs| |coverage|``iso8583`` package serializes and deserializes ISO8583 data betweenraw ``bytes`` ISO8583 data and a regular Python ``dict``.``iso8583`` package supports custom `specifications &lt;https://pyiso8583.readthedocs.io/en/latest/specifications.html&gt;`_that can define:- Field length and data encoding, such as BCD, ASCII, EBCDIC, etc.- Field length count measured in bytes or nibbles.- Field type, such as fixed, LLVAR, LLLVAR, etc.- Maximum length- Optional field descriptionMultiple specifications can co-exist to support ISO8583 messages for POS, ATM,file actions, and so on. Simply define a new specification dictionary. ``iso8583``package includes a starter specification in ``iso8583.specs`` module that can beused as a base to create own custom/proprietary specifications.Additional information is available on `Read The Docs &lt;http://pyiso8583.readthedocs.org&gt;`_.Installation------------``iso8583`` is published on `PyPI`__ as ``pyiso8583`` and can be installed from there:.. code-block::    pip install pyiso8583__ https://pypi.org/project/pyiso8583/Encoding &amp; Decoding-------------------Use `iso8583.decode &lt;https://pyiso8583.readthedocs.io/en/latest/functions.html#iso8583.decode&gt;`_to decode raw ISO8583 message.It returns two dictionaries: one with decoded data and one with encoded data... code-block:: python    &gt;&gt;&gt; import pprint    &gt;&gt;&gt; import iso8583    &gt;&gt;&gt; from iso8583.specs import default_ascii as spec    &gt;&gt;&gt; encoded_raw = b'02004000000000000000101234567890'    &gt;&gt;&gt; decoded, encoded = iso8583.decode(encoded_raw, spec)    &gt;&gt;&gt; pprint.pp(decoded)    {'t': '0200', 'p': '4000000000000000', '2': '1234567890'}    &gt;&gt;&gt; pprint.pp(encoded)    {'t': {'len': b'', 'data': b'0200'},     'p': {'len': b'', 'data': b'4000000000000000'},     '2': {'len': b'10', 'data': b'1234567890'}}Modify the decoded message to send a response back.Change message type from '0200' to '0210'.Remove field 2 (PAN). And add field 39 (Response Code)... code-block:: python    &gt;&gt;&gt; decoded['t'] = '0210'    &gt;&gt;&gt; decoded.pop('2', None)    '1234567890'    &gt;&gt;&gt; decoded['39'] = '05'Use `iso8583.encode &lt;https://pyiso8583.readthedocs.io/en/latest/functions.html#iso8583.encode&gt;`_to encode updated ISO8583 message.It returns a raw ISO8583 message and a dictionary with encoded data... code-block:: python    &gt;&gt;&gt; encoded_raw, encoded = iso8583.encode(decoded, spec)    &gt;&gt;&gt; encoded_raw    bytearray(b'0210000000000200000005')    &gt;&gt;&gt; pprint.pp(decoded)    {'t': '0210', 'p': '0000000002000000', '39': '05'}    &gt;&gt;&gt; pprint.pp(encoded)    {'t': {'len': b'', 'data': b'0210'},     'p': {'len': b'', 'data': b'0000000002000000'},     '39': {'len': b'', 'data': b'05'}}Pretty Print Messages---------------------Use `iso8583.pp &lt;https://pyiso8583.readthedocs.io/en/latest/functions.html#iso8583.pp&gt;`_to pretty print ISO8583 message... code-block:: python    &gt;&gt;&gt; import iso8583    &gt;&gt;&gt; from iso8583.specs import default_ascii as spec    &gt;&gt;&gt; encoded_raw = b'02004000000000000000101234567890'    &gt;&gt;&gt; decoded, encoded = iso8583.decode(encoded_raw, spec)    &gt;&gt;&gt; iso8583.pp(decoded, spec)    t   Message Type                  : '0200'    p   Bitmap, Primary               : '4000000000000000'    2   Primary Account Number (PAN)  : '1234567890'    &gt;&gt;&gt; iso8583.pp(encoded, spec)    t   Message Type                  : b'0200'    p   Bitmap, Primary               : b'4000000000000000'    2   Primary Account Number (PAN)  : b'10' b'1234567890'Contribute----------``iso8583`` package is hosted on `GitHub &lt;https://github.com/knovichikhin/pyiso8583&gt;`_.Feel free to fork and send contributions over... |pypi| image:: https://img.shields.io/pypi/v/pyiso8583.svg    :alt: PyPI    :target:  https://pypi.org/project/pyiso8583/.. |docs| image:: https://readthedocs.org/projects/pyiso8583/badge/?version=latest    :alt: Documentation Status    :target: https://pyiso8583.readthedocs.io/en/latest/?badge=latest.. |coverage| image:: https://codecov.io/gh/knovichikhin/pyiso8583/branch/master/graph/badge.svg    :alt: Test coverage    :target: https://codecov.io/gh/knovichikhin/pyiso8583</longdescription>
</pkgmetadata>