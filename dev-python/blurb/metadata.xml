<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>blurb=====.. image:: https://img.shields.io/pypi/v/blurb.svg    :target: https://pypi.org/project/blurb/Overview--------**blurb** is a tool designed to rid CPython core developmentof the scourge of ``Misc/NEWS`` conflicts.The core concept: split ``Misc/NEWS`` into manyseparate files that, when concatenated back togetherin sorted order, reconstitute the original ``Misc/NEWS`` file.After that, ``Misc/NEWS`` could be deleted from the CPythonrepo and thereafter rendered on demand (e.g. when buildinga release).  When checking in a change to CPython, the checkinprocess will write out a new file that sorts into the correct place,using a filename unlikely to have a merge conflict.**blurb** is a single command with a number of subcommands.It's designed  to be run inside a valid CPython (git) repo,and automatically uses the correct file paths.You can install **blurb** from PyPI using ``pip``.  Alternatively,simply add ``blurb`` to a directory on your path.**blurb**'s only dependency is Python 3.7+.Files used by blurb-------------------**blurb** uses a new directory tree called ``Misc/NEWS.d``.Everything it does is in there, except for possiblymodifying ``Misc/NEWS``.Under ``Misc/NEWS.d`` you'll find the following:* A single file for all news entries per previous revision,  named for the exact version number, with the extension ``.rst``.  Example: ``Misc/NEWS.d/3.6.0b2.rst``.* The ``next`` directory, which contains subdirectories representing  the various ``Misc/NEWS`` categories.  Inside these subdirectories  are more ``.rst`` files with long, uninteresting, computer-generated  names.  Example:  ``Misc/NEWS.d/next/Library/2017-05-04-12-24-06.gh-issue-25458.Yl4gI2.rst``blurb subcommands-----------------Like many modern utilities, **blurb** has only one executable(called ``blurb``), but provides a diverse set of functionalitythrough subcommands.  The subcommand is the first argument specifiedon the command-line.If you're a CPython core developer, you probably don't need to useanything except ``blurb add``--and you don't even need to specifythe ``add`` part.(If no subcommand is specified, **blurb** assumes you meant ``blurb add``.)The other commands are only expected to be useful for CPython releasemanagers.blurb help~~~~~~~~~~**blurb** is self-documenting through the ``blurb help`` subcommand.Run without any further arguments, it prints a list of all subcommands,with a one-line summary of the functionality of each.  Run with athird argument, it prints help on that subcommand (e.g. ``blurb help release``).blurb add~~~~~~~~~``blurb add`` adds a new Misc/NEWS entry for you.It opens a text editor on a template; you edit thefile, save, and exit.  **blurb** then stores the filein the correct place, and stages it in ``git`` for you.The template for the ``blurb add`` message looks like this::    #    # Please enter the relevant GitHub issue number here:    #    .. gh-issue:    #    # Uncomment one of these &quot;section:&quot; lines to specify which section    # this entry should go in in Misc/NEWS.    #    #.. section: Security    #.. section: Core and Builtins    #.. section: Library    #.. section: Documentation    #.. section: Tests    #.. section: Build    #.. section: Windows    #.. section: macOS    #.. section: IDLE    #.. section: Tools/Demos    #.. section: C API    # Write your Misc/NEWS entry below.  It should be a simple ReST paragraph.    # Don't start with &quot;- Issue #&lt;n&gt;: &quot; or &quot;- gh-issue&lt;n&gt;: &quot; or that sort of stuff.    ###########################################################################Here's how you interact with the file:* Add the GitHub issue number for this checkin to the  end of the ``.. gh-issue:`` line.* Uncomment the line with the relevant ``Misc/NEWS`` section for this entry.  For example, if this should go in the ``Library`` section, uncomment  the line reading ``#.. section: Library``.  To uncomment, just delete  the ``#`` at the front of the line.* Finally, go to the end of the file, and enter your NEWS entry.  This should be a single paragraph of English text using  simple ReST markup.When ``blurb add`` gets a valid entry, it writes it to a filewith the following format::    Misc/NEWS.d/next/&lt;section&gt;/&lt;datetime&gt;.gh-issue-&lt;issue_number&gt;.&lt;nonce&gt;.rstFor example, a file added by ``blurb add`` might look like this::    Misc/NEWS.d/next/Library/2017-05-04-12-24-06.gh-issue-25458.Yl4gI2.rst``&lt;section&gt;`` is the section provided in the checkin message.``&lt;datetime&gt;`` is the current UTC time, formatted as``YYYY-MM-DD-hh-mm-ss``.``&lt;nonce&gt;`` is a hopefully-unique string of characters meant toprevent filename collisions.  **blurb** creates this by computingthe MD5 hash of the text, converting it to base64 (using the&quot;urlsafe&quot; alphabet), and taking the first 6 characters of that.This filename ensures several things:* All entries in ``Misc/NEWS`` will be sorted by time.* It is unthinkably unlikely that there'll be a conflict  between the filenames generated for two developers checking in,  even if they check in at the exact same second.Finally, ``blurb add`` stages the file in git for you.blurb merge~~~~~~~~~~~``blurb merge`` recombines all the files in the``Misc/NEWS.d`` tree back into a single ``NEWS`` file.``blurb merge`` accepts only a single command-line argument:the file to write to.  By default it writes to``Misc/NEWS`` (relative to the root of your CPython checkout).Splitting and recombining the existing ``Misc/NEWS`` filedoesn't recreate the previous ``Misc/NEWS`` exactly.  Thisis because ``Misc/NEWS`` never used a consistent orderingfor the &quot;sections&quot; inside each release, whereas ``blurb merge``has a hard-coded preferred ordering for the sections.  Also,**blurb** aggressively reflows paragraphs to &lt; 78 columns,wheras the original hand-edited file occasionally had lines&gt; 80 columns.  Finally, **blurb** strictly uses ``gh-issue-&lt;n&gt;:`` tospecify issue numbers at the beginnings of entries, wherasthe legacy approach to ``Misc/NEWS`` required using ``Issue #&lt;n&gt;:``.blurb release~~~~~~~~~~~~~``blurb release`` is used by the release manager as part ofthe CPython release process.  It takes exactly one argument,the name of the version being released.Here's what it does under the hood:* Combines all recently-added NEWS entries from  the ``Misc/NEWS.d/next`` directory into ``Misc/NEWS.d/&lt;version&gt;.rst``.* Runs ``blurb merge`` to produce an updated ``Misc/NEWS`` file.One hidden feature: if the version specified is ``.``, ``blurb release``uses the name of the directory CPython is checked out to.(When making a release I generally name the directory after theversion I'm releasing, and using this shortcut saves me some typing.)blurb split~~~~~~~~~~~``blurb split`` only needs to be run once per-branch, ever.It reads in ``Misc/NEWS``and splits it into individual ``.rst`` files.The text files are stored as follows::    Misc/NEWS.d/&lt;version&gt;.rst``&lt;version&gt;`` is the version number of Python where thechange was committed.  Pre-release versions are denotedwith an abbreviation: ``a`` for alphas, ``b`` for betas,and ``rc`` for release candidates.The individual ``&lt;version&gt;.rst`` files actually (usually)contain multiple entries.  Each entry is delimited by asingle line containing ``..`` by itself.The assumption is, at the point we convert over to *blurb*,we'll run ``blurb split`` on each active branch,remove ``Misc/NEWS`` from the repo entirely,never run ``blurb split`` ever again,and ride off into the sunset, confident that the world is nowa better place.The &quot;next&quot; directory--------------------You may have noticed that ``blurb add`` adds news entries toa directory called ``next``, and ``blurb release`` combines thosenews entries into a single file named with the version.  Whyis that?First, it makes naming the next version a late-binding decision.If we are currently working on 3.6.5rc1, but there's a zero-dayexploit and we need to release an emergency 3.6.5 final, we don'thave to fix up a bunch of metadata.Second, it means that if you cherry-pick a commit forward orbackwards, you automatically pick up the NEWS entry too.  Youdon't need to touch anything up--the system will already dothe right thing.  If NEWS entries were already written to thefinal version directory, you'd have to move those around aspart of the cherry-picking process.Changelog---------1.1.0~~~~~- Support GitHub Issues in addition to b.p.o (bugs.python.org).  If &quot;gh-issue&quot; is in the metadata, then the filename will contain &quot;gh-issue-&lt;number&gt;&quot; instead of &quot;bpo-&quot;.1.0.7~~~~~- When word wrapping, don't break on long words or hyphens.- Use the ``-f`` flag when adding **blurb** files to a ``git``  checkin.  This forces them to be added, even when the files  might normally be ignored based on a ``.gitignore`` directive.- Explicitly support the ``-help`` command-line option.- Fix Travis CI integration.Copyright---------**blurb** is Copyright 2015-2018 by Larry Hastings.Licensed to the PSF under a contributor agreement.</longdescription>
</pkgmetadata>