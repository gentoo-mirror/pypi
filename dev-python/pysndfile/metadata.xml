<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pysndfile=========pysndfile is a python package providing *PySndfile*, a`Cython &lt;http://cython.org/&gt;`__ wrapper class around`libsndfile &lt;http://www.mega-nerd.com/libsndfile/&gt;`__. PySndfileprovides methods for reading and writing a large variety of soundfileformats on a variety of plattforms. PySndfile provides a rather completeaccess to the different sound file manipulation options that areavailable in libsndfile.Due to the use of libsndfile nearly all sound file formats, (besides mp3and derived formats) can be read and written with PySndfile.The interface has been designed such that a rather large subset of thefunctionality of libsndfile can be used, notably the reading and writingof strings into soundfile formats that support these, and a number ofsf_commands that allow to control the way libsndfile reads and writesthe samples. One of the most important ones is the use of the clippingcommand.Transparent soundfile io with libsndfile----------------------------------------PySndfile has been developed in the `analysis synthesis team atIRCAM &lt;http://anasynth.ircam.fr/home/english&gt;`__ mainly for research onsound analysis and sound transformation. In this context it is essentialthat the reading and writing of soundfile data is transparent.The use of the clipping mode of libsndfile is important here becausereading and writing sound data should not change the audio samples. Bydefault, when clipping is off, libsndfile uses slightly differentscaling factors when reading pcm format into float samples, or whenwriting float samples into pcm format. Therefore whenever a completeread/write cycle is applied to a sound file then the audio samples maybe modified even when no processing is applied.More precisely this will happen if-  the sound files contains pcm format,-  *and* the data is read into float or double,-  *and* the audio data comes close to the maximum range such that the   difference in scaling leads to modification.To avoid this problem PySndfile sets clipping by default to on. If youdon't like this you can set it to off individually using the PySndfilemethod set_auto_clipping(False).Implementation--------------The implementation is based on a slightly modified version of the headersndfile.hh that is distributed with libsndfile. The only modification isthe addition of a methode querying the seekable state of the openSndfile.Installation------------via Anaconda channel roebel~~~~~~~~~~~~~~~~~~~~~~~~~~~Precompiled packages are available for `Anacondapython3 &lt;https://anaconda.org/roebel/pysndfile&gt;`__ under Linux (x86_64)and Mac OS X (&gt; 10.9). For these systems you can install pysndfilesimply by means of.. code:: bash   conda install -c roebel pysndfileUnfortunately, I don't have a windows machine and therefore I cannotprovide any packages for Windows.compile with conda build recipe~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can use the conda recipe`here &lt;https://github.com/roebel/conda_packages&gt;`__. This build recipewil automatically download and compile libsndfile building pysndfile.via pypi~~~~~~~~::   pip install pysndfileshould install pysndfile and python dependencies. Note, that pip cannotinstall libsndfile for you as it is not provided via pypi. To installlibsndfile you should be able to use the software manager of yoursystem. This will however only work if your software manager installslibsndfile such that the compiler used by the setup.py script will findit.compile from sources~~~~~~~~~~~~~~~~~~~~Note that for ompiling from sources you need to install requirementslisted in requirements.txt file before starting the compilation.Moreover you need to install libsndfile as described in the previoussection.If the libsndfile (header and library) is not installed in the defaultcompiler search path you have to specify the library and includedirectories to be added to this search paths. For this you can useeither the command line options --sndfile-libdir and --sndfile-incdir thatare available for the build_ext command or specify these two parametersin the setup.cfg file.Windows^^^^^^^An experimental support for using pysndfile under windows has been addedsince version 1.3.4. For further comments see`here &lt;https://github.com/roebel/pysndfile/issues/3&gt;`__ as well as`buildscripts &lt;https://gist.github.com/sveinse/97411b95d36a6b8c430d4d381b620ecb&gt;`__provided by sveinse. Note, that I do not have any windows machine andcannot provide any help in making this work.Documentation-------------Please see the developer documentation`here &lt;https://pysndfile.readthedocs.io/en/latest/modules.html&gt;`__.Changes-------Version_1.4.4 (2022-03-11)~~~~~~~~~~~~~~~~~~~~~~~~~~-  Fix for win32: improved error handling for PyUnicode_AsWideCharString   (thanks to Andrey Bienkowski)Version_1.4.3 (2020-01-20)~~~~~~~~~~~~~~~~~~~~~~~~~~-  changed sndio functions to all use PySndfile as context manager. This   fixes the problem that the sndfile remains open when an error occurs   which may in turn lead to inconsistencies if the sndfile is tried to   be rewritten in an exception handler.Version_1.4.2 (2019-12-18)~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed PySndfile.read_frames method to properly handle reading frames   in parts (previous fix was incomplete)Version_1.4.1 (2019-12-18)~~~~~~~~~~~~~~~~~~~~~~~~~~-  extended supported commands to change compression level when writing   flac and ogg files-  fixed PySndfile.read_frames and sndio.read method to properly handle   reading frames from the middle of a fileVersion_1.4.0 (2019-12-17)~~~~~~~~~~~~~~~~~~~~~~~~~~-  Extended PySndfile class:   -  support use as context manager   -  added support for wve, ogg, MPC2000 sampler and RF64 wav files   -  added support for forcing to return 2D arrays even for mono files   -  added method to close the file and release all resources.   -  support reading more frames than present in the file using the      fill_value for all values positioned after the end of the fileVersion_1.3.8 (2019-10-22)~~~~~~~~~~~~~~~~~~~~~~~~~~-  (no changes in functionality)-  added documentation to distributed files-  added missing licence file to distribution-  thanks @toddrme2178 for patches.Version_1.3.7 (2019-08-01)~~~~~~~~~~~~~~~~~~~~~~~~~~-  removed cython (a build requirement) from requirements.txt-  avoid cython warning and fix language_level in the .pyx source code-  add and support pre-release tags in the version number-  use hashlib to calculate the README checksum.-  fixed support for use with python 2.7 that was broken since 1.3.4Version_1.3.6 (2019-07-27)~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed potential but undesired build dependency of pandoc-  added link to explanation for using pysndfile under windows-  fixed pandoc problem that does produce non ASCII chars in rst output.Version_1.3.5 (2019-07-27)~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed two copy paste bug introduced in 1.3.4 1.3.4 did in fact not   work at all :-(-  added a check target to the makefile that performs a complete   built/install/test cycle to avoid problems as in 1.3.4Version_1.3.4 (2019-07-23)~~~~~~~~~~~~~~~~~~~~~~~~~~-  added support for automatic installation of requirements-  remove precompiled cython source file and rely on pip requirements to   provide cython so that cython compilation will always be possible.-  added experimental support for installation on win32 (thanks to Svein   Seldal for the contributions).-  use expanduser for replacing ~ in filenames-  adapted cython source code to avoid all compiler warnings due to   deprecated numpy api-  removed use of ez_setup.py that is no longer required.Version_1.3.3 (2019-06-01)~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed missing command C_SFC_SET_SCALE_INT_FLOAT_WRITE (thanks to   Svein Seldal for the bug report and fix)-  better documentation of sf_string-io in sndio.read and sndio.write-  limit size of strings to be written such that the written file can   always be read back with libsndfile 1.0.28 (which imposes different   constraints for different formats)-  better error handling when number of channels exceeds channel limit   imposed by libsndfile.-  sndio module now exposes the dicts: fileformat_name_to_id and   fileformat_id_to_name-  extended sndio.read with force_2d argument that can be used to force   the returned data array to always have 2 dimensions even for mono   files.Version_1.3.2 (2018-07-04)~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed documentation of sndio module.Version_1.3.1 (2018-07-04)~~~~~~~~~~~~~~~~~~~~~~~~~~-  Extended sndio by means of adding a enw function that allows   retrieving embed markers from sound files. Names marker labels will   be retrieved only for aiff files.-  removed print out in pysndfile.get_cue_mrks(self) function.-  fixed version number in documentation.Version_1.3.0 (2018-07-04)~~~~~~~~~~~~~~~~~~~~~~~~~~-  Added support for retrieving cue points from aiff and wav files.Version_1.2.2 (2018-06-11)~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed c++-include file that was inadvertently scrambled.Version_1.2.1 (2018-06-11)~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed formatting error in long description and README.-  setup.py to explicitly select formatting of the long description.Version_1.2.0 (2018-06-11)~~~~~~~~~~~~~~~~~~~~~~~~~~-  support reading and writing sound file strings in sndio module-  Improved documentation of module constant mappings and PySndfile   methods.-  Added a new method supporting to write all strings in a dictionary to   the sound file.Version_1.1.1 (2018-06-10)~~~~~~~~~~~~~~~~~~~~~~~~~~this update is purely administrative, no code changes-  moved project to IRCAM GitLab-  moved doc to ReadTheDoc-  fixed documentation.Version_1.1.0 (2018-02-13)~~~~~~~~~~~~~~~~~~~~~~~~~~-  support returning extended sndfile info covering number of frames and   number of channels from function sndio.get_info.Version_1.0.0 (2017-07-26)~~~~~~~~~~~~~~~~~~~~~~~~~~-  Updated version number to 1.0.0:-  pysndfile has now been used for quiet a while under python 3 and most   problems seem to be fixed.-  changed setup.py to avoid uploading outdated LONG_DESC file.Version_0.2.15 (2017-07-26)~~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed get_sndfile_version function and tests script: adapted char   handling to be compatible with python 3.Version 0.2.14 (2017-07-26)~~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed filename display in warning messages due to invalid pointer:   replaced char\* by std::stringVersion 0.2.13 (2017-06-03)~~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed using &quot;~&quot; for representing $HOME in filenames:-  \_pysndfile.pyx: replaced using cython getenv by os.environ to avoid   type incompatibilities in python3Version 0.2.12 (2017-05-11)~~~~~~~~~~~~~~~~~~~~~~~~~~~-  fixed problem in sndio.read: Optionally return full information   required to store the file using the corresponding write function-  \_pysndfile.pyx: add constants SF_FORMAT_TYPEMASK and   SF_FORMAT_SUBMASK, SF_FORMAT_ENDMASK to python interface Added new   function for getting internal sf log in case of errors. Improved   consistency of variable definitions by means of retrieving them   automatically from sndfile.hVersion 0.2.11 (2015-05-17)~~~~~~~~~~~~~~~~~~~~~~~~~~~-  setup.py: fixed problem with compilers not providing the compiler   attribute (MSVC) (Thanks to Felix Hanke for reporting the problem)-  \_pysndfile.pyx: fixed problem when deriving from PySndfile using a   modified list of **init** parameters in the derived class (Thanks to   Sam Perry for the suggestion).Version 0.2.10~~~~~~~~~~~~~~-  setup.py: rebuild LONG_DESC only if sdist method is used.Version 0.2.9~~~~~~~~~~~~~-  Added missing files to distribution.-  force current cythonized version to be distributed.Version 0.2.4~~~~~~~~~~~~~-  Compatibility with python 3 (thanks to Eduardo Moguillansky)-  bug fix: ensure that vectors returned by read_frames function own   their data.Copyright---------Copyright (C) 2014-2018 IRCAMAuthor------Axel RoebelCredits--------  Erik de Castro Lopo: for   `libsndfile &lt;http://www.mega-nerd.com/libsndfile/&gt;`__-  David Cournapeau: for a few ideas I gathered from   `scikits.audiolab &lt;http://cournape.github.io/audiolab/&gt;`__.-  The `Cython &lt;http://cython.org&gt;`__ maintainers for the efficient   means to write interface definitions in Cython.</longdescription>
</pkgmetadata>