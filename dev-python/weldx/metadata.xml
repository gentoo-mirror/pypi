<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># WelDX - data and quality standards for welding research data&lt;hl/&gt;[![CF](https://anaconda.org/conda-forge/weldx/badges/version.svg)](https://anaconda.org/conda-forge/weldx)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/BAMWelDX/weldx/master?urlpath=lab/tree/tutorials/welding_example_01_basics.ipynb)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/5e7ede6d978249a781e5c580ed1c813f)](https://www.codacy.com/gh/BAMWelDX/weldx)[![DeepSource](https://static.deepsource.io/deepsource-badge-light-mini.svg)](https://deepsource.io/gh/BAMWelDX/weldx/?ref=repository-badge)[![Documentation](https://readthedocs.org/projects/weldx/badge/?version=latest)](https://weldx.readthedocs.io/en/latest/?badge=latest)[![License](https://img.shields.io/badge/License-BSD%203--Clause-orange.svg)](https://opensource.org/licenses/BSD-3-Clause)[![Zenodo](https://zenodo.org/badge/DOI/10.5281/zenodo.5565185.svg)](https://doi.org/10.5281/zenodo.5565185)[![codecov](https://codecov.io/gh/BAMWelDX/weldx/branch/master/graph/badge.svg)](https://codecov.io/gh/BAMWelDX/weldx)[![conda build](https://github.com/BAMWelDX/weldx/workflows/conda%20build/badge.svg?branch=master)](https://github.com/BAMWelDX/weldx/actions?query=workflow%3A%22conda+build%22+branch%3Amaster)[![documentation-gh](https://github.com/BAMWelDX/weldx/workflows/documentation/badge.svg?branch=master)](https://github.com/BAMWelDX/weldx/actions?query=workflow%3Adocumentation+branch%3Amaster)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/BAMWelDX/weldx/master.svg)](https://results.pre-commit.ci/latest/github/BAMWelDX/weldx/master)[![pytest](https://github.com/BAMWelDX/weldx/workflows/pytest/badge.svg?branch=master)](https://github.com/BAMWelDX/weldx/actions?query=workflow%3Apytest+branch%3Amaster)[![static analysis](https://github.com/BAMWelDX/weldx/workflows/static%20analysis/badge.svg?branch=master)](https://github.com/BAMWelDX/weldx/actions?query=workflow%3A%22static+analysis%22+branch%3Amaster)## OverviewScientific welding data covers a wide range of physical domains andtimescales and are measured using various different sensors. Complex andhighly specialized experimental setups at different welding institutescomplicate the exchange of welding research data further.The WelDX research project aims to foster the exchange of scientificdata inside the welding community by developing and establishing a newopen source file format suitable for the documentation of experimentalwelding data and upholding associated quality standards. In addition tofostering scientific collaboration inside the national and internationalwelding community an associated advisory committee will be establishedto oversee the future development of the file format. The proposed fileformat will be developed with regard to current needs of the communityregarding interoperability, data quality and performance and will bepublished under an appropriate open source license. By using the fileformat objectivity, comparability and reproducibility across differentexperimental setups can be improved.The project is under active development by the [Welding Technology](https://www.bam.de/Navigation/EN/About-us/Organisation/Organisation-Chart/President/Department-9/Division-93/division93.html)division at Bundesanstalt für Materialforschung und -prüfung (BAM).## FeaturesWelDX provides several Python API to perform standard tasks likeexperiment design, data analysis, and experimental data archiving.### Planning- Define measurement chains with all involved devices, error sources,  and metadata annotations.- Handle complex coordinate transformations needed to describe the  movement of welding robots, workpieces, and sensors.- Planing of welding experiments.- convenient creation of [ISO 9692-1](https://www.iso.org/standard/62520.html) welding groove types.### Data analysis- Plotting routines to inspect measurement chains, workpieces (planned  and welded).- Analysis functions for standard measurements like track energy,  welding speed to fill an ISO groove, and more to come.### Data archivingThe ultimate goal of this project is to store all information about theexperiment in a single file. We choose the popular [ASDF](https://en.wikipedia.org/wiki/Advanced_Scientific_Data_Format)format for this task. This enables us to store arbitrary binary data,while maintaining a human readable text based header. All information isstored in a tree like structure, which makes it convenient to structurethe data in arbitrary complex ways.The ASDF format and the provided extensions for WelDX types like- workpiece information (used alloys, geometries)- welding process parameters (GMAW parameters)- measurement data- coordinate systems (robot movement, sensors)enables us to store the whole experimental pipeline performed in amodern laboratory.## Design goalsWe seek to provide a user-friendly, well documented programminginterface. All functions and classes in WelDX have attacheddocumentation about the involved parameters (types and explanation), see[API docs](https://weldx.readthedocs.io/en/stable/api.html). Furtherwe provide rich [Jupyter notebook tutorials](https://weldx.readthedocs.io/en/stable/tutorials.html) about thehandling of the basic workflows.All involved physical quantities used in `weldx` (lengths, angles,voltages, currents, etc.) should be attached with a unit to ensureautomatic conversion and correct mathematical handling. Units are beingused in all standard features of WelDX and are also archived in the ASDFfiles. This is implemented by the popular Python library [Pint](https://pint.readthedocs.io/en/stable/), which flawlessly handlesthe creation and conversion of units and dimensions.## Publications- Recommendations for an Open Science approach to welding process  research data. Fabry, C., Pittner, A., Hirthammer, V. et al. *Weld  World* (2021). &lt;https://doi.org/10.1007/s40194-021-01151-x&gt;## InstallationThe WelDX package can be installed using conda or mamba package managerfrom the [Conda-Forge channel](https://conda-forge.org/#about). These managers originate fromthe freely available [Anaconda Python stack](https://docs.conda.io/en/latest/miniconda.html). If you do not haveAnaconda or Miniconda installed yet, we ask you to install`Miniconda-3`. Documentation for the installation procedure can befound [here](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html#regular-installation).After this step you have access to the conda command and can proceed toinstalling the WelDX package.```consoleconda install weldx weldx_widgets -c conda-forge```The package is also available on pypi.```consolepip install weldx weldx-widgets```## DocumentationThe full documentation is published on readthedocs.org. Click on one ofthe following links to get to the desired version:- [latest](https://weldx.readthedocs.io/en/latest/)- [stable](https://weldx.readthedocs.io/en/stable/)## FundingThis research is funded by the Federal Ministry of Education andResearch of Germany under project number 16QK12.</longdescription>
</pkgmetadata>