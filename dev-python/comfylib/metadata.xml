<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># This is a work in progressAll the talk about having a reliable interface below is aspirational.  Theinterface is in flux at the moment, and no guarantee of the master branchworking are made, yet.  Soon.This was initially planned to be a fork of ComfyUI, with regular merges fromupstream.  However, we are quickly realizing that's impractical, given therapid development in the ComfyUI codebase.  So, this is a hard fork.  We willmake a strong effort to keep parity, but we will also be going our own way hereand the implementation will probably end up quite different.----This is the [ComfyUI](https://github.com/comfyanonymous/ComfyUI), but withoutthe UI.  It's stripped down and packaged as a library, for use in other projects.ComfyUI is actively maintained (as of writing), and has implementations of alot of the cool cutting-edge Stable Diffusion stuff.In order to provide a consistent API, an interface layer hasbeen added.  Directly importing names not in the API should be considereddangerous.  A best effort will be made to keep this library apace with theimplementation in ComfyUI (though this will get harder over time as theimplemntations diverge) so the backend implementation might change drasticallybetween minor versions.The interface layer will be consistent within a major version of the library,so that's what you should rely on.# Design goals1. The API should expose the same breadth of functionality available by usingthe node editor in ComfyUI.2. Opaque types should be preferred.  Rather than pass tensors around, we'regoing to wrap them in objects that hide the implementation.  This gives usmaximum flexibility to keep the API the same, while also incorporating newdevelopments.3. Explicit behavior should be prferred over implicit behavior.  As a library,we shouldn't make assumptions about how the user wants to, for example,sanitize inputs or manage VRAM.  At the cost of requiring a bit more work touse, we should raise exceptions when we get bad input, offer an interface formoving things to and from VRAM, etc.4. The API should be should be typed as strictly as possible.  Enums should beused instead of strings, when applicable, etc.5. The interface layer should have complete test coverage.# InstallationYou can install from github:```pip3 install git+https://github.com/adodge/ComfyLib```You may also be able to install from PyPi, but that process will be clarifiedwhen this project is more stable.# Example```python3import comfy.stable_diffusionimport comfy.latent_imageconfig = comfy.stable_diffusion.CheckpointConfig.from_built_in(comfy.stable_diffusion.BuiltInCheckpointConfigName.V1)# Read in a checkpointsd, clip, vae = comfy.stable_diffusion.load_checkpoint(    config=config,    checkpoint_filepath=&quot;v1-5-pruned-emaonly.safetensors&quot;,    embedding_directory=None,)# CLIP encode a promptpos = clip.encode(&quot;an astronaut&quot;)neg = clip.encode(&quot;&quot;)# Run the samplerlatent0 = comfy.latent_image.LatentImage.empty(512, 512)latent1 = sd.sample(positive=pos, negative=neg, latent_image=latent0, seed=42, steps=20, cfg_strength=7,                 sampler=comfy.stable_diffusion.Sampler.SAMPLE_EULER, scheduler=comfy.stable_diffusion.Scheduler.NORMAL,                 denoise_strength=1.0)# Run the VAE to get a Pillow Imageimage = vae.decode(latent_image=latent1)# Save that to a fileimage.save(&quot;out.png&quot;)```# API## Models### StableDiffusionModel### CLIPModel### VAEModel## Data### RGBImage### GreyscaleImage### LatentImage### Conditioning</longdescription>
</pkgmetadata>