<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django Object Actions=====================[![CI](https://github.com/crccheck/django-object-actions/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/crccheck/django-object-actions/actions/workflows/ci.yml?query=branch%3Amaster)If you've ever tried making admin object tools you may have thought, &quot;why can'tthis be as easy as making Django Admin Actions?&quot; Well now they can be.Quick-Start Guide-----------------Install Django Object Actions:```shell$ pip install django-object-actions```Add `django_object_actions` to your `INSTALLED_APPS` so Django can findour templates.In your admin.py:```pythonfrom django_object_actions import DjangoObjectActions, actionclass ArticleAdmin(DjangoObjectActions, admin.ModelAdmin):    @action(label=&quot;Publish&quot;, description=&quot;Submit this article&quot;) # optional    def publish_this(self, request, obj):        publish_obj(obj)    change_actions = ('publish_this', )```Usage-----Defining new &amp;*tool actions* is just like defining regular [admin actions]. Themajor difference is the functions for `django-object-actions` will take anobject instance instead of a queryset (see *Re-using Admin Actions* below).*Tool actions* are exposed by putting them in a `change_actions` attribute inyour `admin.ModelAdmin`. You can also add *tool actions* to the main changelistviews too. There, you'll get a queryset like a regular [admin action][admin actions]:```pythonfrom django_object_actions import DjangoObjectActionsclass MyModelAdmin(DjangoObjectActions, admin.ModelAdmin):    @action(        label=&quot;This will be the label of the button&quot;,  # optional        description=&quot;This will be the tooltip of the button&quot; # optional    )    def toolfunc(self, request, obj):        pass    def make_published(modeladmin, request, queryset):        queryset.update(status='p')    change_actions = ('toolfunc', )    changelist_actions = ('make_published', )```Just like admin actions, you can send a message with `self.message_user`.Normally, you would do something to the object and return to the same url, butif you return a `HttpResponse`, it will follow it (hey, just like [adminactions]!).If your admin modifies `get_urls`, `change_view`, or `changelist_view`,you'll need to take extra care because `django-object-actions` uses them too.### Re-using Admin ActionsIf you would like a preexisting admin action to also be an *object action*, addthe `takes_instance_or_queryset` decorator to convert object instances into aqueryset and pass querysets:```pythonfrom django_object_actions import DjangoObjectActions, takes_instance_or_querysetclass RobotAdmin(DjangoObjectActions, admin.ModelAdmin):    # ... snip ...    @takes_instance_or_queryset    def tighten_lug_nuts(self, request, queryset):        queryset.update(lugnuts=F('lugnuts') - 1)    change_actions = ['tighten_lug_nuts']    actions = ['tighten_lug_nuts']```[admin actions]: https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/### Customizing *Object Actions*To give the action some a helpful title tooltip, you can use the `action` decoratorand set the description argument.```python@action(description=&quot;Increment the vote count by one&quot;)def increment_vote(self, request, obj):    obj.votes = obj.votes + 1    obj.save()```Alternatively, you can also add a `short_description` attribute,similar to how admin actions work:```pythondef increment_vote(self, request, obj):    obj.votes = obj.votes + 1    obj.save()increment_vote.short_description = &quot;Increment the vote count by one&quot;```By default, Django Object Actions will guess what to label the buttonbased on the name of the function. You can override this with a `label`attribute:```python@action(label=&quot;Vote++&quot;)def increment_vote(self, request, obj):    obj.votes = obj.votes + 1    obj.save()```or```pythondef increment_vote(self, request, obj):    obj.votes = obj.votes + 1    obj.save()increment_vote.label = &quot;Vote++&quot;```If you need even more control, you can add arbitrary attributes to the buttonsby adding a Django widget style[attrs](https://docs.djangoproject.com/en/stable/ref/forms/widgets/#django.forms.Widget.attrs)attribute:```python@action(attrs = {'class': 'addlink'})def increment_vote(self, request, obj):    obj.votes = obj.votes + 1    obj.save()```or```pythondef increment_vote(self, request, obj):    obj.votes = obj.votes + 1    obj.save()increment_vote.attrs = {    'class': 'addlink',}```### Programmatically Disabling ActionsYou can programmatically disable registered actions by defining your owncustom `get_change_actions()` method. In this example, certain actionsonly apply to certain object states (e.g. You should not be able toclose an company account if the account is already closed):```pythondef get_change_actions(self, request, object_id, form_url):    actions = super(PollAdmin, self).get_change_actions(request, object_id, form_url)    actions = list(actions)    if not request.user.is_superuser:        return []    obj = self.model.objects.get(pk=object_id)    if obj.question.endswith('?'):        actions.remove('question_mark')    return actions```The same is true for changelist actions with `get_changelist_actions`.### Alternate InstallationYou don't have to add this to `INSTALLED_APPS`, all you need to to dois copy the template `django_object_actions/change_form.html` some placeDjango's template loader [will findit](https://docs.djangoproject.com/en/stable/ref/settings/#template-dirs).If you don't intend to use the template customizations at all, don'tadd `django_object_actions` to your `INSTALLED_APPS` at all and use`BaseDjangoObjectActions` instead of `DjangoObjectActions`.More Examples-------------Making an action that links off-site:```pythondef external_link(self, request, obj):    from django.http import HttpResponseRedirect    return HttpResponseRedirect(f'https://example.com/{obj.id}')```Limitations-----------1.  `django-object-actions` expects functions to be methods of the model    admin. While Django gives you a lot more options for their admin    actions.2.  If you provide your own custom `change_form.html`, you'll also need    to manually copy in the relevant bits of [our change form    ](./django_object_actions/templates/django_object_actions/change_form.html).3.  Security. This has been written with the assumption that everyone in    the Django admin belongs there. Permissions should be enforced in    your own actions irregardless of what this provides. Better default    security is planned for the future.Python and Django compatibility-------------------------------See [`ci.yml`](./.github/workflows/ci.yml) for which Python and Django versions this supports.Demo Admin &amp; Docker images--------------------------You can try the demo admin against several versions of Django with these Dockerimages: https://hub.docker.com/r/crccheck/django-object-actions/tagsThis runs the example Django project in `./example_project` based on the &quot;polls&quot;tutorial. `admin.py` demos what you can do with this app.Development-----------Getting started:```shell# get a copy of the codegit clone git@github.com:crccheck/django-object-actions.gitcd django-object-actions# Install requirementsmake installmake test  # run test suitemake quickstart  # runs 'make resetdb' and some extra steps```Various helpers are available as make commands. Type `make help` andview the `Makefile` to see what other things you can do.Some commands assume you are in the virtualenv. If you see&quot;ModuleNotFoundError&quot;s, try running `poetry shell` first.Similar Packages----------------If you want an actions menu for each row of your changelist, check out [DjangoAdmin Row Actions](https://github.com/DjangoAdminHackers/django-admin-row-actions).Django Object Actions is very similar to[django-object-tools](https://github.com/praekelt/django-object-tools), but doesnot require messing with your urls.py, does not do anything special withpermissions, and uses the same patterns as making [admin actions].</longdescription>
</pkgmetadata>