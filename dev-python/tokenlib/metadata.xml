<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========tokenlib========This is generic support library for doing token-based authentication.  Youmight use it to build a login system using bearer tokens, two-legged oauth, orMAC Access authentication.Given a server-side master secret, you can serialize a dict of data intoan opaque, unforgeable authentication token::   &gt;&gt;&gt; token = tokenlib.make_token({&quot;userid&quot;: 42}, secret=&quot;I_LIKE_UNICORNS&quot;)   &gt;&gt;&gt; print token   eyJzYWx0IjogImY0NTU5NCIsICJleHBpcmVzIjogMTMyOTg3NTI2Ny4xNDQ5MzUsICJ1c2VyaWQiOiA0Mn0miXCe4NQQtXTE8NXSGcsL6dzSuQ==Later, you can use the same secret to verify the token and extract theembedded data::    &gt;&gt;&gt; data = tokenlib.parse_token(token, secret=&quot;I_LIKE_UNICORNS&quot;)    &gt;&gt;&gt; print data    {u'userid': 42, u'expires': 1329875384.073159, u'salt': u'1c033f'}Notice that the data includes an expiry time.  If you try to parse an expiredtoken, it will fail::    &gt;&gt;&gt; # Use now=XXX to simulate a time in the future.    &gt;&gt;&gt; tokenlib.parse_token(token, secret=&quot;I_LIKE_UNICORNS&quot;, now=9999999999)    Traceback (most recent call last):    ...    ValueError: token has expiredLikewise, it will fail if the token was constructed with a non-matching secretkey::    &gt;&gt;&gt; tokenlib.parse_token(token, secret=&quot;I_HATE_UNICORNS&quot;)    Traceback (most recent call last):    ...    ValueError: token has invalid signatureEach token also has an associated &quot;token secret&quot;.  This is a secret key thatcan be shared with the consumer of the token to enable authentication schemessuch as MAC Access Authentication of Two-Legged OAuth::    &gt;&gt;&gt; key = tokenlib.get_token_secret(token, secret=&quot;I_LIKE_UNICORNS&quot;)    &gt;&gt;&gt; print key    EZslG8yEYTGyDvBjRnxGipL5Kd8=For applications that are using the same settings over and over again, youwill probably want to create a TokenManager object rather than using themodule-level convenience functions::    &gt;&gt;&gt; manager = tokenlib.TokenManager(secret=&quot;I_LIKE_UNICORNS&quot;)    &gt;&gt;&gt; data = manager.parse_token(token)    &gt;&gt;&gt; print data    {u'userid': 42, u'expires': 1329875384.073159, u'salt': u'1c033f'}This will let you customize e.g. the token expiry timeout or hash modulewithout repeating the settings in each call.2.0.0 - 2017-12-20================== * Py27, Py35 compliant0.3.1 - 2014-01-08==================* Make tokenlib.DEFAULT_HASHMOD a string.* Fix sporadically-failing test.0.3.0 - 2014-01-08==================* clarified licensing info* switched to sha256 as default hashing algorithm* renamed `get_token_secret` to `get_derived_secret` to clarify its  purpose; the previous name remains but is deprecated.* added custom ValueError subclasses for more fine-grained error reporting.0.2.0 - 2012-11-27==================* support for python3 via source-level compatibility0.1.0 - 2012-03-14================== * Initial release.</longdescription>
</pkgmetadata>