<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/img/banner.png        :target: https://neuropsychology.github.io/NeuroKit/.. image:: https://img.shields.io/pypi/pyversions/neurokit2.svg?logo=python&amp;logoColor=FFE873        :target: https://pypi.python.org/pypi/neurokit2.. image:: https://img.shields.io/pypi/dm/neurokit2        :target: https://pypi.python.org/pypi/neurokit2.. image:: https://img.shields.io/pypi/v/neurokit2.svg?logo=pypi&amp;logoColor=FFE873        :target: https://pypi.python.org/pypi/neurokit2.. image:: https://github.com/neuropsychology/NeuroKit/actions/workflows/tests.yml/badge.svg        :target: https://github.com/neuropsychology/NeuroKit/actions/workflows/tests.yml.. image:: https://codecov.io/gh/neuropsychology/NeuroKit/branch/master/graph/badge.svg        :target: https://codecov.io/gh/neuropsychology/NeuroKit.. image:: https://api.codeclimate.com/v1/badges/517cb22bd60238174acf/maintainability        :target: https://codeclimate.com/github/neuropsychology/NeuroKit/maintainability        :alt: Maintainability**The Python Toolbox for Neurophysiological Signal Processing****NeuroKit2** is a user-friendly package providing easy access to advanced biosignal processing routines.Researchers and clinicians without extensive knowledge of programming or biomedical signal processingcan **analyze physiological data with only two lines of code**.Quick Example------------------.. code-block:: python    import neurokit2 as nk    # Download example data    data = nk.data(&quot;bio_eventrelated_100hz&quot;)    # Preprocess the data (filter, find peaks, etc.)    processed_data, info = nk.bio_process(ecg=data[&quot;ECG&quot;], rsp=data[&quot;RSP&quot;], eda=data[&quot;EDA&quot;], sampling_rate=100)    # Compute relevant features    results = nk.bio_analyze(processed_data, sampling_rate=100)And **boom** ðŸ’¥ your analysis is done ðŸ˜ŽDownload--------You can download NeuroKit2 from `PyPI &lt;https://pypi.org/project/neurokit2/&gt;`_.. code-block::    pip install neurokit2or `conda-forge &lt;https://anaconda.org/conda-forge/neurokit2&gt;`_.. code-block::    conda install -c conda-forge neurokit2If you're not sure what to do, read our `installation guide &lt;https://neuropsychology.github.io/NeuroKit/installation.html&gt;`_.Contributing-------------.. image:: https://img.shields.io/badge/License-MIT-blue.svg        :target: https://github.com/neuropsychology/NeuroKit/blob/master/LICENSE        :alt: License.. image:: https://github.com/neuropsychology/neurokit/workflows/%E2%9C%A8%20Style/badge.svg?branch=master        :target: https://github.com/neuropsychology/NeuroKit/actions        :alt: GitHub CI.. image:: https://img.shields.io/badge/code%20style-black-000000.svg        :target: https://github.com/psf/black        :alt: Black codeNeuroKit2 is the most `welcoming &lt;https://github.com/neuropsychology/NeuroKit#popularity&gt;`_ project with a large community of contributors with all levels of programming expertise. **But the package is still far from being perfect!** Thus, if you have some ideas for **improvement**, **new features**, or just want to **learn Python** and do something useful at the same time, do not hesitate and check out the following guide:- `Contributing to NeuroKit &lt;https://neuropsychology.github.io/NeuroKit/resources/contributing.html&gt;`_Also, if you have developed new signal processing methods or algorithms and you want to **increase its usage, popularity and citations**, get in touch with us to eventually add it to NeuroKit. A great opportunity for the users as well as the original developers!You have spotted an **mistake**? An **error** in a formula or code? OR there is just a step that you seems strange and you don't understand? **Please let us know!** We are Human beings, and we'll appreciate any inquiry.Documentation----------------.. image:: https://img.shields.io/badge/documentation-online-brightgreen.svg        :target: https://neuropsychology.github.io/NeuroKit/        :alt: Documentation Status.. image:: https://img.shields.io/badge/functions-API-orange.svg?colorB=2196F3        :target: https://neuropsychology.github.io/NeuroKit/functions/index.html        :alt: API.. image:: https://img.shields.io/badge/tutorials-examples-orange.svg?colorB=E91E63        :target: https://neuropsychology.github.io/NeuroKit/examples/index.html        :alt: Tutorials.. .. image:: https://img.shields.io/badge/documentation-pdf-purple.svg?colorB=FF9800..         :target: https://neurokit2.readthedocs.io/_/downloads/en/latest/pdf/..         :alt: PDF.. .. image:: https://mybinder.org/badge_logo.svg..         :target: https://mybinder.org/v2/gh/neuropsychology/NeuroKit/dev?urlpath=lab%2Ftree%2Fdocs%2Fexamples..         :alt: Binder.. .. image:: https://img.shields.io/gitter/room/neuropsychology/NeuroKit.js.svg..         :target: https://gitter.im/NeuroKit/community..         :alt: Chat on GitterClick on the links above and check out our tutorials:General^^^^^^^^^^-  `Get familiar with Python in 10 minutes &lt;https://neuropsychology.github.io/NeuroKit/resources/learn_python.html&gt;`_-  `Recording good quality signals &lt;https://neuropsychology.github.io/NeuroKit/resources/recording.html&gt;`_-  `Install Python and NeuroKit &lt;https://neuropsychology.github.io/NeuroKit/installation.html&gt;`_-  `Included datasets &lt;https://neuropsychology.github.io/NeuroKit/functions/data.html#datasets&gt;`_-  `Additional Resources &lt;https://neuropsychology.github.io/NeuroKit/resources/resources.html&gt;`_Examples^^^^^^^^^^-  `Simulate Artificial Physiological Signals &lt;https://neuropsychology.github.io/NeuroKit/examples/signal_simulation/signal_simulation.html&gt;`_-  `Customize your Processing Pipeline &lt;https://neuropsychology.github.io/NeuroKit/examples/bio_custom/bio_custom.html&gt;`_-  `Event-related Analysis &lt;https://neuropsychology.github.io/NeuroKit/examples/bio_eventrelated/bio_eventrelated.html&gt;`_-  `Interval-related Analysis &lt;https://neuropsychology.github.io/NeuroKit/examples/bio_intervalrelated/bio_intervalrelated.html&gt;`_-  `Analyze Electrodermal Activity (EDA) &lt;https://neuropsychology.github.io/NeuroKit/examples/eda_peaks/eda_peaks.html&gt;`_-  `Analyze Respiratory Rate Variability (RRV) &lt;https://neuropsychology.github.io/NeuroKit/examples/rsp_rrv/rsp_rrv.html&gt;`_-  `Extract and Visualize Individual Heartbeats &lt;https://neuropsychology.github.io/NeuroKit/examples/ecg_heartbeats/ecg_heartbeats.html&gt;`_-  `Locate P, Q, S and T waves in ECG &lt;https://neuropsychology.github.io/NeuroKit/examples/ecg_delineate/ecg_delineate.html&gt;`_-  `Analyze Electrooculography EOG data &lt;https://neuropsychology.github.io/NeuroKit/examples/eog_analyze/eog_analyze.html&gt;`_.. *You can try out these examples directly* `in your browser &lt;https://github.com/neuropsychology/NeuroKit/tree/master/docs/examples#cloud-based-interactive-examples&gt;`_.**Don't know which tutorial is suited for your case?** Follow this flowchart:.. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/workflow.png        :target: https://neuropsychology.github.io/NeuroKit/Citation---------.. image:: https://zenodo.org/badge/218212111.svg   :target: https://zenodo.org/badge/latestdoi/218212111.. image:: https://img.shields.io/badge/details-authors-purple.svg?colorB=9C27B0   :target: https://neuropsychology.github.io/NeuroKit/authors.htmlThe **NeuroKit2** paper can be found `here &lt;https://doi.org/10.3758/s13428-020-01516-y&gt;`_ ðŸŽ‰ Additionally, you can get the reference directly from Python by running:.. code-block:: python    nk.cite().. code-block:: tex    You can cite NeuroKit2 as follows:    - Makowski, D., Pham, T., Lau, Z. J., Brammer, J. C., Lespinasse, F., Pham, H.,    SchÃ¶lzel, C., &amp; Chen, S. A. (2021). NeuroKit2: A Python toolbox for neurophysiological signal processing.    Behavior Research Methods, 53(4), 1689â€“1696. https://doi.org/10.3758/s13428-020-01516-y    Full bibtex reference:    @article{Makowski2021neurokit,        author = {Dominique Makowski and Tam Pham and Zen J. Lau and Jan C. Brammer and Fran{\c{c}}ois Lespinasse and Hung Pham and Christopher SchÃ¶lzel and S. H. Annabel Chen},        title = {{NeuroKit}2: A Python toolbox for neurophysiological signal processing},        journal = {Behavior Research Methods},        volume = {53},        number = {4},        pages = {1689--1696},        publisher = {Springer Science and Business Media {LLC}},        doi = {10.3758/s13428-020-01516-y},        url = {https://doi.org/10.3758%2Fs13428-020-01516-y},        year = 2021,        month = {feb}    }**Let us know if you used NeuroKit2 in a publication!** Open a new `discussion &lt;https://github.com/neuropsychology/NeuroKit/discussions&gt;`_ (select the *NK in publications* category) and link the paper. The community would be happy to know about how you used it and learn about your research. We could also feature it once we have a section on the website for papers that used the software...    Design    --------    *NeuroKit2* is designed to provide a **consistent**, **accessible** yet **powerful** and **flexible** API.    - **Consistency**: For each type of signals (ECG, RSP, EDA, EMG...), the same function names are called (in the form :code:`signaltype_functiongoal()`) to achieve equivalent goals, such as :code:`*_clean()`, :code:`*_findpeaks()`, :code:`*_process()`, :code:`*_plot()` (replace the star with the signal type, e.g., :code:`ecg_clean()`).    - **Accessibility**: Using NeuroKit2 is made very easy for beginners through the existence of powerful high-level &quot;master&quot; functions, such as :code:`*_process()`, that performs cleaning, preprocessing and processing with sensible defaults.    - **Flexibility**: However, advanced users can very easily build their own custom analysis pipeline by using the mid-level functions (such as :code:`*_clean()`, :code:`*_rate()`), offering more control and flexibility over their parameters.Physiological Data Preprocessing---------------------------------Simulate physiological signals^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^You can easily simulate artificial ECG (also `12-Lead multichannel ECGs &lt;https://neuropsychology.github.io/NeuroKit/examples/ecg_generate_12leads/ecg_generate_12leads.html&gt;`_), PPG, RSP, EDA, and EMG signals to test your scripts and algorithms... code-block:: python    import numpy as np    import pandas as pd    import neurokit2 as nk    # Generate synthetic signals    ecg = nk.ecg_simulate(duration=10, heart_rate=70)    ppg = nk.ppg_simulate(duration=10, heart_rate=70)    rsp = nk.rsp_simulate(duration=10, respiratory_rate=15)    eda = nk.eda_simulate(duration=10, scr_number=3)    emg = nk.emg_simulate(duration=10, burst_number=2)    # Visualise biosignals    data = pd.DataFrame({&quot;ECG&quot;: ecg,                         &quot;PPG&quot;: ppg,                         &quot;RSP&quot;: rsp,                         &quot;EDA&quot;: eda,                         &quot;EMG&quot;: emg})    nk.signal_plot(data, subplots=True).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_simulation.png        :target: https://neuropsychology.github.io/NeuroKit/examples/signal_simulation/signal_simulation.htmlElectrodermal Activity (EDA/GSR)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    # Generate 10 seconds of EDA signal (recorded at 250 samples / second) with 2 SCR peaks    eda = nk.eda_simulate(duration=10, sampling_rate=250, scr_number=2, drift=0.01)    # Process it    signals, info = nk.eda_process(eda, sampling_rate=250)    # Visualise the processing    nk.eda_plot(signals, sampling_rate=250).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_eda.png        :target: https://neuropsychology.github.io/NeuroKit/examples/eda_peaks/eda_peaks.htmlCardiac activity (ECG)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    # Generate 15 seconds of ECG signal (recorded at 250 samples / second)    ecg = nk.ecg_simulate(duration=15, sampling_rate=250, heart_rate=70)    # Process it    signals, info = nk.ecg_process(ecg, sampling_rate=250)    # Visualise the processing    nk.ecg_plot(signals, sampling_rate=250).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_ecg.png        :target: https://neuropsychology.github.io/NeuroKit/examples/ecg_heartbeats/ecg_heartbeats.htmlRespiration (RSP)^^^^^^^^^^^^^^^^^^^.. code-block:: python    # Generate one minute of respiratory (RSP) signal (recorded at 250 samples / second)    rsp = nk.rsp_simulate(duration=60, sampling_rate=250, respiratory_rate=15)    # Process it    signals, info = nk.rsp_process(rsp, sampling_rate=250)    # Visualise the processing    nk.rsp_plot(signals, sampling_rate=250).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_rsp.png        :target: https://neuropsychology.github.io/NeuroKit/examples/rsp_rrv/rsp_rrv.htmlElectromyography (EMG)^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    # Generate 10 seconds of EMG signal (recorded at 250 samples / second)    emg = nk.emg_simulate(duration=10, sampling_rate=250, burst_number=3)    # Process it    signals, info = nk.emg_process(emg, sampling_rate=250)    # Visualise the processing    nk.emg_plot(signals, sampling_rate=250).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_emg.pngPhotoplethysmography (PPG/BVP)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    # Generate 15 seconds of PPG signal (recorded at 250 samples / second)    ppg = nk.ppg_simulate(duration=15, sampling_rate=250, heart_rate=70)    # Process it    signals, info = nk.ppg_process(ppg, sampling_rate=250)    # Visualize the processing    nk.ppg_plot(signals, sampling_rate=250).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_ppg.pngElectrooculography (EOG)^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    # Import EOG data    eog_signal = nk.data(&quot;eog_100hz&quot;)    # Process it    signals, info = nk.eog_process(eog_signal, sampling_rate=100)    # Plot    nk.eog_plot(signals, info, sampling_rate=100).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_eog.pngElectrogastrography (EGG)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Consider `helping us develop it &lt;https://neuropsychology.github.io/NeuroKit/resources/contributing.html&gt;`_!Physiological Data Analysis----------------------------The analysis of physiological data usually comes in two types, **event-related** or **interval-related**... image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/features.pngEvent-related^^^^^^^^^^^^^^This type of analysis refers to physiological changes immediately occurring in response to an event.For instance, physiological changes following the presentation of a stimulus (e.g., an emotional stimulus) indicated bythe dotted lines in the figure above. In this situation the analysis is epoch-based.An epoch is a short chunk of the physiological signal (usually &lt; 10 seconds), that is locked to a specific stimulus and hencethe physiological signals of interest are time-segmented accordingly. This is represented by the orange boxes in the figure above.In this case, using `bio_analyze()` will compute features like rate changes, peak characteristics and phase characteristics.- `Event-related example &lt;https://neuropsychology.github.io/NeuroKit/examples/bio_eventrelated/bio_eventrelated.html&gt;`_Interval-related^^^^^^^^^^^^^^^^^This type of analysis refers to the physiological characteristics and features that occur overlonger periods of time (from a few seconds to days of activity). Typical use cases are eitherperiods of resting-state, in which the activity is recorded for several minutes while the participantis at rest, or during different conditions in which there is no specific time-locked event(e.g., watching movies, listening to music, engaging in physical activity, etc.). For instance,this type of analysis is used when people want to compare the physiological activity under differentintensities of physical exercise, different types of movies, or different intensities ofstress. To compare event-related and interval-related analysis, we can refer to the example figure above.For example, a participant might be watching a 20s-long short film where particular stimuli ofinterest in the movie appears at certain time points (marked by the dotted lines). Whileevent-related analysis pertains to the segments of signals within the orange boxes (to understand the physiologicalchanges pertaining to the appearance of stimuli), interval-related analysis can beapplied on the entire 20s duration to investigate how physiology fluctuates in general.In this case, using `bio_analyze()` will compute features such as rate characteristics (in particular,variability metrics) and peak characteristics.- `Interval-related example &lt;https://neuropsychology.github.io/NeuroKit/examples/bio_intervalrelated/bio_intervalrelated.html&gt;`_Heart Rate Variability (HRV)----------------------------.. image:: https://img.shields.io/badge/Tutorial-HRV-green        :target: https://www.mdpi.com/1424-8220/21/12/3998Check-out our **Heart Rate Variability in Psychology: A Review of HRV Indices and an Analysis Tutorial** `paper &lt;https://doi.org/10.3390/s21123998&gt;`_ for:- a comprehensive review of the most up-to-date HRV indices- a discussion of their significance in psychological research and practices- a step-by-step guide for HRV analysis using **NeuroKit2**.. code-block:: tex    You can cite the paper as follows:    - Pham, T., Lau, Z. J., Chen, S. H. A., &amp; Makowski, D. (2021).    Heart Rate Variability in Psychology: A Review of HRV Indices and an Analysis Tutorial.    Sensors, 21(12), 3998. https://doi:10.3390/s21123998- **Compute HRV indices using Python**  - **Time domain**: RMSSD, MeanNN, SDNN, SDSD, CVNN etc.  - **Frequency domain**: Spectral power density in various frequency bands (Ultra low/ULF, Very low/VLF, Low/LF, High/HF, Very high/VHF), Ratio of LF to HF power, Normalized LF (LFn) and HF (HFn), Log transformed HF (LnHF).  - **Nonlinear domain**: Spread of RR intervals (SD1, SD2, ratio between SD2 to SD1), Cardiac Sympathetic Index (CSI), Cardial Vagal Index (CVI), Modified CSI, Sample Entropy (SampEn)... code-block:: python    # Download data    data = nk.data(&quot;bio_resting_8min_100hz&quot;)    # Find peaks    peaks, info = nk.ecg_peaks(data[&quot;ECG&quot;], sampling_rate=100)    # Compute HRV indices    nk.hrv(peaks, sampling_rate=100, show=True)    &gt;&gt;&gt;    HRV_RMSSD  HRV_MeanNN   HRV_SDNN  ...   HRV_CVI  HRV_CSI_Modified  HRV_SampEn    &gt;&gt;&gt; 0  69.697983  696.395349  62.135891  ...  4.829101        592.095372    1.259931.. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_hrv.pngMiscellaneous----------------------------ECG Delineation^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- Delineate the QRS complex of an electrocardiac signal (ECG) including P-peaks, T-peaks, as well as their onsets and offsets... code-block:: python    # Download data    ecg_signal = nk.data(dataset=&quot;ecg_3000hz&quot;)    # Extract R-peaks locations    _, rpeaks = nk.ecg_peaks(ecg_signal, sampling_rate=3000)    # Delineate    signal, waves = nk.ecg_delineate(ecg_signal, rpeaks, sampling_rate=3000, method=&quot;dwt&quot;, show=True, show_type='all').. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_delineate.png       :target: https://neuropsychology.github.io/NeuroKit/examples/ecg_delineate/ecg_delineate.htmlSignal Processing^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- **Signal processing functionalities**  - **Filtering**: Using different methods.  - **Detrending**: Remove the baseline drift or trend.  - **Distorting**: Add noise and artifacts... code-block:: python    # Generate original signal    original = nk.signal_simulate(duration=6, frequency=1)    # Distort the signal (add noise, linear trend, artifacts etc.)    distorted = nk.signal_distort(original,                                  noise_amplitude=0.1,                                  noise_frequency=[5, 10, 20],                                  powerline_amplitude=0.05,                                  artifacts_amplitude=0.3,                                  artifacts_number=3,                                  linear_drift=0.5)    # Clean (filter and detrend)    cleaned = nk.signal_detrend(distorted)    cleaned = nk.signal_filter(cleaned, lowcut=0.5, highcut=1.5)    # Compare the 3 signals    plot = nk.signal_plot([original, distorted, cleaned]).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_signalprocessing.pngComplexity (Entropy, Fractal Dimensions, ...)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- **Optimize complexity parameters** (delay *tau*, dimension *m*, tolerance *r*).. code-block:: python    # Generate signal    signal = nk.signal_simulate(frequency=[1, 3], noise=0.01, sampling_rate=200)    # Find optimal time delay, embedding dimension and r    parameters = nk.complexity_optimize(signal, show=True).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_complexity_optimize.png        :target: https://neuropsychology.github.io/NeuroKit/functions/complexity.html- **Compute complexity features**  - **Entropy**: Sample Entropy (SampEn), Approximate Entropy (ApEn), Fuzzy Entropy (FuzzEn), Multiscale Entropy (MSE), Shannon Entropy (ShEn)  - **Fractal dimensions**: Correlation Dimension D2, ...  - **Detrended Fluctuation Analysis**.. code-block:: python    nk.entropy_sample(signal)    nk.entropy_approximate(signal)Signal Decomposition^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    # Create complex signal    signal = nk.signal_simulate(duration=10, frequency=1)  # High freq    signal += 3 * nk.signal_simulate(duration=10, frequency=3)  # Higher freq    signal += 3 * np.linspace(0, 2, len(signal))  # Add baseline and linear trend    signal += 2 * nk.signal_simulate(duration=10, frequency=0.1, noise=0)  # Non-linear trend    signal += np.random.normal(0, 0.02, len(signal))  # Add noise    # Decompose signal using Empirical Mode Decomposition (EMD)    components = nk.signal_decompose(signal, method='emd')    nk.signal_plot(components)  # Visualize components    # Recompose merging correlated components    recomposed = nk.signal_recompose(components, threshold=0.99)    nk.signal_plot(recomposed)  # Visualize components.. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_decomposition.png        :target: https://neuropsychology.github.io/NeuroKit/functions/signal.html#signal-decomposeSignal Power Spectrum Density (PSD)^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code-block:: python    # Generate complex signal    signal = nk.signal_simulate(duration=20, frequency=[0.5, 5, 10, 15], amplitude=[2, 1.5, 0.5, 0.3], noise=0.025)    # Get the PSD using different methods    welch = nk.signal_psd(signal, method=&quot;welch&quot;, min_frequency=1, max_frequency=20, show=True)    multitaper = nk.signal_psd(signal, method=&quot;multitapers&quot;, max_frequency=20, show=True)    lomb = nk.signal_psd(signal, method=&quot;lomb&quot;, min_frequency=1, max_frequency=20, show=True)    burg = nk.signal_psd(signal, method=&quot;burg&quot;, min_frequency=1, max_frequency=20, order=10, show=True).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_psd.png        :target: https://neuropsychology.github.io/NeuroKit/functions/signal.html#signal-psdStatistics^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- **Highest Density Interval (HDI)**.. code-block:: python    x = np.random.normal(loc=0, scale=1, size=100000)    ci_min, ci_max = nk.hdi(x, ci=0.95, show=True).. image:: https://raw.github.com/neuropsychology/NeuroKit/master/docs/readme/README_hdi.png        :target: https://neuropsychology.github.io/NeuroKit/functions/stats.html#hdi.. used_at_sectionPopularity---------------------.. image:: https://img.shields.io/pypi/dd/neurokit2        :target: https://pypi.python.org/pypi/neurokit2.. image:: https://img.shields.io/github/stars/neuropsychology/NeuroKit        :target: https://github.com/neuropsychology/NeuroKit/stargazers.. image:: https://img.shields.io/github/forks/neuropsychology/NeuroKit        :target: https://github.com/neuropsychology/NeuroKit/networkNeuroKit2 is one of the most welcoming package for new contributors and users, as well as the fastest growing package. So stop hesitating and hop onboard ðŸ¤—.. image:: https://raw.github.com/neuropsychology/NeuroKit/dev/docs/readme/README_popularity.png        :target: https://pypi.python.org/pypi/neurokit2Used at-------|ntu| |univ_paris| |univ_duke| |uni_auckland| |uni_pittsburh| |uni_washington|.. |ntu| image:: https://upload.wikimedia.org/wikipedia/en/thumb/c/c6/Nanyang_Technological_University.svg/1024px-Nanyang_Technological_University.svg.png   :height: 70.. |univ_duke| image:: https://www.tutelaprep.com/blog/wp-content/uploads/2019/12/duke.png   :height: 70.. |univ_paris| image:: https://study-eu.s3.amazonaws.com/uploads/university/universit--de-paris-logo.svg   :height: 70.. |uni_auckland| image:: https://upload.wikimedia.org/wikipedia/en/thumb/a/ae/University_of_Auckland.svg/1024px-University_of_Auckland.svg.png   :height: 70.. |uni_pittsburh| image:: https://upload.wikimedia.org/wikipedia/en/thumb/f/fb/University_of_Pittsburgh_seal.svg/1200px-University_of_Pittsburgh_seal.svg.png   :height: 70.. |uni_washington| image:: https://upload.wikimedia.org/wikipedia/en/thumb/5/58/University_of_Washington_seal.svg/768px-University_of_Washington_seal.svg.png   :height: 70Disclaimer----------*The authors do not provide any warranty. If this software causes your keyboard to blow up, your brain to liquefy, your toilet to clog or a zombie plague to break loose, the authors CANNOT IN ANY WAY be held responsible.*News-----0.2.4^^^^^^^^^^^^^^^^^^^Fixes+++++++++++++* `eda_sympathetic()` has been reviewed: low-pass filter and resampling have been added to be in  line with the original paper* `eda_findpeaks()` using methods proposed in nabian2018 is reviewed and improved. Differentiation  has been added before smoothing. Skin conductance response criteria have been revised based on  the original paper.0.2.1^^^^^^^^^^^^^^^^^^^New Features+++++++++++++* Allow for input with NaNs and extrapolation in `signal_interpolate()`* Add argument `method` in `find_outliers()`* A lot (see https://github.com/neuropsychology/NeuroKit/pull/645)0.2.0^^^^^^^^^^^^^^^^^^^New Features+++++++++++++* Add new time-domain measures in `hrv_time()`: `Prc20NN`, `Prc80NN`, `MinNN`, and `MaxNN`0.1.6^^^^^^^^^^^^^^^^^^^Breaking Changes+++++++++++++++++* Argument `type` changed to `out` in `expspace()`New Features+++++++++++++* Add new time-domain measures in `hrv_time()`: `Prc20NN`, `Prc80NN`, `MinNN`, and `MaxNN`* Allow `fix_peaks()` to account for larger intervalsFixes+++++++++++++0.1.5^^^^^^^^^^^^^^^^^^^Breaking Changes+++++++++++++++++* Argument `r` changed to `radius` in `fractal_correlation()`* Argument `r` changed to `tolerance` in entropy and complexity utility functions* Argument `r_method` changed to `tolerance_method` in `complexity_optimize()`* `complexity_lempelziv()`, `fractal_higuchi()`, `fractal_katz()`, `fractal_correlation()`, `fractal_dfa()`, `entropy_multiscale()`, `entropy_shannon()`, `entropy_approximate()`, `entropy_fuzzy()`, `entropy_sample()` now return a tuple consisting of the complexity index, and a dictionary comprising of the different parameters specific to the measure. For `fractal_katz()` and `entropy_shannon()`, the parameters dictionary is empty.* Restructure `complexity` submodules with optimization files starting with `optim_*`, such as `optim_complexity_delay()`, `optim_complexity_dimension()`, `optim_complexity_k()`, `optim_complexity_optimize()`, and `optim_complexity_tolerance()`.* `mutual_information()` moved from `stats` module to `complexity` module.New Features+++++++++++++* Added various complexity indices: `complexity_hjorth()`, `complexity_hurst()`, `complexity_lyapunov()`, `complexity_rqa()`, `complexity_rr()`, `entropy_coalition()`, `entropy_permutation()`, `entropy_range()`, `entropy_spectral()`, `fractal_nld()`, `fractal_psdslope()`, `fractal_sda()`, `fractal_sevcik()`* Added `mne_templateMRI()` as a helper to get MNE's template MRI.* Added `eeg_source()` as a helper to perform source reconstruction.* Added `eeg_source_extract()` to extract the activity from a brain region.* Added `parallel_run()` in `misc` as a parallel processing utility function.* Added `find_plateau()` in `misc` to find the point of plateau in an array of values.* Added `write_csv()` in `data` to facilitate saving dataframes into multiple parts.* Added more complexity-related functions, `entropy_cumulative_residual()`, `entropy_differential()`, `entropy_svd()`, `fractal_petrosian()`, and `information_fisher()`.* Updates logic to find `kmax` in `fractal_higuchi()`* Add RSP_Amplitude_Baseline in event-related analysis* Add argument `add_firstsamples` in `mne_channel_extract()` to account for first sample attribute in mne raw objects* Allow plotting of `mne.Epochs` in `epochs_plot()`* Add `mne_crop()` to crop `mne` Raw objects with additional flexibility to specify first and last elements* Plotting function in `eeg_badchannels()` to visualize overlay of individual EEG channels and highlighting of bad ones* Add `eog_peaks()` as wrapper for `eog_findpeaks()`* Allow `ecg_delineate()` to account for different heart rateFixes+++++++++++++* Ensure detected offset in `emg_activation()` is not beyond signal length* Raise ValueError in `_hrv_sanitize_input()` if RRIs are detected instead of peaks* Ensure that multifractal DFA indices returned by `fractal_mdfa()` is not Nan when array of slopes contains Nan (due to zero fluctuations)* Documentation of respiration from peak/trough terminology to inhale/exhale onsets* Change labelling in `rsp_plot()` from &quot;inhalation peaks&quot; and &quot;exhalation troughs&quot; to &quot;peaks (exhalation onsets)&quot; and &quot;troughs (inhalation onsets)&quot; respectively.* Change RSP_Amplitude_Mean/Min/Max parameters to be corrected based on value closest to t=0 in event-related analysis, rather than using all pre-zero values.* Have `rsp_rrv()` compute breath-to-breath intervals based on trough indices (inhalation onsets) rather than peak indices* Compute `rsp_rate()` based on trough indices (rather than peak indices) in 'periods' method0.1.4.1^^^^^^^^^^^^^^^^^^^Fixes+++++++++++++* Adjust `kmax` parameter in `fractal_higuchi()` according to signal length as having `kmax` more than half of signal length leads to division by zero error* Ensure that sanitization of input in `_hrv_dfa()` is done before windows for `DFA_alpha2` is computed* `np.seterr` is added to `fractal_dfa()` to avoid returning division by zero warning which is an expected behaviour0.1.4^^^^^^^^^^^^^^^^^^^Breaking Changes+++++++++++++++++* `fractal_df()` now returns a dictionary of windows, fluctuations and the slope value (see documentation for more information. If `multifractal` is True, the dictionary additionally contains the parameters of the singularity spectrum (see `singularity_spectrum()` for more information)New Features+++++++++++++* Add convenience function `intervals_to_peaks()` useful for RRI or BBI conversion to peak indices* `hrv_nonlinear()` and `rrv_rsp()` now return the parameters of singularity spectrum for multifractal DFA analysis* Add new complexity measures in `fractal_higuchi()`, `fractal_katz()` and `fractal_lempelziv()`* Add new time-domain measures in `hrv_time()`: `SDANN` and `SDNNI`* Add new non-linear measures in `hrv_nonlinear()`: `ShanEn`, `FuzzyEn`, `HFD`, `KFD` and `LZC`Fixes+++++++++++++* Add path argument in `mne_data()` and throw warning to download mne datasets if data folder is not present* The implementation of `TTIN` in `hrv_time()` is amended to its correct formulation.* The default binsize used for RRI histogram in the computation of geometric HRV indices is set to 1 / 128 seconds0.1.3^^^^^^^^^^^^^^^^^^^Breaking Changes+++++++++++++++++* NoneNew Features+++++++++++++* Add internal function for detecting missing data points and forward filling missing values in `nk.*_clean()` functions* Add computation of standard deviation in `eventrelated()` functions for *ECG_Rate_SD*, *EMG_Amplitude_SD*, *EOG_Rate_SD*, *PPG_Rate_SD*, *RSP_Rate_SD*, *RSP_Amplitude_SD** Add labelling for interval related features if a dictionary of dataframes is passed* Retrun Q peaks and S Peaks information for wavelet-based methods in `nk.ecg_delineate()`Fixes+++++++++++++* Fix epochs columns with `dtype: object` generated by `nk.epochs_create()`* Bug fix ecg_findpeaks_rodrigues for array out of bounds bug0.1.2^^^^^^^^^^^^^^^^^^^New Features+++++++++++++* Additional features for `nk.rsp_intervalrelated()`: average inspiratory and expiratory durations, inspiratory-to-expiratory (I/E) time ratio* Add multiscale entropy measures (MSE, CMSE, RCMSE) and fractal methods (Detrended Fluctuation Analysis, Correlation Dimension) into `nk.hrv_nonlinear()`* Allow for data resampling in `nk.read_bitalino()`* Add `bio_resting_8min_200hz` into database for reading with `nk.data()`* Reading of url links in `nk.data()`* Allow for `nk.hrv()` to compute RSA indices if respiratory data is present* All `hrv` functions to automatically detect correct sampling rate if tuple or dict is passed as input* Add support for PPG analysis: `nk.ppg_eventrelated()`, `nk.ppg_intervalrelated()`, `nk.ppg_analyze()`* Add Zhao et al. (2018) method for `nk.ecg_quality()`* Add tests for `epochs` module* Add sub-epoch option for ECG and RSP event-related analysis:* users can create a smaller sub-epoch within the event-related epoch* the rate-related features of ECG and RSP signals are calculated over the sub-epoch* the remaining features are calculated over the original epoch, not the sub-epochFixes+++++++++++++* Fix propagation of values in `nk.signal_formatpeaks()` for formatting SCR column outputs generated by `eda_peaks()`* Fix docstrings of `nk.rsp_phase()`, from &quot;RSP_Inspiration&quot; to &quot;RSP_Phase&quot;* Update `signal_filter()` method for `rsp_clean()`: to use `sos` form, instead of `ba` form of butterworth (similar to `eda_clean()`)0.1.1^^^^^^^^^^^^^^^^^^^New Features+++++++++++++* Use duration from `nk.events_find()` as `epochs_end` in `nk.epochs_create()`* Allow customized subsets of epoch lengths in `nk.bio_analyze()` with `window_lengths` argument* Add `nk.find_outliers()` to identify outliers (abnormal values)* Add utility function - `nk.check_type()` to return appropriate boolean values of input (integer, list, ndarray, pandas dataframe or pandas series)* (experimental) Add error bars in the summary plot method to illustrate standard error of each binFixes+++++++++++++* Fix type of value in `nk.signal_formatpeaks()` to ensure slice assignment is done on the same type0.0.1 (2019-10-29)^^^^^^^^^^^^^^^^^^^* First release on PyPI.</longdescription>
</pkgmetadata>