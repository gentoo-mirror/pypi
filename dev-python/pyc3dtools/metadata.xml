<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyc3dtools This is python package that you can use it to read your c3d file. Actually, this is an [C3Dtools.com](https://c3dtools.com) API. ```diff- I called it MAHSA```The [C3Dtools.com](https://c3dtools.com) is a free web-based biomechanical toolbox.On [C3Dtools.com](https://c3dtools.com) you can :        - Lower Body Inverse Kinematic - Plug-in Gait Model NEW        - Convert C3D file to ASCII and create .TRC and .MOT that is compatible with the Opensim        - Convert Xsens IMU sensors data to .sto to use in Opensim(Opensens)        - Detect Gait events based on kinematic data        - Calculate spatiotemporal gait parameters based on kinematic data        - Apply Butterworth low-pass and high-pass digital filtering        - Free C3D files repository        - Trim C3D file   # Install```pip install pyc3dtools```# UsageFirst of all, create an account ([Register](https://c3dtools.com/register)) and then log in to your account, you can find the API token on the home pageand then import pyc3dtools package```pythonimport pyc3dtools```Finally pass the API token and your file path to the readC3D function as inputs,```pythonc3d =  pyc3dtools.readC3D(TOKEN,'TYPE-2.C3D')```# Get data### 1.Header section```pythonNumber_of_Markers = c3d['Header']['Number_of_Points']First_Frame = c3d['Header']['first_frame']Last_Frame = c3d['Header']['last_frame']Video_Sampling_Rate = c3d['Header']['Video_Frame_Rate']Number_of_Analog_Channels = c3d['Header']['Analog_number_channel']Analog_Sample_Rate = c3d['Header']['Analog_Frame_Rate']Analog_sample_per_video_frame = c3d['Header']['Analog_sample_per_Frame']```#### 2.Marker &amp; Analog Labels```pythonMarkers_Label = c3d['Markers Label']Analog_Label = c3d['Analog Label']```#### 3. Markers```python### c3d['Markers'][frame][marker][:3]p1 = c3d['Markers'][0][0][:3] # Get the position of the first marker (x,y,z) in the first frame p2 = c3d['Markers'][100][0][:3] # Get the position of the first marker (x,y,z) in the 100th framep3 = c3d['Markers'][100][1][:3] # Get the position of the second marker (x,y,z) in the 100th frame```#### 5. Units and Coordinate System```pythonUnits = c3d['Units']coordinate_System = c3d['Coordinate system'] #[X_SCREEN, Y_SCREEN]```#### 6. ForcePlate Type 2,3,4,5```python### c3d['ForcePlate'][Plate Number]['FZ'][Frame][Analog Frame per Video Frame]Number_Of_Forceplates = len(result['ForcePlate'])Force = c3d['ForcePlate'][0]['FX'][100] ,c3d['ForcePlate'][0]['FY'][100],c3d['ForcePlate'][0]['FZ'][100] Force = c3d['ForcePlate'][0]['FX'][100][10] ,c3d['ForcePlate'][0]['FY'][100][10],c3d['ForcePlate'][0]['FZ'][100][10] Corners c3d['ForcePlate'][0]['corners']Origin = c3d['ForcePlate'][0]['Origin']### c3d['ForcePlate'][Plate Number]['COP'][Frame][X|Y|Z][Frame][Analog Frame per Video Frame]Xcop_frame_50_1 = c3d['ForcePlate'][0]['COP'][50][0][1]Ycop_frame_50_1 = c3d['ForcePlate'][0]['COP'][50][1][1]Zcop_frame_50_1 = c3d['ForcePlate'][0]['COP'][50][2][1]```# Sample```pythonimport sysimport pyc3dtoolsimport matplotlib.pyplot as pltimport numpy as npTOKEN = &quot;YOUR TOKEN&quot;result =  pyc3dtools.readC3D(TOKEN,'TYPE-2.C3D')if result['Status']=='Failed':  print(f&quot;Failed to Read File... | {result['error']}&quot;)   sys.exit(0)print('---------------------------- C3Dtools.Com ----------------------------')print(f&quot;Header::Number of Markers = {result['Header']['Number_of_Points']}&quot;)print(f&quot;Header::First Frame = {result['Header']['first_frame']}&quot;)print(f&quot;Header::Last Frame = {result['Header']['last_frame']}&quot;)print(f&quot;Header::Video Sampling Rate = {result['Header']['Video_Frame_Rate']}&quot;)print(f&quot;Header::Analog Channels = {result['Header']['Analog_number_channel']}&quot;)print(f&quot;Header:: Analog Sample Rate = {result['Header']['Analog_Frame_Rate']}&quot;)print(f&quot;Header:: Analog sample per video frame = {result['Header']['Analog_sample_per_Frame']}&quot;)print('----------------------------------------------------------------------')print(f&quot;GP::Markers Label = {result['Markers Label']}&quot;)print(f&quot;GP::Analog Label = {result['Analog Label']}&quot;)print('----------------------------------------------------------------------')print(f&quot;Markers:: Frame-&gt;0 , {result['Markers Label'][0]}  = {result['Markers'][0][0][:3]}&quot;)print(f&quot;Markers:: Frame-&gt;100 , {result['Markers Label'][0]}  = {result['Markers'][100][0][:3]}&quot;)print(f&quot;Markers:: Frame-&gt;150 , {result['Markers Label'][1]}  = {result['Markers'][150][1][:3]}&quot;)print(f&quot;Markers:: Units = {result['Units']}&quot;)print(f&quot;coordinate System [X_SCREEN, Y_SCREEN] = {result['Coordinate system']}&quot;)print('----------------------------------------------------------------------')print(f&quot;Number Of Forceplates = {len(result['ForcePlate'])}&quot;)#print(f&quot;First plate:: FX, FY, FZ :: Frame-&gt;100 = ({result['ForcePlate'][0]['FX'][100] ,result['ForcePlate'][0]['FY'][100],result['ForcePlate'][0]['FZ'][100] })&quot;) # Analog sample per video frame is equal 20 print(f&quot;First plate:: FX, FY, FZ :: Frame-&gt;100 :: Analog Sample 10 = {result['ForcePlate'][0]['FX'][100][10] ,result['ForcePlate'][0]['FY'][100][10],result['ForcePlate'][0]['FZ'][100][10] }&quot;) # Analog sample per video frame is equal 20 print(f&quot;First plate:: Corners = {result['ForcePlate'][0]['corners']}&quot;)print(f&quot;First plate:: Origin = {result['ForcePlate'][0]['Origin']}&quot;)print(f&quot;First plate:: COP :: X,Y,Z :: Frame-&gt;50 :: Analog Sample 1 = {result['ForcePlate'][0]['COP'][50][0][1],result['ForcePlate'][0]['COP'][50][1][1],result['ForcePlate'][0]['COP'][50][2][1]}&quot;) # Analog sample per video frame is equal 20 #plot dataMarker1 = result['Markers'][:,1,:3]FZ = np.array(result['ForcePlate'][0]['FZ'])FZ = FZ.flatten()COP = result['ForcePlate'][0]['COP'][:,:,:]COP_X = COP[:,0,:]COP_Y = COP[:,1,:]COP_X = COP_X.flatten()COP_Y = COP_Y.flatten()Vec_GRF = result['ForcePlate'][0]['GRF_VECTOR'][:,:,:]Vec_GRF_X = Vec_GRF[:,0,:]Vec_GRF_Y = Vec_GRF[:,1,:]Vec_GRF_Z = Vec_GRF[:,2,:]Vec_GRF_X = Vec_GRF_X.flatten()Vec_GRF_Y = Vec_GRF_Y.flatten()Vec_GRF_Z = Vec_GRF_Z.flatten()fig = plt.figure()axs = fig.subplots(2, 2)axs[0, 0].plot(Marker1[:,0], color='r', label='X')axs[0, 0].plot(Marker1[:,1], color='g', label='Y')axs[0, 0].plot(Marker1[:,2], color='b', label='Z')axs[0, 0].set_title('Marker Position')axs[0, 1].plot(FZ, 'tab:orange')axs[0, 1].set_title('GRF Z')axs[1, 0].plot(COP_X, color='g', label='copX')axs[1, 0].plot(COP_Y, color='b', label='copY')axs[1, 0].set_title('COP')axs[1, 1].plot(Vec_GRF_X, color='g', label='GRFX')axs[1, 1].plot(Vec_GRF_Y, color='b', label='GRFY')axs[1, 1].plot(Vec_GRF_Z, color='r', label='GRFZ')axs[1, 1].set_title('GRF vector')NumFrames = result['Header']['last_frame'] - result['Header']['first_frame']Forceplates = result['ForcePlate']cop_data = []grf_vector = []corners = []for fp in Forceplates:    #COP   cop_data.append(fp['COP'])  #GRF  grf_vector.append(fp['GRF_VECTOR'])  #Corners  for c in range(4):        corners.extend(fp['corners'])# COP &amp; GRFmain_cop_data =[]main_grf_data =[]for i in range(NumFrames):     for fp in range(len(Forceplates)):    main_cop_data.append([cop_data[fp][i,0,0] , cop_data[fp][i,1,0]])    main_grf_data.append([grf_vector[fp][i,0,0] , grf_vector[fp][i,1,0], grf_vector[fp][i,2,0]])  # Get Analog dataAnalog_Label = result['Analog Label']Analog_Data = result['Analog']ch0 = Analog_Data[:,:,0]ch1 = Analog_Data[:,:,1]ch2 = Analog_Data[:,:,2]plt.show()print('OK')```# Export .mot and .trcIf you need to convert your c3d file to compatible files for OpenSim software you can use *getTRCMot* function. This function returns all c3d file data and also write .mot and .trc file in a directory```pythonimport pyc3dtoolsTOKEN = &quot;YOUR_TOKEN&quot;#result =  pyc3dtools.getTRCMot(TOKEN,'Input C3D File','Destination directory')result =  pyc3dtools.getTRCMot(TOKEN,'TYPE-2.C3D','./exportData')```## Export .mot and .trc Sample code```pythonimport pyc3dtoolsTOKEN = &quot;YOUR_TOKEN&quot;result =  pyc3dtools.getTRCMot(TOKEN,'TYPE-2.C3D','./exportData')if result['Status'] == 'Success':    print('Done.')``````diff+ Women Life Freedom```</longdescription>
</pkgmetadata>