<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># openapify###### Framework agnostic OpenAPI Specification generation for code lovers[![Build Status](https://github.com/Fatal1ty/openapify/workflows/tests/badge.svg)](https://github.com/Fatal1ty/openapify/actions)[![Latest Version](https://img.shields.io/pypi/v/openapify.svg)](https://pypi.python.org/pypi/openapify)[![Python Version](https://img.shields.io/pypi/pyversions/openapify.svg)](https://pypi.python.org/pypi/openapify)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)---This library is designed for code-first people who don't want to bother divinginto the detailsof [OpenAPI Specification](https://spec.openapis.org/oas/v3.1.0), but whoinstead want to use advantages of Python typing system, IDE code-completion andstatic type checkers to continuously build the API documentation and keep italways up to date.Openapify is based on the idea of applying decorators on route handlers. Anyweb-framework has a routing system that let us link a route to a handler(a high-level function or a class method). By using decorators, we can addinformation about requests, responses and other details that will then be usedto create an entire OpenAPI document.&gt; **Warning**&gt;&gt; This library is currently in pre-release stage and may have backward&gt; incompatible changes prior to version 1.0. Please use caution when using this&gt; library in production environments and be sure to thoroughly test any updates&gt; before upgrading to a new version.Table of contents--------------------------------------------------------------------------------* [Installation](#installation)* [Quickstart](#quickstart)* [Building the OpenAPI Document](#building-the-openapi-document)* [Integration with web-frameworks](#integration-with-web-frameworks)    * [aiohttp](#aiohttp)    * [Writing your own integration](#writing-your-own-integration)* [Decorators](#decorators)    * [Generic operation info](#generic-operation-info)    * [Request](#request)    * [Response](#response)    * [Security requirements](#security-requirements)* [Entity schema builders](#entity-schema-builders)Installation--------------------------------------------------------------------------------Use pip to install:```shell$ pip install openapify```Quickstart--------------------------------------------------------------------------------&gt; **Note**&gt;&gt; In the following example, we will intentionally demonstrate the process of&gt; creating an OpenAPI document without being tied to a specific web-framework.&gt; However, this process may be easier on a supported web-framework.&gt; See [Integration with web-frameworks](#integration-with-web-frameworks) for&gt; more info.Let's see how to build an OpenAPI document with openapify. Suppose we arewriting an app for a bookstore that return a list of new books. Here we have adataclass model `Book` that would be used as a response model in a real-lifescenario. A function `get_new_books` is our handler.```pythonfrom dataclasses import dataclass@dataclassclass Book:    title: str    author: str    year: intdef get_new_books(...):    ...```Now we want to say that our handler returns a json serialized list of bookslimited by the optional `count` parameter. We use `request_schema`and `response_schema` decorators accordingly:```pythonfrom openapify import request_schema, response_schema@request_schema(query_params={&quot;count&quot;: int})@response_schema(list[Book])def get_new_books(...):    ...```And now we need to collect all the route definitions and pass them to the`build_spec` function. This function returns an object that has `to_yaml`method.```pythonfrom openapify import build_specfrom openapify.core.models import RouteDefroutes = [RouteDef(&quot;/books&quot;, &quot;get&quot;, get_new_books)]spec = build_spec(routes)print(spec.to_yaml())```As a result, we will get the following OpenAPI document which can be renderedusing tools such as Swagger UI:```yamlopenapi: 3.1.0info:  title: API  version: 1.0.0paths:  /books:    get:      parameters:      - name: count        in: query        schema:          type: integer      responses:        '200':          description: OK          content:            application/json:              schema:                type: array                items:                  $ref: '#/components/schemas/Book'components:  schemas:    Book:      type: object      title: Book      properties:        title:          type: string        author:          type: string        year:          type: integer      additionalProperties: false      required:      - title      - author      - year```Building the OpenAPI Document--------------------------------------------------------------------------------The final goal of this library is to buildthe [OpenAPI Document](https://spec.openapis.org/oas/v3.1.0#openapi-document)for your web-application. This document consists of common information aboutthe application, such as a title and version, and specific information thatoutlines the functionalities of the API.Since openapify is now basedon [apispec](https://github.com/marshmallow-code/apispec) library, the OpenAPIdocument is presented by `APISpec` class for the convenience of using theexisting ecosystem of plugins. However, openapify has its ownsubclass `OpenAPIDocument` which makes it easier to add some common fields,such as an arrayof [Server](https://spec.openapis.org/oas/v3.1.0#server-object) objects orarray ofcommon [Security Scheme](https://spec.openapis.org/oas/v3.1.0#security-scheme-object)objects.To build the document, there is `build_spec` function. The very basic documentcan be created by calling it with an empty list of route definitions, leavingall the parameters with their default values.```pythonfrom openapify import build_specprint(build_spec([]).to_yaml())```As a result, we will get the following document:```yamlopenapi: 3.1.0info:  title: API  version: 1.0.0paths: {}```We can change the common document attributes either by passing themto `build_spec`:```pythonfrom openapify import build_specfrom openapify.core.openapi.models import HTTPSecuritySchemebuild_spec(    routes=[],    title=&quot;My Bookstore API&quot;,    version=&quot;1.1.0&quot;,    openapi_version=&quot;3.1.0&quot;,    servers=[&quot;http://127.0.0.1&quot;],    security_schemes={&quot;basic_auth&quot;: HTTPSecurityScheme()})```or using a prepared `OpenAPIDocument` object:```pythonfrom openapify import OpenAPIDocument, build_specfrom openapify.core.openapi.models import HTTPSecuritySchemespec = OpenAPIDocument(    title=&quot;My Bookstore API&quot;,    version=&quot;1.1.0&quot;,    openapi_version=&quot;3.1.0&quot;,    servers=[&quot;http://127.0.0.1&quot;],    security_schemes={&quot;basic_auth&quot;: HTTPSecurityScheme()},)build_spec([], spec)```To add meaning to our document, we canadd [Path](https://spec.openapis.org/oas/v3.1.0#paths-object),[Component](https://spec.openapis.org/oas/v3.1.0#components-object)and other OpenAPI objects by applying [decorators](#decorators) on our routehandlers and constructing route definitions that will be passed to the builder.A single complete route definition presented by `RouteDef` class can look likethis:```pythonfrom openapify.core.models import RouteDeffrom openapify.core.openapi.models import Parameter, ParameterLocationdef get_book_by_id_handler(...):    ...RouteDef(    path=&quot;/book/{id}&quot;,    method=&quot;get&quot;,    handler=get_book_by_id_handler,    summary=&quot;Getting the book&quot;,    description=&quot;Getting the book by id&quot;,    parameters=[        Parameter(            name=&quot;id&quot;,            location=ParameterLocation.PATH,            required=True,            schema={&quot;type&quot;: &quot;integer&quot;},        )    ],    tags=[&quot;book&quot;],)```As will be shown further, optionalarguments `summary`, `description`, `parameters` and `tags` can be overriddenor extended by `path_docs` and `request_schema` decorators.The creating of these route definitions can be automated and adapted to aspecific web-framework, and openapify has built-in support for a few of them.See [Integration with web-frameworks](#integration-with-web-frameworks) fordetails.Integration with web-frameworks--------------------------------------------------------------------------------There is built-in support for a few web-frameworks, which makes creating thedocumentation even easier and more fun. Any other frameworks can be integratedwith a little effort. If you are ready to take on this, you are very welcome tocreate a [pull request](https://github.com/Fatal1ty/openapify/pulls).### aiohttpThe documentation for [aiohttp](https://github.com/aio-libs/aiohttp)web-application can be built in three ways:* Using an already existing [`aiohttp.web.Application`](https://docs.aiohttp.org/en/stable/web_reference.html#application) object* Using a set of [`aiohttp.web.RouteDef`](https://docs.aiohttp.org/en/stable/web_reference.html#aiohttp.web.RouteDef) objects* Using a set of objects implementing [`AioHttpRouteDef`](https://github.com/Fatal1ty/openapify/blob/2bbf2e99c06b31fa2f1465f2ebc118884ce2bb95/openapify/ext/web/aiohttp.py#L43-L46) protocolAll we need is to pass either an application, or a set of route defs tomodified `build_spec` function. See the example:```pythonfrom aiohttp import webfrom openapify import request_schema, response_schemafrom openapify.ext.web.aiohttp import build_specroutes = web.RouteTableDef()@response_schema(str, media_type=&quot;text/plain&quot;)@routes.post(&quot;/&quot;)async def hello(request):    return web.Response(text=&quot;Hello, world&quot;)app = web.Application()app.add_routes(routes)print(build_spec(app).to_yaml())```As a result, we will get the following document:```yamlopenapi: 3.1.0info:  title: API  version: 1.0.0paths:  /:    post:      responses:        '200':          description: OK          content:            text/plain:              schema:                type: string```### Writing your own integration🚧 To be describedDecorators--------------------------------------------------------------------------------Openapify has several decorators that embed necessary specific information forlater use when building the OpenAPI document. In general, decorators willdefine the information that will be included inthe [Operation Object](https://spec.openapis.org/oas/v3.1.0#operation-object)which describes a single API operation on a path. We will look at what eachdecorator parameter is responsible for and how it is reflected in the finaldocument.### Generic operation infoDecorator `path_docs` adds generic information about the Operation object,which includes summary, description, tags, external documentation anddeprecation marker.```pythonfrom openapify import path_docs```#### summaryAn optional, string summary, intended to apply to the operation. This affectsthe value ofthe [`summary`](https://spec.openapis.org/oas/v3.1.0#operation-object) field ofthe Operation object.| Possible types | Examples              ||----------------|-----------------------|| `str`          | `&quot;Getting new books&quot;` |#### descriptionAn optional, string description, intended to apply to theoperation. [CommonMark syntax](https://spec.commonmark.org) MAY be used forrich text representation. This affects the value ofthe [`description`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object.| Possible types | Examples                    ||----------------|-----------------------------|| `str`          | `&quot;Returns a list of books&quot;` |#### tagsA list of tags for API documentation control. Tags can be used for logicalgrouping of operations by resources or any other qualifier. This affects thevalue of the [`tags`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object.| Possible types  | Examples   ||-----------------|------------|| `Sequence[str]` | `[&quot;book&quot;]` |#### external_docsAdditional external documentation for the operation. It can be a single url or(url, description) pair. This affects the value ofthe [`summary`](https://spec.openapis.org/oas/v3.1.0#operation-object) field ofthe Operation object.| Possible types    | Examples                                                                  ||-------------------|---------------------------------------------------------------------------|| `str`             | `&quot;https://example.org/docs/books&quot;`                                        || `Tuple[str, str]` | `(&quot;https://example.org/docs/books&quot;, &quot;External documentation for /books&quot;)` |#### deprecatedDeclares the operation to be deprecated. Consumers SHOULD refrain from usageof the declared operation. Default value is false. This affects the value ofthe [`deprecated`](https://spec.openapis.org/oas/v3.1.0#operation-object) fieldof the Operation object.| Possible types | Examples                       ||----------------|--------------------------------|| `bool`         | &lt;code lang=&quot;python&quot;&gt;True&lt;/pre&gt; |### RequestDecorator `request_schema` adds information about the operation requests.Request can have a body, query parameters, headers and cookies.```pythonfrom openapify import request_schema```#### bodyA request body can be described entirely by one `body` parameter of type `Body`or partially by separate `body_*` parameters (see below).In the first case it is `openapify.core.models.Body` object that has all theseparate `body_*` parameters inside. This affects the value ofthe [`requestBody`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object.In the second case it is the request body Python data type for which the JSONSchema will be built. This affects the value ofthe [`requestBody`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`schema`](https://spec.openapis.org/oas/v3.1.0#media-type-object) field ofMedia Type object insidethe valueof [`content`](https://spec.openapis.org/oas/v3.1.0#request-body-object) fieldof Request Body object.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Type&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```pythonBook```&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Body&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```pythonBody(    value_type=Book,    media_type=&quot;application/json&quot;,    required=True,    description=&quot;A book&quot;,    example={        &quot;title&quot;: &quot;Anna Karenina&quot;,        &quot;author&quot;: &quot;Leo Tolstoy&quot;,        &quot;year&quot;: 1877,    },)```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;#### media_typeA media typeor [media type range](https://www.rfc-editor.org/rfc/rfc7231#appendix-D) of therequest body. This affects the value ofthe [`requestBody`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the keyof [`content`](https://spec.openapis.org/oas/v3.1.0#request-body-object) fieldof Request Body object.The default value is `&quot;application/json&quot;`.| Possible types | Examples            ||----------------|---------------------|| `str`          | `&quot;application/xml&quot;` |#### body_requiredDetermines if the request body is required in the request. Defaults to false.This affects the value ofthe [`requestBody`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`required`](https://spec.openapis.org/oas/v3.1.0#request-body-object)field of Request Body object.| Possible types | Examples ||----------------|----------|| `bool`         | `True`   |#### body_descriptionA brief description of the request body. This could contain examples ofuse. [CommonMark syntax](https://spec.commonmark.org) MAY be used for rich textrepresentation. This affects the value ofthe [`requestBody`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`description`](https://spec.openapis.org/oas/v3.1.0#request-body-object)field of Request Body object.| Possible types | Examples   ||----------------|------------|| `str`          | `&quot;A book&quot;` |#### body_exampleExample of the request body. The example object SHOULD be in the correct formatas specified by the media type. This affects the value ofthe [`requestBody`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`example`](https://spec.openapis.org/oas/v3.1.0#media-type-object) fieldofMedia Type object insidethe valueof [`content`](https://spec.openapis.org/oas/v3.1.0#request-body-object) fieldof Request Body object.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;title&quot;: &quot;Anna Karenina&quot;,    &quot;author&quot;: &quot;Leo Tolstoy&quot;,    &quot;year&quot;: 1877,}```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;#### body_examplesExamples of the request body. Each example object SHOULD match the media typeand specified schema if present. This affects the value ofthe [`requestBody`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`examples`](https://spec.openapis.org/oas/v3.1.0#media-type-object) fieldofMedia Type object insidethe valueof [`content`](https://spec.openapis.org/oas/v3.1.0#request-body-object) fieldof Request Body object.The values of this dictionary could be either examples themselves,or `openapify.core.openapi.models.Example` objects. In the latter case,extended information about examples, such as a summary and description, can beadded to the [Example](https://spec.openapis.org/oas/v3.1.0#example-object)object.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, Any]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;Anna Karenina&quot;: {        &quot;title&quot;: &quot;Anna Karenina&quot;,        &quot;author&quot;: &quot;Leo Tolstoy&quot;,        &quot;year&quot;: 1877,    }}```&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, Example]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;Anna Karenina&quot;: Example(        value={            &quot;title&quot;: &quot;Anna Karenina&quot;,            &quot;author&quot;: &quot;Leo Tolstoy&quot;,            &quot;year&quot;: 1877,        },        summary=&quot;The book 'Anna Karenina'&quot;,    )}```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;#### query_paramsDictionary of query parameters applicable for the operation, where the key isthe parameter name and the value can be either a Python data type ora `QueryParam` object.In the first case it is the Python data type for the query parameter for whichthe JSON Schema will be built. This affects the value ofthe [`parameters`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`schema`](https://spec.openapis.org/oas/v3.1.0#parameter-object) field ofParameter object.In the second case it is `openapify.core.models.QueryParam` object that canhave extended information about the parameter, such as a default value,deprecation marker, examples etc.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, Type]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{&quot;count&quot;: int}```&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, QueryParam]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;count&quot;: QueryParam(        value_type=int,        default=10,        required=True,        description=&quot;Limits the number of books returned&quot;,        deprecated=False,        allowEmptyValue=False,        example=42,    )}```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;#### headersDictionary of request headers applicable for the operation, where the key isthe header name and the value can be either a string or a `Header` object.In the first case it is the header description. This affects the value ofthe [`parameters`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`description`](https://spec.openapis.org/oas/v3.1.0#parameter-object)field of Parameter object.In the second case it is `openapify.core.models.Header` object that can haveextended information about the header, such as a description, deprecationmarker, examples etc.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, str]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{&quot;X-Requested-With&quot;: &quot;Information about the creation of the request&quot;}```&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, Header]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;X-Requested-With&quot;: Header(        description=&quot;Information about the creation of the request&quot;,        required=True,        value_type=str,        deprecated=False,        allowEmptyValue=False,        example=&quot;XMLHttpRequest&quot;,    )}```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;#### cookiesDictionary of request cookies applicable for the operation, where the key isthe cookie name and the value can be either a string or a `Cookie` object.In the first case it is the cookie description. This affects the value ofthe [`parameters`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`description`](https://spec.openapis.org/oas/v3.1.0#parameter-object)field of Parameter object.In the second case it is `openapify.core.models.Cookie` object that can haveextended information about the cookie, such as a description, deprecationmarker, examples etc.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, str]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{&quot;__ga&quot;: &quot;A randomly generated number as a client ID&quot;}```&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, Cookie]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;__ga&quot;: Cookie(        description=&quot;A randomly generated number as a client ID&quot;,        required=True,        value_type=str,        deprecated=False,        allowEmptyValue=False,        example=&quot;1.2.345678901.2345678901&quot;,    )}```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;### ResponseDecorator `response_schema` describes a single response from the API Operation.Response can have an HTTP code, body and headers. If the Operation supportsmore than one response, then the decorator must be applied multiple times tocover each of them.```pythonfrom openapify import response_schema```#### bodyA Python data type for the response body for whichthe JSON Schema will be built. This affects the value ofthe [`responses`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`schema`](https://spec.openapis.org/oas/v3.1.0#media-type-object) field ofMedia Type object inside the valueof [`content`](https://spec.openapis.org/oas/v3.1.0#response-object) fieldof Response object.| Possible types | Examples ||----------------|----------|| `Type`         | `Book`   |#### http_codeAn HTTP code of the response. This affects the value ofthe [`responses`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely, the patterned key inthe [Responses](https://spec.openapis.org/oas/v3.1.0#responses-object) object.| Possible types | Examples ||----------------|----------|| `str`          | `&quot;200&quot;`  || `int`          | `400`    |#### media_typeA media typeor [media type range](https://www.rfc-editor.org/rfc/rfc7231#appendix-D) of theresponse body. This affects the value ofthe [`responses`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely, the keyof [`content`](https://spec.openapis.org/oas/v3.1.0#response-object) field ofResponse object.The default value is `&quot;application/json&quot;`.| Possible types | Examples            ||----------------|---------------------|| `str`          | `&quot;application/xml&quot;` |######## descriptionA description of the response. [CommonMark syntax](https://spec.commonmark.org)MAY be used for rich text representation. This affects the value ofthe [`responses`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`description`](https://spec.openapis.org/oas/v3.1.0#response-object) fieldof Response object.| Possible types | Examples                ||----------------|-------------------------|| `str`          | `&quot;Invalid ID Supplied&quot;` |#### headersDictionary of response headers applicable for the operation, where the key isthe header name and the value can be either a string or a `Header` object.In the first case it is the header description. This affects the value ofthe [`responses`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`description`](https://spec.openapis.org/oas/v3.1.0#header-object)field of Header object.In the second case it is `openapify.core.models.Header` object that can haveextended information about the header, such as a description, deprecationmarker, examples etc.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, str]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{&quot;Content-Location&quot;: &quot;An alternate location for the returned data&quot;}```&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, Header]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;Content-Location&quot;: Header(        description=&quot;An alternate location for the returned data&quot;,        example=&quot;/index.htm&quot;,    )}```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;#### exampleExample of the response body. The example object SHOULD be in the correct formatas specified by the media type. This affects the value ofthe [`responses`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`example`](https://spec.openapis.org/oas/v3.1.0#media-type-object) fieldof Media Type object inside the valueof [`content`](https://spec.openapis.org/oas/v3.1.0#response-object) field ofResponse object.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;title&quot;: &quot;Anna Karenina&quot;,    &quot;author&quot;: &quot;Leo Tolstoy&quot;,    &quot;year&quot;: 1877,}```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;#### examplesExamples of the response body. Each example object SHOULD match the media typeand specified schema if present. This affects the value ofthe [`responses`](https://spec.openapis.org/oas/v3.1.0#operation-object)field of the Operation object, or more precisely,the [`examples`](https://spec.openapis.org/oas/v3.1.0#media-type-object) fieldof Media Type object inside the valueof [`content`](https://spec.openapis.org/oas/v3.1.0#response-object) field ofResponse object.The values of this dictionary could be either examples themselves,or `openapify.core.openapi.models.Example` objects. In the latter case,extended information about examples, such as a summary and description, can beadded to the [Example](https://spec.openapis.org/oas/v3.1.0#example-object)object.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Possible types&lt;/th&gt;&lt;th&gt;Examples&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, Any]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;Anna Karenina&quot;: {        &quot;title&quot;: &quot;Anna Karenina&quot;,        &quot;author&quot;: &quot;Leo Tolstoy&quot;,        &quot;year&quot;: 1877,    }}```&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; &lt;code&gt;Mapping[str, Example]&lt;/code&gt; &lt;/td&gt;&lt;td&gt;```python{    &quot;Anna Karenina&quot;: Example(        value={            &quot;title&quot;: &quot;Anna Karenina&quot;,            &quot;author&quot;: &quot;Leo Tolstoy&quot;,            &quot;year&quot;: 1877,        },        summary=&quot;The book 'Anna Karenina'&quot;,    )}```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;### Security requirementsDecorator `security_requirements`declares [security mechanisms](https://spec.openapis.org/oas/v3.1.0#securityRequirementObject)that can be used for the operation.```pythonfrom openapify import security_requirements```This decorator takes one or more `SecurityRequirement` mappings, where the keyis the requirement name and the value is `SecurityScheme` object. There areclasses foreach [security scheme](https://spec.openapis.org/oas/v3.1.0#security-scheme-object)which can be imported as follows:```pythonfrom openapify.core.openapi.models import (    APIKeySecurityScheme,    HTTPSecurityScheme,    OAuth2SecurityScheme,    OpenIDConnectSecurityScheme,)```For example, to add authorization by token, you can write something like this:```pythonfrom openapify import security_requirementsfrom openapify.core.openapi.models import (    APIKeySecurityScheme,    SecuritySchemeAPIKeyLocation,)XAuthTokenSecurityRequirement = {    &quot;x-auth-token&quot;: APIKeySecurityScheme(        name=&quot;X-Auh-Token&quot;,        location=SecuritySchemeAPIKeyLocation.HEADER,    )}@security_requirements(XAuthTokenSecurityRequirement)def secure_operation():    ...```And the generated specification document will look like this:```yamlopenapi: 3.1.0info:  title: API  version: 1.0.0paths:  /secure_path:    get:      security:      - x-auth-token: []components:  securitySchemes:    x-auth-token:      type: apiKey      name: X-Auh-Token      location: header```Entity schema builders--------------------------------------------------------------------------------In some decorators you should pass Python data type for which the JSON Schemais being built by openapify in order to get the correct OpenAPI document.Out of the box, the schema is generated byusing [`mashumaro`](https://github.com/Fatal1ty/mashumaro) library, but supportfor third-party entity schema generators can be implemented through an apispecplugin. In the future, this chapter will contain recommendations for writingand using such plugins.</longdescription>
</pkgmetadata>