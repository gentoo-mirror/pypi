<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>l18n====|copyright| 2014-2021 Thomas KhynLocale internationalization package. Translations for places, timezones ...Tested with the latest minor versions of Python 2 and 3.Supported languages: English, French, German, Czech, Chinese(`want to add yours?`_)What is l18n?-------------As you may have noticed, ``l18n`` is a contraction of ``i18n`` and ``l10n``,namely 'internationalisation' and 'localization'. It basically provideslazy translations for names used for localization purposes (e.g. places andtimezones).I started writing ``l18n`` when I was looking for translations for the pytz_library. Indeed, on a multi-lingual site where users can select the timezonethey are in, it's much better if they can select in their language, as in somecases, the differences with the english name can be significant, hence theplace to look for it when it's sorted in alphabetical order.And as I am lazy, I thought of a way to - almost - automatically fetch thetranslations from the CLDR_ (Unicode's Common Locale Data Repository) database.Integrating function to link timezone to country codes, there was no reason notto try and provide translations also for the latter. In the near future, I -or contributors - may also add currencies or measurement units fetched fromthe CLDR database ...How does it work?-----------------To use ``l18n``, you first need to install it. It works well with ``pip``::   pip install l18nThen, in your code::   &gt;&gt;&gt; import l18n``l18n`` exposes several read-only dictionary-like objects:l18n.tz_cities   is a mapping between all the timezones listed in ``pytz.all_timezones``   and human-friendly **lazy** versions of the translated name of the city   in the current language (see `Selecting the language`_ below). For example,   if the language is English::      &gt;&gt;&gt; l18n.tz_cities['Pacific/Easter']      L18NLazyString &lt;Easter Island&gt;      &gt;&gt;&gt; str(l18n.tz_cities['Pacific/Easter'])      'Easter Island'   In French, it would give::      &gt;&gt;&gt; str(l18n.tz_cities['Pacific/Easter'])      'Île de Pâques'l18n.tz_fullnames   is a mapping between all the timezones listed in ``pytz.all_timezones``   and **lazy** versions of the timezones' full names in the current language.   For example::      &gt;&gt;&gt; str(l18n.tz_fullnames['Pacific/Easter'])      'Pacific/Easter Island'  # or 'Pacifique/Île de Pâques' in French   It is interesting to note that for 3-components timezone names where the   local state or territory appears in the city name, ``l18n`` cleverly strips   this information so that it is not repeated::      &gt;&gt;&gt; str(l18n.tz_fullnames['America/North_Dakota/New_Salem'])      'America/North Dakota/New Salem'   indeed::      &gt;&gt;&gt; str(l18n.tz_cities['America/North_Dakota/New_salem'])      'New Salem, North Dakota'l18n.territories   is a mapping between the territory codes as defined in the CLDR_ and their   localized names, lazily defined. For example::      &gt;&gt;&gt; str(l18n.territories['CZ'])      'Czech Republic'  # or 'République Tchèque' in French.. note::   The values are translated each time they are evaluated, there is no caching.   This means that the same L18NLazyString / L18NLazyStringsList instance can   be used and produce 2 different outputs if you change the language between   the evaluations... note::   The values in the above mentionned dictionaries can be overriden by your   own translations. The dictionaries are not read-only and values can be   added or removed at your convenience.Lazy mappings special features (v.2016.6.3 onwards)---------------------------------------------------The fore-mentioned ``tz_cities``, ``tz_fullnames`` and ``territories`` are notsimple dictionaries and provide additional features.Sorting.......When iterating over an ``L18NMap``, the items, keys or values are *yielded* inalphabetical order **in the currently selected language**. For performance, theresults are cached by language, so the sort is only performed once per language.Note that the values are still lazy objects that are evaluated only whenrendered into a string.Subsets.......It is possible to generate a new ``L18NMap`` from an existing one by using the``subset`` method and passing an iterable of ``keys`` that need to be kept inthe new mapping. Any cached sort is also used to generate the new cache, sothat there is nothing to re-calculate in the new subset.For example, one can generate a map of translations for``pytz.common_timezones``::   &gt;&gt;&gt; common_cities = l18n.tz_cities.subset(pytz.common_timezones.keys())Selecting the language----------------------By default, when importing ``l18n``, the current default locale is used (via``locale.getdefaultlocale()``). If it is not the one you want or if you need tochange it, it is rather easy::   &gt;&gt;&gt; l18n.set_language('en')   &gt;&gt;&gt; str(l18n.tz_cities['Pacific/Easter'])   'Easter Island'   &gt;&gt;&gt; l18n.set_language('fr')   &gt;&gt;&gt; str(l18n.tz_cities['Pacific/Easter'])   'Île de Pâques'And in case you want to disable translation and use raw default strings::   &gt;&gt;&gt; l18n.set_language(None)Utilities---------``l18n`` also exposes a few functions that may be helpful in some cases:``l18n.utils.get_country_tzs(country_code)``   returns a list of locations for the given country code, sorted in   alphabetical order in the currently selected language``l18n.utils.get_country_code_from_tz(timezone)``   returns the country code from a given (untranslated) timezoneVersionning-----------``l18n``'s main version number matches ``pytz``'s version number. ``l18n``2014.10.X will be fully compatible with ``pytz`` 2014.10 whatever the value ofX. Indeed, the primary aim is to keep ``l18n``'s translation files consistentwith ``pytz``'s timezone names.Before ``l18n`` 2016.6, the ``pytz`` version was pinned against the ``l18n``version. Now, ``l18n`` YEAR.MONTH can now be used with any subsequent ``pytz``version. However, note that there may be missing translations if the 2 versionsare too different from each other. In that case, open an issue_ to request anew version of ``l18n`` to be published... _`want to add yours?`:Want to add a language?-----------------------Great idea !! Have a look at CONTRIBUTE.rst_.Roadmap-------- Add supported languages- Add currencies and other stuff.. |copyright| unicode:: 0xA9.. _pytz: https://pypi.python.org/pypi/pytz/.. _CLDR: http://cldr.unicode.org/.. _CONTRIBUTE.rst: https://github.com/tkhyn/l18n/src/tip/CONTRIBUTE.rst.. _issue: https://github.com/tkhyn/l18n/issues/new</longdescription>
</pkgmetadata>