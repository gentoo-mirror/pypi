<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://github.com/jsbronder/asyncio-dgram/workflows/ci/badge.svg)](https://github.com/jsbronder/asyncio-dgram/actions)# Higher level Datagram support for AsyncioSimple wrappers that allow you to `await read()` from datagrams as suggestedby Guido van Rossum[here](https://github.com/python/asyncio/pull/321#issuecomment-187022351).  Ifrequently found myself having to inherit from `asyncio.DatagramProtocol` andimplement this over and over.# DesignThe goal of this package is to make implementing common patterns that use datagramssimple and straight-forward while still supporting more esoteric options.  This is doneby taking an opinionated stance on the API that differs from parts of asyncio.  For instance,rather than exposing a function like[create\_datagram\_endpoint](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_datagram_endpoint)which supports many use-cases and has conflicting parameters, `asyncio_dgram`only provides three functions for creating a stream:- `connect((host, port))`: Creates a datagram endpoint which can only  communicate with the endpoint it connected to.- `bind((host, port))`: Creates a datagram endpoint that can communicate  with anyone, but must specified the destination address every time it  sends.- `from_socket(sock)`: If the above two functions are not sufficient, then  `asyncio_dgram` simply lets the caller setup the socket as they see fit.# Example UDP echo client and serverFollowing the example of asyncio documentation, here's what a UDP echo clientand server would look like.```pythonimport asyncioimport asyncio_dgramasync def udp_echo_client():    stream = await asyncio_dgram.connect((&quot;127.0.0.1&quot;, 8888))    await stream.send(b&quot;Hello World!&quot;)    data, remote_addr = await stream.recv()    print(f&quot;Client received: {data.decode()!r}&quot;)    stream.close()async def udp_echo_server():    stream = await asyncio_dgram.bind((&quot;127.0.0.1&quot;, 8888))    print(f&quot;Serving on {stream.sockname}&quot;)    data, remote_addr = await stream.recv()    print(f&quot;Echoing {data.decode()!r}&quot;)    await stream.send(data, remote_addr)    await asyncio.sleep(0.5)    print(f&quot;Shutting down server&quot;)def main():    loop = asyncio.get_event_loop()    loop.run_until_complete(asyncio.gather(udp_echo_server(), udp_echo_client()))if __name__ == &quot;__main__&quot;:    main()```</longdescription>
</pkgmetadata>