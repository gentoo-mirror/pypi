<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============================= Polyfill for Flake8 Plugins=============================``flake8-polyfill`` is a package that provides some compatibility helpers forFlake8 plugins that intend to support Flake8 2.x and 3.x simultaneously.Installation============.. code-block:: bash    pip install flake8-polyfillUsage=====Option Handling---------------One problem area with compatibility with Flake8 2.x and 3.x is the registeringoptions and receiving the parsed values.Flake8 3.0 added extra parameters to the ``add_option`` method which don'thave the same effect on Flake8 2.x. To accomodate the change, this polyfillmodule allows you to do:.. code-block:: python    from flake8_polyfill import options    class MyFlake8Plugin(object):        @classmethod        def add_options(cls, parser):            options.register(parser, '--my-long-option-name',                             parse_from_config=True,                             comma_separated_list=True,                             default='...',                             help='...')            options.register(parser, '-m', '--my-other-long-option-name',                             parse_from_config=True,                             normalize_paths=True,                             default='...',                             help='...')        @classmethod        def parse_options(cls, values):            cls.my_long_option_name = values.my_long_option_name            cls.my_other_long_option_name = values.my_other_long_option_nameAnd have the code work the same way on both versions.Retrieving Standard In----------------------Until Flake8 2.6, getting the code on standard in from a plugin has beensimple:.. code-block:: python    import pep8    stdin = pep8.get_stdin_value()In 2.6 you now have to know whether to use ``pep8`` or ``pycodestyle`` sinceFlake8 2.6 made a hard change to ``pycodestyle``.The reason you need to know which module to use is because standard in can beexhausted and Flake8 does some work to cache the value so that call alwaysreturns the desired data.In 3.0, Flake8 no longer monkey-patches those modules.To accommodate this, this package provides:.. code-block:: python    from flake8_polyfill import stdin    stdin.monkey_patch('all')    stdin.monkey_patch('pep8')    stdin.monkey_patch('pycodestyle')This allows you to have the polyfill module monkey-patch what you want so itis always monkey-patched. It will also do so in an intelligent way.Version Comparison------------------Flake8 2.x did not include an object that would allow for easy versioncomparison. Flake8 3.0, however, added a ``__version_info__`` attribute. Forconsistency, Flake8 Polyfill will turn 2.x's version string into a tuplesuitable for comparison... code-block:: python    from flake8_polyfill import version    if (2, 4) &lt;= version.version_info &lt; (2, 6):        # ...    elif (2, 6) &lt;= version.version_info &lt; (3, 0):        # ...    elif (3, 0) &lt;= version.version_info &lt; (4, 0):        # ...License=======MITCreator=======Ian Cordasco</longdescription>
</pkgmetadata>