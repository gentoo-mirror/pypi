<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># prefect-snowflake&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;https://user-images.githubusercontent.com/15331990/217983397-036ddfd1-22c4-4113-8045-d5d9e43b963c.png&quot;&gt;    &lt;br&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/prefect-snowflake/&quot; alt=&quot;PyPI version&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/prefect-snowflake?color=0052FF&amp;labelColor=090422&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/PrefectHQ/prefect-snowflake/&quot; alt=&quot;Stars&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/stars/PrefectHQ/prefect-snowflake?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/badge/prefect-snowflake/&quot; alt=&quot;Downloads&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/dm/prefect-snowflake?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/PrefectHQ/prefect-snowflake/pulse&quot; alt=&quot;Activity&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/PrefectHQ/prefect-snowflake?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;https://prefect-community.slack.com&quot; alt=&quot;Slack&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/slack-join_community-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=slack&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://discourse.prefect.io/&quot; alt=&quot;Discourse&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=discourse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;Visit the full docs [here](https://PrefectHQ.github.io/prefect-snowflake) to see additional examples and the API reference.## Welcome!The prefect-snowflake collection makes it easy to connect to a Snowflake database in your Prefect flows. Check out the examples below to get started!## Getting Started### Integrate with Prefect flowsPrefect works with Snowflake by providing dataflow automation for faster, more efficient data pipeline creation, execution, and monitoring.This results in reduced errors, increased confidence in your data, and ultimately, faster insights.To set up a table, use the `execute` and `execute_many` methods. Then, use the `fetch_many` method to retrieve data in a stream until there's no more data.By using the `SnowflakeConnector` as a context manager, you can make sure that the Snowflake connection and cursors are closed properly after you're done with them.Be sure to install [prefect-snowflake](#installation) and [save to block](#saving-credentials-to-block) to run the examples below!=== &quot;Sync&quot;```pythonfrom prefect import flow, taskfrom prefect_snowflake import SnowflakeConnector@taskdef setup_table(block_name: str) -&gt; None:    with SnowflakeConnector.load(block_name) as connector:        connector.execute(            &quot;CREATE TABLE IF NOT EXISTS customers (name varchar, address varchar);&quot;        )        connector.execute_many(            &quot;INSERT INTO customers (name, address) VALUES (%(name)s, %(address)s);&quot;,            seq_of_parameters=[                {&quot;name&quot;: &quot;Ford&quot;, &quot;address&quot;: &quot;Highway 42&quot;},                {&quot;name&quot;: &quot;Unknown&quot;, &quot;address&quot;: &quot;Space&quot;},                {&quot;name&quot;: &quot;Me&quot;, &quot;address&quot;: &quot;Myway 88&quot;},            ],        )@taskdef fetch_data(block_name: str) -&gt; list:    all_rows = []    with SnowflakeConnector.load(block_name) as connector:        while True:            # Repeated fetch* calls using the same operation will            # skip re-executing and instead return the next set of results            new_rows = connector.fetch_many(&quot;SELECT * FROM customers&quot;, size=2)            if len(new_rows) == 0:                break            all_rows.append(new_rows)    return all_rows@flowdef snowflake_flow(block_name: str) -&gt; list:    setup_table(block_name)    all_rows = fetch_data(block_name)    return all_rowssnowflake_flow()```=== &quot;Async&quot;```pythonfrom prefect import flow, taskfrom prefect_snowflake import SnowflakeConnectorimport asyncio@taskasync def setup_table(block_name: str) -&gt; None:    with await SnowflakeConnector.load(block_name) as connector:        await connector.execute(            &quot;CREATE TABLE IF NOT EXISTS customers (name varchar, address varchar);&quot;        )        await connector.execute_many(            &quot;INSERT INTO customers (name, address) VALUES (%(name)s, %(address)s);&quot;,            seq_of_parameters=[                {&quot;name&quot;: &quot;Ford&quot;, &quot;address&quot;: &quot;Highway 42&quot;},                {&quot;name&quot;: &quot;Unknown&quot;, &quot;address&quot;: &quot;Space&quot;},                {&quot;name&quot;: &quot;Me&quot;, &quot;address&quot;: &quot;Myway 88&quot;},            ],        )@taskasync def fetch_data(block_name: str) -&gt; list:    all_rows = []    with await SnowflakeConnector.load(block_name) as connector:        while True:            # Repeated fetch* calls using the same operation will            # skip re-executing and instead return the next set of results            new_rows = await connector.fetch_many(&quot;SELECT * FROM customers&quot;, size=2)            if len(new_rows) == 0:                break            all_rows.append(new_rows)    return all_rows@flowasync def snowflake_flow(block_name: str) -&gt; list:    await setup_table(block_name)    all_rows = await fetch_data(block_name)    return all_rowsasyncio.run(snowflake_flow(&quot;example&quot;))```### Access underlying Snowflake connectionIf the native methods of the block don't meet your requirements, don't worry.You have the option to access the underlying Snowflake connection and utilize its built-in methods as well.```pythonimport pandas as pdfrom prefect import flowfrom prefect_snowflake.database import SnowflakeConnectorfrom snowflake.connector.pandas_tools import write_pandas@flowdef snowflake_write_pandas_flow():    connector = SnowflakeConnector.load(&quot;my-block&quot;)    with connector.get_connection() as connection:        table_name = &quot;TABLE_NAME&quot;        ddl = &quot;NAME STRING, NUMBER INT&quot;        statement = f'CREATE TABLE IF NOT EXISTS {table_name} ({ddl})'        with connection.cursor() as cursor:            cursor.execute(statement)        # case sensitivity matters here!        df = pd.DataFrame([('Marvin', 42), ('Ford', 88)], columns=['NAME', 'NUMBER'])        success, num_chunks, num_rows, _ = write_pandas(            conn=connection,            df=df,            table_name=table_name,            database=snowflake_connector.database,            schema=snowflake_connector.schema_  # note the &quot;_&quot; suffix        )```## ResourcesFor more tips on how to use tasks and flows in a Collection, check out [Using Collections](https://orion-docs.prefect.io/collections/usage/)!### InstallationInstall `prefect-snowflake` with `pip`:```bashpip install prefect-snowflake```A list of available blocks in `prefect-snowflake` and their setup instructions can be found [here](https://PrefectHQ.github.io/prefect-snowflake/blocks_catalog).Requires an installation of Python 3.7+.We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).### Saving credentials to blockNote, to use the `load` method on Blocks, you must already have a block document [saved through code](https://orion-docs.prefect.io/concepts/blocks/#saving-blocks) or [saved through the UI](https://orion-docs.prefect.io/ui/blocks/).Below is a walkthrough on saving a `SnowflakeCredentials` block through code.1. Head over to https://app.snowflake.com/.2. Login to your Snowflake account, e.g. nh12345.us-east-2.aws, with your username and password.3. Use those credentials to fill replace the placeholders below.```pythonfrom prefect_snowflake import SnowflakeCredentialscredentials = SnowflakeCredentials(    account=&quot;ACCOUNT-PLACEHOLDER&quot;,  # resembles nh12345.us-east-2.aws    user=&quot;USER-PLACEHOLDER&quot;,    password=&quot;PASSWORD-PLACEHOLDER&quot;)credentials.save(&quot;CREDENTIALS-BLOCK-NAME-PLACEHOLDER&quot;)```Then, to create a `SnowflakeConnector` block:1. After logging in, click on any worksheet.2. On the left side, select a database and schema.3. On the top right, select a warehouse.3. Create a short script, replacing the placeholders below.```pythonfrom prefect_snowflake import SnowflakeCredentials, SnowflakeConnectorcredentials = SnowflakeCredentials.load(&quot;CREDENTIALS-BLOCK-NAME-PLACEHOLDER&quot;)connector = SnowflakeConnector(    credentials=credentials,    database=&quot;DATABASE-PLACEHOLDER&quot;,    schema=&quot;SCHEMA-PLACEHOLDER&quot;,    warehouse=&quot;COMPUTE_WH&quot;,)connector.save(&quot;CONNECTOR-BLOCK-NAME-PLACEHOLDER&quot;)```Congrats! You can now easily load the saved block, which holds your credentials and connection info:```pythonfrom prefect_snowflake import SnowflakeCredentials, SnowflakeConnectorSnowflakeCredentials.load(&quot;CREDENTIALS-BLOCK-NAME-PLACEHOLDER&quot;)SnowflakeConnector.load(&quot;CONNECTOR-BLOCK-NAME-PLACEHOLDER&quot;)```!!! info &quot;Registering blocks&quot;Register blocks in this module to[view and edit them](https://orion-docs.prefect.io/ui/blocks/)on Prefect Cloud:```bashprefect block register -m prefect_snowflake```A list of available blocks in `prefect-snowflake` and their setup instructions can be found [here](https://PrefectHQ.github.io/prefect-snowflake/blocks_catalog).### FeedbackIf you encounter any bugs while using `prefect-snowflake`, feel free to open an issue in the [prefect-snowflake](https://github.com/PrefectHQ/prefect-snowflake) repository.If you have any questions or issues while using `prefect-snowflake`, you can find help in either the [Prefect Discourse forum](https://discourse.prefect.io/) or the [Prefect Slack community](https://prefect.io/slack).Feel free to star or watch [`prefect-snowflake`](https://github.com/PrefectHQ/prefect-snowflake) for updates too!### ContributingIf you'd like to help contribute to fix an issue or add a feature to `prefect-snowflake`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).Here are the steps:1. [Fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)2. [Clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)3. Install the repository and its dependencies:```pip install -e &quot;.[dev]&quot;```4. Make desired changes5. Add tests6. Insert an entry to [CHANGELOG.md](https://github.com/PrefectHQ/prefect-snowflake/blob/main/CHANGELOG.md)7. Install `pre-commit` to perform quality checks prior to commit:```pre-commit install```8. `git commit`, `git push`, and create a pull request</longdescription>
</pkgmetadata>