<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fastapi-eventsAn event dispatching/handling library for FastAPI, and Starlette.[![](https://github.com/melvinkcx/fastapi-events/actions/workflows/tests.yml/badge.svg?branch=dev&amp;event=push)](https://github.com/melvinkcx/fastapi-events/actions/workflows/tests.yml)![PyPI - Downloads](https://img.shields.io/pypi/dw/fastapi-events)Features:* straightforward API to emit events anywhere in your code* events are handled after responses are returned (doesn't affect response time)* supports event piping to remote queues* powerful built-in handlers to handle events locally and remotely* coroutine functions (`async def`) are the first-class citizen* write your handlers, never be limited to just what `fastapi_events` provides* (__&gt;=0.3.0__) supports event payload validation via Pydantic (See [here](#event-payload-validation-with-pydantic))* (__&gt;=0.4.0__) supports event chaining: dispatching events within handlers (thank [@ndopj](https://github.com/ndopj)  for contributing to the idea)* (__&gt;=0.7.0__) supports OpenTelemetry: see [this section](#opentelemetry-otel-support) for details* (__&gt;=0.9.0__) supports dependencies in local handlers: see [this section](#using-dependencies-in-local-handler) for details* (__&gt;=0.9.1__) supports Pydantic v2If you use or like this project, please consider giving it a star so it can reach more developers. Thanks =)## Installation```shellpip install fastapi-events```To use it with AWS handlers, install:```shellpip install fastapi-events[aws]```To use it with GCP handlers. install:```shellpip install fastapi-events[google]```To enable OpenTelemetry (OTEL) support, install:```shellpip install fastapi-events[otel]```# Usage`fastapi-events` supports both FastAPI and Starlette. To use it, simply configure it as middleware.* Configuring `fastapi-events` for FastAPI:    ```python    from fastapi import FastAPI    from fastapi.requests import Request    from fastapi.responses import JSONResponse      from fastapi_events.dispatcher import dispatch    from fastapi_events.middleware import EventHandlerASGIMiddleware    from fastapi_events.handlers.local import local_handler        app = FastAPI()    app.add_middleware(EventHandlerASGIMiddleware,                        handlers=[local_handler])   # registering handler(s)            @app.get(&quot;/&quot;)    def index(request: Request) -&gt; JSONResponse:        dispatch(&quot;my-fancy-event&quot;, payload={&quot;id&quot;: 1})  # Emit events anywhere in your code        return JSONResponse()        ```* Configuring `fastapi-events` for Starlette:  ```python  from starlette.applications import Starlette  from starlette.middleware import Middleware  from starlette.requests import Request  from starlette.responses import JSONResponse    from fastapi_events.dispatcher import dispatch  from fastapi_events.handlers.local import local_handler  from fastapi_events.middleware import EventHandlerASGIMiddleware    app = Starlette(middleware=[      Middleware(EventHandlerASGIMiddleware,                 handlers=[local_handler])  # registering handlers  ])    @app.route(&quot;/&quot;)  async def root(request: Request) -&gt; JSONResponse:      dispatch(&quot;new event&quot;, payload={&quot;id&quot;: 1})   # Emit events anywhere in your code      return JSONResponse()  ```* Configuring `fastapi-events` for Starlite:  ```python  from starlite.app import Starlite  from starlite.enums import MediaType  from starlite.handlers import get  from starlite.middleware import DefineMiddleware    from fastapi_events.dispatcher import dispatch  from fastapi_events.handlers.local import local_handler  from fastapi_events.middleware import EventHandlerASGIMiddleware    @get(path=&quot;/&quot;, media_type=MediaType.TEXT)  async def root() -&gt; str:      dispatch(&quot;new event&quot;, payload={&quot;id&quot;: 1})   # Emit events anywhere in your code      return &quot;OK&quot;  app = Starlite(middleware=[      DefineMiddleware(EventHandlerASGIMiddleware,                 handlers=[local_handler])  # registering handlers      ],      route_handlers=[root],    )  ```## Dispatching eventsEvents can be dispatched anywhere in the code, as long as they are dispatched before a response is made.```python# anywhere in codefrom fastapi_events.dispatcher import dispatchdispatch(    &quot;cat-requested-a-fish&quot;,  # Event name, accepts any valid string    payload={&quot;cat_id&quot;: &quot;fd375d23-b0c9-4271-a9e0-e028c4cd7230&quot;}  # Event payload, accepts any arbitrary data)dispatch(&quot;a_cat_is_spotted&quot;)  # This works too!```### Event Payload Validation With PydanticEvent payload validation is possible since version 0.3.0. To enable, simply registera [Pydantic models](https://pydantic-docs.helpmanual.io/usage/models/) with the corresponding event name.```pythonimport uuidfrom enum import Enumfrom datetime import datetimefrom pydantic import BaseModelfrom fastapi_events.registry.payload_schema import registry as payload_schemaclass UserEvents(Enum):    SIGNED_UP = &quot;USER_SIGNED_UP&quot;    ACTIVATED = &quot;USER_ACTIVATED&quot;# Registering your event payload schema@payload_schema.register(event_name=UserEvents.SIGNED_UP)class SignUpPayload(BaseModel):    user_id: uuid.UUID    created_at: datetime```&gt; Wildcard in event name is currently not supportedPayload will be validated automatically without any changes made while invoking the dispatcher.```python# Events with payload schema registereddispatch(UserEvents.SIGNED_UP)  # raises ValidationError, missing payloaddispatch(UserEvents.SIGNED_UP,         {&quot;user_id&quot;: &quot;9e79cdbb-b216-40f7-9a05-20d223dee89a&quot;})  # raises ValidationError, missing `created_at`dispatch(UserEvents.SIGNED_UP,         {&quot;user_id&quot;: &quot;9e79cdbb-b216-40f7-9a05-20d223dee89a&quot;, created_at: datetime.utcnow()})  # OK!# Events without payload schema -&gt; No validation will be performeddispatch(UserEvents.ACTIVATED,         {&quot;user_id&quot;: &quot;9e79cdbb-b216-40f7-9a05-20d223dee89a&quot;})  # OK! no validation will be performed```&gt; Reminder: payload validation is optional.&gt; Payload of events without its schema registered will not be validated.## Handling Events### Handle events locallyThe flexibility of `fastapi-events` allows us to customise how the events should be handled. For starters, you mightwant to handle your events locally.```python# ex: in handlers.pyfrom fastapi_events.handlers.local import local_handlerfrom fastapi_events.typing import Event@local_handler.register(event_name=&quot;cat*&quot;)def handle_all_cat_events(event: Event):    &quot;&quot;&quot;    this handler will match with an events prefixed with `cat`.    ex: &quot;cat_eats_a_fish&quot;, &quot;cat_is_cute&quot;, etc    &quot;&quot;&quot;    # the `event` argument is nothing more than a tuple of event name and payload    event_name, payload = event    # TODO do anything you'd like with the event@local_handler.register(event_name=&quot;cat*&quot;)  # Tip: You can register several handlers with the same event namedef handle_all_cat_events_another_way(event: Event):    pass@local_handler.register(event_name=&quot;*&quot;)async def handle_all_events(event: Event):    # event handlers can be coroutine function too (`async def`)    pass```#### Using Dependencies in Local Handler&gt; new feature in fastapi-events&gt;=0.9.0Dependencies can now be used with local handler. Sub-dependencies are also supported.However, dependencies using generator (with `yield` keyword) is not supported yet. I have the intention to support it in the future.```python# ex: in handlers.pyfrom fastapi import Dependsfrom fastapi_events.handlers.local import local_handlerfrom fastapi_events.typing import Eventasync def get_db_conn():    pass    # return a DB connasync def get_db_session(    db_conn=Depends(get_db_conn)):    pass    # return a DB session created from `db_conn`@local_handler.register(event_name=&quot;*&quot;)async def handle_all_events(    event: Event,     db_session=Depends(get_db_session)):    # use the `db_session` here    pass```### Piping Events To Remote QueuesFor larger projects, you might have services dedicated to handling events separately.For instance, `fastapi-events` comes with AWS SQS forwarder to forward events to a remote queue.1. Register `SQSForwardHandler` as handlers:    ```python    app = FastAPI()    app.add_middleware(EventHandlerASGIMiddleware,                        handlers=[SQSForwardHandler(queue_url=&quot;test-queue&quot;,                                                   region_name=&quot;eu-central-1&quot;)])   # registering handler(s)    ```2. Start dispatching events! Events will be serialised into JSON format by default:    ```python    [&quot;event name&quot;, {&quot;payload&quot;: &quot;here is the payload&quot;}]    ```&gt; Tip: to pipe events to multiple queues, provide multiple handlers while adding `EventHandlerASGIMiddleware`.# Built-in handlersHere is a list of built-in event handlers:* `LocalHandler` / `local_handler`:    * import from `fastapi_events.handlers.local`    * for handling events locally. See examples [above](#handle-events-locally)    * event name pattern matching is done using Unix shell-style matching (`fnmatch`)* `SQSForwardHandler`:    * import from `fastapi_events.handlers.aws`    * to forward events to an AWS SQS queue* `EchoHandler`:    * import from `fastapi_events.handlers.echo`    * to forward events to stdout with `pprint`. Great for debugging purpose* `GoogleCloudSimplePubSubHandler`:    * import from `fastapi_events.handlers.gcp`    * to publish events to a single pubsub topic# Creating your own handlerCreating your own handler is nothing more than inheriting from the `BaseEventHandler` classin `fastapi_events.handlers.base`.To handle events, `fastapi_events` calls one of these methods, in the following priority order:1. `handle_many(events)`:   The coroutine function should expect the backlog of the events collected.2. `handle(event)`:   In cases where `handle_many()` weren't defined in your custom handler, `handle()`   will be called by iterating through the events in the backlog.```pythonfrom typing import Iterablefrom fastapi_events.typing import Eventfrom fastapi_events.handlers.base import BaseEventHandlerclass MyOwnEventHandler(BaseEventHandler):    async def handle(self, event: Event) -&gt; None:        &quot;&quot;&quot;        Handle events one by one        &quot;&quot;&quot;        pass    async def handle_many(self, events: Iterable[Event]) -&gt; None:        &quot;&quot;&quot;        Handle events by batch        &quot;&quot;&quot;        pass```# OpenTelemetry (OTEL) supportSince version 0.7.0, OpenTelemetry support has been added as an optional feature.To enable it, make sure you install the optional modules:```shellpip install fastapi-events[otel]```&gt; Note that no instrumentation library is needed as fastapi_events supports OTEL nativelySpans will be created when:* `fastapi_events.dispatcher.dispatch` is invoked,* `fastapi_events.handlers.local.LocalHandler` is handling an eventSupport for other handlers will be added in the future.# Cookbook## 1) Suppressing Events / Disabling `dispatch()` GloballyIn case you want to suppress events globally especially during testing, you can do so without having to mock or patchthe `dispatch()` function. Simple set the environment variable `FASTAPI_EVENTS_DISABLE_DISPATCH` to `1`, `True` or anytruthy values.## 2) Validating Event Payload During Dispatch&gt; Requires Pydantic, which comes with FastAPI.&gt; If you're using Starlette, you might need to install PydanticSee [Event Payload Validation With Pydantic](#event-payload-validation-with-pydantic)## 3) Dispatching events within handlers (Event Chaining)It is now possible to dispatch events within another event handlers. You'll need version 0.4 or above.Comparison between events dispatched within the request-response cycle and event handlers are:|                                                                 | dispatched within request-response cycle         | dispatched within event handlers                        ||-----------------------------------------------------------------|--------------------------------------------------|---------------------------------------------------------|| processing of events                                            | will be handled after the response has been made | will be scheduled to the running event loop immediately || order of processing                                             | always after the response is made                | not guaranteed                                          || supports payload schema validation with Pydantic                | Yes                                              | Yes                                                     || can be disabled globally with `FASTAPI_EVENTS_DISABLE_DISPATCH` | Yes                                              | Yes                                                     |## 4) Dispatching events outside of a requestOne goal of `fastapi-events` is to dispatch events without having to manage which instanceof `EventHandlerASGIMiddleware` is being targeted. By default, this is handled using `ContextVars`. There are occasionswhen a user may want to dispatch events outside of the standard request sequence though. This can be accomplished bygenerating a custom identifier for the middleware.By default, the middleware identifier is generated from the object id of the `EventHandlerASGIMiddleware` instance andis managed internally without need for user intervention. If the user needs to dispatch events outside of arequest-response lifecycle, a custom `middleware_id` value can be generated and passed to `EventHandlerASGIMiddleware`during its creation. This value can then be used with `dispatch()` to ensure the correct `EventHandlerASGIMiddleware`instance is selected.Dispatching events during a request does ***not*** require the `middleware_id`. These will continue to automaticallydiscover the event handler.In the following example, the id is being generated using the object id of the `FastAPI` instance. The middlewareidentifier must be unique `int` but there are no other restrictions.```pythonimport asynciofrom fastapi import FastAPIfrom fastapi.requests import Requestfrom fastapi.responses import JSONResponsefrom fastapi_events.dispatcher import dispatchfrom fastapi_events.middleware import EventHandlerASGIMiddlewarefrom fastapi_events.handlers.local import local_handlerapp = FastAPI()event_handler_id: int = id(app)app.add_middleware(EventHandlerASGIMiddleware,                   handlers=[local_handler],  # registering handler(s)                   middleware_id=event_handler_id)  # register custom middleware idasync def dispatch_task() -&gt; None:    &quot;&quot;&quot; background task to dispatch autonomous events &quot;&quot;&quot;    for i in range(100):        # without the middleware_id, this call would raise a LookupError        dispatch(&quot;date&quot;, payload={&quot;idx&quot;: i}, middleware_id=event_handler_id)        await asyncio.sleep(1)@app.on_event(&quot;startup&quot;)async def startup_event() -&gt; None:    asyncio.create_task(dispatch_task())@app.get(&quot;/&quot;)def index(request: Request) -&gt; JSONResponse:    dispatch(&quot;hello&quot;, payload={&quot;id&quot;: 1})  # Emit events anywhere in your code    return JSONResponse({&quot;detail&quot;: {&quot;msg&quot;: &quot;hello world&quot;}})```# FAQs:1. I'm getting `LookupError` when `dispatch()` is used:    ```bash        def dispatch(event_name: str, payload: Optional[Any] = None) -&gt; None:    &gt;       q: Deque[Event] = event_store.get()    E       LookupError: &lt;ContextVar name='fastapi_context' at 0x400a1f12b0&gt;    ```   Answer:   `dispatch()` relies on [ContextVars](https://docs.python.org/3/library/contextvars.html) to work properly. There are   many reasons why `LookupError` can occur. A common reason is `dispatch()` is called outside the request-response   lifecycle of FastAPI/Starlette, such as calling `dispatch()` after a response has been returned.   [This can be worked around by using a user-defined middleware_id.](#4-dispatching-events-outside-of-a-request)   If you're getting this during testing, you may consider disabling `dispatch()` during testing.   See [Suppressing Events / Disabling `dispatch()` Globally](#suppressing-events--disabling-dispatch-globally) for   details.2. My event handlers are not registered / Local handlers are not being executed:   Answer:   Make sure the module where your local event handlers are defined is loaded during runtime. A simple fix is to import   the module in your `__init__.py`. This will ensure the modules are properly loaded during runtime.# Feedback, Questions?Any form of feedback and questions are welcome! Please create anissue [here](https://github.com/melvinkcx/fastapi-events/issues/new).</longdescription>
</pkgmetadata>