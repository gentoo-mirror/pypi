<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># abmatrix[![Upload Python Package](https://github.com/wisdomhealth-inc/abmatrix/actions/workflows/python-publish.yml/badge.svg)](https://github.com/wisdomhealth-inc/abmatrix/actions/workflows/python-publish.yml)  [![Test subset](https://github.com/wisdomhealth-inc/abmatrix/actions/workflows/test_subset.yml/badge.svg)](https://github.com/wisdomhealth-inc/abmatrix/actions/workflows/test_subset.yml)  [![Test extraction](https://github.com/wisdomhealth-inc/abmatrix/actions/workflows/test_extraction.yml/badge.svg)](https://github.com/wisdomhealth-inc/abmatrix/actions/workflows/test_extraction.yml)Python3 module defining a class called `abmatrix` to read and parse AB Matrix files## Module contents```pythonabmatrix.abmatrix()```Initialize a new, empty instance of the `abmatrix` class**Returns**: Initialized instance of the `abmatrix` class.---```pythonabmatrix.abmatrix.read(filename)```Read an AB Matrix file, read header and lazy load genotype data. The input AB Matrix file can be compressed in `zip` format. _Coming soon_: Can read input file from S3 cloud object storage.| Parameter | Type | Required | Description || --------- | ---- | -------- | ----------- || `filename` | str | Yes | Path to input AB Matrix file |**Returns**:None---```pythonabmatrix.abmatrix.header()```Return header metadata**Returns**:Dictionary containing AB Matrix header metadata---```pythonabmatrix.abmatrix.write(filename, genotypes)```Write an AB Matrix file from in-memory instance of class. The `write` method only writes uncompressed text, support for both zip output and writing to S3 cloud object storage are coming soon.| Parameter | Type | Required | Description || --------- | ---- | -------- | ----------- || `filename` | str | Yes | Path to output AB Matrix file || `genotypes` | str | Yes | The genotype matrix to write |**Returns**:None---```pythonabmatrix.abmatrix.subset(locus_list, samples=sample_list)```Get subset of AB Matrix data set. If a requested locus or sample ID is not present in the AB Matrix file, then the locus and/or sample is still included, it is just marked as a missing genotype.| Parameter | Type | Required | Description || --------- | ---- | -------- | ----------- || `locus_list` | str | Yes | List of locus IDs to subset || `sample_list` | str | No | List of sample IDs to subset |**Returns**:Genotype matrix as list of dictionaries.---```pythonabmatrix.abmatrix.close()```Close instance of abmatrix data set**Returns**:None---## Example```pythonfrom abmatrix import abmatrix# Initializemyabmatrix = abmatrix.abmatrix()myabmatrix.read(&quot;test_abmatrix.zip&quot;)SNP_IDS = [    &quot;442_HPS3&quot;,    &quot;054_FGF4_chr12&quot;,    &quot;077_TYRP_LH&quot;,    &quot;077_TYRP1_SH&quot;,    &quot;441_USH2A_roan&quot;,    &quot;277_MC1R_cockersable_Eh&quot;,]genotypes = myabmatrix.subset(SNP_IDS)myabmatrix.write(&quot;test_abmatrix_subset.ab&quot;, genotypes)myabmatrix.close()```</longdescription>
</pkgmetadata>