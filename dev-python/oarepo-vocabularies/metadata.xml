<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OARepo vocabulariesThis is an extension of invenio vocabularies that allows:* Use the vocabularies with custom fields* Treat vocabulary items as hierarchy## InstallationAdd `oarepo-runtime`, `oarepo-vocabularies` to your virtualenv an set up the following in your `invenio.cfg`:```pythonfrom oarepo_vocabularies.services.config import VocabulariesConfigfrom oarepo_vocabularies.resources.config import VocabulariesResourceConfigVOCABULARIES_SERVICE_CONFIG = VocabulariesConfigVOCABULARIES_RESOURCE_CONFIG = VocabulariesResourceConfig```## DocumentationSee [NRP documentation](https://narodni-repozitar.github.io/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/vocabularies) for more details.## AuthoritiesIt is possible to provide authority sources for vocabularies.Configuration:```pythonVOCABULARY_TYPE_METADATA = {    &quot;funding&quot;: {    # vocabulary of funding        &quot;name&quot;: {            &quot;en&quot;: &quot;Funding&quot;        },        &quot;authority&quot;: FundingService    }}```where:```pythonfrom oarepo_vocabularies.authorities import AuthorityServiceclass FundingService(AuthorityService):    def search(self, query=None, page=1, size=10, **kwargs):        # performs an API and returns a listing         # of serialized vocabulary items, for example:        return {            'hits': {                'total': 2,                'hits': [                    {&quot;id&quot;: &quot;03zsq2967&quot;, &quot;title&quot;: {&quot;en&quot;: &quot;Funding 1&quot;}},                    {&quot;id&quot;: &quot;a4gfhtt56&quot;, &quot;title&quot;: {&quot;en&quot;: &quot;Funding 2&quot;}}                ]            },            # optional pagination links here        }    def get(self, item_id, *, uow, value, **kwargs):        # performs lookup by id and returns vocabulary metadata                # in this example:        return next(x for x in self.search()['hits']['hits'] if x['id'] == item_id)```## OrderingThis extension supports ordering and suggestion in different languages. It is enabled by defaultand enables all languages in `I18N_LANGUAGES`, `BABEL_DEFAULT_LOCALE`. Sorting by `title` sortsby the title in the current language, suggestion suggests in `id` and title in the default language.</longdescription>
</pkgmetadata>