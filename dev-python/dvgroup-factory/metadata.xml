<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>#Состав библиотеки---------------------------------------------------------------------------------  1. Класс Factory для получения экземпляров сервисов без указания путей к сервисам и секретов. Для работы нужно сконфигурировать переменные окружения VAULT_URL и VAULT_TOKEN, или явно передать url и token при создании экземпляра класса). Далее секреты автоматически достаются из vault, пути из consul2. Декоратор @log(logger=you_logger)3. Декоратор @retry(count=10, sleep=0.5)## Установка---------------------------------------------------------------------------------  Requests is available on PyPI:\$ python -m pip install dvgroup_factory\from dvgroup_factory import factory##Порядок работы:---------------------------------------------------------------------------------  1. Получить объект фабрики:   1. fc = factory.Factory(vault_url=url, vault_token=token)   2. 2.1 fc = factory.Factory(), если определены переменные окружения **VAULT_URL и VAULT_TOKEN**2. Получить объект сервиса (в kwargs передаются параметры не связанные с url и secrets):   1. ch_client = fc.clickhouse_client(secure=True, database=&quot;db1&quot;, verify=False)   2. kafka_p = fc.kafka_producer(value_serializer=lambda v: json.dumps(v).encode('utf-8'))3. По умолчанию, если ранее уже был создан объект сервиса, то при следующем запросе, будет возвращен ранее созданный.4. Для получения нового объекта (если ранее уже был получен экземпляр), требуется переддать параметр new=True:    1. kafka_p2 = fc.kafka_producer(value_serializer=lambda v: json.dumps(v).encode('utf-8'), ***new=True***)5. Для получения именованного экземпляра требуется указать параметр ***instance_name***   1. kafka_p2 = fc.kafka_producer(value_serializer=lambda v: json.dumps(v).encode('utf-8'), ***instance_name=&quot;Name&quot;***)6. Для понимания, какие методы (классы сервисов) реализованы, следует вызвать метод info(), который возвратит след.информацию:Создание экземпляра:\---------------------------------------------------------------------------------       ins = Factory(vault_url=url, vault_token=token)\Методы: \   1 ins.vault_client(url: str, token: str)\   2 ins.consul(**kwargs)\   3 ins.kafka_producer(**kwargs)\   4 ins.kafka_consumer(*topics,**kwargs)\   3 ins.aiokafka_producer(**kwargs)\   4 ins.aiokafka_consumer(*topics,**kwargs)\   5 ins.clickhouse_client(**kwargs)\   6 ins.azure_container_client(**kwargs)\   7 ins.loki_handler(**kwargs)\   8 ins.gp_connection()\ Для создания нового экземпляра укажите в kwargs: new=True\Пути настроек в consul:\   {&quot;clickhouse&quot;: &quot;env/databases/clickhouse&quot;, &quot;kafka&quot;: &quot;env/databases/kafka&quot;, &quot;ms-azure-se&quot;: &quot;env/databases/ms-azure-se&quot;, &quot;loki&quot;: &quot;env/databases/loki&quot;}#Пример кода:----------------------------------------------------------------------------------from dvgrop_factory import factory as fc###Получаю экземпляр фабрикиfactory = fc.Factory()###Consulconsul = factory.consul()\kafka_config = consul.kv[&quot;env/databases/kafka&quot;]###Clickhousech = factory.clickhouse_client(database=&quot;db1&quot;, ca_certs=&quot;CA.pem&quot;)\rs = ch.execute(&quot;SELECT COUNT(*) FROM db1.atol&quot;)###KafkaProducerk_p = factory.kafka_producer()###KafkaConsumerk_c = factory.kafka_consumer()###azure.storage.blob.ContainerClienta_cc = factory.azure_container_client(container_name=&quot;output&quot;)\print(f'k_c = {a_cc}')###azure.storage.blob.BlobCliennta_cc = factory.azure_blob_client(container_name=&quot;output&quot;, blob_name = &quot;nm&quot;)###logging_loki.LokiHandlerloki = factory.loki_handler(tags={&quot;application&quot;: &quot;atol-connector&quot;}, version=&quot;1&quot;)\loki.setLevel(logging.DEBUG)\_log_format = f&quot;%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s&quot;\loki.setFormatter(logging.Formatter(_log_format))\logger = logging.getLogger('segments-api')\logger.addHandler(loki)###GreenPlum Connectionconn = factory.gp_connection()cursor = conn.cursor()cursor.execute('SELECT COUNT(*) FROM raw_atol')rs = cursor.fetchone()###AIOKafkaasync def aiostart():\    consumer = factory.aiokafka_consumer(&quot;test-atol1&quot;, auto_offset_reset='earliest', enable_auto_commit=False, )\    producer = factory.aiokafka_producer()\    await consumer.start()\    await producer.start()\    try:\        future = await producer.send(&quot;test-atol&quot;, value={&quot;ASYNC&quot;: &quot;start&quot;})\        #record_metadata = await future\        key = None\        async for msg in consumer:\            print(f&quot;async key {key} msg = {msg}&quot;)\            msg.value[&quot;consumer-producer&quot;] = True\            msg.value[&quot;ASYNC&quot;] = True\            print(f&quot;async msg = {msg}&quot;)\            future = await producer.send(&quot;test-atol1&quot;, value=msg.value)\    finally:\        await consumer.stop()\        await producer.stop()\ioloop = asyncio.get_event_loop()\tasks = [ioloop.create_task(aiostart())]\ioloop.run_until_complete(asyncio.wait(tasks))\ioloop.close()</longdescription>
</pkgmetadata>