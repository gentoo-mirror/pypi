<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Shared Memory DictA very simple [shared memory](https://docs.python.org/3/library/multiprocessing.shared_memory.html) dict implementation.**Requires**: Python &gt;= 3.8```python&gt;&gt;&gt; # In the first Python interactive shell&gt;&gt; from shared_memory_dict import SharedMemoryDict&gt;&gt; smd = SharedMemoryDict(name='tokens', size=1024)&gt;&gt; smd['some-key'] = 'some-value-with-any-type'&gt;&gt; smd['some-key']'some-value-with-any-type'&gt;&gt;&gt; # In either the same shell or a new Python shell on the same machine&gt;&gt; existing_smd = SharedMemoryDict(name='tokens', size=1024)&gt;&gt;&gt; existing_smd['some-key']'some-value-with-any-type'&gt;&gt;&gt; existing_smd['new-key'] = 'some-value-with-any-type'&gt;&gt;&gt; # Back in the first Python interactive shell, smd reflects this change&gt;&gt; smd['new-key']'some-value-with-any-type'&gt;&gt;&gt; # Clean up from within the second Python shell&gt;&gt;&gt; existing_smd.shm.close()  # or &quot;del existing_smd&quot;&gt;&gt;&gt; # Clean up from within the first Python shell&gt;&gt;&gt; smd.shm.close()&gt;&gt;&gt; smd.shm.unlink()  # Free and release the shared memory block at the very end&gt;&gt;&gt; del smd  # use of smd after call unlink() is unsupported```&gt; The arg `name` defines the location of the memory block, so if you want to share the memory between process use the same name.&gt; The size (in bytes) occupied by the contents of the dictionary depends on the serialization used in storage. By default pickle is used.## InstallationUsing `pip`:```shellpip install shared-memory-dict```## LocksTo use [multiprocessing.Lock](https://docs.python.org/3.8/library/multiprocessing.html#multiprocessing.Lock) on write operations of shared memory dict set environment variable `SHARED_MEMORY_USE_LOCK=1`.## SerializationWe use [pickle](https://docs.python.org/3/library/pickle.html) as default to read and write the data into the shared memory block.You can create a custom serializer by implementing the `dumps` and `loads` methods.Custom serializers should raise `SerializationError` if the serialization fails and `DeserializationError` if the deserialization fails. Both are defined in the `shared_memory_dict.serializers` module.An example of a JSON serializer extracted from serializers module:```pythonNULL_BYTE: Final = b&quot;\x00&quot;class JSONSerializer:    def dumps(self, obj: dict) -&gt; bytes:        try:            return json.dumps(obj).encode() + NULL_BYTE        except (ValueError, TypeError):            raise SerializationError(obj)    def loads(self, data: bytes) -&gt; dict:        data = data.split(NULL_BYTE, 1)[0]        try:            return json.loads(data)        except json.JSONDecodeError:            raise DeserializationError(data)```Note: A null byte is used to separate the dictionary contents from the bytes that are in memory.To use the custom serializer you must set it when creating a new shared memory dict instance:```python&gt;&gt;&gt; smd = SharedMemoryDict(name='tokens', size=1024, serializer=JSONSerializer())```### CaveatThe pickle module is not secure. Only unpickle data you trust.See more [here](https://docs.python.org/3/library/pickle.html).## Django Cache ImplementationThere's a [Django Cache Implementation](https://docs.djangoproject.com/en/3.0/topics/cache/) with Shared Memory Dict:```python# settings/base.pyCACHES = {    'default': {        'BACKEND': 'shared_memory_dict.caches.django.SharedMemoryCache',        'LOCATION': 'memory',        'OPTIONS': {'MEMORY_BLOCK_SIZE': 1024}    }}```**Install with**: `pip install &quot;shared-memory-dict[django]&quot;`### CaveatWith Django cache implementation the keys only expire when they're read. Be careful with memory usage## AioCache BackendThere's also a [AioCache Backend Implementation](https://aiocache.readthedocs.io/en/latest/caches.html) with Shared Memory Dict:```pythonFrom aiocache import cachescaches.set_config({    'default': {        'cache': 'shared_memory_dict.caches.aiocache.SharedMemoryCache',        'size': 1024,    },})```&gt; This implementation is very based on aiocache [SimpleMemoryCache](https://aiocache.readthedocs.io/en/latest/caches.html#simplememorycache)**Install with**: `pip install &quot;shared-memory-dict[aiocache]&quot;`</longdescription>
</pkgmetadata>