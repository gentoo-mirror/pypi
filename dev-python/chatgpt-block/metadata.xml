<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ChatGPTBlockA Python package for interacting with OpenAI's chat models through the OpenAI API.## Table Of Contents- [Introduction](#introduction)- [Features](#features)- [Installation](#installation)- [Usage](#usage)- [Contributing](#contributing)- [License](#license)## IntroductionThe main purpose of the package is to have a simple interface for interacting with OpenAI api.Both in streamable and non-streamable fashion.OpenAI API itself does not store the history and can throw and error if history is too long.The package provides the solution to this by simply counting the length of the history and trimming it when needed.## Features1. streamable mode2. supporting the history of the conversation3. resetting the history of the conversation4. adding your custom pre-processing## Installation### Install Locally1. `git clone https://github.com/SkuratovichA/chatgpt_block`2. `cd chatgpt_block`2. `pip install -e .`### Install With PIP`pip install chatgpt_block`## Usage### Creating The ConversationHere's an example of how to use the ChatGPTBlock class:There are two options of using the class. Streamable and non-streamable.## Non-Streamable Mode```pythonfrom chatgpt_block import ChatGPTBlock# Initialize the ChatGPTBlock instancechat_gpt_block = ChatGPTBlock(    system_prompt=&quot;You are a helpful assistant.&quot;,    openai_api_key=&quot;your_openai_api_key&quot;,    model=&quot;gpt-4&quot;,    preprocessor=lambda x: x,)# Get a response from the modelresponse = chat_gpt_block(&quot;Tell me a joke.&quot;)print(response)```    ## Streamable Mode```pythonfrom chatgpt_block import ChatGPTBlockchat_gpt_block = ChatGPTBlock(    system_prompt=&quot;You are a helpful assistant.&quot;,    openai_api_key=&quot;your_openai_api_key&quot;,    model=&quot;gpt-4&quot;,    stream=True,    preprocessor=lambda x: x,)generator = chat_gpt_block(&quot;Tell me a joke.&quot;)for token in generator:    print(token, flush=True, end='')```### Resetting The Conversation```pythonfrom chatgpt_block import ChatGPTBlockchat_gpt_block = ChatGPTBlock(    system_prompt=&quot;You are a helpful assistant.&quot;,    openai_api_key=&quot;your_openai_api_key&quot;,    model=&quot;gpt-4&quot;,    stream=True,    preprocessor=lambda x: x,)chat_gpt_block(&quot;Tell me a joke.&quot;)print(chat_gpt_block.answer)chat_gpt_block.reset()response = chat_gpt_block(&quot;Tell me a story.&quot;)print(response)```### Custom Preprocessor Function```pythonfrom chatgpt_block import ChatGPTBlockdef custom_preprocessor(input_text: str, some_dictionary: dict, prologue: str) -&gt; str:    return f&quot;{prologue}\n{input_text}. {some_dictionary}&quot;chat_gpt_block = ChatGPTBlock(    system_prompt=&quot;You are a helpful assistant.&quot;,    openai_api_key=&quot;your_openai_api_key&quot;,    model=&quot;gpt-4&quot;,    preprocessor=custom_preprocessor,)response = chat_gpt_block(    input_text=&quot;please check whether this python dictionary is valid&quot;,     some_dictionary={&quot;hello&quot;: &quot;world&quot;}, prologue='')print(response)```### Custom Error Handling Function```pythonfrom chatgpt_block import ChatGPTBlockdef custom_error_handler():    print(&quot;There was an error when communicating with OpenAI API. Please try again later&quot;)chat_gpt_block = ChatGPTBlock(    system_prompt=&quot;You are a helpful assistant.&quot;,    openai_api_key=&quot;your_openai_api_key&quot;,    model=&quot;gpt-4&quot;,    on_error=custom_error_handler,    preprocessor=lambda x: x,)response = chat_gpt_block(&quot;tell me a joke&quot;)print(response)```### Feeding The Model With The Examples```pythonfrom chatgpt_block import ChatGPTBlockexamples = [    (&quot;Please add a vegetable to an animal&quot;,      &quot;Alpaca + avocado = alpacavocado&quot;),    (&quot;Now I want something with cats&quot;,      &quot;Cat + Cappuccino = cappucicatto&quot;),]chat_gpt_block = ChatGPTBlock(    system_prompt=    &quot;&quot;&quot;You are a helpful assistant with a sense of humor.        You know everything about animals, vegetables and how to combine them.        You must add animals to vegetables no matter what to create funny words.    &quot;&quot;&quot;,    examples=examples,    openai_api_key=&quot;your_openai_api_key&quot;,    model=&quot;gpt-4&quot;,    preprocessor=lambda x: x,)response = chat_gpt_block(&quot;Make up some new word with \&quot;tortoise\&quot;&quot;)print(response)```## Silent Errors    ```pythonfrom chatgpt_block import ChatGPTBlock# Initialize the ChatGPTBlock instancechat_gpt_block = ChatGPTBlock(    system_prompt=&quot;wrong key&quot;,    openai_api_key=&quot;your_openai_api_key&quot;,    model=&quot;gpt-4&quot;,    preprocessor=lambda x: x,    raise_on_error=False,)# Get a response from the modelresponse = chat_gpt_block(&quot;Tell me a joke.&quot;)print(response)  # OpenAI internal error. No API key provided. You can ...```## Errors as Exceptions    ```pythonfrom chatgpt_block import ChatGPTBlock# Initialize the ChatGPTBlock instancechat_gpt_block = ChatGPTBlock(    system_prompt=&quot;wrong key&quot;,    openai_api_key=&quot;your_openai_api_key&quot;,    model=&quot;gpt-4&quot;,    preprocessor=lambda x: x,    raise_on_error=True,)# Get a response from the modelresponse = chat_gpt_block(&quot;Tell me a joke.&quot;)# AuthenticationError: No API key provided ...```## ContributingThis package is free to any ideas. Just create an issue or a pull request on GitHub.## License`chatgpt_block` is released under [MIT License](LICENSE).</longdescription>
</pkgmetadata>