<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Watson Developer Cloud Python SDK[![Build and Test](https://github.com/watson-developer-cloud/python-sdk/workflows/Build%20and%20Test/badge.svg?branch=master)](https://github.com/watson-developer-cloud/python-sdk/actions?query=workflow%3A&quot;Build+and+Test&quot;)[![Deploy and Publish](https://github.com/watson-developer-cloud/python-sdk/workflows/Deploy%20and%20Publish/badge.svg?branch=master)](https://github.com/watson-developer-cloud/python-sdk/actions?query=workflow%3A%22Deploy+and+Publish%22)[![Slack](https://wdc-slack-inviter.mybluemix.net/badge.svg)](https://wdc-slack-inviter.mybluemix.net)[![Latest Stable Version](https://img.shields.io/pypi/v/ibm-watson.svg)](https://pypi.python.org/pypi/ibm-watson)[![CLA assistant](https://cla-assistant.io/readme/badge/watson-developer-cloud/python-sdk)](https://cla-assistant.io/watson-developer-cloud/python-sdk)## Deprecated builds[![Build Status](https://travis-ci.org/watson-developer-cloud/python-sdk.svg?branch=master)](https://travis-ci.org/watson-developer-cloud/python-sdk)Python client library to quickly get started with the various [Watson APIs][wdc] services.## Before you begin- You need an [IBM Cloud][ibm-cloud-onboarding] account. We now only support `python 3.5` and above## InstallationTo install, use `pip` or `easy_install`:```bashpip install --upgrade ibm-watson```or```basheasy_install --upgrade ibm-watson```Note the following:a) Versions prior to 3.0.0 can be installed using:```bashpip install --upgrade watson-developer-cloud```b) If you run into permission issues try:```bashsudo -H pip install --ignore-installed six ibm-watson```For more details see [#225](https://github.com/watson-developer-cloud/python-sdk/issues/225)c) In case you run into problems installing the SDK in DSX, try```!pip install --upgrade pip```Restarting the kernelFor more details see [#405](https://github.com/watson-developer-cloud/python-sdk/issues/405)## ExamplesThe [examples][examples] folder has basic and advanced examples. The examples within each service assume that you already have [service credentials](#getting-credentials).## Running in IBM CloudIf you run your app in IBM Cloud, the SDK gets credentials from the [`VCAP_SERVICES`][vcap_services] environment variable.## AuthenticationWatson services are migrating to token-based Identity and Access Management (IAM) authentication.- With some service instances, you authenticate to the API by using **[IAM](#iam)**.- In other instances, you authenticate by providing the **[username and password](#username-and-password)** for the service instance.### Getting credentialsTo find out which authentication to use, view the service credentials. You find the service credentials for authentication the same way for all Watson services:1. Go to the IBM Cloud [Dashboard](https://cloud.ibm.com/) page.1. Either click an existing Watson service instance in your [resource list](https://cloud.ibm.com/resources) or click [**Create resource &gt; AI**](https://cloud.ibm.com/catalog?category=ai) and create a service instance.1. Click on the **Manage** item in the left nav bar of your service instance.On this page, you should be able to see your credentials for accessing your service instance.### Supplying credentialsThere are three ways to supply the credentials you found above to the SDK for authentication.#### Credential fileWith a credential file, you just need to put the file in the right place and the SDK will do the work of parsing and authenticating. You can get this file by clicking the **Download** button for the credentials in the **Manage** tab of your service instance.The file downloaded will be called `ibm-credentials.env`. This is the name the SDK will search for and **must** be preserved unless you want to configure the file path (more on that later). The SDK will look for your `ibm-credentials.env` file in the following places (in order):- The top-level directory of the project you're using the SDK in- Your system's home directoryAs long as you set that up correctly, you don't have to worry about setting any authentication options in your code. So, for example, if you created and downloaded the credential file for your Discovery instance, you just need to do the following:```pythondiscovery = DiscoveryV1(version='2019-04-30')```And that's it!If you're using more than one service at a time in your code and get two different `ibm-credentials.env` files, just put the contents together in one `ibm-credentials.env` file and the SDK will handle assigning credentials to their appropriate services.If you would like to configure the location/name of your credential file, you can set an environment variable called `IBM_CREDENTIALS_FILE`. **This will take precedence over the locations specified above.** Here's how you can do that:```bashexport IBM_CREDENTIALS_FILE=&quot;&lt;path&gt;&quot;```where `&lt;path&gt;` is something like `/home/user/Downloads/&lt;file_name&gt;.env`.#### Environment VariablesSimply set the environment variables using &lt;service name&gt;\_&lt;variable name&gt; syntax. For example, using your favourite terminal, you can set environment variables for Assistant service instance:```bashexport ASSISTANT_APIKEY=&quot;&lt;your apikey&gt;&quot;export ASSISTANT_AUTH_TYPE=&quot;iam&quot;```The credentials will be loaded from the environment automatically```pythonassistant = AssistantV1(version='2018-08-01')```#### ManuallyIf you'd prefer to set authentication values manually in your code, the SDK supports that as well. The way you'll do this depends on what type of credentials your service instance gives you.### IAMIBM Cloud has migrated to token-based Identity and Access Management (IAM) authentication. IAM authentication uses a service API key to get an access token that is passed with the call. Access tokens are valid for approximately one hour and must be regenerated.You supply either an IAM service **API key** or a **bearer token**:- Use the API key to have the SDK manage the lifecycle of the access token. The SDK requests an access token, ensures that the access token is valid, and refreshes it if necessary.- Use the access token if you want to manage the lifecycle yourself. For details, see [Authenticating with IAM tokens](https://cloud.ibm.com/docs/watson?topic=watson-iam).- Use a server-side to generate access tokens using your IAM API key for untrusted environments like client-side scripts. The generated access tokens will be valid for one hour and can be refreshed.#### Supplying the API key```pythonfrom ibm_watson import DiscoveryV1from ibm_cloud_sdk_core.authenticators import IAMAuthenticator# In the constructor, letting the SDK manage the tokenauthenticator = IAMAuthenticator('apikey',                                 url='&lt;iam_url&gt;') # optional - the default value is https://iam.cloud.ibm.com/identity/tokendiscovery = DiscoveryV1(version='2019-04-30',                        authenticator=authenticator)discovery.set_service_url('&lt;url_as_per_region&gt;')```#### Generating bearer tokens using API key```pythonfrom ibm_watson import IAMTokenManager# In your API endpoint use this to generate new bearer tokensiam_token_manager = IAMTokenManager(apikey='&lt;apikey&gt;')token = iam_token_manager.get_token()```##### Supplying the bearer token```pythonfrom ibm_watson import DiscoveryV1from ibm_cloud_sdk_core.authenticators import BearerTokenAuthenticator# in the constructor, assuming control of managing the tokenauthenticator = BearerTokenAuthenticator('your bearer token')discovery = DiscoveryV1(version='2019-04-30',                        authenticator=authenticator)discovery.set_service_url('&lt;url_as_per_region&gt;')```### Username and password```pythonfrom ibm_watson import DiscoveryV1from ibm_cloud_sdk_core.authenticators import BasicAuthenticatorauthenticator = BasicAuthenticator('username', 'password')discovery = DiscoveryV1(version='2019-04-30', authenticator=authenticator)discovery.set_service_url('&lt;url_as_per_region&gt;')```### No Authentication```pythonfrom ibm_watson import DiscoveryV1from ibm_cloud_sdk_core.authenticators import NoAuthAuthenticatorauthenticator = NoAuthAuthenticator()discovery = DiscoveryV1(version='2019-04-30', authenticator=authenticator)discovery.set_service_url('&lt;url_as_per_region&gt;')```## Python versionTested on Python 3.9, 3.10, and 3.11.## QuestionsIf you have issues with the APIs or have a question about the Watson services, see [Stack Overflow](https://stackoverflow.com/questions/tagged/ibm-watson+python).## Configuring the http client (Supported from v1.1.0)To set client configs like timeout use the `set_http_config()` function and pass it a dictionary of configs. See this [documentation](https://2.python-requests.org/en/master/api/#requests.request) for more information about the options. All options shown except `method`, `url`, `headers`, `params`, `data`, and `auth` are configurable via `set_http_config()`. For example for a Assistant service instance```pythonfrom ibm_watson import AssistantV1from ibm_cloud_sdk_core.authenticators import IAMAuthenticatorauthenticator = IAMAuthenticator('your apikey')assistant = AssistantV1(    version='2021-11-27',    authenticator=authenticator)assistant.set_service_url('https://api.us-south.assistant.watson.cloud.ibm.com')assistant.set_http_config({'timeout': 100})response = assistant.message(workspace_id=workspace_id, input={    'text': 'What\'s the weather like?'}).get_result()print(json.dumps(response, indent=2))```### Use behind a corporate proxyTo use the SDK with any proxies you may have they can be set as shown below. For documentation on proxies see [here](https://2.python-requests.org/en/latest/user/advanced/#proxies)See this example configuration:```pythonfrom ibm_watson import AssistantV1from ibm_cloud_sdk_core.authenticators import IAMAuthenticatorauthenticator = IAMAuthenticator('your apikey')assistant = AssistantV1(    version='2021-11-27',    authenticator=authenticator)assistant.set_service_url('https://api.us-south.assistant.watson.cloud.ibm.com')assistant.set_http_config({'proxies': {  'http': 'http://10.10.1.10:3128',  'https': 'http://10.10.1.10:1080',}})```### Sending custom certificatesTo send custom certificates as a security measure in your request, use the cert property of the HTTPS Agent.```pythonfrom ibm_watson import AssistantV1from ibm_cloud_sdk_core.authenticators import IAMAuthenticatorauthenticator = IAMAuthenticator('your apikey')assistant = AssistantV1(    version='2021-11-27',    authenticator=authenticator)assistant.set_service_url('https://api.us-south.assistant.watson.cloud.ibm.com')assistant.set_http_config({'cert': ('path_to_cert_file','path_to_key_file')})```## Disable SSL certificate verificationFor ICP(IBM Cloud Private), you can disable the SSL certificate verification by:```pythonservice.set_disable_ssl_verification(True)```Or can set it from extrernal sources. For example set in the environment variable.```export &lt;service name&gt;_DISABLE_SSL=True```## Setting the service urlTo set the base service to be used when contacting the service```pythonservice.set_service_url('my_new_service_url')```Or can set it from extrernal sources. For example set in the environment variable.```export &lt;service name&gt;_URL=&quot;&lt;your url&gt;&quot;```## Sending request headersCustom headers can be passed in any request in the form of a `dict` as:```pythonheaders = {    'Custom-Header': 'custom_value'}```For example, to send a header called `Custom-Header` to a call in Watson Assistant, passthe headers parameter as:```pythonfrom ibm_watson import AssistantV1from ibm_cloud_sdk_core.authenticators import IAMAuthenticatorauthenticator = IAMAuthenticator('your apikey')assistant = AssistantV1(    version='2018-07-10',    authenticator=authenticator)assistant.set_service_url('https://gateway.watsonplatform.net/assistant/api')response = assistant.list_workspaces(headers={'Custom-Header': 'custom_value'}).get_result()```## Parsing HTTP response informationIf you would like access to some HTTP response information along with the response model, you can set the `set_detailed_response()` to `True`. Since Python SDK `v2.0`, it is set to `True````pythonfrom ibm_watson import AssistantV1from ibm_cloud_sdk_core.authenticators import IAMAuthenticatorauthenticator = IAMAuthenticator('your apikey')assistant = AssistantV1(    version='2018-07-10',    authenticator=authenticator)assistant.set_service_url('https://gateway.watsonplatform.net/assistant/api')assistant.set_detailed_response(True)response = assistant.list_workspaces(headers={'Custom-Header': 'custom_value'}).get_result()print(response)```This would give an output of `DetailedResponse` having the structure:```python{    'result': &lt;response returned by service&gt;,    'headers': { &lt;http response headers&gt; },    'status_code': &lt;http status code&gt;}```You can use the `get_result()`, `get_headers()` and get_status_code() to return the result, headers and status code respectively.## Getting the transaction IDEvery SDK call returns a response with a transaction ID in the `X-Global-Transaction-Id` header. Together the service instance region, this ID helps support teams troubleshoot issues from relevant logs.### Suceess```pythonfrom ibm_watson import AssistantV1service = AssistantV1(authenticator={my_authenticator})response_headers = service.my_service_call().get_headers()print(response_headers.get('X-Global-Transaction-Id'))```### Failure```pythonfrom ibm_watson import AssistantV1, ApiExceptiontry:    service = AssistantV1(authenticator={my_authenticator})    service.my_service_call()except ApiException as e:    print(e.global_transaction_id)    # OR    print(e.http_response.headers.get('X-Global-Transaction-Id'))```However, the transaction ID isn't available when the API doesn't return a response for some reason. In that case, you can set your own transaction ID in the request. For example, replace `&lt;my-unique-transaction-id&gt;` in the following example with a unique transaction ID.```pythonfrom ibm_watson import AssistantV1service = AssistantV1(authenticator={my_authenticator})service.my_service_call(headers={'X-Global-Transaction-Id': '&lt;my-unique-transaction-id&gt;'})```## Using WebsocketsThe Text to Speech service supports synthesizing text to spoken audio using web sockets with the `synthesize_using_websocket`. The Speech to Text service supports recognizing speech to text using web sockets with the `recognize_using_websocket`. These methods need a custom callback class to listen to events. Below is an example of `synthesize_using_websocket`. Note: The service accepts one request per connection.```pyfrom ibm_watson.websocket import SynthesizeCallbackclass MySynthesizeCallback(SynthesizeCallback):    def __init__(self):        SynthesizeCallback.__init__(self)    def on_audio_stream(self, audio_stream):        return audio_stream    def on_data(self, data):        return datamy_callback = MySynthesizeCallback()service.synthesize_using_websocket('I like to pet dogs',                                   my_callback,                                   accept='audio/wav',                                   voice='en-US_AllisonVoice'                                  )```## Cloud Pak for DataIf your service instance is of CP4D, below are two ways of initializing the assistant service.### 1) Supplying the username, password and authentication urlThe SDK will manage the token for the user```pythonfrom ibm_watson import AssistantV1from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticatorauthenticator = CloudPakForDataAuthenticator(    '&lt;your username&gt;',    '&lt;your password&gt;',    '&lt;authentication url&gt;', # should be of the form https://{icp_cluster_host}{instance-id}/api    disable_ssl_verification=True) # Disable ssl verification for authenticatorassistant = AssistantV1(    version='&lt;version&gt;',    authenticator=authenticator)assistant.set_service_url('&lt;service url&gt;') # should be of the form https://{icp_cluster_host}/{deployment}/assistant/{instance-id}/apiassistant.set_disable_ssl_verification(True) # MAKE SURE SSL VERIFICATION IS DISABLED```### 2) Supplying the access token```pythonfrom ibm_watson import AssistantV1from ibm_cloud_sdk_core.authenticators import BearerTokenAuthenticatorauthenticator = BearerTokenAuthenticator('your managed access token')assistant = AssistantV1(version='&lt;version&gt;',                        authenticator=authenticator)assistant.set_service_url('&lt;service url&gt;') # should be of the form https://{icp_cluster_host}/{deployment}/assistant/{instance-id}/apiassistant.set_disable_ssl_verification(True) # MAKE SURE SSL VERIFICATION IS DISABLED```## Logging### Enable logging```pythonimport logginglogging.basicConfig(level=logging.DEBUG)```This would show output of the form:```DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): iam.cloud.ibm.com:443DEBUG:urllib3.connectionpool:https://iam.cloud.ibm.com:443 &quot;POST /identity/token HTTP/1.1&quot; 200 1809DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): gateway.watsonplatform.net:443DEBUG:urllib3.connectionpool:https://gateway.watsonplatform.net:443 &quot;POST /assistant/api/v1/workspaces?version=2018-07-10 HTTP/1.1&quot; 201 NoneDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): gateway.watsonplatform.net:443DEBUG:urllib3.connectionpool:https://gateway.watsonplatform.net:443 &quot;GET /assistant/api/v1/workspaces/883a2a44-eb5f-4b1a-96b0-32a90b475ea8?version=2018-07-10&amp;export=true HTTP/1.1&quot; 200 NoneDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): gateway.watsonplatform.net:443DEBUG:urllib3.connectionpool:https://gateway.watsonplatform.net:443 &quot;DELETE /assistant/api/v1/workspaces/883a2a44-eb5f-4b1a-96b0-32a90b475ea8?version=2018-07-10 HTTP/1.1&quot; 200 28```### Low level request and response dumpTo get low level information of the requests/ responses:```pythonfrom http.client import HTTPConnectionHTTPConnection.debuglevel = 1```## Dependencies- [requests]- `python_dateutil` &gt;= 2.5.3- [responses] for testing- Following for web sockets support in speech to text  - `websocket-client` 1.1.0- `ibm_cloud_sdk_core` &gt;= 3.16.2## ContributingSee [CONTRIBUTING.md][contributing].## LicenseThis library is licensed under the [Apache 2.0 license][license].</longdescription>
</pkgmetadata>