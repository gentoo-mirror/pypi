<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># datapatchA Python library for defining rule-based overrides on messy data. Imagine, for example,trying to import a dataset in each row is associated with a country - which have been entered by humans. You might find country names like `Northkorea`, or `Greet Britain`that you want to normalise. `datapatch` creates a mechanism to build a flexible lookuptable (usually stored as a YAML file) to catch and repair these data issues.## InstallationYou can install `datapatch` from the Python package index:```bashpip install datapatch```## ExampleGiven a YAML file like this:```yamlcountries:  normalize: true  lowercase: true  options:    - match: Frankreich      value: France    - match:        - Northkorea        - Nordkorea        - Northern Korea        - NKorea        - DPRK      value: North Korea    - contains: Britain      value: Great Britain```The file can be used to apply the data patches against raw input:```pythonfrom datapatch import read_lookups, LookupExceptionlookups = read_lookups(&quot;countries.yml&quot;)countries = lookups.get(&quot;countries&quot;)# This will apply the patch or default to the original string if none exists:for row in iter_data():    raw = row.get(&quot;Country&quot;)    row[&quot;Country&quot;] = countries.get_value(raw, default=raw)```### Extended optionsThere's a host of options available to configure the application of the datapatches:```yamlcountries:  # If you mark a lookup as required, a value that matches no options will  # throw a `datapatch.exc:LookupException`.  required: true  # Normalisation will remove many special characters, remove multiple spaces  # and perform some basic matching across alphabets (Путин -&gt; Putin).  normalize: false  options:    - match: Francois      value: France  # This is a shorthand for defining options that have just one `match` and  # one `value` defined:  map:    Luxemborg: Luxembourg    Lux: Luxembourg```### Result objectsYou can also have more details associated with a result and access them:```yamlcountries:  options:    - match: Frankreich      # These can be arbitrary attributes:      label: France      code: FR```This can be accessed as a result object with attributes:```pythonfrom datapatch import read_lookups, LookupExceptionlookups = read_lookups(&quot;countries.yml&quot;)countries = lookups.get(&quot;countries&quot;)result = countries.match(&quot;Frankreich&quot;)print(result.label, result.code)assert result.capital is None, result.capital```## License`datapatch` is licensed under the terms of the MIT license, which is included as`LICENSE`.</longdescription>
</pkgmetadata>