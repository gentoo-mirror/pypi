<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Json Spec=========.. image:: https://badge.fury.io/py/json-spec.png    :target: http://badge.fury.io/py/json-spec.. image:: https://travis-ci.org/johnnoone/json-spec.png?branch=master    :target: https://travis-ci.org/johnnoone/json-specThis library implements several JSON specs, like `JSON Schema`_,`JSON Reference`_ and `JSON Pointer`_:* It works on python 3.6 and above* It is release under the `BSD license`_Installation------------This library has only weak dependencies. You can simply use pip::    $ pip install json-specRegading you needs, you can install more features. For example, this commandwill enable colorated messages::    $ pip install json-spec[cli]This one will enable ip format for json schema::    $ pip install json-spec[ip]...CLI Usage---------This module expose 2 cli commands.**json-extract** will extract parts of your json document::    $ json-extract '#/foo/1' --document-json='{&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]}'    $ echo '{&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]}' | json-extract '#/foo/1'    $ json-extract '#/foo/1' --document-file=doc.json    $ json-extract '#/foo/1' &lt; doc.json**json-validate** will validate your document against a schema::    $ json-validate --schema-file=schema.json --document-json='{&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]}'    $ echo '{&quot;foo&quot;: [&quot;bar&quot;, &quot;baz&quot;]}' | json-validate --schema-file=schema.json    $ json-validate --schema-file=schema.json --document-file=doc.json    $ json-validate --schema-file=schema.json &lt; doc.jsonLibrary usage-------------Let say you want to fetch / validate JSON like objects in you python scripts.You can extract member of an object with `JSON Pointer`_::    from jsonspec.pointer import extract    obj = {        'foo': ['bar', 'baz', 'quux']    }    assert 'baz' == extract(obj, '/foo/1')You can resolve member of any object with `JSON Reference`_::    from jsonspec.reference import resolve    obj = {        'foo': ['bar', 'baz', {            '$ref': '#/sub'        }],        'sub': 'quux'    }    assert 'quux' == resolve(obj, '#/foo/2')You can describe you data with `JSON Schema`_::    from jsonspec.validators import load    # data will validate against this schema    validator = load({        'title': 'Example Schema',        'type': 'object',        'properties': {            'age': {                'description': 'Age in years',                'minimum': 0,                'type': 'integer'            },            'firstName': {                'type': 'string'            },            'lastName': {                'type': 'string'            }        },        'required': [            'firstName',            'lastName'        ]    })    # validate this data    validator.validate({        'firstName': 'John',        'lastName': 'Noone',        'age': 33,    })Other examples can be found in the documentation_ or in the tests_... _`JSON Schema`: http://json-schema.org.. _`JSON Reference`: http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03.. _`JSON Pointer`: http://tools.ietf.org/html/rfc6901.. _`BSD license`: https://github.com/johnnoone/json-spec/blob/master/LICENSE.. _documentation: http://py.errorist.io/json-spec/.. _tests: https://github.com/johnnoone/json-spec/tree/master/tests</longdescription>
</pkgmetadata>