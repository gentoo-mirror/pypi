<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NP3A fast python library to load mp3 data into [NumPy](https://numpy.org) arrays.It is based on lieff's [minimp3](https://github.com/lieff/minimp3)## Installation`pip install np3`## Usage```python3import np3mp3 = np3.MP3(path=&quot;/my/mp3/file&quot;)# orwith open(&quot;/path/to/file.mp3&quot;) as mp3_fh:    mp3 = np3.MP3(file=mp3_fh)# ordata: bytes = obtain_mp3_data()mp3 = np3.MP3(data=data)print(f&quot;Channels: {mp3.channels}&quot;)print(f&quot;Sampling rate: {mp3.hz} Hz&quot;)length = len(mp3.samples[0]) / mp3.hzprint(f&quot;Length: {length:.1f} seconds&quot;)```## Threaded performance[GIL](https://docs.python.org/3/glossary.html#term-GIL) is released beforedecoding starts. On multi core machines this brings additional performancewhen decoding in separate threads. While decoding a single file does notparallelise, other python threads can continue working while the file isbeing processed. Where multiple files need decoding this performance gainbecomes particularly significant.```python3from concurrent.futures import ThreadPoolExecutorfiles = [&quot;/path/to/file1.mp3&quot;, &quot;/path/to/file2.mp3&quot;, ...]with ThreadPoolExecutor() as executor:    mp3s = executor.map(        lambda p: np3.MP3(path=p),        files,    )```</longdescription>
</pkgmetadata>