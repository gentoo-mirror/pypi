<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># trilogy-public-models## OverviewThis repository contains semantic models on public datasets for the Preql/Trilogy language. This supports the interactive PreQL demo, but can also be used by anyone to boostrap explorationof these public datasets.You can install this library directly and import models to use.## Installation```commandlinepip install trilogy-public-models```## ExamplesThis repository also contains a examples/ folder, which can be browsed for in-depth code examples.## Local UsageThis example assumes you are querying Bigquery Datasets.To utilize a model, instantiate a standard PreQL executor (in this case, a bigquery client) and then pass in one of the existing environments from this package into the environment argument.That will enable you to run queries against the semantic model.```pythonfrom google.auth import defaultfrom google.cloud import bigqueryfrom preql.executor import Executor, Dialectsfrom sqlalchemy.engine import create_enginefrom trilogy_public_models.bigquery import google_search_trendsproject, auth = default()bq_client = bigquery.Client(auth, project)engine = create_engine(f&quot;bigquery://{project}?user_supplied_client=True&quot;,                       connect_args={'client': bq_client})exec = Executor(    dialect=Dialects.BIGQUERY, engine=engine,    environment=google_search_trends)results = exec.execute_text(&quot;&quot;&quot;SELECT trends.term,trends.rank,trends.week,trends.refresh_date,WHERE    trends.week &gt; '2023-01-01'    and trends.refresh_date = '2023-02-22'    and trends.rank &lt; 10ORDER BY     trends.week desc,    trends.rank asclimit 100;&quot;&quot;&quot;)# you can execute multiple queries separate by a semicolon# so our results will be in the first element of the arrafor row in results[0]:    print(row)```## Combining ModelsComing soon!Preql supports combining multiple environments into a single environment. This enables simplified queryingof universal concepts, like looking up StackOverflow links embedded in Github commits, or merging GPSdata across different domains. ## Contributing### Model setupAll models should be in a double nested directory; first the platform and then the semantic label of the modelModels should have the following- entrypoint.preql- README.md### Model TestsAll models will be imported and verified. Validation methods will depend on the defined backend. All models require that the datasets being shared with the preql validation account. Current verifications: - model imports successfully - datasource bindings exist - datasource to concept mappings are appropriately typed - concept relations are consistently typed</longdescription>
</pkgmetadata>