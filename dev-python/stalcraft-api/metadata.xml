<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;stalcraft-api unofficial python library&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.org/project/stalcraft-api&quot; alt=&quot;PyPi Package Version&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/stalcraft-api.svg?style=flat-square&quot;/&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/stalcraft-api&quot; alt=&quot;Supported python versions&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/pyversions/stalcraft-api.svg?style=flat-square&quot;/&gt;&lt;/a&gt;    &lt;a href=&quot;https://opensource.org/licenses/MIT&quot; alt=&quot;MIT License&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/l/aiogram.svg?style=flat-squar&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p align=&quot;center&quot;&gt;    &lt;b&gt;Official API documentation:&lt;/b&gt; https://eapi.stalcraft.net&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;b&gt;Before you can use the API, you must register your application and receive approval&lt;b&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;b&gt;For testing Demo API is available&lt;b&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://eapi.stalcraft.net/registration.html&quot;&gt;more about applications&lt;/a&gt;&lt;/p&gt;&lt;br&gt;# ðŸ”§ Install### Pip```consolepip install stalcraft-api --upgrade```&lt;details&gt;&lt;summary&gt;Manual&lt;/summary&gt;```consolegit clone git@github.com:onejeuu/stalcraft-api.git``````consolecd stalcraft-api``````consolepip install -r requirements.txt```&lt;/details&gt;&lt;br&gt;# âš¡ Quick Start```pythonfrom stalcraft import AppClientTOKEN = &quot;YOUR_TOKEN&quot;client = AppClient(token=TOKEN)```&lt;br&gt;# ðŸ“Ž Usage Examples&lt;details&gt;&lt;summary&gt;App Client&lt;/summary&gt;```pythonfrom stalcraft import AppClient, Region, Sort, OrderCLIENT_ID = &quot;YOUR_CLIENT_ID&quot;CLIENT_SECRET = &quot;YOUR_CLIENT_SECRET&quot;TOKEN = &quot;YOUR_TOKEN&quot;# Method 1:client = AppClient(token=TOKEN)# Method 2:client = AppClient(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)print()print(&quot;List of regions&quot;)print(client.regions())print()print(&quot;List of clans with limit 2&quot;)print(client.clans(limit=2))print()print(&quot;Information about emission on NA server&quot;)print(client.emission(Region.NA))print()print(&quot;List of lots for item with id '1r756'&quot;)print(&quot;With offset 5, limit 2, sort by buyout price and order by descending&quot;)print(client.auction(&quot;1r756&quot;).lots(offset=5, limit=2, sort=Sort.BUYOUT_PRICE, order=Order.DESC))print()print(&quot;List of price history for item with id '1r756'&quot;)print(client.auction(&quot;1r756&quot;).price_history())print()print(&quot;Information about clan with id '562968e7-4282-4ac6-900f-f7f1581495e8'&quot;)print(client.clan(&quot;562968e7-4282-4ac6-900f-f7f1581495e8&quot;).info())```&lt;/details&gt;&lt;br&gt;&lt;details&gt;&lt;summary&gt;User Client&lt;/summary&gt;```pythonfrom stalcraft import UserClient, BaseUrl, RegionTOKEN = &quot;YOUR_TOKEN&quot;client = UserClient(token=TOKEN, base_url=BaseUrl.DEMO)# + all methods from AppClientprint(&quot;List of characters created by the user on EU server by which used access token was provided&quot;)print(client.characters(Region.EU))print()print(&quot;List of friends character names who are friend with 'Test-1'&quot;)print(client.friends(&quot;Test-1&quot;))# Members in clan with id '562968e7-4282-4ac6-900f-f7f1581495e8'# (Can be used only when using user access token and that user has at least one character in that clan)# client.clan(&quot;562968e7-4282-4ac6-900f-f7f1581495e8&quot;).members()## Information about player's profile. Includes alliance, profile description, last login time, stats, etc.# (Not working in DEMO API)# client.character_profile(&quot;ZIV&quot;)```&lt;/details&gt;&lt;br&gt;&lt;details&gt;&lt;summary&gt;Find Item ID by name&lt;/summary&gt;```pythonfrom stalcraft import AppClient, LocalItem, WebItem, ItemFolderTOKEN = &quot;YOUR_TOKEN&quot;client = AppClient(token=TOKEN)print()print(&quot;Search by local file&quot;)print(client.auction(LocalItem(&quot;Snowflake&quot;)).lots())print()print(&quot;(Not reliable)&quot;)print(&quot;Search by listing.json in stalcraft-database github repository&quot;)print(client.auction(WebItem(&quot;Snowflake&quot;, folder=ItemFolder.GLOBAL)).lots())```&lt;/details&gt;&lt;br&gt;&lt;details&gt;&lt;summary&gt;Exceptions&lt;/summary&gt;```pythonfrom stalcraft import UserClient, LocalItemfrom stalcraft.exceptions import (    InvalidToken, StalcraftApiException, ItemException)TOKEN = &quot;YOUR_TOKEN&quot;client = UserClient(token=TOKEN)def handle_exception(func, exception):    try:        func()    except exception as e:        print(&quot;Error:&quot;, e)print()print(&quot;If token is invalid&quot;)handle_exception(lambda: UserClient(&quot;test1234567890&quot;), InvalidToken)print()print(&quot;If an item with that name does not exist&quot;)handle_exception(lambda: LocalItem(&quot;test&quot;), ItemException)print()print(&quot;If one of parameters is invalid&quot;)handle_exception(lambda: client.auction(&quot;test&quot;).price_history(), StalcraftApiException)```&lt;/details&gt;&lt;br&gt;# ðŸš« Rate Limits```python# To obtain information about the current rate limit values, you can use client.ratelimit# Warning: by default client.ratelimit is None until the first request is made (except for regions), so use cautionfrom stalcraft import AppClientTOKEN = &quot;YOUR_TOKEN&quot;client = AppClient(token=TOKEN)print(client.ratelimit)# Output: Noneclient.emission()print(client.ratelimit)# Output: RateLimit(limit=200, remaining=199, reset=datetime.datetime(2023, 2, 23, 12, 0, 0, tzinfo=...))```&lt;br&gt;# ðŸ”‘ About Tokens### Get User and App Token```pythonCLIENT_ID = &quot;YOUR_CLIENT_ID&quot;CLIENT_SECRET = &quot;YOUR_CLIENT_SECRET&quot;auth = Authorization(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)print()print(&quot;Get App Token&quot;)print(auth.get_app_token())print()print(&quot;Get User Code&quot;)print(auth.get_user_code())auth.input_code()# or# auth.code = &quot;USER_CODE&quot;print()print(&quot;Get User Token&quot;)print(auth.get_user_token())```### Refresh User Token```pythonCLIENT_ID = &quot;YOUR_CLIENT_ID&quot;CLIENT_SECRET = &quot;YOUR_CLIENT_SECRET&quot;auth = Authorization(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)REFRESH_TOKEN = &quot;USER_REFRESH_TOKEN&quot;print()print(&quot;Refresh User Token&quot;)print(auth.update_token(REFRESH_TOKEN))```&lt;br&gt;# ðŸ“‹ Output Formats```pythonfrom stalcraft import AppClient# Optionalfrom rich import printTOKEN = &quot;YOUR_TOKEN&quot;client = AppClient(token=TOKEN)print()print(&quot;Object:&quot;)print(client.emission())# or client = AppClient(TOKEN, json=True)client.json = Trueprint()print(&quot;Json:&quot;)print(client.emission())```### Output:```pythonObject:Emission(    current_start=None,    previous_start=datetime.datetime(2023, 1, 30, 5, 16, 52, tzinfo=datetime.timezone.utc),    previous_end=datetime.datetime(2023, 1, 30, 5, 21, 52, tzinfo=datetime.timezone.utc))Json:{    'previousStart': '2023-01-30T05:16:52Z',    'previousEnd': '2023-01-30T05:21:52Z'}```</longdescription>
</pkgmetadata>