<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>envtpl======_Render jinja2 templates on the command line with shell environment variables_Installation------------    pip install envtplHow-to------Say you have a configuration file called whatever.conf that looks like this    foo = 123    bar = &quot;abc&quot;You can use envtpl to set `foo` and `bar` from the command line by creating a file called whatever.conf.tpl    foo = {{ FOO }}    bar = &quot;{{ BAR }}&quot;If you run    FOO=123 BAR=abc envtpl &lt; whatever.conf.tpl &gt; whatever.confyou'll get back the original whatever.conf.You can also specify default values    foo = {{ FOO | default(123) }}    bar = &quot;{{ BAR | default(&quot;abc&quot;) }}&quot;Running    FOO=456 envtpl &lt; whatever.conf.tpl &gt; whatever.confwill generate    foo = 456    bar = &quot;abc&quot;This is all standard [Jinja2 syntax](http://jinja.pocoo.org/docs/templates/), so you can do things like    {% if BAZ is defined %}    foo = 123    {% else %}    foo = 456    {% endif %}    bar = &quot;abc&quot;If an environment variable is missing, envtpl will throw an error    $ echo '{{ FOO }} {{ BAR }}' | FOO=123 envtpl    Error: 'BAR' is undefinedYou can change this behaviour to insert empty strings instead by passing the `--allow-missing` flag.Instead of reading from stdin and writing to stdout, you can pass the input filename as an optional positional argument,and set the output filename with the `--output-file` (`-o`) argument.    envtpl -o whatever.conf  whatever.conf.tplAs a convenience, if you don't specify an output filename and the input filename ends with `.tpl`, the output filename will be the input filename without the `.tpl` extension, i.e.    envtpl whatever.conf.tpl    # is equivalent to    envtpl -o whatever.conf whatever.conf.tplBy default, envtpl will **delete** the input template file. You can keep it by passing the `--keep-template` flag.There's a special `environment(prefix='')` function that you can use as a kind of wildcard variable. If you have `hello.tpl`    hello = {{ FOO }}    {% for key, value in environment('MY_') %}{{ key }} = {{ value }}    {% endfor %}and compile it using    FOO=world MY_baz=qux MY_foo=bar envtpl hello.tplYou end up with    hello = world    baz = qux    foo = barWhat's the point?-----------------I use this script quite a lot in Docker images. Usually I'll have the CMD execute some file, like /bin/start_container, that sets up the runtime configuration for the container by inserting environment variables into config files before starting the main process. A redis example could look like this    #!/bin/bash    # start_container    envtpl /etc/redis.conf.tpl    redis-serverThis is the use case I've optimised for, so that's why envtpl by default will delete the original template file.</longdescription>
</pkgmetadata>