<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Tedee Async Client PackageThis is a Tedee Lock Client package. It is an async implementation of [joerg65's original package](https://github.com/joerg65/pytedee.git).## Install:### From pip```pip install pytedee-async```### Locally```pythonpipenv install -e .# orpython3 setup.py install```## Try it out- Generate personal key. Instructions: https://tedee-tedee-api-doc.readthedocs-hosted.com/en/latest/howtos/authenticate.html#personal-access-key  Minimal scopes required for enable integration are:    - Devices.Read    - Lock.Operate- with `example.py`: Create a file `config.json` next to `example.py`:```json  {  &quot;personalToken&quot;: &quot;&lt;your token&gt;&quot;  }```cd into the directory of those to files and run```python example.py```- Initiate an instance of `TedeeClient````pythonfrom pytedee_async import TedeeClientpk = &quot;&lt;your PersonalKey&gt;&quot;# through initclient = TedeeClient(pk) # is initialized with no locksclient.get_locks() # get the locks# through classmethod# will initialize directly with all locks you haveclient = await TedeeClient.create(pk)```- the locks are avialable in a dictionary `client.locks_dict` with the key of the dict being the serial number of each lock, or in a list `client.locks`</longdescription>
</pkgmetadata>