<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ngff-zarr[![PyPI - Version](https://img.shields.io/pypi/v/ngff-zarr.svg)](https://pypi.org/project/ngff-zarr)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ngff-zarr.svg)](https://pypi.org/project/ngff-zarr)[![Test](https://github.com/thewtex/ngff-zarr/actions/workflows/test.yml/badge.svg)](https://github.com/thewtex/ngff-zarr/actions/workflows/test.yml)-----A lean and kind Open Microscopy Environment (OME) Next Generation File Format (NGFF) Zarr implementation.**Table of Contents**- [Installation](#installation)- [Features](#features)- [Usage](#usage)- [See also](#see-also)- [License](#license)## InstallationTo install the command line interface (CLI):```consolepip install 'ngff-zarr[cli]'```## Features- Minimal dependencies- Work with arbitrary Zarr store types- Lazy, parallel, and web ready -- no local filesystem required- Process extremely large datasets- Multiple downscaling methods- Supports Python&gt;=3.7- Implements version 0.4 of the [OME-ZarrNGFF specification](https://github.com/ome/ngff)## Usage### Convert an image fileConvert any scientific image file format supported by either [itk](https://wasm.itk.org/docs/image_formats), [tifffile](https://pypi.org/project/tifffile/), or [imageio](https://imageio.readthedocs.io/en/stable/formats/index.html).Example:```consolengff-zarr -i ./MR-head.nrrd -o ./MR-head.zarr```![ngff-zarr convert](https://i.imgur.com/I7gTG52.png)### Convert an image volume slice seriesNote the quotes:```consolengff-zarr -i &quot;series/*.tif&quot; -o ome-ngff.zarr```### Print information about generated multiscalesTo print information about the input, omit the output argument.```consolengff-zarr -i ./MR-head.nrrd```![ngff-zarr information](https://i.imgur.com/25RhzG2.png)### Specify output chunks```consolengff-zarr -c 64 -i ./MR-head.nrrd```![ngff-zarr output chunks](https://i.imgur.com/OGHyGQe.png)### Specify metadata```consolengff-zarr --dims &quot;z&quot; &quot;y&quot; &quot;x&quot; --scale x 1.4 y 1.4 z 2.5 --translation x 6.24 y 360.0 z 332.5 --name LIDC2 -i &quot;series/*.tif&quot;```![ngff-zarr metadata](https://i.imgur.com/AecFANr.png)### Limit memory consumptionLimit memory consumption by passing a rough memory limit in human-readable units, e.g. *8GB* with the `--memory-target` option.```consolengff-zarr --memory-target 50M -i ./LIDCFull.vtk -o ./LIDCFull.zarr```![ngff-zarr memory-target](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExZmQ2NzVmMzU0NDA5ZDcyNzczNTU3MWE2YjczZjY5YmJkNWE4OTRhZSZjdD1n/ODobGeUYQr9wrE9J2s/giphy.gif)### More options```consolengff-zarr --help```## See also- [ome-zarr-py](https://github.com/ome/ome-zarr-py)- [multiscale-spatial-image](https://github.com/spatial-image/multiscale-spatial-image)## License`ngff-zarr` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.## DevelopmentContributions are welcome and appreciated.To run the unit tests:```shpip install -e &quot;.[test,dask-image,itk,cli]&quot;pytest```### Updating test data1. Generate new test data tarball```cd test/datatar cvf ../data.tar baseline inputgzip -9 ../data.tar```2. Upload the data to [web3.storage](https://web3.storage)3. Upload the `test_data_ipfs_cid` (from web3.storage web UI) and `test_data_sha256` (`sh256sum ../data.tar.gz`) variables in *test/_data.py*.</longdescription>
</pkgmetadata>