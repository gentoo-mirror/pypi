<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;aiohttp-apispec&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;Build and document REST APIs with &lt;a href=&quot;https://github.com/aio-libs/aiohttp&quot;&gt;aiohttp&lt;/a&gt; and &lt;a href=&quot;https://github.com/marshmallow-code/apispec&quot;&gt;apispec&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/aiohttp-apispec&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/aiohttp-apispec.svg&quot; alt=&quot;Pypi&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/maximdanilchenko/aiohttp-apispec/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/maximdanilchenko/aiohttp-apispec.svg&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pepy.tech/project/aiohttp-apispec&quot;&gt;&lt;img src=&quot;https://pepy.tech/badge/aiohttp-apispec&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://travis-ci.org/maximdanilchenko/aiohttp-apispec&quot;&gt;&lt;img src=&quot;https://travis-ci.org/maximdanilchenko/aiohttp-apispec.svg&quot; alt=&quot;build status&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://aiohttp-apispec.readthedocs.io/en/latest/?badge=latest&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/aiohttp-apispec/badge/?version=latest&quot; alt=&quot;[docs]&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://codecov.io/gh/maximdanilchenko/aiohttp-apispec&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/maximdanilchenko/aiohttp-apispec/branch/master/graph/badge.svg&quot; alt=&quot;[codcov]&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/ambv/black&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; alt=&quot;Code style: black&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;```aiohttp-apispec``` key features:- ```docs``` and ```request_schema``` decorators to add swagger spec support out of the box;- ```validation_middleware``` middleware to enable validating with marshmallow schemas from those decorators;- **SwaggerUI** support.- *New from version 2.0* -  ```match_info_schema```, ```querystring_schema```, ```form_schema```, ```json_schema```, ```headers_schema``` and ```cookies_schema``` decorators for specific request parts validation. Look [here](#more-decorators) for more info.```aiohttp-apispec``` api is fully inspired by ```flask-apispec``` library## Contents- [Install](#install)- [Quickstart](#quickstart)- [Adding validation middleware](#adding-validation-middleware)- [More decorators](#more-decorators)- [Custom error handling](#custom-error-handling)- [Build swagger web client](#build-swagger-web-client)- [Versioning](#versioning)## Install```pip install aiohttp-apispec```## Quickstart*Also you can read [blog post](https://dmax.blog/how_to_easily_build_modern_web_apis_with_python_and_aiohttp) about quickstart with aiohttp-apispec*```Pythonfrom aiohttp_apispec import (    docs,    request_schema,    setup_aiohttp_apispec,)from aiohttp import webfrom marshmallow import Schema, fieldsclass RequestSchema(Schema):    id = fields.Int()    name = fields.Str(description=&quot;name&quot;)@docs(    tags=[&quot;mytag&quot;],    summary=&quot;Test method summary&quot;,    description=&quot;Test method description&quot;,)@request_schema(RequestSchema(strict=True))async def index(request):    return web.json_response({&quot;msg&quot;: &quot;done&quot;, &quot;data&quot;: {}})app = web.Application()app.router.add_post(&quot;/v1/test&quot;, index)# init docs with all parameters, usual for ApiSpecsetup_aiohttp_apispec(    app=app,     title=&quot;My Documentation&quot;,     version=&quot;v1&quot;,    url=&quot;/api/docs/swagger.json&quot;,    swagger_path=&quot;/api/docs&quot;,)# Now we can find spec on 'http://localhost:8080/api/docs/swagger.json'# and docs on 'http://localhost:8080/api/docs'web.run_app(app)```Class based views are also supported:```pythonclass TheView(web.View):    @docs(        tags=[&quot;mytag&quot;],        summary=&quot;View method summary&quot;,        description=&quot;View method description&quot;,    )    @request_schema(RequestSchema(strict=True))    @response_schema(ResponseSchema(), 200)    def delete(self):        return web.json_response(            {&quot;msg&quot;: &quot;done&quot;, &quot;data&quot;: {&quot;name&quot;: self.request[&quot;data&quot;][&quot;name&quot;]}}        )app.router.add_view(&quot;/v1/view&quot;, TheView)```As alternative you can add responses info to `docs` decorator, which is more compact way. And it allows you not to use schemas for responses documentation:```python@docs(    tags=[&quot;mytag&quot;],    summary=&quot;Test method summary&quot;,    description=&quot;Test method description&quot;,    responses={        200: {            &quot;schema&quot;: ResponseSchema,            &quot;description&quot;: &quot;Success response&quot;,        },  # regular response        404: {&quot;description&quot;: &quot;Not found&quot;},  # responses without schema        422: {&quot;description&quot;: &quot;Validation error&quot;},    },)@request_schema(RequestSchema(strict=True))async def index(request):    return web.json_response({&quot;msg&quot;: &quot;done&quot;, &quot;data&quot;: {}})```## Adding validation middleware```Pythonfrom aiohttp_apispec import validation_middleware...app.middlewares.append(validation_middleware)```Now you can access all validated data in route from ```request['data']``` like so:```Python@docs(    tags=[&quot;mytag&quot;],    summary=&quot;Test method summary&quot;,    description=&quot;Test method description&quot;,)@request_schema(RequestSchema(strict=True))@response_schema(ResponseSchema, 200)async def index(request):    uid = request[&quot;data&quot;][&quot;id&quot;]    name = request[&quot;data&quot;][&quot;name&quot;]    return web.json_response(        {&quot;msg&quot;: &quot;done&quot;, &quot;data&quot;: {&quot;info&quot;: f&quot;name - {name}, id - {uid}&quot;}}    )```You can change ``Request``'s ``'data'`` param to another with ``request_data_name`` argument of ``setup_aiohttp_apispec`` function:```pythonsetup_aiohttp_apispec(    app=app,    request_data_name=&quot;validated_data&quot;,)...@request_schema(RequestSchema(strict=True))async def index(request):    uid = request[&quot;validated_data&quot;][&quot;id&quot;]    ...```Also you can do it for specific view using ```put_into``` parameter (beginning from version 2.0):```python@request_schema(RequestSchema(strict=True), put_into=&quot;validated_data&quot;)async def index(request):    uid = request[&quot;validated_data&quot;][&quot;id&quot;]    ...```## More decoratorsStarting from version 2.0 you can use shortenings for documenting and validating specific request parts like cookies, headers etc using those decorators:| Decorator name | Default put_into param ||:----------|:-----------------|| match_info_schema | match_info || querystring_schema | querystring || form_schema | form || json_schema | json || headers_schema | headers || cookies_schema | cookies | And example:```python@docs(    tags=[&quot;users&quot;],    summary=&quot;Create new user&quot;,    description=&quot;Add new user to our toy database&quot;,    responses={        200: {&quot;description&quot;: &quot;Ok. User created&quot;, &quot;schema&quot;: OkResponse},        401: {&quot;description&quot;: &quot;Unauthorized&quot;},        422: {&quot;description&quot;: &quot;Validation error&quot;},        500: {&quot;description&quot;: &quot;Server error&quot;},    },)@headers_schema(AuthHeaders)  # &lt;- schema for headers validation@json_schema(UserMeta)  # &lt;- schema for json body validation@querystring_schema(UserParams)  # &lt;- schema for querystring params validationasync def create_user(request: web.Request):    headers = request[&quot;headers&quot;]  # &lt;- validated headers!    json_data = request[&quot;json&quot;]  # &lt;- validated json!    query_params = request[&quot;querystring&quot;]  # &lt;- validated querystring!    ...```## Custom error handlingIf you want to catch validation errors by yourself you could use `error_callback` parameter and create your custom error handler. Note thatit can be one of coroutine or callable and it should have interface exactly like in examples below:```pythonfrom marshmallow import ValidationError, Schemafrom aiohttp import webfrom typing import Optional, Mapping, NoReturndef my_error_handler(    error: ValidationError,    req: web.Request,    schema: Schema,    error_status_code: Optional[int] = None,    error_headers: Optional[Mapping[str, str]] = None,) -&gt; NoReturn:    raise web.HTTPBadRequest(            body=json.dumps(error.messages),            headers=error_headers,            content_type=&quot;application/json&quot;,        )setup_aiohttp_apispec(app, error_callback=my_error_handler)```Also you can create your own exceptions and create regular Request in middleware like so:```pythonclass MyException(Exception):    def __init__(self, message):        self.message = message# It can be coroutine as well:async def my_error_handler(    error, req, schema, error_status_code, error_headers):    await req.app[&quot;db&quot;].do_smth()  # So you can use some async stuff    raise MyException({&quot;errors&quot;: error.messages, &quot;text&quot;: &quot;Oops&quot;})# This middleware will handle your own exceptions:@web.middlewareasync def intercept_error(request, handler):    try:        return await handler(request)    except MyException as e:        return web.json_response(e.message, status=400)setup_aiohttp_apispec(app, error_callback=my_error_handler)# Do not forget to add your own middleware before validation_middlewareapp.middlewares.extend([intercept_error, validation_middleware])```## Build swagger web client#### 3.X SwaggerUI versionJust add `swagger_path` parameter to `setup_aiohttp_apispec` function.For example:```pythonsetup_aiohttp_apispec(app, swagger_path=&quot;/docs&quot;)```Then go to `/docs` and see awesome SwaggerUI#### 2.X SwaggerUI versionIf you prefer older version you can use [aiohttp_swagger](https://github.com/cr0hn/aiohttp-swagger) library.`aiohttp-apispec` adds `swagger_dict` parameter to aiohttp web application after initialization (with `setup_aiohttp_apispec` function). So you can use it easily like:```Pythonfrom aiohttp_apispec import setup_aiohttp_apispecfrom aiohttp_swagger import setup_swaggerdef create_app(app):    setup_aiohttp_apispec(app)    async def swagger(app):        setup_swagger(            app=app, swagger_url=&quot;/api/doc&quot;, swagger_info=app[&quot;swagger_dict&quot;]        )    app.on_startup.append(swagger)    # now we can access swagger client on '/api/doc' url    ...    return app```## VersioningThis software follows [Semantic Versioning](http://semver.org/).------Please star this repository if this project helped you!</longdescription>
</pkgmetadata>