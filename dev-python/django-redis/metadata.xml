<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==============================Redis cache backend for Django==============================.. image:: https://jazzband.co/static/img/badge.svg    :target: https://jazzband.co/    :alt: Jazzband.. image:: https://github.com/jazzband/django-redis/actions/workflows/ci.yml/badge.svg   :target: https://github.com/jazzband/django-redis/actions/workflows/ci.yml   :alt: GitHub Actions.. image:: https://codecov.io/gh/jazzband/django-redis/branch/master/graph/badge.svg   :target: https://codecov.io/gh/jazzband/django-redis   :alt: Coverage.. image:: https://img.shields.io/pypi/v/django-redis.svg?style=flat    :target: https://pypi.org/project/django-redis/This is a `Jazzband &lt;https://jazzband.co&gt;`_ project. By contributing you agreeto abide by the `Contributor Code of Conduct&lt;https://jazzband.co/about/conduct&gt;`_ and follow the `guidelines&lt;https://jazzband.co/about/guidelines&gt;`_.Introduction------------django-redis is a BSD licensed, full featured Redis cache and session backendfor Django.Why use django-redis?~~~~~~~~~~~~~~~~~~~~~- Uses native redis-py url notation connection strings- Pluggable clients- Pluggable parsers- Pluggable serializers- Primary/secondary support in the default client- Comprehensive test suite- Used in production in several projects as cache and session storage- Supports infinite timeouts- Facilities for raw access to Redis client/connection pool- Highly configurable (can emulate memcached exception behavior, for example)- Unix sockets supported by defaultRequirements~~~~~~~~~~~~- `Python`_ 3.6+- `Django`_ 2.2+- `redis-py`_ 3.0+- `Redis server`_ 2.8+.. _Python: https://www.python.org/downloads/.. _Django: https://www.djangoproject.com/download/.. _redis-py: https://pypi.org/project/redis/.. _Redis server: https://redis.io/downloadUser guide----------Installation~~~~~~~~~~~~Install with pip:.. code-block:: console    $ python -m pip install django-redisConfigure as cache backend~~~~~~~~~~~~~~~~~~~~~~~~~~To start using django-redis, you should change your Django cache settings tosomething like:.. code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,            }        }    }django-redis uses the redis-py native URL notation for connection strings, itallows better interoperability and has a connection string in more &quot;standard&quot;way. Some examples:- ``redis://[[username]:[password]]@localhost:6379/0``- ``rediss://[[username]:[password]]@localhost:6379/0``- ``unix://[[username]:[password]]@/path/to/socket.sock?db=0``Three URL schemes are supported:- ``redis://``: creates a normal TCP socket connection- ``rediss://``: creates a SSL wrapped TCP socket connection- ``unix://`` creates a Unix Domain Socket connectionThere are several ways to specify a database number:- A ``db`` querystring option, e.g. ``redis://localhost?db=0``- If using the ``redis://`` scheme, the path argument of the URL, e.g.  ``redis://localhost/0``When using `Redis' ACLs &lt;https://redis.io/topics/acl&gt;`_, you will need to add theusername to the URL (and provide the password with the Cache ``OPTIONS``).The login for the user ``django`` would look like this:.. code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://django@localhost:6379/0&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,                &quot;PASSWORD&quot;: &quot;mysecret&quot;            }        }    }An alternative would be write both username and password into the URL:.. code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://django:mysecret@localhost:6379/0&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,            }        }    }In some circumstances the password you should use to connect Redisis not URL-safe, in this case you can escape it or just use theconvenience option in ``OPTIONS`` dict:.. code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,                &quot;PASSWORD&quot;: &quot;mysecret&quot;            }        }    }Take care, that this option does not overwrites the password in the uri, so ifyou have set the password in the uri, this settings will be ignored.Configure as session backend~~~~~~~~~~~~~~~~~~~~~~~~~~~~Django can by default use any cache backend as session backend and you benefitfrom that by using django-redis as backend for session storage withoutinstalling any additional backends:.. code-block:: python    SESSION_ENGINE = &quot;django.contrib.sessions.backends.cache&quot;    SESSION_CACHE_ALIAS = &quot;default&quot;Testing with django-redis~~~~~~~~~~~~~~~~~~~~~~~~~django-redis supports customizing the underlying Redis client (see &quot;Pluggableclients&quot;). This can be used for testing purposes.In case you want to flush all data from the cache after a test, add thefollowing lines to your test class:.. code-block:: python    from django_redis import get_redis_connection    def tearDown(self):        get_redis_connection(&quot;default&quot;).flushall()Advanced usage--------------Pickle version~~~~~~~~~~~~~~For almost all values, django-redis uses pickle to serialize objects.The ``pickle.DEFAULT_PROTOCOL`` version of pickle is used by default to ensure safe upgrades and compatibility across Python versions.If you want set a concrete version, you can do it, using ``PICKLE_VERSION`` option:.. code-block:: python    CACHES = {        &quot;default&quot;: {            # ...            &quot;OPTIONS&quot;: {                &quot;PICKLE_VERSION&quot;: -1  # Will use highest protocol version available            }        }    }Socket timeout~~~~~~~~~~~~~~Socket timeout can be set using ``SOCKET_TIMEOUT`` and``SOCKET_CONNECT_TIMEOUT`` options:.. code-block:: python    CACHES = {        &quot;default&quot;: {            # ...            &quot;OPTIONS&quot;: {                &quot;SOCKET_CONNECT_TIMEOUT&quot;: 5,  # seconds                &quot;SOCKET_TIMEOUT&quot;: 5,  # seconds            }        }    }``SOCKET_CONNECT_TIMEOUT`` is the timeout for the connection to be establishedand ``SOCKET_TIMEOUT`` is the timeout for read and write operations after theconnection is established.Compression support~~~~~~~~~~~~~~~~~~~django-redis comes with compression support out of the box, but is deactivatedby default. You can activate it setting up a concrete backend:.. code-block:: python    CACHES = {        &quot;default&quot;: {            # ...            &quot;OPTIONS&quot;: {                &quot;COMPRESSOR&quot;: &quot;django_redis.compressors.zlib.ZlibCompressor&quot;,            }        }    }Let see an example, of how make it work with *lzma* compression format:.. code-block:: python    import lzma    CACHES = {        &quot;default&quot;: {            # ...            &quot;OPTIONS&quot;: {                &quot;COMPRESSOR&quot;: &quot;django_redis.compressors.lzma.LzmaCompressor&quot;,            }        }    }*Lz4* compression support (requires the lz4 library):.. code-block:: python    import lz4    CACHES = {        &quot;default&quot;: {            # ...            &quot;OPTIONS&quot;: {                &quot;COMPRESSOR&quot;: &quot;django_redis.compressors.lz4.Lz4Compressor&quot;,            }        }    }*Zstandard (zstd)* compression support (requires the pyzstd library):.. code-block:: python    import pyzstd    CACHES = {        &quot;default&quot;: {            # ...            &quot;OPTIONS&quot;: {                &quot;COMPRESSOR&quot;: &quot;django_redis.compressors.zstd.ZStdCompressor&quot;,            }        }    }Memcached exceptions behavior~~~~~~~~~~~~~~~~~~~~~~~~~~~~~In some situations, when Redis is only used for cache, you do not wantexceptions when Redis is down. This is default behavior in the memcachedbackend and it can be emulated in django-redis.For setup memcached like behaviour (ignore connection exceptions), you shouldset ``IGNORE_EXCEPTIONS`` settings on your cache configuration:.. code-block:: python    CACHES = {        &quot;default&quot;: {            # ...            &quot;OPTIONS&quot;: {                &quot;IGNORE_EXCEPTIONS&quot;: True,            }        }    }Also, you can apply the same settings to all configured caches, you can set the global flag inyour settings:.. code-block:: python    DJANGO_REDIS_IGNORE_EXCEPTIONS = TrueLog Ignored Exceptions~~~~~~~~~~~~~~~~~~~~~~When ignoring exceptions with ``IGNORE_EXCEPTIONS`` or``DJANGO_REDIS_IGNORE_EXCEPTIONS``, you may optionally log exceptions using theglobal variable ``DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS`` in your settings file::    DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = TrueIf you wish to specify the logger in which the exceptions are output, simplyset the global variable ``DJANGO_REDIS_LOGGER`` to the string name and/or pathof the desired logger. This will default to ``__name__`` if no logger isspecified and ``DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS`` is ``True``::    DJANGO_REDIS_LOGGER = 'some.specified.logger'Infinite timeout~~~~~~~~~~~~~~~~django-redis comes with infinite timeouts support out of the box. And itbehaves in same way as django backend contract specifies:- ``timeout=0`` expires the value immediately.- ``timeout=None`` infinite timeout.. code-block:: python    cache.set(&quot;key&quot;, &quot;value&quot;, timeout=None)Get ttl (time-to-live) from key~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~With Redis, you can access to ttl of any stored key, for it, django-redisexposes ``ttl`` function.It returns:- 0 if key does not exists (or already expired).- None for keys that exists but does not have any expiration.- ttl value for any volatile key (any key that has expiration)... code-block:: pycon    &gt;&gt;&gt; from django.core.cache import cache    &gt;&gt;&gt; cache.set(&quot;foo&quot;, &quot;value&quot;, timeout=25)    &gt;&gt;&gt; cache.ttl(&quot;foo&quot;)    25    &gt;&gt;&gt; cache.ttl(&quot;not-existent&quot;)    0With Redis, you can access to ttl of any stored key in milliseconds, for it, django-redisexposes ``pttl`` function... code-block:: pycon    &gt;&gt;&gt; from django.core.cache import cache    &gt;&gt;&gt; cache.set(&quot;foo&quot;, &quot;value&quot;, timeout=25)    &gt;&gt;&gt; cache.pttl(&quot;foo&quot;)    25000    &gt;&gt;&gt; cache.pttl(&quot;not-existent&quot;)    0Expire &amp; Persist~~~~~~~~~~~~~~~~Additionally to the simple ttl query, you can send persist a concrete key orspecify a new expiration timeout using the ``persist`` and ``expire`` methods:.. code-block:: pycon    &gt;&gt;&gt; cache.set(&quot;foo&quot;, &quot;bar&quot;, timeout=22)    &gt;&gt;&gt; cache.ttl(&quot;foo&quot;)    22    &gt;&gt;&gt; cache.persist(&quot;foo&quot;)    True    &gt;&gt;&gt; cache.ttl(&quot;foo&quot;)    None.. code-block:: pycon    &gt;&gt;&gt; cache.set(&quot;foo&quot;, &quot;bar&quot;, timeout=22)    &gt;&gt;&gt; cache.expire(&quot;foo&quot;, timeout=5)    True    &gt;&gt;&gt; cache.ttl(&quot;foo&quot;)    5The ``expire_at`` method can be used to make the key expire at a specific moment in time... code-block:: pycon    &gt;&gt;&gt; cache.set(&quot;foo&quot;, &quot;bar&quot;, timeout=22)    &gt;&gt;&gt; cache.expire_at(&quot;foo&quot;, datetime.now() + timedelta(hours=1))    True    &gt;&gt;&gt; cache.ttl(&quot;foo&quot;)    3600The ``pexpire_at`` method can be used to make the key expire at a specific moment in time with milliseconds precision:.. code-block:: pycon    &gt;&gt;&gt; cache.set(&quot;foo&quot;, &quot;bar&quot;, timeout=22)    &gt;&gt;&gt; cache.pexpire_at(&quot;foo&quot;, datetime.now() + timedelta(milliseconds=900, hours=1))    True    &gt;&gt;&gt; cache.ttl(&quot;foo&quot;)    3601    &gt;&gt;&gt; cache.pttl(&quot;foo&quot;)    3600900The ``pexpire`` method can be used to provide millisecond precision:.. code-block:: pycon    &gt;&gt;&gt; cache.set(&quot;foo&quot;, &quot;bar&quot;, timeout=22)    &gt;&gt;&gt; cache.pexpire(&quot;foo&quot;, timeout=5500)    True    &gt;&gt;&gt; cache.pttl(&quot;foo&quot;)    5500Locks~~~~~It also supports the Redis ability to create Redis distributed named locks. TheLock interface is identical to the ``threading.Lock`` so you can use it asreplacement... code-block:: python    with cache.lock(&quot;somekey&quot;):        do_some_thing()Scan &amp; Delete keys in bulk~~~~~~~~~~~~~~~~~~~~~~~~~~django-redis comes with some additional methods that help with searching ordeleting keys using glob patterns... code-block:: pycon    &gt;&gt;&gt; from django.core.cache import cache    &gt;&gt;&gt; cache.keys(&quot;foo_*&quot;)    [&quot;foo_1&quot;, &quot;foo_2&quot;]A simple search like this will return all matched values. In databases with alarge number of keys this isn't suitable method. Instead, you can use the``iter_keys`` function that works like the ``keys`` function but uses Redisserver side cursors. Calling ``iter_keys`` will return a generator that you canthen iterate over efficiently... code-block:: pycon    &gt;&gt;&gt; from django.core.cache import cache    &gt;&gt;&gt; cache.iter_keys(&quot;foo_*&quot;)    &lt;generator object algo at 0x7ffa9c2713a8&gt;    &gt;&gt;&gt; next(cache.iter_keys(&quot;foo_*&quot;))    &quot;foo_1&quot;For deleting keys, you should use ``delete_pattern`` which has the same globpattern syntax as the ``keys`` function and returns the number of deleted keys... code-block:: pycon    &gt;&gt;&gt; from django.core.cache import cache    &gt;&gt;&gt; cache.delete_pattern(&quot;foo_*&quot;)To achieve the best performance while deleting many keys, you should set ``DJANGO_REDIS_SCAN_ITERSIZE`` to a relativelyhigh number (e.g., 100_000) by default in Django settings or pass it directly to the ``delete_pattern``... code-block:: pycon    &gt;&gt;&gt; from django.core.cache import cache    &gt;&gt;&gt; cache.delete_pattern(&quot;foo_*&quot;, itersize=100_000)Redis native commands~~~~~~~~~~~~~~~~~~~~~django-redis has limited support for some Redis atomic operations, such as thecommands ``SETNX`` and ``INCR``.You can use the ``SETNX`` command through the backend ``set()`` method with the``nx`` parameter:.. code-block:: pycon    &gt;&gt;&gt; from django.core.cache import cache    &gt;&gt;&gt; cache.set(&quot;key&quot;, &quot;value1&quot;, nx=True)    True    &gt;&gt;&gt; cache.set(&quot;key&quot;, &quot;value2&quot;, nx=True)    False    &gt;&gt;&gt; cache.get(&quot;key&quot;)    &quot;value1&quot;Also, the ``incr`` and ``decr`` methods use Redis atomic operations when thevalue that a key contains is suitable for it.Raw client access~~~~~~~~~~~~~~~~~In some situations your application requires access to a raw Redis client touse some advanced features that aren't exposed by the Django cache interface.To avoid storing another setting for creating a raw connection, django-redisexposes functions with which you can obtain a raw client reusing the cacheconnection string: ``get_redis_connection(alias)``... code-block:: pycon    &gt;&gt;&gt; from django_redis import get_redis_connection    &gt;&gt;&gt; con = get_redis_connection(&quot;default&quot;)    &gt;&gt;&gt; con    &lt;redis.client.Redis object at 0x2dc4510&gt;WARNING: Not all pluggable clients support this feature.Connection pools~~~~~~~~~~~~~~~~Behind the scenes, django-redis uses the underlying redis-py connection poolimplementation, and exposes a simple way to configure it. Alternatively, youcan directly customize a connection/connection pool creation for a backend.The default redis-py behavior is to not close connections, recycling them whenpossible.Configure default connection pool^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^The default connection pool is simple. For example, you can customize themaximum number of connections in the pool by setting ``CONNECTION_POOL_KWARGS``in the ``CACHES`` setting:.. code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            # ...            &quot;OPTIONS&quot;: {                &quot;CONNECTION_POOL_KWARGS&quot;: {&quot;max_connections&quot;: 100}            }        }    }You can verify how many connections the pool has opened with the followingsnippet:.. code-block:: python    from django_redis import get_redis_connection    r = get_redis_connection(&quot;default&quot;)  # Use the name you have defined for Redis in settings.CACHES    connection_pool = r.connection_pool    print(&quot;Created connections so far: %d&quot; % connection_pool._created_connections)Since the default connection pool passes all keyword arguments it doesn't useto its connections, you can also customize the connections that the pool makesby adding those options to ``CONNECTION_POOL_KWARGS``:.. code-block:: python    CACHES = {        &quot;default&quot;: {            # ...            &quot;OPTIONS&quot;: {                &quot;CONNECTION_POOL_KWARGS&quot;: {&quot;max_connections&quot;: 100, &quot;retry_on_timeout&quot;: True}            }        }    }Use your own connection pool subclass^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Sometimes you want to use your own subclass of the connection pool. This ispossible with django-redis using the ``CONNECTION_POOL_CLASS`` parameter in thebackend options... code-block:: python    from redis.connection import ConnectionPool    class MyOwnPool(ConnectionPool):        # Just doing nothing, only for example purpose        pass.. code-block:: python    # Omitting all backend declaration boilerplate code.    &quot;OPTIONS&quot;: {        &quot;CONNECTION_POOL_CLASS&quot;: &quot;myproj.mypool.MyOwnPool&quot;,    }Customize connection factory^^^^^^^^^^^^^^^^^^^^^^^^^^^^If none of the previous methods satisfies you, you can get in the middle of thedjango-redis connection factory process and customize or completely rewrite it.By default, django-redis creates connections through the``django_redis.pool.ConnectionFactory`` class that is specified in the globalDjango setting ``DJANGO_REDIS_CONNECTION_FACTORY``... code-block:: python    class ConnectionFactory(object):        def get_connection_pool(self, params: dict):            # Given connection parameters in the `params` argument, return new            # connection pool. It should be overwritten if you want do            # something before/after creating the connection pool, or return            # your own connection pool.            pass        def get_connection(self, params: dict):            # Given connection parameters in the `params` argument, return a            # new connection. It should be overwritten if you want to do            # something before/after creating a new connection. The default            # implementation uses `get_connection_pool` to obtain a pool and            # create a new connection in the newly obtained pool.            pass        def get_or_create_connection_pool(self, params: dict):            # This is a high layer on top of `get_connection_pool` for            # implementing a cache of created connection pools. It should be            # overwritten if you want change the default behavior.            pass        def make_connection_params(self, url: str) -&gt; dict:            # The responsibility of this method is to convert basic connection            # parameters and other settings to fully connection pool ready            # connection parameters.            pass        def connect(self, url: str):            # This is really a public API and entry point for this factory            # class. This encapsulates the main logic of creating the            # previously mentioned `params` using `make_connection_params` and            # creating a new connection using the `get_connection` method.            passUse the sentinel connection factory^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^In order to facilitate using `Redis Sentinels`_, django-redis comes with abuilt in sentinel connection factory, which creates sentinel connection pools.In order to enable this functionality you should add the following:.. code-block:: python    # Enable the alternate connection factory.    DJANGO_REDIS_CONNECTION_FACTORY = 'django_redis.pool.SentinelConnectionFactory'    # These sentinels are shared between all the examples, and are passed    # directly to redis Sentinel. These can also be defined inline.    SENTINELS = [        ('sentinel-1', 26379),        ('sentinel-2', 26379),        ('sentinel-3', 26379),    ]    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            # The hostname in LOCATION is the primary (service / master) name            &quot;LOCATION&quot;: &quot;redis://service_name/db&quot;,            &quot;OPTIONS&quot;: {                # While the default client will work, this will check you                # have configured things correctly, and also create a                # primary and replica pool for the service specified by                # LOCATION rather than requiring two URLs.                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.SentinelClient&quot;,                # Sentinels which are passed directly to redis Sentinel.                &quot;SENTINELS&quot;: SENTINELS,                # kwargs for redis Sentinel (optional).                &quot;SENTINEL_KWARGS&quot;: {},                # You can still override the connection pool (optional).                &quot;CONNECTION_POOL_CLASS&quot;: &quot;redis.sentinel.SentinelConnectionPool&quot;,            },        },        # A minimal example using the SentinelClient.        &quot;minimal&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            # The SentinelClient will use this location for both the primaries            # and replicas.            &quot;LOCATION&quot;: &quot;redis://minimal_service_name/db&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.SentinelClient&quot;,                &quot;SENTINELS&quot;: SENTINELS,            },        },        # A minimal example using the DefaultClient.        &quot;other&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: [                # The DefaultClient is [primary, replicas...], but with the                # SentinelConnectionPool it only requires one &quot;is_master=0&quot;.                &quot;redis://other_service_name/db?is_master=1&quot;,                &quot;redis://other_service_name/db?is_master=0&quot;,            ],            &quot;OPTIONS&quot;: {&quot;SENTINELS&quot;: SENTINELS},        },        # A minimal example only using only replicas in read only mode (and        # the DefaultClient).        &quot;readonly&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://readonly_service_name/db?is_master=0&quot;,            &quot;OPTIONS&quot;: {&quot;SENTINELS&quot;: SENTINELS},        },    }.. _Redis Sentinels: https://redis.io/topics/sentinelPluggable parsers~~~~~~~~~~~~~~~~~redis-py (the Python Redis client used by django-redis) comes with a purePython Redis parser that works very well for most common task, but if you wantsome performance boost, you can use hiredis.hiredis is a Redis client written in C and it has its own parser that can beused with django-redis... code-block:: python    &quot;OPTIONS&quot;: {        &quot;PARSER_CLASS&quot;: &quot;redis.connection.HiredisParser&quot;,    }Pluggable clients~~~~~~~~~~~~~~~~~django-redis is designed for to be very flexible and very configurable. For it,it exposes a pluggable backends that make easy extend the default behavior, andit comes with few ones out the box.Default client^^^^^^^^^^^^^^Almost all about the default client is explained, with one exception: thedefault client comes with replication support.To connect to a Redis replication setup, you should change the ``LOCATION`` tosomething like:.. code-block:: python    &quot;LOCATION&quot;: [        &quot;redis://127.0.0.1:6379/1&quot;,        &quot;redis://127.0.0.1:6378/1&quot;,    ]The first connection string represents the primary server and the rest toreplica servers.WARNING: Replication setup is not heavily tested in production environments.Shard client^^^^^^^^^^^^This pluggable client implements client-side sharding. It inherits almost allfunctionality from the default client. To use it, change your cache settings tosomething like this:.. code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: [                &quot;redis://127.0.0.1:6379/1&quot;,                &quot;redis://127.0.0.1:6379/2&quot;,            ],            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.ShardClient&quot;,            }        }    }WARNING: Shard client is still experimental, so be careful when using it inproduction environments.Herd client^^^^^^^^^^^This pluggable client helps dealing with the thundering herd problem. You can read more about iton link: `Wikipedia &lt;https://en.wikipedia.org/wiki/Thundering_herd_problem&gt;`_Like previous pluggable clients, it inherits all functionality from the default client, adding someadditional methods for getting/setting keys... code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.HerdClient&quot;,            }        }    }This client exposes additional settings:- ``CACHE_HERD_TIMEOUT``: Set default herd timeout. (Default value: 60s)Pluggable serializer~~~~~~~~~~~~~~~~~~~~The pluggable clients serialize data before sending it to the server. Bydefault, django-redis serializes the data using the Python ``pickle`` module.This is very flexible and can handle a large range of object types.To serialize using JSON instead, the serializer ``JSONSerializer`` is alsoavailable... code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,                &quot;SERIALIZER&quot;: &quot;django_redis.serializers.json.JSONSerializer&quot;,            }        }    }There's also support for serialization using `MsgPack`_ (that requires themsgpack library):.. code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,                &quot;SERIALIZER&quot;: &quot;django_redis.serializers.msgpack.MSGPackSerializer&quot;,            }        }    }.. _MsgPack: https://msgpack.org/Pluggable Redis client~~~~~~~~~~~~~~~~~~~~~~django-redis uses the Redis client ``redis.client.StrictClient`` by default. Itis possible to use an alternative client.You can customize the client used by setting ``REDIS_CLIENT_CLASS`` in the``CACHES`` setting. Optionally, you can provide arguments to this class bysetting ``REDIS_CLIENT_KWARGS``... code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;OPTIONS&quot;: {                &quot;REDIS_CLIENT_CLASS&quot;: &quot;my.module.ClientClass&quot;,                &quot;REDIS_CLIENT_KWARGS&quot;: {&quot;some_setting&quot;: True},            }        }    }Closing Connections~~~~~~~~~~~~~~~~~~~The default django-redis behavior on close() is to keep the connections to Redis server.You can change this default behaviour for all caches by the ``DJANGO_REDIS_CLOSE_CONNECTION = True``in the django settings (globally) or (at cache level) by setting ``CLOSE_CONNECTION: True`` in the ``OPTIONS``for each configured cache.Setting True as a value will instruct the django-redis to close all the connections (since v. 4.12.2), irrespectively of its current usage... code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,                &quot;CLOSE_CONNECTION&quot;: True,            }        }    }SSL/TLS and Self-Signed certificates~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~In case you encounter a Redis server offering a TLS connection using aself-signed certificate you may disable certification verification with thefollowing:.. code-block:: python    CACHES = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,            &quot;LOCATION&quot;: &quot;rediss://127.0.0.1:6379/1&quot;,            &quot;OPTIONS&quot;: {                &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,                &quot;CONNECTION_POOL_KWARGS&quot;: {&quot;ssl_cert_reqs&quot;: None}            }        }    }License-------.. code-block:: text    Copyright (c) 2011-2015 Andrey Antukh &lt;niwi@niwi.nz&gt;    Copyright (c) 2011 Sean Bleier    All rights reserved.    Redistribution and use in source and binary forms, with or without    modification, are permitted provided that the following conditions    are met:    1. Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.    2. Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.    3. The name of the author may not be used to endorse or promote products       derived from this software without specific prior written permission.    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS`` AND ANY EXPRESS OR    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES    OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.    IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT    NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</longdescription>
</pkgmetadata>