<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ValidatorValidator is a Python library for dealing with request validating.### Table of Contents* **[Installation](#Installation)*** **[Overview](#Overview)**   * **[Usage](#Usage)**   * **[Validated Data/Error Messages](#Messages)**   * **[Validating Arrays](#Validating-Arrays)**   * **[Available Validation Rules](#Available-Validation-Rules)**   * **[Rules](#Rules)**   * **[Rules Interconnection](#Rules-Interconnection)**   * **[Custom Rules](#Custom-Rules)*** **[Examples](#Examples)*** **[Contributing](#Contributing)*** **[License](#License)**&lt;a name=&quot;Installation&quot;&gt;&lt;/a&gt;## InstallationUse the package manager [pip](https://pypi.org/project/validator/) to install Validator.```bashpip install validator```&lt;a name=&quot;Overview&quot;&gt;&lt;/a&gt;&lt;a name=&quot;Usage&quot;&gt;&lt;/a&gt;## UsageUser should pass request dictionary and rules dictionary for validating data in the request.Please see examples below:```pythonfrom validator import validaterequest = {&quot;name&quot;: &quot;John Doe&quot;,           &quot;age&quot;: 33,           &quot;mail&quot;: &quot;john_doe@gmail.com&quot;}rules = {&quot;name&quot;: &quot;required&quot;,         &quot;age&quot;: &quot;integer|min:18&quot;,         &quot;mail&quot;: &quot;required|mail&quot;}result = validate(request, rules) # True````validate()` returns either True or False.Another option is to use `Validator` class```pythonfrom validator import Validatorrequest = {...}rules = {...}val = Validator(request, rules)result = val.validate() # True```&lt;a name=&quot;Messages&quot;&gt;&lt;/a&gt;## Validated Data/Error MessagesValidator allows user to have a look at failed validations and passed validations. `validated_data` is extremly useful when request contains data that is not needed for initialization of model, you can get rid of them and validate at the same time. See examples below:* Validated Data    ```python    from validator import validate    request = {&quot;first_name&quot;: &quot;John&quot;,               &quot;last_name&quot;: &quot;Doe&quot;,               &quot;age&quot;: 33,               &quot;mail&quot;: &quot;johndoe@gmail.com&quot;,               &quot;_token&quot;: &quot;WpH0UPfy0AXzMtK2UWtJ&quot;,               &quot;_cookie_data&quot;: &quot;e9Uixp8hzUySy6bw3MuZ&quot;,               &quot;_session_id&quot;: &quot;ZB7q7uIVdWBKgSCSSWAa&quot;}    rule = {&quot;first_name&quot;: &quot;required&quot;,            &quot;last_name&quot;: &quot;required&quot;,            &quot;age&quot;: &quot;required|min:18&quot;,            &quot;mail&quot;: &quot;required|mail&quot;}    result, validated_data, _ = validate(request, rule, return_info=True)    &quot;&quot;&quot;    result = True    validated_data = {&quot;first_name&quot;: &quot;John&quot;,                      &quot;last_name&quot;: &quot;Doe&quot;,                      &quot;age&quot;: 33,                      &quot;mail&quot;: &quot;johndoe@gmail.com&quot;}    &quot;&quot;&quot;    ```* Error Messages    ```python    from validator import validate    request = {&quot;name&quot;: &quot;&quot;,               &quot;mail&quot;: &quot;john_doe&quot;}    rule = {&quot;name&quot;: &quot;required&quot;,            &quot;mail&quot;: &quot;mail&quot;}    result, _, errors = validate(request, rule, return_info=True)    &quot;&quot;&quot;    result = False    errors = {&quot;name&quot;: {&quot;Required': &quot;Field was empty&quot;},              &quot;mail&quot;: {&quot;Mail': &quot;Expected a Mail, Got: john_doe&quot;}}    &quot;&quot;&quot;    ```Or you can use `Validator` class for error messages as well as for validated data.```pythonval = Validator(request, rules)result = val.validate()validated_data = val.get_validated_data()errors = val.get_errors()```&lt;a name=&quot;Validating-Arrays&quot;&gt;&lt;/a&gt;## Validating ArraysValidator comes with `validate_many()` function, which validates multiple requests. Function takes list of requests and one rule. This rule is checked for all the requests. If one or more requests fail validation function returns False, otherwise (if all pass) True. For more details see example below:Validation Passes:```pythonfrom validator import validate_manyrequests = [{&quot;name&quot;: &quot;John&quot;},            {&quot;name&quot;: &quot;Rob&quot;},            {&quot;name&quot;: &quot;Tom&quot;},            {&quot;name&quot;: &quot;Greg&quot;}]rule = {&quot;name&quot;: &quot;required|min:3&quot;}result = validate_many(requests, rule) # True```We can also have a look at failed validations and error messages. `validate_many()` takes third argument as boolean, indicating return of error messages.Validation Fails:```pythonfrom validator import validate_manyrequests = [{&quot;name&quot;: &quot;John&quot;},            {&quot;name&quot;: &quot;&quot;},            {&quot;name&quot;: &quot;Yo&quot;},            {&quot;name&quot;: &quot;Greg&quot;}]rule = {&quot;name&quot;: &quot;required|min:3&quot;}result, errors = validate_many(requests, rule, return_info=True)&quot;&quot;&quot;result = Falseerrors = [{},          {&quot;name&quot;: {&quot;Min&quot;: &quot;Expected Maximum: 3, Got: 0&quot;, &quot;Required&quot;: &quot;Field was empty&quot;}},          {&quot;name&quot;: {&quot;Min&quot;: &quot;Expected Maximum: 3, Got: 2&quot;}},          {}]&quot;&quot;&quot;```&lt;a name=&quot;Available-Validation-Rules&quot;&gt;&lt;/a&gt;## Available Validation Rules#### Validator comes with pre initialized rules. *All of rules are listed in [RULES.md](https://github.com/CSenshi/Validator/blob/master/RULES.md) file*&lt;a name=&quot;Rules&quot;&gt;&lt;/a&gt;## RulesValidator Rules can be used in different ways. Please see some examples below:#### Strings```pythonrule = {&quot;name&quot;: &quot;required&quot;,        &quot;age&quot;: &quot;integer|min:18&quot;,        &quot;mail&quot;: &quot;required|mail&quot;}```#### Array of Strings```pythonrule = {&quot;name&quot;: [&quot;required&quot;],        &quot;age&quot;: [&quot;integer&quot;, &quot;min:18&quot;],        &quot;mail&quot;: [&quot;required&quot;, &quot;mail&quot;]}```#### Array of Rules```pythonfrom validator import rules as Rrules = {&quot;name&quot;: [R.Required()],         &quot;age&quot;: [R.Integer(), R.Min(18)],         &quot;mail&quot;: [R.Requried(), R.Mail()]}```#### Other Miscellaneous```pythonfrom validator import rules as Rrules = {&quot;name&quot;: R.Required(),           # no need for Array Brackets if one rule         &quot;age&quot;: [R.Integer, R.Min(18)],         &quot;mail&quot;: [R.Requried, R.Mail]}   # no need for class initialization with brakcets ()                                         # if no arguments are passed to rule```&lt;a name=&quot;Rules-Interconnection&quot;&gt;&lt;/a&gt;## Rules InterconnectionRules can affect each other. Let's take a look at `Size` rule. It takes 1 argument and checks if data is equal to given value (example: `'size:10'`).* Case 1: checks for length of '18' to be 18. len('18') is 2, therefore it is False.```pythonrequest = {&quot;age&quot; : &quot;18&quot;}rule = {&quot;age&quot; : &quot;size:18&quot;}validate(request, rule)&quot;&quot;&quot;result = Falseerrors = {&quot;age&quot;: {&quot;Size&quot;: &quot;Expected Size:18, Got:2&quot;}}&quot;&quot;&quot;```* Case 2: checks if int representation of '18' is equal to 18. (int('18') = 18), therefore it is True.```pythonrequest = {&quot;age&quot; : &quot;18&quot;}rule = {&quot;age&quot; : &quot;integer|size:18&quot;}validate(request, rule) # True```*For more details please view [Size](https://github.com/CSenshi/Validator/blob/master/RULES.md#size) Rule*&lt;a name=&quot;Custom-Rules&quot;&gt;&lt;/a&gt;## Custom RulesWe give users ability to advance and use their own checkers. Write function and use is as a rule. See examples below:1. Use defined functions:     ```python3    from validator import validate    def func_age(x):        return x &gt;= 18    req = {&quot;age&quot;: 30}    rules = {&quot;age&quot;: func_age}    validate(req, rules)    ```2. Use Lambda functions:     ```python3    from validator import validate    req = {&quot;age&quot;: 30}    rules = {&quot;age&quot;: lambda x: x &gt;= 18}    validate(req, rules)    ```3. Any callable class *(NOTE: Pass class instance and not class itself)*:    ```python3    from validator import validate    class checker:      def __init__(self):          pass      def __call__(self, x):          return x &gt;= 456    req = {&quot;age&quot;: 30}    rules = {&quot;age&quot;: checker()}    validate(req, rules)    ```4. Custom Rule:    ```python3    from validator import validate    from validator.rules import Rule    class AgeRule(Rule):        def __init__(self, min):            Rule.__init__(self)            self.min = min        def check(self, arg):            return self.min &lt;= arg    req = {&quot;age&quot;: 30}    rules = {&quot;age&quot;: AgeRule(18)}    validate(req, rules)    ```&lt;a name=&quot;Examples&quot;&gt;&lt;/a&gt;## ExamplesWe have written some examples for you to get started easier. Please view [Examples](examples) folder, where you can find validator usages with frameworks like Flask, Django and etc.&lt;a name=&quot;Contributing&quot;&gt;&lt;/a&gt;## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please see [CONTRIBUTING.md](https://github.com/CSenshi/Validator/blob/master/CONTRIBUTING.md) before making PR :)&lt;a name=&quot;License&quot;&gt;&lt;/a&gt;## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>