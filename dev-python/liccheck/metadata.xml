<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://badge.fury.io/py/liccheck.svg    :target: https://badge.fury.io/py/liccheck.. image:: https://github.com/dhatim/python-license-check/workflows/build/badge.svg    :target: https://github.com/dhatim/python-license-check/actions.. image:: https://codecov.io/gh/dhatim/python-license-check/branch/master/graph/badge.svg    :target: https://codecov.io/gh/dhatim/python-license-checkPython License Checker======================Check python packages listed in a ``requirements.txt`` file and report license issues.About=====You can define a list of authorized licenses, unauthorized licenses and authorized packages.The tool will check the ``requirements.txt`` file, check packages and theirdependencies and return an error if some packages are not compliantagainst the given strategy.The tool has 3 levels of checks to select from:Standard (default):    A package is considered as compliant when at least one of its licenses is    in the authorized license list, or if the package is in the list of    authorized packages.Cautious:    Same as *Standard*, but a package is **not** considered compliant when one    or more of its licenses is in the unauthorized license list, even if it    also has a license in the authorized license list. A package is still    compliant if present in the authorized packages list.Paranoid:    All licenses listed for a package must be in the authorised license list    for the package to be considered compliant. A package is still    compliant if present in the authorized packages list.Assumption==========The tool requires to be installed in the same python (virtual) environment as the packages. This, because it uses``pkg_resources`` to access the packages resources and thus, their licenses information.How to install==============::$ pip install liccheckHow to use==========``liccheck`` will read the ``requirements.txt`` and verify compliance of packages against a strategy defined in the ``ini`` file.If the requirements file is not specified on the command line, it will search for ``requirements.txt`` in the current folder.You have to setup an ``ini`` file with an authorized license list, unauthorized license list and authorized package list. The packages from your ``requirements.txt`` need to all be installed in the same python environment/virtualenv as ``liccheck``.If the ``ini`` file is not specified on the command line, it will search for ``liccheck.ini`` in the current folder.Here is an example of a ``liccheck.ini`` file:::# Authorized and unauthorized licenses in LOWER CASE[Licenses]authorized_licenses:bsdnew bsdbsd licensenew bsd licensesimplified bsdapacheapache 2.0apache software licensegnu lgpllgpl with exceptions or zplisc licenseisc license (iscl)mitmit licensepython software foundation licensezpl 2.1unauthorized_licenses:gpl v3[Authorized Packages]# Python software license (see http://zesty.ca/python/uuid.README.txt)uuid: 1.30Note: versions of authorized packages can be defined using `PEP-0440 version specifiers &lt;https://www.python.org/dev/peps/pep-0440/#version-specifiers&gt;`_, such as ``&gt;=1.3,&lt;1.4``. The implementation uses the nice package `semantic_version &lt;https://pypi.org/project/semantic_version/&gt;`_.For demo purpose, let's say your ``requirements.txt`` file contains this:::Flask&gt;=0.12.1flask_restfuljsonifypsycopg2&gt;=2.7.1nosescipyscikit-learnpandasnumpyargparseuuidsqlbuilderproboscispyyaml&gt;=3.12The execution will output this:::    $ liccheck -s my_strategy.ini -r my_project/required.txt    gathering licenses...23 packages and dependencies.    check forbidden packages based on licenses...none    check authorized packages based on licenses...19 packages.    check authorized packages...4 packages.    check unknown licenses...noneIf some dependencies are unknown or are not matching the strategy, the output will be something like:::    $ liccheck -s my_strategy.ini -r my_project/requirements.txtgathering licenses...32 packages and dependencies.check forbidden packages based on licenses...1 forbidden packages :    Unidecode (0.4.21) : GPL ['GNU General Public License v2 or later (GPLv2+)']      dependency:          Unidecode &lt;&lt; python-slugify &lt;&lt; yoyo-migrationscheck authorized packages based on licenses...24 packages.check authorized packages...6 packages.check unknown licenses...1 unknown packages :    feedparser (5.2.1) : UNKNOWN []      dependency:          feedparserAlso supports pyproject.toml like:::    [project]    dependencies = [        &quot;Flask&gt;=0.12.1&quot;,        &quot;flask_restful&quot;,        &quot;jsonify&quot;,        &quot;psycopg2&gt;=2.7.1&quot;,        &quot;nose&quot;,        &quot;scipy&quot;,        &quot;scikit-learn&quot;,        &quot;pandas&quot;,        &quot;numpy&quot;,        &quot;argparse&quot;,        &quot;uuid&quot;,        &quot;sqlbuilder&quot;,        &quot;proboscis&quot;,        &quot;pyyaml&gt;=3.12&quot;,    ]    [project.optional-dependencies]    test = [        &quot;pytest&gt;=3.6.3&quot;,    ]    [tool.liccheck]    authorized_licenses = [        &quot;bsd&quot;,        &quot;new bsd&quot;,        &quot;bsd license&quot;,        &quot;new bsd license&quot;,        &quot;simplified bsd&quot;,        &quot;apache&quot;,        &quot;apache 2.0&quot;,        &quot;apache software license&quot;,        &quot;gnu lgpl&quot;,        &quot;lgpl with exceptions or zpl&quot;,        &quot;isc license&quot;,        &quot;isc license (iscl)&quot;,        &quot;mit&quot;,        &quot;mit license&quot;,        &quot;python software foundation license&quot;,        &quot;zpl 2.1&quot;,    ]    unauthorized_licenses = [        &quot;gpl v3&quot;,    ]    # strategy_ini_file = &quot;./liccheck.ini&quot;    # level = &quot;STANDARD&quot;    # requirement_txt_file = &quot;./requirements.txt&quot; # ignored if dependencies or optional_dependencies are defined    # reporting_txt_file = &quot;path/to/reporting.txt file&quot; # by default is None    # no_deps = false    dependencies = true # to load [project.dependencies]    optional_dependencies = [&quot;test&quot;] # to load extras from [project.optional-dependencies]    [tool.liccheck.authorized_packages]    uuid = &quot;1.30&quot;By default, exact matching is required between each package's license and one of the license of the authorized or unauthorized list.You can also provide regular expressions to match licenses by using the ``as_regex`` boolean flag. For instance, to exclude GPL licenses,one could define the following configuration in ``pyproject.toml``:::    ...    unauthorized_licenses = [        '\bgpl'    ]    as_regex = true    Using liccheck with pre-commit==============================Add this to your .pre-commit-config.yaml:::    - repo: https://github.com/dhatim/python-license-check      rev: master      hooks:      - id: liccheck        language: systemContributing============To run the tests:::    $ tox -p allLicensing=========-  See `LICENSE &lt;LICENSE&gt;`__</longdescription>
</pkgmetadata>