<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>================================OCS - Observatory Control System================================.. image:: https://img.shields.io/github/actions/workflow/status/simonsobs/ocs/develop.yml?branch=main    :target: https://github.com/simonsobs/ocs/actions?query=workflow%3A%22Build+Test+Images%22    :alt: GitHub Workflow Status.. image:: https://readthedocs.org/projects/ocs/badge/?version=main    :target: https://ocs.readthedocs.io/en/main/?badge=main    :alt: Documentation Status.. image:: https://coveralls.io/repos/github/simonsobs/ocs/badge.svg    :target: https://coveralls.io/github/simonsobs/ocs.. image:: https://img.shields.io/badge/dockerhub-latest-blue    :target: https://hub.docker.com/r/simonsobs/ocs/tags.. image:: https://img.shields.io/pypi/v/ocs   :target: https://pypi.org/project/ocs/   :alt: PyPI Package.. image:: https://results.pre-commit.ci/badge/github/simonsobs/ocs/main.svg   :target: https://results.pre-commit.ci/latest/github/simonsobs/ocs/main   :alt: pre-commit.ci statusOverview--------The OCS makes it easy to coordinate hardware operation and I/O tasks in adistributed system such as an astronomical observatory or test laboratory. OCSrelies on the use of a central WAMP router (currently `crossbar.io`_) forcoordinating the communication and control of these distributed systems.The OCS provides Python (and JavaScript) functions and classes to allow&quot;Clients&quot; to talk to &quot;Agents&quot;. An Agent is a software program that knows how todo something interesting and useful, such as acquire data from some device orperform cleanup operations on a particular file system. A Control Client couldbe a web page with control buttons and log windows, or a script written by auser to perform a series of unattended, interlocking data acquisition tasks.This repository, `OCS`_, contains library code and core systemcomponents.  Additional code for operating specific hardware can befound in the `Simons Observatory Control System (SOCS)`_ repository.Grafana and InfluxDB are supported to provide a near real-time monitoring andhistorical look back of the housekeeping data... _crossbar.io: http://crossbario.com.. _`OCS`: https://github.com/simonsobs/ocs/.. _`Simons Observatory Control System (SOCS)`: https://github.com/simonsobs/socs/Dependencies------------This code targets Python 3.7+.* `so3g`_ - Required for using the HK Aggregator Agent.* `crossbar`_ (optional) - The supported WAMP router. Controllable via  `ocsbow`. Can be installed with pip  or run via Docker... _so3g: https://github.com/simonsobs/so3g.. _crossbar: https://pypi.org/project/crossbar/Installation------------Install and update with pip::    $ pip3 install -U ocsIf you need to install the optional so3g module you can do so via::    $ pip3 install -U ocs[so3g]Installing from Source``````````````````````If you are considering contributing to OCS, or would like to use an unreleasedfeature, you will want to install from source. To do so, clone this repositoryand install using pip::  $ git clone https://github.com/simonsobs/ocs.git  $ cd ocs/  $ pip3 install -r requirements.txt  $ pip3 install .**Note:** If you want to install locally, not globally, throw the `--user` flagon the pip3 commands.Docker Images-------------Docker images for OCS and each Agent are available on `Docker Hub`_. Officialreleases will be tagged with their release version, i.e. ``v0.1.0``. These areonly built on release, and the ``latest`` tag will point to the latest of thesereleased tags. These should be considered stable.Test images will be tagged with the latest released version tag, the number ofcommits ahead of that release, the latest commit hash, i.e.``v0.6.0-53-g0e390f6``. These get built on each commit to the ``main`` branch,and are useful for testing and development, but should be considered unstable... _Docker Hub: https://hub.docker.com/u/simonsobsDocumentation-------------The OCS documentation can be built using Sphinx. There is a separate``requirements.txt`` file in the ``docs/`` directory to install Sphinx and anyadditional documentation dependencies::  $ cd docs/  $ pip3 install -r requirements.txt  $ make htmlYou can then open ``docs/_build/html/index.html`` in your preferred webbrowser. You can also find a copy hosted on `Read the Docs`_... _Read the Docs: https://ocs.readthedocs.io/en/latest/Tests-----The tests for OCS can be run using pytest, and should be run from the``tests/`` directory::  $ cd tests/  $ python3 -m pytestTo run the tests within a Docker container (useful if your local environment ismissing some dependencies), first make sure you build the latest ocs image,then use docker run::  $ docker build -t ocs .  $ docker run --rm -w=&quot;/app/ocs/tests/&quot; ocs sh -c &quot;python3 -m pytest -m 'not integtest'&quot;For more details see `tests/README.rst &lt;tests_&gt;`_... _tests: https://github.com/simonsobs/ocs/blob/main/tests/README.rstExample-------A self contained example, demonstrating the operation of a small observatorywith a single OCS Agent is contained in `example/miniobs/`_.  See the `readme`_in that directory for details... _example/miniobs/: https://github.com/simonsobs/ocs/tree/main/example/miniobs.. _readme: https://github.com/simonsobs/ocs/blob/main/example/miniobs/README.rstContributing------------For guidelines on how to contribute to OCS see `CONTRIBUTING.rst`_... _CONTRIBUTING.rst: https://github.com/simonsobs/ocs/blob/main/CONTRIBUTING.rstLicense--------This project is licensed under the BSD 2-Clause License - see the`LICENSE.txt`_ file for details... _LICENSE.txt: https://github.com/simonsobs/ocs/blob/main/LICENSE.txt</longdescription>
</pkgmetadata>