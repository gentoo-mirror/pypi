<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Welcome to fastcore================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;Python is a powerful, dynamic language. Rather than bake everything intothe language, it lets the programmer customize it to make it work forthem. `fastcore` uses this flexibility to add to Python featuresinspired by other languages we’ve loved, like multiple dispatch fromJulia, mixins from Ruby, and currying, binding, and more from Haskell.It also adds some “missing features” and clean up some rough edges inthe Python standard library, such as simplifying parallel processing,and bringing ideas from NumPy over to Python’s `list` type.## Getting startedTo install fastcore run: `conda install fastcore -c fastai` (if you useAnaconda, which we recommend) or `pip install fastcore`. For an[editableinstall](https://stackoverflow.com/questions/35064426/when-would-the-e-editable-option-be-useful-with-pip-install),clone this repo and run: `pip install -e &quot;.[dev]&quot;`. fastcore is testedto work on Ubuntu, macOS and Windows (versions tested are those showwith the `-latest` suffix[here](https://docs.github.com/en/actions/reference/specifications-for-github-hosted-runners#supported-runners-and-hardware-resources).`fastcore` contains many features, including:- `fastcore.test`: Simple testing functions- `fastcore.foundation`: Mixins, delegation, composition, and more- `fastcore.xtras`: Utility functions to help with functional-style  programming, parallel processing, and more- `fastcore.dispatch`: Multiple dispatch methods- `fastcore.transform`: Pipelines of composed partially reversible  transformationsTo get started, we recommend you read through [the fastcoretour](https://fastcore.fast.ai/tour.html).## ContributingAfter you clone this repository, please run `nbdev_install_hooks` inyour terminal. This sets up git hooks, which clean up the notebooks toremove the extraneous stuff stored in the notebooks (e.g. which cellsyou ran) which causes unnecessary merge conflicts.To run the tests in parallel, launch `nbdev_test`.Before submitting a PR, check that the local library and notebooksmatch.- If you made a change to the notebooks in one of the exported cells,  you can export it to the library with `nbdev_prepare`.- If you made a change to the library, you can export it back to the  notebooks with `nbdev_update`.</longdescription>
</pkgmetadata>