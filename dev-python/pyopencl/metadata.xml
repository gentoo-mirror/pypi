<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyOpenCL: Pythonic Access to OpenCL, with Arrays and Algorithms===============================================================.. image:: https://gitlab.tiker.net/inducer/pyopencl/badges/main/pipeline.svg    :alt: Gitlab Build Status    :target: https://gitlab.tiker.net/inducer/pyopencl/commits/main.. image:: https://github.com/inducer/pyopencl/workflows/CI/badge.svg?branch=main&amp;event=push    :alt: Github Build Status    :target: https://github.com/inducer/pyopencl/actions?query=branch%3Amain+workflow%3ACI+event%3Apush.. image:: https://badge.fury.io/py/pyopencl.svg    :alt: Python Package Index Release Page    :target: https://pypi.org/project/pyopencl/.. image:: https://zenodo.org/badge/1575307.svg    :alt: Zenodo DOI for latest release    :target: https://zenodo.org/badge/latestdoi/1575307PyOpenCL lets you access GPUs and other massively parallel computedevices from Python. It tries to offer computing goodness in thespirit of its sister project `PyCUDA &lt;https://mathema.tician.de/software/pycuda&gt;`__:* Object cleanup tied to lifetime of objects. This idiom, often  called `RAII &lt;https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&gt;`__  in C++, makes it much easier to write correct, leak- and  crash-free code.* Completeness. PyOpenCL puts the full power of OpenCL's API at  your disposal, if you wish.  Every obscure ``get_info()`` query and  all CL calls are accessible.* Automatic Error Checking. All CL errors are automatically  translated into Python exceptions.* Speed. PyOpenCL's base layer is written in C++, so all the niceties  above are virtually free.* Helpful and complete `Documentation &lt;https://documen.tician.de/pyopencl&gt;`__  as well as a `Wiki &lt;https://wiki.tiker.net/PyOpenCL&gt;`__.* Liberal license. PyOpenCL is open-source under the  `MIT license &lt;https://en.wikipedia.org/wiki/MIT_License&gt;`__  and free for commercial, academic, and private use.* Broad support. PyOpenCL was tested and works with Apple's, AMD's, and Nvidia's  CL implementations.Simple 4-step `install instructions &lt;https://documen.tician.de/pyopencl/misc.html#installation&gt;`__using Conda on Linux and macOS (that also install a working OpenCL implementation!)can be found in the `documentation &lt;https://documen.tician.de/pyopencl/&gt;`__.What you'll need if you do *not* want to use the convenient instructions above andinstead build from source:* gcc/g++ new enough to be compatible with pybind11  (see their `FAQ &lt;https://pybind11.readthedocs.io/en/stable/faq.html&gt;`__)* `numpy &lt;https://numpy.org&gt;`__, and* an OpenCL implementation. (See this `howto &lt;https://wiki.tiker.net/OpenCLHowTo&gt;`__  for how to get one.)Links-----* `Documentation &lt;https://documen.tician.de/pyopencl&gt;`__  (read how things work)* `Conda Forge &lt;https://anaconda.org/conda-forge/pyopencl&gt;`__  (download binary packages for Linux, macOS, Windows)* `Python package index &lt;https://pypi.python.org/pypi/pyopencl&gt;`__  (download releases)* `C. Gohlke's Windows binaries &lt;https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyopencl&gt;`__  (download Windows binaries)* `Github &lt;https://github.com/inducer/pyopencl&gt;`__  (get latest source code, file bugs)</longdescription>
</pkgmetadata>