<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `mybad` [![PyPI version](https://badge.fury.io/py/mybad.svg)](https://badge.fury.io/py/mybad) [![Build Status](https://travis-ci.com/grimen/python-mybad.svg?branch=master)](https://travis-ci.com/grimen/python-mybad) [![Coverage Status](https://codecov.io/gh/grimen/python-mybad/branch/master/graph/badge.svg)](https://codecov.io/gh/grimen/python-mybad)*My friendly error base class - for Python.*## IntroductionOne in general always needs a application/library specific error base class, but the native errors are very limited in what meta/debugging information they can hold at time they are raised. For better debugging and error reporting/inspection this error base class allows to attach some additonal error context information that can be used to better understand the issue - without having to create custom error formatters, or run debugger.## InstallInstall using **pip**:```sh$ pip install mybad```## UseVery basic **[example](https://github.com/grimen/python-mybad/tree/master/examples/basic.py)**:```pythonfrom mybad import Errorclass ToMuchError(Error):    passdef print_money(stash):    try:        if isinstance(stash, str) and len(stash) &gt; 13:            raise Exception('Too much money to print: {0}'.format(stash))        print('PRINT {0}'.format(stash))    except Exception as error:        raise ToMuchError(error,            message = 'Out of money printing ink...',            id = hash(stash),            key = 'too_much',            code = 400,            details = dict(                stash = stash,            )        )amount = ''for dollar in range(42):    amount += '$'    print_money(amount)```Run this with optional environment variables `COLORS` / `ERROR_COLORS` and/or `VERBOSE` / `ERROR_VERBOSE` set too truthy or falsy values, so see various error info formatting in terminal.Something like this (imagine some colorized formatting):```bashPRINT $PRINT $$PRINT $$$PRINT $$$$PRINT $$$$$PRINT $$$$$$PRINT $$$$$$$PRINT $$$$$$$$PRINT $$$$$$$$$PRINT $$$$$$$$$$PRINT $$$$$$$$$$$PRINT $$$$$$$$$$$$PRINT $$$$$$$$$$$$$===============================     str(error)---------------------------Out of money printing ink... - {'stash': '$$$$$$$$$$$$$$'}===============================     error.stack---------------------------Traceback (most recent call last):  File &quot;examples/basic.py&quot;, line 27, in print_money    raise Exception('Too much money to print: {0}'.format(stash))Exception: Too much money to print: $$$$$$$$$$$$$$===============================     error.inspect()---------------------------{   'code': 400,    'details': {'stash': '$$$$$$$$$$$$$$'},    'id': 3563898309523127190,    'key': 'too_much',    'message': 'Out of money printing ink...',    'stack': [   {   'code': ['stash = stash,'],                     'file': 'examples/basic.py',                     'function': 'print_money',                     'line': 38},                 {   'code': ['print_money(amount)'],                     'file': 'examples/basic.py',                     'function': '&lt;module&gt;',                     'line': 48}],    'type': 'ToMuchError'}===============================     error.json()---------------------------{    &quot;type&quot;: &quot;ToMuchError&quot;,    &quot;id&quot;: 3563898309523127190,    &quot;code&quot;: 400,    &quot;key&quot;: &quot;too_much&quot;,    &quot;message&quot;: &quot;Out of money printing ink...&quot;,    &quot;details&quot;: {        &quot;stash&quot;: &quot;$$$$$$$$$$$$$$&quot;    },    &quot;stack&quot;: [        {            &quot;file&quot;: &quot;examples/basic.py&quot;,            &quot;function&quot;: &quot;print_money&quot;,            &quot;line&quot;: 38,            &quot;code&quot;: [                &quot;stash = stash,&quot;            ]        },        {            &quot;file&quot;: &quot;examples/basic.py&quot;,            &quot;function&quot;: &quot;&lt;module&gt;&quot;,            &quot;line&quot;: 48,            &quot;code&quot;: [                &quot;print_money(amount)&quot;            ]        }    ]}```## TestClone down source code:```sh$ make install```Run **colorful tests**, with only native environment (dependency sandboxing up to you):```sh$ make test```Run **less colorful tests**, with **multi-environment** (using **tox**):```sh$ make test-tox```## Related- [**`mybase`**](https://github.com/grimen/python-mybase) - *&quot;My friendly library base class - for Python&quot;*## AboutThis project was mainly initiated - in lack of solid existing alternatives - to be used at our work at **[Markable.ai](https://markable.ai)** to have common code conventions between various programming environments where **Python** (research, CV, AI) is heavily used.## LicenseReleased under the MIT license.</longdescription>
</pkgmetadata>