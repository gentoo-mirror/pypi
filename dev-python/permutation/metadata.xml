<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: http://www.repostatus.org/badges/latest/active.svg    :target: http://www.repostatus.org/#active    :alt: Project Status: Active â€” The project has reached a stable, usable          state and is being actively developed... image:: https://github.com/jwodder/permutation/workflows/Test/badge.svg?branch=master    :target: https://github.com/jwodder/permutation/actions?workflow=Test    :alt: CI Status.. image:: https://codecov.io/gh/jwodder/permutation/branch/master/graph/badge.svg    :target: https://codecov.io/gh/jwodder/permutation.. image:: https://img.shields.io/pypi/pyversions/permutation.svg    :target: https://pypi.org/project/permutation.. image:: https://img.shields.io/github/license/jwodder/permutation.svg    :target: https://opensource.org/licenses/MIT    :alt: MIT License`GitHub &lt;https://github.com/jwodder/permutation&gt;`_| `PyPI &lt;https://pypi.org/project/permutation&gt;`_| `Documentation &lt;https://permutation.readthedocs.io&gt;`_| `Issues &lt;https://github.com/jwodder/permutation/issues&gt;`_| `Changelog &lt;https://github.com/jwodder/permutation/blob/master/CHANGELOG.md&gt;`_``permutation`` provides a ``Permutation`` class for representing `permutations&lt;https://en.wikipedia.org/wiki/Permutation&gt;`_ of finitely many positiveintegers in Python.  Supported operations &amp; properties include inverses, (grouptheoretic) order, parity, composition/multiplication, cycle decomposition,cycle notation, word representation, Lehmer codes, and, of course, use as acallable on integers.Installation============``permutation`` requires Python 3.7 or higher.  Just use `pip&lt;https://pip.pypa.io&gt;`_ for Python 3 (You have pip, right?) to install::    python3 -m pip install permutationExamples========&gt;&gt;&gt; from permutation import Permutation&gt;&gt;&gt; p = Permutation(2, 1, 4, 5, 3)&gt;&gt;&gt; p.to_cycles()[(1, 2), (3, 4, 5)]&gt;&gt;&gt; print(p)(1 2)(3 4 5)&gt;&gt;&gt; print(p.inverse())(1 2)(3 5 4)&gt;&gt;&gt; p.degree5&gt;&gt;&gt; p.order6&gt;&gt;&gt; p.is_evenFalse&gt;&gt;&gt; p.lehmer(5)27&gt;&gt;&gt; q = Permutation.cycle(1,2,3)&gt;&gt;&gt; print(p * q)(2 4 5 3)&gt;&gt;&gt; print(q * p)(1 3 4 5)&gt;&gt;&gt; for p in Permutation.group(3):...     print(p)...1(1 2)(2 3)(1 3 2)(1 2 3)(1 3)</longdescription>
</pkgmetadata>