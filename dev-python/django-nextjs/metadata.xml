<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Next.js[![](https://img.shields.io/pypi/v/django-nextjs.svg)](https://pypi.python.org/pypi/django-nextjs/)[![](https://github.com/QueraTeam/django-nextjs/workflows/tests/badge.svg)](https://github.com/QueraTeam/django-nextjs/actions)[![](https://img.shields.io/github/license/QueraTeam/django-nextjs.svg)](https://github.com/QueraTeam/django-nextjs/blob/master/LICENSE)[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Next.js integration for Django projects.So you want to use both Django and Next.js in your project. There are two scenarios:1. You are starting a new project and you want to use Django as back-end and Next.js as front-end.   Django only serves API requests. All front-end code lives in Next.js and you don't write any Django template.   In this scenario you **don't need** this package (although you can use it).   You simply start both Django and Next.js servers and point your public webserver to Next.js.2. You need both Django templates and Next.js at the same time and those pages should easily link to each other.   Maybe you have an existing Django project which has pages rendered by Django template   and want some new pages in Next.js.   Or you want to migrate your front-end to Next.js but since the project is large, you need to do it gradually.   In this scenario, **this package is for you!**## How does it work?From a [comment on StackOverflow]:&gt; Run 2 ports on the same server. One for django (public facing)&gt; and one for Next.js (internal).&gt; Let django handle all web requests.&gt; For each request, query Next.js from django view to get HTML response.&gt; Return that exact HTML response from django view.## Installation- Install the latest version from PyPI.  ```shell  pip install django-nextjs  ```- Add `django_nextjs.apps.DjangoNextJSConfig` to `INSTALLED_APPS`.- Set up Next.js URLs depending on your environment.### Setup Next.js URLs (Development Environment)If you're serving your site under ASGI during development,use [Django Channels](https://channels.readthedocs.io/en/stable/) andadd `NextJSProxyHttpConsumer`, `NextJSProxyWebsocketConsumer` to `asgi.py` like the following example.**Note:** We recommend using ASGI and Django Channels,because it is required for [fast refresh](https://nextjs.org/docs/architecture/fast-refresh) (hot module replacement) to work properly in Nextjs 12+.```pythonimport osfrom django.core.asgi import get_asgi_applicationfrom django.urls import re_path, pathos.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;myproject.settings&quot;)django_asgi_app = get_asgi_application()from channels.auth import AuthMiddlewareStackfrom channels.routing import ProtocolTypeRouter, URLRouterfrom django_nextjs.proxy import NextJSProxyHttpConsumer, NextJSProxyWebsocketConsumerfrom django.conf import settings# put your custom routes here if you needhttp_routes = [re_path(r&quot;&quot;, django_asgi_app)]websocket_routers = []if settings.DEBUG:    http_routes.insert(0, re_path(r&quot;^(?:_next|__next|next).*&quot;, NextJSProxyHttpConsumer.as_asgi()))    websocket_routers.insert(0, path(&quot;_next/webpack-hmr&quot;, NextJSProxyWebsocketConsumer.as_asgi()))application = ProtocolTypeRouter(    {        # Django's ASGI application to handle traditional HTTP and websocket requests.        &quot;http&quot;: URLRouter(http_routes),        &quot;websocket&quot;: AuthMiddlewareStack(URLRouter(websocket_routers)),        # ...    })```Otherwise (if serving under WSGI during development), add the following to the beginning of `urls.py`:```pythonpath(&quot;&quot;, include(&quot;django_nextjs.urls&quot;))```**Warning:** If you are serving under ASGI, do NOT add thisto your `urls.py`. It may cause deadlocks.### Setup Next.js URLs (Production Environment)In production, use a reverse proxy like Nginx or Caddy:| URL                 | Action                                     || ------------------- | ------------------------------------------ || `/_next/static/...` | Serve `NEXTJS_PATH/.next/static` directory || `/_next/...`        | Proxy to `http://localhost:3000`           || `/next/...`         | Serve `NEXTJS_PATH/public/next` directory  |Pass `x-real-ip` header when proxying `/_next/`. Example config for Nginx:```conflocation /_next/static/ {    alias NEXTJS_PATH/.next/static/;    expires max;    add_header Cache-Control &quot;public&quot;;}location /_next/ {    proxy_set_header  x-real-ip $remote_addr;    proxy_pass  http://127.0.0.1:3000;}location /next/ {    alias NEXTJS_PATH/public/next/;    expires max;    add_header Cache-Control &quot;public&quot;;}```## UsageStart Next.js server:```shell# Development:$ npm run dev# Production:$ npm run build$ npm run start```Develop your pages in Next.js.Write a django URL and an async view for each page like this:```pythonfrom django.http import HttpResponsefrom django_nextjs.render import render_nextjs_pageasync def jobs(request):    return await render_nextjs_page(request)```## Customizing the HTML ResponseYou can modify the HTML code that Next.js returns in your Django code.Avoiding duplicate code for the navbar and footer is a common use casefor this if you are using both Next.js and Django templates.Without it, you would have to write and maintain two separate versionsof your navbar and footer (a Django template version and a Next.js version).However, you can simply create a Django template for your navbar and insert its codeat the beginning of `&lt;body&gt;` tag returned from Next.js.To enable this feature, you need to customize the document and root layoutin Next.js and make the following adjustments:- Add `id=&quot;__django_nextjs_body&quot;` as the first attribute of `&lt;body&gt;` element.- Add `&lt;div id=&quot;__django_nextjs_body_begin&quot; /&gt;` as the first element inside `&lt;body&gt;`.- Add `&lt;div id=&quot;__django_nextjs_body_end&quot; /&gt;` as the last element inside `&lt;body&gt;`.NOTE: Currently HTML customization is not working with [app router](https://nextjs.org/docs/app) (Next.js 13+).Read[this doc](https://nextjs.org/docs/pages/building-your-application/routing/custom-document)and customize your Next.js document:```jsx// pages/_document.jsx (or .tsx)...&lt;body id=&quot;__django_nextjs_body&quot;&gt;  &lt;div id=&quot;__django_nextjs_body_begin&quot; /&gt;  &lt;Main /&gt;  &lt;NextScript /&gt;  &lt;div id=&quot;__django_nextjs_body_end&quot; /&gt;&lt;/body&gt;...```&lt;!-- If you are using Next.js 13+, you also need to[customize the root layout](https://nextjs.org/docs/app/api-reference/file-conventions/layout)in `app` directory:```jsx// app/layout.jsx (or .tsx)...&lt;body id=&quot;__django_nextjs_body&quot; className={inter.className}&gt;  &lt;div id=&quot;__django_nextjs_body_begin&quot; /&gt;  {children}  &lt;div id=&quot;__django_nextjs_body_end&quot; /&gt;&lt;/body&gt;...``` --&gt;Write a django template that extends `django_nextjs/document_base.html`:```django{% extends &quot;django_nextjs/document_base.html&quot; %}{% block head %}  &lt;!-- ... the content you want to place at the beginning of &quot;head&quot; tag ... --&gt;  {{ block.super }}  &lt;!-- ... the content you want to place at the end of &quot;head&quot; tag ... --&gt;{% endblock %}{% block body %}  ... the content you want to place at the beginning of &quot;body&quot; tag ...  ... e.g. include the navbar template ...  {{ block.super }}  ... the content you want to place at the end of &quot;body&quot; tag ...  ... e.g. include the footer template ...{% endblock %}```Pass the template name to `render_nextjs_page`:```pythonasync def jobs(request):    return await render_nextjs_page(request, &quot;path/to/template.html&quot;)```## Notes- If you want to add a file to `public` directory of Next.js,  that file should be in `public/next` subdirectory to work correctly.- If you're using django channels, make sure all your middlewares are  [async-capable](https://docs.djangoproject.com/en/dev/topics/http/middleware/#asynchronous-support).- To avoid &quot;Too many redirects&quot; error, you may need to add `APPEND_SLASH = False` in your Django project's `settings.py`. Also, do not add `/` at the end of nextjs paths in `urls.py`.- This package does not provide a solution for passing data from Django to Next.js. The Django Rest Framework, GraphQL, or similar solutions should still be used.- The Next.js server will not be run by this package. You will need to run it yourself.## SettingsDefault settings:```python    NEXTJS_SETTINGS = {        &quot;nextjs_server_url&quot;: &quot;http://127.0.0.1:3000&quot;,    }```### `nextjs_server_url`The URL of Next.js server (started by `npm run dev` or `npm run start`)## Development- Install development dependencies in your virtualenv with `pip install -e '.[dev]'`- Install pre-commit hooks using `pre-commit install`.## References- https://github.com/yourlabs/djnext- [comment on StackOverflow][comment on stackoverflow]: https://stackoverflow.com/questions/54252943/is-there-a-way-to-integrate-django-with-next-js#comment110078700_54252943## LicenseMIT</longdescription>
</pkgmetadata>