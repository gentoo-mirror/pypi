<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyaddict[![PyPI version](https://badge.fury.io/py/pyaddict.svg)](https://badge.fury.io/py/pyaddict)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pyaddict.svg)](https://pypi.python.org/pypi/pyaddict/)[![PyPI license](https://img.shields.io/pypi/l/pyaddict.svg)](https://pypi.python.org/pypi/pyaddict/)## DescriptionYet another python library to safely work with json data. It implements many useful features such as optional chaining, schema validation, type casting, safe indexing and default values.## Installation```bashpip install pyaddict```## Usage```pythonfrom pyaddict import JDict, JListfrom pyaddict.schema import Object, String, Integer, Arrayjdict = JDict({    &quot;name&quot;: &quot;John&quot;,    &quot;age&quot;: 30,    &quot;cars&quot;: [        {&quot;model&quot;: &quot;BMW 230&quot;, &quot;mpg&quot;: 27.5},        {&quot;model&quot;: &quot;Ford Edge&quot;, &quot;mpg&quot;: 24.1}    ]})# dictsprint(jdict.ensure(&quot;name&quot;, str))  # Johnprint(jdict.ensure(&quot;age&quot;, int))  # 30print(jdict.ensure(&quot;age&quot;, str))  # &quot;&quot;print(jdict.ensureCast(&quot;age&quot;, str))  # &quot;30&quot;print(jdict.optionalGet(&quot;age&quot;, str)) # Noneprint(jdict.optionalCast(&quot;age&quot;, str))  # &quot;30&quot;print(jdict.optionalGet(&quot;gender&quot;, str)) # Noneprint(jdict.optionalCast(&quot;gender&quot;, str)) # Noneprint(jdict.ensure(&quot;gender&quot;, str)) # &quot;&quot;# listscars = jdict.ensureCast(&quot;cars&quot;, JList)print(cars.assertGet(1, dict))  # {'model': 'Ford Edge', 'mpg': 24.1}print(cars.assertGet(2, dict))  # AssertionError# iteratorsfor car in cars.iterator().ensureCast(JDict):    print(car.ensureCast(&quot;model&quot;, str)) # BMW 230, Ford Edge# chainingchain = jdict.chain()print(chain.ensureCast(&quot;cars[1].mpg&quot;, str))  # &quot;24.1&quot;print(chain.ensureCast(&quot;cars[2].mpg&quot;, str))  # &quot;&quot;# or via direct access (returns Optional[Any]!)print(chain[&quot;cars[2].mpg&quot;])  # IndexErrorprint(chain[&quot;cars[2]?.mpg&quot;])  # None# schema validationschema = Object({    &quot;name&quot;: String(),    &quot;age&quot;: String().coerce(),    &quot;dogs&quot;: Array(String()).min(1).optional()}).withAdditionalProperties()print(schema.error(dict)) # NonebadSchema = Object({    &quot;name&quot;: String().min(5),    &quot;age&quot;: Float(),    &quot;cars&quot;: Object()})print(badSchema.error(dict)) # ValidationError(expected 4 to be greater than or equal to 5, name: min)```The library is fully typed and thus can be used with mypy &amp; pylint. Check out the [wiki](https://github.com/dxstiny/pyaddict/wiki) for more information.## When to useWhen working with json data, it is common to have to deal with missing keys, wrong types, etc. This library provides a simple way to deal with these issues. Additionally, it provides easy-to-use typing support for mypy and pylint and detailed documentation.Starting with version 1.0.0, pyaddict includes a schema validation feature inspired by [zod](https://github.com/colinhacks/zod). It is especially useful when validating user input, e.g. in web applications.## License[MIT](LICENSE)## Author[dxstiny](https://github.com/dxstiny)</longdescription>
</pkgmetadata>