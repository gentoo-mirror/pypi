<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>TBVaccine---------.. image:: https://www.codeshelter.co/static/badges/badge-flat.svg    :target: www.codeshelter.co.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/ambv/blackTBVaccine is a utility that pretty-prints Python tracebacks. It automaticallyhighlights lines you care about and deemphasizes lines you don't, and colorizesthe various elements in a traceback to make it easier to parse.Here are some screenshots. This is the before:.. image:: misc/before.pngAnd this is the after:.. image:: misc/after.pngIf you add the hook or call TBVaccine in your code, it can also print allvariables in each stack frame. That is, it turns this:.. image:: misc/before-vars.pnginto this:.. image:: misc/after-vars.pngInstallation============To install, use ``pip``::    pip install tbvaccineYou are done!Global usage============You can have TBVaccine insert itself all up in your system and stick its tentacles inall your libraries, like a cute, useful Cthulhu. That way, every single Pythontraceback in your system will be pretty. Just set the `TBVACCINE` environmentvariable to 1, and you're done.E.g. for bash::    export TBVACCINE=1Or fish::    set -x TBVACCINE=1Usage as a command-line utility===============================TBVaccine can be used from the command line several ways.::    python -m tbvaccine myscript.pyOr just pipe STDERR into it from the program you want to watch::    ./myscript.py 2&gt;&amp;1 | tbvaccineAnd all the tracebacks will now be pretty!Usage as a Python library=========================There are various ways to use TBVaccine as a Python library.Initialize it like so::    from tbvaccine import TBVaccine    tbv = TBVaccine(        code_dir=&quot;/my/code/dir&quot;,        isolate=True    )``code_dir`` marks the directory we code about. Files under that directory thatappear in the traceback will be highlighted. If not passed, the currentdirectory, as returned by ``os.getcwd()`` will be used.If ``isolate`` is ``False``, all lines are colorized, and ``code_dir`` isignored.If ``show_vars`` is ``False``, variables will not be printed in each stackframe.To use it in an ``except`` block::    from tbvaccine import TBVaccine    try:        some_stuff()    except:        print(TBVaccine().format_exc())To make it the default way of printing tracebacks, use ``add_hook()`` (whichalso accepts any argument the ``TBVaccine`` class does)::    import tbvaccine    tbvaccine.add_hook(isolate=False)    1 / 0Bam! Instant pretty tracebacks.Logging integration===================You can integrate TBVaccine with logging like so::    class TbVaccineFormatter(logging.Formatter):        def  formatException(self, exc_info):            return TBVaccine(isolate=True).format_exc()    sh = logging.StreamHandler()    sh.setFormatter(TbVaccineFormatter('[%(levelname)s] %(asctime)s : %(message)s', '%Y-%m-%d %H:%M:%S'))    logger.addHandler(sh)Epilogue========This library is still pretty new, please contribute patches if something doesn'twork as intended, and also please tell your friends about it! Hopefully one dayit will be implemented in the Python interpreters themselves.-- Stavros</longdescription>
</pkgmetadata>