<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Appium library for RobotFramework==================================================Introduction------------AppiumLibrary_ is an appium testing library for `Robot Framework`_. Library can be downloaded from PyPI_.It uses `Appium &lt;http://appium.io/&gt;`_ to communicate with Android and iOS applicationsimilar to how *Selenium WebDriver* talks to web browser.It is supporting Python 3.7+ (since Appium Python Client doesn't support Python 2.7 anymore).. image:: https://img.shields.io/pypi/v/robotframework-appiumlibrary.svg    :target: https://pypi.python.org/pypi/robotframework-appiumlibrary/    :alt: Latest PyPI version.. image:: https://img.shields.io/pypi/dm/robotframework-appiumlibrary.svg    :target: https://pypi.python.org/pypi/robotframework-appiumlibrary/    :alt: Number of PyPI downloads.. contents::Keyword Documentation---------------------See `Keyword Documentation`_ for available keywords and more information about the library in general.Installation------------The recommended installation method is using`pip &lt;http://pip-installer.org&gt;`__::    pip install --upgrade robotframework-appiumlibrarySee `Robot Framework installation instructions`_ for detailed informationabout installing Python and Robot Framework itself.Device Setup------------After installing the library, you still need to setup an simulator/emulator or real device to use in tests.iOS and Android have separate paths to follow, and those steps better explained in `Appium Driver Setup Guide`_.Please follow the **Driver-Specific Setup** according to platform.Usage-----To write tests with Robot Framework and AppiumLibrary, AppiumLibrary must be imported into your RF test suite.See `Robot Framework User Guide &lt;https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html&gt;`_for more information.As it uses Appium make sure your Appium server is up and running.For how to use Appium please refer to `Appium Documentation &lt;http://appium.io/docs/en/about-appium/getting-started/&gt;`_When using Robot Framework, it is generally recommended to write tests easy to read/modify.The keywords provided in AppiumLibrary are pretty low level. It is thus typically a good idea to write tests usingRobot Framework's higher level keywords that utilize AppiumLibrarykeywords internally. This is illustrated by the following examplewhere AppiumLibrary keywords like ``Input Text`` are primarilyused by higher level keywords like ``Input Search Query``... code:: robotframework    *** Settings ***    Documentation  Simple example using AppiumLibrary    Library  AppiumLibrary    *** Variables ***    ${ANDROID_AUTOMATION_NAME}    UIAutomator2    ${ANDROID_APP}                ${CURDIR}/demoapp/ApiDemos-debug.apk    ${ANDROID_PLATFORM_NAME}      Android    ${ANDROID_PLATFORM_VERSION}   %{ANDROID_PLATFORM_VERSION=11}    *** Test Cases ***    Should send keys to search box and then check the value      Open Test Application      Input Search Query  Hello World!      Submit Search      Search Query Should Be Matching  Hello World!    *** Keywords ***    Open Test Application      Open Application  http://127.0.0.1:4723/wd/hub  automationName=${ANDROID_AUTOMATION_NAME}      ...  platformName=${ANDROID_PLATFORM_NAME}  platformVersion=${ANDROID_PLATFORM_VERSION}      ...  app=${ANDROID_APP}  appPackage=io.appium.android.apis  appActivity=.app.SearchInvoke    Input Search Query      [Arguments]  ${query}      Input Text  txt_query_prefill  ${query}    Submit Search      Click Element  btn_start_search    Search Query Should Be Matching      [Arguments]  ${text}      Wait Until Page Contains Element  android:id/search_src_text      Element Text Should Be  android:id/search_src_text  ${text}Create a file with the content above (name it: ``test_file.robot``) and execute::    robot test_file.robotThe above example is single file test case, more examples can be found in a `sample project`_ that illustrates usingRobot Framework and AppiumLibrary. Check the sample project that you can find examples of mobile web &amp; ios &amp; android.Contributing-------------Fork the project, make a change, and send a pull request!Project Contributors--------------------* `Serhat Bolsu &lt;https://github.com/serhatbolsu&gt;`_* `William Zhang &lt;https://github.com/jollychang&gt;`_* `Xie Lieping &lt;https://github.com/frankbp&gt;`_* `Jari Nurminen &lt;https://github.com/yahman72&gt;`_AppiumLibrary is modeled after (and forked from)  `appiumandroidlibrary &lt;https://github.com/frankbp/robotframework-appiumandroidlibrary&gt;`_,  but re-implemented to use appium 1.X technologies... _AppiumLibrary: https://github.com/serhatbolsu/robotframework-appiumlibrary.. _Robot Framework: https://robotframework.org.. _Keyword Documentation: http://serhatbolsu.github.io/robotframework-appiumlibrary/AppiumLibrary.html.. _PyPI: https://pypi.org/project/robotframework-appiumlibrary/.. _Robot Framework installation instructions: https://github.com/robotframework/robotframework/blob/master/INSTALL.rst.. _Appium Driver Setup Guide: http://appium.io/docs/en/about-appium/getting-started/?lang=en.. _sample project: https://github.com/serhatbolsu/robotframework-appium-sample</longdescription>
</pkgmetadata>