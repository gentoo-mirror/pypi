<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django Vkontakte Wall=====================[![PyPI version](https://badge.fury.io/py/django-vkontakte-wall.png)](http://badge.fury.io/py/django-vkontakte-wall) [![Build Status](https://travis-ci.org/ramusus/django-vkontakte-wall.png?branch=master)](https://travis-ci.org/ramusus/django-vkontakte-wall) [![Coverage Status](https://coveralls.io/repos/ramusus/django-vkontakte-wall/badge.png?branch=master)](https://coveralls.io/r/ramusus/django-vkontakte-wall)Приложение позволяет взаимодействовать со стенами Вконтакте, сообщениями и комментариями на них через Вконтакте API и парсер используя стандартные модели DjangoУстановка---------    pip install django-vkontakte-wallВ `settings.py` необходимо добавить:    INSTALLED_APPS = (        ...        'oauth_tokens',        'taggit',        'vkontakte_api',        'vkontakte_places',        'vkontakte_users',        'vkontakte_groups',        'vkontakte_wall',        'm2m_history',    )    # oauth-tokens settings    OAUTH_TOKENS_HISTORY = True                                         # to keep in DB expired access tokens    OAUTH_TOKENS_VKONTAKTE_CLIENT_ID = ''                               # application ID    OAUTH_TOKENS_VKONTAKTE_CLIENT_SECRET = ''                           # application secret key    OAUTH_TOKENS_VKONTAKTE_SCOPE = ['ads,wall,photos,friends,stats']    # application scopes    OAUTH_TOKENS_VKONTAKTE_USERNAME = ''                                # user login    OAUTH_TOKENS_VKONTAKTE_PASSWORD = ''                                # user password    OAUTH_TOKENS_VKONTAKTE_PHONE_END = ''                               # last 4 digits of user mobile phoneПокрытие методов API--------------------* [wall.get](http://vk.com/dev/wall.get) – возвращает список записей со стены;* [wall.getById](http://vk.com/dev/wall.getById) – получает записи со стен пользователей по их идентификаторам;* [wall.getLikes](http://vk.com/dev/wall.getLikes) – получает информацию о пользователях которым нравится данная запись;* [wall.post](http://vk.com/dev/wall.post) – публикует новую запись на своей или чужой стене;* [wall.edit](http://vk.com/dev/wall.edit) – редактирует запись на стене;* [wall.delete](http://vk.com/dev/wall.delete) – удаляет запись со стены;* [wall.restore](http://vk.com/dev/wall.restore) – восстанавливает удаленную запись на стене пользователя;* [wall.getComments](http://vk.com/dev/wall.getComments) – получает комментарии к записи на стене пользователя;* [wall.addComment](http://vk.com/dev/wall.addComment) – добавляет комментарий к записи на стене пользователя или сообщества;* [wall.editComment](http://vk.com/dev/wall.editComment) – редактирует комментарий на стене пользователя или сообщества;* [wall.deleteComment](http://vk.com/dev/wall.deleteComment) – удаляет комментарий текущего пользователя к записи на своей или чужой стене;* [wall.restoreComment](http://vk.com/dev/wall.restoreComment) – восстанавливает комментарий текущего пользователя к записи на своей или чужой стене;Использование парсера---------------------* Получение сообщений со стены группы; ** Получение комментариев сообщения со стены группы; ** Получение лайков сообщения; ** Получение перепостов сообщения.(*) Дублирование функционала APIПримеры использования---------------------### Получение сообщений по их идентификаторам    &gt;&gt;&gt; from vkontakte_wall.models import Post    &gt;&gt;&gt; Post.remote.fetch(ids=['5223304_130', '-16297716_126261'])    [&lt;Post: ...&gt;, &lt;Post: ...&gt;]### Получение сообщений со стены пользователя через метод пользователя    &gt;&gt;&gt; from vkontakte_users.models import User    &gt;&gt;&gt; user = User.remote.fetch(ids=[1])[0]    &gt;&gt;&gt; user.fetch_posts()    [&lt;Post: ...&gt;, &lt;Post: ...&gt;, &lt;Post: ...&gt;, '...(remaining elements truncated)...']Сообщения пользователя доступны через менеджер    &gt;&gt;&gt; user.wall_posts.count()    432Комментарии всех сообщений пользователя доступны через менеджер    &gt;&gt;&gt; user.wall_comments.count()    73637### Получение сообщений со стены пользователя через менеджер    &gt;&gt;&gt; from vkontakte_users.models import User    &gt;&gt;&gt; user = User.remote.fetch(ids=[1])[0]    &gt;&gt;&gt; Post.remote.fetch_user_wall(user=user)    [&lt;Post: ...&gt;, &lt;Post: ...&gt;, &lt;Post: ...&gt;, '...(remaining elements truncated)...']### Получение сообщений со стены группы через метод группы    &gt;&gt;&gt; from vkontakte_groups.models import Group    &gt;&gt;&gt; group = Group.remote.fetch(ids=[16297716])[0]    &gt;&gt;&gt; group.fetch_posts()    [&lt;Post: Coca-Cola: ...&gt;, &lt;Post: Coca-Cola: ...&gt;, '...(remaining elements truncated)...']Сообщения группы доступны через менеджер    &gt;&gt;&gt; group.wall_posts.count()    5498Комментарии всех сообщений группы доступны через менеджер    &gt;&gt;&gt; group.wall_comments.count()    73637### Получение сообщений со стены группы через менеджер    &gt;&gt;&gt; from vkontakte_groups.models import Group    &gt;&gt;&gt; group = Group.remote.fetch(ids=[16297716])[0]    &gt;&gt;&gt; Post.remote.fetch_group_wall(group=group)    [&lt;Post: ...&gt;, &lt;Post: ...&gt;, &lt;Post: ...&gt;, '...(remaining elements truncated)...']### Получение комментариев сообщения со стены группы через менеджер    &gt;&gt;&gt; from vkontakte_users.models import User    &gt;&gt;&gt; user = User.remote.fetch(ids=[1])[0]    &gt;&gt;&gt; post = user.wall_posts.all()[0]    &gt;&gt;&gt; Comment.remote.fetch_user_post(post=post)    [&lt;Comment: ...&gt;, &lt;Comment: ...&gt;, &lt;Comment: ...&gt;, '...(remaining elements truncated)...']### Публикация записи на стене       &gt;&gt;&gt; post = Post.objects.create(**param)       &gt;&gt;&gt; print post.text       'message'       или       &gt;&gt;&gt; post = Post()       &gt;&gt;&gt; post.text = 'message'       ....       &gt;&gt;&gt; post.save()       &gt;&gt;&gt; post.text       'message'### Редактирование опубликованной записи        &gt;&gt;&gt; post = Post.objects.get(remote_id='5223304_130')        &gt;&gt;&gt; post.text = 'Edited message'        &gt;&gt;&gt; post.save()        &gt;&gt;&gt; post.text        'Edited message'### Удаление опупбликованной записи       &gt;&gt;&gt; post.delete()  # Запись не удаляется из БД,       &gt;&gt;&gt; post.archived       True               # вместо этого аттрибуту archived присваивается True### Востановление удаленной записи       &gt;&gt;&gt; post.restore() # Запись не создается заново       &gt;&gt;&gt; post.archived       False               # вместо этого аттрибуту archived присваивается False### Публикация коментария к записи на стене        &gt;&gt;&gt; test_comment = Comment.objects.create(**compent_param)        &gt;&gt;&gt; test_comment        &lt;Comment:...&gt;        или        &gt;&gt;&gt; comment = Comment()        &gt;&gt;&gt; comment.text = 'text'        ....        &gt;&gt;&gt; comment.save()        &gt;&gt;&gt; comment.remote_id        '123123_123'        &gt;&gt;&gt; comment.text        'text'### Редактирование опубликованного комментария        &gt;&gt;&gt; edited_message = 'Edited comment message'        &gt;&gt;&gt; comment = Comment.objects.get(...)        &gt;&gt;&gt; comment.text = 'Edited comment message'        &gt;&gt;&gt; comment.save()        &gt;&gt;&gt; comment.text        'Edited comment message'### Удаление опупбликованного комментария       &gt;&gt;&gt; test_comment.delete()  # Запись не удаляется из БД,       &gt;&gt;&gt; test_comment.archived       True               # вместо этого аттрибуту archived присваивается True### Востановление удаленного комментария       &gt;&gt;&gt; test_comment.restore() # Запись не создается заново       &gt;&gt;&gt; test_comment.archived       False               # вместо этого аттрибуту archived присваивается False</longdescription>
</pkgmetadata>