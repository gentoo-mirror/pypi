<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## plz-cmd[![Build Status](https://github.com/m3brown/plz/actions/workflows/python-app.yml/badge.svg)](https://github.com/m3brown/plz/actions?query=workflow%3Abuild)[![Coverage Status](https://coveralls.io/repos/github/m3brown/plz/badge.svg?branch=master)](https://coveralls.io/github/m3brown/plz?branch=master)A shell command to execute standard/repeatable commands in a git repo### InstallationInstall plz at the system level so that it only has to be installed once.```bashpip install plz-cmd# sudo may be required on your machinesudo pip install plz-cmd```It can also be installed inside a virtualenv.  However, this means you'll haveto install plz-cmd for each each virtualenv in use.```bashvirtualenv venv. venv/bin/activatepip install plz-cmd```### Exampleplz looks for a `plz.yaml` file either in the current directory or in the rootof the git repo you're currently in. This file can (and should) be checked intoversion control.For a plz.yaml file located in the git root directory, commands run will beexecuted relative to that directory, not the current directory.Suppose we have the following `plz.yaml` file:```yamlcommands:  # String command  run: ./manage.py runserver  # Array of command  test:    - ./manage.py test    - yarn test  # Object command, which supports string and array `cmd`  setup:    description: Set up the development environment    cmd:    - poetry install    - poetry run ./manage.py migrate    - yarn install  # ls example is referenced further down in this README  ls: ls```The following commands would be available:```bashplz runplz testplz setupplz ls```### Getting helpList all the available commands with:```bashplz# orplz help```Print the yaml schema for any defined command with `plz help &lt;command&gt;`:```&gt; plz help test[INFO] Using config: plz.yamltest:  cmd:  - poetry run python -m pytest```### DescriptionSetting a description attribute for a command will display the description in theconsole output. This can be useful if the command is not self explanatory.```yamlcommands:  echo:    cmd: echo hello    description: This is a sample description``````&gt; plz echo[INFO] Using config: plz.yamlDescription: This is a sample description===============================================================================Running command: echo hello===============================================================================hello```### Environment variablesEnvironment variables can be set for an individual command or globally for all commands.```yaml# env variable for an individual commandcommands:  test:    cmd: ./manage.py test    env:      DJANGO_SETTINGS_MODULE: myapp.settings.test``````yamlglobal_env:  DJANGO_SETTINGS_MODULE: myapp.settings.testcommands:  test: ./manage.py test```### ShortcutsSimilar to environment variables, shortcuts can be created witin the plz.yamlfile for reference by individual commands.```yamlshortcuts:  dc: docker-compose  commands:    start:      cmd: ${dc} up    shell:      cmd: ${dc} run web bash```### Globbingplz supports asterisk expansion.  For example, the cmd `ls *.py` will work as expected.### Runtime argumentsplz supports passing custom arguments when running the plz command. For example:```# bind to port 8001 instead of the default 8000plz run 127.0.0.1:8001```Any passed arguments will be tested to see if they are file paths relative tothe current directory when running the command. Using this repo as an example:```bash$ ls .*.yamlplz.yaml               .pre-commit-config.yamlbash$ cd plzbash$ plz ls ../.*.yaml[INFO] Using config: /path/plz/plz.yaml===============================================================================Running command: ls===============================================================================plz.yaml.pre-commit-config.yaml[INFO] Process complete, return code: 0bash$ plz ls __*.py[INFO] Using config: /path/plz/plz.yaml===============================================================================Running command: ls===============================================================================plz/__init__.py[INFO] Process complete, return code: 0```### DevelopmentSetting up for development is easy when plz is already installed!```git clone https://github.com/m3brown/plzcd plzplz setupplz test```</longdescription>
</pkgmetadata>