<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyOTP - The Python One-Time Password Library============================================PyOTP is a Python library for generating and verifying one-time passwords. It can be used to implement two-factor (2FA)or multi-factor (MFA) authentication methods in web applications and in other systems that require users to log in.Open MFA standards are defined in `RFC 4226 &lt;https://tools.ietf.org/html/rfc4226&gt;`_ (HOTP: An HMAC-Based One-TimePassword Algorithm) and in `RFC 6238 &lt;https://tools.ietf.org/html/rfc6238&gt;`_ (TOTP: Time-Based One-Time PasswordAlgorithm). PyOTP implements server-side support for both of these standards. Client-side support can be enabled bysending authentication codes to users over SMS or email (HOTP) or, for TOTP, by instructing users to use `GoogleAuthenticator &lt;https://en.wikipedia.org/wiki/Google_Authenticator&gt;`_, `Authy &lt;https://www.authy.com/&gt;`_, or anothercompatible app. Users can set up auth tokens in their apps easily by using their phone camera to scan `otpauth://&lt;https://github.com/google/google-authenticator/wiki/Key-Uri-Format&gt;`_ QR codes provided by PyOTP.Implementers should read and follow the `HOTP security requirements &lt;https://tools.ietf.org/html/rfc4226#section-7&gt;`_and `TOTP security considerations &lt;https://tools.ietf.org/html/rfc6238#section-5&gt;`_ sections of the relevant RFCs. Atminimum, application implementers should follow this checklist:- Ensure transport confidentiality by using HTTPS- Ensure HOTP/TOTP secret confidentiality by storing secrets in a controlled access database- Deny replay attacks by rejecting one-time passwords that have been used by the client (this requires storing the most   recently authenticated timestamp, OTP, or hash of the OTP in your database, and rejecting the OTP when a match is seen)- Throttle (rate limit) brute-force attacks against your application's login functionality (see RFC 4226, section 7.3)- When implementing a &quot;greenfield&quot; application, consider supporting  `FIDO U2F &lt;https://en.wikipedia.org/wiki/Universal_2nd_Factor&gt;`_/`WebAuthn &lt;https://www.w3.org/TR/webauthn/&gt;`_ in  addition to HOTP/TOTP. U2F uses asymmetric cryptography to avoid using a shared secret design, which strengthens your  MFA solution against server-side attacks. Hardware U2F also sequesters the client secret in a dedicated single-purpose  device, which strengthens your clients against client-side attacks. And by automating scoping of credentials to  relying party IDs (application origin/domain names), U2F adds protection against phishing attacks. One implementation of  FIDO U2F/WebAuthn is PyOTP's sister project, `PyWARP &lt;https://github.com/pyauth/pywarp&gt;`_.We also recommend that implementers read the`OWASP Authentication Cheat Sheet &lt;https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md&gt;`_ and`NIST SP 800-63-3: Digital Authentication Guideline &lt;https://pages.nist.gov/800-63-3/&gt;`_ for a high level overview ofauthentication best practices.Quick overview of using One Time Passwords on your phone--------------------------------------------------------* OTPs involve a shared secret, stored both on the phone and the server* OTPs can be generated on a phone without internet connectivity* OTPs should always be used as a second factor of authentication (if your phone is lost, you account is still secured with a password)* Google Authenticator and other OTP client apps allow you to store multiple OTP secrets and provision those using a QR CodeInstallation------------::    pip install pyotpUsage-----Time-based OTPs~~~~~~~~~~~~~~~::    import pyotp    import time    totp = pyotp.TOTP('base32secret3232')    totp.now() # =&gt; '492039'    # OTP verified for current time    totp.verify('492039') # =&gt; True    time.sleep(30)    totp.verify('492039') # =&gt; FalseCounter-based OTPs~~~~~~~~~~~~~~~~~~::    import pyotp        hotp = pyotp.HOTP('base32secret3232')    hotp.at(0) # =&gt; '260182'    hotp.at(1) # =&gt; '055283'    hotp.at(1401) # =&gt; '316439'    # OTP verified with a counter    hotp.verify('316439', 1401) # =&gt; True    hotp.verify('316439', 1402) # =&gt; FalseGenerating a Secret Key~~~~~~~~~~~~~~~~~~~~~~~A helper function is provided to generate a 32-character base32 secret, compatible with Google Authenticator and other OTP apps::    pyotp.random_base32()Some applications want the secret key to be formatted as a hex-encoded string::    pyotp.random_hex()  # returns a 40-character hex-encoded secretGoogle Authenticator Compatible~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PyOTP works with the Google Authenticator iPhone and Android app, as well as other OTP apps like Authy. PyOTP includes theability to generate provisioning URIs for use with the QR Code scanner built into these MFA client apps::    pyotp.totp.TOTP('JBSWY3DPEHPK3PXP').provisioning_uri(name='alice@google.com', issuer_name='Secure App')    &gt;&gt;&gt; 'otpauth://totp/Secure%20App:alice%40google.com?secret=JBSWY3DPEHPK3PXP&amp;issuer=Secure%20App'    pyotp.hotp.HOTP('JBSWY3DPEHPK3PXP').provisioning_uri(name=&quot;alice@google.com&quot;, issuer_name=&quot;Secure App&quot;, initial_count=0)    &gt;&gt;&gt; 'otpauth://hotp/Secure%20App:alice%40google.com?secret=JBSWY3DPEHPK3PXP&amp;issuer=Secure%20App&amp;counter=0'This URL can then be rendered as a QR Code (for example, using https://github.com/soldair/node-qrcode) which can then be scannedand added to the users list of OTP credentials.Parsing these URLs is also supported::    pyotp.parse_uri('otpauth://totp/Secure%20App:alice%40google.com?secret=JBSWY3DPEHPK3PXP&amp;issuer=Secure%20App')    &gt;&gt;&gt; &lt;pyotp.totp.TOTP object at 0xFFFFFFFF&gt;    pyotp.parse_uri('otpauth://hotp/Secure%20App:alice%40google.com?secret=JBSWY3DPEHPK3PXP&amp;issuer=Secure%20App&amp;counter=0'    &gt;&gt;&gt; &lt;pyotp.totp.HOTP object at 0xFFFFFFFF&gt;Working example~~~~~~~~~~~~~~~Scan the following barcode with your phone's OTP app (e.g. Google Authenticator):.. image:: https://chart.apis.google.com/chart?cht=qr&amp;chs=250x250&amp;chl=otpauth%3A%2F%2Ftotp%2Falice%40google.com%3Fsecret%3DJBSWY3DPEHPK3PXPNow run the following and compare the output::    import pyotp    totp = pyotp.TOTP(&quot;JBSWY3DPEHPK3PXP&quot;)    print(&quot;Current OTP:&quot;, totp.now())Links~~~~~* `Project home page (GitHub) &lt;https://github.com/pyauth/pyotp&gt;`_* `Documentation &lt;https://pyauth.github.io/pyotp/&gt;`_* `Package distribution (PyPI) &lt;https://pypi.python.org/pypi/pyotp&gt;`_* `Change log &lt;https://github.com/pyauth/pyotp/blob/master/Changes.rst&gt;`_* `RFC 4226: HOTP: An HMAC-Based One-Time Password &lt;https://tools.ietf.org/html/rfc4226&gt;`_* `RFC 6238: TOTP: Time-Based One-Time Password Algorithm &lt;https://tools.ietf.org/html/rfc6238&gt;`_* `ROTP &lt;https://github.com/mdp/rotp&gt;`_ - Original Ruby OTP library by `Mark Percival &lt;https://github.com/mdp&gt;`_* `OTPHP &lt;https://github.com/lelag/otphp&gt;`_ - PHP port of ROTP by `Le Lag &lt;https://github.com/lelag&gt;`_* `OWASP Authentication Cheat Sheet &lt;https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md&gt;`_* `NIST SP 800-63-3: Digital Authentication Guideline &lt;https://pages.nist.gov/800-63-3/&gt;`_For new applications:* `WebAuthn &lt;https://www.w3.org/TR/webauthn/&gt;`_* `PyWARP &lt;https://github.com/pyauth/pywarp&gt;`_.. image:: https://github.com/pyauth/pyotp/workflows/Python%20package/badge.svg        :target: https://github.com/pyauth/pyotp/actions.. image:: https://img.shields.io/codecov/c/github/pyauth/pyotp/master.svg        :target: https://codecov.io/github/pyauth/pyotp?branch=master.. image:: https://img.shields.io/pypi/v/pyotp.svg        :target: https://pypi.python.org/pypi/pyotp.. image:: https://img.shields.io/pypi/l/pyotp.svg        :target: https://pypi.python.org/pypi/pyotp.. image:: https://readthedocs.org/projects/pyotp/badge/?version=latest        :target: https://pyotp.readthedocs.io/</longdescription>
</pkgmetadata>