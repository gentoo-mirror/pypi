<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/fabric-orchestrator-client?style=plastic)](https://pypi.org/project/fabric-orchestrator-client/)# Fabric Orchestrator swagger-clientThis is Fabric Orchestrator APIThis Python package is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:- API version: 1.0.1- Package version: 1.0.0- Build package: io.swagger.codegen.v3.generators.python.PythonClientCodegen## Generating the Client CodeDue to a BUG in swagger-code-gen, Please follow the steps belowThat said, there's a bug in the Python generator of Swagger Codegen 3.x, it doesn't generate the code for Bearer authentication in OpenAPI 3.0 definitions. As a workaround, edit your OpenAPI YAML file and replace this part```  securitySchemes:    bearerAuth:           type: http      scheme: bearer      bearerFormat: JWT  ```to```  securitySchemes:    sso_auth:      type: apiKey      in: header      name: Authorization```Then generate a new Python client from the modified API definition.Reference for more details [here](https://stackoverflow.com/questions/57920052/how-to-set-the-bearer-token-in-the-python-api-client-generated-by-swagger-codege)## Requirements.Python 3.9+## Installation &amp; Usage### pip installIf the python package is hosted on Github, you can install directly from Github```shpip install git+https://github.com/fabric-testbed/OrchestratorClient.git```(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/fabric-testbed/OrchestratorClient.git`)Then import the package:```pythonimport fabric_cf.orchestrator.swagger_client ```### SetuptoolsInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).```shpython setup.py install --user```(or `sudo python setup.py install` to install the package for all users)Then import the package:```pythonimport fabric_cf.orchestrator.swagger_client```## Getting StartedPlease follow the [installation procedure](#installation--usage) and then run the following:```pythonfrom __future__ import print_functionimport timefrom fabric_cf.orchestrator.swagger_client.api.version_api import VersionApifrom fabric_cf.orchestrator.swagger_client import Configuration, ApiClientfrom fabric_cf.orchestrator.swagger_client.rest import ApiExceptionfrom pprint import pprint# Configure API key authorization: bearerAuthconfiguration = Configuration()configuration.api_key['Authorization'] = 'YOUR_API_KEY'# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed# configuration.api_key_prefix['Authorization'] = 'Bearer'# create_slices an instance of the API classapi_instance = VersionApi(ApiClient(configuration))try:    # version    api_response = api_instance.version_get()    pprint(api_response)except ApiException as e:    print(&quot;Exception when calling VersionApi-&gt;version_get: %s\n&quot; % e)```## Documentation for API EndpointsAll URIs are relative to *http://127.0.0.1:8700/*Class | Method | HTTP request | Description------------ | ------------- | ------------- | -------------*PoasApi* | [**poas_create_sliver_id_post**](docs/PoasApi.md#poas_create_sliver_id_post) | **POST** /poas/create/{sliver_id} | Perform an operational action on a sliver.*PoasApi* | [**poas_get**](docs/PoasApi.md#poas_get) | **GET** /poas/ | Request get the status of the POAs.*PoasApi* | [**poas_poa_id_get**](docs/PoasApi.md#poas_poa_id_get) | **GET** /poas/{poa_id} | Perform an operational action on a sliver.*ResourcesApi* | [**portalresources_get**](docs/ResourcesApi.md#portalresources_get) | **GET** /portalresources | Retrieve a listing and description of available resources for portal*ResourcesApi* | [**resources_get**](docs/ResourcesApi.md#resources_get) | **GET** /resources | Retrieve a listing and description of available resources. By default, a cached available resource information is returned. User can force to request the current available resources.*SlicesApi* | [**slices_create_post**](docs/SlicesApi.md#slices_create_post) | **POST** /slices/create | Create slice*SlicesApi* | [**slices_delete_delete**](docs/SlicesApi.md#slices_delete_delete) | **DELETE** /slices/delete | Delete all slices for a User within a project.*SlicesApi* | [**slices_delete_slice_id_delete**](docs/SlicesApi.md#slices_delete_slice_id_delete) | **DELETE** /slices/delete/{slice_id} | Delete slice.*SlicesApi* | [**slices_get**](docs/SlicesApi.md#slices_get) | **GET** /slices | Retrieve a listing of user slices*SlicesApi* | [**slices_modify_slice_id_accept_post**](docs/SlicesApi.md#slices_modify_slice_id_accept_post) | **POST** /slices/modify/{slice_id}/accept | Accept the last modify an existing slice*SlicesApi* | [**slices_modify_slice_id_put**](docs/SlicesApi.md#slices_modify_slice_id_put) | **PUT** /slices/modify/{slice_id} | Modify an existing slice*SlicesApi* | [**slices_renew_slice_id_post**](docs/SlicesApi.md#slices_renew_slice_id_post) | **POST** /slices/renew/{slice_id} | Renew slice*SlicesApi* | [**slices_slice_id_get**](docs/SlicesApi.md#slices_slice_id_get) | **GET** /slices/{slice_id} | slice properties*SliversApi* | [**slivers_get**](docs/SliversApi.md#slivers_get) | **GET** /slivers | Retrieve a listing of user slivers*SliversApi* | [**slivers_sliver_id_get**](docs/SliversApi.md#slivers_sliver_id_get) | **GET** /slivers/{sliver_id} | slivers properties*VersionApi* | [**version_get**](docs/VersionApi.md#version_get) | **GET** /version | Version## Documentation For Models - [Poa](docs/Poa.md) - [PoaData](docs/PoaData.md) - [PoaPost](docs/PoaPost.md) - [PoaPostData](docs/PoaPostData.md) - [PoaPostDataVcpuCpuMap](docs/PoaPostDataVcpuCpuMap.md) - [Resource](docs/Resource.md) - [Resources](docs/Resources.md) - [Slice](docs/Slice.md) - [SliceDetails](docs/SliceDetails.md) - [Slices](docs/Slices.md) - [SlicesPost](docs/SlicesPost.md) - [Sliver](docs/Sliver.md) - [Slivers](docs/Slivers.md) - [Status200OkNoContent](docs/Status200OkNoContent.md) - [Status200OkNoContentData](docs/Status200OkNoContentData.md) - [Status200OkPaginated](docs/Status200OkPaginated.md) - [Status200OkSingle](docs/Status200OkSingle.md) - [Status400BadRequest](docs/Status400BadRequest.md) - [Status400BadRequestErrors](docs/Status400BadRequestErrors.md) - [Status401Unauthorized](docs/Status401Unauthorized.md) - [Status401UnauthorizedErrors](docs/Status401UnauthorizedErrors.md) - [Status403Forbidden](docs/Status403Forbidden.md) - [Status403ForbiddenErrors](docs/Status403ForbiddenErrors.md) - [Status404NotFound](docs/Status404NotFound.md) - [Status404NotFoundErrors](docs/Status404NotFoundErrors.md) - [Status500InternalServerError](docs/Status500InternalServerError.md) - [Status500InternalServerErrorErrors](docs/Status500InternalServerErrorErrors.md) - [Version](docs/Version.md) - [VersionData](docs/VersionData.md)## Documentation For Authorization## bearerAuth- **Type**: API key- **API key parameter name**: Authorization- **Location**: HTTP header## Documentation For Orchestrator ProxyUsers are recommended to use Orchestrator Proxy class for any orchestrator operations. Examples are shown below.### Get Resources```orchestrator_host = &quot;dev-3.fabric-testbed.net&quot;proxy = OrchestratorProxy(orchestrator_host=orchestrator_host)resources = proxy.resources(token=token)```### Create Slice``` import fim.user as fu t = fu.ExperimentTopology() n1 = t.add_node(name='n1', site='RENC') cap = fu.Capacities() cap.set_fields(core=4, ram=64, disk=500) n1.set_properties(capacities=cap, image_type='qcow2', image_ref='default_centos_8') n1.add_component(ctype=fu.ComponentType.SmartNIC, model='ConnectX-6', name='nic1') n2 = t.add_node(name='n2', site='RENC') n2.set_properties(capacities=cap, image_type='qcow2', image_ref='default_centos_8') n2.add_component(ctype=fu.ComponentType.GPU, model='Tesla T4', name='nic2') slice_graph = t.serialize() sss_key = &quot;&lt;user public key&gt;&quot; orchestrator_host = &quot;dev-3.fabric-testbed.net&quot; proxy = OrchestratorProxy(orchestrator_host=orchestrator_host) status, reservation_list = proxy.create(token=token, slice_name=name, slice_graph=slice_graph, ssh_key=ssh_key)```### Get Slices```orchestrator_host = &quot;dev-3.fabric-testbed.net&quot;proxy = OrchestratorProxy(orchestrator_host=orchestrator_host)status, slice_list = proxy.slices(token=token)```### Get Slice```orchestrator_host = &quot;dev-3.fabric-testbed.net&quot;proxy = OrchestratorProxy(orchestrator_host=orchestrator_host)status, slice_topology = proxy.get_slice(token=token, slice_id=slice_id)```### Get Slivers```orchestrator_host = &quot;dev-3.fabric-testbed.net&quot;proxy = OrchestratorProxy(orchestrator_host=orchestrator_host)status, reservation_list = proxy.slivers(token=token, slice_id=slice_id)```### Get Sliver```orchestrator_host = &quot;dev-3.fabric-testbed.net&quot;proxy = OrchestratorProxy(orchestrator_host=orchestrator_host)status, reservation = proxy.slivers(token=token, slice_id=slice_id, sliver_id=sliver_id)```### Delete Slice by slice_id```orchestrator_host = &quot;dev-3.fabric-testbed.net&quot;proxy = OrchestratorProxy(orchestrator_host=orchestrator_host)status, result = proxy.delete(token=token, slice_id=slice_id)```### Delete Slices by email```orchestrator_host = &quot;dev-3.fabric-testbed.net&quot;proxy = OrchestratorProxy(orchestrator_host=orchestrator_host)status, result = proxy.delete(token=token, email=email)```### Renew Slice```now = datetime.now(timezone.utc)new_time = now + timedelta(days=2)orchestrator_host = &quot;dev-3.fabric-testbed.net&quot;proxy = OrchestratorProxy(orchestrator_host=orchestrator_host)status, reservation = proxy.renew_slice(token=token, slice_id=slice_id,                                        new_lease_end_time=new_time.strftime('%Y-%m-%d %H:%M:%S %z'))```## Authorkthare10@unc.edu</longdescription>
</pkgmetadata>