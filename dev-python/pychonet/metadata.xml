<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pychonet[![GitHub Release][releases-shield]][releases][![License][license-shield]](LICENSE)![Project Maintenance][maintenance-shield]A library for interfacing with the ECHONETlite protocol as commonly used in Japan.Useful for interfacing to many interesting devices such as HVACs,electric car chargers, rice cookers (not joking), and solar systemsthat support ECHONETLite.The current functionality is limited to a few ECHONETLite classes, notably HVACbut it can easily be extended to any ECHONETlite classes required.The basic boilerplate EchoNetInstance class can be used to provideraw connectivity to any compatible device but it is up to the developerto create useful classes. Any ECHONETlite class additions to the library are welcome.Version 2.0.0 of this libray was rebuilt to use asyncio for better compatability with home assistant.It is designed to work with Python 3.9.5+## InstructionsSimplest way to install is to use pip:```pip install pychonet```## Basic usage### Create the ECHONETLite listener service on port 3610:```pythonfrom pychonet.lib.udpserver import UDPServerfrom pychonet import Factoryfrom pychonet import ECHONETAPIClient as apifrom pychonet import HomeAirConditionerfrom pychonet import EchonetInstanceudp = UDPServer()loop = asyncio.get_event_loop()udp.run(&quot;0.0.0.0&quot;, 3610, loop=loop)server = api(server=udp)```### Discover a list of ECHONETlite instances on a particular server:```pythonawait server.discover('192.168.1.6')```### Populate the propertymap for a particular ECHONETLite instance:```pythonawait server.getAllPropertyMaps('192.168.1.6', 1, 48, 1)```### Create a ECHONETLite device using the Factory:Paramaters include the port listener, and EOJGC, EOJCC, and EOJCI codes.```pythonaircon = Factory(&quot;192.168.1.6&quot;,server, 1, 48, 1)```### OR, create a specific ECHONETLite instance using built in objects:```pythonaircon = HomeAirConditioner(&quot;192.168.1.6&quot;, server)```### Turn HVAC on or off:```pythonawait aircon.on()await aircon.off()await aircon.getOperationalStatus(){'status': 'off'}```### Set or Get a HVACs target temperature:```pythonawait aircon.setOperationalTemperature(25)await aircon.getOperationalTemperature(){'set_temperature': 25}```### Set or Get a HVACs mode of operation:```pythonsupported modes =  'auto', 'cool', 'heat', 'dry', 'fan_only', 'other'await aircon.setMode('cool')await aircon.getMode(){'mode': 'cool'}```### Set or Get a HVACs fan speed:Note - your HVAC may not support all fan speeds.```pythonsupported modes = 'auto', 'minimum', 'low', 'medium-Low', 'medium', 'medium-high', 'high', 'very high', 'max'await aircon.setFanSpeed('medium-high')await aircon.getFanSpeed(){'fan_speed': 'medium-high'}```### Get HVAC attributes at once (Note, the property map must be populated):```pythonawait aircon.update(){'status': 'On', 'set_temperature': 25, 'fan_speed': 'medium-high', 'room_temperature': 25, 'mode': 'cooling'}```### OR grab a specific attribute at once (Note, the property map must be populated):```pythonawait aircon.update(0x80)```## Using this library with Home AssistantNOTE: For Home Assistant users there is a dedicated repo that can be installed via HACS that can provide custom components for discovered ECHONETlite devices such as Mitsubishi airconditioners:(https://github.com/scottyphillips/echonetlite_homeassistant)'example_async.py' gives you a boilerplate asyncio program that will discover your ECHONETLite instance and return information about supported services.## Hall of FameBig Thanks to Naoki Sawada for many excellent updates to enable push notifications via multicast.„Å©„ÅÜ„ÇÇ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô !Thanks to Jason Nader for all the quality of life updates to the codebase and doco.Thanks to khcnz (Karl Chaffey) and gvs for helping refector the old codeand contributing to testing.Thanks to Dick Swart, Masaki Tagawa, Paul, khcnz,  Kolodnerd, Leonunix, and Alfie Gernerfor each contributing code updates to this library.Thanks to Jeffro Carr who inspired me to write my own native Python ECHONETlibrary for Home Assistant.Thanks to Futomi Hatano for open sourcing a well-documented ECHONET Litelibrary in Node JS.(https://github.com/futomi/node-echonet-lite)## References for ECHONET specifications- [ECHONET Lite Specification, Version 1.13](https://echonet.jp/spec_v113_lite_en/)  - [Part 2 ECHONET Lite Communications Middleware Specifications](https://echonet.jp/wp/wp-content/uploads/pdf/General/Standard/ECHONET_lite_V1_13_en/ECHONET-Lite_Ver.1.13(02)_E.pdf)- [APPENDIX, Detailed Requirements for ECHONET Device objects, Release Q](https://echonet.jp/wp/wp-content/uploads/pdf/General/Standard/Release/Release_Q/Appendix_Release_Q_E.pdf)## LicenseThis application is licensed under an MIT license, refer to LICENSE-MIT for details.Portions of 'ECHONET Lite Device Emulator' (Copyright 2020 Kanagawa Institute of Technology)have been used in this application. This code was licensed under the MIT licence.The UDP code is based on 'aio-udp-server' (Copyright 2021 Dmitriy Bashkirtsev)This code is licenced under the GPL licence.(https://github.com/bashkirtsevich-llc/aioudp)–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ! üá∫üá¶***[pychonet]: https://github.com/scottyphillips/pychonet[releases-shield]: https://img.shields.io/github/release/scottyphillips/pychonet.svg?style=for-the-badge[releases]: https://github.com/scottyphillips/pychonet/releases[license-shield]:https://img.shields.io/github/license/scottyphillips/pychonet?style=for-the-badge[buymecoffee]: https://www.buymeacoffee.com/RgKWqyt?style=for-the-badge[buymecoffeebadge]: https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg?style=for-the-badge[maintenance-shield]: https://img.shields.io/badge/Maintainer-Scott%20Phillips-blue?style=for-the-badge</longdescription>
</pkgmetadata>