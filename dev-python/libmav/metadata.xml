<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Libmav PythonNative python bindings for the [libmav](https://github.com/ThomasDebrunner/libmav) library.libmav-python is a runtime defined low-level MAVLink library. In comparison to other python MAVLink libaries, it has certain advantages:- **Runtime defined message set.** No need to recompile on message set change or custom messages- **Implemented in C++.** Much faster than pure python- **Simple, pythonic API.** No need to learn a new API or asyncio, just use python## Installation```pip install libmav```## Example usage```pythonimport libmav# Create a message set from a mavlink xml filemessage_set = libmav.MessageSet('&lt;PATH TO common.xml&gt;')# You can also add additional messages here with inline xmlmessage_set.add_from_xml_string('''&lt;mavlink&gt;    &lt;messages&gt;        &lt;message&gt;            ...        &lt;/message&gt;    &lt;/messages&gt;&lt;/mavlink&gt;''')# Create a message from the message setmessage = message_set.create('MY_PROTOCOL_MESSAGE')# Set fields of the message individuallymessage['my_numeric_field'] = 1message['my_char_array_field'] = 'Hello world'message['my_float_array_field'] = [1.0, 2.0, 3.0]message['my_int_array_field'] = [4, 5, 6]# Get fields individuallymy_num = message['my_numeric_field']my_string = message['my_char_array_field']my_float_array_field = message['my_float_array_field']# You can also use pythonic things like list comprehensions    # This creates a list of all the values in my_float_array_field multiplied by 2my_float_array_field = [x * 2 for x in message['my_float_array_field']]# Set fields from a dictmessage.set_from_dict({            'my_numeric_field': 1,            'my_char_array_field': 'Hello world',            'my_float_array_field': [1.0, 2.0, 3.0],            'my_int_array_field': [4, 5, 6]        })# Get fields as python dictmessage_dict = message.to_dict()# Connect to a TCP serverconn_physical = libmav.TCPClient('192.168.1.12', 14550)conn_runtime = libmav.NetworkRuntime(self.message_set, heartbeat, client_physical)connection = conn_runtime.await_connection(2000)# Check if connection is still aliveif not connection.alive():    print('Connection lost, waiting for reconnect...')    connection = conn_runtime.await_connection(2000)# Send a messageconnection.send(message)# Receive a message, timeout 1sreceived_message = connection.receive(&quot;HEARTBEAT&quot;, 1000)# Receive a message, no timeoutreceived_message = connection.receive(&quot;HEARTBEAT&quot;)# Receive a message as the result of a message we send# This avoids the race condition between us sending and then waiting for receptionexpectation = connection.receive(&quot;PARAM_VALUE&quot;)connection.send(our_param_request_message)received_message = connection.receive(expectation, 1000)# Connect to a Serial portconn_physical = libmav.Serial('/dev/ttyUSB0')conn_runtime = libmav.NetworkRuntime(self.message_set, heartbeat, client_physical)```## Install from source### Prerequisites* A compiler with C++11 support* Pip 10+ or CMake &gt;= 3.4 (or 3.14+ on Windows, which was the first version to support VS 2019)* Ninja or Pip 10+Just clone this repository and pip install. Note the `--recursive` option which isneeded for the pybind11 submodule:```bashgit clone --recursive https://github.com/Auterion/libmav-python.gitpip install ./libmav-python```With the `setup.py` file included in this project, the `pip install` command willinvoke CMake and build the pybind11 module as specified in `CMakeLists.txt`.</longdescription>
</pkgmetadata>