<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### PreprocessorSuited for simple preprocessing of Python files. The original use case of the package was annoying Cython work to do with data types. Notice that Preprocessor can run on any type of file (e.g. TSV, C++ sources etc.). To avoid clashes with other programming language preprocessor prefix and suffix is fully tunable.#### ExampleHere's a small file where we replicate the same Cython code 3 times - once for every of int, float and double datatypes. You can find the code for `typed_expression` function in `sample_utils.py` in this repo.```Pythonpypfrom sample_utils import typed_expressionypycdef class Mat:    cdef CMat[dtype] matinternal    int dtype    def sum(Mat self):        # Inline preprcoessor expression. Executes a function.        # Generally inline expressions should be one line,        # But can be extended to multiple where all the data        # on second line and following will be captured into        # a string argument passed as last positional argument        # to a function        pypinline typed_expression(pyp, &quot;self.matinternal&quot;, &quot;CMat&quot;,            print('siema')            return WrapMat(TYPED_EXPRESSION.sum())        ypy```The output of the preprocessed file looks like this:```Pythoncdef class Mat:    cdef CMat[dtype] matinternal    int dtype    def sum(Mat self):        # Inline preprcoessor expression. Executes a function.        # Generally inline expressions should be one line,        # But can be extended to multiple where all the data        # on second line and following will be captured into        # a string argument passed as last positional argument        # to a function        if self.dtype == np.int32:            print('siema')            return WrapMat((&lt;CMat[int]&gt;(self.matinternal)).sum())        elif self.dtype == np.float32:            print('siema')            return WrapMat((&lt;CMat[float]&gt;(self.matinternal)).sum())        elif self.dtype == np.float64:            print('siema')            return WrapMat((&lt;CMat[double]&gt;(self.matinternal)).sum())        else:            raise ValueError(&quot;Invalid dtype:&quot; + self.dtype + &quot; (should be one of int32, float32, float64)&quot;)```#### Command Line InterfacePreprocessor comes with a command line script, to easily run the preprocessor form environments outside of Python```bashpreprocessor --input sample.py.pre --output sample.py```</longdescription>
</pkgmetadata>