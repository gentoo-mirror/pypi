<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Public Suffix List module for Python====================================This module allows you to get the public suffix, as well as the registrable domain,of a domain name using the Public Suffix List from http://publicsuffix.orgA public suffix is a domain suffix under which you can register domainnames, or under which the suffix owner does not control the subdomains.Some examples of public suffixes in the former example are &quot;.com&quot;,&quot;.co.uk&quot; and &quot;pvt.k12.wy.us&quot;; examples of the latter case are &quot;github.io&quot; and&quot;blogspot.com&quot;.  The public suffix is sometimes referred to as the effectiveor extended TLD (eTLD).Accurately knowing the public suffix of a domain is useful when handlingweb browser cookies, highlighting the most important part of a domain namein a user interface or sorting URLs by web site. It is also used in a wide rangeof research and applications that leverages Domain Name System (DNS) data.This module builds the public suffix list as a Trie structure, making it more efficientthan other string-based modules available for the same purpose. It can be usedeffectively in large-scale distributed environments, such as PySpark.This Python module includes with a copy of the Public Suffix List (PSL) so that it isusable out of the box. Newer versions try to provide reasonably fresh copies ofthis list. It also includes a convenience method to fetch the latest list. The PSL doeschange regularly.The code is a fork of the publicsuffix package and includes the same base API. Inaddition, it contains a few variants useful for certain use cases, such as the option toignore wildcards or return only the extended TLD (eTLD). You just need to import publicsuffix2 instead.The public suffix list is now provided in UTF-8 format. To correctly processIDNA-encoded domains, either the query or the list must be converted. By default, themodule converts the PSL. If your use case includes UTF-8 domains, e.g., '食狮.com.cn',you'll need to set the IDNA-encoding flag to False on instantiation (see examples below).Failure to use the correct encoding for your use case can lead to incorrect results fordomains that utilize unicode characters.The code is MIT-licensed and the publicsuffix data list is MPL-2.0-licensed.Usage-----Install with::    pip install publicsuffix2The module provides functions to obtain the base domain, or sld, of an fqdn, as well as oneto get just the public suffix. In addition, the functions a number of boolean parameters thatcontrol how wildcards are handled. In addition to the functions, the module exposes a class thatparses the PSL, and allows for more control.The module provides two equivalent functions to query a domain name, and return the base domain,or second-level-doamin; get_public_suffix() and get_sld()::    &gt;&gt;&gt; from publicsuffix2 import get_public_suffix    &gt;&gt;&gt; get_public_suffix('www.example.com')    'example.com'    &gt;&gt;&gt; get_sld('www.example.com')    'example.com'    &gt;&gt;&gt; get_public_suffix('www.example.co.uk')    'example.co.uk'    &gt;&gt;&gt; get_public_suffix('www.super.example.co.uk')    'example.co.uk'    &gt;&gt;&gt; get_sld(&quot;co.uk&quot;)  # returns eTLD as is    'co.uk'This function loads and caches the public suffix list. To obtain the latest version of thePSL, use the fetch() function to first download the latest version. Alternatively, you can passa custom list.For more control, there is also a class that parses a PublicSuffix List and allows the same queries on individual domain names::    &gt;&gt;&gt; from publicsuffix2 import PublicSuffixList    &gt;&gt;&gt; psl = PublicSuffixList()    &gt;&gt;&gt; psl.get_public_suffix('www.example.com')    'example.com'    &gt;&gt;&gt; psl.get_public_suffix('www.example.co.uk')    'example.co.uk'    &gt;&gt;&gt; psl.get_public_suffix('www.super.example.co.uk')    'example.co.uk'    &gt;&gt;&gt; psl.get_sld('www.super.example.co.uk')    'example.co.uk'Note that the ``host`` part of an URL can contain strings that arenot plain DNS domain names (IP addresses, Punycode-encoded names, name incombination with a port number or a username, etc.). It is up to thecaller to ensure only domain names are passed to the get_public_suffix()method.The get_public_suffix() function and the PublicSuffixList class initializer acceptan optional argument pointing to a public suffix file. This can either be a filepath, an iterable of public suffix lines, or a file-like object pointing to anopened list::    &gt;&gt;&gt; from publicsuffix2 import get_public_suffix    &gt;&gt;&gt; psl_file = 'path to some psl data file'    &gt;&gt;&gt; get_public_suffix('www.example.com', psl_file)    'example.com'Note that when using get_public_suffix() a global cache keeps the latest providedsuffix list data.  This will use the cached latest loaded above::    &gt;&gt;&gt; get_public_suffix('www.example.co.uk')    'example.co.uk'**IDNA-encoding.** The public suffix list is now in UTF-8 format. For those use cases thatinclude IDNA-encoded domains, the list must be converted. Publicsuffix2 includes idnaencoding as a parameter of the PublicSuffixList initialization and is true bydefault. For UTF-8 use cases, set the idna parameter to False::    &gt;&gt;&gt; from publicsuffix2 import PublicSuffixList    &gt;&gt;&gt; psl = PublicSuffixList(idna=True)  # on by default    &gt;&gt;&gt; psl.get_public_suffix('www.google.com')    'google.com'    &gt;&gt;&gt; psl = PublicSuffixList(idna=False)  # use UTF-8 encodings    &gt;&gt;&gt; psl.get_public_suffix('食狮.com.cn')    '食狮.com.cn'**Ignore wildcards.** In some use cases, particularly those related to large-scale domain processing,the user might want to ignore wildcards to create more aggregation. This is possible by settingthe parameter wildcard=False.::    &gt;&gt;&gt; psl.get_public_suffix('telinet.com.pg', wildcard=False)    'com.pg'    &gt;&gt;&gt; psl.get_public_suffix('telinet.com.pg', wildcard=True)    'telinet.com.pg'**Require valid eTLDs (strict).** In the publicsuffix2 module, a domain with an invalid TLD will still returnreturn a base domain, e.g,::    &gt;&gt;&gt; psl.get_public_suffix('www.mine.local')    'mine.local'This is useful for many use cases, while in others, we want to ensure that the domain includes avalid eTLD. In this case, the boolean parameter strict provides a solution. If this flag is set,an invalid TLD will return None.::    &gt;&gt;&gt; psl.get_public_suffix('www.mine.local', strict=True) is None    True**Return eTLD only.** The standard use case for publicsuffix2 is to return the registrable,or base, domainaccording to the public suffix list. In some cases, however, we only wish to find the eTLDitself. This is available via the get_tld() method.::    &gt;&gt;&gt; psl.get_tld('www.google.com')    'com'    &gt;&gt;&gt; psl.get_tld('www.google.co.uk')    'co.uk'All of the methods and functions include the wildcard and strict parameters.For convenience, the public method get_sld() is available. This is identical to the methodget_public_suffix() and is intended to clarify the output for some users.To **update the bundled suffix list** use the provided setup.py command::    python setup.py update_pslThe update list will be saved in `src/publicsuffix2/public_suffix_list.dat`and you can build a new wheel with this bundled data.Alternatively, there is a fetch() function that will fetch the latest versionof a Public Suffix data file from https://publicsuffix.org/list/public_suffix_list.datYou can use it this way::    &gt;&gt;&gt; from publicsuffix2 import get_public_suffix    &gt;&gt;&gt; from publicsuffix2 import fetch    &gt;&gt;&gt; psl_file = fetch()    &gt;&gt;&gt; get_public_suffix('www.example.com', psl_file)    'example.com'Note that the once loaded, the data file is cached and therefore fetched onlyonce.The extracted public suffix list, that is the tlds and their modifiers, is put intoan instance variable, tlds, which can be accessed as an attribute, tlds.::    &gt;&gt;&gt; psl = PublicSuffixList()    &gt;&gt;&gt; psl.tlds[:5]    ['ac',    'com.ac',    'edu.ac',    'gov.ac',    'net.ac']**Using the module in large-scale processing**If using this library in large-scale pyspark processing, you should instantiate the class asa global variable, not within a user function. The class methods can then be used within userfunctions for distributed processing.Source------Get a local copy of the development repository. The development takesplace in the ``develop`` branch. Stable releases are tagged in the ``master``branch::    git clone https://github.com/nexB/python-publicsuffix2.gitHistory-------This code is forked from Tomaž Šolc's fork of David Wilson's code.Tomaž Šolc's code originally at:https://www.tablix.org/~avian/git/publicsuffix.gitCopyright (c) 2014 Tomaž Šolc &lt;tomaz.solc@tablix.org&gt;David Wilson's code was originally at:http://code.google.com/p/python-public-suffix-list/Copyright (c) 2009 David WilsonLicense-------The code is MIT-licensed.The vendored public suffix list data from Mozilla is under the MPL-2.0.Copyright (c) 2015 nexB Inc. and others.Copyright (c) 2014 Tomaž Šolc &lt;tomaz.solc@tablix.org&gt;Copyright (c) 2009 David WilsonPermission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the &quot;Software&quot;),to deal in the Software without restriction, including without limitationthe rights to use, copy, modify, merge, publish, distribute, sublicense,and/or sell copies of the Software, and to permit persons to whom theSoftware is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHERDEALINGS IN THE SOFTWARE.Changelog---------2019-12-19   publicsuffix2 2.20191219    * Add new strict mode to get_tld() by @hiratara .    * Update TLD list    * Add tests from Mozilla test suite2019-08-12   publicsuffix2 2.20190812    * Fix regression in available tlds.    * Format and streamline code.2019-08-11   publicsuffix2 2.20190811    * Update publicsuffix.file to the latest version from Mozilla.2019-08-08    publicsuffix2 2.20190808    * Add additional functionality and handles change to PSL format    * Add attribute to retrieve the PSL as a list2019-02-05    publicsuffix2 2.201902051213    * Update publicsuffix.file to the latest version from Mozilla.    * Restore a fetch() function by popular demand2018-12-13    publicsuffix2 2.20181213    * Update publicsuffix.file to the latest version from Mozilla.2018-10-01    publicsuffix2 2.20180921.2    * Update publicsuffix.file to the latest version from Mozilla.    * Breaking API change: publicsuffix module renamed to publicsuffix22016-08-18    publicsuffix2 2.20160818    * Update publicsuffix.file to the latest version from Mozilla.2016-06-21    publicsuffix2 2.20160621    * Update publicsuffix.file to the latest version from Mozilla.    * Adopt new version scheme: major.&lt;publisiffix list date&gt;2015-10-12    publicsuffix2 2.1.0    * Merged latest updates from publicsuffix    * Added new convenience top level get_public_suffix_function caching      a loaded list if needed.    * Updated publicsuffix.file to the latest version from Mozilla.    * Added an update_psl setup command to fetch and vendor the latest list      Use as: python setup.py update_psl2015-06-04    publicsuffix2 2.0.0    * Forked publicsuffix, but kept the same API    * Updated publicsuffix.file to the latest version from Mozilla.    * Changed packaging to have the suffix list be package data      and be wheel friendly.    * Use spaces indentation, not tabs2014-01-14    publicsuffix 1.0.5    * Correctly handle fully qualified domain names (thanks to Matthäus      Wander).    * Updated publicsuffix.txt to the latest version from Mozilla.2013-01-02    publicsuffix 1.0.4    * Added missing change log.2013-01-02    publicsuffix 1.0.3    * Updated publicsuffix.txt to the latest version from Mozilla.    * Added trove classifiers.    * Minor update of the README.2011-10-10    publicsuffix 1.0.2    * Compatibility with Python 3.x (thanks to Joern      Koerner) and Python 2.52011-09-22    publicsuffix 1.0.1    * Fixed installation issue under virtualenv (thanks to      Mark McClain)2011-07-29    publicsuffix 1.0.0    * First release</longdescription>
</pkgmetadata>