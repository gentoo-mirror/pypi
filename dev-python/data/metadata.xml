<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>data====``data`` is a small Python module that allows you to treat input in a singularway and leave it up to the caller to supply a byte-string, a unicode object, afile-like or a filename... code-block:: python    &gt;&gt;&gt; open('helloworld.txt', 'w').write('hello, world from a file')    &gt;&gt;&gt; from data import Data as I    &gt;&gt;&gt; a = I(u'hello, world')    &gt;&gt;&gt; b = I(file='helloworld.txt')    &gt;&gt;&gt; c = I(open('helloworld.txt'))    &gt;&gt;&gt; print unicode(a)    hello, world    &gt;&gt;&gt; print unicode(b)    hello, world from a file    &gt;&gt;&gt; print unicode(c)    hello, world from a fileThis can be made even more convenient using the ``data`` decorator:.. code-block:: python    &gt;&gt;&gt; from data.decorators import data    &gt;&gt;&gt; @data('buf')    ... def parse_buffer(buf, magic_mode=False):    ...   return 'buf passed in as ' + repr(buf)    ...    &gt;&gt;&gt; parse_buffer('hello')    &quot;buf passed in as Data(data='hello', encoding='utf8')&quot;    &gt;&gt;&gt; rv = parse_buffer(open('helloworld.txt'))    &gt;&gt;&gt; assert 'file=' in rvFitting in----------All instances support methods like ``read`` or ``__str__`` that make it easy tofit it into existing APIs:.. code-block:: python    &gt;&gt;&gt; d = I('some data')    &gt;&gt;&gt; d.read(4)    u'some'    &gt;&gt;&gt; d.read(4)    u' dat'    &gt;&gt;&gt; d.read(4)    u'a'    &gt;&gt;&gt; e = I(u'more data')    &gt;&gt;&gt; str(e)    'more data'Note how ``read`` returns unicode. Additionally, ``readb`` is available:.. code-block:: python    &gt;&gt;&gt; f = I(u'I am \xdcnicode.')    &gt;&gt;&gt; f.readb()    'I am \xc3\x9cnicode.'Every ``data`` object has an encoding attribute which is used for convertingfrom and to unicode... code-block:: python    &gt;&gt;&gt; g = I(u'I am \xdcnicode.', encoding='latin1')    &gt;&gt;&gt; g.readb()    'I am \xdcnicode.'Iteration and line reading are also supported:.. code-block:: python    &gt;&gt;&gt; h = I('I am\nof many\nlines')    &gt;&gt;&gt; h.readline()    u'I am\n'    &gt;&gt;&gt; h.readlines()    [u'of many\n', u'lines']    &gt;&gt;&gt; i = I('line one\nline two\n')    &gt;&gt;&gt; list(iter(i))    [u'line one\n', u'line two\n']Extras------save_to~~~~~~~Some useful convenience methods are available:.. code-block:: python    &gt;&gt;&gt; j = I('example')    &gt;&gt;&gt; j.save_to('example.txt')The ``save_to`` method will use the most efficient way possible to save thedata to a file (``copyfileobj`` or ``write()``). It can also be passed afile-like object:.. code-block:: python    &gt;&gt;&gt; k = I('example2')    &gt;&gt;&gt; with open('example2.txt', 'wb') as out:    ...     k.save_to(out)    ...temp_saved~~~~~~~~~~If you need the output inside a secure temporary file, ``temp_saved`` isavailable:.. code-block:: python    &gt;&gt;&gt; l = I('goes into tmp')    &gt;&gt;&gt; with l.temp_saved() as tmp:    ...     print tmp.name.startswith('/tmp/tmp')    ...     print l.read()    ...    True    goes into tmp``temp_saved`` functions almost identically to ``tempfile.NamedTemporaryFile``,with one difference: There is no ``delete`` argument. The file is removed onlywhen the context manager exits.Where it is useful------------------``data`` can be used on both sides of an API, either while passing values in:.. code-block:: python    &gt;&gt;&gt; import json    &gt;&gt;&gt; from data import Data as I    &gt;&gt;&gt; m = I('{&quot;this&quot;: &quot;json&quot;}')    &gt;&gt;&gt; json.load(m)    {u'this': u'json'}or when getting values passed (see the data decorator example above). Ifnecessary, you can also support APIs that allow users to pass in filenames:.. code-block:: python    &gt;&gt;&gt; class Parser(object):    ...   @data('input')    ...   def parse(self, input, parser_opt=False):    ...     return input    ...   def parse_file(self, input_file, *args, **kwargs):    ...     return self.parse(I(file=input_file), *args, **kwargs)    ...    &gt;&gt;&gt; p = Parser()    &gt;&gt;&gt; p.parse_file('/dev/urandom')    Data(file='/dev/urandom', encoding='utf8')See the documentation at http://pythonhosted.org/data for an API reference.Python 2 and 3--------------``data`` works the same on Python 2 and 3 thanks to `six&lt;https://pypi.python.org/pypi/six&gt;`_, a few compatibility functions and atestsuite.Python 3 is supported from 3.3 onwards, Python 2 from 2.6.</longdescription>
</pkgmetadata>