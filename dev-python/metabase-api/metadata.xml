<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--[![HitCount](http://hits.dwyl.com/vvaezian/metabase_api_python.svg)](http://hits.dwyl.com/vvaezian/metabase_api_python)--&gt;[![PyPI version](https://badge.fury.io/py/metabase-api.svg?)](https://badge.fury.io/py/metabase-api)[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg)](https://github.com/vvaezian/metabase_api_python/issues)[![codecov](https://codecov.io/gh/vvaezian/metabase_api_python/branch/master/graph/badge.svg?token=FNH20CUC4F)](https://codecov.io/gh/vvaezian/metabase_api_python)[![GitHub license](https://img.shields.io/github/license/vvaezian/metabase_api_python.svg)](https://github.com/vvaezian/metabase_api_python/blob/master/LICENSE)## Installation```pythonpip install metabase-api```## Initializing```pythonfrom metabase_api import Metabase_APImb = Metabase_API('https://...', 'username', 'password')  # if password is not given, it will prompt for password```## Functions### REST functions (get, post, put, delete)Calling Metabase API endpoints (documented [here](https://github.com/metabase/metabase/blob/master/docs/api-documentation.md)) can be done using the corresponding REST function in the wrapper.  E.g. to call the [endpoint](https://github.com/metabase/metabase/blob/master/docs/api-documentation.md#get-apidatabase) `GET /api/database/`, use `mb.get('/api/database/')`.### Helper FunctionsYou usually don't need to deal with these functions directly (e.g. [get_item_info](https://github.com/vvaezian/metabase_api_python/blob/77ef837972bc169f96a3ca520da769e0b933e8a8/metabase_api/metabase_api.py#L89), [get_item_id](https://github.com/vvaezian/metabase_api_python/blob/77ef837972bc169f96a3ca520da769e0b933e8a8/metabase_api/metabase_api.py#L128), [get_item_name](https://github.com/vvaezian/metabase_api_python/blob/77ef837972bc169f96a3ca520da769e0b933e8a8/metabase_api/metabase_api.py#L116))### Custom Functions- [create_card](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L289)- [create_collection](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L461)- [create_segment](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L486)- [copy_card](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L530)- [copy_pulse](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L591)- [copy_dashboard](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L643)- [copy_collection](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L736)- [clone_card](https://github.com/vvaezian/metabase_api_python/blob/77ef837972bc169f96a3ca520da769e0b933e8a8/metabase_api/metabase_api.py#L1003)- [update_column](https://github.com/vvaezian/metabase_api_python/blob/77ef837972bc169f96a3ca520da769e0b933e8a8/metabase_api/metabase_api.py#L1146)- [search](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L835)- [get_card_data](https://github.com/vvaezian/metabase_api_python/blob/77ef837972bc169f96a3ca520da769e0b933e8a8/metabase_api/metabase_api.py#L966)- [move_to_archive](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L933)- [delete_item](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L963)  - [make_json](https://github.com/vvaezian/metabase_api_python/blob/150c8143bf3ec964568d54bddd80bf9c1b2ca214/metabase_api/metabase_api.py#L1015)*For a complete list of functions parameters see the functions definitions using the above links. Here we provide a short description:*- #### `create_card`Specify the name to be used for the card, which table (name/id) to use as the source of data and where (i.e. which collection (name/id)) to save the card (default is the root collection).  ```pythonmb.create_card(card_name='test_card', table_name='mySourceTable')  # Setting `verbose=True` will print extra information while creating the card.```Using the `column_order` parameter we can specify how the order of columns should be in the created card. Accepted values are *'alphabetical', 'db_table_order'* (default), or a list of column names.```pythonmb.create_card(card_name='test_card', table_name='mySourceTable', column_order=['myCol5', 'myCol3', 'myCol8'])```All or part of the function parameters and many more information (e.g. visualisation settings) can be provided to the function in a dictionary, using the *custom_json* parameter. (also see the `make_json` function below)```pythonq = '''  select *  from my_table   where city = '{}''''for city in city_list:  query = q.format(city)  # here I included the minimum keys required. You can add more.  my_custom_json = {    'name': 'test_card',    'display': 'table',    'dataset_query': {      'database': db_id,      'native': { 'query': query },      'type': 'native'     }  }  # See the function definition for other parameters of the function (e.g. in which collection to save the card)  mb.create_card(custom_json=my_custom_json)```- #### `create_collection`Create an empty collection. Provide the name of the collection, and the name or id of the parent collection (i.e. where you want the created collection to reside). If you want to create the collection in the root, you need to provide `parent_collection_name='Root'`.```pythonmb.create_collection(collection_name='test_collection', parent_collection_id=123)```- #### `create_segment`Provide the name to be used for creating the segment, the name or id of the table you want to create the segment on, the column of that table to filter on and the filter values.```pythonmb.create_segment(segment_name='test_segment', table_name='user_table', column_name='user_id', column_values=[123, 456, 789])```- #### `copy_card`At the minimum you need to provide the name/id of the card to copy and the name/id of the collection to copy the card to.```pythonmb.copy_card(source_card_name='test_card', destination_collection_id=123)```- #### `copy_pulse`Similar to `copy_card` but for pulses.```pythonmb.copy_pulse(source_pulse_name='test_pulse', destination_collection_id=123)```- #### `copy_dashboard`You can determine whether you want to *deepcopy* the dashboard or not (default False).  If you don't deepcopy, the duplicated dashboard will use the same cards as the original dashboard.  When you deepcopy a dashboard, the cards of the original dashboard are duplicated and these cards are used in the duplicate dashboard.  If the `destination_dashboard_name` parameter is not provided, the destination dashboard name will be the same as the source dashboard name (plus any `postfix` if provided).  The duplicated cards (in case of deepcopying) are saved in a collection called `[destination_dashboard_name]'s cards` and placed in the same collection as the duplicated dashboard.```pythonmb.copy_dashboard(source_dashboard_id=123, destination_collection_id=456, deepcopy=True)```- #### `copy_collection`Copies the given collection and its contents to the given `destination_parent_collection` (name/id). You can determine whether to deepcopy the dashboards.```pythonmb.copy_collection(source_collection_id=123, destination_parent_collection_id=456, deepcopy_dashboards=True, verbose=True)```You can also specify a postfix to be added to the names of the child items that get copied.- #### `clone_card`Similar to `copy_card` but a different table is used as the source for filters of the card.  This comes in handy when you want to create similar cards with the same filters that differ only on the source of the filters (e.g. cards for 50 US states).```pythonmb.clone_card(card_id=123, source_table_id=456, target_table_id=789, new_card_name='test clone', new_card_collection_id=1)```- #### `update_column`Update the column in Data Model by providing the relevant parameter (list of all parameters can be found [here](https://www.metabase.com/docs/latest/api-documentation.html#put-apifieldid)).  For example to change the column type to 'Category', we can use:```pythonmb.update_column(column_name='myCol', table_name='myTable', params={'semantic_type':'type/Category'}  # (For Metabase versions before v.39, use: params={'special_type':'type/Category'}))```- #### `search`Searches for Metabase objects and returns basic info.  Provide the search term and optionally `item_type` to limit the results.```Pythonmb.search(q='test', item_type='card')```- #### `get_card_data`Returns the rows.  Provide the card name/id and the data format of the output (csv or json). You can also provide filter values.```pythonresults = mb.get_card_data(card_id=123, data_format='csv')```- #### `make_json`It's very helpful to use the Inspect tool of the browser (network tab) to see what Metabase is doing. You can then use the generated json code to build your automation. To turn the generated json in the browser into a Python dictionary, you can copy the code, paste it into triple quotes (`'''  '''`) and apply the function `make_json`:```pythonraw_json = ''' {&quot;name&quot;:&quot;test&quot;,&quot;dataset_query&quot;:{&quot;database&quot;:165,&quot;query&quot;:{&quot;fields&quot;:[[&quot;field-id&quot;,35839],[&quot;field-id&quot;,35813],[&quot;field-id&quot;,35829],[&quot;field-id&quot;,35858],[&quot;field-id&quot;,35835],[&quot;field-id&quot;,35803],[&quot;field-id&quot;,35843],[&quot;field-id&quot;,35810],[&quot;field-id&quot;,35826],[&quot;field-id&quot;,35815],[&quot;field-id&quot;,35831],[&quot;field-id&quot;,35827],[&quot;field-id&quot;,35852],[&quot;field-id&quot;,35832],[&quot;field-id&quot;,35863],[&quot;field-id&quot;,35851],[&quot;field-id&quot;,35850],[&quot;field-id&quot;,35864],[&quot;field-id&quot;,35854],[&quot;field-id&quot;,35846],[&quot;field-id&quot;,35811],[&quot;field-id&quot;,35933],[&quot;field-id&quot;,35862],[&quot;field-id&quot;,35833],[&quot;field-id&quot;,35816]],&quot;source-table&quot;:2154},&quot;type&quot;:&quot;query&quot;},&quot;display&quot;:&quot;table&quot;,&quot;description&quot;:null,&quot;visualization_settings&quot;:{&quot;table.column_formatting&quot;:[{&quot;columns&quot;:[&quot;Diff&quot;],&quot;type&quot;:&quot;range&quot;,&quot;colors&quot;:[&quot;#ED6E6E&quot;,&quot;white&quot;,&quot;#84BB4C&quot;],&quot;min_type&quot;:&quot;custom&quot;,&quot;max_type&quot;:&quot;custom&quot;,&quot;min_value&quot;:-30,&quot;max_value&quot;:30,&quot;operator&quot;:&quot;=&quot;,&quot;value&quot;:&quot;&quot;,&quot;color&quot;:&quot;#509EE3&quot;,&quot;highlight_row&quot;:false}],&quot;table.pivot_column&quot;:&quot;Sale_Date&quot;,&quot;table.cell_column&quot;:&quot;SKUID&quot;},&quot;archived&quot;:false,&quot;enable_embedding&quot;:false,&quot;embedding_params&quot;:null,&quot;collection_id&quot;:183,&quot;collection_position&quot;:null,&quot;result_metadata&quot;:[{&quot;name&quot;:&quot;Sale_Date&quot;,&quot;display_name&quot;:&quot;Sale_Date&quot;,&quot;base_type&quot;:&quot;type/DateTime&quot;,&quot;fingerprint&quot;:{&quot;global&quot;:{&quot;distinct-count&quot;:1,&quot;nil%&quot;:0},&quot;type&quot;:{&quot;type/DateTime&quot;:{&quot;earliest&quot;:&quot;2019-12-28T00:00:00&quot;,&quot;latest&quot;:&quot;2019-12-28T00:00:00&quot;}}},&quot;special_type&quot;:null},{&quot;name&quot;:&quot;Account_ID&quot;,&quot;display_name&quot;:&quot;Account_ID&quot;,&quot;base_type&quot;:&quot;type/Text&quot;,&quot;fingerprint&quot;:{&quot;global&quot;:{&quot;distinct-count&quot;:411,&quot;nil%&quot;:0},&quot;type&quot;:{&quot;type/Text&quot;:{&quot;percent-json&quot;:0,&quot;percent-url&quot;:0,&quot;percent-email&quot;:0,&quot;average-length&quot;:9}}},&quot;special_type&quot;:null},{&quot;name&quot;:&quot;Account_Name&quot;,&quot;display_name&quot;:&quot;Account_Name&quot;,&quot;base_type&quot;:&quot;type/Text&quot;,&quot;fingerprint&quot;:{&quot;global&quot;:{&quot;distinct-count&quot;:410,&quot;nil%&quot;:0.0015},&quot;type&quot;:{&quot;type/Text&quot;:{&quot;percent-json&quot;:0,&quot;percent-url&quot;:0,&quot;percent-email&quot;:0,&quot;average-length&quot;:21.2916}}},&quot;special_type&quot;:null},{&quot;name&quot;:&quot;Account_Type&quot;,&quot;display_name&quot;:&quot;Account_Type&quot;,&quot;base_type&quot;:&quot;type/Text&quot;,&quot;special_type&quot;:&quot;type/Category&quot;,&quot;fingerprint&quot;:{&quot;global&quot;:{&quot;distinct-count&quot;:5,&quot;nil%&quot;:0.0015},&quot;type&quot;:{&quot;type/Text&quot;:{&quot;percent-json&quot;:0,&quot;percent-url&quot;:0,&quot;percent-email&quot;:0,&quot;average-length&quot;:3.7594}}}}],&quot;metadata_checksum&quot;:&quot;7XP8bmR1h5f662CFE87tjQ==&quot;} '''myJson = mb.make_json(raw_json)  # setting 'prettyprint=True' will print the output in a structured format.mb.create_card('test_card2', table_name='mySourceTable', custom_json={'visualization_settings':myJson['visualization_settings']})```- #### `move_to_archive`Moves the item (Card, Dashboard, Collection, Pulse, Segment) to the Archive section.```pythonmb.move_to_archive('card', item_id=123)```- #### `delete_item`Deletes the item (Card, Dashboard, Pulse). Currently Collections and Segments cannot be deleted using the Metabase API.```pythonmb.delete_item('card', item_id=123)```## NotesThere are also two other Python wrappers for Metabase API [here](https://github.com/mertsalik/metabasepy) and [here](https://github.com/STUnitas/metabase-py).</longdescription>
</pkgmetadata>