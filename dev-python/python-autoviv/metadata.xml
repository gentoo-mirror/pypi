<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-autoviv [![PyPi](https://img.shields.io/badge/python-2.7%20%7C%203.4%20%7C%203.5%20%7C%203.6%20%7C%203.7%20%7C%203.8-%2344CC11)](https://pypi.org/project/python-autoviv/) [![PyPiStats](https://img.shields.io/pypi/dm/python-autoviv.svg)](https://pypistats.org/packages/python-autoviv)The Autovivification library for Python## InstallationAdd this line to your application's requirements.txt:```pythonpython-autoviv```And then execute:    $ pip install -r requirements.txtOr install it yourself as:    $ pip install python-autoviv## UsageImport autoviv and call parse on any list, dict, or primitive. You can also call loads on serialized JSON```python&gt;&gt;&gt; import autoviv&gt;&gt;&gt; import requests&gt;&gt;&gt; r = requests.get('http://jsonplaceholder.typicode.com/users')&gt;&gt;&gt; users = autoviv.parse(r.json())&gt;&gt;&gt; # or... users = autoviv.loads(r.text)&gt;&gt;&gt; for user in users:...     print(user.name)...Leanne GrahamErvin HowellClementine BauchPatricia LebsackChelsey DietrichMrs. Dennis SchulistKurtis WeissnatNicholas Runolfsdottir VGlenna ReichertClementina DuBuque&gt;&gt;&gt; user = users[0]&gt;&gt;&gt; print(autoviv.pprint(user, indent=4)){    &quot;username&quot;: &quot;Bret&quot;,    &quot;website&quot;: &quot;hildegard.org&quot;,    &quot;name&quot;: &quot;Leanne Graham&quot;,    &quot;company&quot;: {        &quot;bs&quot;: &quot;harness real-time e-markets&quot;,        &quot;name&quot;: &quot;Romaguera-Crona&quot;,        &quot;catchPhrase&quot;: &quot;Multi-layered client-server neural-net&quot;    },    &quot;id&quot;: 1,    &quot;phone&quot;: &quot;1-770-736-8031 x56442&quot;,    &quot;address&quot;: {        &quot;suite&quot;: &quot;Apt. 556&quot;,        &quot;street&quot;: &quot;Kulas Light&quot;,        &quot;geo&quot;: {            &quot;lat&quot;: &quot;-37.3159&quot;,            &quot;lng&quot;: &quot;81.1496&quot;        },        &quot;zipcode&quot;: &quot;92998-3874&quot;,        &quot;city&quot;: &quot;Gwenborough&quot;    },    &quot;email&quot;: &quot;Sincere@april.biz&quot;}&gt;&gt;&gt; user.name = 'auto-vivification'&gt;&gt;&gt; r = requests.put('http://jsonplaceholder.typicode.com/users/{0}'.format(user.id), json=user)&gt;&gt;&gt; response = autoviv.parse(r.json())&gt;&gt;&gt; print(response.name)auto-vivification&gt;&gt;&gt; new = autoviv.parse({})&gt;&gt;&gt; new.id = 5&gt;&gt;&gt; if not new.username:...     new.username = 'New User'...&gt;&gt;&gt; new.address.geo.lat = &quot;-42.3433&quot;&gt;&gt;&gt; new.address.geo.lng = &quot;74.3433&quot;&gt;&gt;&gt; new.email = 'someone@somewhere.biz'&gt;&gt;&gt; print(autoviv.pprint(new)){    &quot;username&quot;: &quot;New User&quot;,    &quot;email&quot;: &quot;someone@somewhere.biz&quot;,    &quot;id&quot;: 5,    &quot;address&quot;: {        &quot;geo&quot;: {            &quot;lat&quot;: &quot;-42.3433&quot;,            &quot;lng&quot;: &quot;74.3433&quot;        }    }}```### NonePropIt should be noted that missing referenced properties, including nested, are gracefully falsey.```python&gt;&gt;&gt; import autoviv&gt;&gt;&gt; data = autoviv.parse({})&gt;&gt;&gt; data.property.is_none&gt;&gt;&gt; bool(data.property.is_none)False&gt;&gt;&gt; isinstance(data.property.is_none, autoviv.NoneProp)True&gt;&gt;&gt; 'some data' in data.property.is_noneFalse&gt;&gt;&gt; [x for x in data.property.is_none][]&gt;&gt;&gt; data.property.is_none = None&gt;&gt;&gt; isinstance(data.property.is_none, autoviv.NoneProp)False&gt;&gt;&gt; print(autoviv.pprint(data)){    &quot;property&quot;: {        &quot;is_none&quot;: null    }}```## TestingInstall test dependencies with pipenv.    $ pip install pipenv    $ pipenv install -d    $ ./test.sh## ContributingBug reports and pull requests are welcome on GitLab at https://gitlab.com/tysonholub/python-autoviv.git. This project isintended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the[Contributor Covenant](http://contributor-covenant.org) code of conduct.## LicenseThis package is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).</longdescription>
</pkgmetadata>