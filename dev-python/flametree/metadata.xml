<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Flametree=========Flametree is a Python library which provides a simple syntax for handling files and folders(no ``os.path.join``, ``os.listdir`` etc.), and works the same way for different file systems.Write a Flametree program to read/write files in disk folders, and your code will also beable to read/write in zip archives and virtual (in-memory) archives - which is particularlyuseful on web servers.As an illustration, here is how to use Flametree to read a file ``texts/poems/the_raven.txt``, replace alloccurences of the word &quot;raven&quot; by &quot;seagull&quot; in the text, and write the result to a newfile ``the_seagull.txt`` in the same folder:.. code:: python     from flametree import file_tree     with file_tree(&quot;texts&quot;) as root:         poem_text = root.poems.the_raven_txt.read()         new_text = poem_text.replace(&quot;raven&quot;, &quot;seagull&quot;)         root.poems._file(&quot;the_seagull.txt&quot;).write(new_text)Even in this very simple use case, the syntax is clearer than the ``os`` way,which would write as follows:.. code:: python    import os    with open(os.path.join(&quot;poems&quot;, &quot;the_raven.txt&quot;), &quot;r&quot;) as f:        poem_text = f.read()    new_text = poem_text.replace(&quot;raven&quot;, &quot;seagull&quot;)    with open(os.path.join(&quot;poems&quot;, &quot;the_seagull.txt&quot;), &quot;w&quot;) as f:        content = f.write(new_text)Moreover, the same Flametree code also works for files inside a zip archive:.. code:: python     with file_tree(&quot;my_archive.zip&quot;) as root:         poem_text = root.poems.the_raven_txt.read()         new_text = poem_text.replace(&quot;raven&quot;, &quot;seagull&quot;)         root.poems._file(&quot;the_seagull.txt&quot;).write(new_text)Now in hard mode: suppose that your server receives binary zip data of anarchive containing ``poems/the_raven.txt``, and must return back a new zipcontaining a file ``poems/the_seagull.txt``. Here again, the syntax of the coreoperations is the same:.. code:: python     destination_zip = file_tree(&quot;@memory&quot;) # Create a new virtual zip     with file_tree(the_raven_zip_data) as root:         poem_text = root.poems.the_raven_txt.read()         new_text = poem_text.replace(&quot;raven&quot;, &quot;seagull&quot;)         destination_zip._dir(&quot;poems&quot;)._file(&quot;the_seagull.txt&quot;).write(new_text)     destination_zip_data = destination_zip._close()     # Now send the data to the clientSee section *Usage* below for more examples and features.Infos-----**PIP installation:**.. code:: bash  pip install flametree**Github Page**`&lt;https://github.com/Edinburgh-Genome-Foundry/Flametree&gt;`_**License:** MIT, Copyright Edinburgh Genome Foundry</longdescription>
</pkgmetadata>