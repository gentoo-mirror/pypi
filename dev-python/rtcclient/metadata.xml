<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>rtcclient=========.. image:: https://readthedocs.org/projects/rtcclient/badge/?version=latest    :target: https://readthedocs.org/projects/rtcclient.. image:: https://img.shields.io/pypi/v/rtcclient.svg    :target: https://pypi.python.org/pypi/rtcclient.. image:: https://api.travis-ci.org/dixudx/rtcclient.svg?branch=master    :target: https://pypi.python.org/pypi/rtcclient.. image:: https://img.shields.io/badge/slack-rtcclient-blue.svg    :target: https://rtcclient.slack.com.. image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg    :target: https://saythanks.io/to/dixudxA Python-based Client/API for Rational Team Concert (RTC)About this library------------------IBM® Rational Team Concert™, is built on the Jazz platform, allowingapplication development teams to use one tool to plan across teams, code,run standups, plan sprints, and track work. For more info, please referto here_... _here: http://www.ibm.com/developerworks/downloads/r/rtc/**IMPORTANT NOTE: This is NOT an official-released Python-based RTC Client.**This library can help you:* Interacts with an RTC server to retrieve objects which contain the detailed information/configuration, including **Project Areas**, **Team Areas**, **Workitems** and etc;* Creates all kinds of **Workitems** through self-customized templates or copies from some existing **Workitems**;* Performs some actions on the retrieved **Workitems**, including get/add **Comments**, get/add/remove **Subscribers**/**Children**/**Parent**, get/upload **Attachments** and etc;* Query **Workitems** using specified filtered rules or directly from your saved queries;* Logs all the activities and messages during your operation;Python &amp; Rational Team Concert Versions---------------------------------------This project has been tested against multiple Python versions, such as &quot;3.7&quot;, &quot;3.8&quot;, &quot;3.9&quot;, &quot;3.10&quot; and &quot;3.11&quot;.Please install **rtcclient** with version &gt;= 0.9.0, which works well with ``Rational Team Concert`` 6.0.6.1, **5.0.1**, **5.0.2** and ``ELM`` 7.0.Important Links---------------Support and bug-reports:https://github.com/dixudx/rtcclient/issues?q=is%3Aopen+sort%3Acomments-descProject source code: https://github.com/dixudx/rtcclientProject documentation: https://readthedocs.org/projects/rtcclient/Installation------------To install rtcclient, simply:.. code-block:: bash    $ pip install rtcclientExample-------RTCClient is intended to map the objects in RTC (e.g. Project Areas,Team Areas, Workitems) into easily managed Python objects:.. code-block:: python    &gt;&gt;&gt; from rtcclient.utils import setup_basic_logging    &gt;&gt;&gt; from rtcclient import RTCClient    # you can remove this if you don't need logging    # default debug logging for console output    &gt;&gt;&gt; setup_basic_logging()    # url ends with jazz    &gt;&gt;&gt; url = &quot;https://your_domain:9443/jazz&quot;    &gt;&gt;&gt; username = &quot;your_username&quot;    &gt;&gt;&gt; password = &quot;your_password&quot;    # If your rtc server is behind a proxy, remember to set &quot;proxies&quot; explicitly.    # If your url ends with ccm, set ends_with_jazz to False.    # Please refer to issue #68 for detailed explanation    # If your rtc server is too old (such as Rational Team Concert 5.0.1, 5.0.2), please set old_rtc_authentication to True    &gt;&gt;&gt; myclient = RTCClient(url, username, password, ends_with_jazz=True, old_rtc_authentication=False)    # it will be faster if returned properties is specified    # see in below query example    &gt;&gt;&gt; wk = myclient.getWorkitem(123456) # get a workitem whose id is 123456    # get all workitems    # If both projectarea_id and projectarea_name are None, all the workitems    # in all ProjectAreas will be returned    &gt;&gt;&gt; workitems_list = myclient.getWorkitems(projectarea_id=None,                                               projectarea_name=None)    &gt;&gt;&gt; myquery = myclient.query # query class    &gt;&gt;&gt; projectarea_name = &quot;your_projectarea_name&quot;    # customize your query string    # below query string means: query all the workitems with title &quot;use case 1&quot;    &gt;&gt;&gt; myquerystr = 'dc:title=&quot;use case 1&quot;'    # specify the returned properties: title, id, state, owner    # This is optional. All properties will be returned if not specified    &gt;&gt;&gt; returned_prop = &quot;dc:title,dc:identifier,rtc_cm:state,rtc_cm:ownedBy&quot;    &gt;&gt;&gt; queried_wis = myquery.queryWorkitems(query_str=myquerystr,                                             projectarea_name=projectarea_name,                                             returned_properties=returned_prop)Testing-------Using a virtualenv is recommended. Setuptools will automatically fetchmissing test dependencies.If you have installed the tox_ on your system already, you can runthe tests using pytest_ with the following command:.. _tox: https://pypi.python.org/pypi/tox.. _pytest: http://pytest.org/latest/.. code-block:: bash    virtualenv    source .venv/bin/active    (venv) tox -e test    (venv) tox -e flake    (venv) tox -e pycodestyleTesting with Poetry-------------------When using poetry_ , all dependencies and test environment are managed by this tool even when using tox_.If you have already globally installed poetry_ on your system, you can runthe tests using pytest_ with the following command:.. _poetry: https://python-poetry.org/.. code-block:: bash    poetry install --with devel    poetry run tox -e test    poetry run tox -e flake    poetry run tox -e pycodestyle</longdescription>
</pkgmetadata>