<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyln-client: A python client library for lightningdThis package implements the Unix socket based JSON-RPC protocol that`lightningd` exposes to the rest of the world. It can be used to callarbitrary functions on the RPC interface, and serves as a basis for pluginswritten in python.## Installation`pyln-client` is available on `pip`:```pip install pyln-client```Alternatively you can also install the development version to get access tocurrently unreleased features by checking out the Core Lightning source code andinstalling into your python3 environment:```bashgit clone https://github.com/ElementsProject/lightning.gitcd lightning/contrib/pyln-clientpoetry install```This will add links to the library into your environment so changing thechecked out source code will also result in the environment picking up thesechanges. Notice however that unreleased versions may change API withoutwarning, so test thoroughly with the released version.## Examples### Using the JSON-RPC client```py&quot;&quot;&quot;Generate invoice on one daemon and pay it on the other&quot;&quot;&quot;from pyln.client import LightningRpcimport random# Create two instances of the LightningRpc object using two different Core Lightning daemons on your computerl1 = LightningRpc(&quot;/tmp/lightning1/lightning-rpc&quot;)l5 = LightningRpc(&quot;/tmp/lightning5/lightning-rpc&quot;)info5 = l5.getinfo()print(info5)# Create invoice for test paymentinvoice = l5.invoice(100, &quot;lbl{}&quot;.format(random.random()), &quot;testpayment&quot;)print(invoice)# Get route to l1route = l1.getroute(info5['id'], 100, 1)print(route)# Pay invoiceprint(l1.sendpay(route['route'], invoice['payment_hash']))```### Writing a pluginPlugins are programs that `lightningd` can be configured to execute alongsidethe main daemon. They allow advanced interactions with and customizations tothe daemon.```python#!/usr/bin/env python3from pyln.client import Pluginplugin = Plugin()@plugin.method(&quot;hello&quot;)def hello(plugin, name=&quot;world&quot;):    &quot;&quot;&quot;This is the documentation string for the hello-function.    It gets reported as the description when registering the function    as a method with `lightningd`.    If this returns (a dict), that's the JSON &quot;result&quot; returned.  If    it raises an exception, that causes a JSON &quot;error&quot; return (raising    pyln.client.RpcException allows finer control over the return).    &quot;&quot;&quot;    greeting = plugin.get_option('greeting')    s = '{} {}'.format(greeting, name)    plugin.log(s)    return s@plugin.init()def init(options, configuration, plugin):    plugin.log(&quot;Plugin helloworld.py initialized&quot;)    # This can also return {'disabled': &lt;reason&gt;} to self-disable,# but normally it returns None.@plugin.subscribe(&quot;connect&quot;)def on_connect(plugin, id, address):    plugin.log(&quot;Received connect event for peer {}&quot;.format(id))plugin.add_option('greeting', 'Hello', 'The greeting I should use.')plugin.run()```</longdescription>
</pkgmetadata>