<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- PROJECT LOGO --&gt;&lt;br /&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/MiniZinc/minizinc-python&quot;&gt;    &lt;img src=&quot;https://www.minizinc.org/MiniZn_logo.png&quot; alt=&quot;Logo&quot; width=&quot;80&quot; height=&quot;80&quot;&gt;  &lt;/a&gt;  &lt;h3 align=&quot;center&quot;&gt;MiniZinc Python&lt;/h3&gt;  &lt;p align=&quot;center&quot;&gt;    The python package that allows you to access all of MiniZinc's functionalities directly from Python.    &lt;br /&gt;    &lt;a href=&quot;https://minizinc-python.readthedocs.io/en/latest/&quot;&gt;&lt;strong&gt;Explore the docs ¬ª&lt;/strong&gt;&lt;/a&gt;    &lt;br /&gt;    &lt;br /&gt;    &lt;a href=&quot;https://github.com/MiniZinc/minizinc-python/issues&quot;&gt;Report Bug&lt;/a&gt;    ¬∑    &lt;a href=&quot;https://github.com/MiniZinc/minizinc-python/issues&quot;&gt;Request Feature&lt;/a&gt;  &lt;/p&gt;&lt;/p&gt;&lt;!-- TABLE OF CONTENTS --&gt;## Table of Contents* [About the Project](#about-the-project)* [Getting Started](#getting-started)  * [Installation](#installation)  * [Usage](#usage)* [Testing](#testing)* [Roadmap](#roadmap)* [Contributing](#contributing)* [License](#license)* [Contact](#contact)&lt;!-- * [Acknowledgements](#acknowledgements) --&gt;&lt;!-- ABOUT THE PROJECT --&gt;## About The Project_MiniZinc Python_ provides an interface from Python to the MiniZinc driver. Themost important goal of this project are to allow easy access to MiniZinc usingnative Python structures. This will allow you to more easily make scripts to runMiniZinc, but will also allow the integration of MiniZinc models within bigger(Python) projects. This module also aims to expose an interface for meta-search.For problems that are hard to solve, meta-search can provide solutions to reachmore or better solutions quickly.&lt;!-- GETTING STARTED --&gt;## Getting StartedTo get a MiniZinc Python up and running follow these simple steps.### Installation_MiniZinc Python_ can be installed by running `pip install minizinc`. Itrequires [MiniZinc](https://www.minizinc.org/) 2.5.0+ and[Python](https://www.python.org/) 3.6.0+ to be installed on the system. MiniZincpython expects the `minizinc` executable to be available on the executable path,the `$PATH` environmental variable, or in a default installation location._For more information, please refer to the[Documentation](https://minizinc-python.readthedocs.io/en/latest/)_### UsageOnce all prerequisites and MiniZinc Python are installed, a `minizinc` modulewill be available in Python. The following Python code shows how to run atypical MiniZinc model.```pythonimport minizinc# Create a MiniZinc modelmodel = minizinc.Model()model.add_string(&quot;&quot;&quot;var -100..100: x;int: a; int: b; int: c;constraint a*(x*x) + b*x = c;solve satisfy;&quot;&quot;&quot;)# Transform Model into a instancegecode = minizinc.Solver.lookup(&quot;gecode&quot;)inst = minizinc.Instance(gecode, model)inst[&quot;a&quot;] = 1inst[&quot;b&quot;] = 4inst[&quot;c&quot;] = 0# Solve the instanceresult = inst.solve(all_solutions=True)for i in range(len(result)):    print(&quot;x = {}&quot;.format(result[i, &quot;x&quot;]))```_For more examples, please refer to the[Documentation](https://minizinc-python.readthedocs.io/en/latest/)_&lt;!-- TESTING INSTRUCTIONS --&gt;## TestingMiniZinc Python uses [Tox](https://pypi.org/project/tox/) environments to testits coding style and functionality. The code style tests are executed using[Black](https://pypi.org/project/black/),[Flake8](https://pypi.org/project/flake8/), and[isort](https://pypi.org/project/isort/). The functionality tests areconstructed using the [PyTest]() unit testing framework.  * To run all tests, simply execute `tox` in the repository directory.  * Individual environments can be triggered using the `-e` flag.    * To test the coding style of the repository run `tox -e check`    * The `py3x` environments are used to test a specific Python version; for      example, to test using Python version 3.7 run `tox -e py37`Tox can also be used to generate the documentation, `tox -e docs`, and totypeset the Python code, `tox -e format`.&lt;!-- ROADMAP --&gt;## RoadmapSee the [open issues](https://github.com/MiniZinc/minizinc-python/issues) for alist of proposed features (and known issues).&lt;!-- CONTRIBUTING --&gt;## ContributingContributions are what make the open source community such an amazing place tobe learn, inspire, and create. Any contributions you make are **greatlyappreciated**.1. Fork the Project2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)4. Push to the Branch (`git push origin feature/AmazingFeature`)5. Open a Pull Request&lt;!-- LICENSE --&gt;## LicenseDistributed under the Mozilla Public License Version 2.0. See `LICENSE` for more information.&lt;!-- CONTACT --&gt;## Contactüë§ **Jip J. Dekker**  * Twitter: [@DekkerOne](https://twitter.com/DekkerOne)  * Github: [Dekker1](https://github.com/Dekker1)üèõ **MiniZinc**  * Website: [https://www.minizinc.org/](https://www.minizinc.org/)&lt;!-- ACKNOWLEDGEMENTS --&gt;&lt;!-- ## Acknowledgements --&gt;&lt;!-- * []() --&gt;&lt;!-- * []() --&gt;&lt;!-- * []() --&gt;</longdescription>
</pkgmetadata>