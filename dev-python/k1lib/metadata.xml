<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># k1libThis library enables piping in Python, and has a lot of prebuilt piping toolsto support this workflow.## Installation```bash  pip install k1lib[all]```This will install lots of heavy dependencies like PyTorch. If you want to installthe leanest version of the library, do this instead:```bash  pip install k1lib```To use it in a notebook, do this:```python  from k1lib.imports import *```Check out the source code for &quot;k1lib.imports&quot; if you're curious what it'simporting. If you hate \* imports for whatever reason, you can import clitools individually, like this::```python  from k1lib.cli import ls, cat, grep, apply, batched, display```## Examples```python# returns [0, 1, 4, 9, 16], kinda like maprange(5) | apply(lambda x: x**2) | deref()# plotting the function y = x^2x = np.linspace(-2, 2); y = x**2plt.plot(x, y)         # normal way[x, y] | ~aS(plt.plot) # pipe way# plotting the functions y = x**2, y = x**3, y = x**4x = np.linspace(-2, 2)[2, 3, 4] | apply(lambda exp: [x, x**exp]) | ~apply(plt.plot) | deref()# loading csv file and displaying first 10 rows in a nice tablecat(&quot;abc.csv&quot;) | apply(lambda x: x.split(&quot;,&quot;)) | display()# searching for &quot;gene_name: ...&quot; lines in a file and display a nice overview of just the gene names alonecat(&quot;abc.txt&quot;) | grep(&quot;gene_name: &quot;) | apply(lambda x: x.split(&quot;: &quot;)[1]) | batched(4) | display()# manipulate numpy arrays and pytorch tensorsa = np.random.randn(3, 4, 5)a | transpose()     | shape() # returns (4, 3, 5)a | transpose(0, 2) | shape() # returns (5, 4, 3)# loading images from categories and splitting them into train and valid sets. Image url: dataset/categoryA/image1.jpgtrain, valid = ls(&quot;dataset&quot;) | apply(ls() | splitW()) | transpose() | deref()# shape of output is (train/valid, category, image url). It was (category, train/valid, image url) before going through transpose()# executing task in multiple processesrange(10_000_000) | batched(1_000_000) | applyMp(toSum()) | toSum()# this splits numbers from 0 to 10M into 10 batches, and then sum each batch in parallel, and then sum the results of each batch# executing task in multiple processes on multiple computersrange(10_000_000) | batched(1_000_000) | applyCl(toSum()) | toSum()```You can combine these &quot;cli tools&quot; together in really complex ways to do really complexmanipulation really fast and with little code. Hell, you can even create a full blownPyTorch dataloader from scratch where you're in control of every detail, operating in 7dimensions, in multiple processes on multiple nodes, in just 6 lines of code. Check overthe basics of it here: [k1lib.cli](https://k1lib.com/latest/cli/index.html).After doing that, you can check out the tutorials to get a large overview of how everythingintegrates together nicely.## Some details- Repo: https://github.com/157239n/k1lib/- Docs: https://k1lib.com## Contacts?If you found bugs, open a new issue on the repo itself. If you want to have a chat, then email me at 157239q@gmail.comIf you want to get an overview of how the repo is structured, read [contributing.md](contributing.md)</longdescription>
</pkgmetadata>