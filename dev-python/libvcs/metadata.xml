<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `libvcs` &amp;middot; [![Python Package](https://img.shields.io/pypi/v/libvcs.svg)](https://pypi.org/project/libvcs/) [![License](https://img.shields.io/github/license/vcs-python/libvcs.svg)](https://github.com/vcs-python/libvcs/blob/master/LICENSE) [![Code Coverage](https://codecov.io/gh/vcs-python/libvcs/branch/master/graph/badge.svg)](https://codecov.io/gh/vcs-python/libvcs)libvcs is a lite, [typed](https://docs.python.org/3/library/typing.html), pythonic tool box fordetection and parsing of URLs, commanding, and syncing with `git`, `hg`, and `svn`. Powers[vcspull](https://www.github.com/vcs-python/vcspull/).## Overview_Supports Python 3.9 and above_Features for Git, Subversion, and Mercurial:- **Detect and parse** VCS URLs- **Command** VCS via python API- **Sync** repos locally- **Test fixtures** for temporary local repos and working copiesTo **get started**, see the [quickstart](https://libvcs.git-pull.com/quickstart.html) for more.```console$ pip install --user libvcs```## URL ParserYou can validate and parse Git, Mercurial, and Subversion URLs through[`libvcs.url`](https://libvcs.git-pull.com/url/index.html):Validate:```python&gt;&gt;&gt; from libvcs.url.git import GitURL&gt;&gt;&gt; GitURL.is_valid(url='https://github.com/vcs-python/libvcs.git')True```Parse and adjust a Git URL:```python&gt;&gt;&gt; from libvcs.url.git import GitURL&gt;&gt;&gt; git_location = GitURL(url='git@github.com:vcs-python/libvcs.git')&gt;&gt;&gt; git_locationGitURL(url=git@github.com:vcs-python/libvcs.git,        user=git,        hostname=github.com,        path=vcs-python/libvcs,        suffix=.git,        rule=core-git-scp)```Switch repo libvcs -&gt; vcspull:```python&gt;&gt;&gt; from libvcs.url.git import GitURL&gt;&gt;&gt; git_location = GitURL(url='git@github.com:vcs-python/libvcs.git')&gt;&gt;&gt; git_location.path = 'vcs-python/vcspull'&gt;&gt;&gt; git_location.to_url()'git@github.com:vcs-python/vcspull.git'# Switch them to gitlab:&gt;&gt;&gt; git_location.hostname = 'gitlab.com'# Export to a `git clone` compatible URL.&gt;&gt;&gt; git_location.to_url()'git@gitlab.com:vcs-python/vcspull.git'```See more in the [parser document](https://libvcs.git-pull.com/parse/index.html).## CommandsSimple [`subprocess`](https://docs.python.org/3/library/subprocess.html) wrappers around `git(1)`,`hg(1)`, `svn(1)`. Here is [`Git`](https://libvcs.git-pull.com/cmd/git.html#libvcs.cmd.git.Git) w/[`Git.clone`](http://libvcs.git-pull.com/cmd/git.html#libvcs.cmd.git.Git.clone):```pythonimport pathlibfrom libvcs.cmd.git import Gitgit = Git(dir=pathlib.Path.cwd() / 'my_git_repo')git.clone(url='https://github.com/vcs-python/libvcs.git')```## SyncCreate a [`GitSync`](https://libvcs.git-pull.com/projects/git.html#libvcs.sync.git.GitProject)object of the project to inspect / checkout / update:```pythonimport pathlibfrom libvcs.sync.git import GitSyncrepo = GitSync(   url=&quot;https://github.com/vcs-python/libvcs&quot;,   dir=pathlib.Path().cwd() / &quot;my_repo&quot;,   remotes={       'gitlab': 'https://gitlab.com/vcs-python/libvcs'   })# Update / clone repo:&gt;&gt;&gt; repo.update_repo()# Get revision:&gt;&gt;&gt; repo.get_revision()u'5c227e6ab4aab44bf097da2e088b0ff947370ab8'```## Pytest pluginlibvcs also provides a test rig for local repositories. It automatically can provide clean localrepositories and working copies for git, svn, and mercurial. They are automatically cleaned up aftereach test.It works by bootstrapping a temporary `$HOME` environment in a[`TmpPathFactory`](https://docs.pytest.org/en/7.1.x/reference/reference.html#tmp-path-factory-factory-api)for automatic cleanup.```pythonimport pathlibfrom libvcs.pytest_plugin import CreateProjectCallbackFixtureProtocolfrom libvcs.sync.git import GitSyncdef test_repo_git_remote_checkout(    create_git_remote_repo: CreateProjectCallbackFixtureProtocol,    tmp_path: pathlib.Path,    projects_path: pathlib.Path,) -&gt; None:    git_server = create_git_remote_repo()    git_repo_checkout_dir = projects_path / &quot;my_git_checkout&quot;    git_repo = GitSync(dir=str(git_repo_checkout_dir), url=f&quot;file://{git_server!s}&quot;)    git_repo.obtain()    git_repo.update_repo()    assert git_repo.get_revision() == &quot;initial&quot;    assert git_repo_checkout_dir.exists()    assert pathlib.Path(git_repo_checkout_dir / &quot;.git&quot;).exists()```Learn more on the docs at https://libvcs.git-pull.com/pytest-plugin.html## DonationsYour donations fund development of new features, testing and support. Your money will go directly tomaintenance and development of the project. If you are an individual, feel free to give whateverfeels right for the value you get out of the project.See donation options at &lt;https://www.git-pull.com/support.html&gt;.## More information- Python support: 3.9+, pypy- VCS supported: git(1), svn(1), hg(1)- Source: &lt;https://github.com/vcs-python/libvcs&gt;- Docs: &lt;https://libvcs.git-pull.com&gt;- Changelog: &lt;https://libvcs.git-pull.com/history.html&gt;- APIs for git, hg, and svn:  - [`libvcs.url`](https://libvcs.git-pull.com/url/): URL Parser  - [`libvcs.cmd`](https://libvcs.git-pull.com/cmd/): Commands  - [`libvcs.sync`](https://libvcs.git-pull.com/sync/): Clone and update- Issues: &lt;https://github.com/vcs-python/libvcs/issues&gt;- Test Coverage: &lt;https://codecov.io/gh/vcs-python/libvcs&gt;- pypi: &lt;https://pypi.python.org/pypi/libvcs&gt;- Open Hub: &lt;https://www.openhub.net/p/libvcs&gt;- License: [MIT](https://opensource.org/licenses/MIT).[![Docs](https://github.com/vcs-python/libvcs/workflows/docs/badge.svg)](https://libvcs.git-pull.com/)[![Build Status](https://github.com/vcs-python/libvcs/workflows/tests/badge.svg)](https://github.com/vcs-python/libvcs/actions?query=workflow%3A%22tests%22)</longdescription>
</pkgmetadata>