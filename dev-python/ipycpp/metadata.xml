<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ipycppSimple and hackable jupyter kernel for running c++ (c plus plus) codes inside a python notebook.Rather than providing a true interactive experience, this kernel would just extract the cpp code from the notebook, compile it on the fly and print the result. It is meant as a drop-in replacement for your main cpp file.Install with:```pip install ipycpp```The package itself is in pure python, and will just call the cpp compiler already installed in your system. Of course, you have to provide a suitable cpp compiler, such as `g++` in order to make it work. Advanced build tools such as `make` should work as well.## MotivationOther packages, such as `xeus-cling` provide a better interactive experience when working with cpp, yet they introduce a lot of magic behind the scene. While developing algorithms with `cpp`, you usually care more about speed and low level control. This package guarantees no overhead - it just transpiles your notebook into a plain `.cpp` file: you may even check the result by yourself. Moreover, since this package is just a ~300lines pure python script, it's way easier to setup.## Usage*Note: you may find a complete example here, [example.ipynb](https://github.com/lucafabbian/ipycpp/blob/main/example.ipynb)*First, you have to provide some configuration.- `$$ipycpp_file`: this is the location where your code would be extracted- `$$ipycpp_build`: this is the command ipycpp should use to compile your code- `$$ipycpp_run`: this is the command ipycpp should use to compile your codeCreate a cell with:```cpp// $$ipycpp_file: src/main.cpp// $$ipycpp_build: g++ src/main.cpp -o bin/main// $$ipycpp_run: bin/main/* you may also declare global variables and include directives */#include &lt;stdio.h&gt;auto hello = &quot;hello world!&quot;;```Then, you may add other cells with some shared functions, for example:```cppvoid printHelloWorld(){printf(&quot;%s\n&quot;, hello);}```Finally, when you want to show some output value, you may declare the usual main function, just remembed to surround it with the special `#ifdef IPYCPP_MAIN` guard or use the &quot;clevermain&quot; mode (see below).```cpp#ifdef IPYCPP_MAIN#define IPYCPP_MAIN_METHODint main(){printHelloWorld();}#endif```Keep in mind that the notebook is stateless. Everything will be recompiled EVERY time. If you change a variable inside a main function and then run another cell, the change will be overwritten.## CleverMain modeIf you wish, you may ask `ipycpp` to automatically recognize your main methods. Use the `// $$ipycpp_clevermain: true` on your first cell instead of writing `#ifdef IPYCPP_MAIN` every time.For example:```cpp// $$ipycpp_file: src/main.cpp// $$ipycpp_build: g++ src/main.cpp -o bin/main// $$ipycpp_run: bin/main// $$ipycpp_clevermain: true#include &lt;stdio.h&gt;auto hello = &quot;hello world!&quot;;int main(){  printf(&quot;%s\n&quot;, hello);}``````cpp// another cellint main(){  printf(&quot;another cell, %s\n&quot;, hello);}```This works 99% of the times, but may incur into issues if you are doing some weird preprocessor magic (`ipycpp` has no way to resolve in advance your `#define` directives).## Special formattingYou may provide non-textual data to the notebook, such as html or images, by printing some special tags. This feature is enabled by default, and let you create interactive notebooks.### disableTo disable any kind of special data for the rest of the cell, just print `$$$ipycppr_disable_special_output$$$` at the beginning of your main.For example:```cppprintf(&quot;$$$ipycppr_disable_special_output$$$\n&quot;);```In this way, you will be sure that any further output will be printed &quot;as is&quot;.### images or other filesYou may display an image (or another kind of file) by printing the special tag `$$$ipycppr_file$$$` followed by the image path. ipycpp will guess the kind of file from the extension. For example:```cppprintf(&quot;$$$ipycppr_file$$$%s\n&quot;, &quot;myfolder/myimage.png&quot;);```### htmlMark html regions with `$$$ipycppr_html_start$$$` and `$$$ipycppr_html_end$$$` (newline required). You may also add some javascript logic to create interactive widgets.Basic example:```cppprintf(&quot;$$$ipycppr_html_start$$$\n%s\n$$$ipycppr_html_end$$$\n&quot;, &quot;&lt;b&gt;some bold text&lt;/b&gt;&quot;);```Advanced example (this will create an interactive widget using the [PetiteVue library](https://github.com/vuejs/petite-vue); the widget will display a number and two buttons to increment or decrement it):```cppauto html = R&quot;&quot;&quot;&quot;(&lt;div class=&quot;widgetcontainer&quot;&gt;&lt;div class=&quot;widget&quot; v-scope=&quot;{ count: 0 }&quot;&gt;&lt;button @click=&quot;count--&quot;&gt;-&lt;/button&gt;{{ count }}&lt;button @click=&quot;count++&quot;&gt;+&lt;/button&gt;&lt;/div&gt;&lt;script&gt;if(!window.INSTALL_PETITE_VUE){let resolve = null;window.INSTALL_PETITE_VUE = new Promise(r =&gt; resolve = r);var script = document.createElement('script');script.src = 'https://unpkg.com/petite-vue';script.onload = resolve;document.head.appendChild(script);}{// get current element right now, and mount it as soon as petite-vue is loadedlet element = document.currentScript.previousElementSibling;window.INSTALL_PETITE_VUE.then(() =&gt; PetiteVue.createApp().mount(element));}&lt;/script&gt;&lt;/div&gt;)&quot;&quot;&quot;&quot;;#ifdef IPYCPP_MAIN#define IPYCPP_MAIN_METHODint main(){printf(&quot;$$$ipycppr_html_start$$$\n%s\n$$$ipycppr_html_end$$$\n&quot;, html);}#endif```## Authors and licenseMain author: Luca Fabbian &lt;luca.fabbian.1999@gmail.com&gt;Freely distributed under MIT license.Feel free to open a github issue to report bugs or submit feature requests!</longdescription>
</pkgmetadata>