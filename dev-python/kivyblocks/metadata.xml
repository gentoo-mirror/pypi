<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># KivyBlocksCan you ever image build a gui application like play Lego blocks? kivyblocks just try to provide programmer a tool to build a application like play lego blockskivyblocks base on the python package 'kivy', which is a cross platform GUI package and can play on window, linux, mac OS x, android and iphone## Requirement[appPublic](https://github.com/yumoqing/appPublic)[kivycalendar](https://github.com/yumoqing/kivycalendar)[kivy](https://github.com/kivy/kivy)...see the [requirements.txt](./requirements.txt)## PrincipleThere is a BlocksApp(inherited from App) in kivyblocks contains a all widgets can be created by Blocks, and the Blocks creates widgets according a customized json data, the data can download from application server or local filesystem. The Customized json data has it own format to descript the UI and it's interaction. please see the &quot;Customized json data&quot; section for further information.## installation```pip install git+https://github.com/yumoqing/kivyblocks```Use above command to install the newest version of kivyblocks## How to usesee the simple example below:```import sysimport osfrom appPublic.folderUtils import ProgramPathfrom appPublic.jsonConfig import getConfigfrom kivyblocks.blocksapp import BlocksAppfrom kivyblocks.blocks import Blocksclass TestApp(BlocksApp):def build(self):b = super(TestApp, self).build()widget_desc = {&quot;widgettype&quot;:&quot;VBox&quot;,&quot;options&quot;:{},&quot;subwidgets&quot;:[{&quot;widgettype&quot;:&quot;Title1&quot;,&quot;options&quot;:{&quot;otext&quot;:&quot;Say Hello&quot;,&quot;i18n&quot;:True,&quot;size_hint_y&quot;:None,&quot;height&quot;:&quot;py::CSize(2)&quot;}},{&quot;widgettype&quot;:&quot;Text&quot;,&quot;options&quot;:{&quot;i18n&quot;:True,&quot;otext&quot;:&quot;Hello KivyBlocks&quot;}}]}blocks = Blocks()x = blocks.widgetBuild(widget_desc)return xif __name__ == '__main__':pp = ProgramPath()workdir = ppif len(sys.argv) &gt; 1:workdir = sys.argv[1]print('ProgramPath=',pp,'workdir=',workdir)config = getConfig(workdir,NS={'workdir':workdir,'ProgramPath':pp})myapp = TestApp()myapp.run()```if you running it on window, it will show the following:![hello](./docs/imgs/hello_window.png)## BlocksAppinherited from kivy.app.App, for kivyblocks, it get root widget description dictionary from kivyblocks app's json configuration file, and uses Blocks to build the app's root widget.## BlocksA class to constructs all the GUI Widgets in kivyblocks from a widget description dictionary, The Blocks class is register in kivy.factory.Factory, so you can get Blocks class use following script:```from kivy.factory import FactoryBlocks = Factory.Blocks```### getWidgetById get widget by id#### SyntaxgetWidgetById(id:str, from_widget:Widget) -&gt; Widget#### DescriptiongetWidgetById find the widget identified by &quot;id&quot;, the widgets can be found, cause it have a &quot;id&quot; attribute in the widget description dictionary.#### Use Caseget app```app = Factory.Blocks.getWidgetById('app')```get root widget```root = Factory.blocks.getWidgetById('root')```get Window ```w = Factory.Blocks.getWidgetById('Window')```find app.root descendant widget with widget_id is 'myid' ```Factory.Blocks.getWidgetById('root.myid')```find specified widget's descendant widget```from_w = Factory.Blocks.getWidgetById('root.one_id')w = Factory.Blocks.getWidgetById('mychild', from_widget=from_w)```find a widget, widget_id is 'descendant' which has a ancester widget_id is 'myancester' and it is from_widget widget's ancester. ```from_w = Factory.Blocks.getWidgetById('root.one_id')w = Factory.Blocks.getWidgetById('-myancester.descendant', from_widget=from_w)```getWidgetById(id:str, from_widget:Widget) -&gt; Widget#### Arguments:* id a '.' splited string, each part must be a widget_id in the widget tree if id part is start with a '-', it mean to find widget upward, else it find widget downward* from_widget, default is None, it mean find widget from app.root#### Returnif widget found, return the found widget, else return None### widgetBuild()#### Syntaxx = widgetBuild(desc)#### Use Case#### Arguments* descwidget description dictionary(wdd), it has the following attributes:** widgettypeA string, the name of widget class registered by kivyblocks into kviy.factory.Factory** optionsA dictionary, it is the **kwargs argument of __init__() method of the class** subwidgets:a list, contains one or more wdd or id, when wdd mean widget description dictionary, and string mean the id can be find with Factory.Blocks.getWidgetById()** bindsa list of dictionary, each items bind a event to a action or actionsfor further information, please read use case of this function** any other attributes will be handle like a wdd, use to build a widget and the attributes key will be the attribute name of the class instance.#### Returnif success, return the widget, else return None## Registered class### Hierarchy### Menu### DataGrid### Toolbar### PagePanel### ToolPage### Form### Charts### Video### FFVideo### CircleProgress### BlocksTest### DefaultImage### CommandBox### Text### TinyText### PriceView### SingleCheckBox### ClickableBox### ClickableText### ClickableIconText### ToggleText### ToggleIconText### ClickableImage### ToggleImage### CircleProgress### PyInterpreter### UploadFile### FFVideo### AnchorBox### FloatBox### RelativeBox### GridBox### PageBox### ScatterBox### StackBox### DateInput### HTTPSeriesData### HTTPDataHandler### PageLoader### UdpWidget### ScrollPanel### TextInput### CameraWithMic### CustomCamera### QrReader### Markdown### PagePanel### Conform### Popup### MapView### DataGrid### FileLoaderBrowser### KivyCamera### QRCodeWidget### TabsPanel### TwoSides### PageContainer### BoxViewer### Form### StrSearchForm### VPlayer### DataGrid### Toolbar### ToolPage### HTTPDataHandler### Text### ScrollWidget### BinStateImage### JsonCodeInput### FloatInput### IntegerInput### StrInput### SelectInput### BoolInput### Messager### LoginForm### PressableImage### PressableLabel### Tree### TextTree### MenuTree### PopupMenu### HostImage### APlayer### WrapText### PressableBox### Title1### Title2### Title3### Title4### Title5### Title6### Modal### TimedModal### HBox### VBox### SwipeBox### ToggleItems### ExAccordion### Slider### PhoneButton### AWebView## Documents[中文文档](./docs/cn/index.md)[English](./docs/en/index.md)## referencesBuild app for android please see [Buildozer](https://github.com/kivy/buildozer)kivy introduct and API please see [kivy](https://kivy.org)## Changelog[changelog](docs/changelog.md)</longdescription>
</pkgmetadata>