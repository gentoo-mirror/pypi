<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytest-it=========|PyPI|  |Travis|Decorate your pytest suite with `RSpec-inspired &lt;rspec.info&gt;`_ markers ``describe``, ``context`` and``it``. Then run ``pytest --it`` to see a plaintext, org-mode compatible spec of thetest structure... image:: img/output-example.pngInstall-------``pytest-it`` is `available on PyPi &lt;https://pypi.org/project/pytest-it/&gt;`_: ``pip install pytest-it``.Examples--------A basic example that uses ``pytest.mark.describe``, ``pytest.mark.context`` and ``pytest.mark.it``:.. code-block:: python    from pytest import mark as m    @m.describe(&quot;The test function report format&quot;)    class TestPytestItExample(object):        @m.context(&quot;When @pytest.mark.it is used&quot;)        @m.it(&quot;Displays an '- It: ' block matching the decorator&quot;)        def test_it_decorator(self, testdir):            passThis produces::  - Describe: The test function report format...    - Context: When @pytest.mark.it is used...      - ✓ It: Displays an '- It: ' block matching the decorator``Describe`` and ``Context`` blocks can be nested arbitrarily by using multiplemarkers, eg:.. code-block:: python    from pytest import mark as m    @m.describe(&quot;The test function report format&quot;)    class TestPytestItExample(object):        @m.context(&quot;When @pytest.mark.it is not used&quot;)        @m.it(&quot;Displays the test function name&quot;)        def test_no_argument(self, testdir):            pass        @m.context(&quot;When @pytest.mark.it is not used&quot;)        @m.context(&quot;but the test name starts with 'test_it_'&quot;)        @m.it(&quot;Prettifies the test name into the 'It: ' value&quot;)        def test_populates_the_it_marker_using_function_name(self, testdir):            passThis produces::  - Describe: The test function report format...    - Context: When @pytest.mark.it is not used...      - ✓ It: Displays the test function name      - ...but the test name starts with 'test_it_'...        - ✓ It: Prettifies the test name into the 'It: ' valueBehaviour---------- Pytest markers are used to specify the ``Describe:``, ``Context:`` and ``It:``  sections. You can set these in all the usual ways that you specify pytest  markers.- ``Describe`` and ``Context`` can be nested arbitrarily.- If ``--collect-only`` is used, it displays the same ``pytest-it`` spec as usual, but  without the test result (✓/F/s).- If ``-v`` is higher than 0, the full path to the test function is include in the  test name.- If ``pytest.mark.it`` is not used on a test, the test name is displayed instead  of the ``It: does something`` output.- If ``pytest.mark.it`` is not used but the test name starts with ``test_it``,  ``pytest-it`` will prettify the test name into an ``It: does something`` value.- The test output should be able to be copied directly into an `org-mode &lt;https://orgmode.org/&gt;`_ file.Background-----------Pytest provides a lot of useful features for testing in Python, but when testingcomplex systems, it can be hard to clearly communicate the intent of a testusing the standard ``test_module.py::TestClass::test_function`` structure.One way to improve clarity is to use a BDD testing framework(eg. `Behave &lt;https://github.com/behave/behave&gt;`_,`Mamba &lt;https://github.com/nestorsalceda/mamba&gt;`_, `Rspec &lt;http://rspec.info&gt;`_), butit's not always desirable to restructure existing test and program code.There are some pytest plugins that attempt to bridge this gap, by providingalternative ways to structure the tests (eg. `pytest-describe&lt;https://github.com/ropez/pytest-describe&gt;`_, `pytest-bdd &lt;https://github.com/pytest-dev/pytest-bdd&gt;`_), oraltering the test report output (eg. `pytest-testdox &lt;https://github.com/renanivo/pytest-testdox&gt;`_, `pytest-pspec &lt;https://github.com/gowtham-sai/pytest-pspec&gt;`_).``pytest-it`` takes a similar approach to ``pytest-testdox``, by providing pytestmarkers that can describe the test output. ``pytest-it`` supports a few otherfeatures, such as:- A plaintext test structure that can easily be copied to markdown/org-mode documents.- Arbitrary nesting of ``describe`` and ``context`` markers.- Supporting the ``--collect-only`` pytest flag to display test structure.- Displaying the full path to each test if ``-v`` is used.- Neatly integrating tests in the output if they don't use the ``pytest-it``  markers.Although ``pytest-it`` does not change the behaviour of pytest tests, you may find ita useful tool for thinking about test structure, and communicating the intentionof both the test code and the system under test... |PyPI| image:: https://img.shields.io/pypi/v/pytest-it.svg   :target: https://pypi.python.org/pypi/pytest-it.. |Travis| image:: https://travis-ci.org/mattduck/pytest-it.svg?branch=master   :target: https://travis-ci.org/mattduck/pytest-it</longdescription>
</pkgmetadata>