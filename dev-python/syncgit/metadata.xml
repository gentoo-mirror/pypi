<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># syncgitSync python dicts, strings and modules to files in git repository.NOTE: syncgit calls git using subprocess, setup git so it does not ask for username or password,otherwise you will get a timeout exception.### Installation```python -m pip install syncgit```### Documentationhttps://syncgit.readthedocs.io/en/latest/### Example ```pythonfrom typing import Listimport timefrom syncgit import Repo, SyncConfig# This callback is called when changes are pushed to the repodef update_callback(repo: Repo, changes: List[SyncConfig]) -&gt; None:    print(f&quot;Updated to commit {repo.commit_hash}&quot;)    for change in changes:        print(f&quot;Updated {change.name}&quot;)# Create repo class and import files from repositoryrp = Repo(&quot;example_repo&quot;, &quot;git@github.com:RainingComputers/syncgit-test.git&quot;, &quot;main&quot;)rp.set_config([    SyncConfig(&quot;about_alice&quot;, &quot;alice.json&quot;, &quot;json&quot;),    SyncConfig(&quot;about_bob&quot;, &quot;bob.yml&quot;),    SyncConfig(&quot;text&quot;, &quot;text_file.txt&quot;, &quot;text&quot;),    SyncConfig(&quot;hello_module&quot;, &quot;say_hello.py&quot;)])# Register call backrp.set_update_callback(update_callback)# Start syncrp.start_sync()# Imported files will be available as attributes on the repo class# Changes are reflected immediately on these attributes real timetry:    while True:        time.sleep(1)        print(rp.about_alice)        print(rp.about_bob)        print(rp.text)        rp.hello_module.say_hello(&quot;Alice&quot;)except KeyboardInterrupt:    print(&quot;Stopping sync&quot;)    rp.stop_sync()```</longdescription>
</pkgmetadata>