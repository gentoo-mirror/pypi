<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. Licensed to the Apache Software Foundation (ASF) under one.. or more contributor license agreements.  See the NOTICE file.. distributed with this work for additional information.. regarding copyright ownership.  The ASF licenses this file.. to you under the Apache License, Version 2.0 (the.. &quot;License&quot;); you may not use this file except in compliance.. with the License.  You may obtain a copy of the License at....  http://www.apache.org/licenses/LICENSE-2.0.... Unless required by applicable law or agreed to in writing,.. software distributed under the License is distributed on an.. &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY.. KIND, either express or implied.  See the License for the.. specific language governing permissions and limitations.. under the License.=================================Apache TinkerPop - Gremlin Python=================================`Apache TinkerPop™ &lt;https://tinkerpop.apache.org&gt;`_is a graph computing framework for both graph databases (OLTP) andgraph analytic systems (OLAP). `Gremlin &lt;https://tinkerpop.apache.org/gremlin.html&gt;`_is the graph traversal language ofTinkerPop. It can be described as a functional, data-flow language that enables users to succinctly express complextraversals on (or queries of) their application's property graph.Gremlin-Python implements Gremlin within the Python language and can be used on any Python virtual machine includingthe popular CPython machine. Python’s syntax has the same constructs as Java including &quot;dot notation&quot; for functionchaining ``(a.b.c)``, round bracket function arguments ``(a(b,c))``, and support for global namespaces``(a(b()) vs a(__.b()))``. As such, anyone familiar with Gremlin-Java will immediately be able to work withGremlin-Python. Moreover, there are a few added constructs to Gremlin-Python that make traversals a bit more succinct.Gremlin-Python is designed to connect to a &quot;server&quot; that is hosting a TinkerPop-enabled graph system. That &quot;server&quot;could be `Gremlin Server &lt;https://tinkerpop.apache.org/docs/current/reference/#gremlin-server&gt;`_ or a`remote Gremlin provider &lt;https://tinkerpop.apache.org/docs/current/reference/#connecting-rgp&gt;`_ that exposesprotocols by which Gremlin-Python can connect.A typical connection to a server running on &quot;localhost&quot; that supports the Gremlin Server protocol using websocketsfrom the Python shell looks like this:    &gt;&gt;&gt; from gremlin_python.process.anonymous_traversal import traversal    &gt;&gt;&gt; from gremlin_python.driver.driver_remote_connection import DriverRemoteConnection    &gt;&gt;&gt; g = traversal().withRemote(DriverRemoteConnection('ws://localhost:8182/gremlin','g'))Once &quot;g&quot; has been created using a connection, it is then possible to start writing Gremlin traversals to query theremote graph:    &gt;&gt;&gt; g.V().both()[1:3].toList()    [v[2], v[4]]    &gt;&gt;&gt; g.V().both()[1].toList()    [v[2]]    &gt;&gt;&gt; g.V().both().name.toList()    [lop, vadas, josh, marko, marko, josh, peter, ripple, lop, marko, josh, lop]-----------------Sample Traversals-----------------The Gremlin language allows users to write highly expressive graph traversals and has a broad list of functions thatcover a wide body of features. The `Reference Documentation &lt;https://tinkerpop.apache.org/docs/current/reference/#graph-traversal-steps&gt;`_describes these functions and other aspects of the TinkerPop ecosystem including some specifics on`Gremlin in Python &lt;https://tinkerpop.apache.org/docs/current/reference/#gremlin-python&gt;`_ itself. Most of theexamples found in the documentation use Groovy language syntax in the`Gremlin Console &lt;https://tinkerpop.apache.org/docs/current/tutorials/the-gremlin-console/&gt;`_.For the most part, these examples should generally translate to Python with`some modification &lt;https://tinkerpop.apache.org/docs/current/reference/#gremlin-python-differences&gt;`_. Given thestrong correspondence between canonical Gremlin in Java and its variants like Python, there is a limited amount ofPython-specific documentation and examples. This strong correspondence among variants ensures that the generalGremlin reference documentation is applicable to all variants and that users moving between development languages caneasily adopt the Gremlin variant for that language.Create Vertex^^^^^^^^^^^^^.. code:: python    from gremlin_python.process.traversal import T    from gremlin_python.process.traversal import Cardinality    id = T.id    single = Cardinality.single    def create_vertex(self, vid, vlabel):        # default database cardinality is used when Cardinality argument is not specified        g.addV(vlabel).property(id, vid). \          property(single, 'name', 'Apache'). \          property('lastname', 'Tinkerpop'). \          next()Find Vertices^^^^^^^^^^^^^.. code:: python    def list_all(self, limit=500):        g.V().limit(limit).elementMap().toList()    def find_vertex(self, vid):        g.V(vid).elementMap().next()    def list_by_label_name(self, vlabel, name):        g.V().has(vlabel, 'name', name).elementMap().toList()Update Vertex^^^^^^^^^^^^^.. code:: python    from gremlin_python.process.traversal import Cardinality    single = Cardinality.single    def update_vertex(self, vid, name):        g.V(vid).property(single, 'name', name).next()NOTE that versions suffixed with &quot;rc&quot; are considered release candidates (i.e. pre-alpha, alpha, beta, etc.) andthus for early testing purposes only. These releases are not suitable for production.</longdescription>
</pkgmetadata>