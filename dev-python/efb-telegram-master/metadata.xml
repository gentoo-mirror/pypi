<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>EFB Telegram Master Channel (ETM)=================================.. image:: https://img.shields.io/pypi/v/efb-telegram-master.svg   :alt: PyPI release   :target: https://pypi.org/project/efb-telegram-master/.. image:: https://github.com/ehForwarderBot/efb-telegram-master/workflows/Tests/badge.svg   :alt: Tests status   :target: https://github.com/ehForwarderBot/efb-telegram-master/actions.. image:: https://pepy.tech/badge/efb-telegram-master/month   :alt: Downloads per month   :target: https://pepy.tech/project/efb-telegram-master.. image:: https://d322cqt584bo4o.cloudfront.net/ehforwarderbot/localized.svg   :alt: Translate this project   :target: https://crowdin.com/project/ehforwarderbot/.. image:: https://github.com/ehForwarderBot/efb-telegram-master/raw/master/banner.png   :alt: Banner`README in other languages`_... TRANSLATORS: change the URL on previous line as &quot;.&quot; (without quotations)... _README in other languages: ./readme_translations**Channel ID**: ``blueset.telegram``ETM is a Telegram Master Channel for EH Forwarder Bot, based on TelegramBot API, ``python-telegram-bot``.Requirements-------------  Python &gt;= 3.6-  EH Forwarder Bot &gt;= 2.0.0-  ffmpeg-  libmagic-  libwebpGetting Started---------------1. Install all required binary dependencies2. Install ETM   .. code:: shell       pip3 install efb-telegram-master3. Enable and configure ETM using the *EFB configuration wizard*, or enable   it manually in the profile’s ``config.yaml``.   The path of your profile storage directory depends on your   configuration.   **(As of EFB 2, default profile storage directory is located at**   ``~/.ehforwarderbot/profiles/default`` **)**4. Configure the channel (manual configure instructions as follows)Alternative installation methods~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ETM also has other alternative installation methodscontributed by the community, including:- `AUR package`_ maintained by KeLiu_ (``python-efb-telegram-master-git``)- Other `installation scripts and containers (e.g. Docker)`_.. _KeLiu: https://github.com/specter119.. _AUR package: https://aur.archlinux.org/packages/python-efb-telegram-master-git.. _installation scripts and containers (e.g. Docker): https://efb-modules.1a23.studio#scripts-and-containers-eg-dockerManual Configuration--------------------Set up a bot~~~~~~~~~~~~Create a bot with `@BotFather`_, give it a name and a username.Then you’ll get a token, which will be used later. Keep thistoken secure, as it gives who owns it the full access to thebot... _@BotFather: https://t.me/botfatherUse ``/setjoingroups`` to allow your bot to join groups.Use ``/setprivacy`` to disable the privacy restrictionof the bot, so that it can receive all messages in thegroup.Complete configuration file~~~~~~~~~~~~~~~~~~~~~~~~~~~Configuration file is stored at``&lt;profile directory&gt;/blueset.telegram/config.yaml``.A sample config file can be as follows:.. code:: yaml    ##################    # Required items #    ##################    # [Bot Token]    # This is the token you obtained from @BotFather    token: &quot;012345678:1Aa2Bb3Vc4Dd5Ee6Gg7Hh8Ii9Jj0Kk1Ll2M&quot;    # [List of Admin User IDs]    # ETM will only process messages and commands from users    # listed below. This ID can be obtained from various ways     # on Telegram.    admins:    - 102938475    - 91827364    ##################    # Optional items #    ##################    # [Experimental Flags]    # This section can be used to toggle experimental functionality.    # These features may be changed or removed at any time.    # Options in this section is explained afterward.    flags:        option_one: 10        option_two: false        option_three: &quot;foobar&quot;    # [Network Configurations]    # [RPC Interface]    # Refer to relevant sections afterwards for details.Usage-----At the beginning, messages from all senders will be sent to the userdirectly, that means every message will be mixed in the sameconversation. By linking a chat, you can redirect messages from aspecific sender to an empty group for a more organized conversation.In a nutshell, ETM offers the following commands, you can also send itto BotFather for a command list::    help - Show commands list.    link - Link a remote chat to a group.    unlink_all - Unlink all remote chats from a group.    info - Display information of the current Telegram chat.    chat - Generate a chat head.    extra - Access additional features from Slave Channels.    update_info - Update info of linked Telegram group.    react - Send a reaction to a message, or show a list of reactors.    rm - Remove a message from its remote chat... note::    In case of multiple admins are assigned, they may all send message on    your behalf, but only the 0th admin can receive direct message from    the bot.``/link``: Link a chat~~~~~~~~~~~~~~~~~~~~~~1. Create a new group, invite your bot to the group2. Send ``/link`` directly to the bot, then select your preferred slave   chat.3. Tap “Link” and select your new group.   *You can also choose to unlink or relink a linked chat from this   menu.*4. Tap “Start” at the bottom of your screen, and you should see a   success message: “Chat linked.”.. note::    You may introduce non-ETM admin users to the group, however, they:    -  Can read all messages send from the related remote chat;    -  May NOT send message on your behalf.If the “Link” button doesn’t work for you, you may try the “ManualLink/Relink” button. To manually link a remote chat:1. Add the bot to the group you want to link to2. Copy the code provided by the bot, and send it to the group.3. If the group is linked successfully, you would receive a confirmation   from the bot.Also, you can send ``/unlink_all`` to a group to unlink all remote chatsfrom it.Also, if you want to link a chat which you just used, you can simply reply``/link`` quoting a previous message from that chat without choosing fromthe long chat list.Advanced feature: Filtering^^^^^^^^^^^^^^^^^^^^^^^^^^^If you have just too many chats, and being too tired for keep tapping``Next &gt;``, or maybe you just want to find a way to filter out whatyou’re looking for, now ETM has equipped ``/chat`` and ``/list`` withfiltering feature. Attach your keyword behind, and you can get afiltered result.E.g.: ``/chat Eana`` will give you all chats has the word “Eana”... admonition:: Technical Details    The filter query is in fact a regular expression matching. We used    Python’s ``re.search`` with flags ``re.DOTALL | re.IGNORECASE`` in    this case, i.e.: ``.`` matches everything including line breaks, and    the query is NOT case-sensitive. Each comparison is done against a    specially crafted string which allows you to filter multiple criteria.::    Channel: &lt;Channel name&gt;    Channel ID: &lt;Channel ID&gt;    Name: &lt;Chat name&gt;    Alias: (&lt;Chat Alias&gt;|None)    ID: &lt;Chat Unique ID&gt;    Type: (Private|Group|System)    Mode: [Linked]    Description: &lt;Description&gt;    Notification: (ALL|MENTION|NONE)    Other: &lt;Python Dictionary String&gt;.. note::    Type can be either “User” or “Group”    Other is the vendor specific information provided by slave channels.    Format of such information is specified in their documentations    respectively.Examples:-  Look for all WeChat groups: ``Channel: WeChat.*Type: Group``-  Look for everyone who has no alias (and those with an alias called “None”): ``Alias: None``-  Look for all entries contain “John” and “Johnny” in any order:   ``(?=.*John)(?=.*Johnny)``Send a message~~~~~~~~~~~~~~Send to a linked chat^^^^^^^^^^^^^^^^^^^^^You can send message as you do in a normal Telegram chat.What is supported:-  Send/forward message in all supported types-  Quote-reply to a message-  Send message with inline bot in supported typesWhat is NOT supported:-  @ reference-  Markdown/HTML formatting-  Inline buttons-  Messages with unsupported types... note::    This only applies to Telegram groups that are linked to a single remote    chat, groups that are linked with multiple remote chats shall work in the    same way as non-linked chats.Send to a non-linked chat^^^^^^^^^^^^^^^^^^^^^^^^^To send a message to a non-linked chat, you should “quote-reply” to amessage or a “chat head” that is sent from your recipient. Thosemessages should appear only in the bot conversation.In a non-linked chat, quote-reply will not be passed on to the remotechannel, everything else is supported as it does in a linked chat.Quick reply in non-linked chats'''''''''''''''''''''''''''''''ETM provides a mechanism that allow you to keep sending messages to the samerecipient without quoting every single time. ETM will store the remote chat yousent a message to in every Telegram chat (i.e. a Telegram group or the bot),which is known as the “last known recipient” of the Telegram chat.In case where recipient is not indicated for a message, ETM will try to deliverit to the “last known recipient” in the Telegram chat only if:1. your last message with the “last known recipient” is with in an hour, and2. the last message in this Telegram chat is from the “last known recipient”.Edit and delete message^^^^^^^^^^^^^^^^^^^^^^^In EFB v2, the framework added support to message editing and removal,and so does ETM. However, due to the limitation of Telegram Bot API,although you may have selected “Delete for the bot”, or “Delete foreveryone” while deleting messages, the bot would **not** know anything about it. Therefore, if you want your message to be removed from a remote chat, edit your message and prepend it with ``rm``` (it’s ``R``, ``M``, and ``~```, not single quote), so that the bot knows that you want to delete the message.Alternatively, you can also reply ``/rm`` to a message to remove it from itsremote chat. This can be useful when you cannot edit the message directly(sticker, location, etc.), or when the message is not sent via ETM.Please also notice that some slave channels may not support editing and/ordeleting messages depends on their implementations.``/chat``: Chat head^^^^^^^^^^^^^^^^^^^^If you want to send a message to a non-linked chat which has not yetsent you a message, you can ask ETM to generate a “chat head”. Chat headworks similarly to an incoming message, you can reply to it to sendmessages to your recipient.Send ``/chat`` to the bot, and choose a chat from the list. When you see“Reply to this message to chat with ...”, it’s ready to go.Advanced feature: Filtering'''''''''''''''''''''''''''Filter is also available in ``/chat`` command. Please refer to thesame chapter above, under ``/link`` for details.``/extra``: External commands from slave channels (“additional features”)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Some slave channels may provide commands that allows you to remotelycontrol those accounts, and achieve extra functionality, those commandsare called “additional features”. To view the list of available extrafunctions, send ``/extra`` to the bot, you will receive a list ofcommands available.Those commands are named like “\ ``/&lt;number&gt;_&lt;command_name&gt;``\ ”, and can becalled like an CLI utility. (of course, advanced features likepiping etc would not be supported)``/update_info``: Update details of linked Telegram group~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ETM can help you to update the name and profile picture of a group tomatch with appearance in the remote chat. This will also add a list ofcurrent members to the Telegram group description if the remote chat isa group.This functionality is available when:* This command is sent to a group* The bot is an admin of the group* The group is linked to **exactly** one remote chat* The remote chat is accessibleProfile picture will not be set if it’s not available from the slavechannel.``/react``: Send reactions to a message or show a list of reactors~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Reply ``/react`` to a message to show a list of chat members whohave reacted to the message and what their reactions are.Reply ``/react`` followed by an emoji to react to this message, e.g.``/react 👍``. Send ``/react -`` to remove your reaction.Note that some slave channels may not accept message reactions, andsome channels have a limited reactions you can send with. Usuallywhen you send an unaccepted reaction, slave channels can providea list of suggested reactions you may want to try instead.``/rm``: Delete a message from its remote chat~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can reply ``/rm`` to a message to remove it from its remote chat.Comparing to prepending ``rm``` to a message, you can use this commandeven when you cannot edit the message directly (sticker, location, etc.), or when the message is not sent via ETM. It can also allow youto remove messages sent by others if provided by the slave channel. Please notice that some slave channels may not support removing messages depends on their implementations.Telegram Channel support~~~~~~~~~~~~~~~~~~~~~~~~ETM supports linking remote chats to Telegram Channels with partialsupport.The bot can:-  Link one or more remote chats to a Telegram Channel-  Check and manage link status of the channel-  Update channel title and profile pictures accordinglyIt cannot:-  Process messages sent by you or others to the channel-  Accept commands in the channelCurrently the following commands are supported in channels:-  ``/start`` for manual chat linking-  ``/link`` to manage chats linked to the channel-  ``/info`` to show information of the channel-  ``/update_info`` to update the channel title and pictureHow to use:1. Add the bot as an administrator of the channel2. Send commands to the channel3. Forward the command message to the bot privately.. admonition:: Technical Details    Telegram Bot API prevents bot from knowing who actually sent a message    in a channel (not including signatures as that doesn't reflect the numeric    ID of the sender). In fact, that is the same for normal users in a channel    too, even admins.    If messages from channels are to be processed unconditionally, not only    that other admins in existing channels can add malicious admins to it,    anyone on Telegram, once knows your bot username, can add it to a channel    and use the bot on your behalf. Thus, we think that it is not safe to    process messages directly from a channel.Limitations-----------Due to the technical constraints of both Telegram Bot API and EH ForwarderBot framework, ETM has the following limitations:- Some Telegram message types are **not** supported:    - Game messages    - Invoice messages    - Payment messages    - Passport messages    - Vote messages- ETM cannot process any message from another Telegram bot.- Some components in Telegram messages are dropped:    - Original author and signature of forwarded messages    - Formats, links and link previews    - Buttons attached to messages    - Details about inline bot used on messages- Some components in messages from slave channels are dropped:    - @ references not referring to you.- The Telegram bot can only    - send you any file up to 50 MB,    - receive file from you up to 20 MB.Experimental flags------------------The following flags are experimental features, may change, break, ordisappear at any time. Use at your own risk.Flags can be enabled in the ``flags`` key of the configuration file,e.g.:.. code:: yaml    flags:        flag_name: flag_value-  ``chats_per_page`` *(int)* [Default: ``10``]   Number of chats shown in when choosing for ``/chat`` and ``/link``   command. An overly large value may lead to malfunction of such   commands.-  ``network_error_prompt_interval`` *(int)* [Default: ``100``]   Notify the user about network error every ``n`` errors received. Set   to 0 to disable it.-  ``multiple_slave_chats`` *(bool)* [Default: ``true``]   Link more than one remote chat to one Telegram group. Send and reply   as you do with an unlinked chat. Disable to link remote chats and   Telegram group one-to-one.-  ``prevent_message_removal`` *(bool)* [Default: ``true``]   When a slave channel requires to remove a message, EFB will ignore   the request if this value is ``true``.-  ``auto_locale`` *(str)* [Default: ``true``]   Detect the locale from admins’ messages automatically. Locale   defined in environment variables will be used otherwise.-   ``retry_on_error`` *(bool)* [Default: ``false``]    Retry infinitely when an error occurred while sending request    to Telegram Bot API. Note that this may lead to repetitive    message delivery, as the respond of Telegram Bot API is    not reliable, and may not reflect the actual result.-   ``send_image_as_file`` *(bool)* [Default: ``false``]    Send all image messages as files, in order to prevent Telegram’s    image compression in an aggressive way.-   ``message_muted_on_slave`` *(str)* [Default: ``normal``]    Behavior when a message received is muted on slave channel platform.    - ``normal``: send to Telegram as normal message    - ``silent``: send to Telegram as normal message, but without notification      sound    - ``mute``: do not send to Telegram-   ``your_message_on_slave`` *(str)* [Default: ``silent``]    Behavior when a message received is from you on slave channel platform.    This overrides settings from ``message_muted_on_slave``.    - ``normal``: send to Telegram as normal message    - ``silent``: send to Telegram as normal message, but without notification      sound    - ``mute``: do not send to Telegram-   ``animated_stickers`` *(bool)* [Default: ``false``]    Enable experimental support to animated stickers. Note: you need to    install binary dependency ``libcairo`` on your own, and additional    Python dependencies via ``pip3 install &quot;efb-telegram-master[tgs]&quot;``    to enable this feature.-   ``send_to_last_chat`` *(str)* [Default: ``warn``]    Enable quick reply in non-linked chats.    - ``enabled``: Enable this feature without warning.    - ``warn``: Enable this feature and issue warnings every time when you      switch a recipient with quick reply.    - ``disabled``: Disable this feature.-   ``default_media_prompt`` *(str)* [Default: ``emoji``]    Placeholder text when the a picture/video/file message has no caption.    - ``emoji``: Use emoji like 🖼️, 🎥, and 📄.    - ``text``: Use text like “Sent a picture/video/file”.    - ``disabled``: Use empty placeholders.-   ``api_base_url`` *(str)* [Default: ``null``]    Base URL of the Telegram Bot API.    Defaulted to ``https://api.telegram.org/bot``.-   ``api_base_file_url`` *(str)* [Default: ``null``]    Base file URL of the Telegram Bot API.    Defaulted to ``https://api.telegram.org/file/bot``.-   ``local_tdlib_api`` *(bool)* [Default: ``false``]    Enable this option if the bot API is running in ``--local`` mode and    is using the same file system with ETM.Network configuration: timeout tweaks-------------------------------------   This chapter is adapted from `Python Telegram Bot wiki`__, licensed   under CC-BY 3.0.__ https://github.com/python-telegram-bot/python-telegram-bot/wiki/Handling-network-errors#tweaking-ptb``python-telegram-bot`` performs HTTPS requests using ``urllib3``.``urllib3`` provides control over ``connect_timeout`` &amp; ``read_timeout``.``urllib3`` does not separate between what would be considered read &amp;write timeout, so ``read_timeout`` serves for both. The defaults chosenfor each of these parameters is 5 seconds.The ``connect_timeout`` value controls the timeout for establishing aconnection to the Telegram server(s).Changing the defaults of ``read_timeout`` &amp; ``connect_timeout`` can bedone by adjusting values ``request_kwargs`` section in ETM’s``config.yaml``... code:: yaml   # ...   request_kwargs:       read_timeout: 6       connect_timeout: 7Run ETM behind a proxy----------------------   This chapter is adapted from `Python Telegram Bot   wiki`__, licensed under CC-BY 3.0.__ https://github.com/python-telegram-bot/python-telegram-bot/wiki/Working-Behind-a-ProxyYou can appoint proxy specifically for ETM without affecting otherchannels running in together in the same EFB instance. This can also bedone by adjusting values ``request_kwargs`` section in ETM’s``config.yaml``.HTTP proxy server~~~~~~~~~~~~~~~~~.. code:: yaml   request_kwargs:       # ...       proxy_url: http://PROXY_HOST:PROXY_PORT/       # Optional, if you need authentication:       username: PROXY_USER       password: PROXY_PASSSOCKS5 proxy server~~~~~~~~~~~~~~~~~~~This is configuration is supported, but requires an optional/extrapython package. To install:.. code:: shell   pip install python-telegram-bot[socks].. code:: yaml   request_kwargs:       # ...       proxy_url: socks5://URL_OF_THE_PROXY_SERVER:PROXY_PORT       # Optional, if you need authentication:       urllib3_proxy_kwargs:           username: PROXY_USER           password: PROXY_PASSRPC interface-------------A standard `Python XML RPC server`__ is implemented in ETM 2. It can beenabled by adding a ``rpc`` section in ETM’s ``config.yml`` file.__ https://docs.python.org/3/library/xmlrpc.html.. code:: yaml   rpc:       server: 127.0.0.1       port: 8000.... warning::   The ``xmlrpc`` module is not secure against maliciously   constructed data. Do not expose the interface to untrusted parties or   the public internet, and turn off after use.Exposed functions~~~~~~~~~~~~~~~~~Functions in `the db (database manager) class`_ and`the RPCUtilities class`_ are exposed. Refer to the source codefor their documentations.How to use~~~~~~~~~~Set up a ``SimpleXMLRPCClient`` in any Python script and call any of theexposed functions directly. For details, please consult `Pythondocumentation on xmlrpc`__.__ https://docs.python.org/3/library/xmlrpc.html.. _the db (database manager) class: https://etm.1a23.studio/blob/master/efb_telegram_master/db.py.. _the RPCUtilities class: https://etm.1a23.studio/blob/master/efb_telegram_master/rpc_utilities.pySetup Webhook-------------For details on how to setup a webhook, please visit this `wiki article`_... _wiki article: https://github.com/ehForwarderBot/efb-telegram-master/wiki/Setup-WebhookLicense-------ETM is licensed under `GNU Affero General Public License 3.0`_ or later versions::    EFB Telegram Master Channel: A master channel for EH Forwarder Bot.    Copyright (C) 2016 - 2020 Eana Hufwe, and the EFB Telegram Master Channel contributors    All rights reserved.    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU Affero General Public License as    published by the Free Software Foundation, either version 3 of the    License, or any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU Affero General Public License    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;... _GNU Affero General Public License 3.0: https://www.gnu.org/licenses/agpl-3.0.txtTranslation support-------------------ETM supports translated user interface with the help of community.The bot detects languages of Telegram Client of the adminsfrom their messages, and automatically matches with a supportedlanguage on the go. Otherwise, you can set your language byturning off the ``auto_locale`` feature, and then settingthe locale environmental variable (``LANGUAGE``,``LC_ALL``, ``LC_MESSAGES`` or ``LANG``) to one of oursupported languages. Meanwhile, you can help to translatethis project into your languages on `our Crowdin page`_... _our Crowdin page: https://crowdin.com/project/ehforwarderbot/.. note::    If your are installing from source code, you will not get translations    of the user interface without manual compile of message catalogs (``.mo``)    prior to installation.</longdescription>
</pkgmetadata>