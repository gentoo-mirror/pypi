<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Name Parser===========|Build Status| |PyPI| |PyPI version| |Documentation|A simple Python (3.2+ &amp; 2.6+) module for parsing human names into theirindividual components. * hn.title* hn.first* hn.middle* hn.last* hn.suffix* hn.nickname* hn.surnames *(middle + last)** hn.initials *(first initial of each name part)*Supported Name Structures~~~~~~~~~~~~~~~~~~~~~~~~~The supported name structure is generally &quot;Title First Middle Last Suffix&quot;, where all pieces are optional. Comma-separated format like &quot;Last, First&quot; is also supported.1. Title Firstname &quot;Nickname&quot; Middle Middle Lastname Suffix2. Lastname [Suffix], Title Firstname (Nickname) Middle Middle[,] Suffix [, Suffix]3. Title Firstname M Lastname [Suffix], Suffix [Suffix] [, Suffix]Instantiating the `HumanName` class with a string splits on commas and then spaces, classifying name parts based on placement in the string and matches against known name pieces like titles and suffixes. It correctly handles some common conjunctions and special prefixes to last nameslike &quot;del&quot;. Titles and conjunctions can be chained together to handle complextitles like &quot;Asst Secretary of State&quot;. It can also try to correct capitalizationof names that are all upper- or lowercase names.It attempts the best guess that can be made with a simple, rule-based approach. Its main use case is English and it is not likely to be useful for languages that do not conform to the supported name structure. It's not perfect, but it gets you pretty far.Installation------------::  pip install nameparserIf you want to try out the latest code from GitHub you caninstall with pip using the command below.``pip install -e git+git://github.com/derek73/python-nameparser.git#egg=nameparser``If you need to handle lists of names, check out`namesparser &lt;https://github.com/gwu-libraries/namesparser&gt;`_, acompliment to this module that handles multiple names in a string.Quick Start Example-------------------::    &gt;&gt;&gt; from nameparser import HumanName    &gt;&gt;&gt; name = HumanName(&quot;Dr. Juan Q. Xavier de la Vega III (Doc Vega)&quot;)    &gt;&gt;&gt; name     &lt;HumanName : [    title: 'Dr.'     first: 'Juan'     middle: 'Q. Xavier'     last: 'de la Vega'     suffix: 'III'    nickname: 'Doc Vega'    ]&gt;    &gt;&gt;&gt; name.last    'de la Vega'    &gt;&gt;&gt; name.as_dict()    {'last': 'de la Vega', 'suffix': 'III', 'title': 'Dr.', 'middle': 'Q. Xavier', 'nickname': 'Doc Vega', 'first': 'Juan'}    &gt;&gt;&gt; str(name)    'Dr. Juan Q. Xavier de la Vega III (Doc Vega)'    &gt;&gt;&gt; name.string_format = &quot;{first} {last}&quot;    &gt;&gt;&gt; str(name)    'Juan de la Vega'The parser does not attempt to correct mistakes in the input. It mostly just splits on whitespace and puts things in buckets based on their position in the string. This also meansthe difference between 'title' and 'suffix' is positional, not semantic. &quot;Dr&quot; is a titlewhen it comes before the name and a suffix when it comes after. (&quot;Pre-nominal&quot;and &quot;post-nominal&quot; would probably be better names.)::    &gt;&gt;&gt; name = HumanName(&quot;1 &amp; 2, 3 4 5, Mr.&quot;)    &gt;&gt;&gt; name     &lt;HumanName : [    title: ''     first: '3'     middle: '4 5'     last: '1 &amp; 2'     suffix: 'Mr.'    nickname: ''    ]&gt;Customization-------------Your project may need some adjustment for your dataset. You cando this in your own pre- or post-processing, by `customizing the configured pre-defined sets`_ of titles, prefixes, etc., or by subclassing the `HumanName` class. See the `full documentation`_ for more information.`Full documentation`_~~~~~~~~~~~~~~~~~~~~~.. _customizing the configured pre-defined sets: http://nameparser.readthedocs.org/en/latest/customize.html.. _Full documentation: http://nameparser.readthedocs.org/en/latest/Contributing------------If you come across name piece that you think should be in the default config, you'reprobably right. `Start a New Issue`_ and we can get them added. Please let me know if there are ways this library could be structured to makeit easier for you to use in your projects. Read CONTRIBUTING.md_ for more infoon running the tests and contributing to the project.**GitHub Project**https://github.com/derek73/python-nameparser.. _CONTRIBUTING.md: https://github.com/derek73/python-nameparser/tree/master/CONTRIBUTING.md.. _Start a New Issue: https://github.com/derek73/python-nameparser/issues.. _click here to propose changes to the titles: https://github.com/derek73/python-nameparser/edit/master/nameparser/config/titles.py.. |Build Status| image:: https://github.com/derek73/python-nameparser/actions/workflows/python-package.yml/badge.svg   :target: https://github.com/derek73/python-nameparser/actions/workflows/python-package.yml.. |PyPI| image:: https://img.shields.io/pypi/v/nameparser.svg   :target: https://pypi.org/project/nameparser/.. |Documentation| image:: https://readthedocs.org/projects/nameparser/badge/?version=latest   :target: http://nameparser.readthedocs.io/en/latest/?badge=latest.. |PyPI version| image:: https://img.shields.io/pypi/pyversions/nameparser.svg   :target: https://pypi.org/project/nameparser/</longdescription>
</pkgmetadata>