<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mlmodels This repository is the ***Model ZOO for Pytorch, Tensorflow, Keras, Gluon, LightGBM, Keras, Sklearn models etc*** with Lightweight Functional interface to wrap access to Recent and State of Art Deep Learning, ML models and Hyper-Parameter Search, cross platforms that follows the logic of sklearn, such as fit, predict, transform, metrics, save, load etc. Now,  recent models are available across those fields : * Time Series, * Text classification, * Vision, * Image Generation,Text generation, * Gradient Boosting, Automatic Machine Learning tuning, * Hyper-parameter search.With the goal to transform Script/Research code into re-usable batch/code with minimal code change, we used functional interface instead of pure OOP. This is because functional reduces the amount of code needed which is good to scientific computing. Thus, we can focus on the computing part than design. Also, it is easy to maintain for medium size project. A collection of Deep Learning and Machine Learning research papers is available in this repository.![alt text](docs/mxnetf.png) ![alt text](docs/pytorch.PNG) ![alt text](docs/tenserflow.PNG)## Benefits :Having a standard framework for both machine learning models and deep learning models, allows a step towards automatic Machine Learning. The collection of models, model zoo in Pytorch, Tensorflow, Kerasallows removing dependency on one specific framework, and enable richer possibilities in model benchmarking and re-usage.Unique and simple interface, zero boilerplate code (!), and recent state of art models/frameworks are the main strength of MLMODELS. Emphasis is on traditional machine learning algorithms but recent state of art Deep Learning algorithms. Processing of high-dimensional data is considered very useful using Deep Learning. For different applications, such as computer vision, natural language processing, object detection, facial recognition and speech recognition, deep learning created significant improvements and outstanding results.Here you can find usages [guide](https://github.com/arita37/mlmodels/blob/dev/mlmodels/example/README_usage.md)## Model List :* [Time Series](#Time-series)* [NLP](#NLP)* [TABULAR](#TABULAR)* [VISION](#VISION)### Time Series:1. MILA, Nbeats: 2019, Advanced interpretable Time Series Neural Network, [[Link](https://arxiv.org/abs/1905.10437)]2. Amazon Deep AR: 2019, Multi-variate Time Series NNetwork, [[Link](https://ieeexplore.ieee.org/abstract/document/487783)]3. Facebook Prophet 2017, Time Series prediction [[Link]](http://www.macs.hw.ac.uk/~dwcorne/RSR/00279188.pdf)4. ARMDN, Advanced Multi-variate Time series Prediction : 2019, Associative and Recurrent Mixture Density Networks for time series. [[Link]](https://arxiv.org/pdf/1803.03800)5. LSTM Neural Network prediction : Stacked Bidirectional and Unidirectional LSTM Recurrent Neural Network for Network-wide Traffic Speed Prediction [[Link]](https://arxiv.org/ftp/arxiv/papers/1801/1801.02143.pdf)### NLP:1. Sentence Transformers : 2019, Embedding of full sentences using BERT, [[Link](https://arxiv.org/pdf/1908.10084.pdf)]2. Transformers Classifier : Using Transformer for Text Classification, [[Link](https://arxiv.org/abs/1905.05583)]3. TextCNN Pytorch : 2016, Text CNN Classifier, [[Link](https://arxiv.org/abs/1801.06287)]4. TextCNN Keras : 2016, Text CNN Classifier, [[Link](https://arxiv.org/abs/1801.06287)]5. Bi-directionnal Conditional Random Field LSTM for Name Entiryt Recognition,  [[Link](https://www.aclweb.org/anthology/Y18-1061.pdf)]5. DRMM:  Deep Relevance Matching Model for Ad-hoc Retrieval.[[Link](https://dl.acm.org/doi/pdf/10.1145/2983323.2983769?download=true)]6. DRMMTKS:  Deep Top-K Relevance Matching Model for Ad-hoc Retrieval. [[Link](https://link.springer.com/chapter/10.1007/978-3-030-01012-6_2)]7. ARC-I:  Convolutional Neural Network Architectures for Matching Natural Language Sentences[[Link](http://papers.nips.cc/paper/5550-convolutional-neural-network-architectures-for-matching-natural-language-sentences.pdf)]8. ARC-II:  Convolutional Neural Network Architectures for Matching Natural Language Sentences[[Link](http://papers.nips.cc/paper/5550-convolutional-neural-network-architectures-for-matching-natural-language-sentences.pdf)]### TABULAR:#### LightGBM  : Light Gradient Boosting#### AutoML Gluon  :  2020, AutoML in Gluon, MxNet using LightGBM, CatBoost#### Auto-Keras  :  2020, Automatic Keras model selection#### All sklearn models :linear_model.ElasticNetlinear_model.ElasticNetCVlinear_model.Larslinear_model.LarsCVlinear_model.Lassolinear_model.LassoCVlinear_model.LassoLarslinear_model.LassoLarsCVlinear_model.LassoLarsIClinear_model.OrthogonalMatchingPursuitlinear_model.OrthogonalMatchingPursuitCVsvm.LinearSVCsvm.LinearSVRsvm.NuSVCsvm.NuSVRsvm.OneClassSVMsvm.SVCsvm.SVRsvm.l1_min_cneighbors.KNeighborsClassifierneighbors.KNeighborsRegressorneighbors.KNeighborsTransformer#### Binary Neural Prediction from tabular data:### VISION:1. Vision Models (pre-trained) :  alexnet: SqueezeNet: AlexNet-level accuracy with 50x fewer parameters and &lt;0.5MB model size[[Link](https://arxiv.org/pdf/1602.07360)]2. densenet121: Adversarial Perturbations Prevail in the Y-Channel of the YCbCr Color Space[[Link](https://arxiv.org/pdf/2003.00883.pdf)]3. densenet169: Classification of TrashNet Dataset Based on Deep Learning Models[[Link](https://ieeexplore.ieee.org/abstract/document/8622212)]4. densenet201: Utilization of DenseNet201 for diagnosis of breast abnormality[[Link](https://link.springer.com/article/10.1007/s00138-019-01042-8)]5. densenet161: Automated classification of histopathology images using transfer learning[[Link](https://doi.org/10.1016/j.artmed.2019.101743)]6. inception_v3: Menfish Classification Based on Inception_V3 Convolutional Neural Network[[Link](https://iopscience.iop.org/article/10.1088/1757-899X/677/5/052099/pdf )]7. resnet18: Leveraging the VTA-TVM Hardware-Software Stack for FPGA Acceleration of 8-bit ResNet-18 Inference[[Link](https://dl.acm.org/doi/pdf/10.1145/3229762.3229766)]8. resnet34: Automated Pavement Crack Segmentation Using Fully Convolutional U-Net with a Pretrained ResNet-34 Encoder[[Link](https://arxiv.org/pdf/2001.01912)]9. resnet50: Extremely Large Minibatch SGD: Training ResNet-50 on ImageNet in 15 Minutes[[Link](https://arxiv.org/pdf/1711.04325)]10. resnet101: Classification of Cervical MR Images using ResNet101[[Link](https://www.ijresm.com/Vol.2_2019/Vol2_Iss6_June19/IJRESM_V2_I6_69.pdf)]11. resnet152: Deep neural networks show an equivalent and often superior performance to dermatologists in onychomycosis diagnosis: Automatic construction of onychomycosis datasets by region-based convolutional deep neural network[[Link](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5774804/pdf/pone.0191493.pdf)]***More resources are available [here](https://github.com/arita37/mlmodels/blob/dev/README_model_list.md)***######################################################################################### â‘  Installation Guide:### (A) Using pre-installed Setup (one click) :[Read-more](https://github.com/arita37/mlmodels/issues/101)### (C) Using Colab :[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_usage.md)### Initialize template and TestsWill copy template, dataset, example to your folder```bashml_models --init  /yourworkingFolder/```##### To test Hyper-parameter search:```bashml_optim```##### To test model fitting```bashml_models```#### Actual test runs[Read-more](https://github.com/arita37/mlmodels/actions)![test_fast_linux](https://github.com/arita37/mlmodels/workflows/test_fast_linux/badge.svg)![test_fast_windows](https://github.com/arita37/mlmodels/workflows/test_fast_windows/badge.svg?branch=dev)![ All model testing (Linux) ](https://github.com/arita37/mlmodels/workflows/code_structure_linux/badge.svg)_______________________________________________________________________________________## Usage in Jupyter/Colab[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_usage.md)_______________________________________________________________________________________## Command Line tools:[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_usage_CLI.md)_______________________________________________________________________________________## Model List[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_model_list.md)_______________________________________________________________________________________## How to add a new model[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_addmodel.md)_______________________________________________________________________________________## Index of functions/methods[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_index_doc.py)_______________________________________________________________________________________### LSTM example in TensorFlow ([Example notebook](mlmodels/example/1_lstm.ipynb))#### Define model and data definitions```python# import libraryimport mlmodelsmodel_uri    = &quot;model_tf.1_lstm.py&quot;model_pars   =  {  &quot;num_layers&quot;: 1,                  &quot;size&quot;: ncol_input, &quot;size_layer&quot;: 128, &quot;output_size&quot;: ncol_output, &quot;timestep&quot;: 4,                }data_pars    =  {&quot;data_path&quot;: &quot;/folder/myfile.csv&quot;  , &quot;data_type&quot;: &quot;pandas&quot; }compute_pars =  { &quot;learning_rate&quot;: 0.001, }out_pars     =  { &quot;path&quot;: &quot;ztest_1lstm/&quot;, &quot;model_path&quot; : &quot;ztest_1lstm/model/&quot;}save_pars = { &quot;path&quot; : &quot;ztest_1lstm/model/&quot; }load_pars = { &quot;path&quot; : &quot;ztest_1lstm/model/&quot; }#### Load Parameters and Trainfrom mlmodels.models import module_loadmodule        =  module_load( model_uri= model_uri )                           # Load file definitionmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instancemodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)#### Inferencemetrics_val   =  module.fit_metrics( model, sess, data_pars, compute_pars, out_pars) # get statsypred         = module.predict(model, sess,  data_pars, compute_pars, out_pars)     # predict pipeline```---### AutoML example in Gluon ([Example notebook](mlmodels/example/gluon_automl.ipynb))```python# import libraryimport mlmodelsimport autogluon as ag#### Define model and data definitionsmodel_uri = &quot;model_gluon.gluon_automl.py&quot;data_pars = {&quot;train&quot;: True, &quot;uri_type&quot;: &quot;amazon_aws&quot;, &quot;dt_name&quot;: &quot;Inc&quot;}model_pars = {&quot;model_type&quot;: &quot;tabular&quot;,              &quot;learning_rate&quot;: ag.space.Real(1e-4, 1e-2, default=5e-4, log=True),              &quot;activation&quot;: ag.space.Categorical(*tuple([&quot;relu&quot;, &quot;softrelu&quot;, &quot;tanh&quot;])),              &quot;layers&quot;: ag.space.Categorical(                          *tuple([[100], [1000], [200, 100], [300, 200, 100]])),              'dropout_prob': ag.space.Real(0.0, 0.5, default=0.1),              'num_boost_round': 10,              'num_leaves': ag.space.Int(lower=26, upper=30, default=36)             }compute_pars = {    &quot;hp_tune&quot;: True,    &quot;num_epochs&quot;: 10,    &quot;time_limits&quot;: 120,    &quot;num_trials&quot;: 5,    &quot;search_strategy&quot;: &quot;skopt&quot;}out_pars = {    &quot;out_path&quot;: &quot;dataset/&quot;}#### Load Parameters and Trainfrom mlmodels.models import module_loadmodule        =  module_load( model_uri= model_uri )                           # Load file definitionmodel         =  module.Model(model_pars=model_pars, compute_pars=compute_pars)             # Create Model instancemodel, sess   =  module.fit(model, data_pars=data_pars, model_pars=model_pars, compute_pars=compute_pars, out_pars=out_pars)      #### Inferenceypred       = module.predict(model, data_pars, compute_pars, out_pars)     # predict pipeline```---### RandomForest example in Scikit-learn ([Example notebook](mlmodels/example/sklearn.ipynb))```# import libraryimport mlmodels#### Define model and data definitionsmodel_uri    = &quot;model_sklearn.sklearn.py&quot;model_pars   = {&quot;model_name&quot;:  &quot;RandomForestClassifier&quot;, &quot;max_depth&quot; : 4 , &quot;random_state&quot;:0}data_pars    = {'mode': 'test', 'path': &quot;../mlmodels/dataset&quot;, 'data_type' : 'pandas' }compute_pars = {'return_pred_not': False}out_pars    = {'path' : &quot;../ztest&quot;}#### Load Parameters and Trainfrom mlmodels.models import module_loadmodule        =  module_load( model_uri= model_uri )                           # Load file definitionmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instancemodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model#### Inferenceypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline```---### TextCNN example in keras ([Example notebook](example/textcnn.ipynb))```python# import libraryimport mlmodels#### Define model and data definitionsmodel_uri    = &quot;model_keras.textcnn.py&quot;data_pars    = {&quot;path&quot; : &quot;../mlmodels/dataset/text/imdb.csv&quot;, &quot;train&quot;: 1, &quot;maxlen&quot;:400, &quot;max_features&quot;: 10}model_pars   = {&quot;maxlen&quot;:400, &quot;max_features&quot;: 10, &quot;embedding_dims&quot;:50}compute_pars = {&quot;engine&quot;: &quot;adam&quot;, &quot;loss&quot;: &quot;binary_crossentropy&quot;, &quot;metrics&quot;: [&quot;accuracy&quot;] ,                        &quot;batch_size&quot;: 32, &quot;epochs&quot;:1, 'return_pred_not':False}out_pars     = {&quot;path&quot;: &quot;ztest/model_keras/textcnn/&quot;}#### Load Parameters and Trainfrom mlmodels.models import module_loadmodule        =  module_load( model_uri= model_uri )                           # Load file definitionmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instancemodule.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model#### Inferencedata_pars['train'] = 0ypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)```---### Using json config file for input ([Example notebook](example/1_lstm_json.ipynb), [JSON file](mlmodels/mlmodels/example/1_lstm.json))#### Import library and functions```python# import libraryimport mlmodels#### Load model and data definitions from jsonfrom mlmodels.models import module_loadfrom mlmodels.util import load_configmodel_uri    = &quot;model_tf.1_lstm.py&quot;module        =  module_load( model_uri= model_uri )                           # Load file definitionmodel_pars, data_pars, compute_pars, out_pars = module.get_params(param_pars={    'choice':'json',    'config_mode':'test',    'data_path':'../mlmodels/example/1_lstm.json'})#### Load parameters and trainmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instancemodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model#### Check inferenceypred       = module.predict(model, sess=sess,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline```---### Using Scikit-learn's SVM for Titanic Problem from json file ([Example notebook](mlmodels/example/sklearn_titanic_svm.ipynb), [JSON file](mlmodels/example/sklearn_titanic_svm.json))#### Import library and functions```python# import libraryimport mlmodels#### Load model and data definitions from jsonfrom mlmodels.models import module_loadfrom mlmodels.util import load_configmodel_uri    = &quot;model_sklearn.sklearn.py&quot;module        =  module_load( model_uri= model_uri )                           # Load file definitionmodel_pars, data_pars, compute_pars, out_pars = module.get_params(param_pars={    'choice':'json',    'config_mode':'test',    'data_path':'../mlmodels/example/sklearn_titanic_svm.json'})#### Load Parameters and Trainmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instancemodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model#### Inferenceypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipelineypred#### Check metricsimport pandas as pdfrom sklearn.metrics import roc_auc_scorey = pd.read_csv('../mlmodels/dataset/tabular/titanic_train_preprocessed.csv')['Survived'].valuesroc_auc_score(y, ypred)```---### Using Scikit-learn's Random Forest for Titanic Problem from json file ([Example notebook](mlmodels/example/sklearn_titanic_randomForest.ipynb), [JSON file](mlmodels/example/sklearn_titanic_randomForest.json))#### Import library and functions```python# import libraryimport mlmodels#### Load model and data definitions from jsonfrom mlmodels.models import module_loadfrom mlmodels.util import load_configmodel_uri    = &quot;model_sklearn.sklearn.py&quot;module        =  module_load( model_uri= model_uri )                           # Load file definitionmodel_pars, data_pars, compute_pars, out_pars = module.get_params(param_pars={    'choice':'json',    'config_mode':'test',    'data_path':'../mlmodels/example/sklearn_titanic_randomForest.json'})#### Load Parameters and Trainmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instancemodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model#### Inferenceypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipelineypred#### Check metricsimport pandas as pdfrom sklearn.metrics import roc_auc_scorey = pd.read_csv('../mlmodels/dataset/tabular/titanic_train_preprocessed.csv')['Survived'].valuesroc_auc_score(y, ypred)```---### Using Autogluon for Titanic Problem from json file ([Example notebook](mlmodels/example/gluon_automl_titanic.ipynb), [JSON file](mlmodels/example/gluon_automl.json))#### Import library and functions```python# import libraryimport mlmodels#### Load model and data definitions from jsonfrom mlmodels.models import module_loadfrom mlmodels.util import load_configmodel_uri    = &quot;model_gluon.gluon_automl.py&quot;module        =  module_load( model_uri= model_uri )                           # Load file definitionmodel_pars, data_pars, compute_pars, out_pars = module.get_params(    choice='json',    config_mode= 'test',    data_path= '../mlmodels/example/gluon_automl.json')#### Load Parameters and Trainmodel         =  module.Model(model_pars=model_pars, compute_pars=compute_pars)             # Create Model instancemodel   =  module.fit(model, model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the modelmodel.model.fit_summary()#### Check inferenceypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline#### Check metricsmodel.model.model_performanceimport pandas as pdfrom sklearn.metrics import roc_auc_scorey = pd.read_csv('../mlmodels/dataset/tabular/titanic_train_preprocessed.csv')['Survived'].valuesroc_auc_score(y, ypred)```------### Using hyper-params (optuna) for Titanic Problem from json file ([Example notebook](mlmodels/example/sklearn_titanic_randomForest_example2.ipynb), [JSON file](mlmodels/example/hyper_titanic_randomForest.json))#### Import library and functions```python# import libraryfrom mlmodels.models import module_loadfrom mlmodels.optim import optimfrom mlmodels.util import params_json_load#### Load model and data definitions from json###  hypermodel_pars, model_pars, ....model_uri   = &quot;model_sklearn.sklearn.py&quot;config_path = path_norm( 'example/hyper_titanic_randomForest.json'  )config_mode = &quot;test&quot;  ### test/prod#### Model Parametershypermodel_pars, model_pars, data_pars, compute_pars, out_pars = params_json_load(config_path, config_mode= config_mode)print( hypermodel_pars, model_pars, data_pars, compute_pars, out_pars)module            =  module_load( model_uri= model_uri )                      model_pars_update = optim(    model_uri       = model_uri,    hypermodel_pars = hypermodel_pars,    model_pars      = model_pars,    data_pars       = data_pars,    compute_pars    = compute_pars,    out_pars        = out_pars)#### Load Parameters and Trainmodel         =  module.Model(model_pars=model_pars_update, data_pars=data_pars, compute_pars=compute_pars)ymodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)#### Check inferenceypred         = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipelineypred#### Check metricsimport pandas as pdfrom sklearn.metrics import roc_auc_scorey = pd.read_csv( path_norm('dataset/tabular/titanic_train_preprocessed.csv') )y = y['Survived'].valuesroc_auc_score(y, ypred)```---### Using LightGBM for Titanic Problem from json file ([Example notebook](mlmodels/example/model_lightgbm.ipynb), [JSON file](mlmodels/example/lightgbm_titanic.json))#### Import library and functions```python# import libraryimport mlmodelsfrom mlmodels.models import module_loadfrom mlmodels.util import path_norm_dict, path_normimport json#### Load model and data definitions from json# Model definationmodel_uri    = &quot;model_sklearn.model_lightgbm.py&quot;module        =  module_load( model_uri= model_uri)# Path to JSONdata_path = '../dataset/json/lightgbm_titanic.json'  # Model Parameterspars = json.load(open( data_path , mode='r'))for key, pdict in  pars.items() :  globals()[key] = path_norm_dict( pdict   )   ###Normalize path#### Load Parameters and Trainmodel = module.Model(model_pars, data_pars, compute_pars) # create model instancemodel, session = module.fit(model, data_pars, compute_pars, out_pars) # fit model#### Check inferenceypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # get predictionsypred#### Check metricsmetrics_val = module.fit_metrics(model, data_pars, compute_pars, out_pars)metrics_val ```---### Using Vision CNN RESNET18 for MNIST dataset  ([Example notebook](mlmodels/example/model_restnet18.ipynb), [JSON file](mlmodels/model_tch/torchhub_cnn.json))```python# import libraryimport mlmodelsfrom mlmodels.models import module_loadfrom mlmodels.util import path_norm_dict, path_norm, params_json_loadimport json#### Model URI and Config JSONmodel_uri   = &quot;model_tch.torchhub.py&quot;config_path = path_norm( 'model_tch/torchhub_cnn.json'  )config_mode = &quot;test&quot;  ### test/prod#### Model Parametershypermodel_pars, model_pars, data_pars, compute_pars, out_pars = params_json_load(config_path, config_mode= config_mode)print( hypermodel_pars, model_pars, data_pars, compute_pars, out_pars)#### Setup Model module         = module_load( model_uri)model          = module.Model(model_pars, data_pars, compute_pars) `#### Fitmodel, session = module.fit(model, data_pars, compute_pars, out_pars)           #### fit modelmetrics_val    = module.fit_metrics(model, data_pars, compute_pars, out_pars)   #### Check fit metricsprint(metrics_val)#### Inferenceypred          = module.predict(model, session, data_pars, compute_pars, out_pars)   print(ypred)```---### Using ARMDN Time Series   ([Example notebook](mlmodels/example/model_timeseries_armdn.ipynb), [JSON file](mlmodels/model_keras/armdn.json))```python# import libraryimport mlmodelsfrom mlmodels.models import module_loadfrom mlmodels.util import path_norm_dict, path_norm, params_json_loadimport json#### Model URI and Config JSONmodel_uri   = &quot;model_keras.ardmn.py&quot;config_path = path_norm( 'model_keras/ardmn.json'  )config_mode = &quot;test&quot;  ### test/prod#### Model Parametershypermodel_pars, model_pars, data_pars, compute_pars, out_pars = params_json_load(config_path, config_mode= config_mode)print( hypermodel_pars, model_pars, data_pars, compute_pars, out_pars)#### Setup Model module         = module_load( model_uri)model          = module.Model(model_pars, data_pars, compute_pars) `#### Fitmodel, session = module.fit(model, data_pars, compute_pars, out_pars)           #### fit modelmetrics_val    = module.fit_metrics(model, data_pars, compute_pars, out_pars)   #### Check fit metricsprint(metrics_val)#### Inferenceypred          = module.predict(model, session, data_pars, compute_pars, out_pars)   print(ypred)#### Save/Loadmodule.save(model, save_pars ={ 'path': out_pars['path'] +&quot;/model/&quot;})model2 = module.load(load_pars ={ 'path': out_pars['path'] +&quot;/model/&quot;})```---</longdescription>
</pkgmetadata>