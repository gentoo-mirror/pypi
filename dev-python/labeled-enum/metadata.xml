<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>labeled-enums=============A Django-friendly iterable Enum type with labels.Example-------.. code-block:: python    &gt;&gt;&gt; from django.utils.translation import gettext_lazy as _    &gt;&gt;&gt; from lenum import LabeledEnum    &gt;&gt;&gt; class STATE_CHOICES(LabeledEnum):    ...     NEW = 0    ...     IN_PROGRESS = 1    ...     REVIEW = 2, _('In Review')    ...    &gt;&gt;&gt;    &gt;&gt;&gt; STATE_CHOICES.NEW    0    &gt;&gt;&gt; STATE_CHOICES.IN_PROGRESS    1    &gt;&gt;&gt; STATE_CHOICES[2]    'In Review'    &gt;&gt;&gt; list(STATE_CHOICES)    [(0, 'New'), (1, 'In Progress'), (2, 'In Review')]    &gt;&gt;&gt; STATE_CHOICES.for_label('In Progress')    1    ```    &gt;&gt;&gt; STATE_CHOICES.names    ('NEW', 'IN_PROGRESS', 'REVIEW')Usage in Django:.. code-block:: python    class STATUS(LabeledEnum):        CLOSED = 0        NEW = 1        PENDING = 2, 'Process Pending'        FAILED = -1, 'Processing Failed'    class MyModel(models.Model):        # django migrations can have trouble resolving imports if we define the        # class within the class, so we bind this here for convenience.        STATUS = STATUS        status = models.IntegerField(choices=STATUS, default=STATUS.NEW)Want translations?.. code-block:: python    from django.utils.translation import gettext_lazy as _    class STATUS(LabeledEnum, label_wrapper=_):        CLOSED = 0        NEW = 1        PENDING = 2, 'Process Pending'        FAILED = -1, 'Processing Failed'All label values (including auto-generated ones) will have `label_wrapper`applied first.Installation------------.. code-block::    pip install labeled-enum</longdescription>
</pkgmetadata>