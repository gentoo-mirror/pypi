<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/davidmarble/virtualenvwrapper-win/actions/workflows/ci-cd.yml/badge.svg   :target: https://github.com/davidmarble/virtualenvwrapper-win/actions/workflows/ci-cd.yml.. image:: https://pepy.tech/badge/virtualenvwrapper-win/month   :target: https://pepy.tech/project/virtualenvwrapper-winvirtualenvwrapper-win=====================This is a port of Doug Hellmann's `virtualenvwrapper &lt;http://www.doughellmann.com/projects/virtualenvwrapper/&gt;`_to Windows batch scripts. The idea behind virtualenvwrapper is to ease usage ofIan Bicking's `virtualenv &lt;http://pypi.python.org/pypi/virtualenv&gt;`_, a toolfor creating isolated Python virtual environments, each with their own librariesand site-packages.These scripts should work on any version of Windows (Windows XP, Windows Vista, Windows 7/8/10).However, they only work in the **regular command prompt**. They **will not work in Powershell.** There are other virtualenvwrapper projects out there for Powershell.Installation------------**For Windows only**To use these scripts from any directory, make sure the ``Scripts`` subdirectory of Python is in your PATH. For example, if python is installed in ``C:\Python27\``, you should make sure ``C:\Python27\Scripts`` is in your PATH.To install, run one of the following::    # using pip    pip install virtualenvwrapper-win    # using easy_install    easy_install virtualenvwrapper-win    # from source    git clone git://github.com/davidmarble/virtualenvwrapper-win.git    cd virtualenvwrapper-win    python setup.py install   # or pip install .**WORKON_HOME (Optional)**~~~~~~~~~~~~~~~~~~~~~~~~~~Add an environment variable WORKON_HOME to specify the path to store environments.By default, this is ``%USERPROFILE%\Envs``.**pywin (Optional)**~~~~~~~~~~~~~~~~~~~~**pywin** python version switcher (not included)If you use several versions of python, you can switch between themusing a separate project `pywin&lt;https://github.com/davidmarble/pywin&gt;`_. It's a lightweightpython 2.5-3.3 launcher and switcher I wrote for the Windowscommand line and MSYS/MINGW32. It's similar to the `py.exelauncher/switcher available in python 3.3&lt;http://docs.python.org/3/using/windows.html#launcher&gt;`_, butwritten with basic Windows batch scripts and a shell script forMSYS/MINGW32 support. I use bash and command line shell tools from`msysgit &lt;http://msysgit.github.com/&gt;`_, based on MSYS/MINGW32, todo most of my python development on Windows.Main Commands-------------``mkvirtualenv [mkvirtualenv-options] [virtualenv-options] &lt;name&gt;``    Create a new virtualenv environment named *&lt;name&gt;*.  The environment will    be created in WORKON_HOME.    ``mkvirtualenv`` options:      -h                    Print help text.      -a project_path       Associate existing path as project directory      -i package            Install package in new environment. This option                            can be repeated to install more than one package.      -r requirements_file  requirements_file is passed to                            pip install -r requirements_file    any other options are passed on to the ``virtualenv`` command.                    For recent versions of ``virtualenv``, the ``-p`` / ``--python``     can take version numbers instead of the full path to the interpreter,    e.g. ``mkvirtualenv -p3.5 &lt;name&gt;`` (assuming you have a Python 3.5.x    interpreter installed).``lsvirtualenv``    List all of the enviornments stored in WORKON_HOME.``rmvirtualenv &lt;name&gt;``    Remove the environment *&lt;name&gt;*.``workon [&lt;name&gt;]``    If *&lt;name&gt;* is specified, activate the environment named *&lt;name&gt;* (change    the working virtualenv to *&lt;name&gt;*). If a project directory has been    defined, we will change into it. If no argument is specified, list the    available environments. One can pass additional option -c after    virtualenv name to cd to virtualenv directory if no projectdir is set.``deactivate``    Deactivate the working virtualenv and switch back to the default system    Python.``add2virtualenv &lt;full or relative path&gt;``    If a virtualenv environment is active, appends *&lt;path&gt;* to    ``virtualenv_path_extensions.pth`` inside the environment's site-packages,    which effectively adds *&lt;path&gt;* to the environment's PYTHONPATH.    If a virtualenv environment is not active, appends *&lt;path&gt;* to    ``virtualenv_path_extensions.pth`` inside the default Python's    site-packages. If *&lt;path&gt;* doesn't exist, it will be created.Convenience Commands--------------------``cdproject``    If a virtualenv environment is active and a projectdir has been defined,    change the current working directory to active virtualenv's project directory.    ``cd-`` will return you to the last directory you were in before calling    ``cdproject``.``cdsitepackages``    If a virtualenv environment is active, change the current working    directory to the active virtualenv's site-packages directory. If    a virtualenv environment is not active, change the current working    directory to the default Python's site-packages directory. ``cd-``    will return you to the last directory you were in before calling    ``cdsitepackages``.``cdvirtualenv``    If a virtualenv environment is active, change the current working    directory to the active virtualenv base directory. If a virtualenv    environment is not active, change the current working directory to    the base directory of the default Python. ``cd-`` will return you    to the last directory you were in before calling ``cdvirtualenv``.``lssitepackages``    If a virtualenv environment is active, list that environment's    site-packages. If a virtualenv environment is not active, list the    default Python's site-packages. Output includes a basic listing of    the site-packages directory, the contents of easy-install.pth,    and the contents of virtualenv_path_extensions.pth (used by    ``add2virtualenv``).``mkproject``    If the environment variable PROJECT_HOME is set, create a new project     directory in PROJECT_HOME and a virtualenv in WORKON_HOME.  The project path    will automatically be associated with the virtualenv on creation.``setprojectdir &lt;full or relative path&gt;``    If a virtualenv environment is active, define *&lt;path&gt;* as project    directory containing the source code.  This allows the use of ``cdproject``    to change the working directory. In addition, the directory will be    added to the environment using ``add2virtualenv``. If *&lt;path&gt;* doesn't    exist, it will be created.``toggleglobalsitepackages``    If a virtualenv environment is active, toggle between having the    global site-packages in the PYTHONPATH or just the virtualenv's    site-packages.``whereis &lt;file&gt;``    A script included for convenience. Returns the locations (on `%PATH%`)    that contain an executable `file`. You can call    ``whereis python`` to find all executables starting with ``python`` or    ``whereis python.exe`` for an exact match.``virtualenvwrapper``    Print a list of commands and their descriptions as basic help output.    (added in v.1.2.4)Hooks-----To run some commands after ``mkvirtualenv`` you can use hooks. Firstyou need to define ``VIRTUALENVWRAPPER_HOOK_DIR`` variable. If it isset ``mkvirtualenv`` will run ``postmkvirtualenv.bat`` script fromthat directory... please add any noteable changes here as part of a PRChanges=======Version &lt;next&gt;--------------Version 1.2.5-------------* Bugfix release.Version 1.2.4-------------* Fixed problems with spaces in workon, rmvirtualenv, mkproject, mkvirtualenv -a  when the virtualenv name or project directory contained spaces (#89). @thebjorn* Fixed problems with spaces etc. in add2virtualenv and setprojectdir (#92, #93) @thebjorn* Added mkproject convenience script (@thehug0naut)* folder_delete.bat is deprecated and will be removed in a future version.  You should be using `rmdir %dirname% /s /q` instead.Version 1.2.3-------------* Fixed a problem when the WORKON_HOME folder contained spaces.* Fixed a bug where cmd.com couldn't pass the Python executable to virtualenv  if the path included the drive letter.* Improved publish pipeline.Version 1.2.2-------------*   -a, -i, and -r options are now available (@thebjorn)*   added rudimentary test-suite (@thebjorn)*   fix ``rmvirtualenv`` command which didn't delete directory when    e.g. pip left extra files (@rcutmore)Version 1.2.1-------------*   scripts are now left in Scripts directory (@adamc55)Version 1.2.0 (16-03-2015)--------------------------Thanks to Christian Long (@christianmlong)*   ``mkvirtualenv`` hooks</longdescription>
</pkgmetadata>