<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mindset Requests![pyver](https://img.shields.io/badge/python-3.6%2B-blue)[![codecov](https://codecov.io/bb/grupolinsferrao/pypck-lins-mindset-requests/branch/master/graph/badge.svg?token=0xs0SKv68m)](https://codecov.io/bb/grupolinsferrao/pypck-lins-mindset-requests)Pacote para consumo dos endpoints da [Api Mindset](http://apis-sandbox.lojaspompeia.com.br/mindset/v1).### Variáveis de ambienteEste projeto depende das variáveis de ambiente abaixo.```pythonAPI_INTEGRACAO_URL=&quot;http://api-mindset-url&quot;API_INTEGRACAO_USERNAME=&quot;api-mindset-username&quot;API_INTEGRACAO_PASSWORD=&quot;api-mindset-password&quot;DATA_PADRAO_INTEGRACAO=&quot;2020-04-01T00:00:00.000&quot;REQUEST_TIMEOUT=&quot;5&quot; # Inteiro. Define o tempo máximo de espera pela resposta (opcional). Se não definida o padrão são 5 segundos.```# ServicoMódulo responsável pelas operações no endpoint **servico**```python&gt;&gt;&gt; from mindset.api_requests import Servico&gt;&gt;&gt; servico = Servico('novo_servico')```## servico.get_or_create(service_params={})**service_params:dict (opcional)**Exceto pelo **filtrar**, todos os métodos da classe dependem da chamada anterior do **.get_or_create()**Caso o `service_params` não seja informado, e o serviço não exista o mesmo será criado com os seguintes dados:```pythonself.service_params = {  'servico': self.nome_servico, # 'novo_servico'  'hora_agendamento': '01:00',  'forcar_execucao': True,  'ativo': True,  'tipo': 'entrada',}```Se informado os dados acima serão atualizados e o serviço criado.```python&gt;&gt;&gt; response, json = servico.get_or_create()  # &lt;-- REQUIREMENT: Chamar a função get or create.&gt;&gt;&gt; json&gt;&gt;&gt; {'_id': '5fad3131ede2d05c6f5ba65d', 'servico': 'teste', 'hora_agendamento': '01:00:00', 'forcar_execucao': True, 'ativo': True, 'tipo': 'entrada'}```Essa função retorna uma tupla `(response, json)` pois quando o servico existe, o json retorna em uma lista e quando é criado retorna um json. Internamente, o método trabalha para retornar o json.## servico.filtrar(filter_params={})Método estático**filter_params:dict (opcional)**```python&gt;&gt;&gt; len(Servico.filtrar().json()) # Sem o filter params, retorna todos os servicos&gt;&gt;&gt; 25&gt;&gt;&gt; response = servico.filtrar({'forcar_execucao': False, 'servico': 'minmaxitem-GANG'})&gt;&gt;&gt; response.json()&gt;&gt;&gt; [{'_id': '5fabf3cfd96a08315416997b',  'servico': 'minmaxitem-GANG',  'hora_agendamento': '01:00:00',  'forcar_execucao': False,  'ativo': True,  'tipo': 'entrada'}]```Para mais informações dos filtros, consulte [Mindset Servicos](http://apis-sandbox.lojaspompeia.com.br/mindset/v1#!/servicos/servicos_list).## servico.get_id()Retorna o id do servico```python&gt;&gt;&gt; servico.get_id()&gt;&gt;&gt; '5fac5958d96a0831541699ca'```## servico.forcar_execucao()Retorna se a execução forçada do servico é True ou False```python&gt;&gt;&gt; servico.forcar_execucao()&gt;&gt;&gt; True```## servico.inicia_integracao()Define o status do servico como &quot;E&quot; (execução).```python&gt;&gt;&gt; response = servico.inicia_integracao()&gt;&gt;&gt; response.json()&gt;&gt;&gt; {'data': 'Status do Serviço definido como &quot;E&quot;!'}```Retorna 400 se o status já está definido como &quot;E&quot;```python&gt;&gt;&gt; response = servico.inicia_integracao()&gt;&gt;&gt; response.json()&gt;&gt;&gt; {'code': 400, 'error_code': 'invalid', 'message': 'Entrada inválida.', 'data': {'general': ['Processo de Integração já está em execução!']}}```## servico.sucesso_integracao()Define o status do servico como &quot;S&quot; (sucesso).```python&gt;&gt;&gt; response = servico.sucesso_integracao()&gt;&gt;&gt; response.json()&gt;&gt;&gt; {'data': 'Status do Serviço definido como &quot;S&quot;!'}```Retorna 400 se o servico não está setado como &quot;E&quot;.```python&gt;&gt;&gt; response = servico.sucesso_integracao()&gt;&gt;&gt; response.json()&gt;&gt;&gt; {'code': 400, 'error_code': 'invalid', 'message': 'Entrada inválida.', 'data': {'general': ['Processo de Integração não está em execução!']}}```## servico.falha_integracao()Define o status do servico como &quot;F&quot; (falha).```python&gt;&gt;&gt; response = servico.falha_integracao()&gt;&gt;&gt; response.json()&gt;&gt;&gt; {'data': 'Status do Serviço definido como &quot;F&quot;!'}```Retorna 400 se o servico não está setado como &quot;E&quot;.```python&gt;&gt;&gt; response = servico.falha_integracao()&gt;&gt;&gt; response.json()&gt;&gt;&gt; {'code': 400, 'error_code': 'invalid', 'message': 'Entrada inválida.', 'data': {'general': ['Processo de Integração não está em execução!']}}```## servico.get_data_ultima_integracao(filter_params={})Busca, trata e retorna a data da última integração do serviço ou o valor da variável de ambiente `DATA_PADRAO_INTEGRACAO`.**filter_params:dict** (opcional)Este método possui esses valores de busca padrão:```python{  '_id_servico': self.id, # busca id do servico pela função get_id()  'status': 'S',  'fields': 'inicio_execucao',  'sort': '-inicio_execucao',  'per_page': 1,}```Caso queira modificar, informe os parâmetros no filter_params e os dados acima serão atualizados.```python&gt;&gt;&gt; query_params.get_data_ultima_integracao()&gt;&gt;&gt; '2020-11-12T00:00:00'```## servico.update(json)Atualiza dados do servico.```python&gt;&gt;&gt; response, json = servico.get_or_create()&gt;&gt;&gt; json&gt;&gt;&gt; {'_id': '5fac5958d96a0831541699ca', 'servico': 'teste', 'hora_agendamento': '01:00:00', 'forcar_execucao': False, 'ativo': True, 'tipo': 'entrada'}&gt;&gt;&gt; response = servico.update({'forcar_execucao': True, 'hora_agendamento': '02:00:00'})&gt;&gt;&gt; response.json()&gt;&gt;&gt; {'_id': '5fac5958d96a0831541699ca', 'servico': 'teste', 'hora_agendamento': '02:00:00', 'forcar_execucao': True, 'ativo': True, 'tipo': 'entrada'}```## servico.delete()Remove servico.```python&gt;&gt;&gt; response = servico.delete()&gt;&gt;&gt; response.json()&gt;&gt;&gt; {'data': 'Serviço deletado com sucesso.'}```## servico.status()Retorna todos os status do serviço```python&gt;&gt;&gt; response = servico.status()&gt;&gt;&gt; response.json()&gt;&gt;&gt; [{'_id': '5fad8dc2ca8d874caa8154e0',  '_id_servico': '5fad8dc1ca8d874caa8154de',  'inicio_execucao': '2020-11-12T19:32:18.312000',  'fim_execucao': '2020-11-12T19:32:18.506000',  'status': 'S'}]```## servico.em_execucao()Retorna se o servico está definido como &quot;em execução&quot;.```python&gt;&gt;&gt; servico.em_execucao()&gt;&gt;&gt; False&gt;&gt;&gt; servico.inicia_integracao()&gt;&gt;&gt; &lt;Response [200]&gt;&gt;&gt;&gt; servico.em_execucao()&gt;&gt;&gt; True```## servico.executado()Retorna se o servico foi ou não executado.```python&gt;&gt;&gt; servico.executado()&gt;&gt;&gt; False```## servico.pode_integrar()Retorna se o servico pode ser integrado.```python&gt;&gt;&gt; servico.pode_integrar()&gt;&gt;&gt; False```# ControleMódulo responsável pelas operações no endpoint **controle**.Os métodos desta classe são estáticos.## Controle.get(filter_params={})**filter_params:dict** (opcional)```python&gt;&gt;&gt; len(Controle.get().json()) # Retorna todos os controles&gt;&gt;&gt; 25``````python&gt;&gt;&gt; response = Controle.get({'per_page': 2}) # Filtragem por limite&gt;&gt;&gt; response.json()&gt;&gt;&gt; [{'servico': 'produtos-POMPEIA',  '_id': '5edfdfc57a6f51710fa6ef90',  '_id_servico': '5edfdfc57a6f51710fa6ef8f',  'executado': False}, {'servico': 'pedidos_gang-GANG',  '_id': '5edfecdb1421779a4f49cf57',  '_id_servico': '5edfecdb1421779a4f49cf56',  'executado': False}]```Para mais informações dos filtros, consulte [Mindset Controle](http://apis.lojaspompeia.com.br/mindset/v1#!/controle/controle_list).## Controle.limpar(id_servico, executado)**id_servico:string****executado:bool**```python&gt;&gt;&gt; Controle.limpar(servico.get_id(), False)&gt;&gt;&gt; &lt;Response [200]&gt;```# StatusMódulo responsável pelas operações no endpoint **status**.Os métodos desta classe são estáticos.## Status.get()Retorna todos os status, ou filtrados caso o `filter_param` seja informado.**filter_params:dict** (opcional)```python&gt;&gt;&gt; len(Status.get().json()) # Retorna todos os status sem o filter params&gt;&gt;&gt; 25&gt;&gt;&gt; response = Status.get({'_id_servico': servico.get_id()})&gt;&gt;&gt; response.json()&gt;&gt;&gt; [{'_id': '5fad5131d96a083154169a00',  '_id_servico': '5fad5130d96a0831541699fe',  'inicio_execucao': '2020-11-12T15:13:53.658000',  'fim_execucao': '2020-11-12T15:13:53.846000',  'status': 'S'}]```Para mais informações dos filtros, consulte [Mindset Status](http://apis.lojaspompeia.com.br/mindset/v1#!/status/status_list).## Status.atuais():Retorna todos os status atuais registrados.```python&gt;&gt;&gt; len(Status.atuais().json())&gt;&gt;&gt; 26&gt;&gt;&gt; Status.atuais().json()[0]&gt;&gt;&gt; {'_id': '5f2dbe80b4d3c2d250dcc06a', '_id_servico': '5edfdfc57a6f51710fa6ef8f', 'inicio_execucao': '2020-08-07T20:50:08.518000', 'fim_execucao': '2020-08-07T20:51:19.542000', 'status': 'S', 'servico': {'_id': '5edfdfc57a6f51710fa6ef8f',  'servico': 'produtos-POMPEIA',  'hora_agendamento': '01:00:00',  'forcar_execucao': False,  'ativo': True,  'tipo': 'saida'}}```</longdescription>
</pkgmetadata>