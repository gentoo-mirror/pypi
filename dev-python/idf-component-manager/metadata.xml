<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IDF Component ManagerThe IDF Component manager is a tool that downloads dependencies for any [ESP-IDF](https://www.espressif.com/en/products/sdks/esp-idf) CMake project. It makes sure that the right versions of all components required for a successful build of your project are in place. The download happens automatically during a run of CMake. It can source components either from [the component registry](https://components.espressif.com/) or from a git repository.**A list of components can be found at https://components.espressif.com/**## [Official documentation](https://docs.espressif.com/projects/idf-component-manager/en/latest/)## Disabling the Component ManagerThe component manager can be explicitly disabled by setting `IDF_COMPONENT_MANAGER` environment variable to `0`.## Using with a projectYou can add `idf_component.yml` manifest files with the list of dependencies to any component in your project.IDF Component Manager will download dependencies automatically during the project build process.When CMake configures the project (e.g. `idf.py reconfigure`) component manager does a few things:- Processes `idf_component.yml` manifests for every component in the project- Creates a `dependencies.lock` file in the root of the project with a full list of dependencies- Downloads all dependencies to the `managed_components` directoryThe component manager won't try to regenerate `dependencies.lock` or download any components if manifests, lock file, and content of `managed_component` directory weren't modified since the last successful build.## Defining dependencies in the manifestAll dependencies are defined in the manifest file.```yamldependencies:  # Required IDF version  idf: &quot;&gt;=4.1&quot;  # For components maintained by Espressif only name can be used.  # Same as `espressif/component`  component:    version: &quot;~2.0.0&quot;  # Or in a shorter form  component2: &quot;&gt;=1.0.0&quot;  # For 3rd party components :  username/component:    version: &quot;~1.0.0&quot;    # For transient dependencies `public` flag can be set.    public: true  anotheruser/component: &quot;&lt;3.2.20&quot;  # For components hosted on non-default registry:  company_user/component:    version: &quot;~1.0.0&quot;    service_url: &quot;https://componentregistry.company.com&quot;  # For components in git repository:  test_component:    path: test_component    git: ssh://git@gitlab.com/user/components.git  # For test projects during component development  # components can be used from a local directory  # with relative or absolute path  some_local_component:    path: ../../projects/component  # For optional dependencies  optional_component:    version: &quot;~1.0.0&quot;    rules: # will add &quot;optional_component&quot; only when all if clauses are True      - if: &quot;idf_version &gt;=3.3,&lt;5.0&quot; # supports all SimpleSpec grammars (https://python-semanticversion.readthedocs.io/en/latest/reference.html#semantic_version.SimpleSpec)      - if: &quot;target in [esp32, esp32c3]&quot; # supports boolean operator ==, !=, in, not in.  # For example of the component  namespace/component_with_example:    version: &quot;~1.0.0&quot; # if there is no `override_path` field, use component from registry    override_path: &quot;../../&quot; # use component in a local directory, not from registry  namespace/no_required_component:    version: &quot;*&quot;    require: no # Download component but don't add it as a requirement  namespace/pre_release_component:    version: &quot;*&quot;    pre_release: true # Allow downloading of pre-release versions```## Component metadata cachingBy default, information about available versions of components not cached. If you make many requests to the registry from one machine, you can enable caching by setting `IDF_COMPONENT_API_CACHE_EXPIRATION_MINUTES` environment variable to the number of minutes to cache the data.## External linksYou can add links to the `idf_component.yml` file to the root of the manifest:```yamlurl: &quot;https://example.com/homepage&quot; # URL of the component homepagerepository: &quot;https://gitexample.com/test_project&quot; # URL of the public repository with component source code, i.e GitHub, GitLab, etc.documentation: &quot;https://example.com/documentation&quot; # URL of the component documentationissues: &quot;https://git.example.com/test_project/tracker&quot; # URL of the issue trackerdiscussion: &quot;https://discord.example.com/test_project&quot; # URL of the component discussion, i.e. Discord, Gitter, forum, etc.```A link should be a correct HTTP(S) URL like `https://example.com/path` except the `repository` field,it is expected to be a valid [Git remote](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes) URL.## Add examples to the componentTo add examples to your component, place them in the `examples` directory inside your component.Examples are discovered recursively in subdirectories at this path.A directory with `CMakeLists.txt` that registers a project is considered as an example.## Custom example pathsYou can specify custom example paths for uploading them to the component registry.For that, add `examples` field to the root of the manifest:```yamlexamples:  - path: ../some/path  - path: ../some/other_path```## Environment variables| Variable                                    | Default value (or example for required) | Required? | Description                                                                                     || ------------------------------------------- | --------------------------------------- | --------- | ----------------------------------------------------------------------------------------------- || IDF_COMPONENT_API_TOKEN                     |                                         | no        | API token to access the component registry                                                      || IDF_COMPONENT_REGISTRY_URL                  | https://components.espressif.com/       | no        | URL of the default component registry                                                           || IDF_COMPONENT_STORAGE_URL                   | https://components-file.espressif.com/  | no        | URL of the default file storage server                                                          || IDF_COMPONENT_REGISTRY_PROFILE              | default                                 | no        | Profile in the config file to use for component registry                                        || IDF_COMPONENT_API_CACHE_EXPIRATION_MINUTES  | 0                                       | no        | API Cache expiration time in minutes                                                            || IDF_COMPONENT_CACHE_PATH                    | \* Depends on OS                        | no        | Cache directory for component manager                                                           || COMPONENT_MANAGER_JOB_TIMEOUT               | 300                                     | no        | Timeout in seconds to wait for component processing                                             || IDF_COMPONENT_OVERWRITE_MANAGED_COMPONENTS  | 0                                       | no        | Overwrite files in the managed_component directory, even if they have been modified by the user || IGNORE_UNKNOWN_FILES_FOR_MANAGED_COMPONENTS | 0                                       | no        | Ignore unknown files in managed_components directory                                            |## Contributions GuideWe welcome all contributions to the Component Manager project.You can contribute by fixing bugs, adding features, adding documentation, or reporting an [issue](https://github.com/espressif/idf-component-manager/issues). We accept contributions via [GitHub Pull Requests](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).Before reporting an issue, make sure you've searched for a similar one that was already created. If you are reporting a new issue, please follow the Issue Template.## Installing a development version of the component managerYou can install the development version of the component manager from the main branch of this repository:**On Linux/macOS:**Go to the directory with your ESP-IDF installation and run:```bash# activate ESP-IDF environmentsource ./export.sh # or . ./export.fish, if you use fish shell# remove old version of the component managerpython -m pip uninstall -y idf-component-manager# install the development version (from the main branch)python -m pip install git+https://github.com/espressif/idf-component-manager.git@main```**On Windows:**Run `ESP-IDF PowerShell Environment` or `ESP-IDF Command Prompt (cmd.exe)` from the Start menu and run the following command:```powershell# remove old version of the component managerpython -m pip uninstall -y idf-component-manager# install the development version (from the main branch)python -m pip install git+https://github.com/espressif/idf-component-manager.git@main```## Resources- The Component manager [Documentation](https://docs.espressif.com/projects/idf-component-manager/en/latest/)- The Python Package Index project page https://pypi.org/project/idf-component-manager/- The Component Manager section in the [ESP-IDF Programming Guide](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/tools/idf-component-manager.html)</longdescription>
</pkgmetadata>