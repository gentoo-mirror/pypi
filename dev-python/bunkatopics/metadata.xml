<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI - Python](https://img.shields.io/badge/python-v3.9+-blue.svg)](https://pypi.org/project/bertopic/)[![PyPI - PyPi](https://img.shields.io/pypi/v/bunkatopics)](https://pypi.org/project/bunkatopics/)# Bunkatopics&lt;img src=&quot;images/logo.png&quot; width=&quot;35%&quot; height=&quot;35%&quot; align=&quot;right&quot; /&gt;Bunkatopics is a Topic Modeling Visualisation Method that leverages Transformers from HuggingFace through langchain. It is built with the same philosophy as [BERTopic](https://github.com/MaartenGr/BERTopic) but goes deeper in the visualization to help users grasp quickly and intuitively the content of thousands of text.It aslo allows a supervided visual representation by letting the user create continnums with natural language.## InstallationFirst, create a new virtual environment using pyenv```bashpyenv virtualenv 3.9 bunkatopics_env```Activate the environment```bashpyenv activate bunkatopics_env```Then Install the Bunkatopics package:```bashpip install bunkatopics```Install the spacy tokenizer model for english:```bashpython -m spacy download en_core_web_sm```## Getting Started| Name  | Link  ||---|---|| Visual Topic Modeling With Bunkatopics  | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1DtPrI82TYepWLoc4RwuQnOqMJb0eWT_t?usp=sharing)  |## Quick StartWe start by extracting topics from the well-known 20 newsgroups dataset containing English documents:```pythonfrom bunkatopics import bunkatopicsfrom sklearn.datasets import fetch_20newsgroupsimport random full_docs = fetch_20newsgroups(subset='all',  remove=('headers', 'footers', 'quotes'))['data']full_docs_random = random.sample(full_docs, 1000)```You can the load any model from langchain. Some of them might be large, please check the langchain [documentation](https://python.langchain.com/en/latest/reference/modules/embeddings.html)If you want to start with a small model:```pythonfrom langchain.embeddings import HuggingFaceEmbeddingsembedding_model = HuggingFaceEmbeddings(model_name=&quot;all-MiniLM-L6-v2&quot;)bunka = Bunka(model_hf=embedding_model)bunka.fit(full_docs)df_topics = bunka.get_topics(n_clusters = 20)```If you want a bigger LLM:```pythonfrom langchain.embeddings import HuggingFaceInstructEmbeddingsembedding_model = HuggingFaceInstructEmbeddings(model_name=&quot;hkunlp/instructor-large&quot;)bunka = Bunka(model_hf=embedding_model)bunka.fit(full_docs)df_topics = bunka.get_topics(n_clusters = 20)```Then, we can visualize```pythontopic_fig = bunka.visualize_topics( width=800, height=800)topic_fig...```The map display the different texts on a 2-Dimensional unsupervised scale. Every region of the map is a topic described by its most specific terms.&lt;img src=&quot;images/newsmap.png&quot; width=&quot;35%&quot; height=&quot;35%&quot; align=&quot;center&quot; /&gt;```pythonbourdieu_fig = bunka.visualize_bourdieu(x_left_words=[&quot;past&quot;],                                        x_right_words=[&quot;future&quot;, &quot;futuristic&quot;],                                        y_top_words=[&quot;politics&quot;, &quot;Government&quot;],                                        y_bottom_words=[&quot;cultural phenomenons&quot;],                                        height=2000,                                        width=2000)```  The power of this visualisation is to constrain the axis by creating continuums and looking how the data distribute over these continuums. The inspiration is coming from the French sociologist Bourdieu, who projected items on [2 Dimensional maps](https://www.politika.io/en/notice/multiple-correspondence-analysis).&lt;img src=&quot;images/bourdieu.png&quot; width=&quot;35%&quot; height=&quot;35%&quot; align=&quot;center&quot; /&gt;## FunctionalityHere are all the things you can do with Bunkatopics### CommonBelow, you will find an overview of common functions in BERTopic.| Method | Code  ||-----------------------|---|| Fit the model    |  `.fit(docs)` || Fit the model and get the topics  |  `.fit_transform(docs)` || Acces the topics   | `.get_topics(n_clusters=10)`  || Access the top documents per topic    |  `.get_top_documents()` || Access the distribution of topics   |  `.get_topic_repartition()` || Visualize the topics on a Map |  `.visualize_topics()` || Visualize the topics on Natural Language Supervised axis | `.visualize_bourdieu()` || Access the Coherence of Topics |  `.get_topic_coherence()` || Get the closest documents to your search | `.search('politics')` |### AttributesYou can access several attributes| Attribute | Description ||------------------------|---------------------------------------------------------------------------------------------|| `.docs`               | The documents stores as a Document pydantic model || `.topics` | The Topics stored as a Topic pydantic model. |</longdescription>
</pkgmetadata>