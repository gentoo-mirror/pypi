<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>http-parser-----------HTTP request/response parser for Python compatible with Python 2.x(&gt;=2.7), Python 3 and Pypy. If possible a C parser based onhttp-parser_ from Ryan Dahl will be used.http-parser is under the MIT license.Project url: https://github.com/benoitc/http-parser/.. image::    https://secure.travis-ci.org/benoitc/http-parser.png?branch=master    :alt: Build Status    :target: https://travis-ci.org/benoitc/http-parserRequirements:-------------- Python 2.7 or sup. Pypy latest version.- Cython if you need to rebuild the C code (Not needed for Pypy)Installation------------::    $ pip install http-parserOr install from source::    $ git clone git://github.com/benoitc/http-parser.git    $ cd http-parser &amp;&amp; python setup.py installNote: if you get an error on MacOSX try to install with the followingarguments:    $ env ARCHFLAGS=&quot;-arch i386 -arch x86_64&quot; python setup.py installUsage-----http-parser provide you **parser.HttpParser** low-level parser in C thatyou can access in your python program and **http.HttpStream** providinghigher-level access to a readable,sequential io.RawIOBase object.To help you in your day work, http-parser provides you 3 kind of readersin the reader module: IterReader to read iterables, StringReader toreads strings and StringIO objects, SocketReader to read sockets orobjects with the same api (recv_into needed). You can of course use anyio.RawIOBase object.Example of HttpStream+++++++++++++++++++++ex::    #!/usr/bin/env python    import socket    from http_parser.http import HttpStream    from http_parser.reader import SocketReader    def main():        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        try:            s.connect(('gunicorn.org', 80))            s.send(&quot;GET / HTTP/1.1\r\nHost: gunicorn.org\r\n\r\n&quot;)            r = SocketReader(s)            p = HttpStream(r)            print p.headers()            print p.body_file().read()        finally:            s.close()    if __name__ == &quot;__main__&quot;:        main()Example of HttpParser:++++++++++++++++++++++::    #!/usr/bin/env python    import socket    # try to import C parser then fallback in pure python parser.    try:        from http_parser.parser import HttpParser    except ImportError:        from http_parser.pyparser import HttpParser    def main():        p = HttpParser()        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        body = []        try:            s.connect(('gunicorn.org', 80))            s.send(&quot;GET / HTTP/1.1\r\nHost: gunicorn.org\r\n\r\n&quot;)            while True:                data = s.recv(1024)                if not data:                    break                recved = len(data)                nparsed = p.execute(data, recved)                assert nparsed == recved                if p.is_headers_complete():                    print p.get_headers()                if p.is_partial_body():                    body.append(p.recv_body())                if p.is_message_complete():                    break            print &quot;&quot;.join(body)        finally:            s.close()    if __name__ == &quot;__main__&quot;:        main()You can find more docs in the code (or use a doc generator).Copyright---------2011-2020 (c) Beno√Æt Chesneau &lt;benoitc@e-engura.org&gt;.. http-parser_ https://github.com/ry/http-parser</longdescription>
</pkgmetadata>