<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-docx-replace---This library was built on top of [python-docx](https://python-docx.readthedocs.io/en/latest/index.html) and the main purpose is to replace words inside a document _**without losing the format**_.There is also a functionality that allows defining blocks in the Word document and set if they will be removed or not.## Replacing a word - docx_replaceYou can define a key in your Word document and set the value to be replaced. This program requires the following key format: `${key_name}`Let's explain the process behind the library:### First way, losing formattingOne of the ways to replace a key inside a document is by doing something like the code below. Can you do this? YES! But you are going to lose all the paragraph formatting.```pythonkey = &quot;${name}&quot;value = &quot;Ivan&quot;for p in get_all_paragraphs(doc):    if key in p.text:        p.text = p.text.replace(key, value)```### Second way, not all keysUsing the python-docx library, each paragraph has a couple of `runs` which is a proxy for objects wrapping `&lt;w:r&gt;` element. We are going to tell more about it later and you can see more details [in the python-docx docs](https://python-docx.readthedocs.io/en/latest/api/text.html#run-objects).You can try replacing the text inside the runs and if it works, then your job is done:```pythonkey = &quot;${name}&quot;value = &quot;Ivan&quot;for p in get_all_paragraphs(doc):    for run in p.runs:        if key in run.text:            run.text = run.text.replace(key, value)```The problem here is that the key can be broken in more than one run, and then you won't be able to replace it, for example:It's going to work:```bashWord Paragraph: &quot;Hello ${name}, welcome!&quot;Run1: &quot;Hello ${name}, w&quot;Run2: &quot;elcome!&quot;```It's NOT going to work:```bashWord Paragraph: &quot;Hello ${name}, welcome!&quot;Run1: &quot;Hello ${na&quot;Run2: &quot;me}, welcome!&quot;```You are probably wondering, why does it break paragraph text this way? What are the purpose of the `run`?Imagine a Word document with this format:![word](word.png)Each `run` holds their own format! That's the goal for the `runs`.Considering this and using this library, what would be the format after parsing the key? Highlighted yellow? Bold and underline? Red with another font? All of them?&gt; The final format will be the format that is present **in the $ character**. All of the others key's characters and their formats will be discarded. In the example above, the final format will be **highlighted yellow**.### SolutionThe solution adopted is quite simple. First we try to replace in the simplest way, as in the previous example. If it's work, great, all done! If it's not, we build a table of indexes:```bashkey = &quot;${name}&quot;value = &quot;Ivan&quot;Word Paragraph: &quot;Hello ${name}, welcome!&quot;Run1: &quot;Hello ${na&quot;Run2: &quot;me}, welcome!&quot;Word Paragraph: 'H' 'e' 'l' 'l' 'o' ' ' '$' '{' 'n' 'a' 'm' 'e' '}' ',' ' ' 'w' 'e' 'l' 'c' 'o' 'm' 'e' '!'Char Indexes:    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22Run Index:       0   0   0   0   0   0   0   0   0   0   1   1   1   1   1   1   1   1   1   1   1   1   1Run Char Index:  0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   10  11  12Here we have the char indexes, the index of each run by char index and the run char index by run. A little confusing, right? With this table we can process and replace all the keys, getting the result:# REPLACE PROCESS:Char Index 6 = p.runs[0].text = &quot;Ivan&quot;  # replace '$' by the valueChar Index 7 = p.runs[0].text = &quot;&quot;  # clean all the others partsChar Index 8 = p.runs[0].text = &quot;&quot;Char Index 9 = p.runs[0].text = &quot;&quot;Char Index 10 = p.runs[1].text = &quot;&quot;Char Index 11 = p.runs[1].text = &quot;&quot;Char Index 12 = p.runs[1].text = &quot;&quot;```After that, we are going to have:```bashWord Paragraph: 'H' 'e' 'l' 'l' 'o' ' ' 'Ivan' '' '' '' '' '' '' ',' ' ' 'w' 'e' 'l' 'c' 'o' 'm' 'e' '!'Indexes:         0   1   2   3   4   5   6      7  8  9 10 11 12  13  14  15  16  17  18  19  20  21  22Run Index:       0   0   0   0   0   0   0      0  0  0 1  1  1   1   1   1   1   1   1   1   1   1   1Run Char Index:  0   1   2   3   4   5   6      7  8  9 0  1  2   3   4   5   6   7   8   9   10  11  12```All done, now you Word document is fully replaced keeping all the format.## Get document keys - docx_get_keysYou can get all the keys present in the Word document by calling the function `docx_get_keys`:```pythonkeys = docx_get_keys(doc) # Let's suppose the Word document has the keys: ${name} and ${phone}print(keys)  # ['name', 'phone']```## Replace blocks - docx_blocksYou can define a block in your Word document and set if it is going to be removed or not. The format required for key blocks are exactly like tags `HTML`, as following:- Initial of block: `&lt;signature&gt;`- End of the block: `&lt;/signature&gt;`Let's say you define two blocks like this:Word document:```bashContractDetais of the contract&lt;signature&gt;Please, put your signature here: _________________&lt;/signature&gt;```### Setting signature to be removed```pythondocx_blocks(doc, signature=True)```Final Word document:```bashContractDetais of the contractPlease, put your signature here: _________________```### Setting signature to not be removed```pythondocx_blocks(doc, signature=False)```Final Word document:```bashContractDetais of the contract```### docx_blocks limitationIf there are **tables** inside a block that is set to be removed, these tables are not going to be removed. Tables are different objects in python-docx library and they are not present in the paragraph object.You can use the function `docx_remove_table` to remove tables from the Word document by their index.```pythondocx_remove_table(doc, 0)```&gt; The table index works exactly like any indexing property. It means if you remove an index, it will affect the other indexes. For example, if you want to remove the first two tables, you can't do like this:```pythondocx_remove_table(doc, 0)docx_remove_table(doc, 1)  # it will raise an index error```&gt; You should instead do like this:```pythondocx_remove_table(doc, 0)docx_remove_table(doc, 0)```## How to install### Via PyPI```bashpip3 install python-docx-replace```## How to use```pythonfrom python_docx_replace import docx_replace# get your document using python-docxdoc = Document(&quot;document.docx&quot;)# call the replace function with your key value pairsdocx_replace(doc, name=&quot;Ivan&quot;, phone=&quot;+55123456789&quot;)# call the blocks function with your setsdocx_blocks(doc, signature=True, table_of_contents=False)# remove the first table in the Word documentdocx_remove_table(doc, 0)# do whatever you want after that, usually save the documentdoc.save(&quot;replaced.docx&quot;)```&gt; TIP: If you want to call with a defined `dict` variable, you can leverage the `**` syntax from python:```pythonmy_dict = {    &quot;name&quot;: &quot;Ivan&quot;,    &quot;phone&quot;: &quot;+55123456789&quot;}docx_replace(doc, **my_dict)```</longdescription>
</pkgmetadata>