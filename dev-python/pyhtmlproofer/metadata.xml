<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI](https://github.com/rehanhaider/pyhtmlproofer/actions/workflows/ci.yml/badge.svg)](https://github.com/rehanhaider/pyhtmlproofer/actions)[![PyPI Version](https://img.shields.io/pypi/v/pyhtmlproofer?color=blue)](https://pypi.org/project/pyhtmlproofer/)![License](https://img.shields.io/github/license/rehanhaider/pyhtmlproofer?color=blue)# pyhtmlprooferCheck for website and static HTML pages for link rot.## Features**pyhtmlproofer can be used on**1. Static HTML pages (typically generated by an SSG). You can specify either files or directories to be checked.2. Webpages, you can specify a URL/link to be checked.**pyhtmlproofer at the moment does the following**:1. Checks for broken internal links in HTML files2. Checks if external links in HTML or website link are valid3. Check for scripts / stylesheets in HTML files4. Check for images in HTML filesYou can read more details below in [What's Tested?](#whats-tested) section.### Roadmap**The follower features are under development**:1. Check for images and alt-text in HTML files2. Check Favicons3. Check optimal SEO meta tags4. Caching results5. Config file## Installation**Install pyhtmlproofer with pip**:```pip install pyhtmlproofer```## What's tested?**You can configure pyhtmlproofer to check**:- a file- a directory or list of directories- a URL / Link### Links / Hyperlinks`a`, `link` **elements: pyhtmlproofer checks**-- If the internal links are valid- If the internal references (`#in-page-links`) are valid- If the external links are valid### Images`img` **elements: pyhtmlproofer checks** -- if the internal image references are valid- if the external image references are valid### Scripts`script` **elements: pyhtmlproofer checks** -- If the internal script references are valid- If the external script references are reachable## Usage**a) To check a file**:```pythonimport pyhtmlproofer as prooferfile = &quot;path/to/file1.html&quot;proofer.file(file).check()```**b) To check a directories**:```pythonimport pyhtmlproofer as prooferdirectory_paths = [&quot;path/to/1/file.html&quot;, &quot;path/to/2/file.html&quot;]proofer.directories(directory_paths).check()```**c) To validate URL(s):**```pythonimport pyhtmlproofer as prooferlinks = [&quot;https://example.com&quot;, &quot;https://cloudbytes.dev&quot;]proofer.links(links).check()```## CLIThere is also a CLI that can be used:```bash$ pyhtmlproofer check -F &lt;file_name&gt;```## Available Config Options```pythonPROOFER_DEFAULTS = {    &quot;assume_extension&quot;: &quot;.html&quot;,    &quot;directory_index_file&quot;: &quot;index.html&quot;,    &quot;disable_external&quot;: False,    &quot;ignore_files&quot;: [],    &quot;ignore_urls&quot;: [],    &quot;enforce_https&quot;: True,    &quot;extensions&quot;: [&quot;.html&quot;],    &quot;log_level&quot;: &quot;ERROR&quot;,    &quot;report_to_file&quot;: True,    &quot;report_filename&quot;: &quot;proofer_report&quot;,}```You can override the default configuration options by passing a dictionary of options.```pythonimport pyhtmlproofer as prooferoptions = {&quot;log_level&quot;: &quot;ERROR&quot;, &quot;disable_external&quot;: True}directory_paths = [&quot;path/to/1/file.html&quot;, &quot;path/to/2/file.html&quot;]proofer.directories(directory_paths, , options=options).check()```## CreditsThe inspiration was by Ruby based [HTMLProofer](https://github.com/gjtorikian/html-proofer) and lack of Python based alternatives. Although, [pyhtmlproofer](https://github.com/rehanhaider/pyhtmlproofer) is not a Python rewrite, instead it focuses on solving problems that I encountered while maintaining [CloudBytes/Dev&gt;](https://cloudbytes.dev) website.</longdescription>
</pkgmetadata>