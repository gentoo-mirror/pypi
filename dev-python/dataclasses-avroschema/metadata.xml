<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dataclasses Avro Schema GeneratorGenerate [avro schemas](https://avro.apache.org/docs/1.8.2/spec.html) from python dataclasses. [Code generation](https://marcosschroh.github.io/dataclasses-avroschema/model_generator/) from avro schemas. [Serialize/Deserialize](https://marcosschroh.github.io/dataclasses-avroschema/serialization/) python instances with avro schemas[![Tests](https://github.com/marcosschroh/dataclasses-avroschema/actions/workflows/tests.yaml/badge.svg)](https://github.com/marcosschroh/dataclasses-avroschema/actions/workflows/tests.yaml)[![GitHub license](https://img.shields.io/github/license/marcosschroh/dataclasses-avroschema.svg)](https://github.com/marcosschroh/dataclasses-avroschema/blob/master/LICENSE)[![codecov](https://codecov.io/gh/marcosschroh/dataclasses-avroschema/branch/master/graph/badge.svg)](https://codecov.io/gh/marcosschroh/dataclasses-avroschema)![python version](https://img.shields.io/badge/python-3.8%2B-yellowgreen)## Requirements`python 3.8+`## Installationwith `pip` or `poetry`:`pip install dataclasses-avroschema` or `poetry install`### Extras- [pydantic](https://docs.pydantic.dev/): `pip install 'dataclasses-avroschema[pydantic]'` or `poetry install --extras &quot;pydantic&quot;`- [faust-streaming](https://github.com/faust-streaming/faust): `pip install 'dataclasses-avroschema[faust]'` or `poetry install --extras &quot;faust&quot;`- [faker](https://github.com/joke2k/faker): `pip install 'dataclasses-avroschema[faker]'` or `poetry install --extras &quot;faker&quot;`*Note*: You can install all extra dependencies with `pip install dataclasses-avroschema[faust, pydantic, faker]` or `poetry install --extras &quot;pydantic faust faker&quot;`### CLITo add `avro schemas cli` install [dc-avro](https://marcosschroh.github.io/dc-avro/)`pip install 'dataclasses-avroschema[cli]'` or `poetry install --with cli`## Documentationhttps://marcosschroh.github.io/dataclasses-avroschema/## Usage### Generating the avro schema```pythonfrom dataclasses import dataclassimport enumimport typingfrom dataclasses_avroschema import AvroModel, typesclass FavoriteColor(enum.Enum):    BLUE = &quot;BLUE&quot;    YELLOW = &quot;YELLOW&quot;    GREEN = &quot;GREEN&quot;@dataclassclass User(AvroModel):    &quot;An User&quot;    name: str    age: int    pets: typing.List[str]    accounts: typing.Dict[str, int]    favorite_colors: FavoriteColor    country: str = &quot;Argentina&quot;    address: str = None    class Meta:        namespace = &quot;User.v1&quot;        aliases = [&quot;user-v1&quot;, &quot;super user&quot;]User.avro_schema()'{    &quot;type&quot;: &quot;record&quot;,    &quot;name&quot;: &quot;User&quot;,    &quot;doc&quot;: &quot;An User&quot;,    &quot;namespace&quot;: &quot;User.v1&quot;,    &quot;aliases&quot;: [&quot;user-v1&quot;, &quot;super user&quot;],    &quot;fields&quot;: [        {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;age&quot;, &quot;type&quot;: &quot;long&quot;},        {&quot;name&quot;: &quot;pets&quot;, &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;accounts&quot;, &quot;type&quot;: &quot;map&quot;, &quot;values&quot;: &quot;long&quot;},        {&quot;name&quot;: &quot;favorite_color&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;enum&quot;, &quot;name&quot;: &quot;FavoriteColor&quot;, &quot;symbols&quot;: [&quot;Blue&quot;, &quot;Yellow&quot;, &quot;Green&quot;]}}        {&quot;name&quot;: &quot;country&quot;, &quot;type&quot;: &quot;string&quot;, &quot;default&quot;: &quot;Argentina&quot;},        {&quot;name&quot;: &quot;address&quot;, &quot;type&quot;: [&quot;null&quot;, &quot;string&quot;], &quot;default&quot;: null}    ]}'User.avro_schema_to_python(){    &quot;type&quot;: &quot;record&quot;,    &quot;name&quot;: &quot;User&quot;,    &quot;doc&quot;: &quot;An User&quot;,    &quot;namespace&quot;: &quot;User.v1&quot;,    &quot;aliases&quot;: [&quot;user-v1&quot;, &quot;super user&quot;],    &quot;fields&quot;: [        {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;age&quot;, &quot;type&quot;: &quot;long&quot;},        {&quot;name&quot;: &quot;pets&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;array&quot;, &quot;items&quot;: &quot;string&quot;, &quot;name&quot;: &quot;pet&quot;}},        {&quot;name&quot;: &quot;accounts&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;map&quot;, &quot;values&quot;: &quot;long&quot;, &quot;name&quot;: &quot;account&quot;}},        {&quot;name&quot;: &quot;favorite_colors&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;enum&quot;, &quot;name&quot;: &quot;FavoriteColor&quot;, &quot;symbols&quot;: [&quot;BLUE&quot;, &quot;YELLOW&quot;, &quot;GREEN&quot;]}},        {&quot;name&quot;: &quot;country&quot;, &quot;type&quot;: &quot;string&quot;, &quot;default&quot;: &quot;Argentina&quot;},        {&quot;name&quot;: &quot;address&quot;, &quot;type&quot;: [&quot;null&quot;, &quot;string&quot;], &quot;default&quot;: None}    ],}```### Serialization to avro or avro-json and json payloadFor serialization is neccesary to use python class/dataclasses instance```pythonfrom dataclasses import dataclassimport typingfrom dataclasses_avroschema import AvroModel@dataclassclass Address(AvroModel):    &quot;An Address&quot;    street: str    street_number: int@dataclassclass User(AvroModel):    &quot;User with multiple Address&quot;    name: str    age: int    addresses: typing.List[Address]address_data = {    &quot;street&quot;: &quot;test&quot;,    &quot;street_number&quot;: 10,}# create an Address instanceaddress = Address(**address_data)data_user = {    &quot;name&quot;: &quot;john&quot;,    &quot;age&quot;: 20,    &quot;addresses&quot;: [address],}# create an User instanceuser = User(**data_user)user.serialize()# &gt;&gt;&gt; b&quot;\x08john(\x02\x08test\x14\x00&quot;user.serialize(serialization_type=&quot;avro-json&quot;)# &gt;&gt;&gt; b'{&quot;name&quot;: &quot;john&quot;, &quot;age&quot;: 20, &quot;addresses&quot;: [{&quot;street&quot;: &quot;test&quot;, &quot;street_number&quot;: 10}]}'# Get the json from the instanceuser.to_json()# &gt;&gt;&gt; '{&quot;name&quot;: &quot;john&quot;, &quot;age&quot;: 20, &quot;addresses&quot;: [{&quot;street&quot;: &quot;test&quot;, &quot;street_number&quot;: 10}]}'# Get a python dictuser.to_dict()# &gt;&gt;&gt; {&quot;name&quot;: &quot;john&quot;, &quot;age&quot;: 20, &quot;addresses&quot;: [{&quot;street&quot;: &quot;test&quot;, &quot;street_number&quot;: 10}]}```### DeserializationDeserialization could take place with an instance dataclass or the dataclass itself. Can return the dict representation or a new class instance```pythonimport typingimport dataclassesfrom dataclasses_avroschema import AvroModel@dataclasses.dataclassclass Address(AvroModel):    &quot;An Address&quot;    street: str    street_number: int@dataclasses.dataclassclass User(AvroModel):    &quot;User with multiple Address&quot;    name: str    age: int    addresses: typing.List[Address]avro_binary = b&quot;\x08john(\x02\x08test\x14\x00&quot;avro_json_binary = b'{&quot;name&quot;: &quot;john&quot;, &quot;age&quot;: 20, &quot;addresses&quot;: [{&quot;street&quot;: &quot;test&quot;, &quot;street_number&quot;: 10}]}'# return a new class instance!!User.deserialize(avro_binary)# &gt;&gt;&gt;&gt; User(name='john', age=20, addresses=[Address(street='test', street_number=10)])# return a python dictUser.deserialize(avro_binary, create_instance=False)# &gt;&gt;&gt; {&quot;name&quot;: &quot;john&quot;, &quot;age&quot;: 20, &quot;addresses&quot;: [{&quot;street&quot;: &quot;test&quot;, &quot;street_number&quot;: 10}]}# return a new class instance!!User.deserialize(avro_json_binary, serialization_type=&quot;avro-json&quot;)# &gt;&gt;&gt;&gt; User(name='john', age=20, addresses=[Address(street='test', street_number=10)])# return a python dictUser.deserialize(avro_json_binary, serialization_type=&quot;avro-json&quot;, create_instance=False)# &gt;&gt;&gt; {&quot;name&quot;: &quot;john&quot;, &quot;age&quot;: 20, &quot;addresses&quot;: [{&quot;street&quot;: &quot;test&quot;, &quot;street_number&quot;: 10}]}```## Pydantic integrationTo add `dataclasses-avroschema` functionality to `pydantic` you only need to replace `BaseModel` by `AvroBaseModel`:```pythonimport typingimport enumimport dataclassesfrom dataclasses_avroschema.avrodantic import AvroBaseModelfrom pydantic import Fieldclass FavoriteColor(str, enum.Enum):    BLUE = &quot;BLUE&quot;    YELLOW = &quot;YELLOW&quot;    GREEN = &quot;GREEN&quot;@dataclasses.dataclassclass UserAdvance(AvroBaseModel):    name: str    age: int    pets: typing.List[str] = Field(default_factory=lambda: [&quot;dog&quot;, &quot;cat&quot;])    accounts: typing.Dict[str, int] = Field(default_factory=lambda: {&quot;key&quot;: 1})    has_car: bool = False    favorite_colors: FavoriteColor = FavoriteColor.BLUE    country: str = &quot;Argentina&quot;    address: str = None    class Meta:        schema_doc = False# Avro schemaUserAdvance.avro_schema()'{    &quot;type&quot;: &quot;record&quot;,    &quot;name&quot;: &quot;UserAdvance&quot;,    &quot;fields&quot;: [        {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;age&quot;, &quot;type&quot;: &quot;long&quot;},        {&quot;name&quot;: &quot;pets&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;array&quot;, &quot;items&quot;: &quot;string&quot;, &quot;name&quot;: &quot;pet&quot;}, &quot;default&quot;: [&quot;dog&quot;, &quot;cat&quot;]},        {&quot;name&quot;: &quot;accounts&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;map&quot;, &quot;values&quot;: &quot;long&quot;, &quot;name&quot;: &quot;account&quot;}, &quot;default&quot;: {&quot;key&quot;: 1}},        {&quot;name&quot;: &quot;has_car&quot;, &quot;type&quot;: &quot;boolean&quot;, &quot;default&quot;: false},        {&quot;name&quot;: &quot;favorite_colors&quot;, &quot;type&quot;: {&quot;type&quot;: &quot;enum&quot;, &quot;name&quot;: &quot;favorite_color&quot;, &quot;symbols&quot;: [&quot;BLUE&quot;, &quot;YELLOW&quot;, &quot;GREEN&quot;]}, &quot;default&quot;: &quot;BLUE&quot;},        {&quot;name&quot;: &quot;country&quot;, &quot;type&quot;: &quot;string&quot;, &quot;default&quot;: &quot;Argentina&quot;},        {&quot;name&quot;: &quot;address&quot;, &quot;type&quot;: [&quot;null&quot;, &quot;string&quot;], &quot;default&quot;: null}    ]}'# Json schemaUserAdvance.json_schema(){    &quot;title&quot;: &quot;UserAdvance&quot;,    &quot;description&quot;: &quot;UserAdvance(*, name: str, age: int, pets: List[str] = None, ...&quot;,    &quot;type&quot;: &quot;object&quot;,    &quot;properties&quot;: {        &quot;name&quot;: {&quot;title&quot;: &quot;Name&quot;, &quot;type&quot;: &quot;string&quot;},        &quot;age&quot;: {&quot;title&quot;: &quot;Age&quot;, &quot;type&quot;: &quot;integer&quot;},        &quot;pets&quot;: {&quot;title&quot;: &quot;Pets&quot;, &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: {&quot;type&quot;: &quot;string&quot;}},        &quot;accounts&quot;: {&quot;title&quot;: &quot;Accounts&quot;, &quot;type&quot;: &quot;object&quot;, &quot;additionalProperties&quot;: {&quot;type&quot;: &quot;integer&quot;}},        &quot;has_car&quot;: {&quot;title&quot;: &quot;Has Car&quot;, &quot;default&quot;: false, &quot;type&quot;: &quot;boolean&quot;},        &quot;favorite_colors&quot;: {&quot;default&quot;: &quot;BLUE&quot;, &quot;allOf&quot;: [{&quot;$ref&quot;: &quot;#/definitions/FavoriteColor&quot;}]},        &quot;country&quot;: {&quot;title&quot;: &quot;Country&quot;, &quot;default&quot;: &quot;Argentina&quot;, &quot;type&quot;: &quot;string&quot;},        &quot;address&quot;: {&quot;title&quot;: &quot;Address&quot;, &quot;type&quot;: &quot;string&quot;}}, &quot;required&quot;: [&quot;name&quot;, &quot;age&quot;], &quot;definitions&quot;: {&quot;FavoriteColor&quot;: {&quot;title&quot;: &quot;FavoriteColor&quot;, &quot;description&quot;: &quot;An enumeration.&quot;, &quot;enum&quot;: [&quot;BLUE&quot;, &quot;YELLOW&quot;, &quot;GREEN&quot;], &quot;type&quot;: &quot;string&quot;}}}user = UserAdvance(name=&quot;bond&quot;, age=50)# pydanticuser.dict()# &gt;&gt;&gt; {'name': 'bond', 'age': 50, 'pets': ['dog', 'cat'], 'accounts': {'key': 1}, 'has_car': False, 'favorite_colors': &lt;FavoriteColor.BLUE: 'BLUE'&gt;, 'country': 'Argentina', 'address': None}# pydanticuser.json()# &gt;&gt;&gt; '{&quot;name&quot;: &quot;bond&quot;, &quot;age&quot;: 50, &quot;pets&quot;: [&quot;dog&quot;, &quot;cat&quot;], &quot;accounts&quot;: {&quot;key&quot;: 1}, &quot;has_car&quot;: false, &quot;favorite_colors&quot;: &quot;BLUE&quot;, &quot;country&quot;: &quot;Argentina&quot;, &quot;address&quot;: null}'# pydanticuser = UserAdvance(name=&quot;bond&quot;)# ValidationError: 1 validation error for UserAdvance# age# field required (type=value_error.missing)# dataclasses-avroschemaevent = user.serialize()print(event)# &gt;&gt;&gt; b'\x08bondd\x04\x06dog\x06cat\x00\x02\x06key\x02\x00\x00\x00\x12Argentina\x00'UserAdvance.deserialize(data=event)# &gt;&gt;&gt; UserAdvance(name='bond', age=50, pets=['dog', 'cat'], accounts={'key': 1}, has_car=False, favorite_colors=&lt;FavoriteColor.BLUE: 'BLUE'&gt;, country='Argentina', address=None)```## Examples with python streaming drivers (kafka and redis)Under [examples](https://github.com/marcosschroh/dataclasses-avroschema/tree/master/examples) folder you can find 3 differents kafka examples, one with [aiokafka](https://github.com/aio-libs/aiokafka) (`async`) showing the simplest use case when a `AvroModel` instance is serialized and sent it thorught kafka, and the event is consumed.The other two examples are `sync` using the [kafka-python](https://github.com/dpkp/kafka-python) driver, where the `avro-json` serialization and `schema evolution` (`FULL` compatibility) is shown.Also, there are two `redis` examples using `redis streams` with [walrus](https://github.com/coleifer/walrus) and [redisgears-py](https://github.com/RedisGears/redisgears-py)## Factory and fixtures[Dataclasses Avro Schema](https://github.com/marcosschroh/dataclasses-avroschema) also includes a `factory` feature, so you can generate `fast` python instances and use them, for example, to test your data streaming pipelines. Instances can be generated using the `fake` method.*Note*: This feature is not enabled by default and requires you have the `faker` extra installed. You may install it with `pip install 'dataclasses-avroschema[faker]'````pythonimport typingimport dataclassesfrom dataclasses_avroschema import AvroModel@dataclasses.dataclassclass Address(AvroModel):    &quot;An Address&quot;    street: str    street_number: int@dataclasses.dataclassclass User(AvroModel):    &quot;User with multiple Address&quot;    name: str    age: int    addresses: typing.List[Address]Address.fake()# &gt;&gt;&gt;&gt; Address(street='PxZJILDRgbXyhWrrPWxQ', street_number=2067)User.fake()# &gt;&gt;&gt;&gt; User(name='VGSBbOGfSGjkMDnefHIZ', age=8974, addresses=[Address(street='vNpPYgesiHUwwzGcmMiS', street_number=4790)])```## Features* [x] Primitive types: int, long, double, float, boolean, string and null support* [x] Complex types: enum, array, map, fixed, unions and records support* [x] `typing.Annotated` supported* [x] Logical Types: date, time (millis and micro), datetime (millis and micro), uuid support* [X] Schema relations (oneToOne, oneToMany)* [X] Recursive Schemas* [X] Generate Avro Schemas from `faust.Record`* [X] Instance serialization correspondent to `avro schema` generated* [X] Data deserialization. Return python dict or class instance* [X] Generate json from python class instance* [X] Case Schemas* [X] Generate models from `avsc` files* [X] Examples of integration with `kafka` drivers: [aiokafka](https://github.com/aio-libs/aiokafka), [kafka-python](https://github.com/dpkp/kafka-python)* [X] Example of integration  with `redis` drivers: [walrus](https://github.com/coleifer/walrus) and [redisgears-py](https://github.com/RedisGears/redisgears-py)* [X] Factory instances* [X] [Pydantic](https://pydantic-docs.helpmanual.io/) integration## Development[Poetry](https://python-poetry.org/docs/) is needed to install the dependencies and develope locally1. Install dependencies: `poetry install`2. Code linting: `./scripts/format`3. Run tests: `./scripts/test`For commit messages we use [commitizen](https://commitizen-tools.github.io/commitizen/) in order to standardize a way of committing rules</longdescription>
</pkgmetadata>