<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/pyctuator?color=green&amp;style=plastic)](https://pypi.org/project/pyctuator/)[![build](https://github.com/SolarEdgeTech/pyctuator/workflows/build/badge.svg)](https://github.com/SolarEdgeTech/pyctuator/)[![Codecov](https://img.shields.io/codecov/c/github/SolarEdgeTech/pyctuator?style=plastic)](https://codecov.io/gh/SolarEdgeTech/pyctuator)# PyctuatorMonitor Python web apps using [Spring Boot Admin](https://github.com/codecentric/spring-boot-admin). Pyctuator supports **[Flask](https://palletsprojects.com/p/flask/)**, **[FastAPI](https://fastapi.tiangolo.com/)**, **[aiohttp](https://docs.aiohttp.org/)** and **[Tornado](https://www.tornadoweb.org/)**. **Django** support is planned as well.The following video shows a FastAPI web app being monitored and controled using Spring Boot Admin. ![Pyctuator Example](examples/images/Pyctuator_Screencast.gif)The complete example can be found in [Advanced example](examples/Advanced/README.md).## RequirementsPython 3.9+Pyctuator has zero hard dependencies.## InstallingInstall Pyctuator using pip: `pip3 install pyctuator`## Why?Many Java shops use Spring Boot as their main web framework for developingmicroservices. These organizations often use Spring Actuator together with Spring Boot Adminto monitor their microservices' status, gain access to applications' state and configuration, manipulate log levels, etc. While Spring Boot is suitable for many use-cases, it is very common for organizations to also have a couple of Python microservices, as Python is often more suitable for some types of applications. The most common examples are Data Science and Machine Learningapplications.Setting up a proper monitoring tool for these microservices is a complex task, and mightnot be justified for just a few Python microservices in a sea of Java microservices.This is where Pyctuator comes in. It allows you to easily integrate your Pythonmicroservices into your existing Spring Boot Admin deployment.## Main FeaturesPyctuator is a partial Python implementation of the [Spring Actuator API](https://docs.spring.io/spring-boot/docs/2.1.8.RELEASE/actuator-api/html/)  . It currently supports the following Actuator features:* **Application details*** **Metrics**    * Memory usage    * Disk usage     * Custom metrics* **Health monitors**    * Built in MySQL health monitor    * Built in Redis health monitor    * Custom health monitors* **Environment*** **Loggers** - Easily change log levels during runtime* **Log file** - Tail the application's log file* **Thread dump** - See which threads are running* **HTTP traces** - Tail recent HTTP requests, including status codes and latency## QuickstartThe examples below show a minimal integration of **FastAPI**, **Flask** and **aiohttp** applications with **Pyctuator**.After installing Flask/FastAPI/aiohttp and Pyctuator, start by launching a local Spring Boot Admin instance:```shdocker run --rm -p 8080:8080 --add-host=host.docker.internal:host-gateway michayaak/spring-boot-admin:2.2.3-1```Then go to `http://localhost:8080` to get to the web UI.### FlaskThe following example is complete and should run as is.```pythonfrom flask import Flaskfrom pyctuator.pyctuator import Pyctuatorapp_name = &quot;Flask App with Pyctuator&quot;app = Flask(app_name)@app.route(&quot;/&quot;)def hello():    return &quot;Hello World!&quot;Pyctuator(    app,    app_name,    app_url=&quot;http://host.docker.internal:5000&quot;,    pyctuator_endpoint_url=&quot;http://host.docker.internal:5000/pyctuator&quot;,    registration_url=&quot;http://localhost:8080/instances&quot;)app.run(debug=False, port=5000)```The application will automatically register with Spring Boot Admin upon start up.Log in to the Spring Boot Admin UI at `http://localhost:8080` to interact with the application. ### FastAPIThe following example is complete and should run as is.```pythonfrom fastapi import FastAPIfrom uvicorn import Serverfrom uvicorn.config import Configfrom pyctuator.pyctuator import Pyctuatorapp_name = &quot;FastAPI App with Pyctuator&quot;app = FastAPI(title=app_name)@app.get(&quot;/&quot;)def hello():    return &quot;Hello World!&quot;Pyctuator(    app,    &quot;FastAPI Pyctuator&quot;,    app_url=&quot;http://host.docker.internal:8000&quot;,    pyctuator_endpoint_url=&quot;http://host.docker.internal:8000/pyctuator&quot;,    registration_url=&quot;http://localhost:8080/instances&quot;)Server(config=(Config(app=app, loop=&quot;asyncio&quot;))).run()```The application will automatically register with Spring Boot Admin upon start up.Log in to the Spring Boot Admin UI at `http://localhost:8080` to interact with the application. ### aiohttpThe following example is complete and should run as is.```pythonfrom aiohttp import webfrom pyctuator.pyctuator import Pyctuatorapp = web.Application()routes = web.RouteTableDef()@routes.get(&quot;/&quot;)def hello():    return web.Response(text=&quot;Hello World!&quot;)Pyctuator(    app,    &quot;aiohttp Pyctuator&quot;,    app_url=&quot;http://host.docker.internal:8888&quot;,    pyctuator_endpoint_url=&quot;http://host.docker.internal:8888/pyctuator&quot;,    registration_url=&quot;http://localhost:8080/instances&quot;)app.add_routes(routes)web.run_app(app, port=8888)```The application will automatically register with Spring Boot Admin upon start up.Log in to the Spring Boot Admin UI at `http://localhost:8080` to interact with the application.### Registration NotesWhen registering a service in Spring Boot Admin, note that:* **Docker** - If the Spring Boot Admin is running in a container while the managed service is running in the docker-host directly, the `app_url` and `pyctuator_endpoint_url` should use `host.docker.internal` as the url's host so Spring Boot Admin will be able to connect to the monitored service.* **Http Traces** - In order for the &quot;Http Traces&quot; tab to be able to hide requests sent by Spring Boot Admin to the Pyctuator endpoint, `pyctuator_endpoint_url` must be using the same host and port as `app_url`.* **HTTPS** - If Pyctuator is to be registered with Spring Boot Admin using HTTPS and the default SSL context is inappropriate, you can provide your own `ssl.SSLContext` using the `ssl_context` optional parameter of the `Pyctuator` constructor.* **Insecure HTTPS** - If Spring Boot Admin is using HTTPS with self-signed certificate, set the `PYCTUATOR_REGISTRATION_NO_CERT` environment variable so Pyctuator will disable certificate validation when registering (and deregistering).## Advanced ConfigurationThe following sections are intended for advanced users who want to configure advanced Pyctuator features.### Application InfoWhile Pyctuator only needs to know the application's name, we recommend that applications monitored by Spring Boot Admin will show additional build and git details. This becomes handy when scaling out a service to multiple instances by showing the version of each instance.To do so, you can provide additional build and git info using methods of the Pyctuator object:```pythonpyctuator = Pyctuator(...)  # arguments removed for brevitypyctuator.set_build_info(    name=&quot;app&quot;,    version=&quot;1.3.1&quot;,    time=datetime.fromisoformat(&quot;2019-12-21T10:09:54.876091&quot;),)pyctuator.set_git_info(    commit=&quot;7d4fef3&quot;,    time=datetime.fromisoformat(&quot;2019-12-24T14:18:32.123432&quot;),    branch=&quot;origin/master&quot;,)```Once you configure build and git info, you should see them in the Details tab of Spring Boot Admin:![Detailed Build Info](examples/images/Main_Details_BuildInfo.png)### Additional Application InfoIn addition to adding build and git info, Pyctuator allows adding arbitrary application details to the &quot;Info&quot; section in SBA.This is done by initializing the `additional_app_info` parameter with an arbitrary dictionary.For example, you can provide links to your application's metrics:```pythonPyctuator(  app,  &quot;Flask Pyctuator&quot;,  app_url=f&quot;http://172.18.0.1:5000&quot;,  pyctuator_endpoint_url=f&quot;http://172.18.0.1:5000/pyctuator&quot;,  registration_url=f&quot;http://localhost:8080/instances&quot;,  app_description=&quot;Demonstrate Spring Boot Admin Integration with Flask&quot;,  additional_app_info=dict(    serviceLinks=dict(      metrics=&quot;http://xyz/service/metrics&quot;    ),    podLinks=dict(      metrics=[&quot;http://xyz/pod/metrics/memory&quot;, &quot;http://xyz/pod/metrics/cpu&quot;]    )  ))```This will result with the following Info page in SBA:![img.png](examples/images/Additional_App_Info.png)### DB HealthFor services that use SQL database via SQLAlchemy, Pyctuator can easily monitor and expose the connection's health using the DbHealthProvider class as demonstrated below:```pythonengine = create_engine(&quot;mysql+pymysql://root:root@localhost:3306&quot;)pyctuator = Pyctuator(...)  # arguments removed for brevitypyctuator.register_health_provider(DbHealthProvider(engine))```Once you configure the health provider, you should see DB health info in the Details tab of Spring Boot Admin:![DB Health](examples/images/Main_DB_Health.png)### Redis healthIf your service is using Redis, Pyctuator can monitor the connection to Redis by simply initializing a `RedisHealthProvider`:```pythonr = redis.Redis()pyctuator = Pyctuator(...)  # arguments removed for brevitypyctuator.register_health_provider(RedisHealthProvider(r))```### Custom EnvironmentOut of the box, Pyctuator exposes Python's environment variables to Spring Boot Admin.In addition, an application may register an environment provider to provide additional configuration that should be exposed via Spring Boot Admin. When the environment provider is called it should return a dictionary describing the environment. The returned dictionary is exposed to Spring Boot Admin.Since Spring Boot Admin doesn't support hierarchical environment (only a flat key/value mapping), the provided environment is flattened as dot-delimited keys.Pyctuator tries to hide secrets from being exposed to Spring Boot Admin by replacing the values of &quot;suspicious&quot; keys with ***.Suspicious keys are keys that contain the words &quot;secret&quot;, &quot;password&quot; and some forms of &quot;key&quot;.For example, if an application's configuration looks like this:```pythonconfig = {    &quot;a&quot;: &quot;s1&quot;,    &quot;b&quot;: {        &quot;secret&quot;: &quot;ha ha&quot;,        &quot;c&quot;: 625,    },    &quot;d&quot;: {        &quot;e&quot;: True,        &quot;f&quot;: &quot;hello&quot;,        &quot;g&quot;: {            &quot;h&quot;: 123,            &quot;i&quot;: &quot;abcde&quot;        }    }}```An environment provider can be registered like so:```pythonpyctuator.register_environment_provider(&quot;config&quot;, lambda: config)```### Filesystem and Memory MetricsPyctuator can provide filesystem and memory metrics.To enable these metrics, install [psutil](https://github.com/giampaolo/psutil)Note that the `psutil` dependency is **optional** and is only required if you want to enable filesystem and memory monitoring.### LoggersPyctuator leverages Python's builtin `logging` framework and allows controlling log levels at runtime. Note that in order to control uvicorn's log level, you need to provide a logger object when instantiating it. For example:```pythonmyFastAPIServer = Server(    config=Config(        logger=logging.getLogger(&quot;uvi&quot;),         app=app,         loop=&quot;asyncio&quot;    ))```### Spring Boot Admin Using Basic AuthenticationPyctuator supports registration with Spring Boot Admin that requires basic authentications. The credentials are provided when initializing the Pyctuator instance as follows:```python# NOTE: Never include secrets in your code !!!auth = BasicAuth(os.getenv(&quot;sba-username&quot;), os.getenv(&quot;sba-password&quot;))Pyctuator(    app,    &quot;Flask Pyctuator&quot;,    app_url=&quot;http://localhost:5000&quot;,    pyctuator_endpoint_url=f&quot;http://localhost:5000/pyctuator&quot;,    registration_url=f&quot;http://spring-boot-admin:8080/instances&quot;,    registration_auth=auth,)``` ### Protecting Pyctuator with authenticationSince there are numerous standard approaches to protect an API, Pyctuator doesn't explicitly support any of them. Instead, Pyctuator allows to customize its integration with the web-framework.See the example in [fastapi_with_authentication_example_app.py](examples/FastAPI/fastapi_with_authentication_example_app.py).## Full blown examplesThe `examples` folder contains full blown Python projects that are built using [Poetry](https://python-poetry.org/).To run these examples, you'll need to have Spring Boot Admin running in a local docker container. A Spring Boot Admin Docker image is available [here](https://hub.docker.com/r/michayaak/spring-boot-admin).Unless the example includes a docker-compose file, you'll need to start Spring Boot Admin using docker directly:```shdocker run --rm -p 8080:8080 --add-host=host.docker.internal:host-gateway michayaak/spring-boot-admin:2.2.3-1```(the docker image's tag represents the version of Spring Boot Admin, so if you need to use version `2.0.0`, use `michayaak/spring-boot-admin:2.0.0` instead, note it accepts connections on port 8082).The examples include* [FastAPI Example](examples/FastAPI/README.md) - demonstrates integrating Pyctuator with the FastAPI web framework.* [Flask Example](examples/Flask/README.md) - demonstrates integrating Pyctuator with the Flask web framework.* [Advanced Example](examples/Advanced/README.md) - demonstrates configuring and using all the advanced features of Pyctuator.## ContributingTo set up a development environment, make sure you have Python 3.9 or newer installed, and run `make bootstrap`.Use `make check` to run static analysis tools.Use `make test` to run tests.</longdescription>
</pkgmetadata>