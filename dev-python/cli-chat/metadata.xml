<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `cli-chat``cli-chat` is a command-line tool that allows you to have a conversation with ChatGPT from your terminal. ## DocumentationThe documentation for `cli-chat` can be found [here](https://github.com/Tefx/cli-chat).## Installation### Mac`cli-chat` can be installed on Mac using [Homebrew](https://brew.sh/). To install `cli-chat` using Homebrew,simply execute the following command in your terminal:```bashbrew tap tefx/tapbrew install cli-chat```### Other PlatformsTo install `cli-chat`, execute the following command in your terminal:```bashpip install cli-chat```Alternatively, you can clone the repository and install the dependencies using `poetry`. Here are the steps to follow:1. Install [poetry](https://python-poetry.org/docs/#installation).2. Clone the repository.3. Navigate to the repository's root directory.4. Execute `poetry install`.## UsageTo start a conversation with ChatGPT, execute the following command in your terminal:```bashcli-chat```Or, you can start the script in poetry's virtual environment:```bashpoetry run cli-chat```Here are a few things to keep in mind when using `cli-chat`:- Before being able to use the tool, you must obtain an API key by registering for  it [here](https://platform.openai.com/account/api-keys).- To end the conversation, type `thanks`, `thx`, `tq`, or a similar phrase.- You can navigate through your conversation history with the arrow keys.- Common key-bindings and auto-suggestions are supported, thanks  to [prompt_toolkit](https://github.com/prompt-toolkit/python-prompt-toolkit).### Control CommandsYou can use special control commands to modify `cli-chat`'s behavior. These commands should be placed at thebeginning of your question string and should start with a backslash.The supported control commands are listed below:| Command       | Arguments | Tags             | Description                                                                                                                                                    ||---------------|-----------|-----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|| `\no-render`  |           |                 | Prevent the answer from being rendered in markdown.                                                                                                            || `\load-file`  |           |                 | Load a file and use the contents as the remaining part of your question.                                                                                        || `\long`       |           |                 | Accept multi-line inputs from now on. Use &lt;kbd&gt;Meta&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt; or &lt;kbd&gt;ESC&lt;/kbd&gt; followed by &lt;kbd&gt;Enter&lt;/kbd&gt; to finish.                           || `\save`       |           | `append`        | Save the last answer to a file.                                                                                                                                || `\hide-answer`|           |                 | Do not show the answer. **WARNING: Always check the answer first toavoid losing it if you want to save it later.**                                           || `\continue`   | `idx`     |                 | Resume the conversation from a previous answer. `idx` should be a negative number as shown by the `\history` command.                                         || `\forget`     |           |                 | Delete your conversation history.                                                                                                                              || `\history`    |           |                 | Show your entire conversation history.                                                                                                                         |You can combine multiple control commands by separating them with `|`. For instance, `\no-render|load-file` will load afile and prevent the answer from being rendered in markdown.For some commands, additional arguments and tags may be specified by using thesyntax `command(arg1, arg2, ...){tag1, tag2, ..}`. For example, `\save{append}` will append the answer to the fileinstead of overwriting it, while `\continue(-1)` will resume the conversation from the answer with index `-1` in thehistory.### ExampleHere are a few examples of what a conversation with `cli-chat` might look like:1. Show answer in markdown   ![Example 1](./docs/example-1-1.png)   ![Example 2](./docs/example-1-2.png)2. Multi-line input   ![Example 5](./docs/example-2.png)3. Not rendering the answer in markdown, loading a file, and saving the answer to a file   ![Example 3](./docs/example-3.png)4. Check answer history and continue from a previous answer   ![Example 4](./docs/example-4.png)## ConfigurationUse `cli-chat-config` to manage key and input history.## TODO- [ ] Add autocomplete for control commands.- [ ] Add support for searching and using prompts from the [Awesome ChatGPT Prompts](https://github.com/f/awesome-chatgpt-prompts)</longdescription>
</pkgmetadata>