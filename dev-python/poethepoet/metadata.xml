<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Poe the Poet&lt;img alt=&quot;Poe the Poet&quot; src=&quot;./docs/_static/poe_logo_x2000.png&quot; height=&quot;200&quot; width=&quot;200&quot; align=&quot;left&quot;/&gt;[![PyPI version](https://img.shields.io/pypi/pyversions/poethepoet.svg)](https://pypi.org/project/poethepoet/)[![PyPI version](https://img.shields.io/pypi/v/poethepoet.svg)](https://pypi.org/project/poethepoet/)[![PyPI version](https://img.shields.io/pypi/dw/poethepoet.svg)](https://pypi.org/project/poethepoet/)[![PyPI version](https://img.shields.io/pypi/l/ansicolortags.svg)](https://github.com/nat-n/poethepoet/blob/doc/init-sphinx/LICENSE)**A batteries included task runner that works well with [poetry](https://python-poetry.org/).****[Read the docs](https://poethepoet.natn.io/)**&lt;br clear=&quot;both&quot;/&gt;## Features- âœ… Straight forward declaration of project tasks in your pyproject.toml- âœ… Tasks are run in poetry's virtualenv (or another env you specify)- âœ… Shell completion of task names (and global options too for zsh)- âœ… The poe CLI can be used standalone, or as a [plugin for the poetry](https://poethepoet.natn.io/poetry_plugin.html)- âœ… Tasks can be commands, shell scripts, python expressions, or references to python functions- âœ… Concise commands with extra arguments passed to the task `poe [options] task [task_args]`- âœ… Easily define CLI arguments for your tasks- âœ… Tasks can specify and reference environment variables, even without a shell- âœ… Tasks are self documenting, with optional help messages (just run `poe` with no arguments)- âœ… Tasks can be composed into sequences or DAGs- âœ… Works with `.env` files## Quick start1. Install the Poe the Poet via [pipx](https://pypa.github.io/pipx/) or [another method](https://poethepoet.natn.io/installation.html).  ```sh  pipx install poethepoet  ```2. Define some tasks in your **pyproject.toml**  ```toml  [tool.poe.tasks]  test         = &quot;pytest --cov=my_app&quot;                         # a simple command task  serve.script = &quot;my_app.service:run(debug=True)&quot;              # python script based task  tunnel.shell = &quot;ssh -N -L 0.0.0.0:8080:$PROD:8080 $PROD &amp;&quot;   # (posix) shell based task  ```3. Run your tasks via the CLI  ```sh  $ poe test -v tests/unit # extra CLI arguments are appended to the underlying command  Poe =&gt; pytest --cov=my_app  ...  ```If you're using poetry, then poe will automatically use CLI tools and libraries from your poetry managed virtualenv without you having to run `poetry run` or `poetry shell`Poe can also be [used without poetry](https://poethepoet.natn.io/index.html#usage-without-poetry).## ContributingThere's plenty to do, come say hi in the [discussions](https://github.com/nat-n/poethepoet/discussions) or [open an issue](https://github.com/nat-n/poethepoet/issues)! ðŸ‘‹Also check out the [CONTRIBUTING.MD](https://github.com/nat-n/poethepoet/blob/main/.github/CONTRIBUTING.md) ðŸ¤“## License[MIT](https://github.com/nat-n/poethepoet/blob/main/LICENSE)</longdescription>
</pkgmetadata>