<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pydantic-computedA new decorator for pydantic allowing you to define dynamic fields that are computed from other properties.## InstallationInstall the package by running```bashpip install pydantic_computed```## Examples and use cases### A computed integer property```pythonfrom pydantic import BaseModelfrom pydantic_computed import Computed, computedclass ComputedModelInt(BaseModel):    a: int    b: int    c: Computed[int]    @computed('c')    def calculate_c(a: int, b: int, **kwargs):        return a + bmodel = ComputedModelInt(a=1, b=2)print(model.c) # Outputs 3```### Multiple computed properties```pythonfrom pydantic import BaseModelfrom pydantic_computed import Computed, computedclass MultipleComputed(BaseModel):    a: int    b: int    c: Computed[int]    d: Computed[int]    e: Computed[int]    @computed('c')    def calc_c(a: int, b: int, **kwargs):        return a + b    @computed('d')    def calc_d(c: int, **kwargs): # Note that property d uses the value of the computed property c (The order of declaration matters!)        return c * 2model = MultipleComputed(a=1, b=2)print(model.c) # Outputs 3print(model.d) # Outputs 6```Since all properties are passed as **kwargs to calculate_c, we can use the property names for the parameters### Complex typesSuppose you set up a FastAPI application where you have users and orders stored in a database.All Models in the database have an automatically generated id.Now you want to be able to dynamically generate links to those objects.E.g. the user with id=3 is accessible on the endpoint http://my-api/users/3Instead of storing those links in the database you can simply generate them with the computed decorator.example: ```pythonfrom pydantic import BaseModel, Fieldfrom pydantic_computed import Computed, computedclass Link(BaseModel):    href: str    method: strclass SchemaLinked(BaseModel):    id: int    base_url: str    link: Computed[Link]    @computed('link')    def compute_link( id: int, base_url: str, **kwargs):                return Link(href=f'{base_url}/{id}', method='GET')class User(SchemaLinked):    base_url: str = Field('/users', exclude=True)    username: strclass Order(SchemaLinked):    base_url: str = Field('/orders', exclude=True)    user: Useruser = User(id=3, username='exampleuser') user.json()&quot;&quot;&quot;{    id: 3,    username: &quot;exampleuser&quot;,    link: {        href: &quot;/users/3&quot;,        method: &quot;GET&quot;    }}&quot;&quot;&quot;order = Order(id=2, user=user)order.json()&quot;&quot;&quot;{    id: 2,    link: {        href: &quot;/orders/2&quot;,        method: &quot;GET&quot;    },    user: {        id: 3,        username: &quot;exampleuser&quot;,        link: {            href: &quot;/users/3&quot;,            method: &quot;GET&quot;        }    }}&quot;&quot;&quot;``` ### Vector example:```pythonfrom pydantic import BaseModelfrom pydantic_computed import computed, Computedimport mathclass Point(BaseModel):    x: int    y: intclass Vector(BaseModel):    p1: Point    p2: Point    x: Computed[float]    y: Computed[float]    weight: Computed[float]    @computed('x')    def compute_x(p1: Point, p2: Point, **kwargs):        return p2.x - p1.x    @computed('y')    def compute_y(p1: Point, p2: Point, **kwargs):        return p2.y - p1.y    @computed('weight')    def compute_weight(x: float, y: float, **kwargs):        return math.sqrt(x ** 2 + y ** 2)v1 = Vector(p1=Point(x=0,y=0), p2=Point(x=1,y=0))print(v1.weight) # Outputs 1.0v1.p2 = Point(x=2,y=0)print(v1.weight) # Outputs now 2.0 since p2 changed# NOTE: if we would have written v1.p2.x = 2 instead of v1.p2 = Point(x=2, y=0), it would not have worked, because of the way pydantic triggers validations# The computed field only gets updated if one of the fields in the same model changes (in this case it is property p1 of Vector)```</longdescription>
</pkgmetadata>