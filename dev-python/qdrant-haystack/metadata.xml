<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># qdrant-haystackAn integration of [Qdrant](https://qdrant.tech) vector database with [Haystack](https://haystack.deepset.ai/)by [deepset](https://www.deepset.ai).The library finally allows using Qdrant as a document store, and provides an in-place replacementfor any other vector embeddings store. Thus, you should expect any kind of application to be workingsmoothly just by changing the provider to `QdrantDocumentStore`.## Installation`qdrant-haystack` might be installed as any other Python library, using pip or poetry:```bashpip install qdrant-haystack``````bashpoetry add qdrant-haystack```## UsageOnce installed, you can already start using `QdrantDocumentStore` as any other store that supportsembeddings.```pythonfrom qdrant_haystack import QdrantDocumentStoredocument_store = QdrantDocumentStore(    &quot;localhost&quot;,    index=&quot;Document&quot;,    embedding_dim=512,    recreate_index=True,    hnsw_config={&quot;m&quot;: 16, &quot;ef_construct&quot;: 64}  # Optional)```The list of parameters accepted by `QdrantDocumentStore` is complementary to those used in theofficial [Python Qdrant client](https://github.com/qdrant/qdrant_client).### Using local in-memory / disk-persisted modeQdrant Python client, from version 1.1.1, supports local in-memory/disk-persisted mode. That'sa good choice for any test scenarios and quick experiments in which you do not plan to storelots of vectors. In such a case spinning a Docker container might be even not required.The local mode was also implemented in `qdrant-haystack` integration.#### In-memory storageIn case you want to have a transient storage, for example in case of automated tests launchedduring your CI/CD pipeline, using Qdrant Local mode with in-memory storage might be a preferredoption. It might be simply enabled by passing `:memory:` as first parameter, while creating aninstance of `QdrantDocumentStore`.```pythonfrom qdrant_haystack import QdrantDocumentStoredocument_store = QdrantDocumentStore(    &quot;:memory:&quot;,    index=&quot;Document&quot;,    embedding_dim=512,    recreate_index=True,    hnsw_config={&quot;m&quot;: 16, &quot;ef_construct&quot;: 64}  # Optional)```#### On disk storageHowever, if you prefer to keep the vectors between different runs of your application, itmight be better to use on disk storage and pass the path that should be used to persistthe data.```pythonfrom qdrant_haystack import QdrantDocumentStoredocument_store = QdrantDocumentStore(    path=&quot;/home/qdrant/storage_local&quot;,    index=&quot;Document&quot;,    embedding_dim=512,    recreate_index=True,    hnsw_config={&quot;m&quot;: 16, &quot;ef_construct&quot;: 64}  # Optional)```### Connecting to Qdrant Cloud clusterIf you prefer not to manage your own Qdrant instance, [Qdrant Cloud](https://cloud.qdrant.io/)might be a better option.```pythonfrom qdrant_haystack import QdrantDocumentStoredocument_store = QdrantDocumentStore(    &quot;https://YOUR-CLUSTER-URL.aws.cloud.qdrant.io&quot;,    index=&quot;Document&quot;,    api_key=&quot;&lt;&lt; YOUR QDRANT CLOUD API KEY &gt;&gt;&quot;,    embedding_dim=512,    recreate_index=True,)```There is no difference in terms of functionality between local instances and cloud clusters.</longdescription>
</pkgmetadata>