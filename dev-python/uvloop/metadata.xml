<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/github/workflow/status/MagicStack/uvloop/Tests    :target: https://github.com/MagicStack/uvloop/actions?query=workflow%3ATests+branch%3Amaster.. image:: https://img.shields.io/pypi/v/uvloop.svg    :target: https://pypi.python.org/pypi/uvloop.. image:: https://pepy.tech/badge/uvloop    :target: https://pepy.tech/project/uvloop    :alt: PyPI - Downloadsuvloop is a fast, drop-in replacement of the built-in asyncioevent loop.  uvloop is implemented in Cython and uses libuvunder the hood.The project documentation can be found`here &lt;http://uvloop.readthedocs.org/&gt;`_.  Please also check out the`wiki &lt;https://github.com/MagicStack/uvloop/wiki&gt;`_.Performance-----------uvloop makes asyncio 2-4x faster... image:: https://raw.githubusercontent.com/MagicStack/uvloop/master/performance.png    :target: http://magic.io/blog/uvloop-blazing-fast-python-networking/The above chart shows the performance of an echo server with differentmessage sizes.  The *sockets* benchmark uses ``loop.sock_recv()`` and``loop.sock_sendall()`` methods; the *streams* benchmark uses asynciohigh-level streams, created by the ``asyncio.start_server()`` function;and the *protocol* benchmark uses ``loop.create_server()`` with a simpleecho protocol.  Read more about uvloop in a`blog post &lt;http://magic.io/blog/uvloop-blazing-fast-python-networking/&gt;`_about it.Installation------------uvloop requires Python 3.7 or greater and is available on PyPI.Use pip to install it::    $ pip install uvloopNote that it is highly recommended to **upgrade pip before** installinguvloop with::    $ pip install -U pipUsing uvloop------------As of uvloop 0.18, the preferred way of using it is via the``uvloop.run()`` helper function:.. code:: python    import uvloop    async def main():        # Main entry-point.        ...    uvloop.run(main())``uvloop.run()`` works by simply configuring ``asyncio.run()``to use uvloop, passing all of the arguments to it, such as ``debug``,e.g. ``uvloop.run(main(), debug=True)``.With Python 3.11 and earlier the following alternativesnippet can be used:.. code:: python    import asyncio    import sys    import uvloop    async def main():        # Main entry-point.        ...    if sys.version_info &gt;= (3, 11):        with asyncio.Runner(loop_factory=uvloop.new_event_loop) as runner:            runner.run(main())    else:        uvloop.install()        asyncio.run(main())Building From Source--------------------To build uvloop, you'll need Python 3.7 or greater:1. Clone the repository:   .. code::    $ git clone --recursive git@github.com:MagicStack/uvloop.git    $ cd uvloop2. Create a virtual environment and activate it:   .. code::    $ python3.7 -m venv uvloop-dev    $ source uvloop-dev/bin/activate3. Install development dependencies:   ..  code::    $ pip install -e .[dev]4. Build and run tests:   .. code::    $ make    $ make testLicense-------uvloop is dual-licensed under MIT and Apache 2.0 licenses.</longdescription>
</pkgmetadata>