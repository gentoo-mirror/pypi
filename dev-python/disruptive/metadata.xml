<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Disruptive Technologies Python Client![build](https://github.com/disruptive-technologies/python-client/actions/workflows/build.yml/badge.svg)[![codecov](https://codecov.io/gh/disruptive-technologies/python-client/branch/main/graph/badge.svg)](https://codecov.io/gh/disruptive-technologies/python-client)## Documentation- [Python API Reference](https://developer.disruptive-technologies.com/api/libraries/python/)- [Developer Documentation](https://developer.disruptive-technologies.com/docs/)## InstallationThe package can be installed through pip:```shpip install --upgrade disruptive```or from source:```shpip install .```### Requirements- Python 3.7, 3.8, 3.9, 3.10, and 3.11## AuthenticationThe package is authenticated by providing [Service Account](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) credentials in either of the following ways.- By setting the following environment variables:```bashexport DT_SERVICE_ACCOUNT_KEY_ID=&quot;&lt;SERVICE_ACCOUNT_KEY_ID&gt;&quot;export DT_SERVICE_ACCOUNT_SECRET=&quot;&lt;SERVICE_ACCOUNT_SECRET&gt;&quot;export DT_SERVICE_ACCOUNT_EMAIL=&quot;&lt;SERVICE_ACCOUNT_EMAIL&gt;&quot;```- By providing the credentials programmatically:```pythonimport disruptive as dtdt.default_auth = dt.Auth.service_account(    key_id=&quot;&lt;SERVICE_ACCOUNT_KEY_ID&gt;&quot;,    secret=&quot;&lt;SERVICE_ACCOUNT_SECRET&gt;&quot;,    email=&quot;&lt;SERVICE_ACCOUNT_EMAIL&gt;&quot;,)```See [Python API Authentication](https://developer.disruptive-technologies.com/api/libraries/python/client/authentication.html) for more details.## UsageOnce authenticated, most functionality can be accessed through resource methods on the following format.```disruptive.&lt;Resource&gt;.&lt;method&gt;()```A few common uses are showcased in the snippet below. See the [Python API Reference](https://developer.disruptive-technologies.com/api/libraries/python/) for full documentation.```pythonimport disruptive as dt# Fetch a sensor, specified by its ID.sensor = dt.Device.get_device('&lt;DEVICE_ID&gt;')# Printing the returned object will list all attributes.print(sensor)# Set a new label on the sensor.dt.Device.set_label(sensor.device_id, sensor.project_id, key='nb', value='99')# Get touch- and temperature event history for the sensor.history = dt.EventHistory.list_events(    sensor.device_id,    sensor.project_id,    event_types=[        dt.events.TOUCH,        dt.events.TEMPERATURE,    ])# Initiate an event stream for all devices in the sensor's project.for event in dt.Stream.event_stream(sensor.project_id):    # Print new events data as they arrive.    print(event.data)```## LoggingThe simplest method is enabled by setting `disruptive.log_level`.```pythondt.log_level = dt.logging.INFO```If more fine-grained control is desired, the standard library `logging` can also be used.```pythonlogging.basicConfig(    filename='example.log',    format='[%(asctime)s.%(msecs)03d] %(levelname)-8s - %(message)s',    datefmt='%Y-%m-%d %H:%M:%S',)logging.getLogger('disruptive').setLevel(logging.INFO)``` For both methods, the standard levels `DEBUG`, `INFO`, `WARNING`, `ERROR`, and `CRITICAL` are supported.## ExamplesA few [examples](https://developer.disruptive-technologies.com/api/libraries/python/client/examples.html) has been provided. Before running, the required environment variables listed at the start of each example must be set.```shpython examples/example_name.py```## ExceptionsIf a request is unsuccessful or has been provided with invalid parameters, an exception is raised. A list of available exceptions are available in the [API Reference](https://developer.disruptive-technologies.com/api/libraries/python/client/errors.html).## DevelopmentSet up the development virtualenv environment:```make```Run unit-tests against the currently active python version:```make test```Lint the package code using MyPy and flake8:```make lint```Build the package distribution:```make build```</longdescription>
</pkgmetadata>