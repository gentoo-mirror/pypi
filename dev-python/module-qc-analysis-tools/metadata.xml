<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># module-qc-analysis-tools v2.0.5A general python tool for running ITkPixV1.1 module QC test analysis. Anoverview of the steps in the module QC procedure is documented in the[Electrical specification and QC procedures for ITkPixV1.1 modules](https://gitlab.cern.ch/atlas-itk/pixel/module/itkpix-electrical-qc/)document and in[this spreadsheet](https://docs.google.com/spreadsheets/d/1qGzrCl4iD9362RwKlstZASbhphV_qTXPeBC-VSttfgE/edit#gid=989740987).The analysis scripts in this repository require input files with measurementdata. The measurement data should be collected using the[module-qc-measurement-tools](https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-tools)package.## Table of contents1. [Requirements](#requirements)2. [Installation](#installation)3. [Scripts](#scripts)   1. [ADC calibration](#adc_calibration)   2. [Analog readback](#analog_readback)   3. [SLDOVI](#sldo)   4. [VCal calibration](#vcal_calibration)   5. [Injection capacitance](#injection_capacitance)   6. [Low Power Mode](#lp_mode)   7. [Overvoltage Protection](#overvoltage_protection)   8. [Minimum health](#minimum_health)   9. [Tuning performance](#tuning_performance)   10. [Pixel failure](#pixel_failure)4. [Notes](#notes)   1. [Submit QC results](#submit-qc-results)   2. [Example commands](#example-commands-for-a-chip-in-a-quad-module-L2)   3. [Update chip config](#update-chip-config)   4. [Load YARR scans](#load-yarr-scans)5. [For developer](#for-developer)## RequirementsThis tool requires users to have &gt;python3.6 with the following packagesinstalled:- `numpy`- `scipy`- `tabulate`- `matplotlib`- `jsonschema`## InstallationThis package may be accessed by cloning from gitlab or by installing it via pip.### via cloneUse this method if you want to use the latest version of the package fromgitlab. First clone the project:```git clone https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-analysis-tools.git```Upon a successful checkout, `cd` to the new `module-qc-analysis-tools` directoryand run the following to install the necessary software:```verbatim$ python3 -m venv env$ source env/bin/activate$ python -m pip install --upgrade pip$ python -m pip install -e .```### via pipUse this method if you want to use the latest stable (versioned) release of thepackage.```python -m venv venvsource venv/bin/activatepython -m pip install -U pippython -m pip install -U pip module-qc-analysis-tools==2.0.5```Note that users should use the latest python version (check python version via`python3 -V`). Python3.7 is the minimum requirement for developers. See[For Developer](#for-developer) section.## Scripts### `ADC_CALIBRATION`This analysis script performs the ADC calibration. It produces severaldiagnostic plots and an output file with the ADC calibration slope and offset.&lt;details&gt; &lt;summary&gt; analysis-ADC-CALIBRATION --help &lt;/summary&gt;```analysis-ADC-CALIBRATION --helpusage: analysis-ADC-CALIBRATION [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]                                [-f {root,numpy}] [-v VERBOSITY]optional arguments:  -h, --help            show this help message and exit  -i INPUT_MEAS, --input-meas INPUT_MEAS                        path to the input measurement file or directory containing input measurement files.  -o OUTPUT_DIR, --output-dir OUTPUT_DIR                        output directory  -q QC_CRITERIA, --qc-criteria QC_CRITERIA                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)  -l LAYER, --layer LAYER                        Layer of module, used for applying correct QC criteria settings. Default setting uses information from production database. Options: L0, L1, L2.  --permodule           Store results in one file per module (default: one file per chip)  -f {root,numpy}, --fit-method {root,numpy}                        fitting method  -v VERBOSITY, --verbosity VERBOSITY                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]```&lt;/details&gt;### `ANALOG_READBACK`This analysis script performs the Analog Readback. It produces an output filewith the calculated internal biases, temperature from the internal and externaltemperature sensor, and VDDA/VDDD vs Trim, including diagnostic plots with slopeand offset.&lt;details&gt; &lt;summary&gt; analysis-ANALOG-READBACK --help &lt;/summary&gt;```$ analysis-ANALOG-READBACK --helpusage: analysis-ANALOG-READBACK [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]                                [-f {root,numpy}] [-v VERBOSITY] [--verbose]optional arguments:  -h, --help            show this help message and exit  -i INPUT_MEAS, --input-meas INPUT_MEAS                        path to the input measurement file or directory containing input measurement files.  -o OUTPUT_DIR, --output-dir OUTPUT_DIR                        output directory  -q QC_CRITERIA, --qc-criteria QC_CRITERIA                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)  -l LAYER, --layer LAYER                        Layer of module, used for applying correct QC criteria settings. Default setting uses information from production database. Options: L0, L1, L2.  --permodule           Store results in one file per module (default: one file per chip)  -f {root,numpy}, --fit-method {root,numpy}                        fitting method  -v VERBOSITY, --verbosity VERBOSITY                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]  --verbose             verbose mode```&lt;/details&gt;### `SLDO`This script analyses the SLDO curve. It produces several diagnostic plots and anoutput file with several parameters extracted from the SLDO curves.&lt;details&gt; &lt;summary&gt; analysis-SLDO --help &lt;/summary&gt;```$ analysis-SLDO --helpusage: analysis-SLDO [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule] [-n NCHIPS]                     [-f {root,numpy}] [-v VERBOSITY] [--lp-enable]optional arguments:  -h, --help            show this help message and exit  -i INPUT_MEAS, --input-meas INPUT_MEAS                        path to the input measurement file or directory containing input measurement files.  -o OUTPUT_DIR, --output-dir OUTPUT_DIR                        output directory  -q QC_CRITERIA, --qc-criteria QC_CRITERIA                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)  -l LAYER, --layer LAYER                        Layer of module, used for applying correct QC criteria settings. Default setting uses information from production database. Options: L0, L1, L2.  --permodule           Store results in one file per module (default: one file per chip)  -n NCHIPS, --nChips NCHIPS                        Number of chips powered in parallel (e.g. 4 for a quad module, 3 for a triplet, 1 for an                        SCC.)  -f {root,numpy}, --fit-method {root,numpy}                        fitting method  -v VERBOSITY, --verbosity VERBOSITY                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]  --lp-enable           low power mode```&lt;/details&gt;### `VCAL_CALIBRATION`This analysis script performs the VCal calibration. It produces severaldiagnostic plots and an output file with the VCal calibration slope and offset.&lt;details&gt; &lt;summary&gt; analysis-VCAL-CALIBRATION --help &lt;/summary&gt;```$ analysis-VCAL-CALIBRATION --helpusage: analysis-VCAL-CALIBRATION [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]                                 [-f {root,numpy}] [-v VERBOSITY]optional arguments:  -h, --help            show this help message and exit  -i INPUT_MEAS, --input-meas INPUT_MEAS                        path to the input measurement file or directory containing input measurement files.  -o OUTPUT_DIR, --output-dir OUTPUT_DIR                        output directory  -q QC_CRITERIA, --qc-criteria QC_CRITERIA                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)  -l LAYER, --layer LAYER                        Layer of module, used for applying correct QC criteria settings. Default setting uses information from production database. Options: L0, L1, L2.  --permodule           Store results in one file per module (default: one file per chip)  -f {root,numpy}, --fit-method {root,numpy}                        fitting method  -v VERBOSITY, --verbosity VERBOSITY                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]```&lt;/details&gt;### `INJECTION_CAPACITANCE`This analysis script performs the injection capacitance. It produces severaldiagnostic plots and an output file with the measured pixel injectioncapacitance.&lt;details&gt; &lt;summary&gt; analysis-INJECTION-CAPACITANCE --help &lt;/summary&gt;```$ analysis-INJECTION-CAPACITANCE --helpusage: analysis-INJECTION-CAPACITANCE [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]                                      [-v VERBOSITY]optional arguments:  -h, --help            show this help message and exit  -i INPUT_MEAS, --input-meas INPUT_MEAS                        path to the input measurement file or directory containing input measurement files.  -o OUTPUT_DIR, --output-dir OUTPUT_DIR                        output directory  -q QC_CRITERIA, --qc-criteria QC_CRITERIA                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)  -l LAYER, --layer LAYER                        Layer of module, used for applying correct QC criteria settings. Default setting uses information from production database. Options: L0, L1, L2.  --permodule           Store results in one file per module (default: one file per chip)  -v VERBOSITY, --verbosity VERBOSITY                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]```&lt;/details&gt;### `LP_MODE`This analysis script performs the Low Power mode analysis. It produces an outputfile with the measured internal voltages and currents in low power mode.&lt;details&gt; &lt;summary&gt; analysis-LP-MODE --help &lt;/summary&gt;```$ analysis-LP-MODE --helpusage: analysis-LP-MODE [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]                                      [-v VERBOSITY]optional arguments:  -h, --help            show this help message and exit  -i INPUT_MEAS, --input-meas INPUT_MEAS                        path to the input measurement file or directory containing input measurement files.  -o OUTPUT_DIR, --output-dir OUTPUT_DIR                        output directory  -q QC_CRITERIA, --qc-criteria QC_CRITERIA                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)  -l LAYER, --layer LAYER                        Layer of module, used for applying correct QC criteria settings. Default setting uses information from production database. Options: L0,L1, L$  --permodule           Store results in one file per module (default: one file per chip)  -v VERBOSITY, --verbosity VERBOSITY                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]```&lt;/details&gt;### `OVERVOLTAGE_PROTECTION`This analysis script performs the Overvoltage protection analysis. It producesan output file with the measured internal voltages and currents in low powermode and when overvoltage protection mechanism is activated.&lt;details&gt; &lt;summary&gt; analysis-OVERVOLTAGE-PROTECTION --help &lt;/summary&gt;```$ analysis-OVERVOLTAGE-PROTECTION --helpusage: analysis-OVERVOLTAGE-PROTECTION [-h] -i INPUT_MEAS [-o OUTPUT_DIR] [-q QC_CRITERIA] [-l LAYER] [--permodule]                                      [-v VERBOSITY]optional arguments:  -h, --help            show this help message and exit  -i INPUT_MEAS, --input-meas INPUT_MEAS                        path to the input measurement file or directory containing input measurement files.  -o OUTPUT_DIR, --output-dir OUTPUT_DIR                        output directory  -q QC_CRITERIA, --qc-criteria QC_CRITERIA                        path to json file with QC selection criteria (default: $(module-qc-analysis-tools --prefix)/analysis_cuts.json)  -l LAYER, --layer LAYER                        Layer of module, used for applying correct QC criteria settings. Default setting uses information from production database. Options: L0,L1, L$  --permodule           Store results in one file per module (default: one file per chip)  -v VERBOSITY, --verbosity VERBOSITY                        Log level [options: DEBUG, INFO (default), WARNING, ERROR]```&lt;/details&gt;### `MIN_HEALTH_TEST`This analysis script performs the minimum health analysis of YARR Scans. Itproduces an output file with key parameters (number of dead/bad pixels, ...).Note that the YARR scans to be used in the analysis should be identified with`analysis-load-yarr-scans`, see [Load Yarr Scans](#load-yarr-scans).&lt;details&gt; &lt;summary&gt; analysis-MIN_HEALTH_TEST --help &lt;/summary&gt;```$ analysis-MIN-HEALTH-TEST -hUsage: analysis-MIN-HEALTH-TEST [OPTIONS]Options:  -i, --input-yarr-config PATH    path to the json config file containing                                  paths to YARR scan outputs. Run analysis-                                  load-yarr-scans.py to generate.  [default:                                  info.json]  -q, --qc-criteria PATH          path to json file with QC selection criteria                                  [default: /home/eathompson/module-qc-                                  analysis-tools/src/module_qc_analysis_tools/                                  data/analysis_cuts.json]  -p, --pixel-failure-config PATH                                  path to json file with pixel failure                                  selection criteria  [default:                                  /home/eathompson/module-qc-analysis-tools/sr                                  c/module_qc_analysis_tools/data/pixel_classi                                  fication.json]  -l, --layer TEXT                Layer of module, used for applying correct                                  QC criteria settings. Options: L0, L1, L2                                  (default is automatically determined from module SN)  -o, --output-dir PATH           output directory  [default: outputs]  --permodule / --no-permodule    Store results in one file per module                                  (default: one file per chip)  [default: no-                                  permodule]  -v, --verbosity [DEBUG|INFO|WARNING|ERROR]                                  Log level [options: DEBUG, INFO (default)                                  WARNING, ERROR]  [default: LogLevel.info]```&lt;/details&gt;### `TUNING`This analysis script analyzes the tuning performance from YARR scans. Itproduces an output file with key parameters (threshold before/after tuning,...). Note that the YARR scans to be used in the analysis should be identifiedwith `analysis-load-yarr-scans`, see [Load Yarr Scans](#load-yarr-scans).&lt;details&gt; &lt;summary&gt; analysis-TUNING --help &lt;/summary&gt;```$ analysis-TUNING -hUsage: analysis-TUNING [OPTIONS]Options:  -i, --input-yarr-config PATH    path to the json config file containing                                  paths to YARR scan outputs. Run analysis-                                  load-yarr-scans.py to generate.  [default:                                  info.json]  -q, --qc-criteria PATH          path to json file with QC selection criteria                                  [default: /home/eathompson/module-qc-                                  analysis-tools/src/module_qc_analysis_tools/                                  data/analysis_cuts.json]  -p, --pixel-failure-config PATH                                  path to json file with pixel failure                                  selection criteria  [default:                                  /home/eathompson/module-qc-analysis-tools/sr                                  c/module_qc_analysis_tools/data/pixel_classi                                  fication.json]  -l, --layer TEXT                Layer of module, used for applying correct                                  QC criteria settings. Options: L0, L1, L2                                  (default is automatically determined from module SN)  -o, --output-dir PATH           output directory  [default: outputs]  --permodule / --no-permodule    Store results in one file per module                                  (default: one file per chip)  [default: no-                                  permodule]  -v, --verbosity [DEBUG|INFO|WARNING|ERROR]                                  Log level [options: DEBUG, INFO (default)                                  WARNING, ERROR]  [default: LogLevel.info]```&lt;/details&gt;### `PIXEL_FAILURE_ANALYSIS`This analysis script classifies pixel failures and performs the pixel failureanalysis. It produces an output file with several key parameters (number ofpixels failing each category, total failing pixels, ...). Note that the YARRscans to be used in the analysis should be identified with`analysis-load-yarr-scans`, see [Load Yarr Scans](#load-yarr-scans).&lt;details&gt; &lt;summary&gt; analysis-PIXEL-FAILURE-ANALYSIS --help &lt;/summary&gt;```$ analysis-PIXEL-FAILURE-ANALYSIS -hUsage: analysis-PIXEL-FAILURE-ANALYSIS [OPTIONS]Options:  -i, --input-yarr-config PATH    path to the json config file containing                                  paths to YARR scan outputs. Run analysis-                                  load-yarr-scans.py to generate.  [default:                                  info.json]  -q, --qc-criteria PATH          path to json file with QC selection criteria                                  [default: /home/eathompson/module-qc-                                  analysis-tools/src/module_qc_analysis_tools/                                  data/analysis_cuts.json]  -p, --pixel-failure-config PATH                                  path to json file with pixel failure                                  selection criteria  [default:                                  /home/eathompson/module-qc-analysis-tools/sr                                  c/module_qc_analysis_tools/data/pixel_classi                                  fication.json]  -l, --layer TEXT                Layer of module, used for applying correct                                  QC criteria settings. Options: L0, L1, L2                                  (default is automatically determined from module SN)  -o, --output-dir PATH           output directory  [default: outputs]  --permodule / --no-permodule    Store results in one file per module                                  (default: one file per chip)  [default: no-                                  permodule]  -v, --verbosity [DEBUG|INFO|WARNING|ERROR]                                  Log level [options: DEBUG, INFO (default)                                  WARNING, ERROR]  [default: LogLevel.info]```&lt;/details&gt;## Notes### `Submit QC results`To submit the QC results, supply the --submit option to the analysis. You alsoneed to supply the site where the testing took place, as written in productionDB (i.e. LBNL_PIXEL_MODULES for LBNL, IRFU for Paris-Saclay, ...). This willgenerate a URL that is printed to the terminal and saved in &quot;submit.txt&quot; in thesame folder as the analysis output. To submit the results, you need to copy andpaste one URL for each chip / test into a browser. Once submitted, the resultscan be viewed here:https://docs.google.com/spreadsheets/d/1pw_07F94fg2GJQr8wlvhaRUV63uhsAuBt_S1FEFBzBU/view. While all submitted results will be recorded, only the latest results for eachchip / test will be analyzed. If a mistake was realized in the submittedresults, one can re-run the analysis and re-submit the results to overwrite theoriginal results.### `Example commands for a chip in a quad module````analysis-ADC-CALIBRATION -i ../module-qc-tools/emulator/outputs/Measurements/ADC_CALIBRATION/1000000001/analysis-SLDO -i ../module-qc-tools/emulator/outputs/Measurements/SLDO/1000000001/analysis-ANALOG-READBACK -i ../module-qc-tools/emulator/outputs/Measurements/ANALOG_READBACK/1000000001/analysis-VCAL-CALIBRATION -i ../module-qc-tools/emulator/outputs/Measurements/VCAL_CALIBRATION/1000000001/analysis-INJECTION-CAPACITANCE -i ../module-qc-tools/emulator/outputs/Measurements/INJECTION_CAPACITANCE/1000000001/```### `Update Chip Config`After each analysis, update the settings in the chip config by running:```analysis-update-chip-config -i &lt;path to analysis output directory&gt; -c &lt;path to YARR config directory&gt; -t &lt;config type&gt;```This script reads the analysis test type and update the corresponding parametersin the chip config.&lt;details&gt; &lt;summary&gt; analysis-update-chip-config --help &lt;/summary&gt;```analysis-update-chip-config -h-i,  --input-dir                              Analysis output directory [default: None] [required]-c,  --config-dir                             Path to the module configuration directory to be modified [default: None] [required]-t,  --config-type                            The config type to be modified. E.g. L2_warm/L2_cold.     --override/--no-override                 Update chip configuration even if the chip failed QC [default: no-override]     --install-completion                     Install completion for the current shell.     --show-completion                        Show completion for the current shell, to copy it or customize the installation.-h,  --help                                   Show this message and exit.```&lt;/details&gt;### `Load YARR Scans`Before running analysis of YARR scans (`MIN_HEALTH_TEST`, `TUNING`,`PIXEL_FAILURE_ANALYSIS`), the YARR scans to be analyzed need to be identified.This is done locally using the following script:&lt;details&gt; &lt;summary&gt; analysis-load-yarr-scans --help &lt;/summary&gt;```$ analysis-load-yarr-scans -hOptions:  -i, --input-yarr-scans PATH     path to the json config file containing                                  paths to YARR scan outputs. Run analysis-                                  load-yarr-scans.py to generate.  -o, --output-yarr PATH          output directory to put info.json which will                                  be used as input to YARR scan analysis  -m, --moduleSN TEXT             Module serial number  [default: Unknown]  -v, --verbosity [DEBUG|INFO|WARNING|ERROR]                                  Log level [options: DEBUG, INFO (default)                                  WARNING, ERROR]  [default: LogLevel.info]  -ds, --digital-scan PATH        path to the digital scan output directory to                                  use in YARR analysis  -as, --analog-scan PATH         path to the analog scan output directory to                                  use in YARR analysis  -hr, --threshold-scan-hr PATH   path to the threshold scan (high-range)                                  output directory to use in YARR analysis  -hd, --threshold-scan-hd PATH   path to the threshold scan (high-def) output                                  directory to use in YARR analysis```&lt;/details&gt;Given a directory with YARR scans, the script will identify the latest YARRscans needed for all analyses. Alternatively, the paths to YARR scans for eachtype of scan can be supplied to the script.## For Developer### python versionA python version higher than 3.7 is needed for this repository. Check the localpython version with `python -V`.If the local python version is lower, set up a virtual python environmentfollowing the instructions[here](https://itk.docs.cern.ch/general/Virtual_Environments/).### versioningIn case you need to tag the version of the code, you need to have either `hatch`or `pipx` installed.1. Activate python environment, e.g. `source venv/bin/activate`.2. Run `python -m pip install hatch` or `python -m pip install pipx`.You can bump the version via:```pipx run hatch run tag x.y.z# orhatch run tag x.y.z```where `x.y.z` is the new version to use. This should be run from the defaultbranch (`main` / `master`) as this will create a commit and tag, and push foryou. So make sure you have the ability to push directly to the default branch.### pre-commitInstall pre-commit to avoid CI failure. Once pre-commit is installed, a git hookscript will be run to identify simple issues before submission to code review.Instruction for installing pre-commit in a python environment:1. Activate python environment, e.g. `source venv/bin/activate`.2. Run `python3 -m pip install pre-commit`.3. Run `pre-commit install` to install the hooks in `.pre-commit-config.yaml`.After installing pre-commit, `.pre-commit-config.yaml` will be run every time`git commit` is done. Redo `git add` and `git commit`, if the pre-commit scriptchanges any files.</longdescription>
</pkgmetadata>