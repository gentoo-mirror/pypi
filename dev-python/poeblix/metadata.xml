<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># poeblixPoetry Plugin that adds various features that extend the `poetry` command such as building wheel files with locked dependencies, and validations of wheel/docker containers.Supports poetry versions `1.2+`# OverviewThese contain custom poetry plugins that enable functionality not available in the official distribution of poetry.  These include:1. Using the Lock file to build a wheel file with pinned dependencies2. Support for data_files (like with setup.py) such as jupyter extensions or font files3. Validating a wheel file is consistent with dependencies specified in pyproject.toml/poetry.lock4. Validating a docker container's `pip freeze` contains dependencies as specified in pyproject.toml/poetry.lockThese are not supported in Poetry due to debate in the community: https://github.com/python-poetry/poetry/issues/890, https://github.com/python-poetry/poetry/issues/4013, https://github.com/python-poetry/poetry/issues/2778## Deterministic builds and environmentsPoetry guarantees deterministic installations and environments thanksto the `poetry.lock` file, which is where it stores the exact versionsof all the dependencies needed to install a package. However, this doesn'toccurs when wheel or package artifacts are build using `poetry build`command.To build a package, poetry uses the direct dependencies set in the`pyproject.toml` and not all the other dependencies required to installa package. For example, if `pyproject.toml` defines `pandas = &quot;1.4.2&quot;`as dependency but `poetry.lock` also says that `pandas` requires of`numpy-1.22.4`, poetry will build a package with `pandas` as dependencybut not with `numpy`.Another problem that exists is that `pyproject.toml` can contain dependencieswith ranges of versions while `poetry.lock` has pinned versions. For instance,if `pyproject.toml` has as dependency `pandas = &quot;&gt;=1.3&quot;` but `poetry.lock`sets `pandas-1.4.2`, poetry will build a package with the dependency`Requires-Dist: pandas (&gt;=0.1.3,&lt;0.2.0)`. When the package is installed,the resolver will install the newest package of `pandas` which its versionnumber is greater than or equal to `0.1.3` and lower than `0.2.0`.Summing this up, the same python package created with `poetry build` andinstalled several times won't install the same dependencies, making impossibleto have deterministic installations.This plugin solves these problems building python packages that use thedependencies defined in the `poetry.lock`.# How to Use### PrerequisitePoetry Plugins are only supported in 1.2.0+ which, at the moment (5/29/22), can only be installed when using the [new poetry installer](https://python-poetry.org/docs/#installation)```commandline# You can update poetry usingpoetry self update```## InstallationYou can add the plugin via poetry's CLI:```commandlinepoetry self add poeblix```_For &lt;= 1.2_:```commandlinepoetry plugin add poeblix```Or install directly from source/wheel, then add with the same above command using the absolute path to the built distTo update the plugin:```commandline# Update to latestpoetry self add poeblix@latest# Update to specific versionpoetry self add poeblix==&lt;version&gt;```You should now see the blix* commands if you run `poetry list`## Usage1. To build a wheel from your package (pyproject.toml dependencies have precedence over poetry.lock ones, by default)```commandlinepoetry blixbuild# Note: Options below are also available as part of the `blixvalidatewheel` and `blixvalidatedocker` commands# To disable using lock file for building wheel and only use pyproject.tomlpoetry blixbuild --no-lock# Uses lock dependencies only which are pinned to exact versions, instead of pyproject.tomlpoetry blixbuild --only-lock# Specify additional dependency groups to include as Requires-Dist in the wheelpoetry blixbuild --with-groups=dev,integ,etc.```2. Validate a wheel file has consistent dependencies and data_files as specified in pyproject.toml/poetry.lock```commandlinepoetry blixvalidatewheel &lt;path-to-wheel&gt;# Disable using lock file for validationpoetry blixvalidatewheel --no-lock &lt;path-to-wheel&gt;```_Note: this validates consistency in both directions_3. Validate a docker container contains dependencies in a `pip freeze` as specified in pyproject.toml/poetry.lock```commandlinepoetry blixvalidatedocker &lt;docker-container-ID&gt;# Disable using lock file for validationpoetry blixvalidatedocker --no-lock &lt;docker-container-ID&gt;```_Note: this only validates the docker container contains dependencies in the project, but not the other direction_Here's an example series of commands to start up a temporary docker container using its tag, validate it, then stop the temporary container```# This will output the newly running container iddocker run --entrypoint=bash -it -d &lt;docker-image-tag&gt;# Then validate the running docker container, and stop it when donepoetry blixvalidatedocker &lt;container-id&gt;docker stop &lt;container-id&gt;```4. Adding data_files to pyproject.toml to mimic data_files in setup.py:```yaml...[tool.blix.data]data_files = [    { destination = &quot;share/data/&quot;, from = [ &quot;data_files/test.txt&quot;, &quot;data_files/anotherfile&quot; ] },    { destination = &quot;share/data/threes&quot;, from = [ &quot;data_files/athirdfile&quot; ] }]...```data_files should be under the `[tool.blix.data]` category and is a list of objects, each containing the `destination` data folder, and a `from` list of files to add to the destination data folder._Note: the destination is a relative path that installs data to relative to the [installation prefix](https://docs.python.org/3/distutils/setupscript.html#installing-additional-files)_Example: https://github.com/spoorn/poeblix/blob/main/test/positive_cases/happy_case_example/pyproject.toml5. For more help on each command, use the --help argument```commandlinepoetry blixbuild --helppoetry blixvalidatewheel --helppoetry blixvalidatedocker --help```# Development```bash# Make a virtual environment on Python 3.9# If using virtualenvwrapper, run `mkvirtualenv -p python3.9 venv`virtualenv -p python3.9 venv# Or activate existing virtualenv# If using virtualenvwrapper, run `workon venv`source venv/bin/activate# installs the plugin in editable mode for easier testing via `poetry install`./devtool bootstrap# Lint checks./devtool lint# Tests./devtool test# Run all checks and tests./devtool all```**plugins.py** : contains our plugin that adds the `poetry blixbuild` command for building our wheel file**validatewheel.py**: adds a `poetry blixvalidatewheel` command that validates a wheel file contains the Required Dist as specified in pyproject.toml/poetry.lock**validatedocker.py** : adds a command that validates a docker file contains dependencies as specified in pyproject.toml and poetry.lock.  This does *NOT* validate that they are exactly matching, but rather that all dependencies in pyproject.toml/poetry.lock exist in the docker container on the correct versions.  The docker image may contain more extra dependencies</longdescription>
</pkgmetadata>