<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Nucleushttps://dashboard.scale.com/nucleusAggregate metrics in ML are not good enough. To improve production ML, you need to understand their qualitative failure modes, fix them by gathering more data, and curate diverse scenarios.Scale Nucleus helps you:- Visualize your data- Curate interesting slices within your dataset- Review and manage annotations- Measure and debug your model performanceNucleus is a new way—the right way—to develop ML models, helping us move away from the concept of one dataset and towards a paradigm of collections of scenarios.## Installation`$ pip install scale-nucleus`## CLI installationWe recommend installing the CLI via `pipx` (https://pypa.github.io/pipx/installation/). This makes sure thatthe CLI does not interfere with you system packages and is accessible from your favorite terminal.For MacOS:```bashbrew install pipxpipx ensurepathpipx install scale-nucleus# Optional installation of shell completion (for bash, zsh or fish)nu install-completions```Otherwise, install via pip (requires pip 19.0 or later):```bashpython3 -m pip install --user pipxpython3 -m pipx ensurepathpython3 -m pipx install scale-nucleus# Optional installation of shell completion (for bash, zsh or fish)nu install-completions```## Common issues/FAQ### Outdated ClientNucleus is iterating rapidly and as a result we do not always perfectly preserve backwards compatibility with older versions of the client. If you run into any unexpected error, it's a good idea to upgrade your version of the client by running```pip install --upgrade scale-nucleus```## UsageFor the most up to date documentation, reference: https://dashboard.scale.com/nucleus/docs/api?language=python.## For DevelopersClone from github and install as editable```git clone git@github.com:scaleapi/nucleus-python-client.gitcd nucleus-python-clientpip3 install poetrypoetry install```Please install the pre-commit hooks by running the following command:```pythonpoetry run pre-commit install```When releasing a new version please add release notes to the changelog in `CHANGELOG.md`.**Best practices for testing:**(1). Please run pytest from the root directory of the repo, i.e.```poetry run pytest tests/test_dataset.py```(2) To skip slow integration tests that have to wait for an async job to start.```poetry run pytest -m &quot;not integration&quot;```## Pydantic ModelsPrefer using [Pydantic](https://pydantic-docs.helpmanual.io/usage/models/) models rather than creating raw dictionariesor dataclasses to send or receive over the wire as JSONs. Pydantic is created with data validation in mind and provides very clear errormessages when it encounters a problem with the payload.The Pydantic model(s) should mirror the payload to send. To represent a JSON payload that looks like this:```json{  &quot;example_json_with_info&quot;: {    &quot;metadata&quot;: {      &quot;frame&quot;: 0    },    &quot;reference_id&quot;: &quot;frame0&quot;,    &quot;url&quot;: &quot;s3://example/scale_nucleus/2021/lidar/0038711321865000.json&quot;,    &quot;type&quot;: &quot;pointcloud&quot;  },  &quot;example_image_with_info&quot;: {    &quot;metadata&quot;: {      &quot;author&quot;: &quot;Picasso&quot;    },    &quot;reference_id&quot;: &quot;frame0&quot;,    &quot;url&quot;: &quot;s3://bucket/0038711321865000.jpg&quot;,    &quot;type&quot;: &quot;image&quot;  }}```Could be represented as the following structure. Note that the field names map to the JSON keys and the usage of fieldvalidators (`@validator`).```pythonimport os.pathfrom pydantic import BaseModel, validatorfrom typing import Literalclass JsonWithInfo(BaseModel):    metadata: dict  # any dict is valid    reference_id: str    url: str    type: Literal[&quot;pointcloud&quot;, &quot;recipe&quot;]    @validator(&quot;url&quot;)    def has_json_extension(cls, v):        if not v.endswith(&quot;.json&quot;):            raise ValueError(f&quot;Expected '.json' extension got {v}&quot;)        return vclass ImageWithInfo(BaseModel):    metadata: dict  # any dict is valid    reference_id: str    url: str    type: Literal[&quot;image&quot;, &quot;mask&quot;]    @validator(&quot;url&quot;)    def has_valid_extension(cls, v):        valid_extensions = {&quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.png&quot;, &quot;.tiff&quot;}        _, extension = os.path.splitext(v)        if extension not in valid_extensions:            raise ValueError(f&quot;Expected extension in {valid_extensions} got {v}&quot;)        return vclass ExampleNestedModel(BaseModel):    example_json_with_info: JsonWithInfo    example_image_with_info: ImageWithInfo# Usage:import requestspayload = requests.get(&quot;/example&quot;)parsed_model = ExampleNestedModel.parse_obj(payload.json())requests.post(&quot;example/post_to&quot;, json=parsed_model.dict())```### Migrating to Pydantic- When migrating an interface from a dictionary use `nucleus.pydantic_base.DictCompatibleModel`. That allows you to get  the benefits of Pydantic but maintaints backwards compatibility with a Python dictionary by delegating `__getitem__` to  fields.- When migrating a frozen dataclass use `nucleus.pydantic_base.ImmutableModel`. That is a base class set up to be  immutable after initialization.**Updating documentation:**We use [Sphinx](https://www.sphinx-doc.org/en/master/) to autogenerate our API Reference from docstrings.To test your local docstring changes, run the following commands from the repository's root directory:```poetry shellcd docssphinx-autobuild . ./_build/html --watch ../nucleus````sphinx-autobuild` will spin up a server on localhost (port 8000 by default) that will watch for and automatically rebuild a version of the API reference based on your local docstring changes.## Custom Metrics using Shapely in scale-validateCertain metrics use `Shapely` and `rasterio` which is added as optional dependencies.```bashpip install scale-nucleus[metrics]```Note that you might need to install a local GEOS package since Shapely doesn't provide binaries bundled with GEOS for every platform.```bash#Mac OSbrew install geos# Ubuntu/Debian flavorsapt-get install libgeos-dev```To develop it locally use`poetry install --extras metrics`</longdescription>
</pkgmetadata>