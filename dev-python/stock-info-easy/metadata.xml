<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Stock_Info_EasyThis Python package is an implementation of the existing  _yfinance wrapper_, one of the  widely used yahoo finance API wrappers.&lt;br&gt;Most of the times, the currently available Yahoo finance API wrappers take __company symbols__ as input queries instead of company names. This often causes confusion as it is difficult to guess company symbols by heart. &lt;br&gt;(eg. what is the abbreviation form of the company _Apple, is it `APPL`? `AAPL`? or `APLE`?)_  Therefore, this package aims to provide an improved functionality of querying by making it possible for users to fetch stock data by __company name(s) alone!__ &lt;br&gt;&lt;br&gt;Additionally, this package generates the stock data in dynamic formats, such as visualizations, data table, stock price forecast, and an audio file with daily prime stock price.&lt;br&gt;The fetched data table includes: &lt;br&gt;* _`company name, open, high, low, close (closing price), adj close, volume, daily return, and PE ratios.`_&lt;br&gt;&lt;br&gt;## Installation```bash$ pip install stock_info_easy```## Usage### 1. Fetch Stock DataInsert the name of a company inside the `get_hist_data` function. &lt;Br&gt; _ex) ['amazon', 'apple', 'google', 'microsoft']_```python# By default, today's date will be used as end_date when the end_date is not specified. &gt;&gt;&gt; data_list, comp_names_abbr, company_list, comp_names = \stock_info_easy.get_hist_data((['amazon', 'apple', 'google', 'microsoft']), \start_date=&quot;01/04/2022&quot;, end_date = &quot;2022-01-10&quot;) ``````python# To view the stock data as a table, # Type &quot;data_list&quot; (to view all) or &quot;company_list[i]&quot;, i = index of the company. # stock info of all queried companies.&gt;&gt;&gt; data_list ```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/data_list.png&quot; width=&quot;730&quot; height=&quot;350&quot;/&gt;&lt;/p&gt;&lt;br&gt;```python# first company info (amazon).&gt;&gt;&gt; company_list[0]  ```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/company_list[0].png&quot; width=&quot;730&quot; height=&quot;350&quot;/&gt;&lt;/p&gt;&lt;br&gt;```python# second company info (apple).&gt;&gt;&gt; company_list[1]  ```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/company_list[1].png&quot; width=&quot;730&quot; height=&quot;350&quot;/&gt;&lt;/p&gt;&lt;br&gt;### 2. Visualization of Closing Price```python# To generate the visualization of Closing Price, copy-paste below function as it is.&gt;&gt;&gt; get_closing_price_viz(company_list, comp_names) ```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/closing_price_.png&quot; width=&quot;1000&quot; height=&quot;450&quot;/&gt;&lt;/p&gt;&lt;br&gt;### 3. Visualization of Daily Return```python# To generate the visualization of Daily Return, copy-paste below function as it is.&gt;&gt;&gt; get_daily_return_viz(company_list, company_names)```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/daily_return_.png&quot; width=&quot;750&quot; height=&quot;430&quot; /&gt;&lt;/p&gt;### 4. Prime Stock Info on AudioThis package provides key stock information such as PE ratio and basic company information of all queries companies in an audio format. ```python# Can customize the audio filename in the &quot;audio_filename&quot; parameter.&gt;&gt;&gt; generate_audio(comp_names_abbr, audio_filename='default1.mp3') ```&lt;br&gt;### 5. Prediction on Closing PriceThis package uses the time series LSTM vanila model to predict the closing price. LSTM model is built with two hidden LSTM layers followed by a standard feedforward output layer. ```python# Copy-paste the below function.# The window size and prediction window size can be customized. &gt;&gt;&gt; stock_info_easy.predict_future_price(data_list, comp_names_abbr, \windown_size=30, predict_window_size=10, predict=True)```&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/predict_amazon.png&quot;, width=&quot;650&quot; height=&quot;300&quot; /&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/predict_apple.png&quot;, width=&quot;650&quot; height=&quot;300&quot; /&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/predict_google.png&quot;, width=&quot;650&quot; height=&quot;300&quot; /&gt;&lt;img src=&quot;https://github.com/shaunahan/Stock_Info_Easy/blob/main/img/predict_microsoft.png&quot;, width=&quot;650&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;&lt;br&gt;## ContributingInterested in contributing? Check out the contributing guidelines. Please note that this project is released with a Code of Conduct. By contributing to this project, you agree to abide by its terms.## License`stock_info_easy` was created by Shauna Han. It is licensed under the terms of the MIT license.## Credits`stock_info_easy` was created with [`cookiecutter`](https://cookiecutter.readthedocs.io/en/latest/) and the `py-pkgs-cookiecutter` [template](https://github.com/py-pkgs/py-pkgs-cookiecutter).</longdescription>
</pkgmetadata>