<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI](https://github.com/carltonnorthern/nicknames/actions/workflows/ci.yml/badge.svg)](https://github.com/carltonnorthern/nicknames/actions/workflows/ci.yml)[![PyPI version](https://badge.fury.io/py/nicknames.svg)](https://badge.fury.io/py/nicknames)# NicknamesA hand-curated CSV file containing English given names (first names) andtheir associated nicknames.There are Python, SQL, Java, Perl, and R parsers provided for convenience.This is a relatively large list with roughly 1600 names. Any help frompeople to clean this list up and add to it is greatly appreciated.The first name in a line is the canonical name, and the rest are nicknamesfor that name.This lookup file was initially created by mining this[genealogy page](https://www.caagri.org/nicknames.html).Because the lookup originates from a dataset used for genealogy purposes thereare old names that aren't commonly used these days, but there are recent onesas well. Examples are &quot;gregory&quot;, &quot;greg&quot;, or &quot;geoffrey&quot;, &quot;geoff&quot;. There was alsoa significant effort to make it machine readable, i.e. separate it with commas,remove human conventions like &quot;rickie(y)&quot; would need to be made into twodifferent names &quot;rickie&quot;, and &quot;ricky&quot;.This project was created by [Old Dominion University](https://www.odu.edu/) -[Web Science and Digital Libraries Research Group](http://ws-dl.blogspot.com/).More information about the creation of this lookup can be found on this[blog post about the creation of this library](https://ws-dl.blogspot.com/2010/08/lookup-for-nicknames-and-diminutive.html)## Python APIThe Python parser is available on PyPI from```bashpip install nicknames```and then you can do:```pythonfrom nicknames import NickNamernn = NickNamer()# Get the nicknames for a given name as a set of stringsnicks = nn.nicknames_of(&quot;Alexander&quot;)assert isinstance(nicks, set)assert &quot;al&quot; in nicksassert &quot;alex&quot; in nicks# Note that the relationship isn't symmetric: al is a nickname for alexander,# but alexander is not a nickname for al.assert &quot;alexander&quot; not in nn.nicknames_of(&quot;al&quot;)# Capitalization is ignored and leading and trailing whitespace is ignoredassert nn.nicknames_of(&quot;alexander&quot;) == nn.nicknames_of(&quot; ALEXANDER &quot;)# Queries that aren't found return an empty setassert nn.nicknames_of(&quot;not a name&quot;) == set()# The other useful thing is to go the other way, nickname to canonical:# It acts very similarly to nicknames_of.can = nn.canonicals_of(&quot;al&quot;)assert isinstance(can, set)assert &quot;alexander&quot; in canassert &quot;alex&quot; in canassert &quot;al&quot; not in nn.canonicals_of(&quot;alexander&quot;)# You can combine these to see if two names are interchangeable:union = nn.nicknames_of(&quot;al&quot;) | nn.canonicals_of(&quot;al&quot;)are_interchangeable = &quot;alexander&quot; in union```For more advanced usage, such as loading your own data, read the source code.</longdescription>
</pkgmetadata>