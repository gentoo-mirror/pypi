<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HTTP Structured Field Values in Python[![Actions Status](https://github.com/mnot/http_sfv/workflows/CI/badge.svg)](https://github.com/mnot/http_sfv/actions)This is a [Python 3](https://python.org/) library implementing parsing and serialisation of [HTTP Structured Fields](https://httpwg.org/http-extensions/draft-ietf-httpbis-header-structure.html).The library's initial purpose is to prove the algorithms in the specification; as a result, it is not at all optimised. It tracks the specification closely, but since it is not yet an RFC, may change at any time._Currently, this implements draft 19 of the specification._## Python APIThere are three top-level types for Structured Field Values; `Dictionary`, `List` and `Item`. After instantiation, each can be used to parse a string HTTP header field value by calling `.parse()`:~~~ python&gt;&gt;&gt; from http_sfv import List&gt;&gt;&gt; my_list = List()&gt;&gt;&gt; my_list.parse(b&quot;foo; a=1, bar; b=2&quot;)~~~Note that `.parse()` takes a bytes-like object. If you want to parse a string, please `.encode()` it first.Members of Lists and Dictionaries are available by normal Pythonic list and dictionary methods, respectively:~~~ python&gt;&gt;&gt; my_list[&lt;http_sfv.item.Item object at 0x106d25190&gt;, &lt;http_sfv.item.Item object at 0x106d25210&gt;]&gt;&gt;&gt; my_list[0]&lt;http_sfv.item.Item object at 0x106d25190&gt;~~~Items (whether top-level or inside a list or dictionary value) can have their values accessed with the `.value` property:~~~ python&gt;&gt;&gt; my_list[0].value'foo'~~~Parameters on Items (and Inner Lists) can be accessed using the `.params` property, which is a dictionary:~~~ python&gt;&gt;&gt; my_list[0].params['a']1~~~Note that Tokens and Strings both evaluate as Python strings, but Tokens have a different class:~~~ python&gt;&gt;&gt; type(my_list[0].value)&lt;class 'http_sfv.token.Token'&gt;~~~That means that you need to create Tokens explicitly:~~~ python&gt;&gt;&gt; from http_sfv import Token&gt;&gt;&gt; my_list.append(Token('bar'))&gt;&gt;&gt; my_list[-1]'bar'~~~If you compare two Items, they'll be considered to be equivalent if their values match, even when their parameters are different:~~~ python&gt;&gt;&gt; Token('foo') in my_list  # note that my_list's 'foo' has a parameterTrue&gt;&gt;&gt; my_list.count(Token(&quot;foo&quot;))1~~~Inner Lists can be added by passing a list:~~~ python&gt;&gt;&gt; my_list.append(['another_thing', 'and_another'])&gt;&gt;&gt; print(my_list)foo;a=1, bar;b=2, bar, (&quot;another_thing&quot; &quot;and_another&quot;)&gt;&gt;&gt; my_list[-1][-1].params['a'] = True~~~Dictionaries, Lists, and Items can be instantiated with a value:~~~ python&gt;&gt;&gt; from http_sfv import Dictionary&gt;&gt;&gt; my_dictionary = Dictionary({'a': '1', 'b': 2, 'c': Token('foo')})&gt;&gt;&gt; my_dictionary{'a': &lt;http_sfv.item.Item object at 0x106a94c40&gt;, 'b': &lt;http_sfv.item.Item object at 0x106a94d00&gt;, 'c': &lt;http_sfv.item.Item object at 0x106a94dc0&gt;}~~~Once instantiated, parameters can then be accessed:~~~ python&gt;&gt;&gt; my_dictionary['b'].params['1'] = 2.0~~~Finally, to serialise a field value, just evaluate it as a string:~~~ python&gt;&gt;&gt; print(my_dictionary)a=1, b=2;b1=2.0, c=foo~~~## Command Line UseYou can validate and examine the data model of a field value by calling the library on the command line, using `-d`, `-l` and `-i` to denote dictionaries, lists or items respectively; e.g.,~~~ example&gt; python3 -m http_sfv -i &quot;foo;bar=baz&quot;[    {        &quot;__type&quot;: &quot;token&quot;,        &quot;value&quot;: &quot;foo&quot;    },    {        &quot;bar&quot;: {            &quot;__type&quot;: &quot;token&quot;,            &quot;value&quot;: &quot;baz&quot;        }    }]~~~or:~~~ example&gt; python3 -m http_sfv -i &quot;foo;&amp;bar=baz&quot;FAIL: Key does not begin with lcalpha or * at: &amp;bar=baz~~~Note that if successful, the output is in the JSON format used by the [test suite](https://github.com/httpwg/structured-header-tests/).</longdescription>
</pkgmetadata>