<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Logo|=====================================================================``yaspin``: **Y**\ et **A**\ nother Terminal **Spin**\ ner for Python=====================================================================|Coverage| |pypi| |black-fmt||Versions| |Wheel| |Examples||DownloadsTot| |DownloadsW|``Yaspin`` provides a full-featured terminal spinner to show the progress during long-hanging operations... image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/demo.gifIt is easy to integrate into existing codebase by using it as a `context manager`_or as a function `decorator`_:.. code:: python    import time    from yaspin import yaspin    # Context manager:    with yaspin():        time.sleep(3)  # time consuming code    # Function decorator:    @yaspin(text=&quot;Loading...&quot;)    def some_operations():        time.sleep(3)  # time consuming code    some_operations()**Yaspin** also provides an intuitive and powerful API. For example, you can easily summon a shark:.. code:: python    import time    from yaspin import yaspin    with yaspin().white.bold.shark.on_blue as sp:        sp.text = &quot;White bold shark in a blue sea&quot;        time.sleep(5).. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/shark.gifFeatures--------- Runs at all major **CPython** versions (*3.9*, *3.10*, *3.11*, *3.12*), **PyPy**- Supports all (70+) spinners from `cli-spinners`_- Supports all *colors*, *highlights*, *attributes* and their mixes from `termcolor`_ library- Easy to combine with other command-line libraries, e.g. `prompt-toolkit`_- Flexible API, easy to integrate with existing code- User-friendly API for handling POSIX `signals`_- Safe **pipes** and **redirects**:.. code-block:: bash    $ python script_that_uses_yaspin.py &gt; script.log    $ python script_that_uses_yaspin.py | grep ERRORInstallation------------From `PyPI`_ using ``pip`` package manager:.. code-block:: bash    pip install --upgrade yaspinOr install the latest sources from GitHub:.. code-block:: bash    pip install https://github.com/pavdmyt/yaspin/archive/master.zipUsage-----Basic Example/////////////.. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/basic_example.gif.. code:: python    import time    from random import randint    from yaspin import yaspin    with yaspin(text=&quot;Loading&quot;, color=&quot;yellow&quot;) as spinner:        time.sleep(2)  # time consuming code        success = randint(0, 1)        if success:            spinner.ok(&quot;âœ… &quot;)        else:            spinner.fail(&quot;ðŸ’¥ &quot;)It is also possible to control spinner manually:.. code:: python    import time    from yaspin import yaspin    spinner = yaspin()    spinner.start()    time.sleep(3)  # time consuming tasks    spinner.stop()Run any spinner from `cli-spinners`_////////////////////////////////////.. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/cli_spinners.gif.. code:: python    import time    from yaspin import yaspin    from yaspin.spinners import Spinners    with yaspin(Spinners.earth, text=&quot;Earth&quot;) as sp:        time.sleep(2)                # time consuming code        # change spinner        sp.spinner = Spinners.moon        sp.text = &quot;Moon&quot;        time.sleep(2)                # time consuming codeAny Colour You Like `ðŸŒˆ`_/////////////////////////.. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/basic_colors.gif.. code:: python    import time    from yaspin import yaspin    with yaspin(text=&quot;Colors!&quot;) as sp:        # Support all basic termcolor text colors        colors = (&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;blue&quot;, &quot;magenta&quot;, &quot;cyan&quot;, &quot;white&quot;)        for color in colors:            sp.color, sp.text = color, color            time.sleep(1)Advanced colors usage/////////////////////.. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/advanced_colors.gif.. code:: python    import time    from yaspin import yaspin    from yaspin.spinners import Spinners    text = &quot;Bold blink magenta spinner on cyan color&quot;    with yaspin().bold.blink.magenta.bouncingBall.on_cyan as sp:        sp.text = text        time.sleep(3)    # The same result can be achieved by passing arguments directly    with yaspin(        Spinners.bouncingBall,        color=&quot;magenta&quot;,        on_color=&quot;on_cyan&quot;,        attrs=[&quot;bold&quot;, &quot;blink&quot;],    ) as sp:        sp.text = text        time.sleep(3)Run any spinner you want////////////////////////.. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/custom_spinners.gif.. code:: python    import time    from yaspin import yaspin, Spinner    # Compose new spinners with custom frame sequence and interval value    sp = Spinner([&quot;ðŸ˜¸&quot;, &quot;ðŸ˜¹&quot;, &quot;ðŸ˜º&quot;, &quot;ðŸ˜»&quot;, &quot;ðŸ˜¼&quot;, &quot;ðŸ˜½&quot;, &quot;ðŸ˜¾&quot;, &quot;ðŸ˜¿&quot;, &quot;ðŸ™€&quot;], 200)    with yaspin(sp, text=&quot;Cat!&quot;):        time.sleep(3)  # cat consuming code :)Change spinner properties on the fly////////////////////////////////////.. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/sp_properties.gif.. code:: python    import time    from yaspin import yaspin    from yaspin.spinners import Spinners    with yaspin(Spinners.noise, text=&quot;Noise spinner&quot;) as sp:        time.sleep(2)        sp.spinner = Spinners.arc  # spinner type        sp.text = &quot;Arc spinner&quot;    # text along with spinner        sp.color = &quot;green&quot;         # spinner color        sp.side = &quot;right&quot;          # put spinner to the right        sp.reversal = True         # reverse spin direction        time.sleep(2)Spinner with timer//////////////////.. code:: python    import time    from yaspin import yaspin    with yaspin(text=&quot;elapsed time&quot;, timer=True) as sp:        time.sleep(3.1415)        sp.ok()Dynamic text////////////.. code:: python    import time    from datetime import datetime    from yaspin import yaspin    class TimedText:        def __init__(self, text):            self.text = text            self._start = datetime.now()        def __str__(self):            now = datetime.now()            delta = now - self._start            return f&quot;{self.text} ({round(delta.total_seconds(), 1)}s)&quot;    with yaspin(text=TimedText(&quot;time passed:&quot;)):        time.sleep(3)Writing messages////////////////.. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/write_text.gifYou should not write any message in the terminal using ``print`` while spinner is open.To write messages in the terminal without any collision with ``yaspin`` spinner, a ``.write()`` method is provided:.. code:: python    import time    from yaspin import yaspin    with yaspin(text=&quot;Downloading images&quot;, color=&quot;cyan&quot;) as sp:        # task 1        time.sleep(1)        sp.write(&quot;&gt; image 1 download complete&quot;)        # task 2        time.sleep(2)        sp.write(&quot;&gt; image 2 download complete&quot;)        # finalize        sp.ok(&quot;âœ”&quot;)Integration with other libraries////////////////////////////////.. image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/gifs/hide_show.gifUtilizing ``hidden`` context manager it is possible to toggle the display ofthe spinner in order to call custom methods that write to the terminal. This ishelpful for allowing easy usage in other frameworks like `prompt-toolkit`_.Using the powerful ``print_formatted_text`` function allows you even to applyHTML formats and CSS styles to the output:.. code:: python    import sys    import time    from yaspin import yaspin    from prompt_toolkit import HTML, print_formatted_text    from prompt_toolkit.styles import Style    # override print with feature-rich ``print_formatted_text`` from prompt_toolkit    print = print_formatted_text    # build a basic prompt_toolkit style for styling the HTML wrapped text    style = Style.from_dict({        'msg': '#4caf50 bold',        'sub-msg': '#616161 italic'    })    with yaspin(text='Downloading images') as sp:        # task 1        time.sleep(1)        with sp.hidden():            print(HTML(                u'&lt;b&gt;&gt;&lt;/b&gt; &lt;msg&gt;image 1&lt;/msg&gt; &lt;sub-msg&gt;download complete&lt;/sub-msg&gt;'            ), style=style)        # task 2        time.sleep(2)        with sp.hidden():            print(HTML(                u'&lt;b&gt;&gt;&lt;/b&gt; &lt;msg&gt;image 2&lt;/msg&gt; &lt;sub-msg&gt;download complete&lt;/sub-msg&gt;'            ), style=style)        # finalize        sp.ok()Handling POSIX `signals`_/////////////////////////Handling keyboard interrupts (pressing Control-C):.. code:: python    import time    from yaspin import kbi_safe_yaspin    with kbi_safe_yaspin(text=&quot;Press Control+C to send SIGINT (Keyboard Interrupt) signal&quot;):        time.sleep(5)  # time consuming codeHandling other types of signals:.. code:: python    import os    import time    from signal import SIGTERM, SIGUSR1    from yaspin import yaspin    from yaspin.signal_handlers import default_handler, fancy_handler    sigmap = {SIGUSR1: default_handler, SIGTERM: fancy_handler}    with yaspin(sigmap=sigmap, text=&quot;Handling SIGUSR1 and SIGTERM signals&quot;) as sp:        sp.write(&quot;Send signals using `kill` command&quot;)        sp.write(&quot;E.g. $ kill -USR1 {0}&quot;.format(os.getpid()))        time.sleep(20)  # time consuming codeMore `examples`_.Development-----------Clone the repository:.. code-block:: bash    git clone https://github.com/pavdmyt/yaspin.gitInstall dev dependencies:.. code-block:: bash    poetry install    # if you don't have poetry installed:    pip install -r requirements.txtLint code:.. code-block:: bash    make lintFormat code:.. code-block:: bash    make black-fmtRun tests:.. code-block:: bash    make testContributing------------1. Fork it!2. Create your feature branch: ``git checkout -b my-new-feature``3. Commit your changes: ``git commit -m 'Add some feature'``4. Push to the branch: ``git push origin my-new-feature``5. Submit a pull request6. Make sure tests are passingLicense-------* MIT - Pavlo Dmytrenko; https://twitter.com/pavdmyt* Contains data from `cli-spinners`_: MIT License, Copyright (c) Sindre Sorhus sindresorhus@gmail.com (sindresorhus.com).. |Logo| image:: https://raw.githubusercontent.com/pavdmyt/yaspin/master/static/logo_80.png   :alt: yaspin Logo.. |Coverage| image:: https://codecov.io/gh/pavdmyt/yaspin/branch/master/graph/badge.svg   :target: https://codecov.io/gh/pavdmyt/yaspin.. |pypi| image:: https://img.shields.io/pypi/v/yaspin.svg   :target: https://pypi.org/project/yaspin/.. |Versions| image:: https://img.shields.io/pypi/pyversions/yaspin.svg   :target: https://pypi.org/project/yaspin/.. |Wheel| image:: https://img.shields.io/pypi/wheel/yaspin.svg   :target: https://pypi.org/project/yaspin/.. |Examples| image:: https://img.shields.io/badge/learn%20by-examples-0077b3.svg   :target: https://github.com/pavdmyt/yaspin/tree/master/examples.. |black-fmt| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/ambv/black.. |DownloadsTot| image:: https://static.pepy.tech/badge/yaspin   :target: https://pepy.tech/project/yaspin.. |DownloadsW| image:: https://static.pepy.tech/badge/yaspin/week   :target: https://pepy.tech/project/yaspin.. _context manager: https://docs.python.org/3/reference/datamodel.html#context-managers.. _decorator: https://www.thecodeship.com/patterns/guide-to-python-function-decorators/.. _cli-spinners: https://github.com/sindresorhus/cli-spinners.. _termcolor: https://pypi.org/project/termcolor/.. _PyPI: https://pypi.org/.. _ðŸŒˆ: https://en.wikipedia.org/wiki/Any_Colour_You_Like.. _examples: https://github.com/pavdmyt/yaspin/tree/master/examples.. _prompt-toolkit: https://github.com/jonathanslenders/python-prompt-toolkit/.. _signals: https://www.computerhope.com/unix/signals.htm</longdescription>
</pkgmetadata>