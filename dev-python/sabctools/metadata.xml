<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SABCTools - C implementations of functions for use within SABnzbd  ===============================    This module implements three main sets of C implementations that are used within SABnzbd:   * yEnc decoding and encoding using SIMD routines  * CRC32 calculations  * Non-blocking SSL-socket reading  * Marking files as sparseOf course, they can also be used in any other application.## yEnc decoding and encoding using SIMD routinesyEnc decoding and encoding performed by using [yencode](https://github.com/animetosho/node-yencode) from animetosho,   which utilizes x86/ARM SIMD optimised routines if such CPU features are available.    ## CRC32 calculationsWe used the `crcutil` library for very fast CRC calculations.## Non-blocking SSL-socket reading  When Python reads data from a non-blocking SSL socket, it is limited to receiving 16K data at once. This module implements a patched version that can read as much data is available at once.For more details, see the [cpython pull request](https://github.com/python/cpython/pull/31492).## Marking files as sparseUses Windows specific system calls to mark files as sparse and set the desired size.On other platforms the same is achieved by calling `truncate`.  # Installing    As simple as running:  ```  pip install sabctools --upgrade  ```  When you want to compile from sources, you can run in the `sabctools` directory:  ```  pip install .  ```  ## SIMD detection  To see which SIMD set was detected on your system, run:  ```  python -c &quot;import sabctools; print(sabctools.simd);&quot;  ```    ## OpenSSL detection  To see if we could link to OpenSSL library on your system, run:  ```  python -c &quot;import sabctools; print(sabctools.openssl_linked);&quot;  ```  # Testing    For testing we use `pytest` (install via `pip install -r tests/requirements.txt`) and test can simply be executed by browsing to the `sabctools` directory and running:  ```  pytest  ```  Note that tests can fail if `git` modified the line endings of data files when checking out the repository!  </longdescription>
</pkgmetadata>