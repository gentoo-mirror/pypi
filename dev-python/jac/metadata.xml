<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://travis-ci.org/jaysonsantos/jinja-assets-compressor.svg?branch=master    :target: https://travis-ci.org/jaysonsantos/jinja-assets-compressor    :alt: Build Statusjinja-assets-compressor=======================A Jinja2 extension to compile and/or compress your assets.Installing----------::    pip install jacFor LESS and CSS support, install `less &lt;https://www.npmjs.org/package/less&gt;`_::    npm install -g lessFor COFFEE support, install `coffee-script &lt;https://www.npmjs.com/package/coffee-script&gt;`_::    npm install -g coffee-scriptFor Sass and SCSS support, install `sass &lt;https://rubygems.org/gems/sass&gt;`_::    gem install sassJavaScript minification is built-in using the Python`rJsmin &lt;https://pypi.python.org/pypi/rjsmin&gt;`_ package.When installing on Mac OS X set this shell variable, because jac dependenciescontain C code::    export CFLAGS=-Qunused-argumentsUsage-----To use it, you just have to put your css or js inside a compress tag... code-block:: python    {% compress 'css' %}    &lt;style type=&quot;text/sass&quot;&gt;    sass stuff    &lt;/style&gt;    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/sass&quot; href=&quot;file.sass&quot;&gt;    {% endcompress %}    {% compress 'js' %}    &lt;script type=&quot;text/coffeescript&quot;&gt;    coffee stuff    &lt;/script&gt;    &lt;script type=&quot;text/coffeescript&quot; src=&quot;file.coffee&quot;&gt;&lt;/script&gt;    {% endcompress %}Configuring Jinja-----------------You just have to create an environment with jac on it and configure output dir,static prefix and say where it can find your sources... code-block:: python    import jinja2    from jac import CompressorExtension    env = jinja2.Environment(extensions=[CompressorExtension])    env.compressor_output_dir = './static/dist'    env.compressor_static_prefix = '/static'    env.compressor_source_dirs = './static_files'After that just use ``template = env.from_string(html); template.render()`` toget it done.Configuring Flask-----------------Where you configure your app, just do this:.. code-block:: python    from jac.contrib.flask import JAC    app = Flask(__name__)    app.config['COMPRESSOR_DEBUG'] = app.config.get('DEBUG')    app.config['COMPRESSOR_OUTPUT_DIR'] = './static/dist'    app.config['COMPRESSOR_STATIC_PREFIX'] = '/static'    jac = JAC(app)And you are done.Offline Compression-------------------JAC supports compressing static assets offline, then deploying to a productionserver. Here is a command to compress your static assets if using Flask: ::    python -m jac.contrib.flask my_flask_module:create_appReplace ``my_flask_module`` with the correct import path to find your Flask app.Custom Compressors------------------The ``compressor_classes`` template env variable tells jac which compressor touse for each mimetype. The default value for ``compressor_classes`` is:.. code-block:: python    {        'text/css': LessCompressor,        'text/coffeescript': CoffeeScriptCompressor,        'text/less': LessCompressor,        'text/javascript': JavaScriptCompressor,        'text/sass': SassCompressor,        'text/scss': SassCompressor,    }To use an alternate compressor class, provide a class with a ``compile`` classmethod accepting arg ``text`` and kwargs ``mimetype``, ``cwd``, ``uri_cwd``,and ``debug``. For example, to use`libsass-python &lt;https://github.com/dahlia/libsass-python&gt;`_ for SASS filesinstead of the built-in SassCompressor, create your custom compressor class:.. code-block:: python    import sass    class CustomSassCompressor(object):        &quot;&quot;&quot;Custom compressor for text/sass mimetype.        Uses libsass-python for compression.        &quot;&quot;&quot;        @classmethod        def compile(cls, text, cwd=None, **kwargs):            include_paths = []            if cwd:                include_paths += [cwd]            return sass.compile(string=text, include_paths=include_paths)Then tell jac to use your custom compressor for ``text/sass`` mimetypes:.. code-block:: python    env.compressor_classes['text/sass'] = CustomSassCompressorThe equivalent for Flask is:.. code-block:: python    jac.set_compressor('text/sass', CustomSassCompressor)To only customize the path of a compressor which forks a subprocess for thecompile step (LessCompressor, CoffeeScriptCompressor, and SassCompressor), justextend the compressor class and overwrite the ``binary`` class attribute:.. code-block:: python    from jac.compressors import SassCompressor    class CustomSassCompressor(SassCompressor):        &quot;&quot;&quot;Custom SASS compressor using Compass binary instead of libsass for text/sass mimetype.        Uses the faster libsass wrapper sassc for SASS compression.        https://github.com/sass/sassc        &quot;&quot;&quot;        binary = '/usr/bin/sassc'    # Tell Flask to use our custom SASS compressor    jac.set_compressor('text/sass', CustomSassCompressor)Running Tests-------------::    virtualenv venv    . venv/bin/activate    pip install -r requirements_tests.txt    make coverage    make lintOr use tox to run with multiple python versions:::    pip install tox    toxCHANGELOG---------0.17.2``````- Make sure that flask contrib script always push an app context.0.17.1``````- Fix error when the blueprint cannot be found (i.e. flask debug toolbar)0.17.0``````- Fix app factory initialization- Change how tests and linters run- Add compress command to `jac.contrib.flask`</longdescription>
</pkgmetadata>