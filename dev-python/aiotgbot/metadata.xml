<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=========================================Asynchronous library for Telegram bot API=========================================.. image:: https://badge.fury.io/py/aiotgbot.svg   :target: https://pypi.org/project/aiotgbot   :alt: Latest PyPI package version.. image:: https://img.shields.io/badge/license-MIT-blue.svg   :target: https://github.com/gleb-chipiga/aiotgbot/blob/master/LICENSE   :alt: License.. image:: https://img.shields.io/pypi/dm/aiotgbot   :target: https://pypistats.org/packages/aiotgbot   :alt: Downloads countKey Features============* Asyncio and `aiohttp &lt;https://github.com/aio-libs/aiohttp&gt;`_ based* All `Telegram Bot API &lt;https://core.telegram.org/bots/api&gt;`_ types and methods supported* Bot API rate limit support* Both long polling and webhooks supported* Fully type annotated (`PEP 484 &lt;https://www.python.org/dev/peps/pep-0484/&gt;`_)Installation============aiotgbot is available on PyPI. Use pip to install it:.. code-block:: bash    pip install aiotgbotRequirements============* Python &gt;= 3.8* `aiohttp &lt;https://github.com/aio-libs/aiohttp&gt;`_* `aiojobs &lt;https://github.com/aio-libs/aiojobs&gt;`_* `attrs &lt;https://github.com/python-attrs/attrs&gt;`_* `backoff &lt;https://github.com/litl/backoff&gt;`_* `frozenlist &lt;https://github.com/aio-libs/frozenlist&gt;`_* `aiofreqlimit &lt;https://github.com/gleb-chipiga/aiofreqlimit&gt;`_* `yarl &lt;https://github.com/aio-libs/yarl&gt;`_Using aiotgbot==================.. code-block:: python    from typing import AsyncIterator    from aiotgbot import (Bot, BotUpdate, HandlerTable, PollBot,                          PrivateChatFilter, Runner)    from aiotgbot.storage_memory import MemoryStorage    handlers = HandlerTable()    @handlers.message(filters=[PrivateChatFilter()])    async def reply_private_message(bot: Bot, update: BotUpdate) -&gt; None:        assert update.message is not None        name = (f'{update.message.chat.first_name} '                f'{update.message.chat.last_name}')        await bot.send_message(update.message.chat.id, f'Hello, {name}!')    async def run_context(runner: Runner) -&gt; AsyncIterator[None]:        storage = MemoryStorage()        await storage.connect()        handlers.freeze()        bot = PollBot(runner['token'], handlers, storage)        await bot.start()        yield        await bot.stop()        await storage.close()    def main() -&gt; None:        runner = Runner(run_context)        runner['token'] = 'some:token'        runner.run()    if __name__ == '__main__':        main()</longdescription>
</pkgmetadata>