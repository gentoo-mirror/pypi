<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SmileIdentityCoreThe official Smile Identity library exposes four classes namely; the WebApi class, the IDApi class, the Signature class, and the Utilities class.The **WebApi Class** allows you as the Partner to validate a user’s identity against the relevant Identity Authorities/Third Party databases that Smile Identity has access to using ID information provided by your customer/user (including photo for compare). It has the following public method:- submit_job- get_web_tokenThe **IDApi Class** lets you perform basic KYC Services including verifying an ID number as well as retrieve a user's Personal Information. It has the following public methods:- submit_jobThe **Signature Class** allows you as the Partner to generate a signature key to interact with our servers. It has the following public methods:- `generate_signature` - generate a signature which is then passed as a signature param when making requests to the Smile Identity server.- `confirm_signature` - ensure a response is truly from the Smile Identity server by confirming the incoming signature.The **Utilities Class** allows you as the Partner to have access to our general Utility functions to gain access to your data. It has the following public methods:- get_job_status- validate_id_params- validate_partner_params- get_smile_id_services### SecurityThe signature field is our new improved means of signing requests. To calculate a signature you need to generate an api key. Generating an api key does not invalidate existing v1 keys so you can safely upgrade. The library will default to calculating the new signature.## DocumentationThis library requires specific input parameters, for more detail on these parameters please refer to our [documentation for Web API](https://docs.smileidentity.com/products/core-libraries/python).Please note that you will have to be a Smile Identity Partner to be able to query our services. You can sign up on the [Portal](https://portal.smileidentity.com/signup).## InstallationView the package on [Pypi](https://pypi.org/project/smile-id-core/).Add the group, name and version to your application's build file, it will look similar based on your build tool:```shellpip install smile-id-core```You now may use the classes as follows:#### WebApi ClassImport the necessary dependant classes for Web Api:```pythonfrom smile_id_core import WebApi```##### submit_job methodYour call to the library will be similar to the below code snippet:```pythonfrom smile_id_core import WebApi, ServerErrorconnection = WebApi(    partner_id=&quot;125&quot;,     call_back_url=&quot;default_callback.com&quot;,     api_key=&quot;&lt;the decoded-version of-your-api-key&gt;&quot;,     sid_server=0)partner_params = {    &quot;user_id&quot;: str(&quot;uuid4&quot;),    &quot;job_id&quot;: str(&quot;uuid4&quot;),    &quot;job_type&quot;: 1,}id_info_params = {    &quot;first_name&quot;: &quot;FirstName&quot;,    &quot;middle_name&quot;: &quot;LastName&quot;,    &quot;last_name&quot;: &quot;MiddleName&quot;,    &quot;country&quot;: &quot;NG&quot;,    &quot;id_type&quot;: &quot;PASSPORT&quot;,    &quot;id_number&quot;: &quot;A00000000&quot;,    &quot;dob&quot;: &quot;1989-09-20&quot;,    &quot;phone_number&quot;: &quot;&quot;,    &quot;entered&quot;: True,}image_params = [{&quot;image_type_id&quot;: &quot;2&quot;, &quot;image&quot;: &quot;base6image&quot;}]options_params = {    &quot;return_job_status&quot;: True,    &quot;return_history&quot;: True,    &quot;return_images&quot;: True,    &quot;signature&quot;: True,    &quot;use_enrolled_image&quot;: True # Perform document verification (job_type 6) for a registered user i.e. use the user’s registered selfie}try:    response = connection.submit_job(partner_params, image_params, id_info_params, options_params, use_validation_api=True)except ValueError:    # some of your params entered for a job are not valid or missing    print(&quot;handle ValueError&quot;)except ServerError:    # Server returned an error    print(&quot;handle ServerError&quot;)except FileNotFoundError:    # Sent a file which could not be found    print(&quot;handle FileNotFoundError&quot;)```In the case of a Job Type 5 (_Validate an ID_) you can simply omit the the image_params and options_params keys. Remember that the response is immediate, so there is no need to query the job_status. There is also no enrollment so no images are required. The response for a job type 5 can be found in the response section below.```pythonresponse = connection.submit_job(partner_params, None, id_info, None)````use_validation_api` is optional and defaults to true. This will call the smile server and gets all requiredinput information for a job type and id type and checks if you  have provided required information, else it will throw an exception.**Response:**Should you choose to *set return_job_status to false*, the response will be a JSON String containing:```json{&quot;success&quot;: true, &quot;smile_job_id&quot;: smile_job_id}```However, if you have *set return_job_status to true (with image_links and history)* then you will receive JSON Object response like below:```json{    &quot;job_success&quot;: true,    &quot;result&quot;: {        &quot;ConfidenceValue&quot;: &quot;99&quot;,        &quot;JSONVersion&quot;: &quot;1.0.0&quot;,        &quot;Actions&quot;: {            &quot;Verify_ID_Number&quot;: &quot;Verified&quot;,            &quot;Return_Personal_Info&quot;: &quot;Returned&quot;,            &quot;Human_Review_Update_Selfie&quot;: &quot;Not Applicable&quot;,            &quot;Human_Review_Compare&quot;: &quot;Not Applicable&quot;,            &quot;Update_Registered_Selfie_On_File&quot;: &quot;Not Applicable&quot;,            &quot;Liveness_Check&quot;: &quot;Not Applicable&quot;,            &quot;Register_Selfie&quot;: &quot;Approved&quot;,            &quot;Human_Review_Liveness_Check&quot;: &quot;Not Applicable&quot;,            &quot;Selfie_To_ID_Authority_Compare&quot;: &quot;Completed&quot;,            &quot;Selfie_To_ID_Card_Compare&quot;: &quot;Not Applicable&quot;,            &quot;Selfie_To_Registered_Selfie_Compare&quot;: &quot;Not Applicable&quot;        },        &quot;ResultText&quot;: &quot;Enroll User&quot;,        &quot;IsFinalResult&quot;: &quot;true&quot;,        &quot;IsMachineResult&quot;: &quot;true&quot;,        &quot;ResultType&quot;: &quot;SAIA&quot;,        &quot;PartnerParams&quot;: {            &quot;job_type&quot;: &quot;1&quot;,            &quot;optional_info&quot;: &quot;we are one&quot;,            &quot;user_id&quot;: &quot;HBBBBBBH57g&quot;,            &quot;job_id&quot;: &quot;HBBBBBBHg&quot;        },        &quot;Source&quot;: &quot;WebAPI&quot;,        &quot;ResultCode&quot;: &quot;0810&quot;,        &quot;SmileJobID&quot;: &quot;0000001111&quot;    },    &quot;code&quot;: &quot;2302&quot;,    &quot;job_complete&quot;: true,    &quot;signature&quot;: &quot;HKBhxcv+1qaLy\C7PjVtk257dE=|1577b051a4313ed5e3e4d29893a66f966e31af0a2d2f6bec2a7f2e00f2701259&quot;,    &quot;history&quot;: [        {            &quot;ConfidenceValue&quot;: &quot;99&quot;,            &quot;JSONVersion&quot;: &quot;1.0.0&quot;,            &quot;Actions&quot;: {                &quot;Verify_ID_Number&quot;: &quot;Verified&quot;,                &quot;Return_Personal_Info&quot;: &quot;Returned&quot;,                &quot;Human_Review_Update_Selfie&quot;: &quot;Not Applicable&quot;,                &quot;Human_Review_Compare&quot;: &quot;Not Applicable&quot;,                &quot;Update_Registered_Selfie_On_File&quot;: &quot;Not Applicable&quot;,                &quot;Liveness_Check&quot;: &quot;Not Applicable&quot;,                &quot;Register_Selfie&quot;: &quot;Approved&quot;,                &quot;Human_Review_Liveness_Check&quot;: &quot;Not Applicable&quot;,                &quot;Selfie_To_ID_Authority_Compare&quot;: &quot;Completed&quot;,                &quot;Selfie_To_ID_Card_Compare&quot;: &quot;Not Applicable&quot;,                &quot;Selfie_To_Registered_Selfie_Compare&quot;: &quot;Not Applicable&quot;            },            &quot;ResultText&quot;: &quot;Enroll User&quot;,            &quot;IsFinalResult&quot;: &quot;true&quot;,            &quot;IsMachineResult&quot;: &quot;true&quot;,            &quot;ResultType&quot;: &quot;SAIA&quot;,            &quot;PartnerParams&quot;: {                &quot;job_type&quot;: &quot;1&quot;,                &quot;optional_info&quot;: &quot;we are one&quot;,                &quot;user_id&quot;: &quot;HBBBBBBH57g&quot;,                &quot;job_id&quot;: &quot;HBBBBBBHg&quot;            },            &quot;Source&quot;: &quot;WebAPI&quot;,            &quot;ResultCode&quot;: &quot;0810&quot;,            &quot;SmileJobID&quot;: &quot;0000001111&quot;        }    ],    &quot;image_links&quot;: {        &quot;selfie_image&quot;: &quot;image_link&quot;    },    &quot;timestamp&quot;: &quot;2019-10-10T12:32:04.622Z&quot;,    &quot;success&quot;: true,    &quot;smile_job_id&quot;: &quot;0000001111&quot;}```You can also *view your response asynchronously at the callback* that you have set, it will look as follows:```json{    &quot;job_success&quot;: true,    &quot;result&quot;: {        &quot;ConfidenceValue&quot;: &quot;99&quot;,        &quot;JSONVersion&quot;: &quot;1.0.0&quot;,        &quot;Actions&quot;: {            &quot;Verify_ID_Number&quot;: &quot;Verified&quot;,            &quot;Return_Personal_Info&quot;: &quot;Returned&quot;,            &quot;Human_Review_Update_Selfie&quot;: &quot;Not Applicable&quot;,            &quot;Human_Review_Compare&quot;: &quot;Not Applicable&quot;,            &quot;Update_Registered_Selfie_On_File&quot;: &quot;Not Applicable&quot;,            &quot;Liveness_Check&quot;: &quot;Not Applicable&quot;,            &quot;Register_Selfie&quot;: &quot;Approved&quot;,            &quot;Human_Review_Liveness_Check&quot;: &quot;Not Applicable&quot;,            &quot;Selfie_To_ID_Authority_Compare&quot;: &quot;Completed&quot;,            &quot;Selfie_To_ID_Card_Compare&quot;: &quot;Not Applicable&quot;,            &quot;Selfie_To_Registered_Selfie_Compare&quot;: &quot;Not Applicable&quot;        },        &quot;ResultText&quot;: &quot;Enroll User&quot;,        &quot;IsFinalResult&quot;: &quot;true&quot;,        &quot;IsMachineResult&quot;: &quot;true&quot;,        &quot;ResultType&quot;: &quot;SAIA&quot;,        &quot;PartnerParams&quot;: {            &quot;job_type&quot;: &quot;1&quot;,            &quot;optional_info&quot;: &quot;we are one&quot;,            &quot;user_id&quot;: &quot;HBBBBBBH57g&quot;,            &quot;job_id&quot;: &quot;HBBBBBBHg&quot;        },        &quot;Source&quot;: &quot;WebAPI&quot;,        &quot;ResultCode&quot;: &quot;0810&quot;,        &quot;SmileJobID&quot;: &quot;0000001111&quot;    },    &quot;code&quot;: &quot;2302&quot;,    &quot;job_complete&quot;: true,    &quot;signature&quot;: &quot;HKBhxcv+1qaLy\C7PjVtk257dE=|1577b051a4313ed5e3e4d29893a66f966e31af0a2d2f6bec2a7f2e00f2701259&quot;,    &quot;history&quot;: [        {            &quot;ConfidenceValue&quot;: &quot;99&quot;,            &quot;JSONVersion&quot;: &quot;1.0.0&quot;,            &quot;Actions&quot;: {                &quot;Verify_ID_Number&quot;: &quot;Verified&quot;,                &quot;Return_Personal_Info&quot;: &quot;Returned&quot;,                &quot;Human_Review_Update_Selfie&quot;: &quot;Not Applicable&quot;,                &quot;Human_Review_Compare&quot;: &quot;Not Applicable&quot;,                &quot;Update_Registered_Selfie_On_File&quot;: &quot;Not Applicable&quot;,                &quot;Liveness_Check&quot;: &quot;Not Applicable&quot;,                &quot;Register_Selfie&quot;: &quot;Approved&quot;,                &quot;Human_Review_Liveness_Check&quot;: &quot;Not Applicable&quot;,                &quot;Selfie_To_ID_Authority_Compare&quot;: &quot;Completed&quot;,                &quot;Selfie_To_ID_Card_Compare&quot;: &quot;Not Applicable&quot;,                &quot;Selfie_To_Registered_Selfie_Compare&quot;: &quot;Not Applicable&quot;            },            &quot;ResultText&quot;: &quot;Enroll User&quot;,            &quot;IsFinalResult&quot;: &quot;true&quot;,            &quot;IsMachineResult&quot;: &quot;true&quot;,            &quot;ResultType&quot;: &quot;SAIA&quot;,            &quot;PartnerParams&quot;: {                &quot;job_type&quot;: &quot;1&quot;,                &quot;optional_info&quot;: &quot;we are one&quot;,                &quot;user_id&quot;: &quot;HBBBBBBH57g&quot;,                &quot;job_id&quot;: &quot;HBBBBBBHg&quot;            },            &quot;Source&quot;: &quot;WebAPI&quot;,            &quot;ResultCode&quot;: &quot;0810&quot;,            &quot;SmileJobID&quot;: &quot;0000001111&quot;        }    ],    &quot;image_links&quot;: {        &quot;selfie_image&quot;: &quot;image_link&quot;    },    &quot;timestamp&quot;: &quot;2019-10-10T12:32:04.622Z&quot;}```If you have queried a job type 5 (_Validate an ID_), your response be a JSON String that will contain the following:```json{   &quot;JSONVersion&quot;:&quot;1.0.0&quot;,   &quot;SmileJobID&quot;:&quot;0000001105&quot;,   &quot;PartnerParams&quot;:{      &quot;user_id&quot;:&quot;T6yzdOezucdsPrY0QG9LYNDGOrC&quot;,      &quot;job_id&quot;:&quot;FS1kd1dd15JUpd87gTBDapvFxv0&quot;,      &quot;job_type&quot;:5   },   &quot;ResultType&quot;:&quot;ID Verification&quot;,   &quot;ResultText&quot;:&quot;ID Number Validated&quot;,   &quot;ResultCode&quot;:&quot;1012&quot;,   &quot;IsFinalResult&quot;:&quot;true&quot;,   &quot;Actions&quot;:{      &quot;Verify_ID_Number&quot;:&quot;Verified&quot;,      &quot;Return_Personal_Info&quot;:&quot;Returned&quot;   },   &quot;Country&quot;:&quot;NG&quot;,   &quot;IDType&quot;:&quot;PASSPORT&quot;,   &quot;IDNumber&quot;:&quot;A12345&quot;,   &quot;ExpirationDate&quot;:&quot;2017-10-28&quot;,   &quot;FullName&quot;:&quot;John Doe&quot;,   &quot;DOB&quot;:&quot;1900-09-20&quot;,   &quot;Photo&quot;:&quot;SomeBase64Image&quot;,   &quot;signature&quot;:&quot;pjxsx...&quot;,   &quot;timestamp&quot;:1570698930193}```##### get_job_status methodSometimes, you may want to get a particular job status at a later time. You may use the get_job_status function to do this:You will already have your Web Api or Utilities class initialised as follows:```pythonfrom smile_id_core import WebApi,Utilities,ServerErrortry:    connection = WebApi(&quot;&lt; String partner_id &gt;&quot;, &quot;&lt; String default_callback_url &gt;&quot;,                        &quot;&lt; String decoded_version_of_api_key &gt;&quot;, &quot;&lt; Integer 0 | | 1 &gt;&quot;)    # OR    connection = Utilities(&quot;&lt; String partner_id &gt;&quot;, &quot;&lt; String default_callback_url &gt;&quot;,                           &quot;&lt; String decoded_version_of_api_key &gt;&quot;, &quot;&lt; Integer 0 | | 1 &gt;&quot;)except ValueError:    # some of your params entered for a job are not valid or missing    print(&quot;handle ValueError&quot;)# Thereafter, simply call get_job_status with the correct parameters using the classes we have provided:# create the stringified json for the partner params using our class (i.e. user_id, job_id, and job_type that you would are querying)partner_params = {    &quot;user_id&quot;: str(uuid4()),    &quot;job_id&quot;: str(uuid4()),    &quot;job_type&quot;: 1,}# create the options - whether you would like to return_history and return_image_links in the job status responseoptions_params = {    &quot;return_job_status&quot;: True,    &quot;return_history&quot;: True,    &quot;return_images&quot;: True,    &quot;signature&quot;: True # optional param to use the new signature calculation for API Key V2}try:    response = connection.get_job_status(partner_params, options_params)except ValueError:    # some of your params entered for a job are not valid or missing    print(&quot;handle ValueError&quot;)except ServerError:    # Server returned an error    print(&quot;handle ServerError&quot;)```##### get_web_token methodYou may want to use our hosted web integration, and create a session. The `get_web_token` function enables this.You have your Web Api class initialised as follows:```pythonfrom smile_id_core import WebApiconnection = WebApi(partner_id, default_callback, api_key, sid_server);```Next, you'll need to create your request object. This should take the followingstructure:```json{&quot;user_id&quot;: 'user-1', // String: required&quot;job_id&quot;: 'job-1', // String: required&quot;product&quot;: 'authentication', // String: required one of 'authentication', 'basic_kyc', 'smartselfie', 'biometric_kyc', 'enhanced_kyc', 'document_verification'&quot;callback_url&quot;: &quot;https://smileidentity.com/callback&quot; // String: required, optional if callback url was set during instantiation of the class}```Thereafter, call `get_web_token` with the correct parameters:```python  response = connection.get_web_token(requestParams)```**Response**Your response will return a promise that contains a JSON Object below:```json{&quot;token&quot;: &quot;&lt;token_string&gt;&quot;}```#### ID Api ClassAn API that lets you performs basic KYC Services including verifying an ID number as well as retrieve a user's Personal InformationImport the necessary dependant classes for ID Api:```pythonfrom smile_id_core import IdApi, ServerError```##### submit_job methodYour call to the library will be similar to the below code snippet:```pythonfrom smile_id_core import IdApi, ServerErrorpartner_params = {    &quot;user_id&quot;: str(uuid4()),    &quot;job_id&quot;: str(uuid4()),    &quot;job_type&quot;: 5,}id_info_params = {    &quot;first_name&quot;: &quot;FirstName&quot;,    &quot;middle_name&quot;: &quot;LastName&quot;,    &quot;last_name&quot;: &quot;MiddleName&quot;,    &quot;country&quot;: &quot;NG&quot;,    &quot;id_type&quot;: &quot;PASSPORT&quot;,    &quot;id_number&quot;: &quot;A00000000&quot;,    &quot;dob&quot;: &quot;1989-09-20&quot;,    &quot;phone_number&quot;: &quot;&quot;,    &quot;entered&quot;: True,}option_params = {    &quot;signature&quot;: True # optional param to use the new signature calculation for API Key V2}try:    connection = IdApi(&quot;&lt; String partner_id &gt;&quot;, &quot;&lt; String decoded_version_of_api_key &gt;&quot;, &quot;&lt; Integer 0 | | 1 &gt;&quot;)    response = connection.submit_job(partner_params, id_info_params,option_params)except ValueError:    # some of your params entered for a job are not valid or missing    print(&quot;handle ValueError&quot;)except ServerError:    # Server returned an error    print(&quot;handle ServerError&quot;)  ```use_validation_api is optional and defaults to true this will call the smile server and gets all requiredinput information for a job type and id type and checks if you  have provided required information else it will throw an exception**Response**Your response will return a JSON String containing the below:```json{   &quot;JSONVersion&quot;:&quot;1.0.0&quot;,   &quot;SmileJobID&quot;:&quot;0000001105&quot;,   &quot;PartnerParams&quot;:{      &quot;user_id&quot;:&quot;T6yzdOezucdsPrY0QG9LYNDGOrC&quot;,      &quot;job_id&quot;:&quot;FS1kd1dd15JUpd87gTBDapvFxv0&quot;,      &quot;job_type&quot;:5   },   &quot;ResultType&quot;:&quot;ID Verification&quot;,   &quot;ResultText&quot;:&quot;ID Number Validated&quot;,   &quot;ResultCode&quot;:&quot;1012&quot;,   &quot;IsFinalResult&quot;:&quot;true&quot;,   &quot;Actions&quot;:{      &quot;Verify_ID_Number&quot;:&quot;Verified&quot;,      &quot;Return_Personal_Info&quot;:&quot;Returned&quot;   },   &quot;Country&quot;:&quot;NG&quot;,   &quot;IDType&quot;:&quot;PASSPORT&quot;,   &quot;IDNumber&quot;:&quot;A12345&quot;,   &quot;ExpirationDate&quot;:&quot;2017-10-28&quot;,   &quot;FullName&quot;:&quot;John Doe&quot;,   &quot;DOB&quot;:&quot;1900-09-20&quot;,   &quot;Photo&quot;:&quot;SomeBase64Image&quot;,   &quot;signature&quot;:&quot;pjxsx...&quot;,   &quot;timestamp&quot;:1570698930193}```#### Signature Class##### `generate_signature` methodUse the Signature class as follows:For API Key V1 (Legacy)```pythonfrom smile_id_core import Signaturesignature = Signature(&quot;partner_id&quot;, &quot;api_key&quot;)signature_dict = signature.generate_signature(timestamp)  # where timestamp is optional```The response will be a dict:```json{    &quot;signature&quot;: &quot;&lt;the generated signature&gt;&quot;,    &quot;timestamp&quot;: &quot;&lt;timestamp that you passed in or that was generated&gt;&quot;}```For API Key V2```pythonfrom smile_id_core import Signaturesignature = Signature(&quot;partner_id&quot;, &quot;api_key&quot;)signature_dict = signature.generate_signature(timestamp)  # where timestamp is optional```The response will be a dict:```json{    &quot;signature&quot;: &quot;&lt;the generated signature&gt;&quot;,    &quot;timestamp&quot;: &quot;&lt;timestamp that you passed in or that was generated&gt;&quot;}```#### Utilities ClassYou may want to receive more information about a job. This is built into Web Api if you choose to set return_job_status as true in the options class. However, you also have the option to build the functionality yourself by using the Utilities class. Please note that if you are querying a job immediately after submitting it, you will need to poll it for the duration of the job.```pythonfrom smile_id_core import Utilities, ServerErrortry:    connection = Utilities(&quot;&lt;partner_id&gt;&quot;, &quot;&lt;the decoded-version of-your-api-key&gt;&quot;, &quot;&lt;sid_server&gt;&quot;)    job_status = connection.get_job_status(&quot;&lt;partner_params&gt;&quot;, &quot;&lt;option_params&gt;&quot;, &quot;&lt;signature_params&gt;&quot;)    print(job_status)except ValueError:    # some of your params entered for a job are not valid or missing    print(&quot;handle ValueError&quot;)except ServerError:    # Server returned an error    print(&quot;handle ServerError&quot;)```This returns the job status as stringified json data.```pythonfrom smile_id_core import Utilitiestry:    Utilities.validate_id_params(&quot;sid_server&lt;0 for test or 1 for live or a string url&gt;&quot;, &quot;id_info_params&quot;, &quot;partner_params&quot;, &quot;use_validation_api=True&quot;)except ValueError:    # some of your params entered for a job are not valid or missing    print(&quot;handle ValueError&quot;)```This will validate id parameters using the smile services endpoint which checks the provided user id and partner params. If use_validation_api  is  False it will only do a localvalidation to check for country, id type and id number but by default this is  True and will checkagainst the smile services endpoint and if any key is missing will throw an exception```pythonfrom smile_id_core import Utilities,ServerErrortry:    Utilities.get_smile_id_services(&quot;sid_server&lt;0 for test or 1 for live or a string url&gt;&quot;)except ValueError:    # some of your params entered for a job are not valid or missing    print(&quot;handle ValueError&quot;)except ServerError:    # Server returned an error    print(&quot;handle ServerError&quot;)```This will return the smile services endpoint as a json object and  can then be used  for validation as per requirement## Development1. Ensure you have `poetry` installed: https://python-poetry.org/docs#installation2. After checking out the repo, run `poetry install`  -- this sets up a virtualenvironment and install all required packages.   1. Run `poetry shell` to activate the virtual environment.   2. Run `poetry env info` to get details about the virtual environment## DeploymentThis is the https://packaging.python.org/tutorials/packaging-projects/ that you can always reference for history.#### TestingTests are based on `pytest`.If your virtual environment is active, run `poetry run pytest` from the root of the project to run the tests.If you are outside the virtual environment, run `poetry run pytest` from the root of the project to run the tests.#### DeploymentTo release a new version:- Bump the version number in `pyproject.toml` (the version in `smile_id_core/__init__.py` will pick this up).- Update `CHANGELOG.md` with the new version number and the changes made.- Submit a pull request to the `main` branch. Merge the PR after it has been approved.- Create a git tag for the new version. The tag should be the same as the version number in `pyproject.toml`.## ContributingBug reports and pull requests are welcome on GitHub at https://github.com/smileidentity/smile-identity-core-python-3Please format the code with [black](https://github.com/psf/black) prior to submitting pull requests by running the following command from the project's root:```bashpoetry run black .```</longdescription>
</pkgmetadata>