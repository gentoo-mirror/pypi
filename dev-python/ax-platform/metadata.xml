<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img width=&quot;300&quot; src=&quot;https://ax.dev/img/ax_logo_lockup.svg&quot; alt=&quot;Ax Logo&quot; /&gt;&lt;hr/&gt;[![Support Ukraine](https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;labelColor=005BBB)](https://opensource.fb.com/support-ukraine)[![Build Status](https://img.shields.io/pypi/v/ax-platform.svg)](https://pypi.org/project/ax-platform/)[![Build Status](https://img.shields.io/pypi/pyversions/ax-platform.svg)](https://pypi.org/project/ax-platform/)[![Build Status](https://img.shields.io/pypi/wheel/ax-platform.svg)](https://pypi.org/project/ax-platform/)[![Build Status](https://github.com/facebook/Ax/workflows/Build%20and%20Test%20Workflow/badge.svg)](https://github.com/facebook/Ax/actions?query=workflow%3A%22Build+and+Test+Workflow%22)[![codecov](https://codecov.io/gh/facebook/Ax/branch/main/graph/badge.svg)](https://codecov.io/gh/facebook/Ax)[![Build Status](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)Ax is an accessible, general-purpose platform for understanding, managing,deploying, and automating adaptive experiments.Adaptive experimentation is the machine-learning guided process of iterativelyexploring a (possibly infinite) parameter space in order to identify optimalconfigurations in a resource-efficient manner. Ax currently supports Bayesianoptimization and bandit optimization as exploration strategies. Bayesianoptimization in Ax is powered by [BoTorch](https://github.com/facebookexternal/botorch),a modern library for Bayesian optimization research built on PyTorch.For full documentation and tutorials, see the [Ax website](https://ax.dev)## Why Ax?* **Versatility**: Ax supports different kinds of experiments, from dynamic ML-assisted A/B testing, to hyperparameter optimization in machine learning.* **Customization**: Ax makes it easy to add new modeling and decision algorithms, enabling research and development with minimal overhead.* **Production-completeness**: Ax comes with storage integration and ability to fully save and reload experiments.* **Support for multi-modal and constrained experimentation**: Ax allows for running and combining multiple experiments (e.g. simulation with a real-world &quot;online&quot; A/B test) and for constrained optimization (e.g. improving classification accuracy without significant increase in resource-utilization).* **Efficiency in high-noise setting**: Ax offers state-of-the-art algorithms specifically geared to noisy experiments, such as simulations with reinforcement-learning agents.* **Ease of use**: Ax includes 3 different APIs that strike different balances between lightweight structure and flexibility. Using the most concise Loop API, a whole optimization can be done in just one function call. The Service API integrates easily with external schedulers. The most elaborate Developer API affords full algorithm customization and experiment introspection.## Getting StartedTo run a simple optimization loop in Ax (using the[Booth response surface](https://www.sfu.ca/~ssurjano/booth.html) as theartificial evaluation function):```python&gt;&gt;&gt; from ax import optimize&gt;&gt;&gt; best_parameters, best_values, experiment, model = optimize(        parameters=[          {            &quot;name&quot;: &quot;x1&quot;,            &quot;type&quot;: &quot;range&quot;,            &quot;bounds&quot;: [-10.0, 10.0],          },          {            &quot;name&quot;: &quot;x2&quot;,            &quot;type&quot;: &quot;range&quot;,            &quot;bounds&quot;: [-10.0, 10.0],          },        ],        # Booth function        evaluation_function=lambda p: (p[&quot;x1&quot;] + 2*p[&quot;x2&quot;] - 7)**2 + (2*p[&quot;x1&quot;] + p[&quot;x2&quot;] - 5)**2,        minimize=True,    )# best_parameters contains {'x1': 1.02, 'x2': 2.97}; the global min is (1, 3)```## Installation### RequirementsYou need Python 3.9 or later to run Ax.The required Python dependencies are:* [botorch](https://www.botorch.org)* jinja2* pandas* scipy* sklearn* plotly &gt;=2.2.1### Stable Version#### Installing via pipWe recommend installing Ax via pip (even if using Conda environment):```conda install pytorch torchvision -c pytorch  # OSX only (details below)pip install ax-platform```Installation will use Python wheels from PyPI, available for [OSX, Linux, and Windows](https://pypi.org/project/ax-platform/#files).*Note*: Make sure the `pip` being used to install `ax-platform` is actually the one from the newly created Conda environment.If you're using a Unix-based OS, you can use `which pip` to check.*Recommendation for MacOS users*: PyTorch is a required dependency of BoTorch, and can be automatically installed via pip.However, **we recommend you [install PyTorch manually](https://pytorch.org/get-started/locally/#anaconda-1) before installing Ax, using the Anaconda package manager**.Installing from Anaconda will link against MKL (a library that optimizes mathematical computation for Intel processors).This will result in up to an order-of-magnitude speed-up for Bayesian optimization, as at the moment, installing PyTorch from pip does not link against MKL.If you need CUDA on MacOS, you will need to build PyTorch from source. Please consult the PyTorch installation instructions above.#### Optional DependenciesTo use Ax with a notebook environment, you will need Jupyter. Install it first:```pip install jupyter```If you want to store the experiments in MySQL, you will need SQLAlchemy:```pip install SQLAlchemy```### Latest Version#### Installing from GitYou can install the latest (bleeding edge) version from Git.First, see recommendation for installing PyTorch for MacOS users above.At times, the bleeding edge for Ax can depend on bleeding edge versions of BoTorch (or GPyTorch). We therefore recommend installing those from Git as well:```pip install git+https://github.com/cornellius-gp/linear_operator.gitpip install git+https://github.com/cornellius-gp/gpytorch.gitexport ALLOW_LATEST_GPYTORCH_LINOP=truepip install git+https://github.com/pytorch/botorch.gitexport ALLOW_BOTORCH_LATEST=truepip install git+https://github.com/facebook/Ax.git#egg=ax-platform```#### Optional DependenciesIf using Ax in Jupyter notebooks:```pip install git+https://github.com/facebook/Ax.git#egg=ax-platform[notebook]```To support plotly-based plotting in newer Jupyter notebook versions```pip install &quot;notebook&gt;=5.3&quot; &quot;ipywidgets==7.5&quot;```[See Plotly repo's README](https://github.com/plotly/plotly.py#jupyter-notebook-support) for details and JupyterLab instructions.If storing Ax experiments via SQLAlchemy in MySQL or SQLite:```pip install git+https://github.com/facebook/Ax.git#egg=ax-platform[mysql]```## Join the Ax Community### Getting helpPlease open an issue on our [issues page](https://github.com/facebook/Ax/issues) with any questions, feature requests or bug reports! If posting a bug report, please include a minimal reproducible example (as a code snippet) that we can use to reproduce and debug the problem you encountered.### ContributingSee the [CONTRIBUTING](CONTRIBUTING.md) file for how to help out.When contributing to Ax, we recommend cloning the [repository](https://github.com/facebook/Ax) and installing all optional dependencies:```pip install git+https://github.com/cornellius-gp/linear_operator.gitpip install git+https://github.com/cornellius-gp/gpytorch.gitexport ALLOW_LATEST_GPYTORCH_LINOP=truepip install git+https://github.com/pytorch/botorch.gitexport ALLOW_BOTORCH_LATEST=truegit clone https://github.com/facebook/ax.git --depth 1cd axpip install -e .[tutorial]```See recommendation for installing PyTorch for MacOS users above.The above example limits the cloned directory size via the[`--depth`](https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthltdepthgt)argument to `git clone`. If you require the entire commit history you may remove thisargument.## LicenseAx is licensed under the [MIT license](./LICENSE).</longdescription>
</pkgmetadata>