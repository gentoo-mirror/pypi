<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ScrapingBee Python SDK[![lint-test-publish](https://github.com/scrapingbee/scrapingbee-python/workflows/lint-test-publish/badge.svg)](https://github.com/scrapingbee/scrapingbee-python/actions)[![version](https://img.shields.io/pypi/v/scrapingbee.svg)](https://pypi.org/project/scrapingbee/)[![python](https://img.shields.io/pypi/pyversions/scrapingbee.svg)](https://pypi.org/project/scrapingbee/)[ScrapingBee](https://www.scrapingbee.com/) is a web scraping API that handles headless browsers and rotates proxies for you. The Python SDK makes it easier to interact with ScrapingBee's API.## InstallationYou can install ScrapingBee Python SDK with pip.```bashpip install scrapingbee```## UsageThe ScrapingBee Python SDK is a wrapper around the [requests](https://docs.python-requests.org/en/master/) library. ScrapingBee supports GET and POST requests.Signup to ScrapingBee to [get your API key](https://app.scrapingbee.com/account/register) and some free credits to get started.### Making a GET request```python&gt;&gt;&gt; from scrapingbee import ScrapingBeeClient&gt;&gt;&gt; client = ScrapingBeeClient(api_key='REPLACE-WITH-YOUR-API-KEY')&gt;&gt;&gt; response = client.get(    'https://www.scrapingbee.com/blog/',     params={        # Block ads on the page you want to scrape        'block_ads': False,        # Block images and CSS on the page you want to scrape        'block_ressources': True,        # Premium proxy geolocation        'country_code': '',        # Control the device the request will be sent from        'device': 'desktop',        # Use some data extraction rules        'extract_rules': {'title': 'h1'},        # Wrap response in JSON        'json_response': False,        # Interact with the webpage you want to scrape         'json_scenario': {            &quot;instructions&quot;: [                {&quot;wait_for&quot;: &quot;#slow_button&quot;},                {&quot;click&quot;: &quot;#slow_button&quot;},                {&quot;scroll_x&quot;: 1000},                {&quot;wait&quot;: 1000},                {&quot;scroll_x&quot;: 1000},                {&quot;wait&quot;: 1000},                        ]        },        # Use premium proxies to bypass difficult to scrape websites (10-25 credits/request)        'premium_proxy': False,        # Execute JavaScript code with a Headless Browser (5 credits/request)        'render_js': True,        # Return the original HTML before the JavaScript rendering        'return_page_source': False,        # Return page screenshot as a png image        'screenshot': False,        # Take a full page screenshot without the window limitation        'screenshot_full_page': False,        # Transparently return the same HTTP code of the page requested.        'transparent_status_code': False,        # Wait, in miliseconds, before returning the response        'wait': 0,        # Wait for CSS selector before returning the response, ex &quot;.title&quot;        'wait_for': '',        # Set the browser window width in pixel        'window_width': 1920,        # Set the browser window height in pixel        'window_height': 1080    },    headers={        # Forward custom headers to the target website        &quot;key&quot;: &quot;value&quot;    },    cookies={        # Forward custom cookies to the target website        &quot;name&quot;: &quot;value&quot;    })&gt;&gt;&gt; response.text'&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;...'```ScrapingBee takes various parameters to render JavaScript, execute a custom JavaScript script, use a premium proxy from a specific geolocation and more. You can find all the supported parameters on [ScrapingBee's documentation](https://www.scrapingbee.com/documentation/).You can send custom cookies and headers like you would normally do with the requests library.## ScreenshotHere a little exemple on how to retrieve and store a screenshot from the ScrapingBee blog in its mobile resolution.```python&gt;&gt;&gt; from scrapingbee import ScrapingBeeClient&gt;&gt;&gt; client = ScrapingBeeClient(api_key='REPLACE-WITH-YOUR-API-KEY')&gt;&gt;&gt; response = client.get(    'https://www.scrapingbee.com/blog/',     params={        # Take a screenshot        'screenshot': True,        # Specify that we need the full height        'screenshot_full_page': True,        # Specify a mobile width in pixel        'window_width': 375    })&gt;&gt;&gt; if response.ok:        with open(&quot;./scrapingbee_mobile.png&quot;, &quot;wb&quot;) as f:            f.write(response.content)```## Using ScrapingBee with ScrapyScrapy is the most popular Python web scraping framework. You can easily [integrate ScrapingBee's API with the Scrapy middleware](https://github.com/ScrapingBee/scrapy-scrapingbee).## RetriesThe client includes a retry mechanism for 5XX responses.```python&gt;&gt;&gt; from scrapingbee import ScrapingBeeClient&gt;&gt;&gt; client = ScrapingBeeClient(api_key='REPLACE-WITH-YOUR-API-KEY')&gt;&gt;&gt; response = client.get(    'https://www.scrapingbee.com/blog/',     params={        'render_js': True,    },    retries=5)```</longdescription>
</pkgmetadata>