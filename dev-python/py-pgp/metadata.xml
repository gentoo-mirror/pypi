<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========python-pgp==========.. image:: https://travis-ci.org/SkierPGP/python-pgp.svg?branch=master   :target: https://travis-ci.org/SkierPGP/python-pgp.. image:: https://coveralls.io/repos/SkierPGP/python-pgp/badge.png   :target: https://coveralls.io/r/SkierPGP/python-pgpSummary-------python-pgp aims to reproduce the full functionality of GnuPG in Python.It may also be used for creating raw OpenPGP packets and packet streamsfor test purposes. This may be a bit of a heavyweight solution for somepurposes.This is a fork of the original library - the original one does not seem to be active and/or have a PyPI package.Alternatives============Other Python packages which provide related functionality:* `pyassuan &lt;https://pypi.python.org/pypi/pyassuan/&gt;`_ - communicate  with GnuPG using its socket protocol.* `pgpdump &lt;https://pypi.python.org/pypi/pgpdump&gt;`_ - a pure python  library for parsing OpenPGP packets.* `gnupg &lt;https://pypi.python.org/pypi/gnupg&gt;`_ - a wrapper around the  GnuPG executable.* `python-gnupg &lt;https://pypi.python.org/pypi/python-gnupg&gt;`_ - another  wrapper around the GnuPG executable.* `gpgkeys &lt;https://pypi.python.org/pypi/gpgkeys&gt;`_ - another wrapper  around the GnuPG executable.* `gpglib &lt;https://pypi.python.org/pypi/gpglib&gt;`_ - a pure python  library for parsing OpenPGP packets and decrypting messages.* `OpenPGP &lt;https://pypi.python.org/pypi/OpenPGP&gt;`_ - an unmaintained  pure python library with much of the functionality of old versions  of GnuPG.* `encryptedfile &lt;https://pypi.python.org/pypi/encryptedfile&gt;`_ - a  pure python library for symmetrically encrypting files in an  OpenPGP-compatible way.* `PGPy &lt;https://pypi.python.org/pypi/PGPy&gt;`_ - a pure python  library with basic parsing and signing of OpenPGP packets.* `OpenPGP-Python &lt;https://github.com/singpolyma/OpenPGP-Python&gt;`_ - a  pure python port of  `openpgp-php &lt;https://github.com/bendiken/openpgp-php&gt;`_. It can  parse OpenPGP packets and verify &amp; create signatures.System requirements-------------------* build-essentialFor Twofish support===================* libtwofish-devRecommended===========* libgmp10-dev (for fastmath extension of pycrypto)Installation------------::    pip install pgpwith Twofish support::    pip install pgp[twofish]with Camellia support::    pip install pgp[camellia]with Twofish &amp; Camellia support::    pip install pgp[camellia,twofish]Usage-----High level==========Parsing a message`````````````````::    from pgp import read_message    message = read_message(data)Parsing a transferrable key```````````````````````````::    from pgp import read_key    key = read_key(data)Loading the GnuPG database``````````````````````````::    from pgp import get_gnupg_db    db = get_gnupg_db()    key = db.search(user_id='Joe')[0]Retrieving a key from a keyserver and creating a message for it```````````````````````````````````````````````````````````````::    &gt;&gt;&gt; import datetime    &gt;&gt;&gt; from pgp import *    &gt;&gt;&gt; from pgp.keyserver import get_keyserver    &gt;&gt;&gt; ks = get_keyserver('hkp://pgp.mit.edu/')    &gt;&gt;&gt; results = ks.search('Joe Bloggs')    &gt;&gt;&gt; recipient_key = results[0].get()    &gt;&gt;&gt; message = message.TextMessage(    ...     u&quot;This message was encrypted using Python PGP&quot;,    ...     datetime.datetime.now())    &gt;&gt;&gt; my_secret_key = read_key_file('secret_key.gpg')    &gt;&gt;&gt; my_secret_key.unlock('My passphrase')    &gt;&gt;&gt; message = message.sign(my_secret_key)    &gt;&gt;&gt; message = message.compress(2)  # Compression algorithm 2    &gt;&gt;&gt; message = message.public_key_encrypt(9, recipient_key)    &gt;&gt;&gt; message_packets = message.to_packets()    &gt;&gt;&gt; message_data = b''.join(map(bytes, message_packets))    &gt;&gt;&gt; armored_message = armor.ASCIIArmor(    ...     armor.PGP_MESSAGE, message_data)    &gt;&gt;&gt; file_handle = open('message.asc', 'w')    &gt;&gt;&gt; file_handle.write(str(armored_message))    &gt;&gt;&gt; file_handle.close()Low level=========Parsing a packet stream```````````````````````::    from pgp.packets import parsers    parsers.parse_binary_packet_data(packet_data)Serializing a packet````````````````````::    from pgp.packets import parsers    packets = parsers.parse_binary_packet_data(packet_data)    b''.join(map(bytes, packets))Security--------If you are using this package to handle private key data anddecryption, please note that there is no (reasonable) way currently inPython to securely erase memory and that copies of things are made oftenand in non-obvious ways. If you are concerned about key data beingcompromised by a memory leak, do not use this package for handlingsecret key data. On the other hand, &quot;if your memory is constantly beingcompromised, I would re-think your security setup.&quot;OpenPGP uses compression algorithms. Beware when feeding untrusted datainto this library of`Zip bomb &lt;http://en.wikipedia.org/wiki/Zip_bomb&gt;`_ or similar denialof service attacks.Development-----------The main repository for this package is `on GitHub&lt;https://github.com/mitchellrj/python-pgp&gt;`_. To develop on the packageand install development dependencies, clone the repository and installthe 'dev' extras.::    git clone git@github.com:mitchellrj/python-pgp.git    cd python-pgp    virtualenv .    bin/pip install -e &quot;.[dev]&quot;Running tests=============::    bin/python setup.py nosetestsBuilding documentation======================::    bin/python setup.py build_sphinxLicense-------Copyright (C) 2014 Richard MitchellThis program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</longdescription>
</pkgmetadata>