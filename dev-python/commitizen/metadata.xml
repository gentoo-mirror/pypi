<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/commitizen-tools/commitizen/pythonpackage.yml?label=python%20package&amp;logo=github&amp;logoColor=white&amp;style=flat-square)](https://github.com/commitizen-tools/commitizen/actions)[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg?style=flat-square)](https://conventionalcommits.org)[![PyPI Package latest release](https://img.shields.io/pypi/v/commitizen.svg?style=flat-square)](https://pypi.org/project/commitizen/)[![PyPI Package download count (per month)](https://img.shields.io/pypi/dm/commitizen?style=flat-square)](https://pypi.org/project/commitizen/)[![Supported versions](https://img.shields.io/pypi/pyversions/commitizen.svg?style=flat-square)](https://pypi.org/project/commitizen/)[![homebrew](https://img.shields.io/homebrew/v/commitizen?color=teal&amp;style=flat-square)](https://formulae.brew.sh/formula/commitizen)[![Codecov](https://img.shields.io/codecov/c/github/commitizen-tools/commitizen.svg?style=flat-square)](https://codecov.io/gh/commitizen-tools/commitizen)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?style=flat-square&amp;logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)![Using commitizen cli](images/demo.gif)---**Documentation:** [https://commitizen-tools.github.io/commitizen/](https://commitizen-tools.github.io/commitizen/)---## AboutCommitizen is release management tool designed for teams.Commitizen assumes your team uses a standard way of committing rulesand from that foundation, it can bump your project's version, createthe changelog, and update files.By default, commitizen uses [conventional commits][conventional_commits], but youcan build your own set of rules, and publish them.Using a standardized set of rules to write commits, makes commits easier to read, and enforces writingdescriptive commits.### Features- Command-line utility to create commits with your rules. Defaults: [Conventional commits][conventional_commits]- Bump version automatically using [semantic versioning][semver] based on the commits. [Read More](./bump.md)- Generate a changelog using [Keep a changelog][keepchangelog]- Update your project's version files automatically- Display information about your commit rules (commands: schema, example, info)- Create your own set of rules and publish them to pip. Read more on [Customization](./customization.md)## Requirements[Python](https://www.python.org/downloads/) `3.7+`[Git][gitscm] `1.8.5.2+`## InstallationTo make commitizen available in your system```bashpip install --user -U Commitizen```### Python projectYou can add it to your local project using one of these:```bashpip install -U commitizen```for Poetry &gt;= 1.2.0:```bashpoetry add commitizen --group dev```for Poetry &lt; 1.2.0:```bashpoetry add commitizen --dev```### macOSvia [homebrew](https://formulae.brew.sh/formula/commitizen):```bashbrew install commitizen```## UsageMost of the time this is the only command you'll run:```shcz bump```On top of that, you can use commitizen to assist you with the creation of commits:```shcz commit```Read more in the section [Getting Started](./getting_started.md).### Help```sh$ cz --helpusage: cz [-h] [--debug] [-n NAME] [-nr NO_RAISE] {init,commit,c,ls,example,info,schema,bump,changelog,ch,check,version} ...Commitizen is a cli tool to generate conventional commits.For more information about the topic go to https://conventionalcommits.org/optional arguments:  -h, --help            show this help message and exit  --debug               use debug mode  -n NAME, --name NAME  use the given commitizen (default: cz_conventional_commits)  -nr NO_RAISE, --no-raise NO_RAISE                        comma separated error codes that won't rise error, e.g: cz -nr 1,2,3 bump. See codes at https://commitizen-                        tools.github.io/commitizen/exit_codes/commands:  {init,commit,c,ls,example,info,schema,bump,changelog,ch,check,version}    init                init commitizen configuration    commit (c)          create new commit    ls                  show available commitizens    example             show commit example    info                show information about the cz    schema              show commit schema    bump                bump semantic version based on the git log    changelog (ch)      generate changelog (note that it will overwrite existing file)    check               validates that a commit message matches the commitizen schema    version             get the version of the installed commitizen or the current project (default: installed commitizen)```## Setting up bash completionWhen using bash as your shell (limited support for zsh, fish, and tcsh is available), Commitizen can use [argcomplete](https://kislyuk.github.io/argcomplete/) for auto-completion. For this argcomplete needs to be enabled.argcomplete is installed when you install Commitizen since it's a dependency.If Commitizen is installed globally, global activation can be executed:```bashsudo activate-global-python-argcomplete```For permanent (but not global) Commitizen activation, use:```bashregister-python-argcomplete cz &gt;&gt; ~/.bashrc```For one-time activation of argcomplete for Commitizen only, use:```basheval &quot;$(register-python-argcomplete cz)&quot;```For further information on activation, please visit the [argcomplete website](https://kislyuk.github.io/argcomplete/).[conventional_commits]: https://www.conventionalcommits.org[semver]: https://semver.org/[keepchangelog]: https://keepachangelog.com/[gitscm]: https://git-scm.com/downloads</longdescription>
</pkgmetadata>