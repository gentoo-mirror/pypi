<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Chaos Injection for AWS Lambda - chaos_lambda======================================================|docs| |issues| |Maintenance| |Pypi| |Travis| |Coveralls| |twitter|.. |docs| image:: https://readthedocs.org/projects/aws-lambda-chaos-injection/badge/?version=latest    :target: https://aws-lambda-chaos-injection.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. |twitter| image:: https://img.shields.io/twitter/url/https/github.com/adhorn/aws-lambda-chaos-injection?style=social    :alt: Twitter    :target: https://twitter.com/intent/tweet?text=Wow:&amp;url=https%3A%2F%2Fgithub.com%2Fadhorn%2Faws-lambda-chaos-injection.. |issues| image:: https://img.shields.io/github/issues/adhorn/aws-lambda-chaos-injection    :alt: Issues.. |Maintenance| image:: https://img.shields.io/badge/Maintained%3F-yes-green.svg    :alt: Maintenance    :target: https://GitHub.com/adhorn/aws-lambda-chaos-injection/graphs/commit-activity.. |Pypi| image:: https://badge.fury.io/py/chaos-lambda.svg    :target: https://badge.fury.io/py/chaos-lambda.. |Travis| image:: https://api.travis-ci.org/adhorn/aws-lambda-chaos-injection.svg?branch=master    :target: https://travis-ci.org/adhorn/aws-lambda-chaos-injection.. |Coveralls| image:: https://coveralls.io/repos/github/adhorn/aws-lambda-chaos-injection/badge.svg?branch=master    :target: https://coveralls.io/github/adhorn/aws-lambda-chaos-injection?branch=master``chaos_lambda`` is a small library injecting chaos into `AWS Lambda&lt;https://aws.amazon.com/lambda/&gt;`_.It offers simple python decorators to do `delay`, `exception` and `statusCode` injectionand a Class to add `delay` to any 3rd party dependencies called from your function.This allows to conduct small chaos engineering experiments for your serverless applicationin the `AWS Cloud &lt;https://aws.amazon.com&gt;`_.* Support for Latency injection using ``delay``* Support for Exception injection using ``exception_msg``* Support for HTTP Error status code injection using ``error_code``* Using for SSM Parameter Store to control the experiment using ``isEnabled``* Support for adding rate of failure using ``rate``. (Default rate = 1)* Per Lambda function injection control using Environment variable (``CHAOS_PARAM``)Install--------.. code:: shell    pip install chaos-lambdaExample--------.. code:: python    # function.py    import os    from chaos_lambda import inject_fault    # this should be set as a Lambda environment variable    os.environ['CHAOS_PARAM'] = 'chaoslambda.config'    @inject_fault    def handler(event, context):        return {            'statusCode': 200,            'body': 'Hello from Lambda!'        }Considering a configuration as follows:.. code:: json    {        &quot;fault_type&quot;: &quot;exception&quot;,        &quot;delay&quot;: 400,        &quot;is_enabled&quot;: true,        &quot;error_code&quot;: 404,        &quot;exception_msg&quot;: &quot;This is chaos&quot;,        &quot;rate&quot;: 1    }When excecuted, the Lambda function, e.g ``handler('foo', 'bar')``, will produce the following result:.. code:: shell    exception_msg from config chaos with a rate of 1    corrupting now    Traceback (most recent call last):    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;    File &quot;/.../chaos_lambda.py&quot;, line 199, in wrapper        raise Exception(exception_msg)    Exception: This is chaosConfiguration-------------The configuration for the failure injection is stored in the `AWS SSM Parameter Store&lt;https://aws.amazon.com/ssm/&gt;`_ and accessed at runtime by the ``get_config()``function:.. code:: json    {        &quot;fault_type&quot;: &quot;exception&quot;,        &quot;delay&quot;: 400,        &quot;is_enabled&quot;: true,        &quot;error_code&quot;: 404,        &quot;exception_msg&quot;: &quot;This is chaos&quot;,        &quot;rate&quot;: 1    }To store the above configuration into SSM using the `AWS CLI &lt;https://aws.amazon.com/cli&gt;`_ do the following:.. code:: shell    aws ssm put-parameter --name chaoslambda.config --type String --overwrite --value &quot;{ &quot;delay&quot;: 400, &quot;is_enabled&quot;: true, &quot;error_code&quot;: 404, &quot;exception_msg&quot;: &quot;This is chaos&quot;, &quot;rate&quot;: 1, &quot;fault_type&quot;: &quot;exception&quot;}&quot; --region eu-west-1AWS Lambda will need to have `IAM access to SSM &lt;https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-access.html&gt;`_... code:: json    {        &quot;Version&quot;: &quot;2012-10-17&quot;,        &quot;Statement&quot;: [            {                &quot;Effect&quot;: &quot;Allow&quot;,                &quot;Action&quot;: [                    &quot;ssm:DescribeParameters&quot;                ],                &quot;Resource&quot;: &quot;*&quot;            },            {                &quot;Effect&quot;: &quot;Allow&quot;,                &quot;Action&quot;: [                    &quot;ssm:GetParameters&quot;,                    &quot;ssm:GetParameter&quot;                ],                &quot;Resource&quot;: &quot;arn:aws:ssm:eu-north-1:12345678910:parameter/chaoslambda.config&quot;            }        ]    }Supported Decorators:---------------------``chaos_lambda`` currently supports the following faults:* `latency` - Add latency in the AWS Lambda execution* `exception` - Raise an exception during the AWS Lambda execution* `status_code` - force AWS Lambda to return a specific HTTP error codeMore information:-----------------`Full Documentation &lt;https://aws-lambda-chaos-injection.readthedocs.io/en/latest/&gt;`_</longdescription>
</pkgmetadata>