<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## IntroductionPython-vagrant is a python module that provides a _thin_ wrapper around the`vagrant` command line executable, allowing programmatic control of Vagrantvirtual machines (boxes). This module is useful for:- Starting a Vagrant virtual machine (VM) (`up`).- Terminating a Vagrant VM (`destroy`).- Halting a Vagrant VM without destroying it (`halt`).- Querying the status of a VM or VMs (`status`).- Getting ssh configuration information useful for SSHing into the VM. (`host`, `port`, ...)- Running `vagrant` commands in a [multi-VM environment](http://vagrantup.com/v1/docs/multivm.html)  by using `vm_name` parameter.- Initializing the VM based on a named base box, using init().- Adding, Removing, and Listing boxes (`box add`, `box remove`, `box list`).- Provisioning VMs - up() accepts options like `no_provision`, `provision`, and `provision_with`, and there is a `provision()` method.- Using sandbox mode from the [Sahara](https://github.com/jedi4ever/sahara) gem.This project began because I wanted python bindings for Vagrant so I couldprogrammatically access my vagrant box using Fabric. Drop me a line to let meknow how you use python-vagrant. I'd love to share more use cases. -Todd DeLuca## Versioning and API StabilityThis package is _beta_ and its API is not guaranteed to be stable. The APIattempts to be congruent with the `vagrant` API terminology, to facilitateknowledge transfer for users already familiar with Vagrant. Over time, thepython-vagrant API has changed to better match the underling `vagrant` CLI andto evolve with the changes in that CLI.The package version numbering is in the form `0.X.Y`. The initial `0` reflectsthe _beta_ nature of this project. The number `X` is incremented whenbackwards-incompatible changes occur. The number `Y` is incremented whenbackwards-compatible features or bug fixes are added.## Requirements- Vagrant 2.2 or greater. Using the latest version of Vagrant is strongly  recommended.- Vagrant requires VirtualBox, VMWare, or another supported provider.- Python 3.8 or newer.- The Sahara gem for Vagrant is optional. It will allow you to use  `SandboxVagrant`.## Installation### Install from pypi.python.orgDownload and install python-vagrant:```shellpip install python-vagrant```### Install from github.comClone and install python-vagrant```shellcd ~git clone git@github.com:pycontribs/python-vagrant.gitcd python-vagrantpython setup.py install```## UsageA contrived example of starting a vagrant box (using a Vagrantfile from thecurrent directory) and running a fabric task on it:```pythonimport vagrantfrom fabric.api import env, execute, task, run@taskdef mytask():    run('echo $USER')v = vagrant.Vagrant()v.up()env.hosts = [v.user_hostname_port()]env.key_filename = v.keyfile()env.disable_known_hosts = True # useful for when the vagrant box ip changes.execute(mytask) # run a fabric task on the vagrant host.```Another example showing how to use vagrant multi-vm feature with fabric:```pythonimport vagrantfrom fabric.api import *@taskdef start(machine_name):   &quot;&quot;&quot;Starts the specified machine using vagrant&quot;&quot;&quot;   v = vagrant.Vagrant()   v.up(vm_name=machine_name)   with settings(host_string= v.user_hostname_port(vm_name=machine_name),                 key_filename = v.keyfile(vm_name=machine_name),                 disable_known_hosts = True):        run(&quot;echo hello&quot;)```By default python vagrant instances are quiet, meaning that they capture stdoutand stderr. For a &quot;loud&quot; instance, use `vagrant.Vagrant(quiet_stdout=False)`.Set `quiet_stderr=False` for an even louder version.### Interacting With the Vagrant SubprocessThe `Vagrant` class works by executing `vagrant` commands in a subprocess andinterpreting the output. Depending on the needs of the user, the communicationto and from the subprocess can be tailored by altering its environment andwhere it sends its stdout and stderr.#### Silencing the Stdout or Stderr of the Vagrant SubprocessThe stdout and stderr of the underlying vagrant process can be silenced byusing the `out_cm` and `err_cm` parameters, or by using the `quiet_stdout` and`quiet_stderr` parameters of `Vagrant.__init__`.Using `out_cm` and `err_cm` to redirect stdout and stderr to `/dev/null`:```pythonv = vagrant.Vagrant(out_cm=vagrant.devnull_cm, err_cm=vagrant.devnull_cm)v.up() # normally noisy```Using `quiet_stdout` and `quiet_stderr` to redirect stdout and stderr to`/dev/null`:```pythonv = vagrant.Vagrant(quiet_stdout=True, quiet_stderr=True)v.up() # normally noisy```These are functionally equivalent.#### Logging the Stdout or Stderr of the Vagrant SubprocessA user might wish to direct the stdout and stderr of a vagrant subprocess toa file, perhaps to log and analyze the results of an automated process. Thiscan be accomplished using the `out_cm` and `err_cm` parameters of`Vagrant.__init__`.For example, log the stdout and stderr of the subprocess to the file'deployment.log':```pythonlog_cm = vagrant.make_file_cm('deployment.log')v = vagrant.Vagrant(out_cm=log_cm, err_cm=log_cm)v.up() # normally noisy```#### Altering the Environment of the Vagrant SubprocessIt's possible to communicate with the Vagrant subprocess using environmentvariables. The `Vagrantfile` could expect environment variables to be presentand act accordingly. The environment variables can be set by `python-vagrant`.```pythonimport vagrantv = vagrant.Vagrant()os_env = os.environ.copy()os_env['USE_NFS'] = '1'v.env = os_envv.up()  # will pass env to the vagrant subprocess```Alternatively, the environment can be passed at instantiation time.```pythonimport vagrantos_env = os.environ.copy()os_env['USE_NFS'] = '1'v = vagrant.Vagrant(env=env)assert v.env is env  # Truev.up()  # will pass env to the vagrant subprocess```## ContributeIf you use python and vagrant and this project does not do what you want,please open an issue or a pull request on[github](https://github.com/pycontribs/python-vagrant/edit/main/README.md).Please see CHANGELOG.md for a detailed list of contributions and authors.When making a pull request, please include unit tests that test your changesand make sure any existing tests still work. See the Testing section below.## TestingRunning the full suite of tests might take 10 minutes or so. It involvesdownloading boxes and starting and stopping virtual machines several times.Run the tests from the top-level directory of the repository:```shelltox -e py```Here is an example of running an individual test:```shelltox -e py -- -k tests.test_vagrant:test_boxes```Manual test of functionality for controlling where the vagrant subcommandoutput is sent -- console or devnull:    &gt;&gt;&gt; import vagrant    &gt;&gt;&gt; import os    &gt;&gt;&gt; vagrantfile = '/Users/tfd/proj/python-vagrant/tests/vagrantfiles/single_box'    &gt;&gt;&gt; # Demonstrate a quiet Vagrant.  Equivalent to out_cm=vagrant.devnull_cm    ... v1 = vagrant.Vagrant(vagrantfile)    &gt;&gt;&gt; v1.destroy() # output to /dev/null    &gt;&gt;&gt; # Demonstrate a loud Vagrant.  Equivalent to out_cm=vagrant.stdout_cm    ... v2 = vagrant.Vagrant(vagrantfile, quiet_stdout=False)    &gt;&gt;&gt; v2.destroy() # stdout sent to console    ==&gt; default: VM not created. Moving on...    &gt;&gt;&gt; # Demonstrate that out_cm takes precedence over quiet_stdout=True    ... v3 = vagrant.Vagrant(vagrantfile, out_cm=vagrant.stdout_cm)    &gt;&gt;&gt; v3.destroy() # output to console    ==&gt; default: VM not created. Moving on...    &gt;&gt;&gt; # Demonstrate a quiet Vagrant using devnull_cm directly    ... v4 = vagrant.Vagrant(vagrantfile, out_cm=vagrant.devnull_cm)    &gt;&gt;&gt; v4.destroy() # output to console    &gt;&gt;&gt;</longdescription>
</pkgmetadata>