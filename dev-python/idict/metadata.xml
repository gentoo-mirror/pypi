<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![test](https://github.com/davips/idict/workflows/test/badge.svg)[![codecov](https://codecov.io/gh/davips/idict/branch/main/graph/badge.svg)](https://codecov.io/gh/davips/idict)&lt;a href=&quot;https://pypi.org/project/idict&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/idict.svg?label=release&amp;color=blue&amp;style=flat-square&quot; alt=&quot;pypi&quot;&gt;&lt;/a&gt;![Python version](https://img.shields.io/badge/python-3.8%20%7C%203.9-blue.svg)[![license: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)&lt;!--- [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5501845.svg)](https://doi.org/10.5281/zenodo.5501845) ---&gt;[![arXiv](https://img.shields.io/badge/arXiv-2109.06028-b31b1b.svg?style=flat-square)](https://arxiv.org/abs/2109.06028)[![API documentation](https://img.shields.io/badge/doc-API%20%28auto%29-a0a0a0.svg)](https://davips.github.io/idict)# idictA lazy `dict` with universally unique deterministic identifiers.### **This project was succeeded by [hdict](https://pypi.org/project/hdict).**------------[Latest release](https://pypi.org/project/idict) |[Current code](https://github.com/davips/idict) |[API documentation](https://davips.github.io/idict)### See also* identification package used by `idict`: [GaROUPa](https://pypi.org/project/garoupa)* only laziness, i.e., without the identification part: [ldict](https://pypi.org/project/ldict)## OverviewAn `idict` is an identified `dict` with `str` keys.We consider that every value is generated by a process, starting from an `empty` `idict`. The process is a sequence oftransformation steps done through the operator `&gt;&gt;`, which symbolizes the ordering of the steps.There are two types of steps:* **value insertion** - represented by dict-like objects* **function application** - represented by ordinary Python functionsFunctions, `idict`s, and values have a deterministic UUID(called _hosh_ - **o**perable **h**a**sh**). Identifiers (hoshes) for `idict`s and values are predictable through themagic available [here](https://pypi.org/project/garoupa).An `idict` is completely defined by its key-value pairs so thatit can be converted from/to a built-in `dict`.Creating an `idict` is not different from creating an ordinary `dict`. Optionally it can be created through the `&gt;&gt;` operatorused after `empty` or `Ø` (usually AltGr+Shift+o in most keyboards).The resulting `idict` always contains two extra entries `id` and `ids`:![img.png](https://raw.githubusercontent.com/davips/idict/main/examples/img.png)Function application is done in the same way. The parameter names define the input fields, while the keys in thereturned `dict` define the output fields:![img_1.png](https://raw.githubusercontent.com/davips/idict/main/examples/img_1.png)After evaluated, the value will not be calculated again:![img_2.png](https://raw.githubusercontent.com/davips/idict/main/examples/img_2.png)Functions can accept parameters:![img_3.png](https://raw.githubusercontent.com/davips/idict/main/examples/img_3.png)## Installation### ...as a standalone lib```bash# Set up a virtualenv. python3 -m venv venvsource venv/bin/activate# Install from PyPI...pip install --upgrade pippip install -U idictpip install -U idict[full]  # use the flag 'full' for extra functionality (recommended)# ...or, install from updated source code.pip install git+https://github.com/davips/idict```### ...from source```bashgit clone https://github.com/davips/idictcd idictpoetry installpoetry install -E full  # use the flag 'full' for extra functionality (recommended)```## Examples**Overview**&lt;details&gt;&lt;p&gt;```python3# Creation by direct instantiation.from idict import idictd = idict(x=5, y=7, z=10)# Creation from scratch.# The expression 'v &gt;&gt; a &gt;&gt; b' means &quot;Value 'v' will be processed by step 'a' then 'b'&quot;.# A step can be a value insertion or a function application.from idict import emptyd = empty &gt;&gt; {&quot;x&quot;: 5} &gt;&gt; {&quot;y&quot;: 7, &quot;z&quot;: 10}# Empty alias ('Ø') usage.from idict import Ød = Ø &gt;&gt; {&quot;x&quot;: 5} &gt;&gt; {&quot;y&quot;: 7, &quot;z&quot;: 10}print(d)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;z&quot;: 10,    &quot;_id&quot;: &quot;SV_4fc23c71a6bb954f6f2ed40e440cfd2b76087&quot;,    &quot;_ids&quot;: &quot;GS_cb0fda15eac732cb08351e71fc359058b93bd... +1 ...gk_64fdf435fc9aa10be990397ff8fa92888792c&quot;}&quot;&quot;&quot;``````python3# Inverting color theme for a white background.from garoupa import setupsetup(dark_theme=False)d = idict(x=5, y=7, z=10)print(d)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;z&quot;: 10,    &quot;_id&quot;: &quot;SV_4fc23c71a6bb954f6f2ed40e440cfd2b76087&quot;,    &quot;_ids&quot;: &quot;GS_cb0fda15eac732cb08351e71fc359058b93bd... +1 ...gk_64fdf435fc9aa10be990397ff8fa92888792c&quot;}&quot;&quot;&quot;``````python3# Function application.# The input and output fields are detected from the function signature and returned dict.def f(x):    return {&quot;y&quot;: x ** 2}d2 = d &gt;&gt; fprint(d2)&quot;&quot;&quot;{    &quot;y&quot;: &quot;→(x)&quot;,    &quot;x&quot;: 5,    &quot;z&quot;: 10,    &quot;_id&quot;: &quot;J.WMNtqzVe2LiO8Ez4Wkgpa6zsBS.o529OTeWhNo&quot;,    &quot;_ids&quot;: &quot;j6dsrYpQ-9A6BFtY5T98d-UeFJOS.o529OTeWhNo... +1 ...gk_64fdf435fc9aa10be990397ff8fa92888792c&quot;}&quot;&quot;&quot;``````python3# Anonymous function application.d2 = d &gt;&gt; (lambda y: {&quot;y&quot;: y / 5})print(d)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;z&quot;: 10,    &quot;_id&quot;: &quot;SV_4fc23c71a6bb954f6f2ed40e440cfd2b76087&quot;,    &quot;_ids&quot;: &quot;GS_cb0fda15eac732cb08351e71fc359058b93bd... +1 ...gk_64fdf435fc9aa10be990397ff8fa92888792c&quot;}&quot;&quot;&quot;``````python3# Resulting values are evaluated lazily.d &gt;&gt;= lambda y: {&quot;y&quot;: y / 5}print(d.y)&quot;&quot;&quot;1.4&quot;&quot;&quot;``````python3print(d)&quot;&quot;&quot;{    &quot;y&quot;: 1.4,    &quot;x&quot;: 5,    &quot;z&quot;: 10,    &quot;_id&quot;: &quot;7uAa.i.4XbFyFY7OLx2TfzMQOeYZim1XGTCOzwYg&quot;,    &quot;_ids&quot;: &quot;S-Vd.8e3nPaYsNmqhkiGDdvZUvVZim1XGTCOzwYg... +1 ...gk_64fdf435fc9aa10be990397ff8fa92888792c&quot;}&quot;&quot;&quot;``````python3# Parameterized function application.# &quot;Parameters&quot; are distinguished from &quot;fields&quot; by having default values.# When the default value is None, it means it will be explicitly defined later by 'let'.from idict import letdef f(x, y, a=None, b=None):    return {&quot;z&quot;: a * x ** b, &quot;w&quot;: y ** b}d2 = d &gt;&gt; let(f, a=7, b=2)print(d2)&quot;&quot;&quot;{    &quot;z&quot;: &quot;→(a b x y)&quot;,    &quot;w&quot;: &quot;→(a b x y)&quot;,    &quot;y&quot;: 1.4,    &quot;x&quot;: 5,    &quot;_id&quot;: &quot;cLQzLVSJU.N2iT-5OaZWUEnnYWUHK5qjURoS6ymD&quot;,    &quot;_ids&quot;: &quot;S969viykMVgKVqEgHOtHyhIaHGhMt9l9.mkvh7xr... +2 ...GS_cb0fda15eac732cb08351e71fc359058b93bd&quot;}&quot;&quot;&quot;``````python3# Parameterized function application with sampling.# The default value is one of the following ranges, #     list, arithmetic progression, geometric progression.# Each parameter value will be sampled later.# A random number generator must be given.from idict import letfrom random import Randomdef f(x, y, a=None, b=[1, 2, 3], ap=[1, 2, 3, ..., 10], gp=[1, 2, 4, ..., 16]):    return {&quot;z&quot;: a * x ** b, &quot;w&quot;: y ** ap * gp}d2 = d &gt;&gt; Random(0) &gt;&gt; let(f, a=7)print(d2)&quot;&quot;&quot;{    &quot;z&quot;: &quot;→(a b ap gp x y)&quot;,    &quot;w&quot;: &quot;→(a b ap gp x y)&quot;,    &quot;y&quot;: 1.4,    &quot;x&quot;: 5,    &quot;_id&quot;: &quot;JNtKgf-Bz7S5z6QwqzWKKM5OLM4QR7OmcORBo47s&quot;,    &quot;_ids&quot;: &quot;fg5iyZsHWufuM4dbS6MIkjrWYV7FeKkyMh6p2wM3... +2 ...GS_cb0fda15eac732cb08351e71fc359058b93bd&quot;}&quot;&quot;&quot;``````python3print(d2.z)&quot;&quot;&quot;175&quot;&quot;&quot;``````python3print(d2)&quot;&quot;&quot;{    &quot;z&quot;: 175,    &quot;w&quot;: &quot;10.541350399999995&quot;,    &quot;y&quot;: 1.4,    &quot;x&quot;: 5,    &quot;_id&quot;: &quot;JNtKgf-Bz7S5z6QwqzWKKM5OLM4QR7OmcORBo47s&quot;,    &quot;_ids&quot;: &quot;fg5iyZsHWufuM4dbS6MIkjrWYV7FeKkyMh6p2wM3... +2 ...GS_cb0fda15eac732cb08351e71fc359058b93bd&quot;}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;**Identity example**&lt;details&gt;&lt;p&gt;```python3from idict import idicta = idict(x=3)print(a)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;_id&quot;: &quot;ME_bd0a8d9d8158cdbb9d7d4c7af1659ca1dabc9&quot;,    &quot;_ids&quot;: &quot;ME_bd0a8d9d8158cdbb9d7d4c7af1659ca1dabc9&quot;}&quot;&quot;&quot;``````python3b = idict(y=5)print(b)&quot;&quot;&quot;{    &quot;y&quot;: 5,    &quot;_id&quot;: &quot;EI_20378979f4669f2e318ae9742e214fd4880d7&quot;,    &quot;_ids&quot;: &quot;EI_20378979f4669f2e318ae9742e214fd4880d7&quot;}&quot;&quot;&quot;``````python3print(a &gt;&gt; b)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;y&quot;: 5,    &quot;_id&quot;: &quot;pl_bb7e60e68670707cdef7dfd31096db4c63c91&quot;,    &quot;_ids&quot;: &quot;ME_bd0a8d9d8158cdbb9d7d4c7af1659ca1dabc9 EI_20378979f4669f2e318ae9742e214fd4880d7&quot;}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;**Merging two idicts**&lt;details&gt;&lt;p&gt;```python3from idict import idicta = idict(x=3)print(a)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;_id&quot;: &quot;ME_bd0a8d9d8158cdbb9d7d4c7af1659ca1dabc9&quot;,    &quot;_ids&quot;: &quot;ME_bd0a8d9d8158cdbb9d7d4c7af1659ca1dabc9&quot;}&quot;&quot;&quot;``````python3b = idict(y=5)print(b)&quot;&quot;&quot;{    &quot;y&quot;: 5,    &quot;_id&quot;: &quot;EI_20378979f4669f2e318ae9742e214fd4880d7&quot;,    &quot;_ids&quot;: &quot;EI_20378979f4669f2e318ae9742e214fd4880d7&quot;}&quot;&quot;&quot;``````python3print(a &gt;&gt; b)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;y&quot;: 5,    &quot;_id&quot;: &quot;pl_bb7e60e68670707cdef7dfd31096db4c63c91&quot;,    &quot;_ids&quot;: &quot;ME_bd0a8d9d8158cdbb9d7d4c7af1659ca1dabc9 EI_20378979f4669f2e318ae9742e214fd4880d7&quot;}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;**Lazily applying functions to idict**&lt;details&gt;&lt;p&gt;```python3from idict import idicta = idict(x=3)print(a)&quot;&quot;&quot;{    &quot;x&quot;: 3,    &quot;_id&quot;: &quot;ME_bd0a8d9d8158cdbb9d7d4c7af1659ca1dabc9&quot;,    &quot;_ids&quot;: &quot;ME_bd0a8d9d8158cdbb9d7d4c7af1659ca1dabc9&quot;}&quot;&quot;&quot;``````python3a = a &gt;&gt; idict(y=5) &gt;&gt; {&quot;z&quot;: 7} &gt;&gt; (lambda x, y, z: {&quot;r&quot;: x ** y // z})print(a)&quot;&quot;&quot;{    &quot;r&quot;: &quot;→(x y z)&quot;,    &quot;x&quot;: 3,    &quot;y&quot;: 5,    &quot;z&quot;: 7,    &quot;_id&quot;: &quot;kgdz8xfS7IuGtukIPe37KhAUrB2P4S3OFdPs8Gab&quot;,    &quot;_ids&quot;: &quot;CXqa2zRRNd7Aj5wI8JTJ0O-7ML0P4S3OFdPs8Gab... +2 ...ZN_eccacd999c26ce18c98f9a17a6f47adcf162a&quot;}&quot;&quot;&quot;``````python3print(a.r)&quot;&quot;&quot;34&quot;&quot;&quot;``````python3print(a)&quot;&quot;&quot;{    &quot;r&quot;: 34,    &quot;x&quot;: 3,    &quot;y&quot;: 5,    &quot;z&quot;: 7,    &quot;_id&quot;: &quot;kgdz8xfS7IuGtukIPe37KhAUrB2P4S3OFdPs8Gab&quot;,    &quot;_ids&quot;: &quot;CXqa2zRRNd7Aj5wI8JTJ0O-7ML0P4S3OFdPs8Gab... +2 ...ZN_eccacd999c26ce18c98f9a17a6f47adcf162a&quot;}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;**Parameterized functions and sampling**&lt;details&gt;&lt;p&gt;```python3from random import Randomfrom idict import Ø, let# A function provide input fields and, optionally, parameters.# For instance:# 'a' is sampled from an arithmetic progression# 'b' is sampled from a geometric progression# Here, the syntax for default parameter values is borrowed with a new meaning.def fun(x, y, a=[-100, -99, -98, ..., 100], b=[0.0001, 0.001, 0.01, ..., 100000000]):    return {&quot;z&quot;: a * x + b * y}def simplefun(x, y):    return {&quot;z&quot;: x * y}# Creating an empty idict. Alternatively: d = idict().d = Ø &gt;&gt; {}d.show(colored=False)&quot;&quot;&quot;{    &quot;_id&quot;: &quot;0000000000000000000000000000000000000000&quot;,    &quot;_ids&quot;: {}}&quot;&quot;&quot;``````python3# Putting some values. Alternatively: d = idict(x=5, y=7).d[&quot;x&quot;] = 5d[&quot;y&quot;] = 7print(d)&quot;&quot;&quot;{    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;_id&quot;: &quot;BB_fad4374ca911f344859dab8e4b016ba2fe65b&quot;,    &quot;_ids&quot;: &quot;GS_cb0fda15eac732cb08351e71fc359058b93bd WK_6ba95267cec724067d58b3186ecbcaa4253ad&quot;}&quot;&quot;&quot;``````python3# Parameter values are uniformly sampled.d1 = d &gt;&gt; simplefunprint(d1)print(d1.z)&quot;&quot;&quot;{    &quot;z&quot;: &quot;→(x y)&quot;,    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;_id&quot;: &quot;VqfQeuBWL7Xv1FwWe6pzgqJwclRMPNZuFtrAIt6g&quot;,    &quot;_ids&quot;: &quot;9KKem6QL-I8C0Yk0q3URBt-aNXHMPNZuFtrAIt6g... +1 ...WK_6ba95267cec724067d58b3186ecbcaa4253ad&quot;}35&quot;&quot;&quot;``````python3d2 = d &gt;&gt; simplefunprint(d2)print(d2.z)&quot;&quot;&quot;{    &quot;z&quot;: &quot;→(x y)&quot;,    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;_id&quot;: &quot;VqfQeuBWL7Xv1FwWe6pzgqJwclRMPNZuFtrAIt6g&quot;,    &quot;_ids&quot;: &quot;9KKem6QL-I8C0Yk0q3URBt-aNXHMPNZuFtrAIt6g... +1 ...WK_6ba95267cec724067d58b3186ecbcaa4253ad&quot;}35&quot;&quot;&quot;``````python3# Parameter values can also be manually set.e = d &gt;&gt; let(fun, a=5, b=10)print(e.z)&quot;&quot;&quot;95&quot;&quot;&quot;``````python3# Not all parameters need to be set.e = d &gt;&gt; Random() &gt;&gt; let(fun, a=5)print(&quot;e =&quot;, e.z)&quot;&quot;&quot;e = 25.007&quot;&quot;&quot;``````python3# Each run will be a different sample for the missing parameters.e = e &gt;&gt; Random() &gt;&gt; let(fun, a=5)print(&quot;e =&quot;, e.z)&quot;&quot;&quot;e = 7000025.0&quot;&quot;&quot;``````python3# We can define the initial state of the random sampler.# It will be in effect from its location place onwards in the expression.e = d &gt;&gt; Random(0) &gt;&gt; let(fun, a=5)print(e.z)&quot;&quot;&quot;725.0&quot;&quot;&quot;``````python3# All runs will yield the same result,# if starting from the same random number generator seed.e = e &gt;&gt; Random(0) &gt;&gt; let(fun, a=[555, 777])print(&quot;Let 'a' be a list:&quot;, e.z)&quot;&quot;&quot;Let 'a' be a list: 700003885.0&quot;&quot;&quot;``````python3# Reproducible different runs are achievable by using a single random number generator.e = e &gt;&gt; Random(0) &gt;&gt; let(fun, a=[5, 25, 125, ..., 10000])print(&quot;Let 'a' be a geometric progression:&quot;, e.z)&quot;&quot;&quot;Let 'a' be a geometric progression: 700003125.0&quot;&quot;&quot;``````python3rnd = Random(0)e = d &gt;&gt; rnd &gt;&gt; let(fun, a=5)print(e.z)e = d &gt;&gt; rnd &gt;&gt; let(fun, a=5)  # Alternative syntax.print(e.z)&quot;&quot;&quot;725.0700000025.0&quot;&quot;&quot;``````python3# Output fields can be defined dynamically through parameter values.# Input fields can be defined dynamically through kwargs.copy = lambda source=None, target=None, **kwargs: {target: kwargs[source]}d = empty &gt;&gt; {&quot;x&quot;: 5}d &gt;&gt;= let(copy, source=&quot;x&quot;, target=&quot;y&quot;)print(d)d.evaluate()print(d)&quot;&quot;&quot;{    &quot;y&quot;: &quot;→(source target x)&quot;,    &quot;x&quot;: 5,    &quot;_id&quot;: &quot;xmcjrFNT-2nEr3vizzx-44QwV5kwDfaOqWWvzOrq&quot;,    &quot;_ids&quot;: &quot;3Tv6p5fZ936EK1DUkkcYAgWPbrmwDfaOqWWvzOrq GS_cb0fda15eac732cb08351e71fc359058b93bd&quot;}{    &quot;y&quot;: 5,    &quot;x&quot;: 5,    &quot;_id&quot;: &quot;xmcjrFNT-2nEr3vizzx-44QwV5kwDfaOqWWvzOrq&quot;,    &quot;_ids&quot;: &quot;3Tv6p5fZ936EK1DUkkcYAgWPbrmwDfaOqWWvzOrq GS_cb0fda15eac732cb08351e71fc359058b93bd&quot;}&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;**Composition of sets of functions**&lt;details&gt;&lt;p&gt;```python3from random import Randomfrom idict import Ø# A multistep process can be defined without applying its functionsdef g(x, y, a=[1, 2, 3, ..., 10], b=[0.00001, 0.0001, 0.001, ..., 100000]):    return {&quot;z&quot;: a * x + b * y}def h(z, c=[1, 2, 3]):    return {&quot;z&quot;: c * z}# In the 'idict' framework 'data is function',# so the alias Ø represents the 'empty data object' and the 'reflexive function' at the same time.# In other words: 'inserting nothing' has the same effect as 'doing nothing'.fun = Ø &gt;&gt; g &gt;&gt; h  # 'empty' or 'Ø' enable the cartesian product of the subsequent sets of functions within the expression.print(fun)&quot;&quot;&quot;«λ{} × λ»&quot;&quot;&quot;``````python3# Before a function is applied to a dict-like, the function free parameters remain unsampled.# The result is an ordered set of composite functions.d = {&quot;x&quot;: 5, &quot;y&quot;: 7} &gt;&gt; (Random(0) &gt;&gt; fun)print(d)&quot;&quot;&quot;{    &quot;z&quot;: &quot;→(c z→(a b x y))&quot;,    &quot;x&quot;: 5,    &quot;y&quot;: 7,    &quot;_id&quot;: &quot;YZWooP03q0mFec8tjNwy3YuAohamevfjG3VAFXL-&quot;,    &quot;_ids&quot;: &quot;5PKBLX4-dGDGHUifvK.QYVLeZTgmevfjG3VAFXL-... +1 ...WK_6ba95267cec724067d58b3186ecbcaa4253ad&quot;}&quot;&quot;&quot;``````python3print(d.z)&quot;&quot;&quot;105.0&quot;&quot;&quot;``````python3d = {&quot;x&quot;: 5, &quot;y&quot;: 7} &gt;&gt; (Random(0) &gt;&gt; fun)print(d.z)&quot;&quot;&quot;105.0&quot;&quot;&quot;``````python3# Reproducible different runs by passing a stateful random number generator.rnd = Random(0)e = d &gt;&gt; rnd &gt;&gt; funprint(e.z)&quot;&quot;&quot;105.0&quot;&quot;&quot;``````python3e = d &gt;&gt; rnd &gt;&gt; funprint(e.z)&quot;&quot;&quot;14050.0&quot;&quot;&quot;``````python3# Repeating the same results.rnd = Random(0)e = d &gt;&gt; rnd &gt;&gt; funprint(e.z)&quot;&quot;&quot;105.0&quot;&quot;&quot;``````python3e = d &gt;&gt; rnd &gt;&gt; funprint(e.z)&quot;&quot;&quot;14050.0&quot;&quot;&quot;```&lt;/p&gt;&lt;/details&gt;&lt;persistence&gt;## ConceptAn `idict` is like a common Python `dict`, with extra functionality and lazy. It is a mapping between string keys, calledfields, and any serializable (pickable) object.Each `idict` has two extra entries: `id` (identifier) and `ids` (value identifiers).A custom 40-digit unique identifier (see [GaROUPa](https://pypi.org/project/garoupa))can be provided as an attribute for each function.Value objects can have custom identifiers as well, if provided whithin the entry `ids`. Otherwise, identifiers for functions and values will be calculated through blake3 hashing of their content.For functions, the bytecode is used as content. For this reason, such functions should be simple, with minimal external dependencies orwith their import statements inside the function body.This decreases the odds of using two functions with identical local code (and, therefore, identical identifiers) performing different calculations.## GrantsThis work was supported by Fapesp under supervision ofProf. André C. P. L. F. de Carvalho at CEPID-CeMEAI (Grants 2013/07375-0 – 2019/01735-0)until 2021-03-31.</longdescription>
</pkgmetadata>