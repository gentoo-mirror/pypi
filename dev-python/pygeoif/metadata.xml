<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Introduction============PyGeoIf provides a `GeoJSON-like protocol &lt;https://gist.github.com/2217756&gt;`_ for geo-spatial (GIS) vector data.Other Python programs and packages that you may have heard of alreadyimplement this protocol:* `ArcPy &lt;https://www.esri.com/about/newsroom/arcuser/geojson/&gt;`_* `descartes &lt;https://docs.descarteslabs.com/&gt;`_* `PySAL &lt;http://pysal.geodacenter.org/&gt;`_* `Shapely &lt;https://github.com/Toblerity/Shapely&gt;`_* `pyshp &lt;https://pypi.python.org/pypi/pyshp&gt;`_When you want to write your own geospatial library with supportfor this protocol you may use pygeoif as a starting point and buildyour functionality on top of it. It has no requirements outside thePython standard library and is therefore easy to integrate into yourproject. It is tested on `CPython &lt;https://python.org&gt;`_ and`PyPy &lt;https://www.pypy.org/&gt;`_, but it should work on alternativePython implementations (that implement the language specification *&gt;=3.8*) as well.You may think of pygeoif as a 'shapely ultralight' which lets youconstruct geometries and perform **very** basic operations likereading and writing geometries from/to WKT, constructing line stringsout of points, polygons from linear rings, multi polygons frompolygons, etc. It was inspired by shapely and implements thegeometries in a way that when you are familiar with pygeoif,you will feel right at home with shapely or the other way round.It was written to provide clean and python only geometries for fastkml_.. image:: https://github.com/cleder/pygeoif/actions/workflows/run-all-tests.yml/badge.svg?branch=main    :target: https://github.com/cleder/pygeoif/actions/workflows/run-all-tests.yml.. image:: https://codecov.io/gh/cleder/pygeoif/branch/main/graph/badge.svg?token=2EfiwBXs9X    :target: https://codecov.io/gh/cleder/pygeoif.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black.. image:: https://img.shields.io/badge/type-checker-mypy-blue    :target: http://mypy-lang.org/.. image:: https://www.openhub.net/p/pygeoif/widgets/project_thin_badge.gif    :target: https://www.openhub.net/p/pygeoif/.. image:: https://www.codefactor.io/repository/github/cleder/pygeoif/badge/main   :target: https://www.codefactor.io/repository/github/cleder/pygeoif/overview/main   :alt: CodeFactor.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commitExample========    &gt;&gt;&gt; from pygeoif import geometry    &gt;&gt;&gt; p = geometry.Point(1,1)    &gt;&gt;&gt; p.__geo_interface__    {'type': 'Point', 'bbox': (1, 1, 1, 1), 'coordinates': (1, 1)}    &gt;&gt;&gt; print(p)    POINT (1 1)    &gt;&gt;&gt; p    Point(1, 1)    &gt;&gt;&gt; l = geometry.LineString([(0.0, 0.0), (1.0, 1.0)])    &gt;&gt;&gt; l.bounds    (0.0, 0.0, 1.0, 1.0)    &gt;&gt;&gt; print(l)    LINESTRING (0.0 0.0, 1.0 1.0)You find more examples in the`tests &lt;https://github.com/cleder/pygeoif/tree/main/pygeoif/tests&gt;`_directory which cover every aspect of pygeoif or in fastkml_.Classes========All classes implement the attribute:* ``__geo_interface__``: as discussed above, an interface to GeoJSON_.All geometry classes implement the attributes:* ``geom_type``: Returns a string specifying the Geometry Type of the object* ``bounds``: Returns a (minx, miny, maxx, maxy) tuple that bounds the object.* ``wkt``: Returns the 'Well Known Text' representation of the objectFor two-dimensional geometries the following methods are implemented:* ``convex_hull``: Returns a representation of the smallest convex Polygon containing  all the points in the object unless the number of points in the object is less than three.  For two points, the convex hull collapses to a LineString; for 1, a Point.  For three dimensional objects only their projection in the xy plane is taken into consideration.  Empty objects without coordinates return ``None`` for the convex_hull.Point-----A zero dimensional geometryA point has zero length and zero area. A point cannot be empty.Attributes~~~~~~~~~~~x, y, z : float    Coordinate valuesExample~~~~~~~~      &gt;&gt;&gt; from pygeoif import Point      &gt;&gt;&gt; p = Point(1.0, -1.0)      &gt;&gt;&gt; print(p)      POINT (1.0 -1.0)      &gt;&gt;&gt; p.y      -1.0      &gt;&gt;&gt; p.x      1.0LineString-----------A one-dimensional figure comprising one or more line segmentsA LineString has non-zero length and zero area. It may approximate a curveand need not be straight. Unlike a LinearRing, a LineString is not closed.Attributes~~~~~~~~~~~geoms : sequence    A sequence of PointsLinearRing-----------A closed one-dimensional geometry comprising one or more line segmentsA LinearRing that crosses itself or touches itself at a single point isinvalid and operations on it may fail.A LinearRing is self closing.Polygon--------A two-dimensional figure bounded by a linear ringA polygon has a non-zero area. It may have one or more negative-space&quot;holes&quot; which are also bounded by linear rings. If any rings cross eachother, the geometry is invalid and operations on it may fail.Attributes~~~~~~~~~~~exterior : LinearRing    The ring which bounds the positive space of the polygon.interiors : sequence    A sequence of rings which bound all existing holes.maybe_valid: boolean    When a polygon has obvious problems such as self crossing    lines or holes that are outside the exterior bounds this will    return False. Even if this returns True the geometry may still be invalid,    but if this returns False you do have a problem.MultiPoint----------A collection of one or more points.Attributes~~~~~~~~~~~geoms : sequence    A sequence of Points.MultiLineString----------------A collection of one or more line strings.A MultiLineString has non-zero length and zero area.Attributes~~~~~~~~~~~geoms : sequence    A sequence of LineStringsMultiPolygon-------------A collection of one or more polygons.Attributes~~~~~~~~~~~~~geoms : sequence    A sequence of `Polygon` instancesGeometryCollection-------------------A heterogenous collection of geometries (Points, LineStrings, LinearRingsand Polygons).Attributes~~~~~~~~~~~geoms : sequence    A sequence of geometry instancesPlease note:``GEOMETRYCOLLECTION`` isn't supported by the Shapefile or GeoJSON_ format.And this sub-class isn't generally supported by ordinary GIS sw (viewers and so on).So it's very rarely used in the real GIS professional world.Example~~~~~~~~    &gt;&gt;&gt; from pygeoif import geometry    &gt;&gt;&gt; p = geometry.Point(1.0, -1.0)    &gt;&gt;&gt; p2 = geometry.Point(1.0, -1.0)    &gt;&gt;&gt; geoms = [p, p2]    &gt;&gt;&gt; c = geometry.GeometryCollection(geoms)    &gt;&gt;&gt; [geom for geom in geoms]    [Point(1.0, -1.0), Point(1.0, -1.0)]Feature-------Aggregates a geometry instance with associated user-defined properties.Attributes~~~~~~~~~~~geometry : object    A geometry instanceproperties : dict    A dictionary linking field keys with values associated with with geometry instanceExample~~~~~~~~      &gt;&gt;&gt; from pygeoif import Point, Feature      &gt;&gt;&gt; p = Point(1.0, -1.0)      &gt;&gt;&gt; props = {'Name': 'Sample Point', 'Other': 'Other Data'}      &gt;&gt;&gt; a = Feature(p, props)      &gt;&gt;&gt; a.properties      {'Name': 'Sample Point', 'Other': 'Other Data'}      &gt;&gt;&gt; a.properties['Name']      'Sample Point'FeatureCollection-----------------A heterogenous collection of FeaturesAttributes~~~~~~~~~~~features: sequence    A sequence of feature instancesExample~~~~~~~~    &gt;&gt;&gt; from pygeoif import Point, Feature, FeatureCollection    &gt;&gt;&gt; p = Point(1.0, -1.0)    &gt;&gt;&gt; props = {'Name': 'Sample Point', 'Other': 'Other Data'}    &gt;&gt;&gt; a = Feature(p, props)    &gt;&gt;&gt; p2 = Point(1.0, -1.0)    &gt;&gt;&gt; props2 = {'Name': 'Sample Point2', 'Other': 'Other Data2'}    &gt;&gt;&gt; b = Feature(p2, props2)    &gt;&gt;&gt; features = [a, b]    &gt;&gt;&gt; c = FeatureCollection(features)    &gt;&gt;&gt; [feature for feature in c]    [Feature(Point(1.0, -1.0), {'Name': 'Sample Point', 'Other': 'Other Data'},...]Functions=========shape--------Create a pygeoif feature from an object that provides the ``__geo_interface__``or any GeoJSON_ compatible dictionary.    &gt;&gt;&gt; from shapely.geometry import Point    &gt;&gt;&gt; from pygeoif import geometry, shape    &gt;&gt;&gt; shape(Point(0,0))    Point(0.0, 0.0)from_wkt---------Create a geometry from its WKT representation    &gt;&gt;&gt; from pygeoif import from_wkt    &gt;&gt;&gt; p = from_wkt('POINT (0 1)')    &gt;&gt;&gt; print(p)    POINT (0.0 1.0)signed_area------------Return the signed area enclosed by a ring using the linear timealgorithm at http://www.cgafaq.info/wiki/Polygon_Area. A value &gt;= 0indicates a counter-clockwise oriented ring.orient-------Returns a copy of a polygon with exteriors and interiors in the right orientation.if ccw is True than the exterior will be in counterclockwise orientationand the interiors will be in clockwise orientation, orthe other way round when ccw is False.box---Return a rectangular polygon with configurable normal vector.mapping-------Return the ``__geo_interface__`` dictionary.Development===========Installation------------You can install PyGeoIf from pypi using pip::    pip install pygeoifTesting-------Install the requirements with ``pip install -r test-requirements.txt``and run the unit and static tests with::    pytest pygeoif    pytest --doctest-glob=&quot;README.rst&quot;    yesqa pygeoif/*.py    black pygeoif    flake8 pygeoif    mypy pygeoifpre-commit~~~~~~~~~~~Install the ``pre-commit`` hook with::    pip install pre-commit    pre-commit installand check the code with::    pre-commit run --all-filesAcknowledgments================The tests were improved with mutmut_ which discovered some nasty edge cases... _mutmut: https://github.com/boxed/mutmut.. _GeoJSON: https://geojson.org/.. _fastkml: http://pypi.python.org/pypi/fastkml/</longdescription>
</pkgmetadata>