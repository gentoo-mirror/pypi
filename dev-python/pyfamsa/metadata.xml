<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># üêçüßÆ PyFAMSA [![Stars](https://img.shields.io/github/stars/althonos/pyfamsa.svg?style=social&amp;maxAge=3600&amp;label=Star)](https://github.com/althonos/pyfamsa/stargazers)*[Cython](https://cython.org/) bindings and Python interface to [FAMSA](https://github.com/refresh-bio/FAMSA), an algorithm for ultra-scale multiple sequence alignments.*[![Actions](https://img.shields.io/github/actions/workflow/status/althonos/pyfamsa/test.yml?branch=main&amp;logo=github&amp;style=flat-square&amp;maxAge=300)](https://github.com/althonos/pyfamsa/actions)[![Coverage](https://img.shields.io/codecov/c/gh/althonos/pyfamsa?style=flat-square&amp;maxAge=3600&amp;logo=codecov)](https://codecov.io/gh/althonos/pyfamsa/)[![License](https://img.shields.io/badge/license-GPLv3-blue.svg?style=flat-square&amp;maxAge=2678400)](https://choosealicense.com/licenses/gpl-3.0/)[![PyPI](https://img.shields.io/pypi/v/pyfamsa.svg?style=flat-square&amp;maxAge=3600&amp;logo=PyPI)](https://pypi.org/project/pyfamsa)[![Bioconda](https://img.shields.io/conda/vn/bioconda/pyfamsa?style=flat-square&amp;maxAge=3600&amp;logo=anaconda)](https://anaconda.org/bioconda/pyfamsa)[![AUR](https://img.shields.io/aur/version/python-pyfamsa?logo=archlinux&amp;style=flat-square&amp;maxAge=3600)](https://aur.archlinux.org/packages/python-pyfamsa)[![Wheel](https://img.shields.io/pypi/wheel/pyfamsa.svg?style=flat-square&amp;maxAge=3600)](https://pypi.org/project/pyfamsa/#files)[![Python Versions](https://img.shields.io/pypi/pyversions/pyfamsa.svg?style=flat-square&amp;maxAge=600&amp;logo=python)](https://pypi.org/project/pyfamsa/#files)[![Python Implementations](https://img.shields.io/pypi/implementation/pyfamsa.svg?style=flat-square&amp;maxAge=600&amp;label=impl)](https://pypi.org/project/pyfamsa/#files)[![Source](https://img.shields.io/badge/source-GitHub-303030.svg?maxAge=2678400&amp;style=flat-square)](https://github.com/althonos/pyfamsa/)[![Mirror](https://img.shields.io/badge/mirror-EMBL-009f4d?style=flat-square&amp;maxAge=2678400)](https://git.embl.de/larralde/pyfamsa/)[![Issues](https://img.shields.io/github/issues/althonos/pyfamsa.svg?style=flat-square&amp;maxAge=600)](https://github.com/althonos/pyfamsa/issues)[![Docs](https://img.shields.io/readthedocs/pyfamsa/latest?style=flat-square&amp;maxAge=600)](https://pyfamsa.readthedocs.io)[![Changelog](https://img.shields.io/badge/keep%20a-changelog-8A0707.svg?maxAge=2678400&amp;style=flat-square)](https://github.com/althonos/pyfamsa/blob/main/CHANGELOG.md)[![Downloads](https://img.shields.io/pypi/dm/pyfamsa?style=flat-square&amp;color=303f9f&amp;maxAge=86400&amp;label=downloads)](https://pepy.tech/project/pyfamsa)***‚ö†Ô∏è This package is based on FAMSA 2.***## üó∫Ô∏è Overview[FAMSA](https://github.com/refresh-bio/FAMSA) is a method published in2016 by Deorowicz *et al.* for large-scale multiple sequence alignments.It uses state-of-the-art time and memory optimizations as well as a fastguide tree heuristic to reach very high performance and accuracy.PyFAMSA is a Python module that provides bindings to [FAMSA](https://github.com/refresh-bio/FAMSA)using [Cython](https://cython.org/). It implements a user-friendly, Pythonicinterface to align protein sequences using different parameters and accessresults directly. It interacts with the FAMSA library interface, which hasthe following advantages:- **single dependency**: pyfamsa is distributed as a Python package, so you  can add it as a dependency to your project, and stop worrying about the  FAMSA binary being present on the end-user machine.- **no intermediate files**: Everything happens in memory, in a Python object  you control, so you don't have to invoke the FAMSA CLI using a  sub-process and temporary files.- **friendly interface**: The different guide tree build methods and  heuristics can be selected from the Python code with a simple keyword  argument when configuring a new [`Aligner`](https://pyfamsa.readthedocs.io/en/stable/api/aligner.html#pyfamsa.Aligner).## üîß InstallingPyFAMSA can be installed directly from [PyPI](https://pypi.org/project/pyfamsa/),which hosts some pre-built wheels for the x86-64 architecture (Linux/OSX)and the Aarch64 architecture (Linux only), as well as the code required tocompile from source with Cython:```console$ pip install pyfamsa```&lt;!-- Otherwise, pyfamsa is also available as a [Bioconda](https://bioconda.github.io/)package:```console$ conda install -c bioconda pyfamsa``` --&gt;Otherwise, have a look at the [Installation page](https://pyfamsa.readthedocs.io/en/stable/install.html) of the [online documentation](https://pyfamsa.readthedocs.io/)## üí° ExampleLet's create some sequences in memory, align them using the UPGMA method,(without any heuristic), and simply print the alignment on screen:```pythonfrom pyfamsa import Aligner, Sequencesequences = [    Sequence(b&quot;Sp8&quot;,  b&quot;GLGKVIVYGIVLGTKSDQFSNWVVWLFPWNGLQIHMMGII&quot;),    Sequence(b&quot;Sp10&quot;, b&quot;DPAVLFVIMLGTITKFSSEWFFAWLGLEINMMVII&quot;),    Sequence(b&quot;Sp26&quot;, b&quot;AAAAAAAAALLTYLGLFLGTDYENFAAAAANAWLGLEINMMAQI&quot;),    Sequence(b&quot;Sp6&quot;,  b&quot;ASGAILTLGIYLFTLCAVISVSWYLAWLGLEINMMAII&quot;),    Sequence(b&quot;Sp17&quot;, b&quot;FAYTAPDLLLIGFLLKTVATFGDTWFQLWQGLDLNKMPVF&quot;),    Sequence(b&quot;Sp33&quot;, b&quot;PTILNIAGLHMETDINFSLAWFQAWGGLEINKQAIL&quot;),]aligner = Aligner(guide_tree=&quot;upgma&quot;)msa = aligner.align(sequences)for sequence in msa:      print(sequence.id.decode().ljust(10), sequence.sequence.decode())```This should output the following:```Sp10       --------DPAVLFVIMLGTIT-KFS--SEWFFAWLGLEINMMVIISp17       ---FAYTAPDLLLIGFLLKTVA-TFG--DTWFQLWQGLDLNKMPVFSp26       AAAAAAAAALLTYLGLFLGTDYENFA--AAAANAWLGLEINMMAQISp33       -------PTILNIAGLHMETDI-NFS--LAWFQAWGGLEINKQAILSp6        ------ASGAILTLGIYLFTLCAVIS--VSWYLAWLGLEINMMAIISp8        ------GLGKVIVYGIVLGTKSDQFSNWVVWLFPWNGLQIHMMGII```## üß∂ Thread-safety`Aligner` objects are thread-safe, and the `align` method is re-entrant. Youcould batch process several alignments in parallel using a[`ThreadPool`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.ThreadPool) with a singlealigner object:```pythonimport globimport multiprocessing.poolimport Bio.SeqIOfrom pyfamsa import Aligner, Sequencefamilies = [    [ Sequence(r.id.encode(), r.seq.encode()) for r in Bio.SeqIO.parse(file, &quot;fasta&quot;) ]    for file in glob.glob(&quot;pyfamsa/tests/data/*.faa&quot;)]aligner = Aligner()with multiprocessing.pool.ThreadPool() as pool:    alignments = pool.map(aligner.align, families)```&lt;!-- ## ‚è±Ô∏è Benchmarks --&gt;## üîé See AlsoDone with your protein alignment? You may be interested in trimming it: in thatcase, you could use the [`pytrimal`](https://github.com/althonos/pytrimal) Pythonpackage, which wraps [trimAl](http://trimal.cgenomics.org/) 2.0. Or perhapsyou want to build a HMM from the alignment? Then maybe have a look at[`pyhmmer`](https://github.com/althonos/pyhmmer), a Python package whichwraps [HMMER](http://hmmer.org/).## üí≠ Feedback### ‚ö†Ô∏è Issue TrackerFound a bug ? Have an enhancement request ? Head over to the [GitHub issue tracker](https://github.com/althonos/pyfamsa/issues)if you need to report or ask something. If you are filing in on a bug,please include as much information as you can about the issue, and try torecreate the same bug in a simple, easily reproducible situation.### üèóÔ∏è ContributingContributions are more than welcome! See[`CONTRIBUTING.md`](https://github.com/althonos/pyfamsa/blob/main/CONTRIBUTING.md)for more details.## üìã ChangelogThis project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html)and provides a [changelog](https://github.com/althonos/pyfamsa/blob/main/CHANGELOG.md)in the [Keep a Changelog](http://keepachangelog.com/en/1.0.0/) format.## ‚öñÔ∏è LicenseThis library is provided under the [GNU General Public License v3.0](https://choosealicense.com/licenses/gpl-3.0/). FAMSA is developed by the[REFRESH Bioinformatics Group](https://refresh-bio.github.io/) and isdistributed under the terms of the GPLv3 as well. See `vendor/FAMSA/LICENSE`for more information. In addition, FAMSA vendors several libraries forcompatibility, all of which are redistributed with PyFAMSA under their ownterms: `atomic_wait` (MIT License), `mimalloc` (MIT License), `libdeflate`(MIT License),  Boost (Boost Software License).*This project is in no way not affiliated, sponsored, or otherwise endorsedby the [FAMSA authors](https://github.com/refresh-bio). It was developedby [Martin Larralde](https://github.com/althonos/) during his PhD projectat the [European Molecular Biology Laboratory](https://www.embl.de/) inthe [Zeller team](https://github.com/zellerlab).*</longdescription>
</pkgmetadata>