<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenAI Function Calling[![GitHub Actions Build Status](https://github.com/jakecyr/openai-function-calling/actions/workflows/test-application.yml/badge.svg)](https://github.com/jakecyr/openai-function-calling/actions)[![PyPi Package Version](https://badge.fury.io/py/openai-function-calling.svg)](https://pypi.org/project/openai-function-calling/)Helper functions to generate JSON schema dicts for OpenAI ChatGPT function calling requests. See the [official Function Calling reference](https://platform.openai.com/docs/guides/gpt/function-calling) for more information.## InstallationInstall from PyPi with:```bashpip install openai-function-calling```**The openai-function-calling package does come with the openai package. It must be installed separately with `pip install openai`**## Usage### Auto-Infer the Function Definition (Beta)Automatically infer your function name, description, and parameters given a reference to the function. A `Function` instance is returned which can be converted to JSON schema with `.to_json_schema()` and then passed to the OpenAI chat completion API:```pythonfrom typing import Any, Callablefrom openai_function_calling import FunctionInferrerimport openaiimport json# Define example functions.def get_current_weather(location: str, unit: str = &quot;fahrenheit&quot;) -&gt; str:    &quot;&quot;&quot;Get the current weather and return a summary.&quot;&quot;&quot;    return f&quot;It is currently sunny in {location} and 75 degrees {unit}.&quot;def get_tomorrows_weather(location: str, unit: str = &quot;fahrenheit&quot;) -&gt; str:    &quot;&quot;&quot;Get the weather for tomorrow and return a summary.&quot;&quot;&quot;    return f&quot;Tomorrow it will be rainy in {location} and 60 degrees {unit}.&quot;# Infer the function definitions.get_current_weather_function = FunctionInferrer.infer_from_function_reference(    get_current_weather)get_tomorrows_weather_function = FunctionInferrer.infer_from_function_reference(    get_tomorrows_weather)# Get the function to call from ChatGPT (you would normally have more than one).response = openai.ChatCompletion.create(    model=&quot;gpt-3.5-turbo-0613&quot;,    messages=[        {            &quot;role&quot;: &quot;user&quot;,            &quot;content&quot;: &quot;What will the weather be like in Boston, MA today?&quot;,        }    ],    functions=[        # Convert the functions to JSON schema.        get_current_weather_function.to_json_schema(),        get_tomorrows_weather_function.to_json_schema(),    ],)```### Define Functions with ObjectsDefine your function definitions using typed classes `Function` and `Parameter` which automatically convert to JSON schema with `.to_json_schema` methods. See an example below:```pythonfrom openai_function_calling import Function, FunctionDict, Parameter, JsonSchemaTypedef get_current_weather(location: str, unit: str) -&gt; str:    &quot;&quot;&quot;Do some stuff in here.&quot;&quot;&quot;# Define the function.get_current_weather_function = Function(    &quot;get_current_weather&quot;,    &quot;Get the current weather&quot;,    [        Parameter(            name=&quot;location&quot;,            type=JsonSchemaType.STRING,            description=&quot;The city and state, e.g. San Francisco, CA&quot;,        ),        Parameter(            name=&quot;unit&quot;,            type=JsonSchemaType.STRING,            description=&quot;The temperature unit to use.&quot;,            enum=[&quot;celsius&quot;, &quot;fahrenheit&quot;],        ),    ],)# Convert to a JSON schema dict to send to OpenAI.get_current_weather_function_schema = get_current_weather_function.to_json_schema()```### Convert Functions to OpenAI Compatible JSON```pythonfrom openai import OpenAIfrom openai.types.chat import (    ChatCompletion,    ChatCompletionUserMessageParam,)from openai_function_calling.tool_helpers import ToolHelpers# Define our functions.def get_current_weather(location: str, unit: str) -&gt; str:    &quot;&quot;&quot;Get the current weather and return a summary.&quot;&quot;&quot;    return f&quot;It is currently sunny in {location} and 75 degrees {unit}.&quot;def get_tomorrows_weather(location: str, unit: str) -&gt; str:    &quot;&quot;&quot;Get tomorrow's weather and return a summary.&quot;&quot;&quot;    return f&quot;It will be rainy tomorrow in {location} and around 65 degrees {unit}.&quot;openai_client = OpenAI()# Send the query and our function context to OpenAI.response: ChatCompletion = openai_client.chat.completions.create(    model=&quot;gpt-3.5-turbo-1106&quot;,    messages=[        ChatCompletionUserMessageParam(            role=&quot;user&quot;, content=&quot;What's the weather in Boston MA?&quot;        ),    ],    tools=ToolHelpers.infer_from_function_refs(        [get_current_weather, get_tomorrows_weather]    ),    tool_choice=&quot;auto&quot;,)```## ExamplesTo run the examples, set the environment variable `OPENAI_API_KEY` to your OpenAI API key. For example:```bashexport OPENAI_API_KEY=SOME_KEY_VALUE# or when running an exampleOPENAI_API_KEY=SOME_KEY_VALUE python examples/weather_functions.py```Make sure to also follow all instructions in the [Installation section](#installation).See complete examples in the [./examples](https://github.com/jakecyr/openai-function-calling/tree/master/examples) folder.</longdescription>
</pkgmetadata>