<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Admin Dashboard App for FastAPI/Flask/Django[![Build Status](https://github.com/vsdudakov/fastadmin/workflows/CI/badge.svg?branch=main)](https://github.com/vsdudakov/fastadmin/workflows/CI/badge.svg?branch=main)[![codecov](https://codecov.io/gh/vsdudakov/fastadmin/branch/main/graph/badge.svg?token=RNGX5HOW3T)](https://codecov.io/gh/vsdudakov/fastadmin)[![License](https://img.shields.io/github/license/vsdudakov/fastadmin)](https://github.com/vsdudakov/fastadmin/blob/master/LICENSE)[![PyPi](https://badgen.net/pypi/v/fastadmin)](https://pypi.org/project/fastadmin/)[![Python 3.10](https://img.shields.io/badge/python-3.10-blue.svg)](https://www.python.org/downloads/release/python-3100/)## Screenshots![SignIn View](https://raw.githubusercontent.com/vsdudakov/fastadmin/main/docs/assets/images/signin.png)![List View](https://raw.githubusercontent.com/vsdudakov/fastadmin/main/docs/assets/images/list.png)![Change View](https://raw.githubusercontent.com/vsdudakov/fastadmin/main/docs/assets/images/change.png)&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://twitter.com/intent/tweet?text=Admin%20Dashboard%20For%20FastAPI&amp;url=https://github.com/vsdudakov/fastadmin&amp;hashtags=FastAPI,AdminDashboard&quot;&gt;    &lt;img alt=&quot;tweet&quot; src=&quot;https://img.shields.io/twitter/url/https/twitter?label=Share%20on%20twitter&amp;style=social&quot; target=&quot;_blank&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;## Introduction&lt;a href='https://github.com/vsdudakov/fastadmin' target='_blank'&gt;FastAdmin&lt;/a&gt; is an easy-to-use Admin Dashboard App for FastAPI/Django/Flask inspired by Django Admin.FastAdmin was built with relations in mind and admiration for the excellent and popular Django Admin. It's engraved in its design that you may configure your admin dashboard for FastAPI/Django/Flask easiest way.FastAdmin is designed to be minimalistic, functional and yet familiar.## Getting StartedIf you have any questions that are beyond the scope of the documentation, Please feel free to email &lt;a href='mailto:vsdudakov@gmail.com' target='_blank'&gt;us&lt;/a&gt;.### InstallationFollow the steps below to setup FastAdmin:Install the package using pip:Note: For zsh and macos use: &lt;code&gt;pip install fastadmin[fastapi,django]&lt;/code&gt;```bashpip install fastadmin[fastapi,django]  # for fastapi with django ormpip install fastadmin[fastapi,tortoise-orm]  # for fastapi with tortoise ormpip install fastadmin[fastapi,pony]  # for fastapi with pony ormpip install fastadmin[fastapi,sqlalchemy]  # for fastapi with sqlalchemy ormpip install fastadmin[django]  # for django with django ormpip install fastadmin[django,pony]  # for django with pony ormpip install fastadmin[flask,sqlalchemy]  # for flask with sqlalchemy```Install the package using poetry:```bashpoetry add 'fastadmin[fastapi,django]'  # for fastapi with django ormpoetry add 'fastadmin[fastapi,tortoise-orm]'  # for fastapi with tortoise ormpoetry add 'fastadmin[fastapi,pony]'  # for fastapi with pony ormpoetry add 'fastadmin[fastapi,sqlalchemy]'  # for fastapi with sqlalchemy ormpoetry add 'fastadmin[django]'  # for django with django ormpoetry add 'fastadmin[django,pony]'  # for django with pony ormpoetry add 'fastadmin[flask,sqlalchemy]'  # for flask with sqlalchemy```Configure required settings using virtual environment variables:Note: You can add these variables to .env and use python-dotenv to load them. See all settings &lt;a href='#settings'&gt;here&lt;/a&gt;```bashexport ADMIN_USER_MODEL=Userexport ADMIN_USER_MODEL_USERNAME_FIELD=usernameexport ADMIN_SECRET_KEY=secret_key```### Quick TutorialSetup FastAdmin for a framework### FastAPI```pythonfrom fastapi import FastAPIfrom fastadmin import fastapi_app as admin_appapp = FastAPI()app.mount(&quot;/admin&quot;, admin_app)```### Django```pythonfrom django.urls import pathfrom fastadmin import get_django_admin_urls as get_admin_urlsfrom fastadmin.settings import settingsurlpatterns = [    path(f&quot;{settings.ADMIN_PREFIX}/&quot;, get_admin_urls()),]```### Flask```pythonfrom flask import Flaskfrom fastadmin import flask_app as admin_appapp = Flask(__name__)app.register_blueprint(admin_app, url_prefix=&quot;/admin&quot;)```Register ORM models### Tortoise ORM```pythonfrom uuid import UUIDimport bcryptfrom tortoise import fieldsfrom tortoise.models import Modelfrom fastadmin import TortoiseModelAdmin, registerclass User(Model):    username = fields.CharField(max_length=255, unique=True)    hash_password = fields.CharField(max_length=255)    is_superuser = fields.BooleanField(default=False)    is_active = fields.BooleanField(default=False)    def __str__(self):        return self.username@register(User)class UserAdmin(TortoiseModelAdmin):    exclude = (&quot;hash_password&quot;,)    list_display = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    list_display_links = (&quot;id&quot;, &quot;username&quot;)    list_filter = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    search_fields = (&quot;username&quot;,)    async def authenticate(self, username: str, password: str) -&gt; UUID | int | None:        user = await User.filter(username=username, is_superuser=True).first()        if not user:            return None        if not bcrypt.checkpw(password.encode(), user.hash_password.encode()):            return None        return user.id```### Django ORM```pythonfrom django.db import modelsfrom fastadmin import DjangoModelAdmin, registerclass User(models.Model):    username = models.CharField(max_length=255, unique=True)    hash_password = models.CharField(max_length=255)    is_superuser = models.BooleanField(default=False)    is_active = models.BooleanField(default=False)    def __str__(self):        return self.username@register(User)class UserAdmin(DjangoModelAdmin):    exclude = (&quot;hash_password&quot;,)    list_display = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    list_display_links = (&quot;id&quot;, &quot;username&quot;)    list_filter = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    search_fields = (&quot;username&quot;,)    def authenticate(self, username, password):        obj = User.objects.filter(username=username, is_superuser=True).first()        if not obj:            return None        if not obj.check_password(password):            return None        return obj.id```### SQL Alchemy```pythonimport bcryptfrom sqlalchemy import Boolean, Integer, String, selectfrom sqlalchemy.ext.asyncio import async_sessionmaker, create_async_enginefrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_columnfrom fastadmin import SqlAlchemyModelAdmin, registersqlalchemy_engine = create_async_engine(    &quot;sqlite+aiosqlite:///:memory:&quot;,    echo=True,)sqlalchemy_sessionmaker = async_sessionmaker(sqlalchemy_engine, expire_on_commit=False)class Base(DeclarativeBase):    passclass User(Base):    __tablename__ = &quot;user&quot;    id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)    username: Mapped[str] = mapped_column(String(length=255), nullable=False)    hash_password: Mapped[str] = mapped_column(String(length=255), nullable=False)    is_superuser: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)    is_active: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)    def __str__(self):        return self.username@register(User, sqlalchemy_sessionmaker=sqlalchemy_sessionmaker)class UserAdmin(SqlAlchemyModelAdmin):    exclude = (&quot;hash_password&quot;,)    list_display = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    list_display_links = (&quot;id&quot;, &quot;username&quot;)    list_filter = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    search_fields = (&quot;username&quot;,)    async def authenticate(self, username, password):        sessionmaker = self.get_sessionmaker()        async with sessionmaker() as session:            query = select(User).filter_by(username=username, password=password, is_superuser=True)            result = await session.scalars(query)            user = result.first()            if not user:                return None            if not bcrypt.checkpw(password.encode(), user.hash_password.encode()):                return None            return user.id```### Pony ORM```pythonimport bcryptfrom pony.orm import Database, PrimaryKey, Required, db_sessionfrom fastadmin import PonyORMModelAdmin, registerdb = Database()db.bind(provider=&quot;sqlite&quot;, filename=&quot;:memory:&quot;, create_db=True)class User(db.Entity):  # type: ignore [name-defined]    _table_ = &quot;user&quot;    id = PrimaryKey(int, auto=True)    username = Required(str)    hash_password = Required(str)    is_superuser = Required(bool, default=False)    is_active = Required(bool, default=False)    def __str__(self):        return self.username@register(User)class UserAdmin(PonyORMModelAdmin):    exclude = (&quot;hash_password&quot;,)    list_display = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    list_display_links = (&quot;id&quot;, &quot;username&quot;)    list_filter = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    search_fields = (&quot;username&quot;,)    @db_session    def authenticate(self, username, password):        user = next((f for f in self.model_cls.select(username=username, password=password, is_superuser=True)), None)        if not user:            return None        if not bcrypt.checkpw(password.encode(), user.hash_password.encode()):            return None        return user.id```## DocumentationSee full documentation [here](https://vsdudakov.github.io/fastadmin).## LicenseThis project is licensed under the MIT License - see the [LICENSE](https://github.com/vsdudakov/fastadmin/blob/main/LICENSE) file for details.</longdescription>
</pkgmetadata>