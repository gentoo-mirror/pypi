<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bareASGIA lightweight Python [ASGI](user-guide/asgi) web server framework(read the [docs](https://rob-blackbourn.github.io/bareASGI/)).## OverviewThis is a _bare_ ASGI web server framework. The goal is to providea minimal implementation, with other facilities (serving static files, CORS,sessions, etc.) being implemented by optional packages.The framework is targeted at micro-services which require a light footprint(in a container for example), or as a base for larger frameworks.Python 3.8+ is required.## Optional Packages- [bareASGI-cors](https://github.com/rob-blackbourn/bareASGI-cors) for cross origin resource sharing,- [bareASGI-static](https://github.com/rob-blackbourn/bareASGI-static) for serving static files,- [bareASGI-jinja2](https://github.com/rob-blackbourn/bareASGI-jinja2) for [Jinja2](https://github.com/pallets/jinja) template rendering,- [bareASGI-graphql-next](https://github.com/rob-blackbourn/bareASGI-graphql-next) for [GraphQL](https://github.com/graphql-python/graphql-core) and [graphene](https://github.com/graphql-python/graphene),- [bareASGI-rest](https://github.com/rob-blackbourn/bareASGI-rest) for REST support,- [bareASGI-prometheus](https://github.com/rob-blackbourn/bareASGI-prometheus) for [prometheus](https://prometheus.io/) metrics,- [bareASGI-session](https://github.com/rob-blackbourn/bareASGI-session) for sessions.## FunctionalityThe framework provides the basic functionality required for developing a webapplication, including:- Http,- WebSockets,- Routing,- Lifecycle,- Middleware## Simple ServerHere is a simple server with a request handler that returns some text.```pythonimport uvicornfrom bareasgi import Application, HttpRequest, HttpResponse, text_writerasync def example_handler(request: HttpRequest) -&gt; HttpResponse:    return HttpResponse(        200,        [(b'content-type', b'text/plain')],        text_writer('This is not a test')    )app = Application()app.http_router.add({'GET'}, '/', example_handler)uvicorn.run(app, port=9009)```</longdescription>
</pkgmetadata>