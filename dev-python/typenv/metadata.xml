<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://github.com/hukkinj1/typenv/workflows/Tests/badge.svg?branch=master)](https://github.com/hukkinj1/typenv/actions?query=workflow%3ATests+branch%3Amaster+event%3Apush)[![codecov.io](https://codecov.io/gh/hukkinj1/typenv/branch/master/graph/badge.svg)](https://codecov.io/gh/hukkinj1/typenv)[![PyPI version](https://img.shields.io/pypi/v/typenv)](https://pypi.org/project/typenv)# typenv&lt;!--- Don't edit the version line below manually. Let bump2version do it for you. --&gt;&gt; Version 0.2.0&gt; Typed environment variable parsing for Python**Table of Contents**  *generated with [mdformat-toc](https://github.com/hukkinj1/mdformat-toc)*&lt;!-- mdformat-toc start --slug=github --maxlevel=6 --minlevel=2 --&gt;- [Background](#background)- [Installing](#installing)- [Usage](#usage)  - [Basics](#basics)  - [Supported types](#supported-types)  - [Default values](#default-values)  - [Name prefixes](#name-prefixes)  - [Name character set](#name-character-set)  - [Name uppercasing](#name-uppercasing)  - [Validation](#validation)  - [Reading from a `.env` file](#reading-from-a-env-file)  - [Dumping parsed values](#dumping-parsed-values)- [Acknowledgments](#acknowledgments)&lt;!-- mdformat-toc end --&gt;## Background&lt;a name=&quot;background&quot;&gt;&lt;/a&gt;Typenv does environment variable parsing with an API almost identical to the excellent [environs](https://github.com/sloria/environs).There are a few reasons why typenv might be preferred:- Type annotated typecast functions: type checkers are able to understand types of parsed environment variables.- More flexible prefix manipulation of environment variable names.- Validation of environment variable names.- Optional automatic uppercasing of environment variable names.- Ability to generate a .env.example that shows expected types of environment variables.- Less dependencies. No [marshmallow](https://github.com/marshmallow-code/marshmallow) required.## Installing&lt;a name=&quot;installing&quot;&gt;&lt;/a&gt;Installing from PyPI repository (https://pypi.org/project/typenv):```bashpip install typenv```## Usage&lt;a name=&quot;usage&quot;&gt;&lt;/a&gt;### Basics&lt;a name=&quot;basics&quot;&gt;&lt;/a&gt;Set environment variables:```bashexport NAME='Harry Potter'export AGE=14export IS_WIZARD=trueexport PATRONUM_SUCCESS_RATE=0.92export BANK_BALANCE=134599.01export LUCKY_NUMBERS=7,3,11export EXTRA_DETAILS='{&quot;friends&quot;: [&quot;Hermione&quot;, &quot;Ron&quot;]}'export FAVORITE_COLOR=0x7f0909```Parse the values in Python:```pythonfrom typenv import Envenv = Env()NAME = env.str(&quot;NAME&quot;)  # =&gt; &quot;Harry Potter&quot;AGE = env.int(&quot;AGE&quot;)  # =&gt; 14IS_WIZARD = env.bool(&quot;IS_WIZARD&quot;)  # =&gt; TruePATRONUM_SUCCESS_RATE = env.float(&quot;PATRONUM_SUCCESS_RATE&quot;)  # =&gt; 0.92BANK_BALANCE = env.decimal(&quot;BANK_BALANCE&quot;)  # =&gt; decimal.Decimal(&quot;134599.01&quot;)LUCKY_NUMBERS = env.list(&quot;LUCKY_NUMBERS&quot;, subcast=int)  # =&gt; [7, 3, 11]EXTRA_DETAILS = env.json(&quot;EXTRA_DETAILS&quot;)  # =&gt; {&quot;friends&quot;: [&quot;Hermione&quot;, &quot;Ron&quot;]}FAVORITE_COLOR = env.bytes(&quot;FAVORITE_COLOR&quot;, encoding=&quot;hex&quot;)  # =&gt; b&quot;\x7f\t\t&quot;# Optional settings must have a default valueIS_DEATH_EATER = env.bool(&quot;IS_DEATH_EATER&quot;, default=False)  # =&gt; False```### Supported types&lt;a name=&quot;supported-types&quot;&gt;&lt;/a&gt;The types supported by typenv are:- `env.str`- `env.int`- `env.bool`- `env.float`- `env.decimal`- `env.list`  - Takes a `subcast` keyword argument for casting list items to one of `str`, `int` , `bool`, `float` or `decimal.Decimal`- `env.json`- `env.bytes`  - Takes an `encoding` keyword argument for indicating how the bytes are encoded.    For now only `hex` is supported.### Default values&lt;a name=&quot;default-values&quot;&gt;&lt;/a&gt;Normally, if an environment variable is not found, typenv raises an exception.If a default value is provided, however, that will be returned instead of raising.```pythonfrom typenv import Envenv = Env()BOOL = env.bool(&quot;NON_EXISTING_NAME&quot;, default=False)  # =&gt; FalseLIST = env.list(&quot;NON_EXISTING_NAME&quot;, default=[&quot;a&quot;, &quot;b&quot;])  # =&gt; [&quot;a&quot;, &quot;b&quot;]OPTIONAL_INT = env.int(&quot;NON_EXISTING_NAME&quot;, default=None)  # =&gt; None```### Name prefixes&lt;a name=&quot;name-prefixes&quot;&gt;&lt;/a&gt;```bashexport FLASK_HOST=127.0.0.1export FLASK_PORT=44144``````pythonfrom typenv import Envenv = Env()# Explicitly prefixing variable names works, but repeats itself# (especially given more environment variables and nested prefixes).HOST = env.str(&quot;FLASK_HOST&quot;)  # =&gt; &quot;127.0.0.1&quot;PORT = env.int(&quot;FLASK_PORT&quot;)  # =&gt; 44144# This reads the same variables as above, and can be a nice way of# reducing repetition and expressing structure. Note that it is possible# to have nested `with` statements.with env.prefixed(&quot;FLASK_&quot;):    HOST = env.str(&quot;HOST&quot;)  # =&gt; &quot;127.0.0.1&quot;    PORT = env.int(&quot;PORT&quot;)  # =&gt; 44144# For more control, one can mutate `env.prefix` (of type list[str])# directly. Note that if an exception occurs reading the environment# variables, then `env.prefix` will not be reset to its initial value,# which is something that the `with` statement would take care of.env.prefix.append(&quot;FLASK_&quot;)HOST = env.str(&quot;HOST&quot;)  # =&gt; &quot;127.0.0.1&quot;PORT = env.int(&quot;PORT&quot;)  # =&gt; 44144env.prefix.pop()```### Name character set&lt;a name=&quot;name-character-set&quot;&gt;&lt;/a&gt;Typenv validates environment variable names.By default, the set of allowed characters includes upper case ASCII letters, digits and the underscore (`_`).The set of allowed characters can be configured:```pythonfrom typenv import Envenv = Env(allowed_chars=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;)```### Name uppercasing&lt;a name=&quot;name-uppercasing&quot;&gt;&lt;/a&gt;```bashexport UPPER_CASE_NAME=true``````pythonfrom typenv import Env# Environment variable names in type cast methods will automatically be upper# cased when `upper=True` is set here.env = Env(upper=True)NAME = env.bool(&quot;upper_casE_Name&quot;)```### Validation&lt;a name=&quot;validation&quot;&gt;&lt;/a&gt;```bashexport NAME='Harry Potter'export AGE=14``````pythonfrom typenv import Envenv = Env()# A single validator functionNAME = env.str(&quot;NAME&quot;, validate=lambda n: n.startswith(&quot;Harry&quot;))# A validator function can signal error by raising an exceptiondef is_positive(num):    if num &lt;= 0:        raise Exception(&quot;Number is not positive&quot;)# A validator function can alternatively return `False` to signal an errordef is_less_than_thousand(num):    if num &gt;= 1000:        return False    return True# Multiple validator functions can be passed as an iterable of callablesAGE = env.int(&quot;AGE&quot;, validate=(is_positive, is_less_than_thousand))```### Reading from a `.env` file&lt;a name=&quot;reading-from-a-env-file&quot;&gt;&lt;/a&gt;While developing, it is often useful to read environment variables from a file.Typenv supports this via the `Env.read_end()` method.The method will look for a file (by default) named `.env` in current working directoryand import environment variables from it.If a file is not found,the method will walk up in the directory tree until a file is found or the root directory is reached.The method returns a boolean that is `True` if a file is found.Given a `.env` file in current working directory with the following content```shSOME_VAR='some value'```The following code will be able to read and parse the value```pythonfrom typenv import Envenv = Env()env.read_env()SOME_VAR = env.str(&quot;SOME_VAR&quot;)  # =&gt; &quot;some value&quot;```### Dumping parsed values&lt;a name=&quot;dumping-parsed-values&quot;&gt;&lt;/a&gt;```bashexport SOME_STR=blaablaaexport SOME_INT=99``````pythonfrom typenv import Env, ParsedValueenv = Env()SOME_STR = env.str(&quot;SOME_STR&quot;)SOME_INT = env.int(&quot;SOME_INT&quot;)assert env.dump() == {    &quot;SOME_INT&quot;: ParsedValue(value=99, type=&quot;int&quot;, optional=False),    &quot;SOME_STR&quot;: ParsedValue(value=&quot;blaablaa&quot;, type=&quot;str&quot;, optional=False),}```## Acknowledgments&lt;a name=&quot;acknowledgments&quot;&gt;&lt;/a&gt;The public API of this library is almost an exact copy of [environs](https://github.com/sloria/environs),which is based on [envparse](https://github.com/rconradharris/envparse) and [django-environ](https://github.com/joke2k/django-environ).Credit for the interface goes to the authors of those libraries.</longdescription>
</pkgmetadata>