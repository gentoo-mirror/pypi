<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>README======.. image:: https://travis-ci.org/libvips/pyvips.svg?branch=master    :alt: Build Status    :target: https://travis-ci.org/libvips/pyvipsPyPI package:https://pypi.python.org/pypi/pyvipsconda package:https://anaconda.org/conda-forge/pyvipsWe have formatted docs online here:https://libvips.github.io/pyvips/This module wraps the libvips image processing library:https://libvips.github.io/libvips/The libvips docs are also very useful:https://libvips.github.io/libvips/API/current/If you have the development headers for libvips installed and have a working Ccompiler, this module will use cffi API mode to try to build a libvips binary extension for your Python. If it is unable to build a binary extension, it will use cffi ABI modeinstead and only needs the libvips shared library. This takes longer tostart up and is typically ~20% slower in execution.  You can find out howpyvips installed with ``pip show pyvips``.This binding passes the vips test suite cleanly and with no leaks underpython2.7 - python3.6, pypy and pypy3 on Windows, macOS and Linux. How it works------------Programs that use ``pyvips`` don't manipulate images directly, insteadthey create pipelines of image processing operations building on a sourceimage. When the end of the pipe is connected to a destination, the wholepipeline executes at once, streaming the image in parallel from source todestination a section at a time.Because ``pyvips`` is parallel, it's quick, and because it doesn't need tokeep entire images in memory, it's light.  For example, the libvips speed and memory use benchmark:https://github.com/libvips/libvips/wiki/Speed-and-memory-useLoads a large tiff image, shrinks by 10%, sharpens, and saves again. On thistest ``pyvips`` is typically 3x faster than ImageMagick and needs 5x lessmemory. There's a handy chapter in the docs explaining how libvips opens files,which gives some more background.http://libvips.github.io/libvips/API/current/How-it-opens-files.md.htmlconda Install-------------The conda package includes a matching libvips binary, so just enter:.. code-block:: shell    $ conda install --channel conda-forge pyvipsNon-conda install-----------------First, you need the libvips shared library on your library search path, version8.2 or later, though at least version 8.9 is required for all features to work. On Linux and macOS, you can just install via your package manager; on Windows youcan download a pre-compiled binary from the libvips website.https://libvips.github.io/libvips/install.htmlNext, install this package, perhaps:.. code-block:: shell    $ pip install --user pyvipsOn Windows, you'll need a 64-bit Python. The official one works well. You will also need to add ``vips-dev-x.y\bin`` to your ``PATH`` sothat pyvips can find all the DLLs it needs. You can either do this in the**Advanced System Settings** control panel, or you can just change``PATH`` in your Python program.If you set the PATH environment variable in the control panel, you can usethe ``vips`` command-line tools, which I find useful. However, this will adda lot of extra DLLs to your search path and they might conflict with otherprograms, so it's usually safer just to set ``PATH`` in your program.To set ``PATH`` from within Python, you need something like this at the start:.. code-block:: python    import os    vipshome = 'c:\\vips-dev-8.7\\bin'    os.environ['PATH'] = vipshome + ';' + os.environ['PATH']Now when you import pyvips, it should be able to find the DLLs.Example-------This sample program loads a JPG image, doubles the value of every green pixel,sharpens, and then writes the image back to the filesystem again:.. code-block:: python    import pyvips    image = pyvips.Image.new_from_file('some-image.jpg', access='sequential')    image *= [1, 2, 1]    mask = pyvips.Image.new_from_array([[-1, -1, -1],                                        [-1, 16, -1],                                        [-1, -1, -1]                                       ], scale=8)    image = image.conv(mask, precision='integer')    image.write_to_file('x.jpg')Notes-----Local user install:.. code-block:: shell    $ pip3 install -e .    $ pypy -m pip --user -e .Run all tests:.. code-block:: shell    $ tox Run test suite:.. code-block:: shell    $ pytestRun a specific test:.. code-block:: shell    $ pytest tests/test_saveload.pyRun perf tests:.. code-block:: shell   $ cd tests/perf   $ ./run.shStylecheck:.. code-block:: shell    $ flake8Generate HTML docs in ``doc/build/html``:.. code-block:: shell    $ cd doc; sphinx-build -bhtml . build/htmlRegenerate enums:Make sure you have installed a libvips with all optional packages enabled,then.. code-block:: shell    $ cd examples; \      ./gen-enums.py ~/GIT/libvips/libvips/Vips-8.0.gir &gt; enums.pyThen check and move `enums.py` into `pyvips/`.Regenerate autodocs:Make sure you have installed a libvips with all optional packages enabled,then.. code-block:: shell    $ cd doc; \      python3 -c &quot;import pyvips; pyvips.Operation.generate_sphinx_all()&quot; &gt; x And copy-paste ``x`` into the obvious place in ``doc/vimage.rst``. Update version number:.. code-block:: shell    $ vi pyvips/version.py    $ vi doc/conf.pyUpdate pypi package:.. code-block:: shell    $ python3 setup.py sdist    $ twine upload dist/*    $ git tag -a v2.2.0 -m &quot;as uploaded to pypi&quot;    $ git push origin v2.2.0</longdescription>
</pkgmetadata>