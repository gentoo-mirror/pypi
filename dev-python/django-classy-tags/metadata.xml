<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==================Django Classy Tags==================|pypi| |build| |coverage|The goal of this project is to create a new way of writing Django template tagswhich is fully compatible with the current Django templating infrastructure.This new way should be easy, clean and require as little boilerplate code aspossible while still staying as powerful as possible. Some features:* Class based template tags.* Template tag argument parser.* Declarative way to define arguments.* Supports (theoretically infinite) parse-until blocks.* Extensible!.. note::     This project is considered 3rd party (no supervision by the `django CMS Association &lt;https://www.django-cms.org/en/about-us/&gt;`_). Join us on `Slack                 &lt;https://www.django-cms.org/slack/&gt;`_ for more information.*******************************************Contribute to this project and win rewards*******************************************Because this is a an open-source project, we welcome everyone to`get involved in the project &lt;https://www.django-cms.org/en/contribute/&gt;`_ and`receive a reward &lt;https://www.django-cms.org/en/bounty-program/&gt;`_ for their contribution. Become part of a fantastic community and help us make django CMS the best CMS in the world.   We'll be delighted to receive yourfeedback in the form of issues and pull requests. Before submitting yourpull request, please review our `contribution guidelines&lt;http://docs.django-cms.org/en/latest/contributing/index.html&gt;`_.We're grateful to all contributors who have helped create and maintain this package.Contributors are listed at the `contributors &lt;https://github.com/django-cms/django-classy-tags/graphs/contributors&gt;`_section.Documentation=============See ``REQUIREMENTS`` in the `setup.py &lt;https://github.com/divio/django-classy-tags/blob/master/setup.py&gt;`_file for additional dependencies:|python| |django|Please refer to the documentation in the docs/ directory for more information or visit our`online documentation &lt;https://django-classy-tags.readthedocs.io&gt;`_.Example-------This is how a tag looks like using django-classy-tags:.. code-block:: python    from classytags.core import Options    from classytags.helpers import AsTag    from classytags.arguments import Argument    from django import template    register = template.Library()    class Hello(AsTag):        options = Options(            Argument('name', required=False, default='world'),            'as',            Argument('varname', required=False, resolve=False)        )        def get_value(self, context, name):            return 'hello %s' % name    register.tag(Hello)That's your standard *hello world* example. Which can be used like this:* ``{% hello %}``: Outputs ``hello world``* ``{% hello &quot;classytags&quot; %}``: Outputs ``hello classytags``* ``{% hello as myvar %}``: Outputs nothing but stores ``hello world`` into the  template variable ``myvar``.* ``{% hello &quot;my friend&quot; as othervar %}``: Outputs nothing but stores  ``hello my friend`` into the template variable ``othervar``.Running Tests-------------You can run tests by executing::    virtualenv env    source env/bin/activate    pip install -r tests/requirements.txt    python setup.py test.. |pypi| image:: https://badge.fury.io/py/django-classy-tags.svg    :target: http://badge.fury.io/py/django-classy-tags.. |build| image:: https://travis-ci.org/divio/django-classy-tags.svg?branch=master    :target: https://travis-ci.org/divio/django-classy-tags.. |coverage| image:: https://codecov.io/gh/divio/django-classy-tags/branch/master/graph/badge.svg    :target: https://codecov.io/gh/divio/django-classy-tags.. |python| image:: https://img.shields.io/badge/python-3.7+-blue.svg    :target: https://pypi.org/project/django-classy-tags/.. |django| image:: https://img.shields.io/badge/django-3.2,%204.0,%204.0-blue.svg    :target: https://www.djangoproject.com/</longdescription>
</pkgmetadata>