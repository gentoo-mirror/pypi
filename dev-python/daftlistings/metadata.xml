<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Daftlistings[![Build Status](https://travis-ci.org/AnthonyBloomer/daftlistings.svg?branch=master)](https://travis-ci.org/AnthonyBloomer/daftlistings)[![codecov](https://codecov.io/gh/AnthonyBloomer/daftlistings/branch/master/graph/badge.svg)](https://codecov.io/gh/AnthonyBloomer/daftlistings)A library that enables programmatic interaction with [Daft.ie](https://daft.ie). Daft.ie has nationwide coverage and contains about 80% of the total available properties in Ireland.## InstallationDaftlistings is available on the [Python Package Index (PyPI)](https://pypi.org/project/daftlistings/). You can install daftlistings using pip.``` bashvirtualenv envsource env/bin/activatepip install daftlistings```To install the development version, run:``` bashpip install https://github.com/AnthonyBloomer/daftlistings/archive/dev.zip```## Usage``` pythonfrom daftlistings import Daftdaft = Daft()listings = daft.search()for listing in listings:    print(listing.title)    print(listing.price)    print(listing.daft_link)    # ...```By default, the Daft search function iterates over each page of results and appends each Listing object to the array that is returned. If you wish to limit the number of results that are returned you can use the `max_pages` argument.```pythondaft.search(max_pages=1)```## ExamplesSearch for apartments for rent in Dublin.```pythonfrom daftlistings import Daft, Location, SearchType, PropertyTypedaft = Daft()daft.set_location(Location.DUBLIN)daft.set_search_type(SearchType.RESIDENTIAL_RENT)daft.set_property_type(PropertyType.APARTMENT)listings = daft.search()for listing in listings:    print(listing.title)    print(listing.price)    print(listing.daft_link)```Search for houses for sale in Dublin between 400 and 500k.```pythonfrom daftlistings import Daft, Location, SearchType, PropertyTypedaft = Daft()daft.set_location(Location.DUBLIN)daft.set_search_type(SearchType.RESIDENTIAL_SALE)daft.set_property_type(PropertyType.HOUSE)daft.set_min_price(400000)daft.set_max_price(500000)listings = daft.search()for listing in listings:    print(listing.title)    print(listing.price)    print(listing.daft_link)```Search for student accomodation near Dundalk IT.```pythonfrom daftlistings import Daft, Location, SearchTypedaft = Daft()daft.set_location(Location.DUNDALK_INSTITUTE_OF_TECHNOLOGY_LOUTH)daft.set_search_type(SearchType.STUDENT_ACCOMMODATION)listings = daft.search()for listing in listings:    print(listing.title)    print(listing.price)    print(listing.daft_link)```Search for commercial listings.```pythonfrom daftlistings import Daft, SearchTypedaft = Daft()daft.set_search_type(SearchType.COMMERCIAL_SALE)listings = daft.search()for listing in listings:    print(listing.title)    print(listing.price)    print(listing.daft_link)    print()```Search properties according to criteria then sort by nearness to Dublin Castle```pythonfrom daftlistings import Daft, SearchTypedaft = Daft()daft.set_location(&quot;Dublin City&quot;)daft.set_search_type(SearchType.RESIDENTIAL_RENT)daft.set_min_price(1000)daft.set_max_price(1500)listings = daft.search(max_pages=1)dublin_castle_coords = [53.3429, -6.2674]listings.sort(key=lambda x: x.distance_to(dublin_castle_coords))for listing in listings:    print(f'{listing.title}')    print(f'{listing.daft_link}')    print(f'{listing.price}')    print(f'{listing.distance_to(dublin_castle_coords):.3}km')    print('')```Search properties within 10kms of Dublin city centre```pythonfrom daftlistings import Daft, SearchTypedaft = Daft()daft.set_location(&quot;Dublin City Centre&quot;, Distance.KM10)daft.set_search_type(SearchType.RESIDENTIAL_RENT)listings = daft.search(max_pages=1)for listing in listings:    print(f'{listing.title}')    print(f'{listing.daft_link}')    print(f'{listing.price}')    print('')```Search rental properties in Dublin with monthly rent lower than 1500 euros and visualize it on a map```pythonimport pandas as pdfrom daftlistings import Daft, Location, SearchType, PropertyType, SortType, MapVisualization daft = Daft()daft.set_location(Location.DUBLIN)daft.set_search_type(SearchType.RESIDENTIAL_RENT)daft.set_sort_type(SortType.PRICE_ASC)daft.set_max_price(1500)listings = daft.search()# cache the listings in the local filewith open(&quot;result.txt&quot;, &quot;w&quot;) as fp:    fp.writelines(&quot;%s\n&quot; % listing.as_dict_for_mapping() for listing in listings)# read from the local filewith open(&quot;result.txt&quot;) as fp:  lines = fp.readlines()properties = []for line in lines:  properties.append(eval(line))df = pd.DataFrame(properties)print(df)dublin_map = MapVisualization(df)dublin_map.add_markers()dublin_map.add_colorbar()dublin_map.save(&quot;ireland_rent.html&quot;)print(&quot;Done, please checkout the html file&quot;)```Search for apartments for rent in Dublin with an alarm and parking.```pythonfrom daftlistings import Daft, Location, SearchType, PropertyType, Facilitydaft = Daft()daft.set_location(Location.DUBLIN)daft.set_search_type(SearchType.RESIDENTIAL_RENT)daft.set_property_type(PropertyType.APARTMENT)daft.set_facility(Facility.PARKING)daft.set_facility(Facility.ALARM)listings = daft.search()for listing in listings:    print(listing.title)    print(listing.price)    print(listing.daft_link)    print()```## Running TestsThe Python unittest module contains its own test discovery function, which you can run from the command line:```python -m unittest discover tests/```## Contributing  - Fork the project and clone locally.  - Create a new branch for what you're going to work on.  - Push to your origin repository.  - Create a new pull request in GitHub.Note: We use (Black)[https://github.com/psf/black] for code formatting. After making any changes to the code, it is important for you to ensure that it passes Black's lint check. </longdescription>
</pkgmetadata>