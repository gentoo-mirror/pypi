<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># novem - data visualisation for codersA wrapper library for the novem.no data visualisation platform. Create charts,documents e-mails and dashboards through one simple api.**NB:** novem is currently in closed alpha, if you want to try it out pleasereach out to hello@novem.no## ExampelsCreate a linechart from a dataframe using pandas data reader```pythonfrom pandas_datareader import datafrom novem import Plotline = Plot(&quot;aapl_price_hist&quot;, type=&quot;line&quot;, name=&quot;Apple price history&quot;)# Only get the adjusted close.aapl = data.DataReader(&quot;AAPL&quot;,                       start=&quot;2015-1-1&quot;,                       end=&quot;2021-12-31&quot;,                       data_source=&quot;yahoo&quot;)[&quot;Adj Close&quot;]# send data to the plotaapl.pipe(line)# url to view plotprint(line.url)```## Getting startedTo get started with novem you'll have to register an account, currently thiscan be done by reaching out to the novem developers on hello@novem.no.Once you have a username and password you can setup your environment using:```bash  python -m novem --init```In additon to invoking the novem module as shown above, the novem package alsoincludes an extensive command-line interface (cli). Check out CLI.md in thisrepostiory or [novem.no](https://novem.no) for more details.## Creating a plotNovem represents plots as a Plot class that can be imported from the main novempackage `from novem import Plot`.The plot class takes a single mandatory positional argument, the name of theplot. * If the plot name is new, the instantiation of the class will create the plot. * If the plot name already exist, then the new object will operate on the   existing plot.In addition to the name, there are two broad categories of options for aplot, data and config: * The **data** contains the actual information to visualise (usually in the form   of numeric csv) * **Config**, which contains information about the visual such as:   * Type (bar, line, donut, map etc)   * Titles/captions/names/colors/legends/axis etcThere are two ways to interact with the plots, one can either supply allthe neccessary options as named arguments when creating the plot, or use theproperty accessors to modfity them one by one (this is more helpful when workingwith the plot in an interactive way). Below is an example of the twoapproaches.```pythonfrom novem import Plot# everything in the constructorbarchart = Plot(&lt;name&gt;, \  type=&quot;bar&quot;, \  title=&quot;barchart title&quot;, \  caption = &quot;caption&quot;)# property approachbarchart = Plot(&quot;plot_name&quot;)barchart.type = &quot;bar&quot;barchart.title = &quot;barchart title&quot;barchart.caption = &quot;caption&quot;```In addition to setting individual properties, the plot object is also callable.This means that the resulting plot can be used as a function, either by beingprovided data as an argument, or used as part of a pipe chain.```pythonfrom novem import Plotimport pandas as pdimport numpy as np# construct some random sample datadf = pd.DataFrame(np.random.randn(100, 4), columns=list(&quot;ABCD&quot;)).cumsum()line = Plot(&quot;new_line&quot;, type=&quot;line&quot;)# alternative one, setting data explicitly to a csv stringline.data = df.to_csv()# or let the plot invoke the to_csvline.data = df# alternative two, calling Plot with a csv stringline(df.to_csv())# alternative three calling the Plot with an object that has a to_csv functionline(df)# ordf.pipe(line)```**NB:** All novem plot operations are live.This means that as soon as you write to or modify any aspects of the plotobject, those changes are reflected on the novem server and anyone watchingthe plot in real time.## Contribution and developmentThe novem python library and platform is under active development, contributionsor issues are most welcome.For guidelines on how to contribute, please check out the CONTRIBUTING.md filein this repository.## LICENSEThis python library is licensed under the MIT license, see the LICENSE file fordetails</longdescription>
</pkgmetadata>