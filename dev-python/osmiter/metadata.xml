<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># osmiterA simple library for parsing OSM data.Supports simple OSM XML files as well as OSM GZ, OSM BZ2 and OSM PBF.Please be aware that osmiter uses Google's [protobuf](https://pypi.org/project/protobuf/) library,written in pure Python, which isn't particularly fast.## Example Usage```pythonimport osmitershop_count = 0for feature in osmiter.iter_from_osm(&quot;some_osm_file.osm&quot;):    if feature[&quot;type&quot;] == &quot;node&quot; and &quot;shop&quot; in feature[&quot;tag&quot;]:        shop_count += 1print(f&quot;this osm file containes {shop_count} shop nodes&quot;)```## What is osmiter generating?For each feature (node/way/relation) it yields a dict containing element attributes(like `id`, `lat` or `timestamp`) and 2 additional items: key `&quot;type&quot;` holding `&quot;node&quot;/&quot;way&quot;/&quot;relation&quot;`and key `&quot;tag&quot;` holding a dict with feature tags (this dict may be empty).Additionally nodes will contain keys `&quot;lat&quot;` and `&quot;lon&quot;` with node coordinates,ways will contain key `&quot;nd&quot;` with a list of all node_ids references by this way,and relations contain a key `&quot;member&quot;` with a list of dicts of each member's attributes.Almost all attributes are returned as strings with the exception for:- `id`, `ref`, `version`, `changeset`, `uid` and `changeset_count` → int- `lat`, `lon` → float- `open` and `visible` → bool- `timestamp` → [aware](https://docs.python.org/3/library/datetime.html#aware-and-naive-objects) [datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime-objects) item.#### Data validationosmiter preforms almost no data validation, so it is possible to recieve ways with no nodes,relations with no members, empty tag values, invalid coordinates, references to non-existing items,or duplicate ids※.However, several data assumptions are made:1. Each feature has an `id` attribute.     (※) For OSM PBF files, if an object is missing an id `-1` will be assigned, per the osmformat.proto definition.   This can result in multiple objects with an id equal to `-1`.2. Each node has to have both `lat` and `lon` defined.3. Every attribute defined in the table on attribute type conversion has to be convertible to its type.     So, `id == 0x1453`, `changeset_count == AAAAAA`, `ref == 12.433` or `lat == 1.23E+10` will cause an exception;     `timestamp` value has to be either ISO8601-compliant or epoch time represented by an integer.4. Boolean atributes are only considered truthy if they're set to `true` (case-insensitive).   Values `1`, `on`, `yes`, `ＴＲＵＥ` will all evaluate to False.#### Minimum requirements for each elementBare-minimum node:```{    &quot;id&quot;: int,    &quot;type&quot;: &quot;node&quot;,    &quot;lat&quot;: float,    &quot;lon&quot;: float,    &quot;tag&quot;: Dict[str, str], # May be empty}```Bare-minimum way:```{    &quot;id&quot;: int,    &quot;type&quot;: &quot;way&quot;,    &quot;tag&quot;: Dict[str, str], # May be empty    &quot;nd&quot;: List[int],}```Bare-minimum relation:```{    &quot;id&quot;: int,    &quot;type&quot;: &quot;relation&quot;,    &quot;tag&quot;: Dict[str, str], # May be empty    &quot;member&quot;: List[ dict ]}```#### Example elementsSee the corresponding [OSM XML examples](https://wiki.openstreetmap.org/wiki/OSM_XML).```{    &quot;type&quot;: &quot;node&quot;,    &quot;tag&quot;: {}    &quot;id&quot;: 298887269,    &quot;lat&quot;: 54.0901746,    &quot;lon&quot;: 12.2482632,    &quot;user&quot;: &quot;SvenHRO&quot;,    &quot;uid&quot;: 46882,    &quot;visible&quot;: True,    &quot;version&quot;: 1,    &quot;changeset&quot;: 676636,    &quot;timestamp&quot;: datetime.datetime(2008, 9, 21, 21, 37, 45, tzinfo=datetime.timezone.utc)}``````{    &quot;type&quot;: &quot;node&quot;,    &quot;tag&quot;: {&quot;name&quot;: &quot;Neu Broderstorf&quot;, &quot;traffic_sign&quot;: &quot;city_limit&quot;},    &quot;id&quot;: 1831881213,    &quot;version&quot;: 1,    &quot;changeset&quot;: 12370172,    &quot;lat&quot;: 54.0900666,    &quot;lon&quot;: 12.2539381,    &quot;user&quot;: &quot;lafkor&quot;,    &quot;uid&quot;: 75625,    &quot;visible&quot;: True,    &quot;timestamp&quot;: datetime.datetime(2012, 7, 20, 9, 43, 19, tzinfo=datetime.timezone.utc),}``````{    &quot;type&quot;: &quot;way&quot;,    &quot;tag&quot;: {&quot;highway&quot;: &quot;unclassified&quot;, &quot;name&quot;: &quot;Pastower Straße&quot;},    &quot;id&quot;: 26659127,    &quot;user&quot;: &quot;Masch&quot;,    &quot;uid&quot;: 55988,    &quot;visible&quot;: True,    &quot;version&quot;: 5,    &quot;changeset&quot;: 4142606,    &quot;timestamp&quot;: datetime.datetime(2010, 3, 16, 11, 47, 8, tzinfo=datetime.timezone.utc),    &quot;nd&quot;: [292403538, 298884289, 261728686]}``````{    &quot;type&quot;: &quot;relation&quot;,    &quot;tag&quot;: {        &quot;name&quot;: &quot;Küstenbus Linie 123&quot;,        &quot;network&quot;: &quot;VVW&quot;,        &quot;operator&quot;: &quot;Regionalverkehr Küste&quot;,        &quot;ref&quot;: &quot;123&quot;,        &quot;route&quot;: &quot;bus&quot;,        &quot;type&quot;: &quot;route&quot;    },    &quot;id&quot;: 56688,    &quot;user&quot;: &quot;kmvar&quot;,    &quot;uid&quot;: 56190,    &quot;visible&quot;: True,    &quot;version&quot;: 28,    &quot;changeset&quot;: 6947637,    &quot;timestamp&quot;: datetime.datetime(2011, 1, 12, 14, 23, 49, tzinfo=datetime.timezone.utc),    &quot;member&quot;: [        {&quot;type&quot;: &quot;node&quot;, &quot;ref&quot;: 294942404, &quot;role&quot;: &quot;&quot;},        {&quot;type&quot;: &quot;node&quot;, &quot;ref&quot;: 364933006, &quot;role&quot;: &quot;&quot;},        {&quot;type&quot;: &quot;way&quot;, &quot;ref&quot;: 4579143, &quot;role&quot;: &quot;&quot;},        {&quot;type&quot;: &quot;node&quot;, &quot;ref&quot;: 249673494, &quot;role&quot;: &quot;&quot;},    ]}```## Reference---### osmiter.iter_from_osm```iter_from_osm(      source: Union[str, bytes, os.PathLike, int, IO[bytes]],      file_format: Union[str, NoneType] = None,      filter_attrs: Union[Iterable[str], NoneType] = None) -&gt; Iterator[dict]```Yields all items from provided source file.If source is a str/bytes/os.PathLike (path) the format will be guess based on file extension.Otherwise, if source is an int (file descriptior) or a file-like object,the `file_format` argument must be provided.File-like sources have to be opened in binary mode.Format has to be one of &quot;xml&quot;, &quot;gz&quot;, &quot;bz2&quot;, &quot;pbf&quot;.osmiter spends most of its time parsing element attributes.If only specific attributes are going to be used, pass an Iterable (most prefereably a set)with wanted attributes to filter_attrs.No matter what attributes you define in filter_attrs, some attributes are always parsed:- &quot;id&quot;, &quot;lat&quot; and &quot;lon&quot;: for nodes- &quot;id&quot;: for ways and relations- &quot;type&quot;, &quot;ref&quot; and &quot;role&quot;: for members`filter_attrs` is ignored for pbf files.---### osmiter.iter_from_xml_buffer```iter_from_xml_buffer(    buff: IO[bytes],    filter_attrs: Union[Iterable[str], NoneType] = None) -&gt; Iterator[dict]```Yields all items inside a given OSM XML buffer.`filter_attrs` is explained in osmiter.iter_from_osm documentation.---### osmiter.iter_from_pbf_buffer```iter_from_pbf_buffer(buff: IO[bytes]) -&gt; Iterator[dict]```Yields all items inside a given OSM PBF buffer.---### osmiter.parser_xml.iter_from_xml_bufferSame as `osmiter.iter_from_xml_buffer`.---### osmiter.parser_xml.OSMErrorAn exception (inheriting from `RuntimeException`) used to represent issues with XML data.---### osmiter.iter_from_pbf_buffer```iter_from_pbf_buffer(buff: BinaryIO) -&gt; Iterator[dict]```Yields all items inside a given OSM PBF file.---### osmiter.parser_pbf.iter_from_pbf_bufferSame as `osmiter.iter_from_pbf_buffer`.---### osmiter.parser_pbf.ParserPbfInternal object used to parse PBF files. Don't use.---### osmiter.parser_pbf.PBFErrorAn Exception (inheriting from `RuntimeException`) used to represent issues with OSM PBF files.---## License**osmiter** is provided under the MIT license, included in the `license.md` file.</longdescription>
</pkgmetadata>