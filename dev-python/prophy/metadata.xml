<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/prophy.svg    :target: https://pypi.python.org/pypi/prophy    :alt: Pypi Package Version.. image:: https://img.shields.io/pypi/pyversions/prophy.svg    :target: https://pypi.python.org/pypi/prophy    :alt: Supported Python Versions.. image:: https://readthedocs.org/projects/prophy/badge    :target: http://prophy.readthedocs.io/en/latest    :alt: Documentation Status.. image:: https://coveralls.io/repos/github/aurzenligl/prophy/badge.svg?branch=master    :target: https://coveralls.io/github/aurzenligl/prophy?branch=master    :alt: Coverage Status.. image:: https://github.com/aurzenligl/prophy/workflows/test/badge.svg    :target: https://github.com/aurzenligl/prophy/actions?query=workflow%3AtestProphy is a statically typed, binary, tag-free, unpacked serialization protocol.You can define message schema::    struct MyMsg    {        u16 x&lt;&gt;;    };generate codecs for chosen languages::    prophyc --python_out . --cpp_full_out . --cpp_out . test.prophyand serialize data in Python::    &gt;&gt;&gt; import test    &gt;&gt;&gt; msg = test.MyMsg()    &gt;&gt;&gt; msg.x[:] = [1, 2, 3]    &gt;&gt;&gt; msg.encode('&lt;')    '\x03\x00\x00\x00\x01\x00\x02\x00\x03\x00\x00\x00'    &gt;&gt;&gt; print msg    x: 1    x: 2    x: 3in C++::    #include &lt;iostream&gt;    #include &lt;iterator&gt;    #include &quot;test.ppf.hpp&quot;    int main()    {        prophy::generated::MyMsg msg{{1, 2, 3}};        std::vector&lt;uint8_t&gt; data = msg.encode();        std::copy(data.begin(), data.end(), std::ostream_iterator&lt;unsigned&gt;(std::cout, &quot; &quot;));        std::cout &lt;&lt; '\n' &lt;&lt; msg.print();        return 0;    }::    3 0 0 0 1 0 2 0 3 0 0 0    x: 1    x: 2    x: 3again in C++ (half hand-rolled, compiler-dependent, but fastest option)::    #include &lt;iostream&gt;    #include &lt;iterator&gt;    #include &lt;cstdlib&gt;    #include &quot;test.pp.hpp&quot;    int main()    {        MyMsg* msg = static_cast&lt;MyMsg*&gt;(std::malloc(12));        msg-&gt;num_of_x = 3;        msg-&gt;x[0] = 1;        msg-&gt;x[1] = 2;        msg-&gt;x[2] = 3;        std::copy((uint8_t*)msg, ((uint8_t*)msg) + 12, std::ostream_iterator&lt;unsigned&gt;(std::cout, &quot; &quot;));        std::cout &lt;&lt; '\n';        return 0;    }::    3 0 0 0 1 0 2 0 3 0 0 0Documentation: http://prophy.readthedocs.orgIssues: https://github.com/aurzenligl/prophy/issues</longdescription>
</pkgmetadata>