<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Quickstart for usersSo, your friendly neighborhood mongogranter says you know have access to adatabase through your email address. What now? First, install mongogrant:```bashpip install mongogrant```Next, request a token link to be sent to your email:```mgrant init mcurie@espci.fr \  --endpoint https://grantmedb.materialsproject.org```Click the link in your email to prove you're you, copy the fetch token from theloaded page, and then run:```mgrant settoken wh054900d70k3ny35y0u423```Finally, get credentials for your database. Here, Marie is asking mongogrant toprint out db.json and my_launchpad.yaml starter files for[FireWorks](https://materialsproject.github.io/fireworks/) and[atomate](https://atomate.org/):```mgrant db mongodb03.nersc.gov fw_mc_polonium \  --role readWrite \  --atomate-starters```## About mongograntMongogrant is a utility to grant username and passwordcredentials for read and readWrite roles on various databaseson various hosts to owners of email addresses.A server administrator has fine-grained control viaallow/deny rules for granting tokens and credentials.People request an email that contains a one-time link. Thatlink gives a user a fetch token. All tokens expire andexpiration time is customizable. People then use themongogrant client to make requests like```pythonfrom mongogrant.client import Client# config file on disk has tokens and host/db aliases# `Client()` with no args looks to# ~/.mongogrant.json for configclient = Client()# No config yet? Set one up with at least one remote for fetching credentials# See below for how to obtain &lt;FETCH_TOKEN&gt; for a given &lt;ENDPOINT&gt;.client.set_remote(&quot;https://grantmedb.materialsproject.org&quot;, &quot;&lt;FETCH_TOKEN&gt;&quot;)# Set some aliases if you'd like:client.set_alias(&quot;dev&quot;, &quot;mongodb03.nersc.gov&quot;, &quot;host&quot;)client.set_alias(&quot;prod&quot;, &quot;mongodb04.nersc.gov&quot;, &quot;host&quot;)client.set_alias(&quot;fireworks&quot;, &quot;fw_dw_phonons&quot;, &quot;db&quot;)# pymongo.database.Database with read rolesource_db = client.db(&quot;ro:dev/fireworks&quot;)# readWrite role: config stores &quot;prod&quot; host alias and &quot;fireworks&quot; db aliastarget_db = client.db(&quot;rw:prod/fireworks&quot;)# ...Do database stuff!```One can also go entirely through a running app's API:```bash&gt; # Using the HTTPie command line HTTP client (https://httpie.org/)&gt; # Install via `{brew,apt-get,pip,...} install httpie`&gt; http GET https://grantmedb.materialsproject.org/gettoken/&lt;YOUR_EMAIL&gt;HTTP/1.1 200 OKConnection: keep-aliveContent-Length: 59Content-Type: application/jsonDate: Thu, 17 May 2018 18:05:30 GMTServer: nginx/1.10.3{    &quot;msg&quot;: &quot;Sent link to &lt;YOUR_EMAIL&gt; to retrieve token.&quot;}&gt; http GET https://grantmedb.materialsproject.org/verifytoken/&lt;VERIFY_TOKEN&gt;HTTP/1.1 200 OKConnection: keep-aliveContent-Encoding: gzipContent-Type: text/html; charset=utf-8Date: Thu, 17 May 2018 18:06:17 GMTServer: nginx/1.10.3Transfer-Encoding: chunkedFetch token: &lt;FETCH_TOKEN&gt; (expires 2018-06-19 18:05:30.508000 UTC)&gt; # end-of-line &quot;\&quot; below only necessary if command spans two lines.&gt; http --form POST https://grantmedb.materialsproject.org/grant/&lt;FETCH_TOKEN&gt; \&gt;   role=readWrite host=mongodb03.nersc.gov db=dw_phononsHTTP/1.1 200 OKConnection: keep-aliveContent-Length: 108Content-Type: application/jsonDate: Thu, 17 May 2018 18:11:22 GMTServer: nginx/1.10.3{    &quot;password&quot;: &quot;&lt;PASSWORD&gt;&quot;,    &quot;username&quot;: &quot;dwinston_lbl.gov_readWrite&quot;}&gt;```You can run a &quot;server&quot; on your laptop in a Jupyer notebookand manage allow/deny rules, grant / revoke grants ofcredentials, etc. A small Flask appis included as an example for deploying a server to whichclients can connect to obtain tokens and credentials. ## Set up a server```pythonfrom mongogrant.config import Configfrom mongogrant.server import Server, check, path, seed, Mailgunserver = Server(Config(check=check, path=path, seed=seed()))server.set_mgdb(&quot;mongodb://mgserver:mgserverpass@my.host.com/mongogrant&quot;)server.set_mailer(Mailgun, dict(    api_key=&quot;YOUR_KEY&quot;,    base_url=&quot;https://api.mailgun.net/v3/YOUR_DOMAIN&quot;,    from_addr=&quot;mongogrant@YOUR_DOMAIN&quot;))server.set_admin_client(    host=&quot;other1.host.com&quot;,    username=&quot;mongoadmin&quot;,    password=&quot;mongoadminpass&quot;)server.set_admin_client(    host=&quot;other2.host.com&quot;,    username=&quot;mongoadmin&quot;,    password=&quot;mongoadminpass&quot;)```### Appointing others to set allow/deny rulesA mongogrant server admin can add &quot;ruler&quot; users who can set allow/deny rules for users via the `mgrant` CLI. An admin sets a ruler document in the `server.mgdb` collection, e.g.```pythonserver.mgdb.rulers.replace_one(    {&quot;email&quot;: &quot;starlord@lbl.gov&quot;},    {        &quot;email&quot;: &quot;starlord@lbl.gov&quot;,        &quot;hosts&quot;: [&quot;mongodb03.nersc.gov&quot;],        &quot;dbs&quot;: [&quot;mp_&quot;, &quot;fw_&quot;],        &quot;emails&quot;: [&quot;@lbl.gov&quot;],        &quot;which&quot;: [&quot;allow&quot;]    },    upsert=True)```Allows user `starlord@lbl.gov` to set `allow` rules for any user with an &quot;@lbl.gov&quot; email address on the Mongo host &quot;mongodb03.nersc.gov&quot; for any database name prefixed with &quot;mp_&quot; or &quot;fw_&quot;. Any field in a ruler document can be set to &quot;all&quot; rather than an array.</longdescription>
</pkgmetadata>