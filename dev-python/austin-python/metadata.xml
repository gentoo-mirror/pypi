<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;br/&gt;  &lt;img src=&quot;docs/source/images/logo.png&quot;       alt=&quot;Austin&quot;       height=&quot;256px&quot; /&gt;  &lt;br/&gt;&lt;/p&gt;&lt;h3 align=&quot;center&quot;&gt;Python wrapper for Austin&lt;/h3&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/P403n1x87/austin-python/actions?workflow=Tests&quot;&gt;    &lt;img src=&quot;https://github.com/P403n1x87/austin-python/workflows/Tests/badge.svg&quot;         alt=&quot;GitHub Actions: Tests&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/P403n1x87/austin-python/actions?workflow=Checks&quot;&gt;    &lt;img src=&quot;https://github.com/P403n1x87/austin-python/workflows/Checks/badge.svg&quot;         alt=&quot;GitHub Actions: Checks&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://codecov.io/gh/P403n1x87/austin-python&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/P403n1x87/austin-python/branch/main/graph/badge.svg&quot;         alt=&quot;Codecov&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://austin-python.readthedocs.io/&quot;&gt;    &lt;img src=&quot;https://readthedocs.org/projects/austin-python/badge/&quot;         alt=&quot;Documentation&quot;&gt;  &lt;/a&gt;  &lt;br/&gt;  &lt;a href=&quot;https://pypi.org/project/austin-python/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/austin-python.svg&quot;         alt=&quot;PyPI&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pepy.tech/project/austin-python&quot;&gt;    &lt;img src=&quot;https://static.pepy.tech/personalized-badge/austin-python?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=downloads&quot;         alt=&quot;Downloads&quot; /&gt;  &lt;a/&gt;  &lt;br/&gt;  &lt;a href=&quot;https://github.com/P403n1x87/austin-python/blob/main/LICENSE.md&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/license-GPLv3-ff69b4.svg&quot;         alt=&quot;LICENSE&quot;&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#synopsis&quot;&gt;&lt;b&gt;Synopsis&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#installation&quot;&gt;&lt;b&gt;Installation&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#usage&quot;&gt;&lt;b&gt;Usage&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#compatibility&quot;&gt;&lt;b&gt;Compatibility&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#documentation&quot;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;bull;  &lt;a href=&quot;#contribute&quot;&gt;&lt;b&gt;Contribute&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.buymeacoffee.com/Q9C1Hnm28&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot; alt=&quot;Buy Me A Coffee&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;# SynopsisThe `austin-python` package is a Python wrapper around the [Austin] binary thatprovides convenience classes to quickly develop your statistical profilingtools. Whether your code is thread-based or asynchronous, `austin-python` hasyou covered. This is, for instance, how you would turn Austin into a Pythonapplication:~~~ pythonfrom austin.aio import AsyncAustin# Make your sub-class of AsyncAustinclass EchoAsyncAustin(AsyncAustin):    def on_ready(self, process, child_process, command_line):        print(f&quot;Austin PID: {process.pid}&quot;)        print(f&quot;Python PID: {child_process.pid}&quot;)        print(f&quot;Command Line: {command_line}&quot;)    def on_sample_received(self, line):        print(line)    def on_terminate(self, data):        print(data)# Use the Proactor event loop on Windowsif sys.platform == &quot;win32&quot;:    asyncio.set_event_loop(asyncio.ProactorEventLoop())try:    # Start the Austin application with some command line arguments    austin = EchoAsyncAustin()    asyncio.get_event_loop().run_until_complete(        austin.start([&quot;-i&quot;, &quot;10000&quot;, &quot;python3&quot;, &quot;myscript.py&quot;])    )except (KeyboardInterrupt, asyncio.CancelledError):    pass~~~The `austin-python` package is at the heart of the [AustinTUI](https://github.com/P403n1x87/austin-tui) and the [AustinWeb](https://github.com/P403n1x87/austin-web) Python applications. Go check themout if you are looking for full-fledged usage examples.Included with the package come two applications for the conversion of Austincollected output, which is in the form of [collapsedstacks](https://github.com/brendangregg/FlameGraph), to either the[Speedscope](https://speedscope.app/) JSON format or the [Google pprofformat](https://github.com/google/pprof). Note, however, that the Speedscope webapplication supports Austin native format directly.# InstallationThis package can be installed from PyPI with~~~ bashpip install --user austin-python --upgrade~~~Please note that `austin-python` requires the [Austin] binary. The defaultlookup locations are, in order,- current working directory;- the `AUSTINPATH` environment variable which gives the path to the folder that  contains the Austin binary;- the `.austinrc` TOML configuration file in the user's home folder, e.g.  `~/.austinrc` on Linux (see below for a sample `.austinrc` file);- the `PATH` environment variable.A sample `.austinrc` file would look like so~~~ tomlbinary = &quot;/path/to/austin&quot;~~~# UsageA simple example of an echo application was shown above. Other examples using,e.g., threads, can be found in the official documentation. You can also browsethrough the code of the [Austin TUI](https://github.com/P403n1x87/austin-tui)and the [Austin Web](https://github.com/P403n1x87/austin-web) Pythonapplications to see how they leverage `austin-python`.## Format conversionAs it was mentioned before, this package also comes with two scripts for formatconversion, namely `austin2speedscope` and `austin2pprof`. They both take twomandatory arguments, that is, the input and output file. For example, to convertthe Austin profile data file `myscript.aprof` to the Google pprof data file`myscript.pprof`, you can run~~~ bashaustin2pprof myscript.aprof myscript.pprof~~~The package also provide the `austin-compress` utility to compress the Austinraw samples by aggregation.# CompatibilityThe `austin-python` package is tested on Linux, macOS and Windows with Python3.7-3.11.# DocumentationThe official documentation is hosted on readthedocs.io at[austin-python.readthedocs.io](https://austin-python.readthedocs.io/).# ContributeIf you want to help with the development, then have a look at the open issuesand have a look at the [contributing guidelines](CONTRIBUTING.md) before youopen a pull request.You can also contribute to the development by either [becoming aPatron](https://www.patreon.com/bePatron?u=19221563) on Patreon, by [buying me acoffee](https://www.buymeacoffee.com/Q9C1Hnm28) on BMC or by chipping in a fewpennies on [PayPal.Me](https://www.paypal.me/gtornetta/1).&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.buymeacoffee.com/Q9C1Hnm28&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot;         alt=&quot;Buy Me A Coffee&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;[Austin]: https://github.com/p403n1x87/austin</longdescription>
</pkgmetadata>