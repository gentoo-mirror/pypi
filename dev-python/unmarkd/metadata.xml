<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**NOTE: This project is _maintained._** While it may seem inactive, it is because there is nothing to add. If you want an enhancement or want to file a bug report, please go to the [issues](https://github.com/ThatXliner/unmarkd/issues).# ðŸ”„ Unmarkd[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v1.json)](https://github.com/charliermarsh/ruff)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)[![codecov](https://codecov.io/gh/ThatXliner/unmarkd/branch/master/graph/badge.svg?token=PWVIERHTG3)](https://codecov.io/gh/ThatXliner/unmarkd) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) [![CI](https://github.com/ThatXliner/unmarkd/actions/workflows/ci.yml/badge.svg)](https://github.com/ThatXliner/unmarkd/actions/workflows/ci.yml) [![PyPI - Downloads](https://img.shields.io/pypi/dm/unmarkd)](https://pypi.org/project/unmarkd/)&gt; A markdown reverser.---Unmarkd is a [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)-powered [Markdown](https://en.wikipedia.org/wiki/Markdown) reverser written in Python and for Python.## WhyThis is created as a [StackSearch](http://github.com/ThatXliner/stacksearch) (one of my other projects) dependency. In order to create a better API, I needed a way to reverse HTML. So I created this.There are [similar projects](https://github.com/xijo/reverse_markdown) (written in Ruby) ~~but I have not found any written in Python (or for Python)~~ later I found a popular library, [html2text](https://github.com/Alir3z4/html2text).## InstallationYou know the drill```bashpip install unmarkd```## Comparison**TL;DR: Html2Text is fast. If you don't need much configuration, you could use Html2Text for the little speed increase.**&lt;details&gt;&lt;summary&gt;Click to expand&lt;/summary&gt;### Speed**TL;DR: Unmarkd &lt; Html2Text**Html2Text is basically faster:![Benchmark](./assets/benchmark.png)(The `DOC` variable used can be found [here](./assets/benchmark.html))Unmarkd sacrifices speed for [power](#configurability).Html2Text directly uses Python's [`html.parser`](https://docs.python.org/3/library/html.parser.html) module (in the standard library). On the other hand, Unmarkd uses the powerful HTML parsing library, `beautifulsoup4`. BeautifulSoup can be configured to use different HTML parsers. In Unmarkd, we configure it to use Python's `html.parser`, too.But another layer of code means more code is ran.I hope that's a good explanation of the speed difference.### Correctness**TL;DR: Unmarkd == Html2Text**I actually found _two_ html-to-markdown libraries. One of them was [Tomd](https://github.com/gaojiuli/tomd) which had an _incorrect implementation_:![Actual results](./assets/tomd_cant_handle.png)It seems to be abandoned, anyway.Now with Html2Text and Unmarkd:![Epic showdown](./assets/correct.png)In other words, they _work_### Configurability**TL;DR: Unmarkd &gt; Html2Text**This is Unmarkd's strong point.In Html2Text, you only have a limited [set of options](https://github.com/Alir3z4/html2text/blob/master/docs/usage.md#available-options).In Unmarkd, you can subclass the `BaseUnmarker` and implement conversions for new tags (e.g. `&lt;q&gt;`), etc. In my opinion, it's much easier to extend and configure Unmarkd.Unmarkd was originally written as a StackSearch dependancy.Html2Text has no options for configuring parsing of code blocks. Unmarkd does&lt;/details&gt;## DocumentationHere's an example of basic usage```pythonimport unmarkdprint(unmarkd.unmark(&quot;&lt;b&gt;I &lt;i&gt;love&lt;/i&gt; markdown!&lt;/b&gt;&quot;))# Output: **I *love* markdown!**```or something more complex (shamelessly taken from [here](https://markdowntohtml.com)):```pythonimport unmarkdhtml_doc = R&quot;&quot;&quot;&lt;h1 id=&quot;sample-markdown&quot;&gt;Sample Markdown&lt;/h1&gt;&lt;p&gt;This is some basic, sample markdown.&lt;/p&gt;&lt;h2 id=&quot;second-heading&quot;&gt;Second Heading&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Unordered lists, and:&lt;ol&gt;&lt;li&gt;One&lt;/li&gt;&lt;li&gt;Two&lt;/li&gt;&lt;li&gt;Three&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;More&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Blockquote&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And &lt;strong&gt;bold&lt;/strong&gt;, &lt;em&gt;italics&lt;/em&gt;, and even &lt;em&gt;italics and later &lt;strong&gt;bold&lt;/strong&gt;&lt;/em&gt;. Even &lt;del&gt;strikethrough&lt;/del&gt;. &lt;a href=&quot;https://markdowntohtml.com&quot;&gt;A link&lt;/a&gt; to somewhere.&lt;/p&gt;&lt;p&gt;And code highlighting:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-string&quot;&gt;'bar'&lt;/span&gt;;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt; &lt;/span&gt;{   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo + &lt;span class=&quot;hljs-string&quot;&gt;':'&lt;/span&gt; + s;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or inline code like &lt;code&gt;var foo = &amp;#39;bar&amp;#39;;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Or an image of bears&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://placebear.com/200/200&quot; alt=&quot;bears&quot;&gt;&lt;/p&gt;&lt;p&gt;The end ...&lt;/p&gt;&quot;&quot;&quot;print(unmarkd.unmark(html_doc))```and the output:````markdown    # Sample Markdown    This is some basic, sample markdown.    ## Second Heading    - Unordered lists, and:     1. One     2. Two     3. Three    - More    &gt;Blockquote    And **bold**, *italics*, and even *italics and later **bold***. Even ~~strikethrough~~. [A link](https://markdowntohtml.com) to somewhere.    And code highlighting:    ```js    var foo = 'bar';    function baz(s) {       return foo + ':' + s;    }    ```    Or inline code like `var foo = 'bar';`.    Or an image of bears    ![bears](http://placebear.com/200/200)    The end ...````### Extending#### Brief OverviewMost functionality should be covered by the `BasicUnmarker` class defined in `unmarkd.unmarkers`.If you need to reverse markdown from StackExchange (as in the case for my other project), you may use the `StackOverflowUnmarker` (or it's alias, `StackExchangeUnmarker`), which is also defined in `unmarkd.unmarkers`.#### CustomizingIf the above two classes do not suit your needs, you can subclass the `unmarkd.unmarkers.BaseUnmarker` abstract class.Currently, you can _optionally_ override the following methods:- `detect_language` (parameters: **1**)  - **Parameters**:    - html: `bs4.BeautifulSoup`  - When a fenced code block is approached, this function is called with a parameter of type `bs4.BeautifulSoup` passed to it; this is the element the code block was detected from (i.e. `pre`).  - This function is responsible for detecting the programming language (or returning `''` if none was detected) of the code block.  - Note: This method is different from `unmarkd.unmarkers.BasicUnmarker`. It is simpler and does less checking/filteringBut Unmarkd is more flexible than that.##### Customizable constantsThere are currently 3 constants you may override:- Formats:  NOTE: Use the [**Format String Syntax**](https://docs.python.org/3/library/string.html#formatstrings)  - `UNORDERED_FORMAT`    - The string format of unordered (bulleted) lists.  - `ORDERED_FORMAT`    - The string format of ordered (numbered) lists.- Miscellaneous:  - `ESCAPABLES`    - A container (preferably a `set`) of length-1 `str` that should be escaped##### Customize converting HTML tagsFor an HTML tag `some_tag`, you can customize how it's converted to markdown by overriding a method like so:```pythonfrom unmarkd.unmarkers import BaseUnmarkerclass MyCustomUnmarker(BaseUnmarker):    def tag_some_tag(self, element) -&gt; str:        ...  # parse code here```To reduce code duplication, if your tag also has aliases (e.g. `strong` is an alias for `b` in HTML) then you may modify the `TAG_ALIASES`.If you really need to, you may also modify `DEFAULT_TAG_ALIASES`. Be warned: if you do so, **you will also need to implement the aliases** (currently `em` and `strong`).###### Common PatternsI find myself iterating through the children of the tag a lot. But that would lead to us needing to handle new tags, which could be anything. So here's the template/pattern I recommend:```pythonfrom unmarkd.unmarkers import BaseUnmarkerclass MyCustomUnmarker(BaseUnmarker):    def tag_some_tag(self, element) -&gt; str:        for child in element.children:            if non_tag_output := self.parse_non_tags(child):                output += non_tag_output                continue            assert isinstance(element, bs4.Tag), type(element)            ...   # Do whatever you want with the child```##### Utility functions when overridingYou may use (when extending) the following functions:- `__parse`, 2 parameters:  - `html`: _bs4.BeautifulSoup_    - The html to unmark. This is used internally by the `unmark` method and is slightly faster.  - `escape`: _bool_    - Whether to escape the characters inside the string or not. Defaults to `False`.- `escape`: 1 parameter:  - `string`: _str_    - The string to escape and make markdown-safe- `wrap`: 2 parameters:  - `element`: _bs4.BeautifulSoup_    - The element to wrap.  - `around_with`: _str_    - The character to wrap the element around with. **WILL NOT BE ESCPAED**- And, of course, `tag_*` and `detect_language`.</longdescription>
</pkgmetadata>