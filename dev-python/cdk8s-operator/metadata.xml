<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cdk8s-operator&gt; Create Kubernetes CRD Operators using CDK8s ConstructsThis is a multi-language (jsii) library and a command-line tool that allows youto create Kubernetes operators for CRDs (Custom Resource Definitions) usingCDK8s.## Getting StartedLet's create our first CRD served by a CDK8s construct using TypeScript.### Install CDK8sMake sure your system has the required CDK8s [prerequisites](https://cdk8s.io/docs/latest/getting-started/#prerequisites).Install the CDK8s CLI globally through npm:```shell$ npm i -g cdk8s-cliInstalling...# Verify installation$ cdk8s --version1.0.0-beta.3```### Create a new CDK8s appNow, let's create a new CDK8s typescript app:```shellmkdir hello-operator &amp;&amp; cd hello-operatorgit initcdk8s init typescript-app```### Install cdk8s-operatorNext, let's install this module as a dependency of our TypeScript project:```shellnpm install cdk8s-operator```### ConstructWe will start by creating the construct that implements the abstraction. This isis just a normal CDK8s custom construct:Let's create a construct called `PodCollection` which represents a collection ofpods:`pod-collection.ts`:```pythonimport { Pod } from 'cdk8s-plus-17';import { Construct } from 'constructs';export interface PodCollectionProps {  /** Number of pods */  readonly count: number;  /** The docker image to deploy */  readonly image: string;}export class PodCollection extends Construct {  constructor(scope: Construct, id: string, props: PodCollectionProps) {    super(scope, id);    for (let i = 0; i &lt; props.count; ++i) {      new Pod(this, `pod-${i}`, {        containers: [ { image: props.image } ]      });    }  }}```### Operator AppNow, we will need to replace out `main.ts` file with an &quot;operator app&quot;, which isa special kind of CDK8s app designed to be executed by the `cdk8s-server` CLIwhich is included in this module.The `Operator` app construct can be used to create &quot;CDK8s Operators&quot; which areCDK8s apps that accept input from a file (or STDIN) with a Kubernetes manifest,instantiates a construct with the `spec` as its input and emits the resultingmanifest to STDOUT.Replace the contents of `main.ts` with the following. We initialize an`Operator` app and then register a provider which handles resources of APIversion `samples.cdk8s.org/v1alpha1` and kind `PodCollection`.`main.ts`:```pythonimport { Operator } from 'cdk8s-operator';import { PodCollection } from './pod-collection';const app = new Operator();app.addProvider({  apiVersion: 'samples.cdk8s.org/v1alpha1',  kind: 'PodCollection',  handler: {    apply: (scope, id, props) =&gt; new PodCollection(scope, id, props)  }})app.synth();```&gt; A single operator can handle any number of resource kinds. Simply call&gt; `addProvider()` for each apiVersion/kind.## Using OperatorsTo use this operator, create an `input.json` file, e.g:`input.json`:```json{  &quot;apiVersion&quot;: &quot;samples.cdk8s.org/v1alpha1&quot;,  &quot;kind&quot;: &quot;PodCollection&quot;,  &quot;metadata&quot;: {    &quot;name&quot;: &quot;my-collection&quot;  },  &quot;spec&quot;: {    &quot;image&quot;: &quot;paulbouwer/hello-kubernetes&quot;,    &quot;count&quot;: 5  }}```Compile your code:```shell# delete `main.test.ts` since it has some code that won't compile$ rm -f main.test.*# compile$ npm run compile```And run:```shell$ node main.js input.json```&lt;details&gt;  &lt;summary&gt;STDOUT&lt;/summary&gt;```yamlapiVersion: &quot;v1&quot;kind: &quot;Pod&quot;metadata:  name: &quot;my-collection-pod-0-c8735c52&quot;spec:  containers:    - env: []      image: &quot;paulbouwer/hello-kubernetes&quot;      imagePullPolicy: &quot;Always&quot;      name: &quot;main&quot;      ports: []      volumeMounts: []  volumes: []---apiVersion: &quot;v1&quot;kind: &quot;Pod&quot;metadata:  name: &quot;my-collection-pod-1-c89f58d7&quot;spec:  containers:    - env: []      image: &quot;paulbouwer/hello-kubernetes&quot;      imagePullPolicy: &quot;Always&quot;      name: &quot;main&quot;      ports: []      volumeMounts: []  volumes: []---apiVersion: &quot;v1&quot;kind: &quot;Pod&quot;metadata:  name: &quot;my-collection-pod-2-c88d4268&quot;spec:  containers:    - env: []      image: &quot;paulbouwer/hello-kubernetes&quot;      imagePullPolicy: &quot;Always&quot;      name: &quot;main&quot;      ports: []      volumeMounts: []  volumes: []---apiVersion: &quot;v1&quot;kind: &quot;Pod&quot;metadata:  name: &quot;my-collection-pod-3-c86866b1&quot;spec:  containers:    - env: []      image: &quot;paulbouwer/hello-kubernetes&quot;      imagePullPolicy: &quot;Always&quot;      name: &quot;main&quot;      ports: []      volumeMounts: []  volumes: []---apiVersion: &quot;v1&quot;kind: &quot;Pod&quot;metadata:  name: &quot;my-collection-pod-4-c8b74b1d&quot;spec:  containers:    - env: []      image: &quot;paulbouwer/hello-kubernetes&quot;      imagePullPolicy: &quot;Always&quot;      name: &quot;main&quot;      ports: []      volumeMounts: []  volumes: []```&lt;/details&gt;## `cdk8s-server`This library is shipped with a program called `cdk8s-server` which can be usedto host your operator inside an HTTP server. This server can be used as asidecar container with a generic CRD operator (TBD).```shell$ PORT=8080 npx cdk8s-serverListening on 8080- App command: node main.js- Request body should include a single k8s resource in JSON format- Request will be piped through STDIN to &quot;node main.js&quot;- Response is the STDOUT and expected to be a multi-resource yaml manifest```Now, you can send `input.json` over HTTP:```shell$ curl -d @input.json http://localhost:8080MANIFEST...```## LicenseApache 2.0</longdescription>
</pkgmetadata>