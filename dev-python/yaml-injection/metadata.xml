<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># yaml-injection## usage### in python```pythonimport yamlfrom yaml_injection import InjectionLoaderwith open(file_path) as in_:    data = yaml.load(in_, InjectionLoader)```### in yamlThe key word is `!inject`.There are two types of syntax: `simple` and `extended`.#### simple syntax```yaml!inject file: path to file in local file system``` ```yaml!inject ref: section subsection ``` `ref` is a keys leading to section separated by space.\* Yep it will works only if keys does not contain spaces.```yaml!inject url: public url with yaml file ```#### extended syntax &gt; **WARNING**: A SPACE SYMBOL AFTER `!inject` AND BEFORE `:` IS MANDATORY!!```yaml!inject :     file: path to file in local file system    url: public url with yaml file     ref: section subsection ```Both simple and extended syntax accept lists in `file`, `url` and `ref` sections.## examplesExamples are gotten from tests. ### example 1`sub.yaml` ```yamlsub_only: sub_onlyboth_files: both_files_value_from_subnon_map_object:  - subnon_map_only_sub:  - sub_onlyboth_files_map:  sub_only: sub_only  both_files: both_files_value_from_subdeep:  deep:    deep:      map:        sub_only: sub_only        both_files: both_files_value_from_sub````main.yml````yaml!inject file: sub.ymlmain_only: main_onlyboth_files: both_files_value_from_mainboth_files_map:  both_files: both_files_value_from_main  main_only: main_only_value_from_maindeep:  deep:    deep:      map:        main_only: main_only        both_files: both_files_value_from_mainnon_map_object:  - mainnon_map_only_main:  - main_only```will be loaded as:```yamlboth_files: both_files_value_from_mainboth_files_map:  both_files: both_files_value_from_main  main_only: main_only_value_from_main  sub_only: sub_onlymain_only: main_onlysub_only: sub_onlydeep:  deep:    deep:      map:        main_only: main_only        both_files: both_files_value_from_main        sub_only: sub_onlynon_map_object:  - mainnon_map_only_main:  - main_onlynon_map_only_sub:  - sub_only```### example 2```yamlsections:  sub:    common:      variables:        job_name: sub_name        script: sub    job_1:      only:        - refs      script:        - make build        - make start    job_2:      except:        - tags      script:        - make build        - make startmain:  !inject :    ref: sections sub  common:    variables:      script: main      runner: main_runner  job_1:    only:      - release  job_2:    before_script:      - make prepare```will be loaded as:```yamlmain:  common:    variables:      job_name: sub_name      runner: main_runner      script: main  job_1:    only:    - release    script:    - make build    - make start  job_2:    before_script:    - make prepare    except:    - tags    script:    - make build    - make startsections:  sub:    common:      variables:        job_name: sub_name        script: sub    job_1:      only:      - refs      script:      - make build      - make start    job_2:      except:      - tags      script:      - make build      - make start```</longdescription>
</pkgmetadata>