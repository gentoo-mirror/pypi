<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://rudderstack.com/&quot;&gt;    &lt;img src=&quot;https://user-images.githubusercontent.com/59817155/121357083-1c571300-c94f-11eb-8cc7-ce6df13855c9.png&quot;&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;The Customer Data Platform for Developers&lt;/b&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;b&gt;    &lt;a href=&quot;https://rudderstack.com&quot;&gt;Website&lt;/a&gt;    ·    &lt;a href=&quot;https://rudderstack.com/docs/warehouse-actions/airflow-provider/&quot;&gt;Documentation&lt;/a&gt;    ·    &lt;a href=&quot;https://rudderstack.com/join-rudderstack-slack-community&quot;&gt;Slack Community&lt;/a&gt;  &lt;/b&gt;&lt;/p&gt;---# RudderStack Airflow ProviderThe [RudderStack](https://rudderstack.com) Airflow Provider lets you schedule and trigger your [Warehouse Actions](https://rudderstack.com/docs/warehouse-actions/) syncs from outside RudderStack and integrate them with your existing Airflow workflows.## Installation```bashpip install rudderstack-airflow-provider```## UsageA simple DAG for triggering syncs for a RudderStack source:```pythonwith DAG(    'rudderstack-sample',    default_args=default_args,    description='A simple tutorial DAG',    schedule_interval=timedelta(days=1),    start_date=datetime(2021, 1, 1),    catchup=False,    tags=['rs']) as dag:    rs_operator = RudderstackOperator(        source_id='&lt;source-id&gt;',        task_id='&lt;any-task-id&gt;',        connection_id='rudderstack_conn'    )```For the complete code, refer to this [example](https://github.com/rudderlabs/rudder-airflow-provider/blob/main/examples/sample_dag.py).### Operator Parameters| Parameter | Description | Type | Default || :--- |:--- | :--- | :--- || `source_id` | Valid RudderStack source ID | String | `None` || `task_id` | A unique task ID within a DAG | String | `None` || `wait_for_completion` | If `True`, the task will wait for sync to complete. | Boolean | `False` || `connection_id` | The Airflow connection to use for connecting to the Rudderstack API. | String | `rudderstack_default` |The RudderStack operator also supports all the parameters supported by the [Airflow base operator](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/baseoperator/index.html).For details on how to run the DAG in Airflow, refer to the [documentation](https://rudderstack.com/docs/warehouse-actions/airflow-provider/#running-the-dag).## ContributeWe would love to see you contribute to this project. Get more information on how to contribute [here](CONTRIBUTING.md).## LicenseThe RudderStack Airflow Provider is released under the [MIT License](LICENSE).## Contact UsFor more information or queries on this feature, you can [contact us](mailto:%20docs@rudderstack.com) or start a conversation in our [Slack](https://rudderstack.com/join-rudderstack-slack-community) community.</longdescription>
</pkgmetadata>