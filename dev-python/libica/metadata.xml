<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># libica[//]: # (FIXME commented out PR Build status as it don't get run for some reason...)[//]: # ([![Pull Request Build Status]&amp;#40;https://github.com/umccr-illumina/libica/workflows/Pull%20Request%20Build/badge.svg&amp;#41;]&amp;#40;https://github.com/umccr-illumina/libica/actions&amp;#41; )[![PyPI - Downloads](https://img.shields.io/pypi/dm/libica?style=flat)](https://pypistats.org/packages/libica) [![PyPI](https://img.shields.io/pypi/v/libica?style=flat)](https://pypi.org/project/libica) [![PyPI - License](https://img.shields.io/pypi/l/libica?style=flat)](https://opensource.org/licenses/MIT)Python SDK to programmatically call Illumina Connected Analytics (ICA) Genomic (multi-omics) data platform and BioInformatics web services. This SDK supports both ICA v1 and v2 APIs:- ICAv1 API: https://illumina.gitbook.io/ica-v1/reference/r-api- ICAv2 API: https://help.ica.illumina.com/reference/r-api- Install through ``pip`` like so:```commandlinepip install libica```## Overview- Tested for Python 3.7, 3.8, 3.9, 3.10, 3.11- See [ChangeLog](https://github.com/umccr-illumina/libica/blob/main/CHANGELOG.md) and [Milestones](https://github.com/umccr-illumina/libica/milestones?state=closed)- [Test Coverage](https://umccr-illumina.github.io/libica/coverage/)- [Wiki](https://github.com/umccr-illumina/libica/wiki)- SDK Guide: [PyDoc](https://umccr-illumina.github.io/libica/libica/)- User Guide: https://umccr-illumina.github.io/libica/## Getting started with SDK for ICA v2See [pilot.py](https://github.com/umccr-illumina/libica/blob/main/examples/pilot.py)```python# List all data in a projectimport osfrom contextlib import closingfrom libica.openapi.v2 import Configuration, ApiClient, ApiExceptionfrom libica.openapi.v2.api.project_data_api import ProjectDataApifrom libica.openapi.v2.model.project_data import ProjectDatafrom libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedListif __name__ == '__main__':    project_id = os.environ['ICAV2_PROJECT_ID']    file_path = [&quot;&quot;]  # empty will list everything under project    icav2_access_token = os.environ['ICAV2_ACCESS_TOKEN']    ica_url = &quot;https://ica.illumina.com/ica/rest&quot;    configuration = Configuration(        host=ica_url,        access_token=icav2_access_token,    )    # configuration.debug = True  # uncomment to debug API call logging    api_client = ApiClient(        configuration=configuration,        header_name=&quot;Content-Type&quot;,        header_value=&quot;application/vnd.illumina.v3+json&quot;,    )    with closing(api_client) as ctx_api_client:        project_data_api: ProjectDataApi = ProjectDataApi(api_client=ctx_api_client)        try:            page_token = &quot;&quot;            while True:                project_data_paged_list: ProjectDataPagedList = project_data_api.get_project_data_list(                    project_id=project_id,                    file_path=file_path,                    page_size=str(1000),                    page_token=page_token,                )                for item in project_data_paged_list.items:                    project_data: ProjectData = item                    print((                        project_data.data.id,  # fil.&lt;ID&gt; (or) fol.&lt;ID&gt;                        project_data.data.details.path,                        project_data.data.details.data_type,                    ))                page_token = project_data_paged_list.next_page_token                if not project_data_paged_list.next_page_token:                    break        except ApiException as e:            print(e)```You may consider **Using App Package** (see below).## Getting started with SDK for ICA v1- Export ICA base URL and JWT Bearer token:```export ICA_BASE_URL=&lt;baseUrl&gt;export ICA_ACCESS_TOKEN=&lt;tok&gt;```- Generate Bearer JWT token using [ICA CLI](https://sapac.support.illumina.com/sequencing/sequencing_software/illumina-connected-analytics.html) like so:```commandlineica tokens create --help```- Somewhere in your Python code:```pythonimport osfrom libica.openapi import libwesfrom libica.openapi.libwes import WorkflowList, WorkflowCompactica_base_url = os.getenv(&quot;ICA_BASE_URL&quot;)ica_access_token = os.getenv(&quot;ICA_ACCESS_TOKEN&quot;)configuration = libwes.Configuration(    host=ica_base_url,    api_key={        'Authorization': ica_access_token    },    api_key_prefix={        'Authorization': &quot;Bearer&quot;    },)with libwes.ApiClient(configuration) as api_client:    wfl_api: libwes.WorkflowsApi = libwes.WorkflowsApi(api_client)    try:        page_token = None        while True:            wfl_list: WorkflowList = wfl_api.list_workflows(page_size=100, page_token=page_token)            # print(wfl_list)            for item in wfl_list.items:                wfl: WorkflowCompact = item                print(wfl.id)                print(wfl.name)            page_token = wfl_list.next_page_token            if not wfl_list.next_page_token:                break    except libwes.ApiException as e:        print(e)```## Using [App Package](https://umccr-illumina.github.io/libica/libica/app/index.html)&gt; NOTE: `libica.app` package contains reusable modules that are based on use cases around UMCCR [Data Portal backend](https://github.com/umccr/data-portal-apis), [Workflows automation and orchestration](https://github.com/umccr/data-portal-apis/tree/dev/docs/pipeline) implementations. Hence, it may be a specific domain logic implementation. However, it may still be reusable for your use cases. Starter examples are as follows.### App for ICA v2See [pilotapp.py](https://github.com/umccr-illumina/libica/blob/main/examples/pilotapp.py)Example: `ProjectDataOps` app to list project files, download a file, etc...```pythonfrom contextlib import closingfrom libica.app import AppHelperfrom libica.app.dataops import ProjectDataOpsfrom libica.openapi.v2 import ApiClientfrom libica.openapi.v2.model.project_data import ProjectData# --- Use AppHelper to build SDK API clientapp_helper = AppHelper(debug=False)project_id = app_helper.get_icav2_cli_session_project_id()cli_session_api_client: ApiClient = app_helper \    .build_icav2_configuration_with_cli_session() \    .get_icav2_api_client()# --- Construct ProjectDataOps from dataops moduleproject_dataops = ProjectDataOps(project_id=project_id, api_client=cli_session_api_client)# --- List all files under given project's folder# If you do not cd into the folder, it will list all files under the projectproject_dataops.cd(&quot;/test_folder/&quot;)for item in project_dataops.list_files():    project_data: ProjectData = item    print((        project_data.data.id,  # fil.&lt;ID&gt; (or) fol.&lt;ID&gt;        project_data.data.details.path,        project_data.data.details.data_type,        project_data.data.details.name,        project_data.data.details.status,        project_data.data.details.file_size_in_bytes,        project_data.data.details.time_created,    ))# --- Download csv file from given project and file pathfile_path = &quot;/test_folder/SampleSheet.csv&quot;print(f&quot;Downloading {file_path} from project_id {project_id}&quot;)project_dataops.cd(file_path=file_path)ntf = project_dataops.download_file()with closing(ntf) as cf:    with open(cf.name, 'r') as f:        for line in f.readlines():            print(line)```For more, see PyDoc: - https://umccr-illumina.github.io/libica/libica/app/dataops.html### App for ICA v1Example: Configuration Object Builder```pythonfrom libica.app import configurationfrom libica.openapi import libgdsgds_config = configuration(  lib=libgds,  # pass in library of interest e.g. libwes, libtes, etc   secret_name=[&quot;FROM_AWS_SECRET_MANAGER_THAT_STORE_ICA_ACCESS_TOKEN&quot;],  base_url=&quot;https://use1.platform.illumina.com&quot;,  # overwrite if not https://aps2.platform.illumina.com  debug=False,  # True if you like to debug API calls, False by default anyway, just for demo)with libgds.ApiClient(gds_config) as api_client:    ...```Example: Listing Files from GDS```pythonfrom typing import Listfrom libica.app import gdsfrom libica.openapi import libgdsvol, path = gds.parse_path(&quot;gds://development/some/folder/path/&quot;)files: List[libgds.FileResponse] = gds.get_file_list(volume_name=vol, path=path)for file in files:  print(f&quot;{file.name}, {file.volume_name}, {file.path}, {file.presigned_url}&quot;)```## Development- Setup virtual environment and activate it- Install dev dependencies```commandlinemake install```- To bring up _mock_ API _Î¼_-services```commandlinemake up```- To run tests suites```commandlinemake unitmake autounit```- To run full suite, smoke test```commandlinemake test```### AutoGen Workflow- SDK is autogenerated from OpenAPI (Swagger) definitions- There are few tools required for this autogen workflow to work.    1. [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) -- used to generate code and doc    2. [swagger-cli](https://github.com/APIDevTools/swagger-cli) -- validate definitions- These tools are Node.js app, hence, required build tools `node`, `npm`, `npx` and `yarn` as follows.```commandlinenode -v v16.15.0npm -i -g yarnyarn installnpx openapi-generator-cli helpnpx swagger-cli --help```- API mock server `prism` is set up through docker compose as follows.```make upmake psmake test_ica_mockmake test_icav2_mockdocker compose logs```- All the autogen config and arrangement refer to [`syncapi.sh`](https://github.com/umccr-illumina/libica/blob/main/syncapi.sh) and [`syncapi2.sh`](https://github.com/umccr-illumina/libica/blob/main/syncapi2.sh) which is called through [`Makefile`](https://github.com/umccr-illumina/libica/blob/main/Makefile) targets.#### Generator Version- See generator [version compatibility](https://github.com/OpenAPITools/openapi-generator#11---compatibility)- Select generator version as follows:```npx openapi-generator-cli version-manager list```## Notice- MIT License and DISCLAIMER- [The Advanced Genomics Collaboration (TAGC)](https://www.tagcaustralia.com)</longdescription>
</pkgmetadata>