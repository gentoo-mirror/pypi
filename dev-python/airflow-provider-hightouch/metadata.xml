<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Apache Airflow Provider for HightouchProvides an Airflow Operator and Hook for [Hightouch](https://hightouch.io).This allows the user to initiate a run for a sync from Airflow.## InstallationPre-requisites: An environment running `apache-airflow` &gt;= 1.10, including &gt;= 2.```pip install airflow-provider-hightouch```## ConfigurationIn the Airflow Connections UI, create a new connection for Hightouch.- `Conn ID`: `hightouch_default`- `Conn Type`: `HTTP`- `Host`: `https://api.hightouch.com`- `Password`: enter the API key for your workspace. You can generate an API  key from your [Workspace Settings](https://app.hightouch.io/settings)The Operator uses the `hightouch_default` connection id by default, butif needed, you can create additional Airflow Connections and reference themin the operator## Modules### [HightouchTriggerSyncOperator](./airflow_provider_hightouch/operators/hightouch.py)Starts a Hightouch Sync Run. Requires the `sync_id` or the `sync_slug` for the sync you wish torun.Returns the `sync_run_id` of the sync it triggers.The run is synchronous by default, and the task will be marked complete once thesync is successfully completed.However, you can request a asynchronous request instead by passing `synchronous=False`to the operator.If the API key is not authorized or if the request is invalid the task will fail.If a run is already in progress, a new run will be triggered following thecompletion of the existing run.### [HightouchSyncRunSensor](./airflow_provider_hightouch/operators/hightouch.py)Monitors a Hightouch Sync Run. Requires the `sync_id` and the `sync_run_id` of the sync you wish to monitor.To obtain the `sync_run_id` of a sync triggered in Airflow, we recommend using XComs to pass the return valueof `HightouchTriggerSyncOperator`.## ExamplesCreating a run is as simple as importing the operator and providing it witha sync_id. An [example dag](./airflow_provider_hightouch/example_dags/example_hightouch_trigger_sync.py)is available as well.```from airflow_provider_hightouch.operators.hightouch import HightouchTriggerSyncOperatorwith DAG(....) as dag:...    my_task = HightouchTriggerSyncOperator(task_id=&quot;run_my_sync&quot;, sync_id=&quot;123&quot;)    my_other_task = HightouchTriggerSyncOperator(task_id=&quot;run_my_sync&quot;, sync_slug=&quot;my-sync-slug&quot;)```## IssuesPlease submit [issues](https://github.com/hightouchio/airflow-provider-hightouch/issues) and[pull requests](https://github.com/hightouchio/airflow-provider-hightouch/pulls) in our official repo:[https://github.com/hightouchio/airflow-provider-hightouch](https://github.com/hightouchio/airflow-provider-hightouch)We are happy to hear from you, for any feedback please email the authors at [pedram@hightouch.io](mailto:pedram@hightouch.io).## AcknowledgementsSpecial thanks to [Fivetran](https://github.com/fivetran/airflow-provider-fivetran)for their provider and [Marcos Marx](https://github.com/marcosmarxm/)'s Airbytecontribution in the core Airflow repo for doing this before we had toso we could generously learn from their hard work.</longdescription>
</pkgmetadata>