<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PocketSphinx 5.0.1==================This is PocketSphinx, one of Carnegie Mellon University's open source largevocabulary, speaker-independent continuous speech recognition engines.Although this was at one point a research system, active developmenthas largely ceased and it has become very, very far from the state ofthe art.  I am making a release, because people are nonetheless usingit, and there are a number of historical errors in the build systemand API which needed to be corrected.The version number is strangely large because there was a &quot;release&quot;that people are using called 5prealpha, and we will use proper[semantic versioning](https://semver.org/) from now on.**Please see the LICENSE file for terms of use.**Installation------------You should be able to install this with pip for recent platforms andversions of Python:    pip3 install pocketsphinxAlternately, you can also compile it from the source tree.  I highlysuggest doing this in a virtual environment (replace`~/ve_pocketsphinx` with the virtual environment you wish to create),from the top level directory:    python3 -m venv ~/ve_pocketsphinx    . ~/ve_pocketsphinx/bin/activate    pip3 install .On GNU/Linux and maybe other platforms, you must have[PortAudio](http://www.portaudio.com/) installed for the `LiveSpeech`class to work (we may add a fall-back to `sox` in the near future).On Debian-like systems this can be achieved by installing the`libportaudio2` package:    sudo apt-get install libportaudio2Usage-----See the [examples directory](../examples/) for a number of examples ofusing the library from Python.  You can also read the [documentationfor the Python API](https://pocketsphinx.readthedocs.io) or [the CAPI](https://cmusphinx.github.io/doc/pocketsphinx/).It also mostly supports the same APIs as the previous[pocketsphinx-python](https://github.com/bambocher/pocketsphinx-python)module, as described below.### LiveSpeechAn iterator class for continuous recognition or keyword search from amicrophone.  For example, to do speech-to-text with the default (somekind of US English) model:```pythonfrom pocketsphinx import LiveSpeechfor phrase in LiveSpeech(): print(phrase)```Or to do keyword search:```pythonfrom pocketsphinx import LiveSpeechspeech = LiveSpeech(keyphrase='forward', kws_threshold=1e-20)for phrase in speech:    print(phrase.segments(detailed=True))```With your model and dictionary:```pythonimport osfrom pocketsphinx import LiveSpeech, get_model_pathspeech = LiveSpeech(    sampling_rate=16000,  # optional    hmm=get_model_path('en-us'),    lm=get_model_path('en-us.lm.bin'),    dic=get_model_path('cmudict-en-us.dict'))for phrase in speech:    print(phrase)```### AudioFileThis is an iterator class for continuous recognition or keyword searchfrom a file.  Currently it supports only raw, single-channel, 16-bitPCM data in native byte order.```pythonfrom pocketsphinx import AudioFilefor phrase in AudioFile(&quot;goforward.raw&quot;): print(phrase) # =&gt; &quot;go forward ten meters&quot;```An example of a keyword search:```pythonfrom pocketsphinx import AudioFileaudio = AudioFile(&quot;goforward.raw&quot;, keyphrase='forward', kws_threshold=1e-20)for phrase in audio:    print(phrase.segments(detailed=True)) # =&gt; &quot;[('forward', -617, 63, 121)]&quot;```With your model and dictionary:```pythonimport osfrom pocketsphinx import AudioFile, get_model_pathmodel_path = get_model_path()config = {    'verbose': False,    'audio_file': 'goforward.raw',    'hmm': get_model_path('en-us'),    'lm': get_model_path('en-us.lm.bin'),    'dict': get_model_path('cmudict-en-us.dict')}audio = AudioFile(**config)for phrase in audio:    print(phrase)```Convert frame into time coordinates:```pythonfrom pocketsphinx import AudioFile# Frames per Secondfps = 100for phrase in AudioFile(frate=fps):  # frate (default=100)    print('-' * 28)    print('| %5s |  %3s  |   %4s   |' % ('start', 'end', 'word'))    print('-' * 28)    for s in phrase.seg():        print('| %4ss | %4ss | %8s |' % (s.start_frame / fps, s.end_frame / fps, s.word))    print('-' * 28)# ----------------------------# | start |  end  |   word   |# ----------------------------# |  0.0s | 0.24s | &lt;s&gt;      |# | 0.25s | 0.45s | &lt;sil&gt;    |# | 0.46s | 0.63s | go       |# | 0.64s | 1.16s | forward  |# | 1.17s | 1.52s | ten      |# | 1.53s | 2.11s | meters   |# | 2.12s |  2.6s | &lt;/s&gt;     |# ----------------------------```Authors-------PocketSphinx is ultimately based on `Sphinx-II` which in turn wasbased on some older systems at Carnegie Mellon University, which werereleased as free software under a BSD-like license thanks to theefforts of Kevin Lenzo.  Much of the decoder in particular was writtenby Ravishankar Mosur (look for &quot;rkm&quot; in the comments), but variousother people contributed as well, see [the AUTHORS file](./AUTHORS)for more details.David Huggins-Daines (the author of this document) isguilty^H^H^H^H^Hresponsible for creating `PocketSphinx` which addedvarious speed and memory optimizations, fixed-point computation, JSGFsupport, portability to various platforms, and a somewhat coherentAPI.  He then disappeared for a while.Nickolay Shmyrev took over maintenance for quite a long timeafterwards, and a lot of code was contributed by Alexander Solovets,Vyacheslav Klimkov, and others.  The[pocketsphinx-python](https://github.com/bambocher/pocketsphinx-python)module was originally written by Dmitry Prazdnichnov.Currently this is maintained by David Huggins-Daines again.</longdescription>
</pkgmetadata>