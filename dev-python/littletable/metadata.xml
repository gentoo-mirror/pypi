<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># littletable - a Python module to give ORM-like access to a collection of objects[![Build Status](https://travis-ci.org/ptmcg/littletable.svg?branch=master)](https://travis-ci.org/ptmcg/littletable) [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/ptmcg/littletable/master)- [Introduction](#introduction)- [Importing data from CSV files](#importing-data-from-csv-files)- [Tabular output](#tabular-output)- [For More Info](#for-more-info)- [Sample Demo](#sample-demo)Introduction------------The `littletable` module provides a low-overhead, schema-less, in-memory database access to a collection of user objects. `littletable` Tables will accept Python `dict`s or any user-defined object type, including:- `namedtuples` and `typing.NamedTuples`- `dataclasses`- `types.SimpleNamespaces`- `attrs` classes- `PyDantic` data models- `traitlets``littletable` infers the Table's &quot;columns&quot; from those objects' `__dict__`, `__slots__`, or `_fields` mappings to accessobject attributes. If populated with Python `dict`s, they get stored as `SimpleNamespace`s or `littletable.DictObject`s.In addition to basic ORM-style insert/remove/query/delete access to the contents of a `Table`, `littletable` offers:* simple indexing for improved retrieval performance, and optional enforcing key uniqueness * access to objects using indexed attributes* direct import/export to CSV and Excel .xlsx files* clean tabular output for data presentation* simplified joins using `&quot;+&quot;` operator syntax between annotated `Table`s * the result of any query or join is a new first-class `littletable` `Table` * simple full-text search against multi-word text attributes* access like a standard Python list to the records in a Table, including indexing/slicing, `iter`, `zip`, `len`, `groupby`, etc.* access like a standard Python `dict` to attributes with a unique index, or like a standard Python `defaultdict(list)` to attributes with a non-unique index`littletable` `Table`s do not require an upfront schema definition, but simply work off of the attributes in the stored values, and those referenced in any query parameters.Importing data from CSV files-----------------------------You can easily import a CSV file into a Table using Table.csv_import():```pythont = Table().csv_import(&quot;my_data.csv&quot;)```In place of a local file name, you can also specify  an HTTP url:```pythonurl = &quot;https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv&quot;names = [&quot;sepal-length&quot;, &quot;sepal-width&quot;, &quot;petal-length&quot;, &quot;petal-width&quot;, &quot;class&quot;]iris_table = Table('iris').csv_import(url, fieldnames=names)```You can also directly import CSV data as a string:```pythoncatalog = Table(&quot;catalog&quot;)catalog_data = &quot;&quot;&quot;\sku,description,unitofmeas,unitpriceBRDSD-001,Bird seed,LB,3BBS-001,Steel BB's,LB,5MGNT-001,Magnet,EA,8&quot;&quot;&quot;catalog.csv_import(catalog_data, transforms={'unitprice': int})```Data can also be directly imported from compressed .zip, .gz, and .xz files.Files containing JSON-formatted records can be similarly imported using `Table.json_import()`.Tabular output--------------To produce a nice tabular output for a table, you can use the embedded support forthe [rich](https://github.com/willmcgugan/rich) module, `as_html()` in [Jupyter Notebook](https://jupyter.org/),or the [tabulate](https://github.com/astanin/python-tabulate) module:Using `table.present()` (implemented using `rich`; `present()` accepts `rich` `Table` keyword args):```pythontable(title_str).present(fields=[&quot;col1&quot;, &quot;col2&quot;, &quot;col3&quot;])    ortable.select(&quot;col1 col2 col3&quot;)(title_str).present(caption=&quot;caption text&quot;,                                                   caption_justify=&quot;right&quot;)```Using `Jupyter Notebook`:```pythonfrom IPython.display import HTML, displaydisplay(HTML(table.as_html()))```Using `tabulate`:```pythonfrom tabulate import tabulateprint(tabulate((vars(rec) for rec in table), headers=&quot;keys&quot;))```For More Info-------------Extended &quot;getting started&quot; notes at [how_to_use_littletable.md](https://github.com/ptmcg/littletable/blob/master/how_to_use_littletable.md).Sample Demo-----------Here is a simple littletable data storage/retrieval example:```pythonfrom littletable import Tablecustomers = Table('customers')customers.create_index(&quot;id&quot;, unique=True)customers.csv_import(&quot;&quot;&quot;\id,name0010,George Jetson0020,Wile E. Coyote0030,Jonny Quest&quot;&quot;&quot;)catalog = Table('catalog')catalog.create_index(&quot;sku&quot;, unique=True)catalog.insert({&quot;sku&quot;: &quot;ANVIL-001&quot;, &quot;descr&quot;: &quot;1000lb anvil&quot;, &quot;unitofmeas&quot;: &quot;EA&quot;,&quot;unitprice&quot;: 100})catalog.insert({&quot;sku&quot;: &quot;BRDSD-001&quot;, &quot;descr&quot;: &quot;Bird seed&quot;, &quot;unitofmeas&quot;: &quot;LB&quot;,&quot;unitprice&quot;: 3})catalog.insert({&quot;sku&quot;: &quot;MAGNT-001&quot;, &quot;descr&quot;: &quot;Magnet&quot;, &quot;unitofmeas&quot;: &quot;EA&quot;,&quot;unitprice&quot;: 8})catalog.insert({&quot;sku&quot;: &quot;MAGLS-001&quot;, &quot;descr&quot;: &quot;Magnifying glass&quot;, &quot;unitofmeas&quot;: &quot;EA&quot;,&quot;unitprice&quot;: 12})wishitems = Table('wishitems')wishitems.create_index(&quot;custid&quot;)wishitems.create_index(&quot;sku&quot;)# easy to import CSV data from a string or filewishitems.csv_import(&quot;&quot;&quot;\custid,sku0020,ANVIL-0010020,BRDSD-0010020,MAGNT-0010030,MAGNT-0010030,MAGLS-001&quot;&quot;&quot;)# print a particular customer name# (unique indexes will return a single item; non-unique# indexes will return a list of all matching items)print(customers.by.id[&quot;0030&quot;].name)# see all customer namesfor name in customers.all.name:    print(name)# print all items sold by the poundfor item in catalog.where(unitofmeas=&quot;LB&quot;):    print(item.sku, item.descr)# print all items that cost more than 10for item in catalog.where(lambda o: o.unitprice &gt; 10):    print(item.sku, item.descr, item.unitprice)# join tables to create queryable wishlists collectionwishlists = customers.join_on(&quot;id&quot;) + wishitems.join_on(&quot;custid&quot;) + catalog.join_on(&quot;sku&quot;)# print all wishlist items with price &gt; 10 (can use Table.gt comparator instead of lambda)bigticketitems = wishlists().where(unitprice=Table.gt(10))for item in bigticketitems:    print(item)# list all wishlist items in descending order by pricefor item in wishlists().sort(&quot;unitprice desc&quot;):    print(item)# print output as a nicely-formatted tablewishlists().sort(&quot;unitprice desc&quot;)(&quot;Wishlists&quot;).present()# print output as an HTML tableprint(wishlists().sort(&quot;unitprice desc&quot;)(&quot;Wishlists&quot;).as_html())# print output as a Markdown tableprint(wishlists().sort(&quot;unitprice desc&quot;)(&quot;Wishlists&quot;).as_markdown())```</longdescription>
</pkgmetadata>