<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- SPDX-License-Identifier: MIT --&gt;# odxtools`odxtools` is a set of utilities for working with diagnosticdescriptions of automotive electronic control units using the datamodel and the associated technologies of the ODX standard.[ODX](https://de.wikipedia.org/wiki/ODX) stands for &quot;Open Diagnosticdata eXchange&quot; and is primarily an XML based file format to describethe diagnostic capabilities of the electronic control units (ECUs) ofcomplex distributed technical systems (usually cars and trucks). ODXis an [open standard maintained by ASAMe.V.](https://www.asam.net/standards/detail/mcd-2-d/) and is alsostandardized internationally by[ISO-22901](https://www.iso.org/standard/41207.html).Usually, ODX is used to complement the[UDS](https://en.wikipedia.org/wiki/Unified_Diagnostic_Services)automotive diagnostics standard -- which itself can be considered tobe an extension of[OBD-II](https://en.wikipedia.org/wiki/On-board_diagnostics#OBD-II) --to provide a machine-processable description of the vendor-specificdiagnostics functionality of a vehicle's ECUs. That said, thefunctionality which is described by ODX files neither needs to be asuper- nor a subset of OBD-II/UDS, e.g., ODX can be used to describediagnostic functionality that uses fundamentally different wireformats and conventions than the ones mandated by OBD-II/UDS. (Inpractice, the ODX-described functionality usually adheres to thesestandards, though.)The functionality provided by `odxtools` encompasses parsing andinternalizing ODX diagnostic database files as well as de- andencoding the data of diagnostic requests and their responsessend to/received from ECUs in an pythonic manner.## Table of Contents- [Use Cases](#use-cases)- [Installation](#installation)- [Usage Examples](#usage-examples)  - [Python snippets](#python-snippets)- [Interactive Usage](#interactive-usage)  - [Python REPL](#python-repl)- [Command line usage](#command-line-usage)  - [Generic parameters](#generic-parameters)  - [The `list` subcommand](#the-list-subcommand)  - [The `browse` subcommand](#the-browse-subcommand)  - [The `snoop` subcommand](#the-snoop-subcommand)  - [The `find` subcommand](#the-find-subcommand)- [Testing](#testing)- [Contributing](#contributing)- [Code of Conduct](#code-of-conduct)- [Provider Information](#provider-information)- [Acknowledgements](#acknowledgements)- [License](#license)## Use CasesHere are some of the intended use cases of `odxtools`:- Prototype development: Interacting with the diagnostic services of  electronic control units directly from python (requires taping into  the car's relevant CAN or ethernet bus)- End-of-production calibration/quality control: Initial set up and  running a self diagnosis of newly produced cars to ensure that  everything works as specified- After-sales: Implementing servicing functionality for workshops, i.e.,  defining test schedules based on the legally mandated functionality of  ISO 15031-6 (OBD II) as well as manufacturer-specific routines- Prototype development (II): Analyzing and debugging diagnostic sessions  done using third-party software- Prototype development (III): Implementing bridges to higher-level protocols  such as HTTP- Development for mass production: Accelerating the implementation of  diagnostic servicesfor low-cost ECUs by using `odxtools`-based code  generators for the diagnostic glue code on system-level languages like  C++ or rustPlease be aware that some of the use cases listed above are currentlyrather aspirational.## InstallationThe easiest way of installing `odxtools` on your system is via `pip`:```bashpip3 install odxtools```If you want to develop `odxtools` itself, you need to install it fromsource using `git`. The first step is to clone the repository:```bashcd $BASE_DIRgit clone https://github.com/mercedes-benz/odxtools```After this, make sure that all python dependencies are installed:```bashcd $BASE_DIR/odxtoolspip3 install -r requirements.txt```Next, build the project and install it on the system:```bashcd $BASE_DIR/odxtoolspython3 ./setup.py buildsudo python3 ./setup.py install # &lt;- optional```Finally, update the `PYTHONPATH` environment variable and the newlycloned module is ready to be used:```bashexport PYTHONPATH=&quot;$BASE_DIR/odxtools:$PYTHONPATH&quot;```Now, you can check whether the installation worked:```bashpython3 -m odxtools list -a &quot;$YOUR_PDX_FILE&quot;```## Usage Examples### Python snippets- Load an ODX database from file `somersault.pdx`:  ```python  import odxtools  db = odxtools.load_pdx_file(&quot;somersault.pdx&quot;)  ```- List the names of all available services of the `somersault_lazy` ECU:  ```python  # [...]  ecu = db.ecus.somersault_lazy  print(f&quot;Available services for {ecu.short_name}: {ecu.services}&quot;)  ```- Determine the CAN IDs which the `somersault_lazy` ECU uses to send  and receive diagnostic messages:  ```python  # [...]  print(f&quot;ECU {ecu.short_name} listens for requests on CAN ID 0x{ecu.get_receive_id():x}&quot;)  print(f&quot;ECU {ecu.short_name} transmits responses on CAN ID 0x{ecu.get_send_id():x}&quot;)  ```- Encode a `session_start` request to the `somersault_lazy` ECU:  ```python  # [...]  raw_request_data = ecu.services.session_start()  print(f&quot;Message for session start request of ECU {ecu.short_name}: {raw_request_data}&quot;)  # -&gt; bytearray(b'\x10\x00')  ```- Encode the positive response to the `start_session` request:  ```python  # [...]  raw_request_data = ecu.services.session_start()  raw_response_data = ecu.services.session_start.positive_responses[0].encode(coded_request=raw_request_data)  print(f&quot;Positive response to session_start() of ECU {ecu.short_name}: {raw_response_data}&quot;)  # -&gt; bytearray(b'P')  ```- Decode a request:  ```python  # [...]  raw_data = b&quot;\x10\x00&quot;  decoded_message = ecu.decode(raw_data)  print(f&quot;decoded message: {decoded_message}&quot;)  # -&gt; decoded message: [start_session()]  ```- Decode a response to a request:  ```python  # [...]  raw_request_data = b&quot;\x10\x00&quot;  raw_response_data = b'P'  decoded_response = ecu.decode_response(raw_response_data, raw_request_data)  print(f&quot;decoded response: {decoded_response}&quot;)  # -&gt; decoded response: [session()]  ```## Interactive Usage### Python REPLpython's interactive read-reval-print-loop (REPL) supportstab-completion on most plattforms, i.e., in this case, all data can beconveniently interactivly discovered and this makes `odxtools` a veryconvenient tool to explore the capabilities of a given ECU.A notable exception is the Microsoft Windows platform: Most pythondistribtions for Windows do not enable tab-completion by default intheir REPL.  For more convenience in such a scenario, we recommendusing[ptpython](https://github.com/prompt-toolkit/ptpython/). `ptpython`can be installed like any other python package, i.e., via `pip3install ptpython`. Then, the REPL ought to be started using```cmdc:\odxtest&gt;python3 &quot;C:\Python39\Lib\site-packages\ptpython\entry_points\run_ptpython.py&quot;```Alternatively, `pyreadline` can be used after installing it via `pip3install wheel pyreadline`.  With this, *basic* tab-completion forpython under Windows in [InteractiveMode](https://docs.python.org/3/tutorial/interpreter.html#interactive-mode)should work.## Command line usageBased the python module, `odxtools` also provides a set of commandline utilities for quick interactive explorations. Amongst others,these utilities allow the inspection ODX/PDX files, snooping ondiagnostic sessions, etc. If `odxtools` is installed on a system-widebasis, these commands can be invoked using `odxtools SUBCOMMAND[PARAMS]`, if the repository has been manually cloned via `git` and`odxtools` has not been installed on a system-wide basis, the way toinvoke these utilities is via `python3 -m odxtools SUBCOMMAND[PARAMS]`.### Generic parametersAvailable generic parameters and a list of subcommands can be obtainedusing `odxtools --help`:```bash$ odxtools --helpusage: odxtools [-h] [-c] {list,browse,snoop,find,encode-message,decode-message} ...Utilities to interact with automotive diagnostic descriptions based on the ODX standard.Examples:  For printing all services use:   odxtools list ./path/to/database.pdx --services  For browsing the data base and encoding messages use:   odxtools browse ./path/to/database.pdxpositional arguments:  {list,browse,snoop,find,encode-message,decode-message}                        Select a sub command    list                Print a summary of automotive diagnostic files.    browse              Interactively browse the content of automotive diagnostic files.    snoop               Live decoding of a diagnostic session.    find                Find &amp; display services by hex-data, or name, can also decodes requests.    encode-message      Encode a message. Interactively asks for parameter values.                        This is a short cut through the browse command to directly encode a message.    decode-message      Decode a message. Interactively asks for parameter values.                        This is a short cut through the browse command to directly encode a message.optional arguments:  -h, --help            show this help message and exit  -c, --conformant      The input file fully confirms to the standard, i.e., disable work-arounds for bugs of the CANdela tool```All subcommands accept the `--help` parameter:```bash$ odxtools list --helpusage: odxtools list [-h] [-v VARIANT [VARIANT ...]] [-s [SERVICE [SERVICE ...]]] [-p] [-d] [-a] PDX_FILE[...]```It follows is an inexhaustive list of the subcommands that arecurrently available:### The `list` subcommandThe `list` subcommand is used to parse a `.pdx` database file andprint the relevant parts of its content to the terminal.```bash$ odxtools list -husage: odxtools list [-h] [-v VARIANT [VARIANT ...]] [-s [SERVICE [SERVICE ...]]] [-p] [-d] [-a] PDX_FILEList the content of automotive diagnostic files (*.pdx)Examples:  For displaying only the names of the diagnostic layers use:    odxtools list ./path/to/database.pdx  For displaying all content use:    odxtools list ./path/to/database.pdx --all  For more information use:    odxtools list -hpositional arguments:  PDX_FILE              path to the .pdx fileoptional arguments:  -h, --help            show this help message and exit  -v VARIANT [VARIANT ...], --variants VARIANT [VARIANT ...]                        Specifies which variants should be included.  -s [SERVICE [SERVICE ...]], --services [SERVICE [SERVICE ...]]                        Print a list of diagnostic services specified in the pdx.                        If no service names are specified, all services are printed.  -p, --params          Print a list of all parameters relevant for the selected items.  -d, --dops            Print a list of all data object properties relevant for the selected items  -a, --all             Print a list of all diagnostic services and DOPs specified in the pdx```The options `--variants` and `--services` can be used to specify whichservices should be printed.  If the `--params` option is specified,the message layout is printed for all specified variants/services andthe `--all` parameter prints all data of the file that is recognizedby `odxtools`. Example:```bash$ odxtools --conformant list $BASE_DIR/odxtools/examples/somersault.pdx --variants somersault_lazy --services do_forward_flips --paramsECU-VARIANT 'somersault_lazy' (Receive ID: 0x7b, Send ID: 0x1c8) num services: 5, num DOPs: 6, num communication parameters: 11.The services of the ECU-VARIANT 'somersault_lazy' are: do_forward_flips &lt;ID: somersault.service.do_forward_flips&gt;  Message format of a request:           7     6     5     4     3     2     1     0        +-----+-----+-----+-----+-----+-----+-----+-----+      0 | sid(8 bits)                                   |        +-----+-----+-----+-----+-----+-----+-----+-----+      1 | forward_soberness_check(8 bits)               |        +-----+-----+-----+-----+-----+-----+-----+-----+      2 | num_flips(8 bits)                             |        +-----+-----+-----+-----+-----+-----+-----+-----+   Parameter(short_name='sid', type='CODED-CONST', semantic=None, byte_position=0, bit_length=8, coded_value='0xba')   Parameter(short_name='forward_soberness_check', type='VALUE', semantic=None, byte_position=1, bit_length=8, dop_ref='somersault.DOP.soberness_check')    DataObjectProperty('soberness_check', category='LINEAR', internal_type='A_UINT32', physical_type='A_UINT32')   Parameter(short_name='num_flips', type='VALUE', semantic=None, byte_position=2, bit_length=8, dop_ref='somersault.DOP.num_flips')    DataObjectProperty('num_flips', category='LINEAR', internal_type='A_UINT32', physical_type='A_UINT32')  Number of positive responses: 1  Message format of a positive response:           7     6     5     4     3     2     1     0        +-----+-----+-----+-----+-----+-----+-----+-----+      0 | sid(8 bits)                                   |        +-----+-----+-----+-----+-----+-----+-----+-----+      1 | num_flips_done(8 bits)                        |        +-----+-----+-----+-----+-----+-----+-----+-----+   Parameter(short_name='sid', type='CODED-CONST', semantic=None, byte_position=0, bit_length=8, coded_value='0xfa')   Parameter(short_name='num_flips_done', type='MATCHING-REQUEST-PARAM', semantic=None, byte_position=1)    Request byte position = 2, byte length = 1  Number of negative responses: 1  Message format of a negative response:           7     6     5     4     3     2     1     0        +-----+-----+-----+-----+-----+-----+-----+-----+      0 | sid(8 bits)                                   |        +-----+-----+-----+-----+-----+-----+-----+-----+      1 | rq_sid(8 bits)                                |        +-----+-----+-----+-----+-----+-----+-----+-----+      2 | reason(8 bits)                                |        +-----+-----+-----+-----+-----+-----+-----+-----+      3 | flips_successfully_done(8 bits)               |        +-----+-----+-----+-----+-----+-----+-----+-----+   Parameter(short_name='sid', type='CODED-CONST', semantic=None, byte_position=0, bit_length=8, coded_value='0x7f')   Parameter(short_name='rq_sid', type='MATCHING-REQUEST-PARAM', semantic=None, byte_position=1)    Request byte position = 0, byte length = 1   Parameter(short_name='reason', type='VALUE', semantic=None, byte_position=2, bit_length=8, dop_ref='somersault.DOP.error_code')    DataObjectProperty('error_code', category='LINEAR', internal_type='A_UINT32', physical_type='A_UINT32')   Parameter(short_name='flips_successfully_done', type='VALUE', semantic=None, byte_position=3, bit_length=8, dop_ref='somersault.DOP.num_flips')    DataObjectProperty('num_flips', category='LINEAR', internal_type='A_UINT32', physical_type='A_UINT32')```### The `browse` subcommandThe `browse` subcommand uses[PyInquirer](https://github.com/CITGuru/PyInquirer/) to interactivelynavigate through the database of a `.pdx` file. For example, using the`browse` subcommand you can select the ECU and service withoutspamming the terminal:```bash$ odxtools --conformant browse $BASE_DIR/odxtools/examples/somersault.pdx? Select a Variant.  somersault_lazyECU-VARIANT 'somersault_lazy' (Receive ID: 0x7b, Send ID: 0x1c8)? The variant somersault_lazy offers the following services. Select one!  do_forward_flips? This service offers the following messages.  Request: do_forward_flips             7     6     5     4     3     2     1     0          +-----+-----+-----+-----+-----+-----+-----+-----+        0 | sid(8 bits)                                   |          +-----+-----+-----+-----+-----+-----+-----+-----+        1 | forward_soberness_check(8 bits)               |          +-----+-----+-----+-----+-----+-----+-----+-----+        2 | num_flips(8 bits)                             |          +-----+-----+-----+-----+-----+-----+-----+-----+     Parameter(short_name='sid', type='CODED-CONST', semantic=None, byte_position=0, bit_length=8, coded_value='0xba')     Parameter(short_name='forward_soberness_check', type='VALUE', semantic=None, byte_position=1, bit_length=8, dop_ref='somersault.DOP.soberness_check')      DataObjectProperty('soberness_check', category='LINEAR', internal_type='A_UINT32', physical_type='A_UINT32')     Parameter(short_name='num_flips', type='VALUE', semantic=None, byte_position=2, bit_length=8, dop_ref='somersault.DOP.num_flips')      DataObjectProperty('num_flips', category='LINEAR', internal_type='A_UINT32', physical_type='A_UINT32')[...]```### The `snoop` subcommandThe `snoop` subcommand can be used to decode a trace of a or acurrently running diagnostic session:```bash# create a socketcan `vcan0` interfacesudo ip link add dev vcan0 type vcansudo ip link set vcan0 up# start the snooping on vcan0odxtools --conformant snoop -c vcan0 --variant &quot;somersault_lazy&quot; $BASE_DIR/odxtools/examples/somersault.pdx# on a different terminal, run the diagnostic session$BASE_DIR/odxtools/examples/somersaultlazy.py -c vcan0```The snoop command will then output the following:```bash$ odxtools --conformant snoop -c vcan0 --variant &quot;somersault_lazy&quot; $BASE_DIR/odxtools/examples/somersault.pdxDecoding messages on channel vcan0Tester: do_forward_flips(forward_soberness_check=18, num_flips=1) -&gt; 7fba7f (bytearray(b'\x7f\xba\x7f'), 3 bytes)Tester: start_session() -&gt; session()Tester: do_forward_flips(forward_soberness_check=18, num_flips=1) -&gt; grudging_forward(num_flips_done=bytearray(b'\x01'))Tester: do_forward_flips(forward_soberness_check=35, num_flips=1) -&gt; flips_not_done(rq_sid=bytearray(b'\xba'), reason=0, flips_successfully_done=0)Tester: do_forward_flips(forward_soberness_check=18, num_flips=3) -&gt; grudging_forward(num_flips_done=bytearray(b'\x03'))Tester: do_forward_flips(forward_soberness_check=18, num_flips=50) -&gt; flips_not_done(rq_sid=bytearray(b'\xba'), reason=1, flips_successfully_done=6)```### The `find` subcommandThe `find` subcommand can be used to find a service and its associated information by either a hex request, or partial name via cli. In addition, it can also decode a hex request and display its parameters mapped to a service. ```bash$ odxtools find $BASE_DIR/odxtools/examples/somersault.pdx -D 10 00=====================================somersault_lazy, somersault_assiduous===================================== session_start &lt;ID: somersault.service.session_start&gt;  Message format of a request:           7     6     5     4     3     2     1     0          +-----+-----+-----+-----+-----+-----+-----+-----+      0 | sid (8 bits)                                  |        +-----+-----+-----+-----+-----+-----+-----+-----+      1 | id (8 bits)                                   |        +-----+-----+-----+-----+-----+-----+-----+-----+   Parameter(short_name='sid', type='CODED-CONST', semantic=None, byte_position=0, bit_length=8, coded_value='0x10')   Parameter(short_name='id', type='CODED-CONST', semantic=None, byte_position=1, bit_length=8, coded_value='0x0')  Number of positive responses: 1  Message format of a positive response:           7     6     5     4     3     2     1     0          +-----+-----+-----+-----+-----+-----+-----+-----+      0 | sid (8 bits)                                  |        +-----+-----+-----+-----+-----+-----+-----+-----+      1 | can_do_backward_flips (8 bits)                |        +-----+-----+-----+-----+-----+-----+-----+-----+   Parameter(short_name='sid', type='CODED-CONST', semantic=None, byte_position=0, bit_length=8, coded_value='0x50')   Parameter(short_name='can_do_backward_flips', type='VALUE', semantic=None, byte_position=1, bit_length=8, dop_ref='somersault.DOP.boolean')    DataObjectProperty('boolean', category='TEXTTABLE', internal_type='A_UINT32', physical_type='A_UNICODE2STRING')  Number of negative responses: 1  Message format of a negative response:           7     6     5     4     3     2     1     0          +-----+-----+-----+-----+-----+-----+-----+-----+      0 | sid (8 bits)                                  |        +-----+-----+-----+-----+-----+-----+-----+-----+      1 | rq_sid (8 bits)                               |        +-----+-----+-----+-----+-----+-----+-----+-----+      2 | response_code (8 bits)                        |        +-----+-----+-----+-----+-----+-----+-----+-----+   Parameter(short_name='sid', type='CODED-CONST', semantic=None, byte_position=0, bit_length=8, coded_value='0x7f')   Parameter(short_name='rq_sid', type='MATCHING-REQUEST-PARAM', semantic=None, byte_position=1)    Request byte position = 0, byte length = 1   Parameter(short_name='response_code', type='VALUE', semantic=None, byte_position=2, bit_length=8, dop_ref='somersault.DOP.error_code')    DataObjectProperty('error_code', category='IDENTICAL', internal_type='A_UINT32', physical_type='A_UINT32')Decoded Request('start_session'):sid: 16id: 0````odxtools find $BASE_DIR/odxtools/examples/somersault.pdx -d 10 00` would display the same information, without the decoded request, and `-s &lt;name&gt;` can be used to find a service by partial name.## TestingThe included unit tests can be run via```bashpython -m unittest tests/test_*.py```The static type checker can be run via```bashpython3 -m mypy --ignore-missing-imports odxtools```## ContributingWe welcome any contributions.  If you want to contribute to thisproject, please read the [contributing guide](https://github.com/mercedes-benz/odxtools/blob/main/CONTRIBUTING.md).## Code of ConductPlease read our [Code of Conduct](https://github.com/mercedes-benz/daimler-foss/blob/master/CODE_OF_CONDUCT.md)as it is our base for interaction.## LicenseThis project is licensed under the [MIT LICENSE](https://github.com/mercedes-benz/odxtools/blob/main/LICENSE).## Provider InformationPlease visit &lt;https://mbition.io/en/home/index.html&gt; for information on the provider.Notice: Before you use the program in productive use, please take all necessary precautions,e.g. testing and verifying the program with regard to your specific use.The program was tested solely for our own use cases, which might differ from yours.## AcknowledgementsThis work includes research of the project[SofDCar](https://sofdcar.de/) (19S21002), which is funded by the[German Federal Ministry for Economic Affairs andClimate Action](https://www.bmwk.de/).## LicenseThis project is licensed under the [MIT LICENSE](LICENSE).</longdescription>
</pkgmetadata>