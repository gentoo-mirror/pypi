<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)[![CPP17](https://img.shields.io/badge/Language-C++17-blue.svg)]()[![PyPi](https://img.shields.io/pypi/v/pycdfpp.svg)](https://pypi.python.org/pypi/pycdfpp)[![Coverage](https://codecov.io/gh/SciQLop/CDFpp/coverage.svg?branch=main)](https://codecov.io/gh/SciQLop/CDFpp/branch/main)[![Discover on MyBinder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/SciQLop/CDFpp/main?labpath=examples/notebooks)# Python packages| Linux x86_64 | Windows x86_64  | MacOs x86_64  | MacOs ARM64  || --- | --- | --- | --- || [![linux_x86_64][1]][2] | [![windows_x86_64][3]][4] | [![macos_x86_64][5]][6] | [![macos_arm64][7]][8] |[1]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml/badge.svg?event=release[2]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml[3]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml/badge.svg?event=release[4]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml[5]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml/badge.svg?event=release[6]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml[7]: https://api.cirrus-ci.com/github/SciQLop/CDFpp.svg[8]: https://cirrus-ci.com/github/SciQLop/CDFpp# Unit Tests| Linux x86_64  | Windows x86_64 | MacOs x86_64  || --- | --- | --- || [![linux_x86_64][9]][10] | [![windows_x86_64][11]][12] | [![macos_x86_64][13]][14] |[9]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml/badge.svg?event=push[10]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml[11]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml/badge.svg?event=push[12]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml[13]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml/badge.svg?event=push[14]: https://github.com/SciQLop/CDFpp/actions/workflows/CI.yml# CDFpp (CDF++)A NASA's [CDF](https://cdf.gsfc.nasa.gov/) modern C++ library. This is not a C++ wrapper but a full C++ implementation.Why? CDF files are still used for space physics missions but few implementations are available.The main one is NASA's C implementation available [here](https://cdf.gsfc.nasa.gov/) but it lacks multi-threads support, has an old C interface and has a license which isn't compatible with most Linux distributions policy.There are also Java and Python implementations which are not usable in C++.List of features and roadmap:- CDF reading    - [x] read uncompressed file headers    - [x] read uncompressed attributes    - [x] read uncompressed variables    - [x] read variable attributes    - [x] loads cdf files from memory (std::vector&lt;char&gt; or char*)    - [x] handles both row and column major files    - [x] read variables with nested VXRs    - [x] read compressed file (GZip, RLE)    - [x] read compressed variables (GZip, RLE)    - [x] read UTF-8 encoded files    - [x] read ISO 8859-1(Latin-1) encoded files (converts to UTF-8 on the fly)- CDF writing    - [ ] write uncompressed headers    - [ ] write uncompressed attributes    - [ ] write uncompressed variables    - [ ] write compressed attributes    - [ ] write compressed file variables- General features    - [x] handle leap seconds    - [x] Python wrappers    - [ ] Documentation    - [ ] Examples    - [ ] BenchmarksIf you want to understand how it works, how to use the code or what works, you may have to read tests.# Installing## From PyPi```bashpip3 install --user pycdfpp```## From sources```bashmeson buildcd buildninjasudo ninja install```# Basic usage## PythonBasic example from a local file:```pythonimport pycdfppcdf = pycdfpp.load(&quot;some_cdf.cdf&quot;)cdf_var_data = cdf[&quot;var_name&quot;].values #builds a numpy view or a list of stringsattribute_name_first_value = cdf.attributes['attribute_name'][0]```Note that you can also load in memory files:```pythonimport pycdfppimport requestsimport matplotlib.pyplot as plttha_l2_fgm = pycdfpp.load(requests.get(&quot;https://spdf.gsfc.nasa.gov/pub/data/themis/tha/l2/fgm/2016/tha_l2_fgm_20160101_v01.cdf&quot;).content)plt.plot(tha_l2_fgm[&quot;tha_fgl_gsm&quot;])plt.show()```Buffer protocol support:```pythonimport pycdfppimport requestsimport xarray as xrimport matplotlib.pyplot as plttha_l2_fgm = pycdfpp.load(requests.get(&quot;https://spdf.gsfc.nasa.gov/pub/data/themis/tha/l2/fgm/2016/tha_l2_fgm_20160101_v01.cdf&quot;).content)xr.DataArray(tha_l2_fgm['tha_fgl_gsm'], dims=['time', 'components'], coords={'time':tha_l2_fgm['tha_fgl_time'].values, 'components':['x', 'y', 'z']}).plot.line(x='time')plt.show()# Works with matplotlib directly tooplt.plot(tha_l2_fgm['tha_fgl_time'], tha_l2_fgm['tha_fgl_gsm'])plt.show()```Datetimes handling:```pythonimport pycdfppimport os# Due to an issue with pybind11 you have to force your timezone to UTC for # datetime conversion (not necessary for numpy datetime64)os.environ['TZ']='UTC'mms2_fgm_srvy = pycdfpp.load(&quot;mms2_fgm_srvy_l2_20200201_v5.230.0.cdf&quot;)# to convert any CDF variable holding any time type to python datetime:epoch_dt = pycdfpp.to_datetime(mms2_fgm_srvy[&quot;Epoch&quot;])# same with numpy datetime64:epoch_dt64 = pycdfpp.to_datetime64(mms2_fgm_srvy[&quot;Epoch&quot;])# note that using datetime64 is ~100x faster than datetime (~2ns/element on an average laptop)```## C++```cpp#include &quot;cdf-io/cdf-io.hpp&quot;#include &lt;iostream&gt;std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const cdf::Variable::shape_t&amp; shape){    os &lt;&lt; &quot;(&quot;;    for (auto i = 0; i &lt; static_cast&lt;int&gt;(std::size(shape)) - 1; i++)        os &lt;&lt; shape[i] &lt;&lt; ',';    if (std::size(shape) &gt;= 1)        os &lt;&lt; shape[std::size(shape) - 1];    os &lt;&lt; &quot;)&quot;;    return os;}int main(int argc, char** argv){    auto path = std::string(DATA_PATH) + &quot;/a_cdf.cdf&quot;;    // cdf::io::load returns a optional&lt;CDF&gt;    if (const auto my_cdf = cdf::io::load(path); my_cdf)    {        std::cout &lt;&lt; &quot;Attribute list:&quot; &lt;&lt; std::endl;        for (const auto&amp; [name, attribute] : my_cdf-&gt;attributes)        {            std::cout &lt;&lt; &quot;\t&quot; &lt;&lt; name &lt;&lt; std::endl;        }        std::cout &lt;&lt; &quot;Variable list:&quot; &lt;&lt; std::endl;        for (const auto&amp; [name, variable] : my_cdf-&gt;variables)        {            std::cout &lt;&lt; &quot;\t&quot; &lt;&lt; name &lt;&lt; &quot; shape:&quot; &lt;&lt; variable.shape() &lt;&lt; std::endl;        }        return 0;    }    return -1;}```</longdescription>
</pkgmetadata>