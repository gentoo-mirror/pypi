<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Cryptowatch Python SDKThe Cryptowatch Python library provides a convenient access to the [Cryptowatch API](https://docs.cryptowat.ch/home/) from applications written in the Python language.It includes the following features: * Auto-serialization of API responses into Python objects * Websocket client with transparent handling of protobuf messages * API credentials automatically read from your `~/.cw/credentials.yml` config file * Custom exceptions for API-specific issues (e.g.: Requests Allowance) * Smart back-off retries in case of API connectivity loss## Installation```pip install cryptowatch-sdk```#### Note:The [`cryptowatch` library](https://pypi.org/project/cryptowatch/) is **not** related with [Cryptowatch](https://cryptowat.ch/). If you installed it by mistake run `pip uninstall cryptowatch` to remove it.The correct library name is `cryptowatch-sdk`.## ExampleShowing all Kraken markets that already gained at least 5% over the current weekly candle.```pythonimport cryptowatch as cwfrom datetime import datetime, timedelta# Get all Kraken marketskraken = cw.markets.list(&quot;kraken&quot;)# For each Kraken market...for market in kraken.markets:    # Forge current market ticker, like KRAKEN:BTCUSD    ticker = &quot;{}:{}&quot;.format(market.exchange, market.pair).upper()    # Request weekly candles for that market    candles = cw.markets.get(ticker, ohlc=True, periods=[&quot;1w&quot;])    # Each candle is a list of [close_timestamp, open, high, low, close, volume, volume_quote]    # Get close_timestamp, open and close from the most recent weekly candle    close_ts, wkly_open, wkly_close = (        candles.of_1w[-1][0],        candles.of_1w[-1][1],        candles.of_1w[-1][4],    )    # Compute market performance, skip if open was 0    if wkly_open == 0:        continue    perf = (wkly_open - wkly_close) * 100 / wkly_open    # If the market performance was 5% or more, print it    if perf &gt;= 5:        open_ts = datetime.utcfromtimestamp(close_ts) - timedelta(days=7)        print(&quot;{} gained {:.2f}% since {}&quot;.format(ticker, perf, open_ts))```### Requirements* python v3.7+* requests v0.8.8+* marshmallow v3.2.2+* pyyaml v5.1.2+* websocket-client v0.56+* protobuf v3.11.3+## API CrendentialUsing a credential file will allow you to authenticate your requests and grant you the API access of your Cryptowatch account.Your account Credits will be consumed for the REST and WebSocket API. Specific Credit cost details can be found on the [Pricing page](https://cryptowat.ch/pricing).### Setup your credential file1. Generate an Cryptowatch API key from [your account](https://cryptowat.ch/account/api-access)2. Create your credential file on your machine by running in order:    2.1 `mkdir $HOME/.cw`    2.2 `echo &quot;apikey: 123&quot; &gt; $HOME/.cw/credentials.yml` (where `123` is your 20 digits **public key**)3. Verify with `cat $HOME/.cw/credentials.yml` that you see something like below (`123` being your public key):```apikey: 123```The SDK will read your public key as soon as `import cryptowatch` is ran in your script.## Usage### REST API```pythonimport cryptowatch as cw# Set your API Key, it is by default read from  your ~/.cw/credentials.yml filecw.api_key = &quot;123&quot;# Assetscw.assets.list()cw.assets.get(&quot;BTC&quot;)# Exchangescw.exchanges.list()cw.exchanges.get(&quot;KRAKEN&quot;)# Instrumentscw.instruments.list()cw.instruments.get(&quot;BTCUSD&quot;)# Marketscw.markets.list() # Returns list of all markets on all exchangescw.markets.list(&quot;BINANCE&quot;) # Returns all markets on Binance# Returns market summary (last, high, low, change, volume)cw.markets.get(&quot;KRAKEN:BTCUSD&quot;)# Return market candlestick info (open, high, low, close, volume) on some timeframescw.markets.get(&quot;KRAKEN:BTCUSD&quot;, ohlc=True, periods=[&quot;4h&quot;, &quot;1h&quot;, &quot;1d&quot;])# Returns market last tradescw.markets.get(&quot;KRAKEN:BTCUSD&quot;, trades=True)# Return market current orderbookcw.markets.get(&quot;KRAKEN:BTCUSD&quot;, orderbook=True)# Return market current orderbook liquiditycw.markets.get(&quot;KRAKEN:BTCUSD&quot;, liquidity=True)```You can access the raw HTTP response received via the `_http_response` attribute which is a [`requests.Response`](https://requests.readthedocs.io/en/stable/api/#requests.Response) object:```pythonimport cryptowatch as cwbitcoin = cw.assets.get('btc')print(bitcoin._http_response)```### Websocket```pythonimport cryptowatch as cw# Set your API Keycw.api_key = &quot;123&quot;# Subscribe to resources (https://docs.cryptowat.ch/websocket-api/data-subscriptions#resources)cw.stream.subscriptions = [&quot;markets:*:trades&quot;]# What to do on each trade updatedef handle_trades_update(trade_update):    &quot;&quot;&quot;        trade_update follows Cryptowatch protocol buffer format:        https://github.com/cryptowatch/proto/blob/master/public/markets/market.proto    &quot;&quot;&quot;    market_msg = &quot;&gt;&gt;&gt; Market#{} Exchange#{} Pair#{}: {} New Trades&quot;.format(        trade_update.marketUpdate.market.marketId,        trade_update.marketUpdate.market.exchangeId,        trade_update.marketUpdate.market.currencyPairId,        len(trade_update.marketUpdate.tradesUpdate.trades),    )    print(market_msg)    for trade in trade_update.marketUpdate.tradesUpdate.trades:        trade_msg = &quot;\tID:{} TIMESTAMP:{} TIMESTAMPNANO:{} PRICE:{} AMOUNT:{}&quot;.format(            trade.externalId,            trade.timestamp,            trade.timestampNano,            trade.priceStr,            trade.amountStr,        )        print(trade_msg)cw.stream.on_trades_update = handle_trades_update# Start receivingcw.stream.connect()# Call disconnect to close the stream connection# cw.stream.disconnect()```See [this script](https://github.com/cryptowatch/cw-sdk-python/tree/master/examples/stream_example.py) for more streaming example.#### Converting protobuf messages to JSONIf you need to convert the protobuf message to JSON, you can do so with `MessageToJson`. See the example below:```pythonfrom google.protobuf.json_format import MessageToJsonimport cryptowatch as cw# Set your API Keycw.api_key = &quot;123&quot;# Subscribe to resources (https://docs.cryptowat.ch/websocket-api/data-subscriptions#resources)cw.stream.subscriptions = [&quot;markets:*:trades&quot;]# What to do on each trade updatedef handle_trades_update(trade_update):    &quot;&quot;&quot;        trade_update follows Cryptowatch protocol buffer format:        https://github.com/cryptowatch/proto/blob/master/public/markets/market.proto    &quot;&quot;&quot;    MessageToJson(trade_update)cw.stream.on_trades_update = handle_trades_update# Start receivingcw.stream.connect()```### LoggingLogging can be enabled through Python's `logging` module:```pythonimport logginglogging.basicConfig()logging.getLogger(&quot;cryptowatch&quot;).setLevel(logging.DEBUG)```### CLIThe library exposes a simple utility, named `cryptowatch`, to return last market prices.#### By default it returns Kraken's BTCUSD market```&gt; cryptowatch7425.0```#### Add another Kraken market to return this market last price```&gt; cryptowatch btceur6758.1```#### You can also specify your own exchange```&gt; cryptowatch binance:ethbtc0.020359```When the market doesn't exist a return code of `1` will be set (`0` otherwise):```&gt; cryptowatch binance:nosuchmarketusd&gt; echo $?1```## TestingUnit tests are under the [tests](https://github.com/cryptowatch/cw-sdk-python/tree/master/tests) folder and use `pytest`, run them all with:```make test```Integration tests sending real HTTP requests to the Cryptowatch API can be run with:```make test-http-real```## DevelopmentTesting and developement dependencies are in the [requirements.txt](https://github.com/cryptowatch/cw-sdk-python/tree/master/requirements.txt) file, install them with:```pip install -r requirements.txt```The code base use the [Black](https://black.readthedocs.io/en/stable/) linter, run it with:```make lint```## License[BSD-2-Clause](https://github.com/cryptowatch/cw-sdk-python/tree/master/LICENSE)</longdescription>
</pkgmetadata>