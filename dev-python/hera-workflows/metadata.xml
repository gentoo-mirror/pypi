<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Hera```textThe Argo was constructed by the shipwright Argus,and its crew were specially protected by the goddess Hera.```[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/argoproj-labs/hera)[![Build](https://github.com/argoproj-labs/hera/actions/workflows/cicd.yaml/badge.svg)](./.github/workflows/cicd.yaml)[![Docs](https://readthedocs.org/projects/hera/badge/?version=latest)](https://hera.readthedocs.io/en/latest/?badge=latest)[![codecov](https://codecov.io/gh/argoproj-labs/hera/branch/main/graph/badge.svg?token=x4tvsQRKXP)](https://codecov.io/gh/argoproj-labs/hera)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![Pypi](https://img.shields.io/pypi/v/hera.svg)](https://pypi.python.org/pypi/hera)[![CondaForge](https://anaconda.org/conda-forge/hera-workflows/badges/version.svg)](https://anaconda.org/conda-forge/hera-workflows)[![Versions](https://img.shields.io/pypi/pyversions/hera.svg)](https://github.com/argoproj-labs/hera)### Stats after the [rename to Hera](https://github.com/argoproj-labs/hera/discussions/532)[![Downloads](https://pepy.tech/badge/hera)](https://pepy.tech/project/hera)[![Downloads/month](https://pepy.tech/badge/hera/month)](https://pepy.tech/project/hera)[![Downloads/week](https://pepy.tech/badge/hera/week)](https://pepy.tech/project/hera)### Stats before the [rename to Hera](https://github.com/argoproj-labs/hera/discussions/532)[![Downloads](https://pepy.tech/badge/hera-workflows)](https://pepy.tech/project/hera-workflows)[![Downloads/month](https://pepy.tech/badge/hera-workflows/month)](https://pepy.tech/project/hera-workflows)[![Downloads/week](https://pepy.tech/badge/hera-workflows/week)](https://pepy.tech/project/hera-workflows)Hera is a Python framework for constructing and submitting Argo Workflows. The main goal of Hera is to make the Argoecosystem accessible by simplifying workflow construction and submission.You can watch the introductory Hera presentation at the &quot;Argo Workflows and Events Community Meeting 20 Oct2021&quot; [here](https://www.youtube.com/watch?v=QETfzfVV-GY&amp;t=181s)!# Table of content- [Hera](#hera)- [Table of content](#table-of-content)- [Requirements](#requirements)- [Installation](#installation)- [Examples](#examples)    - [Single step script](#single-step-script)    - [DAG diamond](#dag-diamond)- [Contributing](#contributing)- [Comparison](#comparison)# RequirementsHera requires an Argo server to be deployed to a Kubernetes cluster. Currently, Hera assumes that the Argo server sitsbehind an authentication layer that can authenticate workflow submission requests by using the Bearer token on therequest. To learn how to deploy Argo to your own Kubernetes cluster you can followthe [Argo Workflows](https://argoproj.github.io/argo-workflows/quick-start/) guide!Another option for workflow submission without the authentication layer is using port forwarding to your Argo serverdeployment and submitting workflows to `localhost:2746` (2746 is the default, but you are free to use yours). Pleaserefer to the documentation of [Argo Workflows](https://argoproj.github.io/argo-workflows/quick-start/) to see thecommand for port forward!&gt; **Note**&gt; Since the deprecation of tokens being automatically created for ServiceAccounts and Argo using Bearer tokens in place,&gt; it is necessary to use `--auth=server` and/or `--auth=client` when setting up Argo Workflows on Kubernetes v1.24+&gt; in order for hera to communicate to the Argo Server.# Installation## NoteHera went through a name change - from `hera-workflows` to `hera`. This is reflected in the publishedPython package. If you'd like to install versions prior to `5.0.0`, you have to use `hera-workflows`. Hera currentlypublishes releases to both `hera` and `hera-workflows` for backwards compatibility purposes.| Source                                                   | Command                                                                                              ||----------------------------------------------------------|------------------------------------------------------------------------------------------------------|| [PyPi](https://pypi.org/project/hera/)                   | `pip install hera`                                                                                   || [PyPi](https://pypi.org/project/hera-workflows/)         | `pip install hera-workflows`                                                                         || [Conda](https://anaconda.org/conda-forge/hera-workflows) | `conda install -c conda-forge hera-workflows`                                                        || [GitHub repo](https://github.com/argoproj-labs/hera)     | `python -m pip install git+https://github.com/argoproj-labs/hera --ignore-installed`/`pip install .` |## Optional dependencies### yaml- Install via `hera[yaml]`- [PyYAML](https://pypi.org/project/PyYAML/) is required for the `yaml` output format, which is accessible via    `hera.workflows.Workflow.to_yaml(*args, **kwargs)`. This enables GitOps practices and easier debugging# Examples### Single step script```pythonfrom hera.workflows import Steps, Workflow, script@script()def echo(message: str):    print(message)with Workflow(    generate_name=&quot;single-script-&quot;,    entrypoint=&quot;steps&quot;,) as w:    with Steps(name=&quot;steps&quot;):        echo(arguments={&quot;message&quot;: &quot;A&quot;})w.create()```### DAG diamond```pythonfrom hera.workflows import DAG, Workflow, script@script()def echo(message: str):    print(message)with Workflow(    generate_name=&quot;dag-diamond-&quot;,    entrypoint=&quot;diamond&quot;,) as w:    with DAG(name=&quot;diamond&quot;):        A = echo(name=&quot;A&quot;, arguments={&quot;message&quot;: &quot;A&quot;})        B = echo(name=&quot;B&quot;, arguments={&quot;message&quot;: &quot;B&quot;})        C = echo(name=&quot;C&quot;, arguments={&quot;message&quot;: &quot;C&quot;})        D = echo(name=&quot;D&quot;, arguments={&quot;message&quot;: &quot;D&quot;})        A &gt;&gt; [B, C] &gt;&gt; Dw.create()```See the [examples](./examples/) directory for a collection of Argo workflow construction and submission via Hera!# ContributingIf you plan to submit contributions to Hera you can install Hera in a virtual environment managed by `poetry`:```shellpoetry install```Once the dependencies are installed, you can use the various `make` targets to replicate the `CI` jobs.```make helpcheck-codegen                  Check if the code is up to dateci                             Run all the CI checkscodegen                        Generate all the codeevents-models                  Generate the Events models portion of Argo Workflowsevents-service                 Generate the events service option of Heraexamples                       Generate all the examplesformat                         Format and sort imports for source, tests, examples, etc.help                           Showcase the help instructions for all the available `make` commandslint                           Run a `lint` process on Hera and report problemsmodels                         Generate all the Argo Workflows modelsservices                       Generate the services of Heratest                           Run tests for Heraworkflows-models               Generate the Workflows models portion of Argo Workflowsworkflows-service              Generate the Workflows service option of Hera```Also, see the [contributing guide](./CONTRIBUTING.md)!# ComparisonThere have been other libraries available for structuring and submitting Argo Workflows:- [Couler](https://github.com/couler-proj/couler), which aimed to provide a unified interface for constructing and  managing workflows on different workflow engines. It has now been unmaintained since its last commit in April 2022.- [Argo Python DSL](https://github.com/argoproj-labs/argo-python-dsl), which allows you to programmatically define Argo  worfklows using Python. It was archived in October 2021.While the aforementioned libraries provided amazing functionality for Argo workflow construction and submission, theyrequired an advanced understanding of Argo concepts. When [Dyno Therapeutics](https://dynotx.com) started using ArgoWorkflows, it was challenging to construct and submit experimental machine learning workflows. Scientists and engineersat [Dyno Therapeutics](https://dynotx.com) used a lot of time for workflow definition rather than the implementation ofthe atomic unit of execution - the Python function - that performed, for instance, model training.Hera presents an intuitive Python interface to the underlying API of Argo, with custom classes making use of contextmanagers and callables, empowering users to focus on their own executable payloads rather than workflow setup.&lt;details&gt;&lt;summary&gt;Here's a side by side comparison of Hera, Couler, and Argo Python DSL&lt;/summary&gt;You will see how Hera has focused on reducing the complexity of Argo concepts while also reducing the total lines ofcode required to construct the `diamond` example, which canbe &lt;a href=&quot;https://github.com/argoproj/argo-workflows/blob/2a9bd6c83601990259fd5162edeb425741757484/examples/dag-diamond.yaml&quot;&gt;found in the upstream Argo repository&lt;/a&gt;.&lt;table&gt;&lt;tr&gt;&lt;th&gt;Hera&lt;/th&gt;&lt;th&gt;Couler&lt;/th&gt;&lt;th&gt;Argo Python DSL&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;```pythonfrom hera.workflows import DAG, Container, Parameter, Workflowwith Workflow(    generate_name=&quot;dag-diamond-&quot;,    entrypoint=&quot;diamond&quot;,) as w:    echo = Container(        name=&quot;echo&quot;,        image=&quot;alpine:3.7&quot;,        command=[&quot;echo&quot;, &quot;{{inputs.parameters.message}}&quot;],        inputs=[Parameter(name=&quot;message&quot;)],    )    with DAG(name=&quot;diamond&quot;):        A = echo(name=&quot;A&quot;, arguments={&quot;message&quot;: &quot;A&quot;})        B = echo(name=&quot;B&quot;, arguments={&quot;message&quot;: &quot;B&quot;})        C = echo(name=&quot;C&quot;, arguments={&quot;message&quot;: &quot;C&quot;})        D = echo(name=&quot;D&quot;, arguments={&quot;message&quot;: &quot;D&quot;})        A &gt;&gt; [B, C] &gt;&gt; Dw.create()```&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;```pythonimport couler.argo as coulerfrom couler.argo_submitter import ArgoSubmitterdef job(name):    couler.run_container(        image=&quot;docker/whalesay:latest&quot;,        command=[&quot;cowsay&quot;],        args=[name],        step_name=name,    )def diamond():    couler.dag(        [            [lambda: job(name=&quot;A&quot;)],            [lambda: job(name=&quot;A&quot;), lambda: job(name=&quot;B&quot;)],  # A -&gt; B            [lambda: job(name=&quot;A&quot;), lambda: job(name=&quot;C&quot;)],  # A -&gt; C            [lambda: job(name=&quot;B&quot;), lambda: job(name=&quot;D&quot;)],  # B -&gt; D            [lambda: job(name=&quot;C&quot;), lambda: job(name=&quot;D&quot;)],  # C -&gt; D        ]    )diamond()submitter = ArgoSubmitter()couler.run(submitter=submitter)```&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;```pythonfrom argo.workflows.dsl import Workflowfrom argo.workflows.dsl.tasks import *from argo.workflows.dsl.templates import *class DagDiamond(Workflow):    @task    @parameter(name=&quot;message&quot;, value=&quot;A&quot;)    def A(self, message: V1alpha1Parameter) -&gt; V1alpha1Template:        return self.echo(message=message)    @task    @parameter(name=&quot;message&quot;, value=&quot;B&quot;)    @dependencies([&quot;A&quot;])    def B(self, message: V1alpha1Parameter) -&gt; V1alpha1Template:        return self.echo(message=message)    @task    @parameter(name=&quot;message&quot;, value=&quot;C&quot;)    @dependencies([&quot;A&quot;])    def C(self, message: V1alpha1Parameter) -&gt; V1alpha1Template:        return self.echo(message=message)    @task    @parameter(name=&quot;message&quot;, value=&quot;D&quot;)    @dependencies([&quot;B&quot;, &quot;C&quot;])    def D(self, message: V1alpha1Parameter) -&gt; V1alpha1Template:        return self.echo(message=message)    @template    @inputs.parameter(name=&quot;message&quot;)    def echo(self, message: V1alpha1Parameter) -&gt; V1Container:        container = V1Container(            image=&quot;alpine:3.7&quot;,            name=&quot;echo&quot;,            command=[&quot;echo&quot;, &quot;{{inputs.parameters.message}}&quot;],        )        return container```&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/details&gt;</longdescription>
</pkgmetadata>