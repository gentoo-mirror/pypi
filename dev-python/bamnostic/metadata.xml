<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Documentation Status| |Conda Version| |PyPI version| |Maintainability||status| |DOI| |License|+---------------------------+------------------------------------------+| Platform                  | Build Status                             |+===========================+==========================================+| Linux                     | |Build Status TravisCI|                  |+---------------------------+------------------------------------------+| Windows                   | |Build status Appveyor|                  |+---------------------------+------------------------------------------+| conda                     | |noarch|                                 |+---------------------------+------------------------------------------++---------------------+------------------------------------------------+| Host                | Downloads                                      |+=====================+================================================+| PyPI                | |Downloads|                                    |+---------------------+------------------------------------------------+| conda               | |Conda Downloads|                              |+---------------------+------------------------------------------------+BAMnostic=========a *pure Python*, **OS-agnositic** Binary Alignment Map (BAM) file parserand random access tool.Note:-----Documentation can be found at`here &lt;http://bamnostic.readthedocs.io/en/latest/&gt;`__ or by going tothis address: http://bamnostic.readthedocs.io. Documentation was madeavailable through `Read the Docs &lt;https://readthedocs.org/&gt;`__.--------------Installation------------There are 4 methods of installation available (choose one):Through the ``conda`` package manager (`Anaconda Cloud &lt;https://anaconda.org/conda-forge/bamnostic&gt;`__)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: bash   # first, add the conda-forge channel to your conda build   conda config --add channels conda-forge   # now bamnostic is available for install   conda install bamnosticThrough the Python Package Index (`PyPI &lt;https://pypi.org/&gt;`__)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: bash   pip install bamnostic   # or, if you don't have superuser access   pip install --user bamnosticThrough pip+Github~~~~~~~~~~~~~~~~~~.. code:: bash   # again, use --user if you don't have superuser access   pip install -e git+https://github.com/betteridiot/bamnostic.git#egg=bamnostic   # or, if you don't have superuser access   pip install --user -e git+https://github.com/betteridiot/bamnostic.git#bamnostic#egg=bamnosticTraditional GitHub clone~~~~~~~~~~~~~~~~~~~~~~~~.. code:: bash   git clone https://github.com/betteridiot/bamnostic.git   cd bamnostic   pip install -e .   # or, if you don't have superuser access   pip install --user -e .--------------Quickstart----------Bamnostic is meant to be a reduced drop-in replacement for`pysam &lt;https://github.com/pysam-developers/pysam&gt;`__. As such it hasmuch the same API as ``pysam`` with regard to BAM-related operations.**Note**: the ``pileup()`` method is not supported at this time. ###Importing.. code:: python   &gt;&gt;&gt; import bamnostic as bsLoading your BAM file (Note: CRAM format are not supported at this time)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Bamnostic comes with an example BAM (and respective BAI) file just toplay around with the output. Note, however, that the example BAM filedoes not contain many reference contigs. Therefore, random access islimited. This example file is made availble through``bamnostic.example_bam``, which is a just a string path to the BAM filewithin the package... code:: python   &gt;&gt;&gt; bam = bs.AlignmentFile(bs.example_bam, 'rb')Get the header~~~~~~~~~~~~~~**Note**: this will print out the SAM header. If the SAM header is notin the BAM file, it will print out the dictionary representation of theBAM header. It is a dictionary of refID keys with contig names andlength tuple values... code:: python   &gt;&gt;&gt; bam.header   {0: ('chr1', 1575), 1: ('chr2', 1584)}Data validation through ``head()``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   &gt;&gt;&gt;bam.head(n=2)   [EAS56_57:6:190:289:82  69  chr1    100 0   *   =   100 0   CTCAAGGTTGTTGCAAGGGGGTCTATGTGAACAAA &lt;&lt;&lt;7&lt;&lt;&lt;;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;8;;&lt;7;4&lt;;&lt;;;;;;94&lt;; MF:C:192,    EAS56_57:6:190:289:82  137 chr1    100 73  35M =   100 0   AGGGGTGCAGAGCCGAGTCACGGGGTTGCCAGCAC &lt;&lt;&lt;&lt;&lt;&lt;;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;;&lt;&lt;;&lt;&lt;&lt;&lt;;8&lt;6;9;;2; MF:C:64 Aq:C:0  NM:C:0  UQ:C:0  H0:C:1  H1:C:0]Getting the first read~~~~~~~~~~~~~~~~~~~~~~.. code:: python   &gt;&gt;&gt; first_read = next(bam)   &gt;&gt;&gt; print(first_read)   EAS56_57:6:190:289:82   69  chr1    100 0   *   =   100 0   CTCAAGGTTGTTGCAAGGGGGTCTATGTGAACAAA &lt;&lt;&lt;7&lt;&lt;&lt;;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;8;;&lt;7;4&lt;;&lt;;;;;;94&lt;; MF:C:192Exploring the read~~~~~~~~~~~~~~~~~~.. code:: python   # read name   &gt;&gt;&gt; print(first_read.read_name)   EAS56_57:6:190:289:82   # 0-based position   &gt;&gt;&gt; print(first_read.pos)   99   # nucleotide sequence   &gt;&gt;&gt; print(first_read.seq)   CTCAAGGTTGTTGCAAGGGGGTCTATGTGAACAAA   # Read FLAG   &gt;&gt;&gt; print(first_read.flag)   69   # decoded FLAG   &gt;&gt;&gt; bs.utils.flag_decode(first_read.flag)   [(1, 'read paired'), (4, 'read unmapped'), (64, 'first in pair')]Random Access~~~~~~~~~~~~~.. code:: python   &gt;&gt;&gt; for i, read in enumerate(bam.fetch('chr2', 1, 100)):   ...    if i &gt;= 3:   ...        break   ...    print(read)   B7_591:8:4:841:340  73  chr2    1   99  36M *   0   0   TTCAAATGAACTTCTGTAATTGAAAAATTCATTTAA    &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;;&lt;&lt;&lt;&lt;&lt;;&lt;;:&lt;&lt;&lt;&lt;&lt;&lt;&lt;;;    MF:C:18 Aq:C:77 NM:C:0  UQ:C:0  H0:C:1  H1:C:0   EAS54_67:4:142:943:582  73  chr2    1   99  35M *   0   0   TTCAAATGAACTTCTGTAATTGAAAAATTCATTTA &lt;&lt;&lt;&lt;&lt;&lt;;&lt;&lt;&lt;&lt;&lt;&lt;:&lt;&lt;;&lt;&lt;&lt;&lt;;&lt;&lt;&lt;;&lt;&lt;&lt;:;&lt;&lt;&lt;5 MF:C:18 Aq:C:41 NM:C:0  UQ:C:0  H0:C:1  H1:C:0   EAS54_67:6:43:859:229   153 chr2    1   66  35M *   0   0   TTCAAATGAACTTCTGTAATTGAAAAATTCATTTA +37&lt;=&lt;.;&lt;&lt;7.;77&lt;5&lt;&lt;0&lt;&lt;&lt;;&lt;&lt;&lt;27&lt;&lt;&lt;&lt;&lt;&lt; MF:C:32 Aq:C:0  NM:C:0  UQ:C:0  H0:C:1  H1:C:0--------------Introduction------------Next-Generation Sequencing~~~~~~~~~~~~~~~~~~~~~~~~~~The field of genomics requires sequencing data produced byNext-Generation sequencing (NGS) platforms (such as`Illumina &lt;https://www.illumina.com/&gt;`__). These data take the form ofmillions of short strings that represent the nucleotide sequences (A, T,C, or G) of the sample fragments processed by the NGS platform. Moreinformation regarding the NGS workflow can be found`here &lt;https://www.illumina.com/content/dam/illumina-marketing/documents/products/illumina_sequencing_introduction.pdf&gt;`__An example of a single entry (known as FASTQ) can be seen below (`FASTQFormat &lt;https://en.wikipedia.org/wiki/FASTQ_format&gt;`__):.. code:: bash   @SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=36   GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACC   +SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=36   IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9ICEach entry details the read name, lenght, string representation, andquality of each aligned base along the read. ### SAM/BAM Format The datafrom the NGS platforms are often aligned to reference genome. That is,each entry goes through an alignment algorithm that finds the bestposition that the entry matches along a known reference sequence. Thealignment step extends the original entry with a sundry of additionalattributes. A few of the included attributes are contig, position, andCompact Idiosyncratic Gapped Alignment Report (CIGAR) string. Themodified entry is called the An example Sequence Alignment Map (SAM)entry can be see below (`SAMformat &lt;https://samtools.github.io/hts-specs/SAMv1.pdf&gt;`__):.. code:: bash   @HD VN:1.5 SO:coordinate   @SQ SN:ref LN:45   r001   99 ref  7 30 8M2I4M1D3M = 37  39 TTAGATAAAGGATACTG *   r002    0 ref  9 30 3S6M1P1I4M *  0   0 AAAAGATAAGGATA    *   r003    0 ref  9 30 5S6M       *  0   0 GCCTAAGCTAA       * SA:Z:ref,29,-,6H5M,17,0;   r004    0 ref 16 30 6M14N5M    *  0   0 ATAGCTTCAGC       *   r003 2064 ref 29 17 6H5M       *  0   0 TAGGC             * SA:Z:ref,9,+,5S6M,30,1;   r001  147 ref 37 30 9M         =  7 -39 CAGCGGCAT         * NM:i:1There are many benefits to the SAM format: human-readable, each entry iscontained to a single line (supporting simple stream analysis), concisedescription of the read’s quality and position, and a file headermetadata that supports integrity and reproducibility. Additionally, acompressed form of the SAM format was designed in parallel. It is calledthe Binary Alignment Map(`BAM &lt;https://samtools.github.io/hts-specs/SAMv1.pdf&gt;`__). Using aseries of clever byte encoding of each SAM entry, the data arecompressed into specialized, concatenated GZIP blocks called Blocked GNUZip Format (`BGZF &lt;https://samtools.github.io/hts-specs/SAMv1.pdf&gt;`__)blocks. Each BGZF block contains a finite amount of data (≈65Kb). Whilethe whole file is GZIP compatible, each individual block is alsoindependently GZIP compatible. This data structure, ultimately, makesthe file larger than just a normal GZIP file, but it also allow forrandom access within the file though the use of a BAM Index file(`BAI &lt;https://samtools.github.io/hts-specs/SAMv1.pdf&gt;`__).BAI~~~The BAI file, often produced via`samtools &lt;http://samtools.sourceforge.net/&gt;`__, requires the BAM fileto be sorted prior to indexing. Using a modified R-tree binningstrategy, each reference contig is divided into sequential,non-overlapping bins. That is a parent bin may contain numerouschildren, but none of the children bins overlap another’s assignedinterval. Each BAM entry is then assigned to the bin that fully containsit. A visual description of the binning strategy can be found`here &lt;https://samtools.github.io/hts-specs/SAMv1.pdf&gt;`__. Each bin iscomprised of chunks, and each chunk contains its respective start andstop byte positions within the BAM file. In addition to the bin index, alinear index is produced as well. Again, the reference contig is dividedinto equally sized windows (covering ≈16Kbp/each). Along those windows,the start offset of the first read that **overlaps** that window isstored. Now, given a region of interest, the first bin that overlaps theregion is looked up. The chunks in the bin are stored as *virtualoffsets*. A virtual offset is a 64-bit unsigned integer that iscomprised of the compressed offset ``coffset`` (indicating the byteposition of the start of the containing BGZF block) and the uncompressedoffset ``uoffset`` (indicating the byte position within the uncompresseddata of the BGZF block that the data starts). A virtual offset iscalculated by:.. code:: python   virtual_offset = coffset &lt;&lt; 16 | uoffsetSimilarly, the complement of the above is as follows:.. code:: python   coffset = virtual_offset &gt;&gt; 16   uoffset = virtual_offset ^ (coffset &lt;&lt; 16)A simple seek call against the BAM file will put the head at the startof your region of interest.--------------Motivation----------The common practice within the field of genomics/genetics when analyzingBAM files is to use the program known as`samtools &lt;http://samtools.sourceforge.net/&gt;`__. The maintainers ofsamtools have done a tremendous job of providing distributions that workon a multitude of operating systems. While samtools is powerful, as acommand line interface, it is also limited in that it doesn’t reallyafford the ability to perform real-time dynamic processing of reads(without requiring many system calls to samtools). Due to its generalnature and inherent readability, a package was written in Python called`pysam &lt;https://github.com/pysam-developers/pysam&gt;`__. This packageallowed users a very comfortable means to doing such dynamic processing.However, the foundation of these tools is built on a C-API called`htslib &lt;https://github.com/samtools/htslib&gt;`__ and htslib cannot becompiled in a Windows environment. By extension, neither can pysam. Inbuilding a tool for genomic visualization, I wanted it to be platformagnostic. This is precisely when I found out that the tools I hadplanned to use as a backend did not work on Windows…the most prevalentoperation system in the end-user world. So, I wrote **bamnostic**. As ofthis writing, bamnostic is OS-agnostic and written completely in PurePython–requiring only the standard library (and ``pytest`` for the testsuite). Special care was taken to ensure that it would run on allversions of CPython 2.7 or greater. Additionally, it runs in both stableversions of PyPy. While it may perform slower than its C counterparts,bamnostic opens up the science to a much greater end-user group. Lastly,it is lightweight enough to fit into any simple web server(e.g. `Flask &lt;http://flask.pocoo.org/&gt;`__), further expanding thescience of genetics/genomics.--------------Citation--------If you use bamnostic in your analyses, please consider citing `Li et al(2009) &lt;http://www.ncbi.nlm.nih.gov/pubmed/19505943&gt;`__ as well.Regarding the citation for bamnostic, please use the JoSS journalarticle (click on the JOSS badge above) or use the following: &gt;ShermanMD and Mills RE, (2018). BAMnostic: an OS-agnostic toolkit for genomicsequence analysis . Journal of Open Source Software, 3(28), 826,https://doi.org/10.21105/joss.00826--------------Community Guidelines:---------------------Eagerly accepting PRs for improvements, optimizations, or features. Forany questions or issues, please feel free to make a post to bamnostic’s`Issue tracker &lt;https://github.com/betteridiot/bamnostic/issues&gt;`__ ongithub or read over our`CONTRIBUTING &lt;https://github.com/betteridiot/bamnostic/blob/master/CONTRIBUTING.md&gt;`__documentation.--------------Commmunity Contributors:------------------------Below you will find a list of contributors and it acts as a small tokenof my gratitude to the community that has helped support this project.1. `@GeekLogan &lt;https://github.com/GeekLogan&gt;`__ 2.`@giesselmann &lt;https://github.com/giesselmann&gt;`__ 3.`@olgabot &lt;https://github.com/olgabot&gt;`__ 4.`@OliverVoogd &lt;https://github.com/OliverVoogd&gt;`__ 5.`@gmat &lt;https://github.com/gmat&gt;`__.. |Documentation Status| image:: https://readthedocs.org/projects/bamnostic/badge/?version=latest   :target: https://bamnostic.readthedocs.io/en/latest/?badge=latest.. |Conda Version| image:: https://img.shields.io/conda/vn/conda-forge/bamnostic.svg   :target: https://anaconda.org/conda-forge/bamnostic.. |PyPI version| image:: https://badge.fury.io/py/bamnostic.svg   :target: https://badge.fury.io/py/bamnostic.. |Maintainability| image:: https://api.codeclimate.com/v1/badges/d7e36e72f109c598c86d/maintainability   :target: https://codeclimate.com/github/betteridiot/bamnostic/maintainability.. |status| image:: http://joss.theoj.org/papers/9952b35bbb30ca6c01e6a27b80006bd8/status.svg   :target: http://joss.theoj.org/papers/9952b35bbb30ca6c01e6a27b80006bd8.. |DOI| image:: https://zenodo.org/badge/121782433.svg   :target: https://zenodo.org/badge/latestdoi/121782433.. |License| image:: https://img.shields.io/badge/License-BSD%203--Clause-blue.svg   :target: https://github.com/betteridiot/bamnostic/blob/master/LICENSE.. |Build Status TravisCI| image:: https://travis-ci.org/betteridiot/bamnostic.svg?branch=master   :target: https://travis-ci.org/betteridiot/bamnostic.. |Build status Appveyor| image:: https://ci.appveyor.com/api/projects/status/y95q02gkv3lgmlf4/branch/master?svg=true   :target: https://ci.appveyor.com/project/betteridiot/bamnostic/branch/master.. |noarch| image:: https://img.shields.io/circleci/project/github/conda-forge/bamnostic-feedstock/master.svg?label=noarch   :target: https://circleci.com/gh/conda-forge/bamnostic-feedstock.. |Downloads| image:: http://pepy.tech/badge/bamnostic   :target: http://pepy.tech/project/bamnostic.. |Conda Downloads| image:: https://img.shields.io/conda/dn/conda-forge/bamnostic.svg   :target: https://anaconda.org/conda-forge/bamnostic</longdescription>
</pkgmetadata>