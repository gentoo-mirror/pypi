<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/safe-cli.svg)](https://badge.fury.io/py/safe-cli)[![Build Status](https://github.com/safe-global/safe-cli/actions/workflows/ci.yml/badge.svg)](https://github.com/safe-global/safe-cli/actions/workflows/ci.yml)[![Coverage Status](https://coveralls.io/repos/github/safe-global/safe-cli/badge.svg?branch=master)](https://coveralls.io/github/safe-global/safe-cli?branch=master)![Python 3.9](https://img.shields.io/badge/Python-3.9-blue.svg)![Python 3.10](https://img.shields.io/badge/Python-3.10-blue.svg)[![Docker Image Version (latest semver)](https://img.shields.io/docker/v/safeglobal/safe-cli?label=Docker&amp;sort=semver)](https://hub.docker.com/r/safeglobal/safe-cli)# Safe-CLICommand line utility for **Safe** contracts. Use it to manage your **Safe** easily from the command line## Using with dockerIf you have **Docker** installed on your system, you can just run:```bashdocker run -it safeglobal/safe-cli safe-creator```for creating Safesor```bashdocker run -it safeglobal/safe-cli safe-cli```to run the actual **safe-cli**## Installing**Python &gt;= 3.7** is required. **Python 3.10** is recommended.```bashpip3 install -U safe-cli```## Using```bashsafe-cli &lt;checksummed_safe_address&gt; &lt;ethereum_node_url&gt;```Then you should be on the prompt and see information about the Safe, like the owners, version, etc.Next step would be loading some owners for the Safe. At least `threshold` owners need to be loaded to do operationson the Safe and at least one of them should have funds for sending transactions.There are 2 operation modes:- **blockchain**: The default mode, transactions are sent to blockchain.- **tx-service**: Use `tx-service` command to enable it. Transactions are sent to the Safe Transaction Service (if available on the network), so you will be able to see it on the Safe web interface/mobile apps. At least one signer is needed to send transactions to the service. Txs are **not executed**.Loading owners is not needed if you just want to do `read-only` operations.To load owners:```&gt; load_cli_owners &lt;account_private_key&gt;Loaded account 0xab...cd with balance=123 etherSet account 0xab..cd as default sender of txs```You can also load owners from an environment variable. Before running the `safe-cli`:```bashexport MY_PRIVATE_KEY=YOUR_EOA_PRIVATE_KEY```Then:```&gt; load_cli_owners MY_PRIVATE_KEYLoaded account 0xab...cd with balance=123 etherSet account 0xab..cd as default sender of txs```To check the loaded owners:```&gt; show_cli_owners```To unload an owner:```&gt; unload_cli_owners &lt;ethereum_checksummed_address&gt;```## Operations currently supported:- `send_custom &lt;address&gt; &lt;value-wei&gt; &lt;data-hex-str&gt; [--delegate] [--safe-nonce &lt;int&gt;]`:Sends a custom transaction from the Safe to a contract. If `--delegate` is set a `delegatecall`will be triggered.- `send_ether &lt;address&gt; &lt;value-wei&gt; [--safe-nonce &lt;int&gt;]`:Sends ether from the Safe to another account- `send_erc20 &lt;address&gt; &lt;token_address&gt; &lt;value&gt; [--safe-nonce &lt;int&gt;]`:Send ERC20 token from the Safe to another account- `approve_hash &lt;keccak-hexstr-hash&gt; &lt;sender-address&gt;`: Approves a `safe-tx-hash` for the provided sender address.  Sender private key must be loaded first.- `add_owner &lt;address&gt;`: Adds a new owner `address` to the Safe.- `remove_owner &lt;address&gt;`: Removes an owner `address` from the Safe.- `change_threshold &lt;integer&gt;`: Changes the `threshold` of the Safe.- `enable_module &lt;address&gt;`: Enable module `address`- `disable_module &lt;address&gt;`: Disable module `address`- `change_fallback_handler &lt;address&gt;`: Updates the fallback handler to be `address`. Supported by Safes with `version &gt;= v1.1.0`. **WARNING: DON'T USETHIS IF YOU DON'T KNOW WHAT YOU ARE DOING. ALL YOUR FUNDS COULD BE LOST**- `change_guard &lt;address&gt;`: Updates the guard to be `address`. Supported by Safes with `version &gt;= v1.3.0`. **WARNING: DON'T USETHIS IF YOU DON'T KNOW WHAT YOU ARE DOING. ALL YOUR FUNDS COULD BE LOST**- `change_master_copy &lt;address&gt;`: Updates the master copy to be `address`. It's used to update the Safe. **WARNING: DON'T USETHIS IF YOU DON'T KNOW WHAT YOU ARE DOING. ALL YOUR FUNDS COULD BE LOST**- `update`: Updates the Safe to the latest version (if you are on a known network like `Goerli` or `Mainnet`).- `update_to_l2 &lt;address&gt;`: Updates a v1.1.1/v1.3.0/v1.4.1 non L2 Safe to a L2 Safe supported by Safe Wallet UI.The migration contract address needs to be provided.It can be found [here](https://github.com/safe-global/safe-contracts/blob/main/contracts/libraries/SafeToL2Migration.sol).Nonce for the Safe must be 0 and supported versions are v1.1.1, v1.3.0 and v1.4.1.**WARNING: DON'T USE THIS IF YOU DON'T KNOW WHAT YOU ARE DOING. ALL YOUR FUNDS COULD BE LOST**Operations on `tx-service` mode, requires a Safe Transaction Service working on the network(Mainnet, Gnosis Chain, Goerli, Polygon...):- `balances`: Returns a list of balances for ERC20 tokens and ether.- `history`: History of multisig transactions (including pending).- `execute-tx &lt;safe-tx-hash&gt;`: Execute a pending tx with enough signatures.- `sign-tx &lt;safe-tx-hash&gt;`: Sign a tx with the loaded owners for the provided `SafeTxHash`.- `batch-txs &lt;safe-nonce&gt; &lt;safe-tx-hash&gt; [ &lt;safe-tx-hash&gt; ... ]`: Batch transactions into one MultisigTransaction using the provided `safe-nonce`. **Any safe-tx can be used**: transactions from other Safes, transactionsalready executed, transactions pending for execution... Only limitation is that- **transactions from other networks cannot be used**. Batching order will follow the same order of the`safe-tx-hashes` provided.- `get_delegates`: Returns a list of delegates for the Safe.- `add_delegate &lt;address&gt; &lt;label&gt; &lt;signer-address&gt;`: Adds a new delegate `address` to the Safe.- `remove_delegate &lt;address&gt; &lt;signer-address&gt;`: Removes a delegate `address` from the Safe.- `drain &lt;address&gt;`: Sends all ether and ERC20 funds to the provided account.If the information in the information bar is outdated or there's any problem you can force the `safe-cli` to updatethe information about the Safe using:```&gt; refresh```## Ledger moduleLedger module is an optional feature of safe-cli to sign transactions with the help of [ledgereth](https://github.com/mikeshultz/ledger-eth-lib) library based on [ledgerblue](https://github.com/LedgerHQ/blue-loader-python).To enable, safe-cli must be installed as follows:```pip install safe-cli[ledger]```When running on Linux, make sure the following rules have been added to `/etc/udev/rules.d/`:```commandlineSUBSYSTEMS==&quot;usb&quot;, ATTRS{idVendor}==&quot;2c97&quot;, ATTRS{idProduct}==&quot;0000&quot;, MODE=&quot;0660&quot;, TAG+=&quot;uaccess&quot;, TAG+=&quot;udev-acl&quot; OWNER=&quot;&lt;UNIX username&gt;&quot;SUBSYSTEMS==&quot;usb&quot;, ATTRS{idVendor}==&quot;2c97&quot;, ATTRS{idProduct}==&quot;0001&quot;, MODE=&quot;0660&quot;, TAG+=&quot;uaccess&quot;, TAG+=&quot;udev-acl&quot; OWNER=&quot;&lt;UNIX username&gt;&quot;SUBSYSTEMS==&quot;usb&quot;, ATTRS{idVendor}==&quot;2c97&quot;, ATTRS{idProduct}==&quot;0004&quot;, MODE=&quot;0660&quot;, TAG+=&quot;uaccess&quot;, TAG+=&quot;udev-acl&quot; OWNER=&quot;&lt;UNIX username&gt;&quot;```Safe-cli Ledger commands:- `load_ledger_cli_owners [--legacy-accounts] [--derivation-path &lt;str&gt;]`: show a list of the first 5 accounts (--legacy-accounts search using ledger legacy derivation) or load an account from provided derivation path.**NOTE**: before signing anything ensure that the data showing on your ledger is the same as the safe-cli data.## Creating a new SafeUse `safe-creator &lt;node_url&gt; &lt;private_key&gt; --owners &lt;checksummed_address_1&gt; &lt;checksummed_address_2&gt; --threshold &lt;uint&gt; --salt-nonce &lt;uint256&gt;`.Example:```safe-creator https://goerli.infura.io/v3/token $PRIVATE_KEY --owners 0x848EF06Bb9d1bc79Bb3B04b7Ea0e251C6E788d7c --threshold 1```## DemoFor this demo, `PRIVATE_KEY` environment variable was set to a _EOA_ private key (owner of a a previously created and outdated Safe)and `ETHEREUM_NODE_URL` to a http goerli node.At first, Safe is updated to the last version and then `123 Wei` are sent to the owner of the Safe (it could be any other address).**Be careful when using `update` command, as it can leave your Safe funds stuck. Safe CLI is still a beta**[![asciicast](https://asciinema.org/a/346692.svg)](https://asciinema.org/a/346692)## Use custom contracts**Safe-cli** comes with the official Safe contract addresses deployed on Mainnet, Rinkeby, Kovan and Goerliconfigured by default. If you want to use your own you can edit the file `safe_cli/safe_addresses.py`Be careful when modifying these addresses, the funds in a Safe can get stuck if an invalid address it's used when updatingto an invalid Safe Master Copy.## Recovery Safe Deployment GuideThis guide will walk you through the process of recreating a Safe with the same address on the desired network.### Recreate Safe 1.3.0 or 1.1.1To recreate a Safe (version 1.3.0 or 1.1.1), you'll need the following essential data::- The `Singleton` address- The `ProxyFactory` address- The `FallbackHandler` address- The `Owners` addresses with which Safe was created- The `SaltNonce` value- The `Threshold` value- RPC node provider for the target chain.- The private-key of deployer addressThe necessary addresses can be collected from [safe-deployments](https://github.com/safe-global/safe-deployments/tree/main/src/assets) and the salt nonce from the Safe creation transaction.**WARNING**: Ensure that the `Singleton`, `ProxyFactory`, and `FallbackHandler` are deployed in the target chain in the same addresses as the origin chain.To recreate the Safe is necessary execute `safe-creator` as follows:```commandlinesafe-creator --owners &lt;owners-addresses&gt; --safe-contract &lt;singleton-address&gt;--callback-handler &lt;fallback-handler-address&gt; --proxy-factory &lt;proxy-factory-address&gt;--threshold &lt;threshold-value&gt; --salt-nonce &lt;salt-nonce-value&gt; &lt;url-rpc-node&gt;  &lt;deployer-private-key&gt;```The Safe should have been successfully recreated with the same address on the target chain. If not, double-check the data collected from the transaction and ensure that all the necessary contracts are deployed in the chain.### Migrate a Safe from Non L2 to L2If you've recreated a Safe from a L1 network (like mainnet) on a L2 network, our services will not be able to index them as for L1 we use trace based indexing and for L2 events indexing, and L1 Safe singleton does not emmit events.To address this, you'll need to update it to the L2 singleton with command `update_to_l2`  or consider transferring the funds to a new Safe on L2 that you control with `drain` command.For detailed instructions on running these commands, please refer to the [Operations currently supported](#Operations-currently-supported) section for more information.## Safe contracts- [Safe contracts](https://github.com/safe-global/safe-contracts)- [Safe contracts deployment info and addreses](https://github.com/safe-global/safe-deployments/tree/main/src/assets)## Setting up for developingIf you miss something and want to send us a PR:```bashgit clone https://github.com/safe-global/safe-cli.gitcd safe-clistat venv 2&gt;/dev/null || python3 -m venv venvsource venv/bin/activate &amp;&amp; pip install -r requirements-dev.txtpre-commit install -f```## Contributors- [Pedro Arias Ruiz](https://github.com/AsiganTheSunk)- [Uxío Fuentefría](https://github.com/uxio0)- [Moisés Fernández](https://github.com/moisses89)</longdescription>
</pkgmetadata>