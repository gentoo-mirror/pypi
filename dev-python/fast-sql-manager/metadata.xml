<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IntroduçãoEssa biblioteca foi criada como uma forma de abstração das operações mais simplesde um banco de dados MySQL.# InícioApós fazer a instalação com o pip install fast_sql_manageré necessário que você importe a classe correspondente ao bancoque deseja manipular.```pythonfrom fast_sql_manager.implementations.mysql import MySQLRepository```ou```pythonfrom fast_sql_manager.implementations.sqlite import SQLiteRepository```Ao importar a classe você pode instância-la ouusa-la diretamente preenchendo os parâmetros necessários.```pythondb = Repository(    host='localhost',     port=3307,     user='root',     passwd='root',     db_name='sys')```# Métodos ## createDataBasePara criar um Banco de Dados basta inserir o primeiroparâmetro `db_name` com o nome do Banco que deseja Criar.```pythondb.create_database('nome_do_banco')```## createTablePara criar um tabela é necessário informar apenas o nomeno parâmetro `name` através  de uma String.Para informar como devem ser as colunas o parâmetro`coluns` deve ser um dicionário, onde a chave seria o nome da coluna e o valor os atributos da coluna.```pythondb.create_table(    name='minha_tabela',     columns={'id': 'int not null primary key auto_increment'})```## selectAllPara selecionar todos os dados de uma tabela é necessário apenas preencher através de umastring o parâmetro `table_name` para informar qual tabela você deseja puxar o dados```pythondb.select_all(table_name='nome_da_tabela') ```## insertPara inserir os dados em uma tabela é necessário informar o nome da tabela no `table_name` como String, as colunas de deseja inserir no `table_columns` como uma Lista e os valores que deseja inserir no `insert_values` como uma Tupla.```pythondb.insert(    table_name='pessoas',    tb_columns=['cpf', 'nome', 'idade'],     insert_values=('000000000', 'João', 19))```## updatePara realizar o update informe o parâmetro tb_name como String.O parâmetro `set` deve ser um Dicionário, sendo a chave a coluna que deseja alterar,e o valor sendo o novo valor dessa coluna.O parâmetro `where` também é um Dicionário contendo seu primeiro par de chave e valor com a coluna que desejarealizar o filtro where e o valor que a coluna deve conter.```pythondb.update(    table_name='tab_pessoa',    set={'nome': 'Joãozinho', 'idade': 17},    where={'cpf': '123456789'})```É possível também inserir dentro do `where` operadores condicionais, porém o parametro muda um poucopois é necessário dentro do dicionário informar qual a condicional que deseja usar.```pythondb.update(    tb_name='tab_pessoa',    set={'nome': 'Joãozinho', 'idade': 17},    where={        'cpf': {'value':'123456789', 'condicional': 'and'},         'name': 'João',    })```## deletePara realizar o update informe o parâmetro `tb_name` como String.O parâmetro where também é um Dicionário contendo seu primeiro par de chave e valor com a coluna que desejarealizar o filtro where e o valor que a coluna deve conter.```python    db.delete('tab_pessoa', {'cpf': '123456789'})```É possível também inserir dentro do where operadores condicionais, porém o parâmetro muda um poucopois é necessário dentro do dicionário informar qual a condicional que deseja usar.```pythondb.delete(    tb_name='tab_pessoa',    where={        'cpf': {'value':'123456789', 'condicional': 'and'},         'name': 'João',        })```</longdescription>
</pkgmetadata>