<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GitPlusA JupyterLab plugin for version control of Jupyter notebooks. It can,- Push GitHub commits from JupyterLab- Create GitHub pull request from JupyterLab## Demo### Create GitHub Pull Request from JupyterLab[![Create GitHub Pull Request from JupyterLab](https://github.com/ReviewNB/jupyterlab-gitplus/raw/master/images/PR_thumbnail_v2.png)](https://www.youtube.com/watch?v=yuvLgIjCq48)### Push GitHub Commits from JupyterLab[![Push GitHub Commits from JupyterLab](https://github.com/ReviewNB/jupyterlab-gitplus/raw/master/images/Commit_thumbnail_v1.png)](https://www.youtube.com/watch?v=bmca1EBNpvI)## Requirements* JupyterLab 2.x or 3.x* Git (running `git` on cmdline or terminal should work)## Install#### 1. Install Required Packages```bashpip install --upgrade jupyterlab_gitplusjupyter labextension install @reviewnb/jupyterlab_gitplusjupyter serverextension enable --py jupyterlab_gitplus```#### 2. Setup GitHub tokenTokens are required to make API calls to GitHub to push commits and create pull requests.- Head over [developer settings on GitHub](https://github.com/settings/tokens). Click &quot;Generate New Token&quot;.- Select `repo` scope. Click &quot;Generate Token&quot;. Copy the generated token.- If `~/.jupyter/jupyter_notebook_config.py` **does not exist** then create one by running `jupyter notebook --generate-config`- Open you Jupyter config file `~/.jupyter/jupyter_notebook_config.py` &amp; paste the token as shown below```bashc.GitPlus.github_token = '&lt;your-github-access-token&gt;'```After installation, start JupyterLab normally &amp; you should see &quot;Git-Plus&quot; as a new menu item at the top.## FAQ&lt;details&gt;   &lt;summary&gt;Where is pull request (PR) opened in case of forked repositories?&lt;/summary&gt;  &lt;p&gt;      If your repository is forked from another repository (parent) then PR will be created on parent repository. &lt;/p&gt;&lt;/details&gt;&lt;details&gt;   &lt;summary&gt; Which is the &lt;tt&gt;base&lt;/tt&gt; branch used in a pull request? &lt;/summary&gt;  &lt;p&gt;    `base` branch in a PR is a branch against which your changes are compared and ultimately merged. We use repository's default    branch (usually called `master`) as `base` branch of PR. We use parent repository's default branch as `base` in case of forked repo. &lt;/p&gt;&lt;/details&gt;&lt;details&gt;   &lt;summary&gt;Which is the &lt;tt&gt;head&lt;/tt&gt; branch used in a pull request?&lt;/summary&gt;  &lt;p&gt;      `head` branch in a PR is a branch which contains the latest changes you've made. We create a new branch (e.g. `gitplus-xyz123`) as `head` branch. It only contains changes from the files you wish to include in the PR.  &lt;/p&gt;&lt;/details&gt;&lt;details&gt;   &lt;summary&gt;How can I edit a pull request opened with GitPlus?&lt;/summary&gt;  &lt;p&gt;You can head over to GitHub and edit the PR metadata to your liking. For pushing additional file changes to the same PR, 1. Copy the branch name from GitHub UI (e.g. `gitplus-xyz123`) 2. Checkout that branch locally3. Make the file changes you want4. Use push commit functionality from GitPlus to push new changes&lt;/p&gt;&lt;/details&gt;&lt;details&gt;   &lt;summary&gt;Is GitPlus tied to ReviewNB in any way?&lt;/summary&gt;  &lt;p&gt;      No. GitPlus is it's own open source project. The only connection with ReviewNB is that at the end of PR/Commit creation, GitPlus shows ReviewNB URL along with GitHub URL. You can safely ignore these URLs if you don't want to use ReviewNB.    It's is useful to see [visual notebook diffs](https://uploads-ssl.webflow.com/5ba4ebe021cb91ae35dbf88c/5ba93ded243329a486dab26e_sl-code%2Bimage.png) on ReviewNB instead of hard to read [JSON diffs](https://uploads-ssl.webflow.com/5ba4ebe021cb91ae35dbf88c/5c24ba833c78e57d6b8c9d09_Screenshot%202018-12-27%20at%204.43.09%20PM.png) on GitHub. [ReviewNB](https://www.reviewnb.com/) also facilitates discussion on notebooks cells.&lt;/p&gt;&lt;/details&gt;&lt;details&gt;   &lt;summary&gt;What if I don't have a ReviewNB account?&lt;/summary&gt;  &lt;p&gt;      No problem, everything in GitPlus will still work fine. Only the ReviewNB URLs won't work for you.&lt;p&gt;&lt;/details&gt;&lt;details&gt;   &lt;summary&gt;Can we use GitPlus with Gitlab/BitBucket or any other platforms?&lt;/summary&gt;  &lt;p&gt;      No, currently we only support repositories on GitHub.&lt;p&gt;&lt;/details&gt;## MotivationOur aim is to make notebooks a first class entity in Data science &amp; ML teams. We can achieve this by making notebooks play well with existing tools &amp; processes instead of building expensive proprietary platforms. Other projects in this direction are,- [ReviewNB](https://www.reviewnb.com/) - Code review tool for Jupyter notebooks- [treon](https://github.com/reviewnb/treon) - Easy to use test framework for Jupyter notebooks## RoadmapIn future GitPlus will be able to,- Pull changes from GitHub- Switch/create branches locally- Resolve notebook merge conflicts (without messing with underlying JSON)## Development### InstallThe `jlpm` command is JupyterLab's pinned version of[yarn](https://yarnpkg.com/) that is installed with JupyterLab. You may use`yarn` or `npm` in lieu of `jlpm` below.```bash# Clone the repo to your local environment &amp; install dependencies# Link your development version of the extension with JupyterLabjupyter labextension link .# Run jupyterlab in watch mode in one terminal tabjupyter lab --watch# Watch the GitPlus source directory in another terminal tabjlpm watch# If you make any changes to server side extension (.py files) then reinstall it from sourcepip install .```## ContributingIf you see any problem, open an issue or send a pull request. You can write to support@reviewnb.com for any questions.</longdescription>
</pkgmetadata>