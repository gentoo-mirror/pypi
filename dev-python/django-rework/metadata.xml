<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Rework[![Downloads](https://pepy.tech/badge/django-rework)](https://pepy.tech/project/django-rework)[![PyPI](https://img.shields.io/pypi/v/django-rework)](https://pypi.org/project/django-rework/)[![Python](https://img.shields.io/pypi/pyversions/django)](https://www.python.org)[![Django](https://img.shields.io/pypi/djversions/django-rework)](https://www.djangoproject.com)[![License](https://img.shields.io/pypi/l/django-rework)](https://opensource.org/licenses/MIT)Rapid develop framework base on Django, integrated with Django-Ninja.# _Installation_ &amp; Cli commands## Requirements- Python &gt;= 3.8- Django &gt;= 3.2- Django REST framework &gt;=3.13,&lt;4.0## Install django-rework```bashpip install django-rework```## Generic CLI Commands### Start a new project```bash# It will create project in current dir# eg: initialize a new project named `pony`rework init pony```### Add build-in contrib Apps```bashrework add users```### Add deployment configurations```bashrework deploy --init```### Deploy to test or production```bashrework deploy  # or 'fab -H web1 deploy'```# _Core docs_## Custom exceptionsThe exception handler must also be configured in your settings, using the EXCEPTION_HANDLER setting key. For example:```pythonREST_FRAMEWORK = {    'EXCEPTION_HANDLER': 'rework.core.views.exception_handler'}```Use build-in custom exceptions:```pythonfrom rework.core.exceptions import ValidateErrorValidateError(    detail='You do not have permission to perform this action.',     code='permission_denied',)```ðŸ¥­ [Build-in custom exceptions](rework/core/exceptions.py)# _App docs_| App      | Description | docs in English | ç®€ä½“ä¸­æ–‡æ–‡æ¡£  || -------- | ----------- | --------------- | ----------- || users    | Users system       | [users.md](docs/users.md) | [users_cn.md](docs/users_cn.md) |# _DevOps Fabric scripts_ ## Setup hosts`django-rework` deal with DevOps using `Fabric`. You should add hosts configurations in `fabfile.py`.```pythonimport osfrom rework.core.devops.hosts import loads# The first argument `default` is host alias# `user` is optional, default value is `root`# `envs` is the server support deploy environments# `exclude_components` is optional, it's been used in `fab setup_server`loads(    'default', {        'host': 'your-server-ip',        'port': 22,        'user': 'root',        'connect_kwargs': {            'password': 'server-password',        },        'envs': ['test', 'prod'],        'exclude_components': ['redis'],    })# Using SSH keyloads(    'web1', {        'host': 'your-server-ip',        'connect_kwargs': {            'key_filename': os.path.join(os.path.abspath('.'), '.deploy/private.pem'),        },    })```You can change host alias as you like: `web1` etc.```bashfab -H web1 deploy```if not `-H` provided, the default alias will use according the order below:1. environment name: `dev`, `test`, `prod`2. `default`## Deploy environmentsBy default, environments is `dev`, `test`, `prod`, every environment name is a generic fabric tasks.```bash# deploy to `test` environmentfab test deploy```If you want to update requirements, you should add arguments `-r` or `--requirements_update````bashfab test deploy -r```# _Code Format_Code format using Google çš„ `yapf`ï¼Œrecommend to install `yapf` globallyï¼š```bash# install yapf using pip in python3$ python3 -m pip install yapf# find and create soft link to `/usr/local/bin/yapf`# find yapf execute file $ which yapf# (/usr/local/python3.7/bin/yapf) possible location$ ln -s /usr/local/python3.7/bin/yapf /usr/local/bin/yapf```</longdescription>
</pkgmetadata>