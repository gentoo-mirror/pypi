<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HuggingSoundHuggingSound: A toolkit for speech-related tasks based on [HuggingFace's](https://huggingface.co/) tools.I have no intention of building a very complex tool here. I just wanna have an easy-to-use toolkit for my speech-related experiments.I hope this library could be helpful for someone else too :)# Requirements- Python 3.7+# Installation```console$ pip install huggingsound```# How to use it?I'll try to summarize the usage of this toolkit. But many things will be missing from the documentation below. I promise to make it better soon.For now, you can open an issue if you have some questions or look at the source code to see how it works.You can check more usage examples in the repository `examples` folder.## Speech recognitionFor speech recognition you can use any CTC model hosted on the Hugging Face Hub. You can find some available models [here](https://huggingface.co/models?pipeline_tag=automatic-speech-recognition).### Inference```pythonfrom huggingsound import SpeechRecognitionModelmodel = SpeechRecognitionModel(&quot;jonatasgrosman/wav2vec2-large-xlsr-53-english&quot;)audio_paths = [&quot;/path/to/sagan.mp3&quot;, &quot;/path/to/asimov.wav&quot;]transcriptions = model.transcribe(audio_paths)print(transcriptions)# transcriptions format (a list of dicts, one for each audio file):# [#  {#   &quot;transcription&quot;: &quot;extraordinary claims require extraordinary evidence&quot;, #   &quot;start_timestamps&quot;: [100, 120, 140, 180, ...],#   &quot;end_timestamps&quot;: [120, 140, 180, 200, ...],#   &quot;probabilities&quot;: [0.95, 0.88, 0.9, 0.97, ...]# },# ...]## as you can see, not only the transcription is returned but also the timestamps (in milliseconds) # and probabilities of each character of the transcription.```### Inference (boosted by a language model)```pythonfrom huggingsound import SpeechRecognitionModel, KenshoLMDecodermodel = SpeechRecognitionModel(&quot;jonatasgrosman/wav2vec2-large-xlsr-53-english&quot;)audio_paths = [&quot;/path/to/sagan.mp3&quot;, &quot;/path/to/asimov.wav&quot;]# The LM format used by the LM decoders is the KenLM format (arpa or binary file).# You can download some LM files examples from here: https://huggingface.co/jonatasgrosman/wav2vec2-large-xlsr-53-english/tree/main/language_modellm_path = &quot;path/to/your/lm_files/lm.binary&quot;unigrams_path = &quot;path/to/your/lm_files/unigrams.txt&quot;# We implemented three different decoders for LM boosted decoding: KenshoLMDecoder, ParlanceLMDecoder, and FlashlightLMDecoder# On this example, we'll use the KenshoLMDecoder# To use this decoder you'll need to install the Kensho's ctcdecode first (https://github.com/kensho-technologies/pyctcdecode)decoder = KenshoLMDecoder(model.token_set, lm_path=lm_path, unigrams_path=unigrams_path)transcriptions = model.transcribe(audio_paths, decoder=decoder)print(transcriptions)```### Evaluation```pythonfrom huggingsound import SpeechRecognitionModelmodel = SpeechRecognitionModel(&quot;jonatasgrosman/wav2vec2-large-xlsr-53-english&quot;)references = [    {&quot;path&quot;: &quot;/path/to/sagan.mp3&quot;, &quot;transcription&quot;: &quot;extraordinary claims require extraordinary evidence&quot;},    {&quot;path&quot;: &quot;/path/to/asimov.wav&quot;, &quot;transcription&quot;: &quot;violence is the last refuge of the incompetent&quot;},]evaluation = model.evaluate(references)print(evaluation)# evaluation format: {&quot;wer&quot;: 0.08, &quot;cer&quot;: 0.02}```### Fine-tuning```pythonfrom huggingsound import TrainingArguments, ModelArguments, SpeechRecognitionModel, TokenSetmodel = SpeechRecognitionModel(&quot;facebook/wav2vec2-large-xlsr-53&quot;)output_dir = &quot;my/finetuned/model/output/dir&quot;# first of all, you need to define your model's token set# however, the token set is only needed for non-finetuned models# if you pass a new token set for an already finetuned model, it'll be ignored during trainingtokens = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;'&quot;]token_set = TokenSet(tokens)# define your train/eval datatrain_data = [    {&quot;path&quot;: &quot;/path/to/sagan.mp3&quot;, &quot;transcription&quot;: &quot;extraordinary claims require extraordinary evidence&quot;},    {&quot;path&quot;: &quot;/path/to/asimov.wav&quot;, &quot;transcription&quot;: &quot;violence is the last refuge of the incompetent&quot;},]eval_data = [    {&quot;path&quot;: &quot;/path/to/sagan2.mp3&quot;, &quot;transcription&quot;: &quot;absence of evidence is not evidence of absence&quot;},    {&quot;path&quot;: &quot;/path/to/asimov2.wav&quot;, &quot;transcription&quot;: &quot;the true delight is in the finding out rather than in the knowing&quot;},]# and finally, fine-tune your modelmodel.finetune(    output_dir,     train_data=train_data,     eval_data=eval_data, # the eval_data is optional    token_set=token_set,)```# Troubleshooting- If you are having trouble when loading MP3 files: `$ sudo apt-get install ffmpeg`# Want to help?See the [contribution guidelines](https://github.com/jonatasgrosman/huggingsound/blob/master/CONTRIBUTING.md)if you'd like to contribute to HuggingSound project.You don't even need to know how to code to contribute to the project. Even the improvement of our documentation is an outstanding contribution.If this project has been useful for you, please share it with your friends. This project could be helpful for them too.If you like this project and want to motivate the maintainers, give us a :star:. This kind of recognition will make us very happy with the work that we've done with :heart:You can also [sponsor me](https://github.com/sponsors/jonatasgrosman) :heart_eyes:# CitationIf you want to cite the tool you can use this:```bibtex@misc{grosman2022huggingsound,  title={{HuggingSound: A toolkit for speech-related tasks based on Hugging Face's tools}},  author={Grosman, Jonatas},  howpublished={\url{https://github.com/jonatasgrosman/huggingsound}},  year={2022}}```</longdescription>
</pkgmetadata>