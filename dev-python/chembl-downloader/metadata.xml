<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;    chembl_downloader&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.org/project/chembl_downloader&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/chembl_downloader&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/chembl_downloader&quot;&gt;        &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/chembl_downloader&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/cthoyt/chembl_downloader/blob/main/LICENSE&quot;&gt;        &lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/chembl_downloader&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://zenodo.org/badge/latestdoi/390113187&quot;&gt;        &lt;img src=&quot;https://zenodo.org/badge/390113187.svg&quot; alt=&quot;DOI&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/psf/black&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; alt=&quot;Code style: black&quot; /&gt;    &lt;/a&gt;    &lt;a href='https://chembl-downloader.readthedocs.io/en/latest/?badge=latest'&gt;        &lt;img src='https://readthedocs.org/projects/chembl-downloader/badge/?version=latest' alt='Documentation Status' /&gt;    &lt;/a&gt;&lt;/p&gt;Don't worry about downloading/extracting ChEMBL or versioning - just use ``chembl_downloader`` to write code that knowshow to download it and use it automatically.Install with:```bash$ pip install chembl-downloader```Full technical documentation can be found on[ReadTheDocs](https://chembl-downloader.readthedocs.io). Tutorials can be foundin Jupyter notebooks in the [notebooks/](notebooks/) directory of therepository.## Database Usage### Download A Specific Version```pythonimport chembl_downloaderpath = chembl_downloader.download_extract_sqlite(version='28')```After it's been downloaded and extracted once, it's smart and does not need to download again. It gets storedusing [`pystow`](https://github.com/cthoyt/pystow) automatically in the `~/.data/chembl`directory.We'd like to implement something such that it could load directly into SQLite from the archive, but it appears this isa [paid feature](https://sqlite.org/purchase/zipvfs).### Download the Latest VersionYou can modify the previous code slightly by omitting the `version` keywordargument to automatically find the latest version of ChEMBL:```pythonimport chembl_downloaderpath = chembl_downloader.download_extract_sqlite()```The `version` keyword argument is available for all functions in this package (e.g., including`connect()`, `cursor()`, and `query()`), but will be omitted below for brevity.### Automate ConnectionInside the archive is a single SQLite database file. Normally, people manually untar this folder then do something withthe resulting file. Don't do this, it's not reproducible!Instead, the file can be downloaded and a connection can be opened automatically with:```pythonimport chembl_downloaderwith chembl_downloader.connect() as conn:    with conn.cursor() as cursor:        cursor.execute(...)  # run your query string        rows = cursor.fetchall()  # get your results```The `cursor()` function provides a convenient wrapper around this operation:```pythonimport chembl_downloaderwith chembl_downloader.cursor() as cursor:    cursor.execute(...)  # run your query string    rows = cursor.fetchall()  # get your results```### Run a query and get a pandas DataFrameThe most powerful function is `query()` which builds on the previous `connect()` function in combinationwith [`pandas.read_sql`](https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html)to make a query and load the results into a pandas DataFrame for any downstream use.```pythonimport chembl_downloadersql = &quot;&quot;&quot;SELECT    MOLECULE_DICTIONARY.chembl_id,    MOLECULE_DICTIONARY.pref_nameFROM MOLECULE_DICTIONARYJOIN COMPOUND_STRUCTURES ON MOLECULE_DICTIONARY.molregno == COMPOUND_STRUCTURES.molregnoWHERE molecule_dictionary.pref_name IS NOT NULLLIMIT 5&quot;&quot;&quot;df = chembl_downloader.query(sql)df.to_csv(..., sep='\t', index=False)```Suggestion 1: use `pystow` to make a reproducible file path that's portable to other people's machines(e.g., it doesn't have your username in the path).Suggestion 2: RDKit is now pip-installable with `pip install rdkit-pypi`, which means most users don't have to muckaround with complicated conda environments and configurations. One of the powerful but understated tools in RDKit isthe [rdkit.Chem.PandasTools](https://rdkit.org/docs/source/rdkit.Chem.PandasTools.html)module.### Access an RDKit supplier over entries in the SDF dumpThis example is a bit more fit-for-purpose than the last two. The `supplier()` function makes sure that the latest SDFdump is downloaded and loads it from the gzip file into a `rdkit.Chem.ForwardSDMolSupplier`using a context manager to make sure the file doesn't get closed until after parsing is done. Like the previousexamples, it can also explicitly take a `version`.```pythonfrom rdkit import Chemimport chembl_downloaderwith chembl_downloader.supplier() as suppl:    data = []    for i, mol in enumerate(suppl):        if mol is None or mol.GetNumAtoms() &gt; 50:            continue        fp = Chem.PatternFingerprint(mol, fpSize=1024, tautomerFingerprints=True)        smi = Chem.MolToSmiles(mol)        data.append((smi, fp))```This example was adapted from Greg Landrum's RDKit blog poston [generalized substructure search](https://greglandrum.github.io/rdkit-blog/tutorial/substructure/2021/08/03/generalized-substructure-search.html).## SDF Usage### Get an RDKit substructure libraryBuilding on the `supplier()` function, the `get_substructure_library()`makes the preparation of a [substructure library](https://www.rdkit.org/docs/cppapi/classRDKit_1_1SubstructLibrary.html)automated and reproducible. Additionally, it caches the results of the build,which takes on the order of tens of minutes, only has to be done once and futureloading from a pickle object takes on the order of seconds.The implementation was inspired by Greg Landrum's RDKit blog post,[Some new features in the SubstructLibrary](https://greglandrum.github.io/rdkit-blog/tutorial/substructure/2021/12/20/substructlibrary-search-order.html).The following example shows how it can be used to accomplish some of the firsttasks presented in the post:```pythonfrom rdkit import Chemimport chembl_downloaderlibrary = chembl_downloader.get_substructure_library()query = Chem.MolFromSmarts('[O,N]=C-c:1:c:c:n:c:c:1')matches = library.GetMatches(query)```## Morgan Fingerprints Usage### Get the Morgan Fingerprint fileChEMBL makes a file containing pre-computed 2048 bit radius 2 morganfingerprints for each molecule available. It can be downloaded using:```pythonimport chembl_downloaderpath = chembl_downloader.download_fps()```The `version` and other keyword arguments are also valid for this function.### Load fingerprints with [`chemfp`](https://chemfp.com/)The following wraps the `download_fps` function with `chemfp`'s fingerprintloader:```pythonimport chembl_downloaderarena = chembl_downloader.chemfp_load_fps()```The `version` and other keyword arguments are also valid for this function.More information on working with the `arena` object can be found[here](https://chemfp.readthedocs.io/en/latest/using-api.html#working-with-a-fingerprintarena).## Extras### Store in a Different PlaceIf you want to store the data elsewhere using `pystow` (e.g., in [`pyobo`](https://github.com/pyobo/pyobo)I also keep a copy of this file), you can use the `prefix` argument.```pythonimport chembl_downloader# It gets downloaded/extracted to # ~/.data/pyobo/raw/chembl/29/chembl_29/chembl_29_sqlite/chembl_29.dbpath = chembl_downloader.download_extract_sqlite(prefix=['pyobo', 'raw', 'chembl'])```See the `pystow` [documentation](https://github.com/cthoyt/pystow#%EF%B8%8F-configuration) on configuring the storagelocation further.The `prefix` keyword argument is available for all functions in this package (e.g., including`connect()`, `cursor()`, and `query()`).### Download via CLIAfter installing, run the following CLI command to ensure it and send the path to stdout```bash$ chembl_downloader```Use `--test` to show two example queries```bash$ chembl_downloader --test```## ContributingPlease read the contribution guidelines in [CONTRIBUTING.md](.github/CONTRIBUTING.md).If you'd like to contribute, there's a submodule called `chembl_downloader.queries`where you can add a useful SQL queries along with a description of what it does for easyimporting and reuse.## Statistics and Compatibility`chembl-downloader` is compatible with all versions of ChEMBL. However, some files arenot available for all versions. For example, the SQLite version of the database was firstadded in release 21 (2015-02-12).|   ChEMBL Version | Release Date   ||------------------|----------------||               31 | 2022-07-12     ||               30 | 2022-02-22     ||               29 | 2021-07-01     ||               28 | 2021-01-15     ||               27 | 2020-05-18     ||               26 | 2020-02-14     ||               25 | 2019-02-01     ||             24_1 | 2018-05-01     ||               24 |                ||               23 | 2017-05-18     ||             22_1 | 2016-11-17     ||               22 |                ||               21 | 2015-02-12     ||               20 | 2015-02-03     ||               19 | 2014-07-2333   ||               18 | 2014-04-02     ||               17 | 2013-09-16     ||               16 | 2013-055555-15 ||               15 | 2013-01-30     ||               14 | 2012 -07-18    ||               13 | 2012-02-29     ||               12 | 2011-11-30     ||               11 | 2011-06-07     ||               10 | 2011-06-07     ||               09 | 2011-01-04     ||               08 | 2010-11-05     ||               07 | 2010-09-03     ||               06 | 2010-09-03     ||               05 | 2010-06-07     ||               04 | 2010-05-26     ||               03 | 2010-04-30     ||               02 | 2009-12-07     ||               01 | 2009-10-28     |</longdescription>
</pkgmetadata>