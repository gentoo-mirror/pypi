<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Build Status](https://github.com/EDITD/kubetools/actions/workflows/run_tests.yml/badge.svg?branch=master)[![Pypi Version](https://img.shields.io/pypi/v/kubetools.svg)](https://pypi.org/project/kubetools/)[![Python Versions](https://img.shields.io/pypi/pyversions/kubetools.svg)](https://pypi.org/project/kubetools/)# KubetoolsKubetools is a tool and processes for developing and deploying microservices to Kubernetes. Say that:+ You have **a bunch of repositories, each containing one or more microservices**+ You want to **deploy each of these microservices into one or more Kubernetes clusters**+ You want a **single configuration file per project** (repository)And you would like:+ **Development setup should be near-instant** - and _not_ require specific K8s knowledge+ **Deployment to production can be automated** - and integrated with existing CI toolingKubetools provides the tooling required to achieve this, by way of two CLI tools:+ **`ktd`**: generates _100% local_ development environments using Docker/docker-compose+ **`kubetools`**: deploys projects to Kubernetes, handling any changes/jobs as requiredBoth of these use a single configuration file, `kubetools.yml`, for example a basic `django` app:```yamlname: my-appcontainerContexts:  django_app:    build:      registry: my-registry.net      dockerfile: Dockerfile    dev:      volumes:        - ./:/opt/django_appupgrades:  - name: Upgrade database    containerContext: django_app    command: [./manage.py, migrate, --noinput]tests:  - name: Nosetests    containerContext: django_app    command: [./manage.py, test]deployments:  my-app-webserver:    serviceAccountName: webserver    secrets:      secret-volume:        mountPath: /mnt/secrets-store        secretProviderClass: webserver-secrets    containers:      uwsgi:        command: [uwsgi, --ini, /etc/uwsgi.conf]        containerContext: django_app        ports:          - 80        dev:          command: [./manage.py, runserver, '0.0.0.0:80']dependencies:  mariadb:    containers:      mariadb:        image: mariadb:v10.4.1cronjobs:  my-cronjob:    batch-api-version: 'batch/v1beta1'  # Must add if k8s version &lt; 1.21+    schedule: &quot;*/1 * * * *&quot;    concurrency_policy: &quot;Replace&quot;    containers:      hello:        image: busybox        command: [/bin/sh, -c, date; echo Hello from the Kubernetes cluster]```With this in your current directory, you can now:```sh# Bring up a local development environment using docker-composektd up# Deploy the project to a Kubernetes namespacekubetools deploy my-namespace```## Installing```shpip install kubetools```## ConfigurationUsers can configure some aspects of `kubetools`. The configuration folder location depends on theoperating system of the user. See the[Click documentation](https://click.palletsprojects.com/en/8.1.x/api/#click.get_app_dir)to find the appropriate one for you. Note that we use the &quot;POSIX&quot; version (for example`~/.kubetools/` on Unix systems).* `kubetools.conf` contains key-value settings, see [`settings.py`](kubetools/settings.py) for the  possible settings and their meaning.* `scripts/` can contain scripts to be made available to `ktd script` command## DevelopingInstall the package in editable mode, with the dev extras:```shpip install -e .[dev]```## Releasing (admins/maintainers only)* Update [CHANGELOG](CHANGELOG.md) to add new version and document it* In GitHub, create a new release  * Title the release `v&lt;version&gt;` (for example `v1.2.3`)  * Select to create a new tag `v&lt;version&gt;` against `master` branch  * Copy changes in the release from `CHANGELOG.md` into the release description  * [GitHub Actions](https://github.com/EDITD/kubetools/actions) will package the release and    publish it to [Pypi](https://pypi.org/project/kubetools/)## Mounting K8s SecretsWe assume that `ServiceAccount` and `SecretProviderClass` are already created (if needed), before deploying the project with kubetools.</longdescription>
</pkgmetadata>