<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;HAPPI&lt;/h1&gt;&lt;div align=&quot;center&quot;&gt;  &lt;strong&gt;Heuristic Access to Positioning of Photon Instrumentation&lt;/strong&gt;&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#motivation&quot;&gt;Motivation&lt;/a&gt; •  &lt;a href=&quot;#features&quot;&gt;Features&lt;/a&gt; •  &lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt; •  &lt;a href=&quot;#basic-usage&quot;&gt;Basic Usage&lt;/a&gt; •  &lt;a href=&quot;https://pcdshub.github.io/happi/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;## MotivationLCLS endstations deal with dynamic sets of instrumentation. Information likeports, triggers and aliases are all important for operation, but hard to managewhen spread across a multitude of applications. **Happi** solves this problemby creating a single access point for all the metadata required to interfacewith LCLS instrumentation. Using a flexible `container` based system Happiallows the enforcement of specific conventions while still permitting flexibledata entry where required.## Features* Manage information for specific device types using containers* Input arbitrary metadata associated with a specific device* Flexible backend support for multiple types of databases; MongoDB, JSON e.t.c* Easily search database entries for device/s that match a set of keys## InstallationInstall the most recent tagged build: `conda install happi -c pcds-tag -c conda-forge`Install the most recent development build: `conda install happi -c pcds-dev - conda-forge`## Basic UsageThe `happi.Client` is your main interface to the underlying device database.You have the choice of either creating your database backend by hand or usingthe environment variable `$HAPPI_BACKEND` to create a persistent reference toyour database type. By default, the `Client` assumes a `JSON` file database:```python   import happi   client = happi.Client(path='path/to/my_db.json')```If your database has entries, you should either be able to search by keyvariables for individual or multiple devices.```python   client.find_device(name=&quot;My Device&quot;)   client.search(stand='DG2')```Once you have the device you want, you can edit the information just as youwould any other Python object. View the device information in aconvenient table using `.show_info`:```python   dev = client.find_device(name=&quot;My Device&quot;)   dev.z = 432.1   dev.show_info()```#### Output```text+--------------+----------------------+| EntryInfo    | Value                |+--------------+----------------------+| active       | True                 || beamline     | LCLS                 || name         | My Device            || parent       | None                 || prefix       | MY:DEV:01            || stand        | None                 || system       | None                 || z            | 432.10000            |+--------------+----------------------+```After you are satisfied with your changes, push the information back to thedatabase using the `.save` method. If this is a new device, you will have tocall `Client.add_device`. Before the entry is modified in the database, the`happi.Client` confirms that the new changes meet all the requirementsspecified by the container.```python   dev.save()```</longdescription>
</pkgmetadata>