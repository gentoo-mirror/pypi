<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-eventtools is a lightweight library designed to handle repeatingand one-off event occurrences for display on a website.`CircleCI &lt;https://circleci.com/gh/gregplaysguitar/django-eventtools&gt;`__`codecov &lt;https://codecov.io/gh/gregplaysguitar/django-eventtools&gt;`__`Latest Version &lt;https://pypi.python.org/pypi/django-eventtools/&gt;`__Installation------------Download the source from https://pypi.python.org/pypi/django-eventtools/and run ``python setup.py install``, or:::   &gt; pip install django-eventtoolsDjango 1.8 or higher is required.Setup-----Given the following models:.. code:: python   from django.db import models   from eventtools.models import BaseEvent, BaseOccurrence   class MyEvent(BaseEvent):       title = models.CharField(max_length=100)   class MyOccurrence(BaseOccurrence):       event = models.ForeignKey(MyEvent)Usage-----Create a sample event &amp; occurrences::   &gt;&gt;&gt; from datetime import datetime   &gt;&gt;&gt; from myapp.models import MyEvent   &gt;&gt;&gt; event = MyEvent.objects.create(title='Test event')   &gt;&gt;&gt; once_off = MyOccurrence.objects.create(           event=event,           start=datetime(2016, 1, 1, 12, 0),           end=datetime(2016, 1, 1, 2, 0))   &gt;&gt;&gt; christmas = MyOccurrence.objects.create(           event=event,           start=datetime(2015, 12, 25, 7, 0),           end=datetime(2015, 12, 25, 22, 0),           repeat='RRULE:FREQ=YEARLY')   &gt;&gt;&gt; daily = MyOccurrence.objects.create(           event=event,           start=datetime(2016, 1, 1, 7, 0),           end=datetime(2016, 1, 1, 8, 0),           repeat='RRULE:FREQ=DAILY')Event and Occurrence instances, and their associated querysets, allsupport the ``all_occurrences`` method, which takes two optionalarguments - ``from_date`` and ``to_date``, which may be dates ordatetimes. ``from_date`` and ``to_date`` default to ``None``. The methodreturns a python generator yielding tuples in the format``(start, end, instance)`` - for example:::   &gt;&gt;&gt; MyEvent.objects.all().all_occurrences()   &gt;&gt;&gt; event.all_occurrences(from_date=datetime(2015, 1, 1, 10, 0))   &gt;&gt;&gt; event.occurrence_set.all().all_occurrences(to_date=date(2016, 1, 1))   &gt;&gt;&gt; occurrence.all_occurrences(from_date=date(2016, 1, 1),                                  to_date=date(2016, 12, 31))``instance`` is an instance of the corresponding BaseOccurrencesubclass.A ``next_occurrence`` method is also provided, taking the samearguments, but returning a single occurrence tuple.::   &gt;&gt;&gt; event.next_occurrence()   &gt;&gt;&gt; event.next_occurrence(from_date=date(2016, 1, 1))The method ``first_occurrence`` also returns a single occurrence tuple,but takes no arguments.Queryset filtering~~~~~~~~~~~~~~~~~~Event and Occurrence querysets can be filtered, but due to uncertaintywith repetitions, ``from_date`` filtering is only an approximation(whereas ``to_date`` filtering is accurate). If you need a querysetfiltered exactly, pass ``exact=True`` - this will filter using generatedoccurrences but still return a queryset - but be careful with this as itmay be very slow and/or CPU-hungry. For example::   &gt;&gt;&gt; MyEvent.objects.for_period(from_date=date(2015, 1, 1),                                to_date=date(2015, 12, 31))   &gt;&gt;&gt; event.occurrence_set.for_period(from_date=date(2015, 1, 1), exact=True)Sorting querysets~~~~~~~~~~~~~~~~~Event and Occurrence querysets can also be sorted by their nextoccurrence using the ``sort_by_next`` method. By default this sortsinstances by their first occurrence; the optional ``from_date`` argumentwill sort by the next occurrence after ``from_date``. For example::   &gt;&gt;&gt; MyEvent.objects.all().sort_by_next()   &gt;&gt;&gt; event.occurrence_set.for_period(from_date=date(2015, 1, 1)) \   &gt;&gt;&gt;      .sort_by_next(date(2015, 1, 1))Note that this method returns a sorted list, not a queryset.Custom repeat intervals-----------------------Occurrences can repeat using any interval that can be expressed as an`rrulestr &lt;https://labix.org/python-dateutil#head-e987b581aebacf25c7276d3e9214385a12a091f2&gt;`__.To customise the available options, set ``EVENTTOOLS_REPEAT_CHOICES`` inyour django settings. The default value is.. code:: python   EVENTTOOLS_REPEAT_CHOICES = (       (&quot;RRULE:FREQ=DAILY&quot;, 'Daily'),       (&quot;RRULE:FREQ=WEEKLY&quot;, 'Weekly'),       (&quot;RRULE:FREQ=MONTHLY&quot;, 'Monthly'),       (&quot;RRULE:FREQ=YEARLY&quot;, 'Yearly'),   )Set ``EVENTTOOLS_REPEAT_CHOICES = None`` to make repeat a plain-textfield.Occurrence cancellations or modifications-----------------------------------------Cancelling or modifying a single occurrence repetition is not currentlysupported, but can be implemented by overriding a couple of methods. Forexample, the following allows cancellations or one-off modifications tothe start time of a repetition:.. code:: python   from eventtools.models import (BaseEvent, BaseOccurrence, default_naive)   from django.db import models   class MyEvent(BaseEvent):       pass   class MyEventOccurrence(BaseOccurrence):       event = models.ForeignKey(MyEvent)       overrides = models.ManyToManyField('MyEventOccurrenceOverride', blank=True)       def get_repeater(self):           rule = super().get_repeater()  # gets rruleset from parent method           ruleset.rrule(rule)           for override in self.overrides.all():               ruleset.exdate(default_naive(override.start))  # remove occurrence               if override.modified_start:  # reschedule occurrence if defined                   ruleset.rdate(default_naive(override.modified_start))           return ruleset   class MyEventOccurrenceOverride(models.Model):       start = models.DateTimeField()  # must match targeted repetition exactly       # new start, leave blank to cancel       modified_start = models.DateTimeField(blank=True, null=True)  Note that start times must match exactly, so if the MyEventOccurrencestart is changed, any previously-matching overrides will no longer beapplied.Running tests-------------Use tox (https://pypi.python.org/pypi/tox):::   &gt; pip install tox   &gt; cd path-to/django-eventtools   &gt; tox</longdescription>
</pkgmetadata>