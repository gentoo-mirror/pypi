<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====================== pytest-kwparametrize======================Alternate syntax for ``@pytest.mark.parametrize`` with test cases as dictionariesand default value fallbacks.The problem===========Tests parametrized using ``@pytest.mark.parametrize`` can easily become hard to readwhen the number of parameters grows large. For example::    @pytest.mark.parametrize(        &quot;a, b, c, d, e, f, expect&quot;,        [            (3, &quot;one&quot;, 4.0, 0x01, 0o5, 9e0, 0b10,),            (6, &quot;five&quot;, 3.0, 0x05, 0o10, 9e0, 0b111,),        ],    )    def test_my_func(a, b, c, d, e, f, expect):        assert my_func(a, b, c, d, e, f) == expectThe solution============``pytest-kwparametrize`` uses dictionaries instead of tuples for test cases.This way every parameter is always labeled and more easily identified by the reader.Also, test function parameters aren't declared separatelyas with ``@pytest.mark.parametrize``,and test cases don't need to be enclosed in a list::    @pytest.mark.kwparametrize(        dict(a=3, b=&quot;one&quot;, c=4.0, d=0x01, e=0o5, f=9e0, expect=0b10,),        dict(a=6, b=&quot;five&quot;, c=3.0, d=0x05, e=0o10, f=9e0, expect=0b111,),    )    def test_my_func(a, b, c, d, e, f, expect):        assert my_func(a, b, c, d, e, f) == expectSee examples below for additional features.Examples========Basic syntax with no default values::    @pytest.mark.kwparametrize(        dict(a=0, b=0, expect=0),        dict(a=1, b=0, expect=1),    )    def test_my_func(a, b, expect):        assert my_func(a, b) == expectDefining a default value for a parameter so it can be omitted from test cases::    @pytest.mark.kwparametrize(        dict(a=0, expect=0),        dict(a=1, expect=1),        dict(a=0, b=1, expect=0),        dict(a=1, b=1, expect=2),        b=0,    )    def test_my_func(a, b, expect):        assert my_func(a, b) == expectYou can also provide the test cases as an iterable (e.g. list, tuple, generator)just as with ``@pytest.mark.parametrize``::    @pytest.mark.kwparametrize(        [            dict(a=0, b=0, expect=0),            dict(a=1, b=0, expect=1),        ]    )    def test_my_func(a, b, expect):        assert my_func(a, b) == expectDefault values can also be paassed as a dictionaryusing the ``defaults=`` keyword argument(here all parameters have a default)::    @pytest.mark.kwparametrize(        dict(),        dict(a=1, expect=1),        dict(b=1),        dict(a=1, b=1, expect=2),        defaults=dict(a=0, b=0, expect=0),    )    def test_my_func(a, b, expect):        assert my_func(a, b) == expectThe marker works with fixtures and Pytest's built-in keyword arguments::    @pytest.mark.kwparametrize(        # test cases:        dict(),        dict(filename=&quot;special.txt&quot;, expect=1),        dict(content=&quot;special content&quot;),        # default parameter values:        filename=&quot;dummy.txt&quot;,        content=&quot;dummy content&quot;,        expect=42,        # example of a Pytest built-in keyword argument:        ids=[&quot;with defaults&quot;, &quot;special filename&quot;, &quot;speial content&quot;],    )    def test_my_func(tmpdir, filename, content, expect):        filepath = (tmpdir / filename)        filepath.write(content)        assert my_func(filepath) == expectContributors âœ¨===============See README.rst_ for the list of contributors.This project follows the all-contributors_ specification.Contributions of any kind are welcome!.. _README.rst: https://github.com/akaihola/pytest-kwparametrize/README.rst.. _emoji key: https://allcontributors.org/docs/en/emoji-key.. _all-contributors: https://allcontributors.org</longdescription>
</pkgmetadata>