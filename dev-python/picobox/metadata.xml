<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Picobox=======.. image:: https://img.shields.io/pypi/v/picobox.svg   :target: https://pypi.python.org/pypi/picobox.. image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg   :target: https://saythanks.io/to/ikalnytskyiPicobox is opinionated dependency injection framework designed to be clean,pragmatic and with Python in mind. No complex graphs, no implicit injections,no type bindings â€“ just picoboxes, and explicit demands!Why?----Because we usually want to decouple our code and Python lack of clean andpragmatic solutions (even third parties).Features--------* Support both values and factories.* Support scopes (e.g. singleton, threadlocal, contextvars).* Push boxes on stack, and use the top one to access values.* Thread-safe.* Lightweight (~500 LOC including scopes).* Zero dependencies.* Pure Python.* Annotated with types.Quickstart----------First.. code:: bash    $ [sudo] python -m pip install picoboxand then.. code:: python    import picobox    import requests    @picobox.pass_(&quot;conf&quot;)    @picobox.pass_(&quot;requests&quot;, as_=&quot;session&quot;)    def get_resource(uri, session, conf):        return session.get(conf[&quot;base_uri&quot;] + uri)    box = picobox.Box()    box.put(&quot;conf&quot;, {&quot;base_uri&quot;: &quot;http://example.com&quot;})    box.put(&quot;requests&quot;, factory=requests.Session, scope=picobox.threadlocal)    with picobox.push(box):        get_resource(&quot;/resource&quot;, requests.Session(), {})        get_resource(&quot;/resource&quot;, requests.Session())        get_resource(&quot;/resource&quot;)Links-----* Documentation: https://picobox.readthedocs.io* Source: https://github.com/ikalnytskyi/picobox* Bugs: https://github.com/ikalnytskyi/picobox/issues</longdescription>
</pkgmetadata>