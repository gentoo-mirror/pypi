<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Install`pip install ez_yaml`# Usage```pythonimport ez_yaml# to_string(obj, settings={})ez_yaml.to_string({&quot;thing&quot;: 1, &quot;abc&quot;: [ 1,2,3 ]})# to_object(file_path, settings={})# to_object(string   , settings={})ez_yaml.to_object(string='''thing: 1abc:    - 1    - 2    - 3''')# to_file(obj, file_path, settings={})ez_yaml.to_file(    {&quot;thing&quot;: 1, &quot;abc&quot;: [ 1,2,3 ]},    file_path=&quot;./my_file.yaml&quot;,)```# Settings```pythonimport ez_yaml# to_string(obj, settings={})ez_yaml.to_string(    {&quot;thing&quot;: 1, &quot;abc&quot;: [ 1,2,3 ]},    settings=dict(        # these are the default values        safe=False,        width=None,        allow_duplicate_keys=True,        explicit_start=False,        explicit_end=False,        explict_null=True,        indent_mapping=3,        indent_sequence=2,        offset=0,    ))# to_file(obj, file_path, settings={})ez_yaml.to_file(    {&quot;thing&quot;: 1, &quot;abc&quot;: [ 1,2,3 ]},    file_path=&quot;./my_file.yaml&quot;,    settings=dict(        width=9999999999999,        explicit_start=True,        explicit_end=True,    ))```# Custom Yaml Tags Example```pyfrom ez_yaml import yaml@yaml.register_classclass YourCustomClass:    yaml_tag = &quot;!python/YourCustomClass&quot;        def __init__(self, something):        self.something = something        @classmethod    def from_yaml(cls, constructor, node):        # will print true        print(node.value.startswith(&quot;blah blah YourCustomClass(something:&quot;))        # node.value is the python-value        return YourCustomClass(something=node.value[len(&quot;blah blah YourCustomClass(something:&quot;)-1:-1])        @classmethod    def to_yaml(cls, representer, object_of_this_class):        representation = f&quot;blah blah YourCustomClass(something:{object_of_this_class.something})&quot;        # ^ needs to be a string (or some other yaml-primitive)        return representer.represent_scalar(            tag=cls.yaml_tag,            value=representation,            style=None,            anchor=None        )data = [    YourCustomClass(['blah blah blah']),    YourCustomClass({&quot;thing&quot;: &quot;lorem ipsum&quot;}),]# will get generated with a tagoutput = ez_yaml.to_string(data)# will detect tag and convert it back to a YourCustomClassyaml.load(output)```</longdescription>
</pkgmetadata>