<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>In most circumstances, this project is superceded byhttps://github.com/tartley/rerun2 a ten-line Bash script which uses inotifyinstead of polling, and gracefully handles commands containing shell aliasesand the like. However, rerun2:* Won't work outside of Linuxland.* Doesn't see filesystem events on mounts in a VM.* Doesn't take any command-line args to modify behaviour.so this original 'rerun' still has its uses.Install=======::    pip install rerunUsage=====::    rerun [--help|-h] [--verbose|-v] [--ignore|-i=&lt;file&gt;] [--version] &lt;command&gt;Where::    &lt;command&gt;           Command to execute as a single arg, i.e. put it inside                        double quotes, or else spaces and other special                        characters should be escaped.    --help|-h           Show this help message and exit.    --ignore|-i=&lt;file&gt;  File or directory to ignore. Any directories of the                        given name (and their subdirs) are excluded from the                        search for changed files. Any modification to files of                        the given name are ignored. The given value is                        compared to basenames, so for example, &quot;--ignore=def&quot;                        will skip the contents of directory &quot;./abc/def/&quot; and                        will ignore file &quot;./ghi/def&quot;. Can be specified multiple                        times.    --interactive, -I   Run the command in an interactive shell. This allows                        the use of shell aliases and functions, but is slower,                        less reliable and noisier on stdout/stderr, because it                        sources ~/.bashrc and the like before running the                        command. Not available on Windows.    --verbose|-v        Display the names of changed files before the command                        output.    --version           Show version number and exit.Example=======::    rerun --verbose --ignore=myoutputdir &quot;python -m unittest mymodule&quot;This will run your tests whenever you save your source code in the currentdir or its subdirectories, but it won't rerun the tests a second time when .pyofiles get updated as a result of executing the tests, nor when our programwrites to myoutputdir.This is handy for seeing the new test results in another console window afteryou hit 'save' in your editor, without having to change window focus.Description===========Rerun detects changes to files by polling file modification times once persecond. It looks in the current directory and all its subdirectories. Ondetecting any changes, it clears the terminal and reruns the given command.It always ignores directories called .svn, .git, .hg, .bzr, build and dist.Additions to this list can be given using --ignore.It always ignores files ending with .pyc or .pyo. This isn't currentlyuser-overrideable.While polling sounds sub-optimal, I've yet to encounter a project largeenough that rerun's resource usage was even noticeable. (Plus, see discussionof 'watchdog' below.)Dependencies============Tested on MacOSX, Ubuntu, WindowsXP, Windows 7.Tested on Python 2.6, 2.7 and 3.4.Installing using 'pip' will also install any other Python packages that arerequired. (see setup.py 'install_requires')Hacking=======To install development dependencies:on Python 2.6:    pip install -r requirements_dev_2.6.txtOn later versions of Python:    pip install -r requirements_dev.txtThese will also install the runtime dependencies (i.e. requirements.txt,which just references the 'install_requires' field in setup.py) so you onlyever need to install one requirements file.To run tests:    make testSee the content of Makefile for a cheatsheet of other commonly used commandsI use while working on rerun.TODO====Print a timestamp at the top of the screen, so user can see when the commandwas last run.Let user press a key to force a rerun.Should this just be broken down into a command that waits for filesystem eventsand exits? Arguably calling &quot;command&quot; from the shell is many times easier thancalling it from within &quot;rerun&quot;. Then 'rerun' could be written simply as a Bashfunction. Other bash functions could use the same pattern to iterate afterwaiting for a keypress, or a sleep (to poll.)Known Problems==============See issues at https://github.com/tartley/rerun/issuesAlternatives============PyPI package 'watchdog' is a cross-platform library for handling file-systemevents, which includes script 'watchmedo', which looks like a more serious andheavy-duty version of 'Rerun'.https://pypi.python.org/pypi/watchdogHowever, I can't get watchmedo to work for my primary use case, which isre-running tests when files are saved by Vim. This is due to the way Vim writesto temporary files and then moves the temp file to overwrite data atomically.Vim thus guarantees that the user never loses data, but also fails to generatethe correct FS events that watchmedo is looking for.Thanks======Huge thanks to StackOverflow user 'rici', for explaining how to interpretshell aliases and functions in the given command using an interactive shell,and then how to retrieve the lost terminal once that shell terminates.http://stackoverflow.com/questions/25099895/from-python-start-a-shell-that-can-interpret-functions-and-aliasesThanks to Bitbucket user sgourley for reporting, chasing up and evenoffering to fix issue #1, an egregious bug in ignoring directories, beforeI finally spotted the error. Thanks for the prods!The idea came from the Bash command 'watch', and inspiration for thisimplementation came from an old blog post by Jeff Winkler, whos websitehttp://jeffwinkler.net seems to have now died.Changes=======1.0.28    Add .cache (pytest) and 'node_modules' to the default ignored dirs.1.0.27    Deleted version, I messed up the PyPI upload.1.0.26    Prevent crash when a watched file gets deleted.1.0.25    Documentation tweaks.1.0.24    Last version broke rerun on Windows. Fixed now.    (module 'pwd', which we started using to identify the user's default shell,    doesn't exist on Windows.) So '-I' or '--interactive' won't work on    Windows, but probably the distinction between a regular shell and an    interactive one is meaningless there anyway.1.0.23    Running the given command using a *non*-interactive shell is now the    default behaviour. Running an interactive shell for each command invocation    requires sourcing .bashrc and the like, and hence is is slow, noisy on    stdout, and error-prone. For example, virtualenvwrapper often fails to    initialise properly and generates lots of output about it. An interactive    shell can be requested when required (i.e. when the command to be run    contains shell aliases or functions) with '--interactive' or '-I'.1.0.22    No longer crashes when a broken symlink exists under the cwd.1.0.21    Run user's given command in an interactive shell, so that shell aliases    and functions are correctly interpreted.1.0.20    (First release since migration to github)    Fix to run under Python 3 again, specifically tested on 3.4.1.0.19    Now expects commands to be a single arg (i.e. spaces etc should be    escaped, or the whole command quoted) thus allowing rerun to work on    composite commands, such as pipelines.1.0.18    Now runs on Python 2.6, and is tested on Python 3.3.Contact=======:Documentation &amp; download:    http://pypi.python.org/pypi/rerun/:Souce code and issues:    https://github.com/tartley/rerun:Contact the author:    Jonathan Hartley, email: tartley at domain tartley.com, Twitter: @tartley.</longdescription>
</pkgmetadata>