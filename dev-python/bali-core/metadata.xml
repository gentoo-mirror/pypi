<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/bali-framework/bali/master/docs/img/bali.png&quot; alt='bali framework' /&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;üèù Simplify Cloud Native Microservices development base on FastAPI and gRPC.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pepy.tech/project/bali-core&quot;&gt;        &lt;img src=&quot;https://pepy.tech/badge/bali-core&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/bali-core/&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/bali-core&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/bali-framework/bali/actions/workflows/python-ci.yml&quot;&gt;      &lt;img src=&quot;https://github.com/bali-framework/bali/actions/workflows/python-ci.yml/badge.svg&quot; /&gt;    &lt;/a&gt;&lt;/p&gt;---**Documentation**: [https://bali-framework.github.io/bali/](https://bali-framework.github.io/bali/)---# BaliBali is a framework integrate FastAPI and gRPC. If you want to provide both HTTP and RPC, it can improve development efficiency.It gives you the following features:* A simple layout of file structure rule.* Integrated `SQLAlchemy` ORM and provide generic model methods.* Utilities of transform models to Pydantic schemas.* GZipMiddleware included and GZip decompression enabled.* üçª **Resource** layer to write code once support both HTTP and RPC## Who's using bali framework&lt;a href=&quot;https://www.360shuke.com/&quot;&gt;    &lt;img width=&quot;200&quot; src=&quot;https://raw.githubusercontent.com/bali-framework/bali/master/docs/img/cases/qfin.png&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.xinfei.cn/&quot;&gt;    &lt;img width=&quot;200&quot; src=&quot;https://raw.githubusercontent.com/bali-framework/bali/master/docs/img/cases/xinfei.png&quot; /&gt;&lt;/a&gt;## Requirements    1. Python 3.7+    2. FastAPI 0.63+    3. grpcio&gt;=1.32,&lt;1.50## Install```bashpip install bali-core # Bali framework pip install bali-cli # Bali command line tool ```## Project structure layout## Application Create Application```pythonapp = Bali() # Initialized App```Launch ```bash# With bali-cli bali run httpbali run rpcbali run eventpython main.py run --http  # launch HTTP in development mode python main.py run --rpc  # launch RPC python main.py run --event  # launch Event ```More usage of `Application`: [example](examples/main.py)## Database ### connect```pythonfrom bali import db# connect to database when app started# db is a sqla-wrapper instancedb.connect('DATABASE_URI')  ```### Declarative mode with sqla-wrapper```pythonclass User(db.Model):    __tablename__ &quot;users&quot;    id = db.Column(db.Integer, primary_key=True)    ...db.create_all()db.add(User(...))db.commit()todos = db.query(User).all()```More convenient usage, ref to [SQLA-Wrapper](https://github.com/jpsca/sqla-wrapper)### Declare models inherit from convenient base models*BaseModel*```python# using BaseModelclass User(db.BaseModel):    __tablename__ &quot;users&quot;    id = db.Column(db.Integer, primary_key=True)    ...``````python# BaseModel's source code class BaseModel(db.Model):    __abstract__ = True    created_time = Column(DateTime(timezone=True), default=datetime.utcnow)    updated_time = Column(        DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow    )    is_active = Column(Boolean(), default=True)```### TransactionSQLA-wrapper default model behavior is auto commit, auto commit will be disabled with `db.transaction` context. ```pythonwith db.transaction():    item = Item.create(name='test1')```### OperatorsOperators provided `get_filters_expr` to transform filters (dict) to SQLAlchemy expressions.  ```pythonfrom bali.db.operators import get_filters_exprfrom models import Userusers = User.query().filter(*get_filters_expr(User, **filters)).all()```## Schema*model_to_schema*```python# generate pydantic schema from models# `User` is a db.Model or db.BaseModel instance from bali.schemas import model_to_schemaUserSchema = model_to_schema(User)```## Resource&lt;i&gt;New in version 2.0.&lt;/i&gt;Resource‚Äôs design borrows several key concepts from the REST architectural style.Inspired by `ViewSet` in Django REST Framework.Actions' name according [`Standard methods` in Google API design guide](https://cloud.google.com/apis/design/standard_methods) ### Generic HTTP/RPC ActionsGeneric HTTP/RPC support actions:|Action |Route |Method | RPC  | Description|--- |--- | --- | --- | ---|get |/{id} |GET |Get{Resource} |Get an existing resource matching the given id ||list |/ |GET |List{Resource} |Get all the resources ||create |/ |POST |Create{Resource} |Create a new resource ||update |/{id} |PATCH |Update{Resource} |Update an existing resource matching the given id ||delete |/{id} |DELETE |Delete{Resource} |Delete an existing resource matching the given id |Generic Actions examples:```python# 1. import `Resource` base classfrom bali.resources import Resource# 2. implementation actions inherited from Resourceclass GreeterResource(Resource):    schema = Greeter    @action()    def get(self, pk=None):        return [g for g in GREETERS if g.get('id') == pk][0]    @action()    def list(self, schema_in: ListRequest):        return GREETERS[:schema_in.limit]    @action()    def create(self, schema_in: schema):        return {'id': schema_in.id, 'content': schema_in.content}    @action()    def update(self, schema_in: schema, pk=None):        return {'id': pk, 'content': schema_in.content}    @action()    def delete(self, pk=None):        return {'id': pk, 'result': True}  # using `id` instand of `result````### Custom HTTP/RPC ActionsCustom actions also decorated by `@action`, but `detail` signature is required.```python@action(detail=False)def custom_action(self):    pass````detail` has no default value.&gt; `True` means action to single resource, url path is '/{resources}/{id}'.&gt; &gt; `False` means action set of resources, url path is '/{resources}'.&gt; ### Override HTTP ActionsIf the default HTTP action template is not satisfied your request, you can override HTTP actions.```python# Get the origin router router = GreeterResource.as_router()# Override the actions using the FastAPI normal way@router.get(&quot;/&quot;)def root():    return {&quot;message&quot;: &quot;Hello World&quot;}```&gt; More usage of `Resource`: [GreeterResource](examples/resources/greeter.py)### ModelResource&lt;i&gt;New in version 2.1.&lt;/i&gt;```pythonclass UserResource(ModelResource):    model = User    schema = UserSchema    filters = [        {'username': str},        {'age': Optional[str]},    ]  # yapf: disable    permission_classes = [IsAuthenticated]```## Service Mixin```python# import from bali.mixins import ServiceMixinclass Hello(hello_pb2_grpc.HelloServiceServicer, ServiceMixin):    pass```## Cache### Cache API```pythonfrom bali import cache# Usage example (API)# Read cache cache.get(key)# Set cache cache.set(key, value, timeout=10)```### cache memoize```python# Import the cache_memoize from bali core from bali import cache_memoize# Attach decorator to cacheable function with a timeout of 100 seconds.@cache_memoize(100)def expensive_function(start, end):    return random.randint(start, end)```## Utils**dateparser** [dateparser docs](https://dateparser.readthedocs.io/en/v1.0.0/)**MessageToDict/ParseDict**Optimized MessageToDict/ParseDict from `google.protobuf.js_format````pythonfrom bali.utils import MessageToDict, ParseDict```## Tests**gRPC service tests**```pythonfrom bali.tests import GRPCTestBasefrom service.demo import demo_service, demo_pb2, demo_pb2_grpcclass TestDemoRPC(GRPCTestBase):    server_class = demo_service.DemoService  # Provided service     pb2 = demo_pb2  # Provided pb2    pb2_grpc = demo_pb2_grpc  # Provided pb2 grpc    def setup_method(self):  # Pytest setup         pass    def teardown_method(self):  # Pytest teardown        pass    def test_demo(self):        pass```## Related Projects[![bali-cli](https://github-readme-stats.vercel.app/api/pin/?username=bali-framework&amp;repo=bali-cli)](https://github.com/bali-framework/bali-cli)[![cookiecutter-bali](https://github-readme-stats.vercel.app/api/pin/?username=bali-framework&amp;repo=cookiecutter-bali)](https://github.com/bali-framework/cookiecutter-bali)</longdescription>
</pkgmetadata>