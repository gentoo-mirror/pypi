<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-appconf==============.. image:: http://codecov.io/github/django-compressor/django-appconf/coverage.svg?branch=develop    :alt: Code Coverage    :target: http://codecov.io/github/django-compressor/django-appconf?branch=develop.. image:: https://secure.travis-ci.org/django-compressor/django-appconf.svg?branch=develop    :alt: Build Status    :target: http://travis-ci.org/django-compressor/django-appconfA helper class for handling configuration defaults of packaged Djangoapps gracefully... note::    This app precedes Django's own AppConfig_ classes that act as    &quot;objects [to] store metadata for an application&quot; inside Django's    app loading mechanism. In other words, they solve a related but    different use case than django-appconf and can't easily be used    as a replacement. The similarity in name is purely coincidental... _AppConfig: https://docs.djangoproject.com/en/stable/ref/applications/#django.apps.AppConfigOverview--------Say you have an app called ``myapp`` with a few defaults, which you wantto refer to in the app's code without repeating yourself all the time.``appconf`` provides a simple class to implement those defaults. Simply addsomething like the following code somewhere in your app files:.. code-block:: python    from appconf import AppConf    class MyAppConf(AppConf):        SETTING_1 = &quot;one&quot;        SETTING_2 = (            &quot;two&quot;,        ).. note::    ``AppConf`` classes depend on being imported during startup of the Django    process. Even though there are multiple modules loaded automatically,    only the ``models`` modules (usually the ``models.py`` file of your    app) are guaranteed to be loaded at startup. Therefore it's recommended    to put your ``AppConf`` subclass(es) there, too.The settings are initialized with the capitalized app label of where thesetting is located at. E.g. if your ``models.py`` with the ``AppConf`` classis in the ``myapp`` package, the prefix of the settings will be ``MYAPP``.You can override the default prefix by specifying a ``prefix`` attribute ofan inner ``Meta`` class:.. code-block:: python    from appconf import AppConf    class AcmeAppConf(AppConf):        SETTING_1 = &quot;one&quot;        SETTING_2 = (            &quot;two&quot;,        )        class Meta:            prefix = 'acme'The ``MyAppConf`` class will automatically look at Django's global settingsto determine if you've overridden it. For example, adding this to your site's``settings.py`` would override ``SETTING_1`` of the above ``MyAppConf``:.. code-block:: python    ACME_SETTING_1 = &quot;uno&quot;    Since django-appconf completes Django's global settings with its default values (like &quot;one&quot; above), the standard ``python manage.py diffsettings`` will show these defaults automatically.In case you want to use a different settings object instead of the default``'django.conf.settings'``, set the ``holder`` attribute of the inner``Meta`` class to a dotted import path:.. code-block:: python    from appconf import AppConf    class MyAppConf(AppConf):        SETTING_1 = &quot;one&quot;        SETTING_2 = (            &quot;two&quot;,        )        class Meta:            prefix = 'acme'            holder = 'acme.conf.settings'If you ship an ``AppConf`` class with your reusable Django app, it'srecommended to put it in a ``conf.py`` file of your app package andimport ``django.conf.settings`` in it, too:.. code-block:: python    from django.conf import settings    from appconf import AppConf    class MyAppConf(AppConf):        SETTING_1 = &quot;one&quot;        SETTING_2 = (            &quot;two&quot;,        )In the other files of your app you can easily make sure the settingsare correctly loaded if you import Django's settings object from thatmodule, e.g. in your app's ``views.py``:.. code-block:: python    from django.http import HttpResponse    from myapp.conf import settings    def index(request):        text = 'Setting 1 is: %s' % settings.MYAPP_SETTING_1        return HttpResponse(text)</longdescription>
</pkgmetadata>