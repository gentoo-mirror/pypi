<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-reversion-rest-frameworkA package for adding a django-reversion history endpoint to django-rest-framework ModelViewSet.## ConfigurationFollow the official website for the installation and the integration of django-reversion in your project, otherwise future steps won't work.You might need to enable the `ReversionMiddleware` for storing a version for each API change.&lt;br&gt;Follow the instructions [here](https://django-reversion.readthedocs.io/en/stable/middleware.html),you should add `'reversion.middleware.RevisionMiddleware'` to your `MIDDLEWARE` setting.### Using the HistoryModelViewSetThe `HistoryModelViewSet` extends django-rest-framework's `ModelViewSet` adding- a GET `history` action in the detail (`/my-model-url/&lt;pk&gt;/history/`)    displaying a list of all revisions of that specific record- a GET `version` action in the history detail (`/my-model-url/&lt;pk&gt;/history/&lt;version_pk&gt;/`)    displaying a specific revisions of that specific record- a GET `deleted` action in the list (`/my-model-url/deleted/`)    displaying a list of all deleted records- a POST `revert` action in the detail (`/my-model-url/&lt;pk&gt;/revert/&lt;version_pk&gt;/`)    allowing users to revert to a previous revision of the objectYou can use the `HistoryModelViewSet` in place of the `ModelViewSet`during viewsets definition.```pyfrom reversion_rest_framework.viewsets import HistoryModelViewSetclass MyModelViewSet(HistoryModelViewSet):    # ...```For advanced or selective implementation, you can use `reversion_rest_framework.mixins`.- `HistoryMixin` contains `history` and `version` actions- `DeletedMixin` contains only the `deleted` action- `ReadOnlyMixin` contains `history`, `version` and `deleted` actions- `RevertMixin` contains `history`, `version` and `revert` actions### Customizing the VersionSerializerThe `HistoryModelViewSet` comes up with actions using a `VersionSerializer`.&lt;br&gt;To customize the serializer with one of your own, you can use `version_serializer`.&lt;br&gt;For example, if you want to customize the `user` serializer inside a revision,you can use the following code:```pyfrom django.contrib.auth.models import Userfrom rest_framework import serializersfrom reversion.models import Revision, Versionfrom reversion_rest_framework.serializers import (    RevisionSerializer,    VersionSerializer,)from reversion_rest_framework.viewsets import HistoryModelViewSetclass UserSerializer(serializers.ModelSerializer):    class Meta:        model = User        fields = [&quot;id&quot;, &quot;username&quot;]class CustomRevisionSerializer(RevisionSerializer):    user = UserSerializer()class CustomVersionSerializer(VersionSerializer):    revision = CustomRevisionSerializer()class MyModelViewSet(HistoryModelViewSet):    version_serializer = CustomVersionSerializer    # ...```</longdescription>
</pkgmetadata>