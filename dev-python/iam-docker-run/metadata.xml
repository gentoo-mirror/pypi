<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>IAM-Docker-Run==============Run Docker containers within the context of an AWS IAM Role, and otherdevelopment workflow helpers.Motivation----------The goal is to run our application on our laptops in development in assimilar environment as possible to the production environment when theapplication runs in ECS or EKS, which would run under the task IAM rolewith permissions specific to that task.A shortcut sometimes taken by developers is to execute code locally withtheir personal IAM user which often has very high and broad privileges.Worse, those long lived credentials sometimes find themselves checkedinto source control as part of a docker-compose.yml file, etc.IAM-Docker-Run allows you to run your containers locally within thecontext of the IAM role you’ve created for your application. Thecredentials themselves are temporary, they are stored in a file in yoursystem’s temp path, and never wind up in source control.IAM-Docker-Run generates AWS temporary credentials and builds a lengthly``docker run`` command line statement, echoing it as it executes it soyou have transparency into the command it is running.**This is a development workflow tool, not designed to run productioncontainers.**A related effort is`IAM-Starter &lt;https://github.com/billtrust/iam-starter&gt;`__ which startsa local process (outside of Docker) in the context of an AWS IAM role.Installation------------.. code:: shell   pip install iam-docker-runBasic Example Usage-------------------Say you are developing a console application using AWS resources and arein your project’s root directory and want to execute your applicationusing your latest source code and the IAM role created for your project... code:: shell   iam-docker-run \       --image mycompany/myservice:latest \       --role role-myservice-taskYou can alternatively specify a local AWS profile, then the containerwill run with the credentials given by that role. This profile wouldhave to exist locally in your ``~/.aws/config`` file, which can becreated with ``aws configure --profile myprofile``... code:: shell   iam-docker-run \       --image mycompany/myservice:latest \       --profile myprofileOr you can specify a role and a profile. In this case the profileprovides the credentials necessary to assume the role... code:: shell   iam-docker-run \       --image mycompany/myservice:latest \       --role role-myservice-task \       --profile myprofileArguments and More Examples---------------------------Full argument list~~~~~~~~~~~~~~~~~~For a full list of arguments, run ``iam-docker-run -h``.Full Entrypoint~~~~~~~~~~~~~~~The Docker syntax for overriding an entrypoint with anything more thanone word can seem couterintuitive. With the Docker syntax, theentrypoint can only be the first command and all arguments to that areseparated out on the cmd, so if you want to run``python myapp.py --myarg test123``, then ``python`` is your entrypointand the rest go on your cmd, to produce a docker run statement like:.. code:: shell   docker run --entrypoint python mycompany/myimage myapp.py --myarg test123To make things easier, iam-docker-run provides the ``--full-entrypoint``argument, so you can use it like this:.. code:: shell   iam-docker-run \       --image mycompany/myimage \       --full-entrypoint &quot;python myapp.py --myarg test123&quot;Shell~~~~~If you want to debug something in the container, just add a ``--shell``argument and it will override the entrypoint with ``/bin/bash``. If youwish to use an alternate shell, you can override this with the followingenrivonment variable:.. code:: shell   export IAM_DOCKER_RUN_SHELL_COMMAND=&quot;/bin/sh&quot;It is especially convenient to use this command to add to the end of anyexisting set of arguments. It will override both the default ENTRYPOINTdefined in the Dockerfile as well as the ``--full-entrypoint`` argument... code:: shell   # for example, --shell will take precedence over --full-entrypoint   iam-docker-run \       --image mycompany/myimage \       --full-entrypoint &quot;python myapp.py --myarg test123&quot; \       --shell # let me jump in real quick without modifying the rest of my argsCustom environment variables file~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If you have environment variables you want passed to Docker via``docker run --env-file``, with iam-docker-run you would use``--custom-env-file``. The reason for this is that iam-docker-run isalready using a file to pass into Docker with the environment variablesfor the AWS temporary credentials, so if you have environment variablesto add to that, specify a ``--custom-env-file`` and that will beconcatenated to the env file created by iam-docker-run.Default behavior is to look for a file called ``iam-docker-run.env``. Ifthis file is not found it is silently ignored. This is helpful if youhave an environment variable such as ``AWS_ENV=dev`` which you wantloaded each time without specifying this argument. Hopefully the rest ofyour variables are loaded into the environment from a remoteconfiguration store such as AWS SSM Parameter Store. If you need helpwith this see`ssm-starter &lt;https://github.com/billtrust/ssm-starter&gt;`__.Custom environment arguments~~~~~~~~~~~~~~~~~~~~~~~~~~~~Additionally you can pass environment variables by ``-e`` or``--envvar``, which is passthrough to the ``docker -e`` argument. Theseare additive with the custom environment variables file.Foreground / background~~~~~~~~~~~~~~~~~~~~~~~As the main use case is a development workflow, by default the containerruns in the foreground. To run in the background, specify``--detached``, which maps to the ``docker run -d`` command. To interactwith the terminal, specify ``--interactive``, which maps to``docker run -it``.Source code volume mount by arguments (developer workflow)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The ``--host-source-path`` and ``--container-source-path`` arguments aredesigned to make it easy to mount your source code into the containerwhen using Docker in a developer workflow where you make changes in yourIDE on your host computer and want that source code immediately insertedinto the container. The ``--host-source-path`` argument can be relative.In prior versions of IAM-Docker-Run the source code mount was automaticand required the ``--no-volume`` argument to prevent mounting it. Thisautomatic mount behavior has been removed however these arguments willremain for backward compatibility... code:: shell   iam-docker-run \       --image mycompany/myservice \       --role role-myservice-task \       --host-source-path ./mysource \       --container-source-path /myappAdditional volume mounts~~~~~~~~~~~~~~~~~~~~~~~~You can mount additional volumes by ``-v`` or ``--volume``, which ispassthrough to the ``docker -v`` argument. These are additive with thesource code volume mount (if specified) and the docker in docker mount.Overcoming SELinux with volume mounts~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If you are running SELinux and experience permission denied issues whenmounting volumes, specify the ``--selinux`` argument, which will alterthe dockr run volume mount argument so that the volume is readable.Enable Docker in Docker~~~~~~~~~~~~~~~~~~~~~~~If you want to enable Docker in Docker, you can mount the Docker socketby adding the ``--mount-docker`` argument. If you then install Docker inthe container with the below script and use the Docker CLI from withinthe container... code:: shell   # install the docker client   curl -fsSL get.docker.com -o get-docker.sh   sh get-docker.shAdding a portmap~~~~~~~~~~~~~~~~You can use ``--portmap`` or ``-p``, which is a direct match to the``docker run -p`` argument, for example:.. code:: shell   iam-docker-run \       --image mycompany/myservice \       --role role-myservice-task \       --portmap 30000:3000The ``--portmap 30000:3000`` argument in this example would take a HTTPserver listening in the container on port 3000 and maps it to port 30000on your laptop.Note that you can use multiple portmaps as follows:.. code:: shell   iam-docker-run \       --image mycompany/myservice \       --role role-myservice-task \       -p 4430:443 \       -p 8080:80Region~~~~~~If ``--region`` is provided that will take precidence, otherwiseiam-docker-run will look for your region in AWS_REGION orAWS_DEFAULT_REGION environment variables. If none are provided it willdefault to us-east-1.Container Name Tempfile-----------------------IAM-Docker-Run generates a random container name if the –name arg is notsupplied. If this container name is needed for anything downstream suchas the code debugging inside the container feature of VSCode, thecontainer name needs to be discoverable. IAM-Docker-Run enables this bygenerating a file which contains the name of the container and writes itin a pre-determined location.The location of this file follows the:``/temp/&lt;last directory name of pwd&gt;/_container_name.txt``You can override the first part of the prefix with the followingenvironment variable:.. code:: shell   export IAM_DOCKER_RUN_CONTAINER_NAME_PATH_PREFIX=/tmp/somewhere/elseOr you can disable this entirely by setting:.. code:: shell   export IAM_DOCKER_RUN_DISABLE_CONTAINER_NAME_TEMPFILE=trueShortcut--------An alternate way to invoke iam-docker-run on the command line is to usethe alias ``idr``. Just less typing... code:: shell   idr --image busybox --role myroleExample CI workflow-------------------The second use case for iam-docker-run is for running tests fromcontinuous integration... code:: shell   iam-docker-run \       --image mycompany/myimage \       --role role-myservice-task \       --full-entrypoint &quot;/bin/bash /tests/run-integration-test.sh&quot; \       --profile jenkinsVerbose debugging-----------------To turn on verbose output for debugging, set the ``--verbose`` argument.Temporary Credentials Expire Within 1 Hour------------------------------------------A goal of this project was to be as easy as possible for developers touse and to allow the greatest portability. To that end, the temporaryAWS credentials are generated just once before the container starts,rather than requiring a more complex setup where an additional containerwould run all the time and regenerate credentials. When the tempcredentials expire (the STS max of 1 hour), the application will startexperiencing expired credential exceptions. For this among other reasonsis why you would not use this tool in any environment other than localdevelopment or in your build/CI/CD workflow where usage periods areshort and the container can be restarted easily and often.Note: While the STS temporary credentials maximum was recently raised to12 hours, if you are already in the context of an IAM role which is thenassuming another role, the limit in this case remains to be 1 hour.Testing-------Run the automated script cli tests:.. code:: shell   pip install --user nose scripttest   python setup.py install --user   export AWS_REGION=us-east-1   # set AWS_PROFILE to a valid profile name which can assume roles   export AWS_PROFILE=dev   nosetests -v --exe -w ./testTesting the use case of a role being supplied without a profile, usingthe credentials in the environment, is difficult to test an a genericautomated way. For now, the following manual steps can test thiscondition... code:: shell   # set ROLE_ARN_FOR_LOCAL_CREDS to a role which can list s3 buckets   export ROLE_ARN_FOR_LOCAL_CREDS=arn:aws:iam::123456789012:role/my-role   # set AWS_PROFILE to a valid profile name which can assume the ROLE_ARN   export AWS_PROFILE=dev   export ROLE_NAME_FOR_CONTAINER=role-ops-developers   aws sts assume-role \       --role-arn $ROLE_ARN_FOR_LOCAL_CREDS \       --role-session-name testing \       --profile $AWS_PROFILE   # put credentials in the environment   export AWS_ACCESS_KEY_ID=fromabove   export AWS_SECRET_ACCESS_KEY=fromabove   export AWS_SESSION_TOKEN=fromabove   iam-docker-run \       --role $ROLE_NAME_FOR_CONTAINER \       --image mesosphere/aws-cli:latest --full-entrypoint &quot;aws s3 ls&quot;   # command should succeed with a listing of s3 bucketsPublishing Updates to PyPi--------------------------For the maintainer - to publish an updated version of Iam-Docker-Run,increment the version number in iam_docker_run.py and run the following:.. code:: shell   docker build -f ./Dockerfile.buildenv -t billtrust/iam-docker-run:build .   docker run --rm -it --entrypoint make billtrust/iam-docker-run:build publishAt the prompts, enter the username and password to the Billtrustpypi.org repo.License-------MIT LicenseCopyright (c) 2018 Factor Systems Inc.Permission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the“Software”), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>