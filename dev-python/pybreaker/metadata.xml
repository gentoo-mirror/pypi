<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyBreaker=========PyBreaker is a Python implementation of the Circuit Breaker pattern, describedin Michael T. Nygard's book `Release It!`_.In Nygard's words, *&quot;circuit breakers exists to allow one subsystem to failwithout destroying the entire system. This is done by wrapping dangerousoperations (typically integration points) with a component that can circumventcalls when the system is not healthy&quot;*.Features--------* Configurable list of excluded exceptions (e.g. business exceptions)* Configurable failure threshold and reset timeout* Support for several event listeners per circuit breaker* Can guard generator functions* Functions and properties for easy monitoring and management* Thread-safe* Optional redis backing* Optional support for asynchronous Tornado callsRequirements------------* `Python`_ 3.7+Installation------------Run the following command line to download the latest stable version ofPyBreaker from `PyPI`_::    $ pip install pybreakerIf you are a `Git`_ user, you might want to download the current developmentversion::    $ git clone git://github.com/danielfm/pybreaker.git    $ cd pybreaker    $ python setup.py test    $ python setup.py installUsage-----The first step is to create an instance of ``CircuitBreaker`` for eachintegration point you want to protect against:.. code:: python    import pybreaker    # Used in database integration points    db_breaker = pybreaker.CircuitBreaker(fail_max=5, reset_timeout=60)``CircuitBreaker`` instances should live globally inside the application scope,e.g., live across requests... note::  Integration points to external services (i.e. databases, queues, etc) are  more likely to fail, so make sure to always use timeouts when accessing such  services if there's support at the API level.If you'd like to use the Redis backing, initialize the ``CircuitBreaker`` witha ``CircuitRedisStorage``:.. code:: python    import pybreaker    import redis    redis = redis.StrictRedis()    db_breaker = pybreaker.CircuitBreaker(        fail_max=5,        reset_timeout=60,        state_storage=pybreaker.CircuitRedisStorage(pybreaker.STATE_CLOSED, redis))**Do not** initialize the Redis connection with the ``decode_responses`` set to``True``, this will force returning ASCII objects from redis and in Python3+ willfail with:    `AttributeError: 'str' object has no attribute 'decode'`.. note::  You may want to reuse a connection already created in your application, if you're  using ``django_redis`` for example:.. code:: python    import pybreaker    from django_redis import get_redis_connection    db_breaker = pybreaker.CircuitBreaker(        fail_max=5,        reset_timeout=60,        state_storage=pybreaker.CircuitRedisStorage(pybreaker.STATE_CLOSED, get_redis_connection('default')))Event Listening```````````````There's no need to subclass ``CircuitBreaker`` if you just want to take actionwhen certain events occur. In that case, it's better to subclass``CircuitBreakerListener`` instead:.. code:: python    class DBListener(pybreaker.CircuitBreakerListener):        &quot;Listener used by circuit breakers that execute database operations.&quot;        def before_call(self, cb, func, *args, **kwargs):            &quot;Called before the circuit breaker `cb` calls `func`.&quot;            pass        def state_change(self, cb, old_state, new_state):            &quot;Called when the circuit breaker `cb` state changes.&quot;            pass        def failure(self, cb, exc):            &quot;Called when a function invocation raises a system error.&quot;            pass        def success(self, cb):            &quot;Called when a function invocation succeeds.&quot;            pass    class LogListener(pybreaker.CircuitBreakerListener):        &quot;Listener used to log circuit breaker events.&quot;        def state_change(self, cb, old_state, new_state):            msg = &quot;State Change: CB: {0}, New State: {1}&quot;.format(cb.name, new_state)            logging.info(msg)To add listeners to a circuit breaker:.. code:: python    # At creation time...    db_breaker = pybreaker.CircuitBreaker(listeners=[DBListener(), LogListener()])    # ...or later    db_breaker.add_listeners(OneListener(), AnotherListener())What Does a Circuit Breaker Do?```````````````````````````````Let's say you want to use a circuit breaker on a function that updates a rowin the ``customer`` database table:.. code:: python    @db_breaker    def update_customer(cust):        # Do stuff here...        pass    # Will trigger the circuit breaker    updated_customer = update_customer(my_customer)Or if you don't want to use the decorator syntax:.. code:: python    def update_customer(cust):        # Do stuff here...        pass    # Will trigger the circuit breaker    updated_customer = db_breaker.call(update_customer, my_customer)According to the default parameters, the circuit breaker ``db_breaker`` willautomatically open the circuit after 5 consecutive failures in``update_customer``.When the circuit is open, all calls to ``update_customer`` will fail immediately(raising ``CircuitBreakerError``) without any attempt to execute the realoperation. If you want the original error to be thrown when the circuit trips,set the ``throw_new_error_on_trip`` option to ``False``:.. code:: python    pybreaker.CircuitBreaker(..., throw_new_error_on_trip=False)After 60 seconds, the circuit breaker will allow the next call to``update_customer`` pass through. If that call succeeds, the circuit is closed;if it fails, however, the circuit is opened again until another timeout elapses.By default, when the circuit breaker trips, it wOptional Tornado Support````````````````````````A circuit breaker can (optionally) be used to call asynchronous Tornado functions:.. code:: python    from tornado import gen    @db_breaker(__pybreaker_call_async=True)    @gen.coroutine    def async_update(cust):        # Do async stuff here...        passOr if you don't want to use the decorator syntax:.. code:: python    @gen.coroutine    def async_update(cust):        # Do async stuff here...        pass    updated_customer = db_breaker.call_async(async_update, my_customer)Excluding Exceptions````````````````````By default, a failed call is any call that raises an exception. However, it'scommon to raise exceptions to also indicate business exceptions, and thoseexceptions should be ignored by the circuit breaker as they don't indicatesystem errors:.. code:: python    # At creation time...    db_breaker = CircuitBreaker(exclude=[CustomerValidationError])    # ...or later    db_breaker.add_excluded_exception(CustomerValidationError)In that case, when any function guarded by that circuit breaker raises``CustomerValidationError`` (or any exception derived from``CustomerValidationError``), that call won't be considered a system failure.So as to cover cases where the exception class alone is not enough to determinewhether it represents a system error, you may also pass a callable rather thana type:.. code:: python    db_breaker = CircuitBreaker(exclude=[lambda e: type(e) == HTTPError and e.status_code &lt; 500])You may mix types and filter callables freely.Monitoring and Management`````````````````````````A circuit breaker provides properties and functions you can use to monitor andchange its current state:.. code:: python    # Get the current number of consecutive failures    print(db_breaker.fail_counter)    # Get/set the maximum number of consecutive failures    print(db_breaker.fail_max)    db_breaker.fail_max = 10    # Get/set the current reset timeout period (in seconds)    print db_breaker.reset_timeout    db_breaker.reset_timeout = 60    # Get the current state, i.e., 'open', 'half-open', 'closed'    print(db_breaker.current_state)    # Closes the circuit    db_breaker.close()    # Half-opens the circuit    db_breaker.half_open()    # Opens the circuit    db_breaker.open()These properties and functions might and should be exposed to the operationsstaff somehow as they help them to detect problems in the system.Donate------If this project is useful for you, buy me a beer!Bitcoin: ``bc1qtwyfcj7pssk0krn5wyfaca47caar6nk9yyc4mu``.. _Python: http://python.org.. _Jython: http://jython.org.. _Release It!: https://pragprog.com/titles/mnee2/release-it-second-edition/.. _PyPI: http://pypi.python.org.. _Git: http://git-scm.com</longdescription>
</pkgmetadata>