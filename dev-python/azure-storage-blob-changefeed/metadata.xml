<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Azure Storage Blob ChangeFeed client library for PythonThis preview package for Python enables users to get blob change feed events. These events can be lazily generated, iterated by page, retrieved for a specific time interval, or iterated from a specific continuation token.[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/azure/storage/blob/changefeed) | [Package (PyPi)](https://pypi.org/project/azure-storage-blob-changefeed/) | [API reference documentation](https://aka.ms/azsdk-python-storage-blob-changefeed-ref) | [Product documentation](https://docs.microsoft.com/azure/storage/) | [Samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/samples)## Getting started### Prerequisites* Python 3.6 or later is required to use this package.* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an[Azure storage account](https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-quickstart-create-account) to use this package.### Install the packageInstall the Azure Storage Blob ChangeFeed client library for Python with [pip](https://pypi.org/project/pip/):```bashpip install azure-storage-blob-changefeed --pre```### Create a storage accountIf you wish to create a new storage account, you can use the[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal),[Azure PowerShell](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell),or [Azure CLI](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli):```bash# Create a new resource group to hold the storage account -# if using an existing resource group, skip this stepaz group create --name my-resource-group --location westus2# Create the storage accountaz storage account create -n my-storage-account-name -g my-resource-group```To enable changefeed you can use:[Azure Portal](https://docs.microsoft.com/azure/storage/blobs/storage-blob-change-feed?tabs=azure-portal#enable-and-disable-the-change-feed),[Azure PowerShell](https://docs.microsoft.com/azure/storage/blobs/storage-blob-change-feed?tabs=azure-powershell#enable-and-disable-the-change-feed)or [Template](https://docs.microsoft.com/azure/storage/blobs/storage-blob-change-feed?tabs=template#enable-and-disable-the-change-feed).### Authenticate the clientInteraction with Blob ChangeFeed client starts with an instance of the ChangeFeedClient class. You need an existing storage account, its URL, and a credential to instantiate the client object.#### Get credentialsTo authenticate the client you have a few options:1. Use a SAS token string2. Use an account shared access key3. Use a token credential from [azure.identity](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity)Alternatively, you can authenticate with a storage connection string using the `from_connection_string` method. See example: [Client creation with a connection string](#client-creation-with-a-connection-string).You can omit the credential if your account URL already has a SAS token.#### Create clientOnce you have your account URL and credentials ready, you can create the ChangeFeedClient:```pythonfrom azure.storage.blob.changefeed import ChangeFeedClientservice = ChangeFeedClient(account_url=&quot;https://&lt;my-storage-account-name&gt;.blob.core.windows.net/&quot;, credential=credential)```## Key concepts#### ClientsThe Blob ChangeFeed SDK provides one client:* ChangeFeedClient: this client allows you to get change feed events by page, get all change feed events, get events in a time range, start listing events with a continuation token.## ExamplesThe following sections provide several code snippets covering some of the most common Storage Blob ChangeFeed, including:* [Client creation with a connection string](#client-creation-with-a-connection-string)* [Enumerating Events Within a Time Range](#enumerating-events-within-a-time-range)* [Enumerating All Events](#enumerating-all-events)* [Enumerating Events by Page](#enumerating-events-by-page)### Client creation with a connection stringCreate the ChangeFeedClient using the connection string to your Azure Storage account.```pythonfrom azure.storage.blob.changefeed import ChangeFeedClientservice = ChangeFeedClient.from_connection_string(conn_str=&quot;my_connection_string&quot;)```### Enumerating Events Within a Time RangeList all events within a time range.```pythonfrom datetime import datetimefrom azure.storage.blob.changefeed import ChangeFeedClientcf_client = ChangeFeedClient(&quot;https://{}.blob.core.windows.net&quot;.format(&quot;YOUR_ACCOUNT_NAME&quot;),                             credential=&quot;Your_ACCOUNT_KEY&quot;)start_time = datetime(2020, 1, 6)end_time = datetime(2020, 3, 4)change_feed = cf_client.list_changes(start_time=start_time, end_time=end_time)# print range of eventsfor event in change_feed:    print(event)```### Enumerating All EventsList all events.```pythonfrom azure.storage.blob.changefeed import ChangeFeedClientcf_client = ChangeFeedClient(&quot;https://{}.blob.core.windows.net&quot;.format(&quot;YOUR_ACCOUNT_NAME&quot;),                             credential=&quot;Your_ACCOUNT_KEY&quot;)change_feed = cf_client.list_changes()# print all eventsfor event in change_feed:    print(event)```### Enumerating Events by PageList events by page.```pythonfrom azure.storage.blob.changefeed import ChangeFeedClientcf_client = ChangeFeedClient(&quot;https://{}.blob.core.windows.net&quot;.format(&quot;YOUR_ACCOUNT_NAME&quot;),                             credential=&quot;Your_ACCOUNT_KEY&quot;)change_feed = cf_client.list_changes().by_page()# print first page of eventschange_feed_page1 = next(change_feed)for event in change_feed_page1:    print(event)```## Troubleshooting### LoggingThis library uses the standard[logging](https://docs.python.org/3/library/logging.html) library for logging.Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFOlevel.Detailed DEBUG level logging, including request/response bodies and unredactedheaders, can be enabled on a client with the `logging_enable` argument:```pythonimport sysimport loggingfrom azure.storage.blob.changefeed import ChangeFeedClient# Create a logger for the 'azure.storage.blob.changefeed' SDKlogger = logging.getLogger('azure.storage')logger.setLevel(logging.DEBUG)# Configure a console outputhandler = logging.StreamHandler(stream=sys.stdout)logger.addHandler(handler)# This client will log detailed information about its HTTP sessions, at DEBUG levelservice_client = ChangeFeedClient.from_connection_string(&quot;your_connection_string&quot;, logging_enable=True)```## Next steps### More sample codeGet started with our [Azure Blob ChangeFeed samples](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/samples).Several Storage Blob ChangeFeed Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Blob ChangeFeed:* [change_feed_samples.py](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob-changefeed/samples/change_feed_samples.py) - Examples for authenticating and operating on the client:    * list events by page    * list all events    * list events in a time range    * list events starting from a continuation token## ContributingThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.</longdescription>
</pkgmetadata>