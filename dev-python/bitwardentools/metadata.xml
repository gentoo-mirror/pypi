<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># tools for working with vaultwarden/bitwarden (_rs) and vaultierThis package containers a python3+ client for bitwarden which uses both a native python implementation but also wraps the official the official npm `@bitwarden/cli`.The ultimate goal is certainly only to rely on python implementation against the vaultwarden/bitwarden_rs server implementation.- [![.github/workflows/cicd.yml](https://github.com/corpusops/bitwardentools/actions/workflows/cicd.yml/badge.svg?branch=main)](https://github.com/corpusops/bitwardentools/actions/workflows/cicd.yml)## Features- api controllable client- Create, Read, Update, Delete,  on organizations, collection, ciphers, users (also disable/enable), and attachments- Attach Ciphers to organization collections- Set access at orgas, collections and users levels.- Download/Upload attachments to vault and organizations- The client also integrate a thin wrapper to official npm CLI (see `call` mathod)- Read [api](./src/bitwardentools/client.py)  for longer details ## install as a python lib```bashpip install bitwardentools```## Run in dev### Configure```bashcp .env.dist .envcp .env.local.dist .env.localprintf &quot;USER_UID=$(id -u)\nUSER_GID=$(id -g)\n&quot;&gt;&gt;.env```### Build```basheval $(egrep -hv '^#|^\s*$' .env .env.local|sed  -e &quot;s/^/export /g&quot;| sed -e &quot;s/=/='/&quot; -e &quot;s/$/'/g&quot;|xargs)COMPOSE_FILE=&quot;docker-compose.yml:docker-compose-build.yml&quot; docker-compose build```### Run```bashdocker-compose run --rm app bash``````bashsed -i -e &quot;/COMPOSE_FILE/d&quot; .envecho &quot;COMPOSE_FILE=docker-compose.yml:docker-compose-dev.yml&quot; &gt;&gt; .envdocker-compose up -d --force-recreatedocker-compose exec -u app app bash```### run tests```bashsed -i -e &quot;/COMPOSE_FILE/d&quot; .envecho &quot;COMPOSE_FILE=docker-compose.yml:docker-compose-dev.yml:docker-compose-test.yml&quot; &gt;&gt; .envdocker-compose exec -u app app tox -e linting,coverage```## Credits and bibliography- [gnunux](http://gnunux.info/) excellent articles:    [1](http://gnunux.info/dotclear2/index.php?post/2020/10/11/%C3%89crire-un-client-Bitwarden-en-python-%3A-identifiant)    [2](http://gnunux.info/dotclear2/index.php?post/2020/10/11/%C3%89crire-un-client-Bitwarden-en-python-%3A-cr%C3%A9er-une-organisation-et-une-collection)    [3](http://gnunux.info/dotclear2/index.php?post/2020/10/11/%C3%89crire-un-client-Bitwarden-en-python)- https://github.com/dani-garcia/vaultwarden/ (old: https://github.com/dani-garcia/bitwarden_rs/ )- https://github.com/doy/rbw/tree/master/src- https://github.com/bitwarden/jslib- https://github.com/birlorg/bitwarden-cli/tree/trunk/python/bitwarden- https://github.com/jcs/rubywarden## Docsee also [USAGE](./USAGE.md) (or read below on pypi)## CHANGES### 1.0.57- QA &amp; CI/CD fixes [kiorky]- Fix newer vaultwarden patch [kiorky]- Fix newer vaultwarden adduser [kiorky]- Fix new vaultwarden create_orga [kiorky]- Fix newer vaultwarden set_org_acces [kiorky]### 1.0.56- Customizable auth payload support (2Factor, api auth) [Markus KÃ¶tter &lt;koetter@cispa.de&gt;])### 1.0.55- ensure requests is in requirements [kiorky]### 1.0.54- bugfix: exclude folderId from getting encrypted [Thomas Kriechbaumer &lt;thomas@kriechbaumer.name&gt;]### 1.0.53- kdfIterations payload change fix [kiorky]- add delete_user [kiorky]### 1.0.51- Do not need private key for confirming users  [Didier 'OdyX' Raboud &lt;didier.raboud@liip.ch&gt;]### 1.0.49- complete vaultier `AS_SINGLE_ORG=false` acls- feed collections accesses also with global `accessAll=true` users.### 1.0.47- vaultier migration: add notify script- vaultier migration: finish cycle- Add orga/collection memberships managment methods- Rename tokens attribute- Better error messagfes- Optimize login &amp; token management- Cache overhaul and factorization- Vaultier AsOneOrganization import variants- Clarify docs### 1.0.46- Compatibility leftovers with bitwarden_rs `1.20`.### 1.0.45- Compatibility with bitwarden_rs `1.20` (was `1.18`).### 1.0.44- initial release### Cut a release```sh./release.sh $version```### Usage```pythonclient = Client(server, email, password)client.sync()## direct object creation methods# organizationclient.create_organization('foo', 'foo@foo.com')# collectionclient.create_collection('bar', orga='foo')# default item/loginpayload = {    &quot;notes&quot;: &quot;supernote&quot;,    &quot;login&quot;: {        &quot;totp&quot;: &quot;aze&quot;,        'username': &quot;alice&quot;, &quot;password&quot;: &quot;rabbit&quot;,        &quot;uris&quot;: [{&quot;match&quot;: None, &quot;uri&quot;: &quot;http://a&quot;}]    }}client.create_item(&quot;sec5&quot;, orga, collections=[col], **payload)# if orga is None cipher will go inside user vaultclient.create_item(&quot;secpersonal&quot;, **payload)## is a synoym: client.create_login# identity# title&quot;: &quot;Mr/Mrs/Ms/Dr&quot;payload = {    &quot;identity&quot;: {        &quot;address1&quot;: &quot;foo&quot;, &quot;address2&quot;: &quot;foo&quot;, &quot;address3&quot;: &quot;foo&quot;, &quot;city&quot;: &quot;foo&quot;, &quot;postalCode&quot;: &quot;foo&quot;,        &quot;country&quot;: &quot;foo&quot;, &quot;state&quot;: &quot;foo&quot;, &quot;username&quot;: &quot;foo&quot;, &quot;company&quot;: &quot;foo&quot;,        &quot;phone&quot;: &quot;foo&quot;, &quot;email&quot;: &quot;foo&quot;,        &quot;title&quot;: &quot;Mrs&quot;, &quot;firstName&quot;: &quot;foo&quot;, &quot;lastName&quot;: &quot;foo&quot;, &quot;middleName&quot;: &quot;foo&quot;,        &quot;ssn&quot;: &quot;foo&quot;, &quot;licenseNumber&quot;: &quot;foo&quot;, &quot;passportNumber&quot;: &quot;foo&quot;,    },    &quot;notes&quot;: &quot;foo&quot;,}client.create_identity(&quot;sec1&quot;, orga, collections=[col], **payload)# notepayload = {    &quot;fields&quot;: [{&quot;name&quot;: &quot;thisisabool&quot;, &quot;type&quot;: 2, &quot;value&quot;: False}],    &quot;notes&quot;: &quot;notenote&quot;,    &quot;secureNote&quot;: {&quot;type&quot;: 0},}client.create_securenote(&quot;sec2&quot;, orga, collections=[col], **payload)# cardpayload = {    &quot;card&quot;: {&quot;brand&quot;: &quot;sec&quot;, &quot;cardholderName&quot;: &quot;foo&quot;,             &quot;number&quot;: &quot;aaa&quot;, &quot;code&quot;: &quot;123456&quot;,             &quot;expMonth&quot;: &quot;10&quot;, &quot;expYear&quot;: &quot;2013&quot;},    &quot;fields&quot;: [{&quot;name&quot;: &quot;aaa&quot;, &quot;type&quot;: 0, &quot;value&quot;: &quot;aaa&quot;}],    &quot;notes&quot;: &quot;aaa&quot;}client.create_card(&quot;sec4&quot;, orga, collections=[col], **payload)## create only with json payloadsorga = client.create(**{    'object': 'organization',    'name': &quot;org&quot;,    'email': email})# Create a collectioncol = client.create(**{    'object': 'org-collection',    'name': &quot;testcol&quot;,    'organizationId': client.item_or_id(orga)})col2 = client.create(**{    'object': 'org-collection',    'name': &quot;testcol2&quot;,    'organizationId': client.item_or_id(orga)})# Create a login within an organization, collectionIds is mandatory on bitwarden_rs 1.19+cipher = client.create(**{    &quot;name&quot;: &quot;test&quot;,    &quot;object&quot;: &quot;item&quot;,    &quot;organizationId&quot;: orga.id,    &quot;notes&quot;: &quot;supernote&quot;,    &quot;login&quot;: {'username': &quot;alice&quot;, &quot;password&quot;: &quot;rabbit&quot;},    &quot;collectionIds&quot;: [col2.id],})# Create a login within your personal vaultcipher = client.create(**{    &quot;name&quot;: &quot;test&quot;,    &quot;object&quot;: &quot;item&quot;,    &quot;notes&quot;: &quot;supernote&quot;,    &quot;login&quot;: {'username': &quot;alice&quot;, &quot;password&quot;: &quot;rabbit&quot;})## Patch existing objectstestorg = client.get_organization(&quot;org&quot;)client.edit_organization(testorg, name='fooorg')#testcol = client.get_collection(&quot;testcol&quot;)client.edit_orgcollection(testcol, name='foocol')## Play with ciphersall_ciphers = client.get_ciphers()cipher = client.get_cipher(&quot;test&quot;, collection=col, orga=orga)# Put cipther in collection col2client.link(cipher, col2)## Attachmentsclient.attach(sec, &quot;/path/to/foo.zip&quot;)# reload cipher with it's new attachment# default dir in current working directory, default filename is uploaded filenameclient.download(sec.attachments[0],                directory='/w/data/titi/toto',                filename='tata.zip')client.delete_attachments(sec)## users management#users = client.get_users()  # &gt; {&quot;emails&quot;: {}, &quot;ids&quot;: {}, &quot;names&quot;: {}} users indexed dicts# search one useruser = client.get_user(email=&quot;foo@bar.com&quot;)user = client.get_user(name=&quot;foo&quot;)user = client.get_user(id=&quot;424242424-4242-4242-4242-424242424242&quot;)# enable/delete/disable methods can take id/email/name or user instances as kwargs:client.disable_user(email=&quot;foo@bar.com&quot;)client.disable_user(id=&quot;424242424-4242-4242-4242-424242424242&quot;)client.disable_user(name=&quot;foo&quot;)client.disable_user(user=user)# other methodsclient.enable_user(user=/name=/id=/email=)client.delete_user(user=/name=/id=/email=)# if not password, it will be autogenerated and in the return tupleuser, pw = client.create_user('foo@bar.com', password=, passwordhint=, name=)# If you use bitwarden_rs and you setted up the bitwarden rs key,# the user will be automatically validated# you can manually validate an account with:user = client.validate('foo@bar.com')# you can also manage orgs invitationsacl = client.accept_invitation('foo@bar.com', orga)  # need bitwarden server private keyacl = client.confirm_invitation('foo@bar.com', orga)  # need bitwarden server private key# you can also manage collection permissions## add user to orgac.add_user_to_organization(user, orga, collections=col)## set them at orga level (will add to orga if not already member)c.set_organization_access(user, orga, collections=col, hidepasswords=False, readOnly=True/False)c.set_organization_access(user, orga, {&quot;collection&quot;: col, &quot;hidePasswords&quot;: False}, hidepasswords=True)## add them at collection levelc.set_collection_access(user, col, hidepasswords=True/False, readOnly=True/False)## remove from collection: colc.set_organization_access(user, orga, {&quot;collection&quot;: col, &quot;remove&quot;: True})### orc.set_collection_access(user, {&quot;collection&quot;: col, &quot;remove&quot;: True})## get acls infosc.get_accesses(orga)c.get_accesses(col)c.get_accesses({&quot;user&quot;: user, &quot;collection&quot;: col})c.get_accesses({&quot;user&quot;: user, &quot;orga&quot;: orga})## remove from collectionc.remove_user_from_collection(userOrEmail, colc)## remove from orgac.remove_user_from_organization(userOrEmail, orga)```### Manipulating the login data structure via callback (2Factor)This allows other login mechanisms such as totp or api key:example 1:```pythondef mfa2fa(loginpayload):    totp = pyotp.TOTP(otpseed)    loginpayload.update(        {            &quot;twoFactorToken&quot;: str(totp.now()),            &quot;twoFactorProvider&quot;: &quot;0&quot;,            &quot;twoFactorRemember&quot;: &quot;0&quot;        }    )    return loginpayloadclient = Client(server, email, password, authentication_cb=mfa2fa)```example 1:```pythondef api_key(loginpayload):    loginpayload.update(        {            &quot;client_id&quot;: CLIENT_ID,            &quot;client_secret&quot;: CLIENT_SECRET,            &quot;scope&quot;: &quot;api&quot;,            &quot;grant_type&quot;: &quot;client_credentials&quot;        }    )    return loginpayloadclient = Client(server, email, password, authentication_cb=api_key)```### encode the vaultwarden/bitwarden_rs key for autovalidating user```shbase64 $BITWARDEN_RS_SERVER_DATA/rsa_key.der|tr -d '\n'=&gt; copy paste the result in your .env.local this wayBITWARDEN_PRIVATE_KEY=MIIxxx```### migrate from vaultier to bitwarden notes```shVAULTIER_KEY=$(echo $(base64 ~/vaultier_key.bin|tr -d '\n')cat &gt;&gt;.env &lt;&lt; EOFVAULTIER_KEY=${VAULTIER_KEY}# if your vauiltier has aditionnal httpauth# VAULTIER_HTTP_PASSWORD=htpasswd# VAULTIER_HTTP_USER=userVAULTIER_EMAIL=myvaultier.email@d.comVAULTIER_URL=https://vaultier.foo.netVAULTIER_JSON=data/export/vaultierfile.jsonBW_ORGA_NAME=MyBitwardenOrgaBITWARDEN_PW=MasterPasswordBITWARDEN_SERVER=https://bitwd.foo.netBITWARDEN_EMAIL=foo@foo.com```### export vaultier data to json file for cards and files for attachments- It will produce data/export/vaultname.json- And download attachments inside data/export/secret$id/```shtime python src/bitwardentools/vaultier/export.py```### load vaultier json serialized vaults/cards into bitwarden orga/collectionsAs bitwarden has only 2 folds, where vaultier has 3, cards are migrated into bitwarden and named `$vault $card`; this is the link between the two systems, please do not rename your card as long as you want to continue to migrate or it will duplicate things.```shtime python src/bitwardentools/vaultier/import_structure.py```### sync secrets```shtime python src/bitwardentools/vaultier/sync_secrets.py```### load vaultier json members as bitwarden users Profiles and tie them to their secrets```shpython src/bitwardentools/vaultier/invite.py```### Notify users of their accounts```shpython src/bitwardentools/vaultier/notify.py --dry-run=0```### Security noteWe provide a ``bitwardentools.client.bust_cache`` method to invalidate any cache in memory, please use it whenever you have finished to access your secrets.```pythonfrom bitwardentools.client import bust_cachebust_cache()```</longdescription>
</pkgmetadata>