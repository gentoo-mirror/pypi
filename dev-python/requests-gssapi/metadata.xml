<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>requests GSSAPI authentication library===============================================Requests is an HTTP library, written in Python, for human beings. This libraryadds optional GSSAPI authentication support and supports mutualauthentication.It provides a fully backward-compatible shim for the oldpython-requests-kerberos library: simply replace ``import requests_kerberos``with ``import requests_gssapi``.  A more powerful interface is provided by theHTTPSPNEGOAuth component, but this is of course not guaranteed to becompatible.  Documentation below is written toward the new interface.Basic GET usage:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=HTTPSPNEGOAuth())    ...The entire ``requests.api`` should be supported.Setup-----In order to use this library, there must already be a Kerberos Ticket-GrantingTicket (TGT) in a credential cache (ccache).  Whether a TGT is available canbe easily determined by running the ``klist`` command.  If no TGT isavailable, then it first must be obtained (for instance, by running the``kinit`` command, or pointing the $KRB5CCNAME to a credential cache with avalid TGT).In short, the library will handle the &quot;negotiations&quot; of Kerberosauthentication, but ensuring that a credentials are available and valid is theresponsibility of the user.Authentication Failures-----------------------Client authentication failures will be communicated to the caller by returninga 401 response.  A 401 response may also be the result of expired credentials(including the TGT).Mutual Authentication---------------------Mutual authentication is a poorly-named feature of the GSSAPI which doesn'tprovide any additional security benefit to most possible uses ofrequests_gssapi.  Practically speaking, in most mechanism implementations(including krb5), it requires another round-trip between the client and serverduring the authentication handshake.  Many clients and servers do not properlyhandle the authentication handshake taking more than one round-trip.  If youencounter a MutualAuthenticationError, this is probably why.So long as you're running over a TLS link whose security guarantees you trust,there's no benefit to mutual authentication.  If you don't trust the link atall, mutual authentication won't help (since it's not tamper-proof, and GSSAPIisn't being used post-authentication.  There's some middle ground between thetwo where it helps a small amount (e.g., passive adversary overencrypted-but-unverified channel), but for Negotiate (what we're doing here),it's not generally helpful.For a more technical explanation of what mutual authentication actuallyguarantees, I refer you to rfc2743 (GSSAPIv2), rfc4120 (krb5 in GSSAPI),rfc4178 (SPNEGO), and rfc4559 (HTTP Negotiate).DISABLED^^^^^^^^By default, there's no need to explicitly disable mutual authentication.However, for compatability with older versions of request_gssapi orrequests_kerberos, you can explicitly request it not be attempted:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth, DISABLED    &gt;&gt;&gt; gssapi_auth = HTTPSPNEGOAuth(mutual_authentication=DISABLED)    &gt;&gt;&gt; r = requests.get(&quot;https://example.org&quot;, auth=gssapi_auth)    ...REQUIRED^^^^^^^^This was historically the default, but no longer is.  If requested,``HTTPSPNEGOAuth`` will require mutual authentication from the server, and ifa server emits a non-error response which cannot be authenticated, a``requests_gssapi.errors.MutualAuthenticationError`` will be raised.  (Seeabove for what this means.)  If a server emits an error which cannot beauthenticated, it will be returned to the user but with its contents andheaders stripped.  If the response content is more important than the need formutual auth on errors, (eg, for certain WinRM calls) the stripping behaviorcan be suppressed by setting ``sanitize_mutual_error_response=False``:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth, REQUIRED    &gt;&gt;&gt; gssapi_auth = HTTPSPNEGOAuth(mutual_authentication=REQUIRED, sanitize_mutual_error_response=False)    &gt;&gt;&gt; r = requests.get(&quot;https://windows.example.org/wsman&quot;, auth=gssapi_auth)    ...OPTIONAL^^^^^^^^This will cause ``requests_gssapi`` to attempt mutual authentication if theserver advertises that it supports it, and cause a failure if authenticationfails, but not if the server does not support it at all.  This is probably notwhat you want: link tampering will either cause hard failures, or silentlycause it to not happen at all.  It is retained for compatability... code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth, OPTIONAL    &gt;&gt;&gt; gssapi_auth = HTTPSPNEGOAuth(mutual_authentication=OPTIONAL)    &gt;&gt;&gt; r = requests.get(&quot;https://example.org&quot;, auth=gssapi_auth)    ...Opportunistic Authentication----------------------------``HTTPSPNEGOAuth`` can be forced to preemptively initiate the GSSAPIexchange and present a token on the initial request (and allsubsequent). By default, authentication only occurs after a``401 Unauthorized`` response containing a Negotiate challengeis received from the origin server. This can cause mutual authenticationfailures for hosts that use a persistent connection (eg, Windows/WinRM), asno GSSAPI challenges are sent after the initial auth handshake. Thisbehavior can be altered by setting  ``opportunistic_auth=True``:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth    &gt;&gt;&gt; gssapi_auth = HTTPSPNEGOAuth(opportunistic_auth=True)    &gt;&gt;&gt; r = requests.get(&quot;https://windows.example.org/wsman&quot;, auth=gssapi_auth)    ...Hostname Override-----------------If communicating with a host whose DNS name doesn't match itshostname (eg, behind a content switch or load balancer),the hostname used for the GSSAPI exchange can be overridden bypassing in a custom name (string or ``gssapi.Name``):.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth    &gt;&gt;&gt; gssapi_auth = HTTPSPNEGOAuth(target_name=&quot;internalhost.local&quot;)    &gt;&gt;&gt; r = requests.get(&quot;https://externalhost.example.org/&quot;, auth=gssapi_auth)    ...Explicit Principal------------------``HTTPSPNEGOAuth`` normally uses the default principal (ie, the user for whomyou last ran ``kinit`` or ``kswitch``, or an SSO credential ifapplicable). However, an explicit credential can be in instead, if desired... code-block:: python    &gt;&gt;&gt; import gssapi    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth    &gt;&gt;&gt; name = gssapi.Name(&quot;user@REALM&quot;, gssapi.NameType.hostbased_service)    &gt;&gt;&gt; creds = gssapi.Credentials(name=name, usage=&quot;initiate&quot;)    &gt;&gt;&gt; gssapi_auth = HTTPSPNEGOAuth(creds=creds)    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=gssapi_auth)    ...Explicit Mechanism------------------``HTTPSPNEGOAuth`` normally lets the underlying ``gssapi`` library decide whichnegotiation mechanism to use. However, an explicit mechanism can be used insteadif desired. The ``mech`` parameter will be passed straight through to ``gssapi``without interference. It is expected to be an instance of ``gssapi.mechs.Mechanism``... code-block:: python    &gt;&gt;&gt; import gssapi    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth    &gt;&gt;&gt; try:    ...   spnego = gssapi.mechs.Mechanism.from_sasl_name(&quot;SPNEGO&quot;)    ... except AttributeError:    ...   spnego = gssapi.OID.from_int_seq(&quot;1.3.6.1.5.5.2&quot;)    &gt;&gt;&gt; gssapi_auth = HTTPSPNEGOAuth(mech=spnego)    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=gssapi_auth)    ...Delegation----------``requests_gssapi`` supports credential delegation (``GSS_C_DELEG_FLAG``).To enable delegation of credentials to a server that requests delegation, pass``delegate=True`` to ``HTTPSPNEGOAuth``:.. code-block:: python    &gt;&gt;&gt; import requests    &gt;&gt;&gt; from requests_gssapi import HTTPSPNEGOAuth    &gt;&gt;&gt; r = requests.get(&quot;http://example.org&quot;, auth=HTTPSPNEGOAuth(delegate=True))    ...Be careful to only allow delegation to servers you trust as they will be ableto impersonate you using the delegated credentials.Logging-------This library makes extensive use of Python's logging facilities.Log messages are logged to the ``requests_gssapi`` and``requests_gssapi.gssapi`` named loggers.If you are having difficulty we suggest you configure logging. Issues with theunderlying GSSAPI libraries will be made apparent. Additionally, copious debuginformation is made available which may assist in troubleshooting if youincrease your log level all the way up to debug.History=======1.2.3: 2021-02-08------------------ Drop python2 compat glue- Drop external mock dependency1.2.2: 2020-08-07------------------ Use USER_NAME instead of HOSTBASED_SERVICE for user principals- Remove unused imports in example code- Fix typo in explicit mech example1.2.1: 2020-03-31------------------ Include tests in sdist tarball- Don't limit contexts to a single server name1.2.0: 2020-02-18------------------ Add support for specifing an explicit GSSAPI mech1.1.1: 2020-02-18------------------ Fix DOS bug around Negotiate regular expressoin- Update README to include section on setup1.1.0: 2019-05-21------------------ Disable mutual authentication by default- Add more documentation on MutualAuthenticationError1.0.1: 2019-04-10------------------ Fix example in README- Fix license detection for PyPI- Fix a problem with regex escaping- Add COPR Makefile target1.0.0: 2017-12-14------------------ Fork project to requests-gssapi- Replace pykerberos with python-gssapi- Add HTTPSPNEGOAuth interface.  HTTPKerberosAuth is retained as a shim, but  bump the major version anyway for clarity.0.11.0: 2016-11-02------------------- Switch dependency on Windows from kerberos-sspi/pywin32 to WinKerberos.  This brings Custom Principal support to Windows users.0.10.0: 2016-05-18------------------- Make it possible to receive errors without having their contents and headers  stripped.- Resolve a bug caused by passing the ``principal`` keyword argument to  kerberos-sspi on Windows.0.9.0: 2016-05-06------------------ Support for principal, hostname, and realm override.- Added support for mutual auth.0.8.0: 2016-01-07------------------ Support for Kerberos delegation.- Fixed problems declaring kerberos-sspi on Windows installs.0.7.0: 2015-05-04------------------ Added Windows native authentication support by adding kerberos-sspi as an  alternative backend.- Prevent infinite recursion when a server returns 401 to an authorization  attempt.- Reduce the logging during successful responses.0.6.1: 2014-11-14------------------ Fix HTTPKerberosAuth not to treat non-file as a file- Prevent infinite recursion when GSSErrors occurs0.6: 2014-11-04---------------- Handle mutual authentication (see pull request 36_)  All users should upgrade immediately. This has been reported to  oss-security_ and we are awaiting a proper CVE identifier.  **Update**: We were issued CVE-2014-8650- Distribute as a wheel... _36: https://github.com/requests/requests-kerberos/pull/36.. _oss-security: http://www.openwall.com/lists/oss-security/0.5: 2014-05-14---------------- Allow non-HTTP service principals with HTTPKerberosAuth using a new optional  argument ``service``.- Fix bug in ``setup.py`` on distributions where the ``compiler`` module is  not available.- Add test dependencies to ``setup.py`` so ``python setup.py test`` will work.0.4: 2013-10-26---------------- Minor updates in the README- Change requirements to depend on requests above 1.1.00.3: 2013-06-02---------------- Work with servers operating on non-standard ports0.2: 2013-03-26---------------- Not documented0.1: Never released-------------------- Initial Release</longdescription>
</pkgmetadata>