<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[scikit-learn]: &lt;http://scikit-learn.org/stable/&gt;[black badge]: &lt;https://img.shields.io/badge/%20style-black-000000.svg&gt;[black]: &lt;https://github.com/psf/black&gt;[docformatter badge]: &lt;https://img.shields.io/badge/%20formatter-docformatter-fedcba.svg&gt;[docformatter]: &lt;https://github.com/PyCQA/docformatter&gt;[ruff badge]: &lt;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v1.json&gt;[ruff]: &lt;https://github.com/charliermarsh/ruff&gt;[mypy badge]: &lt;http://www.mypy-lang.org/static/mypy_badge.svg&gt;[mypy]: &lt;http://mypy-lang.org&gt;[mkdocs badge]: &lt;https://img.shields.io/badge/docs-mkdocs%20material-blue.svg?style=flat&gt;[mkdocs]: &lt;https://squidfunk.github.io/mkdocs-material&gt;[version badge]: &lt;https://img.shields.io/pypi/v/sports-betting.svg&gt;[pythonversion badge]: &lt;https://img.shields.io/pypi/pyversions/sports-betting.svg&gt;[downloads badge]: &lt;https://img.shields.io/pypi/dd/sports-betting&gt;[gitter]: &lt;https://gitter.im/sports-betting/community&gt;[gitter badge]: &lt;https://badges.gitter.im/join%20chat.svg&gt;[discussions]: &lt;https://github.com/georgedouzas/sports-betting/discussions&gt;[discussions badge]: &lt;https://img.shields.io/github/discussions/georgedouzas/sports-betting&gt;[ci]: &lt;https://github.com/georgedouzas/sports-betting/actions?query=workflow&gt;[ci badge]: &lt;https://github.com/georgedouzas/sports-betting/actions/workflows/ci.yml/badge.svg?branch=main&gt;[doc]: &lt;https://github.com/georgedouzas/sports-betting/actions?query=workflow&gt;[doc badge]: &lt;https://github.com/georgedouzas/sports-betting/actions/workflows/doc.yml/badge.svg?branch=main&gt;# sports-betting[![ci][ci badge]][ci] [![doc][doc badge]][doc]| Category          | Tools    || ------------------| -------- || **Development**   | [![black][black badge]][black] [![ruff][ruff badge]][ruff] [![mypy][mypy badge]][mypy] [![docformatter][docformatter badge]][docformatter] || **Package**       | ![version][version badge] ![pythonversion][pythonversion badge] ![downloads][downloads badge] || **Documentation** | [![mkdocs][mkdocs badge]][mkdocs]|| **Communication** | [![gitter][gitter badge]][gitter] [![discussions][discussions badge]][discussions] |## IntroductionPython sports betting toolbox.The `sports-betting` package is a collection of tools that makes it easy to create machine learning models for sports betting andevaluate their performance. It is compatible with [scikit-learn].## Daily bet tipsThis section will contain **daily** updated value bets of a betting strategy based on a machine learning model. You can read the quick start guide belowto understand the details or reproduce the results. Alternatively, you can visit regularly this page to use the predictions foryour own betting.**Value bets**The information about upcoming matches is not available yet. Please check tomorrow or later in the day.**Backtesting results**| Metric       | Average value    ||--------------|------------------|| Sharpe Ratio | 1.3             || Return       | 18.9 %           || Period       | 340 days         |## Quick start`sports-betting` supports all common sports betting needs i.e. fetching historical and fixtures data as well as backtesting ofbetting strategies.### ParametersAssume that we would like to fetch historical data of various leagues for specific years, including the maximum odds of the marketand dropping columns that contain more than 80% of missing values:```pythonleagues = ['England', 'Scotland', 'Germany', 'Italy', 'Spain', 'France', 'Netherlands', 'Belgium', 'Portugal', 'Turkey', 'Greece']years = [2017, 2018, 2019, 2020, 2021, 2022, 2023]odds_type = 'market_maximum'drop_na_thres = 0.8```We would like also to use a GradientBoostingClassifier to support our betting strategy:```pythonfrom sklearn.compose import make_column_transformerfrom sklearn.ensemble import GradientBoostingClassifierfrom sklearn.impute import SimpleImputerfrom sklearn.pipeline import make_pipelinefrom sklearn.preprocessing import OneHotEncoderfrom sklearn.multioutput import MultiOutputClassifierfrom sportsbet.evaluation import ClassifierBettorclassifier = make_pipeline(  make_column_transformer(    (OneHotEncoder(handle_unknown='ignore'), ['league', 'home_team', 'away_team']), remainder='passthrough'  ),  SimpleImputer(),  MultiOutputClassifier(GradientBoostingClassifier(random_state=5)),)```Finally, our backtesting parameters would include a 5-fold time ordered cross-validation and initial portfolio value of 1000:```pythonfrom sklearn.model_selection import TimeSeriesSplittscv = TimeSeriesSplit(5)init_cash=1000```### ProcessUsing the above selections, the betting process is the following:- Create a dataloader that is used to fetch the training and fixtures data.```pythonfrom sportsbet.datasets import SoccerDataLoaderdataloader = SoccerDataLoader({'league': leagues, 'year': years})X_train, Y_train, O_train = dataloader.extract_train_data(drop_na_thres=drop_na_thres, odds_type=odds_type)X_fixtures, _, O_fixtures = dataloader.extract_fixtures_data()```- Create a bettor that selects and configures the betting strategy.```pythonfrom sportsbet.evaluation import ClassifierBettorbettor = ClassifierBettor(classifier)```- Backtest the bettor on the training data to evaluate the betting strategy:```pythonbettor.backtest(X_train, Y_train, O_train, tscv=tscv, init_cash=init_cash)bettor.backtest_results_[['Sharpe Ratio', 'Total Return [%]', 'Testing Period']].mean()```- Predict the value bets:```pythonbettor.bet(X_fixtures, O_fixtures)```## Sports betting in practiceYou can think of any sports betting event as a random experiment with unknown probabilities for the various outcomes. Even for themost unlikely outcome, for example scoring more than 10 goals in a soccer match, a small probability is still assigned. Thebookmaker estimates this probability P and offers the corresponding odds O. In theory, if the bookmaker offers the so-called fairodds O = 1 / P in the long run, neither the bettor nor the bookmaker would make any money.The bookmaker's strategy is to adjust the odds in their favor using the over-round of probabilities. In practice, it offers oddsless than the estimated fair odds. The important point here is that the bookmaker still has to estimate the probabilities ofoutcomes and provide odds that guarantee them long-term profit.On the other hand, the bettor can also estimate the probabilities and compare them to the odds the bookmaker offers. If theestimated probability of an outcome is higher than the implied probability from the provided odds, then the bet is called a valuebet.The only long-term betting strategy that makes sense is to select value bets. However, you have to remember that neither thebettor nor the bookmaker can access the actual probabilities of outcomes. Therefore, identifying a value bet from the side of thebettor is still an estimation. The bettor or the bookmaker might be wrong, or both of them.Another essential point is that bookmakers can access resources that the typical bettor is rare to access. For instance, they havemore data, computational power, and teams of experts working on predictive models. You may assume that trying to beat them ispointless, but this is not necessarily correct. The bookmakers have multiple factors to consider when they offer their adjustedodds. This is the reason there is a considerable variation among the offered odds. The bettor should aim to systematicallyestimate the value bets, backtest their performance, and not create arbitrarily accurate predictive models. This is a realisticgoal, and `sports-betting` can help by providing appropriate tools.## InstallationFor user installation, `sports-betting` is currently available on the PyPi's repository, and you can install it via `pip`:```bashpip install sports-betting```Development installation requires to clone the repository and then use [PDM](https://github.com/pdm-project/pdm) to install theproject as well as the main and development dependencies:```bashgit clone https://github.com/georgedouzas/sports-betting.gitcd sports-bettingpdm install```## UsageYou can use the Python API or the CLI to access the full functionality of `sports-betting`. Nevertheless, it is recommended to befamiliar with the Python API since it is still needed to write configuration files for the CLI.### APIThe `sports-betting` package makes it easy to download sports betting data:```pythonfrom sportsbet.datasets import SoccerDataLoaderdataloader = SoccerDataLoader(param_grid={'league': ['Italy'], 'year': [2020]})X_train, Y_train, O_train = dataloader.extract_train_data(odds_type='market_maximum', drop_na_thres=1.0)X_fix, Y_fix, O_fix = dataloader.extract_fixtures_data()````X_train` are the historical/training data and `X_fix` are the test/fixtures data. The historical data can be used to backtest theperformance of a bettor model:```pythonfrom sportsbet.evaluation import ClassifierBettorfrom sklearn.dummy import DummyClassifierbettor = ClassifierBettor(DummyClassifier())bettor.backtest(X_train, Y_train, O_train)```We can use the trained bettor model to predict the value bets using the fixtures data:```pythonbettor.bet(X_fix, O_fix)```### CLIThe command `sportsbet` provides various sub-commands to download data and predict the value bets. For any sub-command you mayadd the `--help` flag to get more information about its usage.#### DataloaderThe sub-command `sportsbet dataloader` requires a dataloader configuration file. You can find examples of such configuration filesin `sports-betting/configs/dataloaders`. The following conventions apply:- The configuration file has a Python extension.- It should include a dictionary called `MAIN` and two key-value pairs. A `'dataloader'` key with a dataloader class as  value and a `'path'` key with a relative to the configuration file path as value. It will be the path of the pickled dataloader.- It may include a dictionary called `OPTIONAL` and up to three key-value pairs. The three keys are `'param_grid'`,  `'drop_na_thres'` and `'drop_na'`. You can refer to the [API](api/datasets) for more details about their values.Using a dataloader configuration file, `dataloader_config.py` in the examples below, and the following commands you can extracttraining and fixtures data.Show available parameters for dataloaders:```bashsportsbet dataloader params -d dataloader_config.py```Show available odds types:```bashsportsbet dataloader odds-types -d dataloader_config.py```Extract training data:```bashsportsbet dataloader training -d dataloader_config.py```Extract fixtures data:```bashsportsbet dataloader fixtures -d dataloader_config.py```#### BettorThe sub-command `sportsbet bettor` requires both bettor and dataloader configuration files. The dataloader configuration files areexplained above. For the bettor configuration files, you can find examples of such configuration files in`sports-betting/configs/bettors`, while the following conventions apply:- The configuration file has a Python extension.- It should include a dictionary called `MAIN` and two key-value pairs. A `'bettor'` key with a bettor class as  value and a `'path'` key with a relative to the configuration file path as value. It will be the path of the pickled bettor.- It may include a dictionary called `OPTIONAL` and multiple key-value pairs. Two of the optional keys are `'tscv'` and  `'init_cash'` The rest of the keys are the initialization parameters of the selected bettor. You can refer to the  [API](api/evaluation) for more details about their values.Using a bettor configuration file, `bettor_config.py` in the examples below, and the following commands you can backtest thebettor and estimate the value bets.Backtest the bettor:```bashsportsbet bettor backtest -b bettor_config.py -d dataloader_config.py```Get the value bets:```bashsportsbet bettor bet -b bettor_config.py -d dataloader_config.py```</longdescription>
</pkgmetadata>