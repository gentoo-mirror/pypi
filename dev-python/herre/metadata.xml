<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># herre[![codecov](https://codecov.io/gh/jhnnsrs/herre/branch/master/graph/badge.svg?token=UGXEA2THBV)](https://codecov.io/gh/jhnnsrs/herre)[![PyPI version](https://badge.fury.io/py/herre.svg)](https://pypi.org/project/herre/)![Maintainer](https://img.shields.io/badge/maintainer-jhnnsrs-blue)[![PyPI pyversions](https://img.shields.io/pypi/pyversions/herre.svg)](https://pypi.python.org/pypi/herre/)[![PyPI status](https://img.shields.io/pypi/status/herre.svg)](https://pypi.python.org/pypi/herre/)[![PyPI download month](https://img.shields.io/pypi/dm/herre.svg)](https://pypi.python.org/pypi/herre/)#### DEVELOPMENT## Ideaherre is an (asynchronous) client for token authentication through oauth2 (and potentially other protocols).## Prerequisitesherre needs a oauth2/opendid server to connect to## Supports- Authorization Code Flow (PKCE)  - Within a Qt app through a QtWebengine View  - With a Redirect Server- Client-Credentials Flow## UsageIn order to initialize the Client you need to specify a specific grant to retrieve the code. A grant constitutesa way of retrieving a Token in an asynchronous manner.```pythonfrom herre import Herrefrom herre.grants.oauth2.authorization_code_server import AuthorizationCodeServerclient = Herre(      grant=ClientCredentialsGrant(          base_url=&quot;http://localhost:8000/o&quot;,          client_id=&quot;YOUR_CLIENT_ID&quot;,          client_secret=&quot;YOUR_CLIENT_SECRET&quot;,      ),  )with client as c:  c.get_token()```Async usage```pythonclient = Herre(    grant=ClientCredentialsGrant(          base_url=&quot;http://localhost:8000/o&quot;,          client_id=&quot;YOUR_CLIENT_ID&quot;,          client_secret=&quot;YOUR_CLIENT_SECRET&quot;,      ),async with client as c:    token = await c.get_token()```## ComposabilityHerre grants provide a simple interface to be composable and enable caching, or support for refresh tokens:Enabling Caching the token until its expiration (or until the cache is cleared)```pythonclient = Herre(    grant=CacheGrant(      grant=AuthorizationCodeServerGrant(base_url=&quot;https://your_server/oauth_path&quot;,          client_id=&quot;$YOUR_CLIENT_ID&quot;,          client_secret=&quot;$YOUR_CLIENT_SECRET&quot;,          redirect_uri=&quot;http://localhost:6767&quot;)))async with client:  await client.login()```Enabling refresh tokens:```pythonclient = Herre(    grant=RefreshGrant(      grant=AuthorizationCodeServerGrant(base_url=&quot;https://your_server/oauth_path&quot;,          client_id=&quot;$YOUR_CLIENT_ID&quot;,          client_secret=&quot;$YOUR_CLIENT_SECRET&quot;,          redirect_uri=&quot;http://localhost:6767&quot;)))async with client:  await client.login()```Please check out the documentation for the meta grants to see how to enable custom logic.## Intergration with Qtherre fully supports qt-based applications (both PySide2 and PyQt5) as well as a a redirect_flow for authentication in a webengine powered qt window Authoriation Code Flow (needs pyqtwebengine as additional dependency) ( you can still use the authorization code server if so desired)```pythonclass MainWindow(QtWidget)    def __init__(self, *args, **kwargs):        self.herre = Herre(          grant=AuthorizationCodeQtGrant(            base_url=&quot;https://your_server/oauth_path&quot;,            client_id=&quot;$YOUR_CLIENT_ID&quot;,            client_secret=&quot;$YOUR_CLIENT_SECRET&quot;,            redirect_uri=&quot;about:blank,)        )        self.herre.enter() #programmatically enter context (make sure to call exit)    def login()        t = self.herre.get_token()    def refresh_token():        t = self.herre.refresh_token()```## Build with- [koil](https://github.com/jhnnsrs/koil) - for pyqt event loop handling- [oauthlib](https://github.com/oauthlib/oauthlib) - for oauth2 compliance- [aiohttp](https://github.com/aio-libs/aiohttp) - transport layer (especially redirect server)</longdescription>
</pkgmetadata>