<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.com/pulumi/pulumi-kubernetes.svg?token=eHg7Zp5zdDDJfTjY8ejq&amp;branch=master)](https://travis-ci.com/pulumi/pulumi-kubernetes)[![Slack](http://www.pulumi.com/images/docs/badges/slack.svg)](https://slack.pulumi.com)[![NPM version](https://badge.fury.io/js/%40pulumi%2Fkubernetes.svg)](https://www.npmjs.com/package/@pulumi/kubernetes)[![Python version](https://badge.fury.io/py/pulumi-kubernetes.svg)](https://pypi.org/project/pulumi-kubernetes/)[![GoDoc](https://godoc.org/github.com/pulumi/pulumi-kubernetes/sdk/v3?status.svg)](https://pkg.go.dev/github.com/pulumi/pulumi-kubernetes/sdk/v3)[![License](https://img.shields.io/github/license/pulumi/pulumi-kubernetes)](https://github.com/pulumi/pulumi-kubernetes/blob/master/LICENSE)# Pulumi Kubernetes Resource ProviderThe Kubernetes resource provider for Pulumi lets you create, deploy, and manage Kubernetes API resources and workloads in a running cluster. For a streamlined Pulumi walkthrough, including language runtime installation and Kubernetes configuration, select &quot;Get Started&quot; below.&lt;div&gt;    &lt;p&gt;        &lt;a href=&quot;https://www.pulumi.com/docs/get-started/kubernetes&quot; title=&quot;Get Started&quot;&gt;            &lt;img src=&quot;https://www.pulumi.com/images/get-started.svg?&quot; width=&quot;120&quot;&gt;        &lt;/a&gt;    &lt;/p&gt;  &lt;/div&gt;* [Introduction](#introduction)  * [Kubernetes API Version Support](#kubernetes-api-version-support)  * [How does API support for Kubernetes work?](#how-does-api-support-for-kubernetes-work)* [References](#references)* [Prerequisites](#prerequisites)* [Installing](#installing)* [Quick Examples](#quick-examples)  * [Deploying a YAML Manifest](#deploying-a-yaml-manifest)  * [Deploying a Helm Chart](#deploying-a-helm-chart)  * [Deploying a Workload using the Resource API](#deploying-a-workload-using-the-resource-api)* [Contributing](#contributing)* [Code of Conduct](#code-of-conduct)## Introduction`pulumi-kubernetes` provides an SDK to create any of the API resourcesavailable in Kubernetes.This includes the resources you know and love, such as:- Deployments- ReplicaSets- ConfigMaps- Secrets- Jobs etc.#### Kubernetes API Version SupportThe `pulumi-kubernetes` SDK closely tracks the latest upstream release, and provides accessto the full API surface, including deprecated endpoints.The SDK API is 100% compatible with the Kubernetes API, and isschematically identical to what Kubernetes users expect.We support Kubernetes clusters with version &gt;=1.9.0.#### How does API support for Kubernetes work?Pulumiâ€™s Kubernetes SDK is manufactured by automatically wrapping ourlibrary functionality around the Kubernetes resource [OpenAPIspec](https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec) as soon as anew version is released! Ultimately, this means that Pulumi users do not haveto learn a new Kubernetes API model, nor wait long to work with the latestavailable versions.&gt; Note: Pulumi also supports alpha and beta APIs.Visit the [FAQ](https://www.pulumi.com/docs/reference/clouds/kubernetes/faq/)for more details.## References* [Reference Documentation](https://www.pulumi.com/registry/packages/kubernetes/)* API Documentation    * [Node.js API](https://pulumi.io/reference/pkg/nodejs/@pulumi/kubernetes)    * [Python API](https://www.pulumi.com/docs/reference/pkg/python/pulumi_kubernetes/)* [All Examples](./examples)* [How-to Guides](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/)## Prerequisites1. [Install Pulumi](https://www.pulumi.com/docs/get-started/kubernetes/install-pulumi/).1. Install a language runtime such as [Node.js](https://nodejs.org/en/download), [Python](https://www.python.org/downloads/) or [.NET](https://dotnet.microsoft.com/download/dotnet-core/3.1).1. Install a package manager    * For Node.js, use [NPM](https://www.npmjs.com/get-npm) or [Yarn](https://yarnpkg.com/lang/en/docs/install).    * For Python, use [pip](https://pip.pypa.io/en/stable/installing/).    * For .NET, use Nuget which is integrated with the `dotnet` CLI.1. Have access to a running Kubernetes cluster    * If `kubectl` already works for your running cluster, Pulumi respects and uses this configuration.    * If you do not have a cluster already running and available, we encourage you to      explore Pulumi's SDKs for AWS EKS, Azure AKS, and GCP GKE. Visit the       [API reference docs in the Pulumi Registry](https://www.pulumi.com/registry/packages/kubernetes/api-docs/) for more details.1. [Install `kubectl`](https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl).## InstallingThis package is available in many languages in the standard packaging formats.For Node.js use either `npm` or `yarn`:`npm`:```bashnpm install @pulumi/kubernetes````yarn`:```bashyarn add @pulumi/kubernetes```For Python use `pip`:```bashpip install pulumi-kubernetes```For .NET, dependencies will be automatically installed as part of your Pulumi deployments using `dotnet build`.To use from Go, use `go install` to grab the latest version of the library    $ go install github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes@latest## Quick ExamplesThe following examples demonstrate how to work with `pulumi-kubernetes` ina couple of ways.Examples may include the creation of an AWS EKS cluster, although an EKS clusteris **not** required to use `pulumi/kubernetes`. It is simply used to ensurewe have access to a running Kubernetes cluster to deploy resources and workloads into.### Deploying a YAML ManifestThis example deploys resources from a YAML manifest file path, using thetransient, default `kubeconfig` credentials on the local machine, just as `kubectl` does.```typescriptimport * as k8s from &quot;@pulumi/kubernetes&quot;;const myApp = new k8s.yaml.ConfigFile(&quot;app&quot;, {    file: &quot;app.yaml&quot;});```### Deploying a Helm ChartThis example creates an EKS cluster with [`pulumi/eks`](https://github.com/pulumi/pulumi-eks),and then deploys a Helm chart from the stable repo using the `kubeconfig` credentials from the cluster's [Pulumi provider](https://www.pulumi.com/docs/intro/concepts/resources/providers/).```typescriptimport * as eks from &quot;@pulumi/eks&quot;;import * as k8s from &quot;@pulumi/kubernetes&quot;;// Create an EKS cluster.const cluster = new eks.Cluster(&quot;my-cluster&quot;);// Deploy Wordpress into our cluster.const wordpress = new k8s.helm.v2.Chart(&quot;wordpress&quot;, {    repo: &quot;stable&quot;,    chart: &quot;wordpress&quot;,    values: {        wordpressBlogName: &quot;My Cool Kubernetes Blog!&quot;,    },}, { providers: { &quot;kubernetes&quot;: cluster.provider } });// Export the cluster's kubeconfig.export const kubeconfig = cluster.kubeconfig;```### Deploying a Workload using the Resource APIThis example creates a EKS cluster with [`pulumi/eks`](https://github.com/pulumi/pulumi-eks),and then deploys an NGINX Deployment and Service using the SDK resource API, and the `kubeconfig` credentials from the cluster's [Pulumi provider](https://www.pulumi.com/docs/intro/concepts/resources/providers/).```typescriptimport * as eks from &quot;@pulumi/eks&quot;;import * as k8s from &quot;@pulumi/kubernetes&quot;;// Create an EKS cluster with the default configuration.const cluster = new eks.Cluster(&quot;my-cluster&quot;);// Create a NGINX Deployment and Service.const appName = &quot;my-app&quot;;const appLabels = { appClass: appName };const deployment = new k8s.apps.v1.Deployment(`${appName}-dep`, {    metadata: { labels: appLabels },    spec: {        replicas: 2,        selector: { matchLabels: appLabels },        template: {            metadata: { labels: appLabels },            spec: {                containers: [{                    name: appName,                    image: &quot;nginx&quot;,                    ports: [{ name: &quot;http&quot;, containerPort: 80 }]                }],            }        }    },}, { provider: cluster.provider });const service = new k8s.core.v1.Service(`${appName}-svc`, {    metadata: { labels: appLabels },    spec: {        type: &quot;LoadBalancer&quot;,        ports: [{ port: 80, targetPort: &quot;http&quot; }],        selector: appLabels,    },}, { provider: cluster.provider });// Export the URL for the load balanced service.export const url = service.status.loadBalancer.ingress[0].hostname;// Export the cluster's kubeconfig.export const kubeconfig = cluster.kubeconfig;```## ContributingIf you are interested in contributing, please see the [contributing docs][contributing].## Code of ConductYou can read the code of conduct [here][code-of-conduct].[pulumi-kubernetes]: https://github.com/pulumi/pulumi-kubernetes[contributing]: CONTRIBUTING.md[code-of-conduct]: CODE-OF-CONDUCT.md[workload-example]: #deploying-a-workload-on-aws-eks[how-pulumi-works]: https://www.pulumi.com/docs/intro/concepts/how-pulumi-works</longdescription>
</pkgmetadata>