<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>The ``PDist`` is designed to make it easy to make it easy to make things happen in a probablistic manner. Provide keys with an associated probability attached, and then call the resultingobject when you need a new value.    &gt;&gt;&gt; mood = PDist({'happy': 0.3, 'neutral': 0.6, 'sad': 0.1})    &gt;&gt;&gt; mood()    'happy'    &gt;&gt;&gt; mood()    'neutral'You can retrieve the distribution of how those values are appliedby accessing the ``PDist.distribution`` attribute:    &gt;&gt;&gt; mood.distribution    [('happy', 0.3), ('neutral', 0.6), ('sad', 0.1)]As well as providing a dict to assign probabilities, you cansend in a list of lists/tuples. This allows for for non-hashabletypes to be used. This means that you provide objects such as functions to be used as keys:  &gt;&gt;&gt; def grumpy(news):  ...    return ':/'  &gt;&gt;&gt; def happy(news):  ...    return ':)'  &gt;&gt;&gt; react = PDist([(grumpy, 0.7), (happy, 0.3)])  &gt;&gt;&gt; reaction = react()  &gt;&gt;&gt; reaction(&quot;We're getting married!&quot;)  ':/'You are not restricted to adding your input variables up to 1. Forexample, if you only have a tally chart, and wish to calculate a probability distribution from that sample, you can provide that too:   &gt;&gt;&gt; spotted = {'geese': 0, 'ducks': 12, 'sparrows': 4, 'other': 39}   &gt;&gt;&gt; bird_pdist = PDist(spotted)   &gt;&gt;&gt; bird_pdist.distribution   [('geese', 0.0), ('sparrows', 0.07272727272727272), ('ducks', 0.21818181818181817), ('other', 0.7090909090909091)]Retrieving the probability of a particular key is supported. However,the search strategy is very inefficient and probably shouldn't be usedoutside of the interactive Python shell.    &gt;&gt;&gt; bird_pdist['geese']    0.0</longdescription>
</pkgmetadata>