<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>premailer=========.. image:: https://travis-ci.org/peterbe/premailer.svg?branch=master  :target: https://travis-ci.org/peterbe/premailer.. image:: https://badge.fury.io/py/premailer.svg  :target: https://pypi.python.org/pypi/premailer.. image:: https://img.shields.io/badge/code%20style-black-000000.svg  :target: https://github.com/ambv/blackLooking for sponsors--------------------This project is actively looking for corporate sponsorship. If you wantto help making this an active project consider `pingingPeter &lt;https://www.peterbe.com/contact&gt;`__ and we can talk about puttingup logos and links to your company.Python versions---------------Our`tox.ini &lt;https://github.com/peterbe/premailer/blob/master/tox.ini&gt;`__makes sure premailer works in:-  Python 3.4-  Python 3.5-  Python 3.6-  Python 3.7-  Python 3.8-  PyPyTurns CSS blocks into style attributes--------------------------------------When you send HTML emails you can't use style tags but instead you haveto put inline ``style`` attributes on every element. So from this:.. code:: html    &lt;html&gt;    &lt;style type=&quot;text/css&quot;&gt;    h1 { border:1px solid black }    p { color:red;}    &lt;/style&gt;    &lt;h1 style=&quot;font-weight:bolder&quot;&gt;Peter&lt;/h1&gt;    &lt;p&gt;Hej&lt;/p&gt;    &lt;/html&gt;You want this:.. code:: html    &lt;html&gt;    &lt;h1 style=&quot;font-weight:bolder; border:1px solid black&quot;&gt;Peter&lt;/h1&gt;    &lt;p style=&quot;color:red&quot;&gt;Hej&lt;/p&gt;    &lt;/html&gt;premailer does this. It parses an HTML page, looks up ``style`` blocksand parses the CSS. It then uses the ``lxml.html`` parser to modify theDOM tree of the page accordingly.Warning!By default, premailer will attempt to download any external stylesheets by URL over the Internet.If you want to prevent this you can use the ``allow_network=False`` option.Getting started---------------If you haven't already done so, install ``premailer`` first:::    $ pip install premailerNext, the most basic use is to use the shortcut function, like this:.. code:: python    &gt;&gt;&gt; from premailer import transform    &gt;&gt;&gt; print(transform(&quot;&quot;&quot;    ...         &lt;html&gt;    ...         &lt;style type=&quot;text/css&quot;&gt;    ...         h1 { border:1px solid black }    ...         p { color:red;}    ...         p::first-letter { float:left; }    ...         &lt;/style&gt;    ...         &lt;style type=&quot;text/css&quot; data-premailer=&quot;ignore&quot;&gt;    ...         h1 { color:blue; }    ...         &lt;/style&gt;    ...         &lt;h1 style=&quot;font-weight:bolder&quot;&gt;Peter&lt;/h1&gt;    ...         &lt;p&gt;Hej&lt;/p&gt;    ...         &lt;/html&gt;    ... &quot;&quot;&quot;))    &lt;html&gt;    &lt;head&gt;        &lt;style type=&quot;text/css&quot;&gt;p::first-letter {float:left}&lt;/style&gt;        &lt;style type=&quot;text/css&quot;&gt;        h1 { color:blue; }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;h1 style=&quot;border:1px solid black; font-weight:bolder&quot;&gt;Peter&lt;/h1&gt;        &lt;p style=&quot;color:red&quot;&gt;Hej&lt;/p&gt;    &lt;/body&gt;    &lt;/html&gt;The ``transform`` shortcut function transforms the given HTML using the defaults for all options:.. code:: python    base_url=None, # Optional URL prepended to all relative links (both stylesheets and internal)    disable_link_rewrites=False, # Allow link rewrites (e.g. using base_url)    preserve_internal_links=False, # Do not preserve links to named anchors when using base_url    preserve_inline_attachments=True, # Preserve links with cid: scheme when base_url is specified    preserve_handlebar_syntax=False # Preserve handlebar syntax from being encoded    exclude_pseudoclasses=True, # Ignore pseudoclasses when processing styles    keep_style_tags=False, # Discard original style tag    include_star_selectors=False, # Ignore star selectors when processing styles    remove_classes=False, # Leave class attributes on HTML elements    capitalize_float_margin=False, # Do not capitalize float and margin properties    strip_important=True, # Remove !important from property values    external_styles=None, # Optional list of URLs to load and parse    css_text=None, # Optional CSS text to parse    method=&quot;html&quot;, # Parse input as HTML (as opposed to &quot;xml&quot;)    base_path=None, # Optional base path to stylesheet in your file system    disable_basic_attributes=None, # Optional list of attribute names to preserve on HTML elements    disable_validation=False, # Validate CSS when parsing it with cssutils    cache_css_parsing=True, # Do cache parsed output for CSS    cssutils_logging_handler=None, # See &quot;Capturing logging from cssutils&quot; below    cssutils_logging_level=None,    disable_leftover_css=False, # Output CSS that was not inlined into the HEAD    align_floating_images=True, # Add align attribute for floated images    remove_unset_properties=True # Remove CSS properties if their value is unset when merged    allow_network=True # allow network access to fetch linked css files    allow_insecure_ssl=False # Don't allow unverified SSL certificates for external links    allow_loading_external_files=False # Allow loading any non-HTTP external file URL    session=None # Session used for http requests - supply your own for caching or to provide authenticationFor more advanced options, check out the code of the ``Premailer`` classand all its options in its constructor.You can also use premailer from the command line by using its mainmodule.::    $ python -m premailer -h    usage: python -m premailer [options]    optional arguments:    -h, --help            show this help message and exit    -f [INFILE], --file [INFILE]                          Specifies the input file. The default is stdin.    -o [OUTFILE], --output [OUTFILE]                          Specifies the output file. The default is stdout.    --base-url BASE_URL    --remove-internal-links PRESERVE_INTERNAL_LINKS                          Remove links that start with a '#' like anchors.    --exclude-pseudoclasses                          Pseudo classes like p:last-child', p:first-child, etc    --preserve-style-tags                          Do not delete &lt;style&gt;&lt;/style&gt; tags from the html                          document.    --remove-star-selectors                          All wildcard selectors like '* {color: black}' will be                          removed.    --remove-classes      Remove all class attributes from all elements    --strip-important     Remove '!important' for all css declarations.    --method METHOD       The type of html to output. 'html' for HTML, 'xml' for                          XHTML.    --base-path BASE_PATH                          The base path for all external stylsheets.    --external-style EXTERNAL_STYLES                          The path to an external stylesheet to be loaded.    --disable-basic-attributes DISABLE_BASIC_ATTRIBUTES                          Disable provided basic attributes (comma separated)    --disable-validation  Disable CSSParser validation of attributes and values    --pretty              Pretty-print the outputted HTML.    --allow-insecure-ssl  Skip SSL certificate verification for external URLs.    --allow-loading-external-files Allow opening any non-HTTP external file URL.A basic example:::    $ python -m premailer --base-url=http://google.com/ -f newsletter.html    &lt;html&gt;    &lt;head&gt;&lt;style&gt;.heading { color:red; }&lt;/style&gt;&lt;/head&gt;    &lt;body&gt;&lt;h1 class=&quot;heading&quot; style=&quot;color:red&quot;&gt;&lt;a href=&quot;http://google.com/&quot;&gt;Title&lt;/a&gt;&lt;/h1&gt;&lt;/body&gt;    &lt;/html&gt;The command line interface supports standard input.::    $ echo '&lt;style&gt;.heading { color:red; }&lt;/style&gt;&lt;h1 class=&quot;heading&quot;&gt;&lt;a href=&quot;/&quot;&gt;Title&lt;/a&gt;&lt;/h1&gt;' | python -m premailer --base-url=http://google.com/    &lt;html&gt;    &lt;head&gt;&lt;style&gt;.heading { color:red; }&lt;/style&gt;&lt;/head&gt;    &lt;body&gt;&lt;h1 class=&quot;heading&quot; style=&quot;color:red&quot;&gt;&lt;a href=&quot;http://google.com/&quot;&gt;Title&lt;/a&gt;&lt;/h1&gt;&lt;/body&gt;    &lt;/html&gt;Turning relative URLs into absolute URLs----------------------------------------Another thing premailer can do for you is to turn relative URLs (e.g.&quot;/some/page.html&quot; into &quot;http://www.peterbe.com/some/page.html&quot;). It doesthis to all ``href`` and ``src`` attributes that don't have a ``://``part in it. For example, turning this:.. code:: html    &lt;html&gt;    &lt;body&gt;    &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;    &lt;a href=&quot;page.html&quot;&gt;Page&lt;/a&gt;    &lt;a href=&quot;http://crosstips.org&quot;&gt;External&lt;/a&gt;    &lt;img src=&quot;/folder/&quot;&gt;Folder&lt;/a&gt;    &lt;/body&gt;    &lt;/html&gt;Into this:.. code:: html    &lt;html&gt;    &lt;body&gt;    &lt;a href=&quot;http://www.peterbe.com/&quot;&gt;Home&lt;/a&gt;    &lt;a href=&quot;http://www.peterbe.com/page.html&quot;&gt;Page&lt;/a&gt;    &lt;a href=&quot;http://crosstips.org&quot;&gt;External&lt;/a&gt;    &lt;img src=&quot;http://www.peterbe.com/folder/&quot;&gt;Folder&lt;/a&gt;    &lt;/body&gt;    &lt;/html&gt;by using ``transform('...', base_url='http://www.peterbe.com/')``.Ignore certain ``&lt;style&gt;`` or ``&lt;link&gt;`` tags---------------------------------------------Suppose you have a style tag that you don't want to have processed andtransformed you can simply set a data attribute on the tag like:.. code:: html    &lt;head&gt;    &lt;style&gt;/* this gets processed */&lt;/style&gt;    &lt;style data-premailer=&quot;ignore&quot;&gt;/* this gets ignored */&lt;/style&gt;    &lt;/head&gt;That tag gets completely ignored except when the HTML is processed, theattribute ``data-premailer`` is removed.It works equally for a ``&lt;link&gt;`` tag like:.. code:: html    &lt;head&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;foo.css&quot; data-premailer=&quot;ignore&quot;&gt;    &lt;/head&gt;HTML attributes created additionally------------------------------------Certain HTML attributes are also created on the HTML if the CSS containsany ones that are easily translated into HTML attributes. For example,if you have this CSS: ``td { background-color:#eee; }`` then this istransformed into ``style=&quot;background-color:#eee&quot;`` and as an HTMLattribute ``bgcolor=&quot;#eee&quot;``.Having these extra attributes basically as a &quot;back up&quot; for really shitemail clients that can't even take the style attributes. A lot ofprofessional HTML newsletters such as Amazon's use this. You can disablesome attributes in ``disable_basic_attributes``.Capturing logging from ``cssutils``-----------------------------------`cssutils &lt;https://pypi.python.org/pypi/cssutils/&gt;`__ is the library that``premailer`` uses to parse CSS. It will use the python ``logging`` moduleto mention all issues it has with parsing your CSS. If you want to capturethis, you have to pass in ``cssutils_logging_handler`` and``cssutils_logging_level`` (optional). For example like this:.. code:: python    &gt;&gt;&gt; import logging    &gt;&gt;&gt; import premailer    &gt;&gt;&gt; from io import StringIO    &gt;&gt;&gt; mylog = StringIO()    &gt;&gt;&gt; myhandler = logging.StreamHandler(mylog)    &gt;&gt;&gt; p = premailer.Premailer(    ...     cssutils_logging_handler=myhandler,    ...     cssutils_logging_level=logging.INFO    ... )    &gt;&gt;&gt; result = p.transform(&quot;&quot;&quot;    ...         &lt;html&gt;    ...         &lt;style type=&quot;text/css&quot;&gt;    ...         @keyframes foo { from { opacity: 0; } to { opacity: 1; } }    ...         &lt;/style&gt;    ...         &lt;p&gt;Hej&lt;/p&gt;    ...         &lt;/html&gt;    ... &quot;&quot;&quot;)    &gt;&gt;&gt; mylog.getvalue()    'CSSStylesheet: Unknown @rule found. [2:1: @keyframes]\n'If execution speed is on your mind----------------------------------If execution speed is important, it's very plausible that you're not just converting1 HTML document but *a lot* of HTML documents. Then, the first thing you should dois avoid using the ``premailer.transform`` function because it creates a ``Premailer``class instance every time... code:: python    # WRONG WAY!    from premailer import transform    for html_string in get_html_documents():        transformed = transform(html_string, base_url=MY_BASE_URL)        # do something with 'transformed'Instead..... code:: python    # RIGHT WAY    from premailer import Premailer    instance = Premailer(base_url=MY_BASE_URL)    for html_string in get_html_documents():        transformed = instance.transform(html_string)        # do something with 'transformed'Another thing to watch out for when you're reusing the same imported Python codeand reusing it is that internal memoize function caches might build up. Theenvironment variable to control is ``PREMAILER_CACHE_MAXSIZE``. This parameterrequires a little bit of fine-tuning and calibration if your workload is reallybig and memory even becomes an issue.Advanced options----------------Below are some advanced configuration options that probably doesn't matter formost people with regular load.Choosing the cache implementation^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^By default, ``premailer`` uses `LFUCache&lt;https://cachetools.readthedocs.io/en/latest/#cachetools.LFUCache&gt;`__ to cacheselectors, styles and parsed CSS strings. If LFU doesn't serve your purpose, itis possible to switch to an alternate implementation using below environmentvariables.- ``PREMAILER_CACHE``: Can be LRU, LFU or TTL. Default is LFU.- ``PREMAILER_CACHE_MAXSIZE``: Maximum no. of items to be stored in cache. Defaults to 128.- ``PREMAILER_CACHE_TTL``: Time to live for cache entries. Only applicable for TTL cache. Defaults to 1 hour.Getting coding--------------First clone the code and create whatever virtualenv you need, then run:.. code:: bash    pip install -e &quot;.[dev]&quot;Then to run the tests, run:.. code:: bash    toxThis will run the *whole test suite* for every possible version of Pythonit can find on your system. To run the tests more incrementally, openup the ``tox.ini`` and see how it works.Code style is all black-----------------------All code has to be formatted with `Black &lt;https://pypi.org/project/black/&gt;`_and the best tool for checking this is`therapist &lt;https://pypi.org/project/therapist/&gt;`_ since it can help you runall, help you fix things, and help you make sure linting is passing beforeyou git commit. This project also uses ``flake8`` to check other thingsBlack can't check.To check linting with ``tox`` use:.. code:: bash    tox -e lintTo install the ``therapist`` pre-commit hook simply run:.. code:: bash    therapist installWhen you run ``therapist run`` it will only check the files you've touched.To run it for all files use:.. code:: bash    therapist run --use-tracked-filesAnd to fix all/any issues run:.. code:: bash    therapist run --use-tracked-files --fix</longdescription>
</pkgmetadata>