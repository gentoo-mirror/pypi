<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AsyncAlchemyA thin async wrapper for [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy) sessions.Besides being async, the wrapper manages the context of the session for the execution block.Commits incoming changes if successfull or rolls back changes if an exceptions occurs.\*Note*: The upcoming SQLAlchemy 1.4 version will include built-in async functionality, it's recommended to upgrade to it once it's [released](https://github.com/sqlalchemy/sqlalchemy/releases).## Install### Pip```bashpip install asyncalchemy```### From SourceThe project uses [poetry](https://github.com/python-poetry/poetry) for dependency management and packaging.\To run from source clone project and:```bashpip install poetrypoetry install```## Usage### Basic Example```pythonfrom asyncalchemy import create_session_factory# Create AsyncAlchemy session factorysession_factory = create_session_factory(db_uri, Base)# Create sessionasync with session_factory() as session:    await session.query(Something).filter_by(something=&quot;else&quot;)```### Example With Extra Params```pythonfrom sqlalchemy.pool import NullPoolfrom asyncalchemy import create_session_factory# Create session factory with additional SQLAlchemy paramssession_factory = create_session_factory(db_uri, Base, poolclass=NullPool)# Create sessionasync with session_factory() as session:    await second_session.add(Something)    await second_session.flush()    # Reuse session    async with session_factory(reuse_session=session) as second_session:        await session.delete(Something)```</longdescription>
</pkgmetadata>