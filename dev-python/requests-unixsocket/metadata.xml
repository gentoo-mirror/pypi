<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>requests-unixsocket===================.. image:: https://badge.fury.io/py/requests-unixsocket.svg    :target: https://badge.fury.io/py/requests-unixsocket    :alt: Latest Version on PyPI    .. image:: https://github.com/msabramo/requests-unixsocket/actions/workflows/tests.yml/badge.svg    :target: https://github.com/msabramo/requests-unixsocket/actions/workflows/tests.ymlUse `requests &lt;http://docs.python-requests.org/&gt;`_ to talk HTTP via a UNIX domain socketUsage-----Explicit++++++++You can use it by instantiating a special ``Session`` object:.. code-block:: python    import json    import requests_unixsocket    session = requests_unixsocket.Session()    r = session.get('http+unix://%2Fvar%2Frun%2Fdocker.sock/info')    registry_config = r.json()['RegistryConfig']    print(json.dumps(registry_config, indent=4))Implicit (monkeypatching)+++++++++++++++++++++++++Monkeypatching allows you to use the functionality in this module, while makingminimal changes to your code. Note that in the above example we had toinstantiate a special ``requests_unixsocket.Session`` object and call the``get`` method on that object. Calling ``requests.get(url)`` (the easiest wayto use requests and probably very common), would not work. But we can make itwork by doing monkeypatching.You can monkeypatch globally:.. code-block:: python    import requests_unixsocket    requests_unixsocket.monkeypatch()    r = requests.get('http+unix://%2Fvar%2Frun%2Fdocker.sock/info')    assert r.status_code == 200or you can do it temporarily using a context manager:.. code-block:: python    import requests_unixsocket    with requests_unixsocket.monkeypatch():        r = requests.get('http+unix://%2Fvar%2Frun%2Fdocker.sock/info')        assert r.status_code == 200Abstract namespace sockets++++++++++++++++++++++++++To connect to an `abstract namespacesocket &lt;https://utcc.utoronto.ca/~cks/space/blog/python/AbstractUnixSocketsAndPeercred&gt;`_(Linux only), prefix the name with a NULL byte (i.e.: `\0`) - e.g.:.. code-block:: python    import requests_unixsocket    session = requests_unixsocket.Session()    res = session.get('http+unix://\0test_socket/get')    print(res.text)For an example program that illustrates this, see``examples/abstract_namespace.py`` in the git repo. Since abstract namespacesockets are specific to Linux, the program will only work on Linux.See also--------- https://github.com/httpie/httpie-unixsocket - a plugin for `HTTPie &lt;https://httpie.org/&gt;`_ that allows you to interact with UNIX domain sockets</longdescription>
</pkgmetadata>