<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|GHAction| |CircleCI| |codecov||Pydralogo|.. |Pydralogo| image:: https://raw.githubusercontent.com/nipype/pydra/master/docs/logo/pydra_logo.jpg   :width: 200px   :alt: pydra logo.. |GHAction| image:: https://github.com/nipype/pydra/workflows/Pydra/badge.svg   :alt: GitHub Actions CI   :target: https://github.com/nipype/Pydra/actions.. |CircleCI| image:: https://circleci.com/gh/nipype/pydra.svg?style=svg   :alt: CircleCI.. |codecov| image:: https://codecov.io/gh/nipype/pydra/branch/master/graph/badge.svg   :alt: codecov======================Pydra: Dataflow Engine======================A simple dataflow engine with scalable semantics.Pydra is a rewrite of the Nipype engine with mapping and joining asfirst-class operations. It forms the core of the Nipype 2.0 ecosystem.The goal of pydra is to provide a lightweight Python dataflow engine for DAGconstruction, manipulation, and distributed execution.Feature list:=============1. Python 3.7+ using type annotation and `attrs &lt;https://www.attrs.org/en/stable/&gt;`_2. Composable dataflows with simple node semantics. A dataflow can be a node of another dataflow.3. `splitter` and `combiner` provides many ways of compressing complex loop semantics4. Cached execution with support for a global cache across dataflows and users5. Distributed execution, presently via ConcurrentFutures, SLURM, and Dask (this is an experimental implementation with limited testing)`API Documentation &lt;https://nipype.github.io/pydra/&gt;`_Learn more about Pydra======================* `SciPy 2020 Proceedings &lt;http://conference.scipy.org/proceedings/scipy2020/pydra.html&gt;`_* `PyCon 2020 Poster &lt;https://docs.google.com/presentation/d/10tS2I34rS0G9qz6v29qVd77OUydjP_FdBklrgAGmYSw/edit?usp=sharing&gt;`_* `Explore Pydra interactively &lt;https://github.com/nipype/pydra-tutorial&gt;`_ (the tutorial can be also run using Binder service)|Binder|.. |Binder| image:: https://mybinder.org/badge_logo.svg   :alt: BinderPlease note that mybinder times out after an hour.Installation============::    pip install pydraNote that installation fails with older versions of pip on Windows. Upgrade pip before installing:::   pip install â€“upgrade pip   pip install pydraDeveloper installation======================Pydra requires Python 3.7+. To install in developer mode:::    git clone git@github.com:nipype/pydra.git    cd pydra    pip install -e &quot;.[dev]&quot;In order to run pydra's test locally:::    pytest -vs pydraIf you want to test execution with Dask:::    git clone git@github.com:nipype/pydra.git    cd pydra    pip install -e &quot;.[dask]&quot;It is also useful to install pre-commit:::    pip install pre-commit    pre-commit</longdescription>
</pkgmetadata>