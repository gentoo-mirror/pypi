<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyDBRepoIs a simple implementation of the Repository pattern to access data in python, providing extensibility flexibilityand builtin tools to manage databases with this pattern.## Supported databases- SQLite- MySQL- PostgreSQL- MongoDB- Amazon QLDB## Requirements- Python &gt;= 3.7### Postgres- psychopg2-binary### Mysql- mysql-connector-python### MongoDB- pymongo- dnspython### Amazon QLDB- pyqldb## Examples### Entity usage#### Entity modelThis class brings the build it in methods: - `to_dict`: Will take all properties of the created class and will convert it into a dict instance.- `from_dict`: This will take a dict instance and will set the values of every key into a model property with  the same name.- `from_record`: It takes an ordered Iterable object with the name of the fields that will be loaded into the model,  and a tuple with the corresponding valuesEntity models will be used with simple class properties or can be used with the `Field` descriptor of the package##### Example with simple properties```pythonfrom pydbrepo import Entityclass Model(Entity):    id = None    name = Nonemodel = Model.from_dict({&quot;id&quot;: 1, &quot;name&quot;: &quot;some&quot;})# Model({&quot;id&quot;: 1, &quot;name&quot;: &quot;some&quot;})print(model.id) # =&gt; 1print(model.name) # =&gt; some```##### Example with property decorators```pythonfrom pydbrepo import Entityclass Model(Entity):    def __init__(self):        super().__init__()                self.id = None        self.name = None            @property    def id(self):        return self._id        @id.setter    def id(self, value):        self._id = value            @property    def name(self):        return self._name        @name.setter    def name(self, value):        self._name = valuemodel = Model.from_dict({&quot;id&quot;: 1, &quot;name&quot;: &quot;some&quot;})# Model({&quot;id&quot;: 1, &quot;name&quot;: &quot;some&quot;})print(model.id) # =&gt; 1print(model.name) # =&gt; some```##### Example with Field descriptor```pythonfrom pydbrepo import Entity, Field, named_fields@named_fieldsclass Model(Entity):    id = Field(type_=int)    name = Field(type_=str)model = Model.from_dict({&quot;id&quot;: 1, &quot;name&quot;: &quot;some&quot;})# Model({&quot;id&quot;: 1, &quot;name&quot;: &quot;some&quot;})print(model.id) # =&gt; 1print(model.name) # =&gt; some```##### Example of casting values with Field descriptor```pythonfrom uuid import UUIDfrom pydbrepo import Entity, Field, named_fields@named_fieldsclass Model(Entity):    id = Field(type_=(UUID, str), cast_to=UUID, cast_if=str)    name = Field(type_=str)model = Model.from_dict({&quot;id&quot;: '10620c02-d80e-4950-b0a2-34a5f2d34ae5', &quot;name&quot;: &quot;some&quot;})# Model({&quot;id&quot;: UUID('10620c02-d80e-4950-b0a2-34a5f2d34ae5'), &quot;name&quot;: &quot;some&quot;})print(model.id) # =&gt; 10620c02-d80e-4950-b0a2-34a5f2d34ae5print(model.name) # =&gt; some```##### Example of casting from a callback function```pythonfrom datetime import date, datetimefrom pydbrepo import Entity, Field, named_fieldsdef cast_epoch(value):    if isinstance(value, date):        return int(value.strftime(&quot;%s&quot;))        if isinstance(value, datetime):        return int(value.timestamp())@named_fieldsclass Model(Entity):    name = Field(type_=str)    epoch = Field(type_=(int, date, datetime), cast_to=cast_epoch, cast_if=(date, datetime))model = Model.from_dict({&quot;name&quot;: &quot;some&quot;, &quot;epoch&quot;: datetime.now()})# Model({&quot;name&quot;: &quot;some&quot;, &quot;epoch&quot;: 1231231231})print(model.name) # =&gt; someprint(model.epoch) # =&gt; 1231231231```##### Example of iterable fields and casting with Field descriptor```pythonfrom pydbrepo import Entity, Field, named_fields@named_fieldsclass Item(Entity):    name = Field(type_=str)    price = Field(type_=float)@named_fieldsclass Model(Entity):    id = Field(type_=int)    name = Field(type_=str)    items = Field(type_=list, cast_items_to=Item)model = Model.from_dict({    &quot;id&quot;: 1,     &quot;name&quot;: &quot;some&quot;,     &quot;items&quot;: [        {&quot;name&quot;: &quot;some&quot;, &quot;price&quot;: 5.99},        {&quot;name&quot;: &quot;nothing&quot;, &quot;price&quot;: 6.99},    ]})# Model({&quot;id&quot;: 1, &quot;name&quot;: &quot;some&quot;, &quot;items&quot;: [Item({&quot;name&quot;: &quot;some&quot;, &quot;price&quot;: 5.99}), Item({&quot;name&quot;: &quot;nothing&quot;, &quot;price&quot;: 6.99})]})print(model.id) # =&gt; 1print(model.name) # =&gt; someprint(model.items) # =&gt; [Item({&quot;name&quot;: &quot;some&quot;, &quot;price&quot;: 5.99}), Item({&quot;name&quot;: &quot;nothing&quot;, &quot;price&quot;: 6.99})]print(model.items[0].price) # =&gt; 5.99```</longdescription>
</pkgmetadata>