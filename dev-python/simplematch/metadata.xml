<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img width=&quot;500&quot; src=&quot;https://raw.githubusercontent.com/tfeldmann/simplematch/main/docs/simplematch.svg&quot; alt=&quot;logo&quot;&gt;# simplematch&gt; Minimal, super readable string pattern matching for python.[![PyPI Version][pypi-image]][pypi-url]![PyPI - License](https://img.shields.io/pypi/l/simplematch)[![tests](https://github.com/tfeldmann/simplematch/actions/workflows/tests.yml/badge.svg?branch=main)](https://github.com/tfeldmann/simplematch/actions/workflows/tests.yml)```pythonimport simplematchsimplematch.match(&quot;He* {planet}!&quot;, &quot;Hello World!&quot;)&gt;&gt;&gt; {&quot;planet&quot;: &quot;World&quot;}simplematch.match(&quot;It* {temp:float}°C *&quot;, &quot;It's -10.2°C outside!&quot;)&gt;&gt;&gt; {&quot;temp&quot;: -10.2}```## Installation`pip install simplematch`(Or just drop the `simplematch.py` file in your project.)## Syntax`simplematch` has only two syntax elements:- wildcard `*`- capture group `{name}`Capture groups can be named (`{name}`), unnamed (`{}`) and typed (`{name:float}`).The following types are available:- `int`- `float`- `email`- `url`- `ipv4`- `ipv6`- `bitcoin`- `ssn` (social security number)- `ccard` (matches Visa, MasterCard, American Express, Diners Club, Discover, JCB)For now, only named capture groups can be typed.Then use one of these functions:```pythonimport simplematchsimplematch.match(pattern, string) # -&gt; returns a `dict` on match, `None` otherwise.simplematch.test(pattern, string)  # -&gt; returns `True` on match, `False` otherwise.```Or use a `Matcher` object:```pythonimport simplematch as smmatcher = sm.Matcher(pattern)matcher.match(string) # -&gt; returns a dict or Nonematcher.test(string)  # -&gt; returns True / Falsematcher.regex         # -&gt; shows the generated regex```## Basic usage```pythonimport simplematch as sm# extracting datasm.match(    pattern=&quot;Invoice_*_{year}_{month}_{day}.pdf&quot;,    string=&quot;Invoice_RE2321_2021_01_15.pdf&quot;)&gt;&gt;&gt; {&quot;year&quot;: &quot;2021&quot;, &quot;month&quot;: &quot;01&quot;, &quot;day&quot;: &quot;15&quot;}# test match onlysm.test(&quot;ABC-{value:int}&quot;, &quot;ABC-13&quot;)&gt;&gt;&gt; True```## Typed matches```pythonimport simplematch as smmatcher = sm.Matcher(&quot;{year:int}-{month:int}: {value:float}&quot;)# extracting datamatcher.match(&quot;2021-01: -12.786&quot;)&gt;&gt;&gt; {&quot;year&quot;: 2021, &quot;month&quot;: 1, &quot;value&quot;: -12.786}# month is no integer -&gt; no match and return `None`.matcher.match(&quot;2021-AB: Hello&quot;)&gt;&gt;&gt; None# no extraction, only test for matchmatcher.test(&quot;1234-01: 123.123&quot;)&gt;&gt;&gt; True# show generated regular expressionmatcher.regex&gt;&gt;&gt; '^(?P&lt;year&gt;[+-]?[0-9]+)\\-(?P&lt;month&gt;[+-]?[0-9]+):\\ (?P&lt;value&gt;[+-]?(?:[0-9]*[.])?[0-9]+)$'# show registered convertersmatcher.converters&gt;&gt;&gt; {'year': &lt;class 'int'&gt;, 'month': &lt;class 'int'&gt;, 'value': &lt;class 'float'&gt;}```## Register your own typesYou can register your own types to be available for the `{name:type}` matching syntaxwith the `register_type` function.`simplematch.register_type(name, regex, converter=str)`- `name` is the name to use in the matching syntax- `regex` is a regular expression to match your type- `converter` is a callable to convert a match (`str` by default)### ExampleRegister a `smiley` type to detect smileys (`:)`, `:(`, `:/`) and getting their moods:```pythonimport simplematch as smdef mood_convert(smiley):    moods = {        &quot;:)&quot;: &quot;good&quot;,        &quot;:(&quot;: &quot;bad&quot;,        &quot;:/&quot;: &quot;sceptic&quot;,    }    return moods.get(smiley, &quot;unknown&quot;)sm.register_type(&quot;smiley&quot;, r&quot;:[\)\(\/]&quot;, mood_convert)sm.match(&quot;I'm feeling {mood:smiley} *&quot;, &quot;I'm feeling :) today!&quot;)&gt;&gt;&gt; {&quot;mood&quot;: &quot;good&quot;}```## CLI CommandYou can also install `simplematch` for use as a CLI command e.g. using `pipx`.```shpipx install simplematch```### Usage```shusage: simplematch [-h] [--regex] pattern [strings ...]positional arguments:  pattern     A matching pattern  strings     The string to matchoptions:  -h, --help  show this help message and exit  --regex     Show the generated regular expression```### ExampleExtract a date from a specific file name:```shsimplematch &quot;Invoice_*_{year}_{month}_{day}.pdf&quot; &quot;Invoice_RE2321_2021_01_15.pdf&quot;&gt;&gt;&gt; {&quot;year&quot;: &quot;2021&quot;, &quot;month&quot;: &quot;01&quot;, &quot;day&quot;: &quot;15&quot;}```## Background`simplematch` aims to fill a gap between parsing with `str.split()` and regularexpressions. It should be as simple as possible, fast and stable.The `simplematch` syntax is transpiled to regular expressions under the hood, somatching performance should be just as good.I hope you get some good use out of this!## ContributionsContributions are welcome! Just submit a PR and maybe get in touch with me via emailbefore big changes.## License[MIT](https://choosealicense.com/licenses/mit/)&lt;!-- Badges --&gt;[pypi-image]: https://img.shields.io/pypi/v/simplematch[pypi-url]: https://pypi.org/project/simplematch/</longdescription>
</pkgmetadata>