<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>tensorflow-wavelets is an implementation of Custom Layers for Neural Networks:- *Discrete Wavelets Transform Layer*- *Duel Tree Complex Wavelets Transform Layer*- *Multi Wavelets Transform Layer*# ```git clone https://github.com/Timorleiderman/tensorflow-wavelets.gitcd tensorflow-waveletspip install -r requirements.txt```## Installation#### tested with python 3.8```pip install tensorflow-wavelets```# Usage```from tensorflow import kerasimport tensorflow_wavelets.Layers.DWT as DWTimport tensorflow_wavelets.Layers.DTCWT as DTCWTimport tensorflow_wavelets.Layers.DMWT as DMWT# Custom Activation function Layerimport tensorflow_wavelets.Layers.Threshold as Threshold```# Examples## DWT(name=&quot;haar&quot;, concat=0)### &quot;name&quot; can be found in pywt.wavelist(family)### concat = 0 means to split to 4 smaller layers```from tensorflow import kerasmodel = keras.Sequential()model.add(keras.Input(shape=(28, 28, 1)))model.add(DWT.DWT(name=&quot;haar&quot;,concat=0))model.add(keras.layers.Flatten())model.add(keras.layers.Dense(nb_classes, activation=&quot;softmax&quot;))model.summary()```    _________________________________________________________________    Layer (type)                 Output Shape              Param #    =================================================================    dwt_9_haar (DWT)             (None, 14, 14, 4)         0    _________________________________________________________________    flatten_9 (Flatten)          (None, 784)               0    _________________________________________________________________    dense_9 (Dense)              (None, 10)                7850    =================================================================    Total params: 7,850    Trainable params: 7,850    Non-trainable params: 0    _________________________________________________________________### name = &quot;db4&quot; concat = 1```model = keras.Sequential()model.add(keras.layers.InputLayer(input_shape=(28, 28, 1)))model.add(DWT.DWT(name=&quot;db4&quot;, concat=1))model.summary()```    Model: &quot;sequential&quot;    _________________________________________________________________    Layer (type)                 Output Shape              Param #    =================================================================    dwt_db4 (DWT)                (None, 34, 34, 1)         0    =================================================================    Total params: 0    Trainable params: 0    Non-trainable params: 0    _________________________________________________________________# DMWT### functional example with Sure Threshold```x_inp = keras.layers.Input(shape=(512, 512, 1))x = DMWT.DMWT(&quot;ghm&quot;)(x_inp)x = Threshold.Threshold(algo='sure', mode='hard')(x) # use &quot;soft&quot; or &quot;hard&quot;x = DMWT.IDMWT(&quot;ghm&quot;)(x)model = keras.models.Model(x_inp, x, name=&quot;MyModel&quot;)model.summary()```    Model: &quot;MyModel&quot;    _________________________________________________________________    Layer (type)                 Output Shape              Param #    =================================================================    input_1 (InputLayer)         [(None, 512, 512, 1)]     0    _________________________________________________________________    dmwt (DMWT)                  (None, 1024, 1024, 1)     0    _________________________________________________________________    sure_threshold (SureThreshol (None, 1024, 1024, 1)     0    _________________________________________________________________    idmwt (IDMWT)                (None, 512, 512, 1)       0    =================================================================    Total params: 0    Trainable params: 0    Non-trainable params: 0    _________________________________________________________________## PyPi upload:```pip install --upgrade buildpip install --upgrade twinepython -m build```**Free Software, Hell Yeah!**</longdescription>
</pkgmetadata>