<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>OpenTelemetry Propagator for AWS X-Ray Service==============================================|pypi|.. |pypi| image:: https://badge.fury.io/py/opentelemetry-propagator-aws-xray.svg   :target: https://pypi.org/project/opentelemetry-propagator-aws-xray/This library provides the propagator necessary to inject or extract a tracingcontext across AWS services.Installation------------::    pip install opentelemetry-propagator-aws-xrayUsage (AWS X-Ray Propagator)----------------------------**NOTE**: Because the parent context extracted from the `X-Amzn-Trace-Id` headerassumes the context is _not_ sampled by default, users should make sure to add`Sampled=1` to their `X-Amzn-Trace-Id` headers so that the child spans aresampled.Use the provided AWS X-Ray Propagator to inject the necessary context intotraces sent to external systems.This can be done by either setting this environment variable:::    export OTEL_PROPAGATORS = xrayOr by setting this propagator in your instrumented application:.. code-block:: python    from opentelemetry.propagate import set_global_textmap    from opentelemetry.propagators.aws import AwsXRayPropagator    set_global_textmap(AwsXRayPropagator())References----------* `OpenTelemetry Project &lt;https://opentelemetry.io/&gt;`_* `AWS X-Ray Propagation Trace Header &lt;https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader&gt;`_</longdescription>
</pkgmetadata>