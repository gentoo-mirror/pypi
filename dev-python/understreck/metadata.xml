<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========Understreck===========.. image:: https://img.shields.io/pypi/v/understreck.svg        :target: https://pypi.python.org/pypi/understreck.. image:: https://travis-ci.com/cfarvidson/understreck.svg?branch=master        :target: https://travis-ci.com/cfarvidson/understreck.. image:: https://readthedocs.org/projects/understreck/badge/?version=latest        :target: https://understreck.readthedocs.io/en/latest/?badge=latest        :alt: Documentation Status.. image:: https://img.shields.io/badge/code%20style-black-000000.svg        :target: https://github.com/ambv/black        :alt: Code style: black.. image:: https://pepy.tech/badge/understreck        :target: https://pepy.tech/project/understreck        :alt: downloadsA collection of nice utility functions for python* Free software: GNU General Public License v3* Documentation: https://understreck.readthedocs.io.Features--------* Perform a safe get on a nested dictionary with the nested_get function* Split a list into chunks* Filter a list of dictionaries* Strip indents from multiline stringsExamples--------Get example::    import understreck as _    test_dictionary = {        &quot;foo&quot;: {            &quot;second_level&quot;: {&quot;third_level&quot;: &quot;it works&quot;, &quot;third_level_sibling&quot;: False},            &quot;second_level_list&quot;: [&quot;Hello&quot;, &quot;World&quot;, {&quot;planet&quot;: &quot;Earth&quot;}, [&quot;Hello&quot;, &quot;World&quot;, {&quot;planet&quot;: &quot;jupiter&quot;}, ]],        }    }    # Using dot delimited strings    result = _.get(test_dictionary, &quot;foo.second_level.third_level&quot;)  # result == &quot;it works&quot;    result = _.get(test_dictionary, &quot;foo.second_level.DOES_NOT_EXIST&quot;)  # result == None    # Using a list or tuple    result = _.get(test_dictionary, [&quot;foo&quot;, &quot;second_level&quot;, &quot;third_level&quot;])  # result == &quot;it works&quot;    result = _.get(test_dictionary, [&quot;foo&quot;, &quot;second_level&quot;, &quot;DOES_NOT_EXIST&quot;])  # result == None    # Getting elements in list    result = _.get(test_dictionary, &quot;foo.second_level_list[0]&quot;)  # result == &quot;Hello&quot;    result = _.get(test_dictionary, &quot;foo.second_level_list[1]&quot;)  # result == &quot;World&quot;    result = _.get(test_dictionary, &quot;foo.second_level_list[2].planet&quot;)  # result == &quot;Earth&quot;    # Getting a property in a nested list     nested_list = {                    &quot;foo&quot;: {                        &quot;bar&quot;: [                            &quot;x&quot;, [                                &quot;first&quot;, &quot;second&quot;, {&quot;name&quot;: &quot;Hello World&quot;}                            ]                        ]                    }                  }    result = _.get(nested_list, &quot;foo.bar[1][2].name&quot;)  # result == &quot;Hello World&quot;Chunks example::    import understreck as _    to_chunk = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;]    result = _.chunks.split(to_chunk, 2)  # result == [[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;], [&quot;four&quot;, &quot;five&quot;]]Filter example::    import understreck as _    users = [            {&quot;user&quot;: &quot;barney&quot;, &quot;age&quot;: 36, &quot;active&quot;: True},            {&quot;user&quot;: &quot;fred&quot;, &quot;age&quot;: 40, &quot;active&quot;: False},        ]    # Using a lambda function    result = _.filter(users, lambda x: not x.get(&quot;active&quot;))  # result == [{&quot;user&quot;: &quot;fred&quot;, &quot;age&quot;: 40, &quot;active&quot;: False}]    # Using partial dictionary    result = _.filter(users, {&quot;age&quot;: 36, &quot;active&quot;: True})  # result == [{&quot;user&quot;: &quot;barney&quot;, &quot;age&quot;: 36, &quot;active&quot;: True}]    # Using a list with a property name and value    result = _.filter(users, [&quot;active&quot;, False])  # result == [{&quot;user&quot;: &quot;fred&quot;, &quot;age&quot;: 40, &quot;active&quot;: False}]    # Using a list with a property name. The value must be truthy.    result = _.filter(users, [&quot;active&quot;])  # result == [{&quot;user&quot;: &quot;barney&quot;, &quot;age&quot;: 36, &quot;active&quot;: True}]Strip indents example::    import understreck as _    def some_function():        to_strip = &quot;&quot;&quot;This is a        multi-line        string&quot;&quot;&quot;        _.strip(to_strip)  # &quot;This is a\nmulti-line\nstring&quot;Credits-------I have to credit the Lodash_ project for inspiration!This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template... _Lodash: https://lodash.com.. _Cookiecutter: https://github.com/audreyr/cookiecutter.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage=======History=======Unreleased----------1.0.0 (2020-03-03)------------------* Get elements from nested lists0.5.1 (2019-11-09)------------------* Updates dev dependencies 0.5.0 (2019-05-03)------------------* Updates dev dependencies* Moves to the new repository0.4.0 (2019-05-03)------------------* Adds Understreck.strip that strips indents0.3.0 (2019-05-03)------------------* Adds Understreck.filter with inspired by https://lodash.com/docs/4.17.11#filter* Updated the travis button URL* Replaced nested_get with get in the README. (nested_get still works)* Black formatting0.2.1 (2018-12-10)------------------* Add Understreck.chunks0.2.0 (2018-11-12)------------------* Add get as an alias for nested get0.1.1 (2018-11-02)------------------* Update the readme0.1.0 (2018-11-02)------------------* First release on PyPI.</longdescription>
</pkgmetadata>