<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GAPandas4GAPandas4 is a Python package for querying the Google Analytics Data API for GA4 and displaying the results in a Pandas dataframe. It is the successor to the [GAPandas](https://practicaldatascience.co.uk/data-science/how-to-access-google-analytics-data-in-pandas-using-gapandas) package, which did the same thing for GA3 or Universal Analytics. GAPandas4 is a wrapper around the official Google Analytics Data API package and simplifies imports and queries, requiring far less code. ### Before you startIn order to use GAPandas4 you will first need to [create a Google Service Account](https://practicaldatascience.co.uk/data-engineering/how-to-create-a-google-service-account-client-secrets-json-key) with access to the Google Analytics Data API and export a client secrets JSON keyfile to use for authentication. You'll also need to add the service account email address as a user on the Google Analytics 4 property you wish to access, and you'll need to note the property ID to use in your queries.  ### InstallationAs this is currently in alpha, there's currently no Pip package, however, you can install the code into your Python environment directly from GitHub using the command below. It will run fine in a Jupyter notebook, a Python IDE, or a Python script. ```commandlinepip3 install git+https://github.com/practical-data-science/gapandas4.git```### UsageGAPandas4 has been written to allow you to use as little code as possible. Unlike the previous version of GAPandas for Universal Analytics, which used a payload based on a Python dictionary, GAPandas4 now uses a Protobuf (Protocol Buffer) payload as used in the API itself. ### ReportThe `query()` function is used to send a protobug API payload to the API. The function supports various report types via the `report_type` argument. Standard reports are handled using `report_type=&quot;report&quot;`, but this is also the default. Data are returned as a Pandas dataframe. ```pythonimport gapandas4 as gpservice_account = 'client_secrets.json'property_id = 'xxxxxxxxx'report_request = gp.RunReportRequest(    property=f&quot;properties/{property_id}&quot;,    dimensions=[        gp.Dimension(name=&quot;country&quot;),        gp.Dimension(name=&quot;city&quot;)    ],    metrics=[        gp.Metric(name=&quot;activeUsers&quot;)    ],    date_ranges=[gp.DateRange(start_date=&quot;2022-06-01&quot;, end_date=&quot;2022-06-01&quot;)],)df = gp.query(service_account, report_request, report_type=&quot;report&quot;)print(df.head())```### Batch reportIf you construct a protobuf payload using `BatchRunReportsRequest()` you can pass up to five requests at once. These are returned as a list of Pandas dataframes, so will need to access them using their index. ```pythonimport gapandas4 as gpservice_account = 'client_secrets.json'property_id = 'xxxxxxxxx'batch_report_request = gp.BatchRunReportsRequest(    property=f&quot;properties/{property_id}&quot;,    requests=[        gp.RunReportRequest(            dimensions=[                gp.Dimension(name=&quot;country&quot;),                gp.Dimension(name=&quot;city&quot;)            ],            metrics=[                gp.Metric(name=&quot;activeUsers&quot;)            ],            date_ranges=[gp.DateRange(start_date=&quot;2022-06-01&quot;, end_date=&quot;2022-06-01&quot;)]        ),        gp.RunReportRequest(            dimensions=[                gp.Dimension(name=&quot;country&quot;),                gp.Dimension(name=&quot;city&quot;)            ],            metrics=[                gp.Metric(name=&quot;activeUsers&quot;)            ],            date_ranges=[gp.DateRange(start_date=&quot;2022-06-02&quot;, end_date=&quot;2022-06-02&quot;)]        )    ])df = gp.query(service_account, batch_report_request, report_type=&quot;batch_report&quot;)print(df[0].head())print(df[1].head())```### Pivot reportConstructing a report using `RunPivotReportRequest()` will return pivoted data in a single Pandas dataframe. ```pythonimport gapandas4 as gpservice_account = 'client_secrets.json'property_id = 'xxxxxxxxx'pivot_request = gp.RunPivotReportRequest(    property=f&quot;properties/{property_id}&quot;,    dimensions=[gp.Dimension(name=&quot;country&quot;),                gp.Dimension(name=&quot;browser&quot;)],    metrics=[gp.Metric(name=&quot;sessions&quot;)],    date_ranges=[gp.DateRange(start_date=&quot;2022-05-30&quot;, end_date=&quot;today&quot;)],    pivots=[        gp.Pivot(            field_names=[&quot;country&quot;],            limit=5,            order_bys=[                gp.OrderBy(                    dimension=gp.OrderBy.DimensionOrderBy(dimension_name=&quot;country&quot;)                )            ],        ),        gp.Pivot(            field_names=[&quot;browser&quot;],            offset=0,            limit=5,            order_bys=[                gp.OrderBy(                    metric=gp.OrderBy.MetricOrderBy(metric_name=&quot;sessions&quot;), desc=True                )            ],        ),    ],)df = gp.query(service_account, pivot_request, report_type=&quot;pivot&quot;)print(df.head())```### Batch pivot reportConstructing a payload using `BatchRunPivotReportsRequest()` will allow you to run up to five pivot reports. These are returned as a list of Pandas dataframes. ```pythonimport gapandas4 as gpservice_account = 'client_secrets.json'property_id = 'xxxxxxxxx'batch_pivot_request = gp.BatchRunPivotReportsRequest(    property=f&quot;properties/{property_id}&quot;,    requests=[        gp.RunPivotReportRequest(            dimensions=[gp.Dimension(name=&quot;country&quot;),                        gp.Dimension(name=&quot;browser&quot;)],                metrics=[gp.Metric(name=&quot;sessions&quot;)],                date_ranges=[gp.DateRange(start_date=&quot;2022-05-30&quot;, end_date=&quot;today&quot;)],                pivots=[                    gp.Pivot(                        field_names=[&quot;country&quot;],                        limit=5,                        order_bys=[                            gp.OrderBy(                                dimension=gp.OrderBy.DimensionOrderBy(dimension_name=&quot;country&quot;)                            )                        ],                    ),                    gp.Pivot(                        field_names=[&quot;browser&quot;],                        offset=0,                        limit=5,                        order_bys=[                            gp.OrderBy(                                metric=gp.OrderBy.MetricOrderBy(metric_name=&quot;sessions&quot;), desc=True                            )                        ],                    ),                ],        ),        gp.RunPivotReportRequest(            dimensions=[gp.Dimension(name=&quot;country&quot;),                        gp.Dimension(name=&quot;browser&quot;)],                metrics=[gp.Metric(name=&quot;sessions&quot;)],                date_ranges=[gp.DateRange(start_date=&quot;2022-05-30&quot;, end_date=&quot;today&quot;)],                pivots=[                    gp.Pivot(                        field_names=[&quot;country&quot;],                        limit=5,                        order_bys=[                            gp.OrderBy(                                dimension=gp.OrderBy.DimensionOrderBy(dimension_name=&quot;country&quot;)                            )                        ],                    ),                    gp.Pivot(                        field_names=[&quot;browser&quot;],                        offset=0,                        limit=5,                        order_bys=[                            gp.OrderBy(                                metric=gp.OrderBy.MetricOrderBy(metric_name=&quot;sessions&quot;), desc=True                            )                        ],                    ),                ],        )    ])df = gp.query(service_account, batch_pivot_request, report_type=&quot;batch_pivot&quot;)print(df[0].head())print(df[1].head())```#### MetadataThe `get_metadata()` function will return all metadata on dimensions and metrics within the Google Analytics 4 property. ```pythonmetadata = gp.get_metadata(service_account, property_id)print(metadata)```### Current features- Support for all current API functionality including `RunReportRequest`, `BatchRunReportsRequest`,  `RunPivotReportRequest`,  `BatchRunPivotReportsRequest`, `RunRealtimeReportRequest`, and `GetMetadataRequest`. - Returns data in a Pandas dataframe, or a list of Pandas dataframes. </longdescription>
</pkgmetadata>