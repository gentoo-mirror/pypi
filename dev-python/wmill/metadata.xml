<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># wmillThe core client for the [Windmill](https://windmill.dev) platform.## Usage### Basic UsageThe `wmill` package has several methods at the top-level for the most frequent operations you will need.The following are some common examples:```pythonimport timeimport wmilldef main():    # Get the value of a variable    wmill.get_variable(&quot;u/user/variable_path&quot;)        # Run a script synchronously and get the result    wmill.run_script(&quot;f/pathto/script&quot;, args={&quot;arg1&quot;: &quot;value1&quot;})        # Get the value of a resource    wmill.get_resource(&quot;u/user/resource_path&quot;)        # Set the script's state    wmill.set_state({&quot;ts&quot;: time.time()})        # Get the script's state    wmill.get_state()```### Advanced UsageThe `wmill` package also exposes the `Windmill` class, which is the core client for the Windmill platform.```pythonimport timefrom wmill import Windmilldef main():    client = Windmill(        # token=...  &lt;- this is optional. otherwise the client will look for the WM_TOKEN env var    )    # Get the current version of the client    client.version    # Get the current user    client.user        # Convenience get and post methods exist for https://app.windmill.dev/openapi.html#/    # these are thin wrappers around the httpx library's get and post methods    # list worker groups    client.get(&quot;/configs/list_worker_groups&quot;)    # create a group    client.post(        f&quot;/w/{client.workspace}/groups/create&quot;,        json={            &quot;name&quot;: &quot;my-group&quot;,            &quot;summary&quot;: &quot;my group summary&quot;,        }    )        # Get and set the state of the script    now = time.time()    client.state = {&quot;ts&quot;: now}    assert client.state == {&quot;ts&quot;: now}        # Run a job asynchronously    job_id = client.run_script_async(path=&quot;path/to/script&quot;)    # Get its status    client.get_job_status(job_id)    # Get its result    client.get_result(job_id)```</longdescription>
</pkgmetadata>