<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Multicallable: Simplified Interface for Multicall`Multicallable` provides a streamlined way to work with the Multicall package, allowing you to batch multiple contract calls into a single request.### InstallationInstall the package using the following command:```shellpip install -U multicallable```### Getting Started#### Initialize Web3 or AsyncWeb3First, import the Web3 library and set up a Web3 instance. The setup differs depending on whether you are using synchronous or asynchronous operations.For synchronous operations:```pythonfrom web3 import Web3# Specify Ethereum RPC URLETH_RPC_URL = 'https://rpc.ankr.com/eth'# Initialize Web3 instancew3 = Web3(Web3.HTTPProvider(ETH_RPC_URL))```For asynchronous operations:```pythonfrom web3 import AsyncWeb3# Initialize AsyncWeb3 instancew3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider(ETH_RPC_URL))```#### Import and Initialize MulticallableNext, import the `Multicallable` class and initialize it for a specific token:```pythonfrom multicallable import Multicallable# Truncated ERC20 ABI for demonstrationERC20_ABI = '[{&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;name&quot;, ...'# sample token contract addressTOKEN = '0xDE5ed76E7c05eC5e4572CfC88d1ACEA165109E44'# Initialize Multicallable instancemulticallable = Multicallable(TOKEN, ERC20_ABI, w3)```#### AsyncMulticallable: The Asynchronous AlternativeFor asynchronous use-cases, `AsyncMulticallable` is available. Unlike `Multicallable`, its constructor is empty, and it includes an asynchronous `setup` function that takes the same parameters:```pythonfrom multicallable import AsyncMulticallable# Initialize AsyncMulticallable instanceasync_multicallable = AsyncMulticallable()await async_multicallable.setup(TOKEN, ERC20_ABI, w3)  # Make sure w3 is an AsyncWeb3 instance```### Basic Operations#### Querying Multiple BalancesFor synchronous operations:```pythonaddresses = [    # List of addresses]balances = multicallable.balanceOf(addresses).call()```For asynchronous operations:```pythonaddresses = [    # List of addresses]balances = await async_multicallable.balanceOf(addresses).call()```#### Detailed Call InformationFor synchronous operations:```pythondetailed_info = multicallable.balanceOf(addresses).detailed_call()```For asynchronous operations:```pythondetailed_info = await async_multicallable.balanceOf(addresses).detailed_call()```### Advanced Features#### Handling Failed CallsBy default, all calls must succeed for the batch call to return successfully. Use `require_success=False` to allow partial success:```pythonmc = Multicallable(contract_address, contract_abi, w3)partial_result = mc.getNum(list(range(7))).call(require_success=False)```#### Batching Large Number of CallsFor large number of calls, you can specify the number of buckets using the `n` parameter:```pythonresult = mc.getNum(list(range(70000))).call(require_success=False, n=100)```#### Progress IndicatorEnable a progress bar for better visibility into the batch processing:```pythonresult = mc.getNum(list(range(70000))).call(n=100, progress_bar=True, require_success=False)```#### Custom Multicall InstanceYou can also use a custom Multicall instance with a custom address and ABI:```pythonfrom multicallable.multicall import Multicallmulticall = Multicall(w3, custom_address, custom_abi)mc = Multicallable(contract_address, contract_abi, multicall=multicall)```</longdescription>
</pkgmetadata>