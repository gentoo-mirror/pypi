<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># lambda-proxy[![Packaging status](https://badge.fury.io/py/lambda-proxy.svg)](https://badge.fury.io/py/lambda-proxy)[![CircleCI](https://circleci.com/gh/vincentsarago/lambda-proxy.svg?style=svg)](https://circleci.com/gh/vincentsarago/lambda-proxy)[![codecov](https://codecov.io/gh/vincentsarago/lambda-proxy/branch/master/graph/badge.svg)](https://codecov.io/gh/vincentsarago/lambda-proxy)A zero-requirement proxy linking AWS API Gateway `{proxy+}` requests and AWS Lambda.&lt;img width=&quot;600&quot; alt=&quot;&quot; src=&quot;https://user-images.githubusercontent.com/10407788/58742966-6ff50480-83f7-11e9-81f7-3ba7aa2310bb.png&quot;&gt;## Install```bash$ pip install -U pip$ pip install lambda-proxy```Or install from source:```bash$ git clone https://github.com/vincentsarag/lambda-proxy.git$ cd lambda-proxy$ pip install -U pip$ pip install -e .```# UsageLambda proxy is designed to work well with both API Gateway's REST API and thenewer and cheaper HTTP API. If you have issues using with the HTTP API, pleaseopen an issue.With GET request```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.route('/test/tests/&lt;id&gt;', methods=['GET'], cors=True)def print_id(id):    return ('OK', 'plain/text', id)```With POST request```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.route('/test/tests/&lt;id&gt;', methods=['POST'], cors=True)def print_id(id, body):    return ('OK', 'plain/text', id)```**Note**Starting in version 5.2.0, users can now add route using `@APP.get` and `@APP.post` removing the need to add `methods=[**]`## Binary bodyStarting from version 5.0.0, lambda-proxy will decode base64 encoded body on POST message.Pre 5.0.0```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.route('/test', methods=['POST']e)def print_id(body):    body = json.loads(base64.b64decode(body).decode())```Post 5.0.0```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.route('/test', methods=['POST']e)def print_id(body):    body = json.loads(body)```# RoutesRoute schema is simmilar to the one used in [Flask](http://flask.pocoo.org/docs/1.0/api/#url-route-registrations)&gt; Variable parts in the route can be specified with angular brackets `/user/&lt;username&gt;`. By default a variable part in the URL accepts any string without a slash however a different converter can be specified as well by using `&lt;converter:name&gt;`.Converters:- `int`: integer- `string`: string- `float`: float number- `uuid`: UUIDexample:- `/app/&lt;user&gt;/&lt;id&gt;` (`user` and `id` are variables)- `/app/&lt;string:value&gt;/&lt;float:num&gt;` (`value` will be a string, while `num` will be a float)## RegexYou can also add regex parameters descriptions using special converter `regex()`example:```python@APP.get(&quot;/app/&lt;regex([a-z]+):regularuser&gt;&quot;)def print_user(regularuser):    return ('OK', 'plain/text', f&quot;regular {regularuser}&quot;)@APP.get(&quot;/app/&lt;regex([A-Z]+):capitaluser&gt;&quot;)def print_user(capitaluser):    return ('OK', 'plain/text', f&quot;CAPITAL {capitaluser}&quot;)```#### Warningwhen using **regex()** you must use different variable names or the route might not show up in the documentation.```python@APP.get(&quot;/app/&lt;regex([a-z]+):user&gt;&quot;)def print_user(user):    return ('OK', 'plain/text', f&quot;regular {user}&quot;)@APP.get(&quot;/app/&lt;regex([A-Z]+):user&gt;&quot;)def print_user(user):    return ('OK', 'plain/text', f&quot;CAPITAL {user}&quot;)```This app will work but the documentation will only show the second route because in `openapi.json`, route names will be `/app/{user}` for both routes.# Route Options- **path**: the URL rule as string- **methods**: list of HTTP methods allowed, default: [&quot;GET&quot;]- **cors**: allow CORS, default: `False`- **token**: set `access_token` validation- **payload_compression_method**: Enable and select an output body compression- **binary_b64encode**: base64 encode the output body (API Gateway)- **ttl**: Cache Control setting (Time to Live) **(Deprecated in 6.0.0)**- **cache_control**: Cache Control setting- **description**: route description (for documentation)- **tag**: list of tags (for documentation)## Cache ControlAdd a Cache Control header with a Time to Live (TTL) in seconds.```pythonfrom lambda_proxy.proxy import APIAPP = API(app_name=&quot;app&quot;)@APP.get('/test/tests/&lt;id&gt;', cors=True, cache_control=&quot;public,max-age=3600&quot;)def print_id(id):   return ('OK', 'plain/text', id)```Note: If function returns other then &quot;OK&quot;, Cache-Control will be set to `no-cache`## Binary responsesWhen working with binary on API-Gateway we must return a base64 encoded string```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.get('/test/tests/&lt;filename&gt;.jpg', cors=True, binary_b64encode=True)def print_id(filename):    with open(f&quot;{filename}.jpg&quot;, &quot;rb&quot;) as f:        return ('OK', 'image/jpeg', f.read())```## CompressionEnable compression if &quot;Accept-Encoding&quot; if found in headers.```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.get(   '/test/tests/&lt;filename&gt;.jpg',   cors=True,   binary_b64encode=True,   payload_compression_method=&quot;gzip&quot;)def print_id(filename):    with open(f&quot;{filename}.jpg&quot;, &quot;rb&quot;) as f:       return ('OK', 'image/jpeg', f.read())```## Simple Auth tokenLambda-proxy provide a simple token validation system.-  a &quot;TOKEN&quot; variable must be set in the environment-  each request must provide a &quot;access_token&quot; params (e.g curl   http://myurl/test/tests/myid?access_token=blabla)```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.get('/test/tests/&lt;id&gt;', cors=True, token=True)def print_id(id):    return ('OK', 'plain/text', id)```## URL schema and request parametersQueryString parameters are passed as function's options.```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.get('/&lt;id&gt;', cors=True)def print_id(id, name=None):    return ('OK', 'plain/text', f&quot;{id}{name}&quot;)```requests:```bash$ curl /000001   0001$ curl /000001?name=vincent   0001vincent```## Multiple Routes```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.get('/&lt;id&gt;', cors=True)@APP.get('/&lt;id&gt;/&lt;int:number&gt;', cors=True)def print_id(id, number=None, name=None):    return ('OK', 'plain/text', f&quot;{id}-{name}-{number}&quot;)```requests:```bash$ curl /000001   0001--$ curl /000001?name=vincent   0001-vincent-$ curl /000001/1?name=vincent   0001-vincent-1```# Advanced features## Context and Event passingPass event and context to the handler function.```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.get(&quot;/&lt;id&gt;&quot;, cors=True)@APP.pass_event@APP.pass_contextdef print_id(ctx, evt, id):    print(ctx)    print(evt)    return ('OK', 'plain/text', f&quot;{id}&quot;)```# Automatic OpenAPI documentationBy default the APP (`lambda_proxy.proxy.API`) is provided with three (3) routes:- `/openapi.json`: print OpenAPI JSON definition- `/docs`: swagger html UI![swagger](https://user-images.githubusercontent.com/10407788/58707335-9cbb0480-8382-11e9-927f-8d992cf2531a.jpg)- `/redoc`: Redoc html UI![redoc](https://user-images.githubusercontent.com/10407788/58707338-9dec3180-8382-11e9-8dec-18173e39258f.jpg)**Function annotations**To be able to render full and precise API documentation, lambda_proxy uses python type hint and annotations [link](https://www.python.org/dev/peps/pep-3107/).```pythonfrom lambda_proxy.proxy import APIAPP = API(name=&quot;app&quot;)@APP.route('/test/&lt;int:id&gt;', methods=['GET'], cors=True)def print_id(id: int, num: float = 0.2) -&gt; Tuple(str, str, str):    return ('OK', 'plain/text', id)```In the example above, our route `/test/&lt;int:id&gt;` define an input `id` to be a `INT`, while we also add this hint to the function `print_id` we also specify the type (and default) of the `num` option.# Custom Domain and path mappingSince version 4.1.1, lambda-proxy support custom domain and path mapping (see https://github.com/vincentsarago/lambda-proxy/issues/16).Note: When using path mapping other than `root` (`/`), `/` route won't be available.```pythonfrom lambda_proxy.proxy import APIapi = API(name=&quot;api&quot;, debug=True)# This route won't work when using path mapping@api.get(&quot;/&quot;, cors=True)# This route will work only if the path mapping is set to /api@api.get(&quot;/api&quot;, cors=True)def index():    html = &quot;&quot;&quot;&lt;!DOCTYPE html&gt;    &lt;html&gt;        &lt;header&gt;&lt;title&gt;This is title&lt;/title&gt;&lt;/header&gt;        &lt;body&gt;            Hello world        &lt;/body&gt;    &lt;/html&gt;&quot;&quot;&quot;    return (&quot;OK&quot;, &quot;text/html&quot;, html)@api.get(&quot;/yo&quot;, cors=True)def yo():    return (&quot;OK&quot;, &quot;text/plain&quot;, &quot;YOOOOO&quot;)```# Plugin- Add cache layer: https://github.com/vincentsarago/lambda-proxy-cache# Examples-  https://github.com/vincentsarago/lambda-proxy/tree/master/example-  https://github.com/RemotePixel/remotepixel-tiler# Contribution &amp; DevellopementIssues and pull requests are more than welcome.**Dev install &amp; Pull-Request**```bash$ git clone https://github.com/vincentsarago/lambda-proxy.git$ cd lambda-proxy$ pip install -e .[dev]```**Python3.7 only**This repo is set to use pre-commit to run *mypy*, *flake8*, *pydocstring* and *black* (&quot;uncompromising Python code formatter&quot;) when committing new code.```bash$ pre-commit install$ git add .$ git commit -m'my change'   black.........................Passed   Flake8........................Passed   Verifying PEP257 Compliance...Passed   mypy..........................Passed$ git push origin```### LicenseSee [LICENSE.txt](/LICENSE.txt&gt;).### AuthorsSee [AUTHORS.txt](/AUTHORS.txt&gt;).### ChangesSee [CHANGES.txt](/CHANGES.txt&gt;).</longdescription>
</pkgmetadata>