<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;types-aiobotocore-athena&quot;&gt;&lt;/a&gt;# types-aiobotocore-athena[![PyPI - types-aiobotocore-athena](https://img.shields.io/pypi/v/types-aiobotocore-athena.svg?color=blue)](https://pypi.org/project/types-aiobotocore-athena)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-athena.svg?color=blue)](https://pypi.org/project/types-aiobotocore-athena)[![Docs](https://img.shields.io/readthedocs/types-aiobotocore.svg?color=blue)](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_athena/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-athena?color=blue)](https://pypistats.org/packages/types-aiobotocore-athena)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[aiobotocore.Athena 2.5.1](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/athena.html#Athena)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.14.5](https://github.com/youtype/mypy_boto3_builder).More information can be found on[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in[types-aiobotocore-athena docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_athena/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [types-aiobotocore-athena](#types-aiobotocore-athena)  - [How to install](#how-to-install)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Literals](#literals)    - [Typed dictionaries](#typed-dictionaries)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `types-aiobotocore` for `Athena` service.```bash# install with aiobotocore type annotationspython -m pip install 'types-aiobotocore[athena]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'types-aiobotocore-lite[athena]'# standalone installationpython -m pip install types-aiobotocore-athena```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y types-aiobotocore-athena```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `types-aiobotocore[athena]` in your environment:```bashpython -m pip install 'types-aiobotocore[athena]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `aiobotocore` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `types-aiobotocore-lite[athena]` in your environment:```bashpython -m pip install 'types-aiobotocore-lite[athena]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `types-aiobotocore` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `types-aiobotocore` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[athena]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed  `types-aiobotocore`Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `types-aiobotocore[athena]` with services you use in your  environment:```bashpython -m pip install 'types-aiobotocore[athena]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `types-aiobotocore[athena]` in your environment:```bashpython -m pip install 'types-aiobotocore[athena]'````Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `types-aiobotocore[athena]` in your environment:```bashpython -m pip install 'types-aiobotocore[athena]'```Optionally, you can install `types-aiobotocore` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`AthenaClient` provides annotations for `session.create_client(&quot;athena&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_athena import AthenaClientsession = get_session()async with session.create_client(&quot;athena&quot;) as client:    client: AthenaClient    # now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`types_aiobotocore_athena.paginator` module contains type annotations for allpaginators.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_athena import AthenaClientfrom types_aiobotocore_athena.paginator import (    GetQueryResultsPaginator,    ListDataCatalogsPaginator,    ListDatabasesPaginator,    ListNamedQueriesPaginator,    ListQueryExecutionsPaginator,    ListTableMetadataPaginator,    ListTagsForResourcePaginator,)session = get_session()async with session.create_client(&quot;athena&quot;) as client:    client: AthenaClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    get_query_results_paginator: GetQueryResultsPaginator = client.get_paginator(        &quot;get_query_results&quot;    )    list_data_catalogs_paginator: ListDataCatalogsPaginator = client.get_paginator(        &quot;list_data_catalogs&quot;    )    list_databases_paginator: ListDatabasesPaginator = client.get_paginator(&quot;list_databases&quot;)    list_named_queries_paginator: ListNamedQueriesPaginator = client.get_paginator(        &quot;list_named_queries&quot;    )    list_query_executions_paginator: ListQueryExecutionsPaginator = client.get_paginator(        &quot;list_query_executions&quot;    )    list_table_metadata_paginator: ListTableMetadataPaginator = client.get_paginator(        &quot;list_table_metadata&quot;    )    list_tags_for_resource_paginator: ListTagsForResourcePaginator = client.get_paginator(        &quot;list_tags_for_resource&quot;    )```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`types_aiobotocore_athena.literals` module contains literals extracted fromshapes that can be used in user code for type checking.```pythonfrom types_aiobotocore_athena.literals import (    CalculationExecutionStateType,    CapacityAllocationStatusType,    CapacityReservationStatusType,    ColumnNullableType,    DataCatalogTypeType,    EncryptionOptionType,    ExecutorStateType,    ExecutorTypeType,    GetQueryResultsPaginatorName,    ListDataCatalogsPaginatorName,    ListDatabasesPaginatorName,    ListNamedQueriesPaginatorName,    ListQueryExecutionsPaginatorName,    ListTableMetadataPaginatorName,    ListTagsForResourcePaginatorName,    NotebookTypeType,    QueryExecutionStateType,    S3AclOptionType,    SessionStateType,    StatementTypeType,    WorkGroupStateType,    AthenaServiceName,    ServiceName,    ResourceServiceName,    PaginatorName,    RegionName,)def check_value(value: CalculationExecutionStateType) -&gt; bool:    ...```&lt;a id=&quot;typed-dictionaries&quot;&gt;&lt;/a&gt;### Typed dictionaries`types_aiobotocore_athena.type_defs` module contains structures and shapesassembled to typed dictionaries for additional type checking.```pythonfrom types_aiobotocore_athena.type_defs import (    AclConfigurationTypeDef,    ApplicationDPUSizesTypeDef,    AthenaErrorTypeDef,    BatchGetNamedQueryInputRequestTypeDef,    NamedQueryTypeDef,    UnprocessedNamedQueryIdTypeDef,    BatchGetPreparedStatementInputRequestTypeDef,    PreparedStatementTypeDef,    UnprocessedPreparedStatementNameTypeDef,    BatchGetQueryExecutionInputRequestTypeDef,    UnprocessedQueryExecutionIdTypeDef,    CalculationConfigurationTypeDef,    CalculationResultTypeDef,    CalculationStatisticsTypeDef,    CalculationStatusTypeDef,    CancelCapacityReservationInputRequestTypeDef,    CapacityAllocationTypeDef,    CapacityAssignmentTypeDef,    ColumnInfoTypeDef,    ColumnTypeDef,    TagTypeDef,    CreateNamedQueryInputRequestTypeDef,    CreateNamedQueryOutputTypeDef,    CreateNotebookInputRequestTypeDef,    CreateNotebookOutputTypeDef,    CreatePreparedStatementInputRequestTypeDef,    CreatePresignedNotebookUrlRequestRequestTypeDef,    CreatePresignedNotebookUrlResponseTypeDef,    CustomerContentEncryptionConfigurationTypeDef,    DataCatalogSummaryTypeDef,    DataCatalogTypeDef,    DatabaseTypeDef,    DatumTypeDef,    DeleteCapacityReservationInputRequestTypeDef,    DeleteDataCatalogInputRequestTypeDef,    DeleteNamedQueryInputRequestTypeDef,    DeleteNotebookInputRequestTypeDef,    DeletePreparedStatementInputRequestTypeDef,    DeleteWorkGroupInputRequestTypeDef,    EncryptionConfigurationTypeDef,    EngineConfigurationTypeDef,    EngineVersionTypeDef,    ExecutorsSummaryTypeDef,    ExportNotebookInputRequestTypeDef,    NotebookMetadataTypeDef,    FilterDefinitionTypeDef,    GetCalculationExecutionCodeRequestRequestTypeDef,    GetCalculationExecutionCodeResponseTypeDef,    GetCalculationExecutionRequestRequestTypeDef,    GetCalculationExecutionStatusRequestRequestTypeDef,    GetCapacityAssignmentConfigurationInputRequestTypeDef,    GetCapacityReservationInputRequestTypeDef,    GetDataCatalogInputRequestTypeDef,    GetDatabaseInputRequestTypeDef,    GetNamedQueryInputRequestTypeDef,    GetNotebookMetadataInputRequestTypeDef,    GetPreparedStatementInputRequestTypeDef,    GetQueryExecutionInputRequestTypeDef,    GetQueryResultsInputGetQueryResultsPaginateTypeDef,    GetQueryResultsInputRequestTypeDef,    GetQueryRuntimeStatisticsInputRequestTypeDef,    GetSessionRequestRequestTypeDef,    SessionStatisticsTypeDef,    SessionStatusTypeDef,    GetSessionStatusRequestRequestTypeDef,    GetTableMetadataInputRequestTypeDef,    GetWorkGroupInputRequestTypeDef,    ImportNotebookInputRequestTypeDef,    ImportNotebookOutputTypeDef,    ListApplicationDPUSizesInputRequestTypeDef,    ListCalculationExecutionsRequestRequestTypeDef,    ListCapacityReservationsInputRequestTypeDef,    ListDataCatalogsInputListDataCatalogsPaginateTypeDef,    ListDataCatalogsInputRequestTypeDef,    ListDatabasesInputListDatabasesPaginateTypeDef,    ListDatabasesInputRequestTypeDef,    ListEngineVersionsInputRequestTypeDef,    ListExecutorsRequestRequestTypeDef,    ListNamedQueriesInputListNamedQueriesPaginateTypeDef,    ListNamedQueriesInputRequestTypeDef,    ListNamedQueriesOutputTypeDef,    ListNotebookSessionsRequestRequestTypeDef,    NotebookSessionSummaryTypeDef,    ListPreparedStatementsInputRequestTypeDef,    PreparedStatementSummaryTypeDef,    ListQueryExecutionsInputListQueryExecutionsPaginateTypeDef,    ListQueryExecutionsInputRequestTypeDef,    ListQueryExecutionsOutputTypeDef,    ListSessionsRequestRequestTypeDef,    ListTableMetadataInputListTableMetadataPaginateTypeDef,    ListTableMetadataInputRequestTypeDef,    ListTagsForResourceInputListTagsForResourcePaginateTypeDef,    ListTagsForResourceInputRequestTypeDef,    ListWorkGroupsInputRequestTypeDef,    PaginatorConfigTypeDef,    QueryExecutionContextTypeDef,    ResultReuseInformationTypeDef,    QueryRuntimeStatisticsRowsTypeDef,    QueryRuntimeStatisticsTimelineTypeDef,    QueryStagePlanNodeTypeDef,    QueryStageTypeDef,    ResponseMetadataTypeDef,    ResultReuseByAgeConfigurationTypeDef,    StartCalculationExecutionResponseTypeDef,    StartQueryExecutionOutputTypeDef,    StartSessionResponseTypeDef,    StopCalculationExecutionRequestRequestTypeDef,    StopCalculationExecutionResponseTypeDef,    StopQueryExecutionInputRequestTypeDef,    TerminateSessionRequestRequestTypeDef,    TerminateSessionResponseTypeDef,    UntagResourceInputRequestTypeDef,    UpdateCapacityReservationInputRequestTypeDef,    UpdateDataCatalogInputRequestTypeDef,    UpdateNamedQueryInputRequestTypeDef,    UpdateNotebookInputRequestTypeDef,    UpdateNotebookMetadataInputRequestTypeDef,    UpdatePreparedStatementInputRequestTypeDef,    ListApplicationDPUSizesOutputTypeDef,    QueryExecutionStatusTypeDef,    GetNamedQueryOutputTypeDef,    BatchGetNamedQueryOutputTypeDef,    GetPreparedStatementOutputTypeDef,    BatchGetPreparedStatementOutputTypeDef,    StartCalculationExecutionRequestRequestTypeDef,    CalculationSummaryTypeDef,    GetCalculationExecutionResponseTypeDef,    GetCalculationExecutionStatusResponseTypeDef,    CapacityReservationTypeDef,    CapacityAssignmentConfigurationTypeDef,    PutCapacityAssignmentConfigurationInputRequestTypeDef,    ResultSetMetadataTypeDef,    TableMetadataTypeDef,    CreateCapacityReservationInputRequestTypeDef,    CreateDataCatalogInputRequestTypeDef,    ListTagsForResourceOutputTypeDef,    TagResourceInputRequestTypeDef,    ListDataCatalogsOutputTypeDef,    GetDataCatalogOutputTypeDef,    GetDatabaseOutputTypeDef,    ListDatabasesOutputTypeDef,    RowTypeDef,    ResultConfigurationTypeDef,    ResultConfigurationUpdatesTypeDef,    SessionConfigurationTypeDef,    StartSessionRequestRequestTypeDef,    ListEngineVersionsOutputTypeDef,    WorkGroupSummaryTypeDef,    ListExecutorsResponseTypeDef,    ExportNotebookOutputTypeDef,    GetNotebookMetadataOutputTypeDef,    ListNotebookMetadataOutputTypeDef,    ListNotebookMetadataInputRequestTypeDef,    GetSessionStatusResponseTypeDef,    SessionSummaryTypeDef,    ListNotebookSessionsResponseTypeDef,    ListPreparedStatementsOutputTypeDef,    QueryExecutionStatisticsTypeDef,    QueryRuntimeStatisticsTypeDef,    ResultReuseConfigurationTypeDef,    ListCalculationExecutionsResponseTypeDef,    GetCapacityReservationOutputTypeDef,    ListCapacityReservationsOutputTypeDef,    GetCapacityAssignmentConfigurationOutputTypeDef,    GetTableMetadataOutputTypeDef,    ListTableMetadataOutputTypeDef,    ResultSetTypeDef,    WorkGroupConfigurationTypeDef,    WorkGroupConfigurationUpdatesTypeDef,    GetSessionResponseTypeDef,    ListWorkGroupsOutputTypeDef,    ListSessionsResponseTypeDef,    GetQueryRuntimeStatisticsOutputTypeDef,    QueryExecutionTypeDef,    StartQueryExecutionInputRequestTypeDef,    GetQueryResultsOutputTypeDef,    CreateWorkGroupInputRequestTypeDef,    WorkGroupTypeDef,    UpdateWorkGroupInputRequestTypeDef,    BatchGetQueryExecutionOutputTypeDef,    GetQueryExecutionOutputTypeDef,    GetWorkGroupOutputTypeDef,)def get_structure() -&gt; AclConfigurationTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for`aiobotocore` updates. It delivers drop-in type annotations for you and makessure that:- All available `aiobotocore` services are covered.- Each public class and method of every `aiobotocore` service gets valid type  annotations extracted from `botocore` schemas.- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`  libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.resource` calls- Auto discovery of types for `session.client` and `session.resource` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`types-aiobotocore-athena` version is the same as related `aiobotocore` versionand follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_athena/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>