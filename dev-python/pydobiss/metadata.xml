<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pydobiss Module Repository## pydobissdobissapi is a python library that allows you to use [dobiss's api](http://support.dobiss.com/books/nl-dobiss-nxt/page/developer-api).## Install```bashpip install pydobiss```## Example```pythonimport asyncioimport aiohttpimport loggingfrom time import sleepimport dobissapi#dobissapi.logger.setLevel(logging.DEBUG)secret = 'secret'host = 'my_host'secure = Falsedobiss = dobissapi.DobissAPI(secret, host, secure)async def main():    if not await dobiss.auth_check():        print(&quot;Error authenticating dobiss&quot;)        return    print(&quot;authenticated dobiss&quot;)    asyncio.get_event_loop().create_task(dobiss.dobiss_monitor())    entities = await dobiss.discovery()    await dobiss.update_all()    # check if caching works    entities = await dobiss.discovery()    # list scenarios    scenarios = dobiss.get_devices_by_type(dobissapi.DobissScenario)    for e in scenarios:        print(&quot;{}: {}&quot;.format(e.object_id, e.json))    # see if there are any buddies    def test_covers(entities):        for e in entities:            if e.buddy:                print(f&quot;buddies found: {e.name} --&gt; buddy {e.buddy.name}&quot;)    test_covers(entities)    def get_entity(entities, name):        for e in entities:            if e.name == name:                return e    # test updating and changing entities    await get_entity(entities, &quot;Mancave&quot;).update()    await get_entity(entities, &quot;Mancave&quot;).toggle()    await asyncio.sleep(2)    await get_entity(entities, &quot;Mancave&quot;).toggle()    # test callbacks    def my_callback():        print(&quot;callback happened&quot;)    get_entity(entities, &quot;Mancave&quot;).register_callback(my_callback)    await asyncio.sleep(2)    await get_entity(entities, &quot;Mancave&quot;).turn_on()    await asyncio.sleep(2)    await get_entity(entities, &quot;Mancave&quot;).turn_off()    # check if new discovery works fine with old callback    await asyncio.sleep(60)    entities = await dobiss.discovery()    await asyncio.sleep(2)    await get_entity(entities, &quot;Mancave&quot;).turn_on()    await asyncio.sleep(2)    await get_entity(entities, &quot;Mancave&quot;).turn_off()try:    loop = asyncio.get_event_loop()    loop.create_task(main())    loop.run_forever()except KeyboardInterrupt:    print(&quot;Exiting&quot;)```## AuthorKester (kesteraernoudt@yahoo.com)</longdescription>
</pkgmetadata>