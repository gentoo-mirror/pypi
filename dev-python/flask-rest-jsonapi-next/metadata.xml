<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flask-rest-jsonapi-next[![PyPi Status](https://badge.fury.io/py/flask-rest-jsonapi-next.svg)](https://badge.fury.io/py/flask-rest-jsonapi-next)[![license](https://img.shields.io/pypi/l/flask-rest-jsonapi-next.svg)](https://opensource.org/licenses/MIT)[![tests](https://github.com/tadams42/flask-rest-jsonapi-next/actions/workflows/tests.yaml/badge.svg?branch=development)](https://github.com/tadams42/flask-rest-jsonapi-next/actions/workflows/tests.yaml)[![codecov](https://codecov.io/gh/tadams42/flask-rest-jsonapi-next/branch/development/graph/badge.svg?token=9WIWK7B3XX)](https://codecov.io/gh/tadams42/flask-rest-jsonapi-next)[![Documentation Status](https://readthedocs.org/projects/flask-rest-jsonapi-next/badge/?version=latest)](http://flask-rest-jsonapi-next.readthedocs.io/en/latest/?badge=latest)[![python_versions](https://img.shields.io/pypi/pyversions/flask-rest-jsonapi-next.svg)](https://pypi.org/project/flask-rest-jsonapi-next/)This is a fork of [miLibris/flask-rest-jsonapi](https://github.com/miLibris/flask-rest-jsonapi) project.`flask-rest-jsonapi-next` is a flask extension for building REST APIs around a strong specification[JSON:API 1.0](http://jsonapi.org/).Documentation: [http://flask-rest-jsonapi-next.readthedocs.io/en/latest/](http://flask-rest-jsonapi-next.readthedocs.io/en/latest/)## Install```shpip install flask-rest-jsonapi-next```## A minimal API```pyfrom flask import Flaskfrom flask_rest_jsonapi_next import Api, ResourceDetail, ResourceListfrom flask_sqlalchemy import SQLAlchemyfrom marshmallow_jsonapi.flask import Schemafrom marshmallow_jsonapi import fields# Create the Flask application and the Flask-SQLAlchemy object.app = Flask(__name__)app.config['DEBUG'] = Trueapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'db = SQLAlchemy(app)# Create modelclass Person(db.Model):    id = db.Column(db.Integer, primary_key=True)    name = db.Column(db.String)# Create the database.db.create_all()# Create schemaclass PersonSchema(Schema):    class Meta:        type_ = 'person'        self_view = 'person_detail'        self_view_kwargs = {'id': '&lt;id&gt;'}        self_view_many = 'person_list'    id = fields.Integer(as_string=True, dump_only=True)    name = fields.Str()# Create resource managersclass PersonList(ResourceList):    schema = PersonSchema    data_layer = {'session': db.session,                    'model': Person}class PersonDetail(ResourceDetail):    schema = PersonSchema    data_layer = {'session': db.session,                    'model': Person}# Create the API objectapi = Api(app)api.route(PersonList, 'person_list', '/persons')api.route(PersonDetail, 'person_detail', '/persons/&lt;int:id&gt;')# Start the flask loopif __name__ == '__main__':    app.run()```This example provides the following API structure:| URL                        | method | endpoint      | Usage                       || -------------------------- | ------ | ------------- | --------------------------- || `/persons`                 | GET    | person_list   | Get a collection of persons || `/persons`                 | POST   | person_list   | Create a person             || `/persons/&lt;int:person_id&gt;` | GET    | person_detail | Get person details          || `/persons/&lt;int:person_id&gt;` | PATCH  | person_detail | Update a person             || `/persons/&lt;int:person_id&gt;` | DELETE | person_detail | Delete a person             |## ThanksFlask, marshmallow, marshmallow_jsonapi, sqlalchemy, Flask-RESTful and Flask-Restlessare awesome projects. These libraries gave me inspiration to createflask-rest-jsonapi-next, so huge thanks to authors and contributors.</longdescription>
</pkgmetadata>