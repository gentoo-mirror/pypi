<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========jsonschema==========|PyPI| |Pythons| |CI| |ReadTheDocs| |Precommit| |Zenodo|.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg   :alt: PyPI version   :target: https://pypi.org/project/jsonschema/.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg   :alt: Supported Python versions   :target: https://pypi.org/project/jsonschema/.. |CI| image:: https://github.com/python-jsonschema/jsonschema/workflows/CI/badge.svg  :alt: Build status  :target: https://github.com/python-jsonschema/jsonschema/actions?query=workflow%3ACI.. |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&amp;style=flat   :alt: ReadTheDocs status   :target: https://python-jsonschema.readthedocs.io/en/stable/.. |Precommit| image:: https://results.pre-commit.ci/badge/github/python-jsonschema/jsonschema/main.svg   :alt: pre-commit.ci status   :target: https://results.pre-commit.ci/latest/github/python-jsonschema/jsonschema/main.. |Zenodo| image:: https://zenodo.org/badge/3072629.svg   :alt: Zenodo DOI   :target: https://zenodo.org/badge/latestdoi/3072629``jsonschema`` is an implementation of the `JSON Schema &lt;https://json-schema.org&gt;`_ specification for Python... code:: python    &gt;&gt;&gt; from jsonschema import validate    &gt;&gt;&gt; # A sample schema, like what we'd get from json.load()    &gt;&gt;&gt; schema = {    ...     &quot;type&quot; : &quot;object&quot;,    ...     &quot;properties&quot; : {    ...         &quot;price&quot; : {&quot;type&quot; : &quot;number&quot;},    ...         &quot;name&quot; : {&quot;type&quot; : &quot;string&quot;},    ...     },    ... }    &gt;&gt;&gt; # If no exception is raised by validate(), the instance is valid.    &gt;&gt;&gt; validate(instance={&quot;name&quot; : &quot;Eggs&quot;, &quot;price&quot; : 34.99}, schema=schema)    &gt;&gt;&gt; validate(    ...     instance={&quot;name&quot; : &quot;Eggs&quot;, &quot;price&quot; : &quot;Invalid&quot;}, schema=schema,    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL    Traceback (most recent call last):        ...    ValidationError: 'Invalid' is not of type 'number'It can also be used from the command line by installing `check-jsonschema &lt;https://github.com/python-jsonschema/check-jsonschema&gt;`_.Features--------* Full support for `Draft 2020-12 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft202012Validator&gt;`_, `Draft 2019-09 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft201909Validator&gt;`_, `Draft 7 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft7Validator&gt;`_, `Draft 6 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft6Validator&gt;`_, `Draft 4 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft4Validator&gt;`_ and `Draft 3 &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft3Validator&gt;`_* `Lazy validation &lt;https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/protocols/#jsonschema.protocols.Validator.iter_errors&gt;`_ that can iteratively report *all* validation errors.* `Programmatic querying &lt;https://python-jsonschema.readthedocs.io/en/latest/errors/&gt;`_ of which properties or items failed validation.Installation------------``jsonschema`` is available on `PyPI &lt;https://pypi.org/project/jsonschema/&gt;`_. You can install using `pip &lt;https://pip.pypa.io/en/stable/&gt;`_:.. code:: bash    $ pip install jsonschemaExtras======Two extras are available when installing the package, both currently related to ``format`` validation:    * ``format``    * ``format-nongpl``They can be used when installing in order to include additional dependencies, e.g.:.. code:: bash    $ pip install jsonschema'[format]'Be aware that the mere presence of these dependencies – or even the specification of ``format`` checks in a schema – do *not* activate format checks (as per the specification).Please read the `format validation documentation &lt;https://python-jsonschema.readthedocs.io/en/latest/validate/#validating-formats&gt;`_ for further details.About-----I'm Julian Berman.``jsonschema`` is on `GitHub &lt;https://github.com/python-jsonschema/jsonschema&gt;`_.Get in touch, via GitHub or otherwise, if you've got something to contribute, it'd be most welcome!You can also generally find me on Libera (nick: ``Julian``) in various channels, including ``#python``.If you feel overwhelmingly grateful, you can also `sponsor me &lt;https://github.com/sponsors/Julian/&gt;`_.And for companies who appreciate ``jsonschema`` and its continued support and growth, ``jsonschema`` is also now supportable via `TideLift &lt;https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-jsonschema&amp;utm_medium=referral&amp;utm_campaign=readme&gt;`_.Release Information-------------------v4.18.0=======This release majorly rehaul's the way in which JSON Schema reference resolution is configured.It does so in a way that *should* be backwards compatible, preserving old behavior whilst emitting deprecation warnings.* ``jsonschema.RefResolver`` is now deprecated in favor of the new `referencing library &lt;https://github.com/python-jsonschema/referencing/&gt;`_.  ``referencing`` will begin in beta, but already is more compliant than the existing ``$ref`` support.  This change is a culmination of a meaningful chunk of work to make ``$ref`` resolution more flexible and more correct.  Backwards compatibility *should* be preserved for existing code which uses ``RefResolver``, though doing so is again now deprecated, and all such use cases should be doable using the new APIs.  Please file issues on the ``referencing`` tracker if there is functionality missing from it, or here on the ``jsonschema`` issue tracker if you have issues with existing code not functioning the same, or with figuring out how to change it to use ``referencing``.  In particular, this referencing change includes a change concerning *automatic* retrieval of remote references (retrieving ``http://foo/bar`` automatically within a schema).  This behavior has always been a potential security risk and counter to the recommendations of the JSON Schema specifications; it has survived this long essentially only for backwards compatibility reasons, and now explicitly produces warnings.  The ``referencing`` library itself will *not* automatically retrieve references if you interact directly with it, so the deprecated behavior is only triggered if you fully rely on the default ``$ref`` resolution behavior and also include remote references in your schema, which will still be retrieved during the deprecation period (after which they will become an error).* Support for Python 3.7 has been dropped, as it is nearing end-of-life.  This should not be a &quot;visible&quot; change in the sense that ``requires-python`` has been updated, so users using 3.7 should still receive ``v4.17.3`` when installing the library.* On draft 2019-09, ``unevaluatedItems`` now properly does *not* consider items to be evaluated by an ``additionalItems`` schema if ``items`` is missing from the schema, as the specification says in this case that ``additionalItems`` must be completely ignored.* Fix the ``date`` format checker on Python 3.11 (when format assertion behavior is enabled), where it was too liberal (#1076).* Speed up validation of ``unevaluatedProperties`` (#1075).Deprecations------------* ``jsonschema.RefResolver`` -- see above for details on the replacement* ``jsonschema.RefResolutionError`` -- see above for details on the replacement* relying on automatic resolution of remote references -- see above for details on the replacement* importing ``jsonschema.ErrorTree`` -- instead import it via ``jsonschema.exceptions.ErrorTree``* importing ``jsonschema.FormatError`` -- instead import it via ``jsonschema.exceptions.FormatError``</longdescription>
</pkgmetadata>