<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># glsltglslt is the main library that supports the GLSL Template compiler transforms. If you arebuilding a system that relies on transforming GLSLT code, you'll want to interact with thislibrary directly instead of the command-line interface provided by `glsltc`.## Usage### Rust crateThe glslt crate manipulates syntax trees generated by the [glsl-langcrate](https://github.com/vtavernier/glsl-lang).```rustuse glslt::glsl_lang::{ast::*, parse::IntoParseBuilderExt};use glslt::transform::{Unit, TransformUnit};let glsl_src = r#&quot;float sdf3d(in vec3 p);float colort();float sdSphere(vec3 p, float r) {    return length(p) - r;}float opElongate(in sdf3d primitive, in colort C, in vec3 p, in colort D, in vec3 h) {    vec3 q = p - clamp(p, -h, h);    return C() * primitive(q) * D();}void mainImage(out vec4 fragColor, in vec2 fragCoord) {    float sz = 5.;    fragColor = vec4(vec3(opElongate(sdSphere(_p, sz), 1.0, vec3(fragCoord, 0.), 2.0, vec3(1., 2., 3.))), 1.0);}&quot;#;// Parse the GLSLT source codelet tu: TranslationUnit = glsl_src    .builder()    .context(&amp;glslt::parse::make_parse_context(None))    .parse()    .expect(&quot;failed to parse GLSLT source&quot;)    .0;// Create the transform unitlet mut unit = Unit::new();// Parse declarationsfor decl in tu.0.into_iter() {    unit.parse_external_declaration(decl).expect(&quot;failed to parse declaration&quot;);}// Generate the resultlet tu = unit.into_translation_unit().expect(&quot;failed to generate output&quot;);// Transpile the syntax tree to GLSL sourcelet mut output_src = String::new();glsl_lang::transpiler::glsl::show_translation_unit(    &amp;mut output_src,    &amp;tu,    glsl_lang::transpiler::glsl::FormattingState::default(),).expect(&quot;failed to generate GLSL&quot;);```### Python libraryIf you installed the glslt library via `pip install glslt` or `maturindevelop`, you may use the Python interface to the GLSLT compiler.```pythonimport glslt# Parse the `sdf.glsl` file with `my-glsl-lib/include` being a system include# directory for #include resolutiontranslation_unit = glslt.parse_files([&quot;sdf.glsl&quot;], [&quot;my-glsl-lib/include&quot;])# Create a new minimizing transform unitunit = glslt.MinUnit()# Add the parsed declarations to the transform unitunit.add_unit(translation_unit)# Get the output of the transformresult = unit.to_translation_unit([&quot;mainImage&quot;])# Print the GLSL codeprint(result.to_glsl())```## AuthorVincent Tavernier &lt;v.tavernier@pm.me&gt;</longdescription>
</pkgmetadata>