<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># asyncjsonAsynchronous json library with support of nested awaitable objects in data.The most important features are supporting async functions and async generators on any level ofdata structure, even for dict keys.Now the library contains async version of `json.dumps` function. This library was made to helpstream the heavy json structures without blocking the event loop.Be aware, this is alpha version of library.## Installing`pip install asyncjson`## Example```pythonimport sysimport asyncioimport randomimport stringimport asyncjsonasync def random_number():    await asyncio.sleep(random.random())    return random.randrange(0, 100)async def random_strings():    for i in range(random.randint(0, 10)):        await asyncio.sleep(random.random())        yield ''.join(random.choice(string.ascii_letters) for _ in range(random.randint(1, 10)))async def run():    obj = {        'dictkey': {            'list': [1, '2', 3.0],            'random strings': random_strings(),            'random number': random_number(),            random_strings(): &quot;joined random strings in key&quot;,            random_number(): &quot;random number in key&quot;        },        'another random number': random_number(),        'awaitable objects in list': [&quot;sample&quot;, random_number(), random_strings(), [], {}],        'intkey': 123,        'stringkey': &quot;qwer&quot;,    }    async for i in await asyncjson.dumpgen(obj):        sys.stdout.write(i)        sys.stdout.flush()loop = asyncio.get_event_loop()loop.run_until_complete(run())```Will give the result which will appear piece by piece because of sleeps added fordemonstration purposes:```json{ &quot;dictkey&quot;: {  &quot;list&quot;: [   1,    &quot;2&quot;,    3.0  ],   &quot;random strings&quot;: [   &quot;IuaNSw&quot;  ],   &quot;random number&quot;: 65,   &quot;ZuuBZyEMYTtqyOzYoILOZXCgnTYYsu&quot;: &quot;joined random strings in key&quot;,   43: &quot;random number in key&quot; },  &quot;another random number&quot;: 85,  &quot;awaitable objects in list&quot;: [  &quot;sample&quot;,   16,   [   &quot;wQ&quot;,    &quot;Jp&quot;,    &quot;xDfTNZCUv&quot;  ],   [],   {} ],  &quot;intkey&quot;: 123,  &quot;stringkey&quot;: &quot;qwer&quot;}```## To be done- [ ] Implement async versions of `dump`, `loads`, `load` functions- [ ] Implement async encoder/decoder on C in order to increase performance</longdescription>
</pkgmetadata>