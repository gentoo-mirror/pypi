<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;&lt;!-- PROJECT SHIELDS --&gt;[&lt;div align=&quot;center&quot;&gt; ![Contributors][contributors-shield]][contributors-url][![Forks][forks-shield]][forks-url][![Stargazers][stars-shield]][stars-url][![MIT License][license-shield]][license-url][![Issues][issues-shield]][issues-url][![Issues Closed][issues-closed-shield]][issues-closed-url][![Python Version][python-version-shield]][python-version-url][![Week Download][download-shield]&lt;/div&gt;][download-url]&lt;br /&gt;&lt;!-- PROJECT BANNER --&gt;![libstreamvbyte](https://socialify.git.ci/wst24365888/libstreamvbyte/image?description=1&amp;font=KoHo&amp;name=1&amp;owner=1&amp;pattern=Circuit%20Board&amp;theme=Light)&lt;br /&gt;&lt;div align=&quot;center&quot;&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/wst24365888/libstreamvbyte#usage&quot;&gt;&lt;strong&gt;Explore Usage »&lt;/strong&gt;&lt;/a&gt;    &lt;br /&gt;    &lt;br /&gt;    &lt;a href=&quot;https://github.com/wst24365888/libstreamvbyte/issues&quot;&gt;Report Bug&lt;/a&gt;    ·    &lt;a href=&quot;https://github.com/wst24365888/libstreamvbyte/issues&quot;&gt;Request Feature&lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;&lt;!-- TABLE OF CONTENTS --&gt;&lt;details&gt;  &lt;summary&gt;Table of Contents&lt;/summary&gt;  &lt;ol&gt;    &lt;li&gt;      &lt;a href=&quot;#about-the-project&quot;&gt;About The Project&lt;/a&gt;    &lt;/li&gt;    &lt;li&gt;      &lt;a href=&quot;#getting-started&quot;&gt;Getting Started&lt;/a&gt;      &lt;ul&gt;        &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#benchmark&quot;&gt;Benchmark&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#roadmap&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#reference&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;  &lt;/ol&gt;&lt;/details&gt;&lt;!-- ABOUT THE PROJECT --&gt;## About The Project`libstreamvbyte` is a `C++` implementation of [StreamVByte](#reference), with `Python` bindings using `pybind11`. [StreamVByte](#reference) is an integer compression technique that use SIMD instructions (vectorization) to improve performance. The library is optimized with `SSSE3` intrinsics, which are supported by most `x86_64` processors. It uses `sse2neon` to translate `SSSE3` intrinsics to `NEON` intrinsics for `ARM` processors. The library can also be used with other 32-bit architectures, although it will fall back to scalar implementations in those cases.With `libstreamvbyte`, you can quickly and efficiently compress integer sequences, reducing the amount of storage space and network bandwidth required. The library is easy to use and integrates seamlessly with `Python` via `pybind11` bindings. Whether you're working with large datasets or building a distributed computing system, `libstreamvbyte` can help you improve performance and reduce the resources needed to handle your data.Currently supports `Python 3.8+` on Windows, Linux (`manylinux_2_17`, `musllinux_1_1`) and macOS (`universal2`).&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- GETTING STARTED --&gt;## Getting Started### Installation#### For `Python`Install from `PyPI` using `pip`.```bashpip install libstreamvbyte```Or install from `.whl` file.```bashpip install &quot;path/to/your/downloaded/whl&quot;```To find appropriate `.whl` file, please visit [releases](https://github.com/wst24365888/libstreamvbyte/releases).#### For `C++`You must have `CMake` installed on your system.```bash# clone the repogit clone https://github.com/wst24365888/libstreamvbytecd libstreamvbyte# build and installcmake .makesudo make install```### Usage#### For `Python`Import `libstreamvbyte` first.```pythonimport libstreamvbyte as svb```And here are the APIs.```python# Encode an array of unsigned integers into a byte array.encode(in_uint32: numpy.ndarray[numpy.uint32]) -&gt; numpy.ndarray[numpy.uint8]# Decode a byte array into an array of unsigned integers.decode(in_uint8: numpy.ndarray[numpy.uint8], size: int) -&gt; numpy.ndarray[numpy.uint32]# Encode an array of signed integers into an array of unsigned integers.zigzag_encode(in_int32: numpy.ndarray[numpy.int32]) -&gt; numpy.ndarray[numpy.uint32]# Decode an array of unsigned integers into an array of signed integers.zigzag_decode(in_uint32: numpy.ndarray[numpy.uint32]) -&gt; numpy.ndarray[numpy.int32]# Check if the current wheel is a vectorized version.is_vectorized_version() -&gt; bool```#### For `C++`Include `streamvbyte.h` first.```cpp#include &quot;streamvbyte.h&quot;```For the APIs, please refer to [include/streamvbyte.h](https://github.com/wst24365888/libstreamvbyte/blob/main/include/streamvbyte.h).### Example#### For `Python````pythonimport libstreamvbyte as svbN = 2**20 + 2# type(original_data) == np.ndarray# original_data.dtype == np.int32original_data = np.random.randint(-2**31, 2**31, N, dtype=np.int32)# type(compressed_bytes) == np.ndarray# compressed_bytes.dtype == np.uint8compressed_bytes = svb.encode(svb.zigzag_encode(original_data))# type(recovered_data) == np.ndarray# recovered_data.dtype == np.int32recovered_data = svb.zigzag_decode(svb.decode(compressed_bytes, N))```#### For `C++````cpp#include &quot;streamvbyte.h&quot;int main() {    std::size_t N = (1 &lt;&lt; 20) + 2;    std::vector&lt;int32_t&gt; original_data(N);    for (std::size_t i = 0; i &lt; N; ++i) {        original_data[i] = rand() - rand();    }    std::vector&lt;uint8_t&gt; compressed_bytes = streamvbyte::encode(streamvbyte::zigzag_encode(original_data));    std::vector&lt;int32_t&gt; recovered_data = streamvbyte::zigzag_decode(streamvbyte::decode(compressed_bytes, N));    return 0;}```Compile it with linking to `libstreamvbyte`.```bashg++ -o example example.cpp -lstreamvbyte```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- BENCHMARK --&gt;## Benchmark```bashOS: Linux 5.15.79.1-microsoft-standard-WSL2 x86_64CPU: AMD Ryzen 5 3600 6-Core Processor (12) @ 3.600GHzRun on (12 X 3593.26 MHz CPU s)CPU Caches:  L1 Data 32 KiB (x6)  L1 Instruction 32 KiB (x6)  L2 Unified 512 KiB (x6)  L3 Unified 16384 KiB (x1)Load Average: 0.81, 0.85, 0.69-----------------------------------------------------------------------------------Benchmark                              Time             CPU   Iterations Throughput-----------------------------------------------------------------------------------BM_memcpy/4096                       149 ns          149 ns      4688531 13.7122G/sBM_memcpy/8192                       548 ns          548 ns      1275803 7.46783G/sBM_memcpy/16384                     1139 ns         1138 ns       640835 7.19553G/sBM_memcpy/32768                     2185 ns         2185 ns       320840 7.49932G/sBM_memcpy/65536                     4921 ns         4921 ns       142703 6.65895G/sBM_memcpy/131072                   10968 ns        10968 ns        63502 5.97511G/sBM_memcpy/262144                   22465 ns        22465 ns        31134 5.83457G/sBM_memcpy/524288                   45101 ns        45100 ns        15541 5.81245G/sBM_memcpy/1048576                  91131 ns        91131 ns         7639 5.75314G/sBM_streamvbyte_encode/4096          1222 ns         1222 ns       580855 1.67556G/sBM_streamvbyte_encode/8192          2470 ns         2467 ns       282349 1.66064G/sBM_streamvbyte_encode/16384         4945 ns         4945 ns       139671 1.65662G/sBM_streamvbyte_encode/32768         9990 ns         9989 ns        70497 1.64017G/sBM_streamvbyte_encode/65536        19853 ns        19853 ns        30963 1.65051G/sBM_streamvbyte_encode/131072       39933 ns        39932 ns        17401 1.64118G/sBM_streamvbyte_encode/262144       80563 ns        80562 ns         8193 1.62697G/sBM_streamvbyte_encode/524288      160716 ns       160716 ns         4284  1.6311G/sBM_streamvbyte_encode/1048576     319253 ns       319253 ns         1942 1.64223G/sBM_streamvbyte_decode/4096           691 ns          691 ns      1040462 2.96191G/sBM_streamvbyte_decode/8192          1341 ns         1341 ns       516979 3.05539G/sBM_streamvbyte_decode/16384         2683 ns         2683 ns       261208 3.05359G/sBM_streamvbyte_decode/32768         5348 ns         5348 ns       130319 3.06353G/sBM_streamvbyte_decode/65536        10817 ns        10817 ns        64427 3.02936G/sBM_streamvbyte_decode/131072       23207 ns        23207 ns        31546   2.824G/sBM_streamvbyte_decode/262144       45746 ns        45746 ns        11291 2.86519G/sBM_streamvbyte_decode/524288       88660 ns        88660 ns         7947 2.95673G/sBM_streamvbyte_decode/1048576     178497 ns       178497 ns         3907 2.93724G/sBM_zigzag_encode/4096                810 ns          810 ns       854076 2.52829G/sBM_zigzag_encode/8192               1611 ns         1608 ns       433154   2.548G/sBM_zigzag_encode/16384              3174 ns         3174 ns       219165 2.58084G/sBM_zigzag_encode/32768              6457 ns         6457 ns       108415 2.53754G/sBM_zigzag_encode/65536             12582 ns        12582 ns        54747 2.60432G/sBM_zigzag_encode/131072            25243 ns        25243 ns        27802 2.59617G/sBM_zigzag_encode/262144            50278 ns        50278 ns        13952 2.60693G/sBM_zigzag_encode/524288           100563 ns       100562 ns         6932 2.60678G/sBM_zigzag_encode/1048576          211846 ns       211845 ns         3222 2.47487G/sBM_zigzag_decode/4096                675 ns          675 ns      1041044 3.03263G/sBM_zigzag_decode/8192               1342 ns         1342 ns       523553 3.05196G/sBM_zigzag_decode/16384              2643 ns         2643 ns       265497 3.09905G/sBM_zigzag_decode/32768              5383 ns         5383 ns       130976 3.04377G/sBM_zigzag_decode/65536             11474 ns        11474 ns        60817 2.85588G/sBM_zigzag_decode/131072            21777 ns        21777 ns        32345 3.00944G/sBM_zigzag_decode/262144            43477 ns        43478 ns        14387  3.0147G/sBM_zigzag_decode/524288            86120 ns        86120 ns         8145 3.04393G/sBM_zigzag_decode/1048576          173095 ns       173093 ns         4028 3.02894G/s```&gt; The unit of `Throughput` is `GB/s` (Giga Bytes per second).### Build Benchmarks from Source```bashcmake . \    -DCMAKE_BUILD_TYPE=Release \    -DBUILD_SHARED_LIBS=OFF \    -DBUILD_PYBIND11=OFF \    -DPRINT_BENCHMARK=OFF \    -DBUILD_TESTS=ON \    -DBUILD_BENCHMARKS=ONmake libstreamvbyte_benchmarks./libstreamvbyte_benchmarks --benchmark_counters_tabular=true```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- ROADMAP --&gt;## Roadmap- [x] Zigzag encoding/decoding.- [x] Support ARM processors with `NEON` intrinsics.- [ ] Differential coding (delta encoding/decoding).See the [open issues](https://github.com/wst24365888/libstreamvbyte/issues)for a full list of proposed features (and known issues).&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- CONTRIBUTING --&gt;## ContributingContributions are what make the open source community such an amazing place tolearn, inspire, and create. Any contributions you make are **greatlyappreciated**.If you have a suggestion that would make this better, please fork the repo andcreate a pull request. You can also simply open an issue with the tag&quot;enhancement&quot;. Don't forget to give the project a star! Thanks again!1. Fork the Project2. Create your Feature Branch (`git checkout -b feat/amazing-feature`)3. Commit your Changes with   [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/)4. Push to the Branch (`git push origin feat/amazing-feature`)5. Open a Pull Request&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- LICENSE --&gt;## LicenseDistributed under the MIT License. See[LICENSE](https://github.com/wst24365888/libstreamvbyte/blob/main/LICENSE)for more information.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- REFERENCE --&gt;## Reference- Daniel Lemire, Nathan Kurz, Christoph Rupp, [Stream VByte: Faster Byte-Oriented Integer Compression](https://arxiv.org/abs/1709.08990), Information Processing Letters 130, 2018.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;&lt;!-- CONTACT --&gt;## Contact### Author- HSING-HAN, WU (Xyphuz)  - Mail me: xyphuzwu@gmail.com  - About me: &lt;https://www.xyphuz.com&gt;  - GitHub: &lt;https://github.com/wst24365888&gt;### Project Link- &lt;https://github.com/wst24365888/libstreamvbyte&gt;&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;[contributors-shield]: https://img.shields.io/github/contributors/wst24365888/libstreamvbyte.svg?style=for-the-badge[contributors-url]: https://github.com/wst24365888/libstreamvbyte/graphs/contributors[forks-shield]: https://img.shields.io/github/forks/wst24365888/libstreamvbyte.svg?style=for-the-badge[forks-url]: https://github.com/wst24365888/libstreamvbyte/network/members[stars-shield]: https://img.shields.io/github/stars/wst24365888/libstreamvbyte.svg?style=for-the-badge[stars-url]: https://github.com/wst24365888/libstreamvbyte/stargazers[issues-shield]: https://img.shields.io/github/issues/wst24365888/libstreamvbyte.svg?style=for-the-badge[issues-url]: https://github.com/wst24365888/libstreamvbyte/issues[issues-closed-shield]: https://img.shields.io/github/issues-closed/wst24365888/libstreamvbyte.svg?style=for-the-badge[issues-closed-url]: https://github.com/wst24365888/libstreamvbyte/issues?q=is%3Aissue+is%3Aclosed[license-shield]: https://img.shields.io/github/license/wst24365888/libstreamvbyte.svg?style=for-the-badge[license-url]: https://github.com/wst24365888/libstreamvbyte/blob/main/LICENSE[python-version-shield]: https://img.shields.io/pypi/pyversions/libstreamvbyte?color=A000A0&amp;style=for-the-badge[python-version-url]: https://pypi.org/project/libstreamvbyte/[download-shield]: https://img.shields.io/pypi/dw/libstreamvbyte?color=A000A0&amp;style=for-the-badge[download-url]: https://pypistats.org/packages/libstreamvbyte</longdescription>
</pkgmetadata>