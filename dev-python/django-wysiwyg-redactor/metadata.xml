<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A lightweight wysiwyg editor for Django=======================================Screenshot----------.. image:: https://raw.githubusercontent.com/douglasmiranda/django-wysiwyg-redactor/master/screenshots/redactor.jpgWhat's that-----------------*django-wysiwyg-redactor* is a text editor application for Django, using `Redactor WYSIWYG editor &lt;https://imperavi.com/redactor/&gt;`_Dependency----------- `Pillow or PIL` # for image uploadGetting started---------------- Install *django-wysiwyg-redactor*:``pip install django-wysiwyg-redactor``- Add `'redactor'` to INSTALLED_APPS... code-block:: python    INSTALLED_APPS = (        # ...        'redactor',        # ...    )- Add `url(r'^redactor/', include('redactor.urls'))`, to urls.py.. code-block:: python    urlpatterns = [        # ...        url(r'^redactor/', include('redactor.urls')),        # ...    ]- Add default config in settings.py.. code-block:: python    REDACTOR_OPTIONS = {'lang': 'en'}    REDACTOR_UPLOAD = 'uploads/'More `redactor settings &lt;http://imperavi.com/redactor/docs/settings/&gt;`_.Using in model--------------.. code-block:: python    from django.db import models    from redactor.fields import RedactorField    class Entry(models.Model):        title = models.CharField(max_length=250, verbose_name=u'Title')        short_text = RedactorField(verbose_name=u'Text')or use custom parameters:.. code-block:: python    short_text = RedactorField(        verbose_name=u'Text',        redactor_options={'lang': 'en', 'focus': True},        upload_to='tmp/',        allow_file_upload=True,        allow_image_upload=True    )Using only in Django Admin--------------------------.. code-block:: python    from django import forms    from redactor.widgets import RedactorEditor    from blog.models import Entry    class EntryAdminForm(forms.ModelForm):        class Meta:            model = Entry            widgets = {               'short_text': RedactorEditor(),            }    class EntryAdmin(admin.ModelAdmin):        form = EntryAdminForm`RedactorEditor` takes the same parameters as `RedactorField`.Using Plugins-------------`Download &lt;http://imperavi.com/redactor/plugins/&gt;`_ the plugin you want or `create a custom plugin &lt;http://imperavi.com/redactor/docs/how-to-create-plugin/&gt;`_.Then:.. code-block:: python    from django.db import models    from redactor.fields import RedactorField    class Entry(models.Model):        title = models.CharField(max_length=250, verbose_name=u'Title')        short_text = RedactorField(            verbose_name=u'Text',            # for example, if you downloaded the 'table' plugin:            redactor_options={'plugins': ['table']}        )OR (on settings.py):.. code-block:: python    REDACTOR_OPTIONS = {'lang': 'en', 'plugins': ['table']}Important: if you set a plugin called &quot;table&quot;, you must create/paste the &quot;table.js&quot; on **YOUR_STATIC_FILES_FOLDER/redactor/plugins/table.js**Upload Handlers---------------SimpleUploader - The Standard Uploader. Will upload your file to REDACTOR_UPLOAD.UUIDUploader - This handler will replace the original file name for an UUID.DateDirectoryUploader - This handler saves the file in a directory based on the current server date.Usage:For example, if I want to use the DateDirectoryUploader handler, I will put this on settings.py:.. code-block:: python    REDACTOR_UPLOAD_HANDLER = 'redactor.handlers.DateDirectoryUploader'Upload permissions------------------By default django-wysiwyg-redactor uses `staff_member_required` decorator from`django.contrib.admin.views.decorators` package to control access to dispatchmethod.To use custom authentication decorator, set `REDACTOR_AUTH_DECORATOR` toanything else, eg. if every authenticated user should have permissions toupload files/images/etc.:.. code-block:: python    REDACTOR_AUTH_DECORATOR = 'django.contrib.auth.decorators.login_required'File Storages-------------*django-wysiwyg-redactor* defaults to using the default media storage for your Django application.This can be overridden to use a different storage backend with this settings.py variable:.. code-block::    REDACTOR_FILE_STORAGE = 'my_site.file_storages.StorageClass'Information on writing a custom storage backend is `here in the Django documentation &lt;https://docs.djangoproject.com/en/1.7/howto/custom-file-storage/&gt;`_.Other third-party libraries exist to provide storage backends for cloud object storages (e.g. `django-cumulus &lt;https://github.com/django-cumulus/django-cumulus/&gt;`_ for Rackspace/OpenStack or `django-storages &lt;http://django-storages.readthedocs.org/en/latest/backends/amazon-S3.html&gt;`_ for Amazon S3). For example, following should be enough to store all your files and images to Amazon S3, even if the rest of the application uses different storage... code-block:: python    REDACTOR_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'    AWS_ACCESS_KEY_ID = '...'    AWS_SECRET_ACCESS_KEY = '...'    AWS_STORAGE_BUCKET_NAME = '...'NOTE: Soon we will have a better documentation.Contributing------------1. Fork it!2. Create your feature branch: `git checkout -b my-new-feature`3. Commit your changes: `git commit -am 'Add some feature'`4. Push to the branch: `git push origin my-new-feature`5. Submit a pull request =]Made by robots, or what?------------------------Awesome people, you should see the `AUTHORS &lt;https://github.com/douglasmiranda/django-wysiwyg-redactor/blob/master/AUTHORS&gt;`_ file.About the licensing-------------------You may want to see the `LICENSE &lt;https://github.com/douglasmiranda/django-wysiwyg-redactor/blob/master/LICENSE&gt;`_ file.</longdescription>
</pkgmetadata>