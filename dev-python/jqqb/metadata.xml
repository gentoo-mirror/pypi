<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jQueryQueryBuilderPython Rule evaluator for jQuery-QueryBuilder. It evaluates rules agains provided objects.[Website](http://www.shunyeka.com) â€¢ [autobotAI Cloud Governance](https://autobot.live/)Inspired from [SixiS/jquery_query_builder-rails](https://github.com/SixiS/jquery_query_builder-rails)## UsageInstall the package.```pip install jqqb```Usage Example:```pythonfrom jqqb import QueryBuilderrule_json = {    &quot;condition&quot;: &quot;AND&quot;,    &quot;rules&quot;: [{        &quot;id&quot;: &quot;tagname&quot;,        &quot;field&quot;: &quot;tags.name&quot;,        &quot;type&quot;: &quot;string&quot;,        &quot;input&quot;: &quot;text&quot;,        &quot;operator&quot;: &quot;not_contains&quot;,        &quot;value&quot;: &quot;production&quot;    }, {        &quot;id&quot;: &quot;tagname&quot;,        &quot;field&quot;: &quot;tags.name&quot;,        &quot;type&quot;: &quot;string&quot;,        &quot;input&quot;: &quot;text&quot;,        &quot;operator&quot;: &quot;begins_with&quot;,        &quot;value&quot;: &quot;development&quot;    }, {        &quot;condition&quot;: &quot;OR&quot;,        &quot;rules&quot;: [{            &quot;id&quot;: &quot;type&quot;,            &quot;field&quot;: &quot;type&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;input&quot;: &quot;text&quot;,            &quot;operator&quot;: &quot;equal&quot;,            &quot;value&quot;: &quot;ec2&quot;        },{            &quot;id&quot;: &quot;type&quot;,            &quot;field&quot;: &quot;type&quot;,            &quot;type&quot;: &quot;string&quot;,            &quot;input&quot;: &quot;text&quot;,            &quot;operator&quot;: &quot;equal&quot;,            &quot;value&quot;: &quot;ami&quot;        }]    }]}evaluator = QueryBuilder(rule_json)object_1 = {'type': &quot;ec2&quot;, &quot;tags&quot;: [{&quot;name&quot;: &quot;hello&quot;}, {&quot;name&quot;: &quot;asdfasfproduction_instance&quot;}]}object_2 = {'type': &quot;ami&quot;, &quot;tags&quot;: [{&quot;name&quot;: &quot;development&quot;}, {&quot;name&quot;: &quot;asfdafdroduction_instance&quot;}, {&quot;name&quot;: &quot;proction&quot;}]}objects = [object_1, object_2]print(evaluator.match_objects(objects))print(evaluator.inspect_objects(objects))```Result:```python[{'type': 'ami', 'tags': [{'name': 'development'}, {'name': 'asfdafdroduction_instance'}, {'name': 'proction'}]}][    {        'object': {'type': 'ec2', 'tags': [{'name': 'hello'}, {'name': 'asdfasfproduction_instance'}]},        'selected': False,        'results': [            (                {'id': 'tagname', 'field': 'tags.name', 'type': 'string', 'input': 'text', 'operator': 'not_contains', 'value': 'production'},                (['hello', 'asdfasfproduction_instance'], 'production', False)            ),            (                {'id': 'tagname', 'field': 'tags.name', 'type': 'string', 'input': 'text', 'operator': 'begins_with', 'value': 'development'},                (['hello', 'asdfasfproduction_instance'], 'development', False)            ),            (                {                    'condition': 'OR',                    'rules': [                        {                            'id': 'type',                            'field': 'type',                            'type': 'string',                            'input': 'text',                            'operator': 'equal',                            'value': 'ec2'                        }, {                            'id': 'type',                            'field': 'type',                            'type': 'string',                            'input': 'text',                            'operator': 'equal',                            'value': 'ami'                        }                    ]                },                [                    (                        {'id': 'type', 'field': 'type', 'type': 'string', 'input': 'text', 'operator': 'equal', 'value': 'ec2'},                        ('ec2', 'ec2', True)                    ),                    (                        {'id': 'type', 'field': 'type', 'type': 'string', 'input': 'text', 'operator': 'equal', 'value': 'ami'},                        ('ec2', 'ami', False)                    )                ]            )        ]    },    {        'object': {'type': 'ami', 'tags': [{'name': 'development'}, {'name': 'asfdafdroduction_instance'}, {'name': 'proction'}]},        'selected': True,        'results': [            (                {'id': 'tagname', 'field': 'tags.name', 'type': 'string', 'input': 'text', 'operator': 'not_contains', 'value': 'production'},                (                    ['development', 'asfdafdroduction_instance', 'proction'], 'production', True                )            ), (                {'id': 'tagname', 'field': 'tags.name', 'type': 'string', 'input': 'text', 'operator': 'begins_with', 'value': 'development'},                (                    ['development', 'asfdafdroduction_instance', 'proction'], 'development', True                )            ), (                {                    'condition': 'OR',                    'rules': [                        {'id': 'type', 'field': 'type', 'type': 'string', 'input': 'text', 'operator': 'equal', 'value': 'ec2'},                        {'id': 'type', 'field': 'type', 'type': 'string', 'input': 'text', 'operator': 'equal', 'value': 'ami'}                    ]                }, [                    (                        {'id': 'type', 'field': 'type', 'type': 'string', 'input': 'text', 'operator': 'equal', 'value': 'ec2'},                        ('ami', 'ec2', False)                    ), (                        {'id': 'type', 'field': 'type', 'type': 'string', 'input': 'text', 'operator': 'equal', 'value': 'ami'},                        ('ami', 'ami', True)                    )                ]            )        ]    }]```## Run tests```bashpython setup.py test```</longdescription>
</pkgmetadata>