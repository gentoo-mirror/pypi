<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ETL Lib[![Upload Python Package](https://github.com/inovacaodigital/etl_pbshop_lib/workflows/Upload%20Python%20Package/badge.svg)](https://github.com/inovacaodigital/etl_pbshop_lib/workflows/Upload%20Python%20Package/badge.svg)[![PyPI version](https://badge.fury.io/py/etl-pbshop.svg)](https://badge.fury.io/py/etl-pbshop)This is a simple package built for Portobello Shop integrations, and now is available as ETL lib. Can be used with several services, like: * Oracle * Salesforce  * MSSQL Server * GSuite * Microvix * ODBC Drivers: PYODBC and SQLALCHEMY * And any REST services ... Comming soon: * RabbitMQ * Kafka * OpenVault (Credentials) * ... # Basic Usage  ## Rewrite ETL ABC class Use inheritance and rewrite the three abstract methods (even if you don't use it): ```pythonfrom etl_pbshop import ETL, Connectorsclass MyETL(ETL):    def __init__(self):        self.config = MyConfiguration()        self.log = self.config.log        self.connector = Connectors(            config=self.config,             log=self.log,             services={'google': 'PROD', &quot;salesforce&quot;: &quot;PROD&quot;}        )    def extract(self):        pass  # extract the needed data using Connectors    def transform(self):         pass  # do some transformations    def load(self):        pass  # upload your transformations```## Main caller:On the main caller, you can simply: ```pythonif __name__ == '__main__':    etl = MyETL()    etl.config.start()    try:        etl.run()        exit(0)    except Exception as e:        etl.get_error(f&quot;ERROR on main: {str(e)}&quot;)        raise e    finally:        etl.config.finish()```## Rewriting default ConfigModel:In another class, you can rewrite the ConfigModel class and input your values:  ```pythonfrom etl_pbshop.config_model import ConfigModelclass MyConfiguration(ConfigModel):    def __init__(self):        super().__init__(__file__)        self.SQL_QUERIES = {            &quot;produtos&quot;: &quot;SELECT * FROM Products2&quot;        }        self.INTEGRATION_SPREADSHEET_ID = '654asd5as1das5d165a4d68'     ```## Environment variables:You can put your environment variables to use the Connectors class.In a `.env` file, set it in groups, like:```.envINTEGRACAO_ORACLE_ID_1=1INTEGRACAO_ORACLE_TOKEN_VALUE_1=asd1234asd==INTEGRACAO_ORACLE_TOKEN_URL_1=http://example.com/tokenINTEGRACAO_ORACLE_METHOD_URL_1=http://example.com/method_to_postINTEGRACAO_ORACLE_USER_1=asd..INTEGRACAO_ORACLE_PASS_1=qwerty..INTEGRACAO_ORACLE_ENVIRONMENT_1=DEVINTEGRACAO_MICROVIX_ID_1=1INTEGRACAO_MICROVIX_TOKEN_VALUE_1=1234-123-123-1234INTEGRACAO_MICROVIX_METHOD_URL_1=https://webapi.microvix.com.br/1.0/api/methodINTEGRACAO_MICROVIX_USER_1=userINTEGRACAO_MICROVIX_PASS_1=passINTEGRACAO_MICROVIX_ENVIRONMENT_1=PRODINTEGRACAO_SALESFORCE_ID_1=1INTEGRACAO_SALESFORCE_TOKEN_VALUE_1=qwertyINTEGRACAO_SALESFORCE_METHOD_URL_1=https://login.salesforce.com/services/Soap/u/47.0INTEGRACAO_SALESFORCE_USER_1=username@example.comINTEGRACAO_SALESFORCE_PASS_1=myPassINTEGRACAO_SALESFORCE_ENVIRONMENT_1=PROD```You only need to keep the pattern: `INTEGRACAO_&lt;service_name&gt;_&lt;key_name&gt;_&lt;group_id&gt;`More info, please contact: [daniel.camargo@portobelloshop.com.br](mailto:daniel.camargo@portobelloshop.com.br)</longdescription>
</pkgmetadata>