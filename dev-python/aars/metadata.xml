<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AARS - Aleph Active Record SDKAARS is a powerful and flexible Python library built on top of the Aleph decentralized storage network, designed to help you build better backends for your decentralized applications. It provides an easy-to-use interface for managing and querying your data, with a focus on performance and versatility.## Features- Asynchronous, high-performance data storage and retrieval- Customizable schema with support for different data types- Indexing for efficient querying- Revision history tracking for records- Support for forgetting data (GDPR compliant)- Built-in pagination for large result sets## InstallationInstall AARS using pip:```shellpip install aars```## Getting StartedTo get started with AARS, you will need to define your data schema by creating classes that inherit from Record. These classes represent the objects you want to store and query on the Aleph network.Here's an example of how you can implement a simple social media platform, that we'll call &quot;Chirper&quot;:```pythonfrom src.aars import Recordclass User(Record):    username: str    bio: strclass Chirp(Record):    author: User    content: str    likes: int    timestamp: int```In this example, we have a User class representing a user of Chirper, and a Chirp class representing a user's message. Now, let's create some indices to make querying our data more efficient:```pythonfrom src.aars import IndexIndex(User, 'username')Index(Chirp, 'author')Index(Chirp, 'timestamp')```With the schema defined and indices created, we only need to initialize an AARS session:    ```pythonfrom src.aars import AARSAARS()```It is enough to call the constructor once, and it will automatically initialize the session with the default settings.We can now perform various operations, such as creating new records, querying records, and updating records:```pythonimport time# Create a new usernew_user = await User(username='chirpy_user', display_name='Chirpy User', bio='I love chirping!').save()# Create a new chirpnew_chirp = await Chirp(author=new_user, content='Hello, Chirper!', likes=0, timestamp=int(time.time())).save()# Query chirps by authorchirps_by_author = await Chirp.filter(author=new_user).all()# Update a chirpnew_chirp.likes += 1updated_chirp = await new_chirp.save()```## DocumentationFor detailed documentation, including advanced features such as revision history, forgetting data, and pagination,refer to the docs folder in the repository or [visit the official documentation website](https://aleph-im.github.io/active-record-sdk/).## Building the DocsTo build the documentation, you will need to install the dependencies listed in the requirements.txt and docs-requirements.txt. Then, run the following command:```shellmkdocs build```You can serve the documentation locally by running the following command:```shellmkdocs serve```## ContributingContributions to AARS are welcome! If you have found a bug, want to suggest an improvement, or have a question, feel free to open an issue on the GitHub repository.## LicenseAARS is released under the [MIT License](https://github.com/aleph-im/active-record-sdk/blob/main/LICENSE).</longdescription>
</pkgmetadata>