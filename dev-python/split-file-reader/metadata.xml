<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Python](https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;logo=python&amp;logoColor=ffdd54)![GitLab CI](https://img.shields.io/badge/GitLabCI-%23181717.svg?style=for-the-badge&amp;logo=gitlab&amp;logoColor=white)[![pipeline status](https://gitlab.com/Reivax/split_file_reader/badges/master/pipeline.svg)](https://gitlab.com/Reivax/split_file_reader/-/commits/master)[![coverage report](https://gitlab.com/Reivax/split_file_reader/badges/master/coverage.svg?job=pytest)](https://gitlab.com/Reivax/split_file_reader/-/commits/master)# SplitFileReader, SplitFileWriter, and HTTPFileReaderA collection of tools designed to produce and consume data across multiple files as though they were single,cohesive files.  The modules are fully file-like, and completely transparent to anything that a Python object mightrequire when manipulating files.  `zipfile.ZipFile`, `tarfile.TarFile`, `io.TextIOWrapper`, and many other classes interact with all of these classes natively with no modification whatsoever.## SplitFileReaderA python module to transparently read files that have been split on disk, without combining them.  Exposes the `readable`, `read`, `writable`, `write`, `tellable`, `tell`, `seekable`, `seek`, `open` and `close` methods, as wellas a Context Manager and an Iterable.### Usage#### Simple ExampleList all of the files within a TAR file that has been broken into multiple parts.```pythonimport tarfilefrom split_file_reader import SplitFileReaderfilepaths = [    &quot;./files/archives/files.tar.000&quot;,    &quot;./files/archives/files.tar.001&quot;,    &quot;./files/archives/files.tar.002&quot;,    &quot;./files/archives/files.tar.003&quot;,]with SplitFileReader(filepaths) as sfr:    with tarfile.open(fileobj=sfr, mode=&quot;r&quot;) as tf:        for tff in tf.filelist:            print(&quot;File in archive: &quot;, tff.name)```#### Text files.The `SplitFileReader` and `SplitFileWriter` works only on binary data, but do support the use of the `io.TextIOWrapper`.The `SplitFileReader` may also be given a glob for the filepaths.```pythonimport globfrom io import TextIOWrapperfrom split_file_reader import SplitFileReaderfile_glob = glob.glob(&quot;./files/plaintext/Adventures_In_Wonderland.txt.*&quot;)with SplitFileReader(file_glob) as sfr:    with TextIOWrapper(sfr) as text_wrapper:        for line in text_wrapper:            print(line, end='')```## SplitFileWriterA python module to produce parted files on disk.  Exposes the `readable`, `read`, `writable`, `write`, `tellable`, `tell`, `seekable`, `seek`, `open` and `close` functions, as wellas a Context Manager.### UsageThis module is the conceptual counterpart to the SplitFileReader, in that it _produces_ data that has been binary split.#### Simple Example```pythonwith SplitFileWriter(&quot;split.zip.&quot;, 500_000) as sfw:    with zipfile.ZipFile(file=sfw, mode='w') as zipf:        for root, dirs, files in os.walk(&quot;./&quot;):            for file in files:                if file.startswith(&quot;random_payload&quot;):                    zipf.write(os.path.join(root, file))```Complex file names and mixed file objects are permitted via generators instead.#### Memory-only file-like operationsSometimes it behooves one to keep track of files strictly in memory, ensuring that the various file sizes remain managable.  This is a way to process each chunk after producing a large file.```pythonimport zipfilefrom io import BytesIOfrom split_file_reader import SplitFileWriterchunks = []xml_file = &quot;&quot;&quot;&lt;xml&gt;payload&lt;/xml&gt;&quot;&quot;&quot;def gen(lst):    while True:        lst.append(BytesIO())        yield lst[-1]with SplitFileWriter(gen(chunks), 1_000_000) as sfw:    with zipfile.ZipFile(sfw, &quot;w&quot;) as zip_file:        zip_file.writestr(&quot;test.xml&quot;, xml_file)for i, chunk in enumerate(chunks):    print(f'chunk {i}: {len(chunk.getvalue())}')```See [this stackoverflow question for a ](https://stackoverflow.com/questions/68983459/split-a-zip-file-into-chunks-with-python/68983810) for a specific example.  Alternatively, rather than keeping a list of every BytesIO object, after the yield one could manage that buffer on demand, such as by saving it to disk or sending it via HTTP.## HTTPFileReaderA python module to transparently read files that are hosted on a remote HTTPserver.  Exposes the `readable`, `read`, `writable`, `write`, `tellable`, `tell`, `seekable`, `seek`, `open` and `close` functions, as well as a ContextManager.This class is fast for skipping over large amounts of data and downloading only select parts.  It is inefficient forextracting or processing entire files.### UsageThis module is the equivalent of `builtins.open` for a file hosted on an HTTP server.#### Simple ExampleList all of the files within a Tar file that is remotely hosted.```pythonimport tarfileimport requestsfrom split_file_reader.http_file_reader import HTTPFileReaderwith requests.Session() as session:    with HTTPFileReader(url=&quot;http://localhost/file.tar&quot;, session=session) as hfr:        with tarfile.open(fileobj=hfr, mode=&quot;r&quot;) as tf:            for tff in tf.filelist:                print(&quot;File in archive: &quot;, tff.name)```# Use cases#### Github and Gitlab Large File SizeGithub and Gitlab (as well as other file repositories) impose file size limits.  By parting these files intosufficiently small chunks, the `SplitFileReader` will be able to make transparent use of them, as though they were asingle cohesive file.  This will remove any requirements to host these files with pre-fetch or pre-commit scripts, orany other &quot;setup&quot; mechanism to make use of them.The `HTTPFileReader` will be able to make _direct_ use of the files as they are hosted on Gitlab or Github, withoutdownloading the entire archive.These two classes can be mixed as well.  For example, to access just one file from a Tar file that is hosted onGitlab that has been split into parts:```pythonwith requests.Session() as ses:    with HTTPFileReader(url=&quot;https://gitlab.com/.../files.zip.000?inline=false&quot;,session=ses,) as hfr0, \         HTTPFileReader(url=&quot;https://gitlab.com/.../files.zip.001?inline=false&quot;,session=ses,) as hfr1, \         HTTPFileReader(url=&quot;https://gitlab.com/.../files.zip.002?inline=false&quot;,session=ses,) as hfr2:        with SplitFileReader(            files=[hfr0, hfr1, hfr2, ]        ) as sfr:            with zipfile.ZipFile(file=sfr, mode='r') as zf:                zff = zf.open(&quot;random_payload_3.bin&quot;)                ...```#### Random AccessThese reader objects allows for random access of the data, allowing for Tar or Zip files to be extracted without first combining them.  They do not, however, enforce any data encoding; wrap a TextIOWrapper if text is needed, or any otherwrapper for any other sort of data encoding.```pythonsfr = split_file_reader.open(filepaths)with zipfile.ZipFile(sfr, &quot;r&quot;) as zf:    print(zf.filelist)sfr.close()```Or, for text files:```pythonwith SplitFileReader(filepaths) as sfr:    with io.TextIOWrapper(sfr, encoding=&quot;utf-8&quot;) as tiow:        for line in tiow:            print(line, end='')```# Command Line InvocationThe module may be used via the command line for the reading of certain archive types.  Presently, only Tarand Zip formats are supported, and they must have been split via the `split` command, or other binary split mechanism.These files can be produced on the command line via `split`, f.x., `zip - *.bin | split -d -n3 - -b 50000 archive.zip.````usage:  [-h] [-a {zip,z,tar,t,tgz,tbz,txz}] [-p &lt;password&gt;]        (-t | -l | -x &lt;destination&gt; | -r &lt;filename&gt;)        &lt;filepath&gt; [&lt;filepath&gt; ...]Identify and process parted archives without manual concat. This command linecapability provides supports only Tar and Zip files; but not 7z or Rar.Designed to work for files that have been split via the `split` utility, orany other binary cut; but does not support Zip's built-in split capability.The python module supports any arbitrarily split files, regardless of type.positional arguments:  &lt;filepath&gt;            In-order list of the parted files on disk. Use shell                        expansion, such as ./files.zip.*optional arguments:  -h, --help            show this help message and exit  -a {zip,z,tar,t,tgz,tbz,txz}, --archive {zip,z,tar,t,tgz,tbz,txz}                        Archive type, either zip, tar, tgz, tbz, or txz  -p &lt;password&gt;, --password &lt;password&gt;                        Zip password, if needed  -t, --test            Test the archive, using the module's built-in test.  -l, --list            List all the payload files in the archive.  -x &lt;destination&gt;, --extract &lt;destination&gt;                        Extract the entire archive to filepath &lt;destination&gt;.  -r &lt;filename&gt;, --read &lt;filename&gt;                        Read out payload file contents to stdout.```#### ExamplesTo display the contents of the Zip files included in the test suite of this module, run```bashpython3 -m split_file_reader -azip --list ./files/archives/files.zip.*```The bash autoexpansion of the `*` wildcard will fill in the files in order, correctly.  `--list` will print out the names of the payload files within the zip archive, and the `-azip` flag instructs the module to expect the `Zip` archive type.</longdescription>
</pkgmetadata>