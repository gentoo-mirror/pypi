<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸŽ£ narmock[![GitHub Actions](https://github.com/vberlier/narmock/workflows/CI/badge.svg)](https://github.com/vberlier/narmock/actions)[![PyPI](https://img.shields.io/pypi/v/narmock.svg)](https://pypi.org/project/narmock/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/narmock.svg)](https://pypi.org/project/narmock/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)&gt; A minimal mocking utility for C projects.Narmock finds the functions mocked in your tests and generates mocks with a slick API.```c#include &lt;time.h&gt;#include &quot;__mocks__.h&quot;#include &quot;narwhal.h&quot;TEST(example){    MOCK(time)-&gt;mock_return(42);    ASSERT_EQ(time(NULL), 42);}```&gt; This example is a test written with [Narwhal](https://github.com/vberlier/narwhal) but Narmock can be used with other test frameworks and anywhere in regular source code.## InstallationThe package can be installed with `pip`.```bash$ pip install narmock```## Getting startedThe command-line utility provides two essential commands that should make it possible to integrate Narmock in any kind of build system.```usage: narmock [-h] (-g [&lt;code&gt;] | -f) [-d &lt;directory&gt;] [-k [&lt;regex&gt;]] [-s &lt;size&gt;]A minimal mocking utility for C projects.optional arguments:  -h, --help      show this help message and exit  -g [&lt;code&gt;]     generate mocks  -f              output linker flags  -d &lt;directory&gt;  mocks directory  -k [&lt;regex&gt;]    keep argument names  -s &lt;size&gt;       stack size used to forward variadic arguments```&gt; Check out the [basic example](https://github.com/vberlier/narmock/tree/master/examples/basic) for a simple Makefile that integrates both [Narwhal](https://github.com/vberlier/narwhal) and Narmock.### Generating mocksThe `narmock -g` command finds the functions mocked in your code and generates a `__mocks__.c` file and a `__mocks__.h` file that respectively define and declare all the required mocks.```bash$ gcc -E *.c | narmock -g```Narmock requires source code to be expanded by the preprocessor. You can directly pipe the output of `gcc -E` to the command-line utility.By default, `__mocks__.c` and `__mocks__.h` will be created in the current directory. You can specify a different output directory with the `-d` option.```bash$ gcc -E tests/*.c | narmock -g -d tests```### Retrieving linker flagsThe `narmock -f` command reads the generated `__mocks__.h` file and outputs the necessary linker flags for linking all your source files together.```bash$ gcc $(narmock -f) *.c```By default, the command looks for `__mocks__.h` in the current directory. You can specify a different directory with the `-d` option.```bash$ gcc $(narmock -f -d tests) tests/*.c```## Mock APIThe `MOCK` macro returns a pointer to the mock API of a given function.```cMOCK(time);```### Mocking the returned valueYou can make a function return a specific value without calling its original implementation.```cMOCK(time)-&gt;mock_return(42);printf(&quot;%ld\n&quot;, time(NULL));  // Outputs 42```### Mocking the implementationYou can switch the implementation of a function.```ctime_t time_stub(time_t *timer){    return 42;}MOCK(time)-&gt;mock_implementation(time_stub);printf(&quot;%ld\n&quot;, time(NULL));  // Outputs 42```### Mocking errnoYou can make a function set `errno` to a specific value.```cMOCK(malloc)-&gt;mock_return(NULL)-&gt;mock_errno(ENOMEM);char *ptr = malloc(42);printf(&quot;%d\n&quot;, errno == ENOMEM);  // Outputs 1```### Disabling the mockYou can disable the mock and make the function call its original implementation.```cMOCK(time)-&gt;disable_mock();printf(&quot;%ld\n&quot;, time(NULL));  // Outputs the current time```### Counting and inspecting callsNarmock keeps track of the number of times mocked functions are called.```cprintf(&quot;%ld\n&quot;, time(NULL));  // Outputs the current timeprintf(&quot;%ld\n&quot;, MOCK(time)-&gt;call_count);  // Outputs 1```You can also inspect the last call of a function. Note that the `last_call` pointer is `NULL` until the function gets called for the first time.```cprintf(&quot;%ld\n&quot;, time(NULL));  // Outputs the current timeprintf(&quot;%p\n&quot;, MOCK(time)-&gt;last_call-&gt;arg1);           // Outputs (nil)printf(&quot;%ld\n&quot;, MOCK(time)-&gt;last_call-&gt;return_value);  // Outputs the current time```The value of `errno` is captured and saved in the `errsv` attribute.```cfopen(&quot;does_not_exist.txt&quot;, &quot;r&quot;);printf(&quot;%d\n&quot;, MOCK(fopen)-&gt;last_call-&gt;errsv == ENOENT);  // Outputs 1```By default, the arguments are accessible through the sequential `arg1`, `arg2`, `...`, `argN` attributes. If you want to keep the original name of the arguments for a set of specific functions you can use the `-k` option when generating the mocks.```bash$ gcc -E *.c | narmock -g -k &quot;myprefix_.*&quot;```The option takes a regular expression and generates mocks that use the original argument names for all the functions that match the regex.```bash$ gcc -E *.c | narmock -g -k```Note that the default regex is `.*` so here every function would be affected.### Variadic functionsNarmock can mock functions with variadic arguments. The generated code uses the GNU extension for [constructing function calls](https://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Constructing-Calls.html) to forward the arguments. If GNU extensions are unavailable the mock will simply ignore the variadic arguments and only forward the fixed arguments.```cMOCK(open)-&gt;mock_return(1);ASSERT_EQ(open(&quot;a&quot;, 0), 1);```&gt; `open()` is variadic because of the optional `mode` argument.The functions provided by the GNU extension need to reserve some fixed space on the stack. By default, Narmock uses 512 bytes but you can specify a custom size by using the `-s` command-line argument when generating the mocks.```bash$ gcc -E *.c | narmock -g -s 1024```### Resetting everythingYou can reset the mock to its initial state. This will make the function use its original implementation and reset `call_count` to `0` and `last_call` to `NULL`.```cMOCK(time)-&gt;mock_return(42);printf(&quot;%ld\n&quot;, time(NULL));  // Outputs 42MOCK(time)-&gt;reset();printf(&quot;%ld\n&quot;, MOCK(time)-&gt;call_count);  // Outputs 0printf(&quot;%p\n&quot;, MOCK(time)-&gt;last_call);    // Outputs (nil)printf(&quot;%ld\n&quot;, time(NULL));              // Outputs the current time```You can also call the `narmock_reset_all_mocks` function to reset all the mock.```cnarmock_reset_all_mocks();```## ContributingContributions are welcome. Feel free to open issues and suggest improvements. This project uses [poetry](https://poetry.eustace.io/) so you'll need to install it first if you want to be able to work with the project locally.```bash$ curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python```You should now be able to install the required dependencies.```bash$ poetry install```The code follows the [black](https://github.com/ambv/black) code style.```bash$ poetry run black narmock```You can run the tests with `poetry run make -C tests`. The test suite is built with [Narwhal](https://github.com/vberlier/narwhal).```bash$ poetry run make -C tests```---License - [MIT](https://github.com/vberlier/narmock/blob/master/LICENSE)</longdescription>
</pkgmetadata>