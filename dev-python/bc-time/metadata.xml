<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Project descriptionPackage Version Python Versions Licensebc_time is the Binary City (BC) Time Application Programming Interface (API) Software Development Kit (SDK) for Python, that allows Python developers to develop integration with [BC Time](https://time.bcity.me).bc_time is maintained and published by [Binary City](https://bcity.me).# Getting startedAssuming that you have a supported version of Python installed, you can first set up your environment with:$ python venv .venv...$ . .venv/bin/activateThen, you can install bc_time from PyPI with:$ python pip install bc_timeor install from source with:~~~$ git clone git@bitbucket.org:dburger/bc_time_api_sdk.git$ cd bc_time_api_sdk$ python pip install -r requirements.txt$ python pip install -e .~~~# Using bc_timeAfter you've installed bc_time, the next step is to set-up your credentials at:\$HOME/.bc_time/config~~~[default]client_id = YOUR_CLIENT_IDclient_secret = YOUR_CLIENT_SECRETcrypt_key = YOUR_CRYPT_KEYgrant_type = YOUR_GRANT_TYPE ; authorisation_code | client_credentials | urn:ietf:params:oauth:grant-type:jwt-bearerprivate_key_file_path = FILE_PATH_TO_YOUR_PRIVATE_KEYtime_domain = BETA_OR_OTHER_NON_PRODUCTION_TIME_DOMAIN ; Optional.~~~## How to create a private/public key pairUsing OpenSSL, follow these to steps to generate a private &amp; public key par~~~ openssl genrsa -out privatekey.pem 1024 openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 1825 ~~~Then, from a Python interpreter:~~~&gt;&gt;&gt; import bc_time&gt;&gt;&gt; visitors = bc_time.Visitors()&gt;&gt;&gt; response_data = visitors.get_all_using_pagination(filters={'filter_status': bc_time.Status.active})&gt;&gt;&gt; if response_data['status'] == bc_time.RequestStatus.success:                for visitor in response_data['data']:                        print(visitor)~~~You also have the option to specify your credentials via the constructor of the Api class:~~~&gt;&gt;&gt; import bc_time&gt;&gt;&gt; api = bc_time.Api(                client_id='YOUR_CLIENT_ID',                client_secret='YOUR_CLIENT_SECRET',                crypt_key='YOUR_CRYPT_KEY',                grant_type='YOUR_GRANT_TYPE' # Consider using the bc_time.GrantType constants, for example bc_time.GrantType.CLIENT_CREDENTIALS        )&gt;&gt;&gt; visitors = bc_time.Visitors(api)&gt;&gt;&gt; response_data = visitors.get_all_using_pagination()&gt;&gt;&gt; if response_data['status'] == bc_time.RequestStatus.success:                for visitor in response_data['data']:                        print(visitor)~~~# Available enumerators* ApiAuthorisationType* DeviceCommunicationType* GrantType* RequestStatus* Status# Available classes* Api# Available objects* ApiAuthorisations* Branches* CompanyProfiles* Controllers* Departments* Devices* DailyOvertimeData* Employees* EmployeeLeave* Settings* Visitors* VisitorGroups# Available methods## For (most) objects* create* create_many* update* update_many* get_all_using_pagination* get_one* get_many## For membership/group objectsPlease note that group objects also has access the the methods as defined for Objects.* add_visitor_to_group* remove_visitor_from_group* get_all_members_using_paginationAll methods will return a Dictionary that - depending on the response - may contain the following keys:* status* dataStatus IDs can be referenced using the enumerator bc_time.RequestStatus.# DocumentationPlease consult our [BC Time API documentation](https://docs.google.com/document/d/1sI0mUy8-65NuDfVKKBxzJSyY9olkjWp3xmtRnR58Lkg/) for more information.</longdescription>
</pkgmetadata>