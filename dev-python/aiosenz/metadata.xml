<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aioSENZ package [![PyPI](https://img.shields.io/pypi/v/aiosenz)](https://pypi.org/project/aiosenz) ![PyPI - Downloads](https://img.shields.io/pypi/dm/aiosenz) [![PyPI - License](https://img.shields.io/pypi/l/aiosenz?color=blue)](https://github.com/milanmeu/aiosenz/blob/main/COPYING)An async Python wrapper for the nVent Raychem SENZ RestAPI.## Installation```bashpip install aiosenz```## OAuth2This package offers an `AbstractSENZAuth`, where you should handle the OAuth2 tokens and provide a valid access token in `get_access_token()`. You can use `SENZAuth` if you don't want to handle the OAuth2 tokens yourself.## Grant type`SENZAuth` uses the Authorization Code grant type. This requires a Client ID and Client Secret, more information is available in [the RestAPI documentation](https://api.senzthermostat.nvent.com).## ScopesAioSENZ uses the `restapi` and `offline_access` scope, this is set as default in SENZAuth and should be set in the OAuth2 client if you are using the AbstractSENZAuth class. The OpenID (`openid`) and OpenID Profile (`profile`) scopes are not supported, because nVent recommends to use the RestAPI Account instead.## Example```pythonfrom asyncio import runfrom aiosenz import SENZAuth, SENZAPIimport httpxasync def main():    async with httpx.AsyncClient() as httpx_client:        senz_auth = SENZAuth(            httpx_client,            &quot;YOUR_CLIENT_ID&quot;,            &quot;YOUR_CLIENT_SECRET&quot;,            redirect_uri=&quot;http://localhost:8080/auth/callback&quot;,        )        uri, state = await senz_auth.get_authorization_url()        print(&quot;Authorization URI: &quot;, uri)        authorization_response = input(&quot;The authorization response URL: &quot;)        await senz_auth.set_token_from_authorization_response(authorization_response)                senz_api = SENZAPI(senz_auth)        thermostats = await senz_api.get_thermostats()        for thermostat in thermostats:            print(f&quot;{thermostat.name} temperature: {thermostat.current_temperatue}&quot;)        await senz_auth.close()run(main())```</longdescription>
</pkgmetadata>