<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.svix.com&quot;&gt;    &lt;img width=&quot;120&quot; src=&quot;https://avatars.githubusercontent.com/u/80175132?s=200&amp;v=4&quot; /&gt;    &lt;p align=&quot;center&quot;&gt;Svix - Webhooks as a service&lt;/p&gt;  &lt;/a&gt;&lt;/h1&gt;# Svix-KSUID![API-Lint](https://github.com/svixhq/python-ksuid/workflows/lint/badge.svg)![Frontend-Lint](https://github.com/svixhq/python-ksuid/workflows/test/badge.svg)![GitHub tag](https://img.shields.io/github/tag/svixhq/python-ksuid.svg)[![PyPI](https://img.shields.io/pypi/v/svix-ksuid.svg)](https://pypi.python.org/pypi/svix-ksuid/)[![Join our slack](https://img.shields.io/badge/Slack-join%20the%20community-blue?logo=slack&amp;style=social)](https://www.svix.com/slack/)This library is inspired by [Segment's KSUID](https://segment.com/blog/a-brief-history-of-the-uuid/) implementation:https://github.com/segmentio/ksuid## What is a ksuid?A ksuid is a K sorted UID. In other words, a KSUID also stores a date component, so that ksuids can be approximately sorted based on the time they were created. Read more [here](https://segment.com/blog/a-brief-history-of-the-uuid/).## Usage```pip install svix-ksuid``````from ksuid import Ksuidksuid = Ksuid()```### Higher timestamp accuracy modeKsuids have a 1 second accuracy which is not sufficient for all use-cases. That's why this library exposes a higher accuracy mode which supports accuracy of up to 4ms.It's fully compatible with normal ksuids, in fact, it outputs valid ksuids. The difference is that it sacrifices one byte of the random payload in favor of this accuracy.The code too is fully compatible:```pip install svix-ksuid``````from ksuid import KsuidMsksuid = KsuidMs()```## Examples### Default ksuidGenerate a ksuid without passing a specific datetime```In [1]: from ksuid import KsuidIn [2]: ksuid = Ksuid()In [3]: f&quot;Base62: {ksuid}&quot;Out[3]: 'Base62: 1srOrx2ZWZBpBUvZwXKQmoEYga2'In [4]: f&quot;Bytes: {bytes(ksuid)}&quot;Out[4]: &quot;Bytes: b'\\r5\\xc43\\xe1\\x93&gt;7\\xf2up\\x87c\\xad\\xc7tZ\\xf5\\xe7\\xf2'&quot;In [5]: f&quot;Datetime: {ksuid.datetime}&quot;Out[5]: 'Datetime: 2021-05-21 14:04:03'In [6]: f&quot;Timestamp: {ksuid.timestamp}&quot;Out[6]: 'Timestamp: 1621627443'In [7]: f&quot;Payload: {ksuid.payload}&quot;Out[7]: &quot;Payload: b'\\xe1\\x93&gt;7\\xf2up\\x87c\\xad\\xc7tZ\\xf5\\xe7\\xf2'&quot;```### ksuid from datetime```In [1]: datetime = datetime(year=2021, month=5, day=19, hour=1, minute=1, second=1, microsecond=1)In [2]: datetimeOut[2]: datetime.datetime(2021, 5, 19, 1, 1, 1, 1)In [3]: ksuid = Ksuid(datetime)In [4]: ksuid.datetimeOut[4]: datetime.datetime(2021, 5, 19, 1, 1, 1)In [5]: ksuid.timestampOut[5]: 1621407661```### ksuid from base62```In [1]: ksuid = Ksuid()In [2]: ksuid.timestampOut[2]: 1621634852In [3]: f&quot;Base62: {ksuid}&quot;Out[3]: 'Base62: 1srdszO8Xy2cR6CnARnvxCfRmK4'In [4]: ksuid_from_base62 = Ksuid.from_base62(&quot;1srdszO8Xy2cR6CnARnvxCfRmK4&quot;)In [5]: ksuid_from_base62.timestampOut[5]: 1621634852```### ksuid from bytes```In [1]: ksuid = Ksuid()In [2]: ksuid_from_bytes = ksuid.from_bytes(bytes(ksuid))In [3]: f&quot;ksuid: {ksuid}, ksuid_from_bytes: {ksuid_from_bytes}&quot;Out[3]: 'ksuid: 1sreAHoz6myPhXghsOdVBoec3Vr, ksuid_from_bytes: 1sreAHoz6myPhXghsOdVBoec3Vr'In [4]: ksuid == ksuid_from_bytesOut[4]: True```### Compare ksuid(s)```In [1]: ksuid_1 = Ksuid()In [2]: ksuid_2 = Ksuid.from_bytes(bytes(ksuid_1))In [3]: f&quot;ksuid_1: {ksuid_1}, ksuid_2: {ksuid_2}&quot;Out[3]: 'ksuid_1: 1sreAHoz6myPhXghsOdVBoec3Vr, ksuid_2: 1sreAHoz6myPhXghsOdVBoec3Vr'In [4]: ksuid_1 == ksuid_2Out[4]: TrueIn [5]: ksuid_1Out[5]: 1tM9eRSTrHIrrH5SMEW24rtvIOFIn [6]: ksuid_2Out[6]: 1tM9eRSTrHIrrH5SMEW24rtvIOF```### Order of ksuid(s)```In [1]: ksuid_1 = Ksuid()In [2]: ksuid_1.timestampOut[2]: 1621963256In [3]: ksuid_2 = Ksuid()In [4]: ksuid_2.timestampOut[4]: 1621963266In [5]: ksuid_1 &lt; ksuid_2Out[5]: TrueIn [6]: ksuid_1 &lt;= ksuid_2Out[6]: TrueIn [7]: ksuid_1 &gt;= ksuid_2Out[7]: FalseIn [8]: ksuid_1 &gt; ksuid_2Out[8]: False```### Licenseksuid source code is available under an MIT [License](./LICENSE).</longdescription>
</pkgmetadata>