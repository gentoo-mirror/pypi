<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>*nolearn* contains a number of wrappers and abstractions aroundexisting neural network libraries, most notably `Lasagne&lt;http://lasagne.readthedocs.org/&gt;`_, along with a few machine learningutility modules.  All code is written to be compatible with`scikit-learn &lt;http://scikit-learn.org/&gt;`_... note::  nolearn is currently unmaintained.  However, if you follow the  installation instructions, you should still be able to get it to  work (namely with library versions that are outdated at this point).  If you're looking for an alternative to *nolearn.lasagne*, a library  that integrates neural networks with scikit-learn, then take a look  at `skorch &lt;https://github.com/skorch-dev/skorch&gt;`_, which wraps  PyTorch for scikit-learn... image:: https://travis-ci.org/dnouri/nolearn.svg?branch=master    :target: https://travis-ci.org/dnouri/nolearnInstallation============We recommend using `venv&lt;https://docs.python.org/3/library/venv.html&gt;`_ (when using Python 3)or `virtualenv&lt;http://www.dabapps.com/blog/introduction-to-pip-and-virtualenv-python/&gt;`_(Python 2) to install nolearn.nolearn comes with a list of known good versions of dependencies thatwe test with in ``requirements.txt``.  To install the latest versionof nolearn from Git along with these known good dependencies, runthese two commands::  pip install -r https://raw.githubusercontent.com/dnouri/nolearn/master/requirements.txt  pip install git+https://github.com/dnouri/nolearn.gitDocumentation=============If you're looking for how to use *nolearn.lasagne*, then there's twointroductory tutorials that you can choose from:- `Using convolutional neural nets to detect facial keypoints tutorial  &lt;http://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/&gt;`_  with `code &lt;https://github.com/dnouri/kfkd-tutorial&gt;`__- `Training convolutional neural networks with nolearn  &lt;http://nbviewer.ipython.org/github/dnouri/nolearn/blob/master/docs/notebooks/CNN_tutorial.ipynb&gt;`_  For specifics around classes and functions out of the *lasagne*package, such as layers, updates, and nonlinearities, you'll want tolook at the `Lasagne project's documentation&lt;http://lasagne.readthedocs.org/&gt;`_.*nolearn.lasagne* comes with a `number of tests&lt;https://github.com/dnouri/nolearn/tree/master/nolearn/lasagne/tests&gt;`__that demonstrate some of the more advanced features, such as networkswith merge layers, and networks with multiple inputs.`nolearn's own documentation &lt;http://packages.python.org/nolearn/&gt;`__is somewhat out of date at this point.  But there's more resourcesonline.Finally, there's a few presentations and examples from around the web.Note that some of these might need a specific version of nolearn andLasange to run:- Oliver DÃ¼rr's `Convolutional Neural Nets II Hands On  &lt;https://home.zhaw.ch/~dueo/bbs/files/ConvNets_24_April.pdf&gt;`_ with  `code &lt;https://github.com/oduerr/dl_tutorial/tree/master/lasagne&gt;`__- Roelof Pieters' presentation `Python for Image Understanding  &lt;http://www.slideshare.net/roelofp/python-for-image-understanding-deep-learning-with-convolutional-neural-nets&gt;`_  comes with nolearn.lasagne code examples- Benjamin Bossan's `Otto Group Product Classification Challenge  using nolearn/lasagne  &lt;https://github.com/ottogroup/kaggle/blob/master/Otto_Group_Competition.ipynb&gt;`_- Kaggle's `instructions on how to set up an AWS GPU instance to run  nolearn.lasagne  &lt;https://www.kaggle.com/c/facial-keypoints-detection/details/deep-learning-tutorial&gt;`_  and the facial keypoint detection tutorial- `An example convolutional autoencoder  &lt;https://github.com/mikesj-public/convolutional_autoencoder/blob/master/mnist_conv_autoencode.ipynb&gt;`_- Winners of the saliency prediction task in the 2015 `LSUN Challenge  &lt;http://lsun.cs.princeton.edu/&gt;`_ have published their  `lasagne/nolearn-based code  &lt;https://imatge.upc.edu/web/resources/end-end-convolutional-networks-saliency-prediction-software&gt;`__.- The winners of the 2nd place in the `Kaggle Diabetic Retinopathy Detection  challenge &lt;https://www.kaggle.com/c/diabetic-retinopathy-detection&gt;`_ have  published their `lasagne/nolearn-based code  &lt;https://github.com/sveitser/kaggle_diabetic&gt;`__.- The winner of the 2nd place in the `Kaggle Right Whale Recognition  challenge &lt;https://www.kaggle.com/c/noaa-right-whale-recognition&gt;`_ has  published his `lasagne/nolearn-based code  &lt;https://github.com/felixlaumon/kaggle-right-whale&gt;`__.Support=======If you're seeing a bug with nolearn, please submit a bug report to the`nolearn issue tracker &lt;https://github.com/dnouri/nolearn/issues&gt;`_.Make sure to include information such as:- how to reproduce the error: show us how to trigger the bug using a  minimal example- what versions you are using: include the Git revision and/or version  of nolearn (and possibly Lasagne) that you're usingPlease also make sure to search the issue tracker to see if your issuehas been encountered before or fixed.If you believe that you're seeing an issue with Lasagne, which is adifferent software project, please use the `Lasagne issue tracker&lt;https://github.com/Lasagne/Lasagne/issues&gt;`_ instead.There's currently no user mailing list for nolearn.  However, if youhave a question related to Lasagne, you might want to try the `Lasagneusers list &lt;https://groups.google.com/d/forum/lasagne-users&gt;`_, or useStack Overflow.  Please refrain from contacting the authors fornon-commercial support requests directly; public forums are the rightplace for these.Citation========Citations are welcome:    Daniel Nouri. 2014. *nolearn: scikit-learn compatible neural    network library* https://github.com/dnouri/nolearnLicense=======See the `LICENSE.txt &lt;LICENSE.txt&gt;`_ file for license rights andlimitations (MIT).Change History==============0.6.1 - 2019-11-05------------------See Github for a list of changes between this release and the last:https://github.com/dnouri/nolearn/pulls?q=is%3Apr+is%3Aclosed0.6.0 - 2016-08-27------------------Thanks to @BenjaminBossan, @cancan101, @DanChianucci who greatlycontributed to this release.- lasagne: Many improvements to the nolearn.lasagne interface.  Some  of the more important changes:  - Add basic support for multiple outputs    https://github.com/dnouri/nolearn/pull/278  - Extra scores can now be computed as part of Theano computation    graph    https://github.com/dnouri/nolearn/pull/261  - Fix excessive memory usage in batch iterator when using shuffle    https://github.com/dnouri/nolearn/pull/238  - Add visualization code for saliency maps    https://github.com/dnouri/nolearn/pull/223  - Add method for convenient access of network's intermediate layer    output    https://github.com/dnouri/nolearn/pull/196  - Allow gradients to be scaled per layer    https://github.com/dnouri/nolearn/pull/195  - Add shuffling to BatchIterator    https://github.com/dnouri/nolearn/pull/193  - Add l1 and l2 regularization to default objective    https://github.com/dnouri/nolearn/pull/169  - Add RememberBestWeights handler: restores best weights after    training    https://github.com/dnouri/nolearn/pull/155  - Passing Lasagne layer instances to 'layers' parameter of NeuralNet    is now possible    https://github.com/dnouri/nolearn/pull/146  - Add feature visualization functions plot_loss, plot_weights,    plot_activity, and plot_occlusion.  The latter shows for image    samples, which part of the images are crucial for the prediction    https://github.com/dnouri/nolearn/pull/74  - Add SaveWeights handler that saves weights to disk every n epochs    https://github.com/dnouri/nolearn/pull/91  - In verbose mode, print out more detailed layer information before    starting with training    https://github.com/dnouri/nolearn/pull/85  - List of NeuralNet's 'layers' parameter may now be formatted to    contain '(layer_factory, layer_kwargs)' tuples    https://github.com/dnouri/nolearn/pull/73- dbn: Added back module dbn because there's a few online articles  referencing it.  Works with Python 2 only.- Removed deprecated modules.  Also deprecate grid_search module.0.5 - 2015-01-22----------------- Deprecated modules console, dataset, dbn, and model.- lasagne: Added scikit-learn compatible wrapper around the `Lasagne`  neural network library for building simple feed-forward networks.0.5b1 - 2014-08-09------------------- overfeat: Add OverFeat-based feature extractor.- caffe: Add feature extractor based on ImageNet-pretrained nets found  in caffe.0.4 - 2014-01-15----------------- cache: Use joblib's `numpy_pickle` instead of `cPickle` to persist.0.3.1 - 2013-11-18------------------- convnet: Add `center_only` and `classify_direct` options.0.3 - 2013-11-02----------------- convnet: Add scikit-learn estimator based on Jia and Donahue's  `DeCAF`.- dbn: Change default args of `use_re_lu=True` and `nesterov=True`.0.2 - 2013-03-03----------------- dbn: Add parameters `learn_rate_decays` and `learn_rate_minimums`,  which allow for decreasing the learning after each epoch of  fine-tuning.- dbn: Allow `-1` as the value of the input and output layers of the  neural network.  The shapes of `X` and `y` will then be used to  determine those.- dbn: Add support for processing sparse input data matrices.- dbn: Improve miserable speed of `DBN.predict_proba`.0.2b1 - 2012-12-30------------------- Added a scikit-learn estimator based on George Dahl's `gdbn` in  `nolearn.dbn`.</longdescription>
</pkgmetadata>