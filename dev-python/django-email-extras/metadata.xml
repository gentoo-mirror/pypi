<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Created by `Stephen McDonald &lt;http://twitter.com/stephen_mcd&gt;`_Introduction============django-email-extras is a Django reusable app providing theability to send PGP encrypted and multipart emails usingDjango templates. These features can be used together orseparately. When configured to send PGP encrypted email,the ability for Admin users to manage PGP keys is alsoprovided.A tool for automatically opening multipart emails in alocal web browser during development is also provided.Dependencies============  * `python-gnupg &lt;https://bitbucket.org/vinay.sajip/python-gnupg&gt;`_ is    required for sending PGP encrypted email.Installation============The easiest way to install django-email-extras is directly from PyPiusing `pip &lt;https://pip.pypa.io/en/stable/&gt;`_ by running the commandbelow::    $ pip install -U django-email-extrasOtherwise you can download django-email-extras and install it directlyfrom source::    $ python setup.py installUsage=====Once installed, first add ``email_extras`` to your ``INSTALLED_APPS``setting and run the migrations. Then there are two functions for sending emailin the ``email_extras.utils`` module:  * ``send_mail``  * ``send_mail_template``The former mimics the signature of ``django.core.mail.send_mail``while the latter provides the ability to send multipart emailsusing the Django templating system. If configured correctly, boththese functions will PGP encrypt emails as described below.Sending PGP Encrypted Email===========================`PGP explanation &lt;https://en.wikipedia.org/wiki/Pretty_Good_Privacy&gt;`_Using `python-gnupg &lt;https://bitbucket.org/vinay.sajip/python-gnupg&gt;`_, twomodels are defined in ``email_extras.models`` - ``Key`` and ``Address``which represent a PGP key and an email address for a successfullyimported key. These models exist purely for the sake of importingkeys and removing keys for a particular address via the DjangoAdmin.When adding a key, the key is imported into the key ring onthe server and the instance of the ``Key`` model is not saved. Theemail address for the key is also extracted and saved as an``Address`` instance.The ``Address`` model is then used when sending email to check foran existing key to determine whether an email should be encrypted.When an ``Address`` is deleted via the Django Admin, the key isremoved from the key ring on the server.Sending Multipart Email with Django Templates=============================================As mentioned above, the following function is provided inthe ``email_extras.utils`` module::  send_mail_template(subject, template, addr_from, addr_to,      fail_silently=False, attachments=None, context=None,      headers=None)The arguments that differ from ``django.core.mail.send_mail`` are``template`` and ``context``. The ``template`` argument is simplythe name of the template to be used for rendering the email contents.A template consists of both a HTML file and a TXT file each responsiblefor their respective versions of the email and should be stored inthe ``email_extras`` directory where your templates are stored,therefore if the name ``contact_form`` was given for the ``template``argument, the two template files for the email would be:  * ``templates/email_extras/contact_form.html``  * ``templates/email_extras/contact_form.txt``The ``attachments`` argument is a list of files to attach to the email.Each attachment can be the full filesystem path to the file, or afile name / file data pair.The ``context`` argument is simply a dictionary that is used topopulate the email templates, much like a normal request contextwould be used for a regular Django template.The ``headers`` argument is a dictionary of extra headers to put onthe message. The keys are the header name and values are the headervalues.Configuration=============There are two settings you can configure in your project's``settings.py`` module:  * ``EMAIL_EXTRAS_USE_GNUPG`` - Boolean that controls whether the PGP    encryption features are used. Defaults to ``True`` if    ``EMAIL_EXTRAS_GNUPG_HOME`` is specified, otherwise ``False``.  * ``EMAIL_EXTRAS_GNUPG_HOME`` - String representing a custom location    for the GNUPG keyring.  * ``EMAIL_EXTRAS_GNUPG_ENCODING`` - String representing a gnupg encoding.    Defaults to GNUPG ``latin-1`` and could be changed to e.g. ``utf-8``    if needed.  Check out    `python-gnupg docs &lt;https://pythonhosted.org/python-gnupg/#getting-started&gt;`_    for more info.  * ``EMAIL_EXTRAS_ALWAYS_TRUST_KEYS`` - Skip key validation and assume    that used keys are always fully trusted.Local Browser Testing=====================When sending multipart emails during development, it can be usefulto view the HTML part of the email in a web browser, without havingto actually send emails and open them in a mail client. To usethis feature during development, simply set your email backend as followsin your development ``settings.py`` module::  EMAIL_BACKEND = 'email_extras.backends.BrowsableEmailBackend'With this configured, each time a multipart email is sent, it willbe written to a temporary file, which is then automatically openedin a local web browser. Suffice to say, this should only be enabledduring development!</longdescription>
</pkgmetadata>