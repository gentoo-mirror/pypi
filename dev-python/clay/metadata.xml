<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Clay[![Coverage Status](https://coveralls.io/repos/github/lucuma/Clay/badge.svg?branch=clay3)](https://coveralls.io/github/lucuma/Clay?branch=clay3) [![Tests](https://travis-ci.org/lucuma/Clay.svg?branch=master)](https://travis-ci.org/lucuma/Clay/)**An amazing prototyping tool.**With Clay you can forget about making changes to dozens of HTML filesjust because you need to add a link in the footer.You can also use it to prototype your AJAX-driven application or theresponses of sending forms, because it acts like a real server.## Install```pip install clay```## Quickstart```pythonclay new mysite```will generate a new app container with the following structure:```mysite  ├── static/  ├── clay.yaml  ├── index.html  └── ...other files```You can also use an optional project template path or git URL. For the URLs, &quot;gh:&quot; works as a shortcut of &quot;https://github.com/&quot; and &quot;gl:&quot;  as a shortcut of &quot;https://gitlab.com/&quot;. For example:```python# Absolute or relative path.clay new myapp /path/to/project/template# GitHub repo. Note the &quot;.git&quot; postfix.clay new myapp https://github.com/lucuma/clay-template.git# The same GitHub repo with shortcutclay new myapp gh:/lucuma/clay-template.git```## Development serverInside that folder, run the development server with:```clay run```and your site'll be available at ``http://0.0.0.0:8080/``.Anything inside the `static` folder is served as-is under the `/static/` path.For example you can see `myapp/static/image.png` at the `http://0.0.0.0:8080/static/image.png` URL.Any file outside the  `static` folder, is rendered as a page.For example, `myapp/page.html` is rendered and shown at `http://0.0.0.0:8080/page.html`, as an HTML page.And `myapp/foo/bar.json` is rendered and shown at `http://0.0.0.0:8080/foo/bar.json` as a JSON document.Remember to put inside `static` anything you don't want to be rendered.## Build versionTo generate a static version of your site, first, stop the server with``Control + C``, and then run:```clay build```and all the templates will be processed and the result stored inside the`build` folder.## Static filesIf you have folders in your project, you might be tempted to write internal URLs like this```html&lt;!-- DON'T DO THIS -&gt;href=&quot;../a.html&quot;src=&quot;../static/main.js&quot;```**Don't do it**. Is error-prone and could not work as expected if you do it in a base layout, for example. Always write the internal URLs using their path from the root of the project, like this:```htmlhref=&quot;/a.html&quot;src=&quot;/static/main.js&quot;```That'll work on the development server and also when generating a static version of your site, Clay will convert them into relative paths automatically.## Template globalsWhen writing your templates, in addition of what is normally available in [Jinja templates](https://jinja.palletsprojects.com/en/2.10.x/) you have access to some other helper functions:- The python's functions `dir`, `enumerate`, `map`, `zip`, and `len`.- The **`now`** function, as an alias to `datetime.datetime.utcnow`.- The **`active`** function, to set an &quot;active&quot; class in navigations/menus when the current page match.### `active()````pythonactive(*url_patterns, partial=False, class_name=&quot;active&quot;)```TODO## The `clay.yaml` fileIf a YAML file named `clay.yaml` is found in the root of the project, it will be read and used for configuring Clay.```yaml---# Shell-style patterns files/folders that must not be copied.# Use quotes.exclude:  - &quot;.*&quot;  - &quot;.*/*&quot;  - &quot;~*&quot;  - &quot;~*/*&quot;  - &quot;_*&quot;  - &quot;_*/*&quot;  - &quot;*.txt&quot;# Shell-style patterns files/folders that *must be* copied, even if# they are in the exclude list.# Use quotes.include:  - &quot;robots.txt&quot;  - &quot;humans.txt&quot;# Jinja extensions to usejinja_extensions:# Shell-style patterns of files outside `static/` that must be copied# as-is instead of trying to interpret them as Jinja templates.# Use quotes.binaries:  - &quot;favicon.ico&quot;```----Happy coding!</longdescription>
</pkgmetadata>