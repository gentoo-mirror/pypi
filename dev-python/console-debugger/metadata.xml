<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Что это?:wrench: :pencil: :desktop_computer: Это библиотека для Python, которая выводит информации в несколько консолей. Путем обмена данных через Unix SocketУстановка через [pip - console-debugger](https://pypi.org/project/console-debugger/)```bushpip install console-debugger```![](https://i.imgur.com/w1DMqV5.png)---# Как использовать ?## 1 Сначала нужно создать экземпляры класса DebuggerDebugger(`active: bool, titleName: str, consoleOutput: bool = True, fileConfig: Optional[Dict] = None, styleText: Optional[dstyle] = None`)| Атрибут         | Описание                                                                                                                                                                                                                   || --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || `active`        | on/off жизни экземпляра, Если `False` экземпляр будет игнорировать вызов, а также будет добавлен в массив `Debugger.AllCountSleepInstance` .                                                                               || `titleName`    | Уникальное имя экземпляра которое будет отображаться в выводе.                                                                                                                                                             || `consoleOutput` | on/off отображения в консоль или другие визуальные выходы, **Не влияет на запись в файл!** .                                                                                                                               || `fileConfig`    | Конфигурация записи в файл, входные параметры такие же как и у стандартной функции `open()` передавать в формате `{&quot;file&quot;:&quot;test.log&quot;, ... }` . Для удобного формирования параметров можно пользоваться функцией `dopen()`. || `styleText`    | Стиль отображения текста. Для удобного формирования параметров можно пользоваться функцией `dstyle`.                                                                                                                       |---Также можно использовать готовые параметрыDebugger(`**dDEBUG`)- `dDEBUG`- `dINFO`- `dWARNING`- `dEXCEPTION`---Доступная информации об экземпляре `Debugger`| public set      | Описание                           || --------------- | ---------------------------------- || `consoleOutput` | Переключить on/off вывод в консоль || `styleText`    | Задать другой стиль текста         || `active()`      | Включить дебагер                   || `deactivate()`  | Отключить дебагер                  || public get                 | Описание                                    || -------------------------- | ------------------------------------------- || `titleName`               | Уникальное имя дебагера                     || `fileConfig`               | Конфигурация для файла                      || `AllCountActiveInstance()` | Список со всеми активными экземплярами      || `AllCountSleepInstance() ` | Список со всеми остановленными экземплярами || `AllUseFileName()`         | Список всех имен используемых файлами       || `AllInstance()`            | Список всех экземпляров                     |## 2 Создать глобальные правила для всех экземпляровЭта команда влияет на все экземпляры `Debugger`Debugger.GlobalManager(`global_status=None, typePrint: Optional[str] = &quot;grid&quot;`):| Атрибут         | Описание                                                                  || --------------- | ------------------------------------------------------------------------- || `global_status` | Здесь вы можете Выключить/Включить все экземпляры                         || `typePrint`     | Глобальный стиль отображения данных  (`grid`/`socket`/`None`)             |---- `&quot;grid&quot;` = Стиль таблица    ![](https://i.imgur.com/Kif40aB.png)- `&quot;socket&quot;` = Данные будут отправляться по сокету, в данный момент есть два варианта прослушивания сокета.    Через GUI [Tkinter](#про-режим-отображения-tkinter) `console_debugger/main.py gui` или через TUI [Urwid](#про-режим-отображения-urwid)    `console_debugger/main.py tui`.    Если в процессе отправки данных через сокет возникнут ошибки, данные будут сохранены в файл.- `None` = Без стиля    ![](https://i.imgur.com/byg84id.png)---## 3 Использовать в кодеИспользовать стандартную функцию `print`.print(`text, file= Debug_Name`)- `text` = Строка- `Debug_Name` = Имя экземпляра `Debugger`---Использовать функцию `printD`. Преимущество в том что может принимать несколько переменных и соеденять их.printD(`Debug_Name, text, *args, sep=' ', end='\n'`)- `Debug_Name` = Имя экземпляра `Debugger`- `text` = Строка- `*args` = Данные преобразуются в тип `str`- `sep=' ', end='\n'` = такие же, как и у встроенной функции `print()`---# Примеры## Использовать свои стили оформленияДля наглядности создадим функцию для генерации случайного слово```pythonimport randomimport string# Сгенерировать случайное словоrandom_word = lambda: &quot;&quot;.join(random.choice(string.ascii_letters) for j in range(random.randint(1, 40)))``````pythonfrom console_debugger import Debugger, printDfrom console_debugger.helpful.template_obj import dopen, dstyleDebug = Debugger(True,titleName=&quot;[DEBUG]&quot;,                 fileConfig=dopen(file=&quot;debug.log&quot;,                                  mode=&quot;a&quot;,                                  encoding=&quot;utf-8&quot;),                 styleText=dstyle(bg_color=&quot;bg_blue&quot;,                                   len_word=21)                 )Info = Debugger(True,titleName=&quot;[INFO]&quot;,                fileConfig={&quot;file&quot;: &quot;info.log&quot;,                            &quot;mode&quot;: &quot;a&quot;, &quot;encoding&quot;: &quot;utf-8&quot;},                styleText=dstyle(len_word=25),                consoleOutput=False                )Warning = Debugger(True,&quot;[WARNING]&quot;, styleText=dstyle(len_word=25))Debugger.GlobalManager(typePrint=&quot;grid&quot;)if __name__ == '__main__':    for i in range(10):        printD(Debug, random_word())        printD(Warning, random_word())        printD(Info, random_word())```## Использовать готовые стили, вызывать `printD````pythonfrom console_debugger import Debugger, printDfrom console_debugger.helpful.template_obj import dDEBUG, dWARNING, dINFODebug = Debugger(**dDEBUG)Info = Debugger(**dINFO)Warning = Debugger(**dWARNING)Debugger.GlobalManager(typePrint=&quot;grid&quot;)if __name__ == '__main__':    for i in range(10):        printD(Debug, random_word())        printD(Warning, random_word())        printD(Info, random_word())```## Использовать готовые стили, вызывать `print````pythonfrom console_debugger import Debugger, printDfrom console_debugger.helpful.template_obj import dDEBUG, dWARNING, dINFODebug = Debugger(**dDEBUG)Info = Debugger(**dINFO)Warning = Debugger(**dWARNING)Debugger.GlobalManager(typePrint=&quot;socket&quot;)if __name__ == '__main__':    for i in range(10):print(random_word(), file=Debug)print(random_word(), file=Info)print(random_word(), file=Warning)```## Использовать `soket````pythonfrom console_debugger import Debugger, printDfrom console_debugger.helpful.template_obj import dDEBUG, dWARNING, dINFODebug = Debugger(**dDEBUG)Info = Debugger(**dINFO)Warning = Debugger(**dWARNING)TEST = Debugger(True,&quot;TEST&quot;)Debugger.GlobalManager(typePrint=&quot;socket&quot;)for i in range(10):    printD(Debug, random_word())    printD(Info, random_word())    printD(Warning, random_word())    printD(TEST, random_word())```Если вы не запустили сервер, у вас возникнет исключение `ServerError: Ошибка сервера`Это специальное исключения для того чтобы вы лично выбрали интерфейс отображения.Вы можете выполнить команду `python /.../.../.local/lib/python3.9/site-packages/console_debugger/main.py tui`в любом терминале Linux, в нем запуститься псевдографический интерфейс.Или вы можете выполнить команду `python /.../.../.local/lib/python3.9/site-packages/console_debugger/main.pyп gui`Тогда у вас запуститься графический интерфейс Tkinter.```[Errno 2] No such file or directoryServerError: Ошибка сервераTraceback (most recent call last):  File &quot;/home/denis/Applications/test_imp.py&quot;, line 17, in &lt;module&gt;    Debugger.GlobalManager(typePrint=&quot;socket&quot;)  File &quot;/.../.../.local/lib/python3.9/site-packages/console_debugger/logic/debugger.py&quot;, line 190, in GlobalManager    raise ServerError(helpful.date_obj.ServerError: Вероятно сервер не запущен********************************************************************************Выполните команду:python /.../.../.local/lib/python3.9/site-packages/console_debugger/main.py tui********************************************************************************```## Использование Глобального режима on/offСоздать два режима запуска Debug/Release![](https://i.imgur.com/guFWf3O.png)`main.pyw````pythonimport sysfrom console_debugger import Debuggerfrom app.viwe import Windows # При импорте должны быть созданы все экземплярыif __name__ == '__main__':    for param in set(sys.argv):        if param == &quot;--d&quot;:            Debugger.GlobalManager(typePrint=&quot;grid&quot;) # Задать глобальный стиль всем экземпляром            break    else:        Debugger.GlobalManager(global_status=False) # Если нет параметров отключаем все экземпляры    Windows()```В других модулях создаем необходимые экземпляры```pythonfrom console_debugger import Debugger, printDfrom console_debugger.helpful.template_obj import dstyle, dINFOHotKeyD = Debugger(True, &quot;[HotKey]&quot;)PressKeyD = Debugger(True, &quot;[PressKey]&quot;)InfoD = Debugger(**dINFO)ResD = Debugger(True, &quot;[Result]&quot;, styleText=dstyle(len_word=25, height=4))printD(HotKeyD,&quot;Crtl+c&quot;)```## Пример трассировки переменных```pythonfrom console_debugger import Debugger, printDfrom console_debugger.helpful.template_obj import dDEBUG, dWARNING, dINFOif __name__ == '__main__':a = Debugger(**dDEBUG)b = Debugger(**dINFO)c = Debugger(**dEXCEPTION)Debugger.GlobalManager(typePrint=&quot;socket&quot;)TracingName1 = &quot;1&quot;TracingName2 = [&quot;1&quot;]TracingName3 = &quot;1&quot;,for x in range(10):printD(a, TracingName1)printD(b, TracingName2)printD(c, TracingName3)```![](https://i.imgur.com/8ctYa9G.png)## Использование во `Flask`Поместить `Debugger.GlobalManager` в `@app.before_first_request````pythonfrom console_debugger import Debugger, printDfrom flask import *SECRET_KEY = &quot;123_very_hard_password&quot;app = Flask(__name__) # Экземпляры в глобальной области видимостиcookDeb = Debugger(True, &quot;[Cook]&quot;)sessionDeb = Debugger(True, &quot;[Session]&quot;)@app.before_first_requestdef deb():    # Tkinter будет перезапускаться при каждом обновление сервера    Debugger.GlobalManager(typePrint=&quot;socket&quot;)@app.route(&quot;/login&quot;, methods=['POST', 'GET'])def login():    global data, cookDeb, sessionDeb    cook = &quot;no&quot;    ses = &quot;no&quot;    # Получить куки если есть    if request.cookies.get(&quot;logged&quot;):        cook = request.cookies.get(&quot;logged&quot;)    # Получить данные из сессии если есть    if &quot;SessioN&quot; in session:        ses = session.get(&quot;SessioN&quot;)    printD(cookDeb, cook)    printD(sessionDeb, ses)    res = make_response(render_template(&quot;login.html&quot;, cook=cook, session=ses))    res.set_cookie(key=&quot;logged&quot;, value=&quot;yes&quot;, max_age=3)    session[&quot;SessioN&quot;] = &quot;yes&quot;    return resif __name__ == '__main__':    app.run(debug=True)````&quot;login.html&quot;````html&lt;script&gt;    document.cookie = &quot;ex=1;&quot;;    if (!document.cookie) {        alert(&quot;Этот сайт требует включение cookie&quot;);    }&lt;/script&gt;Cook: {{ cook }}&lt;p&gt;&lt;/p&gt;Session: {{ session }}&lt;form action=&quot;/login&quot; method=&quot;post&quot; class=&quot;form-contact&quot;&gt;    &lt;p&gt;&lt;label&gt;Name &lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;&quot; required/&gt;    &lt;p&gt;&lt;label&gt;Passwortitled &lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;password&quot; value=&quot;&quot; required/&gt;    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Send&quot;/&gt;&lt;/form&gt;```## Использование в `Django`Добавить в самый конец `NameProj/settings.py````pythonimport osfrom console_debugger import Debuggerfrom console_debugger.helpful.template_obj import dDEBUG, dWARNING, dINFODEBUG = True.........if DEBUG:    Info = Debugger(**dINFO)    Debug = Debugger(**dDEBUG)    Warning = Debugger(**dWARNING)        if not os.environ.get('console_debugger', False): # Для защиты от двойного запуска Django        os.environ['console_debugger'] = &quot;True&quot;    else:        Debugger.GlobalManager(typePrint=&quot;socket&quot;)````NameApp/views.py````pythonfrom NameProj.settings import Info,Debug,Warningfrom console_debugger import printDprintD(Info,&quot;1&quot;)printD(Info,&quot;2&quot;)printD(Info,&quot;3&quot;)```# Советы## Вы можете использовать шаблон для комментирования `printD`Так как входные параметры функции являются не изменяемыми обметками,то они копируются в функцию `printD`, чтобы н тратить лишении наносекундына эту операцию, вы можете закомментировать все вызовы этой функции.```cmd\s{4}printD+#none: printD```![Замена](https://i.imgur.com/cmzsU24.png)А потом раскомментировать```cmd#none: printDprintD```![Замена](https://i.imgur.com/P0nugCD.png)## Про режим отображения Tkinter![](https://i.imgur.com/YJFYv57.png)- Если нажать на заголовок консоли, то они выполнят команду из нижней консоли- Если нажать нижнею кнопку `save geometry` то вы    сохраните положение окна для следующих запусках, размеры сохранять в `console_debugger/gui/static/config.txt`- Если закрыть окно `Tkinter`, до завершения главного потока, то данные будут отправляться в консоль `typePrint=None&quot;`- Можно сохранить весь текст из консоли в файл. Для этого нужно ввести в нижнею консоль `save &lt;NAME_FILE&gt; &lt;PATH&gt;` и нажать `Enter`- Можно получить глобальную информацию о сокете, написав в любую нижнею консоль `g info` и нажать `Enter`- Можно отчистить консоль вывода, если написать в нижнею консоль `clear` и нажать `Enter`### Установка Tkinter на LinuxArchLinux```bushsudo pacman -S tkxrdb -load /dev/nullxrdb -query```## Про режим отображения Urwid![](https://i.imgur.com/TQdW3by.png)Работает также в терминале Pycharm![](https://i.imgur.com/hJlPVZn.png)Этот режим поддерживается в терминалах Linux. Программа находиться в `console_debugger/tui/main.py`.- Можно сохранить весь текст из консоли в файл. Для этого нужно ввести `save &lt;NAME_FILE&gt; &lt;PATH&gt;`- Горячие клавиши    - `f1` = Влево    - `f3` = Верх    - `f2` = Вниз    - `f4` = Вправо    - `f5` = Меню    - `Tab`= Вправо    - `shif + ЛКМ` = Выделить текст    - `shif + ctrl + C` = Копировать выделенный текст    - `shif + ctrl + V` = Вставить текст- Можно отчистить консоль вывода если написать в нижнею консоль `clear` и нажать `Enter`</longdescription>
</pkgmetadata>