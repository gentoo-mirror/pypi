<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;types-aiobotocore-cloudwatch&quot;&gt;&lt;/a&gt;# types-aiobotocore-cloudwatch[![PyPI - types-aiobotocore-cloudwatch](https://img.shields.io/pypi/v/types-aiobotocore-cloudwatch.svg?color=blue)](https://pypi.org/project/types-aiobotocore-cloudwatch)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-cloudwatch.svg?color=blue)](https://pypi.org/project/types-aiobotocore-cloudwatch)[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-cloudwatch?color=blue)](https://pypistats.org/packages/types-aiobotocore-cloudwatch)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[aiobotocore.CloudWatch 2.5.0](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudwatch.html#CloudWatch)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.13.0](https://github.com/youtype/mypy_boto3_builder).More information can be found on[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in[types-aiobotocore-cloudwatch docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_cloudwatch/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [types-aiobotocore-cloudwatch](#types-aiobotocore-cloudwatch)  - [How to install](#how-to-install)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Service Resource annotations](#service-resource-annotations)    - [Other resources annotations](#other-resources-annotations)    - [Collections annotations](#collections-annotations)    - [Literals](#literals)    - [Typed dictionaries](#typed-dictionaries)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `types-aiobotocore` for `CloudWatch` service.```bash# install with aiobotocore type annotationspython -m pip install 'types-aiobotocore[cloudwatch]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'types-aiobotocore-lite[cloudwatch]'# standalone installationpython -m pip install types-aiobotocore-cloudwatch```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y types-aiobotocore-cloudwatch```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `types-aiobotocore[cloudwatch]` in your environment:```bashpython -m pip install 'types-aiobotocore[cloudwatch]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `aiobotocore` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `types-aiobotocore-lite[cloudwatch]` in your environment:```bashpython -m pip install 'types-aiobotocore-lite[cloudwatch]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `types-aiobotocore` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `types-aiobotocore` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[cloudwatch]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed  `types-aiobotocore`Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `types-aiobotocore[cloudwatch]` with services you use in your  environment:```bashpython -m pip install 'types-aiobotocore[cloudwatch]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `types-aiobotocore[cloudwatch]` in your environment:```bashpython -m pip install 'types-aiobotocore[cloudwatch]'````Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `types-aiobotocore[cloudwatch]` in your environment:```bashpython -m pip install 'types-aiobotocore[cloudwatch]'```Optionally, you can install `types-aiobotocore` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`CloudWatchClient` provides annotations for`session.create_client(&quot;cloudwatch&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_cloudwatch import CloudWatchClientsession = get_session()async with session.create_client(&quot;cloudwatch&quot;) as client:    client: CloudWatchClient    # now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`types_aiobotocore_cloudwatch.paginator` module contains type annotations forall paginators.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_cloudwatch import CloudWatchClientfrom types_aiobotocore_cloudwatch.paginator import (    DescribeAlarmHistoryPaginator,    DescribeAlarmsPaginator,    DescribeAnomalyDetectorsPaginator,    GetMetricDataPaginator,    ListDashboardsPaginator,    ListMetricsPaginator,)session = get_session()async with session.create_client(&quot;cloudwatch&quot;) as client:    client: CloudWatchClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    describe_alarm_history_paginator: DescribeAlarmHistoryPaginator = client.get_paginator(        &quot;describe_alarm_history&quot;    )    describe_alarms_paginator: DescribeAlarmsPaginator = client.get_paginator(&quot;describe_alarms&quot;)    describe_anomaly_detectors_paginator: DescribeAnomalyDetectorsPaginator = client.get_paginator(        &quot;describe_anomaly_detectors&quot;    )    get_metric_data_paginator: GetMetricDataPaginator = client.get_paginator(&quot;get_metric_data&quot;)    list_dashboards_paginator: ListDashboardsPaginator = client.get_paginator(&quot;list_dashboards&quot;)    list_metrics_paginator: ListMetricsPaginator = client.get_paginator(&quot;list_metrics&quot;)```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`types_aiobotocore_cloudwatch.waiter` module contains type annotations for allwaiters.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_cloudwatch.client import CloudWatchClientfrom types_aiobotocore_cloudwatch.waiter import AlarmExistsWaiter, CompositeAlarmExistsWaitersession = get_session()async with session.create_client(&quot;cloudwatch&quot;) as client:    client: CloudWatchClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    alarm_exists_waiter: AlarmExistsWaiter = client.get_waiter(&quot;alarm_exists&quot;)    composite_alarm_exists_waiter: CompositeAlarmExistsWaiter = client.get_waiter(        &quot;composite_alarm_exists&quot;    )```&lt;a id=&quot;service-resource-annotations&quot;&gt;&lt;/a&gt;### Service Resource annotations`CloudWatchServiceResource` provides annotations for`aiobotocore.resource(&quot;cloudwatch&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_cloudwatch import CloudWatchServiceResourcesession = get_session()async with session.resource(&quot;cloudwatch&quot;) as resource:    resource: CloudWatchServiceResource    # now resource usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;other-resources-annotations&quot;&gt;&lt;/a&gt;### Other resources annotations`types_aiobotocore_cloudwatch.service_resource` module contains typeannotations for all resources.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_cloudwatch import CloudWatchServiceResourcefrom types_aiobotocore_cloudwatch.service_resource import Alarm, Metricsession = get_session()async with session.resource(&quot;cloudwatch&quot;) as resource:    resource: CloudWatchServiceResource    # Explicit type annotations are optional here    # Type should be correctly discovered by mypy and IDEs    my_alarm: Alarm = resource.Alarm(...)    my_metric: Metric = resource.Metric(...)```&lt;a id=&quot;collections-annotations&quot;&gt;&lt;/a&gt;### Collections annotations`types_aiobotocore_cloudwatch.service_resource` module contains typeannotations for all `CloudWatchServiceResource` collections.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_cloudwatch import CloudWatchServiceResourcefrom types_aiobotocore_cloudwatch.service_resource import (    ServiceResourceAlarmsCollection,    ServiceResourceMetricsCollection,)session = get_session()async with session.resource(&quot;cloudwatch&quot;) as resource:    resource: CloudWatchServiceResource    # Explicit type annotations are optional here    # Type should be correctly discovered by mypy and IDEs    alarms: cloudwatch_resources.ServiceResourceAlarmsCollection = resource.alarms    metrics: cloudwatch_resources.ServiceResourceMetricsCollection = resource.metrics```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`types_aiobotocore_cloudwatch.literals` module contains literals extracted fromshapes that can be used in user code for type checking.```pythonfrom types_aiobotocore_cloudwatch.literals import (    ActionsSuppressedByType,    AlarmExistsWaiterName,    AlarmTypeType,    AnomalyDetectorStateValueType,    AnomalyDetectorTypeType,    ComparisonOperatorType,    CompositeAlarmExistsWaiterName,    DescribeAlarmHistoryPaginatorName,    DescribeAlarmsPaginatorName,    DescribeAnomalyDetectorsPaginatorName,    EvaluationStateType,    GetMetricDataPaginatorName,    HistoryItemTypeType,    ListDashboardsPaginatorName,    ListMetricsPaginatorName,    MetricStreamOutputFormatType,    RecentlyActiveType,    ScanByType,    StandardUnitType,    StateValueType,    StatisticType,    StatusCodeType,    CloudWatchServiceName,    ServiceName,    ResourceServiceName,    PaginatorName,    WaiterName,    RegionName,)def check_value(value: ActionsSuppressedByType) -&gt; bool:    ...```&lt;a id=&quot;typed-dictionaries&quot;&gt;&lt;/a&gt;### Typed dictionaries`types_aiobotocore_cloudwatch.type_defs` module contains structures and shapesassembled to typed dictionaries for additional type checking.```pythonfrom types_aiobotocore_cloudwatch.type_defs import (    AlarmHistoryItemTypeDef,    RangeTypeDef,    DimensionTypeDef,    CompositeAlarmTypeDef,    DashboardEntryTypeDef,    DashboardValidationMessageTypeDef,    DatapointTypeDef,    DeleteAlarmsInputRequestTypeDef,    DeleteDashboardsInputRequestTypeDef,    DeleteInsightRulesInputRequestTypeDef,    PartialFailureTypeDef,    ResponseMetadataTypeDef,    DeleteMetricStreamInputRequestTypeDef,    DescribeAlarmHistoryInputAlarmDescribeHistoryTypeDef,    PaginatorConfigTypeDef,    DescribeAlarmHistoryInputRequestTypeDef,    WaiterConfigTypeDef,    DescribeAlarmsInputRequestTypeDef,    DescribeInsightRulesInputRequestTypeDef,    InsightRuleTypeDef,    DimensionFilterTypeDef,    DisableAlarmActionsInputRequestTypeDef,    DisableInsightRulesInputRequestTypeDef,    EnableAlarmActionsInputRequestTypeDef,    EnableInsightRulesInputRequestTypeDef,    GetDashboardInputRequestTypeDef,    GetInsightRuleReportInputRequestTypeDef,    InsightRuleMetricDatapointTypeDef,    LabelOptionsTypeDef,    MessageDataTypeDef,    GetMetricStreamInputRequestTypeDef,    MetricStreamFilterTypeDef,    GetMetricWidgetImageInputRequestTypeDef,    InsightRuleContributorDatapointTypeDef,    ListDashboardsInputRequestTypeDef,    ListManagedInsightRulesInputRequestTypeDef,    ListMetricStreamsInputRequestTypeDef,    MetricStreamEntryTypeDef,    ListTagsForResourceInputRequestTypeDef,    TagTypeDef,    ManagedRuleStateTypeDef,    StatisticSetTypeDef,    MetricStreamStatisticsMetricTypeDef,    PutDashboardInputRequestTypeDef,    ServiceResourceAlarmRequestTypeDef,    ServiceResourceMetricRequestTypeDef,    SetAlarmStateInputAlarmSetStateTypeDef,    SetAlarmStateInputRequestTypeDef,    StartMetricStreamsInputRequestTypeDef,    StopMetricStreamsInputRequestTypeDef,    UntagResourceInputRequestTypeDef,    AnomalyDetectorConfigurationTypeDef,    DescribeAlarmsForMetricInputRequestTypeDef,    DescribeAnomalyDetectorsInputRequestTypeDef,    GetMetricStatisticsInputMetricGetStatisticsTypeDef,    GetMetricStatisticsInputRequestTypeDef,    MetricTypeDef,    SingleMetricAnomalyDetectorTypeDef,    DeleteInsightRulesOutputTypeDef,    DescribeAlarmHistoryOutputTypeDef,    DisableInsightRulesOutputTypeDef,    EmptyResponseMetadataTypeDef,    EnableInsightRulesOutputTypeDef,    GetDashboardOutputTypeDef,    GetMetricStatisticsOutputTypeDef,    GetMetricWidgetImageOutputTypeDef,    ListDashboardsOutputTypeDef,    PutDashboardOutputTypeDef,    PutManagedInsightRulesOutputTypeDef,    PutMetricStreamOutputTypeDef,    DescribeAlarmHistoryInputDescribeAlarmHistoryPaginateTypeDef,    DescribeAlarmsInputDescribeAlarmsPaginateTypeDef,    DescribeAnomalyDetectorsInputDescribeAnomalyDetectorsPaginateTypeDef,    ListDashboardsInputListDashboardsPaginateTypeDef,    DescribeAlarmsInputAlarmExistsWaitTypeDef,    DescribeAlarmsInputCompositeAlarmExistsWaitTypeDef,    DescribeInsightRulesOutputTypeDef,    ListMetricsInputListMetricsPaginateTypeDef,    ListMetricsInputRequestTypeDef,    MetricDataResultTypeDef,    InsightRuleContributorTypeDef,    ListMetricStreamsOutputTypeDef,    ListTagsForResourceOutputTypeDef,    ManagedRuleTypeDef,    PutCompositeAlarmInputRequestTypeDef,    PutInsightRuleInputRequestTypeDef,    TagResourceInputRequestTypeDef,    ManagedRuleDescriptionTypeDef,    MetricDatumTypeDef,    MetricStreamStatisticsConfigurationTypeDef,    ListMetricsOutputTypeDef,    MetricStatTypeDef,    GetMetricDataOutputTypeDef,    GetInsightRuleReportOutputTypeDef,    PutManagedInsightRulesInputRequestTypeDef,    ListManagedInsightRulesOutputTypeDef,    PutMetricDataInputRequestTypeDef,    GetMetricStreamOutputTypeDef,    PutMetricStreamInputRequestTypeDef,    MetricDataQueryTypeDef,    GetMetricDataInputGetMetricDataPaginateTypeDef,    GetMetricDataInputRequestTypeDef,    MetricAlarmTypeDef,    MetricMathAnomalyDetectorTypeDef,    PutMetricAlarmInputMetricPutAlarmTypeDef,    PutMetricAlarmInputRequestTypeDef,    DescribeAlarmsForMetricOutputTypeDef,    DescribeAlarmsOutputTypeDef,    AnomalyDetectorTypeDef,    DeleteAnomalyDetectorInputRequestTypeDef,    PutAnomalyDetectorInputRequestTypeDef,    DescribeAnomalyDetectorsOutputTypeDef,)def get_structure() -&gt; AlarmHistoryItemTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for`aiobotocore` updates. It delivers a drop-in type annotations for you and makessure that:- All available `aiobotocore` services are covered.- Each public class and method of every `aiobotocore` service gets valid type  annotations extracted from the documentation (blame `botocore` docs if types  are incorrect).- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.session` calls- Auto discovery of types for `session.client` and `session.session` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`types-aiobotocore-cloudwatch` version is the same as related `aiobotocore`version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_cloudwatch/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>