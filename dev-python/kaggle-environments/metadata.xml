<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [&lt;img src=&quot;https://kaggle.com/static/images/site-logo.png&quot; height=&quot;50&quot; style=&quot;margin-bottom:-15px&quot; /&gt;](https://kaggle.com) Environments```bashpip install kaggle-environments```# TLDR;```pythonfrom kaggle_environments import make# Setup a tictactoe environment.env = make(&quot;tictactoe&quot;)# Basic agent which marks the first available cell.def my_agent(obs):  return [c for c in range(len(obs.board)) if obs.board[c] == 0][0]# Run the basic agent against a default agent which chooses a &quot;random&quot; move.env.run([my_agent, &quot;random&quot;])# Render an html ipython replay of the tictactoe game.env.render(mode=&quot;ipython&quot;)```# OverviewKaggle Environments was created to evaluate episodes. While other libraries have set interface precedents (such as Open.ai Gym), the emphasis of this library focuses on:1. Episode evaluation (compared to training agents).2. Configurable environment/agent lifecycles.3. Simplified agent and environment creation.4. Cross language compatible/transpilable syntax/interfaces.## Help Documentation```python# Additional documentation (especially interfaces) can be found on all public functions:from kaggle_environments import makehelp(make)env = make(&quot;tictactoe&quot;)dir(env)help(env.reset)```# Agents&gt; A function which given an observation generates an action.## WritingAgent functions can have observation and configuration parameters and must return a valid action. Details about the observation, configuration, and actions can seen by viewing the specification.```pythonfrom kaggle_environments import makeenv = make(&quot;connectx&quot;, {&quot;rows&quot;: 10, &quot;columns&quot;: 8, &quot;inarow&quot;: 5})def agent(observation, configuration):  print(observation) # {board: [...], mark: 1}  print(configuration) # {rows: 10, columns: 8, inarow: 5}  return 3 # Action: always place a mark in the 3rd column.# Run an episode using the agent above vs the default random agent.env.run([agent, &quot;random&quot;])# Print schemas from the specification.print(env.specification.observation)print(env.specification.configuration)print(env.specification.action)```## Loading AgentsAgents are always functions, however there are some shorthand syntax options to make generating/using them easier.```python# Agent def accepting an observation and returning an action.def agent1(obs):  return [c for c in range(len(obs.board)) if obs.board[c] == 0][0]# Load a default agent called &quot;random&quot;.agent2 = &quot;random&quot;# Load an agent from source.agent3 = &quot;&quot;&quot;def act(obs):  return [c for c in range(len(obs.board)) if obs.board[c] == 0][0]&quot;&quot;&quot;# Load an agent from a file.agent4 = &quot;C:\path\file.py&quot;# Return a fixed action.agent5 = 3# Return an action from a url.agent6 = &quot;http://localhost:8000/run/agent&quot;```## Default AgentsMost environments contain default agents to play against. To see the list of available agents for a specific environment run:```pythonfrom kaggle_environments import makeenv = make(&quot;tictactoe&quot;)# The list of available default agents.print(*env.agents)# Run random agent vs reaction agent.env.run([&quot;random&quot;, &quot;reaction&quot;])```## TrainingOpen AI Gym interface is used to assist with training agents. The `None` keyword is used below to denote which agent to train (i.e. train as first or second player of connectx).```pythonfrom kaggle_environments import makeenv = make(&quot;connectx&quot;, debug=True)# Training agent in first position (player 1) against the default random agent.trainer = env.train([None, &quot;random&quot;])obs = trainer.reset()for _ in range(100):    env.render()    action = 0 # Action for the agent being trained.    obs, reward, done, info = trainer.step(action)    if done:        obs = trainer.reset()```## DebuggingThere are 3 types of errors which can occur from agent execution:1. **Timeout** - the agent runtime exceeded the allowed limit. There are 2 timeouts:   1. `agentTimeout` - Used for initialization of an agent on first &quot;act&quot;.   2. `actTimeout` - Used for obtaining an action.2. **Error** - the agent raised and error during execution.3. **Invalid** - the agent action response didn't match the action specification or the environment deemed it invalid (i.e. playing twice in the same cell in tictactoe).To help debug your agent and why it threw the errors above, add the `debug` flag when setting up the environment.```pythonfrom kaggle_environments import makedef agent():  return &quot;Something Bad&quot;env = make(&quot;tictactoe&quot;, debug=True)env.run([agent, &quot;random&quot;])# Prints: &quot;Invalid Action: Something Bad&quot;```# Environments&gt; A function which given a state and agent actions generates a new state.| Name      | Description                          | Make                      || --------- | ------------------------------------ | ------------------------- || connectx  | Connect 4 in a row but configurable. | `env = make(&quot;connectx&quot;)`  || tictactoe | Classic Tic Tac Toe                  | `env = make(&quot;tictactoe&quot;)` || identity  | For debugging, action is the reward. | `env = make(&quot;identity&quot;)`  |## MakingAn environment instance can be made from an existing specification (such as those listed above).```pythonfrom kaggle_environments import make# Create an environment instance.env = make(  # Specification or name to registered specification.  &quot;connectx&quot;,  # Override default and environment configuration.  configuration={&quot;rows&quot;: 9, &quot;columns&quot;: 10},  # Initialize the environment from a prior state (episode resume).  steps=[],  # Enable verbose logging.  debug=True)```## ConfigurationThere are two types of configuration: Defaults applying to every environment and those specific to the environment. The following is a list of the default configuration:| Name         | Description                                                     || ------------ | --------------------------------------------------------------- || episodeSteps | Maximum number of steps in the episode.                         || agentTimeout | Maximum runtime (seconds) to initialize an agent.               || actTimeout   | Maximum runtime (seconds) to obtain an action from an agent.    || runTimeout   | Maximum runtime (seconds) of an episode (not necessarily DONE). || maxLogLength | Maximum log length (number of characters, `None` -&gt; no limit)   |```pythonenv = make(&quot;connectx&quot;, configuration={  &quot;columns&quot;: 19, # Specific to ConnectX.  &quot;actTimeout&quot;: 10,})```## ResettingEnvironments are reset by default after &quot;make&quot; (unless starting steps are passed in) as well as when calling &quot;run&quot;. Reset can be called at anytime to clear the environment.```pythonnum_agents = 2reset_state = env.reset(num_agents)```## RunningExecute an episode against the environment using the passed in agents until they are no longer running (i.e. status != ACTIVE).```pythonsteps = env.run([agent1, agent2])print(steps)```## EvaluatingEvaluation is used to run an episode (environment + agents) multiple times and just return the rewards.```pythonfrom kaggle_environments import evaluate# Same definitions as &quot;make&quot; above.environment = &quot;connectx&quot;configuration = {&quot;rows&quot;: 10, &quot;columns&quot;: 8, &quot;inarow&quot;: 5}steps = []# Which agents to run repeatedly.  Same as env.run(agents)agents = [&quot;random&quot;, agent1]# How many times to run them.num_episodes = 10rewards = evaluate(environment, agents, configuration, steps, num_episodes)```## SteppingRunning above essentially just steps until no agent is still active. To execute a singular game loop, pass in actions directly for each agent. Note that this is normally used for training agents (most useful in a single agent setup such as using the gym interface).```pythonagent1_action = agent1(env.state[0].observation)agent2_action = agent2(env.state[1].observation)state = env.step([agent1_action, agent2_action])```## PlayingA few environments offer an interactive play against agents within jupyter notebooks. An example of this is using connectx:```pythonfrom kaggle_environments import makeenv = make(&quot;connectx&quot;)# None indicates which agent will be manually played.env.play([None, &quot;random&quot;])```## RenderingThe following rendering modes are supported:- json - Same as doing a json dump of `env.toJSON()`- ansi - Ascii character representation of the environment.- human - ansi just printed to stdout- html - HTML player representation of the environment.- ipython - html just printed to the output of a ipython notebook.```pythonout = env.render(mode=&quot;ansi&quot;)print(out)```# Command Line```sh&gt; python main.py -h```## List Registered Environments```sh&gt; python main.py list```## Evaluate Episode Rewards```shpython main.py evaluate --environment tictactoe --agents random random --episodes 10```## Run an Episode```sh&gt; python main.py run --environment tictactoe --agents random /pathtomy/agent.py --debug True```## Load an EpisodeThis is useful when converting an episode json output into html.```shpython main.py load --environment tictactoe --steps [...] --render '{&quot;mode&quot;: &quot;html&quot;}'```# HTTP ServerThe HTTP server contains the same interface/actions as the CLI above merging both POST body and GET params.## Setup```bashpython main.py http-server --port=8012 --host=0.0.0.0```### Running Agents on Separate Servers```python# How to run agent on a separate server.import requestsimport jsonpath_to_agent1 = &quot;/home/ajeffries/git/playground/agent1.py&quot;path_to_agent2 = &quot;/home/ajeffries/git/playground/agent2.py&quot;agent1_url = f&quot;http://localhost:5001?agents[]={path_to_agent1}&quot;agent2_url = f&quot;http://localhost:5002?agents[]={path_to_agent2}&quot;body = {    &quot;action&quot;: &quot;run&quot;,    &quot;environment&quot;: &quot;tictactoe&quot;,    &quot;agents&quot;: [agent1_url, agent2_url]}resp = requests.post(url=&quot;http://localhost:5000&quot;, data=json.dumps(body)).json()# Inflate the response replay to visualize.from kaggle_environments import makeenv = make(&quot;tictactoe&quot;, steps=resp[&quot;steps&quot;], debug=True)env.render(mode=&quot;ipython&quot;)print(resp)```</longdescription>
</pkgmetadata>