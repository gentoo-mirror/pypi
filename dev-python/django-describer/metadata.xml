<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django_describerAn easy-to-use tool to auto-generate GraphQL API from Django models. More APIs TBD.## Get started- Install `django_describer` via PyPI, e. g. `pip install django_describer`.- Add `graphene_django` to your `INSTALLED_APPS` in Django settings. Otherwise, the template for GraphQL would be invisible.## UsageWrite your Django models:```pythonfrom django.db import modelsclass Publisher(models.Model):    name = models.CharField(max_length=50)    @property    def short_books(self):        return self.books.all().filter(page_count__lt=300)    def __str__(self):        return self.nameclass Book(models.Model):    name = models.CharField(max_length=50)    page_count = models.IntegerField()    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE, blank=True, null=True, related_name=&quot;books&quot;)    def __str__(self):        return &quot;{} ({})&quot;.format(self.name, self.publisher)```Now write a Describer for it. You can specify:- which fields (and model properties) are exposed to the API and who can access them- which CRUD operations are allowed for each model and who can perform them- extra actions on each modelPer-request field specification, ordering, filtering and pagination are for granted.```pythonfrom django_describer.actions import DetailActionfrom django_describer.datatypes import QuerySetfrom django_describer.describers import Describerfrom django_describer.permissions import IsAuthenticatedfrom user.models import Userclass UserDescriber(Describer):    model = User    extra_actions = {        &quot;myself&quot;: DetailAction(permissions=IsAuthenticated, fetch_fn=lambda request, pk: request.user, id_arg=False)    }```Import all describers into your `urls.py` and create a URL for the api:```pythonfrom django.contrib import adminfrom django.urls import pathfrom django_describer.adapters.base import generatefrom django_describer.adapters.graphql.main import GraphQLfrom course.describers import *from user.describers import *urlpatterns = [    path('admin/', admin.site.urls),    path(&quot;graphql/&quot;, generate(GraphQL)),]```Now you can do things such as:```query q{  UserMyself{    id    username  }}mutation m{  UserCreate(data: {username: &quot;John&quot;, password: &quot;asdf&quot;}){    object{      id    }  }}```</longdescription>
</pkgmetadata>