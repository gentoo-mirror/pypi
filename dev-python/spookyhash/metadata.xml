<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># spookyhash [&lt;img src=&quot;https://img.shields.io/gitlab/pipeline/alen/spookyhash/main?gitlab_url=https%3A%2F%2Fgitlab.comfi.dev%2F&amp;label=Gitlab%20CI&amp;style=flat-square&quot; align=&quot;right&quot;&gt;](https://gitlab.comfi.dev/alen/spookyhash) [&lt;img src=&quot;https://img.shields.io/travis/buhanec/spookyhash/main.svg?label=Travis+CI&amp;style=flat-square&quot; align=&quot;right&quot;&gt;](https://travis-ci.org/buhanec/spookyhash) [&lt;img src=&quot;https://img.shields.io/azure-devops/build/buhanec/aa771e37-5a75-4d92-8d99-d27975af994e/2/main?label=Azure%20DevOps&amp;style=flat-square&quot; align=&quot;right&quot;&gt;](https://dev.azure.com/buhanec/spookyhash/_build)A Python wrapper of Bob Jenkins' [SpookyHash version 2](http://burtleburtle.net/bob/hash/spooky.html). Offers 32- 64- and 128-bit oneshot and incremental hashes.   # License&gt; Licensed under the MIT license. See the LICENSE file in the repository root for more details.# Usage## InstallationAvailable through [spookyhash - PyPI](https://pypi.org/project/spookyhash/) using `pip install spookyhash`.## Oneshot Hashes```python&gt;&gt;&gt; import spookyhash&gt;&gt;&gt; spookyhash.hash32(b'hello world')2617184861&gt;&gt;&gt; spookyhash.hash32(b'hello world', seed=0x12345678)3380090220&gt;&gt;&gt; spookyhash.hash64(b'hello world')14865987102431973981&gt;&gt;&gt; spookyhash.hash64(b'hello world', seed=123)5719863273689036421&gt;&gt;&gt; spookyhash.hash128(b'hello world')185933735475381961281710998418114941533&gt;&gt;&gt; spookyhash.hash128(b'hello world', seed1=123_000, seed2=456_000)144121310386202441278894605216246194925&gt;&gt;&gt; # For a more comparable result to other libraries&gt;&gt;&gt; spookyhash.hash128_pair(b'hello world')(14865987102431973981, 10079487997037711397)&gt;&gt;&gt; spookyhash.hash128_pair(b'hello world', seed1=123_000, seed2=456_000)(12678109464562819821, 7812831891108919044)```## Incremental Hashes```python&gt;&gt;&gt; import spookyhash&gt;&gt;&gt; sh = spookyhash.Hash32()&gt;&gt;&gt; sh.update(b'hello')&gt;&gt;&gt; sh.update(b' ')&gt;&gt;&gt; sh.update(b'world')&gt;&gt;&gt; sh.final()2617184861&gt;&gt;&gt; sh.hexdigest()'5d12ff9b'&gt;&gt;&gt; spookyhash.Hash64(b'hello ', seed=123).update(b'world').final()5719863273689036421&gt;&gt;&gt; spookyhash.Hash64(b'hello ', seed=123).update(b'world').hexdigest()'85b609a05709614f'&gt;&gt;&gt; sh = spookyhash.Hash128(seed1=123_000, seed2=456_000)&gt;&gt;&gt; sh.update(b'hello world')&gt;&gt;&gt; sh.final()144121310386202441278894605216246194925&gt;&gt;&gt; sh.final_pair()(12678109464562819821, 7812831891108919044)&gt;&gt;&gt; sh.hexdigest()'ede2c8f262b1f1af04f763f735c16c6c'```## `memoryview` SupportIncludes `memoryview` compatible types, such as NumPy arrays.```python&gt;&gt;&gt; import spookyhash&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; spookyhash.Hash64(np.arange(100)).hexdigest()'43ab5363ad362c74'&gt;&gt;&gt; spookyhash.Hash64(memoryview(b'hello world')).hexdigest()'5d12ff9b81984ece'```# Platform IndependenceIf run on a big-endian system, the code would produce different hashes, but of equal quality.</longdescription>
</pkgmetadata>