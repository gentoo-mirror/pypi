<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># petra_grid**`petra_grid` is a Python library for reading grid data in the `.GRD` fileformat produced by the Petraâ„¢ geological interpretation application**`petra_grid` is implemented as a set of bindings to the [corresponding Rustcrate](https://crates.io/crates/petra_grid)---This library is based on a lot of time spent in a hex editor looking atgrid files and poring over publicly-available documentation. It is by necessityincomplete and incorrect, and will remain so until the file format is properlyand publicly specified.However, the library is able to successfully read rectangular and triangulatedgrids and a good portion of their metadata. Please open an issue if you havetrouble reading a grid and are able to share the grid (in GRD and exported form)with the developer.---### Example usageThis library can be used to read `.GRD` grid data from a file or file-likeobject.  Here's a short program for dumping &quot;debug&quot; representations of gridfiles provided on the command line:```pythonimport sysimport petra_griddef main(argv: list[str]) -&gt; int:    if len(argv) &lt;= 1:        print(f'Usage: {argv[0] if argv else &quot;read_grid&quot;} &lt;grd-files&gt;',          file=sys.stderr)        return 2    for path in argv[1:]:        with open(path, 'rb') as f:            grid = petra_grid.read_grid(f)            if grid.is_rectangular:                print(f'{grid.name}: {grid.rows} x {grid.columns} rectangular grid')            elif grid.is_triangular:                print(f'{grid.name}: {grid.n_triangles}-triangle triangular grid')            print(f'Details: {grid}')    return 0if __name__ == '__main__':    sys.exit(main(sys.argv))```As another example, we can use `matplotlib` to render images of rectangular ortriangular grids.```pythonimport sysimport petra_gridimport numpy as npfrom matplotlib.tri import Triangulation # type: ignoreimport matplotlib.pyplot as plt # type: ignoredef plot_rectangular(grid: petra_grid.Grid) -&gt; None:    plt.imshow(grid.data, extent=(grid.xmin, grid.xmax, grid.ymin, grid.ymax),      origin='lower')    plt.title(f'{grid.name}')    plt.colorbar()    plt.show()def plot_triangular(grid: petra_grid.Grid) -&gt; None:    triangles = grid.data    xs = np.ravel(triangles[:, :, 0])    ys = np.ravel(triangles[:, :, 1])    ixs = np.reshape(np.indices(xs.shape)[0], (triangles.shape[0], 3))    triangulation = Triangulation(xs, ys, ixs)    zs = np.ravel(triangles[:, :, 2])    fig, ax = plt.subplots()    ax.set_aspect('equal')    tc = ax.tripcolor(triangulation, zs)    ax.set_title(f'{grid.name}')    fig.colorbar(tc)    plt.show()def main(argv: list[str]) -&gt; int:    if len(argv) &lt;= 1:        print(f'Usage: {argv[0] if argv else &quot;render_grid&quot;} &lt;grd-files&gt;',          file=sys.stderr)        return 2    for path in argv[1:]:        with open(path, 'rb') as f:            grid = petra_grid.read_grid(f)            if grid.is_rectangular:                plot_rectangular(grid)            elif grid.is_triangular:                plot_triangular(grid)            print(f'Details: {grid}')    return 0if __name__ == '__main__':    sys.exit(main(sys.argv))```---### DocumentationDocumentation strings and type annotations are provided for all public types,functions, and methods. We recommend viewing &quot;nice&quot; documentation pages using[`pdoc`](https://pdoc.dev/docs/pdoc.html); e.g. in the same environment as the`petra_grid` package is installed, install `pdoc` with `pip install pdoc`, thenrun `pdoc petra_grid`.#### Available under the [MIT license](LICENSE)#### (c) 2023 [dwt](https://www.github.com/derrickturk) | [terminus, LLC](https://terminusdatascience.com)</longdescription>
</pkgmetadata>