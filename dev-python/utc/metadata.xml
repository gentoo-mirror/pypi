<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>UTC===It Should Be Easier~~~~~~~~~~~~~~~~~~~The current Python landscape doesn't make it simple enough to use timezoneaware timestamps.It'd be nice if datetime.datetime.now() gave you a timezone-aware datetime inyour current timezone, but it doesn't.You'd expect datetime.datetime.utcnow() to at least be timezone-aware, right?No.  There's no tzinfo on the datetime you get back from that function.The pytz_ package has comprehensive support for time zones, and if you need todo something complicated, you should use that.  But you don't always need to dosomething complicated.  Sometimes you just want UTC.This package provides syntactic sugar around simple UTC handling that I'verewritten in too many times in past projects.Usage~~~~~There is a now() function that does the right thing::    &gt;&gt;&gt; import utc    &gt;&gt;&gt; utc.now()    datetime.datetime(2013, 8, 30, 16, 51, 50, 316963, tzinfo=&lt;UTC&gt;)And a datetime constructor that is UTC by default::    &gt;&gt;&gt; utc.datetime(1900, 1, 1, 13, 25)    datetime.datetime(1900, 1, 1, 13, 25, tzinfo=&lt;UTC&gt;)And a time constructor too::    &gt;&gt;&gt; utc.time(13, 26, 36)    datetime.time(13, 26, 36, tzinfo=&lt;UTC&gt;)That is all... _pytz: https://pypi.python.org/pypi/pytz/</longdescription>
</pkgmetadata>