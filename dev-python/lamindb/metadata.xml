<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Stars](https://img.shields.io/github/stars/laminlabs/lamindb?logo=GitHub&amp;color=yellow)](https://github.com/laminlabs/lamindb)[![codecov](https://codecov.io/gh/laminlabs/lamindb/branch/main/graph/badge.svg?token=VKMRJ7OWR3)](https://codecov.io/gh/laminlabs/lamindb)[![pypi](https://img.shields.io/pypi/v/lamindb?color=blue&amp;label=pypi%20package)](https://pypi.org/project/lamindb)# LaminDB - Open-source data platform for biology```{warning}Public beta: Close to having converged a stable API, but some breaking changes might still occur.```LaminDB is a Python library to manage data &amp; analyses related to biology:- Track &amp; query data lineage across pipelines, notebooks &amp; app uploads.- Query, validate &amp; link data batches using biological registries &amp; ontologies.- Manage features &amp; labels schema-less or schema-full.- Collaborate across a mesh of LaminDB instances.If you want a UI: LaminApp is built on LaminDB. If LaminDB ~ git, LaminApp ~ GitHub.(LaminApp, support, integration tests &amp; schemas for an enterprise platform are available on a paid plan - on-prem or hosted by us.)## Quickstart[Installation and sign-up](https://lamin.ai/docs/setup) take no time: Run `pip install lamindb` and `lamin signup &lt;email&gt;` on the command line.Init a LaminDB instance with local or cloud default storage like you'd init a git repository:```shell$ lamin init --storage ./mydata   # or s3://my-bucket, gs://my-bucket```Validate &amp; register a `DataFrame`:```pythonimport lamindb as lnimport pandas as pdln.track()  # track run context in a notebookdf = pd.DataFrame({&quot;feat1&quot;: [1, 2], &quot;feat2&quot;: [3, 4], &quot;perturbation&quot;: [&quot;pert1&quot;, &quot;pert2&quot;]})ln.File.from_df(df, description=&quot;Data batch 1&quot;).save()  # create a File object and save/upload it```Query &amp; use a `DataFrame`:```pythonln.File.search(&quot;batch 1&quot;)  # run a searchfile = ln.File.filter(labels=&quot;pert1&quot;).one()  # or a query (under-the-hood, you have the full power of SQL to query)df = file.load()```## DocumentationRead the [docs](https://lamin.ai/docs/guide/).</longdescription>
</pkgmetadata>