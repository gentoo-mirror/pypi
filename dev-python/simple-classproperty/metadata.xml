<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Simple Python `classproperty` decorator![PyPI package](https://github.com/mammo0/py-simple-classproperty/workflows/PyPI%20package/badge.svg)[![PyPI version](https://badge.fury.io/py/simple-classproperty.svg)](https://badge.fury.io/py/simple-classproperty)This module provides a simple way for defining class properties.### InstallYou can install this Python module via **pip**:```shellpip install simple-classproperty```Otherwise the module can be downloaded from PyPI: https://pypi.org/project/simple-classproperty/### Usage1. Import the module:   ```python   from simple_classproperty import ClasspropertyMeta, classproperty   ```2. Create a class with a class property:   ```python   class NewClass(metaclass=ClasspropertyMeta):       _attr = &quot;val&quot;       @classproperty       def attr(cls):           return cls._attr   ```   **Don't forget to set the `metaclass`!**3. **(Optional)** Define also a setter and deleter for the newly created class property (this works like the standard python `property`):   ```python   @attr.setter   def attr(cls, value):       cls._attr = value   @attr.deleter   def attr(cls):       del cls._attr   ```### TipsThe `classproperty` is also accessible from an instance:```pythoninstance = NewClass()print(instance.attr)  # &quot;val&quot;```When the value of the property is changed from an instance object, the class property will be changed. All other instances will have this new value:```pythoninstance1 = NewClass()instance2 = NewClass()instance1.attr = &quot;new&quot;print(instance1.attr)  # &quot;new&quot;print(instance2.attr)  # &quot;new&quot;print(NewClass.attr)   # &quot;new&quot;```This behavior is the same when a property gets deleted from an instance.</longdescription>
</pkgmetadata>