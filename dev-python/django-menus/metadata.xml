<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-menus============django-menus is an app that provides some useful template helpers forrendering and handling menus within django projects.To use in in your django project, it needs to be installed:::    $ pip install django-menusAnd ``&quot;menus&quot;`` needs to be in your ``settings.INSTALLED_APPS``.menu\_item----------An inclusion template tag that will create a single instance of a menuitem, which will only be rendered if the logged in user can access thereferenced view. Secondly, the currently active view will have a CSSclass of ``active`` in it's menu item.::    {% load menu_item %}    {% menu_item &quot;/foo/&quot; &quot;Foo&quot; %}    {% menu_item &quot;/bar/&quot; &quot;Bar&quot; %}    {% menu_item &quot;http://example.com&quot; &quot;Baz&quot; %}If we were viewing ``/foo/``, this renders to:::    &lt;a class=&quot;active&quot; href=&quot;/foo/&quot;&gt;Foo&lt;/a&gt;    &lt;a href=&quot;/bar/&quot;&gt;Bar&lt;/a&gt;    &lt;a href=&quot;http://example.com&quot;&gt;Baz&lt;/a&gt;Using the standard template. If you want, you can override the``menus/item.html`` template to change the display format.You may also pass in a string like ``&quot;url:foo_name&quot;`` to the firstargument. This will do a ``reverse('foo_name')`` call (with no args orkwargs) to find a matching url.If the menu item title is ``'home'`` (case insensitive), or the url pathis ``'/'``, then an exact match will be required to mark it as active,otherwise a prefix match is done. This means that if you had a menu itemas above, and were viewing the url ``/foo/bar/``, then the firstmenu\_item would be marked as active.tree\_menu----------An extension to`django-mptt &lt;https://github.com/django-mptt/django-mptt/&gt;`_, this is atemplate that you can use to have a dynamic tree menu, where selectingitems with children expands them, and selecting a leaf node follows thelink. To use it, you'll need to have mptt installed into your project aswell as this package.You use it like:::    {% load mptt_tags %}    {% block tree_menu %}      {% full_tree_for_model app_label.ModelName as menu %}      {% include &quot;menu/tree-menu.html&quot; %}    {% endblock %}If you want it to dynamically hide/show nested data, then you will wantto have:::        &lt;script src=&quot;{{ STATIC_URL }}menus/js/tree-menu.js&quot;&gt;&lt;/script&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ STATIC_URL }}menus/style/tree-menu.css&quot;               type=&quot;text/css&quot; media=&quot;screen&quot; title=&quot;no title&quot; charset=&quot;utf-8&quot;&gt;Somewhere in your page.This part is currently in use in one small part of a project, and maychange if I start to use it more. This README is a little light onbecause I haven't touched this code in a long, long time.Changes-------1.1.2 - Create li_menu_item_disabled template tag, that will show the menu        item, but have it as disabled if the user may not access it.1.1.1 - Pass through args and kwargs to the test function if it accepts them.1.0.9 - Allow for adding classes, and buttons as menu items.1.0.8 - Allow for absolute urls, ie, pointing to another server. We nevertry to validate these for permission to view, it is assumed the user can.1.0.7 - Change how version number is stored. Include a new li-item.htmltemplate, and refactor how the template is found. Check func\_codeexists before accessing it. Refactor some of the handling of paths.Better handle quoting issues.1.0.6 - Documentation fix only.1.0.5 - Actually install all of the static media/templates.1.0.4 - Don't fail on install if README.md missing.1.0.3 - Repackaged to include README.rst [Thanks to John Bazikjsb@cs.brown.edu]</longdescription>
</pkgmetadata>