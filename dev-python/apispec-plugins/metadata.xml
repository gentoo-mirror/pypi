<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>***************apispec-plugins***************.. image:: https://img.shields.io/pypi/v/apispec-plugins    :target: https://pypi.org/project/apispec-plugins    :alt: PyPI version.. image:: https://github.com/codectl/apispec-plugins/actions/workflows/ci.yaml/badge.svg    :target: https://github.com/codectl/apispec-plugins/actions/workflows/ci.yaml    :alt: CI.. image:: https://codecov.io/gh/codectl/apispec-plugins/branch/master/graph/badge.svg    :target: https://app.codecov.io/gh/codectl/apispec-plugins/branch/master    :alt: codecov.. image:: https://img.shields.io/badge/OAS-2_|_3-14ACBB.svg    :target: https://github.com/OAI/OpenAPI-Specification    :alt: OpenAPI Specification 2/3 compatible.. image:: https://img.shields.io/pypi/pyversions/apispec-plugins    :target: https://pypi.org/project/apispec-plugins    :alt: Python compatibility.. image:: https://img.shields.io/badge/code_style-black-000000.svg    :target: https://github.com/psf/black    :alt: code style: black.. image:: https://img.shields.io/badge/License-MIT-yellow.svg    :target: https://opensource.org/licenses/MIT    :alt: license: MIT`APISpec &lt;https://github.com/marshmallow-code/apispec&gt;`__ plugins for easyintegration with different components (web frameworks, packages, etc).Features========* Support for the OpenAPI Specification (versions 2 and 3)* Support for frameworks/plugins which include:  * ``apispec_plugins.webframeworks.flask``  * ``apispec_plugins.ext.pydantic``Installation============Install the package directly from ``PyPI`` (recommended):.. code-block:: bash   $ pip install apispec-pluginsPlugin dependencies like ``flask`` and ``pydantic`` are not installed with the package by default. Tohave ``flask`` and ``pydantic`` installed, run:.. code-block:: bash   $ pip install apispec-plugins[flask,pydantic]Example Usage=============.. code-block:: python    from typing import Optional    from apispec import APISpec    from apispec_plugins.base.mixin import RegistryMixin    from apispec_plugins.ext.pydantic import PydanticPlugin    from apispec_plugins.webframeworks.flask import FlaskPlugin    from flask import Flask    from pydantic import BaseModel    # set APISpec plugins    spec = APISpec(        title=&quot;Pet Store&quot;,        version=&quot;1.0.0&quot;,        openapi_version=&quot;3.0.3&quot;,        info=dict(description=&quot;A minimal pet store API&quot;),        plugins=(FlaskPlugin(), PydanticPlugin()),    )    # optional Flask support    app = Flask(__name__)    # optional pydantic support    class Pet(BaseModel, RegistryMixin):        id: Optional[int]        name: str    @app.route(&quot;/pet/&lt;petId&gt;&quot;)    def pet(petId):        &quot;&quot;&quot;Find pet by ID.        ---        get:            parameters:                - in: path                  name: petId            responses:                 200:                     description: display pet data                     content:                         application/json:                             schema: Pet        &quot;&quot;&quot;        return f&quot;Display pet with ID {petId}&quot;        # register `path` for the Flask route        with app.test_request_context():            spec.path(view=pet)Alternatively, to ``Flask`` routes, ``MethodView`` can be used:.. code-block:: python   from flask.views import MethodView   class PetAPI(MethodView):       def get(self, petId):           # get pet by ID           pass   app.add_url_rule(&quot;/pet/&lt;petId&gt;&quot;, view_func=PetAPI.as_view(&quot;pet_view&quot;))Dynamic specs-------------As seen so far, specs are specified in the docstring of the view orclass. However, with the ``spec_from`` decorator, one can dynamicallyset specs:.. code-block:: python   from apispec_plugins import spec_from   @spec_from(       {           &quot;parameters&quot;: {&quot;in&quot;: &quot;path&quot;, &quot;name&quot;: &quot;petId&quot;},           &quot;responses&quot;: {200: {&quot;description&quot;: &quot;display pet data&quot;}},       }   )   def pet(petID):       &quot;&quot;&quot;Find pet by ID.&quot;&quot;&quot;       passWhy not ``apispec-webframeworks``?==================================The conceiving of this project was based on `apispec-webframeworks &lt;https://github.com/marshmallow-code/apispec-webframeworks&gt;`__. While that project is focused on integrating web frameworks with ``APISpec``, thisproject goes a step further in providing the best integration possible with the ``APISpec`` standards. Somelimitations on that project were also addressed, like:* a path cannot register no more than 1 single rule per endpoint;* limited docstring spec processing;Tests &amp; linting ðŸš¥==================Run tests with ``tox``:.. code-block:: bash    # ensure tox is installed    $ toxRun linter only:.. code-block:: bash    $ tox -e lintOptionally, run coverage as well with:.. code-block:: bash    $ tox -e coverageLicense=======MIT licensed. See `LICENSE &lt;LICENSE&gt;`__.</longdescription>
</pkgmetadata>