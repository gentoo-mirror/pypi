<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aioschedule===========.. image:: https://api.travis-ci.org/ibrb/python-aioschedule.svg?branch=master        :target: https://travis-ci.org/ibrb/python-aioschedule.. image:: https://coveralls.io/repos/ibrb/python-aioschedule/badge.svg?branch=master        :target: https://coveralls.io/r/ibrb/python-aioschedule.. image:: https://img.shields.io/pypi/v/aioschedule.svg        :target: https://pypi.python.org/pypi/aioschedule.. image:: https://media.ibrb.org/ibr/images/logos/landscape1200.png        :target: https://media.ibrb.org/ibr/images/logos/landscape1200.pngPython job scheduling for humans. Forked and modified from github.com/dbader/schedule.An in-process scheduler for periodic jobs that uses the builder patternfor configuration. Schedule lets you run Python functions (or any othercallable) periodically at pre-determined intervals using a simple,human-friendly syntax.Inspired by `Adam Wiggins' &lt;https://github.com/adamwiggins&gt;`_ article `&quot;Rethinking Cron&quot; &lt;https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/&gt;`_ and the `clockwork &lt;https://github.com/Rykian/clockwork&gt;`_ Ruby module.Features--------- A simple to use API for scheduling jobs.- Very lightweight and no external dependencies.- Excellent test coverage.- Tested on Python 3.5, and 3.6Usage-----.. code-block:: bash    $ pip install aioschedule.. code-block:: python    import asyncio    import aioschedule as schedule    import time    async def job(message='stuff', n=1):        print(&quot;Asynchronous invocation (%s) of I'm working on:&quot; % n, message)        asyncio.sleep(1)    for i in range(1,3):        schedule.every(1).seconds.do(job, n=i)    schedule.every(5).to(10).days.do(job)    schedule.every().hour.do(job, message='things')    schedule.every().day.at(&quot;10:30&quot;).do(job)    loop = asyncio.get_event_loop()    while True:        loop.run_until_complete(schedule.run_pending())        time.sleep(0.1)Documentation-------------Schedule's documentation lives at `schedule.readthedocs.io &lt;https://schedule.readthedocs.io/&gt;`_.Please also check the FAQ there with common questions.Development-----------Run `vagrant up` to spawn a virtual machine containing the developmentenvironment. Make sure to set the `IBR_GIT_COMMITTER_NAME` and`IBR_GIT_COMMITTER_EMAIL` environment variables.Meta----- Daniel Bader - `@dbader_org &lt;https://twitter.com/dbader_org&gt;`_ - mail@dbader.org- Cochise Ruhulessin - `@magicalcochise &lt;https://twitter.com/magicalcochise&gt;`_ - c.ruhulessin@ibrb.orgDistributed under the MIT license. See ``LICENSE.txt`` for more information.https://github.com/ibrb/python-aioschedule</longdescription>
</pkgmetadata>