<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Globox — Object Detection ToolboxThis framework can:* parse all kinds of object detection datasets (ImageNet, COCO, YOLO, PascalVOC, OpenImage, CVAT, LabelMe, etc.) and show statistics,* convert them to other formats (ImageNet, COCO, YOLO, PascalVOC, OpenImage, CVAT, LabelMe, etc.),* and evaluate predictions using standard object detection metrics such as AP@[.5:.05:.95], AP@50, mAP, AR&lt;sub&gt;1&lt;/sub&gt;, AR&lt;sub&gt;10&lt;/sub&gt;, AR&lt;sub&gt;100&lt;/sub&gt;.This framework can be used both as a library in your own code and as a command line tool. This tool is designed to be simple to use, fast and correct.## InstallYou can install the package using pip:```shellpip install globox```## Use as a Library### Parse AnnotationsThe library has three main components:* `BoundingBox`: represents a bounding box with a label and an optional confidence score* `Annotation`: represent the bounding boxes annotations for one image* `AnnotationSet`: represents annotations for a set of images (a database)The `AnnotationSet` class contains static methods to read different dataset formats:```python# COCOcoco = AnnotationSet.from_coco(file_path=&quot;path/to/file.json&quot;)# YOLOv5yolo = AnnotationSet.from_yolo_v5(    folder=&quot;path/to/files/&quot;,    image_folder=&quot;path/to/images/&quot;)# Pascal VOCpascal = AnnotationSet.from_pascal_voc(folder=&quot;path/to/files/&quot;)````Annotation` offers file-level granularity for compatible datasets:```pythonannotation = Annotation.from_labelme(file_path=&quot;path/to/file.xml&quot;)```For more specific implementations the `BoundingBox` class contains lots of utilities to parse bounding boxes in different formats, like the `create()` method.`AnnotationsSets` are set-like objects. They can be combined and annotations can be added:```pythongts = coco | yologts.add(annotation)```### Inspect DatasetsIterators and efficient lookup by `image_id`'s are easy to use:```pythonif annotation in gts:    print(&quot;This annotation is present.&quot;)if &quot;image_123.jpg&quot; in gts.image_ids:    print(&quot;Annotation of image 'image_123.jpg' is present.&quot;)for box in gts.all_boxes:    print(box.label, box.area, box.is_ground_truth)for annotation in gts:    nb_boxes = len(annotation.boxes)    print(f&quot;{annotation.image_id}: {nb_boxes} boxes&quot;)```Datasets stats can printed to the console:```pythoncoco_gts.show_stats()``````shell         Database Stats         ┏━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓┃ Label       ┃ Images ┃ Boxes ┃┡━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩│ aeroplane   │     10 │    15 ││ bicycle     │      7 │    14 ││ bird        │      4 │     6 ││ boat        │      7 │    11 ││ bottle      │      9 │    13 ││ bus         │      5 │     6 ││ car         │      6 │    14 ││ cat         │      4 │     5 ││ chair       │      9 │    15 ││ cow         │      6 │    14 ││ diningtable │      7 │     7 ││ dog         │      6 │     8 ││ horse       │      7 │     7 ││ motorbike   │      3 │     5 ││ person      │     41 │    91 ││ pottedplant │      6 │     7 ││ sheep       │      4 │    10 ││ sofa        │     10 │    10 ││ train       │      5 │     6 ││ tvmonitor   │      8 │     9 │├─────────────┼────────┼───────┤│ Total       │    100 │   273 │└─────────────┴────────┴───────┘```### Convert and Save to Many FormatsDatasets can be converted to and saved in other formats:```python# ImageNetgts.save_imagenet(save_dir=&quot;pascalVOC_db/&quot;)# YOLO Darknetgts.save_yolo_darknet(    save_dir=&quot;yolo_train/&quot;,     label_to_id={&quot;cat&quot;: 0, &quot;dog&quot;: 1, &quot;racoon&quot;: 2})# YOLOv5gts.save_yolo_v5(    save_dir=&quot;yolo_train/&quot;,     label_to_id={&quot;cat&quot;: 0, &quot;dog&quot;: 1, &quot;racoon&quot;: 2},)# CVATgts.save_cvat(path=&quot;train.xml&quot;)```### COCO EvaluationCOCO Evaluation is also supported:```pythonevaluator = COCOEvaluator(    ground_truths=gts,     predictions=dets)ap = evaluator.ap()ar_100 = evaluator.ar_100()ap_75 = evaluator.ap_75()ap_small = evaluator.ap_small()...```All COCO standard metrics can be displayed in a pretty printed table with:```pythonevaluator.show_summary()```which outputs:```shell                              COCO Evaluation┏━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━┳...┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┓┃ Label     ┃ AP 50:95 ┃  AP 50 ┃   ┃   AR S ┃   AR M ┃   AR L ┃┡━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━╇...╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━┩│ airplane  │    22.7% │  25.2% │   │   nan% │  90.0% │   0.0% ││ apple     │    46.4% │  57.4% │   │  48.5% │   nan% │   nan% ││ backpack  │    54.8% │  85.1% │   │ 100.0% │  72.0% │   0.0% ││ banana    │    73.6% │  96.4% │   │   nan% │ 100.0% │  70.0% │.           .          .        .   .        .        .        ..           .          .        .   .        .        .        ..           .          .        .   .        .        .        .├───────────┼──────────┼────────┼...┼────────┼────────┼────────┤│ Total     │    50.3% │  69.7% │   │  65.4% │  60.3% │  55.3% │└───────────┴──────────┴────────┴...┴────────┴────────┴────────┘```The array of results can be saved in CSV format:```pythonevaluator.save_csv(&quot;where/to/save/results.csv&quot;)```Custom evaluations can be achieved with:```pythonevaluation = evaluator.evaluate(    iou_threshold=0.33,    max_detections=1_000,    size_range=(0.0, 10_000))ap = evaluation.ap()cat_ar = evaluation[&quot;cat&quot;].ar```Evaluations are cached by `(iou_threshold, max_detections, size_range)` keys. This means that you should not care about about performance, repetead queries to the evaluator are fast!## Use in Command LineIf you only need to use Globox from the command line like an application, you can install the package through [pipx](https://pypa.github.io/pipx/):```shellpipx install globox```Globox will then be in your shell path and usable from anywhere.### UsageGet a summary of annotations for one dataset:```shellglobox summary /yolo/folder/ --format yolo```Convert annotations from one format to another one:```shellglobox convert input/yolo/folder/ output_coco_file_path.json --format yolo --save_fmt coco```Evaluate a set of detections with COCO metrics, display them and save them in a CSV file:```shellglobox evaluate groundtruths/ predictions.json --format yolo --format_dets coco -s results.csv```Show the help message for an exhaustive list of options:```shellglobox summary -hglobox convert -hglobox evaluate -h```## Run TestsClone the repo with its test data:```shellgit clone https://github.com/laclouis5/globox --recurse-submodules=tests/globox_test_data```Install developement dependencies (virtual env recommended):```shellpip install -e &quot;.[dev]&quot;```Run tox:```shelltox```## Speed Banchmarks&lt;details&gt;&lt;summary&gt;Click to expand&lt;/summary&gt;Speed benchmark can be executed with:```shellpython3 tests/benchmark.py```Speed test is done using `timeit` with 5 iterations on an early 2015 MacBook Air (8 GB RAM Dual-Core 1.6 GHz). The dataset is COCO 2017 Validation which comprises 5k images and 36 781 bounding boxes.Task   |COCO |CVAT |OpenImage|LabelMe|PascalVOC|YOLO |TXT-------|-----|-----|---------|-------|---------|-----|-----Parsing|0.52s|0.59s|3.44s    |1.84s  |2.45s    |3.01s|2.54sSaving |1.12s|0.74s|0.42s    |4.39s  |4.46s    |3.75s|3.52sOpenImage, YOLO and TXT are slower because they store bounding box coordinates in relative coordinates and do not provide the image size, so reading it from the image file is required.The fastest format is COCO and LabelMe.`AnnotationSet.show_stats()`: 0.12 s&lt;/details&gt;## Todo* [x] Basic data structures and utilities* [x] Parsers (ImageNet, COCO, YOLO, Pascal, OpenImage, CVAT, LabelMe)* [x] Parser tests* [x] Database summary and stats* [x] Database converters* [x] Visualization options* [x] COCO Evaluation* [x] Tests with a huge load (5k images)* [x] CLI interface* [x] Make `image_size` optional and raise err when required (bbox conversion)* [x] Make file saving atomic with a temporary to avoid file corruption* [x] Pip package!* [ ] PascalVOC Evaluation* [ ] Parsers for TFRecord and TensorFlow* [ ] UI interface?## AcknowledgementThis repo is based on the work of [Rafael Padilla](https://github.com/rafaelpadilla/review_object_detection_metrics). The goal of this repo is to improve the performance and flexibility and to provide additional tools.## ContributionFeel free to contribute, any help you can offer with this project is most welcome.</longdescription>
</pkgmetadata>