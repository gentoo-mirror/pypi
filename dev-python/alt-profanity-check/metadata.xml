<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Alt-profanity-checkAlt profanity check is a drop-in replacement of the `profanity-check` library for the not so wellmaintained &lt;https://github.com/vzhou842/profanity-check&gt;:&gt; A fast, robust Python library to check for profanity or offensive language in strings.&gt; Read more about how and why `profanity-check` was built in &gt; [this blog post](https://victorzhou.com/blog/better-profanity-detection-with-scikit-learn/).Our aim is to follow scikit-learn's (main dependency) versions and post models trained with thesame version number, example alt-profanity-check version 1.2.3.4 should be trained with the1.2.3.4 version of the scikit-learn library.For joblib which is the next major dependency we will be using the latest one which was availablewhen we trained the models.Last but not least we aim to clean up the codebase a bit and **maybe** introduce some features ordatasets.## ChangelogSee[CHANGELOG.md](https://github.com/dimitrismistriotis/alt-profanity-check/blob/master/CHANGELOG.md)## How It Works`profanity-check` uses a linear SVM model trained on 200k human-labeled samples of clean andprofane text strings. Its model is simple but surprisingly effective, meaning**`profanity-check` is both robust and extremely performant**.## Why Use profanity-check?### No Explicit BlacklistMany profanity detection libraries use a hard-coded list of bad words to detect and filterprofanity. For example, [profanity](https://pypi.org/project/profanity/) uses [this wordlist](https://github.com/ben174/profanity/blob/master/profanity/data/wordlist.txt),and even [better-profanity](https://pypi.org/project/better-profanity/) still uses[a wordlist](https://github.com/snguyenthanh/better_profanity/blob/master/better_profanity/profanity_wordlist.txt).There are obviously glaring issues with this approach, and, while they might be performant, **these libraries are not accurate at all**.A simple example for which `profanity-check` is better is the phrase * &quot;You cocksucker&quot;* - `profanity` thinks this is clean because it doesn't have * &quot;cocksucker&quot;* in its wordlist.### PerformanceOther libraries like [profanity-filter](https://github.com/rominf/profanity-filter)use more sophisticated methods that are much more accurate but at the cost of performance.A benchmark (performed December 2018 on a new 2018 Macbook Pro) using [a Kaggle dataset of Wikipedia comments](https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge/data) yielded roughly the following results:| Package          | 1 Prediction (ms) | 10 Predictions (ms) | 100 Predictions (ms) ||------------------|-------------------|---------------------|----------------------|| profanity-check  | 0.2               | 0.5                 | 3.5                  || profanity-filter | 60                | 1200                | 13000                || profanity        | 0.3               | 1.2                 | 24                   |`profanity-check` is anywhere from **300 - 4000 times faster** than `profanity-filter` in thisbenchmark!### AccuracyThis table speaks for itself:| Package          | Test Accuracy | Balanced Test Accuracy | Precision | Recall | F1 Score ||------------------|---------------|------------------------|-----------|--------|----------|| profanity-check  | 95.0%         | 93.0%                  | 86.1%     | 89.6%  | 0.88     || profanity-filter | 91.8%         | 83.6%                  | 85.4%     | 70.2%  | 0.77     || profanity        | 85.6%         | 65.1%                  | 91.7%     | 30.8%  | 0.46     |See the How section below for more details on the dataset used for these results.## Installation```$ pip install alt-profanity-check```### For older Python versions#### Python 3.7From Scikit-learn's [Github page](https://github.com/scikit-learn/scikit-learn):&gt; scikit-learn 1.0 and later require Python 3.7 or newer.&gt; scikit-learn 1.1 and later require Python 3.8 or newer.Which means that from 1.1.2 and later, Python 3.7 is not supported, hence:If you are using 3.6 pin  alt-profanity-check to **1.0.2.1**.#### Python 3.6Following Scikit-learn, **Python3.6** is not supported after its 1.0 version if you are using 3.6 pinalt-profanity-check to **0.24.2**.## UsageYou can test from the command line:```shellprofanity_check &quot;Check something&quot; &quot;Check something else&quot;``````pythonfrom profanity_check import predict, predict_probpredict(['predict() takes an array and returns a 1 for each string if it is offensive, else 0.'])# [0]predict(['fuck you'])# [1]predict_prob(['predict_prob() takes an array and returns the probability each string is offensive'])# [0.08686173]predict_prob(['go to hell, you scum'])# [0.7618861]```Note that both `predict()` and `predict_prob` return [`numpy`](https://pypi.org/project/numpy/)arrays.## More on How/Why It Works### HowSpecial thanks to the authors of the datasets used in this project. `profanity-check` hence also`alt-profanity-check` is trained on a combined dataset from 2 sources:- [t-davidson/hate-speech-and-offensive-language](  https://github.com/t-davidson/hate-speech-and-offensive-language/tree/master/data),  used in their paper *Automated Hate Speech Detection and the Problem of Offensive Language*- the [Toxic Comment Classification Challenge](  https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge/data) on Kaggle.`profanity-check` relies heavily on the excellent [`scikit-learn`](https://scikit-learn.org/)library. It's mostly powered by `scikit-learn` classes [`CountVectorizer`](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html),[`LinearSVC`](https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html), and[`CalibratedClassifierCV`](https://scikit-learn.org/stable/modules/generated/sklearn.calibration.CalibratedClassifierCV.html).It uses a [Bag-of-words model](https://en.wikipedia.org/wiki/Bag-of-words_model)to vectorize input strings before feeding them to a linear classifier.### WhyOne simplified way you could think about why `profanity-check` works is this:during the training process, the model learns which words are &quot;bad&quot; and how &quot;bad&quot; they arebecause those words will appear more often in offensive texts. Thus, it's as if the trainingprocess is picking out the &quot;bad&quot; words out of all possible words and using those to make futurepredictions. This is better than just relying on arbitrary word blacklists chosen by humans!## CaveatsThis library is far from perfect. For example, it has a hard time picking up on less commonvariants of swear words like *&quot;f4ck you&quot;* or *&quot;you b1tch&quot;* because they don't appear often enough in the training corpus. **Never treat any prediction from this library as unquestionable truth, because it does and will make mistakes.** Instead, use this library as aheuristic.## Developer Notes- Create a virtual environment from the project- `pip install -r development_requirements.txt`### Retraining dataWith the above in place:```shellcd profanity_check/datapython train_model.py```### Uploading to PyPiCurrently trying to automate it using Github Actions; see:`.github/workflows/package_release_dry_run.yml`.Setup:- Set up your &quot;~/.pypirc&quot; with the appropriate token- `pip install -r requirements_for_uploading.txt` which installs twineNew Version:With `x.y.z` as the version to be uploaded:First tag:```shellgit tag -a vx.y.z -m &quot;Version x.y.z&quot;git push --tags```Then upload:```shellpython setup.py sdisttwine upload dist/alt-profanity-check-x.y.z.tar.gz```</longdescription>
</pkgmetadata>