<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gql-query-builder![](https://github.com/youyo/gql-query-builder/workflows/Publish%20python%20package/badge.svg)This is a GraphQL query builder.  Use with method chain.## Install```pip install gql-query-builder```## Usage- query```pythonfrom gql_query_builder import GqlQueryquery = GqlQuery().fields(['name']).query('hero').operation().generate()print(query)&quot;&quot;&quot;query {    hero {        name    }}&quot;&quot;&quot;```- mutation```pythonfrom gql_query_builder import GqlQueryquery = GqlQuery().fields(['stars', 'commentary']).query('createReview', input={&quot;episode&quot;: &quot;$ep&quot;, &quot;review&quot;: &quot;$review&quot;}).operation('mutation', name='CreateReviewForEpisode', input={&quot;$ep&quot;: &quot;Episode!&quot;, &quot;$review&quot;: &quot;ReviewInput!&quot;}).generate()print(query)&quot;&quot;&quot;mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {    createReview(episode: $ep, review: $review) {        stars        commentary    }}&quot;&quot;&quot;```### Methods- `fields()`    build response fields.```python#Syntaxfields(    fields: List[str] = [],    name: str = '',    condition_expression: str = '')```- `query()`    build query fields.```python#Syntaxquery(    name: str = '',    alias: str = '',    input: Dict[str, Union[str, int]] = {})```- `operation()`    build operation fields.```python#Syntaxoperation(    query_type: str = 'query',    name: str = '',    input: Dict[str, Union[str, int]] = {},    queries: List[str] = [])```- `fragment()`    build fragment fields.```python#Syntaxfragment(    name: str,    interface: str)```- `generate()`    generate query.```python#Syntaxgenerate()```## Examples- Nesting fields```pythonfrom gql_query_builder import GqlQueryfield_friends = GqlQuery().fields(['name'], name='friends').generate()query = GqlQuery().fields(['name', field_friends]).query('hero').operation('query').generate()print(query)&quot;&quot;&quot;query {    hero {        name        friends {            name        }    }}&quot;&quot;&quot;```- Query with input```pythonfrom gql_query_builder import GqlQueryquery = GqlQuery().fields(['name', 'height']).query('human', input={&quot;id&quot;: '&quot;1000&quot;'}).operation().generate()print(query)&quot;&quot;&quot;query {    human(id: &quot;1000&quot;) {        name        height    }}&quot;&quot;&quot;```- Query with nested input```pythonfrom gql_query_builder import GqlQueryGqlQuery().fields(['name', 'height']).query('human', input={&quot;input&quot;: {&quot;data&quot;: {&quot;id&quot;: &quot;1000&quot;, &quot;name&quot;: &quot;test&quot;}}}).operation().generate()&quot;&quot;&quot;query{    human(input: {data: {id: &quot;1000&quot;, name: &quot;test&quot;}}){        human{            name,             height        }    }}&quot;&quot;&quot;```- Query with input and arguments```pythonfrom gql_query_builder import GqlQueryquery = GqlQuery().fields(['name', 'height(unit: FOOT)']).query('human', input={&quot;id&quot;: '&quot;1000&quot;'}).operation().generate()print(query)&quot;&quot;&quot;query {    human(id: &quot;1000&quot;) {        name        height(unit: FOOT)    }}&quot;&quot;&quot;```- Alias```pythonfrom gql_query_builder import GqlQueryquery_empirehero = GqlQuery().fields(['name']).query('hero', alias='empireHero', input={&quot;episode&quot;: 'EMPIRE'}).generate()query_jedihero = GqlQuery().fields(['name']).query('hero', alias='jediHero', input={&quot;episode&quot;: 'JEDI'}).generate()query = GqlQuery().operation('query', queries=[query_empirehero, query_jedihero]).generate()print(query)&quot;&quot;&quot;query {    empireHero: hero(episode: EMPIRE) {        name    }    jediHero: hero(episode: JEDI) {        name    }}&quot;&quot;&quot;```- Fragments```pythonfrom gql_query_builder import GqlQueryfield_friends = GqlQuery().fields(['name'], name='friends').generate()query = GqlQuery().fields(['name', 'appearsIn', field_friends]).fragment('comparisonFields', 'Character').generate()print(query)&quot;&quot;&quot;fragment comparisonFields on Character {    name    appearsIn    friends {        name    }}&quot;&quot;&quot;```- Refer to fragments```pythonfrom gql_query_builder import GqlQueryquery_leftComparison = GqlQuery().fields(['...comparisonFields']).query('hero', alias='leftComparison', input={&quot;episode&quot;: &quot;EMPIRE&quot;}).generate()query_rightComparison = GqlQuery().fields(['...comparisonFields']).query('hero', alias='rightComparison', input={&quot;episode&quot;: &quot;JEDI&quot;}).generate()query = GqlQuery().operation('query', queries=[query_leftComparison, query_rightComparison]).generate()print(query)&quot;&quot;&quot;query {    leftComparison: hero(episode: EMPIRE) {        ...comparisonFields    }    rightComparison: hero(episode: JEDI) {        ...comparisonFields    }}&quot;&quot;&quot;```- Query with variables```pythonfrom gql_query_builder import GqlQueryfield_friends = GqlQuery().fields(['name'], name='friends').generate()query = GqlQuery().fields(['name', field_friends]).query('hero', input={&quot;episode&quot;: &quot;$episode&quot;}).operation('query', name='HeroNameAndFriends', input={&quot;$episode&quot;: &quot;Episode&quot;}).generate()print(query)&quot;&quot;&quot;query HeroNameAndFriends($episode: Episode) {    hero(episode: $episode) {        name        friends {            name        }    }}&quot;&quot;&quot;```- Directives```pythonfrom gql_query_builder import GqlQueryfield_friends = GqlQuery().fields(['name'], name='friends @include(if: $withFriends)').generate()query = GqlQuery().fields(['name', field_friends]).query('hero', input={&quot;episode&quot;: &quot;$episode&quot;}).operation('query', name='Hero', input={&quot;$episode&quot;: &quot;Episode&quot;, &quot;$withFriends&quot;: &quot;Boolean!&quot;}).generate()print(query)&quot;&quot;&quot;query Hero($episode: Episode, $withFriends: Boolean!) {    hero(episode: $episode) {        name        friends @include(if: $withFriends) {            name        }    }}&quot;&quot;&quot;```</longdescription>
</pkgmetadata>