<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/wkaisertexas/tiktok-uploader/assets/27795014/f991fdc7-287a-4c3b-9a84-22c7ad8a57bf&quot; alt=&quot;video working&quot; /&gt;&lt;/p&gt;&lt;h1 align=&quot;center&quot;&gt; ‚¨ÜÔ∏è TikTok Uploader &lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;A &lt;strong&gt;Selenium&lt;/strong&gt;-based automated &lt;strong&gt;TikTok&lt;/strong&gt; video uploader&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img alt=&quot;Forks&quot; src=&quot;https://img.shields.io/github/forks/wkaisertexas/tiktok-uploader&quot; /&gt;  &lt;img alt=&quot;Stars&quot; src=&quot;https://img.shields.io/github/stars/wkaisertexas/tiktok-uploader&quot; /&gt;  &lt;img alt=&quot;Watchers&quot; src=&quot;https://img.shields.io/github/watchers/wkaisertexas/tiktok-uploader&quot; /&gt;&lt;/p&gt;# Table of Contents- [Installation](#installation)  - [MacOS, Windows and Linux](#macos-windows-and-linux)    - [Downloading from PyPI (Recommended)](#downloading-from-pypi-recommended)    - [Building from source](#building-from-source)- [Usage](#usage)  - [üíª Command Line Interface (CLI)](#-commmand-line-interface-cli)  - [‚¨Ü Uploading Videos](#-uploading-videos)  - [ü´µ Mentions and Hashtags](#-mentions-and-hashtags)  - [ü™° Stitches, Duets and Comments](#-stitches-duets-and-comments)  - [üîê Authentication](#-authentication)  - [üëÄ Browser Selection](#-browser-selection)  - [üö≤ Custom WebDriver Driver Options](#-custom-webdriver-driver-options)  - [ü§Ø Headless Browsers](#-headless-browsers)  - [üî® Initial Setup](#-initial-setup)- [‚ôªÔ∏è Examples](#-examples)- [üìù Notes](#-notes)- [Accounts made with](#accounts-made-using-tiktok-uploader)# InstallationA perquisite to using this program is the installation of a [Selenium-compatible](https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/) web browser. [Google Chrome](https://www.google.com/chrome/) is recommended.## MacOS, Windows and LinuxInstall Python 3 or greater from [python.org](https://www.python.org/downloads/)### Downloading from PyPI (Recommended)Install `tiktok-uploader` using `pip````bashpip install tiktok-uploader```### Building from sourceInstalling from source allows greater flexibility to modify the module's code to extend default behavior. First, `clone` and move into the repository. Next, install `hatch`, the build tool used for this project [^1]. Then, `build` the project. Finally, `install` the project with the `-e` or editable flag.  ```consolegit clone https://github.com/wkaisertexas/tiktok-uploader.gitcd tiktok-uploaderpip install hatchhatch buildpip install -e . ```# Usage`tiktok-uploader` works by duplicating your browser's **cookies** which tricks **TikTok** into believing you are logged in on a remote-controlled browser.## üíª Command Line Interface (CLI)Using the CLI is as simple as calling `tiktok-uploader` with your videos: `path` (-v), `description`(-d) and `cookies` (-c)```bashtiktok-uploader -v video.mp4 -d &quot;this is my escaped \&quot;description\&quot;&quot; -c cookies.txt``````pythonfrom tiktok_uploader.upload import upload_video, upload_videosfrom tiktok_uploader.auth import AuthBackend# single videoupload_video('video.mp4',             description='this is my description',             cookies='cookies.txt')# Multiple Videosvideos = [    {        'path': 'video.mp4',         'description': 'this is my description'    },    {        'path': 'video2.mp4',         'description': 'this is also my description'    }]auth = AuthBackend(cookies='cookies.txt')upload_videos(videos=videos, auth=auth)```## ‚¨Ü Uploading VideosThis library revolves around the `upload_videos` function which takes in a list of videos which have **filenames** and **descriptions** and are passed as follows:```pythonfrom tiktok_uploader.upload import upload_videosfrom tiktok_uploader.auth import AuthBackendvideos = [    {        'video': 'video0.mp4',        'description': 'Video 1 is about ...'    },    {        'video': 'video1.mp4',        'description': 'Video 2 is about ...'    }]auth = AuthBackend(cookies='cookies.txt')failed_videos = upload_videos(videos=videos, auth=auth)for video in failed_videos: # each input video object which failed    print(f'{video['video']} with description &quot;{video['description']}&quot; failed')```## ü´µ Mentions and HashtagsMentions and Hashtags now work so long as they are followed by a space. However, you as the user are responsible for verifying a mention or hashtag exists before posting**Example:**```pythonfrom tiktok_uploader.upload import upload_videoupload_video('video.mp4', '#fyp @icespicee', 'cookies.txt')```## ü™° Stitches, Duets and CommentsTo set whether or not a video uploaded allows stitches, comments or duet, simply specify `comment`, `stitch` and/or `duet` as keyword arguments to `upload_video` or `upload_videos`.```pythonupload_video(..., comment=True, stitch=True, duet=True)```&gt; Comments, Stitches and Duets are allowed by **default**## üåê ProxyTo set a proxy, currently only works with chrome as the browser, allow user:pass auth.```python# proxy = {'user': 'myuser', 'pass': 'mypass', 'host': '111.111.111', 'port': '99'}  # user:passproxy = {'host': '111.111.111', 'port': '99'}upload_video(..., proxy=proxy)```## üìÜ ScheduleThe datetime to schedule the video will be treated with the UTC timezone. &lt;br&gt;The scheduled datetime must be at least 20 minutes in the future and a maximum of 10 days.```pythonimport datetimeschedule = datetime.datetime(2020, 12, 20, 13, 00)upload_video(..., schedule=schedule)```## üîê AuthenticationAuthentication uses your browser's cookies. This workaround was done due to TikTok's stricter stance on authentication by a Selenium-controlled browser.Your `sessionid` is all that is required for authentication and can be passed as an argument to nearly any function[üç™ Get cookies.txt](https://github.com/kairi003/Get-cookies.txt-LOCALLY) makes getting cookies in a [NetScape cookies format](http://fileformats.archiveteam.org/wiki/Netscape_cookies.txt).After installing, open the extensions menu on [TikTok.com](https://tiktok.com/) and click `üç™ Get cookies.txt` to reveal your cookies. Select `Export As ‚á©` and specify a location and name to save.**Optionally**, `cookies_list` is a list of dictionaries with keys `name`, `value`, `domain`, `path` and `expiry` which allow you to pass your own browser cookies. **Example:**```pythoncookies_list = [    {        'name': 'sessionid',        'value': '**your session id**',        'domain': 'https://tiktok.com',        'path': '/',        'expiry': '10/8/2023, 12:18:58 PM'    }]upload_video(..., cookies_list=cookies_list)```## üëÄ Browser Selection[Google Chrome](https://www.google.com/chrome) is the preferred browser for **TikTokUploader**. The default anti-detection techniques used in this packaged are optimized for this. However, if you wish to use a different browser you may specify the `browser` in `upload_video` or `upload_videos`.```pythonfrom tiktok_uploader.upload import upload_videofrom random import choiceBROWSERS = [    'chrome',    'safari',    'chromium',    'edge',    'firefox']# randomly picks a web browser upload_video(..., browser=choice(BROWSERS))```‚úÖ Supported Browsers:- **Chrome** (Recommended)- **Safari**- **Chromium**- **Edge**- **FireFox** ## üö≤ Custom WebDriver Driver OptionsDefault modifications to Selenium are applied which help it avoid being detected by TikTok. However, you **may** pass a custom driver configuration options. Simply pass `options` as a keyword argument to either `upload_video` or `upload_videos`. ```pythonfrom selenium.webdriver.chrome.options import Optionsoptions = Options()options.add_argument('start-maximized')upload_videos(..., options=options)```&gt; Note: Make sure to use the right selenium options for your browser## ü§Ø Headless BrowsersHeadless browsing only works on Chrome. When using Chrome, adding the `--headless` flag using the CLI or passing `headless` as a keyword argument to `upload_video` or `upload_videos` is all that is required.```pythonupload_video(..., headless=True)upload_videos(..., headless=True)```## üî® Initial Setup[WebDriverManager](https://bonigarcia.dev/webdrivermanager/) is used to manage driver versions. On initial startup, you **may** be prompted to install the correct driver for your selected browser. However, for **Chrome** and **Edge** the driver is automatically installed.# ‚ôª Examples- **[Basic Upload Example](examples/basic_upload.py):** Uses `upload_video` to make one post.- **[Multiple Videos At Once](examples/multiple_videos_at_once.py):** Uploads the same video multiple times using `upload_videos`.- **[Series Upload Example](examples/series_upload.py):** Videos are read from a CSV file using [Pandas](https://pandas.pydata.org). A video upload attempt is made and **if and only if** it is successful will the video be marked as uploaded.# üìù NotesThis bot is not fool proof. Though I have not gotten an official ban, the video will fail to upload after too many uploads. In testing, waiting several hours was sufficient to fix this problem. For this reason, please thing of this more as a scheduled uploader for TikTok videos, rather than a spam bot.# Accounts made with- [@C_Span](https://www.tiktok.com/@c_span?lang=en) - A split-screen channel with mobile games below featuring clips from C-Span's YouTube channel- [@habit_track](https://www.tiktok.com/@habit_track?lang=en) - A Reddit bot to see which SubReddit is most viral on TikTok[^1]: If interested in Hatch, checkout the [website](https://hatch.pypa.io/latest/build/)</longdescription>
</pkgmetadata>