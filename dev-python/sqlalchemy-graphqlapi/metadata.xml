<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># graphql-db-api [![PyPI version](https://badge.fury.io/py/sqlalchemy-graphqlapi.svg)](https://badge.fury.io/py/sqlalchemy-graphqlapi) ![main workflow](https://github.com/cancan101/graphql-db-api/actions/workflows/main.yml/badge.svg) [![codecov](https://codecov.io/gh/cancan101/graphql-db-api/branch/main/graph/badge.svg?token=TOI17GOA2O)](https://codecov.io/gh/cancan101/graphql-db-api)A Python DB API 2.0 for GraphQL APIsThis module allows you to query GraphQL APIs using SQL.## SQLAlchemy supportThis module provides a SQLAlchemy dialect.```pythonfrom sqlalchemy.engine import create_engineengine = create_engine('graphql://host:port/path?is_https=0')```### Example Usage#### Querying Connections```pythonfrom sqlalchemy import create_enginefrom sqlalchemy import text# We use GraphQL SWAPI (The Star Wars API) c/o Netlify:engine = create_engine('graphql://swapi-graphql.netlify.app/.netlify/functions/index')with engine.connect() as connection:    # Demonstration of requesting nested resource of homeworld    # and then selecting fields from it    for row in connection.execute(text(&quot;select name, homeworld__name from 'allPeople?include=homeworld'&quot;)):        print(row)```#### Querying Lists```pythonfrom sqlalchemy import create_enginefrom sqlalchemy import textengine = create_engine('graphql://pet-library.moonhighway.com/')with engine.connect() as connection:    for row in connection.execute(text(&quot;select id, name from 'allPets?is_connection=0'&quot;)):        print(row)```## Superset supportIn order to use with Superset, install this package and then use the `graphql` protocol in the SQLAlchemy URI like: `graphql://swapi-graphql.netlify.app/.netlify/functions/index`. We install a [`db_engine_spec`](https://github.com/cancan101/graphql-db-api/blob/main/graphqldb/db_engine_specs.py) so Superset should recognize the driver.## Roadmap- [x] Non-Connections top level- [x] Path traversal (basic)- [ ] Path traversal (basic + nested)- [ ] Path traversal (list / connection)- [x] Bearer Tokens in `Authorization` Header- [ ] Advanced Auth (e.g. with token refresh)- [ ] Passing Headers (e.g. Auth in other locations)- [ ] Filtering- [ ] Sorting- [x] Relay Pagination</longdescription>
</pkgmetadata>