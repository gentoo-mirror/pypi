<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Logo](https://raw.githubusercontent.com/Donnype/xtdb-py/main/docs/logo.png)# XTDB Python: A Python ORM for [XTDB](https://www.xtdb.com/)&lt;div align=&quot;center&quot;&gt;[![Python Versions](https://img.shields.io/pypi/pyversions/xtdb)](https://pypi.org/project/xtdb/)[![Stable Version](https://img.shields.io/pypi/v/xtdb?label=stable)](https://pypi.org/project/xtdb/#history)[![Tests](https://github.com/Donnype/xtdb-py/actions/workflows/tests.yml/badge.svg)](https://github.com/Donnype/xtdb-py/actions/workflows/tests.yml)[![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/Donnype/xtdb-py/blob/main/.pre-commit-config.yaml)[![License](https://img.shields.io/github/license/Donnype/xtdb-py)](https://github.com/Donnype/xtdb-py/blob/main/LICENSE)&lt;/div&gt;## InstallationYou can install this project using pip:```bash$ pip install xtdb```## UsageThe following examples assume you have set the `XTDB_URI` variable in your environment.To start experimenting, you could use the following setup using Docker:```bash$ docker run -p 3000:3000 -d juxt/xtdb-standalone-rocksdb:1.21.0$ export XTDB_URI=http://localhost:3000/_xtdb```### Using the ClientThe `XTDBClient` supports the full [HTTP API spec](https://docs.xtdb.com/clients/http/).```python3&gt;&gt; &gt; import os&gt;&gt; &gt; from xtdb.session import XTDBClient, Operation&gt;&gt; &gt;&gt;&gt; &gt; client = XTDBClient(os.environ[&quot;XTDB_URI&quot;])&gt;&gt; &gt; client.submit_tx([Operation.put({&quot;xt/id&quot;: &quot;123&quot;, &quot;name&quot;: &quot;fred&quot;})])&gt;&gt; &gt;&gt;&gt; &gt; client.query('{:query {:find [(pull ?e [*])] :where [[ ?e :name &quot;fred&quot; ]]}}')[[{'name': 'fred', 'xt/id': '123'}]]&gt;&gt; &gt;&gt;&gt; &gt; client.get_entity(&quot;123&quot;){'name': 'fred', 'xt/id': '123'}```Take a look at the spec to see the full range of functionality that maps directly to the client.### Using the Datalog moduleThe [datalog](https://github.com/Donnype/xtdb-py/blob/main/xtdb/datalog.py) module also provides a layer to construct queries with more easily.Given the data from [the cities example](https://github.com/Donnype/xtdb-py/blob/main/examples/cities) has been seeded:```python3&gt;&gt;&gt; from xtdb.datalog import Find, Where&gt;&gt;&gt;&gt;&gt;&gt; query = Find(&quot;(pull Country [*])&quot;) &amp; Find(&quot;City&quot;) &amp; (Where(&quot;City&quot;, &quot;City/country&quot;, &quot;Country&quot;) &amp; Where(&quot;City&quot;, &quot;City/name&quot;, '&quot;Rome&quot;'))&gt;&gt;&gt; str(query){:query {:find [ (pull Country [*]) City] :where [ [ City :City/country Country ] [ City :City/name &quot;Rome&quot; ]]}}&gt;&gt;&gt;&gt;&gt;&gt; client.query(query)[[{'type': 'Country', 'Country/name': 'Italy', 'xt/id': 'c095839f-031f-46ad-85e1-097f634ba4f0'}, '33aa7fa6-b752-4982-a772-d2dbaeda58ae']]```To see more datalog query examples, check out the [unit tests](https://github.com/Donnype/xtdb-py/blob/main/tests/test_datalog.py).### Using the ORM and SessionBelow is an example of how to use the ORM functionality.```python3import osfrom dataclasses import dataclassfrom xtdb.orm import Basefrom xtdb.query import Queryfrom xtdb.session import XTDBSession@dataclassclass TestEntity(Base):    name: str@dataclassclass SecondEntity(Base):    age: int    test_entity: TestEntitysession = XTDBSession(os.environ[&quot;XTDB_URI&quot;])entity = TestEntity(name=&quot;test&quot;)with session:    session.put(entity)query = Query(TestEntity).where(TestEntity, name=&quot;test&quot;)result = session.query(query)result[0].dict() #  {&quot;TestEntity/name&quot;: &quot;test&quot;, &quot;type&quot;: &quot;TestEntity&quot;, &quot;xt/id&quot;: &quot;fe2a3ee0-9254-41dc-91cc-74ad9e2a16db&quot;}```To see more examples, check out the [examples directory](https://github.com/Donnype/xtdb-py/blob/main/examples).Don't hesitate to add your own examples!### Using the CLI for queryingThis package also comes with an easy CLI tool to query XTDB.To query XTDB using a plain query you can run```bash$ echo '{:query {:find [(pull ?e [*])] :where [[ ?e :name &quot;fred&quot; ]]}}' | python -m xtdb[[{&quot;name&quot;: &quot;fred&quot;, &quot;xt/id&quot;: &quot;123&quot;}]]```To use a query file the command can be modified to the following:```bash$ cat query.txt{:query {:find [(pull ?e [*])] :where [[ ?e :name &quot;fred&quot; ]]}}$$ python -m xtdb &lt; query.txt[[{&quot;name&quot;: &quot;fred&quot;, &quot;xt/id&quot;: &quot;123&quot;}]]```## Contributing### InstallationTo get started, clone the repo and create an environment using Poetry```bash$ git clone https://github.com/Donnype/xtdb-py.git$ cd xtdb-py$ poetry install```Now set up XTDB, for instance using Docker```bash$ docker run -p 3000:3000 -d juxt/xtdb-standalone-rocksdb:1.21.0```Export the XTDB_URI environment variable to be able to use `os.environ[&quot;XTDB_URI&quot;]` to fetch the endpoint```bash$ export XTDB_URI=http://localhost:3000/_xtdb```### DevelopmentThe `Makefile` has several targets that should make development easier:```bash$ make utest  # Run unit tests$ make itest  # Run integration tests$ make check  # Run all linters$ make done   # Run all of the above```The CI runs these checks as well.Check out the [project page](https://github.com/users/Donnype/projects/1) for issues and features to work on.</longdescription>
</pkgmetadata>