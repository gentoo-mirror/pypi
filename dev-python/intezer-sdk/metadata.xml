<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![PyPI](https://img.shields.io/pypi/v/intezer_sdk)![Build](https://github.com/intezer/analyze-python-sdk/actions/workflows/test.yml/badge.svg)# Intezer SDKThe SDK wraps Intezer Analyze API 2.0 ([View full API documentation](https://analyze.intezer.com/api-docs.html))Currently, the following options are available in the SDK:- Analyze by file- Analyze by SHA256- Analyze Url- Index by file- Index by SHA256- Get Latest Analysis- Account and file related samples- Code reuse and Metadata- IOCs, Dynamic TTPs and Capabilities- Strings related samples- Search a family## Installation```bashpip install intezer-sdk```## Using Intezer SDK### Set global api keyBefore using the SDK functionality we should set the api key:```python    api.set_global_api('&lt;api_key&gt;')```### Analyze By File```pythonanalysis = FileAnalysis(file_path=&lt;file_path&gt;,                    dynamic_unpacking=&lt;force_dynamic_unpacking&gt;, # optional                    static_unpacking=&lt;force_static_unpacking&gt;)   # optionalanalysis.send(wait=True) result = analysis.result()```### Analyze By SHA256```pythonanalysis = FileAnalysis(file_hash=&lt;file_sha256&gt;)analysis.send(wait=True)result = analysis.result()```### File Analysis result example```python{  'analysis_id': '00000000-0000-0000-0000-000000000000',   'analysis_time': 'Sun, 04 Aug 2019 09:38:16 GMT',   'analysis_url': 'https://analyze.intezer.com/#/analyses/00000000-0000-0000-0000-000000000000',   'family_name': 'Ramnit',   'is_private': True,   'sha256': '4e553bce90f0b39cd71ba633da5990259e185979c2859ec2e04dd8efcdafe356',   'sub_verdict': 'malicious',   'verdict': 'malicious'}```### Analyze Url```pythonanalysis = UrlAnalysis(url=&lt;url&gt;)analysis.send(wait=True)result = analysis.result()```### Url Analysis result example```python{    'analysis_id': '70d09f68-c7a3-43a3-a8de-07ec31fbf4ed',    'domain_info': {        'creation_date': '1997-08-13 04:00:00.000000',        'domain_name': 'foo.com',        'registrar': 'TUCOWS, INC.'    },    'indicators': [    {        'classification': 'informative',        'text': 'URL is accessible'    },    {        'classification': 'informative',        'text': 'Assigned IPv4 domain'    },    {        'classification': 'informative',        'text': 'Vaild IPv4 domain'    }    ],    'ip': '34.206.39.153',    'redirect_chain': [    {        'response_status': 301,        'url': 'https://foo.com/'    },    {        'response_status': 200,        'url': 'http://www.foo.com/'    }    ],    'scanned_url': 'http://www.foo.com/',    'submitted_url': 'foo.com',    'downloaded_file': {        'analysis_id': '8db9a401-a142-41be-9a31-8e5f3642db62',        'analysis_summary': {           'verdict_description': 'This file contains code from malicious software, therefore it's very likely that it's malicious.',           'verdict_name': 'malicious',           'verdict_title': 'Malicious',           'verdict_type': 'malicious'        },        'sha256': '4293c1d8574dc87c58360d6bac3daa182f64f7785c9d41da5e0741d2b1817fc7'     },    'summary': {        'description': 'No suspicious activity was detected for this URL',        'title': 'No Threats',        'verdict_name': 'no_threats',        'verdict_type': 'no_threats'    }}```### Index By File```pythonfrom intezer_sdk import constsindex = Index(file_path=&lt;file_path&gt;,               index_as=consts.IndexType.MALICIOUS,               family_name=&lt;family_name&gt;)index.send(wait=True)index_id = index.index_id```### Index By SHA256```pythonfrom intezer_sdk import constsindex = Index(sha256=&lt;file_sha256&gt;,               index_as=consts.IndexType.TRUSTED)index.send(wait=True)index_id = index.index_id```### Get Latest File Analysis```pythonanalysis = FileAnalysis.from_latest_hash_analysis(file_hash: &lt;file_sha256&gt;)result = analysis.result()```### Get Sub Analyses#### Root File Analysis```pythonroot_analysis = analysis.get_root_analysis()```#### Sub Analyses```pythonsub_analyses = analysis.get_sub_analyses()```#### Code Reuse and Metadata```pythonroot_analysis_code_reuse = root_analysis.code_reuseroot_analysis_metadata = root_analysis.metadatafor sub_analysis in sub_analyses:    sub_analyses_code_reuse = sub_analysis.code_reuse    sub_analyses_metadata = sub_analysis.metadata```#### Related Files by Family```pythonroot_analysis_code_reuse = root_analysis.code_reusefor family in root_analysis_code_reuse['families']:    operation = root_analysis.find_related_files(family['family_id'], wait=True)    related_files = operation.get_result()```#### Account Related Samples```pythonoperation = root_analysis.get_account_related_samples()related_samples = operation.get_result()```#### Vaccine```pythonoperation = root_analysis.generate_vaccine()vaccine = operation.get_result()```#### Strings related samples```pythonoperation = root_analysis.get_string_related_samples('string_to_relate_to', wait=True)string_related_samples = operation.get_result()```#### Wait with timeout```pythonanalysis = FileAnalysis(file_hash=&lt;file_sha256&gt;)analysis.send(wait=True, wait_timeout=datetime.timedelta(minutes=1))```#### Analyses History - File```pythonhistory_results = query_file_analyses_history(    start_date = &lt;datetime&gt;,    end_date= &lt;datetime&gt;,    api = &lt;IntezerApi&gt;    aggregated_view: &lt;bool&gt;,    sources=&lt;source&gt;    verdicts=&lt;verdicts&gt;,    file_hash=&lt;file_hash&gt;,    family_names=&lt;family_names&gt;,    file_name=&lt;file_name&gt;)for analyse in history_results:    print(analyse)``` - URL```pythonhistory_results = query_url_analyses_history(    start_date = &lt;datetime&gt;,    end_date=&lt;datetime&gt;,    aggregated_view=&lt;bool&gt;,    sources=&lt;sources&gt;,    verdicts=&lt;verdicts&gt;,)for analyse in history_results:    print(analyse)``` - End Point```pythonhistory_results = query_endpoint_analyses_history(    start_date = &lt;datetime&gt;,    end_date=&lt;datetime&gt;,    aggregated_view=&lt;bool&gt;,    sources=&lt;sources&gt;,    verdicts=&lt;verdicts&gt;,    sub_verdicts=&lt;verdicts&gt;,    did_download_file=&lt;bool&gt;,    submitted_url=&lt;submitted_url&gt;)for analyse in history_results:    print(analyse)```## Code examplesYou can find more code examples under [analyze-python-sdk/examples/](https://github.com/intezer/analyze-python-sdk/tree/master/examples) directory </longdescription>
</pkgmetadata>