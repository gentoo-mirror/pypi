<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># LaTeX Pre-rendering for Pelican`pelican-katex` integrates LaTeX rendering directly into the pelican generationprocess and eliminates the delay in displaying math you usually experience onthe web. It does so by hooking itself into docutils' reStructuredText parser aswell as the markdown package and processing the formulas with[KaTeX](https://github.com/KaTeX/KaTeX). The generated HTML pages only containthe finished HTML/MathML output. Therefore, you do not need to ship the KaTeXjavascript implementation with your website anymore and improve theaccessibility as well as the load time of your internet presence.For a demo visit this [blogpost](https://martenlienen.com/blog/gaussian-processes-are-bayesian-linear-regression/).Notice how all the formulas are just there. There is no loading and the websitedoes not even serve the javascript part of KaTeX.Note, that you still need to include the KaTeX stylesheets with your website, forexample```html&lt;link rel=&quot;stylesheet&quot;      href=&quot;https://cdn.jsdelivr.net/npm/katex/dist/katex.min.css&quot;      crossorigin=&quot;anonymous&quot;&gt;```## InstallationFirst of all, you need to install `nodejs` so that `pelican-katex` can runKaTeX. Then run `pip install pelican-katex` and add `&quot;pelican_katex&quot;` to the`PlUGINS` setting in your configuration file. Finally, remove the `katex.js``&lt;script&gt;` tag from your template and enjoy a lighter website and instantformulas.## Syntax```reStructuredText~~~~~~~~~~~~~~~~In rst you write inline math with the usual math role (:math:`f(x)`) orblock math with.. math::    \int \textrm{math block}.# markdownIn markdown you get inline math in between $ signs, like $f(x) = \sqrt{x}$.Note, that $ only creates a math environment if it is preceded by whitespaceor at the beginning of a block and followed by some non-whitespace character.This is necessary so that you can still write about the 5$ in your pocket. Towrite a dollar sign preceded by whitespace, escape it with a backslash as in\$10. Block math is triggered with$$\int \textrm{math block}.$$Math blocks can have linebreaks but no empty lines.```## ConfigurationThe plugin offers several configuration options that you can set in your`pelicanconf.py`.```python# nodejs binary path or command to run KaTeX with.# KATEX_NODEJS_BINARY = &quot;node&quot;# Path to the katex file to use. This project comes with version `0.10` of# katex but if you want to use a different one you can overwrite the path# here. To use a katex npm installation, set this to `&quot;katex&quot;`.# KATEX_PATH = &quot;/path/to/katex.js&quot;# By default, this plugin will redefine reStructuredText's `math` role and# directive. However, if you prefer to have leave the docutil's defaults# alone, you can use this to define a `katex` role for example.# KATEX_DIRECTIVE = &quot;katex&quot;# How long to wait for the initial startup of the rendering server. You can# increasing it but if startup takes longer than one second, something is# probably seriously broken.# KATEX_STARTUP_TIMEOUT = 1.0# Time budget in seconds per call to the rendering engine. 1 second should# be plenty since most renderings take less than 50ms.# KATEX_RENDER_TIMEOUT = 1.0# Define a preamble of LaTeX commands that will be prepended to any rendered# LaTeX code.# KATEX_PREAMBLE = None# Here you can pass a dictionary of default options that you want to run# KaTeX with. All possible options are listed on KaTeX's options page,# https://katex.org/docs/options.html.# KATEX = {#     # Abort the build instead of coloring broken math in red#     &quot;throwOnError&quot;: True# }```## PreambleThe `KATEX_PREAMBLE` option allows you to share definitions between all of yourmath blocks across all files. It takes a string of any LaTeX commands you wouldlike, for example```pythonKATEX_PREAMBLE = r&quot;&quot;&quot;\def\ceil#1{\lceil #1 \rceil}\def\floor#1{\lfloor #1 \rfloor}&quot;&quot;&quot;```If you have a large preamble, it might be nice to extract it into a `.tex` file.Note, that pelican will not be aware of changes made to that file in autoreloadmode and you will have to restart pelican manually.```pythonfrom pathlib import PathKATEX_PREAMBLE = Path(&quot;preamble.tex&quot;).read_text()```You can also add more definitions per file to the preamble with preamble-blocksthat do not produce any output.```reStructuredText~~~~~~~~~~~~~~~~.. math::   :preamble:   \def\pelican{\textrm{pelican}^2}This definition will be available in subsequent blocks.. math::   \sqrt{\pelican}or inline :math:`\pelican = 1`.# markdownIn markdown it is not as easy to define properties of blocks, so we chose tostart a preamble block with an @ such as$$@\def\pelican{\textrm{pelican}^2}$$which works just the same in blocks$$\sqrt{\pelican}$$or inline $\pelican = 1$.```</longdescription>
</pkgmetadata>