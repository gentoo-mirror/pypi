<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>##########cel-python##########..  image:: https://travis-ci.org/cloud-custodian/cel-python.svg?branch=master    :target: https://travis-ci.org/cloud-custodian/cel-python    :alt: Travis Build Status..  image:: https://requires.io/github/cloud-custodian/cel-python/requirements.svg?branch=master    :target: https://requires.io/github/cloud-custodian/cel-python/requirements/?branch=master    :alt: Requirements Status..  image:: https://img.shields.io/badge/license-Apache%202-blue.svg    :target: https://www.apache.org/licenses/LICENSE-2.0    :alt: Apache LicensePure Python implementation of Google Common Expression Language, https://opensource.google/projects/cel.    The Common Expression Language (CEL) implements common semantics for expression evaluation,    enabling different applications to more easily interoperate.    Key Applications    Security policy: organization have complex infrastructure and need common tooling to reason about the system as a whole    Protocols: expressions are a useful data type and require interoperability across programming languages and platforms.This implementation has minimal dependencies, runs quickly, and can be embedded into Python-based applications.Specifically, the intent is to be part of Cloud Custodian, C7N, as part of the security policy filter.Installation=============::    pip install cel-pythonYou now have the CEL run-time available to Python-based applications.Command Line============We can read JSON directly from stdin, making this a bit like ``jq``.::    % python -m celpy '.this.from.json * 3 + 3' &lt;&lt;EOF    heredoc&gt; {&quot;this&quot;: {&quot;from&quot;: {&quot;json&quot;: 13}}}    heredoc&gt; EOF    42It's also a desk calculator, like ``expr``, but with float values:::    % python -m celpy -n '355.0 / 113.0'    3.1415929203539825It's not as sophistcated as ``bc``.But, yes, this has a tiny advantage over ``python -c '355/113'``. Most notably, the abilityto embed Google CEL into other contexts where you don't *really* want Python's power.It's also capable of decision-making, like ``test``:::    % echo '{&quot;status&quot;: 3}' | python -m celpy -sb '.status == 0'    false    % echo $?    1We can provide a ``-a`` option to define objects with specific data types.This is particularly helpful for providing protobuf message definitions.::    python -m celpy -n --arg x:int=6 --arg y:int=7 'x*y'    42If you want to see details of evaluation, use ``-v``.::    python -m celpy -v -n '[2, 4, 6].map(n, n/2)'    ... a lot of output    [1, 2, 3]Library=======To follow the pattern defined in the Go implementation, there's a multi-stepprocess for compiling a CEL expression to create a runnable &quot;program&quot;. This programcan then be applied to argument values.::    &gt;&gt;&gt; import celpy    &gt;&gt;&gt; cel_source = &quot;&quot;&quot;    ... account.balance &gt;= transaction.withdrawal    ... || (account.overdraftProtection    ... &amp;&amp; account.overdraftLimit &gt;= transaction.withdrawal - account.balance)    ... &quot;&quot;&quot;    &gt;&gt;&gt; env = celpy.Environment()    &gt;&gt;&gt; ast = env.compile(cel_source)    &gt;&gt;&gt; prgm = env.program(ast)    &gt;&gt;&gt; activation = {    ...     &quot;account&quot;: celpy.json_to_cel({&quot;balance&quot;: 500, &quot;overdraftProtection&quot;: False}),    ...     &quot;transaction&quot;: celpy.json_to_cel({&quot;withdrawal&quot;: 600})    ... }    &gt;&gt;&gt; result = prgm.evaluate(activation)    &gt;&gt;&gt; result    BoolType(False)The Python classes are generally based on the object model in https://github.com/google/cel-goThese types semantics are slightly different from Python's native semantics.Type coercion is not generally done.Python ``//`` truncates toward negative infinity. Go (and CEL) ``/`` truncates toward zero.Development===========The parser is based on the grammars used by Go and C++, but processed through Python Lark.See https://github.com/google/cel-spec/blob/master/doc/langdef.mdhttps://github.com/google/cel-cpp/blob/master/parser/Cel.g4https://github.com/google/cel-go/blob/master/parser/gen/CEL.g4Notes=====CEL provides a number of runtime errors that are mapped to Python exceptions.- ``no_matching_overload``: this function has no overload for the types of the arguments.- ``no_such_field``: a map or message does not contain the desired field.- ``return error for overflow``: integer arithmetic overflowsThere are mapped to Python ``celpy.evaluation.EvalError`` exception. The args will havea message similar to the CEL error message, as well as an underlying Python exception.In principle CEL can pre-check types.However, see https://github.com/google/cel-spec/blob/master/doc/langdef.md#gradual-type-checking.Rather than try to pre-check types, we'll rely on Python's implementation.Contributing============See https://cloudcustodian.io/docs/contribute.htmlCode of Conduct===============This project adheres to the `Open Code of Conduct &lt;https://developer.capitalone.com/resources/code-of-conduct&gt;`_. Byparticipating, you are expected to honor this code.</longdescription>
</pkgmetadata>