<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Keras Metrics[![Build Status][BuildStatus]](https://travis-ci.org/netrack/keras-metrics)This package provides metrics for evaluation of Keras classification models.The metrics are safe to use for batch-based model evaluation.## InstallationTo install the package from the PyPi repository you can execute the followingcommand:```shpip install keras-metrics```## UsageThe usage of the package is simple:```pyimport kerasimport keras_metrics as kmmodel = models.Sequential()model.add(keras.layers.Dense(1, activation=&quot;sigmoid&quot;, input_dim=2))model.add(keras.layers.Dense(1, activation=&quot;softmax&quot;))model.compile(optimizer=&quot;sgd&quot;,              loss=&quot;binary_crossentropy&quot;,              metrics=[km.binary_precision(), km.binary_recall()])```Similar configuration for multi-label binary crossentropy:```pyimport kerasimport keras_metrics as kmmodel = models.Sequential()model.add(keras.layers.Dense(1, activation=&quot;sigmoid&quot;, input_dim=2))model.add(keras.layers.Dense(2, activation=&quot;softmax&quot;))# Calculate precision for the second label.precision = km.binary_precision(label=1)# Calculate recall for the first label.recall = km.binary_recall(label=0)model.compile(optimizer=&quot;sgd&quot;,              loss=&quot;binary_crossentropy&quot;,              metrics=[precision, recall])```Keras metrics package also supports metrics for categorical crossentropy andsparse categorical crossentropy:```pyimport keras_metrics as kmc_precision = km.categorical_precision()sc_precision = km.sparse_categorical_precision()# ...```## Tensorflow KerasTensorflow library provides the ```keras``` package as parts of its API, inorder to use ```keras_metrics``` with Tensorflow Keras, you are advised toperform model training with initialized global variables:```pyimport numpy as npimport keras_metrics as kmimport tensorflow as tfimport tensorflow.keras as kerasmodel = keras.Sequential()model.add(keras.layers.Dense(1, activation=&quot;softmax&quot;))model.compile(optimizer=&quot;sgd&quot;,              loss=&quot;binary_crossentropy&quot;,              metrics=[km.binary_true_positive()])x = np.array([[0], [1], [0], [1]])y = np.array([1, 0, 1, 0]# Wrap model.fit into the session with global# variables initialization.with tf.Session() as s:    s.run(tf.global_variables_initializer())    model.fit(x=x, y=y)```[BuildStatus]: https://travis-ci.org/netrack/keras-metrics.svg?branch=master</longdescription>
</pkgmetadata>