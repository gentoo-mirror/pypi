<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====================flask-session-captcha=====================.. image:: https://img.shields.io/pypi/v/flask-session-captcha.svg       :target: https://pypi.python.org/pypi/flask-session-captcha    :alt: Latest version    .. image:: https://img.shields.io/pypi/pyversions/flask-session-captcha.svg    :target: https://pypi.python.org/pypi/flask-session-captcha    :alt: Supported python versions    .. image:: https://img.shields.io/github/license/Tethik/flask-session-captcha.svg       :target: https://github.com/Tethik/flask-session-captcha/blob/master/LICENSEA captcha implemention for flask using `flask-sessionstore &lt;https://pypi.python.org/pypi/Flask-Sessionstore/&gt;`__ and `captcha &lt;https://pypi.python.org/pypi/captcha/&gt;`__ packages. Each captcha challenge answer is saved in the server side session of the challenged client.For now it supports only simple numeric image captchas, but more could easily be added from the underlying `captcha package &lt;https://pypi.python.org/pypi/captcha/&gt;`__.Requirements------------* `Flask &lt;https://pypi.python.org/pypi/Flask/&gt;`__* `flask-sessionstore &lt;https://pypi.python.org/pypi/Flask-Sessionstore/&gt;`__ with packages depending on which SESSION_TYPE you use. E.g. sqlalchemy requires flask-sqlalchemy.* `captcha &lt;https://pypi.python.org/pypi/captcha/&gt;`__Usage-----.. code-block:: python    import uuid    import logging    from flask import Flask, request, render_template    from flask_sessionstore import Session    from flask_session_captcha import FlaskSessionCaptcha    app = Flask(__name__)    app.config[&quot;SECRET_KEY&quot;] = uuid.uuid4()    app.config['CAPTCHA_ENABLE'] = True    app.config['CAPTCHA_LENGTH'] = 5    app.config['CAPTCHA_WIDTH'] = 160    app.config['CAPTCHA_HEIGHT'] = 60    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite://'    # In case you want to use another key in your session to store the captcha:    app.config['CAPTCHA_SESSION_KEY'] = 'captcha_image'    app.config['SESSION_TYPE'] = 'sqlalchemy'    Session(app)    captcha = FlaskSessionCaptcha(app)    @app.route('/', methods=['POST','GET'])    def some_route():        if request.method == &quot;POST&quot;:            if captcha.validate():                return &quot;success&quot;            else:                return &quot;fail&quot;        return render_template(&quot;form.html&quot;)    if __name__ == &quot;__main__&quot;:        app.debug = True        logging.getLogger().setLevel(&quot;DEBUG&quot;)        app.run()Template can look as follows. `captcha.validate()` will be default try to validate against a form input with name &quot;captcha&quot;... code-block:: html    &lt;form method=&quot;POST&quot;&gt;        {{ captcha() }} &lt;!-- This renders an &lt;img&gt; tag with the captcha img. --&gt;        &lt;input type=&quot;text&quot; name=&quot;captcha&quot;&gt;        &lt;input type=&quot;submit&quot;&gt;    &lt;/form&gt;It can also take a `css_class` argument to add classes to the generated DOM:.. code-block:: html    &lt;form method=&quot;POST&quot;&gt;        {{ captcha(css_class=&quot;captcha&quot;) }}        &lt;input type=&quot;text&quot; name=&quot;captcha&quot;&gt;        &lt;input type=&quot;submit&quot;&gt;    &lt;/form&gt;</longdescription>
</pkgmetadata>