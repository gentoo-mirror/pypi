<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>djWebdApp~~~~~~~~~`**Documentation**&lt;https://djwebdapp.rtfd.io&gt;`_Django is a great web application framework &quot;for perfectionists with deadlines&quot;.A dApp is an app running on the blockchain: a smart contract on which users cancall functions on.This module provides blockchain support for Django, for reading and/or writingthe blockchain, with the following features usable independently:* blockchain indexer* private key vault* blockchain writer* blockchain data normalization* multiple blockchain support (tezos &amp; ethereum so far)* inter-blockchain contract synchronisation* metamask authentication backend (TBA)In addition to these features, djWebdApp differenciates itself from indexerslike dipdup because it is extensible: it's just a module you add to your Djangoproject like any other Django App, in which you can add models, endpoints, andhave an admin interface for free, and so on, benefiting from the `vast Djangoecosystem of apps &lt;https://djangopackages.org/&gt;`_.Video demos===========- `Tezos tutorial demo  &lt;https://www.youtube.com/watch?v=quSX-gJ6eow&gt;`_- `Ethereum tutorial demo  &lt;https://www.youtube.com/watch?v=oTjvnjB_8Tc&gt;`_Getting started===============Django basics-------------If you are not familiar with the Django development framework, it isrecommended you follow `their tutorial first&lt;https://docs.djangoproject.com/en/4.0/intro/tutorial01/&gt;`_, even though youcan go through this tutorial copy/pasting your way.You may use the demo project or create your own and install djwebdapp there.Install-------To install djwebdapp with all optional dependencies::    pip install djwebdapp[all][binary]Don't use ``[binary]`` right there if you prefer to install compiled pythonpackages from your system package manager.See setup.py's extra_requires for other possibilities.Demo project------------For this tutorial, we'll use the ``djwebdapp_demo`` project:.. code-block:: bash    git clone https://yourlabs.io/oss/djwebdapp.git    cd djwebdapp    pip install --editable .[all][binary]    ./manage.py migrate    ./manage.py shell.. _Local blockchains:Local blockchains-----------------Instead of using mainnets for development, we're going to use a localblockchains, so that we can work completely locally.We provide a ``docker-compose.yml`` in the root directory of this repository,run ``docker-compose up`` to start it.As some of us will also want to convert this to `GitLab-CIservices &lt;https://docs.gitlab.com/ee/ci/services/&gt;`_\ , we'll refer to our servicesby hostname from now on, which is why we add the following to``/etc/hosts``::   127.0.0.1 tzlocal ethlocalYou should then have:- a local ethereum HTTP RPC API on ``ethlocal:8545`` with a WebSocket on  ``ethlocal:30303``,- a local tezos sandbox on ``tzlocal:8732`` which autobakes every second,  useable like geth development mode.See documentation for **Example contract deployment** in each blockchainspecific documentation pages for more pointers.Custom project--------------Instead of the demo project, you can also create your own project, instead ofthe first step of cloning do:* run ``django-admin startproject your_project_name``* in ``your_project_name/your_project_name/settings.py``, add to  ``INSTALLED_APPS``: ``'djwebdapp', 'djwebdapp_tezos',  'djwebdapp_ethereum'``... See ``djwebdapp_demo/settings.py`` for other  INSTALLED_APPS you can use* proceed with the next steps ``migrate`, ``createsuperuser``, ``runserver``  ...Tutorial--------Read documentation `online&lt;https://djwebdapp.rtfd.io&gt;`_ or in the ``docs/`` directory.</longdescription>
</pkgmetadata>