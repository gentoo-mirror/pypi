<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Wizard Web SSH[![ci](https://github.com/meramsey/wizardwebssh/workflows/ci/badge.svg)](https://github.com/meramsey/wizardwebssh/actions?query=workflow%3Aci)[![documentation](https://img.shields.io/badge/docs-mkdocs%20material-blue.svg?style=flat)](https://meramsey.github.io/wizardwebssh/)[![pypi version](https://img.shields.io/pypi/v/wizardwebssh.svg)](https://pypi.org/project/wizardwebssh/)[![gitter](https://badges.gitter.im/join%20chat.svg)](https://gitter.im/wizardwebssh/community)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Web based ssh client## Requirementswizardwebssh requires Python 3.6 or above.&lt;details&gt;&lt;summary&gt;To install Python 3.6, I recommend using &lt;a href=&quot;https://github.com/pyenv/pyenv&quot;&gt;&lt;code&gt;pyenv&lt;/code&gt;&lt;/a&gt;.&lt;/summary&gt;```bash# install pyenvgit clone https://github.com/pyenv/pyenv ~/.pyenv# setup pyenv (you should also put these three lines in .bashrc or similar)export PATH=&quot;${HOME}/.pyenv/bin:${PATH}&quot;export PYENV_ROOT=&quot;${HOME}/.pyenv&quot;eval &quot;$(pyenv init -)&quot;# install Python 3.6pyenv install 3.6.12# make it available globallypyenv global system 3.6.12```&lt;/details&gt;## InstallationWith `pip`:```bashpython3.6 -m pip install wizardwebssh```With [`pipx`](https://github.com/pipxproject/pipx):```bashpython3.6 -m pip install --user pipxpipx install --python python3.6 wizardwebssh```### IntroductionA simple web application to be used as an ssh client to connect to your ssh servers. It is written in Python, base on tornado, paramiko and xterm.js.### Features* SSH password authentication supported, including empty password.* SSH public-key authentication supported, including DSA RSA ECDSA Ed25519 keys.* SSH Agent Support* Sqlite DB support for SSH Config.* PyQT5 MultiTabbed Terminal Widget for embedding into PyQT5 apps.* Encrypted keys supported.* Two-Factor Authentication (time-based one-time password, Duo Push Auth) supported.* Fullscreen terminal supported.* Terminal window resizable.* Auto detect the ssh server's default encoding.* Modern browsers including Chrome, Firefox, Safari, Edge, Opera supported.### Preview![Login](https://gitlab.com/mikeramsey/wizardwebssh/raw/master/preview/login.png)![Terminal](https://gitlab.com/mikeramsey/wizardwebssh/raw/master/preview/terminal.png)![PyQT5 MultiTabbed Terminal Widget](https://gitlab.com/mikeramsey/wizardwebssh/raw/master/preview/multitabbedterminalwidget.png)![PyQT5 MultiTabbed DarkMode Terminal Widget](https://gitlab.com/mikeramsey/wizardwebssh/raw/master/preview/TabbedTerminal_Example1.png)![PyQT5 MultiTabbed DarkMode Terminal Widget Login](https://gitlab.com/mikeramsey/wizardwebssh/raw/master/preview/TabbedTerminal_Example2.png)### How it works```+---------+     http     +--------+    ssh    +-----------+| browser | &lt;==========&gt; | wizardwebssh | &lt;=======&gt; | ssh server|+---------+   websocket  +--------+    ssh    +-----------+```### Requirements* Python 2.7/3.4+### Quickstart1. Install this app, run command `pip install wizardwebssh`2. Start a webserver, run command `wssh`3. Open your browser, navigate to `127.0.0.1:8889`4. Input your data, submit the form.### Server options```bash# start a http server with specified listen address and listen portwssh --address='2.2.2.2' --port=8000# start a https server, certfile and keyfile must be passedwssh --certfile='/path/to/cert.crt' --keyfile='/path/to/cert.key'# missing host key policywssh --policy=reject# logging levelwssh --logging=debug# log to filewssh --log-file-prefix=main.log# more optionswssh --help```### Browser console```javascript// connect to your ssh serverwssh.connect(hostname, port, username, password, privatekey, passphrase, totp);// pass an object to wssh.connectvar opts = {  hostname: 'hostname',  port: 'port',  username: 'username',  password: 'password',  privatekey: 'the private key text',  passphrase: 'passphrase',  totp: 'totp'};wssh.connect(opts);// without an argument, wssh will use the form data to connectwssh.connect();// set a new encoding for client to usewssh.set_encoding(encoding);// reset encoding to use the default onewssh.reset_encoding();// send a command to the serverwssh.send('ls -l');```### Custom FontTo use custom font, put your font file in the directory `wizardwebssh/static/css/fonts/` and restart the server.### URL ArgumentsSupport passing arguments by url (query or fragment) like following examples:Passing form data (password must be encoded in base64, privatekey not supported)```bashhttp://localhost:8889/?hostname=xx&amp;username=yy&amp;password=str_base64_encoded```Passing a terminal background color```bashhttp://localhost:8889/#bgcolor=green```Passing a user defined title```bashhttp://localhost:8889/?title=my-ssh-server```Passing an encoding```bashhttp://localhost:8889/#encoding=gbk```Passing a command executed right after login```bashhttp://localhost:8889/?command=pwd```Passing a terminal type```bashhttp://localhost:8889/?term=xterm-256color```### Use Pyqt5 SSH Terminal WidgetStart up the wizardwebssh ssh service```class WizardWebssh(object):    &quot;&quot;&quot; Threading example class    The run() method will be started and it will run in the background    until the application exits.    &quot;&quot;&quot;    def __init__(self, interval=1):        &quot;&quot;&quot; Constructor        :type interval: int        :param interval: Check interval, in seconds        &quot;&quot;&quot;        self.interval = interval        thread = threading.Thread(target=self.run, args=())        thread.daemon = True  # Daemonize thread        thread.start()  # Start the execution    def run(self):        &quot;&quot;&quot; Method that runs forever &quot;&quot;&quot;        while True:            # Start WebSSH Service in background.            print('Starting SSH websocket server in the background')            import asyncio            asyncio.set_event_loop(asyncio.new_event_loop())            from wizardwebssh.main import main as wssh            wssh()            print('Stopped SSH websocket server in the background')            QApplication.processEvents()            time.sleep(self.interval)    wizardwebssh_service = WizardWebssh()    time.sleep(.300)```Embed the widget as desired```    win = TabbedTerminal()    win.show()```Review tabbedbterminal.py for full standalone working example of SSH terminal widget.### Use DockerStart up the app```docker-compose up```Tear down the app```docker-compose down```### TestsRequirements```pip install pytest pytest-cov codecov flake8 mock```Use unittest to run all tests```python -m unittest discover tests```Use pytest to run all tests```python -m pytest tests```### DeploymentRunning behind an Nginx server```bashwssh --address='127.0.0.1' --port=8889 --policy=reject``````nginx# Nginx config examplelocation / {    proxy_pass http://127.0.0.1:8889;    proxy_http_version 1.1;    proxy_read_timeout 300;    proxy_set_header Upgrade $http_upgrade;    proxy_set_header Connection &quot;upgrade&quot;;    proxy_set_header Host $http_host;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Real-PORT $remote_port;}```Running as a standalone server```bashwssh --port=8080 --sslport=4433 --certfile='cert.crt' --keyfile='cert.key' --xheaders=False --policy=reject```### Tips* For whatever deployment choice you choose, don't forget to enable SSL.* By default plain http requests from a public network will be either redirected or blocked and being redirected takes precedence over being blocked.* Try to use reject policy as the missing host key policy along with your verified known_hosts, this will prevent man-in-the-middle attacks. The idea is that it checks the system host keys file(&quot;~/.ssh/known_hosts&quot;) and the application host keys file(&quot;./known_hosts&quot;) in order, if the ssh server's hostname is not found or the key is not matched, the connection will be aborted.</longdescription>
</pkgmetadata>