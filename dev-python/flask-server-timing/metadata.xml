<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flask Server-Timing Header ExtensionA Flask extension to easily add the Server-Timing header to allow supported browsers to show backend performance metrics.From the [Mozilla Developer site](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing):&gt; The Server-Timing header communicates one or more metrics and descriptions for a given request-response cycle. It is used to surface any backend server timing metrics (e.g. database read/write, CPU time, file system access, etc.) in the developer tools in the user's browserThe Server-Timing specification is a [W3C draft](https://www.w3.org/TR/server-timing)## Installation```pip install flask-server-timing```Python versions 2.7 and 3.x are supported with Flask from version 0.10.1.## Browser SupportGenerally all newer, major browsers - excluding IE and Safari - support visualizing the Server-Timing header. For an up-to-date list with specific versions see the [Mozilla Developer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing#Browser_compatibility) site## Usage```pythonfrom flask import Flaskimport time# Import extensionfrom from server_timing import Timingapp = Flask(__name__)# To initialize the extension simply pass the app to it. If the app is in debug# mode or the force_debug parameter is True an after-request handler will be added# to write the actual header.t = Timing(app, force_debug=True)@app.route(&quot;/examples&quot;)def examples():    # explicitly calling start and stop before and after - keys need to be identical    t.start('done and done')    time.sleep(0.3)    t.stop('done and done')    # context manager support to avoid having to call start and stop explicitly    with t.time('context'):        time.sleep(0.2)    # decorated with name being the key    named_decoration()    # decorated without name so the function is the key    unnamed_decoration()@t.timer(name='named')def named_decoration():    time.sleep(0.4)@t.timerdef unnamed_decoration():    time.sleep(0.5)app.run(host=&quot;0.0.0.0&quot;,port=8080)```The `example/` directory also contains the following file showing how to time functions in other modules:```pythonimport time# before this file is imported make sure the extension has been initialized with the Flask appfrom server_timing import Timing as t@t.timerdef include():    time.sleep(0.1)```</longdescription>
</pkgmetadata>