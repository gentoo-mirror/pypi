<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========EasyData========.. image:: https://github.com/sitegroove/easydata/workflows/main/badge.svg?style=flat-square    :target: https://github.com/sitegroove/easydata/actions?query=workflow%3Amain    :alt: Build status.. image:: https://readthedocs.org/projects/easydata/badge/?version=latest    :target: https://easydata.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black    :alt: code style black.. image:: https://badge.fury.io/py/easydata.svg?style=flat-square    :target: https://pypi.org/project/easydata/    :alt: pypi package version:warning:    ``EasyData`` is in early stages of development; backwards incompatible    changes are possible without deprecation warning until beta status    is reached and therefore is not suitable to be used in production.Overview========``EasyData`` is data object pattern that provides transformation of item datafrom various sources (text, html, xml, json, dictionaries, lists and others) to apython dictionary with option to even combine different types of sources in orderto transform to dictionary.It uses component based mapping at the hearth and it's concept is similar to ORM-likemodels.Documentation=============Documentation is available online at https://easydata.readthedocs.io/ and in the ``docs``directory.The benefits of using EasyData are:-----------------------------------* focusing on the object-oriented business logic* uniform extraction logic between various sources* speeds up development process of creating a transformer/parser significantly* time reduction regarding maintenance since it offers clear readability and  clarity regarding what each components does.* extraction and parsing logic re-usability* high and low level option for parsing so that we don't hit any limitations* option to create custom components for specific needs if needed* defaults can be changed through configuration on various levels* creating test cases is a breeze since each component was created to be  used independently if needed.* autocomplete works for all parameters on public classes or methods.Applications:-------------* Web scraping. It can easily be integrated with scrapy or any other python  based solution or even your own.* Transforming *API* and *FEED* data from various formats.* Transforming/preparing data for *API* or *FEED*.* Transforming/preparing data for a database... note::    EasyData is not tied to any framework, nor it's a framework and it can be    easily added to existing projects.Requirements============* Python 3.8+* Works on Linux, Windows, macOS, BSDInstall=======The quick way::    pip install easydataSee the install section in the documentation athttps://easydata.readthedocs.io/en/latest/installation.html for more details.Example=======Bellow we will give just a simple example, so you can get some presentation,how ``EasyData`` works. For more advanced examples or tutorials please referto documentation.Lets make transformation on a following *HTML*:.. code-block:: python    test_html = &quot;&quot;&quot;        &lt;html&gt;            &lt;body&gt;                &lt;h2 class=&quot;name&quot;&gt;                    &lt;div class=&quot;brand&quot;&gt;EasyData&lt;/div&gt;                    Test Product Item                &lt;/h2&gt;                &lt;div id=&quot;description&quot;&gt;                    &lt;p&gt;Basic product info. EasyData product is newest                    addition to python &lt;b&gt;world&lt;/b&gt;&lt;/p&gt;                    &lt;ul&gt;                        &lt;li&gt;Color: Black&lt;/li&gt;                        &lt;li&gt;Material: Aluminium&lt;/li&gt;                    &lt;/ul&gt;                &lt;/div&gt;                &lt;div id=&quot;price&quot;&gt;Was 99.9&lt;/div&gt;                &lt;div id=&quot;sale-price&quot;&gt;49.9&lt;/div&gt;                &lt;div class=&quot;images&quot;&gt;                    &lt;img src=&quot;http://demo.com/img1.jpg&quot; /&gt;                    &lt;img src=&quot;http://demo.com/img2.jpg&quot; /&gt;                    &lt;img src=&quot;http://demo.com/img2.jpg&quot; /&gt;                &lt;/div&gt;                &lt;div class=&quot;stock&quot; available=&quot;Yes&quot;&gt;In Stock&lt;/div&gt;            &lt;/body&gt;        &lt;/html&gt;    &quot;&quot;&quot;Now lets create an ``ItemModel`` which will process *HTML* above and parse it toitem *dict*... code-block:: python    import easydata as ed    class ProductItemModel(ed.ItemModel):        item_name = ed.Text(            ed.pq('.name::text'),        )        item_brand = ed.Text(            ed.pq('.brand::text')        )        item_description = ed.Description(            ed.pq('#description::text')        )        item_price = ed.PriceFloat(            ed.pq('#price::text')        )        item_sale_price = ed.PriceFloat(            ed.pq('#sale-price::text')        )        item_color = ed.Feature(            ed.pq('#description::text'),            key='color'        )        item_stock = ed.Has(            ed.pq('.stock::attr(available)'),            contains=['yes']        )        item_images = ed.List(            ed.pq('.images img::items'),            parser=ed.UrlParser(                ed.pq('::src')            )        )        &quot;&quot;&quot;        Alternative with selecting src values in a first css query:            item_images = ed.ListParser(                ed.pq('.images img::src-items'),                parser=ed.UrlParser()            )        &quot;&quot;&quot;In example bellow we will demonstrate how newly created ``ProductItemModel``will parse provided *HTML* data into ``dict`` object... code-block:: python    &gt;&gt;&gt; item_model = ProductItemModel()    &gt;&gt;&gt; item_model.parse_item(test_html)Output:.. code-block:: python    {        'brand': 'EasyData',        'description': 'Basic product info. EasyData product is newest addition \                        to python world. Color: Black. Material: Aluminium.',        'color': 'Black',        'images': [            'http://demo.com/img1.jpg',            'http://demo.com/img2.jpg',            'http://demo.com/img3.jpg'        ],        'name': 'EasyData Test Product Item',        'price': 99.9,        'sale_price': 49.9,        'stock': True    }Contributing============**Yes please!**  We are always looking for contributions, additions and improvements.See https://easydata.readthedocs.io/en/latest/contributing.html for more details.</longdescription>
</pkgmetadata>