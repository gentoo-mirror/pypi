<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Garpix PageConvenient page structure with any context and template.It is suitable not only for a blog, but also for large sites with a complex presentation.Supports SEO.## QuickstartInstall with pip:```bashpip install garpix_page```Add the `garpix_page` and dependency packages to your `INSTALLED_APPS`:```python# settings.pyINSTALLED_APPS = [    'modeltranslation',    'polymorphic_tree',    'polymorphic',    'mptt',    # ... django.contrib.*    'django.contrib.sites',    'tabbed_admin',    'garpix_page',    # third-party and your apps]SITE_ID=1LANGUAGE_CODE = 'en'USE_DEFAULT_LANGUAGE_PREFIX = FalseLANGUAGES = (    ('en', 'English'),)TEMPLATES = [    {        'BACKEND': 'django.template.backends.django.DjangoTemplates',        'DIRS': ['templates'],        'APP_DIRS': True,        'OPTIONS': {            'context_processors': [                'django.template.context_processors.debug',                'django.template.context_processors.request',                'django.contrib.auth.context_processors.auth',                'django.contrib.messages.context_processors.messages',            ],        },    },]MIDDLEWARE = [    'django.middleware.locale.LocaleMiddleware']```Package not included migrations, set path to migration directory. Don't forget create this directory (`app/migrations/garpix_page/`) and place empty `__init__.py`:```app/migrations/app/migrations/__init__.py  # empty fileapp/migrations/garpix_page/__init__.py  # empty file```Add path to settings:```python# settings.pyMIGRATION_MODULES = {    'garpix_page': 'app.migrations.garpix_page',}```Run make migrations:```bashpython manage.py makemigrations```Migrate:```bashpython manage.py migrate```Add celery settings path to `settings.py`:```pythonGARPIXCMS_CELERY_SETTINGS = 'app.celery.app'```Now, you can create your models from `BasePage` and set template and context. See example below.### Important**Page (Model Page)** - model, subclass from `BasePage`. You create it yourself. There must be at least 1 descendant from BasePage.**Context** - includes `object` and `request`. It is a function that returns a dictionary from model instance. Values from the key dictionary can be used in the template.**Template** - standard Django template.### ExampleUrls:```python# app/urls.pyfrom django.contrib import adminfrom django.urls import path, re_pathfrom django.conf.urls.i18n import i18n_patternsfrom garpix_page.views.page import PageViewfrom multiurl import ContinueResolving, multiurlfrom django.http import Http404from django.conf import settingsfrom garpix_page.views.index import IndexViewurlpatterns = [    path('admin/', admin.site.urls),]urlpatterns += i18n_patterns(    multiurl(        path('', PageView.as_view()),        re_path(r'^(?P&lt;url&gt;.*?)$', PageView.as_view(), name='page'),        re_path(r'^(?P&lt;url&gt;.*?)/$', PageView.as_view(), name='page'),        path('', IndexView.as_view()),        catch=(Http404, ContinueResolving),    ),    prefix_default_language=settings.USE_DEFAULT_LANGUAGE_PREFIX,)```Models:```python# app/models/page.pyfrom django.db import modelsfrom garpix_page.models import BasePageclass Page(BasePage):    content = models.TextField(verbose_name='Content', blank=True, default='')    template = 'pages/default.html'    class Meta:        verbose_name = &quot;Page&quot;        verbose_name_plural = &quot;Pages&quot;        ordering = ('-created_at',)# app/models/category.pyfrom garpix_page.models import BasePageclass Category(BasePage):    template = 'pages/category.html'    def get_context(self, request=None, *args, **kwargs):        context = super().get_context(request, *args, **kwargs)        posts = Post.on_site.filter(is_active=True, parent=kwargs['object'])        context.update({            'posts': posts        })        return context    class Meta:        verbose_name = &quot;Category&quot;        verbose_name_plural = &quot;Categories&quot;        ordering = ('-created_at',)# app/models/post.pyfrom django.db import modelsfrom garpix_page.models import BasePageclass Post(BasePage):    content = models.TextField(verbose_name='Content', blank=True, default='')    template = 'pages/post.html'    class Meta:        verbose_name = &quot;Post&quot;        verbose_name_plural = &quot;Posts&quot;        ordering = ('-created_at',)```Admins:```python# app/admin/__init__.pyfrom .page import PageAdminfrom .category import CategoryAdminfrom .post import PostAdmin# app/admin/page.pyfrom ..models.page import Pagefrom django.contrib import adminfrom garpix_page.admin import BasePageAdmin@admin.register(Page)class PageAdmin(BasePageAdmin):    pass# app/admin/category.pyfrom ..models.category import Categoryfrom django.contrib import adminfrom garpix_page.admin import BasePageAdmin@admin.register(Category)class CategoryAdmin(BasePageAdmin):    pass# app/admin/post.pyfrom ..models.post import Postfrom django.contrib import adminfrom garpix_page.admin import BasePageAdmin@admin.register(Post)class PostAdmin(BasePageAdmin):    pass```Translations:```python# app/translation/__init__.pyfrom .page import PageTranslationOptionsfrom .category import CategoryTranslationOptionsfrom .post import PostTranslationOptions# app/translation/page.pyfrom modeltranslation.translator import TranslationOptions, registerfrom ..models import Page@register(Page)class PageTranslationOptions(TranslationOptions):    fields = ('content',)# app/translation/category.pyfrom modeltranslation.translator import TranslationOptions, registerfrom ..models import Category@register(Category)class CategoryTranslationOptions(TranslationOptions):    fields = []# app/translation/post.pyfrom modeltranslation.translator import TranslationOptions, registerfrom ..models import Post@register(Post)class PostTranslationOptions(TranslationOptions):    fields = ('content',)```Templates:```html# templates/base.html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    {% include 'garpix_page/seo.html' %}&lt;/head&gt;&lt;body&gt;{% include 'garpix_page/admin_toolbar.html' %}&lt;main&gt;    {% block content %}404{% endblock %}    {% block components %}        {% for component in components %}        {{ component.template }}        {% include component.template %}        {% endfor %}    {% endblock %}&lt;/main&gt;&lt;/body&gt;&lt;/html&gt;# templates/pages/default.html{% extends 'base.html' %}{% block content %}&lt;h1&gt;{{object.title}}&lt;/h1&gt;&lt;div&gt;    {{object.content|safe}}&lt;/div&gt;{% endblock %}# templates/pages/category.html{% extends 'base.html' %}{% block content %}&lt;h1&gt;{{object.title}}&lt;/h1&gt;{% for post in posts %}    &lt;div&gt;        &lt;h3&gt;&lt;a href=&quot;{{post.get_absolute_url}}&quot;&gt;{{post.title}}&lt;/a&gt;&lt;/h3&gt;    &lt;/div&gt;{% endfor %}{% endblock %}# templates/pages/post.html{% extends 'base.html' %}{% block content %}&lt;h1&gt;{{object.title}}&lt;/h1&gt;&lt;div&gt;    {{object.content|safe}}&lt;/div&gt;{% endblock %}```Now you can auth in admin panel and starting add pages.If you need to use a serializer whose model is this page, use the get_serializer() method to avoid circular imports.## Page permissionsIf you need to add login access to your model pages, add login_required static field to your model.To add some user permissions to page, add permissions  static field to your page model:```pythonclass Post(BasePage):    content = models.TextField(verbose_name='Content', blank=True, default='')    template = 'pages/post.html'    login_required = True    permissions = [IsAdminUser,]    class Meta:        verbose_name = &quot;Post&quot;        verbose_name_plural = &quot;Posts&quot;        ordering = ('-created_at',)```# APIYou can use garpix_page with SPA sites.Add to settings API_URL parameter:```pythonAPI_URL = 'api'```Add to `urls.py` this:```pythonurlpatterns += [    re_path(r'{}/page_models_list/$'.format(settings.API_URL), PageApiListView.as_view()),    re_path(r'{}/page/(?P&lt;slugs&gt;.*)$'.format(settings.API_URL), PageApiView.as_view()),]```And you can test it:`http://localhost:8000/api/page/` - home page (empty slug)`http://localhost:8000/api/page/another_page` - another page (slug)`http://localhost:8000/api/page/kategoriya/post-1` - sub page (slug)Example answer:```json{    &quot;page_model&quot;: &quot;Post&quot;,    &quot;init_state&quot;: {        &quot;object&quot;: {            &quot;id&quot;: 4,            &quot;title&quot;: &quot;post 1&quot;,            &quot;title_en&quot;: &quot;post 1&quot;,            &quot;is_active&quot;: true,            &quot;display_on_sitemap&quot;: true,            &quot;slug&quot;: &quot;post-1&quot;,            &quot;created_at&quot;: &quot;2021-06-21T19:39:49.749460Z&quot;,            &quot;updated_at&quot;: &quot;2021-06-21T19:39:49.749488Z&quot;,            &quot;seo_title&quot;: &quot;&quot;,            &quot;seo_title_en&quot;: null,            &quot;seo_keywords&quot;: &quot;&quot;,            &quot;seo_keywords_en&quot;: null,            &quot;seo_description&quot;: &quot;&quot;,            &quot;seo_description_en&quot;: &quot;&quot;,            &quot;seo_author&quot;: &quot;&quot;,            &quot;seo_author_en&quot;: null,            &quot;seo_og_type&quot;: &quot;website&quot;,            &quot;seo_image&quot;: null,            &quot;lft&quot;: 2,            &quot;rght&quot;: 3,            &quot;tree_id&quot;: 3,            &quot;level&quot;: 1,            &quot;content&quot;: &quot;example&quot;,            &quot;content_en&quot;: &quot;example&quot;,            &quot;polymorphic_ctype&quot;: 11,            &quot;parent&quot;: 3,            &quot;sites&quot;: [                1            ]        }    }}```## Error contextsModule consists of 3 reserved names for page models: `Page404`, `Page403` and `Page401`. These names are used for responses when corresponding error statuses are caught.Example answer on not found error:```json{    &quot;page_model&quot;: &quot;Page404&quot;,    &quot;init_state&quot;: {        &quot;object&quot;: null,        &quot;global&quot;: {}    }}```# ComponentsIt is possible to compose a page from components. You can do this in the same way as creating pages.Model```python# app/models/components.pyfrom django.db import modelsfrom garpix_page.models import BaseComponentclass TextComponent(BaseComponent):    text = models.TextField(verbose_name='Текст')    class Meta:        verbose_name = 'Текстовый компонент'        verbose_name_plural = 'Текстовые компоненты'    def get_context_data(self, request):  # add overriding this method to customize component's context        context = super().get_context_data(request)        return context```Admin```python# app/admin/components.pyfrom django.contrib import adminfrom garpix_page.admin.components.base_component import BaseComponentAdminfrom app.models import TextComponent@admin.register(TextComponent)class TextComponentAdmin(BaseComponentAdmin):    pass```Translations:```python# app/translation/components.pyfrom modeltranslation.translator import TranslationOptions, registerfrom app.models import TextComponent@register(TextComponent)class TextComponentTranslationOptions(TranslationOptions):    fields = ('text',)```BaseComponent has m2m field `pages` to specify on which pages the component should be displayed. Through table also has `view_order` field to specify the ordering of components at the page (ascending order).You can override `get_contex_data` method to add some info to component context.Example answer with some components:```json{    &quot;page_model&quot;: &quot;Page&quot;,    &quot;init_state&quot;: {        &quot;object&quot;: {            &quot;id&quot;: 1,            &quot;title&quot;: &quot;page&quot;,            &quot;title_en&quot;: &quot;page&quot;,            &quot;is_active&quot;: true,            &quot;display_on_sitemap&quot;: true,            &quot;slug&quot;: &quot;page&quot;,            &quot;created_at&quot;: &quot;2022-02-28T15:33:26.083166Z&quot;,            &quot;updated_at&quot;: &quot;2022-04-12T07:45:34.695803Z&quot;,            &quot;seo_title&quot;: &quot;&quot;,            &quot;seo_title_en&quot;: null,            &quot;seo_keywords&quot;: &quot;&quot;,            &quot;seo_keywords_en&quot;: null,            &quot;seo_description&quot;: &quot;&quot;,            &quot;seo_description_en&quot;: &quot;&quot;,            &quot;seo_author&quot;: &quot;&quot;,            &quot;seo_author_en&quot;: null,            &quot;seo_og_type&quot;: &quot;website&quot;,            &quot;seo_image&quot;: null,            &quot;lft&quot;: 1,            &quot;rght&quot;: 2,            &quot;tree_id&quot;: 1,            &quot;level&quot;: 0,            &quot;content&quot;: &quot;&quot;,            &quot;content_en&quot;: &quot;&quot;,            &quot;polymorphic_ctype&quot;: 10,            &quot;parent&quot;: null,            &quot;sites&quot;: [                1            ],            &quot;components&quot;: [                {                    &quot;component_model&quot;: &quot;TextComponent&quot;,                    &quot;object&quot;: {                        &quot;id&quot;: 1,                        &quot;title&quot;: &quot;Текстовый блок&quot;,                        &quot;title_en&quot;: &quot;Text block&quot;,                        &quot;created_at&quot;: &quot;2022-04-11T15:35:24.829579Z&quot;,                        &quot;updated_at&quot;: &quot;2022-04-11T15:37:09.898287Z&quot;,                        &quot;text_title&quot;: &quot;&quot;,                        &quot;text&quot;: &quot;Текст&quot;,                        &quot;text_en&quot;: &quot;Text&quot;,                        &quot;polymorphic_ctype&quot;: 22,                        &quot;pages&quot;: [                            1                        ]                    }                },                {                    &quot;component_model&quot;: &quot;TextDescriptionComponent&quot;,                    &quot;object&quot;: {                        &quot;id&quot;: 2,                        &quot;title&quot;: &quot;Описание рубрики&quot;,                        &quot;created_at&quot;: &quot;2022-04-12T07:45:15.341862Z&quot;,                        &quot;updated_at&quot;: &quot;2022-04-12T07:45:15.341886Z&quot;,                        &quot;text_title&quot;: &quot;&quot;,                        &quot;text&quot;: &quot;Текст&quot;,                        &quot;description&quot;: &quot;Описание&quot;,                        &quot;polymorphic_ctype&quot;: 21,                        &quot;pages&quot;: [                            1                        ]                    }                }            ]        },        &quot;global&quot;: {}    }}```Templates:If you want to override the base component template, add `template` parameter to component class:```python# app/models/components.pyfrom garpix_page.models import BaseComponentclass TextComponent(BaseComponent):    # ...    template = 'text_component.html'    # ...```In html you can use `component` object:```html# templates/pages/components/default.html&lt;h1&gt;{{ component.title }}&lt;/h1&gt;```You can use `gx_component` tag in section with the component to add edit functionality for admin in template:```html{% load gx_component %}&lt;section class=&quot;text-component&quot; {% gx_component component %}&gt;    ...&lt;/section&gt;```# Seo-templatesYou can create seo-template from admin panel. If you set `field` value to `Model title`, the template will be used for pages only for those model.In other cases the template will be used for pages with the `value` of the `field`.You can also specify the sites the template will be used on.You can add fields which will be used for template keys, using `get_seo_template_keys` method and `seo_template_keys_list` class method.```pythonclass Page(BasePage):    #...    def get_seo_template_keys(self):        seo_keys = super().get_seo_template_keys()        seo_keys.update({            'yourfield': self.yourfield        })        return seo_keys    @classmethod    def seo_template_keys_list(cls):        return [('yourfield', 'your field title')]```### Subpage url patternsSometimes we need to add static subpages like `create`, `update` etc. and it's not very convenient to create separate model/instance for each of them.For these purposes you can use subpage url patterns.Override `url_patterns` class method of `BasePage` model to add sub urls:Method `url_patterns` must return dict, which keys are names for models, which will be sent to api result; values are dicts with two keys: `verbose_name` - humanize model name, `pattern` - url pattern.Example:```pythonclass Category(BasePage):    # ...        @classmethod    def url_patterns(cls):        patterns = super().url_patterns()        patterns.update(            {                '{model_name}Create': {                    'verbose_name': 'Создание {model_title}',                    'pattern': '/create'                },                '{model_name}Reports': {                    'verbose_name': 'Отчеты для {model_title}',                    'pattern': '/reports'                }            }        )        return patterns```Now, if your project has `Category` page with url `category`, the project will also has two extra pages: `category/create` and `category/reports`.If you need to use some query parameters in you urls, you can add them like any url parameters:```pythonclass Category(BasePage):    # ...        @classmethod    def url_patterns(cls):        patterns = super().url_patterns()        patterns.update(            {                '{model_name}Create': {                    'verbose_name': 'Создание {model_title}',                    'pattern': '/create'                },                '{model_name}Reports': {                    'verbose_name': 'Отчеты для {model_title}',                    'pattern': '/reports'                },                '{model_name}Update': {                    'verbose_name': 'Редактирование {model_title}',                    'pattern': '/update/&lt;id&gt;'                }            }        )        return patterns```The given parameters will be stored in `subpage_params` field of page model, the key of pattern will be stored in `subpage_key`.Now you can use them in `get_context` to return some specific info depending on `subpage_key`:```pythonclass Category(BasePage):    template = 'pages/category.html'    def get_context(self, request=None, *args, **kwargs):        context = super().get_context(request, *args, **kwargs)        if self.subpage_key == '{model_name}Create':            context.update({                'some key': 'some text'            })        return context    @classmethod    def url_patterns(cls):        patterns = super().url_patterns()        patterns.update(            {                '{model_name}Create': {                    'verbose_name': 'Создание {model_title}',                    'pattern': '/create'                },                '{model_name}Update': {                    'verbose_name': 'Редактирование {model_title}',                    'pattern': '/update/&lt;id&gt;'                }            }        )        return patterns    class Meta:        verbose_name = &quot;Категория&quot;        verbose_name_plural = &quot;Категория&quot;        ordering = ('-created_at',)```Api result:```json{    &quot;page_model&quot;: &quot;CategoryCreate&quot;,    &quot;init_state&quot;: {        &quot;object&quot;: {            &quot;id&quot;: 16,            &quot;seo_title&quot;: &quot;title-1&quot;,            &quot;seo_keywords&quot;: &quot;&quot;,            &quot;seo_description&quot;: &quot;&quot;,            &quot;seo_author&quot;: &quot;&quot;,            &quot;seo_og_type&quot;: &quot;website&quot;,            &quot;title&quot;: &quot;title-1&quot;,            &quot;is_active&quot;: true,            &quot;display_on_sitemap&quot;: true,            &quot;slug&quot;: &quot;title&quot;,            &quot;created_at&quot;: &quot;2022-10-11T14:13:31.214166Z&quot;,            &quot;updated_at&quot;: &quot;2023-02-07T06:07:43.179306Z&quot;,            &quot;seo_image&quot;: null        },        &quot;components&quot;: [],        &quot;some key&quot;: &quot;some text&quot;,        &quot;global&quot;: {}    }}```You also can add extra key `permissions` to your url pattern to override permissions for subpage:```pythonfrom rest_framework.permissions import IsAuthenticatedclass Category(BasePage):    template = 'pages/category.html'    def get_context(self, request=None, *args, **kwargs):        context = super().get_context(request, *args, **kwargs)        if self.subpage_key == '{model_name}Create':            context.update({                'some key': 'some text'            })        return context    @classmethod    def url_patterns(cls):        patterns = super().url_patterns()        patterns.update(            {                '{model_name}Create': {                    'verbose_name': 'Создание {model_title}',                    'pattern': '/create'                },                '{model_name}Update': {                    'verbose_name': 'Редактирование {model_title}',                    'pattern': '/update/&lt;id&gt;',                    'permissions': [IsAuthenticated]                }            }        )        return patterns    class Meta:        verbose_name = &quot;Категория&quot;        verbose_name_plural = &quot;Категория&quot;        ordering = ('-created_at',)```## Important!Also, see this project for additional features (`BaseListPage`, `BaseSearchPage`, `sitemap.xml`, etc).# ChangelogSee [CHANGELOG.md](CHANGELOG.md).# ContributingSee [CONTRIBUTING.md](CONTRIBUTING.md).# License[MIT](LICENSE)</longdescription>
</pkgmetadata>