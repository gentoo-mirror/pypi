<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pdm-packer[![Tests](https://github.com/frostming/pdm-packer/workflows/Tests/badge.svg)](https://github.com/frostming/pdm-packer/actions?query=workflow%3Aci)[![pypi version](https://img.shields.io/pypi/v/pdm-packer.svg)](https://pypi.org/project/pdm-packer/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/frostming/pdm-packer/main.svg)](https://results.pre-commit.ci/latest/github/frostming/pdm-packer/main)[![pdm-managed](https://img.shields.io/badge/pdm-managed-blueviolet)](https://pdm.fming.dev)A PDM plugin that packs your packages into a zipapp## Requirementspdm-packer requires Python &gt;=3.7## InstallationOn PDM 1.6.4+, you can install the plugin directly by:```bash$ pdm plugin add pdm-packer```If you have installed PDM with the recommended tool `pipx`, add this plugin by:```bash$ pipx inject pdm pdm-packer```Or if you have installed PDM with `pip install --user pdm`, install with `pip` to the user site:```bash$ python -m pip install --user pdm-packer```Otherwise, install `pdm-packer` to the same place where PDM is located.## Usage```$ pdm pack [common-options] [pack-options]```**Common Options:**`-h, --help`&gt; show this help message and exit`-v, --verbose`&gt; -v for detailed output and -vv for more detailed`-g, --global`&gt; Use the global project, supply the project&gt; root with `-p` option`-p PROJECT_PATH, --project PROJECT_PATH`&gt; Specify another path as the project root,&gt; which changes the base of pyproject.toml and `__pypackages__`**Pack Options:**`-m MAIN, --main MAIN `&gt; Specify the console script entry point for&gt; the zipapp`-o OUTPUT, --output OUTPUT`&gt; Specify the output filename. By default the file name&gt; will be inferred from the project name.`-c, --compress`&gt; Compress files with the deflate method, no&gt; compress by default`--pyc, --compile`&gt; Compile source into pyc files`--no-py`&gt; Remove the .py files in favor of .pyc files`-i INTERPRETER, --interpreter INTERPRETER`&gt; The Python interpreter path, default: the&gt; project interpreter`--exe`&gt; Create an executable file. If the output file&gt; isn't given, the file name will end with&gt; .exe(Windows) or no suffix(Posix)See also: https://docs.python.org/3.9/library/zipapp.html## Examples```bash# Create with default name(&lt;project_name&gt;.pyz) and console_script as the __main__.pypdm pack# Create an executable filepdm pack --exe# Create with custom __main__.py and filenamepdm pack -o app.pyz -m app:main```## Caveats1. If the result zipapp contains binaries, it can only be deployed to the platforms with the same abi, any cross-abi usage of that app might expect a failure.2. Any console scripts except for what is given to `--main` will be lost.3. The .exe file is different from what is produced by `pyinstaller` in the way that it doesn't embed a Python interpreter. This means you have to install a Python with exactly the same version on the deployment platform.4. If you have code to run in your project, the project itself should be installed into `__pypackages__` as well. Make sure you have set a project name in `pyproject.toml`.## About executable zipappBy default, zipapp is created with `.pyz` suffix. On Windows, if you have associted `.pyz` files with Python program, you can run the app by double-clicking the file in the explorer. But if you create the app with `--exe` turn on, you can have a .exe file on Windows and an **executable** fileon Unix-like systems, so that the app can be executed without a `python` command prefixing it andno matter you assoicated the file exensition properly or not.## ChangelogSee [CHANGELOG.md](https://github.com/frostming/pdm-packer/blob/main/CHANGELOG.md)</longdescription>
</pkgmetadata>