<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Quick StartFoundry network provider plugin for Ape.Foundry is a development framework written in Rust for Ethereum that includes a local network implementation.## Dependencies- [python3](https://www.python.org/downloads) version 3.8 up to 3.11.- Foundry. See Foundry's [Installation](https://github.com/foundry-rs/foundry#installation) documentation for steps.## Installation### via `pip`You can install the latest release via [`pip`](https://pypi.org/project/pip/):```bashpip install ape-foundry```### via `setuptools`You can clone the repository and use [`setuptools`](https://github.com/pypa/setuptools) for the most up-to-date version:```bashgit clone https://github.com/ApeWorX/ape-foundry.gitcd ape-foundrypython3 setup.py install```## Quick UsageUse the `--network ethereum:local:foundry` command line flag to use the foundry network (if it's not already configured as the default).This network provider takes additional Foundry-specific configuration options. To use them, add these configs in your project's `ape-config.yaml`:```yamlfoundry:  port: 8555```To select a random port, use a value of &quot;auto&quot;:```yamlfoundry:  port: auto```This is useful for multiprocessing and starting up multiple providers.You can also adjust the request timeout setting:```yamlfoundry:  request_timeout: 20  # Defaults to 30  fork_request_timeout: 600  # Defaults to 300```## Mainnet ForkThe `ape-foundry` plugin also includes a mainnet fork provider.It requires using another provider that has access to mainnet.Use it in most commands like this:```bashape console --network :mainnet-fork:foundry```Specify the upstream archive-data provider in your `ape-config.yaml`:```yamlfoundry:  fork:    ethereum:      mainnet:        upstream_provider: alchemy```Otherwise, it defaults to the default mainnet provider plugin.You can also specify a `block_number` and `evm_version`.If the block number is specified, but no EVM version is specified, it is automatically set based on the block height for known networks.**NOTE**: Make sure you have the upstream provider plugin installed for ape.```bashape plugins install alchemy```## Remote Anvil NodeTo connect to a remote anvil node, set up your config like this:```yamlfoundry:  host: https://anvil.example.com```Now, instead of launching a local process, it will attempt to connect to the remote anvil node and use this plugin as the ape interface.## Impersonate AccountsYou can impersonate accounts using the `ape-foundry` plugin.To impersonate an account, do the following:```pythonimport pytest@pytest.fixturedef whale(accounts):    return accounts[&quot;example.eth&quot;]```To transact, your impersonated account must have a balance.You can achieve this by using a forked network and impersonating an account with a balance.Alternatively, you can set your node's base fee and priority fee to `0`.To programtically set an account's balance, do the following:```pythonfrom ape import accountsaccount = accounts[&quot;example.eth&quot;]account.balance = &quot;1000 ETH&quot;  # This calls `anvil_setBalance` under-the-hood.```## Base Fee and Priority FeeConfigure your node's base fee and priority fee using the `ape-config.yaml` file.```yamlfoundry:  base_fee: 0  priority_fee: 0```</longdescription>
</pkgmetadata>