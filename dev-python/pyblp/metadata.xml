<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>An overview of the model, examples, references, and other documentation can be found on `Read the Docs &lt;https://pyblp.readthedocs.io/en/stable/&gt;`_... docs-startPyBLP is a Python 3 implementation of routines for estimating the demand for differentiated products with BLP-type random coefficients logit models. This package was created by `Jeff Gortmaker &lt;https://jeffgortmaker.com/&gt;`_ in collaboration with `Chris Conlon &lt;https://chrisconlon.github.io/&gt;`_.Development of the package has been guided by the work of many researchers and practitioners. For a full list of references, including the original work of `Berry, Levinsohn, and Pakes (1995) &lt;https://ideas.repec.org/a/ecm/emetrp/v63y1995i4p841-90.html&gt;`_, refer to the `references &lt;https://pyblp.readthedocs.io/en/stable/references.html&gt;`_ section of the documentation.Citation--------If you use PyBLP in your research, we ask that you also cite `Conlon and Gortmaker (2020) &lt;https://jeffgortmaker.com/files/pyblp.pdf&gt;`_, which describes the advances implemented in the package.::    @article{PyBLP,        author = {Conlon, Christopher and Gortmaker, Jeff},        title = {Best practices for differentiated products demand estimation with {PyBLP}},        journal = {The RAND Journal of Economics},        volume = {51},        number = {4},        pages = {1108-1161},        doi = {https://doi.org/10.1111/1756-2171.12352},        url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/1756-2171.12352},        eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1111/1756-2171.12352},        year = {2020}    }If you use PyBLP's micro moments functionality, we ask that you also cite `Conlon and Gortmaker (2023) &lt;https://jeffgortmaker.com/files/micro.pdf&gt;`_, which describes the standardized framework implemented by PyBLP for incorporating micro data into BLP-style estimation.::    @misc{MicroPyBLP,        author = {Conlon, Christopher and Gortmaker, Jeff},        title = {Incorporating micro data into differentiated products demand estimation with {PyBLP}},        note = {Working paper},        year = {2023}    }Installation------------The PyBLP package has been tested on `Python &lt;https://www.python.org/downloads/&gt;`_ versions 3.6 through 3.9. The `SciPy instructions &lt;https://scipy.org/install/&gt;`_ for installing related packages is a good guide for how to install a scientific Python environment. A good choice is the `Anaconda Distribution &lt;https://www.anaconda.com/download&gt;`_, since it comes packaged with the following PyBLP dependencies: `NumPy &lt;https://numpy.org/&gt;`_, `SciPy &lt;https://scipy.org/&gt;`_, `SymPy &lt;https://www.sympy.org/en/index.html&gt;`_, and `Patsy &lt;https://patsy.readthedocs.io/en/latest/&gt;`_. For absorption of high dimension fixed effects, PyBLP also depends on its companion package `PyHDFE &lt;https://github.com/jeffgortmaker/pyhdfe&gt;`_, which will be installed when PyBLP is installed.However, PyBLP may not work with old versions of its dependencies. You can update PyBLP's Anaconda dependencies with::    conda update numpy scipy sympy patsyYou can update PyHDFE with::    pip install --upgrade pyhdfeYou can install the current release of PyBLP with `pip &lt;https://pip.pypa.io/en/latest/&gt;`_::    pip install pyblpYou can upgrade to a newer release with the ``--upgrade`` flag::    pip install --upgrade pyblpIf you lack permissions, you can install PyBLP in your user directory with the ``--user`` flag::    pip install --user pyblpAlternatively, you can download a wheel or source archive from `PyPI &lt;https://pypi.org/project/pyblp/&gt;`_. You can find the latest development code on `GitHub &lt;https://github.com/jeffgortmaker/pyblp/&gt;`_ and the latest development documentation `here &lt;https://pyblp.readthedocs.io/en/latest/&gt;`_.Other Languages---------------Once installed, PyBLP can be incorporated into projects written in many other languages with the help of various tools that enable interoperability with Python.For example, the `reticulate &lt;https://github.com/rstudio/reticulate&gt;`_ package makes interacting with PyBLP in R straightforward (when supported, Python objects can be converted to their R counterparts with the ``py_to_r`` function, which needs to be used manually because we set ``convert=FALSE`` to get rid of errors about trying to automatically convert unsupported objects)::    library(reticulate)    pyblp &lt;- import(&quot;pyblp&quot;, convert=FALSE)    pyblp$options$flush_output &lt;- TRUESimilarly, `PyCall &lt;https://github.com/JuliaPy/PyCall.jl&gt;`_ can be used to incorporate PyBLP into a Julia workflow::    using PyCall    pyblp = pyimport(&quot;pyblp&quot;)The `py command &lt;https://www.mathworks.com/help/matlab/call-python-libraries.html&gt;`_ serves a similar purpose in MATLAB::   py.pyblpFeatures--------- R-style formula interface- Bertrand-Nash supply-side moments- Multiple equation GMM- Demographic interactions- Product-specific demographics- Flexible micro moments that can match statistics based on survey data- Support for micro moments based on second choice data- Support for optimal micro moments that match micro data scores- Fixed effect absorption- Nonlinear functions of product characteristics- Concentrating out linear parameters- Flexible random coefficient distributions- Parameter bounds and constraints- Random coefficients nested logit (RCNL)- Approximation to the pure characteristics model- Varying nesting parameters across groups- Logit and nested logit benchmarks- Classic BLP instruments- Differentiation instruments- Optimal instruments- Adjustments for simulation error- Tests of overidentifying and model restrictions- Parametric boostrapping post-estimation outputs- Elasticities and diversion ratios- Marginal costs and markups- Passthrough calculations- Profits and consumer surplus- Newton and fixed point methods for computing pricing equilibria- Merger simulation- Custom counterfactual simulation- Synthetic data construction- SciPy or Artleys Knitro optimization- Fixed point acceleration- Monte Carlo, quasi-random sequences, quadrature, and sparse grids- Importance sampling- Custom optimization and iteration routines- Robust and clustered errors- Linear or log-linear marginal costs- Partial ownership matrices- Analytic gradients- Finite difference Hessians- Market-by-market parallelization- Extended floating point precision- Robust error handlingBugs and Requests-----------------Please use the `GitHub issue tracker &lt;https://github.com/jeffgortmaker/pyblp/issues&gt;`_ to submit bugs or to request features.</longdescription>
</pkgmetadata>