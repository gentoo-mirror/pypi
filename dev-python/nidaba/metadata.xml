<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Overview========.. image:: https://travis-ci.org/OpenPhilology/nidaba.svg        :target: https://travis-ci.org/OpenPhilology/nidabaNidaba is the central controller for the entire OGL OCR pipeline. It overseesand automates the process of converting raw images into citable collections ofdigitized texts.It offers the following functionality:- Grayscale Conversion- Binarization utilizing `Sauvola  &lt;http://www.mediateam.oulu.fi/publications/pdf/24.p&gt;`__ adaptive  thresholding, Otsu, or ocropus's nlbin algorithm- Deskewing- Dewarping- Integration of `tesseract &lt;http://code.google.com/p/tesseract-ocr/&gt;`_,  `kraken &lt;http://mittagessen.github.io/kraken&gt;`_, and `ocropus  &lt;http://github.com/tmbdev/ocropy&gt;`_ OCR engines- Page segmentation from the aforementioned OCR packages- Various postprocessing utilities like spell-checking, merging of multiple  results, and ground truth comparison.As it is designed to use a common storage medium on network attached storageand the `celery &lt;http://celeryproject.org&gt;`__ distributed task queue it scalesnicely to multi-machine clusters.Build=====To easiest way to install the latest stable(-ish) nidaba is from PyPi:::    $ pip install nidabaor run:::    $ pip install .in the git repository for the bleeding edge development version.Some useful tasks have external dependencies. A good start is:::    # apt-get install libtesseract3 tesseract-ocr-eng libleptonica-dev libleptTests=====Per default no dictionaries and OCR models necessary to runs the tests areinstalled. To download the necessary files run:::    $ python setup.py download::    $ python setup.py nosetestsTests for modules that call external programs, at the time only tesseract,ocropus, and kraken, will be skipped if these aren't installed.Running=======First edit (the installed) nidaba.yaml and celery.yaml to fit your needs. Havea look at the `docs &lt;https:///mittagessen.github.io/nidaba&gt;`__ if you haven'tset up a celery-based application before.Then start up the celery daemon with something like:::    $ celery -A nidaba workerNext jobs can be added to the pipeline using the nidaba executable:::    $ nidaba batch -b otsu -l tesseract -o tesseract:eng -- ./input.tiff    Preparing filestore             [✓]    Building batch                  [✓]    951c57e5-f8a0-432d-8d77-8a2e27fff53cUsing the return code the current state of the job can be retrieved:::    $ nidaba status 25d79a54-9d4a-4939-acb6-8e168d6dbc7c    PENDINGWhen the job has been processed the status command will return a list of pathscontaining the final output:::    $ nidaba status 951c57e5-f8a0-432d-8d77-8a2e27fff53c    SUCCESS    14.tif → .../input_img.rgb_to_gray_binarize.otsu_ocr.tesseract_grc.tif.hocrDocumentation=============Want to learn more? `Read theDocs &lt;https:///openphilology.github.io/nidaba/&gt;`__</longdescription>
</pkgmetadata>