<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![codecov](https://codecov.io/gh/neuro-ml/imops/branch/master/graph/badge.svg)](https://codecov.io/gh/neuro-ml/imops)[![pypi](https://img.shields.io/pypi/v/imops?logo=pypi&amp;label=PyPi)](https://pypi.org/project/imops/)![License](https://img.shields.io/github/license/neuro-ml/imops)[![PyPI - Downloads](https://img.shields.io/pypi/dm/imops)](https://pypi.org/project/imops/)# ImopsEfficient parallelizable algorithms for multidimensional arrays to speed up your data pipelines. Docs are [here](https://neuro-ml.github.io/imops/).# Install```shellpip install imops  # default install with Cython backendpip install imops[numba]  # additionally install Numba backend```# Features## Fast Radon transform```pythonfrom imops import radon, inverse_radon```## Fast linear/bilinear/trilinear zoom```pythonfrom imops import zoom, zoom_to_shape# fast zoom with optional fallback to scipy's implementationy = zoom(x, 2, axis=[0, 1])# a handy function to zoom the array to a given shape # without the need to compute the scale factorz = zoom_to_shape(x, (4, 120, 67))```Works faster only for `ndim&lt;=3, dtype=float32 or float64, output=None, order=1, mode='constant', grid_mode=False`## Fast 1d linear interpolation```pythonfrom imops import interp1d  # same as `scipy.interpolate.interp1d````Works faster only for `ndim&lt;=3, dtype=float32 or float64, order=1 or 'linear'`## Fast binary morphology```pythonfrom imops import binary_dilation, binary_erosion, binary_opening, binary_closing```These functions mimic `scikit-image` counterparts## Padding```pythonfrom imops import pad, pad_to_shapey = pad(x, 10, axis=[0, 1])# `ratio` controls how much padding is applied to left side:# 0 - pad from right# 1 - pad from left# 0.5 - distribute the padding equallyz = pad_to_shape(x, (4, 120, 67), ratio=0.25)```## Cropping```pythonfrom imops import crop_to_shape# `ratio` controls the position of the crop# 0 - crop from right# 1 - crop from left# 0.5 - crop from the middlez = crop_to_shape(x, (4, 120, 67), ratio=0.25)```## Labeling```pythonfrom imops import label# same as `skimage.measure.label`labeled, num_components = label(x, background=1, return_num=True)```# BackendsFor `zoom`, `zoom_to_shape`, `interp1d`, `radon`, `inverse_radon` you can specify which backend to use. Backend can be specified by a string or by an instance of `Backend` class. The latter allows you to customize some backend options:```pythonfrom imops import Cython, Numba, Scipy, zoomy = zoom(x, 2, backend='Cython')y = zoom(x, 2, backend=Cython(fast=False))  # same as previousy = zoom(x, 2, backend=Cython(fast=True))  # -ffast-math compiled cython backendy = zoom(x, 2, backend=Scipy())  # use scipy original implementationy = zoom(x, 2, backend='Numba')y = zoom(x, 2, backend=Numba(parallel=True, nogil=True, cache=True))  # same as previous```Also backend can be specified globally or locally:```pythonfrom imops import imops_backend, set_backend, zoomset_backend('Numba')  # sets Numba as default backendwith imops_backend('Cython'):  # sets Cython backend via context manager    zoom(x, 2)```Note that for `Numba` backend setting `num_threads` argument has no effect for now and you should use `NUMBA_NUM_THREADS` environment variable.Available backends:|                   | Scipy   | Cython  | Numba   ||-------------------|---------|---------|---------|| `zoom`            | &amp;check; | &amp;check; | &amp;check; || `zoom_to_shape`   | &amp;check; | &amp;check; | &amp;check; || `interp1d`        | &amp;check; | &amp;check; | &amp;check; || `radon`           | &amp;cross; | &amp;check; | &amp;cross; || `inverse_radon`   | &amp;cross; | &amp;check; | &amp;cross; || `binary_dilation` | &amp;check; | &amp;check; | &amp;cross; || `binary_erosion`  | &amp;check; | &amp;check; | &amp;cross; || `binary_closing`  | &amp;check; | &amp;check; | &amp;cross; || `binary_opening`  | &amp;check; | &amp;check; | &amp;cross; |# AcknowledgementsSome parts of our code for radon/inverse radon transform as well as the code for linear interpolation are inspired bythe implementations from [`scikit-image`](https://github.com/scikit-image/scikit-image) and [`scipy`](https://github.com/scipy/scipy).Also we used [`fastremap`](https://github.com/seung-lab/fastremap) and [`cc3d`](https://github.com/seung-lab/connected-components-3d) out of the box.</longdescription>
</pkgmetadata>