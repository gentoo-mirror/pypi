<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Knock Knock[![made-with-python](https://img.shields.io/badge/Made%20with-Python-red.svg)](#python) [![Downloads](https://pepy.tech/badge/knockknock)](https://pepy.tech/project/knockknock) [![Downloads](https://pepy.tech/badge/knockknock/month)](https://pepy.tech/project/knockknock/month) [![GitHub stars](https://img.shields.io/github/stars/huggingface/knockknock.svg?style=social&amp;label=Star&amp;maxAge=1000)](https://github.com/huggingface/knockknock/stargazers/)A small library to get a notification when your training is complete or when it crashes during the process with two additional lines of code.When training deep learning models, it is common to use early stopping. Apart from a rough estimate, it is difficult to predict when the training will finish. Thus, it can be interesting to set up automatic notifications for your training. It is also interesting to be notified when your training crashes in the middle of the process for unexpected reasons.## InstallationInstall with `pip` or equivalent.```bashpip install knockknock```This code has only been tested with Python &gt;= 3.6.## UsageThe library is designed to be used in a seamless way, with minimal code modification: you only need to add a decorator on top your main function call. The return value (if there is one) is also reported in the notification.There are currently *twelve* ways to setup notifications:|               Platform                |                                   External Contributors                                   || :-----------------------------------: | :---------------------------------------------------------------------------------------: ||            [email](#email)            |                                             -                                             ||            [Slack](#slack)            |                                             -                                             ||         [Telegram](#telegram)         |                                             -                                             ||  [Microsoft Teams](#microsoft-teams)  |                           [@noklam](https://github.com/noklam)                            || [Text Message](&lt;#text-message-(sms)&gt;) |                 [@abhishekkrthakur](https://github.com/abhishekkrthakur)                  ||          [Discord](#discord)          |                         [@watkinsm](https://github.com/watkinsm)                          ||   [Desktop](#desktop-notification)    | [@atakanyenel](https://github.com/atakanyenel) [@eyalmazuz](https://github.com/eyalmazuz) ||           [Matrix](#matrix)           |                           [@jcklie](https://github.com/jcklie)                            ||     [Amazon Chime](#amazon-chime)     |                     [@prabhakar267](https://github.com/prabhakar267)                      ||         [DingTalk](#dingtalk)         |                         [@wuutiing](https://github.com/wuutiing)                          ||       [RocketChat](#rocketchat)       |                            [@radao](https://github.com/radao)                             ||      [WeChat Work](#wechat-work)      |                             [@jcyk](https://github.com/jcyk)                              |### EmailThe service relies on [Yagmail](https://github.com/kootenpv/yagmail) a GMAIL/SMTP client. You'll need a gmail email address to use it (you can setup one [here](https://accounts.google.com), it's free). I recommend creating a new one (rather than your usual one) since you'll have to modify the account's security settings to allow the Python library to access it by [Turning on less secure apps](https://devanswers.co/allow-less-secure-apps-access-gmail-account/).#### Python```pythonfrom knockknock import email_sender@email_sender(recipient_emails=[&quot;&lt;your_email@address.com&gt;&quot;, &quot;&lt;your_second_email@address.com&gt;&quot;], sender_email=&quot;&lt;grandma's_email@gmail.com&gt;&quot;)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock email \    --recipient-emails &lt;your_email@address.com&gt;,&lt;your_second_email@address.com&gt; \    --sender-email &lt;grandma's_email@gmail.com&gt; \    sleep 10```If `sender_email` is not specified, then the first email in `recipient_emails` will be used as the sender's email.Note that launching this will asks you for the sender's email password. It will be safely stored in the system keyring service through the [`keyring` Python library](https://pypi.org/project/keyring/).### SlackSimilarly, you can also use Slack to get notifications. You'll have to get your Slack room [webhook URL](https://api.slack.com/incoming-webhooks#create_a_webhook) and optionally your [user id](https://api.slack.com/methods/users.identity) (if you want to tag yourself or someone else).#### Python```pythonfrom knockknock import slack_senderwebhook_url = &quot;&lt;webhook_url_to_your_slack_room&gt;&quot;@slack_sender(webhook_url=webhook_url, channel=&quot;&lt;your_favorite_slack_channel&gt;&quot;)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {'loss': 0.9} # Optional return value```You can also specify an optional argument to tag specific people: `user_mentions=[&lt;your_slack_id&gt;, &lt;grandma's_slack_id&gt;]`.#### Command-line```bashknockknock slack \    --webhook-url &lt;webhook_url_to_your_slack_room&gt; \    --channel &lt;your_favorite_slack_channel&gt; \    sleep 10```You can also specify an optional argument to tag specific people: `--user-mentions &lt;your_slack_id&gt;,&lt;grandma's_slack_id&gt;`.### TelegramYou can also use Telegram Messenger to get notifications. You'll first have to create your own notification bot by following the three steps provided by Telegram [here](https://core.telegram.org/bots#6-botfather) and save your API access `TOKEN`.Telegram bots are shy and can't send the first message so you'll have to do the first step. By sending the first message, you'll be able to get the `chat_id` required (identification of your messaging room) by visiting `https://api.telegram.org/bot&lt;YourBOTToken&gt;/getUpdates` and get the `int` under the key `message['chat']['id']`.#### Python```pythonfrom knockknock import telegram_senderCHAT_ID: int = &lt;your_messaging_room_id&gt;@telegram_sender(token=&quot;&lt;your_api_token&gt;&quot;, chat_id=CHAT_ID)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock telegram \    --token &lt;your_api_token&gt; \    --chat-id &lt;your_messaging_room_id&gt; \    sleep 10```### Microsoft TeamsThanks to [@noklam](https://github.com/noklam), you can also use Microsoft Teams to get notifications. You'll have to get your Team Channel [webhook URL](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using).#### Python```pythonfrom knockknock import teams_sender@teams_sender(token=&quot;&lt;webhook_url_to_your_teams_channel&gt;&quot;)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock teams \    --webhook-url &lt;webhook_url_to_your_teams_channel&gt; \    sleep 10```You can also specify an optional argument to tag specific people: `user_mentions=[&lt;your_teams_id&gt;, &lt;grandma's_teams_id&gt;]`.### Text Message (SMS)Thanks to [@abhishekkrthakur](https://github.com/abhishekkrthakur), you can use Twilio to send text message notifications. You'll have to setup a [Twilio](www.twilio.com) account [here](https://www.twilio.com/try-twilio), which is paid service with competitive prices: for instance in the US, getting a new number and sending one text message through this service respectively cost $1.00 and $0.0075. You'll need to get (a) a phone number, (b) your [account SID](https://www.twilio.com/docs/glossary/what-is-a-sid) and (c) your [authentification token](https://www.twilio.com/docs/iam/access-tokens). Some detail [here](https://www.twilio.com/docs/iam/api/account).#### Python```pythonfrom knockknock import sms_senderACCOUNT_SID: str = &quot;&lt;your_account_sid&gt;&quot;AUTH_TOKEN: str = &quot;&lt;your_auth_token&gt;&quot;@sms_sender(account_sid=ACCOUNT_SID, auth_token=AUTH_TOKEN, recipient_number=&quot;&lt;recipient's_number&gt;&quot;, sender_number=&quot;&lt;sender's_number&gt;&quot;)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock sms \    --account-sid &lt;your_account_sid&gt; \    --auth-token &lt;your_account_auth_token&gt; \    --recipient-number &lt;recipient_number&gt; \    --sender-number &lt;sender_number&gt;    sleep 10```### DiscordThanks to [@watkinsm](https://github.com/watkinsm), you can also use Discord to get notifications. You'll just have to get your Discord channel's [webhook URL](https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks).#### Python```pythonfrom knockknock import discord_senderwebhook_url = &quot;&lt;webhook_url_to_your_discord_channel&gt;&quot;@discord_sender(webhook_url=webhook_url)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock discord \    --webhook-url &lt;webhook_url_to_your_discord_channel&gt; \    sleep 10```### Desktop NotificationYou can also get notified from a desktop notification. It is currently only available for MacOS and Linux and Windows 10.For Linux it uses the nofity-send command which uses libnotify, In order to use libnotify, you have to install a notification server. Cinnamon, Deepin, Enlightenment, GNOME, GNOME Flashback and KDE Plasma use their own implementations to display notifications. In other desktop environments, the notification server needs to be launched using your WM's/DE's &quot;autostart&quot; option.#### Python```pythonfrom knockknock import desktop_sender@desktop_sender(title=&quot;Knockknock Desktop Notifier&quot;)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {&quot;loss&quot;: 0.9}```#### Command Line```bashknockknock desktop \    --title 'Knockknock Desktop Notifier' \    sleep 2```### MatrixThanks to [@jcklie](https://github.com/jcklie), you can send notifications via [Matrix](https://matrix.org/). The homeserver is theserver on which your user that will send messages is registered. Do not forget the schema for the URL (`http` or `https`).You'll have to get the access token for a bot or your own user. The easiest way to obtain it is to look into Riot lookingin the riot settings, `Help &amp; About`, down the bottom is: `Access Token:&lt;click to reveal&gt;`. You also need to specify aroom alias to which messages are sent. To obtain the alias in Riot, create a room you want to use, then open the roomsettings under `Room Addresses` and add an alias.#### Python```pythonfrom knockknock import matrix_senderHOMESERVER = &quot;&lt;url_to_your_home_server&gt;&quot; # e.g. https://matrix.orgTOKEN = &quot;&lt;your_auth_token&gt;&quot;              # e.g. WiTyGizlr8ntvBXdFfZLctyYROOM = &quot;&lt;room_alias&quot;                     # e.g. #knockknock:matrix.org@matrix_sender(homeserver=HOMESERVER, token=TOKEN, room=ROOM)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock matrix \    --homeserver &lt;homeserver&gt; \    --token &lt;token&gt; \    --room &lt;room&gt; \    sleep 10```### Amazon ChimeThanks to [@prabhakar267](https://github.com/prabhakar267), you can also use Amazon Chime to get notifications. You'll have to get your Chime room [webhook URL](https://docs.aws.amazon.com/chime/latest/dg/webhooks.html).#### Python```pythonfrom knockknock import chime_sender@chime_sender(webhook_url=&quot;&lt;webhook_url_to_your_chime_room&gt;&quot;)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock chime \    --webhook-url &lt;webhook_url_to_your_chime_room&gt; \    sleep 10```You can also specify an optional argument to tag specific people: `user_mentions=[&lt;your_alias&gt;, &lt;grandma's_alias&gt;]`.### DingTalkDingTalk is now supported thanks to [@wuutiing](https://github.com/wuutiing). Given DingTalk chatroom robot's webhook url and secret/keywords(at least one of them are set when creating a chatroom robot), your notifications will be sent to reach any one in that chatroom.#### Python```pythonfrom knockknock import dingtalk_senderwebhook_url = &quot;&lt;webhook_url_to_your_dingtalk_chatroom_robot&gt;&quot;@dingtalk_sender(webhook_url=webhook_url, secret=&quot;&lt;your_robot_secret_if_set&gt;&quot;, keywords=[&quot;&lt;list_of_keywords_if_set&gt;&quot;])def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock dingtalk \    --webhook-url &lt;webhook_url_to_your_dingtalk_chatroom_robot&gt; \    --secret &lt;your_robot_secret_if_set&gt; \    sleep 10```You can also specify an optional argument to at specific people: `user_mentions=[&quot;&lt;list_of_phonenumbers_who_you_want_to_tag&gt;&quot;]`.### RocketChatYou can use [RocketChat](https://rocket.chat/) to get notifications. You'll need the following before you can post notifications:- a RocketChat server e.g. rocketchat.yourcompany.com- a RocketChat user id (you'll be able to view your user id when you create a personal access token in the next step)- a RocketChat personal access token ([create one as per this guide](https://rocket.chat/docs/developer-guides/rest-api/personal-access-tokens/))- a RocketChat channel#### Python```pythonfrom knockknock import rocketchat_sender@rocketchat_sender(    rocketchat_server_url=&quot;&lt;url_to_your_rocketchat_server&gt;&quot;,    rocketchat_user_id=&quot;&lt;your_rocketchat_user_id&gt;&quot;,    rocketchat_auth_token=&quot;&lt;your_rocketchat_auth_token&gt;&quot;,    channel=&quot;&lt;channel_name&gt;&quot;)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {'loss': 0.9} # Optional return value```You can also specify two optional arguments:- to tag specific users: `user_mentions=[&lt;your_user_name&gt;, &lt;grandma's_user_name&gt;]`- to use an alias for the notification: `alias=&quot;My Alias&quot;`#### Command-line```bashknockknock rocketchat \    --rocketchat-server-url &lt;url_to_your_rocketchat_server&gt; \    --rocketchat-user-id &lt;your_rocketchat_user_id&gt; \    --rocketchat-auth-token &lt;your_rocketchat_auth_token&gt; \    --channel &lt;channel_name&gt; \    sleep 10```### WeChat WorkWeChat Work is now supported thanks to [@jcyk](https://github.com/jcyk). Given WeChat Work chatroom robot's webhook url, your notifications will be sent to reach anyone in that chatroom.#### Python```pythonfrom knockknock import wechat_senderwebhook_url = &quot;&lt;webhook_url_to_your_wechat_work_chatroom_robot&gt;&quot;@wechat_sender(webhook_url=webhook_url)def train_your_nicest_model(your_nicest_parameters):    import time    time.sleep(10000)    return {'loss': 0.9} # Optional return value```#### Command-line```bashknockknock wechat \    --webhook-url &lt;webhook_url_to_your_wechat_work_chatroom_robot&gt; \    sleep 10```You can also specify an optional argument to tag specific people: `user-mentions=[&quot;&lt;list_of_userids_you_want_to_tag&gt;&quot;]` and/or `user-mentions-mobile=[&quot;&lt;list_of_phonenumbers_you_want_to_tag&gt;&quot;]`.## Note on distributed trainingWhen using distributed training, a GPU is bound to its process using the local rank variable. Since knockknock works at the process level, if you are using 8 GPUs, you would get 8 notifications at the beginning and 8 notifications at the end... To circumvent that, except for errors, only the master process is allowed to send notifications so that you receive only one notification at the beginning and one notification at the end.**Note:** _In PyTorch, the launch of `torch.distributed.launch` sets up a RANK environment variable for each process (see [here](https://github.com/pytorch/pytorch/blob/master/torch/distributed/launch.py#L211)). This is used to detect the master process, and for now, the only simple way I came up with. Unfortunately, this is not intended to be general for all platforms but I would happily discuss smarter/better ways to handle distributed training in an issue/PR._</longdescription>
</pkgmetadata>