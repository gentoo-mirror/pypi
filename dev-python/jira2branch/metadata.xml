<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JIRA 2 BranchTakes a JIRA issue and creates a git branch```Usage: jira2branch [OPTIONS] ISSUE_ID_OR_URL SOURCE_BRANCH  Simple program that takes a JIRA issue ID and creates a new local and  tracking remote branchOptions:  -n, --name-only      Generates the branch name and prints it, no actual                       branch will be created (default is False)  -p, --push           Push newly created branch to remote (default is False)  -t, --target PATH    Target repository (default is current directory)  -r, --merge-request  Create merge request. Requires --push. (default is False)  -c, --confirm        Request confirmation before creating the merge request (default is False)  -d --dry-run         Dry run. Prints out the MR payload in JSON format but does not invoke the API     --preview (experimental) This toggles live preview ON when editing a merge request description. Requires vim being set as $EDITOR with markdown-preview.vim plugin installed  --help               Show this message and exit.```- Branch naming format is as follows:  - {CONVENTIONAL_COMMIT_PREFIX}/{ISSUE_ID}_{ISSUE_TITLE}## RequirementsRequires Python 3.11### Dev env```pip install poetrypoetry installpip install dist/jira2branch-[VERSION]-py3-none-any.whl```Afterwards, your command should be available:```$ jira2branch WT3-227 developfix/WT3-227_some-jira-issue```### Credentials#### JIRAJIRA credentials will be fetched from `[USER HOME]/.j2b/secrets.ini` with the following format:```ini[JIRA CREDENTIALS]# url = # email = # username = # password = # token = ```#### Required fields`url` and `email` are required.Use either `username` + `password` or `token` depending on how access is configured#### GitLab```ini[GITLAB CREDENTIALS]# url = # token = ```#### Required fields`token` is requiredSet `url` if the GitLab instance you're using is self-hosted## Usage`jira2branch [JIRA_ISSUE_ID|JIRA_ISSUE_URL] [TARGET_BRANCH]`### Examples`jira2branch WT3-227 main``jira2branch https://company.atlassian.net/browse/WT3-227 main`</longdescription>
</pkgmetadata>