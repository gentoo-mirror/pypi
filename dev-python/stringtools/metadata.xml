<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Vazno/stringtools&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/Vazno/stringtools/main/readme-images/stringtools.svg&quot; alt=&quot;Logo&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;stringtools provides string operations, such as analaysing, converting, generating, validating.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Vazno/stringtools/actions/workflows/pytester.yml&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/Vazno/stringtools/actions/workflows/pytester.yml/badge.svg?&quot; alt=&quot;Tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/stringtools&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://pepy.tech/badge/stringtools&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://lgtm.com/projects/g/Vazno/stringtools/context:python&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/lgtm/grade/python/g/Vazno/stringtools.svg?logo=lgtm&amp;logoWidth=18&quot; alt=&quot;Quality&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/stringtools&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/stringtools.svg?color=%2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Vazno/stringtools/actions/workflows/codeql-analysis.yml&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/Vazno/stringtools/actions/workflows/codeql-analysis.yml/badge.svg&quot; alt=&quot;Analysis&quot;&lt;/a&gt;---**Source Code**: &lt;a href=&quot;https://github.com/Vazno/stringtools&quot; target=&quot;_blank&quot;&gt;https://github.com/Vazno/stringtools&lt;/a&gt;**PyPI**: &lt;a href=&quot;https://pypi.org/project/stringtools/&quot; target=&quot;_blank&quot;&gt;https://pypi.org/project/stringtools/&lt;/a&gt;---stringtools has a lot of solutions specially built to be fast and stable ⚡.The key features are:* **Easy to use**: It has friendly and well-commented code.* **Open source**: stringtools is completely free and [open source](https://opensource.org/about)* **Stability**: Most of the code is covered with tests, so there is a less chance to catch a bug.# Installation:``pip install stringtools``# User’s Guide:## There are 5 categories:### analaysers - Analyse string.&lt;p id=&quot;analysers&quot;&gt;&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#is_pangram&quot;&gt;is_pangram&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#is_heterogram&quot;&gt;is_heterogram&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#is_anagram&quot;&gt;is_anagram&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#is_palindrome&quot;&gt;is_palindrome&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#is_tautogram&quot;&gt;is_tautogram&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#Spelling&quot;&gt;Spelling&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;### converters - Convert one string value to other string value.&lt;p id=&quot;converters&quot;&gt;&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#bricks&quot;&gt;bricks&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#replaceall&quot;&gt;replaceall&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#numerate_text&quot;&gt;numerate_text&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#remove_trailing_whitespaces&quot;&gt;remove_trailing_whitespaces&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#remove_leading_whitespaces&quot;&gt;remove_leading_whitespaces&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#text_to_binary&quot;&gt;text_to_binary&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#binary_to_text&quot;&gt;binary_to_text&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#str_to_bool&quot;&gt;str_to_bool&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;### general - General string operations.&lt;p id=&quot;general&quot;&gt;&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#Cases&quot;&gt;Cases&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#Morse&quot;&gt;Morse&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;### generators - Generate text inforamation.&lt;p id=&quot;generators&quot;&gt;&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#Nick&quot;&gt;Nick&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#Password&quot;&gt;Password&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#LoremIpsum&quot;&gt;LoremIpsum&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;### validators - Validate ip, email addresses, e.t.c&lt;p id=&quot;validators&quot;&gt;&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#Validatorvalidate_semver&quot;&gt;validate_semver&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#Validatorvalidate_email&quot;&gt;validate_email&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#Validatorvalidate_ipv4&quot;&gt;validate_ipv4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#Validatorvalidate_ipv6&quot;&gt;validate_ipv6&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#Validatorvalidate_url&quot;&gt;validate_url&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;# Usage/Examples## analaysers:```pythonfrom stringtools.analysers import *```#### ```is_pangram()```#### &lt;a href=&quot;#analysers&quot;&gt;↑&lt;/a&gt; Checks if inputed string is pangram (A pangram is a sentence using every letter of a given alphabet at least once.)```pythonis_pangram('Watch &quot;Jeopardy!&quot;, Alex Trebek\'s fun TV quiz game.') # -&gt; Trueis_pangram('Hello beautiful world!') # -&gt; False```#### ```is_heterogram()```#### &lt;a href=&quot;#analysers&quot;&gt;↑&lt;/a&gt; Checks if inputed string is heterogram (A heterogram is a string in which no letter of the alphabet occurs more than once.)```pythonis_heterogram(&quot;abcd&quot;)# -&gt; Trueis_heterogram(&quot;abcdd&quot;)# -&gt; False```#### ```is_anagram()```#### &lt;a href=&quot;#analysers&quot;&gt;↑&lt;/a&gt; Checks if inputed string is an anagram (Anagram is a string that contain all letters from other string.)```pythonis_anagram(&quot;Tom Marvolo Riddle&quot;, &quot;I Am Lord Voldemort&quot;)# -&gt; Trueis_anagram(&quot;God&quot;, &quot;Good&quot;)# -&gt; False```#### ```is_palindrome()```#### &lt;a href=&quot;#analysers&quot;&gt;↑&lt;/a&gt; Checks if inputed string is a palindrome (A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward, such as madam or racecar.)```pythonis_palindrome([&quot;r&quot;,&quot;a&quot;,&quot;d&quot;,&quot;a&quot;,&quot;r&quot;])# -&gt; Trueis_palindrome(123)# -&gt; False```#### ```is_tautogram()```#### &lt;a href=&quot;#analysers&quot;&gt;↑&lt;/a&gt; Checks if inputed string is a tautogram (A tautogram is a text in which all words start with the same letter.)```pythonis_tautogram(&quot;Crazy cat, cute, cuddly&quot;)# -&gt; Trueis_tautogram(&quot;Crazy mouse, cute, cuddly&quot;)# -&gt; False```#### ```Spelling```#### &lt;a href=&quot;#analysers&quot;&gt;↑&lt;/a&gt; Spell checker, which works by using levenshtein() function, can give correction suggestions, tell if a word is legit.```pythons = Spelling(&quot;en&quot;)s.is_correct(&quot;Hello&quot;)# -&gt; Trues.is_correct(&quot;eagoapesaf&quot;)# -&gt; Falses.get_suggestions(&quot;toxicit&quot;, 2)# -&gt; ['toxicity', 'solicit']```## converters:```pythonfrom stringtools.converters import *```#### ```bricks()```#### &lt;a href=&quot;#converters&quot;&gt;↑&lt;/a&gt; Returns bricked version of a string.```pythonbricks(&quot;Hello world!&quot;)# -&gt; &quot;HeLlO WoRlD!bricks(&quot;abcdef&quot;)# -&gt; &quot;AbCdEf&quot;```#### ```replaceall()```#### &lt;a href=&quot;#converters&quot;&gt;↑&lt;/a&gt; Replaces text from given sentence and dictionary.dictionary should be formatted like this:```python{&quot;old_string&quot;: &quot;new_string&quot;}``````pythonreplaceall(&quot;12345&quot;, {&quot;1&quot;: &quot;One &quot;, &quot;2&quot;: &quot;Two &quot;, &quot;3&quot;: &quot;Three &quot;})# -&gt; &quot;One Two Three 45&quot;replaceall(&quot;Hello world!&quot;, {&quot;Hello&quot;: &quot;Sup&quot;, &quot;world&quot;: &quot;earth&quot;})# -&gt; &quot;Sup earth!&quot;```#### ```numerate_text()```#### &lt;a href=&quot;#converters&quot;&gt;↑&lt;/a&gt; Numerate each line of text.```pythonnumerate_text(&quot;Hello world\nHow are you doing?&quot;)# -&gt; &quot;1 Hello World\\n2 How are you doing?&quot;numerate_text(&quot;First line.\nThe second line\nThe third line&quot;)# -&gt; &quot;1 First line.\n2 The second line\n3 The third line&quot;```#### ```remove_trailing_whitespaces()```#### &lt;a href=&quot;#converters&quot;&gt;↑&lt;/a&gt; Remove all trailing whitespaces from sentence.```pythonremove_trailing_whitespaces(&quot;text   &quot;)# -&gt; &quot;text&quot;remove_trailing_whitespaces(&quot;Look at this. &quot;)# -&gt; &quot;Look at this.&quot;'''```#### ```remove_leading_whitespaces()```#### &lt;a href=&quot;#converters&quot;&gt;↑&lt;/a&gt; Remove all leading whitespaces from sentence.```pythonremove_leading_whitespaces(&quot;   text&quot;)# -&gt; &quot;text&quot;remove_leading_whitespaces(&quot; Look at this.&quot;)# -&gt; &quot;Look at this.&quot;'''```#### ```text_to_binary()```#### &lt;a href=&quot;#converters&quot;&gt;↑&lt;/a&gt; Convert string to a binary (A binary number is a number expressed in the base-2 numeral system or binary numeral system, a method of mathematical expression which uses only two symbols: 0 and 1)```pythontext_to_binary(&quot;Hello&quot;)# -&gt; 0100100001100101011011000110110001101111text_to_binary(&quot;A&quot;)# -&gt; 01000001```#### ```binary_to_text()```#### &lt;a href=&quot;#converters&quot;&gt;↑&lt;/a&gt; Convert binary to text (A binary number is a number expressed in the base-2 numeral system or binary numeral system, a method of mathematical expression which uses only two symbols: 0 and 1)```pythonbinary_to_text(&quot;0100100001100101011011000110110001101111&quot;)# -&gt; &quot;Hello&quot;binary_to_text(&quot;01000001&quot;)# -&gt; &quot;A&quot;'''```#### ```str_to_bool()```#### &lt;a href=&quot;#converters&quot;&gt;↑&lt;/a&gt; Converts a string representation of truth to bool#####False values are: &quot;False&quot;, &quot;f&quot;, &quot;no&quot;, &quot;n&quot;, &quot;off&quot;, &quot;0&quot;#####True values are: &quot;True&quot;, &quot;t&quot;, &quot;yes&quot;, &quot;y&quot;, &quot;on&quot;, &quot;1&quot;```pythonstr_to_bool(&quot;True&quot;)# -&gt; Truestr_to_bool(&quot;False&quot;)# -&gt; False```## general:```pythonfrom stringtools.general import *```#### ```Cases()```#### &lt;a href=&quot;#general&quot;&gt;↑&lt;/a&gt; Convert strings (and dictionary keys) between cases, and analyse.##### Converting strings```pythonCases.camelize(&quot;jack_in_the_box&quot;)# -&gt; &quot;jackInTheBox&quot;Cases.decamelize(&quot;rubyTuesdays&quot;)# -&gt; &quot;ruby_tuesdays&quot;Cases.pascalize(&quot;red_robin&quot;)# -&gt; &quot;RedRobin&quot;Cases.kebabize(&quot;white_castle&quot;)# -&gt; &quot;white-castle&quot;```##### Converting dictionary keys```pythonarray = [{&quot;attrOne&quot;: &quot;foo&quot;}, {&quot;attrOne&quot;: &quot;bar&quot;}]Cases.decamelize(array)# -&gt; [{&quot;attr_one&quot;: &quot;foo&quot;}, {&quot;attr_one&quot;: &quot;bar&quot;}]array = [{&quot;attr_one&quot;: &quot;foo&quot;}, {&quot;attr_one&quot;: &quot;bar&quot;}]Cases.camelize(array)# -&gt; [{&quot;attrOne&quot;: &quot;foo&quot;}, {&quot;attrOne&quot;: &quot;bar&quot;}]array = [{'attr_one': 'foo'}, {'attr_one': 'bar'}]Cases.kebabize(array)# -&gt; [{'attr-one': 'foo'}, {'attr-one': 'bar'}]array = [{&quot;attr_one&quot;: &quot;foo&quot;}, {&quot;attr_one&quot;: &quot;bar&quot;}]Cases.pascalize(array)# -&gt; [{&quot;AttrOne&quot;: &quot;foo&quot;}, {&quot;AttrOne&quot;: &quot;bar&quot;}]```##### Checking character casing```pythonCases.is_camelcase(&quot;illWearYourGranddadsClothes&quot;)# -&gt; TrueCases.is_pascalcase(&quot;ILookIncredible&quot;)# -&gt; TrueCases.is_snakecase(&quot;im_in_this_big_coat&quot;)# -&gt; TrueCases.is_kebabcase('from-that-shop')# -&gt; TrueCases.is_camelcase(&quot;from_that_shop&quot;)# -&gt; FalseCases.is_snakecase(&quot;downTheRoad&quot;)# -&gt; FalseCases.is_kebabcase('from_that_shop')# -&gt; False# what about abbrevations, acronyms, and initialisms? No problem!Cases.decamelize(&quot;APIResponse&quot;)# -&gt; &quot;api_response&quot;```#### ```Morse()```#### &lt;a href=&quot;#general&quot;&gt;↑&lt;/a&gt; Convert sentence to morse code, and vice versa.```pythonprint(Morse.encode(&quot;HELLO, WORLD!&quot;))# -&gt; &quot;.... . .-.. .-.. --- --..-- / .-- --- .-. .-.. -.. -.-.--&quot;print(Morse.decode(&quot;.... . .-.. .-.. --- --..-- / .-- --- .-. .-.. -.. -.-.--&quot;))# -&gt; &quot;HELLO, WORLD!&quot;```## generators:```pythonfrom stringtools.generators import *```#### ```Nick()```#### &lt;a href=&quot;#generators&quot;&gt;↑&lt;/a&gt; Generate nicknames by inputed vowels, consonants, and other sounds.```pythonn = Nick()n.set_length(5)for i in range(20):    print(n.generate())# -&gt; # &quot;Irrol&quot;# &quot;Uppuq&quot;# &quot;Aguir&quot;# &quot;Moury&quot;# &quot;Uwrax&quot;# &quot;Ezeoa&quot;# &quot;Agaum&quot;# &quot;Egeti&quot;# &quot;Efuyu&quot;# &quot;Iruek&quot;# &quot;Qawze&quot;# &quot;Oguei&quot;# &quot;Hochu&quot;# &quot;Maqod&quot;# &quot;Suyff&quot;# &quot;Idoor&quot;# &quot;Keigh&quot;# &quot;Uredi&quot;# &quot;Eceuy&quot;# &quot;Elere&quot;```#### ```Password()```#### &lt;a href=&quot;#generators&quot;&gt;↑&lt;/a&gt; Generate very strong passwords.##### You can choose these options for password:- English (abcd...)- Numerals (1234...)- Special Symbols ('`&lt;*...)- Own symbols (Any)- Exclude similar characters (1, l, L, 0, o, O, etc.)```pythonp = Password()p.set_length(8)p.add_symbols()p.add_digits()p.add_ascii_letters()p.generate()# -&gt; &quot;C-3?r#$a&quot;p = Password()p.set_length(16)p.add_own(&quot;123&quot;)# -&gt; &quot;3312311232131231&quot;print(Password.is_strong(&quot;123456789qwerty&quot;))# -&gt; Falseprint(Password.is_strong(&quot;Aa0D#4v17@13.-0&quot;))# -&gt; True```#### ```LoremIpsum()```#### &lt;a href=&quot;#generators&quot;&gt;↑&lt;/a&gt; Generate Lorem Ipsum text. (Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content.)```pythonx = LoremIpsum()x.set_length(5)x.set_word_randrange((4, 10))print(x.generate())# -&gt; &quot;Lorem ipsum etnnimouft orknore zeoozeea.&quot;print(x.generate())# -&gt; &quot;Lorem ipsum eodyr gueipnaive pnaiz.&quot;```## validators:```pythonfrom stringtools.validators import *```#### ```Validator.validate_semver()```#### &lt;a href=&quot;#validators&quot;&gt;↑&lt;/a&gt; Validate if version name follows semantic versioning. For more information go to: https://semver.org/```pythonValidator.validate_semver(&quot;1.0.0&quot;)# -&gt; TrueValidator.validate_semver(&quot;1.0.0.0&quot;)# -&gt; False```#### ```Validator.validate_email()```#### &lt;a href=&quot;#validators&quot;&gt;↑&lt;/a&gt; Validate an email address.```pythonValidator.validate_email(&quot;email@example.com&quot;)# -&gt; TrueValidator.validate_email(&quot;email@example..com&quot;)# -&gt; False```#### ```Validator.validate_url()```#### &lt;a href=&quot;#validators&quot;&gt;↑&lt;/a&gt; Validate url address.```pythonValidator.validate_url(&quot;https://example.com/&quot;)# -&gt; TrueValidator.validate_url(&quot;example.com&quot;)# -&gt; False```#### ```Validator.validate_ipv4()```#### &lt;a href=&quot;#validators&quot;&gt;↑&lt;/a&gt; Validate an ipv4 address.```pythonValidator.validate_ipv4(&quot;127.255.255.254&quot;)# -&gt; TrueValidator.validate_ipv4(&quot;127.255.254&quot;)# -&gt; False```#### ```Validator.validate_ipv6()```#### &lt;a href=&quot;#validators&quot;&gt;↑&lt;/a&gt; Validate an ipv6 address.```pythonValidator.validate_ipv6(&quot;2345:0425:2CA1:0000:0000:0567:5673:23b5&quot;)# -&gt; TrueValidator.validate_ipv6(&quot;0425:2CA1:0000:0000:0567:5673:23b5&quot;)# -&gt; False```# Authors- [@Vazno](https://www.github.com/Vazno)## License 🔑[MIT](https://choosealicense.com/licenses/mit/) - Copyright (c) 2022 [Beksultan Artykbaev](https://github.com/Vazno)</longdescription>
</pkgmetadata>