<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyGenomeViz![Python3](https://img.shields.io/badge/Language-Python3-steelblue)![OS](https://img.shields.io/badge/OS-_Windows_|_Mac_|_Linux-steelblue)![License](https://img.shields.io/badge/License-MIT-steelblue)[![Latest PyPI version](https://img.shields.io/pypi/v/pygenomeviz.svg)](https://pypi.python.org/pypi/pygenomeviz)[![Bioconda](https://img.shields.io/conda/vn/bioconda/pygenomeviz.svg?color=green)](https://anaconda.org/bioconda/pygenomeviz)[![CI](https://github.com/moshi4/pyGenomeViz/actions/workflows/ci.yml/badge.svg)](https://github.com/moshi4/pyGenomeViz/actions/workflows/ci.yml)## Table of contents- [Overview](#overview)- [Installation](#installation)- [API Examples](#api-examples)- [CLI Examples](#cli-examples)- [GUI (Web Application)](#gui-web-application)- [Interactive HTML Viewer](#interactive-html-viewer)- [Inspiration](#inspiration)- [Circular Genome Visualization](#circular-genome-visualization)## OverviewpyGenomeViz is a genome visualization python package for comparative genomics implemented based on matplotlib.This package is developed for the purpose of easily and beautifully plotting genomicfeatures and sequence similarity comparison links between multiple genomes.It supports genome visualization of Genbank/GFF format file and can be saved figure in various formats (JPG/PNG/SVG/PDF/HTML).User can use pyGenomeViz for interactive genome visualization figure plotting on jupyter notebook,or automatic genome visualization figure plotting in genome analysis scripts/pipelines.For more information, please see full documentation [here](https://moshi4.github.io/pyGenomeViz/).![pygenomeviz_gallery.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/pygenomeviz_gallery.png)  **Fig.1 pyGenomeViz example plot gallery**:sparkles: GUI (Web Application) functionality is newly added from v0.4.0![pygenomeviz_gui.gif](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/src/pygenomeviz/gui/assets/pgv_demo.gif)**Fig.2 pyGenomeViz web application example ([Demo Page](https://pygenomeviz.streamlit.app))**## Installation`Python 3.8 or later` is required for installation.**Install PyPI package:**    pip install pygenomeviz**Install bioconda package:**    conda install -c conda-forge -c bioconda pygenomeviz**Use Docker ([Image Registry](https://github.com/moshi4/pyGenomeViz/pkgs/container/pygenomeviz)):**Case1. Run CLI Workflow:    docker run -it --rm ghcr.io/moshi4/pygenomeviz:latest pgv-mummer -hCase2. Launch GUI (Web Application):    docker run -it --rm -p 8501:8501 ghcr.io/moshi4/pygenomeviz:latest pgv-gui## API ExamplesJupyter notebooks containing code examples below is available [here](https://moshi4.github.io/pyGenomeViz/getting_started/).### Basic Example#### Single Track```pythonfrom pygenomeviz import GenomeVizname, genome_size = &quot;Tutorial 01&quot;, 5000cds_list = ((100, 900, -1), (1100, 1300, 1), (1350, 1500, 1), (1520, 1700, 1), (1900, 2200, -1), (2500, 2700, 1), (2700, 2800, -1), (2850, 3000, -1), (3100, 3500, 1), (3600, 3800, -1), (3900, 4200, -1), (4300, 4700, -1), (4800, 4850, 1))gv = GenomeViz()track = gv.add_feature_track(name, genome_size)for idx, cds in enumerate(cds_list, 1):    start, end, strand = cds    track.add_feature(start, end, strand, label=f&quot;CDS{idx:02d}&quot;)gv.savefig(&quot;example01.png&quot;)```![example01.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/example01.png)#### Multiple Tracks &amp; Links```pythonfrom pygenomeviz import GenomeVizgenome_list = (    {&quot;name&quot;: &quot;genome 01&quot;, &quot;size&quot;: 1000, &quot;cds_list&quot;: ((150, 300, 1), (500, 700, -1), (750, 950, 1))},    {&quot;name&quot;: &quot;genome 02&quot;, &quot;size&quot;: 1300, &quot;cds_list&quot;: ((50, 200, 1), (350, 450, 1), (700, 900, -1), (950, 1150, -1))},    {&quot;name&quot;: &quot;genome 03&quot;, &quot;size&quot;: 1200, &quot;cds_list&quot;: ((150, 300, 1), (350, 450, -1), (500, 700, -1), (700, 900, -1))},)gv = GenomeViz(tick_style=&quot;axis&quot;)for genome in genome_list:    name, size, cds_list = genome[&quot;name&quot;], genome[&quot;size&quot;], genome[&quot;cds_list&quot;]    track = gv.add_feature_track(name, size)    for idx, cds in enumerate(cds_list, 1):        start, end, strand = cds        track.add_feature(start, end, strand, label=f&quot;gene{idx:02d}&quot;, linewidth=1, labelrotation=0, labelvpos=&quot;top&quot;, labelhpos=&quot;center&quot;, labelha=&quot;center&quot;)# Add links between &quot;genome 01&quot; and &quot;genome 02&quot;gv.add_link((&quot;genome 01&quot;, 150, 300), (&quot;genome 02&quot;, 50, 200))gv.add_link((&quot;genome 01&quot;, 700, 500), (&quot;genome 02&quot;, 900, 700))gv.add_link((&quot;genome 01&quot;, 750, 950), (&quot;genome 02&quot;, 1150, 950))# Add links between &quot;genome 02&quot; and &quot;genome 03&quot;gv.add_link((&quot;genome 02&quot;, 50, 200), (&quot;genome 03&quot;, 150, 300), normal_color=&quot;skyblue&quot;, inverted_color=&quot;lime&quot;, curve=True)gv.add_link((&quot;genome 02&quot;, 350, 450), (&quot;genome 03&quot;, 450, 350), normal_color=&quot;skyblue&quot;, inverted_color=&quot;lime&quot;, curve=True)gv.add_link((&quot;genome 02&quot;, 900, 700), (&quot;genome 03&quot;, 700, 500), normal_color=&quot;skyblue&quot;, inverted_color=&quot;lime&quot;, curve=True)gv.add_link((&quot;genome 03&quot;, 900, 700), (&quot;genome 02&quot;, 1150, 950), normal_color=&quot;skyblue&quot;, inverted_color=&quot;lime&quot;, curve=True)gv.savefig(&quot;example02.png&quot;)```![example02.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/example02.png)#### Exon Features```pythonfrom pygenomeviz import GenomeVizexon_regions1 = [(0, 210), (300, 480), (590, 800), (850, 1000), (1030, 1300)]exon_regions2 = [(1500, 1710), (2000, 2480), (2590, 2800)]exon_regions3 = [(3000, 3300), (3400, 3690), (3800, 4100), (4200, 4620)]gv = GenomeViz()track = gv.add_feature_track(name=f&quot;Exon Features&quot;, size=5000)track.add_exon_feature(exon_regions1, strand=1, plotstyle=&quot;box&quot;, label=&quot;box&quot;, labelrotation=0, labelha=&quot;center&quot;)track.add_exon_feature(exon_regions2, strand=-1, plotstyle=&quot;arrow&quot;, label=&quot;arrow&quot;, labelrotation=0, labelha=&quot;center&quot;, facecolor=&quot;darkgrey&quot;, intron_patch_kws={&quot;ec&quot;: &quot;red&quot;})exon_labels = [f&quot;exon{i+1}&quot; for i in range(len(exon_regions3))]track.add_exon_feature(exon_regions3, strand=1, plotstyle=&quot;bigarrow&quot;, label=&quot;bigarrow&quot;, facecolor=&quot;lime&quot;, linewidth=1, exon_labels=exon_labels, labelrotation=0, labelha=&quot;center&quot;, exon_label_kws={&quot;y&quot;: 0, &quot;va&quot;: &quot;center&quot;, &quot;color&quot;: &quot;blue&quot;})gv.savefig(&quot;example03.png&quot;)```![example03.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/example03.png)### Practical Example#### Add Features from Genbank file```pythonfrom pygenomeviz import Genbank, GenomeViz, load_example_datasetgbk_files, _ = load_example_dataset(&quot;enterobacteria_phage&quot;)gbk = Genbank(gbk_files[0])gv = GenomeViz()track = gv.add_feature_track(gbk.name, gbk.range_size)track.add_genbank_features(gbk)gv.savefig(&quot;example04.png&quot;)```![example04.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/example04.png)#### Add Features from GFF file```pythonfrom pygenomeviz import Gff, GenomeViz, load_example_gffgff_file = load_example_gff(&quot;enterobacteria_phage.gff&quot;)gff = Gff(gff_file, min_range=5000, max_range=25000)gv = GenomeViz(fig_track_height=0.7, tick_track_ratio=0.5, tick_style=&quot;bar&quot;)track = gv.add_feature_track(gff.name, size=gff.range_size, start_pos=gff.min_range)track.add_gff_features(gff, plotstyle=&quot;arrow&quot;, facecolor=&quot;tomato&quot;)track.set_sublabel()gv.savefig(&quot;example05.png&quot;)```![example05.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/example05.png)#### Multiple Tracks &amp; Links from Genbank files```pythonfrom pygenomeviz import Genbank, GenomeViz, load_example_datasetgv = GenomeViz(    fig_track_height=0.7,    feature_track_ratio=0.2,    tick_track_ratio=0.4,    tick_style=&quot;bar&quot;,    align_type=&quot;center&quot;,)gbk_files, links = load_example_dataset(&quot;escherichia_phage&quot;)for gbk_file in gbk_files:    gbk = Genbank(gbk_file)    track = gv.add_feature_track(gbk.name, gbk.range_size)    track.add_genbank_features(gbk, facecolor=&quot;limegreen&quot;, linewidth=0.5, arrow_shaft_ratio=1.0)for link in links:    link_data1 = (link.ref_name, link.ref_start, link.ref_end)    link_data2 = (link.query_name, link.query_start, link.query_end)    gv.add_link(link_data1, link_data2, v=link.identity, curve=True)gv.savefig(&quot;example06.png&quot;)```![example06.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/example06.png)### Customization TipsSince pyGenomeViz is implemented based on matplotlib, users can easily customizethe figure in the manner of matplotlib. Here are some tips for figure customization.#### Customization Tips 01- Add `GC Content` &amp; `GC skew` subtrack- Add annotation label &amp; fillbox- Add colorbar for links identity&lt;details&gt;&lt;summary&gt;Code&lt;/summary&gt;```pythonfrom pygenomeviz import Genbank, GenomeViz, load_example_datasetgv = GenomeViz(    fig_width=12,    fig_track_height=0.7,    feature_track_ratio=0.5,    tick_track_ratio=0.3,    tick_style=&quot;axis&quot;,    tick_labelsize=10,)gbk_files, links = load_example_dataset(&quot;erwinia_phage&quot;)gbk_list = [Genbank(gbk_file) for gbk_file in gbk_files]for gbk in gbk_list:    track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=15)    track.add_genbank_features(gbk, plotstyle=&quot;arrow&quot;)min_identity = int(min(link.identity for link in links))for link in links:    link_data1 = (link.ref_name, link.ref_start, link.ref_end)    link_data2 = (link.query_name, link.query_start, link.query_end)    gv.add_link(link_data1, link_data2, v=link.identity, vmin=min_identity)# Add subtracks to top track for plotting 'GC content' &amp; 'GC skew'gv.top_track.add_subtrack(ratio=0.7, name=&quot;gc_content&quot;)gv.top_track.add_subtrack(ratio=0.7, name=&quot;gc_skew&quot;)fig = gv.plotfig()# Add label annotation to top tracktop_track = gv.top_track  # or, gv.get_track(&quot;MT939486&quot;) or gv.get_tracks()[0]label, start, end = &quot;Inverted&quot;, 310000 + top_track.offset, 358000 + top_track.offsetcenter = int((start + end) / 2)top_track.ax.hlines(1.5, start, end, colors=&quot;red&quot;, linewidth=1, linestyles=&quot;dashed&quot;, clip_on=False)top_track.ax.text(center, 2.0, label, fontsize=12, color=&quot;red&quot;, ha=&quot;center&quot;, va=&quot;bottom&quot;)# Add fillbox to top trackx, y = (start, start, end, end), (1, -1, -1, 1)top_track.ax.fill(x, y, fc=&quot;lime&quot;, linewidth=0, alpha=0.1, zorder=-10)# Plot GC content for top trackpos_list, gc_content_list = gbk_list[0].calc_gc_content()pos_list += gv.top_track.offset  # Offset is required if align_type is not 'left'gc_content_ax = gv.top_track.subtracks[0].axgc_content_ax.set_ylim(bottom=0, top=max(gc_content_list))gc_content_ax.fill_between(pos_list, gc_content_list, alpha=0.2, color=&quot;blue&quot;)gc_content_ax.text(gv.top_track.offset, max(gc_content_list) / 2, &quot;GC(%) &quot;, ha=&quot;right&quot;, va=&quot;center&quot;, color=&quot;blue&quot;)# Plot GC skew for top trackpos_list, gc_skew_list = gbk_list[0].calc_gc_skew()pos_list += gv.top_track.offset  # Offset is required if align_type is not 'left'gc_skew_abs_max = max(abs(gc_skew_list))gc_skew_ax = gv.top_track.subtracks[1].axgc_skew_ax.set_ylim(bottom=-gc_skew_abs_max, top=gc_skew_abs_max)gc_skew_ax.fill_between(pos_list, gc_skew_list, alpha=0.2, color=&quot;red&quot;)gc_skew_ax.text(gv.top_track.offset, 0, &quot;GC skew &quot;, ha=&quot;right&quot;, va=&quot;center&quot;, color=&quot;red&quot;)# Set coloarbar for linkgv.set_colorbar(fig, vmin=min_identity)fig.savefig(&quot;example07.png&quot;)```&lt;/details&gt;![example07.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/example07.png)#### Customization Tips 02- Add legends- Add colorbar for links identity&lt;details&gt;&lt;summary&gt;Code&lt;/summary&gt;```pythonfrom matplotlib.lines import Line2Dfrom matplotlib.patches import Patchfrom pygenomeviz import Genbank, GenomeViz, load_example_datasetgv = GenomeViz(    fig_width=10,    fig_track_height=0.5,    feature_track_ratio=0.5,    tick_track_ratio=0.3,    align_type=&quot;center&quot;,    tick_style=&quot;bar&quot;,    tick_labelsize=10,)gbk_files, links = load_example_dataset(&quot;enterobacteria_phage&quot;)for idx, gbk_file in enumerate(gbk_files):    gbk = Genbank(gbk_file)    track = gv.add_feature_track(gbk.name, gbk.range_size, labelsize=10)    track.add_genbank_features(        gbk,        label_type=&quot;product&quot; if idx == 0 else None,  # Labeling only top track        label_handle_func=lambda s: &quot;&quot; if s.startswith(&quot;hypothetical&quot;) else s,  # Ignore 'hypothetical ~~~' label        labelsize=8,        labelvpos=&quot;top&quot;,        facecolor=&quot;skyblue&quot;,        linewidth=0.5,    )normal_color, inverted_color, alpha = &quot;chocolate&quot;, &quot;limegreen&quot;, 0.5min_identity = int(min(link.identity for link in links))for link in links:    link_data1 = (link.ref_name, link.ref_start, link.ref_end)    link_data2 = (link.query_name, link.query_start, link.query_end)    gv.add_link(link_data1, link_data2, normal_color, inverted_color, alpha, v=link.identity, vmin=min_identity, curve=True)fig = gv.plotfig()# Add Legends (Maybe there is a better way)handles = [    Line2D([], [], marker=&quot;&gt;&quot;, color=&quot;skyblue&quot;, label=&quot;CDS&quot;, ms=10, ls=&quot;none&quot;),    Patch(color=normal_color, label=&quot;Normal Link&quot;),    Patch(color=inverted_color, label=&quot;Inverted Link&quot;),]fig.legend(handles=handles, bbox_to_anchor=(1, 1))# Set colorbar for linkgv.set_colorbar(fig, bar_colors=[normal_color, inverted_color], alpha=alpha, vmin=min_identity, bar_label=&quot;Identity&quot;, bar_labelsize=10)fig.savefig(&quot;example08.png&quot;)```&lt;/details&gt;![example08.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/example08.png)## CLI ExamplespyGenomeViz provides CLI workflow for visualization of genome alignment orreciprocal best-hit CDS search results with `MUMmer` or `MMseqs` or `progressiveMauve`.Each CLI workflow requires the installation of additional dependent tools to run.### MUMmer CLI Workflow ExampleSee [pgv-mummer document](https://moshi4.github.io/pyGenomeViz/cli-docs/pgv-mummer/) for details.Download example dataset: `pgv-download-dataset -n erwinia_phage`&gt; :warning: MUMmer must be installed in advance to run    pgv-mummer --gbk_resources MT939486.gbk MT939487.gbk MT939488.gbk LT960552.gbk \               -o mummer_example --tick_style axis --align_type left --feature_plotstyle arrow![mummer_example.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/mummer_example1.png)  ### MMseqs CLI Workflow ExampleSee [pgv-mmseqs document](https://moshi4.github.io/pyGenomeViz/cli-docs/pgv-mmseqs/) for details.Download example dataset: `pgv-download-dataset -n enterobacteria_phage`&gt; :warning: MMseqs must be installed in advance to run    pgv-mmseqs --gbk_resources NC_019724.gbk NC_024783.gbk NC_016566.gbk NC_013600.gbk NC_031081.gbk NC_028901.gbk \               -o mmseqs_example --fig_track_height 0.7 --feature_linewidth 0.3 --tick_style bar --curve \               --normal_link_color chocolate --inverted_link_color limegreen --feature_color skyblue![mmseqs_example.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/mmseqs_example3.png)  ### progressiveMauve CLI Workflow ExampleSee [pgv-pmauve document](https://moshi4.github.io/pyGenomeViz/cli-docs/pgv-pmauve/) for details.Download example dataset: `pgv-download-dataset -n escherichia_coli`&gt; :warning: progressiveMauve must be installed in advance to run    pgv-pmauve --seq_files NC_000913.gbk NC_002695.gbk NC_011751.gbk NC_011750.gbk \               -o pmauve_example --tick_style bar![pmauve_example.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/pmauve_example1.png)  ## GUI (Web Application)pyGenomeViz implements GUI (Web Application) functionality using [streamlit](https://github.com/streamlit/streamlit) as an option ([Demo Page](https://pygenomeviz.streamlit.app)).Users can easily visualize the genome data of Genbank files and their comparison results with GUI.See [pgv-gui document](https://moshi4.github.io/pyGenomeViz/gui-docs/pgv-gui/) for details.![pygenomeviz_gui.gif](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/src/pygenomeviz/gui/assets/pgv_demo.gif)## Interactive HTML ViewerpyGenomeViz implements HTML file output functionality for interactive data visualization.In API, HTML file can be output using `savefig_html` method. In CLI, user can select HTML file output option.As shown below, data tooltip display, pan/zoom, object color change, text change, etc are available in HTML viewer([Demo Page](https://moshi4.github.io/pyGenomeViz/images/pgv-viewer-demo.html)).![pgv-viewer-demo.gif](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/pgv-viewer-demo.gif)## InspirationpyGenomeViz was inspired by- [GenomeDiagram (BioPython)](https://github.com/biopython/biopython)- [Easyfig](http://mjsull.github.io/Easyfig/)- [genoplotR](https://genoplotr.r-forge.r-project.org/)- [gggenomes](https://github.com/thackl/gggenomes)## Circular Genome VisualizationpyGenomeViz is a python package designed for linear genome visualization.If you are interested in circular genome visualization, check out my other python package [pyCirclize](https://github.com/moshi4/pyCirclize).![pycirclize_example.png](https://raw.githubusercontent.com/moshi4/pyGenomeViz/main/docs/images/pycirclize_example.png)  **Fig. pyCirclize example plot gallery**</longdescription>
</pkgmetadata>