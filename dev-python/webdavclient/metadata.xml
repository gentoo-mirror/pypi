<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>webdavclient============|PyPI version| |Requirements Status| |PullReview stats|Package webdavclient provides easy and convenient work withWebDAV-servers (Yandex.Drive, Dropbox, Google Drive, Box, 4shared,etc.). The package includes the following components: webdav API,resource API and wdc.The source code of the project can be found`here &lt;https://github.com/designerror/webdavclient&gt;`__ |Github|Installation and upgrade========================**Installation**- Linux.. code:: bash    $ sudo apt-get install libxml2-dev libxslt-dev python-dev    $ sudo apt-get install libcurl4-openssl-dev python-pycurl     $ sudo easy_install webdavclient- macOS.. code:: bash    curl https://bootstrap.pypa.io/ez_setup.py -o - | python    python setup.py install --prefix=/opt/setuptools    sudo easy_install webdavclient**Update**.. code:: bash    $ sudo pip install -U webdavclientWebdav API==========Webdav API is a set of webdav methods of work with cloud storage. Thisset includes the following methods: ``check``, ``free``, ``info``,``list``, ``mkdir``, ``clean``, ``copy``, ``move``, ``download``,``upload``, ``publish`` and ``unpublish``.**Configuring the client**Required keys for configuring client connection with WevDAV-server arewebdav\_hostname and webdav\_login, webdav,\_password... code:: python    import webdav.client as wc    options = {     'webdav_hostname': &quot;https://webdav.server.ru&quot;,     'webdav_login':    &quot;login&quot;,     'webdav_password': &quot;password&quot;    }    client = wc.Client(options)When a proxy server you need to specify settings to connect through it... code:: python    import webdav.client as wc    options = {     'webdav_hostname': &quot;https://webdav.server.ru&quot;,     'webdav_login':    &quot;w_login&quot;,     'webdav_password': &quot;w_password&quot;,      'proxy_hostname':  &quot;http://127.0.0.1:8080&quot;,     'proxy_login':     &quot;p_login&quot;,     'proxy_password':  &quot;p_password&quot;    }    client = wc.Client(options)If you want to use the certificate path to certificate and private keyis defined as follows:.. code:: python    import webdav.client as wc    options = {     'webdav_hostname': &quot;https://webdav.server.ru&quot;,     'webdav_login':    &quot;w_login&quot;,     'webdav_password': &quot;w_password&quot;,     'cert_path':       &quot;/etc/ssl/certs/certificate.crt&quot;,     'key_path':        &quot;/etc/ssl/private/certificate.key&quot;    }    client = wc.Client(options)Or you want to limit the speed or turn on verbose mode:.. code:: python    options = {     ...     'recv_speed' : 3000000,     'send_speed' : 3000000,     'verbose'    : True    }    client = wc.Client(options)| recv\_speed: rate limit data download speed in Bytes per second.  Defaults to unlimited speed.| send\_speed: rate limit data upload speed in Bytes per second.  Defaults to unlimited speed.| verbose: set verbose mode on/off. By default verbose mode is off.**Synchronous methods**.. code:: python    // Checking existence of the resource    client.check(&quot;dir1/file1&quot;)    client.check(&quot;dir1&quot;).. code:: python    // Get information about the resource    client.info(&quot;dir1/file1&quot;)    client.info(&quot;dir1/&quot;).. code:: python    // Check free space    free_size = client.free().. code:: python    // Get a list of resources    files1 = client.list()    files2 = client.list(&quot;dir1&quot;).. code:: python    // Create directory    client.mkdir(&quot;dir1/dir2&quot;).. code:: python    // Delete resource    client.clean(&quot;dir1/dir2&quot;).. code:: python    // Copy resource    client.copy(remote_path_from=&quot;dir1/file1&quot;, remote_path_to=&quot;dir2/file1&quot;)    client.copy(remote_path_from=&quot;dir2&quot;, remote_path_to=&quot;dir3&quot;).. code:: python    // Move resource    client.move(remote_path_from=&quot;dir1/file1&quot;, remote_path_to=&quot;dir2/file1&quot;)    client.move(remote_path_from=&quot;dir2&quot;, remote_path_to=&quot;dir3&quot;).. code:: python    // Move resource    client.download_sync(remote_path=&quot;dir1/file1&quot;, local_path=&quot;~/Downloads/file1&quot;)    client.download_sync(remote_path=&quot;dir1/dir2/&quot;, local_path=&quot;~/Downloads/dir2/&quot;).. code:: python    // Unload resource    client.upload_sync(remote_path=&quot;dir1/file1&quot;, local_path=&quot;~/Documents/file1&quot;)    client.upload_sync(remote_path=&quot;dir1/dir2/&quot;, local_path=&quot;~/Documents/dir2/&quot;).. code:: python    // Publish the resource    link = client.publish(&quot;dir1/file1&quot;)    link = client.publish(&quot;dir2&quot;).. code:: python    // Unpublish resource    client.unpublish(&quot;dir1/file1&quot;)    client.unpublish(&quot;dir2&quot;).. code:: python    // Exception handling    from webdav.client import WebDavException    try:    ...    except WebDavException as exception:    ..... code:: python    // Get the missing files    client.pull(remote_directory='dir1', local_directory='~/Documents/dir1').. code:: python    // Send missing files    client.push(remote_directory='dir1', local_directory='~/Documents/dir1')**Asynchronous methods**.. code:: python    // Load resource    kwargs = {     'remote_path': &quot;dir1/file1&quot;,     'local_path':  &quot;~/Downloads/file1&quot;,     'callback':    callback    }    client.download_async(**kwargs)    kwargs = {     'remote_path': &quot;dir1/dir2/&quot;,     'local_path':  &quot;~/Downloads/dir2/&quot;,     'callback':    callback    }    client.download_async(**kwargs).. code:: python    // Unload resource    kwargs = {     'remote_path': &quot;dir1/file1&quot;,     'local_path':  &quot;~/Downloads/file1&quot;,     'callback':    callback    }    client.upload_async(**kwargs)    kwargs = {     'remote_path': &quot;dir1/dir2/&quot;,     'local_path':  &quot;~/Downloads/dir2/&quot;,     'callback':    callback    }    client.upload_async(**kwargs)Resource API============Resource API using the concept of OOP that enables cloud-levelresources... code:: python    // Get a resource    res1 = client.resource(&quot;dir1/file1&quot;).. code:: python    // Work with the resource    res1.rename(&quot;file2&quot;)    res1.move(&quot;dir1/file2&quot;)    res1.copy(&quot;dir2/file1&quot;)    info = res1.info()    res1.read_from(buffer)    res1.read(local_path=&quot;~/Documents/file1&quot;)    res1.read_async(local_path=&quot;~/Documents/file1&quot;, callback)    res1.write_to(buffer)    res1.write(local_path=&quot;~/Downloads/file1&quot;)    res1.write_async(local_path=&quot;~/Downloads/file1&quot;, callback)wdc===wdc \-a cross-platform utility that provides convenient work withWebDAV-servers right from your console. In addition to fullimplementations of methods from webdav API, also added methods contentsync local and remote directories.**Authentication**- *Basic authentication*.. code:: bash   $ wdc login https://wedbav.server.ru -p http://127.0.0.1:8080   webdav_login: w_login   webdav_password: w_password   proxy_login: p_login   proxy_password: p_password   success- Authorize the application using OAuth token\*.. code:: bash   $ wdc login https://wedbav.server.ru -p http://127.0.0.1:8080 --token xxxxxxxxxxxxxxxxxx   proxy_login: p_login   proxy_password: p_password   successThere are also additional keys ``--root[-r]``, ``--cert-path[-c]`` and``--key-path[-k]``.**Utility**.. code:: bash    $ wdc check    success    $ wdc check file1    not success    $ wdc free    245234120344    $ wdc ls dir1    file1    ...    fileN    $ wdc mkdir dir2    $ wdc copy dir1/file1 -t dir2/file1    $ wdc move dir2/file1 -t dir2/file2    $ wdc download dir1/file1 -t ~/Downloads/file1    $ wdc download dir1/ -t ~/Downloads/dir1/    $ wdc upload dir2/file2 -f ~/Documents/file1    $ wdc upload dir2/ -f ~/Documents/    $ wdc publish di2/file2    https://yadi.sk/i/vWtTUcBucAc6k    $ wdc unpublish dir2/file2    $ wdc pull dir1/ -t ~/Documents/dir1/    $ wdc push dir1/ -f ~/Documents/dir1/    $ wdc info dir1/file1    {'name': 'file1', 'modified': 'Thu, 23 Oct 2014 16:16:37 GMT',    'size': '3460064', 'created': '2014-10-23T16:16:37Z'}WebDAV-server=============The most popular cloud-based repositories that support the ProtocolWebDAV can be attributed Yandex.Drive, Dropbox, Google Drive, Box and4shared. Access to data repositories, operating with access to theInternet. If necessary local locations and cloud storage, you can deployyour own WebDAV-server.**Local WebDAV-server**To deploy a local WebDAV server, using Docker containers quite easilyand quickly. To see an example of a local deploymentWebDAV servers canbe on the project`webdav-server-docker &lt;https://github.com/designerror/webdav-server-docker&gt;`__.**Supported methods**+----------------+--------+--------+--------+---------+---------+--------+--------+------------+----------+| Servers        | free   | info   | list   | mkdir   | clean   | copy   | move   | download   | upload   |+================+========+========+========+=========+=========+========+========+============+==========+| Yandex.Disk    | \+     | \+     | \+     | \+      | \+      | \+     | \+     | \+         | \+       |+----------------+--------+--------+--------+---------+---------+--------+--------+------------+----------+| Dropbox        | \-     | \+     | \+     | \+      | \+      | \+     | \+     | \+         | \+       |+----------------+--------+--------+--------+---------+---------+--------+--------+------------+----------+| Google Drive   | \-     | \+     | \+     | \+      | \+      | \-     | \-     | \+         | \+       |+----------------+--------+--------+--------+---------+---------+--------+--------+------------+----------+| Box            | \+     | \+     | \+     | \+      | \+      | \+     | \+     | \+         | \+       |+----------------+--------+--------+--------+---------+---------+--------+--------+------------+----------+| 4shared        | \-     | \+     | \+     | \+      | \+      | \-     | \-     | \+         | \+       |+----------------+--------+--------+--------+---------+---------+--------+--------+------------+----------+| Webdavserver   | \-     | \+     | \+     | \+      | \+      | \-     | \-     | \+         | \+       |+----------------+--------+--------+--------+---------+---------+--------+--------+------------+----------+Publish and unpublish methods supports only Yandex.Disk.**Configuring connections**To work with cloud storage Dropbox and Google Drive via the WebDAVProtocol, you must use a WebDAV-server DropDAV and DAV-pocket,respectively.A list of settings for WebDAV servers:.. code:: yaml    webdav-servers:     - yandex         hostname:  https://webdav.yandex.ru         login:     #login_for_yandex         password:  #pass_for_yandex     - dropbox          hostname:  https://dav.dropdav.com         login:     #login_for dropdav         password:  #pass_for_dropdav     - google         hostname:  https://dav-pocket.appspot.com         root:      docso         login:     #login_for_dav-pocket         password:  #pass_for_dav-pocket     - box         hostname:  https://dav.box.com         root:      dav         login:     #login_for_box         password:  #pass_for_box     - 4shared         hostname:  https://webdav.4shared.com         login:     #login_for_4shared         password:  #pass_for_4sharedAutocompletion==============For macOS, or older Unix systems you need to update bash... code:: bash    brew install bash    chsh    brew install bash-completionAutocompletion can be enabled globally.. code:: bash    sudo activate-global-python-argcompleteor locally.. code:: bash    #.bashrc    eval &quot;$(register-python-argcomplete wdc)&quot;.. |PyPI version| image:: https://badge.fury.io/py/webdavclient.svg   :target: http://badge.fury.io/py/webdavclient.. |Requirements Status| image:: https://requires.io/github/designerror/webdav-client-python/requirements.svg?branch=master&amp;style=flat   :target: https://requires.io/github/designerror/webdav-client-python/requirements/?branch=master&amp;style=flat.. |PullReview stats| image:: https://www.pullreview.com/github/designerror/webdavclient/badges/master.svg?   :target: https://www.pullreview.com/github/designerror/webdavclient/reviews/master.. |Github| image:: https://github.com/favicon.ico</longdescription>
</pkgmetadata>