<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## What is iqrfpy?iqrfpy is a library that provides a python API for interacting with the IQRF networkutilizing the [DPA framework](https://doc.iqrf.org/DpaTechGuide/) (DPA) or IQRF Gateway Daemon (Daemon) [JSON API](https://docs.iqrf.org/iqrf-gateway/user/daemon/api). Communication between a python runtime and the IQRF network is facilitated by transports.For communication with Daemon, only the MQTT transport is implemented at this time.However, this library provides an abstract transport class, allowing for custom communication implementations.The library provides classes for serialization of requests and deserialization of responses to message class objects.## Quick startiqrfpy can be installed using the pip utility:```bashpython3 -m pip install -U iqrfpy```Example use:```pythonfrom iqrfpy.transports.mqtt_transport import MqttTransport, MqttTransportParamsfrom iqrfpy.peripherals.coordinator.requests.bonded_devices import BondedDevicesRequestfrom iqrfpy.peripherals.coordinator.responses.bonded_devices import BondedDevicesResponseparams = MqttTransportParams(    host=..., # MQTT broker host    port=..., # MQTT broker port    client_id=..., # MQTT client ID    request_topic=..., # Request topic that Daemon subscribes to    response_topic=..., # Response topic that Daemon publishes responses to    qos=1,    keepalive=25)transport = MqttTransport(params=params, auto_init=True)request = BondedDevicesRequest()response: BondedDevicesResponse = transport.send_and_receive(request=request, timeout=10)print(response.bonded)```The library also provides a single import solution for messages:```pythonfrom iqrfpy.transports.mqtt_transport import MqttTransport, MqttTransportParamsfrom iqrfpy.messages import CoordinatorBondedDevicesReq, CoordinatorBondedDevicesRspparams = MqttTransportParams(    host=..., # MQTT broker host    port=..., # MQTT broker port    client_id=..., # MQTT client ID    request_topic=..., # Request topic that Daemon subscribes to    response_topic=..., # Response topic that Daemon publishes responses to    qos=1,    keepalive=25)transport = MqttTransport(params=params, auto_init=True)request = CoordinatorBondedDevicesReq()response: CoordinatorBondedDevicesRsp = transport.send_and_receive(request=request, timeout=10)print(response.bonded)```## DocumentationFor more information, check out our [API reference](https://apidocs.iqrf.org/iqrfpy/latest/iqrfpy.html).</longdescription>
</pkgmetadata>