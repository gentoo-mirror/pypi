<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![PyPI](https://img.shields.io/pypi/v/django-walletpass.svg)![t](https://img.shields.io/badge/status-beta-red.svg)# django-walletpassThis application implements the creation of **signed .pkpass** files and**API endpoints** for pass registration, updates and logging.## Features- Build .pkpass with the `PassBuilder` class- Sign .pkpass with SMIME (as apple describes in their documentation)- Server implementation for store, registration, update and logging- Push notifications (APNs) on pass update- Individual storage backend setting- Support for mime-type upload using django-storages S3## Requirements- Django 2.*, 3.*, 4.*- Python &gt;= 3.6- pyca/cryptography (for .pkpass SMIME sign)- djangorestframework &gt;= 3.8## Getting Started### Install```$ pip install django-walletpass```### ConfigureAdd 'django_walletpass' to you installed apps in the settings.py file.Load the content of your cert.pem and key.pem in your settings.py file. This is requiredfor signing the .pkpass file.```pythonWALLETPASS = {    'CERT_PATH': 'path/to/your/cert.pem',    'KEY_PATH': 'path/to/your/key.pem',    # (None if isn't protected)    # MUST be in bytes-like    'KEY_PASSWORD': b'1234',}```Add extra needed conf to your settings.py file.```pythonWALLETPASS = {    'CERT_PATH': 'path/to/your/cert.pem',    'KEY_PATH': 'path/to/your/key.pem',    # (None if isn't protected)    # MUST be in bytes-like    'KEY_PASSWORD': b'1234',    'PASS_TYPE_ID': 'pass.io.develat.devpubs.example',    'TEAM_ID': '123456',    'SERVICE_URL': 'https://example.com/passes/',}```Add token JWT config data to allow APNs push:```pythonWALLETPASS = {    'PUSH_AUTH_STRATEGY': 'token',    'TOKEN_AUTH_KEY_PATH': 'path/to/your/key.p8',    'TOKEN_AUTH_KEY_ID': 'key_id',    'PASS_TYPE_ID': 'pass.io.develat.devpubs.example',    'TEAM_ID': '123456',    'SERVICE_URL': 'https://example.com/passes/',}```You should also import the urls into your site urls.```pythonurlpatterns = [    url(r'^api/passes/', include('django_walletpass.urls')),```django-walletpass signals certain events that might come handy in yourapplication.```pythonfrom django_walletpass.classviews import PASS_REGISTERED, PASS_UNREGISTERED@receiver(PASS_REGISTERED)def pass_registered(sender, **kwargs):    pass@receiver(PASS_UNREGISTERED)def pass_unregistered(sender, **kwargs):    pass```### Configure storage and upload path (optional)Default: DEFAULT_FILE_STORAGE```pythonWALLETPASS_CONF = {    # Defaults to DEFAULT_FILE_STORAGE    'STORAGE_CLASS': 'my.custom.storageclass,    'UPLOAD_TO': 'passes'}```### Push notifications sandbox (optional)Default: False```pythonWALLETPASS_CONF = {    'PUSH_SANDBOX': False,}```### CA certificates path (optional)```pythonWALLETPASS_CONF = {    # Cert in pem format.    'APPLE_WWDRCA_PEM_PATH': 'path/to/cert.pem',}```### Redirect to pass url (optional)Usefull if you are using `django-storages` and you want to serve your .pkpassfiles from `s3`.Default: False```pythonWALLETPASS_CONF = {    STORAGE_HTTP_REDIRECT: True,}```## Build and sign passes### Init builder object:Init empty builder```pythonfrom django_walletpass.models import PassBuilderbuilder = PassBuilder()```Init builder usign a directory as base```pythonfrom django_walletpass.models import PassBuilderbuilder = PassBuilder(directory='/path/to/your.pass/')```If the base directory contains a `pass.json` it will be loaded, but rememberthat required attributes of `pass.json` will be overwritten during build processusing this values:```python{    &quot;passTypeIdentifier&quot;: WALLETPASS_CONF['PASS_TYPE_ID'],    &quot;serialNumber&quot;: secrets.token_urlsafe(20),    &quot;teamIdentifier&quot;: WALLETPASS_CONF['TEAM_ID'],    &quot;webServiceURL&quot;: WALLETPASS_CONF['SERVICE_URL'],    &quot;authenticationToken&quot;: crypto.gen_random_token(),}```### Handle pass.json dataTo handle `pass.json` data, there is a dict inside your builder instance, youcan manage it like a normal python dictionary.Update some attrs:```pythonbuilder.pass_data.update({  &quot;barcode&quot;: {    &quot;message&quot;: &quot;123456789&quot;,    &quot;format&quot;: &quot;PKBarcodeFormatPDF417&quot;,    &quot;messageEncoding&quot;: &quot;iso-8859-1&quot;  },  &quot;organizationName&quot;: &quot;Organic Produce&quot;,  &quot;description&quot;: &quot;Organic Produce Loyalty Card&quot;,})```Update one attr:```pythonbuilder.pass_data['description'] = &quot;Organic Produce Loyalty Card&quot;```### Overwrite automatically generated required attribute values```pythonbuilder.pass_data_required.update({    &quot;passTypeIdentifier&quot;: &quot;customvalue&quot;,    &quot;serialNumber&quot;: &quot;customvalue&quot;,    &quot;teamIdentifier&quot;: &quot;customvalue&quot;,    &quot;webServiceURL&quot;: &quot;customvalue&quot;,    &quot;authenticationToken&quot;: &quot;customvalue&quot;,})```you can overwrite individual attributes:```pythonbuilder.pass_data_required.update({    &quot;serialNumber&quot;: &quot;customvalue&quot;,})builder.pass_data_required['serialNumber] = 'cutomvalue'```### Add extra files```pythonfile_content = open('myfile', 'rb').read()builder.add_file('image.png', file_content)```You can also add files to directories:```pythonfile_content = open('myfile', 'rb').read()builder.add_file('en.lproj/pass.strings', file_content)```### Build .pkpassBuild the content of .pkpass```pythonpkpass_content = builder.build()```Write to file:```pythonpkpass_file = open('mypass.pkpass', 'rb')pkpass_file.write(pkpass_content)```Save to new record in DB:```pythonpass_instance = builder.write_to_model()pass_instance.save()```Save to existent record in DB:```pythonbuilder.write_to_model(pass_instance)pass_instance.save()```### Load .pkpass from DB and update```pythonbuilder = pass_instance.get_pass_builder()builder.pass_data.update({'field': 'value'})builder.build()builder.save_to_db(pass_instance)```### Run tests locallyCheckout source and run from source root directory```bashdocker run -it --rm -v &quot;$(pwd):/app&quot; python:3.8 bash -c &quot;cd /app; python setup.py install; ./example/manage.py test django_walletpass&quot;```</longdescription>
</pkgmetadata>