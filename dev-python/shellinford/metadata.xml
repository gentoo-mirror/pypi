<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>shellinford===========|travis| |coveralls| |pyversion| |version| |license|Shellinford is an implementation of a Wavelet Matrix/Tree succinct data structure for document retrieval.It is based on `shellinford`_ C++ library... _shellinford: https://github.com/echizentm/shellinfordNOTE: This module requires C++11 compilerInstallation============:: $ pip install shellinfordUsage=====Create a new FM-index instance-------------------------------.. code:: python &gt;&gt;&gt; import shellinford &gt;&gt;&gt; fm = shellinford.FMIndex()- shellinford.Shellinford([use_wavelet_tree=True, filename=None])  - When given a filename, Shellinford loads FM-index data from the fileBuild FM-index-----------------------------.. code:: python &gt;&gt;&gt; fm.build(['Milky Holmes', 'Sherlock &quot;Sheryl&quot; Shellingford', 'Milky'], 'milky.fm')- build([docs, filename])  - When given a filename, Shellinford stores FM-index data to the fileSearch word from FM-index---------------------------------.. code:: python &gt;&gt;&gt; for doc in fm.search('Milky'): &gt;&gt;&gt;     print('doc_id:', doc.doc_id) &gt;&gt;&gt;     print('count:', doc.count) &gt;&gt;&gt;     print('text:', doc.text) doc_id: 0 count: [1] text: Milky Holmes doc_id: 2 count: [1] text: Milky &gt;&gt;&gt; for doc in fm.search(['Milky', 'Holmes']): &gt;&gt;&gt;     print('doc_id:', doc.doc_id) &gt;&gt;&gt;     print('count:', doc.count) &gt;&gt;&gt;     print('text:', doc.text) doc_id: 1 count: [1] text: Milky Holmes- search(query, [_or=False, ignores=[]])  - If `_or` = True, then &quot;OR&quot; search is executed, else &quot;AND&quot; search  - Given `ignores`, &quot;NOT&quot; search is also executed  - NOTE: The search function is available after FM-index is built or loadedCount word from FM-index---------------------------------.. code:: python &gt;&gt;&gt; fm.count('Milky'): 2 &gt;&gt;&gt; fm.count(['Milky', 'Holmes']): 1- count(query, [_or=False])  - If `_or` = True, then &quot;OR&quot; search is executed, else &quot;AND&quot; search  - NOTE: The count function is available after FM-index is built or loaded  - This function is slightly faster than the search functionAdd a document---------------------------------.. code:: python &gt;&gt;&gt; fm.push_back('Baritsu')- push_back(doc)  - NOTE: A document added by this method is not available to search until buildRead FM-index from a binary file---------------------------------.. code:: python &gt;&gt;&gt; fm.read('milky_holmes.fm')- read(path)Write FM-index binary to a file---------------------------------.. code:: python &gt;&gt;&gt; fm.write('milky_holmes.fm')- write(path)Check Whether FM-Index contains string---------------------------------------.. code:: python &gt;&gt;&gt; 'baritsu' in fmLicense=========- Wrapper code is licensed under the New BSD License.- Bundled `shellinford`_ C++ library (c) 2012 echizen_tm is licensed under the New BSD License... |travis| image:: https://travis-ci.org/ikegami-yukino/shellinford-python.svg?branch=master    :target: https://travis-ci.org/ikegami-yukino/shellinford-python    :alt: travis-ci.org.. |coveralls| image:: https://coveralls.io/repos/ikegami-yukino/shellinford-python/badge.svg?branch=master&amp;service=github    :target: https://coveralls.io/github/ikegami-yukino/shellinford-python?branch=master    :alt: coveralls.io.. |pyversion| image:: https://img.shields.io/pypi/pyversions/shellinford.svg.. |version| image:: https://img.shields.io/pypi/v/shellinford.svg    :target: http://pypi.python.org/pypi/shellinford/    :alt: latest version.. |license| image:: https://img.shields.io/pypi/l/shellinford.svg    :target: http://pypi.python.org/pypi/shellinford/    :alt: licenseCHANGES=======0.4.1 (2010-02-08)------------------- Make &quot;in&quot; operator faster0.4.0 (2018-09-30)------------------- `FMIndex.count()` is added- No longer support Python 2.6- bug fix0.3.5 (2018-09-05)------------------- `FMIndex.build()` and `FMIndex.pushback()` ignore empty string- `FMIndex` supports &quot;in&quot; operator. (e.g., 'a' in fm)- Support Python 3.5, 3.6 and 3.70.3.4 (2016-10-28)------------------- `FMIndex.search()` returns list0.3 (2014-11-24)----------------- &quot;OR&quot; search and &quot;NOT&quot; search are available in `FMIndex.search()`.- `FMIndex.size` and `FMIndex.docsize` are available as property0.2 (2014-03-28)----------------&quot;AND&quot; search is available by giving Sequence (list, tuple, etc.) `FMIndex.search()`0.1 (2014-03-11)----------------First release.</longdescription>
</pkgmetadata>