<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Rialtic Engine Development Library (Python)This repository contains common modules for developing Rialtic Insight Engines with Python.## API Documentation (Sphinx)The code in this repository is documented using [`sphinx`](https://www.sphinx-doc.org/en/master/) and[`autodoc`](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#module-sphinx.ext.autodoc). Thisdocumentation can be generated locally. `autodoc` will generate basic documentation automatically from code, anddocstrings in the code can be used to add additional information to the generated documentation.### Documentation Practices#### Docstring FormatWe use `sphinx.ext.napoleon`, which allows us to use a simpler, more concise format for docstrings(popularized by NumPy and Google projects). Seethe [NumPy documentation](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard)for an overview of how to use this style of docstrings.**NOTE:** One main way that our docs differ from the standard described in the NumPy docs is with regard tothe `Returns` section. We do not need to specify return type in our docsâ€”we have the`sphinx_autodoc_typehints` extension, which automatically reads return type from type annotations in code.#### Docstring GuidelinesAny docstrings written will eventually need to be edited or rewritten. With this in mind, it is valuable for ourdocstrings to be concise and minimal, providing only necessary information, to reduce the work required to maintainthese docs.For simple methods and functions, the generated function signature docs may even be sufficient. In these cases adocstring can consist of only a single line summary.If you find yourself writing a very long complex docstring, consider whether the object being documented could use arefactor, or needs to be simplified in some way.### Generating HTML Documentation LocallyThe generated documentation will be hosted somewhere accessible on the web, but can also be generated locally in severalformats including HTML and PDF. Follow the instructions below to generate HTML documentation locally:1.  ```bash    $ git clone git@github.com:rialtic-community/rialtic-engine-lib-py.git    $ cd rialtic-engine-lib-py/docs    $ make html    ```    2. Open the following file in a browser    ```bash    rialtic-engine-lib-py/docs/_build/html/index.html    ```# Engine Data SDK## Publishing to Nexus repositoryThis is likely to change quite a bit before it stabilizes, so we are keeping only one set of instructions as a source of truth.For a step by step, please, refer to the instructions in the `README.md` in branch `release-makefile` in the schema repository.[schema repository](https://github.com/rialtic-community/insight-engine-schema-python/blob/develop/README.md)In addition to the environment variables that have to be defined (as explained in the link above), for this repository, we also have to define:```shellexport APIKEY=...export RIALTIC_REF_DB=demodbexport RIALTIC_DATA_ENV=local```</longdescription>
</pkgmetadata>