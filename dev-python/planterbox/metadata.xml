<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>planterbox==========.. image:: https://api.travis-ci.org/npilon/planterbox.png?branch=master        :target: https://travis-ci.org/npilon/planterboxA plugin for running behavior-driven tests using`gherkin &lt;https://github.com/cucumber/cucumber/wiki/Gherkin&gt;`__ inside``nose2``.Usage-----To enable ``planterbox`` for your project, you'll want to add thefollowing lines (or similar) to your ``unittest.cfg``:.. code:: ini    [unittest]    plugins = planterbox    [planterbox]    always-on = True``planterbox`` is compatible with ``nose2.plugins.mp``.Writing Tests-------------``planterbox`` tests exist inside a python package which provides acontext for their execution. You should write your tests in ``.feature``files in the package directory. ``.feature`` files have access to allsteps defined in or imported into their package's ``__init__.py``. Forexample, with the directory structure:::    planterbox/      tests/        test_feature/          __init__.py          basic.featureIf ``__init__.py`` contains:.. code:: python    from planterbox import step    @step(r'I add (\d+) and (\d+)')    def add(test, a, b):        a = int(a)        b = int(b)        test.result = a + b    @step(r'the result should be (\d+)')    def check_result(test, value):        value = int(value)        test.assertEqual(test.result, value)``basic.feature`` could contain:.. code:: gherkin    Feature: Basic Tests        I want to exercise generation of a simple test from a feature.        Scenario: I need to verify basic arithmetic.            Given I add 1 and 1            Then the result should be 2We could then run this test either by running all of the tests in thesuite with ``nose2`` or run it specifically with``nose2 planterbox.tests.test_feature:basic.feature``. We could even runthe first scenario specifically with``nose2 planterbox.tests.test_feature:basic.feature:0``.Writing Steps-------------``planterbox`` steps are python functions decorated with``@planterbox.step(PATTERN)``. ``PATTERN`` can be a python regularexpression, which must start matching expected step text after the`gherkin stepprefixes &lt;https://github.com/cucumber/cucumber/wiki/Given-When-Then&gt;`__.Groups matched within ``PATTERN`` are provided to the decorated functionas arguments. All steps are provided with the ``ScenarioTestCase``object for the currently executing scenario as their first argument.Unnamed groups are provided to the step as positional arguments afterthis. Named groups will be passed as keyword arguments. ``PATTERN``cannot mix unnamed and named groups. If any named groups are used, allgroups must be named groups.All the steps in a feature's package will be available to that feature'sscenario. These steps can be defined in the package or imported fromsomewhere else.Hooks, Setup, and Teardown--------------------------``setUpModule`` and ``tearDownModule`` methods in a feature's``__init__.py`` will be run before and after all features in thatpackage, respectively. ``planterbox`` provides some extra hooks fordoing preparation or cleanup. Functions can be registered as hooks bydecorating them with ``@planterbox.hook(TIMING, STAGE)``. ``TIMING`` canbe ``'before'`` or ``'after'`` and ``STAGE`` any of ``'feature'``,``'scenario'``, ``'step'``, ``'failure'``, or ``'error'``.All hooks are expected to take one argument: the ``TestCase`` subclassfor the active feature.As with steps, hooks must be directly present in the feature's``__init__.py`` in order to be run.Scenario Outlines-----------------``planterbox`` supports scenario outlines. These allow you to execute ascenario multiple times with different values. For example:.. code:: gherkin    Feature: Example Tests        I want to exercise generation of a test with examples from a feature.        Scenario Outline: I need to verify basic arithmetic with examples.            Given I add &lt;x&gt; and &lt;y&gt;            Then the result should be &lt;z&gt;            Examples:                x | y | z                1 | 1 | 2                1 | 2 | 3                2 | 1 | 3                2 | 2 | 4You may also specify Examples in a .csv file by using ``Examples file:`` followed by the path to the .csv file on the next line... code:: gherkin  Feature: Example Tests    I want to exercise using a csv file for examples      Scenario Outline: I want to exercise using a csv file for examples          Given I squiggly-add {&lt;x&gt;} and {&lt;y&gt;}          Then the result should be &lt;z&gt;          Examples file:            /tests/test_feature/examples.csvYour ``'before'`` and ``'after'`` ``'scenario'`` hooks will only runonce for the entire scenario outline.Invoking Tests--------------You can run tests by allowing nose2's autodiscovery to find all of your tests,or you can specify specific tests to be run on the command line. Whenspecifying specific tests, you can either specify an entire package,an entire feature, or individual scenarios. Individual scenarios can bespecified either by index (from 0) or by name... code::    nose2 planterbox.tests.test_feature    nose2 planterbox.tests.test_feature:basic.feature planterbox.tests.test_hooks:hooks.feature    nose2 planterbox.tests.test_feature:basic.feature:1    nose2 planterbox.tests.test_feature:basic.feature:0    nose2 planterbox.tests.test_feature:basic.feature:&quot;I need to verify basic arithmetic&quot;    nose2 planterbox.tests.test_feature:basic.feature:&quot;I need to verify basic arithmetic.&quot;If your feature includes multiple scenarios with the same name, all will berun when that name is given. Names with a trailing period can be specified withor without the trailing period.Validating Tests----------------You can use the ``--planterbox-check-only`` flag to verify that your featuresare correct without running them::  nose2 --planterbox-check-only planterbox.tests.test_feature  ----------------------------------------------------------------------  Ran 0 tests in 0.000s  OKWhile a failure would produce a traceback::  nose2 --planterbox-check-only planterbox.tests.test_feature  Traceback (most recent call last):    File &quot;planterbox_ve/bin/nose2&quot;, line 11, in &lt;module&gt;      sys.exit(discover())    File &quot;nose2/main.py&quot;, line 306, in discover      return main(*args, **kwargs)    File &quot;nose2/main.py&quot;, line 100, in __init__      super(PluggableTestProgram, self).__init__(**kw)    File &quot;/opt/python/lib/python3.6/unittest/main.py&quot;, line 94, in __init__      self.parseArgs(argv)    File &quot;nose2/main.py&quot;, line 133, in parseArgs      self.createTests()    File &quot;nose2/main.py&quot;, line 258, in createTests      self.testNames, self.module)    File &quot;nose2/loader.py&quot;, line 68, in loadTestsFromNames      for name in event.names]    File &quot;nose2/loader.py&quot;, line 68, in &lt;listcomp&gt;      for name in event.names]    File &quot;nose2/loader.py&quot;, line 83, in loadTestsFromName      result = self.session.hooks.loadTestsFromName(event)    File &quot;nose2/events.py&quot;, line 225, in __call__      result = getattr(plugin, self.method)(event)    File &quot;nose2/plugins/loader/discovery.py&quot;, line 247, in loadTestsFromName      return Discoverer.loadTestsFromName(self, event)    File &quot;nose2/plugins/loader/discovery.py&quot;, line 84, in loadTestsFromName      self._find_tests_in_module(event, module, top_level_dir))    File &quot;nose2/plugins/loader/discovery.py&quot;, line 229, in _find_tests_in_module      event, full_path, top_level_dir):    File &quot;nose2/plugins/loader/discovery.py&quot;, line 161, in _find_tests_in_dir      event, path, entry_path, top_level):    File &quot;nose2/plugins/loader/discovery.py&quot;, line 176, in _find_tests_in_file      result = self.session.hooks.handleFile(evt)    File &quot;nose2/events.py&quot;, line 225, in __call__      result = getattr(plugin, self.method)(event)    File &quot;planterbox/planterbox/plugin.py&quot;, line 106, in handleFile      feature_path=feature_path,    File &quot;planterbox/planterbox/plugin.py&quot;, line 75, in makeSuiteFromFeature      config=self.config,    File &quot;planterbox/planterbox/feature.py&quot;, line 81, in __init__      self.check_scenarios()    File &quot;planterbox/planterbox/feature.py&quot;, line 227, in check_scenarios      raise UnmatchedStepException(&quot;Unmatched steps:\n&quot; + '\n'.join(unmatched))  planterbox.exceptions.UnmatchedStepException: Unmatched steps:          Given I bad 1 and 1</longdescription>
</pkgmetadata>