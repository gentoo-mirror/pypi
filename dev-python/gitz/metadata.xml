<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ðŸ—œ gitz - git commands for rapid development ðŸ—œ------------------------------------------------------This is a collection of seventeen git utilities aimed at people doing rapiddevelopment using Git.Gitz is for two types of users - quality-obsessed individuals who relentlesslymanicure their pull requests until every byte is in the right place; andultra-rapid developers who want to generate large features quickly while takingadvantage of continuous integration.Most of these utilities only exist here, one came from a chat on Reddit andI don't know where one of them came from.Four of them are written in Bash, the rest use Python 3.  They have been testedon Mac OS/X (Darwin) and on Ubuntu, and will likely work on any Unix-likeoperating system.How to install==============Use `pip &lt;https://pypi.org/project/pip/&gt;`_:.. code-block:: bash    pip3 install gitzOr simply download`this directory &lt;https://github.com/rec/gitz/zipball/master/&gt;`_and make sure it's in your shell's ``PATH`` - gitz has noexternal dependencies.Getting help============This page contains a summary and a link to a manual page for each command.  Fromthe terminal, use ``-h`` flag like this: ``git new -h`` or use ``man`` likethis: ``man git-new``.When to use gitz=================1. At the start of a session   - ``git new`` safely creates fresh branches from upstream   - ``git update`` for each branch, rebases from upstream and force-pushes2. During development   - ``git st`` is a more compact and prettier ``git status``   - ``git when`` shows you when documents were last changed3. During rapid development   - ``git infer`` commits files with an automatically generated message -     great for committing tiny changes for later rebasing down4. While cleaning up a branch for review   - ``git permute`` permutes, squashes or removes commits in the current branch   - ``git split`` split one or more commits, perhaps with the staging area,     into many small individual commits, one per file5. During repository maintenance   - ``git rotate`` rotates through all branches   - ``git copy``, ``git delete``,  and ``git rename`` work on both local     and upstream branches6. Working with continuous integration   - ``git stripe`` pushes a sequence of commits to individual remote branches     where CI can find and test themThe movie==========.. figure:: https://asciinema.org/a/XwakAaMsMzKg4hIAJa18iiNac.png    :target: https://asciinema.org/a/XwakAaMsMzKg4hIAJa18iiNac?autoplay=1&amp;theme=solarized-light&amp;loop=1    :align: center    :alt: The whole gitz movie    :width: 430    :height: 402The gitz commands-----------------Safe commands=============Informational commands that don't change your repository`git gitz &lt;doc/git-gitz.rst&gt;`_  Print information about the gitz git commands`git go &lt;doc/git-go.rst&gt;`_  Open a browser page for the current repo`git infer &lt;doc/git-infer.rst&gt;`_  Commit changes with an automatically generated message    (from https://github.com/moondewio/git-infer)`git multi-pick &lt;doc/git-multi-pick.rst&gt;`_  Cherry-pick multiple commits, with an optional squash`git new &lt;doc/git-new.rst&gt;`_  Create and push new branches`git rot &lt;doc/git-rot.rst&gt;`_  Rotate through branches in a Git repository`git st &lt;doc/git-st.rst&gt;`_  Colorful, compact git status`git stripe &lt;doc/git-stripe.rst&gt;`_  Push a sequence of commit IDs to a remote repository`git when &lt;doc/git-when.rst&gt;`_  For each file, show the most recent commit that changed it.    Dotfiles are ignored by default.Dangerous commands that delete, rename or overwrite branches============================================================`git copy &lt;doc/git-copy.rst&gt;`_  Copy a git branch locally and remotely`git delete &lt;doc/git-delete.rst&gt;`_  Delete one or more branches locally and remotely`git rename &lt;doc/git-rename.rst&gt;`_  Rename a git branch locally and remotelyBy default, the branches ``develop`` and ``master`` are protected -they are not allowed to be copied to, renamed, or deleted.You can configure this in three ways:- setting the ``--all/-a`` flag ignore protected branches entirely- setting the environment variable ``GITZ_PROTECTED_BRANCHES`` overrides these  defaults- setting a value for the keys ``PROTECTED_BRANCHES`` in the file  .gitz.json in the top directory of your Git project has the same effectDangerous commands that rewrite history=======================================Slice, dice, shuffle and split your commits.These commands are not intended for use on a shared or production branch, butcan significantly speed up rapid development on private branches.`git adjust &lt;doc/git-adjust.rst&gt;`_  Amend any commit, not just the last`git permute &lt;doc/git-permute.rst&gt;`_  Reorder and delete commits in the current branch`git split &lt;doc/git-split.rst&gt;`_  Split a range of commits into many single-file commits`git update &lt;doc/git-update.rst&gt;`_  Update branches from a reference branch</longdescription>
</pkgmetadata>