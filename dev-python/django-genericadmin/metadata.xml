<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-genericadmin===================A simple django app to make the lookup of generic models easier.Installation------------To install add it to your ``INSTALLED_APPS`` setting. There is no needto run ``manage.py syncdb`` because *django-genericadmin* does not haveany models... code:: python    INSTALLED_APPS = (       ...       'genericadmin',       ...    )If you are using the staticfiles app, then run``manage.py collectstatic`` and you should be good to go.If you don't know what I'm talking about or your django version &lt; 1.3,then you should link or copy ``genericadmin/media/js/`` to your assetdirectory and set ``GENERICADMIN_JS`` to a the relative destination ofyour just copied files.Usage-----To use *django-genericadmin* your model admin class must inherit from``GenericAdminModelAdmin``.So a model admin like.. code:: python    class NavBarEntryAdmin(admin.ModelAdmin):        pass    admin.site.register(NavBarEntry, NavBarEntryAdmin)becomes.. code:: python    from genericadmin.admin import GenericAdminModelAdmin    class NavBarEntryAdmin(GenericAdminModelAdmin):        pass    admin.site.register(NavBarEntry, NavBarEntryAdmin)That's it.Provided admin classes----------------------A short overview of the admin classes and their uses provided by*django-genericadmin*.-  **GenericAdminModelAdmin** — The admin for a standard Django model   that has at least one generic foreign relation.-  **TabularInlineWithGeneric** and **StackedInlineWithGeneric** —   Normal inline admins for models that have a generic relation and are   edited inline.-  **GenericTabularInline** and **GenericStackedInline** — Used to   provide *True Polymorphic Relationships* (see below) and generic   relations in the admin. Also see the Django docs   `here &lt;https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#generic-relations-in-forms-and-admin&gt;`__.Inline Usage------------To use *django-genericadmin* with admin inlines, your models mustinherit from ``GenericAdminModelAdmin`` as described above:.. code:: python    from genericadmin.admin import GenericAdminModelAdmin    class NavBarEntryAdmin(GenericAdminModelAdmin):        pass    admin.site.register(NavBarEntry, NavBarEntryAdmin)Additionally the inline classes must inherit from either``StackedInlineWithGeneric`` or ``TabularInlineWithGeneric``:.. code:: python    from genericadmin.admin import GenericAdminModelAdmin, TabularInlineWithGeneric    class PagesInline(TabularInlineWithGeneric):        model = ...    class NavBarEntryAdmin(GenericAdminModelAdmin):        inlines = [PagesInline, ]    ...Note that you can't mix and match. If you're going to use a genericinline, the class using it must inherit from ``GenericAdminModelAdmin``.Specifying which fields are handled-----------------------------------In most cases *django-genericadmin* will correctly figure out whichfields on your model are generic foreign keys and just do the rightthing. If you want to specify the fields yourself (Control your owndestiny and all that) you can use the ``generic_fk_fields`` attribute onthe admin class. Note that you can specify the fields on each adminclass for inline admins. So, for the above mentioned inline admin, youwould do it like so:.. code:: python    class PagesInline(TabularInlineWithGeneric):        model = AReallyCoolPage        generic_fk_fields = [{            'ct_field': &lt;field_name_for_contenttype_fk&gt;,            'fk_field': &lt;field_name_for_object_id&gt;,        }]If you want to use more then one field pair, you can just add more dictsto the list.If you use the ``ct_field`` and ``ct_fk_field`` attributes*django-genericadmin* will always just ignore those fields and not eventry to use them.Blacklisting Content Types--------------------------Specific content types can be removed from the content type select list.Example:.. code:: python    class NavBarEntryAdmin(GenericAdminModelAdmin):        content_type_blacklist = ('auth/group', 'auth/user', )Whitelisting Content Types--------------------------Specific content types that can be display from the content type selectlist. Example:.. code:: python    class NavBarEntryAdmin(GenericAdminModelAdmin):        content_type_whitelist = ('auth/message', )Note that this only happens on the client; there is no enforcement ofthe blacklist at the model level.Lookup parameters by Content Type---------------------------------Supply extra lookup parameters per content type similar to howlimit\_choices\_to works with raw id fields. Example:.. code:: python    class NavBarEntryAdmin(GenericAdminModelAdmin):        content_type_lookups = {'app.model': {'field': 'value'}True Polymorphic Relationships------------------------------``django-genericadmin`` also provides a UI to easily manage aparticularly useful model that, when used as an inline on another model,enables relations from any entry of any model to any other entry of anyother model. And, because it has a generic relationship moving in bothdirections, it means it can be attached as an inline *to any model*without having to create unique, individual foreign keys for each modelyou want to use it on.Here's an example of a polymorphic model:.. code:: python    from django.db import models    from django.contrib.contenttypes.models import ContentType    from django.contrib.contenttypes import generic    class RelatedContent(models.Model):        &quot;&quot;&quot;        Relates any one entry to another entry irrespective of their individual models.        &quot;&quot;&quot;        content_type = models.ForeignKey(ContentType)        object_id = models.PositiveIntegerField()        content_object = generic.GenericForeignKey('content_type', 'object_id')        parent_content_type = models.ForeignKey(ContentType, related_name=&quot;parent_test_link&quot;)        parent_object_id = models.PositiveIntegerField()        parent_content_object = generic.GenericForeignKey('parent_content_type', 'parent_object_id')        def __unicode__(self):            return &quot;%s: %s&quot; % (self.content_type.name, self.content_object)And here's how you'd set up your admin.py:.. code:: python    from whateverapp.models import RelatedContent    from genericadmin.admin import GenericAdminModelAdmin, GenericTabularInline    class RelatedContentInline(GenericTabularInline):        model = RelatedContent        ct_field = 'parent_content_type' # See below (1).        ct_fk_field = 'parent_object_id' # See below (1).    class WhateverModelAdmin(GenericAdminModelAdmin): # Super important! See below (2).        content_type_whitelist = ('app/model', 'app2/model2' ) # Add white/black lists on this class        inlines = [RelatedContentInline,](1) By default ``ct_field`` and ``ct_fk_field`` will default to``content_type`` and ``object_id`` respectively. ``ct_field`` and``ct_fk_field`` are used to create the parent link from the inline tothe model you are attaching it to (similar to how Django does thisattachment using foreign keys with more conventional inlines). You couldalso leave this configuration out of your inline classes but, if you dothat, I encourage you to change the model attributes from``parent_content_type`` &amp; ``parent_object_id`` to ``child_content_type``&amp; ``child_object_id``. I say this because, when it comes time to makequeries, you'll want to know which direction you're 'traversing' in.(2) Make sure that whatever the admin classes are utilizing theseinlines are subclasses of ``GenericAdminModelAdmin`` from``django-genericadmin`` or else the handy-dandy javascript-utilizinginterface won't work as intended.</longdescription>
</pkgmetadata>