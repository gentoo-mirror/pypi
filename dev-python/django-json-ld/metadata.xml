<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-json-ldThis is a django template tag to help developers render [structured data](https://developers.google.com/search/docs/guides/intro-structured-data) tags inside their django templates.Furthermore a collection of views and mixins are included: * `JsonLdContextMixin`, `JsonLdView` * `JsonLdSingleObjectMixin`, `JsonLdDetailView`## InstallationInstall using `pip`:```pip install django-json-ld```Add `django_json_ld` to `INSTALLED_APPS` in `settings.py`:```INSTALLED_APPS = [    # Other apps...    'django_json_ld',]```## SettingsYou can override the following options in settings.py:`JSON_LD_CONTEXT_ATTRIBUTE`: the context attribute name used in `django_json_ld`'s Class-Based Views (CBV). Defaults to `'sd'`.`JSON_LD_MODEL_ATTRIBUTE`: the model attribute name used by `JsonLdDetailView` to get the model's structured data. Defaults to `'sd'`.`JSON_LD_DEFAULT_CONTEXT`: default json-ld context when using `django_json_ld`'s CBVs. Defaults to `'https://schema.org/'`.`JSON_LD_INDENT`: indent are used by `json.dumps` function to prettify output. Valid values are `None` or a non-negative integer. Defaults to `None` - outputs on a single line. This setting is used only if ``DEBUG`` is ``True```JSON_LD_DEFAULT_TYPE`: default json-ld type when using `django_json_ld`'s CBVs. Defaults to `'Thing'`.`JSON_LD_GENERATE_URL`: generate json-ld's `url` field when using `django_json_ld`'s CBVs. Defaults to `True`.`JSON_LD_EMPTY_INPUT_RENDERING`: behavior when the template tag receives an empty object. Possible values:* `strict` default, raise TemplateSyntaxError.* `silent` renders nothing.* `generate_thing` creates object with URL of current page. eg: ```structured_data = {                &quot;@context&quot;: &lt;JSON_LD_DEFAULT_CONTEXT&gt;,                &quot;@type&quot;: &lt;JSON_LD_DEFAULT_TYPE&gt;,                &quot;url&quot;: &lt;current_page_url&gt;,                }```## Usage ExampleAssuming you have a structured data `sd` like the following in your context (copied from the link above).```sd = {  &quot;@context&quot;: &quot;https://schema.org/&quot;,  &quot;@type&quot;: &quot;Organization&quot;,  &quot;url&quot;: &quot;http://www.example.com/&quot;,  &quot;name&quot;: &quot;Unlimited Ball Bearings Corp.&quot;,  &quot;contactPoint&quot;: {    &quot;@type&quot;: &quot;ContactPoint&quot;,    &quot;telephone&quot;: &quot;+1-401-555-1212&quot;,    &quot;contactType&quot;: &quot;Customer service&quot;    }}```Then, in your template:```{% load render_json_ld from json_ld %}{% render_json_ld sd %}```Would render into:```&lt;script type=&quot;application/ld+json&quot;&gt;{  &quot;@context&quot;: &quot;https://schema.org/&quot;,  &quot;@type&quot;: &quot;Organization&quot;,  &quot;url&quot;: &quot;http://www.example.com/&quot;,  &quot;name&quot;: &quot;Unlimited Ball Bearings Corp.&quot;,  &quot;contactPoint&quot;: {    &quot;@type&quot;: &quot;ContactPoint&quot;,    &quot;telephone&quot;: &quot;+1-401-555-1212&quot;,    &quot;contactType&quot;: &quot;Customer service&quot;  }}&lt;/script&gt;```### Class-Based View example#### Simple Viewviews.py```pythonfrom django_json_ld.views import JsonLdContextMixinclass HomeView(JsonLdContextMixin, generic.ListView):    structured_data = {        &quot;@type&quot;: &quot;Organization&quot;,        &quot;name&quot;: &quot;The Company&quot;,        &quot;description&quot;: _(&quot;A great company.&quot;),    }        def get_structured_data(self):        structured_data = super(HomeView, self).get_structured_data()        structured_data[&quot;event&quot;] = get_next_event()        return structured_data```By using  `{% render_json_ld sd %}`, as explained in the previous example, would render into something like:```json{    &quot;@context&quot;:&quot;https://schema.org/&quot;,        &quot;@type&quot;:&quot;Organization&quot;,    &quot;name&quot;:&quot;The Company&quot;,    &quot;description&quot;:&quot;Uma grande empresa.&quot;,    &quot;url&quot;:&quot;http://example.org/&quot;,    &quot;event&quot;: {        &quot;@type&quot;: &quot;Event&quot;,        &quot;about&quot;: [&quot;Hodler&quot;,&quot;Monet&quot;,&quot;Munch&quot;],        &quot;name&quot;: &quot;Peindre l'impossible&quot;,        &quot;startDate&quot;: &quot;2016-09-15&quot;,        &quot;endDate&quot;: &quot;2017-01-22&quot;    }}```In the above example `JsonLdContextMixin` adds `sd` to `HomeView`'s context. `django_json_ld` supports lazy translations, hence `&quot;description&quot;` showing the translated version of its original value.#### Detail Viewviews.py```pythonfrom django_json_ld.views import JsonLdDetailViewclass ProductDetailView(JsonLdDetailView):    model=Product```models.py```pythonclass Product(models.Model):    name = models.CharField(_('Name'), max_length=255)    description = models.TextField(_('Description'))        @property    def sd(self):        return {            &quot;@type&quot;: 'Product',            &quot;description&quot;: self.description,            &quot;name&quot;: self.name,        }```By using  `{% render_json_ld sd %}`, as explained previously, would render into something like:```json{    &quot;@context&quot;:&quot;https://schema.org/&quot;,        &quot;@type&quot;:&quot;Product&quot;,    &quot;name&quot;:&quot;The Product&quot;,    &quot;description&quot;:&quot;A great product.&quot;,    &quot;url&quot;:&quot;http://example.org/products/1/the-product/&quot;}```In the above example `JsonLdDetailView` adds `sd` to `ProductDetailView`'s context, using `Product`'s own `sd` property. The `url` is generated automatically by `JsonLdDetailView`. This behaviour is configurable through settings.</longdescription>
</pkgmetadata>