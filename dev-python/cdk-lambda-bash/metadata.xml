<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![NPM version](https://badge.fury.io/js/cdk-lambda-bash.svg)](https://badge.fury.io/js/cdk-lambda-bash)[![PyPI version](https://badge.fury.io/py/cdk-lambda-bash.svg)](https://badge.fury.io/py/cdk-lambda-bash)[![Release](https://github.com/pahud/cdk-lambda-bash/actions/workflows/release.yml/badge.svg)](https://github.com/pahud/cdk-lambda-bash/actions/workflows/release.yml)# cdk-lambda-bashDeploy Bash Lambda Functions with AWS CDK# WhyAWS Lambda has the [docker container image support](https://aws.amazon.com/tw/blogs/aws/new-for-aws-lambda-container-image-support/) since AWS re:Invent 2020 which allows you to run your Lambda code in a custom container image. Inspired by [nikovirtala/cdk-eks-experiment](https://github.com/nikovirtala/cdk-eks-experiment/), `cdk-lambda-bash` allows you to specify a local shell script and bundle it up as a custom resource in your cdk stack. On cdk deployment, your shell script will be executed in a Lambda container environment.# BashExecFunctionAt this moment, we are offering `BashExecFunction` construct class which is a high-level abstraction of `lambda.Function`. By defining the `script` property which poins to your local shell script, on `cdk deploy`, this script will be bundled into a custom docker image and published as a `lambda.DockerImageFunction`.If you `fn.run()`, a custom resource will be created and the `lambda.DockerImageFunction` will be executed on deployment.# InstallUse the npm dist tag to opt in CDKv1 or CDKv2:```sh// for CDKv2npm install cdk-lambda-bashornpm install cdk-lambda-bash@latest// for CDKv1npm install cdk-lambda-bash@cdkv1```# Sample```pythonconst app = new cdk.App();const stack = new cdk.Stack(app, 'my-stack');// bundle your Lambda function to execute the local demo.sh in containerconst fn = new BashExecFunction(stack, 'Demo', {  script: path.join(__dirname, '../demo.sh'),})// run it as custom resource on deploymentfn.run();```## Re-execution on assets updateBy default, if you update your shell script or Dockerfile and re-deploy your CDK application, the `BashExecFunction`will not be re-executed. Use `runOnUpdate` to enable the re-execution on update.```pythonfn.run({ runOnUpdate: true });```## Custom DockerfileIn some cases, you may customize your own `Dockerfile`, for instances:1. You need extra tools or utilities such as `kubectl` or `helm`2. You need build from your own base imageIn these cases, create a custom `Dockerfile` as below and add extra utilities i.e. `kubectl`:&lt;details&gt;&lt;summary&gt;click and view custom Dockerfile sample&lt;/summary&gt;```bashFROM public.ecr.aws/lambda/provided:al2RUN yum install -y unzip jq# install aws-cli v2RUN curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot; &amp;&amp; \  unzip awscliv2.zip &amp;&amp; \  ./aws/install# install kubectlRUN curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl &amp;&amp; \  chmod +x kubectl &amp;&amp; \  mv kubectl /usr/local/bin/kubectlCOPY bootstrap /var/runtime/bootstrapCOPY function.sh /var/task/function.shCOPY main.sh /var/task/main.shRUN chmod +x /var/runtime/bootstrap /var/task/function.sh /var/task/main.shWORKDIR /var/taskCMD [ &quot;function.sh.handler&quot; ]```&lt;/details&gt;Specify your own `Dockerfile` with the `dockerfile` property.```pythonnew BashExecFunction(stack, 'Demo', {  script: path.join(__dirname, '../demo.sh'),  dockerfile: path.join(__dirname, '../Dockerfile'),});```# Conditional ExecutionIn the user script(e.g. `demo.sh`), you are allowed to determine the event type and act accordingly.For example```pythonconst installArgoCD = new BashExecFunction(...)installArgoCD.run({runOnUpdate: true});```When you run this sample, `demo.sh` will receive `onCreate` event and you can run your custom logic to &quot;install ArgoCD&quot; like `kubectl apply -f URL`. However, if you comment it off and deploy again:```pythonconst installArgoCD = new BashExecFunction(...)//installArgoCD.run({runOnUpdate: true});```Under the hood, `demo.sh` will receive `onDelete` event and you can run your custom logic to &quot;uninstall ArgoCD&quot;like `kubectl delete -f URL`.Check the full sample code below:&lt;details&gt;&lt;summary&gt;Click and view the sample code&lt;/summary&gt;```sh#!/bin/bash# implement your business logic belowfunction onCreate() {  echo &quot;running kubectl apply -f ...&quot;}function onUpdate() {  echo &quot;do nothing on update&quot;}function onDelete() {  echo &quot;running kubectl delete -f ...&quot;}function getRequestType() {  echo $1 | jq -r .RequestType}function conditionalExec() {  requestType=$(getRequestType $EVENT_DATA)  # determine the original request type  case $requestType in    'Create') onCreate $1 ;;    'Update') onUpdate $1 ;;    'Delete') onDelete $1 ;;  esac}echo &quot;Hello cdk lambda bash!!&quot;conditionalExecexit 0```&lt;/details&gt;# In ActionSee this [tweet](https://twitter.com/pahudnet/status/1370301964836241408)![](https://pbs.twimg.com/media/EwRGRxnUcAQBng-?format=jpg&amp;name=4096x4096)![](https://pbs.twimg.com/media/EwRKGfsUYAENjP-?format=jpg&amp;name=4096x4096)</longdescription>
</pkgmetadata>