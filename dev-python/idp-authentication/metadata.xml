<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://cardoai.com/&quot;&gt;&lt;img src=&quot;https://cardoai.com/wp-content/themes/yootheme/cache/logo-cardo-negativo-cd27a0ee.webp&quot; alt=&quot;FastAPI&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;IDP Authentication hexagonal architecture implementation&lt;/em&gt;&lt;/p&gt;---## PurposeThis project handles the authentication process of the Cardo platform. It is a hexagonal architecture implementation, which means that the business logic is independent of the framework used to implement the API.## ArchitectureThe architecture is based on the [Hexagonal Architecture](https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)).The main idea is to separate the business logic from the framework and the infrastructure.The business logic is implemented in the `domain` module. This module is independent of the infrastructure.The infrastructure is implemented `infrastructure` module.The `app` which uses this package itself is the entry point of the application. It is the only module that depends on the framework.## Project layout    idp_authentication/    ├── infrastructure    │   ├── custom_orm_column_types.py    │   ├── database.py    │   ├── orm.py    ├── users    │   ├── adapters    │   │   ├── orm.py    │   │   ├── unit_of_work.py    │   │   ├── events    │   │   ├── repositories    │   ├── base_classes    │   │   ├── base_entity.py    │   │   ├── base_repository.py    │   ├── di    │   │   ├── containers.py    │   ├── domain    │   │   ├── entities    │   │   ├── ports    │   │   ├── use_cases    │   ├── infrastructure    │   │   ├── database    │   │   │   ├── sqlalchemy    │   │   ├── faust    │   │   │   ├── faust_app.py    │   ├── tests    │   │   ├── domain    │   │   │   ├── __init__.py## RequirementsPython 3.9+IDP Authentication requires the following to be implemented:* &lt;a href=&quot;https://python-dependency-injector.ets-labs.org/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Dependency Injector&lt;/a&gt;## InstallationSince this is a private repository, you need to install the package with the following command:    pip install git+ssh://git@github.com/CardoAI/idp-authentication.git@main## Example### UsageInside your application container:```python3from dependency_injector import providersfrom idp_authentication.users.di.containers import UsersModuleDIContainer    users_module = providers.Container(        UsersModuleDIContainer,        config=config,        database=database,    )```### Extending default config```python3from idp_authentication.config import Configclass TestConfig(Config):    APP_IDENTIFIER = &quot;test&quot;    TENANTS = [&quot;default&quot;]    ROLES = [TEST_ROLE_1, TEST_ROLE_2]    APP_ENTITY_TYPES = [&quot;app_entity_1&quot;, &quot;app_entity_2&quot;]    class Config:        env_file_encoding = &quot;utf-8&quot;        use_enum_values = True```### Configuration example```python3from dependency_injector import containers, providersfrom idp_authentication.users.di.containers import UsersModuleDIContainerclass YourTestContainer(containers.DeclarativeContainer):    config = providers.Configuration(pydantic_settings=[TestConfig()])    url = get_test_memory_db_uri()    database = providers.Singleton(        Database,    )    users_module = providers.Container(        UsersModuleDIContainer,        config=config,        database=database,    )```### Usage example```python3    def container():        container = YourTestContainer()        container.wire(packages=[&quot;idp_authentication&quot;]) # Wire IDPAuthentication        container.users_module.start_mappers() # Start Users Module mapper        yield container```### App EntityTo declare a new AppEntity, the Entity class should:- Inherit from the class `AppEntity`- Declare the properties `idp_identifier`, `idp_label` and optionally `entity_type`- Example:  ```python3  from idp_authentication.users.domain.entities.app_entity import AppEntity      class TestEntity(AppEntity):        @property        def idp_identifier(self):            return self.id                  @property        def idp_label(self):            return self.name            @property        def entity_type(self):            return &quot;test&quot;  ```</longdescription>
</pkgmetadata>