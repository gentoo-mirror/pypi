<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>btnamespace===========*[not actively supported outside of internal Venmo usage]*A Braintree namespace isolates state on the Braintree gateway:.. code-block:: python    import braintree    import btnamespace    with btnamespace.Namespace():        customer = braintree.Customer.create({&quot;id&quot;: &quot;123&quot;})        assert customer.id == &quot;123&quot;        braintree.Customer.find(&quot;123&quot;)  # success    braintree.Customer.find(&quot;123&quot;)  # NotFound exceptionThis is primarily useful during integration tests:.. code-block:: python    def setUp(self):        self.namespace = btnamespace.Namespace()        self.namespace.__enter__()    def test_some_sandbox_integration(self):        #...    def tearDown(self):        self.namespace.__exit__()Compared to calling eg ``braintree.Customer.delete`` during ``tearDown``, this has a number of advantages:-  it's faster, since no teardown is needed-  it's simpler, since it doesn't require any bookkeeping-  it's robust, since tests can be written without any state assumptionsYou can install it with ``$ pip install btnamespace``.What's supported----------------- Customer create, update, find, delete- CreditCard create, update, find, delete- Transaction create, findAll operations involving subresources - eg creating a CreditCard and Customer in one call - work as expected.Adding support for other operations is easy; we just haven't needed them yet.Contributions welcome!How it Works------------Under the hood, a Namespace globally patches the braintree client library.During create operations, any provided ids are removed.This forces the gateway to respond with unique ids, which are later mapped back to the originally-provided ids.Here's an example:- on a call to ``braintree.Customer.create({'id': '123', ...})``, ``'123'`` is stored as a Customer id and the call becomes ``braintree.Customer.create({...})``.- then, the server returns a unique id ``'abcde'`` for the Customer. ``'123'`` is mapped to ``'abcde'``, and the resulting Customer object's id is set to ``'123'``.- later, a call to ``braintree.Customer.find('123')`` becomes ``braintree.Customer.find('abcde')``.Contributing------------Inside your vitualenv:.. code-block:: bash    $ cd btnamespace    $ pip install -e .    $ pip install -r dev-requirements.txtTo run the tests, first add your sandbox credentials:.. code-block:: bash    $ export BT_MERCHANT_ID=merchant-id    $ export BT_PUBLIC_KEY=public-id    $ export BT_PRIVATE_KEY=private-keyThen run ``$ pytest``.History-------2.1.1+++++released 2022-03-18- Add missing history notes2.1.0+++++released 2022-03-18- Add support for Python 3.5 and 3.72.0.0+++++released 2016-07-15- breaking: drop python 2.6 support- fix a bug affecting operations after exiting a namespace- add strict_missing and strict_missing_exception options1.1.1+++++released 2014-09-26- pin bidict to 0.1.5 to avoid breaking changes in newer versions1.1.0+++++released 2014-07-28- add schema for braintree.ClientToken.generate1.0.1+++++released 2014-04-08- use less expensive introspection- remove decorator dependency1.0.0+++++released 2014-04-07- initial release</longdescription>
</pkgmetadata>