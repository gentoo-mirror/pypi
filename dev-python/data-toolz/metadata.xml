<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>data-toolz==========This repository contains reusable python code for data projects.The motivation for this project was to create a package which allows to abstract dataset read/write operations from * destination type (`local`, `s3`, `&lt;tbd...&gt;`) and * target file type (`delimiter-separated values`, `jsonlines`, `parquet`)This would allow to write code easily transferable between local and cloud applications.installation============```shell scriptpip install data-toolz```usage=====`datatoolz.filesystem.FileSystem` class gives you an abstraction for accesing both local and remote object using the well know pythonic `open()` interface.```pythonfrom datatoolz.filesystem import FileSystemfor fs_type in (&quot;local&quot;, &quot;s3&quot;):    fs = FileSystem(name=fs_type)    # common pythonic interface for both local and remote file systems    with fs.open(&quot;my-folder-or-bucket/my-file&quot;, mode=&quot;wt&quot;) as fo:        fo.write(&quot;Hello World!&quot;)```---`datatoolz.io.DataIO` class gives you a versatile Reader/Writer interface for handling of typical data files (`jsonlines`, `dsv`, `parquet`)```pythonimport pandas as pdfrom datatoolz.io import DataIOdf = pd.DataFrame({&quot;col1&quot;: [1, 2, 3], &quot;col2&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]})dio = DataIO()  # defaults to &quot;local&quot; FileSystem# write as parquetdio.write(dataframe=df, path=&quot;my-file.parquet&quot;, filetype=&quot;parquet&quot;)dio.read(path=&quot;my-file.parquet&quot;, filetype=&quot;parquet&quot;)# write as gzip-compressed jsonlinesdio.write(dataframe=df, path=&quot;my-file.json.gz&quot;, filetype=&quot;jsonlines&quot;, gzip=True)dio.read(path=&quot;my-file.json.gz&quot;, filetype=&quot;jsonlines&quot;, gzip=True)# write as delimiter-separated-values in multiple partitionsdio.write(dataframe=df, path=&quot;my-file.tsv&quot;, filetype=&quot;dsv&quot;, sep=&quot;\t&quot;, partition_by=[&quot;col1&quot;])dio.read(path=&quot;my-file.tsv&quot;, filetype=&quot;dsv&quot;, sep=&quot;\t&quot;)# write output in multiple chunks per partitiondio.write(dataframe=df, path=&quot;my-prefix&quot;, filetype=&quot;dsv&quot;, sep=&quot;\t&quot;, partition_by=[&quot;col1&quot;], suffix=[&quot;chunk01.tsv&quot;, &quot;chunk02.tsv&quot;])dio.read(path=&quot;my-prefix&quot;, filetype=&quot;dsv&quot;, sep=&quot;\t&quot;)```---`datatoolz.logging.JsonLogger` is a wrapper logger for outputting JSON-structured logs```pythonfrom datatoolz.logging import JsonLoggerlogger = JsonLogger(name=&quot;my-custom-logger&quot;, env=&quot;dev&quot;)logger.info(msg=&quot;what is my purpose?&quot;, meaning_of_life=42)``````{&quot;logger&quot;: {&quot;application&quot;: &quot;my-custom-logger&quot;, &quot;environment&quot;: &quot;dev&quot;}, &quot;level&quot;: &quot;info&quot;, &quot;timestamp&quot;: &quot;2020-11-03 18:31:07.757534&quot;, &quot;message&quot;: &quot;what is my purpose?&quot;, &quot;extra&quot;: {&quot;meaning_of_life&quot;: 42}}```It can also be used to decorate functions and log their execution details```pythonfrom datatoolz.logging import JsonLoggerlogger = JsonLogger(name=&quot;my-custom-logger&quot;, env=&quot;dev&quot;)@logger.decorate(msg=&quot;my-custom-log&quot;, duration=True, memory=True, my_value=&quot;my-value&quot;, output_length=lambda x: len(x))def my_func(x, y):    return x + y, x * yprint(my_func(42, 2))``````{&quot;logger&quot;: {&quot;application&quot;: &quot;my-custom-logger&quot;, &quot;environment&quot;: &quot;dev&quot;}, &quot;level&quot;: &quot;info&quot;, &quot;timestamp&quot;: &quot;2021-03-24 18:10:47.054703&quot;, &quot;message&quot;: &quot;my-custom-log&quot;, &quot;extra&quot;: {&quot;function&quot;: &quot;my_func&quot;, &quot;memory&quot;: {&quot;current&quot;: 432, &quot;peak&quot;: 432}, &quot;duration&quot;: 2.5980000000203063e-06, &quot;my_value&quot;: &quot;my-value&quot;, &quot;output_length&quot;: 2}}(44, 84)```</longdescription>
</pkgmetadata>