<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ampapi-pythonThis API allows you to communicate with AMP installations from within Python.Documentation for available API calls can be found by appending /API to the URL of any existing AMP installation.Support:- Ping `@thepotatoking3452` in the `#development` channel of the [AMP Discord](https://discord.gg/cubecoders)- My own [development Discord](https://discord.neuralnexus.dev/)## Installation```bashpip install ampapi```or```bashpip install 'ampapi @ git+https://github.com/p0t4t0sandwich/ampapi-python.git'```You also need the following packages installed:```bashpip install requests aiohttp json```## NotesCurrently, you can only access API responses as `dict` or `list`, still trying to figure out a good way to generalize turning the JSON responses into objects (might just use class constructors as a cheap workaround).## Examples### CommonAPI Example```pythonfrom ampapi.modules.CommonAPI import CommonAPIdef main():    # If you know the module that the instance is using, specify it instead of CommonAPI    API = CommonAPI(&quot;http://localhost:8080/&quot;, &quot;admin&quot;, &quot;myfancypassword123&quot;, &quot;&quot;)    API.Login()    # API call parameters are simply in the same order as shown in the documentation.    API.Core.SendConsoleMessage(&quot;say Hello Everyone, this message was sent from the Python API!&quot;)    currentStatus = API.Core.GetStatus()    CPUUsagePercent = currentStatus[&quot;Metrics&quot;][&quot;CPU Usage&quot;][&quot;Percent&quot;]    print(&quot;Current CPU usage is: &quot; + str(CPUUsagePercent) + &quot;%&quot;)main()```### Async CommonAPI Example```pythonimport asynciofrom ampapi.modules.CommonAPI import CommonAPIasync def main():    # If you know the module that the instance is using, specify it instead of CommonAPI    API = CommonAPI(&quot;http://localhost:8080/&quot;, &quot;admin&quot;, &quot;myfancypassword123&quot;, &quot;&quot;)    await API.LoginAsync()    # API call parameters are simply in the same order as shown in the documentation.    await API.Core.SendConsoleMessageAsync(&quot;say Hello Everyone, this message was sent from the Python API!&quot;)    currentStatus = await API.Core.GetStatusAsync()    CPUUsagePercent = currentStatus[&quot;Metrics&quot;][&quot;CPU Usage&quot;][&quot;Percent&quot;]    print(&quot;Current CPU usage is: &quot; + str(CPUUsagePercent) + &quot;%&quot;)asyncio.run(main())```### Example using the ADS to manage an instance```pythonfrom ampapi.modules.ADS import ADSfrom ampapi.modules.Minecraft import MinecraftAPI = ADS(&quot;http://localhost:8080/&quot;, &quot;admin&quot;, &quot;myfancypassword123&quot;)# Get the available instancesinstancesResult = API.ADSModule.GetInstances()targets = instancesResult[&quot;result&quot;]# In this example, my Hub server is on the second target# If you're running a standalone setup, you can just use targets[1]target = targets[1]hub_instance_id = &quot;&quot;# Get the available instancesinstances = target[&quot;AvailableInstances&quot;]for instance in instances:    # Find the instance named &quot;Hub&quot;    if instance[&quot;InstanceName&quot;] == &quot;Hub&quot;:        hub_instance_id = instance[&quot;InstanceID&quot;]        break# Use the instance ID to get the API for the instanceHub = API.InstanceLogin(hub_instance_id, Minecraft)# Get the current CPU usagecurrentStatus = Hub.Core.GetStatus()CPUUsagePercent = currentStatus[&quot;Metrics&quot;][&quot;CPU Usage&quot;][&quot;Percent&quot;]# Send a message to the consoleHub.Core.SendConsoleMessage(&quot;say Current CPU usage is: &quot; + CPUUsagePercent + &quot;%&quot;)```### CommonAPI Example, handling the sessionId and rememberMeToken manually (not recommended)```pythonfrom ampapi.ampapi import AMPAPItry:    API = AMPAPI(&quot;http://localhost:8080/&quot;)    # The third parameter is either used for 2FA logins, or if no password is specified to use a remembered token from a previous login, or a service login token.    loginResult = API.Core.Login(&quot;admin&quot;, &quot;myfancypassword123&quot;, &quot;&quot;, False)    if &quot;success&quot; in loginResult.keys() and loginResult[&quot;success&quot;]:        print(&quot;Login successful&quot;)        API.sessionId = loginResult[&quot;sessionID&quot;]        # API call parameters are simply in the same order as shown in the documentation.        API.Core.SendConsoleMessage(&quot;say Hello Everyone, this message was sent from the Python API!&quot;)        currentStatus = API.Core.GetStatus()        CPUUsagePercent = currentStatus[&quot;Metrics&quot;][&quot;CPU Usage&quot;][&quot;Percent&quot;]        print(f&quot;Current CPU usage is: {CPUUsagePercent}%&quot;)    else:        print(&quot;Login failed&quot;)        print(loginResult)except Exception as err:    # In reality, you'd handle this exception better    raise Exception(err)```## TODO- Add a check to see if it's been 5min since the last API call, and if so, attempt to re-log- Figure a good mehtod to turn the JSON responses into objects</longdescription>
</pkgmetadata>