<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ome-types[![License](https://img.shields.io/github/license/tlambert03/ome-types)](LICENSE)[![Version](https://img.shields.io/pypi/v/ome-types.svg)](https://pypi.python.org/pypi/ome-types)[![CondaVersion](https://img.shields.io/conda/v/conda-forge/ome-types)](https://anaconda.org/conda-forge/ome-types)[![PythonVersion](https://img.shields.io/pypi/pyversions/ome-types.svg)](https://python.org)[![Tests](https://github.com/tlambert03/ome-types/workflows/tests/badge.svg)](https://github.com/tlambert03/ome-types/actions)[![Docs](https://readthedocs.org/projects/ome-types/badge/?version=latest)](https://ome-types.readthedocs.io/en/latest/?badge=latest)&lt;!-- [![conda-forge](https://img.shields.io/conda/vn/conda-forge/ome-types)](https://anaconda.org/conda-forge/ome-types) --&gt;## A pure-python implementation of the OME data model`ome_types` provides a set of python dataclasses and utility functions forparsing the [OME-XMLformat](https://docs.openmicroscopy.org/ome-model/latest/ome-xml/) intofully-typed python objects for interactive or programmatic access in python. Itcan also take these python objects and output them into valid OME-XML.`ome_types` is a **pure python** library and does not require a Java virtualmachine.&gt; Note: The generated python code can be seen in the [`built`branch](https://github.com/tlambert03/ome-types/tree/built).(Read the [code generation](#code-generation) section for details).### ðŸ“–  &amp;nbsp;&amp;nbsp;[documentation](https://ome-types.readthedocs.io/)## Installation### from pip```shellpip install ome-types```### from source```shellgit clone https://github.com/tlambert03/ome-types.gitcd ome-typespip install -e .```## Usage### convert an XML string or filepath into an instance of `ome_types.model.OME`(The XML string/file will be validated against the [ome.xsdschema](https://www.openmicroscopy.org/Schemas/Documentation/Generated/OME-2016-06/ome.html))```pythonfrom ome_types import from_xmlome = from_xml('tests/data/hcs.ome.xml')```### extract OME metadata from an OME-TIFF```pythonfrom ome_types import from_tiffome2 = from_tiff('tests/data/ome.tiff')```### manipulate the metadata via python objectsBoth `from_xml` and `from_tiff` return an instance of `ome_types.model.OME`. Allclasses in `ome_types.model` follow the naming conventions of the [OME datamodel](https://www.openmicroscopy.org/Schemas/Documentation/Generated/OME-2016-06/ome.html),but use `snake_case` attribute names instead of `CamelCase`, to be consistentwith the python ecosystem.```pythonIn [2]: ome = from_xml('tests/data/hcs.ome.xml')In [3]: omeOut[3]:OME(    images=[&lt;1 Images&gt;],    plates=[&lt;1 Plates&gt;],)In [4]: ome.plates[0]Out[4]:Plate(    id='Plate:1',    name='Control Plate',    column_naming_convention='letter',    columns=12,    row_naming_convention='number',    rows=8,    wells=[&lt;1 Wells&gt;],)In [5]: ome.images[0]Out[5]:Image(    id='Image:0',    name='Series 1',    pixels=Pixels(        id='Pixels:0',        dimension_order='XYCZT',        size_c=3,        size_t=16,        size_x=1024,        size_y=1024,        size_z=1,        type='uint16',        bin_data=[&lt;1 Bin_Data&gt;],        channels=[&lt;3 Channels&gt;],        physical_size_x=0.207,        physical_size_y=0.207,        time_increment=120.1302,    ),    acquisition_date=datetime.fromisoformat('2008-02-06T13:43:19'),    description='An example OME compliant file, based on Olympus.oib',)```#### Objects can be removed, or changed```pythonIn [6]: from ome_types.model.simple_types import UnitsLengthIn [7]: from ome_types.model.channel import AcquisitionModeIn [8]: ome.images[0].description = &quot;This is the new description.&quot;In [9]: ome.images[0].pixels.physical_size_x = 350.0In [10]: ome.images[0].pixels.physical_size_x_unit = UnitsLength.NANOMETERIn [11]: for c in ome.images[0].pixels.channels:             c.acquisition_mode = AcquisitionMode.SPINNING_DISK_CONFOCAL```#### Elements can be added by constructing new OME model objects```pythonIn [12]: from ome_types.model import Instrument, Microscope, Objective, InstrumentRefIn [13]: microscope_mk4 = Microscope(             manufacturer='OME Instruments',             model='Lab Mk4',             serial_number='L4-5678',         )In [14]: objective_40x = Objective(             manufacturer='OME Objectives',             model='40xAir',             nominal_magnification=40.0,         )In [15]: instrument = Instrument(             microscope=microscope_mk4,             objectives=[objective_40x],         )In [16]: ome.instruments.append(instrument)In [17]: ome.images[0].instrument_ref = InstrumentRef(id=instrument.id)In [18]: ome.instrumentsOut[18]:[Instrument(    id='Instrument:1',    microscope=Microscope(       manufacturer='OME Instruments',       model='Lab Mk4',       serial_number='L4-5678',    ),    objectives=[&lt;1 Objectives&gt;], )] ```### export to an OME-XML stringFinally, you can generate the OME-XML representation of the OME model object,for writing to a standalone `.ome.xml` file or inserting into the header of anOME-TIFF file:```pythonIn [19]: from ome_types import to_xmlIn [20]: print(to_xml(ome))&lt;OME ...&gt;    &lt;Plate ColumnNamingConvention=&quot;letter&quot; Columns=&quot;12&quot; ID=&quot;Plate:1&quot; ...&gt;        ...    &lt;/Plate&gt;    &lt;Instrument ID=&quot;Instrument:1&quot;&gt;        &lt;Microscope Manufacturer=&quot;OME Instruments&quot; Model=&quot;Lab Mk4&quot; SerialNumber=&quot;L4-5678&quot; /&gt;        &lt;Objective Manufacturer=&quot;OME Objectives&quot; Model=&quot;40xAir&quot; ID=&quot;Objective:1&quot;        NominalMagnification=&quot;40.0&quot; /&gt;    &lt;/Instrument&gt;    &lt;Image ID=&quot;Image:0&quot; Name=&quot;Series 1&quot;&gt;        &lt;AcquisitionDate&gt;2008-02-06T13:43:19&lt;/AcquisitionDate&gt;        &lt;Description&gt;This is the new description.&lt;/Description&gt;        &lt;InstrumentRef ID=&quot;Instrument:1&quot; /&gt;        &lt;Pixels ... PhysicalSizeX=&quot;350.0&quot; PhysicalSizeXUnit=&quot;nm&quot; ...&gt;            &lt;Channel AcquisitionMode=&quot;SpinningDiskConfocal&quot; ...&gt;             ...        &lt;/Pixels&gt;    &lt;/Image&gt;&lt;/OME&gt;```## Code generationThe bulk of this library (namely, the `ome_types.model` module) is generatedat install time, and is therefore not checked into source (or visible in the mainbranch of this repo).You can see the code generated by the main branch in the [builtbranch](https://github.com/tlambert03/ome-types/tree/built)The script at `src/ome_autogen.py` converts the [ome.xsdschema](https://www.openmicroscopy.org/Schemas/OME/2016-06/ome.xsd) into validpython code. To run the code generation script in a development environment,clone this repository and run:```shpython src/ome_autogen.py```As an example, the[`OME/Image`](https://www.openmicroscopy.org/Schemas/Documentation/Generated/OME-2016-06/ome_xsd.html#Image)model will be rendered as the following dataclass in `ome_types/model/image.py````pythonfrom datetime import datetimefrom typing import List, Optionalfrom pydantic import Fieldfrom ome_types._base_type import OMETypefrom .annotation_ref import AnnotationReffrom .experiment_ref import ExperimentReffrom .experimenter_group_ref import ExperimenterGroupReffrom .experimenter_ref import ExperimenterReffrom .imaging_environment import ImagingEnvironmentfrom .instrument_ref import InstrumentReffrom .microbeam_manipulation_ref import MicrobeamManipulationReffrom .objective_settings import ObjectiveSettingsfrom .pixels import Pixelsfrom .roi_ref import ROIReffrom .simple_types import ImageIDfrom .stage_label import StageLabelclass Image(OMEType):    id: ImageID    pixels: Pixels    acquisition_date: Optional[datetime] = None    annotation_ref: List[AnnotationRef] = Field(default_factory=list)    description: Optional[str] = None    experiment_ref: Optional[ExperimentRef] = None    experimenter_group_ref: Optional[ExperimenterGroupRef] = None    experimenter_ref: Optional[ExperimenterRef] = None    imaging_environment: Optional[ImagingEnvironment] = None    instrument_ref: Optional[InstrumentRef] = None    microbeam_manipulation_ref: List[MicrobeamManipulationRef] = Field(        default_factory=list    )    name: Optional[str] = None    objective_settings: Optional[ObjectiveSettings] = None    roi_ref: List[ROIRef] = Field(default_factory=list)    stage_label: Optional[StageLabel] = None```The documentation and types for the full model can be in the [API Reference](https://ome-types.readthedocs.io/en/latest/ome_types.model.html)## ContributingTo clone and install this repository locally (this will also build the model at`src/ome_types/model`)```shellgit clone https://github.com/tlambert03/ome-types.gitcd ome-typespip install -e .[autogen]```We use `pre-commit` to run various code-quality checks (isort, black, mypy,flake8) during continuous integration.  If you'd like to make sure that yourcode will pass these checks before you commit your code, you should install`pre-commit` after cloning this repository:```shellpip install pre-commitpre-commit install```If you modify `src/ome_autogen.py`, you may need to regenerate the model with:```shellpython src/ome_autogen.py```### Running testsTo run tests quickly, just install and run `pytest`.  Note, however, that thisrequires that the `ome_types.model` module has already been built with `pythonsrc/ome_autogen.py`.Alternatively, you can install and run `tox` which will run tests andcode-quality checks in an isolated environment.</longdescription>
</pkgmetadata>