<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/bond-cli.svg)](https://badge.fury.io/py/bond-cli)# Bond Command Line InterfaceEDIT: This project is in a beta state. We released it on the principle of release early &amp; often. It is here just in case it benefits a member of the Bond Home community. Your mileage may vary!## PurposeThis tool exists to make it easy to manipulate a Bond from a command line,for use by: - Bond community - internal use in engineering and customer support## InstallationInstall with```bashpip install bond-cli```## Getting StartedFind Bonds on local network:```bashbond discover```Select a Bond and set the token so we can go deeper:```bashbond select &lt;your Bond's ID or a prefix&gt;```If your Bond's token is unlocked, `select` will retrieve and store it. Otherwise, you havea couple options. You can unlock the token yourself (a power cycle is the easiest way, it'llbe unlocked for a period after a reboot), and run the following to automatically retrieveand store it:```bashbond token```Or, you can manually set the token, which you could find in the Bond Home appin the Bond's settings screen.```bashbond token &lt;your Bond's token&gt;```Now that you've selected a Bond and stored its token, you're ready to interact with it.Check its firmware version:```bashbond version```## Device ManagementCreate a template device:```bashbond devices create --name &quot;Formidable Fan&quot; --location &quot;Bedroom&quot; --template A1 --addr 101 --freq 300000 --bps 1000 --zero_gap 1234```You can then see the fan on your Bond Home app.List existing devices:```bashbond devices list```Delete one or more devices:```bashbond devices delete &lt;DEVICE1_ID&gt; &lt;DEVICE2_ID&gt;```## Device GroupsCreate a device group:```bashbond groups create --name &quot;All Shades&quot; &lt;BOND1_ID&gt;:&lt;DEVICE1_ID&gt; &lt;BOND2_ID&gt;:&lt;DEVICE1_ID&gt; &lt;BOND2_ID&gt;:&lt;DEVICE2_ID&gt; ```List the existing device groups:```bashbond groups list```List the device groups on a single Bond (may not represent the whole group):```bashbond groups list --bond-id &lt;BOND_ID&gt;```## Live LoggingYou can also start a livelog:```bashbond livelog --level info```## Upgrade Your BondYou can upgrade your selected bond:```bashbond upgrade beta```## Getting HelpGet more help with:```bashbond -h```or you can get help with any subcommand```bashbond select -h```## ContributingBug reports and feature requests in the form of issues and pull requests are strongly encouraged!To develop locally, you can clone the repository from github, remove the package if already present, then install it to pip in local editable mode:```bashgit clone git@github.com:bondhome/bond-cli.gitcd bond-clipip uninstall bond-clipip install -e &quot;.&quot;```Now all changes made in your local copy of `bond-cli` will be reflected in the `bond` executable.## Release ProcedureTo make a release, bump the version number in `setup.py` on trunk, then make an annotated tag```bashgit tag -a &quot;v1.8.7&quot;```with a version matching that in `setup.py`. You'll be prompted to write some release notes.Alternatively, use the Github repository's releases interface to create a release.Upon pushing the tag or publishing the release, CI will deploy to PyPi.</longdescription>
</pkgmetadata>