<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># webargs-sanic[Sanic](https://github.com/huge-success/sanic) integration with [Webargs](https://github.com/sloria/webargs). Parsing and validating request arguments: headers, arguments, cookies, files, json, etc.IMPORTANT: From version 2.0.0 webargs-sanic requires you to have webargs &gt;=7.0.1. Please be aware of changes happened in version of webargs &gt; 6.0.0. If you need support of webargs 5.x with no location definition, please use previous version(1.5.0) of this module from pypi. [![Build Status](https://img.shields.io/travis/EndurantDevs/webargs-sanic.svg?logo=travis)](https://app.travis-ci.com/EndurantDevs/webargs-sanic) [![Latest Version](https://img.shields.io/pypi/v/webargs-sanic.svg)](https://pypi.python.org/pypi/webargs-sanic/) [![Python Versions](https://img.shields.io/pypi/pyversions/webargs-sanic.svg)](https://github.com/EndurantDevs/webargs-sanic/blob/master/setup.py) [![Tests Coverage](https://img.shields.io/codecov/c/github/EndurantDevs/webargs-sanic/master.svg)](https://codecov.io/gh/EndurantDevs/webargs-sanic)[webargs](https://github.com/sloria/webargs) is a Python library for parsing and validating HTTP request arguments, with built-in support for popular web frameworks. webargs-sanic allows you to use it for [Sanic](https://github.com/huge-success/sanic) apps. To read more about webargs usage, please check [Quickstart](https://webargs.readthedocs.io/en/latest/quickstart.html)## Example Code ##### Simple Application ###```pythonfrom sanic import Sanicfrom sanic.response import textfrom webargs import fieldsfrom webargs_sanic.sanicparser import use_argsapp = Sanic(__name__)hello_args = {    'name': fields.Str(required=True)}@app.route('/')@use_args(hello_args, location=&quot;query&quot;)async def index(request, args):    return text('Hello ' + args['name'])```### Class-based Sanic app and args/kwargs ###```pythonfrom sanic import Sanicfrom sanic.views import HTTPMethodViewfrom sanic.response import jsonfrom webargs import fieldsfrom webargs_sanic.sanicparser import use_args, use_kwargsapp = Sanic(__name__)class EchoMethodViewUseArgs(HTTPMethodView):    @use_args({&quot;val&quot;: fields.Int()}, location=&quot;form&quot;)    async def post(self, request, args):        return json(args)app.add_route(EchoMethodViewUseArgs.as_view(), &quot;/echo_method_view_use_args&quot;)class EchoMethodViewUseKwargs(HTTPMethodView):    @use_kwargs({&quot;val&quot;: fields.Int()}, location=&quot;query&quot;)    async def post(self, request, val):        return json({&quot;val&quot;: val})app.add_route(EchoMethodViewUseKwargs.as_view(), &quot;/echo_method_view_use_kwargs&quot;)```### Parser without decorator with returning errors as JSON ###```pythonfrom sanic import Sanicfrom sanic.response import jsonfrom webargs import fieldsfrom webargs_sanic.sanicparser import parser, HandleValidationErrorapp = Sanic(__name__)@app.route(&quot;/echo_view_args_validated/&lt;value&gt;&quot;, methods=[&quot;GET&quot;])async def echo_use_args_validated(request, args):    parsed = await parser.parse(        {&quot;value&quot;: fields.Int(required=True, validate=lambda args: args[&quot;value&quot;] &gt; 42)}, request, location=&quot;view_args&quot;    )    return json(parsed)# Return validation errors as JSON@app.exception(HandleValidationError)async def handle_validation_error(request, err):    return json({&quot;errors&quot;: err.exc.messages}, status=422)```### More complicated custom example ###```pythonfrom sanic import Sanicfrom sanic import responsefrom sanic import Blueprintfrom webargs_sanic.sanicparser import use_kwargsfrom some_CUSTOM_storage import InMemoryfrom webargs import fieldsfrom webargs import validateimport marshmallow.fieldsfrom validate_email import validate_email#usually this should not be here, better to import ;)#please check examples for more infoclass Email(marshmallow.fields.Field):    def __init__(self, *args, **kwargs):        super(Email, self).__init__(*args, **kwargs)    def _deserialize(self, value, attr, obj):        value = value.strip().lower()        if not validate_email(value):            self.fail('validator_failed')        return valueuser_update = {    'user_data': fields.Nested({        'email': Email(),        'password': fields.Str(validate=lambda value: len(value)&gt;=8),        'first_name': fields.Str(validate=lambda value: len(value)&gt;=1),        'last_name': fields.Str(validate=lambda value: len(value)&gt;=1),        'middle_name': fields.Str(),        'gender': fields.Str(validate=validate.OneOf([&quot;M&quot;, &quot;F&quot;])),        'birth_date': fields.Date(),    }),    'user_id': fields.Str(required=True, validate=lambda x:len(x)==32),}blueprint = Blueprint('app')storage = InMemory()@blueprint.put('/user/')@use_kwargs(user_update, location=&quot;json_or_form&quot;)async def update_user(request, user_id, user_data):    storage.update_or_404(user_id, user_data)    return response.text('', status=204)app = Sanic(__name__)app.blueprint(blueprint, url_prefix='/')```For more examples and checking how to use custom validations (phones, emails, etc.) please check apps in [Examples](https://github.com/EndurantDevs/webargs-sanic/tree/master/examples/)## Installing ##It is easy to do from `pip````pip install webargs-sanic```or from sources```git clone git@github.com:EndurantDevs/webtest-sanic.gitcd webtest-sanicpython setup.py install```## Running the testsProject uses common tests from webargs package. Thanks to [Steven Loria](https://github.com/sloria) for [sharing tests in webargs v4.1.0](https://github.com/sloria/webargs/pull/287#issuecomment-422232384). Most of tests are run by webtest via [webtest-sanic](https://github.com/EndurantDevs/webtest-sanic). Some own tests get run via Sanic's TestClient.To be sure everything is fine before installation from sources, just run:```bashpip -r requirements.txt```and then```bashpython setup.py test```Or```bashpytest tests/```## Authors[&lt;img src=&quot;https://github.com/EndurantDevs/botstat-seo/raw/master/docs/img/EndurantDevs-big.png&quot; alt=&quot;Endurant Developers Python Team&quot; width=&quot;150&quot;&gt;](https://www.EndurantDev.com)## LicenseThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details</longdescription>
</pkgmetadata>