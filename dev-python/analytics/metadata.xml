<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>py-analytics============.. image:: https://secure.travis-ci.org/numan/py-analytics.png?branch=master        :target: https://secure.travis-ci.org/numan/py-analyticsPy-Analytics is a library designed to make it easy to provide analytics as part of any project.The project's goal is to make it easy to store and retrieve analytics data. It does not provideany means to visualize this data.Currently, only ``Redis`` is supported for storing data.Install--------You can install the latest official stable version using pypi:   &gt;&gt;&gt; pip install analyticsOr get the latest version directly from github:    &gt;&gt;&gt; pip install -e git+https://github.com/numan/py-analytics.git#egg=analyticsRequirements------------Required~~~~~~~~Requirements **should** be handled by setuptools, but if they are not, you will need the following Python packages:* nydus* redis* dateutilOptional~~~~~~~~* hiredisanalytics.create_analytic_backend----------------------------------Creates an analytics object that allows to to store and retrieve metrics::    &gt;&gt;&gt; from analytics import create_analytic_backend    &gt;&gt;&gt;    &gt;&gt;&gt; analytics = create_analytic_backend({    &gt;&gt;&gt;     'backend': 'analytics.backends.redis.Redis',    &gt;&gt;&gt;     'settings': {    &gt;&gt;&gt;         'defaults': {    &gt;&gt;&gt;             'host': 'localhost',    &gt;&gt;&gt;             'port': 6379,    &gt;&gt;&gt;             'db': 0,    &gt;&gt;&gt;         },    &gt;&gt;&gt;         'hosts': [{'db': 0}, {'db': 1}, {'host': 'redis.example.org'}]    &gt;&gt;&gt;     },    &gt;&gt;&gt; })Internally, the ``Redis`` analytics backend uses ``nydus`` to distribute your metrics data over your cluster of redis instances.There are two required arguements:* ``backend``: full path to the backend class, which should extend analytics.backends.base.BaseAnalyticsBackend* ``settings``: settings required to initialize the backend. For the ``Redis`` backend, this is a list of hosts in your redis cluster.Example Usage-------------::    from analytics import create_analytic_backend    import datetime    analytics = create_analytic_backend({        &quot;backend&quot;: &quot;analytics.backends.redis.Redis&quot;,        &quot;settings&quot;: {            &quot;hosts&quot;: [{&quot;db&quot;: 5}]        },    })    year_ago = datetime.date.today() - datetime.timedelta(days=365)    #create some analytics data    analytics.track_metric(&quot;user:1234&quot;, &quot;comment&quot;, year_ago)    analytics.track_metric(&quot;user:1234&quot;, &quot;comment&quot;, year_ago, inc_amt=3)    #we can even track multiple metrics at the same time for a particular user    analytics.track_metric(&quot;user:1234&quot;, [&quot;comments&quot;, &quot;likes&quot;], year_ago)    #or track the same metric for multiple users (or a combination or both)    analytics.track_metric([&quot;user:1234&quot;, &quot;user:4567&quot;], &quot;comment&quot;, year_ago)    #retrieve analytics data:    analytics.get_metric_by_day(&quot;user:1234&quot;, &quot;comment&quot;, year_ago, limit=20)    analytics.get_metric_by_week(&quot;user:1234&quot;, &quot;comment&quot;, year_ago, limit=10)    analytics.get_metric_by_month(&quot;user:1234&quot;, &quot;comment&quot;, year_ago, limit=6)    #create a counter    analytics.track_count(&quot;user:1245&quot;, &quot;login&quot;)    analytics.track_count(&quot;user:1245&quot;, &quot;login&quot;, inc_amt=3)    #retrieve multiple metrics at the same time    #group_by is one of ``month``, ``week`` or ``day``    analytics.get_metrics([(&quot;user:1234&quot;, &quot;login&quot;,), (&quot;user:4567&quot;, &quot;login&quot;,)], year_ago, group_by=&quot;day&quot;)    &gt;&gt; [....]    #set a metric count for a day    analytics.set_metric_by_day(&quot;user:1245&quot;, &quot;login&quot;, year_ago, 100)    #sync metrics for week and month after setting day    analytics.sync_agg_metric(&quot;user:1245&quot;, &quot;login&quot;, year_ago, datetime.date.today())    #retrieve a count    analytics.get_count(&quot;user:1245&quot;, &quot;login&quot;)    #retrieve a count between 2 dates    analytics.get_count(&quot;user:1245&quot;, &quot;login&quot;, start_date=datetime.date(month=1, day=5, year=2011), end_date=datetime.date(month=5, day=15, year=2011))    #retrieve counts    analytics.get_counts([(&quot;user:1245&quot;, &quot;login&quot;,), (&quot;user:1245&quot;, &quot;logout&quot;,)])    #clear out everything we created    analytics.clear_all()BACKWARDS INCOMPATIBLE CHANGES-------------------------------V0.6.0~~~~~~* This version introduces prefixes. Any old analytics data will be unaccessable.v0.5.2~~~~~~* ``get_metric_by_day``, ``get_metric_by_week`` and ``get_metric_by_month`` return ``series`` as a set of strings instead of a list of date/datetime objectsTODO----* Add more backends possibly...?* Add an API so it can be deployed as a stand alone service (http, protocolbuffers, ...)</longdescription>
</pkgmetadata>