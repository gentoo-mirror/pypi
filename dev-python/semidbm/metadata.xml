<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========Overview========.. image:: https://secure.travis-ci.org/jamesls/semidbm.png?branch=master   :target: http://travis-ci.org/jamesls/semidbm.. image:: https://coveralls.io/repos/jamesls/semidbm/badge.png?branch=master   :target: https://coveralls.io/r/jamesls/semidbm?branch=master.. image:: https://pypip.in/version/semidbm/badge.svg    :target: https://pypi.python.org/pypi/semidbm/    :alt: Latest Version.. image:: https://pypip.in/py_versions/semidbm/badge.svg    :target: https://pypi.python.org/pypi/semidbm/    :alt: Supported Python versions.. image:: https://pypip.in/implementation/semidbm/badge.svg    :target: https://pypi.python.org/pypi/semidbm/    :alt: Supported Python implementations.. image:: https://pypip.in/license/semidbm/badge.svg    :target: https://pypi.python.org/pypi/semidbm/    :alt: License.. image:: https://pypip.in/wheel/semidbm/badge.svg    :target: https://pypi.python.org/pypi/semidbm/    :alt: Wheel StatusSemidbm is a fast, pure python implementation of a dbm, which is apersistent key value store. It allows you to get and set keys througha dict interface::    import semidbm    db = semidbm.open('testdb', 'c')    db['foo'] = 'bar'    print db['foo']    db.close()These values are persisted to disk, and you can later retrievethese key/value pairs::    # Then at a later time:    db = semidbm.open('testdb', 'r')    # prints &quot;bar&quot;    print db['foo']It was written with these things in mind:* Pure python, supporting python 2.6, 2.7, 3.3, and 3.4.* Cross platform, works on Windows, Linux, Mac OS X.* Supports CPython, pypy, and jython (versions 2.7-b3 and higher).* Simple and Fast (See `Benchmarking Semidbm &lt;http://semidbm.readthedocs.org/en/latest/benchmarks.html&gt;`__).Supported Python Versions=========================Semidbm supports python 2.6, 2.7, 3.3, and 3.4.=============Official Docs=============Read the `semidbm docs &lt;http://semidbm.readthedocs.org&gt;`_ for more informationand how to use semidbm.========Features========Semidbm originally started off as an improvement over the`dumbdbm &lt;https://docs.python.org/2/library/dumbdbm.html&gt;`__library in the python standard library.  Below are a list of some of theimprovements over dumbdbm.Single Data File================Instead of an index file and a data file, the index and data have beenconsolidated into a single file.  This single data file is always appended to,data written to the file is never modified.Data File Compaction====================Semidbm uses an append only file format.  This has the potential to grow tolarge sizes as space is never reclaimed.  Semidbm addresses this by adding a``compact()`` method that will rewrite the data file to a minimal size.Performance===========Semidbm is significantly faster than dumbdbm (keep in mind both are pure pythonlibraries) in just about every way.  The documentation shows the`results &lt;http://semidbm.readthedocs.org/en/latest/benchmarks.html&gt;`_of semidbm vs. other dbms, along with how to run the benchmarkingscript yourself.===========Limitations===========* Not thread safe; can't be accessed by multiple processes.* The entire index must fit in memory.  This essentially means that all of the  keys must fit in memory.Post feedback and issues on `github issues`_, or check out thelatest changes at the github `repo`_... _github issues: https://github.com/jamesls/semidbm/issues.. _repo: https://github.com/jamesls/semidbm</longdescription>
</pkgmetadata>