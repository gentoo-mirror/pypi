<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python cross-platform network interface discovery=================================================.. image:: https://badge.fury.io/py/ifcfg.svg   :target: https://pypi.python.org/pypi/ifcfg/.. image:: https://travis-ci.org/ftao/python-ifcfg.svg  :target: https://travis-ci.org/ftao/python-ifcfg.. image:: http://codecov.io/github/ftao/python-ifcfg/coverage.svg?branch=master  :target: http://codecov.io/github/ftao/python-ifcfg?branch=masterIfcfg is a cross-platform (Windows/Unix) library for parsing ``ifconfig`` and``ipconfig`` output in Python. It is useful for pulling information such as IP,Netmask, MAC Address, Hostname, etc.A fallbacks to ``ip`` is included for newer Unix systems w/o ``ifconfig``. Windowssystems are supported (in English) through ``ipconfig``.Usage-----::    import ifcfg    import json    for name, interface in ifcfg.interfaces().items():        # do something with interface        print interface['device']       # Device name        print interface['inet']         # First IPv4 found        print interface['inet4']        # List of ips        print interface['inet6']        # List of ips        print interface['netmask']      # Backwards compat: First netmask        print interface['netmasks']     # List of netmasks        print interface['broadcast']    # Backwards compat: First broadcast        print interface['broadcasts']   # List of broadcast    default = ifcfg.default_interface()The output of 'ifcfg.interfaces()' dumped to JSON looks something like thefollowing:::    $ python -m ifcfg.cli | python -mjson.tool    {        &quot;docker0&quot;: {            &quot;inet&quot;: &quot;172.17.0.1&quot;,            &quot;inet4&quot;: [                &quot;172.17.0.1&quot;            ],            &quot;ether&quot;: &quot;01:02:9d:04:07:e3&quot;,            &quot;inet6&quot;: [],            &quot;netmask&quot;: &quot;255.255.0.0&quot;,            &quot;netmasks&quot;: [                &quot;255.255.0.0&quot;            ],            &quot;broadcast&quot;: &quot;172.17.255.255&quot;,            &quot;broadcasts&quot;: [                &quot;172.17.255.255&quot;            ],            &quot;prefixlens&quot;: [],            &quot;device&quot;: &quot;docker0&quot;,            &quot;flags&quot;: &quot;4099&lt;UP,BROADCAST,MULTICAST&gt; &quot;,            &quot;mtu&quot;: &quot;1500&quot;        },        &quot;enp0s25&quot;: {            &quot;inet&quot;: null,            &quot;inet4&quot;: [],            &quot;ether&quot;: &quot;a0:88:b4:3d:67:7b&quot;,            &quot;inet6&quot;: [],            &quot;netmask&quot;: null,            &quot;netmasks&quot;: [],            &quot;broadcast&quot;: null,            &quot;broadcasts&quot;: [],            &quot;prefixlens&quot;: [],            &quot;device&quot;: &quot;enp0s25&quot;,            &quot;flags&quot;: &quot;4099&lt;UP,BROADCAST,MULTICAST&gt; &quot;,            &quot;mtu&quot;: &quot;1500&quot;        },        &quot;lo&quot;: {            &quot;inet&quot;: &quot;127.0.0.1&quot;,            &quot;inet4&quot;: [                &quot;127.0.0.1&quot;            ],            &quot;ether&quot;: null,            &quot;inet6&quot;: [                &quot;::1&quot;            ],            &quot;netmask&quot;: &quot;255.0.0.0&quot;,            &quot;netmasks&quot;: [                &quot;255.0.0.0&quot;            ],            &quot;broadcast&quot;: null,            &quot;broadcasts&quot;: [                null            ],            &quot;prefixlens&quot;: [                &quot;128&quot;            ],            &quot;device&quot;: &quot;lo&quot;,            &quot;flags&quot;: &quot;73&lt;UP,LOOPBACK,RUNNING&gt; &quot;,            &quot;mtu&quot;: &quot;65536&quot;        },    }Development-----------To bootstrap development, use a Python virtual environment, and install the dev requirements::    # Install dev dependencies    pip install -r requirements_dev.txt    # Run tests locally    make testYou can also install tox and run the tests in a specific environment::    pip install tox    tox -e py27Before commiting and opening PRs, ensure that you have pre-commit hooks running::    pip install pre-commit    pre-commit installRelease notes-------------0.24----* add support for arrow notation inet #710.23____* Add support for multiple netmasks, broadcast addresses, as well as ipv6 prefix lengths #670.22____* Python 3.7 and 3.8 support #51 #53* Default interface detection on Windows #25 #56* New flags for unix `ip` command #610.22____* Python 3.7 and 3.8 support #51 #53* Default interface detection on Windows #25 #56* New flags for unix `ip` command #610.21____* Force `C` as locale for running commands, to ensure consistent regex patterns #470.20____* Throw an exception when neither `ip` nor `ifconfig` commands exist #450.19____* Adds support for interfaces with VLAN notation, e.g. `eth2.2` #40* Fetch MTU values from `ip` command results #390.18____* Adds support for interfaces with non-alphanumeric characters, e.g. `eth-int` #35 and #360.17____* Restore ``ip`` after regressions + add tests* Add MacOSX support for ``ip`` command0.16____* Support for multiple IPv4 addresses in the new 'inet4' field* Packaging cleanup0.15____* Support for bridged interface names #240.14____* Replace Python 2 syntax #210.13____* Further crashes on non-English Windows systems #17* Known issue: Localized non-English Windows parsing does not work #180.12____* Fix encoding crashes on non-English Windows systems0.11____After 6 beta releases, we move on from an idea that this is beta software and instead considerit to be stable -- we will probably never actually keep up with all the various ways of detectingnetwork properties for different systems. Anything that is incorrectly detected and can be updated,can also be implemented and shipped as a new patch release.So let's **ship early, ship often** instead.This release seeks to clean up the codebase (sparingly!) and introduceWindows compatibility.* Add Windows compatible parsing of ``ipconfig`` output* Handle non-unicode terminals (Windows+Mac especially)* Removing ill-defined ``encoding`` keyword arg from ``ifcfg.get_parser``* Removed no-op Linux Kernel 2.x parsing and ``kernel`` keyword arg* Removed class ``ifcfg.IfcfgParser``, use ``UnixParser`` instead* All strings are UTF-8, also in Py 2.7* Only cross-platform features are now guaranteed to be in the result set:  ``['inet', 'ether', 'inet6', 'netmask']``* IPv6 addresses are now stored in a list.* Removed prefixlen and scopeid, as they should be added for each IPv6 address, not the  interface* Allow ``ifcfg`` to be imported despite whether or not the OS system is  recognized.* Remove ``ifcfg.exc`` module* Fix some interface names containing `:_-` characters on Linux (Sergej Vasiljev)0.10.1______* Fixed encoding issues, preventing ``default_interface`` to be detected0.10____* Support for Unix systems w/o ``ifconfig``, for instance newer Ubuntu/Debian* Refactored to use  ``src/`` hierarchyLicense-------The Ifcfg library is Open Source and is distributed under the BSDLicense (three clause). Please see the LICENSE file included with thissoftware.</longdescription>
</pkgmetadata>