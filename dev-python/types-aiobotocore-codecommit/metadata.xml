<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;types-aiobotocore-codecommit&quot;&gt;&lt;/a&gt;# types-aiobotocore-codecommit[![PyPI - types-aiobotocore-codecommit](https://img.shields.io/pypi/v/types-aiobotocore-codecommit.svg?color=blue)](https://pypi.org/project/types-aiobotocore-codecommit)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-codecommit.svg?color=blue)](https://pypi.org/project/types-aiobotocore-codecommit)[![Docs](https://img.shields.io/readthedocs/types-aiobotocore.svg?color=blue)](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_codecommit/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-codecommit?color=blue)](https://pypistats.org/packages/types-aiobotocore-codecommit)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[aiobotocore.CodeCommit 2.5.1](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/codecommit.html#CodeCommit)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.14.5](https://github.com/youtype/mypy_boto3_builder).More information can be found on[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in[types-aiobotocore-codecommit docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_codecommit/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [types-aiobotocore-codecommit](#types-aiobotocore-codecommit)  - [How to install](#how-to-install)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Literals](#literals)    - [Typed dictionaries](#typed-dictionaries)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `types-aiobotocore` for `CodeCommit` service.```bash# install with aiobotocore type annotationspython -m pip install 'types-aiobotocore[codecommit]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'types-aiobotocore-lite[codecommit]'# standalone installationpython -m pip install types-aiobotocore-codecommit```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y types-aiobotocore-codecommit```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `types-aiobotocore[codecommit]` in your environment:```bashpython -m pip install 'types-aiobotocore[codecommit]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `aiobotocore` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `types-aiobotocore-lite[codecommit]` in your environment:```bashpython -m pip install 'types-aiobotocore-lite[codecommit]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `types-aiobotocore` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `types-aiobotocore` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[codecommit]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed  `types-aiobotocore`Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `types-aiobotocore[codecommit]` with services you use in your  environment:```bashpython -m pip install 'types-aiobotocore[codecommit]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `types-aiobotocore[codecommit]` in your environment:```bashpython -m pip install 'types-aiobotocore[codecommit]'````Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `types-aiobotocore[codecommit]` in your environment:```bashpython -m pip install 'types-aiobotocore[codecommit]'```Optionally, you can install `types-aiobotocore` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`CodeCommitClient` provides annotations for`session.create_client(&quot;codecommit&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_codecommit import CodeCommitClientsession = get_session()async with session.create_client(&quot;codecommit&quot;) as client:    client: CodeCommitClient    # now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`types_aiobotocore_codecommit.paginator` module contains type annotations forall paginators.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_codecommit import CodeCommitClientfrom types_aiobotocore_codecommit.paginator import (    DescribePullRequestEventsPaginator,    GetCommentsForComparedCommitPaginator,    GetCommentsForPullRequestPaginator,    GetDifferencesPaginator,    ListBranchesPaginator,    ListPullRequestsPaginator,    ListRepositoriesPaginator,)session = get_session()async with session.create_client(&quot;codecommit&quot;) as client:    client: CodeCommitClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    describe_pull_request_events_paginator: DescribePullRequestEventsPaginator = (        client.get_paginator(&quot;describe_pull_request_events&quot;)    )    get_comments_for_compared_commit_paginator: GetCommentsForComparedCommitPaginator = (        client.get_paginator(&quot;get_comments_for_compared_commit&quot;)    )    get_comments_for_pull_request_paginator: GetCommentsForPullRequestPaginator = (        client.get_paginator(&quot;get_comments_for_pull_request&quot;)    )    get_differences_paginator: GetDifferencesPaginator = client.get_paginator(&quot;get_differences&quot;)    list_branches_paginator: ListBranchesPaginator = client.get_paginator(&quot;list_branches&quot;)    list_pull_requests_paginator: ListPullRequestsPaginator = client.get_paginator(        &quot;list_pull_requests&quot;    )    list_repositories_paginator: ListRepositoriesPaginator = client.get_paginator(        &quot;list_repositories&quot;    )```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`types_aiobotocore_codecommit.literals` module contains literals extracted fromshapes that can be used in user code for type checking.```pythonfrom types_aiobotocore_codecommit.literals import (    ApprovalStateType,    ChangeTypeEnumType,    ConflictDetailLevelTypeEnumType,    ConflictResolutionStrategyTypeEnumType,    DescribePullRequestEventsPaginatorName,    FileModeTypeEnumType,    GetCommentsForComparedCommitPaginatorName,    GetCommentsForPullRequestPaginatorName,    GetDifferencesPaginatorName,    ListBranchesPaginatorName,    ListPullRequestsPaginatorName,    ListRepositoriesPaginatorName,    MergeOptionTypeEnumType,    ObjectTypeEnumType,    OrderEnumType,    OverrideStatusType,    PullRequestEventTypeType,    PullRequestStatusEnumType,    RelativeFileVersionEnumType,    ReplacementTypeEnumType,    RepositoryTriggerEventEnumType,    SortByEnumType,    CodeCommitServiceName,    ServiceName,    ResourceServiceName,    PaginatorName,    RegionName,)def check_value(value: ApprovalStateType) -&gt; bool:    ...```&lt;a id=&quot;typed-dictionaries&quot;&gt;&lt;/a&gt;### Typed dictionaries`types_aiobotocore_codecommit.type_defs` module contains structures and shapesassembled to typed dictionaries for additional type checking.```pythonfrom types_aiobotocore_codecommit.type_defs import (    ApprovalRuleEventMetadataTypeDef,    ApprovalRuleOverriddenEventMetadataTypeDef,    ApprovalRuleTemplateTypeDef,    OriginApprovalRuleTemplateTypeDef,    ApprovalStateChangedEventMetadataTypeDef,    ApprovalTypeDef,    AssociateApprovalRuleTemplateWithRepositoryInputRequestTypeDef,    BatchAssociateApprovalRuleTemplateWithRepositoriesErrorTypeDef,    BatchAssociateApprovalRuleTemplateWithRepositoriesInputRequestTypeDef,    BatchDescribeMergeConflictsErrorTypeDef,    BatchDescribeMergeConflictsInputRequestTypeDef,    BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorTypeDef,    BatchDisassociateApprovalRuleTemplateFromRepositoriesInputRequestTypeDef,    BatchGetCommitsErrorTypeDef,    BatchGetCommitsInputRequestTypeDef,    BatchGetRepositoriesInputRequestTypeDef,    RepositoryMetadataTypeDef,    BlobMetadataTypeDef,    BranchInfoTypeDef,    CommentTypeDef,    LocationTypeDef,    UserInfoTypeDef,    FileModesTypeDef,    FileSizesTypeDef,    IsBinaryFileTypeDef,    MergeOperationsTypeDef,    ObjectTypesTypeDef,    DeleteFileEntryTypeDef,    ReplaceContentEntryTypeDef,    SetFileModeEntryTypeDef,    CreateApprovalRuleTemplateInputRequestTypeDef,    CreateBranchInputRequestTypeDef,    FileMetadataTypeDef,    CreatePullRequestApprovalRuleInputRequestTypeDef,    TargetTypeDef,    CreateRepositoryInputRequestTypeDef,    CreateUnreferencedMergeCommitOutputTypeDef,    DeleteApprovalRuleTemplateInputRequestTypeDef,    DeleteApprovalRuleTemplateOutputTypeDef,    DeleteBranchInputRequestTypeDef,    DeleteCommentContentInputRequestTypeDef,    DeleteFileInputRequestTypeDef,    DeleteFileOutputTypeDef,    DeletePullRequestApprovalRuleInputRequestTypeDef,    DeletePullRequestApprovalRuleOutputTypeDef,    DeleteRepositoryInputRequestTypeDef,    DeleteRepositoryOutputTypeDef,    DescribeMergeConflictsInputRequestTypeDef,    DescribePullRequestEventsInputDescribePullRequestEventsPaginateTypeDef,    DescribePullRequestEventsInputRequestTypeDef,    DisassociateApprovalRuleTemplateFromRepositoryInputRequestTypeDef,    EmptyResponseMetadataTypeDef,    EvaluatePullRequestApprovalRulesInputRequestTypeDef,    EvaluationTypeDef,    FileTypeDef,    FolderTypeDef,    GetApprovalRuleTemplateInputRequestTypeDef,    GetBlobInputRequestTypeDef,    GetBlobOutputTypeDef,    GetBranchInputRequestTypeDef,    GetCommentInputRequestTypeDef,    GetCommentReactionsInputRequestTypeDef,    GetCommentsForComparedCommitInputGetCommentsForComparedCommitPaginateTypeDef,    GetCommentsForComparedCommitInputRequestTypeDef,    GetCommentsForPullRequestInputGetCommentsForPullRequestPaginateTypeDef,    GetCommentsForPullRequestInputRequestTypeDef,    GetCommitInputRequestTypeDef,    GetDifferencesInputGetDifferencesPaginateTypeDef,    GetDifferencesInputRequestTypeDef,    GetFileInputRequestTypeDef,    GetFileOutputTypeDef,    GetFolderInputRequestTypeDef,    SubModuleTypeDef,    SymbolicLinkTypeDef,    GetMergeCommitInputRequestTypeDef,    GetMergeCommitOutputTypeDef,    GetMergeConflictsInputRequestTypeDef,    GetMergeOptionsInputRequestTypeDef,    GetMergeOptionsOutputTypeDef,    GetPullRequestApprovalStatesInputRequestTypeDef,    GetPullRequestInputRequestTypeDef,    GetPullRequestOverrideStateInputRequestTypeDef,    GetPullRequestOverrideStateOutputTypeDef,    GetRepositoryInputRequestTypeDef,    GetRepositoryTriggersInputRequestTypeDef,    RepositoryTriggerTypeDef,    ListApprovalRuleTemplatesInputRequestTypeDef,    ListApprovalRuleTemplatesOutputTypeDef,    ListAssociatedApprovalRuleTemplatesForRepositoryInputRequestTypeDef,    ListAssociatedApprovalRuleTemplatesForRepositoryOutputTypeDef,    ListBranchesInputListBranchesPaginateTypeDef,    ListBranchesInputRequestTypeDef,    ListBranchesOutputTypeDef,    ListPullRequestsInputListPullRequestsPaginateTypeDef,    ListPullRequestsInputRequestTypeDef,    ListPullRequestsOutputTypeDef,    ListRepositoriesForApprovalRuleTemplateInputRequestTypeDef,    ListRepositoriesForApprovalRuleTemplateOutputTypeDef,    ListRepositoriesInputListRepositoriesPaginateTypeDef,    ListRepositoriesInputRequestTypeDef,    RepositoryNameIdPairTypeDef,    ListTagsForResourceInputRequestTypeDef,    ListTagsForResourceOutputTypeDef,    MergeBranchesByFastForwardInputRequestTypeDef,    MergeBranchesByFastForwardOutputTypeDef,    MergeBranchesBySquashOutputTypeDef,    MergeBranchesByThreeWayOutputTypeDef,    MergeHunkDetailTypeDef,    MergeMetadataTypeDef,    MergePullRequestByFastForwardInputRequestTypeDef,    OverridePullRequestApprovalRulesInputRequestTypeDef,    PaginatorConfigTypeDef,    PostCommentReplyInputRequestTypeDef,    PullRequestCreatedEventMetadataTypeDef,    PullRequestSourceReferenceUpdatedEventMetadataTypeDef,    PullRequestStatusChangedEventMetadataTypeDef,    PutCommentReactionInputRequestTypeDef,    SourceFileSpecifierTypeDef,    PutFileInputRequestTypeDef,    PutFileOutputTypeDef,    PutRepositoryTriggersOutputTypeDef,    ReactionValueFormatsTypeDef,    RepositoryTriggerExecutionFailureTypeDef,    ResponseMetadataTypeDef,    TagResourceInputRequestTypeDef,    UntagResourceInputRequestTypeDef,    UpdateApprovalRuleTemplateContentInputRequestTypeDef,    UpdateApprovalRuleTemplateDescriptionInputRequestTypeDef,    UpdateApprovalRuleTemplateNameInputRequestTypeDef,    UpdateCommentInputRequestTypeDef,    UpdateDefaultBranchInputRequestTypeDef,    UpdatePullRequestApprovalRuleContentInputRequestTypeDef,    UpdatePullRequestApprovalStateInputRequestTypeDef,    UpdatePullRequestDescriptionInputRequestTypeDef,    UpdatePullRequestStatusInputRequestTypeDef,    UpdatePullRequestTitleInputRequestTypeDef,    UpdateRepositoryDescriptionInputRequestTypeDef,    UpdateRepositoryNameInputRequestTypeDef,    CreateApprovalRuleTemplateOutputTypeDef,    GetApprovalRuleTemplateOutputTypeDef,    UpdateApprovalRuleTemplateContentOutputTypeDef,    UpdateApprovalRuleTemplateDescriptionOutputTypeDef,    UpdateApprovalRuleTemplateNameOutputTypeDef,    ApprovalRuleTypeDef,    GetPullRequestApprovalStatesOutputTypeDef,    BatchAssociateApprovalRuleTemplateWithRepositoriesOutputTypeDef,    BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputTypeDef,    BatchGetRepositoriesOutputTypeDef,    CreateRepositoryOutputTypeDef,    GetRepositoryOutputTypeDef,    DifferenceTypeDef,    DeleteBranchOutputTypeDef,    GetBranchOutputTypeDef,    DeleteCommentContentOutputTypeDef,    GetCommentOutputTypeDef,    PostCommentReplyOutputTypeDef,    UpdateCommentOutputTypeDef,    CommentsForComparedCommitTypeDef,    CommentsForPullRequestTypeDef,    PostCommentForComparedCommitInputRequestTypeDef,    PostCommentForComparedCommitOutputTypeDef,    PostCommentForPullRequestInputRequestTypeDef,    PostCommentForPullRequestOutputTypeDef,    CommitTypeDef,    ConflictMetadataTypeDef,    ConflictResolutionTypeDef,    CreateCommitOutputTypeDef,    CreatePullRequestInputRequestTypeDef,    EvaluatePullRequestApprovalRulesOutputTypeDef,    GetFolderOutputTypeDef,    GetRepositoryTriggersOutputTypeDef,    PutRepositoryTriggersInputRequestTypeDef,    TestRepositoryTriggersInputRequestTypeDef,    ListRepositoriesOutputTypeDef,    MergeHunkTypeDef,    PullRequestMergedStateChangedEventMetadataTypeDef,    PullRequestTargetTypeDef,    PutFileEntryTypeDef,    ReactionForCommentTypeDef,    TestRepositoryTriggersOutputTypeDef,    CreatePullRequestApprovalRuleOutputTypeDef,    UpdatePullRequestApprovalRuleContentOutputTypeDef,    GetDifferencesOutputTypeDef,    GetCommentsForComparedCommitOutputTypeDef,    GetCommentsForPullRequestOutputTypeDef,    BatchGetCommitsOutputTypeDef,    GetCommitOutputTypeDef,    GetMergeConflictsOutputTypeDef,    CreateUnreferencedMergeCommitInputRequestTypeDef,    MergeBranchesBySquashInputRequestTypeDef,    MergeBranchesByThreeWayInputRequestTypeDef,    MergePullRequestBySquashInputRequestTypeDef,    MergePullRequestByThreeWayInputRequestTypeDef,    ConflictTypeDef,    DescribeMergeConflictsOutputTypeDef,    PullRequestEventTypeDef,    PullRequestTypeDef,    CreateCommitInputRequestTypeDef,    GetCommentReactionsOutputTypeDef,    BatchDescribeMergeConflictsOutputTypeDef,    DescribePullRequestEventsOutputTypeDef,    CreatePullRequestOutputTypeDef,    GetPullRequestOutputTypeDef,    MergePullRequestByFastForwardOutputTypeDef,    MergePullRequestBySquashOutputTypeDef,    MergePullRequestByThreeWayOutputTypeDef,    UpdatePullRequestDescriptionOutputTypeDef,    UpdatePullRequestStatusOutputTypeDef,    UpdatePullRequestTitleOutputTypeDef,)def get_structure() -&gt; ApprovalRuleEventMetadataTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for`aiobotocore` updates. It delivers drop-in type annotations for you and makessure that:- All available `aiobotocore` services are covered.- Each public class and method of every `aiobotocore` service gets valid type  annotations extracted from `botocore` schemas.- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`  libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.resource` calls- Auto discovery of types for `session.client` and `session.resource` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`types-aiobotocore-codecommit` version is the same as related `aiobotocore`version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_codecommit/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>