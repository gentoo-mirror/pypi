<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-types [![PyPI](https://img.shields.io/pypi/v/django-types.svg)](https://pypi.org/project/django-types/)Type stubs for [Django](https://www.djangoproject.com).&gt; Note: this project was forked from&gt; &lt;https://github.com/typeddjango/django-stubs&gt; with the goal of removing the&gt; [`mypy`](https://github.com/python/mypy) plugin dependency so that `mypy`&gt; can't [crash due to Django&gt; config](https://github.com/typeddjango/django-stubs/issues/318), and that&gt; non-`mypy` type checkers like&gt; [`pyright`](https://github.com/microsoft/pyright) will work better with&gt; Django.## install```bashpip install django-types```You'll need to monkey patch Django's `QuerySet`, `Manager` (not needed for Django 3.1+) and`ForeignKey`  (not needed for Django 4.1+) classes so we can index into them with a genericargument. Add this to your settings.py:```python# in settings.pyfrom django.db.models import ForeignKeyfrom django.db.models.manager import BaseManagerfrom django.db.models.query import QuerySet# NOTE: there are probably other items you'll need to monkey patch depending on# your version.for cls in [QuerySet, BaseManager, ForeignKey]:    cls.__class_getitem__ = classmethod(lambda cls, *args, **kwargs: cls)  # type: ignore [attr-defined]```## usage### ForeignKey ids and related names as properties in ORM modelsWhen defining a Django ORM model with a foreign key, like so:```pythonclass User(models.Model):    team = models.ForeignKey(        &quot;Team&quot;,        null=True,        on_delete=models.SET_NULL,    )    role = models.ForeignKey(        &quot;Role&quot;,        null=True,        on_delete=models.SET_NULL,        related_name=&quot;users&quot;,    )```two properties are created, `team` as expected, and `team_id`. Also, a relatedmanager called `user_set` is created on `Team` for the reverse access.In order to properly add typing to the foreign key itself and also for the created ids you can dosomething like this:```pythonfrom typing import TYPE_CHECKINGfrom someapp.models import Teamif TYPE_CHECKING:    # In this example Role cannot be imported due to circular import issues,    # but doing so inside TYPE_CHECKING will make sure that the typing below    # knows what &quot;Role&quot; means    from anotherapp.models import Roleclass User(models.Model):    team_id: Optional[int]    team = models.ForeignKey(        Team,        null=True,        on_delete=models.SET_NULL,    )    role_id: int    role = models.ForeignKey[&quot;Role&quot;](        &quot;Role&quot;,        null=False,        on_delete=models.SET_NULL,        related_name=&quot;users&quot;,    )reveal_type(User().team)# note: Revealed type is 'Optional[Team]'reveal_type(User().role)# note: Revealed type is 'Role'```This will make sure that `team_id` and `role_id` can be accessed. Also, `team` and `role`will be typed to their right objects.To be able to access the related manager `Team` and `Role` you could do:```pythonfrom typing import TYPE_CHECKINGif TYPE_CHECKING:    # This doesn't really exists on django so it always need to be imported this way    from django.db.models.manager import RelatedManager    from user.models import Userclass Team(models.Model):    if TYPE_CHECKING:        user_set = RelatedManager[&quot;User&quot;]()class Role(models.Model):    if TYPE_CHECKING:        users = RelatedManager[&quot;User&quot;]()reveal_type(Team().user_set)# note: Revealed type is 'RelatedManager[User]'reveal_type(Role().users)# note: Revealed type is 'RelatedManager[User]'```An alternative is using annotations:```pythonfrom __future__ import annotations  # or just be in python 3.11from typing import TYPE_CHECKINGif TYPE_CHECKING:    from django.db.models import Manager    from user.models import Userclass Team(models.Model):    user_set: Manager[User]class Role(models.Model):    users: Manager[User]reveal_type(Team().user_set)# note: Revealed type is 'Manager[User]'reveal_type(Role().users)# note: Revealed type is 'Manager[User]'```### `id Field`By default Django will create an `AutoField` for you if one doesn't exist.For type checkers to know about the `id` field you'll need to declare thefield explicitly.```python# beforeclass Post(models.Model):    ...# afterclass Post(models.Model):    id = models.AutoField(primary_key=True)    # OR    id: int```### `HttpRequest`'s `user` propertyThe `HttpRequest`'s `user` property has a type of `Union[AbstractBaseUser, AnonymousUser]`,but for most of your views you'll probably want either an authed user or an`AnonymousUser`.So we can define a subclass for each case:```pythonclass AuthedHttpRequest(HttpRequest):    user: User  # type: ignore [assignment]```And then you can use it in your views:```python@auth.login_requireddef activity(request: AuthedHttpRequest, team_id: str) -&gt; HttpResponse:    ...```You can also get more strict with your `login_required` decorator so that thefirst argument of the function it is decorating is `AuthedHttpRequest`:```pythonfrom typing import Any, Union, TypeVar, castfrom django.http import HttpRequest, HttpResponsefrom typing_extensions import Protocolfrom functools import wrapsclass RequestHandler1(Protocol):    def __call__(self, request: AuthedHttpRequest) -&gt; HttpResponse:        ...class RequestHandler2(Protocol):    def __call__(self, request: AuthedHttpRequest, __arg1: Any) -&gt; HttpResponse:        ...RequestHandler = Union[RequestHandler1, RequestHandler2]# Verbose bound arg due to limitations of Python typing.# see: https://github.com/python/mypy/issues/5876_F = TypeVar(&quot;_F&quot;, bound=RequestHandler)def login_required(view_func: _F) -&gt; _F:    @wraps(view_func)    def wrapped_view(        request: AuthedHttpRequest, *args: object, **kwargs: object    ) -&gt; HttpResponse:        if request.user.is_authenticated:            return view_func(request, *args, **kwargs)  # type: ignore [call-arg]        raise AuthenticationRequired    return cast(_F, wrapped_view)```Then the following will type error:```python@auth.login_requireddef activity(request: HttpRequest, team_id: str) -&gt; HttpResponse:    ...```## related- &lt;https://github.com/sbdchd/djangorestframework-types&gt;- &lt;https://github.com/sbdchd/celery-types&gt;- &lt;https://github.com/sbdchd/mongo-types&gt;- &lt;https://github.com/sbdchd/msgpack-types&gt;</longdescription>
</pkgmetadata>