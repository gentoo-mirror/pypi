<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyVista xarray[![PyPI](https://img.shields.io/pypi/v/pyvista-xarray.svg?logo=python&amp;logoColor=white)](https://pypi.org/project/pyvista-xarray/)[![codecov](https://codecov.io/gh/pyvista/pyvista-xarray/branch/main/graph/badge.svg?token=4BSDVV0WOG)](https://codecov.io/gh/pyvista/pyvista-xarray)[![MyBinder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/pyvista/pyvista-xarray/HEAD)xarray DataArray accessors for PyVista to visualize datasets in 3D## üöÄ UsageYou must `import pvxarray` in order to register the `DataArray` accessor withxarray. After which, a `pyvista` namespace of accessors will be available.Try on MyBinder: https://mybinder.org/v2/gh/pyvista/pyvista-xarray/HEADThe following is an example to visualize a `RectilinearGrid` with PyVista:```pyimport pvxarrayimport xarray as xrds = xr.tutorial.load_dataset(&quot;air_temperature&quot;)da = ds.air[dict(time=0)]  # Select DataArray for a timestep# Plot in 3Dda.pyvista.plot(x=&quot;lon&quot;, y=&quot;lat&quot;, show_edges=True, cpos='xy')# Or grab the mesh object for use with PyVistamesh = da.pyvista.mesh(x=&quot;lon&quot;, y=&quot;lat&quot;)```&lt;!-- notebook=0, off_screen=1, screenshot='imgs/air_temperature.png' --&gt;![air_temperature](https://raw.githubusercontent.com/pyvista/pyvista-xarray/main/imgs/air_temperature.png)Or you can read VTK meshes directly to xarray:```pyimport xarray as xrds = xr.open_dataset(&quot;data.vtk&quot;, engine=&quot;pyvista&quot;)ds[&quot;data array&quot;].pyvista.plot(x=&quot;x&quot;, y=&quot;y&quot;, z=&quot;z&quot;)```## ‚¨áÔ∏è Installation### üêç Installing with `conda`Conda makes managing `pyvista-xarray`'s dependencies across platforms quiteeasy and this is the recommended method to install:```bashconda install -c conda-forge pyvista-xarray```### üé° Installing with `pip`If you prefer pip, then you can install from PyPI: https://pypi.org/project/pyvista-xarray/```bashpip install pyvista-xarray```### Upstream WorkMany of the examples leverage brand new features in PyVista `v0.38.1` andGeoVista which may not yet be released when you're reading this. Here is a listof pull requests needed for some of the examples:- GeoVista algorithm support: https://github.com/bjlittle/geovista/pull/127Work that was required and merged:- https://github.com/pyvista/pyvista/pull/2698- https://github.com/pyvista/pyvista/pull/2697- https://github.com/pyvista/pyvista/pull/3318- https://github.com/pyvista/pyvista/pull/3556- https://github.com/pyvista/pyvista/pull/3385## üí≠ FeedbackPlease share your thoughts and questions on the Discussions board. If you wouldlike to report any bugs or make feature requests, please open an issue.If filing a bug report, please share a scooby Report:```pyimport pvxarrayprint(pvxarray.Report())```## üèè Further ExamplesThe following are a few simple examples taken from the xarray andrioxarray documentation. There are also more sophisticated examplesin the `examples/` directory in this repository.### Simple RectilinearGrid```pyimport numpy as npimport pvxarrayimport xarray as xrlon = np.array([-99.83, -99.32])lat = np.array([42.25, 42.21])z = np.array([0, 10])temp = 15 + 8 * np.random.randn(2, 2, 2)ds = xr.Dataset(    {        &quot;temperature&quot;: ([&quot;z&quot;, &quot;x&quot;, &quot;y&quot;], temp),    },    coords={        &quot;lon&quot;: ([&quot;x&quot;], lon),        &quot;lat&quot;: ([&quot;y&quot;], lat),        &quot;z&quot;: ([&quot;z&quot;], z),    },)mesh = ds.temperature.pyvista.mesh(x=&quot;lon&quot;, y=&quot;lat&quot;, z=&quot;z&quot;)mesh.plot()```## Raster with rioxarray```pyimport pvxarrayimport rioxarrayimport xarray as xrda = rioxarray.open_rasterio(&quot;TC_NG_SFBay_US_Geo_COG.tif&quot;)da = da.rio.reproject(&quot;EPSG:3857&quot;)# Grab the mesh object for use with PyVistamesh = da.pyvista.mesh(x=&quot;x&quot;, y=&quot;y&quot;, component=&quot;band&quot;)mesh.plot(scalars=&quot;data&quot;, cpos='xy', rgb=True)```&lt;!-- notebook=0, off_screen=1, screenshot='imgs/raster.png' --&gt;![raster](https://raw.githubusercontent.com/pyvista/pyvista-xarray/main/imgs/raster.png)```pyimport pvxarrayimport rioxarrayda = rioxarray.open_rasterio(&quot;Elevation.tif&quot;)da = da.rio.reproject(&quot;EPSG:3857&quot;)# Grab the mesh object for use with PyVistamesh = da.pyvista.mesh(x=&quot;x&quot;, y=&quot;y&quot;)# Warp top and plot in 3Dmesh.warp_by_scalar().plot()```&lt;!-- notebook=0, off_screen=1, screenshot='imgs/topo.png' --&gt;![topo](https://raw.githubusercontent.com/pyvista/pyvista-xarray/main/imgs/topo.png)## StructuredGrid```pyimport pvxarrayimport pyvista as pvimport xarray as xrds = xr.tutorial.open_dataset(&quot;ROMS_example.nc&quot;, chunks={&quot;ocean_time&quot;: 1})if ds.Vtransform == 1:    Zo_rho = ds.hc * (ds.s_rho - ds.Cs_r) + ds.Cs_r * ds.h    z_rho = Zo_rho + ds.zeta * (1 + Zo_rho / ds.h)elif ds.Vtransform == 2:    Zo_rho = (ds.hc * ds.s_rho + ds.Cs_r * ds.h) / (ds.hc + ds.h)    z_rho = ds.zeta + (ds.zeta + ds.h) * Zo_rhods.coords[&quot;z_rho&quot;] = z_rho.transpose()  # needing transpose seems to be an xarray bugda = ds.salt[dict(ocean_time=0)]# Make array ordering consistentda = da.transpose(&quot;s_rho&quot;, &quot;xi_rho&quot;, &quot;eta_rho&quot;, transpose_coords=False)# Grab StructuredGrid meshmesh = da.pyvista.mesh(x=&quot;lon_rho&quot;, y=&quot;lat_rho&quot;, z=&quot;z_rho&quot;)# Plot in 3Dp = pv.Plotter()p.add_mesh(mesh, lighting=False, cmap='plasma', clim=[0, 35])p.view_vector([1, -1, 1])p.set_scale(zscale=0.001)p.show()```![raster](https://raw.githubusercontent.com/pyvista/pyvista-xarray/main/imgs/structured.png)</longdescription>
</pkgmetadata>