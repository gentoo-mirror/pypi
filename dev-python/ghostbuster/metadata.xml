<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Table of Contents=================-  `Table of Contents &lt;#table-of-contents&gt;`__-  `Ghostbuster &lt;#ghostbuster&gt;`__   -  `The problem &lt;#the-problem&gt;`__   -  `Project Features &lt;#project-features&gt;`__   -  `Installing Ghostbuster &lt;#installing-ghostbuster&gt;`__   -  `Using Ghostbuster &lt;#using-ghostbuster&gt;`__   -  `Example Output &lt;#example-output&gt;`__   -  `Setting up your AWS accounts &lt;#setting-up-your-aws-accounts&gt;`__   -  `Setting up Cloudflare      (Optional) &lt;#setting-up-cloudflare-optional&gt;`__   -  `Authors &lt;#authors&gt;`__   -  `License &lt;#license&gt;`__Ghostbuster===========Eliminate dangling elastic IPs by performing analysis on your resourceswithin all your AWS accounts.Ghostbuster obtains all the DNS records present in all of your AWSaccounts (Route53), and can optionally take in records via CSV input, orvia Cloudflare.After these records are collected, Ghostbuster iterates through all ofyour AWS Elastic IPs and Network Interface Public IPs and collects thisdata.By having a complete picture of the DNS records (from route53, fileinput or cloudflare) and having a complete picture of the AWS IPs ownedby your organization, this tool can detect subdomains that are pointingto dangling elastic IPs (IPs you no longer own).The problem-----------When you are deploying infrastructure to AWS, you may spin up EC2instances which have an IP associated with them. When you create DNSrecords pointing to these IPs, but forget to remove the DNS recordsafter the EC2 instance has been given a new IP or destroyed, you aresusceptible to subdomain takeover attacks.There has been a great amount of research done on elastic IP takeovers,where it is possible for attackers to continually claim elastic IPsuntil they obtain an IP associated with a subdomain of the company theyare targeting.While AWS frequently bans accounts that are attempting to perform thisattack pattern, no long term fix has been released by AWS.The impact of dangling elastic IP subdomain takeover attacks are moreserious than a typical subdomain takeover where you can only control thecontent being served. With dangling elastic IP takeovers, it is possiblefor an attacker to do the following:-  Claim SSL certificates for the subdomain-  Listen for traffic on all ports (potentially discovering sensitive   information still being sent to the subdomain)-  Run server-side scripts with the ability to steal HTTPOnly cookies,   typically leading to a one-click account takeover attack when cookies   are scoped to ``*.domain.com``Project Features-----------------  Dynamically iterates through each AWS profile configured in   ``.aws/config``-  Pulls A records from AWS Route53-  Pulls A records from Cloudflare (optional)-  Pulls A records from CSV input (optional)-  Iterate through all regions, a single region, or a comma delimitted   list of regions-  Obtains all Elastic IPs associated with all of your AWS accounts-  Obtains all Public IPs associated with all of your AWS accounts-  Cross checks the DNS records, with IPs owned by your organization to   detect potential takeovers-  Slack Webhook support to send notifications of takeovers**Important:**In order for this tool to be effective, it must have a complete pictureof your AWS environment. If it does not have a complete picture, it willlead to false positive findings.Installing Ghostbuster----------------------Installing Ghostbuster is as simple as running:``pip install ghostbuster``. The CLI tool will then be accessible viathe ``ghostbuster`` command.This requires a Python 3.x environment.Using Ghostbuster-----------------::   ❯ ghostbuster scan aws --help                                                                                                                                                                        Usage: ghostbuster scan aws [OPTIONS]     Scan for dangling elastic IPs inside your AWS accounts.   Options:     --profile TEXT          Specify a specific AWS profile to run ghostbuster                             on.     --skipascii             Skip printing the ASCII art when starting up                             Ghostbuster.     --json                  Only return a JSON object.     --slackwebhook TEXT     Specify a Slack webhook URL to send notifications                             about potential takeovers.     --records PATH          Manually specify DNS records to check against.                             Ghostbuster will check these IPs after checking                             retrieved DNS records. See records.csv for an                             example.     --cloudflaretoken TEXT  Pull DNS records from Cloudflare, provide a CF API                             token.     --allregions            Run on all regions.     --exclude TEXT          Comma delimited list of profile names to exclude.     --regions TEXT          Comma delimited list of regions to run on.     --help                  Show this message and exit.**Example Commands**Run Ghostbuster with access to Cloudflare DNS records, sendnotifications to a Slack webhook, iterate through every AWS profileconfigured in ``.aws/config or .aws/credentials`` for all AWS regions::   ❯ ghostbuster scan aws --cloudflaretoken APIKEY --slackwebhook https://hooks.slack.com/services/KEY --allregionsRun Ghostbuster with a manually input list of subdomain A records (see``records.csv`` in this repo for example file):::   ❯ ghostbuster scan aws --records records.csvYou can specify specific regions using ``--regions`` set to a commadelimited list of regions i.e. ``us-east-1,us-west-1``.Example Output--------------::   ❯ ghostbuster scan aws --cloudflaretoken whougonnacall   Obtaining all zone names from Cloudflare.   Obtaining DNS A records for all zones from Cloudflare.   Obtained 33 DNS A records so far.   Obtaining Route53 hosted zones for AWS profile: default.   Obtaining Route53 hosted zones for AWS profile: account-five.   Obtaining Route53 hosted zones for AWS profile: account-four.   Obtaining Route53 hosted zones for AWS profile: account-four-deploy.   Obtaining Route53 hosted zones for AWS profile: account-two-deploy.   Obtaining Route53 hosted zones for AWS profile: account-one-deploy.   Obtaining Route53 hosted zones for AWS profile: account-three-deploy.   Obtaining Route53 hosted zones for AWS profile: account-six.   Obtaining Route53 hosted zones for AWS profile: account-seven.   Obtaining Route53 hosted zones for AWS profile: account-one.   Obtained 124 DNS A records so far.   Obtaining EIPs for region: us-east-1, profile: default   Obtaining IPs for network interfaces for region: us-east-1, profile: default   Obtaining EIPs for region: us-east-1, profile: account-five   Obtaining IPs for network interfaces for region: us-east-1, profile: account-five   Obtaining EIPs for region: us-east-1, profile: account-four   Obtaining IPs for network interfaces for region: us-east-1, profile: account-four   Obtaining EIPs for region: us-east-1, profile: account-four-deploy   Obtaining IPs for network interfaces for region: us-east-1, profile: account-four-deploy   Obtaining EIPs for region: us-east-1, profile: account-two-deploy   Obtaining IPs for network interfaces for region: us-east-1, profile: account-two-deploy   Obtaining EIPs for region: us-east-1, profile: account-one-deploy   Obtaining IPs for network interfaces for region: us-east-1, profile: account-one-deploy   Obtaining EIPs for region: us-east-1, profile: account-three-deploy   Obtaining IPs for network interfaces for region: us-east-1, profile: account-three-deploy   Obtaining EIPs for region: us-east-1, profile: account-six   Obtaining IPs for network interfaces for region: us-east-1, profile: account-six   Obtaining EIPs for region: us-east-1, profile: account-seven   Obtaining IPs for network interfaces for region: us-east-1, profile: account-seven   Obtaining EIPs for region: us-east-1, profile: account-one   Obtaining IPs for network interfaces for region: us-east-1, profile: account-one   Obtained 415 unique elastic IPs from AWS.   Takeover possible: {'name': 'takeover.assetnotecloud.com', 'records': ['52.54.24.193']}Setting up your AWS accounts----------------------------The first step is creating keys or roles in your AWS accounts that grantthe privileges necessary to read Route53 records and describe elasticaddresses and EC2 network interfaces.1. To create a new IAM user in AWS, visit the following URL:   https://console.aws.amazon.com/iam/home#/users$new?step=details2. Choose ``Access key - Programmatic access`` only, and click   ``Next: Permissions``.3. Click ``Attach existing policies directly`` and then click   ``Create policy``.4. Click ``JSON`` and then paste in the following policy:.. code:: terraform   {       &quot;Version&quot;: &quot;2012-10-17&quot;,       &quot;Statement&quot;: [           {               &quot;Sid&quot;: &quot;GhostbusterPolicy&quot;,               &quot;Effect&quot;: &quot;Allow&quot;,               &quot;Action&quot;: [                   &quot;ec2:DescribeAddresses&quot;,                   &quot;ec2:DescribeNetworkInterfaces&quot;,                   &quot;route53:ListResourceRecordSets&quot;,                   &quot;route53:ListHostedZonesByName&quot;,                   &quot;route53:GetTrafficPolicyInstance&quot;,                   &quot;route53:GetTrafficPolicy&quot;               ],               &quot;Resource&quot;: &quot;*&quot;           }       ]   }5.  Click ``Next: Tags`` and then ``Next: Review``.6.  Set the name of the policy to be ``GhostbusterPolicy``.7.  Click ``Create Policy``.8.  Go to    https://console.aws.amazon.com/iam/home#/users$new?step=permissions&amp;accessKey&amp;userNames=ghostbuster&amp;permissionType=policies9.  Select ``GhostbusterPolicy``.10. Click ``Next: Tags`` and then ``Next: Review``.11. Click on ``Create user`` and setup the AWS credentials in your    ``.aws/credentials`` file.Repeat the above steps for each AWS account you own.This tool will work with however you’ve setup your AWS configuration(multiple keys, or cross-account assume role profiles). This is managedby boto3, the library used to interface with AWS.An example configuration looks like this:``.aws/credentials``:::   [default]   aws_access_key_id = AKIAIII...   aws_secret_access_key = faAaAaA...``.aws/config``:::   [default]   output = table   region = us-east-1   [profile account-one]   role_arn = arn:aws:iam::911111111113:role/Ec2Route53Access   source_profile = default   region = us-east-1   [profile account-two]   role_arn = arn:aws:iam::911111111112:role/Ec2Route53Access   source_profile = default   region = us-east-1   [profile account-three]   region = us-east-1   role_arn = arn:aws:iam::911111111111:role/Ec2Route53Access   source_profile = defaultAlternatively, instead of having roles which are assumed, you can alsoconfigure the ``.aws/credentials`` file to have a list of profiles andassocaited keys with scoped access.Once your AWS configuration has been set with all the accounts in yourAWS environment, you can then run the tool using the following command:Setting up your AWS permissions for –roles------------------------------------------Ghostbuster can use roles instead of profiles which removes the need ofhaving so many credentials at one place. However, roles approach willrequire creating additional IAM policies within you organisation.Roles can be used via ``--roles roles.csv`` or ``--autoroles`` flags. Tosetup ``--roles`` to work, one needs to createGhostbusterTargetAccountRole role **named exactly like that** in everyaccount that is being scanned:.. code:: terraform   {       &quot;Version&quot;: &quot;2012-10-17&quot;,       &quot;Statement&quot;: [           {               &quot;Sid&quot;: &quot;GhostbusterTargetAccountRole&quot;,               &quot;Effect&quot;: &quot;Allow&quot;,               &quot;Action&quot;: [                   &quot;ec2:DescribeAddresses&quot;,                   &quot;ec2:DescribeNetworkInterfaces&quot;,                   &quot;ec2:DescribeRegions&quot;,                   &quot;route53:ListResourceRecordSets&quot;,                   &quot;route53:ListHostedZonesByName&quot;,                   &quot;route53:GetTrafficPolicyInstance&quot;,                   &quot;route53:GetTrafficPolicy&quot;               ],               &quot;Resource&quot;: &quot;*&quot;           }       ]   }The ghostbuster will be running in lambda/ec2/whatever with``ghostbuster`` role - let’s call it ghostbuster master role. The masterrole must be able to assume TargetAccountRoles... code:: terraform   resource &quot;aws_iam_policy&quot; &quot;ghostbuster_target_account_roles&quot; {     name        = &quot;ghostbuster_target_account_roles&quot;     path        = &quot;/&quot;     description = &quot;Allow inspecting DNS and elastic IP data.&quot;     policy = jsonencode({       &quot;Version&quot; : &quot;2012-10-17&quot;,       &quot;Statement&quot; : [         {           &quot;Effect&quot; : &quot;Allow&quot;,           &quot;Action&quot; : &quot;sts:AssumeRole&quot;,           &quot;Resource&quot; : [&quot;arn:aws:iam::*:role/GhostbusterTargetAccountRole&quot;]       }]     })     tags = {       Project = &quot;ghostbuster&quot;     }   }Setting up your AWS permissions for –autoroles----------------------------------------------Automatic account discovery requires additional permission compared to–roles. After setting up –roles to work, consider adding following IAMpolicy in an account that has organisation overview:.. code:: terraform   {       sid = &quot;BaseAccess&quot;       actions = [         &quot;organizations:DescribeAccount&quot;,         &quot;organizations:ListAccounts&quot;       ]       resources = [&quot;*&quot;]       effect    = &quot;Allow&quot;     }   }Then, in the account that is running ghostbuster, attach followingpolicy to ghostbuster master role so it can assume the organisationlookup role:.. code:: terraform   {       &quot;Version&quot; : &quot;2012-10-17&quot;,       &quot;Statement&quot; : [         {           &quot;Effect&quot; : &quot;Allow&quot;,           &quot;Action&quot; : &quot;sts:AssumeRole&quot;,           &quot;Resource&quot; : [&quot;arn:aws:iam::ORG_LOOKUP_ACCOUNT_ID:role/ghostbuster-org-role&quot;]       }]   }Don’t forget to replace ORG_LOOKUP_ACCOUNT_ID with actual account ID.Setting up Cloudflare (Optional)--------------------------------If you want Ghostbuster to pull in all the A records that you have setin Cloudflare, you will have to setup an API token that can read zones.https://dash.cloudflare.com/profile/api-tokensSetup a Cloudflare API token like shown in the screenshot below:.. image:: screenshots/cloudflare.pngOnce you have obtained this API token, make a note of it somewhere(password manager). In order to use it with Ghostbuster, pass it in viathe ``cloudflaretoken`` argument.Authors--------  **Shubham Shah** - *Initial work* -   `github &lt;https://github.com/infosec-au&gt;`__See also the list of`contributors &lt;https://github.com/assetnote/ghostbuster/contributors&gt;`__who participated in this project.License-------GNU Affero General Public LicenseTesting Ghostbusters--------------------1. Clone this repo.2. Install virtualenv using ``pip3 install virtualenv``3. Create a virtual environment using ``virtualenv venv``4. Activate virtual environment using ``. venv/bin/activate``5. Install ghostbuster by going to root of repo.   ``pip3 install --editable .``6. Make your changes and run the ghostbuster command.</longdescription>
</pkgmetadata>