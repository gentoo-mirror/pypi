<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub stars](https://img.shields.io/github/stars/antcer1213/cervmongo)](https://github.com/antcer1213/cervmongo/stargazers) [![GitHub forks](https://img.shields.io/github/forks/antcer1213/cervmongo)](https://github.com/antcer1213/cervmongo/network) [![GitHub issues](https://img.shields.io/github/issues/antcer1213/cervmongo)](https://github.com/antcer1213/cervmongo/issues) [![GitHub license](https://img.shields.io/github/license/antcer1213/cervmongo)](https://github.com/antcer1213/cervmongo) [![Build Status](https://travis-ci.com/antcer1213/cervmongo.svg?branch=master)](https://travis-ci.com/antcer1213/cervmongo)# cervmongoA convenience-based approach to MongoDB w/ Python that works as a drop-in replacement to the IO `pymongo` and AIO `motor` respective clients. Packaged due to excessive reuse in private projects, where it was used to facilitate agile, rapid development of multiple web applications. Database is intentionally loaded by default using URI (can be changed after instance is created), with an optional default collection param. Heads up, most commonly used methods of the client are in UPPERCASE, to ensure names are not taken by the parent classes and keep them nice and short.## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install cervmongo.```bashpip install cervmongo```## Usage```pythonimport cervmongocol_client = cervmongo.quick_load_client(                                database=&quot;test_db&quot;,                                collection=&quot;test_col&quot;,                                replica_set=None,                                async_=False                                ) # convenience functioncol_recs = col_client.GET() # returns cursor as very cool MongoListResponsecol_recs.count() # returns number of total documents in cursorcol_recs.list() # returns list of documents in cursorcol_recs.distinct() # returns list of unique values, default field &quot;_id&quot;col_recs.sort() # returns self, allows sorting# example of creating a documentresult = col_client.POST({&quot;key&quot;: &quot;value&quot;}) # returns pymongo Response document# example of fetching a documentcol_client.GET(result.inserted_id) # returns the created document as dict# example of an update (patch)col_client.PATCH(result.inserted_id, {&quot;$set&quot;: {&quot;key&quot;: &quot;newvalue&quot;}}) # update the document# example of a querycol_client.GET({&quot;key&quot;: &quot;newvalue&quot;}) # returns the cursor resulting from query# will replace existing document if exists, else create new document with _id providedcol_client.PUT({&quot;_id&quot;: result.inserted_id, &quot;key&quot;: &quot;finalvalue&quot;})# will delete documentcol_client.DELETE(result.inserted_id) # returns deleted document# OPTIONALLYcount = col_client.GET(count=True) # returns number of total documents in cursorcount_of_query = col_client.GET({&quot;key&quot;: &quot;value&quot;}, count=True)distinct_values_of_field_key = col_client.GET(distinct=&quot;key&quot;)distinct_ids = col_client.GET(distinct=True) # _id is defaultdistinct_ids_with_query = col_client.GET({&quot;key&quot;: &quot;value&quot;}, distinct=True)sorted_query_one = col_client.GET(key=&quot;key&quot;, sort=cervmongo.DESC) # sorts in descending order by field 'key'sorted_query_two = col_client.GET({&quot;key&quot;: &quot;value&quot;}, key=&quot;key&quot;, sort=cervmongo.DESC)# OPTIONALLYcervmongo.get_config().set_mongo_db(&quot;test_db&quot;)client_class = cervmongo.get_client() # gets client classclient = client_class() # SyncIOClient (subclass of pymongo.MongoClient# ~ motor.motor_asyncio.AsyncIOMotorClient, if async)# same functionality as col_client above,# but collection must be explicitly declared as first arg and# query or record _id, if any, has to be second arg# Example:count = client.GET(&quot;test_col&quot;, count=True)query_results = client.GET(&quot;test_col&quot;, {&quot;key&quot;: &quot;value&quot;})# OTHER FUNCTIONALITYcursor_paged_results = client.PAGINATED_QUERY(after=None, before=None, limit=5) # returns cursor-based initial pagetime_paged_results = client.PAGINATED_QUERY(sort=&quot;created_date&quot;, after=None, before=None, limit=5) # returns time-based initial pageoffset_paged_results = client.PAGINATED_QUERY(page=1, limit=5) # returns offset-based initial pagecount_of_multi_cols = client.GET([&quot;test_col1&quot;, &quot;test_col2&quot;], count=True) # returns list of countsmulti_col_results = client.GET([&quot;test_col1&quot;, &quot;test_col2&quot;], {                &quot;$or&quot;: [                    {&quot;child&quot;: &quot;value&quot;},                    {&quot;related_child&quot;: &quot;value&quot;}                    ]}) # returns list of cursors matching query```### TODO: 1. full testing on AIO Client &amp; Doc classes 2. finish type hints, function hints, and docstrings for readability 3. pydantic first-class treatment 4. restructuring/refactoring/optimizing 5. web api    - datatable mongodb plugin + web endpoint    - restful fastapi server - extra    - possible datatable html + javascript code generator### REQUIRES - python 3.6+ - python packages:    - `pymongo`    - `python-dateutil`    - `jsonschema`    - `dataclasses`### RECOMMENDED - `motor` (for aio options) - `pydantic` (for obj/model validation, ORM) - `marshmallow` (json schema validation) - `python-dotenv` 0.12.0&gt;= (for configuration of MongoDB client and cervmongo)    - cervmongo Settings        - __DEBUG_LEVEL__ (default 30, i.e. `logging.WARNING`)    - mongodb Settings        - Can optionally provide either:            - __MONGO_HOST__ (_default &quot;127.0.0.1&quot;_)            - __MONGO_PORT__ (_default 27017_)            - __MONGO_DB__ (_default None_)            - __MONGO_REPLICA_SET__ (_default None_)            - __MONGO_MAX_POOL_SIZE__ (_default 20_)            - __MONGO_MIN_POOL_SIZE__ (_default 10_)            - __MONGO_USER__ (_default None_)            - __MONGO_PASSWORD__ (_default None_)        - or:            - __MONGO_URI__ (_default None, ex. &quot;mongodb://localhost:27017/app?replicaSet=appSet&quot;_)            - For more information on a MongoDB URI, see here: [Connection String URI Format](https://docs.mongodb.com/manual/reference/connection-string/).## DocumentationFull documentation available [here](https://cerver.info/packages/cervmongo/).## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>