<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GULL-API![Test](https://github.com/mdbecker/gull_api/actions/workflows/test.yml/badge.svg)![Docker Publish](https://github.com/mdbecker/gull_api/actions/workflows/docker-publish.yml/badge.svg?event=release)![PyPI Publish](https://github.com/mdbecker/gull_api/actions/workflows/pypi-publish.yml/badge.svg?event=release)GULL-API is a web application backend that can be used to run Large Language Models (LLMs). The interface between the front-end and the back-end is a JSON REST API.## Features- Exposes a `/api` route that returns a JSON file describing the parameters of the LLM.- Provides a `/llm` route that accepts POST requests with JSON payloads to run the LLM with the specified parameters.## Installation### Using Docker1. Build the Docker image:   ```   docker build -t gull-api .   ```2. Run the Docker container:   ```   docker run -p 8000:8000 gull-api   ```The API will be available at `http://localhost:8000`.### Docker Test ModeTo build and run the Docker container in test mode, use the following commands:```bashdocker build -t gull-api .docker run -v $(pwd)/data:/app/data -v $(pwd)/example_cli.json:/app/cli.json -p 8000:8000 gull-api```In test mode, an included script echo_args.sh is used instead of a real LLM. This script echoes the arguments it receives, which can be helpful for local testing.### Local Installation1. Clone the repository:   ```   git clone https://github.com/yourusername/gull-api.git   ```2. Change to the project directory:   ```   cd gull-api   ```3. Install the dependencies:   ```   pip install poetry   poetry install   ```4. Configure Environment Variables (Optional):   `GULL-API` can be configured using environment variables. To do this, create a file named `.env` in the root of the project directory, and set the environment variables there. For example:   ```   DB_URI=sqlite:///mydatabase.db   CLI_JSON_PATH=/path/to/cli.json   ```   `GULL-API` uses the `python-dotenv` package to load these environment variables when the application starts.5. Run the application:   ```   uvicorn gull_api.main:app --host 0.0.0.0 --port 8000   ```The API will be available at `http://localhost:8000`.## Usage### `/api` RouteSend a GET request to the `/api` route to retrieve a JSON file describing the parameters of the LLM:```GET http://localhost:8000/api```### `/llm` RouteSend a POST request to the `/llm` route with a JSON payload containing the LLM parameters:```POST http://localhost:8000/llmContent-Type: application/json{  &quot;Prompt&quot;: &quot;Once upon a time&quot;,  &quot;Top P&quot;: 0.5}```### Example Requests```bashcurl -X POST &quot;http://localhost:8000/llm&quot; -H  &quot;accept: application/json&quot; -H  &quot;Content-Type: application/json&quot; -d &quot;{\&quot;Instruct mode\&quot;:false, \&quot;Maximum length\&quot;:256, \&quot;Prompt\&quot;:\&quot;Hello, world\&quot;, \&quot;Stop sequences\&quot;:\&quot;Goodbye, world\&quot;, \&quot;Temperature\&quot;:0.7, \&quot;Top P\&quot;:0.95}&quot;curl -X GET &quot;http://localhost:8000/api&quot; -H &quot;accept: application/json&quot; | python -mjson.tool```### Example CLI JSONAn example CLI JSON file is provided in the repository as `example_cli.json`. This file provides an example of the expected structure for defining the command-line arguments for the LLM.## LicenseSee LICENSE</longdescription>
</pkgmetadata>