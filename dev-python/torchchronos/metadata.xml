<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># torchchronos[![test](https://github.com/mauricekraus/torchchronos/actions/workflows/main.yml/badge.svg)](https://github.com/mauricekraus/torchchronos/actions/workflows/main.yml)*torchchronos* is an experimental PyTorch and Lightning compatible library that provides easy and flexible access to various time-series datasets for classification and regression tasks. It also provides a simple and extensible transform API to preprocess data.It is inspired by the much more complex [torchtime](https://github.com/philipdarke/torchtime).## InstallationYou can install torchchronos via pip:`pip install torchchronos`## Usage### Datasetstorchchronos currently provides access to several popular time-series datasets, including:- UCR/UEA Time Series Classification RepositoryTo use a dataset, you can simply import the corresponding dataset class and create an instance:```pythonfrom torchchronos.datasets import UCRUEADatasetfrom torchchronos.transforms import PadFrontfrom torchchronos.download import download_uea_ucrdownload_uea_ucr(Path(&quot;.cache/data&quot;), &quot;ECG5000&quot;)dataset = UCRUEADataset('ECG5000',path=Path(&quot;.cache/data&quot;), transforms=PadFront(10))```### Data Modulestorchchronos also provides a multi gpu Lightning compatible DataModules to make it easy to load and preprocess data. For example:```pythonfrom torchchronos.lightning import UCRUEAModulefrom torchchronos.transforms import PadFront, PadBackmodule = UCRUEAModule('ECG5000', split_ratio= (0.75, 0.15), batch_size= 32) transforms=Compose([PadFront(10), PadBack(10)]))```### Transformstorchchronos provides a flexible transform API to preprocess time-series data. For example, to normalize a dataset, you can define a transform like this:```pythonfrom torchchronos.transforms import Transformclass Normalize(Transform):    def __init__(self, mean=None, std=None):        self.mean = mean        self.std = std    def fit(self, data):        self.mean = data.mean()        self.std = data.std()    def __call__(self, data):        return (data - self.mean) / self.std```## RoadmapThe following features are planned for future releases of torchchronos:Support for additional time-series datasets, including:- Energy consumption dataset- Traffic dataset- PhysioNet Challenge 2012 (in-hospital mortality)- PhysioNet Challenge 2019 (sepsis prediction) datasetsAdditional transform classes, including:- Resampling- Missing value imputationIf you have any feature requests or suggestions, please open an issue on our GitHub page.</longdescription>
</pkgmetadata>