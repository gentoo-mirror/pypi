<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>jsonquery========================================================.. image:: https://travis-ci.org/numberoverzero/jsonquery.svg?branch=master    :target: https://travis-ci.org/numberoverzero/jsonquery.. image:: https://coveralls.io/repos/numberoverzero/jsonquery/badge.png?branch=master    :target: https://coveralls.io/r/numberoverzero/jsonquery?branch=masterBasic json -&gt; sqlalchemy query builderInstallation========================================================::    pip install jsonqueryBasic Usage========================================================Let's define a model and get an engine set up::    from sqlalchemy import Column, Integer, String, create_engine    from sqlalchemy.orm import sessionmaker    from sqlalchemy.ext.declarative import declarative_base    Base = declarative_base()    class User(Base):        __tablename__ = 'users'        id = Column(Integer, primary_key=True)        name = Column(String)        email = Column(String)        age = Column(Integer)        height = Column(Integer)    engine = create_engine(&quot;sqlite://&quot;, echo=True)    Base.metadata.create_all(engine)    model = User    session = sessionmaker(bind=engine)()We want to get all users whose name starts with 'Pat' and areat least 21::    from jsonquery import jsonquery    json = {        &quot;operator&quot;: &quot;and&quot;,        &quot;value&quot;: [            {                &quot;operator&quot;: &quot;&gt;=&quot;,                &quot;column&quot;: &quot;age&quot;,                &quot;value&quot;: 21            },            {                &quot;operator&quot;: &quot;ilike&quot;,                &quot;column&quot;: &quot;name&quot;,                &quot;value&quot;: &quot;pat%&quot;            }        ]    }    query = jsonquery(session, User, json)    users = query.all()Supported Data Types========================================================jsonquery doesn't care about column type.  Instead, it uses a whitelist of operators,where keys are strings (the same that would be passed in the &quot;operator&quot; field of a node)and the values are functions that take a column object and a value and return asqlalchemy criterion.  Here are some examples::    def greater_than(column, value):        return column &gt; value    register_operator(&quot;&gt;&quot;, greater_than)    def like(column, value):        like_func = getattr(column, 'like')        return like_func(value)    register_operator(&quot;like&quot;, like)By default, the following are registered::    &gt;, &gt;=, ==, !=, &lt;=, &lt;    like, ilike, in_Use ``unregister_operator(opstring)`` to remove an operator.Future Goals========================================================There are a few features I want to add, but these are mostly convenience and aren't necessary tothe core application, which I believe is satisfied.Compressed and/or format--------------------------------------------------------Reduce repetitive column and operator specification when possible by allowing non-scalar valuesfor column operators.  By flipping the nesting restriction on logical operators, we can omitfields specified at the column level.  This is especially prominent in string matching,when the column and operator are the same, but we want to compare against 3+ values.Currently::    {        &quot;operator&quot;: &quot;or&quot;,        &quot;value&quot;: [            {                &quot;column&quot;: &quot;age&quot;,                &quot;operator&quot;: &quot;&lt;=&quot;,                &quot;value&quot;: 16            },            {                &quot;column&quot;: &quot;age&quot;,                &quot;operator&quot;: &quot;&gt;=&quot;,                &quot;value&quot;: 21            },            {                &quot;column&quot;: &quot;age&quot;,                &quot;operator&quot;: &quot;==&quot;,                &quot;value&quot;: 18            }        ]    }With compressed logical operators::    {        &quot;column&quot;: &quot;age&quot;        &quot;value&quot;: {            &quot;operator&quot;: &quot;or&quot;,            &quot;value&quot;: [                {                    &quot;operator&quot;: &quot;&lt;=&quot;,                    &quot;value&quot;: 16                },                {                    &quot;operator&quot;: &quot;&gt;=&quot;,                    &quot;value&quot;: 21                },                {                    &quot;operator&quot;: &quot;==&quot;,                    &quot;value&quot;: 18                }            ]        }    }Or, when the operator is the same::    {        &quot;column&quot;: &quot;name&quot;        &quot;operator&quot;: &quot;like&quot;        &quot;value&quot;: {            &quot;operator&quot;: &quot;or&quot;,            &quot;value&quot;: [                &quot;Bill&quot;,                &quot;Mary&quot;,                &quot;Steve&quot;            ]        }    }Contributors========================================================* duesenfranz_ - Python 3 compatibility* svisser_ - Python 3 compatibility.. _duesenfranz: https://github.com/duesenfranz.. _svisser: https://github.com/svisser1.0.0-----* First public release</longdescription>
</pkgmetadata>