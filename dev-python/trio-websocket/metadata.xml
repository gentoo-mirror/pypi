<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Trio WebSocketThis library implements both server and client aspects of the [the WebSocketprotocol](https://tools.ietf.org/html/rfc6455), striving for safety,correctness, and ergonomics. It is based on the [wsprotoproject](https://wsproto.readthedocs.io/en/latest/), which is a[Sans-IO](https://sans-io.readthedocs.io/) state machine that implements themajority of the WebSocket protocol, including framing, codecs, and events. Thislibrary handles I/O using [the Trioframework](https://trio.readthedocs.io/en/latest/). This library passes the[Autobahn Test Suite](https://github.com/crossbario/autobahn-testsuite).This README contains a brief introduction to the project. Full documentation [isavailable here](https://trio-websocket.readthedocs.io).[![PyPI](https://img.shields.io/pypi/v/trio-websocket.svg?style=flat-square)](https://pypi.org/project/trio-websocket/)![Python Versions](https://img.shields.io/pypi/pyversions/trio-websocket.svg?style=flat-square)[![Build Status](https://img.shields.io/github/actions/workflow/status/HyperionGray/trio-websocket/ci.yml)](https://github.com/HyperionGray/trio-websocket/actions/workflows/ci.yml)[![Read the Docs](https://img.shields.io/readthedocs/trio-websocket.svg)](https://trio-websocket.readthedocs.io)## AlternativesIf you happen to only need a server, using Quart via the [quart-trio](https://github.com/pgjones/quart-trio)extension may suffice.  While trio-websocket is more flexible, Quart coversboth HTTP and WebSocket within a single framework, and serving both from thesame port is straightforward.  There has yet to be a performance comparison.## InstallationThis library requires Python 3.7 or greater. To install from PyPI:    pip install trio-websocket## Client ExampleThis example demonstrates how to open a WebSocket URL:```pythonimport triofrom sys import stderrfrom trio_websocket import open_websocket_urlasync def main():    try:        async with open_websocket_url('wss://echo.websocket.org') as ws:            await ws.send_message('hello world!')            message = await ws.get_message()            print('Received message: %s' % message)    except OSError as ose:        print('Connection attempt failed: %s' % ose, file=stderr)trio.run(main)```The WebSocket context manager connects automatically before entering the blockand disconnects automatically before exiting the block. The full API offers alot of flexibility and additional options.## Server ExampleA WebSocket server requires a bind address, a port, and a coroutine to handleincoming connections. This example demonstrates an &quot;echo server&quot; that replies toeach incoming message with an identical outgoing message.```pythonimport triofrom trio_websocket import serve_websocket, ConnectionClosedasync def echo_server(request):    ws = await request.accept()    while True:        try:            message = await ws.get_message()            await ws.send_message(message)        except ConnectionClosed:            breakasync def main():    await serve_websocket(echo_server, '127.0.0.1', 8000, ssl_context=None)trio.run(main)```The server's handler ``echo_server(â€¦)`` receives a connection request object.This object can be used to inspect the client's request and modify thehandshake, then it can be exchanged for an actual WebSocket object ``ws``.Again, the full API offers a lot of flexibility and additional options.</longdescription>
</pkgmetadata>