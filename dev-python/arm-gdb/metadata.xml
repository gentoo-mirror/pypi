<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>arm-gdb=======Tools for inspecting ARM Cortex-M registers within GDBCurrently supported:* SCB - System Control Block* SysTick* NVIC - Nested Vectored Interrupt ControllerInstall-------```pip install arm-gdb```Run---Start GDB and run```python import arm_gdb```Or add that line to `~/.gdbinit`Usage-----Use `help arm` command, or individual subcommands, i.e. `help arm scb````(gdb) help armTools for debugging ARM Cortex-M - series CPUsList of arm subcommands:arm fpu -- Dump of ARM Cortex-M FPU - SCB registers for the FP extensionarm inspect -- Dump register values from device peripheralarm list -- List peripherals and registers from devicearm loaddb -- Load an SVD file from resitryarm loadfile -- Load an SVD file from filearm nvic -- Print current status of NVICarm scb -- Dump of ARM Cortex-M SCB - System Control Blockarm systick -- Dump of ARM Cortex-M SysTick blockType &quot;help arm&quot; followed by arm subcommand name for full documentation.Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.Type &quot;apropos -v word&quot; for full documentation of commands related to &quot;word&quot;.Command name abbreviations are allowed if unambiguous.```System Control Block--------------------```(gdb) help arm scbDump of ARM Cortex-M SCB - System Control BlockUsage: arm scb [/habf]Modifier /h provides descriptions of names where availableModifier /a Print all fields, including default valuesModifier /b prints bitmasks in binary instead of hexModifier /f force printing fields from all Cortex-M models```Dump of ARM System Control Block, with bitmask descriptions```(gdb) arm scb /hSCB for model M4SCB registers:CPUID                            = 410fc241                   // CPUID Base Register    Implementer                    41...... - ARM             // Implementer code assigned by Arm    Architecture                   ...f.... - f               // constant - 1111    PartNo                         ....c24. - Cortex-M4    Revision                       .......1 - 1ICSR                             = 00000000                   // Interrupt Control and State RegisterVTOR                             = 00000000                   // Vector Table Offset RegisterAIRCR                            = fa050000                   // Application Interrupt and Reset Control Register    ENDIANNESS                     ....0... - Little EndianSCR                              = 00000000                   // System Control RegisterCCR                              = 00000200                   // Configuration and Control RegisterSHPR1                            = 00000000                   // System Handler Priority Register 1SHPR2                            = 80000000                   // System Handler Priority Register 2    PRI_11 - SVCall                80...... - 80              // Priority of system handler 11, SVCall.SHPR3                            = 00e00000                   // System Handler Priority Register 3    PRI_14 - PendSV                ..e0.... - e0              // Priority of system handler 14, PendSV.SHCSR                            = 00070000                   // System Handler Control and State Register    USGFAULTENA                    ...4.... - 1               // Indicates if UsageFault is enabled.    BUSFAULTENA                    ...2.... - 1               // Indicates if BusFault is enabled.    MEMFAULTENA                    ...1.... - 1               // Indicates if MemFault is enabled.CFSR                             = 00000000                   // Configurable Fault Status Register    MMFSR                          ......00 - 00              // MemManage Fault Status Register    BFSR                           ....00.. - 00              // BusFault Status Register    UFSR                           0000.... - 0000            // UsageFault Status RegisterHFSR                             = 00000000                   // HardFault Status RegisterDFSR                             = 00000001                   // Debug Fault Status Register    HALTED                         .......1 - Halt request debug event // Indicates a debug event generated by either C_HALT, C_STEP or DEMCR.MON_STEPMMFAR                            = e000edf8                   // MemManage Fault Address RegisterBFAR                             = e000edf8                   // BusFault Address RegisterAFSR                             = 00000000                   // Auxiliary Fault Status RegisterCPACR                            = 00f00000                   // Coprocessor Access Control RegisterAUX registers:ICTR                             = 00000001                   // Interrupt Controller Type Register    INTLINESNUM                    .......1 - 64 vectors      // The total number of interrupt lines supported, as 32*(1+N)ACTLR - M4                       = 00000000                   // Auxiliary Control Register - Cortex M4```SysTick-------```(gdb) help arm systickDump of ARM Cortex-M SysTick blockUsage: arm systick [/hab]Modifier /h provides descriptions of names where availableModifier /a Print all fields, including default valuesModifier /b prints bitmasks in binary instead of hex```Dump of ARM SysTick```(gdb) arm systickSYST_CSR                         = 00000004    CLKSOURCE                      .......4 - 1SYST_RVR                         = 00000000SYST_CVR                         = 00000000SYST_CALIB                       = c0000000    SKEW                           4....... - 1    NOREF                          8....... - 1```... or with descriptions```(gdb) arm systick /hSYST_CSR                         = 00000004                   // SysTick Control and Status Register    CLKSOURCE                      .......4 - 1SYST_RVR                         = 00000000                   // SysTick Reload Value RegisterSYST_CVR                         = 00000000                   // SysTick Current Value RegisterSYST_CALIB                       = c0000000                   // SysTick Calibration Value Register    SKEW                           4....... - 1    NOREF                          8....... - 1```... or with bitmasks in binary```(gdb) arm systick /bSYST_CSR                         = 00000000000000000000000000000100    CLKSOURCE                      .............................1.. - 1SYST_RVR                         = 00000000000000000000000000000000SYST_CVR                         = 00000000000000000000000000000000SYST_CALIB                       = 11000000000000000000000000000000    SKEW                           .1.............................. - 1    NOREF                          1............................... - 1```Print out all fields, even those with default values:```(gdb) arm systick /abSYST_CSR                         = 00000000000000000000000000000100    ENABLE                         ...............................0 - 0    TICKINT                        ..............................0. - 0    CLKSOURCE                      .............................1.. - 1    COUNTFLAG                      ...............0................ - 0SYST_RVR                         = 00000000000000000000000000000000    RELOAD                         ........000000000000000000000000 - 000000SYST_CVR                         = 00000000000000000000000000000000    CURRENT                        ........000000000000000000000000 - 000000SYST_CALIB                       = 11000000000000000000000000000000    TENMS                          .......0000000000000000000000000 - 0000000    SKEW                           .1.............................. - 1    NOREF                          1............................... - 1```FPU---```(gdb) help arm fpuDump of ARM Cortex-M FPU - SCB registers for the FP extensionUsage: arm fpu [/hab]Modifier /h provides descriptions of names where availableModifier /a Print all fields, including default valuesModifier /b prints bitmasks in binary instead of hex``````(gdb) arm fpu/abSCB FP registers:FPCCR                            = 11000000000000000000000000000000    ASPEN                          1............................... - 1    LSPEN                          .1.............................. - 1    MONRDY                         .......................0........ - 0    BFRDY                          .........................0...... - 0    MMRDY                          ..........................0..... - 0    HFRDY                          ...........................0.... - 0    THREAD                         ............................0... - 0    USER                           ..............................0. - 0    LSPACT                         ...............................0 - 0FPCAR                            = 00000000000000000000000000000000    FPCAR                          ..0000000000000000000000000000.. - 0000000FPDSCR                           = 00000000000000000000000000000000    AHP                            .....0.......................... - 0    DN                             ......0......................... - 0    FZ                             .......0........................ - 0    RMode                          ........00...................... - 0MVFR0                            = 00010000000100010000000000100001    FP rounding modes              0001............................ - All rounding modes supported.    Short vectors                  ....0000........................ - Not supported    Square root                    ........0001.................... - Supported    Divide                         ............0001................ - Supported    FP exception trapping          ................0000............ - Not supported    Double-precision               ....................0000........ - Not supported    Single-precision               ........................0010.... - Supported.    A_SIMD registers               ............................0001 - Supported, 16 x 64-bit registers.MVFR1                            = 00010001000000000000000000010001    FP fused MAC                   0001............................ - Supported    FP HPFP                        ....0001........................ - Supported half-single    D_NaN mode                     ........................0001.... - Supported    FtZ mode                       ............................0001 - Hardware supports full denormalized number arithmetic.MVFR2                            = 00000000000000000000000000000000    VFP_Misc                       ........................0000.... - No support for miscellaneous features.```NVIC - Nested Vectored Interrupt Controller-------------------------------------------Dump of NVIC list, listing all enabled interrupt handlers, in a redirectedinterrupt vector```(gdb) help arm nvicPrint current status of NVICUsage: arm nvic [/a] [&lt;ISR vector address&gt;]Modifier /a lists all interrupt vectors, not only enabled    &lt;ISR vector address&gt; - optional. Specifies base address of ISR vector.                           If not specified, it will be resolved via SCB-&gt;VTOR,                           which is valid in most cases.Examples:    arm nvic /a            - list all ISRs from -15 to to maximum    arm nvic &amp;__isr_vector - Custom ISR vector, useful when proxying                            interrupts via another system, like the                            softdevice on nRF52```Default, it checks for functions in the active interrupt vector given VTORregister. But in for example nRF52840 using their SoftDevice, the interrupts areforwarded in software to the application for SoftDevice to override.```(gdb) arm nvic &amp;__isr_vectorIRQn Prio          Handler -15    0 en          0002a749 Reset      - -14    0 en          0002a771 NMI        - -13    0 en          0002bc55 HardFault  HardFault_Handler -12    0 en          0002bc5d MemManage -11    0 en          0002bc59 BusFault -10    0 en          0002bc61 UsageFault  -5   80 en          00027201 SVC        SVC_Handler  -2   e0 en          00027231 PendSV     PendSV_Handler   0   80 en          00027715 POWER_CLOCK_IRQHandler   2   40 en          0002c409 UARTE0_UART0_IRQHandler  11    0 en          0002a783 -  17   c0 en pend     0002bd4d RTC1_IRQHandler  21   40 en          0002bd55 SWI1_EGU1_IRQHandler  22   c0 en          000279e9 SWI2_EGU2_IRQHandler  23   a0 en          0002c035 SWI3_EGU3_IRQHandler  25   80 en          0002a783 -  32   20 en          0002a783 -```SVD - Implementation specific peripherals-----------------------------------------```(gdb) help arm inspectDump register values from device peripheralUsage: arm inspect [/hab] &lt;device&gt; &lt;peripheral&gt;Modifier /h provides descriptions of names where availableModifier /a Print all fields, including default valuesModifier /b prints bitmasks in binary instead of hex    &lt;device&gt;     - Name of loaded device. See `help arm loadfile`    &lt;peripheral&gt; - Name of peripheralExmaple: arm inspect nrf52840 UARTE0``````(gdb) help arm loaddbLoad an SVD file from resitryUsage: arm loaddb &lt;device&gt; &lt;vendor&gt; &lt;filename&gt;    &lt;device&gt;    - Name to refer to the device in commands like `arm inspect`    &lt;vendor&gt;    - Device vendor    &lt;filename&gt;  - SVD file within registryLoad file from cmsis-svd package registry. Many common devices are available. Ifnot available, you can load a custom svd file using `arm loadfile`This command can preferrably be added to .gdbinit for easy access of devices``````(gdb) help arm loadfileLoad an SVD file from fileUsage: arm loadfile &lt;device&gt; &lt;filename&gt;    &lt;device&gt;    - Name to refer to the device in commands like `arm inspect`    &lt;filename&gt;  - SVD file to loadThis command can preferrably be added to .gdbinit for easy access of devices``````(gdb) help arm listList peripherals and registers from deviceUsage: arm listLists loaded devicesUsage: arm list &lt;device&gt;List peripherals from a deviceUsage: arm list &lt;device&gt; &lt;peripheral&gt;List registers from a peripheralExamples:    arm list    arm list nrf52840    arm list nrf52840 UARTE0```To use an SVD file from cmsis-svd package database, use:```(gdb) arm loaddb nrf Nordic nrf52.svd```This loads in the device description under a local name, in this case `nrf` forfaster access in upcoming commandsIt is also possible to load custom svd files, in this case an stm32f7x7:```(gdb) arm loadfile stm32f7x7 /path/to/my/stm32f7x7.svd```To list peripherals in the loaded module, use:```(gdb) arm list nrfFICR       @ 0x10000000UICR       @ 0x10001000BPROT      @ 0x40000000POWER      @ 0x40000000...```It is possible to inspect the values of the registers on the target```(gdb) arm inspect nrf52840 NVMCNVMC.READY                       = 00000001    READY                          .......1 - ReadyNVMC.READYNEXT                   = 00000001    READYNEXT                      .......1 - ReadyNVMC.CONFIG                      = 00000000    WEN                            .......0 - RenNVMC.ERASEPAGE                   = 00000000NVMC.ERASEPCR1                   = 00000000NVMC.ERASEALL                    = 00000000    ERASEALL                       .......0 - NoOperationNVMC.ERASEPCR0                   = 00000000NVMC.ERASEUICR                   = 00000000    ERASEUICR                      .......0 - NoOperationNVMC.ERASEPAGEPARTIAL            = 00000000NVMC.ERASEPAGEPARTIALCFG         = 0000000a    DURATION                       ......0a - 0aNVMC.ICACHECNF                   = 00000001    CACHEEN                        .......1 - Enabled    CACHEPROFEN                    .....0.. - DisabledNVMC.IHIT                        = 00000000NVMC.IMISS                       = 00000000```</longdescription>
</pkgmetadata>