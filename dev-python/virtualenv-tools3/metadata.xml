<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/Yelp/virtualenv-tools.svg?branch=master)](https://travis-ci.org/Yelp/virtualenv-tools)[![Coverage Status](https://img.shields.io/coveralls/Yelp/virtualenv-tools.svg?branch=master)](https://coveralls.io/r/Yelp/virtualenv-tools)[![PyPI version](https://badge.fury.io/py/virtualenv-tools3.svg)](https://pypi.python.org/pypi/virtualenv-tools3)virtualenv-tools3--------virtualenv-tools3 is a fork of [the originalvirtualenv-tools](https://github.com/fireteam/virtualenv-tools) (nowunmaintained) which adds support for Python 3, among other things. Full patchdetails are below.##  yelp patches### yelp4* Add python3 support* Drop python2.6 support* 100% test coverage* Removes `$VENV/local` instead of fixing up symlinks* Removed `--reinitialize`, instead run `virtualenv $VENV -p $PYTHON`* Rewrite .pth files to relative paths### yelp3* default output much more concise, added a --verbose option* improved fault tolerance, in the case of:    * corrupt pyc files    * broken symlinks    * unexpected directories* no-changes-needed is a success case (idempotency exits 0)### yelp1* --update now works more generally and reliably (e.g. virtualenv --python=python2.7)## virtualenv-toolsThis repository contains scripts we're using at Fireteam for ourdeployment of Python code.  We're using them in combination withsalt to build code on one server on a self contained virtualenvand then move that over to the destination servers to run.### Why not virtualenv --relocatable?For starters: because it does not work.  relocatable is verylimited in what it does and it works at runtime instead ofmaking the whole thing actually move to the new location.  Weran into a ton of issues with it and it is currently in theprocess of being phased out.### Why would I want to use it?The main reason you want to use this is for build caching.  Youhave one folder where one virtualenv exists, you install thelatest version of your codebase and all extensions in there, thenyou can make the virtualenv relocate to a target location, put itinto a tarball, distribute it to all servers and done!### Example flow:First time: create the build cache```$ mkdir /tmp/build-cache$ virtualenv --distribute /tmp/build-cache```Now every time you build:```$ . /tmp/build-cache/bin/activate$ pip install YourApplication```Build done, package up and copy to whatever location you want to have it.Once unpacked on the target server, use the virtualenv tools toupdate the paths and make the virtualenv magically work in the newlocation.  For instance we deploy things to a path with thehash of the commit in:```$ virtualenv-tools --update-path /srv/your-application/&lt;hash&gt;```Compile once, deploy whereever.  Virtualenvs are completely selfcontained.  In order to switch the current version all you need todo is to relink the builds.</longdescription>
</pkgmetadata>