<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IntroductionThis library was inspired by [moto](https://github.com/spulec/moto) and mimics some of its design. Mainly,no `simple-salesforce` code is patched; instead, the HTTP calls it makes are intercepted, and state isstored in an in-memory, virtual Salesforce organization, which is just a globally instantiated class thatis created at the run-time of a test-suite.# Installation`pip install simple-mockforce`or, with poetry`poetry add simple-mockforce`# UsageTo patch calls to the Salesforce API and instead interact with the &quot;virtual&quot;Salesforce organization provided by this library, add the following:```pythonimport osfrom simple_mockforce import mock_salesforcefrom simple_salesforce import Salesforce@mock_salesforcedef test_api():    # The username, password, and security token are ignored - any value will work.    salesforce = Salesforce(        username=os.getenv(&quot;SFDC_USERNAME&quot;),        password=os.getenv(&quot;SFDC_PASSWORD&quot;),        security_token=os.getenv(&quot;SFDC_SECURITY_TOKEN&quot;)    )    response = salesforce.Account.create({&quot;Name&quot;: &quot;Test Account&quot;})    account_id = response[&quot;id&quot;]    account = salesforce.Account.get(account_id)    assert account[&quot;Name&quot;] == &quot;Test Account&quot;```And that's about it!# Caveats## Case sensitivityUnlike a real Salesforce organization, the virtual organization will not handle case-insensitivedependent code for you. You must remain consistent with your casing of object and fieldnames in all aspects of the code.## Missing endpointsThe following features are currently not supported:- the describe API- bulk queries- SOSL searches## QueriesSOQL is only partially supported as of now. Please refer to the READMEfor [python-soql-parser](https://github.com/Kicksaw-Consulting/python-soql-parser#notable-unsupported-features)to see what's not yet implemented.You should only expect this library to be able to mock the most basic of queries.While there are plans to, mocking query calls which traverse object relationshipsor that use SOQL-specific where-clause tokens are not yet supported.Notable mentions:- be explicit with direction in `ORDER BY` clauses, i.e., always supply `DESC` or `ASC`- attributes of parent objects can be specified in the `select` clause (but not in the `where` clause)## Error handlingError handling is only mocked to a degree, and for some calls it isn't at all.This is because the virtual Salesforce organization does not yet enforce any ofthe server-side validation you might encounter when working with the real API.This means that the virtual organization is much more permissive and loose than areal Salesforce organization would be.There are plans to read the XML consumed by the meta API in order to enforcemore rigidity inside the virtual organization, but this is not yet implemented.## All HTTP traffic is blockedWhen using `@mock_salesforce`, do note that the `requests` library is beingpatched with `responses`, so any calls you make to any other APIs will failunless you patch them yourself, or patch the code which invokes said calls.## RelationsRelations are the weakest part of this library, and some features are justplain not supported yet.If you have a relational field that points to an object whose name cannot beinferred from the field name (e.g., from `Account__r` it can be inferredthat this is pointing to an `Account` object), you can create a file called`relations.json` that translates a relational field name to your intendedSalesforce object's name. See `relations.json` in the test folder for anexample.To specify the location of `relations.json`, set an environment variablecalled `MOCKFORCE_RELATIONS_ROOT` which points to the parent folder of`relations.json`. Note, this defaults to the current directory `.`.</longdescription>
</pkgmetadata>