<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt; JaroWinkler&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/maxbachmann/JaroWinkler/actions&quot;&gt;    &lt;img src=&quot;https://github.com/maxbachmann/JaroWinkler/workflows/Build/badge.svg&quot;         alt=&quot;Continous Integration&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/jarowinkler/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/jarowinkler&quot;         alt=&quot;PyPI package version&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://www.python.org&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/jarowinkler&quot;         alt=&quot;Python versions&quot;&gt;  &lt;/a&gt;&lt;br/&gt;  &lt;a href=&quot;https://github.com/maxbachmann/JaroWinkler/blob/main/LICENSE&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/license/maxbachmann/JaroWinkler&quot;         alt=&quot;GitHub license&quot;&gt;  &lt;/a&gt;&lt;/p&gt;&lt;h4 align=&quot;center&quot;&gt;JaroWinkler is a library to calculate the Jaro and Jaro-Winkler similarity. It is easy to use, is far more performant than all alternatives and is designed to integrate seemingless with &lt;a href=&quot;https://github.com/maxbachmann/RapidFuzz&quot;&gt;RapidFuzz&lt;/a&gt;.&lt;/h4&gt;## :zap: Quickstart```python&gt;&gt;&gt; from jarowinkler import *&gt;&gt;&gt; jaro_similarity(&quot;Johnathan&quot;, &quot;Jonathan&quot;)0.8796296296296297&gt;&gt;&gt; jarowinkler_similarity(&quot;Johnathan&quot;, &quot;Jonathan&quot;)0.9037037037037037```## üöÄ BenchmarksThe implementation is based on a novel approach to calculate the Jaro-Winkler similarity using bitparallelism. This is significantly faster than the original approach used in other libraries. The following benchmark shows the performance difference to jellyfish and python-Levenshtein. &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maxbachmann/JaroWinkler/main/bench/results/JaroWinkler.svg?sanitize=true&quot; alt=&quot;Benchmark JaroWinkler&quot;&gt;&lt;/p&gt;## ‚öôÔ∏è InstallationYou can install this library from [PyPI](https://pypi.org/project/jarowinkler/) with pip:```pip install jarowinkler```JaroWinkler provides binary wheels for all common platforms.### Source buildsFor a source build (for example from a SDist packaged) you only require a C++14 compatible compiler. You can install directly from GitHub if you would like.```pip install git+https://github.com/maxbachmann/JaroWinkler.git@main```## üìñ UsageAny algorithms in JaroWinkler can not only be used with strings, but with any arbitary sequences of hashable objects:```pythonfrom jarowinkler import jarowinkler_similarityjarowinkler_similarity(&quot;this is an example&quot;.split(), [&quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;example&quot;])# 0.8666666666666667```So as long as two objects have the same hash they are treated as similar. You can provide a `__hash__` method for your own object instances.```pythonclass MyObject:    def __init__(self, hash):        self.hash = hash    def __hash__(self):        return self.hashjarowinkler_similarity([MyObject(1), MyObject(2)], [MyObject(1), MyObject(2), MyObject(3)])# 0.9111111111111111```All algorithms provide a `score_cutoff` parameter. This parameter can be used to filter out bad matches. Internally this allows JaroWinkler to select faster implementations in some places:```pythonjaro_similarity(&quot;Johnathan&quot;, &quot;Jonathan&quot;, score_cutoff=0.9)# 0.0jaro_similarity(&quot;Johnathan&quot;, &quot;Jonathan&quot;, score_cutoff=0.85)# 0.8796296296296297```JaroWinkler can be used with RapidFuzz, which provides multiple methods to compute string metrics on collections of inputs. JaroWinkler implements the RapidFuzz C-API which allows RapidFuzz to call the functions without any of the usual overhead of python, which makes this even faster.```pythonfrom rapidfuzz import processprocess.cdist([&quot;Johnathan&quot;, &quot;Jonathan&quot;], [&quot;Johnathan&quot;, &quot;Jonathan&quot;], scorer=jarowinkler_similarity)array([[1.       , 0.9037037],       [0.9037037, 1.       ]], dtype=float32)```## üëç ContributingPRs are welcome!- Found a bug? Report it in form of an [issue](https://github.com/maxbachmann/JaroWinkler/issues) or even better fix it!- Can make something faster? Great! Just avoid external dependencies and remember that existing functionality should still work.- Something else that do you think is good? Do it! Just make sure that CI passes and everything from the README is still applicable (interface, features, and so on).- Have no time to code? Tell your friends and subscribers about JaroWinkler. More users, more contributions, more amazing features.Thank you :heart:## ‚ö†Ô∏è LicenseCopyright 2021 - present [maxbachmann](https://github.com/maxbachmann). `JaroWinkler` is free and open-source software licensed under the [MIT License](https://github.com/maxbachmann/JaroWinkler/blob/main/LICENSE).</longdescription>
</pkgmetadata>