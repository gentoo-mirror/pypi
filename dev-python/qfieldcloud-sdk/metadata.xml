<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The official QFieldCloud SDK and CLI`qfieldcloud-sdk` is the official client to connect to QFieldCloud API either as a python module, or directly from the command line.## Contents- [Installation](#install)- [CLI usage](#cli-usage)- [Module usage](#module-usage)## Install### Linux/macOS    pip3 install qfieldcloud-sdk### WindowsInstall Python with your favorite package manager. Then:    python -m pip install qfieldcloud-sdk## CLI usageThe package also ships with the official QFieldCloud CLI tool.### Usage```qfieldcloud-cli [OPTIONS] COMMAND [ARGS]...```### Examples```shell# logs in user &quot;user&quot; with password &quot;pass&quot;qfieldcloud-cli login user pass# gets the projects of user &quot;user&quot; with password &quot;pass&quot; at &quot;https://localhost/api/v1/&quot;qfieldcloud-cli -u user -p pass -U https://localhost/api/v1/ list-projects# gets the projects of user authenticated with token `QFIELDCLOUD_TOKEN` at &quot;https://localhost/api/v1/&quot; as JSONexport QFIELDCLOUD_URL=https://localhost/api/v1/export QFIELDCLOUD_TOKEN=017478ee2464440cb8d3e98080df5e5aqfieldcloud-cli --json list-projects```More detailed documentation can be found [here](https://docs.qfield.org/reference/qfieldcloud/sdk/)## Module usage```pythonfrom  import sdkclient = sdk.Client(url=&quot;https://app.qfield.cloud/api/v1/&quot;)client.login(    username=&quot;user1&quot;,    password=&quot;pass1&quot;,)projects = client.list_projects()&gt; projectsProjects:0       myusername/myproject11       myusername/myproject2...```## DevelopmentContributions are more than welcome!### Code styleCode style done with [precommit](https://pre-commit.com/).```pip install pre-commit# if you want to have git commits trigger pre-commit, install pre-commit hook:pre-commit install# else run manually before (re)staging your files:pre-commit run --all-files```### Cloning the projectOne time action to clone and setup:```shellgit clone https://github.com/opengisch/qfieldcloud-sdk-pythoncd qfieldcloud-sdk-python# install dev dependenciespython3 -m pip install pipenvpre-commit install# install package in a virtual environmentpipenv install -r requirements.txt```To run CLI interface for development purposes execute:```shellpipenv shell # if your pipenv virtual environment is not active yetpython -m qfieldcloud_sdk```To ease development, you can set a `.env` file. Therefore you can use directly the `qfieldcloud-cli` executable:```cp .env.example .envpipenv run qfieldcloud-cli```### Building the package```shell# make sure your shell is sourced to no virtual environmentdeactivate# buildpython3 -m build# now either activate your shell withpipenv shell# and install withpython -m pip install . --force-reinstall# or manually ensure it's pipenv and not your global pip doing the installationpipenv run pip install . --force-reinstall```Voil√†!</longdescription>
</pkgmetadata>