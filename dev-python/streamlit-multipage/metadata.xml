<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Streamlit Multipage&lt;center&gt;    &lt;a href=&quot;https://github.com/ELC/streamlit-multipage/actions/workflows/python-publish.yml&quot;&gt;        &lt;img src=&quot;https://github.com/ELC/streamlit-multipage/actions/workflows/python-publish.yml/badge.svg&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/project/streamlit-multipage&quot;&gt;        &lt;img src=&quot;https://pepy.tech/badge/streamlit-multipage&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/streamlit-multipage/&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/streamlit-multipage&quot;&gt;    &lt;/a&gt;&lt;/center&gt;Simple Python package to implement multiple pages using streamlit.```pip install streamlit-multipage```## Getting started### Simple single-page appGiven one streamlit app in a Python file like this:```pythonimport streamlit as stst.title(&quot;My Amazing App&quot;)name = st.text_input(&quot;Your Name: &quot;)st.write(f&quot;Hello {name}!&quot;)```Wrap it into a function with a `st` parameter and arbitrary keyword arguments.```pythonimport streamlit as stfrom streamlit_multipage import MultiPagedef my_page(st, **state):    st.title(&quot;My Amazing App&quot;)    name = st.text_input(&quot;Your Name: &quot;)    st.write(f&quot;Hello {name}!&quot;)app = MultiPage()app.st = stapp.add_app(&quot;Hello World&quot;, my_page)app.run()```This example is trivial and will not give any additional value. The nextexample will introduce state persistance.### Saving StateIf the state should be persisted between re-runs (pressing `R`) o applicationruns (running `streamlit run`). The variables can be saved by calling the`save` function and accessed conveniently via the `state` dictionary.```pythonimport streamlit as stfrom streamlit_multipage import MultiPagedef my_page(st, **state):    st.title(&quot;My Amazing App&quot;)    name_ = state[&quot;name&quot;] if &quot;name&quot; in state else &quot;&quot;    name = st.text_input(&quot;Your Name: &quot;, value=name_)    st.write(f&quot;Hello {name}!&quot;)    MultiPage.save({&quot;name&quot;: name})app = MultiPage()app.st = stapp.add_app(&quot;Hello World&quot;, my_page)app.run()```### Multiple pagesWhen dealing with multiple pages, the workflow is the same. If reading, alwayssanitize the input and make sure the values are available and correct.```pythonimport streamlit as stfrom streamlit_multipage import MultiPagedef input_page(st, **state):    st.title(&quot;Body Mass Index&quot;)    weight_ = state[&quot;weight&quot;] if &quot;weight&quot; in state else 0.0    weight = st.number_input(&quot;Your weight (Kg): &quot;, value=weight_)    height_ = state[&quot;height&quot;] if &quot;height&quot; in state else 0.0    height = st.number_input(&quot;Your height (m): &quot;, value=height_)    if height and weight:        MultiPage.save({&quot;weight&quot;: weight, &quot;height&quot;: height})def compute_page(st, **state):    st.title(&quot;Body Mass Index&quot;)    if &quot;weight&quot; not in state or &quot;height&quot; not in state:        st.warning(&quot;Enter your data before computing. Go to the Input Page&quot;)        return    weight = state[&quot;weight&quot;]    height = state[&quot;height&quot;]    st.metric(&quot;BMI&quot;, round(weight / height ** 2, 2))app = MultiPage()app.st = stapp.add_app(&quot;Input Page&quot;, input_page)app.add_app(&quot;BMI Result&quot;, compute_page)app.run()```### Using NamespacesWhen handling multiple pages, it is possible to have variable name collisions,by default all variables are saved in a common namespace called `global` but itis also possible to defined custom namepsaces. One page can write to manynamespaces at once.```pythonimport streamlit as stfrom streamlit_multipage import MultiPagedef input_page(st, **state):    namespace = &quot;input&quot;    variables = state[namespace] if namespace in state else {}    st.title(&quot;Tax Deduction&quot;)    salary_ = variables[&quot;salary&quot;] if &quot;salary&quot; in variables else 0.0    salary = st.number_input(&quot;Your salary (USD): &quot;, value=salary_)    tax_percent_ = variables[&quot;tax_percent&quot;] if &quot;tax_percent&quot; in variables else 0.0    tax_percent = st.number_input(&quot;Taxes (%): &quot;, value=tax_percent_)    total = salary * (1 - tax_percent)    if tax_percent and salary:        MultiPage.save({&quot;salary&quot;: salary, &quot;tax_percent&quot;: tax_percent}, namespaces=[namespace])    if total:        MultiPage.save({&quot;total&quot;: total}, namespaces=[namespace, &quot;result&quot;])def compute_page(st, **state):    namespace = &quot;result&quot;    variables = state[namespace] if namespace in state else {}    st.title(&quot;Your Salary After Taxes&quot;)    if &quot;total&quot; not in variables:        st.warning(&quot;Enter your data before computing. Go to the Input Page&quot;)        return    total = variables[&quot;total&quot;]    st.metric(&quot;Total&quot;, round(total, 2))app = MultiPage()app.st = stapp.add_app(&quot;Input Page&quot;, input_page)app.add_app(&quot;Net Salary&quot;, compute_page)app.run()```### Automatic NamespacesIf the namespace is set to the same App name (first parameter of `add_app`) thestate will be pre-filtered before sending it to the function.```pythonimport streamlit as stfrom streamlit_multipage import MultiPagedef input_page(st, **state):    st.title(&quot;Tax Deduction&quot;)    salary_ = state[&quot;salary&quot;] if &quot;salary&quot; in state else 0.0    salary = st.number_input(&quot;Your salary (USD): &quot;, value=salary_)    tax_percent_ = state[&quot;tax_percent&quot;] if &quot;tax_percent&quot; in state else 0.0    tax_percent = st.number_input(&quot;Taxes (%): &quot;, value=tax_percent_)    total = salary * (1 - tax_percent)    if tax_percent and salary:        MultiPage.save({&quot;salary&quot;: salary, &quot;tax_percent&quot;: tax_percent}, namespaces=[&quot;Input Page&quot;])    if total:        MultiPage.save({&quot;total&quot;: total}, namespaces=[&quot;Net Salary&quot;])def compute_page(st, **state):    st.title(&quot;Your Salary After Taxes&quot;)    if &quot;total&quot; not in state:        st.warning(&quot;Enter your data before computing. Go to the Input Page&quot;)        return    total = state[&quot;total&quot;]    st.metric(&quot;Total&quot;, round(total, 2))app = MultiPage()app.st = stapp.add_app(&quot;Input Page&quot;, input_page)app.add_app(&quot;Net Salary&quot;, compute_page)app.run()```### Directory StructureWhen dealing with multiple, complex pages, it is not convenient to have themall in a single .py file. This example shows how to lay out the directorystructure to have an organize project.```.└── root/    ├── pages/    │   ├── __init__.py    │   ├── input_data.py    │   └── result.py    └── main.py/```#### input_data.py```pythonfrom streamlit_multipage import MultiPagedef input_page(st, **state):    st.title(&quot;Tax Deduction&quot;)    salary_ = state[&quot;salary&quot;] if &quot;salary&quot; in state else 0.0    salary = st.number_input(&quot;Your salary (USD): &quot;, value=salary_)    tax_percent_ = state[&quot;tax_percent&quot;] if &quot;tax_percent&quot; in state else 0.0    tax_percent = st.number_input(&quot;Taxes (%): &quot;, value=tax_percent_)    total = salary * (1 - tax_percent)    if tax_percent and salary:        MultiPage.save({&quot;salary&quot;: salary, &quot;tax_percent&quot;: tax_percent}, namespaces=[&quot;Input Page&quot;])    if total:        MultiPage.save({&quot;total&quot;: total}, namespaces=[&quot;Net Salary&quot;])```#### Result.py```pythondef compute_page(st, **state):    st.title(&quot;Your Salary After Taxes&quot;)    if &quot;total&quot; not in state:        st.warning(&quot;Enter your data before computing. Go to the Input Page&quot;)        return    total = state[&quot;total&quot;]    st.metric(&quot;Total&quot;, round(total, 2))```#### \_\_init\_\_.py```pythonfrom .input_data import input_pagefrom .result import compute_pagepages = {    &quot;Input Page&quot;: input_page,    &quot;Net Salary&quot;: compute_page,}```#### main.py```pythonfrom pages import pagesimport streamlit as stfrom streamlit_multipage import MultiPageapp = MultiPage()app.st = stfor app_name, app_function in pages.items():    app.add_app(app_name, app_function)app.run()```### Landing PageIn is also possible to show a landing page that will be show only on start upand then redirect to the main app. The landing page is merely informative andhas no access to the state.```pythonimport streamlit as stfrom streamlit_multipage import MultiPage, savedef input_page(st, **state):    &quot;&quot;&quot;See Example on Multipage&quot;&quot;&quot;def compute_page(st, **state):    &quot;&quot;&quot;See Example on Multipage&quot;&quot;&quot;def landing_page(st):    st.title(&quot;This is a Multi Page Application&quot;)    st.write(&quot;Feel free to leave give a star in the Github Repo&quot;)app = MultiPage()app.st = stapp.add_app(&quot;Landing&quot;, landing_page, initial_page=True)app.add_app(&quot;Input Page&quot;, input_page)app.add_app(&quot;BMI Result&quot;, compute_page)app.run()```### CustomizationThere is additional functionality to customized the UI. In this example all thedefault text is replaced with custom messages.```pythonimport streamlit as stfrom streamlit_multipage import MultiPage, savedef input_page(st, **state):    &quot;&quot;&quot;See Example on Multipage&quot;&quot;&quot;def compute_page(st, **state):    &quot;&quot;&quot;See Example on Multipage&quot;&quot;&quot;def landing_page(st):    &quot;&quot;&quot;See Example on Landing Page&quot;&quot;&quot;def footer(st):    st.write(&quot;Developed by [ELC](https://elc.github.io)&quot;)def header(st):    st.write(&quot;This app is free to use&quot;)def sidebar(st):    st.button(&quot;Donate (Dummy)&quot;)app = MultiPage()app.st = stapp.start_button = &quot;Go to the main page&quot;app.navbar_name = &quot;Other Pages:&quot;app.next_page_button = &quot;Next Chapter&quot;app.previous_page_button = &quot;Previous Chapter&quot;app.reset_button = &quot;Delete Cache&quot;app.navbar_style = &quot;SelectBox&quot;app.header = headerapp.footer = footerapp.navbar_extra = sidebarapp.hide_menu = Trueapp.hide_navigation = Trueapp.add_app(&quot;Landing&quot;, landing_page, initial_page=True)app.add_app(&quot;Input Page&quot;, input_page)app.add_app(&quot;BMI Result&quot;, compute_page)app.run()```## Installation### No InstallThis is a really simple script, if introducing new and small dependencies isnot desired, simply copy and paste the content of the `src` folder into yourproject (one single file). Beware that this method does not include all theadvantages of using a dependency such as updates, dependency tracking and soon.### Via PipInstall by running```pip install streamlit-multipage```The only dependency is `streamlit` which should be already installed. It willbe installed automatically if not present. Optionally, `joblib` can beinstalled if the `pickle` module cannot handle the object in the saved state.## Similar projectsHaving multi page streamlit app is something many people try to achieve,therefore, many libraries were developed to achieved this goal. Some of themare listed below:- [Hydralit](https://github.com/TangleSpace/hydralit)- [streamlit-multiapps](https://github.com/upraneelnihar/streamlit-multiapps)- [streamlit-pages](https://github.com/bvenkatesh-ai/streamlit_pages)If this project does not fit your needs, please check these as well.## MaintainersThis project is maintained by Yan Almeida and Ezequiel Leonardo Castaño</longdescription>
</pkgmetadata>