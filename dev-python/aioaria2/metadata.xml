<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aioaria2[![pypi](https://img.shields.io/pypi/v/aioaria2.svg)](https://pypi.org/project/aioaria2/)![python](https://img.shields.io/pypi/pyversions/aioaria2)![implementation](https://img.shields.io/pypi/implementation/aioaria2)![wheel](https://img.shields.io/pypi/wheel/aioaria2)![license](https://img.shields.io/github/license/synodriver/aioaria2.svg)## Support async rpc call with aria2 and process management## Usage:### example```pythonimport asynciofrom pprint import pprintimport aioaria2async def main():    async with aioaria2.Aria2HttpClient(&quot;http://117.0.0.1:6800/jsonrpc&quot;,                                        token=&quot;token&quot;) as client:        pprint(await client.getVersion())asyncio.run(main())```### The ip address should be replaced with your own### See [aria2 manual](http://aria2.github.io/manual/en/html/) for more detail about client methods```python# exampe of httpimport asynciofrom pprint import pprintimport aioaria2import ujsonasync def main():    async with aioaria2.Aria2HttpClient(&quot;http://127.0.0.1:6800/jsonrpc&quot;,                                        token=&quot;token&quot;,                                        loads=ujson.loads,                                        dumps=ujson.dumps) as client:        pprint(await client.addUri([&quot;http://www.demo.com&quot;]))  # that would start downloadingasyncio.run(main())``````python# exampe of websocketimport asynciofrom pprint import pprintimport aioaria2import ujson@aioaria2.run_syncdef on_download_complete(trigger, data):    print(f&quot;downlaod complete {data}&quot;)async def main():    client: aioaria2.Aria2WebsocketTrigger = await aioaria2.Aria2WebsocketTrigger.new(&quot;http://127.0.0.1:6800/jsonrpc&quot;,                                                                                      token=&quot;token&quot;,                                                                                      loads=ujson.loads,                                                                                      dumps=ujson.dumps)    client.onDownloadComplete(on_download_complete)    pprint(await client.addUri([&quot;http://www.demo.com&quot;]))loop = asyncio.get_event_loop()loop.create_task(main())loop.run_forever()```- Run that coroutine function and each method represent an aria2-rpc call. As for server, each instance represent an aria2 process.```pythonimport aioaria2import asyncioasync def main():    server = aioaria2.AsyncAria2Server(r&quot;aria2c.exe&quot;,                                       r&quot;--conf-path=aria2.conf&quot;, &quot;--rpc-secret=admin&quot;, daemon=True)    await server.start()    await server.wait()asyncio.run(main())```#### this start an aria2 process[Aria2 Manual](http://aria2.github.io/manual/en/html/)### todolist- [x] async http- [x] async websocket- [x] async process management- [x] unitestThis module is built on top of [aria2jsonrpc](https://xyne.archlinux.ca/projects/python3-aria2jsonrpc)with async and websocket support.### For windows users, you should```# for start async aria2 processasyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())asyncio.set_event_loop(asyncio.ProactorEventLoop())```For python version greater than 3.8, asyncio uses ProactorEventLoop by default, so there is no need to modify#### v1.2.0new Aria2WebsocketTrigger class for websocket events, use on* methods to add callbacksLike```@trigger.onDownloadStartasync def onDownloadStart(trigger, future):    print(&quot;下载开始{0}&quot;.format(future.result()))```#### v1.2.3Now you can add multiple callbacks for one event ,must be coroutine function or an async callable, use ```aioaria2.run_sync``` to wrap a sync function```@trigger.onDownloadStartasync def callback1(trigger, future):    print(&quot;第一个回调{0}&quot;.format(future.result()))@trigger.onDownloadStart@run_syncdef callback2(trigger, future):    print(&quot;第二个回调{0}&quot;.format(future.result()))```#### v1.3.0* Big changes for class```Aria2WebsocketTrigger```* Callbacks now accept```dict```as second parameter instead of```asyncio.Future```* methods of class```Aria2WebsocketTrigger``` now have same return value as ```Aria2HttpClient```* ```id``` parameter now accept a callable as idfactory to generate uuid, otherwise default uuid factory is used.```@trigger.onDownloadStartasync def callback1(trigger, data:dict):    print(&quot;第一个回调{0}&quot;.format(data))@trigger.onDownloadStart@run_syncdef callback2(trigger, data:dict):    print(&quot;第二个回调{0}&quot;.format(data))```### v1.3.1* custom json library with keyword arguments ```loads``` ```dumps```### v1.3.2* fix  unclosed client_session when exception occurs during ws_connect* alias for ```Aria2WebsocketTrigger```,named ```Aria2WebsocketClient```### v1.3.3* fix method problems in client### v1.3.4rc1* handle reconnect simply* handle InvalidstateError while trying to ping aria2### v1.3.4* add async id factory support* allow unregister callbacks in websocketclient* add contextvars support in ```run_sync```</longdescription>
</pkgmetadata>