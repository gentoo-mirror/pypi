<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Memoize with TimeoutFunction decorator and anciliary tooling to &quot;memoize&quot;, or cache return values from a function call. Timeouts are important to ensure that the cache doesn't grow indefinitely, and has the advantage of culling on length since it is less subject to thrashing.## Getting Started### InstallingMWT can be installed using pip:    $ pip install mwtIf you want to run the latest version of the code, you can install from git:    $ pip install -U git+git://github.com/...### Using MWTAt its simplest, simply decorate your method with MWT:    import timeit    from mwt import mwt    @mwt()    def fibonacci(n):        a,b = 1,1        for i in range(n-1):            a,b = b,a+b        return a    def test():        fibonacci(5)    for i in range(5):        print timeit.timeit(&quot;fibonacci(50000)&quot;, &quot;from __main__ import fibonacci&quot;, number=1)    pi@pi:/tmp $ python fib.py    0.470113992691    4.10079956055e-05    3.50475311279e-05    3.88622283936e-05    2.59876251221e-05### A Note of CautionJust because you can do something, it doesn't mean that you should.The MWT decorator is a quick and easy way to resduce extended time incalculation, but it is by definition not perfect: there are overheads tothe memoization and garbage collection process implicit in memoization,and caution in its use is presented.In particular, watch out for the overall time executed, and secondlythe cache hit ratio: if the percentage of hits is small, then the neteffect is to add overhead, not reduce it.There are two things that can be done to evaluate performance. The firstand most obvious is to profile timings and see whether time overall hasbeen saved with the addition of the decorator.The other is to analyze cache statistics after the containing code has beenrunning for a while. MWT provides a stats interface to assist with this,and it can be utilized like this:    fmt = &quot;%-15s %8s %8s %8s %8s %8s %8s&quot;    print(fmt%(&quot;Cache&quot;, &quot;Length&quot;, &quot;Hits&quot;, &quot;Misses&quot;, &quot;Purged&quot;,            &quot;Timeouts&quot;, &quot;HWM&quot;))    stats = mwt.stats()    for stat in stats:        print(fmt%(stat[&quot;cache&quot;], stat[&quot;length&quot;], stat[&quot;hits&quot;],                stat[&quot;misses&quot;], stat[&quot;purged&quot;], stat[&quot;timeouts&quot;],                stat[&quot;hwm&quot;]))Which will produce output like this which will allow you to see howeffective the memoization process is for each of the functions that aredecorated:    Cache               Length    Hits   Misses   Purged Timeouts      HWM    opc.hue:rgbToHsv         0       0        0        0        0        0    opc.hue:hue              0       0        0        0        0        0    opc.hue:hsvToRgb     27167   32785      270     5103        0    27183A high hit:miss ratio indicates that the cache is performing well.If the ratio is poor, though, then don't give up straight away: it'spossible that matters may be improved by tweaking the target method'scalling parameters (for example, bounding a float to perhaps a couple ofdigits of precision).## ContributingPlease read [CONTRIBUTING.md](https://gist.github.com/PurpleBooth/b24679402957c63ec426) for details on our code of conduct, and the process for submitting pull requests to us.## VersioningWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags). ## Authors* **Alex King** - *Initial work* - [ak15199](https://github.com/ak15199)See also the list of [contributors](https://github.com/your/project/contributors) who participated in this project.## LicenseThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details## AcknowledgmentsBased on inspiration from [MEMOIZE DECORATOR WITH TIMEOUT (PYTHON RECIPE)](http://code.activestate.com/recipes/325905-memoize-decorator-with-timeout/)</longdescription>
</pkgmetadata>