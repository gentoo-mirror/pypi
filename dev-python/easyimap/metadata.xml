<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>About this module-----------------Simple imap wrapper... image:: https://img.shields.io/pypi/v/easyimap.svg    :target: https://pypi.python.org/pypi/easyimap/    :alt: Latest Version.. image:: https://img.shields.io/pypi/pyversions/easyimap.svg    :target: https://pypi.python.org/pypi/easyimap/    :alt: Supported Python versions.. image:: https://img.shields.io/pypi/l/easyimap.svg    :target: https://pypi.python.org/pypi/easyimap/    :alt: LicenseExample to use--------------*connect* function create IMAP4_SSL instance by default::    &gt;&gt;&gt; import easyimap    &gt;&gt;&gt; host = &quot;imap.gmail.com&quot;    &gt;&gt;&gt; user = &quot;me@example.com&quot;    &gt;&gt;&gt; password = &quot;hogehogehogehoge&quot;    &gt;&gt;&gt; mailbox = &quot;secret&quot;    &gt;&gt;&gt; imapper = easyimap.connect(host, user, password, mailbox)*connect* function also create IMAP4 instance by passing *ssl* argument::    &gt;&gt;&gt; import easyimap    &gt;&gt;&gt; host = &quot;imap.gmail.com&quot;    &gt;&gt;&gt; user = &quot;me@example.com&quot;    &gt;&gt;&gt; password = &quot;hogehogehogehoge&quot;    &gt;&gt;&gt; mailbox = &quot;secret&quot;    &gt;&gt;&gt; imapper = easyimap.connect(host, user, password, mailbox, ssl=False, port=143)This imapper can list up latest n mail by *listup* method.By default, This invoke `fetch` from IMAP4_SSL instance with '(UID RFC822)'.::    &gt;&gt;&gt; mail1, mail2 = imapper.listup(2)    &gt;&gt;&gt; mail1.uid    80    &gt;&gt;&gt; mail1    &lt;easyimap.easyimap.MailObj object at 0x...&gt;    &gt;&gt;&gt; type(mail1.body)    &lt;type 'unicode'&gt;    &gt;&gt;&gt; type(mail1.title)    &lt;type 'unicode'&gt;    &gt;&gt;&gt; type(mail1.date)    &lt;type 'unicode'&gt;    &gt;&gt;&gt; type(mail1.sender)    &lt;type 'unicode'&gt;You can check latest unseen mail by *unseen* method::    &gt;&gt;&gt; imapper.unseen(2)    [(82, &lt;easyimap.easyimap.MailObj object at 0x...&gt;), (81, &lt;easyimap.easyimap.MailObj object at 0x...)]You can directly fetch email object with specific id::    &gt;&gt;&gt; imapper.mail(80)    &lt;easyimap.easyimap.MailObj object at 0x...&gt;You can download attachments::    &gt;&gt;&gt; imapper.mail(80)    &gt;&gt;&gt; (id, mail) = imapper.mail(80)    &gt;&gt;&gt; for attachment in mail.attachment:    &gt;&gt;&gt;     print attachment[0], attachment[1]Finally, call *quit* method::    &gt;&gt;&gt; imapper.quit()Basic API---------* easyimap.connect(host, user, password, mailbox='INBOX', timeout=15, ssl=True, port=993, \*\*kwargs)    | Create IMAP4(_SSL) wrapper.    | If you want to keep read/unread status, Please pass optional `read_only=True` argument.    | kwargs are read from Imapper's constructor. Plz read source code.Imapper^^^^^^^* listids(limit=10, criterion=None)    Returns list of available email ids.* listup(limit=10, criterion=None, include_raw=False)    Returns list of mail_object.* unseen(limit=10)    Returns list of mail_object.* mail(uid, include_raw=False)    Returns MailObj.* change_mailbox(mailbox)    Change mailbox.* quit()    Close and Logout.MailObject^^^^^^^^^^* uid    Returns UID(type: int).* raw    if you fetched email with include_raw option, this returns raw Data::        &gt;&gt;&gt; [(id1, mail1), (id2, mail2)] = imapper.listup(2, include_raw)        &gt;&gt;&gt; data = mail1.raw* title    Returns string of 'Subject' header.* sender    Returns string of 'Sender' header.* from_addr    Returns string of 'From' header.* to    Returns string of 'To' header.* date    Returns string of 'Date' header.* body    Returns string of Body.* content_type    Returns string of 'Content-Type' header.* content_transfer_encoding    Returns string of 'Content-Transfer-Encoding' header.* references    Returns string of 'References' header.* in_reply_to    Returns string of 'In-Reply-To' header.* reply_to    Returns string of 'Reply-To' header.* return_path    Returns string of 'Return-Path' header.* mime_version    Returns string of 'MIME-Version' header.* message_id    Returns string of 'Message-ID' header.* attachments    Returns list of tuples('attached file name', MailObj).Recent Change~~~~~~~~~~~~~- 0.6.3    + Add support for python-3.5.    + Fixed a bug in decoding an attached plain text.- 0.6.2    + Fixed a bug in header/body encoding- 0.6.1    + Fixed a bug in _decode_header function- 0.6.0    + Add support for Python-3.4.    + **Backward incompatible changes**        * Modify `listup` to return list of mailobj.        * Rename many properties to underbar separated format.</longdescription>
</pkgmetadata>