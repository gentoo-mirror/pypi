<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># music-tagmusic-tag is a library for editing audio metadata with an interfacethat does not depend on the underlying file format. In other words, editingmp3 files shouldn not be any different than flac, m4a, ... This library isjust a layer on top of [mutagen](https://mutagen.readthedocs.io/en/latest/),which does all the heavy lifting.## FormatsThe following file formats are actively tested.- ``aac``- ``aiff``- ``dsf``- ``flac``- ``m4a``- ``mp3``- ``ogg``- ``opus``- ``wav``- ``wv``## KeysMetadata is available using a dictionary-like interface with the following keys.Keys are not case sensitive and can contain arbitrary whitespace, '-', and '_'characters. In other words, ``Album Artist``, ``album-artist``, and``album_artist`` are all synonyms for ``albumartist``. Also, ``disk`` is synonymous with ``disc``.- ``album``- ``albumartist``- ``artist``- ``artwork``- ``comment``- ``compilation``- ``composer``- ``discnumber``- ``genre``- ``lyrics``- ``totaldiscs``- ``totaltracks``- ``tracknumber``- ``tracktitle``- ``year``- ``isrc``- ``#bitrate`` (read only)- ``#codec`` (read only)- ``#length`` (read only)- ``#channels`` (read only)- ``#bitspersample`` (read only)- ``#samplerate`` (read only)## Examples### Reading tags``` pythonimport music_tagf = music_tag.load_file(&quot;music-tag/sample/440Hz.m4a&quot;)# dict access returns a MetadataItemtitle_item = f['title']# MetadataItems keep track of multi-valued keystitle_item.values  # -&gt; ['440Hz']# A single value can be extractedtitle_item.first  # -&gt; '440Hz'title_item.value  # -&gt; '440Hz'# MetadataItems can also be cast to a stringstr(title_item)  # -&gt; '440Hz'```### Setting tags``` python# tags can be set as if the file were a dictionaryf['title'] = '440Hz'# additional values can be appended to the tagsf.append_tag('title', 'subtitle')title_item.values  # -&gt; ['440Hz', 'subtitle']title_item.first  # -&gt; '440Hz'title_item.value  # -&gt; '440Hz, subtitle'str(title_item)  # -&gt; '440Hz, subtitle'```### Removing tags``` pythondel f['title']f.remove_tag('title')```### Album artworkAlbum artwork is wrapped in an object that keeps track of some of theextra metadata associated with images. Note that some album art functionalityrequires the Pillow (modern day PIL) library.``` python# get artworkart = f['artwork']# Note: `art` is a MetadataItem. Use ``art.value`` if there is#       only one image embeded in the file. This will raise a#       ValueError if there is more than one image. You can also#       use ``art.first``, or iterate through ``art.values``.art.first.mime  # -&gt; 'image/jpeg'art.first.width  # -&gt; 1280art.first.height  # -&gt; 1280art.first.depth  # -&gt; 24art.first.data  # -&gt; b'... raw image data ...'# set artworkwith open('music_tag/test/sample/imgA.jpg', 'rb') as img_in:    f['artwork'] = img_in.read()with open('music_tag/test/sample/imgB.jpg', 'rb') as img_in:    f.append_tag('artwork', img_in.read())# Make a thumbnail (requires Pillow)art.first.thumbnail([64, 64])  # -&gt; pillow imageart.first.raw_thumbnail([64, 64])  # -&gt; b'... raw thumbnail data ...'```### Saving tags``` python# finally, you can bounce the edits to diskf.save()```### Skipping Type NormalizationBy default, tags are validated and normalized. For instance, track numbersand years are return as integers. Some tag formats store everything as stringsto enable things like leading zeros in tracknumbers (i.e., track '01'). I thinkthis is ugly, but you can use the file object's ``raw`` property if you likethis kind of thing.``` pythonf.raw['tracknumber'] = '01'f.raw['tracknumber'].value  # -&gt; '01'```## ResolversSome tags may not exist in a file, but there could be enough information todiscern the correct value. For instance, the ``album artist`` tag is probablyequal to the ``artist`` tag, or ``&quot;Various Artists&quot;`` if the ``compilation``flag is set. Here are some examples,``` pythonf['album artist'] = 'Brian'f.resolve('album artist')  # &lt;- 'Brian'f['artist'] = 'Brian'del f['album artist']f['compilation'] = Falsef.resolve('album artist')  # &lt;- 'Brian'f['compilation'] = Truef.resolve('album artist')  # &lt;- 'Various Artists'del f['compilation']f['album artist'] = 'Various Artists'f.resolve('compilation')  # &lt;- Truef['album artist'] = 'Brian'f.resolve('compilation')  # &lt;- False```## Command Line ToolThe music_tag package can be used as a CLI to get / set tags. Here are someexamples,### Printing Tags``` bash# Print tags from all audio files in sample directorypython -m music_tag --print ./sample# Print specific tags from all audio files in sample directory      python -m music_tag --print --tags=&quot;Title : Album&quot; ./sample# Write tags from all audio files in sample directory to a csv filepython -m music_tag --to-csv tags.csv ./sample# Write specific tags from all audio files in sample directory to a csv filepython -m music_tag --tags=&quot;Title : Album&quot; --to-csv tags.csv ./sample```### Setting Tags``` bash# Set a couple tags for multiple files      python -m music_tag --set &quot;genre:Pop&quot; --set &quot;comment:cli test&quot; \    ./sample/440Hz.aac ./sample/440Hz.flac# Write tags from csv file to audio files (assuming file paths in# the csv file are relative to the sample directorypython -m music_tag --from-csv tags.csv```</longdescription>
</pkgmetadata>