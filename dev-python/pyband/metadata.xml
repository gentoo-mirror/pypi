<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;    &lt;h2&gt;PyBand&lt;/h2&gt;    &lt;blockquote&gt;BandChain Python Library&lt;/blockquote&gt;&lt;/div&gt;Pyband is a library that is used to interact with BandChain through the `gRPC` protocol. Querying data and sendingtransaction can be done here!## ‚≠êÔ∏è FeaturesThis helper library allows users to interact with BandChain.PyBand supports the following features:- Getting the information of a specific oracle script, data source, and request ID.- Getting the account information of specific address.- Getting the latest request for a specific oracle script with its matching calldata and validator ask_count and  min_count.- Querying all the reporters associated with a specific validator.- Seeing what client_id you are using and getting BandChain's latest block data.- Able to send transaction in 3 modes: block mode, async mode, and sync mode.## üì¶ InstallationThis library is available on [PyPI](https://pypi.org/project/pyband/)```bashpip install pyband```## üíé Example UsageThe example below shows how this library can be used to get the result of the latest request for the price of anycryptocurrency. In this example, we will get the latest price of BTC on BandChain's testnet.The specified parameters are:- `oracleScriptID`: 111- `calldata`: The hex string representing the [OBI](&lt;https://github.com/bandprotocol/bandchain/wiki/Oracle-Binary-Encoding-(OBI)&gt;)-encoded value of `{'symbols': ['BTC'], 'multiplier': 100000000}`- `minCount`: 10- `askCount`: 16```pythonimport asynciofrom pyband import Client, PyObiasync def main():    grpc_url = &quot;laozi-testnet6.bandchain.org&quot;    c = Client.from_endpoint(grpc_url, 443)    oid = 111    calldata = &quot;00000001000000034254430000000005f5e100&quot;    min_count = 10    ask_count = 16    req_info = await c.get_latest_request(oid, calldata, min_count, ask_count)    oracle_script = await c.get_oracle_script(oid)    obi = PyObi(oracle_script.schema)    # Converts the calldata into a readable syntax    print(obi.decode_input(bytes.fromhex(calldata)))    # Prints the result    print(obi.decode_output(req_info.request.result.result))if __name__ == &quot;__main__&quot;:    asyncio.run(main())```Below is the results of the example above.```{'symbols': ['BTC'], 'multiplier': 100000000}{'rates': [1936488410000]}```This example shows how to send a transaction on BandChain using block mode.```pythonimport asyncioimport osfrom pyband import Client, Transaction, Walletfrom pyband.messages.cosmos.bank.v1beta1 import MsgSendfrom pyband.proto.cosmos.base.v1beta1 import Coinasync def main():    # Create a GRPC connection    grpc_url = &quot;laozi-testnet6.bandchain.org&quot;    c = Client.from_endpoint(grpc_url, 443)    # Convert a mnemonic to a wallet    wallet = Wallet.from_mnemonic(os.getenv(&quot;MNEMONIC&quot;))    sender = wallet.get_address().to_acc_bech32()    # Prepare a transaction's properties    msg_send = MsgSend(        from_address=sender,        to_address=&quot;band19ajhdg6maw0ja0a7qd9sq7nm4ym9f4wjg8r96w&quot;,        amount=[Coin(amount=&quot;1000000&quot;, denom=&quot;uband&quot;)],    )    account = await c.get_account(sender)    account_num = account.account_number    sequence = account.sequence    fee = [Coin(amount=&quot;50000&quot;, denom=&quot;uband&quot;)]    chain_id = await c.get_chain_id()    # Step 4 Construct a transaction    txn = (        Transaction()        .with_messages(msg_send)        .with_sequence(sequence)        .with_account_num(account_num)        .with_chain_id(chain_id)        .with_gas(2000000)        .with_fee(fee)        .with_memo(&quot;&quot;)    )    # Sign and broadcast a transaction    tx_block = await c.send_tx_block_mode(wallet.sign_and_build(txn))    # Converting to JSON for readability    print(tx_block.to_json(indent=4))if __name__ == &quot;__main__&quot;:    asyncio.run(main())```## üßÄ NotesFor more examples, please go to [`examples`](/examples/request_data_example.py).</longdescription>
</pkgmetadata>