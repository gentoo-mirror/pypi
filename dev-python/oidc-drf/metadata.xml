<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OverviewDjango DRF OIDC Auth library Securely authenticate users using OIDC in Django DRF. It Supports Code Flow and Code Flow With PKCE. Easy integration with React Js or any front-end framework.----# InstallationInstall using `pip`...```bashpip install oidc_drf```Add `'oidc_drf'` to your `INSTALLED_APPS` setting.```pythonINSTALLED_APPS = [    ...    'oidc_drf',]```Configure the following settings in your Django project's settings module:```pythonOIDC_RP_CLIENT_ID = '' # requiredOIDC_RP_CLIENT_SECRET = '' # optional if public client OIDC_OP_AUTHORIZATION_ENDPOINT = ''# requiredOIDC_OP_TOKEN_ENDPOINT = ''# requiredOIDC_OP_USER_ENDPOINT = '' # requiredOIDC_OP_LOGOUT_ENDPOINT ='' # requiredOIDC_AUTHENTICATION_SSO_CALLBACK_URL = '' # required - identity provider will redirect you to this url after login# Django Rest Framework settingsREST_FRAMEWORK = {    'DEFAULT_AUTHENTICATION_CLASSES': [        'oidc_drf.drf.OIDCAuthentication',  # This is important to be the first one     ],}# Authentication backendsAUTHENTICATION_BACKENDS = [    'oidc_drf.backends.OIDCAuthenticationBackend',]```Next, edit your urls.py and add the following:```pythonfrom django.urls import path, includeurlpatterns = [    # ...    path('oidc/', include('oidc_drf.urls')),    # ...]```finnaly run the migrations commands```bashpython3 manage.py makemigrationspython3 manage.py migrate```That's it, we're done!----# EXTRA SETTINGSthose settings are optional and populated with default values.```pythonOIDC_USE_NONCE = True # defalut trueOIDC_USE_PKCE = True # defalut true# For RS256 algorithm to work, you need to set either the OP signing key or the OP JWKS Endpoint.OIDC_RP_IDP_SIGN_KEY = None # defalut NoneOIDC_OP_JWKS_ENDPOINT = None # defalut NoneOIDC_USERNAME_CLAIM = 'preferred_username' # defalut 'preferred_username'OIDC_RP_SIGN_ALGO = 'HS256' # defalut HS256OIDC_RP_SCOPES = 'openid email profile' # defalut openid OIDC_VERIFY_SSL = True # defalut TrueOIDC_TIMEOUT = None # defalut NoneOIDC_PROXY = None # defalut NoneOIDC_USERNAME_ALGO = None # defalut NoneOIDC_USE_ENCODED_USERNAME = None # defalut NoneOIDC_CREATE_USER = True # defalut True, Enables or disables automatic user creation during authenticationOIDC_CHECK_USER_MODEL = True # defalut True, if it is set to false it can authenticated based on oidc without UserOIDC_VERIFY_KID = True # defalut True OIDC_ALLOW_UNSECURED_JWT = False # defalut FalseOIDC_TOKEN_USE_BASIC_AUTH = False # defalut False# you can map the info comming back from the IDP to user model# defalut is {}OIDC_FIELD_MAPPING = {    'field_in_my_user_model': 'field_in_in_oidc',    'first_name': 'given_name',    'last_name': 'family_name',}```----# Django AdminTo view the info or fields comming back from the IDP in order to do proper mapping for OIDC_FIELD_MAPPING, all the data saved under the user model as oidc extra data.**Below**: *Screenshot from the django admin*![Screenshot2][django_admin_2]![Screenshot3][django_admin_3]----# REST APIsThe REST API to the OIDC DRF is described below.## AUTH ENDPOINT**Note**If `OIDC_USE_PKCE` is set to `True`:- You should add `code_challenge` and `code_challenge_method` parameters to the authentication endpoint.- You should save the `code_verifier` in local storage because it will be needed in the callback and refresh endpoints.If `OIDC_USE_NONCE` is set to `True`:- You should add the `nonce` parameter to the authentication endpoint.- You should save the `nonce` in local storage because it will be needed in the callback endpoint.----***To generate the `code_challenge` and `nonce`, refer to this JavaScript library: [oidc_pkce](https://github.com/halmogbl/oidc_pkce).***----Example request with parameters:### Request`GET /oidc/auth/`    curl --location 'http://localhost:8000/oidc/auth?code_challenge=4qZTfBVpD5xkxUIw0srf5rVV5H418hr-xQJLAd4c2Ss&amp;code_challenge_method=S256&amp;nonce=cFYLOJXZ8CANDC1SdQbvfUobixJdgUIc'### Response    Status: 200 OK    {        &quot;redirect_url&quot;: &quot;http://127.0.0.1:8080/realms/mol/protocol/openid-connect/auth?response_type=code&amp;client_id=mowaamah&amp;redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fcallback&amp;scope=openid+email&amp;state=rhG5l83rwd81SytApbl7MzrTDBFRXqbo&amp;nonce=cFYLOJXZ8CANDC1SdQbvfUobixJdgUIc&amp;code_challenge=4qZTfBVpD5xkxUIw0srf5rVV5H418hr-xQJLAd4c2Ss0&amp;code_challenge_method=S256&quot;    }    ## CALLBACK ENDPOINT**Note**If `OIDC_USE_PKCE` is set to `True`:- you should include the &quot;code_verifier&quot; parameter in the request body.If `OIDC_USE_NONCE` is set to `True`:- you should include the &quot;nonce&quot; parameter in the request body.Remember to pass all the parameters returned from the 'OIDC_AUTHENTICATION_SSO_CALLBACK_URL', such as `state`, `session_state`, and `code`, to the callback endpoint.Example request with parameters and request body:### Request`POST /oidc/callback/`    curl --location 'http://localhost:8000/oidc/callback/?state=alksdfjlka&amp;session_state=alsdjflajsdk&amp;code=alsdjflaksdflkjls' \    --header 'Content-Type: application/json' \    --data '{            &quot;nonce&quot;: &quot;cFYLOJXZ8CANDC1SdQbvfUobixJdgUIc&quot;,            &quot;code_verifier&quot;: &quot;cNa9FYCujvVibPnosk1Fk3wvPPisaTjE8Ns83X0UcGsNlEfIUc3j49hFftYPEGAb&quot;    }'### Response    Status: 200 OK    {       &quot;access&quot;:&quot;jwt access token&quot;,       &quot;refresh&quot;:&quot;jwt refresh token&quot;,    }## REFRESH ENDPOINT**Note**If `OIDC_USE_PKCE` is set to `True`:- you should include the &quot;code_verifier&quot; parameter in the request body.### Request`POST /oidc/refresh/`Example request with request body:    curl --location 'http://localhost:8000/oidc/refresh/' \    --header 'Content-Type: application/json' \    --data '{        &quot;refresh&quot;: &quot;jwt refresh token&quot;,        &quot;code_verifier&quot;: &quot;cNa9FYCujvVibPnosk1Fk3wvPPisaTjE8Ns83X0UcGsNlEfIUc3j49hFftYPEGAb&quot;        }'### Response    Status: 200 OK    {       &quot;access&quot;:&quot;jwt access token&quot;,       &quot;refresh&quot;:&quot;jwt refresh token&quot;,    }## LOGOUT ENDPOINT### Request`POST /oidc/logout/`    curl --location 'http://localhost:8000/api/v1/oidc/logout' \    --data '{&quot;refresh&quot;: &quot;jwt refresh token&quot;}'### Response    Status: 200 OK    {        &quot;message&quot;: &quot;Logout OIDC Successful&quot;    }[django_admin_1]: https://i.ibb.co/855dw0N/django-admin-1.png[django_admin_2]: https://i.ibb.co/LdmfNky/django-admin-2.png[django_admin_3]: https://i.ibb.co/J2rDkXS/django-admin-3.png</longdescription>
</pkgmetadata>