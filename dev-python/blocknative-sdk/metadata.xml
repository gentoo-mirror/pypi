<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://pypi.org/project/blocknative-sdk/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/blocknative-sdk&quot; /&gt;&lt;/a&gt;# Blocknative Python SDK## InstallVirtualEnv QuickStart```bash$ virtualenv bn$ . ./bn/bin/activate(bn) $ pip3 install --upgrade pip(bn) $ pip3 install blocknative-sdk(bn) $ curl 'https://raw.githubusercontent.com/blocknative/python-sdk/main/examples/subscribe.py' &gt; subscribe.py(bn) $ python3 subscribe.py myapikey.key```Manual Install```bashpython3 setup.py install```## API KeyTo get started using the Blocknative Python SDK you must first obtain an API Key. You can do so by heading over to [Blocknative.com](https://explorer.blocknative.com/account)!## Usage### Basic usage```pythonfrom blocknative.stream import Streamimport json# Initialize the streamstream = Stream('&lt;API_KEY&gt;')# Define your transaction handler which has the context of a specific subscription.async def txn_handler(txn, unsubscribe):    # Output the transaction data to the console    print(json.dumps(txn, indent=4))# Define the address you want to watchuniswap_v2_address = '0x7a250d5630b4cf539739df2c5dacb4c659f2488d'# Register the subscriptionstream.subscribe_address(uniswap_v2_address, txn_handler)# Start the websocket connection and start receiving events!stream.connect()```### Unsubscribing```pythonfrom blocknative.stream import Streamimport json# Initialize the streamstream = Stream('&lt;API_KEY&gt;')# Define your transaction handlerasync def txn_handler(txn, unsubscribe):    if txn['status'] == &quot;confirmed&quot;:        # Output the transaction data to the console        print(json.dumps(txn, indent=4))        # Unsubscribe from this subscription        unsubscribe()# Define the address you want to watchuniswap_v2_address = '0x7a250d5630b4cf539739df2c5dacb4c659f2488d'# Register the subscriptionstream.subscribe_address(uniswap_v2_address, txn_handler)# Start the websocket connection and start receiving events!stream.connect()```### Using Filters```pythonfrom blocknative.stream import Streamimport jsonstream = Stream('&lt;API_KEY&gt;')async def txn_handler(txn, unsubscribe):    # This will only get called with transactions that have status of 'confirmed'    # This is due to the global filter above    print(json.dumps(txn, indent=4))uniswap_v2_address = '0x7a250d5630b4cf539739df2c5dacb4c659f2488d'filters = [{    'status': 'confirmed'}]# Global filter will apply to all of these subscriptionsstream.subscribe_address(curve_fi_address, txn_handler, filter=filters)# Start the websocket connection and start receiving events!stream.connect()```### Using Global FiltersSimilar as above but this time we use global filters which will apply to all subscriptions.```pythonfrom blocknative.stream import Streamimport jsonglobal_filters = [{    'status': 'confirmed'}]stream = Stream('&lt;API_KEY&gt;', global_filters=global_filters)async def txn_handler(txn, unsubscribe):    # This will only get called with transactions that have status of 'confirmed'    # This is due to the global filter above    print(json.dumps(txn, indent=4))uniswap_v2_address = '0x7a250d5630b4cf539739df2c5dacb4c659f2488d'curve_fi_address = '0xdf5e0e81dff6faf3a7e52ba697820c5e32d806a8'sushi_swap_address = '0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f'# Global filter will apply to all of these subscriptionsstream.subscribe_address(curve_fi_address, txn_handler)stream.subscribe_address(uniswap_v2_address, txn_handler)stream.subscribe_address(sushi_swap_address, txn_handler)# Start the websocket connection and start receiving events!stream.connect()```### Connecting to Binance Smart Chain```pythonfrom blocknative.stream import Streamimport jsonBSC_NETWORK_ID = 56# Initialize the stream - specify network_id `56` to connect to bsc mainstream = Stream('&lt;API_KEY&gt;', network_id=BSC_NETWORK_ID)# Define your transaction handler which has the context of a specific subscription.async def txn_handler(txn, unsubscribe):    # Output the transaction data to the console    print(json.dumps(txn, indent=4))# Define the address you want to watchpancakeswap_v2_address = '0x10ed43c718714eb63d5aa57b78b54704e256024e'# Register the subscriptionstream.subscribe_address(pancakeswap_v2_address, txn_handler)# Start the websocket connection and start receiving events!stream.connect()```</longdescription>
</pkgmetadata>