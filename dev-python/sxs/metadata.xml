<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Test Status](https://github.com/sxs-collaboration/sxs/workflows/tests/badge.svg)](https://github.com/sxs-collaboration/sxs/actions)[![Documentation Status](https://readthedocs.org/projects/sxs/badge/?version=main)](https://sxs.readthedocs.io/en/main/?badge=main)[![PyPI Version](https://img.shields.io/pypi/v/sxs?color=)](https://pypi.org/project/sxs/)[![Conda Version](https://img.shields.io/conda/vn/conda-forge/sxs.svg?color=)](https://anaconda.org/conda-forge/sxs)[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/sxs-collaboration/sxs/blob/main/LICENSE)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/moble/sxs_notebooks/master)# Simulating eXtreme Spacetimes python packageThe `sxs` python package provides a high-level interface for using dataproduced by the SXS collaboration.  In particular, the function `sxs.load` canautomatically find, download, and load data, returning objects that providecommon interfaces to the various types of data, without forcing the user toworry about details like data formats or where to find the data.  It can alsoautomatically select the newest or highest-resolution dataset for a givensimulation, or return a range of versions or resolutions.  Currently, thehigh-level objects encapsulate  * Catalog — a listing of all data produced by the SXS collaboration  * Metadata — data describing the simulation parameters  * Horizons — time-series data describing the apparent horizons  * Waveforms — time-series data describing the extrapolated gravitational-wave    modes## InstallationBecause this package is pure python code, installation is very simple.  Inparticular, with a reasonably modern installation, you can just run a commandlike```bashconda install -c conda-forge sxs```or```bashpython -m pip install sxs```Here, `conda` requires the [conda](https://docs.anaconda.com/anaconda/install/)installation of python, which is the most recommended approach for scientificpython; the second command assumes that you have an appropriate pythonenvironment set up in some other way.  Either of these commands will downloadand install the `sxs` package and its most vital requirements.If you want to install all the goodies that enable things like jupyternotebooks with plots and interactive tables, you could run```bashconda install -c conda-forge sxs-ecosystem```or```bashpython -m pip install sxs[ecosystem]```You will probably also want to set some sensible defaults to automaticallydownload and cache data:```bashpython -c &quot;import sxs; sxs.write_config(download=True, cache=True)&quot;```This will write a configuration file in the directory returned by`sxs.sxs_directory(&quot;config&quot;)`, and downloaded data will be cached in thedirectory returned by `sxs.sxs_directory(&quot;cache&quot;)`.  See [that function'sdocumentation](https://sxs.readthedocs.io/en/main/api/sxs.utilities.sxs_directories/#sxsutilitiessxs_directoriessxs_directory)for details.## UsageAn extensive demonstration of this package's capabilities is available[here](https://mybinder.org/v2/gh/moble/sxs_notebooks/master), in the form ofinteractive jupyter notebooks that are actually running this code and somepre-downloaded data.  The following is just a very brief overview of the `sxs`package's main components.There are four important objects to understand in this package:```pythonimport sxscatalog = sxs.load(&quot;catalog&quot;)metadata = sxs.load(&quot;SXS:BBH:0123/Lev/metadata.json&quot;)horizons = sxs.load(&quot;SXS:BBH:0123/Lev/Horizons.h5&quot;)waveform = sxs.load(&quot;SXS:BBH:0123/Lev/rhOverM&quot;, extrapolation_order=2)```[The `catalog`object](https://sxs.readthedocs.io/en/main/api/sxs.catalog.catalog/#sxs.catalog.catalog.Catalog)contains information about every simulation in the catalog, including allavailable data files, and information about how to get them.  You probablydon't need to actually know about details like where to get the data, but`catalog` can help you find the simulations you care about.  Most importantly,`catalog.simulations` is a `dict` object, where the keys are names ofsimulations (like &quot;SXS:BBH:0123&quot;) and the values are the same types as [the`metadata`object](https://sxs.readthedocs.io/en/main/api/sxs.metadata.metadata/#sxs.metadata.metadata.Metadata),which contains metadata about that simulation — things like mass ratio, spins,etc.  This `metadata` reflects the actual output of the simulations, whichleads to some inconsistencies in their formats.  A more consistent interface(though it is biased toward returning NaNs where a human might glean moreinformation) is provided by `catalog.table`, which returns a[`pandas`](https://pandas.pydata.org/docs/) `DataFrame` with specific datatypes for each column.The actual data itself is primarily contained in the next two objects.  [The`horizons`object](https://sxs.readthedocs.io/en/main/api/sxs.horizons/#sxs.horizons.Horizons)has three attributes — `horizons.A`, `horizons.B`, and `horizons.C` — typicallyrepresenting the original two horizons of the black-hole binary and the commonhorizon that forms at merger.  In matter simulations, one or more of these maybe `None`.  Otherwise, each of these three is a[`HorizonQuantities`](https://sxs.readthedocs.io/en/main/api/sxs.horizons/#sxs.horizons.HorizonQuantities)object, containing several timeseries relating to mass, spin, and position.Finally, the[`waveform`](https://sxs.readthedocs.io/en/main/api/sxs.waveforms.waveform_modes/#sxs.waveforms.waveform_modes.WaveformModes)encapsulates the modes of the waveform and the corresponding time information,along with relevant metadata like data type, spin weight, etc., and usefulfeatures like numpy-array-style slicing.</longdescription>
</pkgmetadata>