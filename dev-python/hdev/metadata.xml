<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hdevThe CLI for the Hypothesis development environment.Installation &amp; Upgrading------------------------The instructions below use [pipx](https://pipxproject.github.io/pipx/) toinstall `hdev`. `pipx` will install `hdev` in its own isolated virtualenv at`~/.local/pipx/venvs/hdev` and add it to your `PATH`, without `sudo`. You caneasily uninstall it again with `pipx uninstall hdev`. It won't touch yoursystem Python environment at all.### Installing on macOSInstall [Homebrew](https://brew.sh/) and then run:```shellsessionbrew install pipxpipx ensurepathpipx install hdev```### Installing on Linux```shellsessionpython3 -m pip install --user pipxpython3 -m pipx ensurepathpipx install hdev```### Upgrading (on either macOS or Linux)To upgrade hdev to the latest version:```shellsessionpipx upgrade hdev```Usage-----```usage: hdev [-h] [--project PROJECT_DIR] [--find FIND_COMMAND] [--debug] {alembic,clean,config,deps,install-python,python_version,requirements,run,template} ...positional arguments:  {alembic,clean,config,deps,install-python,python_version,requirements,run,template}    alembic             Run alembic commands to create and execute DB migrations.    clean               Clean a project directory    config              Get format and run data from pyproject.toml    deps                Get dependency information    install-python      Install the versions of python listed in the `.python-version` file.    python_version      Dump the versions of Python in various formats    requirements        Compiles .txt requirements file based on the existing .in files using pip-tools    run                 Run a custom command defined in the pyproject.toml file    template            Update the local project templateoptional arguments:  -h, --help            show this help message and exit  --project PROJECT_DIR                        Path of the project's root. Defaults to '.'. Can be specified multiple times  --find FIND_COMMAND   Find projects from the current directory. This can be one of 'APPS', 'LIBS', 'ANY' or a comma separated list of project names.  --debug               Enable debugging info```Configuration-------------`hdev` is configured within your project's `pyproject.toml` file with the following options:```toml[tool.hdev]project_name = &quot;myproject&quot;project_type = &quot;library&quot;   # Or &quot;application&quot;[tool.hdev.clean]# File and directory patterns relative to the root to remove.# These support shell expansions and patternsfiles=[&quot;dir/sub_dir/my_specific_file.txt&quot;]dirs=[&quot;resources/__myapp_cache__&quot;]# File and directory names which will be removed anywhere they# are found. These support shell expansions and patternsfile_names=[&quot;*.ini&quot;]dir_names=[&quot;_cache_*&quot;]# Control if empty dirs are cleaned or notempty_dirs=false[tool.hdev.run]# Add a custom command runnable with `hdev run custom`mycommand.command = &quot;echo hello&quot;mycommand.help = &quot;Say hello!&quot;```You can choose to not use any configuration, in that case `hdev` providessensible default for most Hypothesis projects.Hacking-------### Installing hdev in a development environment#### You will need* [Git](https://git-scm.com/)* [pyenv](https://github.com/pyenv/pyenv)  * Follow the instructions in the pyenv README to install it  * On macOS: the Homebrew method works best on macOS  * On Ubuntu: follow the Basic GitHub Checkout method* [Graphviz](https://graphviz.org/) \[optional\]  * This is only needed for the `hdev deps --graph` command  * On macOS: `brew install graphviz`  * On Ubuntu: `sudo apt install graphviz`#### Clone the git repo```terminalgit clone https://github.com/hypothesis/hdev.git```This will download the code into a `hdev` directoryin your current working directory. You need to be in the`hdev` directory for the rest of the installationprocess:```terminalcd hdev```#### Run the tests```terminalmake test```**That's it!** Youâ€™ve finished setting up your hdevdevelopment environment. Run `make help` to see all the commands that'reavailable for linting, code formatting, packaging, etc.### Updating the Cookiecutter scaffoldingThis project was created from thehttps://github.com/hypothesis/h-cookiecutter-pypackage/ template.If h-cookiecutter-pypackage itself has changed since this project was created, andyou want to update this project with the latest changes, you can &quot;replay&quot; thecookiecutter over this project. Run:```terminalmake template```**This will change the files in your working tree**, applying the latestupdates from the h-cookiecutter-pypackage template. Inspect and test thechanges, do any fixups that are needed, and then commit them to git and send apull request.If you want `make template` to skip certain files, never changing them, addthese files to `&quot;options.disable_replay&quot;` in[`.cookiecutter.json`](.cookiecutter.json) and commit that to git.If you want `make template` to update a file that's listed in `disable_replay`simply delete that file and then run `make template`, it'll recreate the filefor you.</longdescription>
</pkgmetadata>