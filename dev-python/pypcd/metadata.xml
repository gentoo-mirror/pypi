<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>``pypcd``=========What?-----Pure Python module to read and write point clouds stored in the`PCD file format &lt;http://pointclouds.org/documentation/tutorials/pcd_file_format.php&gt;`__,used by the `Point Cloud Library &lt;http://pointclouds.org/&gt;`__.Why?----You want to mess around with your point cloud data without writing C++and waiting hours for the template-heavy PCL code to compile.You tried to get some of the Python bindings for PCL to compileand just gave up.How does it work?-----------------It parses the PCD header and loads the data (whether in ``ascii``,``binary`` or ``binary_compressed`` format) as a`Numpy &lt;http://www.numpy.org&gt;`__ structured array. It creates aninstance of the ``PointCloud``class, containing the point cloud data as ``pc_data``, andsome convenience functions for I/O and metadata access.See the comments in ``pypcd.py`` for some info on the point cloudstructure.Example-------.. code:: python    import pypcd    # also can read from file handles.    pc = pypcd.PointCloud.from_path('foo.pcd')    # pc.pc_data has the data as a structured array    # pc.fields, pc.count, etc have the metadata    # center the x field    pc.pc_data['x'] -= pc.pc_data['x'].mean()    # save as binary compressed    pc.save_pcd('bar.pcd', compression='binary_compressed')How to install--------------.. code:: bash    pip install pypcdThat's it! You may want to install optional dependencies such as `pandas&lt;https://pandas.pydata.org&gt;`__.You can also clone this repo and use setup.py. .. code:: bash    git clone https://github.com/dimatura/pypcdNote that downloading data assets willrequire `git-lfs &lt;https://git-lfs.github.com&gt;`__.Using with ROS---------------You can also use this library with ROS ``sensor_msgs``, but it is *not* a dependency.You don't need to install this package with catkin -- using `pip` should be fine --but if you want to it is possible:Steps:.. code:: bash    # you need to do this manually in this case    pip install python-lzf    cd your_workspace/src    git clone https://github.com/dimatura/pypcd    mv setup_ros.py setup.py    catkin build pypcd    source ../devel/setup.bashThen you can do something like this:.. code:: python    import pypcd    import rospy    from sensor_msgs.msg import PointCloud2    def cb(msg):        pc = PointCloud.from_msg(msg)        pc.save('foo.pcd', compression='binary_compressed')        # maybe manipulate your pointcloud        pc.pc_data['x'] *= -1        outmsg = pc.to_msg()        # you'll probably need to set the header        outmsg.header = msg.header        pub.publish(outmsg)    # ...    sub = rospy.Subscriber('incloud', PointCloud2)    pub = rospy.Publisher('outcloud', PointCloud2, cb)    rospy.init('pypcd_node')    rospy.spin()Is it beautiful, production-ready code?---------------------------------------No.What else can it do?--------------------There's a bunch of functionality accumulatedover time, much of it hackish and untested.In no particular order,-  Supports ``ascii``, ``binary`` and ``binary_compressed`` data.   The latter requires the ``lzf`` module.-  Decode and encode RGB into a single ``float32`` number. If   you don't know what I'm talking about consider yourself lucky.-  Point clouds to `pandas &lt;https://pandas.pydata.org&gt;`__ dataframes.    This in particular is quite useful,   since `pandas` is pretty powerful and makes various operations   such as merging point clouds or manipulating values easy.   Conceptually, data frames are a good match to the point cloud format, since   many point clouds in reality have heterogeneous data types - e.g.   `x`, `y` and `z` are float fields but `label` is an int.-  Convert to and from `ROS &lt;http://www.ros.org&gt;`__ PointCloud2   messages.   Requires the ROS ``sensor_msgs`` package with Python bindings   installed.   This functionality uses code developed by Jon Binney under   the BSD license, included as ``numpy_pc2.py``.What can't it do?-----------------There's no synchronization between the metadata fields in``PointCloud``and the data in ``pc_data``. If you change the shape of ``pc_data``without updating the metadata fields you'll run into trouble.I've only used it for unorganized point cloud data(in PCD conventions, ``height=1``), not organizeddata like what you get from RGBD.However, some things may still work.While padding and fields with count largerthan 1 seem to work, this is a somewhatad-hoc aspect of the PCD format, so be careful.If you want to be safe, you're probably better offusing neither -- just name each componentof your field something like ``FIELD_00``, ``FIELD_01``, etc.It also can't run on Python 3, yet, but there's a PR to fix thisthat might get pulled in the near future.It's slow!----------Try using ``binary`` or ``binary_compressed``; usingASCII is slow and takes up a lot of space, not tomention possibly inaccurate if you're not carefulwith how you format your floats.I found a bug / I added a feature / I made your code cleaner------------------------------------------------------------Thanks! You can submit a pull request. But honestly, I'm not too goodat keeping up with my github :(TODO----- Better API for various operations.- Clean up, get rid of cruft.- Add a cli for common use cases like file type conversion.- Better support for structured point clouds, with tests.- Better testing.- Better docs. More examples.- More testing of padding- Improve handling of multicount fields- Better support for rgb nonsense- Export to ply?- Figure out if it's acceptable to use &quot;pointcloud&quot; as a single word.- Package data assets in pypi?Credits-------The code for compressed point cloud data was informed by looking at`MatlabPCL &lt;https://www.mathworks.com/matlabcentral/fileexchange/40382-matlab-to-point-cloud-library?requestedDomain=true&gt;`__.@wkentaro for some minor changes.I used `cookiecutter &lt;https://github.com/audreyr/cookiecutter&gt;`__ tohelp with the packaging.The code in ``numpy_pc2.py`` was developed by Jon Binney underthe BSD license for `ROS &lt;http://www.ros.org&gt;`__.I want to congratulate you / insult you---------------------------------------My email is ``dimatura@cmu.edu``.Copyright (C) 2015-2017 Daniel Maturana=======History=======0.1.0 (2018-03-15)------------------* First release on PyPI.</longdescription>
</pkgmetadata>