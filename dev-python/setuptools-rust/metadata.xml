<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Setuptools plugin for Rust extensions[![github actions](https://github.com/PyO3/setuptools-rust/actions/workflows/ci.yml/badge.svg)](https://github.com/PyO3/setuptools-rust/actions/workflows/ci.yml)[![pypi package](https://badge.fury.io/py/setuptools-rust.svg)](https://pypi.org/project/setuptools-rust/)[![readthedocs](https://readthedocs.org/projects/pip/badge/)](https://setuptools-rust.readthedocs.io/en/latest/)[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)`setuptools-rust` is a plugin for `setuptools` to build Rust Python extensions implemented with [PyO3](https://github.com/PyO3/pyo3) or [rust-cpython](https://github.com/dgrunwald/rust-cpython).Compile and distribute Python extensions written in Rust as easily as ifthey were written in C.## SetupFor a complete example, see[html-py-ever](https://github.com/PyO3/setuptools-rust/tree/main/examples/html-py-ever).First, you need to create a bunch of files:### setup.py```pythonfrom setuptools import setupfrom setuptools_rust import Binding, RustExtensionsetup(    name=&quot;hello-rust&quot;,    version=&quot;1.0&quot;,    rust_extensions=[RustExtension(&quot;hello_rust.hello_rust&quot;, binding=Binding.PyO3)],    packages=[&quot;hello_rust&quot;],    # rust extensions are not zip safe, just like C-extensions.    zip_safe=False,)```For a complete reference of the options supported by the `RustExtension` class, see the[API reference](https://setuptools-rust.readthedocs.io/en/latest/reference.html).### pyproject.toml```toml[build-system]requires = [&quot;setuptools&quot;, &quot;wheel&quot;, &quot;setuptools-rust&quot;]```### MANIFEST.inThis file is required for building source distributions```textinclude Cargo.tomlrecursive-include src *```## UsageYou can use same commands as for c-extensions. For example:```&gt;&gt;&gt; python ./setup.py developrunning developrunning egg_infowriting hello-rust.egg-info/PKG-INFOwriting top-level names to hello_rust.egg-info/top_level.txtwriting dependency_links to hello_rust.egg-info/dependency_links.txtreading manifest file 'hello_rust.egg-info/SOURCES.txt'writing manifest file 'hello_rust.egg-info/SOURCES.txt'running build_extrunning build_rustcargo build --manifest-path extensions/Cargo.toml --features python3    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secsCreating /.../lib/python3.6/site-packages/hello_rust.egg-link (link to .)Installed hello_rustProcessing dependencies for hello_rust==1.0Finished processing dependencies for hello_rust==1.0```Or you can use commands like `bdist_wheel` (after installing `wheel`). See also [the notes in the documentation about building wheels](https://setuptools-rust.readthedocs.io/en/latest/building_wheels.html).Cross-compiling is also supported, using one of [`crossenv`](https://github.com/benfogle/crossenv), [`cross`](https://github.com/rust-embedded/cross) or [`cargo-zigbuild`](https://github.com/messense/cargo-zigbuild).For examples see the `test-crossenv` and `test-cross` and `test-zigbuild` Github actions jobs in [`ci.yml`](https://github.com/PyO3/setuptools-rust/blob/main/.github/workflows/ci.yml).By default, `develop` will create a debug build, while `install` will create a release build.## Commands  - `build` - Standard build command will also build all rust extensions.  - `build_rust` - Command builds all rust extensions.  - `clean` - Standard clean command executes cargo clean for all rust    extensions.</longdescription>
</pkgmetadata>