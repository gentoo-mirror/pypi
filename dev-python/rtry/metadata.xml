<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># rtry[![Codecov](https://img.shields.io/codecov/c/github/tsv1/rtry/master.svg?style=flat-square)](https://codecov.io/gh/tsv1/rtry)[![PyPI](https://img.shields.io/pypi/v/rtry.svg?style=flat-square)](https://pypi.python.org/pypi/rtry/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/rtry?style=flat-square)](https://pypi.python.org/pypi/rtry/)[![Python Version](https://img.shields.io/pypi/pyversions/rtry.svg?style=flat-square)](https://pypi.python.org/pypi/rtry/)## Installation```bashpip3 install rtry```## Documentation* [timeout](#timeout)    * [as context manager](#as-context-manager)    * [as context manager (silent)](#as-context-manager-silent)    * [as context manager (asyncio)](#as-context-manager-asyncio)    * [as decorator](#as-decorator)    * [as decorator (asyncio)](#as-decorator-asyncio)    * [as argument](#as-argument)* [retry](#retry)    * [attempts](#attempts)    * [until](#until)    * [logger](#logger)    * [delay](#delay)    * [swallow](#swallow)    * [asyncio](#asyncio)---## Timeout##### As context manager```pythonfrom rtry import timeout, CancelledErrortry:    with timeout(3.0):        resp = requests.get(&quot;https://httpbin.org/status/200&quot;)except CancelledError:    raiseelse:    print(resp)```##### As context manager (silent)```pythonfrom rtry import timeout, CancelledErrorresp = Nonewith timeout(3.0, exception=None):    resp = requests.get(&quot;https://httpbin.org/status/200&quot;)```##### As context manager (asyncio)```pythonimport asyncioimport aiohttpfrom rtry import timeout, CancelledErrorasync def main():    try:        async with aiohttp.ClientSession() as session, timeout(3.0):            async with session.get(&quot;https://httpbin.org/status/200&quot;) as resp:                return resp    except CancelledError:        raise    else:        print(resp)asyncio.run(main())```##### As decorator```pythonfrom rtry import timeout, CancelledError@timeout(3.0)def fn():    resp = requests.get(&quot;https://httpbin.org/status/200&quot;)    return resptry:    resp = fn()except CancelledError:    raiseelse:    print(resp)```##### As decorator (asyncio)```pythonimport asyncioimport aiohttpfrom rtry import timeout, CancelledError@timeout(3.0)async def fn():    async with aiohttp.ClientSession() as session:        async with session.get(&quot;https://httpbin.org/status/200&quot;) as resp:            return respasync def main():    try:        resp = await fn()    except CancelledError:        raise    else:        print(resp)asyncio.run(main())```##### As argument```pythonfrom rtry import retry, CancelledError@retry(until=lambda r: r.status_code != 200, timeout=3.0)def fn():    resp = requests.get(&quot;https://httpbin.org/status/200&quot;)    return resptry:    resp = fn()except CancelledError:    raiseelse:    print(resp)```## Retry### Attempts```python@retry(attempts=2)def fn():    resp = requests.get(&quot;https://httpbin.org/status/500&quot;)    print(resp)    assert resp.status_code == 200    return respresp = fn()# &lt;Response [500]&gt;# &lt;Response [500]&gt;# Traceback:#   AssertionError```### Until```python@retry(until=lambda r: r.status_code != 200, attempts=2)def fn():    resp = requests.get(&quot;https://httpbin.org/status/500&quot;)    print(resp)    return respresp = fn()# &lt;Response [500]&gt;# &lt;Response [500]&gt;```### Logger##### Simple logger```python@retry(until=lambda r: r.status_code != 200, attempts=2, logger=print)def fn():    resp = requests.get(&quot;https://httpbin.org/status/500&quot;)    return respresp = fn()# 1 &lt;Response [500]&gt; &lt;function fn at 0x103dcd268&gt;# 2 &lt;Response [500]&gt; &lt;function fn at 0x103dcd268&gt;```##### Custom logger```pythondef logger(attempt, result_or_exception, decorated):    logging.info(&quot;Attempt: %d, Result: %s&quot;, attempt, result_or_exception)@retry(until=lambda r: r.status_code != 200, attempts=2, logger=logger)def fn():    resp = requests.get(&quot;https://httpbin.org/status/500&quot;)    return respresp = fn()# INFO:root:Attempt: 1, Result: &lt;Response [500]&gt;# INFO:root:Attempt: 2, Result: &lt;Response [500]&gt;```### Delay##### Const delay```python@retry(until=lambda r: r.status_code != 200, attempts=2, delay=0.1)def fn():    resp = requests.get(&quot;https://httpbin.org/status/500&quot;)    return respstarted_at = time.monotonic()resp = fn()ended_at = time.monotonic()print('Elapsed {:.2f}'.format(ended_at - started_at))# Elapsed 2.11```##### Custom delay```pythonfrom math import exp@retry(until=lambda r: r.status_code != 200, attempts=2, delay=exp)def fn():    resp = requests.get(&quot;https://httpbin.org/status/500&quot;)    return respstarted_at = time.monotonic()resp = fn()ended_at = time.monotonic()print('Elapsed {:.2f}'.format(ended_at - started_at))# Elapsed 11.79```### Swallow##### Fail on first exception```python@retry(attempts=2, swallow=None, logger=print)def fn():    resp = requests.get(&quot;http://127.0.0.1/status/500&quot;)    return resptry:    resp = fn()except Exception as e:    print(e)    # HTTPConnectionPool(host='127.0.0.1', port=80): Max retries exceeded with url: /status/500```##### Swallow only ConnectionError```pythonfrom requests.exceptions import ConnectionError@retry(attempts=2, swallow=ConnectionError, logger=print)def fn():    resp = requests.get(&quot;http://127.0.0.1/status/500&quot;)    return resptry:    resp = fn()except Exception as e:    print(e)    # 1 HTTPConnectionPool(host='127.0.0.1', port=80): Max retries exceeded with url: /status/500    # 2 HTTPConnectionPool(host='127.0.0.1', port=80): Max retries exceeded with url: /status/500    # HTTPConnectionPool(host='127.0.0.1', port=80): Max retries exceeded with url: /status/500```### AsyncIO```pythonimport asyncioimport aiohttpfrom rtry import retry@retry(attempts=2)async def fn():    async with aiohttp.ClientSession() as session:        async with session.get(&quot;https://httpbin.org/status/500&quot;) as resp:            print(resp)            assert resp.status == 200            return respasync def main():    resp = await fn()    # &lt;ClientResponse(https://httpbin.org/status/500) [500 INTERNAL SERVER ERROR]&gt;    # &lt;ClientResponse(https://httpbin.org/status/500) [500 INTERNAL SERVER ERROR]&gt;    # Traceback    #   AssertionErrorasyncio.run(main())```</longdescription>
</pkgmetadata>