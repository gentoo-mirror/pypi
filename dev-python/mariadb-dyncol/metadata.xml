<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==============mariadb-dyncol==============.. image:: https://img.shields.io/github/workflow/status/adamchainz/mariadb-dyncol/CI/main?style=for-the-badge   :target: https://github.com/adamchainz/mariadb-dyncol/actions?workflow=CI.. image:: https://img.shields.io/pypi/v/mariadb-dyncol.svg?style=for-the-badge   :target: https://pypi.org/project/mariadb-dyncol/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge   :target: https://github.com/psf/black.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white&amp;style=for-the-badge   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commitUnmaintained (2022-12-07)-------------------------I stopped maintaining this package as it has never been popular.Since MariaDB added JSON support, itâ€™s better to use that for portability, rather than the custom dynamic columns format.If youâ€™d like to take over maintenance of this package please email me.----Pack/unpack Python ``dict``\s into/out of MariaDB's **Dynamic Columns** format.A quick example:.. code-block:: pycon    &gt;&gt;&gt; mariadb_dyncol.pack({&quot;key&quot;: &quot;value&quot;})    b'\x04\x01\x00\x03\x00\x00\x00\x03\x00key!value'    &gt;&gt;&gt; mariadb_dyncol.unpack(mariadb_dyncol.pack({&quot;key&quot;: &quot;value&quot;}))    {'key': 'value'}Installation============Use **pip**:.. code-block:: sh    python -m pip install mariadb-dyncolPython 3.7 to 3.11 supported.----**Working on a Django project?**Check out my book `Boost Your Django DX &lt;https://adamchainz.gumroad.com/l/byddx&gt;`__ which covers many ways to improve your development experience.----Features========* Sensible type mapping from Python to SQL* Tested against examples from MariaDB, including property/fuzz testing with  `hypothesis &lt;https://hypothesis.readthedocs.io/en/latest/&gt;`_ (which is  amazing and found many bugs)Why?====The normal way for adding data into dynamic columns fields is with the``COLUMN_CREATE`` function, and its relatives. This allows you to do thingslike:.. code-block:: sql    INSERT INTO mytable (attrs) VALUES (COLUMN_CREATE('key', 'value'))Unfortunately the Django ORM is restricted and cannot use database functionslike this in every instance, at least not until Django 1.9. It was thislimitation I hit whilst implementing a dynamic columns field for my project`django-mysql &lt;https://github.com/adamchainz/django-mysql&gt;`_ that spurred thecreation of this library.By pre-packing the dynamic columns, the above query can just insert the blobof data directly:.. code-block:: sql    INSERT INTO mytable (attrs) VALUES (X'0401000300000003006B65792176616C7565')Asides from being more easily implemented with the Django ORM, this approachof packing/unpacking dynamic columns in Python also has some advantages:* All data types are properly preserved in Python. The only way MariaDB  provides of pulling back all values for a dynamic columns field is to call  ``COLUMN_JSON``, but JSON only supports strings and integers. Also  ``COLUMN_JSON`` has a depth limit of 10, but the format has no actual limit.* The CPU overhead of packing/unpacking the dynamic columns is moved from you  database server to your (presumably more scalable) clients.API===All functions and names are accessible as attributes of the ``mariadb_dyncol``module, which you can import with ``import mariadb_dyncol``.``pack(mapping)``-----------------Packs the given mapping (a ``dict``) into the MariaDB Dynamic Columnsformat for named columns and returns it as a byte string (Python 3's ``bytes``,Python 2's ``str``). This is suitable for then inserting into a table as partof a normal query.The ``dict``\'s keys must all be unicode strings, and the values must all beone of the supported data types:* ``int`` between ``-(2 ** 32) + 1`` and ``(2 ** 64) - 1`` (Python 2: ``long``  is supported too)* ``str`` up to 4GB encoded in UTF-8 (Python 2: ``unicode``)* ``float`` - anything except ``NaN`` or ``+/- inf``* ``datetime.datetime`` - full range supported* ``datetime.date`` - full range supported* ``datetime.time`` - full range supported* Any ``dict`` that is valid by these rules, allowing nested keys. There is no  nesting limit except from for MariaDB's ``COLUMN_JSON`` function which  restricts the depth to 10Note that this does not support the ``DECIMAL`` type that MariaDB does (andwould naturally map to Python's ``Decimal``) - it is a little more fiddly topack/unpack, though certainly possible, and pull requests are welcomed. If youtry and pack a ``Decimal``, a ``DynColNotSupported`` exception will be raised.There are other restrictions on the UTF-8 encoded column names as documented inMariaDB:* The maximum length of a column name is 16383 bytes* The maximum length of all column names (at one level in nested hierarchies)  is 65535 bytesAll other unsupported types will raise a ``DynColTypeError``. Out of rangevalues will raise a ``DynColValueError``.Examples:.. code-block:: pycon    &gt;&gt;&gt; mariadb_dyncol.pack({&quot;a&quot;: 1})    b'\x04\x01\x00\x01\x00\x00\x00\x00\x00a\x02'    &gt;&gt;&gt; mariadb_dyncol.pack({&quot;a&quot;: &quot;ðŸ’©&quot;})    b'\x04\x01\x00\x01\x00\x00\x00\x03\x00a!\xf0\x9f\x92\xa9'``unpack(bytestring)``----------------------Unpacks MariaDB dynamic columns data encoded byte string into a dict; the typesyou can expect back are those listed above. This is suitable for fetching thedata direct from MariaDB and decoding in Python as opposed to with MariaDB's``COLUMN_JSON`` function, preserving the types that JSON discards.As noted above, ``DECIMAL`` values are not supported, and unpacking thiswill raise ``DynColNotSupported``. Also strings will only be decoded with theMySQL charsets ``utf8`` or ``utf8mb4``; strings with other charsets will raise``DynColNotSupported`` as well.Unsupported column formats, for example the old MariaDB numbered dynamiccolumns format, or corrupt data, will raise ``DynColValueError``.Examples:.. code-block:: pycon    &gt;&gt;&gt; mariadb_dyncol.unpack(b&quot;\x04\x01\x00\x01\x00\x00\x00\x03\x00a!\xf0\x9f\x92\xa9&quot;)    {&quot;a&quot;: &quot;ðŸ’©&quot;}    &gt;&gt;&gt; mariadb_dyncol.unpack(b&quot;\x04\x01\x00\x01\x00\x00\x00\x00\x00a\x02&quot;)    {&quot;a&quot;: 1}</longdescription>
</pkgmetadata>