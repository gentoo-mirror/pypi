<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://i.ibb.co/9V7gLNH/halo-plat.png&quot; alt=&quot;Halo Serverless&quot; border=&quot;0&quot; height=&quot;250&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;# Halo Bian - Flask BIAN Python Reference Architecture LibraryThe **Halo Bian** library is based on the [**Halo**](https://github.com/halo-framework/halo-app) library which is a python based library utilizing [**Serverless**](https://logz.io/blog/serverless-vs-containers/) technology and [**microservices architecture**](http://blog.binaris.com/your-guide-to-migrating-existing-microservices-to-serverless/) BIAN (Banking Industry Architecture Network) is a membership group committed to developing open standards around banking and financial services.  A key deliverable of this group is the BIAN Service Landscape model which defines a comprehensive services architecture for financial transactions and facilities.  This library is an implementation of the BIAN model leveraging the Flask framework and allows a developer to **rapidly create BIAN-compliant services** while hiding much of the underlying BIAN model details.  See www.bian.org for more information on BIAN.This library leverages not only the Flask framework, but a number of the Flask Cloud Services components as well to facilitate building robust and resilient cloud-native BIAN microservices. deploy your Service Domain to your local environment or use [**Serverless Framework**](https://serverless.com/) and [**zappa**](https://github.com/Miserlou/Zappa) to deploy your Service Domain to AWS.## BIAN BasicsBefore diving into the library architecture, it helps to understand two key concepts within BIAN, service domains and control records.### Service DomainThe BIAN Service Landscape defines discrete areas of responsibility known as service domains.  A **Service Domain** is a combination of a **Functional Pattern** and an **Asset Type**.  For instance, using the functional pattern 'Registry' with the asset type 'Product' would yield a 'Product Registry' service domain, which could be used to manage a product catalog.  If we instead changed the asset type to 'Device', we would have a 'Device Registry' service domain that could be used to authorize services on a mobile device.  ### Control RecordThe **Control Record** is used to track the state of a service domain, and like the service domain is derived from the functional pattern and asset type.  However, in a control record, the functional pattern is represented by the **Generic Artifact Type**.  There is a one-to-one correlation between functional patterns and generic artifact types.  The control record goes one step further in delineating between specific service domain operations by introducing an additional parameter called the **Behavior Qualifier**, which, like generic artifact types, have a one-to-one correlation with functional patterns.### In Addition-  The commercial behaviors that are called Functional Patterns. Functional Patterns, Generic Artifacts and Behavior Qualifier Types are mapped and correlated:     ![Flask BIAN Functional Patterns](docs/internal_sd.png)&lt;p/&gt;[**Image From Bian Manual**](https://bian.org)-  A Service Domain applies one of the 18 functional patterns to instances of one type of asset:![Flask BIAN Asset Types](docs/asset_types.png)&lt;p/&gt;[**Image From Bian Manual**](https://bian.org)-  The standard set of â€˜action termsâ€™ that characterize the range of service operation calls : ![Flask BIAN Action Items](docs/action_items.png)&lt;p/&gt;[**Image From Bian Manual**](https://bian.org)-  The Default Action Term By Functional Pattern matrix:![Flask BIAN Matrix](docs/matrix.png)&lt;p/&gt;[**Image From Bian Manual**](https://bian.org)### BIAN SummarySo to summarize the above:**Functional Pattern** ==&gt; **Generic Artifact Type** ==&gt; **Behavior Qualifier****Functional Pattern** + **Asset Type** = **Service Domain****Generic Artifact Type** + **Asset Type** + (optional)**Behavior Qualifier** = **Control Record****Functional Pattern** is correlated with a set of **Action Term** = **Service Domain Operations**Key Benefits of using BIAN API solutions:-  Support for Emerging Industry Approaches â€“ Two key technology approaches are considered: API development and the adoption of a Micro-service architecture-  Support for Industry Standards â€“ The BIAN Service Domains and service operations present an Industry standard definition for the componentization and service enablement of Banking-  Support for Incremental Adoption/Migration â€“ BIAN aligned solutions can be implemented and adopted incrementally enabling a prioritized migration from constraining legacy architectures## ArchitectureThe Flask BIAN library implements a BIAN service domain wrapper that acts as an API and data translator while hiding much of the BIAN model complexity from the developer.![Flask BIAN Service Domain](docs/Halo-BIANServiceDomain.png)&lt;p/&gt;Halo Bian provides the following features:-  Bian version 7 - API release competability-  OAS ver. 2 support-  BianRequest object provides bian parameters support-  ServiceProperties object provides service status -  AssetType, GenericArtifact, BehaviorQualifier support per service domain-  BianServiceInfo object privides Bian details per service-  Support for all Bian Service Operations-  Support for all FunctionalPatterns&lt;p/&gt;Halo provides the following features:-  Flask development for AWS Lambda &amp; Dynamodb-  [correlation id across microservices](https://theburningmonk.com/2017/09/capture-and-forward-correlation-ids-through-different-lambda-event-sources/)-  [structured json based logging](https://theburningmonk.com/2018/01/you-need-to-use-structured-logging-with-aws-lambda/)-  [sample debug log in production](https://theburningmonk.com/2018/04/you-need-to-sample-debug-logs-in-production/)-  [support for microservice transactions with the saga pattern](https://read.acloud.guru/how-the-saga-pattern-manages-failures-with-aws-lambda-and-step-functions-bc8f7129f900)-  [using SSM Parameter Store over Lambda env variables](https://hackernoon.com/you-should-use-ssm-parameter-store-over-lambda-env-variables-5197fc6ea45b)-  [Serverless Error Handling &amp; trace id for end users](https://aws.amazon.com/blogs/compute/error-handling-patterns-in-amazon-api-gateway-and-aws-lambda/)-  [Lambda timeout](https://blog.epsagon.com/best-practices-for-aws-lambda-timeouts) management for [slow HTTP responses](https://theburningmonk.com/2018/01/aws-lambda-use-the-invocation-context-to-better-handle-slow-http-responses/)-  [ootb support for Idempotent service invocations (md5)](https://cloudonaut.io/your-lambda-function-might-execute-twice-deal-with-it/)If you are building a Python web app running on AWS Lambda (Flask), use this library to manage api transactions:```            sagax = load_saga(&quot;test&quot;, jsonx, schema)            payloads = {&quot;BookHotel&quot;: {&quot;abc&quot;: &quot;def&quot;}, &quot;BookFlight&quot;: {&quot;abc&quot;: &quot;def&quot;}, &quot;BookRental&quot;: {&quot;abc&quot;: &quot;def&quot;},                        &quot;CancelHotel&quot;: {&quot;abc&quot;: &quot;def&quot;}, &quot;CancelFlight&quot;: {&quot;abc&quot;: &quot;def&quot;}, &quot;CancelRental&quot;: {&quot;abc&quot;: &quot;def&quot;}}            apis = {&quot;BookHotel&quot;: self.create_api1, &quot;BookFlight&quot;: self.create_api2, &quot;BookRental&quot;: self.create_api3,                    &quot;CancelHotel&quot;: self.create_api4, &quot;CancelFlight&quot;: self.create_api5, &quot;CancelRental&quot;: self.create_api6}            try:                self.context = Util.get_lambda_context(request)                ret = sagax.execute(self.req_context, payloads, apis)                return {&quot;saga&quot;: &quot;good&quot;}, 200            except SagaRollBack as e:                return {&quot;saga&quot;: &quot;bad&quot;}, 500```## LicenseThis project is licensed under the MIT License## Acknowledgments* Pivotal-Field-Engineering - https://github.com/Pivotal-Field-Engineering/spring-bian* Bian api - https://github.com/bianapis* Bian - http://bian.org</longdescription>
</pkgmetadata>