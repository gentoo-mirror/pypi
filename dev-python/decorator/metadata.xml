<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Decorators for Humans=====================The goal of the decorator module is to make it easy to definesignature-preserving function decorators and decorator factories.It also includes an implementation of multiple dispatch and other niceties(please check the docs). It is released under a two-clausesBSD license, i.e. basically you can do whatever you want with it but I am notresponsible.Installation-------------If you are lazy, just perform ``$ pip install decorator``which will install just the module on your system.If you prefer to install the full distribution from source, includingthe documentation, clone the `GitHub repo`_ or download the tarball_, unpack it and run ``$ pip install .``in the main directory, possibly as superuser... _tarball: https://pypi.org/project/decorator/#files.. _GitHub repo: https://github.com/micheles/decoratorTesting--------If you have the source code installation you can run the tests with `$ python src/tests/test.py -v`or (if you have setuptools installed) `$ python setup.py test`Notice that you may run into trouble if in your system thereis an older version of the decorator module; in such a case remove theold version. It is safe even to copy the module `decorator.py` overan existing one, since we kept backward-compatibility for a long time.Repository---------------The project is hosted on GitHub. You can look at the source here: https://github.com/micheles/decoratorDocumentation---------------The documentation has been moved to https://github.com/micheles/decorator/blob/master/docs/documentation.mdFrom there you can get a PDF version by simply using the printfunctionality of your browser.Here is the documentation for previous versions of the module:https://github.com/micheles/decorator/blob/4.3.2/docs/tests.documentation.rsthttps://github.com/micheles/decorator/blob/4.2.1/docs/tests.documentation.rsthttps://github.com/micheles/decorator/blob/4.1.2/docs/tests.documentation.rsthttps://github.com/micheles/decorator/blob/4.0.0/documentation.rsthttps://github.com/micheles/decorator/blob/3.4.2/documentation.rstFor the impatient-----------------Here is an example of how to define a family of decorators tracing slowoperations:.. code-block:: python   from decorator import decorator   @decorator   def warn_slow(func, timelimit=60, *args, **kw):       t0 = time.time()       result = func(*args, **kw)       dt = time.time() - t0       if dt &gt; timelimit:           logging.warn('%s took %d seconds', func.__name__, dt)       else:           logging.info('%s took %d seconds', func.__name__, dt)       return result   @warn_slow  # warn if it takes more than 1 minute   def preprocess_input_files(inputdir, tempdir):       ...   @warn_slow(timelimit=600)  # warn if it takes more than 10 minutes   def run_calculation(tempdir, outdir):       ...Enjoy!</longdescription>
</pkgmetadata>