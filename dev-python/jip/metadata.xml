<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>jip===.. image:: https://img.shields.io/travis/jiptool/jip/master.svg   :target: https://travis-ci.org/jiptool/jip.. image:: https://img.shields.io/pypi/v/jip.svg?maxAge=2592000   :target: https://pypi.python.org/pypi/jip.. image:: https://img.shields.io/pypi/l/jip.svg?maxAge=2592000   :target:Jip is the jython equivalent of pip to python. It will resolvedependencies and download jars for your jython environment.License-------jip itself is distributed according to **MIT License** .Install-------jip is recommended to run within virtualenv, which is a best practicefor python/jython developers to created a standalone, portableenvironment. From jip 0.7, you can use jip.embed in the global installation.Install jip within virtualenv~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Create virtualenv with jython:::    virtualenv -p /usr/local/bin/jython jython-envActivate the shell environment:::    cd jython-dev    source bin/activateDownload and install jip with pip:::    pip install jipInstall jip for global jython (since 0.7)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Download jip from `pypi page &lt;http://pypi.python.org/pypi/jip&gt;`_ .Then install it with setup.py::    jython setup.py installUsage-----Install a Java package~~~~~~~~~~~~~~~~~~~~~~jip will resolve dependencies and download jars from mavenrepositories. You can install a Java package just like what you dopython with pip:::    jip install &lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;Take spring as example:::    jip install org.springframework:spring-core:3.0.5.RELEASEResolve dependencies defined in a pom~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~jip allows you to define dependencies in a maven pom file, which ismore maintainable than typing install command one by one:::    jip resolve pom.xmlResolve dependencies for an artifact~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~With jip, you can resolve and download all dependencies of anartifact, without grab the artifact itself (whenever the artifactis downloadable, for example, just a plain pom). This is especiallyuseful when you are about to setup an environment for an artifact.Also, java dependencies for a jython package is defined in thisway.::    jip deps info.sunng.gefr:gefr:0.2-SNAPSHOTUpdate snapshot artifact~~~~~~~~~~~~~~~~~~~~~~~~You can use update command to find and download a new deployedsnapshot:::    jip update info.sunng.bason:bason-annotation:0.1-SNAPSHOTRun jython with installed java packages in path~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Another script ``jython-all`` is shipped with jip. To run jythonwith Java packages included in path, just use ``jython-all``instead of ``jython``List~~~~Use ``jip list`` to see artifacts you just installedRemove a package~~~~~~~~~~~~~~~~You are suggested to use ``jip remove`` to remove an artifact. Thiswill keep library index consistent with file system.::    jip remove org.springframework:spring-core:3.0.5.RELEASECurrently, there is no dependency check in artifact removal. So you shouldbe careful when use this command.Clean~~~~~``jip clean`` will remove everything you downloaded, be careful touse it.Search~~~~~~You can also search maven central repository with a ``jip search [keyword]``.The search service is provided by`Sonatype's official Maven search &lt;http://search.maven.org&gt;`_ .Persist current environment state~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Before you distribute you environment, you can use ``freeze`` to persistcurrent state into a pom file.::    jip freeze &gt; pom.xmlConfiguration-------------You can configure custom maven repository with a dot file, jip willsearch configurations in the following order:1. ``$VIRTUAL_ENV/.jip_config``, your virtual environment home2. ``$HOME/.jip_config``, your homeHere is an example:::    [repos:jboss]    uri=http://repository.jboss.org/maven2/    type=remote    [repos:local]    uri=~/.m2/repository/    type=local    [repos:central]    uri=https://repo1.maven.org/maven2/    type=remoteBe careful that the ``.jip_config`` file will overwrite default settings,so you must include default local and central repository explicitly.jip will skip repositories once it finds package matches the mavencoordinator.Artifacts will be cached at ``$HOME/.jip`` (``$VIRTUAL_ENV/.jip`` ifyou are using a virtual environment).From 0.4, you can also define repositories in pom.xml if you usethe ``resolve`` command. jip will add these custom repositorieswith highest priority.Distribution helpers--------------------From 0.4, you can use jip in your setup.py to simplify jythonsource package distribution. Create ``pom.xml`` in the same directorywith setup.py. Fill it with your Java dependencies in standard way.In this file, you can also define custom repositories. Here isan example:::    &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;      xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;        ...        &lt;dependencies&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;                &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;                &lt;version&gt;1.6.1&lt;/version&gt;            &lt;/dependency&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;                &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;                &lt;version&gt;1.6.1&lt;/version&gt;            &lt;/dependency&gt;            ...        &lt;/dependencies&gt;        &lt;repositories&gt;            &lt;repository&gt;                &lt;id&gt;sonatype-oss-sonatype&lt;/id&gt;                &lt;url&gt;http://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;            &lt;/repository&gt;        &lt;/repositories&gt;    &lt;/project&gt;And in your setup.py, use the jip setup wrapper instead of the oneprovided by setuptools or distutils. You can add keyword argument``pom`` to specify a custom name of the pom file.::    from jip.dist import setupOther than the traditional pom configuration, jip also allows you todescribe dependencies in python. You can define a data structure inyour ``setup.py`` like:::    requires_java = {        'dependencies':[            ## (groupdId, artifactId, version)            ('org.slf4j', 'slf4j-api', '1.6.1'),            ('org.slf4j', 'slf4j-log4j12', '1.6.1'),            ('info.sunng.soldat', 'soldat', '1.0-SNAPSHOT'),            ('org.apache.mina', 'mina-core', '2.0.2')        ],        'repositories':[            ('sonatype-oss-snapshot', 'http://oss.sonatype.org/content/repositories/snapshots/')        ]    }And pass it to jip setup as keyword argument ``requires_java``. Oncejip found this argument, it won't try to load a pom file.::    from jip.dist import setup    setup(        ...        requires_java=requires_java,        ...)Another ``resolve`` command was added to setuptools, you can use thiscommand to download all dependencies to library path::    jython setup.py resolveAll dependencies will be installed when running::    jython setup.py installSo with jip's ``setup()`` wrapper, ``pip`` will automatically installwhat your package needs. You can publish your package to pythoncheese shop, and there is just one command for everything::    pip install [your-package-name]Embedded dependency helper--------------------------jip.embed is available for both virtualenv and global installation.You can descirbe Java dependency in you code, then it will beresolved on the fly.jip.embed is inspired by Groovy's @Grab.::    from jip.embed import require    require('commons-lang:commons-lang:2.6')    from org.apache.commons.lang import StringUtils    StringUtils.reverse('jip rocks')Contact-------If you have any problem using jip, or feature request for jip,please feel free to fire an issue on`github issue tracker &lt;http://github.com/jiptool/jip/issues/&gt;`_. You canalso follow `@Sunng &lt;http://twitter.com/Sunng/&gt;`_ on twitter.Change Notes------------- Next version - unreleased- 0.9.16 - 2022-12-20- 0.9.15 - 2020-06-04  - Fix encoding errors of download from local repositories- 0.9.14 - 2020-05-25  - Added Python 3.7 compatibility  - Fail gracefully if unkown repository type  - Maven central `moved to HTTPS &lt;https://blog.sonatype.com/central-repository-moving-to-https&gt;`_- 0.9.13 - 2017-07-23  - Added option `copy-pom` for `install` command- 0.9.12 - 2017-03-20  - Fix errors when downloading POMs containing umlauts  - Remove jip.JIP_VERSION. Use jip.__version__ if you need it- 0.9.11 - 2017-03-11  - Improve handling of download errors- 0.9.10 - 2017-03-09  - Fix .jip/cache not being isolated in virtualenv- 0.9.9 - 2016-10-31  - Fix possible crash- 0.9.8 - 2016-07-27  - Minor fixes- 0.9 - 2015-04-23  - Python 3 support- 0.8 - 2014-03-31  - Windows support- 0.7 - 2011-06-11  - All new jip.embed and global installation  - enhanced search  - dry-run option for ``install``, ``deps`` and ``resolve``  - exclusion for ``install`` command and jip.dist  - local maven repository is disabled by default  - improved dependency resolving speed  - jip now maintains a local cache of jars and poms in    ``$HOME/.jip/cache/``  - use argparse for better command-line ui  - add some test cases- 0.5.1 - 2011-05-14  - Artifact jar package download in paralell  - User-agent header included in http request  - new command `freeze` to dump current state  - bugfix- 0.4 - 2011-04-15  - New commands available: ``search``, ``deps``, ``list``, ``remove``  - New feature ``jip.dist`` for setuptools integration  - Dependency exclusion support, thanks *vvangelovski*  - Allow project-scoped repository defined in ``pom.xml`` and    ``setup.py``  - Code refactoring, now programming friendly  - README converted to reStructuredText  - Migrate to MIT License- 0.2.1 - 2011-04-07  - Improved console output format  - Correct scope dependency management inheritance  - Alpha release of snapshot management, you can update a snapshot    artifact  - Environment independent configuration. ``.jip`` for each    environment  - Bug fixes- 0.1 - 2011-01-04  - Initial releaseLinks------  `Don't repeat yourself: Distribute jython packages with jip.dist &lt;http://sunng.info/blog/2011/04/dont-repeat-yourself-distribute-jython-package-with-jip-dist/&gt;`_-  **Obsolete**   `Introduction to jip 0.1 &lt;http://sunng.info/blog/jip-0-1/&gt;`_-  `Project on Github &lt;http://github.com/sunng87/jip&gt;`_-  `Package on Python Cheese Shop &lt;http://pypi.python.org/pypi/jip&gt;`_</longdescription>
</pkgmetadata>