<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI](https://github.com/migraf/fhir-kindling/actions/workflows/main_ci.yml/badge.svg?branch=main)](https://github.com/migraf/fhir-kindling/actions/workflows/main_ci.yml)[![codecov](https://codecov.io/gh/migraf/fhir-kindling/branch/main/graph/badge.svg?token=FKQENFXACB)](https://codecov.io/gh/migraf/fhir-kindling)[![PyPI version](https://badge.fury.io/py/fhir-kindling.svg)](https://badge.fury.io/py/fhir-kindling)# :fire: FHIR KindlingCRUD library for fhir servers, with resource validation and parsing powered bythe [pydantic](https://github.com/samuelcolvin/pydantic)models created by [fhir.resources](https://github.com/nazrulworld/fhir.resources). More details inthe [Documentation](https://migraf.github.io/fhir-kindling/).## Features- Create, Read, Update, Delete resources using a FHIR server's REST API- Transfer resources between servers while maintaining referential integrity using server-given IDs- Bundle creation, validation and data management on a FHIR server via the REST API- Supports Hapi, Blaze and IBM FHIR servers- CSV serialization of query results- Synthetic data generation and## InstallationInstall the package using pip:```shellpip install fhir-kindling --user```## Usage### Connecting to a FHIR server```pythonfrom fhir_kindling import FhirServer# Connect with basic auth basic_auth_server = FhirServer(&quot;https://fhir.server/fhir&quot;, username=&quot;admin&quot;, password=&quot;admin&quot;)# Connect with static tokentoken_server = FhirServer(&quot;https://fhir.server/fhir&quot;, token=&quot;your_token&quot;)# Connect using oauth2/oidcoidc_server = FhirServer(&quot;https://fhir.server/fhir&quot;, client_id=&quot;client_id&quot;, client_secret=&quot;secret&quot;,                         oidc_provider_url=&quot;url&quot;)# Print the server's capability statementprint(basic_auth_server.capabilities)```### Query resources from the server#### Basic resource query```pythonfrom fhir_kindling import FhirServerfrom fhir.resources.patient import Patient# Connect using oauth2/oidcoidc_server = FhirServer(&quot;https://fhir.server/fhir&quot;, client_id=&quot;client_id&quot;, client_secret=&quot;secret&quot;,                         oidc_provider_url=&quot;url&quot;)# query all patients on the serverquery = oidc_server.query(Patient, output_format=&quot;json&quot;).all()print(query.response)# Query resources based on name of resourcequery = oidc_server.query(&quot;Patient&quot;, output_format=&quot;json&quot;).all()print(query.response)```#### Query with filtersFiltering the targeted resource is done using the `where` method on the query object. The filter is created by definingthe target field, the comparison operator and the value to compare.```pythonfrom fhir_kindling import FhirServerserver = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)query = server.query(&quot;Patient&quot;).where(field=&quot;birthDate&quot;, operator=&quot;gt&quot;, value=&quot;1980&quot;).all()```#### Including related resources in the queryResources that reference or are referenced by resources targeted by the query can be included in the response usingthe `include` method on the query object.```python# server initialization omitted# get the patients along with the queried conditionsquery_patient_condition = server.query(&quot;Condition&quot;).include(resource=&quot;Condition&quot;, reference_param=&quot;subject&quot;).all()# get the conditions for a patientquery_patient_condition = server.query(&quot;Patient&quot;)query_patient_condition = query_patient_condition.include(resource=&quot;Condition&quot;, reference_param=&quot;subject&quot;, reverse=True)response = query_patient_condition.all()```#### Query resources by referenceIf you know the id and resource type of the resource you want to query, you can use the `get` method for a singlereferencefor a list of references use `get_many`. The passed references should follow the format of `&lt;resource_type&gt;/&lt;id&gt;`.```python# server initialization omittedpatient = server.get(&quot;Patient/123&quot;)patients = server.get_many([&quot;Patient/123&quot;, &quot;Patient/456&quot;])```### Add resources to the serverResources can be added to the server using the `add` method on the server object. Lists of resources can be added using'add_all'.```pythonfrom fhir_kindling import FhirServerfrom fhir.resources.patient import Patient# Connect to the serverserver = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)# add a single resourcepatient = Patient(name=[{&quot;family&quot;: &quot;Smith&quot;, &quot;given&quot;: [&quot;John&quot;]}])response = server.add(patient)# add multiple resourcespatients = [Patient(name=[{&quot;family&quot;: f&quot;Smith_{i}&quot;, &quot;given&quot;: [&quot;John&quot;]}]) for i in range(10)]response = server.add_all(patients)```### Deleting/Updating resourcesResources can be deleted from the server using the `delete` method on the server object, it takes as input eitherreferences to the resources or the resources itself.  Similarly the `update` method can be used to update the resources on the server, by passing a list of updated resources.```pythonfrom fhir_kindling import FhirServerfrom fhir.resources.patient import Patient# Connect to the serverserver = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)# add some patientspatients = [Patient(name=[{&quot;family&quot;: f&quot;Smith_{i}&quot;, &quot;given&quot;: [&quot;John&quot;]}]) for i in range(10)]response = server.add_all(patients)# change the name of the patientsfor patient in response.resources:    patient.name[0].given[0] = &quot;Jane&quot;# update the patients on the serverupdated_patients = server.update(resources=response.resources)# delete based on referenceserver.delete(references=response.references[:5])# delete based on resourcesserver.delete(resources=response.resources[5:])```### Transfer resources between serversTransferring resources between servers is done using the `transfer` method on the server object. Using this methodserver assigned ids are used for transfer and referential integrity is maintained.  This method will also attempt to get all the resources that are referenced by the resources being transferred from theoriginserver and transfer them to the destination server as well.```pythonfrom fhir_kindling import FhirServer# initialize the two serversserver_1 = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)server_2 = FhirServer(api_address=&quot;https://fhir.server/fhir&quot;)# query some resources from server 1conditions = server_1.query(&quot;Condition&quot;).limit(10)# transfer the resources to server 2response = server_1.transfer(server_2, conditions)```## PerformanceThis library performs request at least 1.5 times faster than other popular fhir libraries.See [Benchmarks](benchmarks/README.md) for a more detailed description of the benchmarks.![Query Results](benchmarks/results/query_plot.png)## CreditsThis package was created with Cookiecutter andthe [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter) project template.# Change LogAll notable changes to this project will be documented in this file.The format is based on [Keep a Changelog](http://keepachangelog.com/)and this project adheres to [Semantic Versioning](http://semver.org/).## [0.9.0] - 2022-07-21Asynchronous API for CRUD operations against fhir servers.### Changed- Switched http client library from requests [httpx](https://www.python-httpx.org/)- removed requests-oauthlib in favor of authlib for oauth2 authentication flow- `FHIRQuery` class renamed to `FHIRQuerySync` to allow for sync and async version- moved resolving response pagination from `QueryReponse` to the sync and async query classes- getting multiple resources via `server.get_many()` now uses proper batch requests### Added- `FHIRQueryAsync` class for async queries against a server- asynchronous counterparts for CRUD operations in the `FHIRServer` class using the same API:  - `query_async()`  - `raw_query_async()`  - `get_async()`  - `get_many_async()`  - `add_async()`  - `add_all_async()`  - `add_bundle_async()`  - `update_async()`  - `delete_async()`## [0.8.0] - 2022-03-18Resource transfer between servers and querying resources by reference.  `get`, `get_many` for querying resource by reference`server.transfer(other_server, query_result)` for transferring resources### Changed- `FhirServer` constructor now accepts two additional optional parameters, `auth` and `headers` that will be used for the  instance's `requests` session.### Added - [x] `server.get(reference)` get a single resource from the server, based on relative path/reference. - [x] `server.get_many(references)` get multiple resources from the server, based on relative path/reference. - [x] `server.transfer(other_server, query)` transfer resources matching the query from one server to another. Also requests   resources referenced by the resources matching to maintain referential integrity on the new server. - [x] `query.all(page_callback=callback, count=50)` callback functions and count for pagination resolving in query responses.## [0.7.0] - 2022-01-31Update a list of resources on the server. CSV/Pandas serialization of resources and query responses.### Added - [x] `server.update(resources)` which updates a list of resources stored on the server - [x] Recursive resource flattening for csv/tabular serialization - [x] `query_response.save(path, format=&quot;csv)` to save the results of a query to csv### Changed- `server.query(params)` the query method now directly accepts query parameters## [0.6.0] - 2022-01-19Query Response with included resources. Reworked Generators### Added - [x] Query response now stores and parses included resources - [x] Generator parameters for Resources and Fields - [x] Field generators for generating resource fields based on probabilistic choices or a generator function - [x] Resource generator field values based on static value or list - [x] Patient based data set generator ### Changed- Query interface `where, include, has` now can add query parameters based on method arguments or parameter objects.## [0.5.0] - 2021-11-12Query Parameters, include/revinclude, reverse chaining.  ### Added - [x] Query Parameters classes, for regular queries, including resources and reverse chaining - [x] Support for `_include` and `_revinclude` via `query.include()` - [x] Reverse chaining support via `query.has()` - [x] Parsing parameters from given URL/ coverting parameters to query url### Changed- Query interface `where, include, has` now can add query parameters based on method arguments or parameter objects.## [0.4.0] - 2021-11-12Server summary, deleting resources, removed initial CLI.### Added- [x] Getting a list of all resources on the server based on capabilities- [x] Plots for server and resource summary- [x] `server.delete()` method to delete resources based on ids## [0.3.0] - 2021-10-30Response classes, reference parsing and basic xml support### AddedXML output format and resolving xml pagination. Response objects containig resources and references### ChangedOutsourced resolving of response pagination into response classes### Fixed## [0.2.0] - 2021-09-18FHIR server and query API### AddedClasses for fhir servers and queries. Oauth2/OIDC support.### ChangedMoved location of cli### Fixed## [0.1.0] - 2021-08-24Initial cli### Added### Changed### FixedHashing order guarantees the right index of the query.json file in the hash</longdescription>
</pkgmetadata>