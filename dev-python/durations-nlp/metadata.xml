<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># durations_nlp[![CircleCI](https://circleci.com/gh/timwedde/durations_nlp.svg?style=svg)](https://circleci.com/gh/timwedde/durations_nlp)[![codecov](https://codecov.io/gh/timwedde/durations_nlp/branch/master/graph/badge.svg)](https://codecov.io/gh/timwedde/durations_nlp)[![Downloads](https://pepy.tech/badge/durations-nlp)](https://pepy.tech/project/durations-nlp)A python durations parsing library, providing a straight-forward API to parse duration string representations such as `1d`, `1 day 2 hours` or `2 days 3h 26m 52s` and convert them to numeric values.## What and WhyIt's easier and more straight forward to read a duration expressed in natural language (at least for a human), as an expression rather than an amount. When writing configuration files for example:```yamlinterval: 3 hours```is easier to understand for a human than```yamlinterval: 10800  # seconds```## Installation`durations_nlp` can be installed via pip:```bash$ pip install durations_nlp```## UsageTo parse a duration string representation, just instantiate a Duration object and let it work for you. A Duration representation is composed of as many ``&lt;value&gt;&lt;scale&gt;`` pairs as you need to express it:* A value is an integer amount.* A scale is a duration unit in it's short or long form (both singular and plural).* Duration pairs can be separated with sep characters and expressions such as `,` or `and`### Example Input* `1d`* `2 days`* `2 days and 4 hours`* `4M, 22d and 6hours`### Scales Reference* Century: `c`, `century`, `centuries`* Decade: `D`, `decade`, `decades`* Year: `y`, `year`, `Year`* Month: `M`, `month`, `months`* Week: `w`, `week`, `weeks`* Day: `d`, `day`, `days`* Hour: `h`, `hour`, `hours`* Minute:`m`, `minute`, `minutes`* Second: `s`, `second`, `seconds`* Millisecond: `ms`, `millisecond`, `milliseconds`### Usage Example```pythonfrom durations_nlp import Durationone_hour = &quot;1hour&quot;one_hour_duration = Duration(one_hour)one_hour_duration.to_seconds()# &gt;&gt;&gt; 3600.0one_hour_duration.to_minutes()# &gt;&gt;&gt; 60.0# You can even compose durations in their short# and long variationstwo_days_three_hours = &quot;2 days, 3h&quot;two_days_three_hours_duration = Duration(two_days_three_hours)two_days_three_hours_duration.to_seconds()# &gt;&gt;&gt; 183600.0two_days_three_hours_duration.to_hours()# &gt;&gt;&gt; 51.0```</longdescription>
</pkgmetadata>