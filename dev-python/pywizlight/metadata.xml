<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Upload Python Package](https://github.com/sbidy/pywizlight/workflows/Upload%20Python%20Package/badge.svg)&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt;[![All Contributors](https://img.shields.io/badge/all_contributors-18-orange.svg?style=flat-square)](#contributors-)&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt;![Update Docs](https://github.com/sbidy/pywizlight/workflows/Update%20Docs/badge.svg)[![Lint](https://github.com/sbidy/pywizlight/actions/workflows/lint.yml/badge.svg)](https://github.com/sbidy/pywizlight/actions/workflows/lint.yml)[![codecov][code-cover-shield]][code-coverage]# pywizlightA Python connector for [WiZ](https://www.wizconnected.com/en/consumer/) devices.## Install```bashpip install pywizlight```**Note:** Requires Python version `&gt;=3.7`.### Fedora/CentOSOn a Fedora-based system or on a CentOS/RHEL 8 machine which has EPEL enabled, as[`pywizlight`](https://src.fedoraproject.org/rpms/python-pywizlight) is present in theFedora Package Collection.```bashsudo dnf -y install python3-pywizlight```### NixOSFor NixOS and Nix the latest release of `pywizlight` is usually available in the [`unstable`](https://search.nixos.org/packages?channel=unstable&amp;query=pywizlight)channel. Stable releases might ship older versions of `pywizlight`.```bashnix-env -iA nixos.python37Packages.pywizlight```## Contributors&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt;&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable --&gt;&lt;table&gt;  &lt;tr&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://mtnspring.org&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/223277?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Seth Nickell&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=snickell&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/daanzu&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4319503?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;David Zurow&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=daanzu&quot; title=&quot;Documentation&quot;&gt;ðŸ“–&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/eibanez&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/438494?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Eduardo Ibanez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=eibanez&quot; title=&quot;Documentation&quot;&gt;ðŸ“–&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/angadsingh&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1623026?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Angad Singh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=angadsingh&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://fabian-affolter.ch/blog/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/116184?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Fabian Affolter&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=fabaff&quot; title=&quot;Documentation&quot;&gt;ðŸ“–&lt;/a&gt; &lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=fabaff&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://redaxmedia.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1835397?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Henry Ruhs&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=redaxmedia&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.panu.it/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/2248402?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Alberto Panu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=bigjohnson&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/skitterrusty&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/71942600?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;skitterrusty&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=skitterrusty&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/mots&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/26517?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Mathias Roth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=mots&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/durnezj&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11504333?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;durnezj&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=durnezj&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Dirty-No&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/54525684?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;NoÃ«lle&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=Dirty-No&quot; title=&quot;Documentation&quot;&gt;ðŸ“–&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://linkedin.com/in/scriptsrc&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/8009126?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Patrick Kelley&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=scriptsrc&quot; title=&quot;Documentation&quot;&gt;ðŸ“–&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://ellismichael.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1312141?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Ellis Michael&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=emichael&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/SvbZ3r0&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/57280279?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Gughan Ravikumar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=SvbZ3r0&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/CharlotteCross1998&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/29734551?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Charlotte&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=CharlotteCross1998&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://akx.github.io/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/58669?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;Aarni Koskela&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=akx&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/UH-60&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/4968133?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;UH-60&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=UH-60&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/bdraco&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/663432?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;/&gt;&lt;br /&gt;&lt;sub&gt;&lt;b&gt;J. Nick Koston&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/sbidy/pywizlight/commits?author=bdraco&quot; title=&quot;Code&quot;&gt;ðŸ’»&lt;/a&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;&lt;!-- markdownlint-restore --&gt;&lt;!-- prettier-ignore-end --&gt;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;## Discover bulbs via CLITo find bulbs via cli you can use the following:```bashpython -m pywizlight.cli discover```## Example```pythonimport asynciofrom pywizlight import wizlight, PilotBuilder, discoveryasync def main():    &quot;&quot;&quot;Sample code to work with bulbs.&quot;&quot;&quot;    # Discover all bulbs in the network via broadcast datagram (UDP)    # function takes the discovery object and returns a list of wizlight objects.    bulbs = await discovery.discover_lights(broadcast_space=&quot;192.168.1.255&quot;)    # Print the IP address of the bulb on index 0    print(f&quot;Bulb IP address: {bulbs[0].ip}&quot;)    # Iterate over all returned bulbs    for bulb in bulbs:        print(bulb.__dict__)        # Turn off all available bulbs        # await bulb.turn_off()    # Set up a standard light    light = wizlight(&quot;192.168.1.27&quot;)    # Set up the light with a custom port    #light = wizlight(&quot;your bulb's IP address&quot;, port=12345)    # The following calls need to be done inside an asyncio coroutine    # to run them from normal synchronous code, you can wrap them with    # asyncio.run(..).    # Turn the light on into &quot;rhythm mode&quot;    await light.turn_on(PilotBuilder())    # Set bulb brightness    await light.turn_on(PilotBuilder(brightness = 255))    # Set bulb brightness (with async timeout)    timeout = 10    await asyncio.wait_for(light.turn_on(PilotBuilder(brightness = 255)), timeout)    # Set bulb to warm white    await light.turn_on(PilotBuilder(warm_white = 255))    # Set RGB values    # red to 0 = 0%, green to 128 = 50%, blue to 255 = 100%    await light.turn_on(PilotBuilder(rgb = (0, 128, 255)))    # Get the current color temperature, RGB values    state = await light.updateState()    print(state.get_colortemp())    red, green, blue = state.get_rgb()    print(f&quot;red {red}, green {green}, blue {blue}&quot;)    # Start a scene    await light.turn_on(PilotBuilder(scene = 4)) # party    # Get the name of the current scene    state = await light.updateState()    print(state.get_scene())    # Get the features of the bulb    bulb_type = await bulbs[0].get_bulbtype()    print(bulb_type.features.brightness) # returns True if brightness is supported    print(bulb_type.features.color) # returns True if color is supported    print(bulb_type.features.color_tmp) # returns True if color temperatures are supported    print(bulb_type.features.effect) # returns True if effects are supported    print(bulb_type.kelvin_range.max) # returns max kelvin in INT    print(bulb_type.kelvin_range.min) # returns min kelvin in INT    print(bulb_type.name) # returns the module name of the bulb    # Turn the light off    await light.turn_off()    # Do operations on multiple lights in parallel    #bulb1 = wizlight(&quot;&lt;your bulb1 ip&gt;&quot;)    #bulb2 = wizlight(&quot;&lt;your bulb2 ip&gt;&quot;)    # --- DEPRECATED in 3.10 see [#140](https://github.com/sbidy/pywizlight/issues/140)    # await asyncio.gather(bulb1.turn_on(PilotBuilder(brightness = 255)),    #    bulb2.turn_on(PilotBuilder(warm_white = 255)))    # --- For &gt;3.10 await asyncio.gather() from another coroutine    # async def turn_bulbs_on(bulb1, bulb2):    #    await asyncio.gather(bulb1.turn_on(PilotBuilder(warm_white=255)), bulb2.turn_on(PilotBuilder(warm_white=255)))    #  def main:    #    asyncio.run(async turn_bulbs_on(bulb1, bulb2))loop = asyncio.get_event_loop()loop.run_until_complete(main())```## CLI`wizlight` is a command-line tool to perform basic interactions with bulbs.```console$ wizlightUsage: wizlight [OPTIONS] COMMAND [ARGS]...  Simple command-line tool to interact with Wizlight bulbs.Options:  --version  Show the version and exit.  --help     Show this message and exit.Commands:  discover  Discover bulb in the local network.  off       Turn the bulb off.  on        Turn the bulb on.  state     Get the current state from the given bulb.```## DiscoveryThe discovery works with a UDP Broadcast request and collects all bulbs in the network.## Bulb paramters (UDP RAW)- **sceneId** - calls one of the predefined scenes (int from 1 to 32) [List of names in code](https://github.com/sbidy/pywizlight/blob/master/pywizlight/scenes.py)- **speed** - sets the color changing speed in percent- **dimming** - sets the dimmer of the bulb in percent- **temp** - sets the color temperature in kelvins- **r** - red color range 0-255- **g** - green color range 0-255- **b** - blue color range 0-255- **c** - cold white range 0-255- **w** - warm white range 0-255- **id** - the bulb id- **state** - whether it's on or off- **schdPsetId** - rhythm id of the room## Async I/OFor async I/O this component uses Python's built-in asyncio DatagramTransport, which allows completely non-blocking UDP transport.## Classes`wizlight(ip)`: Creates an instance of a WiZ Light Bulb. Constructed with the IP addCancel changesress of the bulb.### Instance variablesFirst you need to fetch the state by calling `light.updateState()`.After that all states can be fetched from `light.state`, which is a `PilotParser` object.`PilotParser.get_brightness()`gets the value of the brightness 0-255`PilotParser.get_rgb()` gets the rgbW color state of the bulb`PilotParser.get_colortemp()` gets the color temperature of the bulb`PilotParser.get_warm_white/get_cold_white()` gets the current warm/cold setting (not supported by original Philips Wiz bulbs)`PilotParser.get_scene()` gets the current scene name`PilotParser.get_state()` returns True/False. True = on, False = off### Methods`getBulbConfig(self)` returns the hardware configuration of the bulb`updateState(self)` gets the current bulb state from the light using `sendUDPMessage` and sets it to `self.state``lightSwitch(self)` toggles the light bulb on or off like a switch`getMAC(self)` returns the MAC address of the bulb. Can be used as a unique ID`sendUDPMessage(self, message, timeout = 60, send_interval = 0.5, max_send_datagrams = 100):` sends the UDP message to the bulb. Since UDP can lose packets, and your light might be a long distance away from the router, we continuously keep sending the UDP command datagram until there is a response from the bulb. In tests this worked way better than just sending once and waiting for a timeout. You can set the async operation timeout using `timeout`, set the time interval to sleep between continuous UDP sends using `send_interval` and the maximum number of continuous pings to send using `max_send_datagrams`. It is already hardcoded to a lower value for `setPilot` (set light state) vs `getPilot` (fetch light state) to avoid flickering the light.`turn_off(self)` turns the light off`turn_on(PilotBuilder)` turns the light on. This takes a `PilotBuilder` object, which can be used to set all the parameters programmatically - rgb, color temperature, brightness, etc. To set the light to rhythm mode, create an empty `PilotBuilder`.## Bulb methods (UDP native):- **getSystemConfig** - gets the current system configuration - no parameters required- **syncPilot** - sent by the bulb as heartbeats- **getPilot** - gets the current bulb state - no parameters required- **setPilot** - used to tell the bulb to change color/temp/state- **Pulse** - uncertain of purpose- **Registration** - used to &quot;register&quot; with the bulb: This notifies the bulb if you want it to send you heartbeat sync packets### Sync functions:- syncUserConfig- syncPilot - {&quot;method&quot;:&quot;syncPilot&quot;,&quot;env&quot;:&quot;pro&quot;,&quot;params&quot;:{&quot;mac&quot;:&quot;ABCABCABC&quot;,&quot;rssi&quot;:-71,&quot;src&quot;:&quot;udp&quot;,&quot;state&quot;:true,&quot;sceneId&quot;:0,&quot;temp&quot;:6500,&quot;dimming&quot;:62}}- syncSchdPset- syncBroadcastPilot- syncSystemConfig- syncConfig- syncAlarm### Set functions:- pulse - {&quot;method&quot;:&quot;pulse&quot;, &quot;params&quot;:{&quot;delta&quot;:-15,&quot;duration&quot;:300}}- registration - {&quot;method&quot;:&quot;registration&quot;,&quot;id&quot;:105, &quot;params&quot;:{&quot;phoneIp&quot;:&quot;10.0.0.0&quot;,&quot;phoneMac&quot;:&quot;aaaaaaaaaaaa&quot;,&quot;register&quot;:true}}- setUserConfig- setSystemConfig- setDevInfo- setSchd- setSchdPset- setWifiConfig- reset- setFavs- setState- setPilot### Get functions- getPilot- getUserConfig- getSystemConfig- getWifiConfig- reboot- getDevInfo### Error States and Returns- Parse error- Invalid Request- Method not found- Invalid params- Internal error- Success## Example UDP requestsSend message to the bulb:`{&quot;method&quot;:&quot;setPilot&quot;,&quot;params&quot;:{&quot;r&quot;:255,&quot;g&quot;:255,&quot;b&quot;:255,&quot;dimming&quot;:50}}`Response: `{&quot;method&quot;:&quot;setPilot&quot;,&quot;env&quot;:&quot;pro&quot;,&quot;result&quot;:{&quot;success&quot;:true}}`Get state of the bulb:`{&quot;method&quot;:&quot;getPilot&quot;,&quot;params&quot;:{}}`Responses:custom color mode:`{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -60, 'src': '', 'state': True, 'sceneId': 0, 'temp': 5075, 'dimming': 47}}`scene mode:`{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -65, 'src': '', 'state': True, 'sceneId': 12, 'speed': 100, 'temp': 4200, 'dimming': 47}}`rhythm mode:`{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -63, 'src': '', 'state': True, 'sceneId': 14, 'speed': 100, 'dimming': 100, 'schdPsetId': 9}}`[code-coverage]: https://codecov.io/gh/sbidy/pywizlight[code-cover-shield]: https://codecov.io/gh/sbidy/pywizlight/branch/master/graph/badge.svg</longdescription>
</pkgmetadata>