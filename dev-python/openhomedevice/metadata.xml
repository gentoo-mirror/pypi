<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># openhomedeviceLibrary to provide an API to an existing openhome device. The device needs to have been discovered first by something like netdisco (https://github.com/home-assistant/netdisco).The underlying UPnP client library used is https://github.com/StevenLooman/async_upnp_client* Tested against [Linn Products Ltd](https://www.linn.co.uk/uk/) devices running Davaar 80 (thought expected to work on earlier variants)* Tested against [OpenHome Player](http://openhome.org/) devices## Installation`pip install openhomedevice`## API### Constructor```pythondevice = Device(location)await device.init()```### Methods#### Control```python    await set_standby(standbyRequested) #bool    await play() #starts playback    await play_media(track_details) #start playing `track_details`    await stop() #stops playback    await pause() #pauses playback    await skip(offset) #positive or negative integer    await set_volume(volume_level) #positive number    await increase_volume() #increase volume by 1    await decrease_volume() #decrease volume by 1    await set_mute(muteRequested) #bool    await set_source(index) #positive integer (use Sources() for indices)    await invoke_pin(index) #positive integer (use Pins() for indices)```#### Firmware```python    await check_latest_firmware() #check for the latest firmware    await update_firmware() #update the device firmware    await software_status() #returns a dictionary with information about the current software```#### Informational```python    uuid() #Unique identifier    manufacturer() #Manufacturer    model_name() #Model Name    friendly_name() #Friendly Name    await name() #Name of device    await room() #Name of room    await is_in_standby() #returns true if in standby    await transport_state() #returns one of Stopped, Playing, Paused or Buffering.    volume_enabled #property true if the volume service is available    await volume_level() #returns the volume setting or None if disabled    await is_muted() #returns true if muted or None if disabled    await source() #returns the currently connected source as a dictionary    await sources() #returns an array of source dictionaries with indices    await track_info() #returns a track dictionary    await pins() #returns an array of pin dictionaries with indices    pins_enabled #property true if the pins service is available```##### Source Response```python{    'type': 'Playlist',    'name': 'Playlist'}```##### Sources Response```python[    { 'index': 0, 'type': 'Playlist', 'name': 'Playlist' },    { 'index': 1, 'type': 'Radio', 'name': 'Radio' },    { 'index': 3, 'type': 'Receiver', 'name': 'Songcast' },    { 'index': 6, 'type': 'Analog', 'name': 'Front Aux' }]```##### Pins Response```python[  {'index': 1, 'title': 'Playstation 4', 'artworkUri': 'external:///source?type=Hdmi&amp;systemName=HDMI3'}  {'index': 4, 'title': 'Classic FM', 'artworkUri': 'http://cdn-profiles.tunein.com/s8439/images/logoq.png?t=1'}  {'index': 6, 'title': 'Chillout Playlist', 'artworkUri': 'http://media/artwork/chillout-playlist.png'}]```##### TrackInfo Response```python{  &quot;mimeType&quot;: &quot;http-get:*:audio/x-flac:DLNA.ORG_OP=01;DLNA.ORG_FLAGS=01700000000000000000000000000000&quot;,  &quot;rating&quot;: None,  &quot;performer&quot;: [    &quot;Fahmi Alqhai, Performer - Johann Sebastian Bach, Composer&quot;  ],  &quot;bitDepth&quot;: 16,  &quot;channels&quot;: 2,  &quot;disc&quot;: None,  &quot;composer&quot;: [],  &quot;year&quot;: 2017,  &quot;duration&quot;: 460,  &quot;author&quot;: [],  &quot;albumArtist&quot;: [],  &quot;type&quot;: &quot;object.item.audioItem.musicTrack&quot;,  &quot;narrator&quot;: [],  &quot;description&quot;: None,  &quot;conductor&quot;: [],  &quot;albumArtwork&quot;: &quot;http://static.qobuz.com/images/covers/58/20/8424562332058_600.jpg&quot;,  &quot;track&quot;: 2,  &quot;tracks&quot;: None,  &quot;artwork&quot;: None,  &quot;genre&quot;: [    &quot;Klassiek&quot;  ],  &quot;publisher&quot;: &quot;Glossa&quot;,  &quot;albumGenre&quot;: [    &quot;Klassiek&quot;  ],  &quot;artist&quot;: [    &quot;Fahmi Alqhai&quot;  ],  &quot;bitRate&quot;: None,  &quot;albumTitle&quot;: &quot;The Bach Album&quot;,  &quot;uri&quot;: &quot;http://192.168.0.110:58050/stream/audio/b362f0f7a1ff33b176bcf2adde75af96.flac&quot;,  &quot;discs&quot;: None,  &quot;published&quot;: None,  &quot;title&quot;: &quot;Violin Sonata No. 2 in A Minor, BWV 1003 (Arr. for Viola da gamba) : Violin Sonata No. 2 in A Minor, BWV 1003 (Arr. for Viola da gamba): II. Fuga&quot;,  &quot;sampleRate&quot;: 44100}```##### SoftwareStatus responseWhen an update is available:```python{   &quot;status&quot;:&quot;update_available&quot;,   &quot;current_software&quot;:{      &quot;version&quot;:&quot;4.99.491&quot;,      &quot;topic&quot;:&quot;main&quot;,      &quot;channel&quot;:&quot;release&quot;   },   &quot;update_info&quot;:{      &quot;legal&quot;:{         &quot;licenseurl&quot;:&quot;http://products.linn.co.uk/VersionInfo/licenseV2.txt&quot;,         &quot;privacyurl&quot;:&quot;https://www.linn.co.uk/privacy&quot;,         &quot;privacyuri&quot;:&quot;https://products.linn.co.uk/VersionInfo/PrivacyV1.json&quot;,         &quot;privacyversion&quot;:1      },      &quot;releasenotesuri&quot;:&quot;http://docs.linn.co.uk/wiki/index.php/ReleaseNotes&quot;,      &quot;updates&quot;:[         {            &quot;channel&quot;:&quot;release&quot;,            &quot;date&quot;:&quot;07 Jun 2023 12:29:48&quot;,            &quot;description&quot;:&quot;Release build version 4.100.502 (07 Jun 2023 12:29:48)&quot;,            &quot;exaktlink&quot;:&quot;3&quot;,            &quot;manifest&quot;:&quot;https://cloud.linn.co.uk/update/components/836/4.100.502/manifest.json&quot;,            &quot;topic&quot;:&quot;main&quot;,            &quot;variant&quot;:&quot;836&quot;,            &quot;version&quot;:&quot;4.100.502&quot;         }      ],      &quot;exaktUpdates&quot;:[]   }}```When the system is on the latest firmware:```python{   &quot;status&quot;:&quot;on_latest&quot;,   &quot;current_software&quot;:{      &quot;version&quot;:&quot;4.100.502&quot;,      &quot;topic&quot;:&quot;main&quot;,      &quot;channel&quot;:&quot;release&quot;   }}```##### Upgrading FirmwareUse this to check if an update is required and then instruct the device to apply it```python    await openhomeDevice.check_latest_firmware()    await openhomeDevice.update_firmware()```##### Playing A TrackUse this to play a short audio track, a podcast Uri or radio station Uri. The audio will be played using the radio source of the device. The `trackDetails` object should be the same as the one described in the `TrackInfo` section above.```python    track_details = {}    track_details[&quot;uri&quot;] = &quot;http://opml.radiotime.com/Tune.ashx?id=s122119&quot;    track_details[&quot;title&quot;] = 'Linn Radio (Eclectic Music)'    track_details[&quot;albumArtwork&quot;] = 'http://cdn-radiotime-logos.tunein.com/s122119q.png'    openhomeDevice.PlayMedia(track_details)```## Example```pythonpython3 demo.py```## Running Tests```bashPYTHONPATH=. pytest ./tests/*```## Uploading PackageFollowing guide from https://packaging.python.org/tutorials/packaging-projects/Update version in `setup.py````shpython3 setup.py sdisttwine upload dist/*```</longdescription>
</pkgmetadata>