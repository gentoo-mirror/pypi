<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>--------------------------------------------------------------pox: utilities for filesystem exploration and automated builds--------------------------------------------------------------About Pox=========``pox`` provides a collection of utilities for navigating and manipulatingfilesystems. This module is designed to facilitate some of the low leveloperating system interactions that are useful when exploring a filesystemon a remote host, where queries such as *&quot;what is the root of the filesystem?&quot;*,*&quot;what is the user's name?&quot;*, and *&quot;what login shell is preferred?&quot;* becomeessential in allowing a remote user to function as if they were logged inlocally. While ``pox`` is in the same vein of both the ``os`` and ``shutil``builtin modules, the majority of its functionality is unique and complimentsthese two modules.``pox`` provides Python equivalents of several unix shell commands such as``which`` and ``find``. These commands allow automated discovery of what hasbeen installed on an operating system, and where the essential tools arelocated. This capability is useful not only for exploring remote hosts,but also locally as a helper utility for automated build and installation.Several high-level operations on files and filesystems are also provided.Examples of which are: finding the location of an installed Python package,determining if and where the source code resides on the filesystem, anddetermining what version the installed package is.``pox`` also provides utilities to enable the abstraction of commands sentto a remote filesystem.  In conjunction with a registry of environmentvariables and installed utilites, ``pox`` enables the user to interact witha remote filesystem as if they were logged in locally. ``pox`` is part of ``pathos``, a Python framework for heterogeneous computing.``pox`` is in active development, so any user feedback, bug reports, comments,or suggestions are highly appreciated.  A list of issues is located at https://github.com/uqfoundation/pox/issues, with a legacy list maintained at https://uqfoundation.github.io/project/pathos/query.Major Features==============``pox`` provides utilities for discovering the user's environment:    - return the user's name, current shell, and path to user's home directory    - strip duplicate entries from the user's ``$PATH``    - lookup and expand environment variables from ``${VAR}`` to ``value````pox`` also provides utilities for filesystem exploration and manipulation:    - discover the path to a file, exectuable, directory, or symbolic link     - discover the path to an installed package    - parse operating system commands for remote shell invocation    - convert text files to platform-specific formattingCurrent Release===============The latest released version of ``pox`` is available from:    https://pypi.org/project/pox``pox`` is distributed under a 3-clause BSD license.Development Version===================You can get the latest development version with all the shiny new features at:    https://github.com/uqfoundationIf you have a new contribution, please submit a pull request.Installation============``pox`` can be installed with ``pip``::    $ pip install poxRequirements============``pox`` requires:    - ``python`` (or ``pypy``), **&gt;=3.7**    - ``setuptools``, **&gt;=42**Basic Usage===========``pox`` includes some basic utilities to connect to and automate explorationon local and remote filesystems. There are some basic functions to discoverimportant locations::    &gt;&gt;&gt; import pox    &gt;&gt;&gt; pox.homedir()    '/Users/mmckerns'    &gt;&gt;&gt; pox.rootdir()    '/'or, you can interact with local and global environment variables::    &gt;&gt;&gt; local = {'DEV':'${HOME}/dev', 'FOO_VERSION':'0.1', 'BAR_VERSION':'1.0'}    &gt;&gt;&gt; pox.getvars('${DEV}/lib/foo-${FOO_VERSION}', local)    {'DEV': '${HOME}/dev', 'FOO_VERSION': '0.1'}    &gt;&gt;&gt; pox.expandvars('${DEV}/lib/foo-${FOO_VERSION}', local)    '${HOME}/dev/lib/foo-0.1'    &gt;&gt;&gt; pox.expandvars('${HOME}/dev/lib/foo-0.1')    '/Users/mmckerns/dev/lib/foo-0.1'    &gt;&gt;&gt; pox.env('HOME')    {'HOME': '/Users/mmckerns'}and perform some basic search functions::    &gt;&gt;&gt; pox.find('python3.9', recurse=5, root='/opt')    ['/opt/local/bin/python3.9']    &gt;&gt;&gt; pox.which('python3.9')    '/opt/local/bin/python3.9'``pox`` also has a specialized `which` command just for Python::    &gt;&gt;&gt; pox.which_python()    '/opt/local/bin/python3.9'    &gt;&gt;&gt; pox.which_python(lazy=True, version=True)    '`which python3.9`'Any of the ``pox`` functions can be launched from the command line,which facilitates executing commands across parallel and distributed pipes(such as `pathos.connection.Pipe` and `pathos.secure.connection.Pipe`)::    &gt;&gt;&gt; import pathos    &gt;&gt;&gt; p = pathos.connection.Pipe()    &gt;&gt;&gt; p(command=&quot;python -m pox 'which_python()'&quot;)    &gt;&gt;&gt; p.launch()    &gt;&gt;&gt; print(p.response())    '/usr/bin/python'    &gt;&gt;&gt; p.kill()The functions in ``pox`` that help make interactions with filesystems andenvironment varialbles programmatic and abstract become especially relevantwhen trying to execute complex commands remotely. More Information================Probably the best way to get started is to look at the documentation athttp://pox.rtfd.io. Also see ``pox.tests`` for a set of scripts that demonstratehow ``pox`` can be used to interact with the operating system. You can run thetest suite with ``python -m pox.tests``.  All ``pox`` utilitiescan be launched directly from an operating system terminal, using the ``pox``script (or with ``python -m pox``).  The source code is also generally welldocumented, so further questions may be resolved by inspecting the codeitself.  Please feel free to submit a ticket on github, or ask aquestion on stackoverflow (**@Mike McKerns**).If you would like to share how you use ``pox`` in your work, please send anemail (to **mmckerns at uqfoundation dot org**).Citation========If you use ``pox`` to do research that leads to publication, we ask that youacknowledge use of ``pox`` by citing the following in your publication::    M.M. McKerns, L. Strand, T. Sullivan, A. Fang, M.A.G. Aivazis,    &quot;Building a framework for predictive science&quot;, Proceedings of    the 10th Python in Science Conference, 2011;    http://arxiv.org/pdf/1202.1056    Michael McKerns and Michael Aivazis,    &quot;pathos: a framework for heterogeneous computing&quot;, 2010- ;    https://uqfoundation.github.io/project/pathosPlease see https://uqfoundation.github.io/project/pathos orhttp://arxiv.org/pdf/1202.1056 for further information.</longdescription>
</pkgmetadata>