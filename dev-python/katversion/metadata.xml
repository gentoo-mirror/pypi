<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>katversion==========The *katversion* package provides proper versioning for Python packages asdictated by their (git) source repositories. The resulting version string isbaked into the installed package's ``__init__.py`` file for guaranteedtraceability when imported (no dependency on what pkg_resources thinks!).Version String Format---------------------*katversion* generates a version string for your SCM package that complies with`PEP 440 &lt;https://www.python.org/dev/peps/pep-0440/&gt;`_.It only supports git repositories.The format of our version string is:::    - for RELEASE builds:        &lt;major&gt;.&lt;minor&gt;        e.g.        0.1        2.4    - for DEVELOPMENT builds:        &lt;major&gt;.&lt;minor&gt;.dev&lt;num_commits&gt;+&lt;branch_name&gt;.g&lt;short_git_sha&gt;[.dirty]        e.g.        0.2.dev34+new.shiny.feature.gfa973da        2.5.dev7+master.gb91ffa6.dirty    - for UNKNOWN builds:        0.0+unknown.[&lt;scm_type&gt;.]&lt;timestamp&gt;        e.g.        0.0+unknown.git.201402031023        0.0+unknown.201602081715    where &lt;major&gt;.&lt;minor&gt; is derived from the latest version tag and    &lt;num_commits&gt; is the total number of commits on the development branch.    The &lt;major&gt;.&lt;minor&gt; substring for development builds will be that of the    NEXT (minor) release, in order to allow proper Python version ordering.    To add a version tag use the `git tag` command, e.g.        $ git tag -a 1.2 -m 'Release version 1.2'Typical Usage-------------Add this to ``setup.py`` (handles installed packages):.. code:: python        from setuptools import setup        setup(            ...,            # version=1.0,  # remove the version parameter as it will be overridden            setup_requires=['katversion'],            use_katversion=True,            ...        )Add this to ``mypackage/__init__.py``, including the comment lines(handles local packages):.. code:: python        # BEGIN VERSION CHECK        # Get package version when locally imported from repo or via -e develop install        try:            import katversion as _katversion        except ImportError:  # pragma: no cover            import time as _time            __version__ = &quot;0.0+unknown.{}&quot;.format(_time.strftime('%Y%m%d%H%M'))        else:  # pragma: no cover            __version__ = _katversion.get_version(__path__[0])        # END VERSION CHECKIn addition, a command-line script for checking the version:::        # From inside your SCM subdirectory, run the following command        # which will print the result to stdout:        $ kat-get-version.py</longdescription>
</pkgmetadata>