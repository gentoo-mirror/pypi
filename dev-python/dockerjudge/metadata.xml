<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- markdownlint-disable MD013 MD033 --&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/piterator-org&quot;&gt;    &lt;img src=&quot;https://static.piterator.com/piterator/logo.svg&quot; alt=&quot;Piterator&quot; width=&quot;20%&quot;&gt;    &lt;br&gt;    Made by &lt;strong&gt;Piterator&lt;/strong&gt; with &amp;lt;3  &lt;/a&gt;&lt;/p&gt;# dockerjudge[![Maintainability](https://api.codeclimate.com/v1/badges/dfe666a2140cd3390e56/maintainability)](https://codeclimate.com/github/wxh06/dockerjudge/maintainability)[![Python package](https://github.com/wxh06/dockerjudge/workflows/Python%20package/badge.svg)](https://github.com/wxh06/dockerjudge/actions?query=workflow%3A%22Python+package%22)[![Upload Python Package](https://github.com/wxh06/dockerjudge/workflows/Upload%20Python%20Package/badge.svg)](https://github.com/wxh06/dockerjudge/actions?query=workflow%3A%22Upload+Python+Package%22)[![Transifex](https://github.com/wxh06/dockerjudge/workflows/Transifex/badge.svg)](https://www.transifex.com/piterator/dockerjudge/)[![Build Status](https://dev.azure.com/wangxinhe/wangxinhe/_apis/build/status/wxh06.dockerjudge)](https://dev.azure.com/wangxinhe/wangxinhe/_build/latest?definitionId=1)[![Azure DevOps tests](https://img.shields.io/azure-devops/tests/wangxinhe/wangxinhe/1)](https://dev.azure.com/wangxinhe/wangxinhe/_test/analytics?definitionId=1)[![Build Status](https://travis-ci.com/wxh06/dockerjudge.svg)](https://travis-ci.com/wxh06/dockerjudge)[![CodeCov](https://codecov.io/gh/wxh06/dockerjudge/graph/badge.svg)](https://codecov.io/gh/wxh06/dockerjudge)[![Documentation Status](https://readthedocs.org/projects/dockerjudge/badge/)](https://dockerjudge.readthedocs.io/en/latest/)[![Python Version](https://img.shields.io/pypi/pyversions/dockerjudge.svg)](https://www.python.org/downloads/)[![GitHub pre-release](https://img.shields.io/github/release-pre/wxh06/dockerjudge.svg)](https://github.com/wxh06/dockerjudge/releases)[![PyPI](https://img.shields.io/pypi/v/dockerjudge.svg)](https://pypi.org/project/dockerjudge/#history)[![Wheel](https://img.shields.io/pypi/wheel/dockerjudge.svg)](https://pypi.org/project/dockerjudge/#files)[![License](https://img.shields.io/github/license/wxh06/dockerjudge.svg)](LICENSE)[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwxh06%2Fdockerjudge.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fwxh06%2Fdockerjudge?ref=badge_shield)üéå **üá∫üá∏ English** | [üá®üá≥ Â§ßÈôÜÁÆÄ‰Ωì](README.zh_Hans_CN.md)**A LXC based online judge engine**, which supports [10+ programming language processors](#supported-processors):- [Shell](https://en.wikipedia.org/wiki/Unix_shell)  - [Bash (**B**ourne-**A**gain **sh**ell)](https://en.wikipedia.org/wiki/Bash_(Unix_shell))- [C](https://en.wikipedia.org/wiki/C_(programming_language))/[C++](https://en.wikipedia.org/wiki/C%2B%2B)  - [GCC (The **G**NU **C**ompiler **C**ollection)](https://gcc.gnu.org/)  - [LLVM Clang](https://clang.llvm.org/)- [.NET](https://docs.microsoft.com/en-us/dotnet/) ([C#](https://docs.microsoft.com/en-us/dotnet/csharp/) &amp; [Visual Basic](https://docs.microsoft.com/en-us/dotnet/visual-basic/))  - [Mono](https://www.mono-project.com/)- [Go](https://golang.org/)  - [`go`](https://golang.org/dl/)  - [`gccgo` (GCC)](https://golang.org/doc/install/gccgo)- [Java](https://www.oracle.com/java/)  - [OpenJDK](https://openjdk.java.net/)- [Node.js](https://nodejs.org/en/)  - [`node`](https://nodejs.org/en/download/)- [PHP](https://www.php.net/)  - [`php`](https://www.php.net/downloads)- [Python](https://www.python.org/)  - [CPython](https://www.python.org/downloads/)  - [PyPy](https://www.pypy.org/)- [Ruby](https://www.ruby-lang.org/en/)  - [`ruby`](https://www.ruby-lang.org/en/downloads/)- [Swift](https://swift.org/)  - [`swiftc`](https://swift.org/swift-compiler/)## Supported processorsRead the [docs](https://dockerjudge.readthedocs.io/en/latest/processor.html#module-dockerjudge.processor) for more information.Processor | Language(s)\* | Required [Docker image](https://hub.docker.com/)--------- | ------------- | ------------------------------------------------`Bash` | Shell | [`bash`](https://hub.docker.com/_/bash)`Clang` | &lt;ul&gt;&lt;li&gt;C (`c`)&lt;/li&gt;&lt;li&gt;**C++ (`cpp`)**&lt;/li&gt;&lt;/ul&gt; | [`clangbuiltlinux/ubuntu`](https://hub.docker.com/r/clangbuiltlinux/ubuntu)`GCC` | &lt;ul&gt;&lt;li&gt;C (`c`)&lt;/li&gt;&lt;li&gt;**C++ (`cpp`)**&lt;/li&gt;&lt;li&gt;Go (`go`)&lt;/li&gt;&lt;/ul&gt; | [`gcc`](https://hub.docker.com/_/gcc)`Go` | Go | [`golang`](https://hub.docker.com/_/golang)`Mono` | &lt;ul&gt;&lt;li&gt;Visual Basic (`vb`)&lt;/li&gt;&lt;li&gt;**C# (`csharp`)**&lt;/li&gt;&lt;/ul&gt; | [`mono`](https://hub.docker.com/_/mono)`Node` | Node.js | [`node`](https://hub.docker.com/_/node)`OpenJDK` | Java | [`openjdk`](https://hub.docker.com/_/openjdk)`PHP` | PHP | [`php`](https://hub.docker.com/_/php)`PyPy` | Python | [`pypy`](https://hub.docker.com/_/pypy)`Python`| Python | [`python`](https://hub.docker.com/_/python)`Ruby` | Ruby | [`ruby`](https://hub.docker.com/_/ruby)`Swift` | Swift | [`swift`](https://hub.docker.com/_/swift)**\*** The `language` argumnets of the processors which support multiple languages should be provided, or the `source` will be judged in the default language (usually C++ or C#, emboldened in the table).## InstallationRead the [docs](https://dockerjudge.readthedocs.io/en/latest/installation.html) for more information.### DockerTo run `dockerjudge`, [Docker Engine](https://www.docker.com/) is required.#### Install using the convenience script (for servers)```shcurl -fsSL https://get.docker.com -o get-docker.shsudo sh get-docker.sh```See [Install Docker Engine \| Docker Documentation](https://docs.docker.com/engine/install/) for more information.### Package#### From the [Python Package Index (PyPI)](https://pypi.org/)[dockerjudge ¬∑ PyPI](https://pypi.org/project/dockerjudge/)- [PyPI](https://pypi.org/simple/dockerjudge/)- [ÈòøÈáåÂ∑¥Â∑¥ÂºÄÊ∫êÈïúÂÉèÁ´ô (Alibaba Open Source Mirror)](https://mirrors.aliyun.com/pypi/simple/dockerjudge/)- [Ê∏ÖÂçéÂ§ßÂ≠¶ÂºÄÊ∫êËΩØ‰ª∂ÈïúÂÉèÁ´ô | Tsinghua Open Source Mirror](https://pypi.tuna.tsinghua.edu.cn/simple/dockerjudge/)##### Via [pip](https://pip.pypa.io/)```shpip install dockerjudge```##### Via [Easy install](https://setuptools.readthedocs.io/en/latest/easy_install.html) (deprecated)```sheasy_install dockerjudge```#### From [GitHub](https://github.com/)[wxh06/dockerjudge: A Docker Based Online Judge Engine](https://github.com/wxh06/dockerjudge)- HTTPS: `https://github.com/wxh06/dockerjudge.git`- SSH: `git@github.com:wxh06/dockerjudge.git````shgit clone https://github.com/wxh06/dockerjudge.gitcd dockerjudgemake pip &amp;&amp; make  # python3 -m pip install -Ur requirements.txt &amp;&amp; python3 setup.py buildsudo make install  # python3 setup.py install```## UsageRead the [docs](https://dockerjudge.readthedocs.io/en/latest/__init__.html) for more information.```python&gt;&gt;&gt; from dockerjudge import judge&gt;&gt;&gt; from dockerjudge.processor import GCC, Clang, Bash, Python, Node, OpenJDK, PHP, Ruby, Mono, Swift&gt;&gt;&gt;&gt;&gt;&gt; judge(...     GCC(GCC.Language.c),  # or `GCC('c')` / `GCC('C')`, which means compile the source code in the C programming language with `gcc` command...     b'''...         #include &lt;stdio.h&gt;...         int main() {...             int a, b;...             scanf(&quot;%d %d&quot;, &amp;a, &amp;b);...             printf(&quot;%d&quot;, a / b);...             return 0;...         }...     ''',...     [...         (b'1 1', b'1'),  # AC...         (b'1 2', b'0.5'),  # WA...         (b'0 0', b'')  # RE...     ]... )[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'1', b''), 0.001),        (&lt;Status.WA: 'Wrong Answer'&gt;, (b'0', b''), 0.001),        (&lt;Status.RE: 'Runtime Error'&gt;, (None, b'Floating point exception (core dumped)\n'), 0.01)    ],    b'']&gt;&gt;&gt;&gt;&gt;&gt; judge(GCC(GCC.Language.c), b'', [(b'', b'')])  # CE[    [        (&lt;Status.CE: 'Compilation Error'&gt;, (None, None), 0.0)    ],    b&quot;/usr/bin/ld: /usr/lib/x86_64-linux-gnu/crt1.o: in function `_start':\n(.text+0x20): undefined reference to `main'\ncollect2: error: ld returned 1 exit status\n&quot;]&gt;&gt;&gt;&gt;&gt;&gt; judge(...     GCC(GCC.Language.cpp),  # or `GCC('cpp')` / `GCC('C++')`, which means compile the source code in the C++ programming language with `g++` command...     b'''...         #include &lt;cstdio&gt;...         int main() {...             printf(&quot;Hello, world!&quot;);...             while (true)...                 ;...         }...     ''',...     [...         (b'', b'Hello, world!')  # TLE...     ],...     {...         'limit': {...             'time': .1...         }...     }... )[    [        (&lt;Status.TLE: 'Time Limit Exceeded'&gt;, (None, b'bash: line 1:    35 Killed                  timeout -sKILL 0.1 sh -c ./a.out &gt; /dockerjudge/1.out &lt; /dockerjudge/1.in\n'), 0.100)    ],    b'']&gt;&gt;&gt;&gt;&gt;&gt; judge(...     GCC(...         GCC.Language.c,...         'latest',  # The GCC version number, such as `4`, `4.8`, etc....         {'bin': 'a'}  # The binary filename, which passes to `gcc`'s `-o` option...     ),...     b'''...         #include &lt;stdio.h&gt;...         int main() {...             int a, b;...             freopen(&quot;a.in&quot;, &quot;r&quot;, stdin);  // Open `a.in` as stdin...             scanf(&quot;%d %d&quot;, &amp;a, &amp;b);  // Scan from `a.in`...             freopen(&quot;a.out&quot;, &quot;w&quot;, stdout);  // Open `a.out` as stdout...             printf(&quot;%d&quot;, a / b);  // Print to `a.out`...             return 0;...         }...     ''',...     [...         (b'1 1', b'1'),  # AC...         (b'1 2', b'0.5'),  # WA...         (b'0 0', b'')  # RE...     ],...     {...         'iofilename': {...             'in': 'a.in',...             'out': 'a.out'...         }...     }... )[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'1', b''), 0.001),        (&lt;Status.WA: 'Wrong Answer'&gt;, (b'0', b''), 0.001),        (&lt;Status.RE: 'Runtime Error'&gt;, (None, b'Floating point exception (core dumped)\n'), 0.001)    ],    b'']&gt;&gt;&gt;&gt;&gt;&gt; judge(...     GCC(GCC.Language.c, filenames={'bin': 'a'}),...     b'''...         #include &lt;stdio.h&gt;...         int main() {...             int a, b;...             scanf(&quot;%d %d&quot;, &amp;a, &amp;b);...             printf(&quot;%d&quot;, a / b);...             return 0;...         }...     ''',...     [...         (b'1 1', b'1'),...         (b'0 0', b'')...     ],...     {...         'iofilename': {...             'out': 'a.out'  # ONF...         }...     }... )[    [        (&lt;Status.ONF: 'Output Not Found'&gt;, (None, b''), 0.001),        (&lt;Status.RE: 'Runtime Error'&gt;, (None, b'Floating point exception (core dumped)\n'), 0.001)    ],    b'']&gt;&gt;&gt;&gt;&gt;&gt; judge(  # BTW, GCC starting from 4.9 also supports Go, named `gccgo`...     GCC(GCC.Language.go),...     b'package main\n'...     b''...     b'import &quot;fmt&quot;\n'...     b''...     b'func main() {\n'...     br'    fmt.Printf(&quot;hello, world\n&quot;)'b'\n'...     b'}\n',...     [(b'', b'hello, world')]... )[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'hello, world\n', b''), 0.02)    ],    b'']&gt;&gt;&gt;&gt;&gt;&gt; judge(...     Clang(  # Besides GCC, LLVM Clang is also supported (The same arguments as GCC's)...         Clang.Language.c,  # Only C and C++ supported...         11  # The version number of LLVM CLang is **required**!...     ),...     b'',  # CE...     [...         (b'', b'')...     ]... )[    [        (&lt;Status.CE: 'Compilation Error'&gt;, (None, None), 0.0)    ],    b&quot;/usr/bin/ld: /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/crt1.o: in function `_start':\n'    b&quot;(.text+0x24): undefined reference to `main'\n&quot;    b'clang: error: linker command failed with exit code 1 (use -v to see invocation)\n']&gt;&gt;&gt;&gt;&gt;&gt; # Other programming languages are also supported&gt;&gt;&gt; judge(Bash(), b'echo Hello, world!', [(b'', b'Hello, world!')])  # Bash[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello, world!\n', b''), 0.001)    ],    b'']&gt;&gt;&gt;&gt;&gt;&gt; judge(Python(3), b&quot;print('Hello, world!')&quot;, [(b'', b'Hello, world!')])  # Python 3[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello, world!\n', b''), 0.05)    ],    b&quot;Listing '.'...\n&quot;    b&quot;Compiling './__init__.py'...\n&quot;]&gt;&gt;&gt; judge(PyPy(), b&quot;print('Hello, world!')&quot;, [(b'', b'Hello, world!')])  # PyPy 3[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello, world!\n', b''), 0.075)    ],    b&quot;Listing '.'...\n&quot;    b&quot;Compiling './__init__.py'...\n&quot;]&gt;&gt;&gt;&gt;&gt;&gt; judge(Node(12), b'console.log(&quot;Hello World&quot;)', [(b'', b'Hello World')])  # Node.js[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello World\n', b''), 0.05)    ],    b'']&gt;&gt;&gt;&gt;&gt;&gt; judge(  # Java / OpenJDK...     OpenJDK(), #  The default public class name is `Main`...     b'''...         public class Main {...             public static void main(String[] args) {...                 System.out.println(&quot;Hello, world!&quot;);...             }...         }...     ''',...     [...         (b'', b'Hello, world!')...     ]... )[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello, world!\n', b''), 0.1)    ],    b'']&gt;&gt;&gt;&gt;&gt;&gt; judge(PHP(), b'&lt;?php echo &quot;Hello, world!&quot;;', [(b'', b'Hello, world!')])  # PHP[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello, world!', b''), 0.05)    ],    b'No syntax errors detected in index.php\n']&gt;&gt;&gt;&gt;&gt;&gt; judge(Ruby(), b'print &quot;Hello, world!&quot;;', [(b'', b'Hello, world!')])  # Ruby[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello, world!', b''), 0.05)    ],    b'Syntax OK\n']&gt;&gt;&gt;&gt;&gt;&gt; judge(...     Mono(Mono.Language.csharp),  # C# (Mono)...     b'''...         using System;......         public class HelloWorld...         {...             public static void Main(string[] args)...             {...                 Console.WriteLine (&quot;Hello Mono World&quot;);...             }...         }...     ''',...     [...         (b'', b'Hello Mono World')...     ]... )[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello Mono World\n', b''), 0.02)    ],    b'Microsoft (R) Visual C# Compiler version 3.5.0-beta1-19606-04 (d2bd58c6)\n'    b'Copyright (C) Microsoft Corporation. All rights reserved.\n'    b'\n']&gt;&gt;&gt; judge(...     Mono(Mono.Language.vb),  # Visual Basic (Mono)...     b'''...         Imports System......         Module HelloWorld...             Sub Main()...                 Console.WriteLine(&quot;Hello World!&quot;)...             End Sub...         End Module...     ''',...     [...         (b'', b'Hello World!')...     ]... )[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello World!\n', b''), 0.024)    ],    b'Visual Basic.Net Compiler version 0.0.0.5943 (Mono 4.7 - tarball)\n'    b'Copyright (C) 2004-2010 Rolf Bjarne Kvinge. All rights reserved.\n'    b'\n'    b&quot;Assembly 'mono, Version=0.0, Culture=neutral, PublicKeyToken=null' saved successfully to '/dockerjudge/0/mono.exe'.\r\n&quot;    b'Compilation successful\r\n'    b'Compilation took 00:00:00.0000000\n']&gt;&gt;&gt;&gt;&gt;&gt; judge(Swift(), b'print(&quot;Hello, world!&quot;)', [(b'', b'Hello, world!')])  # Swift[    [        (&lt;Status.AC: 'Accepted'&gt;, (b'Hello, world!\n', b''), 0.2)    ],    b'']```## [License](LICENSE)Licensed under [the **Apache License, Version 2.0**](https://www.apache.org/licenses/LICENSE-2.0)&lt;a href=&quot;https://www.apache.org/foundation/press/kit/#wide&quot;&gt;&lt;img src=&quot;https://www.apache.org/foundation/press/kit/asf_logo_wide.svg&quot; alt=&quot;Wide Apache Software Foundation Logo with Feather.svg&quot; height=&quot;32&quot; align=&quot;right&quot;&gt;&lt;/a&gt;[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fwxh06%2Fdockerjudge.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fwxh06%2Fdockerjudge?ref=badge_large)</longdescription>
</pkgmetadata>