<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0.en.html)# UITK: Dynamic UI Management for Python with PySide2UITK is a comprehensive Python package designed to streamline the creation, management, and interaction of user interfaces (UIs) using PySide2. With a focus on versatility, UITK leverages a naming convention-based switchboard module to dynamically load UI files, register custom widgets, manage slots and styles, and facilitate interaction with widgets. The primary goal of UITK is to simplify the development process of complex UIs and enhance the efficiency of event handling.## Key Features- Dynamic UI file loading- Custom widget registration- Utility properties for MainWindow and child widget subclassing- Management of slot connections and event handling- Support for UI hierarchy navigation and submenus- Custom event behavior through UI tags- UI and slot history storage and retrieval- Widget syncing and state management.## Module OverviewModule | Description------- | -------[switchboard](https://github.com/m3trik/uitk/blob/main/uitk/switchboard.py) | Handles dynamic UI loading, assigns convenience properties, and manages slot connections.[events](https://github.com/m3trik/uitk/blob/main/uitk/events.py) | Manages event handling for dynamic UI widgets.[stylesheet](https://github.com/m3trik/tentacle/blob/main/uitk/stylesheet.py) | Defines stylesheet presets and auto-applies them to your UI upon initialization.[widgets](https://github.com/m3trik/tentacle/blob/main/uitk/widgets) | A source directory for custom widgets.---## Installation:Add the `uitk` folder to a directory on your python path, orinstall via pip in a command line window using:```shellpython -m pip install uitk```## Basic Example:Create an instance of Switchboard to load and connect your dynamic ui.```pythonfrom uitk import Switchboard, signalsclass MyProject:    ...class MyProjectSlots(MyProject):    def __init__(self):        self.sb = self.switchboard()    @signals(&quot;released&quot;)  # Specify signal(s) other than the default    def MyButtonsObjectName(self):        self.sb.message_box(&quot;Button Pressed&quot;)sb = Switchboard(ui_location=&quot;example&quot;, slots_location=MyProjectSlots)ui = sb.exampleui.set_style(theme=&quot;dark&quot;)print(&quot;ui:&quot;.ljust(20), type(ui))print(&quot;ui name:&quot;.ljust(20), ui.name)print(&quot;ui path:&quot;.ljust(20), ui.path)  # The directory path containing the UI fileprint(&quot;is current ui:&quot;.ljust(20), ui.is_current)print(&quot;is connected:&quot;.ljust(20), ui.is_connected)print(&quot;is initialized:&quot;.ljust(20), ui.is_initialized)print(&quot;slots:&quot;.ljust(20), ui.slots)  # The associated slots class instanceprint(&quot;method:&quot;.ljust(20), ui.MyButtonsObjectName.get_slot())print(    &quot;widget from method:&quot;.ljust(20),    sb.get_widget_from_method(ui.MyButtonsObjectName.get_slot()),)for w in ui.widgets:  # All the widgets of the UI    print(        &quot;child widget:&quot;.ljust(20),        (w.name or type(w).__name__).ljust(20),        w.base_name.ljust(20),        id(w),    )ui.show(app_exec=True)```## Advanced Example:https://github.com/m3trik/tentacle</longdescription>
</pkgmetadata>