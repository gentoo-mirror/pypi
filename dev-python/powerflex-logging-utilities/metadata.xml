<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># powerflex-logging-utilities&lt;!-- Badges (images) related to Python package information --&gt;[![PyPI - Version](https://img.shields.io/pypi/v/powerflex-logging-utilities) ![PyPI - License](https://img.shields.io/pypi/l/powerflex-logging-utilities) ![PyPI - Implementation](https://img.shields.io/pypi/implementation/powerflex-logging-utilities) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/powerflex-logging-utilities)](https://pypi.org/project/powerflex-logging-utilities/)Helpful code for logging in Python by PowerFlex.| Module | Description ||-----------------|--------------------------------------------|| forbid_toplevel_logging |  Disable logging with the top-level root logging functions such as `logging.info`.| log_slow_callbacks | Either warn or info log when an async callback runs for too long.| init_loggers |  A function for easily setting up logging to a file and to stdout.| Class | Description ||-----------------|--------------------------------------------|| JsonFormatter |  A JSON log formatter to enable structured logging. It depends on the `python-json-logger` package.| TraceLogger | A Python Logger subclass that adds a TRACE logging level| AsyncNatsLogLevelListener | A NATS interface for changing the program's log level by sending a NATS request# InstallationYou can install from [PyPi](https://pypi.org/project/powerflex-logging-utilities/) directly:```shellscriptpip install powerflex-logging-utilities```# Sample usage## Initializing LoggersSetup **all Loggers** to output JSON to stdout and to a file: ```pythonimport loggingimport sysfrom powerflex_logging_utilities import (    JsonFormatter,    init_loggers,    TraceLogger,)LOG_LEVEL = &quot;DEBUG&quot;FILE_LOG_LEVEL = &quot;TRACE&quot;LOG_FILE = &quot;./logs/trace.log&quot;MAX_LOG_FILE_MB = 10MAX_TOTAL_LOG_FILE_MB = 10000root_logger = logging.getLogger()# Log warnings with the py.warnings loggerlogging.captureWarnings(True)# Fix iPython autocompletelogging.getLogger(&quot;parso&quot;).propagate=Falseinit_loggers.init_loggers(    [root_logger],    log_level=LOG_LEVEL,    file_log_level=FILE_LOG_LEVEL,    filename=LOG_FILE,    max_bytes=1000 * 1000 * MAX_LOG_FILE_MB,    backup_count=MAX_TOTAL_LOG_FILE_MB // MAX_LOG_FILE_MB,    stream=sys.stdout,    formatter=JsonFormatter,    info_logger=root_logger,)# Either use logging.getLogger or don't initialize a logger until your root logger is configured.logging.setLoggerClass(TraceLogger)logger = logging.getLogger(__name__)```This uses Python's logger propagation feature.We only need to configure the root Logger in order to make sure all other Loggers output in the desired format.You can pass `formatter_kwargs` to enable logging with a different JSON serializer.To use:```skip_phmdoctestlogger = logging.getLogger(__name__)logger.info(&quot;hello world&quot;)```### Explicitly listing loggersYou can also list the loggers you'd like to configure instead of configuringthe root logger.This could be useful if you configure your package's main logger`logging.getLogger(&quot;package&quot;)`. You can then use Python's logger propagation by calling`logging.getLogger(&quot;package.submodule.a.b.c&quot;)` to get Logger instances for allother submodules.```pythonimport loggingfrom powerflex_logging_utilities import (    JsonFormatter,    init_loggers,)logger = logging.getLogger(&quot;your_package_name&quot;)# Log warnings with the py.warnings loggerlogging.captureWarnings(True)init_loggers.init_loggers(    [logger, &quot;asyncio&quot;, &quot;py.warnings&quot;],    log_level=&quot;DEBUG&quot;,    file_log_level=&quot;TRACE&quot;,    filename=&quot;./logs/trace-no-root.log&quot;,    formatter=JsonFormatter,    info_logger=logger,)```**NOTICE**: if you use this method, any loggers you do not explicitly list will have non-JSON output.## Using several other utilities```pythonimport loggingfrom powerflex_logging_utilities import (    forbid_toplevel_logging,    log_slow_callbacks,)logger = logging.getLogger(__name__)# Log slow async callbacks with two log levelslog_slow_callbacks.log_slow_callbacks(logger)# Forbid functions such as logging.info since they implicitly use the root loggerforbid_toplevel_logging.forbid_logging_with_logging_toplevel()```## Using the JSON formatter```pythonimport loggingimport sysfrom powerflex_logging_utilities import JsonFormatterlog_handler = logging.StreamHandler(stream=sys.stdout)log_handler.setLevel(&quot;DEBUG&quot;)log_handler.setFormatter(JsonFormatter())logger = logging.getLogger(__name__)logger.addHandler(log_handler)logger.setLevel(&quot;DEBUG&quot;)logger.info(&quot;hello world&quot;, extra={    &quot;data&quot;: [&quot;log structured data&quot;, &quot;:D&quot;],    1: &quot;handles non string key&quot;,})``````skip_phmdoctest{  &quot;message&quot;: &quot;hello world&quot;,  &quot;name&quot;: &quot;__main__&quot;,  &quot;module&quot;: &quot;&lt;ipython-input-10-b016ce80d46f&gt;&quot;,  &quot;lineno&quot;: 1,  &quot;funcName&quot;: &quot;&lt;cell line: 1&gt;&quot;,  &quot;filename&quot;: &quot;&lt;ipython-input-10-b016ce80d46f&gt;&quot;,  &quot;asctime&quot;: &quot;2022-05-12 01:04:16,824&quot;,  &quot;data&quot;: [    &quot;log structured data&quot;,    &quot;:D&quot;  ],  &quot;severity&quot;: &quot;INFO&quot;,  &quot;1&quot;: &quot;handles non string key&quot;}```# Using pipenv1. Run `make setup-with-pipenv` to install all dependencies.   Make sure you have the version of Python specified in `.tool-versions` or simply change this file to your Python version (must be 3.8+).2. Run `pipenv shell` or run the following `make` commands with `pipenv run make ...`.   You could also alias `pmake` to `pipenv run make` for convenience.# TestsThere is 100% code coverage.```make test-unit```To test in several versions of Python, run:```tox```To download several versions of Python, use `pyenv` or `asdf` To use `pyenv`, install it [here](https://github.com/pyenv/pyenv#installation) and run the following script:```./install_python_versions_pyenv.sh```To use `asdf`, install the core parts [here](http://asdf-vm.com/guide/getting-started.html) and run the following commands:```./install_python_versions_asdf.sh```## Testing the code in this README```make test-readme```# Checking code qualityThe Github Actions will run all of the following checks on the code.## Code formatting```make format-fix```## Linting```make lint```## Type checking```make type-check-strict```# Releasing to [PyPi.org](https://pypi.org/project/powerflex-logging-utilities/)1. Make sure all code checks have passed with `make commitready`.1. Make sure you commit all code you wish to release with `git commit`.1. Set the version in [`./src/powerflex_monitoring/VERSION`](./src/powerflex_logging_utilities/VERSION)   Please attempt to follow [semantic versioning](https://semver.org/).1. Run `make bump-version` to commit the change to the `VERSION` file.1. Run `make release` to upload the package to pypi.org and to push a new git tag</longdescription>
</pkgmetadata>