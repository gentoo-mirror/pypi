<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jsonparse: ctrl-f for json![PyPI - Python Version](https://img.shields.io/pypi/pyversions/jsonparse)![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/ctomkow/jsonparse?label=version&amp;sort=semver)[![jsonparse](https://github.com/ctomkow/jsonparse/actions/workflows/jsonparse-buildtest.yml/badge.svg)](https://github.com/ctomkow/jsonparse/actions/workflows/jsonparse-buildtest.yml)[![codecov](https://codecov.io/gh/ctomkow/jsonparse/branch/master/graph/badge.svg?token=affX7FZaFk)](https://codecov.io/gh/ctomkow/jsonparse)&lt;/br&gt;&gt; **jsonparse** is a simple JSON parsing library. Extract what's needed from key:value pairs.## What's New - [CLI tool](#CLI-tool). Parse json text files or stdin via the command line :tada: - New public (or hostable) [web API](#web-api)# Python Library## Install```bashpip install jsonparse```## QuickstartHere is a quick example of what jsonparse is able to do.```pythonfrom jsonparse import Parserp = Parser()data = [{    &quot;key0&quot;:    {        &quot;key1&quot;: &quot;result&quot;,        &quot;key2&quot;:        {            &quot;key1&quot;: &quot;result1&quot;,            &quot;key3&quot;: {&quot;key1&quot;: &quot;result2&quot;}        }    }}]p.find_key(data, 'key1')['result2', 'result1', 'result']p.find_key_chain(data, ['key0', 'key2', 'key3', 'key1'])['result2']```:heavy_plus_sign: See additional documentation in the [API section](#API) below.# CLI tool## Install```bashpip install jsonparse```## QuickstartSummary of cli commands. For complete information, `jp --help`Note, `jsonparse` and `jp` are equivalent.`jp key key1 --file text.json``jp keys key1 key2 key3 --file text.json``jp key-chain my '*' chain --file text.json``jp key-value key1 '&quot;result&quot;' --file text.json``echo '{&quot;key1&quot;: {&quot;key2&quot;: 5}}' | jp key key2`# API- [Parser class](#parser)    - [find_key](#find_key)    - [find_keys](#find_keys)    - [find_key_chain](#find_key_chain)    - [find_key_value](#find_key_value)The API examples using the following test data.```pythondata = [    {&quot;key&quot;: 1},    {&quot;key&quot;: 2},    {&quot;my&quot;:         {&quot;key&quot;:             {                &quot;chain&quot;: &quot;A&quot;,                &quot;rope&quot;: 5,                &quot;string&quot;: 1.2,                &quot;cable&quot;: False            }        }    },    {&quot;your&quot;:    {&quot;key&quot;:            {                &quot;chain&quot;: &quot;B&quot;,                &quot;rope&quot;: 7,                &quot;string&quot;: 0.7,                &quot;cable&quot;: True            }    }    }]```---### Parser&lt;pre&gt;&lt;b&gt;Parser(&lt;/b&gt;&lt;i&gt;stack_trace&lt;/i&gt;: bool = False, &lt;i&gt;queue_trace&lt;/i&gt;: bool = False&lt;b&gt;)&lt;/b&gt;&lt;/pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Optionally instantiate the `Parser` class with tracing to print out the underlying data structures.```pythonp = Parser(stack_trace=True, queue_trace=True)```---### find_key&lt;pre&gt;&lt;b&gt;find_key(&lt;/b&gt;&lt;i&gt;data&lt;/i&gt;: dict | list, &lt;i&gt;key&lt;/i&gt;: str&lt;b&gt;)&lt;/b&gt; -&gt; list&lt;/pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Will return all values of the matched key.```pythonp.find_key(data, 'chain')['A', 'B']p.find_key(data, 'key')[1, 2, {'chain': 'A', 'rope': 5, 'string': 1.2, 'cable': False}, {'chain': 'B', 'rope': 7, 'string': 0.7, 'cable': True}]```---### find_keys&lt;pre&gt;&lt;b&gt;find_keys(&lt;/b&gt;&lt;i&gt;data&lt;/i&gt;: dict | list, &lt;i&gt;keys&lt;/i&gt;: list, &lt;i&gt;group&lt;/i&gt;: bool = True&lt;b&gt;)&lt;/b&gt; -&gt; list&lt;/pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The default return value is a two dimensional list. `[ [], [], ...]`.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;To return all values as a one dimensional list, set `group=False`.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The ordering of the keys does not matter.```pythonp.find_keys(data, ['rope', 'cable'])[[5, False], [7, True]]p.find_keys(data, ['rope', 'cable'], group=False)[5, False, 7, True]```---### find_key_chain&lt;pre&gt;&lt;b&gt;find_key_chain(&lt;/b&gt;&lt;i&gt;data&lt;/i&gt;: dict | list, &lt;i&gt;keys&lt;/i&gt;: list&lt;b&gt;)&lt;/b&gt; -&gt; list&lt;/pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The key chain is an ordered list of keys. The chain needs to start at the root level of the nested data.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Wildcard `*` can be used as key(s) to match any.```pythonp.find_key_chain(data, ['my', 'key', 'chain'])['A']p.find_key_chain(data, ['key'])[1, 2]p.find_key_chain(data, ['*', 'key', 'chain'])['A', 'B']p.find_key_chain(data, ['*', 'key', '*'])['A', 5, 1.2, False, 'B', 7, 0.7, True]```---### find_key_value&lt;pre&gt;&lt;b&gt;find_key_value(&lt;/b&gt;&lt;i&gt;data&lt;/i&gt;: dict | list, &lt;i&gt;key&lt;/i&gt;: str, &lt;i&gt;value&lt;/i&gt;: str | int | float | bool | None) -&gt; list&lt;/pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The returned list contains the dictionaries that contain the specified key:value pair.```pythonp.find_key_value(data, 'cable', False)[{'chain': 'A', 'rope': 5, 'string': 1.2, 'cable': False}]p.find_key_value(data, 'chain', 'B')[{'chain': 'B', 'rope': 7, 'string': 0.7, 'cable': True}]```# Web API## DocumentationVisit [the swagger API documentation](https://jsonparse.dev/v1/docs)All endpoints are HTTP POST requests where you include the searchable JSON data in the request body.### Brief Endpoint Overiew```bashPOST /v1/key/{key}POST /v1/keys?key=1&amp;key=2&amp;key=3&amp;key=4...POST /v1/keychain?key=1&amp;key=2&amp;key=3&amp;key=4...POST /v1/keyvalue?key=a&amp;value=1```## QuickstartLet's practice using the public, free-to-use-no-authentication, web API hosted in GCP Cloud Run.We are POST'ing the JSON data with curl, requesting to search for the key, 'key1'. The found key values are returned as JSON.```bashcurl -X POST &quot;https://jsonparse.dev/v1/key/key1&quot; \-H 'Content-Type: application/json' \-d '[{&quot;key0&quot;:{&quot;key1&quot;:&quot;result&quot;,&quot;key2&quot;:{&quot;key1&quot;:&quot;result1&quot;,&quot;key3&quot;:{&quot;key1&quot;:&quot;result2&quot;}}}}]'[&quot;result2&quot;,&quot;result1&quot;,&quot;result&quot;]```&gt; OR (using python and requests library)```pythonimport requestsdata = [{    &quot;key0&quot;:    {        &quot;key1&quot;: &quot;result&quot;,        &quot;key2&quot;:        {            &quot;key1&quot;: &quot;result1&quot;,            &quot;key3&quot;: {&quot;key1&quot;: &quot;result2&quot;}        }    }}]requests.post('https://jsonparse.dev/v1/key/key1', json=data).json()['result2', 'result1', 'result']```## Self-Hosted```bashpip install &quot;jsonparse[webapi]&quot;gunicorn -b 0.0.0.0:8000 jsonparse.webapi:app```&gt; Alternatively, run the docker container```bashdocker run -d ctomkow/jsonparse```</longdescription>
</pkgmetadata>