<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>bimpy - bundled imgui for python ================================&lt;img src=&quot;doc_sources/logo.svg&quot;&gt;&lt;h4 align=&quot;center&quot;&gt;&lt;strong&gt;bimpy&lt;/strong&gt; is a a native extension for Python built with C++ and &lt;a href=&quot;https://github.com/pybind/pybind11&quot;&gt;&lt;/a&gt; that provides bindings to &lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;dear imgui&lt;/a&gt; and distributed as a self-contained package bundled with &lt;a href=&quot;https://github.com/glfw/glfw&quot;&gt;glfw&lt;/a&gt; and &lt;a href=&quot;https://github.com/skaslev/gl3w&quot;&gt;gl3w&lt;/a&gt;&lt;/h4&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://badge.fury.io/py/bimpy&quot;&gt;&lt;img src=&quot;https://badge.fury.io/py/bimpy.svg&quot; alt=&quot;PyPI version&quot; height=&quot;18&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pepy.tech/project/bimpy&quot;&gt;&lt;img src=&quot;https://pepy.tech/badge/bimpy&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/l/bimpy&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://api.travis-ci.com/podgorskiy/bimpy.svg?branch=master&quot;&gt;&lt;img src=&quot;https://travis-ci.org/podgorskiy/bimpy.svg?branch=master&quot;&gt;&lt;/a&gt;&lt;/p&gt;Features:* Immediate mode UI with python. The API is kept as close to the original dear imgui as possible.* **bimpy** already has all necessary functionality for window/OpenGL context creation and hides those details from the user.* **bimpy** can display images from ndarrays, PIL Images, numpy arrays, etc., * **bimpy** works on Windows, GNU Linux, and macOS.* **bimpy** does not have dependencies and can be easily built from sources. Building relies only on distutils.# Hello world with bimpyCore API tries to map to the Dear ImGui as close as possible. There is additional API, such as `bimpy.App` class that simplifies **bimpy** usage&lt;table&gt;&lt;tr&gt;&lt;td&gt;Core API&lt;/td&gt; &lt;td&gt; Using `bimpy.App` class &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;```pythonimport bimpy as bpctx = bp.Context()ctx.init(600, 600, &quot;Hello&quot;)s = bp.String()f = bp.Float()while not ctx.should_close():    with ctx:        bp.text(&quot;Hello, world!&quot;)        if bp.button(&quot;OK&quot;):            print(s.value)        bp.input_text('string', str, 256)        bp.slider_float(&quot;float&quot;, f, 0, 1)```&lt;/td&gt;&lt;td&gt; ```pythonimport bimpy as bpclass App(bp.App):    def __init__(self):        super(App, self).__init__(title='Test')        self.s = bp.String()        self.f = bp.Float()    def on_update(self):        bp.text(&quot;Hello, world!&quot;)        if bp.button(&quot;OK&quot;):            print(self.s.value)        bp.input_text('string', self.s, 256)        bp.slider_float(&quot;float&quot;, self.f, 0, 1)app = App()app.run()```&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;![Screenshot from 2020-12-05 08-38-39](https://user-images.githubusercontent.com/3229783/101244661-bfe01600-36d5-11eb-9d39-3d19c091abba.png)# Display imagesDisplay PIL image:&lt;table&gt;&lt;tr&gt;&lt;td&gt;```pythonimport bimpyfrom PIL import Imagectx = bimpy.Context()ctx.init(800, 800, &quot;Image&quot;)image = Image.open(&quot;test.png&quot;)im = bimpy.Image(image)while not ctx.should_close():    with ctx:        bimpy.text(&quot;Display PIL Image&quot;)        bimpy.image(im)```&lt;/td&gt; &lt;td&gt; ![Screenshot from 2020-12-06 06-58-02](https://user-images.githubusercontent.com/3229783/101279465-743e7280-3790-11eb-9364-137c336b78a2.png)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;Similarly, numpy arrays with 2 dimensions, 3 dimensions (2, 3 or 4 channels) of type **np.uint8** can be displayed.Display numpy, ndarray image:&lt;table&gt;&lt;tr&gt;&lt;td&gt;```pythonimport bimpyfrom PIL import Imageimport numpy as npctx = bimpy.Context()ctx.init(800, 800, &quot;Image&quot;)image = np.asarray(Image.open(&quot;3.png&quot;), dtype=np.uint8)im = bimpy.Image(image)while not ctx.should_close():    with ctx:        bimpy.text(&quot;Display Image of type:&quot;)        bimpy.same_line()        bimpy.text(str(type(image)))        bimpy.image(im)```&lt;/td&gt; &lt;td&gt; ![Screenshot from 2020-12-06 07-05-08](https://user-images.githubusercontent.com/3229783/101279636-8ff64880-3791-11eb-8646-9957b0c42d1a.png)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;More examples here: https://github.com/podgorskiy/bimpy/blob/master/examples/image.pyNon-english text================Use builtin `bp.load_fonts` to load fonts with CJK, cyrillic, greek  characters&lt;table&gt;&lt;tr&gt;&lt;td&gt;```pythonimport bimpy as bpctx = bp.Context()ctx.init(600, 600, &quot;Hello&quot;)bp.load_fonts(    chinese=True,     latin_ext=True,     japanese=True,     cyrillic=True)while not ctx.should_close():    with ctx:        chinese = u&quot;學而不思則罔，思而不學則殆。&quot;        japanese = u&quot;二兎を追う者は一兎をも得ず。 &quot;        hiragana = u&quot;あ い う え お か ...&quot;        katakana = u&quot;ア イ ウ エ オ カ ...&quot;        kanji = &quot;川 月 木 心 火 左 北 今...&quot;        ukrainian = &quot;Садок вишневий коло...&quot;        polish = &quot;Hej, tam gdzieś z nad...&quot;        russian = &quot;Ночь, улица, фонарь, ...&quot;        bp.text('Chinese:')        bp.indent()        bp.text(chinese)        bp.unindent()        bp.text('Japanese:')        bp.indent()        bp.text(japanese)        bp.bullet_text(&quot;hiragana: &quot; + hiragana)        bp.bullet_text(&quot;katakana: &quot; + katakana)        bp.bullet_text(&quot;kanji: &quot; + kanji)        bp.unindent()        bp.separator()        bp.text('Ukrainian:')        bp.indent()        bp.text(ukrainian)        bp.unindent()        bp.separator()        bp.text('Polish:')        bp.indent()        bp.text(polish)        bp.unindent()        bp.separator()        bp.text('Russian:')        bp.indent()        bp.text(russian)        bp.unindent()        bp.separator()```&lt;/td&gt; &lt;td&gt; ![Screenshot from 2020-12-06 08-31-13](https://user-images.githubusercontent.com/3229783/101281665-4b24de80-379e-11eb-8170-fe09d6bfa894.png)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;Install=======Installation is easy since the package does not have dependencies:```shellpip install bimpy```Or you can build and install from sources:```shellpython setup.py install```All c/c++ sources are built with distutils. All you need is a compiler with C++11 support.Windows users, who use python 2.7 may encounter problems, because on Windows, python 2.7 uses MSVC 9.0, which doesn't have support for c++11. However, you still can build it with more recent MSVC (for example MSVC 14.0, which is Visual C++ 2015) using the commands below:```shellcall &quot;%VS140COMNTOOLS%\VsDevCmd.bat&quot;set VS90COMNTOOLS=%VS140COMNTOOLS%python setup.py install```If building on Linux, the following dependencies will be needed:```shellsudo apt-get install mesa-common-dev libxi-dev libxinerama-dev libxrandr-dev libxcursor-dev```To build all wheels for linux package distribution (manylinux) run `build_manylinux_wheels.sh`.For testing/debugging there is a CMakeList.txt included. It is not used by setup.py, but can be handy in order to build/debug package from certain IDEs.How to use it?==============Intro-----**bimpy** is python binding for `dear imgui &lt;https://github.com/ocornut/imgui&gt;`__ and tries to match the C++ API. Also, it has some additional functions to create a window and some other differences.It has binding for the most functions from **dear imgui**. All functions are renamed from **CamelCase** to **snake_case**, which is more common for python. For example ``ImGui::InputText`` is mapped to ``bimpy.input_text``.Context and window------------------First of all, you need to import **bimpy**```pythonimport bimpy```Distinctively from **dear imgui**, bimpy does not have global state (**dear imgui** has it by default, but it has an option not to have one). So, you will need to create a context.```pythonctx = bimpy.Context(width, height, name)```Where integers *width* and *height* specify the size of the window, and string *name* is a caption of the window.All calls to **bimpy**'s API must be within *with* statement applied to the context object:```pythonwith ctx:    bimpy.text(&quot;Hello, world!&quot;)```And there must be only one *with* statement applied to the context object per frame.Or, a second option is to manualy call ``ctx.new_frame()`` before all API calls, and then ``ctx.render()`` after.```pythonctx.new_frame()bimpy.text(&quot;Hello, world!&quot;)ctx.render()```You can have multiple *Context* objects for multiple windows, however, API is not thread-safe.Variables------------------All **imgui** API that provides user input (such as *InputText*, *SliderFloat*, etc.) modifies the variable through the reference to it. However, in python, such objects as integers, floats and strings are passed always by value. Because of this, **bimpy** provides special wrappers, that allow passing those variables by reference.For example, to use *slider_float*, you will need first to create a variable that will hold the state:```pythonf = bimpy.Float();```You can access the value in the following way: ``f.value``To use it with *slider_float* simply pass it to that function:```pythonbimpy.slider_float(&quot;float slider&quot;, f, 0.0, 1.0)```All **imgui** input functions that provide multiple inputs, like *SliderFloat2*, *SliderInt4*, *InputInt3*, etc. are mapped to equivalent functions, but instead of passing an array of variables, you need to list all variables in the argument list:```pythonf1 = bimpy.Float();f2 = bimpy.Float();f3 = bimpy.Float();while(not ctx.should_close()):with ctx:bimpy.slider_float3(&quot;float&quot;, f1, f2, f3, 0.0, 1.0)```Draw commands------------------Some draw commands are exposed. In contrast to C++ API, the exposed functions are not methods of **ImDrawList**, but global functions. All drawing functions should be called inside the *begin/end* calls of a window.List of exposed drawing functions:```python    add_circle(centre: _bimpy.Vec2, radius: float, col: int, num_segments: int=12, thickness: float=1.0) -&gt; None    add_circle_filled(centre: _bimpy.Vec2, radius: float, col: int, num_segments: int=12) -&gt; None    add_line(a: _bimpy.Vec2, b: _bimpy.Vec2, col: int, thickness: float=1.0) -&gt; None    add_quad(a: _bimpy.Vec2, b: _bimpy.Vec2, c: _bimpy.Vec2, d: _bimpy.Vec2, col: int, thickness: float=1.0) -&gt; None    add_quad_filled(a: _bimpy.Vec2, b: _bimpy.Vec2, c: _bimpy.Vec2, d: _bimpy.Vec2, col: int) -&gt; None    add_rect(a: _bimpy.Vec2, b: _bimpy.Vec2, col: int, rounding: float=0.0, rounding_corners_flags: int=Corner.All, thickness: float=1.0) -&gt; None    add_rect_filled(a: _bimpy.Vec2, b: _bimpy.Vec2, col: int, rounding: float=0.0, rounding_corners_flags: int=Corner.All) -&gt; None    add_rect_filled_multicolor(a: _bimpy.Vec2, b: _bimpy.Vec2, col_upr_left: int, col_upr_right: int, col_bot_right: int, col_bot_lefs: int) -&gt; None    add_triangle(a: _bimpy.Vec2, b: _bimpy.Vec2, c: _bimpy.Vec2, col: int, thickness: float=1.0) -&gt; None    add_triangle_filled(a: _bimpy.Vec2, b: _bimpy.Vec2, c: _bimpy.Vec2, col: int) -&gt; None```Simple usage example below:![hello-world](https://i.imgur.com/MU5Vhfl.png)```pythonimport bimpyimport numpy as npctx = bimpy.Context()ctx.init(1200, 1200, &quot;Draw Commands Test&quot;)with ctx:bimpy.themes.set_light_theme()DATA_POINTS = bimpy.Int(30)CLASTERS = bimpy.Int(4)std = bimpy.Float(0.5)colors = [0x4b19e6, 0x4bb43c, 0x19e1ff, 0xc88200, 0x3182f5, 0xb41e91, 0xf0f046, 0xf032e6, 0xd2f53c,  0xfabebe, 0x008080, 0xe6beff, 0xaa6e28, 0xfffac8, 0x800000, 0xaaffc3, 0x808000, 0xffd8b1,  0x000080, 0x808080, 0xFFFFFF, 0x000000]datapoints = []def generate_fake_data():datapoints.clear()for i in range(CLASTERS.value):x = np.random.normal(size=(DATA_POINTS.value, 2))alpha = np.random.rand()scale = std.value * np.random.rand(2) * np.eye(2, 2)position = np.random.rand(2) * 5rotation = np.array([[np.cos(alpha), np.sin(alpha)], [-np.sin(alpha), np.cos(alpha)]])x = np.matmul(x, scale)x = np.matmul(x, rotation)x += positiondatapoints.append((x, rotation, position, scale))axis = x = np.array([[-1, 0], [1, 0], [0, -1], [0, 1]])while not ctx.should_close():ctx.new_frame()bimpy.set_next_window_pos(bimpy.Vec2(20, 20), bimpy.Condition.Once)bimpy.set_next_window_size(bimpy.Vec2(800, 600), bimpy.Condition.Once)bimpy.begin(&quot;Drawings&quot;)window_pos = bimpy.get_window_pos()center = bimpy.Vec2(100, 100) + window_posm = 100.0for i in range(len(datapoints)):(x, R, P, S) = datapoints[i]for j in range(x.shape[0]):point = bimpy.Vec2(x[j, 0], x[j, 1])bimpy.add_circle_filled(point * m + center, 5, 0xAF000000 + colors[i], 100)axis_ = np.matmul(axis, S * 2.0)axis_ = np.matmul(axis_, R) + Pbimpy.add_line(center + bimpy.Vec2(axis_[0, 0], axis_[0, 1]) * m,center + bimpy.Vec2(axis_[1, 0], axis_[1, 1]) * m,0xFFFF0000, 1)bimpy.add_line(center + bimpy.Vec2(axis_[2, 0], axis_[2, 1]) * m,center + bimpy.Vec2(axis_[3, 0], axis_[3, 1]) * m,0xFFFF0000, 1)bimpy.end()bimpy.set_next_window_pos(bimpy.Vec2(20, 640), bimpy.Condition.Once)bimpy.set_next_window_size(bimpy.Vec2(800, 140), bimpy.Condition.Once)bimpy.begin(&quot;Controls&quot;)bimpy.input_int(&quot;Data points count&quot;, DATA_POINTS)bimpy.input_int(&quot;Clasters count&quot;, CLASTERS)bimpy.slider_float(&quot;std&quot;, std, 0.0, 3.0)if bimpy.button(&quot;Generate data&quot;):generate_fake_data()bimpy.end()ctx.render()```Acknowledgements================* robobuggy https://github.com/gfannes* njazz https://github.com/njazz* Florian Rott https://github.com/sauberfred* zakx https://github.com/zakx* Joel Linn https://github.com/JoelLinn</longdescription>
</pkgmetadata>