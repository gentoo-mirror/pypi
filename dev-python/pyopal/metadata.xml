<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># üêçüåàü™® PyOpal [![Stars](https://img.shields.io/github/stars/althonos/pyopal.svg?style=social&amp;maxAge=3600&amp;label=Star)](https://github.com/althonos/pyopal/stargazers)*[Cython](https://cython.org/) bindings and Python interface to [Opal](https://github.com/Martinsos/opal), a SIMD-accelerated database search aligner.*[![Actions](https://img.shields.io/github/actions/workflow/status/althonos/pyopal/test.yml?branch=main&amp;logo=github&amp;style=flat-square&amp;maxAge=300)](https://github.com/althonos/pyopal/actions)[![Coverage](https://img.shields.io/codecov/c/gh/althonos/pyopal?style=flat-square&amp;maxAge=3600&amp;logo=codecov)](https://codecov.io/gh/althonos/pyopal/)[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&amp;maxAge=2678400)](https://choosealicense.com/licenses/mit/)[![PyPI](https://img.shields.io/pypi/v/pyopal.svg?style=flat-square&amp;maxAge=3600&amp;logo=PyPI)](https://pypi.org/project/pyopal)[![Bioconda](https://img.shields.io/conda/vn/bioconda/pyopal?style=flat-square&amp;maxAge=3600&amp;logo=anaconda)](https://anaconda.org/bioconda/pyopal)[![AUR](https://img.shields.io/aur/version/python-pyopal?logo=archlinux&amp;style=flat-square&amp;maxAge=3600)](https://aur.archlinux.org/packages/python-pyopal)[![Wheel](https://img.shields.io/pypi/wheel/pyopal.svg?style=flat-square&amp;maxAge=3600)](https://pypi.org/project/pyopal/#files)[![Python Versions](https://img.shields.io/pypi/pyversions/pyopal.svg?style=flat-square&amp;maxAge=600&amp;logo=python)](https://pypi.org/project/pyopal/#files)[![Python Implementations](https://img.shields.io/pypi/implementation/pyopal.svg?style=flat-square&amp;maxAge=600&amp;label=impl)](https://pypi.org/project/pyopal/#files)[![Source](https://img.shields.io/badge/source-GitHub-303030.svg?maxAge=2678400&amp;style=flat-square)](https://github.com/althonos/pyopal/)[![Mirror](https://img.shields.io/badge/mirror-EMBL-009f4d?style=flat-square&amp;maxAge=2678400)](https://git.embl.de/larralde/pyopal/)[![Issues](https://img.shields.io/github/issues/althonos/pyopal.svg?style=flat-square&amp;maxAge=600)](https://github.com/althonos/pyopal/issues)[![Docs](https://img.shields.io/readthedocs/pyopal/latest?style=flat-square&amp;maxAge=600)](https://pyopal.readthedocs.io)[![Changelog](https://img.shields.io/badge/keep%20a-changelog-8A0707.svg?maxAge=2678400&amp;style=flat-square)](https://github.com/althonos/pyopal/blob/main/CHANGELOG.md)[![Downloads](https://img.shields.io/pypi/dm/pyopal?style=flat-square&amp;color=303f9f&amp;maxAge=86400&amp;label=downloads)](https://pepy.tech/project/pyopal)## üó∫Ô∏è Overview[Opal](https://github.com/Martinsos/opal) is a sequence aligner enabling fastsequence similarity search using either of the Smith-Waterman, semi-global orNeedleman-Wunsch algorithms.PyOpal is a Python module that provides bindings to [Opal](https://github.com/Martinsos/opal)using [Cython](https://cython.org/). It implements a user-friendly, Pythonicinterface to query a database of sequences and access the search results. Itinteracts with the Opal interface rather than with the CLI, which has thefollowing advantages:- **no binary dependency**: PyOpal is distributed as a Python package, so   you can add it as a dependency to your project, and stop worrying about the  Opal binary being present on the end-user machine.- **no intermediate files**: Everything happens in memory, in a Python object  you control, so you don't have to invoke the Opal CLI using a sub-process  and temporary files.- **better portability**: Opal uses SIMD to accelerate alignment scoring, but  doesn't support dynamic dispatch, so it has to be compiled on the local  machine to be able to use the full capabilities of the local CPU. PyOpal  ships several versions of Opal instead, each compiled with different target  features, and selects the best one for the local platform at runtime.- **wider platform support**: The Opal code has been backported to work on SSE2  rather than SSE4.1, allowing PyOpal to run on older x86 CPUs (all x86 CPUs  support it since 2003). In addition, Armv7 and Aarch64 CPUs are also  supported if they implement NEON extensions.## üîß InstallingPyOpal is available for all modern versions (3.6+), depending only on the lightweight Python package [`archspec`](https://pypi.org/project/archspec) for runtime CPU feature detection.It can be installed directly from [PyPI](https://pypi.org/project/pyopal/),which hosts some pre-built x86-64 and Aarch64 wheels for Linux and MacOS,as well as the code required to compile from source with Cython:```console$ pip install pyopal```&lt;!-- Otherwise, PyOpal is also available as a [Bioconda](https://bioconda.github.io/)package:```console$ conda install -c bioconda pyopal``` --&gt;## üí° ExampleCreate a database from some reference sequences:```pythonimport pyopaldatabase = pyopal.Database([    &quot;MESILDLQELETSEEESALMAASTVSNNC&quot;,                         # goadvionin A    &quot;MKKAVIVENKGCATCSIGAACLVDGPIPDFEIAGATGLFGLWG&quot;,           # subtilosin A    &quot;MAGFLKVVQILAKYGSKAVQWAWANKGKILDWINAGQAIDWVVEKIKQILGIK&quot;, # lacticin Z    &quot;MTQIKVPTALIASVHGEGQHLFEPMAARCTCTTIISSSSTF&quot;,             # plantazolicin])```Then search it with a query sequence, and show the target sequence with thehighest score:```pythonresults = database.search(&quot;MAGFLKVVQLLAKYGSKAVQWAWANKGKILDWLNAGQAIDWVVSKIKQILGIK&quot;)best = max(results, key=lambda result: result.score)print(best.score, best.target_index, database[best.target_index])```You can also get the alignment for every target, but this must be enabledwhen searching the database:```pythonresults = database.search(&quot;MESVLDLQELETSEEESALMAASTISQNC&quot;, mode=&quot;full&quot;)for result in results:    print(result.score, result.identity(), result.cigar())```## üß∂ Thread-safety`Database` objects are thread safe through a[C++17 read/write lock](https://en.cppreference.com/w/cpp/thread/shared_mutex)that prevents modification while the database is searched. In addition, the`Database.search`  method is re-entrant and can be safely used to query the samedatabase in parallel with different queries across different threads:```pythonimport multiprocessing.poolimport pyopalimport Bio.SeqIOqueries = [    &quot;MEQQIELDVLEISDLIAGAGENDDLAQVMAASCTTSSVSTSSSSSSS&quot;,    &quot;MTQIKVPTALIASVHGEGQHLFEPMAARCTCTTIISSSSTF&quot;,    &quot;MGAIAKLVAKFGWPIVKKYYKQIMQFIGEGWAINKIIDWIKKHI&quot;,    &quot;MGPVVVFDCMTADFLNDDPNNAELSALEMEELESWGAWDGEATS&quot;,]database = pyopal.Database([    str(record.seq)    for record in Bio.SeqIO.parse(&quot;vendor/opal/test_data/db/uniprot_sprot12071.fasta&quot;, &quot;fasta&quot;)])with multiprocessing.pool.ThreadPool() as pool:    hits = dict(pool.map(lambda q: (q, database.search(q)), queries))```&lt;!-- ## ‚è±Ô∏è Benchmarks --&gt;## üí≠ Feedback### ‚ö†Ô∏è Issue TrackerFound a bug ? Have an enhancement request ? Head over to the [GitHub issue tracker](https://github.com/althonos/pyopal/issues)if you need to report or ask something. If you are filing in on a bug,please include as much information as you can about the issue, and try torecreate the same bug in a simple, easily reproducible situation.### üèóÔ∏è ContributingContributions are more than welcome! See[`CONTRIBUTING.md`](https://github.com/althonos/pyopal/blob/main/CONTRIBUTING.md)for more details.## üìã ChangelogThis project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html)and provides a [changelog](https://github.com/althonos/pyopal/blob/main/CHANGELOG.md)in the [Keep a Changelog](http://keepachangelog.com/en/1.0.0/) format.## ‚öñÔ∏è LicenseThis library is provided under the [MIT License](https://choosealicense.com/licenses/mit/).Opal is developed by [Martin ≈†o≈°iƒá](https://github.com/Martinsos) and is distributed under theterms of the MIT License as well. See `vendor/opal/LICENSE` for more information.*This project is in no way not affiliated, sponsored, or otherwise endorsedby the [Opal authors](https://github.com/Martinsos). It was developedby [Martin Larralde](https://github.com/althonos/) during his PhD projectat the [European Molecular Biology Laboratory](https://www.embl.de/) inthe [Zeller team](https://github.com/zellerlab).*</longdescription>
</pkgmetadata>