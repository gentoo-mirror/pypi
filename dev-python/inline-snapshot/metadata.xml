<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># inline-snapshot[![Docs](https://img.shields.io/badge/docs-mkdocs-green)](https://15r10nk.github.io/inline-snapshot/)[![pypi version](https://img.shields.io/pypi/v/inline-snapshot.svg)](https://pypi.org/project/inline-snapshot/)![PyPI - Downloads](https://img.shields.io/pypi/dw/inline-snapshot)[![coverage](https://img.shields.io/badge/coverage-100%25-blue)](https://15r10nk.github.io/inline-snapshot/contributing/#coverage)[![GitHub Sponsors](https://img.shields.io/github/sponsors/15r10nk)](https://github.com/sponsors/15r10nk)&gt; *create and update inline snapshots in your code.*## InstallationYou can install &quot;inline-snapshot&quot; via [pip](https://pypi.org/project/pip/):``` bashpip install inline-snapshot```## UsageYou can use `snapshot()` instead of the value which you want to compare with.&lt;!-- inline-snapshot: outcome-errors=1 outcome-passed=1 --&gt;```pythonfrom inline_snapshot import snapshotdef test_something():    assert 1548 * 18489 == snapshot()```You can now run the tests and record the correct values.```$ pytest --inline-snapshot=create```&lt;!-- inline-snapshot: create --&gt;```pythonfrom inline_snapshot import snapshotdef test_something():    assert 1548 * 18489 == snapshot(28620972)```inline-snapshot provides more advanced features like:&lt;!-- inline-snapshot: fix create trim this --&gt;```pythonfrom inline_snapshot import snapshotdef test_something():    for number in range(5):        # testing for numeric limits        assert number &lt;= snapshot(4)        assert number &gt;= snapshot(0)    for c in &quot;hello world&quot;:        # test if something is part of a set        assert c in snapshot([&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;r&quot;, &quot;d&quot;])    s = snapshot(        {            0: {&quot;square&quot;: 0, &quot;pow_of_two&quot;: False},            1: {&quot;square&quot;: 1, &quot;pow_of_two&quot;: True},            2: {&quot;square&quot;: 4, &quot;pow_of_two&quot;: True},            3: {&quot;square&quot;: 9, &quot;pow_of_two&quot;: False},            4: {&quot;square&quot;: 16, &quot;pow_of_two&quot;: True},        }    )    for number in range(5):        # create sub-snapshots at runtime        assert s[number][&quot;square&quot;] == number**2        assert s[number][&quot;pow_of_two&quot;] == ((number &amp; (number - 1) == 0) and number != 0)```More information can be found in the [documentation](https://15r10nk.github.io/inline-snapshot/).&lt;!-- -8&lt;- [start:Feedback] --&gt;## Feedbackinline-snapshot provides some advanced ways to work with snapshots.I would like to know how these features are used to further improve this small library.Let me know if you've found interesting use cases for this library via [twitter](https://twitter.com/15r10nk) or in the github [discussions](https://github.com/15r10nk/inline-snapshot/discussions/new?category=show-and-tell).## IssuesIf you encounter any problems, please [report an issue](https://github.com/15r10nk/inline-snapshot/issues) along with a detailed description.&lt;!-- -8&lt;- [end:Feedback] --&gt;## LicenseDistributed under the terms of the [MIT](http://opensource.org/licenses/MIT) license, &quot;inline-snapshot&quot; is free and open source software.</longdescription>
</pkgmetadata>