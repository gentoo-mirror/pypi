<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Interface with French's bank online credit card processing services===================================================================Services supported are:- ATOS/SIPS v2 used by:  - BNP under the name Mercanet,  - Banque Populaire (before 2010/2011) under the name Cyberplus,  - CCF under the name Elysnet,  - HSBC under the name Elysnet,  - Crédit Agricole under the name e-Transactions,  - La Banque Postale under the name ScelliusNet,  - LCL under the name Sherlocks,  - Société Générale under the name Sogenactif  - and Crédit du Nord under the name Webaffaires,- Payzen/SystemPay v2 by Banque Populaire (since 2010/2011) and Caisse d'Épargne (Natixis)- TIPI/PayFiP Régie- PayFiP Régie Web-service- Ogone- Paybox- PayzenYou can emit payment request under a simple API which takes as input adictionnary as configuration and an amount to pay. You get back atransaction_id. Another unique API allows to handle the notifications comingfrom those services, reporting whether the transaction was successful and whichone it was. The full content (which is specific to the service) is alsoreported for logging purpose.The paybox module also depend upon the python Cryptodome library for RSAsignature validation on the responses.Some backends allow to specify the order and transaction ids in differentfields, in order to allow to match them in payment system backoffice. They are:- Payzen- SIPS- SystemPay- PayFiP Régie Web-ServiceFor other backends, the order and transaction ids, separated by '!' are sent inorder id field, so they can be matched in backoffice.PayFiP Régie Web-Service========================You can test your PayFiP regie web-service connection with an integrated CLI utility:    $ python3 -m eopayment.payfip_ws info-client --help    Usage: payfip_ws.py info-client [OPTIONS] NUMCLI    Options:      --help  Show this message and exit.    $ python3 -m eopayment.payfip_ws get-idop --help    Usage: payfip_ws.py get-idop [OPTIONS] NUMCLI    Options:      --saisie [T|X|W]         [required]      --exer TEXT              [required]      --montant INTEGER        [required]      --refdet TEXT            [required]      --mel TEXT               [required]      --url-notification TEXT  [required]      --url-redirect TEXT      [required]      --objet TEXT      --help                   Show this message and exit.    $ python3 -m eopayment.payfip_ws info-paiement --help    Usage: payfip_ws.py info-paiement [OPTIONS] IDOP    Options:      --help  Show this message and exit.Generic CLI Tool================You can put some configuration in ~/.config/eopayment.init ::    [default]    debug=yes    [systempayv2]    # same name as passed in the options argument to Payment.__init__()    vads_site_id=12345678    secret_test=xyzabcdefgh    vads_ctx_mode=TEST    $ python3 -m eopayment --option vads_site_id=56781234 request 10.0 --param transaction_id=1234 --param email=john.doe@example.com    Transaction ID: 1234    &lt;form method=&quot;POST&quot; action=&quot;https://paiement.systempay.fr/vads-payment/&quot;&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_cust_country&quot; value=&quot;FR&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_validation_mode&quot; value=&quot;&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_site_id&quot; value=&quot;12345678&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_payment_config&quot; value=&quot;SINGLE&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_trans_id&quot; value=&quot;GavPXW&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_action_mode&quot; value=&quot;INTERACTIVE&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_contrib&quot; value=&quot;eopayment&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_page_action&quot; value=&quot;PAYMENT&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_amount&quot; value=&quot;1010&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;signature&quot; value=&quot;d5690d02fed621687b19c90053a77b37a1c78370&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_ctx_mode&quot; value=&quot;TEST&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_version&quot; value=&quot;V2&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_payment_cards&quot; value=&quot;&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_ext_info_eopayment_trans_id&quot; value=&quot;1234&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_trans_date&quot; value=&quot;20201027211254&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_language&quot; value=&quot;fr&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_capture_delay&quot; value=&quot;&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_currency&quot; value=&quot;978&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_cust_email&quot; value=&quot;john.doe@example.com&quot;/&gt;      &lt;input type=&quot;hidden&quot; name=&quot;vads_return_mode&quot; value=&quot;GET&quot;/&gt;      &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;Submit&quot; /&gt;    &lt;/form&gt;    [ Local browser is automatically opened with this form which is auto-submitted ]    $ python3 -m eopayment --debug response 'vads_amount=1010&amp;vads_auth_mode=FULL&amp;vads_auth_number=3fd070&amp;vads_auth_result=00&amp;vads_capture_delay=0&amp;vads_card_brand=CB&amp;vads_card_number=597010XXXXXX0018&amp;vads_payment_certificate=f582e920616a33bdaa0c242ee3fc3d435d367575&amp;vads_ctx_mode=TEST&amp;vads_currency=978&amp;vads_effective_amount=1010&amp;vads_effective_currency=978&amp;vads_site_id=12345678&amp;vads_trans_date=20201029093825&amp;vads_trans_id=Vlco55&amp;vads_trans_uuid=e8defc7bd32c418c93c4b2be676d2796&amp;vads_validation_mode=0&amp;vads_version=V2&amp;vads_warranty_result=&amp;vads_payment_src=EC&amp;vads_cust_country=FR&amp;vads_contrib=eopayment&amp;vads_tid=001&amp;vads_sequence_number=1&amp;vads_contract_used=2334410&amp;vads_trans_status=AUTHORISED&amp;vads_expiry_month=6&amp;vads_expiry_year=2021&amp;vads_bank_label=Banque+de+d%C3%A9mo+et+de+l%27innovation&amp;vads_bank_product=MCW&amp;vads_pays_ip=FR&amp;vads_presentation_date=20201029093826&amp;vads_effective_creation_date=20201029093826&amp;vads_operation_type=DEBIT&amp;vads_result=00&amp;vads_extra_result=&amp;vads_card_country=FR&amp;vads_language=fr&amp;vads_brand_management=%7B%22userChoice%22%3Afalse%2C%22brandList%22%3A%22CB%7CMASTERCARD%22%2C%22brand%22%3A%22CB%22%7D&amp;vads_action_mode=INTERACTIVE&amp;vads_payment_config=SINGLE&amp;vads_page_action=PAYMENT&amp;vads_threeds_enrolled=Y&amp;vads_threeds_auth_type=CHALLENGE&amp;vads_threeds_eci=02&amp;vads_threeds_xid=RFBSMkdWdFE0Wk15VWw0RkJjMzU%3D&amp;vads_threeds_cavvAlgorithm=2&amp;vads_threeds_status=Y&amp;vads_threeds_sign_valid=1&amp;vads_threeds_error_code=&amp;vads_threeds_exit_status=10&amp;vads_threeds_cavv=jG26AYSjvclBARFYSf%2FtXRmjGXM%3D&amp;signature=5594aa2bc35c9e45e759b08df339e5f8ecf2c410'      result : 3      signed : True      bank_data  :      {'__bank_id': '3fd070',       'signature': '5594aa2bc35c9e45e759b08df339e5f8ecf2c410',       'vads_action_mode': 'INTERACTIVE',       'vads_amount': '1010',       'vads_auth_mode': 'FULL',       'vads_auth_number': '3fd070',       'vads_auth_result': '00',       'vads_auth_result_message': 'Transaction approuvée ou traitée avec succès',       'vads_bank_label': &quot;Banque de démo et de l'innovation&quot;,       'vads_bank_product': 'MCW',       'vads_brand_management': '{&quot;userChoice&quot;:false,&quot;brandList&quot;:&quot;CB|MASTERCARD&quot;,&quot;brand&quot;:&quot;CB&quot;}',       'vads_capture_delay': '0',       'vads_card_brand': 'CB',       'vads_card_country': 'FR',       'vads_card_number': '597010XXXXXX0018',       'vads_contract_used': '2334410',       'vads_contrib': 'eopayment',       'vads_ctx_mode': 'TEST',       'vads_currency': '978',       'vads_cust_country': 'FR',       'vads_effective_amount': '1010',       'vads_effective_creation_date': '20201029093826',       'vads_effective_currency': '978',       'vads_expiry_month': '6',       'vads_expiry_year': '2021',       'vads_extra_result': '',       'vads_extra_result_message': 'Pas de contrôle effectué.',       'vads_language': 'fr',       'vads_operation_type': 'DEBIT',       'vads_page_action': 'PAYMENT',       'vads_payment_certificate': 'f582e920616a33bdaa0c242ee3fc3d435d367575',       'vads_payment_config': 'SINGLE',       'vads_payment_src': 'EC',       'vads_pays_ip': 'FR',       'vads_presentation_date': '20201029093826',       'vads_result': '00',       'vads_result_message': 'Paiement réalisé avec succés.',       'vads_sequence_number': '1',       'vads_site_id': '12345678',       'vads_threeds_auth_type': 'CHALLENGE',       'vads_threeds_cavv': 'jG26AYSjvclBARFYSf/tXRmjGXM=',       'vads_threeds_cavvAlgorithm': '2',       'vads_threeds_eci': '02',       'vads_threeds_enrolled': 'Y',       'vads_threeds_error_code': '',       'vads_threeds_exit_status': '10',       'vads_threeds_sign_valid': '1',       'vads_threeds_status': 'Y',       'vads_threeds_xid': 'RFBSMkdWdFE0Wk15VWw0RkJjMzU=',       'vads_tid': '001',       'vads_trans_date': '20201029093825',       'vads_trans_id': 'Vlco55',       'vads_trans_status': 'AUTHORISED',       'vads_trans_uuid': 'e8defc7bd32c418c93c4b2be676d2796',       'vads_validation_mode': '0',       'vads_version': 'V2',       'vads_warranty_result': ''}      return_content : None      bank_status : Paiement réalisé avec succés.      transaction_id : 3fd070      order_id : 20201029093825_Vlco55      test : True      transaction_date : 2020-10-29 09:38:26+00:00Code Style==========black is used to format the code, using thoses parameters:    black --target-version py35 --skip-string-normalization --line-length 110isort is used to format the imports, using those parameters:    isort --profile black --line-length 110pyupgrade is used to automatically upgrade syntax, using those parameters:    pyupgrade --keep-percent-format --py37-plusThere is .pre-commit-config.yaml to use pre-commit to automatically run black,isort and pyupgrade before commits. (execute `pre-commit install` to installthe git hook.)</longdescription>
</pkgmetadata>