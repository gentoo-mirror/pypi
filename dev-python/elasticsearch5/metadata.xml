<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Elasticsearch Client===========================Official low-level client for Elasticsearch. Its goal is to provide commonground for all Elasticsearch-related code in Python; because of this it triesto be opinion-free and very extendable.For a more high level client library with more limited scope, have a look at`elasticsearch-dsl`_ - a more pythonic library sitting on top of``elasticsearch-py``.It provides a more convenient and idiomatic way to write and manipulate`queries`_. It stays close to the Elasticsearch JSON DSL, mirroring itsterminology and structure while exposing the whole range of the DSL from Pythoneither directly using defined classes or a queryset-like expressions.It also provides an optional `persistence layer`_ for working with documents asPython objects in an ORM-like fashion: defining mappings, retrieving and savingdocuments, wrapping the document data in user-defined classes... _elasticsearch-dsl: https://elasticsearch-dsl.readthedocs.io/.. _queries: https://elasticsearch-dsl.readthedocs.io/en/latest/search_dsl.html.. _persistence layer: https://elasticsearch-dsl.readthedocs.io/en/latest/persistence.html#doctypeCompatibility-------------The library is compatible with Elasticsearch ``5.x``. For Elasticsearch ``2.x``please use ``elasticsearch2`` and for future releases use ``elasticsearcch``.Installation------------Install the ``elasticsearch5`` package with `pip&lt;https://pypi.python.org/pypi/elasticsearch5&gt;`_::    pip install elasticsearch5Example use-----------Simple use-case::    &gt;&gt;&gt; from datetime import datetime    &gt;&gt;&gt; from elasticsearch import Elasticsearch    # by default we connect to localhost:9200    &gt;&gt;&gt; es = Elasticsearch()    # create an index in elasticsearch, ignore status code 400 (index already exists)    &gt;&gt;&gt; es.indices.create(index='my-index', ignore=400)    {u'acknowledged': True}    # datetimes will be serialized    &gt;&gt;&gt; es.index(index=&quot;my-index&quot;, doc_type=&quot;test-type&quot;, id=42, body={&quot;any&quot;: &quot;data&quot;, &quot;timestamp&quot;: datetime.now()})    {u'_id': u'42', u'_index': u'my-index', u'_type': u'test-type', u'_version': 1, u'ok': True}    # but not deserialized    &gt;&gt;&gt; es.get(index=&quot;my-index&quot;, doc_type=&quot;test-type&quot;, id=42)['_source']    {u'any': u'data', u'timestamp': u'2013-05-12T19:45:31.804229'}`Full documentation`_... _Full documentation: https://elasticsearch-py.readthedocs.io/Features--------The client's features include: * translating basic Python data types to and from json (datetimes are not   decoded for performance reasons) * configurable automatic discovery of cluster nodes * persistent connections * load balancing (with pluggable selection strategy) across all available nodes * failed connection penalization (time based - failed connections won't be   retried until a timeout is reached) * support for ssl and http authentication * thread safety * pluggable architectureLicense-------Copyright 2017 ElasticsearchLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.Build status------------.. image:: https://secure.travis-ci.org/elastic/elasticsearch-py.png   :target: http://travis-ci.org/#!/elastic/elasticsearch-py</longdescription>
</pkgmetadata>