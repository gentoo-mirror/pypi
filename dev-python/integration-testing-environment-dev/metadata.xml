<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Table of contents &gt; ITE Intro \&gt; Editor components \&gt; GUI Testing components \&gt; WEB Testing components \&gt; API Testing components \&gt; Load &amp; Stress Testing components---## What is ITE&gt; Project Kanban \&gt; https://github.com/orgs/Integrated-Testing-Environment/projects/4/views/1 \&gt; Integrated Testing Environment (ITE) &gt; * ITE mainly provides an integrated automated testing environment. &gt; * ITE is composed of the following components: &gt;&gt; * Editor。&gt;&gt; * GUI Testing。&gt;&gt; * Web Testing。&gt;&gt; * API Testing。&gt;&gt; * Load &amp; Stress Testing。---## ITE Testing&gt; How does ITE perform self-testing?&gt; * CircleCI &amp; GitHub Actions。&gt;&gt; * What are the benefits of using CircleCI and GitHub Actions?&gt;&gt; * They provide GitHub/Gitlab hooks for automated testing on every commit.&gt;&gt; * They provide detailed test logs.&gt;&gt; * They allow for automatic deployment to selected environments.&gt;&gt; * They make it easy to specify branches for testing.&gt;&gt; * They can parallelize multiple tests for faster execution.---## ITE Dev&gt; * ITE's development process: CI/CD (Continuous Integration/Continuous Deployment).&gt; * Continuous Integration: The longer the code is away from the last update, the higher the risk, so continuous integration encourages committing and automated testing after completing each part to reduce risk.&gt; * Continuous Deployment: Continuously deploying the code to the real environment for testing, usually achieved through automation.---### Editor components&gt; A simple text editor for ite &gt;&gt; Editor Really?&gt;&gt; * Why do we need to provide an editor when there are so many text editors and IDEs available?&gt;&gt; * We provide an editor as a cross-platform and minimalistic solution that comes with ITE, without requiring additional installation. The editor provides basic functionality, including font adjustment, support for other ITE components, basic file management such as saving, opening, and auto-saving, as well as file encoding and code selection integration. Additionally, the editor allows users to view test results through the interface.&gt;&gt; * The term &quot;minimalistic&quot; refers to the basic functionalities that are essential for a text editor, without the advanced features commonly found in other IDEs or text editors.---### GUI Testing components&gt; Image &amp; Coordinate based GUI Testing \&gt; GUI automated testing based on image comparison and coordinates. \&gt; Cross-platform and cross-programming language.\&gt; Solve problems:&gt;&gt; * Provide automation execution for repetitive tasks.&gt;&gt; * Multiple methods are available, including recording, image recognition, and coordinate-based testing.&gt;&gt; * Tests can be executed remotely through TCP/IP.&gt;&gt; * Test reports can be generated with records for each action.&gt;&gt; * The same code can be used for three platforms, reducing the possibility of platform-dependent programs.&gt;&gt; * Provide hooks for keyboard and mouse events and state checks (including using code to simulate key presses).&gt;&gt; * Can use keywords for development to improve readability.---### WEB Testing components&gt; Multiton Selenium Instance testing \&gt; The WEB Testing component is a web automation testing solution based on Selenium. \&gt; It wraps Selenium and therefore has all the functionality of Selenium. \&gt; What problems does it solve? &gt;&gt; * Automatically downloads and updates the required web driver, so users no longer need to install it manually.&gt;&gt; * Provides the ability to simultaneously run and monitor multiple Selenium instances.&gt;&gt; * Provides a keyword-based testing approach that Selenium does not have.&gt;&gt; * Can produce test reports that record actions taken during the test.&gt;&gt; * Can execute tests remotely through TCP/IP.&gt;&gt; * Offers a CLI mode for Web Testing.---### API Testing components&gt; Simple way to testing HTTP/S &amp; Soap \&gt; Wrapper for Requests package, designed for those with experience using Requests. \&gt; Send HTTP/S and SOAP requests with a simple line of code or keyword. \&gt; Detailed information on Requests and Responses. \&gt; Solves problems such as:&gt;&gt; * Detailed testing reports on Requests and Responses.&gt;&gt; * Testing for SOAP protocol.&gt;&gt; * Data comparison for each Request.&gt;&gt; * API Testing in pure CLI mode.---### Load &amp; Stress Testing components&gt; Locust Wrapper \&gt; Wrapper for Locust, simplifying complex Locust configurations. \&gt; Solves problems:&gt;&gt; * Checking Requests &amp; Response for each load test&gt;&gt; * Load testing for SOAP protocols&gt;&gt; * Comparison of numerical values for each load test&gt;&gt; * Detailed load test reports for each test.---### Features&gt; * ITE GUI for beginner&gt; * GUI testing (use AutoControl)&gt; * API testing (use APITestka)&gt; * Web testing (use WebRunner)&gt; * Loading testing (use LoadDensity)&gt; * Multi test task runner (multi process)&gt; * you can run multi testing on same time&gt; * open log window to check testing result&gt; * Send mail when testing failure (need to setting mail)---[![Codacy Badge](https://app.codacy.com/project/badge/Grade/b7d32ed8600b4bd2a2f3e960f46f2ad0)](https://www.codacy.com/gh/JE-Chen/Integration-testing-environment/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=JE-Chen/Integration-testing-environment&amp;amp;utm_campaign=Badge_Grade)[![CircleCI](https://dl.circleci.com/status-badge/img/gh/JE-Chen/Integration-testing-environment/tree/main.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/JE-Chen/Integration-testing-environment/tree/main)[![ITE GitHub Actions Dev](https://github.com/JE-Chen/Integration-testing-environment/actions/workflows/ITE-github-actions_dev.yml/badge.svg)](https://github.com/JE-Chen/Integration-testing-environment/actions/workflows/ITE-github-actions_dev.yml)[![ITE GitHub Actions Stable](https://github.com/JE-Chen/Integration-testing-environment/actions/workflows/ITE-github-actions_stable.yml/badge.svg)](https://github.com/JE-Chen/Integration-testing-environment/actions/workflows/ITE-github-actions_stable.yml)### install#### stable```commandlinepip install integration_testing_environment```#### dev```commandlinepip install integration_testing_environment_dev```</longdescription>
</pkgmetadata>