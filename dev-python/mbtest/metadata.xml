<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mbtestOpinionated Python wrapper &amp; utils for the [Mountebank](https://www.mbtest.org/) over the wire test double tool.Includes [pytest](https://pytest.org) fixture and [PyHamcrest](https://pyhamcrest.readthedocs.io) matchers.[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)[![Continuous Integration](https://github.com/brunns/mbtest/workflows/Continuous%20Integration/badge.svg)](https://github.com/brunns/mbtest/actions)[![Python Versions](https://img.shields.io/pypi/pyversions/mbtest.svg?logo=python)](https://pypi.org/project/mbtest/)[![Licence](https://img.shields.io/github/license/brunns/mbtest.svg)](https://github.com/brunns/mbtest/blob/master/LICENSE)[![GitHub all releases](https://img.shields.io/github/downloads/brunns/mbtest/total.svg?logo=github)](https://github.com/brunns/mbtest/releases/)[![GitHub forks](https://img.shields.io/github/forks/brunns/mbtest.svg?label=Fork&amp;logo=github)](https://github.com/brunns/mbtest/network/members)[![GitHub stars](https://img.shields.io/github/stars/brunns/mbtest.svg?label=Star&amp;logo=github)](https://github.com/brunns/mbtest/stargazers/)[![GitHub watchers](https://img.shields.io/github/watchers/brunns/mbtest.svg?label=Watch&amp;logo=github)](https://github.com/brunns/mbtest/watchers/)[![GitHub contributors](https://img.shields.io/github/contributors/brunns/mbtest.svg?logo=github)](https://github.com/brunns/mbtest/graphs/contributors/)[![GitHub issues](https://img.shields.io/github/issues/brunns/mbtest.svg?logo=github)](https://github.com/brunns/mbtest/issues/)[![GitHub issues-closed](https://img.shields.io/github/issues-closed/brunns/mbtest.svg?logo=github)](https://github.com/brunns/mbtest/issues?q=is%3Aissue+is%3Aclosed)[![GitHub pull-requests](https://img.shields.io/github/issues-pr/brunns/mbtest.svg?logo=github)](https://github.com/brunns/mbtest/pulls)[![GitHub pull-requests closed](https://img.shields.io/github/issues-pr-closed/brunns/mbtest.svg?logo=github)](https://github.com/brunns/mbtest/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+is%3Aclosed)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/3b7c694664974d17a34e594c43af0c1b)](https://www.codacy.com/app/brunns/mbtest)[![Codacy Coverage](https://api.codacy.com/project/badge/coverage/3b7c694664974d17a34e594c43af0c1b)](https://www.codacy.com/app/brunns/mbtest)[![Documentation Status](https://readthedocs.org/projects/mbtest/badge/?version=latest)](https://mbtest.readthedocs.io/en/latest/?badge=latest)[![Lines of Code](https://tokei.rs/b1/github/brunns/mbtest)](https://github.com/brunns/mbtest)## SetupInstall with pip:    pip install mbtest(As usual, use of a [venv](https://docs.python.org/3/library/venv.html) or [virtualenv](https://virtualenv.pypa.io) is recommended.) Also requires [Mountebank](http://www.mbtest.org/) to have been installed:    npm install mountebank@2.8 --omit=dev(Alternatively, you can attach to an instance of Mountebank running elsewhere, perhaps [in docker](https://mbtest.readthedocs.io/en/latest/guide/docker.html).)## Basic example```pythonimport requestsfrom hamcrest import assert_thatfrom brunns.matchers.response import is_responsefrom mbtest.matchers import had_requestfrom mbtest.imposters import Imposter, Predicate, Response, Stubdef test_request_to_mock_server(mock_server):    # Set up mock server with required behavior    imposter = Imposter(Stub(Predicate(path=&quot;/test&quot;),                              Response(body=&quot;sausages&quot;)))    with mock_server(imposter):        # Make request to mock server - exercise code under test here        response = requests.get(f&quot;{imposter.url}/test&quot;)        assert_that(&quot;We got the expected response&quot;,                     response, is_response().with_status_code(200).and_body(&quot;sausages&quot;))        assert_that(&quot;The mock server recorded the request&quot;,                     imposter, had_request().with_path(&quot;/test&quot;).and_method(&quot;GET&quot;))```Needs a [pytest fixture](https://docs.pytest.org/en/latest/fixture.html), most easily defined in [`conftest.py`](https://docs.pytest.org/en/latest/how-to/fixtures.html#scope-sharing-fixtures-across-classes-modules-packages-or-session):```pythonimport pytestfrom mbtest import server@pytest.fixture(scope=&quot;session&quot;)def mock_server(request):    return server.mock_server(request)```This will take care of starting and stopping the Mountebank server for you. Examples of more complex predicates can be found in the [integration tests](https://github.com/brunns/mbtest/tree/master/tests/integration/).See the [Documentation](https://mbtest.readthedocs.io/) for more.## ContributingRequires [make](https://www.gnu.org/software/make/manual/html_node/index.html) and [tox](https://tox.readthedocs.io). [PyEnv](https://github.com/pyenv/pyenv) may also come in handy so tests can be run against various Python versions. Integration tests run against an instance of Mountebank running in Docker.Currently, the `Makefile` targets use Python 3.8 and 3.11 via tox, so a quick-start setup could be:```shbrew install pyenv colima dockerversions=(3.7 3.11)for v in &quot;${versions[@]}&quot;; do pyenv install $v -s; donepyenv local 3.11 3.7pip install tox tox-pyenvcolima start```In order to run `make test`, you'll also need to have Mountebank installed locally:```shnpm install mountebank@2.6 --production```(`mbtest` is tested against Mountebank versions back as far as 1.16, but obviously only features supported by the Mountebank version you're using will work.)After that, you should be ready to roll; running `make test` will let you know if your setup is correct.Running `make precommit` tells you if you're OK to commit. For more options, run:    make help## ReleasingRequires [hub](https://hub.github.com/), [setuptools](https://setuptools.readthedocs.io), [wheel](https://github.com/pypa/wheel) and [twine](https://twine.readthedocs.io). To release version `n.n.n`, first update the version number in `setup.py`, then:```shversion=&quot;n.n.n&quot; # Needs to match new version number in setup.py.git checkout -b &quot;release-$version&quot;make precommit &amp;&amp; git commit -am&quot;Release $version&quot; &amp;&amp; git push --set-upstream origin &quot;release-$version&quot; # If not already all pushed, which it should be.hub release create &quot;V$version&quot; -t&quot;release-$version&quot; -m&quot;Version $version&quot;python setup.py sdist bdist_wheeltwine upload dist/*$version*git checkout mastergit merge &quot;release-$version&quot;git push```</longdescription>
</pkgmetadata>