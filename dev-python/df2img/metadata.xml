<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># df2img: Save a Pandas DataFrame as image![img](https://img.shields.io/pypi/v/df2img)![img](https://img.shields.io/pypi/pyversions/df2img)![img](https://img.shields.io/github/license/andreas-vester/df2img)![img](https://img.shields.io/github/issues/andreas-vester/df2img)![img](https://img.shields.io/github/stars/andreas-vester/df2img)## What is it all about?Have you ever tried to save a ``pd.DataFrame`` into an image file? This is not a straightforward process at all. Unfortunately, ``pandas`` itself doesn't provide this functionality out of the box.**df2img** tries to fill the gap. It is a Python library that greatly simplifies the process of saving a ``pd.DataFrame`` into an image file (e.g. ``png`` or ``jpg``).It is a wrapper/convenience function in order to create a ``plotly`` Table. That is, one can use ``plotly``'s styling function to format the table.## Dependencies**df2img** has a limited number of dependencies, namely- ``pandas``- ``plotly``- ``kaleido``## DocumentationAn extensive documentation is available at https://df2img.dev.## QuickstartYou can install the package via ``pip``.```bashpip install df2img```Using ``poetry``?```bashpoetry add df2img```Let's create a simple ``pd.DataFrame`` with some dummy data:```pythonimport pandas as pdimport df2imgdf = pd.DataFrame(    data=dict(        float_col=[1.4, float(&quot;NaN&quot;), 250, 24.65],        str_col=(&quot;string1&quot;, &quot;string2&quot;, float(&quot;NaN&quot;), &quot;string4&quot;),    ),    index=[&quot;row1&quot;, &quot;row2&quot;, &quot;row3&quot;, &quot;row4&quot;],)``````python      float_col  str_colrow1       1.40  string1row2        NaN  string2row3     250.00      NaNrow4      24.65  string4```### BasicsSaving ``df`` into a png-file now takes just two lines of code including some styling out of the box.* First, we create a ``plotly`` figure.* Second, we save the figure to disk.```pythonfig = df2img.plot_dataframe(df, fig_size=(500, 140))df2img.save_dataframe(fig=fig, filename=&quot;plot1.png&quot;)```![img](https://github.com/andreas-vester/df2img/blob/main/docs/img/plot1.png?raw=true)### FormattingYou can control the settings for the header row via the ``tbl_header`` input argument. This accepts a regular ``dict``. This ``dict`` can comprise various key/value pairs that are also accepted by ``plotly``. All available key/value pairs can be seen at ``plotly``'s website at https://plotly.com/python/reference/table/#table-header.Let's set the header row in a different color and size. Also, let's set the alignment to &quot;left&quot;.```pythonfig = df2img.plot_dataframe(    df,    tbl_header=dict(        align=&quot;left&quot;,        fill_color=&quot;blue&quot;,        font_color=&quot;white&quot;,        font_size=14,    ),    fig_size=(500, 140),)```![img](https://github.com/andreas-vester/df2img/blob/main/docs/img/plot2.png?raw=true)Controlling the table body (cells) is basically the same. Just use the ``tbl_cells`` input argument, which happens to be a ``dict``, too.See https://plotly.com/python/reference/table/#table-cells for all the possible key/value pairs.Let's print the table cell values in yellow on a green background and align them &quot;right&quot;.```pythonfig = df2img.plot_dataframe(    df,    tbl_cells=dict(        align=&quot;right&quot;,        fill_color=&quot;green&quot;,        font_color=&quot;yellow&quot;,    ),    fig_size=(500, 140),)```![img](https://github.com/andreas-vester/df2img/blob/main/docs/img/plot3.png?raw=true)You can alternate row colors for better readability by using the ``row_fill_color`` input argument. Using HEX colors is also possible:```pythonfig = df2img.plot_dataframe(    df,    row_fill_color=(&quot;#ffffff&quot;, &quot;#d7d8d6&quot;),    fig_size=(500, 140),)```![img](https://github.com/andreas-vester/df2img/blob/main/docs/img/plot4.png?raw=true)Setting the title will be controlled via the ``title`` input argument. You can find the relevant key/value pairs here: https://plotly.com/python/reference/layout/#layout-title.Let's put the title in a different font and size. In addition, we can control the alignment via the ``x`` key/value pair. It sets the x (horizontal) position in normalized coordinates from &quot;0&quot; (left) to &quot;1&quot; (right).```python  fig = df2img.plot_dataframe(      df,      title=dict(          font_color=&quot;darkred&quot;,          font_family=&quot;Times New Roman&quot;,          font_size=24,          text=&quot;This is a title starting at the x-value x=0.1&quot;,          x=0.1,          xanchor=&quot;left&quot;,      ),      fig_size=(500, 140),  )  ```![img](https://github.com/andreas-vester/df2img/blob/main/docs/img/plot5.png?raw=true)You can also control relative column width via the ``col_width`` argument. Let's set the first column's width triple the width of the third column and the second column's width double the width of the third column.```pythonfig = df2img.plot_dataframe(    df,    col_width=[3, 2, 1],    fig_size=(500, 140),)```![img](https://github.com/andreas-vester/df2img/blob/main/docs/img/plot6.png?raw=true)## Contributing to df2imgIf you consider to contribute to **df2img**, please read the [Contributing to df2img](./CONTRIBUTING.md) section in the documentation. This document is supposed to guide you through the whole process.</longdescription>
</pkgmetadata>