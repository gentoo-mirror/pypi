<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># grpc requests[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/grpc-requests?style=flat-square)](https://pypi.org/project/grpc-requests)[![PyPI](https://img.shields.io/pypi/v/grpc-requests?style=flat-square)](https://pypi.org/project/grpc-requests)[![PyPI download month](https://img.shields.io/pypi/dm/grpc-requests?style=flat-square)](https://pypi.org/project/grpc-requests)[![codecov](https://codecov.io/gh/spaceone-dev/grpc_requests/branch/master/graph/badge.svg)](https://codecov.io/gh/spaceone-dev/grpc_requests)![Views](https://views.whatilearened.today/views/github/spaceone-dev/grpc_requests.svg)## GRPC for Humans```pythonfrom grpc_requests import Clientclient = Client.get_by_endpoint(&quot;localhost:50051&quot;)assert client.service_names == [&quot;helloworld.Greeter&quot;]request_data = {&quot;name&quot;: 'sinsky'} result = client.request(&quot;helloworld.Greeter&quot;, &quot;SayHello&quot;, request_data)print(result) # {&quot;message&quot;:&quot;Hello sinsky&quot;}```## Features- supports creating clients easily when connecting to servers implementing grpc reflection- supports implementing stub clients for connecting to servers that do not implement reflection- support all unary and stream methods- supports both TLS and compression connections- supports AsyncIO API## Install```shell scriptpip install grpc_requests```## Use it like RPCIf your server supports reflection, use the `Client` class:```pythonfrom grpc_requests import Clientclient = Client.get_by_endpoint(&quot;localhost:50051&quot;)# if you want a TLS connection# client = Client.get_by_endpoint(&quot;localhost:443&quot;,ssl=True)# or if you want a compression enabled connection# client = Client.get_by_endpoint(&quot;localhost:443&quot;,compression=grpc.Compression.Gzip)assert client.service_names == [&quot;helloworld.Greeter&quot;,'grpc.health.v1.Health']health = client.service('grpc.health.v1.Health')assert health.method_names == ('Check', 'Watch')result = health.Check()assert result == {'status': 'SERVING'}```If not, use the `StubClient` class:```pythonfrom grpc_requests import StubClientfrom .helloworld_pb2 import Descriptorservice_descriptor = DESCRIPTOR.services_by_name['Greeter'] # or you can just use _GREETERclient = StubClient.get_by_endpoint(&quot;localhost:50051&quot;,service_descriptors=[service_descriptor,])assert client.service_names == [&quot;helloworld.Greeter&quot;]```In both cases, the same methods are used to interact with the server.```pythongreeter = client.service(&quot;helloworld.Greeter&quot;)request_data = {&quot;name&quot;: 'sinsky'}result = greeter.SayHello(request_data)results = greeter.SayHelloGroup(request_data)requests_data = [{&quot;name&quot;: 'sinsky'}]result = greeter.HelloEveryone(requests_data)results = greeter.SayHelloOneByOne(requests_data)```## Examples- [helloworld reflection client](src/examples/helloworld_reflection.py)### Reflection Client but you can send message by stub```pythonfrom grpc_requests import Clientfrom helloworld_pb2 import HelloRequestport = '50051'host = &quot;localhost&quot;endpoint = f&quot;{host}:{port}&quot;client = Client.get_by_endpoint(endpoint)print(client.service_names) # [&quot;helloworld.Greeter&quot;]service = &quot;helloworld.Greeter&quot;method = 'SayHello'result = client.unary_unary(service, method, HelloRequest(name='sinsky'))print(type(result)) # result is dict Type!!! not Stub Object!print(result) # {&quot;message&quot;:&quot;Hellow sinsky&quot;}# or get raw response dataresult = client.unary_unary(service, method, HelloRequest(name='sinsky'),raw_output=True)print(type(result)) # HelloReply stub class```### AsyncIO API```pythonfrom grpc_requests.aio import AsyncClientclient = AsyncClient(&quot;localhost:50051&quot;)health = await client.service('grpc.health.v1.Health')assert health.method_names == ('Check', 'Watch')result = await health.Check()assert result == {'status': 'SERVING'}greeter = await client.service(&quot;helloworld.Greeter&quot;)request_data = {&quot;name&quot;: 'sinsky'}result = await greeter.SayHello(request_data)results =[x async for x in await greeter.SayHelloGroup(request_data)] requests_data = [{&quot;name&quot;: 'sinsky'}]result = await greeter.HelloEveryone(requests_data)results = [x async for x in await greeter.SayHelloOneByOne(requests_data)]  ```## Road map- [x] support no reflection server(Stub Client)- [x] support async API!- [ ] Document!- [ ] pluggable interceptor## Maintainers- sinsky - [wesky93](https://github.com/wesky93)- Wayne Manselle - [ViridianForge](https://github.com/ViridianForge)# ChangeLogAll notable changes to this project will be documented in this file.The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).## [0.1.10](https://github.com/wesky93/grpc_requests/releases/tag/v0.1.10) - 2023-03-07## Fixed- Corrected pin of `protobuf` version in `requirements.txt`## [0.1.9](https://github.com/wesky93/grpc_requests/releases/tag/v0.1.9) - 2023-02-14### Changes- Reimplementation of test case framework- Restoration of reflection client test cases- Updates to continuous integration pipeline## [0.1.8](https://github.com/wesky93/grpc_requests/releases/tag/v0.1.8) - 2023-01-24### Changes- Update project and dev dependencies to versions that require Python &gt;= 3.7- Update project documentation and examples## [0.1.7](https://github.com/wesky93/grpc_requests/releases/tag/v0.1.7) - 2022-12-16### Deprecated- homi dependency, as the project has been archived- homi dependent test code## [0.1.6](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.1.6) - 2022-11-10### Fixed- Ignore repeat imports of protobufs and reflecting against a server## [0.1.3](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.1.3) - 2022-7-14### Fixed- remove click### Issues- ignore test before deploy## [0.1.2](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.1.2) - 2022-7-7## [0.1.1](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.1.1) - 2022-6-13### Changes- remove unused package : click #35## [0.1.0](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.1.0) - 2021-8-21### Added- Full TLS connection support### Fixed- Ignore reflection if service already registered### Changed- Update grpcio version## [0.0.10](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.10) - 2021-2-27### Fixed- Fix 3.6 compatibility issue : await is in f-string## [0.0.9](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.9) - 2020-12-25### Added- Support AsyncIO API## [0.0.8](https://github.com/spaceone-dev/grpc_requests/releases/tag/0.0.8) - 2020-11-24### Added- Add StubClient### Fixed- Bypasss kwargs to base client## [0.0.7](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.7) - 2020-10-4### Added- Support Compression## [0.0.6](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.6) - 2020-10-3### Added- Support TLS connections## [0.0.5](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.5) - 2020-9-9### Changed- Response filled gets original proto field name rather than(before returned lowerCamelCase)## [0.0.4](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.4) - 2020-7-21## [0.0.3](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.3) - 2020-7-21### Added- Dynamic request method- Service client## [0.0.2](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.2) - 2020-7-20### Added- Support all method types- Add request test case## [0.0.1](https://github.com/spaceone-dev/grpc_requests/releases/tag/v0.0.1) - 2020-7-20### Added- Sync proto using reflection- Auto convert request(response) from(to) dict- Support unary-unary</longdescription>
</pkgmetadata>