<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ohawf================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;## Install``` shpip install -U ohawf```Are you trying to log into Google Analytics, Search Console, or evenGoogle Photos from a Jupyter Notebook? Does all the advice telling youto register as a&lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;developer&lt;/a&gt; and themangled [Googleexamples](https://developers.google.com/webmaster-tools/search-console-api-original/v3/quickstart/quickstart-python)have you frustrated? Well then, ***ohawf*** is for you.## How to use``` pythonimport ohawfcreds = ohawf.get()```### Why So Easy?Google OAuth2 woes go away once you can use the authentication schemethat pops up the same **“login as Google”** web-prompt that all Mobileand Web apps seem to be using these days. It doesn’t seem possible, butthis authentication scheme actually works from a Jupyter Notebook inJupyterLab.Ohawf makes JupyterLab behave like an installed app, so that when youfirst run **creds= ohawf.get()**, you’ll be presented with the “Loginwith Google” prompt. Just just wait a moment, it will pop up a windowseparate from JupyterLab’s own, and let you log in then prompt you toclose the window. If not, &lt;a href=&quot;https://mikelev.in/ux&quot;&gt;Drink Me&lt;/a&gt;.### A Tale of 2 Installed App FlowsWhat makes ohawf work is this line:``` pythonfrom google_auth_oauthlib.flow import InstalledAppFlow```#### The Old Way: Copy/Paste TokenInstalledAppFlow’s ***run_console()*** prompts you to copy/paste a tokenfrom a browser tab to Jupyter and used to work well, but that approachhas been deprecated. It can still be forced to work, but it’s not soeasy.#### The New Way: Gotta Have a WebserverThe new way which is now the ohawf default is ***run_local_server()***.This is what you encounter all the time with mobile apps when you see“Login with Google”. An embedded browser pops up, goes through login,then returns you to the mobile app. This works in Jupyter too. If youhave problems, run Jupyter &lt;a href=&quot;https://mikelev.in/ux/&quot;&gt;thisway&lt;/a&gt;. And if you need to force ohawf to use run_console() for aserver installation, you can do this:``` pythonimport ohawfcreds = ohawf.get(cli=True)```But then you’ll have to whitelist your email address, and you can onlydo that through the [Google CloudConsole](https://console.cloud.google.com/) so chicken-and-egg. If youhave to go that route, consider just registering as a Google developerand downloading a OAuth Client secret json file like this:- Go to &lt;https://console.cloud.google.com&gt;- Make sure you’re in the correct Google account.- Create a new Project.- Go to API &amp; Services.- Enable the APIs &amp; Services you want to use.- Go to Credentials.- Create a new OAuth 2.0 Client IDs of the Desktop App type.- Go to OAuth consent screen and set it up.- Go to +Add users, under test users (gets around tight security)- Add the users for the test (your gmail, necessary even though already  the app owner)- Go back to Credentials and download OAuth Client.  - Typically,    ***client_secret\_\[secret\].apps.googleusercontent.com.json***- Use that file with ohawfOnce you have the Client Secret JSON file, you can call ohawf like this:``` pythonimport ohawfcreds = ohawf.get(file=&quot;client_secret.json&quot;)```### Adding ScopesThe ohawf package uses the following default scopes if you don’t setany:    https://www.googleapis.com/auth/spreadsheets    https://www.googleapis.com/auth/gmail.modify    https://www.googleapis.com/auth/userinfo.email    https://www.googleapis.com/auth/youtube.readonly    https://www.googleapis.com/auth/analytics.readonly    https://www.googleapis.com/auth/webmasters.readonly    https://www.googleapis.com/auth/yt-analytics.readonly    https://www.googleapis.com/auth/photoslibrary.readonlyIf you want to set your own scopes, create a Python list of scopes andfeed it to ohawf:``` pythonscopes = [&quot;https://www.googleapis.com/auth/spreadsheets&quot;]creds = ohawf(scopes=scopes)```## Google Services    from apiclient.discovery import buildConnect to Google services by giving ***build*** any (activated) APIname, version and credentials such listing your GSC sites:    gsc_service = build('searchconsole', 'v1', credentials=cred)    gsc_sites = gsc_service.sites().list().execute()    [print(x['siteUrl']) for x in gsc_sites['siteEntry']];…or this go list your GA accounts:    ga_service = build('analytics', 'v3', credentials=cred)    ga_accounts = ga_service.management().accounts().list().execute()    [print((x['id'], x['name'])) for x in ga_accounts['items']];## Copyright (c) 2023 Mike LevinPermission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the“Software”), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.# Privacy Policy## Last updated: December 31, 2022This app does not collect nor use any of Your Personal data.</longdescription>
</pkgmetadata>