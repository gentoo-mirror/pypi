<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>DGG-bot=======.. image:: https://img.shields.io/pypi/v/dgg-bot.svg   :target: https://pypi.python.org/pypi/dgg-bot   :alt: PyPI version info.. image:: https://img.shields.io/pypi/pyversions/dgg-bot.svg   :target: https://pypi.python.org/pypi/dgg-bot   :alt: PyPI supported Python versionsA library for making a bot in Destiny.gg chat.Installing----------**Python 3.9 or higher is required** (version 0.5.0 and above, Python 3.8+ for versions below).. code:: sh    # Linux/macOS    python3 -m pip install -U dgg-bot    # Windows    py -3 -m pip install -U dgg-botUsage-----Not sure what to put here at this point in time. Unauthorized chat bots are subject to being **banned**, ask Cake in DGG for permission and guidelines for chat bots before running one.Examples--------A simple bot with three commands and will yump back at chatters... code-block:: python    from dggbot import DGGBot    import time    bot = DGGBot(        &quot;AUTH_TOKEN&quot;,        owner=&quot;Owner&quot;,        prefix=&quot;$&quot;,    )  # default command prefix is &quot;!&quot;    @bot.command()    @bot.is_owner()  # only the owner named in DGGBot can use this command.    def test(msg):  # $test        msg.reply(&quot;Test 123&quot;)    @bot.command(aliases=[&quot;banmeplease&quot;])  # aliases for this command    def banme(msg):  # $banme / $banmeplease        bot.send(&quot;RightToBearArmsLOL BINGQILIN nathanTiny2&quot;)    def is_cake(msg):  # a check where only the user Cake can use commands with this check        return msg.nick == &quot;Cake&quot;    @bot.command(aliases=[&quot;oooo&quot;])    @bot.check(is_cake)    def pog(msg):        msg.reply(&quot;Cake OOOO&quot;)    &quot;&quot;&quot;    Events    You can either name the function after the event, or include the event name in the decorator.    mention() is also included as a shortcut for event(&quot;on_mention&quot;).    Event names: on_ban, on_broadcast, on_join, on_mention, on_msg, on_mute, on_privmsg, on_quit,                 on_refresh, on_unban    &quot;&quot;&quot;    @bot.event()    def on_msg(msg):        print(msg)    # @bot.event(&quot;on_mention&quot;)    @bot.mention()    def yump(msg):        if &quot;MiyanoHype&quot; in msg.data:            time.sleep(0.5)            msg.reply(f&quot;{msg.nick} MiyanoHype&quot;)    if __name__ == &quot;__main__&quot;:        bot.run_forever()Connecting to alternative DGG environments... code-block:: python    from dggbot import DGGBot    bot = DGGBot(        owner=&quot;Owner&quot;,        prefix=&quot;$&quot;,        sid=&quot;SID&quot;,        rememberme=&quot;REMEMBERME&quot;,        config={            {                &quot;wss&quot;: &quot;wss://chat.omniliberal.dev/ws&quot;,                &quot;wss-origin&quot;: &quot;https://www.omniliberal.dev&quot;,                &quot;baseurl&quot;: &quot;https://www.omniliberal.dev&quot;,                &quot;endpoints&quot;: {&quot;user&quot;: &quot;/api/chat/me&quot;, &quot;userinfo&quot;: &quot;/api/userinfo&quot;},                &quot;flairs&quot;: &quot;https://cdn.omniliberal.dev/flairs/flairs.json&quot;,            }        },    )    @bot.event()    def on_msg(msg):        print(msg)    if __name__ == &quot;__main__&quot;:        bot.run_forever()</longdescription>
</pkgmetadata>