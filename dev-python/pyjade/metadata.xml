<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======PyJade======PyJade is a high performance port of Jade-lang for python, that converts any .jade source to the each Template-language (Django, Jinja2, Mako or Tornado).UTILITIES=========To simply output the conversion to your console::    pyjade [-c django|jinja|mako|tornado] input.jade [output.html]INSTALLATION============First, you must do::    pip install pyjadeOr::    python setup.py installNow simply **name your templates with a `.jade` extension** and this jade compilerwill do the rest.  Any templates with other extensions will not be compiledwith the pyjade compiler.Django------In `settings.py`, add a `loader` to `TEMPLATES` like so:.. code:: python    TEMPLATES = [        {            'BACKEND': 'django.template.backends.django.DjangoTemplates',            'DIRS': [],            'OPTIONS': {                'context_processors': [                    'django.template.context_processors.debug',                    'django.template.context_processors.request',                    'django.contrib.auth.context_processors.auth',                    'django.contrib.messages.context_processors.messages',                    'django.core.context_processors.request'                ],                'loaders': [                    # PyJade part:   ##############################                    ('pyjade.ext.django.Loader', (                        'django.template.loaders.filesystem.Loader',                        'django.template.loaders.app_directories.Loader',                    ))                ],                'builtins': ['pyjade.ext.django.templatetags'],  # Remove this line for Django 1.8            },        },    ]Jinja2------Just add `pyjade.ext.jinja.PyJadeExtension` as extension.. code:: python    jinja_env = Environment(extensions=['pyjade.ext.jinja.PyJadeExtension'])Mako----Just add  `pyjade.ext.mako.preprocessor` as preprocessor.. code:: python    from pyjade.ext.mako import preprocessor as mako_preprocessor    mako.template.Template(haml_source,        preprocessor=mako_preprocessor    )Flask-----Just add  `pyjade.ext.jinja.PyJadeExtension` as extension to the environment of the app.. code:: python    app.jinja_env.add_extension('pyjade.ext.jinja.PyJadeExtension')Pyramid-------Adjust your &quot;your_project/__init__.py&quot; and add the following line somewhere to in the main() function.. code:: python    config.include('pyjade.ext.pyramid')Tornado Templates-----------------Append this after importing tornado.template.. code:: python    from tornado import template    from pyjade.ext.tornado import patch_tornado    patch_tornado()    (...)Syntax======Exactly the same as the Jade Node.js module (except of cases, which are not implemented)https://github.com/visionmedia/jade/blob/master/README.mdExample-------This code.. code:: jade    !!! 5    html(lang=&quot;en&quot;)      head        title= pageTitle        script(type='text/javascript')          if (foo) {             bar()          }      body        h1.title Jade - node template engine        #container          if youAreUsingJade            p You are amazing          else            p Get on it!Converts to.. code:: html    &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;      &lt;head&gt;        &lt;title&gt;{{pageTitle}}&lt;/title&gt;        &lt;script type='text/javascript'&gt;          if (foo) {             bar()          }        &lt;/script&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;h1 class=&quot;title&quot;&gt;Jade - node template engine&lt;/h1&gt;        &lt;div id=&quot;container&quot;&gt;          {%if youAreUsingJade%}            &lt;p&gt;You are amazing&lt;/p&gt;          {%else%}            &lt;p&gt;Get on it!&lt;/p&gt;          {%endif%}        &lt;/div&gt;      &lt;/body&gt;    &lt;/html&gt;Register filters================If you want to register a function as a filter, you only have todecorate the function with ``pyjade.register_filter(&quot;filter_name&quot;)``.. code:: python    import pyjade    @pyjade.register_filter('capitalize')    def capitalize(text,ast):      return text.capitalize()TESTING=======You must have `nose` package installed.You can do the tests with::        ./test.shTODOs and BUGS==============See: http://github.com/syrusakbary/pyjade/issues</longdescription>
</pkgmetadata>