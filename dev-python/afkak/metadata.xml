<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Afkak is a [Twisted](https://twistedmatrix.com/)-native [Apache Kafka](https://kafka.apache.org/) client library.It provides support for:* Producing messages, with automatic batching and optional compression.* Consuming messages, with group coordination and automatic commit.Learn more in the **[documentation](https://afkak.readthedocs.io/en/latest/)**, download [from PyPI](https://pypi.org/projects/afkak), or review the [contribution guidelines](./CONTRIBUTING.md).Please report any issues [on GitHub](https://github.com/ciena/afkak/issues).# StatusAfkak supports these Pythons:- CPython 3.5, 3.6, 3.7, 3.8, and 3.9- PyPy3We aim to support Kafka 1.1.&lt;var&gt;x&lt;/var&gt; and later.Integration tests are run against these Kafka broker versions:- 0.9.0.1- 1.1.1Testing against 2.0.0 is planned (see [#45](https://github.com/ciena/afkak/issues/45)).Newer broker releases will generally function, but not all Afkak features will work on older brokers.In particular, the coordinated consumer won’t work before Kafka 0.9.0.1.We don’t recommend deploying such old releases of Kafka anyway, as they have serious bugs.# Usage### High levelNote: This code is not meant to be runnable. See [producer\_example](./producer_example) and [consumer\_example](./consumer_example) for runnable example code.```pythonfrom afkak.client import KafkaClientfrom afkak.consumer import Consumerfrom afkak.producer import Producerfrom afkak.common import (OFFSET_EARLIEST, PRODUCER_ACK_ALL_REPLICAS,    PRODUCER_ACK_LOCAL_WRITE)kClient = KafkaClient(&quot;localhost:9092&quot;)# To send messagesproducer = Producer(kClient)d1 = producer.send_messages(&quot;my-topic&quot;, msgs=[b&quot;some message&quot;])d2 = producer.send_messages(&quot;my-topic&quot;, msgs=[b&quot;takes a list&quot;, b&quot;of messages&quot;])# To get confirmations/errors on the sends, add callbacks to the returned deferredsd1.addCallbacks(handleResponses, handleErrors)# To wait for acknowledgements# PRODUCER_ACK_LOCAL_WRITE : server will wait till the data is written to#                         a local log before sending response# [ the default ]# PRODUCER_ACK_ALL_REPLICAS : server will block until the message is committed#                            by all in sync replicas before sending a responseproducer = Producer(kClient,                    req_acks=Producer.PRODUCER_ACK_LOCAL_WRITE,                    ack_timeout=2000)responseD = producer.send_messages(&quot;my-topic&quot;, msgs=[b&quot;message&quot;])# Using twisted's @inlineCallbacks:responses = yield responseDif response:    print(response[0].error)    print(response[0].offset)# To send messages in batch: You can use a producer with any of the# partitioners for doing this. The following producer will collect# messages in batch and send them to Kafka after 20 messages are# collected or every 60 seconds (whichever comes first). You can# also batch by number of bytes.# Notes:# * If the producer dies before the messages are sent, the caller would# * not have had the callbacks called on the send_messages() returned# * deferreds, and so can retry.# * Calling producer.stop() before the messages are sent will# errback() the deferred(s) returned from the send_messages call(s)producer = Producer(kClient, batch_send=True,                    batch_send_every_n=20,                    batch_send_every_t=60)responseD1 = producer.send_messages(&quot;my-topic&quot;, msgs=[b&quot;message&quot;])responseD2 = producer.send_messages(&quot;my-topic&quot;, msgs=[b&quot;message 2&quot;])# To consume messages# define a function which takes a list of messages to process and# possibly returns a deferred which fires when the processing is# complete.def processor_func(consumer, messages):    #  Store_Messages_In_Database may return a deferred    result = store_messages_in_database(messages)    # record last processed message    consumer.commit()    return resultthe_partition = 3  # Consume only from partition 3.consumer = Consumer(kClient, &quot;my-topic&quot;, the_partition, processor_func)d = consumer.start(OFFSET_EARLIEST)  # Start reading at earliest message# The deferred returned by consumer.start() will fire when an error# occurs that can't handled by the consumer, or when consumer.stop()# is calledyield dconsumer.stop()kClient.close()```#### Keyed messages```pythonfrom afkak.client import KafkaClientfrom afkak.producer import Producerfrom afkak.partitioner import HashedPartitioner, RoundRobinPartitionerkafka = KafkaClient(&quot;localhost:9092&quot;)# Use the HashedPartitioner so that the producer will use the optional key# argument on send_messages()producer = Producer(kafka, partitioner_class=HashedPartitioner)producer.send_messages(&quot;my-topic&quot;, &quot;key1&quot;, [b&quot;some message&quot;])producer.send_messages(&quot;my-topic&quot;, &quot;key2&quot;, [b&quot;this method&quot;])```### Low level```pythonfrom afkak.client import KafkaClientkafka = KafkaClient(&quot;localhost:9092&quot;)req = ProduceRequest(topic=&quot;my-topic&quot;, partition=1,    messages=[KafkaProtocol.encode_message(b&quot;some message&quot;)])resps = afkak.send_produce_request(payloads=[req], fail_on_error=True)kafka.close()resps[0].topic      # b&quot;my-topic&quot;resps[0].partition  # 1resps[0].error      # 0 (hopefully)resps[0].offset     # offset of the first message sent in this request```# InstallAfkak releases are [available on PyPI][afkak-pypi].Because the Afkak dependencies [Twisted][twisted] and [python-snappy][python-snappy] have binary extension modules you will need to install the Python development headers for the interpreter you wish to use:[afkak-pypi]: https://pypi.python.org/pypi/afkak[twisted]: https://pypi.python.org/pypi/Twisted[python-snappy]: https://pypi.python.org/pypi/python-snappy&lt;table&gt;&lt;tr&gt;&lt;td&gt;Debian/Ubuntu:&lt;td&gt;&lt;code&gt;sudo apt-get install build-essential python3-dev pypy3-dev libsnappy-dev&lt;/code&gt;&lt;tr&gt;&lt;td&gt;OS X&lt;td&gt;&lt;code&gt;brew install python pypy snappy&lt;/code&gt;&lt;/br&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/td&gt;&lt;/table&gt;Then Afkak can be [installed with pip as usual][pip-install]:[pip-install]: https://packaging.python.org/en/latest/installing/# LicenseCopyright 2013, 2014, 2015 David Arthur under Apache License, v2.0. See `LICENSE`Copyright 2014, 2015 Cyan, Inc. under Apache License, v2.0. See `LICENSE`Copyright 2015–2021 Ciena Corporation under Apache License, v2.0. See `LICENSE`This project began as a port of the [kafka-python][kafka-python] library to Twisted.[kafka-python]: https://github.com/mumrah/kafka-pythonSee [AUTHORS.md](./AUTHORS.md) for the full contributor list.</longdescription>
</pkgmetadata>