<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Welcome to Atom===============.. image:: https://github.com/nucleic/atom/workflows/Continuous%20Integration/badge.svg    :target: https://github.com/nucleic/atom/actions.. image:: https://github.com/nucleic/atom/workflows/Documentation%20building/badge.svg    :target: https://github.com/nucleic/atom/actions.. image:: https://codecov.io/gh/nucleic/atom/branch/main/graph/badge.svg    :target: https://codecov.io/gh/nucleic/atom.. image:: https://readthedocs.org/projects/atom/badge/?version=latest    :target: https://atom.readthedocs.io/en/latest/?badge=latest    :alt: Documentation StatusAtom is a framework for creating memory efficient Python objects with enhancedfeatures such as dynamic initialization, validation, and change notification forobject attributes. It provides the default model binding behavior for the`Enaml &lt;https://enaml.readthedocs.io/en/latest/&gt;`_ UI framework.Examples:.. code-block:: python    from atom.api import Atom, Str, Range, Bool, observe    class Person(Atom):        &quot;&quot;&quot; A simple class representing a person object.        &quot;&quot;&quot;        last_name = Str()        first_name = Str()        age = Range(low=0)        debug = Bool(False)        @observe('age')        def debug_print(self, change):            &quot;&quot;&quot; Prints out a debug message whenever the person's age changes.            &quot;&quot;&quot;            if self.debug:                templ = &quot;{first} {last} is {age} years old.&quot;                s = templ.format(                    first=self.first_name, last=self.last_name, age=self.age,                )                print(s)        def _default_first_name(self):            return 'John'    john = Person(last_name='Doe', age=42)    john.debug = True    john.age = 43  # prints message    john.age = 'forty three'   # raises TypeErrorStarting with atom 0.8.0 atom object can also be defined using type annotations... code-block:: python    from atom.api import Atom, observe    class InventoryItem(Atom):        &quot;&quot;&quot;Class for keeping track of an item in inventory.&quot;&quot;&quot;        name: str        unit_price: float        quantity_on_hand: int = 0        def total_cost(self) -&gt; float:            return self.unit_price * self.quantity_on_hand        @observe(&quot;unit_price&quot;)        def check_for_price_reduction(self, change):            savings = change.get(&quot;oldvalue&quot;, 0) - change.get(&quot;value&quot;)            if savings &gt; 0:                print(f&quot;Save ${savings} now on {self.name}s!&quot;)    &gt;&gt;&gt; w = InventoryItem(name=&quot;widget&quot;, unit_price=1.99, quantity_on_hand=10)    &gt;&gt;&gt; w.unit_price = 1.00    Save $0.99 now on widgets!For version information, see `the Revision History &lt;https://github.com/nucleic/atom/blob/main/releasenotes.rst&gt;`_.</longdescription>
</pkgmetadata>