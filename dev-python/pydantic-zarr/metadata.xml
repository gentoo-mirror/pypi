<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pydantic-zarr[Pydantic](https://docs.pydantic.dev/1.10/) models for [Zarr](https://zarr.readthedocs.io/en/stable/index.html). Not stable. Do not use in production.## AboutThis library uses pydantic models to define a storage-independent JSON-serializable model of a [Zarr](https://zarr.readthedocs.io/en/stable/index.html) hierarchy, i.e. a tree of groups and arrays. This representation of the hierarchy can be derived from, and serialized to, any zarr store. These models can also be validated.## ExamplesRepresent an existing zarr hierarchy in a storage-independent manner:```pythonfrom zarr import groupfrom zarr.creation import createfrom zarr.storage import MemoryStorefrom pydantic_zarr.core import GroupSpec# create an in-memory zarr group + array with attributesstore = MemoryStore()grp = group(store=store, path=)grp.attrs.put({'foo': 10})arr = create(path='foo/bar',store=store, shape=(10,), dtype='float32')arr.attrs.put({'array_metadata': True})spec = GroupSpec.from_zarr(grp)print(spec.json(indent=2))&quot;&quot;&quot;{  &quot;zarr_version&quot;: 2,  &quot;attrs&quot;: {    &quot;foo&quot;: 10  },  &quot;items&quot;: {    &quot;bar&quot;: {      &quot;zarr_version&quot;: 2,      &quot;attrs&quot;: {        &quot;array_metadata&quot;: true      },      &quot;shape&quot;: [        10      ],      &quot;chunks&quot;: [        10      ],      &quot;dtype&quot;: &quot;float32&quot;,      &quot;fill_value&quot;: 0,      &quot;order&quot;: &quot;C&quot;,      &quot;filters&quot;: null,      &quot;dimension_separator&quot;: &quot;.&quot;,      &quot;compressor&quot;: {        &quot;id&quot;: &quot;blosc&quot;,        &quot;cname&quot;: &quot;lz4&quot;,        &quot;clevel&quot;: 5,        &quot;shuffle&quot;: 1,        &quot;blocksize&quot;: 0      }    }  }}&quot;&quot;&quot;# modify the spec to define a new zarr hierarchyspec2 = spec.copy()spec2.attrs = {'a': 100, 'b': 'metadata'}spec2.items['bar'].shape = (100,)# serialize the spec to the storegroup2 = spec2.to_zarr(store, path='foo2')print(group2)#&gt; &lt;zarr.hierarchy.Group '/foo2'&gt;print(dict(group2.attrs))#&gt; {'a': 100, 'b': 'metadata'}print(group2['bar'])#&gt; &lt;zarr.core.Array '/foo2/bar' (100,) float32&gt;print(dict(group2['bar'].attrs))#&gt; {'array_metadata': True}```Use type annotations to restrict the structure of group attributes and group contents```pythonfrom pydantic_zarr import GroupSpec, ArraySpecfrom pydantic import ValidationErrorfrom typing import Any, TypedDictclass GroupAttrs(TypedDict):    a: int    b: int# specify a zarr group that must have specific attributesSpecificAttrsGroup = GroupSpec[GroupAttrs, Any]try:    SpecificAttrsGroup(attrs={'a' : 10, 'b': 'foo'})except ValidationError as exc:    print(exc)    &quot;&quot;&quot;    1 validation error for GroupSpec[GroupAttrs, Any]    attrs -&gt; b        value is not a valid integer (type=type_error.integer)    &quot;&quot;&quot;# this passes validationprint(SpecificAttrsGroup(attrs={'a': 100, 'b': 100}))#&gt; zarr_version=2 attrs={'a': 100, 'b': 100} items={}# specify a zarr group that can only contain arrays, not other groupsArraysOnlyGroup = GroupSpec[Any, ArraySpec]try:    ArraysOnlyGroup(attrs={}, items={'foo': GroupSpec(attrs={})})except ValidationError as exc:    print(exc)    &quot;&quot;&quot;    4 validation errors for GroupSpec[Any, ArraySpec]    items -&gt; foo -&gt; shape        field required (type=value_error.missing)    items -&gt; foo -&gt; chunks        field required (type=value_error.missing)    items -&gt; foo -&gt; dtype        field required (type=value_error.missing)    items -&gt; foo -&gt; items        extra fields not permitted (type=value_error.extra)    &quot;&quot;&quot;# this passes validationprint(ArraysOnlyGroup(attrs={}, items={'foo': ArraySpec(attrs={}, shape=(1,), dtype='uint8', chunks=(1,))}))#&gt; zarr_version=2 attrs={} items={'foo': ArraySpec(zarr_version=2, attrs={}, shape=(1,), chunks=(1,), dtype='uint8', fill_value=0, order='C', filters=None, dimension_separator='/', compressor=None)}```</longdescription>
</pkgmetadata>