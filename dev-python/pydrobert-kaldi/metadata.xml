<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build status](https://ci.appveyor.com/api/projects/status/lvjhj9pgju90wn8j?svg=true)](https://ci.appveyor.com/project/sdrobert/pydrobert-kaldi)[![Documentation Status](https://readthedocs.org/projects/pydrobert-kaldi/badge/?version=latest)](https://pydrobert-kaldi.readthedocs.io/en/latest/?badge=latest)[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)# pydrobert-kaldiSome [Kaldi](http://kaldi-asr.org/) bindings for Python. I started this projectbecause I wanted to seamlessly incorporate [Kaldi's I/Omechanism](http://kaldi-asr.org/doc/io.html) into the gamut of Python-baseddata science packages (e.g. Theano, Tensorflow, CNTK, PyTorch, etc.). The codebase is expanding to wrap more of Kaldi's feature processing and mathematicalfunctions, but is unlikely to include modelling or decoding.Eventually, I plan on adding hooks for Kaldi audio features and pre-/post-processing. However, I have no plans on porting any code involving modelling ordecoding.**This is student-driven code, so don't expect a stable API. I'll try to usesemantic versioning, but the best way to keep functionality stable is byforking.**## Documentation- [Latest](https://pydrobert-kaldi.readthedocs.io/en/latest/)## Input/OutputMost I/O can be performed with the `pydrobert.kaldi.io.open` function:``` pythonfrom pydrobert.kaldi import iowith io.open('scp:foo.scp', 'bm') as f:     for matrix in f:         ...````open` is a factory function that determines the appropriate underlying streamto open, much like Python's built-in `open`. The data types we can read (here,a `BaseMatrix`) are listed in `pydrobert.kaldi.io.enums.KaldiDataType`. Bigdata types, like matrices and vectors, are piped into Numpy arrays. Passing anextended filename  (e.g. paths to files on discs, `'-'` for stdin/stdout,`'gzip -c a.ark.gz |'`, etc.) opens a stream from which data types can be readone-by-one and in the order they were written. Alternatively, prepending theextended filename with `'ark[,[option_a[,option_b...]]:'` or `'scp[,...]:'` andspecifying a data type allows one to open a Kaldi table for iterator-likesequential reading (`mode='r'`), dict-like random access reading (`mode='r+'`),or writing (`mode='w'`). For more information on the open function, consult thedocstring.The submodule `pydrobert.kaldi.io.corpus` contains useful wrappers around KaldiI/O to serve up batches of data to, say, a neural network:``` pythontrain = ShuffledData('scp:feats.scp', 'scp:labels.scp', batch_size=10)for feat_batch, label_batch in train:    ...```## Logging and CLIBy default, Kaldi error, warning, and critical messages are piped to standarderror. The `pydrobert.kaldi.logging` submodule provides hooks into python'snative logging interface: the `logging` module. The :class:`KaldiLogger` canhandle stack traces from Kaldi C++ code, and there are a variety of decoratorsto finagle the kaldi logging patterns to python logging patterns, or viceversa.You'd likely want to explicitly handle logging when creating new kaldi-stylecommands for command line. `pydrobert.kaldi.io.argparse` provides:class:`KaldiParser`, an :class:`ArgumentParser` tailored to Kaldiinputs/outputs. It is used by a few command-line entry points added by thispackage. See the [Command-LineInterface](http://pydrobert-kaldi.readthedocs.io/en/latest/cli.html) page fordetails.## InstallationPrepackaged binaries of tagged versions of `pydrobert-kaldi` are available formost 64-bit platforms (Windows, Glibc Linux, OSX) and most active Pythonversions (3.7-3.11) on both [conda](https://docs.conda.io/en/latest/) and[PyPI](https://pypi.org/).To install via [conda](https://docs.conda.io/en/latest/)``` sh   conda install -c sdrobert pydrobert-kaldi```A [conda-forge](https://conda-forge.org/) version is TBD.To install via [PyPI](https://pypi.org/)``` sh   pip install pydrobert-kaldi```You can also try building the cutting-edge version. To do so, you'll need tofirst install [SWIG 4.0](https://www.swig.org/) and an appropriate C++compiler, then``` sh   pip install git+https://github.com/sdrobert/pydrobert-kaldi.git```The current version does not require a BLAS install, though it likely will inthe future as more is wrapped.## LicenseThis code is licensed under Apache 2.0.Code found under the `src/` directory has been primarily copied from Kaldi.`setup.py` is also strongly influenced by Kaldi's build configuration. Kaldi isalso covered by the Apache 2.0 license; its specific license file was copiedinto `src/COPYING_Kaldi_Project` to live among its fellows.## How to CitePlease see the [pydrobert page](https://github.com/sdrobert/pydrobert) for moredetails.</longdescription>
</pkgmetadata>