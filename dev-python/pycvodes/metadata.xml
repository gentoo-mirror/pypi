<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pycvodes========.. image:: http://hera.physchem.kth.se:9090/api/badges/bjodah/pycvodes/status.svg   :target: http://hera.physchem.kth.se:9090/bjodah/pycvodes   :alt: Build status on private Drone server.. image:: https://circleci.com/gh/bjodah/pycvodes.svg?style=svg   :target: https://circleci.com/gh/bjodah/pycvodes   :alt: Build status on CircleCI.. image:: https://secure.travis-ci.org/bjodah/pycvodes.svg?branch=master   :target: http://travis-ci.org/bjodah/pycvodes   :alt: Build status on Travis-CI.. image:: https://img.shields.io/pypi/v/pycvodes.svg   :target: https://pypi.python.org/pypi/pycvodes   :alt: PyPI version.. image:: https://img.shields.io/pypi/l/pycvodes.svg   :target: https://github.com/bjodah/pycvodes/blob/master/LICENSE   :alt: License.. image:: https://zenodo.org/badge/43224425.svg   :target: https://zenodo.org/badge/latestdoi/43224425`pycvodes &lt;https://github.com/bjodah/pycvodes&gt;`_ provides a`Python &lt;http://www.python.org&gt;`_ binding to the`Ordinary Differential Equation &lt;https://en.wikipedia.org/wiki/Ordinary_differential_equation&gt;`_integration routines from `cvodes &lt;https://computation.llnl.gov/casc/sundials/description/description.html#descr_cvodes&gt;`_ in the`SUNDIALS suite &lt;https://computation.llnl.gov/casc/sundials/main.html&gt;`_. ``pycvodes`` allows a user to numerically integrate(systems of) differential equations. Note that routines for sensitivity analysis is not yet exposed in this binding (which makesthe functionality essentially the same as cvode). The following multistep methods are available:- ``bdf``: Backward differentiation formula (of order 1 to 5)- ``adams``: implicit Adams method (order 1 to 12)Note that bdf (as an implicit stepper) requires a user suppliedcallback for calculating the jacobian.You may also want to know that you can use ``pycvodes`` from`pyodesys &lt;https://github.com/bjodah/pyodesys&gt;`_which can e.g. derive the Jacobian analytically (using SymPy). Pyodesys also providesplotting functions, C++ code-generation and more.Documentation-------------Autogenerated API documentation for latest stable release is found here:`&lt;https://bjodah.github.io/pycvodes/latest&gt;`_(and the development version for the current master branch are found here:`&lt;http://hera.physchem.kth.se/~pycvodes/branches/master/html&gt;`_).Installation------------Simplest way to install is to use the `conda package manager &lt;http://conda.pydata.org/docs/&gt;`_:::   $ conda install -c conda-forge pycvodes pytest   $ python -m pytest --pyargs pycvodestests should pass.Manual installation~~~~~~~~~~~~~~~~~~~Binary distribution is available here:`&lt;https://anaconda.org/bjodah/pycvodes&gt;`_Source distribution is available here:`&lt;https://pypi.python.org/pypi/pycvodes&gt;`_When installing from source you can choose what lapack lib to link against by settingthe environment variable ``PYCVODES_LAPACK``, your choice can later be accessed from python:.. code:: python   &gt;&gt;&gt; from pycvodes import config   &gt;&gt;&gt; config['LAPACK']  # doctest: +SKIP   'lapack,blas'If you use ``pip`` to install ``pycvodes``, note that prior to installing pycvodes, you will needto install sundials (pycvodes&gt;=0.12.0 requires sundials&gt;=5.1.0, pycvodes&lt;0.12 requires sundials&lt;5)and its development headers, with cvodes &amp; lapack enabledExamples--------The classic van der Pol oscillator (see `examples/van_der_pol.py &lt;examples/van_der_pol.py&gt;`_).. code:: python   &gt;&gt;&gt; import numpy as np   &gt;&gt;&gt; from pycvodes import integrate_predefined  # also: integrate_adaptive   &gt;&gt;&gt; mu = 1.0   &gt;&gt;&gt; def f(t, y, dydt):   ...     dydt[0] = y[1]   ...     dydt[1] = -y[0] + mu*y[1]*(1 - y[0]**2)   ...    &gt;&gt;&gt; def j(t, y, Jmat, dfdt=None, fy=None):   ...     Jmat[0, 0] = 0   ...     Jmat[0, 1] = 1   ...     Jmat[1, 0] = -1 - mu*2*y[1]*y[0]   ...     Jmat[1, 1] = mu*(1 - y[0]**2)   ...     if dfdt is not None:   ...         dfdt[:] = 0   ...   &gt;&gt;&gt; y0 = [1, 0]; dt0=1e-8; t0=0.0; atol=1e-8; rtol=1e-8   &gt;&gt;&gt; tout = np.linspace(0, 10.0, 200)   &gt;&gt;&gt; yout, info = integrate_predefined(f, j, y0, tout, atol, rtol, dt0,   ...                                   method='bdf')   &gt;&gt;&gt; import matplotlib.pyplot as plt   &gt;&gt;&gt; series = plt.plot(tout, yout)   &gt;&gt;&gt; plt.show()  # doctest: +SKIP.. image:: https://raw.githubusercontent.com/bjodah/pycvodes/master/examples/van_der_pol.pngFor more examples see `examples/ &lt;https://github.com/bjodah/pycvodes/tree/master/examples&gt;`_, and rendered jupyter notebooks here:`&lt;http://hera.physchem.kth.se/~pycvodes/branches/master/examples&gt;`_License-------The source code is Open Source and is released under the simplified 2-clause BSD license. See `LICENSE &lt;LICENSE&gt;`_ for further details.Contributors are welcome to suggest improvements at https://github.com/bjodah/pycvodesAuthor------Bj√∂rn I. Dahlgren, contact:- gmail address: bjodahSee file `AUTHORS &lt;AUTHORS&gt;`_ in root for a list of all authors.</longdescription>
</pkgmetadata>