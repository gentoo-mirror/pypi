<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Profile of 1 Extension for the Base Python Module of the Cortex Cognitive Platform[cortex-python][https://github.com/CognitiveScale/cortex-python]The Cortex Python Profiles module extends the [Base Python Module of the Cortex Cognitive Platform](cortex-python) with Profile of 1 related functionality. Refer to the Cortex documentation for details on how to use the library: - Developer guide: https://docs.cortex.insights.ai/docs/developer-guide/overview/- Cortex Python references: https://docs.cortex.insights.ai/docs/developer-guide/reference-guides## InstallationTo install: ```  &gt; pip install cortex-python-profiles```or from source code:```  &gt; git clone git@github.com:CognitiveScale/cortex-python-profiles.git  &gt; cd cortex-python-profiles  &gt; pip install -e .```## Development ### SetupWhen developing, it's a best practice to work in a virtual environment. Create and activate a virtual environment:```  &gt; virtualenv --python=python3.6 _venv  &gt; source _venv/bin/activate```Install developer dependencies:```  &gt; git clone git@github.com:CognitiveScale/cortex-python-profiles.git  &gt; cd cortex-python-profiles  &gt; make dev.install```There's a convenience `Makefile` that has commands to common tasks, such as build, test, etc. Use it!### Testing#### Unit TestsFollow above setup instructions (making sure to be in the virtual environment and having the necessary dependencies)- `make test` to run test suiteTo run an individual file or class method, use pytest. Example tests shown below:- file: `pytest test/unit/agent_test.py` - class method: `pytest test/unit/agent_test.py::TestAgent::test_get_agent`#### Publishing an alpha buildSuppose you want to release new functionality so it can be installed without releasing a new official version. We need to use an alpha version in PyPi.- we need to create and publish an alpha release:- get credentials to the `cortex-python` pypi CognitiveScale account (via lastpass)- run `make dev.push TAG=&lt;alpha release number&gt;`. Example: `make dev.push TAG=1`### Contribution After contributing to the library, and before you submit changes as a PR, please do the following1. Run unit tests via `make test`2. Manually verification (i.e. try the new changes out in Cortex) to make sure everything is going well. Not required, but highly encouraged.3. Bump up `setup.py` version and update the `CHANGELOG.md` ### DocumentationActivate your virtual environment:```&gt; source _venv/bin/activate```Setup your environment, if you have not done so:```&gt; make dev.install ```The package documentation is built with Sphinx and generates versioned documentation for all tag matching the `release/X.Y.Z` pattern and for the `master` branch. To build the documentation:```&gt; make docs.multi```The documentation will be rendered in HTML format under the `docs/_build/${VERSION}` directory.### Pre-release to staging1. Create and push an alpha release:    ```    &gt; make dev.push TAG=1    ```    Where `TAG` is the alpha version number. This will build an alpha-tagged package.2. Merge `develop` to `staging` branch:    ```    &gt; make stage    ```3. In GitHub, create a pull request from `staging` to `master`.</longdescription>
</pkgmetadata>