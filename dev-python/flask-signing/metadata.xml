<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Signing logo](https://raw.githubusercontent.com/signebedi/Flask-Signing/master/docs/combined.png)## Flask-Signing[![License: BSD-3-Clause](https://img.shields.io/github/license/signebedi/Flask-Signing?color=dark-green)](https://github.com/signebedi/Flask-Signing/blob/master/LICENSE) [![PyPI version](https://badge.fury.io/py/Flask-Signing.svg)](https://pypi.org/project/flask-signing/)[![Downloads](https://static.pepy.tech/personalized-badge/flask-signing?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=brightgreen&amp;left_text=Downloads)](https://pepy.tech/project/flask-signing)[![Flask-Signing tests](https://github.com/signebedi/Flask-Signing/workflows/tests/badge.svg)](https://github.com/signebedi/Flask-Signing/actions)[![Buy me a coffee](https://img.shields.io/badge/Buy%20me%20a%20coffee--brightgreen.svg?logo=buy-me-a-coffee&amp;logoColor=brightgreen)](https://www.buymeacoffee.com/signebedi)a signing key extension for flask### AboutThe Flask-Signing library is a useful tool for Flask applications that require secure and robust management of signing keys. Do you need to generate single-use tokens for one-time actions like email verification or password reset? Flask-Signing can handle that. Are you looking for a simple method for managing API keys? Look no further. ### InstallationFirst, install the flask_signing package. You can do this with pip:```bashpip install flask_signing```### Basic UsageAfter you've installed the flask_signing package, you can use it in your Flask application. Here's an example of how you might do this:```pythonfrom flask import Flaskfrom flask_sqlalchemy import SQLAlchemyfrom flask_signing import Signaturesapp = Flask(__name__)app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite://'  # Use your actual database URIapp.secret_key = &quot;Your_Key_Here&quot;with app.app_context():    signatures = Signatures(app, byte_len=24)@app.route('/sign')def sign():    key = signatures.write_key(scope='test', expiration=1, active=True, email='test@example.com')    return f'Key generated: {key}'@app.route('/verify/&lt;key&gt;')def verify(key):    valid = signatures.verify_key(signature=key, scope='example')    return f'Key valid: {valid}'@app.route('/expire/&lt;key&gt;')def expire(key):    expired = signatures.expire_key(key)    return f'Key expired: {expired}'    @app.route('/all')def all():    all = signatures.get_all()    return f'Response: {all}'```In this basic example, a new signing key is generated and written to the database when you visit the `/sign` route, and the key is displayed on the page. Then, when you visit the `/verify/&lt;key&gt;` route (replace &lt;key&gt; with the actual key), the validity of the key is checked and displayed. You can expire a key using the `/expire/&lt;key&gt;` route, and view all records with the `/all` route.This is a rather basic example and your actual use of the flask_signing package may be more complex depending on your needs. It's important to secure your signing keys and handle them appropriately according to your application's security requirements. Further usage examples can be found in the [examples](https://github.com/signebedi/Flask-Signing/tree/master/examples) directory of the Flask-Signing Github repository. ### DevelopersContributions are welcome! You can read the developer docs at https://signebedi.github.io/Flask-Signing. If you're interested, review (or add to) the feature ideas at https://github.com/signebedi/Flask-Signing/issues.</longdescription>
</pkgmetadata>