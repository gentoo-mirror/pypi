<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Peewee MigrationsA simple and flexible migration manager for Peewee ORM.* **Version:** 0.3.32* **Status:** Development/Alpha* **Author:** Churin Andrey# Requirements* python &gt;= 3.5* latest peewee## NoteSQLite is not supported.## Quick startThis package can be installed using pip:```bash$ pip install peewee-migrations```Run `pem init` in the project root.```bash$ pem initConfiguration file 'migrations.json' was created.```Suppose we have `Foo` model in `models.py````pythonclass Foo(db.Model):    bar = peewee.CharField(max_length=50)    baz = peewee.IntegerField()    quux = peewee.IntegerField()```Add this model to the watch list and create migration.```bash$ pem add models.FooModel 'models.Foo' was added to the watch list.$ pem watchMigration `0001_migration_201807191008` has been created.```Now you can list available migrations:```bash$ pem list[ ] 0001_migration_201807191008```Or view SQL that will be executed during migration:```bash$ pem show[ ] 0001_migration_201807191008:  SQL&gt; CREATE TABLE &quot;foo&quot; (&quot;id&quot; SERIAL NOT NULL PRIMARY KEY, &quot;bar&quot; VARCHAR(50) NOT NULL, &quot;baz&quot; INTEGER NOT NULL, &quot;quux&quot; INTEGER NOT NULL) []  PY&gt;  set_done('0001_migration_201807191008')```Use `migrate` to run migrations:```bash$ pem migrate[X] 0001_migration_201807191008```Change model `Foo````pythonclass Foo(db.Model):    bar = peewee.CharField(max_length=20)    baz = peewee.IntegerField()    quux = peewee.IntegerField()    xyzzy = peewee.IntegerField()```and run `watch` to create new migration:```bash$ pem watchMigration `0002_migration_201807191036` has been created.$ pem show[ ] 0002_migration_201807191036:  SQL&gt; ALTER TABLE &quot;foo&quot; ADD COLUMN &quot;xyzzy&quot; INTEGER []  SQL&gt; ALTER TABLE &quot;foo&quot; RENAME COLUMN &quot;bar&quot; TO &quot;old__bar&quot; []  SQL&gt; ALTER TABLE &quot;foo&quot; ADD COLUMN &quot;bar&quot; VARCHAR(20) []  SQL&gt; UPDATE &quot;foo&quot; SET &quot;xyzzy&quot; = %s WHERE (&quot;xyzzy&quot; IS %s) [0, None]  SQL&gt; UPDATE &quot;foo&quot; SET &quot;bar&quot; = SUBSTRING(&quot;old__bar&quot;, %s, %s) WHERE (&quot;old__bar&quot; IS NOT %s) [1, 20, None]  SQL&gt; ALTER TABLE &quot;foo&quot; DROP COLUMN &quot;old__bar&quot; []  SQL&gt; ALTER TABLE &quot;foo&quot; ALTER COLUMN &quot;xyzzy&quot; SET NOT NULL []  SQL&gt; ALTER TABLE &quot;foo&quot; ALTER COLUMN &quot;bar&quot; SET NOT NULL []  PY&gt;  set_done('0002_migration_201807191036')```It's possible to create &quot;serialized&quot; migrations, run `pem watch --serialize`. In this case, explicit migration functions will be additionally created.```bash$ pem watch --serializeMigration `0001_migration_202112161523` has been created.```Additional code will be generated```python...def migrate_forward(op, old_orm, new_orm):    op.create_table(new_orm.foo)def migrate_backward(op, old_orm, new_orm):    op.drop_table(old_orm.foo)```And after changing the model```bash$ pem watch --serializeMigration `0002_migration_202112161527` has been created.``````python...def migrate_forward(op, old_orm, new_orm):    op.add_column(new_orm.foo.xyzzy)    op.rename_column(old_orm.foo.bar, 'old__bar')    op.add_column(new_orm.foo.bar)    op.run_data_migration()    op.drop_column(old_orm.foo.bar)    op.add_not_null(new_orm.foo.xyzzy)    op.add_not_null(new_orm.foo.bar)...def migrate_backward(op, old_orm, new_orm):    op.rename_column(old_orm.foo.bar, 'old__bar')    op.add_column(new_orm.foo.bar)    op.run_data_migration()    op.drop_column(old_orm.foo.xyzzy)    op.drop_column(old_orm.foo.bar)    op.add_not_null(new_orm.foo.bar)```Serialized migrations are performed only according to the operations specified in the migrate functions.To run migrations without a transaction, use `pem migrate --autocommit`. To view a list of operations that will be performed in this mode, use `pem show --autocommit` (some operations may differ).For more information on using the commands see --help.## migrations.json```{  &quot;prerun&quot;: &quot;some code here&quot;,  // some code to run before executing any command  &quot;directory&quot;: &quot;migrations&quot;,   // folder to hold migrations  &quot;history&quot;: &quot;migratehistory&quot;, // table to hold migration history  &quot;models&quot;: [                  // list of models to watch    &quot;module1.Model1&quot;,    &quot;module2.Model2&quot;  ]}```</longdescription>
</pkgmetadata>