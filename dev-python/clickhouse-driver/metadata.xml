<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ClickHouse Python Driver========================.. image:: https://img.shields.io/pypi/v/clickhouse-driver.svg    :target: https://pypi.org/project/clickhouse-driver.. image:: https://coveralls.io/repos/github/mymarilyn/clickhouse-driver/badge.svg?branch=master    :target: https://coveralls.io/github/mymarilyn/clickhouse-driver?branch=master.. image:: https://img.shields.io/pypi/l/clickhouse-driver.svg    :target: https://pypi.org/project/clickhouse-driver.. image:: https://img.shields.io/pypi/pyversions/clickhouse-driver.svg    :target: https://pypi.org/project/clickhouse-driver.. image:: https://img.shields.io/pypi/dm/clickhouse-driver.svg    :target: https://pypi.org/project/clickhouse-driver.. image:: https://github.com/mymarilyn/clickhouse-driver/actions/workflows/actions.yml/badge.svg   :target: https://github.com/mymarilyn/clickhouse-driver/actions/workflows/actions.ymlClickHouse Python Driver with native (TCP) interface support.Asynchronous wrapper is available here: https://github.com/mymarilyn/aiochFeatures========- External data for query processing.- Query settings.- Compression support.- TLS support.- Types support:  * Float32/64  * [U]Int8/16/32/64/128/256  * Date/Date32/DateTime('timezone')/DateTime64('timezone')  * String/FixedString(N)  * Enum8/16  * Array(T)  * Nullable(T)  * Bool  * UUID  * Decimal  * IPv4/IPv6  * LowCardinality(T)  * SimpleAggregateFunction(F, T)  * Tuple(T1, T2, ...)  * Nested  * Map(key, value)- Query progress information.- Block by block results streaming.- Reading query profile info.- Receiving server logs.- Multiple hosts support.- Python DB API 2.0 specification support.- Optional NumPy arrays support.Documentation=============Documentation is available at https://clickhouse-driver.readthedocs.io.Usage=====There are two ways to communicate with server:- using pure Client;- using DB API.Pure Client example:    .. code-block:: python        &gt;&gt;&gt; from clickhouse_driver import Client        &gt;&gt;&gt;        &gt;&gt;&gt; client = Client('localhost')        &gt;&gt;&gt;        &gt;&gt;&gt; client.execute('SHOW TABLES')        [('test',)]        &gt;&gt;&gt; client.execute('DROP TABLE IF EXISTS test')        []        &gt;&gt;&gt; client.execute('CREATE TABLE test (x Int32) ENGINE = Memory')        []        &gt;&gt;&gt; client.execute(        ...     'INSERT INTO test (x) VALUES',        ...     [{'x': 100}]        ... )        1        &gt;&gt;&gt; client.execute('INSERT INTO test (x) VALUES', [[200]])        1        &gt;&gt;&gt; client.execute(        ...     'INSERT INTO test (x) '        ...     'SELECT * FROM system.numbers LIMIT %(limit)s',        ...     {'limit': 3}        ... )        []        &gt;&gt;&gt; client.execute('SELECT sum(x) FROM test')        [(303,)]DB API example:    .. code-block:: python        &gt;&gt;&gt; from clickhouse_driver import connect        &gt;&gt;&gt;        &gt;&gt;&gt; conn = connect('clickhouse://localhost')        &gt;&gt;&gt; cursor = conn.cursor()        &gt;&gt;&gt;        &gt;&gt;&gt; cursor.execute('SHOW TABLES')        &gt;&gt;&gt; cursor.fetchall()        [('test',)]        &gt;&gt;&gt; cursor.execute('DROP TABLE IF EXISTS test')        &gt;&gt;&gt; cursor.fetchall()        []        &gt;&gt;&gt; cursor.execute('CREATE TABLE test (x Int32) ENGINE = Memory')        &gt;&gt;&gt; cursor.fetchall()        []        &gt;&gt;&gt; cursor.executemany(        ...     'INSERT INTO test (x) VALUES',        ...     [{'x': 100}]        ... )        &gt;&gt;&gt; cursor.rowcount        1        &gt;&gt;&gt; cursor.executemany('INSERT INTO test (x) VALUES', [[200]])        &gt;&gt;&gt; cursor.rowcount        1        &gt;&gt;&gt; cursor.execute(        ...     'INSERT INTO test (x) '        ...     'SELECT * FROM system.numbers LIMIT %(limit)s',        ...     {'limit': 3}        ... )        &gt;&gt;&gt; cursor.rowcount        0        &gt;&gt;&gt; cursor.execute('SELECT sum(x) FROM test')        &gt;&gt;&gt; cursor.fetchall()        [(303,)]License=======ClickHouse Python Driver is distributed under the `MIT license&lt;http://www.opensource.org/licenses/mit-license.php&gt;`_.</longdescription>
</pkgmetadata>