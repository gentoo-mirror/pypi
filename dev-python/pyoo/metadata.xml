<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========================================================PyOO - Pythonic interface to Apache OpenOffice API (UNO)========================================================PyOO allows you to control a running OpenOffice_ or LibreOffice_program for reading and writing spreadsheet documents.The library can be used for generating documents in variousformats -- including Microsoft Excel 97 (.xls),Microsoft Excel 2007 (.xlsx) and PDF.The main advantage of the PyOO library is that it can use almost anyfunctionality implemented in OpenOffice / LibreOffice applications.On the other hand it needs a running process of a office suiteapplication which is significant overhead.PyOO uses UNO_ interface via Python-UNO_ bridge. UNO is astandard interface to a running OpenOffice or LibreOfficeapplication. Python-UNO provides this interface in Python scripts.Direct usage of UNO API via Python-UNO can be quite complicatedand even simple tasks require a lot of code. Also many UNO callsare slow and should be avoided when possible.PyOO wraps a robust Python-UNO bridge to simple and Pythonicinterface. Under the hood it implements miscellaneousoptimizations which can prevent unnecessary expensive UNOcalls.Available features:  * Opening and creation of spreadsheet documents  * Saving documents to all formats available in OpenOffice  * Charts and diagrams  * Sheet access and manipulation  * Formulas  * Cell merging  * Number, text, date, and time values  * Cell and text formating  * Number formating  * LocalesIf some important feature missing then the UNO API is always available... _OpenOffice: http://www.openoffice.org/.. _LibreOffice: http://www.libreoffice.org/.. _UNO: http://www.openoffice.org/api/docs/common/ref/com/sun/star/module-ix.html.. _Python-UNO: http://www.openoffice.org/udk/python/python-bridge.htmlPrerequisites-------------PyOO runs on both Python 2 (2.7+) and Python 3 (3.3+) but latest LibreOfficereleases are likely to support Python 3 only.The only dependency is the Python-UNO library (imported as a module ``uno``).Unfortunately Python-UNO cannot be installed using pip.Do NOT install package named ``uno`` available on PyPI - it's not related to LibreOffice.Debian / Ubuntu...............On Debian based systems Python-UNO can by installed as ``python3-uno`` package.Obviously you will also need OpenOffice or LibreOffice Calc.On Debian systems it is available as ``libreoffice-calc`` package. ::    $ sudo apt-get install libreoffice-calc python3-unomacOS.....Install LibreOffice, for example using cask_: ::   $ brew cask install libreofficeThen use Python binary bundled with the installed application: ::   $ export PATH=/Applications/LibreOffice.app/Contents/Resources:$PATH.. _cask: https://caskroom.github.io/Installation------------PyOO library can be installed from PYPI using pip_.::    $ pip install pyooIf you downloaded the code you can install it using the  ``setup.py`` script: ::    $ python setup.py installAlternatively you can copy the ``pyoo.py`` file somewhere to your ``PYTHONPATH``... _pip: https://pypi.python.org/pypi/pipUsage-----Starting OpenOffice / LibreOffice.................................PyOO requires a running OpenOffice or LibreOffice instance whichit can connect to. On Debian you can start LibreOffice froma command line using a command similar to: ::    $ soffice --accept=&quot;socket,host=localhost,port=2002;urp;&quot; --norestore --nologo --nodefault # --headlessThe LibreOffice will be listening for localhost connectionon port 2002. Alternatively a named pipe can be used: ::    $ soffice --accept=&quot;pipe,name=hello;urp;&quot; --norestore --nologo --nodefault # --headlessIf the ``--headless`` option is used then no user interface isvisible even when a document is opened.For more information run: ::    $ soffice --helpIt is recommended to start directly the ``soffice`` binary.There can be various scripts (called for example ``libreoffice``)which will run the ``soffice`` binary but you may not get thecorrect PID of the running program.Accessing documents...................PyOO acts as a bridge to a OpenOffice.org program so a connectionto the running program has to be created first: ::    &gt;&gt;&gt; import pyoo    &gt;&gt;&gt; desktop = pyoo.Desktop('localhost', 2002)Host name and port number used in the example ``('localhost', 2002)``are default values so they can be omitted.Connection to a named pipe is also possible: ::    &gt;&gt;&gt; pyoo.Desktop(pipe='hello')New spreadsheet document can be created using ``Desktop.create_spreadsheet()``method or opened using ``Desktop.open_spreadsheet()``: ::    &gt;&gt;&gt; doc = desktop.create_spreadsheet()    &gt;&gt;&gt; # doc = desktop.open_spreadsheet(&quot;/path/to/spreadsheet.ods&quot;)If the office application is not running in the headlessmode then a new window with Calc program should open now.Sheets......Spreadsheet document is represented by a ``SpreadsheetDocument`` class whichimplements basic manipulation with document. All data are in  sheetswhich can can be accessed and manipulated via ``SpreadsheetDocument.sheets``property: ::    &gt;&gt;&gt; # Access sheet by index or name:    &gt;&gt;&gt; doc.sheets[0]    &lt;Sheet: 'Sheet1'&gt;    &gt;&gt;&gt; doc.sheets['Sheet1']    &lt;Sheet: 'Sheet1'&gt;    &gt;&gt;&gt; # Create a new sheet after the first one:    &gt;&gt;&gt; doc.sheets.create('My Sheet', index=1)    &lt;Sheet: 'My Sheet'&gt;    &gt;&gt;&gt; # Copy the created sheet after the second one:    &gt;&gt;&gt; doc.sheets.copy('My Sheet', 'Copied Sheet', 2)    &lt;Sheet: 'Copied Sheet'&gt;    &gt;&gt;&gt; # Delete sheet by index or name:    &gt;&gt;&gt; del doc.sheets[1]    &gt;&gt;&gt; del doc.sheets['Copied sheet']    &gt;&gt;&gt; # Create multiple sheets with same name/prefix    &gt;&gt;&gt; get_sheet_name = pyoo.NameGenerator()    &gt;&gt;&gt; doc.sheets.create(get_sheet_name('My sheet'))    &lt;Sheet: 'My sheet'&gt;    &gt;&gt;&gt; doc.sheets.create(get_sheet_name('My sheet'))    &lt;Sheet: 'My sheet 2'&gt;Cells can be accessed using index notation from a sheet: ::    &gt;&gt;&gt; # Get sheet:    &gt;&gt;&gt; sheet = doc.sheets[0]    &gt;&gt;&gt; # Get cell address and set cell values:    &gt;&gt;&gt; str(sheet[0,0].address)   '$A$1'    &gt;&gt;&gt; sheet[0,0].value = 1    &gt;&gt;&gt; str(sheet[0,1].address)    '$B$1'    &gt;&gt;&gt; sheet[0,1].value = 2    &gt;&gt;&gt; # Set cell formula and get value:    &gt;&gt;&gt; sheet[0,2].formula = '=$A$1+$B$1'    &gt;&gt;&gt; sheet[0,2].value    3.0All the changes should be visible in the opened document.Every operation with a cell takes some time so setting all values separatelyis very ineffective. For this reason operations with whole cell rangesare implemented: ::    &gt;&gt;&gt; # Tabular (two dimensional) cell range:    &gt;&gt;&gt; sheet[1:3,0:2].values = [[3, 4], [5, 6]]    &gt;&gt;&gt; # Row (one dimensional) cell range:    &gt;&gt;&gt; sheet[3, 0:2].formulas = ['=$A$1+$A$2+$A$3', '=$B$1+$B$2+$B$3']    &gt;&gt;&gt; sheet[3, 0:2].values    (9.0, 12.0)    &gt;&gt;&gt; # Column (one dimensional) cell range:    &gt;&gt;&gt; sheet[1:4,2].formulas = ['=$A$2+$B$2', '=$A$3+$B3', '=$A$4+$B$4']    &gt;&gt;&gt; sheet[1:4,2].values    (7.0, 11.0, 21.0)Formating.........Miscellaneous attributes can be set to cells, cell ranges and sheets(they all inherit a ``CellRange`` class). Also note that cell rangessupport many indexing options: ::    &gt;&gt;&gt; # Get cell range with all data    &gt;&gt;&gt; cells = sheet[:4,:3]    &gt;&gt;&gt; # Font and text properties:    &gt;&gt;&gt; cells.font_size = 20    &gt;&gt;&gt; cells[3, :].font_weight = pyoo.FONT_WEIGHT_BOLD    &gt;&gt;&gt; cells[:, 2].text_align = pyoo.TEXT_ALIGN_LEFT    &gt;&gt;&gt; cells[-1,-1].underline = pyoo.UNDERLINE_DOUBLE    &gt;&gt;&gt; # Colors:    &gt;&gt;&gt; cells[:3,:2].text_color = 0xFF0000                 # 0xRRGGBB    &gt;&gt;&gt; cells[:-1,:-1].background_color = 0x0000FF         # 0xRRGGBB    &gt;&gt;&gt; # Borders    &gt;&gt;&gt; cells[:,:].border_width = 100    &gt;&gt;&gt; cells[:,:].border_color = 0xFFFF00    &gt;&gt;&gt; cells[-4:-1,-3:-1].inner_border_width = 50Number format can be also set but it is locale dependent: ::    &gt;&gt;&gt; locale = doc.get_locale('en', 'us')    &gt;&gt;&gt; sheet.number_format = locale.format(pyoo.FORMAT_PERCENT_INT)Charts......Charts can be created: ::    &gt;&gt;&gt; chart = sheet.charts.create('My Chart', sheet[5:10, 0:5], sheet[:4,:3])The first argument is a chart name, the second argument specifieschart position and the third one contains address of source data(it can be also a list or tuple). If optional ``row_header`` or``col_header`` keyword arguments are set to ``True`` then labelswill be read from first row or column.Existing charts can be accessed either by an index or a name: ::    &gt;&gt;&gt; sheet.charts[0].name    u'My Chart'    &gt;&gt;&gt; sheet.charts['My Chart'].name    u'My Chart'Chart instances are generally only a container for diagrams which specifyhow are data rendered. Diagram can be replaced by another type while chartstays same. ::    &gt;&gt;&gt; chart.diagram.__class__    &lt;class 'pyoo.BarDiagram'&gt;    &gt;&gt;&gt; diagram = chart.change_type(pyoo.LineDiagram)    &gt;&gt;&gt; diagram.__class__    &lt;class 'pyoo.LineDiagram'&gt;Diagram instance can be used for accessing and setting ofmiscellanous properties. ::    &gt;&gt;&gt; # Set axis label    &gt;&gt;&gt; diagram.y_axis.title = &quot;Primary axis&quot;    &gt;&gt;&gt; # Axis can use a logarithmic scale    &gt;&gt;&gt; diagram.y_axis.logarithmic = True    &gt;&gt;&gt; # Secondary axis can be shown.    &gt;&gt;&gt; diagram.secondary_y_axis.visible = True    &gt;&gt;&gt; # All axes have same attributes.    &gt;&gt;&gt; diagram.secondary_y_axis.title = &quot;Secondary axis&quot;    &gt;&gt;&gt; # Change color of one of series (lines, bars,...)    &gt;&gt;&gt; diagram.series[0].fill_color = 0x000000    &gt;&gt;&gt; # And bind it to secondary axis    &gt;&gt;&gt; diagram.series[0].axis = pyoo.AXIS_SECONDARYSaving documents................Spreadsheet documents can be saved using save method: ::    &gt;&gt;&gt; doc.save('example.xlsx', pyoo.FILTER_EXCEL_2007)    &gt;&gt;&gt; # doc.save()And finally do not forget to close the document: ::    &gt;&gt;&gt; doc.close()Testing-------Automated integration tests cover most of the code.The test suite assumes that OpenOffice or LibreOffice is running andit is listening on localhost port 2002.All tests are in the ``test.py`` file: ::    $ python test.pyLicense-------This library is released under the MIT license. See the ``LICENSE`` file.</longdescription>
</pkgmetadata>