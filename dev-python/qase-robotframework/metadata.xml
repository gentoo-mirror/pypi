<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&gt; # Qase Robot Framework Listener&gt;&gt; Publish results simple and easy.## How to integrate```pip install qase-robotframework```## UsageIf you want to create a persistent link to Test Cases in Qase, you should add Qase test case IDs to robot framework tests.They should be added as a tags in form like `Q-&lt;case id without project code&gt;`. You can use upper and lower case to indicate the test case IDs. Example:```robotframework*** Test Cases ***Push button    [Tags]  q-2    Push button    1    Result should be    1Push multiple buttons    [Tags]  Q-3    Push button    1    Push button    2    Result should be    12``````robotframework*** Test Cases ***    Expression    ExpectedAddition              12 + 2 + 2    16                      2 + -3        -1    [Tags]   Q-7Subtraction           12 - 2 - 2    8                      2 - -3        5    [Tags]   Q-8```### Working with stepsListener supports reporting steps results:Example:```robotframeworkQuick Get A JSON Body Test                                                  ## Test case: &quot;Quick Get A JSON Body Test&quot;    [Tags]  Q-3    ${response}=    GET  https://jsonplaceholder.typicode.com/posts/1       ## 1-st step - &quot;GET&quot;    Should Be Equal As Strings    1  ${response.json()}[id]                 ## 2-nd step - &quot;Should Be Equal As Strings&quot;Initializing the test case                                                  ## Test case: &quot;Initializing the test case&quot;    [Tags]  q-4    Set To Dictionary    ${info}   field1=A sample string                   ## 1-st step - &quot;Set To Dictionary&quot;```## ConfigurationListener supports loading configuration both from environment variables and from `tox.ini` file.ENV variables:- `QASE_MODE` - Define mode: `testops` to enable report- `QASE_ENVIRONMENT` - Environment ID for the run- `QASE_DEBUG` - If passed something - will enable debug logging for listener. Default: `False`- `QASE_TESTOPS_MODE` - You can switch between `sync` and `async` modes. Default is `async`- `QASE_TESTOPS_API_TOKEN` - API token to access Qase TestOps- `QASE_TESTOPS_PROJECT` - Project code from Qase TestOps- `QASE_TESTOPS_PLAN_ID` - Plan ID if you want to add results to existing run from Test Plan- `QASE_TESTOPS_RUN_ID` - Run ID if you want to add results to existing run- `QASE_TESTOPS_RUN_TITLE` - Set custom run name when no run ID is provided- `QASE_TESTOPS_COMPLETE_RUN` - Will complete run after all tests are finished. Default: `False`- `QASE_TESTOPS_HOST` - Define a host for Qase TestOps. Default: `qase.io`### Usage:```QASE_API_TOKEN=&lt;API TOKEN&gt; QASE_PROJECT=PRJCODE robot --listener qaseio.robotframework.QaseListener keyword_driven.robot data_driven.robot```Moving variables to `tox.ini`, example configuration:```ini[qase]qase_testops_api_token=api_keyqase_testops_project=project_codeqase_testops_run_id=run_idqase_testops_run_title=New Robot Framework Runqase_debug=Trueqase_testops_complete_run=True```Execution:```robot --listener qaseio.robotframework.Listener someTest.robot```## ContributionInstall project locally:```bashpython3 -m venv .venvsource .venv/bin/activatepip install -e .[testing]```Install dev requirements:```bashpip install pre-commitpre-commit install```Test project:```bashtox```</longdescription>
</pkgmetadata>