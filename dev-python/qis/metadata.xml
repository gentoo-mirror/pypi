<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## **Quantitative Investment Strategies: QIS** &lt;a name=&quot;analytics&quot;&gt;&lt;/a&gt;qis package implements analytics for visualisation of financial data, performancereporting, analysis of quantitative strategies. qis package is split into 5 main modules with the dependecy path increasing sequentially as follows.1. ```qis.utils``` is module containing low level utilities for operations with pandas, numpy, and datetimes.2. ```qis.perfstats``` is module for computing performance statistics and performance attribution including returns, volatilities, etc.3. ```qis.plots``` is module for plotting and visualization apis.4. ```qis.models``` is module containing statistical models including filtering and regressions.5. ```qis.portfolio``` is high level module for analysis, simulation, backtesting, and reporting of quant strategies.```qis.examples``` contains scripts with illustrations of QIS analytics.# Table of contents1. [Analytics](#analytics)2. [Installation](#installation)3. [Disclaimer](#disclaimer)    4. [Contributions](#contributions)5. [Examples](#examples)   1. [Visualization of price data](#price)   2. [Notebooks](#notebooks)6. [ToDos](#todos)## **Installation** &lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;```python pip install qis``````python pip install --upgrade qis```Core dependencies:    python = &quot;&gt;=3.8,&lt;3.11&quot;,    numba = &quot;&gt;=0.56.4&quot;,    numpy = &quot;&gt;=1.22.4&quot;,    scipy = &quot;&gt;=1.10&quot;,    statsmodels = &quot;&gt;=0.13.5&quot;,    pandas = &quot;&gt;=1.5.2&quot;,    matplotlib = &quot;&gt;=3.2.2&quot;,    seaborn = &quot;&gt;=0.12.2&quot;,    yfinance &gt;= 0.1.38 (optional for getting test price data).## **Disclaimer** &lt;a name=&quot;disclaimer&quot;&gt;&lt;/a&gt;QIS package is distributed FREE &amp; WITHOUT ANY WARRANTY under the GNU GENERAL PUBLIC LICENSE.See the [LICENSE.txt](https://github.com/ArturSepp/QuantInvestStrats/blob/master/LICENSE.txt) in the release for details.Please report any bugs or suggestions by opening an [issue](https://github.com/ArturSepp/QuantInvestStrats/issues).## **Contributions** &lt;a name=&quot;contributions&quot;&gt;&lt;/a&gt;If you are interested in extending and improving QIS analytics, please consider contributing to the library.I have found it is a good practice to isolate general purpose and low level analytics and visualizations, which can be outsourced and shared, while keeping the focus on developing high level commercial applications.There are a number of requirements:- The code is [Pep 8 compliant](https://peps.python.org/pep-0008/)- Reliance on common Python data types including numpy arrays, pandas, and dataclasses.- Transparent naming of functions and data types with enough comments. Type annotations of functions and arguments is a must.- Each submodule has a unit test for core functions and a localised entry point to core functions.- Avoid &quot;super&quot; pythonic constructions. Readability is the priority.## **Examples** &lt;a name=&quot;examples&quot;&gt;&lt;/a&gt;### Visualization of price data &lt;a name=&quot;price&quot;&gt;&lt;/a&gt;The script is located in ```qis.examples.performances``````python import matplotlib.pyplot as pltimport seaborn as snsimport yfinance as yfimport qisfrom qis import PerfStat# define tickers and fetch price datatickers = ['SPY', 'QQQ', 'EEM', 'TLT', 'IEF', 'LQD', 'HYG', 'GLD']prices = yf.download(tickers, start=None, end=None)['Adj Close'][tickers].dropna()# plotting price data with minimum usagefig = qis.plot_prices(prices=prices)```![image info](qis/examples/figures/perf1.PNG)```python # 2-axis plot with drawdowns using sns styleswith sns.axes_style(&quot;darkgrid&quot;):    fig, axs = plt.subplots(2, 1, figsize=(10, 7))    qis.plot_prices_with_dd(prices=prices, axs=axs)```![image info](qis/examples/figures/perf2.PNG)```python # plot risk-adjusted performance table with excess Sharpe ratioust_3m_rate = yf.download('^IRX', start=None, end=None)['Adj Close'].dropna() / 100.0# set parameters for computing performance stats including returns vols and regressionsperf_params = qis.PerfParams(freq='M', freq_reg='Q', rates_data=ust_3m_rate)fig = qis.plot_ra_perf_table(prices=prices,                             perf_columns=[PerfStat.TOTAL_RETURN, PerfStat.PA_RETURN, PerfStat.VOL, PerfStat.SHARPE,                                           PerfStat.SHARPE_EXCESS, PerfStat.MAX_DD, PerfStat.MAX_DD_VOL,                                           PerfStat.SKEWNESS, PerfStat.KURTOSIS],                             title=f&quot;Risk-adjusted performance: {qis.get_time_period_label(prices, date_separator='-')}&quot;,                             perf_params=perf_params)```![image info](qis/examples/figures/perf3.PNG)### Notebooks &lt;a name=&quot;notebooks&quot;&gt;&lt;/a&gt;Recommended package to work with notebooks:  ```python pip install notebook```Starting local server```python jupyter notebook```## **ToDos and Contributions** &lt;a name=&quot;todos&quot;&gt;&lt;/a&gt;1. Enhanced documentation and readme examples.2. Docstrings for key functions.3. Reporting analytics and factsheets generation enhancing to matplotlib.</longdescription>
</pkgmetadata>