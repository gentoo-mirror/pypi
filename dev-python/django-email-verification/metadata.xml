<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Email Verification[![PyPI](https://img.shields.io/pypi/v/django-email-verification?color=yellowgreen&amp;logo=pypi)](https://pypi.org/project/django-email-verification/)[![PyPI - License](https://img.shields.io/pypi/l/django-email-verification?logo=open-source-initiative)](https://github.com/LeoneBacciu/django-email-verification/blob/version-0.1.0/LICENSE)[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/LeoneBacciu/django-email-verification/Upload%20Python%20Package?logo=github-actions)](https://github.com/LeoneBacciu/django-email-verification/actions)[![codecov](https://codecov.io/gh/LeoneBacciu/django-email-verification/branch/master/graph/badge.svg?token=97DDVD3MGW)](https://codecov.io/gh/LeoneBacciu/django-email-verification)&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/LeoneBacciu/django-email-verification/blob/master/icon.png?raw=True&quot; width=&quot;300px&quot; alt=&quot;icon&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;Do you like my work and want to support me?&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://www.buymeacoffee.com/LeoneBacciu&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: auto !important;width: auto !important;&quot; &gt;&lt;/a&gt;&lt;/p&gt;&gt; ## ðŸš§ Work in progress ðŸš§&gt; The package now also provides all the feature needed for **password recovery**, but the documentation is not ready&gt; yet. \&gt; Thanks for your patience!## Requirements+ Python &gt;= 3.8+ Django &gt;= 3.1## General concept![Schema](https://github.com/LeoneBacciu/django-email-verification/blob/master/email_flow.png?raw=True &quot;Flow&quot;)## InstallationYou can install by:```commandlinepip3 install django-email-verification```and import by:```pythonINSTALLED_APPS = [    'django.contrib.admin',    'django.contrib.auth',    ...    'django_email_verification',  # you have to add this]```## Settings parametersYou have to add these parameters to the settings, you have to include all of them except the last one:```pythondef verified_callback(user):    user.is_active = TrueEMAIL_VERIFIED_CALLBACK = verified_callbackEMAIL_FROM_ADDRESS = 'noreply@aliasaddress.com'EMAIL_MAIL_SUBJECT = 'Confirm your email'EMAIL_MAIL_HTML = 'mail_body.html'EMAIL_MAIL_PLAIN = 'mail_body.txt'EMAIL_TOKEN_LIFE = 60 * 60EMAIL_PAGE_TEMPLATE = 'confirm_template.html'EMAIL_PAGE_DOMAIN = 'http://mydomain.com/'EMAIL_MULTI_USER = True  # optional (defaults to False)# For Django Email BackendEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'EMAIL_HOST = 'smtp.gmail.com'EMAIL_PORT = 587EMAIL_HOST_USER = 'mymail@gmail.com'EMAIL_HOST_PASSWORD = 'mYC00lP4ssw0rd'  # os.environ['password_key'] suggestedEMAIL_USE_TLS = True```In detail:+ `EMAIL_VERIFIED_CALLBACK`: the function that will be called when the user successfully verifies the email. Takes the  user object as argument.+ `EMAIL_FROM_ADDRESS`: this can be the same as `EMAIL_HOST_USER` or an alias address if required.+ `EMAIL_MAIL_`:    * `SUBJECT`: the mail default subject.    * `HTML`: the mail body template in form of html.    * `PLAIN`: the mail body template in form of .txt file.+ `EMAIL_TOKEN_LIFE`: the lifespan of the email link (in seconds).+ `EMAIL_PAGE_TEMPLATE`: the template of the success/error view.+ `EMAIL_PAGE_DOMAIN`: the domain of the confirmation link (usually your site's domain).+ `EMAIL_MULTI_USER`: (optional) if `True` an error won't be thrown if multiple users with the same email are present (  just one will be activated)For the Django Email Backend fields look at theofficial [documentation](https://docs.djangoproject.com/en/3.1/topics/email/).The `EMAIL_VERIFIED_CALLBACK` can be a function on the `AUTH_USER_MODEL`, for example:```pythonEMAIL_VERIFIED_CALLBACK = get_user_model().verified_callback```The function will receive no arguments.## Templates examplesThe `EMAIL_MAIL_SUBJECT` should look like this (`{{ link }}`(`str`), `{{ expiry }}`(`datetime`) and `user`(`Model`) arepassed during the rendering):```pythonEMAIL_MAIL_SUBJECT = 'Confirm your email {{ user.username }}'```The `EMAIL_MAIL_HTML` should look like this (`{{ link }}`(`str`), `{{ expiry }}`(`datetime`) and `user`(`Model`) arepassed during the rendering):```html&lt;h1&gt;You are almost there, {{ user.username }}!&lt;/h1&gt;&lt;br&gt;&lt;h2&gt;Please click &lt;a href=&quot;{{ link }}&quot;&gt;here&lt;/a&gt; to confirm your account&lt;/h2&gt;&lt;h2&gt;The token expires on {{ expiry|time:&quot;TIME_FORMAT&quot; }}&lt;/h2&gt;```The `EMAIL_MAIL_PLAIN` should look like this (`{{ link }}`(`str`), `{{ expiry }}`(`datetime`) and `user`(`Model`) arepassed during the rendering):```textYou are almost there, {{ user.username }}!Please click the following link to confirm your account: {{ link }}The token expires on {{ expiry|time:&quot;TIME_FORMAT&quot; }}```The `EMAIL_PAGE_TEMPLATE` should look like this (`{{ success }}`(`bool`), `{{ user }}`(`Model`)and `{{ request }}`(`WSGIRequest`) are passed during the rendering):```html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Confirmation&lt;/title&gt;&lt;/head&gt;&lt;body&gt;{% if success %}{{ user.username }}, your account is confirmed!{% else %}Error, invalid token!{% endif %}&lt;/body&gt;&lt;/html&gt;```## Email sendingAfter you have created the user you can send the confirm email```pythonfrom django.shortcuts import renderfrom django.contrib.auth import get_user_modelfrom django_email_verification import send_emaildef my_functional_view(request):    ...    user = get_user_model().objects.create(username=username, password=password, email=email)    user.is_active = False  # Example    send_email(user)    return render(...)````send_email(user)` sends an email with the defined template (and the pseudo-random generated token) to the user.&gt; **_IMPORTANT:_** You have to manually set the user to inactive before sending the email.If you are using class based views, then it is necessary to call the superclass before calling the `send_confirm`method.```pythonfrom django.views.generic.edit import FormViewfrom django_email_verification import send_emailclass MyClassView(FormView):    def form_valid(self, form):        user = form.save()        returnVal = super(MyClassView, self).form_valid(form)        send_email(user)        return returnVal```## Token verificationThere are two ways to get the token verified:+ The first one is the simplest: you just have to include the app urls in `urls.py`    ```python    from django.contrib import admin    from django.urls import path, include    from django_email_verification import urls as email_urls  # include the urls    urlpatterns = [      path('admin/', admin.site.urls),      ...      path('email/', include(email_urls)),  # connect them to an arbitrary path    ]  ```  When a request arrives to `https.//mydomain.com/email/&lt;token&gt;` the package verifies the token and:  + if it corresponds to a pending token it renders the `EMAIL_PAGE_TEMPLATE` passing `success=True` and deletes the token  + if it doesn't correspond it renders the `EMAIL_PAGE_TEMPLATE` passing `success=False`+ The second one is more customizable: you can build your own view for verification, mark it as `@verify_view`, verify the token manually with the function `verify_token(token)` and execute your custom logic,  here's how:  ```python  ### For the view  from django.http import HttpResponse  from django_email_verification import verify_view, verify_token  @verify_view  def confirm(request, token):      success, user = verify_token(token)      return HttpResponse(f'Account verified, {user.username}' if success else 'Invalid token')  ### For the urls  from django.urls import path  urlpatterns = [      ...      path('email/&lt;str:token&gt;/', confirm), # remember to set the &quot;token&quot; parameter in the url!      ...  ]  ```  &gt; **_IMPORTANT:_** the path must **NOT** have the `name` attribute set  The library makes sure one and only one `@verify_view` is present and throws an error if this condition is not met.## TestingIf you are using django-email-verification and you want to test the email, if settings.DEBUG == True, then two itemswill be added to the email headers.You can obtain these by checking the django.core.mail outbox, which will have a non-zero length if an email has beensent. Retrieve the email and obtain the link (includes token) or the token to use in your code.```pythonfrom django.core import mail...testbody...try:  email = mail.outbox[0]  link = mail.extra_headers['LINK']  token = mail.extra_headers['TOKEN']  browser.visit(link)  # verifies token...except AttributeError:  logger.warn(&quot;no email&quot;)```For the email to be in the inbox, you will need to use the correct email backend. Use either:```EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'```or:```EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'```## Console backend for developmentIf you want to use the console email backend provided by django, then define:```pythonEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'```You can use all the django email backends and also your custom one.### Logo copyright:Logo by by &lt;a href=&quot;https://github.com/filippoveggo&quot; title=&quot;Flippo Veggo&quot;&gt;Filippo Veggo&lt;/a&gt;&lt;div&gt;&quot;Django and the Django logo are registered trademarks of Django Software Foundation.&lt;br/&gt;Usage of the Django trademarks are subject to the Django Trademark licensing Agreement.&quot;&lt;/div&gt;&lt;div&gt;Icons made by &lt;a href=&quot;https://www.flaticon.com/authors/kiranshastry&quot; title=&quot;Kiranshastry&quot;&gt;Kiranshastry&lt;/a&gt; from &lt;a href=&quot;https://www.flaticon.com/&quot; title=&quot;Flaticon&quot;&gt;www.flaticon.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Icons made by &lt;a href=&quot;https://www.flaticon.com/authors/pixel-perfect&quot; title=&quot;Pixel perfect&quot;&gt;Pixel perfect&lt;/a&gt; from &lt;a href=&quot;https://www.flaticon.com/&quot; title=&quot;Flaticon&quot;&gt;www.flaticon.com&lt;/a&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>