<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Xbox-WebAPI[![PyPi - latest](https://img.shields.io/pypi/v/xbox-webapi.svg)](https://pypi.python.org/pypi/xbox-webapi/)[![Documentation status](https://readthedocs.org/projects/xbox-webapi-python/badge/?version=latest)](http://xbox-webapi-python.readthedocs.io/en/latest/?badge=latest)[![Build status](https://img.shields.io/github/actions/workflow/status/OpenXbox/xbox-webapi-python/build.yml?branch=master)](https://github.com/OpenXbox/xbox-webapi-python/actions?query=workflow%3Abuild)[![Discord chat channel](https://img.shields.io/badge/discord-OpenXbox-blue.svg)](https://openxbox.org/discord)Xbox-WebAPI is a python library to authenticate with Xbox Live via your Microsoft Account and provides Xbox related Web-API.Authentication is supported via OAuth2.- Register a new application in [Azure AD](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade)  - Name your app  - Select &quot;Personal Microsoft accounts only&quot; under supported account types  - Add &lt;http://localhost/auth/callback&gt; as a Redirect URI of type &quot;Web&quot;- Copy your Application (client) ID for later use- On the App Page, navigate to &quot;Certificates &amp; secrets&quot;  - Generate a new client secret and save for later use## Dependencies- Python &gt;= 3.8## How to useInstall```textpip install xbox-webapi```Authentication**Note: You must use non child account (&gt; 18 years old)**Token save location: If tokenfile is not provided via cmdline, fallback of `&lt;appdirs.user_data_dir&gt;/tokens.json` is used as save-locationSpecifically:Windows: `C:\\Users\\&lt;username&gt;\\AppData\\Local\\OpenXbox\\xbox`Mac OSX: `/Users/&lt;username&gt;/Library/Application Support/xbox/tokens.json`Linux: `/home/&lt;username&gt;/.local/share/xbox`For more information, see: &lt;https://pypi.org/project/appdirs&gt; and module: `xbox.webapi.scripts.constants````xbox-authenticate --client-id &lt;client-id&gt; --client-secret &lt;client-secret&gt;```Example: Search Xbox Live via cmdline tool```text  # Search Xbox One Catalog  xbox-searchlive &quot;Some game title&quot;```API usage```pyimport asyncioimport sysfrom httpx import HTTPStatusErrorfrom xbox.webapi.api.client import XboxLiveClientfrom xbox.webapi.authentication.manager import AuthenticationManagerfrom xbox.webapi.authentication.models import OAuth2TokenResponsefrom xbox.webapi.common.signed_session import SignedSessionfrom xbox.webapi.scripts import CLIENT_ID, CLIENT_SECRET, TOKENS_FILE&quot;&quot;&quot;This uses the global default client identification by OpenXboxYou can supply your own parameters here if you are permitted to createnew Microsoft OAuth Apps and know what you are doing&quot;&quot;&quot;client_id = CLIENT_IDclient_secret = CLIENT_SECRETtokens_file = TOKENS_FILE&quot;&quot;&quot;For doing authentication, see xbox/webapi/scripts/authenticate.py&quot;&quot;&quot;async def async_main():    # Create a HTTP client session    async with SignedSession() as session:        &quot;&quot;&quot;        Initialize with global OAUTH parameters from above        &quot;&quot;&quot;        auth_mgr = AuthenticationManager(session, client_id, client_secret, &quot;&quot;)        &quot;&quot;&quot;        Read in tokens that you received from the `xbox-authenticate`-script previously        See `xbox/webapi/scripts/authenticate.py`        &quot;&quot;&quot;        try:            with open(tokens_file) as f:                tokens = f.read()            # Assign gathered tokens            auth_mgr.oauth = OAuth2TokenResponse.model_validate_json(tokens)        except FileNotFoundError as e:            print(                f&quot;File {tokens_file} isn`t found or it doesn`t contain tokens! err={e}&quot;            )            print(&quot;Authorizing via OAUTH&quot;)            url = auth_mgr.generate_authorization_url()            print(f&quot;Auth via URL: {url}&quot;)            authorization_code = input(&quot;Enter authorization code&gt; &quot;)            tokens = await auth_mgr.request_oauth_token(authorization_code)            auth_mgr.oauth = tokens        &quot;&quot;&quot;        Refresh tokens, just in case        You could also manually check the token lifetimes and just refresh them        if they are close to expiry        &quot;&quot;&quot;        try:            await auth_mgr.refresh_tokens()        except HTTPStatusError as e:            print(                f&quot;&quot;&quot;                Could not refresh tokens from {tokens_file}, err={e}\n                You might have to delete the tokens file and re-authenticate                 if refresh token is expired            &quot;&quot;&quot;            )            sys.exit(-1)        # Save the refreshed/updated tokens        with open(tokens_file, mode=&quot;w&quot;) as f:            f.write(auth_mgr.oauth.json())        print(f&quot;Refreshed tokens in {tokens_file}!&quot;)        &quot;&quot;&quot;        Construct the Xbox API client from AuthenticationManager instance        &quot;&quot;&quot;        xbl_client = XboxLiveClient(auth_mgr)        &quot;&quot;&quot;        Some example API calls        &quot;&quot;&quot;        # Get friendslist        friendslist = await xbl_client.people.get_friends_own()        print(f&quot;Your friends: {friendslist}\n&quot;)        # Get presence status (by list of XUID)        presence = await xbl_client.presence.get_presence_batch(            [&quot;2533274794093122&quot;, &quot;2533274807551369&quot;]        )        print(f&quot;Statuses of some random players by XUID: {presence}\n&quot;)        # Get messages        messages = await xbl_client.message.get_inbox()        print(f&quot;Your messages: {messages}\n&quot;)        # Get profile by GT        profile = await xbl_client.profile.get_profile_by_gamertag(&quot;SomeGamertag&quot;)        print(f&quot;Profile under SomeGamertag gamer tag: {profile}\n&quot;)asyncio.run(async_main())```## Contribute- Report bugs/suggest features- Add/update docs- Add additional xbox live endpoints## CreditsThis package uses parts of [Cookiecutter](https://github.com/audreyr/cookiecutter)and the [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template.The authentication code is based on [joealcorn/xbox](https://github.com/joealcorn/xbox)Informations on endpoints gathered from:- [XboxLive REST Reference](https://docs.microsoft.com/en-us/windows/uwp/xbox-live/xbox-live-rest/atoc-xboxlivews-reference)- [XboxLiveTraceAnalyzer APIMap](https://github.com/Microsoft/xbox-live-trace-analyzer/blob/master/Source/XboxLiveTraceAnalyzer.APIMap.csv)- [Xbox Live Service API](https://github.com/Microsoft/xbox-live-api)## DisclaimerXbox, Xbox One, Smartglass and Xbox Live are trademarks of Microsoft Corporation. Team OpenXbox is in no way endorsed by or affiliated with Microsoft Corporation, or any associated subsidiaries, logos or trademarks.</longdescription>
</pkgmetadata>