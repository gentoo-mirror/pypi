<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>business-rule-engine====================[![CodeFactor](https://www.codefactor.io/repository/github/manfred-kaiser/business-rule-engine/badge)](https://www.codefactor.io/repository/github/manfred-kaiser/business-rule-engine)[![Github version](https://img.shields.io/github/v/release/manfred-kaiser/business-rule-engine?label=github&amp;logo=github)](https://github.com/manfred-kaiser/business-rule-engine/releases)[![PyPI version](https://img.shields.io/pypi/v/business-rule-engine.svg?logo=pypi&amp;logoColor=FFE873)](https://pypi.org/project/business-rule-engine/)[![Supported Python versions](https://img.shields.io/pypi/pyversions/business-rule-engine.svg?logo=python&amp;logoColor=FFE873)](https://pypi.org/project/business-rule-engine/)[![PyPI downloads](https://pepy.tech/badge/business-rule-engine/month)](https://pepy.tech/project/business-rule-engine/month)[![GitHub](https://img.shields.io/github/license/manfred-kaiser/business-rule-engine.svg)](LICENSE)As a software system grows in complexity and usage, it can become burdensome if every change to the logic/behavior of the system also requires you to write and deploy new code. The goal of this business rules engine is to provide a simple interface allowing anyone to capture new rules and logic defining the behavior of a system, and a way to then process those rules on the backend.You might, for example, find this is a useful way for analysts to define marketing logic around when certain customers or items are eligible for a discount or to automate emails after users enter a certain state or go through a particular sequence of events.## Usage### 1. Define Your set of variablesVariables represent values in your system, usually the value of some particular object.  You create rules by setting threshold conditions such that when a variable is computed that triggers the condition some action is taken.```pythonparams = {    'products_in_stock': 10}```### 2. Define custom functions```pythondef order_more(items_to_order):    print(&quot;you ordered {} new items&quot;.format(items_to_order))    return items_to_order```### 3. Write the rules```pythonrules = &quot;&quot;&quot;rule &quot;order new items&quot;when    products_in_stock &lt; 20then    order_more(50)end&quot;&quot;&quot;```### 3. Create the parser and parse the rule```pythonfrom business_rule_engine import RuleParserparser = RuleParser()parser.register_function(order_more)parser.parsestr(rules)parser.execute(params)```## Supported functionsBusiness rule engine uses Excel like functions (thanks to [formulas](https://github.com/vinci1it2000/formulas). So it is possible to use most of them in rules.## Multiple conditions and multiple actionsYou can make multiple checks on the same params, and call multiple actions as needed:```pythonrules = &quot;&quot;&quot;rule &quot;order new items&quot;when    AND(products_in_stock &lt; 20,    products_in_stock &gt;= 5)then    order_more(50)endrule &quot;order new items urgent&quot;when    products_in_stock &lt; 5,then    AND(order_more(10, true),    order_more(50))end&quot;&quot;&quot;```## Custom functionsYou can also write your own functions to validate conditions and use other libraries functions as actions:```pythonfrom business_rule_engine import RuleParserdef is_even(num):   if (num % 2) == 0:      return True   return Falseparams = {    'number': 10}rules = &quot;&quot;&quot;rule &quot;check even number&quot;when    is_even(number) = Truethen    print(&quot;is even&quot;)end&quot;&quot;&quot;parser = RuleParser()parser.register_function(is_even)parser.register_function(print)parser.parsestr(rules)parser.execute(params)```## Handle missing rule parametersIf some argruments are missing, the rule engine will raise a ValueError.There are some use cases, when you have to work with incomplete data. In such cases, you can definedefault arguments.You enable default rule arguments with the parameter `set_defaule_arg`. The default argument will have the Value `None`. To provide another value you can use `default_arg`.```pythonparams = {}rules = &quot;&quot;&quot;rule &quot;order new items&quot;when    products_in_stock &lt; 20then    order_more(50)end&quot;&quot;&quot;parser = RuleParser()parser.register_function(order_more)parser.parsestr(rules)parser.execute(params, set_default_arg=True, default_arg=0)```## More control of the RulePraserif you need more control, how the rule parser handles rules, you can iterate over the parser and execute each rule in your script.This gives you more control on how to handle missing arguments, rules with errors and you have access to the return values of the conditions and the actions.```pythonfrom business_rule_engine import RuleParserfrom business_rule_engine.exceptions import MissingArgumentErrordef order_more(items_to_order):    return &quot;you ordered {} new items&quot;.format(items_to_order)rules = &quot;&quot;&quot;rule &quot;order new items&quot;when    products_in_stock &lt; 20then    order_more(50)end&quot;&quot;&quot;params = {    'products_in_stock': 10}parser = RuleParser()parser.register_function(order_more)parser.parsestr(rules)for rule in parser:    try:        rvalue_condition, rvalue_action = rule.execute(params)        if rule.status:            print(rvalue_action)            break    except MissingArgumentError:        pass```## Error HandlingMost of the errors are caused by missing parameters, you can handle the errors and interpret the results handling ValueError:```pythonfrom business_rule_engine import RuleParser# proposital typoparams = {    'produtcs_in_stock': 30}rules = &quot;&quot;&quot;rule &quot;order new items&quot;when    products_in_stock &lt; 20then    order_more(50)end&quot;&quot;&quot;parser = RuleParser()parser.register_function(order_more)parser.parsestr(rules)try:    ret = parser.execute(params)    if ret is False:        print(&quot;No conditions matched&quot;)except ValueError as e:    print(e)```## DebugTo debug the rules processing, use the logging lib.You can insert in your Python script to log to stdout:```import logginglogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)```</longdescription>
</pkgmetadata>