<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenEO Process Graph Parser (Python &amp; networkx)![PyPI - Status](https://img.shields.io/pypi/status/openeo-pg-parser-networkx)![PyPI](https://img.shields.io/pypi/v/openeo-pg-parser-networkx)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/openeo-pg-parser-networkx)[![codecov](https://codecov.io/github/Open-EO/openeo-pg-parser-networkx/branch/main/graph/badge.svg?token=KEAKFB8AFX)](https://codecov.io/github/Open-EO/openeo-pg-parser-networkx)Python package to parse OpenEO process graphs from raw JSON into fully traversible [`networkx`](https://github.com/networkx/networkx) graph objects.This package is an evolution of the [openeo-pg-parser-python](https://github.com/Open-EO/openeo-pg-parser-python) package.## InstallationThis package can be installed with pip:```pip install openeo-pg-parser-networkx```To enable plotting also install the `plot` extra:```pip install openeo-pg-parser-networkx[plot]```Currently Python versions 3.9-3.11 are supported.## Basic usage(An example notebook of using `openeo-pg-parser-networkx` together with a process implementation source like [`openeo-processes-dask`](https://github.com/Open-EO/openeo-processes-dask) can be found in `openeo-pg-parser-networkx/examples/01_minibackend_demo.ipynb`.)**Parse a JSON OpenEO process graph:**```from openeo_pg_parser_networkx import OpenEOProcessGraphEVI_GRAPH_PATH = &quot;../tests/data/graphs/pg-evi-example.json&quot;parsed_graph = OpenEOProcessGraph.from_file(EVI_GRAPH_PATH)``````&gt; Deserialised process graph into nested structure&gt; Walking node root-7ecd43ed-b694-4a18-8805-eb366d277c8e&gt; Walking node mintime-7ecd43ed-b694-4a18-8805-eb366d277c8e&gt; Walking node min-80d5faba-c298-4d2f-82f5-be06ee417565&gt; Walking node evi-7ecd43ed-b694-4a18-8805-eb366d277c8e&gt; Walking node m3-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node div-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node sub-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node nir-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node red-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node sum-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node nir-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node m1-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node red-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node m2-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node blue-657ee106-6571-4509-a1cf-59f212286011&gt; Walking node load_collection-7ecd43ed-b694-4a18-8805-eb366d277c8e```**Plot it:**```parsed_graph.plot()```![example process graph](./examples/images/reduce_evi.png)To execute a process graph, `OpenEOProcessGraph` needs to know which Python code to call for each of the nodes in the graph. This information is provided by a &quot;process registry&quot;, which is basically a dictionary that maps each `process_id` to its actual Python implementation as a `Callable`.**Register process implementations to a &quot;process registry&quot;:**The `ProcessRegistry` object also allows registering wrapper functions that will be wrapped around each registered process implementation.See [openeo-processes-dask](https://github.com/Open-EO/openeo-processes-dask/blob/main/openeo_processes_dask/core.py) for an example of a wrapper function that resolves incoming parameters.```from openeo_pg_parser_networkx import ProcessRegistryfrom openeo_processes_dask.process_implementations import apply, ndvi, multiply, load_collection, save_resultfrom openeo_processes_dask.core import process# `process` is wrapped around each registered implementationprocess_registry = ProcessRegistry(wrap_funcs=[process])process_registry[&quot;apply&quot;] =  applyprocess_registry[&quot;ndvi&quot;] =  ndviprocess_registry[&quot;multiply&quot;] =  multiplyprocess_registry[&quot;load_collection&quot;] =  load_collectionprocess_registry[&quot;save_result&quot;] =  save_result```The `ProcessRegistry` also allows use of namespaces by using a tuple as a key instead of a single value.If using a single value the default namespace is &quot;predefined&quot;.Addressing entire namespaces can be done by using None as the value for process_id.```process_registry[&quot;namespace&quot;, &quot;process_id&quot;] = processprocess_registry[&quot;namespace&quot;, None] = processes```This logic can be extended to all functionalities.```process = process_registry[&quot;namespace&quot;, &quot;process_id&quot;] # gets the single process named &quot;process_id&quot; in the namespace &quot;namespace&quot;processes = process_registry[&quot;namespace&quot;, None] # gets the entire namespace &quot;namespace&quot;del process_registry[&quot;namespace&quot;, &quot;process_id&quot;] # deletes the single process named &quot;process_id&quot; in the namespace &quot;namespace&quot;del process_registry[&quot;namespace&quot;, None] # deletes the entire namespace &quot;namespace&quot;```**Build an executable callable from the process graph:**```pg_callable = parsed_graph.to_callable(process_registry=process_registry)```**Execute that callable like a normal Python function:**```pg_callable``````&gt; Running process load_collection&gt; Running process apply&gt; ...```## Development environment`openeo-pg-parser-networkx` requires poetry `&gt;1.2`, see their [docs](https://python-poetry.org/docs/#installation) for installation instructions.To setup the python venv and install this project into it run:```poetry install```To add a new core dependency run:```poetry add some_new_dependency```To add a new development dependency run:```poetry add some_new_dependency --group dev```To run the test suite run:```poetry run python -m pytest```Note that you can also use the virtual environment that's generated by poetry as the kernel for the ipynb notebooks.### Pre-commit hooksThis repo makes use of [pre-commit](https://pre-commit.com/) hooks to enforce linting &amp; a few sanity checks.In a fresh development setup, install the hooks using `poetry run pre-commit install`.These will then automatically be checked against your changes before making the commit.</longdescription>
</pkgmetadata>