<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>dict2xml========Super Simple utility to convert a python dictionary into an xml stringInstallation------------Install using pip::  &gt; python -m pip install dict2xmlexample-------.. code-block:: python  from dict2xml import dict2xml  data = {    'a': 1,    'b': [2, 3],    'c': {      'd': [        {'p': 9},        {'o': 10}      ],      'e': 7    }  }  print dict2xml(data, wrap=&quot;all&quot;, indent=&quot;  &quot;)Output------.. code-block:: xml  &lt;all&gt;    &lt;a&gt;1&lt;/a&gt;    &lt;b&gt;2&lt;/b&gt;    &lt;b&gt;3&lt;/b&gt;    &lt;c&gt;      &lt;d&gt;        &lt;p&gt;9&lt;/p&gt;      &lt;/d&gt;      &lt;d&gt;        &lt;o&gt;10&lt;/o&gt;      &lt;/d&gt;      &lt;e&gt;7&lt;/e&gt;    &lt;/c&gt;  &lt;/all&gt;methods-------``dict2xml.dict2xml(data, *args, **kwargs)``    Equivalent to:    .. code-block:: python        dict2xml.Converter(*args, **kwargs).build(data)``dict2xml.Converter(wrap=&quot;&quot;, indent=&quot;  &quot;, newlines=True)``    Knows how to convert a dictionary into an xml string    * wrap: Wraps the entire tree in this tag    * indent: Amount to prefix each line for each level of nesting    * newlines: Whether or not to use newlines``dict2xml.Converter.build(data, iterables_repeat_wrap=True, closed_tags_for=None)``    Instance method on Converter that takes in the data and creates the xml string    * iterables_repeat_wrap - when false the key the array is in will be repeated    * closed_tags_for - an array of values that will produce self closing tagsSelf closing tags-----------------To produce self closing tags (like ``&lt;item/&gt;``) then the ``build`` method mustbe given a list of values under ``closed_tags_for``. For example, if you want``None`` to produce a closing tag then:.. code-block:: python    example = {        &quot;item1&quot;: None,        &quot;item2&quot;: {&quot;string1&quot;: &quot;&quot;, &quot;string2&quot;: None},        &quot;item3&quot;: &quot;special&quot;,    }    result = Converter(&quot;&quot;).build(example, closed_tags_for=[None])    assert result == dedent(&quot;&quot;&quot;        &lt;item1/&gt;        &lt;item2&gt;            &lt;string1&gt;&lt;/string1&gt;            &lt;string2/&gt;        &lt;/item2&gt;        &lt;item3&gt;special&lt;/item3&gt;    &quot;&quot;&quot;).strip())Here only ``string2`` gets a self closing tag because it has data of ``None``,which has been designated as special.If you want to dynamically work out which tags should be self closing then youmay provide an object that implements ``__eq__`` and do your logic there.Limitations-----------* No attributes on elements* Currently no explicit way to hook into how to cope with your custom data* Currently no way to insert an xml declaration lineChangelog---------1.7.3 - 25 Feb 2023    * This version has no changes to the installed code.    * This release converts to hatch for packaging and adds a wheel to the      package on pypi.    * CI will now run against python 3.11 as well1.7.2 - 18 Oct 2022    * This version has no changes to the installed code.    * This release adds the tests to the source distribution put onto pypi.1.7.1 - 16 Feb 2022    * Adding an option to have self closing tags when the value for that      tag equals certain values1.7.0 - 16 April, 2020    * Use collections.abc to avoid deprecation warning. Thanks @mangin.    * This library no longer supports Python2 and is only supported for      Python3.6+. Note that the library should still work in Python3.5 as I      have not used f-strings, but the framework I use for the tests is only 3.6+.1.6.1 - August 27, 2019    * Include readme and LICENSE in the package1.6 - April 27, 2018    * No code changes    * changed the licence to MIT    * Added more metadata to pypi    * Enabled travis ci    * Updated the tests slightly1.5    * No changelog was kept before this point.Development-----------To enter a virtualenv with dict2xml and dev requirements installed run::    &gt; source run.sh activateTests may be run with::    &gt; ./test.sh Or::    &gt; ./run.sh toxLinting and formatting is via::    &gt; ./format    &gt; ./lintPython Black will work on the tests as long as ``NOSE_OF_YETI_BLACK_COMPAT=true``and the correct version of black is available. This is true if your editoris opened in the same terminal session after sourcing run.sh or ifyou make sure that environment variable is set and the editor is using thevirtualenv made by running or sourcing ``run.sh`` (``tools/venv/.python``)</longdescription>
</pkgmetadata>