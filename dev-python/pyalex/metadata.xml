<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img alt=&quot;PyAlex - a Python wrapper for OpenAlex&quot; src=&quot;https://github.com/J535D165/pyalex/raw/main/pyalex_repocard.svg&quot;&gt;&lt;/p&gt;# PyAlex![PyPI](https://img.shields.io/pypi/v/pyalex) [![DOI](https://zenodo.org/badge/557541347.svg)](https://zenodo.org/badge/latestdoi/557541347)PyAlex is a Python library for [OpenAlex](https://openalex.org/). OpenAlex isan index of hundreds of millions of interconnected scholarly papers, authors,institutions, and more. OpenAlex offers a robust, open, and free [REST API](https://docs.openalex.org/) to extract, aggregate, or search scholarly data.PyAlex is a lightweight and thin Python interface to this API. PyAlex tries tostay as close as possible to the design of the original service.The following features of OpenAlex are currently supported by PyAlex:- [x] Get single entities- [x] Filter entities- [x] Search entities- [x] Group entities- [x] Search filters- [x] Select fields- [x] Sample- [x] Pagination- [ ] [Autocomplete endpoint](https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/autocomplete-entities)- [x] N-grams- [x] AuthenticationWe aim to cover the entire API, and we are looking for help. We are welcoming Pull Requests.## Key features- **Pipe operations** - PyAlex can handle multiple operations in a sequence. This allows the developer to write understandable queries. For examples, see [code snippets](#code-snippets).- **Plaintext abstracts** - OpenAlex [doesn't include plaintext abstracts](https://docs.openalex.org/api-entities/works/work-object#abstract_inverted_index) due to legal constraints. PyAlex can convert the inverted abstracts into [plaintext abstracts on the fly](#get-abstract).- **Permissive license** - OpenAlex data is CC0 licensed :raised_hands:. PyAlex is published under the MIT license.## InstallationPyAlex requires Python 3.6 or later.```shpip install pyalex```## Getting startedPyAlex offers support for all [Entity Objects](https://docs.openalex.org/api-entities/entities-overview): [Works](https://docs.openalex.org/api-entities/works), [Authors](https://docs.openalex.org/api-entities/authors), [Sources](https://docs.openalex.org/api-entities/sourcese), [Institutions](https://docs.openalex.org/api-entities/institutions), [Concepts](https://docs.openalex.org/api-entities/concepts), [Publishers](https://docs.openalex.org/api-entities/publishers), and [Funders](https://docs.openalex.org/api-entities/funders).```pythonfrom pyalex import Works, Authors, Sources, Institutions, Concepts, Publishers, Funders```### The polite pool[The polite pool](https://docs.openalex.org/how-to-use-the-api/rate-limits-and-authentication#the-polite-pool) has muchfaster and more consistent response times. To get into the polite pool, youset your email:```pythonimport pyalexpyalex.config.email = &quot;mail@example.com&quot;```### Get single entityGet a single Work, Author, Source, Institution, Concept, Publisher or Funder from OpenAlex by theOpenAlex ID, or by DOI or ROR.```pythonWorks()[&quot;W2741809807&quot;]# same asWorks()[&quot;https://doi.org/10.7717/peerj.4375&quot;]```The result is a `Work` object, which is very similar to a dictionary. Find the available fields with `.keys()`.For example, get the open access status:```pythonWorks()[&quot;W2741809807&quot;][&quot;open_access&quot;]``````python{'is_oa': True, 'oa_status': 'gold', 'oa_url': 'https://doi.org/10.7717/peerj.4375'}```The previous works also for Authors, Venues, Institutions and Concepts```pythonAuthors()[&quot;A2887243803&quot;]Authors()[&quot;https://orcid.org/0000-0002-4297-0502&quot;]  # same```#### Get randomGet a [random Work, Author, Source, Institution, Concept, Publisher or Funder](https://docs.openalex.org/how-to-use-the-api/get-single-entities/random-result).```pythonWorks().random()Authors().random()Sources().random()Institutions().random()Concepts().random()Publishers().random()Funders().random()```#### Get abstractOnly for Works. Request a work from the OpenAlex database:```pythonw = Works()[&quot;W3128349626&quot;]```All attributes are available like documented under [Works](https://docs.openalex.org/api-entities/works/work-object), as well as `abstract` (only if `abstract_inverted_index` is not None). This abstract made human readable is create on the fly.```pythonw[&quot;abstract&quot;]``````python'Abstract To help researchers conduct a systematic review or meta-analysis as efficiently and transparently as possible, we designed a tool to accelerate the step of screening titles and abstracts. For many tasks—including but not limited to systematic reviews and meta-analyses—the scientific literature needs to be checked systematically. Scholars and practitioners currently screen thousands of studies by hand to determine which studies to include in their review or meta-analysis. This is error prone and inefficient because of extremely imbalanced data: only a fraction of the screened studies is relevant. The future of systematic reviewing will be an interaction with machine learning algorithms to deal with the enormous increase of available text. We therefore developed an open source machine learning-aided pipeline applying active learning: ASReview. We demonstrate by means of simulation studies that active learning can yield far more efficient reviewing than manual reviewing while providing high quality. Furthermore, we describe the options of the free and open source research software and present the results from user experience tests. We invite the community to contribute to open source projects such as our own that provide measurable and reproducible improvements over current practice.'```Please respect the legal constraints when using this feature.### Get lists of entities```pythonresults = Works().get()```For lists of entities, you can also `count` the number of records foundinstead of returning the results. This also works for search queries andfilters.```pythonWorks().count()# 10338153```For lists of entities, you can return the result as well as the metadata. By default, only the results are returned.```pythonresults, meta = Concepts().get(return_meta=True)``````pythonprint(meta){'count': 65073, 'db_response_time_ms': 16, 'page': 1, 'per_page': 25}```#### Filter records```pythonWorks().filter(publication_year=2020, is_oa=True).get()```which is identical to:```pythonWorks().filter(publication_year=2020).filter(is_oa=True).get()```#### Nested attribute filtersSome attribute filters are nested and separated with dots by OpenAlex. Forexample, filter on [`authorships.institutions.ror`](https://docs.openalex.org/api-entities/works/filter-works).In case of nested attribute filters, use a dict to build the query.```pythonWorks()  .filter(authorships={&quot;institutions&quot;: {&quot;ror&quot;: &quot;04pp8hn57&quot;}})  .get()```#### Search entitiesOpenAlex reference: [The search parameter](https://docs.openalex.org/api-entities/works/search-works)```pythonWorks().search(&quot;fierce creatures&quot;).get()```#### Search filterOpenAlex reference: [The search filter](https://docs.openalex.org/api-entities/works/search-works#search-a-specific-field)```pythonAuthors().search_filter(display_name=&quot;einstein&quot;).get()``````pythonWorks().search_filter(title=&quot;cubist&quot;).get()``````pythonFunders().search_filter(display_name=&quot;health&quot;).get()```#### Sort entity listsOpenAlex reference: [Sort entity lists](https://docs.openalex.org/api-entities/works/get-lists-of-works#page-and-sort-works).```pythonWorks().sort(cited_by_count=&quot;desc&quot;).get()```#### SelectOpenAlex reference: [Select fields](https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/select-fields).```pythonWorks().filter(publication_year=2020, is_oa=True).select([&quot;id&quot;, &quot;doi&quot;]).get()```#### SampleOpenAlex reference: [Sample entity lists](https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/sample-entity-lists).```pythonWorks().sample(100, seed=535).get()```#### Logical expressionsOpenAlex reference: [Logical expressions](https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/filter-entity-lists#logical-expressions)Inequality:```pythonSources().filter(works_count=&quot;&gt;1000&quot;).get()```Negation (NOT):```pythonInstitutions().filter(country_code=&quot;!us&quot;).get()```Intersection (AND):```pythonWorks().filter(institutions={&quot;country_code&quot;: [&quot;fr&quot;, &quot;gb&quot;]}).get()# sameWorks().filter(institutions={&quot;country_code&quot;: &quot;fr&quot;}).filter(institutions={&quot;country_code&quot;: &quot;gb&quot;}).get()```Addition (OR):```pythonWorks().filter(institutions={&quot;country_code&quot;: &quot;fr|gb&quot;}).get()```#### PagingOpenAlex offers two methods for paging: [basic paging](https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/paging#basic-paging) and [cursor paging](https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/paging#cursor-paging). Both methods are supported byPyAlex, although cursor paging seems to be easier to implement and less error-prone.##### Basic pagingSee limitations of [basic paging](https://docs.openalex.org/how-to-use-the-api/get-lists-of-entities/paging#basic-paging) in the OpenAlex documentation.It's relatively easy to implement basic paging with PyAlex, however it isadvised to use the built-in pager based on cursor paging.##### Cursor pagingUse `paginate()` for paging results. By default, `paginate`s argument `n_max`is set to 10000. Use `None` to retrieve all results.```pythonfrom pyalex import Authorspager = Authors().search_filter(display_name=&quot;einstein&quot;).paginate(per_page=200)for page in pager:    print(len(page))```### Get N-gramsOpenAlex reference: [Get N-grams](https://docs.openalex.org/api-entities/works/get-n-grams).```pythonWorks()[&quot;W2023271753&quot;].ngrams()```## Code snippetsA list of awesome use cases of the OpenAlex dataset.### Cited publications (referenced works)```pythonfrom pyalex import Works# the work to extract the referenced works ofw = Works()[&quot;W2741809807&quot;]Works()[w[&quot;referenced_works&quot;]]```### Get works of a single author```pythonfrom pyalex import WorksWorks().filter(author={&quot;id&quot;: &quot;A2887243803&quot;}).get()```### Dataset publications in the global south```pythonfrom pyalex import Works# the work to extract the referenced works ofw = Works() \  .filter(institutions={&quot;is_global_south&quot;:True}) \  .filter(type=&quot;dataset&quot;) \  .group_by(&quot;institutions.country_code&quot;) \  .get()```### Most cited publications in your organisation```pythonfrom pyalex import WorksWorks() \  .filter(authorships={&quot;institutions&quot;: {&quot;ror&quot;: &quot;04pp8hn57&quot;}}) \  .sort(cited_by_count=&quot;desc&quot;) \  .get()```## Experimental### AuthenticationOpenAlex experiments with authenticated requests at the moment. Authenticate your requests with```pythonimport pyalexpyalex.config.api_key = &quot;&lt;MY_KEY&gt;&quot;```## Alternatives[Diophila](https://github.com/smierz/diophila) is a nice Python wrapper for OpenAlex. It takes a slightlydifferent approach, especially interesting to those who don't like the pipe operations.R users can use the excellent [OpenAlexR](https://github.com/ropensci/openalexR) library.## License[MIT](/LICENSE)## ContactFeel free to reach out with questions, remarks, and suggestions. The[issue tracker](/issues) is a good starting point. You can also email me at[jonathandebruinos@gmail.com](mailto:jonathandebruinos@gmail.com).</longdescription>
</pkgmetadata>