<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hiredis-py[![Build Status](https://github.com/redis/hiredis-py/actions/workflows/integration.yaml/badge.svg)](https://github.com/redis/hiredis-py/actions/workflows/integration.yaml)[![License](https://img.shields.io/badge/License-BSD_3--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)Python extension that wraps protocol parsing code in [hiredis][hiredis].It primarily speeds up parsing of multi bulk replies.[hiredis]: http://github.com/redis/hiredis## Installhiredis-py is available on [PyPI](https://pypi.org/project/hiredis/), and can be installed via:```bashpip install hiredis```## Building and TestingBuilding this repository requires a recursive checkout of submodules, and building hiredis. The following example shows how to clone, compile, and run tests. Please note - you will need the gcc installed.```bashgit clone --recursse-submodules https://github.com/redis/hiredis-pypython setup.py build_ext --inplacepytest```### Requirementshiredis-py requires **Python 3.7+**.Make sure Python development headers are available when installing hiredis-py.On Ubuntu/Debian systems, install them with `apt-get install python3-dev`.## UsageThe `hiredis` module contains the `Reader` class. This class is responsible forparsing replies from the stream of data that is read from a Redis connection.It does not contain functionality to handle I/O.### Reply parserThe `Reader` class has two methods that are used when parsing replies from astream of data. `Reader.feed` takes a string argument that is appended to theinternal buffer. `Reader.gets` reads this buffer and returns a reply when thebuffer contains a full reply. If a single call to `feed` contains multiplereplies, `gets` should be called multiple times to extract all replies.Example:```python&gt;&gt;&gt; reader = hiredis.Reader()&gt;&gt;&gt; reader.feed(&quot;$5\r\nhello\r\n&quot;)&gt;&gt;&gt; reader.gets()b'hello'```When the buffer does not contain a full reply, `gets` returns `False`.This means extra data is needed and `feed` should be called again before calling`gets` again. Alternatively you could provide custom sentinel object via parameter,which is useful for RESP3 protocol where native boolean types are supported:Example:```python&gt;&gt;&gt; reader.feed(&quot;*2\r\n$5\r\nhello\r\n&quot;)&gt;&gt;&gt; reader.gets()False&gt;&gt;&gt; reader.feed(&quot;$5\r\nworld\r\n&quot;)&gt;&gt;&gt; reader.gets()[b'hello', b'world']&gt;&gt;&gt; reader = hiredis.Reader(notEnoughData=Ellipsis)&gt;&gt;&gt; reader.gets()Ellipsis```#### Unicode`hiredis.Reader` is able to decode bulk data to any encoding Python supports.To do so, specify the encoding you want to use for decoding replies wheninitializing it:```python&gt;&gt;&gt; reader = hiredis.Reader(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)&gt;&gt;&gt; reader.feed(b&quot;$3\r\n\xe2\x98\x83\r\n&quot;)&gt;&gt;&gt; reader.gets()'â˜ƒ'```Decoding of bulk data will be attempted using the specified encoding anderror handler. If the error handler is `'strict'` (the default), a`UnicodeDecodeError` is raised when data cannot be dedcoded. This is identicalto Python's default behavior. Other valid values to `errors` include`'replace'`, `'ignore'`, and `'backslashreplace'`. More information on thebehavior of these error handlers can be found[here](https://docs.python.org/3/howto/unicode.html#the-string-type).When the specified encoding cannot be found, a `LookupError` will be raisedwhen calling `gets` for the first reply with bulk data.#### Error handlingWhen a protocol error occurs (because of multiple threads using the samesocket, or some other condition that causes a corrupt stream), the error`hiredis.ProtocolError` is raised. Because the buffer is read in a lazyfashion, it will only be raised when `gets` is called and the first reply inthe buffer contains an error. There is no way to recover from a faulty protocolstate, so when this happens, the I/O code feeding data to `Reader` shouldprobably reconnect.Redis can reply with error replies (`-ERR ...`). For these replies, the customerror class `hiredis.ReplyError` is returned, **but not raised**.When other error types should be used (so existing code doesn't have to changeits `except` clauses), `Reader` can be initialized with the `protocolError` and`replyError` keywords. These keywords should contain a *class* that is asubclass of `Exception`. When not provided, `Reader` will use the defaulterror types.## BenchmarksThe repository contains a benchmarking script in the `benchmark` directory,which uses [gevent](http://gevent.org/) to have non-blocking I/O and redis-pyto handle connections. These benchmarks are done with a patched version ofredis-py that uses hiredis-py when it is available.All benchmarks are done with 10 concurrent connections.* SET key value + GET key  * redis-py: 11.76 Kops  * redis-py *with* hiredis-py: 13.40 Kops  * improvement: **1.1x**List entries in the following tests are 5 bytes.* LRANGE list 0 **9**:  * redis-py: 4.78 Kops  * redis-py *with* hiredis-py: 12.94 Kops  * improvement: **2.7x*** LRANGE list 0 **99**:  * redis-py: 0.73 Kops  * redis-py *with* hiredis-py: 11.90 Kops  * improvement: **16.3x*** LRANGE list 0 **999**:  * redis-py: 0.07 Kops  * redis-py *with* hiredis-py: 5.83 Kops  * improvement: **83.2x**Throughput improvement for simple SET/GET is minimal, but the larger multi bulk repliesget, the larger the performance improvement is.## LicenseThis code is released under the BSD license, after the license of hiredis.</longdescription>
</pkgmetadata>