<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Hop Client=============![](https://github.com/scimma/hop-client/workflows/build/badge.svg)[![codecov](https://codecov.io/gh/scimma/hop-client/branch/master/graph/badge.svg)](https://codecov.io/gh/scimma/hop-client)|              |        || ------------ | ------ || **Docs:**    | https://hop-client.readthedocs.io/en/stable/  |**hop-client** is a pub-sub client library for Multimessenger Astrophysics.## InstallationYou can install hop either via pip, conda, or from source.To install with pip:```pip install -U hop-client```To install with conda:```conda install -c conda-forge hop-client```To install from source:```tar -xzf hop-client-x.y.z.tar.gzcd hop-client-x.y.zpython setup.py install```## QuickstartBy default, authentication is enabled, reading in configuration settingsfrom `config.toml`. The path to this configuration can be found by running`hop auth locate`. One can initialize this configuration with defaultsettings by running `hop auth setup`. To disable authentication in the CLIclient, one can run `--no-auth`.### Command Line InterfacePublish a message:```hop publish kafka://hostname:port/gcn -f CIRCULAR example.gcn3```Example messages are provided in `tests/data` including:* A GCN circular (`example.gcn3`)* A VOEvent (`example_voevent.xml`)Consume messages:```hop subscribe kafka://hostname:port/gcn -s EARLIEST```This will read messages from the gcn topic from the earliest offsetand read messages until an end of stream (EOS) is received.### Python APIPublish messages:Using the python API, we can publish various types of messages, includingstructured messages such as GCN Circulars and VOEvents:```pythonfrom hop import streamfrom hop.models import GCNCircular# read in a GCN circularwith open(&quot;path/to/circular.gcn3&quot;, &quot;r&quot;) as f:    circular = GCNCircular.load(f)with stream.open(&quot;kafka://hostname:port/topic&quot;, &quot;w&quot;) as s:    s.write(circular)```In addition, we can also publish unstructured messages as long as they areJSON serializable:```pythonfrom hop import streamwith stream.open(&quot;kafka://hostname:port/topic&quot;, &quot;w&quot;) as s:    s.write({&quot;my&quot;: &quot;message&quot;})```By default, authentication is enabled for the Hop broker, reading in configurationsettings from `config.toml`. In order to modify various authentication options, onecan configure a `Stream` instance and pass in an `Auth` instance with credentials:```pythonfrom hop import Streamfrom hop.auth import Authauth = Auth(&quot;my-username&quot;, &quot;my-password&quot;)stream = Stream(auth=auth)with stream.open(&quot;kafka://hostname:port/topic&quot;, &quot;w&quot;) as s:    s.write({&quot;my&quot;: &quot;message&quot;})```To explicitly disable authentication one can set `auth` to `False`.Consume messages:```pythonfrom hop import streamwith stream.open(&quot;kafka://hostname:port/topic&quot;, &quot;r&quot;) as s:    for message in s:         print(message)```This will listen to the Hop broker, listening to new messages and printing them tostdout as they arrive until there are no more messages in the stream.By default, this will only process new messages since the connection was opened.The `start_at` option lets you control where in the stream you can start listeningfrom. For example, if you'd like to listen to all messages stored in a topic, you can do:```pythonfrom hop import Streamfrom hop.io import StartPositionstream = Stream(start_at=StartPosition.EARLIEST)with stream.open(&quot;kafka://hostname:port/topic&quot;, &quot;r&quot;) as s:    for message in s:         print(message)```## DevelopmentA Makefile is provided to ease in testing, deployment and generating documentation.A list of commands can be listed with `make help`.In addition, two extras are provided when installing the hop client that installsthe required test and documentation libraries:* dev: dependencies required for testing, linting and packaging* docs: dependencies required for building documentationAssuming you've cloned the repository and are in the project's root directory, you caninstall hop-client alongside all the required development dependencies by running:```pip install .[dev,docs]```### ReleasesTo create a new release, first make a Github Issue for the specific release using the [release template](https://github.com/scimma/hop-client/issues/new?assignees=&amp;labels=&amp;template=release-checklist.md&amp;title=Release+version+%3Cversion%3E). Complete the steps in the `Pre-release` section; once that section is finished, complete the `Release` section. Ensure that the new version release string follows the [semver](https://semver.org/) conventions, e.g., `v0.0.1`.These steps will result in a new Github release, as well as a new package version uploaded to `PyPI` and `conda-forge` via Github Actions.</longdescription>
</pkgmetadata>