<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>nece?=====Introduction------------.. figure:: https://raw.githubusercontent.com/tatterdemalion/django-nece/master/images/nece.png   :alt: neceA “Content Translation Framework” using Postgresql’s jsonb field. Itsimply sets and gets translations from a jsonb field called``translations``.Why?~~~~You might ask why you should use django-nece since there are other, andmore mature content translation frameworks like `django-hvad`_ and`django-modeltranslation`_. Both of them are good in some ways, worst inothers.For instance, it is very hard for ``django-hvad`` users to get defaultlanguage if there is no corresponding translation for an object. And itholds translated values in a different table, so every translation queryresults in another hit to the database.On the other hand ``django-modeltranslation`` adds multiple additionalfields for multiple languages. The number of fields inceases by thenumber of languages you need to support. At the end it becomes a hugechunk of an object if you need to add more than 20 languages.``nece?`` more or less works like the latter one with an importantdifference. It uses Postgresql’s new ``JSONB`` field to hold translationinformation. And overrides the original one on query.Dependencies------------::    postgresql &gt;= 9.4.5    Django &gt;= 1.9    psycopg2 &gt;= 2.5.4Installation------------via pypi:~~~~~~~~~::    pip install necevia setup.py~~~~~~~~~~~~::    python setup.py installUsage-----Lets say we have a model called ``Fruit``:::    from nece.models import TranslationModel    class Fruit(TranslationModel):        name = CharField(max_length=255)        def __str__(self):            return self.name        class Meta:            translatable_fields = ('name',)``TranslationModel`` adds a jsonb field to this table and setstranslations in a notation like the one below:::    {u'de_de': {u'name': u'Apfel'},     u'tr_tr': {u'name': u'elma'}}When we need the German translation we can simply choose the languageand get the attribute as usual:::    &gt;&gt; f = Fruit.objects.get(name='apple')    &gt;&gt; print(f.name)    apple    &gt;&gt; f.language('de_de')    &gt;&gt; print(f.name)    ApfelYou can also filter out the ones containing any language translation:::    &gt;&gt; Fruit.objects.all()    [&lt;Fruit: apple&gt;, &lt;Fruit: pear&gt;, &lt;Fruit: banana&gt;]    &gt;&gt; Fruit.objects.language('tr_tr')    [&lt;Fruit: elma&gt;, &lt;Fruit: armut&gt;]  # there is no translation for banana    &gt;&gt; Fruit.objects.language_or_default('tr_tr')    [&lt;Fruit: elma&gt;, &lt;Fruit: armut&gt;, &lt;Fruit: banana&gt;]    &gt;&gt; Fruit.objects.language('tr_tr').filter(name='elma')    [&lt;Fruit: elma&gt;]    &gt;&gt; Fruit.objects.language('tr_tr').get(name='elma')    &lt;Fruit: elma&gt;Updating translations~~~~~~~~~~~~~~~~~~~~~::    &gt;&gt; fruit._language_code    tr_tr    &gt;&gt; fruit.name    elma    &gt;&gt; fruit.translate(name='armut').save()    &gt;&gt; fruit.name    armut    &gt;&gt; fruit.language('en')    &gt;&gt; fruit.translate('it_it', name='pera')    &gt;&gt; fruit.language('it_it')    &gt;&gt; fruit.name    peraSettings--------TRANSLATIONS_DEFAULT~~~~~~~~~~~~~~~~~~~~Default language code. Default value: ```en_us```TRANSLATIONS_MAP~~~~~~~~~~~~~~~~Shortcuts for ```languagecode_countrycode``` notation. Example:::    TRANSLATIONS_MAP = {        &quot;en&quot;: &quot;en_us&quot;,        &quot;tr&quot;: &quot;tr_tr&quot;,        &quot;ar&quot;: &quot;ar_sy&quot;,        &quot;bg&quot;: &quot;bg_bg&quot;,        &quot;cs&quot;: &quot;cs_cz&quot;,        &quot;da&quot;: &quot;da_dk&quot;,        ...    }Default:::    {'en': 'en_us'}TRANSLATIONS_FALLBACK~~~~~~~~~~~~~~~~~~~~~Fallback language would be used if a translation is missing.Example:::    TRANSLATIONS_FALLBACK = {        'fr_ca': ['fr_fr'],        'en_us': ['en_gb'],    }Admin panel--------Use `TranslatableModelAdmin` for pretty JSON editor (powered by `django-admin-json-editor`_)... figure:: https://raw.githubusercontent.com/tatterdemalion/django-nece/master/images/admin.png   :alt: neceExample:.. code-block:: python   # settings.py   INSTALLED_APPS = [       ...       'django_admin_json_editor',       ...   ]   # admin.py   from nece.admin import TranslatableModelAdmin   class PlaceAdmin(TranslatableModelAdmin):       list_display = ('...')Contributors &amp; Thanks---------------------- `Erkan Ay`_- `Ayman Khalil`_- `Gönül Sabah`_- `Faruk Rahmet`_- `Mathieu Richardoz`_- `Marc Hertzog`_- `Alexey Kotenko`_`Change Log`_.. _django-hvad: https://github.com/kristianoellegaard/django-hvad.. _django-modeltranslation: https://github.com/deschler/django-modeltranslation.. _Erkan Ay: https://github.com/erkanay.. _Ayman Khalil: https://github.com/aymankh86.. _Gönül Sabah: https://github.com/gonulsabah.. _Faruk Rahmet: https://github.com/farukrahmet.. _Mathieu Richardoz: https://github.com/metamatik.. _Marc Hertzog: https://github.com/kemar.. _Alexey Kotenko: https://github.com/k0t3n.. _Change Log: https://github.com/tatterdemalion/django-nece/blob/master/CHANGELOG.md.. _django-admin-json-editor: https://github.com/abogushov/django-admin-json-editor</longdescription>
</pkgmetadata>