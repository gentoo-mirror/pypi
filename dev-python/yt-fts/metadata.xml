<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># yt-fts - Youtube Full Text Search `yt-fts` is a command line program that uses yt-dlp to scrape all of a youtube channels subtitlesand load them into an sqlite database that is searchable from the command line. It allows you toquery a channel for specific key word or phrase and will generate time stamped youtube urls tothe video containing the keyword. - [Blog Post](https://notjoemartinez.com/blog/youtube_full_text_search/)- [Semantic Search](#Semantic-Search-via-OpenAI-embeddings-API) (Experimental)- [CHANGELOG](CHANGELOG.md)https://github.com/NotJoeMartinez/yt-fts/assets/39905973/6ffd8962-d060-490f-9e73-9ab179402f14## Installation **pip**```bashpip install yt-fts```**from source**```bashgit clone https://github.com/NotJoeMartinez/yt-ftspython3 -m venv .envsource .env/bin/activatepip install -r requirements.txtpython3 -m yt-fts```## Dependencies This project requires [yt-dlp](https://github.com/yt-dlp/yt-dlp) installed globally. Platform specific installation instructions are available on the [yt-dlp wiki](https://github.com/yt-dlp/yt-dlp/wiki/Installation). **pip**```bashpython3 -m pip install -U yt-dlp```**MacOS/Homebrew**```bashbrew install yt-dlp```**Windows/winget**```bashwinget install yt-dlp```## Usage ```Usage: yt-fts [OPTIONS] COMMAND [ARGS]...Options:  --version  Show the version and exit.  --help     Show this message and exit.Commands:  delete          Delete a channel and all its data.  download        Download subtitles from a specified YouTube channel.  get-embeddings  Generate embeddings for a channel using OpenAI's...  search          Search for a specified text within a channel, a...  list View library, transcripts, channel video list and...  update          Updates a specified YouTube channel.```## `download`Download subtitles ```Usage: yt-fts download [OPTIONS] CHANNEL_URL  Download subtitles from a specified YouTube channel.  You must provide the URL of the channel as an argument. The script will  automatically extract the channel id from the URL.Options:  -id, --channel-id TEXT        Optional channel id to override the one from                                the url  -l, --language TEXT           Language of the subtitles to download  -j, --number-of-jobs INTEGER  Optional number of jobs to parallelize the run```### Examples:**Basic download by url**```bashyt-fts download &quot;https://www.youtube.com/@TimDillonShow/videos&quot;```**Multithreaded download**```bashyt-fts download --number-of-jobs 6 &quot;https://www.youtube.com/@TimDillonShow/videos&quot;```**specify channel id**If `download` fails you can manually input the channel id with the `--channel-id` flag.The channel url should still be an argument ```bashyt-fts download --channel-id &quot;UC4woSp8ITBoYDmjkukhEhxg&quot; &quot;https://www.youtube.com/@TimDillonShow/videos&quot; ```**specify language**Languages are represented using [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes ```bashyt-fts download --language de &quot;https://www.youtube.com/@TimDillonShow/videos&quot; ```## `list````Usage: yt-fts list [OPTIONS]  View library, transcripts, channel video list and config settings.Options:  -t, --transcript TEXT  Show transcript for a video  -c, --channel TEXT     Show list of videos for a channel  -l, --library          Show list of channels in library  --config               Show path to config directory``````yt-fts show -l```output:```  id    count  channel_name         channel_url----  -------  -------------------  ----------------------------------------------------   1      265  The Tim Dillon Show  https://youtube.com/channel/UC4woSp8ITBoYDmjkukhEhxg   2      688  Lex Fridman (ss)     https://youtube.com/channel/UCSHZKyawb77ixDdsGog4iWA   3      434  Traversy Media       https://youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA```## `search`Search saved subtitles ```Usage: yt-fts search [OPTIONS] TEXT  Search for a specified text within a channel, a specific video, or across  all channels.Options:  -c, --channel TEXT   The name or id of the channel to search in. This is                       required unless the --all or --video options are used.  -v, --video TEXT     The id of the video to search in. This is used instead                       of the channel option.  -a, --all            Search in all channels.  -s, --semantic       Use Semantic Search  -l, --limit INTEGER  Max number of results to return  -e, --export         Export search results to a CSV file.```- The search string does not have to be a word for word and match - Use Id if you have channels with the same name or channels that have special characters in their name - Search strings are limited to 40 characters. ### Examples:**Search by channel**```bashyt-fts search &quot;life in the big city&quot; --channel &quot;The Tim Dillon Show&quot;# or yt-fts search &quot;life in the big city&quot; --channel 1  # assuming 1 is id of channel```output:```&quot;Dennis would go hey life in the big city&quot;    Channel: The Tim Dillon Show    Title: 154 - The 3 AM Episode - YouTube    Time Stamp: 00:58:53.789    Video ID: MhaG3Yfv1cU    Link: https://youtu.be/MhaG3Yfv1cU?t=3530```**Search all channels**```bashyt-fts search &quot;text to search&quot; --all```**Search in video**```bashyt-fts search &quot;text to search&quot; --video [VIDEO_ID]```**Advanced Search Syntax**The search string supports sqlite [Enhanced Query Syntax](https://www.sqlite.org/fts3.html#full_text_index_queries).which includes things like [prefix queries](https://www.sqlite.org/fts3.html#termprefix) which you can use to match parts of a word.  ```bashyt-fts search &quot;rea* kni* Mali*&quot; --channel &quot;The Tim Dillon Show&quot; ```output:```&quot;real knife fight down here in Malibu I&quot;    Channel: The Tim Dillon Show    Title: #200 - Knife Fights In Malibu | The Tim Dillon Show - YouTube    Time Stamp: 00:45:39.420    Video ID: e79H5nxS65Q    Link: https://youtu.be/e79H5nxS65Q?t=2736```## `update`Will update a channel with new subtitles if any are found. ```Usage: yt-fts update [OPTIONS]  Updates a specified YouTube channel.  You must provide the ID of the channel as an argument. Keep in mind some  might not have subtitles enabled. This command will still attempt to  download subtitles as subtitles are sometimes added later.Options:  -c, --channel TEXT            The name or id of the channel to update.                                [required]  -l, --language TEXT           Language of the subtitles to download  -j, --number-of-jobs INTEGER  Optional number of jobs to parallelize the run```## `delete` Will delete a channel from your database ```Usage: yt-fts delete [OPTIONS]  Delete a channel and all its data.  You must provide the name or the id of the channel you want to delete as an  argument.  The command will ask for confirmation before performing the deletion.Options:  -c, --channel TEXT  The name or id of the channel to delete  [required]```**Examples:**```bashyt-fts delete &quot;The Tim Dillon Show&quot;# oryt-fts delete 1 ```--- # Semantic Search via OpenAI embeddings API The following commands are a work in progress but should enable semantic search. This requires that you have an openAI API key which you can learn more about that [here](https://platform.openai.com/docs/api-reference/introduction). **Limitations**Keep in mind that generating embeddings will substantially grow the size of your subtitles database and will run slower due to the limitations of working with vectors in sqlite. When running semanticsearches for the first time, API access is still required to generate embeddings for the search string.These search string embeddings are saved to a history table and won't require additional api requestsafter. ### `get-embedings````Usage: yt-fts get-embeddings [OPTIONS]  Generate embeddings for a channel using OpenAI's embeddings API.  Requires an OpenAI API key to be set as an environment variable  OPENAI_API_KEY.Options:  -c, --channel TEXT   The name or id of the channel to generate embeddings                       for  --open-api-key TEXT  OpenAI API key. If not provided, the script will                       attempt to read it from the OPENAI_API_KEY environment                       variable.```</longdescription>
</pkgmetadata>