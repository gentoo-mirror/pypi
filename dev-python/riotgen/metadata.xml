<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>riotgen: a RIOT source code generator-------------------------------------|CI| |codecov| |PyPi|.. |CI| image:: https://github.com/aabadie/riot-generator/workflows/CI/badge.svg    :target: https://github.com/aabadie/riot-generator/actions?query=workflow%3ACI+branch%3Amaster    :alt: CI status.. |codecov| image:: https://codecov.io/gh/aabadie/riot-generator/branch/master/graph/badge.svg  :target: https://codecov.io/gh/aabadie/riot-generator.. |PyPi| image:: https://badge.fury.io/py/riotgen.svg    :target: https://badge.fury.io/py/riotgen    :alt: riotgen version``riotgen`` is a command line interface helper tool that is used to bootstrap`RIOT &lt;http://github.com/RIOT-OS/RIOT&gt;`_ source files for standalone applications,board supports, driver modules, system modules, packages and example/test applications.``riotgen`` is **Python 3.7+** compatible.Installation............Install ``riotgen`` using ``pip``::    pip install riotgenInstalling from source......................Clone this repository::    git clone git://github.com/aabadie/riot-generator.gitInstall using ``pip`` from the source directory::    cd riot-generator    pip install .Usage.....``riotgen`` uses subcommands for generating the code for applications,tests, packages and board support::    riotgen --help    Usage: riotgen [OPTIONS] COMMAND [ARGS]...    Options:      --version  Show the version and exit.      --help     Show this message and exit.    Commands:      application  Bootstrap a RIOT application      board        Bootstrap a RIOT board support      driver       Bootstrap a RIOT driver module      example      Bootstrap a RIOT example application      module       Bootstrap a RIOT system module      pkg          Bootstrap a RIOT external package      test         Bootstrap a RIOT test applicationExamples........Generate an application in the current directory that build against the RIOTsource located in /opt/RIOT and using the interactive wizzard::    riotgen application -i -r /opt/RIOTor::    RIOTBASE=/opt/RIOT riotgen application -iThe command line wizard will ask for questions about the newapplication: target board, RIOT base directory, author name, etc.Generate an application using a configuration file (see the`samples &lt;https://github.com/aabadie/riot-generator/tree/master/riotgen/samples&gt;`_provided in the source code)::    riotgen application --riotbase /opt/RIOT --config path/to/config/file.cfgIn both cases, once complete, the new application can be built using::    make``example``, ``driver``, ``module``, ``pkg``, ``test`` and ``board`` subcommands generatethe skeleton code directly in the RIOT base directory::    riotgen example --riotbase /opt/RIOT -i    riotgen driver --riotbase /opt/RIOT -i    riotgen module --riotbase /opt/RIOT -i    riotgen pkg --riotbase /opt/RIOT -i    riotgen board --riotbase /opt/RIOT -i    riotgen test --riotbase /opt/RIOT -iTesting.......Testing is performed using the `Tox &lt;http://github.com/tox-dev/tox&gt;`_automation tool. You can install Tox using pip::    pip install toxTo run the whole tests and checks, use::    toxTo only run the tests, use::    tox -e testsTo only run the static checks (``flake8``, ``black``, ``twine --check``), use::    tox -e checkTo reformat your code following the `black &lt;https://black.readthedocs.io/en/stable&gt;`_tool, use::    tox -e format</longdescription>
</pkgmetadata>