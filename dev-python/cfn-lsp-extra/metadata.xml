<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Cfn Lsp Extra![Python Version](https://img.shields.io/pypi/pyversions/cfn-lsp-extra) [![PyPI](https://img.shields.io/pypi/v/cfn-lsp-extra)](CHANGELOG.md) [![codecov](https://codecov.io/gh/LaurenceWarne/cfn-lsp-extra/branch/master/graph/badge.svg?token=48ixiDIBpq)](https://codecov.io/gh/LaurenceWarne/cfn-lsp-extra)An experimental cloudformation language server (with support for SAM templates) built on top of [cfn-lint](https://github.com/aws-cloudformation/cfn-lint) and the [Cloudformation user guide](https://github.com/awsdocs/aws-cloudformation-user-guide), aiming to provide hovering, completion, etc.  YAML and JSON are supported, though YAML has more features currently implemented (for example snippets) and will give a better experience.  Trust me.https://user-images.githubusercontent.com/17688577/176939586-df1d9ed8-5ec6-46d5-9f26-7222644047bd.mp4## Features| Method                            | Status                                                                                                                                                                    ||-----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|| `textDocument/hover`              | Done for resources (in particular, required properties for a resource will be auto-expanded), resource properties, subproperties and `!Ref`s. *TODO* intrinsic functions. || `textDocument/completion`         | Done for resources, resource properties, subproperties, property values (for enums), refs, !GetAtts and intrinsic functions. *TODO* `Fn::GetAtt`.                         || `textDocument/definition`         | Done for `!Ref`s and `!GetAtt`s.  *TODO* mappings.                                                                                                                        || `textDocument/publishDiagnostics` | Done through `cfnlint`.                                                                                                                                                   |Also checkout the [changelog](/CHANGELOG.md).## InstallationFirst install the executable, [`pipx`](https://pypa.github.io/pipx/) is recommended, but you can use `pip` instead if you like to live dangerously:```bashpipx install cfn-lsp-extra```Or get the bleeding edge from source:```bashpipx install git+https://github.com/laurencewarne/cfn-lsp-extra.git@$(git ls-remote git@github.com:laurencewarne/cfn-lsp-extra.git | head -1 | cut -f1)```Updating:```bashpipx upgrade cfn-lsp-extra```### EmacsInstall the [lsp-cfn.el](https://github.com/LaurenceWarne/lsp-cfn.el) package.### NeovimMake sure you're running at least `0.8`, then add the following in `~/.config/nvim/filetype.lua`:```luavim.filetype.add {  pattern = {    ['.*'] = {      priority = math.huge,      function(path, bufnr)        local line1 = vim.filetype.getlines(bufnr, 1)        local line2 = vim.filetype.getlines(bufnr, 2)        if vim.filetype.matchregex(line1, [[^AWSTemplateFormatVersion]] ) or           vim.filetype.matchregex(line1, [[AWS::Serverless-2016-10-31]] ) then          return 'yaml.cloudformation'        elseif vim.filetype.matchregex(line1, [[[&quot;']AWSTemplateFormatVersion]] ) or           vim.filetype.matchregex(line2, [[[&quot;']AWSTemplateFormatVersion]] ) or           vim.filetype.matchregex(line1, [[AWS::Serverless-2016-10-31]] ) or           vim.filetype.matchregex(line2, [[AWS::Serverless-2016-10-31]] ) then          return 'json.cloudformation'        end      end,    },  },}```Then you can use [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim) to start the server on those file types:```vimlet g:LanguageClient_serverCommands = {    \ 'yaml.cloudformation': ['~/.local/bin/cfn-lsp-extra'],    \ 'json.cloudformation': ['~/.local/bin/cfn-lsp-extra']    \ }```Patches documenting integration for other editors are very welcome!## Development`cfn-lsp-extra` uses [nox](https://github.com/wntrblm/nox) for virtualenv management and [poetry](https://github.com/python-poetry/poetry) for dependency management.  You can install both of them using:```bashpipx install noxpipx install poetry```And then run tests, linting, etc (switching `3.9` for whichever Python version):```bashnox --session tests-3.9              # unit testsnox --session integration-tests-3.9  # integration testsnox --session lint-3.9               # flake8 lintsnox --session mypy-3.9               # mypy checks```## Alternatives### [vscode-cfn-lint](https://github.com/aws-cloudformation/cfn-lint-visual-studio-code)### [cfn-lint](https://github.com/aws-cloudformation/cfn-lint)Note this is used by `cfn-lsp-extra` under the hood to generate [diagnostics](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnostic).  One difference with `cfn-lsp-extra` is that diagnostics will be refreshed every time you make a change to the document, in other words you don't need to save the file.### [yamlls](https://github.com/redhat-developer/yaml-language-server)You can use `yamlls` in conjunction with the Cloudformation schema at https://www.schemastore.org/json/ as an alternative.  For Emacs, `lsp-mode` can install `yamlls` for you, from there you could do something like:```elisp(defun my-yamlls-cloudformation-setup ()  ;; There's also one for serverless  (lsp-yaml-set-buffer-schema &quot;https://raw.githubusercontent.com/awslabs/goformation/master/schema/cloudformation.schema.json&quot;)  (setq-local   lsp-yaml-custom-tags   [&quot;!And&quot;    &quot;!Base64&quot;    &quot;!Cidr&quot;    &quot;!Equals&quot;    &quot;!FindInMap sequence&quot;    &quot;!GetAZs&quot;    &quot;!GetAtt&quot;    &quot;!If&quot;    &quot;!ImportValue&quot;    &quot;!Join sequence&quot;    &quot;!Not&quot;    &quot;!Or&quot;    &quot;!Ref Scalar&quot;    &quot;!Ref&quot;    &quot;!Select&quot;    &quot;!Split&quot;    &quot;!Sub&quot;    &quot;!fn&quot;]));; Using the mode defined by https://www.emacswiki.org/emacs/CfnLint(add-hook 'cfn-yaml-mode-hook #'my-yamlls-cloudformation-setup)(add-hook 'cfn-yaml-mode-hook #'lsp-deferred)```This will give you completions (and some support for value completions?), though no hover documentation.</longdescription>
</pkgmetadata>