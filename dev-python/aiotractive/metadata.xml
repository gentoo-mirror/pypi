<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## aiotractive![Continuous Integration](https://github.com/zhulik/aiotractive/workflows/Continuous%20Integration/badge.svg?branch=main)**Unofficial** Asynchronous Python client for the [Tractive](https://tractive.com) REST API.**This project and it's author are not affilated with Tractive GmbH**This project is a result of reverse engineering of the Tractive web app.Inspired by [home_assistant_tractive](https://github.com/Danielhiversen/home_assistant_tractive).Initially some code was borrowed from home_assistant_tractive, but in the end all of it was replaced with my own implementations.The package is in active development. **Not all features available in the Tractive web app are implemented.**Important notes:- In order to use Tractive devices and their service you need to have an active subscription.- Tractive may change their API at any point of time and this project will be broken. Please, report any issues.## Installation`pip install aiotractive`## Usage```pythonimport asynciofrom aiotractive import Tractiveasync def main():  async with Tractive(&quot;email&quot;, &quot;password&quot;) as client:    # interact with the client here    passif __name__ == &quot;__main__&quot;:  asyncio.run(main())```### TractiveTractive is the entrypoint class, it acts as an async context manager and provides access to API endpoints.#### Authentication```pythonclient.authenticate()# {'user_id': 'user_id', 'client_id': 'client_id', 'expires_at': 1626821491, 'access_token': 'long access token'}```#### Trackers```pythontrackers = await client.trackers()tracker = trackers[0]# Ortracker = client.tracker(&quot;TRACKER_ID&quot;)# Retrieve detailsawait trackers.details() # Includes device capabilities, battery status(not level), charging state and so onawait tracker.hw_info() # Includes battery level, firmware version, model and so on# Retrieve current location await tracker.pos_report() # Includes coordinates, latitude, speed and so on# Retrieve hardware info# Control the buzzerawait set_buzzer_active(True) # or False# Control the LEDawait set_led_active(True) # or False# Control the live trackingawait set_live_tracking_active(True) # or False```#### Trackable objects (usually pets)```pythonobjects = await client.trackable_objects()object = objects[0]# Retrieve detailsawait object.details() # Includes pet's name, pet's tracker id and so on```#### Events```pythonasync for event in client.events():    pp(event)```After connecting you will immediately receive one `tracker_status` event per owned tracker.The first event always includes full current status of the tracker including current position, battery level, states of the buzzer,the LED and the live tracking.All following events will have the same name, but only include one of these: either a position, battery info, or a buzzer/LED/livestatus.## ContributionYou know;)</longdescription>
</pkgmetadata>