<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Buildpipe=========A Buildkite plugin to dynamically generate pipelines. Especially usefulfor monorepos where you want to create dependencies between projects.Example-------![Update projects](images/example.png)### initial\_pipeline.yml```yamlsteps:  - label: &quot;:buildkite:&quot;    plugins:      - jwplayer/buildpipe#v0.8.0:          dynamic_pipeline: dynamic_pipeline.yml```### dynamic\_pipeline.yml```yamlprojects: - label: project1   path: project1/  # changes in this dir will trigger steps for project1   skip: deploy*  # skip steps with label matching deploy* (e.g. deploy-prd) - label: project2   skip: test   path:      - project2/      - project1  # you can trigger a project using multiple paths - label: project3   skip:  # you can skip a list of projects     - test     - deploy-stg   path: project3/somedir/  # subpaths can also be triggeredsteps:  # the same schema as regular buildkite pipeline steps  - label: test    env:      BUILDPIPE_SCOPE: project  # this variable ensures a test step is generated for each project    command:      - cd $$BUILDPIPE_PROJECT_PATH  # BUILDPIPE_PROJECT_PATH will be set by buildpipe      - make test  - wait  - label: build    branches: &quot;master&quot;    env:      BUILDPIPE_SCOPE: project    command:      - cd $$BUILDPIPE_PROJECT_PATH      - make build      - make publish-image    agents:      - queue=build  - wait  - label: tag    branches: &quot;master&quot;    command:      - make tag-release  - wait  - label: deploy-stg    branches: &quot;master&quot;    env:      BUILDPIPE_SCOPE: project    command:      - cd $$BUILDPIPE_PROJECT_PATH      - make deploy-staging  - wait  - block: &quot;:rocket: Release!&quot;    branches: &quot;master&quot;  - wait  - label: deploy-prd    branches: &quot;master&quot;    env:      BUILDPIPE_SCOPE: project    command:      - cd $$BUILDPIPE_PROJECT_PATH      - make deploy-prod```The above pipelines specify the following:-   There are three projects to track in the repository.-   The env variable `BUILDPIPE_SCOPE: project` tells buildpipe to    generate a step for each project if that project changed.-   The `skip` option will skip any step label matching `deploy*`.-   The env variable `BUILDPIPE_PROJECT_PATH` is created by buildpipe as    the project\'s path. If multiple paths are specified for a project,    it\'s the first path.### Full working exampleFor a full working example, check out [Buildkite Monorepo Example](https://github.com/ksindi/buildkite-monorepo-example).Configuration-------------### Plugin| Option           | Required | Type   | Default | Description| ---------------- | -------- | ------ | ------- | -------------------------------------------------- || default_branch   | No       | string | master  | Default branch of repository || diff_pr          | No       | string |         | Override command for non-default branch (see below for a better explanation of the defaults) || diff_default     | No       | string |         | Override command for default branch (see below for a better explanation of the defaults) || dynamic_pipeline | Yes      | string |         | The name including the path to the pipeline that contains all the actual steps || log_level        | No       | string | INFO    | The Level of logging to be used by the python script underneath; pass DEBUG for verbose logging if errors occur |### Project schema| Option | Required | Type   | Default | Description                           || ------ | -------- | ------ | ------- | ------------------------------------- || label  | Yes      | string |         | Project label                         || path   | Yes      | array  |         | The path(s) that specify changes to a project || skip   | No       | array  |         | Exclude steps that have labels that match the rule |Other useful things to note:-   Option `skip` make use of Unix shell-style wildcards (Look at    .gitignore files for inspiration)-   If multiple paths are specified, the environment variable    `BUILDPIPE_PROJECT_PATH` will be the first path.`diff_` commands----------------Depending on your [mergestrategy](https://help.github.com/en/github/administering-a-repository/about-merge-methods-on-github),you might need to use different diff command.Buildpipe assumes you are using a merge strategy on the default branch, which is assumed to be `master`.The command for the non-default branch (e.g. when you have a PR up) is:```bashgit log --name-only --no-merges --pretty=format: origin..HEAD```The command for the default branch you merge to is currently:```bashgit log -m -1 --name-only --pretty=format: $BUILDKITE_COMMIT```Requirements------------Python3 is currently required, but we are [planning](https://github.com/jwplayer/buildpipe-buildkite-plugin/issues/43) to convert buildpipe to a binary using Go.Just make sure to install Python3 in your agent bootstrap script or Dockerfile.#### Cloudformation bootstrap script```bash# Install python3yum -y install python3 python3-pippip3 install -U setuptools wheel```#### Agent Dockerfile```FROM buildkite/agent:3.0RUN apk add --no-cache \  # Languages  python3 py-setuptools```Troubleshooting---------------### Buildpipe is incorrectly showing project as changedBuildkite doesn\'t by default do clean checkouts. To enable cleancheckouts set the `BUILDKITE_CLEAN_CHECKOUT` [environment variable](https://buildkite.com/docs/pipelines/environment-variables). Anexample is to modify the pre-checkout hook,`.buildkite/hooks/pre-checkout`:```bash#!/bin/bashset -euo pipefailecho '--- :house_with_garden: Setting up pre-checkout'export BUILDKITE_CLEAN_CHECKOUT=&quot;true&quot;```Testing-------```bashmake test```License-------MITAcknowledgements----------------The rewrite to a plugin was inspired by[git-diff-conditional-buildkite-plugin](https://github.com/Zegocover/git-diff-conditional-buildkite-plugin).</longdescription>
</pkgmetadata>