<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python interface library for Jfrog Artifactory==============================================|Build Status|This module is intended to serve as a logical descendant of`pathlib &lt;https://docs.python.org/3/library/pathlib.html&gt;`__, a Python 3module for object-oriented path manipulations. As such, it implementseverything as closely as possible to the origin with few exceptions,such as stat().Usage Examples==============Walking Directory Tree----------------------Getting directory listing:::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://repo.jfrog.org/artifactory/gradle-ivy-local&quot;)    for p in path:        print pFind all .gz files in current dir, recursively:::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://repo.jfrog.org/artifactory/distributions/org/&quot;)    for p in path.glob(&quot;**/*.gz&quot;):        print pDownloading Artifacts---------------------Download artifact to a local filesystem:::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://repo.jfrog.org/artifactory/distributions/org/apache/tomcat/apache-tomcat-7.0.11.tar.gz&quot;)            with path.open() as fd:        with open(&quot;tomcat.tar.gz&quot;, &quot;wb&quot;) as out:            out.write(fd.read())Uploading Artifacts-------------------Deploy a regular file ``myapp-1.0.tar.gz``::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0&quot;)    path.mkdir()    path.deploy_file('./myapp-1.0.tar.gz')Deploy a debian package ``myapp-1.0.deb``::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://my-artifactory/artifactory/ubuntu-local/pool&quot;)    path.deploy_deb('./myapp-1.0.deb',                     distribution='trusty',                    component='main',                    architecture='amd64')Authentication--------------To provide username and password to access restricted resources, you canpass ``auth`` parameter to ArtifactoryPath:::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://my-artifactory/artifactory/myrepo/restricted-path&quot;,        auth=('admin', 'ilikerandompasswords'))    path.touch()SSL Cert Verification Options-----------------------------See `Requests - SSLverification &lt;http://docs.python-requests.org/en/latest/user/advanced/#ssl-cert-verification&gt;`__for more details.::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0&quot;)... is the same as::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0&quot;,         verify=True)Specify a local cert to use as client side certificate::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0&quot;,        cert=&quot;/path_to_file/server.pem&quot;)Disable host cert verification::    from artifactory import ArtifactoryPath    path = ArtifactoryPath(        &quot;http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0&quot;,        verify=False)| **Note:** If host cert verification is disabled urllib3 will throw a  `InsecureRequestWarning &lt;https://urllib3.readthedocs.org/en/latest/security.html#insecurerequestwarning&gt;`__.| To disable these warning, one needs to call  urllib3.disable\_warnings().::    import requests.packages.urllib3 as urllib3    urllib3.disable_warnings()Global Configuration File-------------------------Artifactory Python module also has a way to specify allconnection-related settings in a central file,``~/.artifactory_python.cfg`` that is read upon the creation of first``ArtifactoryPath`` object and is stored globally. For instance, you canspecify per-instance settings of authentication tokens, so that youwon't need to explicitly pass ``auth`` parameter to ``ArtifactoryPath``.Example:::    [http://artifactory-instance.com/artifactory]    username = deployer    password = ilikerandompasswords    verify = false    [another-artifactory-instance.com/artifactory]    username = foo    password = @dmin    cert = ~/mycertWhether or not you specify ``http://`` or ``https://`` prefix is notessential. The module will first try to locate the best match and thentry to match URLs without prefixes. So if in the config you specify``https://my-instance.local`` and call ``ArtifactoryPath`` with``http://my-instance.local``, it will still do the right thing... |Build Status| image:: https://travis-ci.org/Parallels/artifactory.svg?branch=develop   :target: https://travis-ci.org/Parallels/artifactory</longdescription>
</pkgmetadata>