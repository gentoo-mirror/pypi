<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>---hide:  - navigation---# PrettyQt: Pythonic layer on top of PyQt6 / PySide6[![PyPI Latest Release](https://img.shields.io/pypi/v/prettyqt.svg)](https://pypi.org/project/prettyqt/)[![Package Status](https://img.shields.io/pypi/status/prettyqt.svg)](https://pypi.org/project/prettyqt/)[![CodeCov](https://codecov.io/gh/phil65/PrettyQt/branch/master/graph/badge.svg)](https://codecov.io/gh/phil65/PrettyQt)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![PyUp](https://pyup.io/repos/github/phil65/PrettyQt/shield.svg)](https://pyup.io/repos/github/phil65/PrettyQt/)## What is it?**PrettyQt** is a Python package that provides a pythonic layer on top of the GUI frameworks PyQt6 / PySide6.## Main Features  - Subclasses for a large part of the Qt classes, enriched with helper and \__dunder__ methods to give a feel of a native GUI library.  - more than 80 pre-defined widgets and layouts for common use cases  - [more than 30 ItemModels for different data types](models.md)  - [more than 25 general-purpose proxy models](proxies.md)  - [10 ItemDelegates for different purposes](delegates.md)  - [20 different validators](validators.md)  - Integration with pandas / numpy.  - much, much more.PrettyQt basically is a wrapper for the whole Qt API (either on top of PySide6 or PyQt6 bindings).Perhaps it can be seen as a small Python equivalent of the KDE framework.A large part of the library consists of a tree of mixins, with one mixin for each Qt class.These mixins also inherit from each other and are applied to the Qt classes.That way each class gets all helper methods from all sub-mixins.Example: The class &quot;TreeView&quot; inherits from original Qt Class &quot;QTreeView&quot; and gets helper methodsfrom &quot;TreeViewMxin&quot;, &quot;AbstractItemViewMixin&quot;, &quot;AbstractScrollAreaMixin&quot;,&quot;FrameMixin&quot;, &quot;WidgetMixin&quot; and &quot;ObjectMixin&quot;.To illustrate this, we will use some of our included models:!!! Example &quot;Class hierarchy example&quot;    === &quot;Subclass tree&quot;        ```py        from prettyqt import itemmodels, widgets        app = widgets.app()        widget = widgets.TreeView()        model = itemmodels.SubClassTreeModel(core.AbstractItemModelMixin)        widget.set_model(model)        widget.show()        ```        &lt;figure markdown&gt;          ![Image title](images/abstractitemmodelmixin_subclasses.png)          &lt;figcaption&gt;AbstractitemModelMixin subclasses&lt;/figcaption&gt;        &lt;/figure&gt;    === &quot;Parentclass tree&quot;        ```py        from prettyqt import itemmodels, widgets        app = widgets.app()        widget = widgets.TreeView()        model = itemmodels.ParentClassTreeModel(widgets.TreeWidget)        widget.set_model(model)        widget.show()        ```        &lt;figure markdown&gt;          ![Image title](images/treewidget_parentclasses.png)          &lt;figcaption&gt;TreeWidget parent classes&lt;/figcaption&gt;        &lt;/figure&gt;    === &quot;MRO tree&quot;        ```py        from prettyqt import itemmodels, widgets        app = widgets.app()        widget = widgets.TreeView()        model = itemmodels.ParentClassTreeModel(widgets.TreeWidget, mro=True)        widget.set_model(model)        widget.show()        ```        &lt;figure markdown&gt;          ![Image title](images/treewidget_mro.png)          &lt;figcaption&gt;TreeWidget MRO&lt;/figcaption&gt;        &lt;/figure&gt;Main objective is to make Qt feel &quot;pythonic&quot;. Qt is originally a C++ Framework,and using it can be quite cumbersome for Python developers. (very restrictive when it comes to types,very OOP-centric, lot of enum use, snakeCase naming etc.) PrettyQt aims to improve this by:- adding more powerful methods to the classes, which accept more types and have more options (in form of keyword arguments)- doing [type conversions](types.md) for method parameters to lessen the strictness for types.- raising Exceptions or returning `None` instead of returning `-1` or invalid objects.- all enum getters/setters also work with strings. Everything typed with Literals for an excellent IDE experience. (Example: )- adding a lot of \__dunder__ methods to the classes to make them behave like good python citizens.The minimum supported python version is 3.10.The minimum supported Qt version is 6.5The aim is to support the last two released Python versions as well as keeping support for the last Qt LTS release.## Covered Qt modules| Qt Module           | PrettyQt module            ||---------------------|----------------------------|| QtBluetooth         | [prettyqt.bluetooth](bluetooth.md)         || QtCharts            | [prettyqt.charts](charts.md)            || QtCore              | [prettyqt.core](core.md)              || QtDesigner          | [prettyqt.designer](designer.md)          || QtGui               | [prettyqt.gui](gui.md)               || QtLocation          | [prettyqt.location](location.md)          || QtMultimedia        | [prettyqt.multimedia](multimedia.md)        || QtMultimediaWidgets | [prettyqt.multimediawidgets](multimediawidgets.md) || QtNetwork           | [prettyqt.network](network.md)           || QtOpenGLWidgets     | [prettyqt.openglwidgets](openglwidgets.md)     || QtPdf               | [prettyqt.pdf](pdf.md)               || QtPdfWidgets        | [prettyqt.pdfwidgets](pdfwidgets.md)        || QtPositioning       | [prettyqt.positioning](positioning.md)       || QtPrintSupport      | [prettyqt.printsupport](printsupport.md)      || QtQml               | [prettyqt.qml](qml.md)               || QtHelp              | [prettyqt.qthelp](qthelp.md)            || QtQuick             | [prettyqt.quick](quick.md)             || QtQuickWidgets      | [prettyqt.quickwidgets](quickwidgets.md)      || QScintilla          | [prettyqt.scintilla](scintilla.md)         || QtScXml             | [prettyqt.scxml](scxml.md)             || QtSpatialAudio      | [prettyqt.spatialaudio](spatialaudio.md)      || QtStateMachine      | [prettyqt.statemachine](statemachine.md)      || QtSvg               | [prettyqt.svg](svg.md)               || QtSvgWidgets        | [prettyqt.svgwidgets](svgwidgets.md)        || QtTest              | [prettyqt.test](test.md)              || QtTextToSpeech      | [prettyqt.texttospeech](texttospeech.md)      || QtWebChannel        | [prettyqt.webchannel](webchannel.md)        || QtWebEngineCore     | [prettyqt.webenginecore](webenginecore.md)     || QtWebEngineWidgets  | [prettyqt.webenginewidgets](webenginewidgets.md)  || QtWidgets           | [prettyqt.widgets](api/widgets.md)           |[Read more](general.md) about the general API design.Apart from the mentioned mixin tree and the corresponding classes, this library alsocontains a lot of custom widgets, delegates, eventfilters, validators,syntaxhighlighters, layouts, models, proxy models and much more.Converting to PrettyQt should be very straightforward since the original behaviour of theQt classes didnt change for the largest parts and all methods from base Qt modulesare still available. (There might be a few constructors with slightly different behaviour though.)Interested? Take a look at the documentation! (even though it totally sucks in its current state.)## Where to get itThe source code is currently hosted on GitHub at:https://github.com/phil65/PrettyQtThe latest released version are available at the [Pythonpackage index](https://pypi.org/project/prettyqt).```sh# or PyPIpip install prettyqt```## Dependencies|Name|Constraints|Extra|Summary|Homepage||--|----|----|----|--||pandas|&lt;3.0.0,&gt;=2.0.2|extra == &quot;addons&quot;|Powerful data structures for data analysis, time series, and statistics|||pywin32||sys_platform == &quot;win32&quot;|Python for Window Extensions|https://github.com/mhammond/pywin32||PyQt6-Charts|&lt;7.0,&gt;=6.5|extra == &quot;pyqt6&quot;|Python bindings for the Qt Charts library|https://www.riverbankcomputing.com/software/pyqtchart/||qtconsole|&lt;6,&gt;=5|extra == &quot;addons&quot;|Jupyter Qt console|http://jupyter.org||typing_extensions|||Backported and Experimental Type Hints for Python 3.7+|||fsspec|&lt;2024.0.0,&gt;=2023.1.0|extra == &quot;addons&quot;|File-system specification|http://github.com/fsspec/filesystem_spec||comtypes|&lt;2.0,&gt;=1.1|sys_platform == &quot;win32&quot;|Pure Python COM package|https://github.com/enthought/comtypes||lxml||extra == &quot;addons&quot;|Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API.|https://lxml.de/||bidict|&lt;1,&gt;=0||The bidirectional mapping library for Python.|||Pillow|||Python Imaging Library (Fork)|https://python-pillow.org||orjson|&lt;4,&gt;=3|python_version &lt; &quot;3.12&quot; and extra == &quot;addons&quot;|Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy|https://github.com/ijl/orjson||attrs||extra == &quot;addons&quot;|Classes Without Boilerplate|||PyQt6-QScintilla|&lt;3.0,&gt;=2.0|extra == &quot;pyqt6&quot;|Python bindings for the QScintilla programmers editor widget|https://www.riverbankcomputing.com/software/qscintilla/||qstylizer|&lt;0.3,&gt;=0.2||Stylesheet Generator for PyQt{4-5}/PySide{1-2}|https://github.com/blambright/qstylizer||PyQt6|&lt;7.0,&gt;=6.5|extra == &quot;pyqt6&quot;|Python bindings for the Qt cross platform application toolkit|https://www.riverbankcomputing.com/software/pyqt/||ipython|&lt;9,&gt;=8|extra == &quot;addons&quot;|IPython: Productive Interactive Computing|https://ipython.org||PyQt6-WebEngine|&lt;7.0,&gt;=6.5|extra == &quot;pyqt6&quot;|Python bindings for the Qt WebEngine framework|https://www.riverbankcomputing.com/software/pyqtwebengine/||numpy|&lt;2,&gt;=1|extra == &quot;addons&quot;|Fundamental package for array computing in Python|https://www.numpy.org||Pygments|||Pygments is a syntax highlighting package written in Python.|||PySide6|||Python bindings for the Qt cross-platform application and UI framework|https://www.pyside.org|## Installation from sourcesThis project uses poetry for dependency management and packaging. Install this first.In the `prettyqt` directory (same one where you found this file aftercloning the git repo), execute:```shpoetry install```## License[MIT](LICENSE)## Contributing to prettyqt [![Open Source Helpers](https://www.codetriage.com/phil65/prettyqt/badges/users.svg)](https://www.codetriage.com/phil65/prettyqt)All contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome!</longdescription>
</pkgmetadata>