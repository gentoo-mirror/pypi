<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img alt=&quot;logo&quot; src=&quot;https://www.zypp.io/static/assets/img/logos/zypp/white/500px.png&quot;  width=&quot;200&quot;/&gt;&lt;/p&gt;[![Downloads](https://pepy.tech/badge/keyvault)](https://pepy.tech/project/keyvault)![PyPI](https://img.shields.io/pypi/v/keyvault)[![Open Source](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://opensource.org/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Azure key vaults===&gt; Repository for explaining how to use Azure key vaults in our projects.![Flowdiagram](docs/project_layout.png)## Index- [Usage](#usage)    - [Pip install package](#pip-install-this-public-package)    - [Secrets to environment](#secrets-to-environment)    - [Get dotenv secrets](#get-dotenv-secrets)    - [Get keyvault secrets](#get-keyvault-secrets)    - [Dotenv to keyvault](#dotenv-to-keyvault)    - [Dict to keyvault](#dict-to-keyvault)    - [Delete keyvault secrets](#delete-keyvault-secrets)- [mandatory .env variables](#mandatory-env-variables)# UsageThis package is designed for easily pulling and creating secrets in Azure key vaults.## pip install this public package```.shpip install git+ssh://git@github.com/zypp-io/keyvault.git```## Secrets to environmentThis function sets the keyvault secrets to the runtime environment variables.This function will only work if you have set the [required environment variables](#mandatory-env-variables)```pythonfrom keyvault import secrets_to_environmentsecrets_to_environment(keyvault_name=&quot;mykeyvault&quot;)```## Get dotenv secretsFunction for reading the local .env file and capturing the secret_name, secret_value as key value pairs.```pythonfrom keyvault import get_dotenv_secretsget_dotenv_secrets(dotenv_file=&quot;.env&quot;)```## Get keyvault secretsThis function can be used to pull secrets from the vault. This function will only work if you haveset the [required environment variables](#mandatory-env-variables)```pythonfrom keyvault import get_keyvault_secretssecrets = get_keyvault_secrets(keyvault_name=&quot;mykeyvault&quot;)# Returns a dictionary containing secret_name, secret_value pairs```## dotenv to keyvaultThis function is designed for making it easy to upload sensitive project secrets to Azure key vault.The function reads the `.env` file and uploads the names and values to Azure key vault.```pythonfrom keyvault import dotenv_to_keyvaultdotenv_to_keyvault(keyvault_name=&quot;mykeyvault&quot;, dotenv_file=&quot;.env&quot;)# Uploads your current .env variables to azure key vault```## Dict to keyvaultThe function lets you upload a dictionary, where the key-value pairs are the secretname-secretvalues in Azure key vault.```pythonfrom keyvault import dict_to_keyvaultdict_to_keyvault(keyvault_name=&quot;mykeyvault&quot;, secret_dict={'SECRET_NAME': 'secret value'})```## Delete keyvault secretsThe function lets you delete secrets in the keyvault. Secrets will be deleted with soft_delete enabled.```pythonfrom keyvault import delete_keyvault_secretsdelete_keyvault_secrets(keyvault_name=&quot;mykeyvault&quot;, secret_list=[&quot;SECRET_NAME&quot;])```# mandatory environment variablesThere are 3 environment variables that are necessary for authenticating with the azure key vault.These variables always need to be present in the project in order for the secrets to be retrieved.```.envAZURE_CLIENT_ID=REPLACE-MEAZURE_CLIENT_SECRET=REPLACE-MEAZURE_TENANT_ID=REPLACE-ME```</longdescription>
</pkgmetadata>