<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Firestore=========:Details: Firestore is an offline available ORM/ODM atop Google Firestore.:Repository: https://github.com/workenvoy/firestore:Author: Workenvoy Inc (http://github.com/workenvoy):Maintainer: Raymond Ortserga (http://github.com/rayattack).. image:: https://travis-ci.org/workenvoy/firestore.svg?branch=master  :target: https://travis-ci.org/workenvoy/firestore.. image:: https://coveralls.io/repos/github/workenvoy/firestore/badge.svg?branch=master  :target: https://coveralls.io/github/workenvoy/firestore?branch=masterDetails=======Firestore is a Python Object-Document/Object-Collections Mapper for working with Google Firestore.The Flexible, Extremely Scalable, realtime database by Google.You can find some documentation at https://firestore.readthedocs.io - and thereis also a `quickstart tutorial &lt;https://firestore.readthedocs.io/quickstart.html&gt;`_.Offline Support===============Firestore currently uses an in-memory data storeto simulate access to Google Firestorewhen working offline. There is an optimistic persistenceto disk and the contents can beseen in the /projectdir/localfire directory.Deleting this directly means you lose all thedata you might have saved prior to removing the directory from disk.Make sure to make a copy of this directory if you want to keep acopy of your data and you areencouraged to contribute i.e. open an issue, submit a pull request ifyou want to offer a helping hand.Installation============We recommend the use of virtual environments e.g. `virtualenv &lt;https://virtualenv.pypa.io/&gt;`_ to controlyour package management. Installation of Firestore iseasily done ``pip install -U firestore`` and requires`pip &lt;https://pip.pypa.io/&gt;`_. to be installed.Otherwise, you can download the source code from `GitHub &lt;http://github.com/workenvoy/firestore&gt;`_ andrun ``python setup.py install``.Dependencies============We tried to keep the dependencies to a minimum, and all dependencies are available using `pip &lt;https://pip.pypa.io/&gt;`_.The only dependencies you require to use Firestore are highlighted below:- google-cloud-firestoreIf you are working with dates extensive we suggest you use a date parser:- dateutil&gt;=2.1.0Examples========Sample Firestore Code Snippet:.. code :: python    from firestore import Collection, Document, Reference as Ref    from firestore import Array    from firestore import Integer    from firestore import String    from firestore.lazy import Datatype    class SomeRootCollection(Collection):        &quot;&quot;&quot;        Root collections inherit directly from collection, whilst        sub collections will inherit from a document.        To understand this always remember in Firestore a collection can never be        a child of another collection, and a sub-collection will always live        under a document.        To have mongo style sub-collections use the Map datatype        &quot;&quot;&quot;        pass    class User(SomeRootCollection):        &quot;&quot;&quot;        This is the User document and will be saved under the        collection `SomeRootCollection`.        Documents live under collections or sub-collections directly        &quot;&quot;&quot;        __private__ = [&quot;password&quot;]        first_name = String(required=True)        middle_name = Datatype(datatype=&quot;String&quot;)  # You can use Datatype in place of more specific types        last_name = Datatype(&quot;StrInG&quot;)  # Case insensitive        age = Integer(minimum=0)        photos = Reference('Photo')        password = String(minimum=6)  # private fields can not be viewed with get_XXX methods    class Photo(User):        &quot;&quot;&quot;        This creates a photos subcollection under the User document for documents        under the root collection        &quot;&quot;&quot;        id = String(required=True, id=True)  # omit to have id auto-generated by cloud firestore        photo_urls = Array()    # Create a text-based post    &gt;&gt;&gt; user = User()    &gt;&gt;&gt; user.first_name = &quot;Alan&quot;    &gt;&gt;&gt; user.last_name = &quot;Turing&quot;    &gt;&gt;&gt; user.photos.append(&quot;https://cloudinary.com/img.jpg&quot;)    &gt;&gt;&gt;    &gt;&gt;&gt; # this will persist user and photo at    &gt;&gt;&gt; # once unlike user.save that will save only user    &gt;&gt;&gt; user.persist()    # Sometimes you want one thing to succeed before doing another    &gt;&gt;&gt; user.photos.safe_save()  # only saves if parent was prior saved else fails    &gt;&gt;&gt; user.photos.save()  # saves regardless    # You can also save a photo by itself and query easily    &gt;&gt;&gt; photo = Photo()    &gt;&gt;&gt; photo.parent = user    &gt;&gt;&gt; photo.save()  # save only photo    &gt;&gt;&gt; photo.parent.save()Contributing============We love contributors: `Contribution guidelines &lt;https://github.com/workenvoy/firestore/GUIDELINES.rst&gt;`_</longdescription>
</pkgmetadata>