<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flaskerk[![Build Status](https://travis-ci.com/kemingy/flaskerk.svg?branch=master)](https://travis-ci.com/kemingy/flaskerk)![GitHub](https://img.shields.io/github/license/kemingy/flaskerk)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flaskerk)Provide OpenAPI document and validation for flask service.Mainly built for Machine Learning Model services.If you're using Falcon, check my another library [Falibrary](https://github.com/kemingy/falibrary).## Features* Generate API document with [Redoc UI](https://github.com/Redocly/redoc) or [Swagger UI](https://github.com/swagger-api/swagger-ui) :yum:* Less boilerplate code, annotations are really easy-to-use :sparkles:* Validate query, JSON data, response data with [pydantic](https://github.com/samuelcolvin/pydantic/) :wink:* Better HTTP exceptions for API services (default &amp; customized) (JSON instead of HTML) :grimacing:## Quick Startinstall with `pip install flaskerk` (Python 3.6+)### Simple demo```pyfrom flask import Flask, request, jsonifyfrom flaskerk import Flaskerkfrom pydantic import BaseModelclass Query(BaseModel):    text: strapp = Flask(__name__)api = Flaskerk()@app.route('/api/classify')@api.validate(query=Query)def classify():    print(request.query)    return jsonify(label=0)if __name__ == &quot;__main__&quot;:    api.register(app)    app.run()```Changes you need to make:* create model with [pydantic](https://github.com/samuelcolvin/pydantic/)* decorate the route function with `Flaskerk.validate()`* specify which part you need in `validate`  * `query` (args in url)    * [builtin converters](https://werkzeug.palletsprojects.com/en/0.15.x/routing/#builtin-converters) (string, path, any, int, float, uuid)  * `data` (JSON data from request)  * `resp` (response) this will be transformed to JSON data after validation  * `x` (HTTP Exceptions list)  * `tags` (tags for this API route)* register to Flask applicationAfter that, this library will help you validate the incoming request and provide API document in `/docs`.| Parameters in `Flaskerk.validate` | Corresponding parameters in `Flask` || ------------- | ------------- || `query` | `request.query` || `data` | `request.json_data` || `resp` | \ || `x` | \ |For more details, check the [document](https://kemingy.github.io/flaskerk).### More feature```pyfrom flask import Flask, requestfrom pydantic import BaseModel, Schemafrom random import randomfrom flaskerk import Flaskerk, HTTPExceptionapp = Flask(__name__)api = Flaskerk(    title='Demo Service',    version='1.0',    ui='swagger',)class Query(BaseModel):    text: strclass Response(BaseModel):    label: int    score: float = Schema(        ...,        gt=0,        lt=1,    )class Data(BaseModel):    uid: str    limit: int    vip: boole233 = HTTPException(code=233, msg='lucky for you')@app.route('/api/predict/&lt;string(length=2):source&gt;/&lt;string(length=2):target&gt;', methods=['POST'])@api.validate(query=Query, data=Data, resp=Response, x=[e233], tags=['model'])def predict(source, target):    &quot;&quot;&quot;    predict demo    demo for `query`, `data`, `resp`, `x`    &quot;&quot;&quot;    print(f'=&gt; from {source} to {target}')  # path    print(f'Data: {request.json_data}')  # Data    print(f'Query: {request.query}')  # Query    if random() &lt; 0.5:        e233.abort('bad luck')    return Response(label=int(10 * random()), score=random())if __name__ == '__main__':    api.register(app)    app.run()```try it with `http POST ':5000/api/predict/zh/en?text=hello' uid=0b01001001 limit=5 vip=true`Open the docs in http://127.0.0.1:5000/docs .For more examples, check [examples](/examples).## FAQ&gt; Can I just do the validation without generating API document?Sure. If you don't register it to Flask application, there won't be document routes.</longdescription>
</pkgmetadata>