<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Single-source: There is only one truth&gt; `single-source` helps to reduce the entropy in your Python project by keeping&gt; single source of truth.The targets of this library are modern Python projects which want to haveone source of truth for version, name and etc.At the moment, the library provides the single point for a package version.It supports Python 3.6+.## Quick start```python# root_package/__init__.pyfrom pathlib import Pathfrom single_source import get_version__version__ = get_version(__name__, Path(__file__).parent.parent)```## Root of the problemYou use modern `pyproject.toml` and want to keep the version of your packagehere:```toml# pyproject.toml[tool.poetry]name = &quot;modern-project&quot;version = &quot;0.1.0&quot;```Let's imagine the version of your package is required in some place of the code.Since you need the version in your Python code, you may want to duplicate the version by putting it as a string variable to some python file:```python# modern_project/__init__.py__version__ = &quot;0.1.0&quot;# modern_project/version.pyversion = &quot;0.1.0&quot;```Then you realize you don't want to have the version in a python file and in pyproject.toml at the same time. It's harder to keep them consistent and easier to forget to bump both versions before release.Also, you don't want to build the wheel by creating some script for auto incrementing the version in both places (and use it in your CI flow, for example). Instead you want use `poetry version` commands.## InstallationYou can install `single-source` via [pip](https://pip.pypa.io/en/stable/)```bashpip3 install single-source```or via [poetry](https://python-poetry.org/docs/#installation)```bashpoetry add single-source```The library also available as[a conda package](https://docs.conda.io/projects/conda/en/latest/) in[conda-forge](https://anaconda.org/conda-forge/repo) channel```bashconda install single-source --channel conda-forge```## Advanced usage### Changing default valueIf it's not possible to get the version from package metadata orthere is no pyproject.toml `get_version` returns `&quot;&quot;` - empty string by default.You can change this value by providing a value as a `default_return` keyword argument.```pythonfrom pathlib import Pathfrom single_source import get_versionpath_to_pyproject_dir = Path(__file__).parent.parent__version__ = get_version(__name__, path_to_pyproject_dir, default_return=None)```### Raising an exceptionYou may want to raise an exception in case the version of the packagehas not been found.```pythonfrom pathlib import Pathfrom single_source import get_version, VersionNotFoundErrorpath_to_pyproject_dir = Path(__file__).parent.parenttry:    __version__ = get_version(__name__, path_to_pyproject_dir, fail=True)except VersionNotFoundError:    pass```### Not only pyproject.tomlYou can use `single-source` even if you still store the version of your libraryin `setup.py` or in any other `utf-8` encoded text file.&gt;First, try without custom `regex`, probably it can parse the versionIf the default internal `regex` does not find the version in your file,the only thing you need to provide is a custom `regex` to `get_version`:```pythonfrom single_source import get_versioncustom_regex = r&quot;\s*version\s*=\s*[\&quot;']\s*([-.\w]{3,})\s*[\&quot;']\s*&quot;path_to_file = &quot;~/my-project/some_file_with_version.txt&quot;__version__ = get_version(__name__, path_to_file, version_regex=custom_regex)```Version must be in the first group `()` in the custom regex.## ContributingPull requests are welcome. For major changes, please open an issue first todiscuss what you would like to change.Please make sure to update tests as appropriate.## License[MIT](https://choosealicense.com/licenses/mit/)</longdescription>
</pkgmetadata>