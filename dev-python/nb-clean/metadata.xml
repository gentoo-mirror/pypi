<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;images/nb-clean.png&quot; width=300&gt;&lt;/p&gt;[![Licence](https://img.shields.io/github/license/srstevenson/nb-clean?label=Licence&amp;color=blue)](https://github.com/srstevenson/nb-clean/blob/main/LICENCE)[![GitHub release](https://img.shields.io/github/v/release/srstevenson/nb-clean?label=GitHub)](https://github.com/srstevenson/nb-clean)[![PyPI version](https://img.shields.io/pypi/v/nb-clean?label=PyPI)](https://pypi.org/project/nb-clean/)[![Python versions](https://img.shields.io/pypi/pyversions/nb-clean?label=Python)](https://pypi.org/project/nb-clean/)[![CI status](https://github.com/srstevenson/nb-clean/workflows/CI/badge.svg)](https://github.com/srstevenson/nb-clean/actions)[![Coverage](https://img.shields.io/codecov/c/gh/srstevenson/nb-clean?label=Coverage)](https://app.codecov.io/gh/srstevenson/nb-clean)`nb-clean` cleans Jupyter notebooks of cell execution counts, metadata, outputs,and (optionally) empty cells, preparing them for committing to version control.It provides both a Git filter and pre-commit hook to automatically cleannotebooks before they're staged, and can also be used with other version controlsystems, as a command line tool, and as a Python library. It can determine if anotebook is clean or not, which can be used as a check in your continuousintegration pipelines.:warning: _`nb-clean` 2.0.0 introduced a new command line interface to makecleaning notebooks in place easier. If you upgrade from a previous release,you'll need to migrate to the new interface as described under[Migrating to `nb-clean` 2](#migrating-to-nb-clean-2)._## InstallationTo install the latest release from [PyPI], use [pip]:```bashpython3 -m pip install nb-clean````nb-clean` can also be installed with [Conda]:```bashconda install -c conda-forge nb-clean```In Python projects using [Poetry] or [Pipenv] for dependency management, add`nb-clean` as a development dependency with `poetry add --dev nb-clean` or`pipenv install --dev nb-clean`. `nb-clean` requires Python 3.7 or later.## Usage### CheckingYou can check if a notebook is clean with:```bashnb-clean check notebook.ipynb```or by passing the notebook contents on standard input:```bashnb-clean check &lt; notebook.ipynb```To also check for empty cells, add the `-e`/`--remove-empty-cells` flag. Toignore cell metadata, add the `-m`/`--preserve-cell-metadata` flag, optionallywith a selection of metadata fields to ignore. To ignore cell outputs, add the`-o`/`--preserve-cell-outputs` flag.`nb-clean` will exit with status code 0 if the notebook is clean, and statuscode 1 if it is not. `nb-clean` will also print details of cell executioncounts, metadata, outputs, and empty cells it finds.### Cleaning (interactive)You can clean a Jupyter notebook with:```bashnb-clean clean notebook.ipynb```This cleans the notebook in place. You can also pass the notebook content onstandard input, in which case the cleaned notebook is written to standardoutput:```bashnb-clean clean &lt; original.ipynb &gt; cleaned.ipynb```To also remove empty cells, add the `-e`/`--remove-empty-cells` flag. Topreserve cell metadata, add the `-m`/`--preserve-cell-metadata` flag, optionallywith a selection of metadata fields to preserve. To preserve cell outputs, addthe `-o`/`--preserve-cell-outputs` flag.### Cleaning (Git filter)To add a filter to an existing Git repository to automatically clean notebookswhen they're staged, run the following from the working tree:```bashnb-clean add-filter```This will configure a filter to remove cell execution counts, metadata, andoutputs. To also remove empty cells, use:```bashnb-clean add-filter --remove-empty-cells```To preserve cell metadata, such as that required by tools such as [papermill],use:```bashnb-clean add-filter --preserve-cell-metadata```To preserve only specific cell metadata, e.g., `tags` and `special`, use:```bashnb-clean add-filter --preserve-cell-metadata tags special```To preserve cell outputs, use:```bashnb-clean add-filter --preserve-cell-outputs````nb-clean` will configure a filter in the Git repository in which it is run, andwon't mutate your global or system Git configuration. To remove the filter, run:```bashnb-clean remove-filter```### Cleaning (pre-commit hook)`nb-clean` can also be used as a [pre-commit] hook. You may prefer this to theGit filter if your project already uses the pre-commit framework.Note that the Git filter and pre-commit hook work differently, with differenteffects on your working directory. The pre-commit hook operates on the notebookon disk, cleaning the copy in your working directory. The Git filter cleansnotebooks as they are added to the index, leaving the copy in your workingdirectory dirty. This means cell outputs are still visible to you in your localJupyter instance when using the Git filter, but not when using the pre-commithook.After installing [pre-commit], add the `nb-clean` hook by adding the followingsnippet to `.pre-commit-config.yaml` in the root of your repository:```yamlrepos:  - repo: https://github.com/srstevenson/nb-clean    rev: &quot;2.4.0&quot;    hooks:      - id: nb-clean```You can pass additional arguments to `nb-clean` with an `args` array. Thefollowing example shows how to preserve only two specific metadata fields. Notethat, in the example, the final item `--` in the arg list is mandatory. Theoption `--preserve-cell-metadata` may take an arbitrary number of fieldarguments, and the `--` argument is needed to separate them from notebookfilenames, which `pre-commit` will append to the list of arguments.```yamlrepos:  - repo: https://github.com/srstevenson/nb-clean    rev: &quot;2.4.0&quot;    hooks:      - id: nb-clean        args:          - --remove-empty-cells          - --preserve-cell-metadata          - tags          - slideshow          - --```Run `pre-commit install` to ensure the hook is installed, and`pre-commit autoupdate` to update the hook to the latest release of `nb-clean`.### Preserving all nbformat metadataTo ignore or preserve specifically the metadata defined in the[`nbformat` documentation](https://nbformat.readthedocs.io/en/latest/format_description.html#cell-metadata),use the following options:`--preserve-cell-metadata collapsed scrolled deletable editable format name tags jupyter execution`.### Migrating to `nb-clean` 2The following table maps from the command line interface of `nb-clean` 1.6.0 tothat of `nb-clean` 2.4.0.| Description                                                  | `nb-clean` 1.6.0                                                    | `nb-clean` 2.4.0                                                         || ------------------------------------------------------------ | ------------------------------------------------------------------- | ------------------------------------------------------------------------ || Clean notebook                                               | `nb-clean clean -i/--input notebook.ipynb \| sponge notebook.ipynb` | `nb-clean clean notebook.ipynb`                                          || Clean notebook (remove empty cells)                          | `nb-clean clean -i/--input notebook.ipynb -e/--remove-empty`        | `nb-clean clean notebook.ipynb -e/--remove-empty-cells`                  || Clean notebook (preserve cell metadata)                      | `nb-clean clean -i/--input notebook.ipynb -m/--preserve-metadata`   | `nb-clean clean notebook.ipynb -m/--preserve-cell-metadata`              || Clean notebook (preserve `tags` and `special` cell metadata) |                                                                     | `nb-clean clean notebook.ipynb -m/--preserve-cell-metadata tags special` || Clean notebook (preserve cell outputs)                       |                                                                     | `nb-clean clean notebook.ipynb -o/--preserve-cell-outputs`               || Check notebook                                               | `nb-clean check -i/--input notebook.ipynb`                          | `nb-clean check notebook.ipynb`                                          || Check notebook (ignore non-empty cells)                      | `nb-clean check -i/--input notebook.ipynb -e/--remove-empty`        | `nb-clean check notebook.ipynb -e/--remove-empty-cells`                  || Check notebook (ignore cell metadata)                        | `nb-clean check -i/--input notebook.ipynb -m/--preserve-metadata`   | `nb-clean check notebook.ipynb -m/--preserve-cell-metadata`              || Check notebook (ignore `tags` and `special` cell metadata)   |                                                                     | `nb-clean check notebook.ipynb -m/--preserve-cell-metadata tags special` || Check notebook (ignore cell outputs)                         |                                                                     | `nb-clean check notebook.ipynb -o/--preserve-cell-outputs`               || Add Git filter to clean notebooks                            | `nb-clean configure-git`                                            | `nb-clean add-filter`                                                    || Remove Git filter                                            | `nb-clean unconfigure-git`                                          | `nb-clean remove-filter`                                                 |## CopyrightCopyright Â© 2017-2022 [Scott Stevenson].`nb-clean` is distributed under the terms of the [ISC licence].[conda]: https://docs.conda.io/[isc licence]: https://opensource.org/licenses/ISC[papermill]: https://papermill.readthedocs.io/[pip]: https://pip.pypa.io/[pipenv]: https://pipenv.readthedocs.io/[poetry]: https://python-poetry.org/[pre-commit]: https://pre-commit.com/[pypi]: https://pypi.org/project/nb-clean/[scott stevenson]: https://scott.stevenson.io</longdescription>
</pkgmetadata>