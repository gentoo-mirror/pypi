<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Vehicle Routing Open-source Optimization Machine=======================================================|gh_action| |codecov| |pypi|.. |gh_action| image:: https://img.shields.io/github/checks-status/VROOM-Project/pyvroom/main    :target: https://github.com/VROOM-Project/pyvroom/actions.. |codecov| image:: https://img.shields.io/codecov/c/github/VROOM-Project/pyvroom    :target: https://codecov.io/gh/VROOM-Project/pyvroom.. |pypi| image:: https://img.shields.io/pypi/v/pyvroom    :target: https://pypi.org/project/pyvroom*Good solution, fast... in Python.*Pyvroom is an Python wrapper to the excellent `VROOM&lt;https://github.com/VROOM-Project/vroom&gt;`_ optimization engine for solving`vehicle routing problems&lt;https://en.wikipedia.org/wiki/Vehicle_routing_problem&gt;`_.The library aims to solve several well-known types of vehicle routing problems,including:* Travelling salesman.* Capacitated vehicle routing.* Routing with time windows.* Multi-depot heterogeneous vehicle.* Pickup-and-delivery.VROOM can also solve any mix of the above problem types.Installation------------Pyvroom currently makes binaries for on MacOS and Linux (Windows is WIP).Installation should be as simple as:.. code:: bash  pip install pyvroomBuilding from source--------------------Building the source distributions on another OS requires:* the ``./build-requirements.txt`` Python dependencies* ``asio`` headers installed* ``openssl`` &amp; ``crypto`` libraries &amp; headers installedOptionally the C++ dependencies can be installed with `conan&lt;https://github.com/conan-io/conan&gt;`_:.. code:: bash  conan install --build=openssl --install-folder conan_build .Basic usage-----------.. code:: python  &gt;&gt;&gt; import vroom  &gt;&gt;&gt; problem_instance = vroom.Input()  &gt;&gt;&gt; problem_instance.set_durations_matrix(  ...     profile=&quot;car&quot;,  ...     matrix_input=[[0, 2104, 197, 1299],  ...                   [2103, 0, 2255, 3152],  ...                   [197, 2256, 0, 1102],  ...                   [1299, 3153, 1102, 0]],  ... )  &gt;&gt;&gt; problem_instance.add_vehicle([vroom.Vehicle(47, start=0, end=0),  ...                               vroom.Vehicle(48, start=2, end=2)])  &gt;&gt;&gt; problem_instance.add_job([vroom.Job(1414, location=0),  ...                           vroom.Job(1515, location=1),  ...                           vroom.Job(1616, location=2),  ...                           vroom.Job(1717, location=3)])  &gt;&gt;&gt; solution = problem_instance.solve(exploration_level=5, nb_threads=4)  &gt;&gt;&gt; solution.summary.cost  6411  &gt;&gt;&gt; solution.routes.columns  Index(['vehicle_id', 'type', 'arrival', 'duration', 'setup', 'service',         'waiting_time', 'location_index', 'id', 'description'],        dtype='object')  &gt;&gt;&gt; solution.routes[[&quot;vehicle_id&quot;, &quot;type&quot;, &quot;arrival&quot;, &quot;location_index&quot;, &quot;id&quot;]]     vehicle_id   type  arrival  location_index    id  0          47  start        0               0  &lt;NA&gt;  1          47    job     2104               1  1515  2          47    job     4207               0  1414  3          47    end     4207               0  &lt;NA&gt;  4          48  start        0               2  &lt;NA&gt;  5          48    job     1102               3  1717  6          48    job     2204               2  1616  7          48    end     2204               2  &lt;NA&gt;</longdescription>
</pkgmetadata>