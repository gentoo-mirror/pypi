<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://codebeat.co/badges/a52cfe15-b824-435b-a594-4bf2be2fb06f    :target: https://codebeat.co/projects/github-com-python-rt-python-rt-master    :alt: codebeat badge.. image:: https://github.com/python-rt/python-rt/actions/workflows/test_lint.yml/badge.svg    :target: https://github.com/python-rt/python-rt/actions/workflows/test_lint.yml    :alt: tests.. image:: https://readthedocs.org/projects/python-rt/badge/?version=stable    :target: https://python-rt.readthedocs.io/en/stable/?badge=stable    :alt: Documentation Status.. image:: https://badge.fury.io/py/rt.svg    :target: https://badge.fury.io/py/rt============================================== Rt - Python interface to Request Tracker API ==============================================Python implementation of REST API described here: - https://rt-wiki.bestpractical.com/wiki/REST - https://docs.bestpractical.com/rt/5.0.2/RT/REST2.html.. csv-table:: Python version compatibility:   :header: &quot;Python&quot;, &quot;rt&quot;   :widths: 15, 15   &quot;2.7&quot;, &quot;&lt; 2.0.0&quot;   &quot;&gt;= 3.5, &lt;3.7&quot;, &quot;&gt;= 2.0.0, &lt; 3.0.0&quot;   &quot;&gt;= 3.7&quot;, &quot;&gt;= 3.0.0, &lt; 3.1.0&quot;   &quot;&gt;= 3.8&quot;, &quot;&gt;= 3.0.0&quot;ℹ️ **Note**:    Please note that starting with the major release of v3.0.0, this library requires Python version &gt;= 3.8.    See the *Python version compatibility* table above for more detailed information.⚡ **Note**:    As of version 3.1.0, this library is async compatible.    Usage::      import rt.rest2      import httpx      tracker = rt.rest2.AsyncRt('http://localhost/rt/REST/2.0/', http_auth=httpx.BasicAuth('root', 'password'))⚠️ **Warning**:    Though version 3.x still supports RT REST API version 1, it contains minor breaking changes. Please see the changelog    in the documentation for details.Requirements============This module uses following Python modules: - requests (http://docs.python-requests.org/) - requests-toolbelt (https://pypi.org/project/requests-toolbelt/) - typing-extensions (depending on python version)Documentation=============https://python-rt.readthedocs.io/en/latest/Installation============Install the python-rt package using::  pip install rtLicence=======This module is distributed under the terms of GNU General Public Licence v3and was developed by CZ.NIC Labs - research and development department ofCZ.NIC association - top level domain registry for .CZ.  Copy of the GNUGeneral Public License is distributed along with this module.Usage=====An example is worth a thousand words::    &gt;&gt;&gt; import rt.rest2    &gt;&gt;&gt; import httpx    &gt;&gt;&gt; tracker = rt.rest2.Rt('http://localhost/rt/REST/2.0/', http_auth=httpx.BasicAuth('root', 'password'))    &gt;&gt;&gt; map(lambda x: x['id'], tracker.search(Queue='helpdesk', Status='open'))    ['1', '2', '10', '15']    &gt;&gt;&gt; tracker.create_ticket(queue='helpdesk', \    ... subject='Coffee (important)', content='Help I Ran Out of Coffee!')    19    &gt;&gt;&gt; tracker.edit_ticket(19, Requestor='addicted@example.com')    True    &gt;&gt;&gt; tracker.reply(19, content='Do you know Starbucks?')    TrueGet the last important updates from a specific queue that have been updated recently::    &gt;&gt;&gt; import datetime    &gt;&gt;&gt; import base64    &gt;&gt;&gt; import rt.rest2    &gt;&gt;&gt; import httpx    &gt;&gt;&gt; tracker = rt.rest2.Rt('http://localhost/rt/REST/2.0/', http_auth=httpx.BasicAuth('root', 'password'))    &gt;&gt;&gt; fifteen_minutes_ago = str(datetime.datetime.now() - datetime.timedelta(minutes=15))    &gt;&gt;&gt; tickets = tracker.last_updated(since=fifteen_minutes_ago)    &gt;&gt;&gt; for ticket in tickets:    &gt;&gt;&gt;     id = ticket['id']    &gt;&gt;&gt;     history = tracker.get_ticket_history(id)    &gt;&gt;&gt;     last_update = list(reversed([h for h in history if h['Type'] in ('Correspond', 'Comment')]))    &gt;&gt;&gt;     hid = tracker.get_transaction(last_update[0]['id'] if last_update else history[0]['id'])    &gt;&gt;&gt;    &gt;&gt;&gt;     attachment_id = None    &gt;&gt;&gt;     for k in hid['_hyperlinks']:    &gt;&gt;&gt;         if k['ref'] == 'attachment':    &gt;&gt;&gt;             attachment_id = k['_url'].rsplit('/', 1)[1]    &gt;&gt;&gt;             break    &gt;&gt;&gt;    &gt;&gt;&gt;         if attachment_id is not None:    &gt;&gt;&gt;             attachment = c.get_attachment(attachment_id)    &gt;&gt;&gt;             if attachment['Content'] is not None:    &gt;&gt;&gt;                 content = base64.b64decode(attachment['Content']).decode()    &gt;&gt;&gt;                 print(content)Please use docstrings to see how to use different functions. They are writtenin ReStructuredText. You can also generate HTML documentation by running``make html`` in doc directory (Sphinx required).Official Site=============Project site, issue tracking and git repository:    https://github.com/python-rt/python-rt</longdescription>
</pkgmetadata>