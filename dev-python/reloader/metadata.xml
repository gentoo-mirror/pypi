<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python Module Reloader======================.. image:: https://secure.travis-ci.org/jparise/python-reloader.png?branch=master   :target: http://travis-ci.org/jparise/python-reloaderThis library implements a dependency-based module reloader for Python.  Unlikethe builtin `reload()`_ function, this reloader will reload the requestedmodule *and all other modules that are dependent on that module*.A detailed discussion of the reloader's implementation is available here:    http://www.indelible.org/ink/python-reloading/Usage-----The reloader works by tracking dependencies between imported modules.  It mustfirst be enabled in order to track those dependencies.  The reloader has nodependency information for modules that were imported before it was enabled orafter it is disabled, so you'll probably want to enable the reloader early inyour application's startup process.::    import reloader    reloader.enable()    # Import additional modules    import module1    import module2To manually reload an imported module, pass it to the reloader's ``reload()``method::    import example    reloader.reload(example)Note that you must pass the module object itself and not a string containingthe module's name.  If you only have the module's name, you can fetch themodule object from the global ``sys.modules`` dictionary::    reloader.reload(sys.modules['example'])You can also query a module's dependencies for informational or debuggingpurposes::    reloader.get_dependencies(example)You can disable the reloader's dependency tracking at any time::    reloader.disable()Blacklisting Modules--------------------There may be times when you don't want a module and its dependency hierarchyto be reloaded.  The module might rarely change and be expensive to import.To support these cases, you can explicitly &quot;blacklist&quot; modules from thereloading process using the ``blacklist`` argument to ``enable()``.::    reloader.enable(blacklist=['os', 'ConfigParser'])The blacklist can be any iterable listing the fully-qualified names of modulesthat should be ignored.  Note that blacklisted modules will still appear inthe dependency graph for completeness; they will just not be reloaded.An Interactive Example----------------------This example demonstrates how easily the reloader can be used from theinteractive Python interpretter.  Imagine you have the module ``example.py``open in a text editor, and it contains the following::    print &quot;I am example.py&quot;Our interactive session starts like this::    &gt;&gt;&gt; import reloader    &gt;&gt;&gt; reloader.enable()    &gt;&gt;&gt; import example    I am example.pyNow modify ``example.py`` in your text editor.  You can then reload the``example`` in your interactive session::    &gt;&gt;&gt; reloader.reload(example)    I am the modified example.pyThis is a simplistic example that doesn't fully demonstrate the power of thereloader's dependency-based module tracking, but it hopefully illustrates thebasic usage and utility of the system.The __reload__() Callback-------------------------If a module has a ``__reload__()`` function, it will be called with a copy ofthe original module's dictionary after it has been reloaded.  This provides aconvenient mechanism for preserving state between reloads.Consider a module named ``counts`` that contains the following code::    COUNTER = 0The module's ``COUNTER`` variable will be reset to 0 when the module isreloaded::    &gt;&gt;&gt; import counts    &gt;&gt;&gt; counts.COUNTER += 1    &gt;&gt;&gt; counts.COUNTER    1    &gt;&gt;&gt; reloader.reload(counts)    &gt;&gt;&gt; counts.COUNTER += 1    1We can preserve the value of ``COUNTER`` across reloads by adding a``__reload__()`` function to the ``counts`` module::    def __reload__(state):        global COUNTER        COUNTER = state['COUNTER']Now when we reload ``counts``::    &gt;&gt;&gt; import counts    &gt;&gt;&gt; counts.COUNTER += 1    &gt;&gt;&gt; counts.COUNTER    1    &gt;&gt;&gt; reloader.reload(counts)    &gt;&gt;&gt; counts.COUNTER += 1    &gt;&gt;&gt; counts.COUNTER    2.. _`reload()`: http://docs.python.org/library/functions.html#reload</longdescription>
</pkgmetadata>