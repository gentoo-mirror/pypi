<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>civisml-extensions==================.. image:: https://www.travis-ci.org/civisanalytics/civisml-extensions.svg?branch=master    :target: https://www.travis-ci.org/civisanalytics/civisml-extensionsscikit-learn-compatible estimators from Civis AnalyticsInstallation------------Installation with ``pip`` is recommended::    $ pip install civisml-extensionsFor development, a few additional dependencies are needed::    $ pip install -r dev-requirements.txtContents and Usage------------------This package contains `scikit-learn`_-compatible estimators for stacking (``StackedClassifier``, ``StackedRegressor``), non-negative linear regression (``NonNegativeLinearRegression``), preprocessing pandas_ ``DataFrames`` (``DataFrameETL``), and using Hyperband_ for cross-validating hyperparameters (``HyperbandSearchCV``).Usage of these estimators follows the standard sklearn conventions. Here is anexample of using the ``StackedClassifier``:    .. code-block:: python        &gt;&gt;&gt; from sklearn.linear_model import LogisticRegression        &gt;&gt;&gt; from sklearn.ensemble import RandomForestClassifier        &gt;&gt;&gt; from civismlext.stacking import StackedClassifier        &gt;&gt;&gt;         &gt;&gt;&gt; # Define some Train data and labels        &gt;&gt;&gt; Xtrain, ytrain = &lt;train_features&gt;, &lt;train_labels&gt;        &gt;&gt;&gt;         &gt;&gt;&gt; # Note that the final estimator 'metalr' is the meta-estimator        &gt;&gt;&gt; estlist = [('rf', RandomForestClassifier()),        &gt;&gt;&gt;            ('lr', LogisticRegression()),        &gt;&gt;&gt;            ('metalr', LogisticRegression())]        &gt;&gt;&gt;         &gt;&gt;&gt; mysm = StackedClassifier(estlist)        &gt;&gt;&gt; # Set some parameters, if you didn't set them at instantiation        &gt;&gt;&gt; mysm.set_params(rf__random_state=7, lr__random_state=8,        &gt;&gt;&gt;                 metalr__random_state=9, metalr__C=10**7)        &gt;&gt;&gt;         &gt;&gt;&gt; # Fit        &gt;&gt;&gt; mysm.fit(Xtrain, ytrain)        &gt;&gt;&gt;         &gt;&gt;&gt; # Predict!        &gt;&gt;&gt; ypred = mysm.predict_proba(Xtest)You can learn more about stacking and see an example use of the  ``StackedRegressor`` and ``NonNegativeLinearRegression`` estimators in `a talk presented at PyData NYC`_ in November, 2017.See the doc strings of the various estimators for more information.Contributing------------Please see ``CONTRIBUTING.md`` for information about contributing to this project.License-------BSD-3See ``LICENSE.md`` for details... _scikit-learn: http://scikit-learn.org/.. _pandas: http://pandas.pydata.org/.. _Hyperband: https://arxiv.org/abs/1603.06560.. _a talk presented at PyData NYC: https://www.youtube.com/watch?v=3gpf1lGwecA</longdescription>
</pkgmetadata>