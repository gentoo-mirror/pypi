<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pymince[![CI](https://github.com/rmoralespp/pymince/workflows/CI/badge.svg)](https://github.com/rmoralespp/pymince/actions?query=event%3Arelease+workflow%3ACI)[![pypi](https://img.shields.io/pypi/v/pymince.svg)](https://pypi.python.org/pypi/pymince)[![versions](https://img.shields.io/pypi/pyversions/pymince.svg)](https://github.com/rmoralespp/pymince)[![codecov](https://codecov.io/gh/rmoralespp/pymince/branch/main/graph/badge.svg)](https://app.codecov.io/gh/rmoralespp/pymince)[![license](https://img.shields.io/github/license/rmoralespp/pymince.svg)](https://github.com/rmoralespp/pymince/blob/main/LICENSE)[![Downloads](https://pepy.tech/badge/pymince)](https://pepy.tech/project/pymince)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Linter: ruff](https://img.shields.io/badge/linter-_ruff-orange)](https://github.com/charliermarsh/ruff)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)### Aboutpymince is a collection of useful tools that are &quot;missing&quot; from the Python standard library.### Installation (via pip)```pip install pymince```### Tests```(env)$ pip install -r requirements.txt   # Ignore this command if it has already been executed(env)$ pytest tests/(env)$ pytest --cov pymince # Tests with coverge```### Usage| PyModules  | Tools  || :--------  | :----- || **algorithm.py** |[*fibonacci*](#fibonacci), [*luhn*](#luhn), [*sieve_of_eratosthenes*](#sieve_of_eratosthenes)|| **boolean.py** |[*string2bool*](#string2bool)|| **dates.py** |[*IsoWeekDay*](#IsoWeekDay), [*WeekDay*](#WeekDay), [*irange*](#irange), [*string2year*](#string2year)|| **dictionary.py** |[*DigestGetter*](#DigestGetter), [*all_true_values*](#all_true_values), [*find_leaf_value*](#find_leaf_value), [*from_objects*](#from_objects), [*frozendict*](#frozendict)|| **file.py** |[*decompress*](#decompress), [*ensure_directory*](#ensure_directory), [*get_valid_filename*](#get_valid_filename), [*is_empty_directory*](#is_empty_directory), [*match_from_zip*](#match_from_zip), [*replace_extension*](#replace_extension)|| **functional.py** |[*caller*](#caller), [*classproperty*](#classproperty), [*identity*](#identity), [*once*](#once), [*pipe*](#pipe), [*retry_if_errors*](#retry_if_errors), [*retry_if_none*](#retry_if_none), [*set_attributes*](#set_attributes), [*suppress*](#suppress)|| **iterator.py** |[*all_distinct*](#all_distinct), [*all_equal*](#all_equal), [*all_equals*](#all_equals), [*all_identical*](#all_identical), [*centroid*](#centroid), [*consume*](#consume), [*grouper*](#grouper), [*ibool*](#ibool), [*in_all*](#in_all), [*in_any*](#in_any), [*ipush*](#ipush), [*mul*](#mul), [*only_one*](#only_one), [*pad_end*](#pad_end), [*pad_start*](#pad_start), [*partition*](#partition), [*replacer*](#replacer), [*splitter*](#splitter), [*sub*](#sub), [*truediv*](#truediv), [*uniquer*](#uniquer), [*uniques*](#uniques)|| **json.py** |[*JSONEncoder*](#JSONEncoder), [*dump_from_csv*](#dump_from_csv), [*dump_into*](#dump_into), [*dump_into_zip*](#dump_into_zip), [*idump_into*](#idump_into), [*idump_lines*](#idump_lines), [*load_from*](#load_from), [*load_from_zip*](#load_from_zip)|| **logging.py** |[*StructuredFormatter*](#StructuredFormatter), [*timed_block*](#timed_block)|| **std.py** |[*bind_json_std*](#bind_json_std)|| **text.py** |[*are_anagram*](#are_anagram), [*fullstr*](#fullstr), [*get_random_secret*](#get_random_secret), [*get_random_string*](#get_random_string), [*is_binary*](#is_binary), [*is_email_address*](#is_email_address), [*is_int*](#is_int), [*is_negative_int*](#is_negative_int), [*is_palindrome*](#is_palindrome), [*is_payment_card*](#is_payment_card), [*is_percentage*](#is_percentage), [*is_positive_int*](#is_positive_int), [*is_roman*](#is_roman), [*is_url*](#is_url), [*multireplace*](#multireplace), [*multireplacer*](#multireplacer), [*normalize_newlines*](#normalize_newlines), [*remove_decimal_zeros*](#remove_decimal_zeros), [*remove_number_commas*](#remove_number_commas), [*replace*](#replace)|| **warnings.py** |[*deprecated*](#deprecated)|| **xml.py** |[*iterparse*](#iterparse)|#### algorithm.py##### fibonacci```fibonacci(n=None)Returns a generator with fibonacci series up to n.Runs indefinitely if n is specified as None.:param Optional[int] n: Must be None or number.:rtype: Generator[int]```##### luhn```luhn(value: str) -&gt; boolThe Luhn algorithm or Luhn formula, also known as the &quot;modulus 10&quot; or &quot;mod 10&quot; algorithm,named after its creator, IBM scientist Hans Peter Luhn,is a simple checksum formula used to validate a variety ofidentification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbersBased on: https://en.wikipedia.org/wiki/Luhn_algorithm```##### sieve_of_eratosthenes```sieve_of_eratosthenes(n)Primes less than n.Based on: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes:param int n: n an integer n &gt; 1:rtype: Generator[int]. All prime numbers from 2 through n.Examples:    from pymince.algorithm import sieve_of_eratosthenes as primes    primes(30) # --&gt; 2, 3, 5, 7, 11, 13, 17, 19, 23, 29```#### boolean.py##### string2bool```string2bool(value, ignorecase=False)Function to convert a string representation oftruth to True or False.:param str value: value to convert.:param bool ignorecase: Uppercase/lowercase letters of given &quot;value&quot; are ignored.:raise: &quot;ValueError&quot; if &quot;value&quot; is anything else.:rtype: boolExamples:    from pymince.boolean import string2bool    string2bool(&quot;true&quot;) # --&gt; True    string2bool(&quot;false&quot;) # --&gt; False    string2bool(&quot;TRUE&quot;) # --&gt; ValueError    string2bool(&quot;TRUE&quot;, ignorecase=True) # --&gt; True    string2bool(&quot;FALSE&quot;) # --&gt; ValueError    string2bool(&quot;FALSE&quot;, ignorecase=True) # --&gt; False```#### dates.py##### IsoWeekDay```IsoWeekDay(value, names=None, *, module=None, qualname=None, type=None, start=1)Python Enum containing Days of the Week, according to ISO,where Monday == 1 ... Sunday == 7.Provides a 'of' method can be used to verbalize a datetime.datetime.isoweekdayreturn value.Example:     from pymince.dates import IsoWeekDay    friday = datetime.datetime(2023, 2, 17)    IsoWeekDay.of(friday)  #  pymince.dates.IsoWeekDay.FRIDAY```##### WeekDay```WeekDay(value, names=None, *, module=None, qualname=None, type=None, start=1)Python Enum containing Days of the Week,where Monday == 0 ... Sunday == 6.Provides a 'of' method can be used to verbalize a datetime.datetime.weekdayreturn value.Example:    from pymince.dates import WeekDay    friday = datetime.datetime(2023, 2, 17)    WeekDay.of(friday)  #  pymince.dates.WeekDay.FRIDAY```##### irange```irange(start_date, stop_date=None, time_step=None)Returns a generator that produces a sequence of datetime's from &quot;start_date&quot; (inclusive)to &quot;stop_date&quot; (exclusive) by &quot;time_step&quot;.:param datetime.datetime start_date: Inclusive.:param datetime.datetime stop_date: Exclusive. `utcnow` is used by default.:param datetime.delta time_step: one-day `timedelta` is used by default. Examples:    import datetime    from pymince.dates import irange    ini = datetime.datetime.fromisoformat(&quot;2022-10-31&quot;)    end = datetime.datetime.fromisoformat(&quot;2022-11-02&quot;)    day = datetime.timedelta(days=1)    it = irange(ini, stop_date=end, time_step=day)    next(it) # --&gt; datetime.datetime(2022, 10, 31, 0, 0)    next(it) # --&gt; datetime.datetime(2022, 11, 1, 0, 0)    next(it) # --&gt; raise StopIteration```##### string2year```string2year(value, gte=None, lte=None, shift=None)Function to convert a string year representation to integer year.:param str value: Value to convert.:param Optional[int] gte: if it is specified is required that: year &gt;= gte:param Optional[int] lte: if it is specified is required that: year &lt;= lte:param Optional[int] shift: use a two-digit year on shift:raise: &quot;ValueError&quot; if &quot;value&quot; cannot be converted.:rtype: intExamples:    from pymince.dates import string2year    string2year(&quot;53&quot;, shift=None) # --&gt; 2053    string2year(&quot;53&quot;, shift=1953) # --&gt; 1953    string2year(&quot;52&quot;, shift=1953) # --&gt; 2052    string2year(&quot;54&quot;, shift=1953) # --&gt; 1954    string2year(&quot;1954&quot;) # --&gt; 1954    string2year(&quot;123&quot;) # --&gt; ValueError    string2year(&quot;1955&quot;, gte=1956) # --&gt; ValueError    string2year(&quot;1955&quot;, lte=1954) # --&gt; ValueError```#### dictionary.pyUseful functions that use dictionaries.##### DigestGetter```DigestGetter(include_keys=None, exclude_keys=None)Calculate a digest of a &quot;jsonified&quot; python dictionary.:param include_keys: dictionary keys to exclude:param exclude_keys: dictionary keys to include:rtype: strExamples:    from pymince.dictionary import DigestGetter    getter = DigestGetter(include_keys=(&quot;a&quot;,))    getter({&quot;a&quot;: 1, &quot;b&quot;: 1}) # --&gt; bb6cb5c68df4652941caf652a366f2d8    getter({&quot;a&quot;: 1}) # --&gt; bb6cb5c68df4652941caf652a366f2d8```##### all_true_values```all_true_values(dictionary, keys)Check if a dictionary has all the specified keys and if all itsevaluated key-related values are True.:param dict dictionary::param keys: keys sequence:rtype: boolExamples:from pymince.dictionary import all_true_valuesall_true_values({&quot;a&quot;: 1, &quot;b&quot;: 2}, (&quot;a&quot;, &quot;b&quot;)) # --&gt; Trueall_true_values({&quot;a&quot;: 1, &quot;b&quot;: 0}, (&quot;a&quot;, &quot;b&quot;)) # --&gt; Falseall_true_values({&quot;a&quot;: 1, &quot;b&quot;: 0}, (&quot;a&quot;,)) # --&gt; True```##### find_leaf_value```find_leaf_value(key, dictionary)Find leaf value in mapping.:param Any key: key to find:param dict dictionary:Examples:    from pymince.dictionary import find_leaf_value    find_leaf_value('a', {}) # --&gt; 'a'    find_leaf_value('a', {'a': 'b', 'b': 'c'}) # --&gt; 'c'    find_leaf_value('a', {'a': 'a'}) # --&gt; 'a'```##### from_objects```from_objects(iterable, key_getter, value_getter)Create a new dictionary with elements generated fromthe &quot;key_getter&quot; and &quot;value_getter&quot; callbacks applied to each element of the iterable.:param Iterable[any] iterable::param Callable key_getter:    Dictionary keys getter.    It is called with each element of &quot;iterable&quot; passing it as an argument.:param Callable value_getter:    Dictionary values getter.    It is called with each element of &quot;iterable&quot; passing it as an argument.:raise: ValueError if any generated key is duplicate.:rtype: dictExamples:    from pymince.dictionary import from_objects    keygetter = operator.itemgetter(0)    valgetter = operator.itemgetter(1, 2)    values = iter([(1, &quot;a&quot;, &quot;b&quot;), (2, &quot;a&quot;, &quot;b&quot;)])    from_objects(values, keygetter, valgetter) # --&gt; {1: ('a', 'b'), 2: ('a', 'b')}```##### frozendict```frozendict(*args, **kwargs)Returns a &quot;MappingProxyType&quot; from a dictionary built according to given parameters.Add immutability only on a first level.Examples:    from pymince.dictionary import frozendict    my_dict = frozendict(a=1, b=2)    my_dict[&quot;a&quot;] # --&gt; 1    list(my_dict.items())  # --&gt; [(&quot;a&quot;, 1), (&quot;b&quot;, 2)]    my_dict[&quot;c&quot;] = 3  # --&gt; TypeError```#### file.py##### decompress```decompress(src_path, dst_path, size=65536)Decompress given file in blocks using gzip.:param str src_path: source file path:param str dst_path: destination file(unzipped) path:param int size: Read up to size bytes from src_path for each block.:return: dst_path Examples:    from pymince.file import decompress    decompress(&quot;/foo/src.txt.gz&quot;, &quot;/baz/dst.txt&quot;)  # --&gt; &quot;/baz/dst.txt&quot;```##### ensure_directory```ensure_directory(path, cleaning=False)Make sure the given file path is an existing directory.If it does not exist, a new directory will be created.:param str path::param bool cleaning:    If &quot;cleaning&quot; is True and a directory already exists,    this directory and the files contained in it will be deleted.    If &quot;cleaning&quot; is True and a file already exists,    this file will be deleted.```##### get_valid_filename```get_valid_filename(s)Returns a valid filename for the given string.- Remove leading/trailing spaces- Change spaces to underscores- Remove anything that is not an alphanumeric, dash, underscore, or dot```##### is_empty_directory```is_empty_directory(path)Check if the given path is an empty directory.```##### match_from_zip```match_from_zip(zip_file, pattern)Make an iterator that returns file names in the zip file thatmatch the given pattern.Uppercase/lowercase letters are ignored.:param zip_file: ZipFile object or zip path.:param pattern: &quot;re.Pattern&quot; to filter filename list:return: Iterator with the filenames foundExamples:    import pymince.file    pymince.file.match_from_zip(&quot;archive.zip&quot;, &quot;^file&quot;) # --&gt; file1.log file2.txt    pymince.file.match_from_zip(zipfile.ZipFile(&quot;archive.zip&quot;), &quot;^file&quot;) # --&gt; file1.log file2.txt```##### replace_extension```replace_extension(filename, old_ext=None, new_ext=None)Replace filename &quot;old_ext&quot; with &quot;new_ext&quot;.:param str filename::param Optional[str] old_ext::param Optional[str] new_ext:Examples:    from pymince.file import replace_extension    # remove extensions    replace_extension(&quot;/home/user/file.old&quot;) # --&gt; &quot;/home/user/file&quot;    replace_extension(&quot;/home/user/file.old&quot;, old_ext=&quot;.old&quot;) # --&gt; &quot;/home/user/file&quot;    replace_extension(&quot;/home/user/file.old&quot;, old_ext=&quot;.new&quot;) # --&gt; &quot;/home/user/file.old&quot;    # replace extensions    replace_extension(&quot;/home/user/file.old&quot;, new_ext=&quot;.new&quot;) # --&gt; &quot;/home/user/file.new&quot;    replace_extension(&quot;/home/user/file.old&quot;, old_ext=&quot;.old&quot;, new_ext=&quot;.new&quot;) # --&gt; &quot;/home/user/file.new&quot;    replace_extension(&quot;/home/user/file.old&quot;, old_ext=&quot;.new&quot;, new_ext=&quot;.new&quot;) # --&gt; &quot;/home/user/file.old&quot;```#### functional.py##### caller```caller(*args, **kwargs)Return a callable that calls with given params.Examples:    import pymince.functional    caller = pymince.functional.caller(range(5))    caller(len)   #  5    caller(list)  # [0, 1, 2, 3, 4]```##### classproperty```classproperty(method=None)Decorator that converts a method with a single cls argument into a propertythat can be accessed directly from the class.Examples:    from pymince.functional import classproperty    class MyClass:        __foo = &quot;var&quot;        @classproperty        def foo(cls):            return cls.__foo```##### identity```identity(x)Takes a single argument and returns it unchanged.Identity function, as defined in https://en.wikipedia.org/wiki/Identity_function.```##### once```once(fn)Decorator to execute a function only once.Examples:    from pymince.functional import once    @once    def inc_once():        global n        n += 1        return 'anything'    n = 0    inc_once()  #  --&gt; 'anything'    inc_once()  #  --&gt; 'anything'    inc_once()  #  --&gt; 'anything'    print(n)    #  --&gt; 1```##### pipe```pipe(*fns)Compose functions from left to right.:param fns: Functions to compose.:rtype: Callable[[Any], Any]Examples:    from pymince.functional import pipe    addtwo = lambda n: n + 2    double = lambda n: n * 2    square = lambda n: n * n    fn = pipe(addtwo, double, square)    fn(1) # --&gt; 36```##### retry_if_errors```retry_if_errors(*exceptions, delay=0, tries=1)Decorator that retries to call the wrapped functionif any of given exceptions are thrown.:param exceptions: Lists of exceptions that trigger a retry attempt.:param int delay: seconds delay between attempts. default: 0.:param int tries: number of attempts. default: 1Examples:@retry_if_errors(ValueError, TypeError, delay=0, tries=1)def foo():    return 1```##### retry_if_none```retry_if_none(delay=0, tries=1)Decorator that retries to call the wrapped functionif it returns None.:param int delay: seconds delay between attempts. default: 0.:param int tries: number of attempts. default: 1Examples:    @retry_if_none(delay=0, tries=1)    def foo():        return 1```##### set_attributes```set_attributes(**kwargs)Decorator to set attributes on functions and classes.Examples:    from pymince.functional import set_attributes    @set_attributes(short_description=&quot;dummy function&quot;)    def foo():        pass    print(foo.short_description)  # &quot;dummy function&quot;Based on: https://github.com/wolph/python-utils/ (set_attributes)```##### suppress```suppress(*exceptions, default=None)Decorator to suppress the specified exceptions and return thedefault value instead.Examples:    from pymince.functional import suppress    @suppress(FileNotFoundError, default=False)    def remove(somefile):         os.remove(somefile)    remove(&quot;no_found.txt&quot;)  # False```#### iterator.pyFunctions that use iterators for efficient loops.##### all_distinct```all_distinct(iterable, key=None)Check if all the elements of a key-based iterable are distinct.:param iterable::param key: None or &quot;Callable&quot; to compare if iterable items.:rtype: boolExamples:    from pymince.iterator import all_distinct    all_distinct([1, 1]) # --&gt; False    all_distinct([1, 2]) # --&gt; True```##### all_equal```all_equal(iterable, key=None)Check if all the elements of a key-based iterable are equals.:param iterable::param key: None or &quot;Callable&quot; to compare if iterable items.:rtype: boolExamples:    from pymince.iterator import all_equal    all_equal([1, 1]) # --&gt; True    all_equal([1, 2]) # --&gt; False```##### all_equals```all_equals(*iterables, key=None)Check if the iterables are equal.If the &quot;iterables&quot; are empty, it returns True.:param iterables::param key: None or &quot;Callable&quot; to compare if iterable items.:rtype: boolExamples:    from pymince.iterator import all_equals    all_equals() # --&gt; True    all_equals(range(1, 4), (1, 2, 3), {1, 2, 3}) # --&gt; True    all_equals((1, 2), (1, 2, 3)) # --&gt; False```##### all_identical```all_identical(left, right)Check that the items of `left` are the same objectsas those in `right`.:param Iterable[Any] left::param Iterable[Any] right::rtype: boolExamples:    from pymince.iterator import all_identical    a, b = object(), object()    all_identical([a, b, a], [a, b, a]) # --&gt; True    all_identical([a, b, [a]], [a, b, [a]])  # --&gt; False *new list object, while &quot;equal&quot; is not &quot;identical&quot;*```##### centroid```centroid(coordinates)Calculate the centroid of a set of n-dimensional coordinates.In Cartesian coordinates, the centroid isjust the mean of the components.:param Iterable[Iterable[int]] coordinates: Iterable of n-dimensional coordinates.:rtype: Generator[int] Examples:    from pymince.iterator import centroid    coord = (((2, 2), (4, 4)))    tuple(centroid(coord))  # --&gt; (3, 3)```##### consume```consume(iterator, n=None)Advance *iterator* by *n* steps. If *n* is ``None``, consume itentirely.Examples:    from pymince.iterator import consume    it = iter([1, 2])    consume(it)    next(it) # --&gt; StopIteration```##### grouper```grouper(iterable, size)Make a generator that returns each element being iterablewith &quot;size&quot; as the maximum number of elements.:param iterable::param int size: maximum size of element groups.:rtype: GeneratorExamples:    from pymince.iterator import grouper    groups = grouper([1, 2, 3, 4, 5], 2)    list(list(g) for g in groups) # --&gt; [[1, 2], [3, 4], [5]]```##### ibool```ibool(iterable)Iterator class supporting ´__bool__´.Examples:    from pymince.iterator import ibool    it = ibool((1, 2, 3))    bool(it) # --&gt; True    list(it) # --&gt; [1, 2, 3]```##### in_all```in_all(obj, iterables)Check if the object is contained in all the given iterables.If the &quot;iterables&quot; are empty, return True.:param Any obj::param iterables: iterable of iterables:rtype: boolExamples:    from pymince.iterator import in_all    in_all(&quot;a&quot;, ((&quot;a&quot;, &quot;b&quot;), &quot;bcd&quot;)) # --&gt; False    in_all(&quot;a&quot;, ((&quot;a&quot;, &quot;b&quot;), &quot;abc&quot;)) # --&gt; True    in_all(&quot;a&quot;, ()) # --&gt; True```##### in_any```in_any(obj, iterables)Check if the object is contained in any of the given iterables.:param Any obj::param iterables: iterable of iterables:rtype: boolExamples:    from pymince.iterator import in_any    in_any(&quot;a&quot;, ((&quot;a&quot;, &quot;b&quot;), &quot;bcd&quot;)) # --&gt; True    in_any(&quot;a&quot;, ((&quot;b&quot;, &quot;b&quot;), &quot;def&quot;)) # --&gt; False    in_any(&quot;a&quot;, ()) # --&gt; False```##### ipush```ipush(iterable)Iterator class supporting ´append´ and ´prepend´.Examples:    from pymince.iterator import ipush    it = ipush(iter([2, 3])    it.append(4)    it.append(5)    it.prepend(1)    it.prepend(0)    list(it)  # --&gt; [0, 1, 2, 3, 4, 5]```##### mul```mul(iterable, start=1)Return the multiplication of a 'start' value (default: 1)plus an iterable of numbers.When the iterable is empty, return the start value.```##### only_one```only_one(iterable)Check if given iterable has only one element.:param iterable::rtype: boolExamples:    from pymince.iterator import only_one    only_one([1]) # --&gt; True    only_one([1, 2]) # --&gt; False    only_one([]) # --&gt; False```##### pad_end```pad_end(iterable, length, fill_value=None)The function adds &quot;fill_value&quot; at the finishing of the iterable,until it reaches the specified length.If the value of the &quot;length&quot; param is less than the length ofthe given &quot;iterable&quot;, no filling is done.:param iterable::param int length: A number specifying the desired length of the resulting iterable.:param Any fill_value: Any value to fill the given iterable.:rtype: Generator Examples:    from pymince.iterator import pad_end    pad_end((&quot;a&quot;, &quot;b&quot;), 3, fill_value=&quot;1&quot;) # --&gt; &quot;a&quot; &quot;b&quot; &quot;1&quot;    pad_end((&quot;a&quot;, &quot;b&quot;), 3) # --&gt; &quot;a&quot; &quot;b&quot; None    pad_end((&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), 3) # --&gt; &quot;a&quot; &quot;b&quot; &quot;c&quot;```##### pad_start```pad_start(iterable, length, fill_value=None)The function adds &quot;fill_value&quot; at the beginning of the iterable,until it reaches the specified length.If the value of the &quot;length&quot; param is less than the length ofthe given &quot;iterable&quot;, no filling is done.:param iterable::param int length: A number specifying the desired length of the resulting iterable.:param Any fill_value: Any value to fill the given iterable.:rtype: Generator Examples:    from pymince.iterator import pad_start    pad_start((&quot;a&quot;, &quot;b&quot;), 3, fill_value=&quot;1&quot;) # --&gt; &quot;1&quot; &quot;a&quot; &quot;b&quot;    pad_start((&quot;a&quot;, &quot;b&quot;), 3) # --&gt; None &quot;a&quot; &quot;b&quot;    pad_start((&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), 3) # --&gt; &quot;a&quot; &quot;b&quot; &quot;c&quot;```##### partition```partition(predicate, iterable)Split the iterable into two lists, based on the boolean return-valueof the predicate.- (1): items that have predicate(item) == False.- (2): items that have predicate(item) == True.Examples:    from pymince.iterator import partition    is_odd = lambda x: x % 2 != 0    even_items, odd_items = partition(is_odd, range(10))  # ([0, 2, 4, 6, 8], [1, 3, 5, 7, 9])```##### replacer```replacer(iterable, matcher, new_value, count=-1)Make a generator that yields all occurrences of the old &quot;iterable&quot;replaced by &quot;new_value&quot;.:param iterable::param matcher: Callable to find occurrences. It is an occurrence if the matcher returns True.:param new_value: Any value to replace found occurrences.:param int count:    Maximum number of occurrences to replace.    -1 (the default value) means replace all occurrences.:rtype: GeneratorExamples:    from pymince.iterator import replacer    is_one = lambda n: n == 1    replacer([1,2,3,1,2,3], is_one, None) # --&gt; None 2 3 None 2 3    replacer([1,2,3,1,2,3], is_one, None, count=1) # --&gt; None 2 3 1 2 3```##### splitter```splitter(iterable, sep, key=None, maxsplit=-1, container=None)Splits an iterable based on a separator.A separator will never appear in the output.:param iterable::param sep: The delimiter to split the iterable.:param key    A function to compare the equality of each element with the given delimiter.    If the key function is not specified or is None, the element itself is used for compare.:param maxsplit:    Maximum number of splits to do.    -1 (the default value) means no limit.:param container: Callable to save the splits. By default tuple is used.:return: Generator with consecutive splits of &quot;iterable&quot; without the delimiter item.Examples:    from pymince.iterator import splitter    data = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;b&quot;, &quot;e&quot;)    split_n = splitter(data, &quot;b&quot;)  # --&gt; (&quot;a&quot;,) (&quot;c&quot;, &quot;d&quot;) (&quot;e&quot;,)    split_1 = splitter(data, &quot;b&quot;, maxsplit=1)  # --&gt; (&quot;a&quot;,) (&quot;c&quot;, &quot;d&quot;, &quot;b&quot;, &quot;e&quot;)```##### sub```sub(iterable)Return the subtraction of a non-empty iterable of numbers and sets.```##### truediv```truediv(iterable)Return the division of an non-empty iterable of numbers.```##### uniquer```uniquer(iterable, key=None)Make a generator that returns each element from iterable only oncerespecting the input order.Examples:    from pymince.iterator import uniquer    uniquer([1, 2, 3, 2]) # --&gt; 1 2 3```##### uniques```uniques(iterable, key=None)Check if all the elements of a key-based iterable are unique.:param iterable::param key: None or &quot;Callable&quot; to compare if iterable items.:rtype: boolExamples:    from pymince.iterator import uniques    uniques([1,2]) # --&gt; True    uniques([1,1]) # --&gt; False```#### json.pyUseful functions for working with JSONs.##### JSONEncoder```JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)JSON encoder that handles additional types comparedto `json.JSONEncoder`- `datetime` and `date` are serialized to strings according to the isoformat.- `decimal.Decimal` is serialized to a string.- `uuid.UUID` is serialized to a string.- `dataclasses.dataclass` is passed to `dataclasses.asdict`.- `frozenset` and `set` are serialized by ordering their values.```##### dump_from_csv```dump_from_csv(csv_path, json_path, /, *, fieldnames=None, start=0, stop=None, strip=True, encoding='utf-8', **kwargs)Dump CSV file to a JSON file using &quot;utf-8&quot; encoding.:param str csv_path::param str json_path::param fieldnames: list of keys for the JSON:param int start:    If start is specified, will skip all preceding elements;    otherwise, start defaults to zero.:param int stop::param bool strip:    Whether or not white space should be removed from the    beginning and end of field values.:param str encoding: utf-8 is used by default.```##### dump_into```dump_into(filename, payload, encoding='utf-8', **kwargs)Dump JSON to a file using &quot;utf-8&quot; encoding.Examples:    from pymince.json import dump_into    dump_into(&quot;foo.json&quot;, {&quot;key&quot;: &quot;value&quot;})```##### dump_into_zip```dump_into_zip(zip_path, arcname, payload, **kwargs)Dump JSON into the zip archive under the name arcname.Examples:    from pymince.json import dump_into_zip    dump_into_zip(&quot;archive.zip&quot;, &quot;foo.json&quot;, {&quot;key&quot;: &quot;value&quot;})```##### idump_into```idump_into(filename, iterable, encoding='utf-8', **kwargs)Dump an iterable incrementally into a JSON fileusing the &quot;utf-8&quot; encoding.The result will always be an array with the elements of the iterable.*** Useful to reduce memory consumption ***Examples:    from pymince.json import idump_into    it = iter([{&quot;key&quot;: &quot;foo&quot;}, {&quot;key&quot;: &quot;bar&quot;}])    dump_into(&quot;foo.json&quot;, it)```##### idump_lines```idump_lines(iterable, **dumps_kwargs)Generator yielding string lines that form a JSON arraywith the serialized elements of given iterable.*** Useful to reduce memory consumption ***:param iterable: Iterable[dict]:rtype: Iterable[str]```##### load_from```load_from(filename, encoding='utf-8')Load JSON from a file using &quot;utf-8&quot; encoding.Examples:    from pymince.json import load_from    dictionary = load_from(&quot;foo.json&quot;)```##### load_from_zip```load_from_zip(zip_path, arcname)Load JSON from a file named &quot;arcname&quot; inside a zip archive.Examples:    from pymince.json import load_from_zip    dictionary = load_from_zip(&quot;archive.zip&quot;, &quot;foo.json&quot;)```#### logging.py##### StructuredFormatter```StructuredFormatter(fmt=None, datefmt=None, style='%', validate=True)Implementation of JSON structured logging that worksfor most handlers.Examples:    import logging    import sys    from pymince.logging import StructuredFormatter    # Config    logger = logging.getLogger()    logger.setLevel(logging.DEBUG)    formatter = StructuredFormatter('%(message)s')    handler = logging.StreamHandler(sys.stdout)    handler.setLevel(logging.DEBUG)    handler.setFormatter(formatter)    logger.addHandler(handler)    # Usage    logger.debug('', {&quot;string&quot;: &quot;value1&quot;, &quot;number&quot;: 1})    logger.debug('', {&quot;string&quot;: &quot;value2&quot;, &quot;number&quot;: 2})    &gt;&gt;Output&lt;&lt;    {&quot;timestamp&quot;:&quot;2022-06-17 18:37:48,789&quot;,&quot;level&quot;:&quot;DEBUG&quot;,&quot;payload&quot;:{&quot;string&quot;:&quot;value1&quot;,&quot;number&quot;:1}}    {&quot;timestamp&quot;:&quot;2022-06-17 18:37:48,789&quot;,&quot;level&quot;:&quot;DEBUG&quot;,&quot;payload&quot;:{&quot;string&quot;:&quot;value2&quot;,&quot;number&quot;:2}}```##### timed_block```timed_block(name, logger=None)Log the duration of the handled context.Examples:    import logging    from pymince.logging import timed_block    logging.basicConfig(level=logging.DEBUG)    with timed_block(&quot;sleeping&quot;):        time.sleep(1)    &gt;&gt;Output&lt;&lt;    INFO:root:Generating [sleeping]    DEBUG:root:Finished [sleeping in 1.002 s]```#### std.py##### bind_json_std```bind_json_std(encoding='utf-8')Decorator to call &quot;function&quot; passing the json read from&quot;stdin&quot; in the keyword parameter &quot;data&quot; and dump the json that the callback returnsto &quot;stdout&quot;.Examples:from pymince.std import bind_json_std@bind_json_std()def foo(data=None):    print(&quot;Processing data from sys.stdin&quot;, data)    result = data and {**data, &quot;new&quot;: &quot;value&quot;}    print(&quot;Result to write in sys.stdout&quot;, result)    return result```#### text.pyUseful functions for working with strings.##### are_anagram```are_anagram(text1, text2)Check if two strings are anagram.Examples:    from pymince.text import are_anagram    are_anagram(&quot;listen&quot;, &quot;silent&quot;)      # --&gt; True    are_anagram(&quot;they see&quot;, &quot;the eyes&quot;)  # --&gt; True```##### fullstr```fullstr()Custom string inheriting from &quot;str&quot; which addsthe following methods:- is_url(self, schemes=None, hostnames=None)- is_int(self)- is_positive_int(self)- is_negative_int(self)- is_payment_card(self)- is_binary(self)- is_percentage(self)- is_palindrome(self)- is_email_address(self)- is_roman(self)- are_anagram(self, other)```##### get_random_secret```get_random_secret(length, alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')Generate a cryptographically secure random string.Useful for creating temporary passwords.```##### get_random_string```get_random_string(length, alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')Generate random string.```##### is_binary```is_binary(text)Check if the string is binary or not.```##### is_email_address```is_email_address(text)Check if the string is an email address.This solution does a very simple check. It only validates that the string contains an at sign (@)that is preceded and followed by one or more non whitespace characters.```##### is_int```is_int(text)Check if the string is the representation ofa integer number.True: &quot;10&quot;,   &quot;10.&quot;,   &quot;10.0&quot;,&quot;+10&quot;,  &quot;+10.&quot;,  &quot;+10.0&quot;,&quot;-10&quot;,  &quot;-10.&quot;,  &quot;-10.0&quot;```##### is_negative_int```is_negative_int(text)Check if the string is the representation ofnegative integer number.True:&quot;-10&quot;,  &quot;-10.&quot;,  &quot;-10.0&quot;```##### is_palindrome```is_palindrome(text)Check if the string is palindrome or not.A string is said to be palindrome if the reverse of the string is the same as string```##### is_payment_card```is_payment_card(text)Check if the string is a valid paymentcard number.https://en.wikipedia.org/wiki/Payment_card_number#Issuer_identification_number_(IIN)```##### is_percentage```is_percentage(text)Check if the string is a valid percentageTrue: &quot;100%&quot;, &quot;100 %&quot;, &quot;100&amp;nbsp;%&quot;, 100.0 %&quot;,```##### is_positive_int```is_positive_int(text)Check if the string is the representation ofpositive integer number.True: &quot;10&quot;,   &quot;10.&quot;,   &quot;10.0&quot;,&quot;+10&quot;,  &quot;+10.&quot;,  &quot;+10.0&quot;,```##### is_roman```is_roman(text)Check if the string is a valid roman numeral.```##### is_url```is_url(text, schemes=None, hostnames=None)Check if the string is a URL according to thegiven schemes and host-names.:param str text::param Optional[Container[str]] schemes: (&quot;http&quot;, &quot;https&quot;):param Optional[Container[str]] hostnames: (&quot;www.python.org&quot;, &quot;github.com&quot;, &quot;localhost&quot;):rtype: boolExamples:    from pymince.text import is_url    # True    is_url(&quot;https://github.com/&quot;)    is_url(&quot;https://github.com/&quot;, hostnames=(&quot;github.com&quot;,))    is_url(&quot;https://github.com/&quot;, hostnames=(&quot;github.com&quot;,), schemes=(&quot;https&quot;,))    # False    is_url(&quot;https://github.com/&quot;, schemes=(&quot;http&quot;,))    is_url(&quot;https://github.com/&quot;, hostnames=(&quot;www.python.org&quot;, &quot;localhost&quot;))```##### multireplace```multireplace(text, replacements)Given a string and a replacement map, it returns the replaced string.:param str text: string to execute replacements on.:param Union[dict[str, str], tuple[tuple[str, str], ...] replacements:    2-dict or 2-tuples with value to find and value to replace:rtype: str Examples:    from pymince.text import multireplace    mapping = {&quot;,&quot;: &quot;&quot;, &quot;cry&quot;: &quot;smile&quot;}    multireplace(&quot;No, woman, no cry&quot;, mapping) # --&gt; &quot;No woman no smile&quot;```##### multireplacer```multireplacer(replacements)Given a replacement map, returns a function that can be reused to replace any string.:param Union[dict[str, str], tuple[tuple[str, str], ...] replacements:    2-dict or 2-tuples with value to find and value to replace:rtype: Callable[[str], str] Examples:    from pymince.text import multireplacer    mapping = ((&quot;abc&quot;, &quot;123&quot;), (&quot;def&quot;, &quot;456&quot;))    replace = multireplacer(mapping)    replace(&quot;...def...&quot;)  # --&gt; &quot;...456...&quot;    replace(&quot;...abc...&quot;)  # --&gt; &quot;...123...&quot;    replace(&quot;...abc...def...&quot;)  # --&gt; &quot;...123...456...&quot;```##### normalize_newlines```normalize_newlines(s)Normalize CRLF and CR newlines to just LF.```##### remove_decimal_zeros```remove_decimal_zeros(value, decimal_sep='.', min_decimals=None)Removes non-significant decimal zeros from a formatted text number.Examples:    from pymince.text import remove_decimal_zeros    remove_decimal_zeros(&quot;2.000100&quot;, &quot;.&quot;) # --&gt; &quot;2.0001&quot;    remove_decimal_zeros(&quot;2.000000&quot;, &quot;.&quot;) # --&gt; &quot;2&quot;    remove_decimal_zeros(&quot;2.000000&quot;, &quot;.&quot;, min_decimals=2) # --&gt; &quot;2.00&quot;```##### remove_number_commas```remove_number_commas(s)Removes commas from a formatted text number having commasas group separator.:param str s::rtype strExamples:    from pymince.text import remove_number_commas    remove_number_commas('1,234,567.8') # --&gt; '1234567.8'```##### replace```replace(value, old_values, new_value, count=-1)Replace matching values in the given string with new_value.:param str value::param old_values: iterable of values to replace.:param str new_value: replacement value.:param int count:    Maximum number of occurrences to replace.    -1 (the default value) means replace all occurrences.:rtype: strExamples:    from pymince.text import replace    replace(&quot;No, woman, no cry&quot;, [&quot;,&quot;], &quot;;&quot;) # --&gt; &quot;No; woman; no cry&quot;    replace(&quot;No, woman, no cry&quot;, [&quot;,&quot;], &quot;;&quot;, count=1) # --&gt; &quot;No; woman, no cry&quot;```#### warnings.py##### deprecated```deprecated(fn)This is a decorator which can be used to mark functionsas deprecated. It will result in a warning being emittedwhen the function is used.http://code.activestate.com/recipes/391367-deprecated/?in=lang-pythonExamples:    from pymince.warnings import deprecated    @deprecated    def check_function():        pass    class SomeClass:        @deprecated        def check_method(self):            pass    @deprecated    class CheckClass:        pass    &gt;&gt; check_function() # DeprecationWarning  --&gt; 'Deprecated &quot;check_function&quot;.'    &gt;&gt; SomeClass().check_method() #  DeprecationWarning --&gt; 'Deprecated &quot;check_method&quot;.'    &gt;&gt; CheckClass() # DeprecationWarning  --&gt; 'Deprecated &quot;CheckClass&quot;.'```#### xml.py##### iterparse```iterparse(filename)Incrementally parse XML document into ElementTree.This function is based on: https://github.com/python/cpython/issues/93618'Fix misleading hint for original ElementTree.iterparse.''''The code below deletes a root child once it is completed, then processes and removesit from the memory (if nothing more references to it ofc).This allows to process 7GB XML with with a memory usage up to 10MB (in case of great number of root children).''':param str filename: XML filename:rtype: Generator Examples:    from pymince.xml import iterparse    for event, obj in iterparse(&quot;countries.xml&quot;)        if event == 'start'            print(obj, obj.tag, obj.attrib, obj.text)    &gt;&gt;Output&lt;&lt;    &lt;Element 'country' at 0x0000018ADF9D0CC0&gt; country {'code': 'as', 'iso': '16'} American Samoa    &lt;Element 'country' at 0x0000018ADF9D0C70&gt; country {'code': 'ad', 'iso': '20'} Andorra```### Upgrade README.mdUpgrade README.md `Usage` section according to current *pymince* code.```(env) python upgrade_readme_usage.py```</longdescription>
</pkgmetadata>