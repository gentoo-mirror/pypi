<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>httpwatcher===========Overview--------``httpwatcher`` is both a library and command-line utility for firing upa simple HTTP server to serve static files from a specific root path.Live reloading is triggered via web sockets.**Note** that ``httpwatcher`` is intended for developers during testingof their static web sites, and is not at all intended as a productionweb server.Requirements------------In order to install ``httpwatcher``, you will need:-  Python 2.7+ or Python 3.5+-  ``pip`` or ``easy_install``Installation------------With your `virtualenvironment &lt;https://virtualenv.pypa.io/en/stable/&gt;`__ active, run thefollowing:.. code:: bash    &gt; pip install httpwatcherTo upgrade to the latest version of ``httpwatcher``, simply:.. code:: bash    &gt; pip install -U httpwatcherUsage-----``httpwatcher`` can either be used from the command line, or as adrop-in library within your own Python application.Command-Line Usage~~~~~~~~~~~~~~~~~~The quickest way to get up and running is to watch the current folderand serve your content from ``http://localhost:5555`` as follows:.. code:: bash    # Also opens your web browser at http://localhost:5555    &gt; httpwatcher    # To get more help    &gt; httpwatcher --helpWith all possible options:.. code:: bash    &gt; httpwatcher --root /path/to/html \      # static root from which to serve files                  --watch &quot;/path1,/path2&quot; \   # comma-separated list of paths to watch (defaults to the static root)                  --host 127.0.0.1 \          # bind to 127.0.0.1                  --port 5556 \               # bind to port 5556                  --base-path /blog/ \        # serve static content from http://127.0.0.1:5556/blog/                  --verbose \                 # enable verbose debug logging                  --no-browser                # causes httpwatcher to not attempt to open your web browser automaticallyLibrary Usage~~~~~~~~~~~~~Make sure ``httpwatcher`` is installed as a dependency for your Pythonproject, and then:.. code:: python    import httpwatcher    # Just watch /path/to/html, and serve from that same path    httpwatcher.watch(&quot;/path/to/html&quot;)**Note** that, unlike ``HttpWatcherServer``, the ``httpwatcher.watch``function automatically assumes that you want to open your default webbrowser at the base URL of the served site. To avoid this, do thefollowing:.. code:: python    import httpwatcher    httpwatcher.watch(&quot;/path/to/html&quot;, open_browser=False)To use the watcher server directly and have more control over the I/Oloop:.. code:: python    from httpwatcher import HttpWatcherServer    from tornado.ioloop import IOLoop    def custom_callback():        print(&quot;Web server reloading!&quot;)    server = HttpWatcherServer(        &quot;/path/to/html&quot;,                      # serve files from the folder /path/to/html        watch_paths=[&quot;/path1&quot;, &quot;/path2&quot;],     # watch these paths for changes        on_reload=custom_callback,            # optionally specify a custom callback to be called just before the server reloads        host=&quot;127.0.0.1&quot;,                     # bind to host 127.0.0.1        port=5556,                            # bind to port 5556        server_base_path=&quot;/blog/&quot;,            # serve static content from http://127.0.0.1:5556/blog/        watcher_interval=1.0,                 # maximum reload frequency (seconds)        recursive=True,                       # watch for changes in /path/to/html recursively        open_browser=True                     # automatically attempt to open a web browser (default: False for HttpWatcherServer)    )    server.listen()    try:        # will keep serving until someone hits Ctrl+C        IOLoop.current().start()    except KeyboardInterrupt:        server.shutdown()``httpwatcher.watch`` takes mostly the same parameters as theconstructor parameters for ``HttpWatcherServer`` (except, as mentionedearlier, for the ``open_browser`` parameter). It's just a conveniencemethod provided to instantiate and run a simple ``HttpWatcherServer``.Inner Workings--------------``httpwatcher`` makes extensive use of the`Tornado &lt;http://www.tornadoweb.org&gt;`__ asynchronous web framework tofacilitate a combined asynchronous HTTP and WebSocket server. All HTMLcontent served that contains a closing ``&lt;/body&gt;`` tag willautomatically have two ``&lt;script&gt;`` tags injected to facilitate theWebSockets connection back to the server.The WebSockets endpoint is located at``http://localhost:5555/httpwatcher`` by default, and the JavaScriptfile that facilitates the reloading is located at``http://localhost:5555/httpwatcher.min.js`` by default (depending onyour host and port settings).Background----------The library came out of a need for a simple web server, capable ofserving static files with live reload capabilities, but also with theability to serve content from non-standard base paths (for example, from``http://somesite.com/blog/`` as opposed to always just``http://somesite.com``). More specifically, this was to be used in`Statik &lt;https://github.com/thanethomson/statik&gt;`__ - the static website generator.The `livereload &lt;https://github.com/lepture/python-livereload&gt;`__library was great for a while, until the real need came up for modifyingit, where the wheels came off the bus. More functional unit tests wereneeded to validate the basic functionality, and more flexibility wasneeded in some respects, so ``httpwatcher`` was built.Contributing------------Feel free to contribute! Fork the repository, make your changes in afeature branch, and then submit a pull request.License-------**The MIT License (MIT)**Copyright (c) 2017 Thane ThomsonPermission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the&quot;Software&quot;), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>