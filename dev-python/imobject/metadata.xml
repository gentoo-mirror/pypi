<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># imobject`imobject` is a Python library that provides improvements for basic data types such as lists, dicts and dictionaries.If you want to make data handling easier in Python, you can use imobject. It is a library that has three helpful classes: `ObjDict`, `ImprovedList` and `OrmCollection`.# FeaturesThe `imobject` library provides the following features:The `ObjDict` class allows you to create dictionary objects (Dictionary-like object or Dynamic Class as dict), which makes it easier to access and manipulate data elements. This class inherits from the built-in `dict` class and adds features such as converting dictionaries to objects, handling missing keys and access dictionary keys as attributes.The `ImprovedList` class offers an improved alternative to the Python list class, which it provide additional methods for working with lists of `ObjDict`. This class extends the built-in `list` class and adds features such as inspecting the elements of a list and performing advanced mapping operations.The `OrmCollection` class providing an interface and additional methods for querying and manipulating objects in the `ImprovedList`. This class is a list-like collection that extends `ImprovedList` and that implements an ORM overlay (wrapper) for a list of `ObjDict`.# InstallationYou can install the imobject library using pip:```pip install imobject```# ontributeIf you want to contribute to the imobject library, you can clone the project from GitHub and submit a pull request:`git clone https://github.com/username/imobject.git`# LicenceThe `imobject` library is distributed under the MIT license. See LICENSE for more information.# Exemples [HERE](https://github.com/mzakariabigdata/imobject/tree/main/examples)Here are some examples of using the imobject library.## ObjDict```python&gt;&gt;&gt; from imobject import ObjDict&gt;&gt;&gt; class Person:        def __init__(self, name: str, age: int) -&gt; None:            self.name = name            self.age = age        def __repr__(self) -&gt; str:            return f&quot;Person(name='{self.name}', age={self.age})&quot;&gt;&gt;&gt; person = Person(&quot;zakaria&quot;, 33)&gt;&gt;&gt; obj = ObjDict({&quot;a&quot;: 1, &quot;test&quot;: {&quot;zak&quot;: person}, &quot;b&quot;: {&quot;c&quot;: 2, &quot;d&quot;: [3, 4]}})&gt;&gt;&gt; obj.a1&gt;&gt;&gt; obj.select(['a']){'a': 1}&gt;&gt;&gt; res = obj.select(['a', 'b'])&gt;&gt;&gt; res{'a': 1, 'b': {'c': 2, 'd': [3, 4]}}&gt;&gt;&gt; type(res)&lt;class 'imobject.obj_dict.ObjDict'&gt;&gt;&gt;&gt; obj.select(1)TypeError: Argument 'wanted_keys' should be a list, got 'int' instead.&gt;&gt;&gt; obj.select(&quot;d&quot;)TypeError: Argument 'wanted_keys' should be a list, got 'str' instead.&gt;&gt;&gt; obj.select([&quot;c&quot;])KeyError: &quot;'ObjDict' object has no attribute 'c'&quot;&gt;&gt;&gt; res.b{'c': 2, 'd': [3, 4]}&gt;&gt;&gt; obj.select(['a', 'test']){'a': 1, 'test': {'zak': Person(name='zakaria', age=33)}}&gt;&gt;&gt; obj.select(['c'])KeyError: &quot;'ObjDict' object has no attribute 'c'&quot;&gt;&gt;&gt; obj.a = 13&gt;&gt;&gt; obj.a13&gt;&gt;&gt; obj['b']['c']2&gt;&gt;&gt; obj.b.c2&gt;&gt;&gt; obj.x = {&quot;y&quot;: 5}&gt;&gt;&gt; obj.x{&quot;y&quot;: 5}&gt;&gt;&gt; obj.inspect{   'a': 13,    'b': {'c': 2, 'd': [3, 4]},    'test': {'zak': Person(name='zakaria', age=33)},    'x': {'y': 5}}&gt;&gt;&gt; del obj.a&gt;&gt;&gt; obj.aAttributeError: 'ObjDict' object has no attribute 'a'&gt;&gt;&gt; obj_dict = obj.to_dict()&gt;&gt;&gt; obj_dict{'test': {'zak': Person(name='zakaria', age=33)}, 'b': {'c': 2, 'd': [3, 4]}, 'x': {'y': 5}}&gt;&gt;&gt; type(obj_dict)&lt;class 'dict'&gt;&gt;&gt;&gt; obj = ObjDict({              &quot;name&quot;: &quot;Jane&quot;,              &quot;age&quot;: 35,              &quot;address&quot;: {&quot;street&quot;: &quot;456 Second St&quot;, &quot;city&quot;: &quot;Othertown&quot;, &quot;state&quot;: &quot;MA&quot;},              &quot;scores&quot;: [85, 95],          })&gt;&gt;&gt; obj{'name': 'Jane', 'age': 35, 'address': {'street': '456 Second St', 'city': 'Othertown', 'state': 'MA'}, 'scores': [85, 95]}&gt;&gt;&gt; obj.update({              &quot;name&quot;: &quot;Will&quot;,              &quot;age&quot;: 50,              &quot;address&quot;: {&quot;street&quot;: &quot;456 Second St&quot;, &quot;city&quot;: &quot;Othertown&quot;, &quot;state&quot;: &quot;LA&quot;},              &quot;scores&quot;: [85, 100],          })&gt;&gt;&gt; obj{'name': 'Will', 'age': 50, 'address': {'street': '456 Second St', 'city': 'Othertown', 'state': 'LA'}, 'scores': [85, 100]}&gt;&gt;&gt; obj.items()[('name', 'Will'), ('age', 50), ('address', {'street': '456 Second St', 'city': 'Othertown', 'state': 'LA'}), ('scores', [85, 100])]&gt;&gt;&gt; copied_dict = obj.copy()&gt;&gt;&gt; copied_dict{'name': 'Will', 'age': 50, 'address': {'street': '456 Second St', 'city': 'Othertown', 'state': 'LA'}, 'scores': [85, 100]}```## ImprovedList```python&gt;&gt;&gt; from imobject import ImprovedList&gt;&gt;&gt; simple_list = ImprovedList([1, 2, 3])&gt;&gt;&gt; simple_list.first()1&gt;&gt;&gt; simple_list.first(2)[1, 2]&gt;&gt;&gt; ImprovedList([]).first() # None&gt;&gt;&gt; ImprovedList([1, 2, 3]).last()3&gt;&gt;&gt; ImprovedList([1, 2, 3]).last(2)[2, 3]&gt;&gt;&gt; ImprovedList([]).last() # None&gt;&gt;&gt; ImprovedList([1, 2, 3]).map(&quot;:__str__&quot;)['1', '2', '3']&gt;&gt;&gt; ImprovedList([1, 2, 3]).map(str)['1', '2', '3']&gt;&gt;&gt; ImprovedList([1, 2, 3]).map(&quot;:to_bytes&quot;)[b'\x01', b'\x02', b'\x03']&gt;&gt;&gt; ImprovedList([1, 2, 3]).map(float)[1.0, 2.0, 3.0]&gt;&gt;&gt; ImprovedList([1, 2, 3]).map(lambda x: x * 2)[2, 4, 6]&gt;&gt;&gt; ImprovedList([1, 2, 3]).map(lambda x: x ** 2)[1, 4, 9]&gt;&gt;&gt; ImprovedList([]).map(float)[]&gt;&gt;&gt; class Person:        def __init__(self, name: str, age: int, salary: float, date: str):            self.name = name            self.age = age            self.salary = salary            self.date = datetime.strptime(date, &quot;%Y-%m-%d&quot;)        @property        def ret_name(self) -&gt; str:            return self.name        def get_name(self) -&gt; str:            return self.name        def upper_name(self) -&gt; str:            return self.name.upper()        def get_age(self) -&gt; int:            return self.age        def change_name(self, new_name: str) -&gt; None:            self.name = new_name        def change_age(self, new_age: int) -&gt; None:            self.age = new_age        def is_adult(self) -&gt; bool:            return self.age &gt;= 18        def set_name(self, new_name: str) -&gt; None:            self.name = new_name        def __repr__(self) -&gt; str:            return f&quot;Person(name='{self.name}', age={self.age}, salary={self.salary}, date={self.date})&quot;&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; people = [             Person(&quot;Alice&quot;, 25, 100, &quot;2022-01-05&quot;),             Person(&quot;Bob&quot;, 12, 364, &quot;2021-12-25&quot;),             Person(&quot;Charlie&quot;, 35, 740, &quot;2022-01-20&quot;),         ]&gt;&gt;&gt; person_list = ImprovedList(people)&gt;&gt;&gt; person_list.map(':upper_name')['ALICE', 'BOB', 'CHARLIE']&gt;&gt;&gt; person_list.map(&quot;:is_adult&quot;)[True, False, True]&gt;&gt;&gt; person_list.map(&quot;:get_age&quot;)[25, 12, 35]&gt;&gt;&gt; person_list.map(&quot;.name&quot;)['Alice', 'Bob', 'Charlie']&gt;&gt;&gt; person_list.map(&quot;.age&quot;)[25, 12, 35]&gt;&gt;&gt; person_list.map(lambda x: x.get_name(), filter_func=lambda x: isinstance(x, Person) and x.age &gt;= 30)['Charlie']&gt;&gt;&gt; person_list.map(&quot;:get_name&quot;, filter_func=lambda x: isinstance(x, Person))['Alice', 'Bob', 'Charlie']&gt;&gt;&gt; person_list.map(&quot;.name&quot;, filter_func=lambda x: isinstance(x, Person))['Alice', 'Bob', 'Charlie']&gt;&gt;&gt; person_list.map(&quot;name&quot;, filter_func=lambda x: isinstance(x, Person))TypeError: called must be a string start with ':' for obj method or '.' obj attribute, or a callab&gt;&gt;&gt; def sort_by_date(obj: Person) -&gt; datetime:        return obj.date&gt;&gt;&gt; person_list.map(called=lambda obj: obj.name, sort_func=sort_by_date)['Bob', 'Alice', 'Charlie']&gt;&gt;&gt; person_list.map(called=lambda obj: obj, sort_func=sort_by_date)[Person(name='Bob', age=12, salary=364, date=2021-12-25 00:00:00), Person(name='Alice', age=25, salary=100, date=2022-01-05 00:00:00), Person(name='Charlie', age=35, salary=740, date=2022-01-20 00:00:00)]&gt;&gt;&gt; data_list = person_list + ImprovedList([1,2,3,&quot;four&quot;,5.0,{&quot;six&quot;: 6},[7],&quot;Apple&quot;,&quot;Banana&quot;,&quot;Orange&quot;])&gt;&gt;&gt; data_list[Person(name='Alice', age=25, salary=100, date=2022-01-05 00:00:00), Person(name='Bob', age=12, salary=364, date=2021-12-25 00:00:00), Person(name='Charlie', age=35, salary=740, date=2022-01-20 00:00:00), 1, 2, 3, 10, 'four', 5.0, {'six': 6}, [7], 'Apple', 'Banana', 'Orange']&gt;&gt;&gt; data_list.map(called=lambda x: x**2, filter_func=lambda x: isinstance(x, int) and x % 2 == 0)[4, 100]&gt;&gt;&gt; data_list.map(called=lambda x: x.upper(), filter_func=lambda x: isinstance(x, str) and len(x) &gt; 5)['BANANA', 'ORANGE']&gt;&gt;&gt; data_list.map(called=lambda x: x.capitalize(), filter_func=lambda x: isinstance(x, str) and &quot;a&quot; in x.lower())['Apple', 'Banana', 'Orange']&gt;&gt;&gt; data_list.map(called=str, filter_func=lambda x: isinstance(x, int) and x &gt;= 3)['3', '10']&gt;&gt;&gt; person_list.map(&quot;:change_name&quot;, **{&quot;new_name&quot;: &quot;Thor&quot;})[None, None, None]&gt;&gt;&gt; person_list.inspectImprovedList(Person) data:Person(name='Thor', age=25, salary=100)Person(name='Thor', age=12, salary=364)Person(name='Thor', age=35, salary=740)&gt;&gt;&gt; person_list.map(&quot;:change_name&quot;, **{&quot;new_name&quot;: &quot;&quot;})[None, None, None]&gt;&gt;&gt; person_list.inspectImprovedList(Person) data:Person(name='', age=25, salary=100)Person(name='', age=12, salary=364)Person(name='', age=35, salary=740)```## OrmCollection```python# Importer la classe OrmCollectionimport refrom imobject import (    OrmCollection,    ObjDict,    Query,    Filter,    BaseMultipleFound,    BaseNotFound,)# Create an instance of the OrmCollection class with dataorm_collection = OrmCollection(    [        ObjDict(            {                &quot;name&quot;: &quot;Alice&quot;,                &quot;age&quot;: 25,                &quot;gender&quot;: &quot;female&quot;,                &quot;occupation&quot;: &quot;psychologist&quot;,            }        ),        ObjDict(            {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;CIA agent&quot;}        ),        {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},        {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},    ])my_orm_collection_group = OrmCollection(    [        {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;occupation&quot;: &quot;psy&quot;},        {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 80, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;retraite&quot;},        {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;cia&quot;},        {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;etud&quot;},        {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;prof&quot;},        {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;ing&quot;},        {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 31, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;prof&quot;},    ])# Find all elements with name 'Alice'results = orm_collection.where(name=&quot;Alice&quot;)assert len(results) == 1assert results[0] == {    &quot;name&quot;: &quot;Alice&quot;,    &quot;age&quot;: 25,    &quot;gender&quot;: &quot;female&quot;,    &quot;occupation&quot;: &quot;psychologist&quot;,}# Find all elements where age is greater than 30 and occupation contains the word 'agent'results = orm_collection.where(age__gt=30, occupation__contains=&quot;agent&quot;)assert len(results) == 1assert results[0] == {    &quot;name&quot;: &quot;Bob&quot;,    &quot;age&quot;: 40,    &quot;gender&quot;: &quot;male&quot;,    &quot;occupation&quot;: &quot;CIA agent&quot;,}# Find all elements where age is not equal to 30results = orm_collection.where(age__not=30)assert len(results) == 2assert results[0] == {    &quot;name&quot;: &quot;Alice&quot;,    &quot;age&quot;: 25,    &quot;gender&quot;: &quot;female&quot;,    &quot;occupation&quot;: &quot;psychologist&quot;,}assert results[1] == {    &quot;name&quot;: &quot;Bob&quot;,    &quot;age&quot;: 40,    &quot;gender&quot;: &quot;male&quot;,    &quot;occupation&quot;: &quot;CIA agent&quot;,}# Find all elements where name contains the letter 'a' and occupation starts with the letter 'p'results = orm_collection.where(name__contains=&quot;c&quot;, occupation__startswith=&quot;p&quot;)assert len(results) == 1assert results[0] == {    &quot;name&quot;: &quot;Alice&quot;,    &quot;age&quot;: 25,    &quot;gender&quot;: &quot;female&quot;,    &quot;occupation&quot;: &quot;psychologist&quot;,}# Trouver tous les éléments avec le nom commençant par &quot;A&quot; ou se terminant par &quot;e&quot;results = orm_collection.where(name=re.compile(r&quot;^A.*|.*e$&quot;))assert len(results) == 3assert all(result[&quot;name&quot;] in {&quot;Alice&quot;, &quot;Charlie&quot;, &quot;Dave&quot;} for result in results)# Trouver tous les éléments avec le nom commençant par &quot;A&quot;results = orm_collection.where(name=re.compile(r&quot;^A.*&quot;))assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Alice&quot;# Trouver tous les éléments avec le nom se terminant par &quot;e&quot;results = orm_collection.where(name=&quot;.*e$&quot;)assert len(results) == 3assert all(result[&quot;name&quot;] in {&quot;Alice&quot;, &quot;Charlie&quot;, &quot;Dave&quot;} for result in results)# Trouver tous les éléments avec un nom vide (devrait renvoyer tous les éléments)results = orm_collection.where(name=&quot;&quot;)print(results, len(results), len(orm_collection))assert len(results) == len(orm_collection)assert all(result in orm_collection for result in results)# Trouver tous les éléments sans paramètres (devrait renvoyer 0 éléments)results = orm_collection.where()assert len(results) == 0# Trouver tous les éléments avec l'âge égal à 100 (devrait renvoyer un ensemble vide)results = orm_collection.where(age=100)assert len(results) == 0# Trouver tous les éléments avec le nom contenant la lettre &quot;z&quot;results = orm_collection.where(name=re.compile(r&quot;.z.&quot;, re.IGNORECASE))assert len(results) == 0# Trouver tous les éléments avec le nom contenant la lettre &quot;a&quot; ou &quot;e&quot;results = orm_collection.where(name=r&quot;*a*|*e*&quot;)# assert len(results) == 3# assert all(result[&quot;name&quot;] in {&quot;Alice&quot;, &quot;Charlie&quot;, &quot;Dave&quot;} for result in results)# Trouver tous les éléments avec le nom se terminant par &quot;ie&quot;results = orm_collection.where(name=re.compile(r&quot;.*ie$&quot;, re.IGNORECASE))assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Charlie&quot;# Find all elements where age is greater than or equal to 30 and name contains 'v'results = orm_collection.where(age__gte=30, name__contains=&quot;v&quot;)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Dave&quot;# Find all elements where age is not 25 and name contains 'v'results = orm_collection.where(age__nin=[25], name__contains=&quot;v&quot;)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Dave&quot;# Find all elements where age is not 25 and name ends with 'e'results = orm_collection.where(age__nin=[25], name__endswith=&quot;e&quot;)assert len(results) == 2assert {result[&quot;name&quot;] for result in results} == {&quot;Dave&quot;, &quot;Charlie&quot;}# Find all elements with age equal to 25results = orm_collection.where(age=25)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Alice&quot;# Find all elements with gender 'male' and age equal to 30results = orm_collection.where(gender=&quot;male&quot;, age=30)assert len(results) == 2assert {result[&quot;name&quot;] for result in results} == {&quot;Charlie&quot;, &quot;Dave&quot;}# Find all elements with name containing letter 'a'results = orm_collection.where(name__contains=&quot;a&quot;)assert len(results) == 2assert {result[&quot;name&quot;] for result in results} == {&quot;Charlie&quot;, &quot;Dave&quot;}# Find all elements where age is greater than 25 and name contains 'v'results = orm_collection.where(age__gt=25, name__contains=&quot;v&quot;)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Dave&quot;# Find all elements where age is either 25 or 30 and name contains 'v'results = orm_collection.where(age__in=[25, 30], name__contains=&quot;v&quot;)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Dave&quot;# Find all elements where age is less than 40 and name contains 'v'results = orm_collection.where(age__lt=40, name__contains=&quot;v&quot;)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Dave&quot;# Find all elements where age is not 40 and name contains 'v'results = orm_collection.where(age__not=40, name__contains=&quot;v&quot;)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Dave&quot;# Find all elements where age is equal to 40 and name contains 'b'results = orm_collection.where(age__eq=40, name__contains=&quot;b&quot;)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Bob&quot;# Find all elements where age is less than or equal to 30 and name contains 'v'results = orm_collection.where(age__lte=30, name__contains=&quot;v&quot;)assert len(results) == 1assert results[0][&quot;name&quot;] == &quot;Dave&quot;# Test TypeError pour l'opérateur 'gt' avec une chaîne de caractèrestry:    orm_collection.where(**{&quot;age__gt&quot;: &quot;25&quot;})except TypeError as error:    assert (        error.args[0]        == &quot;Invalid type for value of '&gt;' operator : expected int, found str&quot;    )# Test TypeError pour l'opérateur 'in' avec un inttry:    orm_collection.where(**{&quot;age__in&quot;: 25})except TypeError as error:    assert (        error.args[0]        == &quot;Invalid type for value of 'in' operator : expected list, found int&quot;    )# Test TypeError pour l'opérateur 'contains' avec un inttry:    orm_collection.where(**{&quot;age__contains&quot;: 25})except TypeError as error:    assert str(error) == &quot;'contains' lookup only works for string type fields&quot;# Test TypeError pour l'opérateur 'startswith' avec un inttry:    orm_collection.where(**{&quot;age__startswith&quot;: 25})except TypeError as error:    assert str(error) == &quot;'startswith' lookup only works for string type fields&quot;# Test TypeError pour l'opérateur 'eq' avec une chaîne de caractèrestry:    orm_collection.where(**{&quot;age__eq&quot;: &quot;25&quot;})except TypeError as error:    assert (        str(error) == &quot;'==' operator only works for same type fields, found int and str&quot;    )# Test ValueError pour un opérateur invalidetry:    orm_collection.where(Query([Filter(&quot;age&quot;, &quot;test_not_op&quot;, 30)]))except ValueError as error:    assert str(error) == &quot;'test_not_op' is not a valid operator&quot;# Recherche des éléments avec l'âge égal à 30query = Query([Filter(&quot;age&quot;, None, 30)])expected_names = {&quot;Charlie&quot;, &quot;Dave&quot;}results = orm_collection.where(query)# Define query to find all elements with gender equal to male AND age equal to 30 with Queryquery = Query([Filter(&quot;age&quot;, None, 30), Filter(&quot;gender&quot;, None, &quot;male&quot;)])results = orm_collection.where(query)assert results == [    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},]# Define query to find all elements with gender equal to male AND age equal to 30 with Queryquery = Query([Filter(&quot;age&quot;, None, 30)]) &amp; Query([Filter(&quot;age&quot;, None, 30)])results = orm_collection.where(query)assert results == [    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},]# Define query to find all elements with gender equal to male OR age equal to 30 with Queryquery = Query([Filter(&quot;age&quot;, None, 30)]) | Query([Filter(&quot;age&quot;, None, 40)])results = orm_collection.where(query)assert results == [    {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;CIA agent&quot;},    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},]# Test ValueError pour un paramètre invalidetry:    orm_collection.where(**{&quot;name__notValid&quot;: &quot;i&quot;})except ValueError as error:    assert str(error) == &quot;'notValid' is not a valid operator&quot;try:    orm_collection.find_by(name=&quot;.*a.*&quot;)    assert (        False    ), &quot;Le test a échoué, car plusieurs éléments ont été trouvés avec le nom contenant 'a'.&quot;except BaseMultipleFound:    passtry:    orm_collection.find_by(age=20)    assert (        False    ), &quot;Le test a échoué, car aucun élément n'a été trouvé avec l'âge égal à 20.&quot;except BaseNotFound:    pass# should return only one resultresult = Nonetry:    result = orm_collection.find_by(name__contains=&quot;v&quot;)except BaseMultipleFound:    assert (        False    ), &quot;Le test a échoué, car plusieurs éléments ont été trouvés avec le nom contenant 'v'.&quot;except BaseNotFound:    assert (        False    ), &quot;Le test a échoué, car aucun élément n'a été trouvé avec le nom contenant 'v'.&quot;assert result == {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;}# Group element by attributsresults = my_orm_collection_group.group_by(lambda x: x.age)assert len(results) == 5assert set(results.keys()) == {25, 30, 80, 31, 40}results = my_orm_collection_group.group_by(lambda x: x.occupation)assert len(results) == 6assert set(results.keys()) == {&quot;psy&quot;, &quot;retraite&quot;, &quot;cia&quot;, &quot;etud&quot;, &quot;ing&quot;, &quot;prof&quot;}# Group element by two attributsresults = orm_collection.group_by(lambda x: (x.gender, x.age))assert len(results) == 3assert results == {    (&quot;female&quot;, 25): [        {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;occupation&quot;: &quot;psychologist&quot;}    ],    (&quot;male&quot;, 40): [        {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;CIA agent&quot;}    ],    (&quot;male&quot;, 30): [        {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},        {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},    ],}assert set(results.keys()) == {    (&quot;female&quot;, 25),    (&quot;male&quot;, 40),    (&quot;male&quot;, 30),}# Créer une liste de nomsnoms = [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;, &quot;David&quot;, &quot;Edward&quot;]# Créer une collection ORM à partir de la listeorm_collection_list = OrmCollection(noms)# Grouper les noms par leur première lettreresults = orm_collection_list.group_by(lambda x: x[0])# Vérifier les résultats attendusassert results == {    &quot;A&quot;: [&quot;Alice&quot;],    &quot;B&quot;: [&quot;Bob&quot;],    &quot;C&quot;: [&quot;Charlie&quot;],    &quot;D&quot;: [&quot;David&quot;],    &quot;E&quot;: [&quot;Edward&quot;],}# Créer une liste de nombresnombres = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]# Créer une collection ORM à partir de la listeorm_collection_list = OrmCollection(nombres)# Grouper les nombres pairs et impairsresults = orm_collection_list.group_by(lambda x: x % 2 == 0)assert results == {True: [2, 4, 6, 8, 10], False: [1, 3, 5, 7, 9]}# Trier une liste d'objets de la plus jeune à la plus âgéepeople = [    {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;},    {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;},    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;},]ordered_people = orm_collection.order_by(&quot;age&quot;)assert ordered_people == [    {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;occupation&quot;: &quot;psychologist&quot;},    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},    {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;CIA agent&quot;},]# Trier une liste d'objets par ordre alphabétique de leur nom :people = [    {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;},    {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;},    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;},]ordered_people = orm_collection.order_by(lambda x: x[&quot;name&quot;])assert ordered_people == [    {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;occupation&quot;: &quot;psychologist&quot;},    {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;CIA agent&quot;},    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},]# Trier la liste par ordre alphabétiquelst = OrmCollection([&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;f&quot;, &quot;pear&quot;, &quot;c'est encore moi&quot;])ordered_lst = lst.order_by()assert ordered_lst == [&quot;f&quot;, &quot;pear&quot;, &quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;c'est encore moi&quot;]# Trier la listelst = OrmCollection([4, 2, 1, 3])ordered_lst = lst.order_by()assert ordered_lst == [1, 2, 3, 4]# Lancer une erreur pour une clé de tri invalidetry:    orm_collection.order_by(123)except TypeError:    passtry:    orm_collection.order_by(None)except ValueError:    pass# Tri d'une liste d'objets par l'âge décroissantordered_lst = orm_collection.order_by(lambda x: -x[&quot;age&quot;])assert ordered_lst == [    {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;CIA agent&quot;},    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},    {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;occupation&quot;: &quot;psychologist&quot;},]# Tri d'une liste d'objets par l'âge décroissantresults = OrmCollection([4, 2, 1, 3]).order_by(lambda x: -x)# Vérifier les résultats attendusassert results == [4, 3, 2, 1]# Utiliser la méthode all() pour récupérer tous les élémentsall_elements = orm_collection.all()assert all_elements == [    {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;occupation&quot;: &quot;psychologist&quot;},    {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;CIA agent&quot;},    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},]# Utiliser la méthode offset() pour récupérer les éléments à partir de l'index 2offset_elements = orm_collection.offset(2)assert offset_elements == [    {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;student&quot;},    {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;engineer&quot;},]# Utiliser la méthode limit() pour récupérer les deux premiers élémentslimit_elements = orm_collection.limit(2)assert limit_elements == [    {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;occupation&quot;: &quot;psychologist&quot;},    {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;occupation&quot;: &quot;CIA agent&quot;},]lst = OrmCollection([1, 2, 3, 4])distinct_lst = lst.distinct()assert distinct_lst == [1, 2, 3, 4]lst = OrmCollection([1, 2, 2, 3, 4, 4])distinct_lst = lst.distinct()assert distinct_lst == [1, 2, 3, 4]lst = OrmCollection([&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;f&quot;, &quot;pear&quot;, &quot;orange&quot;])distinct_lst = lst.distinct()assert distinct_lst == [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;f&quot;, &quot;pear&quot;]orm_collection = OrmCollection(    [        {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;gender&quot;: &quot;female&quot;, &quot;taf&quot;: &quot;psy&quot;},        {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 80, &quot;gender&quot;: &quot;male&quot;, &quot;taf&quot;: &quot;retraite&quot;},        {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 40, &quot;gender&quot;: &quot;male&quot;, &quot;taf&quot;: &quot;cia&quot;},        {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;taf&quot;: &quot;etud&quot;},        {&quot;name&quot;: &quot;Charlie&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;taf&quot;: &quot;prof&quot;},        {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;, &quot;taf&quot;: &quot;ing&quot;},        {&quot;name&quot;: &quot;Dave&quot;, &quot;age&quot;: 31, &quot;gender&quot;: &quot;male&quot;, &quot;taf&quot;: &quot;chomor&quot;},    ])distinct_coll = orm_collection.distinct(&quot;name&quot;, &quot;age&quot;)assert len(distinct_coll) == 6assert {(person[&quot;name&quot;], person[&quot;age&quot;]) for person in distinct_coll} == {    (&quot;Alice&quot;, 25),    (&quot;Alice&quot;, 80),    (&quot;Dave&quot;, 30),    (&quot;Dave&quot;, 31),    (&quot;Bob&quot;, 40),    (&quot;Charlie&quot;, 30),}```</longdescription>
</pkgmetadata>