<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-lsp-ruff[![PyPi](https://img.shields.io/pypi/v/python-lsp-ruff.svg)](https://pypi.org/project/python-lsp-ruff)[![Anaconda](https://anaconda.org/conda-forge/python-lsp-ruff/badges/version.svg)](https://anaconda.org/conda-forge/python-lsp-ruff)[![Python](https://github.com/python-lsp/python-lsp-ruff/actions/workflows/python.yml/badge.svg)](https://github.com/python-lsp/python-lsp-ruff/actions/workflows/python.yml)`python-lsp-ruff` is a plugin for `python-lsp-server` that adds linting, code action and formatting capabilities that are provided by [ruff](https://github.com/charliermarsh/ruff),an extremely fast Python linter written in Rust.## InstallIn the same `virtualenv` as `python-lsp-server`:```shellpip install python-lsp-ruff```There also exists an [AUR package](https://aur.archlinux.org/packages/python-lsp-ruff).### When using ruff before version 0.1.0Ruff version `0.1.0` introduced API changes that are fixed in Python LSP Ruff `v1.6.0`. To continue with `ruff&lt;0.1.0` please use `v1.5.3`, e.g. using `pip`:```shpip install &quot;ruff&lt;0.1.0&quot; &quot;python-lsp-ruff==1.5.3&quot;```## UsageThis plugin will disable `pycodestyle`, `pyflakes`, `mccabe` and `pyls_isort` by default, unless they are explicitly enabled in the client configuration.When enabled, all linting diagnostics will be provided by `ruff`.Any codes given in the `format` option will only be marked as `fixable` for ruff during the formatting operation, the user has to make sure that these codes are also in the list of codes that ruff checks!## ConfigurationConfiguration options can be passed to the python-language-server. If a `pyproject.toml`file is present in the project, `python-lsp-ruff` will ignore specific options (see below).The plugin follows [python-lsp-server's configuration](https://github.com/python-lsp/python-lsp-server/#configuration).This example configuration using for `neovim` shows the possible optionsL```luapylsp = {  plugins = {    ruff = {      enabled = true,  -- Enable the plugin      executable = &quot;&lt;path-to-ruff-bin&gt;&quot;,  -- Custom path to ruff      path = &quot;&lt;path_to_custom_ruff_toml&gt;&quot;,  -- Custom config for ruff to use      extendSelect = { &quot;I&quot; },  -- Rules that are additionally used by ruff      extendIgnore = { &quot;C90&quot; },  -- Rules that are additionally ignored by ruff      format = { &quot;I&quot; },  -- Rules that are marked as fixable by ruff that should be fixed when running textDocument/formatting      severities = { [&quot;D212&quot;] = &quot;I&quot; },  -- Optional table of rules where a custom severity is desired      unsafeFixes = false,  -- Whether or not to offer unsafe fixes as code actions. Ignored with the &quot;Fix All&quot; action      -- Rules that are ignored when a pyproject.toml or ruff.toml is present:      lineLength = 88,  -- Line length to pass to ruff checking and formatting      exclude = { &quot;__about__.py&quot; },  -- Files to be excluded by ruff checking      select = { &quot;F&quot; },  -- Rules to be enabled by ruff      ignore = { &quot;D210&quot; },  -- Rules to be ignored by ruff      perFileIgnores = { [&quot;__init__.py&quot;] = &quot;CPY001&quot; },  -- Rules that should be ignored for specific files      preview = false,  -- Whether to enable the preview style linting and formatting.      targetVersion = &quot;py310&quot;,  -- The minimum python version to target (applies for both linting and formatting).    },  }}```For more information on the configuration visit [Ruff's homepage](https://beta.ruff.rs/docs/configuration/).### Custom severitiesBy default, all diagnostics are marked as warning, except for `&quot;E999&quot;` and all error codes starting with `&quot;F&quot;`, which are displayed as errors.This default can be changed through the `pylsp.plugins.ruff.severities` option, which takes the error code as a key and any of`&quot;E&quot;`, `&quot;W&quot;`, `&quot;I&quot;` and `&quot;H&quot;` to be displayed as errors, warnings, information and hints, respectively.For more information on the diagnostic severities please refer to[the official LSP reference](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticSeverity).With `v2.0.0` it is also possible to use patterns to match codes. Rules match if the error code starts with the given pattern. If multiple patterns match the error code, `python-lsp-ruff` chooses the one with the most amount of matching characters.## Code formattingWith `python-lsp-ruff&gt;1.6.0` formatting is done using [ruffs own formatter](https://docs.astral.sh/ruff/formatter/).In addition, rules that should be fixed during the `textDocument/formatting` request can be added with the `format` option.Coming from previous versions the only change is that `isort` rules are **not** applied by default.To enable sorting of imports using ruff's isort functionality, add `&quot;I&quot;` to the list of `format` rules. ## Code actions`python-lsp-ruff` supports code actions as given by possible fixes by `ruff`. `python-lsp-ruff` also supports [unsafe fixes](https://docs.astral.sh/ruff/linter/#fix-safety).Fixes considered unsafe by `ruff` are marked `(unsafe)` in the code action.The `Fix all` code action *only* consideres safe fixes.</longdescription>
</pkgmetadata>