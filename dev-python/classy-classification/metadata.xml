<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Classy ClassificationHave you every struggled with needing a [Spacy TextCategorizer](https://spacy.io/api/textcategorizer) but didn't have the time to train one from scratch? Classy Classification is the way to go! For few-shot classification using [sentence-transformers](https://github.com/UKPLab/sentence-transformers) or [spaCy models](https://spacy.io/usage/models), provide a dictionary with labels and examples, or just provide a list of labels for zero shot-classification with [Hugginface zero-shot classifiers](https://huggingface.co/models?pipeline_tag=zero-shot-classification).[![Current Release Version](https://img.shields.io/github/release/pandora-intelligence/classy-classification.svg?style=flat-square&amp;logo=github)](https://github.com/pandora-intelligence/classy-classification/releases)[![pypi Version](https://img.shields.io/pypi/v/classy-classification.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/classy-classification/)[![PyPi downloads](https://static.pepy.tech/personalized-badge/classy-classification?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=orange&amp;left_text=pip%20downloads)](https://pypi.org/project/classy-classification/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)# Install``` pip install classy-classification```or install with faster inference using onnx.``` pip install classy-classification[onnx]```## ONNX issues### picklingONNX does show some issues when pickling the data.### M1Some [installation issues](https://github.com/onnx/onnx/issues/3129) might occur, which can be fixed by these commands.```brew install cmakebrew install protobufpip3 install onnx --no-use-pep517```# Quickstart## SpaCy embeddings```pythonimport spacyimport classy_classificationdata = {    &quot;furniture&quot;: [&quot;This text is about chairs.&quot;,               &quot;Couches, benches and televisions.&quot;,               &quot;I really need to get a new sofa.&quot;],    &quot;kitchen&quot;: [&quot;There also exist things like fridges.&quot;,                &quot;I hope to be getting a new stove today.&quot;,                &quot;Do you also have some ovens.&quot;]}nlp = spacy.load(&quot;en_core_web_trf&quot;)nlp.add_pipe(    &quot;text_categorizer&quot;,    config={        &quot;data&quot;: data,        &quot;model&quot;: &quot;spacy&quot;    })print(nlp(&quot;I am looking for kitchen appliances.&quot;)._.cats)# Output:## [{&quot;label&quot;: &quot;furniture&quot;, &quot;score&quot;: 0.21}, {&quot;label&quot;: &quot;kitchen&quot;, &quot;score&quot;: 0.79}]```### Sentence level classification```pythonimport spacyimport classy_classificationdata = {    &quot;furniture&quot;: [&quot;This text is about chairs.&quot;,               &quot;Couches, benches and televisions.&quot;,               &quot;I really need to get a new sofa.&quot;],    &quot;kitchen&quot;: [&quot;There also exist things like fridges.&quot;,                &quot;I hope to be getting a new stove today.&quot;,                &quot;Do you also have some ovens.&quot;]}nlp.add_pipe(    &quot;text_categorizer&quot;,    config={        &quot;data&quot;: data,        &quot;model&quot;: &quot;spacy&quot;,        &quot;include_sent&quot;: True    })print(nlp(&quot;I am looking for kitchen appliances. And I love doing so.&quot;).sents[0]._.cats)# Output:## [{&quot;label&quot;: &quot;furniture&quot;, &quot;score&quot;: 0.21}, {&quot;label&quot;: &quot;kitchen&quot;, &quot;score&quot;: 0.79}]```### Define random seed and verbosity```pythonnlp.add_pipe(    &quot;text_categorizer&quot;,    config={        &quot;data&quot;: data,        &quot;verbose&quot;: True,        &quot;config&quot;: {&quot;seed&quot;: 42}    })```### Multi-label classificationSometimes multiple labels are necessary to fully describe the contents of a text. In that case, we want to make use of the **multi-label** implementation, here the sum of label scores is not limited to 1. Just pass the same training data to multiple keys.```pythonimport spacyimport classy_classificationdata = {    &quot;furniture&quot;: [&quot;This text is about chairs.&quot;,               &quot;Couches, benches and televisions.&quot;,               &quot;I really need to get a new sofa.&quot;,               &quot;We have a new dinner table.&quot;,               &quot;There also exist things like fridges.&quot;,                &quot;I hope to be getting a new stove today.&quot;,                &quot;Do you also have some ovens.&quot;,                &quot;We have a new dinner table.&quot;],    &quot;kitchen&quot;: [&quot;There also exist things like fridges.&quot;,                &quot;I hope to be getting a new stove today.&quot;,                &quot;Do you also have some ovens.&quot;,                &quot;We have a new dinner table.&quot;,                &quot;There also exist things like fridges.&quot;,                &quot;I hope to be getting a new stove today.&quot;,                &quot;Do you also have some ovens.&quot;,                &quot;We have a new dinner table.&quot;]}nlp = spacy.load(&quot;en_core_web_md&quot;)nlp.add_pipe(    &quot;text_categorizer&quot;,    config={        &quot;data&quot;: data,        &quot;model&quot;: &quot;spacy&quot;,        &quot;multi_label&quot;: True,    })print(nlp(&quot;I am looking for furniture and kitchen equipment.&quot;)._.cats)# Output:## [{&quot;label&quot;: &quot;furniture&quot;, &quot;score&quot;: 0.92}, {&quot;label&quot;: &quot;kitchen&quot;, &quot;score&quot;: 0.91}]```### Outlier detectionSometimes it is worth to be able to do outlier detection or binary classification. This can either be approached usinga binary training dataset, however, I have also implemented support for a `OneClassSVM` for [outlier detection using a single label](https://scikit-learn.org/stable/modules/generated/sklearn.svm.OneClassSVM.html). Not that this method does not return probabilities, but that the data is formatted like label-score value pair to ensure uniformity.Approach 1:```pythonimport spacyimport classy_classificationdata_binary = {    &quot;inlier&quot;: [&quot;This text is about chairs.&quot;,               &quot;Couches, benches and televisions.&quot;,               &quot;I really need to get a new sofa.&quot;],    &quot;outlier&quot;: [&quot;Text about kitchen equipment&quot;,                &quot;This text is about politics&quot;,                &quot;Comments about AI and stuff.&quot;]}nlp = spacy.load(&quot;en_core_web_md&quot;)nlp.add_pipe(    &quot;text_categorizer&quot;,    config={        &quot;data&quot;: data_binary,    })print(nlp(&quot;This text is a random text&quot;)._.cats)# Output:## [{'inlier': 0.2926672385488411, 'outlier': 0.707332761451159}]```Approach 2:```pythonimport spacyimport classy_classificationdata_singular = {    &quot;furniture&quot;: [&quot;This text is about chairs.&quot;,               &quot;Couches, benches and televisions.&quot;,               &quot;I really need to get a new sofa.&quot;,               &quot;We have a new dinner table.&quot;]}nlp = spacy.load(&quot;en_core_web_md&quot;)nlp.add_pipe(    &quot;text_categorizer&quot;,    config={        &quot;data&quot;: data_singular,    })print(nlp(&quot;This text is a random text&quot;)._.cats)# Output:## [{'furniture': 0, 'not_furniture': 1}]```## Sentence-transfomer embeddings```pythonimport spacyimport classy_classificationdata = {    &quot;furniture&quot;: [&quot;This text is about chairs.&quot;,               &quot;Couches, benches and televisions.&quot;,               &quot;I really need to get a new sofa.&quot;],    &quot;kitchen&quot;: [&quot;There also exist things like fridges.&quot;,                &quot;I hope to be getting a new stove today.&quot;,                &quot;Do you also have some ovens.&quot;]}nlp = spacy.blank(&quot;en&quot;)nlp.add_pipe(    &quot;text_categorizer&quot;,    config={        &quot;data&quot;: data,        &quot;model&quot;: &quot;sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2&quot;,        &quot;device&quot;: &quot;gpu&quot;    })print(nlp(&quot;I am looking for kitchen appliances.&quot;)._.cats)# Output:## [{&quot;label&quot;: &quot;furniture&quot;, &quot;score&quot;: 0.21}, {&quot;label&quot;: &quot;kitchen&quot;, &quot;score&quot;: 0.79}]```## Hugginface zero-shot classifiers```pythonimport spacyimport classy_classificationdata = [&quot;furniture&quot;, &quot;kitchen&quot;]nlp = spacy.blank(&quot;en&quot;)nlp.add_pipe(    &quot;text_categorizer&quot;,    config={        &quot;data&quot;: data,        &quot;model&quot;: &quot;typeform/distilbert-base-uncased-mnli&quot;,        &quot;cat_type&quot;: &quot;zero&quot;,        &quot;device&quot;: &quot;gpu&quot;    })print(nlp(&quot;I am looking for kitchen appliances.&quot;)._.cats)# Output:## [{&quot;label&quot;: &quot;furniture&quot;, &quot;score&quot;: 0.21}, {&quot;label&quot;: &quot;kitchen&quot;, &quot;score&quot;: 0.79}]```# Credits## Inspiration Drawn From[Huggingface](https://huggingface.co/) does offer some nice models for few/zero-shot classification, but these are not tailored to multi-lingual approaches. Rasa NLU has [a nice approach](https://rasa.com/blog/rasa-nlu-in-depth-part-1-intent-classification/) for this, but its too embedded in their codebase for easy usage outside of Rasa/chatbots. Additionally, it made sense to integrate [sentence-transformers](https://github.com/UKPLab/sentence-transformers) and [Hugginface zero-shot](https://huggingface.co/models?pipeline_tag=zero-shot-classification), instead of default [word embeddings](https://arxiv.org/abs/1301.3781). Finally, I decided to integrate with Spacy, since training a custom [Spacy TextCategorizer](https://spacy.io/api/textcategorizer) seems like a lot of hassle if you want something quick and dirty.- [Scikit-learn](https://github.com/scikit-learn/scikit-learn)- [Rasa NLU](https://github.com/RasaHQ/rasa)- [Sentence Transformers](https://github.com/UKPLab/sentence-transformers)- [Spacy](https://github.com/explosion/spaCy)## Or buy me a coffee[![&quot;Buy Me A Coffee&quot;](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/98kf2552674)# Standalone usage without spaCy```pythonfrom classy_classification import ClassyClassifierdata = {    &quot;furniture&quot;: [&quot;This text is about chairs.&quot;,               &quot;Couches, benches and televisions.&quot;,               &quot;I really need to get a new sofa.&quot;],    &quot;kitchen&quot;: [&quot;There also exist things like fridges.&quot;,                &quot;I hope to be getting a new stove today.&quot;,                &quot;Do you also have some ovens.&quot;]}classifier = ClassyClassifier(data=data)classifier(&quot;I am looking for kitchen appliances.&quot;)classifier.pipe([&quot;I am looking for kitchen appliances.&quot;])# overwrite training dataclassifier.set_training_data(data=data)classifier(&quot;I am looking for kitchen appliances.&quot;)# overwrite [embedding model](https://www.sbert.net/docs/pretrained_models.html)classifier.set_embedding_model(model=&quot;paraphrase-MiniLM-L3-v2&quot;)classifier(&quot;I am looking for kitchen appliances.&quot;)# overwrite SVC configclassifier.set_classification_model(    config={        &quot;C&quot;: [1, 2, 5, 10, 20, 100],        &quot;kernel&quot;: [&quot;linear&quot;],        &quot;max_cross_validation_folds&quot;: 5    })classifier(&quot;I am looking for kitchen appliances.&quot;)```## Save and load models```pythondata = {    &quot;furniture&quot;: [&quot;This text is about chairs.&quot;,               &quot;Couches, benches and televisions.&quot;,               &quot;I really need to get a new sofa.&quot;],    &quot;kitchen&quot;: [&quot;There also exist things like fridges.&quot;,                &quot;I hope to be getting a new stove today.&quot;,                &quot;Do you also have some ovens.&quot;]}classifier = classyClassifier(data=data)with open(&quot;./classifier.pkl&quot;, &quot;wb&quot;) as f:    pickle.dump(classifier, f)f = open(&quot;./classifier.pkl&quot;, &quot;rb&quot;)classifier = pickle.load(f)classifier(&quot;I am looking for kitchen appliances.&quot;)```</longdescription>
</pkgmetadata>