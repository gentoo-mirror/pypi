<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># EntX - The Python Encryption Library## Breaking Changes as of Version 3.1.0:The Style of Encryption has been changed in version 3.1.0, due to a bug present in the previous version. If you have data encrypted with versions &lt;= 3.1.0, you may need to re-encrypt them to use the new versions of the library. This change does not affect new users, and we apologise for the inconvenience caused.## EntX Encryption and DecryptionNote: EntX Encryption will store all keys and values as strings. If you plan on running operations on integers/floats in your data, convert them with int() or float() before use.### How to create an encryption client with password stored in an environment variable:```import osimport entxclient = entx.Client(os.environ[&quot;password&quot;])```### How to encrypt a string```import osimport entxclient = entx.Client(os.environ[&quot;password&quot;])to_encrypt = &quot;This will be encrypted&quot;encrypted = client.encrypt(to_encrypt)```### How to decrypt a string```import osimport entxclient = entx.Client(os.environ[&quot;password&quot;])to_decrypt = &quot;This will be decrypted&quot;encrypted = client.decrypt(to_decrypt)```## EntX Storage### JSONEntX supports JSON reading and writing, allowing you to store and read dictionaries in the .json format, automatically encrypting and decrypting the data with the password provided.To store values as a JSON with encryption only applying to the values, pass in the keyword parameter `encrypt_output = False` to the dumps and dump functions. If this is not passed or set to `True`, the json will be encrypted before writing and only readable using the EntX JSONClient.To read values from a JSON with encryption only applying to the values, pass in the keyword parameter `encrypted_input = False` to the load and loads functions. If this is not passed or set to `True`, the client will attempt to decrypt the json before converting it to an object, throwing an error if the json is not encrypted or the password provided is incorrect.It is recommended that you encrypt your output json to increase the strength of the output's encryption.#### How to create a JSON client with a password stored in an environment variable:```import osfrom entx.storage import JSONClientclient = JSONClient(os.environ[&quot;password&quot;])```#### How to convert a dictionary to an encrypted JSON string:```import osfrom entx.storage import JSONClientclient = JSONClient(os.environ[&quot;password&quot;])to_encrypt_dictionary = {&quot;keys&quot;: &quot;values&quot;}dictionary_json_string = client.dumps(to_encrypt_dictionary)```#### How to write a dictionary to an encrypted JSON file:```import osfrom entx.storage import JSONClientclient = JSONClient(os.environ[&quot;password&quot;])to_encrypt_dictionary = {&quot;keys&quot;: &quot;values&quot;}with open(&quot;demo.json&quot;, &quot;w&quot;) as output_file:    client.dump(to_encrypt_dictionary, output_file)```#### How to read a dictionary from an encrypted JSON string:```import osfrom entx.storage import JSONClientclient = JSONClient(os.environ[&quot;password&quot;])encrypted_json_string = &quot;your string here&quot;decrypted_dictionary = client.loads(encrypted_json_string)```#### How to read a dictionary from an encrypted JSON file:```import osfrom entx.storage import JSONClientclient = JSONClient(os.environ[&quot;password&quot;])with open(&quot;demo.json&quot;, &quot;r&quot;) as input_file:    decrypted_dictionary = client.load(input_file)```### EntX Storage Exceptions:#### entx.errors.InvalidPasswordExceptionRaised when the password provided for a client file is invalid. Often raised when trying to load from a file with an incorrect password.## EntX Users### EntX User Management SystemAs of Version 3.0.0, EntX now comes with the users module to manager users and their data. All user files are encrypted using the user password, and can be stored in any relative directory. #### How to create a new user in a &quot;users&quot; folder:```from entx.users import Useruser = User.new_user(&quot;username&quot;, &quot;password&quot;, &quot;users&quot;)```#### How to log in to an existing user in a &quot;users&quot; folder:```from entx.users import Useruser = User.login(&quot;username&quot;, &quot;password&quot;, &quot;users&quot;)```#### How to access a user's data object from a User object:```from entx.users import Useruser = User.login(&quot;username&quot;, &quot;password&quot;, &quot;users&quot;)data = user.objprint(data)```#### How to add a field to a user's data object and save it to the user's file:```from entx.users import Useruser = User.login(&quot;username&quot;, &quot;password&quot;, &quot;users&quot;)user.obj[&quot;new_field&quot;] = &quot;field contents&quot;user.update()```### User Management Exceptions:#### entx.errors.UserAlreadyExistsRaised when you are trying to create a new user in a directory where a user with that username already exists.#### entx.errors.InvalidUserRaised when you are trying to log in to a user that doesn't exist.'#### entx.errors.InvalidPasswordExceptionRaised when the password provided for a user is invalid.</longdescription>
</pkgmetadata>