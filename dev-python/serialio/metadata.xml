<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># serialio![Pypi version][pypi]A python concurrency agnostic serial line library.Helpful when handling with instrumentation which work over serial line and implementsimple REQ-REP communication protocols (example:[SCPI](https://en.m.wikipedia.org/wiki/Standard_Commands_for_Programmable_Instruments)).Besides local serial line, serialio also supports serial line over RFC2217 protocol,raw TCP socket and [tango](https://tango-controls.org).As far as RFC2217 is concerned, it should be compatible with:* ser2net bridge with telnet(RFC2217) and raw configurations* gserial[ser2tcp] bridge (RFC2217)As far as tango is concerned, it should be compatible with the tango classes:* [Serial](https://sourceforge.net/p/tango-ds/code/HEAD/tree/DeviceClasses/Communication/SerialLine/)Base implementation written in asyncio with support for different concurrency models:* asyncio* classic blocking API* future based APIHere is a summary of what is forseen and what is implemented| Concurrency   | Local  | RFC2217 | Raw TCP | [Tango](http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/tango-ds/index.html) || ------------- |:------:|:-------:|:-------:|:-----------------------------------------------------------------------------------:|| asyncio       |   Y    |    Y    |    Y    |                                        Y                                            || classic sync  |   Y    |    Y    |    Y    |                                        Y                                            || conc. futures |   Y    |    Y    |    Y    |                                        Y                                            |## InstallationFrom within your favourite python environment:```consolepip install serialio```## Usage### asyncio```pythonimport asyncioimport serialio.aio.tcpasync def main():    sl = serialio.serial_for_url(&quot;serial-tcp://lab1.acme.org:5000&quot;)    # or the equivalent:    # sl = serialio.aio.tcp.Serial(&quot;lab1.acme.org&quot;, 5000)    await sl.open()    # Assuming a SCPI complient on the other end we can ask for:    reply = await sl.write_readline(b&quot;*IDN?\n&quot;)    print(reply)    await sl.close()asyncio.run(main())```*local serial line*```pythonimport serialio.aio.posixsl = serialio.aio.posix.Serial(&quot;/dev/ttyS0&quot;)# or the equivalentsl = serialio.serial_for_url(&quot;serial:///dev/ttyS0&quot;)```*raw TCP socket*```pythonimport serialio.aio.tcpsl = serialio.aio.tcp.Serial(&quot;lab1.acme.org:5000&quot;)# or the equivalentsl = serialio.serial_for_url(&quot;serial+tcp://lab1.acme.org:5000&quot;)```*RFC2217 (telnet)*```pythonimport serialio.aio.rfc2217sl = serialio.aio.rfc2217.Serial(&quot;lab1.acme.org:5000&quot;)# or the equivalentsl = serialio.serial_for_url(&quot;rfc2217://lab1.acme.org:5000&quot;)```*Tango*(needs a `pip install serialio[tango]` installation)```pythonimport serialio.aio.tangosl = serialio.aio.tango.Serial(&quot;lab/01/serial-01&quot;)# or the equivalentsl = serialio.serial_for_url(&quot;serial+tango://lab/01/serial-01&quot;)```### classic```pythonfrom serialio.aio.tcp import Serialsl = Serial(&quot;lab1.acme.org&quot;, 5000)reply = sl.write_readline(b&quot;*IDN?\n&quot;)print(reply)```### concurrent.futures```pythonfrom serialio.sio.tcp import Serialsl = Serial(&quot;lab1.acme.org&quot;, 5000, resolve_futures=False)reply = sl.write_readline(b&quot;*IDN?\n&quot;).result()print(reply)```## API differences with [serial](https://github.com/pyserial/pyserial)* coroutine based API* `open()` coroutine must be called explicitly before using the serial line* setting of parameters done through functions instead of properties (ie:  `await ser_line.set_XXX(value)` instead of `ser_line.XXX = value`  (ex: `await ser_line.set_baudrate()`))* custom `eol` character (serial is fixed to `b&quot;\n&quot;`)* included REQ/REP atomic functions (`write_read()` family)## FeaturesThe main goal of a serialio Serial object is to facilitate communicationwith instruments connected to a serial line.The most frequent cases include instruments which expect a REQ/REPsemantics with ASCII protocols like SCPI. In these cases most commandstranslate in small packets being exchanged between the host and theinstrument.### REQ-REP semanticsMany instruments out there have a Request-Reply protocol. A serialio Serialprovides helpful `write_read` family of methods which simplify communicationwith these instruments.### Custom EOLIn line based protocols, sometimes people decide `\n` is not a good EOL character.A serialio can be customized with a different EOL character.For example, the [XIA-PFCU](https://github.com/tiagocoutinho/xia-pfcu) alwaysreplies with `;\r\n`, so we could configure it using the following snippet:```pythonsl = serialio.serial_for_url(&quot;serial:///dev/ttyS0&quot;, eol=b&quot;;\r\n&quot;)await sl.open()```The initial EOL character can be overwritten in any of the `readline` methods.Example:```pythonawait sl.write_readline(b&quot;*IDN?\n&quot;, eol=b&quot;\r&quot;)```### StreamsTODO: Write this chapter[pypi]: https://img.shields.io/pypi/pyversions/serialio.svg</longdescription>
</pkgmetadata>