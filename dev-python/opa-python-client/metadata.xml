<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Open Policy Agent (OPA) Client [![MIT licensed](https://img.shields.io/github/license/Turall/OPA-python-client)](https://raw.githubusercontent.com/Turall/OPA-python-client/master/LICENSE)[![GitHub stars](https://img.shields.io/github/stars/Turall/OPA-python-client.svg)](https://github.com/Turall/OPA-python-client/stargazers)[![GitHub forks](https://img.shields.io/github/forks/Turall/OPA-python-client.svg)](https://github.com/Turall/OPA-python-client/network)[![GitHub issues](https://img.shields.io/github/issues-raw/Turall/OPA-python-client)](https://github.com/Turall/OPA-python-client/issues)[![Downloads](https://pepy.tech/badge/opa-python-client)](https://pepy.tech/project/opa-python-client)See offical documentation page [Open Policy Agent](https://www.openpolicyagent.org/docs/latest/)### Installation ###```sh$ pip install OPA-python-client```Alternatively, if you prefer to use `poetry` for package dependencies:```bash$ poetry shell$ poetry add OPA-python-client```## Usage Examples ```python&gt;&gt;&gt; from opa_client.opa import OpaClient&gt;&gt;&gt; client = OpaClient() # default host='localhost', port=8181, version='v1'&gt;&gt;&gt; client.check_connection()'Yes I&quot;m here :)'&gt;&gt;&gt;  test_policy = &quot;&quot;&quot;...     package play... ...     import data.testapi.testdata... ...     default hello = false... ...     hello {...         m := input.message...         testdata[i] == m...     }... &quot;&quot;&quot;&gt;&gt;&gt; client.update_opa_policy_fromstring(test_policy, &quot;testpolicy&quot;)True&gt;&gt;&gt; client.get_policies_list()['testpolicy']&gt;&gt;&gt; data = [&quot;world&quot;, &quot;hello&quot;]&gt;&gt;&gt; client.update_or_create_opa_data(data, &quot;testapi/testdata&quot;)True&gt;&gt;&gt; check_data = {&quot;input&quot;: {&quot;message&quot;: &quot;hello&quot;}}&gt;&gt;&gt; client.check_permission(input_data=check_data, policy_name=&quot;testpolicy&quot;, rule_name=&quot;hello&quot;){'result': True}```### Connection to OPA service```pythonfrom opa_client.opa import OpaClientclient = OpaClient() # default host='localhost', port=8181, version='v1'client.check_connection() # response is  Yes I'm here :)# Ensure the connection is closed correctly by deleting the clientdel client```### Connection to OPA service with SSL```pythonfrom opa_client.opa import OpaClientclient = OpaClient(    host=&quot;https://192.168.99.100&quot;,    port=8181,    version=&quot;v1&quot;,    ssl=True,    cert=&quot;/your/certificate/file/path/mycert.crt&quot;,)client.check_connection() # response is  Yes I'm here :)del client```### Update policy from rego file```pythonfrom opa_client.opa import OpaClientclient = OpaClient() client.update_opa_policy_fromfile(&quot;/your/path/filename.rego&quot;, endpoint=&quot;fromfile&quot;) # response is Trueclient.get_policies_list() # response is [&quot;fromfile&quot;]del client```### Update policy from URL```pythonfrom opa_client.opa import OpaClientclient = OpaClient() client.update_opa_policy_fromurl(&quot;http://opapolicyurlexample.test/example.rego&quot;, endpoint=&quot;fromurl&quot;) # response is Trueclient.get_policies_list() # response is [&quot;fromfile&quot;,&quot;fromurl&quot;]del client```### Delete policy```pythonfrom opa_client.opa import OpaClientclient = OpaClient() client.delete_opa_policy(&quot;fromfile&quot;) # response is Trueclient.get_policies_list() # response is [] del client```### Get raw data from OPA service```pythonfrom opa_client.opa import OpaClientclient = OpaClient() print(client.get_opa_raw_data(&quot;testapi/testdata&quot;))  # response is {'result': ['world', 'hello']}# You can use query params for additional info# provenance - If parameter is true, response will include build/version info in addition to the result.# metrics - Return query performance metrics in addition to result print(client.get_opa_raw_data(&quot;userinfo&quot;,query_params={&quot;provenance&quot;: True})) # response is {'provenance': {'version': '0.25.2', 'build_commit': '4c6e524', 'build_timestamp': '2020-12-08T16:56:55Z', 'build_hostname': '3bb58334a5a9'}, 'result': {'user_roles': {'alice': ['admin'], 'bob': ['employee', 'billing'], 'eve': ['customer']}}}print(client.get_opa_raw_data(&quot;userinfo&quot;,query_params={&quot;metrics&quot;: True})) # response is {'metrics': {'counter_server_query_cache_hit': 0, 'timer_rego_external_resolve_ns': 231, 'timer_rego_input_parse_ns': 381, 'timer_rego_query_compile_ns': 40173, 'timer_rego_query_eval_ns': 12674, 'timer_rego_query_parse_ns': 5692, 'timer_server_handler_ns': 83490}, 'result': {'user_roles': {'alice': ['admin'], 'bob': ['employee', 'billing'], 'eve': ['customer']}}}del client```### Save policy to file from OPA service```pythonfrom opa_client.opa import OpaClientclient = OpaClient() client.opa_policy_to_file(policy_name=&quot;fromurl&quot;,path=&quot;/your/path&quot;,filename=&quot;example.rego&quot;)  # response is Truedel client```### Delete data from OPA service```pythonfrom opa_client.opa import OpaClientclient = OpaClient() client.delete_opa_data(&quot;testapi&quot;)  # response is Truedel client```### Information about policy path and rules```pythonfrom opa_client.opa import OpaClientclient = OpaClient() client.get_policies_info()# response is {'testpolicy': {'path': ['http://your-opa-service/v1/data/play'], 'rules': ['http://your-opa-service/v1/data/play/hello']}del client```### Check permissions```pythonfrom opa_client.opa import OpaClientclient = OpaClient() permission_you_want_check = {&quot;input&quot;: {&quot;message&quot;: &quot;hello&quot;}}client.check_permission(input_data=permission_you_want_check, policy_name=&quot;testpolicy&quot;, rule_name=&quot;hello&quot;)# response is {'result': True}# You can use query params for additional info# provenance - If parameter is true, response will include build/version info in addition to the result.# metrics - Return query performance metrics in addition to result del client```### Queries a package rule with the given input data```pythonfrom opa_client.opa import OpaClientclient = OpaClient()rego = &quot;&quot;&quot;package playdefault hello = falsehello {    m := input.message    m == &quot;world&quot;}&quot;&quot;&quot;check_data = {&quot;message&quot;: &quot;world&quot;}client.check_policy_rule(input_data=check_data, package_path=&quot;play&quot;, rule_name=&quot;hello&quot;) # response {'result': True}```### Execute an Ad-hoc Query```pythonfrom opa_client.opa import OpaClientclient = OpaClient()print(client.ad_hoc_query(query_params={&quot;q&quot;: &quot;data.userinfo.user_roles[name]&quot;})) # response is {}data = {    &quot;user_roles&quot;: {        &quot;alice&quot;: [            &quot;admin&quot;        ],        &quot;bob&quot;: [            &quot;employee&quot;,            &quot;billing&quot;        ],        &quot;eve&quot;: [            &quot;customer&quot;        ]    }}print(client.update_or_create_opa_data(data, &quot;userinfo&quot;)) # response is True# execute query print(client.ad_hoc_query(query_params={&quot;q&quot;: &quot;data.userinfo.user_roles[name]&quot;})) # response is {'result': [{'name': 'eve'}, {'name': 'alice'}, {'name': 'bob'}]}#you can send body requestprint(client.ad_hoc_query(body={&quot;query&quot;: &quot;data.userinfo.user_roles[name] &quot;})) # response is {'result': [{'name': 'eve'}, {'name': 'alice'}, {'name': 'bob'}]}```### Check OPA healthy. If you want check bundels or plugins, add query params for this.```pythonfrom opa_client.opa import OpaClientclient = OpaClient()print(client.check_health()) # response is  True or Falseprint(client.check_health({&quot;bundle&quot;: True})) # response is  True or False# If your diagnostic url different than default url, you can provide it.print(client.check_health(diagnostic_url=&quot;http://localhost:8282/health&quot;))  # response is  True or Falseprint(client.check_health(query={&quot;bundle&quot;: True}, diagnostic_url=&quot;http://localhost:8282/health&quot;))  # response is  True or False```# ContributingFell free to open issue and send pull request.Thanks To [Contributors](https://github.com/Turall/OPA-python-client/graphs/contributors).Contributions of any kind are welcome!Before you start please read [CONTRIBUTING](https://github.com/Turall/OPA-python-client/blob/master/CONTRIBUTING.md)</longdescription>
</pkgmetadata>