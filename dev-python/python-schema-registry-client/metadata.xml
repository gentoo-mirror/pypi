<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Rest Client Schema Registry[![Python package](https://github.com/marcosschroh/python-schema-registry-client/actions/workflows/python-package.yml/badge.svg)](https://github.com/marcosschroh/python-schema-registry-client/actions/workflows/python-package.yml)[![GitHub license](https://img.shields.io/github/license/marcosschroh/python-schema-registry-client.svg)](https://github.com/marcosschroh/python-schema-registry-client/blob/master/LICENSE)[![codecov](https://codecov.io/gh/marcosschroh/python-schema-registry-client/branch/master/graph/badge.svg)](https://codecov.io/gh/marcosschroh/python-schema-registry-client)[![Python Version](https://img.shields.io/badge/python-3.7+-blue.svg)](https://img.shields.io/badge/python-3.7+-blue.svg)Python Rest Client to interact against [schema-registry](https://docs.confluent.io/current/schema-registry/index.html) confluent server to manage [Avro](https://docs.oracle.com/database/nosql-12.1.3.1/GettingStartedGuide/avroschemas.html) and [JSON](https://json-schema.org/) schemas resources.## Requirementspython 3.7+## Installation```bashpip install python-schema-registry-client```If you want the `Faust` functionality:```bashpip install python-schema-registry-client[faust]```Note that this will automatically add a dependency on the [faust-streaming](https://github.com/faust-streaming/faust) fork of faust. If you want to use theold faust version, simply install it manually and then install `python-schema-registry-client` without the `faust` extra enabled, the functionality willbe the same.## Client API, Serializer, Faust Integration and Schema Server description**Documentation**: [https://marcosschroh.github.io/python-schema-registry-client.io](https://marcosschroh.github.io/python-schema-registry-client)## Avro Schema Usage```pythonfrom schema_registry.client import SchemaRegistryClient, schemaclient = SchemaRegistryClient(url=&quot;http://127.0.0.1:8081&quot;)deployment_schema = {    &quot;type&quot;: &quot;record&quot;,    &quot;namespace&quot;: &quot;com.kubertenes&quot;,    &quot;name&quot;: &quot;AvroDeployment&quot;,    &quot;fields&quot;: [        {&quot;name&quot;: &quot;image&quot;, &quot;type&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;replicas&quot;, &quot;type&quot;: &quot;int&quot;},        {&quot;name&quot;: &quot;port&quot;, &quot;type&quot;: &quot;int&quot;},    ],}avro_schema = schema.AvroSchema(deployment_schema)schema_id = client.register(&quot;test-deployment&quot;, avro_schema)```or async```pythonfrom schema_registry.client import AsyncSchemaRegistryClient, schemaasync_client = AsyncSchemaRegistryClient(url=&quot;http://127.0.0.1:8081&quot;)deployment_schema = {    &quot;type&quot;: &quot;record&quot;,    &quot;namespace&quot;: &quot;com.kubertenes&quot;,    &quot;name&quot;: &quot;AvroDeployment&quot;,    &quot;fields&quot;: [        {&quot;name&quot;: &quot;image&quot;, &quot;type&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;replicas&quot;, &quot;type&quot;: &quot;int&quot;},        {&quot;name&quot;: &quot;port&quot;, &quot;type&quot;: &quot;int&quot;},    ],}avro_schema = schema.AvroSchema(deployment_schema)schema_id = await async_client.register(&quot;test-deployment&quot;, avro_schema)```## JSON Schema Usage```pythonfrom schema_registry.client import SchemaRegistryClient, schemaclient = SchemaRegistryClient(url=&quot;http://127.0.0.1:8081&quot;)deployment_schema = {    &quot;definitions&quot; : {        &quot;JsonDeployment&quot; : {            &quot;type&quot; : &quot;object&quot;,            &quot;required&quot; : [&quot;image&quot;, &quot;replicas&quot;, &quot;port&quot;],            &quot;properties&quot; : {                &quot;image&quot; :       {&quot;type&quot; : &quot;string&quot;},                &quot;replicas&quot; :    {&quot;type&quot; : &quot;integer&quot;},                &quot;port&quot; :        {&quot;type&quot; : &quot;integer&quot;}            }        }    },    &quot;$ref&quot; : &quot;#/definitions/JsonDeployment&quot;}json_schema = schema.JsonSchema(deployment_schema)schema_id = client.register(&quot;test-deployment&quot;, json_schema)```or async```pythonfrom schema_registry.client import AsyncSchemaRegistryClient, schemaasync_client = AsyncSchemaRegistryClient(url=&quot;http://127.0.0.1:8081&quot;)deployment_schema = {    &quot;definitions&quot; : {        &quot;JsonDeployment&quot; : {            &quot;type&quot; : &quot;object&quot;,            &quot;required&quot; : [&quot;image&quot;, &quot;replicas&quot;, &quot;port&quot;],            &quot;properties&quot; : {                &quot;image&quot; :       {&quot;type&quot; : &quot;string&quot;},                &quot;replicas&quot; :    {&quot;type&quot; : &quot;integer&quot;},                &quot;port&quot; :        {&quot;type&quot; : &quot;integer&quot;}            }        }    },    &quot;$ref&quot; : &quot;#/definitions/JsonDeployment&quot;}json_schema = schema.JsonSchema(deployment_schema)schema_id = await async_client.register(&quot;test-deployment&quot;, json_schema)```## Usage with dataclasses-avroschema for avro schemasYou can generate the `avro schema` directely from a python class using [dataclasses-avroschema](https://github.com/marcosschroh/dataclasses-avroschema)and use it in the API for `register schemas`, `check versions` and `test compatibility`:```pythonimport dataclassesfrom dataclasses_avroschema import AvroModel, typesfrom schema_registry.client import SchemaRegistryClientclient = SchemaRegistryClient(url=&quot;http://127.0.0.1:8081&quot;)@dataclasses.dataclassclass UserAdvance(AvroModel):    name: str    age: int    pets: typing.List[str] = dataclasses.field(default_factory=lambda: [&quot;dog&quot;, &quot;cat&quot;])    accounts: typing.Dict[str, int] = dataclasses.field(default_factory=lambda: {&quot;key&quot;: 1})    has_car: bool = False    favorite_colors: types.Enum = types.Enum([&quot;BLUE&quot;, &quot;YELLOW&quot;, &quot;GREEN&quot;], default=&quot;BLUE&quot;)    country: str = &quot;Argentina&quot;    address: str = None# register the schemaschema_id = client.register(subject, UserAdvance.avro_schema())print(schema_id)# &gt;&gt;&gt; 12result = client.check_version(subject, UserAdvance.avro_schema())print(result)# &gt;&gt;&gt; SchemaVersion(subject='dataclasses-avroschema-subject-2', schema_id=12, schema=1, version={&quot;type&quot;:&quot;record&quot; ...')compatibility = client.test_compatibility(subject, UserAdvance.avro_schema())print(compatibility)# &gt;&gt;&gt; True```### Usage with pydantic for json schemasYou can generate the json schema directely from a python class using pydantic and use it in the API for register schemas, check versions and test compatibility:```pythonimport typingfrom enum import Enumfrom pydantic import BaseModelfrom schema_registry.client import SchemaRegistryClientclient = SchemaRegistryClient(url=&quot;http://127.0.0.1:8081&quot;)class ColorEnum(str, Enum):  BLUE = &quot;BLUE&quot;  YELLOW = &quot;YELLOW&quot;  GREEN = &quot;GREEN&quot;class UserAdvance(BaseModel):    name: str    age: int    pets: typing.List[str] = [&quot;dog&quot;, &quot;cat&quot;]    accounts: typing.Dict[str, int] = {&quot;key&quot;: 1}    has_car: bool = False    favorite_colors: ColorEnum = ColorEnum.BLUE    country: str = &quot;Argentina&quot;    address: str = None# register the schemaschema_id = client.register(subject, UserAdvance.schema_json(), schema_type=&quot;JSON&quot;)print(schema_id)# &gt;&gt;&gt; 12result = client.check_version(subject, UserAdvance.schema_json(), schema_type=&quot;JSON&quot;)print(result)# &gt;&gt;&gt; SchemaVersion(subject='pydantic-jsonschema-subject', schema_id=12, schema=1, version=&lt;schema_registry.client.schema.JsonSchema object at 0x7f40354550a0&gt;)compatibility = client.test_compatibility(subject, UserAdvance.schema_json(), schema_type=&quot;JSON&quot;)print(compatibility)# &gt;&gt;&gt; True```## SerializersYou can use `AvroMessageSerializer` to encode/decode messages in `avro````pythonfrom schema_registry.client import SchemaRegistryClient, schemafrom schema_registry.serializers import AvroMessageSerializerclient = SchemaRegistryClient(&quot;http://127.0.0.1:8081&quot;)avro_message_serializer = AvroMessageSerializer(client)avro_user_schema = schema.AvroSchema({    &quot;type&quot;: &quot;record&quot;,    &quot;namespace&quot;: &quot;com.example&quot;,    &quot;name&quot;: &quot;AvroUsers&quot;,    &quot;fields&quot;: [        {&quot;name&quot;: &quot;first_name&quot;, &quot;type&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;last_name&quot;, &quot;type&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;age&quot;, &quot;type&quot;: &quot;int&quot;},    ],})# We want to encode the user_record with avro_user_schemauser_record = {    &quot;first_name&quot;: &quot;my_first_name&quot;,    &quot;last_name&quot;: &quot;my_last_name&quot;,    &quot;age&quot;: 20,}# Encode the recordmessage_encoded = avro_message_serializer.encode_record_with_schema(    &quot;user&quot;, avro_user_schema, user_record)print(message_encoded)# &gt;&gt;&gt; b'\x00\x00\x00\x00\x01\x1amy_first_name\x18my_last_name('```or with `json schemas````pythonfrom schema_registry.client import SchemaRegistryClient, schemafrom schema_registry.serializers import JsonMessageSerializerclient = SchemaRegistryClient(&quot;http://127.0.0.1:8081&quot;)json_message_serializer = JsonMessageSerializer(client)json_schema = schema.JsonSchema({  &quot;definitions&quot; : {    &quot;record:python.test.basic.basic&quot; : {      &quot;description&quot; : &quot;basic schema for tests&quot;,      &quot;type&quot; : &quot;object&quot;,      &quot;required&quot; : [ &quot;number&quot;, &quot;name&quot; ],      &quot;properties&quot; : {        &quot;number&quot; : {          &quot;oneOf&quot; : [ {            &quot;type&quot; : &quot;integer&quot;          }, {            &quot;type&quot; : &quot;null&quot;          } ]        },        &quot;name&quot; : {          &quot;oneOf&quot; : [ {            &quot;type&quot; : &quot;string&quot;          } ]        }      }    }  },  &quot;$ref&quot; : &quot;#/definitions/record:python.test.basic.basic&quot;})# Encode the recordbasic_record = {    &quot;number&quot;: 10,    &quot;name&quot;: &quot;a_name&quot;,}message_encoded = json_message_serializer.encode_record_with_schema(    &quot;basic&quot;, json_schema, basic_record)print(message_encoded)# &gt;&gt;&gt; b'\x00\x00\x00\x00\x02{&quot;number&quot;: 10, &quot;name&quot;: &quot;a_name&quot;}'```## When use this libraryUsually, we have a situation like this:![Confluent Architecture](docs/img/confluent_architecture.png)So, our producers/consumers have to serialize/deserialize messages every time that they send/receive from Kafka topics. In this picture, we can imagine a `Faust` application receiving messages (encoded with an Avro schema) and we want to deserialize them, so we can ask the `schema server` to do that for us. In this scenario, the `MessageSerializer` is perfect.Also, could be a use case that we would like to have an Application only to administrate `Avro Schemas` (register, update compatibilities, delete old schemas, etc.), so the `SchemaRegistryClient` is perfect.## Development[Poetry](https://python-poetry.org/docs/) is needed to install the dependencies and develope locally1. Install dependencies: `poetry install --all-extras`2. Code linting: `./scripts/format`3. Run tests: `./scripts/test`For commit messages we use [commitizen](https://commitizen-tools.github.io/commitizen/) in order to standardize a way of committing rules*Note*: The tests are run against the `Schema Server` using `docker compose`, so you will need`Docker` and `Docker Compose` installed.In a terminal run `docker-compose up`. Then in a different terminal run the tests:```bash./scripts/test```All additional args will be passed to pytest, for example:```bash./scripts/test ./tests/client/```### Tests usind the python shellTo perform tests using the python shell you can run the project using `docker-compose`.1. Execute `docker-compose up`. Then, the `schema registry server` will run on `http://127.0.0.1:8081`, then you can interact against it using the `SchemaRegistryClient`:1. Use the python interpreter (get a python shell typing `python` in your command line)1. Play with the `schema server````pythonfrom schema_registry.client import SchemaRegistryClient, schemaclient = SchemaRegistryClient(url=&quot;http://127.0.0.1:8081&quot;)# do some operations with the client...deployment_schema = {    &quot;type&quot;: &quot;record&quot;,    &quot;namespace&quot;: &quot;com.kubertenes&quot;,    &quot;name&quot;: &quot;AvroDeployment&quot;,    &quot;fields&quot;: [        {&quot;name&quot;: &quot;image&quot;, &quot;type&quot;: &quot;string&quot;},        {&quot;name&quot;: &quot;replicas&quot;, &quot;type&quot;: &quot;int&quot;},        {&quot;name&quot;: &quot;port&quot;, &quot;type&quot;: &quot;int&quot;},    ],}avro_schema = schema.AvroSchema(deployment_schema)client.register(&quot;test-deployment&quot;, avro_schema)# &gt;&gt;&gt;&gt; Out[5]: 1```Then, you can check the schema using your browser going to the url `http://127.0.0.1:8081/schemas/ids/1`</longdescription>
</pkgmetadata>