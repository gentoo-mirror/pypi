<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SAPPHiRE â€” A Framework for HiSPARC===================================Introduction------------.. image:: https://img.shields.io/pypi/v/hisparc-sapphire   :target: https://pypi.python.org/pypi/hisparc-sapphire/.. image:: https://img.shields.io/badge/license-GPLv3-blue   :target: https://github.com/HiSPARC/sapphire/blob/master/LICENSE.. image:: https://img.shields.io/github/workflow/status/HiSPARC/sapphire/Run%20tests   :target: https://github.com/HiSPARC/sapphire/actions.. image:: https://img.shields.io/codecov/c/github/HiSPARC/sapphire/master   :target: https://codecov.io/github/HiSPARC/sapphireSAPPHiRE is a Simulation and Analysis Program Package for `HiSPARC&lt;http://www.hisparc.nl/&gt;`_ Research and Education.  It was created in theprocess of completing the PhD research of David Fokkema.  The history of thisrepository contains the complete simulation, analysis and plot generation codethat formed the basis for David's `thesis&lt;https://www.nikhef.nl/pub/services/biblio/theses_pdf/thesis_D_Fokkema.pdf&gt;`_.Arne de Laat took over development of SAPPHiRE while working on his own PhDresearch.This repository is created with a sole purpose in mind: to enable HiSPARCstudents, teachers and researchers to easily gain access to the data andperform common simulation and analysis tasks.  Historically, starting workon the data, or extending an existing analysis code, has involvedelaborate installation instructions, heavy customizations to the software,countless hours going over opaque parts of code and a general feeling ofanguish and despair.  SAPPHiRE's ultimate goal: no more of that.Installation------------Required: Python. pip will take care of dependencies, but installingnumpy, scipy and pytables from a python distribution is preferred. We useminiconda, which includes the conda package manager.First, `install conda &lt;https://conda.pydata.org/docs/install/quick.html&gt;`_and optionally create a virtualenv::    $ conda create --name hisparc python numpy scipy pytables    $ source activate hisparcor alternatively just install the dependencies::    $ conda install numpy scipy pytables sphinxThen, using pip::    $ pip install hisparc-sapphireThis should install sapphire with all requirements. More extensiveinstallation instructions are available in the documentation in the``doc/`` directory.  You can compile them using Sphinx, or you canfollow this link: https://docs.hisparc.nl/sapphire/.To check if it worked start Python and load the package:.. code-block:: python    import sapphireYou're done!Development-----------Install python (preferably using conda) as described above but clonethe sapphire repo instead of installing using pip::    $ git clone https://github.com/HiSPARC/sapphire.git    $ cd sapphire    $ python setup.py developVersion release---------------Important: First check if the last commit passes the tests on GitHub Actions!To release a new version modify the version number in ``setup.py``. Thencreate a commit for the new release with a title like 'Bump version to vX.Y.Z'and a message that contains a summary of the most important changes since thelast release. Then tag the commit and push it to GitHub::   $ git tag vX.Y.Z   $ git push --tagsThen upload the new version to PyPI (this requires the ``wheel`` and ``twine``packages)::   $ python setup.py sdist bdist_wheel   $ twine upload dist/hisparc-sapphire-X.Y.Z.tar.gz   $ twine upload dist/hisparc_sapphire-X.Y.Z-py2.py3-none-any.whlThe latest version is then available from PyPI.</longdescription>
</pkgmetadata>