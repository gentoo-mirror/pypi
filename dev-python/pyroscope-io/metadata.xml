<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pyroscope Python Package**Pyroscope integration for Python**[![license](https://img.shields.io/badge/license-Apache2.0-blue.svg)](LICENSE) ![tests](https://github.com/pyroscope-io/pyroscope-rs/workflows/Tests/badge.svg)![build](https://github.com/pyroscope-io/pyroscope-rs/workflows/Build/badge.svg)[![PyPI version](https://badge.fury.io/py/pyroscope-io.svg)](https://badge.fury.io/py/pyroscope-io)[![PyPI](https://img.shields.io/pypi/pyversions/pyroscope-io.svg?maxAge=2592000)](https://pypi.python.org/pypi/pyroscope-io)---### What is Pyroscope[Pyroscope](https://github.com/pyroscope-io/pyroscope) is a tool that lets you continuously profile your applications to prevent and debug performance issues in your code. It consists of a low-overhead agent which sends data to the Pyroscope server which includes a custom-built storage engine. This allows for you to store and query any applications profiling data in an extremely efficient and cost effective way.### How to install Pyroscope for Python Applications```pip install pyroscope-io```### Minimal ConfigurationAdd the following code to your application. This code will initialize pyroscope profiler and start profiling:```pythonimport pyroscopepyroscope.configure(  application_name = &quot;my.python.app&quot;, # replace this with some name for your application  server_address   = &quot;http://my-pyroscope-server:4040&quot;, # replace this with the address of your pyroscope server)```### Full ConfigurationOptionally, you can configure several parameters:```pythonimport pyroscopepyroscope.configure(  application_name    = &quot;my.python.app&quot;, # replace this with some name for your application  server_address      = &quot;http://my-pyroscope-server:4040&quot;, # replace this with the address of your pyroscope server  auth_token          = &quot;{YOUR_API_KEY}&quot;, # optional, if authentication is enabled, specify the API key  sample_rate         = 100, # default is 100  detect_subprocesses = False, # detect subprocesses started by the main process; default is False  oncpu               = True # report cpu time only; default is True  native              = False # profile native extensions; default is False  gil_only            = True # only include traces for threads that are holding on to the Global Interpreter Lock; default is True  log_level           = &quot;info&quot; # default is info, possible values: trace, debug, info, warn, error and critical   tags           = {    &quot;region&quot;:   '{os.getenv(&quot;REGION&quot;)}',  })```### TagsYou can add tags to certain parts of your code:```python# You can use a wrapper:with pyroscope.tag_wrapper({ &quot;controller&quot;: &quot;slow_controller_i_want_to_profile&quot; }):  slow_code()```### ExampleCheck out this [example python project in our repository](https://github.com/pyroscope-io/pyroscope/tree/main/examples/python) for examples of how you can use these features.</longdescription>
</pkgmetadata>