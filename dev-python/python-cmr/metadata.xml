<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>This repository is a copyof [jddeal/python_cmr](https://github.com/jddeal/python-cmr/tree/ef0f9e7d67ce99d342a568bd6a098c3462df16d2) which is nolonger maintained. It has been copied here with the permission of the original author for the purpose of continuing todevelop a python library that can be used for CMR access.----Python CMR==========[![CodeQL](https://github.com/nasa/python_cmr/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/nasa/python_cmr/actions/workflows/codeql-analysis.yml)Python CMR is an easy to use wrapper to the NASAEOSDIS [Common Metadata Repository API](https://cmr.earthdata.nasa.gov/search/). This package aims to make querying theAPI intuitive and less error-prone by providing methods that will preemptively check for invalid input and handle theURL encoding the CMR API expects.Getting access to NASA's earth science metadata is as simple as this:    &gt;&gt;&gt; from cmr import CollectionQuery, GranuleQuery, ToolQuery, ServiceQuery, VariableQuery    &gt;&gt;&gt; api = CollectionQuery()    &gt;&gt;&gt; collections = api.archive_center(&quot;LP DAAC&quot;).keyword(&quot;AST_L1*&quot;).get(5)    &gt;&gt;&gt; for collection in collections:    &gt;&gt;&gt;   print(collection[&quot;short_name&quot;])    AST_L1A    AST_L1AE    AST_L1T    &gt;&gt;&gt; api = GranuleQuery()    &gt;&gt;&gt; granules = api.short_name(&quot;AST_L1T&quot;).point(-112.73, 42.5).get(3)    &gt;&gt;&gt; for granule in granules:    &gt;&gt;&gt;   print(granule[&quot;title&quot;])    SC:AST_L1T.003:2149105822    SC:AST_L1T.003:2149105820    SC:AST_L1T.003:2149155037Installation============To install from pypi:    $ pip install python-cmrTo install from github, perhaps to try out the dev branch:    $ git clone https://github.com/nasa/python_cmr    $ cd python-cmr    $ pip install .Examples========This library is broken into two classes, CollectionQuery and GranuleQuery. Each of these classes provide a large set ofmethods used to build a query for CMR. Not all parameters provided by the CMR API are covered by this version ofpython-cmr.The following methods are available to both collecton and granule queries:    # search for granules matching a specific product/short_name    &gt;&gt;&gt; api.short_name(&quot;AST_L1T&quot;)    # search for granules matching a specific version    &gt;&gt;&gt; api.version(&quot;006&quot;)    # search for granules at a specific longitude and latitude    &gt;&gt;&gt; api.point(-112.73, 42.5)    # search for granules in an area bound by a box (lower left lon/lat, upper right lon/lat)    &gt;&gt;&gt; api.bounding_box(-112.70, 42.5, -110, 44.5)    # search for granules in a polygon (these need to be in counter clockwise order and the    # last coordinate must match the first in order to close the polygon)    &gt;&gt;&gt; api.polygon([(-100, 40), (-110, 40), (-105, 38), (-100, 40)])    # search for granules in a line    &gt;&gt;&gt; api.line([(-100, 40), (-90, 40), (-95, 38)])    # search for granules in an open or closed date range    &gt;&gt;&gt; api.temporal(&quot;2016-10-10T01:02:00Z&quot;, &quot;2016-10-12T00:00:30Z&quot;)    &gt;&gt;&gt; api.temporal(&quot;2016-10-10T01:02:00Z&quot;, None)    &gt;&gt;&gt; api.temporal(datetime(2016, 10, 10, 1, 2, 0), datetime.now())    # only include granules available for download    &gt;&gt;&gt; api.downloadable()    # only include granules that are unavailable for download    &gt;&gt;&gt; api.online_only()    # search for collections/granules associated with or identified by concept IDs    # note: often the ECHO collection ID can be used here as well    # note: when using CollectionQuery, only collection concept IDs can be passed    # note: when uses GranuleQuery, passing a collection's concept ID will filter by granules associated    #       with that particular collection.    &gt;&gt;&gt; api.concept_id(&quot;C1299783579-LPDAAC_ECS&quot;)    &gt;&gt;&gt; api.concept_id([&quot;G1327299284-LPDAAC_ECS&quot;, &quot;G1326330014-LPDAAC_ECS&quot;])    # search by provider    &gt;&gt;&gt; api.provider('POCLOUD')Granule searches support these methods (in addition to the shared methods above):    # search for a granule by its unique ID    &gt;&gt;&gt; api.granule_ur(&quot;SC:AST_L1T.003:2150315169&quot;)    # search for granules from a specific orbit    &gt;&gt;&gt; api.orbit_number(5000)    # filter by the day/night flag    &gt;&gt;&gt; api.day_night_flag(&quot;day&quot;)    # filter by cloud cover percentage range    &gt;&gt;&gt; api.cloud_cover(25, 75)    # filter by specific instrument or platform    &gt;&gt;&gt; api.instrument(&quot;MODIS&quot;)    &gt;&gt;&gt; api.platform(&quot;Terra&quot;)Collection searches support these methods (in addition to the shared methods above):    # search for collections from a specific archive center    &gt;&gt;&gt; api.archive_center(&quot;LP DAAC&quot;)    # case insensitive, wildcard enabled text search through most collection fields    &gt;&gt;&gt; api.keyword(&quot;M*D09&quot;)    # search by native_id    &gt;&gt;&gt; api.native_id('native_id')    # filter by tool concept id    &gt;&gt;&gt; api.tool_concept_id('TL2092786348-POCLOUD')    # filter by service concept id    &gt;&gt;&gt; api.service_concept_id('S1962070864-POCLOUD')Service searches support the following methods    # Search via provider    &gt;&gt;&gt; api = ServiceQuery()    &gt;&gt;&gt; api.provider('POCLOUD')        # Search via native_id    &gt;&gt;&gt; api.native_id('POCLOUD_podaac_l2_cloud_subsetter')    # Search via name    &gt;&gt;&gt; api.name('PODAAC L2 Cloud Subsetter')    # Search via concept_id    &gt;&gt;&gt; api.concept_id('S1962070864-POCLOUD')Tool searches support the following methods    # Search via provider    &gt;&gt;&gt; api = ToolQuery()    &gt;&gt;&gt; api.provider('POCLOUD')    # Search via native_id    &gt;&gt;&gt; api.native_id('POCLOUD_hitide')    # Search via name    &gt;&gt;&gt; api.name('hitide')    # Search via concept_id    &gt;&gt;&gt; api.concept_id('TL2092786348-POCLOUD')Variable searches support the following methods    # Search via provider    &gt;&gt;&gt; api = VariableQuery()    &gt;&gt;&gt; api.provider('POCLOUD')    # Search via native_id    &gt;&gt;&gt; api.native_id('JASON_CS_S6A_L2_AMR_RAD_STATIC_CALIBRATION-AMR_Side_1-acc_lat')    # Search via name    &gt;&gt;&gt; api.name('/AMR_Side_1/acc_lat')    # Search via concept_id    &gt;&gt;&gt; api.concept_id('V2112019824-POCLOUD')As an alternative to chaining methods together to set the parameters of your query, a method exists to allow you to passyour parameters as keyword arguments:    # search for AST_L1T version 003 granules at latitude 42, longitude -100    &gt;&gt;&gt; api.parameters(        short_name=&quot;AST_L1T&quot;,        version=&quot;003&quot;,        point=(-100, 42)    )Note: the kwarg key should match the name of a method from the above examples, and the value should be a tuple if it's aparameter that requires multiple values.To inspect and retreive results from the API, the following methods are available:    # inspect the number of results the query will return without downloading the results    &gt;&gt;&gt; print(api.hits())    # retrieve 100 granules    &gt;&gt;&gt; granules = api.get(100)    # retrieve 25,000 granules    &gt;&gt;&gt; granules = api.get(25000)    # retrieve all the granules possible for the query    &gt;&gt;&gt; granules = api.get_all()  # this is a shortcut for api.get(api.hits())By default the responses will return as json and be accessible as a list of python dictionaries. Other formats can bespecified before making the request:    &gt;&gt;&gt; granules = api.format(&quot;echo10&quot;).get(100)The following formats are supported for both granule and collection queries:- json (default)- xml- echo10- iso- iso19115- csv- atom- kml- nativeCollection queries also support the following formats:- dif- dif10- opendata- umm\_json- umm\_json\_vX\_Y (ex: umm\_json\_v1\_9)# Developingpython-cmr uses the [poetry](https://python-poetry.org/) build system. Download and install poetry before startingdevelopment## Install DependenciesWith dev dependencies:```shellpoetry install```Without dev dependencies:```shellpoetry install --no-dev```## Update Dependencies```shellpoetry update```## Add new Dependency```shellpoetry add requests```Development-only dependency:```shellpoetry add --dev pytest```## Build project```shellpoetry build```## Lint project```shellpoetry run flake8```## Run Tests```shellpoetry run pytest```</longdescription>
</pkgmetadata>