<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>InAppPy=======|travis| |pypi| |downloads|.. |travis| image:: https://travis-ci.org/dotpot/InAppPy.svg?branch=master    :target: https://travis-ci.org/dotpot/InAppPy.. |pypi| image:: https://badge.fury.io/py/inapppy.svg    :target: https://badge.fury.io/py/inapppy.. |downloads| image:: https://img.shields.io/pypi/dm/inapppy.svg    :target: https://pypi.python.org/pypi/inapppyTable of contents=================1. Introduction2. Installation3. Google Play (`receipt` + `signature`)4. Google Play (verification)5. Google Play (verification with result)6. App Store (`receipt` + using optional `shared-secret`)7. App Store Response (`validation_result` / `raw_response`) example8. App Store, **asyncio** version (available in the inapppy.asyncio package)9. Development10. Donate1. Introduction===============In-app purchase validation library for `Apple AppStore` and `GooglePlay` (`App Store` validator have **async** support!). Works on python3.6+2. Installation===============::    pip install inapppy3. Google Play (validates `receipt` against provided `signature` using RSA)===========================================================================.. code:: python    from inapppy import GooglePlayValidator, InAppPyValidationError    bundle_id = 'com.yourcompany.yourapp'    api_key = 'API key from the developer console'    validator = GooglePlayValidator(bundle_id, api_key)    try:        # receipt means `androidData` in result of purchase        # signature means `signatureAndroid` in result of purchase        validation_result = validator.validate('receipt', 'signature')    except InAppPyValidationError:        # handle validation error        passAn additional example showing how to authenticate using dict credentials instead of loading from a file.. code:: python    import json    from inapppy import GooglePlayValidator, InAppPyValidationError    bundle_id = 'com.yourcompany.yourapp'    # Avoid hard-coding credential data in your code. This is just an example.     api_credentials = json.loads('{'                                 '   &quot;type&quot;: &quot;service_account&quot;,'                                 '   &quot;project_id&quot;: &quot;xxxxxxx&quot;,'                                 '   &quot;private_key_id&quot;: &quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;,'                                 '   &quot;private_key&quot;: &quot;-----BEGIN PRIVATE KEY-----\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXX==\n-----END PRIVATE KEY-----\n&quot;,'                                 '   &quot;client_email&quot;: &quot;XXXXXXXXX@XXXXXXXX.XXX&quot;,'                                 '   &quot;client_id&quot;: &quot;XXXXXXXXXXXXXXXXXX&quot;,'                                 '   &quot;auth_uri&quot;: &quot;https://accounts.google.com/o/oauth2/auth&quot;,'                                 '   &quot;token_uri&quot;: &quot;https://oauth2.googleapis.com/token&quot;,'                                 '   &quot;auth_provider_x509_cert_url&quot;: &quot;https://www.googleapis.com/oauth2/v1/certs&quot;,'                                 '   &quot;client_x509_cert_url&quot;: &quot;https://www.googleapis.com/robot/v1/metadata/x509/XXXXXXXXXXXXXXXXX.iam.gserviceaccount.com&quot;'                                 ' }')    validator = GooglePlayValidator(bundle_id, api_credentials)    try:        # receipt means `androidData` in result of purchase        # signature means `signatureAndroid` in result of purchase        validation_result = validator.validate('receipt', 'signature')    except InAppPyValidationError:        # handle validation error        pass4. Google Play verification===========================.. code:: python    from inapppy import GooglePlayVerifier, errors    def google_validator(receipt):        &quot;&quot;&quot;        Accepts receipt, validates in Google.        &quot;&quot;&quot;        purchase_token = receipt['purchaseToken']        product_sku = receipt['productId']        verifier = GooglePlayVerifier(            GOOGLE_BUNDLE_ID,            GOOGLE_SERVICE_ACCOUNT_KEY_FILE,        )        response = {'valid': False, 'transactions': []}        try:            result = verifier.verify(                purchase_token,                product_sku,is_subscription=True            )            response['valid'] = True            response['transactions'].append(                (result['orderId'], product_sku)            )        except errors.GoogleError as exc:            logging.error('Purchase validation failed {}'.format(exc))        return response5. Google Play verification (with result)=========================================Alternative to `.verify` method, instead of raising an error result class will be returned... code:: python    from inapppy import GooglePlayVerifier, errors    def google_validator(receipt):        &quot;&quot;&quot;        Accepts receipt, validates in Google.        &quot;&quot;&quot;        purchase_token = receipt['purchaseToken']        product_sku = receipt['productId']        verifier = GooglePlayVerifier(            GOOGLE_BUNDLE_ID,            GOOGLE_SERVICE_ACCOUNT_KEY_FILE,        )        response = {'valid': False, 'transactions': []}        result = verifier.verify_with_result(            purchase_token,            product_sku,            is_subscription=True        )        # result contains data        raw_response = result.raw_response        is_canceled = result.is_canceled        is_expired = result.is_expired        return result6. App Store (validates `receipt` using optional `shared-secret` against iTunes service)========================================================================================.. code:: python    from inapppy import AppStoreValidator, InAppPyValidationError    bundle_id = 'com.yourcompany.yourapp'    auto_retry_wrong_env_request=False # if True, automatically query sandbox endpoint if                                       # validation fails on production endpoint    validator = AppStoreValidator(bundle_id, auto_retry_wrong_env_request=auto_retry_wrong_env_request)    try:        exclude_old_transactions=False # if True, include only the latest renewal transaction        validation_result = validator.validate('receipt', 'optional-shared-secret', exclude_old_transactions=exclude_old_transactions)    except InAppPyValidationError as ex:        # handle validation error        response_from_apple = ex.raw_response  # contains actual response from AppStore service.        pass7. App Store Response (`validation_result` / `raw_response`) example====================================================================.. code:: json    {        &quot;latest_receipt&quot;: &quot;MIIbngYJKoZIhvcNAQcCoIIbj...&quot;,        &quot;status&quot;: 0,        &quot;receipt&quot;: {            &quot;download_id&quot;: 0,            &quot;receipt_creation_date_ms&quot;: &quot;1486371475000&quot;,            &quot;application_version&quot;: &quot;2&quot;,            &quot;app_item_id&quot;: 0,            &quot;receipt_creation_date&quot;: &quot;2017-02-06 08:57:55 Etc/GMT&quot;,            &quot;original_purchase_date&quot;: &quot;2013-08-01 07:00:00 Etc/GMT&quot;,            &quot;request_date_pst&quot;: &quot;2017-02-06 04:41:09 America/Los_Angeles&quot;,            &quot;original_application_version&quot;: &quot;1.0&quot;,            &quot;original_purchase_date_pst&quot;: &quot;2013-08-01 00:00:00 America/Los_Angeles&quot;,            &quot;request_date_ms&quot;: &quot;1486384869996&quot;,            &quot;bundle_id&quot;: &quot;com.yourcompany.yourapp&quot;,            &quot;request_date&quot;: &quot;2017-02-06 12:41:09 Etc/GMT&quot;,            &quot;original_purchase_date_ms&quot;: &quot;1375340400000&quot;,            &quot;in_app&quot;: [{                &quot;purchase_date_ms&quot;: &quot;1486371474000&quot;,                &quot;web_order_line_item_id&quot;: &quot;1000000034281189&quot;,                &quot;original_purchase_date_ms&quot;: &quot;1486371475000&quot;,                &quot;original_purchase_date&quot;: &quot;2017-02-06 08:57:55 Etc/GMT&quot;,                &quot;expires_date_pst&quot;: &quot;2017-02-06 01:00:54 America/Los_Angeles&quot;,                &quot;original_purchase_date_pst&quot;: &quot;2017-02-06 00:57:55 America/Los_Angeles&quot;,                &quot;purchase_date_pst&quot;: &quot;2017-02-06 00:57:54 America/Los_Angeles&quot;,                &quot;expires_date_ms&quot;: &quot;1486371654000&quot;,                &quot;expires_date&quot;: &quot;2017-02-06 09:00:54 Etc/GMT&quot;,                &quot;original_transaction_id&quot;: &quot;1000000271014363&quot;,                &quot;purchase_date&quot;: &quot;2017-02-06 08:57:54 Etc/GMT&quot;,                &quot;quantity&quot;: &quot;1&quot;,                &quot;is_trial_period&quot;: &quot;false&quot;,                &quot;product_id&quot;: &quot;com.yourcompany.yourapp&quot;,                &quot;transaction_id&quot;: &quot;1000000271014363&quot;            }],            &quot;version_external_identifier&quot;: 0,            &quot;receipt_creation_date_pst&quot;: &quot;2017-02-06 00:57:55 America/Los_Angeles&quot;,            &quot;adam_id&quot;: 0,            &quot;receipt_type&quot;: &quot;ProductionSandbox&quot;        },        &quot;latest_receipt_info&quot;: [{                &quot;purchase_date_ms&quot;: &quot;1486371474000&quot;,                &quot;web_order_line_item_id&quot;: &quot;1000000034281189&quot;,                &quot;original_purchase_date_ms&quot;: &quot;1486371475000&quot;,                &quot;original_purchase_date&quot;: &quot;2017-02-06 08:57:55 Etc/GMT&quot;,                &quot;expires_date_pst&quot;: &quot;2017-02-06 01:00:54 America/Los_Angeles&quot;,                &quot;original_purchase_date_pst&quot;: &quot;2017-02-06 00:57:55 America/Los_Angeles&quot;,                &quot;purchase_date_pst&quot;: &quot;2017-02-06 00:57:54 America/Los_Angeles&quot;,                &quot;expires_date_ms&quot;: &quot;1486371654000&quot;,                &quot;expires_date&quot;: &quot;2017-02-06 09:00:54 Etc/GMT&quot;,                &quot;original_transaction_id&quot;: &quot;1000000271014363&quot;,                &quot;purchase_date&quot;: &quot;2017-02-06 08:57:54 Etc/GMT&quot;,                &quot;quantity&quot;: &quot;1&quot;,                &quot;is_trial_period&quot;: &quot;true&quot;,                &quot;product_id&quot;: &quot;com.yourcompany.yourapp&quot;,                &quot;transaction_id&quot;: &quot;1000000271014363&quot;            }, {                &quot;purchase_date_ms&quot;: &quot;1486371719000&quot;,                &quot;web_order_line_item_id&quot;: &quot;1000000034281190&quot;,                &quot;original_purchase_date_ms&quot;: &quot;1486371720000&quot;,                &quot;original_purchase_date&quot;: &quot;2017-02-06 09:02:00 Etc/GMT&quot;,                &quot;expires_date_pst&quot;: &quot;2017-02-06 01:06:59 America/Los_Angeles&quot;,                &quot;original_purchase_date_pst&quot;: &quot;2017-02-06 01:02:00 America/Los_Angeles&quot;,                &quot;purchase_date_pst&quot;: &quot;2017-02-06 01:01:59 America/Los_Angeles&quot;,                &quot;expires_date_ms&quot;: &quot;1486372019000&quot;,                &quot;expires_date&quot;: &quot;2017-02-06 09:06:59 Etc/GMT&quot;,                &quot;original_transaction_id&quot;: &quot;1000000271014363&quot;,                &quot;purchase_date&quot;: &quot;2017-02-06 09:01:59 Etc/GMT&quot;,                &quot;quantity&quot;: &quot;1&quot;,                &quot;is_trial_period&quot;: &quot;false&quot;,                &quot;product_id&quot;: &quot;com.yourcompany.yourapp&quot;,                &quot;transaction_id&quot;: &quot;1000000271016119&quot;            }],        &quot;environment&quot;: &quot;Sandbox&quot;    }8. App Store, asyncio version (available in the inapppy.asyncio package)========================================================================.. code:: python    from inapppy import InAppPyValidationError    from inapppy.asyncio import AppStoreValidator    bundle_id = 'com.yourcompany.yourapp'    auto_retry_wrong_env_request=False # if True, automatically query sandbox endpoint if                                       # validation fails on production endpoint    validator = AppStoreValidator(bundle_id, auto_retry_wrong_env_request=auto_retry_wrong_env_request)    try:        exclude_old_transactions=False # if True, include only the latest renewal transaction        validation_result = await validator.validate('receipt', 'optional-shared-secret', exclude_old_transactions=exclude_old_transactions)    except InAppPyValidationError as ex:        # handle validation error        response_from_apple = ex.raw_response  # contains actual response from AppStore service.        pass9. Development==============.. code:: bash    # run checks and tests    tox    # setup project    make setup    # check for lint errors    make lint    # run tests    make test    # run black    make black    10. Donate==========You can support development of this project by buying me a coffee ;)+------+--------------------------------------------+| Coin | Wallet             |+======+============================================+| EUR  | https://paypal.me/LukasSalkauskas          |+------+--------------------------------------------+| DOGE | DGjSG3T6g9h2k6iSku7mtKCynCpmwowpyN         |+------+--------------------------------------------+| BTC  | 1LZAiWmLYzZae4hq3ai9hFYD3e3qcwjDsU         |+------+--------------------------------------------+| ETH  | 0xD62245986345130edE10e4b545fF577Bd5BaE3E4 |+------+--------------------------------------------+</longdescription>
</pkgmetadata>