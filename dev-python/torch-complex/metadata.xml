<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytorch_complex[![PyPI version](https://badge.fury.io/py/torch-complex.svg)](https://badge.fury.io/py/torch-complex)[![Python Versions](https://img.shields.io/pypi/pyversions/torch-complex.svg)](https://pypi.org/project/torch-complex/)[![Downloads](https://pepy.tech/badge/torch-complex)](https://pepy.tech/project/torch-complex)[![Build Status](https://travis-ci.org/kamo-naoyuki/pytorch_complex.svg?branch=master)](https://travis-ci.org/kamo-naoyuki/pytorch_complex)[![codecov](https://codecov.io/gh/kamo-naoyuki/pytorch_complex/branch/master/graph/badge.svg)](https://codecov.io/gh/kamo-naoyuki/pytorch_complex)A temporal python class for PyTorch-ComplexTensor## What is this?A Python class to perform as `ComplexTensor` in PyTorch: Nothing except for the following,```pythonclass ComplexTensor:     def __init__(self, ...):        self.real = torch.Tensor(...)        self.imag = torch.Tensor(...)```### Why?PyTorch is great DNN Python library, except that it doesn't support `ComplexTensor` in Python level.https://github.com/pytorch/pytorch/issues/755I'm looking forward to the completion, but I need `ComplexTensor` for now. I created this cheap module for the temporal replacement of it. Thus, I'll throw away this project as soon as  `ComplexTensor` is completely supported!## Requirements```Python&gt;=3.6PyTorch&gt;=1.0```## Install```pip install torch_complex```## How to use### Basic mathematical operation```pythonimport numpy as npfrom torch_complex.tensor import ComplexTensorreal = np.random.randn(3, 10, 10)imag = np.random.randn(3, 10, 10)x = ComplexTensor(real, imag)x.numpy()x + xx * xx - xx / xx ** 1.5x @ x  # Batch-matmulx.conj()x.inverse() # Batch-inverse```All are implemented with combinations of computation of `RealTensor` in python level, thus the speedã€€is not good enough.### Functional```pythonimport torch_complex.functional as FF.cat([x, x])F.stack([x, x])F.matmul(x, x)  # Same as x @ xF.einsum('bij,bjk,bkl-&gt;bil', [x, x, x])```### For DNNAlmost all methods that `torch.Tensor` has are implemented. ```pythonx.cuda()x.cpu()(x + x).sum().backward()```</longdescription>
</pkgmetadata>