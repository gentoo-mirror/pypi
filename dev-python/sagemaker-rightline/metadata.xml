<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Test-Build-Workflow](https://github.com/stiebels/sagemaker-rightline/actions/workflows/python-package.yml/badge.svg)[![codecov](https://codecov.io/gh/stiebels/sagemaker-rightline/branch/main/graph/badge.svg?token=7TCW0GP1NV)](https://codecov.io/gh/stiebels/sagemaker-rightline)[![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/stiebels/sagemaker-rightline/issues)# sagemaker-rightlineThis repository contains the source code for sagemaker-rightline, a Python package that eases validation of properties of a SageMaker Pipeline object.Note that at present this package is in an early stage of development and is not yet ready for production use. We welcome contributions!## README Content- [Features](#features)- [Usage](#usage)- [Contributing](#contributing)## Features### ‚öôÔ∏è ConfigurationThe `Configuration` class is responsible for running the `Validations` against the `Pipeline` object and returning a `Report`.The `Configuration` class is instantiated with a - `sagemaker.workflow.pipeline.Pipeline` object, and - a list of `Validations`.### ‚úîÔ∏è ValidationsA `Validation` is a class that inherits from the `Validation` base class.It is responsible for validating a single property of the `Pipeline` object.We differentiate between `Validations` that check the `Pipeline` object itself (class names beginning with &quot;Pipeline&quot;) and `Validations` that check the `Pipeline` object's `Step` objects (class name starting with &quot;Step&quot;).Depending on the specific `Validation`, a different set of `StepTypEnums` may be supported.For example, the `StepImagesExist` supports `Processing` and `Training` steps. It's a validation checks that all ImageURI thatSteps of the named types of the `Pipeline` object reference indeed exist on the target ECR.The following `Validations` are currently implemented:  - `PipelineParametersAsExpected`  - `StepImagesExist`  - `StepKmsKeyIdAsExpected`  - `StepNetworkConfigAsExpected`  - `StepLambdaFunctionExists`  - `StepRoleNameExists`  - `StepRoleNameAsExpected`  - `StepTagsAsExpected`  - `StepInputsAsExpected`  - `StepOutputsAsExpected`  - `StepOutputsMatchInputsAsExpected`  - `StepCallbackSqsQueueExists`In most cases, a `Validation` subclass requires passing a `Rule` object to its constructor.### üìú RulesA `Rule` is a class that inherits from the `Rule` base class.It is responsible for defining the rule that a `Validation` checks for.For example, passing the list of expected KMSKeyIDs and the `Rule` `Equals` to `StepKmsKeyIdAsExpected` will check thatall `Step` objects of the `Pipeline` object have a `KmsKeyId` property that matches the passed KMSKeyIDs.Note that not all `Validations` require a `Rule` object, e.g. `StepImagesExist`.The following `Rules` are currently implemented:  - `Equals`  - `Contains`All rules support the `negative` parameter (default: `False`), which allows for inverting the rule.### üìù ReportA `Report` is a class whose instance is returned by the `Configuration` class (optionally a pandas.DataFrame instead).It contains the results of the `Validations` that were run against the `Pipeline` object as well as additional informationto allow for further analysis.## Usage```pythonfrom sagemaker.processing import NetworkConfig, ProcessingInput, ProcessingOutputfrom sagemaker.workflow.parameters import ParameterStringfrom sagemaker_rightline.model import Configurationfrom sagemaker_rightline.rules import Contains, Equalsfrom sagemaker_rightline.validations import (    PipelineParametersAsExpected,    StepImagesExist,    StepKmsKeyIdAsExpected,    StepNetworkConfigAsExpected,    StepLambdaFunctionExists,    StepRoleNameExists,    StepRoleNameAsExpected,    StepTagsAsExpected,    StepInputsAsExpected,    StepOutputsAsExpected,    StepOutputsMatchInputsAsExpected,    StepCallbackSqsQueueExists,)# Import a dummy pipelinefrom tests.fixtures.pipeline import get_sagemaker_pipeline, DUMMY_BUCKETsm_pipeline = get_sagemaker_pipeline()# Define Validationsvalidations = [    StepImagesExist(),    PipelineParametersAsExpected(        parameters_expected=[            ParameterString(                name=&quot;parameter-1&quot;,                default_value=&quot;some-value&quot;,            ),        ],        rule=Contains(),    ),    StepKmsKeyIdAsExpected(        kms_key_id_expected=&quot;some/kms-key-alias&quot;,        step_name=&quot;sm_training_step_sklearn&quot;,  # optional: if not set, will check all steps        rule=Equals(),    ),    StepNetworkConfigAsExpected(        network_config_expected=NetworkConfig(            enable_network_isolation=False,            security_group_ids=[&quot;sg-1234567890&quot;],            subnets=[&quot;subnet-1234567890&quot;],        ),        rule=Equals(negative=True),    ),    StepLambdaFunctionExists(),    StepRoleNameExists(),    StepRoleNameAsExpected(        role_name_expected=&quot;some-role-name&quot;,        step_name=&quot;sm_training_step_sklearn&quot;,  # optional: if not set, will check all steps        rule=Equals(),    ),    StepTagsAsExpected(        tags_expected=[{            &quot;some-key&quot;: &quot;some-value&quot;,        }],        step_name=&quot;sm_training_step_sklearn&quot;,  # optional: if not set, will check all steps        rule=Equals(),    ),    StepInputsAsExpected(        inputs_expected=[            ProcessingInput(                source=f&quot;s3://{DUMMY_BUCKET}/input-1&quot;,                destination=&quot;/opt/ml/processing/input&quot;,                input_name=&quot;input-2&quot;,            )        ],        step_type=&quot;Processing&quot;,  # either step_type or step_name must be set to filter        rule=Contains(),    ),    StepOutputsAsExpected(        outputs_expected=[            ProcessingOutput(                source=&quot;/opt/ml/processing/output&quot;,                destination=f&quot;s3://{DUMMY_BUCKET}/output-1&quot;,                output_name=&quot;output-1&quot;,            )        ],        step_name=&quot;sm_processing_step_spark&quot;,  # optional        rule=Contains(),    ),    StepOutputsMatchInputsAsExpected(        inputs_outputs_expected=[            {                &quot;input&quot;: {                    &quot;step_name&quot;: &quot;sm_processing_step_sklearn&quot;,                    &quot;input_name&quot;: &quot;input-1&quot;,                },                &quot;output&quot;: {                    &quot;step_name&quot;: &quot;sm_processing_step_sklearn&quot;,                    &quot;output_name&quot;: &quot;output-1&quot;,                },            }        ]    ),    StepCallbackSqsQueueExists(),]# Add Validations and SageMaker Pipeline to Configurationcm = Configuration(    validations=validations,    sagemaker_pipeline=sm_pipeline,)# Run the full Configurationdf = cm.run()# Show the reportdf```![img.png](./docs/report.png)## ReleasePublishing a new version to PyPI is done via the `Release` functionality.This will trigger the `publish.yml` workflow, creating a new release with the version from the tag and publish the package to PyPI.## ContributingContributions welcome! We'll add a guide shortly.</longdescription>
</pkgmetadata>