<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- USB HID API embrava blynclight agile innovative blinkstick kuando busylight omega alpha plantronics luxafor bluetooth bt flag mute orb thingM blink(1) muteme mutesync compulab fit-statusb --&gt;![BusyLight Project Logo][LOGO]&lt;br&gt;![version][pypi-version]![monthly-downloads][monthly-downloads]![visits][visits]![supported python versions][python-versions] ![license][license]![Code style: black][code-style-black]&lt;br&gt;[![pytest-linux](https://github.com/JnyJny/busylight/actions/workflows/pytest-linux.yaml/badge.svg)](https://github.com/JnyJny/busylight/actions/workflows/pytest-linux.yaml)[![MacOS](https://github.com/JnyJny/busylight/actions/workflows/pytest-macos.yaml/badge.svg)](https://github.com/JnyJny/busylight/actions/workflows/pytest-macos.yaml)[![pytest-windows](https://github.com/JnyJny/busylight/actions/workflows/pytest-windows.yaml/badge.svg)](https://github.com/JnyJny/busylight/actions/workflows/pytest-windows.yaml)&lt;br&gt;[BusyLight for Humansâ„¢][0] gives you control of USB attached LEDlights from a variety of vendors. Lights can be controlled viathe command-line, using a HTTP API or imported directly into your ownPython project.![All Supported Lights][DEMO]Flag&lt;sup&gt;1&lt;/sup&gt;,Busylight Alpha&lt;sup&gt;2&lt;/sup&gt;,Status Indicator&lt;sup&gt;3&lt;/sup&gt;,Blink(1)&lt;sup&gt;4&lt;/sup&gt;,Mute&lt;sup&gt;5&lt;/sup&gt;,Blynclight&lt;sup&gt;6&lt;/sup&gt;.Orb&lt;sup&gt;7&lt;/sup&gt;,BusyLight Omega&lt;sup&gt;8&lt;/sup&gt;,BlinkStick Square&lt;sup&gt;9&lt;/sup&gt;,Blynclight Mini&lt;sup&gt;10&lt;/sup&gt;,MuteMe Original&lt;sup&gt;11&lt;/sup&gt;,fit-statUSB&lt;sup&gt;12&lt;/sup&gt;,MuteSync&lt;sup&gt;13&lt;/sup&gt;, Blynclight Plus&lt;sup&gt;14&lt;/sup&gt;## Features- Control lights from the [command-line][HELP].- Control lights via a [Web API][WEBAPI].- Import `busylight` into your own Python project.- Supported on MacOS and Linux- Windows support is untested but there are reports that it is working.- Supports _nine_ vendors &amp; sixteen devices:| **Vendor** | | | | ||------------:|---|---|---|---|| [**Agile Innovative**][2] | BlinkStick Square || [**Compulab**][8] | fit-statUSB || [**Embrava**][3] | Blynclight | Blynclight Mini | Blynclight Plus || [**Kuando**][4] | Busylight Alpha | BusyLight Omega || [**Luxafor**][5] | Bluetooth | Flag | Mute | Orb || [**Plantronics**][3] | Status Indicator || [**MuteMe**][7] | MuteMe Original | Mute Mini || [**MuteSync**][9] | MuteSync || [**ThingM**][6] | Blink(1) |If you have a USB light that's not on this list open an issue with: - the make and model device you want supported - where I can get one - any public hardware documentation you are aware of Or even better, open a pull request!### GratitudeThank you to [@todbot][todbot] and the very nice people at [ThingM][thingm] whograciously and unexpectedly gifted me with two `blink(1) mk3` lights!## Basic InstallInstalls only the command-line `busylight` tool and associatedmodules.```console$ python3 -m pip install busylight-for-humans ```## Web API InstallInstalls `uvicorn` and `FastAPI` in addition to `busylight`:```console$ python3 -m pip install busylight-for-humans[webapi]```## Development InstallI use the tool [poetry][poetry-docs] to manage various aspects of this project, including:- dependencies- pytest configuration- versioning- optional dependencies- virtual environment creation- building packages- publishing packages to PyPi```console$ python3 -m pip install poetry $ cd path/to/busylight$ poetry shell&lt;venv&gt; $ poetry install -E webapi&lt;venv&gt; $ which busylight&lt;venv&gt; $ which busyserve```After installing into the virtual environment, the project is now available in editable mode.  Changes made in the source will be reflected in the runtime behavior when running in the poetry initiated shell.## Linux Post-Install ActivitiesLinux controls access to USB devices via the [udev subsystem][UDEV]. Bydefault it denies non-root users access to devices it doesn'trecognize. I've got you covered!You'll need root access to configure the udev rules:```console$ busylight udev-rules -o 99-busylights.rules$ sudo cp 99-busylights.rules /etc/udev/rules.d$ sudo udevadm control -R$ # unplug/plug your light$ busylight on```## Command-Line Examples```console$ busylight on               # light turns on green$ busylight on red           # now it's shining a friendly red$ busylight on 0xff0000      # still red$ busylight on #00ff00       # now it's blue!$ busylight blink            # it's slowly blinking on and off with a red color$ busylight blink green fast # blinking faster green and off$ busylight --all on         # turn all lights on green$ busylight --all off        # turn all lights off```## HTTP API ExamplesFirst start the `busylight` API server using the `busyserv` command line interface:```console$ busyserve -DINFO:     Started server process [40064]INFO:     Waiting for application startup.INFO:     Application startup complete.INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)...```The API is fully documented and available via these URLs:- `https://localhost:8000/redoc`- `https://localhost:8000/docs`Now you can use the web API endpoints which return JSON payloads:```console  $ curl -s http://localhost:8000/lights/status | jq  ...  $ curl -s http://localhost:8000/light/0/status | jq  ...  $ curl -s http://localhost:8000/light/0/on | jq  {    &quot;light_id&quot;: 0,    &quot;action&quot;: &quot;on&quot;,    &quot;color&quot;: &quot;green&quot;,&quot;rgb&quot;: [0, 128, 0]  }  $ curl -s http://localhost:8000/light/0/off | jq  {    &quot;light_id&quot;: 0,    &quot;action&quot;: &quot;off&quot;  }  $ curl -s http://localhost:8000/light/0/on?color=purple | jq  {    &quot;light_id&quot;: 0,    &quot;action&quot;: &quot;on&quot;,    &quot;color&quot;: &quot;purple&quot;,&quot;rgb&quot;: [128, 0, 128]  }  $ curl -s http://localhost:8000/lights/on | jq  {    &quot;light_id&quot;: &quot;all&quot;,    &quot;action&quot;: &quot;on&quot;,    &quot;color&quot;: &quot;green&quot;,&quot;rgb&quot;, [0, 128, 0]  }  $ curl -s http://localhost:8000/lights/off | jq  {    &quot;light_id&quot;: &quot;all&quot;,    &quot;action&quot;: &quot;off&quot;  }  $ curl -s http://localhost:8000/lights/rainbow | jq  {    &quot;light_id&quot;: &quot;all&quot;,    &quot;action&quot;: &quot;effect&quot;,    &quot;name&quot;: &quot;rainbow&quot;  }```### AuthenticationThe API can be secured with a simple username and password through[HTTP Basic Authentication][BASICAUTH]. To require authenticationfor all API requests, set the `BUSYLIGHT_API_USER` and`BUSYLIGHT_API_PASS` environmental variables before running`busyserve`.&gt; :warning: **SECURITY WARNING**: HTTP Basic Auth sends usernames and passwords in *cleartext* (i.e., unencrypted). Use of SSL is highly recommended!## Code ExamplesAdding light support to your own python applications is easy!### Simple Case: Turn On a Single LightIn this example, we pick an Embrava Blynclight to activate withthe color white. ```pythonfrom busylight.lights.embrava import Blynclightlight = Blynclight.first_light()light.on((255, 255, 255))```Not sure what light you've got? ```pythonfrom busylight.lights import USBLightlight = USBLight.first_light()light.on((0xff, 0, 0xff))```### Slightly More ComplicatedThe `busylight` package includes a manager class that's great forworking with multiple lights or lights that require a littlemore direct intervention like the Kuando Busylight family.```pythonfrom busylight.manager import LightManagerfrom busylight.effects import Effectsmanager = LightManager()for light in manager.lights:   print(light.name)   rainbow = Effects.for_name(&quot;spectrum&quot;)(duty_cycle=0.05)manager.apply_effect(rainbow)...manager.off()```[0]: https://github.com/JnyJny/busylight&lt;!-- doc links --&gt;[2]: https://github.com/JnyJny/busylight/blob/master/docs/devices/agile_innovative.md[3]: https://github.com/JnyJny/busylight/blob/master/docs/devices/embrava.md[4]: https://github.com/JnyJny/busylight/blob/master/docs/devices/kuando.md[5]: https://github.com/JnyJny/busylight/blob/master/docs/devices/luxafor.md[6]: https://github.com/JnyJny/busylight/blob/master/docs/devices/thingm.md[7]: https://github.com/JnyJny/busylight/blob/master/docs/devices/muteme.md[8]: https://github.com/JnyJny/busylight/blob/master/docs/devices/compulab.md[9]: https://github.com/JnyJny/busylight/blob/master/docs/devices/mutesync.md[LOGO]: https://github.com/JnyJny/busylight/blob/master/docs/assets/BusyLightForHumans.png[HELP]: https://github.com/JnyJny/busylight/blob/master/docs/busylight.1.md[WEBAPI]: https://github.com/JnyJny/busylight/blob/master/docs/busylight_api.pdf&lt;!-- [DEMO]: demo/demo-updated.gif --&gt;[DEMO]: https://github.com/JnyJny/busylight/blob/master/docs/assets/HerdOfLights.png[BASICAUTH]: https://en.wikipedia.org/wiki/Basic_access_authentication[UDEV]: https://en.wikipedia.org/wiki/Udev[todbot]: https://github.com/todbot[thingm]: https://thingm.com&lt;!-- badges --&gt;[code-style-black]: https://img.shields.io/badge/code%20style-black-000000.svg[pypi-version]: https://img.shields.io/pypi/v/busylight-for-humans[python-versions]: https://img.shields.io/pypi/pyversions/busylight-for-humans[license]: https://img.shields.io/pypi/l/busylight-for-humans[dependencies]: https://img.shields.io/librariesio/github/JnyJny/busylight[monthly-downloads]: https://img.shields.io/pypi/dm/busylight-for-humans[poetry-docs]: https://python-poetry.org/docs/[visits]: https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FJnyJny%2Fbusylight&amp;count_bg=%2379C83D&amp;title_bg=%23555555&amp;icon=&amp;icon_color=%23E7E7E7&amp;title=Visits&amp;edge_flat=false</longdescription>
</pkgmetadata>