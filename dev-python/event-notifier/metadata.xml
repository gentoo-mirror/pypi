<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Upload Python Package](https://github.com/vitalij555/event-notifier/workflows/Upload%20Python%20Package/badge.svg)[![PyPi version](https://img.shields.io/pypi/v/event-notifier.svg?style=flat-square) ](https://pypi.python.org/pypi/event-notifier) [![Supported Python versions](https://img.shields.io/pypi/pyversions/event-notifier.svg?style=flat-square) ](https://pypi.org/project/event-notifier) [![License](https://img.shields.io/pypi/l/event-notifier.svg?style=flat-square) ](https://choosealicense.com/licenses) [![Downloads](https://pepy.tech/badge/event-notifier)](https://pepy.tech/project/event-notifier) [![codecov](https://codecov.io/gh/vitalij555/event-notifier/branch/master/graph/badge.svg)](https://codecov.io/gh/vitalij555/event-notifier)# event-notifierLibrary providing event registration and routing infrastructure.## Contents- [Background](#background)- [Installation](#installation)- [Example](#example)- [Constructor](#constructor)- [API Overview](#api-overview)- [Tests](#tests)- [License](#license)- [Contributing](#contribute)## BackgroundThis is an implementation of event notifier (also known as emitter or dispatcher) allowing to notify one or more subscribers of an event that just occurred.Any python object inheriting from or containing a notifier can act as event sender and any callable object can act as event receiver.Allows to register receivers having variable number of arguments. ## Installation```pip install -U event-notifier```## Example```pythonfrom EventNotifier import Notifier# Imagine we have a piece of code which is interested in some events # occurring in other pieces of the code...class FileWatchDog():def onOpen(self, fileName, openMode):print(f&quot;File {fileName} opened with {openMode} mode&quot;)def onClose(self, fileName):print(f&quot;File {fileName} closed&quot;)watchDog = FileWatchDog()# Create Notifier object by providing a list of events other components might be interesting innotifier = Notifier([&quot;onCreate&quot;, &quot;onOpen&quot;, &quot;onModify&quot;, &quot;onClose&quot;, &quot;onDelete&quot;])# From now other objects are able to subscribe to events we've declared above# Its important to use the same name as it was declared while creating Notifier object# Consider using constant declarations or enums in order to avoid typos herenotifier.subscribe(&quot;onOpen&quot;,  watchDog.onOpen)notifier.subscribe(&quot;onClose&quot;, watchDog.onClose)notifier.raise_event(&quot;onOpen&quot;, openMode=&quot;w+&quot;, fileName=&quot;test_file.txt&quot;)  # order of named parameters is not importantnotifier.raise_event(&quot;onClose&quot;, fileName=&quot;test_file.txt&quot;)```Will produce:```console$ python test.pyFile test_file.txt opened with w+ modeFile test_file.txt closed```## Constructor```pythonNotifier(eventNames: list, logger=None)```**Parameters**- `eventNames` - `list of any` - mandatory, provides list of all supported events. Values provided here can be used for raising events later. Values provided in this list can be of any type.- `logger` - `object` - optional, logger supporting standard logging methods (info, warning error, etc..), default: `None`. If None is provided, then internal logger outputting warnings and errors to console will be created.**Example**Any object can be used as event name. Example below illustrates that:```pythonfrom EventNotifier import Notifierclass Box:    def __init__(self, name):        self.name = namea = Box(&quot;name_BoxA&quot;)b = Box(&quot;name_BoxB&quot;)notifier = Notifier([&quot;onCreate&quot;, 5, 22.58, &quot;onDelete&quot;, a, b])notifier.subscribe(&quot;onCreate&quot;, onCreateCallback)notifier.subscribe(5, on5Callback)notifier.subscribe(22.58, onFloatCallback)notifier.subscribe(a, onBoxACallback)notifier.subscribe(b, onBoxBCallback)notifier.raise_event(5, &quot;event: ! 5 !&quot;)  # on5Callback will be called with &quot;event: ! 5 !&quot; as parameternotifier.raise_event(22.58, &quot;event: ! 22.58 !&quot;)    # onFloatCallback will be called with &quot;event: ! 22.58 !&quot; as parameternotifier.raise_event(b, &quot;event: Box b&quot;)   # onBoxBCallback will be called with &quot;event: Box b&quot; as parameter```## API Overview### subscribe(eventName, subscriber) **Description**Adds callable subscribers interested in some particular event. **Parameters**- `eventName` - `any` - mandatory, specifies name of the event, subscriber will be interested in.- `subscriber` - `any` - mandatory, callable subscriber (function, class method or class with __call__ implemented)**Example**```pythonfrom EventNotifier import Notifierclass CallableFileWatchdog:def __init__(self, pathToWatch):self.pathToWatch = pathToWatchdef __call__(self, *args, **kwargs):if len(args) &gt; 0:print(f&quot;Event {args[0]} at path {self.pathToWatch} is called with following simple args: {[*args]} and with following keyword args: { {**kwargs} }&quot;)callableWatchdog = CallableFileWatchdog(&quot;some\path\here&quot;)notifier = Notifier([&quot;onCreate&quot;, &quot;onOpen&quot;, &quot;onModify&quot;, &quot;onClose&quot;, &quot;onDelete&quot;])notifier.subscribe(&quot;onCreate&quot;, callableWatchdog)notifier.subscribe(&quot;onOpen&quot;,   callableWatchdog)notifier.raise_event(&quot;onCreate&quot;, &quot;onCreate&quot;, fileName=&quot;test_file.txt&quot;)notifier.raise_event(&quot;onOpen&quot;, &quot;onOpen&quot;, openMode=&quot;w+&quot;, fileName=&quot;test_file.txt&quot;) ```gives:```consoleEvent onCreate at path some\path\here is called with following simple args: ['onCreate'] and with following keyword args: {'fileName': 'test_file.txt'}Event onOpen at path some\path\here is called with following simple args: ['onOpen'] and with following keyword args: {'openMode': 'w+', 'fileName': 'test_file.txt'}```### subscribe_to_all(subscriber):**Description**Method allows to register one callable for all events supported by notifier.**Parameters**- `subscriber` - `callable` - mandatory, will be called when event rises.**Example**```pythonfrom EventNotifier import Notifierclass CallableFileWatchdog:    def __init__(self, pathToWatch):self.pathToWatch = pathToWatch    def __call__(self, *args, **kwargs):if len(args) &gt; 0:    print \(f&quot;Event {args[0]} at path {self.pathToWatch} is called with following simple args: {[*args]} and with following keyword args: { {**kwargs} }&quot;)callable_watchog = CallableFileWatchdog(&quot;some\\path\\here&quot;)notifier = Notifier([&quot;onCreate&quot;, &quot;onOpen&quot;, &quot;onModify&quot;, &quot;onClose&quot;, &quot;onDelete&quot;])notifier.subscribe_to_all(callable_watchog)notifier.raise_event(&quot;onCreate&quot;, &quot;onCreate&quot;, fileName=&quot;test_file.txt&quot;)notifier.raise_event(&quot;onOpen&quot;, &quot;onOpen&quot;, openMode=&quot;w+&quot;, fileName=&quot;test_file.txt&quot;)```Console output:```consoleEvent onCreate at path some\path\here is called with following simple args: ['onCreate'] and with following keyword args: {'fileName': 'test_file.txt'}Event onOpen at path some\path\here is called with following simple args: ['onOpen'] and with following keyword args: {'openMode': 'w+', 'fileName': 'test_file.txt'}```### get_registered_events():**Description**Returns all supported events as a list.**Example**```pythonfrom EventNotifier import Notifiernotifier = Notifier([&quot;onCreate&quot;, &quot;onOpen&quot;, &quot;onModify&quot;, &quot;onClose&quot;, &quot;onDelete&quot;])print(notifier.get_registered_events())```will output:```console['onCreate', 'onOpen', 'onModify', 'onClose', 'onDelete']```### raise_event(eventName, *args, **kwargs)**Description**Rises specific event registered during initialization.**Parameters**- `eventName` - `any` - mandatory, name of the event to be raised.- `*args` - `list` - optional, all simple parameters we want to pass to our subscribers (param1, param2, param3...).- `**kwargs` - `dictionary` - optional, all named parameters we want to pass (param1=value1, param2=value2, param3=value3) **Example**Check subscribe method's example link [above](#subscribeeventname-subscriber).### remove_subscribers_by_event_name(event_name)**Description**Removes all subscribers for the specified event_name**Parameters**- `eventName` - `any` - mandatory, name of the event we want to remove subscribers for.**Example**```pythonfrom EventNotifier import Notifierclass FileWatchDog():    def onOpen(self, fileName, openMode):        print(f&quot;File {fileName} opened with {openMode} mode&quot;)    def onClose(self, fileName):        print(f&quot;File {fileName} closed&quot;)def onOpenStandaloneMethod(fileName, openMode):    print(f&quot;StandaloneMethod: File {fileName} opened with {openMode} mode&quot;)watchDog = FileWatchDog()notifier = Notifier([&quot;onCreate&quot;, &quot;onOpen&quot;, &quot;onModify&quot;, &quot;onClose&quot;, &quot;onDelete&quot;])notifier.subscribe(&quot;onOpen&quot;, watchDog.onOpen)notifier.subscribe(&quot;onOpen&quot;, onOpenStandaloneMethod)notifier.subscribe(&quot;onClose&quot;, watchDog.onClose)print(&quot;\nAfter subscription:&quot;)notifier.raise_event(&quot;onOpen&quot;, openMode=&quot;w+&quot;, fileName=&quot;test_file.txt&quot;)  # order of named parameters is not importantnotifier.raise_event(&quot;onClose&quot;, fileName=&quot;test_file.txt&quot;)notifier.remove_subscribers_by_event_name(&quot;onOpen&quot;)print(&quot;\nAfter removal of onOpen subscribers:&quot;)notifier.raise_event(&quot;onOpen&quot;, openMode=&quot;w+&quot;, fileName=&quot;test_file.txt&quot;)  # order of named parameters is not importantnotifier.raise_event(&quot;onClose&quot;, fileName=&quot;test_file.txt&quot;)notifier.remove_subscribers_by_event_name(&quot;onClose&quot;)print(&quot;\nAfter removal of onClose subscribers:&quot;)notifier.raise_event(&quot;onOpen&quot;, openMode=&quot;w+&quot;, fileName=&quot;test_file.txt&quot;)  # order of named parameters is not importantnotifier.raise_event(&quot;onClose&quot;, fileName=&quot;test_file.txt&quot;)```will output:```consoleAfter subscription:File test_file.txt opened with w+ modeStandaloneMethod: File test_file.txt opened with w+ modeFile test_file.txt closedAfter removal of onOpen subscribers:File test_file.txt closedAfter removal of onClose subscribers:```### remove_all_subscribers()**Description**Removes all subscribers for all events**Example**```pythonfrom EventNotifier import Notifierclass FileWatchDog():    def onOpen(self, fileName, openMode):        print(f&quot;File {fileName} opened with {openMode} mode&quot;)    def onClose(self, fileName):        print(f&quot;File {fileName} closed&quot;)def onOpenStandaloneMethod(fileName, openMode):    print(f&quot;StandaloneMethod: File {fileName} opened with {openMode} mode&quot;)watchDog = FileWatchDog()notifier = Notifier([&quot;onCreate&quot;, &quot;onOpen&quot;, &quot;onModify&quot;, &quot;onClose&quot;, &quot;onDelete&quot;])notifier.subscribe(&quot;onOpen&quot;, watchDog.onOpen)notifier.subscribe(&quot;onOpen&quot;, onOpenStandaloneMethod)notifier.subscribe(&quot;onClose&quot;, watchDog.onClose)print(&quot;\nAfter subscription:&quot;)notifier.raise_event(&quot;onOpen&quot;, openMode=&quot;w+&quot;, fileName=&quot;test_file.txt&quot;)notifier.raise_event(&quot;onClose&quot;, fileName=&quot;test_file.txt&quot;)notifier.remove_all_subscribers()print(&quot;\nAfter removal of all subscribers:&quot;)notifier.raise_event(&quot;onOpen&quot;, openMode=&quot;w+&quot;, fileName=&quot;test_file.txt&quot;)notifier.raise_event(&quot;onClose&quot;, fileName=&quot;test_file.txt&quot;)```will give:```consoleAfter subscription:File test_file.txt opened with w+ modeStandaloneMethod: File test_file.txt opened with w+ modeFile test_file.txt closedAfter removal of all subscribers:```## Tests[PyTest][pytest] is used for tests. Python 2 is not supported.**Install PyTest**```sh$ pip install pytest```**Run tests**```sh$ pytest test/*```[pytest]: http://pytest.org/**Check test coverage**In order to generate test coverage report install pytest-cov:```sh$ pip install pytest-cov```Then inside test subdirectory call: ```shpytest --cov=../EventNotifier --cov-report=html```## LicenseLicenseCopyright (C) 2020 Vitalij Gotovskijevent-notifier binaries and source code can be used according to the MIT License## ContributeTBD</longdescription>
</pkgmetadata>