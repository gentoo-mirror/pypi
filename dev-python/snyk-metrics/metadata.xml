<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># snyk-python-metricsPython library to interact transparently with Prometheus, Pushgateway andDogstatsd.## UsageThe client can be used with two different approaches, one more opinionated andstructured, with all the metrics created and registered at the creation of theclient, and one more flexible, where metrics can be registered at any time.The first approach should help keeping the application using this client cleanerand the metrics management in a centralised place.### Example 1 - &quot;Locked Registry&quot;In this example all the metrics used by the application are registered as partof the client initialisation.Example:```python# my_app/settings.pyfrom snyk_metrics import initialise, Countercounter_1 = Counter(    name=&quot;my_app_counter&quot;,    documentation=&quot;Simple example counter&quot;,    label_names=None,)counter_2 = Counter(    name=&quot;my_app_requests&quot;,    documentation=&quot;Requests per endpoint and method&quot;,    label_names=(&quot;endpoint&quot;, &quot;method&quot;),)metrics = [counter_1, counter_2]initialise(metrics=metrics, prometheus_enabled=True)``````python# my_app/api/endpoints.pyfrom my_app.metrics import counter_1, counter_2def my_function():    counter_1.increment()def foo_get_endpoint():    counter_2.increment()```### Example 2 - &quot;Unstructured flexibility&quot;In this example metrics are created and used within the same file. It could makeit harder to keep track of all the metrics in the application, but it can alsohelp in keeping them closer to the part of the project where the metrics areused.```python# my_app/settings.pyfrom snyk_metrics import initialiseinitialise(prometheus_enabled=True, lock_registry=False)``````python# my_app/api/endpoints.pyfrom snyk_metrics import Countercounter_1 = Counter(    name=&quot;my_app_counter&quot;,    documentation=&quot;Simple example counter&quot;,    label_names=None,)counter_2 = Counter(    name=&quot;my_app_requests&quot;,    documentation=&quot;Requests per endpoint and method&quot;,    label_names=(&quot;endpoint&quot;, &quot;method&quot;),)def my_function():    counter_1.increment()def foo_get_endpoint():    counter_2.increment()```</longdescription>
</pkgmetadata>