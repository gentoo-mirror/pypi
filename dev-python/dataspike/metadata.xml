<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dataspike python client libraryThe official wrapper for Dataspike API## Installation`pip install dataspike`## Getting startedLibrary offers well typed async API powered by pydantic and aiohttp.```pythonfrom dataspike import *async with Api(&quot;&lt;YOUR_API_TOKEN&gt;&quot;) as api:    verification = await api.verification.create(checks=[CheckType.Passport, CheckType.Selfie])    await api.document.upload(verification.applicant_id, DocumentType.Passport, open('passport.jpg', 'rb'))    await api.document.upload(verification.applicant_id, DocumentType.Selfie, open('selfie.jpg', 'rb'))    await api.verification.proceed(verification.id)    applicants = await api.applicant.list()    verifications = await api.verification.list()```### ResourcesFull reference and documentation about available resources can be found at our [official documentation](https://docs.dataspike.io)Currently library provides following resources - AML `api.aml`- Applicant `api.applicant`- Verification `api.verification`- SDK `api.sdk`- Documents `api.document`### TimeoutsLibrary uses aiohttp ClientSession. To pass timeouts use keyword arguments which will passed to ClientSession constructorCheck out [aiohttp client reference](https://docs.aiohttp.org/en/stable/client_reference.html) for details.Example ```pythonfrom dataspike import Apiasync with Api('&lt;API_TOKEN&gt;', read_timeout=2) as api:    ...```### Errors- `pydantic.ValidationError` is raised when type parameters not match with expected for API func.- `asyncio.TimeoutError` is raised if a timeout occurs.- `dataspike.errors.UnexpectedResponseStatus` is raised whenever dataspike returns unexpected response status.### Sync API wrapperWe recommend use async api directly. But if you really want to use sync apilibrary offers `SyncApi` wrapper. Take note it build on top of async API and still use asyncio under the hood.Example```pythonfrom dataspike import SyncApiwith SyncApi(&quot;&lt;API_TOKEN&gt;&quot;) as api:    applicants = api.applicant.list()```</longdescription>
</pkgmetadata>