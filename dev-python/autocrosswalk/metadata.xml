<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># autocrosswalk: A generic approach to crosswalkingThis library automates crosswalks from one dataframe to another.Please contact the authors below if you find any bugs or have any suggestions for improvement. Thank you!Author: Nicolaj Søndergaard Mühlbach (n.muhlbach at gmail dot com, muhlbach at mit dot edu) ## Code dependenciesThis code has the following dependencies:- Python &gt;=3.6- pandas &gt;=1.3## InstallationThere are no heavy dependencies for this library to work. We have included an example that requires a parquet reader, e.g., `pyarrow`, `brotli`, or `fastparquet`. One needs to have one of them installed in order to use the example data provided.Otherwise, go ahead and install by `pip install autocrosswalk`.## Usage```python# Librariesfrom autocrosswalk.main import AutoCrosswalkfrom autocrosswalk.tools import load_example_data# Load example datadata = load_example_data()# Separate into old and new data, i.e., we crosswalk the 'data_from' to 'data_to' data_from = data.loc[data[&quot;DB&quot;]==&quot;db_20_0&quot;]data_to = data.loc[data[&quot;DB&quot;]==&quot;db_26_1&quot;]# Instantiateautocrosswalk = AutoCrosswalk(n_best_match=3,                              prioritize_exact_match=True,                              enforce_completeness=True,                              verbose=2)# Generate crosswalk filedf_crosswalk = autocrosswalk.generate_crosswalk(df_from=data_from,                                                df_to=data_to,                                                numeric_key=['O*NET-SOC Code'],                                                text_key=['Job title'])# Perform crosswalkdf_updated = autocrosswalk.perform_crosswalk(crosswalk=df_crosswalk,                                             df=data_from,                                             values=[&quot;Data Value&quot;],                                             by=['Date', 'DB',                                                 'Category', 'Element ID',                                                 'Element Name','Element description'])# Check if number of unique keys matchprint(len(df_updated[&quot;O*NET-SOC Code&quot;].unique()) == len(data_to[&quot;O*NET-SOC Code&quot;].unique()))print(len(df_updated[&quot;Job title&quot;].unique()) == len(data_to[&quot;Job title&quot;].unique()))# Now, 'df_updated' has all new keys from 'data_to'!```&lt;!-- ## ExampleWe provide an example script in `demo.py`. --&gt;</longdescription>
</pkgmetadata>