<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TomSelect for Django (MIZDB)Django autocomplete widgets and views using [TomSelect](https://tom-select.js.org/).Note that this was written specifically with the [MIZDB](https://github.com/Actionb/MIZDB) app in mind - it may not apply to your app.&lt;!-- TOC --&gt;* [TomSelect for Django (MIZDB)](#tomselect-for-django-mizdb)  * [Installation](#installation)  * [Usage](#usage)  * [Widgets](#widgets)    * [MIZSelect](#mizselect)    * [MIZSelectTabular](#mizselecttabular)  * [Function &amp; Features](#function--features)    * [Searching](#searching)    * [Option creation](#option-creation)      * [AJAX request](#ajax-request)    * [Changelist link](#changelist-link)    * [Filter against values of another field](#filter-against-values-of-another-field)  * [Development &amp; Demo](#development--demo)&lt;!-- TOC --&gt;----## InstallationInstall:```bashpip install -U mizdb-tomselect```## UsageAdd to installed apps:```pythonINSTALLED_APPS = [    ...    &quot;mizdb_tomselect&quot;]```Configure an endpoint for autocomplete requests:```python# urls.pyfrom django.urls import pathfrom mizdb_tomselect.views import AutocompleteViewurlpatterns = [    ...    path('autocomplete/', AutocompleteView.as_view(), name='my_autocomplete_view')]```Use the widgets in a form.```pythonfrom django import formsfrom mizdb_tomselect.widgets import MIZSelect, MIZSelectTabularfrom .models import City, Personclass MyForm(forms.Form):    city = forms.ModelChoiceField(        City.objects.all(),        widget=MIZSelect(City, url='my_autocomplete_view'),    )    # Display results in a table, with additional columns for fields     # 'first_name' and 'last_name':    person = forms.ModelChoiceField(        Person.objects.all(),        widget=MIZSelectTabular(            Person,            url='my_autocomplete_view',            search_lookup=&quot;full_name__icontains&quot;,            # for extra columns pass a mapping of model field: column header label            extra_columns={'first_name': &quot;First Name&quot;, &quot;last_name&quot;: &quot;Last Name&quot;},            # The column header label for the labelField column            label_field_label='Full Name',        ),    )``` NOTE: Make sure to include [bootstrap](https://getbootstrap.com/docs/5.2/getting-started/download/) somewhere. For example in the template:```html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;MIZDB TomSelect Demo&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65&quot; crossorigin=&quot;anonymous&quot;&gt;    {{ form.media }}&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt;    &lt;form&gt;        {% csrf_token %}        {{ form.as_div }}        &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Save&lt;/button&gt;    &lt;/form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;```----## WidgetsThe widgets pass attributes necessary to make autocomplete requests to theHTML element via the dataset property. The TomSelect element is then initializedfrom the attributes in the dataset property.### MIZSelectBase autocomplete widget. The arguments of MIZSelect are:| Argument       | Default value                          | Description                                                                                    ||----------------|----------------------------------------|------------------------------------------------------------------------------------------------|| model          | **required**                           | the model class that provides the choices                                                      || url            | `&quot;autocomplete&quot;`                       | URL pattern name of the autocomplete view                                                      || value_field    | `f&quot;{model._meta.pk.name}&quot;`             | model field that provides the value of an option                                               || label_field    | `getattr(model, &quot;name_field&quot;, &quot;name&quot;)` | model field that provides the label of an option                                               || search_lookup  | `f&quot;{label_field}__icontains&quot;`          | the lookup to use when filtering the results                                                   || create_field   |                                        | model field to create new objects with ([see below](#ajax-request))                            || multiple       | False                                  | if True, allow selecting multiple options                                                      || changelist_url |                                        | URL name of the changelist view for this model ([see below](#changelist-link))                 || add_url        |                                        | URL name of the add view for this model([see below](#option-creation))                         || filter_by      |                                        | a 2-tuple defining an additional filter ([see below](#filter-against-values-of-another-field)) |### MIZSelectTabularThis widget displays the results in tabular form. A table header will be addedto the dropdown. By default, the table contains two columns: one column for the choice value (commonly the &quot;ID&quot; of the option) and one column for the choice label (the human-readable part of the choice).![Tabular select preview](./assets/mizselect_tabular.png &quot;Tabular select preview&quot;)MIZSelectTabular has the following additional arguments:| Argument           | Default value                   | Description                         ||--------------------|---------------------------------|-------------------------------------|| extra_columns      |                                 | a mapping for additional columns    || value_field_label  | `f&quot;{value_field.title()}&quot;`      | table header for the value column   || label_field_label  | `f&quot;{model._meta.verbose_name}&quot;` | table header for the label column   |#### Adding more columns To add more columns, pass a `result attribute name: column label` mapping to the widgetargument `extra_columns`.The column label is the table header label for a given column.  The attribute name tells TomSelect what value to look up on a result for the column.**Important**: that means that the result visible to TomSelect must have an attributeor property with that name or the column will remain empty. The results for TomSelect are created by the view calling `values()` on the result queryset, so you must make sure that the attribute name is availableon the view's root queryset as either a model field or as an annotation.----## Function &amp; Features### SearchingThe AutocompleteView filters the result queryset against the `search_lookup`passed to the widget. The default value for the lookup is `name__icontains`.Overwrite the `AutocompleteView.search` method to modify the search process.```pythonclass MyAutocompleteView(AutocompleteView):        def search(self, request, queryset, q):        # Filter using your own queryset method:        return queryset.search(q)```### Option creationTo enable option creation in the dropdown, pass the URL pattern name of the add page of the given model to the widget. This will add an 'Add' button to thebottom of the dropdown.```python# urls.pyurlpatterns = [    ...    path('autocomplete/', AutocompleteView.as_view(), name='my_autocomplete_view'),    path('city/add/', CityAddView.as_view(), name='city_add'),]# forms.pywidget = MIZSelect(City, url='my_autocomplete_view', add_url='city_add')```Clicking on that button sends the user to the add page of the model.#### AJAX requestIf `create_field` was also passed to the widget, clicking on the button willcreate a new object using an AJAX POST request to the autocomplete URL. Theautocomplete view will use the search term that the user put in on the`create_field` to create the object:```pythonclass AutocompleteView:        def create_object(self, data):        &quot;&quot;&quot;Create a new object with the given data.&quot;&quot;&quot;        return self.model.objects.create(**{self.create_field: data[self.create_field]})```Override the view's `create_object` method to change the creation process.### Changelist linkThe dropdown will include a link to the changelist of the given model if youpass in the URL pattern name of the changelist view.```python# urls.pyurlpatterns = [    ...    path('autocomplete/', AutocompleteView.as_view(), name='my_autocomplete_view'),    path('city/change/', CityChangelistView.as_view(), name='city_changelist'),]# forms.pywidget = MIZSelect(City, url='my_autocomplete_view', changelist_url='city_changelist')```### Filter against values of another fieldUse the `filter_by` argument to restrict the available options to the value of another field. The parameter must be a 2-tuple: `(name_of_the_other_form_field, django_field_lookup)````python# models.pyclass Person(models.Model):    name = models.CharField(max_length=50)    city = models.ForeignKey(&quot;City&quot;, on_delete=models.SET_NULL, blank=True, null=True)    class City(models.Model):    name = models.CharField(max_length=50)    is_capitol = models.BooleanField(default=False)# forms.pyclass PersonsFromCapitolsForm(forms.Form):    capitol = forms.ModelChoiceField(queryset=City.objects.filter(is_capitol=True))    person = forms.ModelChoiceField(        queryset=Person.objects.all(),        widget=MIZSelect(            Person,            filter_by=(&quot;capitol&quot;, &quot;city_id&quot;)        )    )```This will result in the Person result queryset to be filtered against `city_id` with the current value of the `capitol` formfield.  NOTE: When using `filter_by`, the declaring element now **requires** that the other field provides a value. If the other field does not have a value, the search will not return any results.----## Development &amp; Demo```bashpython3 -m venv venvsource venv/bin/activatemake init```Then see the demo for a preview: `python demo/manage.py runserver`Run tests with `make test` or `make tox`. To install required browsers for playwright: `playwright install`.See the makefile for other commands.</longdescription>
</pkgmetadata>