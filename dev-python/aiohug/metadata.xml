<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aiohug======|version| |pipeline status| |coverage report|.. |pipeline status| image:: https://gitlab.com/nonamenix/aiohug/badges/master/pipeline.svg   :target: https://gitlab.com/nonamenix/aiohug/commits/master.. |coverage report| image:: https://gitlab.com/nonamenix/aiohug/badges/master/coverage.svg   :target: https://gitlab.com/nonamenix/aiohug/commits/master.. |version| image:: https://badge.fury.io/py/aiohug.svg   :target: https://badge.fury.io/py/aiohugGoals:======-  Unpack aiohttp (&gt;=3.1) request to arguments with annotations-  Validate handlers arguments-  Generate swagger specificationPosts:======- `Meet the aiohug`_ .. _`Meet the aiohug`: https://github.com/nonamenix/notes/blob/master/notes/20190309_aiohug.mdExamples========Arguments from path and query-----------------------------.. code:: python   from aiohttp import web   from aiohug import RouteTableDef   routes = RouteTableDef()   @routes.get(&quot;/hello/{name}/&quot;)   async def hello(name: fields.String(), greeting: fields.String() = &quot;Hello&quot;):       return {&quot;msg&quot;: f&quot;{greeting}, {name}&quot;}   app = web.Application()   app.add_routes(routes)   if __name__ == &quot;__main__&quot;:       web.run_app(app)There is no ``request`` object in handler signature anymore - only required arguments.   Body with schema----------------.. code:: python   from aiohttp import web   from aiohug import RouteTableDef   routes = RouteTableDef()   class PayloadSchema(Schema):       count = fields.Int()   @routes.get(&quot;/&quot;)   async def with_body(body: PayloadSchema()):       return body   app = create_app()   app.add_routes(routes)   client = await test_client(app)   resp = await client.get(&quot;/&quot;, json={&quot;count&quot;: &quot;5&quot;, &quot;another&quot;: 7})   assert await resp.json() == {&quot;count&quot;: 5}Another shortcuts-----------------.. code:: python    @routes.post(&quot;/ping/&quot;)   async def ping():     return 201, &quot;pong&quot;Swagger-------Use aiohug_swagger_ package... _aiohug_swagger: https://github.com/nonamenix/aiohug_swaggerDecorators----------Because of the way ``aiohttp`` routing works all decorators to resource handlersmust be applied **BEFORE** ``aiohug``'s routing decorator, i.e... code:: python   def some_decorator(func):    @wraps(func)    def wrapper(request, *args, **kwargs):        # Some logic for decorator        return func(*args, **kwargs)    return wrapper    @routes.get(&quot;/ping/&quot;)    @some_decorator    async def hello():        return &quot;pong&quot;Moreover, make sure to decorate wrapper functions with ``wraps`` decorator from ``functools`` module- otherwise ``aiohug`` won't be able to access original handler's arguments and annotations.Why aiohug?===========It's just hug_ API implementation for ``aiohttp``.. _hug: https://github.com/timothycrosley/hugTODO:=====-  donâ€™t pass default arguments</longdescription>
</pkgmetadata>