<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HTTP Exceptions[![Publish](https://github.com/DeveloperRSquared/http-exceptions/actions/workflows/publish.yml/badge.svg)](https://github.com/DeveloperRSquared/http-exceptions/actions/workflows/publish.yml)[![Python 3.7+](https://img.shields.io/badge/python-3.7+-brightgreen.svg)](#http-exceptions)[![PyPI - License](https://img.shields.io/pypi/l/http-exceptions.svg)](LICENSE)[![PyPI - Version](https://img.shields.io/pypi/v/http-exceptions.svg)](https://pypi.org/project/http-exceptions)[![CodeQL](https://github.com/DeveloperRSquared/http-exceptions/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/DeveloperRSquared/http-exceptions/actions/workflows/codeql-analysis.yml)[![codecov](https://codecov.io/gh/DeveloperRSquared/http-exceptions/branch/main/graph/badge.svg?token=8SJ30A2GV7)](https://codecov.io/gh/DeveloperRSquared/http-exceptions)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/DeveloperRSquared/http-exceptions/main.svg)](https://results.pre-commit.ci/latest/github/DeveloperRSquared/http-exceptions/main)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)Raisable HTTP Exceptions## InstallSimply install the package from [PyPI](https://pypi.org/project/http-exceptions/).```sh$ pip install -U http-exceptions```And that is it, you are ready to raise HTTP Exceptions.## What is it good for?1. Saves writing boilerplate code:   Converts this:   ```py   # e.g. app/internal.py   def some_function() -&gt; None:       raise SomeError()   # e.g. app/api.py   def api(request: Request) -&gt; Response:       try:           response = some_function()       except SomeError:           response = Response(status_code=403)       return response   ```   into this:   ```py   # e.g. app/internal.py   from http_exceptions import ForbiddenException   def some_function() -&gt; None:       raise ForbiddenException()   # e.g. app/api.py   def api(request: Request) -&gt; None:       return some_function()   ```2. Dynamic exception raising:   ```py   from http_exceptions import HTTPException   def raise_from_status(response: Response) -&gt; None:       if 400 &lt;= response.status &lt; 600:           raise HTTPException.from_status_code(status_code=response.status_code)(message=response.text)   ```   ```py   &gt;&gt;&gt; response = Response(status_code=403)   &gt;&gt;&gt; raise_from_status(response=response)  # ForbiddenException raised   ```## What else?### `HTTPException`Base class that provides all the exceptions to be raised.### `HTTPExceptions.from_status_code(status_code=status_code)`Returns the relevant Exception corresponding to `status_code`e.g. `HTTPExceptions.from_status_code(status_code=431)` -&gt; `RequestHeaderFieldsTooLargeException`### `ClientException`Subclass of `HTTPException` serving as a base class for exceptions with statuses in the [400, 499] range.```pyfrom http_exceptions import ClientException, RequestHeaderFieldsTooLargeExceptiontry:    raise RequestHeaderFieldsTooLargeException  # 431 - Client exceptionexcept ClientException:    # exception is caught here    pass```### `ServerException`Subclass of `HTTPException` serving as a base class for exceptions with statuses in the [500, 599] range.```pyfrom http_exceptions import HTTPVersionNotSupportedException, ServerExceptiontry:    raise HTTPVersionNotSupportedException  # 505 - Server exceptionexcept ServerException:    # exception is caught here    pass```## Available Exceptions### Client Exceptions: `400 &lt;= status &lt;= 499````py400: BadRequestException401: UnauthorizedException402: PaymentRequiredException403: ForbiddenException404: NotFoundException405: MethodNotAllowedException406: NotAcceptableException407: ProxyAuthenticationRequiredException408: RequestTimeoutException409: ConflictException410: GoneException411: LengthRequiredException412: PreconditionFailedException413: PayloadTooLargeException414: URITooLongException415: UnsupportedMediaTypeException416: RangeNotSatisfiableException417: ExpectationFailedException418: ImATeapotException421: MisdirectedRequestException422: UnprocessableEntityException423: LockedException424: FailedDependencyException425: TooEarlyException426: UpgradeRequiredException428: PreconditionRequiredException429: TooManyRequestsException431: RequestHeaderFieldsTooLargeException444: NoResponseException451: UnavailableForLegalReasonsException```### Server Exceptions: `500 &lt;= status &lt;= 599````py500: InternalServerErrorException501: NotImplementedException502: BadGatewayException503: ServiceUnavailableException504: GatewayTimeoutException505: HTTPVersionNotSupportedException506: VariantAlsoNegotiatesException507: InsufficientStorageException508: LoopDetectedException510: NotExtendedException511: NetworkAuthenticationRequiredException```## ContributingContributions are welcome via pull requests.### First time setup```sh$ git clone git@github.com:DeveloperRSquared/http-exceptions.git$ cd http-exceptions$ poetry install$ poetry shell```Tools including black, mypy etc. will run automatically if you install [pre-commit](https://pre-commit.com) using the instructions below```sh$ pre-commit install$ pre-commit run --all-files```### Running tests```sh$ poetry run pytest```## Links- Source Code: &lt;https://github.com/DeveloperRSquared/http-exceptions/&gt;- PyPI Releases: &lt;https://pypi.org/project/http-exceptions/&gt;- Issue Tracker: &lt;https://github.com/DeveloperRSquared/http-exceptions/issues/&gt;</longdescription>
</pkgmetadata>