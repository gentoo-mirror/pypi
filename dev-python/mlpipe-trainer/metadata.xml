<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;docs/assets/mlpipe_icon_full.png&quot; width=&quot;500&quot;&gt;# MLPipe-TrainerManage your Data Pipline and Tensorflow &amp; Keras models with MLPipe. It is NOT another &quot;wrapper&quot; around Tensorflow, but rather adds utilities to setup an environment to control data flow and managed trained models (weights &amp; results) with the help of MongoDB.&lt;/br&gt;```bash&gt;&gt; pip install mlpipe-trainer```## Setup - install MongoDBMongoDB database is used to store trained Models including their weights and results. Additionally there is also a data reader for MongoDB implemented (basically just a generator as you know and love from using keras). Currenlty that is the only implemented data reader working &quot;out of the box&quot;.&lt;/br&gt;Follow the instructions on the MongoDB website for installation e.g. for Linux: https://docs.mongodb.com/manual/administration/install-on-linux/## Code Examples#### Config```python# The config is used to specify the localhost connections# for saving trained models to the mongoDB as well as fetching training datafrom mlpipe.utils import ConfigConfig.add_config('./path_to/config.ini')```Each Connection config consists of these fields in the .ini file```ini[example_mongo_db_connection]db_type=MongoDBurl=localhostport=27017user=read_writepwd=rw```#### Data Pipline```pythonfrom mlpipe.processors.i_processor import IPreProcessorfrom mlpipe.data_reader.mongodb import MongoDBGeneratorclass PreProcessData(IPreProcessor):    def process(self, raw_data, input_data, ground_truth, piped_params=None):        # Process raw_data to output input_data and ground_truth        # which will be the input for the model        ...        return raw_data, input_data, ground_truth, piped_paramstrain_data = [...]  # consists of MongoDB ObjectIds that are used for trainingprocessors = [PreProcessData()]  # Chain of Processors (in our case its just one)# Generator that can be used e.g. with keras' fit_generator()train_gen = MongoDBGenerator(    (&quot;connection_name&quot;, &quot;cifar10&quot;, &quot;train&quot;),  # specify data source from a MongoDB    train_data,    batch_size=128,    processors=processors)```Data generators inherit from `tf.keras.utils.Sequence`. Check out this [tensorflow docu](https://www.tensorflow.org/api_docs/python/tf/keras/utils/Sequence) to find out how you can write your custom generators (e.g. for other data sources than MongoDB).#### ModelAs long as there is a keras (tensorflow.keras) model in the end, there are no restrictions on this step```pythonmodel = Sequential()model.add(Conv2D(32, (3, 3), padding='same', input_shape=(32, 32, 3)))...model.add(Dense(10, activation='softmax'))opt = optimizers.RMSprop(lr=0.0001, decay=1e-6)model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=[&quot;accuracy&quot;])```#### Training and Callbacks```pythonfrom mlpipe.callbacks import SaveToMongoDBsave_to_mongodb_cb = SaveToMongoDB((&quot;localhost_mongo_db&quot;, &quot;models&quot;), &quot;test&quot;, model)model.fit_generator(    generator=train_gen,    validation_data=val_gen,    epochs=10,    verbose=1,    callbacks=[save_to_mongodb_cb],    initial_epoch=0,)````SaveToMongoDB` is a custom keras callback class as described in the [tensorflow docu](https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/Callback). Again, feel free to create custom callbacks for any specific needs.&lt;/br&gt;If, instead of `fit_generator()`, each batch is trained one-by-one e.g. with a native tensorflow model, you can still loop over the generator. Just remember to call the callback methods at the specific steps e.g. `on_batch_end()`.A full Cifar10 example can be found in the example folder [here](https://github.com/j-o-d-o/MLPipe-Trainer/tree/master/examples/cifar10)## Road Map- Create and generat MkDocs documentation &amp; host documentation- Add tests- Set Up CI</longdescription>
</pkgmetadata>