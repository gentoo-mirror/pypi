<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PytificationsThis is a python package to send messages to your telegram from python code# InstallationWe are on PyPi! just paste this code on terminal    pip install pytificationsAnd you're done# UsageFirst you'll need to create an account at the [pytificator](https://t.me/pytificator_bot) botAfter that just import the library like so        from pytifications import Pytifications    #use your credentials created at the bot    Pytifications.login(&quot;myUsername&quot;,&quot;myPassword&quot;)    #and send any message you wish!    Pytifications.send_message(&quot;hello from python!&quot;)# Core features## Optionsthere are a few options that can be set inside the code (preferably before the login method in order to setup everything) which you can call like this```Pytifications.set_options(PytificationsOptions(    send_app_run_time_on_message=True,    send_current_time_on_message=True,    script_alias=&quot;my_script&quot;))```the script alias will be used many times so choose the alias wisely :D## Callbacksevery message can be sent with buttons attached so you can be responsive with your messages```from pytifications import Pytifications,PytificationButton#login and etc...#the callbacks receive an instance of the message (PytificationsMessage or PytificationsMessageWithPhoto) that was sent so you can change it if you wantdef my_callback_func(message):    print('called!')    #if you want you can also edit the message    message.edit(&quot;i was changed by a callback :)&quot;)Pytifications.send_message('hi!',buttons=[    #each column is an inner list    [        #use the PytificationButton        PytificationButton(            text=&quot;I'm a button!&quot;,            callback=my_callback_func        )    ]])# By default the callbacks will be called asynchronously whenever the server receives the signal that the button was pressed, you can override this if you want, like so:#setting synchronous modePytifications.set_synchronous()#then just call this method in the main loop of your program when you wish the callbacks to be calledPytifications.run_events_sync()```## Conversational commandsIf the buttons don't suit your needs for interactability, you can create commands by calling the following method somewhere in your code (preferably at the start)```#creating the callback method, it will receive a string containing any extra arguments passed in the messagedef my_callback_function(extra_args):    #custom code goes here    print(extra_args)#then register itPytifications.add_command_handler(        command=&quot;my_custom_command&quot;,        function=my_callback_function,        description=&quot;my custom description!&quot;)```Then you can use the chat commands that can be called from the conversation by sending the following message in a chat that the Pytificator bot is in:```!my_script_alias my_custom_command [extra_optional_args]```To check which commands are available for your script you can use the following command in the chat:```!my_script_alias check_commands```## Editing messagesevery message can be edited after being sent, which you can use to avoid spamming many messages, to update graphs, to update your coworkers instantly and much more!```message = Pytifications.send_message('message sent from Pytifications!')#you can simply edit the textmessage.edit(text=&quot;Edited text&quot;)#or add buttons (if only the buttons are passed, the message will be kept the same)!def some_callback():    passmessage.edit(buttons=[    [        PytificationsButton(            text=&quot;some callback :D&quot;,            callback=some_callback        )    ]])```## Edit last messageif you lost the message object you last sent, you can always call the edit_last_message method to edit it!```from pytifications import Pytifications#login and etc...Pytifications.send_message(&quot;hi, i'm not edited!&quot;)#simply edit the last message from anywhere!Pytifications.edit_last_message(&quot;now i am!&quot;)#you can also change the buttons on the message!def do_something():    print('something done!')Pytifications.edit_last_message(&quot;now with buttons!&quot;,buttons=[    [        PytificationButton(            text=&quot;do something...&quot;,            callback=do_something        )    ]])```## Sending imagesmany times it might be useful to send images together with your message (such as sending graphs, script results and such) so we've addressed this need too!```from pytifications import Pytificationsfrom PIL import Image#login and etc...Pytifications.send_message(&quot;hi! i have a photo with me :D&quot;,photo=Image.open(&quot;image_location.png&quot;))```        </longdescription>
</pkgmetadata>