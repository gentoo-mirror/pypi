<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/cloudsigma/cgroupspy.svg)](https://travis-ci.org/cloudsigma/cgroupspy)cgroupspy=========Python library for managing cgroupsThe library provides a pythonic way to manage and represent cgroups. It provides interfaces that convertpython objects to cgroups compatible strings and vise versa.Trees-----cgroupspy has a couple of ways to represent the cgroups filesystem* As a tree - this is the most basic and generic way to represent them. You basically construct it from allthe directories in the cgroups root.* A grouped tree - that has access to all cgroup partitions with the same name, on the same level. For example -'machine' partition in memory, cpuset, cpus, etc cgroups. All these attributes areaccessed via machine.cpus, machine.cpuset, etc.* A VMTree - a subclass of grouped tree with utilities for simple management of libvirt guestsExample usage-------------```python#Import the trees module, which contains a tree representation of cgroups&gt;&gt;&gt; from cgroupspy import trees# This is the most basic type of cgroup tree. It models the filesystem.&gt;&gt;&gt; t = trees.Tree()# It has a root which is of type Node&gt;&gt;&gt; t.root&lt;Node /&gt;# And the root has children&gt;&gt;&gt; print(t.root.children)[&lt;Node /hugetlb&gt;, &lt;Node /net_prio&gt;, &lt;Node /perf_event&gt;, &lt;Node /blkio&gt;, &lt;Node /net_cls&gt;, &lt;Node /freezer&gt;, &lt;Node /devices&gt;, &lt;Node /memory&gt;, &lt;Node /cpuacct&gt;, &lt;Node /cpu&gt;, &lt;Node /cpuset&gt;, &lt;Node /systemd&gt;, &lt;Node /cgmanager&gt;]# You can for example get the cpuset&gt;&gt;&gt; cset = t.get_node_by_path('/cpuset/')&gt;&gt;&gt; cset&lt;Node /cpuset&gt;# The controller used for this cgroup is a CpuSetController&gt;&gt;&gt; cset.controller&lt;cgroupspy.controllers.CpuSetController object at 0x7f63a3843050&gt;# Which can for example show you the cpu pinning&gt;&gt;&gt; cset.controller.cpusset([0, 1])# You can create a cgroup&gt;&gt;&gt; test = cset.create_cgroup('test')&lt;Node /cpuset/test&gt;# See its cpu restrictions&gt;&gt;&gt; test.controller.cpusset([0, 1])# And change them&gt;&gt;&gt; test.controller.cpus = [1]# The tasks in this cgroup are now restricted to cpu 1&gt;&gt;&gt; test.controller.cpusset([1])```Another example with the VMTree - for managing libvirt guests```python&gt;&gt;&gt; from cgroupspy.trees import VMTree&gt;&gt;&gt; vmt = VMTree()&gt;&gt;&gt; print(vmt.vms){u'1ce10f47-fb4e-4b6a-8ee6-ba34940cdda7.libvirt-qemu': &lt;NodeVM 1ce10f47-fb4e-4b6a-8ee6-ba34940cdda7.libvirt-qemu&gt;, u'3d5013b9-93ed-4ef1-b518-a2cea43f69ad.libvirt-qemu': &lt;NodeVM 3d5013b9-93ed-4ef1-b518-a2cea43f69ad.libvirt-qemu&gt;,}&gt;&gt;&gt; vm = vmt.get_vm_node(&quot;1ce10f47-fb4e-4b6a-8ee6-ba34940cdda7&quot;)&gt;&gt;&gt; print(vm.cpu.shares)1024&gt;&gt;&gt; print(vm.cpuset.cpus){0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}&gt;&gt;&gt; print(vm.memory.limit_in_bytes)25603080192&gt;&gt;&gt; print(vm.children)[&lt;NodeControlGroup vcpu1&gt;, &lt;NodeControlGroup vcpu0&gt;, &lt;NodeControlGroup emulator&gt;]&gt;&gt;&gt; print(vm.path)/machine/grey/1ce10f47-fb4e-4b6a-8ee6-ba34940cdda7.libvirt-qemu&gt;&gt;&gt; vcpu1 = vm.children[0]&gt;&gt;&gt; print(vcpu1.cpuset.cpus){1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}&gt;&gt;&gt; vcpu1.cpuset.cpus = {1,2,3}&gt;&gt;&gt; print(vcpu1.cpuset.cpus){1, 2, 3}```License-------new BSD licence</longdescription>
</pkgmetadata>