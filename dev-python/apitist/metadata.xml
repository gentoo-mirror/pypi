<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://github.com/zeburek/python-apitist/workflows/Python%20package/badge.svg)](https://github.com/zeburek/python-apitist/actions) [![PyPI version](https://badge.fury.io/py/apitist.svg)](https://badge.fury.io/py/apitist) [![Downloads](https://pepy.tech/badge/apitist)](https://pepy.tech/project/apitist)# apitistBrand new way to test your API## Main features:- Adding hooks for requests library- Default hooks for:    - Logging    - Structuring/Unstructuring data## InstallationRun the following command in your command line::```bashpip install apitist```If you want to use predefined random types please install additional requirements:```bashpip install -e apitist[random]```## Session and client creationSession can take `base_url` parameter which will be used to prepend before requesting path.```pythonfrom apitist.requests import sessionsession = session(&quot;https://httpbin.org/v1&quot;)session.get(&quot;/get&quot;) # Here request will be made to `https://httpbin.org/v1/get````You can safely pass `path` and `base_url` with leading/forwarding slash:```pythonfrom apitist.requests import sessionsession(&quot;https://httpbin.org/v1&quot;).get(&quot;/get&quot;)session(&quot;https://httpbin.org/v1/&quot;).get(&quot;/get&quot;)session(&quot;https://httpbin.org/v1/&quot;).get(&quot;get&quot;)session(&quot;https://httpbin.org/v1&quot;).get(&quot;get&quot;)```In all examples above requests would be made to `https://httpbin.org/v1/get`.### Request decoratorsApitist offers all default requests types as a class method decorator, but there are somerequirements for that:- Class, where you use decorators, should contain session parameter, with `Session` object- Function, which is decorated, must return `None` or `dict` with parameters, that will be passedto `request` function of `Session` object, like: `headers`, `data`, `json` and so on.- You can use format placeholders in decorators `url` parameter, but you should remember thatparameters from method will be passed to `format` method AS IS - args to args, kwargs to kwargs.As a result this code won't work:  ```python  class ExampleClient:      ...      @delete(&quot;/users/{id}?method={method}&quot;)      def delete_user(self, id, method): ...  ```Example client class:```pythonfrom apitist import sessionfrom apitist.decorators import get, post, put, deleteclass ExampleClient:    session = session(&quot;http://example.com/v1&quot;)    @get(&quot;/users&quot;)    def get_user(self): ...    @get(&quot;/users/{}&quot;)    def get_user(self, id): ...    @post(&quot;/users&quot;)    def create_user(self, data):        return {&quot;json&quot;: data}    @put(&quot;/users/{}&quot;)    def update_user(self, id, data):        return {&quot;json&quot;: data}    @delete(&quot;/users/{}?method={method}&quot;)    def delete_user(self, id, method=&quot;hide&quot;): ...```## Shared SessionShared Session class can be used to share cookies between different sessions.```pythonfrom apitist import session, SharedSessions1 = session(&quot;https://google.com&quot;)s2 = session(&quot;https://yandex.ru&quot;)ss = SharedSession(s1, s2)s2.get(&quot;/?q=2113&quot;)assert s1.cookies == s2.cookiess1.get(&quot;/?q=124&quot;)assert s1.cookies == s2.cookies```## Default hooks  - RequestDebugLoggingHook - logs request content with level DEBUG  - RequestInfoLoggingHook - logs request content with level INFO  - PrepRequestDebugLoggingHook - logs prepared request content (e.g. you will see query parameters in URL) with level DEBUG  - PrepRequestInfoLoggingHook - logs prepared request content with level INFO  - ResponseDebugLoggingHook - logs response content with level DEBUG  - ResponseInfoLoggingHook - logs response content with level INFO  - RequestAttrsConverterHook - converts attrs class in `data` field into json  - RequestDataclassConverterHook - converts dataclass class in `data` field into json  - ResponseAttrsConverterHook - adds `structure(type)` function to `requests.Response` class, which will structure  response according to attrs class given to it  - ResponseDataclassConverterHook - adds `structure(type)` function to `requests.Response` class, which will structure  response according to dataclass class given to it### Example usage```pythonfrom apitist import PrepRequestInfoLoggingHook, ResponseInfoLoggingHookfrom apitist import sessions = session()PrepRequestInfoLoggingHook.formatter = &quot;Best formatter {req.method} {req.url}&quot;s.add_prep_request_hook(PrepRequestInfoLoggingHook)s.add_response_hook(ResponseInfoLoggingHook)s.post(&quot;https://httpbin.org/post&quot;, params={&quot;q&quot;: &quot;test&quot;})```## Custom Hooks```pythonfrom requests import Request, PreparedRequest, Responsefrom apitist import session, RequestHook, PreparedRequestHook, ResponseHooks = session()class ReqHook(RequestHook):    def run(self, request: Request) -&gt; Request:        print(request.url)        return requestclass PrepReqHook(PreparedRequestHook):    def run(self, request: PreparedRequest) -&gt; PreparedRequest:        print(request.url)        return requestclass RespHook(ResponseHook):    def run(self, response: Response) -&gt; Response:        print(response.url)        return responses.add_request_hook(ReqHook)s.add_prep_request_hook(PrepReqHook)s.add_response_hook(RespHook)s.get(&quot;https://ya.ru&quot;, params={&quot;q&quot;: &quot;test&quot;})```## Working with constructor```pythonimport attrimport typingfrom apitist import (  converter,  RequestConverterHook,  ResponseConverterHook,  session,)class ExampleType:    test = None@attr.sclass ExampleStructure:    test: ExampleType = attr.ib()@attr.sclass TestResponse:    args: typing.Dict = attr.ib()    data: str = attr.ib()    files: typing.Dict = attr.ib()    form: typing.Dict = attr.ib()    headers: typing.Dict = attr.ib()    json: ExampleStructure = attr.ib()    origin: str = attr.ib()    url: str = attr.ib()s = session()s.add_hook(RequestConverterHook)s.add_hook(ResponseConverterHook)def structure_example_type(data, type_):    example = ExampleType()    example.test = data    return exampledef unstructure_example_type(data):    return data.testconverter.register_hooks(    ExampleType, structure_example_type, unstructure_example_type)t = ExampleType()t.test = &quot;test&quot;struc = ExampleStructure(t)res = s.post(&quot;https://httpbin.org/post&quot;, data=struc).structure(TestResponse)print(res.structured.json.test.test) # test```## Using random data generatorFirst of all create an instance of random class:```pythonfrom apitist import Randomerrand = Randomer()```Now, you can add custom hooks for different types:```pythonrand.add_type(str, lambda: str(random.random()))rand.add_type(float, lambda: random.random())```Or using `add_types`:```pythontypes = {    str: lambda: str(random.random()),    float: lambda: random.random()}rand.add_types(types)```Now you can create random object for given type or any attrs class withdefined types:```pythonimport attrimport dataclassesimport typingrand.object(str) # '0.6147789314561384'rand.object(float) # 0.4664297665239271@attr.sclass Data:    value1: str = attr.ib()    value2: typing.List[str] = attr.ib()    value3: typing.Tuple[float] = attr.ib()@dataclasses.dataclassclass Dataclass:    value1: str    value2: typing.List[str]    value3: typing.Tuple[float]print(rand.object(Data))# Data(#   value1='0.491058956716827',#   value2=['0.6568036485871975'],#   value3=(0.8603579349502298,)# )# Also works for dataclassesprint(rand.object(Dataclass))# Data(#   value1='0.491058956716827',#   value2=['0.6568036485871975'],#   value3=(0.8603579349502298,)# )```It is better to use it with [Faker](https://github.com/joke2k/faker).Just define different subclasses for `str` and add different hooks for them.By this you could create different data for different `str` fields.Also, using with `RequestConverterHook` and `ResponseConverterHook`you could easily create random json objects which would be send to server.## Predefined random types```pythonfrom apitist import Randomerfrom apitist.random import Username, FirstName, LastName, Datefrom dataclasses import dataclass@dataclassclass LoginModel:    username: Username    password: str@dataclassclass BookingDates:    checkin: Date    checkout: Date@dataclassclass BookingModel:    firstname: FirstName    lastname: LastName    totalprice: int    depositpaid: bool    bookingdates: BookingDates    additionalneeds: strrand = Randomer()rand.add_predefined(locale=&quot;es-ES&quot;)rand.object(LoginModel)# LoginModel(#   username='wfeliu',#   password='VjHoHtLSjdoxXhtitaXU'# )rand.object(BookingModel)# BookingModel(#   firstname='Pedro',#   lastname='Luz',#   totalprice=931,#   depositpaid=True,#   bookingdates=BookingDates(checkin='1972-08-29', checkout='1971-05-19'),#   additionalneeds='EFggHSpnzRSJATKtUmOm'# )```</longdescription>
</pkgmetadata>