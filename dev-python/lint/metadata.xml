<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Lint====Python script to automatically lint new reviews to gerrit. Designed tobe run from within Jenkins via the Gerrit Trigger pluginLint is a python package to assist with automatic code reviews. Itprovides the following tools:1. Get a list of files changed between the active gerrit branch and the   specified gerrit review.2. Lint the original files in the active gerrit branch.3. Checkout the current review ID4. Lint the changed files.5. Analyze the results according to specified validators.6. Post the results of the validation to gerrit via SSH (+1/-1 score   assigned, including a message).Lint uses the environmental variables set by Gerrit Trigger to do almostall of the configuration. You can still use it via command-line (withoptions!) for manual testing.You can also add a checkers to validators, which are simple functions tocompare lint data that are passed to the validator.Installation------------pip install git+https://github.com/astraw38/LintUsage-----For pylint, just use 'gpylinter.py'. It by default will use the'Pylinter' plugin for .py files, as well as the default pylintvalidators.Lint provides the ability to plugin your own Linter or Validatorclasses. All you need to do is run.. code:: python    LintFactory.register_linter(NewLinter()) or.. code:: python    ValidatorFactory.register_validator(NewValidator())When you run 'run\_linters()' or 'run\_validators()', it'll pick them upand use them. Your new Linters should derive from BaseLinter, and yournew Validators should derive from BaseValidator.You can also customize the order of operations, or how comments/scoresare posted to gerrit. Just look at gpylinter as an example.</longdescription>
</pkgmetadata>