<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## BLIP: Bootstrapping Language-Image Pre-training for Unified Vision-Language Understanding and Generation## Announcement: BLIP is now officially integrated into [LAVIS](https://github.com/salesforce/LAVIS) - a one-stop library for language-and-vision research and applications!&lt;img src=&quot;BLIP.gif&quot; width=&quot;700&quot;&gt;This is the PyTorch code of the &lt;a href=&quot;https://arxiv.org/abs/2201.12086&quot;&gt;BLIP paper&lt;/a&gt; [[blog](https://blog.salesforceairesearch.com/blip-bootstrapping-language-image-pretraining/)]. The code has been tested on PyTorch 1.10.To install the dependencies, run &lt;pre/&gt;pip install -r requirements.txt&lt;/pre&gt; Catalog:- [x] Inference demo- [x] Pre-trained and finetuned checkpoints- [x] Finetuning code for Image-Text Retrieval, Image Captioning, VQA, and NLVR2- [x] Pre-training code- [x] Zero-shot video-text retrieval- [x] Download of bootstrapped pre-training datasets ### Inference demo:Run our interactive demo using [Colab notebook](https://colab.research.google.com/github/salesforce/BLIP/blob/main/demo.ipynb) (no GPU needed).The demo includes code for: 1. Image captioning2. Open-ended visual question answering3. Multimodal / unimodal feature extraction4. Image-text matchingTry out the [Web demo](https://huggingface.co/spaces/Salesforce/BLIP), integrated into [Huggingface Spaces ðŸ¤—](https://huggingface.co/spaces) using [Gradio](https://github.com/gradio-app/gradio). Replicate web demo and Docker image is also available at [![Replicate](https://replicate.com/salesforce/blip/badge)](https://replicate.com/salesforce/blip)### Pre-trained checkpoints:Num. pre-train images | BLIP w/ ViT-B | BLIP w/ ViT-B and CapFilt-L | BLIP w/ ViT-L --- | :---: | :---: | :---: 14M | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_14M.pth&quot;&gt;Download&lt;/a&gt;| - | -129M | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base.pth&quot;&gt;Download&lt;/a&gt;| &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_capfilt_large.pth&quot;&gt;Download&lt;/a&gt; | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_large.pth&quot;&gt;Download&lt;/a&gt;### Finetuned checkpoints:Task | BLIP w/ ViT-B | BLIP w/ ViT-B and CapFilt-L | BLIP w/ ViT-L --- | :---: | :---: | :---:Image-Text Retrieval (COCO) | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_retrieval_coco.pth&quot;&gt;Download&lt;/a&gt;| - | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_large_retrieval_coco.pth&quot;&gt;Download&lt;/a&gt;Image-Text Retrieval (Flickr30k) | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_retrieval_flickr.pth&quot;&gt;Download&lt;/a&gt;|  - | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_large_retrieval_flickr.pth&quot;&gt;Download&lt;/a&gt;Image Captioning (COCO) | - | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_caption_capfilt_large.pth&quot;&gt;Download&lt;/a&gt;| &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_large_caption.pth&quot;&gt;Download&lt;/a&gt; | VQA | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_vqa.pth&quot;&gt;Download&lt;/a&gt;| &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_vqa_capfilt_large.pth&quot;&gt;Download&lt;/a&gt; | - NLVR2 | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_nlvr.pth&quot;&gt;Download&lt;/a&gt;| - | - ### Image-Text Retrieval:1. Download COCO and Flickr30k datasets from the original websites, and set 'image_root' in configs/retrieval_{dataset}.yaml accordingly.2. To evaluate the finetuned BLIP model on COCO, run:&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 train_retrieval.py \--config ./configs/retrieval_coco.yaml \--output_dir output/retrieval_coco \--evaluate&lt;/pre&gt; 3. To finetune the pre-trained checkpoint using 8 A100 GPUs, first set 'pretrained' in configs/retrieval_coco.yaml as &quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base.pth&quot;. Then run:&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 train_retrieval.py \--config ./configs/retrieval_coco.yaml \--output_dir output/retrieval_coco &lt;/pre&gt; ### Image-Text Captioning:1. Download COCO and NoCaps datasets from the original websites, and set 'image_root' in configs/caption_coco.yaml and configs/nocaps.yaml accordingly.2. To evaluate the finetuned BLIP model on COCO, run:&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 train_caption.py --evaluate&lt;/pre&gt; 3. To evaluate the finetuned BLIP model on NoCaps, generate results with: (evaluation needs to be performed on official server)&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 eval_nocaps.py &lt;/pre&gt; 4. To finetune the pre-trained checkpoint using 8 A100 GPUs, first set 'pretrained' in configs/caption_coco.yaml as &quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_capfilt_large.pth&quot;. Then run:&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 train_caption.py &lt;/pre&gt; ### VQA:1. Download VQA v2 dataset and Visual Genome dataset from the original websites, and set 'vqa_root' and 'vg_root' in configs/vqa.yaml.2. To evaluate the finetuned BLIP model, generate results with: (evaluation needs to be performed on official server)&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 train_vqa.py --evaluate&lt;/pre&gt; 3. To finetune the pre-trained checkpoint using 16 A100 GPUs, first set 'pretrained' in configs/vqa.yaml as &quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_capfilt_large.pth&quot;. Then run:&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=16 train_vqa.py &lt;/pre&gt; ### NLVR2:1. Download NLVR2 dataset from the original websites, and set 'image_root' in configs/nlvr.yaml.2. To evaluate the finetuned BLIP model, run&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 train_nlvr.py --evaluate&lt;/pre&gt; 3. To finetune the pre-trained checkpoint using 16 A100 GPUs, first set 'pretrained' in configs/nlvr.yaml as &quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base.pth&quot;. Then run:&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=16 train_nlvr.py &lt;/pre&gt; ### Finetune with ViT-L:In order to finetune a model with ViT-L, simply change the config file to set 'vit' as large. Batch size and learning rate may also need to be adjusted accordingly (please see the paper's appendix for hyper-parameter details). &lt;a href=&quot;https://github.com/facebookresearch/fairscale&quot;&gt;Gradient checkpoint&lt;/a&gt; can also be activated in the config file to reduce GPU memory usage. ### Pre-train:1. Prepare training json files where each json file contains a list. Each item in the list is a dictonary with two key-value pairs: {'image': path_of_image, 'caption': text_of_image}. 2. In configs/pretrain.yaml, set 'train_file' as the paths for the json files .3. Pre-train the model using 8 A100 GPUs:&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 pretrain.py --config ./configs/Pretrain.yaml --output_dir output/Pretrain &lt;/pre&gt; ### Zero-shot video-text retrieval:1. Download MSRVTT dataset following the instructions from https://github.com/salesforce/ALPRO, and set 'video_root' accordingly in configs/retrieval_msrvtt.yaml.2. Install [decord](https://github.com/dmlc/decord) with &lt;pre&gt;pip install decord&lt;/pre&gt; 3. To perform zero-shot evaluation, run&lt;pre&gt;python -m torch.distributed.run --nproc_per_node=8 eval_retrieval_video.py&lt;/pre&gt; ### Pre-training datasets download:We provide bootstrapped pre-training datasets as json files. Each json file contains a list. Each item in the list is a dictonary with two key-value pairs: {'url': url_of_image, 'caption': text_of_image}. Image source | Filtered web caption | Filtered synthetic caption by ViT-B | Filtered synthetic caption by ViT-L--- | :---: | :---: | :---:CC3M+CC12M+SBU |  &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/datasets/ccs_filtered.json&quot;&gt;Download&lt;/a&gt;|  &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/datasets/ccs_synthetic_filtered.json&quot;&gt;Download&lt;/a&gt;|  &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/datasets/ccs_synthetic_filtered_large.json&quot;&gt;Download&lt;/a&gt;LAION115M | &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/datasets/laion_filtered.json&quot;&gt;Download&lt;/a&gt;|  &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/datasets/laion_synthetic_filtered.json&quot;&gt;Download&lt;/a&gt;|  &lt;a href=&quot;https://storage.googleapis.com/sfr-vision-language-research/BLIP/datasets/laion_synthetic_filtered_large.json&quot;&gt;Download&lt;/a&gt;### CitationIf you find this code to be useful for your research, please consider citing.&lt;pre&gt;@inproceedings{li2022blip,      title={BLIP: Bootstrapping Language-Image Pre-training for Unified Vision-Language Understanding and Generation},       author={Junnan Li and Dongxu Li and Caiming Xiong and Steven Hoi},      year={2022},      booktitle={ICML},}&lt;/pre&gt;### AcknowledgementThe implementation of BLIP relies on resources from &lt;a href=&quot;https://github.com/salesforce/ALBEF&quot;&gt;ALBEF&lt;/a&gt;, &lt;a href=&quot;https://github.com/huggingface/transformers&quot;&gt;Huggingface Transformers&lt;/a&gt;, and &lt;a href=&quot;https://github.com/rwightman/pytorch-image-models/tree/master/timm&quot;&gt;timm&lt;/a&gt;. We thank the original authors for their open-sourcing.</longdescription>
</pkgmetadata>