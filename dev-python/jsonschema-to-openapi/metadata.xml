<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jsonschema-to-openapiConverts a JSON schema to an OpenAPI specification version 3.0.## Installation```pip install jsonschema-to-openapi```## Usage#### CLI```shelljsonschema-to-openapi my_json_schema.json my_open_api_spec.json```### Package```python&gt;&gt;&gt; from jsonschema_to_openapi.convert import convert&gt;&gt;&gt; schema = {} # Your json schema as dictionary.&gt;&gt;&gt; convert(schema){} # Your OpenAPI specification as dictionary.```## Caveats and Limitations* If you have a [complex schema](https://json-schema.org/understanding-json-schema/structuring.html), where you extend a base schema with the `$ref` operator, you will need to put all base schemas under a &quot;definitions&quot; key in root.* Abitrarily nested `xOf`s cannot be resolved yet. The program won't fail and will procude valid OpenAPI specification, but the result will still contain nested `xOf` operators.     * Input:        ```json        {          &quot;anyOf&quot;: [{&quot;$ref&quot;: &quot;#/definitions/my_object&quot;}, { &quot;anyOf&quot;: [{&quot;type&quot;: &quot;null&quot;}] }],          &quot;definitions&quot;: {              &quot;my_object&quot;: {&quot;type&quot;: &quot;string&quot;}          }        }        ```    * Output:        ```json        {            &quot;anyOf&quot;: [                {                    &quot;$ref&quot;: &quot;#/definitions/my_object&quot;                },                {                    &quot;anyOf&quot;: [                        {                            &quot;type&quot;: &quot;null&quot;                        }                    ]                }            ],            &quot;definitions&quot;: {                &quot;my_object&quot;: {                    &quot;nullable&quot;: false,                    &quot;type&quot;: &quot;string&quot;                }            }        }        ```## ChangelogPlease take a look at the [CHANGELOG.md](CHANGELOG.md) for notable changes to jsonschema-to-openapi.## LicenseSee the [LICENSE](LICENSE) for details.## DevelopmentWe welcome new contributions to this project!### Source CodeYou can check the latest source code with the command:```git clone git@gitlab.com:InstaffoOpenSource/DataScience/jsonschema-to-openapi.git```### LintingAfter cloning and installing the dependencies, you can lint the project by executing:```make lint```### TestingAfter cloning and installing the dependencies, you can test the project by executing:```make test```## Help and Support### Authors- Jan-Benedikt Jagusch &lt;jan@instaffo.de&gt;## Acknowledgements- This project started as a Python port of [json-schema-to-openapi-schema](https://github.com/wework/json-schema-to-openapi-schema).</longdescription>
</pkgmetadata>