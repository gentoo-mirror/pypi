<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;    &lt;a href=&quot;https://luolingchun.github.io/flask-openapi3/&quot; target=&quot;_blank&quot;&gt;        &lt;img class=&quot;off-glb&quot; src=&quot;https://raw.githubusercontent.com/luolingchun/flask-openapi3/master/docs/images/logo-text.svg&quot;              width=&quot;60%&quot; height=&quot;auto&quot; alt=&quot;logo&quot;&gt;    &lt;/a&gt;&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Generate REST API and OpenAPI documentation for your Flask project.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/luolingchun/flask-openapi3/actions/workflows/tests.yml&quot; target=&quot;_blank&quot;&gt;        &lt;img class=&quot;off-glb&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/luolingchun/flask-openapi3/tests.yml?branch=master&quot; alt=&quot;test&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/flask-openapi3/&quot; target=&quot;_blank&quot;&gt;        &lt;img class=&quot;off-glb&quot; src=&quot;https://img.shields.io/pypi/v/flask-openapi3&quot; alt=&quot;pypi&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypistats.org/packages/flask-openapi3&quot; target=&quot;_blank&quot;&gt;        &lt;img class=&quot;off-glb&quot; src=&quot;https://img.shields.io/pypi/dm/flask-openapi3&quot; alt=&quot;pypistats&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/flask-openapi3/&quot; target=&quot;_blank&quot;&gt;        &lt;img class=&quot;off-glb&quot; src=&quot;https://img.shields.io/pypi/pyversions/flask-openapi3&quot; alt=&quot;pypi versions&quot;&gt;    &lt;/a&gt;&lt;/p&gt;**Flask OpenAPI3** is a web API framework based on **Flask**. It uses **Pydantic** to verify data and automaticgeneration of interaction documentation: **Swagger**, **ReDoc** and **RapiDoc**.The key features are:- **Easy to code:** Easy to use and easy to learn- **Standard document specification:** Based on [OpenAPI Specification](https://spec.openapis.org/oas/v3.1.0)- **Interactive OpenAPI documentation:** [Swagger](https://github.com/swagger-api/swagger-ui), [Redoc](https://github.com/Redocly/redoc) and [RapiDoc](https://github.com/rapi-doc/RapiDoc)  - **Data validation:** Fast data verification based on [Pydantic](https://github.com/pydantic/pydantic)- **Authorization:** Support to reload authorizations in Swagger UI## RequirementsPython 3.8+flask-openapi3 is dependent on the following libraries:- [Flask](https://github.com/pallets/flask) for the web app.- [Pydantic](https://github.com/pydantic/pydantic) for the data validation.## Installation```bashpip install -U flask-openapi3```or```bashconda install -c conda-forge flask-openapi3```&lt;details markdown=&quot;block&quot;&gt;&lt;summary&gt;Optional dependencies&lt;/summary&gt;- [python-email-validator](https://github.com/JoshData/python-email-validator) supports email verification.- [python-dotenv](https://github.com/theskumar/python-dotenv#readme) enables support for [Environment Variables From dotenv](https://flask.palletsprojects.com/en/latest/cli/#dotenv) when running `flask` commands.- [pyyaml](https://github.com/yaml/pyyaml) is used to output the OpenAPI document in yaml format.- [asgiref](https://github.com/django/asgiref) allows views to be defined with `async def` and use `await`.To install these dependencies with flask-openapi3:```bashpip install flask-openapi3[yaml]# orpip install flask-openapi3[async]# orpip install flask-openapi3[dotenv]# orpip install flask-openapi3[email]# or allpip install flask-openapi3[yaml,async,dotenv,email]# or manuallypip install pyyaml asgiref python-dotenv email-validator```&lt;/details&gt;## A Simple ExampleHere's a simple example, further go to the [Example](https://luolingchun.github.io/flask-openapi3/latest/Example/).```pythonfrom pydantic import BaseModelfrom flask_openapi3 import Info, Tagfrom flask_openapi3 import OpenAPIinfo = Info(title=&quot;book API&quot;, version=&quot;1.0.0&quot;)app = OpenAPI(__name__, info=info)book_tag = Tag(name=&quot;book&quot;, description=&quot;Some Book&quot;)class BookQuery(BaseModel):    age: int    author: str@app.get(&quot;/book&quot;, summary=&quot;get books&quot;, tags=[book_tag])def get_book(query: BookQuery):    &quot;&quot;&quot;    to get all books    &quot;&quot;&quot;    return {        &quot;code&quot;: 0,        &quot;message&quot;: &quot;ok&quot;,        &quot;data&quot;: [            {&quot;bid&quot;: 1, &quot;age&quot;: query.age, &quot;author&quot;: query.author},            {&quot;bid&quot;: 2, &quot;age&quot;: query.age, &quot;author&quot;: query.author}        ]    }if __name__ == &quot;__main__&quot;:    app.run(debug=True)```&lt;details&gt;&lt;summary&gt;Class-based API View Example&lt;/summary&gt;```pythonfrom typing import Optionalfrom pydantic import BaseModel, Fieldfrom flask_openapi3 import OpenAPI, Tag, Info, APIViewinfo = Info(title='book API', version='1.0.0')app = OpenAPI(__name__, info=info)api_view = APIView(url_prefix=&quot;/api/v1&quot;, view_tags=[Tag(name=&quot;book&quot;)])class BookPath(BaseModel):    id: int = Field(..., description=&quot;book ID&quot;)class BookQuery(BaseModel):    age: Optional[int] = Field(None, description='Age')class BookBody(BaseModel):    age: Optional[int] = Field(..., ge=2, le=4, description='Age')    author: str = Field(None, min_length=2, max_length=4, description='Author')@api_view.route(&quot;/book&quot;)class BookListAPIView:    a = 1    @api_view.doc(summary=&quot;get book list&quot;)    def get(self, query: BookQuery):        print(self.a)        return query.model_dump_json()    @api_view.doc(summary=&quot;create book&quot;)    def post(self, body: BookBody):        &quot;&quot;&quot;description for a created book&quot;&quot;&quot;        return body.model_dump_json()@api_view.route(&quot;/book/&lt;id&gt;&quot;)class BookAPIView:    @api_view.doc(summary=&quot;get book&quot;)    def get(self, path: BookPath):        print(path)        return &quot;get&quot;    @api_view.doc(summary=&quot;update book&quot;)    def put(self, path: BookPath):        print(path)        return &quot;put&quot;    @api_view.doc(summary=&quot;delete book&quot;, deprecated=True)    def delete(self, path: BookPath):        print(path)        return &quot;delete&quot;app.register_api_view(api_view)if __name__ == &quot;__main__&quot;:    app.run(debug=True)```&lt;/details&gt;## API DocumentRun the [simple example](https://github.com/luolingchun/flask-openapi3/blob/master/examples/simple_demo.py), and go to http://127.0.0.1:5000/openapi.You will see the documentation: [Swagger](https://github.com/swagger-api/swagger-ui), [Redoc](https://github.com/Redocly/redoc) and [RapiDoc](https://github.com/rapi-doc/RapiDoc).![openapi](https://raw.githubusercontent.com/luolingchun/flask-openapi3/master/docs/images/openapi.png)![openapi-swagger](https://raw.githubusercontent.com/luolingchun/flask-openapi3/master/docs/images/openapi-swagger.png)![openapi-redoc](https://raw.githubusercontent.com/luolingchun/flask-openapi3/master/docs/images/openapi-redoc.png)![openapi-RapiDoc](https://raw.githubusercontent.com/luolingchun/flask-openapi3/master/docs/images/openapi-rapidoc.png)</longdescription>
</pkgmetadata>