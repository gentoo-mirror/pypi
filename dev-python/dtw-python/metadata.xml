<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Welcome to the dtw-python package=================================Comprehensive implementation of `Dynamic Time Warping algorithms&lt;https://dynamictimewarping.github.io&gt;`__.DTW is a family of algorithms which compute the local stretch orcompression to apply to the time axes of two timeseries in order tooptimally map one (query) onto the other (reference). DTW outputs theremaining cumulative distance between the two and, if desired, themapping itself (warping function). DTW is widely used e.g. forclassification and clustering tasks in econometrics, chemometrics andgeneral timeseries mining.This package provides the most complete, freely-available (GPL)implementation of Dynamic Time Warping-type (DTW) algorithms up todate. It is a faithful Python equivalent of `R's DTW package on CRAN&lt;https://cran.r-project.org/package=dtw&gt;`__.  Supports arbitrary local (e.g.symmetric, asymmetric, slope-limited) and global (windowing)constraints, fast native code, several plot styles, and more... image:: https://github.com/DynamicTimeWarping/dtw-python/workflows/Build%20and%20upload%20to%20PyPI/badge.svg   :target: https://github.com/DynamicTimeWarping/dtw-python/actions.. image:: https://badge.fury.io/py/dtw-python.svg   :target: https://badge.fury.io/py/dtw-python.. image:: https://codecov.io/gh/DynamicTimeWarping/dtw-python/branch/master/graph/badge.svg  :target: https://codecov.io/gh/DynamicTimeWarping/dtw-pythonDocumentation~~~~~~~~~~~~~Please refer to the main `DTW suite homepage&lt;https://dynamictimewarping.github.io&gt;`__ for the full documentationand background.The best place to learn how to use the package (and a hopefully adecent deal of background on DTW) is the companion paper `Computingand Visualizing Dynamic Time Warping Alignments in R: The dtw Package&lt;http://www.jstatsoft.org/v31/i07/&gt;`__, which the Journal ofStatistical Software makes available for free.  It includes detailedinstructions and extensive background on things like multivariatematching, open-end variants for real-time use, interplay betweenrecursion types and length normalization, history, etc.To have a look at how the *dtw* package is used in domains ranging frombioinformatics to chemistry to data mining, have a look at the list of`citingpapers &lt;http://scholar.google.it/scholar?oi=bibs&amp;hl=it&amp;cites=5151555337428350289&gt;`__.**Note**: **R** is the prime environment for the DTWsuite. Python's docstrings and the API below are generatedautomatically for the sake of consistency and maintainability, and maynot be as pretty. Features~~~~~~~~The implementation provides:-  arbitrary windowing functions (global constraints), eg. the   `Sakoe-Chiba   band &lt;http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=01163055&gt;`__   and the `Itakura   parallelogram &lt;http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1162641&gt;`__;-  arbitrary transition types (also known as step patterns, slope   constraints, local constraints, or DP-recursion rules). This includes   dozens of well-known types:   -  all step patterns classified by      `Rabiner-Juang &lt;http://www.worldcat.org/oclc/26674087&gt;`__,      `Sakoe-Chiba &lt;http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1163055&gt;`__,      and `Rabiner-Myers &lt;http://hdl.handle.net/1721.1/27909&gt;`__;   -  symmetric and asymmetric;   -  Rabiner's smoothed variants;   -  arbitrary, user-defined slope constraints-  partial matches: open-begin, open-end, substring matches-  proper, pattern-dependent, normalization (exact average distance per   step)-  the Minimum Variance Matching (MVM) algorithm `(Latecki et   al.) &lt;http://dx.doi.org/10.1016/j.patcog.2007.03.004&gt;`__In addition to computing alignments, the package provides:-  methods for plotting alignments and warping functions in several   classic styles (see plot gallery);-  graphical representation of step patterns;-  functions for applying a warping function, either direct or inverse;-  a fast native (C) core.Multivariate timeseries can be aligned with arbitrary local distancedefinitions, leveraging the [`proxy::dist`](https://www.rdocumentation.org/packages/proxy/versions/0.4-23/topics/dist) (R) or[`scipy.spatial.distance.cdist`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html) (Python) functions. Citation~~~~~~~~When using in academic works please cite:* T. Giorgino. Computing and Visualizing Dynamic Time Warping Alignments in R: The dtw Package. J. Stat. Soft., 31 (2009) `doi:10.18637/jss.v031.i07 &lt;https://www.jstatsoft.org/article/view/v031i07&gt;`__.When using partial matching (unconstrained endpoints via the open.begin/open.end options) and/or normalization strategies, please also cite:* P. Tormene, T. Giorgino, S. Quaglini, M. Stefanelli (2008). Matching Incomplete Time Series with Dynamic Time Warping: An Algorithm and an Application to Post-Stroke Rehabilitation. Artificial Intelligence in Medicine, 45(1), 11-34. `doi:10.1016/j.artmed.2008.11.007 &lt;http://dx.doi.org/10.1016/j.artmed.2008.11.007&gt;`__Source code~~~~~~~~~~~Releases (stable versions) are available in the `dtw-python project on PyPi &lt;https://pypi.org/project/dtw-python/&gt;`__. Developmentoccurs on GitHub at &lt;https://github.com/DynamicTimeWarping/dtw-python&gt;.License~~~~~~~This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.Credits-------This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template... _Cookiecutter: https://github.com/audreyr/cookiecutter.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage</longdescription>
</pkgmetadata>