<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Throttler[![Python](https://img.shields.io/badge/Python-3.6%20%7C%203.7%20%7C%203.8%20%7C%203.9%20%7C%203.10%20%7C%203.11-blue.svg?longCache=true)]()[![PyPI](https://img.shields.io/pypi/v/throttler.svg)](https://pypi.python.org/pypi/throttler)[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://github.com/uburuntu/throttler/blob/master/LICENSE)[![Python Tests](https://github.com/uburuntu/throttler/actions/workflows/tests.yml/badge.svg)](https://github.com/uburuntu/throttler/actions/workflows/tests.yml)[![codecov](https://codecov.io/gh/uburuntu/throttler/branch/master/graph/badge.svg)](https://codecov.io/gh/uburuntu/throttler)Zero-dependency Python package for easy throttling with asyncio support.&gt; ![Demo](https://i.imgur.com/MyAALZt.gif)## üìù Table of Contents- üéí [Install](#-install)- üõ† [Usage Examples](#-usage-examples)  - [Throttler and ThrottlerSimultaneous](#throttler-and-throttlersimultaneous)    - [Simple Example](#simple-example)    - [API Example](#api-example)  - [ExecutionTimer](#executiontimer)  - [Timer](#timer)- üë®üèªüíª [Author](#-author)- üí¨ [Contributing](#-contributing)- üìù [License](#-license)## üéí InstallJust```shpip install throttler```## üõ† Usage ExamplesAll run-ready examples are [here](examples).### Throttler and ThrottlerSimultaneous**Throttler**:&gt; Context manager for limiting rate of accessing to context block.```pythonfrom throttler import Throttler# Limit to three calls per secondt = Throttler(rate_limit=3, period=1.0)async with t:    pass```Or```pythonimport asynciofrom throttler import throttle# Limit to three calls per second@throttle(rate_limit=3, period=1.0)async def task():    return await asyncio.sleep(0.1)```**ThrottlerSimultaneous**:&gt; Context manager for limiting simultaneous count of accessing to context block.```pythonfrom throttler import ThrottlerSimultaneous# Limit to five simultaneous callst = ThrottlerSimultaneous(count=5)async with t:    pass```Or```pythonimport asynciofrom throttler import throttle_simultaneous# Limit to five simultaneous calls@throttle_simultaneous(count=5)async def task():    return await asyncio.sleep(0.1)```#### Simple Example```pythonimport asyncioimport timefrom throttler import throttle# Limit to two calls per second@throttle(rate_limit=2, period=1.0)async def task():    return await asyncio.sleep(0.1)async def many_tasks(count: int):    coros = [task() for _ in range(count)]    for coro in asyncio.as_completed(coros):        _ = await coro        print(f'Timestamp: {time.time()}')asyncio.run(many_tasks(10))```Result output:```textTimestamp: 1585183394.8141203Timestamp: 1585183394.8141203Timestamp: 1585183395.830335Timestamp: 1585183395.830335Timestamp: 1585183396.8460555Timestamp: 1585183396.8460555...```#### API Example```pythonimport asyncioimport timeimport aiohttpfrom throttler import Throttler, ThrottlerSimultaneousclass SomeAPI:    api_url = 'https://example.com'    def __init__(self, throttler):        self.throttler = throttler    async def request(self, session: aiohttp.ClientSession):        async with self.throttler:            async with session.get(self.api_url) as resp:                return resp    async def many_requests(self, count: int):        async with aiohttp.ClientSession() as session:            coros = [self.request(session) for _ in range(count)]            for coro in asyncio.as_completed(coros):                response = await coro                print(f'{int(time.time())} | Result: {response.status}')async def run():    # Throttler can be of any type    t = ThrottlerSimultaneous(count=5)        # Five simultaneous requests    t = Throttler(rate_limit=10, period=3.0)  # Ten requests in three seconds    api = SomeAPI(t)    await api.many_requests(100)asyncio.run(run())```Result output:```text1585182908 | Result: 2001585182908 | Result: 2001585182908 | Result: 2001585182909 | Result: 2001585182909 | Result: 2001585182909 | Result: 2001585182910 | Result: 2001585182910 | Result: 2001585182910 | Result: 200...```### ExecutionTimer&gt; Context manager for time limiting of accessing to context block. Simply sleep `period` secs before next accessing, not analog of `Throttler`. Also it can align to start of minutes.```pythonimport timefrom throttler import ExecutionTimeret = ExecutionTimer(60, align_sleep=True)while True:    with et:        print(time.asctime(), '|', time.time())```Or```pythonimport timefrom throttler import execution_timer@execution_timer(60, align_sleep=True)def f():    print(time.asctime(), '|', time.time())while True:    f()```Result output:```textThu Mar 26 00:56:17 2020 | 1585173377.1203406Thu Mar 26 00:57:00 2020 | 1585173420.0006166Thu Mar 26 00:58:00 2020 | 1585173480.002517Thu Mar 26 00:59:00 2020 | 1585173540.001494```### Timer&gt; Context manager for pretty printing start, end, elapsed and average times.```pythonimport randomimport timefrom throttler import Timertimer = Timer('My Timer', verbose=True)for _ in range(3):    with timer:        time.sleep(random.random())```Or```pythonimport randomimport timefrom throttler import timer@timer('My Timer', verbose=True)def f():    time.sleep(random.random())for _ in range(3):    f()```Result output:```text#1 | My Timer | begin: 2020-03-26 01:46:07.648661#1 | My Timer |   end: 2020-03-26 01:46:08.382135, elapsed: 0.73 sec, average: 0.73 sec#2 | My Timer | begin: 2020-03-26 01:46:08.382135#2 | My Timer |   end: 2020-03-26 01:46:08.599919, elapsed: 0.22 sec, average: 0.48 sec#3 | My Timer | begin: 2020-03-26 01:46:08.599919#3 | My Timer |   end: 2020-03-26 01:46:09.083370, elapsed: 0.48 sec, average: 0.48 sec```## üë®üèªüíª Author**Ramzan Bekbulatov**:- Telegram: [@rm_bk](https://t.me/rm_bk)- Github: [@uburuntu](https://github.com/uburuntu)## üí¨ ContributingContributions, issues and feature requests are welcome! ## üìù LicenseThis project is [MIT](https://github.com/uburuntu/throttler/blob/master/LICENSE) licensed.</longdescription>
</pkgmetadata>