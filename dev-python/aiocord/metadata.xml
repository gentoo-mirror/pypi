<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A modern API wrapper for Discord.Installation------------.. code-block:: bash         pip install aiocordFeatures--------- **Complete**: Implements the entirety of Discord's services.- **Asynchronous**: Written in pure ``asyncio`` for native parallelism.- **Modular**: Any component (such as HTTP) can be used in isolation.- **Ergonomic**: Comes with extreme purpose-driven data reception and cacehing.- **Interactive**: Supports slash-commands and related utilities out of the box.Example-------Create a ``widget/__init__.py`` file... code-block:: python    import aiocord    @aiocord.widget.callback(aiocord.events.CreateMessage)    async def handle(info, event):        if (message := event.message).author.id == info.client.cache.user.id:            return        await info.client.create_message(message.channel_id, content = f'{message.author.mention()} said {message.content}!')And run the following in your terminal:.. code-block:: bash    aiocord --token &lt;TOKEN&gt; start widgetThis is a simple example to get you started in seconds, but the library covers a vast wealth tools to fit any scenario.Check out the `Documentation &lt;https://aiocord.readthedocs.io&gt;`_'s `Examples &lt;https://aiocord.readthedocs.io/en/latest/pages/examples.html&gt;`_ section for more, such as how to use `Commands &lt;https://aiocord.readthedocs.io/en/latest/pages/examples.html#commands&gt;`_ and `Interactions &lt;https://aiocord.readthedocs.io/en/latest/pages/examples.html#interactions&gt;`_.</longdescription>
</pkgmetadata>