<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;&lt;i&gt;✨ Pysproto ✨ &lt;/i&gt;&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;Another Pythonic Sproto Python binding for &lt;a href=&quot;https://github.com/cloudwu/sproto&quot;&gt;sproto&lt;/a&gt; &lt;/h3&gt;&lt;h3 align=&quot;center&quot;&gt;&lt;i&gt;Powered by cython, high performance, pythonic&lt;/i&gt;&lt;/h3&gt;[![pypi](https://img.shields.io/pypi/v/sproto.svg)](https://pypi.org/project/sproto/)![python](https://img.shields.io/pypi/pyversions/sproto)![implementation](https://img.shields.io/pypi/implementation/sproto)![wheel](https://img.shields.io/pypi/wheel/sproto)![license](https://img.shields.io/github/license/synodriver/sproto.svg)![action](https://img.shields.io/github/workflow/status/synodriver/sproto/build%20wheel)### Usage- install```pip install sproto```- encode &amp; decode```pythonfrom pysproto import parse, parse_ast, Sprotoast = parse(&quot;&quot;&quot;.package {                    type 0 : integer                    session 1 : integer                    }&quot;&quot;&quot;)dump = parse_ast(ast)proto = Sproto(dump)tp = proto.querytype(&quot;package&quot;)encoded = tp.encode({&quot;type&quot;: 1, &quot;session&quot;: 2})print(tp.decode(encoded))```- Public functions```pythonfrom typing import Union, Tuple, Optionalclass Sproto:    def dump(self)-&gt;None: ...    def protocol(self, tag_or_name: Union[int, str]) -&gt; Tuple[Union[int, str], Optional[&quot;SprotoType&quot;], Optional[&quot;SprotoType&quot;]]: ...    def querytype(self, type_name) -&gt; &quot;SprotoType&quot;: ...    def sproto_protoresponse(self, intproto) -&gt; int: ...class SprotoError(Exception): ...class SprotoType:    @classmethod    def __init__(self, *args, **kwargs) -&gt; None: ...    def decode(self, buffer: bytes) -&gt; dict: ...    def encode(self, data: dict) -&gt; bytes: ...    def encode_into(self, data: dict, buffer: bytearray) -&gt; int: ...def pack(data: bytes) -&gt; bytes: ...def pack_into(data: bytes, buffer: bytearray) -&gt; int: ...def unpack(data: bytes) -&gt; bytes: ...def unpack_into(data: bytes, buffer: bytearray) -&gt; int: ...```- ```xx_into``` functions accepts buffer protocol objects, which is zerocopy.</longdescription>
</pkgmetadata>