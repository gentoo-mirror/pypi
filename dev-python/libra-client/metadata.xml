<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>LibraClient is a collection of tools which allows you interact whith [Libra Network](http://libra.org) easily. It provides three ways to access Libra:1. **`libra_shell`**, an interactive shell program. It is compatible with official Libra client. For beginners, it lets you get started directly to try your first transaction with libra without requiring time-consuming downloads and compiles the huge entire Libra project source code.2. **`libra`**, a command line tool. It has a modern colorful text interface and its output is the standard json format. So, it can be integrated to any programming language easily.3. **`python api`**, a collection of apis for client access to libra. For Python programmers, you can call this client side api to interact with Libra Network with more control than by using `libra` command.In following docuement, all command prefix with `$` meants it is typed and run in standard linux shell; all command prefix with `libra%` meants it is typed and run in `libra_shell`.For exmaple, **`$ libra`** meants run `libra` command in linux shell, which is different than **`libra%`**.## InstallationRequire python 3.7 or above installed.```sh$ python3 -m pip install libra-client```If you had a problem during installation, following command should works anyway.```sh$ python3 -m pip install  --index-url https://pypi.org/project/ --user libra-client```## Usage of 'libra_shell'To start 'libra_shell' and connect to a validator node running on the Libra testnet, just input the 'libra_shell' command on termial as shown below.```bash$ libra_shell```Once the client connects to a node on the testnet, you will see the following output.  To quit the client at any time, use the `quit` command.![libra shell](https://github.com/yuan-xy/libra-client/raw/master/docs/shell.jpg &quot;libra shell&quot;)[This document will guide you through executing your first transaction on the Libra Blockchain](https://github.com/yuan-xy/libra-client/blob/master/docs/first_transaction.md). We will walk you through creating accounts for two users.## Usage of 'libra' commandThe command 'libra' contains four subcommands 'account', 'transaction', 'wallet' and 'ledger'. All subcommands have their own parameters.### Leger Time ExampleFor example, using 'ledger' command to query the ledger start time and latest transaction time of testnet:```bash$ libra ledger time```You will get the json output like this:```json{    &quot;start_time&quot;: &quot;2019-10-03T05:19:59&quot;,    &quot;latest_time&quot;: &quot;2019-10-16T17:04:17&quot;}```### Account Balance ExampleTo query the balance of some account by address,```bash$ libra account balance 000000000000000000000000000000000000000000000000000000000a550c18```You will get the balance of that address:```json{    &quot;balance&quot;: 24075309756646968}```### Wallet ExampleTo query the total balance of a wallet,```bash$ libra wallet balance &lt;some mnemonic file of the wallet&gt;```You will get the total balance and balance of every accounts in that wallet:```json{    &quot;7af57a0c206fbcc846532f75f373b5d1db9333308dbc4673c5befbca5db60e2f&quot;: 123,    &quot;f1f48f56c4deea75f4393e832edef247547eb76e1cd498c27cc972073ec4dbde&quot;: 0,    &quot;total_balance&quot;: 123}```### Help message of `libra`If you input `libra` without any parameters as following,```bash$ libra```You will get the help message:```USAGE:libra [options] command [command parameters ...]Optional arguments: -a | --host HOST  Host address/name to connect to. [default:testnet] -p | --port PORT  Admission Control port to connect to. [default: 8000] -v | --verbose Verbose output -V | --version Show program's version number and exit -h | --help Show this help message and exitUse the following commands:account | aAccount query by addresstransaction | tTransaction querywallet | wshow account information of a wallet derived from mnemonic fileledger | lgshow ledger info of Libra blockchain```### Help message of subcommandIf you input the libra subcommand without any parameter, you will get the help message of that subcommand. For example:```bash$ libra wallet```You will get the help message:```USAGE:        wallet &lt;arg&gt;Use one of the following args for this command:show | s &lt;mnemonic_file_path&gt;        Show the mnemonic words, seed and addresses of a walletaccount | a &lt;mnemonic_file_path&gt;        Show the keypair and address of accounts in a walletbalance | b &lt;mnemonic_file_path&gt;        Get the balance of all accounts in a walletcreate | c &lt;mnemonic_file_path&gt;        create a new wallet and save the mnemonic file to &lt;mnemonic_file_path&gt;```More instructions can be found here [libra command help](https://raw.githubusercontent.com/yuan-xy/libra-client/master/docs/cli_help.html).## Client side Libra API for python programmer### WalletYou can create a wallet using `WalletLibrary` class. A wallet is like your masterkey and you can create almost infinitely many Libra accounts from it. Note that LibraClient's mnemonic scheme is compatible with that of [Libra's CLI](https://github.com/libra/libra/tree/master/client/src), so you can import mnemonic between the two libraries.```pyfrom libra_client import WalletLibrary# Create a new random walletwallet = WalletLibrary.new()# Create a new wallet from mnemonic wordswallet = WalletLibrary.new_from_mnemonic(mnemonic, child_count)# Recover wallet from a offical Libra CLI backup filewallet = WalletLibrary.recover(filename)```### AccountAn `Account` can be created by calling `new_account` function on a wallet, each Account has an integer index in wallet, start from zero. An `Account` contains its `address`, `public_key`, and `private_key`.```pyprint(wallet.child_count)account1 = wallet.new_account()print(wallet.child_count)print(account1.address)print(account1.public_key)print(account1.private_key)```### ClientA `Client` must be created in order to send protobuf message to a Libra node. You can create a client with the following code.```pyfrom libra_client import Clientclient1 = Client(&quot;testnet&quot;)  # Default client connecting to the official testnetclient2 = Client.new('localhost', 8000, &quot;validator_file_path&quot;)  # Client connecting to a local node```### Get Account Data of an Address``` plaintext# An account stores its data in a directory structure, for example:#   &lt;Alice&gt;/balance:   10#   &lt;Alice&gt;/a/b/mymap: {&quot;Bob&quot; =&gt; &quot;abcd&quot;, &quot;Carol&quot; =&gt; &quot;efgh&quot;}#   &lt;Alice&gt;/a/myint:   20#   &lt;Alice&gt;/c/mylist:  [3, 5, 7, 9]## If someone needs to query the map above and find out what value associated with &quot;Bob&quot; is,# `address` will be set to Alice and `path` will be set to &quot;/a/b/mymap/Bob&quot;.## On the other hand, if you want to query only &lt;Alice&gt;/a/*, `address` will be set to Alice and# `path` will be set to &quot;/a&quot; and use the `get_prefix()` method from statedb```#### Get Account State Blob of an AddressNo longer supported in json-rpc.#### Get Account State of an AddressIf the Account has been created, you can call `get_account_state` function which return a `AccountState` object with 'ordered_map' field; other wise, AccountError will be thrown.```pyclient = Client(&quot;testnet&quot;)amap = client.get_account_state(address)```#### Get Account Resource of an AddressIf you want to get account balance / sequence / authentication_key etc from account state, you can calling `get_account_resource` function, which will deserialize the account resource from account state map.```pyclient = Client(&quot;testnet&quot;)resource = client.get_account_resource(address)print(resource.sequence_number)print(resource.balance)print(resource.authentication_key)```#### Get Balance of an AddressIf you just want to get the balance of an address, simply call `get_balance` function.```pyclient = Client(&quot;testnet&quot;)balance = client.get_balance(address)```#### Get Sequence Number of an AddressIf you just want to get the sequence number of an address, simply call `get_sequence_number` function.```pyclient = Client(&quot;testnet&quot;)balance = client.get_sequence_number(address)```### Mint Testnet Libra TokenYou can mint testnet libra with `mint_with_faucet` function, which sends a HTTP POST request to [http://faucet.testnet.libra.org](http://faucet.testnet.libra.org).```pyc = Client(&quot;testnet&quot;)c.mint_coins_with_faucet_service(address, 12345, is_blocking=True)```### Creating a Transfer Transaction Script and Sending the TransactionNote that in the official testnet, the Libra node ONLY allows sending [the official transfer transaction script](https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/peer_to_peer_transfer.mvir). In the future, this libra can be extended to support more transaction scripts as well!```pywallet = WalletLibrary.recover('test.wallet')a0 = wallet.accounts[0]a1 = wallet.accounts[1]ret = c.transfer_coin(a0, a1.address, 1234, is_blocking=True)print(ret.ac_status.code)```When is_blocking param is False, the call will return as the transaction is submit to the validator node. When is_blocking param is True, the call will not return until the tranfer is actually executed or transaction waiting timeout.### Query TransactionsGet transaction by version:```pyc = Client(&quot;testnet&quot;)signed_txn = c.get_transaction(1)print(signed_txn.raw_txn)```above code get transaction no.1, the return type is a SignedTransaction.```pyclass SignedTransaction(Struct):    _fields = [        ('raw_txn', RawTransaction),        ('public_key', [Uint8, ED25519_PUBLIC_KEY_LENGTH]),        ('signature', [Uint8, ED25519_SIGNATURE_LENGTH])    ]```To get a list of transactions:```pyc = Client(&quot;testnet&quot;)c.get_transactions(start_version, limit)```### Query EventsTo get the latest 2 events send by an address:```pyc = Client(&quot;testnet&quot;)events = c.get_latest_events_sent(address, 2)```To get the latest 2 events received by an address:```pyc = Client(&quot;testnet&quot;)events = c.get_latest_events_received(address, 2)```Query events sent from an address, start from start_sequence_number(count begin with 0), get limit number of events, direction is ascending/descending:```pyget_events_sent(self, address, start_sequence_number, ascending=True, limit=1)```Query events received from an address, start from start_sequence_number(count begin with 0), get limit number of events, direction is ascending/descending:```pyget_events_received(self, address, start_sequence_number, ascending=True, limit=1)```</longdescription>
</pkgmetadata>