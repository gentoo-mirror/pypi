<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/flyte/upnpclient.svg?branch=develop)](https://travis-ci.org/flyte/upnpclient)uPnPclient============_uPnP client library for Python 3._This library can be used to discover and consume uPnP devices and their services.It's originally based on [Ferry Boender's work](https://github.com/fboender/pyupnpclient) and his blog post entitled [Exploring UPnP with Python](https://www.electricmonk.nl/log/2016/07/05/exploring-upnp-with-python/).### Installation```bashpip install upnpclient```### UsageTypical usage:```pythonIn [1]: import upnpclientIn [2]: devices = upnpclient.discover()In [3]: devicesOut[3]: [&lt;Device 'OpenWRT router'&gt;, &lt;Device 'Harmony Hub'&gt;, &lt;Device 'walternate: root'&gt;]In [4]: d = devices[0]In [5]: d.WANIPConn1.GetStatusInfo()Out[5]: {'NewConnectionStatus': 'Connected', 'NewLastConnectionError': 'ERROR_NONE', 'NewUptime': 14851479}In [6]: d.WANIPConn1.GetNATRSIPStatus()Out[6]: {'NewNATEnabled': True, 'NewRSIPAvailable': False}In [7]: d.WANIPConn1.GetExternalIPAddress()Out[7]: {'NewExternalIPAddress': '123.123.123.123'}```If you know the URL for the device description XML, you can access it directly.```pythonIn [1]: import upnpclientIn [2]: d = upnpclient.Device(&quot;http://192.168.1.1:5000/rootDesc.xml&quot;)In [3]: d.servicesOut[3]: [&lt;Service service_id='urn:upnp-org:serviceId:Layer3Forwarding1'&gt;, &lt;Service service_id='urn:upnp-org:serviceId:WANCommonIFC1'&gt;, &lt;Service service_id='urn:upnp-org:serviceId:WANIPConn1'&gt;]In [4]: d.Layer3Forwarding1.actionsOut[4]: [&lt;Action 'SetDefaultConnectionService'&gt;, &lt;Action 'GetDefaultConnectionService'&gt;]In [5]: d.Layer3Forwarding1.GetDefaultConnectionService()Out[5]: {'NewDefaultConnectionService': 'uuid:46cb370a-d7f2-490f-ac01-fb0db6c8b22b:WANConnectionDevice:1,urn:upnp-org:serviceId:WANIPConn1'}```Sometimes the service or action name isn't a valid property name. In which case, service and actions can be accessed other ways:```pythonIn [1]: d[&quot;Layer3Forwarding1&quot;][&quot;GetDefaultConnectionService&quot;]()Out[1]: {'NewDefaultConnectionService': 'uuid:46cb370a-d7f2-490f-ac01-fb0db6c8b22b:WANConnectionDevice:1,urn:upnp-org:serviceId:WANIPConn1'}```To view the arguments required to call a given action:```pythonIn [1]: d.WANIPConn1.AddPortMapping.argsdef_inOut[1]: [('NewRemoteHost',  {'allowed_values': set(), 'datatype': 'string', 'name': 'RemoteHost'}), ('NewExternalPort',  {'allowed_values': set(), 'datatype': 'ui2', 'name': 'ExternalPort'}), ('NewProtocol',  {'allowed_values': {'TCP', 'UDP'},   'datatype': 'string',   'name': 'PortMappingProtocol'}), ('NewInternalPort',  {'allowed_values': set(), 'datatype': 'ui2', 'name': 'InternalPort'}), ('NewInternalClient',  {'allowed_values': set(), 'datatype': 'string', 'name': 'InternalClient'}), ('NewEnabled',  {'allowed_values': set(),   'datatype': 'boolean',   'name': 'PortMappingEnabled'}), ('NewPortMappingDescription',  {'allowed_values': set(),   'datatype': 'string',   'name': 'PortMappingDescription'}), ('NewLeaseDuration',  {'allowed_values': set(),   'datatype': 'ui4',   'name': 'PortMappingLeaseDuration'})]```and then to call the action using those arguments:```pythonIn [1]: d.WANIPConn1.AddPortMapping(   ...:     NewRemoteHost='0.0.0.0',   ...:     NewExternalPort=12345,   ...:     NewProtocol='TCP',   ...:     NewInternalPort=12345,   ...:     NewInternalClient='192.168.1.10',   ...:     NewEnabled='1',   ...:     NewPortMappingDescription='Testing',   ...:     NewLeaseDuration=10000)Out[1]: {}```Similarly, the arguments you can expect to receive in response are listed:```pythonIn [1]: d.WANIPConn1.GetGenericPortMappingEntry.argsdef_outOut[1]: [('NewRemoteHost',  {'allowed_values': set(), 'datatype': 'string', 'name': 'RemoteHost'}), ('NewExternalPort',  {'allowed_values': set(), 'datatype': 'ui2', 'name': 'ExternalPort'}), ('NewProtocol',  {'allowed_values': {'TCP', 'UDP'},   'datatype': 'string',   'name': 'PortMappingProtocol'}), ('NewInternalPort',  {'allowed_values': set(), 'datatype': 'ui2', 'name': 'InternalPort'}), ('NewInternalClient',  {'allowed_values': set(), 'datatype': 'string', 'name': 'InternalClient'}), ('NewEnabled',  {'allowed_values': set(),   'datatype': 'boolean',   'name': 'PortMappingEnabled'}), ('NewPortMappingDescription',  {'allowed_values': set(),   'datatype': 'string',   'name': 'PortMappingDescription'}), ('NewLeaseDuration',  {'allowed_values': set(),   'datatype': 'ui4',   'name': 'PortMappingLeaseDuration'})]```#### HTTP Auth/HeadersYou may pass a[requests compatible](http://docs.python-requests.org/en/master/user/authentication/)authentication object and/or a dictionary containing headers to use on the HTTPcalls to your uPnP device.These may be set on the `Device` itself on creation for use with every HTTPcall:```pythondevice = upnpclient.Device(    &quot;http://192.168.1.1:5000/rootDesc.xml&quot;    http_auth=('myusername', 'mypassword'),    http_headers={'Some-Required-Header': 'somevalue'})```Or on a per-call basis:```pythondevice.Layer3Forwarding1.GetDefaultConnectionService(    http_auth=('myusername', 'mypassword'),    http_headers={'Some-Required-Header': 'somevalue'})```If you've set either at `Device` level, they can be overridden per-call bysetting them to `None`.</longdescription>
</pkgmetadata>