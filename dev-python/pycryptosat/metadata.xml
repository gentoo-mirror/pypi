<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pycryptosat SAT solverThis directory provides Python bindings to CryptoMiniSat on the C++ level,i.e. when importing pycryptosat, the CryptoMiniSat solver becomes part of thePython process itself.## Installing```pip install pycryptosat```## CompilingIf you don't want to use the pip package, you can compile it as:```apt-get install python-devpython -m build```To help with debug, you can also:```python setup.py bdist_wheel```## UsageThe `pycryptosat` module has one object, `Solver` that has two functions`solve` and `add_clause`.The funcion `add_clause()` takes an iterable list of literals such as`[1, 2]` which represents the truth `1 or 2 = True`. For example,`add_clause([1])` sets variable `1` to `True`.The function `solve()` solves the system of equations that have been addedwith `add_clause()`:```&gt;&gt;&gt; from pycryptosat import Solver&gt;&gt;&gt; s = Solver()&gt;&gt;&gt; s.add_clause([1, 2])&gt;&gt;&gt; sat, solution = s.solve()&gt;&gt;&gt; print satTrue&gt;&gt;&gt; print solution(None, True, True)```The return value is a tuple. First part of the tuple indicates whether theproblem is satisfiable. In this case, it's `True`, i.e. satisfiable. The secondpart is a tuple contains the solution, preceded by None, so you can index intoit with the variable number. E.g. `solution[1]` returns the value forvariable `1`.The `solve()` method optionally takes an argument `assumptions` thatallows the user to set values to specific variables in the solver in a temporaryfashion. This means that in case the problem is satisfiable but e.g it'sunsatisfiable if variable 2 is FALSE, then `solve([-2])` will returnUNSAT. However, a subsequent call to `solve()` will still return a solution.If instead of an assumption `add_clause()` would have been used, subsequent`solve()` calls would have returned unsatisfiable.`Solver` takes the following keyword arguments:  * `time_limit`: the time limit (integer)  * `confl_limit`: the propagation limit (integer)  * `verbose`: the verbosity level (integer)Both `time_limit` and `confl_limit` set a budget to the solver. The former is based on time elapsed while the former is based on number of conflicts met during search. If the solver runs out of budget, it returns with `(None, None)`. If both limits are used, the solver will terminate whenever one of the limits are hit (whichever first). Warning: Results from `time_limit` may differ from run to run, depending on compute load, etc. Use `confl_limit` for more reproducible runs.## ExampleLet us consider the following clauses, represented usingthe DIMACS `cnf &lt;http://en.wikipedia.org/wiki/Conjunctive_normal_form&gt;`_format::```p cnf 5 31 -5 4 0-1 5 3 4 0-3 -4 0```Here, we have 5 variables and 3 clauses, the first clause being(x\ :sub:`1`  or not x\ :sub:`5` or x\ :sub:`4`).Note that the variable x\ :sub:`2` is not used in any of the clauses,which means that for each solution with x\ :sub:`2` = True, we mustalso have a solution with x\ :sub:`2` = False.  In Python, each clause ismost conveniently represented as a list of integers.  Naturally, it makessense to represent each solution also as a list of integers, where the signcorresponds to the Boolean value (+ for True and - for False) and theabsolute value corresponds to i\ :sup:`th` variable::```&gt;&gt;&gt; import pycryptosat&gt;&gt;&gt; solver = pycryptosat.Solver()&gt;&gt;&gt; solver.add_clause([1, -5, 4])&gt;&gt;&gt; solver.add_clause([-1, 5, 3, 4])&gt;&gt;&gt; solver.add_clause([-3, -4])&gt;&gt;&gt; solver.solve()(True, (None, True, False, False, True, True))```This solution translates to: x\ :sub:`1` = x\ :sub:`4` = x\ :sub:`5` = True,x\ :sub:`2` = x\ :sub:`3` = False# Special options (e.g. LARGEMEM, etc)In case you need to e.g. have LARGEMEM, you must modify `setup.py` and add `'-DLARGE_OFFSETS'` to `extra_compile_args`. Similarly for other options.</longdescription>
</pkgmetadata>