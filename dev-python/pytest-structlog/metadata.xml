<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|actions|_ |pypi|_ |pyversions|_ |womm|_.. |actions| image:: https://github.com/wimglenn/pytest-structlog/actions/workflows/tests.yml/badge.svg.. _actions: https://github.com/wimglenn/pytest-structlog/actions/workflows/tests.yml/.. |pypi| image:: https://img.shields.io/pypi/v/pytest-structlog.svg.. _pypi: https://pypi.org/project/pytest-structlog.. |pyversions| image:: https://img.shields.io/pypi/pyversions/pytest-structlog.svg.. _pyversions:.. |womm| image:: https://cdn.rawgit.com/nikku/works-on-my-machine/v0.2.0/badge.svg.. _womm: https://github.com/nikku/works-on-my-machinepytest-structlog================Structured logging assertions.  pytest_ + structlog_ = ``pytest-structlog``.|pytest|    |structlog|Installation:-------------.. code-block:: bash   $ pip install pytest-structlogUsage:------The fixture name is ``log``. It has two attributes of interest: ``log.events`` is a list of events from captured log calls, and ``log.has`` is a helper function for asserting a single event was logged within the expected context.Suppose you have some library module, ``your_lib``, which is using ``structlog``:.. code-block:: python   # your_lib.py   from structlog import get_logger   logger = get_logger()   def spline_reticulator():       logger.info(&quot;reticulating splines&quot;)       for i in range(3):           logger.debug(&quot;processing&quot;, spline=i)       logger.info(&quot;reticulated splines&quot;, n_splines=3)Then your test suite might use assertions such as shown below:.. code-block:: python   # test_your_lib.py   from your_lib import spline_reticulator   def test_spline_reticulator(log):       assert len(log.events) == 0       spline_reticulator()       assert len(log.events) == 5       # can assert on the event only       assert log.has(&quot;reticulating splines&quot;)       # can assert with subcontext       assert log.has(&quot;reticulated splines&quot;)       assert log.has(&quot;reticulated splines&quot;, n_splines=3)       assert log.has(&quot;reticulated splines&quot;, n_splines=3, level=&quot;info&quot;)       # but not incorrect context       assert not log.has(&quot;reticulated splines&quot;, n_splines=42)       assert not log.has(&quot;reticulated splines&quot;, key=&quot;bogus&quot;)       # can assert with the event dicts directly       assert log.events == [           {&quot;event&quot;: &quot;reticulating splines&quot;, &quot;level&quot;: &quot;info&quot;},           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 0},           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 1},           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 2},           {&quot;event&quot;: &quot;reticulated splines&quot;, &quot;level&quot;: &quot;info&quot;, &quot;n_splines&quot;: 3},       ]       # can use membership to check for a single event's data       assert {&quot;event&quot;: &quot;reticulating splines&quot;, &quot;level&quot;: &quot;info&quot;} in log.events       # can use &gt;= to specify only the events you're interested in       assert log.events &gt;= [           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 0},           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 2},       ]       # or put the comparison the other way around if you prefer       assert [           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 0},           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 2},       ] &lt;= log.events       # note: comparisons are order sensitive!       assert not [           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 2},           {&quot;event&quot;: &quot;processing&quot;, &quot;level&quot;: &quot;debug&quot;, &quot;spline&quot;: 0},       ] &lt;= log.events.. _pytest: https://docs.pytest.org/.. _structlog: https://www.structlog.org/.. |pytest| image:: https://user-images.githubusercontent.com/6615374/46903931-515eef00-cea2-11e8-8945-980ddbf0a053.png.. |structlog| image:: https://user-images.githubusercontent.com/6615374/46903937-5b80ed80-cea2-11e8-9b85-d3f071180fe1.png</longdescription>
</pkgmetadata>