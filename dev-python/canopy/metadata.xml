<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Installation### VersioningThis library uses [SimVer](http://simver.org/) versioning, where a change in the major version number indicates abreaking change and a change in the minor version number indicates a non-breaking change (such as an additionalfeature or bug fix).### ChangelogThe changelog is available [here](CHANGELOG.md).### Requirements.This library has been tested on Python 3.6 and higher.### pip install```shpip install canopy```You may need to run `pip` with root permission: `sudo pip install canopy`.From a Jupyter Notebook you can run `!pip install canopy`.### SetuptoolsInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).```shpython setup.py install --user```(or `sudo python setup.py install` to install the package for all users)### Running TestsUnit tests can be run with:```pytest canopy```Integration tests can be run with:```pytest integration_tests```To run the integration tests you'll need to ensure you have an environment variable called `CANOPY_PYTHON_INTEGRATION_TEST_CREDENTIALS`containing the string `&lt;client_id&gt;|&lt;client_secret&gt;|&lt;username&gt;|&lt;tenant_name&gt;|&lt;password&gt;`.# Getting Started## Example UsageSee the [Canopy Python Examples](https://github.com/CanopySimulations/canopy-python-examples) repository for example usage.## IntroductionThis package is designed for customers of [Canopy Simulations](https://www.canopysimulations.com/) who would liketo access the Canopy API from Python, for example using Jupyter Notebooks.Currently the library is split into two parts: - The client generated using the OpenAPI toolset is located in the &quot;canopy/openapi&quot; folder.   We don't have a great deal of control over how this code looks, but it should give a fairly complete interface to the main API. - One folder up from that in the &quot;canopy&quot; folder we are adding helper functions which wrap common use cases in simple functions.   You can also use these functions as a reference to using the OpenAPI generated code.When using the library you generally start by creating a `canopy.Session` object. The session object manages authentication, and the caching of user settings.Calling `session.authentication.authenticate()` before calling OpenAPI generated client functions ensures that you areauthenticated and that any expired access tokens are refreshed.Our helper functions will handle calling `authenticate` before making any calls, so if you are only using ourhelper functions you won't need to call it yourself.The `session` should generally be created once per application. It will automatically dispose itself when the applicationshuts down. Alternatively you can enclose it in an `async with` or a `with` block if you need to create multiple sessions,as shown in the examples below. If you are using the OpenAPI generated code then you can pass the `session.async_client` or `session.sync_client` into the OpenAPI generated API client instance as the `api_client` parameter as shown below. Passing in `async_client` will cause it to use`asyncio`, and you will need to `await` the calls. Passing in `sync_client` will cause the calls to complete synchronously.Our helper functions all use `asyncio` for efficient parallelisation of downloads, and must therefore be awaited.The following example shows how to create a session and request some output channels from a study using our helper function:```pythonimport canopyimport asyncioasync with canopy.Session(client_id='&lt;your_client_id&gt;', username='&lt;your_username&gt;') as session:    study_data = await canopy.load_study(session, '&lt;study_id&gt;', 'DynamicLap', ['sRun', 'vCar'])    # Using the OpenAPI generated client directly:    study_api = canopy.openapi.StudyApi(session.async_client)    job_result = await study_api.study_get_study_job_metadata(        session.authentication.tenant_id,        '&lt;study_id&gt;',        0)    # Using asyncio.ensure_future() to enable us to perform multiple calls in parallel    job_result_task = asyncio.ensure_future(study_api.study_get_study_job_metadata(        session.authentication.tenant_id,        '&lt;study_id&gt;',        0))    job_result_2 = await job_result_task```When running this code you will be prompted for your client secret and your password if it is the first time `session.authentication.authenticate()` has been called for this session instance. Alternativelyyou can pass the client secret and password into the Session class (after fetching them from a secure location) toavoid being prompted.If you can't use `asyncio` and `async/await` you can instead instantiate the session object synchronously and use the `canopy.run` method when calling our async helper methods. You can pass `session.sync_client` into the OpenAPI client classes instead of `session.async_client` to make them return results synchronously.```pythonimport canopywith canopy.Session(client_id='&lt;your_client_id&gt;', username='&lt;your_username&gt;') as session:    # Note we are using canopy.run(..) to force the async method to run synchronously.    # This is a wrapper for asyncio.get_event_loop().run_until_complete(..).    study_data = canopy.run(canopy.load_study(session, '&lt;study_id&gt;', 'DynamicLap', ['sRun', 'vCar']))    # Using the OpenAPI generated client synchronously by passing in sync_client:    study_api = canopy.openapi.StudyApi(session.sync_client)    job_result = study_api.study_get_study_job_metadata(        session.authentication.tenant_id,        '&lt;study_id&gt;',        0)    # You can still run synchronous OpenAPI client methods asynchronously using threads if you need to:    job_result_thread = study_api.study_get_study_job_metadata(        session.authentication.tenant_id,        '&lt;study_id&gt;',        0,        async_req=True)    job_result_2 = job_result_thread.get()```## Proxy ServersYou can configure your proxy server by passing in a `proxy` argument to the `canopy.Session` object:```pythonasync with canopy.Session(authentication_data, proxy=canopy.ProxyConfiguration('http://some.proxy.com', 'user', 'pass')) as session:``` # Updating the OpenAPI ClientThis needs to be tidied up, improved, and automated.Additional options can be found here: https://openapi-generator.tech/docs/generators/openapi/ - e.g. enumUnknownDefaultCase could be useful if the remaining exposed enums change in future. You can use the Dockerfile in this repository to create a docker image to generate the new API stubs:```shdocker image build -t canopy-python-gen:1 .docker container run -i -t --mount type=bind,src='&lt;path&gt;/&lt;to&gt;/canopy/canopy-python',dst=/canopy/repo canopy-python-gen:1 /bin/bash``````shjava -jar openapi-generator-cli.jar generate -g python-legacy -i https://api.canopysimulations.com/swagger/v1/swagger.json -o ./gen --package-name &quot;canopy.openapi&quot;rm -r repo/canopy/openapirm -r repo/docscp -r gen/canopy/openapi repo/canopycp -r gen/docs repocp -r gen/README.md repo/OPENAPI_README.md```To regenerate the `asyncio` files execute:```shrm -r genjava -jar openapi-generator-cli.jar generate -g python-legacy -i https://api.canopysimulations.com/swagger/v1/swagger.json -o ./gen --package-name &quot;canopy.openapi&quot; --library asynciomv gen/canopy/openapi gen/canopy/openapi_asynciorm -r gen/canopy/openapi_asyncio/apirm -r gen/canopy/openapi_asyncio/modelsrm gen/canopy/openapi_asyncio/configuration.pyrm gen/canopy/openapi_asyncio/exceptions.pysed -i 's/from canopy\.openapi import rest/from canopy.openapi_asyncio import rest/g' gen/canopy/openapi_asyncio/api_client.pysed -i '/from canopy.*/d' gen/canopy/openapi_asyncio/__init__.pysed -i '/# import /d' gen/canopy/openapi_asyncio/__init__.pyecho 'from canopy.openapi_asyncio.api_client import ApiClient' &gt;&gt; gen/canopy/openapi_asyncio/__init__.pycp -r gen/canopy/openapi_asyncio repo/canopy```Note: The `openapi/configuration.py` file will need to be manually modified to add the default API host URL.Note: The `openapi_asyncio/rest.py` file will need to be manually modified to support proxy servers after generation. Note: The `openapi_asyncio/client_api.py` and `openapi/client_api.py` files will need to be manually modified to support numpy array serialization after generation. ## Documentation for OpenAPI Generated ClientOpenAPI generated documentation can be found [here](OPENAPI_README.md).</longdescription>
</pkgmetadata>