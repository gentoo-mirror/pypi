<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>**DO NOT USE, THIS IS PRE-ALPHA, ~HAS NO TESTS~, NO MONITORING, BAD LOGGING**# tclambdaAWS Lambda calling libraryWorks together with functions defined in [tc-sam-cli](https://pypi.org/project/tc-sam-cli/)## Configuration of AWS Lambda```python# app.pyimport tclambdafrom numpy.polynomial.polynomial import polyfit as np_polyfithandler = tclambda.LambdaHandler()@handler.register()def polyfit(*args, **kwargs):    return list(np_polyfit(*args, **kwargs))```The registered handler must return something that is json serializable.## Usage in other projectsConfiguration is primarely done by environmental variables.```shTC_NUMPY_QUEUE=&quot;https://sqs.eu-west-1.amazonaws.com/12345/NumpySqs&quot;TC_NUMPY_BUCKET=&quot;s3-result-bucket&quot;``````pythonfrom tclambda.auto_functions import numpylambda_result = numpy.polyfit([1, 2], [2, 1], 1)print(lambda_result.result())# Output: [2.999999999999998, -0.9999999999999992]```## Retry lambda```pythonimport tclambdaimport requestshandler = tclambda.LambdaHandler()@handler.register()def web_data(*args, **kwargs):    try:        response = requests.get(&quot;https://example.com&quot;)        response.raise_for_status()    except Exception as e:        raise tclambda.RetryException(e)    return response.text```## Error handling### SentryInstall tclambda together with sentry `pip install tclambda[sentry]`Setting up sentry is done automatically through environmental variables.- SENTRY_DSN- SENTRY_RELEASE- SENTRY_ENVIRONMENT# Tests- Create an S3 bucket to test live against- Add `TC_THIS_BUCKET=my-test-s3-bucket` to `.env`- Run `pipenv run test`</longdescription>
</pkgmetadata>