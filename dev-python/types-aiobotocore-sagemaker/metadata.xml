<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;types-aiobotocore-sagemaker&quot;&gt;&lt;/a&gt;# types-aiobotocore-sagemaker[![PyPI - types-aiobotocore-sagemaker](https://img.shields.io/pypi/v/types-aiobotocore-sagemaker.svg?color=blue)](https://pypi.org/project/types-aiobotocore-sagemaker)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-sagemaker.svg?color=blue)](https://pypi.org/project/types-aiobotocore-sagemaker)[![Docs](https://img.shields.io/readthedocs/types-aiobotocore.svg?color=blue)](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_sagemaker/)[![PyPI - Downloads](https://static.pepy.tech/badge/types-aiobotocore-sagemaker)](https://pepy.tech/project/types-aiobotocore-sagemaker)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[aiobotocore.SageMaker 2.7.0](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.19.0](https://github.com/youtype/mypy_boto3_builder).More information can be found on[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in[types-aiobotocore-sagemaker docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_sagemaker/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [types-aiobotocore-sagemaker](#types-aiobotocore-sagemaker)  - [How to install](#how-to-install)    - [From PyPI with pip](#from-pypi-with-pip)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Literals](#literals)    - [Type definitions](#type-definitions)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `types-aiobotocore` for `SageMaker` service.```bash# install with aiobotocore type annotationspython -m pip install 'types-aiobotocore[sagemaker]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'types-aiobotocore-lite[sagemaker]'# standalone installationpython -m pip install types-aiobotocore-sagemaker```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y types-aiobotocore-sagemaker```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `types-aiobotocore[sagemaker]` in your environment:```bashpython -m pip install 'types-aiobotocore[sagemaker]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `aiobotocore` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `types-aiobotocore-lite[sagemaker]` in your environment:```bashpython -m pip install 'types-aiobotocore-lite[sagemaker]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `types-aiobotocore` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `types-aiobotocore` with services you use in your environment:```bashpython -m pip install 'types-aiobotocore[sagemaker]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed  `types-aiobotocore`Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `types-aiobotocore[sagemaker]` with services you use in your  environment:```bashpython -m pip install 'types-aiobotocore[sagemaker]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `types-aiobotocore[sagemaker]` in your environment:```bashpython -m pip install 'types-aiobotocore[sagemaker]'````Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `types-aiobotocore[sagemaker]` in your environment:```bashpython -m pip install 'types-aiobotocore[sagemaker]'```Optionally, you can install `types-aiobotocore` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `aiobotocore` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`SageMakerClient` provides annotations for`session.create_client(&quot;sagemaker&quot;)`.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_sagemaker import SageMakerClientsession = get_session()async with session.create_client(&quot;sagemaker&quot;) as client:    client: SageMakerClient    # now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`types_aiobotocore_sagemaker.paginator` module contains type annotations forall paginators.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_sagemaker import SageMakerClientfrom types_aiobotocore_sagemaker.paginator import (    ListActionsPaginator,    ListAlgorithmsPaginator,    ListAliasesPaginator,    ListAppImageConfigsPaginator,    ListAppsPaginator,    ListArtifactsPaginator,    ListAssociationsPaginator,    ListAutoMLJobsPaginator,    ListCandidatesForAutoMLJobPaginator,    ListCodeRepositoriesPaginator,    ListCompilationJobsPaginator,    ListContextsPaginator,    ListDataQualityJobDefinitionsPaginator,    ListDeviceFleetsPaginator,    ListDevicesPaginator,    ListDomainsPaginator,    ListEdgeDeploymentPlansPaginator,    ListEdgePackagingJobsPaginator,    ListEndpointConfigsPaginator,    ListEndpointsPaginator,    ListExperimentsPaginator,    ListFeatureGroupsPaginator,    ListFlowDefinitionsPaginator,    ListHumanTaskUisPaginator,    ListHyperParameterTuningJobsPaginator,    ListImageVersionsPaginator,    ListImagesPaginator,    ListInferenceExperimentsPaginator,    ListInferenceRecommendationsJobStepsPaginator,    ListInferenceRecommendationsJobsPaginator,    ListLabelingJobsPaginator,    ListLabelingJobsForWorkteamPaginator,    ListLineageGroupsPaginator,    ListModelBiasJobDefinitionsPaginator,    ListModelCardExportJobsPaginator,    ListModelCardVersionsPaginator,    ListModelCardsPaginator,    ListModelExplainabilityJobDefinitionsPaginator,    ListModelMetadataPaginator,    ListModelPackageGroupsPaginator,    ListModelPackagesPaginator,    ListModelQualityJobDefinitionsPaginator,    ListModelsPaginator,    ListMonitoringAlertHistoryPaginator,    ListMonitoringAlertsPaginator,    ListMonitoringExecutionsPaginator,    ListMonitoringSchedulesPaginator,    ListNotebookInstanceLifecycleConfigsPaginator,    ListNotebookInstancesPaginator,    ListPipelineExecutionStepsPaginator,    ListPipelineExecutionsPaginator,    ListPipelineParametersForExecutionPaginator,    ListPipelinesPaginator,    ListProcessingJobsPaginator,    ListResourceCatalogsPaginator,    ListSpacesPaginator,    ListStageDevicesPaginator,    ListStudioLifecycleConfigsPaginator,    ListSubscribedWorkteamsPaginator,    ListTagsPaginator,    ListTrainingJobsPaginator,    ListTrainingJobsForHyperParameterTuningJobPaginator,    ListTransformJobsPaginator,    ListTrialComponentsPaginator,    ListTrialsPaginator,    ListUserProfilesPaginator,    ListWorkforcesPaginator,    ListWorkteamsPaginator,    SearchPaginator,)session = get_session()async with session.create_client(&quot;sagemaker&quot;) as client:    client: SageMakerClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    list_actions_paginator: ListActionsPaginator = client.get_paginator(&quot;list_actions&quot;)    list_algorithms_paginator: ListAlgorithmsPaginator = client.get_paginator(&quot;list_algorithms&quot;)    list_aliases_paginator: ListAliasesPaginator = client.get_paginator(&quot;list_aliases&quot;)    list_app_image_configs_paginator: ListAppImageConfigsPaginator = client.get_paginator(        &quot;list_app_image_configs&quot;    )    list_apps_paginator: ListAppsPaginator = client.get_paginator(&quot;list_apps&quot;)    list_artifacts_paginator: ListArtifactsPaginator = client.get_paginator(&quot;list_artifacts&quot;)    list_associations_paginator: ListAssociationsPaginator = client.get_paginator(        &quot;list_associations&quot;    )    list_auto_ml_jobs_paginator: ListAutoMLJobsPaginator = client.get_paginator(&quot;list_auto_ml_jobs&quot;)    list_candidates_for_auto_ml_job_paginator: ListCandidatesForAutoMLJobPaginator = (        client.get_paginator(&quot;list_candidates_for_auto_ml_job&quot;)    )    list_code_repositories_paginator: ListCodeRepositoriesPaginator = client.get_paginator(        &quot;list_code_repositories&quot;    )    list_compilation_jobs_paginator: ListCompilationJobsPaginator = client.get_paginator(        &quot;list_compilation_jobs&quot;    )    list_contexts_paginator: ListContextsPaginator = client.get_paginator(&quot;list_contexts&quot;)    list_data_quality_job_definitions_paginator: ListDataQualityJobDefinitionsPaginator = (        client.get_paginator(&quot;list_data_quality_job_definitions&quot;)    )    list_device_fleets_paginator: ListDeviceFleetsPaginator = client.get_paginator(        &quot;list_device_fleets&quot;    )    list_devices_paginator: ListDevicesPaginator = client.get_paginator(&quot;list_devices&quot;)    list_domains_paginator: ListDomainsPaginator = client.get_paginator(&quot;list_domains&quot;)    list_edge_deployment_plans_paginator: ListEdgeDeploymentPlansPaginator = client.get_paginator(        &quot;list_edge_deployment_plans&quot;    )    list_edge_packaging_jobs_paginator: ListEdgePackagingJobsPaginator = client.get_paginator(        &quot;list_edge_packaging_jobs&quot;    )    list_endpoint_configs_paginator: ListEndpointConfigsPaginator = client.get_paginator(        &quot;list_endpoint_configs&quot;    )    list_endpoints_paginator: ListEndpointsPaginator = client.get_paginator(&quot;list_endpoints&quot;)    list_experiments_paginator: ListExperimentsPaginator = client.get_paginator(&quot;list_experiments&quot;)    list_feature_groups_paginator: ListFeatureGroupsPaginator = client.get_paginator(        &quot;list_feature_groups&quot;    )    list_flow_definitions_paginator: ListFlowDefinitionsPaginator = client.get_paginator(        &quot;list_flow_definitions&quot;    )    list_human_task_uis_paginator: ListHumanTaskUisPaginator = client.get_paginator(        &quot;list_human_task_uis&quot;    )    list_hyper_parameter_tuning_jobs_paginator: ListHyperParameterTuningJobsPaginator = (        client.get_paginator(&quot;list_hyper_parameter_tuning_jobs&quot;)    )    list_image_versions_paginator: ListImageVersionsPaginator = client.get_paginator(        &quot;list_image_versions&quot;    )    list_images_paginator: ListImagesPaginator = client.get_paginator(&quot;list_images&quot;)    list_inference_experiments_paginator: ListInferenceExperimentsPaginator = client.get_paginator(        &quot;list_inference_experiments&quot;    )    list_inference_recommendations_job_steps_paginator: (        ListInferenceRecommendationsJobStepsPaginator    ) = client.get_paginator(&quot;list_inference_recommendations_job_steps&quot;)    list_inference_recommendations_jobs_paginator: ListInferenceRecommendationsJobsPaginator = (        client.get_paginator(&quot;list_inference_recommendations_jobs&quot;)    )    list_labeling_jobs_paginator: ListLabelingJobsPaginator = client.get_paginator(        &quot;list_labeling_jobs&quot;    )    list_labeling_jobs_for_workteam_paginator: ListLabelingJobsForWorkteamPaginator = (        client.get_paginator(&quot;list_labeling_jobs_for_workteam&quot;)    )    list_lineage_groups_paginator: ListLineageGroupsPaginator = client.get_paginator(        &quot;list_lineage_groups&quot;    )    list_model_bias_job_definitions_paginator: ListModelBiasJobDefinitionsPaginator = (        client.get_paginator(&quot;list_model_bias_job_definitions&quot;)    )    list_model_card_export_jobs_paginator: ListModelCardExportJobsPaginator = client.get_paginator(        &quot;list_model_card_export_jobs&quot;    )    list_model_card_versions_paginator: ListModelCardVersionsPaginator = client.get_paginator(        &quot;list_model_card_versions&quot;    )    list_model_cards_paginator: ListModelCardsPaginator = client.get_paginator(&quot;list_model_cards&quot;)    list_model_explainability_job_definitions_paginator: (        ListModelExplainabilityJobDefinitionsPaginator    ) = client.get_paginator(&quot;list_model_explainability_job_definitions&quot;)    list_model_metadata_paginator: ListModelMetadataPaginator = client.get_paginator(        &quot;list_model_metadata&quot;    )    list_model_package_groups_paginator: ListModelPackageGroupsPaginator = client.get_paginator(        &quot;list_model_package_groups&quot;    )    list_model_packages_paginator: ListModelPackagesPaginator = client.get_paginator(        &quot;list_model_packages&quot;    )    list_model_quality_job_definitions_paginator: ListModelQualityJobDefinitionsPaginator = (        client.get_paginator(&quot;list_model_quality_job_definitions&quot;)    )    list_models_paginator: ListModelsPaginator = client.get_paginator(&quot;list_models&quot;)    list_monitoring_alert_history_paginator: ListMonitoringAlertHistoryPaginator = (        client.get_paginator(&quot;list_monitoring_alert_history&quot;)    )    list_monitoring_alerts_paginator: ListMonitoringAlertsPaginator = client.get_paginator(        &quot;list_monitoring_alerts&quot;    )    list_monitoring_executions_paginator: ListMonitoringExecutionsPaginator = client.get_paginator(        &quot;list_monitoring_executions&quot;    )    list_monitoring_schedules_paginator: ListMonitoringSchedulesPaginator = client.get_paginator(        &quot;list_monitoring_schedules&quot;    )    list_notebook_instance_lifecycle_configs_paginator: (        ListNotebookInstanceLifecycleConfigsPaginator    ) = client.get_paginator(&quot;list_notebook_instance_lifecycle_configs&quot;)    list_notebook_instances_paginator: ListNotebookInstancesPaginator = client.get_paginator(        &quot;list_notebook_instances&quot;    )    list_pipeline_execution_steps_paginator: ListPipelineExecutionStepsPaginator = (        client.get_paginator(&quot;list_pipeline_execution_steps&quot;)    )    list_pipeline_executions_paginator: ListPipelineExecutionsPaginator = client.get_paginator(        &quot;list_pipeline_executions&quot;    )    list_pipeline_parameters_for_execution_paginator: (        ListPipelineParametersForExecutionPaginator    ) = client.get_paginator(&quot;list_pipeline_parameters_for_execution&quot;)    list_pipelines_paginator: ListPipelinesPaginator = client.get_paginator(&quot;list_pipelines&quot;)    list_processing_jobs_paginator: ListProcessingJobsPaginator = client.get_paginator(        &quot;list_processing_jobs&quot;    )    list_resource_catalogs_paginator: ListResourceCatalogsPaginator = client.get_paginator(        &quot;list_resource_catalogs&quot;    )    list_spaces_paginator: ListSpacesPaginator = client.get_paginator(&quot;list_spaces&quot;)    list_stage_devices_paginator: ListStageDevicesPaginator = client.get_paginator(        &quot;list_stage_devices&quot;    )    list_studio_lifecycle_configs_paginator: ListStudioLifecycleConfigsPaginator = (        client.get_paginator(&quot;list_studio_lifecycle_configs&quot;)    )    list_subscribed_workteams_paginator: ListSubscribedWorkteamsPaginator = client.get_paginator(        &quot;list_subscribed_workteams&quot;    )    list_tags_paginator: ListTagsPaginator = client.get_paginator(&quot;list_tags&quot;)    list_training_jobs_paginator: ListTrainingJobsPaginator = client.get_paginator(        &quot;list_training_jobs&quot;    )    list_training_jobs_for_hyper_parameter_tuning_job_paginator: (        ListTrainingJobsForHyperParameterTuningJobPaginator    ) = client.get_paginator(&quot;list_training_jobs_for_hyper_parameter_tuning_job&quot;)    list_transform_jobs_paginator: ListTransformJobsPaginator = client.get_paginator(        &quot;list_transform_jobs&quot;    )    list_trial_components_paginator: ListTrialComponentsPaginator = client.get_paginator(        &quot;list_trial_components&quot;    )    list_trials_paginator: ListTrialsPaginator = client.get_paginator(&quot;list_trials&quot;)    list_user_profiles_paginator: ListUserProfilesPaginator = client.get_paginator(        &quot;list_user_profiles&quot;    )    list_workforces_paginator: ListWorkforcesPaginator = client.get_paginator(&quot;list_workforces&quot;)    list_workteams_paginator: ListWorkteamsPaginator = client.get_paginator(&quot;list_workteams&quot;)    search_paginator: SearchPaginator = client.get_paginator(&quot;search&quot;)```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`types_aiobotocore_sagemaker.waiter` module contains type annotations for allwaiters.```pythonfrom aiobotocore.session import get_sessionfrom types_aiobotocore_sagemaker.client import SageMakerClientfrom types_aiobotocore_sagemaker.waiter import (    EndpointDeletedWaiter,    EndpointInServiceWaiter,    ImageCreatedWaiter,    ImageDeletedWaiter,    ImageUpdatedWaiter,    ImageVersionCreatedWaiter,    ImageVersionDeletedWaiter,    NotebookInstanceDeletedWaiter,    NotebookInstanceInServiceWaiter,    NotebookInstanceStoppedWaiter,    ProcessingJobCompletedOrStoppedWaiter,    TrainingJobCompletedOrStoppedWaiter,    TransformJobCompletedOrStoppedWaiter,)session = get_session()async with session.create_client(&quot;sagemaker&quot;) as client:    client: SageMakerClient    # Explicit type annotations are optional here    # Types should be correctly discovered by mypy and IDEs    endpoint_deleted_waiter: EndpointDeletedWaiter = client.get_waiter(&quot;endpoint_deleted&quot;)    endpoint_in_service_waiter: EndpointInServiceWaiter = client.get_waiter(&quot;endpoint_in_service&quot;)    image_created_waiter: ImageCreatedWaiter = client.get_waiter(&quot;image_created&quot;)    image_deleted_waiter: ImageDeletedWaiter = client.get_waiter(&quot;image_deleted&quot;)    image_updated_waiter: ImageUpdatedWaiter = client.get_waiter(&quot;image_updated&quot;)    image_version_created_waiter: ImageVersionCreatedWaiter = client.get_waiter(        &quot;image_version_created&quot;    )    image_version_deleted_waiter: ImageVersionDeletedWaiter = client.get_waiter(        &quot;image_version_deleted&quot;    )    notebook_instance_deleted_waiter: NotebookInstanceDeletedWaiter = client.get_waiter(        &quot;notebook_instance_deleted&quot;    )    notebook_instance_in_service_waiter: NotebookInstanceInServiceWaiter = client.get_waiter(        &quot;notebook_instance_in_service&quot;    )    notebook_instance_stopped_waiter: NotebookInstanceStoppedWaiter = client.get_waiter(        &quot;notebook_instance_stopped&quot;    )    processing_job_completed_or_stopped_waiter: ProcessingJobCompletedOrStoppedWaiter = (        client.get_waiter(&quot;processing_job_completed_or_stopped&quot;)    )    training_job_completed_or_stopped_waiter: TrainingJobCompletedOrStoppedWaiter = (        client.get_waiter(&quot;training_job_completed_or_stopped&quot;)    )    transform_job_completed_or_stopped_waiter: TransformJobCompletedOrStoppedWaiter = (        client.get_waiter(&quot;transform_job_completed_or_stopped&quot;)    )```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`types_aiobotocore_sagemaker.literals` module contains literals extracted fromshapes that can be used in user code for type checking.Full list of `SageMaker` Literals can be found in[docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_sagemaker/literals/).```pythonfrom types_aiobotocore_sagemaker.literals import ActionStatusTypedef check_value(value: ActionStatusType) -&gt; bool: ...```&lt;a id=&quot;type-definitions&quot;&gt;&lt;/a&gt;### Type definitions`types_aiobotocore_sagemaker.type_defs` module contains structures and shapesassembled to typed dictionaries and unions for additional type checking.Full list of `SageMaker` TypeDefs can be found in[docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_sagemaker/type_defs/).```pythonfrom types_aiobotocore_sagemaker.type_defs import ActionSourceTypeDefdef get_value() -&gt; ActionSourceTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for`aiobotocore` updates. It delivers drop-in type annotations for you and makessure that:- All available `aiobotocore` services are covered.- Each public class and method of every `aiobotocore` service gets valid type  annotations extracted from `botocore` schemas.- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`  libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.resource` calls- Auto discovery of types for `session.client` and `session.resource` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`types-aiobotocore-sagemaker` version is the same as related `aiobotocore`version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_sagemaker/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>