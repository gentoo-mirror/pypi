<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Creating Ethereum, Bitcoin and other accounts is complex and fraughtwith potential for loss of funds.A BIP-39 seed recovery phrase helps, but a *single* lapse in securitydooms the account (and all derived accounts, in fact).  If someone findsyour recovery phrase (or you lose it), the accounts derived from thatseed are /gone/.The SLIP-39 standard allows you to split the seed between 1, 2, or moregroups of several mnemonic recovery phrases.  This is better, butcreating such accounts is difficult; presently, only the Trezor supportsthese, and they can only be created &quot;manually&quot;.  Writing down 5 or moresets of 20 words is difficult, error-prone and time consuming.# Hardware Wallet &quot;Seed&quot; Configuration&gt;  Your keys, your Bitcoin.  Not your keys, not your Bitcoin.&gt;  &gt;  ---Andreas AntonopoulosThe [python-slip39][1] project (and the [slip39-app][2]) exists to assist in the safe creation,backup and documentation of Hierarchical Deterministic (HD) Wallet seeds and derived accounts,with various SLIP-39 sharing parameters.  It generates the new random wallet seed, and generatesthe expected standard Ethereum account(s) (at *m/44'/60'/0'/0/0* by default) andBitcoin accounts (at Bech32 derivation path *m/84'/0'/0'/0/0* by default), with wallet address andQR code (compatible with Trezor and Ledger derivations).  It produces the required SLIP-39phrases, and outputs a single PDF containing all the required printable cards to document the seed(and the specified derived accounts).On an secure (ideally air-gapped) computer, new seeds can /safely/ be generated (*without*trusting this program) and the PDF saved to a USB drive for printing (or directly printed withoutthe file being saved to disk.).  Presently, =slip39= can output example ETH, BTC, LTC, DOGE, BSC,and XRP addresses derived from the seed, to /illustrate/ what accounts are associated with thebacked-up seed.  Recovery of the seed to a [trezor-model-t][3] is simple, by entering the mnemonicsright on the device.We also support the backup of existing insecure and unreliable 12- or 24-word BIP-39 MnemonicPhrases as SLIP-39 Mnemonic cards, for existing BIP-39 hardware wallets like the [ledger-nano][4],etc.!  Recover from your existing BIP-39 Seed Phrase Mnemonic, select &quot;Using BIP-39&quot; (and enteryour BIP-39 passphrase), and generate a set of SLIP-39 Mnemonic cards.  Later, use the SLIP-39 Appto recover from your SLIP-39 Mnemonic cards, click &quot;Using BIP-39&quot; to get your BIP-39 Mnemonicback, and use it (and your passphrase) to recover your accounts to your Ledger (or other) hardwarewallet.Output of BIP-38 or JSON encrypted Paper Wallets is also supported, for import into standardsoftware cryptocurrency wallets.[1]: &lt;https://github.com/pjkundert/python-slip39.git&gt; &quot;python-slip39&quot;[2]: &lt;https://slip39.com/app&gt; &quot;SLIP-39 App&quot;[3]: &lt;https://trezor.go2cloud.org/SH1Y&gt; &quot;Trezor Model T&quot;[4]: &lt;https://shop.ledger.com/pages/ledger-nano-x?r=2cd1cb6ae51f&gt; &quot;Ledger Nano&quot;## The SLIP-39 App for Generation and BackupDownload the SLIP-39 App from [slip39-download][5] for Windows (.msi) or macOS (.dmg).The Graphical User Interface (GUI) also supports Linux:    $ python3 -m pip install slip39[gui]    $ slip39-gui![SLIP-39 App GUI][slip39-gui][5]: &lt;https://github.com/pjkundert/python-slip39/releases/latest&gt; &quot;SLIP-39 App Download&quot;[slip39-gui]: https://github.com/pjkundert/python-slip39/raw/master/images/slip39.png &quot;SLIP-39 App GUI&quot;## Generating SLIP-39 on the Command Line    $ python3 -m slip39 -v Personal      # or run: slip39 -v Personal    2022-01-26 13:55:30 slip39           First(1/1): Recover w/ 2 of 4 groups First(1), Second(1), Fam(2/4), Frens(2/6)    2022-01-26 13:55:30 slip39           1st  1 sister     8 cricket   15 unhappy    2022-01-26 13:55:30 slip39                2 acid       9 mental    16 ocean    2022-01-26 13:55:30 slip39                3 acrobat   10 veteran   17 mayor    2022-01-26 13:55:30 slip39                4 romp      11 phantom   18 promise    2022-01-26 13:55:30 slip39                5 anxiety   12 grownup   19 wrote    2022-01-26 13:55:30 slip39                6 laser     13 skunk     20 romp    2022-01-26 13:55:30 slip39                7 cricket   14 anatomy    2022-01-26 13:55:30 slip39           Second(1/1): Recover w/ 2 of 4 groups First(1), Second(1), Fam(2/4), Frens(2/6)    2022-01-26 13:55:30 slip39           1st  1 sister     8 belong    15 spirit    2022-01-26 13:55:30 slip39                2 acid       9 survive   16 royal    2022-01-26 13:55:30 slip39                3 beard     10 home      17 often    2022-01-26 13:55:30 slip39                4 romp      11 herd      18 silver    2022-01-26 13:55:30 slip39                5 again     12 mountain  19 grocery    2022-01-26 13:55:30 slip39                6 orbit     13 august    20 antenna    2022-01-26 13:55:30 slip39                7 very      14 evening    2022-01-26 13:55:30 slip39           Fam(2/4): Recover w/ 2 of 4 groups First(1), Second(1), Fam(2/4), Frens(2/6)    2022-01-26 13:55:30 slip39           1st  1 sister     8 rainbow   15 husky    2022-01-26 13:55:30 slip39                2 acid       9 swing     16 crowd    2022-01-26 13:55:30 slip39                3 ceramic   10 credit    17 learn    2022-01-26 13:55:30 slip39                4 roster    11 piece     18 priority    2022-01-26 13:55:30 slip39                5 already   12 puny      19 hand    2022-01-26 13:55:30 slip39                6 quiet     13 senior    20 watch    2022-01-26 13:55:30 slip39                7 erode     14 listen    2022-01-26 13:55:30 slip39           2nd  1 sister     8 holy      15 revenue    2022-01-26 13:55:30 slip39                2 acid       9 execute   16 junction    2022-01-26 13:55:30 slip39                3 ceramic   10 lift      17 elite    2022-01-26 13:55:30 slip39                4 scared    11 spark     18 flexible    2022-01-26 13:55:30 slip39                5 domestic  12 yoga      19 inform    2022-01-26 13:55:30 slip39                6 exact     13 medical   20 predator    2022-01-26 13:55:30 slip39                7 finger    14 grief    ...    2022-01-26 13:55:30 slip39           ETH    m/44'/60'/0'/0/0    : 0x8FBCe53111817DcE01F9f4C4A6319eA1Ca0c3bf1    2022-01-26 13:55:30 slip39           BTC    m/84'/0'/0'/0/0     : bc1q6u7qk0tepkxdm8wkhpqzwwy0w8zfls9yvghaxq    ...    2022-01-26 13:55:30 slip39           Wrote SLIP39-encoded wallet for 'Personal' to: Personal-2022-01-26+13.55.30-ETH-0x8FBCe53111817DcE01F9f4C4A6319eA1Ca0c3bf1.pdf## Recover from SLIP-39 MnemonicsLater, if you need to recover the Ethereum wallet, keep entering SLIP-39 mnemonics until the secretis recovered (invalid/duplicate mnemonics will be ignored):    $ python3 -m slip39.recovery -v      # or run: slip39-recovery -v    Enter 1st SLIP-39 mnemonic: sister acid acrobat romp anxiety laser cricket cricket mental veteran phantom grownup skunk anatomy unhappy ocean mayor promise wrote romp    2021-12-29 13:24:25 slip39.recovery  Could not recover SLIP-39 master secret with 1 supplied mnemonics: Insufficient number of mnemonic groups. The required number of groups is 2.    Enter 2nd SLIP-39 mnemonic: a bc    2021-12-29 13:24:53 slip39.recovery  Could not recover SLIP-39 master secret with 2 supplied mnemonics: Invalid mnemonic word 'a'.    Enter 3rd SLIP-39 mnemonic: sister acid ceramic roster already quiet erode rainbow swing credit piece puny senior listen husky crowd learn priority hand watch    2021-12-29 13:24:58 slip39.recovery  Could not recover SLIP-39 master secret with 3 supplied mnemonics: Invalid mnemonic word 'a'.    Enter 4th SLIP-39 mnemonic: sister acid ceramic scared domestic exact finger holy execute lift spark yoga medical grief revenue junction elite flexible inform predator    2021-12-29 13:25:14 slip39.recovery  Recovered SLIP-39 secret with 3 (1st, 3rd, 4th) of 4 supplied mnemonics    2021-12-29 13:25:14 slip39.recovery  Recovered SLIP-39 secret; To re-generate, send it to: python3 -m slip39 --secret -    32448aabb50cb6b022fdf17d960720dfFinally, regenerate the Ethereum wallet, perhaps including an encrypted JSON wallet file for importinto a software wallet; note that the same Ethereum wallet address 0x8FBC...3bf1 is recovered:    $ python3 -m slip39 --secret 32448aabb50cb6b022fdf17d960720df --json -    2022-01-26 14:06:14 slip39           It is recommended to not use '-s|--secret &lt;hex&gt;'; specify '-' to read from input    2022-01-26 14:06:14 slip39           ETH    m/44'/60'/0'/0/0    : 0x8FBCe53111817DcE01F9f4C4A6319eA1Ca0c3bf1    2022-01-26 14:06:14 slip39           BTC    m/84'/0'/0'/0/0     : bc1q6u7qk0tepkxdm8wkhpqzwwy0w8zfls9yvghaxq    JSON key file password:    2022-01-26 14:06:21 slip39           Wrote JSON SLIP39's encrypted ETH wallet 0x8FBCe53111817DcE01F9f4C4A6319eA1Ca0c3bf1                                                 derived at m/44'/60'/0'/0/0 to: SLIP39-2022-01-26+14.06.14-ETH-0x8FBCe53111817DcE01F9f4C4A6319eA1Ca0c3bf1.json    2022-01-26 14:06:21 slip39           Wrote SLIP39-encoded wallet for '' to: SLIP39-2022-01-26+14.06.14-ETH-0x8FBCe53111817DcE01F9f4C4A6319eA1Ca0c3bf1.pdfThe whole toolchain is suitable for pipelining:    $ python3 -m slip39 --text --no-card -q \        | sort -r \        | python3 -m slip39.recovery \        | python3 -m slip39 --secret - --no-card -q    2021-12-28 10:55:17 slip39           ETH m/44'/60'/0'/0/0    : 0x68dD9B59D5dF605f4e9612E8b427Ab31187E2C54    2021-12-28 10:55:18 slip39.recovery  Recovered SLIP-39 secret with 4 (1st, 2nd, 7th, 8th) of 8 supplied mnemonics    2021-12-28 10:55:18 slip39           ETH m/44'/60'/0'/0/0    : 0x68dD9B59D5dF605f4e9612E8b427Ab31187E2C54## SLIP-39 Mnemonic Cards PDFHere's an example of PDF containing the SLIP-39 recovery mnemonic cards produced:![SLIP-39 Mnemonic Cards PDF][slip39-cards]If desired, you can output encrypted &quot;Paper Wallets&quot;, compatible for import into standard softwarecryptocurrency wallets (BIP-38 for Bitcoin, etc., and standard JSON wallets for Ethereum):![Encrypted Paper Wallets PDF][slip39-wallets][slip39-cards]: https://github.com/pjkundert/python-slip39/raw/master/images/slip39-cards.png &quot;SLIP-39 Mnemonic Cards PDF&quot;[slip39-wallets]: https://github.com/pjkundert/python-slip39/raw/master/images/slip39-wallets.png &quot;Encrypted Paper Wallets PDF&quot;</longdescription>
</pkgmetadata>