<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyproject:[![PyPI version](https://badge.fury.io/py/pyproject-generator.svg)](https://badge.fury.io/py/pyproject-generator)![PyPI - Downloads](https://img.shields.io/pypi/dm/pyproject)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)![Tests](https://github.com/CangyuanLi/pyproject/actions/workflows/tests.yaml/badge.svg)![Coverage](https://github.com/CangyuanLi/pyproject/blob/master/assets/coverage.svg)## What is it?**pyproject** is a command line utility to setup and distribute Python packages.# Usage:## Dependencies- [platformdirs](https://pypi.org/project/platformdirs/) - Install configuration files in the correct location- [rich](https://pypi.org/project/rich/) - Beautiful terminal output## InstallingThe easiest way is to install **pyproject** is from PyPI using pip:```shpip install pyproject-generator```Afterwards, a pyproject command will be exposed on your system.## Initializing a ProjectSimply run```shpyproject init {project_name}```to create your project folder. It will automatically setup a package structure, virtualenvironment, and install packages.![](https://raw.githubusercontent.com/CangyuanLi/pyproject/master/assets/demo.gif)The final project structure looks like```sh├── .git├── .github│   └── workflows│       └── tests.yml├── .gitignore├── .pre-commit-config.yaml├── LICENSE├── README.md├── benchmarks│   └── benchmark.py├── pyproject.toml├── requirements_dev.txt├── setup.cfg├── src│   └── myproject│       ├── __init__.py│       ├── __version__.py│       └── py.typed├── tests│   └── test_myproject.py└── tox.ini```## Configuring pyproject-generator**pyproject** also allows you to configure your author name, email, Github URL,PyPI username and password, and a list of default dependencies that you want to install.Please note that your credentials are simply stored locally as plaintext.If you do not wish to store them, you can simply pass them in manuallyvia the --pypi_username and --pypi_password flags, or run without any flags and typethem in as required. To configure, run```shpyproject config --author=&quot;&quot; --email=&quot;&quot; --github_url=&quot;&quot; --pypi_username=&quot;&quot; --pypi_password=&quot;&quot;```You may set dependencies one of three ways. In all cases, pass in a comma-delimitedstring (for multiple dependencies) or a string (for one dependency).You can set the dependencies, which overrides the default settings.```shpyproject config --set_dependencies=&quot;white,ruff,mypy&quot;```You may add dependencies:```shpyproject config --add_dependencies=&quot;django&quot;```And you may remove dependencies:```shpyproject config --remove_dependencies=&quot;pre-commit&quot;```Note that these flags also work with the `init` action. `config` merely does the workof saving them locally to be re-used later.## Uploading a Project**pyproject** also supplies an upload function. Run```shpyproject upload```to build and upload your package to PyPI.</longdescription>
</pkgmetadata>