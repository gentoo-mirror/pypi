<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========validictory===========:warning: **:warning: As of 2018 this library is deprecated, please consider using jsonschema (https://pypi.python.org/pypi/jsonschema) instead.**.. image:: https://travis-ci.org/jamesturk/validictory.svg?branch=master    :target: https://travis-ci.org/jamesturk/validictory.. image:: https://coveralls.io/repos/jamesturk/validictory/badge.png?branch=master    :target: https://coveralls.io/r/jamesturk/validictory.. image:: https://img.shields.io/pypi/v/validictory.svg    :target: https://pypi.python.org/pypi/validictory.. image:: https://readthedocs.org/projects/validictory/badge/?version=latest    :target: https://readthedocs.org/projects/validictory/?badge=latest    :alt: Documentation StatusA general purpose Python data validator.Works with Python 2.7 and Python 3.3+Schema format based on JSON Schema Proposal (http://json-schema.org)Contains code derived from jsonschema, by Ian Lewis and Yusuke Muraoka.Usage=====JSON documents and schema must first be loaded into a Python dictionary typebefore it can be validated.Parsing a simple JSON document::    &gt;&gt;&gt; import validictory    &gt;&gt;&gt;    &gt;&gt;&gt; validictory.validate(&quot;something&quot;, {&quot;type&quot;:&quot;string&quot;})Parsing a more complex JSON document::    &gt;&gt;&gt; import json    &gt;&gt;&gt; import validictory    &gt;&gt;&gt;    &gt;&gt;&gt; data = json.loads('[&quot;foo&quot;, {&quot;bar&quot;:[&quot;baz&quot;, null, 1.0, 2]}]')    &gt;&gt;&gt; schema = {    ...   &quot;type&quot;:&quot;array&quot;,    ...   &quot;items&quot;:[    ...     {&quot;type&quot;:&quot;string&quot;},    ...     {&quot;type&quot;:&quot;object&quot;,    ...      &quot;properties&quot;:{    ...        &quot;bar&quot;:{    ...          &quot;items&quot;:[    ...            {&quot;type&quot;:&quot;string&quot;},    ...            {&quot;type&quot;:&quot;any&quot;},    ...            {&quot;type&quot;:&quot;number&quot;},    ...            {&quot;type&quot;:&quot;integer&quot;}    ...          ]    ...        }    ...      }    ...    }    ...   ]    ... }    &gt;&gt;&gt; validictory.validate(data,schema)Catch ValueErrors to handle validation issues::    &gt;&gt;&gt; import validictory    &gt;&gt;&gt;    &gt;&gt;&gt; try:    ...     validictory.validate(&quot;something&quot;, {&quot;type&quot;:&quot;string&quot;,&quot;minLength&quot;:15})    ... except ValueError, error:    ...     print(error)    ...    Length of value 'something' for field '_data' must be greater than or equal to 15You can read more in the official documentation at `Read the Docs &lt;http://validictory.readthedocs.org/en/latest/&gt;`_.</longdescription>
</pkgmetadata>