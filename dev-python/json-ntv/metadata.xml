<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### *JSON-NTV (named and typed value) : a semantic format for interoperability**JSON-NTV is a universal representation format. It allows the sharing and conversion of any type of data (NTV format).*         *The NTV format is part of the [Environmental Sensing Project](https://github.com/loco-philippe/Environmental-Sensing#readme)*# NTV    Today, the semantic level of shared data remains low. It is very often limited to the type of data defined in the exchange formats (strings for CSV formats; numbers, strings, arrays and objects for JSON formats).The proposed consists of adding a type and a name to the data exchanged (see also the [presentation document](./documentation/JSON-NTV-standard.pdf)).With this evolution any data, whatever its semantic level, can be identified, shared and interpreted in a consistent way.The implementation of a type with a nested structure facilitates its appropriation.Finally, compatibility with existing JSON structures allows progressive deployment.# NTV structureThe constructed entities (called NTV for *named typed value*) are therefore a triplet with one mandatory element (the value in JSON format) and two optional elements (name, type).&gt;&gt; *For example, the location of Paris can be represented by:*&gt; - *a name: &quot;Paris&quot;,*&gt; - *a type: the coordinates of a point according to the GeoJSON format,*&gt; - *a value: [ 2.3522, 48.8566]*The easiest way to add this information into a JSON-value is to use a JSON-object with a single member using the syntax [JSON-ND](https://github.com/glenkleidon/JSON-ND) for the first term of the member and the JSON-value for the second term of the member.&gt;&gt; *For the example above, the JSON representation is:*    &gt; *```{ &quot;paris:point&quot; : [2.3522, 48.8566] }```*With this approach, two NTV entities are defined:- a primitive entity which is not composed of any other entity (NTV-single),- a structured entity which is an ordered sequence of NTV entities (Ntv-list).      as well as two JSON formats:- simple format when the name and the type are not present (this is the usual case of CSV data),- named format when the name or type is present (see example above for an NTV-single entity and below for a structured entity).&gt;&gt; *Example of an entity composed of two other entities:*&gt; - *```{ &quot;cities::point&quot;: [[2.3522, 48.8566], [4.8357, 45.7640]] }``` for an unnamed NTV-list entity*&gt; - *```{ &quot;cities::point&quot;: { &quot;paris&quot;:[2.3522, 48.8566], &quot;lyon&quot;:[4.8357, 45.7640] } }``` for a named NTV-list entity*&gt;&gt; *Note: This syntax can also be used for CSV file headers*The type incorporates a notion of `namespaces` that can be nested.&gt; *For example, the type: &quot;ns1.ns2.type&quot; means that:*&gt; - *ns1. is a namespace defined in the global namespace,*&gt; - *ns2. is a namespace defined in the ns1 namespace.,*&gt; - *type is defined in the ns2 namespace.*        This structuring of type makes it possible to reference any type of data that has a JSON representation and to consolidate all the shared data structures within the same tree of types.# NTV and JSONThe flowchart below explain how to convert and exchange native entities through NTV and JSON format.```mermaidflowchart LR    text[&quot;#10240;#10240;JSON#10240;#10240;\ntext&quot;]    val[&quot;#10240;JSON-NTV#10240;\nvalue&quot;]    ntv[&quot;#10240;#10240;#10240;NTV#10240;#10240;#10240;\nentity&quot;]    nat[&quot;#10240;native#10240;\nentity&quot;]    text---&gt;|JSON load|val    val---&gt;|JSON dump|text    val---&gt;|NTV from JSON|ntv    ntv---&gt;|from NTV|nat    ntv---&gt;|NTV to JSON|val    nat---&gt;|to NTV|ntv```# Documentation and installation- [Specification](https://github.com/loco-philippe/NTV/tree/main/documentation/README.md)- [Example](https://github.com/loco-philippe/NTV/tree/main/example/README.md)- [Python Connectors documentation](https://loco-philippe.github.io/NTV/json_ntv.html)- [installation and package](https://github.com/loco-philippe/NTV/tree/main/json_ntv/README.md)### ***If you are interested challenge us !*** We will be very happy to show you the relevance of our approach</longdescription>
</pkgmetadata>