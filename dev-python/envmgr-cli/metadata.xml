<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>envmgr |pypi| |travis| |appveyor| |dockerautomated| |dockerpulls|=================================================================A cross-platform CLI client for `EnvironmentManager &lt;https://github.com/trainline/environment-manager&gt;`__.. figure:: https://github.com/trainline/envmgr-cli/raw/master/example.gif   :alt: envmgr exampleInstall-------::    pip install envmgr-cliSee `Configuration`_ for further install instructions.Usage-----*envmgr* is designed to provide an intuitive, human readable interfacearound the lower level `Environment Manager PythonLibrary &lt;https://github.com/trainline/python-environment_manager/&gt;`__All ``envmgr`` commands are exposed behind a set of verbs (*get* astatus, *schedule* some downtime, *wait* for an ASG, etc). Verbs arealways the first value provided to ``envmgr`` and there is only ever oneverb per command.docopt^^^^^^The cli interface is described in `docopt &lt;http://docopt.org/%5D&gt;`__.The easiest way to discover and understand the different usage patternsavailable is to simply run::    envmgr --helpOutput^^^^^^By default, ``envmgr`` commands will output a human friendly responseuseful for testing single commands at a time. To help scripting orchaining results together, all commands also accept a ``--json``argument which will return the raw JSON response from EnvironmentManager:::    &gt;&gt; envmgr schedule asg my-asg on in prod    Scheduled 1 instance in my-asg to: ON    &gt;&gt; envmgr schedule asg my-asg on in prod --json    {&quot;ChangedInstances&quot;: [&quot;i-0afe2276909859130&quot;], &quot;ChangedAutoScalingGroups&quot;: [&quot;my-asg&quot;]}Examples--------*In the examples below, assume that 'prod-1' is an environment, 'AwesomeService' is aservice and 'my-asg' is an ASG, all of which are already registered inEnvironment Manager.*.. code-block:: bash    # Get the health status of all instances of AwesomeService, in all slices:    envmgr get AwesomeService health in prod-1    # Get the the active slice information for the AwesomeService service in prod-1 environment:    envmgr get AwesomeService active slice in prod-1    # Get the status of the my-asg ASG in the prod-1 environment. Status is calculated as an aggregate of all instances in the ASG:    envmgr get asg my-asg status in prod-1    # Get the schedule value set on the my-asg ASG in the prod-1 environment. Note this will tell you what the schedule is configured to - not the current state according to the schedule:    envmgr get asg my-asg schedule in prod-1    # Get the current status of the deployment with ID a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994:    envmgr get deploy status a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994    # Block and wait until the deployment with ID a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994 either succeeds or fails:    envmgr wait-for deploy a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994    # Block and wait until all instances in the ASG my-asg are ready fordeployment (In Service):    envmgr wait-for asg my-asg in prod-1    # Block and wait until the service AwesomeService is running with all healthchecks passing:    envmgr wait-for healthy AwesomeService in prod-1    # Set the schedule of the ASG my-asg in prod-1 to be off permanently until further notice:    envmgr schedule asg my-asg off in prod-1    # Publish the file build-22.zip as version 1.2.9 of AwesomeService:    envmgr publish build-22.zip as AwesomeService 1.2.9    # Deploy the published version 1.2.9 of AwesomeService into the prod-1 environment:    envmgr deploy AwesomeService 1.2.9 in prod-1    # Toggle the upstreams for AwesomeService in the prod-1 environment:    envmgr toggle AwesomeService in prod-1    # Get the Windows patch status for servers belonging to A-Team in prod-1:    envmgr get A-team patch status in prod-1Configuration-------------Authentication^^^^^^^^^^^^^^All calls to Environment Manager require authentication, which can beprovided in 1 of 2 ways.Either export your credentials as environment variables:::    ENVMGR_USER=myusername    ENVMGR_PASS=mypa$$wordOr provide a ``--user`` and ``--pass`` value to each commad:::    envmgr get MyService health in prod --user=&quot;sarah&quot; --pass=&quot;pa$$word&quot;*Note: It's recommended to only use this method in CI environments.*Host Config^^^^^^^^^^^The hostname of your Environment Manager instance is configuredsimilarly to your credentials:Export your hostname as an environment variable:::    ENVMGR_HOST=environmentmanager.acme.comOr provide the hostname with each command:::    envmgr get MyService health in prod --host=environmentmanager.acme.comDevelopment-----------To install all test dependencies and run all tests, simply run:::    python setup.py test [--adopts -v]For convenience this is also available via the included `makefile`:::    make testDocker------If you want, you can use our automated container buildsUsage^^^^^::    docker run -it --rm \    -e ENVMGR_USER=user    -e ENVMGR_PASS=password    -e ENVMGR_HOST=foo.bar    trainline/envmgr-cli:latest envmgr {YOUR_ARGS}Example^^^^^^^::    ~$ docker run -it --rm trainline/envmgr-cli envmgr --version    1.9.1Build^^^^^::    docker build -t {YOUR_NAME}/envmgr-cli ... |appveyor| image:: https://ci.appveyor.com/api/projects/status/w50g5yb1fh4qh3rq/branch/master?svg=true    :target: https://ci.appveyor.com/project/duncanhall/envmgr-cli/branch/master.. |travis| image:: https://travis-ci.org/trainline/envmgr-cli.svg?branch=master    :target: https://travis-ci.org/trainline/envmgr-cli.. |pypi| image:: https://img.shields.io/badge/python-2.7%2C%203.4%2C%203.5%2C%203.6-blue.svg    :target: https://pypi.python.org/pypi/envmgr-cli.. |dockerautomated| image:: https://img.shields.io/docker/automated/trainline/envmgr-cli.svg    :target: https://hub.docker.com/r/trainline/envmgr-cli.. |dockerpulls| image:: https://img.shields.io/docker/pulls/trainline/envmgr-cli.svg    :target: https://hub.docker.com/r/trainline/envmgr-cli</longdescription>
</pkgmetadata>