<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>qm.py=====![build](https://github.com/tomas789/quine-mccluskey-tomas789/actions/workflows/python-package.yml/badge.svg)A Python implementation of the Quine McCluskey algorithm.This implementation of the Quine McCluskey algorithm has no inherent limits(other than the calculation time) on the size of the inputs.Also, in the limited tests of the author of this module, this implementation isconsiderably faster than other public Python implementations for non-trivialinputs.Another unique feature of this implementation is the possibility to use the XORand XNOR operators, in addition to the normal AND operator, to minimise theterms. This slows down the algorithm, but in some cases the result can be muchmore compact than a sum of product.## InstallationThe recommanded way of installing this package is by using pip```bashpython3 -m pip install quine-mccluskey-tomas789```Note that on Windows you might need to use the `py` command instead.```bashpy -m pip install quine-mccluskey-tomas789```There are some othere means of installing the package which are recommanded only in specific cases.### Development build```bashpython3 -m pip install -e .```### Build wheel files locallyMake sure you have the latest version of PyPA's build installed:```bashpython3 -m pip install --upgrade build```Now run this command from the same directory where pyproject.toml is located:```bashpython3 -m build```This command should output a lot of text and once completed should generate two files in the dist directory:```textdist/├── quine_mccluskey_tomas789-1.0-py2.py3-none-any.whl└── quine_mccluskey_tomas789-1.0.tar.gz```Wheel file can then be distributed via your own means and installed using pip```bashpython3 -m pip install dist/quine_mccluskey_tomas789-1.0-py2.py3-none-any.whl```## Running tests### Unit testsThe library comes with a basic set of unit tests. They can be executed using `pytest````bashpytest```### Fuzz testingWe also have a fuzz testing. It generates random formulas, simplifies them and checks that the result is correct. ```bash➜  quine-mccluskey-tomas789 git:(main) python fuzz.py   Checked 24300 formulas and found 0 errors.Checked 48400 formulas and found 0 errors.Checked 72300 formulas and found 0 errors.Checked 96300 formulas and found 0 errors.Testing formulas ... ⠋ 0:00:44```</longdescription>
</pkgmetadata>