<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>multiset========This package provides a multiset_ implementation for python.|pypi| |coverage| |build| |docs|Overview--------A multiset is similar to the builtin set_, but it allows an element to occur multiple times.It is an unordered collection of elements which have to be hashable just like in a set_.It supports the same methods and operations as set_ does, e.g. membership test, union, intersection, and(symmetric) difference::    &gt;&gt;&gt; set1 = Multiset('aab')    &gt;&gt;&gt; set2 = Multiset('abc')    &gt;&gt;&gt; sorted(set1 | set2)    ['a', 'a', 'b', 'c']Multisets can be used in combination with sets_::    &gt;&gt;&gt; Multiset('aab') &gt;= {'a', 'b'}    TrueMultisets are mutable::    &gt;&gt;&gt; set1.update('bc')    &gt;&gt;&gt; sorted(set1)    ['a', 'a', 'b', 'b', 'c']There is an immutable version similar to the frozenset_ which is also hashable::    &gt;&gt;&gt; set1 = FrozenMultiset('abc')    &gt;&gt;&gt; set2 = FrozenMultiset('abc')    &gt;&gt;&gt; hash(set1) == hash(set2)    True    &gt;&gt;&gt; set1 is set2    FalseThe implementation is based on a dict_ that maps the elements to their multiplicity in the multiset.Hence, some dictionary operations are supported.In contrast to the `collections.Counter`_ from the standard library, it has proper support for setoperations and only allows positive counts. Also, elements with a zero multiplicity are automaticallyremoved from the multiset.Installation------------Installing `multiset` is simple with `pip &lt;http://www.pip-installer.org/&gt;`_::    $ pip install multisetDocumentation-------------The documentation is available at `Read the Docs`_... _`Read the Docs`: http://multiset.readthedocs.io/API Documentation.................If you are looking for information on a particular method of the Multiset class, have a look at the`API Documentation`_. It is automatically generated from the docstrings... _`API Documentation`: http://multiset.readthedocs.io/en/latest/api.htmlLicense-------Licensed under the MIT_ license... _multiset: https://en.wikipedia.org/wiki/Multiset.. _set: https://docs.python.org/3.10/library/stdtypes.html#set-types-set-frozenset.. _sets: set_.. _frozenset: set_.. _dict: https://docs.python.org/3.10/library/stdtypes.html#mapping-types-dict.. _`collections.Counter`: https://docs.python.org/3.10/library/collections.html#collections.Counter.. _MIT: https://opensource.org/licenses/MIT.. |pypi| image:: https://img.shields.io/pypi/v/multiset.svg?style=flat-square&amp;label=latest%20stable%20version    :target: https://pypi.python.org/pypi/multiset    :alt: Latest version released on PyPi.. |coverage| image:: https://coveralls.io/repos/github/wheerd/multiset/badge.svg?branch=master    :target: https://coveralls.io/github/wheerd/multiset?branch=master    :alt: Test coverage.. |build| image:: https://github.com/wheerd/multiset/workflows/Tests/badge.svg?branch=master    :target: https://github.com/wheerd/multiset/actions?query=workflow%3ATests    :alt: Build status of the master branch.. |docs| image:: https://readthedocs.org/projects/multiset/badge/?version=latest    :target: http://multiset.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status</longdescription>
</pkgmetadata>