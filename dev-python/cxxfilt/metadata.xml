<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>cxxfilt |ci|============.. |ci| image:: https://github.com/afq984/python-cxxfilt/actions/workflows/test.yml/badge.svg    :target: https://github.com/afq984/python-cxxfilt/actions/workflows/test.ymlDemangling C++ symbols in Python / interface to abi::__cxa_demangleUsage-----Install::    pip install cxxfiltUse ``demangle`` to demangle a C++ mangled symbol name::    &gt;&gt;&gt; import cxxfilt    &gt;&gt;&gt; cxxfilt.demangle('_ZNSt22condition_variable_anyD2Ev')    'std::condition_variable_any::~condition_variable_any()'Non-mangled name will be kept intact::    &gt;&gt;&gt; cxxfilt.demangle('main')    'main'To demangle an internal symbol, use `external_only=False`::    &gt;&gt;&gt; cxxfilt.demangle('N3foo12BarExceptionE')    'N3foo12BarExceptionE'    &gt;&gt;&gt; cxxfilt.demangle('N3foo12BarExceptionE', external_only=False)    'foo::BarException'Invalid mangled names will trigger an ``InvalidName`` exception::    &gt;&gt;&gt; cxxfilt.demangle('_ZQQ')    Traceback (most recent call last):      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;      File &quot;/path/to/python-cxxfilt/cxxfilt/__init__.py&quot;, line 77, in demangle        return demangleb(mangled_name.encode()).decode()      File &quot;/path/to/python-cxxfilt/cxxfilt/__init__.py&quot;, line 69, in demangleb        raise InvalidName(mangled_name)    cxxfilt.InvalidName: b'_ZQQ'Use ``demangleb`` to demangle name in ``bytes``::    &gt;&gt;&gt; cxxfilt.demangleb(b'_ZNSt22condition_variable_anyD2Ev')    b'std::condition_variable_any::~condition_variable_any()'Make custom `Demangler` objects to use specific C/C++ libraries::    &gt;&gt;&gt; from ctypes.util import find_library    &gt;&gt;&gt;    &gt;&gt;&gt; d = cxxfilt.Demangler(find_library('c'), find_library('stdc++'))    &gt;&gt;&gt; d    &lt;Demangler libc='libc.so.6' libcxx='libstdc++.so.6'&gt;    &gt;&gt;&gt;    &gt;&gt;&gt; d = cxxfilt.Demangler(find_library('c'), find_library('c++'))    &gt;&gt;&gt; d    &lt;Demangler libc='libc.so.6' libcxx='libc++.so.1'&gt;    &gt;&gt;&gt; d.demangle('_ZNSt22condition_variable_anyD2Ev')    'std::condition_variable_any::~condition_variable_any()'Supported environments----------------------Python 3.6 or greater.Tested on Linux and macOS (see github actions). Should work on unix systems with libc and libc++/libstdc++.Will not work on Windows (PR welcome though).For Python 2.7 please use cxxfilt version &lt; 0.3.Changelog---------0.3.0~~~~~*   Added ``Demangler`` class.*   ``import cxxfilt`` no longer fails when there are no C/C++ libraries available.    To check whether the default demangler is valid,    use the expression: ``not isinstance(cxxfilt.default_demangler, cxxfilt.DeferedErrorDemangler)``.Testing-------run in shell::    pytest</longdescription>
</pkgmetadata>