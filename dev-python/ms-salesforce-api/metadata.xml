<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># How to contributeAfter clone repository## 1.- Install dependencies```bashpoetry install```## 2.- Run test```bashmake test```## 3.- Run lint```bashmake lint &amp;&amp; make isort```## How to publish new versionOnce we have done a merge of our Pull request and we have the updated master branch we can generate a new version. For them we have 3 commands that change the version of our library and generate the corresponding tag so that the Bitbucket pipeline starts and publishes our library automatically.```bashmake release-patch``````bashmake release-minor``````bashmake release-major```# How worksThis project provides an API for querying Salesforce opportunities data and transforming it into an easy-to-use format. The API is built upon the `SalesforceQueryExecutor` and `Project` classes, with the latter inheriting from `SalesforceQueryExecutor`.## InstallationMake sure you have **Python 3.8+** installed. Then, install the required dependencies using `poetry`:```bashpoetry install ms-salesforce-api```# TestingTo run the unit tests, simply execute the following command:```bashmake test```This will run all the tests and display the results. Make sure that all tests pass before using the API in a production environment.## UsageFirst, import the necessary classes:```pythonfrom ms_salesforce_api.salesforce.project import Project```Then, initialize the `Project` class with your Salesforce credentials:```pythonproject = Project(    client_id=&quot;your_client_id&quot;,    username=&quot;your_username&quot;,    domain=&quot;your_domain&quot;,    private_key=&quot;your_private_key&quot;,    audience=&quot;https://login.salesforce.com&quot;, # Default value    session_duration_hours=1, # Default value    api_version='57.0',  # Default value)```Now, you can call the get_all method with a query to get the opportunities data:```pythonopportunities = project.get_all()```The opportunities variable will contain an array of opportunity objects with the transformed data. For example:```python[ {    &quot;account_assigment_group&quot;: None,    &quot;account_billing_address&quot;: &quot;C/ XXX XXX, 8 Planta 9ª, 28020, Spain&quot;,    &quot;account_billing_city&quot;: None,    &quot;account_billing_country&quot;: &quot;ES&quot;,    &quot;account_billing_postal_code&quot;: &quot;28020&quot;,    &quot;account_billing_state_code&quot;: None,    &quot;account_billing_street&quot;: &quot;C/ XXX XXX, 8 Planta 9ª&quot;,    &quot;account_business_function&quot;: &quot;XXXX&quot;,    &quot;account_business_name&quot;: &quot;XXXXXX&quot;,    &quot;account_cif&quot;: &quot;ESXXXXXXX&quot;,    &quot;account_company_invoicing&quot;: &quot;2411&quot;,    &quot;account_created_date&quot;: &quot;2022-03-28T09:05:44.000+0000&quot;,    &quot;account_currency_code&quot;: &quot;&quot;,    &quot;account_fax&quot;: None,    &quot;account_invoicing_email&quot;: None,    &quot;account_mail_invoicing&quot;: None,    &quot;account_name&quot;: &quot;XXXXXXXX&quot;,    &quot;account_office&quot;: &quot;XXXXXXXX&quot;,    &quot;account_payment_terms&quot;: &quot;T030&quot;,    &quot;account_pec_email&quot;: None,    &quot;account_phone&quot;: None,    &quot;account_sap_id&quot;: &quot;10001210&quot;,    &quot;account_tax_category&quot;: None,    &quot;account_tax_classification&quot;: None,    &quot;account_tax_id_type&quot;: &quot;ES0&quot;,    &quot;account_tier&quot;: &quot;T1&quot;,    &quot;account_website&quot;: None,    &quot;amount&quot;: 0,    &quot;billing_lines&quot;: [        {            &quot;billing_amount&quot;: 274.33,            &quot;billing_date&quot;: &quot;2022-01-31&quot;,            &quot;billing_period_ending_date&quot;: &quot;2022-03-31&quot;,            &quot;billing_period_starting_date&quot;: &quot;2022-01-01&quot;,            &quot;billing_plan_amount&quot;: &quot;274.33&quot;,            &quot;billing_plan_billing_date&quot;: &quot;2022-01-31&quot;,            &quot;billing_plan_item&quot;: &quot;0&quot;,            &quot;billing_plan_service_end_date&quot;: &quot;2022-03-31&quot;,            &quot;billing_plan_service_start_date&quot;: &quot;2022-01-01&quot;,            &quot;created_date&quot;: &quot;2022-07-08T10:07:08.000+0000&quot;,            &quot;currency&quot;: &quot;EUR&quot;,            &quot;hourly_price&quot;: None,            &quot;id&quot;: &quot;XXXXXXXXXXXX&quot;,            &quot;last_modified_date&quot;: &quot;2023-05-04T12:24:25.000+0000&quot;,            &quot;name&quot;: &quot;BL-XXXXXXXX&quot;,            &quot;project_id&quot;: &quot;YYYYYYYYYYYYY&quot;,            &quot;revenue_dedication&quot;: None,        }    ],    &quot;controller_email&quot;: &quot;employee@makingscience.com&quot;,    &quot;controller_sub_email&quot;: &quot;&quot;,    &quot;cost_center&quot;: &quot;0220001800&quot;,    &quot;created_at&quot;: &quot;2021-10-06T14:35:18.000+0000&quot;,    &quot;currency&quot;: &quot;EUR&quot;,    &quot;invoicing_country_code&quot;: &quot;ES&quot;,    &quot;jira_task_url&quot;: &quot;&lt;a href=https://makingscience.atlassian.net/browse/ESMSBD0001-1080 target=_blank&gt;View Jira Task&lt;/a&gt;&quot;,    &quot;last_updated_at&quot;: &quot;2023-06-08T11:22:55.000+0000&quot;,    &quot;lead_source&quot;: &quot;Employee Referral&quot;,    &quot;operation_coordinator_email&quot;: &quot;employee@makingscience.com&quot;,    &quot;operation_coordinator_sub_email&quot;: &quot;&quot;,    &quot;opportunity_name&quot;: &quot;Branding Campaign&quot;,    &quot;opportunity_percentage&quot;: 100.0,    &quot;profit_center&quot;: &quot;200018&quot;,    &quot;project_code&quot;: &quot;ESMSEX01652&quot;,    &quot;project_id&quot;: &quot;a003X00001WS2YHQA1&quot;,    &quot;project_line_items&quot;: [        {            &quot;country&quot;: &quot;Spain&quot;,            &quot;created_date&quot;: &quot;2022-05-05T12:28:48.000+0000&quot;,            &quot;effort&quot;: None,            &quot;ending_date&quot;: &quot;2022-03-31&quot;,            &quot;id&quot;: &quot;a0V7U000001OdiUUAS&quot;,            &quot;last_modified_date&quot;: &quot;2023-06-08T11:20:42.000+0000&quot;,            &quot;ms_pli_name&quot;: &quot;Omnichannel_ESMSEx01652_ES&quot;,            &quot;product_name&quot;: &quot;Advertising Lead Gen Proj&quot;,            &quot;quantity&quot;: None,            &quot;starting_date&quot;: &quot;2022-01-01&quot;,            &quot;total_price&quot;: 0.0,            &quot;unit_price&quot;: 2230.99,        }    ],    &quot;project_name&quot;: &quot;BrandingCampaignPilotESMSEx01652&quot;,    &quot;project_start_date&quot;: &quot;2021-12-01&quot;,    &quot;project_tier&quot;: &quot;Unkown&quot;,    &quot;stage&quot;: &quot;Closed Won&quot;,}]```You can customize the query as needed to retrieve different data from Salesforce.```pythonquery = &quot;SELECT Id, Name FROM Project WHERE Project.Id = 'ESMS0000'&quot;opportunities = project.get_all(query=query)```# Export dataThis library allow to export all opportunities data to a external database such Postgres and BigQuery.Podemos importar cualquiera de las clases:```pythonfrom ms_salesforce_api.salesforce.project.export_data.Bigquery import (    BigQueryExporter,)```o```pythonfrom ms_salesforce_api.salesforce.project.export_data.CloudSQL import (    CloudSQL)```Both classes, when initialized, are in charge of creating the databases and the tables to export the data in case they do not exist.## BigQueryExporterThe Bigquery class provides functionalities to export data to Google BigQuery.|   ℹ️   |   Información   ||:------:|:--------------:||    | The &quot;BigqueryExporter&quot; class needs an environment variable named &quot;**GOOGLE_SERVICE_ACCOUNT_CREDENTIALS**&quot; to exist and its value must be the JSON of the **Service Account** that has permissions to write to **BigQuery** and must be in **base64**|```pythonclass BigqueryExporter:    def __init__(self, project_id: str, dataset_id: str):        &quot;&quot;&quot;        Initializes the Bigquery exporter with the given project ID and dataset ID.        Args:            project_id (str): The ID of the Google Cloud project.            dataset_id (str): The ID of the BigQuery dataset.        &quot;&quot;&quot;```#### Methods* **export_data**(data: List[Dict[str, Any]]) -&gt; NoneExports the provided data to BigQuery.    * data (List[Dict[str, Any]]): This variable has the value of &quot;opportunities&quot; returned by the &quot;get_all&quot; method.* **delete_all_rows**() -&gt; NoneDelete all data for each table (Opportunities, Accounts, Billing line and PLIs). In this way we can have the database updated at all times.## CloudSQLThe CloudSQL class provides functionalities to interact with a Google Cloud SQL database.Constructor```pythonclass CloudSQL:     def __init__(self, host, user, password, dbname, debug_mode=False):        &quot;&quot;&quot;        Connect with a Postgres Database with the given        host name, database name, username, and password.        Args:            host (str): The host name for the Postgres database.            user (str): The username for accessing the database.            password (str): The password for accessing the database.            dbname (str): The name of the database.        &quot;&quot;&quot;```#### Methods* **export_data**(data: List[Dict[str, Any]]) -&gt; NoneExports the provided data to BigQuery.    * data (List[Dict[str, Any]]): This variable has the value of &quot;opportunities&quot; returned by the &quot;get_all&quot; method.* **delete_all_rows**() -&gt; NoneDelete all data for each table (Opportunities, Accounts, Billing line and PLIs). In this way we can have the database updated at all times.</longdescription>
</pkgmetadata>