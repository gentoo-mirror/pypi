<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========Changelog==========|PyPI| |Python| |Downloads|.. |PyPI| image:: https://img.shields.io/pypi/v/changelog    :target: https://pypi.org/project/changelog    :alt: PyPI.. |Python| image:: https://img.shields.io/pypi/pyversions/changelog    :target: https://pypi.org/project/changelog    :alt: PyPI - Python Version.. |Downloads| image:: https://img.shields.io/pypi/dm/changelog    :target: https://pypi.org/project/changelog    :alt: PyPI - DownloadsA `Sphinx &lt;https://www.sphinx-doc.org&gt;`_ extension to generate changelog files.This is an experimental, possibly-not-useful extension that's used by the`SQLAlchemy &lt;http://www.sqlalchemy.org&gt;`_ project and related projects.Configuration=============A sample configuration in ``conf.py`` looks like this::    extensions = [                # changelog extension                'changelog',                # your other sphinx extensions                # ...            ]    # section names - optional    changelog_sections = [&quot;general&quot;, &quot;rendering&quot;, &quot;tests&quot;]    # section css classes - optional    changelog_caption_class = &quot;caption&quot;    # tags to sort on inside of sections - also optional    changelog_inner_tag_sort = [&quot;feature&quot;, &quot;bug&quot;]    # whether sections should be hidden from tags list    changelog_hide_sections_from_tags = False    # whether tags should be hidden from entries    changelog_hide_tags_in_entry = False    # how to render changelog links - these are plain    # python string templates, ticket/pullreq/changeset number goes    # in &quot;%s&quot;    changelog_render_ticket = &quot;http://bitbucket.org/myusername/myproject/issue/%s&quot;    changelog_render_pullreq = &quot;http://bitbucket.org/myusername/myproject/pullrequest/%s&quot;    changelog_render_changeset = &quot;http://bitbucket.org/myusername/myproject/changeset/%s&quot;Usage=====Changelog introduces the ``changelog`` and ``change`` directives::    ====================    Changelog for 1.5.6    ====================    .. changelog::        :version: 1.5.6        :released: Sun Oct 12 2008        .. change::            :tags: general            :tickets: 27          Improved the frobnozzle.        .. change::            :tags: rendering, tests            :pullreq: 8            :changeset: a9d7cc0b56c2          Rendering tests now correctly render.With the above markup, the changes above will be rendered into document sectionsper changelog, then each change within organized into paragraphs, includingspecial markup for tags, tickets mentioned, pull requests, changesets.   The entries willbe grouped and sorted by tag according to the configuration of the ``changelog_sections``and ``changelog_inner_tag_sort`` configurations.A &quot;compound tag&quot; can also be used, if the configuration has a section like this::    changelog_sections = [&quot;orm declarative&quot;, &quot;orm&quot;]Then change entries which contain both the ``orm`` and ``declarative`` tags will begrouped under a section called ``orm declarative``, followed by the ``orm`` section wherechange entries that only have ``orm`` will be placed.Other Markup============The ``:ticket:`` directive will make use of the ``changelog_render_ticket`` markupto render a ticket link::    :ticket:`456`Other things not documented yet===============================* the ``:version:`` directive, which indicates a changelog entry should be  listed in other versions as well* the ``.. changelog_imports::`` directive - reads other changelog.rst files  looking for ``:version:`` directives which apply to this changelog file,  adding those entries to the changelog entries in this file* the ``:include_notes_from:`` symbol - imports all the .rst files in a  directory into the current one so that changes can be one-per-file, makes  git merges possible* the ``changelog release-notes`` command that at release time gathers up  the above-mentioned change-per-file .rst files and renders them into the  main changelog.rst file, running &quot;git rm&quot; on the individual files* the changelog.rst -&gt; markdown converter, used for web guis that want  changelog sections written in markdown* the changelog.rst -&gt; stream per changelog markdown API function, which can  for example stream the changelogs per release to the github releases API</longdescription>
</pkgmetadata>