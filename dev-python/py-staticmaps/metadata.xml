<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># py-staticmapsA python module to create static map images (PNG, SVG) with markers, geodesic lines, etc.## Features- Map objects: pin-style markers, image (PNG) markers, polylines, polygons, (geodesic) circles- Automatic computation of best center + zoom from the added map objects- Several pre-configured map tile providers- Proper tile provider attributions display- On-disc caching of map tile images for faster drawing and reduced load on the tile servers- Non-anti-aliased drawing via `PILLOW`- Anti-aliased drawing via `pycairo` (optional; only if `pycairo` is installed properly)- SVG creation via `svgwrite`## Installation### SVG + non-anti-aliased PNG version```shellpip install py-staticmaps```### SVG + anti-aliased PNG version (via Cairo)```shellpip install py-staticmaps[cairo]````py-staticmaps` uses `pycairo` for creating anti-aliased raster-graphics, so make sure `libcairo2` is installed on your system (on Ubuntu just install the `libcairo2-dev` package, i.e. `sudo apt install libcairo2-dev`).## ExamplesNote: PNG support (e.g. `context.render_cairo(...)`) is only available if the `pycairo` module is installed.### Markers and Geodesic Lines```pythonimport staticmapscontext = staticmaps.Context()context.set_tile_provider(staticmaps.tile_provider_StamenToner)frankfurt = staticmaps.create_latlng(50.110644, 8.682092)newyork = staticmaps.create_latlng(40.712728, -74.006015)context.add_object(staticmaps.Line([frankfurt, newyork], color=staticmaps.BLUE, width=4))context.add_object(staticmaps.Marker(frankfurt, color=staticmaps.GREEN, size=12))context.add_object(staticmaps.Marker(newyork, color=staticmaps.RED, size=12))# render non-anti-aliased pngimage = context.render_pillow(800, 500)image.save(&quot;frankfurt_newyork.pillow.png&quot;)# render anti-aliased png (this only works if pycairo is installed)image = context.render_cairo(800, 500)image.write_to_png(&quot;frankfurt_newyork.cairo.png&quot;)# render svgsvg_image = context.render_svg(800, 500)with open(&quot;frankfurt_newyork.svg&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:    svg_image.write(f, pretty=True)```### Transparent Polygons```pythonimport staticmapscontext = staticmaps.Context()context.set_tile_provider(staticmaps.tile_provider_OSM)freiburg_polygon = [    (47.96881, 7.79045),    (47.96866, 7.78610),    (47.97134, 7.77874),    ...]context.add_object(    staticmaps.Area(        [staticmaps.create_latlng(lat, lng) for lat, lng in freiburg_polygon],        fill_color=staticmaps.parse_color(&quot;#00FF003F&quot;),        width=2,        color=staticmaps.BLUE,    ))# render non-anti-aliased pngimage = context.render_pillow(800, 500)image.save(&quot;freiburg_area.pillow.png&quot;)# render anti-aliased png (this only works if pycairo is installed)image = context.render_cairo(800, 500)image.write_to_png(&quot;freiburg_area.cairo.png&quot;)# render svgsvg_image = context.render_svg(800, 500)with open(&quot;freiburg_area.svg&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:    svg_image.write(f, pretty=True)```### Drawing a GPX Track + Image Marker (PNG)```pythonimport sysimport gpxpyimport staticmapscontext = staticmaps.Context()context.set_tile_provider(staticmaps.tile_provider_ArcGISWorldImagery)with open(sys.argv[1], &quot;r&quot;) as file:    gpx = gpxpy.parse(file)for track in gpx.tracks:    for segment in track.segments:        line = [staticmaps.create_latlng(p.latitude, p.longitude) for p in segment.points]        context.add_object(staticmaps.Line(line))for p in gpx.walk(only_points=True):    pos = staticmaps.create_latlng(p.latitude, p.longitude)    marker = staticmaps.ImageMarker(pos, &quot;start.png&quot;, origin_x=27, origin_y=35)    context.add_object(marker)    break# render non-anti-aliased pngimage = context.render_pillow(800, 500)image.save(&quot;draw_gpx.pillow.png&quot;)# render anti-aliased png (this only works if pycairo is installed)image = context.render_cairo(800, 500)image.write_to_png(&quot;draw_gpx.cairo.png&quot;)```### US State Capitals```pythonimport jsonimport requestsimport staticmapscontext = staticmaps.Context()context.set_tile_provider(staticmaps.tile_provider_OSM)URL = (    &quot;https://gist.githubusercontent.com/jpriebe/d62a45e29f24e843c974/&quot;    &quot;raw/b1d3066d245e742018bce56e41788ac7afa60e29/us_state_capitals.json&quot;)response = requests.get(URL)for _, data in json.loads(response.text).items():    capital = staticmaps.create_latlng(float(data[&quot;lat&quot;]), float(data[&quot;long&quot;]))    context.add_object(staticmaps.Marker(capital, size=5))# render non-anti-aliased pngimage = context.render_pillow(800, 500)image.save(&quot;us_capitals.pillow.png&quot;)# render anti-aliased png (this only works if pycairo is installed)image = context.render_cairo(800, 500)image.write_to_png(&quot;us_capitals.cairo.png&quot;)```### Geodesic Circles```pythonimport staticmapscontext = staticmaps.Context()context.set_tile_provider(staticmaps.tile_provider_StamenToner)center1 = staticmaps.create_latlng(66, 0)center2 = staticmaps.create_latlng(0, 0)context.add_object(staticmaps.Circle(center1, 2000, fill_color=staticmaps.TRANSPARENT, color=staticmaps.RED, width=2))context.add_object(staticmaps.Circle(center2, 2000, fill_color=staticmaps.TRANSPARENT, color=staticmaps.GREEN, width=2))context.add_object(staticmaps.Marker(center1, color=staticmaps.RED))context.add_object(staticmaps.Marker(center2, color=staticmaps.GREEN))# render non-anti-aliased pngimage = context.render_pillow(800, 500)image.save(&quot;geodesic_circles.pillow.png&quot;)# render anti-aliased png (this only works if pycairo is installed)image = context.render_cairo(800, 600)image.write_to_png(&quot;geodesic_circles.cairo.png&quot;)```### Other ExamplesPlease take a look at the command line program which uses the `staticmaps` package: `staticmaps/cli.py`### Dependencies`py-staticmaps` uses- `PILLOW` for rendering raster-graphics- `pycairo` for rendering antialiased raster-graphics (optional!)- `svgwrite` for writing SVG files- `s2sphere` for geo coordinates handling- `geographiclib` for geodesic computations- `appdirs` for finding the user's default cache directory- `requests` for downloading tile files## License[MIT](LICENSE) &amp;copy; 2020-2021 Florian Pigorsch</longdescription>
</pkgmetadata>