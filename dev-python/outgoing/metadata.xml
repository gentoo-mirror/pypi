<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: http://www.repostatus.org/badges/latest/active.svg    :target: http://www.repostatus.org/#active    :alt: Project Status: Active â€” The project has reached a stable, usable          state and is being actively developed... image:: https://github.com/jwodder/outgoing/workflows/Test/badge.svg?branch=master    :target: https://github.com/jwodder/outgoing/actions?workflow=Test    :alt: CI Status.. image:: https://codecov.io/gh/jwodder/outgoing/branch/master/graph/badge.svg    :target: https://codecov.io/gh/jwodder/outgoing.. image:: https://img.shields.io/pypi/pyversions/outgoing.svg    :target: https://pypi.org/project/outgoing/.. image:: https://img.shields.io/github/license/jwodder/outgoing.svg    :target: https://opensource.org/licenses/MIT    :alt: MIT License`GitHub &lt;https://github.com/jwodder/outgoing&gt;`_| `PyPI &lt;https://pypi.org/project/outgoing/&gt;`_| `Documentation &lt;https://outgoing.readthedocs.io&gt;`_| `Issues &lt;https://github.com/jwodder/outgoing/issues&gt;`_| `Changelog &lt;https://github.com/jwodder/outgoing/blob/master/CHANGELOG.md&gt;`_``outgoing`` provides a common interface to multiple different e-mail sendingmethods (SMTP, sendmail, mbox, etc.).  Just construct a sender from aconfiguration file or object, pass it an ``EmailMessage`` instance, and let themagical internet daemons take care of the rest.``outgoing`` itself provides support for only basic sending methods; additionalmethods are provided by extension packages.See `the documentation &lt;https://outgoing.readthedocs.io&gt;`_ for moreinformation.Installation============``outgoing`` requires Python 3.7 or higher.  Just use `pip&lt;https://pip.pypa.io&gt;`_ for Python 3 (You have pip, right?) to install``outgoing`` and its dependencies::    python3 -m pip install outgoingExamples========A sample configuration file:.. code:: toml    [outgoing]    method = &quot;smtp&quot;    host = &quot;mx.example.com&quot;    ssl = &quot;starttls&quot;    username = &quot;myname&quot;    password = { file = &quot;~/secrets/smtp-password&quot; }Sending an e-mail based on a configuration file:.. code:: python    from email.message import EmailMessage    import outgoing    # Construct an EmailMessage object the standard Python way:    msg = EmailMessage()    msg[&quot;Subject&quot;] = &quot;Meet me&quot;    msg[&quot;To&quot;] = &quot;my.beloved@love.love&quot;    msg[&quot;From&quot;] = &quot;me@here.qq&quot;    msg.set_content(        &quot;Oh my beloved!\n&quot;        &quot;\n&quot;        &quot;Wilt thou dine with me on the morrow?\n&quot;        &quot;\n&quot;        &quot;We're having hot pockets.\n&quot;        &quot;\n&quot;        &quot;Love, Me\n&quot;    )    # Construct a sender object based on the default config file (assuming it's    # populated)    with outgoing.from_config_file() as sender:        # Now send that letter!        sender.send(msg)As an alternative to using a configuration file, you can specify an explicitconfiguration by passing the configuration structure to the``outgoing.from_dict()`` method, like so:.. code:: python    from email.message import EmailMessage    import outgoing    # Construct an EmailMessage object using the eletter library    # &lt;https://github.com/jwodder/eletter&gt;:    from eletter import compose    msg1 = compose(        subject=&quot;No.&quot;,        to=[&quot;me@here.qq&quot;],        from_=&quot;my.beloved@love.love&quot;,        text=(            &quot;Hot pockets?  Thou disgusteth me.\n&quot;            &quot;\n&quot;            &quot;Pineapple pizza or RIOT.\n&quot;        ),    )    msg2 = compose(        subject=&quot;I'd like to place an order.&quot;,        to=[&quot;pete@za.aa&quot;],        from_=&quot;my.beloved@love.love&quot;,        text=&quot;I need the usual.  Twelve Hawaiian Abominations to go, please.\n&quot;,    )    SENDING_CONFIG = {        &quot;method&quot;: &quot;smtp&quot;,        &quot;host&quot;: &quot;smtp.love.love&quot;,        &quot;username&quot;: &quot;my.beloved&quot;,        &quot;password&quot;: {&quot;env&quot;: &quot;SMTP_PASSWORD&quot;},        &quot;ssl&quot;: &quot;starttls&quot;,    }    with outgoing.from_dict(SENDING_CONFIG) as sender:        sender.send(msg1)        sender.send(msg2)</longdescription>
</pkgmetadata>