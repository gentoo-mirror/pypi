<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Neuroglancer Python IntegrationThis package provides a Python interface for controlling[Neuroglancer](https://github.com/google/neuroglancer), a web-based 3-dvolumetric data viewer.The following features are supported: - Viewing in-memory NumPy arrays (or any other array type with a similar   interface, including HDF5 arrays loaded through h5py) - Reading and writing the Neuroglancer viewer state from Python - Changing Neuroglancer key and mouse bindings - Defining actions (to be triggered by key or mouse bindings) that cause a   Python callback to be invoked.It starts a local web server for communicating state changes using sockjs,serving a copy of the Neuroglancer client code, and for serving data to theNeuroglancer client if Python data sources are used.## InstallationIt is recommended that you activate a suitable Python virtual environment before installing.Python 3.5 or later is required.You can install the latest published package from [PyPI](https://pypi.org/project/neuroglancer)with:```shellpip install neuroglancer```In most cases, this will use a prebuilt binary wheel, which requires neither node.js (to build theNeuroglancer client) nor a C++ compiler.  If no binary wheel is available for your platform, asource distribution (sdist) will be used instead, which requires a C++ compiler to build but doesnot require node.js (the source distribution includes a prebuilt copy of the Neuroglancer client).### Direct installation from remote git repositoryTo install the latest version from the Neuroglancer git repository, you can use:```shellpip install git+https://github.com/google/neuroglancer```Note that installing from a git repository requires Node.js and a C++ compiler.To install a specific commit `XXXXXXXXX`:```shellpip install git+https://github.com/google/neuroglancer@XXXXXXXXX```In another Python package, you can declare a dependency on a git version using the syntax:```pythonsetup(    name='&lt;package&gt;',    ...,    install_requires=[        ...,        'neuroglancer @ git+https://github.com/google/neuroglancer@XXXXXXXXX',    ],)```### Installation from local checkout of git repositoryYou can also install from a local checkout of the git repository.  Two forms of installation aresupported: normal installation, and an editable installation for development purposes.As with installation from a remote git repository, installation from a local checkout requiresNode.js to build the Neuroglancer client and a C++ compiler to build the C++ mesh generationextension module.#### Normal installationFor normal installation, run the following from the root of the repository:```shellpython setup.py install```That will automatically build the Neuroglancer client using Node.js if it has not already been built(i.e. if `neuroglancer/static/index.html` does not exist).  To rebuild the Neuroglancer clientexplicitly, you can use:```shellpython setup.py bundle_client```or```shellnpm run build-python```Note: Installing from a local checkout using `pip install .` also works, but it may be slowerbecause it makes a full copy of the local directory (https://github.com/pypa/pip/pull/7882),including the possibly-large `.git` and `node_modules` directories.#### Editable installation (for development purposes)During development, an *editable* installation allows the package to be imported directly from thelocal checkout directory:```shellpip install -e .```Any changes you make to the .py source files take effect the next time the package is imported,without the need to reinstall.  If you make changes to the Neuroglancer client, you still need torebuild it with `npm run build-python`.  You can also keep the Neuroglancer client continuouslyup-to-date by running `npm run dev-server-python`.## ExamplesSee the example programs in the [examples/](examples/) directory.  Run themusing the Python interpreter in interactive mode, e.g.```shellpython -i example.py```or using the IPython magic command```%run -i python.py```Do not run an example non-interactively as```shellpython example.py```because then the server will exit immediately.## Mesh generationFor in-memory segmentation volumes, mesh representations of the surface of eachobject can be generated on-demand as they are requested by the client (e.g. dueto the user selecting a segment)## SecurityBy default the server binds only to the `127.0.0.1` address, and for protectionagainst cross-site scripting attacks only accepts requests that include a validrandomly-generated 160-bit secret key.## Test suiteThe test suite can be run using the `tox` command.  Some of the tests require a WebGL2-enabled webbrowser in order to test interaction with the Neuroglancer client.  Both Chrome and Firefox aresupported, but currently due to bugs in Swiftshader, Chrome Headless does not work.  FirefoxHeadless also currently does not support WebGL at all.  On Linux, you can successfully run the testsheadlessly on Firefox using `xvfb-run`.  On other platforms, tests can't be run headlessly.```shell# For headless using Firefox on xvfb (Linux only)sudo apt-get instrall xvfb # On Debian-based systemstox -e firefox-xvfb  # Run tests using non-headless Firefox# For non-headless using Chrometox -e chrome# For non-headless using Firefoxtox -e firefox# To run only tests that do not require a browsertox -e skip-browser-tests```Refer to [tox.ini](../tox.ini) for details of the test procedure.</longdescription>
</pkgmetadata>