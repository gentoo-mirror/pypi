<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;docs/img/dbt-standalone.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;An unaffiliated python interface for dbt Cloud APIs&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://codecov.io/gh/dpguthrie/dbtc&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/codecov/c/github/dpguthrie/dbtc&quot; alt=&quot;Coverage&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/dbtc&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://badge.fury.io/py/dbtc.svg&quot; alt=&quot;Package version&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/project/dbtc&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://pepy.tech/badge/dbtc&quot; alt=&quot;Downloads&quot;&gt;    &lt;/a&gt;&lt;/p&gt;---**Documentation**: &lt;a target=&quot;_blank&quot; href=&quot;https://dbtc.dpguthrie.com&quot;&gt;https://dbtc.dpguthrie.com&lt;/a&gt;**Interactive Demo**: &lt;a target=&quot;_blank&quot; href=&quot;https://dpguthrie-dbtc-streamlit-home-yy7c0b.streamlit.app/&quot;&gt;https://dpguthrie-dbtc-streamlit-home-yy7c0b.streamlit.app/&lt;/a&gt;**Source Code**: &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/dpguthrie/dbtc&quot;&gt;https://github.com/dpguthrie/dbtc&lt;/a&gt;**V2 Docs**: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.getdbt.com/dbt-cloud/api-v2&quot;&gt;https://docs.getdbt.com/dbt-cloud/api-v2&lt;/a&gt;**V3 Docs**: &lt;a target=&quot;_blank&quot; href=&quot;https://docs.getdbt.com/dbt-cloud/api-v3&quot;&gt;https://docs.getdbt.com/dbt-cloud/api-v3&lt;/a&gt;---## Overviewdbtc is an unaffiliated python interface to various dbt Cloud API endpoints.This library acts as a convenient interface to two different APIs that dbt Cloud offers:- Cloud API:  This is a REST API that exposes endpoints that allow users to programatically create, read, update, and deleteresources within their dbt Cloud Account.- Metadata API:  This is a GraphQL API that exposes metadata generated from a job run within dbt Cloud.## RequirementsPython 3.7+- [Requests](https://requests.readthedocs.io/en/master/) - The elegant and simple HTTP library for Python, built for human beings.- [sgqlc](https://github.com/profusion/sgqlc) - Simple GraphQL Client- [Typer](https://github.com/tiangolo/typer) - Library for building CLI applications## Installation```bashpip install dbtc```## Basic Usage### PythonThe interface to both APIs are located in the `dbtCloudClient` class.The example below shows how you use the `cloud` property on an instance of the `dbtCloudClient` class to to access a method, `trigger_job_from_failure`, that allows you to restart a job from its last point of failure.```pythonfrom dbtc import dbtCloudClient# Assumes that DBT_CLOUD_SERVICE_TOKEN env var is setclient = dbtCloudClient()account_id = 1job_id = 1payload = {'cause': 'Restarting from failure'}run = client.cloud.trigger_job_from_failure(    account_id,    job_id,    payload,    should_poll=False,)# This returns a dictionary containing two keysrun['data']run['status']```Similarly, use the `metadata` property to retrieve information about certain resources within your project - the example below shows how to retrieve metadata from models related to the most recent run for a given `job_id`.```pythonfrom dbtc import dbtCloudClientclient = dbtCloudClient()job_id = 1models = client.metadata.get_models(job_id)# Models nested inside a couple keysmodels['data']['models']# This is a listmodels['data']['models'][0]```### CLIThe CLI example below will map to the python cloud example above:```bashdbtc trigger-job-from-failure \    --account-id 1 \    --job-id 1 \    --payload '{&quot;cause&quot;: &quot;Restarting from failure&quot;}' \    --no-should-poll```Similarly, for the metadata example above:```bashdbtc get-models --job-id 1```If not setting your service token as an environment variable, do the following:```bashdbtc --token this_is_my_token get_models --job-id 1```## LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>