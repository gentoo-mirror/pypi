<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Python wrapper for database queries [Clickhouse](https://clickhouse.yandex/)The wrapper is done around [clickhouse-driver](https://clickhouse-driver.readthedocs.io)Written in python version 3.5## Installation```pip install clickhousepyorpip install clickhousepy[pandas]  (for installation pandas)```## Getting Data from Clickhouse in Pandas Dataframe Format```pythonfrom clickhousepy import Clientimport datetime as dtTEST_DB = &quot;__chpytest12345&quot;TEST_TABLE = &quot;__chpytest12345&quot;client.create_db(TEST_DB)client.create_table_mergetree(    TEST_DB, TEST_TABLE,    columns=[(&quot;i&quot;, &quot;UInt32&quot;)], # or [&quot;i UInt32&quot;]    orders=[&quot;i&quot;],)client.insert(    TEST_DB, TEST_TABLE,    [{&quot;i&quot;: 1}, {&quot;i&quot;: 2}],) query = &quot;SELECT i FROM {}.{}&quot;.format(TEST_DB, TEST_TABLE)r = client.get_df(query, columns_names=[&quot;Col Integer&quot;])print(r)```## Brief documentation of some methods```pythonfrom clickhousepy import Clientimport datetime as dtTEST_DB = &quot;__chpytest12345&quot;TEST_TABLE = &quot;__chpytest12345&quot;client = Client(host=&quot;&quot;, user=&quot;&quot;, password=&quot;&quot;)r = client.show_databases()print(&quot;list of databases:&quot;, r)client.create_db(TEST_DB)client.create_table_mergetree(    TEST_DB, TEST_TABLE,    columns=[(&quot;s&quot;, &quot;String&quot;)],    orders=[&quot;s&quot;],)# Inserting data.# Read more about it here# https://clickhouse-driver.readthedocs.io/en/latest/quickstart.html#inserting-dataclient.insert(    TEST_DB, TEST_TABLE,    [{&quot;s&quot;: &quot;1&quot;}],) r = client.exists(TEST_DB, TEST_TABLE)print(&quot;does the table exist?&quot;, r)r = client.get_count_rows(TEST_DB, TEST_TABLE)print(&quot;number of lines:&quot;, r)# Any request.r = client.execute(&quot;SELECT * FROM {}.{}&quot;.format(TEST_DB, TEST_TABLE))print(r)```### Class DB```pythondb = client.DB(TEST_DB)r = db.show_tables()print(&quot;list of database tables {}:&quot;.format(TEST_DB), r)db.drop_db()```### Class Table ```pythondb = client.create_db(TEST_DB)table = db.create_table_mergetree(    TEST_TABLE,    columns=[(&quot;s&quot;, &quot;String&quot;), (&quot;t&quot;, &quot;String&quot;), (&quot;d&quot;, &quot;Date&quot;)],    orders=[&quot;d&quot;],    partition=[&quot;s&quot;, &quot;d&quot;],)# Initialization of an existing table.# table = client.Table(TEST_DB, TEST_TABLE)r = table.show_create_table()print(&quot;table creation description&quot;, r)r = table.describe()print(&quot;table columns&quot;, r)table.insert(    [        {&quot;s&quot;: &quot;1&quot;, &quot;t&quot;: &quot;1&quot;, &quot;d&quot;: dt.datetime(2000, 1, 1)},        {&quot;s&quot;: &quot;2&quot;, &quot;t&quot;: &quot;2&quot;, &quot;d&quot;: dt.datetime(2000, 1, 2)},        {&quot;s&quot;: &quot;3&quot;, &quot;t&quot;: &quot;3&quot;, &quot;d&quot;: dt.datetime(2000, 1, 3)},        {&quot;s&quot;: &quot;4&quot;, &quot;t&quot;: &quot;4&quot;, &quot;d&quot;: dt.datetime(2000, 1, 4)},    ],    columns=[&quot;s&quot;, &quot;t&quot;, &quot;d&quot;],)data = table.select()print(&quot;First 10 rows of the table&quot;, data)data = table.select(limit=1, columns=[&quot;s&quot;], where=&quot;s = 2&quot;)print(&quot;Filtered sampling&quot;, data)r = table.get_count_rows()print(&quot;number of lines:&quot;, r)r = table.get_min_date(date_column_name=&quot;d&quot;)print(&quot;minimum date:&quot;, r)r = table.get_max_date(date_column_name=&quot;d&quot;)print(&quot;maximum date:&quot;, r)print(&quot;deleting partitions&quot;)table.drop_partitions([[&quot;3&quot;, &quot;2000-01-03&quot;], [&quot;4&quot;, &quot;2000-01-04&quot;]])r = table.get_count_rows()print(&quot;number of lines after deleting partitions:&quot;, r)print(&quot;row update mutation&quot;)table.update(update=&quot;t = '20' &quot;, where=&quot;t = '2' &quot;)print(&quot;row deletion mutation&quot;)table.delete(where=&quot;t = '20'&quot;)time.sleep(1)r = table.get_count_rows()print(&quot;number of lines after mutation of line deletion:&quot;, r)print(&quot;clear table&quot;)table.truncate()r = table.get_count_rows()print(&quot;number of rows after clearing the table:&quot;, r)new_table_name = TEST_TABLE + &quot;_new&quot;print(&quot;rename table {} в {}&quot;.format(TEST_TABLE, new_table_name))table.rename(TEST_DB, new_table_name)r = client.exists(TEST_DB, TEST_TABLE)print(&quot;does table {} exist?&quot;.format(TEST_TABLE), r)print(&quot;drop tables&quot;)table.drop_table()print(&quot;deleting a database&quot;)db.drop_db()```### Method of copying data from one table to another with checking the number of rows after copying```pythonclient.drop_db(TEST_DB)db = client.create_db(TEST_DB)table = db.create_table_mergetree(    TEST_TABLE,    columns=[(&quot;string&quot;, &quot;String&quot;), (&quot;integer&quot;, &quot;UInt32&quot;), (&quot;dt&quot;, &quot;DateTime&quot;)],    orders=[&quot;string&quot;],    partition=[&quot;string&quot;],)table.insert(    [        {&quot;string&quot;: &quot;a&quot;, &quot;integer&quot;: 1, &quot;dt&quot;: dt.datetime(2000, 1, 1)},        {&quot;string&quot;: &quot;b&quot;, &quot;integer&quot;: 2, &quot;dt&quot;: dt.datetime(2000, 1, 2)},        {&quot;string&quot;: &quot;c&quot;, &quot;integer&quot;: 3, &quot;dt&quot;: dt.datetime(2000, 1, 3)},        {&quot;string&quot;: &quot;c&quot;, &quot;integer&quot;: 3, &quot;dt&quot;: dt.datetime(2000, 1, 3)},    ],)table_name_2 = TEST_TABLE + &quot;_copy&quot;table2 = table.copy_table(TEST_DB, table_name_2, return_new_table=True)is_identic = table2.copy_data_from(    TEST_DB, TEST_TABLE,    where=&quot;string != 'c' &quot;,    columns=[&quot;string&quot;])# The function will return a bool value, whether the number of lines matches or not, after copying.assert is_identic```### A method of copying data from one table to another while removing duplicate rows.```pythonclient.drop_db(TEST_DB)db = client.create_db(TEST_DB)table = db.create_table_mergetree(    TEST_TABLE,    columns=[(&quot;string&quot;, &quot;String&quot;), (&quot;integer&quot;, &quot;UInt32&quot;), (&quot;dt&quot;, &quot;DateTime&quot;)],    orders=[&quot;string&quot;],    partition=[&quot;string&quot;],)table.insert(    [        {&quot;string&quot;: &quot;a&quot;, &quot;integer&quot;: 1, &quot;dt&quot;: dt.datetime(2000, 1, 1)},        {&quot;string&quot;: &quot;b&quot;, &quot;integer&quot;: 2, &quot;dt&quot;: dt.datetime(2000, 1, 2)},        {&quot;string&quot;: &quot;c&quot;, &quot;integer&quot;: 3, &quot;dt&quot;: dt.datetime(2000, 1, 3)},        {&quot;string&quot;: &quot;c&quot;, &quot;integer&quot;: 3, &quot;dt&quot;: dt.datetime(2000, 1, 3)},    ],)table_name_2 = TEST_TABLE + &quot;_copy&quot;table2 = table.copy_table(TEST_DB, table_name_2, return_new_table=True)# When removing duplicate rows (distinct = True), # there will be no check for the number of rows after copying.table2.copy_data_from(    TEST_DB, TEST_TABLE,    columns=[&quot;string&quot;],    distinct=True)assert 3 == table2.get_count_rows()```## Dependencies- [clickhouse-driver](https://github.com/mymarilyn/clickhouse-driver/)- [pandas](https://github.com/pandas-dev/pandas) (Optional)## AuthorPavel MaksimovYou can contact me at[Telegram](https://teleg.run/pavel_maksimow),[Facebook](https://www.facebook.com/pavel.maksimow)Удачи тебе, друг! Поставь звездочку ;)</longdescription>
</pkgmetadata>