<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Lenses======.. image:: https://travis-ci.org/ingolemo/python-lenses.svg    :target: https://travis-ci.org/ingolemo/python-lenses.. image:: https://codecov.io/gh/ingolemo/python-lenses/branch/master/graph/badge.svg    :target: https://codecov.io/gh/ingolemo/python-lensesLenses is a python library that helps you to manipulate largedata-structures without mutating them. It is inspired by the lenses inHaskell, although it's much less principled and the api is more suitablefor python.Installation------------You can install the latest version from pypi using pip like so::    pip install lensesYou can uninstall similarly::    pip uninstall lensesDocumentation-------------The lenses library makes liberal use of docstrings, which you can accessas normal with the ``pydoc`` shell command, the ``help`` function inthe repl, or by reading the source yourself.Most users will only need the docs from ``lenses.UnboundLens``. If youwant to add hooks to allow parts of the library to work with customobjects then you should check out the ``lenses.hooks`` module. Most ofthe fancy lens code is in the ``lenses.optics`` module for those whoare curious how everything works.Some examples are given in the `examples`_ folder and the `documentation`_is available on ReadTheDocs... _examples: examples.. _documentation: https://python-lenses.readthedocs.io/en/latest/Example-------.. code:: pycon    &gt;&gt;&gt; from pprint import pprint    &gt;&gt;&gt; from lenses import lens    &gt;&gt;&gt;    &gt;&gt;&gt; data = [{'name': 'Jane', 'scores': ['a', 'a', 'b', 'a']},    ...         {'name': 'Richard', 'scores': ['c', None, 'd', 'c']},    ...         {'name': 'Zoe', 'scores': ['f', 'f', None, 'f']}]    ...     &gt;&gt;&gt; format_scores = lens.Each()['scores'].Each().Instance(str).call_upper()    &gt;&gt;&gt; cheat = lens[2]['scores'].Each().set('a')    &gt;&gt;&gt;    &gt;&gt;&gt; corrected = format_scores(data)    &gt;&gt;&gt; pprint(corrected)    [{'name': 'Jane', 'scores': ['A', 'A', 'B', 'A']},     {'name': 'Richard', 'scores': ['C', None, 'D', 'C']},     {'name': 'Zoe', 'scores': ['F', 'F', None, 'F']}]    &gt;&gt;&gt;    &gt;&gt;&gt; cheated = format_scores(cheat(data))    &gt;&gt;&gt; pprint(cheated)    [{'name': 'Jane', 'scores': ['A', 'A', 'B', 'A']},     {'name': 'Richard', 'scores': ['C', None, 'D', 'C']},     {'name': 'Zoe', 'scores': ['A', 'A', 'A', 'A']}]The definition of ``format_scores`` means &quot;for each item in the data takethe value with the key of ``'scores'`` and then for each item in that listthat is an instance of ``str``, call its ``upper`` method on it&quot;. That oneline is the equivalent of this code:.. code:: python    def format_scores(data):        results = []        for entry in data:            result = {}            for key, value in entry.items():                if key == 'scores':                    new_value = []                    for letter in value:                        if isinstance(letter, str):                            new_value.append(letter.upper())                        else:                            new_value.append(letter)                    result[key] = new_value                else:                    result[key] = value            results.append(result)        return resultsNow, this code can be simplified using comprehensions. But comprehensionsonly work with lists, dictionaries, and sets, whereas the lenses librarycan work with arbitrary python objects.Here's an example that shows off the full power of this library:.. code:: pycon    &gt;&gt;&gt; from lenses import lens    &gt;&gt;&gt; state = ((&quot;foo&quot;, &quot;bar&quot;), &quot;!&quot;, 2, ())    &gt;&gt;&gt; lens.Recur(str).Each().Filter(lambda c: c &lt;= 'm').Parts().call_mut_reverse()(state)    (('!oo', 'abr'), 'f', 2, ())This is an example from the `Putting Lenses to Work`__ talk about thehaskell lenses library by John Wiegley. We extract all the strings insideof ``state``, extract the characters, filter out any characters thatcome after ``'m'`` in the alphabet, treat these characters as if theywere a list, reverse that list, before finally placing these charactersback into the state in their new positions... _putting_lenses_to_work: https://www.youtube.com/watch?v=QZy4Yml3LTY&amp;t=2250__ putting_lenses_to_work_This example is obviously very contrived, but I can't even begin toimagine how you would do this in python code without lenses.License-------python-lenses is free software: you can redistribute it and/or modify itunder the terms of the GNU General Public License as published by theFree Software Foundation, either version 3 of the License, or (at youroption) any later version.This program is distributed in the hope that it will be useful, butWITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU GeneralPublic License for more details.You should have received a copy of the GNU General Public License alongwith this program. If not, see http://www.gnu.org/licenses/.</longdescription>
</pkgmetadata>