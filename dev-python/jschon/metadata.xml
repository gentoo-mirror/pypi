<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Welcome to jschon!==================|tests| |codecov| |pypi| |python| |docs| |license|jschon is a pythonic and extensible implementation of the`JSON Schema &lt;https://json-schema.org/&gt;`_ specification.Features--------* JSON Schema validator implementation (drafts 2019-09, 2020-12)  * Schema compilation and indexing  * $ref loading from local and remote sources  * Support for custom keywords, vocabularies and meta-schemas  * Support for format validation* JSON class implementing the JSON data model* JSON Pointer (`RFC 6901 &lt;https://tools.ietf.org/html/rfc6901.html&gt;`_)* JSON Patch (`RFC 6902 &lt;https://tools.ietf.org/html/rfc6902.html&gt;`_)* Relative JSON Pointer (`draft &lt;https://json-schema.org/draft/2020-12/relative-json-pointer.html&gt;`_)Installation------------::    pip install jschonFor remote $ref support, the requests library is required. It may be installed with::    pip install jschon[requests]Usage-----Create a JSON schema:.. code-block:: python    from jschon import create_catalog, JSON, JSONSchema    create_catalog('2020-12')    demo_schema = JSONSchema({        &quot;$id&quot;: &quot;https://example.com/demo&quot;,        &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,        &quot;type&quot;: &quot;array&quot;,        &quot;items&quot;: {            &quot;anyOf&quot;: [                {                    &quot;type&quot;: &quot;string&quot;,                    &quot;description&quot;: &quot;Cool! We got a string here!&quot;                },                {                    &quot;type&quot;: &quot;integer&quot;,                    &quot;description&quot;: &quot;Hey! We got an integer here!&quot;                }            ]        }    })Validate JSON data:.. code-block:: python    result = demo_schema.evaluate(        JSON([12, &quot;Monkeys&quot;])    )Generate JSON Schema-conformant output:&gt;&gt;&gt; result.output('basic'){    &quot;valid&quot;: True,    &quot;annotations&quot;: [        {            &quot;instanceLocation&quot;: &quot;&quot;,            &quot;keywordLocation&quot;: &quot;/items&quot;,            &quot;absoluteKeywordLocation&quot;: &quot;https://example.com/demo#/items&quot;,            &quot;annotation&quot;: True        },        {            &quot;instanceLocation&quot;: &quot;/0&quot;,            &quot;keywordLocation&quot;: &quot;/items/anyOf/1/description&quot;,            &quot;absoluteKeywordLocation&quot;: &quot;https://example.com/demo#/items/anyOf/1/description&quot;,            &quot;annotation&quot;: &quot;Hey! We got an integer here!&quot;        },        {            &quot;instanceLocation&quot;: &quot;/1&quot;,            &quot;keywordLocation&quot;: &quot;/items/anyOf/0/description&quot;,            &quot;absoluteKeywordLocation&quot;: &quot;https://example.com/demo#/items/anyOf/0/description&quot;,            &quot;annotation&quot;: &quot;Cool! We got a string here!&quot;        }    ]}Links-----* Documentation: https://jschon.readthedocs.io* GitHub repository: https://github.com/marksparkza/jschon* PyPI package: https://pypi.org/project/jschon* Online validator: https://jschon.dev.. |tests| image:: https://github.com/marksparkza/jschon/actions/workflows/tests.yml/badge.svg    :target: https://github.com/marksparkza/jschon/actions/workflows/tests.yml    :alt: Test Status.. |codecov| image:: https://codecov.io/gh/marksparkza/jschon/branch/main/graph/badge.svg    :target: https://codecov.io/gh/marksparkza/jschon    :alt: Code Coverage.. |pypi| image:: https://img.shields.io/pypi/v/jschon    :target: https://pypi.org/project/jschon    :alt: PyPI Package Version.. |python| image:: https://img.shields.io/pypi/pyversions/jschon    :target: https://pypi.org/project/jschon    :alt: Python Versions.. |docs| image:: https://readthedocs.org/projects/jschon/badge/?version=latest    :target: https://jschon.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. |license| image:: https://img.shields.io/github/license/marksparkza/jschon    :target: https://github.com/marksparkza/jschon/blob/main/LICENSE    :alt: License</longdescription>
</pkgmetadata>