<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Microsoft Graph SDK for PythonGet started with the Microsoft Graph SDK for Python by integrating the [Microsoft Graph API](https://docs.microsoft.com/graph/overview) into your Python application.&gt; **Note:** &gt; * This SDK allows you to build applications using the [v1.0](https://docs.microsoft.com/graph/use-the-api#version) of Microsoft Graph. If you want to try the latest Microsoft Graph APIs, try the [beta](https://github.com/microsoftgraph/msgraph-beta-sdk-python) SDK.  &gt;&gt; * The Microsoft Graph Python SDK is currently in community preview. During this period we're expecting breaking changes to happen to the SDK as we make updates based on feedback. Don't use this SDK in production environments. For details see [SDKs in preview or GA status](https://learn.microsoft.com/en-us/graph/sdks/sdks-overview#sdks-in-preview-or-ga-status).## 1. Installation```pypip install msgraph-sdk```&gt; Note: Enable long paths in your environment if you receive a `Could not install packages due to an OSError`. For details, see [Enable Long Paths in Windows 10, Version 1607, and Later](https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell#enable-long-paths-in-windows-10-version-1607-and-later).## 2. Getting started with Microsoft Graph### 2.1 Register your applicationRegister your application by following the steps at [Register your app with the Microsoft Identity Platform](https://docs.microsoft.com/graph/auth-register-app-v2).### 2.2 Select and create an authentication providerTo start writing code and making requests to the Microsoft Graph service, you need to set up an authentication provider. This object will authenticate your requests to Microsoft Graph. For authentication, the Microsoft Graph Python SDK supports both sync and async credential classes from Azure Identity. Which library to choose depends on the type of application you are building.&gt; **Note**: For authentication we support both `sync` and `async` credential classes from `azure.identity`. Please see the azure identity [docs](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity?view=azure-python) for more information.The easiest way to filter this decision is by looking at the permissions set you'd use. Microsoft Graph supports 2 different types of permissions: delegated and application permissions:- Application permissions are used when you donâ€™t need a user to login to your app, but the app will perform tasks on its own and run in the background. - Delegated permissions, also called scopes, are used when your app requires a user to login and interact with data related to this user in a session.The following table lists common libraries by permissions set. | MSAL library | Permissions set | Common use case ||---|---|---|| [ClientSecretCredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.aio.clientsecretcredential?view=azure-python&amp;preserve-view=true) | Application permissions | Daemon apps or applications running in the background without a signed-in user. || [DeviceCodeCredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.devicecodecredential?view=azure-python) | Delegated permissions | Enviroments where authentication is triggered in one machine and completed in another e.g in a cloud server. || [InteractiveBrowserCredentials](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.interactivebrowsercredential?view=azure-python) | Delegated permissions | Environments where a browser is available and the user wants to key in their username/password. || [AuthorizationCodeCredentials](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.authorizationcodecredential?view=azure-python) | Delegated permissions | Usually for custom customer applications where the frontend calls the backend and waits for the authorization code at a particular url. |You can also use [EnvironmentCredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.environmentcredential?view=azure-python), [DefaultAzureCredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python), [OnBehalfOfCredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.onbehalfofcredential?view=azure-python), or any other [Azure Identity library](https://learn.microsoft.com/en-us/python/api/overview/azure/identity-readme?view=azure-python#credential-classes).Once you've picked an authentication library, we can initiate the authentication provider in your app. The following example uses ClientSecretCredential with application permissions.```pythonimport asynciofrom azure.identity.aio import ClientSecretCredentialcredential = ClientSecretCredential(&quot;tenantID&quot;,                                    &quot;clientID&quot;,                                    &quot;clientSecret&quot;)scopes = ['https://graph.microsoft.com/.default']```The following example uses DeviceCodeCredentials with delegated permissions.```pythonimport asynciofrom azure.identity import DeviceCodeCredentialcredential = DeviceCodeCredential(&quot;client_id&quot;,                                  &quot;tenant_id&quot;)graph_scopes = ['User.Read', 'Calendars.ReadWrite.Shared']```### 2.3 Initialize a GraphServiceClient objectYou must create **GraphServiceClient** object to make requests against the service. To create a new instance of this class, you need to provide credentials and scopes, which can authenticate requests to Microsoft Graph.```py# Example using async credentials and application access.from azure.identity.aio import ClientSecretCredentialfrom msgraph import GraphServiceClientcredential = ClientSecretCredential(    'TENANT_ID',    'CLIENT_ID',    'CLIENT_SECRET',)scopes = ['https://graph.microsoft.com/.default']client = GraphServiceClient(credentials=credential, scopes=scopes)```The above example uses default scopes for [app-only access](https://learn.microsoft.com/en-us/graph/permissions-overview?tabs=http#application-permissions).  If using [delegated access](https://learn.microsoft.com/en-us/graph/permissions-overview#delegated-permissions) you can provide custom scopes:```py# Example using sync credentials and delegated access.from azure.identity import DeviceCodeCredentialfrom msgraph import GraphServiceClientcredential=DeviceCodeCredential(    'CLIENT_ID',    'TENANT_ID',)scopes = ['User.Read', 'Mail.Read']client = GraphServiceClient(credentials=credential, scopes=scopes)```## 3. Make requests against the serviceAfter you have a **GraphServiceClient** that is authenticated, you can begin making calls against the service. The requests against the service look like our [REST API](https://docs.microsoft.com/graph/api/overview?view=graph-rest-1.0).&gt; **Note**: This SDK offers an asynchronous API by default. Async is a concurrency model that is far more efficient than multi-threading, and can provide significant performance benefits and enable the use of long-lived network connections such as WebSockets. We support popular python async envronments such as `asyncio`, `anyio` or `trio`.The following is a complete example that shows how to fetch a user from Microsoft Graph.```pyimport asynciofrom azure.identity.aio import ClientSecretCredentialfrom msgraph import GraphServiceClientcredential = ClientSecretCredential(    'tenant_id',    'client_id',    'client_secret')scopes = ['https://graph.microsoft.com/.default']client = GraphServiceClient(credentials=credential, scopes=scopes)# GET /users/{id | userPrincipalName}async def get_user():    user = await client.users.by_user_id('userPrincipalName').get()    if user:        print(user.display_name)asyncio.run(get_user())```Note that to calling `me` requires a signed-in user and therefore delegated permissions. See [Authenticating Users](https://learn.microsoft.com/en-us/python/api/overview/azure/identity-readme?view=azure-python#authenticate-users) for more:```pyimport asynciofrom azure.identity import InteractiveBrowserCredentialfrom msgraph import GraphServiceClientcredential = InteractiveBrowserCredential()scopes=['User.Read']client = GraphServiceClient(credentials=credential, scopes=scopes,)# GET /measync def me():    me = await client.me.get()    if me:        print(me.display_name)asyncio.run(me())```### 3.1 Error HandlingFailed requests raise `APIError` exceptions. You can handle these exceptions using `try` `catch` statements.```pyfrom kiota_abstractions.api_error import APIErrorasync def get_user():    try:        user = await client.users.by_user_id('userID').get()        print(user.user_principal_name, user.display_name, user.id)    except APIError as e:        print(f'Error: {e.error.message}')asyncio.run(get_user())```## Documentation and resources* [Overview](https://docs.microsoft.com/graph/overview)* [Microsoft Graph website](https://aka.ms/graph)* [Samples](docs)## UpgradingFor detailed information on breaking changes, bug fixes and new functionality introduced during major upgrades, check out our [Upgrade Guide](UPGRADING.md)## IssuesView or log issues on the [Issues](https://github.com/microsoftgraph/msgraph-sdk-python/issues) tab in the repo.## ContributePlease read our [Contributing](CONTRIBUTING.md) guidelines carefully for advice on how to contribute to this repo.## Copyright and licenseCopyright (c) Microsoft Corporation. All Rights Reserved. Licensed under the MIT [license](LICENSE).This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.## Third Party Notices[Third-party notices](THIRD%20PARTY%20NOTICES)</longdescription>
</pkgmetadata>