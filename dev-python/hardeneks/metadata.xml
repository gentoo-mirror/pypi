<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Hardeneks[![PyPI version](https://badge.fury.io/py/hardeneks.svg)](https://badge.fury.io/py/hardeneks)[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/hardeneks.svg)](https://pypi.python.org/pypi/hardeneks/)[![Python package](https://github.com/aws-samples/hardeneks/actions/workflows/ci.yaml/badge.svg)](https://github.com/aws-samples/hardeneks/actions/workflows/ci.yaml)[![Downloads](https://pepy.tech/badge/hardeneks)](https://pepy.tech/project/hardeneks)Runs checks to see if an EKS cluster follows [EKS Best Practices](https://aws.github.io/aws-eks-best-practices/).**Quick Start**:```python3 -m venv /tmp/.venvsource /tmp/.venv/bin/activatepip install hardenekshardeneks```![alt text](https://raw.githubusercontent.com/aws-samples/hardeneks/main/docs/hardeneks.gif)**Usage**:```consolehardeneks [OPTIONS]```**Options**:* `--region TEXT`: AWS region of the cluster. Ex: us-east-1* `--context TEXT`: K8s context* `--cluster TEXT`: EKS Cluster name* `--namespace TEXT`: Namespace to be checked (default is all namespaces)* `--config TEXT`: Path to a hardeneks config file* `--export-txt TEXT`: Export the report in txt format* `--export-html TEXT`: Export the report in html format* `--export-json TEXT`: Export the report in json format* `--insecure-skip-tls-verify`: Skip TLS verification* `--help`: Show this message and exit.- &lt;b&gt;K8S_CONTEXT&lt;b&gt;       You can get the contexts by running:    ```    kubectl config get-contexts    ```    or get the current context by running:    ```    kubectl config current-context    ```- &lt;b&gt;CLUSTER_NAME&lt;b&gt;      You can get the cluster names by running:    ```    aws eks list-clusters --region us-east-1    ```  **Configuration File**:Default behavior is to run all the checks. If you want to provide your own config file to specify list of rules to run, you can use the --config flag.You can also add namespaces to be skipped. Following is a sample config file:```yaml---ignore-namespaces:  - kube-node-lease  - kube-public  - kube-system  - kube-apiserver  - karpenter  - kubecost  - external-dns  - argocd  - aws-for-fluent-bit  - amazon-cloudwatch  - vparules:   cluster_wide:    security:      iam:        - disable_anonymous_access_for_cluster_roles        - check_endpoint_public_access        - check_aws_node_daemonset_service_account        - check_access_to_instance_profile        - restrict_wildcard_for_cluster_roles      multi_tenancy:        - ensure_namespace_quotas_exist      detective_controls:        - check_logs_are_enabled      network_security:        - check_vpc_flow_logs        - check_awspca_exists        - check_default_deny_policy_exists      encryption_secrets:        - use_encryption_with_ebs        - use_encryption_with_efs        - use_efs_access_points      infrastructure_security:        - deploy_workers_onto_private_subnets        - make_sure_inspector_is_enabled      pod_security:        - ensure_namespace_psa_exist      image_security:        - use_immutable_tags_with_ecr    reliability:      applications:        - check_metrics_server_is_running        - check_vertical_pod_autoscaler_exists  namespace_based:    security:       iam:        - disable_anonymous_access_for_roles        - restrict_wildcard_for_roles        - disable_service_account_token_mounts        - disable_run_as_root_user        - use_dedicated_service_accounts_for_each_deployment        - use_dedicated_service_accounts_for_each_stateful_set        - use_dedicated_service_accounts_for_each_daemon_set      pod_security:        - disallow_container_socket_mount        - disallow_host_path_or_make_it_read_only        - set_requests_limits_for_containers        - disallow_privilege_escalation        - check_read_only_root_file_system      network_security:        - use_encryption_with_aws_load_balancers      encryption_secrets:        - disallow_secrets_from_env_vars          runtime_security:        - disallow_linux_capabilities    reliability:      applications:        - check_horizontal_pod_autoscaling_exists        - schedule_replicas_across_nodes        - run_multiple_replicas        - avoid_running_singleton_pods```**RBAC**: In order to run hardeneks we need to have some permissions both on AWS side and k8s side.Minimal IAM role policy:```json{    &quot;Version&quot;: &quot;2012-10-17&quot;,    &quot;Statement&quot;: [        {            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: &quot;eks:ListClusters&quot;,            &quot;Resource&quot;: &quot;*&quot;        },        {            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: &quot;eks:DescribeCluster&quot;,            &quot;Resource&quot;: &quot;*&quot;        },        {            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: &quot;ecr:DescribeRepositories&quot;,            &quot;Resource&quot;: &quot;*&quot;        },        {            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: &quot;inspector2:BatchGetAccountStatus&quot;,            &quot;Resource&quot;: &quot;*&quot;        },        {            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: &quot;ec2:DescribeFlowLogs&quot;,            &quot;Resource&quot;: &quot;*&quot;        },        {            &quot;Effect&quot;: &quot;Allow&quot;,            &quot;Action&quot;: &quot;ec2:DescribeInstances&quot;,            &quot;Resource&quot;: &quot;*&quot;        }    ]}```Minimal ClusterRole:```yamlkind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata:  name: hardeneks-runnerrules:- apiGroups: [&quot;&quot;]  resources: [&quot;namespaces&quot;, &quot;resourcequotas&quot;, &quot;persistentvolumes&quot;, &quot;pods&quot;, &quot;services&quot;]  verbs: [&quot;list&quot;]- apiGroups: [&quot;rbac.authorization.k8s.io&quot;]  resources: [&quot;clusterroles&quot;, &quot;clusterrolebindings&quot;, &quot;roles&quot;, &quot;rolebindings&quot;]  verbs: [&quot;list&quot;]- apiGroups: [&quot;networking.k8s.io&quot;]  resources: [&quot;networkpolicies&quot;]  verbs: [&quot;list&quot;]- apiGroups: [&quot;storage.k8s.io&quot;]  resources: [&quot;storageclasses&quot;]  verbs: [&quot;list&quot;]- apiGroups: [&quot;apps&quot;]  resources: [&quot;deployments&quot;, &quot;daemonsets&quot;, &quot;statefulsets&quot;]  verbs: [&quot;list&quot;, &quot;get&quot;]- apiGroups: [&quot;autoscaling&quot;]  resources: [&quot;horizontalpodautoscalers&quot;]  verbs: [&quot;list&quot;]```## For Developers**Prerequisites**:* This cli uses poetry. Follow instructions that are outlined [here](https://python-poetry.org/docs/) to install poetry.**Installation**:```consolegit clone git@github.com:dorukozturk/hardeneks.gitcd hardenekspoetry install```**Running Tests**:```consolepoetry shellpytest --cov=hardeneks tests/ --cov-report term-missing```</longdescription>
</pkgmetadata>