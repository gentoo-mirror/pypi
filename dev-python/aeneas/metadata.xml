<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aeneas======**aeneas** is a Python/C library and a set of tools to automagicallysynchronize audio and text (aka forced alignment).-  Version: 1.7.3-  Date: 2017-03-15-  Developed by: `ReadBeyond &lt;http://www.readbeyond.it/&gt;`__-  Lead Developer: `Alberto Pettarin &lt;http://www.albertopettarin.it/&gt;`__-  License: the GNU Affero General Public License Version 3 (AGPL v3)-  Contact: aeneas@readbeyond.it-  Quick Links: `Home &lt;http://www.readbeyond.it/aeneas/&gt;`__ -   `GitHub &lt;https://github.com/readbeyond/aeneas/&gt;`__ -   `PyPI &lt;https://pypi.python.org/pypi/aeneas/&gt;`__ -   `Docs &lt;http://www.readbeyond.it/aeneas/docs/&gt;`__ -   `Tutorial &lt;http://www.readbeyond.it/aeneas/docs/clitutorial.html&gt;`__   - `Benchmark &lt;https://readbeyond.github.io/aeneas-benchmark/&gt;`__ -   `Mailing   List &lt;https://groups.google.com/d/forum/aeneas-forced-alignment&gt;`__ -   `Web App &lt;http://aeneasweb.org&gt;`__Goal----**aeneas** automatically generates a **synchronization map** between alist of text fragments and an audio file containing the narration of thetext. In computer science this task is known as (automatically computinga) **forced alignment**.For example, given `this textfile &lt;https://raw.githubusercontent.com/readbeyond/aeneas/master/aeneas/tests/res/container/job/assets/p001.xhtml&gt;`__and `this audiofile &lt;https://raw.githubusercontent.com/readbeyond/aeneas/master/aeneas/tests/res/container/job/assets/p001.mp3&gt;`__,**aeneas** determines, for each fragment, the corresponding timeinterval in the audio file:::    1                                                     =&gt; [00:00:00.000, 00:00:02.640]    From fairest creatures we desire increase,            =&gt; [00:00:02.640, 00:00:05.880]    That thereby beauty's rose might never die,           =&gt; [00:00:05.880, 00:00:09.240]    But as the riper should by time decease,              =&gt; [00:00:09.240, 00:00:11.920]    His tender heir might bear his memory:                =&gt; [00:00:11.920, 00:00:15.280]    But thou contracted to thine own bright eyes,         =&gt; [00:00:15.280, 00:00:18.800]    Feed'st thy light's flame with self-substantial fuel, =&gt; [00:00:18.800, 00:00:22.760]    Making a famine where abundance lies,                 =&gt; [00:00:22.760, 00:00:25.680]    Thy self thy foe, to thy sweet self too cruel:        =&gt; [00:00:25.680, 00:00:31.240]    Thou that art now the world's fresh ornament,         =&gt; [00:00:31.240, 00:00:34.400]    And only herald to the gaudy spring,                  =&gt; [00:00:34.400, 00:00:36.920]    Within thine own bud buriest thy content,             =&gt; [00:00:36.920, 00:00:40.640]    And tender churl mak'st waste in niggarding:          =&gt; [00:00:40.640, 00:00:43.640]    Pity the world, or else this glutton be,              =&gt; [00:00:43.640, 00:00:48.080]    To eat the world's due, by the grave and thee.        =&gt; [00:00:48.080, 00:00:53.240].. figure:: wiki/align.png   :alt: Waveform with aligned labels, detail   Waveform with aligned labels, detailThis synchronization map can be output to file in several formats,depending on its application:-  research: Audacity (AUD), ELAN (EAF), TextGrid;-  digital publishing: SMIL for EPUB 3;-  closed captioning: SubRip (SRT), SubViewer (SBV/SUB), TTML, WebVTT   (VTT);-  Web: JSON;-  further processing: CSV, SSV, TSV, TXT, XML.System Requirements, Supported Platforms and Installation---------------------------------------------------------System Requirements~~~~~~~~~~~~~~~~~~~1. a reasonably recent machine (recommended 4 GB RAM, 2 GHz 64bit CPU)2. `Python &lt;https://python.org/&gt;`__ 2.7 (Linux, OS X, Windows) or 3.5 or   later (Linux, OS X)3. `FFmpeg &lt;https://www.ffmpeg.org/&gt;`__4. `eSpeak &lt;http://espeak.sourceforge.net/&gt;`__5. Python packages ``BeautifulSoup4``, ``lxml``, and ``numpy``6. Python headers to compile the Python C/C++ extensions (optional but   strongly recommended)7. A shell supporting UTF-8 (optional but strongly recommended)Supported Platforms~~~~~~~~~~~~~~~~~~~**aeneas** has been developed and tested on **Debian 64bit**, with**Python 2.7** and **Python 3.5**, which are the **only supportedplatforms** at the moment. Nevertheless, **aeneas** has been confirmedto work on other Linux distributions, Mac OS X, and Windows. See the`PLATFORMSfile &lt;https://github.com/readbeyond/aeneas/blob/master/wiki/PLATFORMS.md&gt;`__for details.If installing **aeneas** natively on your OS proves difficult, you arestrongly encouraged to use`aeneas-vagrant &lt;https://github.com/readbeyond/aeneas-vagrant&gt;`__, whichprovides **aeneas** inside a virtualized Debian image running under`VirtualBox &lt;https://www.virtualbox.org/&gt;`__ and`Vagrant &lt;http://www.vagrantup.com/&gt;`__, which can be installed on anymodern OS (Linux, Mac OS X, Windows).Installation~~~~~~~~~~~~All-in-one installers are available for Mac OS X and Windows, and a Bashscript for deb-based Linux distributions (Debian, Ubuntu) is provided inthis repository. It is also possible to download a VirtualBox+Vagrantvirtual machine. Please see the `INSTALLfile &lt;https://github.com/readbeyond/aeneas/blob/master/wiki/INSTALL.md&gt;`__for detailed, step-by-step installation procedures for differentoperating systems.The generic OS-independent procedure is simple:1. **Install** `Python &lt;https://python.org/&gt;`__ (2.7.x preferred),   `FFmpeg &lt;https://www.ffmpeg.org/&gt;`__, and   `eSpeak &lt;http://espeak.sourceforge.net/&gt;`__2. Make sure the following **executables** can be called from your   **shell**: ``espeak``, ``ffmpeg``, ``ffprobe``, ``pip``, and   ``python``3. First install ``numpy`` with ``pip`` and then ``aeneas`` (this order   is important):   .. code:: bash       pip install numpy       pip install aeneas4. To **check** whether you installed **aeneas** correctly, run:``bash     python -m aeneas.diagnostics``Usage-----1. Run without arguments to get the **usage message**:   .. code:: bash       python -m aeneas.tools.execute_task       python -m aeneas.tools.execute_job   You can also get a list of **live examples** that you can immediately   run on your machine thanks to the included files:   .. code:: bash       python -m aeneas.tools.execute_task --examples       python -m aeneas.tools.execute_task --examples-all2. To **compute a synchronization map** ``map.json`` for a pair   (``audio.mp3``, ``text.txt`` in   `plain &lt;http://www.readbeyond.it/aeneas/docs/textfile.html#aeneas.textfile.TextFileFormat.PLAIN&gt;`__   text format), you can run:   .. code:: bash       python -m aeneas.tools.execute_task \           audio.mp3 \           text.txt \           &quot;task_language=eng|os_task_file_format=json|is_text_type=plain&quot; \           map.json(The command has been split into lines with ``\`` for visual clarity; inproduction you can have the entire command on a single line and/or youcan use shell variables.)To **compute a synchronization map** ``map.smil`` for a pair(``audio.mp3``,`page.xhtml &lt;http://www.readbeyond.it/aeneas/docs/textfile.html#aeneas.textfile.TextFileFormat.UNPARSED&gt;`__containing fragments marked by ``id`` attributes like ``f001``), you canrun:::    ```bash    python -m aeneas.tools.execute_task \        audio.mp3 \        page.xhtml \        &quot;task_language=eng|os_task_file_format=smil|os_task_file_smil_audio_ref=audio.mp3|os_task_file_smil_page_ref=page.xhtml|is_text_type=unparsed|is_text_unparsed_id_regex=f[0-9]+|is_text_unparsed_id_sort=numeric&quot; \        map.smil    ```As you can see, the third argument (the *configuration string*)specifies the parameters controlling the I/O formats and the processingoptions for the task. Consult the`documentation &lt;http://www.readbeyond.it/aeneas/docs/&gt;`__ for details.3. If you have several tasks to process, you can create a **job   container** to batch process them:   .. code:: bash       python -m aeneas.tools.execute_job job.zip output_directoryFile ``job.zip`` should contain a ``config.txt`` or ``config.xml``configuration file, providing **aeneas** with all the information neededto parse the input assets and format the output sync map files. Consultthe `documentation &lt;http://www.readbeyond.it/aeneas/docs/&gt;`__ fordetails.The `documentation &lt;http://www.readbeyond.it/aeneas/docs/&gt;`__ contains ahighly suggested`tutorial &lt;http://www.readbeyond.it/aeneas/docs/clitutorial.html&gt;`__which explains how to use the built-in command line tools.Documentation and Support--------------------------  Documentation: http://www.readbeyond.it/aeneas/docs/-  Command line tools tutorial:   http://www.readbeyond.it/aeneas/docs/clitutorial.html-  Library tutorial:   http://www.readbeyond.it/aeneas/docs/libtutorial.html-  Old, verbose tutorial: `A Practical Introduction To The aeneas   Package &lt;http://www.albertopettarin.it/blog/2015/05/21/a-practical-introduction-to-the-aeneas-package.html&gt;`__-  Mailing list:   https://groups.google.com/d/forum/aeneas-forced-alignment-  Changelog: http://www.readbeyond.it/aeneas/docs/changelog.html-  High level description of how aeneas works:   `HOWITWORKS &lt;https://github.com/readbeyond/aeneas/blob/master/wiki/HOWITWORKS.md&gt;`__-  Development history:   `HISTORY &lt;https://github.com/readbeyond/aeneas/blob/master/wiki/HISTORY.md&gt;`__-  Testing:   `TESTING &lt;https://github.com/readbeyond/aeneas/blob/master/wiki/TESTING.md&gt;`__-  Benchmark suite: https://readbeyond.github.io/aeneas-benchmark/Supported Features-------------------  Input text files in ``parsed``, ``plain``, ``subtitles``, or   ``unparsed`` (XML) format-  Multilevel input text files in ``mplain`` and ``munparsed`` (XML)   format-  Text extraction from XML (e.g., XHTML) files using ``id`` and   ``class`` attributes-  Arbitrary text fragment granularity (single word, subphrase, phrase,   paragraph, etc.)-  Input audio file formats: all those readable by ``ffmpeg``-  Output sync map formats: AUD, CSV, EAF, JSON, SMIL, SRT, SSV, SUB,   TEXTGRID, TSV, TTML, TXT, VTT, XML-  Confirmed working on 38 languages: AFR, ARA, BUL, CAT, CYM, CES, DAN,   DEU, ELL, ENG, EPO, EST, FAS, FIN, FRA, GLE, GRC, HRV, HUN, ISL, ITA,   JPN, LAT, LAV, LIT, NLD, NOR, RON, RUS, POL, POR, SLK, SPA, SRP, SWA,   SWE, TUR, UKR-  MFCC and DTW computed via Python C extensions to reduce the   processing time-  Several built-in TTS engine wrappers: AWS Polly TTS API, eSpeak   (default), eSpeak-ng, Festival, MacOS (via say), Nuance TTS API-  Default TTS (eSpeak) called via a Python C extension for fast audio   synthesis-  Possibility of running a custom, user-provided TTS engine Python   wrapper (e.g., included example for speect)-  Batch processing of multiple audio/text pairs-  Download audio from a YouTube video-  In multilevel mode, recursive alignment from paragraph to sentence to   word level-  In multilevel mode, MFCC resolution, MFCC masking, DTW margin, and   TTS engine can be specified for each level independently-  Robust against misspelled/mispronounced words, local rearrangements   of words, background noise/sporadic spikes-  Adjustable splitting times, including a max character/second   constraint for CC applications-  Automated detection of audio head/tail-  Output an HTML file for fine tuning the sync map manually   (``finetuneas`` project)-  Execution parameters tunable at runtime-  Code suitable for Web app deployment (e.g., on-demand cloud computing   instances)-  Extensive test suite including 1,200+ unit/integration/performance   tests, that run and must pass before each releaseLimitations and Missing Features---------------------------------  Audio should match the text: large portions of spurious text or audio   might produce a wrong sync map-  Audio is assumed to be spoken: not suitable for song captioning, YMMV   for CC applications-  No protection against memory swapping: be sure your amount of RAM is   adequate for the maximum duration of a single audio file (e.g., 4 GB   RAM =&gt; max 2h audio; 16 GB RAM =&gt; max 10h audio)-  `Open issues &lt;https://github.com/readbeyond/aeneas/issues&gt;`__A Note on Word-Level Alignment~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A significant number of users runs **aeneas** to align audio and text atword-level (i.e., each fragment is a word). Although **aeneas** was notdesigned with word-level alignment in mind and the results might beinferior to `ASR-based forcedaligners &lt;https://github.com/pettarin/forced-alignment-tools&gt;`__ forlanguages with good ASR models, **aeneas** offers some options toimprove the quality of the alignment at word-level:-  multilevel text (since v1.5.1),-  MFCC nonspeech masking (since v1.7.0, disabled by default),-  use better TTS engines, like Festival or AWS/Nuance TTS API (since   v1.5.0).If you use the ``aeneas.tools.execute_task`` command line tool, you canadd ``--presets-word`` switch to enable MFCC nonspeech masking, forexample:.. code:: bash    $ python -m aeneas.tools.execute_task --example-words --presets-word    $ python -m aeneas.tools.execute_task --example-words-multilevel --presets-wordIf you use **aeneas** as a library, just set the appropriate``RuntimeConfiguration`` parameters. Please see the `command linetutorial &lt;http://www.readbeyond.it/aeneas/docs/clitutorial.html&gt;`__ fordetails.License-------**aeneas** is released under the terms of the GNU Affero General PublicLicense Version 3. See the `LICENSEfile &lt;https://github.com/readbeyond/aeneas/blob/master/LICENSE&gt;`__ fordetails.Licenses for third party code and files included in **aeneas** can befound in the`licenses &lt;https://github.com/readbeyond/aeneas/blob/master/licenses/README.md&gt;`__directory.No copy rights were harmed in the making of this project.Supporting and Contributing---------------------------Sponsors~~~~~~~~-  **July 2015**: `Michele   Gianella &lt;https://plus.google.com/+michelegianella/about&gt;`__   generously supported the development of the boundary adjustment code   (v1.0.4)-  **August 2015**: `Michele   Gianella &lt;https://plus.google.com/+michelegianella/about&gt;`__   partially sponsored the port of the MFCC/DTW code to C (v1.1.0)-  **September 2015**: friends in West Africa partially sponsored the   development of the head/tail detection code (v1.2.0)-  **October 2015**: an anonymous donation sponsored the development of   the &quot;YouTube downloader&quot; option (v1.3.0)-  **April 2016**: the Fruch Foundation kindly sponsored the development   and documentation of v1.5.0-  **December 2016**: the `Centro Internazionale Del Libro Parlato   &quot;Adriano Sernagiotto&quot; &lt;http://www.libroparlato.org/&gt;`__ (Feltre,   Italy) partially sponsored the development of the v1.7 seriesSupporting~~~~~~~~~~Would you like supporting the development of **aeneas**?I accept sponsorships to-  fix bugs,-  add new features,-  improve the quality and the performance of the code,-  port the code to other languages/platforms, and-  improve the documentation.Feel free to `get in touch &lt;mailto:aeneas@readbeyond.it&gt;`__.Contributing~~~~~~~~~~~~If you think you found a bug or you have a feature request, please usethe `GitHub issuetracker &lt;https://github.com/readbeyond/aeneas/issues&gt;`__ to submit it.If you want to ask a question about using **aeneas**, your best optionconsists in sending an email to the `mailinglist &lt;https://groups.google.com/d/forum/aeneas-forced-alignment&gt;`__.Finally, code contributions are welcome! Please refer to the `CodeContributionGuide &lt;https://github.com/readbeyond/aeneas/blob/master/wiki/CONTRIBUTING.md&gt;`__for details about the branch policies and the code style to follow.Acknowledgments---------------Many thanks to **Nicola Montecchio**, who suggested using MFCCs and DTW,and co-developed the first experimental code for aligning audio andtext.**Paolo Bertasi**, who developed the APIs and Web application forReadBeyond Sync, helped shaping the structure of this package for itsasynchronous usage.**Chris Hubbard** prepared the files for packaging aeneas as aDebian/Ubuntu ``.deb``.**Daniel Bair** prepared the ``brew`` formula for installing **aeneas**and its dependencies on Mac OS X.**Daniel Bair**, **Chris Hubbard**, and **Richard Margetts** packagedthe installers for Mac OS X and Windows.**Firat Ozdemir** contributed the ``finetuneas`` HTML/JS code for finetuning sync maps in the browser.**Willem van der Walt** contributed the code snippet to output a syncmap in TextGrid format.**Chris Vaughn** contributed the MacOS TTS wrapper.All the mighty `GitHubcontributors &lt;https://github.com/readbeyond/aeneas/graphs/contributors&gt;`__,and the members of the `GoogleGroup &lt;https://groups.google.com/d/forum/aeneas-forced-alignment&gt;`__.</longdescription>
</pkgmetadata>