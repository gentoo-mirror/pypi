<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MySmallUtilsSmall Python utils to do life easier.This includes tools to execute external commands, compress files,manage configuration files, open different types of files (JSON, YAML and Pickle) compressed or not,configure logging, obtain metrics, download files, etc.This module is divided into the following categories:* [Install](#install)* [Collections](#collections)  * [Head of a set or dict](#head-of-a-set-or-dict)  * [List union](#list-union)  * [Concat lists](#concat-lists)  * [Dictionary operations](#dictionary-operations)  * [Filter lists](#filter-lists)  * [Tuples](#tuples)  * [OrderedSet](#orderedset)* [Text](#text)  * [Remove URLs](#remove-urls)  * [Replace URLs](#replace-urls)  * [Clean text](#clean-text)  * [Text markup](#text-markup)* [File access, load and save files](#file-access-load-and-save-files)  * [Open files](#open-files)  * [Read file](#read-file)  * [Write in a file](#write-in-a-file)  * [Load and save json files](#load-and-save-json-files)  * [Load and save pickle files](#load-and-save-pickle-files)  * [Load and save Yaml files](#load-and-save-yaml-files)  * [Copy files](#copy-files)  * [Move files](#move-files)  * [Remove files](#remove-files)  * [Check if exists several files](#check-if-exists-several-files)  * [Count lines](#count-lines)  * [Touch](#touch)  * [Cat](#cat)  * [Make directories](#make-directories)  * [List files](#list-files)  * [Generate output file paths](#generate-output-file-paths)  * [Check file encoding](#check-file-encoding)  * [Expand wildcards](#expand-wildcards)* [Removable files](#remove-files)* [Compressing files](#compressing-files)  * [Gzip](#gzip)  * [Tar](#tar)* [External commands](#external-commands)* [Configuration files](#configuration-files)* [Logging](#logging)* [Method synchronization](#method-synchronization)* [Services and Web](#services-and-web)  * [Download a file](#download-a-file)  * [Endpoint](#endpoint)  * [Generate service help](#generate-service-help)  * [JSON post](#json-post)* [File unit tests](#unit-tests)* [Miscellany](#miscellany)# InstallIt is very easy to install:```bash# With pippip install mysmallutils# With condaconda install mysmallutils```  # Collections&lt;a id=&quot;collections&quot;&gt;&lt;/a&gt;Some util functions for list, set or dict collections.## Head of a set or dict&lt;a id=&quot;head-of-a-set-or-dict&quot;&gt;&lt;/a&gt;Get the first n elements of a dictionary or a set.```pythonfrom mysutils.collections import head# A set of latin charactersset1 = {chr(97 + i) for i in range(26)}# Select the first 5 elements of the sethead(set1, 5)  # returns {'d', 'a', 'b', 'e', 'c'}# By default select 10 elementshead(set1)  # returns {'f', 'd', 'j', 'a', 'b', 'e', 'h', 'i', 'c', 'g'}# A dictionary of latin charactersdict1 = {i: chr(97 + i) for i in range(26)}# Select the first 5 items of the dictionaryhead(dict1, 5)  # Returns {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e'}# By default select 10 itemshead(dict1)  # Returns {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h', 8: 'i', 9: 'j'}```Also, you can use the specific functions for set and dictionaries: **sh()** for set head and **dh()** for dictionaries.```pythonfrom mysutils.collections import sh# A set of latin charactersset1 = {chr(97 + i) for i in range(26)}# Select the first 5 elements of the setsh(set1, 5)# By default select 10 elementssh(set1)``````pythonfrom mysutils.collections import dh# A dictionary of latin charactersdict1 = {i: chr(97 + i) for i in range(26)}# Select the first 5 items of the dictionarydh(dict1, 5)# By default select 10 itemsdh(dict1)```## List union&lt;a id=&quot;list-union&quot; name=&quot;list-union&quot;&gt;&lt;/a&gt;Create the union of two or more lists maintaining the order of elements.```pythonfrom mysutils.collections import list_unionl1 = [1, 2, 3]l2 = [4, 5, 6, 1]l3 = [2, 6, 24]# This will return  [1, 2, 3, 4, 5, 6, 24]list_union(l1, l2, l3)# This will return [1, 2, 3, 6, 24, 4, 5]list_union(l1, l3, l2)```## Concat lists&lt;a id=&quot;concat-lists&quot; name=&quot;concat-lists&quot;&gt;&lt;/a&gt;Concatenate a list of lists and return other list with the results.This is different from the list_union() function because the final list can contain repeated elements.```pythonfrom mysutils.collections import concat_listsl1 = [1, 2, 3]l2 = [4, 5, 6, 1]l3 = [2, 6, 24]# This will return  [1, 2, 3, 4, 5, 6, 1, 2, 6, 24]concat_lists(l1, l2, l3)# This will return  [4, 5, 6, 1, 2, 6, 24, 1, 2, 3]concat_lists(l2, l3, l1)```## Dictionary operations&lt;a id=&quot;dictionary-operations&quot; name=&quot;dictionary-operations&quot;&gt;&lt;/a&gt;With these functions you can do several operation over dictionaries in just one code line. For example, if you want to add a dictionary item, remove other, and modify the keys and values of the dictionary,you can do the following:```pythonfrom mysutils.collections import add_keys, del_keys, mod_key, mod_valued = {'name': 'Pablo', 'lastname': 'Escobar', 'email': 'pabloescobar@example.com'}# Add the key 'country', remove 'email', change 'name' by 'firstname' and change the 'lastname' value:mod_value(mod_key(del_keys(add_keys(d, country='Colombia'), 'email'), 'name', 'firstname'), 'lastname', 'Smith')```More information about these and other functions in the following subsections.### Add keysYou can add several dictionary items in just one sentence and return the results.```pythonfrom mysutils.collections import add_keysd = {'b': 2}# Print {'a': 1, 'b': 2, 'c': 3}print(add_keys(d, a=1, c=3))# You can modify an existing itemprint(add_keys(d, a=1, b=4, c=3))# Or you can raise an error if the key already exists.print(add_keys(d, modify=False, a=1, b=4, c=3))```### Delete keysYou can remove one or more dictionary items by their keys and return the result with only one line.```pythonfrom mysutils.collections import del_keysd = {'a': 1, 'b': 2, 'c': 3}# Remove the element c from the dictionary and print the resultsprint(del_keys(d.copy(), 'c'))# Remove the elements a and c from the dictionary and print the resultsprint(del_keys(d.copy(), 'a', 'c'))# If an element does not exist, ignore the key errorprint(del_keys(d.copy(), 'a', 'd'))# If an element does not exist, raise the KeyError exceptionprint(del_keys(d.copy(), 'a', 'd', ignore_errors=False))```### Modify keysWith just one sentence you can modify one or more keys without changing their values.```pythonfrom mysutils.collections import mod_key, mod_keys # Modify just one key: name by firstnamed = {'name': 'Pablo', 'lastname': 'Escobar', 'email': 'pabloescobar@example.com'}mod_key(d, 'name', 'firstname')# Modify several keys: name by firstname and lastname by familynamed = {'name': 'Pablo', 'lastname': 'Escobar', 'email': 'pabloescobar@example.com'}mod_keys(d, name='firstname', lastname='familyname')```### Modify valuesWith just one sentence you can modify one or more values.```pythonfrom mysutils.collections import mod_value, mod_values # Modify two values concatenating commandsd = {'name': 'Pablo', 'lastname': 'Escobar', 'email': 'pabloescobar@example.com'}mod_value(mod_value(d, 'name', 'Jhon'), 'lastname', 'Smith')# Modify two values with just one sentenced = {'name': 'Pablo', 'lastname': 'Escobar', 'email': 'pabloescobar@example.com'}mod_values(d, name='Jhon', lastname='Smith')```### Merge a list of dictionaries&lt;a id=&quot;merge-a-list-of-directories&quot; name=&quot;merge-a-list-of-dictionaries&quot;&gt;&lt;/a&gt;Convert a list of dictionaries with the same keys in a dictionary which each key contain the list of values of each dictionary. For example:```pythonfrom mysutils.collections import merge_dictslst = [{'a': 1, 'b': 10}, {'a': 2, 'b': 11}, {'a': 3, 'b': 12}]d = merge_dicts(lst)  # The value of d is {'a': [1, 2, 3], 'b': [10, 11, 12]}```### Get dictionary itemsSeveral function to get different items of a dictionary apart from its key.```pythonfrom mysutils.collections import first_item, last_item, first_key, last_key, first_value, last_value, item, key, valued = {'a': 1, 'b': 2, 'c': 3}# Get the first dictionary itemfirst_item(d)  # Returns ('a', 1)# Get the last dictionary itemlast_item(d)  # Returns ('c', 3)# Get the first key of the dictionaryfirst_key(d)  # Returns 'a'# Get the last key of the dictionarylast_key(d)  # Returns 'c'# Get the first value of the dictionaryfirst_value(d)  # Returns 1# Get the last value of the dictionarylast_value(d)  # Returns 3# Get the item in the position 1 of the dictionaryitem(d, 1)  # Returns ('b', 2)# Get the key in the position 1 of the dictionarykey(d, 1)  # Returns 'b'# Get the value in the position 1 of the dictionaryvalue(d, 1)  # Returns 2```### Search the first key in a list of dictionaries.In an iterable of dicts (like a list) this function return the value of the first dictionary that contains the key.```pythonfrom mysutils.collections import first_key_valuelst = [{'a': 1, 'b': 2}, {'a': 10, 'c': 3}, {'a': 100, 'c': 30}]first_key_value(lst, 'a')  # Returns 1first_key_value(lst, 'b')  # Returns 2first_key_value(lst, 'c')  # Returns 3first_key_value(lst, 'd')  # Raises a KeyError exception```## Filter lists&lt;a id=&quot;filter-lists&quot; name=&quot;filter-lists&quot;&gt;&lt;/a&gt;Filter a list by a condition.```pythonfrom mysutils.collections import filter_lstlst = [i for i in range(1, 20)]# Returns [1, 2, 3, 4]filter_lst(lst, 4)# Returns [2, 3, 4]filter_lst(lst, 3, 1)# Returns [3, 5]filter_lst(lst, 5, 1, lambda x: x % 2 == 1)```## Tuples&lt;a id=&quot;tuples&quot; name=&quot;tuples&quot;&gt;&lt;/a&gt;Convert a list of tuples into a tuple of lists. For example:```pythonfrom mysutils.collections import merge_tupleslst = [(1, 10), (2, 11), (3, 12)]t = merge_tuples(lst)  # The value of t is ([1, 2, 3], [10, 11, 12])```## OrderedSet&lt;a id=&quot;orderedset&quot; name=&quot;orderedset&quot;&gt;&lt;/a&gt;The OrderedSet class is an implementation of an ordered set in Python. An ordered set is a data structure that allows you to store unique elements in an ordered manner, meaning that they are maintained in the order in which they wereinserted. This class is based on the Set class from the collections library and also implements the iteration protocol.Basic Set Operations.The OrderedSet class provides the basic set operations that are defined by the Set class from the collections library.These operations include:* **add()**: This method allows you to add a single element to the set.  ```python  from mysutils.collections import OrderedSet    s = OrderedSet({5, 4, 3})  s.add(8)  print(s)  # Prints {8, 3, 4, 5}  ```* **time()**: Get the time when an element was added. You can also use [item] operator, for example:  ```python  from mysutils.collections import OrderedSet  import time    s = OrderedSet()  s.add(1)  time.sleep(0.5)  s.add(8)  print(s[1])  # Prints a datatime object with the time when the element 1 was added  print(s[8])  # Prints a datatime object with the time when the element 1 was added  print(s[1] &lt; s[8])  # Prints True  print(s[1] &gt; s[8])  # Prints False  ```* **before()**: Get a copy of the OrderedSet with items were introduced before the given date.  ```python  from mysutils.collections import OrderedSet  from datetime import datetime  import time    s = OrderedSet()  s.add(1)  time.sleep(0.5)  s.add(8)  t1 = datetime.now()  s.update({2, 3, 4, 5, 6})  print(s.before(t1))  # Prints {8, 1}  ```* **after()**:   ```python  from mysutils.collections import OrderedSet  from datetime import datetime  import time    s = OrderedSet()  s.add(1)  time.sleep(0.5)  s.add(8)  t1 = datetime.now()  s.update({2, 3, 4, 5, 6})  print(s.after(t1))  # Prints {2, 3, 4, 5, 6}  ```* **until()**: Get a copy of the OrderedSet with items were introduced since the given date, including the same date).  ```python  from mysutils.collections import OrderedSet  from datetime import datetime  import time    s = OrderedSet()  s.add(1)  time.sleep(0.5)  s.add(8)  t1 = datetime.now()  s.update({2, 3, 4, 5, 6})  print(s.until(s[8]))  # Prints {8, 1}  ```* **since()**: Get a copy of the OrderedSet with items were introduced since the given date, including the same date).  ```python  from mysutils.collections import OrderedSet  from datetime import datetime  import time    s = OrderedSet()  s.add(1)  time.sleep(0.5)  s.add(8)  t1 = datetime.now()  s.update({2, 3, 4, 5, 6})  print(s.since(s[3]))  # Print {3, 4, 5, 6}  ```* **remove()**: This method allows you to remove an element from the set.  ```python  from mysutils.collections import OrderedSet    s = OrderedSet([1, 2, 3])  s.remove(2)  print(s)  # Prints {1, 3}  s.remove(2)  # Throws a KeyError exception.  ```* **remove_items()**: Remove the given items from the set.  ```python  from mysutils.collections import OrderedSet    s = OrderedSet([1, 2, 3, 4, 5])  s.remove_items([2, 3, 4])  print(s)  # Prints {1, 5}  ```* **remove_before()**: Remove all the introduced items before the given date.  ```python  from mysutils.collections import OrderedSet  from time import sleep    s = OrderedSet([1, 3])  sleep(0.1)  s.add(4)  time.sleep(0.1)  s.add(5)  s.remove_before(s[4])  print(s)  # Prints {4, 5}        ```* **remove_until()**: Remove all the introduced items  until the given date, including the same date.  ```python   from mysutils.collections import OrderedSet  from time import sleep    s = OrderedSet([1, 3])  sleep(0.1)  s.add(4)  time.sleep(0.1)  s.add(5)  s.remove_until(s[4])  print(s)  # Prints {5}  ```* **remove_after()**: Remove all the introduced items after the given date.  ```python  from mysutils.collections import OrderedSet  from time import sleep    s = OrderedSet([1, 3])  sleep(0.1)  s.add(4)  time.sleep(0.1)  s.add(5)  s.remove_after(s[4])  print(s)  # Prints {1, 3, 4}  ```* **remove_since()**: Remove all the introduced items since the given date, including the same date.  ```python  from mysutils.collections import OrderedSet  from time import sleep    s = OrderedSet([1, 3])  sleep(0.1)  s.add(4)  time.sleep(0.1)  s.add(5)  s.remove_since(s[4])  print(s)  # Prints {1, 3}  ```* **discard()**: This method allows you to remove an element from the set.  It is similar to the remove() method, but it does not raise an error if the element is not present in the set.  ```python  from mysutils.collections import OrderedSet    s = OrderedSet([1, 2, 3])  s.discard(2)  print(s)  # Prints {1, 3}  s.discard(2)  # Throws a KeyError exception.  ```* **pop()**: This method allows you to extract an element from the set.  By default, it removes the first element that was added to the set,  but you can also specify that it should remove the last element instead.  ```python  from mysutils.collections import OrderedSet    s = OrderedSet([24, 32, 18, 1, 6])  print(s.pop())  # Prints 24  print(s)  # Prints {32, 18, 1, 6}  print(s.pop(last=True))  # Prints 6  print(s)  # Prints {32, 18, 1}  ```* **first()**: Get the first element of the OrderedDict without removing it.  ```python  from mysutils.collections import OrderedSet    s = OrderedSet({1, 2, 3})  print(s.first())  # Prints 1  print(s.pop())  # Prints 1  print(s.first())  # Prints 2  ```* **update()**: This method allows you to add a sequence of elements to the set.  ```python  from mysutils.collections import OrderedSet    s = OrderedSet([24, 32, 18, 1, 6])  s.update([1, 2, 3])  print(s)  # Prints {32, 1, 2, 3, 6, 18, 24}  ```* **clear()**: This method allows you to remove all elements from the set, effectively clearing the set.  ```python  from mysutils.collections import OrderedSet    s = OrderedSet([1, 2, 3])  s.clear()  pritn(s)  # Prints {}    ```* **copy()**: This method allows you to create a copy of the set.  The copy will have the same elements as the original set, but it will be a separate object.  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = s1.copy()  print(s1, s2)  # {1, 2, 3} {1, 2, 3}  ```### Additional Set Operations* **difference()**: This method allows you to find the elements in the set that are not present in another set.  It returns a new OrderedSet object that contains only the elements that are unique to the original set.  You can also use the operator -, for example:  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = OrderedSet([2, 3, 4])  print(s1.difference(s2))  # Prints {1}  print(s1 - s2)  # Prints {1}  ```* **difference_update()**: This method allows you to remove the elements in the set that are not present in another set.  It modifies the original set in-place, removing the elements that are not present in the other set.  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = OrderedSet([2, 3, 4])  s1.difference_update(s2)  print(s1)  # Prints {1}  ```* **intersection()**: This method allows you to find the elements in the set that are present in another set.  It returns a new OrderedSet object. You can also use the operator &amp;, for example:  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = OrderedSet([2, 3, 4])  print(s1.intersection(s2))  # Prints {2, 3}  print(s1 &amp; s2)  # Prints {2, 3}  ```* **intersection_update()**: This method allows you to remove the elements in the set that are not present in another   set. It modifies the original set in-place, removing the elements that are not present in the other set.  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = OrderedSet([2, 3, 4])  s1.intersection_update(s2)  print(s1)  # Prints {2, 3}  ```* **union()**: This is an operator method that allows you to use the | operator to find the union of two sets.  It returns a new OrderedSet object that contains all elements from both sets.  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = OrderedSet([3, 4, 5])  print(s1.union(s2))  # Print {1, 2, 3, 4, 5})  print(s1 | s2)  # Print {1, 2, 3, 4, 5})  ```* **issubset()**: This method allows you to check if the set is a subset of another set.  It returns True if all elements in the set are also present in the other set, and False otherwise.  You can also use the operator &lt;=, for example:  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = OrderedSet([1, 2, 3, 4, 5, 6])  print(s1.issubset(s2))  # Prints True  print(s2.issubset(s1))  # Prints False  print(s1 &lt;= s2)   # Prints True  print(s2 &lt;= s1)   # Prints False  ```* **issuperset()**: This method allows you to check if the set is a superset of another set.  It returns True if all elements in the other set are also present in the set, and False otherwise.  You can also use the operator &gt;=, for example:  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3, 4, 5, 6])  s2 = OrderedSet([1, 2, 3])  print(s1.issuperset(s2))  # Prints True  print(s2.issuperset(s1))  # Prints False  print(s1 &gt;= s2)  # Prints True  print(s2 &gt;= s1)  # Prints False  ```* **isdisjoint()**: This method allows you to check if the set has no elements in common with another set.  It returns True if the sets have no elements in common, and False otherwise.  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = OrderedSet([4, 5, 6])  s3 = OrderedSet([1, 5, 6])  print(s1.isdisjoint(s2))  # Prints True  print(s3.isdisjoint(s2))  # Prints False  ```* **symmetric_difference()**: This method returns the symmetric difference of two sets as a new `OrderedSet`.  You can also use the operator ^, for example:  ```python  from mysutils.collections import OrderedSet    s1 = OrderedSet([1, 2, 3])  s2 = OrderedSet([3, 4, 5])  s3 = set(iter([1, 2, 3]))  s4 = set(iter([3, 4, 5]))  print(s1.symmetric_difference(s2))   # Prints {1, 2, 4, 5}  print(s1 ^ s2)  # Prints {1, 2, 4, 5}  ```# Text&lt;a id=&quot;text&quot; name=&quot;text&quot;&gt;&lt;/a&gt;Simple functions related to text.## Remove URLs&lt;a id=&quot;remove-urls&quot; name=&quot;remove-urls&quot;&gt;&lt;/a&gt;Remove URLs from a text.```pythonfrom mysutils.text import remove_urlstext = &quot;&quot;&quot;This is a test!Clean urls like this:https://example.com/my_space/user?a=b&amp;c=3#firsthttps://example.com/your_space/user#first&quot;&quot;&quot;remove_urls(text)# Result: # 'This is a test!\nClean URLs like this:'# You can filter by path:remove_urls(text, r'my_space/user\?a=b&amp;c=3#first')# Result:# 'This is a test!\n#     Clean punctuation symbols and URLs like this:  https://example.com/your_space/user#first')```## Replace URLs&lt;a id=&quot;replace-urls&quot; name=&quot;replace-urls&quot;&gt;&lt;/a&gt;Replace all the URLs which have a given path.```pythonfrom mysutils.text import replace_urlstext = &quot;&quot;&quot;This is a test!Clean some urls like this:https://example.com/my_space/user?a=b&amp;c=3#firsthttps://example.com/your_space/user#first&quot;&quot;&quot;# Replace only the url with the path /my_space/userreplace_urls(text, 'https://hello.com')# Result:# 'This is a test!\n#      Clean punctuation symbols and urls like this: https://hello.com https://hello.com'# Replace only the url with the path /my_space/userreplace_urls(text, 'https://hello.com', r'my_space/user')# Result:# 'This is a test!\n#      Clean punctuation symbols and urls like this: https://hello.com https://example.com/your_space')```## Clean text&lt;a id=&quot;clean-text&quot; name=&quot;clean-text&quot;&gt;&lt;/a&gt;Remove punctuation symbols, urls and convert to lower.```pythonfrom mysutils.text import clean_texttext = 'This is a test!\n     Clean punctuation symbols and urls like this: ' \       'https://example.com/my_space/user?a=b&amp;c=3#first ' \       'https://example.com/my_space/user#first'# Remove punctuation, urls and convert to lowerclean_text(text)# Remove punctuation and urls but do not convert to lowerclean_text(text, lower=False)# Only remove punctuationclean_text(text, lower=False, url=False)```## Text markup&lt;a id='text-markup' name='text-markup'&gt;&lt;/a&gt;Create text effects in the console.```pythonfrom mysutils.text import AnsiCodes, markup# Print a yellow, italic and blinked text.print(markup('This is a text with effects',              AnsiCodes.YELLOW, AnsiCodes.ITALIC,              AnsiCodes.SLOW_BLINK))# This is the same but using string namesprint(markup('This is a text with effects',              'yellow', 'italic',              'SLOW_BLINK'))```You can see the list of effects in the mysutils.text.AnsiCode enumeration.Furthermore, you can set your own font, background and underline colors based on R, G, B scale.```pythonfrom mysutils.text import AnsiCodes, markup, color, bg_color, un_color# Print 'text' in yellow with gray background and blue underline color.print('This is a ' + \       markup('text', AnsiCodes.UNDERLINE,              color(255, 255, 20),              bg_color(60, 60, 60),             un_color(80, 80, 255)) + 'with effects.')```**Important note:** All these font variants, styles and color do not work in all the consoles/terminals.# File access, load and save files&lt;a id=&quot;file-access-load-and-save-files&quot; name=&quot;file-access-load-and-save-files&quot;&gt;&lt;/a&gt;With these functions you can open files, create json and pickle files, and execute external commands very easily.Moreover, only changing the file extension you can store the information in a compressed file with gzip.## Open files&lt;a id=&quot;open-files&quot; name=&quot;open-files&quot;&gt;&lt;/a&gt;```pythonfrom mysutils.file import open_file, force_open# Open a text file to readwith open_file('file.txt') as file:    pass# Open a compressed text file to writewith open_file('file.txt.gz', 'w') as file:    pass# Open a file in a directory, if the directory does not exist, # then create the parent directories.with force_open('file.txt', 'w') as file:    pass# The same as previously, but with a compressed file.with force_open('file.txt.gz', 'w') as file:    pass```## Load and save json files&lt;a id=&quot;load-and-save-json-files&quot; name=&quot;load-and-save-json-files&quot;&gt;&lt;/a&gt;This save and load json files, even if they are compressed, with just one line.```pythonfrom mysutils.file import load_json, save_jsond = {    'version': 1.0,    'file_list': ['1.txt', '2.txt']}# Save the json in a text filesave_json(d, 'file.json')# Load the json file from a text filed = load_json('file.json')# Save the json in a compressed filesave_json(d, 'file.json.gz')# Load the json file from a compressed filed = load_json('file.json.gz')# Save the json into a text file in a given directory, # if the directory does not exist, then create itsave_json(d, 'data/file.json', force=True)# The same but wit a compressed filesave_json(d, 'data/file.json.gz', force=True)# Load a json file and if it doesn't exists, # then it returns a default valued = load_json('file.json', default={})# Load from a tar filefrom mysutils.tar import load_tar_json# Load a json (data.json) from a compressed tar file (file.tar.bz2)d = load_tar_json('data/file.tar.bz2', 'data.json')```You can also load a JSON file from a [compressed tar file](#open-and-load-files-inside-a-tar-archive).## Load and save pickle files&lt;a id=&quot;load-and-save-pickle-files&quot; name=&quot;load-and-save-pickle-files&quot;&gt;&lt;/a&gt;```pythonfrom mysutils.file import load_pickle, save_pickled = {    'version': 1.0,    'file_list': ['1.txt', '2.txt']}# Save a object in a pickle filesave_pickle(d, 'test1.pkl')# Load the object from a pickle filed = load_pickle('test1.pkl')# Save the object into a compressed pickle filesave_pickle(d, 'test1.pkl.gz')# Load the object from a compressed pickle filed = load_pickle('test1.pkl.gz')# Load the object but if the file does not exist, # then return the default vaule.d = load_pickle('test1.pkl', default={})# Save the object into a pickle file in a given directory, # if the directory does not exist, then create itsave_pickle(d, 'data/test1.pkl', force=True)# The same but wit a compressed pickle filesave_pickle(d, 'data/test1.pkl.gz', force=True)# Load from a tar filefrom mysutils.tar import load_tar_pickle# Load a compressed pickle (data.pkl.gz) from a compressed tar file (file.tar.bz2)d = load_tar_pickle('data/file.tar.bz2', 'data.pkl.gz')```You can also load a pickle file from a [compressed tar file](#open-and-load-files-inside-a-tar-archive).## Load and save Yaml files&lt;a id=&quot;load-and-save-yaml-files&quot; name=&quot;load-and-save-yaml-files&quot;&gt;&lt;/a&gt;These functions require to install the PyYaml module with the following command:```bashpip install PyYAML~=5.4.1```Examples of usage:```pythonfrom mysutils.yaml import load_yaml, save_yamld = {    'version': 1.0,    'file_list': ['1.txt', '2.txt']}# Save a object in a yaml filesave_yaml(d, 'file.yml')# Load the object from a yaml filed = load_yaml('file.yml')# Save the object into a compressed yaml filesave_yaml(d, 'file.yml.gz')# Load the object from a compressed yaml filed = load_yaml('file.yml.gz')# Load the object from the yaml file if it exists,# otherwise it returns the default objectd = load_yaml('file.yml.gz', {})# Save the object into a yaml file in a given directory, # if the directory does not exist, then create itsave_yaml(d, 'data/file.yml', force=True)# The same but wit a compressed yaml filesave_yaml(d, 'data/file.yml.gz', force=True)# Load from a tar filefrom mysutils.yaml import load_tar_yaml# Load a yaml (data.yaml) from a compressed tar file (file.tar.xz)d = load_tar_yaml('data/file.tar.xz', 'data.yaml')```You can also load a YAML file from a [compressed tar file](#open-and-load-files-inside-a-tar-archive).## Copy files&lt;a id=&quot;copy-files&quot; name=&quot;copy-files&quot;&gt;&lt;/a&gt;A very simple way to copy several files into a directory. For example:```pythonfrom mysutils.file import copy_files# Copy the files 'file1.txt' and 'file2.txt' to the folder 'data/'. # If the directory does not exist, then create it.copy_files('data/', 'file1.txt', 'file2.txt')# To avoid create the folder if it does not exist.copy_files('data/', 'file1.txt', 'file2.txt', force=False)# Moreover, you can use file wildcardscopy_files('data/', '*.txt', '*.py')```## Move files&lt;a id=&quot;move-files&quot; name=&quot;move-files&quot;&gt;&lt;/a&gt;Move several files at once.```pythonfrom mysutils.file import move_files# Move several files to test/move_files('test/', '1.txt', '2.txt', '3.txt')# Create the folder test/ if it does not existmove_files('test/', '1.txt', '2.txt', '3.txt', force=True)# Replace the files if already exists in test/move_files('test/', '1.txt', '2.txt', '3.txt', replace=True)# Moreover, you can use file wildcardsmove_files('test/', '*.txt', '*.py')```## Remove files&lt;a id=&quot;remove-files&quot; name=&quot;remove-files&quot;&gt;&lt;/a&gt;You can also remove several files and empty folders with just one sentence, using the remove_files() function:```pythonfrom mysutils.file import remove_files# Remove three files at once.remove_files('test2.json', 'data/test1.json', 'data/')# Remove three files at once ignoring if any does not exist.remove_files('test2.json', 'data/test1.json', 'data/', ignore_errors=True)# Remove three files or folders at once, if the folder contains more files, also will be removed.remove_files('test2.json', 'data/test1.json', 'data/', recursive=True)# Moreover, you can use file wildcardsremove_files('*.json', 'data/*.json')```If the file to remove is a directory, it has to be empty. If you want to remove directories with subdirectories or files, use shutil.rmtree().Also,you can use removable_files() to remove files after their use:```pythonfrom mysutils.tmp import removable_files# These files will be removed when the with endswith removable_files('test2.json', 'data/test1.json', 'data/'):    pass# These files will be removed when the with ends, ignoring possible errorswith removable_files('test2.json', 'data/test1.json', 'data/', ignore_errors=True):    pass# These files will be removed when the with ends, if any folder contains more files, also will be removedwith removable_files('test2.json', 'data/test1.json', 'data/', recursive=True):    pass# Get the variables for each removable filewith removable_files('test2.json') as (f1,):    pass# Even for several fileswith removable_files('test2.json', 'data/test1.json', 'data/') as (f1, f2, f3):    pass```## Check if exists several files&lt;a id=&quot;check-if-exists-several-files&quot; name=&quot;check-if-exists-several-files&quot;&gt;&lt;/a&gt;With the function exist_files() you can check if several files exist or not.Its usage is very simple, for example:```pythonfrom mysutils.file import exist_files, not_exist_files, are_dir, not_are_dir# Returns True if all of the files exist, otherwise False.exist_files('mysutils/collections.py', 'test/filetests.py', 'mysutils/file.py')# Return True if any of the files exist, if it exists at least one, then return Falsenot_exist_files('mysutils/collections.py', 'test/filetests.py', 'mysutils/file.py')# Returns True if all of the files are directories, otherwise False.are_dir('mysutils/collections.py', 'test/filetests.py', 'mysutils/file.py')# Return True if any of the files are directories, otherwise False.not_are_dir('mysutils/collections.py', 'test/filetests.py', 'mysutils/file.py')```## Count lines&lt;a id=&quot;count-lines&quot; name=&quot;count-lines&quot;&gt;&lt;/a&gt; Count the number of lines of one or several files. If the file is gzip compressed, then decompress it first.```pythonfrom mysutils.file import open_file, count_lines# Create a file with two lineswith open_file('text.txt.gz', 'wt') as file:    print('First line', file=file)    print('Second line', file=file)# Return 2count_lines('text.txt.gz')# Count lines of several filescount_lines('file.txt.gz', 'file.txt')```## Touch&lt;a id=&quot;touch&quot; name=&quot;touch&quot;&gt;&lt;/a&gt;Create several empty files.```pythonfrom mysutils.file import touch# Create the text.txt file without contenttouch('text.txt')# Create several empty filestouch('1.txt', '2.txt', '3.txt')```## Cat&lt;a id=&quot;cat&quot; name=&quot;cat&quot;&gt;&lt;/a&gt;Print the content of a file.```pythonfrom mysutils.file import cat, open_file# Print the content of text.txt in the standard outputcat('text.txt')# Print the content of the compressed file text.txt.gz in the standard outputcat('text.txt.gz')# Print the content of text.txt into the file text_cat.txtwith open_file('text_cat.txt', 'wt') as file:    cat('text.txt', output=file)# Print the content of the compressed file text.txt.gz in the other compressed file text_cat.txt.gz.with open_file('text_cat.txt.gz', 'wt') as file:    cat('text.txt.gz', file)```## Read file&lt;a id=&quot;read-file&quot; name=&quot;read-file&quot;&gt;&lt;/a&gt;Here is included functions to read a file of several forms.```pythonfrom mysutils.file import read_file, first_line, last_line, head, tail, body, \  read_files, read_from, read_until# Read the file 'text.txt'lines = read_file('text.txt')# Read the compressed file 'text.txt.gz'lines = read_file('text.txt.gz')# Read the compressed file 'text.txt.gz' removing the newline character if it existslines = read_file('text.txt.gz', False)# Read the first line of the file token.txt ignoring the character \n at the end of the line.token = first_line('token.txt')# Read the last line of the fileline = last_line('credits.txt')# Read the top 20 lines of the filetop_lines = head('README.md', 20)# Read the last 20 lines of the filelast_lines = tail('README.md', 20)# Read the lines between the 5 to 20body_lines = body('README.md', 5, 20)# Read lines from the line that starts with &quot;# Text&quot; appears to the end of fileread_from('README.md', r'^# Text')# Read lines until the line that starts with &quot;# Text&quot; is foundread_until('README.md', r'^# Text')# Read several files at once and return a unique list with the content of all the fileslines = read_files('README.md', 'requirements.txt')```## Write in a file&lt;a id=&quot;write-in-a-file&quot; name=&quot;write-in-a-file&quot;&gt;&lt;/a&gt;Write a text in a file in just one instruction, even if the file is compressed.```pythonfrom mysutils.file import write_file# Write a text in a filewrite_file('text.txt', 'This an example of writing text in a file.')# Write a text in a compressed filewrite_file('text.txt.gz', 'This an example of writing text in a file.')# Write a list of strings in a filetext = ['This is another exmaple of writing text in a file.', 'This file has several lines.']# Write a text in a filewrite_file('text.txt', text)# Write a text in a compressed filewrite_file('text.txt.gz', text)```## Make directories&lt;a id=&quot;make-directories&quot; name=&quot;make-directories&quot;&gt;&lt;/a&gt;Create one or more directories but if them already exist, then do nothing.```pythonfrom mysutils.file import mkdirs# Create the folder if not existsmkdirs('new_folder')# Do nothing because the folder was already createdmkdirs('new_folder')# Create several folders at oncemkdirs('folder1', 'folder2', 'folder3')```## List files&lt;a id=&quot;list-files&quot; name=&quot;list-files&quot;&gt;&lt;/a&gt;Functions to list a folder and obtain the first or last file of a folder.```pythonfrom mysutils.file import first_file, last_file, list_dir# Return a sorted list of files of the current directory.list_dir()# Return a sorted list of files of the 'test' directory.list_dir('test')# # Return the list of files thant end with '.txt' of the 'test' directory.# Return the same list but with the inverted orderlist_dir('test', '.*\.txt$', reverse=True)# Return the path of the first file in the current folderfirst_file()# Return the path of the last file in the current folderlast_file()# Return the path of the first file in the 'test' folderfirst_file('test/')# Return the path of the last file in the 'test' folderlast_file('test/')# Return the path of the first file in the 'test' folder that ends with .txtfirst_file('test/', r'.*\.txt$')# Return the path of the last file in the 'test' folder that ends with .txtlast_file('test/', r'.*\.txt$')```## Generate output file paths&lt;a id=&quot;generate-output-file-paths&quot; name=&quot;generate-output-file-paths&quot;&gt;&lt;/a&gt;Sometimes it is useful to generate a file name taken into account some parameters and the current timestamp.This function generates this file paths.```pythonfrom mysutils.file import output_file_path# Generate a file name in the current folder with the timestampfile_path = output_file_path()# Generate a file name in the 'model' folder with the timestampfile_path = output_file_path('model')# Generate a file name in the 'model' folder with the timestamp and .tar.gz as suffix.file_path = output_file_path('model', '.tar.gz')# Generate a file name in the 'model' folder with the timestamp, followed by the string &quot;-svm-0.7-300-lemma&quot;,# and .tar.gz as suffix.filepath = output_file_path('model', '.tar.gz', True, method='svm', k=0.7, passes=300, lemma=True, stopw=False)# Generate the same as previous but without timestampoutput_file_path('model', '.tar.gz', False, method='svm', k=0.7, passes=300, lemma=True, stopw=False)```## Check file encoding&lt;a id=&quot;check-file-encoding&quot; name=&quot;check-file-encoding&quot;&gt;&lt;/a&gt;Check if a file content is compatible with a text encoding.```pythonfrom mysutils.file import has_encoding# Return True if the file 1.txt is compatible with utf-8has_encoding('1.txt', 'utf-8')```## Expand wildcards&lt;a id=&quot;expand-wildcards&quot; name=&quot;expand-wildcards&quot;&gt;&lt;/a&gt;From strings or file paths which might contain wildcards, the function expand_wildcards() expands them, returning a list of existing files that match with the wildcards.```pythonfrom mysutils.file import expand_wildcards, touch# Create 4 files with different extensionstouch('1.txt', '2.txt', '3.json', '4.yaml')# Return ['1.txt', '2.txt', '4.yaml']expand_wildcards('*.txt', '*.yaml')```# Removable files&lt;a id=&quot;removable-files&quot;&gt;&lt;/a&gt;Many times it is necessary to remove temporal files after their use, even if there are any problem with the process.These classes and functions allow you to self-removable files, temporally or not.For example, with removable_tmp() function you can do:```pythonfrom mysutils.tmp import removable_tmp# Create removable temporal filewith removable_tmp() as tmp:    # Do something with the file tmp, for example:    with open(tmp, 'wt') as file:        print('Hello world', file=file)# The tmp file is removed# Create removable temporal folderwith removable_tmp(folder=True) as tmp:    # Do something with the folder tmp    ...# The temporal folder is removed# Create a file with suffix:with removable_tmp(suffix='tar.gz') as tmp:    # Do something with the file tmp    ...# The temporal folder is removed# Create a file with suffix and prefixwith removable_tmp(suffix='tar.gz', prefix='prefix_') as tmp:    # Do something with the file tmp    ...# The temporal folder is removed```Also, you can do the same with custom created files:```pythonfrom mysutils.tmp import removable_filesfrom mysutils.file import mkdirs# Several files to removewith removable_files('1.txt', '2.txt', '3.txt', 'x.out', 'y.out', 'z.out'):    # Do something with the defined files, for example:    with open('1.txt', 'wt') as file:        print('Hello world', file=file)# All the files are removed# Create a removable file and assign it to a variablewith removable_files('1.txt') as (filename,):  with open(filename, 'wt') as file:        print('Hello world', file=file)# The file is removed      # Several files to remove and assign them to variableswith removable_files('1.txt', '2.txt', '3.txt', 'x.out', 'y.out', 'z.out') as (f1, f2, f3, f4, f6):    # Do something with the defined files, for example:    with open(f1, 'wt') as file:        print('Hello world', file=file)    with open(f2, 'wt') as file:        print('Goodbye world', file=file)# All the files are removed# A removable folderswith removable_files('data1', 'data2', recursive=True) as (d1, d2):    mkdirs(d1, d2)    # Do something with the folders    ...# Remove automatically the folders and their files```# Compressing files&lt;a id=&quot;compressing-files&quot; name=&quot;compressing-files&quot;&gt;&lt;/a&gt;With this library there are two ways to compress files: single gzip files and tar files.## Gzip&lt;a id=&quot;gzip&quot; name=&quot;gzip&quot;&gt;&lt;/a&gt;```pythonfrom mysutils.file import gzip_compress, gzip_decompress, save_json# Create a filed = {    'version': 1.0,    'file_list': ['1.txt', '2.txt']}save_json(d, 'file.json')# Compress the filegzip_compress('file.json', 'file.json.gz')# Decompress the filegzip_decompress('file.json.gz', 'file2.json')```## Tar&lt;a id=&quot;tar&quot; name=&quot;tar&quot;&gt;&lt;/a&gt;Some utils to create, extract and use tar files.All the examples of this section assume you have the files 'test.json' and 'test.json.gz', for instance, withthis code:```pythonfrom mysutils.file import save_jsond = {    'version': 1.0,    'file_list': ['1.txt', '2.txt']}save_json(d, 'test.json')save_json(d, 'test.json.gz')```### Create a tar file&lt;a id=&quot;create-a-tar-file&quot;&gt;&lt;/a&gt;With create_tar() you can create a tar file (compressed or not) and include a list of files.```pythonfrom mysutils.tar import create_tar# Create a normal tar filecreate_tar('test.tar', 'test.json', 'test.json.gz')# Create a gzip compressed tar filecreate_tar('test.tar.gz', 'test.json', 'test.json.gz')# Create a bzip2 compressed tar filecreate_tar('test.tar.bz2', 'test.json', 'test.json.gz')# create a xz compressed tar filecreate_tar('test.tar.xz', 'test.json', 'test.json.gz')# The compress method is selected automatically, but you can force it by the parameter compress_methodcreate_tar('test.tar', 'test.json', 'test.json.gz', compress_method='gz')```### List the content of a tar file&lt;a id=&quot;list-the-content-of-a-tar-file&quot;&gt;&lt;/a&gt;```pythonfrom mysutils.tar import list_tarlst = list_tar('test.tar.gz')print(lst[0].path)```### Extract a specific file&lt;a id=&quot;extract-a-specific-file&quot;&gt;&lt;/a&gt;```pythonfrom mysutils.tar import extract_tar_file# Extract the file 'test.json' to 'test2.json' from 'test.tar.gz'. extract_tar_file('test.tar.gz', 'test2.json', 'test.json')# Extract the file 'test.json' and save it into 'data/' folder from 'test.tar.gz'.extract_tar_file('test.tar.gz', 'data/', 'test.json')# The decompress method is selected automatically, but you can force it by the parameter compress_methodextract_tar_file('test.tar', 'data/', 'test.json', compress_method='gz')```### Extract several files into a folder&lt;a id=&quot;extract-several-files-into-a-folder&quot;&gt;&lt;/a&gt;```pythonfrom mysutils.tar import extract_tar_files, extract_tar# Extract 'test.json' and 'test.json.gz' from 'test.tar.gz2' and store them into 'data/' if it exists.extract_tar_files('test.tar.bz2', 'data/', 'test.json', 'test.json.gz')# The same as before but creates the folder 'data/' if it does not exist.extract_tar_files('test.tar.bz2', 'data/', 'test.json', 'test.json.gz', force=True)# Extract files showing a progress barextract_tar_files('test.tar.bz2', 'data/', 'test.json', 'test.json.gz', verbose=True)# Extract all the files into the folder 'data/' if it existsextract_tar('test.tar', 'data/', False)# Extract all the files forcing the folder creationextract_tar('test.tar', 'data/', True)# Show a progress barextract_tar('test.tar', 'data/', verbose=True)```In all the previous functions you can use __compress_method__ parameter to select manually which compression or decompression method you want to use.### Add files to a TAR archive```pythonfrom mysutils.tar import create_tar, add_tar_files# Create a tar file with a compressed json filecreate_tar('test.tar', 'test.json.gz')# Add the files to the tar fileadd_tar_files('test.tar', 'test.json', 'test1.txt')# This function also works with compressed tar filescreate_tar('test.tar.gz', 'test.json.gz')add_tar_files('test.tar.gz', 'test.json', 'test1.txt')# The decompress method is selected automatically, but you can force it by the parameter compress_methodadd_tar_files('test.tar', 'test.json', 'test1.txt', compress_method='gz')```### Open and load files inside a tar archive&lt;a id=&quot;open-and-load-files-inside-a-tar-archive&quot; name=&quot;open-and-load-files-inside-a-tar-archive&quot;&gt;&lt;/a&gt;With these functions it is possible to open a stream to or load a yaml, json or pickle of a specific file inside a tar archive.```pythonfrom mysutils.tar import open_tar_file, load_tar_json, load_tar_picklefrom mysutils.yaml import load_tar_yamlimport json# Open the file test.txt from test.tar.gz and print its content with open_tar_file('test.tar.gz', 'test.txt') as file:    for line in file:      print(line, end='')# Load a json file inside a tar archive, even if it is also compressedd = load_tar_json('test.tar.gz', 'test.json.gz')# Load a pickle file inside a tar archive, even if it is also compressedo = load_tar_pickle('test.tar.gz', 'test.pkl')# Load a yaml file inside a tar archive, even if it is also compressedd = load_tar_yaml('test.tar.gz', 'test.yaml.gz')```### Check if some files are inside a TAR file```pythonfrom mysutils.tar import create_tar, exist_tar_files# Create a TAR filecreate_tar('test.tar.gz', 'test.json', 'test.json.gz')# This will return Trueexist_tar_files('test.tar.gz', 'test.json', 'test.json.gz')# This will return Falseexist_tar_files('test.tar.gz', 'other.json', 'test.json.gz')```# External commands&lt;a id=&quot;external-commands&quot; name=&quot;external-commands&quot;&gt;&lt;/a&gt;This module only contains a function that execute an external command and return the standard and error outputs.Its execution is very simple:```pythonfrom mysutils.command import execute_command# Execute the Unix shell command 'ls data/'std, err = execute_command(['ls', 'data/'])# Print the standard outputprint(std)# Print the error outputprint(err)# Also you can introduce an unique stringstd, err = execute_command('echo -n &quot;This is a test&quot;')```# Configuration files&lt;a id=&quot;configuration-files&quot; name=&quot;configuration-files&quot;&gt;&lt;/a&gt;Too many times, when you deal with config files or some kind of configuration cluster server, you become crazybecause there are a small spelling mistake in the name of a configuration parameter, and you code does not work properly.With the function parse_config() you can easily define an array with the configuration parameter that you need andthis function throws an exception if there are any error or the parameters in the configuration file does not matchwith the defined ones. For example:```pythonfrom mysutils.config import parse_configPARAM_DEFINITION = [('server_host', False, 'http://0.0.0.0'), ('server_port', False, 8080),                    ('database_name', True, None)]# Check if all the required parameters are in the configuration file and there are anymore (double check)config = {  'database_name': 'Test'}values = parse_config(config, PARAM_DEFINITION, True)  # Returns the default values of the parameters# With double_check to False instead of True, the configuration file can have other no defined parametersconfig = {  'database_name': 'Test',  'new_parameter': 1}values = parse_config(config, PARAM_DEFINITION, False)# This will raise an error because double_check is activated and the configuration file has a non-defined value.config = {  'database_name': 'Test',  'new_parameter': 1}parse_config(config, PARAM_DEFINITION, True)```# Logging&lt;a id=&quot;logging&quot; name=&quot;logging&quot;&gt;&lt;/a&gt;Some functions to configure and to get information about logging. ```pythonfrom mysutils.logging import get_log_level_names, get_log_levels, get_log_level, config_log# Configure the logging to show only error messagesconfig_log('ERROR')# Configure the logging to show INFO or higher message level and store it in a fileconfig_log('ERROR', 'file.log')# Get the log level namesget_log_level_names()# Get the log level names and its numberget_log_levels()# Get the log level number from its nameget_log_level('DEBUG')```You have also the log_curl_request() function to ```pythonfrom logging import getLoggerfrom mysutils.logging import log_curl_requestfrom mysutils.text import AnsiCodeslogger = getLogger(__name__)log_curl_request(logger.error,                 'http://localhost:5000/world_domination',                 'POST',                 {'Content-Type': 'application/json'},                 {'quantity_of_people': 'everybody'},                 AnsiCodes.RED)```The previous code will print the following output but with the command in red color:```bashcurl -X POST -H &quot;Content-Type: application/json&quot; &quot;http://localhost:5000/world_domination&quot; --data '{&quot;quantity_of_people&quot;: &quot;everybody&quot;}'```# Method synchronization&lt;a id=&quot;method-synchronization&quot; name=&quot;method-synchronization&quot;&gt;&lt;/a&gt;Sometimes it is necessary to create a synchronized method.With @synchronized you can create a synchronized method easily:```pythonfrom mysutils.method import synchronizedfrom time import sleepfrom threading import Threadnum = 0# Create a class with a synchronized methodclass MyClass(object):    @synchronized    def calculate(self):        global num        print(f'Starting calculation {num}.')        sleep(5)        num += 1        print(f'Ending calculation {num}.')# Create two instances of the same classobj1, obj2 = MyClass(), MyClass()# Execute the method of the first object as a thread thread = Thread(target=obj1.calculate)thread.start()sleep(1)# This method will wait 4 seconds more to finish the first calculate() method.obj1.calculate()```# Services and Web&lt;a id=&quot;services-and-web&quot; name=&quot;services-and-web&quot;&gt;&lt;/a&gt;## Download a file&lt;a id=&quot;download-a-file&quot; name=&quot;download-a-file&quot;&gt;&lt;/a&gt;This function requires to install the Requests module with the following command:```bashpip install requests~=2.25.1```After module requests is installed, you can download a file with this simple command:```pythonfrom mysutils.web import download# Download the file from the url to 'dest/file.txt'.download('&lt;url-to-download&gt;', 'dest/file.txt')```## Endpoint&lt;a id=&quot;endpoint&quot; name=&quot;endpoint&quot;&gt;&lt;/a&gt;In the contexts of a web service, you can need the base real final url to a service, that means, the protocol, IP or hostname and path to the service. You can obtain this with endpoint() function. This function is based on javascript, then it is necessary to use inside an HTML document.An example, in all my services I create a start point (usually home page) to describe briefly how to use.Depending on if I deploy this service locally or in the job server, the path to the service changes.However, I would not like to remember to modify each time the service or any parameter. To avoid this, I use the endpoint() function in the HTML instructions like this:```pythonfrom fastapi import FastAPI, HTTPExceptionfrom mysutils.service import endpointapp = FastAPI()@app.get('/', response_class=HTMLResponse)def home() -&gt; str:    &quot;&quot;&quot; Show the help.    :return: The HTML code to show the help.    &quot;&quot;&quot;    return f'&lt;h1&gt;My service&lt;/h1&gt;\n' \           '&lt;p&gt;With these services, you can do wonderful things. ' \           'For example, with this one you can dominate the world:&lt;/p&gt;\n' \           '&lt;code&gt;' + \           f'curl -X GET -L -i \'{endpoint(&quot;dominate&quot;)}?num_countries=&amp;lt;NUM&amp;gt;\'' \           '&lt;/code&gt;\n' \```If your service is in the URL https://www.example.com/services/dominate, this will generate a page like this:&gt; # My service&gt; With this service, you can do wonderful things. For example, with this one you can dominate the world:&gt; ```bash&gt; curl -X GET -L -i 'https://www.example.com/services/dominate?num_countries=&amp;lt;NUM&amp;gt;'&gt; ```However, if you execute this command locally in port 8080,the last URL will be: http://localhost:8080/dominate?num_countries=&lt;NUM&gt;.This method works in both, FastAPI or Flask, and it maybe can work also in other server environments.## Generate service help&lt;a id=&quot;generate-service-help&quot; name=&quot;generate-service-help&quot;&gt;&lt;/a&gt;You can create a page with documentation about your service from a README.md or another Markdown file with the functiongenerate_service_help(). For example:```pythonfrom mysutils.fastapi import gen_service_helpfrom fastapi.responses import HTMLResponsefrom fastapi import FastAPI, HTTPExceptionapp = FastAPI()@app.get('/help', response_class=HTMLResponse)def home() -&gt; str:  &quot;&quot;&quot; Show the help.  :return: The HTML code to show the help.  &quot;&quot;&quot;  return gen_service_help('Page title', 'README.md', '# Web API',                          '/service1', '/service2', '/service3')```This way, it will generate a Web page with the title 'Page title', using the information in the README.md filefrom the section '# Web API' for the service endpoints 'service1', 'service2' and 'service3'.If the endpoints are used, then, if in the readme threre are any url like 'https?://.*/serviceX', then it will return the real URL of the service.*Note:* To use this function, you need to install markdown package, and, optionally, if you want colorful embedded code, you also need to install pygments:```bashpip install markdown~=3.3.6 Pygments&gt;=2.10.0,~=2.11.2```## JSON post&lt;a id=&quot;json-post&quot; name=&quot;json-post&quot;&gt;&lt;/a&gt;A very easy way to send a dictionary by means to http post, ot a json service.```pythonfrom mysutils.request import json_post# Send the dictionary '{&quot;msg&quot;: &quot;Hello world!&quot;}' to the service with that url json_post('https://postman-echo.com/post', {&quot;msg&quot;: &quot;Hello world!&quot;})```# File unit tests&lt;a id=&quot;unit-tests&quot; name=&quot;unit-tests&quot;&gt;&lt;/a&gt;A small class that inherits from TestCase and have methods to assert the typical file options like exists or isdir.```pythonfrom mysutils import unittestfrom mysutils.file import touch, move_filesclass MyTestCase(unittest.FileTestCase):  # Check if some files exists and they have been moved successfully  def test_move_files(self) -&gt; None:    touch('1.txt', '2.txt', '3.txt')    move_files('test/', '1.txt', '2.txt', '3.txt')    self.assertExists('test/1.txt', 'test/2.txt', 'test/3.txt')    self.assertNotExists('1.txt', '2.txt', '3.txt')  def test_encoding(self) -&gt; None:    # Check if the content of 1.txt, 2.txt and 3.txt are compatible    # with iso8859-1 encoding.    self.assertEncoding('1.txt', '2.txt', '3.txt', encoding='iso8859-1')    # Check if the content of 1.txt, 2.txt and 3.txt are not compatible    # with iso8859-1 encoding.    self.assertEncoding('1.txt', '2.txt', '3.txt', encoding='iso8859-1')```# Miscellany&lt;a id=&quot;miscellany&quot; name=&quot;miscellany&quot;&gt;&lt;/a&gt;Other no classifiable functions, like conditional() function that executes a function if a condition is True.For example, if you need to do the following:```pythonfrom mysutils.misc import conditional# The function to executedef my_func(a: int, b: str, **kwargs) -&gt; str:    return f'Intent {a} of {b} for {kwargs[&quot;c&quot;]}'# Instead of doing this:if a &gt; b:  my_func(1, 'apple', c='Lucas')# You can doconditional(my_func, a &gt; b, 1, 'apple', c='Lucas')```# How to collaborateI you want to collaborate with this project, please, &lt;a href=&quot;mailto:jmgomez.soriano@gmail.com&quot;&gt;contact with me&lt;/a&gt;.</longdescription>
</pkgmetadata>