<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;readme_logo.png&quot; /&gt;&lt;/p&gt;# Optimum IntelðŸ¤— Optimum Intel is the interface between the ðŸ¤— Transformers and Diffusers libraries and the different tools and libraries provided by Intel to accelerate end-to-end pipelines on Intel architectures.Intel [Neural Compressor](https://www.intel.com/content/www/us/en/developer/tools/oneapi/neural-compressor.html) is an open-source library enabling the usage of the most popular compression techniques such as quantization, pruning and knowledge distillation. It supports automatic accuracy-driven tuning strategies in order for users to easily generate quantized model. The users can easily apply static, dynamic and aware-training quantization approaches while giving an expected accuracy criteria. It also supports different weight pruning techniques enabling the creation of pruned model giving a predefined sparsity target.[OpenVINO](https://docs.openvino.ai/latest/index.html) is an open-source toolkit that enables high performance inference capabilities for Intel CPUs, GPUs, and special DL inference accelerators ([see](https://docs.openvino.ai/latest/openvino_docs_OV_UG_supported_plugins_Supported_Devices.html) the full list of supported devices). It is supplied with a set of tools to optimize your models with compression techniques such as quantization, pruning and knowledge distillation. Optimum Intel provides a simple interface to optimize your Transformers and Diffusers models, convert them to the OpenVINO Intermediate Representation (IR) format and run inference using OpenVINO Runtime.## InstallationTo install the latest release of ðŸ¤— Optimum Intel with the corresponding required dependencies, you can use `pip` as follows:| Accelerator                                                                                                      | Installation                                                         ||:-----------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------|| [Intel Neural Compressor](https://www.intel.com/content/www/us/en/developer/tools/oneapi/neural-compressor.html) | `pip install --upgrade-strategy eager &quot;optimum[neural-compressor]&quot;`  || [OpenVINO](https://docs.openvino.ai/latest/index.html)                                                           | `pip install --upgrade-strategy eager &quot;optimum[openvino,nncf]&quot;`      |The `--upgrade-strategy eager` option is needed to ensure `optimum-intel` is upgraded to the latest version.We recommend creating a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment) and upgradingpip with `python -m pip install --upgrade pip`.Optimum Intel is a fast-moving project, and you may want to install from source with the following command:```bashpython -m pip install git+https://github.com/huggingface/optimum-intel.git```or to install from source including dependencies:```bashpython -m pip install &quot;optimum-intel[extras]&quot;@git+https://github.com/huggingface/optimum-intel.git```where `extras` can be one or more of `neural-compressor`, `openvino`, `nncf`.# Quick tour## Neural CompressorDynamic quantization can be used through the Optimum command-line interface:```bashoptimum-cli inc quantize --model distilbert-base-cased-distilled-squad --output ./quantized_distilbert```Note that quantization is currently only supported for CPUs (only CPU backends are available), so we will not be utilizing GPUs / CUDA in this example.To load a quantized model hosted locally or on the ðŸ¤— hub, you can do as follows :```pythonfrom optimum.intel import INCModelForSequenceClassificationmodel_id = &quot;Intel/distilbert-base-uncased-finetuned-sst-2-english-int8-dynamic&quot;model = INCModelForSequenceClassification.from_pretrained(model_id)```You can load many more quantized models hosted on the hub under the Intel organization [`here`](https://huggingface.co/Intel).For more details on the supported compression techniques, please refer to the [documentation](https://huggingface.co/docs/optimum/main/en/intel/optimization_inc).## OpenVINOBelow are the examples of how to use OpenVINO and its [NNCF](https://docs.openvino.ai/latest/tmo_introduction.html) framework to accelerate inference.#### Export:It is possible to export your model to the [OpenVINO](https://docs.openvino.ai/2023.1/openvino_ir.html) IR format with the CLI :```plainoptimum-cli export openvino --model gpt2 ov_model```If you add `--int8`, the weights will be quantized to INT8, the activations will be kept in floating point precision.```plainoptimum-cli export openvino --model gpt2 --int8 ov_model```#### Inference:To load a model and run inference with OpenVINO Runtime, you can just replace your `AutoModelForXxx` class with the corresponding `OVModelForXxx` class.```diff- from transformers import AutoModelForSeq2SeqLM+ from optimum.intel import OVModelForSeq2SeqLM  from transformers import AutoTokenizer, pipeline  model_id = &quot;echarlaix/t5-small-openvino&quot;- model = AutoModelForSeq2SeqLM.from_pretrained(model_id)+ model = OVModelForSeq2SeqLM.from_pretrained(model_id)  tokenizer = AutoTokenizer.from_pretrained(model_id)  pipe = pipeline(&quot;translation_en_to_fr&quot;, model=model, tokenizer=tokenizer)  results = pipe(&quot;He never went out without a book under his arm, and he often came back with two.&quot;)  [{'translation_text': &quot;Il n'est jamais sorti sans un livre sous son bras, et il est souvent revenu avec deux.&quot;}]```If you want to load a PyTorch checkpoint, set `export=True` to convert your model to the OpenVINO IR.```pythonfrom optimum.intel import OVModelForCausalLMmodel = OVModelForCausalLM.from_pretrained(&quot;gpt2&quot;, export=True)model.save_pretrained(&quot;./ov_model&quot;)```#### Post-training static quantization:Post-training static quantization introduces an additional calibration step where data is fed through the network in order to compute the activations quantization parameters. Here is an example on how to apply static quantization on a fine-tuned DistilBERT.```pythonfrom functools import partialfrom optimum.intel import OVQuantizer, OVModelForSequenceClassificationfrom transformers import AutoTokenizer, AutoModelForSequenceClassificationmodel_id = &quot;distilbert-base-uncased-finetuned-sst-2-english&quot;model = AutoModelForSequenceClassification.from_pretrained(model_id)tokenizer = AutoTokenizer.from_pretrained(model_id)def preprocess_fn(examples, tokenizer):    return tokenizer(        examples[&quot;sentence&quot;], padding=True, truncation=True, max_length=128    )quantizer = OVQuantizer.from_pretrained(model)calibration_dataset = quantizer.get_calibration_dataset(    &quot;glue&quot;,    dataset_config_name=&quot;sst2&quot;,    preprocess_function=partial(preprocess_fn, tokenizer=tokenizer),    num_samples=100,    dataset_split=&quot;train&quot;,    preprocess_batch=True,)# The directory where the quantized model will be savedsave_dir = &quot;nncf_results&quot;# Apply static quantization and save the resulting model in the OpenVINO IR formatquantizer.quantize(calibration_dataset=calibration_dataset, save_directory=save_dir)# Load the quantized modeloptimized_model = OVModelForSequenceClassification.from_pretrained(save_dir)```#### Quantization-aware training:Quantization aware training (QAT) is applied in order to simulate the effects of quantization during training, to alleviate its effects on the modelâ€™s accuracy. Here is an example on how to fine-tune a DistilBERT model on the sst-2 task while applying quantization aware training (QAT).```diff  import evaluate  import numpy as np  from datasets import load_dataset  from transformers import AutoModelForSequenceClassification, AutoTokenizer, TrainingArguments, default_data_collator- from transformers import Trainer+ from optimum.intel import OVConfig, OVModelForSequenceClassification, OVTrainer  model_id = &quot;distilbert-base-uncased-finetuned-sst-2-english&quot;  model = AutoModelForSequenceClassification.from_pretrained(model_id)  tokenizer = AutoTokenizer.from_pretrained(model_id)  dataset = load_dataset(&quot;glue&quot;, &quot;sst2&quot;)  dataset = dataset.map(      lambda examples: tokenizer(examples[&quot;sentence&quot;], padding=True, truncation=True, max_length=128), batched=True  )  metric = evaluate.load(&quot;glue&quot;, &quot;sst2&quot;)  compute_metrics = lambda p: metric.compute(      predictions=np.argmax(p.predictions, axis=1), references=p.label_ids  )  # The directory where the quantized model will be saved  save_dir = &quot;nncf_results&quot;  # Load the default quantization configuration detailing the quantization we wish to apply+ ov_config = OVConfig()- trainer = Trainer(+ trainer = OVTrainer(      model=model,      args=TrainingArguments(save_dir, num_train_epochs=1.0, do_train=True, do_eval=True),      train_dataset=dataset[&quot;train&quot;].select(range(300)),      eval_dataset=dataset[&quot;validation&quot;],      compute_metrics=compute_metrics,      tokenizer=tokenizer,      data_collator=default_data_collator,+     ov_config=ov_config,+     task=&quot;text-classification&quot;,  )  train_result = trainer.train()  metrics = trainer.evaluate()  trainer.save_model()+ optimized_model = OVModelForSequenceClassification.from_pretrained(save_dir)```You can find more examples in the [documentation](https://huggingface.co/docs/optimum/intel/index).## Running the examplesCheck out the [`examples`](https://github.com/huggingface/optimum-intel/tree/main/examples) directory to see how ðŸ¤— Optimum Intel can be used to optimize models and accelerate inference.Do not forget to install requirements for every example:```cd &lt;example-folder&gt;pip install -r requirements.txt```</longdescription>
</pkgmetadata>