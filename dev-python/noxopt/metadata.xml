<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># NoxOpt[Nox](https://github.com/wntrblm/nox) sessions with options!## InstallationIt's just `pip install noxopt`!## Basic UsageDefine a session with typed parameters:```pythonfrom noxopt import NoxOpt, Sessiongroup = NoxOpt()@group.sessiondef add_numbers(session: Session, x: int, y: int) -&gt; None:    session.log(x + y)```Now you can pass this session the declared option via the command line:```bashnox -s my-session -- --x 10 -- y 3```And you'll see the following output```txtnox &gt; Running session my-sessionnox &gt; Creating virtual environment (virtualenv) using python in .nox/my-sessionnox &gt; 13nox &gt; Session my-session was successful.```Note that all options declared with the sessions of a `NoxOpt` group must be consistent.That is, if one session defined `x: int`, another session in the same group cannotdefine `x: bool` instead.## Customizing OptionsThis time you're going to use some [`Annotated`](https://peps.python.org/pep-0593/)metadata to customize your option:```pythonfrom typing import Annotatedfrom noxopt import NoxOpt, Option, Sessiongroup = NoxOpt()@group.sessiondef sum_numbers(    session: Session,    nums: Annotated[list[int], Option(nargs=&quot;*&quot;, type=int)],) -&gt; None:    session.log(sum(nums))```This time when you run it you can pass several of numbers:```bashnox -s sum-numbers -- --nums 10 3 26 4```And you'll see the following output```txtnox &gt; Running session my-sessionnox &gt; Creating virtual environment (virtualenv) using python in .nox/my-sessionnox &gt; 43nox &gt; Session my-session was successful.```Note that the annotation for `nums` should be understood in the following way:```python# declare a type with metadataAnnotated[    # your normal type annotation    list[int],    # configure the option associated with the type annotation above    Option(nargs=&quot;*&quot;, type=int)]```You'll find that `Option` has nearly the same parameters as[`argparse.add_argument`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument).If you need to use a given option more than once you can do so by defining it as avariable:```pythonfrom functools import reducefrom typing import Annotated, TypeAliasfrom noxopt import NoxOpt, Option, Sessiongroup = NoxOpt()Integers = Annotated[list[int], Option(nargs=&quot;*&quot;, type=int)]@group.sessiondef sum_numbers(session: Session, nums: Integers) -&gt; None:    session.log(sum(nums))@group.sessiondef multiply_numbers(session: Session, nums: Integers) -&gt; None:    session.log(reduce(lambda x, y: x * y, nums, 0))```## Parametrizing SessionsIf want to use the[`@nox.parametrize`](https://nox.thea.codes/en/stable/config.html#parametrizing-sessions)decorator with NoxOpt you'll need to explicitely declare which parameters should betreated as command line options. This is done by annotating them with`Annotated[YourType, Option()]`:```pythonfrom typing import Annotatedfrom nox import Session, parametrizefrom noxopt import NoxOpt, Optiongroup = NoxOpt()@group.session@parametrize(&quot;num&quot;, [1, 2, 3])def log_nums(session: Session, num: int, mult: Annotated[int, Option()]) -&gt; None:    session.log(num * mult)```You could now run:```bashnox -s multiply-nums -- --mult 2```And see the output:```nox &gt; Running session multiply-nums(num=1)nox &gt; Creating virtual environment (virtualenv) using python in .nox/multiply-nums-num-1nox &gt; 2nox &gt; Session multiply-nums(num=1) was successful.nox &gt; Running session multiply-nums(num=2)nox &gt; Creating virtual environment (virtualenv) using python in .nox/multiply-nums-num-2nox &gt; 4nox &gt; Session multiply-nums(num=2) was successful.nox &gt; Running session multiply-nums(num=3)nox &gt; Creating virtual environment (virtualenv) using python in .nox/multiply-nums-num-3nox &gt; 6nox &gt; Session multiply-nums(num=3) was successful.nox &gt; Ran multiple sessions:nox &gt; * multiply-nums(num=1): successnox &gt; * multiply-nums(num=2): successnox &gt; * multiply-nums(num=3): success```## Common SetupNoxOpt allows you to add logic that runs before sessions in a group.```pythonfrom noxopt import NoxOpt, Sessiongroup = NoxOpt()@nox.setupdef setup(session: Session) -&gt; None:    ...  # your setup logic here@group.sessiondef my_session(session: Sesssion) -&gt; None:    ... # your session here```Here, the `setup` function will run before all sessions in the `NoxOpt` group. Torun setup only on specific sessions in a group you specify a prefix. Any sessionswhose names begin with that prefix will share the same setup procedure:```pythonfrom noxopt import NoxOpt, Sessiongroup = NoxOpt()@nox.setup(&quot;python&quot;)def setup_python(session: Session) -&gt; None:    ...  # your setup logic here@group.sessiondef python_tests(session: Session) -&gt; None:    ...@group.sessiondef javascript_tests(session: Session) -&gt; None:    ...```Here, `setup_python` will only run when any session whose name begins with `python` isexecuted. In this case that would only apply to the `python-tests` session.You can also declare common settings for all sessions within a group by passing`NoxOpt(where=dict(...))`. This parameter accepts a dictionary that will be passed tothe `nox.session` decorator as keyword arguments when constructing each session. So, ifyou wanted to run all sessions in a group with Python 3.10 and 3.11 you would configure:```pythonfrom noxopt import NoxOpt# run all sessions in this group using Python 3.10 and 3.11group = NoxOpt(where=dict(python=[&quot;3.10&quot;, &quot;3.11&quot;]))```## Automatic TagsAn additional nicety of NoxOpt is that is can automatically create tags based on thenames of your sessions using the `NoxOpt(auto_tag=True)` parameter. The idea behind thisparameter is that if you have a set of sessions with a common naming scheme like:```pythonfrom noxopt import NoxOpt, Sessiongroup = NoxOpt(auto_tag=True)@group.sessiondef check_python_tests(session: Session) -&gt; None:    ...@group.sessiondef check_python_format(session: Session) -&gt; None:    ...@group.sessiondef check_javascript_tests(session: Session) -&gt; None:    ...@group.sessiondef check_javascript_format(session: Session) -&gt; None:    ...```NoxOpt will generate the following tags which, if run with `nox -t &lt;tag&gt;` will execute...- `check` - all sessions- `check-python` - only `check-python-tests` and `check-python-format`- `check-javascript`- only `check-javascript-tests` and `check-javascript-format`It does this by splitting every session name in the `NoxOpt` group on `-` charactersa tag where there are at least two or more sessions with a common prefix.</longdescription>
</pkgmetadata>