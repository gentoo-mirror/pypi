<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># wasabi: A lightweight console printing and formatting toolkitOver the years, I've written countless implementations of coloring andformatting utilities to output messages in our libraries like[spaCy](https://spacy.io), [Thinc](https://github.com/explosion/thinc) and[Prodigy](https://prodi.gy). While there are many other great open-sourceoptions, I've always ended up wanting something slightly different or slightlycustom.This package is still a work in progress and aims to bundle those utilities in astandardised way so they can be shared across our other projects. It's superlightweight, has zero dependencies and works with Python 3.6+.[![Azure Pipelines](https://img.shields.io/azure-devops/build/explosion-ai/public/1/master.svg?logo=azure-pipelines&amp;style=flat-square)](https://dev.azure.com/explosion-ai/public/_build?definitionId=1)[![PyPi](https://img.shields.io/pypi/v/wasabi.svg?style=flat-square&amp;logo=pypi&amp;logoColor=white)](https://pypi.python.org/pypi/wasabi)[![conda](https://img.shields.io/conda/vn/conda-forge/wasabi.svg?style=flat-square&amp;logo=conda-forge/logoColor=white)](https://anaconda.org/conda-forge/wasabi)[![GitHub](https://img.shields.io/github/release/ines/wasabi/all.svg?style=flat-square&amp;logo=github)](https://github.com/ines/wasabi)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)&lt;img width=&quot;609&quot; src=&quot;https://user-images.githubusercontent.com/13643239/48663861-8c9ea000-ea96-11e8-8b04-d120c52276a8.png&quot;&gt;## üí¨ FAQ### Are you going to add more features?Yes, there's still a few of helpers and features to port over. However, the newfeatures will be heavily biased by what we (think we) need. I always appreciatepull requests to improve the existing functionality ‚Äì but I want to keep thislibrary as simple, lightweight and specific as possible.### Can I use this for my projects?Sure, if you like it, feel free to adopt it! Just keep in mind that the packageis very specific and not intended to be a full-featured and fully customisableformatting library. If that's what you're looking for, you might want to tryother packages ‚Äì for example, [`colored`](https://pypi.org/project/colored/),[`crayons`](https://github.com/kennethreitz/crayons),[`colorful`](https://github.com/timofurrer/colorful),[`tabulate`](https://bitbucket.org/astanin/python-tabulate),[`console`](https://github.com/mixmastamyk/console) or[`py-term`](https://github.com/gravmatt/py-term), to name a few.### Why `wasabi`?I was looking for a short and descriptive name, but everything was alreadytaken. So I ended up naming this package after one of my rats, Wasabi. üêÄ## ‚åõÔ∏è Installation```bashpip install wasabi```## üéõ API### &lt;kbd&gt;function&lt;/kbd&gt; `msg`An instance of `Printer`, initialized with the default config. Useful as a quickshortcut if you don't need to customize initialization.```pythonfrom wasabi import msgmsg.good(&quot;Success!&quot;)```### &lt;kbd&gt;class&lt;/kbd&gt; `Printer`#### &lt;kbd&gt;method&lt;/kbd&gt; `Printer.__init__````pythonfrom wasabi import Printermsg = Printer()```| Argument          | Type      | Description                                                   | Default       || ----------------- | --------- | ------------------------------------------------------------- | ------------- || `pretty`          | bool      | Pretty-print output with colors and icons.                    | `True`        || `no_print`        | bool      | Don't actually print, just return.                            | `False`       || `colors`          | dict      | Add or overwrite color values, names mapped to `0`-`256`.     | `None`        || `icons`           | dict      | Add or overwrite icon. Name mapped to unicode.                | `None`        || `line_max`        | int       | Maximum line length (for divider).                            | `80`          || `animation`       | str       | Steps of loading animation for `Printer.loading`.             | `&quot;‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è&quot;` || `animation_ascii` | str       | Alternative animation for ASCII terminals.                    | `&quot;\|/-\\&quot;`    || `hide_animation`  | bool      | Don't display animation, e.g. for logs.                       | `False`       || `ignore_warnings` | bool      | Don't output messages of type `MESSAGE.WARN`.                 | `False`       || `env_prefix`      | str       | Prefix for environment variables, e.g. `WASABI_LOG_FRIENDLY`. | `&quot;WASABI&quot;`    || `timestamp`       | bool      | Add timestamp before output.                                  | `False`       || **RETURNS**       | `Printer` | The initialized printer.                                      | -             |#### &lt;kbd&gt;method&lt;/kbd&gt; `Printer.text````pythonmsg = Printer()msg.text(&quot;Hello world!&quot;)```| Argument   | Type           | Description                                                                                                            | Default || ---------- | -------------- | ---------------------------------------------------------------------------------------------------------------------- | ------- || `title`    | str            | The main text to print.                                                                                                | `&quot;&quot;`    || `text`     | str            | Optional additional text to print.                                                                                     | `&quot;&quot;`    || `color`    | ¬†unicode / int | Color name or value.                                                                                                   | `None`  || `icon`     | str            | Name of icon to add.                                                                                                   | `None`  || `show`     | bool           | Whether to print or not. Can be used to only output messages under certain condition, e.g. if `--verbose` flag is set. | `True`  || `spaced`   | bool           | Whether to add newlines around the output.                                                                             | `False` || `no_print` | bool           | Don't actually print, just return. Overwrites global setting.                                                          | `False` || `exits`    | int            | If set, perform a system exit with the given code after printing.                                                      | `None`  |#### &lt;kbd&gt;method&lt;/kbd&gt; `Printer.good`, `Printer.fail`, `Printer.warn`, `Printer.info`Print special formatted messages.```pythonmsg = Printer()msg.good(&quot;Success&quot;)msg.fail(&quot;Error&quot;)msg.warn(&quot;Warning&quot;)msg.info(&quot;Info&quot;)```| Argument | Type | Description                                                                                                            | Default || -------- | ---- | ---------------------------------------------------------------------------------------------------------------------- | ------- || `title`  | str  | The main text to print.                                                                                                | `&quot;&quot;`    || `text`   | str  | Optional additional text to print.                                                                                     | `&quot;&quot;`    || `show`   | bool | Whether to print or not. Can be used to only output messages under certain condition, e.g. if `--verbose` flag is set. | `True`  || `exits`  | int  | If set, perform a system exit with the given code after printing.                                                      | `None`  |#### &lt;kbd&gt;method&lt;/kbd&gt; `Printer.divider`Print a formatted divider.```pythonmsg = Printer()msg.divider(&quot;Heading&quot;)```| Argument | Type | Description                                                                                                            | Default || -------- | ---- | ---------------------------------------------------------------------------------------------------------------------- | ------- || `text`   | str  | Headline text. If empty, only the line is printed.                                                                     | `&quot;&quot;`    || `char`   | str  | Single line character to repeat.                                                                                       | `&quot;=&quot;`   || `show`   | bool | Whether to print or not. Can be used to only output messages under certain condition, e.g. if `--verbose` flag is set. | `True`  || `icon`   | str  | Optional icon to use with title.                                                                                       | `None`  |#### &lt;kbd&gt;contextmanager&lt;/kbd&gt; `Printer.loading````pythonmsg = Printer()with msg.loading(&quot;Loading...&quot;):    # Do something here that takes longer    time.sleep(10)msg.good(&quot;Successfully loaded something!&quot;)```| Argument | Type | Description                        | Default           || -------- | ---- | ---------------------------------- | ----------------- || `text`   | str  | The text to display while loading. | `&quot;Loading...&quot;`    |#### &lt;kbd&gt;method&lt;/kbd&gt; `Printer.table`, `Printer.row`See [Tables](#tables).#### &lt;kbd&gt;property&lt;/kbd&gt; `Printer.counts`Get the counts of how often the special printers were fired, e.g.`MESSAGES.GOOD`. Can be used to print an overview like &quot;X warnings&quot;```pythonmsg = Printer()msg.good(&quot;Success&quot;)msg.fail(&quot;Error&quot;)msg.warn(&quot;Error&quot;)print(msg.counts)# Counter({'good': 1, 'fail': 2, 'warn': 0, 'info': 0})```| Argument    | Type      | Description                                          || ----------- | --------- | ---------------------------------------------------- || **RETURNS** | `Counter` | The counts for the individual special message types. |### Tables#### &lt;kbd&gt;function&lt;/kbd&gt; `table`Lightweight helper to format tabular data.```pythonfrom wasabi import tabledata = [(&quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;), (&quot;b1&quot;, &quot;b2&quot;, &quot;b3&quot;)]header = (&quot;Column 1&quot;, &quot;Column 2&quot;, &quot;Column 3&quot;)widths = (8, 9, 10)aligns = (&quot;r&quot;, &quot;c&quot;, &quot;l&quot;)formatted = table(data, header=header, divider=True, widths=widths, aligns=aligns)``````Column 1   Column 2    Column 3--------   ---------   ----------      a1      a2       a3      b1      b2       b3```| Argument    | Type                | Description                                                                                                                         | Default  || ----------- | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | -------- || `data`      | iterable / dict     | The data to render. Either a list of lists (one per row) or a dict for two-column tables.                                           |          || `header`    | iterable            | Optional header columns.                                                                                                            | `None`   || `footer`    | iterable            | Optional footer columns.                                                                                                            | `None`   || `divider`   | bool                | Show a divider line between header/footer and body.                                                                                 | `False`  || `widths`    | iterable / `&quot;auto&quot;` | Column widths in order. If `&quot;auto&quot;`, widths will be calculated automatically based on the largest value.                            | `&quot;auto&quot;` || `max_col`   | int                 | Maximum column width.                                                                                                               | `30`     || `spacing`   | int                 | Number of spaces between columns.                                                                                                   | `3`      || `aligns`    | iterable / unicode  | Columns alignments in order. `&quot;l&quot;` (left, default), `&quot;r&quot;` (right) or `&quot;c&quot;` (center). If If a string, value is used for all columns. | `None`   || `multiline` | bool                | If a cell value is a list of a tuple, render it on multiple lines, with one value per line.                                         | `False`  || `env_prefix` | unicode                | Prefix for environment variables, e.g. WASABI_LOG_FRIENDLY.                                         | `&quot;WASABI&quot;` || `color_values` | dict                | Add or overwrite color values, name mapped to value.                                         | `None`   || `fg_colors` | iterable                | Foreground colors, one per column. None can be specified for individual columns to retain the default background color. | `None`   || `bg_colors` | iterable                | Background colors, one per column. None can be specified for individual columns to retain the default background color. | `None`   || **RETURNS** | str                 | The formatted table.                                                                                                                |          |#### &lt;kbd&gt;function&lt;/kbd&gt; `row````pythonfrom wasabi import rowdata = (&quot;a1&quot;, &quot;a2&quot;, &quot;a3&quot;)formatted = row(data)``````a1   a2   a3```| Argument    | Type                      | Description                                                                                                                                                | Default  || ----------- | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- || `data`      | iterable                  | The individual columns to format.                                                                                                                          |          || `widths`    | list / int / `&quot;auto&quot;` | Column widths, either one integer for all columns or an iterable of values. If &quot;auto&quot;, widths will be calculated automatically based on the largest value. | `&quot;auto&quot;` || `spacing`   | int                       | Number of spaces between columns.                                                                                                                          | `3`      || `aligns`    | list                  | Columns alignments in order. `&quot;l&quot;` (left), `&quot;r&quot;` (right) or `&quot;c&quot;` (center).                                                                                | `None`   || `env_prefix` | unicode                | Prefix for environment variables, e.g. WASABI_LOG_FRIENDLY.                                         | `&quot;WASABI&quot;` || `fg_colors`    | list                  | Foreground colors for the columns, in order. None can be specified for individual columns to retain the default foreground color. | `None`   || `bg_colors`    | list                  | Background colors for the columns, in order. None can be specified for individual columns to retain the default background color. | `None`   || **RETURNS** | str                       | The formatted row.                                                                                                                                         |          |### &lt;kbd&gt;class&lt;/kbd&gt; `TracebackPrinter`Helper to output custom formatted tracebacks and error messages. Currently usedin [Thinc](https://github.com/explosion/thinc).#### &lt;kbd&gt;method&lt;/kbd&gt; `TracebackPrinter.__init__`Initialize a traceback printer.```pythonfrom wasabi import TracebackPrintertb = TracebackPrinter(tb_base=&quot;thinc&quot;, tb_exclude=(&quot;check.py&quot;,))```| Argument          | Type               | Description                                                                                                                                                              | Default    || ----------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------- || `color_error`     | str / int          | Color name or code for errors (passed to `color` helper).                                                                                                                | `&quot;red&quot;`    || `color_tb`        | str / int          | Color name or code for traceback headline (passed to `color` helper).                                                                                                    | `&quot;blue&quot;`   || `color_highlight` | str / int          | Color name or code for highlighted text (passed to `color` helper).                                                                                                      | `&quot;yellow&quot;` || `indent`          | int                | Number of spaces to use for indentation.                                                                                                                                 | `2`        || `tb_base`         | str                | Name of directory to use to show relative paths. For example, `&quot;thinc&quot;` will look for the last occurence of `&quot;/thinc/&quot;` in a path and only show path to the right of it. | `None`     || `tb_exclude`      | tuple              | List of filenames to exclude from traceback.                                                                                                                             | `tuple()`  || **RETURNS**       | `TracebackPrinter` | The traceback printer.                                                                                                                                                   |            |#### &lt;kbd&gt;method&lt;/kbd&gt; `TracebackPrinter.__call__`Output custom formatted tracebacks and errors.```pythonfrom wasabi import TracebackPrinterimport tracebacktb = TracebackPrinter(tb_base=&quot;thinc&quot;, tb_exclude=(&quot;check.py&quot;,))error = tb(&quot;Some error&quot;, &quot;Error description&quot;, highlight=&quot;kwargs&quot;, tb=traceback.extract_stack())raise ValueError(error)``````  Some error  Some error description  Traceback:  ‚îú‚îÄ &lt;lambda&gt; [61] in .env/lib/python3.6/site-packages/pluggy/manager.py  ‚îú‚îÄ‚îÄ‚îÄ _multicall [187] in .env/lib/python3.6/site-packages/pluggy/callers.py  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pytest_fixture_setup [969] in .env/lib/python3.6/site-packages/_pytest/fixtures.py         &gt;&gt;&gt; result = call_fixture_func(fixturefunc, request, kwargs)```| Argument    | Type     | Description                                                                                | Default || ----------- | -------- | ------------------------------------------------------------------------------------------ | ------- || `title`     | str      | The message title.                                                                         |         || `*texts`    | str      | Optional texts to print (one per line).                                                    |         || `highlight` | str      | Optional sequence to highlight in the traceback, e.g. the bad value that caused the error. | `False` || `tb`        | iterable | The traceback, e.g. generated by `traceback.extract_stack()`.                              | `None`  || **RETURNS** | str      | The formatted traceback. Can be printed or raised by custom exception.                     |         |### &lt;kbd&gt;class&lt;/kbd&gt; `MarkdownRenderer`Helper to create Markdown-formatted content. Will store the blocks added to the Markdown document in order.```pythonfrom wasabi import MarkdownRenderermd = MarkdownRenderer()md.add(md.title(1, &quot;Hello world&quot;))md.add(&quot;This is a paragraph&quot;)print(md.text)```### &lt;kbd&gt;method&lt;/kbd&gt; `MarkdownRenderer.__init__`Initialize a Markdown renderer.```pythonfrom wasabi import MarkdownRenderermd = MarkdownRenderer()```| Argument    | Type               | Description                    | Default || ----------- | ------------------ | ------------------------------ | ------- || `no_emoji`  | bool               | Don't include emoji in titles. | `False` || **RETURNS** | `MarkdownRenderer` | The renderer.                  |### &lt;kbd&gt;method&lt;/kbd&gt; `MarkdownRenderer.add`Add a block to the Markdown document.```pythonfrom wasabi import MarkdownRenderermd = MarkdownRenderer()md.add(&quot;This is a paragraph&quot;)```| Argument | Type | Description         | Default || -------- | ---- | ------------------- | ------- || `text`   | str  | The content to add. |         |### &lt;kbd&gt;property&lt;/kbd&gt; `MarkdownRenderer.text`The rendered Markdown document.```pythonmd = MarkdownRenderer()md.add(&quot;This is a paragraph&quot;)print(md.text)```| Argument    | Type | Description                      | Default || ----------- | ---- | -------------------------------- | ------- || **RETURNS** | str  | The document as a single string. |         |### &lt;kbd&gt;method&lt;/kbd&gt; `MarkdownRenderer.table`Create a Markdown-formatted table.```pythonmd = MarkdownRenderer()table = md.table([(&quot;a&quot;, &quot;b&quot;), (&quot;c&quot;, &quot;d&quot;)], [&quot;Column 1&quot;, &quot;Column 2&quot;])md.add(table)```&lt;!-- prettier-ignore --&gt;```markdown| Column 1 | Column 2 || --- | --- || a | b || c | d |```| Argument    | Type                    | Description                                                                          | Default || ----------- | ----------------------- | ------------------------------------------------------------------------------------ | ------- || `data`      | Iterable[Iterable[str]] | The body, one iterable per row, containig an interable of column contents.           |         || `header`    | Iterable[str]           | The column names.                                                                    |         || `aligns`    | Iterable[str]           | Columns alignments in order. `&quot;l&quot;` (left, default), `&quot;r&quot;` (right) or `&quot;c&quot;` (center). | `None`  || **RETURNS** | str                     | The table.                                                                           |         |### &lt;kbd&gt;method&lt;/kbd&gt; `MarkdownRenderer.title`Create a Markdown-formatted heading.```pythonmd = MarkdownRenderer()md.add(md.title(1, &quot;Hello world&quot;))md.add(md.title(2, &quot;Subheading&quot;, &quot;üíñ&quot;))``````markdown# Hello world## üíñ Subheading```| Argument    | Type | Description                            | Default || ----------- | ---- | -------------------------------------- | ------- || `level`     | int  | The heading level, e.g. `3` for `###`. |         || `text`      | str  | The heading text.                      |         || `emoji`     | str  | Optional emoji to show before heading. | `None`  || **RETURNS** | str  | The rendered title.                    |         |### &lt;kbd&gt;method&lt;/kbd&gt; `MarkdownRenderer.list`Create a Markdown-formatted non-nested list.```pythonmd = MarkdownRenderer()md.add(md.list([&quot;item&quot;, &quot;other item&quot;]))md.add(md.list([&quot;first item&quot;, &quot;second item&quot;], numbered=True))``````markdown- item- other item1. first item2. second item```| Argument    | Type          | Description                     | Default || ----------- | ------------- | ------------------------------- | ------- || `items`     | Iterable[str] | The list items.                 |         || `numbered`  | bool          | Whether to use a numbered list. | `False` || **RETURNS** | str           | The rendered list.              |         |### &lt;kbd&gt;method&lt;/kbd&gt; `MarkdownRenderer.link`Create a Markdown-formatted link.```pythonmd = MarkdownRenderer()md.add(md.link(&quot;Google&quot;, &quot;https://google.com&quot;))``````markdown[Google](https://google.com)```| Argument    | Type | Description        | Default || ----------- | ---- | ------------------ | ------- || `text`      | str  | The link text.     |         || `url`       | str  | The link URL.      |         || **RETURNS** | str  | The rendered link. |         |### &lt;kbd&gt;method&lt;/kbd&gt; `MarkdownRenderer.code_block`Create a Markdown-formatted code block.```pythonmd = MarkdownRenderer()md.add(md.code_block(&quot;import spacy&quot;, &quot;python&quot;))```````markdown```pythonimport spacy```````| Argument    | Type | Description              | Default || ----------- | ---- | ------------------------ | ------- || `text`      | str  | The code text.           |         || `lang`      | str  | Optional code language.  | `&quot;&quot;`    || **RETURNS** | str  | The rendered code block. |         |### &lt;kbd&gt;method&lt;/kbd&gt; `MarkdownRenderer.code`, `MarkdownRenderer.bold`, `MarkdownRenderer.italic`Create a Markdown-formatted text.```pythonmd = MarkdownRenderer()md.add(md.code(&quot;import spacy&quot;))md.add(md.bold(&quot;Hello!&quot;))md.add(md.italic(&quot;Emphasis&quot;))``````markdown`import spacy`**Hello!**_Emphasis_```### Utilities#### &lt;kbd&gt;function&lt;/kbd&gt; `color````pythonfrom wasabi import colorformatted = color(&quot;This is a text&quot;, fg=&quot;white&quot;, bg=&quot;green&quot;, bold=True)```| Argument    | Type      | Description                                   | Default || ----------- | --------- | --------------------------------------------- | ------- || `text`      | str       | The text to be formatted.                     | -       || `fg`        | str / int | Foreground color. String name or `0` - `256`. | `None`  || `bg`        | str / int | Background color. String name or `0` - `256`. | `None`  || `bold`      | bool      | Format the text in bold.                      | `False` || `underline` | bool      | Format the text by underlining.               | `False` || **RETURNS** | str       | The formatted string.                         |         |#### &lt;kbd&gt;function&lt;/kbd&gt; `wrap````pythonfrom wasabi import wrapwrapped = wrap(&quot;Hello world, this is a text.&quot;, indent=2)```| Argument    | Type | Description                                | Default || ----------- | ---- | ------------------------------------------ | ------- || `text`      | str  | The text to wrap.                          | -       || `wrap_max`  | int  | Maximum line width, including indentation. | `80`    || `indent`    | int  | Number of spaces used for indentation.     | `4`     || **RETURNS** | str  | The wrapped text with line breaks.         |         |#### &lt;kbd&gt;function&lt;/kbd&gt; `diff_strings````pythonfrom wasabi import diff_stringsdiff = diff_strings(&quot;hello world!&quot;, &quot;helloo world&quot;)```| Argument    | Type      | Description                                                                  | Default            || ----------- | --------- | ---------------------------------------------------------------------------- | ------------------ || `a`         | str       | The first string to diff.                                                    || `b`         | str       | The second string to diff.                                                   || `fg`        | str / int | Foreground color. String name or `0` - `256`.                                | `&quot;black&quot;`          || `bg`        | tuple     | Background colors as `(insert, delete)` tuple of string name or `0` - `256`. | `(&quot;green&quot;, &quot;red&quot;)` || **RETURNS** | str       | The formatted diff.                                                          |                    |### Environment variablesWasabi also respects the following environment variables. The prefix can becustomised on the `Printer` via the `env_prefix` argument. For example, setting`env_prefix=&quot;SPACY&quot;` will expect the environment variable `SPACY_LOG_FRIENDLY`.| Name                   | Description                                            || ---------------------- | ------------------------------------------------------ || `ANSI_COLORS_DISABLED` | Disable colors.                                        || `WASABI_LOG_FRIENDLY`  | Make output nicer for logs (no colors, no animations). || `WASABI_NO_PRETTY`     | Disable pretty printing, e.g. colors and icons.        |## üîî Run testsFork or clone the repo, make sure you have `pytest` installed and then run it onthe package directory. The tests are located in[`/wasabi/tests`](/wasabi/tests).```bashpip install pytestcd wasabipython -m pytest wasabi```</longdescription>
</pkgmetadata>