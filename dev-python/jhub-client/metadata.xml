<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JupyterHub Client![PyPI](https://img.shields.io/pypi/v/jhub-client)Automation of JupyterHub# Install```shellpip install jhub-client```# Command Line UsageBelow are some example use cases of the tool. Note that with an adminapi token you can impersonate users and create temporaryusers. Service api tokens do not have an associated user thereforemust run as existing users or temporary users.Set the api token used for `jhub-client`.```shellexport JUPYTERHUB_API_TOKEN=&lt;api-token&gt;```Optionally basic authentication can be used instead of token based(not recommended but needed in some use cases). In which case`username` and `password` are required.```shellexport JUPYTERHUB_USERNAME=&lt;username&gt;export JUPYTERHUB_PASSWORD=&lt;password&gt;```## Token```shell$ jhubctl token --helpusage: __main__.py token [-h] [--hub HUB] [--name NAME]optional arguments:  -h, --help   show this help message and exit  --hub HUB    url for running jupyterhub cluster  --name NAME  name to give to jupyterhub api token```A simple command line utility can be used to create a token. This onlysupports basic authentication (`username` and `password`) login to thejupyterhub cluster.## Run```shell$ jhubctl run --helpusage: __main__.py run [-h] -n NOTEBOOK [--auth-type {token,basic}] [--hub HUB] [-u USERNAME]                       [--user-options USER_OPTIONS] [--temporary-user] [-d] [--stop-server] [--validate]                       [--kernel-spec KERNEL_SPEC] [--output-filename OUTPUT_FILENAME]optional arguments:  -h, --help            show this help message and exit  -n NOTEBOOK, --notebook NOTEBOOK                        notebook to run  --auth-type {token,basic}                        jupyterhub authentication type to use with default of token based  --hub HUB             url for running jupyterhub cluster with default of 'http://localhost:8000'  -u USERNAME, --username USERNAME                        username to run notebook as  --user-options USER_OPTIONS                        json object representing user server options  --temporary-user      create user temporarily if does not exist  -d, --daemonize       run notebook asyncronously  --stop-server         stop server after completion of notebook  --validate            validate notebook output matches  --kernel-spec KERNEL_SPEC                        kernel spec to launch is not specified will use default  --output-filename OUTPUT_FILENAME                        output filename for results of running notebook```### Run notebook as given token user syncronouslyYou can run a given notebook as a pre-existing user syncronously. Theapi token either has to be for the given user or an admin token.```shelljhubctl --verbose run --notebook &lt;notebook&gt; --hub &lt;hub_url&gt;```### Run notebook as given token user syncronously and validate notebook output matchesYou can run a given notebook as a pre-existing user syncronously. Theapi token either has to be for the given user or an admin token.```shelljhubctl run --notebook &lt;notebook&gt; --hub &lt;hub_url&gt; --validate```### Run notebook as given token user asyncronously and shutdown server after completionYou can run a given notebook as a pre-existing user asyncronously andstop server after completion. The api token either has to be for thegiven user or an admin token.```shelljhubctl run --notebook &lt;notebook&gt; --hub &lt;hub_url&gt; --daemonize --stop-server```### Run notebook as given token user with user optionsWhile this is an advanced use case, it is often times encounteredwith kubernetes jupyerhub clusters where you may want to select agiven profile e.g. small, medium, gpu jupyterlab session. For theseclusters you must supply `--user-options='{&quot;profile&quot;: 0}'` where 0 isreplaced with the index of the profile you would like to choose. It ispossible for other more customized jupyterhub clusters that differentoptions must be used.```shelljhubctl run --notebook &lt;notebook&gt; --hub &lt;hub_url&gt; --user-options='{&quot;profile&quot;: 1}'```### Run notebook as given token user with user optionsYou can run a given notebook with any available kernel spec.```shelljhubctl run --notebook &lt;notebook&gt; --hub &lt;hub_url&gt; --kernel-spec=python3```### Run a given notebook as a temporary userAdditionally you can temporarily create a user `user-&lt;uuid&gt;` or supplythe temporary user's username. The username will be deleted uponcompletion. The api token requires admin permissions.```shelljhubctl run --temporary-user --notebook &lt;notebook&gt; --hub &lt;hub_url&gt; [--username &lt;username&gt;]```# TestingBring up test jupyterhub cluster```shellcd tests/assetsdocker-compose up --build```Run unit tests```shellpytest```# FAQ## Creating an API TokenLogin to the given jupyterhub cluster![qhub login](./images/login.png)Access the hub control page. The url will be `&lt;hub_url&gt;/hub/home`.![qhub home](./images/home.png)Click on `Token` in top left corner and request new api token. Thistoken will have the permissions of the user. Make sure to set theenvironment variable `JUPYTERHUB_API_TOKEN` to the value of the giventoken.![qhub token](./images/token.png)If you want to add a service token instead edit the jupyterhubconfiguration.```pythonc.JupyterHub.services = [ {        'name': '&lt;my-service-name&gt;',        'api_token': '&lt;my-super-secret-long-token&gt;',        'oauth_no_confirm': True,        'admin': True    }]```# Code of ConductTo guarantee a welcoming and friendly community, we require contributors to follow our [Code of Conduct](https://github.com/Quansight/.github/blob/master/CODE_OF_CONDUCT.md).# License[jhub-client](https://github.com/Quansight/jhub-client/blob/main/LICENSE)is BSD-3 Licensed</longdescription>
</pkgmetadata>