<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># supabase-py[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg?label=license)](https://opensource.org/licenses/MIT)[![CI](https://github.com/supabase-community/supabase-py/actions/workflows/ci.yml/badge.svg)](https://github.com/supabase-community/supabase-py/actions/workflows/ci.yml)[![Python](https://img.shields.io/pypi/pyversions/supabase)](https://pypi.org/project/supabase)[![Version](https://img.shields.io/pypi/v/supabase?color=%2334D058)](https://pypi.org/project/supabase)[![Codecov](https://codecov.io/gh/supabase-community/supabase-py/branch/develop/graph/badge.svg)](https://codecov.io/gh/supabase-community/supabase-py)[![Last commit](https://img.shields.io/github/last-commit/supabase-community/supabase-py.svg?style=flat)](https://github.com/supabase-community/supabase-py/commits)[![GitHub commit activity](https://img.shields.io/github/commit-activity/m/supabase-community/supabase-py)](https://github.com/supabase-community/supabase-py/commits)[![Github Stars](https://img.shields.io/github/stars/supabase-community/supabase-py?style=flat&amp;logo=github)](https://github.com/supabase-community/supabase-py/stargazers)[![Github Forks](https://img.shields.io/github/forks/supabase-community/supabase-py?style=flat&amp;logo=github)](https://github.com/supabase-community/supabase-py/network/members)[![Github Watchers](https://img.shields.io/github/watchers/supabase-community/supabase-py?style=flat&amp;logo=github)](https://github.com/supabase-community/supabase-py)[![GitHub contributors](https://img.shields.io/github/contributors/supabase-community/supabase-py)](https://github.com/supabase-community/supabase-py/graphs/contributors)Supabase client for Python. This mirrors the design of [supabase-js](https://github.com/supabase/supabase-js/blob/master/README.md)| Status | Stability | Goal || ------ | ------ | ---- || ‚úÖ | Alpha | We are testing Supabase with a closed set of customers || ‚úÖ | Public Alpha | Anyone can sign up over at [app.supabase.io](https://app.supabase.com). But go easy on us, there are a few kinks. || üöß | Public Beta | Stable enough for most non-enterprise use-cases || ‚ùå | Public | Production-ready |We are currently in Public Alpha. Watch &quot;releases&quot; of this repo to get notified of major updates.## Installation**Recomended:** First activate your virtual environment, with your favourite system. For example, we like `poetry` and `conda`!### PyPi installationNow install the package. (for &gt; Python 3.7)```bash# with pippip install supabase# with condaconda install -c conda-forge supabase```### Local installationYou can also install locally after cloning this repo. Install Development mode with ``pip install -e``, which makes it so when you edit the source code the changes will be reflected in your python module.## UsageIt's usually best practice to set your api key environment variables in some way that version control doesn't track them, e.g don't put them in your python modules! Set the key and url for the supabase instance in the shell, or better yet, use a dotenv file. Heres how to set the variables in the shell.```bashexport SUPABASE_URL=&quot;my-url-to-my-awesome-supabase-instance&quot;export SUPABASE_KEY=&quot;my-supa-dupa-secret-supabase-api-key&quot;```We can then read the keys in the python source code.```pythonimport osfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_KEY&quot;)supabase: Client = create_client(url, key)```Use the supabase client to interface with your database.### Running TestsCurrently the test suites are in a state of flux. We are expanding our clients tests to ensure things are working, and for now can connect to this test instance, that is populated with the following table:&lt;p align=&quot;center&quot;&gt;  &lt;img width=&quot;720&quot; height=&quot;481&quot; src=&quot;https://i.ibb.co/Bq7Kdty/db.png&quot;&gt;&lt;/p&gt;The above test database is a blank supabase instance that has populated the `countries` table with the built in countries script that can be found in the supabase UI. You can launch the test scripts and point to the above test database by running```bash./test.sh```### See issues for what to work onRough roadmap:- [x] Wrap [Postgrest-py](https://github.com/supabase-community/postgrest-py/)  - [ ] Add remaining filters  - [ ] Add support for EXPLAIN  - [ ] Add proper error handling- [ ] Wrap [Realtime-py](https://github.com/supabase-community/realtime-py)    - [ ]  Integrate with Supabase-py    - [ ]  Support WALRUS    - [ ]  Support broadcast (to check if already supported)- [x] Wrap [Gotrue-py](https://github.com/supabase-community/gotrue-py)    - [ ] Remove references to GoTrue-js v1 and do a proper release    - [ ] Test and document common flows (e.g. sign in with OAuth, sign in with OTP)    - [ ] Add MFA methods and SSO methods- [x] Wrap [storage-py](https://github.com/supabase-community/storage-py)    - [ ]  Support resumable uploads    - [ ]  Setup testing environment    - [ ]  Document how to properly upload different file types (e.g. jpeg/png and download it)- [x] Wrap [functions-py](https://github.com/supabase-community/functions-py)Overall Tasks:- [ ] Add async support across the entire library- [ ] Add FastAPI helper library (external to supabase-py)- [ ] Add `django-supabase-postgrest` (external to supabase-py)### Client Library## Authenticate```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)# Create a random user login email and password.random_email: str = &quot;3hf82fijf92@supamail.com&quot;random_password: str = &quot;fqj13bnf2hiu23h&quot;user = supabase.auth.sign_up({ &quot;email&quot;: random_email, &quot;password&quot;: random_password })```## Sign-in```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)# Sign in using the user email and password.random_email: str = &quot;3hf82fijf92@supamail.com&quot;random_password: str = &quot;fqj13bnf2hiu23h&quot;user = supabase.auth.sign_in_with_password({ &quot;email&quot;: random_email, &quot;password&quot;: random_password })```## Managing Data### Insertion of Data```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)data = supabase.table(&quot;countries&quot;).insert({&quot;name&quot;:&quot;Germany&quot;}).execute()assert len(data.data) &gt; 0```### Selection of Data```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)data = supabase.table(&quot;countries&quot;).select(&quot;*&quot;).eq(&quot;country&quot;, &quot;IL&quot;).execute()# Assert we pulled real data.assert len(data.data) &gt; 0```### Update of Data```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)data = supabase.table(&quot;countries&quot;).update({&quot;country&quot;: &quot;Indonesia&quot;, &quot;capital_city&quot;: &quot;Jakarta&quot;}).eq(&quot;id&quot;, 1).execute()```### Update data of duplicate keys```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)country = {  &quot;country&quot;: &quot;United Kingdom&quot;,  &quot;capital_city&quot;: &quot;London&quot; # this was missing when it was added}data = supabase.table(&quot;countries&quot;).upsert(country).execute()assert len(data.data) &gt; 0```### Deletion of Data```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)data = supabase.table(&quot;countries&quot;).delete().eq(&quot;id&quot;, 1).execute()```### Supabase Functions```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)func = supabase.functions()@asyncio.coroutineasync def test_func(loop):    resp = await func.invoke(&quot;hello-world&quot;,invoke_options={'body':{}})    return resploop = asyncio.get_event_loop()resp = loop.run_until_complete(test_func(loop))loop.close()```## Storage### Download a file```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)bucket_name: str = &quot;photos&quot;data = supabase.storage.from_(bucket_name).download(&quot;photo1.png)```### Upload a file```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)bucket_name: str = &quot;photos&quot;new_file = getUserFile()data = supabase.storage.from_(bucket_name).upload(&quot;/user1/profile.png&quot;, new_file)```### Delete a file```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)bucket_name: str = &quot;photos&quot;data = supabase.storage.from_(bucket_name).delete([&quot;old_photo.png&quot;, &quot;image5.jpg&quot;])```### List all files```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)bucket_name: str = &quot;charts&quot;data = supabase.storage.from_(bucket_name).list()```### Move and rename file```pythonfrom supabase import create_client, Clienturl: str = os.environ.get(&quot;SUPABASE_TEST_URL&quot;)key: str = os.environ.get(&quot;SUPABASE_TEST_KEY&quot;)supabase: Client = create_client(url, key)bucket_name: str = &quot;charts&quot;old_file_path: str = &quot;generic/graph1.png&quot;new_file_path: str = &quot;important/revenue.png&quot;data = supabase.storage.from_(bucket_name).move(old_file_path, new_file_path)```## Realtime ChangesRealtime changes are unfortunately still a WIP. Feel free to file PRs to [realtime-py](https://github.com/supabase-community/realtime-py)See [Supabase Docs](https://supabase.com/docs/guides/client-libraries) for full list of examples## NOTE: RLS does not work out of the box right nowAfter you sign a user in, the user's access token is _not_ being used by the library for any of the API calls, and therefore RLS does not work right now. See [related issue and discussion](https://github.com/supabase-community/supabase-py/issues/185)## Python and Supabase Resources- [Python data loading with Supabase](https://supabase.com/blog/loading-data-supabase-python)- [Visualizing Supabase Data using Metabase](https://supabase.com/blog/visualizing-supabase-data-using-metabase)</longdescription>
</pkgmetadata>