<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>About=====A library for fitting continuous piecewise linear functions to data.Just specify the number of line segments you desire and provide thedata.|Downloads a month| |pwlf ci| |codecov| |PyPI version| |Conda|Check out the`documentation &lt;https://jekel.me/piecewise_linear_fit_py&gt;`__!Read the `blogpost &lt;http://jekel.me/2017/Fit-a-piecewise-linear-function-to-data/&gt;`__... figure:: https://raw.githubusercontent.com/cjekel/piecewise_linear_fit_py/master/examples/examplePiecewiseFit.png   :alt: Example of a continuous piecewise linear fit to data.   Example of a continuous piecewise linear fit to data... figure:: https://raw.githubusercontent.com/cjekel/piecewise_linear_fit_py/master/examples/sinWaveFit.png   :alt: Example of a continuous piecewise linear fit to a sine wave.   Example of a continuous piecewise linear fit to a sine wave.Now you can perform segmented constant fitting and piecewisepolynomials! |Example of multiple degree fits to a sine wave.|Features========For a specified number of line segments, you can determine (and predictfrom) the optimal continuous piecewise linear function f(x). See `thisexample &lt;https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/fitForSpecifiedNumberOfLineSegments.py&gt;`__.You can fit and predict a continuous piecewise linear function f(x) ifyou know the specific x locations where the line segments terminate. See`thisexample &lt;https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/fitWithKnownLineSegmentLocations.py&gt;`__.If you want to pass different keywords for the SciPy differentialevolution algorithm see `thisexample &lt;https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/fitForSpecifiedNumberOfLineSegments_passDiffEvoKeywords.py&gt;`__.You can use a different optimization algorithm to find the optimallocation for line segments by using the objective function thatminimizes the sum of square of residuals. See `thisexample &lt;https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/useCustomOptimizationRoutine.py&gt;`__.Instead of using differential evolution, you can now use a multi-startgradient optimization with fitfast() function. You can specify thenumber of starting points to use. The default is 2. This means that alatin hyper cube sampling (space filling DOE) of 2 is used to run 2L-BFGS-B optimizations. See `thisexample &lt;https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/sineWave_time_compare.py&gt;`__which runs fit() function, then runs the fitfast() to compare theruntime differences!Installation============Python Package Index (PyPI)---------------------------You can now install with pip.::   python -m pip install pwlfConda-----If you have conda, you can also install from conda-forge.::   conda install -c conda-forge pwlfFrom source-----------Or clone the repo::   git clone https://github.com/cjekel/piecewise_linear_fit_py.gitthen install with pip::   python -m pip install ./piecewise_linear_fit_pyHow it works============This`paper &lt;https://github.com/cjekel/piecewise_linear_fit_py/raw/master/paper/pwlf_Jekel_Venter_v2.pdf&gt;`__explains how this library works in detail.This is based on a formulation of a piecewise linear least squares fit,where the user must specify the location of break points. See `thispost &lt;http://jekel.me/2018/Continous-piecewise-linear-regression/&gt;`__which goes through the derivation of a least squares regression problemif the break point locations are known. Alternatively check out`Golovchenko(2004) &lt;http://golovchenko.org/docs/ContinuousPiecewiseLinearFit.pdf&gt;`__.Global optimization is used to find the best location for the userdefined number of line segments. I specifically use the `differentialevolution &lt;https://docs.scipy.org/doc/scipy-0.17.0/reference/generated/scipy.optimize.differential_evolution.html&gt;`__algorithm in SciPy. I default the differential evolution algorithm to beaggressive, and it is probably overkill for your problem. So feel freeto pass your own differential evolution keywords to the library. See`thisexample &lt;https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/fitForSpecifiedNumberOfLineSegments_passDiffEvoKeywords.py&gt;`__.Changelog=========All changes now stored in`CHANGELOG.md &lt;https://github.com/cjekel/piecewise_linear_fit_py/blob/master/CHANGELOG.md&gt;`__New ``weights=`` keyword allows you to perform weighted pwlf fits!Removed TensorFlow code which can now be found`here &lt;https://github.com/cjekel/piecewise_linear_fit_py_tf&gt;`__.Requirements============Python 2.7+NumPy &gt;= 1.14.0SciPy &gt;= 1.2.0pyDOE &gt;= 0.3.8License=======MIT LicenseCitation========.. code:: bibtex   @Manual{pwlf,   author = {Jekel, Charles F. and Venter, Gerhard},   title = {{pwlf:} A Python Library for Fitting 1D Continuous Piecewise Linear Functions},   year = {2019},   url = {https://github.com/cjekel/piecewise_linear_fit_py}   }.. |Downloads a month| image:: https://img.shields.io/pypi/dm/pwlf.svg.. |pwlf ci| image:: https://github.com/cjekel/piecewise_linear_fit_py/workflows/pwlf%20ci/badge.svg.. |codecov| image:: https://codecov.io/gh/cjekel/piecewise_linear_fit_py/branch/master/graph/badge.svg?token=AgeDFEQXed   :target: https://codecov.io/gh/cjekel/piecewise_linear_fit_py.. |PyPI version| image:: https://img.shields.io/pypi/v/pwlf.. |Conda| image:: https://img.shields.io/conda/vn/conda-forge/pwlf   :target: https://anaconda.org/conda-forge/pwlf.. |Example of multiple degree fits to a sine wave.| image:: https://raw.githubusercontent.com/cjekel/piecewise_linear_fit_py/master/examples/figs/multi_degree.png</longdescription>
</pkgmetadata>