<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jupyter_ai_dalleThis extension is composed of a Python package named `jupyter_ai_dalle`that exposes the model engines to the Jupyter AI server extension,and an NPM package named `jupyter_ai_dalle`that provides a frontend labextension registering inserters.## Requirements- JupyterLab &gt;= 3.0## InstallTo install the extension, execute:```bashpip install jupyter_ai_dalle```## UninstallTo remove the extension, execute:```bashpip uninstall jupyter_ai_dalle```## Contributing### Development installNote: You will need NodeJS to build the extension package.The `jlpm` command is JupyterLab's pinned version of[yarn](https://yarnpkg.com/) that is installed with JupyterLab. You may use`yarn` or `npm` in lieu of `jlpm` below.```bash# Clone the repo to your local environment# Change directory to the jupyter_ai_dalle directory# Install package in development modepip install -e &quot;.[test]&quot;# Link your development version of the extension with JupyterLabjupyter labextension develop . --overwrite# Rebuild extension Typescript source after making changesjlpm build```You can watch the source directory and run JupyterLab at the same time indifferent terminals to watch for changes in the extension's source andautomatically rebuild the extension.```bash# Watch the source directory in one terminal, automatically rebuilding when neededjlpm watch# Run JupyterLab in another terminaljupyter lab```With the watch command running, every saved change will immediately be builtlocally and available in your running JupyterLab. Refresh JupyterLab to load thechange in your browser (you may need to wait several seconds for the extensionto be rebuilt).By default, the `jlpm build` command generates the source maps for thisextension to make it easier to debug using the browser dev tools. To alsogenerate source maps for the JupyterLab core extensions, you can run thefollowing command:```bashjupyter lab build --minimize=False```### Development uninstall```bashpip uninstall jupyter_ai_dalle```In development mode, you will also need to remove the symlink created by `jupyter labextension develop`command. To find its location, you can run `jupyter labextension list` to figure out where the `labextensions`folder is located. Then you can remove the symlink named `jupyter_ai_dalle` within that folder.### Testing the extension#### Backend testsThis AI module is using [Pytest](https://docs.pytest.org/) for Python code testing.Install test dependencies (needed only once):```shpip install -e &quot;.[test]&quot;# Each time you install the Python package, you need to restore the front-end extension linkjupyter labextension develop . --overwrite```To execute them, run:```shpytest -vv -r ap --cov jupyter_ai_dalle```#### Frontend testsThis extension is using [Jest](https://jestjs.io/) for JavaScript code testing.To execute them, execute:```shjlpmjlpm test```#### Integration testsThis extension uses [Playwright](https://playwright.dev/docs/intro/) for the integration tests (aka user level tests).More precisely, the JupyterLab helper [Galata](https://github.com/jupyterlab/jupyterlab/tree/master/galata) is used to handle testing the extension in JupyterLab.More information are provided within the [ui-tests](./ui-tests/README.md) README.### Packaging the extensionSee [RELEASE](RELEASE.md)</longdescription>
</pkgmetadata>