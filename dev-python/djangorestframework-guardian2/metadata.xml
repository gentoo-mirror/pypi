<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-rest-framework-guardian2[![GitHub Actions][github-actions-badge]](https://github.com/johnthagen/django-rest-framework-guardian2/actions)[![License](https://img.shields.io/pypi/l/djangorestframework-guardian2.svg)](https://pypi.org/project/djangorestframework-guardian2)[![Version](https://img.shields.io/pypi/v/djangorestframework-guardian2.svg)](https://pypi.org/project/djangorestframework-guardian2)[![Python](https://img.shields.io/pypi/pyversions/djangorestframework-guardian2.svg)](https://pypi.org/project/djangorestframework-guardian2/)[github-actions-badge]: https://github.com/johnthagen/django-rest-framework-guardian2/workflows/python/badge.svgdjango-rest-framework-guardian2 provides django-guardian integrations for Django REST Framework.## Installation &amp; SetupTo use django-rest-framework-guardian2, install it into your environment.```sh$ pip install djangorestframework-guardian2```Ensure both Django REST Framework and django-guardian are configured and added to your `INSTALLED_APPS` setting.```pythonINSTALLED_APPS = [    'rest_framework',    'guardian',]AUTHENTICATION_BACKENDS = [    'django.contrib.auth.backends.ModelBackend',    'guardian.backends.ObjectPermissionBackend',]```## ObjectPermissionsFilterThe filter will ensure that querysets only returns objects for which the user has the appropriate view permission.If you're using `ObjectPermissionsFilter`, you'll probably also want to add an appropriate object permissionsclass, to ensure that users can only operate on instances if they have the appropriate object permissions.  The easiestway to do this is to subclass `DjangoObjectPermissions` and add `'view'` permissions to the `perms_map` attribute.An example using both `ObjectPermissionsFilter` and `DjangoObjectPermissions` might look like the following:**permissions.py**:```pythonfrom rest_framework import permissionsclass CustomObjectPermissions(permissions.DjangoObjectPermissions):    &quot;&quot;&quot;    Similar to `DjangoObjectPermissions`, but adding 'view' permissions.    &quot;&quot;&quot;    perms_map = {        'GET': ['%(app_label)s.view_%(model_name)s'],        'OPTIONS': ['%(app_label)s.view_%(model_name)s'],        'HEAD': ['%(app_label)s.view_%(model_name)s'],        'POST': ['%(app_label)s.add_%(model_name)s'],        'PUT': ['%(app_label)s.change_%(model_name)s'],        'PATCH': ['%(app_label)s.change_%(model_name)s'],        'DELETE': ['%(app_label)s.delete_%(model_name)s'],    }```**views.py**:```pythonfrom rest_framework import viewsetsfrom rest_framework_guardian import filtersfrom myapp.models import Eventfrom myapp.permissions import CustomObjectPermissionsfrom myapp.serializers import EventSerializerclass EventViewSet(viewsets.ModelViewSet):    &quot;&quot;&quot;    Viewset that only lists events if user has 'view' permissions, and only    allows operations on individual events if user has appropriate 'view', 'add',    'change' or 'delete' permissions.    &quot;&quot;&quot;    queryset = Event.objects.all()    serializer_class = EventSerializer    permission_classes = [CustomObjectPermissions]    filter_backends = [filters.ObjectPermissionsFilter]```## ObjectPermissionsAssignmentMixinA serializer mixin that allows permissions to be easily assigned to users and/or groups.So each time an object is created or updated, the `permissions_map` returned by `Serializer.get_permissions_map` will be used to assign permission(s) to that object.Please note that the existing permissions will remain intact.A usage example might look like the following:```pythonfrom rest_framework_guardian.serializers import ObjectPermissionsAssignmentMixinfrom blog.models import Postclass PostSerializer(ObjectPermissionsAssignmentMixin, serializers.ModelSerializer):    class Meta:        model = Post        fields = '__all__'    def get_permissions_map(self, created):        current_user = self.context['request'].user        readers = Group.objects.get(name='readers')        supervisors = Group.objects.get(name='supervisors')        return {            'view_post': [current_user, readers],            'change_post': [current_user],            'delete_post': [current_user, supervisors]        }```## Release Process- Update changelog- Update package version in setup.cfg- Create git tag for version- Build &amp; upload release to PyPI  ```bash  $ rm -rf dist/ build/  $ pip install -U build twine  $ python -m build  $ twine upload -r test dist/*  $ twine upload dist/*  ```## LicenseSee: [LICENSE](https://github.com/johnthagen/django-rest-framework-guardian2/blob/master/LICENSE)BSD 3-Clause LicenseCopyright (c) 2018, Ryan P KilbyAll rights reserved.Redistribution and use in source and binary forms, with or withoutmodification, are permitted provided that the following conditions are met:* Redistributions of source code must retain the above copyright notice, this  list of conditions and the following disclaimer.* Redistributions in binary form must reproduce the above copyright notice,  this list of conditions and the following disclaimer in the documentation  and/or other materials provided with the distribution.* Neither the name of the copyright holder nor the names of its  contributors may be used to endorse or promote products derived from  this software without specific prior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THEIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AREDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLEFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIALDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS ORSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVERCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USEOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</longdescription>
</pkgmetadata>