<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Advent of Code data===================|pyversions|_ |pypi|_ |womm|_ |actions|_ |codecov|_.. |pyversions| image:: https://img.shields.io/pypi/pyversions/advent-of-code-data.svg.. _pyversions: .. |pypi| image:: https://img.shields.io/pypi/v/advent-of-code-data.svg.. _pypi: https://pypi.org/project/advent-of-code-data/.. |womm| image:: https://cdn.rawgit.com/nikku/works-on-my-machine/v0.2.0/badge.svg.. _womm: https://github.com/nikku/works-on-my-machine.. |actions| image:: https://github.com/wimglenn/advent-of-code-data/actions/workflows/tests.yml/badge.svg.. _actions: https://github.com/wimglenn/advent-of-code-data/actions/workflows/tests.yml.. |codecov| image:: https://codecov.io/gh/wimglenn/advent-of-code-data/branch/main/graph/badge.svg.. _codecov: https://codecov.io/gh/wimglenn/advent-of-code-dataGet your puzzle data with a single import statement:.. code-block:: python   from aocd import dataMight be useful for lazy Pythonistas and speedhackers.If you'd just like to print or keep your own input files, there's a shell entry point for that:.. code-block:: bash   aocd &gt; input.txt  # saves today's data   aocd 13 2018 &gt; day13.txt  # save some other day's dataThere are currently two convenience transforms (maybe more to come later):.. code-block:: python   from aocd import lines  # like data.splitlines()   from aocd import numbers  # uses regex pattern -?\d+ to extract integers from dataIf all that sounds too magical, there is a simple getter function to just return your raw data... code-block:: python   &gt;&gt;&gt; from aocd import get_data   &gt;&gt;&gt; get_data(day=24, year=2015)   '1\n2\n3\n7\n11\n13\n17\n19\n23\n31...Note that ``aocd`` will cache puzzle inputs and answers (including incorrect guesses) clientside, to save unnecessary requests to the server.Quickstart----------Install with pip.. code-block:: bash   pip install advent-of-code-dataIf you want to use this within a Jupyter notebook, there are some extra deps:.. code-block:: bash   pip install 'advent-of-code-data[nb]'**Puzzle inputs differ by user.**   So export your session ID, for example:.. code-block:: bash   export AOC_SESSION=cafef00db01dfaceba5eba11deadbeefThis is a cookie which is set when you login to AoC.  You can find it withyour browser inspector.  If you're hacking on AoC at all you probably alreadyknow these kind of tricks, but if you need help with that part then you can`look here &lt;https://github.com/wimglenn/advent-of-code/issues/1&gt;`_.*Note:* If you don't like the env var, you could also keep your token(s) in files.By default the location is ``~/.config/aocd/token``. Set the ``AOCD_DIR`` environmentvariable to some existing directory if you wish to use another location to store token(s).*New in version 0.9.0.* There's a utility script ``aocd-token`` which attempts tofind session tokens from your browser's cookie storage. This feature is experimentaland requires you to additionally install the package ``browser-cookie3``. Only Chromeand Firefox browsers are currently supported. On macOS, you may get an authenticationdialog requesting permission, since Python is attempting to read browser storage files.This is expected, the script *is* actually scraping those private files to access AoCsession token(s).If this utility script was able to locate your token, you can save it to file with:.. code-block:: bash   $ aocd-token &gt; ~/.config/aocd/tokenAutomated submission--------------------*New in version 0.4.0.* Basic use:.. code-block:: python   from aocd import submit   submit(my_answer, part=&quot;a&quot;, day=25, year=2017)Note that the same filename introspection of year/day also works for automatedsubmission. There's also introspection of the &quot;level&quot;, i.e. part a or part b,aocd can automatically determine if you have already completed part a or notand submit your answer for the correct part accordingly. In this case, just use:.. code-block:: python   from aocd import submit   submit(my_answer)The response message from AoC will be printed in the terminal. If you gavethe right answer, then the puzzle will be refreshed in your web browser(so you can read the instructions for the next part, for example).**Proceed with caution!** If you submit wrong guesses, your user **WILL**get rate-limited by Eric, so don't call submit until you're fairly confidentyou have a correct answer!OOP-style interfaces--------------------*New in version 0.8.0.*Input data is via regular attribute access. Example usage:.. code-block:: python    &gt;&gt;&gt; from aocd.models import Puzzle    &gt;&gt;&gt; puzzle = Puzzle(year=2017, day=20)    &gt;&gt;&gt; puzzle    &lt;Puzzle(2017, 20) at 0x107322978 - Particle Swarm&gt;    &gt;&gt;&gt; puzzle.input_data    'p=&lt;-1027,-979,-188&gt;, v=&lt;7,60,66&gt;, a=&lt;9,1,-7&gt;\np=&lt;-1846,-1539,-1147&gt;, v=&lt;88,145,67&gt;, a=&lt;6,-5,2&gt; ...Submitting answers is also by regular attribute access. Any incorrect answers you submitted are remembered, and aocd will prevent you from attempting to submit the same incorrect value twice:.. code-block:: python    &gt;&gt;&gt; puzzle.answer_a = 299    That's not the right answer; your answer is too high. If you're stuck, there are some general tips on the about page, or you can ask for hints on the subreddit. Please wait one minute before trying again. (You guessed 299.) [Return to Day 20]    &gt;&gt;&gt; puzzle.answer_a = 299    aocd will not submit that answer again. You've previously guessed 299 and the server responded:    That's not the right answer; your answer is too high. If you're stuck, there are some general tips on the about page, or you can ask for hints on the subreddit. Please wait one minute before trying again. (You guessed 299.) [Return to Day 20]Your own solutions can be executed by writing and using an `entry-point &lt;https://packaging.python.org/specifications/entry-points/&gt;`_ into your code, registered in the group ``&quot;adventofcode.user&quot;``. Your entry-point should resolve to a callable, and it will be called with three keyword arguments: ``year``, ``day``, and ``data``. For example, `my entry-point is called &quot;wim&quot; &lt;https://github.com/wimglenn/advent-of-code-wim/blob/d033366c16fba50e413f2fa7df32e8a0eac9542f/setup.py#L36&gt;`_ and running against `my code &lt;https://github.com/wimglenn/advent-of-code-wim/blob/main/aoc_wim/__init__.py&gt;`_ (after ``pip install advent-of-code-wim``) would be like this:.. code-block:: python    &gt;&gt;&gt; puzzle = Puzzle(year=2018, day=10)    &gt;&gt;&gt; puzzle.solve_for(&quot;wim&quot;)    ('XLZAKBGZ', '10656')If you've never written a plugin before, see https://entrypoints.readthedocs.io/ for more info about plugin systems based on Python entry-points.Verify your code against multiple different inputs--------------------------------------------------*New in version 0.8.0.*Ever tried running your code against other people's inputs? AoC is full of tricky edge cases. You may find that sometimes you're only getting the right answer by luck, and your code will fail on some other dataset. Using aocd, you can collect a few different auth tokens for each of your accounts (github/google/reddit/twitter) and verify your answers across multiple datasets.To see an example of how to setup the entry-point for your code, look at `advent-of-code-sample &lt;https://github.com/wimglenn/advent-of-code-sample&gt;`_ for some inspiration. After dumping a bunch of session tokens into ``~/.config/aocd/tokens.json`` you could do something like this by running the ``aoc`` console script:.. image:: https://user-images.githubusercontent.com/6615374/52138567-26e09f80-2613-11e9-8eaf-c42757bc9b86.pngAs you can see above, I actually had incorrect code for `2017 Day 20: Particle Swarm &lt;https://adventofcode.com/2017/day/20&gt;`_, but that `bug &lt;https://github.com/wimglenn/advent-of-code-wim/commit/31e454270001c6d06b46014fe5dafd03e29507b8&gt;`_ only showed up for the google token's dataset. Whoops. Also, it looks like my algorithm for `2017 Day 13: Packet Scanners &lt;https://adventofcode.com/2017/day/13&gt;`_ was kinda garbage. Too slow. According to `AoC FAQ &lt;https://adventofcode.com/about&gt;`_:  *every problem has a solution that completes in at most 15 seconds on ten-year-old hardware*By the way, the ``aoc`` runner will kill your code if it takes more than 60 seconds, you can increase/decrease this by passing a command-line option, e.g. ``--timeout=120``.*New in version 1.1.0:*  Added option ``--quiet`` to suppress any output from plugins so it doesn't mess up the ``aoc`` runner's display.How does this library work?---------------------------It will automatically get today's data at import time, if used within the interactive interpreter.  Otherwise, the date is found by introspection of thepath and file name from which ``aocd`` module was imported.  This means your filenames should be something sensible. The examples belowshould all parse correctly, because they have digits in the path that areunambiguously recognisable as AoC years (2015+) or days (1-25)... code-block::   q03.py    xmas_problem_2016_25b_dawg.py   ~/src/aoc/2015/p8.pyA filename like ``problem_one.py`` will not work, so don't do that.  Ifyou don't like weird frame hacks, just use the ``aocd.get_data()`` function instead and have a nice day!Cache invalidation?-------------------``aocd`` saves puzzle inputs, answers, names, and your bad guesses to avoid hittingthe AoC servers any more often than strictly necessary (this also speeds things up).All data is persisted in plain text files under ``~/.config/aocd``. To remove anycaches, you may simply delete whatever files you want under that directory tree.If you'd prefer to use a different path, then export an ``AOCD_DIR`` environmentvariable with the desired location.*New in version 1.1.0:* By default, your token files are also stored under ``~/.config/aocd``.If you want the token(s) and cached inputs/answers to exist in separate locations, you can setthe environment variable ``AOCD_CONFIG_DIR`` to specify a different location for the token(s).</longdescription>
</pkgmetadata>