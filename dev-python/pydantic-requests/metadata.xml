<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/dz0ny/pydantic-requests.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/dz0ny/pydantic-requests/context:python)[![PyPI](https://img.shields.io/pypi/dm/pydantic-requests.svg)](https://pypi.org/project/pydantic-requests/)# Marriage of Pydantic and RequestsA helper that integrates Pydantic with requests library for seamless access to defined Models.## Example```pythonfrom enum import Enumfrom pydantic import BaseModelfrom pydantic_requests import PydanticSessionclass DNSStatus(Enum):    &quot;&quot;&quot;DNS OP response codes.    ref: https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6    &quot;&quot;&quot;    # No Error = 0    NoError = 0    # Format Error = 1    FormErr = 1    # Server Failure    ServFail = 2    # Non-Existent Domain    NXDomain = 3class DNSQuery(BaseModel):    Status: DNSStatus    class Config:        &quot;&quot;&quot;Configure DNS query.&quot;&quot;&quot;        allow_mutation = False        arbitrary_types_allowed = Truewith PydanticSession(    {200: DNSQuery}, headers={&quot;accept&quot;: &quot;application/dns-json&quot;}) as session:    domain = &quot;dz0ny.xyz&quot;    res = session.get(        &quot;https://cloudflare-dns.com/dns-query&quot;, params={&quot;name&quot;: domain, &quot;type&quot;: &quot;NS&quot;}    )    res.raise_for_status()    query: DNSQuery = res.model    if query.Status == DNSStatus.NXDomain:        print(&quot;Domain is not registered.&quot;)    else:        print(&quot;Domain is registered.&quot;)```</longdescription>
</pkgmetadata>