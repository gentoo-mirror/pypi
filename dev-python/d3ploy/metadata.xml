<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># d3ployEasily deploy to S3 with multiple environment support. Version 4 supports Python 3.7+.## Installation &amp; UsageTo install, run `pip install d3ploy`.To use, run `d3ploy`. Additional arguments may be specified. Run `d3ploy --help` for more information.## AuthenticationYour AWS credentials can be set in a number of ways:1. In a &quot;.boto&quot; file in your home folder. See [Boto's documentation](http://docs.pythonboto.org/en/latest/boto_config_tut.html) for how to create this file.2. In a &quot;.aws&quot; file in the folder you're running `d3ploy` in. Follows the same format as &quot;.boto&quot;.3. In the environment variables &quot;AWS_ACCESS_KEY_ID&quot; and &quot;AWS_SECRET_ACCESS_KEY&quot;.## Configuration optionsWhen you run `d3ploy`, it will look in the current directory for a &quot;.d3ploy.json&quot; file that defines the different deploy enviroments and their options. At a minimum, a &quot;default&quot; environment is required and is the environment used if you pass no arguments to `d3ploy`. Additionally, you may pass in a different path for you config file with the `-c` or `--config` options.To supress all output, pass `-q` or `--quiet` to the command. Note that there is not a way to set the quiet option in the config file(s).To set the number of separate processes to use, pass `-p 10` or `--processess 10` where '10' is the number to use. If you do not want to use multiple processes, set this to '0'.You can add as many environments as needed. Deploy to an environment by passing in its key like `d3ploy staging`. As of version 3.0, environments no longer inherit settings from the default environment. Instead, a separate `defaults` object in the config file can be used to set options across all environments.The only required option for any environment is &quot;bucket_name&quot; for the S3 bucket to upload to. Additionally, you may define:- &quot;local_path&quot; to upload only the contents of a directory under the current one; defaults to &quot;.&quot; (current directory)- &quot;bucket_path&quot; to upload to a subfolder in the bucket; defaults to &quot;/&quot; (root)- &quot;exclude&quot; to specify patterns to not upload- &quot;acl&quot; to specify the canned ACL set on each object. See [the AWS docs for more](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl).- &quot;delete&quot; to remove files on S3 that are not present in the local directory- &quot;charset&quot; to set the charset flag on 'Content-Type' headers of text files- &quot;caches&quot; to set the Cache-Control header for various mimetypes. See below for more.- &quot;gitignore&quot; to add all entries in a .gitignore file to the exclude patterns- &quot;cloudfront_id&quot; to invalidate all paths in the given CloudFront distribution IDs. Can be a string for one distribution or an array for multiple.### Example .d3ploy.json```json{  &quot;environments&quot;: {    &quot;default&quot;: {      &quot;bucket_name&quot;: &quot;d3ploy-tests&quot;,      &quot;local_path&quot;: &quot;./tests/files&quot;,      &quot;bucket_path&quot;: &quot;/default/&quot;    },    &quot;staging&quot;: {      &quot;bucket_name&quot;: &quot;d3ploy-tests&quot;,      &quot;local_path&quot;: &quot;./tests/files&quot;,      &quot;bucket_path&quot;: &quot;/staging/&quot;    }  },  &quot;defaults&quot;: {    &quot;caches&quot;: {      &quot;text/javascript&quot;: 2592000,      &quot;image/gif&quot;: 22896000,      &quot;image/jpeg&quot;: 22896000,      &quot;image/png&quot;: 22896000,      &quot;image/webp&quot;: 22896000,      &quot;text/*&quot;: 2592000,      &quot;text/html&quot;: 0,      &quot;text/plain&quot;: 0    }  }}```## Cache-Control HeadersIf you want to set Cache-Control headers on various files, add a `caches` object to your config file like:```json&quot;caches&quot;: {  &quot;text/javascript&quot;: 2592000,  &quot;image/gif&quot;: 22896000,  &quot;image/jpeg&quot;: 22896000,  &quot;image/png&quot;: 22896000,  &quot;image/webp&quot;: 22896000,  &quot;text/*&quot;: 2592000,  &quot;text/html&quot;: 0,  &quot;text/plain&quot;: 0}```Each key is the mimetype of the kind of file you want to have cached, with a value that is the seconds the `max-age` flag set to. In the above example, CSS and JavaScript files will be cached for 30 days, images will be cached for 1 year, and html files will not be cached. For more about Cache-Control, read [Leverage Browser Caching](https://developers.google.com/speed/docs/insights/LeverageBrowserCaching). You may use wildcards like `image/*` to apply to all images. If there's a more specific match for a particular image type, that will override the wildcard. For example:```json&quot;caches&quot;: {  &quot;image/png&quot;: 300,  &quot;image/*&quot;: 31536000}```In this case JPGs, GIFs and all other images except for PNGs will be cached for 1 year. PNGs, however, will be cached for 5 minutes.## Progress Bard3ploy uses the `tqdm` module to display output when `--quiet` is not set.</longdescription>
</pkgmetadata>