<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyArtifactory[![GitHub Actions workflow](https://github.com/anancarv/python-artifactory/workflows/Check%20code/badge.svg)](https://github.com/anancarv/python-artifactory/actions)[![PyPI version](https://badge.fury.io/py/pyartifactory.svg)](https://badge.fury.io/py/pyartifactory)[![Codacy Badge](https://app.codacy.com/project/badge/Grade/c02851e5b9f24fe299783b48eab18f54)](https://www.codacy.com/gh/anancarv/python-artifactory/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=anancarv/python-artifactory&amp;amp;utm_campaign=Badge_Grade)[![Codacy Badge](https://app.codacy.com/project/badge/Coverage/c02851e5b9f24fe299783b48eab18f54)](https://www.codacy.com/gh/anancarv/python-artifactory/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=anancarv/python-artifactory&amp;utm_campaign=Badge_Coverage)![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)`pyartifactory` is a Python library to access the [Artifactory REST API](https://www.jfrog.com/confluence/display/RTF/Artifactory+REST+API).This library enables you to manage Artifactory resources such as users, groups, permissions, repositories, artifacts and access tokens in your applications. Based on Python 3.6+ type hints.&lt;!-- toc --&gt;- [Requirements](#requirements)- [Install](#install)- [Usage](#usage)  * [Authentication](#authentication)  * [SSL Cert Verification Options](#ssl-cert-verification-options)  * [Admin objects](#admin-objects)    + [User](#user)    + [Group](#group)    + [Security](#security)    + [Repository](#repository)    + [Permission](#permission)      - [Artifactory lower than 6.6.0](#artifactory-lower-than-660)      - [Artifactory 6.6.0 or higher](#artifactory-660-or-higher)  * [Artifacts](#artifacts)    + [Get the information about a file or folder](#get-the-information-about-a-file-or-folder)    + [Deploy an artifact](#deploy-an-artifact)    + [Download an artifact](#download-an-artifact)    + [Retrieve artifact list](#retrieve-artifact-list)    + [Retrieve artifact properties](#retrieve-artifact-properties)    + [Set artifact properties](#set-artifact-properties)    + [Update artifact properties](#update-artifact-properties)    + [Retrieve artifact stats](#retrieve-artifact-stats)    + [Copy artifact to a new location](#copy-artifact-to-a-new-location)    + [Move artifact to a new location](#move-artifact-to-a-new-location)    + [Delete an artifact](#delete-an-artifact)  * [Contributing](#contributing)&lt;!-- tocstop --&gt;## Requirements* Python 3.6+## Install```pythonpip install pyartifactory```## Usage### AuthenticationSince Artifactory 6.6.0 there is version 2 of the REST API for permission management, in case you have that version or higher, you need to pass api_version=2 to the constructor when you instantiate the class.```pythonfrom pyartifactory import Artifactoryart = Artifactory(url=&quot;ARTIFACTORY_URL&quot;, auth=('USERNAME','PASSWORD_OR_API_KEY'), api_version=1)```### SSL Cert Verification OptionsSpecify a local cert to use as client side certificate```pythonfrom pyartifactory import Artifactoryart = Artifactory(url=&quot;ARTIFACTORY_URL&quot;, auth=('USERNAME','PASSORD_OR_API_KEY'), cert=&quot;/path_to_file/server.pem&quot;,api_version=1)```Disable host cert verification```pythonfrom pyartifactory import Artifactoryart = Artifactory(url=&quot;ARTIFACTORY_URL&quot;, auth=('USERNAME','PASSORD_OR_API_KEY'), verify=False, api_version=1)```### Admin objects#### UserFirst, you need to create a new Artifactory object.```pythonfrom pyartifactory import Artifactoryart = Artifactory(url=&quot;ARTIFACTORY_URL&quot;, auth=('USERNAME','PASSORD_OR_API_KEY'))```Get the list of users:```pythonusers = art.users.list()```Get a single user:```pythonuser = art.users.get(&quot;test_user&quot;)```Create a user:```pythonfrom pyartifactory.models import NewUser# Create Useruser = NewUser(name=&quot;test_user&quot;, password=&quot;test_password&quot;, email=&quot;user@user.com&quot;)new_user = art.users.create(user)# Update useruser.email = &quot;test@test.com&quot;updated_user = art.users.update(user)```Update a user:```pythonfrom pyartifactory.models import Useruser = art.users.get(&quot;test_user&quot;)# Update useruser.email = &quot;test@test.com&quot;updated_user = art.users.update(user)```Delete a user:```pythonart.users.delete(&quot;test_user&quot;)```Unlock a user:```pythonart.users.unlock(&quot;test_user&quot;)```#### GroupGet the list of groups:```pythongroups = art.groups.list()```Get a single group:```pythongroup = art.groups.get(&quot;group_name&quot;)```Create/Update a group:```pythonfrom pyartifactory.models import Group# Create a Groupgroup = Group(name=&quot;test_group&quot;, description=&quot;test_group&quot;)new_group = art.groups.create(group)# Update a Groupgroup.description = &quot;test_group_2&quot;updated_group = art.groups.update(group)```Delete a group:```pythonart.groups.delete(&quot;test_group&quot;)```#### SecurityA set of methods for performing operations on apiKeys, passwords ...```python&gt;&gt;&gt; art.security.art.security.create_api_key(          art.security.get_encrypted_password(  art.security.revoke_api_key(art.security.get_api_key(             art.security.regenerate_api_key(      art.security.revoke_user_api_key(```Create an access token (for a transient user):```pythontoken = art.security.create_access_token(user_name='transient_artifactory_user',                                         groups=['g1', 'g2'],                                         refreshable=True)```Create an access token for an existing user (groups are implied from the existing user):```pythontoken = art.security.create_access_token(user_name='existing_artifactory_user',                                         refreshable=True)```Revoke an existing revocable token:```pythonart.security.revoke_access_token(token.access_token)```#### RepositoryGet the list of repositories:```pythonrepositories = art.repositories.list()```Get a single repository```pythonrepo = art.repositories.get_repo(&quot;repo_name&quot;)# According to the repo type, you'll have either a local, virtual or remote repository returned```Create/Update a repository:```pythonfrom pyartifactory.models import LocalRepository, VirtualRepository, RemoteRepository# Create local repolocal_repo = LocalRepository(key=&quot;test_local_repo&quot;)new_local_repo = art.repositories.create_repo(local_repo)# Create virtual repovirtual_repo = VirtualRepository(key=&quot;test_virtual_repo&quot;)new_virtual_repo = art.repositories.create_repo(virtual_repo)# Create remote reporemote_repo = RemoteRepository(key=&quot;test_remote_repo&quot;)new_remote_repo = art.repositories.create_repo(remote_repo)# Update a repositorylocal_repo = art.repositories.get_repo(&quot;test_local_repo&quot;)local_repo.description = &quot;test_local_repo&quot;updated_local_repo = art.repositories.update_repo(local_repo)```Delete a repository:```pythonart.repositories.delete(&quot;test_local_repo&quot;)```#### PermissionGet the list of permissions:```pythonpermissions = art.permissions.list()```Get a single permission:```pythonusers = art.permissions.get(&quot;test_permission&quot;)```Create/Update a permission:##### Artifactory lower than 6.6.0```pythonfrom pyartifactory.models import Permission# Create a permissionpermission = Permission(    **{        &quot;name&quot;: &quot;test_permission&quot;,        &quot;repositories&quot;: [&quot;test_repository&quot;],        &quot;principals&quot;: {            &quot;users&quot;: {&quot;test_user&quot;: [&quot;r&quot;, &quot;w&quot;, &quot;n&quot;, &quot;d&quot;]},            &quot;groups&quot;: {&quot;developers&quot;: [&quot;r&quot;]},        },    })perm = art.permissions.create(permission)# Update permissionpermission.repositories = [&quot;test_repository_2&quot;]updated_permission = art.permissions.update(permission)```##### Artifactory 6.6.0 or higher```pythonfrom pyartifactory import Artifactoryfrom pyartifactory.models import PermissionV2from pyartifactory.models.permission import PermissionEnumV2, PrincipalsPermissionV2, RepoV2, BuildV2, ReleaseBundleV2# To use PermissionV2, make sure to set api_version=2art = Artifactory(url=&quot;ARTIFACTORY_URL&quot;, auth=('USERNAME','PASSWORD_OR_API_KEY'), api_version=2)# Create a permissionpermission = PermissionV2(    name=&quot;test_permission&quot;,    repo=RepoV2(        repositories=[&quot;test_repository&quot;],        actions=PrincipalsPermissionV2(            users={                &quot;test_user&quot;: [                    PermissionEnumV2.read,                    PermissionEnumV2.annotate,                    PermissionEnumV2.write,                    PermissionEnumV2.delete,                ]            },            groups={                &quot;developers&quot;: [                    PermissionEnumV2.read,                    PermissionEnumV2.annotate,                    PermissionEnumV2.write,                    PermissionEnumV2.delete,                ],            },        ),        includePatterns=[&quot;**&quot;],        excludePatterns=[],    ),    build=BuildV2(          actions=PrincipalsPermissionV2(              users={                  &quot;test_user&quot;: [                      PermissionEnumV2.read,                      PermissionEnumV2.write,                  ]              },              groups={                  &quot;developers&quot;: [                      PermissionEnumV2.read,                      PermissionEnumV2.write,                  ],              },          ),          includePatterns=[&quot;&quot;],          excludePatterns=[&quot;&quot;],      ),    releaseBundle=ReleaseBundleV2(          repositories=[&quot;release-bundles&quot;],          actions=PrincipalsPermissionV2(              users={                  &quot;test_user&quot;: [                      PermissionEnumV2.read,                  ]              },              groups={                  &quot;developers&quot;: [                      PermissionEnumV2.read,                  ],              },          ),          includePatterns=[&quot;&quot;],          excludePatterns=[&quot;&quot;],      )  # You don't have to set all the objects repo, build and releaseBundle  # If you only need repo for example, you can set only the repo object)perm = art.permissions.create(permission)# Update permissionpermission.repo.repositories = [&quot;test_repository_2&quot;]updated_permission = art.permissions.update(permission)```Delete a permission:```pythonart.permissions.delete(&quot;test_permission&quot;)```### Artifacts#### Get the information about a file or folder```pythonartifact_info = art.artifacts.info(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;)# file_info = art.artifacts.info(&quot;my-repository/my/artifact/directory/file.txt&quot;)# folder_info = art.artifacts.info(&quot;my-repository/my/artifact/directory&quot;)```#### Deploy an artifact```pythonartifact = art.artifacts.deploy(&quot;&lt;LOCAL_FILE_LOCATION&gt;&quot;, &quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;)# artifact = art.artifacts.deploy(&quot;Desktop/myNewFile.txt&quot;, &quot;my-repository/my/new/artifact/directory/file.txt&quot;)```#### Download an artifact```pythonartifact = art.artifacts.download(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, &quot;&lt;LOCAL_DIRECTORY_PATH&gt;&quot;)# artifact = art.artifacts.download(&quot;my-artifactory-repository/my/new/artifact/file.txt&quot;, &quot;Desktop/my/local/directory&quot;)# The artifact location is returned by the download method# If you have not set a &lt;LOCAL_DIRECTORY_PATH&gt;, the artifact will be downloaded in the current directory```#### Retrieve artifact list```pythonartifacts = art.artifacts.list(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;)# files_only = art.artifacts.list(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, list_folders=False)# non_recursive = art.artifacts.list(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, recursive=False)# max_depth = art.artifacts.list(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, depth=3)```#### Retrieve artifact properties```pythonartifact_properties = art.artifacts.properties(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;)  # returns all properties# artifact_properties = art.artifacts.properties(&quot;my-repository/my/new/artifact/directory/file.txt&quot;)artifact_properties = art.artifacts.properties(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, [&quot;prop1&quot;, &quot;prop2&quot;])  # returns specific propertiesartifact_properties.properties[&quot;prop1&quot;]  # [&quot;value1&quot;, &quot;value1-bis&quot;]```#### Set artifact properties```pythonartifact_properties = art.artifacts.set_properties(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, {&quot;prop1&quot;: [&quot;value&quot;], &quot;prop2&quot;: [&quot;value1&quot;, &quot;value2&quot;, &quot;etc&quot;})  # recursive mode is enabled by defaultartifact_properties = art.artifacts.set_properties(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, {&quot;prop1&quot;: [&quot;value&quot;], &quot;prop2&quot;: [&quot;value1&quot;, &quot;value2&quot;, &quot;etc&quot;]}, False) # disable recursive mode```#### Update artifact properties```pythonartifact_properties = art.artifacts.update_properties(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, {&quot;prop1&quot;: [&quot;value&quot;], &quot;prop2&quot;: [&quot;value1&quot;, &quot;value2&quot;, &quot;etc&quot;})  # recursive mode is enabled by defaultartifact_properties = art.artifacts.update_properties(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;, {&quot;prop1&quot;: [&quot;value&quot;], &quot;prop2&quot;: [&quot;value1&quot;, &quot;value2&quot;, &quot;etc&quot;}, False) # disable recursive mode```#### Retrieve artifact stats```pythonartifact_stats = art.artifacts.stats(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;)# artifact_stats = art.artifacts.stats(&quot;my-repository/my/new/artifact/directory/file.txt&quot;)```#### Copy artifact to a new location```pythonartifact = art.artifacts.copy(&quot;&lt;CURRENT_ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;,&quot;&lt;NEW_ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;)# If you want to run a dryRun test, you can do the following:# artifact = art.artifacts.copy(&quot;my-repository/current/artifact/path/file.txt&quot;,&quot;my-repository/new/artifact/path/file.txt&quot;, dryrun=True)# It will return properties of the newly copied artifact```#### Move artifact to a new location```pythonartifact = art.artifacts.move(&quot;&lt;CURRENT_ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;,&quot;&lt;NEW_ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;)# You can also run a dryRun test with the move operation# It will return properties of the newly moved artifact```#### Delete an artifact```pythonart.artifacts.delete(&quot;&lt;ARTIFACT_PATH_IN_ARTIFACTORY&gt;&quot;)```### ContributingPlease read the [Development - Contributing](./CONTRIBUTING.md) guidelines.</longdescription>
</pkgmetadata>