<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># idrac_ctlStandalone command line tool provide option to interact with Dell iDRAC via Redfish REST API and execute typical workflow. It supports both asynchronous and synchronous options to interact with iDRAC.* boot from remote location via http/https* boot from remote NFS/CIFS* optimize bios setting for real time workload.* basic option related to job and management.  apply/reset pending changes.* query any object that IDRAC exposes via REST interface. firmware/driver/status/metrics* manage volumes* manage raid* manage boot source* manage secure boot / UEFI* and much more..Examples directory contains typical examples.Project on https://pypi.org/manage/project/idrac-ctl/releases/# OverviewThis tool provides an option to interact with Dell iDRAC via the command line and execute almost every workflow you can do via Web UI. The idrac_ctl, by default, outputs everything in JSON, so you can easily pass it to any other tools to filter. Some commands provide an option to filter on action or specific fields, and s is still ongoing work. The tool developed in extendability mind. Each command registered dynamically. It sufficiently indicates the import statement in __init__ to load the custom command. # Initial stepsSet the environment variable, so you don't need to pass each time.```bashexport IDRAC_IP=MY_IPexport IDRAC_PASSWORD=MY_PASSWORDexport IDRAC_USERNAME=root# root is default.```## Install```pip install idrac_ctl# and run it as standalone appidrac_ctl --help```## Manual installMake sure you are using python &gt;= 3.10Make sure you are using 3.10conda install -n py310 python=3.10```bashgit clone https://github.com/spyroot/idrac_ctl.gitcd idrac_ctlpip install -r requirements.txtpython idrac_ctl.py --help```Please note i'm still trying to optimize the root menu for easy consumption. For now, all subcommands are in root, hence format idrac_ctl command optional argsList of subcommands.```bashmain command          list of idrac_ctl commands    attr                command fetch the attribute view    attr-clear-pending  command clear attribute pending values    bios                command fetch the bios information    bios-change         command change bios values    bios-clear-pending  command clear bios pending values    bios-registry       command query bios registry    boot                command fetch the boot source    boot-clear-pending  command clear boot source pending values    boot-one-shot       command change one shoot boot    boot-option         command fetch the boot options    boot-settings       command fetch the boot setting and pending    boot-source-enable  command enable the boot on a particular device.    boot-source-get     command fetch the boot source for device/devices    boot-source-list    command fetch the boot source list    change-boot-order   command change boot order    chassis             command query chassis services    chassis-reset       command reset chassis    current_boot        command fetch the boot source for device/devices    dell-lc-svc         command query dell-lc services    eject_vm            command eject the virtual media    firmware            fetch the firmware view    firmware_inventory  fetch the firmware inventory view    get_vm              fetch the virtual media    insert_vm           command insert virtual media    job                 command fetch a job    job-rm              command delete a job    job-rm-all          command delete all jobs    job-watch           command watch a job    jobs                command fetch a list of jobs    jobs-dell-service   command query jobs services    jobs-service        command query jobs services    manager             fetch the attribute view    oem-actions         command get supported dell os oem actions    oem-attach          command attach network iso    oem-attach-status   command get attach status    oem-boot-netios     command boot from network iso    oem-detach          command detach network iso    oem-disconnect      command disconnect network iso    oem-net-ios-status  command get network iso status    oem-net-iso-task    command get supported dell os oem actions    pci                 command fetch the pci device or function    query               command query based on resource.    raid                fetch the bios information    reboot              reboots the system    service-api-rs-status                        command fetch service api status    service-api-status  command fetch service api status    storage-controllers                        command fetch the storage information    storage-convert-noraid                        command converts raid disk under controller to none raid    storage-convert-raid                        command converts none raid disk under controller to raid    storage-drives      command fetch the storage drives information    storage-get         command fetch the storage information    storage-list        command fetch the storage devices    system              command fetch the system view.    system-export       command exports system configuration    system-import       command import system configuration    task                command fetch task.    task-get            command fetch task    tasks-list          command fetch tasks list    volume-get          command query volume from storage device.    volume-init         command initialize volume..    volumes             fetch the virtual disk data```From a system we can view all compute system action and attributes.```bashidrac_ctl system```trimmed output```bash{    &quot;@odata.context&quot;: &quot;/redfish/v1/$metadata#ComputerSystem.ComputerSystem&quot;,    &quot;@odata.id&quot;: &quot;/redfish/v1/Systems/System.Embedded.1&quot;,    &quot;@odata.type&quot;: &quot;#ComputerSystem.v1_16_0.ComputerSystem&quot;,    &quot;Actions&quot;: {        &quot;#ComputerSystem.Reset&quot;: {            &quot;ResetType@Redfish.AllowableValues&quot;: [                &quot;On&quot;,                &quot;ForceOff&quot;,                &quot;ForceRestart&quot;,                &quot;GracefulRestart&quot;,                &quot;GracefulShutdown&quot;,                &quot;PushPowerButton&quot;,                &quot;Nmi&quot;,                &quot;PowerCycle&quot;            ],            &quot;target&quot;: &quot;/redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset&quot;        }    },    &quot;AssetTag&quot;: &quot;&quot;,    &quot;Bios&quot;: {        &quot;@odata.id&quot;: &quot;/redfish/v1/Systems/System.Embedded.1/Bios&quot;    },```If you pass for the same command --deep flag, it will recursively walk for each action and collect a unified view.## Basic BIOS manipulation.For example, we want to disable the memory test, disable the os watch timer, disable the C state, and enable SRIOV.  Create a spec file and run. Note that many BIOS changes require a host reset. Therefore, if you have pending changes, these changes must either be applied or reset. Similarly,when you apply, change must be applied.You can pass --commit --reboot, where commit will commit, i.e., apply change --reboot post-commit.Example change bios from JSON spec.```bashidrac_ctl bios-change --from_spec ./my_test.spec.json on-reset``````json{        &quot;Attributes&quot;: {                &quot;MemFrequency&quot;: &quot;MaxPerf&quot;,                        &quot;MemTest&quot;: &quot;Disabled&quot;,                        &quot;OsWatchdogTimer&quot;: &quot;Disabled&quot;,                        &quot;ProcCStates&quot;: &quot;Disabled&quot;,                        &quot;SriovGlobalEnable&quot;: &quot;Enabled&quot;        }}```Example change bios from JSON spec, commit and reboot.```bashidrac_ctl bios-change --from_spec ./my_test.spec.json --show on-reset --commit --reboot```Example --show the flag. It will generate the final spec command will generate.```bashidrac_ctl bios-change --from_spec ./my_test.spec.json --show on-reset```## Compare values.Before applying the change, you might want to check the current value.For example first we fetch current values for ProcCStates and SysMemSize```bashidrac_ctl bios --filter ProcCStates,SysMemSize```By default, output colorize if you need pass or pipe to jq or any other toolsuser **--nocolor** flag.```bashpython idrac_ctl.py --nocolor bios --filter ProcCStates,SysMemSize | jq '.data'``````json{  &quot;ProcCStates&quot;: &quot;Disabled&quot;,  &quot;SysMemSize&quot;: &quot;768 GB&quot;}```You can also create query in json file and query many servers at same time.Create query.json```bios_query.json[  &quot;ProcCStates&quot;,  &quot;SysMemSize&quot;]``````bashidrac_ctl --nocolor bios --from_file bios_query.json | jq '.data'``````## More advanced example. Let say we need boot one shot from ISO file from HTTP link and startunattended kickstart installation.First, check if any virtual media is already attached and check the device id.```bashidrac_ctl get_virtual_media```If you need to eject virtual media```bashpython idrac_ctl.py eject_virtual_media --device_id 1```Now insert virtual media. If you fancy you can start local HTTP listener and pass your IP.```bashidrac_ctl insert_virtual_media --uri_path http://10.241.7.99/ubuntu-22.04.1-desktop-amd64.iso --device_id 1```Confirm that virtual media inserted```bashidrac_ctl get_virtual_media```We see image attached from get_virtual_media```json[        {            &quot;@odata.context&quot;: &quot;/redfish/v1/$metadata#VirtualMedia.VirtualMedia&quot;,            &quot;@odata.id&quot;: &quot;/redfish/v1/Systems/System.Embedded.1/VirtualMedia/1&quot;,            &quot;@odata.type&quot;: &quot;#VirtualMedia.v1_4_0.VirtualMedia&quot;,            &quot;Actions&quot;: {                &quot;#VirtualMedia.EjectMedia&quot;: {                    &quot;target&quot;: &quot;/redfish/v1/Systems/System.Embedded.1/VirtualMedia/1/Actions/VirtualMedia.EjectMedia&quot;                },                &quot;#VirtualMedia.InsertMedia&quot;: {                    &quot;target&quot;: &quot;/redfish/v1/Systems/System.Embedded.1/VirtualMedia/1/Actions/VirtualMedia.InsertMedia&quot;                }            },            &quot;ConnectedVia&quot;: &quot;URI&quot;,            &quot;Description&quot;: &quot;iDRAC Virtual Media Instance&quot;,            &quot;Id&quot;: &quot;1&quot;,            &quot;Image&quot;: &quot;http://10.241.7.99/ubuntu-22.04.1-desktop-amd64.iso&quot;,            &quot;ImageName&quot;: &quot;ubuntu-22.04.1-desktop-amd64.iso&quot;,            &quot;Inserted&quot;: true,            &quot;MediaTypes&quot;: [                &quot;CD&quot;,                &quot;DVD&quot;,                &quot;USBStick&quot;            ],            &quot;MediaTypes@odata.count&quot;: 3,            &quot;Name&quot;: &quot;VirtualMedia Instance 1&quot;,            &quot;Password&quot;: null,            &quot;TransferMethod&quot;: &quot;Stream&quot;,            &quot;TransferProtocolType&quot;: &quot;HTTP&quot;,            &quot;UserName&quot;: null,            &quot;WriteProtected&quot;: true        }]```Set BIOS boot in one shot. In this setting on reboot, we will boot from CD-ROM when installation is complete. BIOS will boot OS from the default location. i.e., whatever is first on the list.```bashidrac_ctl boot_one_shot --device Cd# note Cd is default anyway# --uefi_target if we need indicate UEFI device id.```Now reboot a host.```rebootpython idrac_ctl.py reboot --reset_type PowerCyclepython idrac_ctl.py reboot --reset_type GracefulRestart```Note in my example, we didn't use UEFI.   If you need to use UEFI.First, get UEFI ids```bashidrac_ctl boot_source```Each device has a UefiDevicePath key. You can pass this key to insert media action if you need to boot from UEFI.```json{  &quot;@odata.context&quot;: &quot;/redfish/v1/$metadata#BootOption.BootOption&quot;,  &quot;@odata.id&quot;: &quot;/redfish/v1/Systems/System.Embedded.1/BootOptions/NIC.Slot.8-1&quot;,  &quot;@odata.type&quot;: &quot;#BootOption.v1_0_4.BootOption&quot;,  &quot;BootOptionEnabled&quot;: true,  &quot;BootOptionReference&quot;: &quot;NIC.Slot.8-1&quot;,  &quot;Description&quot;: &quot;Current settings of the Legacy Boot option&quot;,  &quot;DisplayName&quot;: &quot;NIC in Slot 8 Port 1: IBA ICE Slot D800 v2500&quot;,  &quot;Id&quot;: &quot;NIC.Slot.8-1&quot;,  &quot;Name&quot;: &quot;Legacy Boot option&quot;,  &quot;UefiDevicePath&quot;: &quot;BBS(0x80,IBA ICE Slot D800 v2500)&quot;}```Note ```bashidrac_ctl boot_one_shot --uefi_target```## Export/Import system configurationThe export config, by default, will create a task and wait for completion. So will see the status bar progress.  If we don't want to wait, we can pass --the async flag.  In this setting, each request to iDRAC send asynchronously, and we don't want results for job completion.```bashidrac_ctl system-export --filename system.jsonidrac_ctl system-import --config system.json```If we don't need to wait, we can pass --async. It will create a job, but it will not wait for a job to complete.```bashidrac_ctl export --filename system.json``````bashidrac_ctl export --filename system.json --async```This command will output job_id that we can use with job --job_id to get a job status```json {    &quot;job_id&quot;: &quot;JID_745386566338&quot;}```You can later fetch a result of job.```bashidrac_ctl  job --job_id JID_745386566338```## Example attaching ISO from CIFS share and using Dell OEM API.Install Samba,  in my case I share /var/www/html/ which I also use for nginx```bashsudo apt install sambasystemctl status smbd --no-pager -lsudo systemctl enable --now smbdsudo ufw allow sambasudo usermod -aG sambashare $USERsudo systemctl start --now smbdecho &quot;[sambashare]    comment = Samba on www    path = /var/www/html/    read only = no    browsable = yes&quot; &gt;&gt; /etc/samba/smb.confsudo systemctl restart smbd```Now we can mount.  Note in my case I use default username vmware and password 123456.```bashidrac_ctl oem-attach --ip_addr $CIFS_SERVER --share_name sambashare --remote_image ubuntu-22.04.1-desktop-amd64.iso```Now we can check status.```bashidrac_ctl oem-attach-status{    &quot;DriversAttachStatus&quot;: &quot;NotAttached&quot;,    &quot;ISOAttachStatus&quot;: &quot;Attached&quot;}``````idrac_ctl.py oem-net-ios-statuspython idrac_ctl.py oem-net-ios-status{    &quot;HostAttachedStatus&quot;: &quot;Attached&quot;,    &quot;HostBootedFromISO&quot;: &quot;No&quot;,    &quot;IPAddr&quot;: &quot;10.241.7.99&quot;,    &quot;ISOConnectionStatus&quot;: &quot;ConnectionUp&quot;,    &quot;ImageName&quot;: &quot;ubuntu-22.04.1-desktop-amd64.iso&quot;,    &quot;ShareName&quot;: &quot;sambashare&quot;,    &quot;UserName&quot;: &quot;vmware&quot;}```## Example changing BIOS valuesFirst, obtain a list of all possible attributes and values that BIOS supports. Note many values we can't change. Keep attention to the read-only flag.Also, note if a reboot is required or not.```bashidrac_ctl bios-registry --attr_list```For example attribute PowerCycleRequest.```bashidrac_ctl bios-registry --attr_name PowerCycleRequest``````json[    {        &quot;AttributeName&quot;: &quot;PowerCycleRequest&quot;,        &quot;CurrentValue&quot;: null,        &quot;DisplayName&quot;: &quot;Power Cycle Request&quot;,        &quot;DisplayOrder&quot;: 10008,        &quot;HelpText&quot;: &quot;Specifies how the system reacts when system transitions to S5 state.  When set to None, the transition to S5 is normal.  When set to Full Power Cycle, the system will temporarily be forced into a lower power state, similar to removing and replacing AC.&quot;,        &quot;Hidden&quot;: false,        &quot;Immutable&quot;: false,        &quot;MenuPath&quot;: &quot;./MiscSettingsRef&quot;,        &quot;ReadOnly&quot;: false,        &quot;ResetRequired&quot;: true,        &quot;Type&quot;: &quot;Enumeration&quot;,        &quot;Value&quot;: [            {                &quot;ValueDisplayName&quot;: &quot;None&quot;,                &quot;ValueName&quot;: &quot;None&quot;            },            {                &quot;ValueDisplayName&quot;: &quot;Full Power Cycle&quot;,                &quot;ValueName&quot;: &quot;FullPowerCycle&quot;            }        ],        &quot;WarningText&quot;: null,        &quot;WriteOnly&quot;: false    }]```We can also query for a BIOS attributes that we can change. Save result to a file and find value that you need change.```bashidrac_ctl bios-registry --filter-read_only -f bios.json```In my case I disable Mem Test and enabled MmioAbove4Gb```bashidrac_ctl bios-change  --attr_name MemTest,MmioAbove4Gb --attr_value Disabled,Enabled```Please use the  [GitHub issue] tracker (https://github.com/spyroot/idrac_ctl/issues) submit bugs or request features.More example TBD.</longdescription>
</pkgmetadata>