<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========ResolveLib==========ResolveLib at the highest level provides a ``Resolver`` class that includesdependency resolution logic. You give it some things, and a little informationon how it should interact with them, and it will spit out a resolution result.Intended Usage==============::    import resolvelib    # Things I want to resolve.    requirements = [...]    # Implement logic so the resolver understands the requirement format.    class MyProvider:        ...    provider = MyProvider()    reporter = resolvelib.BaseReporter()    # Create the (reusable) resolver.    resolver = resolvelib.Resolver(provider, reporter)    # Kick off the resolution process, and get the final result.    result = resolver.resolve(requirements)The provider interface is specified in ``resolvelib.providers``. You don'tneed to inherit anything, however, only need to implement the right methods.Terminology===========The intention of this section is to unify the terms we use when talking aboutthis code base, and packaging in general, to avoid confusion. Class andvariable names in the code base should try to stick to terms defined here.Things passed into ``Resolver.resolve()`` and provided by the provider are allconsidered opaque. They don't need to adhere to this set of terminologies.Nothing can go wrong as long as the provider implementers can keep their headsstraight.Package-------A thing that can be installed. A Package can have one or more versionsavailable for installation.Version-------A string, usually in a number form, describing a snapshot of a Package. Thisnumber should increase when a Package posts a new snapshot,i.e a higher number means a more up-to-date snapshot.Specifier---------A collection of one or more Versions. This could be a wildcard, indicating thatany Version is acceptable.Candidate---------A combination of a Package and a Version, i.e. a &quot;concrete requirement&quot;. Pythonpeople sometimes call this a &quot;locked&quot; or &quot;pinned&quot; dependency. Both of&quot;requirement&quot; and &quot;dependency&quot;, however, SHOULD NOT be used when describing aCandidate, to avoid confusion.Some resolver architectures refer this as a &quot;specification&quot;, but it is notused here to avoid confusion with a *Specifier*.Requirement-----------An intention to acquire a needed package, i.e. an &quot;abstract requirement&quot;. A&quot;dependency&quot;, if not clarified otherwise, also refers to this concept.A Requirement should specify two things: a Package, and a Specifier.Contributing============Please see `developer documentation &lt;./DEVELOPMENT.rst&gt;`__.</longdescription>
</pkgmetadata>