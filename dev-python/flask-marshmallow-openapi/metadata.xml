<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Overview[![PyPI Status](https://badge.fury.io/py/flask-marshmallow-openapi.svg)](https://badge.fury.io/py/flask-marshmallow-openapi)[![license](https://img.shields.io/pypi/l/flask-marshmallow-openapi.svg)](https://opensource.org/licenses/MIT)[![python_versions](https://img.shields.io/pypi/pyversions/flask-marshmallow-openapi.svg)](https://pypi.org/project/flask-marshmallow-openapi/)Provides OpenAPI documentation generated from code for[Flask](https://flask.palletsprojects.com/en/latest/) APIs built around[marshmallow](https://marshmallow.readthedocs.io/en/stable/) schemas.This hackish and organically grown (TM) package was created because no other similarprojects worked exactly the way I wanted them.You will probably be better served by some other, properly maintained project withsimilar purpose:- [flasgger](https://github.com/flasgger/flasgger)- [flask-openapi3](https://github.com/luolingchun/flask-openapi3)If you still want to use it, welcome aboard :-) and read on!## Installation~~~shpip install flask-marshmallow-openapi~~~## What it does?Searches your codebase for [marshmallow](https://marshmallow.readthedocs.io/en/stable/)schemas and :medal_military: decorated :medal_military: Flask routes. For example:```pyfrom flask_marshmallow_openapi import Securities, open_apifrom ..views import NewPasswordSchema, LoginResponseSchema@blueprint.route(&quot;/reset_password/&lt;token&gt;&quot;, methods=[&quot;POST&quot;])@open_api.post(    request_schema=NewPasswordSchema,    response_schema=LoginResponseSchema,    operation_id=&quot;reset_password_finalize&quot;,    security=Securities.no_token,    additional_parameters=[        {            &quot;name&quot;: &quot;token&quot;,            &quot;in&quot;: &quot;path&quot;,            &quot;required&quot;: True,            &quot;allowEmptyValue&quot;: False,            &quot;schema&quot;: {&quot;type&quot;: &quot;string&quot;},        }    ],)def reset_password_confirm(token):    ...```Using these, it constructs OpenAPI `swagger.json` and serves it. It also includes andserves `ReDoc` and `SwaggerUI` documentation viewers.## Full exampleFirst we need some data:```pyfrom dataclasses import dataclass@dataclassclass Book:    id: int    title: str    publisher: str    isbn: str```Then we need some [marshmallow](https://marshmallow.readthedocs.io/en/stable/) schemas:```pyimport marshmallow as maclass SchemaOpts(ma.SchemaOpts):    def __init__(self, meta, *args, **kwargs):        self.tags = getattr(meta, &quot;tags&quot;, [])        self.url_id_field = getattr(meta, &quot;url_id_field&quot;, None)        super().__init__(meta, *args, **kwargs)class BookSchema(ma.Schema):    OPTIONS_CLASS = SchemaOpts    class Meta:        url_id_field = &quot;id&quot;        tags = [&quot;Books&quot;]        description = &quot;Schema for Book model&quot;    id = ma.fields.Integer(as_string=True)    title = ma.fields.String(        allow_none=False, metadata={&quot;description&quot;: &quot;book.title description&quot;}    )    publisher = ma.fields.String(allow_none=False)    isbn = ma.fields.String(allow_none=False)class BookCreateSchema(ma.Schema):    OPTIONS_CLASS = SchemaOpts    class Meta(BookSchema.Meta):        pass    title = ma.fields.String(allow_none=False, required=True)class BookUpdateSchema(ma.Schema):    OPTIONS_CLASS = SchemaOpts    class Meta(BookSchema.Meta):        pass    id = ma.fields.Integer(as_string=True, dump_only=True)    isbn = ma.fields.String(allow_none=False, dump_only=True)```Then an [Flask](https://flask.palletsprojects.com/en/2.3.x/) app and some:medal_military: decorated :medal_military: routes:```pyimport flaskfrom flask_marshmallow_openapi import open_apiapp = flask.Flask(__name__)@app.route(&quot;/books&quot;, methods=[&quot;GET&quot;])@open_api.get(BookSchema, &quot;bookList&quot;, many=True)def books_list():    return &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;@app.route(&quot;/books/&lt;int:book_id&gt;&quot;, methods=[&quot;GET&quot;])@open_api.get(BookSchema, &quot;bookDetail&quot;, many=False)def books_detail(book_id):    &quot;&quot;&quot;    description: |        Look I can Markdown!        | foo | bar | baz |        | --- | --- | --- |        | 1   | 2   | 3   |        | 4   | 5   | 6   |    &quot;&quot;&quot;    return &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;@app.route(&quot;/books&quot;, methods=[&quot;POST&quot;])@open_api.post(BookCreateSchema, BookSchema, &quot;bookCreate&quot;)def books_create():    return &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;@app.route(&quot;/books/&lt;int:book_id&gt;&quot;, methods=[&quot;PATCH&quot;])@open_api.patch(BookUpdateSchema, BookSchema, &quot;bookUpdate&quot;)def books_update(book_id):    return &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;```Finally, we need to initialize OpenAPI middleware for our app:```pyimport importlib.resourcesimport yamldef load_swagger_json_template(api_name: str, api_version: str):    text = flask.render_template_string(        importlib.resources.files(app_resources)        .joinpath(&quot;open_api.template.yaml&quot;)        .read_text(),        api_name=api_name,    )    data = yaml.full_load(text)    data[&quot;info&quot;] = dict()    data[&quot;version&quot;] = api_version    return datadef load_changelog_md():    return importlib.resources.files(app_resources).joinpath(&quot;CHANGELOG.md&quot;).read_text()conf = OpenAPISettings(    api_version=&quot;v1&quot;,    api_name=&quot;Foobar API&quot;,    app_package_name=&quot;foobar_api&quot;,    mounted_at=&quot;/v1&quot;,    swagger_json_template_loader=load_swagger_json_template,    swagger_json_template_loader_kwargs={&quot;api_name&quot;: &quot;Foobar API&quot;, &quot;api_version&quot;: &quot;v1&quot;},    changelog_md_loader=load_changelog_md,)docs = OpenAPI(config=conf)docs.init_app(app)````app_package_name` must be importable Python package name. It will be searched for any`marshmallow.Schema` subclasses. These will be added as OpenAPI `components.schemas`.Installed middleware will add some routes to serve ReDoc, SwaggerUI and`swagger.json`:- [ReDoc](http://127.0.0.1:5000/v1/docs/re_doc)- [SwaggerUI](http://127.0.0.1:5000/v1/docs/swagger_ui)- [swagger.json](http://127.0.0.1:5000/v1/docs/static/swagger.json)- [swagger.yaml](http://127.0.0.1:5000/v1/docs/static/swagger.yaml)If you provide (optional) `changelog_md_loader`, API docs will include routes:- `/v1/docs/changelog`- `/v1/docs/static/changelog.md`If you provide (optional) `load_swagger_json_template`, it will be used as basis forconstructing `swagger.json`. Template could look like this:```yaml---title: {{ api_name }}openapi_version: 3.0.2servers:  - url: http://127.0.0.1:5000    description: |      Flask dev server running locally on developer machine  - url: https://foo.example.com    description: Live API servercomponents:  securitySchemes:    access_token:      scheme: bearer      type: http      bearerFormat: JWT      description: |        This endpoint requires [JWT](https://jwt.io/) access token.    refresh_token:      scheme: bearer      type: http      bearerFormat: JWT      description: |        This endpoint requires [JWT](https://jwt.io/) refresh token.tags:  - name: Books    description: |      Common documentation for all book related routes.```### Serving static docs via ngnixAdd `collect-static` command to your app:```pyimport shutilimport clickimport flask@app.cli.command(&quot;collect_static&quot;)@click.argument(    &quot;destination_dir&quot;,    nargs=1,    type=click.Path(file_okay=False, dir_okay=True, writable=True, resolve_path=True),    required=True,)def collect_static_command(destination_dir):    docs.collect_static(destination_dir)    shutil.copytree(        flask.current_app.static_folder, destination_dir, dirs_exist_ok=True    )    click.echo(f&quot;Static files collected into {destination_dir}.&quot;)```Configure `nginx`:```nginxserver {    # ...    location ^~ /v1/static {        alias /home/user/static;        try_files $uri $uri.html =404;    }    location ^~ /v1/docs {        alias /home/user/static/docs;        try_files $uri $uri.html =404;    }    # ...}```Whenever deploying the app, call:```shflask --app foobar_api collect-static /home/user/static```</longdescription>
</pkgmetadata>