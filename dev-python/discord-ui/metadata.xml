<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;br /&gt;&lt;p align=&quot;center&quot;&gt;    &lt;h2 align=&quot;center&quot;&gt;discord-ui&lt;/h2&gt;    &lt;p align=&quot;center&quot;&gt;        A discord.py extension for using discord ui/interaction features        &lt;br /&gt;        &lt;a href=&quot;https://pypi.org/project/discord-ui/&quot;&gt;&lt;b&gt;pip package&lt;/b&gt;&lt;/a&gt;        ‚ñ™         &lt;a href=&quot;https://discord-ui.readthedocs.io/en/latest/&quot;&gt;&lt;b&gt;read the docs&lt;/b&gt;&lt;/a&gt;         ‚ñ™         &lt;a href=&quot;https://github.com/discord-py-ui/discord-ui/tree/main/examples&quot;&gt;&lt;b&gt;examples&lt;/b&gt;&lt;/a&gt;    &lt;/p&gt;&lt;/p&gt;[![Downloads](https://pepy.tech/badge/discord-ui)](https://pepy.tech/project/discord-ui)![PyPI](https://img.shields.io/pypi/v/discord-ui)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/discord-ui)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/550953d11c8242b9b7944642a2e292c7)](https://app.codacy.com/gh/discord-py-ui/discord-ui?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=discord-py-ui/discord-ui&amp;utm_campaign=Badge_Grade_Settings)## IntroductionThis is a [discord.py](https://github.com/Rapptz/discord.py) ui extension made by [404kuso](https://github.com/404kuso) and [RedstoneZockt](https://github.com/RedstoneZockt)for using discord's newest ui features like buttons, slash commands and context commands.[Documentation](https://discord-ui.readthedocs.io/en/latest/)## Installation### Windows```cmdpy -m pip install discord-ui```### Linux```bashpython3 -m pip install discord-ui```## LicenseThis project is under MIT License## IssuesIf you find any issues, please report them https://github.com/discord-py-ui/discord-ui/issues## NoteIf you want to use slash commands, in the oauth2 invite link generation, you have to check both `bot` and `application.commands` fields![](./docs/source/images/slash/invite_scope.png)## ExampleExample for creating a simple slash command```pyimport discordfrom discord.ext import commandsfrom discord_ui import UI, SlashOptionclient = commands.Bot(&quot; &quot;)ui = UI(client)@ui.slash.command(&quot;hello_world&quot;, options=[SlashOption(bool, &quot;cool&quot;, &quot;whether this libary is cool&quot;, required=False)], guild_ids=[785567635802816595])async def command(ctx, cool=True):    &quot;&quot;&quot;This is a simple slash command&quot;&quot;&quot;    # you can use docstrings for the slash command description too    await ctx.respond(&quot;You said this libary is &quot; + str(cool))client.run(&quot;your_token&quot;)```Example for creating a user-context command```pyimport discordfrom discord.ext import commandsfrom discurd_ui import UIclient = commands.Bot(&quot; &quot;)ui = UI(client)@ui.slash.user_command(&quot;avatar&quot;, guild_ids=[785567635802816595])async def avatar(ctx, user: discord.Member):    &quot;&quot;&quot;Sends the avatar of a user&quot;&quot;&quot;    await ctx.respond(embed=discord.Embed(description=user.display_name).set_image(url=user.avatar_url))client.run(&quot;your_token&quot;)```Example for autocompletion of choices```pyimport discordfrom discord_ui import UI, SlashOption, AutocompleteInteractionasync def generator(ctx: AutocompleteInteraction):    available_choices = [&quot;hmm&quot;, &quot;this&quot;, &quot;is&quot;, &quot;a&quot;, &quot;an&quot;, &quot;test&quot;, &quot;testing&quot;]    return [(x, x) for x in available_choices if x.startswith(ctx.value_query)]@ui.slash.command(&quot;search_word&quot;, options=[SlashOption(str, &quot;query&quot;, choice_generator=generator)])async def search_word(ctx, query):    await ctx.send(&quot;got &quot; + query + &quot; for query&quot;)client.run(&quot;your_token&quot;)```Example for sending a button and receiving it```pyimport discordfrom discord.ext import commandsfrom discord_ui import UI, LinkButton, Buttonfrom asyncio import TimeoutErrorclient = commands.Bot(&quot; &quot;)ui = UI(client)@client.listen(&quot;on_message&quot;)async def on_message(message: discord.Message):    if message.content == &quot;!btn&quot;:        msg = await message.channel.send(&quot;you&quot;, components=[            [Button(&quot;press me&quot;, color=&quot;green&quot;), LinkButton(&quot;https://discord.com&quot;, emoji=&quot;üòÅ&quot;)],            Button(custom_id=&quot;my_custom_id&quot;)        ])        try:            btn = await msg.wait_for(&quot;button&quot;, client, by=message.author, timeout=20)            await btn.respond(&quot;you pressed `&quot; + btn.content + &quot;`&quot;)        except TimeoutError:            await msg.delete()client.run(&quot;your_token_here&quot;)```Example for sending Selectmenus and receiving them```pyimport discordfrom discord.ext import commandsfrom discord_ui import UI, SelectMenu, SelectOptionfrom asyncio import TimeoutErrorclient = commands.Bot(&quot; &quot;)ui = UI(client)@client.listen(&quot;on_message&quot;)async def on_message(message: discord.Message):    if message.content == &quot;!sel&quot;:        msg = await message.channel.send(&quot;you&quot;, components=[SelectMenu(options=[            SelectOption(&quot;my_value&quot;, label=&quot;test&quot;, description=&quot;this is a test&quot;),            SelectOption(&quot;my_other_value&quot;, emoji=&quot;ü§ó&quot;, description=&quot;this is a test too&quot;)        ], &quot;custom_id&quot;, max_values=2)])        try:            sel = await msg.wait_for(&quot;select&quot;, client, by=message.author, timeout=20)            await sel.respond(&quot;you selected `&quot; + str([x.content for x in sel.selected_options]) + &quot;`&quot;)        except TimeoutError:            await msg.delete()client.run(&quot;your_token_here&quot;)```Example for cogs```pyfrom discord.ext import commandsfrom discord_ui import UIfrom discord_ui.cogs import slash_command, subslash_command, listening_componentbot = commands.Bot(&quot; &quot;)ui = UI(bot)class Example(commands.Cog):    def __init__(self, bot):        self.bot = bot        @slash_command(name=&quot;example&quot;, guild_ids=[785567635802816595])    async def example(self, ctx):        await ctx.respond(&quot;gotchu&quot;)    @subslash_command(base_names=&quot;example&quot;, name=&quot;command&quot;):    async def example_command(self, ctx):        await ctx.respond(&quot;okayy&quot;)    bot.add_cog(Example(bot))bot.run(&quot;your token&quot;)```You can find more (and better) examples [here](https://github.com/discord-py-ui/discord-ui/tree/main/examples)## ContactYou can contact us on discord- [**Redstone**](https://discord.com/users/355333222596476930)- [**kuso**](https://discord.com/users/539459006847254542)- [**discord server**](https://discord.gg/bDJCGD994p)# ChangelogThis will be moved to https://discord-py-ui.github.io/discord-ui/-   &lt;details&gt;    &lt;summary&gt;5.1.2&lt;/summary&gt;    ## **Fixed**    - `commands.nuke`    - nextcord import issue (#112)         &lt;/details&gt; -   &lt;details&gt;    &lt;summary&gt;5.1.0&lt;/summary&gt;        ## **Breaking changes**    - Component custom ids are now optional, if no custom id is passed, a 100 characters long random string will be used and because of that the order of Component init params changed    - The order of SelectMenus init params changed, `custom_id` comes now after `options`    ```py    SelectMenu(&quot;my_custom_id&quot;, [options...here])    # is now    SelectMenu([options...here], &quot;my_custom_id&quot;)    ```    - Same for Buttons    ```py    Button(&quot;my_custom_id&quot;, &quot;label&quot;)    # is now    Button(&quot;label&quot;, &quot;my_custom_id&quot;)    ```    - ButtonStyles is now ButtonStyle    - renamed cog decorators, the old ones still work but they will show a deprecation warning: `slash_command` -&gt; `slash_command`, `subslash_command` -&gt; `subslash_command`, `context_cog` -&gt; `context_command`, `listening_component` -&gt; `listening_component`    - Removed `Slash.edit_command` and `Slash.edit_subcommand`, &quot;moved&quot; to `Command.edit`    - `SlashedCommand` is now `SlashInteraction`, `SlashedSubCommand` is now `SubSlashInteraction` and `SlashedContext` is now `ContextInteraction`    - The command attributes of CommandInteractions (SlashedCommand, ...) are now moved to `Interaction.command.` (the `.command` attribute is a reference to the real command, if you change properties of the command they will be updated)    - The component attributes of an interaction are now moved to `.component`    - ContextCommands `.param` attribute is now `.target`    ## **Changed**    - `argument_type` in SlashOption is now `type`    - `ButtonStyle` value names changed: color names are now capitalized and `Danger` is now `Destructive`    - `Listener.target_user` is now `Listener.target_users` and can take users, members and ids as the value    - `BaseCommand.options` and `SlashOption.options` is now of type `SlashOptionCollection`, which allows you to acces options by index and name    ```py    my_command.options[&quot;option name&quot;]    # or    my_command.options[0]    ```    You can also use some methods like `.get`, `.set` (which will return itself after it set something, so `SlashOption.set(key, value).set(key, value)` would work) and ``SlashOption.options + SlashOption.option`` will add both SlashOptions together    - If an invalid guild id was passed to a slashcommand, no exception will be raised anymore, it will just be printed into the console and ignored `logging.error()`    - Moved the `discord_ui.ext.py` module into a folder    - `on_button_press` and `on_menu_select` is now `on_button` and `on_select`. The old event names will still work but will be removed in the next release    ## **Fixed**    - disable_action_row    - `ActionRow.disable`    - no interaction events being dispatched because subclasses of dpy2 `commands.Bot` instances wouldn't get overriden which lead to not enabling needed debug events    - when no matching component listener in `Listener` could be found, the events for components events wouldn't be dispatched    - `delete_after` keyword in message send override not working    - mentionable type in slashoptions not being parsed to objects    - `@discord.ext.commands.Cooldown` not working on cog slashcommands    ## **Added**    - `**fields` to all functions that edit the message components (like `.disable_components`, `.disable_component`, ...). The `**fields` parameter can be used to edit other properties of the message without using `.edit` again and send a &quot;useless&quot; request    - `@Lister.on_error` and `@Listener.wrong_user` decorators for handling Exceptions in Listeners    - When no keyword was passed to `@Listener.button` or `@Listener.select`, the function will be called on every button/slect    - `channel_type` to SlashOption, list of `discord.ChannelType`. This will restrict the shown channels for channel slash options to this list.    - support for nextcord. Other libs **should** work too, but they are not tested.     - `Mentionable` type for SlashOptions    - description for short slashoptions. If you set the options for a slash command via callback params, you can add a description (and a type) to them with your docstring. There are 3 different styles you can use:    ```py    # style 1    @ui.slash.command()    async def my_command(ctx, my_option, my_other_option):        &quot;&quot;&quot;This is my command description        my_option: `int`:            This is the description for the my_option parameter        my_other_option: `str`:            This is the description for another option        &quot;&quot;&quot;        ...        # style 2    @ui.slash.command()    async def my_command(ctx, my_option: int, my_other_option: str):        &quot;&quot;&quot;This is my command description        my_option: This is the description for the my_option parameter        my_other_option: This is the description for another option        &quot;&quot;&quot;        ...    # style 3    @ui.slash.command()    async def my_command(ctx, my_option, my_other_option: str):        &quot;&quot;&quot;This is my command description        `int`: This is the description for the my_option parameter        This is the description for another option        &quot;&quot;&quot;        ...    ```    Note: You don't have to use `` `type` ``, you can just use `type`    - Empty descriptions for slashcommands and slashoptions. The default description value is now `\u200b` which is an &quot;empty&quot; char    - Modifying slashcommand options is now WWAAYYYY easier. You can just do `.options[name or index].name = &quot;new name&quot;` and the option will be updated    - You can set the autocomplete choice generator with a decorator now    ```py    ui.slash.command(options=[SlashOption(str, &quot;my_option&quot;)])    async def my_command(ctx, my_option):        ...    @my_command.options[&quot;my_option&quot;].autocomplete_function    async def my_generator(ctx):        ...    # or    @my_command.options[0].autocomplete_function    async def my_generator(ctx):        ...    ```    - All apllication command decorators will now return the created Command    ```py    @ui.slash.command(...)    async my_command(ctx):        ...    type(my_command) # SlashCommand    ```    - Added edit and delete method to slashcommand. You can use this for editing or deleting the command later    ```py    # edit    await my_command.edit(name=&quot;test&quot;)    # delete    await my_command.delete()    ```    - `id` to SlashCommand    - `commands_synced` event which will be dispatched when all commands where synced with the api (`UI.Slash.sync_commands`)    - `BaseCommmand.update` method which updates the api command with the lcoal changes    - `SlashSubCommand.base`, which will be shared among all subslashcommands with the same base    ## **Removed**    - `discord.ext.commands.Bot` override for enabling the debug event, this will be enabled when creating a UI instance from the bot    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;5.0.1&lt;/summary&gt;    ## **Fixed**    - Choices not working    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;5.0.0&lt;/summary&gt;    ## **Fixed**    - Roles not being parsed correctly    ## **Changed**    - default_permission    &gt; default_permission can now be of type `discord.Permissions` but the api doesn't support that yet.    - slash http    &gt; some code changes to slash-http features    ## **Added**    - ChoiceGeneratorContext    &gt; Context class for choice generation    - SlashOption    &gt; `choice_generator` keyword and `autocomplete` keyword.     &gt; `autocomplete` is not needed if you pass choice_generator    - File sending    &gt; You are now able to send hidden files    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.8&lt;/summary&gt;        ## **Fixed**    - Issue with SlashOptions    &gt; required is now false by default again        &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.7&lt;/summary&gt;    ## **Changed**    - SlashOption    &gt; Required is now ``True`` by default    ## **Fixed**    - `AttributeError: 'LinkButton' object has no attribute 'component_type'`    ## **Removed**    - decompressing    &gt; The lib now doesn't decompress byte data anymore, which means everything before the dpy commit `848d752` doesn't work with this lib.    &gt;    &gt; [message reference](https://discord.com/channels/336642139381301249/381965829857738772/879980113742143548) in discordpy discord server    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.6&lt;/summary&gt;    ## **Fixed**    - Slashcommand comparing    - Ephemeralmessage keyerror exception    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.5&lt;/summary&gt;    ## **Fixed**    - send function issues    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.4&lt;/summary&gt;    ## Fixed    - SlashOption not accepting tuple    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.3&lt;/summary&gt;    ## **Fixed**    - fixed `TypeError: 'NoneType' object is not iterable`    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.2&lt;/summary&gt;    ## **Fixed**    - `Could not find a matching option type for parameter '&lt;class 'NoneType'&gt;'`    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.1&lt;/summary&gt;    ## **Removed**    - unused parameter    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.3.0&lt;/summary&gt;    ## **Fixed**    - `Message.wait_for`    &gt; by keyword doesn't work properly    ## **Removed**    - Hash    &gt; Removed the hash property from Buttons and SelectMenus due to the removal of it from the api        ## **Added**    - `discord_ui.ext`    &gt; A module with useful tools and decorators to use [more information](https://discord-ui.readthedocs.io/en/latest/ext.html)        - BaseCommand    &gt; BaseCommand (the superclass for all applicationcommands) has now some extra properties:                - is_chat_input        &gt; Whether this command is a slash command                - is_message_context        &gt; Whether this command is a message context command                - is_user_context        &gt; Whether this command is a user context command        - SlashedCommand    &gt; Added properties:                - is_alias        &gt; Whether the invoked command is an alias or not                - aliases        &gt; All the available aliases for the command        - Listeners    &gt; Listeners are something that you can use for a better processing of received components.    &gt; You could see them as a cog to the message components    &gt; [more information](https://discord-ui.readthedocs.io/en/latest/listeners.html)    ## **Changed**    - SelectInteraction    &gt; `SelectInteraction.selected_values` are not the raw values that were selected, `SelectMenu.selected_options` are the options of type `SlashOption` that were selected    - MISSING =&gt; None    &gt; All instance values that were `MISSING` by default are now `None`    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.15&lt;/summary&gt;    # Fixed    - #97    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.14&lt;/summary&gt;    ## **Fixed**    - small SelectOption issues    - context commands    ## **Changed**    - allow context commands to have names with spaces    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.13&lt;/summary&gt;    ## **Fixed**    - `TypeError: 'EMPTY' is not a callable object` in context commands    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.12&lt;/summary&gt;    ## **Fixed**    - context commands    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.11&lt;/summary&gt;    ## **Fixed**    - cog context commands returned wrong type    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.10&lt;/summary&gt;    ## **Fixed**    - cog context commands typo with `guild_permission` keyword    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.8&lt;/summary&gt;        ## **Added**    - edit_subcomand    ## **Fixed**    - print statements    ## **Fixed**    - #94 (again üíÄ)    - received subcommands    &gt; The base_names and the name will be now set to the right value    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.7&lt;/summary&gt;    ## **Added**    - `on_component`    &gt; There is now an event with the name `component` that will be dispatched whenever a component was received    &gt; If you use `Message.wait_for`, there is now a new event choice with the name `component` (`message.wait_for(&quot;component&quot;, client)`)    ## **Fixed**    - #94    &gt; DM issue with deleting messages    ## **Changed**    - `edit`    &gt; Edit now takes &quot;content&quot; as not positional (`.edit(&quot;the content&quot;)` works now)    - component lenght    &gt; You are now able to set component values with the right max lenght    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.6&lt;/summary&gt;    ## **Fixed**    - emebds    &gt; there was an issue with sending embeds    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.5&lt;/summary&gt;    ## **Fixed**    - listening_components    &gt; There was an issue with listening components that they needed two parameters but only one was passed    &gt; Another issue was `TypeError: __init__() missing 1 required positional argument: 'custom_id'`?    - emebds    &gt; there was an issue with sending embeds    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.2&lt;/summary&gt;    ## **Changed**    - sync_commands    &gt; the `delete_unused` keyword is now optional, if you don't pass a parameter, `slash.delete_unused` will be used (from the `__init__` function)    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.1&lt;/summary&gt;    ## **Fixed**        - `cannot import name 'InteractionResponseType' from 'discord.enums'`    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.2.0&lt;/summary&gt;    ## **Added**    - cog_remove sync    &gt; when you remove a cog the slash commands will now get deleted if you set `delete_unused` to True and set `sync_on_cog` to True    - alternativ slash options    &gt; you don't have to specify options in one of the slash decorators anymore. Instead, you can set them in your callback function    &gt; Example    ```py    @ui.slash.command()    async def greet(ctx, user):                         # This will add an required option with the name &quot;user&quot; of type &quot;user&quot;        &quot;&quot;&quot;Greets a user                You can use multiline docstrings, because only the first line will be used for the description        &quot;&quot;&quot;        ...        @ui.slash.command()    async def tag(ctx, target: discord.User = None):    # This will add an optional option with the name &quot;target&quot; of type &quot;user&quot;                                                        # Note: you could also use target: &quot;user&quot; = None or anything else you would use in SlashOption for the type        ...    ```    ## **Fixed**    - sync_commands    &gt; if you would sync the commands after the first sync, it threw an error    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.1.4&lt;/summary&gt;    ## **Fixed**    - slashcommands in forbidden guilds    &gt; when trying to get slash commands in a guild with no `appication.commands` permission, it won't throw an exepction anymore    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.1.2&lt;/summary&gt;    ## **Fixed**    - Subcommands editing    &gt; subcommand checks were wrong and this would result in errors like `In options.0.options.2: Option name 'name' is already used in these options`    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.1.1&lt;/summary&gt;    ## **Fixed**    - Interaction.author.voice    &gt; For some reason the voice property of the creator or the interaction would be set    - Global slashcommands    &gt; They wouldn't be registered to the api    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.1.0&lt;/summary&gt;    ## **Added**    - py 3.6 &lt; support    &gt; You should be able to use this package with python 3.6 or newer    ## **Fixed**    - print    &gt; Forgot to remove print statementsüíÄ    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.0.4&lt;/summary&gt;    ## **Fixed**    - slashcommand    &gt; when a user was passed in an option, its guild was always None    - context commands    &gt; if no name passed, the context command wouldn't take the callback name as the name of the command    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.0.3&lt;/summary&gt;    ## **Fixed**    - Message.wait_for    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.0.2&lt;/summary&gt;    ## **Fixed**    - Issue with receiving context commands    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.0.1&lt;/summary&gt;        ## **Fixed**    - discord.ext import error    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;4.0.0&lt;/summary&gt;    ## **Added**    **You now have much more control over your slash commands!**    - Permissions    &gt; You can update your permissions with the `Slash.update_permissions` function    - Creating commands    &gt; You can now create slash commands without the decorator in a much more eaisier way! Check out the `Slash.add_command` function    - Edit commands    &gt; You can edit commands in code with the `Slash.edit_command` function    - Listening components    &gt; You can add and remove listening components now with the `Components.add_listening_component`, `Components.remove_listening_component` and `Components.remove_listening_components` functions    - Cogs    &gt; You can now use cog decorators like `slash_command`, `subslash_command` and `listening_component`    ## **Fixed**    - SlashCommand    &gt; Slash commands wouldn't be updated if only `default_permission` was changed    ## **Changed**    - wait_for    &gt; Message.wait_for now takes `by` and `check` as parameters and `event_name` and `client` switched place (`wait_for(client, &quot;event_name&quot;)` is now `wait_for(&quot;event_name&quot;, client)`)    - listening components    &gt; You can specify listening_components now more presicely, you can add messages, users, and a check to filter    - Interaction.member    &gt; `Interaction.member` is now `Interaction.author`    - listening comonents    &gt; Listening component callback functions now only take one parameter, the used component    - `on_button_press` and `on_menu_select`    &gt; These events now take a sole parameter, the used component. If you want to acces to message, use `passed_component.message`    ## **Removed**    - ResponseMessage    &gt; Removed ResponseMessage    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.3.5&lt;/summary&gt;        ## **Fixed**    - SelectMenu    &gt; SelectMenu issue when creating it from data    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.3.4&lt;/summary&gt;    ## **Changed**    - edit    &gt; `Message.edit` now takes a `embed` parameter    ## **Fixed**    - print    &gt; Forgot to remove some `print` statements     &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.3.3&lt;/summary&gt;    ## **Added**    - class representation    &gt; classes have now a `__repr__` function    - UI(override_dpy)    &gt; You can now choose whether you want to override some of dpy objects and functions (default is True) (see [the override module](https://github.com/discord-py-ui/discord-ui/blob/main/discord_ui/override.py) for more information)    &gt; This also appeals to the `Components` class (Components(override_dpy))    &gt; note: if you don't want to create a `UI` object, you can instead override dpy with the `override_dpy` method    ```py    from discord_ui import override_dpy    override_dpy()    ```    ## **Fixed**    - dpy2    &gt; discord.py v2 now auto-decompresses socket data and passes a string instead of the uncompressed data.    - override dpy message    &gt; when overriding dpy message object, the components would mix    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.3.2&lt;/summary&gt;    ## **Added**    - EphemeralResponseMessage    &gt; You can now edit a ephemeral message which was created from an interaction (ex. when a button in a hidden message was pressed)    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.3.1&lt;/summary&gt;    ## **Added**    - interaction    &gt; `Interaction.channel` and `Interaction.guild`    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.3.0&lt;/summary&gt;    ## **Fixed**    - interaction usage in dms    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.2.9&lt;/summary&gt;        ## **Added**    - ratelimit fix    &gt; The lib will now retry after the ratelimit reset and doesn't throw an HTTPException anymore    ## **Fixed**    - sync_commands    &gt; Got `KeyError` exception while syncing commands    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.2.8&lt;/summary&gt;    ## **Fixed**    - hidden responding    &gt; When a hidden response was about to be send without defering the interaction it would thrown an error    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.2.7&lt;/summary&gt;    ## **Added**    - warnings        - When a guild_permission with an invalid guild id is passed, it will throw an exception when syncing the commands        - When the value of a guild_permission is not of type `SlashPermission` it will throw an exception    - context-commands    &gt; You can now have context commands with the same name as a normal slash command    - slashcommand description    &gt; You can use docstrings `&quot;&quot;&quot;docstring&quot;&quot;&quot;` for setting the description of a slash commmand by setting the dosctring for the callback function    ## **Changed**    - auto_defer    &gt; auto_defer is now disabled by default    - slash sync    &gt; You can now disable auto_sync for slash commmands and sync them by yourself with `Slash.sync_commands(delete_unused)`    - Interacion.defer    &gt; `Interaction._deferred` is not `Interaction.deferred` and `Interaction.defer()` doesn't throw an exception anymore, it will just log the error with `logging.error()`    ## **Fixed**    - try    &gt; There was a try/catch in the `Interaction.respond` function that would allow the code to continue when an exception occured while responding with ninja_mode    - context commands    &gt; There was an issue adding context-commands    - Command checking    &gt; Now, the libary only edits commands when changes were made     &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.2.6&lt;/summary&gt;    ## **Added**    - auto ninja_mode    &gt; If you use `.respond()`, the function will try to use ninja_mode automatically    ## **Changed**    - project    &gt; Moved git-project to https://github.com/discord-py-ui/discord-ui    ## **Fixed**    - ninja_mode response    &gt; responding with ninja_mode would end up in an exception    - file sending    &gt; fixed another file sending issue with slash commands    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.2.5&lt;/summary&gt;    ## **Fixed**    - #89 (thanks for reporting)    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.2.4&lt;/summary&gt;    - Fixed version issues with the package    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.2.2&lt;/summary&gt;    ## **Fixed**    - #85: `AttributeError: module 'discord' has no attribute '_Components__version'`    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.2.0&lt;/summary&gt;    ## **Fixed**    I'm really sorry for all the issues this libary got, if you still find issues, please report them in https://github.com/discord-py-ui/discord-ui/issues    - SelectOpion    &gt; There was an issue with emojis not being set in SelectOptions    -  LinkButton    &gt; There was an issue with setting the url not being set    - SlashCommands    &gt; There was an issue with creating commands that don't already exist    ## **Changed**    - SelectInteraction    &gt; `.values` is not `.selected_values`    ## **Added**    -  Interaction    &gt; Buttons and SelectMenus have a `.message` property for the message where their interaction was creted    &gt; ResponseMessages have a `.interaction` property for the received interaction        - Events    &gt; We added a `interaction_received` event for all interactions that are received        &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.1.0&lt;/summary&gt;    ## **Added**    - discordpy 2 support    &gt; We added support for discord.py v2, so you can stay loyal to our libary and use it together with discord.py v2!        - Exceptions    &gt; Added own Exceptions for errors        - ParseMethod    &gt; You can change the way the extension parses interaction data. You can choose between [different Methods](https://discord-ui.rtfd.io/en/latest/ui.html#id1)        - Auto-defer    &gt; The libary will autodefer all interactions public. If you want to change that, take a look at [the documentation for this feature](https://discord-ui.rtfd.io/en/latest/ui.html#id2)        - slashcommand edit check    &gt; Slash commands will only be edited if there were some changes, so you won't get a `invalid interaction` error in discord after starting the bot    &gt; If only permissions were changed, just the permissions will be edited and not the whole command like before    ## **Fixed**    - slash commands    &gt; I finally fixed the damn slashcommand system, it should work now    - Parsing    &gt; The resolving, fetching and pulling from the cache methods should all work    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.0.1&lt;/summary&gt;        ## **Fixed**    - small project issues    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;3.0.0&lt;/summary&gt;    ## **Added**    - context commands    &gt; Context commands are now available    ## **Changed**    - Project name    &gt; The project's name was changed from `discord-message-components` to `discord-ui`    - ``Extension`` is now ``UI``    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;2.1.0&lt;/summary&gt;    ## **Added**    - Webhook support    &gt; You are now able to use webhooks together with message components, to send a webhook message with the components, use the `Components.send_webhook` function.    &gt; The standart webhook function is also overriden with the new component function    - Float type    &gt; You can now use `float` as the argument type for a slash command option    - Auto empty names    &gt; Buttons, LinkButtons and SelectOptions labels are now by default `\u200b`, which is an &quot;empty&quot; char     ## **Changed**    - Code documentation to more be more informative    ## **Fixed**    - Fixed small code issues (they were already fixed in previous versions, but I just wanna list this here)    - Docs are now working    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;2.0.2&lt;/summary&gt;    ## **Fixed**    - SelectOption    &gt; Select option threw an exception if it was smaller than 1 or higher than 100    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;2.0.0&lt;/summary&gt;        ## **Added**    - Slashcomamnd support        - `Slash` class for slash commands        - `Slash.command`, `Slash.subcommand` and `Slash.subcommand_groups` are available for creating slash commands        - `SlashedCommand` and `SlashedSubCommand` are there for used slash commands         - ``Message``        - disable_action_row(row_numbers: `int` | `range`, disable: `bool`)        &gt; disables (enables) component row(s) in the message                - disable_components(disable: `bool`)        &gt; disables (enables) all componentss        - overrides        - `Messageable.send` returns Message instead of discord.Message and takes components parameter        - `override_client` function added        - `interaction.send`, creates followup messages which can be hidden        - `Component.listening_component`    &gt; A listening component with a callback function that will always be executed whenever a component with the specified custom_id     was used    ## **Changed**    - Message                - All Message objects don't use the client object anymore        - Message.wait_for now needs the client as the first parameter    ## **Fixed**    - Interaction    &gt; All interaction responses work now    - A lot of issues I fogorüíÄ    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;1.2.2&lt;/summary&gt;    ## **Fixed**    - Docs fixed    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;1.2.1&lt;/summary&gt;    ## **Fixed**    - Small code fixes    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;1.2.0&lt;/summary&gt;    ## **Added**    - Complete message component suppport    - Select menus    - [documentation](https://discord-ui.readthedocs.io/en/latest/)        &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;1.1.2&lt;/summary&gt;    ## **Fixed**    - Small code fixes    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;1.1.1&lt;/summary&gt;    ## **Added**    - Message.edit()        &gt; You can now edit messages with button support    &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;1.1.0&lt;/summary&gt;    ## **Changed**    - Major changes to request code, now using the client's request    - `ResponseMessage.acknowledge()` -&gt; `ResponseMessage.defer()`        &gt; Changed the name of the function + changed `ResponseMessage.acknowledged` -&gt; `ResponseMessage.deferred`    - `ResponseMessage.defer()` =&gt; `await ResponseMessage.defer()`        &gt; `defer` (`acknowledge`) is now async and needs to be awaited    ## **Added**        - hidden responses        &gt; You can now send responses only visible to the user        ## **Fixed**        - `ResponseMessage.respond()`        &gt; Now doesn't show a failed interaction     &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;1.0.5&lt;/summary&gt;        ## **Fixed**    - `ResponseMessage.respond()`        &gt; responding now doesn't fail after sending the message, it will now defer the interaction by it self if not already deferred and then send the message-   &lt;details&gt;    &lt;summary&gt;1.0.4&lt;/summary&gt;        ## **Added**    - `ResponseMessage.acknowledged`        &gt; Whether the message was acknowledged with the `ResponseMessage.acknowledged()` function    ## **Changed**    - `ResponseMessage.respond()` =&gt; `await ResponseMessage.respond()`        &gt; respond() function is now async and needs to be awaited    - `ResponseMessage.respond() -&gt; None` =&gt; `ResponseMessage.respond() -&gt; Message or None`        &gt; respond() now returns the sent message or None if ninja_mode is true     &lt;/details&gt;-   &lt;details&gt;    &lt;summary&gt;1.0.3&lt;/summary&gt;    ## **Added**    - `Button.hash`        &gt; Buttons have now a custom hash property, generated by the discord api         &lt;/details&gt;</longdescription>
</pkgmetadata>