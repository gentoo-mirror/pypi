<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># prefect-airbyte&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/prefect-airbyte/&quot; alt=&quot;PyPI version&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/prefect-airbyte?color=0052FF&amp;labelColor=090422&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/PrefectHQ/prefect-airbyte/&quot; alt=&quot;Stars&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/stars/PrefectHQ/prefect-airbyte?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/badge/prefect-airbyte/&quot; alt=&quot;Downloads&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/dm/prefect-airbyte?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/PrefectHQ/prefect-airbyte/pulse&quot; alt=&quot;Activity&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/PrefectHQ/prefect-airbyte?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;https://prefect-community.slack.com&quot; alt=&quot;Slack&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/slack-join_community-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=slack&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://discourse.prefect.io/&quot; alt=&quot;Discourse&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=discourse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;## Welcome!`prefect-airbyte` is a collection of prebuilt Prefect tasks and flows that can be used to quickly construct Prefect flows to interact with [Airbyte](https://airbyte.io/).## Getting Started### Python setupRequires an installation of Python 3.7+We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).### Airbyte setupSee [the airbyte documention](https://docs.airbyte.com/deploying-airbyte) on how to get your own instance.### InstallationInstall `prefect-airbyte````bashpip install prefect-airbyte```A list of available blocks in `prefect-airbyte` and their setup instructions can be found [here](https://PrefectHQ.github.io/prefect-airbyte/#blocks-catalog).### Examples#### Create an `AirbyteServer` block and save it```pythonfrom prefect_airbyte.server import AirbyteServer# running airbyte locally at http://localhost:8000 with default authlocal_airbyte_server = AirbyteServer()# running airbyte remotely at http://&lt;someIP&gt;:&lt;somePort&gt; as user `Marvin`remote_airbyte_server = AirbyteServer(    username=&quot;Marvin&quot;,    password=&quot;DontPanic42&quot;,    server_host=&quot;42.42.42.42&quot;,    server_port=&quot;4242&quot;)local_airbyte_server.save(&quot;my-local-airbyte-server&quot;)remote_airbyte_server.save(&quot;my-remote-airbyte-server&quot;)```#### Trigger a defined connection sync```pythonfrom prefect import flowfrom prefect_airbyte.server import AirbyteServerfrom prefect_airbyte.connections import AirbyteConnectionfrom prefect_airbyte.flows import run_connection_syncserver = AirbyteServer(server_host=&quot;localhost&quot;, server_port=8000)connection = AirbyteConnection(    airbyte_server=server,    connection_id=&quot;e1b2078f-882a-4f50-9942-cfe34b2d825b&quot;,    status_updates=True,)@flowdef airbyte_syncs():    # do some setup    sync_result = run_connection_sync(        airbyte_connection=connection,    )    # do some other things, like trigger DBT based on number of records synced    print(f'Number of Records Synced: {sync_result.records_synced}')``````console‚ùØ python airbyte_syncs.py03:46:03 | prefect.engine - Created flow run 'thick-seahorse' for flow 'example_trigger_sync_flow'03:46:03 | Flow run 'thick-seahorse' - Using task runner 'ConcurrentTaskRunner'03:46:03 | Flow run 'thick-seahorse' - Created task run 'trigger_sync-35f0e9c2-0' for task 'trigger_sync'03:46:03 | prefect - trigger airbyte connection: e1b2078f-882a-4f50-9942-cfe34b2d825b, poll interval 3 seconds03:46:03 | prefect - pending03:46:06 | prefect - running03:46:09 | prefect - running03:46:12 | prefect - running03:46:16 | prefect - running03:46:19 | prefect - running03:46:22 | prefect - Job 26 succeeded.03:46:22 | Task run 'trigger_sync-35f0e9c2-0' - Finished in state Completed(None)03:46:22 | Flow run 'thick-seahorse' - Finished in state Completed('All states completed.')```#### Export an Airbyte instance's configuration**NOTE**: The API endpoint corresponding to this task is no longer supported by open-source Airbyte versions as of v0.40.7. Check out the [Octavia CLI docs](https://github.com/airbytehq/airbyte/tree/master/octavia-cli) for more info.```pythonimport gzipfrom prefect import flow, taskfrom prefect_airbyte.configuration import export_configurationfrom prefect_airbyte.server import AirbyteServer@taskdef zip_and_write_somewhere(      airbyte_config: bytearray,      somewhere: str,):    with gzip.open(somewhere, 'wb') as f:        f.write(airbyte_config)@flowdef example_export_configuration_flow(filepath: str):    # Run other tasks and subflows here    airbyte_config = export_configuration(        airbyte_server=AirbyteServer.load(&quot;my-airbyte-server-block&quot;)    )    zip_and_write_somewhere(        somewhere=filepath,        airbyte_config=airbyte_config    )if __name__ == &quot;__main__&quot;:    example_export_configuration_flow('*://**/my_destination.gz')```#### Use `with_options` to customize options on any existing task or flow```pythonfrom prefect import flowfrom prefect_airbyte.connections import AirbyteConnectionfrom prefect_airbyte.flows import run_connection_synccustom_run_connection_sync = run_connection_sync.with_options(    name=&quot;Custom Airbyte Sync Flow&quot;,    retries=2,    retry_delay_seconds=10,)  @flow def some_airbyte_flow():    custom_run_connection_sync(        airbyte_connection=AirbyteConnection.load(&quot;my-airbyte-connection-block&quot;)    )  some_airbyte_flow()```For more tips on how to use tasks and flows in a Collection, check out [Using Collections](https://orion-docs.prefect.io/collections/usage/)!## ResourcesIf you encounter and bugs while using `prefect-airbyte`, feel free to open an issue in the [prefect-airbyte](https://github.com/PrefectHQ/prefect-airbyte) repository.If you have any questions or issues while using `prefect-airbyte`, you can find help in either the [Prefect Discourse forum](https://discourse.prefect.io/) or the [Prefect Slack community](https://prefect.io/slack)Feel free to star or watch [`prefect-airbyte`](https://github.com/PrefectHQ/prefect-airbyte) for updates too!## ContributeIf you'd like to help contribute to fix an issue or add a feature to `prefect-airbyte`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork). ### Contribution Steps:1. [Fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)2. [Clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)3. Install the repository and its dependencies:```pip install -e &quot;.[dev]&quot;```4. Make desired changes.5. Add tests.6. Insert an entry to [CHANGELOG.md](https://github.com/PrefectHQ/prefect-airbyte/blob/main/CHANGELOG.md)7. Install `pre-commit` to perform quality checks prior to commit:``` pre-commit install ```8. `git commit`, `git push`, and create a pull request.</longdescription>
</pkgmetadata>