<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SoundSwallower: an even smaller speech recognizer=================================================&gt; &quot;Time and change have a voice; eternity is silent. The human ear is&gt; always searching for one or the other.&quot;&lt;br&gt;&gt; Leena Krohn, *Datura, or a delusion we all see*SoundSwallower is a very small and simple speech recognizer intendedprimarily for embedding in web applications.  The goal is not toprovide a fast implementation of large-vocabulary continuous speechrecognition, but rather to provide a *small* implementation of simple,useful speech technologies.With that in mind the current version is limited to finite-stategrammar recognition.  In addition, the eternally problematic andbadly-designed audio library as well as (almost) all other externaldependencies have been removed.Compiling SoundSwallower========================Currently SoundSwallower can be built in several different ways. Tobuild the C library, run CMake in the standard way:    cmake -S . -B build    cmake --build build    cmake --build build --target check    sudo cmake --build --target installNote that this isn't terribly useful as there is no command-linefrontend, and shared libraries are not built by default (pass`-DBUILD_SHARED_LIBS=ON` if you insist).  You probably want to targetJavaScript or Python.Installing the Python module and CLI------------------------------------The SoundSwallower command-line is a Python module(soundswallower.cli) and can be installed using `pip`.  It is highlyrecommended to do this in a `virtualenv`.  You can simply install itfrom PyPI:    pip install soundswallowerOr compile from source:    pip install .For development, you can install it in-place, but please make sure toremove any existing global installation:    pip uninstall soundswallower    pip install -e .The command-line supports JSGF grammars and word-level forcealignment for one or more input files, for example:    soundswallower --align tests/data/goforward.txt tests/data/goforward.wav    soundswallower --align-text &quot;go forward ten meters&quot; tests/data/goforward.wav    soundswallower --grammar tests/data/goforward.gram tests/data/goforward.wavNote that multiple input files are not particularly useful for`--align` or `--align-text` as they will simply (try to) align thesame text to each file.  The output results (a list of time-alignedwords) can be written to a JSON file with `--output`.  To obtainphoneme-level alignments, add the `--phone-align` flag.  The JSONformat (which has recently changed) is the same as used in[PocketSphinx 5.0](https://github.com/cmusphinx/pocketsphinx) and ismore compact than it is readable, but briefly, it consists of onedictionary (or &quot;object&quot; in JavaScript-ese) per line, where the `t`attribute is the recognized text and the `w` attribute contains a listof word segmentations, with start time in `b` and duration in `d` and,optionally, a list of phone segmentations in the `w` attribute withthe same format.See also the [full documentation of the PythonAPI](https://soundswallower.readthedocs.io/en/latest/soundswallower.html).Compiling to JavaScript/WebAssembly-----------------------------------To use the JavaScript library in your projects:    npm install soundswallowerTo build the JavaScript library, use CMake with[Emscripten](https://emscripten.org/):    emcmake cmake -S . -B jsbuild    cmake --build jsbuildThis will create `soundswallower.js` and `soundswallower.wasm` in the`jsbuild` directory, which you can then include in your projects.  Youcan also use `npm link` to link it to your `node_modules` folder fordevelopment Demo applications can be seen athttps://github.com/dhdaines/alignment-demo andhttps://github.com/dhdaines/soundswallower-demo.To run the JavaScript tests:    cd jsbuild    npm install    npm test    npx tsc    node test_typescript.jsAnd in the browser:    cd jsbuild    python server.py    # Navigate to http://localhost:8000/test_web.htmlFor more details on the JavaScript implementation and API, see[js/README.js](https://github.com/ReadAlongs/SoundSwallower/blob/master/js/README.md).See also the [documentation of the JavaScriptAPI](https://soundswallower.readthedocs.io/en/latest/soundswallower.js.html).Creating binary distributions for Python========================================To build the Python extension, I suggest using `build`, as it willensure that everything is done in a totally clean environment.  Runthis from the top-level directory    python -m buildIn all cases the resulting binary wheel (found in `dist`) isself-contained and should not need any other components aside from thesystem libraries.  To create wheels that are compatible with multipleLinux distributions, see the instructions in[README.manylinux.md](https://github.com/ReadAlongs/SoundSwallower/blob/master/README.manylinux.md).Compiling on Windows in Visual Studio Code==========================================The method for building distributions noted above will also work onWindows, from within a Conda environment, provided you have VisualStudio or the Visual Studio Build Tools installed.  This is somewhatmagic.If you don't have Conda, then what you will need to do is:- Install Visual Studio build tools.  Unfortunately, a direct link  does not seem to exist, but you can find them under [Microsoft's  downloads page](https://visualstudio.microsoft.com/downloads/). The  2019 version is probably the optimal one to use as it is compatible  with all recent versions of Windows.- Install the version of Python you wish to use.- Launch the Visual Studio command-line prompt from the Start menu.  Note that if your Python is 64-bit (recommended), you must be sure  to launch the &quot;x64 Native Command Line Prompt&quot;.- Create and activate a virtual environment using your Python binary,  which may or may not be in your AppData directory:        %USERPROFILE%\AppData\Local\Programs\Python\Python310\python -m venv py310        py310\scripts\activate- now you can build wheels with pip, using the same method mentioned above.Authors-------SoundSwallower is based on PocketSphinx, which is based on Sphinx-II,which is based on Sphinx, which is based on Harpy, and so on, and soon, back to somewhere around the Unix Epoch.  Thanks to Kevin Lenzofor releasing CMU Sphinx under a BSD license and making this possible,and Ravishankar Mosur who actually wrote most of the decoder.  Manyothers also contributed along the way, take a look at [the AUTHORSfile inPocketSphinx](https://github.com/cmusphinx/pocketsphinx/blob/master/AUTHORS)for an idea.This document and SoundSwallower are now being developed by DavidHuggins-Daines.</longdescription>
</pkgmetadata>