<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FastAPI CSRF Protect[![Build Status](https://travis-ci.com/aekasitt/fastapi-csrf-protect.svg?branch=master)](https://app.travis-ci.com/github/aekasitt/fastapi-csrf-protect)[![Package Vesion](https://img.shields.io/pypi/v/fastapi-csrf-protect)](https://pypi.org/project/fastapi-csrf-protect)[![Format](https://img.shields.io/pypi/format/fastapi-csrf-protect)](https://pypi.org/project/fastapi-csrf-protect)[![Python Version](https://img.shields.io/pypi/pyversions/fastapi-csrf-protect)](https://pypi.org/project/fastapi-csrf-protect)[![License](https://img.shields.io/pypi/l/fastapi-csrf-protect)](https://pypi.org/project/fastapi-csrf-protect)## FeaturesFastAPI extension that provides stateless Cross-Site Request Forgery (XSRF) Protection support.Aimed to be easy to use and lightweight, we adopt [Double Submit Cookie](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie) mitigation pattern.If you were familiar with `flask-wtf` library this extension suitable for you.This extension inspired by `fastapi-jwt-auth` ðŸ˜€- Storing `fastapi-csrf-token` in cookies or serve it in template's context## InstallationThe easiest way to start working with this extension with pip```bashpip install fastapi-csrf-protect# orpoetry add fastapi-csrf-protect```## Getting StartedThe following examples show you how to integrate this extension to a FastAPI App### Example Login Form```pythonfrom fastapi import FastAPI, Request, Dependsfrom fastapi.responses import JSONResponsefrom fastapi.templating import Jinja2Templatesfrom fastapi_csrf_protect import CsrfProtectfrom fastapi_csrf_protect.exceptions import CsrfProtectErrorfrom pydantic import BaseModelapp = FastAPI()templates = Jinja2Templates(directory=&quot;templates&quot;)class CsrfSettings(BaseModel):  secret_key: str = &quot;asecrettoeverybody&quot;  cookie_samesite: str = &quot;none&quot;@CsrfProtect.load_configdef get_csrf_config():  return CsrfSettings()@app.get(&quot;/login&quot;)def form(request: Request, csrf_protect: CsrfProtect = Depends()):  &quot;&quot;&quot;  Returns form template.  &quot;&quot;&quot;  csrf_token, signed_token = csrf_protect.generate_csrf_tokens()  response = templates.TemplateResponse(    &quot;form.html&quot;, {&quot;request&quot;: request, &quot;csrf_token&quot;: csrf_token}  )  csrf_protect.set_csrf_cookie(signed_token, response)  return response@app.post(&quot;/login&quot;, response_class=JSONResponse)async def create_post(request: Request, csrf_protect: CsrfProtect = Depends()):  &quot;&quot;&quot;  Creates a new Post  &quot;&quot;&quot;  await csrf_protect.validate_csrf(request)  response: JSONResponse = JSONResponse(status_code=200, content={&quot;detail&quot;: &quot;OK&quot;})  csrf_protect.unset_csrf_cookie(response)  # prevent token reuse  return response@app.exception_handler(CsrfProtectError)def csrf_protect_exception_handler(request: Request, exc: CsrfProtectError):  return JSONResponse(status_code=exc.status_code, content={&quot;detail&quot;: exc.message})```## ContributionsTo contribute to the project, fork the repository and clone to your local device and install preferred testing dependency [pytest](https://github.com/pytest-dev/pytest)Alternatively, run the following command on your terminal to do so:```bashpip install -U poetrypoetry install```Testing can be done by the following command post-installation:```bashpoetry install --with testpytest```## Changelog### ðŸš§ Breaking Changes (0.3.0 -&gt; 0.3.1) The double submit update* The `generate_csrf` method has now been marked for deprecation* The recommended method is now `generate_csrf_tokens` which returns a tuple of tokens, first unsigned  and the latter signed* Recommended pattern is for the first token is aimed for returning as part of context* Recommended pattern is for the signed token to be set in client's cookie completing [Double Submit Cookie](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie)* To prevent token reuse, protected endpoint can unset the signed CSRF Token in client's cookies as  per example code and recommended pattern.### ðŸš§ Breaking Changes (0.3.1 -&gt; 0.3.2) The anti-JavaScript update* New keys are added at setup `token_location` (either `body` or `header`) and `token_key` is key  where form-encoded keeps the csrf token stored, cross-checked with csrf secret in cookies.* Asynchronous `validate_csrf` method now needs to be awaited therefore protected endpoints need to  be asynchronous as well.### Run ExamplesTo run the provided examples, first you must install extra dependencies [uvicorn](https://github.com/encode/uvicorn) and [jinja2](https://github.com/pallets/jinja/)Alternatively, run the following command on your terminal to do so```bashpoetry install --with examples```Running the example utilizing form submission```bashuvicorn examples.body:app```Running the example utilizing headers via JavaScript```bashuvicorn examples.header:app```## LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>