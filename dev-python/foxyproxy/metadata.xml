<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CloudFoxy - FoxyProxyThis proxy connects clients implementing simple TCP requests with the CloudFoxy RESTful API. You can send any support request via GitLab issues or open a support ticket at[https://keychest.freshdesk.com](https://keychest.freshdesk.com/support/tickets/new)## External dependenciessudo yum install gcc libffi-devel python-devel openssl-devel## Install### Install the application`pip install foxyproxy`or `pip install --upgrade --no-cache-dir foxyproxy`and create folder `/opt/cloudfoxy`, where we can store or related files and data### Install supervisor for automatic restarts`pip install supervisor``mkdir -p /etc/supervisord/conf.d``echo_supervisord_conf &gt; /etc/supervisord/supervisord.conf``echo [include] &gt;&gt; /etc/supervisord/supervisord.conf``echo &quot;files = conf.d/*.conf&quot; &gt;&gt; /etc/supervisord/supervisord.conf``nano /etc/supervisord/supervisord.conf`find a line with _inet_http_server_ and uncomment it (the section name), and thefirst line, which is something like &quot;port=127.0.0.1:9001&quot;`systemctl start supervisord``systemctl enable supervisord`   # auto restart after reboot`nano /etc/supervisord/conf.d/foryproxy.conf`and fill it with the following contents```[program:foxyproxy]directory=/opt/cloudfoxycommand=foxyproxy -s http://127.0.0.1:8081 -c icauser=rootautostart=trueautorestart=truestderr_logfile=/var/log/foxyproxy.logstdout_logfile=/var/log/foxyproxy.log```You can adjust parameters as required.Restart the supervisor:`systemctl restart supervisord``supervisorctl` - is a client, which shows status of processes - it has commands like: - start &lt;name&gt; - stop &lt;name&gt; - restart &lt;name&gt; - reread  # reads configuration files and shows changes - reload  # loads the new configuration to use for future commands ## TCP InterfaceThe TCP interface of the proxy starts listening on port 4001. The port can be adjusted with a command line parameter `-p&lt;port&gt;`. Similarly, the address of the RESTful server can be set with the `-s&lt;url:port&gt;`.TCP clients can send multiple commands over a period of time as the server keeps connections opened until its clients close them.Each request consists of at least 2 lines:  - card reader identification  - one or more commands - each in a separate line*Example 1 - abstrakt*```&gt;&lt;card reader name&gt;&quot;|&quot;&gt;&lt;cmd ID1&gt;:&lt;command1&gt;:&lt;data&gt;:&lt;object&gt;&quot;|&quot;&gt;&lt;cmd ID2&gt;:&lt;command2&gt;:&lt;data&gt;:object&quot;|&quot;&lt;empty line&gt;```*with a subsequent response to this request:*```&lt;cmd ID1&gt;:&lt;response 1&gt;&lt;cmd ID2&gt;:&lt;response 2&gt;@@```*Example 2*```&gt;OMNIKEY AG 3121 USB|&gt;1:RESET|&gt;2:APDU|00 A4 00 0C 02 3F 00|&lt;empty line&gt;```*with a subsequent response*```1:6F048400A50090002:9000@@```*Example 3*```&gt;*|&gt;1:ENUM|12&lt;empty line&gt;```The first line creates a regular expression for selecting a set of card readers,the optional numerical parameter of the ENUM command limits the number of terminalsreturned to the client.*with a subsequent response*```1:&lt;base64 string of terminal names separated with &quot;|&quot;&gt;```## TCP CommandsThere are currently four commands implemented for the TCP interface: - RESET - reset a particular smartcard - EMPTYLINE - a helper command that will make the proxy wait for an empty new line to finish listening to the client - APDU - send a command according to ISO7816 specifications - ENUM - return a list of smart-card readers with valid signing certificates - names of readers are base64           encoded, separated with &quot;|&quot; - LIST - return a list of all smart-card readers - names of readers are base64 encoded, separated with &quot;|&quot; - ALIASES - return a list of names from certificates in connected smartcards,          names are base64 encoded as they may         contain utf-8 characters; names are separated with &quot;|&quot; - CHAIN - return certificate chain for a particular alias - SIGN - request a signature from a particular smartcardThe first three are low-level commands, either directly sent to smartcards, orjust return a list of smartcard names. The ALIASES, CHAIN andSIGN are abstract commands tailored to particular smartcards - eIDAS smartcardssold by [http://ica.cz](I.CA - a Czech company). They show how the API can beextended, although the CloudFoxy RESTful API also allows definitions of abstractcommands via protocols defines with a simple JSON notation.## CloudFoxy SmartcardsCloudFoxy can interface smartcards connected via USB ports - as shown in theexample above, butthe primary reason why we built it was to provide a convenientinterface to the CloudFoxy hardware platform, which can host up to 120 smartcards.The CloudFoxy RESTful server can connect to a multiple of them and provide accessto thousands of smartcards.The CloudFoxy smartcards have the following name format:```&quot;CloudFoxy &quot; | &lt;IP address&gt; | &quot;@&quot; | &lt;id&gt; - example &quot;CloudFoxy 192.168.42.10@120&quot;```which is an enriched format of a geeky `/&lt;IP address&gt; |&quot;@&quot;|&lt;id&gt;`, e.g., `/192.168.42.10@120`## End-to-End Dataflow ExampleWhile a detailed description of the CloudFoxy RESTful API can be found[here](https://gitlab.com/cloudfoxy/RESTfulFoxy), it makes sense to demonstrate thewhole dataflow, which compromises:1. your application / telnet / script / APDUPlay (a Windows PC/SC library)2. foxyproxy3. CloudFoxy server### Request#### Client -&gt; foxyproxy```&gt;CloudFoxy 192.168.42.10@12|&gt;2342:RESET|&gt;2343:APDU:00A4040008A00000000300000000|&lt;empty line&gt;```#### foxyproxy -&gt; CloudFoxy RESTfulAssuming the RESTful API is running at the *http://restful.cloudfoxy.com:8081*address.`http://restful.cloudfoxy.com:8081/api/v1/basic?reset=1&amp;terminal=%2F192.168.42.10%4012``http://restful.cloudfoxy.com:8081/api/v1/basic?apdu=00A4040008A00000000300000000&amp;terminal=%2F192.168.42.10%4012`*Note: each request to the RESTful API has to hav an X-Auth-Token header. The secretsare defined in the configuration of each CloudFoxy RESTful server.### ResponseCloudFoxy RESTful returns a response to each of the GET requests, which will bea simple text response if the `/api/v1/basic` endpoint is used.#### CloudFoxy RESTful -&gt; foxyproxyThere are two requests above, they may provide separate responses, which look like: - response 1: `6F048400A5009000` - response 2: `9000`#### foxyproxy -&gt; clientTCP proxy will combine the responses and send all in one message back to the client:```2342:6F048400A50090002343:9000```### CloudFoxy RESTful - Other EndpointsThis is a side note about other options for using CloudFoxy RESTful. If you use</longdescription>
</pkgmetadata>