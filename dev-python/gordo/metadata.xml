<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;Gordo&lt;/h1&gt;&lt;div align=&quot;center&quot;&gt; &lt;!-- Uncomment line below once we decided on 'logo.png' --&gt; &lt;!--&lt;img align=&quot;center&quot; src=&quot;logo.png&quot; width=&quot;250&quot; height=&quot;250&quot;&gt;--&gt; &lt;br /&gt; &lt;strong&gt;   Building thousands of models with timeseries data to monitor systems. &lt;/strong&gt;&lt;/div&gt;&lt;br /&gt;&lt;div align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/equinor/gordo/actions?query=branch=master&quot;&gt;    &lt;img src=&quot;https://github.com/equinor/gordo/workflows/CI/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;/&gt;  &lt;/a&gt;&lt;/div&gt;---## AboutGordo fulfills the role of inhaling config files and supplying components to the pipeline of:1. Fetching data2. Training model3. Serving model## Components* [gordo-controller](https://github.com/equinor/gordo-controller/) - Kubernetes controller for the Gordo CRDs.* [gordo-core](https://github.com/equinor/gordo-core/) - Gordo core library.* [gordo-client](https://github.com/equinor/gordo-client/) - Gordo server's client. It can make predictions from deployed models.[Documentation is available on Read the Docs](https://gordo1.readthedocs.io/)---## Install[gordo-helm](https://github.com/equinor/gordo-helm) - you can use [gordo](https://github.com/equinor/gordo-helm/tree/main/charts/gordo) helm chart from this repository to deploy gordo infrastructure to your Kubernetes cluster. ### Python package `pip install --upgrade gordo`  With additional extras:`pip install gordo[postgres,mlflow]`  Bleeding edge:  `pip install git+https://github.com/equinor/gordo.git`## Developer manualThis section will explain how to start development of Gordo.### SetupCreate and activate a virtual environment first. As a default option, it can be [venv](https://docs.python.org/3/library/venv.html) module.Install pip-tools```pip install --upgrade pippip install --upgrade pip-tools```Install requirements```pip install -r requirements/full_requirements.txtpip install -r requirements/test_requirements.txt```Install package:```python3 setup.py install```#### How to update packagesNote: you have to install `pip-tools` version higher then `6` for requirements to have same multi-line output format.To update some package in `full_requirements.txt`:- Change its version in `requirements.in` file;- Compile and upgrade requirements:```shellpip-compile --upgrade --output-file=full_requirements.txt mlflow_requirements.in postgres_requirements.in requirements.in  ```### ExamplesSee our [example](./examples) notebooks for how to develop with `gordo` locally.### How to run tests locallyList of commands to run tests can be found [here](/setup.cfg).Running of tests takes some time, so it's faster to run tests in parallel:```pytest -n auto -m 'not dockertest' --ignore benchmarks```Run docker-related tests:```pytest -m 'dockertest'```&gt; **_NOTE:_**  To run tests it's required for your system to has (note: commands might differ from your OS):&gt; - Running docker daemon.&gt; - Available 5432 port for `postgres` container.&gt; **_NOTE:_** this example is for Pycharm IDE to use `breakpoints` in the code of the tests.  &gt; On the configuration setup for test running add to `Additional arguments:` in `pytest` &gt; section following string: `--ignore benchmarks --cov-report= --no-cov ` ### Build the documentationThis command will run the local documentation server:```console&gt; cd docs/&gt; make watch```</longdescription>
</pkgmetadata>