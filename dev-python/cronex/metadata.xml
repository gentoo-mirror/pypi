<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>CronExpression==============This module provides an easy to use interface for cron-like taskscheduling. The cron expression evaluation implemented by this libraryis 100% Vixie Cron compatible and also supports `JavaQuartz's &lt;http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger&gt;`__non-standard &quot;L&quot;, &quot;W&quot; and &quot;#&quot; characters.One other useful feature this library provides is the ability to settriggers at arbitrary intervals such as every 9 hours, every 11 minutes,etc., without the issues caused by using asterisk-slash notation; using``*/9`` in the hours field of most cron implementations would result ina trigger firing at 9:XX AM at 6:XX PM each day, but withCronExpresssions, the trigger would fire at 9:XX AM, 6:XX PM then, onthe following day 3:XX AM, 12:XX PM, 9:XX PM and so.Examples--------Standard Cron Fields~~~~~~~~~~~~~~~~~~~~This example shows basic instantiation of a CronExpression and how tocheck to see if a trigger should fire at a given time. The time tuplesconsist of the year, month, date, hour and minute in that order.::    &gt;&gt;&gt; job = CronExpression(&quot;0 0 * * 1-5/2 find /var/log -delete&quot;)    &gt;&gt;&gt; job.check_trigger((2010, 11, 17, 0, 0))    True    &gt;&gt;&gt; job.check_trigger((2012, 12, 21, 0 , 0))    FalsePeriodic Trigger~~~~~~~~~~~~~~~~This trigger is a reminder to feed the kitten every 9 hours startingfrom May 1st, 2010 at 7 AM, GMT -6:00.::    &gt;&gt;&gt; job = CronExpression(&quot;0 %9 * * * Feed kitten&quot;, (2010, 5, 1, 7, 0, -6))    &gt;&gt;&gt; job.comment    &quot;Feed kitten&quot;    &gt;&gt;&gt; job.check_trigger((2010, 5, 1, 7, 0), utc_offset=-6)    True    &gt;&gt;&gt; job.check_trigger((2010, 5, 1, 16, 0), utc_offset=-6)    True    &gt;&gt;&gt; job.check_trigger((2010, 5, 2, 1, 0), utc_offset=-6)    TrueSimple cron scheduler in less than ten lines~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~With CronExpressions, a very basic task scheduler can be created withonly a handful of lines.::    import time    import os    import cronex    while True:        for line in open(&quot;crontab&quot;):            job = cronex.CronExpression(line.strip())            if job.check_trigger(time.gmtime(time.time())[:5]):                os.system(&quot;(&quot; + job.comment + &quot;) &amp; disown&quot;)        time.sleep(60)Expression Syntax-----------------Readers that are already familiar with cron should skip down to thesection titled *Repeaters*. Aside from the repeaters, the only othernotable difference in this implementation of cron expression evaluationfrom Vixie Cron's is that ranges wrap around: 22-2 in the hours field isthe same as ``22,23,0,1,2``. Everything else is standard``man 5 crontab``.Each cron trigger is specified with a combination of five white-spaceseparated fields that dictate when the event should occur. In order thefields specify trigger times for minutes past the hour, hour of the day,day of the month, month, and day of the week.::    .--------------- minute (0 - 59)    |   .------------ hour (0 - 23)    |   |   .--------- day of month (1 - 31)    |   |   |   .------ month (1 - 12) or Jan, Feb ... Dec    |   |   |   |  .---- day of week (0 - 6) or Sun(0 or 7), Mon(1) ... Sat(6)    V   V   V   V  V    *   *   *   *  *  command to be executed / trigger commentThere are four ways of specifying valid values for each field, all ofwhich can be combined with each other using commas. There are ranges,wild-cards, steps, and repeaters. Repeaters are a non-standard additionto cron expressions that allow specification of events with arbitraryperiods.If the hour, minute, and month of a given time period are valid valuesas specified in the trigger and *either* the day of the month *or* theday of the week is a valid value, the trigger fires.Ranges and Wild-cards~~~~~~~~~~~~~~~~~~~~~Ranges specify a starting and ending time period. It includes all valuesfrom the starting value to and including the ending value.Wild-cards, indicated with a &quot;\*&quot;, in a field represents all validvalues. It is *almost* the same as specifying the range 0-59 in theminutes field, 0-23 in the hours, 1-31 in days, 1-12 in months and 0-6for weekdays.The following cron expression is triggered every day at noon from Junethrough September:::    0 12 * 6-9 * * remind &quot;Walk the ducks&quot;If the day of the week field is a wild card, but the day of the month isan explicit range, the day of the week will be ignored and the triggerwill only be activated on the specified days of the month. If the day ofthe month is a wild card, the same principal applies.This expression is triggered every week day at 4:00 PM: ``0 16 * * 1-5``This one is triggered the first nine days of the month: ``0 16 1-9 * *``This one is triggered every day for the first week, but only onSaturdays thereafter: ``0 16 1-7 * 6``Steps~~~~~Steps are specified with a &quot;/&quot; and number following a range orwild-card. When iterating through a range with a step, the specifiednumber of values will be skipped each time. ``1-10/2`` is the functionalequivalent to ``1,3,5,7,9``.The following cron expression is triggered on the first day of everyquarter (Jan., Apr., ... Oct.) at midnight:::    0 0 1 */2 * * delete log.txtRepeaters~~~~~~~~~Repeaters cause an event to trigger after arbitrary periods of time froma given moment which will be hitherto referred to as the epoch. Bydefault, the epoch is January 1st, 1970 at 0:00. Triggers in differentfields operate independently of each other: ``%10 %10 * * *`` wouldtrigger at 00:00, 00:10, ... 00:50, 10:00, 10:10, etc...The following cron expression is triggered at noon on the 10th every 5months:::    0 12 10 %5 * Something amazing happens at noon...Special Symbols~~~~~~~~~~~~~~~There are three additional special symbols: &quot;L&quot;, &quot;W&quot; and &quot;#&quot;.When used in the day of the month field, a number followed by &quot;L&quot;represents the occurrence of a day of the week represented by the valuepreceding &quot;L&quot;. In the day of the month field, &quot;L&quot; without a prefixedinteger represents the last day of the month. ``0 0 * * 5L`` represent amidnight trigger for the last Friday of each month whereas ``0 0 L 2 *``represents a midnight trigger for the last day of every February.&quot;W&quot; is only valid for the field representing days of the month, and mustbe prefixed with an integer. It specifies the weekday (Monday-Friday)nearest the given day. In the construct ``0 0 7W * *``, when the 7thfalls on a Saturday, the trigger will be active on the 6th. If the 7thfalls on a Sunday, the trigger will be active on the 8th.&quot;#&quot; is only valid for the field representing days of the week. The &quot;#&quot;has a prefix and suffix that represent the day of the week and the Nthoccurrence of that day of the week. ``0 0 * * 0#5`` would trigger every5th Sunday.Miscellaneous~~~~~~~~~~~~~All of the constructs above can be combined in individual fields usingcommas: ``0,30 */7,5 1,%90,L 9-4/6,5-8 4#2`` is a completely valid,albeit it hideous, expression.In addition to the atoms above, there are several special strings thatcan substitute common cron expressions. These strings *replace*, notaugment the cron fields.::    String      Equivalent    ------      ----------    @yearly     0 0 1 1 *    @annually   0 0 1 1 *    @monthly    0 0 1 * *    @weekly     0 0 * * 0    @daily      0 0 * * *    @midnight   0 0 * * *    @hourly     0 * * * *</longdescription>
</pkgmetadata>