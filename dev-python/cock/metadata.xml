<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Cock[![Github actions status for master branch](https://github.com/pohmelie/cock/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/pohmelie/cock/actions)[![Codecov coverage for master branch](https://codecov.io/gh/pohmelie/cock/branch/master/graph/badge.svg)](https://codecov.io/gh/pohmelie/cock)[![Pypi version](https://img.shields.io/pypi/v/cock.svg)](https://pypi.org/project/cock/)[![Pypi downloads count](https://img.shields.io/pypi/dm/cock)](https://pypi.org/project/cock/)Cock stands for «**co**nfiguration file with cli**ck**». It is a configuration aggregator, which stands on shiny [`click`](https://github.com/pallets/click) library.# ReasonNo module for click with flat configuration file, which will mimic actual click options. There are [`click-config`](https://pypi.org/project/click-config) and [`click-config-file`](https://pypi.org/project/click-config-file), but they targets another goals.# Features- Aggregate configuration file and cli options into flat configuration object.- Respect all click checks and conversions (`required` attribute forbidden, since it breaks internal logic).- `dict`-like, flat, sorted, dot-accessed configuration object.- Entrypoint builder.# License`cock` is offered under MIT license.# Requirements- python 3.7+# Usage``` pythonfrom cock import build_entrypoint, Config, Optiondef main(config: Config):    print(config)options = [    Option(&quot;a_b_c&quot;, default=&quot;foo&quot;),    Option(&quot;b_c_d&quot;, default=&quot;bar&quot;),]entrypoint = build_entrypoint(main, options, auto_envvar_prefix=&quot;EXAMPLE&quot;, show_default=True)if __name__ == &quot;__main__&quot;:    entrypoint(prog_name=&quot;example&quot;)```This is almost pure click setup:```$ python example.py --helpUsage: example [OPTIONS] [CONFIGURATION_FILE]Options:  --a-b-c TEXT  [default: foo]  --b-c-d TEXT  [default: bar]  --help        Show this message and exit.  [default: False]```But there is a `CONFIGURATION_FILE` argument. Lets see use cases.### All deafults```$ python example.py{'configuration_file': None, 'a_b_c': 'foo', 'b_c_d': 'bar'}```### From environment variable```$ EXAMPLE_A_B_C=foo-env python example.py{'configuration_file': None, 'a_b_c': 'foo-env', 'b_c_d': 'bar'}```### From cli arguments```$ EXAMPLE_A_B_C=foo-env python example.py --a-b-c foo-cli{'a_b_c': 'foo-cli', 'configuration_file': None, 'b_c_d': 'bar'}```### From configuration yaml file``` yamla-b-c: foo-file``````$ EXAMPLE_A_B_C=foo-env python example.py --a-b-c foo-cli config-example.yml{'a_b_c': 'foo-file', 'configuration_file': '/absolute/path/to/config-example.yml', 'b_c_d': 'bar'}```Priority is obvious: **file &gt; cli arguments &gt; env variables****Note**: for file `a-b-c` is the same as `a_b_c` or `a-b_c`. Use whatever you prefer.As described in features paragraph, configuration is flattened before chaining with click options. So all configuration files listed below are equal:``` yamla_b_c: foo-file`````` yamla:  b:    c: foo-file`````` yamla-b:  c: foo-file```If provided file have key crossings:``` yamla-b_c: foo-file1a:  b-c: foo-file2```Then `RuntimeError` will be raised.`cock` uses `pyyaml` library for config loading, so it supports `yaml` and `json` formats, but this can be improved later if someone will need more configuration file types.Configuration can be defined as dictionary too:``` pythonfrom cock import build_entrypoint, Option, Configdef main(config: Config):    print(config)options = {    &quot;a&quot;: {        &quot;b&quot;: {            &quot;c&quot;: Option(default=&quot;foo&quot;),        },    },    &quot;a-b_d&quot;: Option(default=&quot;bar&quot;),}entrypoint = build_entrypoint(main, options, auto_envvar_prefix=&quot;EXAMPLE&quot;, show_default=True)if __name__ == &quot;__main__&quot;:    entrypoint(prog_name=&quot;example&quot;)```**Note**: for dictionaries you can use same rules in naming and structure as for files.Configuration can be defined as multiple sources:``` pythonfrom cock import build_entrypoint, Option, Configdef main(config: Config):    print(config)dict_options = {&quot;a-b-c&quot;: Option(default=&quot;foo&quot;)}list_options = [Option(&quot;b_c-d&quot;, default=&quot;bar&quot;)]entrypoint = build_entrypoint(main, dict_options, list_options,                              auto_envvar_prefix=&quot;EXAMPLE&quot;, show_default=True)if __name__ == &quot;__main__&quot;:    entrypoint(prog_name=&quot;example&quot;)```You can also gather all defaults from options as a `Config`:``` pythonfrom cock import get_options_defaults, Optionoptions = {    &quot;a&quot;: {        &quot;b&quot;: {            &quot;c&quot;: Option(default=&quot;foo&quot;),        },    },}config = get_options_defaults(options)assert config == {&quot;a_b_c&quot;: &quot;foo&quot;}assert config.a_b_c == &quot;foo&quot;````Config` is an extended (with dot-access) version of `sortedcontainers.SortedDict`:``` python&gt;&gt;&gt; from cock import Config&gt;&gt;&gt; c = Config(b=1, a=2)Config({'a': 2, 'b': 1})&gt;&gt;&gt; c[&quot;a&quot;], c.b(2, 1)&gt;&gt;&gt; c.z...KeyError: 'z'&gt;&gt;&gt; c.items()SortedItemsView(Config({'a': 2, 'b': 1}))&gt;&gt;&gt; c[&quot;0&quot;] = 0&gt;&gt;&gt; cConfig({'0': 0, 'a': 2, 'b': 1})```# API``` pythondef build_entrypoint(    main: Callable[[Config], Any],    *options_stack: Union[dict, List[Union[Option, click.option]]],    **context_settings) -&gt; Callable[..., Any]:```- `main` is a user-space function of exactly one argument, a dot-accessed config wrapper.- `*options_stack` is a sequence of dicts and/or lists described above.- `**context_settings` propagated to `click.command` decorator.``` pythondef get_options_defaults(    *options_stack: Union[dict, List[Union[Option, click.option]]]) -&gt; Config:```- `*options_stack` is a sequence of dicts and/or lists described above.``` pythonclass Option(    name: Optional[str] = None,    **attributes)```- `name` is a name in resulting `Config` object, which passed to `main`.    - `name` can be set only once, further set will lead to exception.    - `name` field will be converted to «underscore» view (e.g. `a-b_c` internaly will be converted to `a_b_c`).- `**attributes` propagated to `click.option` decorator.    - `required` attribute forbidden, since it breaks internal logic.# Deprecations and removals### `0.11.0`Deprecations:- Usage of `click.option` as option.- `build_options_from_dict` function, since it is obsolete with new api.</longdescription>
</pkgmetadata>