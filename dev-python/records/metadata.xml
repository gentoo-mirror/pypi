<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Records: SQL for Humans‚Ñ¢========================.. image:: https://img.shields.io/pypi/v/records.svg    :target: https://pypi.python.org/pypi/records.. image:: https://travis-ci.org/kennethreitz/records.svg?branch=master    :target: https://travis-ci.org/kennethreitz/records.. image:: https://img.shields.io/badge/SayThanks.io-‚òº-1EAEDB.svg    :target: https://saythanks.io/to/kennethreitz**Records is a very simple, but powerful, library for making raw SQL queriesto most relational databases.**.. image:: https://farm1.staticflickr.com/569/33085227621_7e8da49b90_k_d.jpgJust write SQL. No bells, no whistles. This common task can besurprisingly difficult with the standard tools available.This library strives to make this workflow as simple as possible,while providing an elegant interface to work with your query results.*Database support includes RedShift, Postgres, MySQL, SQLite, Oracle, and MS-SQL (drivers not included).*----------If you're interested in financially supporting Kenneth Reitz open source, consider `visiting this link &lt;https://cash.me/$KennethReitz&gt;`_. Your support helps tremendously with sustainability of motivation, as Open Source is no longer part of my day job.‚ò§ The Basics------------We know how to write SQL, so let's send some to our database:.. code:: python    import records    db = records.Database('postgres://...')    rows = db.query('select * from active_users')    # or db.query_file('sqls/active-users.sql')Grab one row at a time:.. code:: python    &gt;&gt;&gt; rows[0]    &lt;Record {&quot;username&quot;: &quot;model-t&quot;, &quot;active&quot;: true, &quot;name&quot;: &quot;Henry Ford&quot;, &quot;user_email&quot;: &quot;model-t@gmail.com&quot;, &quot;timezone&quot;: &quot;2016-02-06 22:28:23.894202&quot;}&gt;Or iterate over them:.. code:: python    for r in rows:        print(r.name, r.user_email)Values can be accessed many ways: ``row.user_email``, ``row['user_email']``, or ``row[3]``.Fields with non-alphanumeric characters (like spaces) are also fully supported.Or store a copy of your record collection for later reference:.. code:: python    &gt;&gt;&gt; rows.all()    [&lt;Record {&quot;username&quot;: ...}&gt;, &lt;Record {&quot;username&quot;: ...}&gt;, &lt;Record {&quot;username&quot;: ...}&gt;, ...]If you're only expecting one result:.. code:: python    &gt;&gt;&gt; rows.first()    &lt;Record {&quot;username&quot;: ...}&gt;Other options include ``rows.as_dict()`` and ``rows.as_dict(ordered=True)``.‚ò§ Features----------- Iterated rows are cached for future reference.- ``$DATABASE_URL`` environment variable support.- Convenience ``Database.get_table_names`` method.- Command-line `records` tool for exporting queries.- Safe parameterization: ``Database.query('life=:everything', everything=42)``.- Queries can be passed as strings or filenames, parameters supported.- Transactions: ``t = Database.transaction(); t.commit()``.- Bulk actions: ``Database.bulk_query()`` &amp; ``Databse.bulk_query_file()``.Records is proudly powered by `SQLAlchemy &lt;http://www.sqlalchemy.org&gt;`_and `Tablib &lt;http://docs.python-tablib.org/en/latest/&gt;`_.‚ò§ Data Export Functionality---------------------------Records also features full Tablib integration, and allows you to exportyour results to CSV, XLS, JSON, HTML Tables, YAML, or Pandas DataFrames with a single line of code.Excellent for sharing data with friends, or generating reports... code:: pycon    &gt;&gt;&gt; print(rows.dataset)    username|active|name      |user_email       |timezone    --------|------|----------|-----------------|--------------------------    model-t |True  |Henry Ford|model-t@gmail.com|2016-02-06 22:28:23.894202    ...**Comma Separated Values (CSV)**.. code:: pycon    &gt;&gt;&gt; print(rows.export('csv'))    username,active,name,user_email,timezone    model-t,True,Henry Ford,model-t@gmail.com,2016-02-06 22:28:23.894202    ...**YAML Ain't Markup Language (YAML)**.. code:: python    &gt;&gt;&gt; print(rows.export('yaml'))    - {active: true, name: Henry Ford, timezone: '2016-02-06 22:28:23.894202', user_email: model-t@gmail.com, username: model-t}    ...**JavaScript Object Notation (JSON)**.. code:: python    &gt;&gt;&gt; print(rows.export('json'))    [{&quot;username&quot;: &quot;model-t&quot;, &quot;active&quot;: true, &quot;name&quot;: &quot;Henry Ford&quot;, &quot;user_email&quot;: &quot;model-t@gmail.com&quot;, &quot;timezone&quot;: &quot;2016-02-06 22:28:23.894202&quot;}, ...]**Microsoft Excel (xls, xlsx)**.. code:: python    with open('report.xls', 'wb') as f:        f.write(rows.export('xls'))**Pandas DataFrame**.. code:: python    &gt;&gt;&gt; rows.export('df')        username  active       name        user_email                   timezone    0    model-t    True Henry Ford model-t@gmail.com 2016-02-06 22:28:23.894202You get the point. All other features of Tablib are also available,so you can sort results, add/remove columns/rows, remove duplicates,transpose the table, add separators, slice data by column, and more.See the `Tablib Documentation &lt;http://docs.python-tablib.org/en/latest/&gt;`_for more details.‚ò§ Installation--------------Of course, the recommended installation method is `pipenv &lt;http://pipenv.org&gt;`_::    $ pipenv install records[pandas]    ‚ú®üç∞‚ú®‚ò§ Command-Line Tool-------------------As an added bonus, a ``records`` command-line tool is automaticallyincluded. Here's a screenshot of the usage information:.. image:: http://f.cl.ly/items/0S14231R3p0G3w3A0x2N/Screen%20Shot%202016-02-13%20at%202.43.21%20AM.png   :alt: Screenshot of Records Command-Line Interface.‚ò§ Thank You-----------Thanks for checking this library out! I hope you find it useful.Of course, there's always room for improvement. Feel free to `open an issue &lt;https://github.com/kennethreitz/records/issues&gt;`_ so we can make Records better, stronger, faster.v0.5.1 (09-01-2017)===================- Depend on ``tablib[pandas]``.- Support for Bulk quies: ``Database.bulk_query()`` &amp; ``Database.bulk_query_file()``.v0.5.0 (11-15-2016)===================- Support for transactions: ``t = Database.transaction(); t.commit()``v0.4.3 (02-16-2016)===================- The cake is a lie.v0.4.2 (02-15-2016)===================- Packaging fix.v0.4.1 (02-15-2016)===================- Bugfix for Python 3.v0.4.0 (02-13-2016)===================- Refactored to be fully powered by SQLAlchemy!- Support for all major databases (thanks, SQLAlchemy!).- Support for non-alphanumeric column names.- New ``Record`` class, for representing/accessing result rows.- ``ResultSet`` renamed ``RecordCollection``.- Removed Interactive Mode from the CLI.v0.3.0 (02-11-2016)===================- New ``record`` command-line tool available!- Various improvements.v0.2.0 (02-10-2016)===================- Results are now represented as `Record`, a namedtuples class with dict-like qualities.- New `ResultSet.export` method, for exporting to various formats.- Slicing a `ResultSet` now works, and results in a new `ResultSet`.- Lots of bugfixes and improvements!v0.1.0 (02-07-2016)===================- Initial release.</longdescription>
</pkgmetadata>