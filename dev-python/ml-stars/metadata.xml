<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;left&quot;&gt;  &lt;a href=&quot;https://dai.lids.mit.edu&quot;&gt;    &lt;img width=15% src=&quot;https://dai.lids.mit.edu/wp-content/uploads/2018/06/Logo_DAI_highres.png&quot; alt=&quot;DAI-Lab&quot; /&gt;  &lt;/a&gt;  &lt;i&gt;An Open Source Project from the &lt;a href=&quot;https://dai.lids.mit.edu&quot;&gt;Data to AI Lab, at MIT&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;[![Development Status](https://img.shields.io/badge/Development%20Status-2%20--%20Pre--Alpha-yellow)](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)[![PyPi Shield](https://img.shields.io/pypi/v/ml-stars.svg)](https://pypi.python.org/pypi/ml-stars)[![Tests](https://github.com/sintel-dev/ml-stars/workflows/Run%20Tests/badge.svg)](https://github.com/sintel-dev/ml-stars/actions?query=workflow%3A%22Run+Tests%22+branch%3Amaster)[![Downloads](https://pepy.tech/badge/ml-stars)](https://pepy.tech/project/ml-stars)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/MLBazaar/MLBlocks/master?filepath=examples/tutorials)# ml-starsPrimitives for machine learning and time series.* Github: https://github.com/sintel-dev/ml-stars* License: [MIT](https://github.com/sintel-dev/ml-stars/blob/master/LICENSE)* Development Status: [Pre-Alpha](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)# OverviewThis repository contains primitive annotations to be used by the MLBlocks library, as well asthe necessary Python code to make some of them fully compatible with the MLBlocks API requirements.There is also a collection of custom primitives contributed directly to this library, which eithercombine third party tools or implement new functionalities from scratch.# Installation## Requirements**ml-stars** has been developed and tested on [Python 3.8, 3.9, 3.10, and 3.11](https://www.python.org/downloads/)Also, although it is not strictly required, the usage of a[virtualenv](https://virtualenv.pypa.io/en/latest/) is highly recommended in order to avoidinterfering with other software installed in the system where **ml-stars** is run.## Install with pipThe easiest and recommended way to install **ml-stars** is using [pip](https://pip.pypa.io/en/stable/):```bashpip install ml-stars```This will pull and install the latest stable release from [PyPi](https://pypi.org/).If you want to install from source or contribute to the project please read the[Contributing Guide](https://github.com/sintel-dev/ml-stars/blob/master/CONTRIBUTING.rst).# QuickstartThis section is a short series of tutorials to help you getting started with ml-stars.We will be executing a single primitive for data transformation.### 1. Load a PrimitiveThe first step in order to run a primitive is to load it.This will be done using the `mlstars.load_primitive` function, which willload the indicated primitive as an [MLBlock Object from MLBlocks](https://MLBazaar.github.io/MLBlocks/api/mlblocks.html#mlblocks.MLBlock)In this case, we will load the `sklearn.preprocessing.MinMaxScaler` primitive.```python3from mlstars import load_primitiveprimitive = load_primitive('sklearn.preprocessing.MinMaxScaler')```### 2. Load some dataThe StandardScaler is a transformation primitive which scales your data into a given range.To use this primtives, we generate a synthetic data with some numeric values.```python3import numpy as npdata = np.array([10, 1, 3, -1, 5, 6, 0, 4, 13, 4]).reshape(-1, 1)```The `data` is a list of integers where their original range is between [-1, 13].### 3. Fit the primitiveIn order to run our primitive, we first need to fit it.This is the process where it analyzes the data to detect what is the original range of the data.This is done by calling its `fit` method and passing the `data` as `X`.```python3primitive.fit(X=data)```### 4. Produce resultsOnce the pipeline is fit, we can process the data by calling the `produce` method of theprimitive instance and passing agin the `data` as `X`.```python3transformed = primitive.produce(X=data)transformed```After this is done, we can see how the transformed data contains the transformed values:```array([[0.78571429],       [0.14285714],       [0.28571429],       [0.        ],       [0.42857143],       [0.5       ],       [0.07142857],       [0.35714286],       [1.        ],       [0.35714286]])```The data is now in [0, 1] range.## What's Next?Documentation# History## 0.2.0 – 2023-10-24* Upgrade python tests &amp; remove python 3.7 [Issue #11](https://github.com/sintel-dev/ml-stars/issues/11) - by @sarahmish* Add deprecation warning for old ARIMA primitive [Issue #10](https://github.com/sintel-dev/ml-stars/issues/10) - by @sarahmish* Remove python 3.6 [Issue #9](https://github.com/sintel-dev/ml-stars/issues/9) - by @sarahmish* Add support for python 3.10 &amp; 3.11 [Issue #8](https://github.com/sintel-dev/ml-stars/issues/8) - by @sarahmish## 0.1.3 – 2023-09-25* Update ``keras`` adapter [Issue #7](https://github.com/sintel-dev/ml-stars/issues/7) - by @sarahmish## 0.1.2 – 2023-08-04* Add python 3.9 [Issue #6](https://github.com/sintel-dev/ml-stars/issues/6) - by @sarahmish## 0.1.1 - 2023-05-17* Fix ARIMA adapter [Issue #5](https://github.com/sintel-dev/ml-stars/issues/5) - by @sarahmish* Add Documentation [Issue #4](https://github.com/sintel-dev/ml-stars/issues/4) - by @sarahmish## 0.1.0 - 2023-04-18First official ml-stars release to PyPI: https://pypi.org/project/ml-stars/</longdescription>
</pkgmetadata>