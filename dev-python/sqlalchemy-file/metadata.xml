<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sqlalchemy-file**SQLAlchemy-file** is a [SQLAlchemy](https://www.sqlalchemy.org/) extension for attaching files to SQLAlchemy model anduploading them to various storage such as Local Storage, Amazon S3, Rackspace CloudFiles, Google Storage and othersusing [Apache Libcloud](https://github.com/apache/libcloud).&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jowilf/sqlalchemy-file/actions&quot;&gt;    &lt;img src=&quot;https://github.com/jowilf/sqlalchemy-file/actions/workflows/test.yml/badge.svg&quot; alt=&quot;Test suite&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jowilf/sqlalchemy-file/actions&quot;&gt;    &lt;img src=&quot;https://github.com/jowilf/sqlalchemy-file/actions/workflows/publish.yml/badge.svg&quot; alt=&quot;Publish&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/jowilf/sqlalchemy-file&quot;&gt;    &lt;img src=&quot;https://codecov.io/gh/jowilf/sqlalchemy-file/branch/main/graph/badge.svg&quot; alt=&quot;Codecov&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/sqlalchemy-file/&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/sqlalchemy-file.svg&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/sqlalchemy-file/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/sqlalchemy-file?color=2334D058&quot; alt=&quot;Supported Python versions&quot;&gt;&lt;/a&gt;&lt;/p&gt;The key features are:* **Multiple Storage :** Use Object Storage API provided by [Apache Libcloud](https://github.com/apache/libcloud) to  store files. Therefore, you can store your files on Local Storage, Amazon S3, Google Cloud Storage, MinIO etc, and  easily switch between them. For a full list of supported providers  visit [supported providers page](https://libcloud.readthedocs.io/en/stable/storage/supported_providers.html) from Apache  Libcloud documentation.* **Validator :**  Provide an interface for validating each files before saving them.* **Size Validator :** Built-in validator for file maximum `size` validation.* **Content-Type Validator :** Built-in validator for file ``mimetype`` restrictions.* **Image Validator :** Built-in validator for image `mimetype`, `width`, `height` and `ratio` validation.* **Processor :** Provide an interface to easily save multiple transformation of the original files.* **ThumbnailGenerator :** Built-in processor to auto generate thumbnail* **Multiple Files :** You can attach multiple files directly to a Model.* **Session awareness :** Whenever an object is deleted or a rollback is performed the files uploaded during the unit of  work or attached to the deleted objects are automatically deleted.* **Meant for Evolution :** Change the storage provider anytime you want, old data will continue to work* **SQLModel Support:** Tested with [SQLModel](https://github.com/tiangolo/sqlmodel)---**Documentation**: [https://jowilf.github.io/sqlalchemy-file](https://jowilf.github.io/sqlalchemy-file/)**Source Code**: [https://github.com/jowilf/sqlalchemy-file](https://github.com/jowilf/sqlalchemy-file)---## RequirementsA recent and currently supported version of Python (rightnow, &lt;a href=&quot;https://www.python.org/downloads/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot;&gt;Python supports versions 3.7 andabove&lt;/a&gt;).As **SQLAlchemy-file** is based on **Apache Libcloud** and **SQLAlchemy**, it requires them. They will be automaticallyinstalled when you install SQLAlchemy-file.## Installation### PIP```shell$ pip install sqlalchemy-file```### Poetry```shell$ poetry add sqlalchemy-file```## ExampleAttaching files to models is as simple as declaring a field on the model itself```Pythonimport osfrom libcloud.storage.drivers.local import LocalStorageDriverfrom sqlalchemy import Column, Integer, String, create_enginefrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import Sessionfrom sqlalchemy_file import File, FileFieldfrom sqlalchemy_file.storage import StorageManagerBase = declarative_base()# Define your modelclass Attachment(Base):    __tablename__ = &quot;attachment&quot;    id = Column(Integer, autoincrement=True, primary_key=True)    name = Column(String(50), unique=True)    content = Column(FileField)# Configure Storageos.makedirs(&quot;./upload_dir/attachment&quot;, 0o777, exist_ok=True)container = LocalStorageDriver(&quot;./upload_dir&quot;).get_container(&quot;attachment&quot;)StorageManager.add_storage(&quot;default&quot;, container)# Save your modelengine = create_engine(    &quot;sqlite:///example.db&quot;, connect_args={&quot;check_same_thread&quot;: False})Base.metadata.create_all(engine)with Session(engine) as session, open(&quot;./example.txt&quot;, &quot;rb&quot;) as local_file:    # from an opened local file    session.add(Attachment(name=&quot;attachment1&quot;, content=local_file))    # from bytes    session.add(Attachment(name=&quot;attachment2&quot;, content=b&quot;Hello world&quot;))    # from string    session.add(Attachment(name=&quot;attachment3&quot;, content=&quot;Hello world&quot;))    # from a File object with custom filename and content_type    file = File(content=&quot;Hello World&quot;, filename=&quot;hello.txt&quot;, content_type=&quot;text/plain&quot;)    session.add(Attachment(name=&quot;attachment4&quot;, content=file))    # from a File object specifying a content path    session.add(Attachment(name=&quot;attachment5&quot;, content=File(content_path=&quot;./example.txt&quot;)))    session.commit()```## Related projects and inspirations* [filedepot: ](https://github.com/amol-/depot) When I was looking for a library like this, depot was thebest I saw. This project inspired **SQLAlchemy-file** extensivelyand some features are implemented the same.* [sqlalchemy-media: ](https://github.com/pylover/sqlalchemy-media) Another attachment extension for SqlAlchemyto manage assets which are associated with database models</longdescription>
</pkgmetadata>