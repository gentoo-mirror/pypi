<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Hybrid PKE===============The Hybrid Public Key Encryption (HPKE) standard in Python.`hybrid_pke` = [`hpke-rs`](https://github.com/franziskuskiefer/hpke-rs) :heavy_plus_sign: [`PyO3`](https://github.com/PyO3/pyo3)This library provides Python bindings to the `hpke-rs` crate, which supports primitives from either [Rust Crypto](https://github.com/RustCrypto) or [EverCrypt](https://hacl-star.github.io/HaclValeEverCrypt.html).&lt;details&gt;  &lt;summary&gt; Table of Contents &lt;/summary&gt;  &lt;ol&gt;    &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#development&quot;&gt;Development&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#related-projects&quot;&gt;Related Projects&lt;/a&gt;&lt;/li&gt;  &lt;/ol&gt;&lt;/details&gt;## Usage### BasicThe single-shot API is intended for single message encryption/decryption. The default HPKE configuration uses the unauthenticated Base mode, an X25519 DH key encapsulation mechanism, a SHA256 key derivation mechanism, and a ChaCha20Poly1305 AEAD function.```pythonimport hybrid_pkehpke = hybrid_pke.default()info = b&quot;&quot;  # shared metadata, correspondance-levelaad = b&quot;&quot;  # shared metadata, message-levelsecret_key_r, public_key_r = hpke.generate_key_pair()  # receiver keys, pre-generated# ============== Sender ==============message = b&quot;hello from the other side!&quot;encap, ciphertext = hpke.seal(public_key_r, info, aad, message)# ============= Receiver =============plaintext = hpke.open(encap, secret_key_r, info, aad, ciphertext)print(plaintext.decode(&quot;utf-8&quot;))# &gt;&gt; hello from the other side!```### Advanced&lt;details&gt;&lt;summary&gt; Sender &amp; Receiver Contexts &lt;/summary&gt;The Sender Context and Receiver Context APIs allow for setting up a context for repeated encryptions and decryptions. It's recommended whenever you intend to perform several encryptions or decryptions in quick succession.```pythoninfo = b&quot;quotes from your favorite aphorists&quot;aads = [  b&quot;Szasz&quot;,  b&quot;Nietzsche&quot;,  b&quot;Morandotti&quot;,  b&quot;Brudzinski&quot;,  b&quot;Hubbard&quot;,]# ============== Sender ==============messages = [    b&quot;Two wrongs don't make a right, but they make a good excuse.&quot;,    b&quot;Become who you are!&quot;,    b&quot;Only those who aren't hungry are able to judge the quality of a meal.&quot;,    b&quot;Under certain circumstances a wanted poster is a letter of recommendation.&quot;,    b&quot;Nobody ever forgets where he buried the hatchet.&quot;,]encap, sender_context = hpke.setup_sender(public_key_r, info)ciphertexts = []for aad, msg in zip(aads, messages):    ciphertext = sender_context.seal(aad, msg)    ciphertexts.append(ciphertext)# ============= Receiver =============receiver_context = hpke.setup_receiver(encap, secret_key_r, info)plaintexts = []for aad, ctxt in zip(aads, ciphertexts):    plaintext = receiver_context.open(aad, ctxt)    plaintexts.append(plaintext)print(f&quot;\&quot;{plaintexts[0].decode()}\&quot; - {aad[0].decode()}&quot;)print(f&quot;\&quot;{plaintexts[1].decode()}\&quot; - {aad[1].decode()}&quot;)# &gt;&gt; &quot;Two wrongs don't make a right, but they make a good excuse.&quot; - Szasz# &gt;&gt; &quot;Become who you are!&quot; - Nietzsche```&lt;/details&gt;&lt;details&gt;&lt;summary&gt; Mode.AUTH: Authenticated Sender &lt;/summary&gt;Auth mode allows for signing and verifying encryptions with a previously authenticated sender key-pair.```pythonhpke = hybrid_pke.default(mode=hybrid_pke.Mode.AUTH)secret_key_r, public_key_r = hpke.generate_key_pair()  # receiver keyssecret_key_s, public_key_s = hpke.generate_key_pair()  # sender keys, pre-authenticated# ============== Sender ==============# sign with sender's secret keyencap, ciphertext = hpke.seal(public_key_r, info, aad, message, sk_s=secret_key_s)# ============= Receiver =============# verify with sender's public keyplaintext = hpke.open(encap, secret_key_r, info, aad, ciphertext, pk_s=public_key_s)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Mode.PSK: Pre-shared Key Authentication&lt;/summary&gt;PSK mode allows for signing and verifying encryptions with a previously shared key held by both the sender and recipient.```pythonhpke = hybrid_pke.default(mode=hybrid_pke.Mode.PSK)# pre-shared key + IDpsk = bytes.fromhex(&quot;0247fd33b913760fa1fa51e1892d9f307fbe65eb171e8132c2af18555a738b82&quot;)psk_id = bytes.fromhex(&quot;456e6e796e20447572696e206172616e204d6f726961&quot;)# ============== Sender ==============# sign with pre-shared keyencap, ciphertext = hpke.seal(public_key_r, info, aad, message, psk=psk, psk_id=psk_id)# ============= Receiver =============# verify with pre-shared keyplaintext = hpke.open(encap, secret_key_r, info, aad, ciphertext, psk=psk, psk_id=psk_id)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Mode.AUTH_PSK: Combining AUTH and PSK. &lt;/summary&gt;PSK mode allows for signing and verifying encryptions with a previously shared key held by both the sender and recipient.```pythonhpke = hybrid_pke.default(mode=hybrid_pke.Mode.PSK)secret_key_r, public_key_r = hpke.generate_key_pair()  # receiver keyssecret_key_s, public_key_s = hpke.generate_key_pair()  # sender keys, pre-authenticated# pre-shared key + IDpsk = bytes.fromhex(&quot;0247fd33b913760fa1fa51e1892d9f307fbe65eb171e8132c2af18555a738b82&quot;)psk_id = bytes.fromhex(&quot;456e6e796e20447572696e206172616e204d6f726961&quot;)# ============== Sender ==============# sign with both pre-shared key and sender's secret keyencap, ciphertext = hpke.seal(    public_key_r, info, aad, message,    psk=psk, psk_id=psk_id, sk_s=secret_key_s,)# ============= Receiver =============# verify with both pre-shared key and sender's public keyplaintext = hpke.open(    encap, secret_key_r, info, aad, ciphertext,    psk=psk, psk_id=psk_id, pk_s=public_key_s,)```&lt;/details&gt;&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## FeaturesThe features available match those supported by `hpke-rs`.&lt;details&gt;&lt;summary&gt;HPKE Modes&lt;/summary&gt;- [x] mode_base- [x] mode_psk- [x] mode_auth- [x] mode_auth_psk&lt;/details&gt;&lt;details&gt;&lt;summary&gt;KEMs: (Diffie-Hellman) Key Encapsulation Mechanisms&lt;/summary&gt;- [x] DHKEM(P-256, HKDF-SHA256)- [ ] DHKEM(P-384, HKDF-SHA384)- [ ] DHKEM(P-521, HKDF-SHA512)- [x] DHKEM(X25519, HKDF-SHA256)- [ ] DHKEM(X448, HKDF-SHA512)&lt;/details&gt;&lt;details&gt;&lt;summary&gt;KDFs: Key Derivation Functions &lt;/summary&gt;- [x] HKDF-SHA256- [x] HKDF-SHA384- [x] HKDF-SHA512&lt;/details&gt;&lt;details&gt;&lt;summary&gt;AEADs: Authenticated Encryption with Additional Data functions&lt;/summary&gt;- [x] AES-128-GCM- [x] AES-256-GCM- [x] ChaCha20Poly1305- [x] Export only&lt;/details&gt;&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## InstallationWheels for various platforms and architectures can be found on [PyPI](https://pypi.org/project/hybrid-pke/) or in the `wheelhouse.zip` archive from the [latest Github release](https://github.com/capeprivacy/hybrid-pke/releases).The library can also be installed from source with [`maturin`](https://github.com/PyO3/maturin) -- see below.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## DevelopmentWe use [`maturin`](https://github.com/PyO3/maturin) to build and distribute the PyO3 extension module as a Python wheel.For users of `cmake`, we provide a [`Makefile`](https://github.com/capeprivacy/hybrid-pke/blob/main/Makefile) that includes some helpful development commands.&lt;details&gt;&lt;summary&gt;Some useful tips&lt;/summary&gt;- `maturin develop` builds &amp; installs the Python package into your Python environment (`venv` or `conda` recommended)- `pytest .` tests the resulting Python package.- `pytest -n auto .` runs the full test suite in parallel.- `maturin build --release -o dist --sdist` builds the extension module in release-mode and produces a wheel for your environment's OS and architecture.- The `-i`/`--interpreter` flag for `maturin` can be used to swap out different Python interpreters, if you have multiple Python installations.&lt;/details&gt;&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## Related Projects- [hpke-py](https://github.com/ctz/hpke-py): An implementation of HPKE based on primitives from [cryptography.io](https://cryptography.io).&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;</longdescription>
</pkgmetadata>