<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>******cysgp4******- *Version:* 0.3.5- *Author:* Benjamin Winkel- *Repository:* `on GitHub &lt;https://github.com/bwinkel/cysgp4&gt;`__- *Bug tracker:* `on GitHub &lt;https://github.com/bwinkel/cysgp4/issues&gt;`__- *User manual:* `stable &lt;https://bwinkel.github.io/cysgp4/&gt;`__ |  `developer &lt;https://bwinkel.github.io/cysgp4/latest/&gt;`__.. image:: https://img.shields.io/pypi/v/cysgp4.svg    :target: https://pypi.python.org/pypi/cysgp4    :alt: PyPI tag.. image:: https://img.shields.io/badge/License-GPLv3-blue.svg    :target: https://www.github.com/bwinkel/cysgp4/blob/master/COPYING.GPLv3.txt    :alt: License-GPL3.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg    :target: https://www.github.com/bwinkel/cysgp4/blob/master/COPYING.Apache2    :alt: License-Apache.. image:: https://img.shields.io/badge/License-BSD%203--Clause-blue.svg    :target: https://www.github.com/bwinkel/cysgp4/blob/master/TEMPLATE_LICENCE.rst    :alt: License-BSD3Project Status==============.. image:: https://dev.azure.com/bwinkel78/Benjamin-Winkel-Projects/_apis/build/status/bwinkel.cysgp4?branchName=master    :target: https://dev.azure.com/bwinkel78/Benjamin-Winkel-Projects/_build    :alt: cysgp4's Azure Pipelines Status.. image:: https://coveralls.io/repos/github/bwinkel/cysgp4/badge.svg?branch=master    :target: https://coveralls.io/github/bwinkel/cysgp4?branch=master    :alt: cysgp4's Coveralls StatusPurpose=======The `cysgp4` package is a `Cython &lt;https://www.cython.org&gt;`_-powered wrapperof the `sgp4lib &lt;https://www.danrw.com/sgp4/&gt;`_ library (by Daniel Warner) tocompute satellite positions from two-line elements (TLE).It provides similar functionality as the well-known `sgp4&lt;https://pypi.org/project/sgp4/&gt;`_ Python package (by Brandon Rhodes), whichuses `Numba &lt;http://numba.pydata.org/&gt;`_ internally to speed-up thecalculations. In contrast to `sgp4`_, `cysgp4` can work well with arrays ofTLEs and/or times and make use of multi-core platforms (via OpenMP) to boostprocessing times a lot.Installation============We highly recommend to use `cysgp4` with the `Anaconda Python distribution &lt;https://www.anaconda.com/&gt;`_, in whichcase installiation is as easy as ::    conda install -c conda-forge cysgp4Otherwise, you should install cysgp4 via `pip`::    pip install cysgp4The installation is also possible from source. `Detailed installationinstructions &lt;https://bwinkel.github.io/cysgp4/latest/install.html&gt;`_can be found in the user manual.Dependencies------------We kept the dependencies as minimal as possible. The following packages arerequired:- `Python 3.5` or later- `numpy 1.13` or laterIf you want to run the notebooks yourself, you will also need the Jupyterserver and install matplotlib. To run the tests, you'll need `sgp4&lt;https://pypi.org/project/sgp4/&gt;`_.Note, for compiling the C-extension, OpenMP is used for parallelization. If you use gcc, for example, you should have at least version 4.8 otherwise the setup-script may fail. Again, see `Detailed installation instructions` formore information.Usage=====Using cysgp4 is possible via an object-oriented interface or with afast numpy-array functional approach. The former works like this:.. code-block:: python    import cysgp4    # Define a date/time and an observer    pydt = cysgp4.PyDateTime.from_mjd(58805.57)    lon_deg, lat_deg = 6.88375, 50.525    alt_km = 0.366    obs = cysgp4.PyObserver(lon_deg, lat_deg, alt_km)    # Define satellite properties/orbit via two-line element string (TLE)    hst_tle = cysgp4.PyTle(        'HST',        '1 20580U 90037B   19321.38711875  .00000471  00000-0  17700-4 0  9991',        '2 20580  28.4699 288.8102 0002495 321.7771 171.5855 15.09299865423838',        )    # Create a satellite object for querying coordinates    sat = cysgp4.Satellite(hst_tle, obs, pydt)    sat.eci_pos().loc  # ECI cartesian position, km    (5879.5931344459295, 1545.7455647032068, 3287.4155452595)    sat.eci_pos().vel  # ECI cartesian velocity, km/s    (-1.8205895517672226, 7.374044252723081, -0.20697960810978586)    sat.geo_pos()  # geographic (geodetic) position, lon/lat/alt    &lt;PyCoordGeodetic: 112.2146d, 28.5509d, 538.0186km&gt;    sat.topo_pos()  # topocentric position, az/el/dist/dist_rate    &lt;PyCoordTopocentric: 60.2453d, -35.6844d, 8314.5683km, 3.5087km/s&gt;    # One can change time to determine positions at another moment    sat.mjd += 1 / 720.  # one minute later    sat.topo_pos()    &lt;PyCoordTopocentric: 54.8446d, -38.2749d, 8734.9195km, 3.4885km/s&gt;In many cases, however, one probably wants to calculate coordinates for a(large) number of satellites, observer locations, and/or observing times. Forthis, the function `~cysgp4.propagate_many` is useful. This is an arrayinterface to the sgp4 calculations, which allows to perform calculations fordifferent satellite TLEs, observers and times in a parallelized manner.`~numpy` broadcasting `rules&lt;https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html&gt;`_ apply:.. code-block:: python        import requests        import numpy as np        from cysgp4 import PyTle, PyObserver, propagate_many        # Download many TLEs from a website        url = 'http://celestrak.com/NORAD/elements/science.txt'        ctrak_science = requests.get(url)        all_lines = ctrak_science.text.split('\\r\\n')        # Need to convert them to a list of tuples (each tuple consisting        # of the three TLE strings)        tle_list = list(zip(*tuple(            all_lines[idx::3] for idx in range(3)            )))        # Create an array of PyTle and PyObserver objects, and MJDs        tles = np.array([            PyTle(*tle) for tle in tle_list            ])[np.newaxis, np.newaxis, :20]  # use first 20 TLEs        observers = np.array([            PyObserver(6.88375, 50.525, 0.366),            PyObserver(16.88375, 50.525, 0.366),            ])[np.newaxis, :, np.newaxis]        mjds = np.linspace(            58805.5, 58806.5, 1000  # 1000 time steps            )[:, np.newaxis, np.newaxis]        # The result is a dictionary        result = propagate_many(mjds, tles, observers)        print(result.keys())        dict_keys(['eci_pos', 'eci_vel', 'geo', 'topo'])        # Returned array shapes are as follows; last array dimension        # contains the coordinate pairs.        print(np.broadcast(mjds, tles, observers).shape)        (1000, 2, 20)        print(result['eci_pos'].shape, result['topo'].shape)        (1000, 2, 20, 3) (1000, 2, 20, 4)        # One can also skip over coordinate frames.        result = propagate_many(            mjds, tles, observers,            do_eci_pos=False, do_eci_vel=False, do_geo=False, do_topo=True            )        print(result.keys())        dict_keys(['topo'])More use-cases and tutorials----------------------------Check out the `user manual &lt;https://bwinkel.github.io/cysgp4/latest/&gt;`_ or the`Jupyter tutorial notebooks &lt;https://github.com/bwinkel/cysgp4/tree/master/notebooks&gt;`_in the repository for further examples of how to use `cysgp4`. Note that youcan only view the notebooks on GitHub, if you want to edit somethingit is necessary to clone the repository or download a notebook to run it onyour machine.Who do I talk to?=================If you encounter any problems or have questions, do not hesitate to raise anissue or make a pull request. Moreover, you can contact the devs directly:- &lt;bwinkel@mpifr.de&gt;Licenses========`cysgp4` itself is published under `GPL v3 &lt;https://www.github.com/bwinkel/cysgp4/blob/master/COPYING.GPLv3.txt&gt;`_, an open-source license. The packageis a `Cython &lt;https://www.cython.org&gt;`_-powered wrapper of the `sgp4lib&lt;https://www.danrw.com/sgp4/&gt;`_ library (by Daniel Warner) to computesatellite positions from two-line elements (TLE). The sgp4lib source code islicensed under `Apache-2.0 license&lt;https://www.github.com/bwinkel/cysgp4/blob/master/COPYING.Apache2&gt;`_The package is partly based on the `Astropy-affiliated package template &lt;https://github.com/astropy/package-template&gt;`_, which is under `BSD 3-clause &lt;https://github.com/bwinkel/cysgp4/blob/master/TEMPLATE_LICENCE.rst&gt;`_ license.</longdescription>
</pkgmetadata>