<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The ngsildclient library[![NGSI-LD badge](https://img.shields.io/badge/NGSI-LD-red.svg)](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.02.01_60/gs_CIM009v010201p.pdf)[![SOF support badge](https://nexus.lab.fiware.org/repository/raw/public/badges/stackoverflow/fiware.svg)](http://stackoverflow.com/questions/tagged/fiware)&lt;br&gt;[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)[![Read the Docs](https://img.shields.io/readthedocs/ngsildclient)](https://ngsildclient.readthedocs.io/en/latest/index.html)&lt;br&gt;[![deploy status](https://github.com/Orange-OpenSource/python-ngsild-client/workflows/CI/badge.svg)](https://github.com/Orange-OpenSource/python-ngsild-client/actions)[![PyPI](https://img.shields.io/pypi/v/ngsildclient.svg)](https://pypi.org/project/ngsildclient/)[![Python version](https://img.shields.io/pypi/pyversions/ngsildclient)](https://pypi.org/project/ngsildclient/)## Overview **ngsildclient** is a Python library dedicated to NGSI-LD.  It combines : - a toolbox to create and modify NGSI-LD entities effortlessly - a NGSI-LD API client to interact with a Context Broker## Features### Build NGSI-LD entitiesngsildclient aims at :- programmatically generate NGSI-LD entities- load entities from JSON-LD payloadsFour primitives are provided `prop()`, `gprop()`, `tprop()`, `rel()` to build respectively a Property, GeoProperty, TemporalProperty and Relationship.An Entity is backed by a Python dictionary that stores the JSON-LD payload.The library operates the mapping between the Entity's attributes and their JSON-LD counterpart, allowing to easily manipulate NGSI-LD value and metadata directly in Python.### Features list- primitives to build properties and relationships (chainable)- benefit from uri naming convention, omit scheme and entity's type, e.g. `parking = Entity(&quot;OffStreetParking&quot;, &quot;Downtown1&quot;)`- support dot-notation facility, e.g. `reliability = parking[&quot;availableSpotNumber.reliability&quot;]`- easily manipulate a property's value, e.g. `reliability.value = 0.8`- easily manipulate a property's metadata, e.g. `reliability.datasetid = &quot;dataset1&quot;`- support nesting- support multi-attribute- load/save to file- load from HTTP- load well-known sample entities, e.g.  `parking = Entity.load(SmartDataModels.SmartCities.Parking.OffStreetParking)`- provide helpers to ease building some structures, e.g. PostalAddress- pretty-print entity and properties### Interact with the Context BrokerTwo clients are provided, `Client` and `AsyncClient` respectively for synchronous and asynchronous modes.Prefer the synchronous one when working in interactive mode, for example to explore and visualize context data in a Jupyter notebook.Prefer the async one if you're looking for performance, for example to develop a real-time NGSI-LD Agent with a high data-acquisition frequency rate.### Features list - synchronous and asynchronous clients - support batch operations - support pagination : transparently handle pagination (sending as many requests as needed under the hood) - support auto-batch : transparently divide into many batch requests if needed - support queries and alternate (POST) queries - support temporal queries - support pandas dataframe as a temporal query result - support subscriptions - find subscription conflicts - SubscriptionBuilder to help build subscriptions - auto-detect broker vendor and version - support follow relationships (chainable), e.g. `camera = parking.follow(&quot;availableSpotNumber.providedBy&quot;)`## Getting started### Create our first parking EntityThe following code snippet builds the `OffstreetParking` sample entity from the ETSI documentation.```pythonfrom datetime import datetimefrom ngsildclient import EntityPARKING_CONTEXT = &quot;https://raw.githubusercontent.com/smart-data-models/dataModel.Parking/master/context.jsonld&quot;e = Entity(&quot;OffStreetParking&quot;, &quot;Downtown1&quot;)e.ctx.append(PARKING_CONTEXT)e.prop(&quot;name&quot;, &quot;Downtown One&quot;)e.prop(&quot;availableSpotNumber&quot;, 121, observedat=datetime(2022, 10, 25, 8)).anchor()e.prop(&quot;reliability&quot;, 0.7).rel(&quot;providedBy&quot;, &quot;Camera:C1&quot;).unanchor()e.prop(&quot;totalSpotNumber&quot;, 200).loc(41.2, -8.5)```Let's print the JSON-LD payload.```pythone.pprint()```The result is available [here](https://github.com/Orange-OpenSource/python-ngsild-client/blob/master/parking_sample.jsonld).&lt;br&gt;### Persist our parking in the Context BrokerThe following example assumes that an Orion-LD context broker is running on localhost.&lt;br&gt;A docker-compose config [file](https://raw.githubusercontent.com/Orange-OpenSource/python-ngsild-client/master/brokers/orionld/docker-compose-troe.yml) file is provided for that purpose.```pythonfrom ngsildclient import Clientclient = Client(port=8026, port_temporal=8027)client.create(e)```### Increase our parking occupancy as the day goes onEach hour ten more parkings spots are occupied, until 8 p.m.```pythonfrom datetime import timedeltaprop = e[&quot;availableSpotNumber&quot;]for _ in range(12):    prop.observedat += timedelta(hours=1)    prop.value -= 10    client.update(e)```### Retrieve our parkingGet back our parking from the broker and display its `availableSpotNumber` property.&lt;br&gt;```pythonparking = client.get(&quot;OffStreetParking:Downtown1&quot;, ctx=PARKING_CONTEXT)parking[&quot;availableSpotNumber&quot;].pprint()```Only one available parking spot remains at 8 p.m.```json{    &quot;type&quot;: &quot;Property&quot;,    &quot;value&quot;: 1,    &quot;observedAt&quot;: &quot;2022-10-25T20:00:00Z&quot;,    &quot;reliability&quot;: {        &quot;type&quot;: &quot;Property&quot;,        &quot;value&quot;: 0.7    },    &quot;providedBy&quot;: {        &quot;type&quot;: &quot;Relationship&quot;,        &quot;object&quot;: &quot;urn:ngsi-ld:Camera:C1&quot;    }}```### Request the Temporal Representation of our parkingFor convenience we retrieve it as a pandas dataframe.*If you don't have pandas installed, just omit the `as_dataframe` argument and get JSON instead.*```pythondf = client.temporal.get(e, ctx=PARKING_CONTEXT, as_dataframe=True)```Let's display the three last rows.```pythondf.tail(3)```|    | OffStreetParking   | observed                  |   availableSpotNumber ||---:|:-------------------|:--------------------------|----------------------:|| 10 | Downtown1          | 2022-10-25 18:00:00+00:00 |                    21 || 11 | Downtown1          | 2022-10-25 19:00:00+00:00 |                    11 || 12 | Downtown1          | 2022-10-25 20:00:00+00:00 |                     1 |### Let's throw in a more realistic parking management systemLet us move from our first example to the more realistic parking example provided by the Smart Data Models Program.```pythonfrom ngsildclient import SmartDataModelsparking = Entity.load(SmartDataModels.SmartCities.Parking.OffStreetParking)```Once loaded we can manipulate our new parking the same way we've done until now.&lt;br&gt;Let's see how it is occupied.```pythonn_total = parking[&quot;totalSpotNumber&quot;].valuen_occupied = parking[&quot;occupiedSpotNumber&quot;].valuen_avail= parking[&quot;availableSpotNumber&quot;].valueprint(n_total, n_occupied, n_avail)```This parking has 414 parking slots. 282 are occupied. 132 are available.&lt;br&gt;In order to complete our parking system we would like to add 414 spots to our datamodel.&lt;br&gt;Let's create a reference parking spot to be used as a template.```pythonspot = Entity(&quot;ParkingSpot&quot;, &quot;OffStreetParking:porto-ParkingLot-23889:000&quot;)spot.prop(&quot;status&quot;, &quot;free&quot;)spot.rel(&quot;refParkingSite&quot;, parking)```Let's clone this spot 414 times, assign a disctinct id to each one and occupy the 282 first spots.&lt;br&gt;This is a simplistic strategy but enough to keep the parking system consistent.```pythonspots = spot * n_totalfor i, spot in enumerate(spots):    spot.id = f&quot;{spot.id[:-3]}{i+1:03}&quot;    if i &lt; n_occupied:        spot[&quot;status&quot;].value = &quot;occupied&quot;```We now establish the relationship between the parking and its spots by adding a new attribute to the parking.&lt;br&gt;Having a mutual relationship is not necessarily needed. It depends on how we want to navigate in our datamodel. &lt;br&gt;Let's do it for the sake of example.```pythonfrom ngsildclient import MultAttrValuemrel = MultAttrValue()for spot in spots:    mrel.add(spot, datasetid=f&quot;Dataset:{spot.id[-26:]}&quot;)parking.rel(&quot;refParkingSpot&quot;, mrel)```To sum up we have obtained 415 entities : 1 parking and 414 spots.&lt;br&gt;Make a single list of these parts and save it into a file.```pythondatamodel = sum(([parking], spots), [])  # flatten listsEntity.save_batch(datamodel, &quot;parking_system.jsonld&quot;)```The result is available [here](https://github.com/Orange-OpenSource/python-ngsild-client/blob/master/parking_system.jsonld).&lt;br&gt;Time now to populate our parking system in the broker.```pythonclient.upsert(datamodel)```Check everything is fine by asking the broker for the number of occupied spots.&lt;br&gt;Eventually close the client.```pythonclient.count(&quot;ParkingSpot&quot;, q='refParkingSite==&quot;urn:ngsi-ld:OffStreetParking:porto-ParkingLot-23889&quot;;status==&quot;occupied&quot;')  # 282client.close()```### Let's go further1. Develop a NGSI-LD Agent    - Collect incoming data from parking IoT *(ground sensors, cameras)* and the parking system API    - Clean data, process data and convert to NGSI-LD entities    - Create and update entities into the NGSI-LD broker *in real-time*2. Subscribe to events    - Create a subscription to be informed when parking occupation exceeds 90%    - The software that listens to these highly-occupied parking entities can also be a NGSI-LD Agent    &lt;br&gt;Example : programmatically subscribe to events    ```python    from ngsildclient import SubscriptionBuilder    subscr = SubscriptionBuilder(&quot;https://parkingsystem.example.com:8000/subscription/high-occupancy&quot;)        .description(&quot;Notify me of high occupancy on parking porto-23889&quot;)        .select_type(&quot;OffStreetParking&quot;)        .watch([&quot;occupancy&quot;])        .query('occupancy&gt;0.9;controlledAsset==&quot;urn:ngsi-ld:OffStreetParking:porto-ParkingLot-23889&quot;')        .build()    client.subscriptions.create(subscr)    ```## Where to get itThe source code is currently hosted on GitHub at :https://github.com/Orange-OpenSource/python-ngsild-clientBinary installer for the latest released version is available at the [Pythonpackage index](https://pypi.org/project/ngsildclient).## Installation**ngsildclient** requires Python 3.9+.```shpip install ngsildclient```## DocumentationUser guide is available on [Read the Docs](https://ngsildclient.readthedocs.io/en/latest/index.html).Refer to the [Cookbook](https://ngsildclient.readthedocs.io/en/latest/cookbook.html) chapter that provides many HOWTOs to :- develop various NGSI-LD Agents collecting data from heterogeneous datasources- forge NGSI-LD sample entities from the Smart Data Models initiative## License[Apache 2.0](LICENSE)</longdescription>
</pkgmetadata>