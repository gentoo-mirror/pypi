<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-nodeping-apiA Python2/3 library for managing checks, schedules, and contacts&lt;!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc --&gt;**Table of Contents**- [python-nodeping-api](#python-nodeping-api)    - [General Usage](#general-usage)    - [Installation](#installation)    - [Verify API token](#verify-api-token)        - [Checking validity](#checking-validity)            - [Sample Code](#sample-code)        - [Retrieving Account Info](#retrieving-account-info)    - [Checks](#checks)        - [Get Checks](#get-checks)        - [Create Checks](#create-checks)        - [Update Checks](#update-checks)            - [Updating one](#updating-one)            - [Updating many](#updating-many)        - [Disable Checks](#disable-checks)            - [Disable by Label](#disable-by-label)            - [Disable by Target](#disable-by-target)            - [Disable by Type](#disable-by-type)            - [Disable All](#disable-all)        - [Delete Checks](#delete-checks)    - [Contacts](#contacts)        - [Getting Contacts](#getting-contacts)            - [Get All Contacts](#get-all-contacts)            - [Get a Single Contact](#get-a-single-contact)            - [Get Contacts by Type](#get-contacts-by-type)        - [Create a Contact](#create-a-contact)        - [Update a Contact](#update-a-contact)        - [Delete a Contact](#delete-a-contact)        - [Resetting a Password](#resetting-a-password)    - [Contact Groups](#contact-groups)        - [Get Groups](#get-groups)        - [Create Groups](#create-groups)        - [Update Group](#update-group)        - [Delete Group](#delete-group)    - [Schedules](#schedules)        - [Get Schedules](#get-schedules)        - [Create Schedules](#create-schedules)        - [Update Schedules](#update-schedules)        - [Delete Schedules](#delete-schedules)    - [Maintenance](#maintenance)        - [Get Maintenance](#get-maintenance)        - [Create Maintenance](#create-maintenance)        - [Update Maintenance](#update-maintenance)        - [Delete Maintenance](#delete-maintenance)    - [Notifications](#notifications)        - [Notification Examples](#notification-examples)    - [Results](#results)        - [Getting Check Results](#getting-check-results)        - [Get Uptime](#get-uptime)        - [Getting Monthly Uptime Since 2019-02](#getting-monthly-uptime-since-2019-02)        - [Getting Daily Uptime In Time Range](#getting-daily-uptime-in-time-range)        - [Current Events](#current-events)    - [Information](#information)        - [Get Probe Info](#get-probe-info)            - [Get NY Probe Info](#get-ny-probe-info)        - [Get Location Information](#get-location-information)            - [Get North America Info](#get-north-america-info)    - [Diagnostics](#diagnostics)        - [Initiate an MTR](#initiate-an-mtr)        - [Do a DNS Lookup](#do-a-dns-lookup)&lt;!-- markdown-toc end --&gt;## General UsageTo use the NodePing API with Python2/3, you are required to use yourprovided API token. You can find your API key on your NodePing accountunder `Account Settings → API`.You can also optionally provide a Sub Account ID which can be foundunder `Account Settings → SubAccounts` and you will see the ID by itsname.You can set these variables, for example, like so:``` pythontoken = 'my-api-token'customerid = 'your-subaccount-id'```## InstallationTo install this package, run:```pip install nodeping-api```## Verify API tokenThis module lets you check if your token is valid and return info aboutyour account.### Checking validityThe name of this function is `is_valid()`This simply returns `True` or raises an exception if the key is notvalid.#### Sample Code``` python&gt;&gt;&gt; from nodeping_api import check_token&gt;&gt;&gt; valid_token = check_token.is_valid(token)&gt;&gt;&gt; print(valid_token)True```Or if your key is invalid``` python&gt;&gt;&gt; valid_token = check_token.is_valid(token)False```### Retrieving Account InfoThe name of this function is `info()`This will return the contents from NodePing in a dictionary format. Ifthe token isn’t valid, nothing will be returned.Example:``` pythonfrom nodeping_api import check_tokeninfo = check_token.info(token)```This will return basic information about your account. Optionally, youcan do the same with a subaccount:``` pythonfrom nodeping_api import check_tokensubacc_info = check_token.info(token, customerid=customerid)```## Checks### Get ChecksGet checks on your NodePing account via the `get_checks.py` module.This module will get all checks that are specified, whether enabled ordisabled (excluding `disabled_checks()`, which will only get disabledchecks)Lets you gather:  - All checks  - Passing checks  - Failing checks  - Disabled checks  - Last resultGetting check info examples:``` pythonfrom nodeping_api import get_checks# Optionally set customerid to your subaccount IDquery_nodeping = get_checks.GetChecks(token)# Get all checksall = query_nodeping.all_checks()# Get passing checkspassing = query_nodeping.passing_checks()# Get failing checksfailing = query_nodeping.failing_checks()# Get disabled checksdisabled = query_nodeping.disabled_checks()# Get last resultlast = query_nodeping.last_result()# Get check by IDquery_nodeping = get_checks.GetChecks(token, checkid=_id)check = query_nodeping.get_by_id()```### Create ChecksCreate checks on your NodePing account via the `create_check.py` module.This module lets you create a check of any type and with your specifiedparameters.Example of creating an HTTP check:``` pythondef http():    contacts = [{&quot;contactkey&quot;: {&quot;delay&quot;: 0, &quot;schedule&quot;: &quot;Days&quot;}}]    loc = &quot;NAM&quot;    webserver = &quot;https://example.com&quot;    result = create_check.http_check(        token, webserver, label=&quot;http example.com&quot;, enabled=True, follow=True, runlocations=loc, notifications=contacts)    pprint(result)```Example of creating a PUSH check:``` pythondef push(token, contacts, region):    fields = {        &quot;apcupsd&quot;: {            &quot;name&quot;: &quot;apcupsd&quot;,            &quot;min&quot;: 1,            &quot;max&quot;: 1        },        &quot;load1min&quot;: {            &quot;name&quot;: &quot;load.1min&quot;,            &quot;min&quot;: &quot;0&quot;,            &quot;max&quot;: &quot;4&quot;        },        &quot;load5min&quot;: {            &quot;name&quot;: &quot;load.5min&quot;,            &quot;min&quot;: &quot;0&quot;,            &quot;max&quot;: &quot;2&quot;        },        &quot;memavail&quot;: {            &quot;name&quot;: &quot;memavail&quot;,            &quot;min&quot;: &quot;100&quot;,            &quot;max&quot;: &quot;10000&quot;        }    }    results = create_check.push_check(        token,        label=&quot;Test PUSH&quot;,        fields=fields,        interval=1,        runlocations=region,        notifications=contacts    )    pprint(results)```### Update ChecksUpdate checks on your NodePing account via the `update_checks.py`module.This module lets you update one or many checks at once. To upate onecheck, you will have to supply the Check ID, the type of check, and the fields you want tochange. To update many, you will have to create a dict of Check IDs.#### Updating one``` pythonfrom nodeping_api import update_checkscheckid = '201205050153W2Q4C-0J2HSIRF'checktype = 'PING'fields = {&quot;public&quot;: False, &quot;interval&quot;: 15}data = update_checks.update(token, checkid, checktype, fields)```The returned data will be the information about the check (with updatedvalues) in a dictionary format.#### Updating many``` pythonfrom nodeping_api import update_checkscheckids = {'201205050153W2Q4C-0J2HSIRF': 'PING', '201205050153W2Q4C-4RZT8MLN': 'HTTP'}fields = {&quot;public&quot;: False, &quot;interval&quot;: 15}data = update_checks.update_many(token, checkids, fields)```The returned data will be the information about the checks (with updatedvalues) in a dictionary format.### Disable ChecksDisable checks on your NodePing account via the `disable_check.py`module.This module lets you disable checks in various ways:  - By label  - By target  - By type  - AllThis will not disable checks on subaccounts.Set disable to True to disable checks, False to enable. Checks will onlybe enabled if they have been disabled via this method.&lt;https://nodeping.com/docs-api-checks.html#disableall&gt;#### Disable by LabelSpecify the label of the check to be enabled/disabled``` pythonfrom nodeping_api import disable_checklabel = &quot;I dont need this&quot;# Disables the checkdisable_check.disable_by_label(token, label, disable=True)```#### Disable by TargetSpecify the Check ID of the check to be enabled/disabled``` pythonfrom nodeping_api import disable_checkcheckid = '201205050153W2Q4C-0J2HSIRF'# Disables the check by IDdisable_check.disable_by_target(token, checkid, disable=True)```#### Disable by TypeSpecify the TYPE of checks to be disabled (such as PING checks)``` pythonfrom nodeping_api import disable_check_type = 'PING'# Disables the checks by type PINGdisable_check.disable_by_type(token, _type, disable=True)```#### Disable AllThis disables all checks on the account``` pythonfrom nodeping_api import disable_check# Disables the checks by type PINGdisable_check.disable_all(token, disable=True)# Disable all checks on subaccountdisable_check.disable_all(token, disable=True, customerid=subacc)```### Delete ChecksDelete checks on your NodePing account via the `delete_check.py` module.This module will only remove checks one at a time by supplying yourCheck ID.Example:``` pythonfrom nodeping_api import delete_checkscheckid = '201205050153W2Q4C-0J2HSIRF'data = delete_checks.remove(token, checkid)```Sample data returned:`{'ok': True, 'id': '201205050153W2Q4C-0J2HSIRF'}`Or if the check does not exist:`{'error': 'Unable to find that check'}`## Contacts### Getting ContactsGet contacts on your NodePing account via the `contacts.py` module.This module allows you to get all contacts on your account, get a singlecontact, or get by type such as sms, email, webhook.#### Get All Contacts``` pythonfrom nodeping_api import contactsall_contacts = contacts.get_all(token)```Sample data returned:    {      &quot;201205050153W2Q4C-BKPGH&quot;: {        &quot;_id&quot;: &quot;201205050153W2Q4C-BKPGH&quot;,        &quot;type&quot;: &quot;contact&quot;,        &quot;customer_id&quot;: &quot;201205050153W2Q4C&quot;,        &quot;name&quot;: &quot;Foo Bar&quot;,        &quot;custrole&quot;: &quot;owner&quot;,        &quot;addresses&quot;: {          &quot;K5SP9CQP&quot;: {            &quot;address&quot;: &quot;foo@example.com&quot;,            &quot;status&quot;: &quot;new&quot;          }        }      }    }When providing contacts for creating checks, the `K5SP9CQP` in thisexample is the contact id you will need.#### Get a Single Contact``` pythonfrom nodeping_api import contactsall_contacts = contacts.get_one(token, '201205050153W2Q4C-BKPGH')```Sample data returned:    {      &quot;201205050153W2Q4C-BKPGH&quot;: {        &quot;_id&quot;: &quot;201205050153W2Q4C-BKPGH&quot;,        &quot;type&quot;: &quot;contact&quot;,        &quot;customer_id&quot;: &quot;201205050153W2Q4C&quot;,        &quot;name&quot;: &quot;Foo Bar&quot;,        &quot;custrole&quot;: &quot;owner&quot;,        &quot;addresses&quot;: {          &quot;K5SP9CQP&quot;: {            &quot;address&quot;: &quot;foo@example.com&quot;,            &quot;status&quot;: &quot;new&quot;          }        }      }    }#### Get Contacts by Type``` pythonfrom nodeping_api import contactscontact_type = 'sms'contacts_by_type = contacts.get_by_type(token, contact_type)```### Create a ContactCreate a new contact on your account. When creating an account, supply the name,custrole (such as if they have view permissions or owner), and the addresses thatcontact will use.``` python&gt;&gt;&gt; from nodeping_api import contacts&gt;&gt;&gt; from pprint import pprint&gt;&gt;&gt; token = 'my-api-token'&gt;&gt;&gt; newaddresses = [{'address': 'me@example.com', 'type': 'email'}, {'address': 'me2@example.com', 'type': 'pagerduty'}, {'address': '1235558888', 'type': 'sms'}]&gt;&gt;&gt; name = &quot;my new contact&quot;&gt;&gt;&gt; new_contact = contacts.create_contact(token, name=name, newaddresses=newaddresses)pprint(new_contact){'_id': '2019052211307H0IX-KR9CO', 'addresses': {'JMMARFHQ': {'accountsuppressall': false, 'type': 'email',                            'address': 'me2@example.com'},               'NMYW1XC1': {'accountsuppressall': false, 'type': 'pagerduty',                            'address': 'me@example.com'},               'P080YGYO': {'accountsuppressall': false, type': 'sms',                            'address': '1235558888'}}, 'customer_id': '2019052211307H0IX', 'custrole': 'view', 'name': 'my new contact', 'sdomain': 'nodeping.com', 'type': 'contact'}```### Update a ContactYou can also update existing created contacts based on their contact ID. You canchange its name, role, add contact addresses, or modify existing ones. Note thatwhen you are modifying existing contacts, you must supply the entire list ofcontacts for that user. Missing entries will be removed.In the example below, the updated contact is exactly the same as the contactin the create contact example, but with the addresses updated as well as somenew addresses added.https://nodeping.com/docs-api-contacts.html``` python&gt;&gt;&gt; from nodeping_api import contacts&gt;&gt;&gt; from pprint import pprint&gt;&gt;&gt; token = 'my-api-token'&gt;&gt;&gt; contact_id = &quot;2019052211307H0IX-KR9CO&quot;&gt;&gt;&gt; newaddresses = [{'address': 'me@example.com'}, {'address': 'me2@example.com'}, {'address': '1235558888'}]&gt;&gt;&gt; addresses = {'JMMARFHQ': {'address': 'newme@example.com', 'accountsupressall': False}, 'NMYW1XC1': {'address': 'newme2@example.com', 'accountsupressall': False}, 'P080YGYO': {'address': '321444777', 'accountsuppressall': False}}&gt;&gt;&gt; pprint(contacts.update_contact(token, contact_id, addresses=addresses, newaddresses=newaddresses)){'_id': '2019052211307H0IX-KR9CO', 'addresses': {'8XK9OGNW': {'accountsuppressall': False,                            'address': 'me2@example.com'},               'CUSR6CTF': {'accountsuppressall': False,                            'address': 'me@example.com'},               'JMMARFHQ': {'accountsuppressall': False,                            'address': 'newme@example.com'},               'NMYW1XC1': {'accountsuppressall': False,                            'address': 'newme2@example.com'},               'P080YGYO': {'accountsuppressall': False,                            'address': '321444777'},               'VZ5HY05B': {'accountsuppressall': False,                            'address': '1235558888'}}, 'customer_id': '2019052211307H0IX', 'custrole': 'view', 'name': 'my new contact', 'sdomain': 'nodeping.com', 'type': 'contact'}```### Delete a ContactIf you no longer need a contact, you can simply delete it by specifying its ID``` pythonfrom nodeping_api import contactsfrom pprint import pprinttoken = 'my-api-token'contact_id = &quot;2019052211307H0IX-KR9CO&quot;deleted = contacts.delete_contact(token, contact_id)```With the resulting output:``` python{'id': '2019052211307H0IX-KR9CO', 'ok': True}```### Resetting a PasswordYou can reset passwords for a contact by specifying their contact ID:``` pythonfrom nodeping_api import contactstoken = 'my-api-token'contact_id = '2019052211307H0IX-KR9CO'reset = 'contacts.reset_password(token, contact_id)```This will send a new password to the email address associated with that contact.## Contact GroupsManage contact groups on your NodePing account via the `group_contacts.py` module.&lt;https://nodeping.com/docs-api-contactgroups.html&gt;This module lets you manage contact groups in these ways:  - Get contact groups  - Create contact groups  - Update contact groups  - Delete contact groups### Get Groups``` pythonfrom nodeping_api import group_contacts# Get contact groupsgroups = group_contacts.get_all(token)# Get contact groups with SubAccount IDsubaccount_id = &quot;your-subaccount-id&quot;groups = group_contacts.get_all(token, customerid=subaccount_id)```### Create GroupsTo create a contact group, a name for the group is required. You can optionallyprovide members for the contact group in a list. The member will be the key inthe addresses field for each contact. For example, if your contact data is this:```    {      &quot;201205050153W2Q4C-BKPGH&quot;: {        &quot;_id&quot;: &quot;201205050153W2Q4C-BKPGH&quot;,        &quot;type&quot;: &quot;contact&quot;,        &quot;customer_id&quot;: &quot;201205050153W2Q4C&quot;,        &quot;name&quot;: &quot;Foo Bar&quot;,        &quot;custrole&quot;: &quot;owner&quot;,        &quot;addresses&quot;: {          &quot;K5SP9CQP&quot;: {            &quot;address&quot;: &quot;foo@example.com&quot;,            &quot;status&quot;: &quot;new&quot;          }        }      }    }```Then the contact ID you need is &quot;K5SP9CQP&quot;.Example:``` pythonfrom nodeping_api import group_contactsname = &quot;sample_group&quot;my_members = [&quot;K5SP9CQP&quot;, &quot;D3RF9NQT&quot;]# Create group without membersempty_group = group_contacts.create_group(token, name)# Create group with membersnew_group = group_contacts.create_group(token, name, members=my_members)```### Update GroupUpdating the group is the same idea as creating a group.Example:``` pythonfrom nodeping_api import group_contactsname = &quot;sample_group&quot;new_name = &quot;renamed&quot;my_members = [&quot;K5SP9CQP&quot;, &quot;D3RF9NQT&quot;]# Update group with new membersupdated_group = group_contacts.update_group(token, name, members=my_members)# Rename a grouprenamed = group_contacts.update_group(token, new_name)```### Delete GroupTo delete the group, you need to provide the group id, which can be foundwhen you get the groups.Example:``` pythonfrom nodeping_api import group_contactsgroup_id = &quot;201205050153W2Q4C-G-1ZIYU&quot;# Delete the groupdeleted = group_contacts.delete_group(token, group_id)```This will return a dictionary stating that the group was deleted:`{'id': '201205050153W2Q4C-G-1ZIYU', 'ok': True}`If it failed, a dictionary with the key error will be gathered.## SchedulesManage schedules on your NodePing account via the `schedules.py` module.&lt;https://nodeping.com/docs-api-schedules.html&gt;This module lets you manage checks in these ways:  - Get schedules  - Create schedules  - Update schedules  - Delete schedules### Get Schedules``` pythonfrom nodeping_api import schedules# Get all schedulesschedules = schedules.get_schedules(token)# Get schedule by nameweekend_schedule = schedules.get_schedules(token, schedule=&quot;Weekends&quot;)```### Create SchedulesTo create a schedule, you need to provide data for each day and what itsschedule will be like.``` pythonfrom nodeping_api import schedulesdata = {'data': {'friday': {'exclude': False, 'time1': '8:00', 'time2': '23:00'},                    'monday': {'allday': True},                    'saturday': {'exclude': False, 'time1': '6:00', 'time2': '18:00'},                    'sunday': {'disabled': True},                    'thursday': {'exclude': False, 'time1': '8:00', 'time2': '22:00'},                    'tuesday': {'disabled': True},                    'wednesday': {'exclude': True, 'time1': '18:30', 'time2': '20:30'}}}schedule_name = 'myschedule'created = schedules.create_schedule(token, data, schedule_name)```### Update SchedulesUpdating schedules lets you update an entire day or a portion of it``` pythonfrom nodeping_api import schedulesdata = {'data': {'saturday': {'exclude': False, 'time1': '6:00', 'time2': '18:00'},}}schedule_name = 'myschedule'updated = schedules.update_schedule(token, data, schedule_name)```### Delete SchedulesTo delete a schedule, just provide its name``` pythonfrom nodeping_api import schedulesschedule_name = 'myschedule'deleted = schedules.delete_schedule(token, schedule)```## MaintenanceManage maintenances for your NodePing account via the `maintenance.py` module.Get, create, update, and delete maintenances as well as create ad-hocmaintenance schedules.### Get MaintenanceYou can get maintenances by id or all at once``` pythonfrom nodeping_api import maintenancetoken = &quot;my-api-token&quot;maintenanceid = &quot;NZT101&quot;# Get maintenanceall_maintenance = maintenance.get_maintenance(token, maintenanceid=maintenanceid)# Get all maintenancesone_maintenance = maintenance.get_maintenance(token)```### Create MaintenanceCreate scheduled maintenances or an ad-hoc maintenance``` pythonfrom nodeping_api import maintenancetoken = &quot;my-api-token&quot;cron = &quot;1 12 * * *&quot;duration = 30name = &quot;my_maintenance&quot;checklist = [&quot;201911191441YC6SJ-4S9OJ78G&quot;,&quot;201911191441YC6SJ-XB5HUTG6&quot;]# Create ad-hoc maintenancead_hoc = maintenance.create_maintenance(token, duration, checklist, name=name, _id=&quot;ad-hoc&quot;) # Create scheduled maintenancescheduled = maintenance.create_maintenance(token, duration, checklist,    name=name, enabled=True, cron=cron)```### Update MaintenanceUpdate existing scheduled maintenances``` pythonfrom nodeping_api import maintenancetoken = &quot;my-api-token&quot;duration = &quot;45&quot;name = &quot;new name for schedule&quot;_id = &quot;NZT101&quot;checklist = [&quot;201911191441YC6SJ-4S9OJ78G&quot;,&quot;201911191441YC6SJ-XB5HUTG6&quot;]result = maintenance.update_maintenance(token, _id, duration, checklist, name=name)```### Delete MaintenanceDelete an existing scheduled maintenance``` pythonfrom nodeping_api import maintenancetoken = &quot;my-api-token&quot;_id = &quot;NZT101&quot;deleted = maintenance.delete_maintenance(token, _id)```## NotificationsGet notifications for your NodePing account via the `notifications.py` module.When getting notifications, you can limit how many you get by the number of hours,number of notifications, if you want to collect from subaccounts or not, and bycheck ID### Notification ExamplesGetting the last 100``` pythonfrom nodeping_api import notificationstoken = 'my-api-tokenlimit = 100last_notifications = notifications.get_notifications(token, limit=limit)```Getting results for a check ID for the last 2 hours``` pythonfrom nodeping_api import notificationstoken = &quot;my-api-token&quot;span = 2check_id = '201205050153W2Q4C-0J2HSIRF'last_notifications = notifications.get_notifications(token, check_id=check_id, span=span)```## ResultsThis module lets you get results and uptime for different checks at optionally giventime durations. To get an idea of what the output will look like from the API, youcan visit the documentation that shows what outputs you will get:https://nodeping.com/docs-api-results.html### Getting Check ResultsGet the last 100 results for a check.``` pythonfrom nodeping_api import resultstoken = 'my-api-tokencheck_id = '201205050153W2Q4C-0J2HSIRF'limit = 100last_results = results.get_results(token, check_id, limit=limit)```Your output will consist of a list of dictionaries that will look like this:``` python[{  &quot;_id&quot;:&quot;201205050153W2Q4C-0J2HSIRF-1345313038648&quot;,  &quot;ci&quot;:&quot;201205050153W2Q4C&quot;,  &quot;t&quot;:&quot;DNS&quot;,  &quot;tg&quot;:&quot;8.8.8.8&quot;,  &quot;th&quot;:&quot;5&quot;,  &quot;i&quot;:&quot;5&quot;,  &quot;ra&quot;:&quot;1345313029252&quot;,  &quot;q&quot;:&quot;caRRa3op0v&quot;,  &quot;s&quot;:1345313038648,  &quot;sc&quot;:&quot;Success&quot;,  &quot;su&quot;:true,  &quot;rt&quot;:77,  &quot;e&quot;:1345313038725,  &quot;l&quot;:{&quot;1345313038648&quot;:&quot;ca&quot;}}]```### Get UptimeThis lets you get the uptime percentages for the specified check. The outputwill be a dictionary of the last days/months and their uptime and downtime.### Getting Monthly Uptime Since 2019-02With the API, monthly is the default interval, so you do not need tospecify &quot;monthly&quot; unless you want to.``` pythonfrom nodeping_api import resultsfrom pprint import pprinttoken = 'my-api-tokencheck_id = '201205050153W2Q4C-0J2HSIRF'pprint(results.get_uptime(token, check_id, start=&quot;2019-02&quot;))```With the output:``` python{'2019-02': {'down': 2808090, 'enabled': 2419200000, 'uptime': 99.884}, '2019-03': {'down': 41679682, 'enabled': 2678398201, 'uptime': 98.444}, '2019-04': {'down': 4511825, 'enabled': 2592000000, 'uptime': 99.826}, '2019-05': {'down': 764817, 'enabled': 2678359942, 'uptime': 99.971}, '2019-06': {'down': 5762929, 'enabled': 2592000000, 'uptime': 99.778}, '2019-07': {'down': 3585847, 'enabled': 2661778859, 'uptime': 99.865}, 'total': {'down': 59113190, 'enabled': 15621737002, 'uptime': 99.622}}```### Getting Daily Uptime In Time RangeYou can also get daily results on uptime. In addition to that, you canspecify the start/end dates. In this case, we will start on2019-07-01 and collect to 2019-07-15``` pythonfrom nodeping_api import resultsfrom pprint import pprinttoken = 'my-api-tokencheck_id = '201205050153W2Q4C-0J2HSIRF'start=&quot;2019-07-01&quot;end=&quot;2019-07-25&quot;pprint(results.get_uptime(token, check_id, interval=&quot;days&quot;, start=start, end=end))```With the output:``` python{'2019-07-01': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-02': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-03': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-04': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-05': {'down': 140740, 'enabled': 86400000, 'uptime': 99.837}, '2019-07-06': {'down': 417545, 'enabled': 86400000, 'uptime': 99.517}, '2019-07-07': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-08': {'down': 144979, 'enabled': 86400000, 'uptime': 99.832}, '2019-07-09': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-10': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-11': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-12': {'down': 699479, 'enabled': 86400000, 'uptime': 99.19}, '2019-07-13': {'down': 0, 'enabled': 86400000, 'uptime': 100}, '2019-07-14': {'down': 0, 'enabled': 86400000, 'uptime': 100}, 'total': {'down': 1402743, 'enabled': 1209600000, 'uptime': 99.884}}```Note that all the results you get will also have a total downtimefor that give time range.### Current EventsRetrieves information about current &quot;events&quot; for checks. Events include down eventsand disabled checks. If you need a list of all checks with their passing/failingstate, please use the 'checks' list rather than this 'current' call.``` pythonfrom nodeping_api import resultstoken = 'my-api-tokencurrent = results.get_current(token)```## InformationGet probe and location information via the `information.py` module.### Get Probe InfoYou can get information about all probes or a specific probe.This information mirrors what is available on our FAQ:https://nodeping.com/faq.html#ip-addresses#### Get NY Probe Info``` pythonfrom nodeping_api import informationfrom pprint import pprinttoken = 'my-api-token'probe = &quot;ny&quot;ny_probe = information.get_probe(token, probe=probe)```With the output:``` python{'country': 'US', 'ipv4': '66.23.202.26', 'ipv6': '2605:9f80:c000:127::2', 'location': 'ny', 'locationname': 'New York City, New York', 'region': 'nam', 'regionname': 'North America'}```### Get Location InformationWith this function, you can get all probe information oainformation about probes in a region.#### Get North America Info``` pythonfrom nodeping_api import informationfrom pprint import pprinttoken = 'my-api-token'location = 'nam'nam_location = information.get_location(token, location=location)```With the output:``` python{'locations': ['il',               'tx',               'nj',               'ga',               'ca',               'co',               'wa',               'ny',               'py',               'oh',               'ut',               'or',               'fl'], 'regionname': 'North America'}```## DiagnosticsRequest diagnostic information from a probe or AGENT via the `diagnostics.py` module.Find more information on the diagnostics functionality [here](https://nodeping.com/docs-api-diagnostics.html)and more information about the diagnostics tool [here](https://nodeping.com/diagnostictools.html).### Initiate an MTR``` pythonfrom nodeping_api import diagnosticstoken = 'my-api-token'checkid = 'my-check-id'location = 'ny'tool = 'mtr'# If target not specified, the target will be taken from the check datatarget = 'example.com'count = 25result = diagnostics.get(token, checkid, location, tool, target=target, count=count)```This will run an MTR and return the output in a dictionary format.### Do a DNS Lookup``` pythonfrom nodeping_api import diagnosticstoken = 'my-api-token'checkid = 'my-check-id'location = 'ny'tool = 'dig'target = 'example.com'dnstype = 'AAAA'result = diagnostics.get(token, checkid, location, tool, target=target, dnstype=dnstype)```</longdescription>
</pkgmetadata>