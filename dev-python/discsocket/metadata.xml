<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># discsocketPython framework for Discord interactions.# Installation`pip install discsocket`# IntroductionThis is the code needed for a minimal application with an on_ready event```pyimport discsocketsocket = discsocket.Socket()# Event names go in the event decorator# The function can be named whatever@socket.event('ready')async def ready():  print(f&quot;{socket.user.username} is connected&quot;) socket.run('token')```or if you want to make the bot function as a class```pyimport discsocketclass Socket(discsocket.Socket):    def __init__(self):        super().__init__(gateway_version=8)    # Events in a class structure won't require a decorator    # and instead follow the 'on_' + gateway_event format    async def on_ready(self):        print(f&quot;{self.user.username} is online&quot;)if __name__ == '__main__':    Socket().run('token')```# ExtensionsExtensions work to separate your code into different files so it is not all in a single file ```pyimport discsocketfrom discsocket import extclass Boop(ext.Extension):    def __init__(self, socket):        self.socket = socket    # Example of a command within an extension    @ext.Extension.command('boop', discsocket.utils.SLASH)    async def boop(self, context: discsocket.models.BaseContext):        await context.callback(content='boop!')    # Example of a listener within an extension    @ext.Extension.listener('message_create')    async def message(self, message):        print(message['content'])def init_ext(socket):    socket.add_ext(Boop(socket))```As an example, the above extension is in a folder called 'extensions'```pyimport discsocketimport pathlibclass Socket(discsocket.Socket):    def __init__(self):        super().__init__(gateway_version=8)        self.load()    def load(self):        for ext in [f'{p.parent}.{p.stem}' for p in pathlib.Path('extensions').glob('*.py')]:            try:                self.add_extension(ext)            except Exception as e:                print(f&quot;Failed to load {ext}.\n-&gt; {e}&quot;)            else:                print(f&quot;Loaded {ext}&quot;)    async def on_ready(self):        print(f&quot;{self.user.username} is online&quot;)if __name__ == '__main__':    Socket().run('token')```    </longdescription>
</pkgmetadata>