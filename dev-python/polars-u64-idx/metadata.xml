<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/pola-rs/polars-static/master/logos/polars_github_logo_rect_dark_name.svg&quot;&gt;  &lt;br&gt;&lt;/h1&gt;&lt;div align=&quot;center&quot;&gt;  &lt;a href=&quot;https://docs.rs/polars/latest/polars/&quot;&gt;    &lt;img src=&quot;https://docs.rs/polars/badge.svg&quot; alt=&quot;rust docs&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/pola-rs/polars/actions&quot;&gt;    &lt;img src=&quot;https://github.com/pola-rs/polars/workflows/Build%20and%20test/badge.svg&quot; alt=&quot;Build and test&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://crates.io/crates/polars&quot;&gt;    &lt;img src=&quot;https://img.shields.io/crates/v/polars.svg&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/polars/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/polars.svg&quot; alt=&quot;PyPi Latest Release&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://www.npmjs.com/package/nodejs-polars&quot;&gt;    &lt;img src=&quot;https://img.shields.io/npm/v/nodejs-polars.svg&quot; alt=&quot;NPM Latest Release&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://rpolars.r-universe.dev&quot;&gt;    &lt;img src=&quot;https://rpolars.r-universe.dev/badges/polars&quot; alt=&quot;R-universe Latest Release&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://doi.org/10.5281/zenodo.7697217&quot;&gt;    &lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.7697217.svg&quot; alt=&quot;DOI Latest Release&quot;/&gt;  &lt;/a&gt;&lt;/div&gt;&lt;p align=&quot;center&quot;&gt;  &lt;b&gt;Documentation&lt;/b&gt;:  &lt;a href=&quot;https://pola-rs.github.io/polars/py-polars/html/reference/index.html&quot;&gt;Python&lt;/a&gt;  -  &lt;a href=&quot;https://pola-rs.github.io/polars/polars/index.html&quot;&gt;Rust&lt;/a&gt;  -  &lt;a href=&quot;https://pola-rs.github.io/nodejs-polars/index.html&quot;&gt;Node.js&lt;/a&gt;  -  &lt;a href=&quot;https://rpolars.github.io/index.html&quot;&gt;R&lt;/a&gt;  |  &lt;b&gt;StackOverflow&lt;/b&gt;:  &lt;a href=&quot;https://stackoverflow.com/questions/tagged/python-polars&quot;&gt;Python&lt;/a&gt;  -  &lt;a href=&quot;https://stackoverflow.com/questions/tagged/rust-polars&quot;&gt;Rust&lt;/a&gt;  -  &lt;a href=&quot;https://stackoverflow.com/questions/tagged/nodejs-polars&quot;&gt;Node.js&lt;/a&gt;  -  &lt;a href=&quot;https://stackoverflow.com/questions/tagged/r-polars&quot;&gt;R&lt;/a&gt;  |  &lt;a href=&quot;https://pola-rs.github.io/polars-book/&quot;&gt;User Guide&lt;/a&gt;  |  &lt;a href=&quot;https://discord.gg/4UfP5cfBE7&quot;&gt;Discord&lt;/a&gt;&lt;/p&gt;## Polars: Blazingly fast DataFrames in Rust, Python, Node.js, R and SQLPolars is a DataFrame interface on top of an OLAP Query Engine implemented in Rust using[Apache Arrow Columnar Format](https://arrow.apache.org/docs/format/Columnar.html) as the memory model.- Lazy | eager execution- Multi-threaded- SIMD- Query optimization- Powerful expression API- Hybrid Streaming (larger than RAM datasets)- Rust | Python | NodeJS | R | ...To learn more, read the [User Guide](https://pola-rs.github.io/polars-book/).## Python```python&gt;&gt;&gt; import polars as pl&gt;&gt;&gt; df = pl.DataFrame(...     {...         &quot;A&quot;: [1, 2, 3, 4, 5],...         &quot;fruits&quot;: [&quot;banana&quot;, &quot;banana&quot;, &quot;apple&quot;, &quot;apple&quot;, &quot;banana&quot;],...         &quot;B&quot;: [5, 4, 3, 2, 1],...         &quot;cars&quot;: [&quot;beetle&quot;, &quot;audi&quot;, &quot;beetle&quot;, &quot;beetle&quot;, &quot;beetle&quot;],...     }... )# embarrassingly parallel execution &amp; very expressive query language&gt;&gt;&gt; df.sort(&quot;fruits&quot;).select(...     &quot;fruits&quot;,...     &quot;cars&quot;,...     pl.lit(&quot;fruits&quot;).alias(&quot;literal_string_fruits&quot;),...     pl.col(&quot;B&quot;).filter(pl.col(&quot;cars&quot;) == &quot;beetle&quot;).sum(),...     pl.col(&quot;A&quot;).filter(pl.col(&quot;B&quot;) &gt; 2).sum().over(&quot;cars&quot;).alias(&quot;sum_A_by_cars&quot;),...     pl.col(&quot;A&quot;).sum().over(&quot;fruits&quot;).alias(&quot;sum_A_by_fruits&quot;),...     pl.col(&quot;A&quot;).reverse().over(&quot;fruits&quot;).alias(&quot;rev_A_by_fruits&quot;),...     pl.col(&quot;A&quot;).sort_by(&quot;B&quot;).over(&quot;fruits&quot;).alias(&quot;sort_A_by_B_by_fruits&quot;),... )shape: (5, 8)┌──────────┬──────────┬──────────────┬─────┬─────────────┬─────────────┬─────────────┬─────────────┐│ fruits   ┆ cars     ┆ literal_stri ┆ B   ┆ sum_A_by_ca ┆ sum_A_by_fr ┆ rev_A_by_fr ┆ sort_A_by_B ││ ---      ┆ ---      ┆ ng_fruits    ┆ --- ┆ rs          ┆ uits        ┆ uits        ┆ _by_fruits  ││ str      ┆ str      ┆ ---          ┆ i64 ┆ ---         ┆ ---         ┆ ---         ┆ ---         ││          ┆          ┆ str          ┆     ┆ i64         ┆ i64         ┆ i64         ┆ i64         │╞══════════╪══════════╪══════════════╪═════╪═════════════╪═════════════╪═════════════╪═════════════╡│ &quot;apple&quot;  ┆ &quot;beetle&quot; ┆ &quot;fruits&quot;     ┆ 11  ┆ 4           ┆ 7           ┆ 4           ┆ 4           ││ &quot;apple&quot;  ┆ &quot;beetle&quot; ┆ &quot;fruits&quot;     ┆ 11  ┆ 4           ┆ 7           ┆ 3           ┆ 3           ││ &quot;banana&quot; ┆ &quot;beetle&quot; ┆ &quot;fruits&quot;     ┆ 11  ┆ 4           ┆ 8           ┆ 5           ┆ 5           ││ &quot;banana&quot; ┆ &quot;audi&quot;   ┆ &quot;fruits&quot;     ┆ 11  ┆ 2           ┆ 8           ┆ 2           ┆ 2           ││ &quot;banana&quot; ┆ &quot;beetle&quot; ┆ &quot;fruits&quot;     ┆ 11  ┆ 4           ┆ 8           ┆ 1           ┆ 1           │└──────────┴──────────┴──────────────┴─────┴─────────────┴─────────────┴─────────────┴─────────────┘```## SQL```python&gt;&gt;&gt; # create a sql context&gt;&gt;&gt; context = pl.SQLContext()&gt;&gt;&gt; # register a table&gt;&gt;&gt; table = pl.scan_ipc(&quot;file.arrow&quot;)&gt;&gt;&gt; context.register(&quot;my_table&quot;, table)&gt;&gt;&gt; # the query we want to run&gt;&gt;&gt; query = &quot;&quot;&quot;... SELECT sum(v1) as sum_v1, min(v2) as min_v2 FROM my_table... WHERE id1 = 'id016'... LIMIT 10... &quot;&quot;&quot;&gt;&gt;&gt; ## OPTION 1&gt;&gt;&gt; # run query to materialization&gt;&gt;&gt; context.query(query) shape: (1, 2) ┌────────┬────────┐ │ sum_v1 ┆ min_v2 │ │ ---    ┆ ---    │ │ i64    ┆ i64    │ ╞════════╪════════╡ │ 298268 ┆ 1      │ └────────┴────────┘&gt;&gt;&gt; ## OPTION 2&gt;&gt;&gt; # Don't materialize the query, but return as LazyFrame&gt;&gt;&gt; # and continue in python&gt;&gt;&gt; lf = context.execute(query)&gt;&gt;&gt; (lf.join(other_table)...      .groupby(&quot;foo&quot;)...      .agg(...     pl.col(&quot;sum_v1&quot;).count()... ).collect())```SQL commands can also be ran directly from your terminal.```bash&gt; cargo install polars-cli --locked# run an inline sql query&gt; polars -c &quot;SELECT sum(v1) as sum_v1, min(v2) as min_v2 FROM read_ipc('file.arrow') WHERE id1 = 'id016' LIMIT 10&quot;# run interactively&gt; polarsPolars CLI v0.1.0Type .help for help.&gt; SELECT sum(v1) as sum_v1, min(v2) as min_v2 FROM read_ipc('file.arrow') WHERE id1 = 'id016' LIMIT 10;```Refer to [polars-cli](./polars-cli/README.md) for more information.## Performance 🚀🚀### Blazingly fastPolars is very fast. In fact, it is one of the best performing solutions available.See the results in [DuckDB's db-benchmark](https://duckdblabs.github.io/db-benchmark/).In the [TPCH benchmarks](https://www.pola.rs/benchmarks.html) polars is orders of magnitudes faster than pandas, dask, modin and vaexon full queries (including IO).### LightweightPolars is also very lightweight. It comes with zero required dependencies, and this shows in the import times:- polars: 70ms- numpy: 104ms- pandas: 520ms### Handles larger than RAM dataIf you have data that does not fit into memory, polars lazy is able to process your query (or parts of your query) in astreaming fashion, this drastically reduces memory requirements so you might be able to process your 250GB dataset on yourlaptop. Collect with `collect(streaming=True)` to run the query streaming. (This might be a little slower, butit is still very fast!)## Setup### PythonInstall the latest polars version with:```shpip install polars```We also have a conda package (`conda install -c conda-forge polars`), however pip is the preferred way to install Polars.Install Polars with all optional dependencies.```shpip install 'polars[all]'pip install 'polars[numpy,pandas,pyarrow]'  # install a subset of all optional dependencies```You can also install the dependencies directly.| Tag        | Description                                                                                                                           || ---------- | ------------------------------------------------------------------------------------------------------------------------------------- || all        | Install all optional dependencies (all of the following)                                                                              || pandas     | Install with Pandas for converting data to and from Pandas Dataframes/Series                                                          || numpy      | Install with numpy for converting data to and from numpy arrays                                                                       || pyarrow    | Reading data formats using PyArrow                                                                                                    || fsspec     | Support for reading from remote file systems                                                                                          || connectorx | Support for reading from SQL databases                                                                                                || xlsx2csv   | Support for reading from Excel files                                                                                                  || deltalake  | Support for reading from Delta Lake Tables                                                                                            || timezone   | Timezone support, only needed if 1. you are on Python &lt; 3.9 and/or 2. you are on Windows, otherwise no dependencies will be installed |Releases happen quite often (weekly / every few days) at the moment, so updating polars regularly to get the latest bugfixes / features might not be a bad idea.### RustYou can take latest release from `crates.io`, or if you want to use the latest features / performance improvementspoint to the `main` branch of this repo.```tomlpolars = { git = &quot;https://github.com/pola-rs/polars&quot;, rev = &quot;&lt;optional git tag&gt;&quot; }```Required Rust version `&gt;=1.62`## ContributingWant to contribute? Read our [contribution guideline](./CONTRIBUTING.md).## Python: compile polars from sourceIf you want a bleeding edge release or maximal performance you should compile **polars** from source.This can be done by going through the following steps in sequence:1. Install the latest [Rust compiler](https://www.rust-lang.org/tools/install)2. Install [maturin](https://maturin.rs/): `pip install maturin`3. Choose any of:   - Fastest binary, very long compile times:     ```sh     $ cd py-polars &amp;&amp; maturin develop --release -- -C target-cpu=native     ```   - Fast binary, Shorter compile times:     ```sh     $ cd py-polars &amp;&amp; maturin develop --release -- -C codegen-units=16 -C lto=thin -C target-cpu=native     ```Note that the Rust crate implementing the Python bindings is called `py-polars` to distinguish from the wrappedRust crate `polars` itself. However, both the Python package and the Python module are named `polars`, so youcan `pip install polars` and `import polars`.## Use custom Rust function in python?Extending polars with UDFs compiled in Rust is easy. We expose pyo3 extensions for `DataFrame` and `Series`data structures. See more in https://github.com/pola-rs/pyo3-polars.## Going big...Do you expect more than `2^32` ~4,2 billion rows? Compile polars with the `bigidx` feature flag.Or for python users install `pip install polars-u64-idx`.Don't use this unless you hit the row boundary as the default polars is faster and consumes less memory.## LegacyDo you want polars to run on an old CPU (e.g. dating from before 2011)? Install `pip polars-lts-cpu`. This polars project iscompiled without [avx](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions) target features.## AcknowledgementsDevelopment of Polars is proudly powered by[![Xomnia](https://raw.githubusercontent.com/pola-rs/polars-static/master/sponsors/xomnia.png)](https://www.xomnia.com/)## Sponsors[&lt;img src=&quot;https://raw.githubusercontent.com/pola-rs/polars-static/master/sponsors/xomnia.png&quot; height=&quot;40&quot; /&gt;](https://www.xomnia.com/) &amp;emsp; [&lt;img src=&quot;https://www.jetbrains.com/company/brand/img/jetbrains_logo.png&quot; height=&quot;50&quot; /&gt;](https://www.jetbrains.com)</longdescription>
</pkgmetadata>