<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;ipyflex&lt;/h1&gt;[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/trungleduc/ipyflex/master?urlpath=lab%2Ftree%2Fexamples) ![Build](https://github.com/trungleduc/ipyflex/actions/workflows/build.yml/badge.svg) ![Test](https://github.com/trungleduc/ipyflex/actions/workflows/ui-tests.yml/badge.svg) [![Documentation Status](https://readthedocs.org/projects/ipyflex/badge/?version=latest)](http://ipyflex.readthedocs.io/?badge=latest) [![GitHub license](https://badgen.net/github/license/trungleduc/ipyflex)](https://github.com/trungleduc/ipyflex/blob/master/LICENSE) [![PyPI version](https://badge.fury.io/py/ipyflex.svg)](https://badge.fury.io/py/ipyflex) [![Conda Version](https://img.shields.io/conda/vn/conda-forge/ipyflex.svg)](https://anaconda.org/conda-forge/ipyflex)&lt;h2 align=&quot;center&quot;&gt; A WYSIWYG layout editor for Jupyter widgets &lt;/h1&gt;Based on the React library [FlexLayout](https://github.com/caplin/FlexLayout), ipyflex allows you to compose the sophisticated dashboard layouts from existing Jupyter widgets without coding. It supports multiple tabs, resizable cards, drag-and-drop layout, save dashboard template to disk, and many more.     ## Example### Dynamic layout![Dynamic layout](./docs/source/images/ipyflex.gif)### Widget factory![Widget factory](./docs/source/images/ipyflex-factory.gif)### Configurable headerhttps://user-images.githubusercontent.com/4451292/149482302-30579785-4d8e-4d50-9bcc-249bea4a9d95.mp4### Stock indexes dashboard![Stock indexes](./docs/source/images/ipyflex-stock2.gif)## DocumentationYou can read the documentation following this link: https://ipyflex.readthedocs.io## InstallationYou can install using `pip`:```bashpip install ipyflex```Or using `conda`:```bashconda install -c conda-forge  ipyflex```And if you use jupyterlab &lt;= 2:```bashmamba install -c conda-forge yarnjupyter labextension install @jupyter-widgets/jupyterlab-manager ipyflex```## Development InstallationCreate a dev environment:```bashconda create -n ipyflex-dev -c conda-forge nodejs yarn python jupyterlabconda activate ipyflex-dev```Install the python. This will also build the TS package.```bashpip install -e &quot;.[test, examples]&quot;```When developing your extensions, you need to manually enable your extensions with thenotebook / lab frontend. For lab, this is done by the command:```jupyter labextension develop --overwrite .yarn run build```For classic notebook, you need to run:```jupyter nbextension install --sys-prefix --symlink --overwrite --py ipyflexjupyter nbextension enable --sys-prefix --py ipyflex```Note that the `--symlink` flag doesn't work on Windows, so you will here have to runthe `install` command every time that you rebuild your extension. For certain installationsyou might also need another flag instead of `--sys-prefix`, but we won't cover the meaningof those flags here.### How to see your changes#### Typescript:If you use JupyterLab to develop then you can watch the source directory and run JupyterLab at the same time in differentterminals to watch for changes in the extension's source and automatically rebuild the widget.```bash# Watch the source directory in one terminal, automatically rebuilding when neededyarn run watch# Run JupyterLab in another terminaljupyter lab```After a change wait for the build to finish and then refresh your browser and the changes should take effect.#### Python:If you make a change to the python code then you will need to restart the notebook kernel to have it take effect.## ThanksThe following libraries / open-source projects were used or inspired in the development of ipyflex: * [FlexLayout](https://github.com/caplin/FlexLayout) * [CoSApp Lab](https://gitlab.com/cosapp/cosapp_lab)</longdescription>
</pkgmetadata>