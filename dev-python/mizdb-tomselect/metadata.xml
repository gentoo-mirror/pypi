<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># TomSelect for Django (MIZDB)Django autocomplete widgets and views using [TomSelect](https://tom-select.js.org/).![Example of the MIZSelect widget](https://raw.githubusercontent.com/Actionb/mizdb-tomselect/main/demo/images/mizselect.png &quot;MIZSelect preview&quot;)Note that this was written specifically with the [MIZDB](https://github.com/Actionb/MIZDB) app in mind - it may notapply to your app.&lt;!-- TOC --&gt;* [TomSelect for Django (MIZDB)](#tomselect-for-django-mizdb)  * [Installation](#installation)  * [Usage](#usage)  * [Widgets](#widgets)    * [MIZSelect](#mizselect)    * [MIZSelectTabular](#mizselecttabular)      * [Adding more columns](#adding-more-columns)    * [MIZSelectMultiple &amp; MIZSelectTabularMultiple](#mizselectmultiple--mizselecttabularmultiple)  * [Function &amp; Features](#function--features)    * [Searching](#searching)    * [Option creation](#option-creation)      * [AJAX request](#ajax-request)    * [Changelist link](#changelist-link)    * [Inline edit link](#inline-edit-link)    * [Filter against values of another field](#filter-against-values-of-another-field)    * [Add &amp; Edit popup response](#add--edit-popup-response)    * [Overwrite settings](#overwrite-settings)  * [Development &amp; Demo](#development--demo)&lt;!-- TOC --&gt;----## InstallationInstall:```bashpip install -U mizdb-tomselect```## UsageAdd to installed apps:```pythonINSTALLED_APPS = [    ...    &quot;mizdb_tomselect&quot;]```Configure an endpoint for autocomplete requests:```python# urls.pyfrom django.urls import pathfrom mizdb_tomselect.views import AutocompleteViewurlpatterns = [    ...    path('autocomplete/', AutocompleteView.as_view(), name='my_autocomplete_view')]```Use the widgets in a form.```pythonfrom django import formsfrom mizdb_tomselect.widgets import MIZSelect, MIZSelectTabularfrom .models import City, Personclass MyForm(forms.Form):    city = forms.ModelChoiceField(        City.objects.all(),        widget=MIZSelect(City, url='my_autocomplete_view'),    )    # Display results in a table, with additional columns for fields     # 'first_name' and 'last_name':    person = forms.ModelChoiceField(        Person.objects.all(),        widget=MIZSelectTabular(            Person,            url='my_autocomplete_view',            search_lookup=&quot;full_name__icontains&quot;,            # for extra columns pass a mapping of model field: column header label            extra_columns={'first_name': &quot;First Name&quot;, &quot;last_name&quot;: &quot;Last Name&quot;},            # The column header label for the labelField column            label_field_label='Full Name',        ),    )``` NOTE: Make sure to include [bootstrap](https://getbootstrap.com/docs/5.2/getting-started/download/) somewhere. Forexample in the template:```html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;MIZDB TomSelect Demo&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js&quot;            integrity=&quot;sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4&quot;            crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;          integrity=&quot;sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65&quot; crossorigin=&quot;anonymous&quot;&gt;    {{ form.media }}&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt;    &lt;form&gt;        {% csrf_token %}        {{ form.as_div }}        &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Save&lt;/button&gt;    &lt;/form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;```----## WidgetsThe widgets pass attributes necessary to make autocomplete requests to theHTML element via the dataset property. The TomSelect element is then initializedfrom the attributes in the dataset property.### MIZSelectBase autocomplete widget. The arguments of MIZSelect are:| Argument       | Default value                          | Description                                                                                    ||----------------|----------------------------------------|------------------------------------------------------------------------------------------------|| model          | **required**                           | the model class that provides the choices                                                      || url            | `&quot;autocomplete&quot;`                       | view name of the autocomplete view                                                             || value_field    | `f&quot;{model._meta.pk.name}&quot;`             | model field that provides the value of an option                                               || label_field    | `getattr(model, &quot;name_field&quot;, &quot;name&quot;)` | model field that provides the label of an option                                               || search_lookup  | `f&quot;{label_field}__icontains&quot;`          | the lookup to use when filtering the results                                                   || create_field   |                                        | model field to create new objects with ([see below](#ajax-request))                            || changelist_url |                                        | view name of the changelist view for this model ([see below](#changelist-link))                || add_url        |                                        | view name of the add view for this model([see below](#option-creation))                        || edit_url       |                                        | view name of the edit view for this model([see below](#inline-edit-link))                      || filter_by      |                                        | a 2-tuple defining an additional filter ([see below](#filter-against-values-of-another-field)) || can_remove     | True                                   | whether to display a remove button next to each item                                           |### MIZSelectTabularThis widget displays the results in tabular form. A table header will be addedto the dropdown. By default, the table contains two columns: one column for the choicevalue (commonly the &quot;ID&quot; of the option) and one column for the choice label (thehuman-readable part of the choice).![Tabular select preview](https://raw.githubusercontent.com/Actionb/mizdb-tomselect/main/demo/images/tabular_default.png &quot;Tabular select preview&quot;)MIZSelectTabular has the following additional arguments:| Argument          | Default value                   | Description                       ||-------------------|---------------------------------|-----------------------------------|| extra_columns     |                                 | a mapping for additional columns  || value_field_label | `f&quot;{value_field.title()}&quot;`      | table header for the value column || label_field_label | `f&quot;{model._meta.verbose_name}&quot;` | table header for the label column |#### Adding more columnsTo add more columns, pass a `result attribute name: column label` mapping to the widgetargument `extra_columns`. For example:```python# models.pyclass Person(models.Model):    name = models.CharField(max_length=100, blank=True)    dob = models.DateField(blank=True, null=True)    city = models.ForeignKey(&quot;City&quot;, on_delete=models.SET_NULL, blank=True, null=True)# forms.py class TabularForm(forms.Form):    person = forms.ModelChoiceField(        Person.objects.all(),        widget=MIZSelectTabular(            Person,            extra_columns={&quot;dob&quot;: &quot;Date of Birth&quot;, &quot;city__name&quot;: &quot;City&quot;},            label_field_label=&quot;Name&quot;,        ),        required=False,    )```![Tabular select with more columns](https://raw.githubusercontent.com/Actionb/mizdb-tomselect/main/demo/images/tabular.png &quot;Tabular select with more columns&quot;)The column label is the table header label for a given column (here: `Date of Birth` and `City`).The attribute name tells TomSelect what value to look up on a result for the column (here: model field `dob` and lookupexpression `city__name` on the relation field `city`).**Important**: that means that the result visible to TomSelect must have an attributeor property with that name or the column will remain empty.The results for TomSelect are created by the view calling `values()` on theresult queryset, so you must make sure that the attribute name is availableon the view's root queryset as either a model field or as an annotation.### MIZSelectMultiple &amp; MIZSelectTabularMultipleVariants of the above widgets that allow selecting multiple options.----## Function &amp; Features### SearchingThe AutocompleteView filters the result queryset against the `search_lookup`passed to the widget. The default value for the lookup is `name__icontains`.Overwrite the `AutocompleteView.search` method to modify the search process.```pythonclass MyAutocompleteView(AutocompleteView):    def search(self, request, queryset, q):        # Filter using your own queryset method:        return queryset.search(q)```### Option creationTo enable option creation in the dropdown, pass the view name of theadd view for the given model to the widget. This will add an 'Add' button to thebottom of the dropdown.```python# urls.pyurlpatterns = [    ...    path('autocomplete/', AutocompleteView.as_view(), name='my_autocomplete_view'),    path('city/add/', CityCreateView.as_view(), name='city_add'),]# forms.pywidget = MIZSelect(City, url='my_autocomplete_view', add_url='city_add')```Clicking on that button sends the user to the add page of the model.&gt; NOTE: Also see [Add &amp; Edit popup response](#add--edit-popup-response)#### AJAX requestIf `create_field` was also passed to the widget, clicking on the button willcreate a new object using an AJAX POST request to the autocomplete URL. Theautocomplete view will use the search term that the user put in on the`create_field` to create the object:```pythonclass AutocompleteView:    def create_object(self, data):        &quot;&quot;&quot;Create a new object with the given data.&quot;&quot;&quot;        return self.model.objects.create(**{self.create_field: data[self.create_field]})```Override the view's `create_object` method to change the creation process.### Changelist linkThe dropdown will include a link to the changelist of the given model if youpass in the view name for the changelist view.```python# urls.pyurlpatterns = [    ...    path('autocomplete/', AutocompleteView.as_view(), name='my_autocomplete_view'),    path('city/change/', CityChangelistView.as_view(), name='city_changelist'),]# forms.pywidget = MIZSelect(City, url='my_autocomplete_view', changelist_url='city_changelist')```### Inline edit linkProvide a `edit_url` to attach a link to the edit/change page for each selected item.```python# urls.pyurlpatterns = [    ...    path('person/edit/&lt;path:object_id&gt;/', PersonChangeView.as_view(), name='person_change'),]# forms.pywidget = MIZSelect(Person, edit_url='person_change')```![Preview of the edit button](https://raw.githubusercontent.com/Actionb/mizdb-tomselect/main/demo/images/edit2.png &quot;Edit button preview&quot;)&gt; NOTE: Also see [Add &amp; Edit popup response](#add--edit-popup-response)### Filter against values of another fieldUse the `filter_by` argument to restrict the available options to the value ofanother field. The parameter must be a 2-tuple: `(name_of_the_other_form_field, django_field_lookup)````python# models.pyclass Person(models.Model):    name = models.CharField(max_length=50)    pob = models.ForeignKey(&quot;Place of Birth&quot;, on_delete=models.SET_NULL, blank=True, null=True)class City(models.Model):    name = models.CharField(max_length=50)# forms.pyclass PersonCityForm(forms.Form):    city = forms.ModelChoiceField(queryset=City.objects.filter(is_capitol=True))    person = forms.ModelChoiceField(        queryset=Person.objects.all(),        widget=MIZSelect(            Person,            filter_by=(&quot;city&quot;, &quot;pob_id&quot;)        )    )```This will result in the Person result queryset to be filtered against`pob_id` with the current value of the `city` formfield.![Example for the filter_by argument](https://raw.githubusercontent.com/Actionb/mizdb-tomselect/main/demo/images/filterby.png &quot;Filtering example&quot;)NOTE: When using `filter_by`, the declaring element now **requires** that the other fieldprovides a value. If the other field does not have a value, the search will notreturn any results.### Add &amp; Edit popup responseAfter adding new objects with the 'add' button or after editing selected objects with the'edit' button, the options of the 'parent' form will still need to be updated.This can be done by using the `PopupResponseMixin` view mixin with your CreateViews and UpdateViews.```pythonfrom mizdb_tomselect.views import PopupResponseMixinclass CityCreateView(PopupResponseMixin, CreateView):    ...class PersonChangeView(PopupResponseMixin, UpdateView):    ...```You also need to modify the template for the Create-/UpdateView by adding a hidden field to the form:```html&lt;form&gt;...{% if is_popup %}    &lt;input type=&quot;hidden&quot; name=&quot;{{ is_popup_var }}&quot; value=&quot;1&quot;&gt;{% endif %}...&lt;/form&gt;```With all this in place, tabs opened from (left-)clicking an add or edit button will betreated as a popup. When submitting a popup form, the view redirects to a popup responsetemplate. That template loads some javascript that updates the form of the opener windowthat created the popup. The popup window or tab is then closed.  This is, roughly, a slimmed down version of how django admin handles popups for related objects.### Overwrite settingsTo change MIZSelect or [TomSelect settings](https://tom-select.js.org/docs/), you can add a handler for the `initMIZSelect` event.The event is dispatched before the TomSelect constructor is called. The target of the event is the element that is about to be initialized.You can pass your own settings to the init function `initMIZSelect` that is attached to the target element.For example, to overwrite the title of the remove buttons:```javascriptwindow.addEventListener('initMIZSelect', (e) =&gt; {  const elem = e.target  const mySettings = { plugins: { remove_button: { title: 'Remove This' } } }  elem.initMIZSelect(mySettings)})```The settings will be merged with the default MIZSelect settings, and the TomSelect constructorwill be called with the merged settings.----## Development &amp; Demo```bashpython3 -m venv venvsource venv/bin/activatemake init```See the demo for a preview: run `make init-demo` and then start the demo server `python demo/manage.py runserver`.Run tests with `make test` or `make tox`. To install required browsers for playwright: `playwright install`.See the makefile for other commands.</longdescription>
</pkgmetadata>