<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OSINTBuddy plugins and extensionsThe plugins library for [jerlendds/osintbuddy](https://github.com/jerlendds/osintbuddy).![ob-demo 2023-07-14 20-51](https://github.com/jerlendds/osintbuddy/assets/29207058/b69e08f3-ac2a-4cef-9a85-713e7df6b12f)***Please note:** [OSINTBuddy plugins](https://github.com/jerlendds/osintbuddy-plugins) are still in early alpha and breaking changes may occasionally occur in the API. That said, if you remain on the `main` branch and avoid accessing protected methods we will try our best to avoid introducing breaking changes.*### **NOTICE:** There has been a major update to plugins, any created plugins will have to be updated to use the new, and more convenient data access method:  - Remove `name` from any `ob.Plugin`  - Update `node['data']` access to be `node.label_defined_in_node`    - Please see the introduction to the plugin system belowThe osintbuddy plugin system at its core is very simple. An `OBRegistry` class holds all registered `OBPlugin` classes within the application. This registry is loaded into the [osintbuddy application](https://github.com/jerlendds/osintbuddy/) where it is then used to load the available entities for the user when they access a project graph, load transforms when a user opens the context menu of a node, and perform transformations which expect a `Plugin.blueprint()` to be returned. The returned data of a transform decorated method will be automatically mapped to a [JanusGraph](https://janusgraph.org/) database through [gremlin](https://tinkerpop.apache.org/) according to the labels *(as snakecase)* you previously set in the classes `node` for whatever `Plugin.blueprint()`you return. To make this a bit more clear please see the below example...```pyfrom pydantic import BaseModelimport osintbuddy import transform, Pluginfrom osintbuddy.elements import TextInput, DropdownInput, Title, CopyTextfrom osintbuddy.errors import OBPluginErrorclass CSESearchResults(Plugin):    label = &quot;CSE Result&quot;    name = &quot;CSE result&quot;    show_label = False  # do not show this on the entities dialog     # the user sees on the left of the project graph screen    color = &quot;#058F63&quot;    node = [        Title(label=&quot;Result&quot;),        CopyText(label=&quot;URL&quot;),        CopyText(label=&quot;Cache URL&quot;),    ]class CSESearchPlugin(Plugin):    label = &quot;CSE Search&quot;    name = &quot;CSE search&quot;    color = &quot;#2C7237&quot;    node = [        [            TextInput(label=&quot;Query&quot;, icon=&quot;search&quot;),            TextInput(label=&quot;Pages&quot;, icon=&quot;123&quot;, default=&quot;1&quot;),        ],        DropdownInput(label=&quot;CSE Categories&quot;, options=cse_link_options)    ]    @transform(label=&quot;To cse results&quot;, icon=&quot;search&quot;)    async def transform_to_cse_results(      self,      node: BaseModel,  # dynamically generated pydantic model       # that is mapped from the above labels contained within `node`      use  # a pydantic model allowing you to access a selenium instance      # (and eventually a gremlin graph and settings api)     ):        results = []        if not node.query:          raise OBPluginError((            'You can send error messages to the user here'            'if they forget to submit data or if some other error occurs'          ))        # notice how you can access data returned from the context menu        # of this node; using the label name in snake case        print(node.cse_categories, node.query, node.pages)         ... # (removed code for clarity)        if resp:            for result in resp[&quot;results&quot;]:                url = result.get(&quot;breadcrumbUrl&quot;, {})                # some elements you can store more than just a string,                # (these elements storing dicts are mapped                 # to janusgraph as properties with the names                # result_title, result_subtitle, and result_text)                blueprint = CSESearchResults.blueprint(                    result={                        &quot;title&quot;: result.get(&quot;titleNoFormatting&quot;),                        &quot;subtitle&quot;: url.get(&quot;host&quot;) + url.get(&quot;crumbs&quot;),                        &quot;text&quot;: result.get(&quot;contentNoFormatting&quot;),                    },                    url=result.get(&quot;unescapedUrl&quot;),                    cache_url=result.get(&quot;cacheUrl&quot;),                )                results.append(blueprint)        # here we return a list of blueprints (blueprints are dicts)        # but you can also return a single blueprint without a list        return results```</longdescription>
</pkgmetadata>