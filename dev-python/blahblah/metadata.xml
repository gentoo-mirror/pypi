<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># blahblah[![Codecov](https://img.shields.io/codecov/c/github/tsv1/blahblah/master.svg?style=flat-square)](https://codecov.io/gh/tsv1/blahblah)[![PyPI](https://img.shields.io/pypi/v/blahblah.svg?style=flat-square)](https://pypi.python.org/pypi/blahblah/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/blahblah?style=flat-square)](https://pypi.python.org/pypi/blahblah/)[![Python Version](https://img.shields.io/pypi/pyversions/blahblah.svg?style=flat-square)](https://pypi.python.org/pypi/blahblah/)Fake data generator for [district42](https://github.com/tsv1/district42) schema## Installation```shpip3 install blahblah```## Usage```pythonfrom blahblah import fakefrom district42 import schemaUserSchema = schema.dict({    'id': schema.int.min(1),    'name': schema.str.regex(r&quot;[a-z0-9_]+&quot;),    'is_deleted': schema.bool,})print(fake(UserSchema))```## Documentation* [Documentation](#documentation)  * [None](#none)    * [schema.none](#schemanone)  * [Bool](#bool)    * [schema.bool](#schemabool)    * [schema.bool(`value`)](#schemaboolvalue)  * [Int](#int)    * [schema.int](#schemaint)    * [schema.int(`value`)](#schemaintvalue)    * [schema.int.min(`value`)](#schemaintminvalue)    * [schema.int.max(`value`)](#schemaintmaxvalue)  * [Float](#float)    * [schema.float](#schemafloat)    * [schema.float(`value`)](#schemafloatvalue)    * [schema.float.min(`value`)](#schemafloatminvalue)    * [schema.float.max(`value`)](#schemafloatmaxvalue)  * [Str](#str)    * [schema.str](#schemastr)    * [schema.str.len(`length`)](#schemastrlenlength)    * [schema.str.len(`min_length`, `max_length`)](#schemastrlenmin_length-max_length)    * [schema.str.alphabet(`letters`)](#schemastralphabetletters)    * [schema.str.contains(`substr`)](#schemastrcontainssubstr)    * [schema.str.regex(`pattern`)](#schemastrregexpattern)  * [List](#list)    * [schema.list](#schemalist)    * [schema.list(`elements`)](#schemalistelements)    * [schema.list(`type`)](#schemalisttype)    * [schema.list(`type`).len(`length`)](#schemalisttypelenlength)    * [schema.list(`type`).len(`min_length`, `max_length`)](#schemalisttypelenmin_length-max_length)  * [Dict](#dict)    * [schema.dict](#schemadict)    * [schema.dict(`keys`)](#schemadictkeys)  * [Any](#any)    * [schema.any](#schemaany)    * [schema.any(`*types`)](#schemaanytypes)  * [Custom Types](#custom-types)    * [1. Declare Schema](#1-declare-schema)    * [2. Register Generator](#2-register-generator)    * [3. Use](#3-use)### None#### schema.none```pythonsch = schema.noneassert fake(sch) is None```### Bool#### schema.bool```pythonsch = schema.boolassert fake(sch) in (True, False)```#### schema.bool(`value`)```pythonsch = schema.bool(True)assert fake(sch) is True```### Int#### schema.int```pythonINT_MIN = -(2 ** 63)INT_MAX = 2 ** 63 - 1sch = schema.intassert INT_MIN &lt;= fake(sch) &lt;= INT_MAX```#### schema.int(`value`)```pythonsch = schema.int(42)assert fake(sch) == 42```#### schema.int.min(`value`)```pythonsch = schema.int.min(0)assert 0 &lt;= fake(sch) &lt;= INT_MAX```#### schema.int.max(`value`)```pythonsch = schema.int.max(0)assert INT_MIN &lt;= fake(sch) &lt;= 0```### Float#### schema.float```pythonsch = schema.floatassert isinstance(fake(sch), float)```#### schema.float(`value`)```pythonsch = schema.float(3.14)assert fake(sch) == 3.14```#### schema.float.min(`value`)```pythonsch = schema.float.min(0.0)assert fake(sch) &gt;= 0.0```#### schema.float.max(`value`)```pythonsch = schema.float.max(0.0)assert fake(sch) &lt;= 0.0```### Str#### schema.str```pythonsch = schema.strgenerated = fake(sch)assert isinstance(generated, str)```#### schema.str.len(`length`)```pythonsch = schema.str.len(10)generated = fake(sch)assert len(generated) == 10```#### schema.str.len(`min_length`, `max_length`)```pythonsch = schema.str.len(1, ...)generated = fake(sch)assert len(generated) &gt;= 1``````pythonsch = schema.str.len(..., 32)generated = fake(sch)assert len(generated) &lt;= 32``````pythonsch = schema.str.len(1, 32)generated = fake(sch)assert 1 &lt;= len(generated) &lt;= 32```#### schema.str.alphabet(`letters`)```pythondigits = &quot;01234567890&quot;sch = schema.str.alphabet(digits)generated = fake(sch)assert all(x in digits for x in generated)```#### schema.str.contains(`substr`)```pythonsch = schema.str.contains(&quot;@&quot;)generated = fake(sch)assert &quot;@&quot; in generated```#### schema.str.regex(`pattern`)```pythonimport resch = schema.str.regex(r&quot;[a-z]+&quot;)generated = fake(sch)assert re.match(r&quot;[a-z]+&quot;, generated)```### List#### schema.list```pythonsch = schema.listgenerated = fake(sch)assert isinstance(generated, list)```#### schema.list(`elements`)```pythonsch = schema.list([schema.int(1), schema.int(2)])generated = fake(sch)assert generated = [1, 2]```#### schema.list(`type`)```pythonsch = schema.list(schema.int)generated = fake(sch)assert all(isinstance(x) for x in generated)```#### schema.list(`type`).len(`length`)```pythonsch = schema.list(schema.int).len(3)generated = fake(sch)assert len(generated) == 3```#### schema.list(`type`).len(`min_length`, `max_length`)```pythonsch = schema.list(schema.int).len(1, ...)generated = fake(sch)assert len(generated) &gt;= 1``````pythonsch = schema.list(schema.int).len(..., 10)generated = fake(sch)assert len(generated) &lt;= 10``````pythonsch = schema.list(schema.int).len(1, 10)generated = fake(sch)assert 1 &lt;= len(generated) &lt;= 10```### Dict#### schema.dict```pythonsch = schema.dictgenerated = fake(sch)assert isinstance(generated, dict)```#### schema.dict(`keys`)```pythonsch = schema.dict({    &quot;id&quot;: schema.int,    &quot;name&quot;: schema.str | schema.none,    optional(&quot;platform&quot;): schema.str,})generated = fake(sch)assert isinstance(generated[&quot;id&quot;], int)assert isinstance(generated[&quot;name&quot;], (str, type(None))assert generated.keys() == {&quot;id&quot;, &quot;name&quot;}```### Any#### schema.any```pythonsch = schema.anygenerated = fake(sch)assert isinstance(generated, object)```#### schema.any(`*types`)```pythonsch = schema.any(schema.str, schema.int)generated = fake(sch)assert isinstance(generated, (str, int))```### Custom Types#### 1. Declare Schema```pythonfrom typing import Anyfrom uuid import UUIDfrom district42 import Props, SchemaVisitor, SchemaVisitorReturnType as ReturnTypefrom district42.types import Schemafrom niltype import Nilableclass UUIDProps(Props):    @property    def value(self) -&gt; Nilable[UUID]:        return self.get(&quot;value&quot;)class UUIDSchema(Schema[UUIDProps]):    def __accept__(self, visitor: SchemaVisitor[ReturnType], **kwargs: Any) -&gt; ReturnType:        return visitor.visit_uuid(self, **kwargs)    def __call__(self, /, value: UUID) -&gt; &quot;UUIDSchema&quot;:        return self.__class__(self.props.update(value=value))```#### 2. Register Generator```pythonfrom typing import Anyfrom uuid import UUID, uuid4from blahblah import Generatorfrom niltype import Nilclass UUIDGenerator(Generator, extend=True):    def visit_uuid(self, schema: UUIDSchema, **kwargs: Any) -&gt; UUID:        if schema.props.value is not Nil:            return schema.props.value        return uuid4()```#### 3. Use```pythonfrom blahblah import fakefrom district42 import register_type, schemaregister_type(&quot;uuid&quot;, UUIDSchema)print(fake(schema.uuid))# 0d9d188a-4f1f-4bce-ba6e-51ca3732900e```Full code available here: [district42_exp_types/uuid](https://github.com/tsv1/district42-exp-types/tree/master/district42_exp_types/uuid)</longdescription>
</pkgmetadata>