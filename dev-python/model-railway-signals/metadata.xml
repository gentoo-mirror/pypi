<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># model-railway-signallingA DCC model railway signalling system written in Python. Primarily intended for the Raspberry Pi, but will also run on other platforms (albeit without some of the Raspberry-Pi specific interfacing functions). * Enables schematics to be created with signals, points, track occupancy sections and block instruments* Most types of colour light signals, semaphore signals, and ground signals are supported.* Interfaces with the Pi-SPROG DCC command station to drive the signals and points out on the layout* Uses the Raspberry Pi GPIO inputs to provide train detection in support of signalling automation* Incorporates MQTT networking to allow multiple signalling applications to be linked for larger layouts## Layout editorThe schematic editor application enables automated and interlocked layout signalling schemes to bedesigned and configured via the UI without the need to write any code. Note that the editor is inactive development so any comments and suggestions for future features are welcome.What's currently supported by the Editor:* Draw your schematic with lines, points, signals, track occupancy sections and block instruments* Define the DCC command sequences needed to drive the signals and points out on the layout* Configure the signals, points and block instruments for protototypical interlocking* Configure GPIO sensors and track sections to provide a 'mimic' display of the layout* Configure a level of automation for the signals as trains traverse the layoutWhat's new in Release 3.5:* MQTT networking - large layouts with multiple signalling areas can be split across multiple platforms** Simple configuration for connecting to a local (you'll have to stand-up) or internet-based MQTT broker** Publish and subscribe to signals, track sections and block instruments from each application instance** Publish and subscribe to DCC command feeds - allows multiple applications to share the same R-Pi/Pi-SPROGWhat's coming soon:* MQTT publish and subscribe to GPIO ports - for signal-passed and signal-approached events* Text boxs - Ability to add and edit text boxes on the schematicAny bug reports and feedback you may have would be gratefully appreciated - specifically:* What aspects are intuitive? What aspects aren't?* What aspects do you particularly like?* What aspects particularly irritate you?There are some example layout files in the 'configuration_examples' folder.![Example Screenshot](https://github.com/johnrm174/model-railway-signalling/blob/main/README_screenshot2.png)## Library functionsAll of the functions for creating and managing 'signals', 'points', 'sections', 'sensors' and 'block instruments' have been developed as a Python Package to promote re-use across other layouts. This includes functions to support the interlocking of signals, points and block instruments, enabling fully prototypical signalling schemes to be developed in code.An interface to a SPROG DCC Command station enables control of the signals and points out on the layout. The signals and points can be mapped to one or more DCC addresses in a manner that should be compatible with the majority of DCC signal/points decoders currently on the market. A GPIO interface allows external train detectors to be connected in via opto-isolators. These sensors can be configured to trigger 'signal approached' or 'signal passed' events, enabling full automatic control of the layout signalling. A MQTT interface enables multiple signalling applications to be networked together so that complex layouts can be split into different signalling sections/areas, with communication between them.![Example Screenshot](https://github.com/johnrm174/model-railway-signalling/blob/main/README_screenshot1.png)## InstallationFor a first time installation use:&lt;pre&gt;$ python3 -m pip install model-railway-signals &lt;/pre&gt;To upgrade to the latest version use:&lt;pre&gt;$ python3 -m pip install --upgrade model-railway-signals &lt;/pre&gt;If you want to use Block Instruments with full sound enabled (bell rings and telegraph key sounds)then you will also need to install the 'simpleaudio' package. Note that for Windows it has a dependency on Microsoft Visual C++ 14.0 or greater (so you will need to ensure Visual Studio 2015 is installed first).If 'simpleaudio' is not installed then the software will still function correctly (just without sound).&lt;pre&gt;$ python3 -m pip install simpleaudio&lt;/pre&gt;## Using the layout editorTo run the editor application:The python package should be run as a module (note underscores):&lt;pre&gt;$ python3 -m model_railway_signals&lt;/pre&gt;or to load a layout schematic at startup&lt;pre&gt;$ python3 -m model_railway_signals -f layout_file.sig&lt;/pre&gt;## Using the library functionsTo use the public API functions for developing your own layout signalling system:&lt;pre&gt;from model_railway_signals import * &lt;/pre&gt;For details of the API and code examples see the seperate 'PUBLIC_API.md' file.</longdescription>
</pkgmetadata>