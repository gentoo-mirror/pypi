<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/PMEAL/porespy/raw/dev/docs/_static/images/porespy_logo.png&quot; width=&quot;25%&quot;&gt;&lt;/img&gt;&lt;/p&gt;[![image](https://img.shields.io/pypi/v/porespy.svg)](https://pypi.python.org/pypi/porespy/)[![Pyversions](https://img.shields.io/pypi/pyversions/porespy.svg?style=flat-square&amp;label=Python%20Versions)](https://pypi.python.org/pypi/porespy)# What is PoreSpy?**PoreSpy** is a collection of image analysis tools used to extractinformation from 3D images of porous materials (typically obtained fromX-ray tomography). There are many packages that offer generalized imageanalysis tools (i.e **Skimage** and **Scipy.NDimage** in the Python environment,**ImageJ**, **MatLab**'s Image Processing Toolbox), but they all require buildingup complex scripts or macros to accomplish tasks of specific use toporous media. The aim of **PoreSpy** is to provide a set of pre-writtentools for all the common porous media measurements.  For instance, it's possible to perform a mercury intrusion simulation with a single function call (e.g. ``porespy.filters.porosimetry``).**PoreSpy** relies heavily on[scipy.ndimage](https://docs.scipy.org/doc/scipy/reference/ndimage.html)and [scikit-image](https://scikit-image.org/) also known as **skimage**.The former contains an assortment of general image analysis tools suchas image morphology filters, while the latter offers more complex butstill general functions such as watershed segmentation. **PoreSpy** does notduplicate any of these general functions so you will also have toinstall and learn how to use them to get the most from **PoreSpy**. Thefunctions in PoreSpy are generally built up using several of the general functions offered by **skimage** and **scipy**. There are a fewfunctions in **PoreSpy** that are implemented natively, but only whennecessary.# Capabilities**PoreSpy** consists of the following modules:  - `generators`: Routines for generating artificial images of porous    materials useful for testing and illustration  - `filters`: Functions that accept an image and return an altered    image  - `metrics`: Tools for quantifying properties of images  - `networks`: Algorithms and tools for analyzing images as pore networks  - `simulations`: Physical simulations on images including drainage  - `visualization`: Helper functions for creating useful views of the    image  - `io`: Functions for outputting image data in various formats for use in    common software  - `tools`: Various useful tools for working with images## Gallery&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/PMEAL/porespy/raw/dev/docs/_static/images/montage.svg&quot; width=&quot;85%&quot;&gt;&lt;/img&gt;&lt;/p&gt;## Cite as&gt; *Gostick J, Khan ZA, Tranter TG, Kok MDR, Agnaou M, Sadeghi MA, Jervis&gt; R.* **PoreSpy: A Python Toolkit for Quantitative Analysis of Porous Media&gt; Images.** Journal of Open Source Software, 2019.&gt; [doi:10.21105/joss.01296](https://doi.org/10.21105/joss.01296)# InstallationFor detailed and up to date installation instructions, [see here](https://porespy.org/installation.html)# ContributingIf you think you may be interested in contributing to PoreSpy and wishto both *use* and *edit* the source code, then you should clone the[repository](https://github.com/PMEAL/porespy) to your local machine,and install it using the following PIP command:    pip install -e &quot;C:\path\to\the\local\files\&quot;For information about contributing, refer to the [contributorsguide](https://github.com/PMEAL/porespy/blob/dev/CONTRIBUTING.md)# AcknowledgementsPoreSpy is grateful to [CANARIE](https://canarie.ca) for their generous funding over the past few years.  We would also like to acknowledge the support of [NSERC of Canada](https://www.nserc-crsng.gc.ca/) for funding many of the student that have contributed to PoreSpy since it's inception in 2014.# ExamplesThe following code snippets illustrate generating a 2D image, applyingseveral filters, and calculating some common metrics. A set of examplesis included in this repo, and can be [browsedhere](https://github.com/PMEAL/porespy/tree/dev/examples).## Generating an imagePoreSpy offers several ways to generate artificial images, for quicktesting and developmnet of work flows, instead of dealing withreading/writing/storing of large tomograms.``` pythonimport porespy as psimport matplotlib.pyplot as pltim = ps.generators.blobs(shape=[500, 500], porosity=0.6, blobiness=2)plt.imshow(im)```&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/PMEAL/porespy/raw/dev/docs/_static/images/fig1.png&quot; width=&quot;50%&quot;&gt;&lt;/img&gt;&lt;/p&gt;## Applying filtersA common filter to apply is the local thickness, which replaces everyvoxel with the radius of a sphere that overlaps it. Analysis of thehistogram of the voxel values provides information about the pore sizedistribution.``` pythonlt = ps.filters.local_thickness(im)plt.imshow(lt)```&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/PMEAL/porespy/raw/dev/docs/_static/images/fig2.png&quot; width=&quot;50%&quot;&gt;&lt;/img&gt;&lt;/p&gt;A less common filter is the application of chords that span the porespace in a given direction. It is possible to gain information aboutanisotropy of the material by looking at the distributions of chordslengths in each principle direction.``` pythoncr = ps.filters.apply_chords(im)cr = ps.filters.flood(cr, mode='size')plt.imshow(cr)```&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/PMEAL/porespy/raw/dev/docs/_static/images/fig3.png&quot; width=&quot;50%&quot;&gt;&lt;/img&gt;&lt;/p&gt;## Calculating metricsThe metrics sub-module contains several common functions that analyzebinary tomogram directly. Examples are simple porosity, as well astwo-point correlation function.``` pythondata = ps.metrics.two_point_correlation_fft(im)fig = plt.plot(*data, 'bo-')plt.ylabel('probability')plt.xlabel('correlation length [voxels]')```&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/PMEAL/porespy/raw/dev/docs/_static/images/fig4.png&quot; width=&quot;50%&quot;&gt;&lt;/img&gt;&lt;/p&gt;The metrics sub-module also contains a suite of functions that produceplots based on values in images that have passed through a filter, suchas local thickness.``` pythonmip = ps.filters.porosimetry(im)data = ps.metrics.pore_size_distribution(mip, log=False)plt.imshow(mip)# Now show intrusion curveplt.plot(data.R, data.cdf, 'bo-')plt.xlabel('invasion size [voxels]')plt.ylabel('volume fraction invaded [voxels]')```&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/PMEAL/porespy/raw/dev/docs/_static/images/fig5.png&quot; width=&quot;50%&quot;&gt;&lt;/img&gt;  &lt;img src=&quot;https://github.com/PMEAL/porespy/raw/dev/docs/_static/images/fig6.png&quot; width=&quot;50%&quot;&gt;&lt;/img&gt;&lt;/p&gt;</longdescription>
</pkgmetadata>