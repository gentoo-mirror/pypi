<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Tengu-py: Python SDK for the QDX Tengu APIThis package exposes a simple provider and CLI for the different tools exposed by the QDX Tengu GraphQL API.## Usage### As a library```pythonimport jsonfrom pathlib import Pathimport tengufrom tengu import ArgTOKEN = &quot;your tengu access token&quot;# get our client to talk with the APIclient = tengu.Provider(access_token=TOKEN)# get newest module versionsmodules = next(client.latest_modules())# get desciption and usage moduleprint(modules[0][&quot;description&quot;])print(modules[0][&quot;usage&quot;])# get exact input arguments needed for moduleprint(modules[0][&quot;ins&quot;])## running convert# path to protein pdb with correct charges and protonationprotein_pdb = Path(&quot;./examples/4w9f_prepared_protein.pdb&quot;)# get base64 encoded datafile_arg = client.upload_arg(protein_pdb)convert_res = client.run(&quot;github:talo/tengu-prelude/77e44748f1d1e20c463ef34cc40178d4f656ef0a#convert&quot;, [  Arg(value = &quot;PDB&quot;), file_arg], tags=[&quot;my_run_identifier&quot;])// res contains &quot;id&quot; - the instance id; and &quot;outs&quot; - the ids of the return values// we can pass arguments by &quot;id&quot; reference or by value literalpick_res = client.run(&quot;github:talo/tengu-prelude/f8e2e55d9bd428aa7f2bbe3f87c24775fa592b10#pick_conformer&quot;, [  Arg( id =  res[&quot;outs&quot;][0][&quot;id&quot;] ), Arg( value = 0 ) }])client.poll_module_instance(id)// status, progress, logs, outs - out values will be null until module_instance is done// retrieve object result once doneconformer = client.object(pick_res[&quot;outs&quot;][0])```## Sample Hermes RunThis will perform a Hermes calculation on a (small &lt; 1000 atoms) raw input file, without doing any transformationsA sample `params.json` can be found [here](https://talo.github.io/qdx-common/qdx_common/qc/struct.Params.html#example)```pythoninstance = client.run(    &quot;github:talo/tengu-prelude/60662930969362ce73d321b38929dac878e4ec9f#hermes_raw&quot;,    [        tengu.Arg(value = json.load(open(&quot;params.json&quot;)))    ],    &quot;GADI&quot;,    {&quot;walltime&quot;: 400, &quot;gpus&quot;: 4},)# keep polling to see if module_instance is successful. This may take a whilecompleted_instance = client.poll_module_instance(instance[&quot;id&quot;], n_retries=10, poll_rate=100)# the result will be an object, so fetch from object storeclient.object(completed_instance[&quot;outs&quot;][0][&quot;id&quot;]) # will return the json energy results```## Sample Hermes Energy RunThis will perform a Hermes energy calculation on larger system, predefined to perform energy calculations.You can create a &quot;conformer.json&quot; by using the convert module described above or by converting a pdb with [qdx-py](https://pypi.org/project/qdx-py/)```pythondefault_model = {&quot;method&quot;: &quot;RIMP2&quot;, &quot;basis&quot;: &quot;cc-pVDZ&quot;, &quot;aux_basis&quot;: &quot;cc-pVDZ-RIFIT&quot;, &quot;frag_enabled&quot;: True}frag_keywords = {    &quot;dimer_cutoff&quot;: 25,    &quot;dimer_mp2_cutoff&quot;: 25,    &quot;fragmentation_level&quot;: 2,    &quot;method&quot;: &quot;MBE&quot;,    &quot;monomer_cutoff&quot;: 30,    &quot;monomer_mp2_cutoff&quot;: 30,    &quot;ngpus_per_node&quot;: 1,    &quot;trimer_cutoff&quot;: 10,    &quot;trimer_mp2_cutoff&quot;: 10,    &quot;fragmented_energy_type&quot;: &quot;TotalEnergy&quot;,}scf_keywords = {    &quot;convergence_metric&quot;: &quot;diis&quot;,    &quot;dynamic_screening_threshold_exp&quot;: 10,    &quot;ndiis&quot;: 8,    &quot;niter&quot;: 40,    &quot;scf_conv&quot;: 0.000001,}instance = client.run(    &quot;github:talo/tengu-prelude/60662930969362ce73d321b38929dac878e4ec9f#hermes_energy&quot;,    [        tengu.Arg(value = json.load(open(&quot;conformer.json&quot;)))        Arg(value = default_model),        Arg(value = {&quot;frag&quot;: frag_keywords, &quot;scf&quot;: scf_keywords}),    ],    &quot;GADI&quot;,    {&quot;walltime&quot;: 400, &quot;gpus&quot;: 4},)# keep polling to see if module_instance is successful. This may take a while, &gt; 10 minscompleted_instance = client.poll_module_instance(instance[&quot;id&quot;], n_retries=10, poll_rate=100)# the result will be an object, so fetch from object storeclient.object(completed_instance[&quot;outs&quot;][0][&quot;id&quot;]) # will return the json energy results```## Sample QP Run```pythonfrag_keywords = {    &quot;dimer_cutoff&quot;: 25,    &quot;dimer_mp2_cutoff&quot;: 25,    &quot;fragmentation_level&quot;: 2,    &quot;method&quot;: &quot;MBE&quot;,    &quot;monomer_cutoff&quot;: 30,    &quot;monomer_mp2_cutoff&quot;: 30,    &quot;ngpus_per_node&quot;: 1,    &quot;reference_fragment&quot;: 1,    &quot;trimer_cutoff&quot;: 10,    &quot;trimer_mp2_cutoff&quot;: 10,    &quot;fragmented_energy_type&quot;: &quot;InteractivityEnergy&quot;,}scf_keywords = {    &quot;convergence_metric&quot;: &quot;diis&quot;,    &quot;dynamic_screening_threshold_exp&quot;: 10,    &quot;ndiis&quot;: 8,    &quot;niter&quot;: 40,    &quot;scf_conv&quot;: 0.000001,}default_model = {&quot;method&quot;: &quot;RIMP2&quot;, &quot;basis&quot;: &quot;cc-pVDZ&quot;, &quot;aux_basis&quot;: &quot;cc-pVDZ-RIFIT&quot;, &quot;frag_enabled&quot;: True}qp_instances = client.qp_run(    &quot;github:talo/tengu-prelude/0986e4b23780d5e976e7938dc02a949185090fa1#qp_gen_inputs&quot;,    &quot;github:talo/tengu-prelude/0986e4b23780d5e976e7938dc02a949185090fa1#hermes_energy&quot;,    &quot;github:talo/tengu-prelude/0986e4b23780d5e976e7938dc02a949185090fa1#qp_collate&quot;,    provider.upload_arg(Path(&quot;some.pdb&quot;)),    provider.upload_arg(Path(&quot;some.gro&quot;)),    provider.upload_arg(Path(&quot;some.sdf&quot;)),    Arg(value = &quot;sdf&quot;),    Arg(value = &quot;MOL&quot;), # id of ligand in pdb    Arg(        value = default_model,    ),    Arg(value = {&quot;frag&quot;: frag_keywords, &quot;scf&quot;: scf_keywords}),    Arg(        value = [            (&quot;GLY&quot;, 100), # map of amino acids of interest        ],    ),    &quot;GADI&quot;,    {&quot;walltime&quot;: 400},    autopoll = (10, 100) # optionally configure polling to wait on the final instance,                         # and clean up if any of the prior instances fails)# if you set autpoll, you will get the results of the qp_collate instance,# otherwise you will get an array with all the spawned instances, and have to poll manuallycompleted_instance = client.poll_module_instance(qp_collate_instance[2][&quot;id&quot;])# the result will be an object, so fetch from object storeclient.object(completed_instance[&quot;outs&quot;][0][&quot;id&quot;]) # will return the json qp results```## Local runnerWe also provide a local executor, that will run modules locally, without making remote callsFirst, you must have nix installed and configured with an access token for qdx projects.Then you must install the tengu-runtime with `nix run github:talo/tengu#tengu-runtime -- install`Finally, you can run locally with```pythonfrom tengu import LocalProviderclient = LocalProvider()## you should be able to use client.run / client.object / client.module_instance / client.poll_module instance as normal```</longdescription>
</pkgmetadata>