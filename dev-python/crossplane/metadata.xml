<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Crossplane Logo](https://raw.githubusercontent.com/nginxinc/crossplane/master/ext/crossplane-logo.png)&lt;h1 align=&quot;center&quot;&gt;crossplane&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;Reliable and fast NGINX configuration file parser and builder&lt;/h3&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/nginxinc/crossplane/actions/workflows/crossplane-ci.yml&quot;&gt;&lt;img src=&quot;https://github.com/nginxinc/crossplane/actions/workflows/crossplane-ci.yml/badge.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nginxinc/crossplane/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/nginxinc/crossplane.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.python.org/pypi/crossplane&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/l/crossplane.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.python.org/pypi/crossplane&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/crossplane.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;  - [Install](#install)  - [Command Line Interface](#command-line-interface)      - [crossplane parse](#crossplane-parse)      - [crossplane build](#crossplane-build)      - [crossplane lex](#crossplane-lex)      - [crossplane format](#crossplane-format)      - [crossplane minify](#crossplane-minify)  - [Python Module](#python-module)      - [crossplane.parse()](#crossplaneparse)      - [crossplane.build()](#crossplanebuild)      - [crossplane.lex()](#crossplanelex)  - [Other Languages](#other-languages)## InstallYou can install both the [Command LineInterface](#command-line-interface) and [Python Module](#python-module)via:    pip install crossplane## Command Line Interface```usage: crossplane &lt;command&gt; [options]various operations for nginx config filesoptional arguments:  -h, --help            show this help message and exit  -V, --version         show program's version number and exitcommands:  parse                 parses a json payload for an nginx config  build                 builds an nginx config from a json payload  lex                   lexes tokens from an nginx config file  minify                removes all whitespace from an nginx config  format                formats an nginx config file  help                  show help for commands```### crossplane parseThis command will take a path to a main NGINX config file as input, thenparse the entire config into the schema defined below, and dumps theentire thing as a JSON payload.```usage: crossplane parse [-h] [-o OUT] [-i NUM] [--ignore DIRECTIVES]                        [--no-catch] [--tb-onerror] [--single-file]                        [--include-comments] [--strict]                        filenameparses a json payload for an nginx configpositional arguments:  filename              the nginx config fileoptional arguments:  -h, --help            show this help message and exit  -o OUT, --out OUT     write output to a file  -i NUM, --indent NUM  number of spaces to indent output  --ignore DIRECTIVES   ignore directives (comma-separated)  --no-catch            only collect first error in file  --tb-onerror          include tracebacks in config errors  --combine             use includes to create one single file  --single-file         do not include other config files  --include-comments    include comments in json  --strict              raise errors for unknown directives```**Privacy and Security**Since `crossplane` is usually used to create payloads that are sent todifferent servers, it's important to keep security in mind. For thatreason, the `--ignore` option was added. It can be used to keep certainsensitive directives out of the payload output entirely.For example, we always use the equivalent of this flag in the [NGINX AmplifyAgent](https://github.com/nginxinc/nginx-amplify-agent/) out of respectfor our users'    privacy:    --ignore=auth_basic_user_file,secure_link_secret,ssl_certificate_key,ssl_client_certificate,ssl_password_file,ssl_stapling_file,ssl_trusted_certificate#### Schema**Response Object**```js{    &quot;status&quot;: String, // &quot;ok&quot; or &quot;failed&quot; if &quot;errors&quot; is not empty    &quot;errors&quot;: Array,  // aggregation of &quot;errors&quot; from Config objects    &quot;config&quot;: Array   // Array of Config objects}```**Config Object**```js{    &quot;file&quot;: String,   // the full path of the config file    &quot;status&quot;: String, // &quot;ok&quot; or &quot;failed&quot; if errors is not empty array    &quot;errors&quot;: Array,  // Array of Error objects    &quot;parsed&quot;: Array   // Array of Directive objects}```**Directive Object**```js{    &quot;directive&quot;: String, // the name of the directive    &quot;line&quot;: Number,      // integer line number the directive started on    &quot;args&quot;: Array,       // Array of String arguments    &quot;includes&quot;: Array,   // Array of integers (included iff this is an include directive)    &quot;block&quot;: Array       // Array of Directive Objects (included iff this is a block)}```&lt;div class=&quot;note&quot;&gt;&lt;div class=&quot;admonition-title&quot;&gt;Note&lt;/div&gt;If this is an `include` directive and the `--single-file` flag was notused, an `&quot;includes&quot;` value will be used that holds an Array of indicesof the configs that are included by this directive.If this is a block directive, a `&quot;block&quot;` value will be used that holdsan Array of more Directive Objects that define the block context.&lt;/div&gt;**Error Object**```js{    &quot;file&quot;: String,     // the full path of the config file    &quot;line&quot;: Number,     // integer line number the directive that caused the error    &quot;error&quot;: String,    // the error message    &quot;callback&quot;: Object  // only included iff an &quot;onerror&quot; function was passed to parse()}```&lt;div class=&quot;note&quot;&gt;&lt;div class=&quot;admonition-title&quot;&gt;Note&lt;/div&gt;If the `--tb-onerror` flag was used by crossplane parse, `&quot;callback&quot;`will contain a string that represents the traceback that the errorcaused.&lt;/div&gt;#### ExampleThe main NGINX config file is at `/etc/nginx/nginx.conf`:```nginxevents {    worker_connections 1024;}http {    include conf.d/*.conf;}```And this config file is at `/etc/nginx/conf.d/servers.conf`:```nginxserver {    listen 8080;    location / {        try_files 'foo bar' baz;    }}server {    listen 8081;    location / {        return 200 'success!';    }}```So then if you run this:    crossplane parse --indent=4 /etc/nginx/nginx.confThe prettified JSON output would look like this:```js{    &quot;status&quot;: &quot;ok&quot;,    &quot;errors&quot;: [],    &quot;config&quot;: [        {            &quot;file&quot;: &quot;/etc/nginx/nginx.conf&quot;,            &quot;status&quot;: &quot;ok&quot;,            &quot;errors&quot;: [],            &quot;parsed&quot;: [                {                    &quot;directive&quot;: &quot;events&quot;,                    &quot;line&quot;: 1,                    &quot;args&quot;: [],                    &quot;block&quot;: [                        {                            &quot;directive&quot;: &quot;worker_connections&quot;,                            &quot;line&quot;: 2,                            &quot;args&quot;: [                                &quot;1024&quot;                            ]                        }                    ]                },                {                    &quot;directive&quot;: &quot;http&quot;,                    &quot;line&quot;: 5,                    &quot;args&quot;: [],                    &quot;block&quot;: [                        {                            &quot;directive&quot;: &quot;include&quot;,                            &quot;line&quot;: 6,                            &quot;args&quot;: [                                &quot;conf.d/*.conf&quot;                            ],                            &quot;includes&quot;: [                                1                            ]                        }                    ]                }            ]        },        {            &quot;file&quot;: &quot;/etc/nginx/conf.d/servers.conf&quot;,            &quot;status&quot;: &quot;ok&quot;,            &quot;errors&quot;: [],            &quot;parsed&quot;: [                {                    &quot;directive&quot;: &quot;server&quot;,                    &quot;line&quot;: 1,                    &quot;args&quot;: [],                    &quot;block&quot;: [                        {                            &quot;directive&quot;: &quot;listen&quot;,                            &quot;line&quot;: 2,                            &quot;args&quot;: [                                &quot;8080&quot;                            ]                        },                        {                            &quot;directive&quot;: &quot;location&quot;,                            &quot;line&quot;: 3,                            &quot;args&quot;: [                                &quot;/&quot;                            ],                            &quot;block&quot;: [                                {                                    &quot;directive&quot;: &quot;try_files&quot;,                                    &quot;line&quot;: 4,                                    &quot;args&quot;: [                                        &quot;foo bar&quot;,                                        &quot;baz&quot;                                    ]                                }                            ]                        }                    ]                },                {                    &quot;directive&quot;: &quot;server&quot;,                    &quot;line&quot;: 8,                    &quot;args&quot;: [],                    &quot;block&quot;: [                        {                            &quot;directive&quot;: &quot;listen&quot;,                            &quot;line&quot;: 9,                            &quot;args&quot;: [                                &quot;8081&quot;                            ]                        },                        {                            &quot;directive&quot;: &quot;location&quot;,                            &quot;line&quot;: 10,                            &quot;args&quot;: [                                &quot;/&quot;                            ],                            &quot;block&quot;: [                                {                                    &quot;directive&quot;: &quot;return&quot;,                                    &quot;line&quot;: 11,                                    &quot;args&quot;: [                                        &quot;200&quot;,                                        &quot;success!&quot;                                    ]                                }                            ]                        }                    ]                }            ]        }    ]}```#### crossplane parse (advanced)This tool uses two flags that can change how `crossplane` handleserrors.The first, `--no-catch`, can be used if you'd prefer that crossplanequit parsing after the first error it finds.The second, `--tb-onerror`, will add a `&quot;callback&quot;` key to all errorobjects in the JSON output, each containing a string representation ofthe traceback that would have been raised by the parser if the exceptionhad not been caught. This can be useful for logging purposes.### crossplane buildThis command will take a path to a file as input. The file shouldcontain a JSON representation of an NGINX config that has the structuredefined above. Saving and using the output from `crossplane parse` torebuild your config files should not cause any differences in contentexcept for the formatting.```usage: crossplane build [-h] [-d PATH] [-f] [-i NUM | -t] [--no-headers]                        [--stdout] [-v]                        filenamebuilds an nginx config from a json payloadpositional arguments:  filename              the file with the config payloadoptional arguments:  -h, --help            show this help message and exit  -v, --verbose         verbose output  -d PATH, --dir PATH   the base directory to build in  -f, --force           overwrite existing files  -i NUM, --indent NUM  number of spaces to indent output  -t, --tabs            indent with tabs instead of spaces  --no-headers          do not write header to configs  --stdout              write configs to stdout instead```### crossplane lexThis command takes an NGINX config file, splits it into tokens byremoving whitespace and comments, and dumps the list of tokens as a JSONarray.```usage: crossplane lex [-h] [-o OUT] [-i NUM] [-n] filenamelexes tokens from an nginx config filepositional arguments:  filename              the nginx config fileoptional arguments:  -h, --help            show this help message and exit  -o OUT, --out OUT     write output to a file  -i NUM, --indent NUM  number of spaces to indent output  -n, --line-numbers    include line numbers in json payload```#### ExamplePassing in this NGINX config file at `/etc/nginx/nginx.conf`:```nginxevents {    worker_connections 1024;}http {    include conf.d/*.conf;}```By running:    crossplane lex /etc/nginx/nginx.confWill result in this JSONoutput:```js[&quot;events&quot;,&quot;{&quot;,&quot;worker_connections&quot;,&quot;1024&quot;,&quot;;&quot;,&quot;}&quot;,&quot;http&quot;,&quot;{&quot;,&quot;include&quot;,&quot;conf.d/*.conf&quot;,&quot;;&quot;,&quot;}&quot;]```However, if you decide to use the `--line-numbers` flag, your outputwill looklike:```js[[&quot;events&quot;,1],[&quot;{&quot;,1],[&quot;worker_connections&quot;,2],[&quot;1024&quot;,2],[&quot;;&quot;,2],[&quot;}&quot;,3],[&quot;http&quot;,5],[&quot;{&quot;,5],[&quot;include&quot;,6],[&quot;conf.d/*.conf&quot;,6],[&quot;;&quot;,6],[&quot;}&quot;,7]]```### crossplane formatThis is a quick and dirty tool that uses [crossplaneparse](#crossplane-parse) internally to format an NGINX config file.It serves the purpose of demonstrating what you can do with `crossplane`'sparsing abilities. It is not meant to be a fully fleshed out, feature-richformatting tool. If that is what you are looking for, then you may want tolook writing your own using crossplane's Python API.```usage: crossplane format [-h] [-o OUT] [-i NUM | -t] filenameformats an nginx config filepositional arguments:  filename              the nginx config fileoptional arguments:  -h, --help            show this help message and exit  -o OUT, --out OUT     write output to a file  -i NUM, --indent NUM  number of spaces to indent output  -t, --tabs            indent with tabs instead of spaces```### crossplane minifyThis is a simple and fun little tool that uses [crossplanelex](#crossplane-lex) internally to remove as much whitespace from anNGINX config file as possible without affecting what it does. It can'timagine it will have much of a use to most people, but it demonstratesthe kinds of things you can do with `crossplane`'s lexing abilities.```usage: crossplane minify [-h] [-o OUT] filenameremoves all whitespace from an nginx configpositional arguments:  filename           the nginx config fileoptional arguments:  -h, --help         show this help message and exit  -o OUT, --out OUT  write output to a file```## Python ModuleIn addition to the command line tool, you can import `crossplane` as apython module. There are two basic functions that the module willprovide you: `parse` and `lex`.### crossplane.parse()```pythonimport crossplanepayload = crossplane.parse('/etc/nginx/nginx.conf')```This will return the same payload as described in the [crossplaneparse](#crossplane-parse) section, except it will be Python dicts andnot one giant JSON string.### crossplane.build()```pythonimport crossplaneconfig = crossplane.build(    [{        &quot;directive&quot;: &quot;events&quot;,        &quot;args&quot;: [],        &quot;block&quot;: [{            &quot;directive&quot;: &quot;worker_connections&quot;,            &quot;args&quot;: [&quot;1024&quot;]        }]    }])```This will return a single string that contains an entire NGINX configfile.### crossplane.lex()```pythonimport crossplanetokens = crossplane.lex('/etc/nginx/nginx.conf')````crossplane.lex` generates 2-tuples. Inserting these pairs into a listwill result in a long list similar to what you can see in the[crossplane lex](#crossplane-lex) section when the `--line-numbers` flagis used, except it will obviously be a Python list of tuples and not onegiant JSON string.## Other Languages- Go port by [@aluttik](https://github.com/aluttik):    &lt;https://github.com/aluttik/go-crossplane&gt;- Ruby port by [@gdanko](https://github.com/gdanko):    &lt;https://github.com/gdanko/crossplane&gt;</longdescription>
</pkgmetadata>