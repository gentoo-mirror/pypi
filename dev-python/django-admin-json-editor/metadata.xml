<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Administration JSON Editor[![Build Status](https://travis-ci.org/abogushov/django-admin-json-editor.svg?branch=master)](https://travis-ci.org/abogushov/django-admin-json-editor)![Admin Json Editor](example/example.png)Application adds support for editing JSONField in Django Administration via https://github.com/json-editor/json-editor.## Quick startInstall application via pip:```bashpip install django-admin-json-editor```Add application to the INSTALLED_APPS settings:```pythonINSTALLED_APPS = [    ...    'django_admin_json_editor',    ...]```Define schema of json field:```pythonDATA_SCHEMA = {    'type': 'object',    'title': 'Data',    'properties': {        'text': {            'title': 'Some text',            'type': 'string',            'format': 'textarea',        },        'status': {            'title': 'Status',            'type': 'boolean',        },    },}```Use JSONEditorWidget to bind editor to the form field:```pythonclass JSONModelAdminForm(forms.ModelForm):    class Meta:        model = JSONModel        fields = '__all__'        widgets = {            'data': JSONEditorWidget(DATA_SCHEMA, collapsed=False),        }```### Dynamic schemaIt is possible to build dynamic schema for widget:```pythondef dynamic_schema(widget):    return {        'type': 'array',        'title': 'tags',        'items': {            'type': 'string',            'enum': [i for i in Tag.objects.values_list('name', flat=True)],        }    }``````python@admin.register(JSONModel)class JSONModelAdmin(admin.ModelAdmin):    def get_form(self, request, obj=None, **kwargs):        widget = JSONEditorWidget(dynamic_schema, False)        form = super().get_form(request, obj, widgets={'tags': widget}, **kwargs)        return form```</longdescription>
</pkgmetadata>