<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># linuxnet-iptables**linuxnet-iptables** provides programmatic access to theLinux `iptables(8)` command.Using **linuxnet-iptables** one can view existing chains/rules,create new ones, or delete existing ones.The package documentation is available[here](https://linuxnet-iptables.readthedocs.io/en/latest/index.html).For the following examples, Python3 (3.6 or later) is required.```python&gt;&gt;&gt; from linuxnet.iptables import IptablesPacketFilterTable&gt;&gt;&gt; table = IptablesPacketFilterTable('filter')&gt;&gt;&gt; table.read_system_config()&gt;&gt;&gt; input_chain = table.get_chain('INPUT')&gt;&gt;&gt; for rule in input_chain.get_rules():...    print(' '.join(rule.to_iptables_args()))...-j prod_bad_traffic-m state --state RELATED,ESTABLISHED -j ACCEPT-j prod_ingress-j prod_INPUT_ldrop&gt;&gt;&gt;&gt;&gt;&gt; print(input_chain.get_packet_count())183506560&gt;&gt;&gt;```The above code requires root access in order to successfully invoke the`iptables` command. If you are uncomfortable running it as root, you canextract the `iptables` output as root and then process it with**linuxnet-iptables** (note that the **-xnv** options **must** bespecified):```console# iptables -xnv -L &gt; /tmp/iptables.output#```Then, as a regular user:```python&gt;&gt;&gt; with open(&quot;/tmp/iptables.output&quot;) as f:...    output = f.read()...&gt;&gt;&gt; from linuxnet.iptables import IptablesPacketFilterTable&gt;&gt;&gt; table = IptablesPacketFilterTable('filter')&gt;&gt;&gt; table.init_from_output(output)True&gt;&gt;&gt; input_chain = table.get_chain('INPUT')&gt;&gt;&gt; for rule in input_chain.get_rules():...     print(' '.join(rule.to_iptables_args()))...-j prod_bad_traffic-m state --state RELATED,ESTABLISHED -j ACCEPT-j prod_ingress-j prod_INPUT_ldrop&gt;&gt;&gt;```Modifications to the chains are also supported as shown in thefollowing (hereon, root permissions will be assumed).Creating a new chain:```python&gt;&gt;&gt; from linuxnet.iptables import ChainRule, Targets&gt;&gt;&gt; newchain = table.create_chain('acceptall')&gt;&gt;&gt; newchain.append_rule(ChainRule(target=Targets.ACCEPT))&gt;&gt;&gt;``````console# iptables -nv -L acceptallChain acceptall (0 references) pkts bytes target     prot opt in     out     source               destination    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0#```Modifying the new chain to only accept TCP packets:```python&gt;&gt;&gt; newchain.flush()        # remove the existing rule&gt;&gt;&gt; from linuxnet.iptables import PacketMatch&gt;&gt;&gt; match_tcp = PacketMatch().protocol().equals('tcp')&gt;&gt;&gt; rule = ChainRule(match=match_tcp, target=Targets.ACCEPT)&gt;&gt;&gt; newchain.append_rule(rule)&gt;&gt;&gt; newchain.append_rule(ChainRule(target=Targets.DROP))&gt;&gt;&gt;``````console# iptables -L acceptall -nvChain acceptall (0 references) pkts bytes target     prot opt in     out     source               destination    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0    0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0#```Deleting the new chain:```python&gt;&gt;&gt; table.delete_chain(newchain)&gt;&gt;&gt;```---------------------# InstallationPython3 is required.Available `Makefile` targets can be listed by invoking `make` with no arguments.`make install` will install the package.`make test` runs the unit tests.</longdescription>
</pkgmetadata>