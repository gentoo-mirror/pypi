<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>wirerope========The concepts:- `wirerope.rope.WireRope` is a wrapper interface for python callable.- Custom `wirerope.wire.Wire` class provides user-defined behavior.  A subclass of this class is working similar to a *decorator function* body.- A wire object is associated with a bound method.- Rope is dispatching types.`wirerope.rope.WireRope` is the wrapper for callables. By wrapping afunction with `WireRope` with a custom subclass of the `wirerope.wire.Wire`class, the wire object will be created by each function or bound method.`Wire` is the most important part. The given class will be instantiated andbound to each function or bound method - which fits the concept of *instancecmethod* of human.For example, when `f` is a free function or staticmethod, the wire also willbe a single object. When `f` is a method or property, wires will be created foreach method owner object `self`. When `f` is a classmethod, wires will becreated for each method owner class `cls`. Yes, it will detect the ownerand bound to it regardless of the calling type.`Rope` is internal dispatcher. It will be helpful when creating a complexobject for decorated callable instead of simple callable feature.See also--------- See [documentation](https://wirerope.readthedocs.io/en/latest/) - though it  is not yet written very well.- See `tests/test_wire.py` for simple example.- See [methodtools](https://github.com/youknowone/methodtools) for practical  example.</longdescription>
</pkgmetadata>