<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;    &lt;br&gt;ñ§ê domonic ñ§ê&lt;br&gt;&lt;/h1&gt;[![PyPI version](https://badge.fury.io/py/domonic.svg)](https://badge.fury.io/py/domonic.svg)[![Downloads](https://pepy.tech/badge/domonic)](https://pepy.tech/project/domonic)[![Python version](https://img.shields.io/pypi/pyversions/domonic.svg?style=flat)](https://img.shields.io/pypi/pyversions/domonic.svg?style=flat)[![Build status](https://travis-ci.com/byteface/domonic.svg?branch=master)](https://travis-ci.com/byteface/domonic.svg?branch=master)[![Python package](https://github.com/byteface/domonic/actions/workflows/python-package.yml/badge.svg?branch=master)](https://github.com/byteface/domonic/actions/workflows/python-package.yml)#### A DOM for making HTML with python 3! (and more)### Install```bashpython3 -m pip install domonic# python3 -m pip install domonic --upgrade ```## Creating HTML with Python 3```pythonfrom domonic.html import *print(html(body(h1('Hello, World!'))))# &lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;```or to pretty format and insert the doctype, use an f-string:```pythonmydom = html(body(h1('Hello, World!'), a(&quot;somelink&quot;, _href=&quot;somepage.html&quot;)))print(f&quot;{mydom}&quot;)``````html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;a href=&quot;somepage.html&quot;&gt;somelink&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;```### parsing htmlBasic useage...```bashfrom domonic import domonicmydom = domonic.parseString('&lt;somehtml...')```To quickly parse a webapge try the window module...```bashfrom domonic.window import windowwindow.location = &quot;http://www.google.com&quot;print(window.document.title)```Also try the xpath or css selectors on command line...```bashdomonic -x https://google.com '//a' | uniq | sort```### More- [html](https://domonic.readthedocs.io/_modules/domonic/html.html) : Generate html with python 3 üòé- [dom](https://domonic.readthedocs.io/_modules/domonic/dom.html) : DOM API in python 3 üò≤- [javascript](https://domonic.readthedocs.io/_modules/domonic/javascript.html) : js API in python 3 üò≥ + ([dQuery](https://domonic.readthedocs.io/packages/dQuery.html), [d3](https://domonic.readthedocs.io/packages/d3.html))- JSON : utils for loading / decorating / transforming- SVG || mathml || aframe || x3d tags - generators for popular tags- terminal || cmd : call terminal commands with python3 üò±See the [docs/code](https://domonic.readthedocs.io/) for more features...or examples in the [repo...](https://github.com/byteface/domonic/tree/master/examples)### NamespaceUse the tags packaage if you want a namespace. i.e.```pythonimport domonic.tagsprint(domonic.tags.h1)# orimport domonic.tags as tagsstr(tags.div)# or import domonic.tags as htmlprint(html.span)```or just import what you need...```pythonfrom domonic import div, span, input as myinput, html as root```### html attributesprepend attributes with an underscore ( avoids clashing with python keywords )```pythontest = label(_class='classname', _for=&quot;someinput&quot;)print(test)``````html&lt;label class=&quot;classname&quot; for=&quot;someinput&quot;&gt;&lt;/label&gt;```### rendering DOM objectsdomonic is a pure python dom whos tree is composed of objects. i.e```pythondiv()# &lt;domonic.html.div object at 0x106b0e6b0&gt;```cast str() on any element to render it without formatting.```pythonel = str(div())print(el)# &lt;div&gt;&lt;/div&gt;```There's also a render method that takes 2 parameters, some domonic and an optional output file.```pythonpage = div(span('Hello World'))render(f&quot;{page}&quot;, 'index.html')  # notice use of f-string to pretty print the html```There's a few new rendering options. See DOMConfig.```pythonfrom domonic.dom import DOMConfigprint(DOMConfig.GLOBAL_AUTOESCAPE)  # Default Falseprint(DOMConfig.RENDER_OPTIONAL_CLOSING_TAGS)  # Default Trueprint(DOMConfig.RENDER_OPTIONAL_CLOSING_SLASH)  # Defaults Trueprint(DOMConfig.SPACE_BEFORE_OPTIONAL_CLOSING_SLASH)  # Default False```## DOMDOM manipulation with python.### createElementto create your own elements use the DOM API```pythonfrom domonic.dom import *site = html()el = document.createElement('myelement')site.appendChild(el)print(site)# &lt;html&gt;&lt;myelement&gt;&lt;/myelement&gt;&lt;/html&gt;```There's an evolving DOM API. To learn more about the webAPI [click here](https://developer.mozilla.org/en-US/docs/Web/API).And check the [code/docs](https://domonic.readthedocs.io/) to see what's currently been implemented.```pythonmysite.querySelectorAll('button') mysite.querySelectorAll(&quot;a[rel=nofollow]&quot;)mysite.querySelectorAll(&quot;a[href='#services']&quot;)mysite.querySelectorAll(&quot;a[href$='technology']&quot;)mysite.querySelectorAll('.fa-twitter')somelinks = mysite.querySelectorAll(&quot;a[href*='twitter']&quot;)for l in somelinks:    print(l.href)```To use the DOM either reference your root 'html' node or import the dom modules global 'document'```python# access the document via the html tagmydom = html()# mydom.getElementbyID...# or by importing the document globalfrom domonic.dom import document# document.createElement...print(document)```### javascriptThere is a javascript package that mimics the js API:```pythonfrom domonic.javascript import Mathprint(Math.random())from domonic.javascript import ArraymyArr=Array(1,2,3)print(myArr.splice(1))# [2, 3]from domonic.javascript import URLurl = URL('https://somesite.com/blog/article-one#some-hash')print(url.protocol)  # httpsprint(url.host)  # somesite.comprint(url.pathname)  # /blog/article-oneprint(url.hash)  # #some-hash# Use Global class to import all the js methods from the global namespace i.e# from domonic.javascript import Global# Global.decodeURIComponent(...# Global.encodeComponent(...# Global.setInterval(...# from domonic.javascript import Date, String, Number# etc..```Use setInterval and clearInterval with params```pythonfrom domonic.javascript import setInterval, clearIntervalx=0def hi(inc):    global x    x = x+inc    print(x)test = setInterval(hi, 1000, 2)import timetime.sleep(5)clearInterval(test)print(f&quot;Final value of x:{x}&quot;)```Or for a single delayed function call use setTimeout, clearTimeout```pythonfrom domonic.javascript import setTimeout, clearTimeouttimeoutID = setTimeout(hi, 1000)```You can call ```()``` on a stringvar to transform it into a Node```pythonfrom domonic.javascript import Stringtest = String(&quot;Hi there!&quot;)test('div', _style=&quot;font-color:red;&quot;)str(test('div', _style=&quot;font-color:red;&quot;))# &lt;div style=&quot;font-color:red;&quot;&gt;Hi there!&lt;/div&gt;```a-tags inherit URL:```pythonfrom domonic.html import *atag = a(_href=&quot;https://somesite.com:8000/blog/article-one#some-hash&quot;)print('href:', atag.href)# href: https://somesite.com:8000/blog/article-one#some-hashprint('protocol:', atag.protocol)# protocol: https:print('port:', atag.port)# port: 8000atag.protocol = &quot;http&quot;atag.port = 8983print(atag)# &lt;a href=&quot;http://somesite.com:8983/blog/article-one#some-hash&quot;&gt;```For writing and using regular javascript, load from a src...```pythonscript(_src=&quot;/docs/5.0/dist/js/bootstrap.bundle.min.js&quot;, _integrity=&quot;sha384-1234&quot;, _crossorigin=&quot;anonymous&quot;),# &lt;script src=&quot;/docs/5.0/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-1234&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;```or do inline js by opening triple quotes...```pythonscript(&quot;&quot;&quot;let itbe = &quot;&quot;&quot;&quot;&quot;),```### StylingStyling is supported. Styles get passed to the style tag on render...```pythonmytag = div(&quot;hi&quot;, _id=&quot;test&quot;)mytag.style.backgroundColor = &quot;black&quot;mytag.style.fontSize = &quot;12px&quot;print(mytag)# &lt;div id=&quot;test&quot; style=&quot;background-color:black;font-size:12px;&quot;&gt;hi&lt;/div&gt;```To use css use a link tag as you usually would...```pythonlink(_href=&quot;styles.css&quot;, _rel=&quot;stylesheet&quot;),```or use triple quotes to open style tag...```pythonstyle(&quot;&quot;&quot;.placeholder-img {    -webkit-user-select: none;    -moz-user-select: none;    -ms-user-select: none;    user-select: none;}&quot;&quot;&quot;),```### decoratorsuse decorators to wrap elements around function results```pythonfrom domonic.decorators import el@el(html, True)@el(body)@el(div)def test():    return 'hi!'print(test())# &lt;html&gt;&lt;body&gt;&lt;div&gt;hi!&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;# returns pyml objects so call str to renderassert str(test()) == '&lt;html&gt;&lt;body&gt;&lt;div&gt;hi!&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'```It returns the tag object by default. You can pass True as a second param to the decorator to return a rendered string instead. Also accepts strings as first param i.e. custom tags.### data-tagspython doesn't allow hyphens in parameter names. so use variable keyword argument syntax for custom data-tags```pythondiv(&quot;test&quot;, **{&quot;_data-test&quot;:&quot;test&quot;} )# &lt;div data-test=&quot;test&quot;&gt;test&lt;/div&gt;```or for example a colon...```pythont = div( **{&quot;_:test&quot;:&quot;something&quot;} )str(t)# &lt;div :test=&quot;something&quot;&gt;&lt;/div&gt;```### JSON (utils)decorate any function that returns python objects to return json instead```pythonfrom domonic.decorators import as_jsonimport domonic.JSON as JSON@as_jsondef somefunc():    myObj = {&quot;hi&quot;:[1,2,3]}    return myObjprint( somefunc() )# {&quot;hi&quot;:[1,2,3]}print( JSON.is_json(somefunc()) )# True```convert json arrays into html tables...```pythonimport domonic.JSON as JSON# i.e. containting flat json array of dicts... [{&quot;id&quot;:&quot;01&quot;,&quot;name&quot;: &quot;some item&quot;},{&quot;id&quot;:&quot;02&quot;,&quot;name&quot;: &quot;some other item&quot;}]json_data = JSON.parse_file('somefile.json')mytable = JSON.tablify(json_data)print(mytable)```convert json arrays into csv files...```pythonimport domonic.JSON as JSONjson_data = JSON.parse_file('somefile.json')JSON.csvify(json_data, 'data.csv')```convert csv files to json...```pythonimport domonic.JSON as JSONjson_data =JSON.csv2json(&quot;data.csv&quot;)print(json_data)```more to come...### SVGAll tags extend 'Element'. So will have DOM and magic methods available to them. See the [docs](https://domonic.readthedocs.io/).```pythoncirc = svg(    circle(_cx=&quot;50&quot;, _cy=&quot;50&quot;, _r=&quot;40&quot;, _stroke=&quot;green&quot;, **{&quot;_stroke-width&quot;: &quot;4&quot;}, _fill=&quot;yellow&quot;),    _width=&quot;100&quot;, _height=&quot;100&quot;,)mysvg = svg()mysvg.appendChild(circ / 10)print(mysvg)```### TweeningTween values with the tween library:```pythonfrom domonic.lerpy.easing import *from domonic.lerpy.tween import *someObj = {'x':0,'y':0,'z':0}twn = Tween( someObj, { 'x':10, 'y':5, 'z':3 }, 6, Linear.easeIn )twn.start()```### aframe / x3d3d tags can be used if you import the js```pythonfrom domonic.html import *from domonic.xml.aframe import *from domonic.CDN import *_scene = scene(      box(_position=&quot;-1 0.5 -3&quot;, _rotation=&quot;0 45 0&quot;, _color=&quot;#4CC3D9&quot;),      sphere(_position=&quot;0 1.25 -5&quot;, _radius=&quot;1.25&quot;, _color=&quot;#EF2D5E&quot;),      cylinder(_position=&quot;1 0.75 -3&quot;, _radius=&quot;0.5&quot;, _height=&quot;1.5&quot;, _color=&quot;#FFC65D&quot;),      plane(_position=&quot;0 0 -4&quot;, _rotation=&quot;-90 0 0&quot;, _width=&quot;4&quot;, _height=&quot;4&quot;, _color=&quot;#7BC8A4&quot;),      sky(_color=&quot;#ECECEC&quot;)    )_webpage = html(head(),body(    script(_src=CDN_JS.AFRAME_1_2), # &lt; NOTICE you need to import aframe to use it    str(_scene)    ))render( _webpage, 'hello.html' )```### dQuery (NEW)dQuery uses the ¬∫ symbol (alt+0).```pythonfrom domonic.html import *from domonic.dQuery import ¬∫d = html(head(body(li(_class='things'), div(_id=&quot;test&quot;))))print( ¬∫('#test') )# &lt;div id=&quot;test&quot;&gt;print( ¬∫('.things') )# &lt;li class=&quot;things&quot;&gt;mydiv = ¬∫('&lt;div class=&quot;test2&quot;&gt;&lt;/div&gt;')# &lt;domonic.dQuery.o object at 0x107d5c9a0&gt;b = ¬∫('#test').append(mydiv)print(b)# &lt;div id=&quot;test&quot;&gt;&lt;div class=&quot;test2&quot;&gt;&lt;/div&gt;&lt;/div&gt;```Only recently started so check to see what's implemented.### terminalThere is a command line package that can call bash/unix/posix and other apps on the command line:This package only works on nix systems as it effectively just passes stuff off to subprocess.```pythonfrom domonic.terminal import *print(ls())print(ls(&quot;-al&quot;))print(ls(&quot;../&quot;))print(pwd())print(mkdir('somedir'))print(touch('somefile'))print(git('status'))for file in ls( &quot;-al&quot; ):    print(&quot;Line : &quot;, file)for f in ls():    try:        print(f)        print(cat(f))    except Exception as e:        passfor i, l in enumerate(cat('LICENSE.txt')):    print(i,l)print(man(&quot;ls&quot;))print(echo('test'))print(df())print(du())for thing in du():    print(thing)print(find('.'))# print(ping('eventual.technology'))# &lt; TODO - need to strean outputprint(cowsay('moo'))print(wget('eventual.technology'))print(date())print(cal())```or just run arbitrary commands...```pythonfrom domonic.terminal import commandcommand.run(&quot;echo hi&quot;)```Take a look at the code in 'terminal.py' to see all the commands as there's loads. (Disclaimer: not all tested.)Windows users can use now use cmd.```pythonfrom domonic.cmd import *print(dir())print(dir(&quot;..\\&quot;)) ```### DOCS[https://domonic.readthedocs.io/](https://domonic.readthedocs.io/)### CLIUse the command line interface to help you out.To view the online the docs:```pythondomonic -h```To see the version:```bashdomonic -v```To quickly create a domonic project for prototyping:```bashdomonic -p myproject```To evaluate some domonic pyml:```bashdomonic -e 'html(head(),body(div()))'```To use xpath on a website from the command line:```bashdomonic -x https://google.com '//a'```To use css selectors on a website from the command line:```bashdomonic -q https://google.com 'a'```### EXAMPLE PROJECTS[Blueberry](https://github.com/byteface/Blueberry/) : A browser based file OS. Working example of how components can work.[ezcron](https://github.com/byteface/ezcron/) : A cron viewer[bombdisposer](https://github.com/byteface/bombdisposer/) : A basic game[htmlx](https://github.com/byteface/htmlx/tree/master/htmlx) : A low dependency lightweight (DOM only) version of domonicCheckout [the docs](https://domonic.readthedocs.io/) for more examples i.e. generating sitemaps or using domonic with server frameworks like flask, django, sanic, fastapi and others.There's also several useage examples in the repo so pull and have a look.### Join-InFeel free to contribute if you find it useful. (I'd be grateful for help on all fronts)Email me, message me directly if you like or create a discussion on here. Or join the [discord](https://discord.gg/a9pSZv4V5f).If there are any methods you want that are missing or not complete yet or you think you can help make it better just update the code and send a pull request. I'll merge and releaese asap.In the repo there's a requirements-dev.txt which is mostly the libs used in the examples.requirements.txt are the libs used for packaging just the lib.See also the CONTRIBUTING.md### running examples```bash. venv/bin/activatepip install -r requirements-dev.txtcd examplespython lifecalendar.py```### run testsThere are tests used during dev. They are useful as code examples and to see what still needs doing.See Makefile to run all tests:```bashmake test  # default tests ubuntu. so will fail on window when terminal test runs. comment out locally if that's the case```or to test a single function:```bashpython -m unittest tests.test_javascript.TestCase.test_javascript_arraypython -m unittest tests.test_dQuery.TestCase.test_addClasspython -m unittest tests.test_geom.TestCase.test_vec2python3 -m unittest tests.test_cmd.TestCase.test_cmd_dir  # only windows```or to test a whole module```bashpython -m unittest tests.test_htmlpython -m unittest tests.test_CDN```to see coverage```bashcoverage run -m unittest discover tests/coverage report```or...```bashpip install pytestpytest tests```### DisclaimerThere's several more widely supported libraries doing HTML generation, DOM reading/manipulation, terminal wrappers etc. Maybe use one of those for production due to strictness and support.This is more of a fast prototyping library.</longdescription>
</pkgmetadata>