<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. class:: center.. image:: https://codecov.io/gh/pydicom/pynetdicom/branch/master/graph/badge.svg    :target: https://codecov.io/gh/pydicom/pynetdicom.. image:: https://github.com/pydicom/pynetdicom/workflows/unit-tests/badge.svg    :target: https://github.com/pydicom/pynetdicom/actions?query=workflow%3Aunit-tests.. image:: https://github.com/pydicom/pynetdicom/workflows/type-hints/badge.svg    :target: https://github.com/pydicom/pynetdicom/actions?query=workflow%3Atype-hints.. image:: https://circleci.com/gh/pydicom/pynetdicom/tree/master.svg?style=shield    :target: https://circleci.com/gh/pydicom/pynetdicom/tree/master.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black.. image:: https://badge.fury.io/py/pynetdicom.svg    :target: https://badge.fury.io/py/pynetdicom.. image:: https://img.shields.io/pypi/pyversions/pynetdicom.svg    :target: https://img.shields.io/pypi/pyversions/pynetdicom.svg.. image:: https://img.shields.io/conda/vn/conda-forge/pynetdicom.svg   :target: https://anaconda.org/conda-forge/pynetdicom.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.3880767.svg   :target: https://doi.org/10.5281/zenodo.3880767.. image:: https://badges.gitter.im/pydicom/Lobby.svg    :target: https://gitter.im/pydicom/Lobbypynetdicom==========A Python implementation of the `DICOM &lt;http://dicom.nema.org&gt;`_networking protocol, originally based on (legacy)`pynetdicom &lt;https://github.com/patmun/pynetdicom_legacy&gt;`_.Description-----------`DICOM &lt;http://dicom.nema.org&gt;`_ is the international standard for medicalimages and related information. It defines the formats and communicationprotocols for media exchange in radiology, cardiology, radiotherapy and othermedical domains.*pynetdicom* is a pure Python 3.7+ package that implements the DICOMnetworking protocol. Working with`pydicom &lt;https://github.com/pydicom/pydicom&gt;`_, it allows the easy creationof DICOM *Service Class Users* (SCUs) and *Service Class Providers* (SCPs).*pynetdicom's* main user class is`AE &lt;https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.ae.ApplicationEntity.html&gt;`_and is used to represent a DICOM Application Entity. With it you can:- Start the application as an SCP by specifying the supported presentation  contexts then calling  `AE.start_server() &lt;https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.ae.ApplicationEntity.html#pynetdicom.ae.ApplicationEntity.start_server&gt;`_  and waiting for incoming association requests- Use the application as an SCU by specifying the presentation contexts you  want the peer SCP to support, then requesting an association  via the  `AE.associate() &lt;https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.ae.ApplicationEntity.html#pynetdicom.ae.ApplicationEntity.associate&gt;`_  method, which returns an  `Association &lt;https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association&gt;`_  thread.Once associated, the services available to the association canbe used by sending`DIMSE-C &lt;http://dicom.nema.org/medical/dicom/current/output/html/part07.html#chapter_9&gt;`_and`DIMSE-N &lt;http://dicom.nema.org/medical/dicom/current/output/html/part07.html#chapter_10&gt;`_messages.Documentation-------------The *pynetdicom*`tutorials &lt;https://pydicom.github.io/pynetdicom/stable/tutorials/index.html&gt;`_,`user guide &lt;https://pydicom.github.io/pynetdicom/stable/user/index.html&gt;`_,`code examples &lt;https://pydicom.github.io/pynetdicom/stable/examples/index.html&gt;`_,`application &lt;https://pydicom.github.io/pynetdicom/stable/apps/index.html&gt;`_ and`API reference &lt;https://pydicom.github.io/pynetdicom/stable/reference/index.html&gt;`_documentation is available for the`current release &lt;https://pydicom.github.io/pynetdicom/&gt;`_ as well as the`development version &lt;https://pydicom.github.io/pynetdicom/dev&gt;`_.Installation------------Dependencies~~~~~~~~~~~~`pydicom &lt;https://github.com/pydicom/pydicom&gt;`_Installing current release~~~~~~~~~~~~~~~~~~~~~~~~~~Using pip:.. code-block:: sh    $ pip install pynetdicomUsing conda:.. code-block:: sh    $ conda install -c conda-forge pynetdicomInstalling development version~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code-block:: sh    $ pip install git+https://github.com/pydicom/pynetdicom.gitSupported DIMSE Services------------------------SCU Services~~~~~~~~~~~~When the AE is acting as an SCU and an association has been established with apeer SCP, the following DIMSE-C and -N services are available:.. _assoc: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html.. _echo: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_echo.. _find: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_find.. _c_get: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_get.. _move: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_move.. _store: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_c_store.. _action: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_action.. _create: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_create.. _delete: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_delete.. _er: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_event_report.. _n_get: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_get.. _set: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html#pynetdicom.association.Association.send_n_set+----------------+----------------------------------------------------------------------------------------+| DIMSE service  | `Association &lt;assoc_&gt;`_ method                                                         |+================+========================================================================================+| C-ECHO         | `Association.send_c_echo() &lt;echo_&gt;`_                                                   |+----------------+----------------------------------------------------------------------------------------+| C-FIND         | `Association.send_c_find(dataset, query_model) &lt;find_&gt;`_                               |+----------------+----------------------------------------------------------------------------------------+| C-GET          | `Association.send_c_get(dataset, query_model) &lt;c_get_&gt;`_                               |+----------------+----------------------------------------------------------------------------------------+| C-MOVE         | `Association.send_c_move(dataset, move_aet, query_model) &lt;move_&gt;`_                     |+----------------+----------------------------------------------------------------------------------------+| C-STORE        | `Association.send_c_store(dataset) &lt;store_&gt;`_                                          |+----------------+----------------------------------------------------------------------------------------+| N-ACTION       | `Association.send_n_action(dataset, action_type, class_uid, instance_uid) &lt;action_&gt;`_  |+----------------+----------------------------------------------------------------------------------------+| N-CREATE       | `Association.send_n_create(dataset, class_uid, instance_uid) &lt;create_&gt;`_               |+----------------+----------------------------------------------------------------------------------------+| N-DELETE       | `Association.send_n_delete(class_uid, instance_uid) &lt;delete_&gt;`_                        |+----------------+----------------------------------------------------------------------------------------+| N-EVENT-REPORT | `Association.send_n_event_report(dataset, event_type, class_uid, instance_uid) &lt;er_&gt;`_ |+----------------+----------------------------------------------------------------------------------------+| N-GET          | `Association.send_n_get(identifier_list, class_uid, instance_uid) &lt;n_get_&gt;`_           |+----------------+----------------------------------------------------------------------------------------+| N-SET          | `Association.send_n_set(dataset, class_uid, instance_uid) &lt;set_&gt;`_                     |+----------------+----------------------------------------------------------------------------------------+Where *dataset* is a pydicom`Dataset &lt;https://pydicom.github.io/pydicom/stable/ref_guide.html#dataset&gt;`_object, *query_model* is a UID string, *identifier_list* is a list of pydicom`Tag &lt;https://pydicom.github.io/pydicom/stable/api_ref.html#pydicom.tag.Tag&gt;`_objects, *event_type* and *action_type* are ints and *class_uid* and*instance_uid* are UID strings. See the`Association documentation &lt;https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.association.Association.html&gt;`_for more information.SCP Services~~~~~~~~~~~~When the AE is acting as an SCP the following DIMSE-C and -N services areavailable to the peer once an association has been established:.. _hecho: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_echo.html.. _hfind: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_find.html.. _hc_get: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_c_get.html.. _hmove: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_move.html.. _hstore: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_store.html.. _haction: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_action.html.. _hcreate: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_create.html.. _hdelete: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_delete.html.. _her: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_event_report.html.. _hn_get: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_n_get.html.. _hset: https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom._handlers.doc_handle_set.html+----------------+----------------------------+---------------------------------+| DIMSE service  | Intervention Event         | Handler documentation           |+================+============================+=================================+| C-ECHO         | ``evt.EVT_C_ECHO``         | `Handle C-ECHO &lt;hecho_&gt;`_       |+----------------+----------------------------+---------------------------------+| C-FIND         | ``evt.EVT_C_FIND``         | `Handle C-FIND &lt;hfind_&gt;`_       |+----------------+----------------------------+---------------------------------+| C-GET          | ``evt.EVT_C_GET``          | `Handle C-GET &lt;hc_get_&gt;`_       |+----------------+----------------------------+---------------------------------+| C-MOVE         | ``evt.EVT_C_MOVE``         | `Handle C-MOVE &lt;hmove_&gt;`_       |+----------------+----------------------------+---------------------------------+| C-STORE        | ``evt.EVT_C_STORE``        | `Handle C-STORE &lt;hstore_&gt;`_     |+----------------+----------------------------+---------------------------------+| N-ACTION       | ``evt.EVT_N_ACTION``       | `Handle N-ACTION &lt;haction_&gt;`_   |+----------------+----------------------------+---------------------------------+| N-CREATE       | ``evt.EVT_N_CREATE``       | `Handle N-CREATE &lt;hcreate_&gt;`_   |+----------------+----------------------------+---------------------------------+| N-DELETE       | ``evt.EVT_N_DELETE``       | `Handle N-DELETE &lt;hdelete_&gt;`_   |+----------------+----------------------------+---------------------------------+| N-EVENT-REPORT | ``evt.EVT_N_EVENT_REPORT`` | `Handle N-EVENT-REPORT &lt;her_&gt;`_ |+----------------+----------------------------+---------------------------------+| N-GET          | ``evt.EVT_N_GET``          | `Handle N-GET &lt;hn_get_&gt;`_       |+----------------+----------------------------+---------------------------------+| N-SET          | ``evt.EVT_N_SET``          | `Handle N-SET &lt;hset_&gt;`_         |+----------------+----------------------------+---------------------------------+With the exception of the C-ECHO service, a user-defined callable function,*handler*, must be bound to the corresponding`intervention event &lt;https://pydicom.github.io/pynetdicom/stable/user/events#intervention-events&gt;`_in order to complete a DIMSE service request. Eventscan be imported with ``from pynetdicom import evt`` and a handler can bebound to an event prior to starting an association through the *evt_handlers*keyword arguments in`AE.start_server() &lt;https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.ae.ApplicationEntity.html#pynetdicom.ae.ApplicationEntity.start_server&gt;`_and`AE.associate() &lt;https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.ae.ApplicationEntity.html#pynetdicom.ae.ApplicationEntity.associate&gt;`_.When an event occurs the *handler* function is called and passed a singleparameter, *event*, which is an`Event &lt;https://pydicom.github.io/pynetdicom/stable/reference/generated/pynetdicom.events.Event.html&gt;`_object whose specific attributesare dependent on the type of event that occurred. Handlers bound tointervention events must  return or yield certain values. See the`handler documentation &lt;https://pydicom.github.io/pynetdicom/stable/reference/events&gt;`_for information on what attributes and properties are available in ``Event``for each event type and the expected returns/yields for thecorresponding handlers.Applications------------Some basic DICOM applications are included with *pynetdicom*:* `echoscp &lt;https://pydicom.github.io/pynetdicom/stable/apps/echoscp.html&gt;`_* `echoscu &lt;https://pydicom.github.io/pynetdicom/stable/apps/echoscu.html&gt;`_* `findscu &lt;https://pydicom.github.io/pynetdicom/stable/apps/findscu.html&gt;`_* `getscu &lt;https://pydicom.github.io/pynetdicom/stable/apps/getscu.html&gt;`_* `qrscp &lt;https://pydicom.github.io/pynetdicom/stable/apps/qrscp.html&gt;`_* `movescu &lt;https://pydicom.github.io/pynetdicom/stable/apps/movescu.html&gt;`_* `storescp &lt;https://pydicom.github.io/pynetdicom/stable/apps/storescp.html&gt;`_* `storescu &lt;https://pydicom.github.io/pynetdicom/stable/apps/storescu.html&gt;`_Code Examples-------------More`code examples &lt;https://pydicom.github.io/pynetdicom/stable/examples/index.html&gt;`_are available in the documentation.Echo SCU~~~~~~~~Send a C-ECHO request to a Verification SCP (at TCP/IP address*addr*, listen port number *port*):.. code-block:: python        from pynetdicom import AE        ae = AE(ae_title=b'MY_ECHO_SCU')        # Verification SOP Class has a UID of 1.2.840.10008.1.1        #   we can use the UID str directly when adding the requested        #   presentation context        ae.add_requested_context('1.2.840.10008.1.1')        # Associate with a peer AE        assoc = ae.associate(addr, port)        if assoc.is_established:            # Send a DIMSE C-ECHO request to the peer            status = assoc.send_c_echo()            # Print the response from the peer            if status:                print('C-ECHO Response: 0x{0:04x}'.format(status.Status))            # Release the association            assoc.release()Echo SCP~~~~~~~~Create a blocking Echo SCP on port ``11112`` (you may optionallybind a handler to the ``evt.EVT_C_ECHO`` event if you want to return somethingother than an ``0x0000`` *Success* status):.. code-block:: python        from pynetdicom import AE, VerificationPresentationContexts        ae = AE(ae_title=b'MY_ECHO_SCP')        # Or we can use the inbuilt VerificationPresentationContexts list,        #   there's one for each of the supported Service Classes        # In this case, we are supporting any requests to use Verification SOP        #   Class in the association        ae.supported_contexts = VerificationPresentationContexts        # Start the SCP on (host, port) in blocking mode        ae.start_server((&quot;localhost&quot;, 11112), block=True)Alternatively, you can start the SCP in non-blocking mode, which returns therunning server instance. This can be useful when you want to run a Storage SCPand make C-MOVE requests within the same AE.In the next example we'll create a non-blocking Verification SCP and bind ahandler for the C-ECHO service request event ``evt.EVT_C_ECHO`` that logs therequestor's address and port number and the timestamp for the event... code-block:: python        import logging        from pynetdicom import AE, evt, debug_logger        from pynetdicom.sop_class import VerificationSOPClass        # Setup logging to use the StreamHandler at the debug level        debug_logger()        ae = AE(ae_title=b'MY_ECHO_SCP')        ae.add_supported_context(VerificationSOPClass)        # Implement the EVT_C_ECHO handler        def handle_echo(event, logger):            &quot;&quot;&quot;Handle a C-ECHO service request.            Parameters            ----------            event : evt.Event                The C-ECHO service request event, this parameter is always                present.            logger : logging.Logger                The logger to use, this parameter is only present because we                bound ``evt.EVT_C_ECHO`` using a 3-tuple.            Returns            -------            int or pydicom.dataset.Dataset                The status returned to the peer AE in the C-ECHO response.                Must be a valid C-ECHO status value as either an ``int`` or a                ``Dataset`` object containing an (0000,0900) *Status* element.            &quot;&quot;&quot;            # Every *Event* includes `assoc` and `timestamp` attributes            #   which are the *Association* instance the event occurred in            #   and the *datetime.datetime* the event occurred at            requestor = event.assoc.requestor            timestamp = event.timestamp.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)            msg = (                &quot;Received C-ECHO service request from ({}, {}) at {}&quot;                .format(requestor.address, requestor.port, timestamp)            )            logger.info(msg)            # Return a *Success* status            return 0x0000        # By binding using a 3-tuple we can pass extra arguments to        #   the handler        handlers = [(evt.EVT_C_ECHO, handle_echo, [logging.getLogger('pynetdicom')])]        # Start the SCP in non-blocking mode        scp = ae.start_server((&quot;localhost&quot;, 11112), block=False, evt_handlers=handlers)        # Associate and send a C-ECHO request to our own Verification SCP        ae.add_requested_context(VerificationSOPClass)        assoc = ae.associate('localhost', 11112)        if assoc.is_established:            status = assoc.send_c_echo()            assoc.release()        # Shutdown the SCP        scp.shutdown()Storage SCU~~~~~~~~~~~Send the DICOM *CT Image Storage* dataset in *file-in.dcm* to a peer StorageSCP (at TCP/IP address *addr*, listen port number *port*):.. code-block:: python        from pydicom import dcmread        from pydicom.uid import ImplicitVRLittleEndian        from pynetdicom import AE, VerificationPresentationContexts        from pynetdicom.sop_class import CTImageStorage, MRImageStorage        ae = AE(ae_title=b'MY_STORAGE_SCU')        # We can also do the same thing with the requested contexts        ae.requested_contexts = VerificationPresentationContexts        # Or we can use inbuilt objects like CTImageStorage.        # The requested presentation context's transfer syntaxes can also        #   be specified using a str/UID or list of str/UIDs        ae.add_requested_context(CTImageStorage,                                 transfer_syntax=ImplicitVRLittleEndian)        # Adding a presentation context with multiple transfer syntaxes        ae.add_requested_context(MRImageStorage,                                 transfer_syntax=[ImplicitVRLittleEndian,                                                  '1.2.840.10008.1.2.1'])        assoc = ae.associate(addr, port)        if assoc.is_established:            dataset = dcmread('file-in.dcm')            # `status` is the response from the peer to the store request            # but may be an empty pydicom Dataset if the peer timed out or            # sent an invalid dataset.            status = assoc.send_c_store(dataset)            assoc.release()</longdescription>
</pkgmetadata>