<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DataDog Logger #A Python `logging.Handler` for sending log messages to DataDog asEvents## Installation ##```pip install datadog-logger```## Usage ##The simplest way to enable logging to DataDog is to use the`log_error_events` helper, which will cause all `logging.ERROR` andhigher messages to be sent to DataDog:```pythonimport datadogfrom datadog_logger import log_error_eventsimport logging# Authenticate with DataDogdatadog.initialize(api_key=&quot;api-key&quot;, app_key=&quot;app-key&quot;)# Note, a normal STDOUT handler will not be configured if this is not# called firstlogging.basicConfig()log_error_events(tags=[&quot;tag1:value&quot;, &quot;tag2:value&quot;], mentions=[&quot;@devs&quot;, &quot;@slack&quot;])logging.error(&quot;Oh no!&quot;)```This will enable the handler on the root logger; `tags` and `mentions`may both be `None`, in which case none will be included. The handlerwill have a log level of `logging.ERROR`, meaning only `ERROR` and`CRITICAL` (or any higher custom levels) will be sent to DataDog.A specific logger may also be specified by name:```pythonlog_error_events(&quot;some.logger&quot;)```### Details ###The `Handler` may also be created and added to a logger manually:```pythonimport datadogfrom datadog_logger import DatadogLogHandlerimport loggingdatadog.initialize(api_key=&quot;api-key&quot;, app_key=&quot;app-key&quot;)datadog_handler = DatadogLogHandler(    tags=[&quot;some:tag&quot;], mentions=[&quot;@some-mention&quot;], level=logging.WARNING)# Enable STDOUT logginglogging.basicConfig()# The root loggerlogger = logging.getLogger()logger.addHandler(datadog_handler)# This will be logged, because the level is WARNINGlogger.warning(&quot;Watch out!&quot;)# This will notlogger.info(&quot;Lets not log everything to DataDog&quot;)```When the event is created, the `msg` of the log record will be passedas the title of the event. Normally, this would be the string passedinto the logging call, with any `%` substitutions applied.The text of the event will be the formatted record. If the logrecord includes `exc_info` (i.e. because you called`logging.exception`, or passed `exc_info` to the log function), thenthe full stack trace will be included in the event text.Any `@mentions` passed via the `mentions` constructor argument will beappended to the end of the text, so this library can be used to alert,via DataDog, on particular log messages.</longdescription>
</pkgmetadata>