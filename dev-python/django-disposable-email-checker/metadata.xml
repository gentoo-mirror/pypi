<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============================django-disposable-email-checker===============================[![PyPI version](https://badge.fury.io/py/django-disposable-email-checker.png)](https://pypi.python.org/pypi/django-disposable-email-checker/)[![PyPI version](https://travis-ci.org/jheld/DisposableEmailChecker.png?branch=master)](https://travis-ci.org/jheld/DisposableEmailChecker)[![Requirements Status](https://requires.io/github/jheld/DisposableEmailChecker/requirements.svg?branch=master)](https://requires.io/github/jheld/DisposableEmailChecker/requirements/?branch=master)Django package to detect between ~890 &amp; ~8,600 domains used by disposable email services.You can validate any email against our internal list of ~890 domains used bydisposable email services. Optionally you can also check each domain againstthe [Block-Disposable-Email.com](http://block-disposable-email.com) API,covering ~8,600 domains.This code was initially developed at: https://github.com/aaronbassett/DisposableEmailCheckerHowever PyPI ownership has been transferred to https://github.com/jheld/DisposableEmailChecker and as suchall future contributions are expected to be made to the new github repo.Setup-----Install the disposable email checker from PyPI    pip install django-disposable-email-checkerThe disposable email checker comes with a list of ~890 emails. If you would liketo provide your own email list create a function which returns a list of domainsto block.```pythonfrom disposable_email_checker.emails import email_domain_loaderdef custom_email_domain_loader():    # Anyone still using AOL will be too much of a customer service burden    return [        &quot;aol.com&quot;,    ] + email_domain_loader()```Then add the complete path including function name to your settings```pythonDEC_LOADER = &quot;my.package.custom_email_domain_loader&quot;```If you would like to use the [BDE](http://block-disposable-email.com)integration add your API key to your Django settings```pythonBDEA_APIKEY = &quot;abcnotarealkey123&quot;```optionally you can configure the BDE API timeout in seconds (default 5)```pythonBDEA_TIMEOUT = 2```A default error message can be set globally for the validation checking (this is optional and if left blank it will default to `_('Blocked email provider.')`):```pythonBDEA_MESSAGE = '&lt;blocked email message&gt;'```Adding to your models---------------------Once you have completed setup add the `DisposableEmailField` to your models.```pythonfrom django.db import modelsfrom disposable_email_checker.fields import DisposableEmailFieldclass MyModel(models.Model):    email = DisposableEmailField()```The `DisposableEmailField` has a few optional arguments* **whitelist** - A list of emails which will always be allowed. Defaultsto `[]`* **message** - The error message used by ValidationError if validationfails. Defaults to `_('Blocked email provider.')`* **code** - The error code used by ValidationError if validation fails.Defaults to &quot;invalid&quot;.Using the validator-------------------If you want to use the validator by itself```pythonfrom django.core.exceptions import ValidationErrorfrom disposable_email_checker.validators import validate_disposable_emailemail = &quot;emailaddress@readmetest.com&quot;  # replace with your own valuetry:    validate_disposable_email(email)except ValidationError:    pass```</longdescription>
</pkgmetadata>