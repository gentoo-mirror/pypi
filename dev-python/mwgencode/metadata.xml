<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>`rst file editor &lt;http://rst.ninjs.org&gt;`_mwgencodemaxwin 团队产生工程代码的工具，uml 建模工具为starUML，工程代码包括： swagger，controller，modules，tests code，seeds code，dockerfile，babel.cfg,uwsgi file等maxwin 开发框架使用的 lib1. 工具 `mwutils &lt;https://bitbucket.org/maxwin-inc/mwutils/src&gt;`_2. 认证检查 `mwauth &lt;https://bitbucket.org/maxwin-inc/auth/src&gt;`_3. 确定权限 `mwpermission &lt;https://bitbucket.org/maxwin-inc/mwpermission/src&gt;`_4. 通用服务SDK `mwsdk &lt;https://bitbucket.org/maxwin-inc/mwsdk/src&gt;`_5. aiohttp多语言 `mw-aiohttp-babel &lt;https://bitbucket.org/maxwin-inc/mw-aiohttp-babel/src&gt;`_6. aiohttp认证检查和确权 `mw-aiohttp-security &lt;https://bitbucket.org/maxwin-inc/mw-aiohttp-security/src&gt;`_7. aiohttpsession `mw-aiohttp-session &lt;https://bitbucket.org/maxwin-inc/mw-aiohttp-session/src&gt;`_8. 认证服务 需要kong和consul，支持jwt 和session 认证9. 确权服务 需要kong和consul.. _gencode:生成工程代码的方法1. 创建工程目录，如：order_system2. cd order_system3. 进入cmd,在cmd 输入 ::    gencode init -c提示如下 ::        gen code success!则表示创建专案成功4. 在pycharm中打开 order_system5. 用 `staruml2 &lt;http://staruml.io/download&gt;`_ 打开(暂时不支持starUML v3) ./docs/oder_system.mdj，修改model（ `建模帮助手册 &lt;https://docs.qq.com/doc/DQkZSaUtvWXpMU1lh&gt;`_）6. 在python中执行 gen_code_run.py，则可产生完整的flask专案文件工程文件架构说明&gt; 目录app，为项目- api 目录编写 swagger control 代码- __init__.py 创建 flask app- models.py 物件模型代码，企业物件的规则在此添加- models_base.py 企业物件代码，由工具自动产生，无需手工维护- unitls 增加一些工具代码&gt; docs 保存uml module 文件，mdj 文件为starUML v2的文件&gt; migrations 数据迁移文件，工具自动产生，不需要手工维护&gt; swagger 为swagger file 目录，工具自动产生，不需要手工维护&gt; tests 单元测试代码，每次增加api时，均会产生测试模板文件&gt; seeds 为初始化数据的代码，可视需求增减&gt; root 目录下的文件说明：- config.py flask 的config 文件，包括 TestingConfig（单元测试用的config），DevelopmentConfig（开发模式下用的config），ProductionConfig（生产模式下用的config）- docker 相关文件，docker-compose-dev.yaml(docker compose 样本，生产环境下改名成 docker-compose.yaml即可)，docker-compose.yaml（本地测试文件，不会上传git），Dockerfile- gen_code_run.py 由工具初始化专案时产生，用于产生完整的专案代码 或 每次更新module后，重新生成专案代码- run.py 开发环境下的run 单元， 包含 consul 和 kong 的注册- uwsgi_run.py 生产环境下的run 单元，包含 consul 和 kong 的注册，在docker 中执行- seed_run.py 产生系统默认数据，比如权限资料- migrate_run.sh变更模型后，执行该文件 升级资料库，仅限开发环境- run-dev.sh 为run.sh的模板文件- run.sh 直接开启docker:备注:    1. 其中 要产生 tests 和seeds 目录，需要把test和seed 两个参数设为True，如：gen_code(include_test=True,include_seeds=True)    2. 具体见 **readme.md**数据迁移  支持对开发环境下的sqlite资料的数据迁移，不建议在生产环境中执行，避免人工失误，导致损坏资料1. install or upgrade ::    pip install --upgrade Flask-Migrate2. 指定Flask app-    linux 下 ::        export FLASK_APP=migrate_run.py-    windows 下 ::        set FLASK_APP=migrate_run.py3. 初始化 ::    flask db init4. 产生迁移语句 ::    flask db migrate5. 执行升级资料库 ::    flask db upgrade* 可直接执行migrate_run.bat or migrate_run.sh 升级资料库单元测试 继承tests下的test_base.py的 BasicTestCase 定义test 开头的单元方法，编写测试代码即可&gt; 代码样例.. code-block:: python    from .test_base import BasicTestCase    from app.models import *    from app import db    class Testexp(BasicTestCase):        # 测试model        def test_data1(self):            cet = Cacl_exp_type()            cet.code = 'cet001'            cet.description = 'cet_des001'            db.session.add(cet)            db.session.commit()            cet = Cacl_exp_type.query.first()            self.assertEqual(cet.code,'cet001')    # 测试方法    def test_health(self):        response = self.client.get(self.url_for('health'))        self.assertTrue(response.status_code, 200)&gt; 执行单元测试 ::    cd tests    python run.py升级旧专案的方法&gt; 如果不是由本工具产生的专案，可 参照生成代码的方法（ gencode_）&gt; 如果是该工具产生旧代码，可先备份代码，删除工具之前产生的代码（保留gen_code_run.py和app 目录下的除__init__.py的代码）并重现运行gen_code_run.py产生框架Changes1.3.7(2023-02-21)- 升级代码,支持k8s1.3.6(2023-02-15)- 产生k8s.yml模板文档1.3.0(2021-12-20)- 升级 sqlalchmy，redis等的版本1.2.26(2021-04-22)- 支持redis 哨兵模式1.2.6(2020-09-07)- 增加 .drone.yml 模板1.2.6(2020-08-04)- 修改project 文件代码1.2.4(2020-05-20)- 修改project 文件代码1.2.3(2020-05-20)- 修改dockerfile template1.2.0(2020-02-17)- 增加GenSwagger 类，创建swagger1.1.0(2020-02-14)- 支持startUML3 ,swagger2.01.0.0(2020-01-01)- 只支持startUML2.8.1,swagger2.00.6.44(2019-12-18)- 类别没有ID时，统一用integer 做id0.6.40(2019-12-18)- json中的日期时间增加本地时区0.6.37(2019-12-18)- 增加 new_id 代码0.6.35(2019-12-04)- 增加 file_utils单元0.6.34(2019-12-04)- 修正 put api 错误时触发500的错误0.6.32(2019-11-27)- 有自定义多对多的关联类需要在models中产生后端类0.6.31(2019-11-25)- 数据模型支持 lazy0.6.30(2019-11-12)- 修改url 参数支持大小写0.6.29(2019-10-22)- 修改 text/html对应错误Changes0.6.28(2019-09-26)- 修改 setup.tmp0.6.26(2019-09-20)- 支持swagger 中定义 text/html0.6.24(2019-08-23)- 支持cython0.6.23(2019-06-25)- 升级mwsdk和mwutils的版本0.6.22(2018-11-27)- 解决table包含触发器时，key为自动新增栏位不能新增的问题0.6.13(2018-11-27)- 支持产生写kafka 代码0.6.12(2018-11-27)- 修正 描述中 包含&quot; 导致swagger错误的问题0.6.10(2018-11-07)- 升级mwutils,mw-aiohttp-security 开发包0.6.6(2018-11-06)- 升级mw-aiohttp-session,mw-aiohttp-security 开发包0.6.4(2018-10-31)- 升级mwsdk 开发包0.6.2(2018-10-31)- 解决非unicode中文环境下不能安装的问题0.6.1(2018-10-30)- 修正安装包错误0.6.0(2018-10-30)- 增加readme</longdescription>
</pkgmetadata>