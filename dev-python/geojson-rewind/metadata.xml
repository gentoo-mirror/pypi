<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># geojson-rewind![Run tests](https://github.com/chris48s/geojson-rewind/workflows/Run%20tests/badge.svg?branch=master)[![codecov](https://codecov.io/gh/chris48s/geojson-rewind/branch/master/graph/badge.svg?token=0WGM3W8ULH)](https://codecov.io/gh/chris48s/geojson-rewind)![PyPI Version](https://img.shields.io/pypi/v/geojson-rewind.svg)![License](https://img.shields.io/pypi/l/geojson-rewind.svg)![Python Compatibility](https://img.shields.io/badge/dynamic/json?query=info.requires_python&amp;label=python&amp;url=https%3A%2F%2Fpypi.org%2Fpypi%2Fgeojson-rewind%2Fjson)![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)A Python library for enforcing polygon ring winding order in GeoJSONThe [GeoJSON](https://tools.ietf.org/html/rfc7946) spec mandates the [right hand rule](https://tools.ietf.org/html/rfc7946#section-3.1.6):&gt; A linear ring MUST follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise.This helps you generate compliant Polygon and MultiPolygon geometries.Note: Co-ordinates in the input data are assumed to be WGS84 with (lon, lat) ordering, [as per RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1). Input with co-ordinates using any other CRS may lead to unexpected results.## Installation```pip install geojson-rewind```## Usage### As a LibraryEnforce RFC 7946 ring winding order (input/output is a GeoJSON string):```py&gt;&gt;&gt; from geojson_rewind import rewind&gt;&gt;&gt; input = &quot;&quot;&quot;{...      &quot;geometry&quot;: {   &quot;coordinates&quot;: [   [   [100, 0],...                                             [100, 1],...                                             [101, 1],...                                             [101, 0],...                                             [100, 0]]],...                      &quot;type&quot;: &quot;Polygon&quot;},...      &quot;properties&quot;: {&quot;foo&quot;: &quot;bar&quot;},...      &quot;type&quot;: &quot;Feature&quot;}&quot;&quot;&quot;&gt;&gt;&gt; output = rewind(input)&gt;&gt;&gt; output'{&quot;geometry&quot;: {&quot;coordinates&quot;: [[[100, 0], [101, 0], [101, 1], [100, 1], [100, 0]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;properties&quot;: {&quot;foo&quot;: &quot;bar&quot;}, &quot;type&quot;: &quot;Feature&quot;}'&gt;&gt;&gt; type(output)&lt;class 'str'&gt;```Enforce RFC 7946 ring winding order (input/output is a python dict):```py&gt;&gt;&gt; from geojson_rewind import rewind&gt;&gt;&gt; input = {...     'geometry': {   'coordinates': [   [   [100, 0],...                                            [100, 1],...                                            [101, 1],...                                            [101, 0],...                                            [100, 0]]],...                     'type': 'Polygon'},...     'properties': {'foo': 'bar'},...     'type': 'Feature'}&gt;&gt;&gt; output = rewind(input)&gt;&gt;&gt; output{'geometry': {'coordinates': [[[100, 0], [101, 0], [101, 1], [100, 1], [100, 0]]], 'type': 'Polygon'}, 'properties': {'foo': 'bar'}, 'type': 'Feature'}&gt;&gt;&gt; type(output)&lt;class 'dict'&gt;```## On the Console```sh# Enforce ring winding order on a GeoJSON file$ rewind in.geojson &gt; out.geojson# fetch GeoJSON from the web and enforce ring winding order$ curl &quot;https://myserver.com/in.geojson&quot; | rewind```## Acknowledgements`geojson-rewind` is a python port of Mapbox's javascript [geojson-rewind](https://github.com/mapbox/geojson-rewind) package. Credit to [Tom MacWright](https://github.com/tmcw) and [contributors](https://github.com/mapbox/geojson-rewind/graphs/contributors).</longdescription>
</pkgmetadata>