<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>repl====.. image:: repl-demo.gifRuns a command in a `REPL &lt;https://en.wikipedia.org/wiki/Read-eval-print_loop&gt;`_. It comes in very handy when dealing with applications that donot ship with a REPL, but could benefit greatly from one (such as git_).Tab completion is available and completes filenames.Real productivity-----------------Set an alias in your shell's start-up file:    alias rg=&quot;repl git&quot;Instead of typing ``git ...``, type ``rg`` once. You'll never go back.Installation------------``repl`` must be installed from PyPI_.. _git: https://git-scm.com.. _PyPI: http://pypi.python.org.Detailed usage--------------Running ``repl COMMAND ARG1 ARG2...`` will start the loop. Any line enteredwill now be appended to ``COMMAND ARG1 ARG2...`` and executed. The result isdisplayed and ``repl`` will wait for the next line to be entered.Try ``repl --help`` for a list of options.Exiting~~~~~~~To quit the REPL, send an ``EOF`` symbol (usually done with ``Ctrl-d`` on *nixsystems, ``Ctrl-z`` on Windows).Command substitution~~~~~~~~~~~~~~~~~~~~If you run into a command that needs arguments passed somewhere in betweenother arguments by passing ``{}`` as the argument. It will be replaced with``…`` in the prompt... code-block:: sh    $ repl echo Hello, {} - Nice to meet you!    echo Hello, … - Nice to meet you!&gt;&gt; Alice    Hello, Alice - Nice to meet you!    echo Hello, … - Nice to meet you!&gt;&gt; Bob    Hello, Bob - Nice to meet you!    echo Hello, … - Nice to meet you!&gt;&gt;Credits-------Idea stolen from https://github.com/defunkt/repl, which unfortunately isunmaintained. Originally rewritten because I had issues with stdin/stdout; nowit boasts a few extra features (and does not require ruby)</longdescription>
</pkgmetadata>