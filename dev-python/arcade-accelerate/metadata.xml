<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># arcade-accelerateAn experimental library for accelerating [Arcade](https://github.com/pythonarcade/arcade) using Rust. The module canbe imported and monkey patch Arcade, replacing functions and types with rust versions.```pyimport arcade_acceleratearcade_accelerate.bootstrap()import arcade```It is important to run the arcade-accelerate bootstrapping process before importing Arcade, otherwise the monkey-patched versions will not be fully applied.## Build / SetupFirst create and activate a Python virtual environment, then install maturin:```bashpip install maturin```Install the crate as module in the current virtual environment using Maturin. Generallywhen working on performance enhancements you will want to use the `--release` flag.```sh# Debugmaturin develop# Releasematurin develop --release```Then you can install [Arcade](https://github.com/pythonarcade/arcade) into the same virtual environmentand run any of it's examples. Optimally testing should be done against the `development` branch of Arcade.In order to enable `arcade-accelerate` add these two lines anytime before importing `arcade`. It is important thatthe bootstrap is done prior to importing Arcade, otherwise the monkey-patched functions/classes will not fully apply.```pyimport arcade_acceleratearcade_accelerate.bootstrap()import arcade```If you would like to run Arcade's test suite with arcade-accelerate enabled, you can do so by setting the `ARCADE_PYTEST_USE_RUST` environment variable before running pytest on Arcade. You just need to ensure that both Arcade and arcade-accelerate are installed in the same environment.</longdescription>
</pkgmetadata>