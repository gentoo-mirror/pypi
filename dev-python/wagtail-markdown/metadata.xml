<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## wagtail-markdown: Markdown fields and blocks for Wagtail[![Build status](https://img.shields.io/github/actions/workflow/status/torchbox/wagtail-markdown/ci.yml?branch=main)](https://github.com/torchbox/wagtail-markdown/actions)[![PyPI](https://img.shields.io/pypi/v/wagtail-markdown.svg)](https://pypi.org/project/wagtail-markdown/)[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/torchbox/wagtail-markdown/main.svg)](https://results.pre-commit.ci/latest/github/torchbox/wagtail-markdown/main)Tired of annoying rich text editors getting in the way of your contentinput?  Wish Wagtail worked more like a wiki?  Well, now it can.`wagtail-markdown` provides Markdown field support for [Wagtail](https://github.com/torchbox/wagtail/).Specifically, it provides:* A `wagtailmarkdown.blocks.MarkdownBlock` for use in StreamFields.* A `wagtailmarkdown.fields.MarkdownField` for use in Page models.* A `wagtailmarkdown.edit_handlers.MarkdownPanel` for use in the editor interface.* A `markdown` template tag.The markdown rendered is based on `python-markdown`, but with severalextensions to make it actually useful in Wagtail:* [Code highlighting](#syntax-highlighting).* [Inline links](#inline-links).* Inline Markdown preview using [EasyMDE](https://github.com/Ionaru/easy-markdown-editor)* TablesThese are implemented using the `python-markdown` extension interface.### InstallationAvailable on PyPI - https://pypi.org/project/wagtail-markdown/.Install using pip (`pip install wagtail-markdown`), poetry (`poetry add wagtail-markdown`) or your package manager of choice.After installing the package, add `wagtailmarkdown` to the list of installed apps in your settings file:```python# settings.pyINSTALLED_APPS = [    # ...    &quot;wagtailmarkdown&quot;,]```### ConfigurationAll `wagtail-markdown` settings are defined in a single `WAGTAILMARKDOWN` dictionary in your settings file:```python# settings.pyWAGTAILMARKDOWN = {    &quot;autodownload_fontawesome&quot;: False,    &quot;allowed_tags&quot;: [],  # optional. a list of HTML tags. e.g. ['div', 'p', 'a']    &quot;allowed_styles&quot;: [],  # optional. a list of styles    &quot;allowed_attributes&quot;: {},  # optional. a dict with HTML tag as key and a list of attributes as value    &quot;allowed_settings_mode&quot;: &quot;extend&quot;,  # optional. Possible values: &quot;extend&quot; or &quot;override&quot;. Defaults to &quot;extend&quot;.    &quot;extensions&quot;: [],  # optional. a list of python-markdown supported extensions    &quot;extension_configs&quot;: {},  # optional. a dictionary with the extension name as key, and its configuration as value    &quot;extensions_settings_mode&quot;: &quot;extend&quot;,  # optional. Possible values: &quot;extend&quot; or &quot;override&quot;. Defaults to &quot;extend&quot;.}```Note: `allowed_tags`, `allowed_styles`, `allowed_attributes`, `extensions` and `extension_configs` are added to the[default wagtail-markdown settings](https://github.com/torchbox/wagtail-markdown/blob/main/src/wagtailmarkdown/constants.py).#### Custom FontAwesome Configuration - `autodownload_fontawesome`The EasyMDE editor is compatible with [FontAwesome 5](https://fontawesome.com/how-to-use/graphql-api/intro/getting-started).By default, EasyMDE will get version 4.7.0 from a CDN. To specify your own version, set```python# settings.pyWAGTAILMARKDOWN = {    # ...    &quot;autodownload_fontawesome&quot;: False,}```Get the desired FontAwesome version. For the latest version you can use:```shcurl -H &quot;Content-Type: application/json&quot; \-d '{ &quot;query&quot;: &quot;query { release(version: \&quot;latest\&quot;) { version } }&quot; }' \https://api.fontawesome.com```then add the following to a `wagtail_hooks` module in a registered app in your application:```python# Content of app_name/wagtail_hooks.pyfrom wagtail import hooksfrom django.conf import settingsfrom django.utils.html import format_html@hooks.register(&quot;insert_global_admin_css&quot;)def import_fontawesome_stylesheet():    elem = '&lt;link rel=&quot;stylesheet&quot; href=&quot;{}path/to/font-awesome.min.css&quot;&gt;'.format(        settings.STATIC_URL    )    return format_html(elem)```Note that due to the way EasyMDE defines the toolbar icons it is not compatible with[Wagtail FontAwesome](https://gitlab.com/alexgleason/wagtailfontawesome)##### Using with django-compressorYou may have your own SCSS sources that you want to precompile on the fly.We can invoke django-compressor to fetch our Font Awesome SCSS sources like this:```python# Content of app_name/wagtail_hooks.pyfrom compressor.css import CssCompressorfrom wagtail import hooksfrom django.conf import settingsfrom django.utils.html import format_html@hooks.register(&quot;insert_global_admin_css&quot;)def import_fontawesome_stylesheet():    elem = '&lt;link rel=&quot;stylesheet&quot; type=&quot;text/x-scss&quot; href=&quot;{}scss/fontawesome.scss&quot;&gt;'.format(        settings.STATIC_URL    )    compressor = CssCompressor(&quot;css&quot;, content=elem)    output = &quot;&quot;    for s in compressor.hunks():        output += s    return format_html(output)```#### Markdown extensions - `extensions`/`extension_configs`You can configure wagtail-markdown to use additional Markdown extensions using the `extensions` setting.For example, to enable the [Table of Contents](https://python-markdown.github.io/extensions/toc/) and[Sane Lists](https://python-markdown.github.io/extensions/sane_lists/) extensions:```pythonWAGTAILMARKDOWN = {    # ...    &quot;extensions&quot;: [&quot;toc&quot;, &quot;sane_lists&quot;]}```Extensions can be configured too:```pythonWAGTAILMARKDOWN = {    # ...    &quot;extension_configs&quot;: {&quot;pymdownx.arithmatex&quot;: {&quot;generic&quot;: True}}}```#### Allowed HTML - `allowed_styles` / `allowed_attributes` / `allowed_tags`wagtail-markdown uses [bleach](https://github.com/mozilla/bleach) to sanitise the input. To extend the defaultbleach configurations, you can add your own allowed tags, styles or attributes:```pythonWAGTAILMARKDOWN = {    # ...    &quot;allowed_tags&quot;: [&quot;i&quot;],    &quot;allowed_styles&quot;: [&quot;some_style&quot;],    &quot;allowed_attributes&quot;: {&quot;i&quot;: [&quot;aria-hidden&quot;]},}```#### Syntax highlightingSyntax highlighting using codehilite is an optional feature, which works byadding CSS classes to the generated HTML. To use these classes, you will needto install Pygments (`pip install Pygments`), and to generate an appropriatestylesheet. You can generate one as per the [Pygments documentation](http://pygments.org/docs/quickstart/), with:```pythonfrom pygments.formatters import HtmlFormatterprint(HtmlFormatter().get_style_defs(&quot;.codehilite&quot;))```Save the output to a file and reference it somewhere that will bepicked up on pages rendering the relevant output, e.g. your base template:```html+django&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{% static 'path/to/pygments.css' %}&quot;&gt;```#### EasyMDE configurationYou can customise the [EasyMDE options](https://github.com/Ionaru/easy-markdown-editor#configuration). To do this,create a JavaScript file in your app (for example `my_app_name/static/js/easymde_custom.js`) and add the following:```jswindow.wagtailMarkdown = window.wagtailMarkdown || {};window.wagtailMarkdown.options = window.wagtailMarkdown.options || {};window.wagtailMarkdown.options.spellChecker = false;```This overrides a specific option and leaves any other ones untouched. If you want to override all options, you can do:```jswindow.wagtailMarkdown = window.wagtailMarkdown || {};window.wagtailMarkdown.options = {    spellChecker: false,}```To make sure that your JavaScript is executed, create a hook in `my_app_name/wagtail_hooks.py`:```pythonfrom django.templatetags.static import staticfrom django.utils.html import format_htmlfrom wagtail import hooks@hooks.register(&quot;insert_global_admin_js&quot;, order=100)def global_admin_js():    &quot;&quot;&quot;Add /static/js/admin/easymde_custom.js to the admin.&quot;&quot;&quot;    return format_html('&lt;script src=&quot;{}&quot;&gt;&lt;/script&gt;', static(&quot;js/easymde_custom.js&quot;))```#### Inline linkswagtail-markdown supports custom inline links syntax:| Link to                                | Syntax                                                              | Notes                                                                                                                                                                ||----------------------------------------|---------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|| Pages                                  | `[title](page:PAGE_ID)`                                             | `PAGE_ID` is the page ID                                                                                                                                             || Documents                              | `[title](doc:DOCUMENT_ID)`                                          | `DOCUMENT_ID` is the document ID                                                                                                                                     || Media                                  | `[title](media:MEDIA_ID)`                                           | Needs [wagtailmedia](https://github.com/torchbox/wagtailmedia). `MEDIA_ID` is the media item ID                                                                      || Images                                 | `![alt text](image:IMAGE_ID)`                                       | Renders an image tag. `IMAGE_ID` is the image ID                                                                                                                     || ↳ with class attribute                 | `![alt text](image:IMAGE_ID,class=the-class-name)`                  | adds `class=&quot;the-class-name&quot; to the `&lt;img&gt;` tag                                                                                                                      || ↳ with rendition filter                | `![alt text](image:IMAGE_ID,filter=fill-200x200&amp;#x7c;format-webp)`  | Uses the same format as [generating renditions in Python](https://docs.wagtail.org/en/stable/advanced_topics/images/renditions.html#generating-renditions-in-python) || ↳ class name and filter can be stacked | `![alt text](image:IMAGE_ID,class=the-class-name,filter=width-100)` |                                                                                                                                                                      |Previously we supported custom link tags that used the target object title. They had the following form:* `&lt;:My page name|link title&gt;` or `&lt;:page:My page title&gt;`* `&lt;:doc:My fancy document.pdf&gt;`* `&lt;:image:My pretty image.jpeg&gt;`, `&lt;:image:My pretty image.jpeg|left&gt;` (`left` classname),  `&lt;:image:My pretty image.jpeg|right&gt;` (`right` classname), `&lt;:image:My pretty image.jpeg|full&gt;` (`full-name` classname),  `&lt;:image:My pretty image.jpeg|width=123&gt;` (outputs a rendition with `width-123`, and class `left`)⚠️ these types of tags are not reliable as titles can and will change. Support for  will be removed in the future.### UsageYou can use it as a `StreamField` block:```pythonfrom wagtail.blocks import StreamBlockfrom wagtailmarkdown.blocks import MarkdownBlockclass MyStreamBlock(StreamBlock):    markdown = MarkdownBlock(icon=&quot;code&quot;)    # ...```&lt;img src=&quot;https://i.imgur.com/4NFcfHd.png&quot; width=&quot;728px&quot; alt=&quot;&quot;&gt;Or use as a page field:```pythonfrom wagtail.admin.panels import FieldPanelfrom wagtail.models import Pagefrom wagtailmarkdown.fields import MarkdownFieldclass MyPage(Page):    body = MarkdownField()    content_panels = [        FieldPanel(&quot;title&quot;, classname=&quot;full title&quot;),        FieldPanel(&quot;body&quot;),    ]```And render the content in a template:```html+django{% load wagtailmarkdown %}&lt;article&gt;{{ self.body|markdown }}&lt;/article&gt;```&lt;img src=&quot;https://i.imgur.com/Sj1f4Jh.png&quot; width=&quot;728px&quot; alt=&quot;&quot;&gt;## Compatibilitywagtail-markdown supports Wagtail 4.1 and above, python-markdown 3.3 and above.## ContributingAll contributions are welcome!### InstallationTo make changes to this project, first clone this repository:```shellgit clone git@github.com:torchbox/wagtail-markdown.gitcd wagtail-markdown```With your preferred Python virtual environment activated, install testing dependencies:```shellpip install -e '.[testing]' -U```### pre-commitNote that this project uses [pre-commit](https://github.com/pre-commit/pre-commit). To set up locally:```shell# if you don't have it yet$ pip install pre-commit# go to the project directory$ cd wagtail-markdown# initialize pre-commit$ pre-commit install# Optional, run all checks once for this, then the checks will run only on the changed files$ pre-commit run --all-files```### How to run testsTo run all tests in all environments:```shtox -p```To run tests for a specific environment:```shelltox -e py311-django3.2-wagtail4.1```or, a specific test```shelltox -e py311-django3.2-wagtail4.1 -- tests.testapp.tests.test_admin.TestFieldsAdmin```</longdescription>
</pkgmetadata>