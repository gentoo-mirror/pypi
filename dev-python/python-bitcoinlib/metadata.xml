<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-bitcoinlibThis Python3 library provides an easy interface to the bitcoin datastructures and protocol. The approach is low-level and &quot;ground up&quot;, with afocus on providing tools to manipulate the internals of how Bitcoin works.&quot;The Swiss Army Knife of the Bitcoin protocol.&quot; - Wladimir J. van der Laan## Requirements    sudo apt-get install libssl-devThe RPC interface, `bitcoin.rpc`, should work with Bitcoin Core v24.0 or later.Older versions may work but there do exist some incompatibilities.## StructureEverything consensus critical is found in the modules under bitcoin.core. Thisrule is followed pretty strictly, for instance chain parameters are split intoconsensus critical and non-consensus-critical.    bitcoin.core            - Basic core definitions, datastructures, and                              (context-independent) validation    bitcoin.core.key        - ECC pubkeys    bitcoin.core.script     - Scripts and opcodes    bitcoin.core.scripteval - Script evaluation/verification    bitcoin.core.serialize  - SerializationIn the future the bitcoin.core may use the Satoshi sourcecode directly as alibrary. Non-consensus critical modules include the following:    bitcoin          - Chain selection    bitcoin.base58   - Base58 encoding    bitcoin.bloom    - Bloom filters (incomplete)    bitcoin.net      - Network communication (in flux)    bitcoin.messages - Network messages (in flux)    bitcoin.rpc      - Bitcoin Core RPC interface support    bitcoin.wallet   - Wallet-related code, currently Bitcoin address and                       private key supportEffort has been made to follow the Satoshi source relatively closely, forinstance Python code and classes that duplicate the functionality ofcorresponding Satoshi C++ code uses the same naming conventions: CTransaction,CBlockHeader, nValue etc. Otherwise Python naming conventions are followed.## Mutable vs. Immutable objectsLike the Bitcoin Core codebase CTransaction is immutable andCMutableTransaction is mutable; unlike the Bitcoin Core codebase thisdistinction also applies to COutPoint, CTxIn, CTxOut, and CBlock.## Endianness GotchasRather confusingly Bitcoin Core shows transaction and block hashes aslittle-endian hex rather than the big-endian the rest of the world uses forSHA256. python-bitcoinlib provides the convenience functions x() and lx() inbitcoin.core to convert from big-endian and little-endian hex to raw bytes toaccommodate this. In addition see b2x() and b2lx() for conversion from bytes tobig/little-endian hex.## Module import styleWhile not always good style, it's often convenient for quick scripts if`import *` can be used. To support that all the modules have `__all__` definedappropriately.# Example CodeSee `examples/` directory. For instance this example creates a transactionspending a pay-to-script-hash transaction output:    $ PYTHONPATH=. examples/spend-p2sh-txout.py    &lt;hex-encoded transaction&gt;## Selecting the chain to useDo the following:    import bitcoin    bitcoin.SelectParams(NAME)Where NAME is one of 'testnet', 'mainnet', 'signet', or 'regtest'. The chain currentlyselected is a global variable that changes behavior everywhere, just like inthe Satoshi codebase.## Unit testsUnder bitcoin/tests using test data from Bitcoin Core. To run them:    python3 -m unittest discoverAlternately, if Tox (see https://tox.readthedocs.org/) is available on yoursystem, you can run unit tests for multiple Python versions:    ./runtests.shHTML coverage reports can then be found in the htmlcov/ subdirectory.## DocumentationSphinx documentation is in the &quot;doc&quot; subdirectory. Run &quot;make help&quot; from thereto see how to build. You will need the Python &quot;sphinx&quot; package installed.Currently this is just API documentation generated from the code anddocstrings. Higher level written docs would be useful, perhaps starting withmuch of this README. Pages are written in reStructuredText and linked fromindex.rst.</longdescription>
</pkgmetadata>