<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IBM Watson Studio Pipelines Python ClientThis package provides various utilities for working with IBM WatsonStudio Pipelines. Its primary usage is to enable users to storeartifact results of a notebook run.## Usage### Construction`WSPipelines` client is constructed from IAM APIKEY, which can be providedin a few ways:* explicitly:  ```python  from ibm_watson_studio_pipelines import WSPipelines    client = WSPipelines(apikey)  # or  client = WSPipelines.from_apikey(apikey)  # or  client = WSPipelines.from_token(token)  ```* implicitly:  ```bash  APIKEY=...  export APIKEY  ```  or  ```bash  USER_ACCESS_TOKEN=...  export USER_ACCESS_TOKEN  ```  ```python  from ibm_watson_studio_pipelines import WSPipelines  # use APIKEY  client = WSPipelines.from_apikey()  # use USER_ACCESS_TOKEN  client = WSPipelines.from_token()  # try APIKEY, if absent then USER_ACCESS_TOKEN:  client = WSPipelines()  # or  client = WSPipelines.new_instance()  ```All of the above may also define `service_name` and `url`.The exact procedure of deciding which authentication method to use:1. If `from_apikey` or `from_token` is used, the method is forced.2. If constructor is used but either `apikey` or `bearer_token` argument  was provided, that method will be forced (if both are present,  an overloading error will be raised). Note that providing a nameless  argument is equivalent to providing `apikey`.3. If constructor or `new_instance` is used, `APIKEY` env-var is used.4. If constructor or `new_instance` is used, but `APIKEY` env-var is not   present, `USER_ACCESS_TOKEN` env-var is used.5. If none of the above matches, an error is returned.### Usage in Python notebooksNotebooks run in IBM Watson Studio Pipelines get inputs and exposeoutputs as a node:```{  &quot;id&quot;: ...,  &quot;type&quot;: &quot;execution_node&quot;,  &quot;op&quot;: &quot;run_container&quot;,  &quot;app_data&quot;: {    &quot;pipeline_data&quot;: {      &quot;name&quot;: ...,      &quot;config&quot;: {        &quot;link&quot;: {          &quot;component_id_ref&quot;: &quot;run-notebook&quot;        }      },      &quot;inputs&quot;: [        ...,        {          &quot;name&quot;: &quot;model_name&quot;,          &quot;group&quot;: &quot;env_variables&quot;,          &quot;type&quot;: &quot;String&quot;,          &quot;value_from&quot;: ...        }      ],      &quot;outputs&quot;: [        {          &quot;name&quot;: &quot;trained_model&quot;,          &quot;group&quot;: &quot;output_variables&quot;,          &quot;type&quot;: {            &quot;CPDPath&quot;: {              &quot;path_type&quot;: &quot;resource&quot;,              &quot;resource_type&quot;: &quot;asset&quot;,              &quot;asset_type&quot;: &quot;wml_model&quot;            }          }        }      ]    }  },  ...}```Inside of the notebook, inputs are available as environmentalvariables:```pythonmodel_name = os.environ['model_name']```Outputs are exposed using sdk method, `store_results`:```pythonclient = WSPipelines.from_apikey(...)client.store_results({  &quot;trained_model&quot;: ... // cpd path to the trained model})```### Extracting credentialsOn public cloud, this client provides a method for easy retrieval of WMLinstance credentials and scope storage credentials:```pythonclient.get_wml_credentials() # the scope passed in notebook# orclient.get_wml_credentials(&quot;cpd:///projects/123456789&quot;)``````pythonclient.get_storage_credentials() # the scope passed in notebook# orclient.get_storage_credentials(&quot;cpd:///projects/123456789&quot;)```Note how the result will vary depending on the authentication methodused to create the client.### CPD-Path manipulationCPD-Path parsing is manipulation is also supported:```pythonfrom ibm_watson_studio_pipelines import CpdScope, WSPipelinesclient = WSPipelines.from_apikey()scope = CpdScope.from_string(&quot;cpd:///projects/123456789&quot;)assert scope.scope_type() == &quot;projects&quot;assert scope.scope_id() == &quot;123456789&quot;client.get_wml_credentials(scope)```Different kinds of CPD-Paths will have different properties, providing the sameinterface across scopes, resource and file paths:```pythonfrom ibm_watson_studio_pipelines import CpdPathscope_file_path = CpdPath.from_string(&quot;cpd:///projects/123456789/files/abc/def&quot;)assert scope_file_path.scope_type() == &quot;projects&quot;assert scope_file_path.scope_id() == &quot;123456789&quot;assert scope_file_path.file_path() == &quot;/abc/def&quot;connection_path = CpdPath.from_string(&quot;cpd:///projects/123456789/connections/3141592&quot;)assert connection_path.scope_type() == &quot;projects&quot;assert connection_path.scope_id() == &quot;123456789&quot;assert connection_path.resource_type() == &quot;connections&quot;assert connection_path.resource_id() == &quot;3141592&quot;connection_file_path = CpdPath.from_string(&quot;cpd:///projects/123456789/connections/3141592/files/~/abc/def&quot;)assert connection_file_path.scope_type() == &quot;projects&quot;assert connection_file_path.scope_id() == &quot;123456789&quot;assert connection_file_path.resource_type() == &quot;connections&quot;assert connection_file_path.resource_id() == &quot;3141592&quot;assert connection_file_path.bucket_name() == &quot;~&quot;assert connection_file_path.file_path() == &quot;/abc/def&quot;```...additionally, for non-scope paths the scope can be extracted, if present:```pythonfrom ibm_watson_studio_pipelines import CpdPathscope_path = CpdPath.from_string(&quot;cpd:///projects/123456789&quot;)connection_path = CpdPath.from_string(&quot;cpd:///projects/123456789/connections/3141592&quot;)assert connection_path.scope() == scope_path```## ContributionSee a separate [document on contribution](CONTRIBUTING.md).</longdescription>
</pkgmetadata>