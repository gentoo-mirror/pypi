<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hwcounterHighly accurate counter for measuring elapsed time in Python.## Installation``` shell$ pip install hwcounter```## OverviewThis Python extension module uses the hardware timestamp counter toprovide very high precision and accurate measurements of executiontime.The module exposes three main objects. Two are plain functions,`count` and `count_end`, which return the current value of thetimestamp counter. They can be used together to manually track thestart and end of a timing measurement. The third is the `Timer` type,which is to be used as a context manager, wrapping a block of code tobe measured.Using `Timer` to wrap a block of code is to be preferred overmanually using `count` and `count_end`. This is for convenience, as wellas because it factors in the overhead of calling the underlyingmeasurement instructions.### `count()`Returns the current value of the timestamp counter, in cycles.### `count_end()`Returns the current value of the timestamp counter, in cycles. It issuitable for use at the end of a timing measurement.### `Timer`Class that implements the context manager protocol.#### `Timer.cycles`The `cycles` attribute is populated with the elapsed time, in cycles,when the Timer context manager exits.## Example usage``` pythonfrom hwcounter import Timer, count, count_endfrom time import sleepfrom math import sqrt# 1. Manually count cycles elapsed between two pointsstart = count()sqrt(144) / 12elapsed = count_end() - startprint(f'elapsed cycles: {elapsed}')# elapsed cycles: 36486# 2. Use Timer object as context manager to wrap a block of code and measure its timingwith Timer() as t:sleep(1)print(f'elapsed cycles: {t.cycles}')# elapsed cycles: 2912338344```These examples were performed on an Intel Core i5-6267U CPU @2.90GHz. Notice that the sleep for 1 second in the example aboveyields a 2.9 billion cycle count.## NotesThe overhead of calling the underlying measurement instructions istaken into account when using the Timer context manager. In otherwords, the number of cycles it takes to call the machine instructionsare subtracted from the elapsed cycle count automatically.This library returns measurements in processor clock cycles. Forbenchmarking programs and making apples-to-apples comparisons ofchanges in code execution time, this method is sufficient andreliable. If elapsed time in seconds is desired, a conversion fromclock cycles is required: divide the cycle count by the processor'sclock speed (in Hz). This conversion is outside the scope of thismodule.## PortabilityThis extension uses the `RDTSC` and `RDTSCP` instructions on the x86architecture, so it won't work on other platforms. It is Python 3only.</longdescription>
</pkgmetadata>