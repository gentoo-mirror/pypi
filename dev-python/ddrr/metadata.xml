<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Debug Requests &amp; Responses (DDRR)Get more out of your `runserver` development output! Print request and responseheaders, body (with pretty-printing), etc.  Highly customizable! SupportsDjango 2.2+ and 3.0+, with Python 3.7+.- Full request headers- The entire request body- Pretty-printing optional- Colored output- Super easy setup- No extra dependenciesDDRR can also be used for general logging with some configuration of your own.## Installation1. ```   $ pip install ddrr   ```2. Add `&quot;ddrr&quot;` to `INSTALLED_APPS`3. Insert `&quot;ddrr.middleware.DebugRequestsResponses&quot;` first in `MIDDLEWARE`**Done!** When you run `runserver`, you'll now get the entire HTTP requests andresponses, including headers and bodies.If you don't like the default output format, read on...## Customization```pythonDDRR = {    &quot;ENABLE_REQUESTS&quot;: True,  # enable request logging    &quot;ENABLE_RESPONSES&quot;: True,  # enable response logging    &quot;LEVEL&quot;: &quot;DEBUG&quot;,  # ddrr log level    &quot;PRETTY_PRINT&quot;: False,  # pretty-print JSON and XML    &quot;REQUEST_TEMPLATE_NAME&quot;: &quot;ddrr/default-request.html&quot;,  # request log template name    &quot;REQUEST_TEMPLATE&quot;: None,  # request log template string (overrides template name)    &quot;RESPONSE_TEMPLATE_NAME&quot;: &quot;ddrr/default-response.html&quot;,  # response log template name    &quot;RESPONSE_TEMPLATE&quot;: None,  # response log template string (overrides template name)    &quot;REQUEST_HANDLER&quot;: logging.StreamHandler(),  # request log handler    &quot;RESPONSE_HANDLER&quot;: logging.StreamHandler(),  # response log handler    &quot;ENABLE_COLORS&quot;: True,  # enable colors if terminal supports it    &quot;LIMIT_BODY&quot;: None,  # limit request/response body output to X chars    &quot;DISABLE_DJANGO_SERVER_LOG&quot;: False,  # disable default django server log}```### Template contextsIf you want to customize request or response templates, you can use the following values:- **Request template context:**  - `ddrr.body` - request body  - `ddrr.content_type` - request content type  - `ddrr.formatter` - the formatter  - `ddrr.headers` - mapping of header fields and values  - `ddrr.method` - request method  - `ddrr.path` - request path  - `ddrr.query_params` - query parameters  - `ddrr.query_string` - query string  - `ddrr.record` - the actual log record object  - `ddrr.request` - the actual request object- **Response template context:**  - `ddrr.content` - response content  - `ddrr.content_type` - response content type  - `ddrr.formatter` - the formatter  - `ddrr.headers` - mapping of header fields and values  - `ddrr.reason_phrase` - response reason phrase  - `ddrr.record` - the actual log record object  - `ddrr.response` - the actual response object  - `ddrr.status_code` - response status codeFor example, this will log the method, path and body of each request, as wellas the status code, reason phrase and content of each response:```pythonDDRR = {    &quot;REQUEST_TEMPLATE&quot;: &quot;{{ ddrr.method }} {{ ddrr.path }}\n&quot;                        &quot;{{ ddrr.body }}&quot;,    &quot;RESPONSE_TEMPLATE&quot;: &quot;{{ ddrr.status_code }} {{ ddrr.reason_phrase }}\n&quot;                         &quot;{{ ddrr.content }}&quot;,}```### Pretty-printingBy default, pretty-printing is disabled.  Set `DDRR[&quot;PRETTY_PRINT&quot;]` to `True`to enable it.Pretty-printing of JSON requires no external dependency.Pretty-printing of XML uses `minidom` by default and doesn't require any extradependency. If you want to use `lxml` instead, which is slightly better atpretty-printing XML, you can install that using `pip install ddrr[xml]`.## How it works internallyThe middleware `ddrr.middleware.DebugRequestsResponses` sends the entirerequest object as the message to `ddrr-request-logger`.  This logger has beenconfigured to use `ddrr.formatters.DjangoTemplateRequestFormatter` whichinternally uses Django's built-in template engine to format the request intohuman-readable form. By default, this is shown in your console output, but youcan easily configure it to log it to a file, Logstash, or anything else.## Similar projects- [Django Debug Toolbar](https://django-debug-toolbar.readthedocs.io)## Development and contributionsPR's are always welcome!For hacking on DDRR, make sure you are familiar with:- [Black](https://github.com/ambv/black)- [Flake8](http://flake8.pycqa.org/)- [Poetry](https://poetry.eustace.io/)- [pre-commit](https://github.com/pre-commit/pre-commit)- [pytest](https://docs.pytest.org)Install dependencies and set up the pre-commit hooks.```$ poetry install$ pre-commit install```The pre-commit hooks will, among other things, run Flake8 on the code base andBlack to make sure the code style is consistent across all files.  Check out[`.pre-commit-config.yaml`](.pre-commit-config.yaml) for details.</longdescription>
</pkgmetadata>