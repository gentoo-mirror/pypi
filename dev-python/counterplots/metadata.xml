<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://raw.githubusercontent.com/ADMAntwerp/CounterPlots/main/_static/counterplots_logo.svg&quot;&gt;&lt;br&gt;--------------------------------------CounterPlots: Plotting tool for counterfactuals=======================================[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![example workflow](https://github.com/ADMAntwerp/CounterPlots/actions/workflows/deployment.yml/badge.svg)](https://github.com/ADMAntwerp/CounterPlots/actions)[![Code Coverage](https://codecov.io/gh/rmazzine/counterplotcoverage/branch/main/graph/badge.svg?token=TQYJSGEMP1)](https://codecov.io/gh/rmazzine/counterplotcoverage)[![Known Vulnerabilities](https://snyk.io/test/github/ADMAntwerp/CounterPlots/badge.svg)](https://snyk.io/test/github/ADMAntwerp/CounterPlots)Counterplots is a Python package that allows you to plot counterfactuals with easy integration with any counterfactual generation algorithm.## Plot examples### Greedy PlotThe greedy plot shows the greediest (feature change with the highest impact towards the opposite class) path from the factual instance until it reaches the counterfactual.&lt;img src=&quot;https://raw.githubusercontent.com/ADMAntwerp/CounterPlots/main/_static/counterplots_example_greedy.png&quot;&gt;### CounterShapley PlotThis chart shows each counterfactual feature change contribution to the counterfactual prediction. It uses Shapley values to calculate the contribution of each feature change.&lt;img src=&quot;https://raw.githubusercontent.com/ADMAntwerp/CounterPlots/main/_static/counterplots_example_countershapley.png&quot;&gt;### Constellation PlotThis chart shows the prediction score change for all possible feature change combinations.&lt;img src=&quot;https://raw.githubusercontent.com/ADMAntwerp/CounterPlots/main/_static/counterplots_example_constellation.png&quot;&gt;## RequirementsCounterPlots requires Python 3.8 or higher.## InstallationWith pip:```bashpip install counterplots```## UsageTo use CounterPlots, you just need the machine learning model predictor, and the factual and counterfactual points.The example below uses a simple mock model:```pythonfrom counterplots import CreatePlotimport numpy as np# Simple mock model for the predict_proba function which returns a probability for each input instancedef mock_predict_proba(data):    out = []    for x in data:        if list(x) == [0.0, 0.0, 0.0]:            out.append(0.0)        elif list(x) == [1.0, 0.0, 0.0]:            out.append(0.44)        elif list(x) == [0.0, 1.0, 0.0]:            out.append(0.4)        elif list(x) == [0.0, 0.0, 1.0]:            out.append(0.2)        elif list(x) == [1.0, 1.0, 0.0]:            out.append(0.3)        elif list(x) == [0.0, 1.0, 1.0]:            out.append(0.25)        elif list(x) == [1.0, 0.0, 1.0]:            out.append(0.4)        elif list(x) == [1.0, 1.0, 1.0]:            out.append(1.0)    return np.array(out)# Factual Instancefactual = np.array([0, 0, 0])# Counterfactual Instancecf = np.array([1, 1, 1])# Create the plot objectcf_plots = CreatePlot(    factual,    cf,    mock_predict_proba)# Create the greedy plotcf_plots.greedy('greedy_plot.png')# Create the countershapley plotcf_plots.countershapley('countershapley_plot.png')# Create the constellation plotcf_plots.constellation('constellation_plot.png')# Print the countershapley valuesprint(cf_plots.countershapley_values())```In case you want to add custom names to the features, use the optional argument `feature_names`:```pythoncf_plots = CreatePlot(    factual,    cf,    mock_predict_proba,    feature_names=['feature1', 'feature2', 'feature3'])```In case you want to add custom labels to the factual and counterfactual points, use the optional argument `class_names`:```pythoncf_plots = CreatePlot(    factual,    cf,    mock_predict_proba,    class_names=['Factual', 'Counterfactual'])```## Using with Scikit-LearnCounterPlots can be used with any machine learning model that has a `predict_proba` function. For example, with Scikit-Learn:&lt;details&gt;```pythonimport numpy as npfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.datasets import load_irisfrom counterplots import CreatePlotiris = load_iris()X = iris.datay = [0 if l == 0 else 1 for l in iris.target] # Makes it a binary classification problemclf = RandomForestClassifier(max_depth=2, random_state=0)clf.fit(X, y)preds = clf.predict(X)# For the factual point, takes an instance with 0 classificationfactual = X[np.argwhere(preds == 0)[0]][0]# For the counterfactual point, takes an instance with 1 classificationcf = X[np.argwhere(preds == 1)[0]][0]cf_plots = CreatePlot(    factual,    cf,    clf.predict_proba,    feature_names=iris.feature_names,    class_names={0: 'Setosa', 1: 'Non-Setosa'})# Create the greedy plotcf_plots.greedy('iris_greedy_plot.png')# Create the countershapley plotcf_plots.countershapley('iris_countershapley_plot.png')# Create the constellation plotcf_plots.constellation('iris_constellation_plot.png')# Print the countershapley valuesprint(cf_plots.countershapley_values())```&lt;/details&gt;## CitationIf you use CounterPlots in your research, please cite the following paper:```bibtex```</longdescription>
</pkgmetadata>