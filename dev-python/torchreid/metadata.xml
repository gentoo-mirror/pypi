<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;h1&gt;  Torchreid-Pip: Packaged version of Torchreid &lt;/h1&gt;&lt;h4&gt;    &lt;img width=&quot;700&quot; alt=&quot;teaser&quot; src=&quot;https://raw.githubusercontent.com/goksenin-uav/torchreid-pip/main/doc/logo.png&quot;&gt;&lt;/h4&gt;&lt;/div&gt;This repo is a packaged version of the [Torchreid](https://github.com/KaiyangZhou/deep-person-reid) algorithm.### Installation```pip install torchreid```### Overview##### 1. Import ``torchreid`````pythonimport torchreid```##### 2. Load data manager```python datamanager = torchreid.data.ImageDataManager(    root=&quot;reid-data&quot;,    sources=&quot;market1501&quot;,    targets=&quot;market1501&quot;,    height=256,    width=128,    batch_size_train=32,    batch_size_test=100,    transforms=[&quot;random_flip&quot;, &quot;random_crop&quot;])```##### 3 Build model, optimizer and lr_scheduler```python model = torchreid.models.build_model(    name=&quot;resnet50&quot;,    num_classes=datamanager.num_train_pids,    loss=&quot;softmax&quot;,    pretrained=True)model = model.cuda()optimizer = torchreid.optim.build_optimizer(    model,    optim=&quot;adam&quot;,    lr=0.0003)scheduler = torchreid.optim.build_lr_scheduler(    optimizer,    lr_scheduler=&quot;single_step&quot;,    stepsize=20)```##### 4. Build engine```pythonengine = torchreid.engine.ImageSoftmaxEngine(    datamanager,    model,    optimizer=optimizer,    scheduler=scheduler,    label_smooth=True)```##### 5. Run training and test```pythonengine.run(    save_dir=&quot;log/resnet50&quot;,    max_epoch=60,    eval_freq=10,    print_freq=10,    test_only=False)```Citation---------If you use this code or the models in your research, please give credit to the following papers:```bibtex@article{torchreid,    title={Torchreid: A Library for Deep Learning Person Re-Identification in Pytorch},    author={Zhou, Kaiyang and Xiang, Tao},    journal={arXiv preprint arXiv:1910.10093},    year={2019}} @inproceedings{zhou2019osnet,    title={Omni-Scale Feature Learning for Person Re-Identification},    author={Zhou, Kaiyang and Yang, Yongxin and Cavallaro, Andrea and Xiang, Tao},    booktitle={ICCV},    year={2019}}@article{zhou2021osnet,    title={Learning Generalisable Omni-Scale Representations for Person Re-Identification},    author={Zhou, Kaiyang and Yang, Yongxin and Cavallaro, Andrea and Xiang, Tao},    journal={TPAMI},    year={2021}}```</longdescription>
</pkgmetadata>