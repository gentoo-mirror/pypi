<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># componentize-pyThis is a tool to convert a Python application to a [WebAssemblycomponent](https://github.com/WebAssembly/component-model).  It takes thefollowing as input:- a [WIT](https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md) file or directory- the name of a [WIT world](https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-worlds) defined in the above file or directory- the name of a Python module which targets said world- a list of directories in which to find the Python module and its dependenciesThe output is a component which may be run usinge.g. [`wasmtime`](https://github.com/bytecodealliance/wasmtime).  See the[tests](https://github.com/dicej/componentize-py/tree/main/src/test) for examples.For an example of running a sandboxed Python guest within a Python host, see[component-sandbox-demo](https://github.com/dicej/component-sandbox-demo).## Installing from PyPI```shellpip install componentize-py```## Building from sourceFor the time being, we use a temporary fork of WASI-SDK which enables bothshared library support and dlopen/dlsym.  Once those features are upstreamed,we'll switch.  Specifically, the remaining patches are:- https://github.com/WebAssembly/wasi-libc/pull/429- https://github.com/WebAssembly/wasi-sdk/pull/338- Additional, yet-to-be created PRs to enable dlopen/dlsym### Prerequisites- Tools needed to build [CPython](https://github.com/python/cpython) (Make, Clang, etc.)- [Rust](https://rustup.rs/) stable 1.68 or later *and* nightly 2023-07-27 or later, including the `wasm32-wasi` and `wasm32-unknown-unknown` targets  - Note that we currently use the `-Z build-std` Cargo option to build the `componentize-py` runtime with position-independent code (which is not the default for `wasm32-wasi`) and this requires using a recent nightly build of Rust.  For Rust, something like this should work once you have `rustup`:```shellrustup updaterustup install nightlyrustup component add rust-src --toolchain nightlyrustup target add wasm32-wasi wasm32-unknown-unknown```### Building and RunningFirst, make sure you've got all the submodules cloned.```shellgit submodule update --init --recursive```Next, install WASI SDK to `/opt/wasi-sdk` (alternatively, you can specify analternative location and reference it later using the `WASI_SDK_PATH`environment variable).  Replace `linux` with `macos` or `mingw` (Windows) belowdepending on your OS.```shellcurl -LO https://github.com/dicej/wasi-sdk/releases/download/shared-library-alpha-2/wasi-sdk-20.16g86c5c116b0a6-linux.tar.gztar xf wasi-sdk-20.16g86c5c116b0a6-linux.tar.gzsudo mv wasi-sdk-20.16g86c5c116b0a6 /opt/wasi-sdkexport WASI_SDK_PATH=/opt/wasi-sdk```Finally, build and run `componentize-py`.```shellcargo run --release -- --help```</longdescription>
</pkgmetadata>