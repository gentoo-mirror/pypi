<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ISLa: Input Specification Language==================================[![Python](https://img.shields.io/pypi/pyversions/isla-solver.svg)](https://pypi.python.org/pypi/isla-solver/)[![Version](http://img.shields.io/pypi/v/isla-solver.svg)](https://pypi.python.org/pypi/isla-solver)[![BuildStatus](https://img.shields.io/github/actions/workflow/status/rindPHI/isla/test-isla.yml?branch=main)](https://img.shields.io/github/actions/workflow/status/rindPHI/isla/test-isla.yml?branch=main)[![Coverage Status](https://coveralls.io/repos/github/rindPHI/isla/badge.svg?branch=main)](https://coveralls.io/github/rindPHI/isla?branch=main)[![Dependencies](https://img.shields.io/librariesio/release/github/rindphi/isla)](https://libraries.io/github/rindPHI/isla)[![DOI](https://zenodo.org/badge/428626626.svg)](https://zenodo.org/badge/latestdoi/428626626)[![Documentation Status](https://readthedocs.org/projects/isla/badge/?version=latest)](https://isla.readthedocs.io/en/latest/?badge=latest)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)&lt;img src=&quot;isla_logo_bright_transparent.png&quot; alt=&quot;ISLa Logo&quot; style=&quot;margin-left: auto; margin-right: auto; display: block; width: 400px;&quot;/&gt; **_Inputs on Demand!_**ISLa is a *grammar-aware string constraint solver* with its own specification language.With ISLa, it is possible to specify *input constraints* like &quot;a variable has to bedefined before it is used,&quot; &quot;the `file name' block must be 100 bytes long,&quot; or &quot;thenumber of columns in all CSV rows must be identical.&quot;Building on modern constraint solvers, ISLa provides you with a uniqueflexibility to specify&amp;mdash;and generate&amp;mdash;the system inputs you need. ISLa can beused for *precise fuzzing:* Keep adding input specifications until you are satisfiedwith the number of inputs passing the tested system's parser. Furthermore, you can writeISLa specifications to carve out specific inputs for testing a *particular programfunctionality*.## ExampleOur running example is a simple &quot;assignment language&quot; consisting of strings such as`x := 1 ; y := x`. As a first step towards using ISLa, we formalize this language asa context-free grammar in [BNF](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form):```bnf&lt;start&gt; ::= &lt;stmt&gt; &lt;stmt&gt;  ::= &lt;assgn&gt; | &lt;assgn&gt; &quot; ; &quot; &lt;stmt&gt; &lt;assgn&gt; ::= &lt;var&gt; &quot; := &quot; &lt;rhs&gt; &lt;rhs&gt;   ::= &lt;var&gt; | &lt;digit&gt; &lt;var&gt;   ::= &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; |             &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; |            &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot; | &quot;z&quot; &lt;digit&gt; ::= &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot; | &quot;9&quot;```After saving this grammar to a file, say, `assgn.bnf`, we can already generate inputsfrom the assignment grammar using the ISLa command line interface:```bash&gt; isla solve assgn.bnfs := t```The following command creates 10 assignments:```bash&gt; isla solve -n 10 assgn.bnfa := 6 ; j := xq := ue := h ; o := l ; g := ws := ik := v ; d := m ; f := 1n := y ; t := 5z := 3 ; p := 7 ; b := 0c := 2 ; r := 4q := 8 ; l := 9u := 0```The setting `-n -1` specifies that we want to generate an infinite number of inputs.Since we did not choose an ISLa constraint, we additionally have to choose a valuefor the `-f` flag. This setting determines the number of times an input element thatis not subject to any constraint (which is the case here) should be expanded. The finalline &quot;UNSAT&quot; means that after these 10 solutions, no further solution could be found.If &quot;UNSAT&quot; is the *first* line output by the solver, it is likely that the givenconstraint is *unsatisfiable*, i.e., there exists no solution of this constraint withrespect to the current grammar.With ISLa, we can restrict the assignment language on-demand. For example, the ISLaconstraint `&lt;var&gt; = &quot;a&quot;` results in assignment sequences only containing &quot;a&quot; variables:```bash&gt; isla solve /tmp/assgn.bnf -n 10 -f 1 --constraint '&lt;var&gt; = &quot;a&quot;' a := 5 ; a := a ; a := 7a := 6a := aa := 0 ; a := a ; a := aa := a ; a := 1 ; a := 4a := a ; a := 3 ; a := aa := 8 ; a := 2a := 9 ; a := aa := a ; a := 9a := a ; a := a```&gt; :bulb: The setting `-f 1` restricts the number of times that ILSa randomly&gt; instantiates unconstrained input elements to one time. Here, this affects the&gt; `&lt;digit&gt;` nonterminals: Without `-f 1`, we would see 10 different variants of the&gt; first input with variying numbers in the first and third assignment.Or do we prefer assignments where all digits can be divided by 2 without remainder? Noproblem with ISLa:```bash&gt; isla solve assgn.bnf -n 10 -f 1 -s 2 --constraint &quot;str.to.int(&lt;digit&gt;) mod 2 = 0&quot;i := a ; x := 0 ; u := sp := l ; m := 8 ; b := yk := c ; t := d ; r := qj := zh := 0e := 4g := n ; v := f ; w := 4o := o ; j := a ; c := 0t := r ; k := 0 ; e := 0k := t ; f := 8 ; e := 8```&gt; :bulb: The `-s` flag specifies how many results for a single query should be obtained&gt; from the SMT solver Z3. We limited this number to 2 (the default is 10&amp;mdash;the same&gt; default value is used for the `-f` flag) to obtain a wider diversity of inputs within&gt; the first 10 results.The constraints above talk over *all* `&lt;var&gt;` and `&lt;digit&gt;` grammar nonterminals inany derivation tree derived from the assignment language grammar. In addition to suchsimple constraints, ISLa allows to explicitly *quantify* over grammar elements usingthe `forall` and `exists` keywords.Assume that an interpreter for our assignment language rejects inputs where a variableis accessed that has not been previously assigned a value. This &quot;definition-use&quot;property, which is a *semantic input property* of the language, is expressed as follows:```forall &lt;assgn&gt; assgn_1:  exists &lt;assgn&gt; assgn_2: (    before(assgn_2, assgn_1) and     assgn_1.&lt;rhs&gt;.&lt;var&gt; = assgn_2.&lt;var&gt;)```Since this is a more lengthy constraint, let us save it in a file `defuse.isla`. Thefollowing command line invocation uses this constraint:```bash&gt; isla solve -n 10 -f 1 -s 1 assgn.bnf defuse.islaq := 2 ; m := 1 ; c := 4p := 8 ; o := 3 ; l := pz := 7 ; p := 6 ; e := pd := 5 ; a := d ; h := 9s := 0 ; x := 0k := 8p := 4 ; r := pp := 6 ; u := pp := 5 ; v := pp := 3 ; p := 5 ; w := p```As we can see, all right-hand side variables occur at the left-hand side of a priorassignment.For more information on the command line interface, run `isla -h`. Each sub commandcomes with its own help text; for example, `isla solve -h` provides details on how touse the `solve` command.You can also use the ISLa solver via its Python API:```pythonfrom isla.solver import ISLaSolvergrammar = '''&lt;start&gt; ::= &lt;stmt&gt; &lt;stmt&gt;  ::= &lt;assgn&gt; | &lt;assgn&gt; &quot; ; &quot; &lt;stmt&gt; &lt;assgn&gt; ::= &lt;var&gt; &quot; := &quot; &lt;rhs&gt; &lt;rhs&gt;   ::= &lt;var&gt; | &lt;digit&gt; &lt;var&gt;   ::= &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; |             &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; |            &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot; | &quot;z&quot; &lt;digit&gt; ::= &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot; | &quot;9&quot;'''constraint = &quot;&quot;&quot;forall &lt;assgn&gt; assgn_1:  exists &lt;assgn&gt; assgn_2: (    before(assgn_2, assgn_1) and     assgn_1.&lt;rhs&gt;.&lt;var&gt; = assgn_2.&lt;var&gt;)&quot;&quot;&quot;solver = ISLaSolver(    grammar=grammar,    formula=constraint,    max_number_free_instantiations=1,  # -f    max_number_smt_instantiations=1,  # -s)for _ in range(10):    print(solver.solve())```An example output of the above program snippet is:```q := 7 ; m := 1 ; c := 8p := 2 ; o := 2 ; l := pz := 9 ; p := 4 ; e := pd := 8 ; a := d ; h := 5s := 0 ; x := 0k := 7p := 8 ; r := pp := 9 ; u := pp := 4 ; v := pp := 2 ; p := 1 ; w := p```## Further Resources* Our [**interactive ISLa tutorial**](https://www.fuzzingbook.org/beta/html/FuzzingWithConstraints.html),  published as a part of the Fuzzing Book, provides an easily accessible introduction  to the specification and generation of custom system inputs using ISLa.* The [**ISLa Documentation**](http://isla.readthedocs.io/) contains  + installation and usage instructions;  + further examples;  + the **ISLa Language Specification,** which precisely specifies the syntax and    semantics of ISLa constraints. It also contains a list of supported default    predicates;  + and a **Developer's Guide** to get started with ISLa's code.* We published a [**scientific paper on ISLa**](https://publications.cispa.saarland/3596/7/Input%20Invariants.pdf)  at ESEC/FSE 2022. The paper describes the ISLa language and solver more formally.  * In the directory `src/isla_formalizations/`, you find our specifications for the  subject languages of our experimental evaluation.  * The files `run_eval_....fish` are the scripts we used to collect and analyze our  evaluation data. To analyze ISLa's current performance yourself, you can run the  scripts with the `-h` argument to obtain some guidance on their parameters (the fish  shell is required to use these scripts).## Build, Run, InstallISLa depends on **Python 3.10** and the Python header files. To compile all of ISLa'sdependencies, you need gcc, g++ make, and cmake. To check out the current ISLa version,git will be needed. Furthermore, python3.10-venv is required to run ISLearn in a virtualenvironment.Additionally, *for testing ISLa*, clang and the `csvlint` executable are required (forthe Scriptsize-C and CSV case studies).On *Alpine Linux*, all dependencies (but `csvlint`) can be installed using```shellapk add python3.10 python3.10-dev python3.10-venv gcc g++ make cmake git clang```The `csvlint` executable can be obtained fromhttps://github.com/Clever/csvlint/releases/download/v0.3.0/csvlint-v0.3.0-linux-amd64.tar.gz.You obtain and unpack `csvlint` by running (in a Unix shell)```shellwget https://github.com/Clever/csvlint/releases/download/v0.3.0/csvlint-v0.3.0-linux-amd64.tar.gz -O /tmp/csvlint.tar.gztar xzf /tmp/csvlint.tar.gz -C /tmp```Then, move the file `/tmp/csvlint-v0.3.0-linux-amd64/csvlint` to some location in yourPATH (e.g., `/usr/bin`).### InstallIf all external dependencies are available, a simple `pip install isla-solver` suffices.We recommend installing ISLa inside a virtual environment (virtualenv):```shellpython3.10 -m venv venvsource venv/bin/activatepip install --upgrade pippip install isla-solver```Now, the `isla` command should be available on the command line within the virtualenvironment.### DockerFor testing ISLa without having to care about external dependencies like Python, we provide a Docker container,which already contains all dependencies.First, pull and run the Docker container:```shelldocker pull dsteinhoefel/isla:latestdocker run -it --name isla dsteinhoefel/isla```You should now have entered the container. Next, check out the ISLa repository, andupdate the requirements:```shellgit clone https://github.com/rindPHI/isla.gitcd isla/```Now, you can perform an editable installation of ISLa and run the ISLa tests:```shellpip install -e .[dev,test]python3.10 -m pytest -n 16 tests```### Build ISLearn is built locally as follows:```shellgit clone https://github.com/rindPHI/isla.gitcd isla/python3.10 -m venv venvsource venv/bin/activatepip install --upgrade pippip install --upgrade buildpython3 -m build```Then, you will find the built wheel (`*.whl`) in the `dist/` directory.### Testing &amp; DevelopmentFor development, we recommend using ISLa inside a virtual environment (virtualenv). By thing the following steps in astandard shell (bash), one can run the ISLa tests:```shellgit clone https://github.com/rindPHI/isla.gitcd isla/python3.10 -m venv venvsource venv/bin/activatepip install --upgrade pippip install -r requirements_test.txt# Run testspip install -e .[dev,test]python3 -m pytest -n 16 tests```Then you can, for instance, run `python3 tests/xml_demo.py` inside the virtual environment.## ChangelogSee [CHANGELOG.md](CHANGELOG.md).## Copyright, Authors and LicenseCopyright © 2022 [CISPA Helmholtz Center for Information Security](https://cispa.de/en).The ISLa code and documentation was, unless otherwise indicated, authored by[Dominic Steinhöfel](https://www.dominic-steinhoefel.de).ISLa is released under the GNU General Public License v3.0 (see [COPYING](COPYING)).</longdescription>
</pkgmetadata>