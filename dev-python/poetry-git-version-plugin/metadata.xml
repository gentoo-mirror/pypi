<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Poetry Git Version PluginPoetry plugin to set package version based on git tag.[![PyPI](https://img.shields.io/pypi/v/poetry-git-version-plugin)](https://pypi.org/project/poetry-git-version-plugin/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/poetry-git-version-plugin)](https://pypi.org/project/poetry-git-version-plugin/)[![GitLab last commit](https://img.shields.io/gitlab/last-commit/rocshers/python/poetry-git-version-plugin)](https://gitlab.com/rocshers/python/poetry-git-version-plugin)[![Test coverage](https://codecov.io/gitlab/rocshers:python/poetry-git-version-plugin/branch/release/graph/badge.svg?token=RPFNZ8SBQ6)](https://codecov.io/gitlab/rocshers:python/poetry-git-version-plugin)[![Downloads](https://static.pepy.tech/badge/poetry-git-version-plugin)](https://pepy.tech/project/poetry-git-version-plugin)[![GitLab stars](https://img.shields.io/gitlab/stars/rocshers/python/poetry-git-version-plugin)](https://gitlab.com/rocshers/python/poetry-git-version-plugin)## Functionality- **Git tag** parsing- **Alpha version** making- Setting found or generated version as package **poetry.version**- Maintenance of **PEP 440**- **Command** to output a new version## Quick start```bashpoetry self add poetry-git-version-pluginpoetry git-version # Write package version based on git tagpoetry build # Build package with version based on git tag```## DependenciesInstalled `Git` and:```toml[tool.poetry.dependencies]python = &quot;&gt;=3.8&quot;poetry = &quot;&gt;=1.2.2&quot;```## Configs### make_alpha_versionIf the tag is not found on the HEAD, then the version is built based on the last found tag and the HEAD.- type: bool- Default = true- Example: 1.3.2a5```toml[tool.poetry-git-version-plugin]make_alpha_version = true```### alpha_version_formatFormat for alpha version- Type: str- Default = `'{version}a{distance}'`- Example:  - alpha_version_format = '{version}a{distance}' -&gt; `1.3.2a5`  - alpha_version_format = '{version}a{distance}+{commit_hash}' -&gt; `1.3.2a5+5babef6`- Available variables:  - **version**: Last found tag  - **distance**: Distance from last found tag to HEAD  - **commit_hash**: Commit hash```toml[tool.poetry-git-version-plugin]alpha_version_format = '{version}a{distance}'```### Ignore errorsThree variables to **ignore errors**- Type: bool- Default = true```toml[tool.poetry-git-version-plugin]# Ignore mismatch error PEP 440 version formatignore_pep440 = true# Ignore mismatch error PEP 440 public version formatignore_public_pep440 = true# Ignore all errors# including version not found errorsignore_errors = true```## Use cases### Publishing python package to pypi via poetry with version equal to git tag.gitlab-ci.yml:```yamlpypi:  stage: publishing  image: python:3.10  tags:    - docker  script:    - poetry self add poetry-git-version-plugin    - poetry config repositories.pypi https://upload.pypi.org/legacy/    - poetry config pypi-token.pypi ${PYPI_TOKEN}    - poetry publish -r pypi --build  rules:    - if: $CI_COMMIT_TAG    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH```- When creating a git tag: new package with version == {TAG}- When pushing to CI_DEFAULT_BRANCH: new package with version == {TAG}a{N}### Publishing python package to private pypi via poetry with version equal to git tag and commit hashChange the alpha version template:```toml[tool.poetry-git-version-plugin]alpha_version_format = '{version}a{distance}+{commit_hash}'```.gitlab-ci.yml:```yamlpypi:  stage: publishing  image: python:3.10  tags:    - docker  script:    - poetry self add poetry-git-version-plugin    - poetry config repositories.gitlab &quot;https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/packages/pypi&quot;    - poetry config http-basic.gitlab gitlab-ci-token &quot;$CI_JOB_TOKEN&quot;    - poetry publish -r gitlab --build  rules:    - if: $CI_COMMIT_TAG    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH```- When creating a git tag: new package with version == {TAG}- When pushing to CI_DEFAULT_BRANCH: new package with version == {TAG}a{N}+{COMMIT_HASH}## ContributeIssue Tracker: &lt;https://gitlab.com/rocshers/python/poetry-git-version-plugin/-/issues&gt;  Source Code: &lt;https://gitlab.com/rocshers/python/poetry-git-version-plugin&gt;Before adding changes:```bashmake install-dev```After changes:```bashmake format test```</longdescription>
</pkgmetadata>