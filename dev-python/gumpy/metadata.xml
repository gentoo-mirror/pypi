<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Tests](https://github.com/oxfordmmm/gumpy/actions/workflows/tests.yaml/badge.svg)](https://github.com/oxfordmmm/gumpy/actions/workflows/tests.yaml)[![codecov](https://codecov.io/gh/oxfordmmm/gumpy/branch/master/graph/badge.svg)](https://codecov.io/gh/oxfordmmm/gumpy) [![Docs](https://github.com/oxfordmmm/gumpy/actions/workflows/docs.yaml/badge.svg)](https://oxfordmmm.github.io/gumpy/)[![PyPI version](https://badge.fury.io/py/gumpy.svg)](https://badge.fury.io/py/gumpy)# gumpyGenetics with Numpy## Installation```git clone https://github.com/oxfordmmm/gumpycd gumpypip install .```## Documentationhttps://oxfordmmm.github.io/gumpy/## TestingA suite of tests can be run from a terminal:```python -m pytest --cov=gumpy -vv```## Usage### Parse a genbank fileGenome objects can be created by passing a filename of a genbank file```from gumpy import Genomeg = Genome(&quot;filename.gbk&quot;)```### Parse a VCF fileVCFFile objects can be created by passing a filename of a vcf file```from gumpy import VCFFilevcf = VCFFile(&quot;filename.vcf&quot;)```### Apply a VCF file to a reference genomeThe mutations defined in a vcf file can be applied to a reference genome to produce a new Genome object containing the changes detailed in the vcf.If a contig is set within the vcf, the length of the contig should match the length of the genome. Otherwise, if the vcf details changes within the genome range, they will be made.```from gumpy import Genome, VCFFilereference_genome = Genome(&quot;reference.gbk&quot;)vcf = VCFFile(&quot;filename.vcf&quot;)resultant_genome = reference_genome + vcf```### Genome level comparisonsThere are two different methods for comparing changes. One can quickly check for changes which are caused by a given VCF file. The other can check for changes between two genome. The latter is therefore suited best for comparisons in which either both genomes are mutated, or the VCF file(s) are not available. The former is best suited for cases where changes caused by a VCF want to be determined, but finding gene-level differences will require rebuilding the Gene objects, which can be time consuming.#### Compare genomesTwo genomes of the same length can be easily compared, including equality and changes between the two.Best suited to cases where two mutated genomes are to be compared.```from gumpy import Genome, GenomeDifferenceg1 = Genome(&quot;filename1.gbk&quot;)g2 = Genome(&quot;filename2.gbk&quot;)diff = g2 - g1 #Genome.difference returns a GenomeDifference objectprint(diff.snp_distance) #SNP distance between the two genomesprint(diff.variants) #Array of variants (SNPs/INDELs) of the differences between g2 and g1```### Gene level comparisonsWhen a Genome object is instanciated, it is populated with Gene objects for each gene detailed in the genbank file.These genes can also be compared.Gene differences can be found through direct comparison of Gene objects, or systematically through the `gene_differences()` method of `GenomeDifference`.```from gumpy import Genome, Geneg1 = Genome(&quot;filename1.gbk&quot;)g2 = Genome(&quot;filename2.gbk&quot;)#Get the Gene objects for the gene &quot;gene1_name&quot; from both Genomesg1_gene1 = g1.build_gene[&quot;gene1_name&quot;]g2_gene1 = g2.build_gene[&quot;gene1_name&quot;]g1_gene1 == g2_gene1 #Equality check of the two genesdiff= g1_gene1 - g2_gene1 #Returns a GeneDifference objectdiff.mutations #List of mutations in GARC describing the variation between the two genes```### Save and load Genome objectsDue to how long it takes to create a Genome object, it may be beneficial to save the object to disk. The reccomendation is to utilise the `pickle` module to do so, but due to the security implications of this, do so at your own risk! An example is below:```import pickleimport gumpy#Load genomeg = gumpy.Genome(&quot;filename.gbk&quot;)#Save genomepickle.dump(g, open(&quot;filename.pkl&quot;, &quot;wb&quot;))#Load genomeg2 = pickle.load(open(&quot;filename.pkl&quot;, &quot;rb&quot;))g == g2 #True```</longdescription>
</pkgmetadata>