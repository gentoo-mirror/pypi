<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># scorecardpy[![PyPI version](https://img.shields.io/pypi/pyversions/scorecardpy.svg)](https://pypi.python.org/pypi/scorecardpy)[![PyPI release](https://img.shields.io/pypi/v/scorecardpy.svg)](https://pypi.python.org/pypi/scorecardpy)[![Downloads](http://pepy.tech/badge/scorecardpy)](http://pepy.tech/project/scorecardpy)[![Downloads](https://pepy.tech/badge/scorecardpy/month)](https://pepy.tech/project/scorecardpy/month)This package is python version of R package [scorecard](https://github.com/ShichenXie/scorecard). Its goal is to make the development of traditional credit risk scorecard model easier and efficient by providing functions for some common tasks. - data partition (`split_df`)- variable selection (`iv`, `var_filter`)- weight of evidence (woe) binning (`woebin`, `woebin_plot`, `woebin_adj`, `woebin_ply`)- scorecard scaling (`scorecard`, `scorecard_ply`)- performance evaluation (`perf_eva`, `perf_psi`)## Installation- Install the release version of `scorecardpy` from [PYPI](https://pypi.org/project/scorecardpy/) with:```pip install scorecardpy```- Install the latest version of `scorecardpy` from [github](https://github.com/shichenxie/scorecardpy) with:```pip install git+git://github.com/shichenxie/scorecardpy.git```## ExampleThis is a basic example which shows you how to develop a common credit risk scorecard:``` python# Traditional Credit Scoring Using Logistic Regressionimport scorecardpy as sc# data prepare ------# load germancredit datadat = sc.germancredit()# filter variable via missing rate, iv, identical value ratedt_s = sc.var_filter(dat, y=&quot;creditability&quot;)# breaking dt into train and testtrain, test = sc.split_df(dt_s, 'creditability').values()# woe binning ------bins = sc.woebin(dt_s, y=&quot;creditability&quot;)# sc.woebin_plot(bins)# binning adjustment# # adjust breaks interactively# breaks_adj = sc.woebin_adj(dt_s, &quot;creditability&quot;, bins) # # or specify breaks manuallybreaks_adj = {    'age.in.years': [26, 35, 40],    'other.debtors.or.guarantors': [&quot;none&quot;, &quot;co-applicant%,%guarantor&quot;]}bins_adj = sc.woebin(dt_s, y=&quot;creditability&quot;, breaks_list=breaks_adj)# converting train and test into woe valuestrain_woe = sc.woebin_ply(train, bins_adj)test_woe = sc.woebin_ply(test, bins_adj)y_train = train_woe.loc[:,'creditability']X_train = train_woe.loc[:,train_woe.columns != 'creditability']y_test = test_woe.loc[:,'creditability']X_test = test_woe.loc[:,train_woe.columns != 'creditability']# logistic regression ------from sklearn.linear_model import LogisticRegressionlr = LogisticRegression(penalty='l1', C=0.9, solver='saga', n_jobs=-1)lr.fit(X_train, y_train)# lr.coef_# lr.intercept_# predicted proabilitytrain_pred = lr.predict_proba(X_train)[:,1]test_pred = lr.predict_proba(X_test)[:,1]# performance ks &amp; roc ------train_perf = sc.perf_eva(y_train, train_pred, title = &quot;train&quot;)test_perf = sc.perf_eva(y_test, test_pred, title = &quot;test&quot;)# score ------card = sc.scorecard(bins_adj, lr, X_train.columns)# credit scoretrain_score = sc.scorecard_ply(train, card, print_step=0)test_score = sc.scorecard_ply(test, card, print_step=0)# psisc.perf_psi(  score = {'train':train_score, 'test':test_score},  label = {'train':y_train, 'test':y_test})```</longdescription>
</pkgmetadata>