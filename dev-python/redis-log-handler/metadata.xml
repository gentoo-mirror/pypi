<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># redis_log_handlerHandler for the standard `logging` module which puts logs through to Redis.## InstallThis was developed against Python 3.6.7 specifically, but I don't believe it's version breaking.#### DevelopmentSet the local environment variable `REDIS_HOST` to point to the host where your Redis runs.        $ export REDIS_HOST=localhostInstall the dev requirements        $ pip install -r requirements-dev.txt## How to useYou can either publish your logs to a channel, `rpush` them onto a key with an optional `ttl`or implement the desired behaviour by deriving from the base class.To add a handler to the python logger is very simple:```pythonimport loggingfrom redis_log_handler import RedisKeyHandlerexample_handler = RedisKeyHandler('example_key')  # Default parameters for Redis connection are usedlogger = logging.getLogger()  # No name gives you the root loggerlogger.setLevel(&quot;WARNING&quot;)logger.addHandler(example_handler)logger.warning(&quot;This will rpush this message to the 'example_key' in Redis.&quot;)```### Configuring Redis ConnectionBy default each handler will create a `StrictRedis` instance, passing on each argument from their `__init__(**kwargs)` to the StrictRedis instantiation.This means you can configure the connection as specific as you'd like, but every argument should be provided with its keyword; `Handler(host=localhost)` instead of `Handler(localhost)`.All available configuration options are available in te [python-redis documentation](https://redis-py.readthedocs.io/en/latest/).```pythonhandler = RedisKeyHandler(&quot;key&quot;, host=&quot;localhost&quot;, port=6379, password=None)connection_pool = redis.ConnectionPool(host=&quot;localhost&quot;)handler = RedisKeyHandler(&quot;key&quot;, connection_pool=connection_pool)```### Configure message loggingEvery handler has the `raw_logging` option which can be provided optionally.Omitting it from the initialisation, will default it to `False`, meaning the message being logged will be purely what's sent.If you set it to `True`, first the content will be logged, then appended to the line number and finally the pathname.```pythonpure_handler = RedisKeyHandler(&quot;key_name&quot;)raw_handler = RedisKeyHandler(&quot;other_key_name&quot;, raw_logging=True)...logging.info(&quot;Test message&quot;)```The `pure_handler` would emit a message like so: `Test message.`,the `raw_handler` would emit a message like so: `Test message. - 2: /.../file.py`.### 1. RedisChannelHandlerThis opens a connection to a redis channel, allowing subscribers to pickup new messages in realtime.Every message triggered by the logging instance, will get published to the specified channel.```pythonhandler = RedisChannelHandler(&quot;channelname&quot;)```### 2. RedisKeyHandlerThis creates/pushes onto the provided key, whatever message the logging instance will emit.By default every message will be sent via `rpush`, so that when the list is retrieved using `lrange $key 0 -1`, all messages are returned in the order they were sent.Optionally a `ttl` (time to live) can be provided which will be a counter that **will be set each time** a message is sent, essentially **refreshing the duration** of the time to live for this key.```pythonhandler = RedisKeyHandler(&quot;some_key_name&quot;, ttl=60)```### 3. Custom Redis HandlerWe also provide the ability to write custom emit functions, which get picked up by the logging instance, by inheriting the Base class.If none of the provided Redis implementations rock you boat, simply inherit the Base class and overwrite the emit() method.In the following example we will write an example of a CustomRedisHandler which overwrites the value of the key it already exists.```pythonclass CustomRedisHandler(RedisBaseHandler):    def __init__(self, key: str, **kwargs: Any):        super().__init__(**kwargs)        self.key = key    def emit(self, message: logging.LogRecord):        self.redis_client.set(self.key, str(message))```</longdescription>
</pkgmetadata>