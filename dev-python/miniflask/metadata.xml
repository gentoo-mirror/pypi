<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>MiniFlask=========[![python-3 badge](https://img.shields.io/pypi/v/miniflask)](https://pypi.org/project/miniflask/)[![python-3 badge](https://img.shields.io/pypi/pyversions/miniflask)](https://pypi.org/project/miniflask/)[![CI build status](https://github.com/da-h/miniflask/workflows/Deploy%20to%20PyPI/badge.svg)](https://github.com/da-h/miniflask/actions?query=workflow%3A%22Deploy+to+PyPI%22)Miniflask is a **small** research-oriented **plugin**-engine for **python**.&gt; A long time ago in a galaxy full of plugin-engines ...Quick Start-----------For a quick look into miniflask, just install it using```bashpip install miniflask```[Read the Documentation](https://da-h.github.io/miniflask)----------------------Short Example-------------**Module Definition**  Let's start a new project first by creating a new directory:```bash&gt; lsmain.pymodules/    module1/__init__.py    module2/__init__.py    module1/__init__.py```Let's define a simple module, `modules/module1/__init__.py`:```pythondef main(state, event):    print(&quot;main event called by module1&quot;)def register(mf):    mf.register_event('main', main, unique=False)```Let's define another module, `modules/module2/__init__.py`:```pythondef main(state, event):    print(&quot;main event called by module2&quot;)    print(&quot;it uses a variable var:&quot;, state[&quot;var&quot;])def register(mf):    mf.register_defaults({        &quot;var&quot;: 42    })    mf.register_event('main', main, unique=False)```Our main.py looks like this:```pythonimport miniflask# initialize miniflaskmf = miniflask.init(&quot;.modules&quot;)mf.run()```**Usage**:  Now, we can use our program in the following ways:```sh&gt; python main.pyThere is nothing to do.``````sh&gt; python main.py module1main event called by module1``````sh&gt; python main.py module2,module1main event called by module2it uses a variable var: 42main event called by module1``````sh&gt; python main.py module2,module1 --module2.var 9001main event called by module2it uses a variable var: 9001main event called by module1```Contributing---------------1. [Fork it!](https://github.com/da-h/miniflask/fork)2. Create your feature branch (`git checkout -b feature/fooBar`)3. Commit your changes (`git commit -am 'Add some fooBar'`)4. Push to the branch (`git push origin feature/fooBar`)5. Create a new Pull RequestLicense-------[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg?style=flat-square)](https://opensource.org/licenses/MIT) - See [LICENSE](LICENSE) for details.  </longdescription>
</pkgmetadata>