<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># READMEThe `mlcomp` module is designed to process and execute complex pipelines, that consist of one or more components chained together such that output of a previous component becomes the input to the next component. Each pipeline has a particular purpose, such as to train a model or generate inferences.A single pipeline may include components from different languages, such as Python, R and Java.## Quickstart#### Steps- Create a pipeline. Open any text editor and copy the following pipeline description:        {            &quot;name&quot;: &quot;Simple MCenter runner test&quot;,            &quot;engineType&quot;: &quot;Generic&quot;,            &quot;pipe&quot;: [                {                    &quot;name&quot;: &quot;Source String&quot;,                    &quot;id&quot;: 1,                    &quot;type&quot;: &quot;string-source&quot;,                    &quot;parents&quot;: [],                    &quot;arguments&quot;: {                        &quot;value&quot;: &quot;Hello World: testing string source and sink&quot;                    }                },                {                    &quot;name&quot;: &quot;Sink String&quot;,                    &quot;id&quot;: 2,                    &quot;type&quot;: &quot;string-sink&quot;,                    &quot;parents&quot;: [{&quot;parent&quot;: 1, &quot;output&quot;: 0}],                    &quot;arguments&quot;: {                        &quot;expected-value&quot;: &quot;Hello World: testing string source and sink&quot;                    }                }            ]        }- Clone `mlpiper` repo [https://github.com/mlpiper/mlpiper/](https://github.com/mlpiper/mlpiper/)- Components `string-source` and `string-sink` can be found in the repo path [https://github.com/mlpiper/mlpiper/tree/master/reflex-algos/components/Python](https://github.com/mlpiper/mlpiper/tree/master/reflex-algos/components/Python)- Once the `ml-comp` python package is installed, the `mlpiper` command line tool is available and can be used to execute the above pipeline and the components described in it. Run the example above with:      mlpiper run -f ~/&lt;pipeline description file&gt; -r &lt;path to mlpiper repo&gt;/reflex-algos/components/Python/ -d &lt;deployment dir&gt;     Use the **--force** option to overwrite the deployment directory.## How to construct a component#### Steps- Create a directory, the name of which corresponds to the component's name (e.g., source_string)- Create a `component.json` file (JSON format) inside this directory and make sure to fill in all of the following fields:        {            &quot;engineType&quot;: &quot;Generic&quot;,            &quot;language&quot;: &quot;Python&quot;,            &quot;userStandalone&quot;: false,            &quot;name&quot;: &quot;&lt;Component name (e.g., string_source)&gt;&quot;,            &quot;label&quot;: &quot;&lt;A lable that is displayed in the UI&gt;&quot;,            &quot;version&quot;: &quot;&lt;Component's version (e.g., 1.0.0)&gt;&quot;,            &quot;group&quot;: &quot;&lt;One of the valid groups (e.g., &quot;Connectors&quot;)&gt;,            &quot;program&quot;: &quot;&lt;The Python component main script (e.g., string_source.py)&gt;&quot;,            &quot;componentClass&quot;: &quot;&lt;The component class name (e.g., StringSource)            &quot;useMLStats&quot;: &lt;true|false - (whether the components uses MLStats)&gt;,            &quot;inputInfo&quot;: [                {                 &quot;description&quot;: &quot;&lt;Description&gt;&quot;,                 &quot;label&quot;: &quot;&lt;Lable name&gt;&quot;,                 &quot;defaultComponent&quot;: &quot;&quot;,                 &quot;type&quot;: &quot;&lt;A type used to verify matching connected legs&gt;,                 &quot;group&quot;: &quot;&lt;data|model|prediction|statistics|other&gt;&quot;                },                {...}            ],            &quot;outputInfo&quot;: [                &lt;Same as inputInfo above&gt;            ],            &quot;arguments&quot;: [                {                    &quot;key&quot;: &quot;&lt;Unique argument key name&gt;&quot;,                    &quot;type&quot;: &quot;int|long|float|str|bool&quot;,                    &quot;label&quot;: &quot;&lt;A label that is displayed in the UI&gt;&quot;,                    &quot;description&quot;: &quot;&lt;Description&gt;&quot;,                    &quot;optional&quot;: &lt;true|false&gt;                }            ]        }- Create the main component script, which contains the component's class name.  This class should inherit from a 'Component' base class, which is taken from  `parallelm.components.component`. The class must implement the `materialize`  function, with this prototype: `def _materialize(self, parent_data_objs, user_data)`.  Here is a complete self contained example:        from parallelm.components import ConnectableComponent        from parallelm.mlops import mlops        class StringSource(ConnectableComponent):            def __init__(self, engine):                super(self.__class__, self).__init__(engine)            def _materialize(self, parent_data_objs, user_data):                self._logger.info(&quot;Inside string source component&quot;)                str_value = self._params.get('value', &quot;default-string-value&quot;)                mlops.set_stat(&quot;Specific stat title&quot;, 1.0)                mlops.set_stat(&quot;Specific stat title&quot;, 2.0)                return [str_value]  Notes:    - A component can use `self._logger` object to print logs.    - A component may access to pipeline parameters via `self._params` dictionary.    - The `_materialize` function should return a list of objects or None otherwise.      This returned value will be used as an input for the next component      in the pipeline chain.- Place the component's main program (\*.py) inside a directory along with its JSON  description file and any other desired files.## How to construct a pipeline#### Steps- Open any text editor and copy the following pipeline description:        {            &quot;name&quot;: &quot;Simple MCenter runner test&quot;,            &quot;engineType&quot;: &quot;Generic&quot;,            &quot;pipe&quot;: [                {                    &quot;name&quot;: &quot;Source String&quot;,                    &quot;id&quot;: 1,                    &quot;type&quot;: &quot;string-source&quot;,                    &quot;parents&quot;: [],                    &quot;arguments&quot;: {                        &quot;value&quot;: &quot;Hello World: testing string source and sink&quot;                    }                },                {                    &quot;name&quot;: &quot;Sink String&quot;,                    &quot;id&quot;: 2,                    &quot;type&quot;: &quot;string-sink&quot;,                    &quot;parents&quot;: [{&quot;parent&quot;: 1, &quot;output&quot;: 0}],                    &quot;arguments&quot;: {                        &quot;expected-value&quot;: &quot;Hello World: testing string source and sink&quot;                    }                }            ]        }  Notes:    - It is assumed that you've already constructed two components whose names      are: `string-source` and `string-sink`    - The output of the `string-source` component (the value returned from      `_materialize` function) is supposed to become the input of the `string-sink`      component (an input to the `_materialize` function)- Save it with any desired name## How to testOnce the `ml-comp` python package is installed, `mlpiper` command line tool is availableand can be used to execute the above pipeline and the components described in it.There are three main commands that can be used as follows:  - **deploy** - Deploys a pipeline along with provided components into a given                 directory. Once deployed, it can be executed directly from                  the given directory.  - **run** - Deploys and then executes the pipeline.  - **run-deployment** - Executes an already-deployed pipeline.#### Examples:  - Prepare a deployment. The resulting directory will be copied to a docker container and run    there:        mlpiper deploy -f p1.json -r ~/dev/components -d /tmp/pp  - Deploy &amp; Run. Useful for development and debugging:        mlpiper run -f p1.json -r ~/dev/components -d /tmp/pp       Use **--force** option to overwrite deployment directory  - Run a deployment. Usually non-interactive and called by another script:        mlpiper run-deployment --deployment-dir /tmp/pp</longdescription>
</pkgmetadata>