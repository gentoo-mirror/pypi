<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>DeathNot3===&lt;p align=&quot;center&quot;&gt;   &lt;img src=&quot;https://media.discordapp.net/attachments/1015263562668720150/1078325086307766344/dn3_logo.png&quot; height=256 width=256/&gt;&lt;/p&gt;[![pypi](https://img.shields.io/pypi/v/dn3?style=for-the-badge)](https://pypi.org/project/dn3/)![python-version](https://img.shields.io/pypi/pyversions/dn3?style=for-the-badge)![last-commit](https://img.shields.io/github/last-commit/k1R4/deathnot3/dev?style=for-the-badge)![build-status](https://img.shields.io/github/actions/workflow/status/k1R4/deathnot3/python-package.yml?style=for-the-badge)![license](https://img.shields.io/pypi/l/dn3?style=for-the-badge)[![twitter](https://img.shields.io/twitter/follow/justk1R4?style=for-the-badge)](https://twitter.com/justk1R4)## Installation```sudo apt-get updatesudo apt-get install python3 python3-pippython3 -m pip install --upgrade dn3```## DescriptionDeathNot3 is a one-for-all, all-for-one tool that aims to make solving CTF pwn challenges easier and faster. deathnot3 was started as a wrapper for pwntools, but with the addition of the &quot;l1ght&quot; submodule, it has become a lightweight alternative to pwntools process/remotewhile providing additional functionality.deathnot3 aims to: - allow strings and bytes interchageably - be lightweight - provide basic automation - be an all around pwn helper for CTFs## RequirementsSupports: Python 3.6+Library Dependency:- pyelftools- zstandard- unix_ar- requests- wget## Usage ```py  from dn3 import *  binary = ELF(&quot;./binary&quot;)  libc = ELF(&quot;./libc.so.6&quot;)  ctx.mode = str   ctx.libc = libc       # recv in string. Can also be set to bytes    io = process(&quot;./binary&quot;)  DeathNot3()              # Initialize deathnot3    reu(&quot;yeet&quot;)              # equivalent of io.recvuntil()  sl(b&quot;leet&quot;)              # equivalent of io.sendline()  sla(&quot;yeet&quot;,8)            # equivalent of io.sendlineafter()  s(&quot;bruh&quot;)                # equivalent of io.send()  # bytes, string and integers can be used interchageably to send    sl(p64(0xdeadbeef))      # equivalent of p64() but returns string  sla(&quot;oof&quot;, flat([  0xdeadbeef,&quot;ABCD&quot;    # equivalent of flat() but returns string  ])    libc = libcleak(&quot;puts&quot;)  # Offset integer can be given instead of symbol  # Equivalent to  # libc = unpack(io.recv(6),48) - libc.symbols.puts  # log.info(&quot;Libc -&gt; %s&quot; % hex(libc)    interactive()             # equivalent of io.interactive()  ``` - CLI **`dn3 template &lt;binary_path&gt; -l &lt;libc_path&gt; -r &lt;ip&gt;:&lt;port&gt;`** - used to generate template exploit on the go, based on a template format - edit config using `dn3 cfg` and specify template format url or path (if path prefix with `local:`) - [example template format](https://raw.githubusercontent.com/k1R4/deathnot3/dev/template.py) **`dn3 linker &lt;binary_path&gt; -l &lt;libc_path&gt;`** - Find appropriate dynamic linker for given libc and patch binary with it and provided libc using `patchelf`   **`dn3 cfg &lt;key(optional)&gt;`**    - Edit dn3's config    - config is located at `~/.dn3.conf`## TODO - [x] Implement ELF similar to that of pwntools - [ ] Add inline description comments for code - [ ] Implement buffering for process, remote - [ ] Add automation    - [ ] static vulnerability detection    - [ ] ret2win    - [ ] ret2shellcode    - [ ] ret2libc/ROP    - [ ] tcache poisoning - [ ] Add documentation to wiki - [ ] Add support for big endian - [ ] Add support for arm based architectures    - [ ] aarch64    - [ ] arm</longdescription>
</pkgmetadata>