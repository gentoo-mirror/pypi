<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p&gt;    &lt;a href=&quot;./LICENSE&quot; alt=&quot;License&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/license/YakDriver/oschmod.svg&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;http://travis-ci.org/YakDriver/oschmod&quot; alt=&quot;Build status&quot;&gt;        &lt;img src=&quot;https://travis-ci.org/YakDriver/oschmod.svg?branch=main&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/oschmod&quot; alt=&quot;Python versions&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/pyversions/oschmod.svg&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/oschmod&quot; alt=&quot;Version&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/oschmod.svg&quot; /&gt;&lt;/a&gt;    &lt;img src=&quot;https://img.shields.io/endpoint.svg?url=https://gh.mergify.io/badges/YakDriver/oschmod&quot; alt=&quot;Mergify&quot;/&gt;&lt;/p&gt;# oschmod***oschmod*** sets consistent file permissions across Windows, Linux and macOS.## oschmod TL;DR***oschmod*** brings `chmod` functionality to **Windows**, macOS, and Linux! If you're not familiar, `chmod` is a handy macOS and Linux-only tool for setting file permissions. Prior to ***oschmod***, Windows file permissions couldn't be set in the familiar `chmod` way. Tools did not translate `chmod`-style permissions into Windows-style file permissions. Even though Python's `os.chmod()` sets read, write, and execute file permissions, on Windows, `os.chmod()` basically has no effect. Even worse, Python on Windows gives no warnings or errors. If you think you set file permissions on Windows with `os.chmod()`, you're wrong!***oschmod*** allows you to set consistent file permissions in a consistent way across platforms.* Read more about [oschmod](https://medium.com/@dirk.avery/securing-files-on-windows-macos-and-linux-7b2b9899992) on Medium* For more background, have a look at the [oschmod Wiki](https://github.com/YakDriver/oschmod/wiki).## Installation```console$ pip install oschmod```## GNU Documentation***oschmod*** changes the file mode bits of each given file according to mode, which can be either a symbolic representation of changes to make, or an octal number representing the bit pattern for the new mode bits.The format of a symbolic mode is `[ugoa...][+-=][perms...]` where perms is zero or more letters from the set `rwx`. Multiple symbolic modes can be given, separated by commas.A combination of the letters `ugoa` controls which users' access to the file will be changed: the user who owns it (`u`), other users in the file's group (`g`), other users not in the file's group (`o`), or all users (`a`). If none of these are given, the effect is as if `a` were given.*(Modified from the GNU manpage for chmod.)*## Command line interface***oschmod*** brings the ability to set consistent file permissions using the command line to Windows, macOS, and Linux platforms. If you are familiar with `chmod`, ***oschmod*** works similarly, albeit with fewer options.```console$ oschmod -husage: oschmod [-h] [-R] mode objectChange the mode (permissions) of a file or directorypositional arguments:  mode        octal or symbolic mode of the object  object      file or directoryoptional arguments:  -h, --help  show this help message and exit  -R          apply mode recursively```## Command line examplesYou can use symbolic (e.g., &quot;u+rw&quot;) or octal (e.g., &quot;600) representations of modes. Multiple mode modifications can be made in a single call by separating modifiers with commas.### Symbolic representation examplesSymbolic representation mode modifiers have three parts:1. **whom:** To whom does the modification apply? You can include zero or more of `[ugoa]*` where `a` is for all, `u` is for the file owner (i.e., &quot;**u**ser&quot;), `g` is for the file group, and `o` is for others. In other words, `ugo` is equivalent to `a`. Also, if you do not provide a &quot;whom,&quot; ***oschmod*** assumes you mean `a` (everyone).2. **operation:** Which operation should be applied? You must include one and only one operation, `[+-=]{1}`, per modifier (although you can have multiple modifiers). `+` adds permissions, `-` removes permissions, and `=` sets permissions regardless of previous permissions. `+` and `-` modifications often depend on the current permissions.3. **permission:** Which permission or permissions will be affected? You can include zero or more of `[rwx]*` where `r` is for read, `w` is for write, and `x` is for execute. If you do not include a permission with `+` or `-` (e.g., `u-`), the modifier has no effect. However, if you use no permissions with `=` (e.g., `o=`), all permissions are removed.**Example 1:** To give everyone execute permissions on a file (all of these are equivalent):```console$ oschmod +x &lt;file name&gt;$ oschmod a+x &lt;file name&gt;$ oschmod ugo+x &lt;file name&gt;```**Example 2:** To remove read, write, and execute permissions from the file group and all others (these are equivalent):```console$ oschmod go-rwx &lt;file name&gt;$ oschmod go= &lt;file name&gt;```**Example 3:** To give the file owner read and execute permissions, and remove execute permissions from the group and all others:```console$ oschmod u+rx,go-x &lt;file name&gt;```**Example 4:** To give everyone all permissions, and then remove execute write from the group, and execute from all others:```console$ oschmod a+rwx,g-w,o-x &lt;file name&gt;```### Octal representation examplesFor more about what octal representations mean, see [this article](https://medium.com/@dirk.avery/securing-files-on-windows-macos-and-linux-7b2b9899992) on Medium.**Example 5:** To give everyone read, write, and execute permissions on a file:```console$ oschmod 777 &lt;file name&gt;```**Example 6:** To lock down a file to just give the file owner read, write, and execute permissions and deny all permissions to everyone else:```console$ oschmod 700 &lt;file name&gt;```## Python usageYou can use ***oschmod*** from Python code. Any of the command line examples above will work very similarly. For example, *Example 4* above, in Python code, would look like this:```pythonimport oschmodoschmod.set_mode(&quot;myfile&quot;, &quot;a+rwx,g-w,o-x&quot;)```*Example 5* above, in Python code, could be done in two ways:```pythonimport oschmodoschmod.set_mode(&quot;myfile&quot;, &quot;777&quot;)oschmod.set_mode(&quot;myfile&quot;, 0o777)```***oschmod*** is compatible with bitwise permissions as defined in the `stat` module. To give a file's owner read, write, and execute permissions and deny the group and others any permissions (i.e., equivalent of `700`):```pythonimport oschmodimport statoschmod.set_mode('myfile', stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)```Replacing `os.chmod()` with ***oschmod*** should usually be an easy drop-in replacement. Replacement will allow you to get consistent file permission settings on Windows, macOS, and Linux:If this is your Python code using `os.chmod()`:```pythonimport osos.chmod('myfile1', 'u+x')os.chmod('myfile2', 0o777)```The replacement using ***oschmod*** is very similar:```pythonimport oschmodoschmod.set_mode('myfile1', 'u+x')oschmod.set_mode('myfile2', 0o777)```## Changelog### 0.3.0**Commit Delta**: [Change from 0.2.4 release](https://github.com/YakDriver/oschmod/compare/0.2.4...0.3.0)**Released**: 2020.05.27**Summary**:*   Adds symbolic representation for mode changes (e.g., `+x`, `u+rwx`, `ugo-x`).### 0.2.4**Commit Delta**: [Change from 0.2.2 release](https://github.com/YakDriver/oschmod/compare/0.2.2...0.2.4)**Released**: 2020.04.21**Summary**:*   Add command line interface (CLI).### 0.2.2**Commit Delta**: [Change from 0.2.0 release](https://github.com/YakDriver/oschmod/compare/0.2.0...0.2.2)**Released**: 2020.04.21**Summary**:*   Fix issue with account lookup failing with error (`No mapping between account names and security IDs was done.`).### 0.2.0**Commit Delta**: [Change from 0.1.5 release](https://github.com/YakDriver/oschmod/compare/0.1.5...0.2.0)**Released**: 2020.04.20**Summary**:*   Add recursive version of `oschmod.set_mode()`: `oschmod.set_mode_recursive()`### 0.1.5**Commit Delta**: [Change from 0.1.4 release](https://github.com/YakDriver/oschmod/compare/0.1.4...0.1.5)**Released**: 2020.04.17**Summary**:*   Create Linux version of permissions test (`oschmod.perm_test()`)### 0.1.4**Commit Delta**: [Change from 0.1.0 release](https://github.com/YakDriver/oschmod/compare/0.1.0...0.1.4)**Released**: 2020.04.17**Summary**:*   Revise Windows to keep permissions an object already has for SYSTEM/NT AUTHORITY and don't include those permissions in mode calculation.*   Fix various minor cosmetic issues.### 0.1.0**Commit Delta**: [Change from 0.0.0 release](https://github.com/YakDriver/oschmod/compare/0.0.0...0.1.0)**Released**: 2020.04.15**Summary**:*   Initial release</longdescription>
</pkgmetadata>