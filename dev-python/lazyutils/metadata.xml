<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Lazyutils provides a few simple utilities for lazy evaluation of code.Lazy attribute==============The lazy decorator defines an attribute with deferred initialization::.. code::python    import math    from lazyutils import lazy    class Vec:        def __init__(self, x, y):            self.x, self.y = x, y        @lazy        def magnitude(self):            print('computing...')            return math.sqrt(self.x**2 + self.y**2)Now the ``magnitude`` attribute is initialized and cached upon first use:&gt;&gt;&gt; v = Vec(3, 4)&gt;&gt;&gt; v.magnitudecomputing...5.0The attribute is writable and apart from the deferred initialization, it behavesjust like any regular Python attribute.&gt;&gt;&gt; v.magnitude = 42&gt;&gt;&gt; v.magnitude42Lazy attributes can be useful either to simplify the implementation of the__init__ method of objects that initialize a great number or variables or as anoptimization that delays potentially expensive computations that may not benecessary in the object's lifecycle.Delegation==========The delegate_to() function delegates some attribute to an attribute during theclass definition::.. code::python    from lazyutils import delegate_to        class Arrow:        magnitude = delegate_to('vector')        def __init__(self, vector, start=Vec(0, 0)):            self.vector = vector            self.start = startNow, the ``.magnitude`` attribute of ``Arrow`` instances is delegated to``.vector.magnitude``. Delegate fields are useful in class composition when onewants to expose a few selected attributes from the inner objects. delegate_to()handles attributes and methods with no distinction.&gt;&gt;&gt; a = Arrow(Vec(6, 8))&gt;&gt;&gt; a.magnitudecomputing...10.0Aliasing========Aliasing is a very simple form of delegation. We can create simple aliases forattributes using the alias() and readonly() functions::    class MyArrow(Arrow):        abs_value = readonly('magnitude')        origin = alias('start')This exposes two additional properties: &quot;abs_value&quot; and &quot;origin&quot;. The first isjust a read-only view on the &quot;magnitude&quot; property. The second exposes read andwrite access to the &quot;start&quot; attribute.</longdescription>
</pkgmetadata>