<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/tomarv2/tfremote/actions/workflows/checks.yml&quot; alt=&quot;Check&quot;&gt;        &lt;img src=&quot;https://github.com/tomarv2/tfremote/actions/workflows/checks.yml/badge.svg?branch=main&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot; alt=&quot;GitHub tag&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/license/tomarv2/tfremote&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/tomarv2/tfremote/tags&quot; alt=&quot;GitHub tag&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/v/tag/tomarv2/tfremote&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/tomarv2/tfremote/pulse&quot; alt=&quot;Activity&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/tomarv2/tfremote&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://stackoverflow.com/users/6679867/tomarv2&quot; alt=&quot;Stack Exchange reputation&quot;&gt;        &lt;img src=&quot;https://img.shields.io/stackexchange/stackoverflow/r/6679867&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://discord.gg/XH975bzN&quot; alt=&quot;chat on Discord&quot;&gt;        &lt;img src=&quot;https://img.shields.io/discord/813961944443912223?logo=discord&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=varuntomar2019&quot; alt=&quot;follow on Twitter&quot;&gt;        &lt;img src=&quot;https://img.shields.io/twitter/follow/varuntomar2019?style=social&amp;logo=twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt;# Terraform Remote State Manager([tfremote](https://pypi.org/project/tfremote/))**tf** is a python package for managing terraform remote state for: Google(Gcloud), AWS, and Azure.It sets a defined structure for all cloud providers by removing the overheard of configuring and managing the path in storage buckets.It works with::point_right: Google Storage Bucket:point_right: AWS S3:point_right: Azure Storage&gt; ❗️ **Note** Best practice is to make sure buckets are versioned.## Install package```pip install tfremote --upgrade```## Environment setup- Install Python 3.6+- Using virtualenv is strongly recommended:```python3 -m venv &lt;venv name&gt;```- Terraform 0.14.0 and above (download: https://www.terraform.io/downloads.html)Default log level is `WARNING`, to change:`export TF_LOG_LEVEL` to any of these: `'CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'`&gt; ❗️ **Important** - Two variables are required for using `tf` package (used set creat path in remote storage):&gt;&gt; - teamid&gt; - prjid&gt;&gt; Required variables can be defined using:&gt;&gt; - As `inline variables` e.g.: `-var='teamid=demo-team' -var='prjid=demo-project'`&gt; - Inside `.tfvars` file e.g.: `-var-file=&lt;tfvars file location&gt; `&gt;&gt; Two optional variables:&gt;&gt; `workspace` and `state_key` can be defined using:&gt;&gt; - `-w=&lt;workspace_name&gt;`. If no workspace is provided `default` workspace is used.&gt;&gt; - `s=&lt;state_key name&gt;`. If no key is provided `terraform` is used.&gt;&gt; Path created in S3 backend: `/&lt;teamid&gt;/&lt;prjid&gt;/&lt;workspace&gt;/&lt;state-key&gt;.tfstate`&gt;&gt; For more information refer to [Terraform documentation](https://www.terraform.io/docs/language/values/variables.html)## Setup environment variables### Workspace list file location `TF_WORKSPACE_FILE_LOCATION````export TF_WORKSPACE_FILE_LOCATION=&lt;workspace yml file location&gt;```Reference file: [link](scripts/workspaces.yml)### AWS&gt; ❗️ **Important** - s3 bucket for remote state should reside in `us-west-2`Set these env variables:```export TF_AWS_BUCKET=&lt;your_remote_state_bucket_name&gt;export TF_AWS_BUCKET_REGION=us-west-2```One of below environment variable is required:```export TF_AWS_PROFILE=&lt;aws profile to use&gt;```or```export AWS_ACCESS_KEY_ID=&lt;aws access key&gt;export AWS_SECRET_ACCESS_KEY=&lt;aws secret access key&gt;```### AzureTo create storage for remote state there is handy script.Run `scripts/remote_state.sh` (fill in the required information)Set below env variables:```export TF_AZURE_STORAGE_ACCOUNT=&lt;remote state storage account name&gt;export TF_AZURE_CONTAINER=&lt;remote state container&gt;export ARM_ACCESS_KEY=&lt;storage account access key&gt;```### GCP(gcloud)https://cloud.google.com/community/tutorials/managing-gcp-projects-with-terraformSet below env variables:```export TF_GCLOUD_BUCKET=&lt;remote state storage bucket name&gt;export TF_GCLOUD_CREDENTIALS=json credentials file path&gt;```## Usage### For GCP(gcloud):```tf plan -c=gcloud -var=teamid=demo-team -var=prjid=demo-app -w=demo-workspace```The structure in Google Storage Bucket:![alt text](docs/images/google_tf.png)### For AWS:```tf plan -c=aws -var=teamid=demo-team -var=prjid=demo-app -w=demo-workspace```The structure in AWS S3:![alt text](docs/images/aws_tf.png)If you need to specify `state_key` in S3, specify `-s=tryme-key`### For Azure:```tf plan -c=azure -var=teamid=demo-team -var=prjid=demo-app -w=demo-workspace```The structure in Azure Storage:![alt text](docs/images/azure_tf.png)### For more available options:```tf --helpusage: tf [-h] [-var] [-var-file] [-c] [-w] [-wp] [-s] [-no-color] [-json] [-out] [-f] [-nf] [-v]Terraform remote state wrapper package--------------------------------------Usage: Set below env variables to begin (more information: https://github.com/tomarv2/tfremote):TF_WORKSPACE_FILE_LOCATIONaws: TF_AWS_BUCKET, TF_AWS_BUCKET_REGION=us-west-2, TF_AWS_PROFILE or AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEYazure: TF_AZURE_STORAGE_ACCOUNT, TF_AZURE_CONTAINER, ARM_ACCESS_KEYgcloud: TF_GCLOUD_BUCKET, TF_GCLOUD_CREDENTIALSoptional arguments:  -h, --help  show this help message and exit  -var        Set Terraform configuration variable. This flag can be set multiple times  -var-file   Set Terraform configuration variables from a file. This flag can be set multiple times  -c          Specify cloud provider (default: 'aws'). Supported values: gcloud, aws, or azure  -w          Specify existing workspace name(default: 'default')  -wp         Overwrite workspace directory path structure  -s          File name in remote state (default: 'terraform.tfstate')  -no-color   Disables terminal formatting sequences in the output  -json       Enables the machine readable JSON UI output  -out        Writes the generated plan to the given filename in an opaque file format  -f          Enable FIPS endpoints (default: True)  -nf         Disable FIPS endpoints  -v          show program's version number and exit```</longdescription>
</pkgmetadata>