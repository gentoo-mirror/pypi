<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JMXQuery Python ModuleProvides a Python module to easily run queries and collect metrics from a Java Virtual Machine via JMX.In order to use this module, provide a list of queries, and the module will return all of the values it finds matching the query. Please note that the interfact to the JMX uses a small jar file contained in this module, so you will need to have java installed on the machine you're running this module on.## UsageThis example query for a Kafka server will get all cluster partition metrics:```jmxConnection = JMXConnection(&quot;service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi&quot;)jmxQuery = [JMXQuery(&quot;kafka.cluster:type=*,name=*,topic=*,partition=*&quot;,                         metric_name=&quot;kafka_cluster_{type}_{name}&quot;,                         metric_labels={&quot;topic&quot; : &quot;{topic}&quot;, &quot;partition&quot; : &quot;{partition}&quot;})]metrics = jmxConnection.query(jmxQuery)for metric in metrics:    print(f&quot;{metric.metric_name}&lt;{metric.metric_labels}&gt; == {metric.value}&quot;)```This will return the following:```kafka_cluster_Partition_UnderReplicated&lt;{'partition': '0', 'topic': 'test'}&gt; == 0kafka_cluster_Partition_UnderMinIsr&lt;{'partition': '0', 'topic': 'test'}&gt; == 0kafka_cluster_Partition_InSyncReplicasCount&lt;{'partition': '0', 'topic': 'test'}&gt; == 1kafka_cluster_Partition_ReplicasCount&lt;{'partition': '0', 'topic': 'test'}&gt; == 1kafka_cluster_Partition_LastStableOffsetLag&lt;{'partition': '0', 'topic': 'test'}&gt; == 0```As you will notice you can optionally send a metric_name and metric_labels with {} tokens in them. Thesetokens are replaced at runtime by the jar so you can easily build metric names with associated labels usingthe MBean properties of the values your query pulls back. You can also use the module to pull back a list of all the MBean values available in the JVM too:```jmxConnection = JMXConnection(&quot;service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi&quot;)jmxQuery = [JMXQuery(&quot;*:*&quot;)]metrics = jmxConnection.query(jmxQuery)for metric in metrics:    print(f&quot;{metric.to_query_string()} ({metric.value_type}) = {metric.value}&quot;)```## InstallationJust use pip to install the module in your Python environment:```pip install jmxquery```</longdescription>
</pkgmetadata>