<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========================django-translated-fields========================.. image:: https://github.com/matthiask/django-translated-fields/workflows/Tests/badge.svg    :target: https://github.com/matthiask/django-translated-fields/    :alt: CI StatusDjango model translation without magic-inflicted pain.Installation and usage======================After installing ``django-translated-fields`` in your Pythonenvironment all you have to do is define ``LANGUAGES`` in yoursettings and add translated fields to your models:.. code-block:: python    from django.db import models    from django.utils.translation import gettext_lazy as _    from translated_fields import TranslatedField    class Question(models.Model):        question = TranslatedField(            models.CharField(_(&quot;question&quot;), max_length=200),        )        answer = TranslatedField(            models.CharField(_(&quot;answer&quot;), max_length=200),        )        def __str__(self):            return self.questionBasic usage===========Model fields are automatically created from the field passed to``TranslatedField``, one field per language.  For example, with``LANGUAGES = [(&quot;en&quot;, &quot;English&quot;), (&quot;de&quot;, &quot;German&quot;), (&quot;fr&quot;, &quot;French&quot;)]``,the following list of fields would be created: ``question_en``,``question_de``, ``question_fr``, ``answer_en``, ``answer_de``,and ``answer_fr``.This implies that when changing ``LANGUAGES`` you'll have to run``makemigrations`` and ``migrate`` too.No ``question`` or ``answer`` model field is actually created. The``TranslatedField`` instance is a `descriptor&lt;https://docs.python.org/3/howto/descriptor.html&gt;`_ which by defaultacts as a property for the current language's field:.. code-block:: python    from django.utils.translation import override    question = Question(        question_en=&quot;How are you?&quot;,        question_de=&quot;Wie geht es Dir?&quot;,        question_fr=&quot;Ã‡a va?&quot;,    )    # The default getter automatically returns the value    # in the current language:    with override(&quot;en&quot;):        assert question.question == &quot;How are you?&quot;    with override(&quot;de&quot;):        assert question.question == &quot;Wie geht es Dir?&quot;    # The default setter can also be used to set the value    # in the current language:    with override(&quot;fr&quot;):        question.question = &quot;Comment vas-tu?&quot;    assert question.question_fr == &quot;Comment vas-tu?&quot;``TranslatedField`` has a ``fields`` attribute that returns a list of allthe language fields created... code-block:: python    assert Question.answer.fields == [&quot;answer_en&quot;, &quot;answer_de&quot;, &quot;answer_fr&quot;]For more attributes look at the *``TranslatedField`` instance API*section below.``question`` and ``answer`` can only be used with model instances, theydo not exist in the database. If you want to use queryset methods whichreference individual translated fields you have to use language-specificfield names yourself. If you wanted to fetch only the english questionand answer fields you could do this as follows:.. code-block:: python    questions = Question.objects.values_list(&quot;question_en&quot;, &quot;answer_en&quot;)Or better yet, using the ``to_attribute`` helper which automaticallyuses the active language (if you don't pass a specific language code asits second argument):.. code-block:: python    from django.utils.translation import override    from translated_fields import to_attribute    with override(&quot;en&quot;):        questions = Question.objects.values_list(            to_attribute(&quot;question&quot;), to_attribute(&quot;answer&quot;)        )Changing field attributes per language======================================It is sometimes useful to have slightly differing model fields perlanguage, e.g. for making the primary language mandatory. This can beachieved by passing a dictionary with keyword arguments per language asthe second positional argument to ``TranslatedField``.For example, if you add a language to ``LANGUAGES`` when a site isalready running, it might be useful to make the new languagenon-mandatory to simplify editing already existing data through Django'sadministration interface.The following example adds ``blank=True`` to the spanish field:.. code-block:: python    from translated_fields import TranslatedField    class Question(models.Model):        question = TranslatedField(            models.CharField(_(&quot;question&quot;), max_length=200),            {&quot;es&quot;: {&quot;blank&quot;: True}},        )Overriding attribute access (defaults, fallbacks)=================================================There are no default values or fallbacks, only a wrapped attributeaccess. The default attribute getter and setter functions simply returnor set the field for the current language (as returned by``django.utils.translation.get_language``). The default getter fallsback to the first language of the field in case ``get_language()``returns ``None``. Apart from that the default getter has nosafetyfeatures and may raise an ``AttributeError`` and the setter mightset an attribute on the model instance not related to a model field.Both getters and setters can be overridden by specifying your own``attrgetter`` and ``attrsetter`` functions. E.g. you may want tospecify a fallback to the default language (and at the same time allowleaving other languages' fields empty):.. code-block:: python    from django.conf import settings    from translated_fields import TranslatedField, to_attribute    def fallback_to_default(name, field):        def getter(self):            return getattr(                self,                to_attribute(name),            ) or getattr(                self,                # First language acts as fallback:                to_attribute(name, settings.LANGUAGES[0][0]),            )        return getter    class Question(models.Model):        question = TranslatedField(            models.CharField(_(&quot;question&quot;), max_length=200, blank=True),            {settings.LANGUAGES[0][0]: {&quot;blank&quot;: False}},            attrgetter=fallback_to_default,        )Maybe you're using locales with region codes such as ``fr-fr`` where youwant to fall back to the language without a region code. An example``attrgetter`` implementation follows:.. code-block:: python    from translated_fields import to_attribute    def fallback_to_all_regions(name, field):        def getter(self):            value = getattr(self, to_attribute(name), None)            if value:                return value            return getattr(self, to_attribute(name, get_language().split(&quot;-&quot;)[0]))        return getterA custom ``attrsetter`` which always sets all fields follows (probablynot very useful, but hopefully instructive):.. code-block:: python    def set_all_fields(name, field):        def setter(self, value):            for field in field.fields:                setattr(self, field, value)        return setter``TranslatedField`` instance API================================The ``TranslatedField`` descriptor has a few useful attributes (stickingwith the model and field from the examples above):* ``Question.question.fields`` contains the names of all automatically  generated fields, e.g. ``[&quot;question_en&quot;, &quot;question_...&quot;, ...]``.* ``Question.question.languages`` is the list of language codes.* ``Question.question.short_description`` is set to the ``verbose_name``  of the base field, so that the translatable attribute can be nicely  used e.g. in ``ModelAdmin.list_display``.Using a different set of languages==================================It is also possible to override the list of language codes used, forexample if you want to translate a sub- or superset of``settings.LANGUAGES``. Combined with ``attrgetter`` and ``attrsetter``there is nothing stopping you from using this field for a different kindof translations, not necessarily bound to ``django.utils.translation``or even languages at all.Translated attributes without model field creation==================================================If model field creation is not desired, you may also use the``translated_attributes`` class decorator. This only creates theattribute getter property:.. code-block:: python    from translated_fields import translated_attributes    @translated_attributes(&quot;attribute&quot;, &quot;anything&quot;, ...)    class Test(object):        attribute_en = &quot;some value&quot;        attribute_de = &quot;some other value&quot;Model admin support===================The ``TranslatedFieldAdmin`` class adds the respective language to thelabel of individual fields. Instead of three fields named &quot;Question&quot;you'll get the fields &quot;Question [en]&quot;, &quot;Question [de]&quot; and &quot;Question[fr]&quot;. It intentionally offers no functionality except for modifying thelabel of fields:.. code-block:: python    from django.contrib import admin    from translated_fields import TranslatedFieldAdmin    from .models import Question    @admin.register(Question)    class QuestionAdmin(TranslatedFieldAdmin, admin.ModelAdmin):        pass    # For inlines:    # class SomeInline(TranslatedFieldAdmin, admin.StackedInline):    #     ...As mentioned above, the ``fields`` attribute on the ``TranslatedField``instance contains the list of generated fields. This may be useful ifyou want to customize various aspects of the ``ModelAdmin`` subclass. Anexample showing various techniques follows:.. code-block:: python    from django.contrib import admin    from django.utils.translation import gettext_lazy as _    from translated_fields import TranslatedFieldAdmin, to_attribute    from .models import Question    @admin.register(Question)    class QuestionAdmin(TranslatedFieldAdmin, admin.ModelAdmin):        # Pack question and answer fields into their own fieldsets:        fieldsets = [            (_(&quot;question&quot;), {&quot;fields&quot;: Question.question.fields}),            (_(&quot;answer&quot;), {&quot;fields&quot;: Question.answer.fields}),        ]        # Show all fields in the changelist:        list_display = [            *Question.question.fields,            *Question.answer.fields        ]        # Order by current language's question field:        def get_ordering(self, request):            return [to_attribute(&quot;question&quot;)].. note::   It's strongly recommended to set the ``verbose_name`` of fields when   using ``TranslatedFieldAdmin``, the first argument of most model   fields. Otherwise, you'll get duplicated languages, e.g. &quot;Question en   [en]&quot;.Forms=====django-translated-fields provides a helper when you want form fields'labels to contain the language code. If this sounds useful to you dothis:.. code-block:: python    from django import forms    from translated_fields.utils import language_code_formfield_callback    from .models import Question    class QuestionForm(forms.ModelForm):        formfield_callback = language_code_formfield_callback        class Meta:            model = Question            fields = [                *Question.question.fields,                *Question.answer.fields            ]You may also globally configure language code labels to be shown withina block:.. code-block:: python    from translated_fields import show_language_code    def view(request):        form = ...        with show_language_code(True):            return render(request, &quot;...&quot;, {&quot;form&quot;: form})Please note that the response has to be rendered within the``show_language_code`` block. This doesn't happen automatically whenusing Django's ``TemplateResponse`` objects.Other features==============There is no support for automatically referencing the current language'sfield in queries or automatically adding fields to admin fieldsets andwhatnot. The code required for these features isn't too hard to write,but it is hard to maintain down the road which contradicts my goal ofwriting `low maintenance software&lt;https://406.ch/writing/low-maintenance-software/&gt;`_. Still, feedbackand pull requests are very welcome! Please run the style checks and testsuite locally before submitting a pull request though -- all that thisrequires is running `tox &lt;https://tox.readthedocs.io/&gt;`_.</longdescription>
</pkgmetadata>