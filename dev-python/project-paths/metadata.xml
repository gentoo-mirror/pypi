<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>project-paths=============[![Lint and Test](https://github.com/eddieantonio/project-paths/workflows/Lint%20and%20Test/badge.svg)](https://github.com/eddieantonio/project-paths/actions?query=workflow%3A%22Lint+and+Test%22)[![codecov](https://codecov.io/gh/eddieantonio/project-paths/branch/main/graph/badge.svg?token=1L6746DIHY)](https://codecov.io/gh/eddieantonio/project-paths)[![PyPI](https://img.shields.io/pypi/v/project-paths)](https://pypi.org/project/project-paths/)Access file paths from `pyproject.toml`&gt; Thanks to [@Madoshakalaka](https://github.com/madoshakalaka) for the idea!```toml# pyproject.toml[tool.project-paths]readme = &quot;README.md&quot;``````python# app.pyfrom project_paths import paths# paths.readme is a pathlib.Path object:print(paths.readme.read_text())```Install-------    pip install project-pathsUsage-----Does your application have a bunch of configurable file paths? Do youwish you just had one place to configure list them all?### Add paths to `[tool.project-paths]`With this module, define your paths in your `pyproject.toml` file underthe `[tool.project-paths]` table:```toml[tool.project-paths]docs = &quot;path/to/my/docs&quot;settings = &quot;path/to/my/settings.py&quot;config = &quot;/opt/path/to/my/config# Add as many paths as you want!```Anything string defined with `[tool.project-paths]` will be madeavailable. Relative paths are relative to `pyproject.toml`.### Access paths using `project_paths.paths.&lt;path name&gt;`Now you can access all the paths listed in `pyproject.toml` with`project_paths.paths`. Every path is returned asa [`pathlib.Path`][pathlib] object:```pythonfrom project_paths import pathsprint(paths.docs.glob(&quot;*.md&quot;))assert paths.config.exists()exec(paths.settings.read_text())# Or anything you want!```### Access your project root directory using `project_root`You can access the project root directory (assumed to be the directorythat contains `pyproject.toml`) using `project_root`, which acts likea `pathlib.Path` object:```pythonfrom project_paths import project_rootassert project_root.is_dir()assert (project_root / &quot;pyproject.toml&quot;).is_file()print((project_root / &quot;README.md&quot;).read_text())```&gt; **Note**: `project_root` is not a true `Path` object. Use&gt; `Path(project_root)` to obtain a true `Path` object.### CaveatsNames in `[tool.project-paths]` should be a valid Python identifierand the names **cannot** have a leading underscore. If a name hasa leading underscore, a warning is issued and the name is inaccessible:```toml[tool.project-paths]# BAD: paths that start with a '_' cannot be used_my_path = &quot;path/to/wherever&quot;# GOOD: path is a valid Python identifier!my_path = &quot;path/to/wherever&quot;```[pathlib]: https://docs.python.org/3/library/pathlib.html[tool-table]: https://www.python.org/dev/peps/pep-0518/#tool-table### ErrorsAll intentional errors inherit from `project_paths.ProjectPathError`.#### `PyProjectNotFoundError`Raised when `project_paths` cannot find an appropriate `pyproject.toml`for the caller. This can happen if the caller simply does not havea `pyproject.toml` file, or when it's not possible to determine thecaller's filename.&gt; **NOTE**: if accessing paths from the interactive console,&gt; `project_paths` will find the appropriate `pyproject.toml` relative to&gt; the current working directory!#### `ConfigurationNotFoundError`Raised when `project_paths` cannot find the `[tool.project-paths]` tablewithin the `pyproject.toml` file. Perhaps there is a typo or perhaps the`project_paths` inferred the incorrect module path.License-------2021 Â© Eddie Antonio Santos. MIT Licensed.</longdescription>
</pkgmetadata>