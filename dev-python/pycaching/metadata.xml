<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===================================================================================================pycaching - Geocaching for Python===================================================================================================Complete documentation can be found at `Read the Docs &lt;http://pycaching.readthedocs.org/&gt;`_... _features:Features===================================================================================================-  **login** to Geocaching.com-  **search** caches   - normal search (unlimited number of caches from any point)   - quick search (all caches inside some area) - currently not working, see below-  **get cache** and its details   -  normal loading (can load all details)   -  quick loading (can load just basic info but very quickly)   -  load logbook for given cache-  **get trackable** details by tracking code-  **post log** for a cache or a trackable-  **geocode** given location.. _installation:Installation===================================================================================================Stable version - using pip:.. code-block:: bash    pip install pycachingDev version - manually from GIT:.. code-block:: bash    git clone https://github.com/tomasbedrich/pycaching.git    cd pycaching    pip install .Pycaching has following requirements:.. code::    Python&gt;=3.5    requests&gt;=2.8    beautifulsoup4&gt;=4.9    geopy&gt;=1.11Pycaching tests have the following additional requirements:.. code::    betamax &gt;=0.8, &lt;0.9    betamax-serializers &gt;=0.2, &lt;0.3Examples===================================================================================================Login---------------------------------------------------------------------------------------------------Simply call `pycaching.login()&lt;https://pycaching.readthedocs.io/en/latest/api.html#pycaching.geocaching.Geocaching.login&gt;`__method and it will do everything for you... code-block:: python    import pycaching    geocaching = pycaching.login(&quot;user&quot;, &quot;pass&quot;)If you won't provide an username or password, pycaching will try to load ``.gc_credentials`` filefrom current directory or home folder. It will try to parse it as JSON and use the keys ``username``and ``password`` from that file as login credentials... code-block:: json   { &quot;username&quot;: &quot;myusername&quot;, &quot;password&quot;: &quot;mypassword&quot; }You can also provide multiple username and password tuples in a file as login credentials.The tuple to be used can be chosen by providing its username when calling ``pycaching.login()``,e.g. ``pycaching.login(&quot;myusername2&quot;)``. The first username and password tuple specified will beused as default if ``pycaching.login()`` is called without providing a username... code-block:: json   [ { &quot;username&quot;: &quot;myusername1&quot;, &quot;password&quot;: &quot;mypassword1&quot; },     { &quot;username&quot;: &quot;myusername2&quot;, &quot;password&quot;: &quot;mypassword2&quot; } ].. code-block:: python    import pycaching    geocaching = pycaching.login()  # assume the .gc_credentials file is presentedIn case you have a password manager in place featuring a command line interface(e.g. `GNU pass &lt;https://www.passwordstore.org/&gt;`__) you may specify a password retrieval commandusing the ``password_cmd`` key instead of ``password``... code-block:: json   { &quot;username&quot;: &quot;myusername&quot;, &quot;password_cmd&quot;: &quot;pass geocaching.com/myUsername&quot; }Note that the ``password`` and ``password_cmd`` keys are mutually exclusive.Load a cache details---------------------------------------------------------------------------------------------------.. code-block:: python    cache = geocaching.get_cache(&quot;GC1PAR2&quot;)    print(cache.name)  # cache.load() is automatically called    print(cache.location)  # stored in cache, printed immediatelyThis uses lazy loading, so the `Cache &lt;https://pycaching.readthedocs.io/en/latest/api.html#cache&gt;`__object is created immediately and the page is loaded when needed (accessing the name).You can use a different method of loading cache details. It will be much faster, but it will load lessdetails:.. code-block:: python    cache = geocaching.get_cache(&quot;GC1PAR2&quot;)    cache.load_quick()  # takes a small while    print(cache.name)  # stored in cache, printed immediately    print(cache.location)  # NOT stored in cache, will trigger full loadingYou can also load a logbook for cache:.. code-block:: python    for log in cache.load_logbook(limit=200):        print(log.visited, log.type, log.author, log.text)Or its trackables:.. code-block:: python    for trackable in cache.load_trackables(limit=5):        print(trackable.name)Post a log to cache---------------------------------------------------------------------------------------------------.. code-block:: python    geocaching.post_log(&quot;GC1PAR2&quot;, &quot;Found cache in the rain. Nice place, TFTC!&quot;)It is also possible to call ``post_log`` on `Cache&lt;https://pycaching.readthedocs.io/en/latest/api.html#cache&gt;`__ object, but you would have to create`Log &lt;https://pycaching.readthedocs.io/en/latest/api.html#log&gt;`__ object manually and pass it tothis method.Search for all traditional caches around---------------------------------------------------------------------------------------------------.. code-block:: python    from pycaching import Point    from pycaching.cache import Type    point = Point(56.25263, 15.26738)    for cache in geocaching.search(point, limit=50):        if cache.type == Type.traditional:            print(cache.name)Notice the ``limit`` in the search function. It is because `geocaching.search()&lt;https://pycaching.readthedocs.io/en/latest/api.html#pycaching.geocaching.Geocaching.search&gt;`__returns a generator object, which would fetch the caches forever in case of a simple loop.Geocode address and search around---------------------------------------------------------------------------------------------------.. code-block:: python    point = geocaching.geocode(&quot;Prague&quot;)    for cache in geocaching.search(point, limit=10):        print(cache.name)Find caches in some area---------------------------------------------------------------------------------------------------.. code-block:: python    from pycaching import Point, Rectangle    rect = Rectangle(Point(60.15, 24.95), Point(60.17, 25.00))    for cache in geocaching.search_rect(rect):        print(cache.name)If you want to search in a larger area, you could use the ``limit`` parameter as described above.Load trackable details---------------------------------------------------------------------------------------------------.. code-block:: python    trackable = geocaching.get_trackable(&quot;TB3ZGT2&quot;)    print(trackable.name, trackable.goal, trackable.description, trackable.location)Post a log for trackable---------------------------------------------------------------------------------------------------.. code-block:: python    from pycaching.log import Log, Type as LogType    import datetime    log = Log(type=LogType.discovered_it, text=&quot;Nice TB!&quot;, visited=datetime.date.today())    tracking_code = &quot;ABCDEF&quot;    trackable.post_log(log, tracking_code)Get geocaches by log type---------------------------------------------------------------------------------------------------.. code-block:: python    from pycaching.log import Type as LogType    for find in geocaching.my_finds(limit=5):        print(find.name)    for dnf in geocaching.my_dnfs(limit=2):        print(dnf.name)    for note in geocaching.my_logs(LogType.note, limit=6):        print(note.name).. _appendix:Appendix===================================================================================================Legal notice---------------------------------------------------------------------------------------------------Be sure to read `Geocaching.com's terms of use &lt;http://www.geocaching.com/about/termsofuse.aspx&gt;`__.By using this piece of software you break them and your Geocaching account may be suspended or *evendeleted*. To prevent this, I recommend you to load the data you really need, nothing more. Thissoftware is provided &quot;as is&quot; and I am not responsible for any damage possibly caused by it.Inspiration---------------------------------------------------------------------------------------------------Original version was inspired by these packages:-  `Geocache Grabber &lt;http://www.cs.auckland.ac.nz/~fuad/geo.py&gt;`__ (by Fuad Tabba)-  `geocaching-py &lt;https://github.com/abbot/geocaching-py&gt;`__ (by Lev Shamardin)Although the new version was massively rewritten, I'd like to thank to their authors.Authors---------------------------------------------------------------------------------------------------Authors of this project are `all contributors&lt;https://github.com/tomasbedrich/pycaching/graphs/contributors&gt;`__. Maintainer is `Tomáš Bedřich&lt;http://tbedrich.cz&gt;`__... _build_status:|PyPI monthly downloads|.. |PyPI monthly downloads| image:: http://img.shields.io/pypi/dm/pycaching.svg   :target: https://pypi.python.org/pypi/pycaching</longdescription>
</pkgmetadata>