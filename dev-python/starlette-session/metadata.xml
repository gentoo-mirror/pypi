<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/auredentan/starlette-session/actions?query=workflow%3ATest&quot; target=&quot;_blank&quot;&gt;  &lt;img src=&quot;https://github.com/auredentan/starlette-session/workflows/Test/badge.svg?branch=master&quot; alt=&quot;Test&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/starlette-session&quot; target=&quot;_blank&quot;&gt;  &lt;img src=&quot;https://img.shields.io/pypi/v/starlette-session?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/auredentan/starlette-session&quot; target=&quot;_blank&quot;&gt;  &lt;img src=&quot;https://codecov.io/gh/auredentan/starlette-session/branch/master/graph/badge.svg&quot; alt=&quot;Code coverage&quot;/&gt;&lt;/a&gt;&lt;/p&gt;---**Documentation:** [https://auredentan.github.io/starlette-session/](https://auredentan.github.io/starlette-session/)---# Starlette SessionStarlette session is a simple session middleware for [starlette](https://github.com/encode/starlette/) that enable server side session with starlette.## RequirementsPython 3.6+## Installation```bashpip install starlette-session```## ExampleUsing redis as backend```pythonfrom starlette.applications import Starlettefrom starlette.requests import Requestfrom starlette.responses import JSONResponsefrom starlette.routing import Routefrom starlette_session import SessionMiddlewarefrom starlette_session.backends import BackendTypefrom redis import Redisasync def setup_session(request: Request) -&gt; JSONResponse:    request.session.update({&quot;data&quot;: &quot;session_data&quot;})    return JSONResponse({&quot;session&quot;: request.session})async def clear_session(request: Request):    request.session.clear()    return JSONResponse({&quot;session&quot;: request.session})def view_session(request: Request) -&gt; JSONResponse:    return JSONResponse({&quot;session&quot;: request.session})routes = [    Route(&quot;/setup_session&quot;, endpoint=setup_session),    Route(&quot;/clear_session&quot;, endpoint=clear_session),    Route(&quot;/view_session&quot;, endpoint=view_session),]redis_client = Redis(host=&quot;localhost&quot;, port=6379)app = Starlette(debug=True, routes=routes)app.add_middleware(    SessionMiddleware,    secret_key=&quot;secret&quot;,    cookie_name=&quot;cookie22&quot;,    backend_type=BackendType.redis,    backend_client=redis_client,)```You can find more example [here](https://github.com/auredentan/starlette-session/tree/master/examples)## Using a custom backendYou can provide a custom backend to be used. This backend has simply to implement the interface ISessionBackend```pythonclass ISessionBackend(ABC):    @abstractmethod    async def get(self, key: str) -&gt; Optional[dict]:        raise NotImplementedError()    @abstractmethod    async def set(self, key: str, value: dict, exp_in_mins: str) -&gt; Optional[str]:        raise NotImplementedError()    @abstractmethod    async def delete(key: str) -&gt; Any:        raise NotImplementedError()```</longdescription>
</pkgmetadata>