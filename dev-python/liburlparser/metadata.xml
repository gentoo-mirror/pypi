<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/mohammadraziei/liburlparser&quot;&gt;    &lt;img src=&quot;https://github.com/MohammadRaziei/liburlparser/raw/master/docs/images/logo/liburlparser-logo-1.svg&quot; alt=&quot;Logo&quot;&gt;  &lt;/a&gt;  &lt;h3 align=&quot;center&quot;&gt;    Fastest domain extractor library written in C++ with python binding.  &lt;/h3&gt;  &lt;h4 align=&quot;center&quot;&gt;    First and complete library for parsing url in C++ and Python and Command Line  &lt;/h4&gt;&lt;/p&gt;![license](https://img.shields.io/badge/MIT-License-green)![Python]( https://img.shields.io/badge/Python-3.8%20%7C%203.9%20%7C%203.10%20%7C%203.11-blue)![Python]( https://img.shields.io/badge/C++-17-yellow)&lt;!--![Build](https://github.com/Intsights/PyDomainExtractor/workflows/Build/badge.svg)[![PyPi](https://img.shields.io/pypi/v/PyDomainExtractor.svg)](https://pypi.org/project/PyDomainExtractor/)--&gt;&lt;!--## Table of Contents- [Table of Contents](#table-of-contents)- [About The Project](#about-the-project)  - [Built With](#built-with)[README.md](README.md)  - [Performance](#performance)    - [Extract From Domain](#extract-from-domain)    - [Extract From URL](#extract-from-url)  - [Installation](#installation)- [Usage](#usage)  - [Extraction](#extraction)  - [URL Extraction](#url-extraction)  - [Validation](#validation)  - [TLDs List](#tlds-list)- [License](#license)- [Contact](#contact)--&gt;## About The Project### Features* Multiple programming language supported such as `Python`, `C++` and `Shell`* Intuitive interface and identical in C++ and Python* Provide two seperated class Url and Host for the purpose of clean code* Also support [public_suffix_list](https://publicsuffix.org/list/public_suffix_list.dat) for known combinatorial suffix such as &quot;ac.ir&quot;* Support unknown suffix like &quot;google.comm&quot; (it detect &quot;comm&quot; as suffix)* Update public_suffix_list automatically before each build and deploy  * Host properties:  * subdomain  * domain  * domain_name  * suffix* Url properties:  * protocol  * userinfo  * host (and all the host properties)  * port  * path  * query  * params  * fragment## Setup### C++:#### build steps:```shgit clone https://github.com/mohammadraziei/liburlparsermkdir -p build; cd buildcmake ..# Build the project:make# [Optional] run tests:make test# [Optional] make documents:make docs# [Optional] Run examples:./example# Make installsudo make install```### Python and Command Line:Be aware that it required `python&gt;=3.8`#### Installation###### pip by [pypi](https://pypi.org/project/liburlparser/)```shpip install liburlparser```if you want to use psl.update to update the public suffix list, you must install the `online` version```shpip install &quot;liburlparser[online]&quot;```Or###### pip by [git](https://github.com/mohammadraziei/liburlparser)```shpip install git+https://github.com/mohammadraziei/liburlparser```Or###### manually```shgit clone https://github.com/mohammadraziei/liburlparserpip install ./liburlparser```## Usage### Command Line```shpython -m liburlparser --help # show help sectionpython -m liburlparser --version # show versionpython -m liburlparser --url &quot;https://mail.google.com/about&quot; | jq #return as jsonpython -m liburlparser --host &quot;mail.google.com&quot; | jq # return as json```### Pythonyou can use liburlparser so intutivelyall of classes has help section```pythonimport liburlparserhelp(liburlparser)print(liburlparser.__version__)from liburlparser import Url, Hosthelp(Url)help(Host)```parse url and host```pythonfrom liburlparser import Url, Host## parse url:url = Url(&quot;https://ee.aut.ac.ir/#id&quot;) # parse all part of urlprint(url, url.suffix, url.domain, url.fragment, url.host, url.to_dict(), url.to_json())## parse hosthost = url.host # ee.aut.ac.ir# orhost = Host(&quot;ee.aut.ac.ir&quot;)# or host = Host.from_url(&quot;https://ee.aut.ac.ir/#id&quot;) # the fastest way for parsing host from url# all of these methods return an object of Host class which already parse the host part of url print(host, host.domain, host.suffix, host.to_dict(), host.to_json())```Also there is some helping api to get better performance for some small tasks```python# if you need to extract the host of url as a string without any parsing host_str = Url.extract_host(&quot;https://ee.aut.ac.ir/about&quot;) # very fast```if you are fan of  `pydomainextractor`, there is some interface similar to it```pythonimport pydomainextractorextractor = pydomainextractor.DomainExtractor()extractor.extract(&quot;ee.aut.ac.ir&quot;) # from hostextractor.extract_from_url(&quot;https://ee.aut.ac.ir/about&quot;) # from url# alternatively you can use:from liburlparser import HostHost.extract(&quot;ee.aut.ac.ir&quot;) # from hostHost.extract_from_url(&quot;https://ee.aut.ac.ir/about&quot;) # from url# you can see there is the same api```### C++there is some examples in [examples](https://github.com/MohammadRaziei/liburlparser/tree/master/examples) folder```c++#include &quot;liburlparser&quot;.../// for parsing urlTLD::Url url(&quot;https://ee.aut.ac.ir/about&quot;);std::string domain = url.domain(); // also for subdomain, port, params, .../// for parsing hostTLD::Host host(&quot;ee.aut.ac.ir&quot;);// orTLD::Host host = url.host();// orTLD::Host host = TLD::Host::fromUrl(&quot;https://ee.aut.ac.ir/about&quot;);```you can see all methods in python we can use in c++ very easily### Performance#### Extract From HostTests were run on a file containing 10 million random domains from various top-level domains (Mar. 13rd 2022)| Library  | Function | Time || ------------- | ------------- | ------------- || [liburlparser](https://github.com/mohammadraziei/liburlparser) | liburlparser.Host | 1.12s || [PyDomainExtractor](https://github.com/Intsights/PyDomainExtractor) | pydomainextractor.extract | 1.50s || [publicsuffix2](https://github.com/nexb/python-publicsuffix2) | publicsuffix2.get_sld | 9.92s || [tldextract](https://github.com/john-kurkowski/tldextract) | \_\_call\_\_ | 29.23s || [tld](https://github.com/barseghyanartur/tld) | tld.parse_tld | 34.48s |#### Extract From URLThe test was conducted on a file containing 1 million random urls (Mar. 13rd 2022)| Library                                                             | Function | Time   ||---------------------------------------------------------------------| ------------- |--------|| [liburlparser](https://github.com/mohammadraziei/liburlparser)      | liburlparser.Host.from_url | 2.10s  || [PyDomainExtractor](https://github.com/Intsights/PyDomainExtractor) | pydomainextractor.extract_from_url | 2.24s  || [publicsuffix2](https://github.com/nexb/python-publicsuffix2)       | publicsuffix2.get_sld | 10.84s || [tldextract](https://github.com/john-kurkowski/tldextract)          | \_\_call\_\_ | 36.04s || [tld](https://github.com/barseghyanartur/tld)                       | tld.parse_tld | 57.87s |## LicenseDistributed under the MIT License. See [LICENSE](LICENSE) for more information.## Contact&lt;!-- Gal Ben David - gal@intsights.com --&gt;Project Link: - [https://github.com/mohammadraziei/liburlparser](https://github.com/mohammadraziei/liburlparser)- [https://pypi.org/project/liburlparser](https://pypi.org/project/liburlparser)[license-shield]: https://img.shields.io/github/license/othneildrew/Best-README-Template.svg?style=flat-square</longdescription>
</pkgmetadata>