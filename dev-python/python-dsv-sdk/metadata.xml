<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># The Thycotic DevOps Secrets Vault Python SDK![PyPI Version](https://img.shields.io/pypi/v/python-dsv-sdk)![License](https://img.shields.io/github/license/thycotic/python-dsv-sdk)![Python Versions](https://img.shields.io/pypi/pyversions/python-dsv-sdk)The [Thycotic](https://thycotic.com/)[DevOps Secrets Vault](https://thycotic.com/products/devops-secrets-vault-password-management/)(DSV) Python SDK contains classes that interact with the DSV REST API.## Install```shellpython -m pip install python-dsv-sdk```## UsageThere are two ways in which you can authorize the `SecretsVault` class to fetch secrets.- Password Authorization (with `PasswordGrantAuthorizer`)- Access Token Authorization (with `AccessTokenAuthorizer`)### Authorizers#### Password AuthorizationIf using a traditional `client_id` and a `client_secret` to authenticate in to your DevOps Secrets Vault, you can pass the `PasswordGrantAuthorizer` into the `SecretsVault` class at instantiation. The `PasswordGrantAuthorizer` requires a `base_url`, `username`, and `password`. It _optionally_ takes a `token_path_uri`, but defaults to `/v1/token`.```pythonfrom thycotic.secrets.vault import PasswordGrantAuthorizerauthorizer = PasswordGrantAuthorizer(&quot;https://mytenant.secretsvaultcloud.com/&quot;, &quot;my_client_id&quot;, &quot;my_client_secret&quot;)```#### Access Token AuthorizationIf you already have a valid `access_token`, you can pass directly via the `AccessTokenAuthorizer`.```pythonfrom thycotic.secrets.vault import AccessTokenAuthorizerauthorizer = AccessTokenAuthorizer(&quot;YgJ1slfZs8ng9bKsRsB-tic0Kh8I...&quot;)```### Secrets VaultInstantiate `SecretsVault` by passing your `base_url` and `Authorizer` as arguments:```pythonfrom thycotic.secrets.vault import SecretsVaultvault = SecretsVault(&quot;https://mytenant.secretsvaultcloud.com/&quot;, authorizer)```Secrets can be fetched using the `get_secret` method, which takes the `secret_path` of the secret and returns a `json` object. Alternatively, you can use pass the json to `VaultSecret` which returns a `dataclass` object representation of the secret:```pythonfrom thycotic.secrets.vault import VaultSecretsecret = VaultSecret(**vault.get_secret(&quot;/test/secret&quot;))print(f&quot;username: {secret.data['username']}\npassword: {secret.data['password']}&quot;)```## Create a Build Environment (optional)The SDK requires [Python 3.6](https://www.python.org/downloads/) or higher.First, ensure Python 3.6 is in `$PATH` then run:```shell# Clone the repogit clone https://github.com/thycotic/python-dsv-sdkcd python-dsv-sdk# Create a virtual environmentpython -m venv venv. venv/bin/activate# Install dependenciespython -m pip install --upgrade pippip install -r requirements.txt```Valid credentials are required to run the unit tests. The credentials should be stored in environment variables or in a `.env` file:```shellexport DSV_CLIENT_ID=&quot;e7f6be68-0acb-4020-9c55-c7b161620199&quot;export DSV_CLIENT_SECRET=&quot;0lYBbBbaXtkMd3WYydhfhuy0rHNFet_jq7QA4ZfEjxU&quot;export DSV_BASE_URL=&quot;https://my.secretsvaultcloud.com/&quot;```The tests assume that the client associated with the specified `CLIENT_ID` can read the secret with the path `/test/sdk/simple`.&gt; Note: The secret path can be changed manually in `test_server.py` to a secret path that the client can access.To run the tests with `tox`:```shelltox```To build the package, use [Flit](https://flit.readthedocs.io/en/latest/):```shellflit build```</longdescription>
</pkgmetadata>