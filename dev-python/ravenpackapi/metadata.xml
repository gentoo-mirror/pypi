<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>RavenPack API - Python client=============================A Python library to consume the`RavenPack &lt;https://www.ravenpack.com&gt;`__ API.`API documentation. &lt;https://www.ravenpack.com/support/&gt;`__Installation------------::    pip install ravenpackapiAbout-----The Python client helps managing the API calls to the RavenPack datasetserver in a Pythonic way, here are some examples of usage, you can findmore in the tests.Usage-----In order to be able to use the RavenPack API you will need an API KEY.If you don't already have one please contact your `customersupport &lt;mailto:sales@ravenpack.com&gt;`__ representative.To begin using the API you will need to instantiate an API object thatwill deal with the API calls.Using your RavenPack API KEY, you can either set the ``RP_API_KEY``environment variable or set it in your code:.. code:: python    from ravenpackapi import RPApi    api = RPApi(api_key=&quot;YOUR_API_KEY&quot;)Creating a new dataset~~~~~~~~~~~~~~~~~~~~~~To create a dataset you can call the ``create_dataset`` method of theAPI with a Dataset instance... code:: python    from ravenpackapi import Dataset    ds = api.create_dataset(        Dataset(            name=&quot;New Dataset&quot;,            filters={                &quot;relevance&quot;: {                    &quot;$gte&quot;: 90                }            },        )    )    print(&quot;Dataset created&quot;, ds)Getting data from the datasets~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~In the API wrapper, there are several models that maybe used forinteracting with data.Here is how you may get a dataset definition for a pre-existing dataset.. code:: python    # Get the dataset description from the server, here we use 'us30'    # one of RavenPack public datasets with the top30 companies in the US      ds = api.get_dataset(dataset_id='us30')Downloads: json^^^^^^^^^^^^^^^The json endpoint is useful for asking data synchronously, optimized forsmall requests, if you need to download big data chunks you may want touse the asynchronous datafile endpoint instead... code:: python    data = ds.json(        start_date='2018-01-05 18:00:00',        end_date='2018-01-05 18:01:00',    )    for record in data:        print(record)Json queries are limited to-  granular datasets: 10,000 records-  indicator datasets: 500 entities, timerange 1 year, lookback window 1   yearDownloads: datafile^^^^^^^^^^^^^^^^^^^For bigger requests the datafile endpoint can be used to prepare adatafile asynchronously on the RavenPack server for later retrieval.Requesting a datafile, will give you back a job object, that will takesome time to complete... code:: python    job = ds.request_datafile(        start_date='2018-01-05 18:00:00',        end_date='2018-01-05 18:01:00',    )    with open('output.csv') as fp:        job.save_to_file(filename=fp.name)Streaming real-time data~~~~~~~~~~~~~~~~~~~~~~~~It is possible to subscribe to a real-time stream for a dataset.Once you create a streaming connection to the real-time feed with yourdataset, you will receive analytics records as soon as they arepublished.It is suggested to handle possible disconnection with a retry policy.You can find a `real-time streaming examplehere &lt;ravenpackapi/examples/get_realtime_news.py&gt;`__.The Result object handles the conversion of various fields into theappropriate type, i.e. ``record.timestamp_utc`` will be converted to``datetime``Entity mapping~~~~~~~~~~~~~~The entity mapping endpoint allow you to find the RP\_ENTITY\_ID mappedto your universe of entities... code:: python    universe = [        &quot;RavenPack&quot;,        {'ticker': 'AAPL'},        'California USA',        {  # Amazon, specifying various fields            &quot;client_id&quot;: &quot;12345-A&quot;,            &quot;date&quot;: &quot;2017-01-01&quot;,            &quot;name&quot;: &quot;Amazon Inc.&quot;,            &quot;entity_type&quot;: &quot;COMP&quot;,            &quot;isin&quot;: &quot;US0231351067&quot;,            &quot;cusip&quot;: &quot;023135106&quot;,            &quot;sedol&quot;: &quot;B58WM62&quot;,            &quot;listing&quot;: &quot;XNAS:AMZN&quot;        },    ]    mapping = api.get_entity_mapping(universe)    # in this case we match everything    assert len(mapping.matched) == len(universe)    assert [m.name for m in mapping.matched] == [        &quot;RavenPack International S.L.&quot;,        &quot;Apple Inc.&quot;,        &quot;California, U.S.&quot;,        &quot;Amazon.com Inc.&quot;    ]Entity reference~~~~~~~~~~~~~~~~The entity reference endpoint give you all the available information foran Entity given the RP\_ENTITY\_ID.. code:: python    ALPHABET_RP_ENTITY_ID = '4A6F00'    references = api.get_entity_reference(ALPHABET_RP_ENTITY_ID)    # show all the names over history    for name in references.names:        print(name.value, name.start, name.end)    # print all the ticket valid today    for ticker in references.tickers:        if ticker.is_valid():            print(ticker)Training Datasets~~~~~~~~~~~~~~~~~Analyse your own content using RavenPackâ€™s proprietary NLP technology.The API for analyzing your internal content is still in beta and maychange in the future. You can request an early access and `see anexample of usage here &lt;ravenpackapi/examples/text_extraction.py&gt;`__.Accessing the low-level requests~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~RavenPack API wrapper is using the `requestslibrary &lt;https://2.python-requests.org&gt;`__ to do HTTPS requests, you canset common requests parameters to all the outbound calls by setting the``common_request_params`` attribute.For example, to disable HTTPS certificate verification and to setup yourinternal proxy:.. code:: python    api = RPApi()    api.common_request_params.update(        dict(            proxies={'https': 'http://your_internal_proxy:9999'},            verify=False,        )    )    # use the api to do requestsPS. For setting your internal proxies, requests will honor theHTTPS\_PROXY environment variable.</longdescription>
</pkgmetadata>