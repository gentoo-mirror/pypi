<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DonnoA full-featured note-taking application in terminal.## Features* Easy note management: add, update, list, remove note;* Organize notes in hierarchical notebooks;* Full featured formating support: you can add rich texts (markdown),  mathematical formula (mathjax, LaTeX), diagrams, charts (mermaid),  images, and attachments. All will be rendered and displayed lively in your browser;* Powerful and fast full-text search. Get all information at your fingers;* Safe and secure: all notes are saved in plain texts (markdown). You own your data.  You can view and update your notes without any specific applications  but a text editor when necessary. All notes store in private git repository;* Live in console: git style APIs. No need to learn a new GUI app.  Get your notes anytime, anywhere: Linux, macOS, Windows (through WSL),  Android (by Termux), SSH, ...## Install`pip install donno`### Prerequisites* [git](https://git-scm.com/) for note synchronization;* [pandoc](https://pandoc.org/) and [mermaid](https://github.com/mermaid-js/mermaid)  for preview with browser.On Debian-based systems, install them with:```apt install git pandocnpm install -g @mermaid-js/mermaid-cli mermaid-filter```## Usage```don add        # create a new notedon list       # list notes in all notebooksdon list-notebooks    # list existing notebooks in alphabet orderdon search nim thunder    # search notes contains &quot;nim&quot; and &quot;thunder&quot;don edit 3     # edit note #3 in note list or searching resultsdon delete 3   # delete note #3 in note list or searching resultsdon backup     # backup notes to remote repositorydon restore    # restore notes from remote repositorydon backup-patch  # backup notes out of git revision to tarball, default to /tmpdon restore-patch # restore notes from patch filedon preview 3  # preview note #3 in console editordon pv 3       # preview note #3 in browserdon ads -b Tech -n nim -t config -c compile  # advanced search, see below for explanationsdon s '(python.*program|learning.*algorithm)'  # search notes with regex, see below for explanationsdon pub        # publish notes to blog```Note:* Most long commands have aliases (abbreviation) for convenience.  For example, `a` for add, `l` for list, `s` for search,  `ads` for `advanced-search`, etc. Get alias of a command with `-h` option.* The command options have 2 forms: full and abbreviation.  For example, in command `ads`, `-b` is the abbr. of `--book`,  `-t`: `--tag`, `-n`: `--name`, etc.## Add attachments in a noteYou can add attachments in your notes.They could be image files, which are added by `![&lt;image-file-name&gt;]()`,or other files, which are added by  `[&lt;attachment-file-name&gt;]()`(without exclamation mark ahead, like common markdown links).The attachment file specified in the link must exist in the folder you add thenote (the folder you run `don a`),or &quot;attachment file not exists&quot; error will be raised.### Under the hoodWhen you save a note and quit the editor,donno will scan all `[&lt;filename&gt;]()` pattern in the note.If the &lt;filename&gt;s exist in the current folder,donno do the following things:1. Generate a &lt;internal-name&gt; for each attachment;1. Copy each file to &lt;notes-repo&gt;/resources folder (get the path of   &lt;notes-repo&gt; with `don conf get repo`)   with their &lt;internal-name&gt;s;1. Update the link in the note from `[&lt;filename&gt;]()` to `[&lt;filename&gt;](&lt;internal-name&gt;)`The &lt;internal-name&gt; is composed of 5 parts:1. Prefix `resources/`, for all attachments are saved in this folder in &lt;notes-repo&gt;1. &lt;note-name&gt;1. `att`1. Order number1. File extension of original fileFor example, if you add the following attachments in the note with filename*note201118140711.md*:```![myimage.png]()[mydoc.pdf]()```They  will be updated to:```![myimage.png](resources/note201118140711att1.png)[mydoc.pdf](resources/note201118140711att2.pdf)```If the attachment file doesn't exist in the current folder,donno will give a warning:```File myimage.png does not exist in the current folder.You can run `don e ...` at the folder where myimage.png exists.```## ConfigurationFile path: ~/.config/donno/config.json### Configuration Items#### General* app_home: root folder of donno data files. Default: ~/.donno* repo: folder to save all note files and resource files. Default: $app_home/repo* editor: which application to use to create/update note. Default: `nvim`* viewer: which application to use to view notes in console. Default: `nvim -R`* default_notebook: default notebook name for a new note. Default: `/Diary`* logging level: debug or info(default)* editor_envs: environment variables of the editor. For example,  env `XDG_CONFIG_HOME` is used by neovim to load config/plugins to parse markdown files.  Default: `~/.config`#### Blog* url: blog url* publish_cmd: command to publish notes to blog### Manage Configurations```don conf get                # list all current configurationsdon conf get edtior         # get which editor to usedon conf set editor nvim    # set the editor, make sure you've installed itdon conf set default_notebook /Diary/2020# set nested attribute:don conf set editor_envs.XDG_CONFIG_HOME $HOME/.config/vimrcs/text# restore default values of configurations:don conf restore```## Update and uninstall```pip install --upgrade donnopip uninstall donno```## Import &amp; Export between Other Note-taking AppsSupported import formats:* JoplinSupported export formats:* JSON* markdownExamples:Import notes from Joplin:```jop export --format json jopdbdon imports jopdb --source-type joplin```Export notes as JSON files and save into folder *donno_export*:```don exports --type json```List parameters with `don export -h` and `don import -h`.## Advanced searchTo be updated!To search notes with more details, use *advanced-search* command.For example, to search notes in notebook *Tech*, and &quot;nim&quot; in title,&quot;config&quot; in tags, &quot;compile&quot; in contents:```don ads -b Tech -n nim -t config -c compile```which is abbreviation form of:```don advanced-search --book Tech --name nim --tag config --content compile```You can also use regex in search term.For example, to search notes contains &quot;python...program&quot; *or* &quot;learning...algorithm&quot;:```don s '(python.*program|learning.*algorithm)'```## Synchronization between Multiple Devices### Main method: VCSTo sync notes between multiple devices,you need a *remote* VCS (version control system) repository.The simplest way is creating it on a source-code-hosting platform,such as github.com, gitlab.com, gitee.com, etc.Then push your *local note folder* (get its path with `don conf get repo`,if you didn't set it explicitly) to remote repository.On a new device, clone the remote repository to the local note folder.When you update notes on device A, and want to sync the changes to device B,run `git pull` in the local note folder of device B.With the powerful merge function of git,you can create and/or update notes on multiple devices simultaneously,then sync them with *rebase* or other methods.### Complement method: patch fileWhen the changes of notes are too small to form a meaningful commit,you can patch them to a file, then restore it on another device.## Publish to BlogIf you want to publish notes in a specified notebook to blog,see [blog doc](./blog/README.md) for details.## Some notes### Install in virtual environmentFor those who don't want install apps in global environment,install it in a virtual environment:```mkdir ~/apps/donnocd ~/apps/donnopython -m venv env. env/bin/activatepip install donnocat &lt;&lt; EOF &gt;&gt; ~/.zshrcfunction dn() {  source $HOME/apps/donno/env/bin/activate  don $@  deactivate}EOF```Now the command is `dn` instead of `don`.## Roadmap### In developing### On schedule1. Basic publishing module: publish to blog, such as github.io1. Advanced publishing function: publish specific note, or notes in specific notebook1. Search notes with the whole words;1. Better appearance: beautify output table with libraries like [colored][col], [tabulate][tab], etc1. Search notes with keywords (which is extracted with AI algorithms, such as NLP, TF-IDF, etc);1. Similar notes recommendations of a specific note with recommendation algorithms;1. Note syntax check with NLP;1. Knowledge graph construction and visualization (in TUI) from a specific root (note);1. Note translation, English to Chinese and vice versa.1. Suggest when typing. For example: press TAB after input `don s py`, some candidates displayed   below: python, pyhive, pynvim, ...### Completed1. Synchronize notes with patch file as the complement to the main sync   mechanism based on git;1. Basic note-taking functions: add, delete, list, search, view, update notes1. Configuration module: see [Configuration](#configuration);1. Preview: render markdown notes to HTML and previewed in browser1. Support adding attachments into notes, especially images1. Add logging system, distinguish application (for end user) and debugging (for developer) logs1. Notebook management: list notebooks, list notes in specified notebook1. Synchronize notes between hosts (based on VCS, such as git)1. Import/Export from/to other open source note-taking apps,   such as [Joplin](https://joplinapp.org/)1. Advanced search function: search by title, tag, notebook and content1. Search with regular expression[col]: https://pypi.org/project/colored/[tab]: https://pypi.org/project/tabulate/</longdescription>
</pkgmetadata>