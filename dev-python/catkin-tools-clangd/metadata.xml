<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Catkin Tools ClangdDefine new verb `build_compile_command` in `catkin` to generate clangd compile commands## BackstoryThis project is made because I've always have issues getting autocomplete to work in VSCode C++ Intellisense with catkin/ROS environment. My solution is to use this catkin-tools-clangd in tandem with [vscode-clangd](https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd) or [sublime-text-lsp](https://github.com/sublimelsp/LSP)## InstallationThis package installs a new verb for catkin_tools. The easiest way to install this verb is from PyPI:```shpip install catkin-tools-clangd```## UsageAfter installing you'd be able to use `catkin build_compile_cmd` that will automatically generate compile commands for clangd for you.## AliasingYou can easily change your alias in `/home/ardiya/.config/catkin/verb_aliases/00-default-aliases.yaml`e.g. add the following line:```yamlbcc: build_compile_cmd```and you'd be able to call `catkin bcc` to run the same `catkin build_compile_cmd`## VS Code setupInstall [vscode-clangd](https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd) extensionActually, that's it. But I also recommend to add following line into ${HOME}/.config/Code/User/settings.json```json{    ...    &quot;clangd.semanticHighlighting&quot;: true,    &quot;clangd.arguments&quot;: [        // If set to true, code completion will include index symbols that are not defined in the scopes        // (e.g. namespaces) visible from the code completion point. Such completions can insert scope qualifiers        &quot;--all-scopes-completion&quot;,        // Index project code in the background and persist index on disk.        &quot;--background-index&quot;,        // Enable clang-tidy diagnostics        &quot;--clang-tidy&quot;,        // Whether the clang-parser is used for code-completion        //   Use text-based completion if the parser is not ready (auto)        &quot;--completion-parse=auto&quot;,        // Granularity of code completion suggestions        //   One completion item for each semantically distinct completion, with full type information (detailed)        &quot;--completion-style=detailed&quot;,        // clang-format style to apply by default when no .clang-format file is found        &quot;--fallback-style=Google&quot;,        // When disabled, completions contain only parentheses for function calls.        // When enabled, completions also contain placeholders for method parameters        &quot;--function-arg-placeholders&quot;,        // Add #include directives when accepting code completions        //   Include what you use. Insert the owning header for top-level symbols, unless the        //   header is already directly included or the symbol is forward-declared        &quot;--header-insertion=iwyu&quot;,        // Prepend a circular dot or space before the completion label, depending on whether an include line will be inserted or not        &quot;--header-insertion-decorators&quot;,        // Enable index-based features. By default, clangd maintains an index built from symbols in opened files.        // Global index support needs to enabled separatedly        &quot;--index&quot;,        // Attempts to fix diagnostic errors caused by missing includes using index        &quot;--suggest-missing-includes&quot;,    ],    ...}```## Sublime text setupInstall [sublime-text-lsp](https://github.com/sublimelsp/LSP)Add following lines to `Preferences`-&gt;`Package Settings` -&gt; `LSP` -&gt; `Settings````json{  &quot;clients&quot;: {    &quot;clangd&quot;: {      &quot;enabled&quot;: true,      &quot;command&quot;: [        &quot;clangd&quot;,  // you may use an absolute path for this clangd executable        &quot;--all-scopes-completion&quot;,        &quot;--background-index&quot;,        &quot;--clang-tidy&quot;,        &quot;--completion-style=detailed&quot;,        &quot;--fallback-style=Google&quot;,        &quot;--function-arg-placeholders&quot;,        &quot;--header-insertion=iwyu&quot;,        &quot;--header-insertion-decorators&quot;,        &quot;--index&quot;,        &quot;--suggest-missing-includes&quot;,      ],      &quot;scopes&quot;: [&quot;source.c&quot;, &quot;source.c++&quot;, &quot;source.objc&quot;, &quot;source.objc++&quot;],      &quot;syntaxes&quot;: [        &quot;Packages/C++/C.sublime-syntax&quot;,        &quot;Packages/C++/C++.sublime-syntax&quot;,        &quot;Packages/Objective-C/Objective-C.sublime-syntax&quot;,        &quot;Packages/Objective-C/Objective-C++.sublime-syntax&quot;,      ],      &quot;languageId&quot;: &quot;cpp&quot;,    },  },}```</longdescription>
</pkgmetadata>