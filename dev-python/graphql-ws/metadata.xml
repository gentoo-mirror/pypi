<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========GraphQL WS==========Websocket backend for GraphQL subscriptions.Supports the following application servers:Python 3 application servers, using asyncio:    * `aiohttp`_    * `websockets compatible servers`_ such as Sanic      (via `websockets &lt;https://github.com/aaugustin/websockets/&gt;`__ library)    * `Django v2+`_Python 2 application servers:    * `Gevent compatible servers`_ such as Flask    * `Django v1.x`_      (via `channels v1.x &lt;https://channels.readthedocs.io/en/1.x/inshort.html&gt;`__)Installation instructions=========================For instaling graphql-ws, just run this command in your shell.. code:: bash    pip install graphql-wsExamples========Python 3 servers----------------Create a subscribable schema like this:.. code:: python    import asyncio    import graphene    class Query(graphene.ObjectType):        hello = graphene.String()        @staticmethod        def resolve_hello(obj, info, **kwargs):            return &quot;world&quot;    class Subscription(graphene.ObjectType):        count_seconds = graphene.Float(up_to=graphene.Int())        async def resolve_count_seconds(root, info, up_to):            for i in range(up_to):                yield i                await asyncio.sleep(1.)            yield up_to    schema = graphene.Schema(query=Query, subscription=Subscription)aiohttp~~~~~~~Then just plug into your aiohttp server... code:: python    from graphql_ws.aiohttp import AiohttpSubscriptionServer    from .schema import schema    subscription_server = AiohttpSubscriptionServer(schema)    async def subscriptions(request):        ws = web.WebSocketResponse(protocols=('graphql-ws',))        await ws.prepare(request)        await subscription_server.handle(ws)        return ws    app = web.Application()    app.router.add_get('/subscriptions', subscriptions)    web.run_app(app, port=8000)You can see a full example here:https://github.com/graphql-python/graphql-ws/tree/master/examples/aiohttpwebsockets compatible servers~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Works with any framework that uses the websockets library for its websocketimplementation. For this example, plug in your Sanic server... code:: python    from graphql_ws.websockets_lib import WsLibSubscriptionServer    from . import schema    app = Sanic(__name__)    subscription_server = WsLibSubscriptionServer(schema)    @app.websocket('/subscriptions', subprotocols=['graphql-ws'])    async def subscriptions(request, ws):        await subscription_server.handle(ws)        return ws    app.run(host=&quot;0.0.0.0&quot;, port=8000)Django v2+~~~~~~~~~~Django Channels 2~~~~~~~~~~~~~~~~~Set up with Django Channels just takes three steps:1. Install the apps2. Set up your schema3. Configure the channels router applicationFirst ``pip install channels`` and it to your ``INSTALLED_APPS``. If youwant graphiQL, install the ``graphql_ws.django`` app before``graphene_django`` to serve a graphiQL template that will work withwebsockets:.. code:: python    INSTALLED_APPS = [        &quot;channels&quot;,        &quot;graphql_ws.django&quot;,        &quot;graphene_django&quot;,        # ...    ]Point to your schema in Django settings:.. code:: python    GRAPHENE = {        'SCHEMA': 'yourproject.schema.schema'    }Finally, you can set up channels routing yourself (maybe using``graphql_ws.django.routing.websocket_urlpatterns`` in your``URLRouter``), or you can just use one of the preset channelsapplications:.. code:: python    ASGI_APPLICATION = 'graphql_ws.django.routing.application'    # or    ASGI_APPLICATION = 'graphql_ws.django.routing.auth_application'Run ``./manage.py runserver`` and go to`http://localhost:8000/graphql &lt;http://localhost:8000/graphql&gt;`__ to test!Python 2  servers-----------------Create a subscribable schema like this:.. code:: python    import graphene    from rx import Observable    class Query(graphene.ObjectType):        hello = graphene.String()        @staticmethod        def resolve_hello(obj, info, **kwargs):            return &quot;world&quot;    class Subscription(graphene.ObjectType):        count_seconds = graphene.Float(up_to=graphene.Int())        async def resolve_count_seconds(root, info, up_to=5):            return Observable.interval(1000)\                             .map(lambda i: &quot;{0}&quot;.format(i))\                             .take_while(lambda i: int(i) &lt;= up_to)    schema = graphene.Schema(query=Query, subscription=Subscription)Gevent compatible servers~~~~~~~~~~~~~~~~~~~~~~~~~Then just plug into your Gevent server, for example, Flask:.. code:: python    from flask_sockets import Sockets    from graphql_ws.gevent import GeventSubscriptionServer    from schema import schema    subscription_server = GeventSubscriptionServer(schema)    app.app_protocol = lambda environ_path_info: 'graphql-ws'    @sockets.route('/subscriptions')    def echo_socket(ws):        subscription_server.handle(ws)        return []You can see a full example here:https://github.com/graphql-python/graphql-ws/tree/master/examples/flask_geventDjango v1.x~~~~~~~~~~~For Django v1.x and Django Channels v1.x, setup your schema in ``settings.py``.. code:: python    GRAPHENE = {        'SCHEMA': 'yourproject.schema.schema'    }Then ``pip install &quot;channels&lt;1&quot;`` and it to your django apps, adding thefollowing to your ``settings.py``.. code:: python    CHANNELS_WS_PROTOCOLS = [&quot;graphql-ws&quot;, ]    CHANNEL_LAYERS = {        &quot;default&quot;: {            &quot;BACKEND&quot;: &quot;asgiref.inmemory.ChannelLayer&quot;,            &quot;ROUTING&quot;: &quot;django_subscriptions.urls.channel_routing&quot;,        },    }And finally add the channel routes.. code:: python    from channels.routing import route_class    from graphql_ws.django_channels import GraphQLSubscriptionConsumer    channel_routing = [        route_class(GraphQLSubscriptionConsumer, path=r&quot;^/subscriptions&quot;),    ]You can see a full example here:https://github.com/graphql-python/graphql-ws/tree/master/examples/django_subscriptions</longdescription>
</pkgmetadata>