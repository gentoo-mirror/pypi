<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cg-pytest-reporterA Pytest reporter plugin for CodeGrade AutoTest v2.This plugin writes messages to CodeGrade AutoTest v2's structured output channel.For each test that was run a `unit-test` message is written as described inCodeGrade's documentation. When all tests have finished running, a final messageis written with the amount of points that were achieved in the test run.## Utility functionsThis plugin comes with a few utility functions to easily modify certain aspectsof each test case or test suite. All of these are decorators that you can applydirectly to your test functions or classes.### Test suite decoratorsThese decorators change properties of an entire test suite. In terms of Pytestthat is a single file containing test functions, or a single class within such afile.#### `suite_name`With the `suite_name` you can modify the name of a test suite that will bedisplayed in the AutoTest v2 UI.```pythonfrom cg_pytest_reporter import suite_name@suite_name('My Test Suite')class TestSuite:    def test_function():        assert True```Because it is not possible to decorate an entire module, it is possible tochange the name of the module-level suite by setting the `__cg_suite_name__`variable on the module.```python__cg_suite_name__ = 'My Test Suite'def test_function():    assert True```#### `suite_weight`Use the `suite_weight` decorator to change the weight of an entire suiterelative to other suites in your test run.```pythonfrom cg_pytest_reporter import suite_weight@suite_weight(2)class TestSuite:    def test_function():        assert True```Similar to the suite name, you can set the weight of the module-level suite withthe `__cg_suite_weight__` variable.```python__cg_suite_weight__ = 2def test_function():    assert True```### Test function decoratorsThese decorators modify the behaviour of a single test case.Although they work on the test case level, they can be applied to a classcontaining test functions. This works as if the decorator was applied to eachtest function individually, but each decorator can still be overridden onindividual test cases. It is mentioned on each of the decorators where thismight be useful.#### `name`With the `name` decorator you can change the name of a single test case.```pythonfrom cg_pytest_reporter import name@name('My Cool Test')def test_function():    assert True```#### `description`With the `description` decorator you can set a description for a single testcase. This can be useful if the name of the test function is not descriptiveenough.```pythonfrom cg_pytest_reporter import description@description('A somewhat longer description of what is being tested.')def test_function():    assert True```#### `weight`Change the weight of a single test function relative to other test functionswithin the same suite.```pythonfrom cg_pytest_reporter import weight@weight(2)def test_function():    assert True```This decorator can also be applied to a test class, in which case it will set adefault weight for all tests within that class which can still be overridden forindividual tests within that class. This can be useful for example if you wantmost tests within a class not to count towards the score.```pythonfrom cg_pytest_reporter import weight@weight(0)class TestClass:    # This test case will have a weight of 0 applied, and as such will not count    # towards the achieved score.    def test_function():        assert True    # This test case will still count towards the score with the default weight    # of 1.    @weight(1)    def test_something_else():        assert True```#### `reason`Change the reason of failure of the test case. This can be used to give studentsa hint where their code is likely to break.```pythonfrom cg_pytest_reporter import reasonfrom fibonacci import fibonacci@reason('Did you start counting at the correct index? (off-by-one error)')def test_fibonacci():    assert fibonacci(10) == 55```#### `hide_stdout`When a test fails, the `stdout` that was written while the test was running issent along with the result. With the `hide_stdout` decorator you can prevent the`stdout` from being sent.```pythonfrom cg_pytest_reporter import hide_stdout# The string &quot;Hello World!&quot; that was printed to `stdout` will not be sent along# with the results.@hide_stdoutdef test_failure():    print('Hello World!')    assert False```This decorator can also be applied to a test class to hide the `stdout` of eachtest case within it.```pythonfrom cg_pytest_reporter import hide_stdout@hide_stdoutclass TestClass:    def test_failure():        print('Hello World!')        assert False    def test_ok():        print('Hello World!')```#### `hide_stderr`This works the same as `hide_stdout` except that it will hide the `stderr`channel instead.```pythonimport sysfrom cg_pytest_reporter import hide_stderr# The string &quot;Hello World!&quot; that was printed to `stderr` will not be sent along# with the results.@hide_stderrdef test_failure():    print('Hello World!', file=sys.stderr)    assert False```This decorator can also be applied to a test class to hide the `stderr` of eachtest case within it.```pythonimport sysfrom cg_pytest_reporter import hide_stderr@hide_stderrclass TestClass:    def test_failure():        print('Hello World!', file=sys.stderr)        assert False    def test_ok():        print('Hello World!', file=sys.stderr)```#### `hide_output`A combined version of `hide_stdout` and `hide_stderr`.```pythonimport sysfrom cg_pytest_reporter import hide_output# The string &quot;Hello World!&quot; that was printed to `stdout` or `stderr` will not be# sent along with the results.@hide_outputdef test_failure():    print('Hello World!')    print('Hello World!', file=sys.stderr)    assert False```This decorator can also be applied to a test class to hide the output of eachtest case within it.```pythonimport sysfrom cg_pytest_reporter import hide_output@hide_outputclass TestClass:    def test_failure():        print('Hello World!', file=sys.stderr)        assert False    def test_ok():        print('Hello World!')```</longdescription>
</pkgmetadata>