<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. vim: tw=80 lbrdjango-otp==========.. image:: https://img.shields.io/pypi/v/django-otp?color=blue   :target: https://pypi.org/project/django-otp/   :alt: PyPI.. image:: https://img.shields.io/readthedocs/django-otp-official   :target: https://django-otp-official.readthedocs.io/   :alt: Documentation.. image:: https://img.shields.io/badge/github-django--otp-green   :target: https://github.com/django-otp/django-otp   :alt: SourceThis project makes it easy to add support for `one-time passwords&lt;http://en.wikipedia.org/wiki/One-time_password&gt;`_ (OTPs) to Django. It can beintegrated at various levels, depending on how much customization is required.It integrates with ``django.contrib.auth``, although it is not a Djangoauthentication backend. The primary target is developers wishing to incorporateOTPs into their Django projects as a form of `two-factor authentication&lt;http://en.wikipedia.org/wiki/Two-factor_authentication&gt;`_.Several simple OTP plugins are included and more are available separately. Thispackage also includes an implementation of OATH `HOTP&lt;http://tools.ietf.org/html/rfc4226&gt;`_ and `TOTP&lt;http://tools.ietf.org/html/rfc6238&gt;`_ for convenience, as these are standardOTP algorithms used by multiple plugins.If you're looking for a higher-level or more opinionated solution, you might beinterested in `django-two-factor-auth&lt;https://github.com/Bouke/django-two-factor-auth&gt;`_.Status------This project is stable and maintained, but is no longer actively used by theauthor and is not seeing much ongoing investment.Well-formed issues and pull requests are welcome, but please seeCONTRIBUTING.rst first. General questions and ideas should be directed to theDiscussions section; issues should be reserved for confirmed bugs... end-of-doc-introDevelopment-----------This project is built and managed with `hatch`_. If you don't have hatch, Irecommend installing it with `pipx`_: ``pipx install hatch``.``pyproject.toml`` defines several useful scripts for development and testing.The default environment includes all dev and test dependencies for quicklyrunning tests. The ``test`` environment defines the test matrix for running thefull validation suite. Everything is executed in the context of the Djangoproject in test/test\_project.As a quick primer, hatch scripts can be run with ``hatch run [&lt;env&gt;:]&lt;script&gt;``.To run linters and tests in the default environment, just run``hatch run check``. This should run tests with your default Python version andthe latest Django. Other scripts include:* **manage**: Run a management command via the test project. This can be used to  generate migrations.* **lint**: Run all linters.* **fix**: Run all fixers to address linting issues. This may not fix every  issue reported by lint.* **test**: Run all tests.* **check**: Run linters and tests.* **warn**: Run tests with all warnings enabled. This is especially useful for  seeing deprecation warnings in new versions of Django.* **cov**: Run tests and print a code coverage report.To run the full test matrix, run ``hatch run test:run``. You will need multiplespecific Python versions installed for this.You can clean up the hatch environments with ``hatch env prune``, for example toforce dependency updates.The project under ``test`` can be run as a simple interactive test environment.Run ``hatch run manage runserver`` and open it in a browser. This has animplementation of the login form and views with different combinations ofdecorators, which you can experiment with or use to test changes.Configuration~~~~~~~~~~~~~By default, the test project uses SQLite. Because SQLite doesn't support rowlocking, some concurrency tests will be skipped. To test against PostgreSQL, youcan add a local configuration file that points to your database.Configuration is taken from TOML files stored under ``test/config``. A configfile named ``env-&lt;env-name&gt;.toml`` will be automatically applied when runninginside a matching hatch environment. For example, ``env-default.toml`` appliesto the default development environment and ``env-test.toml`` applies to the testmatrix environments.With a wide-open PostgreSQL install, an ``env-test.toml`` might look like this:.. code-block:: toml   [database]   ENGINE = &quot;django.db.backends.postgresql&quot;   NAME = &quot;django-otp&quot;   USER = &quot;postgres&quot;For development, the config file can also be used to inject Django apps andmiddleware, or to override arbitrary Django settings. See``test/config/sample.toml`` for a full description.You can also force a specific config file by setting the environment variable``DJANGO_OTP_CONFIG`` to a path.The Future----------Once upon a time, everything was usernames and passwords. Or even in the case ofother authentication mechanisms, a user was either authenticated or not(anonymous in Django's terminology). Then there was two-factor authentication,which could simply be an implementation detail in a binary authentication state,but could also imply levels or degrees of authentication.These days, it's increasingly common to see sites with more nuancedauthentication state. A site might remember who you are forever—so you're notanonymous—but if you try to do anything private, you have to re-authenticate.You may be able to choose from among all of the authentication mechanisms youhave configured, or only from some of them. Specific mechanisms may be requiredfor specific actions, such as using your U2F device to access your U2F settings.In short, the world seems to be moving beyond the assumptions that originallyinformed Django's essential authentication design. If I were still investing inDjango generally, I would probably start a new multi-factor authenticationproject that would reflect these changes. It would incorporate the idea that auser may be authenticated by various combinations of mechanisms at any time andthat different combinations may be required to satisfy diverse authorizationrequirements across the site. It would most likely try to disentangleauthentication persistence from sessions, at least to some extent. Many siteswould not require all of this flexibility, but it would open up possibilitiesfor better experiences by not asking users for more than we require at anypoint.If anyone has a mind to take on a project like this, I'd be happy to offerwhatever advice or lessons learned that I can... _hatch: https://hatch.pypa.io/.. _pipx: https://pypa.github.io/pipx/</longdescription>
</pkgmetadata>