<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========edx-lint========| |CI|_A collection of code quality tools:- A few pylint plugins to check for quality issues pylint misses.- A command-line tool to generate config files like pylintrc from a master  file (part of edx_lint), and a repo-specific tweaks file.Using edx_lint==============The ``edx_lint`` command can generate config files from its own master file. Installthe package using ``pip``::    $ pip install edx-lintThe ``write`` sub-command will write a config file based on the contents of theedx_lint master file::    $ edx_lint write pylintrcThe file written contains a hash of its contents, to detect subsequent editing.``edx_lint`` will detect this when it next tries to write the file.  If editingis detected, the edited file will be moved aside so it can be compared to thenewly written file.Handling newly introduced lint violations-----------------------------------------New potential lint violations will be communicated with a major version bump.If you run into new lint violations during an upgrade of edx-lint, your options include:#. Fixing the violations immediately, or#. `Using lint-amnesty`_ and fixing at a later time, or#. `Customizing edx_lint`_ to permanently ignore the violations.Using lint-amnesty------------------The ``lint-amnesty`` command can be used to squash all existing pylint errorsin a codebase, so that from then the repository can maintain pylint-cleanliness.Install the package using ``pip``::    $ pip install edx-lintThe ``lint-amnesty`` command expects pylint errors in the ``--output-format=parseable``format::    $ pylint my.python.package --output-format=parseable | lint-amnestyThis will add comments for every existing pylint violation that look like::    # pylint: disable=some-error  # lint-amnestyIt will also remove any existing suppressions that pylint flags as being ``useless-suppressions``.Customizing edx_lint--------------------You can customize the resulting pylintrc file by creating a pylintrc_tweaks file in thecurrent directory before running the ``write`` sub-command.  It should contain only thesettings you want to override.**Note:** If your project is not a Django project, you'll want to disable the Django plugins withyour pylintrc_tweaks file::    [MASTER]    load-plugins = edx_lint.pylintDeveloping edx_lint===================To run the tests::    $ make requirements    $ make testTo manually test your pylint plugin, create a custom module and run pylint with a selected set of enabled message symbols. For instance::    pylint --load-plugins=edx_lint.pylint --disable=all --enable=feature-toggle-needs-doc path/to/my/custom/module.pyLicense-------The code in this repository is licensed under Apache 2.0.  Please see``LICENSE.txt`` for details.How To Contribute-----------------Contributions are very welcome.Please read `How To Contribute &lt;https://github.com/openedx/.github/blob/master/CONTRIBUTING.md&gt;`_ for details.Getting Help------------The Open edX project has resources for developer support on the `Getting Help`_ page... _Getting Help: https://open.edx.org/getting-help.. |CI| image:: https://github.com/openedx/edx-lint/workflows/Python%20CI/badge.svg?branch=master.. _CI: https://github.com/openedx/edx-lint/actions?query=workflow%3A%22Python+CI%22</longdescription>
</pkgmetadata>