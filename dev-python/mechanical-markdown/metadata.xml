<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Mechanical Markdown[![PyPI version](https://badge.fury.io/py/mechanical-markdown.svg)](https://badge.fury.io/py/mechanical-markdown)[![codecov](https://codecov.io/gh/dapr/mechanical-markdown/branch/main/graph/badge.svg)](https://codecov.io/gh/dapr/mechanical-markdown)If you are using markdown to create tutorials for your users, these markdown files will often be a series of shell commands that a user will copy and paste into their shell of choice, along with detailed text description of what each command is doing.If you are regularly releasing software and having to manually verify your tutorials by copy pasting commands into a terminal every time you create a release, this is the package for you.The mechanical-markdown package is a Python library and corresponding shell script that allow you to run annotated markdown tutorials in an automated fashion. It will execute your markdown tutorials and verify the output according to expected stdout/stderr that you can embed directly into your markdown tutorials. # Installing This package requires a working python3 environment. You can install it using pip:```bashpip install mechanical-markdown```This will install the Python module, and create the ```mm.py``` CLI script.# Quick StartCheck out the [examples](./examples) for some quick and easy examples.# Usage## CLIA command line utility called ```mm.py``` is included with this package.```bash% mm.py --helpusage: mm.py [-h] [--dry-run] [--manual] [--shell SHELL_CMD] markdown_fileAuto validate markdown documentationpositional arguments:  markdown_fileoptional arguments:  -h, --help            show this help message and exit  --dry-run, -d         Print out the commands we would run based on markdown_file  --manual, -m          If your markdown_file contains manual validation steps, pause for user input  --shell SHELL_CMD, -s SHELL_CMD                        Specify a different shell to use```## APICreating a MechanicalMarkdown instance from a string which contains a markdown document:```pythonfrom mechanical_markdown import MechanicalMarkdownmm = MechanicalMarkdown(markdown_string, shell=&quot;bash -c&quot;)```MechanicalMarkdown methods ```python# Returns a string describing the commands that would be runoutput = mm.dryrun()print(ouput)# Run the commands in the order they were specified and return a boolean for succes or failure# Also returns a report summarizing what was run and stdout/sterr for each commandsuccess, report = exectute_steps(manual, validate_links=False, link_retries=3)print(report)```# ContributingIssues and contributions are always welcome! Please make sure your submissions have appropriate unit tests (see [tests](tests/)).This project was created to support [dapr/quickstarts](https://github.com/dapr/quickstarts). We're sharing it with the hope that it might be as usefull for somebody else as it was for us.</longdescription>
</pkgmetadata>