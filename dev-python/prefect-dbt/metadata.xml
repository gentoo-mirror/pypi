<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Coordinate and use dbt in your dataflow with prefect-dbt&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;https://user-images.githubusercontent.com/15331990/215649781-be317381-9ff0-4f45-85d4-a30e80514554.png&quot; width=40% height=40%&gt;    &lt;br&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/prefect-dbt/&quot; alt=&quot;PyPI version&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/prefect-dbt?color=0052FF&amp;labelColor=090422&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/prefecthq/prefect-dbt/&quot; alt=&quot;Stars&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/stars/prefecthq/prefect-dbt?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/badge/prefect-dbt/&quot; alt=&quot;Downloads&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/dm/prefect-dbt?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/prefecthq/prefect-dbt/pulse&quot; alt=&quot;Activity&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/prefecthq/prefect-dbt?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;https://prefect-community.slack.com&quot; alt=&quot;Slack&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/slack-join_community-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=slack&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://discourse.prefect.io/&quot; alt=&quot;Discourse&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=discourse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;Visit the full docs [here](https://PrefectHQ.github.io/prefect-dbt) to see additional examples and the API reference.With prefect-dbt, you can easily trigger and monitor dbt Cloud jobs, execute dbt Core CLI commands, and incorporate other services, like Snowflake, into your dbt runs!Check out the examples below to get started!## Getting StartedBe sure to install [prefect-dbt](#installation) and [save a block](#saving-credentials-to-block) to run the examples below!### Integrate dbt Cloud jobs with Prefect flowsIf you have an existing dbt Cloud job, take advantage of the flow, `run_dbt_cloud_job`.This flow triggers the job and waits until the job run is finished.If certain nodes fail, `run_dbt_cloud_job` efficiently retries the specific, unsuccessful nodes.```pythonfrom prefect import flowfrom prefect_dbt.cloud import DbtCloudJobfrom prefect_dbt.cloud.jobs import run_dbt_cloud_job@flowdef run_dbt_job_flow():    result = run_dbt_cloud_job(        dbt_cloud_job=DbtCloudJob.load(&quot;my-block-name&quot;),        targeted_retries=5,    )    return resultrun_dbt_job_flow()```### Integrate dbt Core CLI commands with Prefect flows`prefect-dbt` also supports execution of dbt Core CLI commands.To get started, if you don't have a `DbtCoreOperation` block already saved,set the commands that you want to run; it can include a mix of dbt and non-dbt commands.Then, optionally specify the `project_dir`.If `profiles_dir` is unset, it will try to use the `DBT_PROFILES_DIR` environment variable.If that's also not set, it will use the default directory `$HOME/.dbt/`.#### Using an existing profileIf you already have an existing dbt profile, specify the `profiles_dir` where `profiles.yml` is located.```pythonfrom prefect import flowfrom prefect_dbt.cli.commands import DbtCoreOperation@flowdef trigger_dbt_flow() -&gt; str:    result = DbtCoreOperation(        commands=[&quot;pwd&quot;, &quot;dbt debug&quot;, &quot;dbt run&quot;],        project_dir=&quot;PROJECT-DIRECTORY-PLACEHOLDER&quot;,        profiles_dir=&quot;PROFILES-DIRECTORY-PLACEHOLDER&quot;    ).run()    return resulttrigger_dbt_flow()```#### Writing a new profileTo setup a new profile, first [save and load a DbtCliProfile block](#saving-credentials-to-block) and use it in `DbtCoreOperation`.Then, specify `profiles_dir` where `profiles.yml` will be written.```pythonfrom prefect import flowfrom prefect_dbt.cli import DbtCliProfile, DbtCoreOperation@flowdef trigger_dbt_flow():    dbt_cli_profile = DbtCliProfile.load(&quot;DBT-CORE-OPERATION-BLOCK-NAME-PLACEHOLDER&quot;)    with DbtCoreOperation(        commands=[&quot;dbt debug&quot;, &quot;dbt run&quot;],        project_dir=&quot;PROJECT-DIRECTORY-PLACEHOLDER&quot;,        profiles_dir=&quot;PROFILES-DIRECTORY-PLACEHOLDER&quot;,        dbt_cli_profile=dbt_cli_profile,    ) as dbt_operation:        dbt_process = dbt_operation.trigger()        # do other things before waiting for completion        dbt_process.wait_for_completion()        result = dbt_process.fetch_result()    return resulttrigger_dbt_flow()```## ResourcesIf you need help getting started with or using dbt, please consult the [dbt documentation](https://docs.getdbt.com/docs/building-a-dbt-project/documentation).### InstallationTo use `prefect-dbt` with dbt Cloud:```bashpip install prefect-dbt```To use dbt Core (CLI):```bashpip install &quot;prefect-dbt[cli]&quot;```To use dbt Core with Snowflake profiles:```bashpip install &quot;prefect-dbt[snowflake]&quot;```To use dbt Core with BigQuery profiles:```bashpip install &quot;prefect-dbt[bigquery]&quot;```To use dbt Core with Postgres profiles:```bashpip install &quot;prefect-dbt[postgres]&quot;```!!! warning &quot;Some dbt Core profiles require additional installation&quot;    According to dbt's [Databricks setup page](https://docs.getdbt.com/reference/warehouse-setups/databricks-setup), users must first install the adapter:    ```bash    pip install dbt-databricks    ```    Check out the [desired profile setup page](https://docs.getdbt.com/reference/profiles.yml) on the sidebar for others.Requires an installation of Python 3.7+.We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.These tasks are designed to work with Prefect 2. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).### Saving credentials to blockNote, to use the `load` method on Blocks, you must already have a block document [saved through code](https://orion-docs.prefect.io/concepts/blocks/#saving-blocks) or [saved through the UI](https://orion-docs.prefect.io/ui/blocks/).!!! info &quot;Registering blocks&quot;    Register blocks in this module to    [view and edit them](https://orion-docs.prefect.io/ui/blocks/)    on Prefect Cloud:    ```bash    prefect block register -m prefect_dbt    ```A list of available blocks in `prefect-dbt` and their setup instructions can be found [here](https://PrefectHQ.github.io/prefect-dbt/blocks_catalog).#### dbt CloudTo create a dbt Cloud credentials block:1. Head over to your [dbt Cloud profile](https://cloud.getdbt.com/settings/profile).2. Login to your dbt Cloud account.3. Scroll down to &quot;API&quot; or click &quot;API Access&quot; on the sidebar.4. Copy the API Key.5. Click Projects on the sidebar.6. Copy the account ID from the URL: `https://cloud.getdbt.com/settings/accounts/&lt;ACCOUNT_ID&gt;`.7. Create a short script, replacing the placeholders.```pythonfrom prefect_dbt.cloud import DbtCloudCredentialsDbtCloudCredentials(    api_key=&quot;API-KEY-PLACEHOLDER&quot;,    account_id=&quot;ACCOUNT-ID-PLACEHOLDER&quot;).save(&quot;CREDENTIALS-BLOCK-NAME-PLACEHOLDER&quot;)```Then, to create a dbt Cloud job block:1. Head over to your [dbt home page](https://cloud.getdbt.com/).2. On the top nav bar, click on Deploy -&gt; Jobs.3. Select a job.4. Copy the job ID from the URL: `https://cloud.getdbt.com/deploy/&lt;ACCOUNT_ID&gt;/projects/&lt;PROJECT_ID&gt;/jobs/&lt;JOB_ID&gt;`5. Create a short script, replacing the placeholders.```pythonfrom prefect_dbt.cloud import DbtCloudCredentials, DbtCloudJobdbt_cloud_credentials = DbtCloudCredentials.load(&quot;CREDENTIALS-BLOCK-NAME-PLACEHOLDER&quot;)dbt_cloud_job = DbtCloudJob(    dbt_cloud_credentials=dbt_cloud_credentials,    job_id=&quot;JOB-ID-PLACEHOLDER&quot;).save(&quot;JOB-BLOCK-NAME-PLACEHOLDER&quot;)```Congrats! You can now easily load the saved block, which holds your credentials:```pythonfrom prefect_dbt.cloud import DbtCloudJobDbtCloudJob.load(&quot;JOB-BLOCK-NAME-PLACEHOLDER&quot;)```#### dbt Core CLI!!! info &quot;Available `TargetConfigs` blocks&quot;    The following may vary slightly depending on the service you want to incorporate.    Visit the [API Reference](cli/configs/base) to see other built-in `TargetConfigs` blocks.    If the desired service profile is not available, check out the    [Examples Catalog](examples_catalog/#clicredentials-module) to see how you can    build one from the generic `TargetConfigs` class.To create dbt Core target config and profile blocks for BigQuery:1. Save and load a [`GcpCredentials` block](https://prefecthq.github.io/prefect-gcp/#saving-credentials-to-a-block).2. Determine the schema / dataset you want to use in BigQuery.3. Create a short script, replacing the placeholders.```pythonfrom prefect_gcp.credentials import GcpCredentialsfrom prefect_dbt.cli import BigQueryTargetConfigs, DbtCliProfilecredentials = GcpCredentials.load(&quot;CREDENTIALS-BLOCK-NAME-PLACEHOLDER&quot;)target_configs = BigQueryTargetConfigs(    schema=&quot;SCHEMA-NAME-PLACEHOLDER&quot;,  # also known as dataset    credentials=credentials,)target_configs.save(&quot;TARGET-CONFIGS-BLOCK-NAME-PLACEHOLDER&quot;)dbt_cli_profile = DbtCliProfile(    name=&quot;PROFILE-NAME-PLACEHOLDER&quot;,    target=&quot;TARGET-NAME-placeholder&quot;,    target_configs=target_configs,)dbt_cli_profile.save(&quot;DBT-CLI-PROFILE-BLOCK-NAME-PLACEHOLDER&quot;)```Then, to create a dbt Core operation block:1. Determine the dbt commands you want to run.2. Create a short script, replacing the placeholders.```pythonfrom prefect_dbt.cli import DbtCliProfile, DbtCoreOperationdbt_cli_profile = DbtCliProfile.load(&quot;DBT-CLI-PROFILE-BLOCK-NAME-PLACEHOLDER&quot;)dbt_core_operation = DbtCoreOperation(    commands=[&quot;DBT-CLI-COMMANDS-PLACEHOLDER&quot;],    dbt_cli_profile=dbt_cli_profile,    overwrite_profiles=True,)dbt_core_operation.save(&quot;DBT-CORE-OPERATION-BLOCK-NAME-PLACEHOLDER&quot;)```Congrats! You can now easily load the saved block, which holds your credentials:```pythonfrom prefect_dbt.cloud import DbtCoreOperationDbtCoreOperation.load(&quot;DBT-CORE-OPERATION-BLOCK-NAME-PLACEHOLDER&quot;)```### FeedbackIf you encounter any bugs while using `prefect-dbt`, feel free to open an issue in the [prefect-dbt](https://github.com/PrefectHQ/prefect-dbt) repository.If you have any questions or issues while using `prefect-dbt`, you can find help in either the [Prefect Discourse forum](https://discourse.prefect.io/) or the [Prefect Slack community](https://prefect.io/slack).Feel free to star or watch [`prefect-dbt`](https://github.com/PrefectHQ/prefect-dbt) for updates too!### ContributingIf you'd like to help contribute to fix an issue or add a feature to `prefect-dbt`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).Here are the steps:1. [Fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)2. [Clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)3. Install the repository and its dependencies:```pip install -e &quot;.[dev]&quot;```4. Make desired changes5. Add tests6. Insert an entry to [CHANGELOG.md](https://github.com/PrefectHQ/prefect-dbt/blob/main/CHANGELOG.md)7. Install `pre-commit` to perform quality checks prior to commit:```pre-commit install```8. `git commit`, `git push`, and create a pull request</longdescription>
</pkgmetadata>