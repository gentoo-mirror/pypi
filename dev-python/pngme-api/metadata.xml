<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://admin.pngme.com/logo.png&quot; alt=&quot;Pngme&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;/p&gt;&lt;h3 align=&quot;center&quot;&gt;Python API Client&lt;/h3&gt;This package exposes a synchronous and asynchronous client used to interact with Pngme's financial data APIs.## InstallInstall the latest version with:```bashpip3 install pngme-api```## Quick startCreate a `Client` instance using your API `token` found in the [Pngme Dashboard](https://admin.pngme.com):```pythonfrom pngme.api import Clienttoken = &quot;&quot; # your API tokenclient = Client(token)```&gt; If you're using [`asyncio`](https://docs.python.org/3/library/asyncio.html), you can import and use the `AsyncClient` instead. See [using with asyncio](#using-with-asyncio).We can list or search the available [`/users`](https://developers.api.pngme.com/reference/get_users):```pythonusers = client.users.get()users = client.users.get(search=&quot;2343456789012&quot;)```For a user of interest, we can get a list of the user's [`/institutions`](https://developers.api.pngme.com/reference/get_users-user-uuid-institutions):```pythonuser_uuid = &quot;33b6215d-3d75-4271-801c-6da27603a8be&quot;institutions = client.institutions.get(user_uuid=user_uuid)```Then for a given institution, we can get a list of the user's [`/transactions`](https://developers.api.pngme.com/reference/get_users-user-uuid-institutions-institution-id-transactions), [`/balances`](https://developers.api.pngme.com/reference/get_users-user-uuid-institutions-institution-id-balances), or [`/alerts`](https://developers.api.pngme.com/reference/get_users-user-uuid-institutions-institution-id-alerts):```pythonuser_uuid = &quot;33b6215d-3d75-4271-801c-6da27603a8be&quot;institution_id = &quot;zenithbank&quot;transactions = client.transactions.get(user_uuid=user_uuid, institution_id=institution_id)balances = client.balances.get(user_uuid=user_uuid, institution_id=institution_id)alerts = client.alerts.get(user_uuid=user_uuid, institution_id=institution_id)```## asyncioWe can make multiple requests concurrently using `asyncio` by creating a `Client` instance with your API `token` found in the [Pngme Dashboard](https://admin.pngme.com):```pythonfrom pngme.api import AsyncClienttoken = &quot;&quot; # your API tokenclient = AsyncClient(token)```Similar to the synchronous `Client`, we can list or search the available [`/users`](https://developers.api.pngme.com/reference/get_users):```pythonasync def get_users(client: AsyncClient):    users = await client.users.get()    return usersusers = asyncio.run(get_users(client))```This is helpful to concurrently execute multiple requests, such as fetching a user's transaction history across all accounts by iterating over institutions associated with a user:```pythonasync def get_transactions(client: AsyncClient, user_uuid: str):    # Find institutions where the user has one or more accounts    institutions = await client.institutions.get(user_uuid)    # Concurrently fetch transactions for all institutions    institution_ids = [institution.institution_id for institution in institutions]    coroutines = [        client.transactions.get(user_uuid, institution_id)        for institution_id in institution_ids    ]    transactions = await asyncio.gather(*coroutines)    # Associate transactions with the relevant institution_id    return dict(zip(institution_ids, transactions))user_uuid = &quot;33b6215d-3d75-4271-801c-6da27603a8be&quot;transactions = asyncio.run(get_transactions(client, user_uuid))```## Next steps* Browse the Pngme [Feature Library](https://github.com/pngme/pngme-feature-library) to see how data scientists integrate our APIs into decisioning workflows* Explore the definitions of each response field in the [API Docs](https://developers.api.pngme.com/reference/getting-started-with-your-api)</longdescription>
</pkgmetadata>