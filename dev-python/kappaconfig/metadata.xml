<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># KappaConfig[![publish](https://github.com/BenediktAlkin/KappaConfig/actions/workflows/publish.yaml/badge.svg)](https://github.com/BenediktAlkin/KappaConfig/actions/workflows/publish.yaml)KappaConfig is a configuration framework that allows you to define a full fletched configuration in yaml. Basic yaml andmany yaml configuration frameworks are restrictive in how a yaml is processed. KappaConfig provides a rich extension toparsing yamls into primitive types.With support for many use-cases out-of-the-box (which you can use, but don't have to):- reuse defined dict/list/primities via cross reference or templating- write python expressions in yaml- use yamls from multiple sources to compose one large yaml during program execution# InstallInstall: `pip install kappaconfig`Update to latest release: `pip install kappaconfig --upgrade`# Examples[This directory](https://github.com/BenediktAlkin/KappaConfig/tree/main/tests_integration/complex_yamls) containsvarious examples on how KappaConfig can be used to create flexible and compact yaml files.`&lt;file&gt;.yaml` is the compact representation of a yaml that is resolved to `&lt;file&gt;.result.yaml` during runtime andsubsequently used by the application. `&lt;file&gt;.yaml` abstracts away non-vital fields (for easy configuration design),while the resolved file (``&lt;file&gt;.result.yaml``) contains every detail for reproducability.TODO example## TODO titleLots of configurations consist of a small part that varies between different configurations and a large part that staysthe same or only few variables of it change. For example: when running machine learning experiments the core of adataset configuration (e.g. normalization, splits)stays largely the same but things like preprocessing might change between different experiments.```cifar10:  train:    split: train # use train split    normalization: range # normalize to range [-1;1]    filter: # use 45.000 samples for training      index_from: 0      index_to: 45000  valid:    split: train  # use train split (most datasets don't have a dedicated validation split)    normalization: range    filter: # use remaining 5.000 samples for validation      index_from: 45000      index_to: 50000  test:    split: test # use test split    normalization: range```TODO continue example# Usage```import kappaconfig as kc# load yaml from filekc_hp = kc.from_file_uri(&quot;hyperparams.yaml&quot;)# initialize default resolverresolver = kc.DefaultResolver()# resolve to primitive typeshp = resolver.resolve(hp)```# Examples## Reference existing nodesInspired by [OmegaConf](https://github.com/omry/omegaconf)/[Hydra](https://github.com/facebookresearch/hydra)nodes can reference other nodes.```# inputbatch_size: 64train_loader:  batch_size: ${batch_size}test_loader:  batch_size: ${batch_size}---# resolvedbatch_size: 64train_loader:  batch_size: 64test_loader:  batch_size: 64```## Write python code in yaml```# input seeds: ${eval:list(range(5))}---# resolvedseeds: [0, 1, 2, 3, 4] ```## Parameterize templates```# warmup_cosine_schedule.yamlvars: # vars is a special node that is removed after resolving a template  # default values  epochs: 100  warmup_factor: 0.05kind: sequential_schedulesub_schedules:- kind: warmup_schedule  epochs: ${eval:${vars.epochs}*${vars.warmup_factor}}- kind: cosine_schedule  epochs: ${eval:${vars.epochs}*${eval:1-${vars.warmup_factor}}}---# template_default_params.yamloptimizer:  kind: SGD  schedule:    template: ${yaml:warmup_cosine_schedule.yaml}---# template_default_params.yaml resolvedoptimizer:  kind: SGD  schedule:    kind: sequential_schedule    sub_schedules:    - kind: warmup_schedule      epochs: 5    - kind: cosine_schedule      epochs: 95---# template_custom_params.yamloptimizer:  kind: SGD  schedule:    template: ${yaml:warmup_cosine_schedule.yaml}    template.vars.epochs: 200---# template_custom_params.yaml resolvedoptimizer:  kind: SGD  schedule:    kind: sequential_schedule    sub_schedules:    - kind: warmup_schedule      epochs: 10    - kind: cosine_schedule      epochs: 190---```</longdescription>
</pkgmetadata>