<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ADCIRCPy### Python library for automating ADCIRC model runs.[![tests](https://github.com/noaa-ocs-modeling/adcircpy/workflows/tests/badge.svg)](https://github.com/noaa-ocs-modeling/adcircpy/actions?query=workflow%3Atests)[![build](https://github.com/noaa-ocs-modeling/adcircpy/workflows/build/badge.svg)](https://github.com/noaa-ocs-modeling/adcircpy/actions?query=workflow%3Abuild)[![codecov](https://codecov.io/gh/noaa-ocs-modeling/adcircpy/branch/main/graph/badge.svg?token=BQWB1QKJ3Q)](https://codecov.io/gh/noaa-ocs-modeling/adcircpy)[![version](https://img.shields.io/pypi/v/adcircpy)](https://pypi.org/project/adcircpy)[![license](https://img.shields.io/github/license/noaa-ocs-modeling/adcircpy)](https://opensource.org/licenses/gpl-license)[![style](https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/oitnb.svg?format=raw)](https://sourceforge.net/p/oitnb/code)[![documentation](https://readthedocs.org/projects/adcircpy/badge/?version=latest)](https://adcircpy.readthedocs.io/en/latest/?badge=latest)Documentation can be found at https://adcircpy.readthedocs.io## Organization / ResponsibilityADCIRCpy is currently maintained by the [Coastal Marine Modeling Branch (CMMB)](https://coastaloceanmodels.noaa.gov) of theOffice of Coast Survey (OCS), a part of the [National Oceanic and Atmospheric Administration (NOAA)](https://www.noaa.gov), anagency of the United States federal government. It was majorly developed by [@jreniel](https://github.com/jreniel).- Zachary Burnett (**lead**) - zachary.burnett@noaa.gov- Jaime Calzada - jrcalzada@vims.edu## InstallationPlease use a virtual environment with Python&gt;=3.6. You may use conda or the OS's Python to provide a virtual environment forthe application.You may install the application though pip. This will install the latest tagged version.&lt;!--pytest-codeblocks:skip--&gt;```bashpip install adcircpy```Alternatively, you many manually install the repo by cloning it and then running&lt;!--pytest-codeblocks:skip--&gt;```bashpip install .```## Usage### Command Line Interface (CLI)This program exposes a few commands available from the command line interface. You may pass the `-h` flag to any of thiscommands to explore their functionality.* `tide_gen`* `plot_mesh`* `tidal_run`* `best_track_run`* `best_track_file`* `plot_maxele`* `plot_fort61`* `fort63`#### examples##### generate tidal constituent templateYou can quickly create a tidal component table for your your mesh by executing the `tide_gen` command and by passing a mesh, astart date and number of run days as arguments. This functions sources data fromthe [HAMTIDE](https://icdc.cen.uni-hamburg.de/en/hamtide.html) database by default.&lt;!--pytest-codeblocks:skip--&gt;```bashtide_gen \    /path/to/your/fort.14 \    2021-02-26T00:00:00 \    15 \    --mesh-crs='epsg:4326'```##### run best-track run for Hurricane Sandy (AL182012)To create the ADCIRC input files includes both tides and storm data for Hurricane Sandy:&lt;!--pytest-codeblocks:skip--&gt;```bashbest_track_run \    /path/to/your/fort.14 \    Sandy2012 \    --fort13=/path/to/your/fort.13 \    --crs=EPSG:4326 \    --output-directory=/path/where/you/want/the/files \    --constituents=all \    --spinup-days=15.0 \    --elev=30. \    --mete=30. \    --velo=30. \    --skip-run```Note that the --crs flag is required due to the fort.14 not containing Coordinate Reference System information which isrequired for correct operation. [EPSG:4326](https://spatialreference.org/ref/epsg/wgs-84/) means that the mesh is in WGS84 (lat/lon). Note that the backlash represents &quot;continue on next line&quot; for the shell. You may write the command above on a singleline after excluding the backslashes.##### plot resultsThese are two examples for doing quick plots with the package. These are given here as illustrative examples only. There issupport for more file types than this examples, but the program does not yet support every output input/output file type. As auser, you are encouraged to explore what's available and suggest and contribute your improvements.&lt;!--pytest-codeblocks:skip--&gt;```bashplot_fort61 /path/to/fort.61.nc MSL --show --coops-only```&lt;!--pytest-codeblocks:skip--&gt;```bashplot_mesh /path/to/fort.14 --show-elements```### Python APISee the [examples](./examples) directory for usage examples.#### `example_1.py`The following code builds a simple ADCIRC run configuration by doing the following:1. reads a `fort.14` mesh file (specifically a test mesh for Shinnecock Inlet)2. adds tidal forcing to the mesh3. creates an `AdcircRun` driver object with the mesh, including start and end dates4. overrides default model options in the resulting `fort.15`5. runs ADCIRC if present, otherwise writes configuration to disk```pythonfrom datetime import datetime, timedeltafrom pathlib import Pathimport shutilfrom adcircpy import AdcircMesh, AdcircRun, Tidesfrom adcircpy.utilities import download_mesh, get_loggerLOGGER = get_logger(__name__)DATA_DIRECTORY = Path(__file__).parent.absolute() / 'data'INPUT_DIRECTORY = DATA_DIRECTORY / 'input' / 'shinnecock'OUTPUT_DIRECTORY = DATA_DIRECTORY / 'output' / 'example_1'MESH_DIRECTORY = INPUT_DIRECTORY / 'shinnecock'download_mesh(    url='https://www.dropbox.com/s/1wk91r67cacf132/NetCDF_shinnecock_inlet.tar.bz2?dl=1',    directory=MESH_DIRECTORY,    known_hash='99d764541983bfee60d4176af48ed803d427dea61243fa22d3f4003ebcec98f4',)# open mesh filemesh = AdcircMesh.open(MESH_DIRECTORY / 'fort.14', crs=4326)# initialize tidal forcing and constituentstidal_forcing = Tides()tidal_forcing.use_constituent('M2')tidal_forcing.use_constituent('N2')tidal_forcing.use_constituent('S2')tidal_forcing.use_constituent('K1')tidal_forcing.use_constituent('O1')mesh.add_forcing(tidal_forcing)# set simulation datesduration = timedelta(days=5)start_date = datetime(2015, 12, 14)end_date = start_date + duration# instantiate driver objectdriver = AdcircRun(mesh, start_date, end_date)# request outputsdriver.set_elevation_surface_output(sampling_rate=timedelta(minutes=30))driver.set_velocity_surface_output(sampling_rate=timedelta(minutes=30))# override default options so the resulting `fort.15` matches the original Shinnecock test case optionsdriver.timestep = 6.0driver.DRAMP = 2.0driver.TOUTGE = 3.8driver.TOUTGV = 3.8driver.smagorinsky = Falsedriver.horizontal_mixing_coefficient = 5.0driver.gwce_solution_scheme = 'semi-implicit-legacy'if shutil.which('padcirc') is not None:    driver.run(OUTPUT_DIRECTORY, overwrite=True)elif shutil.which('adcirc') is not None:    driver.run(OUTPUT_DIRECTORY, overwrite=True, nproc=1)else:    LOGGER.warning(        'ADCIRC binaries were not found in PATH. '        'ADCIRC will not run. Writing files to disk...'    )    driver.write(OUTPUT_DIRECTORY, overwrite=True)```#### `example_2.py`The following code is similar to `example_1.py`, above, except it adds a static Manning's N coefficient to the mesh.```pythonfrom datetime import datetime, timedeltafrom pathlib import Pathimport shutilimport numpyfrom adcircpy import AdcircMesh, AdcircRun, Tidesfrom adcircpy.utilities import download_mesh, get_loggerLOGGER = get_logger(__name__)DATA_DIRECTORY = Path(__file__).parent.absolute() / 'data'INPUT_DIRECTORY = DATA_DIRECTORY / 'input'OUTPUT_DIRECTORY = DATA_DIRECTORY / 'output' / 'example_2'MESH_DIRECTORY = INPUT_DIRECTORY / 'shinnecock'download_mesh(    url='https://www.dropbox.com/s/1wk91r67cacf132/NetCDF_shinnecock_inlet.tar.bz2?dl=1',    directory=MESH_DIRECTORY,    known_hash='99d764541983bfee60d4176af48ed803d427dea61243fa22d3f4003ebcec98f4',)# open mesh filemesh = AdcircMesh.open(MESH_DIRECTORY / 'fort.14', crs=4326)# generate tau0 factormesh.generate_tau0()# also add Manning's N to the domain (constant for this example)mesh.mannings_n_at_sea_floor = numpy.full(mesh.values.shape, 0.025)# initialize tidal forcing and constituentstidal_forcing = Tides()tidal_forcing.use_constituent('M2')tidal_forcing.use_constituent('N2')tidal_forcing.use_constituent('S2')tidal_forcing.use_constituent('K1')tidal_forcing.use_constituent('O1')mesh.add_forcing(tidal_forcing)# set simulation datesspinup_time = timedelta(days=2)duration = timedelta(days=3)start_date = datetime(2015, 12, 14) + spinup_timeend_date = start_date + duration# instantiate driver objectdriver = AdcircRun(mesh, start_date, end_date, spinup_time)# request outputsdriver.set_elevation_surface_output(sampling_rate=timedelta(minutes=30))driver.set_velocity_surface_output(sampling_rate=timedelta(minutes=30))# override default optionsdriver.timestep = 4.0if shutil.which('padcirc') is not None:    driver.run(OUTPUT_DIRECTORY, overwrite=True)elif shutil.which('adcirc') is not None:    driver.run(OUTPUT_DIRECTORY, overwrite=True, nproc=1)else:    LOGGER.warning(        'ADCIRC binaries were not found in PATH. '        'ADCIRC will not run. Writing files to disk...'    )    driver.write(OUTPUT_DIRECTORY, overwrite=True)```#### `example_3.py`The following code is similar to `example_1.py`, above, except it adds HURDAT BestTrack wind forcing and also builds a Slurmjob script for submission to a job manager.```pythonfrom datetime import datetime, timedeltafrom pathlib import Pathfrom adcircpy import AdcircMesh, AdcircRun, Tidesfrom adcircpy.forcing.winds import BestTrackForcingfrom adcircpy.server import SlurmConfigfrom adcircpy.utilities import download_meshDATA_DIRECTORY = Path(__file__).parent.absolute() / 'data'INPUT_DIRECTORY = DATA_DIRECTORY / 'input'OUTPUT_DIRECTORY = DATA_DIRECTORY / 'output' / 'example_3'MESH_DIRECTORY = INPUT_DIRECTORY / 'shinnecock'download_mesh(    url='https://www.dropbox.com/s/1wk91r67cacf132/NetCDF_shinnecock_inlet.tar.bz2?dl=1',    directory=MESH_DIRECTORY,    known_hash='99d764541983bfee60d4176af48ed803d427dea61243fa22d3f4003ebcec98f4',)# open mesh filemesh = AdcircMesh.open(MESH_DIRECTORY / 'fort.14', crs=4326)# initialize tidal forcing and constituentstidal_forcing = Tides()tidal_forcing.use_all()mesh.add_forcing(tidal_forcing)# initialize wind forcingwind_forcing = BestTrackForcing('Sandy2012')mesh.add_forcing(wind_forcing)# initialize Slurm configurationslurm = SlurmConfig(    account='account',    ntasks=1000,    run_name='adcircpy/examples/example_3.py',    partition='partition',    walltime=timedelta(hours=8),    mail_type='all',    mail_user='example@email.gov',    log_filename='example_3.log',    modules=['intel/2020', 'impi/2020', 'netcdf/4.7.2-parallel'],    path_prefix='$HOME/adcirc/build',)# set simulation datesspinup_time = timedelta(days=15)duration = timedelta(days=3)start_date = datetime(2012, 10, 21, 18)end_date = start_date + duration# instantiate driver objectdriver = AdcircRun(mesh, start_date, end_date, spinup_time, server_config=slurm)# write driver state to diskdriver.write(OUTPUT_DIRECTORY, overwrite=True)```#### `example_4.py`The following code is similar to `example_3.py`, above, except it uses ATMESH wind forcing and WW3DATA wave forcing.```pythonfrom datetime import datetime, timedeltafrom pathlib import Pathfrom adcircpy import AdcircMesh, AdcircRun, Tidesfrom adcircpy.forcing.waves.ww3 import WaveWatch3DataForcingfrom adcircpy.forcing.winds.atmesh import AtmosphericMeshForcingfrom adcircpy.server import SlurmConfigfrom adcircpy.utilities import download_meshDATA_DIRECTORY = Path(__file__).parent.absolute() / 'data'INPUT_DIRECTORY = DATA_DIRECTORY / 'input'OUTPUT_DIRECTORY = DATA_DIRECTORY / 'output' / 'example_4'MESH_DIRECTORY = INPUT_DIRECTORY / 'shinnecock'download_mesh(    url='https://www.dropbox.com/s/1wk91r67cacf132/NetCDF_shinnecock_inlet.tar.bz2?dl=1',    directory=MESH_DIRECTORY,    known_hash='99d764541983bfee60d4176af48ed803d427dea61243fa22d3f4003ebcec98f4',)# open mesh filemesh = AdcircMesh.open(MESH_DIRECTORY / 'fort.14', crs=4326)# initialize tidal forcing and constituentstidal_forcing = Tides()tidal_forcing.use_all()mesh.add_forcing(tidal_forcing)# initialize atmospheric mesh forcings (for NUOPC coupling)wind_forcing = AtmosphericMeshForcing(    filename='Wind_HWRF_SANDY_Nov2018_ExtendedSmoothT.nc', nws=17, interval_seconds=3600,)mesh.add_forcing(wind_forcing)# initialize wave mesh forcings (for NUOPC coupling)wave_forcing = WaveWatch3DataForcing(    filename='ww3.HWRF.NOV2018.2012_sxy.nc', nrs=5, interval_seconds=3600,)mesh.add_forcing(wave_forcing)# initialize Slurm configurationslurm = SlurmConfig(    account='account',    ntasks=1000,    run_name='adcircpy/examples/example_4.py',    partition='partition',    walltime=timedelta(hours=8),    mail_type='all',    mail_user='example@email.gov',    log_filename='example_4.log',    modules=['intel/2020', 'impi/2020', 'netcdf/4.7.2-parallel'],    path_prefix='$HOME/adcirc/build',)# instantiate driver objectdriver = AdcircRun(    mesh=mesh,    start_date=datetime.now(),    end_date=timedelta(days=7),    spinup_time=timedelta(days=5),    server_config=slurm,)# write driver state to diskdriver.write(OUTPUT_DIRECTORY, overwrite=True)```## Citation```Calzada, J., Burnett, Z., Moghimi, S., Myers, E., &amp; Pe’eri, S. (2021). ADCIRCpy: A Python API to generate ADCIRC model input files (Technical Memorandum No. 41; NOAA NOS OCS). National Oceanic and Atmospheric Administation.``````bibtex@techreport{calzadaADCIRCpyPythonAPI2021,    type = {Technical {{Memorandum}}},    title = {{{ADCIRCpy}}: A {{Python API}} to Generate {{ADCIRC}} Model Input Files},    author = {Calzada, Jaime and Burnett, Zachary and Moghimi, Saeed and Myers, Edward and Pe'eri, Shachak},    year = {2021},    month = dec,    number = {41},    institution = {{National Oceanic and Atmospheric Administation}},    abstract = {The Advanced Circulation Model (ADCIRC) is a Fortran program used for modeling ocean circulation due to tides, surface waves and atmospheric forcings. However, the input formats and configuration are inflexible and not straight forward for operational implementation, making rapid iteration of model testing, ensemble configuration, and model coupling complicated. Here, we introduce a flexible abstraction of model inputs and outputs written in Python, called ADCIRCpy, that provides a simpler user interface for automatically generating ADCIRC configuration to a variety of inputs and model scenarios. This documentation outlines 1. the needs for such an abstraction, 2. the peculiarities and challenges with the ADCIRC model that necessitate custom logic, and 3. methodologies for generalizing user input in such a way as to make generating model configurations consistent, fast, and efficient.}}```## AcknowledgementsThe majority of ADCIRCpy was written by Jaime Calzada [@jreniel](https://github.com/jreniel).</longdescription>
</pkgmetadata>