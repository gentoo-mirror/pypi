<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>DjangoQL========.. image:: https://github.com/ivelum/djangoql/workflows/Tests/badge.svg        :target: https://github.com/ivelum/djangoql/actions?query=workflow%3ATestsAdvanced search language for Django, with auto-completion. Supports logicaloperators, parenthesis, table joins, and works with any Django model. Tested onPython 2.7, 3.5 - 3.10, Django 1.8 - 4.0. The auto-completion feature has beentested in Chrome, Firefox, Safari, IE9+.See a video: `DjangoQL demo &lt;https://youtu.be/oKVff4dHZB8&gt;`_.. image:: https://raw.githubusercontent.com/ivelum/djangoql/master/djangoql/static/djangoql/img/completion_example_scaled.pngDjangoQL is used by:|logo1| |logo2| |logo3| |logo4|.. |logo1| image:: https://raw.githubusercontent.com/ivelum/djangoql/master/assets/redhat.svg   :width: 22%   :target: https://www.redhat.com.. |logo2| image:: https://raw.githubusercontent.com/ivelum/djangoql/master/assets/teamplify.svg   :width: 22%   :target: https://teamplify.com.. |logo3| image:: https://raw.githubusercontent.com/ivelum/djangoql/master/assets/police1.svg   :width: 22%   :target: https://www.police1.com.. |logo4| image:: https://raw.githubusercontent.com/ivelum/djangoql/master/assets/15-five.svg   :width: 22%   :target: https://www.15five.comIs your project using DjangoQL? Please submit a PR and let us know!Contents--------* `Installation`_* `Add it to your Django admin`_* `Using DjangoQL with the standard Django admin search`_* `Language reference`_* `DjangoQL Schema`_* `Custom search fields`_* `Can I use it outside of Django admin?`_* `Using completion widget outside of Django admin`_Installation------------.. code:: shell    $ pip install djangoqlAdd ``'djangoql'`` to ``INSTALLED_APPS`` in your ``settings.py``:.. code:: python    INSTALLED_APPS = [        ...        'djangoql',        ...    ]Add it to your Django admin---------------------------Adding ``DjangoQLSearchMixin`` your model admin will replace the standardDjango search functionality with DjangoQL search. Example:.. code:: python    from django.contrib import admin    from djangoql.admin import DjangoQLSearchMixin    from .models import Book    @admin.register(Book)    class BookAdmin(DjangoQLSearchMixin, admin.ModelAdmin):        passUsing DjangoQL with the standard Django admin search----------------------------------------------------DjangoQL will recognize if you have defined ``search_fields`` in your ModelAdminclass, and doing so will allow you to choose between an advanced search withDjangoQL and a standard Django search (as specified by search fields). Example:.. code:: python    @admin.register(Book)    class BookAdmin(DjangoQLSearchMixin, admin.ModelAdmin):        search_fields = ('title', 'author__name')For the example above, a checkbox that controls search mode will appear nearthe search input. If the checkbox is on, then DjanqoQL search is used. There isalso an option that controls if that checkbox is enabled by default -``djangoql_completion_enabled_by_default`` (set to ``True`` by default):.. code:: python    @admin.register(Book)    class BookAdmin(DjangoQLSearchMixin, admin.ModelAdmin):        search_fields = ('title', 'author__name')        djangoql_completion_enabled_by_default = FalseIf you don't want two search modes, simply remove ``search_fields`` from yourModelAdmin class.Language reference------------------DjangoQL is shipped with comprehensive Syntax Help, which can be found in Djangoadmin (see the Syntax Help link in auto-completion popup). Here's a quicksummary:DjangoQL's syntax resembles Python's, with some minordifferences. Basically you just reference model fields as you wouldin Python code, then apply comparison and logical operators andparenthesis. DjangoQL is case-sensitive.- model fields: exactly as they are defined in Python code. Access  nested properties via ``.``, for example ``author.last_name``;- strings must be double-quoted. Single quotes are not supported.  To escape a double quote use ``\&quot;``;- boolean and null values: ``True``, ``False``, ``None``. Please note  that they can be combined only with equality operators, so you can  write ``published = False or date_published = None``, but  ``published &gt; False`` will cause an error;- logical operators: ``and``, ``or``;- comparison operators: ``=``, ``!=``, ``&lt;``, ``&lt;=``, ``&gt;``, ``&gt;=``  - work as you expect;- string-specific comparison operators: ``startswith``, ``not startswith``,  ``endswith``, ``not endswith`` - work as you expect. Test whether or not a  string contains a substring: ``~`` and ``!~`` (translated into  ``__icontains`` under the hood).  Example: ``name endswith &quot;peace&quot; or author.last_name ~ &quot;tolstoy&quot;``;- date-specific comparison operators, compare by date part: ``~`` and ``!~``.  Example: ``date_published ~ &quot;2021-11&quot;`` - find books published in Nov, 2021;- test a value vs. list: ``in``, ``not in``. Example:  ``pk in (2, 3)``.DjangoQL Schema---------------Schema defines limitations - what you can do with a DjangoQL query.If you don't specify any schema, DjangoQL will provide a defaultschema for you. This will walk recursively through all model fields andrelations and include everything it finds in the schema, sousers would be able to search through everything. Sometimesthis is not what you want, either due to DB performance or securityconcerns. If you'd like to limit search models or fields, you shoulddefine a schema. Here's an example:.. code:: python    class UserQLSchema(DjangoQLSchema):        exclude = (Book,)        suggest_options = {            Group: ['name'],        }        def get_fields(self, model):            if model == Group:                return ['name']            return super(UserQLSchema, self).get_fields(model)    @admin.register(User)    class CustomUserAdmin(DjangoQLSearchMixin, UserAdmin):        djangoql_schema = UserQLSchemaIn the example above we created a schema that does 3 things:- excludes the Book model from search via ``exclude`` option. Instead of  ``exclude`` you may also use ``include``, which limits a search to  listed models only;- limits available search fields for Group model to only the ``name`` field  , in the ``.get_fields()`` method;- enables completion options for Group names via ``suggest_options``.An important note about ``suggest_options``: it looks for the ``choices`` modelfield parameter first, and if it's not specified - it will synchronously pullall values for given model fields, so you should avoid large querysets there.If you'd like to define custom suggestion options, see below.Custom search fields--------------------Deeper search customization can be achieved with custom search fields. Customsearch fields can be used to search by annotations, define custom suggestionoptions, or define fully custom search logic. In ``djangoql.schema``, DjangoQLdefines the following base field classes that you maysubclass to define your own behavior:* ``IntField``* ``FloatField``* ``StrField``* ``BoolField``* ``DateField``* ``DateTimeField``* ``RelationField``Here are examples for common use cases:**Search by queryset annotations:**.. code:: python    from djangoql.schema import DjangoQLSchema, IntField    class UserQLSchema(DjangoQLSchema):        def get_fields(self, model):            fields = super(UserQLSchema, self).get_fields(model)            if model == User:                fields += [IntField(name='groups_count')]            return fields    @admin.register(User)    class CustomUserAdmin(DjangoQLSearchMixin, UserAdmin):        djangoql_schema = UserQLSchema        def get_queryset(self, request):            qs = super(CustomUserAdmin, self).get_queryset(request)            return qs.annotate(groups_count=Count('groups'))Let's take a closer look at what's happening in the example above. First, weadd ``groups_count`` annotation to the queryset that is used by Django adminin the ``CustomUserAdmin.get_queryset()`` method. It would contain the numberof groups a user belongs to. As our queryset now pulls this column, we canfilter by it. It just needs to be included in the schema. In``UserQLSchema.get_fields()`` we define a custom integer search field for the``User`` model. Its name should match the name of the column in our queryset.**Custom suggestion options**.. code:: python    from djangoql.schema import DjangoQLSchema, StrField    class GroupNameField(StrField):        model = Group        name = 'name'        suggest_options = True        def get_options(self, search):            return super(GroupNameField, self)\                .get_options(search)\                .annotate(users_count=Count('user'))\                .order_by('-users_count')    class UserQLSchema(DjangoQLSchema):        def get_fields(self, model):            if model == Group:                return ['id', GroupNameField()]            return super(UserQLSchema, self).get_fields(model)    @admin.register(User)    class CustomUserAdmin(DjangoQLSearchMixin, UserAdmin):        djangoql_schema = UserQLSchemaIn this example we've defined a custom GroupNameField that sorts suggestionsfor group names by popularity (no. of users in a group) instead of defaultalphabetical sorting.**Custom search lookup**DjangoQL base fields provide two basic methods that you can override tosubstitute either search column, search value, or both -``.get_lookup_name()`` and ``.get_lookup_value(value)``:.. code:: python    class UserDateJoinedYear(IntField):        name = 'date_joined_year'        def get_lookup_name(self):            return 'date_joined__year'    class UserQLSchema(DjangoQLSchema):        def get_fields(self, model):            fields = super(UserQLSchema, self).get_fields(model)            if model == User:                fields += [UserDateJoinedYear()]            return fields    @admin.register(User)    class CustomUserAdmin(DjangoQLSearchMixin, UserAdmin):        djangoql_schema = UserQLSchemaIn this example we've defined the custom ``date_joined_year`` search field forusers, and used the built-in Django ``__year`` filter option in``.get_lookup_name()`` to filter by date year only. Similarly you can use``.get_lookup_value(value)`` hook to modify a search value before it's used inthe filter.**Fully custom search lookup**``.get_lookup_name()`` and ``.get_lookup_value(value)`` hooks cover manysimple use cases, but sometimes they're not enough and you want a fully customsearch logic. In such cases you can override main ``.get_lookup()`` method ofa field. Example below demonstrates User ``age`` search:.. code:: python    from djangoql.schema import DjangoQLSchema, IntField    class UserAgeField(IntField):        &quot;&quot;&quot;        Search by given number of full years        &quot;&quot;&quot;        model = User        name = 'age'        def get_lookup_name(self):            &quot;&quot;&quot;            We'll be doing comparisons vs. this model field            &quot;&quot;&quot;            return 'date_joined'        def get_lookup(self, path, operator, value):            &quot;&quot;&quot;            The lookup should support with all operators compatible with IntField            &quot;&quot;&quot;            if operator == 'in':                result = None                for year in value:                    condition = self.get_lookup(path, '=', year)                    result = condition if result is None else result | condition                return result            elif operator == 'not in':                result = None                for year in value:                    condition = self.get_lookup(path, '!=', year)                    result = condition if result is None else result &amp; condition                return result            value = self.get_lookup_value(value)            search_field = '__'.join(path + [self.get_lookup_name()])            year_start = self.years_ago(value + 1)            year_end = self.years_ago(value)            if operator == '=':                return (                    Q(**{'%s__gt' % search_field: year_start}) &amp;                    Q(**{'%s__lte' % search_field: year_end})                )            elif operator == '!=':                return (                    Q(**{'%s__lte' % search_field: year_start}) |                    Q(**{'%s__gt' % search_field: year_end})                )            elif operator == '&gt;':                return Q(**{'%s__lt' % search_field: year_start})            elif operator == '&gt;=':                return Q(**{'%s__lte' % search_field: year_end})            elif operator == '&lt;':                return Q(**{'%s__gt' % search_field: year_end})            elif operator == '&lt;=':                return Q(**{'%s__gte' % search_field: year_start})        def years_ago(self, n):            timestamp = now()            try:                return timestamp.replace(year=timestamp.year - n)            except ValueError:                # February 29                return timestamp.replace(month=2, day=28, year=timestamp.year - n)    class UserQLSchema(DjangoQLSchema):        def get_fields(self, model):            fields = super(UserQLSchema, self).get_fields(model)            if model == User:                fields += [UserAgeField()]            return fields    @admin.register(User)    class CustomUserAdmin(DjangoQLSearchMixin, UserAdmin):        djangoql_schema = UserQLSchemaCan I use it outside of Django admin?-------------------------------------Sure. You can add DjangoQL search functionality to any Django model using``DjangoQLQuerySet``:.. code:: python    from django.db import models    from djangoql.queryset import DjangoQLQuerySet    class Book(models.Model):        name = models.CharField(max_length=255)        author = models.ForeignKey('auth.User')        objects = DjangoQLQuerySet.as_manager()With the example above you can perform a search like this:.. code:: python    qs = Book.objects.djangoql(        'name ~ &quot;war&quot; and author.last_name = &quot;Tolstoy&quot;'    )It returns a normal queryset, so you can extend it and reuse ifnecessary. The following code works fine:.. code:: python    print(qs.count())Alternatively you can add DjangoQL search to any existing queryset,even if it's not an instance of DjangoQLQuerySet:.. code:: python    from django.contrib.auth.models import User    from djangoql.queryset import apply_search    qs = User.objects.all()    qs = apply_search(qs, 'groups = None')    print(qs.exists())Schemas can be specified either as a queryset option, or passedto ``.djangoql()`` queryset method directly:.. code:: python    class BookQuerySet(DjangoQLQuerySet):        djangoql_schema = BookSchema    class Book(models.Model):        ...        objects = BookQuerySet.as_manager()    # Now, Book.objects.djangoql() will use BookSchema by default:    Book.objects.djangoql('name ~ &quot;Peace&quot;)  # uses BookSchema    # Overriding default queryset schema with AnotherSchema:    Book.objects.djangoql('name ~ &quot;Peace&quot;, schema=AnotherSchema)You can also provide schema as an option for ``apply_search()``.. code:: python    qs = User.objects.all()    qs = apply_search(qs, 'groups = None', schema=CustomSchema)Using completion widget outside of Django admin-----------------------------------------------The completion widget is not tightly coupled to Django admin, so you can easilyuse it outside of the admin if you want. The widget is`available on npm &lt;https://www.npmjs.com/package/djangoql-completion&gt;`_ as astandalone package.See the source code and the docs in the`djangoql-completion &lt;https://github.com/ivelum/djangoql-completion&gt;`_repo on GitHub.The completion widget is also bundled with the`djangoql &lt;https://pypi.org/project/djangoql/&gt;`_ Python package on PyPI. Ifyou're not using Webpack or another JavaScript bundler, you can use thepre-built version that ships with the Python package. Here is an example:Template code, ``completion_demo.html``:.. code:: html    {% load static %}    &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;title&gt;DjangoQL completion demo&lt;/title&gt;      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{% static 'djangoql/css/completion.css' %}&quot; /&gt;      &lt;script src=&quot;{% static 'djangoql/js/completion.js' %}&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;      &lt;form action=&quot;&quot; method=&quot;get&quot;&gt;        &lt;p style=&quot;color: red&quot;&gt;{{ error }}&lt;/p&gt;        &lt;textarea name=&quot;q&quot; cols=&quot;40&quot; rows=&quot;1&quot; autofocus&gt;{{ q }}&lt;/textarea&gt;      &lt;/form&gt;      &lt;ul&gt;      {% for item in search_results %}        &lt;li&gt;{{ item }}&lt;/li&gt;      {% endfor %}      &lt;/ul&gt;      &lt;script&gt;        DjangoQL.DOMReady(function () {          new DjangoQL({            // either JS object with a result of DjangoQLSchema(MyModel).as_dict(),            // or an URL from which this information could be loaded asynchronously            introspections: {{ introspections|safe }},            // css selector for query input or HTMLElement object.            // It should be a textarea            selector: 'textarea[name=q]',            // optional, you can provide URL for Syntax Help link here.            // If not specified, Syntax Help link will be hidden.            syntaxHelp: null,            // optional, enable textarea auto-resize feature. If enabled,            // textarea will automatically grow its height when entered text            // doesn't fit, and shrink back when text is removed. The purpose            // of this is to see full search query without scrolling, could be            // helpful for really long queries.            autoResize: true          });        });      &lt;/script&gt;    &lt;/body&gt;    &lt;/html&gt;And in your ``views.py``:.. code:: python    import json    from django.contrib.auth.models import Group, User    from django.shortcuts import render_to_response    from django.views.decorators.http import require_GET    from djangoql.exceptions import DjangoQLError    from djangoql.queryset import apply_search    from djangoql.schema import DjangoQLSchema    from djangoql.serializers import DjangoQLSchemaSerializer    class UserQLSchema(DjangoQLSchema):        include = (User, Group)        suggest_options = {            Group: ['name'],        }    @require_GET    def completion_demo(request):        q = request.GET.get('q', '')        error = ''        query = User.objects.all().order_by('username')        if q:            try:                query = apply_search(query, q, schema=UserQLSchema)            except DjangoQLError as e:                query = query.none()                error = str(e)        # You may want to use SuggestionsAPISerializer and an additional API        # endpoint (see in djangoql.views) for asynchronous suggestions loading        introspections = DjangoQLSchemaSerializer().serialize(          UserQLSchema(query.model),        )        return render_to_response('completion_demo.html', {            'q': q,            'error': error,            'search_results': query,            'introspections': json.dumps(introspections),        })License-------MIT</longdescription>
</pkgmetadata>