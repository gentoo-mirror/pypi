<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![logo](hek-logo.png)](https://pepy.tech/project/hek)# Hek[![Downloads](https://pepy.tech/badge/hek)](https://pepy.tech/project/hek)[![LICENSE](https://img.shields.io/badge/LICENSE-MIT-g)](https://pepy.tech/project/hek)[![Python](https://img.shields.io/badge/Python-3.9-blue)](https://pepy.tech/project/hek)###### A python library mostly used for pentesting and automation some tasks.###### Hek library is not near to be completed It's under constant updates. ### Installation.```bashpip install hek```# System.#### Get device current username.```pythonimport hek# get device current usernameuser = hek.system.username()# print usernameprint(user)```#### Request device os name.```pythonimport hekos_name = hek.system.oname()print(os_name)```#### Download content.###### You could not add any path and It'll extract the file name from the url.```pythonfrom hek import system# new file pathpath = &quot;dog.jpg&quot;# file urlurl = &quot;https://example/dog_picure.jpg&quot;# download contentresult = system.download_content(url=url, path=path)# print resultprint(result)```## System - process.#### kill process###### You could change the name argument to process pid like (pid=&quot;1234&quot;), also you could disable kill with force using force=False.```pythonimport hek# process namename = &quot;chrome.exe&quot;# kill processres = hek.system.process.kill_process(name=name)print(res)```### Get process PID by process name.```pythonfrom hek import system# targeted process name\username = &quot;chrome.exe&quot;# will return process PID\IDname = system.process.getnamebypid(name=pid)# print process PID\IDprint(name)```### Get process name by PID.```pythonfrom hek import system# targeted process PID\idpid = &quot;2779&quot;# will return process namename = system.process.getnamebypid(pid=pid)# print process nameprint(name)```# Proxy usages.#### Doing http request using tor proxy###### With this way you can do all kinds of requests like post/get/options, before using the function you need to setup and run tor bundle you could download it from tor official site```pythonimport hek# request tor sessiontor_session = hek.tor.get_session()# tor get requestresult = tor_session.get(&quot;http://httpbin.org/ip&quot;).text# print resultprint(result)```##### You may add your host/proxy manually using this way, Identity is your proxy location contain some other info. ```pythonimport hek# adding host manuallyhost = &quot;127.0.0.1:9050&quot;# request sessionsession = hek.tor.get_session(host=host)# request your proxy identity..identity = session.identity(host=host)# print proxy identityprint(identity)```###### This code result your proxy identity.#### Simple function to check if proxy is working.```pythonimport hekresult = hek.proxy.checkproxy( # function to check if proxy is working    url=&quot;https://github.com/&quot;, # targeted url    user_agent=&quot;Mozilla/5.0&quot;, # user agent    proxy=&quot;185.61.94.65:61616&quot; #  HTTP/HTTPS proxy    )if &quot;Working&quot; in result: # It'll return Working if It's alive end exception if not    print(&quot;Alive proxy&quot;)```It'll return Working if It's alive end exception if not# Ip stuff.#### Code to grab site ip address.```pythonimport hekurl = &quot;github.com&quot; # targeted urlip = hek.ipstuff.siteip(url) # grap ip by urlprint(ip)```#### Code to check if opened port.```pythonimport hekip = &quot;192.168.0.1&quot; # targeted device ip addressport = 80 # targeted portresult = hek.ipstuff.portscan(ip=ip, port=port, timeout=3) # checking if opened port or notif result == True:    print(&quot;Opened port.&quot;)elif result == False:    print(&quot;Closed port.&quot;)```#### Checking if device SSH by device ip.```pythonimport hekip = &quot;192.168.0.1&quot; # targeted device ip addressresult = hek.ipstuff.checkssh(ip) # checking if device is shh by the device ipif result == True:    print(&quot;is ssh&quot;)elif result == False:    print(&quot;isn't ssh&quot;)```#### Simple code to check if device is rdp by device ip address.```pythonimport hekip = &quot;192.168.0.1&quot; # targeted device ip addressresult = hek.ipstuff.checkrdp(ip) # checking if device is rdp by the device ip.if result == True:    print(&quot;is rdp&quot;)elif result == False:    print(&quot;isn't rdp&quot;)```#### Simple code to check if ip does exist or not.```pythonimport hekip = &quot;192.168.0.1&quot; # targeted ip addressresult = hek.ipstuff.checkip(ip) # checking if ip exist, It'll return True is exist and False if not.if result == True:    print(&quot;ip exist&quot;)elif result == False:    print(&quot;ip doesn't exist&quot;)```It'll return True is exist and False if not.#### Get public ip.```pythonimport hek# get ip ip = hek.ipstuff.myip(find=&quot;query&quot;)# print ipprint(ip)```you could get your ip information by removing find=&quot;query&quot;  also you can change query and get other info about your ip.# Server.#### Check if server port is open.```pythonimport hek# server ipip = &quot;192.168.0.1&quot;# targeted portport = 80# checkresult = hek.server.portscan(ip=ip, port=port)print(result)```#### Retrieve server banner.```pythonimport hek# server ipip = &quot;192.168.0.1&quot;# targeted portport = 430# checkresult = hek.server.get_banner(address=ip, port=port)print(result)```## server.set_socket.##### server.set_socket is a static way like a session that you only need to add the server info once to start sending and receiving data, unlike server.socket which is not static at all.### Connect to a server.```pythonimport hek# server ipip = &quot;192.168.0.1&quot;# server portport = 80# set server dataserver = hek.server.set_socket(host=ip, port=port)# connect to serverr = server.connect()print(f&quot;connected: {r}&quot;)```### Send packet to a server.```pythonimport hek# server ipip = &quot;192.168.0.1&quot;# server portport = 80# set server dataserver = hek.server.set_socket(host=ip, port=port)# connect to serverr = server.connect()print(f&quot;connected: {r}&quot;)# the packetpacket = &quot;hi im packet&quot;# send packetresult = server.sendpacket()print(result)```### Receive data from a server.```pythondata = server.recv(bufsize=1048)print(data)```### Close connection.```pythonserver.close()```# server.socket.#### server.socket unlike set_socket It's unstatic better to work with it while using multiple socket's and multithreading.## Create a socket.```pythonfrom hek import server# get the server valueserver = server.socket()# create socketsock = server.socket()```### connect to a server.```python# connect to a serverresult = server.connect(sock, host=&quot;192.168.0.1&quot;, port=80)# connection result True if connectedprint(result)```### send packet.```python# the packetpacket = &quot;im a packet&quot;# send packetresult = server.sendpacket(sock, packet=packet, host=&quot;192.168.0.1&quot;, port=80)print(result)```### Receive data.```python# receive dataserver.recv(sock, bufsize=1048)```### Close connection.```python# close connectionserver.close(sock)```# Network and trafficking.#### Sniff  and monitor any device traffic on your network.```pythonimport hek, threading# start sniffing networkdef sniff():    hek.network.arp.start_arp(        # your interface mostly It'll be wlan0        interface=&quot;wlan0&quot;,        # ip of the router that the device is connected to        router=&quot;192.168.0.1&quot;,        # device ip address that you want to sniff        device=&quot;192.168.0.112&quot;    )# this function will run wireshark according to the entered datadef monitor_traffic():    hek.wireshark.monitor_device(        # your interface mostly It'll be wlan0        interface=&quot;wlan0&quot;,        # device ip address        device=&quot;192.168.0.112&quot;     )threading.Thread(target=monitor_traffic).start() # run wiresharkthreading.Thread(target=sniff).start() # start sniffing```##### You can use this if you just want to sniff device traffic without needing to open wireshark.```pythonimport hek# start sniffing networkdef sniff():    hek.network.arp.start_arp(        # your interface mostly It'll be wlan0        interface=&quot;wlan0&quot;,        # ip of the router that the device is connected to        router=&quot;192.168.0.1&quot;,        # device ip address that you want to sniff        device=&quot;192.168.0.112&quot;    )sniff()```#### Connect to wifi using hek library.This function is for linux also requires wifi adapter.```pythonimport hek# connect to wifiresult = hek.wifi.connect(ssid=&quot;Wifi ssid/Name&quot;, # wifi ssid/name                          password=&quot;wifi-password&quot; # wifi password                          )# connection resultprint(result) ```#### Start monitor mode.This function for linux.```pythonimport hek# Start monitor moderesult = hek.net.monitor_start(name=&quot;wlan0&quot;)# Outputprint(result)```#### Stop monitor mode.This function for linux.```pythonimport hek# stop monitor moderesult = hek.net.monitor_stop(name=&quot;wlan0mon&quot;)# Outputprint(result)```## Recording , videos, images stuff.###### While recording a video you could display your choice of fps like fps=30 or 60 or higher.#### Extracting image exif data.```pythonimport hekdata = hek.Image.extracexif(filename=&quot;hek.jpg&quot;) # grab exif dataprint(data) # print data```#### Screen shot.```pythonimport hekhek.screen.screenshot(filename=&quot;test.png&quot;)```#### Webcam picture.```pythonimport hekhek.webcam.webcamshot(filename=&quot;test.png&quot;)```#### Screen video capture.```pythonimport hekhek.screen.capture_video(filename=&quot;filename.avi&quot;, seconds=5)```#### Webcam video capture.```pythonimport hekhek.webcam.capture_video(filename=&quot;webname.avi&quot;, seconds=3)```This program uses MIT license. </longdescription>
</pkgmetadata>