<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DataFogDataFog (or the product formerly known as Codexify) is a Python package that simplifies and automates data anonymization tasks. With DataFog, you can quickly scan your datasets for Personal Identifiable Information (PII), swap PII with synthetic data, save and look up original and synthetic data pairs, and more.**Note** In some cases pip install will not work right off the bat; pip installing these dependencies has worked to-date:```bashpip install setuptools==65.5.0 &quot;wheel&lt;0.40.0&quot;```## Libraries Used* [faker](www.github.com/joke2k/faker) for Synthetic Data Generation* Boilerplate PII detection code (swapping in with a custom solution soon)## Coming Soon:* product demo* documentation* `examples/` directory for more detailed examples and usage informationplease see www.datafog.dev for more information or contact me at sidmohan001@gmail.com## InstallationDataFog can be installed via pip. Use the following command to install:```bashpip install datafog```## Getting StartedOnce you've installed DataFog, you can import it into your Python scripts as follows:```pythonfrom datafog import DataFog```Now, you're ready to use DataFog to handle your PII anonymization needs. Here are some basic examples:**Scan a dataset for PII:**```pythondatafog = DataFog()# Scan a csv file for PIIcontains_pii, pii_fields = datafog.scan(&quot;path_to_your_file.csv&quot;)# Print the resultprint(f&quot;Contains PII: {contains_pii}&quot;)print(f&quot;PII Fields: {pii_fields}&quot;)```**Swap PII with synthetic data:**```python# Define the output pathoutput_path = &quot;path_to_output_directory/&quot;# Swap PII in a csv file with synthetic datadatafog.swap(&quot;path_to_your_file.csv&quot;, output_path)```---</longdescription>
</pkgmetadata>