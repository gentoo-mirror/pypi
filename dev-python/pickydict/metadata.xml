<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![GitHub](https://img.shields.io/github/license/florian-huber/pickydict)[![PyPI](https://img.shields.io/pypi/v/pickydict?color=blue)](https://pypi.org/project/pickydict/)[![Conda (channel only)](https://img.shields.io/conda/vn/conda-forge/pickydict?color=blue)](https://github.com/conda-forge/pickydict-feedstock)![GitHub Workflow Status](https://img.shields.io/github/workflow/status/florian-huber/pickydict/CI_Build)# pickydict - the more picky version of Python dictionary`PickyDict` objects will behave just like Python dictionaries, with a fewnotable exceptions:1. PickyDict has a `force_lower_case` attribute.   If set to True (default) then dictionary keys will all be treated as lower-case.2. PickyDict can contain two additional dictionaries named `key_replacements`    and `key_regex_replacements` with mappings to enforce translating specific key words.## InstallationPickyDict can simply be installed with:```pip install pickydict```It has no further dependencies and should run fine with Python &gt;= 3.6 (probably also lower versions, but that is not tested).## Code examples```pythonfrom pickydict import PickyDict# per default force_lower_case is set to True:my_dict = PickyDict({&quot;A&quot;: 1, &quot;B&quot;: 2})print(my_dict)  # =&gt; {'a': 1, 'b': 2}# now also using a replacements dictionarymy_dict = PickyDict({&quot;A&quot;: 1, &quot;B&quot;: 2},                    key_replacements={&quot;a&quot;: &quot;abc&quot;, &quot;b&quot;: &quot;bcd&quot;, &quot;c&quot;: &quot;cde&quot;})print(my_dict)  # =&gt; {'abc': 1, 'bcd': 2}# When adding a value using an undesired key, the key will automatically be fixedmy_dict[&quot;c&quot;] = 100print(my_dict)  # =&gt; {'abc': 1, 'bcd': 2, 'cde': 100}# Trying to add a value using an undesired key while the proper key already exists,# will raise an exception.my_dict[&quot;b&quot;] = 5  # =&gt; ValueError: Key 'b' will be interpreted as 'bcd'...```It is also possible to add a dictionary with regex expression to replace parts ofkey strings. This is done using the `key_regex_replacements` attribute. In the following example the dictionary will replace all spaces in keys with underscores.Important to note is that regex based replacements will be carried out **before** the more specific key_replacements. This is to reduce the number of possible variations and make things simpler for the user.Example:```pythonfrom pickydict import PickyDictmy_dict = PickyDict({&quot;First Name&quot;: &quot;Peter&quot;, &quot;Last Name&quot;: &quot;Petersson&quot;},                    key_replacements={&quot;last_name&quot;: &quot;surname&quot;},                    key_regex_replacements={r&quot;\s&quot;: &quot;_&quot;})print(my_dict)  # =&gt; {'first_name': 'Peter', 'surname': 'Petersson'}```Whenever the pickyness is updated, no matter if the `force_lower_case`, `key_replacements`,or `key_regex_replacements`, the entire dictionary will be updated accordingly.Example:```pythonfrom pickydict import PickyDictmy_dict = PickyDict({&quot;First Name&quot;: &quot;Peter&quot;, &quot;Last Name&quot;: &quot;Petersson&quot;})print(my_dict)  # =&gt; {'first name': 'Peter', 'last name': 'Petersson'}my_dict.set_pickyness(key_replacements={&quot;last_name&quot;: &quot;surname&quot;},                      key_regex_replacements={r&quot;\s&quot;: &quot;_&quot;})print(my_dict)  # =&gt; {'first_name': 'Peter', 'surname': 'Petersson'}```## Handling of key duplicatesPickyDict converts key names as described above. This can obviously lead to cases of having key duplicates. This is handled in two different ways. When passing a dictionary to PickyDict in the beginning, only the entries for the desired keys will be kept.Example:```pythonfrom pickydict import PickyDictmy_dict = PickyDict({&quot;My Name&quot;: &quot;Peter&quot;, &quot;name&quot;: &quot;Peter Petersson&quot;},                      key_replacements={&quot;my_name&quot;: &quot;name&quot;},                      key_regex_replacements={r&quot;\s&quot;: &quot;_&quot;})print(my_dict)  # =&gt; {&quot;name&quot;: &quot;Peter Petersson&quot;}```Later adding values using an improper key, however, will raise an exception when it leads to a duplicate.Example:```pythonfrom pickydict import PickyDictmy_dict = PickyDict({&quot;first_name&quot;: &quot;Peter Petersson&quot;},                      key_regex_replacements={r&quot;\s&quot;: &quot;_&quot;})my_dict[&quot;First Name&quot;] = Peter P. Petersson  # =&gt; ValueError:Key 'First name' will be interpreted as 'first_name'```## For the rest it's just a `dict`All other operation should work as you are used to from Python dictionaries.</longdescription>
</pkgmetadata>