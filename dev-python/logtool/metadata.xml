<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>logtool=======Methods and tools that assist logging.  Can be installed from PyPI:::  $ pip install logtoollog\_call---------A decorator for function and method definitions that logs at DEBUGlevel a variety of data about every call made to that entrypoint.Intended to supercede @log_func and log_func_noargs (see below).  Seelog\_func for example output.Optional arguments:log\_enter  Log entrance to the decorated method.  Defaults to True.log\_args  Log the arguments passed to the decorated method.  Defaults to True.log\_exit  Log exit/returns from the decorated method along with the execution time. Defaults to True.log\_rc  Log the value returned by the decorated method.  Defaults to True.log\_trace  Log each line of the decorated method as it is executed.  Defaults to False.log\_level  Log level to use for the logginf of the call.  Defaults to logging.DBEUG.::  @logtool.log_call  def a_method (...):   ...etc...::  @logtool.log_call (log_args = False, log_rc = False)  def big_complex_data (...):   ...etc...log\_func---------A decorator for function and method definitions that logs at DEBUG levelevery call to that function or method along with its arguments.eg::    @logtool.log_wrap    def my_method (self, *args):      ...stuff here...Resulting log entry from a real production usage (with a few of theargumentvalues redacted):::    Entered: function:test_tool.toolwrapper:email_report ((&lt;test_tool.meshtool.Wrapper object at 0x7f19d4879c10&gt;, path(u'../file.ext'), 'address@domain.com', 'address@domain.com', 'Interesting subject header') {})The {} at the end shows that there were no named arguments passed tothat call, else they would be shown there.log\_func\_noargs-----------------A decorator for function and method definitions that logs at DEBUG levelevery call to that function or method but without any arguments. Thiscan be useful when traversing and dumping the arguments would beexecssively expensive, or would potentially create infinite loops.eg::    @logtool.log_wrap_noargs    def my_method (self, *args):      ...stuff here...log\_fault----------Logs an exception in a standardised form, including the source file andline number of the exception, and if logging at DEBUG level, also logs astack trace along with all the variables in each stack frame. egIn WARN or higher mode:::    CRITICAL &lt;log_fault_impl:log_fault(24)&gt; FAULT: /usr/local/lib/python2.7/dist-packages/workerd-0.1.26_gbb342e2-py2.7.egg/workerd/do.py(243): IOError(28, 'No space left on device')When logging at DEBUG:::    CRITICAL &lt;log_fault_impl:log_fault(24)&gt; FAULT: /usr/local/lib/python2.7/dist-packages/workerd-0.1.26_gbb342e2-py2.7.egg/workerd/do.py(243): IOError(28, 'No space left on device')    DEBUG &lt;log_fault_impl:log_fault(26)&gt; Locals by frame, innermost last:    DEBUG &lt;log_fault_impl:log_fault(30)&gt; Frame run in /usr/local/lib/python2.7/dist-packages/workerd-0.1.26_gbb342e2-py2.7.egg/workerd/do.py at line 248    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                 self = &lt;workerd.do.Do object at 0x7f5709e3d490&gt;    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                    e = [Errno 28] No space left on device    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                   rc = 0    DEBUG &lt;log_fault_impl:log_fault(30)&gt; Frame wrapper_args in build/bdist.linux-x86_64/egg/mppy/log_wrap.py at line 27    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                 args = (&lt;workerd.do.Do object at 0x7f5709e3d490&gt;,)    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                   fn = &lt;function do_job at 0x7f570a2936e0&gt;    DEBUG &lt;log_fault_impl:log_fault(40)&gt;               kwargs = {}    DEBUG &lt;log_fault_impl:log_fault(30)&gt; Frame do_job in /usr/local/lib/python2.7/dist-packages/workerd-0.1.26_gbb342e2-py2.7.egg/workerd/do.py at line 227    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                  toc = 1410867312.58    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                 self = &lt;workerd.do.Do object at 0x7f5709e3d490&gt;    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                  tic = 1410842559.54    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                   rc = -99    DEBUG &lt;log_fault_impl:log_fault(30)&gt; Frame __setitem__ in build/bdist.linux-x86_64/egg/mppy/jsondict.py at line 69    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                 self = {u'status': u'pending', u'notified_for': u'pending    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                  key = execution_time    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                  val = 24753.043578    DEBUG &lt;log_fault_impl:log_fault(40)&gt;               kwargs = {}    DEBUG &lt;log_fault_impl:log_fault(30)&gt; Frame wrapper in build/bdist.linux-x86_64/egg/mppy/jsondict.py at line 80    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                 self = {u'status': u'pending', u'notified_for': u'pending    DEBUG &lt;log_fault_impl:log_fault(40)&gt;               kwargs = {}    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                 attr = &lt;bound method JsonDict.save of {u'status': u'pendi    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                 args = ()    DEBUG &lt;log_fault_impl:log_fault(40)&gt;           was_loaded = True    DEBUG &lt;log_fault_impl:log_fault(30)&gt; Frame save in build/bdist.linux-x86_64/egg/mppy/jsondict.py at line 46    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                force = False    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                 self = {u'status': u'pending', u'notified_for': u'pending    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                   fd = 5    DEBUG &lt;log_fault_impl:log_fault(40)&gt;                   fn = /var/spool/matterport/workerd/generate_mesh/d34featime\_str---------Simply returns a time\_t (seconds since the epoch, possibly fractional)in a simple consistent string form suitable for logfiles, reports andthe like.See below under ``now`` for an example.now---Reurns a tuple of the current time as a time\_t, and its matchingtime\_str. Getting the two together allows the string to be used forlogs and the like, and the time_t to be used as a numeric.  eg:::    $ ipython    Python 2.7.6 (default, Mar 22 2014, 22:59:56)    Type &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.    IPython 1.2.1 -- An enhanced Interactive Python.    ?         -&gt; Introduction and overview of IPython's features.    %quickref -&gt; Quick reference.    help      -&gt; Python's own help system.    object?   -&gt; Details about 'object', use 'object??' for extra details.    In [1]: import logtool    In [2]: logtool.now ()    Out[2]: (1411075417, '21:23:37 Thu 18 Sep 2014 Z+0000')    In [3]: logtool.time_str (logtool.now ()[0])    Out[3]: '14:23:42 Thu 18 Sep 2014 Z+0000'</longdescription>
</pkgmetadata>