<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Textual Textarea![Textual Textarea Screenshot](textarea.png)## Installation```pip install textual-textarea```## FeaturesFull-featured text editor experience with VS-Code-like bindings, in your Textual App:- Syntax highlighting and support for themes.- Move cursor and scroll with mouse or keys (including &lt;kbd&gt;ctrl+arrow&lt;/kbd&gt;, &lt;kbd&gt;PgUp/Dn&lt;/kbd&gt;,  &lt;kbd&gt;Home/End&lt;/kbd&gt;).- Select text using &lt;kbd&gt;shift&lt;/kbd&gt; or click and drag.- Open (&lt;kbd&gt;ctrl+o&lt;/kbd&gt;) and save (&lt;kbd&gt;ctrl+s&lt;/kbd&gt;) files.- Cut (&lt;kbd&gt;ctrl+x&lt;/kbd&gt;), copy (&lt;kbd&gt;ctrl+c&lt;/kbd&gt;), paste (&lt;kbd&gt;ctrl+u/v&lt;/kbd&gt;), optionally using the system clipboard.- Comment selections with &lt;kbd&gt;ctrl+/&lt;/kbd&gt;.- Indent and dedent (optionally for a multiline selection) to tab stops with &lt;kbd&gt;Tab&lt;/kbd&gt; and &lt;kbd&gt;shift+Tab&lt;/kbd&gt;.- Automatic completions of quotes and brackets.- Quit with &lt;kbd&gt;ctrl+q&lt;/kbd&gt;.## Usage### Initializing the WidgetThe TextArea is a Textual Widget. You can add it to a Textualapp using `compose` or `mount`:```pythonfrom textual_textarea import TextAreafrom textual.app import App, ComposeResultclass TextApp(App, inherit_bindings=False):    def compose(self) -&gt; ComposeResult:        yield TextArea(language=&quot;python&quot;, theme=&quot;solarized-dark&quot;)    def on_mount(self) -&gt; None:        ta = self.query_one(TextArea)        ta.focus()app = TextApp()app.run()```In addition to the standard Widget arguments, TextArea accepts three additional, optional arguments when initializing the widget:- language (str): Must be `None` or the short name of a [Pygments lexer](https://pygments.org/docs/lexers/), e.g., `python`, `sql`, `as3`. Defaults to `None`.- theme (str): Must be name of a [Pygments style](https://pygments.org/styles/), e.g., `bw`, `github-dark`, `solarized-light`. Defaults to `monokai`.- use_system_clipboard (bool): Set to `False` to make the TextArea's copy and paste operations ignore the system clipboard. Defaults to `True`. Some Linux users may need to apt-install `xclip` or `xsel` to enable the system clipboard features.The TextArea supports many actions and key bindings. **For proper binding of `ctrl+c` to the COPY action,you must initialize your App with `inherit_bindings=False`** (as shown above), so that `ctrl+c` does not quit the app. The TextArea implements `ctrl+q` as quit; you way wish to mimic that in your app so that other in-focus widgets use the same behavior.### Interacting with the Widget#### Getting and Setting TextThe TextArea exposes a `text` property that contains the full text contained in the widget. You can retrieve or set the text by interacting with this property:```pythonta = self.query_one(TextArea)old_text = ta.textta.text = &quot;New Text!\n\nMany Lines!&quot;```#### Getting and Setting The Cursor PositionThe TextArea exposes a `cursor` property that returns a NamedTuple with the position of the cursor. The tuple is (line_number, x_pos):```pythonta = self.query_one(TextArea)old_cursor = ta.cursorta.cursor = (999, 0)  # the cursor will move as close to line 999, pos 0 as possiblecursor_line_number = ta.cursor.lnocursor_x_position = ta.cursor.pos```#### Getting and Setting The LanguageSyntax highlighting and comment insertion depends on the configured language for the TextArea.The TextArea exposes a `language` property that returns `None` or a string that is equal to the short name of the [Pygments lexer](https://pygments.org/docs/lexers/) for the currently configured language:```pythonta = self.query_one(TextArea)old_language = ta.languageta.language = &quot;python&quot;```#### Getting Theme ColorsIf you would like the rest of your app to match the colors from the TextArea's theme, they are exposed via the `theme_colors` property.```pythonta = self.query_one(TextArea)color = ta.theme_colors.contrast_text_colorbgcolor = ta.theme_colors.bgcolorhighlight = ta.theme_colors.selection_bgcolor```#### Adding Bindings and other BehaviorYou can subclass TextArea to add your own behavior. This snippet adds an action that posts a Submitted message containing the text of the TextArea when the user presses &lt;kbd&gt;ctrl+j&lt;/kbd&gt;:```pythonfrom textual.message import Messagefrom textual_textarea import TextAreaclass CodeEditor(TextArea):    BINDINGS = [        (&quot;ctrl+j&quot;, &quot;submit&quot;, &quot;Run Query&quot;),    ]    class Submitted(Message, bubble=True):        def __init__(self, text: str) -&gt; None:            super().__init__()            self.text = text    async def action_submit(self) -&gt; None:        self.post_message(self.Submitted(self.text))```</longdescription>
</pkgmetadata>