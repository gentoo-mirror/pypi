<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GPTClass**GPTClass** is a Python class that uses OpenAI's GPT to generated the code that does what you need with minimal information.[![version](https://img.shields.io/pypi/v/gptclass?logo=pypi&amp;logoColor=white)](https://pypi.org/project/gptclass/)[![codecov](https://codecov.io/gh/jaume-ferrarons/GPTClass/branch/main/graph/badge.svg?token=IDN30YYHQ8)](https://codecov.io/gh/jaume-ferrarons/GPTClass)### How it works?It uses the method's name and information about the parameters used to build the source code using ChatGPT and then executes it locally.## Installation```bashpip install gptclass```## UsageDo whatever you need: ```python&gt;&gt;&gt; import openai&gt;&gt;&gt; openai.api_key = &quot;...&quot;&gt;&gt;&gt; from gptclass import GPTClass&gt;&gt;&gt; gpt = GPTClass()&gt;&gt;&gt; gpt.add(1, 2)3&gt;&gt;&gt; gpt.n_unique([1, 2, 5, 5])3&gt;&gt;&gt; gpt.prime_numbers_below(10)[2, 3, 5, 7]&gt;&gt;&gt; gpt.count_vowels(&quot;Today I had a nice coffee!&quot;)10&gt;&gt;&gt; gpt.from_celsius_to_fahrenheit(25)77.0&gt;&gt;&gt; gpt.random_plate_number(seed=123)BIC6410```## Show me the generated codeAdding explain before invoking the method will print the code:```python&gt;&gt;&gt; gpt.explain.from_celsius_to_fahrenheit(25)def from_celsius_to_fahrenheit(celsius):    return (celsius * 1.8) + 32&gt;&gt;&gt; gpt.explain.factorial(15)def factorial(n):    if n == 0:        return 1    else:        return n * factorial(n-1)```## Notes- Inspired on: [davinci-functions](https://github.com/odashi/davinci-functions/tree/main)## Warning- The code produced may not be reliable and should be validated before executing it.</longdescription>
</pkgmetadata>