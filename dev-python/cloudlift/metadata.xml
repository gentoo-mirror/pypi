<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CloudliftCloudlift is built by Simpl developers to make it easier to launch dockerizedservices in AWS ECS.Cloudlift is a command-line tool for dockerized services to be deployed in AWSECS. It's very simple to use. That's possible because this is heavilyopinionated. Under the hood, it is a wrapper to AWS cloudformation templates. Oncreating/updating a service or a cluster this creates/updates a cloudformationin AWS.## Demo videos- [Create Environment](https://asciinema.org/a/evsaZvW86qff0InxNlzLPMtb6)- [Create Service](https://asciinema.org/a/RaZb81VDmrnWg8qckWKAm98Bn)- [Deploy Service with image build](https://asciinema.org/a/j4A2DBjLPadbwJPvwiT6W1c2N)- [Deploy Service](https://asciinema.org/a/FUUJ3U2gm7U1yCcTCGjTiGBbp)## Installing cloudlift### 1. Pre-requisites- pip```shcurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py | python get-pip.py```### 2. Install cloudlift```shpip install cloudlift```### 2. Configure AWS```perlaws configure```Enter the AWS Access Key ID, AWS Secret Access Key. You can find instructionshere on how to get Access Key ID and Secret Access Key here athttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#### Using AWS ProfilesIf you are using [AWS profiles](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html), set the desired profile name in the environment before invoking Cloudlift.```shAWS_DEFAULT_PROFILE=&lt;profile name&gt; cloudlift &lt;command&gt;```OR```shexport AWS_DEFAULT_PROFILE=&lt;profile name&gt;cloudlift &lt;command&gt;cloudlift &lt;command&gt;```## Usage### Create a new environmentCreate a new environment for services to be deployed. Cloudlift creates a newVPC for the given CIDR and sets up the required networking infrastructure forservices to run in ECS.```shcloudlift create_environment -e &lt;environment-name&gt;```This starts a prompt for required details to create an environment, whichincludes -- AWS region for the environment- VPC CIDR- NAT Elastic IP allocation ID- 2 Public Subnet CIDRs- 2 Private Subnet CIDRs- Minimum instances for cluster- Maximum instances for cluster- SSH key name- SNS ARN for notifications- AWS ACM ARN for SSL certificateOnce the configuration is saved, this is opened in the default `VISUAL` editor.Here configurations can be changed if required.### Update an environment```shcloudlift update_environment -e &lt;environment-name&gt;```This opens the environment configuration in the `VISUAL` editor. Update this tomake changes to the environment.### Create a new service#### 1. Upload configuration to Parameter StoreDuring create_service and deployment `cloudlift` pulls the config from AWSParameter Store to apply it on the task definition. Configurations are stored inpath with the convention `/&lt;environment&gt;/&lt;service&gt;/&lt;key&gt;````shcloudlift edit_config -e &lt;environment-name&gt;```  _NOTE_: This is *not* required for every deployment. It's required only when  config needs to be changed.#### 2. Create serviceIn the repository for the application, run -```sh  cloudlift create_service -e &lt;environment-name&gt;```This opens the `VISUAL` editor with default config similar to -```json  {      &quot;notifications_arn&quot;: &quot;&lt;SNS Topic ARN&gt;&quot;,      &quot;services&quot;: {          &quot;Test123&quot;: {              &quot;command&quot;: null,              &quot;http_interface&quot;: {                  &quot;container_port&quot;: 80,                  &quot;internal&quot;: false,                  &quot;restrict_access_to&quot;: [                      &quot;0.0.0.0/0&quot;                  ]              },              &quot;memory_reservation&quot;: 100          }      }  }```Definitions -`services`: Map of all ECS services with configuration for current application`command`: Override command in Dockerfile`custom_metrics`: Configuration for custom metrics if required, do not include this if the service does not write/export custom metrics&gt; **NOTE:** If you use custom metrics, Your ECS container Network mode will be `awsvpc`. &gt; **âš  WARNING:** If you are adding custom metrics to your existing service, there will be a downtime.`http_interface`: Configuration for HTTP interface if required, do not includethis if the services does not require a HTTP interface`container_port`: Port in which the process is exposed inside container`internal`: Scheme of loadbalancer. If internal, the loadbalancer is accessibleonly within the VPC`restrict_access_to`: List of CIDR to which HTTP interface is restricted to.`memory_reservation`: Memory size reserved for each task in MBs. This is a softlimit, i.e. at least this much memory will be available, and upto whatevermemory is free in running container instance. Minimum: 10 MB, Maximum: 8000 MB`volume`: Configuration for EFS volume mount if required, do not include this if the service does not required volume mount#### Examples:1. Service configuration with custom metrics:```json  {      &quot;notifications_arn&quot;: &quot;&lt;SNS Topic ARN&gt;&quot;,      &quot;services&quot;: {          &quot;Test123&quot;: {              &quot;command&quot;: null,              &quot;custom_metrics&quot;: {                  &quot;metrics_port&quot;: &quot;8005&quot;,                  &quot;metrics_path&quot;: &quot;/metrics&quot;              },              &quot;http_interface&quot;: {                  &quot;container_port&quot;: 80,                  &quot;internal&quot;: false,                  &quot;restrict_access_to&quot;: [                      &quot;0.0.0.0/0&quot;                  ]              },              &quot;memory_reservation&quot;: 100          }      }  }```2. Service configuration with volume mount:```json  {      &quot;notifications_arn&quot;: &quot;&lt;SNS Topic ARN&gt;&quot;,      &quot;services&quot;: {          &quot;Test123&quot;: {              &quot;command&quot;: null,              &quot;volume&quot;: {                  &quot;efs_id&quot; : &quot;fs-XXXXXXX&quot;,                  &quot;efs_directory_path&quot; : &quot;/&quot;,                  &quot;container_path&quot; : &quot;/&quot;              },              &quot;http_interface&quot;: {                  &quot;container_port&quot;: 80,                  &quot;internal&quot;: false,                  &quot;restrict_access_to&quot;: [                      &quot;0.0.0.0/0&quot;                  ]              },              &quot;memory_reservation&quot;: 100          }      }  }```3. Service configuration with http interface only:```json  {      &quot;notifications_arn&quot;: &quot;&lt;SNS Topic ARN&gt;&quot;,      &quot;services&quot;: {          &quot;Test123&quot;: {              &quot;command&quot;: null,              &quot;http_interface&quot;: {                  &quot;container_port&quot;: 80,                  &quot;internal&quot;: false,                  &quot;restrict_access_to&quot;: [                      &quot;0.0.0.0/0&quot;                  ]              },              &quot;memory_reservation&quot;: 100          }      }  }```4. Service configuration with http interface without AWS CW logging.`Note: Do not use `logging: false` in production. Once conatiner deleted all logs will be lost`.```json  {      &quot;notifications_arn&quot;: &quot;&lt;SNS Topic ARN&gt;&quot;,      &quot;services&quot;: {          &quot;Test123&quot;: {              &quot;command&quot;: null,              &quot;http_interface&quot;: {                  &quot;container_port&quot;: 80,                  &quot;internal&quot;: false,                  &quot;restrict_access_to&quot;: [                      &quot;0.0.0.0/0&quot;                  ]              },              &quot;memory_reservation&quot;: 100,              &quot;logging&quot;: false          }      }  }```#### 3. Deploy serviceThis command build the image (only if the version is unavailable in ECR), pushes to ECR and updates the ECS service task definition. It supports `--build-arg` argument of `docker build` command as well to passcustom build time arguments```sh  cloudlift deploy_service -e &lt;environment-name&gt;```For example, you can pass your SSH key as a build argument to docker build```sh  cloudlift deploy_service --build-arg SSH_KEY &quot;\&quot;`cat ~/.ssh/id_rsa`\&quot;&quot; -e &lt;environment-name&gt;```This example is bit comprehensive to show- it can execute shell commands with &quot;`&quot;.- It's wrapped with double quotes to avoid line-breaks in SSH keys breaking the command.### 6. Starting shell on container instance for serviceYou can start a shell on a container instance which is running a task for givenapplication using the `start_session` command. One pre-requisite for this isinstalling the session manager plugin for `awscli`. To install session managerplugin follow the [guide](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html#install-plugin-macos)```sh  cloudlift start_session -e &lt;environment-name&gt;```MFA code can be passed as parameter `--mfa` or you will be prompted to enterthe MFA code.## Contributing to cloudlift### Setup#### Use the latest git master ```shgit clone git@github.com:GetSimpl/cloudlift.gitcd cloudlift./install-cloudlift.sh```To ensure the tests use the development version and not the installed version run (refer [here](https://stackoverflow.com/a/20972950/227705))```pip install -e .```### TestsFirst level of tests have been added to assert cloudformation template generatedvs expected one.```shpy.test test/deployment/```To run high level integration tests```shpytest -s test/test_cloudlift.py```This tests expects to have an access to AWS console.Since there's no extensive test coverage, it's better to manually test theimpacted areas whenever there's a code change.</longdescription>
</pkgmetadata>