<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytest-aiohttp==============pytest plugin for aiohttp supportThe library provides useful fixtures for creation test aiohttp server and client.Installation------------.. code-block:: console    $ pip install pytest-aiohttpAdd ``asyncio_mode = auto`` line to `pytest configuration&lt;https://docs.pytest.org/en/latest/customize.html&gt;`_ (see `pytest-asyncio modes&lt;https://github.com/pytest-dev/pytest-asyncio#modes&gt;`_ for details).  The plugin workswith ``strict`` mode also.Usage-----Write tests in `pytest-asyncio &lt;https://github.com/pytest-dev/pytest-asyncio&gt;`_ styleusing provided fixtures for aiohttp test server and client creation. The plugin providesresources cleanup out-of-the-box.The simple usage example:.. code-block:: python    from aiohttp import web    async def hello(request):        return web.Response(body=b&quot;Hello, world&quot;)    def create_app():        app = web.Application()        app.router.add_route(&quot;GET&quot;, &quot;/&quot;, hello)        return app    async def test_hello(aiohttp_client):        client = await aiohttp_client(create_app())        resp = await client.get(&quot;/&quot;)        assert resp.status == 200        text = await resp.text()        assert &quot;Hello, world&quot; in textSee `aiohttp documentation &lt;https://docs.aiohttp.org/en/stable/testing.html#pytest&gt;` formore details about fixtures usage.</longdescription>
</pkgmetadata>