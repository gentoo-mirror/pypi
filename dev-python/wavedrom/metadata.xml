<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># WaveDromPyThis is a python module and command line fully compatible with [WaveDrom](https://wavedrom.com/), which is originally implemented in JavaScript. It is useful if you want to generate wavedrom diagrams from a python environment or simply don't want to install the _Node.js_ environment just to use WaveDrom as simple command line.WaveDromPy is for example used in [sphinxcontrib-wavedrom](https://pypi.org/project/sphinxcontrib-wavedrom/) to render wavedrom for Sphinx documentation. While the original project renders the diagrams in JavaScript in the browser, WaveDromPy renders them to SVG files.This tool is a direct translation of original Javascript file _WaveDrom.js_ to Python. No extra feature added. We seek to have it fully compatible.The tool _WaveDromPy_ directly converts _WaveDrom_ compatible JSON files into SVG format.[![Build Status](https://travis-ci.org/wallento/wavedrompy.svg?branch=master)](https://travis-ci.org/wallento/wavedrompy)[![PyPI version](https://badge.fury.io/py/wavedrom.svg)](https://badge.fury.io/py/wavedrom)## InstallationIt is most easy to just install wavedrom via pip/pypi:    pip install wavedrom    Alternatively you can install the latest version from this repository:    pip install git+https://github.com/wallento/wavedrompy    or from your local copy:    pip install .## UsageYou can either use the tool from Python:    import wavedrom    svg = wavedrom.render(&quot;&quot;&quot;    { &quot;signal&quot;: [     { &quot;name&quot;: &quot;CK&quot;,   &quot;wave&quot;: &quot;P.......&quot;,                                              &quot;period&quot;: 2  },     { &quot;name&quot;: &quot;CMD&quot;,  &quot;wave&quot;: &quot;x.3x=x4x=x=x=x=x&quot;, &quot;data&quot;: &quot;RAS NOP CAS NOP NOP NOP NOP&quot;, &quot;phase&quot;: 0.5 },     { &quot;name&quot;: &quot;ADDR&quot;, &quot;wave&quot;: &quot;x.=x..=x........&quot;, &quot;data&quot;: &quot;ROW COL&quot;,                     &quot;phase&quot;: 0.5 },     { &quot;name&quot;: &quot;DQS&quot;,  &quot;wave&quot;: &quot;z.......0.1010z.&quot; },     { &quot;name&quot;: &quot;DQ&quot;,   &quot;wave&quot;: &quot;z.........5555z.&quot;, &quot;data&quot;: &quot;D0 D1 D2 D3&quot; }    ]}&quot;&quot;&quot;)    svg.saveas(&quot;demo1.svg&quot;)    This will render a waveform as:![Example 1](https://raw.githubusercontent.com/wallento/wavedrompy/2e8568d50561f534133d036fee3bd35756f416d9/doc/demo1.svg?sanitize=true &quot;Example 1&quot;)You can find more examples [in the WaveDrom tutorial](https://wavedrom.com/tutorial.html).A second feature is that WaveDrom can render logic circuit diagrams:    import wavedrom    svg = wavedrom.render(&quot;&quot;&quot;    { &quot;assign&quot;:[      [&quot;out&quot;,        [&quot;|&quot;,          [&quot;&amp;&quot;, [&quot;~&quot;, &quot;a&quot;], &quot;b&quot;],          [&quot;&amp;&quot;, [&quot;~&quot;, &quot;b&quot;], &quot;a&quot;]        ]      ]    ]}&quot;&quot;&quot;)    svg.saveas(&quot;demo2.svg&quot;) This will render a as:![Example 2](https://raw.githubusercontent.com/wallento/wavedrompy/2e8568d50561f534133d036fee3bd35756f416d9/doc/demo2.svg?sanitize=true &quot;Example 2&quot;)You can find more examples [in the WaveDrom tutorial2](https://wavedrom.com/tutorial2.html).Finally, wavedrom can draw registers as bitfields:    import wavedrom    svg = wavedrom.render(&quot;&quot;&quot;    {&quot;reg&quot;: [      { &quot;name&quot;: &quot;IPO&quot;,   &quot;bits&quot;: 8, &quot;attr&quot;: &quot;RO&quot; },      {                  &quot;bits&quot;: 7 },      { &quot;name&quot;: &quot;&lt;o&gt;B&lt;/o&gt;&lt;b&gt;R&lt;i&gt;K&lt;/i&gt;&lt;/b&gt;&quot;,   &quot;bits&quot;: 5, &quot;attr&quot;: &quot;RW&quot;, &quot;type&quot;: 4 },      { &quot;name&quot;: &quot;CPK&quot;,   &quot;bits&quot;: 1 },      { &quot;name&quot;: &quot;Clear&quot;, &quot;bits&quot;: 3 },      { &quot;bits&quot;: 8 }      ]    ]}&quot;&quot;&quot;)    svg.saveas(&quot;demo3.svg&quot;)    This will render as:![Example 3](https://raw.githubusercontent.com/wallento/wavedrompy/2e8568d50561f534133d036fee3bd35756f416d9/doc/demo3.svg?sanitize=true &quot;Example 3&quot;)This mode is documented as part of the [bit-field](https://www.npmjs.com/package/bit-field) JavaScript package.Alternatively, WaveDromPy can be called from the command line:    wavedrompy --input input.json --svg output.svg## Important noticeThe command line uses Python's JSON interpreter that is more restrictive (coherent with the JSOC spec), while the JavaScript json is more relaxed: * All strings have to be written between quotes (&quot;&quot;), * Extra comma (,) not supported at end of lists or dictionaries ## AsciiDoctor exampleAn _AsciiDoctor_ example is provided to directly generate timing diagrams from _AsciiDoctor_ formatted documents.</longdescription>
</pkgmetadata>