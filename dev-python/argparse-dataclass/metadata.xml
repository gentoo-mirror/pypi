<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>``argparse_dataclass``======================Declarative CLIs with ``argparse`` and ``dataclasses``... image:: https://travis-ci.org/mivade/argparse_dataclass.svg?branch=master    :target: https://travis-ci.org/mivade/argparse_dataclass.. image:: https://img.shields.io/pypi/v/argparse_dataclass    :alt: PyPIFeatures--------Features marked with a ✓ are currently implemented; features marked with a ⊘are not yet implemented.- [✓] Positional arguments- [✓] Boolean flags- [✓] Integer, string, float, and other simple types as arguments- [✓] Default values- [✓] Arguments with a finite set of choices- [⊘] Subcommands- [⊘] Mutually exclusive groupsExamples--------Using dataclass decorator.. code-block:: pycon    &gt;&gt;&gt; from argparse_dataclass import dataclass    &gt;&gt;&gt; @dataclass    ... class Options:    ...     x: int = 42    ...     y: bool = False    ...    &gt;&gt;&gt; print(Options.parse_args(['--y']))    Options(x=42, y=True)A simple parser with flags:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     verbose: bool    ...     other_flag: bool    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_args([]))    Options(verbose=False, other_flag=False)    &gt;&gt;&gt; print(parser.parse_args([&quot;--verbose&quot;, &quot;--other-flag&quot;]))    Options(verbose=True, other_flag=True)Using defaults:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass, field    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     x: int = 1    ...     y: int = field(default=2)    ...     z: float = field(default_factory=lambda: 3.14)    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_args([]))    Options(x=1, y=2, z=3.14)Enabling choices for an option:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass, field    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     small_integer: int = field(metadata=dict(choices=[1, 2, 3]))    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_args([&quot;--small-integer&quot;, &quot;3&quot;]))    Options(small_integer=3)Using different flag names and positional arguments:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass, field    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     x: int = field(metadata=dict(args=[&quot;-x&quot;, &quot;--long-name&quot;]))    ...     positional: str = field(metadata=dict(args=[&quot;positional&quot;]))    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_args([&quot;-x&quot;, &quot;0&quot;, &quot;positional&quot;]))    Options(x=0, positional='positional')    &gt;&gt;&gt; print(parser.parse_args([&quot;--long-name&quot;, 0, &quot;positional&quot;]))    Options(x=0, positional='positional')Using a custom type converter:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass, field    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     name: str = field(metadata=dict(type=str.title))    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_args([&quot;--name&quot;, &quot;john doe&quot;]))    Options(name='John Doe')Configuring a flag to have a default value of True:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass, field    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     verbose: bool = True    ...     logging: bool = field(default=True, metadata=dict(args=[&quot;--logging-off&quot;]))    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_args([]))    Options(verbose=True, logging=True)    &gt;&gt;&gt; print(parser.parse_args([&quot;--no-verbose&quot;, &quot;--logging-off&quot;]))    Options(verbose=False, logging=False)Configuring a flag so it is required to set:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass, field    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     logging: bool = field(metadata=dict(required=True))    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_args([&quot;--logging&quot;]))    Options(logging=True)    &gt;&gt;&gt; print(parser.parse_args([&quot;--no-logging&quot;]))    Options(logging=False)Parsing only the known arguments:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass, field    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     name: str    ...     logging: bool = False    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_known_args([&quot;--name&quot;, &quot;John&quot;, &quot;--other-arg&quot;, &quot;foo&quot;]))    (Options(name='John', logging=False), ['--other-arg', 'foo'])Configuring a field with the Optional generic type:.. code-block:: pycon    &gt;&gt;&gt; from dataclasses import dataclass, field    &gt;&gt;&gt; from typing import Optional    &gt;&gt;&gt; from argparse_dataclass import ArgumentParser    &gt;&gt;&gt; @dataclass    ... class Options:    ...     name: str    ...     id: Optional[int] = None    ...    &gt;&gt;&gt; parser = ArgumentParser(Options)    &gt;&gt;&gt; print(parser.parse_args([&quot;--name&quot;, &quot;John&quot;]))    Options(name='John', id=None)    &gt;&gt;&gt; print(parser.parse_args([&quot;--name&quot;, &quot;John&quot;, &quot;--id&quot;, &quot;1234&quot;]))    Options(name='John', id=1234)License-------MIT LicenseCopyright (c) 2021 Michael V. DePalatis and contributorsPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>