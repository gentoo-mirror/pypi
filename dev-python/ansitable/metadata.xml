<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version fury.io](https://badge.fury.io/py/ansitable.svg)](https://pypi.python.org/pypi/ansitable/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/ansitable)](https://pypistats.org/packages/ansitable)[![Anaconda version](https://anaconda.org/conda-forge/ansitable/badges/version.svg)](https://anaconda.org/conda-forge/ansitable)[![pyversions](https://img.shields.io/pypi/pyversions/ansitable)](https://pypi.python.org/pypi/ansitable/)[![PyPI status](https://img.shields.io/pypi/status/ansitable.svg)](https://pypi.python.org/pypi/ansitable/)[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/petercorke/ansitable/graphs/commit-activity)[![GitHub license](https://img.shields.io/github/license/Naereen/StrapDown.js.svg)](https://github.com/petercorke/ansitable/blob/master/LICENSE)- GitHub repository: [https://github.com/petercorke/ansitable](https://github.com/petercorke/ansitable)- Dependencies: [`colored`](https://pypi.org/project/colored)# SynopsisPainless creation of nice-looking [tables of data](#tables) or [matrices](#matrices) in Python.What's new:0.9.5:- methods to format table as MarkDown or LaTeX- work with Python 3.40.9.3:- create matrices as well as tables- option to suppress color output# TablesPainless creation of nice-looking tables of data for Python.![colored table](https://github.com/petercorke/ansitable/raw/master/figs/colortable.png) ## Starting simple```python 1 | from ansitable import ANSITable, Column 2 | 3 | table = ANSITable(&quot;col1&quot;, &quot;column 2 has a big header&quot;, &quot;column 3&quot;) 4 | table.row(&quot;aaaaaaaaa&quot;, 2.2, 3) 5 | table.row(&quot;bbbbbbbbbbbbb&quot;, 5.5, 6) 6 | table.row(&quot;ccccccc&quot;, 8.8, 9) 7 | table.print()```Line 3 constructs an `ANSITable` object and the arguments are a sequence of column names followed by `ANSITable` keyword arguments - there are none in this first example.  Since there are three column names this this will be a 3-column table.Lines 4-6 add rows, 3 data values for each row.Line 7 prints the table and yields a tabular displaywith column widths automatically chosen, and headings and column data all right-justified (default)```         col1  column 2 has a big header  column 3      aaaaaaaaa                        2.2         3  bbbbbbbbbbbbb                        5.5         6        ccccccc                        8.8         9  ```By default output is printed to the console (`stdout`) but we can also:- provide a `file` option to `.print()` to allow writing to a specified output stream, thedefault is `stdout`.- obtain a multi-line string version of the entire table as `str(table)`.The more general solution is to provide a sequence of `Column` objects which allows many column specific options to be given, as we shall see later. For now though, we could rewrite the example above as:```pythontable = ANSITable(        Column(&quot;col1&quot;),        Column(&quot;column 2 has a big header&quot;),        Column(&quot;column 3&quot;)    )```or as```pythontable = ANSITable()table.addcolumn(&quot;col1&quot;)table.addcolumn(&quot;column 2 has a big header&quot;)table.addcolumn(&quot;column 3&quot;)```where the keyword arguments to `.addcolumn()` are the same as those for`Column` and are given below.***We can specify a [Python `format()` style format string](https://docs.python.org/3/library/string.html#formatspec) for any column - by default itis the general formatting option `&quot;{}&quot;`.You may choose to left or right justify values via the format string, `ansitable` provides control over how those resulting strings are justified within the column.```pythontable = ANSITable(        Column(&quot;col1&quot;),        Column(&quot;column 2 has a big header&quot;, &quot;{:.3g}&quot;),  # CHANGE        Column(&quot;column 3&quot;, &quot;{:-10.4f}&quot;)    )table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)table.row(&quot;bbbbbbbbbbbbb&quot;, 5.5, 6)table.row(&quot;ccccccc&quot;, 8.8, 9)table.print()```which yields```         col1  column 2 has a big header    column 3      aaaaaaaaa                        2.2      3.0000  bbbbbbbbbbbbb                        5.5      6.0000        ccccccc                        8.8      9.0000        ```Alternatively we can specify the format argument as a function that convertsthe value to a string.***The data in column 1 is quite long, we might wish to set a maximum column width whichwe can do using the `width` argument```pythontable = ANSITable(        Column(&quot;col1&quot;, width=10),                      # CHANGE        Column(&quot;column 2 has a big header&quot;, &quot;{:.3g}&quot;),        Column(&quot;column 3&quot;, &quot;{:-10.4f}&quot;)    )table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)table.row(&quot;bbbbbbbbbbbbb&quot;, 5.5, 6)table.row(&quot;ccccccc&quot;, 8.8, 9)table.print()```which yields```      col1  column 2 has a big header    column 3   aaaaaaaaa                        2.2      3.0000  bbbbbbbbb…                        5.5      6.0000     ccccccc                        8.8      9.0000  ```where we see that the data in column 1 has been truncated.If you don't like the ellipsis you can turn it off, and get to see one morecharacter, with the `ANSITable` option `ellipsis=False`.  The Unicode ellipsischaracter u+2026 is used.## BordersWe can add a table border made up of regular ASCII characters```pythontable = ANSITable(        Column(&quot;col1&quot;),        Column(&quot;column 2 has a big header&quot;),        Column(&quot;column 3&quot;),        border=&quot;ascii&quot;                          # CHANGE    )table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)table.row(&quot;bbbbbbbbbbbbb&quot;, 5.5, 6)table.row(&quot;ccccccc&quot;, 8.8, 9)table.print()```which yields```+--------------+---------------------------+----------+|         col1 | column 2 has a big header | column 3 |+--------------+---------------------------+----------+|    aaaaaaaaa |                       2.2 |        3 ||bbbbbbbbbbbbb |                       5.5 |        6 ||      ccccccc |                       8.8 |        9 |+--------------+---------------------------+----------+```***Or we can construct a border using the [ANSI box-drawing characters](https://en.wikipedia.org/wiki/Box-drawing_character) which are supported by most terminalemulators```pythontable = ANSITable(        Column(&quot;col1&quot;),        Column(&quot;column 2 has a big header&quot;),        Column(&quot;column 3&quot;),        border=&quot;thick&quot;                           # CHANGE    )table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)table.row(&quot;bbbbbbbbbbbbb&quot;, 5.5, 6)table.row(&quot;ccccccc&quot;, 8.8, 9)table.print()```which yields```┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┓┃         col1 ┃ column 2 has a big header ┃ column 3 ┃┣━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━┫┃    aaaaaaaaa ┃                       2.2 ┃        3 ┃┃bbbbbbbbbbbbb ┃                       5.5 ┃        6 ┃┃      ccccccc ┃                       8.8 ┃        9 ┃┗━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━┛```_Note: this actually looks better on the console than it does in GitHub markdown._Other border options include &quot;thin&quot;, &quot;rounded&quot; (thin with round corners) and &quot;double&quot;.## Header and column alignmentWe can change the alignment of data and heading for any column with the alignment flags `&quot;&lt;&quot;` (left), `&quot;&gt;&quot;` (right) and `&quot;^&quot;` (centered).```pythontable = ANSITable(        Column(&quot;col1&quot;),        Column(&quot;column 2 has a big header&quot;, colalign=&quot;^&quot;),  # CHANGE        Column(&quot;column 3&quot;),        border=&quot;thick&quot;    )table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)table.row(&quot;bbbbbbbbbbbbb&quot;, 5.5, 6)table.row(&quot;ccccccc&quot;, 8.8, 9)table.print()```which yields```┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┓┃         col1 ┃ column 2 has a big header ┃ column 3 ┃┣━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━┫┃    aaaaaaaaa ┃            2.2            ┃        3 ┃┃bbbbbbbbbbbbb ┃            5.5            ┃        6 ┃┃      ccccccc ┃            8.8            ┃        9 ┃┗━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━┛```where the data for column 2 has been centered.***Heading and data alignment for any column can be set independently```pythontable = ANSITable(        Column(&quot;col1&quot;, headalign=&quot;&lt;&quot;),                      # CHANGE        Column(&quot;column 2 has a big header&quot;, colalign=&quot;^&quot;),        Column(&quot;column 3&quot;, colalign=&quot;&lt;&quot;),                   # CHANGE        border=&quot;thick&quot;    )table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)table.row(&quot;bbbbbbbbbbbbb&quot;, 5.5, 6)table.row(&quot;ccccccc&quot;, 8.8, 9)table.print()```yields```┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┓┃col1          ┃ column 2 has a big header ┃ column 3 ┃┣━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━┫┃    aaaaaaaaa ┃            2.2            ┃ 3        ┃┃bbbbbbbbbbbbb ┃            5.5            ┃ 6        ┃┃      ccccccc ┃            8.8            ┃ 9        ┃┗━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━┛```where we have left-justified the heading for column 1 and the data for column 3.## ColorIf you have the `colored` package installed then you can set the foreground andbackground color and style (bold, reverse, underlined, dim) of the header and column data, as well as the border color.```pythontable = ANSITable(    Column(&quot;col1&quot;, headalign=&quot;&lt;&quot;, colcolor=&quot;red&quot;, headstyle=&quot;underlined&quot;),  # CHANGE    Column(&quot;column 2 has a big header&quot;, colalign=&quot;^&quot;, colstyle=&quot;reverse&quot;),  # CHANGE    Column(&quot;column 3&quot;, colalign=&quot;&lt;&quot;, colbgcolor=&quot;green&quot;),                   # CHANGE    border=&quot;thick&quot;, bordercolor=&quot;blue&quot;                                      # CHANGE)table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)table.row(&quot;bbbbbbbbbbbbb&quot;, 5.5, 6)table.row(&quot;ccccccc&quot;, 8.8, 9)table.print()```which yields![colored table](https://github.com/petercorke/ansitable/raw/master/figs/colortable.png) It is also possible to change the color of individual cells in the tableby prefixing the value with a color enclosed in double angle brackets, for example `&lt;&lt;red&gt;&gt;`.```pythontable = ANSITable(&quot;col1&quot;, &quot;column 2 has a big header&quot;, &quot;column 3&quot;)    table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)    table.row(&quot;&lt;&lt;red&gt;&gt;bbbbbbbbbbbbb&quot;, 5.5, 6)    table.row(&quot;&lt;&lt;blue&gt;&gt;ccccccc&quot;, 8.8, 9)    table.print()```## All options### ANSITableThese keyword arguments control the styling of the entire table.| Keyword  | Default | Purpose ||----      |----     |----    |colsep | 2 | Gap between columns (in spaces)offset | 0 | Gap at start of each row, shifts the table to the leftborder | no border  | Border style: 'ascii', 'thin', 'thick', 'double'bordercolor | |Border color, see [possible values](https://pypi.org/project/colored)ellipsis | True | Add an ellipsis if a wide column is truncatedheader | True | Include the column header rowcolumns | | Specify the number of columns if `header=False` and no header name or `Column` arguments are givencolor | True | Enable color - Color is only possible if the `colored` package is installed- If `color` is False then no color escape sequences will be emitted, useful   override for tables included in Sphinx documentation.### ColumnThese keyword arguments control the styling of a single column.| Keyword  | Default | Purpose ||----      |----     |----    |fmt | `&quot;{}&quot;` | format string for the column value, or a callable that maps the column value to a stringwidth || maximum column width, excess will be truncatedcolcolor || Text color, see [possible values](https://pypi.org/project/colored)colbgcolor || Text background color, see [possible values](https://pypi.org/project/colored)colstyle  || Text style: &quot;bold&quot;, &quot;underlined&quot;, &quot;reverse&quot;, &quot;dim&quot;, &quot;blink&quot;colalign | `&quot;&gt;&quot;` | Text alignment: `&quot;&gt;&quot;` (left), `&quot;&lt;&quot;` (right), `&quot;^&quot;` (centered)headcolor || Heading text color, see [possible values](https://pypi.org/project/colored)headbgcolor || Heading text background color, see [possible values](https://pypi.org/project/colored)headstyle || Heading text style: &quot;bold&quot;, &quot;underlined&quot;, &quot;reverse&quot;, &quot;dim&quot;, &quot;blink&quot;headalign | `&quot;&gt;&quot;` | Heading text alignment: `&quot;&gt;&quot;` (left), `&quot;&lt;&quot;` (right), `&quot;^&quot;` (centered) Note that many terminal emulators do not support the &quot;blink&quot; style.# Output in other tabular formatsThe main use for this package is to generate tables on the console that are easy to read, butsometimes you might want the table in a different format to include indocumentation.```pythontable = ANSITable(&quot;col1&quot;, &quot;column 2 has a big header&quot;, &quot;column 3&quot;)table.row(&quot;aaaaaaaaa&quot;, 2.2, 3)table.row(&quot;bbbbbbbbbbbbb&quot;, -5.5, 6)table.row(&quot;ccccccc&quot;, 8.8, -9)table.print()```can be rendered into Markdown```table.markdown()|          col1 | column 2 has a big header | column 3 || ------------: | ------------------------: | -------: ||     aaaaaaaaa |                       2.2 |        3 || bbbbbbbbbbbbb |                      -5.5 |        6 ||       ccccccc |                       8.8 |       -9 |```or LaTex```table.latex()\begin{tabular}{ |r|r|r| }\hline\multicolumn{1}{|r|}{col1} &amp; \multicolumn{1}{|r|}{column 2 has a big header} &amp; \multicolumn{1}{|r|}{column 3}\\\hline\hlineaaaaaaaaa &amp; 2.2 &amp; 3 \\bbbbbbbbbbbbb &amp; -5.5 &amp; 6 \\ccccccc &amp; 8.8 &amp; -9 \\\hline\end{tabular}```In both cases the method returns a string and column alignment is supported.MarkDown doesn't allow the header to have different alignment to the data.# MatricesPainless creation of nice-looking matrices for Python.We can create a formatter for NumPy arrays (1D or 2D)```pythonfrom ansitable import ANSIMatrixformatter = ANSIMatrix(style='thick')```and then use it to format a NumPy array```pythonm = np.random.rand(4,4) - 0.5m[0,0] = 1.23456e-14formatter.print(m)```yields```┏                                           ┓┃ 0         -0.385     -0.106      0.296    ┃┃ 0.0432     0.339      0.119     -0.468    ┃┃ 0.405     -0.306      0.0165    -0.439    ┃┃ 0.203      0.4       -0.499     -0.487    ┃┗                                           ┛```we can also add suffixes```pythonformatter.print(m, suffix_super='T', suffix_sub='3')```yields```┏                                           ┓T┃ 0         -0.239      0.186     -0.414    ┃┃ 0.49       0.215     -0.0148     0.0529   ┃┃ 0.0473     0.0311     0.45       0.394    ┃┃-0.192      0.193     -0.455      0.0302   ┃┗                                           ┛3```By default output is printed to the console (stdout) but we can also:* provide a `file` option to `.print()` to allow writing to a specified output stream, the default is `stdout`.* obtain a multi-line string version of the entire table using the `.str()` methodinstead of `.print()`.The formatter takes additional arguments to control the numeric format and to control the suppression of very small values.### ANSIMatrixThese keyword arguments control the overall styling and operation of the formatter.| Keyword  | Default | Purpose ||----      |----     |----    |style | `&quot;thin&quot;` | `&quot;thin&quot;`, `&quot;round&quot;`, `&quot;thick&quot;`, `&quot;double&quot;`fmt | `&quot;{:&lt; 10.3g}&quot;` | format for each elementsquish | True | set small elements to zerosquishtol | 100 | elements less than `squishtol * eps` are set to zero### FormatterA formatter takes additional arguments to the styling for a particular call.| Keyword  | Default | Purpose ||----      |----     |----    |suffix_super | `&quot;&quot;` | superscript suffix textsuffix_sub | `&quot;&quot;` | subscript suffix text</longdescription>
</pkgmetadata>