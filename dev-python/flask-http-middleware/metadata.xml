<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flask HTTP Middleware[![Downloads](https://static.pepy.tech/personalized-badge/flask-http-middleware?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=orange&amp;left_text=Downloads)](https://pepy.tech/project/flask-http-middleware)## Installation```pip install flask-http-middleware```## DescriptionA module to create flask middleware with direct access to `request` and `response`.This module implement the starlette's (FastAPI) BaseHTTPMiddleware style to Flask.## Changelogs- v0.0    - First Upload- v0.1    - Allow middlewares stacking- v0.2    - Adjusting wsgi middleware update for `flask&gt;=2.2.x`## How to use ?### Example: adding a response header```import timefrom flask import Flaskfrom flask_http_middleware import MiddlewareManager, BaseHTTPMiddlewareapp = Flask(__name__)class MetricsMiddleware(BaseHTTPMiddleware):    def __init__(self):        super().__init__()    def dispatch(self, request, call_next):        t0 = time.time()        response = call_next(request)        response_time = time.time()-t0        response.headers.add(&quot;response_time&quot;, response_time)        return responseapp.wsgi_app = MiddlewareManager(app)app.wsgi_app.add_middleware(MetricsMiddleware)@app.get(&quot;/health&quot;)def health():    return {&quot;message&quot;:&quot;I'm healthy&quot;}if __name__ == &quot;__main__&quot;:    app.run()```- Note: you can put your `MetricsMiddleware` class in different fileAbove example is equals with `app.before_request` and `app.after_request` decorated function.```@app.before_requestdef start_metrics():    g.t0 = time.time()@app.after_requestdef stop_metrics(response):    response_time = time.time()-g.t0    response.headers.add(&quot;response_time&quot;, response_time)    return response```---### Example: Authentication```import timefrom flask import Flask, jsonifyfrom flask_http_middleware import MiddlewareManager, BaseHTTPMiddlewareapp = Flask(__name__)class AccessMiddleware(BaseHTTPMiddleware):    def __init__(self):        super().__init__()    def dispatch(self, request, call_next):        if request.headers.get(&quot;token&quot;) == &quot;secret&quot;:            return call_next(request)        else:            return jsonify({&quot;message&quot;:&quot;invalid token&quot;})app.wsgi_app = MiddlewareManager(app)app.wsgi_app.add_middleware(AccessMiddleware)@app.get(&quot;/health&quot;)def health():    return {&quot;message&quot;:&quot;I'm healthy&quot;}if __name__ == &quot;__main__&quot;:    app.run()```---### Example: add some routers security```import timefrom flask import Flask, jsonifyfrom flask_http_middleware import MiddlewareManager, BaseHTTPMiddlewareapp = Flask(__name__)class SecureRoutersMiddleware(BaseHTTPMiddleware):    def __init__(self, secured_routers = []):        super().__init__()        self.secured_routers = secured_routers    def dispatch(self, request, call_next):        if request.path in self.secured_routers:            if request.headers.get(&quot;token&quot;) == &quot;secret&quot;:                return call_next(request)            else:                return jsonify({&quot;message&quot;:&quot;invalid token&quot;})        else:            return call_next(request)secured_routers = [&quot;/check_secured&quot;]app.wsgi_app = MiddlewareManager(app)app.wsgi_app.add_middleware(SecureRoutersMiddleware, secured_routers=secured_routers)@app.get(&quot;/health&quot;)def health():    return {&quot;message&quot;:&quot;I'm healthy&quot;}@app.get(&quot;/check_secured&quot;)def health():    return {&quot;message&quot;:&quot;Security bypassed&quot;}if __name__ == &quot;__main__&quot;:    app.run()```---### Example: add error handling```import timefrom flask import Flask, jsonifyfrom flask_http_middleware import MiddlewareManager, BaseHTTPMiddlewareapp = Flask(__name__)class AccessMiddleware(BaseHTTPMiddleware):    def __init__(self):        super().__init__()    def dispatch(self, request, call_next):        if request.headers.get(&quot;token&quot;) == &quot;secret&quot;:            return call_next(request)        else:            raise Exception(&quot;Authentication Failed&quot;)    def error_handler(self, error):        return jsonify({&quot;error&quot;: str(error)})app.wsgi_app = MiddlewareManager(app)app.wsgi_app.add_middleware(AccessMiddleware)@app.get(&quot;/health&quot;)def health():    return {&quot;message&quot;:&quot;I'm healthy&quot;}if __name__ == &quot;__main__&quot;:    app.run()```### Example: Stacking MiddlewareYou can also stack your middleware`middleware.py````import timefrom flask import jsonifyfrom flask_http_middleware import BaseHTTPMiddlewareclass AccessMiddleware(BaseHTTPMiddleware):    def __init__(self):        super().__init__()    def dispatch(self, request, call_next):        if request.headers.get(&quot;token&quot;) == &quot;secret&quot;:            return call_next(request)        else:            raise Exception(&quot;Authentication Failed&quot;)    def error_handler(self, error):        return jsonify({&quot;error&quot;: str(error)})class MetricsMiddleware(BaseHTTPMiddleware):    def __init__(self):        super().__init__()    def dispatch(self, request, call_next):        t0 = time.time()        response = call_next(request)        response_time = time.time()-t0        response.headers.add(&quot;response_time&quot;, response_time)        return responseclass SecureRoutersMiddleware(BaseHTTPMiddleware):    def __init__(self, secured_routers = []):        super().__init__()        self.secured_routers = secured_routers    def dispatch(self, request, call_next):        if request.path in self.secured_routers:            if request.headers.get(&quot;token&quot;) == &quot;secret&quot;:                return call_next(request)            else:                return jsonify({&quot;message&quot;:&quot;invalid token&quot;})        else:            return call_next(request)```your `main.py````import timefrom flask import Flask, jsonifyfrom flask_http_middleware import MiddlewareManagerfrom middleware import AccessMiddleware, MetricsMiddleware, SecureRoutersMiddlewareapp = Flask(__name__)my_secured_routers = [&quot;/check_secured&quot;]app.wsgi_app = MiddlewareManager(app)app.wsgi_app.add_middleware(AccessMiddleware)app.wsgi_app.add_middleware(MetricsMiddleware)app.wsgi_app.add_middleware(SecureRoutersMiddleware, secured_routers=my_secured_routers)@app.get(&quot;/health&quot;)def health():    return {&quot;message&quot;:&quot;I'm healthy&quot;}@app.get(&quot;/check_secured&quot;)def health():    return {&quot;message&quot;:&quot;Security bypassed&quot;}if __name__ == &quot;__main__&quot;:    app.run()```</longdescription>
</pkgmetadata>