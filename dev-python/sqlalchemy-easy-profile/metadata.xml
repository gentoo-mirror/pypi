<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SQLAlchemy Easy Profile[![Build Status](https://travis-ci.com/dmvass/sqlalchemy-easy-profile.svg?branch=master)](https://travis-ci.com/dmvass/sqlalchemy-easy-profile)[![image](https://img.shields.io/pypi/v/sqlalchemy-easy-profile.svg)](https://pypi.python.org/pypi/sqlalchemy-easy-profile)[![codecov](https://codecov.io/gh/dmvass/sqlalchemy-easy-profile/branch/master/graph/badge.svg)](https://codecov.io/gh/dmvass/sqlalchemy-easy-profile)[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/dmvass/sqlalchemy-easy-profile/blob/master/LICENSE)Inspired by [django-querycount](https://github.com/bradmontgomery/django-querycount),is a library that hooks into SQLAlchemy to collect metrics, streaming statistics intoconsole output and help you understand where in application you have slow or redundantqueries.![report example](https://raw.githubusercontent.com/dmvass/sqlalchemy-easy-profile/master/images/report-example.png?raw=true)## InstallationInstall the package with pip:```pip install sqlalchemy-easy-profile```## Session profilerThe profiling session hooks into SQLAlchemy and captures query statements, duration information,and query parameters. You also may have multiple profiling sessions active at the sametime on the same or different Engines. If multiple profiling sessions are active on thesame engine, queries on that engine will be collected by both sessions and reported ondifferent reporters.You may begin and commit a profiling session as much as you like. Calling begin on an alreadystarted session or commit on an already committed session will raise an `AssertionError`.You also can use a contextmanager interface for session profiling or used it like a decorator.This has the effect of only profiling queries occurred within the decorated function or insidea manager context.How to use `begin` and `commit`:```pythonfrom easy_profile import SessionProfilerprofiler = SessionProfiler()profiler.begin()session.query(User).filter(User.name == &quot;Arthur Dent&quot;).first()profiler.commit()print(profiler.stats)```How to use as a context manager interface:```pythonprofiler = SessionProfiler()with profiler:    session.query(User).filter(User.name == &quot;Arthur Dent&quot;).first()print(profiler.stats)```How to use profiler as a decorator:```pythonprofiler = SessionProfiler()class UsersResource:    @profiler()    def on_get(self, req, resp, **args, **kwargs):        return session.query(User).all()```Keep in mind that profiler decorator interface accepts a special reporter andIf it was not defined by default will be used a base streaming reporter. Decoratoralso accept `name` and `name_callback` optional parameters.## WSGI integrationEasy Profiler provides a specified middleware which can prints the number of databasequeries for each HTTP request and can be applied as a WSGI server middleware. So youcan easily integrate Easy Profiler into any WSGI application.How to integrate with a Flask application:```pythonfrom flask import Flaskfrom easy_profile import EasyProfileMiddlewareapp = Flask(__name__)app.wsgi_app = EasyProfileMiddleware(app.wsgi_app)```How to integrate with a Falcon application: ```pythonimport falconfrom easy_profile import EasyProfileMiddlewareapi = application = falcon.API()application = EasyProfileMiddleware(application)```## How to customize outputThe `StreamReporter` accepts medium-high thresholds, output file destination (stdout by default), a specialflag for disabling color formatting and number of displayed duplicated queries:```pythonfrom flask import Flaskfrom easy_profile import EasyProfileMiddleware, StreamReporterapp = Flask(__name__)app.wsgi_app = EasyProfileMiddleware(app.wsgi_app, reporter=StreamReporter(display_duplicates=100))```Any custom reporter can be created as:```pythonfrom easy_profile.reporters import Reporterclass CustomReporter(Reporter):    def report(self, path, stats):        &quot;&quot;&quot;Do something with path and stats.                :param str path: where profiling occurred        :param dict stats: profiling statistics        &quot;&quot;&quot;        ...```## TestingTo run the tests:```python setup.py test```Or use `tox` for running in all tests environments.## LicenseThis code is distributed under the terms of the MIT license.## ChangesA full changelog is maintained in the [CHANGELOG](https://github.com/dmvass/sqlalchemy-easy-profile/blob/master/CHANGELOG.md) file.## Contributing **sqlalchemy-easy-profile** is an open source project and contributions arewelcome! Check out the [Issues](https://github.com/dmvass/sqlalchemy-easy-profile/issues)page to see if your idea for a contribution has already been mentioned, and feelfree to raise an issue or submit a pull request.</longdescription>
</pkgmetadata>