<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>requests-threads üé≠===================This repo contains a Requests session that returns awaitable TwistedDeferreds instead of Response objects.It's awesome, basically ‚Äî¬†check it out:Examples--------Example Usage (using ``async``/``await``):.. code:: pythonfrom requests_threads import AsyncSessionsession = AsyncSession()async def _main():    rs = []    for _ in range(100):        rs.append(await session.get('http://httpbin.org/get'))    print(rs)if __name__ == '__main__':    session.run(_main)*This example works on Python 3 only.*Example Usage (using Twisted):.. code:: pythonfrom twisted.internet.defer import inlineCallbacksfrom twisted.internet.task import reactimport requestssession = requests.AsyncSession(n=100)@inlineCallbacksdef main(reactor):    responses = []    for i in range(100):        responses.append(session.get('http://httpbin.org/get'))    for response in responses:        r = yield response        print(r)if __name__ == '__main__':    react(main)*This example works on Python 2 and Python 3.*--------------------Each request is sent via a new thread, automatically. This works fine for basicuse cases. This automatically uses Twisted's ``asyncioreactor``, if you do notprovide your own reactor (progress to be made there, help requested!).**This is a an experiment**, and a preview of the true asyncronous API we have panned for Requeststhat is currently *in the works*, but requires a lot of development time. If you'd like to help (p.s. **we need help**, `send me an email &lt;mailto:me@kennethreitz.org&gt;`_).This API is likely to change, over time, slightly.Installation------------::    $ pipenv install requests-threads    ‚ú®üç∞‚ú®</longdescription>
</pkgmetadata>