<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># clinlp![clinlp](media/clinlp.png)* :hospital: `clinical` + :netherlands: `nl` + :clipboard: `NLP` = :sparkles: `clinlp`* :star: Performant and production-ready NLP pipelines for clinical text written in Dutch* :rocket: Open source, created and maintained by the Dutch Clinical NLP community* :triangular_ruler: Useful out of the box, but customization highly recommendedRead the [principles and goals](#principles-and-goals), futher down :arrow_down:## Contact and contributing`clinlp` is very much still being shaped, so if you are enthusiastic about using or contributing to `clinlp`, please don't hesitate to get in touch ([email](mailto:analytics@umcutrecht.nl) | [issue](https://github.com/umcu/clinlp/issues/new)). We would be very happy to discuss your ideas and needs, whether its from the perspective of an (end) user, engineer or clinician, and formulate a roadmap with next steps together. ## Getting started### Installation```bashpip install clinlp```### Example```pythonimport spacyfrom clinlp import Termnlp = spacy.blank(&quot;clinlp&quot;)# Normalizationnlp.add_pipe(&quot;clinlp_normalizer&quot;)# Sentencesnlp.add_pipe(&quot;clinlp_sentencizer&quot;)# Entitiesconcepts = {    &quot;prematuriteit&quot;: [        &quot;preterm&quot;, &quot;&lt;p3&quot;, &quot;prematuriteit&quot;, &quot;partus praematurus&quot;    ],    &quot;hypotensie&quot;: [        &quot;hypotensie&quot;, Term(&quot;bd verlaagd&quot;, proximity=1)    ],    &quot;veneus_infarct&quot;: [        &quot;veneus infarct&quot;, Term(&quot;VI&quot;, attr=&quot;TEXT&quot;)    ]}entity_matcher = nlp.add_pipe(&quot;clinlp_entity_matcher&quot;, config={&quot;attr&quot;: &quot;NORM&quot;, &quot;fuzzy&quot;: 1})entity_matcher.load_concepts(concepts)# Qualifiersnlp.add_pipe(&quot;clinlp_context_algorithm&quot;, config={&quot;phrase_matcher_attr&quot;: &quot;NORM&quot;})text = (    &quot;Preterme neonaat (&lt;p3), bd enigszins verlaagd, familieanamnese vermeldt eveneens hypotensie &quot;    &quot;bij moeder. Thans geen aanwijzingen voor veneus infarkt wat ook geen &quot;    &quot;verklaring voor de partus prematurus is. Risico op VI blijft aanwezig.&quot;)doc = nlp(text)```Find information in the doc object:```pythonfrom spacy import displacydisplacy.render(doc, style=&quot;ent&quot;)```![example_doc_render.png](media/example_doc_render.png)With relevant qualifiers:```pythonfor ent in doc.ents:  print(ent, ent._.qualifiers_str)```* `Preterme` `set()`* `&lt;p3` `set()`* `bd enigszins verlaagd` `set()`* `hypotensie` `{'Experiencer.OTHER'}`* `veneus infarkt` `{'Negation.NEGATED'}`* `partus prematurus` `set()`* `VI` `{'Plausibility.HYPOTHETICAL'}`## Documentation### Introduction`clinlp` is built on top of spaCy, a widely used library for Natural Language Processing. Before getting started with `clinlp`, it may be useful to read [spaCy 101: Everything you need to know (~10 mins)](https://spacy.io/usage/spacy-101). Main things to know are that spaCy consists of a tokenizer (breaks a text up into small pieces, i.e. words), and various components that further process the text. Currently, `clinlp` offers the following components, tailored to Dutch Clinical text, further discussed below: 1. [Tokenizer](#tokenizer)2. [Normalizer](#normalizer)3. [Sentence splitter](#sentence-splitter)4. [Entity matcher](#entity-matcher)5. [Qualifier detection (negation, historical, etc.)](#qualifier-detection)    - [Context Algorithm](#context-algorithm)    - [Transformer based negation detection](#transformer-based-negation-detection)### TokenizerThe `clinlp` tokenizer is built into the blank model:```pythonnlp = spacy.blank(&quot;clinlp&quot;)```It employs some custom rule based logic, including:- Clinical text-specific logic for splitting punctuation, units, dosages (e.g. `20mg/dag` :arrow_right: `20` `mg` `/` `dag`)- Custom lists of abbreviations, units (e.g. `pt.`, `zn.`, `mmHg`)- Custom tokenizing rules (e.g. `xdd` :arrow_right: `x` `dd`)- Regarding [DEDUCE](https://github.com/vmenger/deduce) tags as a single token (e.g. `[DATUM-1]`).   - Deidentification is not builtin `clinlp` and should be done as a preprocessing step.### NormalizerThe normalizer sets the `Token.norm` attribute, which can be used by further components (entity matching, qualification). It currently has two options (enabled by default):- Lowercasing- Removing diacritics, where possible. For instance, it will map `ë` :arrow_right: `e`, but keeps most other non-ascii characters intact (e.g. `µ`, `²`).Note that this component only has effect when explicitly configuring successor components to match on the `Token.norm` attribute. ### Sentence splitterThe sentence splitter can be added as follows:```pythonnlp.add_pipe(&quot;clinlp_sentencizer&quot;)```It is designed to detect sentence boundaries in clinical text, whenever a character that demarks a sentence ending is matched (e.g. newline, period, question mark). It also correctly detects items in an enumerations (e.g. starting with `-` or `*`). ### Entity matcher`clinlp` includes a `clinlp_entity_matcher` component that can be used for matching entities in text, based on a dictionary of known concepts and their terms/synonyms. It includes options for matching on different token attributes, proximity matching, fuzzy matching and matching pseudo/negative terms. The most basic example would be the following, with further options described below:```pythonconcepts = {    &quot;sepsis&quot;: [        &quot;sepsis&quot;,        &quot;lijnsepsis&quot;,        &quot;systemische infectie&quot;,        &quot;bacteriemie&quot;,    ],    &quot;veneus_infarct&quot;: [        &quot;veneus infarct&quot;,        &quot;VI&quot;,    ]}entity_matcher = nlp.add_pipe(&quot;clinlp_entity_matcher&quot;)entity_matcher.load_concepts(concepts)```&gt; :bulb: The `clinlp_entity_matcher` component wraps the spaCy `Matcher` and `PhraseMatcher` components, adding some convenience and configurability. However, the `Matcher`, `PhraseMatcher` or `EntityRuler` can also be used directly with `clinlp` for those who prefer it.#### AttributeSpecify the token attribute the entity matcher should use as follows (by default `TEXT`):```pythonentity_matcher = nlp.add_pipe(&quot;clinlp_entity_matcher&quot;, config={&quot;attr&quot;: &quot;NORM&quot;})```Any [Token attribute](https://spacy.io/api/token#attributes) can be used, but in the above example the `clinlp_normalizer` should be added before the entity matcher, or the `NORM` attribute is simply the literal text. `clinlp` does not include Part of Speech tags and dependency trees, at least not until a reliable model for Dutch clinical text is created, though it's always possible to add a relevant component from a trained (general) Dutch model if needed.#### Proximity matchingThe proxmity setting defines how many tokens can optionally be skipped between the tokens of a pattern. With `proxmity` set to `1`, the pattern `slaapt slecht` will also match `slaapt vaak slecht`, but not `slaapt al weken slecht`. ```pythonentity_matcher = nlp.add_pipe(&quot;clinlp_entity_matcher&quot;, config={&quot;proximity&quot;: 1})```#### Fuzzy matchingFuzzy matching enables finding misspelled variants of terms. For instance, with `fuzzy` set to `1`, the pattern `diabetes` will also match `diabets`, `ddiabetes`, or `diabetis`, but not `diabetse` or `ddiabetess`. The threshold is based on Levenshtein distance with insertions, deletions and replacements (but not swaps).  ```pythonentity_matcher = nlp.add_pipe(&quot;clinlp_entity_matcher&quot;, config={&quot;fuzzy&quot;: 1})```Additionally, the `fuzzy_min_len` argument can be used to specify the minimum length of a phrase for fuzzy matching. This also works for multi-token phrases. For example, with `fuzzy` set to `1` and `fuzzy_min_len` set to `5`, the pattern `bloeding graad ii` would also match `bloedin graad ii`, but not `bloeding graad iii`. ```pythonentity_matcher = nlp.add_pipe(&quot;clinlp_entity_matcher&quot;, config={&quot;fuzzy&quot;: 1, &quot;fuzzy_min_len&quot;: 5})```#### TermsThe settings above are described at the matcher level, but can all be overridden at the term level by adding a `Term` to a concept, rather than a literal phrase:```pythonfrom clinlp import Termconcepts = {    &quot;sepsis&quot;: [        &quot;sepsis&quot;,        &quot;lijnsepsis&quot;,        Term(&quot;early onset&quot;, proximity=1),        Term(&quot;late onset&quot;, proximity=1),        Term(&quot;EOS&quot;, attr=&quot;TEXT&quot;, fuzzy=0),        Term(&quot;LOS&quot;, attr=&quot;TEXT&quot;, fuzzy=0)    ]}entity_matcher = nlp.add_pipe(&quot;clinlp_entity_matcher&quot;, config={&quot;attr&quot;: &quot;NORM&quot;, &quot;fuzzy&quot;: 1})entity_matcher.load_concepts(concepts)```In the above example, by default the `NORM` attribute is used, and `fuzzy` is set to `1`. In addition, for the terms `early onset` and `late onset` proximity matching is set to `1`, in addition to matcher-level config of matching the `NORM` attribute and fuzzy matching. For the `EOS` and `LOS` abbreviations the `TEXT` attribute is used (so the matching is case sensitive), and fuzzy matching is disabled. #### Pseudo/negative phrasesOn the term level, it is possible to add pseudo or negative patterns, for those phrases that need to be excluded. For example:```pythonconcepts = {    &quot;prematuriteit&quot;: [        &quot;prematuur&quot;,        Term(&quot;prematuur ademhalingspatroon&quot;, pseudo=True),    ]  }```In this case `prematuur` will be matched, but not in the context of `prematuur ademhalingspatroon` (which may indicate prematurity, but is not a definitive diagnosis).#### Spacy patternsFinally, if you need more control than literal phrases and terms as explained above, the entity matcher also accepts [spaCy patterns](https://spacy.io/usage/rule-based-matching#adding-patterns). These patterns do not respect any other configurations (like attribute, fuzzy, proximity, etc.):```pythonconcepts = {    &quot;delier&quot;: [        Term(&quot;delier&quot;, attr=&quot;NORM&quot;),        Term(&quot;DOS&quot;, attr=&quot;TEXT&quot;),        [             {&quot;NORM&quot;: {&quot;IN&quot;: [&quot;zag&quot;, &quot;ziet&quot;, &quot;hoort&quot;, &quot;hoorde&quot;, &quot;ruikt&quot;, &quot;rook&quot;]}},             {&quot;OP&quot;: &quot;?&quot;},             {&quot;OP&quot;: &quot;?&quot;},             {&quot;OP&quot;: &quot;?&quot;},             {&quot;NORM&quot;: {&quot;FUZZY1&quot;: &quot;dingen&quot;}},             {&quot;OP&quot;: &quot;?&quot;},             {&quot;NORM&quot;: &quot;die&quot;},             {&quot;NORM&quot;: &quot;er&quot;},             {&quot;OP&quot;: &quot;?&quot;},             {&quot;NORM&quot;: &quot;niet&quot;},             {&quot;OP&quot;: &quot;?&quot;},             {&quot;NORM&quot;: {&quot;IN&quot;: [&quot;zijn&quot;, &quot;waren&quot;]}}        ],    ]}```### Qualifier detectionAfter finding entities, it&quot;s often useful to qualify these entities, e.g.: are they negated or affirmed, historical or current? `clinlp` currently implements two options: the rule-based Context Algorithm, and a transformer-based negation detector. #### Context AlgorithmThe rule-based [Context Algorithm](https://doi.org/10.1016%2Fj.jbi.2009.05.002) is fairly accurate, and quite transparent and fast. A set of rules, that checks for negation, temporality, plausibility and experiencer, is loaded by default:```pythonnlp.add_pipe(&quot;clinlp_context_algorithm&quot;, config={&quot;phrase_matcher_attr&quot;: &quot;NORM&quot;})```A custom set of rules, including different types of qualifiers, can easily be defined. See [`clinlp/resources/context_rules.json`](clinlp/resources/context_rules.json) for an example, and load it as follows:```pythoncm = nlp.add_pipe(&quot;clinlp_context_algorithm&quot;, config={&quot;rules&quot;: &quot;/path/to/my_own_ruleset.json&quot;})```#### Transformer based negation detection`clinlp` also includes a wrapper around the transformer based negation detector, as described in [van Es et al, 2022](https://doi.org/10.48550/arxiv.2209.00470). The underlying transformer can be found on [huggingface](https://huggingface.co/UMCU/MedRoBERTa.nl_NegationDetection). It is reported as more accurate than the rule-based version (see paper for details), at the cost of less transparency and additional computational cost.First, install the additional dependencies:```bashpip install &quot;clinlp[transformers]&quot;```Then add it using:```pythontn = nlp.add_pipe(&quot;clinlp_negation_transformer&quot;)```Some configuration options, like the number of tokens to consider, can be specified in the `config` argument. ### Where to go from hereWe hope to extend `clinlp` with new functionality and more complete documentation in the near future. In the meantime, if any questions or problems arise, we recommend:* Checking the source code * Getting in touch ([email](mailto:analytics@umcutrecht.nl) | [issue](https://github.com/umcu/clinlp/issues/new))## Principles and goalsFunctional:* Provides NLP pipelines optimized for Dutch clinical text  * Performant and production-ready  * Useful out-of-the-box, but highly configurable* A single place to visit for your Dutch clinical NLP needs* (Re-)uses existing components where possible, implements new components where needed* Not intended for annotating, training, and analysis — already covered by existing packagesDevelopment: * Free and open source* Targeted towards the technical user* Curated and maintained by the Dutch Clinical NLP community* Built using the [`spaCy`](https://spacy.io/) framework (`&gt;3.0.0`)  * Therefore non-destructive* Work towards some level of standardization of components (abstraction, protocols)* Follows industry best practices (system design, code, documentation, testing, CI/CD)Overarching goals:* Improve the quality of Dutch Clinical NLP pipelines* Enable easier (re)use/valorization of efforts* Help mature the field of Dutch Clinical NLP* Help develop the Dutch Clinical NLP community</longdescription>
</pkgmetadata>