<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=========FlashText=========.. image:: https://api.travis-ci.org/vi3k6i5/flashtext.svg?branch=master   :target: https://travis-ci.org/vi3k6i5/flashtext   :alt: Build Status.. image:: https://readthedocs.org/projects/flashtext/badge/?version=latest   :target: http://flashtext.readthedocs.io/en/latest/?badge=latest   :alt: Documentation Status.. image:: https://badge.fury.io/py/flashtext.svg   :target: https://badge.fury.io/py/flashtext   :alt: Version.. image:: https://coveralls.io/repos/github/vi3k6i5/flashtext/badge.svg?branch=master   :target: https://coveralls.io/github/vi3k6i5/flashtext?branch=master   :alt: Test coverage.. image:: https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000   :target: https://github.com/vi3k6i5/flashtext/blob/master/LICENSE   :alt: licenseThis module can be used to replace keywords in sentences or extract keywords from sentences. It is based on the `FlashText algorithm &lt;https://arxiv.org/abs/1711.00046&gt;`_.Installation------------::    $ pip install flashtextAPI doc-------Documentation can be found at `FlashText Read the Docs&lt;http://flashtext.readthedocs.io/&gt;`_.Usage-----Extract keywords    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; # keyword_processor.add_keyword(&lt;unclean name&gt;, &lt;standardised name&gt;)    &gt;&gt;&gt; keyword_processor.add_keyword('Big Apple', 'New York')    &gt;&gt;&gt; keyword_processor.add_keyword('Bay Area')    &gt;&gt;&gt; keywords_found = keyword_processor.extract_keywords('I love Big Apple and Bay Area.')    &gt;&gt;&gt; keywords_found    &gt;&gt;&gt; # ['New York', 'Bay Area']Replace keywords    &gt;&gt;&gt; keyword_processor.add_keyword('New Delhi', 'NCR region')    &gt;&gt;&gt; new_sentence = keyword_processor.replace_keywords('I love Big Apple and new delhi.')    &gt;&gt;&gt; new_sentence    &gt;&gt;&gt; # 'I love New York and NCR region.'Case Sensitive example    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor(case_sensitive=True)    &gt;&gt;&gt; keyword_processor.add_keyword('Big Apple', 'New York')    &gt;&gt;&gt; keyword_processor.add_keyword('Bay Area')    &gt;&gt;&gt; keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.')    &gt;&gt;&gt; keywords_found    &gt;&gt;&gt; # ['Bay Area']Span of keywords extracted    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; keyword_processor.add_keyword('Big Apple', 'New York')    &gt;&gt;&gt; keyword_processor.add_keyword('Bay Area')    &gt;&gt;&gt; keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.', span_info=True)    &gt;&gt;&gt; keywords_found    &gt;&gt;&gt; # [('New York', 7, 16), ('Bay Area', 21, 29)]Get Extra information with keywords extracted    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; kp = KeywordProcessor()    &gt;&gt;&gt; kp.add_keyword('Taj Mahal', ('Monument', 'Taj Mahal'))    &gt;&gt;&gt; kp.add_keyword('Delhi', ('Location', 'Delhi'))    &gt;&gt;&gt; kp.extract_keywords('Taj Mahal is in Delhi.')    &gt;&gt;&gt; # [('Monument', 'Taj Mahal'), ('Location', 'Delhi')]    &gt;&gt;&gt; # NOTE: replace_keywords feature won't work with this.No clean name for Keywords    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; keyword_processor.add_keyword('Big Apple')    &gt;&gt;&gt; keyword_processor.add_keyword('Bay Area')    &gt;&gt;&gt; keywords_found = keyword_processor.extract_keywords('I love big Apple and Bay Area.')    &gt;&gt;&gt; keywords_found    &gt;&gt;&gt; # ['Big Apple', 'Bay Area']Add Multiple Keywords simultaneously    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; keyword_dict = {    &gt;&gt;&gt;     &quot;java&quot;: [&quot;java_2e&quot;, &quot;java programing&quot;],    &gt;&gt;&gt;     &quot;product management&quot;: [&quot;PM&quot;, &quot;product manager&quot;]    &gt;&gt;&gt; }    &gt;&gt;&gt; # {'clean_name': ['list of unclean names']}    &gt;&gt;&gt; keyword_processor.add_keywords_from_dict(keyword_dict)    &gt;&gt;&gt; # Or add keywords from a list:    &gt;&gt;&gt; keyword_processor.add_keywords_from_list([&quot;java&quot;, &quot;python&quot;])    &gt;&gt;&gt; keyword_processor.extract_keywords('I am a product manager for a java_2e platform')    &gt;&gt;&gt; # output ['product management', 'java']To Remove keywords    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; keyword_dict = {    &gt;&gt;&gt;     &quot;java&quot;: [&quot;java_2e&quot;, &quot;java programing&quot;],    &gt;&gt;&gt;     &quot;product management&quot;: [&quot;PM&quot;, &quot;product manager&quot;]    &gt;&gt;&gt; }    &gt;&gt;&gt; keyword_processor.add_keywords_from_dict(keyword_dict)    &gt;&gt;&gt; print(keyword_processor.extract_keywords('I am a product manager for a java_2e platform'))    &gt;&gt;&gt; # output ['product management', 'java']    &gt;&gt;&gt; keyword_processor.remove_keyword('java_2e')    &gt;&gt;&gt; # you can also remove keywords from a list/ dictionary    &gt;&gt;&gt; keyword_processor.remove_keywords_from_dict({&quot;product management&quot;: [&quot;PM&quot;]})    &gt;&gt;&gt; keyword_processor.remove_keywords_from_list([&quot;java programing&quot;])    &gt;&gt;&gt; keyword_processor.extract_keywords('I am a product manager for a java_2e platform')    &gt;&gt;&gt; # output ['product management']To check Number of terms in KeywordProcessor    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; keyword_dict = {    &gt;&gt;&gt;     &quot;java&quot;: [&quot;java_2e&quot;, &quot;java programing&quot;],    &gt;&gt;&gt;     &quot;product management&quot;: [&quot;PM&quot;, &quot;product manager&quot;]    &gt;&gt;&gt; }    &gt;&gt;&gt; keyword_processor.add_keywords_from_dict(keyword_dict)    &gt;&gt;&gt; print(len(keyword_processor))    &gt;&gt;&gt; # output 4To check if term is present in KeywordProcessor    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; keyword_processor.add_keyword('j2ee', 'Java')    &gt;&gt;&gt; 'j2ee' in keyword_processor    &gt;&gt;&gt; # output: True    &gt;&gt;&gt; keyword_processor.get_keyword('j2ee')    &gt;&gt;&gt; # output: Java    &gt;&gt;&gt; keyword_processor['colour'] = 'color'    &gt;&gt;&gt; keyword_processor['colour']    &gt;&gt;&gt; # output: colorGet all keywords in dictionary    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; keyword_processor.add_keyword('j2ee', 'Java')    &gt;&gt;&gt; keyword_processor.add_keyword('colour', 'color')    &gt;&gt;&gt; keyword_processor.get_all_keywords()    &gt;&gt;&gt; # output: {'colour': 'color', 'j2ee': 'Java'}For detecting Word Boundary currently any character other than this `\\w` `[A-Za-z0-9_]` is considered a word boundary.To set or add characters as part of word characters    &gt;&gt;&gt; from flashtext import KeywordProcessor    &gt;&gt;&gt; keyword_processor = KeywordProcessor()    &gt;&gt;&gt; keyword_processor.add_keyword('Big Apple')    &gt;&gt;&gt; print(keyword_processor.extract_keywords('I love Big Apple/Bay Area.'))    &gt;&gt;&gt; # ['Big Apple']    &gt;&gt;&gt; keyword_processor.add_non_word_boundary('/')    &gt;&gt;&gt; print(keyword_processor.extract_keywords('I love Big Apple/Bay Area.'))    &gt;&gt;&gt; # []Test----::    $ git clone https://github.com/vi3k6i5/flashtext    $ cd flashtext    $ pip install pytest    $ python setup.py testBuild Docs----------::    $ git clone https://github.com/vi3k6i5/flashtext    $ cd flashtext/docs    $ pip install sphinx    $ make html    $ # open _build/html/index.html in browser to view it locallyWhy not Regex?--------------It's a custom algorithm based on `Aho-Corasick algorithm&lt;https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm&gt;`_ and `Trie Dictionary&lt;https://en.wikipedia.org/wiki/Trie Dictionary&gt;`_... image:: https://github.com/vi3k6i5/flashtext/raw/master/benchmark.png   :target: https://twitter.com/RadimRehurek/status/904989624589803520   :alt: BenchmarkTime taken by FlashText to find terms in comparison to Regex... image:: https://thepracticaldev.s3.amazonaws.com/i/xruf50n6z1r37ti8rd89.pngTime taken by FlashText to replace terms in comparison to Regex... image:: https://thepracticaldev.s3.amazonaws.com/i/k44ghwp8o712dm58debj.pngLink to code for benchmarking the `Find Feature &lt;https://gist.github.com/vi3k6i5/604eefd92866d081cfa19f862224e4a0&gt;`_ and `Replace Feature &lt;https://gist.github.com/vi3k6i5/dc3335ee46ab9f650b19885e8ade6c7a&gt;`_.The idea for this library came from the following `StackOverflow question&lt;https://stackoverflow.com/questions/44178449/regex-replace-is-taking-time-for-millions-of-documents-how-to-make-it-faster&gt;`_.Citation----------The original paper published on `FlashText algorithm &lt;https://arxiv.org/abs/1711.00046&gt;`_.::    @ARTICLE{2017arXiv171100046S,       author = {{Singh}, V.},        title = &quot;{Replace or Retrieve Keywords In Documents at Scale}&quot;,      journal = {ArXiv e-prints},    archivePrefix = &quot;arXiv&quot;,       eprint = {1711.00046},     primaryClass = &quot;cs.DS&quot;,     keywords = {Computer Science - Data Structures and Algorithms},         year = 2017,        month = oct,       adsurl = {http://adsabs.harvard.edu/abs/2017arXiv171100046S},      adsnote = {Provided by the SAO/NASA Astrophysics Data System}    }The article published on `Medium freeCodeCamp &lt;https://medium.freecodecamp.org/regex-was-taking-5-days-flashtext-does-it-in-15-minutes-55f04411025f&gt;`_.Contribute----------- Issue Tracker: https://github.com/vi3k6i5/flashtext/issues- Source Code: https://github.com/vi3k6i5/flashtext/License-------The project is licensed under the MIT license.</longdescription>
</pkgmetadata>