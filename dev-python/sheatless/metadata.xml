<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sheatless - A python library for extracting parts from sheetmusic pdfsSheatless, a tool for The Beatless to become sheetless. Written and managed by the web-committee in the student orchestra The Beatless. Soon to be integrated in [taktlaus.no](https://taktlaus.no/).# API## PdfPredictor```pyclass PdfPredictor():    def __init__(        self,        pdf : BytesIO | bytes,        instruments=None,        instruments_file=None,        instruments_file_format=&quot;yaml&quot;,        use_lstm=False,        tessdata_dir=None,        tesseract_languages=[&quot;eng&quot;],        log_stream=sys.stdout,        crop_to_top=False,        crop_to_left=True,        full_score_threshold=3,        full_score_label=&quot;Full score&quot;,        ):        ...        def parts(self):        for ...:            yield  {                &quot;name&quot;: &quot;&lt;part name&gt;&quot;,                &quot;partNumber&quot;: &quot;&lt;part number&gt;&quot;,                &quot;instruments&quot;: [&quot;&lt;instrument name&quot;, ...],                &quot;fromPage&quot;: &quot;&lt;from page&gt;&quot;,                &quot;toPage&quot;: &quot;&lt;to page&gt;&quot;,            }```### Arguments for `__init__`:- `pdf`                                - PDF file object- `instruments`             (optional) - Dictionary of instruments. Will override any provided instruments file.- `instruments_file`        (optional) - Full path to instruments file or instruments file object. Accepted extensions: .yaml, .yml, .json- `instruments_file_format` (optional) - Format of instruments_file if it is a file object. Accepted formats: yaml, json  - If neither instruments_file nor instruments is provided a default instruments file will be used.- `use_lstm`                (optional) - Use LSTM instead of legacy engine mode.- `tessdata_dir`            (optional) - Full path to tessdata directory. If not provided, whatever the environment variable TESSDATA_DIR will be used.- `tesseract_languages`     (optional) - List of which languages tesseract should use.- `log_stream`              (optional) - File stream log output will be sent to. Can be set to `None` to disable logging.- `crop_to_top`             (optional) - If set to `True` (not default), PDF pages will be cropped to top half.- `crop_to_left`            (optional) - If set to `True` (default), PDF pages will be cropped to left half.- `full_score_threshold`    (optional) - If the number of parts predicted in one pages is greater than this number, `full_score_label` will be considered as the predicted part instead.- `full_score_label`        (optional) - The label to use for identifying a full score.## processUploadedPdf```pythondef processUploadedPdf(pdfPath, imagesDirPath, instruments_file=None, instruments=None, use_lstm=False, tessdata_dir=None):    ...    return parts, instrumentsDefaultParts```which will be available with```pythonfrom sheatless import processUploadedPdf```Arguments description here:| Argument         | Optional   | Description                                                                                                      || ---------------- | ---------- | ---------------------------------------------------------------------------------------------------------------- || pdfPath          |            | Full path to PDF file.                                                                                           || imagesDirPath    |            | Full path to output images.                                                                                      || instruments_file | (optional) | Full path to instruments file. Accepted formats: YAML (.yaml, .yml), JSON (.json).                               || instruments      | (optional) | Dictionary of instruments. Will override any provided instruments file.                                          ||                  |            | If neither instruments_file nor instruments is provided a default instruments file will be used.                 || use_lstm         | (optional) | Use LSTM instead of legacy engine mode.                                                                          || tessdata_dir     | (optional) | Full path to tessdata directory. If not provided, whatever the environment variable `TESSDATA_DIR` will be used. |Returns description here:| Return                  | Description                                                                                                                                     || ----------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- || parts                   | A list of dictionaries `{ &quot;name&quot;: &quot;name&quot;, &quot;instruments&quot;: [&quot;instrument 1&quot;, &quot;instrument 2&quot;...] &quot;fromPage&quot;: i, &quot;toPage&quot;: j }` describing each part || instrumentsDefaultParts | A dictionary `{ ..., &quot;instrument_i&quot;: j, ... }`, where `j` is the index in the parts list for the default part for `instrument_i`.               |## predict_parts_in_pdf```pydef predict_parts_in_pdf(    pdf : BytesIO | bytes,    instruments=None,    instruments_file=None,    instruments_file_format=&quot;yaml&quot;,    use_lstm=False,    tessdata_dir=None,    ):    ...    return parts, instrumentsDefaultParts```### Arguments:- pdf                                - PDF file object- instruments             (optional) - Dictionary of instruments. Will override any provided instruments file.- instruments_file        (optional) - Full path to instruments file or instruments file object. Accepted extensions: .yaml, .yml, .json- instruments_file_format (optional) - Format of instruments_file if it is a file object. Accepted formats: yaml, json  - If neither instruments_file nor instruments is provided a default instruments file will be used.- use_lstm                (optional) - Use LSTM instead of legacy engine mode.- tessdata_dir            (optional) - Full path to tessdata directory. If not provided, whatever the environment variable TESSDATA_DIR will be used.### Returns:- parts                              - A list of dictionaries `{ &quot;name&quot;: &quot;name&quot;, &quot;instruments&quot;: [&quot;instrument 1&quot;, &quot;instrument 2&quot;...] &quot;fromPage&quot;: i, &quot;toPage&quot;: j }` describing each part- instrumentsDefaultParts            - A dictionary `{ ..., &quot;instrument_i&quot;: j, ... }`, where j is the index in the parts list for the default part for instrument_i.## predict_parts_in_img```pydef predict_parts_in_img(img : io.BytesIO | bytes | PIL.Image.Image, instruments, use_lstm=False, tessdata_dir=None) -&gt; typing.Tuple[list, list]:    ...    return partNames, instrumentses```### Arguments:- img                     - image object- instruments             - dictionary of instruments- use_lstm     (optional) - Use LSTM instead of legacy engine mode.- tessdata_dir (optional) - Full path to tessdata directory. If not provided, whatever the environment variable TESSDATA_DIR will be used.### Returns:- partNames               - a list of part names- instrumentses           - a list of lists of instruments for each part# Example docker setupSheatless requires tesseract and poppler installed on the system to work. An example docker setup as well as integration of the library can be found in [sheatless-splitter](https://github.com/sigurdo/sheatless-splitter).</longdescription>
</pkgmetadata>