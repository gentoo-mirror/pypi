<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;docs/images/widevine_icon_24.png&quot;&gt; &lt;a href=&quot;https://github.com/devine-dl/pywidevine&quot;&gt;pywidevine&lt;/a&gt;    &lt;br/&gt;    &lt;sup&gt;&lt;em&gt;Python Widevine CDM implementation&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/devine-dl/pywidevine/actions/workflows/ci.yml&quot;&gt;        &lt;img src=&quot;https://github.com/devine-dl/pywidevine/actions/workflows/ci.yml/badge.svg&quot; alt=&quot;Build status&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/pywidevine&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/python-3.7%2B-informational&quot; alt=&quot;Python version&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://deepsource.io/gh/devine-dl/pywidevine&quot;&gt;        &lt;img src=&quot;https://deepsource.io/gh/devine-dl/pywidevine.svg/?label=active+issues&quot; alt=&quot;DeepSource&quot;&gt;    &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/astral-sh/ruff&quot;&gt;        &lt;img src=&quot;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&quot; alt=&quot;Linter: Ruff&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://python-poetry.org&quot;&gt;        &lt;img src=&quot;https://img.shields.io/endpoint?url=https://python-poetry.org/badge/v0.json&quot; alt=&quot;Dependency management: Poetry&quot;&gt;    &lt;/a&gt;&lt;/p&gt;## Features- üöÄ Seamless Installation via [pip](#installation)- üõ°Ô∏è Robust Security with message signature verification- üôà Privacy Mode with Service Certificates- üåê Servable CDM API Server and Client with Authentication- üì¶ Custom provision serialization format (WVD v2)- üß∞ Create, parse, or convert PSSH headers with ease- üóÉÔ∏è User-friendly YAML configuration- ‚ù§Ô∏è Forever FOSS!## Installation```shell$ pip install pywidevine```&gt; **Note**If pip gives you a warning about a path not being in your PATH environment variable then promptly add that path thenclose all open command prompt/terminal windows, or `pywidevine` CLI won't work as it will not be found.Voil√† üéâ ‚Äî You now have the `pywidevine` package installed!  You can now import pywidevine in scripts ([see below](#usage)).  A command-line interface is also available, try `pywidevine --help`.## UsageThe following is a minimal example of using pywidevine in a script to get a License for Bitmovin'sArt of Motion Demo.```pyfrom pywidevine.cdm import Cdmfrom pywidevine.device import Devicefrom pywidevine.pssh import PSSHimport requests# prepare psshpssh = PSSH(&quot;AAAAW3Bzc2gAAAAA7e+LqXnWSs6jyCfc1R0h7QAAADsIARIQ62dqu8s0Xpa&quot;            &quot;7z2FmMPGj2hoNd2lkZXZpbmVfdGVzdCIQZmtqM2xqYVNkZmFsa3IzaioCSEQyAA==&quot;)# load devicedevice = Device.load(&quot;C:/Path/To/A/Provision.wvd&quot;)# load cdmcdm = Cdm.from_device(device)# open cdm sessionsession_id = cdm.open()# get license challengechallenge = cdm.get_license_challenge(session_id, pssh)# send license challenge (assuming a generic license server SDK with no API front)licence = requests.post(&quot;https://...&quot;, data=challenge)licence.raise_for_status()# parse license challengecdm.parse_license(session_id, licence.content)# print keysfor key in cdm.get_keys(session_id):    print(f&quot;[{key.type}] {key.kid.hex}:{key.key.hex()}&quot;)# close session, disposes of session datacdm.close(session_id)```&gt; **Note**&gt; There are various features not shown in this specific example like:&gt;&gt; - Privacy Mode&gt; - Setting Service Certificates&gt; - Remote CDMs and Serving&gt; - Choosing a License Type to request&gt; - Creating WVD files&gt; - and much more!&gt;&gt; Take a look at the methods available in the [Cdm class](/pywidevine/cdm.py) and their doc-strings for&gt; further information. For more examples see the [CLI functions](/pywidevine/main.py) which uses a lot&gt; of previously mentioned features.## Disclaimer1. This project requires a valid Google-provisioned Private Key and Client Identification blob which are not   provided by this project.2. Public test provisions are available and provided by Google to use for testing projects such as this one.3. License Servers have the ability to block requests from any provision, and are likely already blocking test   provisions on production endpoints.4. This project does not condone piracy or any action against the terms of the DRM systems.5. All efforts in this project have been the result of Reverse-Engineering, Publicly available research, and Trial   &amp; Error.## Key and Output Security*Licenses, Content Keys, and Decrypted Data is not secure in this CDM implementation.*The Content Decryption Module is meant to do all downloading, decrypting, and decoding of content, not just licenseacquisition. This Python implementation only does License Acquisition within the CDM.The section of which a 'Decrypt Frame' call is made would be more of a 'Decrypt File' in this implementation. Justreturning the original file in plain text defeats the point of the DRM. Even if 'Decrypt File' was somehow secure, theContent Keys used to decrypt the files are already exposed to the caller anyway, allowing them to manually decrypt.An attack on a 'Decrypt Frame' system would be analogous to doing an HDMI capture or similar attack. This is because itwould require re-encoding the video by splicing each individual frame with the right frame-rate, syncing to audio, andmore.While a 'Decrypt Video' system would be analogous to downloading a Video and passing it through a script. Not much ofan attack if at all. The only protection against a system like this would be monitoring the provision and acquisitionsof licenses and prevent them. This can be done by revoking the device provision, or the user or their authorization tothe service.There isn't any immediate way to secure either Key or Decrypted information within a Python environment that is notHardware backed. Even if obfuscation or some other form of Security by Obscurity was used, this is a Software-basedContent Protection Module (in Python no less) with no hardware backed security. It would be incredibly trivial to breakany sort of protection against retrieving the original video data.Though, it's not impossible. Google's Chrome Browser CDM is a simple library extension file programmed in C++ that hasbeen improving its security using math and obscurity for years. It's getting harder and harder to break with its latestversions only being beaten by Brute-force style methods. However, they have a huge team of very skilled workers, andmaking a CDM in C++ has immediate security benefits and a lot of methods to obscure and obfuscate the code.## Contributors&lt;a href=&quot;https://github.com/rlaphoenix&quot;&gt;&lt;img src=&quot;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/17136956?v=4&amp;h=25&amp;w=25&amp;fit=cover&amp;mask=circle&amp;maxage=7d&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mediaminister&quot;&gt;&lt;img src=&quot;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/45148099?v=4&amp;h=25&amp;w=25&amp;fit=cover&amp;mask=circle&amp;maxage=7d&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;## LicensingThis software is licensed under the terms of [GNU General Public License, Version 3.0](LICENSE).  You can find a copy of the license in the LICENSE file in the root folder.- Widevine Icon &amp;copy; Google.- Props to the awesome community for their shared research and insight into the Widevine Protocol and Key Derivation.* * *¬© rlaphoenix 2022-2023</longdescription>
</pkgmetadata>