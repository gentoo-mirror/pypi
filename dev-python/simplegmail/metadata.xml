<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># simplegmail[![PyPI Downloads](https://img.shields.io/pypi/dm/simplegmail.svg?label=PyPI%20downloads)](https://pypi.org/project/simplegmail/)A simple Gmail API client in Python for applications.---Currently Supported Behavior:- Sending html messages- Sending messages with attachments- Sending messages with your Gmail account signature- Retrieving messages with the full suite of Gmail's search capabilities- Retrieving messages with attachments, and downloading attachments- Modifying message labels (includes marking as read/unread, important/not   important, starred/unstarred, trash/untrash, inbox/archive)## Table of Contents- [Getting Started](#getting-started)- [Installation](#installation)- [Usage](#usage)    - [Send a simple message](#send-a-simple-message)    - [Send a message with attachments, cc, bcc fields](#send-a-message-with-attachments-cc-bcc-fields)    - [Retrieving messages](#retrieving-messages)    - [Marking messages](#marking-messages)    - [Changing message labels](#changing-message-labels)    - [Downloading attachments](#downloading-attachments)    - [Retrieving messages with queries](#retrieving-messages-advanced-with-queries)    - [Retrieving messages with more advanced queries](#retrieving-messages-more-advanced-with-more-queries)- [Feedback](#feedback)## Getting StartedThe only setup required is to download an OAuth 2.0 Client ID file from Googlethat will authorize your application.This can be done at: https://console.developers.google.com/apis/credentials.For those who haven't created a credential for Google's API, after clicking the link above (and logging in to the appropriate account),1. Select/create the project that this authentication is for (if creating a new project make sure to configure the OAuth consent screen; you only need to set an Application name)2. Click on the &quot;Dashboard&quot; tab, then &quot;Enable APIs and Services&quot;. Search for Gmail and enable.3. Click on the Credentials tab, then &quot;Create Credentials&quot; &gt; &quot;OAuth client ID&quot;.4. Select what kind of application this is for, and give it a memorable name.Fill out all necessary information for the credential (e.g., if choosing &quot;Web Application&quot; make sure to add an Authorized Redirect URI. See https://developers.google.com/identity/protocols/oauth2 for more infomation).5. Back on the credentials screen, click the download icon next to the credential you just created to download it as a JSON object.6. Save this file as &quot;client_secret.json&quot; and place it in the root directory of your application. (The `Gmail` class takes in an argument for the name of this file if you choose to name it otherwise.)The first time you create a new instance of the `Gmail` class, a browser window will open, and you'll be asked to give permissions to the application. This will save an access token in a file named &quot;gmail-token.json&quot;, and only needs to occur once.You are now good to go!Note about authentication method: I have opted not to use a username-password authentication (through imap/smtp), since using Google's authorization is both significantly safer and avoids clashing with Google's many security measures.## InstallationInstall using `pip` (Python3).```bashpip3 install simplegmail```## Usage### Send a simple message:```pythonfrom simplegmail import Gmailgmail = Gmail() # will open a browser window to ask you to log in and authenticateparams = {  &quot;to&quot;: &quot;you@youremail.com&quot;,  &quot;sender&quot;: &quot;me@myemail.com&quot;,  &quot;subject&quot;: &quot;My first email&quot;,  &quot;msg_html&quot;: &quot;&lt;h1&gt;Woah, my first email!&lt;/h1&gt;&lt;br /&gt;This is an HTML email.&quot;,  &quot;msg_plain&quot;: &quot;Hi\nThis is a plain text email.&quot;,  &quot;signature&quot;: True  # use my account signature}message = gmail.send_message(**params)  # equivalent to send_message(to=&quot;you@youremail.com&quot;, sender=...)```### Send a message with attachments, cc, bcc fields:```pythonfrom simplegmail import Gmailgmail = Gmail()params = {  &quot;to&quot;: &quot;you@youremail.com&quot;,  &quot;sender&quot;: &quot;me@myemail.com&quot;,  &quot;cc&quot;: [&quot;bob@bobsemail.com&quot;],  &quot;bcc&quot;: [&quot;marie@gossip.com&quot;, &quot;hidden@whereami.com&quot;],  &quot;subject&quot;: &quot;My first email&quot;,  &quot;msg_html&quot;: &quot;&lt;h1&gt;Woah, my first email!&lt;/h1&gt;&lt;br /&gt;This is an HTML email.&quot;,  &quot;msg_plain&quot;: &quot;Hi\nThis is a plain text email.&quot;,  &quot;attachments&quot;: [&quot;path/to/something/cool.pdf&quot;, &quot;path/to/image.jpg&quot;, &quot;path/to/script.py&quot;],  &quot;signature&quot;: True  # use my account signature}message = gmail.send_message(**params)  # equivalent to send_message(to=&quot;you@youremail.com&quot;, sender=...)```It couldn't be easier!### Retrieving messages:```pythonfrom simplegmail import Gmailgmail = Gmail()# Unread messages in your inboxmessages = gmail.get_unread_inbox()# Starred messagesmessages = gmail.get_starred_messages()# ...and many more easy to use functions can be found in gmail.py!# Print them out!for message in messages:    print(&quot;To: &quot; + message.recipient)    print(&quot;From: &quot; + message.sender)    print(&quot;Subject: &quot; + message.subject)    print(&quot;Date: &quot; + message.date)    print(&quot;Preview: &quot; + message.snippet)    print(&quot;Message Body: &quot; + message.plain)  # or message.html```### Marking messages:```pythonfrom simplegmail import Gmailgmail = Gmail()messages = gmail.get_unread_inbox()message_to_read = messages[0]message_to_read.mark_as_read()# Oops, I want to mark as unread nowmessage_to_read.mark_as_unread()message_to_star = messages[1]message_to_star.star()message_to_trash = messages[2]message_to_trash.trash()# ...and many more functions can be found in message.py!```### Changing message labels:```pythonfrom simplegmail import Gmailgmail = Gmail()# Get the label objects for your account. Each label has a specific ID that # you need, not just the name!labels = gmail.list_labels()# To find a label by the name that you know (just an example):finance_label = list(filter(lambda x: x.name == 'Finance', labels))[0]messages = gmail.get_unread_inbox()# We can add/remove a labelmessage = messages[0]message.add_label(finance_label) # We can &quot;move&quot; a message from one label to anothermessage.modify_labels(to_add=labels[10], to_remove=finance_label)# ...check out the code in message.py for more!```### Downloading attachments:```pythonfrom simplegmail import Gmailgmail = Gmail()messages = gmail.get_unread_inbox()message = messages[0]if message.attachments:    for attm in message.attachments:        print('File: ' + attm.filename)        attm.save()  # downloads and saves each attachment under it's stored                     # filename. You can download without saving with `attm.download()````### Retrieving messages (advanced, with queries!):```pythonfrom simplegmail import Gmailfrom simplegmail.query import construct_querygmail = Gmail()# Unread messages in inbox with label &quot;Work&quot;labels = gmail.list_labels()work_label = list(filter(lambda x: x.name == 'Work', labels))[0]messages = gmail.get_unread_inbox(labels=[work_label])# For even more control use queries:# Messages that are: newer than 2 days old, unread, labeled &quot;Finance&quot; or both &quot;Homework&quot; and &quot;CS&quot;query_params = {    &quot;newer_than&quot;: (2, &quot;day&quot;),    &quot;unread&quot;: True,    &quot;labels&quot;:[[&quot;Work&quot;], [&quot;Homework&quot;, &quot;CS&quot;]]}messages = gmail.get_messages(query=construct_query(query_params))# We could have also accomplished this with# messages = gmail.get_unread_messages(query=construct_query(newer_than=(2, &quot;day&quot;), labels=[[&quot;Work&quot;], [&quot;Homework&quot;, &quot;CS&quot;]]))# There are many, many different ways of achieving the same result with search.```### Retrieving messages (more advanced, with more queries!):```pythonfrom simplegmail import Gmailfrom simplegmail.query import construct_querygmail = Gmail()# For even more control use queries:# Messages that are either:#   newer than 2 days old, unread, labeled &quot;Finance&quot; or both &quot;Homework&quot; and &quot;CS&quot;#     or#   newer than 1 month old, unread, labeled &quot;Top Secret&quot;, but not starred.labels = gmail.list_labels()# Construct our two queries separatelyquery_params_1 = {    &quot;newer_than&quot;: (2, &quot;day&quot;),    &quot;unread&quot;: True,    &quot;labels&quot;:[[&quot;Finance&quot;], [&quot;Homework&quot;, &quot;CS&quot;]]}query_params_2 = {    &quot;newer_than&quot;: (1, &quot;month&quot;),    &quot;unread&quot;: True,    &quot;labels&quot;: [&quot;Top Secret&quot;],    &quot;exclude_starred&quot;: True}# construct_query() will create both query strings and &quot;or&quot; them together.messages = gmail.get_messages(query=construct_query(query_params_1, query_params_2))```For more on what you can do with queries, read the docstring for `construct_query()` in `query.py`.## FeedbackIf there is functionality you'd like to see added, or any bugs in this project,please let me know by posting an issue or submitting a pull request!</longdescription>
</pkgmetadata>