<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![yankee_logo](https://raw.githubusercontent.com/parkerhancock/yankee/master/docs/_static/yankee_logo.svg)](https://patent-client.readthedocs.io)[![Documentation](https://img.shields.io/readthedocs/yankee/stable)](https://yankee.readthedocs.io/en/stable/)[![PyPI](https://img.shields.io/pypi/v/yankee?color=blue)](https://pypi.org/project/yankee)[![PyPI - Python Versions](https://img.shields.io/pypi/pyversions/yankee)](https://pypi.org/project/yankee)[![PyPI - Downloads](https://img.shields.io/pypi/dm/yankee?color=blue)](https://pypi.org/project/yankee)# SummarySimple declarative data extraction and loading in Python, featuring:- üç∞ **Ease of use:** Data extraction is performed in a simple, declarative types.- ‚öô **XML / HTML / JSON Extraction:** Extraction can be performed across a wide array of structured data- üêº **Pandas Integration:** Results are easily castable to [Pandas Dataframes and Series][pandas].- üòÄ **Custom Output Classes:** Results can be automatically loaded into autogenerated dataclasses, or custom model types.- üöÄ **Performance:** XML loading is supported by the excellent and fast [lxml] library, JSON is supported by [UltraJSON][ujson] for fast parsing, and [jsonpath_ng] for flexible data extraction.  [lxml]: https://lxml.de/[ujson]:https://github.com/ultrajson/ultrajson[jsonpath_ng]: https://github.com/h2non/jsonpath-ng[pandas]: https://pandas.pydata.org/pandas-docs/stable/## Quick StartTo extract data from **XML**, use this import statement, and see the example below:```pythonfrom yankee.xml.schema import Schema, fields as f, CSSSelector```To extract data from **JSON**, use this import statement, and see the example below:```pythonfrom yankee.xml.schema import Schema, fields as f, JSONPath```To extract data from **HTML**, use this import statement:```pythonfrom yankee.html.schema import Schema, fields as f, CSSSelector```To extract data from **Python objects** (either objects or dictionaries), use this import statement:```pythonfrom yankee.base.schema import Schema, fields as f```&lt;!-- RTD-IGNORE --&gt;## DocumentationComplete documentation is available on [Read The Docs][Read The Docs]: https://yankee.readthedocs.io/en/latest/&lt;!-- END-RTD-IGNORE --&gt;## Examples### Extract data from XMLData extraction from XML. By default, data keys are XPath expressions, but can also be CSS selectors.Take this:```xml    &lt;xmlObject&gt;        &lt;name&gt;Johnny Appleseed&lt;/name&gt;        &lt;birthdate&gt;2000-01-01&lt;/birthdate&gt;        &lt;something&gt;            &lt;many&gt;                &lt;levels&gt;                    &lt;deep&gt;123&lt;/deep&gt;                &lt;/levels&gt;            &lt;/many&gt;        &lt;/something&gt;    &lt;/xmlObject&gt;```Do this:```pythonfrom yankee.xml.schema import Schema, fields as f, CSSSelectorclass XmlExample(Schema):    name = f.String(&quot;./name&quot;)    birthday = f.Date(CSSSelector(&quot;birthdate&quot;))    deep_data = f.Int(&quot;./something/many/levels/deep&quot;)XmlExample().load(xml_doc)```Get this:```python{    &quot;name&quot;: &quot;Johnny Appleseed&quot;,    &quot;birthday&quot;: datetime.date(2000, 1, 1),    &quot;deep_data&quot;: 123}```### Extract data from JSONData extraction from JSON. By default, data keys are implied from the field names, but can also be JSONPath expressionsTake this:```json{        &quot;name&quot;: &quot;Johnny Appleseed&quot;,        &quot;birthdate&quot;: &quot;2000-01-01&quot;,        &quot;something&quot;: [            {&quot;many&quot;: {                &quot;levels&quot;: {                    &quot;deep&quot;: 123                }            }}        ]    }```Do this:```pythonfrom yankee.json.schema import Schema, fields as fclass JsonExample(Schema):    name = f.String()    birthday = f.Date(&quot;birthdate&quot;)    deep_data = f.Int(&quot;something.0.many.levels.deep&quot;)```Get this:```python{    &quot;name&quot;: &quot;Johnny Appleseed&quot;,    &quot;birthday&quot;: datetime.date(2000, 1, 1),    &quot;deep_data&quot;: 123}```</longdescription>
</pkgmetadata>