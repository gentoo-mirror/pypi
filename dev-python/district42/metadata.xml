<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># district42[![Codecov](https://img.shields.io/codecov/c/github/nikitanovosibirsk/district42/master.svg?style=flat-square)](https://codecov.io/gh/nikitanovosibirsk/district42)[![PyPI](https://img.shields.io/pypi/v/district42.svg?style=flat-square)](https://pypi.python.org/pypi/district42/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/district42?style=flat-square)](https://pypi.python.org/pypi/district42/)[![Python Version](https://img.shields.io/pypi/pyversions/district42.svg?style=flat-square)](https://pypi.python.org/pypi/district42/)Data description language for defining data models## Installation```shpip3 install district42```## Usage```pythonfrom district42 import schemaUserSchema = schema.dict({    &quot;id&quot;: schema.int.min(1),    &quot;name&quot;: schema.str | schema.none,    &quot;is_deleted&quot;: schema.bool,})print(UserSchema)```More powerful with:- [blahblah](https://github.com/nikitanovosibirsk/blahblah) — Fake data generator- [valera](https://github.com/nikitanovosibirsk/valera) — Validator- [revolt](https://github.com/nikitanovosibirsk/revolt) — Value substitutorAnd [more](https://github.com/topics/district42)## Documentation* [Documentation](#documentation)  * [None](#none)    * [schema.none](#schemanone)  * [Bool](#bool)    * [schema.bool](#schemabool)    * [schema.bool(`value`)](#schemaboolvalue)  * [Int](#int)    * [schema.int](#schemaint)    * [schema.int(`value`)](#schemaintvalue)    * [schema.int.min(`value`)](#schemaintminvalue)    * [schema.int.max(`value`)](#schemaintmaxvalue)  * [Float](#float)    * [schema.float](#schemafloat)    * [schema.float(`value`)](#schemafloatvalue)    * [schema.float.min(`value`)](#schemafloatminvalue)    * [schema.float.max(`value`)](#schemafloatmaxvalue)  * [Str](#str)    * [schema.str](#schemastr)    * [schema.str.len(`length`)](#schemastrlenlength)    * [schema.str.len(`min_length`, `max_length`)](#schemastrlenmin_length-max_length)    * [schema.str.alphabet(`letters`)](#schemastralphabetletters)    * [schema.str.contains(`substr`)](#schemastrcontainssubstr)    * [schema.str.regex(`pattern`)](#schemastrregexpattern)  * [List](#list)    * [schema.list](#schemalist)    * [schema.list(`elements`)](#schemalistelements)    * [schema.list(`type`)](#schemalisttype)    * [schema.list(`type`).len(`length`)](#schemalisttypelenlength)    * [schema.list(`type`).len(`min_length`, `max_length`)](#schemalisttypelenmin_length-max_length)  * [Dict](#dict)    * [schema.dict](#schemadict)    * [schema.dict(`keys`)](#schemadictkeys)  * [Any](#any)    * [schema.any](#schemaany)    * [schema.any(`*types`)](#schemaanytypes)  * [Custom Types](#custom-types)    * [1. Declare Schema](#1-declare-schema)    * [2. Register Representor](#2-register-representor)    * [3. Use](#3-use)### None#### schema.none```pythonsch = schema.none```### Bool#### schema.bool```pythonsch = schema.bool```#### schema.bool(`value`)```pythonsch = schema.bool(True)```### Int#### schema.int```pythonsch = schema.int```#### schema.int(`value`)```pythonsch = schema.int(42)```#### schema.int.min(`value`)```pythonsch = schema.int.min(0)```#### schema.int.max(`value`)```pythonsch = schema.int.max(0)```### Float#### schema.float```pythonsch = schema.float```#### schema.float(`value`)```pythonsch = schema.float(3.14)```#### schema.float.min(`value`)```pythonsch = schema.float.min(0.0)```#### schema.float.max(`value`)```pythonsch = schema.float.max(0.0)```### Str#### schema.str```pythonsch = schema.str```#### schema.str.len(`length`)```pythonsch = schema.str.len(10)```#### schema.str.len(`min_length`, `max_length`)```pythonsch = schema.str.len(1, ...)``````pythonsch = schema.str.len(..., 32)``````pythonsch = schema.str.len(1, 32)```#### schema.str.alphabet(`letters`)```pythondigits = &quot;01234567890&quot;sch = schema.str.alphabet(digits)```#### schema.str.contains(`substr`)```pythonsch = schema.str.contains(&quot;@&quot;)```#### schema.str.regex(`pattern`)```pythonimport resch = schema.str.regex(r&quot;[a-z]+&quot;)```### List#### schema.list```pythonsch = schema.list```#### schema.list(`elements`)```pythonsch = schema.list([schema.int(1), schema.int(2)])```#### schema.list(`type`)```pythonsch = schema.list(schema.int)```#### schema.list(`type`).len(`length`)```pythonsch = schema.list(schema.int).len(3)```#### schema.list(`type`).len(`min_length`, `max_length`)```pythonsch = schema.list(schema.int).len(1, ...)``````pythonsch = schema.list(schema.int).len(..., 10)``````pythonsch = schema.list(schema.int).len(1, 10)```### Dict#### schema.dict```pythonsch = schema.dict```#### schema.dict(`keys`)```pythonsch = schema.dict({    &quot;id&quot;: schema.int,    &quot;name&quot;: schema.str | schema.none,    optional(&quot;platform&quot;): schema.str,})```### Any#### schema.any```pythonsch = schema.any```#### schema.any(`*types`)```pythonsch = schema.any(schema.str, schema.int)```### Custom Types#### 1. Declare Schema```pythonfrom typing import Anyfrom uuid import UUIDfrom district42 import Props, SchemaVisitor, SchemaVisitorReturnType as ReturnTypefrom district42.types import Schemafrom niltype import Nilableclass UUIDProps(Props):    @property    def value(self) -&gt; Nilable[UUID]:        return self.get(&quot;value&quot;)class UUIDSchema(Schema[UUIDProps]):    def __accept__(self, visitor: SchemaVisitor[ReturnType], **kwargs: Any) -&gt; ReturnType:        return visitor.visit_uuid(self, **kwargs)    def __call__(self, /, value: UUID) -&gt; &quot;UUIDSchema&quot;:        return self.__class__(self.props.update(value=value))```#### 2. Register Representor```pythonfrom typing import Anyfrom district42.representor import Representorfrom niltype import Nilclass UUIDRepresentor(Representor, extend=True):    def visit_uuid(self, schema: UUIDSchema, *, indent: int = 0, **kwargs: Any) -&gt; str:        r = f&quot;{self._name}.uuid&quot;        if schema.props.value is not Nil:            r += f&quot;({schema.props.value!r})&quot;        return r```#### 3. Use```pythonfrom uuid import uuid4from district42 import register_type, schemaregister_type(&quot;uuid&quot;, UUIDSchema)print(schema.uuid(uuid4()))# schema.uuid(UUID('ce80d2b7-cdce-4e24-ab26-00c75471ce78'))```Full code available here: [district42_exp_types/uuid](https://github.com/nikitanovosibirsk/district42-exp-types/tree/master/district42_exp_types/uuid)</longdescription>
</pkgmetadata>