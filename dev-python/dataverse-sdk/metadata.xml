<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dataverse SDK For PythonDataverse is a MLOPs platform for assisting in data selection, data visualization and model training in comupter vision.Use Dataverse-SDK for Python to help you to interact with the Dataverse platform by Python. Currently, the library supports:  - Create Project with your input ontology and sensors  - Get Project by project-id  - Create Dataset from your AWS/Azure storage or local  - Get Dataset by dataset-id[Package (PyPi)](https://test.pypi.org/project/dataverse-sdk/)    |   [Source code](https://github.com/linkernetworks/dataverse-sdk)## Getting started### Install the package```pip install dataverse-sdk```**Prerequisites**: You must have an Dataverse Platform Account and [Python 3.9+](https://www.python.org/downloads/) to use this package.### Create the clientInteraction with the Dataverse site starts with an instance of the `DataverseClient` class. You need an email-account and its password to instantiate the client object.```Pythonfrom dataverse_sdk import *from dataverse_sdk.connections import get_connectionclient = DataverseClient(    host=DataverseHost.STAGING, email=&quot;XXX&quot;, password=&quot;***&quot;)assert client is get_connection()```## Key conceptsOnce you've initialized a DataverseClient, you can interact with Dataverse from the initialized object.## ExamplesThe following sections provide examples for the most common DataVerse tasksm including:* [List Projects](#list-projects)* [Create Project](#create-project)* [Get Project](#get-project)* [Create Dataset](#create-dataset)* [Get Dataset](#get-dataset)* [List Models](#list-models)### List ProjectsThe `list_projects` method will list all projects of the given sites.```Pythonprojects = client.list_projects(current_user = True,                                exclude_sensor_type=SensorType.LIDAR,                                image_type= OntologyImageType._2D_BOUNDING_BOX)```### Create ProjectThe `create_project` method will create project on the connected site with the defined ontology and sensors.```Pythonontology = Ontology(    name=&quot;test ot&quot;,    image_type=OntologyImageType._2D_BOUNDING_BOX,    classes=[        OntologyClass(name=&quot;Pedestrian&quot;, rank=1, color=&quot;#234567&quot;),        OntologyClass(name=&quot;Truck&quot;, rank=2, color=&quot;#345678&quot;),        OntologyClass(name=&quot;Car&quot;, rank=3, color=&quot;#456789&quot;),        OntologyClass(name=&quot;Cyclist&quot;, rank=4, color=&quot;#567890&quot;),        OntologyClass(name=&quot;DontCare&quot;, rank=5, color=&quot;#6789AB&quot;),        OntologyClass(name=&quot;Misc&quot;, rank=6, color=&quot;#789AB1&quot;),        OntologyClass(name=&quot;Van&quot;, rank=7, color=&quot;#89AB12&quot;),        OntologyClass(name=&quot;Tram&quot;, rank=8, color=&quot;#9AB123&quot;),        OntologyClass(name=&quot;Person_sitting&quot;, rank=9, color=&quot;#AB1234&quot;),    ],)sensors = [    Sensor(name=&quot;camera 1&quot;, type=SensorType.CAMERA),    Sensor(name=&quot;lidar 1&quot;, type=SensorType.LIDAR),]project_tag = ProjectTag(    attributes=[        {&quot;name&quot;: &quot;year&quot;, &quot;type&quot;: &quot;number&quot;},        {            &quot;name&quot;: &quot;unknown_object&quot;,            &quot;type&quot;: &quot;option&quot;,            &quot;options&quot;: [{&quot;value&quot;: &quot;fire&quot;}, {&quot;value&quot;: &quot;leaves&quot;}, {&quot;value&quot;: &quot;water&quot;}],        },    ])project = client.create_project(name=&quot;test project&quot;, ontology=ontology, sensors=sensors, project_tag=project_tag)```### Get ProjectThe `get_proejct` method retrieves the project from the connected site. The `id` parameter is the unique interger ID of the project, not its &quot;name&quot; property.```Pythonproject = client.get_project(id)```### Create Dataset* Use `create_dataset` to create dataset from **cloud storage**```Pythondataset_data = {    &quot;data_source&quot;: DataSource.Azure/Datasource.AWS,    &quot;storage_url&quot;: &quot;storage/url&quot;,    &quot;container_name&quot;: &quot;azure container name&quot;,    &quot;data_folder&quot;: &quot;datafolder/to/vai_anno&quot;,    &quot;sas_token&quot;: &quot;azure sas token&quot;,    &quot;name&quot;: &quot;Dataset 1&quot;,    &quot;type&quot;: DatasetType.ANNOTATED_DATA,    &quot;annotations&quot;: [&quot;groundtruth&quot;]    &quot;generate_metadata&quot;: False,    &quot;render_pcd&quot;: False,    &quot;annotation_format&quot;: AnnotationFormat.VISION_AI,    &quot;sequential&quot;: False,    &quot;sensors&quot;: project.sensors,}dataset = project.create_dataset(**dataset_data)```* Use `create_dataset` to create dataset from **your local directory**```Pythondataset_data = {    &quot;data_source&quot;: DataSource.SDK,    &quot;storage_url&quot; : &quot;&quot;,    &quot;container_name&quot;: &quot;&quot;,    &quot;sas_token&quot;:&quot;&quot;,    &quot;data_folder&quot;: &quot;/path/to/your_localdir&quot;,    &quot;name&quot;: &quot;Dataset Local Upload&quot;,    &quot;type&quot;: DatasetType.ANNOTATED_DATA,    &quot;generate_metadata&quot;: False,    &quot;auto_tagging&quot;: [&quot;weather&quot;],    &quot;render_pcd&quot;: False,    &quot;annotation_format&quot;: AnnotationFormat.VISION_AI,    &quot;sequential&quot;: False,    &quot;sensors&quot;: project.sensors,    &quot;annotations&quot; :['model_name']}dataset = project.create_dataset(**dataset_data)```## Get DatasetThe `get_dataset` method retrieves the dataset info from the connected site. The `id` parameter is the unique interger ID of the dataset, not its &quot;name&quot; property.```Pythondataset = client.get_dataset(id)```### List ModelsThe `list_models` method will list all the models in the given project```Python#1models = client.list_models(project_id = 1)#2project = client.get_project(project_id=1)models = project.list_models()```### Get ModelThe `get_model` method will get the model detail info by the given model-id```Pythonmodel = client.get_model(model_id=30)model = project.get_model(model_id=30)```From the given model, we could get the label file and the triton model file by the commands below.```Pythonstatus, label_file_path = model.get_label_file(save_path=&quot;./labels.txt&quot;, timeout=6000)status, label_file_path = model.get_triton_model_file(save_path=&quot;./model.zip&quot;, timeout=6000)```## Troubleshooting## Next steps## Contributing## Links to language repos[Python Readme](https://github.com/linkernetworks/dataverse-sdk/tree/develop/python/README.md)</longdescription>
</pkgmetadata>