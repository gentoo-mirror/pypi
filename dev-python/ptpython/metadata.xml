<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ptpython========|Build Status|  |PyPI|  |License|*A better Python REPL*::    pip install ptpython.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/example1.pngPtpython is an advanced Python REPL. It should work on allPython versions from 2.6 up to 3.9 and work cross platform (Linux,BSD, OS X and Windows).Note: this version of ptpython requires at least Python 3.6. Install ptpython2.0.5 for older Python versions.Installation************Install it using pip:::    pip install ptpythonStart it by typing ``ptpython``.Features********- Syntax highlighting.- Multiline editing (the up arrow works).- Autocompletion.- Mouse support. [1]- Support for color schemes.- Support for `bracketed paste &lt;https://cirw.in/blog/bracketed-paste&gt;`_ [2].- Both Vi and Emacs key bindings.- Support for double width (Chinese) characters.- ... and many other things.[1] Disabled by default. (Enable in the menu.)[2] If the terminal supports it (most terminals do), this allows pastingwithout going into paste mode. It will keep the indentation.Command Line Options********************The help menu shows basic command-line options.::    $ ptpython --help    usage: ptpython [-h] [--vi] [-i] [--light-bg] [--dark-bg] [--config-file CONFIG_FILE]                    [--history-file HISTORY_FILE] [-V]                    [args ...]    ptpython: Interactive Python shell.    positional arguments:      args                  Script and arguments    optional arguments:      -h, --help            show this help message and exit      --vi                  Enable Vi key bindings      -i, --interactive     Start interactive shell after executing this file.      --light-bg            Run on a light background (use dark colors for text).      --dark-bg             Run on a dark background (use light colors for text).      --config-file CONFIG_FILE                            Location of configuration file.      --history-file HISTORY_FILE                            Location of history file.      -V, --version         show program's version number and exit    environment variables:      PTPYTHON_CONFIG_HOME: a configuration directory to use      PYTHONSTARTUP: file executed on interactive startup (no default)__pt_repr__: A nicer repr with colors*************************************When classes implement a ``__pt_repr__`` method, this will be used instead of``__repr__`` for printing. Any `prompt_toolkit &quot;formatted text&quot;&lt;https://python-prompt-toolkit.readthedocs.io/en/master/pages/printing_text.html&gt;`_can be returned from here. In order to avoid writing a ``__repr__`` as well,the ``ptpython.utils.ptrepr_to_repr`` decorator can be applied. For instance:.. code:: python    from ptpython.utils import ptrepr_to_repr    from prompt_toolkit.formatted_text import HTML    @ptrepr_to_repr    class MyClass:        def __pt_repr__(self):            return HTML('&lt;yellow&gt;Hello world!&lt;/yellow&gt;')More screenshots****************The configuration menu:.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ptpython-menu.pngThe history page and its help:.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ptpython-history-help.pngAutocompletion:.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/file-completion.pngEmbedding the REPL******************Embedding the REPL in any Python application is easy:.. code:: python    from ptpython.repl import embed    embed(globals(), locals())You can make ptpython your default Python REPL by creating a `PYTHONSTARTUP file&lt;https://docs.python.org/3/tutorial/appendix.html#the-interactive-startup-file&gt;`_ containing codelike this:.. code:: python   import sys   try:       from ptpython.repl import embed   except ImportError:       print(&quot;ptpython is not available: falling back to standard prompt&quot;)   else:       sys.exit(embed(globals(), locals()))Note config file support currently only works when invoking `ptpython` directly.That it, the config file will be ignored when embedding ptpython in an application.Multiline editing*****************Multi-line editing mode will automatically turn on when you press enter after acolon.To execute the input in multi-line mode, you can either press ``Alt+Enter``, or``Esc`` followed by ``Enter``. (If you want the first to work in the OS Xterminal, you have to check the &quot;Use option as meta key&quot; checkbox in yourterminal settings. For iTerm2, you have to check &quot;Left option acts as +Esc&quot; inthe options.).. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/multiline.pngSyntax validation*****************Before execution, ``ptpython`` will see whether the input is syntacticallycorrect Python code. If not, it will show a warning, and move the cursor to theerror... image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/validation.pngAdditional features*******************Running system commands: Press ``Meta-!`` in Emacs mode or just ``!`` in Vinavigation mode to see the &quot;Shell command&quot; prompt. There you can enter systemcommands without leaving the REPL.Selecting text: Press ``Control+Space`` in Emacs mode or ``V`` (major V) in Vinavigation mode.Configuration*************It is possible to create a ``config.py`` file to customize configuration.ptpython will look in an appropriate platform-specific directory via `appdirs&lt;https://pypi.org/project/appdirs/&gt;`. See the ``appdirs`` documentation for theprecise location for your platform. A ``PTPYTHON_CONFIG_HOME`` environmentvariable, if set, can also be used to explicitly override where configurationis looked for.Have a look at this example to see what is possible:`config.py &lt;https://github.com/jonathanslenders/ptpython/blob/master/examples/ptpython_config/config.py&gt;`_Note config file support currently only works when invoking `ptpython` directly.That it, the config file will be ignored when embedding ptpython in an application.IPython support***************Run ``ptipython`` (prompt_toolkit - IPython), to get a nice interactive shellwith all the power that IPython has to offer, like magic functions and shellintegration. Make sure that IPython has been installed. (``pip installipython``).. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ipython.pngThis is also available for embedding:.. code:: python    from ptpython.ipython import embed    embed(globals(), locals())Django support**************`django-extensions &lt;https://github.com/django-extensions/django-extensions&gt;`_has a ``shell_plus`` management command. When ``ptpython`` has been installed,it will by default use ``ptpython`` or ``ptipython``.PDB***There is an experimental PDB replacement: `ptpdb&lt;https://github.com/jonathanslenders/ptpdb&gt;`_.Windows support***************``prompt_toolkit`` and ``ptpython`` works better on Linux and OS X than onWindows. Some things might not work, but it is usable:.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/windows.pngFAQ*****Q**: The ``Ctrl-S`` forward search doesn't work and freezes my terminal.**A**: Try to run ``stty -ixon`` in your terminal to disable flow control.**Q**: The ``Meta``-key doesn't work.**A**: For some terminals you have to enable the Alt-key to act as meta key, but youcan also type ``Escape`` before any key instead.Alternatives************- `BPython &lt;http://bpython-interpreter.org/downloads.html&gt;`_- `IPython &lt;https://ipython.org/&gt;`_If you find another alternative, you can create an issue and we'll list ithere. If you find a nice feature somewhere that is missing in ``ptpython``,also create a GitHub issue and maybe we'll implement it.Special thanks to*****************- `Pygments &lt;http://pygments.org/&gt;`_: Syntax highlighter.- `Jedi &lt;http://jedi.jedidjah.ch/en/latest/&gt;`_: Autocompletion library.- `wcwidth &lt;https://github.com/jquast/wcwidth&gt;`_: Determine columns needed for a wide characters.- `prompt_toolkit &lt;http://github.com/jonathanslenders/python-prompt-toolkit&gt;`_ for the interface... |Build Status| image:: https://api.travis-ci.org/prompt-toolkit/ptpython.svg?branch=master    :target: https://travis-ci.org/prompt-toolkit/ptpython#.. |License| image:: https://img.shields.io/github/license/prompt-toolkit/ptpython.svg    :target: https://github.com/prompt-toolkit/ptpython/blob/master/LICENSE.. |PyPI| image:: https://pypip.in/version/ptpython/badge.svg    :target: https://pypi.python.org/pypi/ptpython/    :alt: Latest Version</longdescription>
</pkgmetadata>