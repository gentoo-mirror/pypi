<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![apartogether](https://github.com/trouchet/spycio/blob/master/images/spycio_tiny.png?raw=true)[![Version](https://img.shields.io/pypi/v/spycio.svg)](https://pypi.python.org/pypi/spycio)[![python](https://img.shields.io/pypi/pyversions/spycio.svg)](https://pypi.org/project/spycio/)[![downloads](https://img.shields.io/pypi/dm/spycio)](https://pypi.org/project/spycio/)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/trouchet/spycio/HEAD)[![codecov](https://codecov.io/gh/trouchet/spycio/branch/master/graph/badge.svg?token=65OGOH51NV)](https://codecov.io/gh/trouchet/spycio)[![Lint workflow](https://github.com/trouchet/spycio/actions/workflows/check-lint.yaml/badge.svg)](https://github.com/trouchet/spycio/actions/workflows/check-lint.yaml)Space with a (pseudo-)metric allows us to perform distances. This library offers several functionalities in this regard; How to install================We run the command on desired installation environment:``` {.bash}pip install spycio```Minimal example================``` {.bash}#!/usr/bin/env pythonfrom numpy import pi, Inffrom spycio import distance, travelTimefrom spycio.utils import spherToGeodef format_distance_without_configuration(A, B, speed, method):    string_template='A:{origin}, B:{target}, speed:{speed}, method:{on}, distance:{d}, eta:{eta}'        dist=distance(A, B, method)    duration=travelTime(speed, A, B, method)        return string_template.format(origin=A,target=B,speed=speed, on=method,d=dist,eta=duration)def format_distance(A, B, speed, method, config):    string_template='A:{origin}, B:{target}, speed:{speed}, method:{on}, config:{setup}, distance:{d}, eta:{eta}'        dist=distance(A, B, method, config)    duration=travelTime(speed, A, B, method, config)        return string_template.format(origin=A,target=B, speed=speed, on=method,setup=config, d=dist, eta=duration)# Default distance calculation: EuclideanA=[0, 0]B=[1, 1]C=[2, 2]D=[pi / 2, 0]speed=1print('Euclidean distance: '+str(distance(A, B)))print('\n')configurations=[    (B, C, speed, &quot;manhattan&quot;),    (B, C, speed, &quot;euclidean&quot;),    (B, C, speed, &quot;max&quot;),    (B, C, speed, &quot;chebyshev&quot;),    (B, C, speed, &quot;manhattan&quot;),    (B, C, speed, &quot;cityblock&quot;),    (B, C, speed, &quot;cosine&quot;),    (B, C, speed, &quot;braycurtis&quot;),    (B, C, speed, &quot;canberra&quot;)]print('Format distance without configuration: ')for origin, target, speed, method in configurations:    print(format_distance_without_configuration(origin, target, speed, method))print('\n')configurations=[    (B, C, speed, &quot;pnorm&quot;, { &quot;exponent&quot;: 2 }),    (B, C, speed, &quot;pnorm&quot;, { &quot;exponent&quot;: 3 }),    (B, C, speed, &quot;pnorm&quot;, { &quot;exponent&quot;: 4 }),    (B, C, speed, &quot;pnorm&quot;, { &quot;exponent&quot;: Inf }),    (A, D, speed, &quot;sphere&quot;, { &quot;radius&quot;: 1 }),    (spherToGeo(A), spherToGeo(D), speed, &quot;geographical&quot;, { &quot;radius&quot;: 1 })]print('Format distance with configuration: ')for origin, target, speed, method, config in configurations:    print(format_distance(origin, target, speed, method, config))```</longdescription>
</pkgmetadata>