<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Fluxo AWSProvides a bunch of functions and utils to help you build applications on top of Amazon Web Services Resources. We use this in our web development flow and would love hear suggestions and improvements on this.## UsageJust import the function or class that you want to use, and you're good to go## Functions### AWS Lambda handlers1. `prepare_response`Function Decorator that:- Allows you to make a response in a tuple format containing `(status_code, body, headers)`. Example: `return 200, {&quot;success&quot;: True}`- If body is `dict` or `list`, runs `json.dumps` function with encoders for `datetime.datetime`, `decimal.Decimal` and `bytes`- Add CORS headers- Add JSON content type header- Defaults your response: 200 for status code, `{}` for bodyUsage:```from fluxo_aws import prepare_response@prepare_responsedef handler(event, context):    return 200, {&quot;success&quot;: True}```2. `event_parser`Function decorator that transform your event variable to a `ParsedEvent` class, exposing three methods: `body`, `headers` and `query`. It will transform `strings` into `dict`, and parse variables for you.Usage```from fluxo_aws import prepare_response, event_parser@prepare_response@event_parserdef handler(event, context):    print(event.body)    print(event.headers)    print(event.query)    param = event.query.get(&quot;param&quot;)    return 200```### DynamoDB handlers1. `DynamodbTable(table_name, schema, hash_key=None, partition_key=None)`Helper for DynamoDB. schema is a valid cerberus schema dict. This class exposes:- `exists(id, hash_key=None)`: check if hash key exists in table, returning `True` of `False`- `get_by_hash_key(id, hash_key=None)`: get a list of records for given hash key- `add(data)`: insert dict into DynamoDB. Raise `SchemaError` if dict does not match schema with table schemaUsage```from fluxo_aws import DynamodbTable, SchemaErrorschema = {&quot;name&quot;: {&quot;type&quot;: &quot;string&quot;}}table = DynamodbTable(&quot;table&quot;, schema, hash_key=name)try:    table.add({&quot;name&quot;: 123})except SchemaError as e:    print(f&quot;schema error: {str(e)}&quot;)print(table.exists(&quot;test&quot;))print(table.get_by_hash_key(&quot;test&quot;))```### Auth handlers1. `hash_password(password)`Hashes and salt a password string using `bcrypt` and `HS256`Usage```from fluxo_aws import hash_passwordprint(hash_password(&quot;secret&quot;))```2. `verify_password(plain_password, hashed_password)`Compares a hash string with a password string, returning `True` if matches and `False` if not matchesUsage```from fluxo_aws import verify_passwordprint(verify_password(&quot;secret&quot;, &quot;...&quot;))```3. `create_access_token(data, expires_delta, secret_key)`Creates a JSON Web Token for data with an expiration delta of `expires_delta`Usage```from fluxo_aws import create_access_tokenfrom uuid import uuid4from datetime import timedeltaprint(create_access_token({&quot;test&quot;: True}, timedelta(hours=3), str(uuid4())))```4. `decode_token(data, secret_key)`WIP### S3 handlers1. `S3Bucket(bucket_name)`Helper for S3 Operations. This class exposes:- `upload_file(file_name, object_name=None)`: upload local file to S3 returns `True` if uploaded successfully else `False`- `download_file(object_name, file_name=None)`: download S3 file locally- `create_presigned_url(object_name, action=&quot;get_object&quot;, expiration=3600)`: creates a presigned URL for S3 object. Returns presigned URL if successfully else returns NoneUsage```from fluxo_aws import S3Buckets3_bucket = S3Bucket(&quot;my-test-bucket&quot;)object_name = &quot;test_file.txt&quot;file_name = &quot;/tmp/text_file.txt&quot;print(s3_bucket.upload_file(file_name, object_name))print(s3_bucket.create_presigned_url(object_name, action, expiration))print(s3_bucket.download_file(object_name, file_name))```</longdescription>
</pkgmetadata>