<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-dockerA pure python implementation to build docker images without `docker`and provide a python api for interacting with dockerregistries.## Examples using LibraryDownloading docker images without docker!```pythonfrom python_docker.registry import Registryregistry = Registry()image = registry.pull_image('frolvlad/alpine-glibc', 'latest')```Modify docker image from filesystem```pythonfrom python_docker.base import Imagefrom python_docker.registry import Registryregistry = Registry()image = registry.pull_image('continuumio/miniconda3', 'latest')image.remove_layer()image.name = 'this-is-a-test'image.add_layer_path('./')image.add_layer_contents({    '/this/is/a/test1': b'this is test 1',    '/this/is/a/test2': b'this is test 2'})image.layers[0].config['Env'].append('FOO=BAR')# write docker image to filesystemimage.write_filename('example-docker-image.tar')# run docker image (does require docker)image.run(['cat /this/is/a/test1'])```The above example shows how you can update a docker image afterpulling it from a registry. Additionally there is a `lazy` option inthe `pull_image` method. This allows you to modify docker imageswithout actually having to download all the layers. This is animportant feature when needing to add a small layer to a larger gpuimage that is several GBs.```pythonfrom python_docker.base import Imagefrom python_docker.registry import Registryregistry = Registry()image = registry.pull_image('continuumio/miniconda3', 'latest', lazy=True)# do the same actions as the example above# difference is that the layers are lazily downloaded # only when needed in the `image.write_filename`# and `image.run`.registry.push_image(image)# push_image does not require downloading the layers```# Development## Dependencies - [install docker-compose](https://docs.docker.com/compose/install/) - [install conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/)Install the development environment```shellconda env create -f environment-dev.yaml```## Testing```shelldocker-compose up -dpytest```# How does this work?Turns out that docker images are just a tar collection of files. Thereare several versions of the spec. For `v1.0` the specification is[definedhere](https://github.com/moby/moby/blob/master/image/spec/v1.md).Instead of writing down the spec lets look into a single docker image.```shelldocker pull ubuntu:latestdocker save ubuntu:latest -o /tmp/ubuntu.tar```List the directory structure of the docker image. Notice how it is acollection of `layer.tar` which is a tar archive of filesystems. Andseveral json files. `VERSION` file is always `1.0` currently.```shelltar -tvf /tmp/ubuntu.tar```Dockerhub happens to export docker images in a `v1` - `v1.2` compatibleformat. Lets only look at the files important for `v1`. Repositoriestells the layer to use as the layer head of the current name/tag.```shelltar -xf /tmp/ubuntu.tar $filenamecat $filename | python -m json.tool```For each layer there are three files: `VERSION`, `layer.tar`, and`json`.```shelltar -xf /tmp/ubuntu.tar $filenamecat $filename``````shelltar -xf /tmp/ubuntu.tar $filenamecat $filename | python -m json.tool```Looking at layer metadata.```json{    &quot;id&quot;: &quot;93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c&quot;,    &quot;created&quot;: &quot;1969-12-31T19:00:00-05:00&quot;,    &quot;container_config&quot;: {        &quot;Hostname&quot;: &quot;&quot;,        &quot;Domainname&quot;: &quot;&quot;,        &quot;User&quot;: &quot;&quot;,        &quot;AttachStdin&quot;: false,        &quot;AttachStdout&quot;: false,        &quot;AttachStderr&quot;: false,        &quot;Tty&quot;: false,        &quot;OpenStdin&quot;: false,        &quot;StdinOnce&quot;: false,        &quot;Env&quot;: null,        &quot;Cmd&quot;: null,        &quot;Image&quot;: &quot;&quot;,        &quot;Volumes&quot;: null,        &quot;WorkingDir&quot;: &quot;&quot;,        &quot;Entrypoint&quot;: null,        &quot;OnBuild&quot;: null,        &quot;Labels&quot;: null    },    &quot;os&quot;: &quot;linux&quot;}```Looking at the layer filesystem.```shelltar -xf /tmp/ubuntu.tar $filenametar -tvf $filename | head```# References - [Docker Registry API Specification](https://docs.docker.com/registry/spec/api/) - Docker Image Specification   - [Summary](https://github.com/moby/moby/blob/master/image/spec/v1.2.md)   - [Registry V2 Specification](https://docs.docker.com/registry/spec/manifest-v2-2/)</longdescription>
</pkgmetadata>