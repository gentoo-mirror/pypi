<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![License](https://img.shields.io/badge/license-Endeavour%20Mining-orange.svg)](https://github.com/endeavourmining/edv-dwh-connector/blob/master/LICENSE.txt)[![codecov for extractors](https://codecov.io/gh/endeavourmining/edv-dwh-connector/branch/master/graph/badge.svg?token=c6I8wFFmZe)](https://codecov.io/gh/endeavourmining/edv-dwh-connector)This project helps to connect to our data warehouse.## Requirements* Python `3.8.x` or later.## Quick start### Synchronize tagsSynchronize tags from PI server to Data warehouse on period `[01/01/2022 05:00:00 - 31/01/2022 05:00:00]`can be easily achieved by the code below:```pythonfrom datetime import datetimefrom edv_dwh_connector.pg_dwh import PgDwhfrom edv_dwh_connector.pi_web_api_client import PiWebAPIClientfrom edv_dwh_connector.pi.rest.rest_sync_pi_tags import RestSyncPITagsfrom edv_dwh_connector.utils.periods import HourIntervalsfrom edv_dwh_connector.pi.sync_pi_data import SyncPIDataRestToDwhfrom edv_dwh_connector.pi.db.pg_pi_tag import PgPITags# We should firstly declare the Data warehouse pool connection.dwh = PgDwh.from_connection(    name=&quot;dwh_db_name&quot;, host=&quot;dwh_server_name_or_ip&quot;,    user=&quot;dwh_user&quot;, password=&quot;dwh_password&quot;, port=5432)# Next, we should declare the PI server REST API client.client = PiWebAPIClient(    base_url=&quot;base/url/of/pi/server&quot;, username=&quot;admin_user&quot;,    password=&quot;admin_password&quot;, session_timeout=2.5)# Finally, we can synchronize tags measures.# The code below will automatically synchronize tags (create new tags),# split period provided into hour intervals and synchronize PI measures# on these intervals.SyncPIDataRestToDwh(    tags=RestSyncPITags(        server_id=&quot;F1DSmN2338899MpX8PREOtdbEZ56sypOOOKRZLVNSVi1QSS1ISTGt&quot;, # Fake server ID        client=client,        codes=['AI162003_SCLD', 'AI162007_SCLD', 'AI162014_SCLD'],        target=PgPITags(dwh)    ),    periods=HourIntervals(        datetime(2022, 1, 1, 5, 0, 0), datetime(2022, 1, 31, 5, 0, 0)    ),    client=client, dwh=dwh).synchronize()```To store data to a CSV file in `fact_pi_measure` format, you could do this:```pythonSyncPIDataRestToCSVDwhLike(    tags=RestSyncPITags(        server_id=&quot;F1DSmN2338899MpX8PREOtdbEZ56sypOOOKRZLVNSVi1QSS1ISTGt&quot;, # Fake server ID        client=client,        codes=['AI162003_SCLD', 'AI162007_SCLD', 'AI162014_SCLD'],        target=PgPITags(dwh)    ),    periods=HourIntervals(        datetime(2022, 1, 1, 5, 0, 0), datetime(2022, 1, 31, 5, 0, 0)    ),    client=client,    file=&quot;path/of/csv/file/where/to/store&quot;).synchronize()```after importing `SyncPIDataRestToCSVDwhLike` from `edv_dwh_connector.pi.sync_pi_data`.It is very useful when you want to recover data of DWH table `fact_pi_measure` on a long period.**N.B.** You could also fetch on day intervals by using class `DayIntervals` instead of `HourIntervals`.But, `HourIntervals` could be faster than `DayIntervals` depending on the size of data to be imported.### Synchronize partially a CSV file for a tagTo synchronize a CSV file with the latest data from interpolated data from DWH, we do like this:```pythondwh = ...tag = &quot;AI56222_SCDL&quot;CsvWithLatestPIMeasuresDf(    path=&quot;my/path/data.csv&quot;,    tag=tag,    origin=PgMinuteInterpolatedPIMeasuresDf(tag, dwh)).frame(    datetime(2022, 1, 1, 5, 0, 0), datetime(2022, 1, 31, 5, 0, 0))```If `data.csv` contains data for period `[01/01/2022 - 24/01/2022]`, this instruction will only add to the CSV file data of the last week.### Read tags and measures from DWH#### Read tagsTo get all tags, just do this:```pythontags = PgCachedPITags(dwh).items()```#### Read measuresTo read measures of a tag on a period, just do this:```pythontag = ... # get PI tag heremeasures = PgCachedPIMeasures(tag, dwh).items(    datetime(2022, 1, 1, 5, 0, 0), datetime(2022, 1, 31, 5, 0, 0))# or use only tag codemeasures = PgCachedPIMeasures(&quot;AI162014_SCLD&quot;, dwh).items(    datetime(2022, 1, 1, 5, 0, 0), datetime(2022, 1, 31, 5, 0, 0))# or use a data frame (by tag or tag code)dt = PgPIMeasuresDf(tag, dwh).frame(    datetime(2022, 1, 1, 5, 0, 0), datetime(2022, 1, 31, 5, 0, 0))```### Synchronize blend proposalsWe easily synchronize by this code below:```pythonSyncBlendProposals(    src=ExcelBlendProposals(        file=&quot;path/of/excel/file/name&quot;,        start_date=date.fromisoformat(&quot;2022-10-18&quot;),        end_date=date.fromisoformat(&quot;2022-10-20&quot;)    ),    target=PgBlendProposals(dwh)).synchronize()```### Read blend proposals from DWH```pythonblends = PgBlendProposals(dwh).items(    date(2022, 10, 18), datetime(2022, 10, 20))```## Development environmentIt is recommended to start by creating a virtual environment. You could do it by following commands:```shellpython -m venv .venvsource .venv/bin/activatepip install -r requirements.txt```**N.B.** We activate an environment on Windows by executing:```shell.venv\Scripts\activate.bat```## How to contributePlease read [contributing rules](https://github.com/endeavourmining/.github/blob/master/CONTRIBUTING.md).Fork repository, make changes, send us a pull request. We will reviewyour changes and apply them to the `master` branch shortly, providedthey don't violate our quality standards. To avoid frustration, beforesending us your pull request please run these commands:```shellsh pyqulice.sh # Linuxpyqulice.bat # Windowspytest tests/unit/```</longdescription>
</pkgmetadata>