<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- marker-before-logo --&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/riga/scinum&quot;&gt;    &lt;img alt=&quot;scinum logo&quot; src=&quot;https://media.githubusercontent.com/media/riga/scinum/master/assets/logo250.png&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;!-- marker-after-logo --&gt;&lt;!-- marker-before-badges --&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;http://scinum.readthedocs.org/en/latest/?badge=latest&quot;&gt;    &lt;img alt=&quot;Documentation Status&quot; src=&quot;https://readthedocs.org/projects/scinum/badge/?version=latest&quot; /&gt;  &lt;/a&gt;  &lt;img alt=&quot;Python version&quot; src=&quot;https://img.shields.io/badge/Python-%E2%89%A53.7-blue&quot; /&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/scinum&quot;&gt;    &lt;img alt=&quot;Package Status&quot; src=&quot;https://img.shields.io/pypi/v/scinum.svg?style=flat&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/scinum&quot;&gt;    &lt;img alt=&quot;PyPI downloads&quot; src=&quot;https://img.shields.io/pypi/dm/scinum.svg&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/riga/scinum/blob/master/LICENSE&quot;&gt;    &lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/github/license/riga/scinum.svg&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/riga/scinum/actions/workflows/lint_and_test.yml&quot;&gt;    &lt;img alt=&quot;Lint and test&quot; src=&quot;https://github.com/riga/scinum/actions/workflows/lint_and_test.yml/badge.svg&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://codecov.io/gh/riga/scinum&quot;&gt;    &lt;img alt=&quot;Cover coverage&quot; src=&quot;https://codecov.io/gh/riga/scinum/branch/master/graph/badge.svg?token=bvykpaUaHQ&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://colab.research.google.com/github/riga/scinum/blob/master/example.ipynb&quot;&gt;    &lt;img alt=&quot;Example notebook on Colab&quot; src=&quot;https://colab.research.google.com/assets/colab-badge.svg&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://mybinder.org/v2/gh/riga/scinum/master?filepath=example.ipynb&quot;&gt;    &lt;img alt=&quot;Example notebook on Binder&quot; src=&quot;https://mybinder.org/badge_logo.svg&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;!-- marker-after-badges --&gt;&lt;!-- marker-before-header --&gt;scinum provides a simple `Number` class that wraps plain floats or [NumPy](http://www.numpy.org/) arrays and adds support for multiple uncertainties, automatic (gaussian) error propagation, and scientific rounding.**Note**: Support for Python versions 2.7 and 3.6 has been dropped starting from v2.0.0.Checkout the [legacy/v1.4 branch](https://github.com/riga/scinum/tree/legacy/v1.4) for legacy support.&lt;!-- marker-after-header --&gt;&lt;!-- marker-before-body --&gt;### UsageThe following examples demonstrate the most common use cases.For more info, see the [API documentation](http://scinum.readthedocs.org/en/latest/?badge=latest) or open the [example.ipynb](https://github.com/riga/scinum/blob/master/example.ipynb) notebook on colab or binder.[![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/riga/scinum/blob/master/example.ipynb) [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/riga/scinum/master?filepath=example.ipynb)###### Number definition```pythonfrom scinum import Number, UP, DOWNNumber.default_format = &quot;%.2f&quot;num = Number(5, (2, 1))print(num)                    # -&gt; 5.00 +2.00-1.00# get the nominal valueprint(num.nominal)            # -&gt; 5.0print(num.n)                  # -&gt; 5.0 (shorthand)print(num())                  # -&gt; 5.0 (shorthand)# get uncertaintiesprint(num.get_uncertainty())  # -&gt; (2.0, 1.0)print(num.u())                # -&gt; (2.0, 1.0) (shorthand)print(num.u(direction=UP))    # -&gt; 2.0# get shifted valuesprint(num.get())              # -&gt; 5.0 (no shift)print(num.get(UP))            # -&gt; 7.0 (up shift)print(num(UP))                # -&gt; 7.0 (up shift, shorthand)print(num.get(DOWN))          # -&gt; 4.0 (down shift)print(num(DOWN))              # -&gt; 4.0 (down shift, shorthand)```###### Multiple uncertaintiesUse single values to denote symmetric uncertainties, and tuples for asymmetric ones.Float values refer to absolute values whereas complex numbers (only their imaginary part) define relative effects.```pythonfrom scinum import Numbernum = Number(2.5, {    &quot;sourceA&quot;: 0.5,           # absolute 0.5, both up and down    &quot;sourceB&quot;: (1.0, 1.5),    # absolute 1.0 up, 1.5 down    &quot;sourceC&quot;: 0.1j,          # relative 10%, both up and down    &quot;sourceD&quot;: (0.1j, 0.2j),  # relative 10% up, relative 20% down    &quot;sourceE&quot;: (1.0, 0.2j),   # absolute 1.0 up, relative 20% down    &quot;sourceF&quot;: (0.3j, 0.3),   # relative 30% up, absolute 0.3 down})```###### Correlation handlingWhen two numbers are combined by means of an operator, the correlation between equally named uncertainties is assumed to be 1.The example above shows how to configure this correlation coefficient `rho` when used with explicit operator methods defined on a number, such as `num.add()` or `num.mul()`.However, it is probably more convenient to use `Correlation` objects:```pythonfrom scinum import Number, Correlationnum = Number(2, 5)print(num * num)  # -&gt; '4.0 +-20.0', fully correlated by default# same as# print(num**2)# print(num.pow(2, inplace=False))print(num * Correlation(0) * num)  # -&gt; '4.0 +-14.14', no correlation# same as# print(num.pow(2, rho=0, inplace=False))```The correlation object is combined with a number through multiplication, resulting in a `DeferredResult` object.The deferred result is used to resolve the actual uncertainty combination once it is applied to another number instance which happens in a second step.Internally, the above example is handled as```pythondeferred = num * Correlation(0)print(deferred * num)```and similarly, adding two numbers without correlation can be expressed as```python(num * Correlation(0)) + num```When combining numbers with multiple, named uncertainties, correlation coefficients can be controlled per uncertainty by passing names to the `Correlation` constructor.```pythonCorrelation(1, sourceA=0)  # zero correlation for sourceA, all others default to 1Correlation(sourceA=0)     # zero correlation for sourceA, no default```###### Formatting and rounding`Number.str()` provides some simple formatting tools, including `latex` and `root latex` support, as well as scientific rounding rules:```python# output formattingn = Number(8848, 10)n.str(unit=&quot;m&quot;)                          # -&gt; &quot;8848.0 +-10.0 m&quot;n.str(unit=&quot;m&quot;, force_asymmetric=True)   # -&gt; &quot;8848.0 +10.0-10.0 m&quot;n.str(unit=&quot;m&quot;, scientific=True)         # -&gt; &quot;8.848 +-0.01 x 1E3 m&quot;n.str(unit=&quot;m&quot;, si=True)                 # -&gt; &quot;8.848 +-0.01 km&quot;n.str(style=&quot;fancy&quot;)                     # -&gt; &quot;$8848.0 ±10.0$&quot;n.str(unit=&quot;m&quot;, style=&quot;fancy&quot;)           # -&gt; &quot;$8848.0 ±10.0\,m$&quot;n.str(unit=&quot;m&quot;, style=&quot;latex&quot;)           # -&gt; &quot;$8848.0 \pm 10.0\,m$&quot;n.str(unit=&quot;m&quot;, style=&quot;latex&quot;, si=True)  # -&gt; &quot;8.848 \pm 0.01\,km&quot;n.str(unit=&quot;m&quot;, style=&quot;root&quot;)            # -&gt; &quot;8848.0 #pm 10.0 m&quot;n.str(unit=&quot;m&quot;, style=&quot;root&quot;, si=True)   # -&gt; &quot;8.848 #pm 0.01 km&quot;# output roundingn = Number(17.321, {&quot;a&quot;: 1.158, &quot;b&quot;: 0.453})n.str()               # -&gt; '17.321 +-1.158 (a) +-0.453 (b)'n.str(&quot;%.1f&quot;)         # -&gt; '17.3 +-1.2 (a) +-0.5 (b)'n.str(&quot;publication&quot;)  # -&gt; '17.32 +-1.16 (a) +-0.45 (b)'n.str(&quot;pdg&quot;)          # -&gt; '17.3 +-1.2 (a) +-0.5 (b)'```For situations that require more sophisticated rounding and formatting rules, you might want to checkout:- [`sn.split_value()`](http://scinum.readthedocs.io/en/latest/#split-value)- [`sn.match_precision()`](http://scinum.readthedocs.io/en/latest/#match-precision)- [`sn.round_uncertainty()`](http://scinum.readthedocs.io/en/latest/#round-uncertainty)- [`sn.round_value()`](http://scinum.readthedocs.io/en/latest/#round-value)- [`sn.infer_si_prefix()`](http://scinum.readthedocs.io/en/latest/#infer-si-prefix)###### Uncertainty propagation```pythonfrom scinum import Numbernum = Number(5, 1)print(num + 2)  # -&gt; '7.0 +-1.0'print(num * 3)  # -&gt; '15.0 +-3.0'num2 = Number(2.5, 1.5)print(num + num2)  # -&gt; '7.5 +-2.5'print(num * num2)  # -&gt; '12.5 +-10.0'# add num2 to num and consider their uncertainties to be fully uncorrelated, i.e. rho = 0num.add(num2, rho=0)print(num)  # -&gt; '7.5 +-1.80277563773'```###### Math operationsAs a drop-in replacement for the `math` module, scinum provides an object `ops` that contains math operations that are aware of gaussian error propagation.```pythonfrom scinum import Number, opsnum = ops.log(Number(5, 2))print(num)  # -&gt; 1.60943791243 +-0.4num = ops.exp(ops.tan(Number(5, 2)))print(num)  # -&gt; 0.0340299245972 +-0.845839754815print(num.str(&quot;%.2f&quot;))  # -&gt; 0.03 +-0.85```###### Custom operationsThere might be situations where a specific operation is not (yet) contained in the `ops` object.In this case, you can easily register a new one via:```pythonfrom scinum import Number, ops@ops.registerdef my_op(x):    return x * 2 + 1@my_op.derivedef my_op(x):    return 2num = ops.my_op(Number(5, 2))print(num)  # -&gt; 11.00 (+4.00, -4.00)```Please note that there is no need to register *simple* functions like in the particular example above as most of them are just composite operations whose propagation rules (derivatives) are already known.###### NumPy arrays```pythonfrom scinum import Numberimport numpy as npnum = Number(np.array([3, 4, 5]), 2)print(num)# [ 3.  4.  5.]# + [ 2.  2.  2.]# - [ 2.  2.  2.]num = Number(np.array([3, 4, 5]), {    &quot;sourceA&quot;: (np.array([0.1, 0.2, 0.3]), 0.5j),  # absolute values for up, 50% down})print(num)# [ 3.  4.  5.]# + sourceA [ 0.1  0.2  0.3]# - sourceA [ 1.5  2.   2.5]```### Installation and dependenciesVia [pip](https://pypi.python.org/pypi/scinum)```bashpip install scinum```or by simply copying the file into your project.Numpy is an optional dependency.### ContributingIf you like to contribute, pull requests are happily accepted.Just make sure to add a new test cases and run them via:```bash&gt; python -m unittest tests```##### TestingIn general, tests should be run for all python versions ≥ 3.7.To run tests in a docker container, do:```bashgit clone https://github.com/riga/scinum.gitcd scinumdocker run --rm -v `pwd`:/scinum -w /scinum python:3.8 python -m unittest tests```### Development- Source hosted at [GitHub](https://github.com/riga/scinum)- Report issues, questions, feature requests on [GitHub Issues](https://github.com/riga/scinum/issues)&lt;!-- marker-after-body --&gt;</longdescription>
</pkgmetadata>