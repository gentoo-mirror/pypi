<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-kind[![Build Status](https://travis-ci.com/hjacobs/pytest-kind.svg?branch=master)](https://travis-ci.com/hjacobs/pytest-kind)[![PyPI](https://img.shields.io/pypi/v/pytest-kind)](https://pypi.org/project/pytest-kind/)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytest-kind)![License](https://img.shields.io/github/license/hjacobs/pytest-kind)![CalVer](https://img.shields.io/badge/calver-YY.MM.MICRO-22bfda.svg)Test your Python Kubernetes app/operator end-to-end with [kind](https://kind.sigs.k8s.io/) and [pytest](https://pytest.org).`pytest-kind` is a plugin for pytest which provides the `kind_cluster` fixture.The fixture will install kind 0.17.0, create a Kubernetes 1.25 cluster, and provide convenience functionality such as port forwarding.## UsageInstall `pytest-kind` via pip or via [poetry](https://poetry.eustace.io/), e.g.:```poetry add --dev pytest-kind```Write your pytest functions and use the provided `kind_cluster` fixture, e.g.:```pythondef test_kubernetes_version(kind_cluster):    assert kind_cluster.api.version == ('1', '25')```To load your custom Docker image and apply deployment manifests:```pythonimport requestsfrom pykube import Poddef test_myapp(kind_cluster):    kind_cluster.load_docker_image(&quot;myapp&quot;)    kind_cluster.kubectl(&quot;apply&quot;, &quot;-f&quot;, &quot;deployment.yaml&quot;)    kind_cluster.kubectl(&quot;rollout&quot;, &quot;status&quot;, &quot;deployment/myapp&quot;)    # using Pykube to query pods    for pod in Pod.objects(kind_cluster.api).filter(selector=&quot;app=myapp&quot;):        assert &quot;Sucessfully started&quot; in pod.logs()    with kind_cluster.port_forward(&quot;service/myapp&quot;, 80) as port:        r = requests.get(f&quot;http://localhost:{port}/hello/world&quot;)        r.raise_for_status()        assert r.text == &quot;Hello world!&quot;```See the `examples` directory for sample projects and also check out [kube-web-view](https://codeberg.org/hjacobs/kube-web-view) which uses pytest-kind for its e2e tests.## KindCluster objectThe `kind_cluster` fixture is an instance of the KindCluster class with the following methods:* `load_docker_image(docker_image)`: load the specified Docker image into the kind cluster* `kubectl(*args)`: run the `kubectl` binary against the cluster with the specified arguments. Returns the process output as string.* `port_forward(service_or_pod_name, remote_port, *args)`: run &quot;kubectl port-forward&quot; for the given service/pod and return the (random) local port. To be used as context manager (&quot;with&quot; statement). Pass the namespace as additional args to kubectl via &quot;-n&quot;, &quot;mynamespace&quot;.KindCluster has the following attributes:* `name`: the kind cluster name* `kubeconfig_path`: the path to the Kubeconfig file to access the cluster* `kind_path`: path to the `kind` binary* `kubectl_path`: path to the `kubectl` binary* `api`: [pykube](https://pykube.readthedocs.io/) HTTPClient instance to access the cluster from PythonYou can also use KindCluster directly without pytest:```pythonfrom pytest_kind import KindClustercluster = KindCluster(&quot;myclustername&quot;)cluster.create()cluster.kubectl(&quot;apply&quot;, &quot;-f&quot;, &quot;..&quot;)# ...cluster.delete()```## Pytest OptionsThe kind cluster name can be set via the `--cluster-name` CLI option.The kind cluster is deleted after each pytest session, you can keep the cluster by passing `--keep-cluster` to pytest.Note that you can use the `PYTEST_ADDOPTS` environment variable to pass these options to pytest. This also works if you call pytest from a Makefile:```bash# for test debugging: don't delete the kind clusterPYTEST_ADDOPTS=--keep-cluster make test```## Notes* The `kind_cluster` fixture is session-scoped, i.e. the same cluster will be used across all test modules/functions.* The `kind` and `kubectl` binaries will be downloaded once to the local directory `./.pytest-kind/{cluster-name}/`. You can use them to interact with the cluster (e.g. when `--keep-cluster` is used).* Some cluster pods might not be ready immediately (e.g. kind's CoreDNS take a moment), add wait/poll functionality as required to make your tests predictable.</longdescription>
</pkgmetadata>