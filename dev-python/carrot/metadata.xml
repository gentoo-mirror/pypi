<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>############################################## carrot - AMQP Messaging Framework for Python##############################################:Version: 0.10.7**NOTE** This release contains backward-incompatible changes.Please read the `Changelog`_ for more information... _`Changelog`: http://ask.github.com/carrot/changelog.htmlIntroduction------------`carrot` is an `AMQP`_ messaging queue framework. AMQP is the Advanced MessageQueuing Protocol, an open standard protocol for message orientation, queuing,routing, reliability and security.The aim of `carrot` is to make messaging in Python as easy as possible byproviding a high-level interface for producing and consuming messages. At thesame time it is a goal to re-use what is already available as much as possible.`carrot` has pluggable messaging back-ends, so it is possible to supportseveral messaging systems. Currently, there is support for `AMQP`_(`py-amqplib`_, `pika`_), `STOMP`_ (`python-stomp`_). There's also anin-memory backend for testing purposes, using the `Python queue module`_.Several AMQP message broker implementations exists, including `RabbitMQ`_,`ZeroMQ`_ and `Apache ActiveMQ`_. You'll need to have one of these installed,personally we've been using `RabbitMQ`_.Before you start playing with ``carrot``, you should probably read up onAMQP, and you could start with the excellent article about using RabbitMQunder Python, `Rabbits and warrens`_. For more detailed information, you canrefer to the `Wikipedia article about AMQP`_... _`RabbitMQ`: http://www.rabbitmq.com/.. _`ZeroMQ`: http://www.zeromq.org/.. _`AMQP`: http://amqp.org.. _`STOMP`: http://stomp.codehaus.org.. _`python-stomp`: http://bitbucket.org/asksol/python-stomp.. _`Python Queue module`: http://docs.python.org/library/queue.html.. _`Apache ActiveMQ`: http://activemq.apache.org/.. _`Django`: http://www.djangoproject.com/.. _`Rabbits and warrens`: http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/.. _`py-amqplib`: http://barryp.org/software/py-amqplib/.. _`pika`: http://github.com/tonyg/pika.. _`Wikipedia article about AMQP`: http://en.wikipedia.org/wiki/AMQPDocumentation-------------Carrot is using Sphinx, and the latest documentation is available at GitHub:    http://github.com/ask/carrot/Installation============You can install ``carrot`` either via the Python Package Index (PyPI)or from source.To install using ``pip``,::    $ pip install carrotTo install using ``easy_install``,::    $ easy_install carrotIf you have downloaded a source tarball you can install itby doing the following,::    $ python setup.py build    # python setup.py install # as rootTerminology===========There are some concepts you should be familiar with before starting:    * Publishers        Publishers sends messages to an exchange.    * Exchanges        Messages are sent to exchanges. Exchanges are named and can be        configured to use one of several routing algorithms. The exchange        routes the messages to consumers by matching the routing key in the        message with the routing key the consumer provides when binding to        the exchange.    * Consumers        Consumers declares a queue, binds it to a exchange and receives        messages from it.    * Queues        Queues receive messages sent to exchanges. The queues are declared        by consumers.    * Routing keys        Every message has a routing key.  The interpretation of the routing        key depends on the exchange type. There are four default exchange        types defined by the AMQP standard, and vendors can define custom        types (so see your vendors manual for details).        These are the default exchange types defined by AMQP/0.8:            * Direct exchange                Matches if the routing key property of the message and                the ``routing_key`` attribute of the consumer are identical.            * Fan-out exchange                Always matches, even if the binding does not have a routing                key.            * Topic exchange                Matches the routing key property of the message by a primitive                pattern matching scheme. The message routing key then consists                of words separated by dots (``&quot;.&quot;``, like domain names), and                two special characters are available; star (``&quot;*&quot;``) and hash                (``&quot;#&quot;``). The star matches any word, and the hash matches                zero or more words. For example ``&quot;*.stock.#&quot;`` matches the                routing keys ``&quot;usd.stock&quot;`` and ``&quot;eur.stock.db&quot;`` but not                ``&quot;stock.nasdaq&quot;``.Examples========Creating a connection---------------------    You can set up a connection by creating an instance of    ``carrot.messaging.BrokerConnection``, with the appropriate options for    your broker:    &gt;&gt;&gt; from carrot.connection import BrokerConnection    &gt;&gt;&gt; conn = BrokerConnection(hostname=&quot;localhost&quot;, port=5672,    ...                           userid=&quot;test&quot;, password=&quot;test&quot;,    ...                           virtual_host=&quot;test&quot;)    If you're using Django you can use the    ``carrot.connection.DjangoBrokerConnection`` class instead, which loads    the connection settings from your ``settings.py``::       BROKER_HOST = &quot;localhost&quot;       BROKER_PORT = 5672       BROKER_USER = &quot;test&quot;       BROKER_PASSWORD = &quot;secret&quot;       BROKER_VHOST = &quot;/test&quot;    Then create a connection by doing:        &gt;&gt;&gt; from carrot.connection import DjangoBrokerConnection        &gt;&gt;&gt; conn = DjangoBrokerConnection()Receiving messages using a Consumer-----------------------------------First we open up a Python shell and start a message consumer.This consumer declares a queue named ``&quot;feed&quot;``, receiving messages withthe routing key ``&quot;importer&quot;`` from the ``&quot;feed&quot;`` exchange.The example then uses the consumers ``wait()`` method to go into consumemode, where it continuously polls the queue for new messages, and when amessage is received it passes the message to all registered callbacks.    &gt;&gt;&gt; from carrot.messaging import Consumer    &gt;&gt;&gt; consumer = Consumer(connection=conn, queue=&quot;feed&quot;,    ...                     exchange=&quot;feed&quot;, routing_key=&quot;importer&quot;)    &gt;&gt;&gt; def import_feed_callback(message_data, message):    ...     feed_url = message_data[&quot;import_feed&quot;]    ...     print(&quot;Got feed import message for: %s&quot; % feed_url)    ...     # something importing this feed url    ...     # import_feed(feed_url)    ...     message.ack()    &gt;&gt;&gt; consumer.register_callback(import_feed_callback)    &gt;&gt;&gt; consumer.wait() # Go into the consumer loop.Sending messages using a Publisher----------------------------------Then we open up another Python shell to send some messages to the consumerdefined in the last section.    &gt;&gt;&gt; from carrot.messaging import Publisher    &gt;&gt;&gt; publisher = Publisher(connection=conn,    ...                       exchange=&quot;feed&quot;, routing_key=&quot;importer&quot;)    &gt;&gt;&gt; publisher.send({&quot;import_feed&quot;: &quot;http://cnn.com/rss/edition.rss&quot;})    &gt;&gt;&gt; publisher.close()Look in the first Python shell again (where ``consumer.wait()`` is running),where the following text has been printed to the screen::   Got feed import message for: http://cnn.com/rss/edition.rss  Serialization of Data-----------------------By default every message is encoded using `JSON`_, so sendingPython data structures like dictionaries and lists works.`YAML`_, `msgpack`_ and Python's built-in ``pickle`` module is also supported,and if needed you can register any custom serialization scheme youwant to use... _`JSON`: http://www.json.org/.. _`YAML`: http://yaml.org/.. _`msgpack`: http://msgpack.sourceforge.net/Each option has its advantages and disadvantages.``json`` -- JSON is supported in many programming languages, is now    a standard part of Python (since 2.6), and is fairly fast to     decode using the modern Python libraries such as ``cjson or     ``simplejson``.        The primary disadvantage to ``JSON`` is that it limits you to     the following data types: strings, unicode, floats, boolean,     dictionaries, and lists.  Decimals and dates are notably missing.        Also, binary data will be transferred using base64 encoding, which    will cause the transferred data to be around 34% larger than an     encoding which supports native binary types.         However, if your data fits inside the above constraints and     you need cross-language support, the default setting of ``JSON``    is probably your best choice.     ``pickle`` -- If you have no desire to support any language other than    Python, then using the ``pickle`` encoding will gain you     the support of all built-in Python data types (except class instances),     smaller messages when sending binary files, and a slight speedup    over ``JSON`` processing.``yaml`` -- YAML has many of the same characteristics as ``json``,     except that it natively supports more data types (including dates,     recursive references, etc.)        However, the Python libraries for YAML are a good bit slower    than the libraries for JSON.         If you need a more expressive set of data types and need to maintain    cross-language compatibility, then ``YAML`` may be a better fit    than the above. To instruct carrot to use an alternate serialization method, use one of the following options.    1.  Set the serialization option on a per-Publisher basis:                     &gt;&gt;&gt; from carrot.messaging import Publisher            &gt;&gt;&gt; publisher = Publisher(connection=conn,            ...                       exchange=&quot;feed&quot;, routing_key=&quot;importer&quot;,            ...                       serializer=&quot;yaml&quot;)    2.  Set the serialization option on a per-call basis            &gt;&gt;&gt; from carrot.messaging import Publisher            &gt;&gt;&gt; publisher = Publisher(connection=conn,            ...                       exchange=&quot;feed&quot;, routing_key=&quot;importer&quot;)            &gt;&gt;&gt; publisher.send({&quot;import_feed&quot;: &quot;http://cnn.com/rss/edition.rss&quot;},             ...                serializer=&quot;pickle&quot;)            &gt;&gt;&gt; publisher.close()Note that ``Consumer``s do not need the serialization method specified in their code.  They can auto-detect the serialization method since we supply the ``Content-type`` header as part of the AMQP message.Sending raw data without Serialization---------------------------------------In some cases, you don't need your message data to be serialized. If youpass in a plain string or unicode object as your message, then carrot willnot waste cycles serializing/deserializing the data.You can optionally specify a ``content_type`` and ``content_encoding``for the raw data:    &gt;&gt;&gt; from carrot.messaging import Publisher    &gt;&gt;&gt; publisher = Publisher(connection=conn,    ...                       exchange=&quot;feed&quot;,                              routing_key=&quot;import_pictures&quot;)    &gt;&gt;&gt; publisher.send(open('~/my_picture.jpg','rb').read(),                        content_type=&quot;image/jpeg&quot;,                        content_encoding=&quot;binary&quot;)    &gt;&gt;&gt; publisher.close()    The ``message`` object returned by the ``Consumer`` class will have a ``content_type`` and ``content_encoding`` attribute. Receiving messages without a callback--------------------------------------You can also poll the queue manually, by using the ``fetch`` method.This method returns a ``Message`` object, from where you can get themessage body, de-serialize the body to get the data, acknowledge, reject orre-queue the message.    &gt;&gt;&gt; consumer = Consumer(connection=conn, queue=&quot;feed&quot;,    ...                     exchange=&quot;feed&quot;, routing_key=&quot;importer&quot;)    &gt;&gt;&gt; message = consumer.fetch()    &gt;&gt;&gt; if message:    ...    message_data = message.payload    ...    message.ack()    ... else:    ...     # No messages waiting on the queue.    &gt;&gt;&gt; consumer.close()Sub-classing the messaging classes----------------------------------The ``Consumer``, and ``Publisher`` classes can also be sub classed. Thus youcan define the above publisher and consumer like so:    &gt;&gt;&gt; from carrot.messaging import Publisher, Consumer    &gt;&gt;&gt; class FeedPublisher(Publisher):    ...     exchange = &quot;feed&quot;    ...     routing_key = &quot;importer&quot;    ...    ...     def import_feed(self, feed_url):    ...         return self.send({&quot;action&quot;: &quot;import_feed&quot;,    ...                           &quot;feed_url&quot;: feed_url})    &gt;&gt;&gt; class FeedConsumer(Consumer):    ...     queue = &quot;feed&quot;    ...     exchange = &quot;feed&quot;    ...     routing_key = &quot;importer&quot;    ...    ...     def receive(self, message_data, message):    ...         action = message_data[&quot;action&quot;]    ...         if action == &quot;import_feed&quot;:    ...             # something importing this feed    ...             # import_feed(message_data[&quot;feed_url&quot;])                    message.ack()    ...         else:    ...             raise Exception(&quot;Unknown action: %s&quot; % action)    &gt;&gt;&gt; publisher = FeedPublisher(connection=conn)    &gt;&gt;&gt; publisher.import_feed(&quot;http://cnn.com/rss/edition.rss&quot;)    &gt;&gt;&gt; publisher.close()    &gt;&gt;&gt; consumer = FeedConsumer(connection=conn)    &gt;&gt;&gt; consumer.wait() # Go into the consumer loop.Getting Help============Mailing list------------Join the `carrot-users`_ mailing list... _`carrot-users`: http://groups.google.com/group/carrot-users/Bug tracker===========If you have any suggestions, bug reports or annoyances please report themto our issue tracker at http://github.com/ask/carrot/issues/Contributing============Development of ``carrot`` happens at Github: http://github.com/ask/carrotYou are highly encouraged to participate in the development. If you don'tlike Github (for some reason) you're welcome to send regular patches.License=======This software is licensed under the ``New BSD License``. See the ``LICENSE``file in the top distribution directory for the full license text.</longdescription>
</pkgmetadata>