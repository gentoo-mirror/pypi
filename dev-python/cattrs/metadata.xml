<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cattrs&lt;a href=&quot;https://pypi.python.org/pypi/cattrs&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/cattrs.svg&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/python-attrs/cattrs/actions?workflow=CI&quot;&gt;&lt;img src=&quot;https://github.com/python-attrs/cattrs/workflows/CI/badge.svg&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://catt.rs/en/latest/?badge=latest&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/cattrs/badge/?version=latest&quot; alt=&quot;Documentation Status&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/python-attrs/cattrs&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/cattrs.svg&quot; alt=&quot;Supported Python versions&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/python-attrs/cattrs/&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/python-attrs/cattrs/branch/master/graph/badge.svg&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;/&gt;&lt;/a&gt;---**cattrs** is an open source Python library for structuring and unstructuringdata. _cattrs_ works best with _attrs_ classes, dataclasses and the usualPython collections, but other kinds of classes are supported by manuallyregistering converters.Python has a rich set of powerful, easy to use, built-in data types likedictionaries, lists and tuples. These data types are also the lingua francaof most data serialization libraries, for formats like json, msgpack, cbor,yaml or toml.Data types like this, and mappings like `dict` s in particular, representunstructured data. Your data is, in all likelihood, structured: not allcombinations of field names or values are valid inputs to your programs. InPython, structured data is better represented with classes and enumerations._attrs_ is an excellent library for declaratively describing the structure ofyour data, and validating it.When you're handed unstructured data (by your network, file system, database...),_cattrs_ helps to convert this data into structured data. When you have toconvert your structured data into data types other libraries can handle,_cattrs_ turns your classes and enumerations into dictionaries, integers andstrings.Here's a simple taste. The list containing a float, an int and a stringgets converted into a tuple of three ints.```python&gt;&gt;&gt; import cattrs&gt;&gt;&gt; cattrs.structure([1.0, 2, &quot;3&quot;], tuple[int, int, int])(1, 2, 3)```_cattrs_ works well with _attrs_ classes out of the box.```python&gt;&gt;&gt; from attrs import frozen&gt;&gt;&gt; import cattrs&gt;&gt;&gt; @frozen  # It works with non-frozen classes too.... class C:...     a: int...     b: str&gt;&gt;&gt; instance = C(1, 'a')&gt;&gt;&gt; cattrs.unstructure(instance){'a': 1, 'b': 'a'}&gt;&gt;&gt; cattrs.structure({'a': 1, 'b': 'a'}, C)C(a=1, b='a')```Here's a much more complex example, involving `attrs` classes with typemetadata.```python&gt;&gt;&gt; from enum import unique, Enum&gt;&gt;&gt; from typing import Optional, Sequence, Union&gt;&gt;&gt; from cattrs import structure, unstructure&gt;&gt;&gt; from attrs import define, field&gt;&gt;&gt; @unique... class CatBreed(Enum):...     SIAMESE = &quot;siamese&quot;...     MAINE_COON = &quot;maine_coon&quot;...     SACRED_BIRMAN = &quot;birman&quot;&gt;&gt;&gt; @define... class Cat:...     breed: CatBreed...     names: Sequence[str]&gt;&gt;&gt; @define... class DogMicrochip:...     chip_id = field()  # Type annotations are optional, but recommended...     time_chipped: float = field()&gt;&gt;&gt; @define... class Dog:...     cuteness: int...     chip: Optional[DogMicrochip] = None&gt;&gt;&gt; p = unstructure([Dog(cuteness=1, chip=DogMicrochip(chip_id=1, time_chipped=10.0)),...                  Cat(breed=CatBreed.MAINE_COON, names=('Fluffly', 'Fluffer'))])&gt;&gt;&gt; print(p)[{'cuteness': 1, 'chip': {'chip_id': 1, 'time_chipped': 10.0}}, {'breed': 'maine_coon', 'names': ('Fluffly', 'Fluffer')}]&gt;&gt;&gt; print(structure(p, list[Union[Dog, Cat]]))[Dog(cuteness=1, chip=DogMicrochip(chip_id=1, time_chipped=10.0)), Cat(breed=&lt;CatBreed.MAINE_COON: 'maine_coon'&gt;, names=['Fluffly', 'Fluffer'])]```Consider unstructured data a low-level representation that needs to be convertedto structured data to be handled, and use `structure`. When you're done,`unstructure` the data to its unstructured form and pass it along to anotherlibrary or module. Use [attrs type metadata](http://attrs.readthedocs.io/en/stable/examples.html#types)to add type metadata to attributes, so _cattrs_ will know how to structure anddestructure them.- Free software: MIT license- Documentation: https://catt.rs- Python versions supported: 3.7 and up. (Older Python versions, like 2.7, 3.5 and 3.6 are supported by older versions; see the changelog.)## Features- Converts structured data into unstructured data, recursively:  - _attrs_ classes and dataclasses are converted into dictionaries in a way similar to `attrs.asdict`, or into tuples in a way similar to `attrs.astuple`.  - Enumeration instances are converted to their values.  - Other types are let through without conversion. This includes types such as    integers, dictionaries, lists and instances of non-_attrs_ classes.  - Custom converters for any type can be registered using `register_unstructure_hook`.- Converts unstructured data into structured data, recursively, according to  your specification given as a type. The following types are supported:  - `typing.Optional[T]`.  - `typing.List[T]`, `typing.MutableSequence[T]`, `typing.Sequence[T]` (converts to a list).  - `typing.Tuple` (both variants, `Tuple[T, ...]` and `Tuple[X, Y, Z]`).  - `typing.MutableSet[T]`, `typing.Set[T]` (converts to a set).  - `typing.FrozenSet[T]` (converts to a frozenset).  - `typing.Dict[K, V]`, `typing.MutableMapping[K, V]`, `typing.Mapping[K, V]` (converts to a dict).  - _attrs_ classes with simple attributes and the usual `__init__`.    - Simple attributes are attributes that can be assigned unstructured data,      like numbers, strings, and collections of unstructured data.  - All _attrs_ classes and dataclasses with the usual `__init__`, if their complex attributes have type metadata.  - `typing.Union` s of supported _attrs_ classes, given that all of the classes have a unique field.  - `typing.Union` s of anything, given that you provide a disambiguation function for it.  - Custom converters for any type can be registered using `register_structure_hook`._cattrs_ comes with preconfigured converters for a number of serialization libraries, including json, msgpack, cbor2, bson, yaml and toml.For details, see the [cattr.preconf package](https://catt.rs/en/stable/preconf.html).## Additional documentation and talks- [On structured and unstructured data, or the case for cattrs](https://threeofwands.com/on-structured-and-unstructured-data-or-the-case-for-cattrs/)- [Why I use attrs instead of pydantic](https://threeofwands.com/why-i-use-attrs-instead-of-pydantic/)- [cattrs I: un/structuring speed](https://threeofwands.com/why-cattrs-is-so-fast/)- [Python has a macro language - it's Python (PyCon IT 2022)](https://www.youtube.com/watch?v=UYRSixikUTo)## CreditsMajor credits to Hynek Schlawack for creating [attrs](https://attrs.org) and its predecessor,[characteristic](https://github.com/hynek/characteristic)._cattrs_ is tested with [Hypothesis](http://hypothesis.readthedocs.io/en/latest/), by David R. MacIver._cattrs_ is benchmarked using [perf](https://github.com/haypo/perf) and [pytest-benchmark](https://pytest-benchmark.readthedocs.io/en/latest/index.html).This package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and the [`audreyr/cookiecutter-pypackage`](https://github.com/audreyr/cookiecutter-pypackage) project template.</longdescription>
</pkgmetadata>