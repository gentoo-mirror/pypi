<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># timy![Python 3.3](https://img.shields.io/badge/python-3.3-blue.svg)![Python 3.4](https://img.shields.io/badge/python-3.4-blue.svg)![Python 3.5](https://img.shields.io/badge/python-3.5-blue.svg)![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)![CircleCI](https://img.shields.io/circleci/project/github/ramonsaraiva/timy/master.svg)![Codecov](https://img.shields.io/codecov/c/github/ramonsaraiva/timy/master.svg)Minimalist measurement of python code time&gt; **timy** comes with a different idea of the built-in module [timeit](https://docs.python.org/2.7/library/timeit.html). It adds flexibility and different ways of measuring code time, using simple context managers and function decorators.## Installing```pip install timy```## Usage### Decorating a functionLet's say you have a `calculate` function and you want to keep track of its execution time```pythonimport timy@timy.timer()def calculate(n, r):    &quot;&quot;&quot;    Divide, multiply and sum 'n' to every number in range 'r'    returning the result list    &quot;&quot;&quot;    return [i / n * n + n for i in range(r)]```Whenever you call that function, the execution time will be tracked```pythoncalculate(5, 10000000)&gt;&gt; Timy executed (calculate) for 1 time(s) in 1.529540 seconds&gt;&gt; Timy best time was 1.529540 seconds```Changing the **ident** and adding **loops** to the execution```pythonimport timy@timy.timer(ident='My calculation', loops=10)def calculate(n, r):    return [i / n * n + n for i in range(r)]calculate(5, 10000000)&gt;&gt; My calculation executed (calculate) for 10 time(s) in 15.165313 seconds&gt;&gt; My calculation best time was 1.414186 seconds```### Tracking **specific points** along your codeThe `with` statement can also be used to measure code time&gt; Named tracking points can be added with the `track` function```pythonimport timywith timy.Timer() as timer:    N = 10000000    for i in range(N):        if i == N/2:            timer.track('Half way')&gt;&gt; Timy (Half way) 0.557577 seconds&gt;&gt; Timy 0.988087 seconds            ```Another usage of tracking in a prime factors function```pythondef prime_factors(n):    with timy.Timer('Factors') as timer:        i = 2        factors = []        def add_factor(n):            factors.append(n)            timer.track('Found a factor')        while i * i &lt;= n:            if n % i == 0:                add_factor(i)                n //= i            else:                i += 1        return factors + [n]factors = prime_factors(600851475143)print(factors)&gt;&gt; Factors (Found a factor) 0.000017 seconds&gt;&gt; Factors (Found a factor) 0.000376 seconds&gt;&gt; Factors (Found a factor) 0.001547 seconds&gt;&gt; Factors 0.001754 seconds&gt;&gt; [71, 839, 1471, 6857]```### Configuring#### Importing timy config```pythonfrom timy.settings import timy_config```#### Enable or disable timy trackingsYou can enable or disable timy trackings with the `tracking` value.&gt; The default value of `tracking` is `True````pythontimy_config.tracking = False```#### Changing the way timy outputs informationYou can choose between print or logging for all timy outputs by setting thevalue of `tracking_mode`.&gt; The default value of `tracking_mode` is `TrackingMode.PRINTING`.```pythonfrom timy.settings import (    timy_config,    TrackingMode)timy_config.tracking_mode = TrackingMode.LOGGING```timy logs at the INFO level, which is not printed or stored by default. Toconfigure the logging system to print all INFO messages do```import logginglogging.basicConfig(level=logging.INFO)```or to configure the logging system to print only timy's INFO messages do```import logginglogging.basicConfig()logging.getLogger('timy').level=logging.INFO```## ContributeContributions are **always** welcome, but keep it simple and small.## LicenseThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details## Changelog### v 0.4.0 (September 23, 2017)- Drops py2 support and adds 100% coverage with CI integration### v 0.3.3 (April 19, 2017)- Adds an optional argument `include_sleeptime` to count time elapsed including sleep time (`include_sleeptime=True`) and excluding sleep time (`include_sleeptime=False`)</longdescription>
</pkgmetadata>