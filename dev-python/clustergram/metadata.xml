<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Clustergram![logoclustergram](https://raw.githubusercontent.com/martinfleis/clustergram/main/doc/_static/logo.svg)## Visualization and diagnostics for cluster analysis[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4750483.svg)](https://doi.org/10.5281/zenodo.4750483)Clustergram is a diagram proposed by Matthias Schonlau in his paper *[The clustergram: Agraph for visualizing hierarchical and nonhierarchical clusteranalyses](https://journals.sagepub.com/doi/10.1177/1536867X0200200405)*:&gt; In hierarchical cluster analysis, dendrograms are used to visualize how clusters are&gt; formed. I propose an alternative graph called a “clustergram” to examine how cluster&gt; members are assigned to clusters as the number of clusters increases. This graph is&gt; useful in exploratory analysis for nonhierarchical clustering algorithms such as&gt; k-means and for hierarchical cluster algorithms when the number of observations is&gt; large enough to make dendrograms impractical.The clustergram was later implemented in R by [TalGalili](https://www.r-statistics.com/2010/06/clustergram-visualization-and-diagnostics-for-cluster-analysis-r-code/),who also gives a thorough explanation of the concept.This is a Python implementation, originally based on Tal's script, written for`scikit-learn` and RAPIDS `cuML` implementations of K-Means, Mini Batch K-Means andGaussian Mixture Model (scikit-learn only) clustering, plus hierarchical/agglomerativeclustering using `SciPy`. Alternatively, you can create clustergram using  `from_*`constructors based on alternative clustering algorithms.[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/martinfleis/clustergram/main?urlpath=tree/doc/notebooks/)## Getting startedYou can install clustergram from `conda` or `pip`:```shellconda install clustergram -c conda-forge``````shellpip install clustergram```In any case, you still need to install your selected backend (`scikit-learn` and `scipy`or `cuML`).The example of clustergram on Palmer penguins dataset:```pythonimport seaborndf = seaborn.load_dataset('penguins')```First we have to select numerical data and scale them.```pythonfrom sklearn.preprocessing import scaledata = scale(df.drop(columns=['species', 'island', 'sex']).dropna())```And then we can simply pass the data to `clustergram`.```pythonfrom clustergram import Clustergramcgram = Clustergram(range(1, 8))cgram.fit(data)cgram.plot()```![Defaultclustergram](https://raw.githubusercontent.com/martinfleis/clustergram/master/doc/_static/default.png)## Styling`Clustergram.plot()` returns matplotlib axis and can be fully customised as any othermatplotlib plot.```pythonseaborn.set(style='whitegrid')cgram.plot(    ax=ax,    size=0.5,    linewidth=0.5,    cluster_style={&quot;color&quot;: &quot;lightblue&quot;, &quot;edgecolor&quot;: &quot;black&quot;},    line_style={&quot;color&quot;: &quot;red&quot;, &quot;linestyle&quot;: &quot;-.&quot;},    figsize=(12, 8))```![Coloredclustergram](https://raw.githubusercontent.com/martinfleis/clustergram/master/doc/_static/colors.png)## Mean optionsOn the `y` axis, a clustergram can use mean values as in the original paper by MatthiasSchonlau or PCA weighted mean values as in the implementation by Tal Galili.```pythoncgram = Clustergram(range(1, 8))cgram.fit(data)cgram.plot(figsize=(12, 8), pca_weighted=True)```![Defaultclustergram](https://raw.githubusercontent.com/martinfleis/clustergram/master/doc/_static/pca_true.png)```pythoncgram = Clustergram(range(1, 8))cgram.fit(data)cgram.plot(figsize=(12, 8), pca_weighted=False)```![Defaultclustergram](https://raw.githubusercontent.com/martinfleis/clustergram/master/doc/_static/pca_false.png)## Scikit-learn, SciPy and RAPIDS cuML backendsClustergram offers three backends for the computation - `scikit-learn` and `scipy` whichuse CPU and RAPIDS.AI `cuML`, which uses GPU. Note that all are optional dependenciesbut you will need at least one of them to generate clustergram.Using `scikit-learn` (default):```pythoncgram = Clustergram(range(1, 8), backend='sklearn')cgram.fit(data)cgram.plot()```Using `cuML`:```pythoncgram = Clustergram(range(1, 8), backend='cuML')cgram.fit(data)cgram.plot()````data` can be all data types supported by the selected backend (including`cudf.DataFrame` with `cuML` backend).## Supported methodsClustergram currently supports K-Means, Mini Batch K-Means, Gaussian Mixture Model andSciPy's hierarchical clustering methods. Note tha GMM and Mini Batch K-Means aresupported only for `scikit-learn` backend and hierarchical methods are supported onlyfor `scipy` backend.Using K-Means (default):```pythoncgram = Clustergram(range(1, 8), method='kmeans')cgram.fit(data)cgram.plot()```Using Mini Batch K-Means, which can provide significant speedup over K-Means:```pythoncgram = Clustergram(range(1, 8), method='minibatchkmeans', batch_size=100)cgram.fit(data)cgram.plot()```Using Gaussian Mixture Model:```pythoncgram = Clustergram(range(1, 8), method='gmm')cgram.fit(data)cgram.plot()```Using Ward's hierarchical clustering:```pythoncgram = Clustergram(range(1, 8), method='hierarchical', linkage='ward')cgram.fit(data)cgram.plot()```## Manual inputAlternatively, you can create clustergram using `from_data` or  `from_centers` methodsbased on alternative clustering algorithms.Using `Clustergram.from_data` which creates cluster centers as mean or median values:```pythondata = numpy.array([[-1, -1, 0, 10], [1, 1, 10, 2], [0, 0, 20, 4]])labels = pandas.DataFrame({1: [0, 0, 0], 2: [0, 0, 1], 3: [0, 2, 1]})cgram = Clustergram.from_data(data, labels)cgram.plot()```Using `Clustergram.from_centers` based on explicit cluster centers.:```pythonlabels = pandas.DataFrame({1: [0, 0, 0], 2: [0, 0, 1], 3: [0, 2, 1]})centers = {            1: np.array([[0, 0]]),            2: np.array([[-1, -1], [1, 1]]),            3: np.array([[-1, -1], [1, 1], [0, 0]]),        }cgram = Clustergram.from_centers(centers, labels)cgram.plot(pca_weighted=False)```To support PCA weighted plots you also need to pass data:```pythoncgram = Clustergram.from_centers(centers, labels, data=data)cgram.plot()```## Partial plot`Clustergram.plot()` can also plot only a part of the diagram, if you want to focus on alimited range of `k`.```pythoncgram = Clustergram(range(1, 20))cgram.fit(data)cgram.plot(figsize=(12, 8))```![Longclustergram](https://raw.githubusercontent.com/martinfleis/clustergram/master/doc/_static/20_clusters.png)```pythoncgram.plot(k_range=range(3, 10), figsize=(12, 8))```![Limitedclustergram](https://raw.githubusercontent.com/martinfleis/clustergram/master/doc/_static/limited_plot.png)## Additional clustering performance evaluationClustergam includes handy wrappers around a selection of clustering performance metricsoffered by `scikit-learn`. Data which were originally computed on GPU are converted tonumpy on the fly.### Silhouette scoreCompute the mean Silhouette Coefficient of all samples. See [`scikit-learn`documentation](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score)for details.```python&gt;&gt;&gt; cgram.silhouette_score()2    0.5315403    0.4472194    0.4001545    0.3777206    0.3721287    0.331575Name: silhouette_score, dtype: float64```Once computed, resulting Series is available as `cgram.silhouette`. Calling the originalmethod will recompute the score.### Calinski and Harabasz scoreCompute the Calinski and Harabasz score, also known as the Variance Ratio Criterion. See[`scikit-learn`documentation](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.calinski_harabasz_score.html#sklearn.metrics.calinski_harabasz_score)for details.```python&gt;&gt;&gt; cgram.calinski_harabasz_score()2    482.1914693    441.6770754    400.3921315    411.1750666    382.7314167    352.447569Name: calinski_harabasz_score, dtype: float64```Once computed, resulting Series is available as `cgram.calinski_harabasz`. Calling theoriginal method will recompute the score.### Davies-Bouldin scoreCompute the Davies-Bouldin score. See [`scikit-learn`documentation](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.davies_bouldin_score.html#sklearn.metrics.davies_bouldin_score)for details.```python&gt;&gt;&gt; cgram.davies_bouldin_score()2    0.7140643    0.9435534    0.9433205    0.9732486    0.9509107    1.074937Name: davies_bouldin_score, dtype: float64```Once computed, resulting Series is available as `cgram.davies_bouldin`. Calling theoriginal method will recompute the score.## Acessing labels`Clustergram` stores resulting labels for each of the tested options, which can beaccessed as:```python&gt;&gt;&gt; cgram.labels     1  2  3  4  5  6  70    0  0  2  2  3  2  11    0  0  2  2  3  2  12    0  0  2  2  3  2  13    0  0  2  2  3  2  14    0  0  2  2  0  0  3..  .. .. .. .. .. .. ..337  0  1  1  3  2  5  0338  0  1  1  3  2  5  0339  0  1  1  1  1  1  4340  0  1  1  3  2  5  5341  0  1  1  1  1  1  5```## Saving clustergramYou can save both plot and `clustergram.Clustergram` to a disk.### Saving plot`Clustergram.plot()` returns matplotlib axis object and as such can be saved as anyother plot:```pythonimport matplotlib.pyplot as pltcgram.plot()plt.savefig('clustergram.svg')```### Saving objectIf you want to save your computed `clustergram.Clustergram` object to a disk, you canuse `pickle` library:```pythonimport picklewith open('clustergram.pickle','wb') as f:    pickle.dump(cgram, f)```Then loading is equally simple:```pythonwith open('clustergram.pickle','rb') as f:    loaded = pickle.load(f)```## ReferencesSchonlau M. The clustergram: a graph for visualizing hierarchical and non-hierarchicalcluster analyses. The Stata Journal, 2002; 2 (4):391-402.Schonlau M. Visualizing Hierarchical and Non-Hierarchical Cluster Analyses withClustergrams. Computational Statistics: 2004; 19(1):95-111.[https://www.r-statistics.com/2010/06/clustergram-visualization-and-diagnostics-for-cluster-analysis-r-code/](https://www.r-statistics.com/2010/06/clustergram-visualization-and-diagnostics-for-cluster-analysis-r-code/)</longdescription>
</pkgmetadata>