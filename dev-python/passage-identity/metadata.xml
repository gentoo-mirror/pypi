<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://storage.googleapis.com/passage-docs/passage-logo-gradient.svg&quot; alt=&quot;Passage logo&quot; style=&quot;width:250px;&quot;/&gt;[![PyPI version](https://badge.fury.io/py/passage-identity.svg)](https://badge.fury.io/py/passage-identity)# passage-pythonThis Python SDK allows for verification of server-side authentication for applications using [Passage](https://passage.id)Install this package using [pip](https://pypi.org/project/passage-identity/).```pip install passage-identity```## Instantiating the Passage ClassPassage has three arguments that can be used for initialization: `app_id`, `api_key`, and `auth_strategy`.- `app_id` is the Passage App ID that specifies which app should be authorized. It has no default value and must to be set upon initialization.- `api_key` is an API key for the Passage app, which can be generated in the 'App Settings' section of the [Passage Console](https://console.passage.id). It is an optional parameter and not required for authenticating requests. It is required to get or update user information.- `auth_strategy` defines where the Passage SDK should look for the authentication token. It is set by default to `Passage.COOKIE_AUTH`, but can be changed to `Passage.HEADER_AUTH`.## Authenticating a RequestTo authenticate an HTTP request in a Flask application, you can use the Passage library in a middleware function.You need to provide Passage with your app ID in order to verify the JWTs.```pythonfrom passageidentity import Passageimport osPASSAGE_APP_ID_ = os.environ.get(&quot;PASSAGE_APP_ID&quot;)def exampleFlaskMiddleware(request):    psg = Passage(PASSAGE_APP_ID)    user = psg.authenticateRequest(request)```## Retrieve App InfoTo retrieve information about an app , you should use the `getApp` method.```pythonfrom passageidentity import Passageimport osPASSAGE_APP_ID_ = os.environ.get(&quot;PASSAGE_APP_ID&quot;)psg = Passage(PASSAGE_APP_ID)app_info = psg.getApp()```The information available in the Passage App object is as| Field                           | Type                   || ------------------------------- | ---------------------- || name                            | string                 || id                              | string                 || auth_origin                     | string                 || redirect_url                    | string                 || login_url                       | string                 || rsa_public_key                  | boolean                || allowed_identifier              | string                 || require_identifier_verification | boolean                || session_timeout_length          | int                    || user_metadata_schema            | list                   || layouts                         | list                   |## Retrieve User InfoTo retrieve information about a user, you should use the `getPassageUser` method. You will need to use a Passage API key, which can be created in the Passage Console under your Application Settings. This API key grants your web server access to the Passage management APIs to get and update information about users.This API key must be protected and stored in an appropriate secure storage location. It should never be hard-coded in the repository.```pythonfrom passageidentity import Passageimport osPASSAGE_APP_ID = os.environ.get(&quot;PASSAGE_APP_ID&quot;)PASSAGE_API_KEY = os.environ.get(&quot;PASSAGE_API_KEY&quot;)psg = Passage(PASSAGE_APP_ID, PASSAGE_API_KEY)def exampleFlaskMiddleware(request):    g.user = psg.authenticateRequest(request)@auth.route('/home')def authenticatedEndpoint():    user = psg.getPassageUser(g.user)print(user.email)```The information available in the Passage User object is as| Field            | Type                   || ---------------- | ---------------------- || id               | string                 || email            | string                 || phone            | string                 || status           | string                 || email_verified   | boolean                || phone_verified   | boolean                || created_at       | Datetime               || last_login_at    | Datetime               || webauthn         | boolean                || webauthn_devices | array                  || recent_events    | array of PassageEvents |## Activate/Deactivate UserYou can also activate or deactivate a user using the Passage SDK. These actions require an API Key and deactivating a user will prevent them from logging into your applicationwith Passage.```pythonfrom passageidentity import Passageimport osPASSAGE_APP_ID = os.environ.get(&quot;PASSAGE_APP_ID&quot;)PASSAGE_API_KEY = os.environ.get(&quot;PASSAGE_API_KEY&quot;)psg = Passage(PASSAGE_APP_ID, PASSAGE_API_KEY)# Get Passage User ID from database# ...#activate or deactivate this userpsg.deactivateUser(user_id)```## Update User AttributesYou can also update a user's attributes using the Passage SDK. This will require a Passage API Key.```pythonfrom passageidentity import Passageimport osPASSAGE_APP_ID = os.environ.get(&quot;PASSAGE_APP_ID&quot;)PASSAGE_API_KEY = os.environ.get(&quot;PASSAGE_API_KEY&quot;)psg = Passage(PASSAGE_APP_ID, PASSAGE_API_KEY)# Get Passage User ID from database# ...# update a user (note that user_metadata is optional)psg.updateUser(user_id, {    &quot;email&quot;: &quot;newEmail@domain.com&quot;,    &quot;phone&quot;: &quot;+15005550006&quot;,    &quot;user_metadata&quot;: {        &quot;example1&quot;: &quot;example metadata&quot;    }})```## Create UserYou can also create users using their email address or phone number. Note that their phone number must be in E164 format (example shown below).```pythonfrom passageidentity import Passageimport osPASSAGE_APP_ID = os.environ.get(&quot;PASSAGE_APP_ID&quot;)PASSAGE_API_KEY = os.environ.get(&quot;PASSAGE_API_KEY&quot;)psg = Passage(PASSAGE_APP_ID, PASSAGE_API_KEY)# Get Passage User ID from database# ...# create a user via their email (note that user_metadata is optional)psg.createUser({    &quot;email&quot;: &quot;exampleEmail@domain.com&quot;,    &quot;user_metadata&quot;: {        &quot;example1&quot;: &quot;example metadata&quot;    }})# create a user via their phone numberpsg.createUser({&quot;phone&quot;: &quot;+15005550007&quot;})```## Delete User```pythonfrom passageidentity import Passageimport osPASSAGE_APP_ID = os.environ.get(&quot;PASSAGE_APP_ID&quot;)PASSAGE_API_KEY = os.environ.get(&quot;PASSAGE_API_KEY&quot;)psg = Passage(PASSAGE_APP_ID, PASSAGE_API_KEY)# Get Passage User ID from database# ...# delete a user via their userIDdeleted_user = psg.deleteUser(user_id)if deleted_user:    print(&quot;User has been deleted&quot;)```## Create an Embeddable Magic LinkTo create a magic link, you should use the `createMagicLink` method. The method takes in `MagicLinkAttributes`, which is in this structure:| Field            | Type                   || ---------------- | ---------------------- || user_id          | string                 || email            | string                 || phone            | string                 || channel          | ChannelType            || send             | boolean                || magic_link_path  | string                 || redirect_url     | string                 |The information it returns is in a PassageMagicLink object with this structure:| Field            | Type                   || ---------------- | ---------------------- || id               | string                 || secret           | string                 || activated        | boolean                || user_id          | string                 || app_id           | string                 || identifier       | string                 || type             | Datetime               || webauthn         | boolean                || webauthn_devices | array                  || recent_events    | array of PassageEvents |```pythonfrom passageidentity import Passageimport osPASSAGE_APP_ID = os.environ.get(&quot;PASSAGE_APP_ID&quot;)PASSAGE_API_KEY = os.environ.get(&quot;PASSAGE_API_KEY&quot;)psg = Passage(PASSAGE_APP_ID, PASSAGE_API_KEY)# create a magic linkmagicLink = psg.createMagicLink(magicLinkAttributes={&quot;email&quot;: &quot;&lt;example@email.com&gt;&quot;, &quot;channel&quot;: &quot;email&quot;})```</longdescription>
</pkgmetadata>