<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `easyprofile` â€” Easy context-based profiling for PythonThe `easyprofile` package provides facilities for setting Python's`sys.setprofile()` locally within a context, together with a number of helpersto automate profiling and logging.## InstallationInstall as usual with pip:```consolepip install easyprofile```## Usage### Replacing `sys.setprofile()` locallyIf you wish to install a profile function that you would otherwise pass to`sys.setprofile()` within a local context, use the `easyprofile.profile`context manager:```py&gt;&gt;&gt; import easyprofile&gt;&gt;&gt;&gt;&gt;&gt; # profile function of the sys.setprofile() form&gt;&gt;&gt; def myfunc(frame, event, arg):...     print('profile:', event)...&gt;&gt;&gt; # a test function to be profiled&gt;&gt;&gt; def profile_this(n):...     # this inner function call will not show in the profile...     return sum(range(n))...&gt;&gt;&gt; # replace the profile function locally&gt;&gt;&gt; with easyprofile.profile(myfunc):...     # only this call will be profiled...     profile_this(100_000_000)...profile: callprofile: return4999999950000000```### Ignoring callsIf you wish to ignore some calls locally, you can use the `easyprofile.ignore`context manager:```py&gt;&gt;&gt; with easyprofile.profile(myfunc):...     # this call will be profiled...     profile_this(100_000_000)......     with easyprofile.ignore:...         # this call will be ignored...         profile_this(100)...profile: callprofile: return49999999500000004950```The context manager works by temporarily setting `sys.setprofile()` to `None`,and hence works with any profiler.Note that `easyprofile.ignore` is not a callable!### Marking functions as ignoredFunctions can be marked as always ignored using the `@easyprofile.ignored`decorator:```py&gt;&gt;&gt; # this function is ignored by easyprofile&gt;&gt;&gt; @easyprofile.ignored... def ignored_func():...     return 42...&gt;&gt;&gt; with easyprofile.profile(myfunc):...     ignored_func()...42```Note that unlike the `easyprofile.ignore` context manager, the decorator onlyworks with `easyprofile`.### Class-based profilersTo facilitate the creation of custom profilers, the `easyprofile.BaseProfile`class provides a method-based interface to handling events.  A methodwith a name `_&lt;event&gt;` (i.e. underscore -- event name) is called whenever theevent `&lt;event&gt;` is encountered, with a signature of `frame, arg`.```py&gt;&gt;&gt; class MyProfile(easyprofile.BaseProfile):...     def __init__(self, arg, *, kwarg):...         print(f'MyProfile: init, {arg=}, {kwarg=}')......     def _attach(self, frame, arg):...         print('MyProfile: attached')......     def _detach(self, frame, arg):...         print('MyProfile: detached')......     def _call(self, frame, arg):...         print('MyProfile: function called')......     def _return(self, frame, arg):...         print('MyProfile: function returned')......     # profile C extension calls using the same methods...     _c_call = _call...     _c_return = _return...```The class-based profilers are easily invoked through their `profile()` classmethod, which forwards its arguments to the constructor:```py&gt;&gt;&gt; # use the MyProfile class for local profiling&gt;&gt;&gt; with MyProfile.profile('hello', kwarg='world'):...     profile_this(100_000_000)...MyProfile: init, arg='hello', kwarg='world'MyProfile: function calledMyProfile: function returned4999999950000000```</longdescription>
</pkgmetadata>