<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&gt; :warning: This README is translated by Google. If there is a grammatical error, please open an issue to correct it!# python-loggerColorful logger for python3## How to use### Install```shellpip install colorful-logger```### Usage#### 1 default loggerYou can directly use the default logger, the colored logs will be printed on the terminal, and the default logger level is **warning**.```pythonfrom colorful_logger import loggerwith logger:    logger.debug(&quot;default logger&quot;)    logger.info(&quot;default logger&quot;)    logger.warning(&quot;default logger&quot;)    logger.error(&quot;default logger&quot;)```As you can see, `logger` needs to be executed in the `with` statement, because this package uses `QueueListener` to call log output. You need to call the `start` method before using `logger` to output the log, and you need to call the `stop` after the end of use. I encapsulated these two methods in the `with` statement. In non-special scenarios, there is no need to call the `start` and `stop` methods separately.![image-20230221100744751](https://s2.loli.net/2023/02/21/yXh5d9n4vO1mW3x.png)#### 2 custom loggerYou can also change the log level, save the log to a file, change the logger name, and the log may not be output to the terminal.```pythonfrom colorful_logger import get_logger, DEBUGdef demo_logger(to_file=False):    file = &quot;test_%d.log&quot;    l1 = get_logger(        &quot;demo&quot;,        DEBUG,        add_file_path=False,        disable_line_number_filter=False,        file_path=file % 1 if to_file else None,    )    with l1:        l1.debug(&quot;without file path&quot;)        l1.info(&quot;without file path&quot;)        l1.warning(&quot;without file path&quot;)        l1.error(&quot;without file path&quot;)    l2 = get_logger(        &quot;demo&quot;,        DEBUG,        add_file_path=True,        disable_line_number_filter=False,        file_path=file % 2 if to_file else None,    )    with l2:        l2.debug(&quot;with file path&quot;)        l2.info(&quot;with file path&quot;)        l2.warning(&quot;with file path&quot;)        l2.error(&quot;with file path&quot;)    l3 = get_logger(        None,        DEBUG,        add_file_path=True,        disable_line_number_filter=True,        file_path=file % 3 if to_file else None,    )    with l3:        l3.debug(&quot;without name, and with path&quot;)        l3.info(&quot;without name, and with path&quot;)        l3.warning(&quot;without name, and with path&quot;)        l3.error(&quot;without name, and with path&quot;)    l4 = get_logger(        None,        DEBUG,        add_file_path=False,        disable_line_number_filter=True,        file_path=file % 4 if to_file else None,    )    with l4:        l4.debug(&quot;without name and path&quot;)        l4.info(&quot;without name and path&quot;)        l4.warning(&quot;without name and path&quot;)        l4.error(&quot;without name and path&quot;)```There may be unexpected situations when outputting logs outside of the `with` statement, which may not achieve the expected results.![image-20230221100003891](https://s2.loli.net/2023/02/21/hqTSfOUobxgaQBI.png)The content of the log file `./test.log` (example, inconsistent with the information in the above figure):```[90m10:09:33.146[0m [35mDEB[0m [36mdemo[0m[1m:26[0m [96m-[0m without file path[90m10:09:33.146[0m [32mINF[0m [36mdemo[0m [96m-[0m without file path[90m10:09:33.146[0m [33mWAR[0m [36mdemo[0m [96m-[0m without file path[90m10:09:33.146[0m [91mERR[0m [36mdemo[0m[1m:29[0m [96m-[0m without file path```The log output to the file is not a color log by default.If you need to save the color log in a file, set the `file_colorful` parameter to `True`. In this example, the color log is saved.The color log file has only one function, which is to view the real-time log in the terminal:- Unix```shelltail -f test.log# æˆ–cat test.log```- Windows```powershellGet-Content -Path test.log```#### 3 child loggerAfter defining a `logger`, I want to use all the parameters of this `logger` except `name` to output the log. At this time, you need to use the `child_logger` method to generate a child logger. The child logger needs to be in the `with` of the parent logger Execute in the statement:```pythonfrom colorful_logger import get_logger, DEBUG# parent loggerlogger = get_logger(name=&quot;sample_logger&quot;, level=DEBUG, file_path=&quot;./test.log&quot;)with logger:    logger.error(&quot;parent error&quot;)    l1 = logger.child(&quot;l1&quot;)    l1.error(&quot;l1 error&quot;)    l1.fatal(&quot;l1 fatal&quot;)```The child logger is the same except that the name is different from the parent logger, and it will not output the log of the third-party library.The execution of the child logger in the `with` statement of the parent logger does not mean that it must be called directly in the `with` statement. It can be executed in a function in the `with` statement, such as:```python# log.pyfrom colorful_logger import get_logger, DEBUGlogger = get_logger(name=&quot;sample_logger&quot;, level=DEBUG, file_path=&quot;./test.log&quot;)``````python# main.pyfrom log import loggerfrom other_file import testwith logger:    test()``````python# other_file.pytest_logger = logger.child(&quot;test_logger&quot;)def test():    test_logger.error(&quot;test error&quot;)```</longdescription>
</pkgmetadata>