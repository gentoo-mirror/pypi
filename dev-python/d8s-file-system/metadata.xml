<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Democritus File System (Files and Directories)[![PyPI](https://img.shields.io/pypi/v/d8s-file-system.svg)](https://pypi.python.org/pypi/d8s-file-system)[![CI](https://github.com/democritus-project/d8s-file-system/workflows/CI/badge.svg)](https://github.com/democritus-project/d8s-file-system/actions)[![Lint](https://github.com/democritus-project/d8s-file-system/workflows/Lint/badge.svg)](https://github.com/democritus-project/d8s-file-system/actions)[![codecov](https://codecov.io/gh/democritus-project/d8s-file-system/branch/main/graph/badge.svg?token=V0WOIXRGMM)](https://codecov.io/gh/democritus-project/d8s-file-system)[![The Democritus Project uses semver version 2.0.0](https://img.shields.io/badge/-semver%20v2.0.0-22bfda)](https://semver.org/spec/v2.0.0.html)[![The Democritus Project uses black to format code](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://choosealicense.com/licenses/lgpl-3.0/)Democritus functions&lt;sup&gt;[1]&lt;/sup&gt; for working with files and directories.[1] Democritus functions are &lt;i&gt;simple, effective, modular, well-tested, and well-documented&lt;/i&gt; Python functions.We use `d8s` (pronounced &quot;dee-eights&quot;) as an abbreviation for `democritus` (you can read more about this [here](https://github.com/democritus-project/roadmap#what-is-d8s)).## Installation```pip install d8s-file-system```## UsageYou import the library like:```pythonfrom d8s_file_system import *```Once imported, you can use any of the functions listed below.## Functions  - ```python    def is_file(path: str) -&gt; bool:        &quot;&quot;&quot;Determine if the given path is a file.&quot;&quot;&quot;    ```  - ```python    def file_read(file_path: str) -&gt; str:        &quot;&quot;&quot;Read the file at the given file_path as a string.&quot;&quot;&quot;    ```  - ```python    def file_read_bytes(file_path: str) -&gt; bytes:        &quot;&quot;&quot;Read the file at the given file_path as bytes.&quot;&quot;&quot;    ```  - ```python    def file_write(file_path: str, file_contents: Any) -&gt; bool:        &quot;&quot;&quot;Write the given content to the file at the given path (including a file name).&quot;&quot;&quot;    ```  - ```python    def file_append(file_path: str, file_contents: Any) -&gt; bool:        &quot;&quot;&quot;Append the given content to the file at the given path (including a file name).&quot;&quot;&quot;    ```  - ```python    def file_move(starting_path: str, destination_path: str):        &quot;&quot;&quot;Move the file from the starting path to the destination path.&quot;&quot;&quot;    ```  - ```python    def file_copy(starting_path: str, destination_path: str, *, preserve_metadata: bool = False):        &quot;&quot;&quot;Copy the file from the starting_path to the destination path.&quot;&quot;&quot;    ```  - ```python    def file_delete(file_path: str):        &quot;&quot;&quot;Delete the given file.&quot;&quot;&quot;    ```  - ```python    def file_owner_name(file_path: str) -&gt; str:        &quot;&quot;&quot;Find the owner of the file at the given path.&quot;&quot;&quot;    ```  - ```python    def file_change_owner(file_path: str):        &quot;&quot;&quot;Change the ownership of the given file.&quot;&quot;&quot;    ```  - ```python    def file_ssdeep(file_path: str) -&gt; str:        &quot;&quot;&quot;Find the ssdeep fuzzy hash of the file.&quot;&quot;&quot;    ```  - ```python    def file_md5(file_path: str) -&gt; str:        &quot;&quot;&quot;Find the md5 hash of the given file.&quot;&quot;&quot;    ```  - ```python    def file_sha1(file_path: str) -&gt; str:        &quot;&quot;&quot;Find the sha1 hash of the given file.&quot;&quot;&quot;    ```  - ```python    def file_sha256(file_path: str) -&gt; str:        &quot;&quot;&quot;Find the sha256 hash of the given file.&quot;&quot;&quot;    ```  - ```python    def file_sha512(file_path: str) -&gt; str:        &quot;&quot;&quot;Find the sha512 hash of the given file.&quot;&quot;&quot;    ```  - ```python    def file_name_escape(file_name_arg: str) -&gt; str:        &quot;&quot;&quot;Escape the name of a file so that it can be used as a file name in a file path.&quot;&quot;&quot;    ```  - ```python    def file_name(file_path: str) -&gt; str:        &quot;&quot;&quot;Find the file name from the given file path.&quot;&quot;&quot;    ```  - ```python    def file_name_windows(windows_file_path: str) -&gt; str:        &quot;&quot;&quot;Find the file name from the given windows_file_path.&quot;&quot;&quot;    ```  - ```python    def file_name_unix(unix_file_path: str) -&gt; str:        &quot;&quot;&quot;Find the file name from the given unix_file_path.&quot;&quot;&quot;    ```  - ```python    def file_size(file_path: str) -&gt; int:        &quot;&quot;&quot;Find the file size.&quot;&quot;&quot;    ```  - ```python    def file_directory(file_path: str) -&gt; str:        &quot;&quot;&quot;Return the directory in which the given file resides.&quot;&quot;&quot;    ```  - ```python    def file_details(file_path: str) -&gt; Dict[str, Union[str, int]]:        &quot;&quot;&quot;Get file hashes and file size for the given file.&quot;&quot;&quot;    ```  - ```python    def file_exists(file_path: str) -&gt; bool:        &quot;&quot;&quot;Check if the file exists.&quot;&quot;&quot;    ```  - ```python    def file_is_readable(file_path: str) -&gt; bool:        &quot;&quot;&quot;Check if the file is readable.&quot;&quot;&quot;    ```  - ```python    def file_is_writable(file_path: str) -&gt; bool:        &quot;&quot;&quot;Check if the file is writable.&quot;&quot;&quot;    ```  - ```python    def file_is_executable(file_path: str) -&gt; bool:        &quot;&quot;&quot;Check if the file is executable.&quot;&quot;&quot;    ```  - ```python    def file_contains(file_path: str, pattern: str, *, pattern_is_regex: bool = False) -&gt; bool:        &quot;&quot;&quot;Return whether or not the file contains the given pattern.&quot;&quot;&quot;    ```  - ```python    def file_search(file_path: str, pattern: str, *, pattern_is_regex: bool = False) -&gt; List[str]:        &quot;&quot;&quot;Search for the given pattern in the file.&quot;&quot;&quot;    ```  - ```python    def file_name_matches(file_path: str, pattern: str) -&gt; bool:        &quot;&quot;&quot;Return whether or not the file name contains the given pattern.&quot;&quot;&quot;    ```  - ```python    def is_directory(path: str) -&gt; bool:        &quot;&quot;&quot;Determine if the given path is a directory.&quot;&quot;&quot;    ```  - ```python    def directory_exists(directory_path: str) -&gt; bool:        &quot;&quot;&quot;Check if the directory exists.&quot;&quot;&quot;    ```  - ```python    def directory_file_names(directory_path: str, *, recursive: bool = False) -&gt; List[str]:        &quot;&quot;&quot;List files at the given directory_path.&quot;&quot;&quot;    ```  - ```python    def directory_file_paths(directory_path: str, *, recursive: bool = False) -&gt; List[str]:        &quot;&quot;&quot;List the file paths at the given directory_path.&quot;&quot;&quot;    ```  - ```python    def directory_copy(src_path: str, dst_path: str):        &quot;&quot;&quot;Copy the directory from the src_path to the destination path.&quot;&quot;&quot;    ```  - ```python    def directory_delete(directory_path: str):        &quot;&quot;&quot;Delete the given directory.&quot;&quot;&quot;    ```  - ```python    def directory_create(directory_path: str, mode=0o777):        &quot;&quot;&quot;Create a directory.&quot;&quot;&quot;    ```  - ```python    def directory_disk_usage(directory_path: str):        &quot;&quot;&quot;Return the disk usage for the given directory.&quot;&quot;&quot;    ```  - ```python    def directory_disk_free_space(directory_path: str):        &quot;&quot;&quot;Return the free space in the given directory.&quot;&quot;&quot;    ```  - ```python    def directory_disk_used_space(directory_path: str):        &quot;&quot;&quot;Return the used space in the given directory.&quot;&quot;&quot;    ```  - ```python    def directory_disk_total_space(directory_path: str):        &quot;&quot;&quot;Return the total space in the given directory.&quot;&quot;&quot;    ```  - ```python    def home_directory() -&gt; str:        &quot;&quot;&quot;Return the home directory.&quot;&quot;&quot;    ```  - ```python    def home_directory_join(path: str) -&gt; str:        &quot;&quot;&quot;Join the given path with the home directory.&quot;&quot;&quot;    ```  - ```python    def directory_move(src_path: str, dst_path: str):        &quot;&quot;&quot;Move the directory from the src_path to the dst_path.&quot;&quot;&quot;    ```  - ```python    def directory_files_details(directory_path: str, *, recursive: bool = False) -&gt; Dict[str, Dict[str, Union[str, int]]]:        &quot;&quot;&quot;Return the file details for each file in the directory at the given path.&quot;&quot;&quot;    ```  - ```python    def directory_files_read(directory_path: str, *, recursive: bool = False) -&gt; Iterable[Tuple[str, str]]:        &quot;&quot;&quot;Read all files in the directory_path.&quot;&quot;&quot;    ```  - ```python    def directory_subdirectory_names(directory_path: str, *, recursive: bool = False) -&gt; List[str]:        &quot;&quot;&quot;List the names of all subdirectories in the given directory.&quot;&quot;&quot;    ```  - ```python    def directory_files_containing(        directory_path: str, pattern: str, *, pattern_is_regex: bool = False, recursive: bool = False    ) -&gt; Dict[str, List[str]]:        &quot;&quot;&quot;Search for the given pattern in all files in the given directory_path.&quot;&quot;&quot;    ```  - ```python    def directory_file_paths_matching(directory_path: str, pattern: str, *, recursive: bool = False) -&gt; List[str]:        &quot;&quot;&quot;Return the paths of all of the files in the given directory which match the pattern.&quot;&quot;&quot;    ```  - ```python    def directory_file_names_matching(directory_path: str, pattern: str, *, recursive: bool = False) -&gt; List[str]:        &quot;&quot;&quot;Return the names of all of the files in the given directory which match the pattern.&quot;&quot;&quot;    ```  - ```python    def directory_read_files_with_path_matching(        directory_path: str, pattern: str, *, recursive: bool = False    ) -&gt; Iterable[Tuple[str, str]]:        &quot;&quot;&quot;Read all of the files in the given directory whose paths match the given pattern.&quot;&quot;&quot;    ```  - ```python    def atomic_write(fpath, *, overwrite: bool = True, **cls_kwargs):        &quot;&quot;&quot;Create a context manager to write atomically using the AtomicWriterPerms class to update file permissions.&quot;&quot;&quot;    ```## Development👋 &amp;nbsp;If you want to get involved in this project, we have some short, helpful guides below:- [contribute to this project 🥇][contributing]- [test it 🧪][local-dev]- [lint it 🧹][local-dev]- [explore it 🔭][local-dev]If you have any questions or there is anything we did not cover, please raise an issue and we'll be happy to help.## CreditsThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and Floyd Hightower's [Python project template](https://github.com/fhightower-templates/python-project-template).[contributing]: https://github.com/democritus-project/.github/blob/main/CONTRIBUTING.md#contributing-a-pr-[local-dev]: https://github.com/democritus-project/.github/blob/main/CONTRIBUTING.md#local-development-</longdescription>
</pkgmetadata>