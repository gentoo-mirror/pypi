<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Firefly Client Library[&lt;img alt=&quot;Firefly logo&quot; src=&quot;https://raw.githubusercontent.com/fireflyprotocol/firefly_exchange_client/main/res/banner.png&quot; /&gt;](#)&lt;div align=&quot;center&quot;&gt;![GitHub Workflow Status (with branch)](https://img.shields.io/github/actions/workflow/status/fireflyprotocol/firefly_exchange_client/publish_to_pypi.yml)[![pypi version](https://img.shields.io/pypi/v/firefly_exchange_client?logo=pypi)](https://pypi.org/project/firefly_exchange_client/)[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)&lt;/div&gt;Python Client for the Firefly Exchange API and Smart Contracts.### InstallThe package can be installed from [PyPi](https://pypi.org/project/firefly-exchange-client/) using pip:```pip install firefly-exchange-client```The package currently supports python `&gt;=3.8`. Find complete documentation on the library at https://docs.firefly.exchange/.### Getting StartedWhen initializing the client, users must accept [terms and conditions](https://firefly.exchange/terms-of-use) and define network object containing the following values:```json{    &quot;url&quot;: &quot;https://goerli-rollup.arbitrum.io/rpc&quot;,    &quot;chainId&quot;: 421613,    &quot;apiGateway&quot;: &quot;https://dapi-testnet.firefly.exchange&quot;,    &quot;socketURL&quot;: &quot;wss://dapi-testnet.firefly.exchange&quot;,    &quot;webSocketURL&quot;: &quot;&quot;,    &quot;onboardingUrl&quot;: &quot;https://testnet.firefly.exchange&quot;,},```Users can import predefined networks from [constants](https://github.com/fireflyprotocol/firefly_exchange_client/blob/main/src/firefly_exchange_client/constants.py):```pythonfrom firefly_exchange_client import Networks```For testing purposes use `Networks[TESTNET_ARBITRUM]` and for production please use `Networks[MAINNET_ARBITRUM]````pythonfrom config import TEST_ACCT_KEY, TEST_NETWORKfrom firefly_exchange_client import FireflyClient, Networksfrom pprint import pprintimport asyncioasync def main():  # initialize client  client = FireflyClient(      True, # agree to terms and conditions      Networks[TEST_NETWORK], # network to connect with      TEST_ACCT_KEY, # private key of wallet      )  # initialize the client  # on boards user on firefly. Must be set to true for first time use  await client.init(True)     print('Account Address:', client.get_public_address());  # # gets user account data on-chain  data = await client.get_user_account_data()  # close aio http connection  await client.apis.close_session()  pprint(data)if __name__ == &quot;__main__&quot;:    event_loop = asyncio.get_event_loop()    event_loop.run_until_complete(main())```**Placing Orders:**```pythonfrom firefly_exchange_client import FireflyClient, Networks, MARKET_SYMBOLS, ORDER_SIDE, ORDER_TYPE, OrderSignatureRequestimport asyncio# initializeclient = FireflyClient(....) client.init(True)# creates a LIMIT order to be signedsignature_request = OrderSignatureRequest(    symbol=MARKET_SYMBOLS.ETH,  # market symbol    price=0,  # price at which you want to place order    quantity=0.01, # quantity    side=ORDER_SIDE.BUY,     orderType=ORDER_TYPE.MARKET,    leverage=user_leverage)  # create signed ordersigned_order = client.create_signed_order(signature_request);print(&quot;Placing a market order&quot;)# place signed order on orderbookresp = await client.post_signed_order(signed_order)# returned order with PENDING stateprint(resp)```**Listening To Events Using Socket.io:**```pythonfrom firefly_exchange_client import FireflyClient, Networks, MARKET_SYMBOLS, ORDER_SIDE, ORDER_TYPE, OrderSignatureRequestdef callback(event):    print(&quot;Event data:&quot;, event)# initializeclient = FireflyClient(....) client.init(True)# make connection with firefly exchangeawait client.socket.open()# subscribe to local user eventsawait client.socket.subscribe_user_update_by_token()# listen to user order updates and trigger callbackawait client.socket.listen(SOCKET_EVENTS.ORDER_UPDATE.value, callback)## place some orders to exchange, that will trigger callback# resp = client.post_signed_order(signed_order)#time.sleep(10)# unsubscribe from user eventsawait client.socket.unsubscribe_user_update_by_token()# close socket connectionawait client.socket.close()```Look at the [example](https://github.com/fireflyprotocol/firefly_exchange_client/tree/main/examples) directory to see more examples on how to use this library.**Listening To Events Using Web Sockets:**```pythonfrom firefly_exchange_client import FireflyClient, Networks, MARKET_SYMBOLS, ORDER_SIDE, ORDER_TYPE, SOCKET_EVENTS, OrderSignatureRequestimport timedef callback(event):    print(&quot;Event data:&quot;, event)# initializeclient = FireflyClient(....) client.init()# make connection with firefly exchangeclient.webSocketClient.initialize_socket(on_open=on_open)def on_open(ws):  # subscribe to local user events  client.webSocketClient.subscribe_user_update_by_token()    # listen to user order updates and trigger callback  client.webSocketClient.listen(SOCKET_EVENTS.ORDER_UPDATE.value, callback)  #  # place some orders to exchange, that will trigger callback  # resp = client.post_signed_order(signed_order)  #  time.sleep(10)  # unsubscribe from user events  client.webSocketClient.unsubscribe_user_update_by_token()  # close socket connection  client.webSocketClient.stop()```</longdescription>
</pkgmetadata>