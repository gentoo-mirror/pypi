<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://sspipe.github.io/img/icon.png&quot; width=&quot;120&quot; align=&quot;right&quot;/&gt;[![Downloads](http://pepy.tech/badge/sspipe)](http://pepy.tech/project/sspipe)[![Build Status](https://circleci.com/gh/sspipe/sspipe.svg?style=svg)](https://app.circleci.com/pipelines/github/sspipe/sspipe)[![PyPI](https://badge.fury.io/py/sspipe.svg)](http://pypi.org/project/sspipe)# Simple Smart PipeSSPipe is a python productivity-tool for rapid data manipulation in python.It helps you break up any complicated expression into a sequence ofsimple transformations, increasing human-readability and decreasing theneed for matching parentheses! As an example, here is a single line code for reading students' datafrom 'data.csv', reporting those in the class 'A19' whose score is morethan the average class score into 'report.csv':```pythonfrom sspipe import p, pximport pandas as pdpd.read_csv('data.csv') | px[px['class'] == 'A19'] | px[px.score &gt; px.score.mean()].to_csv('report.csv')```As another example, here is a single line code for plottingsin(x) for points in range(0, 2*pi) where cos(x) is less than 0 in red color:```pythonfrom sspipe import p, pximport numpy as npimport matplotlib.pyplot as pltnp.linspace(0, 2*np.pi, 100) | px[np.cos(px) &lt; 0] | p(plt.plot, px, np.sin(px), 'r')# The single-line code above is equivalent to the following code without SSPipe:# X = np.linspace(0, 2*np.pi, 100)# X = X[np.cos(X) &lt; 0]# plt.plot(X, np.sin(X), 'r')```If you're familiar with[`|` operator](https://en.wikipedia.org/wiki/Pipeline_(Unix))of Unix, or[`%&gt;%` operator](https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html)of R's magrittr, `sspipe` provides the same functionality in python.### Installation and UsageInstall sspipe using pip:```bashpip install --upgrade sspipe```Then import it in your scripts.```pythonfrom sspipe import p, px```The whole functionalityof this library is exposed by two objects `p` (as a wrapper for functions tobe called on the piped object) and `px` (as a placeholder for piped object).### Examples| Description | Python expression using `p` and `px` | Equivalent python code || --- |:--- |:--- || Simple&lt;br&gt;function call | `&quot;hello world!&quot; \| p(print)` | `X = &quot;hello world!&quot;`&lt;br&gt;`print(X)` || Function call&lt;br&gt;with extra args | `&quot;hello&quot; \| p(print, &quot;world&quot;, end='!')` | `X = &quot;hello&quot;`&lt;br&gt;`print(X, &quot;world&quot;, end='!')` || Explicitly positioning&lt;br&gt;piped argument&lt;br&gt;with `px` placeholder | `&quot;world&quot; \| p(print, &quot;hello&quot;, px, &quot;!&quot;)` | `X = &quot;world&quot;`&lt;br&gt;`print(&quot;hello&quot;, X, &quot;!&quot;)` || Chaining pipes | `5 \| px + 2 \| px ** 5 + px \| p(print)` | `X = 5`&lt;br&gt;`X = X + 2`&lt;br&gt;`X = X ** 5 + X`&lt;br&gt;`print(X)` || Tailored behavior&lt;br&gt;for builtin `map`&lt;br&gt;and `filter` | `(`&lt;br&gt;`  range(5)`&lt;br&gt;`  \| p(filter, px % 2 == 0)`&lt;br&gt;`  \| p(map, px + 10)`&lt;br&gt;`  \| p(list) \| p(print)`&lt;br&gt;`)` | `X = range(5)`&lt;br&gt;`X = filter((lambda x:x%2==0),X)`&lt;br&gt;`X = map((lambda x: x + 10), X)`&lt;br&gt;`X = list(X)`&lt;br&gt;`print(X)` || NumPy expressions | `range(10) \| np.sin(px)+1 \| p(plt.plot)` | `X = range(10)`&lt;br&gt;`X = np.sin(X) + 1`&lt;br&gt;`plt.plot(X)` || Pandas support | `people_df \| px.loc[px.age &gt; 10, 'name']` | `X = people_df`&lt;br&gt;`X.loc[X.age &gt; 10, 'name']` || Assignment | `people_df['name'] \|= px.str.upper()` | `X = people_df['name']`&lt;br&gt;`X = X.str.upper()`&lt;br&gt;`people_df['name'] = X` || Pipe as variable | `to_upper = px.strip().upper()`&lt;br&gt;`to_underscore = px.replace(' ', '_')`&lt;br&gt;`normalize = to_upper \| to_underscore`&lt;br&gt;`&quot;  ab cde &quot; \| normalize \| p(print)` | `_f1 = lambda x: x.strip().upper()`&lt;br&gt;`_f2 = lambda x: x.replace(' ','_')`&lt;br&gt;`_f3 = lambda x: _f2(_f1(x))`&lt;br&gt;`X = &quot; ab cde &quot;`&lt;br&gt;`X = _f3(X)`&lt;br&gt;`print(X)` || Builtin&lt;br&gt;Data Structures | `2 \| p({px-1: p([px, p((px+1, 4))])})` | `X = 2`&lt;br&gt;`X = {X-1: [X, (X+1, 4)]}` |### How it worksThe expression `p(func, *args, **kwargs)` returns a `Pipe` object that overloads `__or__` and `__ror__` operators. This object keeps `func` and `args` and `kwargs` untilevaluation of `x | &lt;Pipe&gt;`, when `Pipe.__ror__` is called by python. Then it will evaluate`func(x, *args, **kwargs)` and return the result. The `px` object is simply `p(lambda x: x)`.Please notice that SSPipe does not wrap piped objects. On the other hand, it just wraps transforming functions. Therefore, when a variable like `x` is not an instance of `Pipe` class, after python evaluates `y = x | p(func)`, the resulting variable `y` has absolutely no trace of Pipe. Thus, it will be exactly the same object as if we have originally evaluated `y = func(x)`. ### Common Gotchas* Incompatibility with `dict.items`, `dict.keys` and `dict.values`:    The objects returned by dict.keys(), dict.values() and dict.items() are   called [view objects](https://docs.python.org/3.3/library/stdtypes.html#dict-views).  Python does not allow classes to override the `|` operator on these types. As a workaround,  the `/` operator has been implemented for view objects. Example:  ```python3  # WRONG ERRONEOUS CODE:  {1: 2, 3: 4}.items() | p(list) | p(print)    # CORRECT CODE (With / operator):  {1: 2, 3: 4}.items() / p(list) | p(print)  ```### Compatibility with JulienPalard/PipeThis library is inspired by, and depends on, the intelligent and concise work of [JulienPalard/Pipe](https://github.com/JulienPalard/Pipe). If you want a single `pipe.py` script or a lightweight library that implements core functionality and logic of SSPipe, Pipe is perfect.SSPipe is focused on facilitating usage of pipes, by integration with popular libraries and introducing `px` concept and overriding python operators to make pipe a first-class citizen. Every existing pipe implemented by JulienPalard/Pipe library is accessible through `p.&lt;original_name&gt;` and is compatible with SSPipe. SSPipe does not implement any specific pipe function and delegatesimplementation and naming of pipe functions to JulienPalard/Pipe.For example, JulienPalard/Pipe's [example](https://github.com/JulienPalard/Pipe#introduction)for solving &quot;Find the sum of all the even-valued terms in Fibonacci which do not exceed four million.&quot;can be re-written using sspipe:```pythondef fib():    a, b = 0, 1    while True:        yield a        a, b = b, a + bfrom sspipe import p, pxeuler2 = (fib() | p.where(lambda x: x % 2 == 0)                | p.take_while(lambda x: x &lt; 4000000)                | p.add())```You can also pass `px` shorthands to JulienPalard/Pipe API:```pythoneuler2 = (fib() | p.where(px % 2 == 0)                | p.take_while(px &lt; 4000000)                | p.add())```</longdescription>
</pkgmetadata>