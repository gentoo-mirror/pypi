<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cs1 Compressed Sensing library for 1D (one-dimensional) Spectroscopic Profiling Data&lt;table&gt;    &lt;thead&gt;        &lt;tr&gt;            &lt;th&gt;package&lt;/th&gt;            &lt;th&gt;module&lt;/th&gt;            &lt;th&gt;sub-module&lt;/th&gt;            &lt;th&gt;description&lt;/th&gt;        &lt;/tr&gt;    &lt;/thead&gt;    &lt;tbody&gt;        &lt;tr&gt;            &lt;td rowspan=9&gt;cs1&lt;sup&gt;[3]&lt;/sup&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan = 2&gt;cs1.cs&lt;/td&gt;            &lt;td&gt;basic functions for CS sensing, recovery, hyper-parameter grid-search, etc.&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td rowspan = 2&gt;cs1.basis&lt;/td&gt;            &lt;td&gt;cs1.basis.common&lt;/td&gt;            &lt;td&gt;commonly used non-adaptive CS transform bases&lt;sup&gt;[1]&lt;/sup&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;cs1.basis.adaptive&lt;/td&gt;            &lt;td&gt;adaptive CS transform bases, e.g., LDA (linear discriminant analysis)-based, EBP (eigenvector-based projection)&lt;sup&gt;[2]&lt;/sup&gt;, VAE (variational auto-encoder)&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan = 2            &gt;cs1.metrics&lt;/td&gt;            &lt;td&gt;CS-related metrics, e.g., mutual coherence, sparsity, MSE, KLD&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;cs1.security&lt;/td&gt;            &lt;td&gt;cs1.security.tvsm&lt;/td&gt;            &lt;td&gt;time-variant sensing matrix mechanism&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td rowspan = 2&gt;cs1.domain&lt;/td&gt;            &lt;td&gt;cs1.domain.audio&lt;/td&gt;            &lt;td&gt;contains functions for audio and other one-dimensional signal processing. e.g., wave file I/O, lossy compression, ECG simulator&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;cs1.domain.image&lt;/td&gt;            &lt;td&gt;contains functions for image processing. e.g., image CS, lossy compression&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan = 2&gt;cs1.gui&lt;/td&gt;            &lt;td&gt;provides a web-based playground for researchers. users can try different CS bases and sampling ratios&lt;/td&gt;        &lt;/tr&gt;    &lt;/tbody&gt;&lt;/table&gt;Publications:   [1] Adaptive compressed sensing of Raman spectroscopic profiling data for discriminative tasks [J]. Talanta, 2020, doi: 10.1016/j.talanta.2019.120681   [2]  Task-adaptive eigenvector-based projection (EBP) transform for compressed sensing: A case study of spectroscopic profiling sensor [J]. Analytical Science Advances. Chemistry Europe, 2021, doi: 10.1002/ansa.202100018  [3] Compressed Sensing library for spectroscopic profiling data [J]. Software Impacts, 2023, doi: 10.1016/j.simpa.2023.100492# Installation&gt; pip install cs1# A simple startup        import cs1    # Generate common non-adaptive bases and save to a local pickle file.    # The generation process can be very slow, so save it for future use.    cs1.basis.common.Generate_PSIs(n, savepath = 'PSIs_' + str(n) + '.pkl') # n is the data/signal dimensionality    # load back bases    file = open('PSIs_' + str(n) + '.pkl','rb')    PSIs = pickle.load(file)    file.close()    # sparsity analysis    cs1.metrics.analyze_sparsity(x, PSIs)&lt;img src='sparsity_analysis.png'&gt;    # compare different bases and sampling ratio on a single sample    mses, rmses = cs1.cs.GridSearch_Sensing_n_Recovery(x, PSIs, solver = 'LASSO') # returns MSEs and relative MSEs&lt;img src='grid_search.png'&gt;# low-level cs functions        from cs1.basis.common import *    dftmtx()    dctmtx()    hwtmtx()    from cs1.cs import *    sensing()    recovery()        from cs1.metrics import *    mutual_coherence()    ...# singal processing functions for audio / image domains    from cs1.domain.audio import *    simulate_ECG()    dct_lossy_signal_compression()    dft_lossy_signal_compression()    from cs1.domain.image import *    img_dct()    img_dft()    dct_lossy_image_compression()    dft_lossy_image_compression()# adaptive cs bases    from cs1.basis.adaptive import *        PSI, _ = EBP(X) # X is a m-by-n training dataset. PSI is the EBP basis    PSI, _, _ = LDA(X, y, display = True) # X and y are training dataset. PSI is the LDA basis.# run as a local web server`python -m cs1.gui.run`You can then access the web GUI at the 5006 port: &lt;img src=&quot;src/cs1/gui/static/images/Sensing - clean.png&quot;&gt;&lt;img src=&quot;src/cs1/gui/static/images/reconstruction - clean.png&quot;&gt;</longdescription>
</pkgmetadata>