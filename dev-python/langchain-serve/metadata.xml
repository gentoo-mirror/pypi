<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;h2 align=&quot;center&quot;&gt;⚡ LangChain Apps on Production with Jina &amp; FastAPI 🚀&lt;/h2&gt;&lt;/p&gt;&lt;p align=center&gt;&lt;a href=&quot;https://pypi.org/project/langchain-serve/&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/langchain-serve?label=Release&amp;style=flat-square&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://discord.jina.ai&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/1106542220112302130?logo=discord&amp;logoColor=white&amp;style=flat-square&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypistats.org/packages/langchain-serve&quot;&gt;&lt;img alt=&quot;PyPI - Downloads from official pypistats&quot; src=&quot;https://img.shields.io/pypi/dm/langchain-serve?style=flat-square&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/jina-ai/langchain-serve/actions/workflows/cd.yml&quot;&gt;&lt;img alt=&quot;Github CD status&quot; src=&quot;https://github.com/jina-ai/langchain-serve/actions/workflows/cd.yml/badge.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;[Jina](https://github.com/jina-ai/jina) is an open-source framework for building scalable multi modal AI apps on Production. [LangChain](https://python.langchain.com/en/latest/index.html) is another open-source framework for building applications powered by LLMs.**langchain-serve** helps you deploy your LangChain apps on Jina AI Cloud in a matter of seconds. You can benefit from the scalability and serverless architecture of the cloud without sacrificing the ease and convenience of local development. And if you prefer, you can also deploy your LangChain apps on your own infrastructure to ensure data privacy. With langchain-serve, you can craft REST/Websocket APIs, spin up LLM-powered conversational Slack bots, or wrap your LangChain apps into FastAPI packages on cloud or on-premises.&gt; Give us a :star: and tell us what more you'd like to see! # ☁️ LLM Apps as-a-servicelangchain-serve currently wraps following apps as a service to be deployed on Jina AI Cloud with one command.## 🔮 AutoGPT-as-a-service[AutoGPT](https://github.com/Significant-Gravitas/Auto-GPT) is an &quot;AI agent&quot; that given a goal in natural language, will attempt to achieve it by breaking it into sub-tasks and using the internet and other tools in an automatic loop.&lt;details&gt;&lt;summary&gt;Show usage&lt;/summary&gt;- Deploy `autogpt` on Jina AI Cloud with one command  ```bash  lc-serve deploy autogpt  ```  &lt;details&gt;  &lt;summary&gt;Show command output&lt;/summary&gt;  ```text  ╭──────────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────╮  │ App ID       │                                           autogpt-6cbd489454                                           │  ├──────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────┤  │ Phase        │                                                Serving                                                 │  ├──────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────┤  │ Endpoint     │                                 wss://autogpt-6cbd489454.wolf.jina.ai                                  │  ├──────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────┤  │ App logs     │                                        dashboards.wolf.jina.ai                                         │  ├──────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────┤  │ Swagger UI   │                              https://autogpt-6cbd489454.wolf.jina.ai/docs                              │  ├──────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────┤  │ OpenAPI JSON │                          https://autogpt-6cbd489454.wolf.jina.ai/openapi.json                          │  ╰──────────────┴────────────────────────────────────────────────────────────────────────────────────────────────────────╯  ```  &lt;/details&gt;- Integrate autogpt with external services using APIs. Get a flavor of the integration on your CLI with       ```bash  lc-serve playground autogpt  ```  &lt;details&gt;  &lt;summary&gt;Show playground&lt;/summary&gt;  &lt;img src=&quot;.github/images/autogpt-playground.gif&quot; title=&quot;autogpt-as-a-service Playground&quot;&gt;  &lt;/details&gt;&lt;/details&gt;## 🧠 Babyagi-as-a-service[Babyagi](https://github.com/yoheinakajima/babyagi) is a task-driven autonomous agent that uses LLMs to create, prioritize, and execute tasks. It is a general-purpose AI agent that can be used to automate a wide variety of tasks.&lt;details&gt;&lt;summary&gt;Show usage&lt;/summary&gt;- Deploy `babyagi` on Jina AI Cloud with one command  ```bash  lc-serve deploy babyagi  ```- Integrate babyagi with external services using our Websocket API. Get a flavor of the integration on your CLI with       ```bash  lc-serve playground babyagi  ```  &lt;details&gt;  &lt;summary&gt;Show playground&lt;/summary&gt;  &lt;img src=&quot;.github/images/babyagi-playground.gif&quot; title=&quot;Babyagi-as-a-service Playground&quot;&gt;  &lt;/details&gt;&lt;/details&gt;## :panda_face: pandas-ai-as-a-service[pandas-ai](https://github.com/gventuri/pandas-ai) integrates LLM capabilities into Pandas, to make dataframes conversational in Python code. Thanks to langchain-serve, we can now expose pandas-ai APIs on Jina AI Cloud in just a matter of seconds.&lt;details&gt;&lt;summary&gt;Show usage&lt;/summary&gt;- Deploy **pandas-ai** on Jina AI Cloud  ```bash  lc-serve deploy pandas-ai  ```  &lt;details&gt;  &lt;summary&gt;Show command output&lt;/summary&gt;  ```text  ╭──────────────┬─────────────────────────────────────────────────────────────────────────────────╮  │ App ID       │                               pandasai-06879349ca                               │  ├──────────────┼─────────────────────────────────────────────────────────────────────────────────┤  │ Phase        │                                     Serving                                     │  ├──────────────┼─────────────────────────────────────────────────────────────────────────────────┤  │ Endpoint     │                     wss://pandasai-06879349ca.wolf.jina.ai                      │  ├──────────────┼─────────────────────────────────────────────────────────────────────────────────┤  │ App logs     │                             dashboards.wolf.jina.ai                             │  ├──────────────┼─────────────────────────────────────────────────────────────────────────────────┤  │ Swagger UI   │                  https://pandasai-06879349ca.wolf.jina.ai/docs                  │  ├──────────────┼─────────────────────────────────────────────────────────────────────────────────┤  │ OpenAPI JSON │              https://pandasai-06879349ca.wolf.jina.ai/openapi.json              │  ╰──────────────┴─────────────────────────────────────────────────────────────────────────────────╯  ```  &lt;/details&gt;- Upload your DataFrame to Jina AI Cloud (Optional - you can also use a publicly available CSV)  - Define your DataFrame in a Python file        ```python    # dataframe.py    import pandas as pd    df = pd.DataFrame(some_data)    ```  - Upload your DataFrame to Jina AI Cloud using `&lt;module&gt;:&lt;variable&gt;` syntax        ```bash    lc-serve util upload-df dataframe:df    ```- Conversationalize your DataFrame using pandas-ai APIs. Get a flavor of the integration with a local playground on your CLI with     ```bash  lc-serve playground pandas-ai &lt;host&gt;  ```  &lt;details&gt;  &lt;summary&gt;Show playground&lt;/summary&gt;  &lt;img src=&quot;.github/images/pandas-ai-playground.gif&quot; title=&quot;pandas-ai-as-a-service Playground&quot;&gt;  &lt;/details&gt;&lt;/details&gt;## 💬 Question Answer Bot on PDFs`pdfqna` is a simple question answering bot that uses LLMs to answer questions on PDF documents, showcasing the how easy it is to integrate langchain apps on Jina AI Cloud.&lt;details&gt;&lt;summary&gt;Show usage&lt;/summary&gt;- Deploy `pdf_qna` on Jina AI Cloud with one command  ```bash  lc-serve deploy pdf-qna  ```- Get a flavor of the integration with Streamlit playground on your CLI with       ```bash  lc-serve playground pdf-qna  ```  &lt;details&gt;  &lt;summary&gt;Show playground&lt;/summary&gt;  &lt;img src=&quot;.github/images/pdf_qna_demo.gif&quot; title=&quot;pdf_qna Playground&quot;&gt;  &lt;/details&gt;- Expand the Q&amp;A bot to multiple languages, different document types &amp; integrate with external services using simple REST APIs.  https://github.com/jina-ai/langchain-serve/blob/8f7a9272e99490a5357655becfc5da3569655f38/lcserve/apps/pdf_qna/app.py#L8-L12&lt;/details&gt;# 💪 Features### 🎉 LLM Apps on production    - 👉 **[Define your API using `@serving` decorator](#-rest-apis-using-serving-decorator)**   - 👉 **[Build, deploy &amp; distribute Slack bots using `@slackbot` decorator](#-build-deploy--distribute-slack-bots-built-with-langchain)**  - 👉 **[Bring your own FastAPI app](#-bring-your-own-fastapi-app)**### 🔥 Secure, Scalable, Serverless, Streaming REST/Websocket APIs on [Jina AI Cloud](https://cloud.jina.ai/).  - 🌎 Globally available REST/Websocket APIs with automatic TLS certs.  - 🌊 Stream LLM interactions in real-time with Websockets.  - 👥 Enable human in the loop for your agents.  - 💬 Build, deploy &amp; distribute Slack bots built with langchain.  - 🔑 Protect your APIs with [API authorization](#-authorize-your-apis) using Bearer tokens.   - 📄 Swagger UI, and OpenAPI spec included with your APIs.  - ⚡️ Serverless, autoscaling apps that scales automatically with your traffic.  - 📁 Persistent storage (EFS) mounted on your app for your data.  - 📊 Builtin logging, monitoring, and traces for your APIs.  - 🤖 No need to change your code to manage APIs, or manage dockerfiles, or worry about infrastructure!### 🏠 Self-host LLM Apps with Docker Compose or Kubernetes  - 🚀 Export your apps as Kubernetes or Docker Compose YAMLs with single command.  - 👉 `lc-serve export app --kind &lt;kubernetes/docker-compose&gt; --path .`  - 📦 Deploy your app on your own internal infrastructure with your own security policies.  - 📞 [Talk to us if you need all the features of Jina AI Cloud on your own infrastructure.](#-reach-out-to-us)# 🧰 UsageLet's first install `langchain-serve` using pip.```bashpip install langchain-serve```## 🔄 REST APIs using `@serving` decoratorLet's build &amp; deploy a custom agent using this example taken from [LangChain documentation](https://python.langchain.com/en/latest/modules/agents/agents/custom_agent.html). &lt;details&gt;&lt;summary&gt;Show example&lt;/summary&gt;&lt;details&gt;&lt;summary&gt;Show agent code (app.py)&lt;/summary&gt;```python# app.pyfrom langchain.agents import ZeroShotAgent, Tool, AgentExecutorfrom langchain import OpenAI, SerpAPIWrapper, LLMChainsearch = SerpAPIWrapper()tools = [    Tool(        name = &quot;Search&quot;,        func=search.run,        description=&quot;useful for when you need to answer questions about current events&quot;    )]prefix = &quot;&quot;&quot;Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:&quot;&quot;&quot;suffix = &quot;&quot;&quot;Begin! Remember to speak as a pirate when giving your final answer. Use lots of &quot;Args&quot;Question: {input}{agent_scratchpad}&quot;&quot;&quot;prompt = ZeroShotAgent.create_prompt(    tools,     prefix=prefix,     suffix=suffix,     input_variables=[&quot;input&quot;, &quot;agent_scratchpad&quot;])llm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)tool_names = [tool.name for tool in tools]agent = ZeroShotAgent(llm_chain=llm_chain, allowed_tools=tool_names)agent_executor = AgentExecutor.from_agent_and_tools(agent=agent, tools=tools, verbose=True)agent_executor.run(&quot;How many people live in canada as of 2023?&quot;)```#### Output```text&gt; Entering new AgentExecutor chain...Thought: I need to find out the population of CanadaAction: SearchAction Input: Population of Canada 2023Observation: The current population of Canada is 38,610,447 as of Saturday, February 18, 2023, based on Worldometer elaboration of the latest United Nations data. Canada 2020 population is estimated at 37,742,154 people at mid year according to UN data.Thought: I now know the final answerFinal Answer: Arrr, Canada be havin' 38,610,447 scallywags livin' there as of 2023!&gt; Finished chain.```&lt;/details&gt;### Step 1: **Refactor your code to function(s) that should be served with `@serving` decorator**&lt;details&gt;&lt;summary&gt;Show updated agent code (app.py)&lt;/summary&gt;```python# app.pyfrom langchain import LLMChain, OpenAI, SerpAPIWrapperfrom langchain.agents import AgentExecutor, Tool, ZeroShotAgentfrom lcserve import serving@servingdef ask(input: str) -&gt; str:    search = SerpAPIWrapper()    tools = [        Tool(            name=&quot;Search&quot;,            func=search.run,            description=&quot;useful for when you need to answer questions about current events&quot;,        )    ]    prefix = &quot;&quot;&quot;Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:&quot;&quot;&quot;    suffix = &quot;&quot;&quot;Begin! Remember to speak as a pirate when giving your final answer. Use lots of &quot;Args&quot;    Question: {input}    {agent_scratchpad}&quot;&quot;&quot;    prompt = ZeroShotAgent.create_prompt(        tools,        prefix=prefix,        suffix=suffix,        input_variables=[&quot;input&quot;, &quot;agent_scratchpad&quot;],    )    print(prompt.template)    llm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)    tool_names = [tool.name for tool in tools]    agent = ZeroShotAgent(llm_chain=llm_chain, allowed_tools=tool_names)    agent_executor = AgentExecutor.from_agent_and_tools(        agent=agent, tools=tools, verbose=True    )    return agent_executor.run(input)if __name__ == &quot;__main__&quot;:    ask('How many people live in canada as of 2023?')```&lt;/details&gt;##### What changed?- We moved our code to an `ask` function.- Added type hints to the function parameters (input and output), so API definition can be generated.- Imported `from lcserve import serving` and added `@serving` decorator to the `ask` function.- Added `if __name__ == &quot;__main__&quot;:` block to test the function locally.---### Step 2:**Create a `requirements.txt` file in your app directory to ensure all necessary dependencies are installed.**&lt;details&gt;&lt;summary&gt;Show requirements.txt&lt;/summary&gt;```text# requirements.txtopenaigoogle-search-results```&lt;/details&gt;--- ### Step 3:**Run `lc-serve deploy local app` to test your API locally.**&gt; `app` is the name of the module that contains the `ask` function.```bashlc-serve deploy local app```&lt;details&gt;&lt;summary&gt;Show output&lt;/summary&gt;```text────────────────────────────────────────────────────────────────────────────────────────────────────── 🎉 Flow is ready to serve! ───────────────────────────────────────────────────────────────────────────────────────────────────────╭──────────────────────── 🔗 Endpoint ────────────────────────╮│  ⛓   Protocol                                         HTTP  ││  🏠     Local                                 0.0.0.0:8080  ││  🔒   Private                          192.168.29.185:8080  ││  🌍    Public  2405:201:d007:e8e7:2c33:cf8e:ed66:2018:8080  │╰─────────────────────────────────────────────────────────────╯╭─────────── 💎 HTTP extension ────────────╮│  💬          Swagger UI        .../docs  ││  📚               Redoc       .../redoc  │╰──────────────────────────────────────────╯```&lt;/details&gt;Let's open the [Swagger UI](http://localhost:8080/docs) to test our API locally. With `Try it out` button, we can test our API with different inputs.&lt;details&gt;&lt;summary&gt;Show Swagger UI&lt;/summary&gt;![Local Swagger UI](.github/images/local-swagger-ui.png)&lt;/details&gt;Let's test our local API with `How many people live in canada as of 2023?` input with a cURL command.```bashcurl -X 'POST' \  'http://localhost:8080/ask' \  -H 'accept: application/json' \  -H 'Content-Type: application/json' \  -d '{  &quot;input&quot;: &quot;How many people live in canada as of 2023?&quot;,  &quot;envs&quot;: {    &quot;OPENAI_API_KEY&quot;: &quot;'&quot;${OPENAI_API_KEY}&quot;'&quot;,    &quot;SERPAPI_API_KEY&quot;: &quot;'&quot;${SERPAPI_API_KEY}&quot;'&quot;  }}'``````json{  &quot;result&quot;: &quot;Arrr, there be 38,645,670 people livin' in Canada as of 2023!&quot;,  &quot;error&quot;: &quot;&quot;,  &quot;stdout&quot;: &quot;Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:\n\nSearch: useful for when you need to answer questions about current events\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search]\nAction Input: the input to the action\nObservation: the result of the action\n... (this Thought/Action/Action Input/Observation can repeat N times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin! Remember to speak as a pirate when giving your final answer. Use lots of \&quot;Args\&quot;\n\n    Question: {input}\n    {agent_scratchpad}\n\n\n\u001b[1m&gt; Entering new AgentExecutor chain...\u001b[0m\n\u001b[32;1m\u001b[1;3m\nThought: I need to find out how many people live in Canada\nAction: Search\nAction Input: How many people live in Canada as of 2023\u001b[0m\nObservation: \u001b[36;1m\u001b[1;3mThe current population of Canada is 38,645,670 as of Wednesday, March 29, 2023, based on Worldometer elaboration of the latest United Nations data.\u001b[0m\nThought:\u001b[32;1m\u001b[1;3m I now know the final answer\nFinal Answer: Arrr, there be 38,645,670 people livin' in Canada as of 2023!\u001b[0m\n\n\u001b[1m&gt; Finished chain.\u001b[0m&quot;}```##### What happened?- `POST /ask` is generated from `ask` function defined in `app.py`.- `input` is an argrment defined in `ask` function. - `envs` is a dictionary of environment variables that will be passed to all the functions decorated with `@serving` decorator.- return type of `ask` function is `str`. So, `result` would carry the return value of `ask` function.- If there is an error, `error` would carry the error message.- `stdout` would carry the output of the function decorated with `@serving` decorator.---### Step 4:**Run `lc-serve deploy jcloud app` to deploy your API to Jina AI Cloud.**```bash# Login to Jina AI Cloudjina auth login# Deploy your app to Jina AI Cloudlc-serve deploy jcloud app```&lt;details&gt;&lt;summary&gt;Show complete output&lt;/summary&gt;```text⠇ Pushing `/tmp/tmp7kt5qqrn` ...🔐 You are logged in to Jina AI as ***. To log out, use jina auth logout.╭────────────────────────── Published ───────────────────────────╮│                                                                ││   📛 Name           n-64a15                                    ││   🔗 Jina Hub URL   https://cloud.jina.ai/executor/6p1zio87/   ││   👀 Visibility     public                                     ││                                                                │╰────────────────────────────────────────────────────────────────╯╭─────────────────────── 🎉 Flow is available! ───────────────────────╮│                                                                     ││   ID               langchain-ee4aef57d9                             ││   Gateway (Http)   https://langchain-ee4aef57d9-http.wolf.jina.ai   ││   Dashboard        https://dashboard.wolf.jina.ai/flow/ee4aef57d9   ││                                                                     │╰─────────────────────────────────────────────────────────────────────╯```&lt;/details&gt;```text╭──────────────┬─────────────────────────────────────────────────────────────╮│ AppID        │                    langchain-ee4aef57d9                     │├──────────────┼─────────────────────────────────────────────────────────────┤│ Phase        │                           Serving                           │├──────────────┼─────────────────────────────────────────────────────────────┤│ Endpoint     │       https://langchain-ee4aef57d9-http.wolf.jina.ai        │├──────────────┼─────────────────────────────────────────────────────────────┤│ Swagger UI   │     https://langchain-ee4aef57d9-http.wolf.jina.ai/docs     │├──────────────┼─────────────────────────────────────────────────────────────┤│ OpenAPI JSON │ https://langchain-ee4aef57d9-http.wolf.jina.ai/openapi.json │╰──────────────┴─────────────────────────────────────────────────────────────╯```Let's open the Swagger UI to test our API on Jina AI Cloud. With `Try it out` button, we can test our API with different inputs.&lt;details&gt;&lt;summary&gt;Show Swagger UI&lt;/summary&gt;&lt;p float=&quot;center&quot;&gt;  &lt;img src=&quot;.github/images/jcloud-swagger-ui.png&quot; width=&quot;400&quot; /&gt;  &lt;img src=&quot;.github/images/jcloud-openapi.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;&lt;/details&gt;Let's test the API on JCloud with `How many people live in canada as of 2023?` input with a cURL command (Replace the Hostname with your own hostname):```bashcurl -X 'POST' \  'https://langchain-ee4aef57d9-http.wolf.jina.ai/ask' \  -H 'accept: application/json' \  -H 'Content-Type: application/json' \  -d '{  &quot;input&quot;: &quot;How many people live in canada as of 2023?&quot;,  &quot;envs&quot;: {    &quot;OPENAI_API_KEY&quot;: &quot;'&quot;${OPENAI_API_KEY}&quot;'&quot;,    &quot;SERPAPI_API_KEY&quot;: &quot;'&quot;${SERPAPI_API_KEY}&quot;'&quot;  }}'``````json{  &quot;result&quot;: &quot;Arrr, there be 38,645,670 people livin' in Canada as of 2023!&quot;,  &quot;error&quot;: &quot;&quot;,  &quot;stdout&quot;: &quot;Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:\n\nSearch: useful for when you need to answer questions about current events\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search]\nAction Input: the input to the action\nObservation: the result of the action\n... (this Thought/Action/Action Input/Observation can repeat N times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin! Remember to speak as a pirate when giving your final answer. Use lots of \&quot;Args\&quot;\n\n    Question: {input}\n    {agent_scratchpad}\n\n\n\u001b[1m&gt; Entering new AgentExecutor chain...\u001b[0m\n\u001b[32;1m\u001b[1;3m\nThought: I need to find out how many people live in Canada\nAction: Search\nAction Input: How many people live in Canada as of 2023\u001b[0m\nObservation: \u001b[36;1m\u001b[1;3mThe current population of Canada is 38,645,670 as of Wednesday, March 29, 2023, based on Worldometer elaboration of the latest United Nations data.\u001b[0m\nThought:\u001b[32;1m\u001b[1;3m I now know the final answer\nFinal Answer: Arrr, there be 38,645,670 people livin' in Canada as of 2023!\u001b[0m\n\n\u001b[1m&gt; Finished chain.\u001b[0m&quot;}```##### What happened?- In a matter of few seconds, we've deployed our API on Jina AI Cloud 🎉- The API is serverless and scalable, so we can scale up the API to handle more requests. - You might observe a delay in the first request, that's due to the warm-up time of the API. Subsequent requests will be faster.- The API includes a Swagger UI and the OpenAPI specification, so it can be easily integrated with other services. - Now, other agents can integrate with your agents on Jina AI Cloud thanks to the [OpenAPI Agent](https://python.langchain.com/en/latest/modules/agents/toolkits/examples/openapi.html) 💡&lt;/details&gt;---## 🤖💬 Build, Deploy &amp; Distribute Slack bots built with LangChainlangchain-serve exposes a `@slackbot` decorator to quickly build, deploy &amp; distribute LLM-powered Slack bots without worrying about the infrastructure. It provides a simple interface to any langchain app on and makes them super accessible to users a platform they're already comfortable with.✨ Ready to dive in? There's a [step-by-step guide in the repository](lcserve/apps/slackbot/) to help you build your own bot.---## 🔐 Authorize your APIsTo add an extra layer of security, we can integrate any custom API authorization by adding a `auth` argument to the `@serving` decorator. &lt;details&gt;&lt;summary&gt;Show code &amp; gotchas&lt;/summary&gt;```pythonfrom lcserve import servingdef authorizer(token: str) -&gt; Any:    if not token == 'mysecrettoken':            # Change this to add your own authorization logic        raise Exception('Unauthorized')         # Raise an exception if the request is not authorized    return 'userid'                             # Return any user id or object@serving(auth=authorizer)def ask(question: str, **kwargs) -&gt; str:    auth_response = kwargs['auth_response']     # This will be 'userid'    return ...@serving(websocket=True, auth=authorizer)async def talk(question: str, **kwargs) -&gt; str:    auth_response = kwargs['auth_response']     # This will be 'userid'    return ...```##### 🤔 Gotchas about the `auth` function- Should accept only one argument `token`.- Should raise an Exception if the request is not authorized.- Can return any object, which will be passed to the `auth_response` object under `kwargs` to the functions.- Expects Bearer token in the `Authorization` header of the request.- Sample HTTP request with `curl`:  ```bash  curl -X 'POST' 'http://localhost:8080/ask' -H 'Authorization: Bearer mysecrettoken' -d '{ &quot;question&quot;: &quot;...&quot;, &quot;envs&quot;: {} }'  ```- Sample WebSocket request with `wscat`:  ```bash  wscat -H &quot;Authorization: Bearer mysecrettoken&quot; -c ws://localhost:8080/talk  ```&lt;/details&gt;---## 🙋♂️ Enable streaming &amp; human-in-the-loop (HITL) with WebSocketsHITL for LangChain agents on production can be challenging since the agents are typically running on servers where humans don't have direct access. **langchain-serve** bridges this gap by enabling websocket APIs that allow for real-time interaction and feedback between the agent and a human operator.Check out this [example](examples/websockets/hitl/README.md) to see how you can enable HITL for your agents.## 📁 Persistent storage on Jina AI CloudEvery app deployed on Jina AI Cloud gets a persistent storage (EFS) mounted locally which can be accessed via `workspace` kwarg in the `@serving` function.&lt;details&gt;&lt;summary&gt;Show code&lt;/summary&gt;```pythonfrom lcserve import serving@servingdef store(text: str, **kwargs):    workspace: str = kwargs.get('workspace')    path = f'{workspace}/store.txt'    print(f'Writing to {path}')    with open(path, 'a') as f:        f.writelines(text + '\n')    return 'OK'@serving(websocket=True)async def stream(**kwargs):    workspace: str = kwargs.get('workspace')    websocket: WebSocket = kwargs.get('websocket')    path = f'{workspace}/store.txt'    print(f'Streaming {path}')    async with aiofiles.open(path, 'r') as f:        async for line in f:            await websocket.send_text(line)    return 'OK'```Here, we are using the `workspace` to store the incoming text in a file via the REST endpoint and streaming the contents of the file via the WebSocket endpoint.&lt;/details&gt;## 🚀 Bring your own FastAPI appIf you already have a FastAPI app with pre-defined endpoints, you can use `lc-serve` to deploy it on Jina AI Cloud. ```bashlc-serve deploy jcloud --app filename:app ```&lt;details&gt;&lt;summary&gt;Show details&lt;/summary&gt;Let's take an example of a simple FastAPI app with directory structure```bash.└── endpoints.py``````python# endpoints.pyfrom typing import Unionfrom fastapi import FastAPIapp = FastAPI()@app.get(&quot;/status&quot;)def read_root():    return {&quot;Hello&quot;: &quot;World&quot;}@app.get(&quot;/items/{item_id}&quot;)def read_item(item_id: int, q: Union[str, None] = None):    return {&quot;item_id&quot;: item_id, &quot;q&quot;: q}``````bashlc-serve deploy jcloud --app endpoints:app```&lt;/details&gt;---## 💻 `lc-serve` CLI`lc-serve` is a simple CLI that helps you to deploy your agents on Jina AI Cloud (JCloud) | Description | Command | | --- | ---: || Deploy your app locally | `lc-serve deploy local app` || Export your app as Kubernetes YAML | `lc-serve export app --kind kubernetes --path .` || Export your app as Docker Compose YAML | `lc-serve export app --kind docker-compose --path .` || Deploy your app on JCloud | `lc-serve deploy jcloud app` || Deploy FastAPI app on JCloud | `lc-serve deploy jcloud --app &lt;app-name&gt;:&lt;app-object&gt;` || Update existing app on JCloud | `lc-serve deploy jcloud app --app-id &lt;app-id&gt;` || Get app status on JCloud | `lc-serve status &lt;app-id&gt;` || List all apps on JCloud | `lc-serve list` || Remove app on JCloud | `lc-serve remove &lt;app-id&gt;` |# 💡 JCloud Deployment## ⚙️ ConfigurationsFor JCloud deployment, you can configure your application infrastructure by providing a YAML configuration file using the `--config` option. The supported configurations are:  - Instance type (`instance`), as defined by [Jina AI Cloud](https://docs.jina.ai/concepts/jcloud/configuration/#cpu-tiers).  - Minimum number of replicas for your application (`autoscale_min`). Setting it 0 enables [serverless](https://en.wikipedia.org/wiki/Serverless_computing).  - Disk size (`disk_size`), in GB. The default value is 1 GB.For example:```instance: C4autoscale_min: 0disk_size: 1.5G```You can alternatively include a `jcloud.yaml` file in your application directory with the desired configurations. However, please note that if the `--config` option is explicitly used in the command line interface, the local jcloud.yaml file will be disregarded. The command line provided configuration file will take precedence.If you don't provide a configuration file or a specific configuration isn't specified, the following default settings will be applied: ```instance: C3autoscale_min: 1disk_size: 1G```## 💰 PricingApplications hosted on JCloud are priced in two categories:**Base credits**- Base credits are charged to ensure high availability for your application by maintaining at least one instance running continuously, ready to handle incoming requests.- Actual credits charged for base credits are calculated based on the [instance type as defined by Jina AI Cloud](https://docs.jina.ai/concepts/jcloud/configuration/#cpu-tiers).- By default, instance type `C3` is used with a minimum of 1 instance and [Amazon EFS](https://aws.amazon.com/efs/) disk of size 1G, which means that if your application is served on JCloud, you will be charged ~10 credits per hour.- You can change the instance type and the minimum number of instances by providing a YAML configuration file using the `--config` option. For example, if you want to use instance type `C4` with a minimum of 0 replicas, and 2G EFS disk, you can provide the following configuration file:  ```yaml  instance: C4  autoscale_min: 0  disk_size: 2G  ```**Serving credits**- Serving credits are charged when your application is actively serving incoming requests.- Actual credits charged for serving credits are calculated based on the credits for the instance type multiplied by the duration for which your application serves requests. - You are charged for each second your application is serving requests.**Total credits charged = Base credits + Serving credits**. ([Jina AI Cloud](https://cloud.jina.ai/pricing) defines each credit as €0.005)### Examples&lt;details&gt;&lt;summary&gt;&lt;b&gt;Example 1&lt;/b&gt;&lt;/summary&gt;Consider an HTTP application that has served requests for `10` minutes in the last hour and uses a custom config:```instance: C4autoscale_min: 0disk_size: 2G```Total credits per hour charged would be `3.33`. The calculation is as follows:```C4 instance has an hourly credit rate of 20.EFS has hourly credit rate of 0.104 per GB.Base credits = 0 + 2 * 0.104 = 0.208 (since `autoscale_min` is 0)Serving credits = 20 * 10/60 = 3.33Total credits per hour = 0.208 + 3.33 = 3.538```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;&lt;b&gt;Example 2&lt;/b&gt;&lt;/summary&gt;Consider a WebSocket application that had active connections for 20 minutes in the last hour and uses the default configuration.```instance: C3autoscale_min: 1disk_size: 1G```Total credits per hour charged would be `13.33`. The calculation is as follows:```C3 instance has an hourly credit rate of 10.EFS has hourly credit rate of 0.104 per GB.Base credits = 10 + 1 * 0.104 = 10.104 (since `autoscale_min` is 1)Serving credits = 10 * 20/60 = 3.33Total credits per hour = 10.104 + 3.33 = 13.434```&lt;/details&gt;# ❓ Frequently Asked Questions- [`lc-serve` command not found](#lc-serve-command-not-found)- [My client that connects to the JCloud hosted App gets timed-out, what should I do?](#my-client-that-connects-to-the-jcloud-hosted-app-gets-timed-out-what-should-I-do)- [How to pass environment variables to the app?](#how-to-pass-environment-variables-to-the-app)- [JCloud deployment failed at pushing image to Jina Hubble, what should I do?](#jcloud-deployment-failed-at-pushing-image-to-jina-hubble-what-should-i-di)- [Debug babyagi playground request/response for external integration](#debug-babyagi-playground-requestresponse-for-external-integration)### `lc-serve` command not found&lt;details&gt;&lt;summary&gt;&lt;b&gt;Expand&lt;/b&gt;&lt;/summary&gt;`lc-serve` command is registered during `langchain-serve` installation. If you get `command not found: lc-serve` error, please replace `lc-serve` command with `python -m lcserve` &amp; retry.  &lt;/details&gt;### My client that connects to the JCloud hosted App gets timed-out, what should I do?&lt;details&gt;&lt;summary&gt;&lt;b&gt;Expand&lt;/b&gt;&lt;/summary&gt;If you make long HTTP/ WebSocket requests, the default timeout value (2 minutes) might not be suitable for your use case. You can provide a custom timeout value during JCloud deployment by using the `--timeout` argument.Additionally, for HTTP, you may also experience timeouts due to limitations in the OSS we used in `langchain-serve`. While we are working to permanently address this issue, we recommend using HTTP/1.1 in your client as a temporary workaround.For WebSocket, please note that the connection will be closed if idle for more than 5 minutes.&lt;/details&gt;### How to pass environment variables to the app?&lt;details&gt;&lt;summary&gt;&lt;b&gt;Expand&lt;/b&gt;&lt;/summary&gt;We provide 2 options to pass environment variables:1. Use `--env` during app deployment to load env variables from a `.env` file. For example, `lc-serve deploy jcloud app --env some.env` will load all env variables from `some.env` file and pass them to the app. These env variables will be available in the app as `os.environ['ENV_VAR_NAME']`.2. You can also pass env variables while sending requests to the app both in HTTP and WebSocket. `envs` field in the request body is used to pass env variables. For example      ```json    {        &quot;question&quot;: &quot;What is the meaning of life?&quot;,        &quot;envs&quot;: {            &quot;ENV_VAR_NAME&quot;: &quot;ENV_VAR_VALUE&quot;        }    }    ```&lt;/details&gt;### JCloud deployment failed at pushing image to Jina Hubble, what should I do?&lt;details&gt;&lt;summary&gt;&lt;b&gt;Expand&lt;/b&gt;&lt;/summary&gt;Please use `--verbose` and retry to get more information. If you are operating on computer with `arm64` arch, please retry with `--platform linux/amd64` so the image can be built correctly.&lt;/details&gt;### Debug babyagi playground request/response for external integration&lt;details&gt;&lt;summary&gt;&lt;b&gt;Expand&lt;/b&gt;&lt;/summary&gt;1. Start textual console in a terminal (exclude following groups to reduce the noise in logging)        ```bash    textual console -x EVENT -x SYSTEM -x DEBUG    ```2. Start the playground with `--verbose` flag. Start interacting and see the logs in the console.        ```bash    lc-serve playground babyagi --verbose    ```&lt;/details&gt;# 📣 Reach out to usWant to deploy your LLM apps on your own infrastructure with all capabilities of Jina AI Cloud?   - Serverless  - Autoscaling  - TLS certs  - Persistent storage  - End to end LLM observability  - and more on auto-pilot![Join us on Discord](https://discord.jina.ai) and we'd be happy to hear more about your use case.</longdescription>
</pkgmetadata>