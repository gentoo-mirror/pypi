<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># extr-ds&gt; Library to programmatically build labeled datasets for Named-Entity Recognition (NER) and Relation Extraction (RE) Machine Learning tasks.&lt;br /&gt;## Install```pip install extr-ds```## Command Linesee [Instructions](https://medium.com/@pasdan/building-custom-named-entity-recognition-models-e4d8d95804e) on how to use the command line utility to manage your project.### 1. Init Project```extr-ds --init```### 2. Split and Annotate```extr-ds --split```### 3.a Annotate Entities or Relations Again?```extr-ds --annotate -entsextr-ds --annotate -rels```### 3.b Change Relation Extraction Label```extr-ds --relate -label NO_RELATION=5,7,9```### 3.b Remove Relation Extraction Instance```extr-ds --relate -delete 5,6,7```### 3.c Recover removed Relation Extraction Instances```extr-ds --relate -recover 5,6,7```### 4. Save```extr-ds --save -entsextr-ds --save -rels```### 5. Reset &quot;Gold Standard&quot; datasets```extr-ds --reset```### 6. Help!?```extr-ds --help```## API## Example```pythontext = 'Ted Johnson is a pitcher.'```### 1. Label Entities for Named-Entity Recognition Task (NER)```pythonfrom extr import RegEx, RegExLabelfrom extr.entities import EntityExtactorfrom extr_ds.labelers import IOBentity_extractor = EntityExtactor([    RegExLabel('PERSON', [        RegEx([r'(ted\s+johnson|ted)'], re.IGNORECASE)    ]),    RegExLabel('POSITION', [        RegEx([r'pitcher'], re.IGNORECASE)    ]),])sentence_tokenizer = ## 3rd party tokenizer ##label = IOB(sentence_tokenizer, entity_extractor).label(text)## label == &lt;Label tokens=..., labels=['B-PERSON', 'I-PERSON', 'O', 'O', 'B-POSITION', 'O']&gt;```### 2. Annotate for Relation Extraction Task (RE)```pythonfrom extr.entities import EntityExtractorfrom extr.relations import RegExRelationLabelBuilder, \                           RelationExtractorfrom extr_ds.labelers import RelationClassificationfrom extr_ds.labelers.relation import RelationBuilder, BaseRelationLabeler, RuleBasedRelationLabelerperson_to_position_relationship = RegExRelationLabelBuilder('is_a') \    .add_e1_to_e2(        'PERSON',        [            r'\s+is\s+a\s+',        ],        'POSITION'    ) \    .build()base_relation_labeler = BaseRelationLabeler(    RelationBuilder(relation_formats=[        ('PERSON', 'POSITION', 'NO_RELATION')    ]))rule_based_relation_labeler = RuleBasedRelationLabeler(    RelationExtractor([person_to_position_relationship]))labeler = RelationClassification(    EntityExtractor([        RegExLabel('PERSON', [            RegEx([r'(ted johnson|bob)'], re.IGNORECASE)        ]),        RegExLabel('POSITION', [            RegEx([r'pitcher'], re.IGNORECASE)        ]),    ]),    base_relation_labeler,    relation_labelers=[        rule_based_relation_labeler    ])results = labeler.label(text)## results.relation_labels == [##    &lt;RelationLabel sentence=&quot;&lt;e1&gt;Ted Johnson&lt;/e1&gt; is a &lt;e2&gt;pitcher&lt;/e2&gt;.&quot; label=&quot;is_a&quot;&gt;## ]```### 3. Find and define the type of difference between labels```pythonfrom extr_ds.validators import check_for_differencesdifferences_in_labels = check_for_differences(    ['B-PERSON', 'I-PERSON', 'O', 'O', 'B-POSITION', 'O'],    ['B-PERSON', 'O', 'O', 'O', 'B-POSITION', 'O'])## differences_in_labels.has_diffs == True## differences_in_labels.diffs_between_labels == [##      &lt;Difference index=1, diff_type=DifferenceTypes.S2_MISSING&gt;## ]differences_in_labels = check_for_differences(    ['B-PERSON', 'I-PERSON', 'O', 'O', 'B-POSITION', 'O'],    ['B-PERSON', 'B-PERSON', 'O', 'O', 'B-POSITION', 'O'])## differences_in_labels.has_diffs == True## differences_in_labels.diffs_between_labels == [##      &lt;Difference index=1, diff_type=DifferenceTypes.MISMATCH&gt;## ]```</longdescription>
</pkgmetadata>