<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Rombus: Helps you qucikly and easily compute slow and complex models====================================================================Rombus is a tool for building reduced order models (ROMs): matrix representations of arbitrarymodels which can be rapidly and easily computed for arbitrary parameter sets.Building a ROM with Rombus is easy.  All you need to do is install it like so:```console$ pip install rombus```define your model like this (in this trivial case, a file named `my_model.py` specifying a simple second-order polynomial):``` pythonfrom numpy import ndarray, polyval, linspacefrom rombus.model import RombusModelfrom typing import NamedTupleclass Model(RombusModel):    &quot;&quot;&quot;Class for creating a ROM for the function y(x)=a2*x^2+a1*x+a0&quot;&quot;&quot;    coordinate.set(&quot;x&quot;, 0.0, 10.0, 11, label=&quot;$x$&quot;)    ordinate.set(&quot;y&quot;, label=&quot;$y(x)$&quot;)    params.add(&quot;a0&quot;, -10, 10)    params.add(&quot;a1&quot;, -10, 10)    params.add(&quot;a2&quot;, -10, 10)    def compute(self, p: NamedTuple, x: ndarray) -&gt; ndarray:        &quot;&quot;&quot;Compute the model for a given parameter set.&quot;&quot;&quot;        return polyval([p.a2, p.a1, p.a0], x)```and specify a set of points (in this case, the file `my_model_samples.py`) to build your ROM from:```-10, -10,-10-10,  10,-10-10, -10, 10-10,  10, 10 10, -10,-10 10,  10,-10 10, -10, 10 10,  10, 10```You build your ROM like this:```$ rombus build my_model:Model my_model_samples.csv```This produces an _HDF5_ file named `my_model.hdf5`.  You can then use your new ROM in your Python projects like this:```from rombus.rom import ReducedOrderModelROM = ReducedOrderModel.from_file('my_model.hdf5')sample = ROM.model.sample({&quot;a0&quot;:0,&quot;a1&quot;:0,&quot;a2&quot;:1})model_ROM = ROM.evaluate(sample)for x, y in zip(ROM.model.domain,model_ROM):    print(f&quot;{x:5.2f} {y:6.2f}&quot;)```which generates the output:``` 0.00   0.00 1.00   1.00 2.00   4.00 3.00   9.00 4.00  16.00 5.00  25.00 6.00  36.00 7.00  49.00 8.00  64.00 9.00  81.0010.00 100.00```</longdescription>
</pkgmetadata>