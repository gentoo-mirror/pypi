<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytz_deprecation_shim: Shims to help you safely remove pytz===========================================================``pytz`` has served the Python community well for many years, but it is nolonger the best option for providing time zones. ``pytz`` has a non-standardinterface that is `very easy to misuse&lt;https://blog.ganssle.io/articles/2018/03/pytz-fastest-footgun.html&gt;`_; thisinterface was necessary when ``pytz`` was created, because ``datetime`` had noway to represent ambiguous datetimes, but this was solved in in Python 3.6,which added a ``fold`` attribute to datetimes in `PEP 495&lt;https://www.python.org/dev/peps/pep-0495/&gt;`_. With the addition of the``zoneinfo`` module in Python 3.9 (`PEP 615&lt;https://www.python.org/dev/peps/pep-0615/&gt;`_), there has never been a bettertime to migrate away from ``pytz``.However, since ``pytz`` time zones are used very differently from a standard``tzinfo``, and many libraries have built ``pytz`` zones into their standardtime zone interface (and thus may have users relying on the existence of the``localize`` and ``normalize`` methods); this library provides shim classesthat are compatible with both PEP 495 and ``pytz``'s interface, to make iteasier for libraries to deprecate ``pytz``.Usage=====This library is intended for *temporary usage only*, and should allow you todrop your dependency on ``pytz`` while also giving your users notice thateventually you will remove support for the ``pytz``-specific interface.Within your own code, use ``pytz_deprecation_shim.timezone`` shims as if theywere ``zoneinfo`` or ``dateutil.tz`` zones â€” do not use ``localize`` or``normalize``:.. code-block:: pycon    &gt;&gt;&gt; import pytz_deprecation_shim as pds    &gt;&gt;&gt; from datetime import datetime, timedelta    &gt;&gt;&gt; LA = pds.timezone(&quot;America/Los_Angeles&quot;)    &gt;&gt;&gt; dt = datetime(2020, 10, 31, 12, tzinfo=LA)    &gt;&gt;&gt; print(dt)    2020-10-31 12:00:00-07:00    &gt;&gt;&gt; dt.tzname()    'PDT'Datetime addition will work `like normal Python datetime arithmetic&lt;https://blog.ganssle.io/articles/2018/02/aware-datetime-arithmetic.html&gt;`_,even across a daylight saving time transition:.. code-block:: pycon    &gt;&gt;&gt; dt_add = dt + timedelta(days=1)    &gt;&gt;&gt; print(dt_add)    2020-11-01 12:00:00-08:00    &gt;&gt;&gt; dt_add.tzname()    'PST'However, if you have exposed a time zone to end users who are using ``localize``and/or ``normalize`` or any other ``pytz``-specific features (or if you'vefailed to convert some of your own code all the way), those users will seea warning (rather than an exception) when they use those features:.. code-block:: pycon    &gt;&gt;&gt; dt = LA.localize(datetime(2020, 10, 31, 12))    &lt;stdin&gt;:1: PytzUsageWarning: The localize method is no longer necessary, as    this time zone supports the fold attribute (PEP 495). For more details on    migrating to a PEP 495-compliant implementation, see    https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html     &gt;&gt;&gt; print(dt)    2020-10-31 12:00:00-07:00    &gt;&gt;&gt; dt.tzname()    'PDT'    &gt;&gt;&gt; dt_add = LA.normalize(dt + timedelta(days=1))    &lt;stdin&gt;:1: PytzUsageWarning: The normalize method is no longer necessary,    as this time zone supports the fold attribute (PEP 495). For more details    on migrating to a PEP 495-compliant implementation, see    https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html    &gt;&gt;&gt; print(dt_add)    2020-11-01 12:00:00-08:00    &gt;&gt;&gt; dt_add.tzname()    'PST'For IANA time zones, calling ``str()`` on the shim zones (and indeed on ``pytz``and ``zoneinfo`` zones as well) returns the IANA key, so end users who wouldlike to actively migrate to a ``zoneinfo`` (or ``backports.zoneinfo``) can doso:.. code-block:: pycon    &gt;&gt;&gt; from zoneinfo import ZoneInfo    &gt;&gt;&gt; LA = pds.timezone(&quot;America/Los_Angeles&quot;)    &gt;&gt;&gt; LA_zi = ZoneInfo(str(LA))    &gt;&gt;&gt; print(LA_zi)    zoneinfo.ZoneInfo(key='America/Los_Angeles')</longdescription>
</pkgmetadata>