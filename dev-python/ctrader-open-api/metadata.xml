<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenApiPy[![PyPI version](https://badge.fury.io/py/ctrader-open-api.svg)](https://badge.fury.io/py/ctrader-open-api)![versions](https://img.shields.io/pypi/pyversions/ctrader-open-api.svg)[![GitHub license](https://img.shields.io/github/license/spotware/OpenApiPy.svg)](https://github.com/spotware/OpenApiPy/blob/main/LICENSE)A Python package for interacting with cTrader Open API.This package uses Twisted and it works asynchronously.- Free software: MIT- Documentation: https://spotware.github.io/OpenApiPy/.## Features* Works asynchronously by using Twisted* Methods return Twisted deferreds* It contains the Open API messages files so you don't have to do the compilation* Makes handling request responses easy by using Twisted deferreds## Insallation```pip install ctrader-open-api```# Usage```pythonfrom ctrader_open_api import Client, Protobuf, TcpProtocol, Auth, EndPointsfrom ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *from ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *from ctrader_open_api.messages.OpenApiMessages_pb2 import *from ctrader_open_api.messages.OpenApiModelMessages_pb2 import *from twisted.internet import reactorhostType = input(&quot;Host (Live/Demo): &quot;)host = EndPoints.PROTOBUF_LIVE_HOST if hostType.lower() == &quot;live&quot; else EndPoints.PROTOBUF_DEMO_HOSTclient = Client(host, EndPoints.PROTOBUF_PORT, TcpProtocol)def onError(failure): # Call back for errors    print(&quot;Message Error: &quot;, failure)def connected(client): # Callback for client connection    print(&quot;\nConnected&quot;)    # Now we send a ProtoOAApplicationAuthReq    request = ProtoOAApplicationAuthReq()    request.clientId = &quot;Your application Client ID&quot;    request.clientSecret = &quot;Your application Client secret&quot;    # Client send method returns a Twisted deferred    deferred = client.send(request)    # You can use the returned Twisted deferred to attach callbacks    # for getting message response or error backs for getting error if something went wrong    # deferred.addCallbacks(onProtoOAApplicationAuthRes, onError)    deferred.addErrback(onError)def disconnected(client, reason): # Callback for client disconnection    print(&quot;\nDisconnected: &quot;, reason)def onMessageReceived(client, message): # Callback for receiving all messages    print(&quot;Message received: \n&quot;, Protobuf.extract(message))# Setting optional client callbacksclient.setConnectedCallback(connected)client.setDisconnectedCallback(disconnected)client.setMessageReceivedCallback(onMessageReceived)# Starting the client serviceclient.startService()# Run Twisted reactorreactor.run()```Please check documentation or samples for a complete example.## Dependencies* &lt;a href=&quot;https://pypi.org/project/twisted/&quot;&gt;Twisted&lt;/a&gt;* &lt;a href=&quot;https://pypi.org/project/protobuf/&quot;&gt;Protobuf&lt;/a&gt;</longdescription>
</pkgmetadata>