<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![alt text][pypi_version] ![alt text][licence_version]# Pykson: A JSON Serializer/Deserializer for PythonPykson is a JSON serializer/deserializer in python.Tested with:* Python 3.6+Use the following command to install using pip:```pip install pykson```## Usage example### Create Object ModelsFirst, create your object model which extends `JsonObject````pythonfrom pykson import JsonObject, IntegerField, StringField, ObjectListFieldclass Course(JsonObject):    name = StringField()    teacher = StringField()class Score(JsonObject):    score = IntegerField()    course = Course()class Student(JsonObject):    first_name = StringField()    last_name = StringField()    age = IntegerField()    scores = ObjectListField(Score)```### Deserialize json stringsUse `Pykson` class to deserialize json string to `JsonObject`s```pythonfrom pykson import Pyksonjson_text = '{&quot;first_name&quot;:&quot;John&quot;, &quot;last_name&quot;:&quot;Smith&quot;, &quot;age&quot;: 25, &quot;scores&quot;: [ {&quot;course&quot;: {&quot;name&quot;: &quot;Algebra&quot;, &quot;teacher&quot; :&quot;Mr. Schmidt&quot;}, &quot;score&quot;: 100}, {&quot;course&quot;: {&quot;name&quot;: &quot;Statistics&quot;, &quot;teacher&quot;: &quot;Mrs. Lee&quot;}, &quot;score&quot;: 90} ]}'student = Pykson().from_json(json_text, Student)```### Serialize objectsUse `Pykson` class to serialize `JsonObject`s to string```pythonPykson().to_json(student)```## FieldsThere are different types of predefined fields: `IntegerField`, `FloatField`, `BooleanField`, `StringField`, `ListField`, `ObjectField`, `ObjectListField`, `DateField`, `TimeField`, `DateTimeField`, `TimestampSecondsField` and `TimestampMillisecondsField`.There are four other types of fields which help with storing fields with specific integer or string values. To create a field with multiple choice integer values, use `MultipleChoiceIntegerField` or `EnumIntegerField` classes. To create a field with multiple choice string values, use `MultipleChoiceStringField` or `EnumStringField` classes.Example for `MultipleChoiceStringField`:```pythonfrom pykson import MultipleChoiceStringFieldclass WeatherInfo(JsonObject):  condition = MultipleChoiceStringField(options=['sunny','cloudy','rainy'], null=False)```Example for `EnumStringField`:```pythonfrom enum import Enumfrom pykson import EnumStringFieldclass WeatherCondition(Enum):  SUNNY = 'sunny'  CLOUDY = 'cloudy'  RAINY = 'rainy'class WeatherInfo(JsonObject):  condition = EnumStringField(enum=WeatherCondition, null=False)```## Advanced usage### Serialized namesIt is possible to use change name of fields during serialization/deserialization. For this purpose, use `serialized_name` input in the fields```pythonfrom pykson import Pykson, JsonObject, IntegerField, StringField, ObjectFieldclass Score(JsonObject):    score = IntegerField(serialized_name=&quot;s&quot;)    course = StringField(serialized_name=&quot;c&quot;)class Student(JsonObject):    first_name = StringField(serialized_name=&quot;fn&quot;)    last_name = StringField(serialized_name=&quot;ln&quot;)    age = IntegerField(serialized_name=&quot;a&quot;)    score = ObjectField(Score, serialized_name=&quot;s&quot;)json_text = '{&quot;fn&quot;:&quot;John&quot;, &quot;ln&quot;:&quot;Smith&quot;, &quot;a&quot;: 25, &quot;s&quot;: {&quot;s&quot;: 100, &quot;c&quot;:&quot;Algebra&quot;}}'student = Pykson().from_json(json_text, Student)```### Work with dates and datetimesPykson currenty has five fields for handling `date`s and `datetime`s.Three of them, `DateField`, `TimeField` and `DateTimeField`, use date/time formats to serialize/deserialize values. The other ones, `TimestampSecondsField` and `TimestampMillisecondsField` use integer values to serialize/deserialize datetimes.### Accept unknown key/value pairs when deserializing`from_json` method currently has an input parameter named `accept_unknown` with default value of `false`. If you want to deserialize an string to a `JsonObject` and ignore unknown keys which are not defined in your model class as fields, you can set this parameter to `true`. If this parameter is false, an error is raised when facing an unknown key in the json.```pythonjson_text = '{&quot;fn&quot;:&quot;John&quot;, &quot;ln&quot;:&quot;Smith&quot;, &quot;a&quot;: 25, &quot;up&quot;:&quot;some unknown parameter&quot;, &quot;s&quot;: {&quot;s&quot;: 100, &quot;c&quot;:&quot;Algebra&quot;}}'student = Pykson().from_json(json_text, Student, accept_unknown=True)```### Type hierarchy adapterYou can register multiple type hierarchy adapters using register_type_hierarchy_adapter method of 'Pykson' class.```pythonfrom pykson import TypeHierarchyAdapterclass Student(JsonObject):    name = StringField(serialized_name=&quot;n&quot;)class HighSchoolStudent(Student):    high_school_name = StringField(serialized_name=&quot;sn&quot;)class UniversityStudent(Student):    university_name = StringField(serialized_name=&quot;un&quot;)students = [    HighSchoolStudent(name=&quot;john&quot;, high_school_name=&quot;Redstone High&quot;),    UniversityStudent(name=&quot;alice&quot;, university_name=&quot;Green Institute of Tech.&quot;)]pson = Pykson()pson.register_type_hierarchy_adapter(    Student,    &quot;student_type&quot;,    {        &quot;highschool&quot;: HighSchoolStudent,        &quot;university&quot;: UniversityStudent    })students_json = pson.to_json(students)decoded_students = pson.from_json(students_json, Student)assert decoded_students == students```[pypi_version]: https://img.shields.io/pypi/v/pykson.svg &quot;PYPI version&quot;[licence_version]: https://img.shields.io/badge/license-MIT%20v2-brightgreen.svg &quot;MIT Licence&quot;</longdescription>
</pkgmetadata>