<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;./docs/img/mudata.svg&quot; data-canonical-src=&quot;./docs/img/mudata.svg&quot; width=&quot;700&quot;/&gt;[![Documentation Status](https://readthedocs.org/projects/mudata/badge/?version=latest)](http://mudata.readthedocs.io/)[![PyPi version](https://img.shields.io/pypi/v/mudata)](https://pypi.org/project/mudata)# MuData – multimodal dataPlease refer to [the MuData documentation here](https://mudata.readthedocs.io/).## Data structureIn the same vein as [AnnData](https://github.com/theislab/anndata) is designed to represent unimodal annotated datasets in Python, `MuData` is designed to provide functionality to load, process, and store multimodal omics data.```MuData  .obs     -- annotation of observations (cells, samples)  .var     -- annotation of features (genes, genomic loci, etc.)  .obsm    -- multidimensional cell annotation,               incl. a boolean for each modality              that links .obs to the cells of that modality  .varm    -- multidimensional feature annotation,               incl. a boolean vector for each modality              that links .var to the features of that modality  .mod    AnnData      .X    -- data matrix (cells x features)      .obs  -- cells metadata (assay-specific)      .var  -- annotation of features (genes, peaks, genomic sites)      .obsm      .varm      .uns  .uns```## Overview### Input`MuData` can be thought of as a multimodal container, in which every modality is an AnnData object:```pyfrom mudata import MuDatamdata = MuData({'rna': adata_rna, 'atac': adata_atac})```If multimodal data from 10X Genomics is to be read, convenient readers are provided by [`muon`](https://github.com/scverse/muon) that return a `MuData` object with AnnData objects inside, each corresponding to its own modality:```pyimport muon as mumu.read_10x_h5(&quot;filtered_feature_bc_matrix.h5&quot;)# MuData object with n_obs × n_vars = 10000 × 80000 # 2 modalities#   rna:10000 x 30000#     var:'gene_ids', 'feature_types', 'genome', 'interval'#   atac:10000 x 50000#     var:'gene_ids', 'feature_types', 'genome', 'interval'#     uns:'atac', 'files'```### I/O with `.h5mu` files`MuData` objects represent modalities as collections of AnnData objects. These collections can be saved to disk and retrieved using HDF5-based `.h5mu` files, which design is based on `.h5ad` file structure.```pyimport mudata as mdmdata_pbmc.write(&quot;pbmc_10k.h5mu&quot;)mdata = md.read(&quot;pbmc_10k.h5mu&quot;)```It allows to effectively use the hierarchical nature of HDF5 files and to read/write AnnData object directly from/to `.h5mu` files:```pyadata = md.read(&quot;pbmc_10k.h5mu/rna&quot;)md.write(&quot;pbmc_10k.h5mu/rna&quot;, adata)```</longdescription>
</pkgmetadata>