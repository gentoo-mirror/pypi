<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Test Status](https://github.com/moble/spherical/workflows/tests/badge.svg)](https://github.com/moble/spherical/actions)[![Test Coverage](https://codecov.io/gh/moble/spherical/branch/main/graph/badge.svg?token=zIw5m2Gs68)](https://codecov.io/gh/moble/spherical)[![Documentation Status](https://readthedocs.org/projects/spherical/badge/?version=main)](https://spherical.readthedocs.io/en/main/?badge=main)[![PyPI Version](https://img.shields.io/pypi/v/spherical?color=)](https://pypi.org/project/spherical/)[![Conda Version](https://img.shields.io/conda/vn/conda-forge/spherical.svg?color=)](https://anaconda.org/conda-forge/spherical)[![DOI](https://zenodo.org/badge/295054260.svg)](https://zenodo.org/badge/latestdoi/295054260)# Spherical FunctionsPython/numba package for evaluating and transforming Wigner's ùîá matrices,Wigner's 3-j symbols, and spin-weighted (and scalar) spherical harmonics.These functions are evaluated directly in terms of quaternions, as well as inthe more standard forms of spherical coordinates and Eulerangles.&lt;sup&gt;[1](#1-euler-angles-are-awful)&lt;/sup&gt;These quantities are computed using recursion relations, which makes itpossible to compute to very high ‚Ñì values.  Unlike direct evaluation ofindividual elements, which will generally cause overflow or underflow beyond‚Ñì‚âà30, these recursion relations should be accurate for ‚Ñì values beyond 1000.The conventions for this package are described in detail on[this page](http://moble.github.io/spherical/).## InstallationBecause this package is pure python code, installation is very simple.  Inparticular, with a reasonably modern installation, you can just run a commandlike```bashconda install -c conda-forge spherical```or```bashpython -m pip install spherical```Either of these will download and install the package.## Usage#### Functions of angles or rotationsCurrently, due to the nature of recursions, this module does not allowcalculation of individual elements, but returns ranges of results.  Forexample, when computing Wigner's ùîá matrix, all matrices up to a given ‚Ñì will bereturned; when evaluating a spin-weighted spherical harmonic, all harmonics upto a given ‚Ñì will be returned.  Fortunately, this is usually what is requiredin any case.To calculate Wigner's d or ùîá matrix or spin-weighted spherical harmonics, firstconstruct a `Wigner` object.```pythonimport quaternionicimport sphericalell_max = 16  # Use the largest ‚Ñì value you expect to needwigner = spherical.Wigner(ell_max)```This module takes input as quaternions.  The `quaternionic` module has [variousways of constructingquaternions](https://quaternionic.readthedocs.io/en/latest/#rotations),including direct construction or conversion from rotation matrices, axis-anglerepresentation, Euler angles,&lt;sup&gt;[1](#euler-angles-are-awful)&lt;/sup&gt; orspherical coordinates, among others:```pythonR = quaternionic.array([1, 2, 3, 4]).normalizedR = quaternionic.array.from_axis_angle(vec)R = quaternionic.array.from_euler_angles(alpha, beta, gamma)R = quaternionic.array.from_spherical_coordinates(theta, phi)```Mode weights can be rotated as```pythonwigner.rotate(modes, R)```or evaluated as```pythonwigner.evaluate(modes, R)```We can compute the ùîá matrix as```pythonD = wigner.D(R)```which can be indexed as```pythonD[wigner.Dindex(ell, mp, m)]```or we can compute the spin-weighted spherical harmonics as```pythonY = wigner.sYlm(s, R)```which can be indexed as```pythonY[wigner.Yindex(ell, m)]```Note that, if relevant, it is probably more efficient to use the `rotate` and`evaluate` methods than to use `D` or `Y`.#### Clebsch-Gordan and 3-j symbolsIt is possible to compute individual values of the 3-j or Clebsch-Gordansymbols:```pythonw3j = spherical.Wigner3j(j_1, j_2, j_3, m_1, m_2, m_3)cg = spherical.clebsch_gordan(j_1, m_1, j_2, m_2, j_3, m_3)```However, when more than one element is needed (as is typically the case), it ismuch more efficient to compute a range of values:```pythoncalc3j = spherical.Wigner3jCalculator(j2_max, j3_max)w3j = calc3j.calculate(j2, j3, m2, m3)```## AcknowledgmentsI very much appreciate Barry Wardell's help in sorting out the relationshipsbetween my conventions and those of other people and software packages(especially Mathematica's crazy conventions).This code is, of course, hosted on github.  Because it is an open-sourceproject, the hosting is free, and all the wonderful features of github areavailable, including free wiki space and web page hosting, pull requests, anice interface to the git logs, etc.The work of creating this code was supported in part by the Sherman FairchildFoundation and by NSF Grants No. PHY-1306125 and AST-1333129.&lt;br/&gt;---###### &lt;sup&gt;1&lt;/sup&gt; Euler angles are awfulEuler angles are pretty much[the worst things ever](http://moble.github.io/spherical/#euler-angles)and it makes me feel bad even supporting them.  Quaternions arefaster, more accurate, basically free of singularities, moreintuitive, and generally easier to understand.  You can work entirelywithout Euler angles (I certainly do).  You absolutely never needthem.  But if you're so old fashioned that you really can't give themup, they are fully supported.</longdescription>
</pkgmetadata>