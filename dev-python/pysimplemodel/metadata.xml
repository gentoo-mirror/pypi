<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============Simple Model============.. image:: https://badge.fury.io/py/pysimplemodel.svg    :target: https://pypi.org/project/pysimplemodel/.. image:: https://img.shields.io/badge/python-3.6,3.7-blue.svg    :target: https://github.com/lamenezes/simple-model.. image:: https://img.shields.io/github/license/lamenezes/simple-model.svg    :target: https://github.com/lamenezes/simple-model/blob/master/LICENSE.. image:: https://circleci.com/gh/lamenezes/simple-model.svg?style=shield    :target: https://circleci.com/gh/lamenezes/simple-model.. image:: https://codecov.io/gh/lamenezes/simple-model/branch/master/graph/badge.svg  :target: https://codecov.io/gh/lamenezes/simple-model*SimpleModel* offers a simple way to handle data using classes instead of aplenty of lists and dicts.It has simple objectives:- Define models and its fields easily using class attributes, type annotations or tuples (whatever suits your needs)- Support for field validation, cleaning and type conversion- Easy model conversion to dictQuickstart==========Installing----------Open your favorite shell and run the following command:.. code:: shell    pip install pysimplemodelExample-------Define your models using type annotations:.. code:: python    from simple_model import Model    class Person(Model):        age: int        height: float        is_active: bool = True        name: strSimple model automatically creates an initializer for your model and you all setto create instances:.. code:: python    &gt;&gt; person = Person(age=18, height=1.67, name='John Doe')    &gt;&gt; person.name    'John Doe'As you have noticed we haven't informed a value for field `is_active`, but the modelwas still created. That's because we've set a default value of `True` for it andthe model takes care of assigning it automatically to the field:.. code:: python    &gt;&gt; person.is_active    TrueSimple model also offers model validation. Empty fields are considered invalid and willraise errors upon validation. Let's perform some tests using the previous `Person` model:.. code:: python    &gt;&gt; person = Person()    &gt;&gt; print(person.name)    None    &gt;&gt; person.validate()    Traceback (most recent call last):        ...    EmptyField: 'height' field cannot be emptyLet's say we want the height and age fields to be optional, that can be achieved withthe following piece of code:.. code:: python    from simple_model import Model    class Person(Model):        age: int = None        height: float = None        is_active: bool = True        name: strNow let's test it:.. code:: python    &gt;&gt; person = Person(name='Jane Doe', is_active=False)    &gt;&gt; person.is_active    False    &gt;&gt; person.validate()    TrueThe last line won't raise an exception which means the model instance is valid!In case you need the validation to return True or False instead of raising anexception that's possible by doing the following:.. code:: python    &gt;&gt; person.validate(raise_exception=False)    TrueYou can also add custom validations by writing class methods prefixed by `validate`followed by the attribute name, e.g... code:: python    class Person:        age: int        height: float        name: str        def validate_age(self, age):            if age &lt; 0 or age &gt; 150:                raise ValidationError('Invalid value for age {!r}'.format(age))                        return age        def validate_height(self, height):            if height &lt;= 0:               raise ValidationError('Invalid value for height {!r}'.format(age))                        return heightLet's test it:.. code:: python    &gt;&gt; person = Person(name='John Doe', age=190)    &gt;&gt; person.validate()    Traceback (most recent call last):        ...    ValidationError: Invalid value for age 190    &gt;&gt; other_person = Person(name='Jane Doe', height=-1.67)    &gt;&gt; other_person.validate()    Traceback (most recent call last):        ...    ValidationError: Invalid value for height -1.67It is important to note that models don't validate types. Currently types are usedfor field value conversion.The `validate` method also supports cleaning the field values by defining custom transformationsin the `validate_` methods:.. code:: python    class Person:        age: int        name: str        def validate_name(self, name):            return name.strip()    &gt;&gt;&gt; person = Person(age=18.0, name='John Doe ')    &gt;&gt;&gt; person.name    'John Doe '    &gt;&gt; person.age    18.0    &gt;&gt;&gt; person.validate()    &gt;&gt;&gt; person.name    'John Doe'    &gt;&gt;&gt; person.age  # all attributes are converted to its type before cleaning    18  # converted from float (18.0) to int (18)Finally, simple model allows you to easily convert your model to dict type using the function `to_dict()`:.. code:: python    &gt;&gt;&gt; to_dict(person)    {        'age': 18,        'name': 'John Doe'    }Documentation=============Docs on simple-model.rtfd.io_.. _simple-model.rtfd.io: https://simple-model.readthedocs.io/en/latest/</longdescription>
</pkgmetadata>