<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Django REST framework Ext=========================Some extensions of Django REST framework.# Pagination## DynamicSizePageNumberPaginationSupport setting `PAGE_QUERY_PARAM` (default is `page`) parameter to specify the page size for querying.Return all data when the `PAGE_QUERY_PARAM` (default is `limit`) parameter is not specified.Usage:```REST_FRAMEWORK = {    ...    'DEFAULT_PAGINATION_CLASS': 'djangorestframework_ext.pagination.DynamicSizePageNumberPagination',    ...}REST_FRAMEWORK_EXT = {    'PAGE_QUERY_PARAM': 'page',  # Default is page (If not set)    'PAGE_SIZE_QUERY_PARAM': 'limit',}```Request:```GET https://api.example.org/accounts/?page=4&amp;limit=100```# Permissions## DjangoModelPermissionsAdd ``view`` permission control.Usage:```from djangorestframework_ext.permissions import DjangoModelPermissions```## IsCurrentUserDetermine whether the object is the current login user.Usage:```from djangorestframework_ext.permissions import IsCurrentUser```## IsSuperuserDetermine whether the request user is superuser.Usage:```from djangorestframework_ext.permissions import IsSuperuser```# Serializers## RecursiveSerializerUsage:```from rest_framework import serializersfrom djangorestframework_ext.serializers import RecursiveSerializerfrom django.db import modelsclass Department(models.Model):    name = models.CharField('Name', max_length=100)    parent = models.ForeignKey('self', related_name='children', verbose_name='Parent')class DepartmentTreeListSerializer(serializers.ModelSerializer):    children = RecursiveSerializer(many=True)    class Meta:        model = Department        fields = '__all__'```Response:```[{    &quot;id&quot;: 1,    &quot;children&quot;: [{        &quot;id&quot;: 2,        &quot;children&quot;: [{            &quot;id&quot;: 3,            &quot;children&quot;: [{                &quot;id&quot;: 4,                &quot;children&quot;: [],                &quot;name&quot;: &quot;aaa&quot;,                &quot;parent&quot;: 3            }],            &quot;name&quot;: &quot;ddd&quot;,            &quot;parent&quot;: 2        }, {            &quot;id&quot;: 5,            &quot;children&quot;: [{                &quot;id&quot;: 6,                &quot;children&quot;: [],                &quot;name&quot;: &quot;eee&quot;,                &quot;parent&quot;: 7            }],            &quot;name&quot;: &quot;xxx&quot;,            &quot;parent&quot;: 2        }],        &quot;name&quot;: &quot;yyy&quot;,        &quot;parent&quot;: 1    }],    &quot;name&quot;: &quot;zzz&quot;,    &quot;parent&quot;: null}]```## ExportModelSerializerUse verbose name or label replace field name.Usage:```from djangorestframework_ext.serializers import ExportModelSerializerfrom django.db import modelsclass Department(models.Model):    name = models.CharField('Name', max_length=100)    creator = models.ForeignKey(User, null=False, verbose_name='Creator')class DepartmentExportSerializer(ExportModelSerializer):    creator = serializers.StringRelatedField(label='Creator', read_only=True)        class Meta:        model = Department        fields = ['name', 'creator']```Response:```[{    &quot;Name&quot;: &quot;aaa&quot;,    &quot;Creator&quot;: &quot;John&quot;}]```## DynamicFieldsModelSerializerIt's copied from [official document](https://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields).# Mixins## MultiFieldLookupMixinFrom [Multiple lookup_fields for django rest framework](https://stackoverflow.com/questions/38461366/multiple-lookup-fields-for-django-rest-framework).Used for multi field lookup.Usage:views.py:```class ExampleViewSet(MultipleFieldLookupMixin, viewsets.ModelViewSet):    lookup_fields = ['pk', 'field_one', 'field_two']```urls.py:```urlpatterns = [    path(r'examples/&lt;str:field_one&gt;/&lt;str:field_two&gt;/', views.ExampleViewSet.as_view({'get': 'retrieve'}))]```# ViewSets## ExportModelViewSetUse `epxort` action and `ExportPermission` to exporting data.# Utils## get_default_query_paramsGet default query params.# Views## exception_handlerSome exception handlers.Usage: ```REST_FRAMEWORK = {    ...    'EXCEPTION_HANDLER': 'djangorestframework_ext.views.exception_handler',    ...}```</longdescription>
</pkgmetadata>