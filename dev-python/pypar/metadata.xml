<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;Python phoneme alignment representation&lt;/h1&gt;&lt;div align=&quot;center&quot;&gt;[![PyPI](https://img.shields.io/pypi/v/pypar.svg)](https://pypi.python.org/pypi/pypar)[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)[![Downloads](https://static.pepy.tech/badge/pypar)](https://pepy.tech/project/pypar)`pip install pypar`&lt;/div&gt;Word and phoneme alignment representation for speech tasks. This repo doesnot perform forced word or phoneme alignment, but provides an interfacefor working with the resulting alignment of a forced aligner, such as[`pyfoal`](https://github.com/maxrmorrison/pyfoal), or a manual alignment.## Table of contents- [Usage](#usage)    * [Creating alignments](#creating-aligments)    * [Accessing words and phonemes](#accessing-words-and-phonemes)    * [Saving alignments](#saving-alignments)- [Application programming interface (API)](#application-programming-interface-api)    * [`pypar.Alignment`](#pyparalignment)        * [`pypar.Alignment.__init__`](#pyparalignment__init__)        * [`pypar.Alignment.__add__`](#pyparalignment__add__)        * [`pypar.Alignment.__eq__`](#pyparalignment__eq__)        * [`pypar.Alignment.__getitem__`](#pyparalignment__getitem__)        * [`pypar.Alignment.__len__`](#pyparalignment__len__)        * [`pypar.Alignment.__str__`](#pyparalignment__str__)        * [`pypar.Alignment.duration`](#pyparalignmentduration)        * [`pypar.Alignment.end`](#pyparalignmentend)        * [`pypar.Alignment.find`](#pyparalignmentfind)        * [`pypar.Alignment.framewise_phoneme_indices`](#pyparalignmentframewise_phoneme_indices)        * [`pypar.Alignment.phonemes`](#pyparalignmentphonemes)        * [`pypar.Alignment.phoneme_at_time`](#pyparalignmentphoneme_at_time)        * [`pypar.Alignment.phoneme_bounds`](#pyparalignmentphoneme_bounds)        * [`pypar.Alignment.save`](#pyparalignmentsave)        * [`pypar.Alignment.start`](#pyparalignmentstart)        * [`pypar.Alignment.update`](#pyparalignmentupdate)        * [`pypar.Alignment.words`](#pyparalignmentwords)        * [`pypar.Alignment.word_bounds`](#pyparalignmentword_bounds)    * [`pypar.Phoneme`](#pyparphoneme)        * [`pypar.Phoneme.__init__`](#pyparphoneme__init__)        * [`pypar.Phoneme.__eq__`](#pyparphoneme__eq__)        * [`pypar.Phoneme.__str__`](#pyparphoneme__str__)        * [`pypar.Phoneme.duration`](#pyparphonemeduration)        * [`pypar.Phoneme.end`](#pyparphonemeend)        * [`pypar.Phoneme.start`](#pyparphonemestart)    * [`pypar.Word`](#pyparword)        * [`pypar.Word.__init__`](#pyparword__init__)        * [`pypar.Word.__eq__`](#pyparword__eq__)        * [`pypar.Word.__getitem__`](#pyparword__getitem__)        * [`pypar.Word.__len__`](#pyparword__len__)        * [`pypar.Word.__str__`](#pyparword__str__)        * [`pypar.Word.duration`](#pyparwordduration)        * [`pypar.Word.end`](#pyparwordend)        * [`pypar.Word.phoneme_at_time`](#pyparwordphoneme_at_time)        * [`pypar.Word.start`](#pyparwordstart)- [Tests](#tests)## Usage### Creating alignmentsIf you already have the alignment saved to a `json`, `mlf`, or `TextGrid`file, pass the name of the file. Valid examples of each format can be found in`test/assets/`.```pythonalignment = pypar.Alignment(file)```Alignments can be created manually from `Word` and `Phoneme` objects. Start andend times are given in seconds.```python# Create a word from phonemesword = pypar.Word(    'THE',    [pypar.Phoneme('DH', 0., .03), pypar.Phoneme('AH0', .03, .06)])# Create a silencesilence = pypar.Word(pypar.SILENCE, pypar.Phoneme(pypar.SILENCE, .06, .16))# Make an alignmentalignment = pypar.Alignment([word, silence])```You can create a new alignment from existing alignments via slicing andconcatenation.```python# Slicefirst_two_words = alignment[:2]# Concatenatealignment_with_repeat = first_two_words + alignment```### Accessing words and phonemesTo retrieve a list of words in the alignment, use `alignment.words()`.To retrieve a list of phonemes, use `alignment.phonemes()`. The `Alignment`,`Word`, and `Phoneme` objects all define `.start()`, `.end()`, and`.duration()` methods, which return the start time, end time, and duration,respectively. All times are given in units of seconds. These objects alsodefine equality checks via `==`, casting to string with `str()`, and iterationas follows.```python# Iterate over wordsfor word in alignment:    # Access start and end times    assert word.duration() == word.end() - word.start()    # Iterate over phonemes in word    for phoneme in word:        # Access string representation        assert isinstance(str(phoneme), str)```To access a word or phoneme at a specific time, pass the time in seconds to`alignment.word_at_time` or `alignment.phoneme_at_time`.To retrieve the frame indices of the start and end of a word or phoneme, passthe audio sampling rate and hopsize (in samples) to `alignment.word_bounds` or`alignment.phoneme_bounds`.### Saving alignmentsTo save an alignment to disk, use `alignment.save(file)`, where `file` is thedesired filename. `pypar` currently supports saving as a `json` or `TextGrid`file.## Application programming interface (API)### `pypar.Alignment`#### `pypar.Alignment.__init__````pythondef __init__(    self,    alignment: Union[str, bytes, os.PathLike, List[pypar.Word], dict]) -&gt; None:    &quot;&quot;&quot;Create alignment    Arguments        alignment            The filename, list of words, or json dict of the alignment    &quot;&quot;&quot;```#### `pypar.Alignment.__add__````pythondef __add__(self, other):    &quot;&quot;&quot;Add alignments by concatenation    Arguments        other            The alignment to compare to    Returns        The concatenated alignment    &quot;&quot;&quot;```#### `pypar.Alignment.__eq__````pythondef __eq__(self, other) -&gt; bool:    &quot;&quot;&quot;Equality comparison for alignments    Arguments        other            The alignment to compare to    Returns        Whether the alignments are equal    &quot;&quot;&quot;```#### `pypar.Alignment.__getitem__````pythondef __getitem__(self, idx: Union[int, slice]) -&gt; pypar.Word:    &quot;&quot;&quot;Retrieve the idxth word    Arguments        idx            The index of the word to retrieve    Returns        The word at index idx    &quot;&quot;&quot;```#### `pypar.Alignment.__len__````pythondef __len__(self) -&gt; int:    &quot;&quot;&quot;Retrieve the number of words    Returns        The number of words in the alignment    &quot;&quot;&quot;```#### `pypar.Alignment.__str__````pythondef __str__(self) -&gt; str:    &quot;&quot;&quot;Retrieve the text    Returns        The words in the alignment separated by spaces    &quot;&quot;&quot;```#### `pypar.Alignment.duration````pythondef duration(self) -&gt; float:    &quot;&quot;&quot;Retrieve the duration of the alignment in seconds    Returns        The duration in seconds    &quot;&quot;&quot;```#### `pypar.Alignment.end````pythondef end(self) -&gt; float:    &quot;&quot;&quot;Retrieve the end time of the alignment in seconds    Returns        The end time in seconds    &quot;&quot;&quot;```#### `pypar.Alignment.framewise_phoneme_indices````pythondef framewise_phoneme_indices(    self,    phoneme_map: Dict[str, int],    hopsize: float,    times: Optional[List[float]] = None) -&gt; List[int]:    &quot;&quot;&quot;Convert alignment to phoneme indices at regular temporal interval    Arguments        phoneme_map            Mapping from phonemes to indices        hopsize            Temporal interval between frames in seconds        times            Specified times in seconds to sample phonemes    &quot;&quot;&quot;```#### `pypar.Alignment.find````pythondef find(self, words: str) -&gt; int:    &quot;&quot;&quot;Find the words in the alignment    Arguments        words            The words to find    Returns        The index of the start of the words or -1 if not found    &quot;&quot;&quot;```#### `pypar.Alignment.phonemes````pythondef phonemes(self) -&gt; List[pypar.Phoneme]:    &quot;&quot;&quot;Retrieve the phonemes in the alignment    Returns        The phonemes in the alignment    &quot;&quot;&quot;```#### `pypar.Alignment.phoneme_at_time````pythondef phoneme_at_time(self, time: float) -&gt; Optional[pypar.Phoneme]:    &quot;&quot;&quot;Retrieve the phoneme spoken at specified time    Arguments        time            Time in seconds    Returns        The phoneme at the given time (or None if time is out of bounds)    &quot;&quot;&quot;```#### `pypar.Alignment.phoneme_bounds````pythondef phoneme_bounds(    self,    sample_rate: int,    hopsize: int = 1) -&gt; List[Tuple[int, int]]:    &quot;&quot;&quot;Retrieve the start and end frame index of each phoneme    Arguments        sample_rate            The audio sampling rate        hopsize            The number of samples between successive frames    Returns        The start and end indices of the phonemes    &quot;&quot;&quot;```#### `pypar.Alignment.save````pythondef save(self, filename: Union[str, bytes, os.PathLike]) -&gt; None:    &quot;&quot;&quot;Save alignment to json    Arguments        filename            The location on disk to save the phoneme alignment json    &quot;&quot;&quot;```#### `pypar.Alignment.start````pythondef start(self) -&gt; float:    &quot;&quot;&quot;Retrieve the start time of the alignment in seconds    Returns        The start time in seconds    &quot;&quot;&quot;```#### `pypar.Alignment.update````pythondef update(    self,    idx: int = 0,    durations: Optional[List[float]] = None,    start: Optional[float] = None) -&gt; None:    &quot;&quot;&quot;Update alignment starting from phoneme index idx    Arguments        idx            The index of the first phoneme whose duration is being updated        durations            The new phoneme durations, starting from idx        start            The start time of the alignment    &quot;&quot;&quot;```#### `pypar.Alignment.words````pythondef words(self) -&gt; List[pypar.Word]:    &quot;&quot;&quot;Retrieve the words in the alignment    Returns        The words in the alignment    &quot;&quot;&quot;```#### `pypar.Alignment.word_bounds````pythondef word_at_time(self, time: float) -&gt; Optional[pypar.Word]:    &quot;&quot;&quot;Retrieve the word spoken at specified time    Arguments        time            Time in seconds    Returns        The word spoken at the specified time    &quot;&quot;&quot;```### `pypar.Phoneme`#### `pypar.Phoneme.__init__````pythondef __init__(self, phoneme: str, start: float, end: float) -&gt; None:    &quot;&quot;&quot;Create phoneme    Arguments        phoneme            The phoneme        start            The start time in seconds        end            The end time in seconds    &quot;&quot;&quot;```#### `pypar.Phoneme.__eq__````pythondef __eq__(self, other) -&gt; bool:    &quot;&quot;&quot;Equality comparison for phonemes    Arguments        other            The phoneme to compare to    Returns        Whether the phonemes are equal    &quot;&quot;&quot;```#### `pypar.Phoneme.__str__````pythondef __str__(self) -&gt; str:    &quot;&quot;&quot;Retrieve the phoneme text    Returns        The phoneme    &quot;&quot;&quot;```#### `pypar.Phoneme.duration````pythondef duration(self) -&gt; float:    &quot;&quot;&quot;Retrieve the phoneme duration    Returns        The duration in seconds    &quot;&quot;&quot;```#### `pypar.Phoneme.end````pythondef end(self) -&gt; float:    &quot;&quot;&quot;Retrieve the end time of the phoneme in seconds    Returns        The end time in seconds    &quot;&quot;&quot;```#### `pypar.Phoneme.start````pythondef start(self) -&gt; float:    &quot;&quot;&quot;Retrieve the start time of the phoneme in seconds    Returns        The start time in seconds    &quot;&quot;&quot;```### `pypar.Word`#### `pypar.Word.__init__````pythondef __init__(self, word: str, phonemes: List[pypar.Phoneme]) -&gt; None:    &quot;&quot;&quot;Create word    Arguments        word            The word        phonemes            The phonemes in the word    &quot;&quot;&quot;```#### `pypar.Word.__eq__````pythondef __eq__(self, other) -&gt; bool:    &quot;&quot;&quot;Equality comparison for words    Arguments        other            The word to compare to    Returns        Whether the words are the same    &quot;&quot;&quot;```#### `pypar.Word.__getitem__````pythondef __getitem__(self, idx: int) -&gt; pypar.Phoneme:    &quot;&quot;&quot;Retrieve the idxth phoneme    Arguments        idx            The index of the phoneme to retrieve    Returns        The phoneme at index idx    &quot;&quot;&quot;```#### `pypar.Word.__len__````pythondef __len__(self) -&gt; int:    &quot;&quot;&quot;Retrieve the number of phonemes    Returns        The number of phonemes    &quot;&quot;&quot;```#### `pypar.Word.__str__````pythondef __str__(self) -&gt; str:    &quot;&quot;&quot;Retrieve the word text    Returns        The word text    &quot;&quot;&quot;```#### `pypar.Word.duration````pythondef duration(self) -&gt; float:    &quot;&quot;&quot;Retrieve the word duration in seconds    Returns        The duration in seconds    &quot;&quot;&quot;```#### `pypar.Word.end````pythondef end(self) -&gt; float:    &quot;&quot;&quot;Retrieve the end time of the word in seconds    Returns        The end time in seconds    &quot;&quot;&quot;```#### `pypar.Word.phoneme_at_time````pythondef phoneme_at_time(self, time: float) -&gt; Optional[pypar.Phoneme]:    &quot;&quot;&quot;Retrieve the phoneme at the specified time    Arguments        time            Time in seconds    Returns        The phoneme at the given time (or None if time is out of bounds)    &quot;&quot;&quot;```#### `pypar.Word.start````python    def start(self) -&gt; float:        &quot;&quot;&quot;Retrieve the start time of the word in seconds        Returns            The start time in seconds        &quot;&quot;&quot;```## TestsTests can be run as follows.```pip install pytestpytest```</longdescription>
</pkgmetadata>