<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a href=&quot;https://ilexconf.com&quot;&gt;&lt;img alt=&quot;ilexconf&quot; src=&quot;https://raw.githubusercontent.com/ilexconf/ilexconf/master/docs/_static/github-logo.png&quot;&gt;&lt;/a&gt;&lt;h2 align=&quot;center&quot;&gt;Configuration Library üîß for Python&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://travis-ci.org/ilexconf/ilexconf&quot;&gt;&lt;img alt=&quot;Build status of package&quot; src=&quot;https://img.shields.io/travis/ilexconf/ilexconf?logo=travis&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ilexconf/ilexconf/actions?query=workflow%3Adocs&quot;&gt;&lt;img alt=&quot;Build status of GitHub pages docs&quot; src=&quot;https://img.shields.io/github/workflow/status/ilexconf/ilexconf/docs?label=docs&amp;logo=github&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ilexconf.readthedocs.io/&quot;&gt;&lt;img alt=&quot;Build status of Read the Docs&quot; src=&quot;https://img.shields.io/readthedocs/ilexconf?label=readthedocs&amp;logo=read-the-docs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codecov.io/gh/ilexconf/ilexconf&quot;&gt;&lt;img alt=&quot;Code coverage report&quot; src=&quot;https://img.shields.io/codecov/c/github/ilexconf/ilexconf?logo=codecov&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/ilexconf/&quot;&gt;&lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/ilexconf?logo=pypi&amp;color=blue&quot;&gt;&lt;/a&gt;&lt;/p&gt;`ilexconf` is a Python library to load and merge configs from multiple sources, access &amp; change the values, and write them back, if needed. It has no dependencies by default but provides additional functions, relying on popular libraries to parse `yaml`, `toml`, provide `CLI` app, etc.üìù Full documentation at [ilexconf.com](https://ilexconf.com)## Table of contents * &lt;a href=&quot;#quick_start&quot;&gt;üöÄ Quick Start&lt;/a&gt;  * &lt;a href=&quot;#quick_start_install&quot;&gt;Installation&lt;/a&gt;  * &lt;a href=&quot;#quick_start_create&quot;&gt;Create `Config` object&lt;/a&gt;  * &lt;a href=&quot;#quick_start_read&quot;&gt;Read using `from_` functions&lt;/a&gt;  * &lt;a href=&quot;#quick_start_access&quot;&gt;Access values&lt;/a&gt;  * &lt;a href=&quot;#quick_start_change_create&quot;&gt;Change &amp; create values&lt;/a&gt;  * &lt;a href=&quot;#quick_start_merge&quot;&gt;`merge` another `Mapping` into config&lt;/a&gt;  * &lt;a href=&quot;#quick_start_as_dict&quot;&gt;Convert to simple `dict` using `as_dict`&lt;/a&gt;  * &lt;a href=&quot;#quick_start_write&quot;&gt;Save to file using `to_` functions&lt;/a&gt;  * &lt;a href=&quot;#quick_start_subclass&quot;&gt;Subclass `Config` to customize&lt;/a&gt;* &lt;a href=&quot;#internals&quot;&gt;‚öôÔ∏è Internals ‚Äì How it Works&lt;/a&gt;  * &lt;a href=&quot;#internals_implementation&quot;&gt;Subclassing `dict` and overriding methods&lt;/a&gt;  * &lt;a href=&quot;#internals_documentation&quot;&gt;Building and hosting docs&lt;/a&gt;&lt;a id=&quot;quick_start&quot;&gt;&lt;/a&gt;## üöÄ Quick Start&lt;a id=&quot;quick_start_install&quot;&gt;&lt;/a&gt;### Install```shell$ pip install ilexconf```&lt;a id=&quot;quick_start_create&quot;&gt;&lt;/a&gt;### Populate Config with valuesConfig object is initialized using arbitrary number of Mapping objects and keyword arguments. It can even be empty. ```pythonfrom ilexconf import Config, from_json# All of these are valid methods to initialize a configconfig = Config()config = Config({ &quot;database&quot;: { &quot;connection&quot;: { &quot;host&quot;: &quot;test.local&quot; } } })config = Config(database__connection__port=4000)config = from_json(&quot;settings.json&quot;)config = from_env()# Or, you can combine themconfig = Config(    # Take the basic settings from JSON file    from_json(&quot;settings.json&quot;),    # Merge the dictionary into that    { &quot;database&quot;: { &quot;connection&quot;: { &quot;host&quot;: &quot;test.local&quot; } } },    # Merge the keyword arguments on top    database__connection__port=4000)```When we initialize config all the values are merged. Arguments are merged in order. Every next argument is merged on top of the previous mapping values. And keyword arguments override even that. _For more details read about &lt;a href=&quot;#quick_start_merge&quot;&gt;merging&lt;/a&gt; strategy below_.For a settings file `settings.json` with the following content ...```json{    &quot;database&quot;: {        &quot;connection&quot;: {            &quot;host&quot;: &quot;localhost&quot;,            &quot;port&quot;: 5432        }    }}```The code above will produce a merged `config` with merged values:```json{    &quot;database&quot;: {        &quot;connection&quot;: {            &quot;host&quot;: &quot;test.local&quot;,            &quot;port&quot;: 4000        }    }}```&lt;a id=&quot;quick_start_read&quot;&gt;&lt;/a&gt;### Read from files &amp; environment variablesFiles like `.json`, `.yaml`, `.toml`, `.ini`, `.env`, `.py` as well as environment variables can all be read &amp; loaded using a set of `from_` functions.```pythonfrom ilexconf import (    from_json,      # from JSON file or string    from_yaml,      # from YAML file or string    from_toml,      # from TOML file or string    from_ini,       # from INI file or string    from_python,    # from .py module    from_dotenv,    # from .env file    from_env        # from environment variables)cfg1 = from_json(&quot;settings.json&quot;)cfg2 = Config(    from_yaml(&quot;settings.yaml&quot;),    from_toml(&quot;settings.toml&quot;))cfg3 = Config(    from_ini(&quot;settings.ini&quot;),    from_python(&quot;settings.py&quot;),    from_dotenv(&quot;.env&quot;),    from_env())```&lt;a id=&quot;quick_start_access&quot;&gt;&lt;/a&gt;### Access values however you likeYou can access any key in the hierarchical structure using classical Python dict notation, dotted keys, attributes, or any combination of this methods.```python# Classic wayassert config[&quot;database&quot;][&quot;conection&quot;][&quot;host&quot;] == &quot;test.local&quot;# Dotted keyassert config[&quot;database.connection.host&quot;] == &quot;test.local&quot;# Attributesassert config.database.connection.host == &quot;test.local&quot;# Any combination of the aboveassert config[&quot;database&quot;].connection.host == &quot;test.local&quot;assert config.database[&quot;connection.host&quot;] == &quot;test.local&quot;assert config.database[&quot;connection&quot;].host == &quot;test.local&quot;assert config.database.connection[&quot;host&quot;] == &quot;test.local&quot;```&lt;a id=&quot;quick_start_change_create&quot;&gt;&lt;/a&gt;### Change existing values and create new onesSimilarly, you can set values of any key (_even if it doesn't exist in the Config_) using all of the ways above.**Notice**, _contrary to what you would expect from the Python dictionaries, setting nested keys that do not exist is **allowed**_.```python# Classic wayconfig[&quot;database&quot;][&quot;connection&quot;][&quot;port&quot;] = 8080assert config[&quot;database&quot;][&quot;connection&quot;][&quot;port&quot;] == 8080# Dotted key (that does not exist yet)config[&quot;database.connection.user&quot;] = &quot;root&quot;assert config[&quot;database.connection.user&quot;] == &quot;root&quot;# Attributes (also does not exist yet)config.database.connection.password = &quot;secret stuff&quot;assert config.database.connection.password == &quot;secret stuff&quot;```&lt;a id=&quot;quick_start_merge&quot;&gt;&lt;/a&gt;### Merge with another Mapping objectIf you just assign a value to any key, you override any previous value of that key.In order to merge assigned value with an existing one, use `merge` method.```pythonconfig.database.connection.merge({ &quot;password&quot;: &quot;different secret&quot; })assert config.database.connection.password == &quot;different secret&quot;````merge` respects the contents of each value. For example, merging two dictionaries with the same key would not override that key completely. Instead, it will recursively look into each key and try to merge the contents. Take this example:```pythonconfig = Config(    { &quot;a1&quot;: { &quot;c1&quot;: 1, &quot;c2&quot;: 2, &quot;c3&quot;: 3 } },    { &quot;a1&quot;: { &quot;c3&quot;: &quot;other&quot; } })# Instead of overriding the value of the &quot;a1&quot; key completely, `merge` method# will recursively look inside and merge nested values.assert config.as_dict() == { &quot;a1&quot;: { &quot;c1&quot;: 1, &quot;c2&quot;: 2, &quot;c3&quot;: 3 } }```&lt;a id=&quot;quick_start_as_dict&quot;&gt;&lt;/a&gt;### Represent as dictionaryFor any purposes you might find fit you can convert entire structure of the Config object into dictionary, which will be essentially returned to you as a deep copy of the object.```pythonassert config.as_dict() == {    &quot;database&quot;: {        &quot;connection&quot;: {            &quot;host&quot;: &quot;test.local&quot;,            &quot;port&quot;: 8080,            &quot;user&quot;: &quot;root&quot;,            &quot;password&quot;: &quot;different secret&quot;        }    }}```&lt;a id=&quot;quick_start_write&quot;&gt;&lt;/a&gt;### Write to fileYou can serialize the file as JSON or other types any time using the `to_` functions.```python# Write updated config back as JSON filefrom ilexconf import to_jsonto_json(config, &quot;settings.json&quot;)```**WARNING**: _This might throw a serialization error if any of the values contained in the Config are custom objects that cannot be converted to `str`. Also, obviously, you might not be able to correctly parse an object back, if it's saved to JSON as `MyObject(&lt;function MyObject.__init__.&lt;locals&gt;.&lt;lambda&gt; at 0x108927af0&gt;, {})` or something._&lt;a id=&quot;quick_start_subclass&quot;&gt;&lt;/a&gt;### SubclassSubclassing `Config` class is very convenient for implementation of your own config classes with custom logic.Consider this example:```pythonimport ilexconfclass Config(ilexconf.Config):    &quot;&quot;&quot;    Your custom Configuration class    &quot;&quot;&quot;    def __init__(self, do_stuff=False):        # Initialize your custom config with JSON by default        super().__init__(self, ilexconf.from_json(&quot;setting.json&quot;))        # Add some custom value depending on some logic        if do_stuff:            self.my.custom.key = &quot;Yes, do stuff&quot;        self.merge({            &quot;Horizon&quot;: &quot;Up&quot;        })# Now you can use your custom Configuration everywhereconfig = Config(do_stuff=True)assert config.my.custom.key == &quot;Yes, do stuff&quot;assert config.Horizon == &quot;Up&quot;```&lt;a id=&quot;internals&quot;&gt;&lt;/a&gt;## ‚öôÔ∏è Internals&lt;a id=&quot;internals_implementation&quot;&gt;&lt;/a&gt;### ImplementationUnder the hood `ilexconf` is implemented as a `defaultdict` where every key with Mapping value is represented as another `Config` object. This creates a hierarchy of `Config` objects.`__getitem__`, `__setitem__`, `__getattr__`, and `__setattr__` methods are overloaded with custom logic to support convenient get/set approach presented by the library.&lt;a id=&quot;internals_documentation&quot;&gt;&lt;/a&gt;### DocumentationFull documentation is available at **[ilexconf.com](https://ilexconf.com)** and on ilexconf.readthedocs.io.* Documentation is written using `reStructuredText` and uses real code snippets from the unit tests and source code.* Documentation is built using [Sphinx](https://www.sphinx-doc.org/) using [sphinx-material](https://github.com/bashtage/sphinx-material) theme.* Documentation is hosted on Github Pages at [ilexconf.com](https://ilexconf.com) and on &quot;Read the Docs&quot; at [ilexconf.readthedocs.io](https://ilexconf.readthedocs.io/).* For Github Pages documentation is built using Github Actions.* Read the Docs builds their version automatically based on the `.readthedocs.yml` config in the project root directory.## ContributingContributions are welcome!## Kudos`ilexconf` ideas are heavily borrowed from amazing [`python-configuration`](https://github.com/tr11/python-configuration) library by [Tiago Requeijo](https://github.com/tr11).## LicenseMIT</longdescription>
</pkgmetadata>