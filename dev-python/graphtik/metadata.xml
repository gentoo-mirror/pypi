<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Graphtik========|pypi-version| |gh-version| (build-version: v10.4.0, build-date: 2020-10-09T11:27:24.502636)|python-ver| |dev-status||travis-status| |doc-status| |cover-status| |codestyle| |proj-lic||gh-watch| |gh-star| |gh-fork| |gh-issues|.. epigraph::    It's a DAG all the way down!    |sample-plot|Computation graphs for Python &amp; Pandas--------------------------------------**Graphtik** is a library to compose, plot &amp; execute *graphs of python functions*(a.k.a pipelines) that consume and populate (possibly nested) named data(a.k.a dependencies), based on whether values for those dependencies exist in the inputsor have been calculated earlier, with *pandas* in mind.- Its primary use case is building flexible algorithms for data science/machine learning projects.- It should be extendable to implement the following:  - an `IoC dependency resolver &lt;https://en.wikipedia.org/wiki/Dependency_injection&gt;`_    (e.g. Java Spring);  - an executor of interdependent tasks based on files (e.g. GNU Make);  - a custom ETL engine;  - a spreadsheet calculation engine.*Graphtik* `sprang &lt;https://docs.google.com/spreadsheets/d/1HPgtg2l6v3uDS81hLOcFOZxIBLCnHGrcFOh3pFRIDio/edit#gid=0&gt;`_from `Graphkit`_ (summer 2019, v1.2.2) to `experiment&lt;https://github.com/yahoo/graphkit/issues/&gt;`_ with Python 3.6+ features,but has diverged significantly with enhancements ever since... _features:Features--------- Deterministic pre-decided `execution plan` (excepting *partial-outputs* or  *endured operations*, see below).- Can assemble existing functions without modifications into `pipeline`\s.- `dependency` resolution can bypass calculation cycles based on data given and asked.- Support functions with `optional &lt;optionals&gt;` input args and/or `varargs &lt;varargish&gt;`.- Support functions with `partial outputs`; keep working even if certain `endured` operations fail.- Facilitate trivial `conveyor operation`\s and `alias` on `provides`.- Support cycles, by annotating repeated updates of `dependency` values as `sideffects`,  (e.g. to add columns into *pandas.DataFrame*\s).- `Hierarchical dependencies &lt;subdoc&gt;` may access data values deep in `solution`  with `json pointer path` expressions.- Hierarchical dependencies annotated as `implicit` imply which subdoc dependency  the function reads or writes in the parent-doc.- `Merge &lt;operation merging&gt;` or `nest &lt;operation nesting&gt;` sub-pipelines.- Early `eviction` of intermediate results from `solution`, to optimize memory footprint.- Solution tracks all intermediate `overwritten &lt;overwrite&gt;` values for the same dependency.- Parallel execution (but underdeveloped).- Elaborate `Graphviz`_ plotting with configurable `plot theme`\s.- Integration with Sphinx sites with the new *graphtik* directive.- Authored with *debugging* in mind.- Parallel execution (but underdeveloped &amp; deprecated).Anti-features^^^^^^^^^^^^^- It's not an orchestrator for long-running tasks, nor a calendar scheduler -  `Apache Airflow &lt;https://airflow.apache.org/&gt;`_, `Dagster  &lt;https://github.com/dagster-io/dagster&gt;`_ or `Luigi &lt;https://luigi.readthedocs.io/&gt;`_  may help for that.- It's not really a parallelizing optimizer, neither a map-reduce framework - look  additionally at `Dask &lt;https://dask.org/&gt;`_, `IpyParallel  &lt;https://ipyparallel.readthedocs.io/en/latest/&gt;`_, `Celery  &lt;https://docs.celeryproject.org/en/stable/getting-started/introduction.html&gt;`_,  Hive, Pig, Spark, Hadoop, etc.Quick start-----------Here’s how to install:::   pip install graphtikOR with various &quot;extras&quot; dependencies, such as, for plotting::   pip install graphtik[plot]. Tip::    Supported extras:    **plot**        for plotting with `Graphviz`_,    **matplot**        for plotting in *maplotlib* windows    **sphinx**        for embedding plots in *sphinx*\-generated sites,    **test**        for running *pytest*\s,    **dill**        may help for pickling `parallel` tasks - see `marshalling` term        and ``set_marshal_tasks()`` configuration.    **all**        all of the above, plus development libraries, eg *black* formatter.    **dev**        like *all*Let's build a *graphtik* computation graph that produces x3 outputsout of 2 inputs `α` and `β`:- `α x β`- `α - αxβ`- `|α - αxβ| ^ 3`..&gt;&gt;&gt; from graphtik import compose, operation&gt;&gt;&gt; from operator import mul, sub&gt;&gt;&gt; @operation(name=&quot;abs qubed&quot;,...            needs=[&quot;α-α×β&quot;],...            provides=[&quot;|α-α×β|³&quot;])... def abs_qubed(a):...     return abs(a) ** 3Compose the ``abspow`` function along the ``mul`` &amp; ``sub``  built-insinto a computation graph:&gt;&gt;&gt; graphop = compose(&quot;graphop&quot;,...     operation(needs=[&quot;α&quot;, &quot;β&quot;], provides=[&quot;α×β&quot;])(mul),...     operation(needs=[&quot;α&quot;, &quot;α×β&quot;], provides=[&quot;α-α×β&quot;])(sub),...     abs_qubed,... )&gt;&gt;&gt; graphopPipeline('graphop', needs=['α', 'β', 'α×β', 'α-α×β'],                    provides=['α×β', 'α-α×β', '|α-α×β|³'],                    x3 ops: mul, sub, abs qubed)Run the graph and request all of the outputs(notice that unicode characters work also as Python identifiers):&gt;&gt;&gt; graphop(α=2, β=5){'α': 2, 'β': 5, 'α×β': 10, 'α-α×β': -8, '|α-α×β|³': 512}... or request a subset of outputs:&gt;&gt;&gt; solution = graphop.compute({'α': 2, 'β': 5}, outputs=[&quot;α-α×β&quot;])&gt;&gt;&gt; solution{'α-α×β': -8}... and plot the results (if in *jupyter*, no need to create the file):&gt;&gt;&gt; solution.plot('executed_3ops.svg')  # doctest: +SKIP|sample-sol||plot-legend|.. |sample-plot| image:: docs/source/images/sample.svg    :alt: sample graphtik plot    :width: 120px    :align: middle.. |sample-sol| image:: docs/source/images/executed_3ops.svg    :alt: sample graphtik plot    :width: 120px    :align: middle.. |plot-legend| image:: docs/source/images/GraphtikLegend.svg    :alt: graphtik legend    :align: middle.. _Graphkit: https://github.com/yahoo/graphkit.. _Graphviz: https://graphviz.org.. _badges_substs:.. |travis-status| image:: https://img.shields.io/travis/pygraphkit/graphtik    :alt: Travis continuous integration testing ok? (Linux)    :target: https://travis-ci.org/pygraphkit/graphtik/builds.. |doc-status| image:: https://img.shields.io/readthedocs/graphtik?branch=master    :alt: ReadTheDocs ok?    :target: https://graphtik.readthedocs.org.. |cover-status| image:: https://img.shields.io/codecov/c/github/pygraphkit/graphtik    :target: https://codecov.io/gh/pygraphkit/graphtik.. |gh-version| image::  https://img.shields.io/github/v/release/pygraphkit/graphtik?label=GitHub%20release&amp;include_prereleases    :target: https://github.com/pygraphkit/graphtik/releases    :alt: Latest release in GitHub.. |pypi-version| image::  https://img.shields.io/pypi/v/graphtik?label=PyPi%20version    :target: https://pypi.python.org/pypi/graphtik/    :alt: Latest version in PyPI.. |python-ver| image:: https://img.shields.io/pypi/pyversions/graphtik?label=Python    :target: https://pypi.python.org/pypi/graphtik/    :alt: Supported Python versions of latest release in PyPi.. |dev-status| image:: https://img.shields.io/pypi/status/graphtik    :target: https://pypi.python.org/pypi/graphtik/    :alt: Development Status.. |codestyle| image:: https://img.shields.io/badge/code%20style-black-black    :target: https://github.com/ambv/black    :alt: Code Style.. |gh-watch| image:: https://img.shields.io/github/watchers/pygraphkit/graphtik?style=social    :target: https://github.com/pygraphkit/graphtik    :alt: Github watchers.. |gh-star| image:: https://img.shields.io/github/stars/pygraphkit/graphtik?style=social    :target: https://github.com/pygraphkit/graphtik    :alt: Github stargazers.. |gh-fork| image:: https://img.shields.io/github/forks/pygraphkit/graphtik?style=social    :target: https://github.com/pygraphkit/graphtik    :alt: Github forks.. |gh-issues| image:: http://img.shields.io/github/issues/pygraphkit/graphtik?style=social    :target: https://github.com/pygraphkit/graphtik/issues    :alt: Issues count.. |proj-lic| image:: https://img.shields.io/pypi/l/graphtik    :target:  https://www.apache.org/licenses/LICENSE-2.0    :alt: Apache License, version 2.0</longdescription>
</pkgmetadata>