<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Quick Start## Background[Dramatiq](https://dramatiq.io/) is a background task-processing library for Python with a focus on simplicity, reliability and performance.This package, [async-dramatiq](https://pypi.org/project/async-dramatiq/), extends Dramatiq to provide the following:  1. Support for Asyncio ( [issue #238](https://github.com/Bogdanp/dramatiq/issues/238) )  2. Message scheduling support ( [scheduling cookbook](https://dramatiq.io/cookbook.html#scheduling-messages) )## SetupTo provide async support for your actors all you need to do is add the `AsyncMiddleware` to your broker.#### RabbitMQ Broker```import dramatiqfrom dramatiq.brokers.rabbitmq import RabbitmqBrokerrabbitmq_broker = RabbitmqBroker(host=&quot;rabbitmq&quot;)rabbitmq_broker.add_middleware(AsyncMiddleware())  # &lt;--- Heredramatiq.set_broker(rabbitmq_broker)```#### Redis Broker```import dramatiqfrom dramatiq.brokers.redis import RedisBrokerredis_broker = RedisBroker(host=&quot;redis&quot;)redis_broker.add_middleware(AsyncMiddleware()) # &lt;--- Heredramatiq.set_broker(redis_broker)```## Running#### The SchedulerWe leverage [apscheduler](https://pypi.org/project/APScheduler/) as our scheduling system. Check out [run_scheduler.py](examples/worker_heartbeat/run_scheduler.py) for an example of running this scheduler.#### Dramatiq WorkerFor more details check out the official guide to [dramatiq](https://dramatiq.io/guide.html#workers) or [docker-compose.yaml](examples/worker_heartbeat/docker-compose.yaml) for a specific example.## ExamplePlay around with [worker-heartbeat-example](examples/worker_heartbeat/README.md). A functioning and featured example implementation.----# Async Middleware`AsyncMiddleware` will start a `AsyncWorker` which will be used to run the event loop. This event loop will be shared across the Worker threads. ### Startup and Shutdown EventsTo startup and shutdown any resources the `AsyncMiddleware` provides two hooks:1. Before the event loop is started2. After the event loop is stoppedTo allow for standing up or tearing down of shared async resources#### Example```from async_dramatiq.middleware import AsyncMiddlewareasync def startup() -&gt; None:    &quot;&quot;&quot;This function should contain your resource initialization code.&quot;&quot;&quot;    passasync def shutdown() -&gt; None:    &quot;&quot;&quot;This function should contain your resource teardown code.&quot;&quot;&quot;    passclass MyAsyncMiddleware(AsyncMiddleware):    def before_async_worker_thread_startup(        self, _: RabbitmqBroker, thread: AsyncWorker, **kwargs: dict[str, Any]    ) -&gt; None:        thread.event_loop.run_until_complete(startup())    def after_async_worker_thread_shutdown(        self, _: RabbitmqBroker, thread: AsyncWorker, **kwargs: dict[str, Any]    ) -&gt; None:        thread.event_loop.run_until_complete(shutdown())        thread.event_loop.close()```# Async ActorThe async actor, `async_actor`,  acts as a thin wrapper around the Dramatiq actor providing a variety of new functionality.## Interval JobsRun a job at some interval```@async_actor(interval=timedelta(seconds=5))def run_every_5_seconds() -&gt; None:    pass```## Cron JobsRun a job on a crontab ( See https://crontab.guru/. )```@async_actor(interval=&quot;0 0 * * *&quot;)def run_at_midnight() -&gt; None:  pass```</longdescription>
</pkgmetadata>