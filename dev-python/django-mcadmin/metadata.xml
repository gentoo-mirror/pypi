<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. django-mcadmin.. README.rstA django-mcadmin documentation==============================|GitHub|_ |Coveralls|_ |pypi-license|_ |pypi-version|_ |pypi-python-version|_ |pypi-django-version|_ |pypi-format|_ |pypi-wheel|_ |pypi-status|_    *django-mcadmin is a Django reusable app that provides simple run management commands from admin*.. contents::Installation------------* Obtain your copy of source code from the git repository: ``$ git clone https://github.com/vint21h/django-mcadmin.git``. Or download the latest release from https://github.com/vint21h/django-mcadmin/tags/.* Run ``$ python ./setup.py install`` from the repository source tree or unpacked archive. Or use pip: ``$ pip install django-mcadmin``.Configuration-------------* Add ``&quot;mcadmin&quot;`` to ``settings.INSTALLED_APPS``:.. code-block:: python    # settings.py    INSTALLED_APPS += [        &quot;mcadmin&quot;,    ]* Add ``&quot;mcadmin&quot;`` to your URLs definitions:.. code-block:: python    # urls.py    from django.urls import re_path, include    urlpatterns += [        re_path(r&quot;^admin/mcadmin/&quot;, include(&quot;mcadmin.urls&quot;)),    ]* Run ``$ python ./manage.py migrate`` in your project folder to apply app migrations.Settings--------``MCADMIN_EXAMPLES_PATH``    Management commands files templates path. Defaults to: ``settings.STATIC_ROOT``.``MCADMIN_UPLOADS_PATH``    Management commands forms with files upload path. Defaults to: ``settings.MEDIA_ROOT``.``MCADMIN_MODULE_NAME``    Management commands admin classes search module name. Defaults to: ``&quot;mcommands&quot;``.``MCADMIN_USE_PERMISSIONS``    Management commands admin classes search module name. Defaults to: ``False``.Usage-----For example, exists management command like this:.. code-block:: python    # management/commands/something-useless.py    from django.core.management.base import BaseCommand    class Command(BaseCommand):        help: str = &quot;Useless management command&quot;        def add_arguments(self, parser):            parser.add_argument(                &quot;--object-id&quot;,                &quot;-o&quot;,                dest=&quot;object_id&quot;,                help=&quot;Object ID&quot;,                action=&quot;store&quot;,                required=True,                metavar=&quot;OBJECT_ID&quot;,                type=int,            )        def handle(self, *args, **kwargs):            self.stdout.write(kwargs.get(&quot;object_id&quot;))Next, you need to create a form for this management command admin which we use in the next piece of code:.. code-block:: python    # forms.py    from django import forms    class SomethingUselessManagementCommandAdminForm(forms.Form):        object_id = forms.IntegerField(label=&quot;Object ID&quot;, required=True)And finally, write management command admin class and register it:.. code-block:: python    # mcommands/something-useless.py    from mcadmin.command import ManagementCommandAdmin    from mcadmin.registry import registry    from forms import SomethingUselessManagementCommandAdminForm    class SomethingUselessManagementCommandAdmin(ManagementCommandAdmin):        command: str = &quot;something-useless&quot;        name: str = &quot;Useless management command&quot;        form: Type[Form] = SomethingUselessManagementCommandAdminForm    # registering management command admin custom classes    registry.register(command=SomethingUselessManagementCommandAdmin)Also, there are some helpers for building more complex flows, like management commands that can be executed directly or as a background task or management commands that handle uploaded files. For example:Management command:.. code-block:: python    # management/commands/distributed-something-useless-with-file.py    from mcadmin.management.commands import TaskCommand    class Command(TaskCommand):        help: str = &quot;Useless management command which process file uploaded from a command from and can be executed directly or as background task&quot;        def add_arguments(self, parser):            parser.add_argument(                &quot;--task&quot;,                &quot;-T&quot;,                dest=&quot;as_task&quot;,                help=&quot;Run command as background task&quot;,                default=False,                action=&quot;store&quot;,                metavar=&quot;TASK&quot;,                type=bool,            )            parser.add_argument(                &quot;--object-id&quot;,                &quot;-o&quot;,                dest=&quot;object_id&quot;,                help=&quot;Object ID&quot;,                action=&quot;store&quot;,                required=True,                metavar=&quot;OBJECT_ID&quot;,                type=int,            )            parser.add_argument(                &quot;--data&quot;,                &quot;-D&quot;,                dest=&quot;data&quot;,                help=&quot;Path to file with data&quot;,                action=&quot;store&quot;,                metavar=&quot;DATA&quot;,                type=str,            )        def _local(self, *args, **kwargs):            self.stdout.write(kwargs.get(&quot;object_id&quot;))            self.stdout.write(kwargs.get(&quot;data&quot;))        def _as_task(self, *args, **kwargs):            # There must be code which executed in threads or call celery task or something else asynchronous.            self.stdout.write(kwargs.get(&quot;object_id&quot;))            self.stdout.write(kwargs.get(&quot;data&quot;))Management command admin form:.. code-block:: python    # forms.py    from django import forms    from mcadmin.forms.helpers import (        ManagementCommandAdminTaskForm,        ManagementCommandAdminFilesForm    )    class DistributedSomethingUselessWithFileManagementCommandAdminForm(        ManagementCommandAdminTaskForm,        ManagementCommandAdminFilesForm    ):        data = forms.FileField(label=&quot;data, required=True)        object_id = forms.IntegerField(label=&quot;Object ID&quot;, required=True)Management command admin example file:.. code-block:: python    # mcommands/examples.py    from mcadmin.example import ManagementCommandAdminExampleFile    class DistributedSomethingUselessWithFileManagementCommandAdminExampleFile(        ManagementCommandAdminExampleFile    ):        description: str = &quot;Management command with files example file&quot;        path: str = &quot;distributed-something-useless-with-file-example.csv&quot;Or for the file which not served using Django but directly available for download via HTTP:.. code-block:: python    # mcommands/examples.py    from mcadmin.example import ManagementCommandAdminExampleFile    class DistributedSomethingUselessWithFileManagementCommandAdminExampleFile(        ManagementCommandAdminExampleFile    ):        description: str = &quot;Management command with files example file&quot;        path: str = &quot;https://www.example.com/distributed-something-useless-with-file-example.csv&quot;        raw: bool = TrueManagement command admin:.. code-block:: python    # mcommands/something-useless.py    from mcadmin.command import ManagementCommandAdmin    from mcadmin.registry import registry    from forms import DistributedSomethingUselessWithFileManagementCommandAdminForm    class DistributedSomethingUselessWithFileManagementCommandAdmin(ManagementCommandAdmin):        command: str = &quot;distributed-something-useless-with-file&quot;        name: str = &quot;Distributed useless management command with file&quot;        form: Type[Form] = DistributedSomethingUselessWithFileManagementCommandAdminForm        examples: Type[ManagementCommandAdminExampleFile] = [DistributedSomethingUselessWithFileManagementCommandAdminExampleFile]    # registering management command admin custom classes    registry.register(command=DistributedSomethingUselessWithFileManagementCommandAdmin)Contributing------------1. `Fork it &lt;https://github.com/vint21h/django-mcadmin/&gt;`_2. Install `GNU Make &lt;https://www.gnu.org/software/make/&gt;`_3. Install and configure `pyenv &lt;https://github.com/pyenv/pyenv/&gt;`_ and `pyenv-virtualenv plugin &lt;https://github.com/pyenv/pyenv-virtualenv/&gt;`_4. Install and configure `direnv &lt;https://github.com/direnv/direnv/&gt;`_5. Create environment config from example.. code-block:: bash    cp .env.example .env6. Install development dependencies:.. code-block:: bash    make install7. Create your fix/feature branch:.. code-block:: bash    git checkout -b my-new-fix-or-feature8. Check code style and moreover:.. code-block:: bash    make check9. Run tests:.. code-block:: bash    make test10. Push to the branch:.. code-block:: bash    git push origin my-new-fix-or-feature11. `Create a new Pull Request &lt;https://github.com/vint21h/django-mcadmin/compare/&gt;`_Licensing---------django-mcadmin is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.For complete license text see COPYING file.Contacts--------**Project Website**: https://github.com/vint21h/django-mcadmin/**Author**: Alexei Andrushievich &lt;vint21h@vint21h.pp.ua&gt;For other authors list see AUTHORS file... |GitHub| image:: https://github.com/vint21h/django-mcadmin/workflows/build/badge.svg    :alt: GitHub.. |Coveralls| image:: https://coveralls.io/repos/github/vint21h/django-mcadmin/badge.svg?branch=master    :alt: Coveralls.. |pypi-license| image:: https://img.shields.io/pypi/l/django-mcadmin    :alt: License.. |pypi-version| image:: https://img.shields.io/pypi/v/django-mcadmin    :alt: Version.. |pypi-django-version| image:: https://img.shields.io/pypi/djversions/django-mcadmin    :alt: Supported Django version.. |pypi-python-version| image:: https://img.shields.io/pypi/pyversions/django-mcadmin    :alt: Supported Python version.. |pypi-format| image:: https://img.shields.io/pypi/format/django-mcadmin    :alt: Package format.. |pypi-wheel| image:: https://img.shields.io/pypi/wheel/django-mcadmin    :alt: Python wheel support.. |pypi-status| image:: https://img.shields.io/pypi/status/django-mcadmin    :alt: Package status.. _GitHub: https://github.com/vint21h/django-mcadmin/actions/.. _Coveralls: https://coveralls.io/github/vint21h/django-mcadmin?branch=master.. _pypi-license: https://pypi.org/project/django-mcadmin/.. _pypi-version: https://pypi.org/project/django-mcadmin/.. _pypi-django-version: https://pypi.org/project/django-mcadmin/.. _pypi-python-version: https://pypi.org/project/django-mcadmin/.. _pypi-format: https://pypi.org/project/django-mcadmin/.. _pypi-wheel: https://pypi.org/project/django-mcadmin/.. _pypi-status: https://pypi.org/project/django-mcadmin/</longdescription>
</pkgmetadata>