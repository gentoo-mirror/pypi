<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;./assets/logo.svg&quot; alt=&quot;Kallisto&quot; width=&quot;300&quot;&gt;&lt;/div&gt;##![PyPI - Python Version](https://img.shields.io/pypi/pyversions/kallisto)[![Documentation](https://img.shields.io/badge/GitBook-Docu-lightgrey)](https://ehjc.gitbook.io/kallisto/)[![Maturity Level](https://img.shields.io/badge/Maturity%20Level-Under%20Development-orange)](https://img.shields.io/badge/Maturity%20Level-Under%20Development-orange)[![Tests](https://github.com/AstraZeneca/kallisto/workflows/Tests/badge.svg)](https://github.com/AstraZeneca/kallisto/actions?workflow=Tests)[![codecov](https://codecov.io/gh/AstraZeneca/kallisto/branch/master/graph/badge.svg?token=HI0U0R96X8)](https://codecov.io/gh/AstraZeneca/kallisto)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/AstraZeneca/kallisto.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/AstraZeneca/kallisto/context:python)[![status](https://joss.theoj.org/papers/16126cbcfb826bf4810d243a009a6b02/status.svg)](https://joss.theoj.org/papers/16126cbcfb826bf4810d243a009a6b02)# Table of Contents- Full Author List- Introduction- Installation- Testing suite- Reference# Full Author List- Developer [Eike Caldeweyher](https://scholar.google.com/citations?user=25n8C3wAAAAJ&amp;hl)- Developer [Rocco Meli](https://scholar.google.com/citations?hl=de&amp;user=s8cVcvYAAAAJ)- Developer [Philipp Pracht](https://scholar.google.com/citations?user=PJiGPk0AAAAJ&amp;hl)# IntroductionWe developed the `kallisto` program for the efficient and robust calculation of atomic features using molecular geometries either in a ``xmol`` or a ``Turbomole`` format.Furthermore, several modelling tools are implemented, e.g., to calculate root-mean squared deviations via quaternions (including rotation matrices), sorting of molecular geometries and many more. All features of ``kallisto`` are described in detail within our [documentation](https://ehjc.gitbook.io/kallisto/) ([GitBook repository](https://github.com/f3rmion/gitbook-kallisto)).Main dependencies-----------------```bashclick 7.1.2 Composable command line interface toolkitnumpy 1.20.1 NumPy is the fundamental package for array computing with Python.scipy 1.6.0 SciPy: Scientific Library for Python└── numpy &gt;=1.16.5```For a list of all dependencies have a look at the pyproject.toml file.Installation from PyPI----------------------To install ``kallisto`` via `pip` use our published PyPI package```bashpip install kallisto```Installation from Source------------------------Requirements to install ``kallisto``from sources:- [poetry](https://python-poetry.org/docs/#installation)- [pyenv](https://github.com/pyenv/pyenv#installation) or [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html)- python &gt;=3.7First check that ``poetry`` is running correctly (v1.0.10 at the time of writing)```bash&gt; poetry --versionPoetry version 1.0.10```Create a virtual environment (via ``pyenv`` or ``conda``) and activate it. Afterwards, clone the ``kallisto`` project from GitHub and install it using ``poetry`````bash&gt; git clone git@github.com:AstraZeneca/kallisto.git&gt; cd kallisto&gt; poetry install```Testing suite-------------The ``kallisto`` project uses [nox](https://nox.thea.codes/en/stable/tutorial.html#installation) as an automated unit test suite, which is therefore an additional dependency.### Default nox sessionThe default session includes: linting (lint), type checks (mypy, pytype), and unit tests (tests). ```bash&gt; nox```When everything runs smoothly through, you are ready to go! After one successful nox run, we can reuse the created virtual environment via the ``-r`` flag.```bash&gt; nox -r```Different unit test sessions are implemented (check the noxfile.py). They can be called separately via the run session ``-rs`` flag.### TestsRun all unit tests that are defined in the /tests directory.```bash &gt; nox -rs tests```### Lint``kallisto`` uses the [flake8](https://flake8.pycqa.org/en/latest/) linter (check the .flake8 config file).```bash&gt; nox -rs lint```### Black``kallisto`` uses the [black](https://github.com/psf/black) code formatter.```bash &gt; nox -rs black```### Safety``kallisto`` checks the security of dependencies via [safety](https://pyup.io/safety/).```bash&gt; nox -rs safety```### Mypy``kallisto`` checks for static types via [mypy](https://github.com/python/mypy) (check the mypy.ini config file).```bash&gt; nox -rs mypy```### Pytype``kallisto`` furthermore uses [pytype](https://github.com/google/pytype) for type checks.```bash&gt; nox -rs pytype```### CoverageUnit test [coverage](https://coverage.readthedocs.io/en/coverage-5.4/) can be checked as well.```bash&gt; nox -rs coverage```Reference---------Always cite:Eike Caldeweyher, J. Open Source Softw., *2021*, 6, 3050. DOI: [10.21105/joss.03050](https://doi.org/10.21105/joss.03050)```@article{Caldeweyher2021,  doi = {10.21105/joss.03050},  url = {https://doi.org/10.21105/joss.03050},  year = {2021},  volume = {6},  number = {60},  pages = {3050},  author = {Eike Caldeweyher},  title = {kallisto: A command-line interface to simplify computational modelling and the generation of atomic features},  journal = {J. Open Source Softw.}}```</longdescription>
</pkgmetadata>