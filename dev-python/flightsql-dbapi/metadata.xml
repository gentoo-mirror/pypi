<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>:warning: This library is experimental and under active development. The APIs itprovides could change at any time so use at your own risk.## OverviewThis library provides a [DB API 2](https://peps.python.org/pep-0249/) interfaceand [SQLAlchemy](https://www.sqlalchemy.org) Dialect for [FlightSQL](https://arrow.apache.org/docs/format/FlightSql.html).Initially, this library aims to ease the process of connecting to Flight SQLAPIs in [Apache Superset](https://superset.apache.org).The primary SQLAlchemy Dialect provided by `flightsql-dbapi` targets the[DataFusion](https://arrow.apache.org/datafusion) SQL execution engine. However,there extension points to create custom dialects using Flight SQL as a transportlayer and for metadata discovery.## Installation```shell$ pip install flightsql-dbapi```## Usage### DB API 2 Interface ([PEP-249](https://peps.python.org/pep-0249))```python3from flightsql import connect, FlightSQLClientclient = FlightSQLClient(host='upstream.server.dev')conn = connect(client)cursor = conn.cursor()cursor.execute('select * from runs limit 10')print(&quot;columns:&quot;, cursor.description)print(&quot;rows:&quot;, [r for r in cursor])```### SQLAlchemy```python3import flightsql.sqlalchemyfrom sqlalchemy import func, selectfrom sqlalchemy.engine import create_enginefrom sqlalchemy.schema import MetaData, Tableengine = create_engine(&quot;datafusion+flightsql://john:appleseeds@upstream.server.dev:443&quot;)runs = Table(&quot;runs&quot;, MetaData(bind=engine), autoload=True)count = select([func.count(&quot;*&quot;)], from_obj=runs).scalar()print(&quot;runs count:&quot; count)print(&quot;columns:&quot;, [(r.name, r.type) for r in runs.columns])# Reflectionmetadata = MetaData(schema=&quot;iox&quot;)metadata.reflect(bind=engine)print(&quot;tables:&quot;, [table for table in metadata.sorted_tables])```### Custom DialectsIf your database of choice can't make use of the Dialects provided by thislibrary directly, you can extend `flightsql.sqlalchemy.FlightSQLDialect` as astarting point for your own custom Dialect.```python3from flightsql.sqlalchemy import FlightSQLDialectfrom sqlalchemy.dialects import registryclass CustomDialect(FlightSQLDialect):    name = &quot;custom&quot;    paramstyle = 'named'    # For more information about what's available to override, visit:    # https://docs.sqlalchemy.org/en/14/core/internals.html#sqlalchemy.engine.default.DefaultDialectregistry.register(&quot;custom.flightsql&quot;, &quot;path.to.your.module&quot;, &quot;CustomDialect&quot;)```DB API 2 Connection creation is provided by `FlightSQLDialect`.The core reflection APIs of `get_columns`, `get_table_names` and`get_schema_names` are implemented in terms of Flight SQL API calls so youshouldn't have to override those unless you have very specific needs.### Directly with `flightsql.FlightSQLClient````python3from flightsql import FlightSQLClientclient = FlightSQLClient(host='upstream.server.dev',                         port=443,                         token='rosebud-motel-bearer-token')info = client.execute(&quot;select * from runs limit 10&quot;)reader = client.do_get(info.endpoints[0].ticket)data_frame = reader.read_all().to_pandas()```### AuthenticationBoth [Basic and Bearer Authentication](https://arrow.apache.org/docs/format/Flight.html#authentication) are supported.To authenticate using Basic Authentication, supply a DSN as follows:```datafusion+flightsql://user:password@host:443```A handshake will be performed with the upstream server to obtain a Bearer token.That token will be used for the remainder of the engine's lifetype.To authenticate using Bearer Authentication directly, supply a `token` query parameterinstead:```datafusion+flightsql://host:443?token=TOKEN```The token will be placed in an appropriate `Authentication: Bearer ...` HTTP header.### Additional Query Parameters| Name | Description | Default || ---- | ----------- | ------- || `insecure` | Connect without SSL/TLS (h2c) | `false` || `disable_server_verification` | Disable certificate verification of the upstream server | `false` || `token` | Bearer token to use instead of Basic Auth | empty |Any query parameters *not* specified in the above table will be sent to theupstream server as gRPC metadata.</longdescription>
</pkgmetadata>