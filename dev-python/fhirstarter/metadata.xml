<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fhirstarter&lt;p&gt;  &lt;a href=&quot;https://github.com/canvas-medical/fhirstarter/actions/workflows/test.yml&quot;&gt;    &lt;img src=&quot;https://github.com/canvas-medical/fhirstarter/actions/workflows/test.yml/badge.svg&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/fhirstarter/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/fhirstarter&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/fhirstarter/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/fhirstarter&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/fhirstarter/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/l/fhirstarter&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/psf/black&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000&quot;&gt;  &lt;/a&gt;&lt;/p&gt;An ASGI [FHIR](https://hl7.org/fhir/) API framework built on top of [FastAPI](https://fastapi.tiangolo.com) and[FHIR Resources](https://pypi.org/project/fhir.resources/).Supports FHIR sequences:* [STU (v3.0.2)](https://hl7.org/fhir/STU3/)* [R4 (v4.0.1)](https://hl7.org/fhir/R4/)* [R4B (v4.3.0)](https://hl7.org/fhir/R4B/)* [R5 (v5.0.0)](https://hl7.org/fhir/R5/)## Installation```bashpip install fhirstarter```## Features* Automatic, standardized API route creation* Automatic validation of inputs and outputs through the use of FHIR Resources Pydantic models* Automatically-generated capability statement that can be customized, and a capability statement  API route* An exception-handling framework that produces FHIR-friendly responses (i.e. OperationOutcomes)* Automatically-generated, integrated documentation generated from the FHIR specification* Custom search parameters for search endpoints### DisclaimerFHIRStarter was built based on the business needs of[Canvas Medical](https://www.canvasmedical.com). At any point in time, it may not be broadlyapplicable to the industry at large. Canvas Medical open-sourced the project so that it can be usedby healthcare software developers whose needs it might also meet. Ongoing support and developmentwill be based on the business needs of Canvas Medical.## BackgroundFHIRStarter uses a provider-decorator pattern. Developers can write functions, or handlers, thatimplement FHIR interactions -- such as create, read, search-type, and update -- and plug them intothe framework. FHIRStarter then automatically creates FHIR-compatible API routes from thesedeveloper-provided functions. FHIR interactions that are supplied must use the resource classesdefined by the [FHIR Resources](https://pypi.org/project/fhir.resources/) Python package, which is acollection of Pydantic models for FHIR resources.In order to stand up a FHIR server, all that is required is to create a FHIRStarter and aFHIRProvider instance, register a FHIR interaction with the provider, add the provider to theFHIRStarter instance, and pass the FHIRStarter instance to an ASGI server.## Usage### Currently-supported functionalityFHIRStarter supports create, read, search-type, and update endpoints across all FHIR resourcetypes, and will automatically generate the `/metadata` capabilities statement endpoint.Handlers can be written as coroutines with `async/await` syntax, or as plain functions. FastAPIsupports both, as does FHIRStarter.### Configuration for specific FHIR sequencesFHIRStarter will work out of the box as an R5 server. If a different sequence is desired, it must bespecified with an environment variable:```shellFHIR_SEQUENCE=R4B```The latest version of the [FHIR Resources](https://pypi.org/project/fhir.resources/) package onlysupports FHIR STU3, R4B, and R5. FHIR R4 is supported by an earlier version. Because of this, if adeveloper desires to use FHIR R4, then the developer must pin version **6.4.0** of fhir.resources intheir project. FHIRStarter will check the version of fhir.resources against the specified FHIRversion in the environment variable to ensure that they are compatible.Model imports are also affected by which version of fhir.resources is installed. For STU3 and R4B,model imports will look like this:```pythonfrom fhir.resources.STU3.patient import Patient``````pythonfrom fhir.resources.R4B.patient import Patient```For R4 and R5, model imports will look like this:```pythonfrom fhir.resources.patient import Patient```### ExampleA detailed example is available here: [example.py](https://github.com/canvas-medical/fhirstarter/blob/main/fhirstarter/scripts/example.py).```pythonimport uvicornfrom fhir.resources.fhirtypes import Idfrom fhir.resources.patient import Patientfrom fhirstarter import FHIRProvider, FHIRStarter, InteractionContextfrom fhirstarter.exceptions import FHIRResourceNotFoundError# Create the appapp = FHIRStarter()# Create a providerprovider = FHIRProvider()# Register the patient read FHIR interaction with the provider@provider.read(Patient)async def patient_read(context: InteractionContext, id_: Id) -&gt; Patient:    # Get the patient from the database    patient = ...    if not patient:        raise FHIRResourceNotFoundError    return Patient(        **{            # Map patient from database to FHIR Patient structure        }    )# Add the provider to the appapp.add_providers(provider)if __name__ == &quot;__main__&quot;:    # Start the server    uvicorn.run(app)```### Custom search parametersCustom search parameters can be defined in a configuration file that can be passed to the app oncreation.```toml[search-parameters.Patient.nickname]type = &quot;string&quot;description = &quot;Nickname&quot;uri = &quot;https://hostname/nickname&quot;include-in-capability-statement = true```Adding a custom search parameter via configuration allows this name to be used as an argument whendefining a search-type interaction handler and also adds this search parameter to the APIdocumentation for the search endpoint.### Capability statementIt is possible to customize the capability statement by setting a capability statement modifier:```pythondef amend_capability_statement(    capability_statement: MutableMapping[str, Any], request: Request, response: Response) -&gt; MutableMapping[str, Any]:    capability_statement[&quot;publisher&quot;] = &quot;Canvas Medical&quot;    return capability_statementapp.set_capability_statement_modifier(amend_capability_statement)```### FastAPI dependency injectionFastAPI's dependency injection is exposed at various levels:* **application**: the `__init__` method on the FHIRStarter class* **provider**: the `__init__` method on the FHIRProvider class* **handler**: the `create`, `read`, `search_type`, or `update` decorator used to add a handler to a providerDependencies specified at the application level will be injected into all routes in the application.Dependencies specified at the provider level will be injected into all routes that are added tothe application from that specific provider.Dependencies specified at the handler level only apply to that specific FHIR interaction.</longdescription>
</pkgmetadata>