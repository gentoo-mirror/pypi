<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============================Django Saas Email Manager=============================.. image:: https://badge.fury.io/py/django-saas-email.svg    :target: https://badge.fury.io/py/django-saas-email.. image:: https://travis-ci.org/unicorn-supplies/django-saas-email.svg?branch=master    :target: https://travis-ci.org/unicorn-supplies/django-saas-email.. image:: https://codecov.io/gh/unicorn-supplies/django-saas-email/branch/master/graph/badge.svg    :target: https://codecov.io/gh/unicorn-supplies/django-saas-emailAn email manager for sending emails with templates, mail history and admin.Features--------* Use of `Mailhog &lt;https://github.com/mailhog/MailHog/&gt;`_ for local email testing.* Send emails via `django-anymail &lt;https://github.com/anymail/django-anymail&gt;`_ (using `Sendgrid &lt;https://sendgrid.com&gt;`__ as default).* Serving dynamic HTML E-Mail Templates, editable with `Tinymce &lt;https://github.com/aljosa/django-tinymce&gt;`_.* Use of the awesome `Transactional email templates &lt;https://github.com/mailgun/transactional-email-templates&gt;`_ from `Mailgun &lt;https://www.mailgun.com&gt;`_.Documentation-------------The full documentation is at https://django-saas-email.readthedocs.io.Quickstart----------**Installation**Installation with pip::    pip install django-saas-emailAdd it to your `INSTALLED_APPS`:.. code-block:: python    INSTALLED_APPS = (        ...        'django_saas_email.apps.DjangoSaasEmailConfig',        ...    )Add a template engine `TEMPLATES`:.. code-block:: python   TEMPLATES = [       ...       {           &quot;BACKEND&quot;: &quot;django.template.backends.django.DjangoTemplates&quot;,           &quot;APP_DIRS&quot;: True,           &quot;DIRS&quot;: [&quot;django_saas_email/templates/&quot;],           &quot;NAME&quot;: &quot;email&quot;,           &quot;OPTIONS&quot;: {&quot;string_if_invalid&quot;: &quot;{%s}&quot;},       }   ]**JSONField**We are using the Postgres JSONField as default. If you installed `psycopg2`, everything should work fine.If you are using a different database, you also need to install `jsonfield`::    pip install jsonfield**Adding the Sendgrid API Key to your settings**In settings.py::    SENDGRID_API_KEY=&lt;....&gt;Other optional settings::    DJANGO_SAAS_TEST_EMAIL_ADDRESS=youremailfortesting@example.org    DJANGO_SAAS_FOOTER=&quot;&quot;&quot;Follow &lt;a href=&quot;#&quot; style=&quot;font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; box-sizing: border-box; font-size: 12px; color: #999; text-decoration: underline; margin: 0;&quot;&gt;@yourcompany&lt;/a&gt; on Twitter&quot;&quot;&quot;**Sending emails**.. code-block:: python   from django_saas_email.utils import create_and_send_mail   context={     'first_name': 'John',     'last_name': 'Doe',   }   create_and_send_mail(     template_name=&quot;hello_world&quot;,     context=context,     to_address=&quot;john.doe@example.org&quot;   )This will create an email and send it with Sengrid.You should use http://premailer.dialect.ca or django-premailer to create Inline CSS in HTML**Background sending**This module sends emails asynchronously. To do that, it uses `celery`.You will need to run and configure `celery` to really send emails using thelibrary.The best source to do that is `First Steps with Celery &lt;http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html&gt;`_.But you may use the following simple guide if you want to make it fast:1. Create a `celery.py` file aside your `wsgi.py` file with the following content:.. code-block:: python   from __future__ import absolute_import, unicode_literals   import os   from celery import Celery   os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')   app = Celery(&lt;YOUR_APP_NAME&gt;)   app.config_from_object('django.conf:settings', namespace='CELERY')   app.autodiscover_tasks()Change `&lt;YOUR_APP_NAME&gt;` to the name of your app.2. Install `RabbitMQ &lt;https://www.rabbitmq.com/download.html&gt;`_.3. Run `celery`:.. code-block:: bash   celery -A &lt;YOUR_APP_NAME&gt; worker -B -l debugChange `&lt;YOUR_APP_NAME&gt;` to the name of your app.4. Now you might just send the email with no problem using `create_and_send_mail` function.Running Tests-------------Does the code actually work?::    source &lt;YOURVIRTUALENV&gt;/bin/activate    (myenv) $ pip install tox    (myenv) $ toxHistory-------0.1.0 (2017-07-24)++++++++++++++++++* First release on PyPI.</longdescription>
</pkgmetadata>