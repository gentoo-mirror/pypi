<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>AEDAT is a fast AEDAT 4 python reader, with a Rust underlying implementation.Run `pip install aedat` to install it.- [Example](#example)- [Process frames](#process-frames)    - [Pillow (PIL)](#pillow-pil)    - [OpenCV](#opencv)- [Detailed example](#detailed-example)- [Install from source](#install-from-source)    - [Linux](#linux)    - [macOS](#macos)    - [Windows](#windows)- [Contribute](#contribute)- [Publish](#publish)## ExampleThe `aedat` library provides a single class: `Decoder`. A decoder object is created by passing a file name to `Decoder`. The file name must be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).```pythonimport aedatdecoder = aedat.Decoder(&quot;/path/to/file.aedat&quot;)print(decoder.id_to_stream())for packet in decoder:    print(packet[&quot;stream_id&quot;], end=&quot;: &quot;)    if &quot;events&quot; in packet:        print(&quot;{} polarity events&quot;.format(len(packet[&quot;events&quot;])))    elif &quot;frame&quot; in packet:        print(&quot;{} x {} frame&quot;.format(packet[&quot;frame&quot;][&quot;width&quot;], packet[&quot;frame&quot;][&quot;height&quot;]))    elif &quot;imus&quot; in packet:        print(&quot;{} IMU samples&quot;.format(len(packet[&quot;imus&quot;])))    elif &quot;triggers&quot; in packet:        print(&quot;{} trigger events&quot;.format(len(packet[&quot;triggers&quot;])))```## Process frames### Pillow (PIL)```pyimport aedatimport PIL.Image # https://pypi.org/project/Pillow/index = 0for packet in decoder:    if &quot;frame&quot; in packet:        image = PIL.Image.fromarray(            packet[&quot;frame&quot;][&quot;pixels&quot;],            mode=packet[&quot;frame&quot;][&quot;format&quot;],        )        image.save(f&quot;{index}.png&quot;)        index += 1```### OpenCV```pyimport aedatimport cv2 # https://pypi.org/project/opencv-python/index = 0for packet in decoder:    if &quot;frame&quot; in packet:        image = packet[&quot;frame&quot;][&quot;pixels&quot;]        if packet[&quot;frame&quot;][&quot;format&quot;] == &quot;RGB&quot;:            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)        elif packet[&quot;frame&quot;][&quot;format&quot;] == &quot;RGBA&quot;:            image = cv2.cvtColor(image, cv2.COLOR_RGBA2BGRA)        cv2.imwrite(f&quot;{index}.png&quot;, image)        index += 1```## Detailed exampleThis is the same as the first example, with detailed comments:```pythonimport aedatdecoder = aedat.Decoder(&quot;/path/to/file.aedat&quot;)&quot;&quot;&quot;decoder is a packet iterator with an additional method id_to_streamid_to_stream returns a dictionary with the following structure:{    &lt;int&gt;: {        &quot;type&quot;: &lt;str&gt;,    }}type is one of &quot;events&quot;, &quot;frame&quot;, &quot;imus&quot;, &quot;triggers&quot;if type is &quot;events&quot; or &quot;frame&quot;, its parent dictionary has the following structure:{    &quot;type&quot;: &lt;str&gt;,    &quot;width&quot;: &lt;int&gt;,    &quot;height&quot;: &lt;int&gt;,}&quot;&quot;&quot;print(decoder.id_to_stream())for packet in decoder:    &quot;&quot;&quot;    packet is a dictionary with the following structure:    {        &quot;stream_id&quot;: &lt;int&gt;,    }    packet also has exactly one of the following fields:        &quot;events&quot;, &quot;frame&quot;, &quot;imus&quot;, &quot;triggers&quot;    &quot;&quot;&quot;    print(packet[&quot;stream_id&quot;], end=&quot;: &quot;)    if &quot;events&quot; in packet:        &quot;&quot;&quot;        packet[&quot;events&quot;] is a structured numpy array with the following dtype:            [                (&quot;t&quot;, &quot;&lt;u8&quot;),                (&quot;x&quot;, &quot;&lt;u2&quot;),                (&quot;y&quot;, &quot;&lt;u2&quot;),                (&quot;on&quot;, &quot;?&quot;),            ]        &quot;&quot;&quot;        print(&quot;{} polarity events&quot;.format(len(packet[&quot;events&quot;])))    elif &quot;frame&quot; in packet:        &quot;&quot;&quot;        packet[&quot;frame&quot;] is a dictionary with the following structure:            {                &quot;t&quot;: &lt;int&gt;,                &quot;begin_t&quot;: &lt;int&gt;,                &quot;end_t&quot;: &lt;int&gt;,                &quot;exposure_begin_t&quot;: &lt;int&gt;,                &quot;exposure_end_t&quot;: &lt;int&gt;,                &quot;format&quot;: &lt;str&gt;,                &quot;width&quot;: &lt;int&gt;,                &quot;height&quot;: &lt;int&gt;,                &quot;offset_x&quot;: &lt;int&gt;,                &quot;offset_y&quot;: &lt;int&gt;,                &quot;pixels&quot;: &lt;numpy.array(shape=(height, width), dtype=uint8)&gt;,            }        format is one of &quot;L&quot;, &quot;RGB&quot;, &quot;RGBA&quot;        &quot;&quot;&quot;        print(&quot;{} x {} frame&quot;.format(packet[&quot;frame&quot;][&quot;width&quot;], packet[&quot;frame&quot;][&quot;height&quot;]))    elif &quot;imus&quot; in packet:        &quot;&quot;&quot;        packet[&quot;imus&quot;] is a structured numpy array with the following dtype:            [                (&quot;t&quot;, &quot;&lt;u8&quot;),                (&quot;temperature&quot;, &quot;&lt;f4&quot;),                (&quot;accelerometer_x&quot;, &quot;&lt;f4&quot;),                (&quot;accelerometer_y&quot;, &quot;&lt;f4&quot;),                (&quot;accelerometer_z&quot;, &quot;&lt;f4&quot;),                (&quot;gyroscope_x&quot;, &quot;&lt;f4&quot;),                (&quot;gyroscope_y&quot;, &quot;&lt;f4&quot;),                (&quot;gyroscope_z&quot;, &quot;&lt;f4&quot;),                (&quot;magnetometer_x&quot;, &quot;&lt;f4&quot;),                (&quot;magnetometer_y&quot;, &quot;&lt;f4&quot;),                (&quot;magnetometer_z&quot;, &quot;&lt;f4&quot;),            ]        &quot;&quot;&quot;        print(&quot;{} IMU samples&quot;.format(len(packet[&quot;imus&quot;])))    elif &quot;triggers&quot; in packet:        &quot;&quot;&quot;        packet[&quot;triggers&quot;] is a structured numpy array with the following dtype:            [                (&quot;t&quot;, &quot;&lt;u8&quot;),                (&quot;source&quot;, &quot;u1&quot;),            ]        the source value has the following meaning:            0: timestamp reset            1: external signal rising edge            2: external signal falling edge            3: external signal pulse            4: external generator rising edge            5: external generator falling edge            6: frame begin            7: frame end            8: exposure begin            9: exposure end        &quot;&quot;&quot;        print(&quot;{} trigger events&quot;.format(len(packet[&quot;triggers&quot;])))```Because the lifetime of the file handle is managed by Rust, decoder objects are not compatible with the [with](https://docs.python.org/3/reference/compound_stmts.html#with) statement. To ensure garbage collection, point the decoder variable to something else, for example `None`, when you are done using it:```pyimport aedatdecoder = aedat.Decoder(&quot;/path/to/file.aedat&quot;)# do something with decoderdecoder = None```## Install from sourceLocal build (first run).```shpython3 -m venv .venvsource .venv/bin/activatepip install --upgrade pippip install maturin numpymaturin develop  # or maturin develop --release to build with optimizations```Local build (subsequent runs).```shsource .venv/bin/activatematurin develop  # or maturin develop --release to build with optimizations```After changing any of the files in _framebuffers_, one must run:```shflatc --rust -o src/ flatbuffers/*.fbs```To format the code, run:```shcargo fmt```# Publish1. Bump the version number in _Cargo.toml_ and _pyproject.toml_.2. Create a new release on GitHub.</longdescription>
</pkgmetadata>