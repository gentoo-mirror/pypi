<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a id=&quot;mypy-boto3-lambda&quot;&gt;&lt;/a&gt;# mypy-boto3-lambda[![PyPI - mypy-boto3-lambda](https://img.shields.io/pypi/v/mypy-boto3-lambda.svg?color=blue)](https://pypi.org/project/mypy-boto3-lambda)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-lambda.svg?color=blue)](https://pypi.org/project/mypy-boto3-lambda)[![Docs](https://img.shields.io/readthedocs/boto3-stubs.svg?color=blue)](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_lambda/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/mypy-boto3-lambda?color=blue)](https://pypistats.org/packages/mypy-boto3-lambda)![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)Type annotations for[boto3.Lambda 1.26.157](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda)service compatible with [VSCode](https://code.visualstudio.com/),[PyCharm](https://www.jetbrains.com/pycharm/),[Emacs](https://www.gnu.org/software/emacs/),[Sublime Text](https://www.sublimetext.com/),[mypy](https://github.com/python/mypy),[pyright](https://github.com/microsoft/pyright) and other tools.Generated by[mypy-boto3-builder 7.14.5](https://github.com/youtype/mypy_boto3_builder).More information can be found on[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in[mypy-boto3-lambda docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_lambda/).See how it helps to find and fix potential bugs:![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)- [mypy-boto3-lambda](#mypy-boto3-lambda)  - [How to install](#how-to-install)    - [VSCode extension](#vscode-extension)    - [From PyPI with pip](#from-pypi-with-pip)    - [From conda-forge](#from-conda-forge)  - [How to uninstall](#how-to-uninstall)  - [Usage](#usage)    - [VSCode](#vscode)    - [PyCharm](#pycharm)    - [Emacs](#emacs)    - [Sublime Text](#sublime-text)    - [Other IDEs](#other-ides)    - [mypy](#mypy)    - [pyright](#pyright)  - [Explicit type annotations](#explicit-type-annotations)    - [Client annotations](#client-annotations)    - [Paginators annotations](#paginators-annotations)    - [Waiters annotations](#waiters-annotations)    - [Literals](#literals)    - [Typed dictionaries](#typed-dictionaries)  - [How it works](#how-it-works)  - [What's new](#what's-new)    - [Implemented features](#implemented-features)    - [Latest changes](#latest-changes)  - [Versioning](#versioning)  - [Thank you](#thank-you)  - [Documentation](#documentation)  - [Support and contributing](#support-and-contributing)&lt;a id=&quot;how-to-install&quot;&gt;&lt;/a&gt;## How to install&lt;a id=&quot;vscode-extension&quot;&gt;&lt;/a&gt;### VSCode extensionAdd[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)extension to your VSCode and run `AWS boto3: Quick Start` command.Click `Modify` and select `boto3 common` and `Lambda`.&lt;a id=&quot;from-pypi-with-pip&quot;&gt;&lt;/a&gt;### From PyPI with pipInstall `boto3-stubs` for `Lambda` service.```bash# install with boto3 type annotationspython -m pip install 'boto3-stubs[lambda]'# Lite version does not provide session.client/resource overloads# it is more RAM-friendly, but requires explicit type annotationspython -m pip install 'boto3-stubs-lite[lambda]'# standalone installationpython -m pip install mypy-boto3-lambda```&lt;a id=&quot;from-conda-forge&quot;&gt;&lt;/a&gt;### From conda-forgeInstalling `mypy-boto3-lambda` from the `conda-forge` channel can be achievedby adding `conda-forge` to your channels with:```bashconda config --add channels conda-forgeconda config --set channel_priority strict```Once the `conda-forge` channel has been enabled, `mypy-boto3-lambda` can beinstalled with:```bashconda install mypy-boto3-lambda```It is possible to list all of the versions of `mypy-boto3-lambda` available onyour platform with:```bashconda search mypy-boto3-lambda --channel conda-forge```&lt;a id=&quot;how-to-uninstall&quot;&gt;&lt;/a&gt;## How to uninstall```bashpython -m pip uninstall -y mypy-boto3-lambda```&lt;a id=&quot;usage&quot;&gt;&lt;/a&gt;## Usage&lt;a id=&quot;vscode&quot;&gt;&lt;/a&gt;### VSCode- Install  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)- Install  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)- Set `Pylance` as your Python Language Server- Install `boto3-stubs[lambda]` in your environment:```bashpython -m pip install 'boto3-stubs[lambda]'```Both type checking and code completion should now work. No explicit typeannotations required, write your `boto3` code as usual.&lt;a id=&quot;pycharm&quot;&gt;&lt;/a&gt;### PyCharmInstall `boto3-stubs-lite[lambda]` in your environment:```bashpython -m pip install 'boto3-stubs-lite[lambda]'````Both type checking and code completion should now work. Explicit typeannotations **are required**.Use `boto3-stubs` package instead for implicit type discovery.&lt;a id=&quot;emacs&quot;&gt;&lt;/a&gt;### Emacs- Install `boto3-stubs` with services you use in your environment:```bashpython -m pip install 'boto3-stubs[lambda]'```- Install [use-package](https://github.com/jwiegley/use-package),  [lsp](https://github.com/emacs-lsp/lsp-mode/),  [company](https://github.com/company-mode/company-mode) and  [flycheck](https://github.com/flycheck/flycheck) packages- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package```elisp(use-package lsp-pyright  :ensure t  :hook (python-mode . (lambda ()                          (require 'lsp-pyright)                          (lsp)))  ; or lsp-deferred  :init (when (executable-find &quot;python3&quot;)          (setq lsp-pyright-python-executable-cmd &quot;python3&quot;))  )```- Make sure emacs uses the environment where you have installed `boto3-stubs`Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;sublime-text&quot;&gt;&lt;/a&gt;### Sublime Text- Install `boto3-stubs[lambda]` with services you use in your environment:```bashpython -m pip install 'boto3-stubs[lambda]'```- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) packageType checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;other-ides&quot;&gt;&lt;/a&gt;### Other IDEsNot tested, but as long as your IDE supports `mypy` or `pyright`, everythingshould work.&lt;a id=&quot;mypy&quot;&gt;&lt;/a&gt;### mypy- Install `mypy`: `python -m pip install mypy`- Install `boto3-stubs[lambda]` in your environment:```bashpython -m pip install 'boto3-stubs[lambda]'````Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;pyright&quot;&gt;&lt;/a&gt;### pyright- Install `pyright`: `npm i -g pyright`- Install `boto3-stubs[lambda]` in your environment:```bashpython -m pip install 'boto3-stubs[lambda]'```Optionally, you can install `boto3-stubs` to `typings` folder.Type checking should now work. No explicit type annotations required, writeyour `boto3` code as usual.&lt;a id=&quot;explicit-type-annotations&quot;&gt;&lt;/a&gt;## Explicit type annotations&lt;a id=&quot;client-annotations&quot;&gt;&lt;/a&gt;### Client annotations`LambdaClient` provides annotations for `boto3.client(&quot;lambda&quot;)`.```pythonfrom boto3.session import Sessionfrom mypy_boto3_lambda import LambdaClientclient: LambdaClient = Session().client(&quot;lambda&quot;)# now client usage is checked by mypy and IDE should provide code completion```&lt;a id=&quot;paginators-annotations&quot;&gt;&lt;/a&gt;### Paginators annotations`mypy_boto3_lambda.paginator` module contains type annotations for allpaginators.```pythonfrom boto3.session import Sessionfrom mypy_boto3_lambda import LambdaClientfrom mypy_boto3_lambda.paginator import (    ListAliasesPaginator,    ListCodeSigningConfigsPaginator,    ListEventSourceMappingsPaginator,    ListFunctionEventInvokeConfigsPaginator,    ListFunctionUrlConfigsPaginator,    ListFunctionsPaginator,    ListFunctionsByCodeSigningConfigPaginator,    ListLayerVersionsPaginator,    ListLayersPaginator,    ListProvisionedConcurrencyConfigsPaginator,    ListVersionsByFunctionPaginator,)client: LambdaClient = Session().client(&quot;lambda&quot;)# Explicit type annotations are optional here# Types should be correctly discovered by mypy and IDEslist_aliases_paginator: ListAliasesPaginator = client.get_paginator(&quot;list_aliases&quot;)list_code_signing_configs_paginator: ListCodeSigningConfigsPaginator = client.get_paginator(    &quot;list_code_signing_configs&quot;)list_event_source_mappings_paginator: ListEventSourceMappingsPaginator = client.get_paginator(    &quot;list_event_source_mappings&quot;)list_function_event_invoke_configs_paginator: ListFunctionEventInvokeConfigsPaginator = (    client.get_paginator(&quot;list_function_event_invoke_configs&quot;))list_function_url_configs_paginator: ListFunctionUrlConfigsPaginator = client.get_paginator(    &quot;list_function_url_configs&quot;)list_functions_paginator: ListFunctionsPaginator = client.get_paginator(&quot;list_functions&quot;)list_functions_by_code_signing_config_paginator: ListFunctionsByCodeSigningConfigPaginator = (    client.get_paginator(&quot;list_functions_by_code_signing_config&quot;))list_layer_versions_paginator: ListLayerVersionsPaginator = client.get_paginator(    &quot;list_layer_versions&quot;)list_layers_paginator: ListLayersPaginator = client.get_paginator(&quot;list_layers&quot;)list_provisioned_concurrency_configs_paginator: ListProvisionedConcurrencyConfigsPaginator = (    client.get_paginator(&quot;list_provisioned_concurrency_configs&quot;))list_versions_by_function_paginator: ListVersionsByFunctionPaginator = client.get_paginator(    &quot;list_versions_by_function&quot;)```&lt;a id=&quot;waiters-annotations&quot;&gt;&lt;/a&gt;### Waiters annotations`mypy_boto3_lambda.waiter` module contains type annotations for all waiters.```pythonfrom boto3.session import Sessionfrom mypy_boto3_lambda import LambdaClientfrom mypy_boto3_lambda.waiter import (    FunctionActiveWaiter,    FunctionActiveV2Waiter,    FunctionExistsWaiter,    FunctionUpdatedWaiter,    FunctionUpdatedV2Waiter,    PublishedVersionActiveWaiter,)client: LambdaClient = Session().client(&quot;lambda&quot;)# Explicit type annotations are optional here# Types should be correctly discovered by mypy and IDEsfunction_active_waiter: FunctionActiveWaiter = client.get_waiter(&quot;function_active&quot;)function_active_v2_waiter: FunctionActiveV2Waiter = client.get_waiter(&quot;function_active_v2&quot;)function_exists_waiter: FunctionExistsWaiter = client.get_waiter(&quot;function_exists&quot;)function_updated_waiter: FunctionUpdatedWaiter = client.get_waiter(&quot;function_updated&quot;)function_updated_v2_waiter: FunctionUpdatedV2Waiter = client.get_waiter(&quot;function_updated_v2&quot;)published_version_active_waiter: PublishedVersionActiveWaiter = client.get_waiter(    &quot;published_version_active&quot;)```&lt;a id=&quot;literals&quot;&gt;&lt;/a&gt;### Literals`mypy_boto3_lambda.literals` module contains literals extracted from shapesthat can be used in user code for type checking.```pythonfrom mypy_boto3_lambda.literals import (    ArchitectureType,    CodeSigningPolicyType,    EndPointTypeType,    EventSourcePositionType,    FullDocumentType,    FunctionActiveV2WaiterName,    FunctionActiveWaiterName,    FunctionExistsWaiterName,    FunctionResponseTypeType,    FunctionUpdatedV2WaiterName,    FunctionUpdatedWaiterName,    FunctionUrlAuthTypeType,    FunctionVersionType,    InvocationTypeType,    InvokeModeType,    LastUpdateStatusReasonCodeType,    LastUpdateStatusType,    ListAliasesPaginatorName,    ListCodeSigningConfigsPaginatorName,    ListEventSourceMappingsPaginatorName,    ListFunctionEventInvokeConfigsPaginatorName,    ListFunctionUrlConfigsPaginatorName,    ListFunctionsByCodeSigningConfigPaginatorName,    ListFunctionsPaginatorName,    ListLayerVersionsPaginatorName,    ListLayersPaginatorName,    ListProvisionedConcurrencyConfigsPaginatorName,    ListVersionsByFunctionPaginatorName,    LogTypeType,    PackageTypeType,    ProvisionedConcurrencyStatusEnumType,    PublishedVersionActiveWaiterName,    ResponseStreamingInvocationTypeType,    RuntimeType,    SnapStartApplyOnType,    SnapStartOptimizationStatusType,    SourceAccessTypeType,    StateReasonCodeType,    StateType,    TracingModeType,    UpdateRuntimeOnType,    LambdaServiceName,    ServiceName,    ResourceServiceName,    PaginatorName,    WaiterName,    RegionName,)def check_value(value: ArchitectureType) -&gt; bool:    ...```&lt;a id=&quot;typed-dictionaries&quot;&gt;&lt;/a&gt;### Typed dictionaries`mypy_boto3_lambda.type_defs` module contains structures and shapes assembledto typed dictionaries for additional type checking.```pythonfrom mypy_boto3_lambda.type_defs import (    AccountLimitTypeDef,    AccountUsageTypeDef,    AddLayerVersionPermissionRequestRequestTypeDef,    ResponseMetadataTypeDef,    AddPermissionRequestRequestTypeDef,    AliasRoutingConfigurationTypeDef,    AllowedPublishersTypeDef,    AmazonManagedKafkaEventSourceConfigTypeDef,    CodeSigningPoliciesTypeDef,    ConcurrencyTypeDef,    CorsTypeDef,    DocumentDBEventSourceConfigTypeDef,    ScalingConfigTypeDef,    SelfManagedEventSourceTypeDef,    SelfManagedKafkaEventSourceConfigTypeDef,    SourceAccessConfigurationTypeDef,    DeadLetterConfigTypeDef,    EnvironmentTypeDef,    EphemeralStorageTypeDef,    FileSystemConfigTypeDef,    FunctionCodeTypeDef,    ImageConfigTypeDef,    SnapStartTypeDef,    TracingConfigTypeDef,    VpcConfigTypeDef,    DeleteAliasRequestRequestTypeDef,    DeleteCodeSigningConfigRequestRequestTypeDef,    DeleteEventSourceMappingRequestRequestTypeDef,    DeleteFunctionCodeSigningConfigRequestRequestTypeDef,    DeleteFunctionConcurrencyRequestRequestTypeDef,    DeleteFunctionEventInvokeConfigRequestRequestTypeDef,    DeleteFunctionRequestRequestTypeDef,    DeleteFunctionUrlConfigRequestRequestTypeDef,    DeleteLayerVersionRequestRequestTypeDef,    DeleteProvisionedConcurrencyConfigRequestRequestTypeDef,    OnFailureTypeDef,    OnSuccessTypeDef,    EnvironmentErrorTypeDef,    FilterTypeDef,    FunctionCodeLocationTypeDef,    LayerTypeDef,    SnapStartResponseTypeDef,    TracingConfigResponseTypeDef,    VpcConfigResponseTypeDef,    GetAliasRequestRequestTypeDef,    GetCodeSigningConfigRequestRequestTypeDef,    GetEventSourceMappingRequestRequestTypeDef,    GetFunctionCodeSigningConfigRequestRequestTypeDef,    GetFunctionConcurrencyRequestRequestTypeDef,    WaiterConfigTypeDef,    GetFunctionConfigurationRequestRequestTypeDef,    GetFunctionEventInvokeConfigRequestRequestTypeDef,    GetFunctionRequestRequestTypeDef,    GetFunctionUrlConfigRequestRequestTypeDef,    GetLayerVersionByArnRequestRequestTypeDef,    GetLayerVersionPolicyRequestRequestTypeDef,    GetLayerVersionRequestRequestTypeDef,    LayerVersionContentOutputTypeDef,    GetPolicyRequestRequestTypeDef,    GetProvisionedConcurrencyConfigRequestRequestTypeDef,    GetRuntimeManagementConfigRequestRequestTypeDef,    ImageConfigErrorTypeDef,    InvocationRequestRequestTypeDef,    InvokeAsyncRequestRequestTypeDef,    InvokeResponseStreamUpdateTypeDef,    InvokeWithResponseStreamCompleteEventTypeDef,    InvokeWithResponseStreamRequestRequestTypeDef,    LayerVersionContentInputTypeDef,    LayerVersionsListItemTypeDef,    PaginatorConfigTypeDef,    ListAliasesRequestRequestTypeDef,    ListCodeSigningConfigsRequestRequestTypeDef,    ListEventSourceMappingsRequestRequestTypeDef,    ListFunctionEventInvokeConfigsRequestRequestTypeDef,    ListFunctionUrlConfigsRequestRequestTypeDef,    ListFunctionsByCodeSigningConfigRequestRequestTypeDef,    ListFunctionsRequestRequestTypeDef,    ListLayerVersionsRequestRequestTypeDef,    ListLayersRequestRequestTypeDef,    ListProvisionedConcurrencyConfigsRequestRequestTypeDef,    ProvisionedConcurrencyConfigListItemTypeDef,    ListTagsRequestRequestTypeDef,    ListVersionsByFunctionRequestRequestTypeDef,    PublishVersionRequestRequestTypeDef,    PutFunctionCodeSigningConfigRequestRequestTypeDef,    PutFunctionConcurrencyRequestRequestTypeDef,    PutProvisionedConcurrencyConfigRequestRequestTypeDef,    PutRuntimeManagementConfigRequestRequestTypeDef,    RemoveLayerVersionPermissionRequestRequestTypeDef,    RemovePermissionRequestRequestTypeDef,    RuntimeVersionErrorTypeDef,    TagResourceRequestRequestTypeDef,    UntagResourceRequestRequestTypeDef,    UpdateFunctionCodeRequestRequestTypeDef,    AddLayerVersionPermissionResponseTypeDef,    AddPermissionResponseTypeDef,    ConcurrencyResponseMetadataTypeDef,    EmptyResponseMetadataTypeDef,    GetAccountSettingsResponseTypeDef,    GetFunctionCodeSigningConfigResponseTypeDef,    GetFunctionConcurrencyResponseTypeDef,    GetLayerVersionPolicyResponseTypeDef,    GetPolicyResponseTypeDef,    GetProvisionedConcurrencyConfigResponseTypeDef,    GetRuntimeManagementConfigResponseTypeDef,    InvocationResponseTypeDef,    InvokeAsyncResponseTypeDef,    ListFunctionsByCodeSigningConfigResponseTypeDef,    ListTagsResponseTypeDef,    PutFunctionCodeSigningConfigResponseTypeDef,    PutProvisionedConcurrencyConfigResponseTypeDef,    PutRuntimeManagementConfigResponseTypeDef,    AliasConfigurationResponseMetadataTypeDef,    AliasConfigurationTypeDef,    CreateAliasRequestRequestTypeDef,    UpdateAliasRequestRequestTypeDef,    CodeSigningConfigTypeDef,    CreateCodeSigningConfigRequestRequestTypeDef,    UpdateCodeSigningConfigRequestRequestTypeDef,    CreateFunctionUrlConfigRequestRequestTypeDef,    CreateFunctionUrlConfigResponseTypeDef,    FunctionUrlConfigTypeDef,    GetFunctionUrlConfigResponseTypeDef,    UpdateFunctionUrlConfigRequestRequestTypeDef,    UpdateFunctionUrlConfigResponseTypeDef,    CreateFunctionRequestRequestTypeDef,    UpdateFunctionConfigurationRequestRequestTypeDef,    DestinationConfigTypeDef,    EnvironmentResponseTypeDef,    FilterCriteriaTypeDef,    GetFunctionConfigurationRequestFunctionActiveWaitTypeDef,    GetFunctionConfigurationRequestFunctionUpdatedWaitTypeDef,    GetFunctionConfigurationRequestPublishedVersionActiveWaitTypeDef,    GetFunctionRequestFunctionActiveV2WaitTypeDef,    GetFunctionRequestFunctionExistsWaitTypeDef,    GetFunctionRequestFunctionUpdatedV2WaitTypeDef,    GetLayerVersionResponseTypeDef,    PublishLayerVersionResponseTypeDef,    ImageConfigResponseTypeDef,    InvokeWithResponseStreamResponseEventTypeDef,    PublishLayerVersionRequestRequestTypeDef,    LayersListItemTypeDef,    ListLayerVersionsResponseTypeDef,    ListAliasesRequestListAliasesPaginateTypeDef,    ListCodeSigningConfigsRequestListCodeSigningConfigsPaginateTypeDef,    ListEventSourceMappingsRequestListEventSourceMappingsPaginateTypeDef,    ListFunctionEventInvokeConfigsRequestListFunctionEventInvokeConfigsPaginateTypeDef,    ListFunctionUrlConfigsRequestListFunctionUrlConfigsPaginateTypeDef,    ListFunctionsByCodeSigningConfigRequestListFunctionsByCodeSigningConfigPaginateTypeDef,    ListFunctionsRequestListFunctionsPaginateTypeDef,    ListLayerVersionsRequestListLayerVersionsPaginateTypeDef,    ListLayersRequestListLayersPaginateTypeDef,    ListProvisionedConcurrencyConfigsRequestListProvisionedConcurrencyConfigsPaginateTypeDef,    ListVersionsByFunctionRequestListVersionsByFunctionPaginateTypeDef,    ListProvisionedConcurrencyConfigsResponseTypeDef,    RuntimeVersionConfigTypeDef,    ListAliasesResponseTypeDef,    CreateCodeSigningConfigResponseTypeDef,    GetCodeSigningConfigResponseTypeDef,    ListCodeSigningConfigsResponseTypeDef,    UpdateCodeSigningConfigResponseTypeDef,    ListFunctionUrlConfigsResponseTypeDef,    FunctionEventInvokeConfigResponseMetadataTypeDef,    FunctionEventInvokeConfigTypeDef,    PutFunctionEventInvokeConfigRequestRequestTypeDef,    UpdateFunctionEventInvokeConfigRequestRequestTypeDef,    CreateEventSourceMappingRequestRequestTypeDef,    EventSourceMappingConfigurationResponseMetadataTypeDef,    EventSourceMappingConfigurationTypeDef,    UpdateEventSourceMappingRequestRequestTypeDef,    InvokeWithResponseStreamResponseTypeDef,    ListLayersResponseTypeDef,    FunctionConfigurationResponseMetadataTypeDef,    FunctionConfigurationTypeDef,    ListFunctionEventInvokeConfigsResponseTypeDef,    ListEventSourceMappingsResponseTypeDef,    GetFunctionResponseTypeDef,    ListFunctionsResponseTypeDef,    ListVersionsByFunctionResponseTypeDef,)def get_structure() -&gt; AccountLimitTypeDef:    return {...}```&lt;a id=&quot;how-it-works&quot;&gt;&lt;/a&gt;## How it worksFully automated[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefullygenerates type annotations for each service, patiently waiting for `boto3`updates. It delivers drop-in type annotations for you and makes sure that:- All available `boto3` services are covered.- Each public class and method of every `boto3` service gets valid type  annotations extracted from `botocore` schemas.- Type annotations include up-to-date documentation.- Link to documentation is provided for every method.- Code is processed by [black](https://github.com/psf/black) and  [isort](https://github.com/PyCQA/isort) for readability.&lt;a id=&quot;what's-new&quot;&gt;&lt;/a&gt;## What's new&lt;a id=&quot;implemented-features&quot;&gt;&lt;/a&gt;### Implemented features- Fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`  libraries- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`  compatibility- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type  annotations for each service- Generated `TypeDefs` for each service- Generated `Literals` for each service- Auto discovery of types for `boto3.client` and `boto3.resource` calls- Auto discovery of types for `session.client` and `session.resource` calls- Auto discovery of types for `client.get_waiter` and `client.get_paginator`  calls- Auto discovery of types for `ServiceResource` and `Resource` collections- Auto discovery of types for `aiobotocore.Session.create_client` calls&lt;a id=&quot;latest-changes&quot;&gt;&lt;/a&gt;### Latest changesBuilder changelog can be found in[Releases](https://github.com/youtype/mypy_boto3_builder/releases).&lt;a id=&quot;versioning&quot;&gt;&lt;/a&gt;## Versioning`mypy-boto3-lambda` version is the same as related `boto3` version and follows[PEP 440](https://www.python.org/dev/peps/pep-0440/) format.&lt;a id=&quot;thank-you&quot;&gt;&lt;/a&gt;## Thank you- [Allie Fitter](https://github.com/alliefitter) for  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),  this package is based on top of his work- [black](https://github.com/psf/black) developers for an awesome formatting  tool- [Timothy Edmund Crosley](https://github.com/timothycrosley) for  [isort](https://github.com/PyCQA/isort) and how flexible it is- [mypy](https://github.com/python/mypy) developers for doing all dirty work  for us- [pyright](https://github.com/microsoft/pyright) team for the new era of typed  Python&lt;a id=&quot;documentation&quot;&gt;&lt;/a&gt;## DocumentationAll services type annotations can be found in[boto3 docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_lambda/)&lt;a id=&quot;support-and-contributing&quot;&gt;&lt;/a&gt;## Support and contributingThis package is auto-generated. Please reports any bugs or request new featuresin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)repository.</longdescription>
</pkgmetadata>