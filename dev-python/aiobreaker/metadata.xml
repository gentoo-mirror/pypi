<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>aiobreaker==========aiobreaker is a Python implementation of the Circuit Breaker pattern,described in Michael T. Nygard's book `Release It!`_.Circuit breakers exist to allow one subsystem to fail without destroyingthe entire system. This is done by wrapping dangerous operations(typically integration points) with a component that can circumventcalls when the system is not healthy.This project is a fork of pybreaker_ by Daniel Fernandes Martins thatreplaces tornado with native asyncio, originally so I could practicepackaging and learn about that shiny new ``typing`` package... _`Release It!`: https://pragprog.com/titles/mnee2/release-it-second-edition/.. _pybreaker: https://github.com/danielfm/pybreakerFeatures--------- Configurable list of excluded exceptions (e.g. business exceptions)- Configurable failure threshold and reset timeout- Support for several event listeners per circuit breaker- Can guard generator functions- Functions and properties for easy monitoring and management- ``asyncio`` support- Optional redis backing- Synchronous and asynchronous event listenersRequirements------------All you need is ``python 3.6`` or higher.Installation------------To install, simply download from pypi:.. code:: bash    pip install aiobreakerUsage-----The first step is to create an instance of ``CircuitBreaker`` for eachintegration point you want to protect against... code:: python    from aiobreaker import CircuitBreaker    # Used in database integration points    db_breaker = CircuitBreaker(fail_max=5, reset_timeout=timedelta(seconds=60))    @db_breaker    async def outside_integration():        &quot;&quot;&quot;Hits the api&quot;&quot;&quot;        ...At that point, go ahead and get familiar with the documentation.</longdescription>
</pkgmetadata>