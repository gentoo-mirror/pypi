<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Tests](https://github.com/kellyjonbrazil/jello/workflows/Tests/badge.svg?branch=master)](https://github.com/kellyjonbrazil/jello/actions)[![Pypi](https://img.shields.io/pypi/v/jello.svg)](https://pypi.org/project/jello/)&gt;Built on `jello`:&gt;- [Jello Explorer](https://github.com/kellyjonbrazil/jellex) (aka `jellex`) interactive TUI&gt;- `jello` [web demo](https://jello-web.onrender.com)# jelloFilter JSON and JSON Lines data with Python syntax`jello` is similar to `jq` in that it processes JSON and JSON Lines data except `jello` uses standard python dict and list syntax.JSON or JSON Lines can be piped into `jello` via STDIN or can be loaded from a JSON file or JSON Lines files (JSON Lines are automatically slurped into a list of dictionaries). Once loaded, the data is available as a python list or dictionary object named '`_`'. Processed data can be output as JSON, JSON Lines, bash array lines, or a grep-able schema.For more information on the motivations for this project, see my [blog post](https://blog.kellybrazil.com/2020/03/25/jello-the-jq-alternative-for-pythonistas/).## InstallYou can install `jello` via `pip`, via OS Package Repository, MSI installer for Windows, or by downloading the correct binary for your architecture and running it anywhere on your filesystem.### Pip (macOS, linux, unix, Windows)For the most up-to-date version and the most cross-platform option, use `pip` or `pip3` to download and install `jello` directly from [PyPi](https://pypi.org/project/jello/):[![Pypi](https://img.shields.io/pypi/v/jello.svg)](https://pypi.org/project/jello/)```bashpip3 install jello```### Packages and Binaries| OS                    | Command                  ||-----------------------|--------------------------|| Debian/Ubuntu linux   | `apt-get install jello`  || Fedora linux          | `dnf install jello`      || Arch linux            | `pacman -S jello`        || macOS                 | `brew install jello`     |&gt; For more OS packages, see https://repology.org/project/jello/versions.See [Releases](https://github.com/kellyjonbrazil/jello/releases) on Github for MSI packages and binaries.### Usage```cat data.json | jello [OPTIONS] [QUERY | -q &lt;query_file&gt;]jello [OPTIONS] [QUERY | -q &lt;query_file&gt;] [-f &lt;input_files&gt;]````QUERY` is optional and can be most any valid python code. Alternatively, aquery file can be specified with `-q` to load the query from a file. Within the query, `_` is the sanitized JSON from STDIN presented as a python dict or list of dicts. If `QUERY` is omitted then the original JSON input will simply be pretty printed. You can use dot notation or traditional python bracket notation to access key names.&gt; Note: Reserved key names that cannot be accessed using dot notation can be accessed via standard python dictionary notation. (e.g. `_.foo[&quot;get&quot;]` instead of `_.foo.get`)A simple query:```bashcat data.json | jello _.foo```or```bashjello _.foo -f data.json```or```bashjello '_[&quot;foo&quot;]' -f data.json```#### Options- `-c` compact print JSON output instead of pretty printing- `-C` force color output even when using pipes (overrides `-m` and the `NO_COLOR` env variable)- `-e` empty data (don't process data from STDIN or file)- `-f` load input data from JSON file or JSON Lines files (must be the final option, if used)- `-i` initialize environment with a custom config file- `-l` lines output (suitable for bash array assignment)- `-m` monochrome output- `-n` print selected `null` values- `-q` load query from a file- `-r` raw output of selected strings (no quotes)- `-s` print the JSON schema in grep-able format- `-t` print type annotations in schema view- `-h` help- `-v` version info#### Simple Examples`jello` simply pretty prints the JSON if there are no options  or query passed:```bashecho '{&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:[1,2,3]}' | jello{  &quot;foo&quot;: &quot;bar&quot;,  &quot;baz&quot;: [    1,    2,    3  ]}```If you prefer compact output, use the `-c` option:```bashecho '{&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:[1,2,3]}' | jello -c{&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:[1,2,3]}```Use the `-l` option to convert lists/arrays into lines:```bashecho '{&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:[1,2,3]}' | jello -l _.baz123```The `-l` option also allows you to create [JSON Lines](https://jsonlines.org/):```bashecho '[{&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:[1,2,3]},{&quot;fiz&quot;:&quot;boo&quot;,&quot;buz&quot;:[4,5,6]}]' | jello -l{&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:[1,2,3]}{&quot;fiz&quot;:&quot;boo&quot;,&quot;buz&quot;:[4,5,6]}```You can print a grep-able schema by using the `-s` option:```bashecho '{&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:[1,2,3]}' | jello -s_ = {};_.foo = &quot;bar&quot;;_.baz = [];_.baz[0] = 1;_.baz[1] = 2;_.baz[2] = 3;```#### Assigning Results to a Bash ArrayUse the `-l` option to print JSON array output in a manner suitable to be assigned to a bash array. The `-r` option can be used to remove quotation marks around strings. If you want `null` values to be printed as `null`, use the `-n` option, otherwise they are printed as blank lines.Bash variable:```variable=($(cat data.json | jello -rl _.foo))```Bash array variable (Bash 4+):```mapfile -t variable &lt; &lt;(cat data.json | jello -rl _.foo)```Bash array variable (older versions of Bash):```variable=()while read -r value; do    variable+=(&quot;$value&quot;)done &lt; &lt;(cat data.json | jello -rl _.foo)```### Setting Custom Colors via Environment VariableCustom colors can be set via the `JELLO_COLORS` environment variable. Any colors set in the environment variable will take precedence over any colors set in the initialization file. (see [Advanced Usage](https://github.com/kellyjonbrazil/jello/blob/master/ADVANCED_USAGE.md))The `JELLO_COLORS` environment variable takes four comma separated string values in the following format:```JELLO_COLORS=&lt;keyname_color&gt;,&lt;keyword_color&gt;,&lt;number_color&gt;,&lt;string_color&gt;```Where colors are: `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, `gray`, `brightblack`, `brightred`, `brightgreen`, `brightyellow`, `brightblue`, `brightmagenta`, `brightcyan`, `white`, or  `default`For example, to set to the default colors:```JELLO_COLORS=blue,brightblack,magenta,green```or```JELLO_COLORS=default,default,default,default```### Disable Colors via Environment VariableYou can set the [`NO_COLOR`](http://no-color.org/) environment variable to any value to disable color output in `jello`. Note that using the `-C` option to force color output will override both the `NO_COLOR` environment variable and the `-m` option.### Advanced UsageHere is more [Advanced Usage](https://github.com/kellyjonbrazil/jello/blob/master/ADVANCED_USAGE.md) information.&gt; To accelerate filter development and testing, try [`jellex`](https://github.com/kellyjonbrazil/jellex). `jellex` is an interactive front-end TUI built on `jello` that allows you to see your filter results in real-time along with any errors.## Examples:### Printing the Grep-able Schema```bash$ jc -a | jello -s_ = {};_.name = &quot;jc&quot;;_.version = &quot;1.17.2&quot;;_.description = &quot;JSON CLI output utility&quot;;_.author = &quot;Kelly Brazil&quot;;_.author_email = &quot;kellyjonbrazil@gmail.com&quot;;_.website = &quot;https://github.com/kellyjonbrazil/jc&quot;;_.copyright = &quot;Â© 2019-2021 Kelly Brazil&quot;;_.license = &quot;MIT License&quot;;_.parser_count = 80;_.parsers = [];_.parsers[0] = {};_.parsers[0].name = &quot;acpi&quot;;_.parsers[0].argument = &quot;--acpi&quot;;_.parsers[0].version = &quot;1.2&quot;;_.parsers[0].description = &quot;`acpi` command parser&quot;;_.parsers[0].author = &quot;Kelly Brazil&quot;;_.parsers[0].author_email = &quot;kellyjonbrazil@gmail.com&quot;;_.parsers[0].compatible = [];_.parsers[0].compatible[0] = &quot;linux&quot;;_.parsers[0].magic_commands = [];_.parsers[0].magic_commands[0] = &quot;acpi&quot;;_.parsers[1] = {};_.parsers[1].name = &quot;airport&quot;;_.parsers[1].argument = &quot;--airport&quot;;_.parsers[1].version = &quot;1.3&quot;;...```### Printing the Grep-able Schema with type annotations (useful for grepping types)```bashjc dig example.com | jello -st_ = [];                                                             //   (array)_[0] = {};                                                          //  (object)_[0].id = 23819;                                                    //  (number)_[0].opcode = &quot;QUERY&quot;;                                              //  (string)_[0].status = &quot;NOERROR&quot;;                                            //  (string)_[0].flags = [];                                                    //   (array)_[0].flags[0] = &quot;qr&quot;;                                               //  (string)_[0].flags[1] = &quot;rd&quot;;                                               //  (string)_[0].flags[2] = &quot;ra&quot;;                                               //  (string)_[0].query_num = 1;                                                 //  (number)_[0].answer_num = 1;                                                //  (number)_[0].authority_num = 0;                                             //  (number)_[0].additional_num = 1;                                            //  (number)_[0].opt_pseudosection = {};                                        //  (object)_[0].opt_pseudosection.edns = {};                                   //  (object)_[0].opt_pseudosection.edns.version = 0;                            //  (number)_[0].opt_pseudosection.edns.flags = [];                             //   (array)_[0].opt_pseudosection.edns.udp = 4096;                             //  (number)_[0].question = {};                                                 //  (object)_[0].question.name = &quot;example.com.&quot;;                                //  (string)_[0].question.class = &quot;IN&quot;;                                         //  (string)_[0].question.type = &quot;A&quot;;                                           //  (string)_[0].answer = [];                                                   //   (array)_[0].answer[0] = {};                                                //  (object)_[0].answer[0].name = &quot;example.com.&quot;;                               //  (string)_[0].answer[0].class = &quot;IN&quot;;                                        //  (string)_[0].answer[0].type = &quot;A&quot;;                                          //  (string)_[0].answer[0].ttl = 48358;                                         //  (number)_[0].answer[0].data = &quot;93.184.216.34&quot;;                              //  (string)_[0].query_time = 46;                                               //  (number)_[0].server = &quot;2600:1700:bab0:d40::1#53(2600:1700:bab0:d40::1)&quot;;    //  (string)_[0].when = &quot;Mon Nov 29 09:41:11 PST 2021&quot;;                         //  (string)_[0].rcvd = 56;                                                     //  (number)_[0].when_epoch = 1638207671;                                       //  (number)_[0].when_epoch_utc = null;                                         //    (null)```### Printing the Structure of the JSON```bashjc dig example.com | jello -st | grep '(object)\|(array)'_ = [];                                                             //   (array)_[0] = {};                                                          //  (object)_[0].flags = [];                                                    //   (array)_[0].opt_pseudosection = {};                                        //  (object)_[0].opt_pseudosection.edns = {};                                   //  (object)_[0].opt_pseudosection.edns.flags = [];                             //   (array)_[0].question = {};                                                 //  (object)_[0].answer = [];                                                   //   (array)_[0].answer[0] = {};                                                //  (object)```### Lambda Functions and Math```bashecho '{&quot;t1&quot;:-30, &quot;t2&quot;:-20, &quot;t3&quot;:-10, &quot;t4&quot;:0}' | jello '\keys = _.keys()vals = _.values()cel = list(map(lambda x: (float(5)/9)*(x-32), vals))dict(zip(keys, cel))'{  &quot;t1&quot;: -34.44444444444444,  &quot;t2&quot;: -28.88888888888889,  &quot;t3&quot;: -23.333333333333336,  &quot;t4&quot;: -17.77777777777778}``````bashjc -a | jello 'len([entry for entry in _.parsers if &quot;darwin&quot; in entry.compatible])'45```### For LoopsOutput as JSON array```bashjc -a | jello '\result = []for entry in _.parsers:  if &quot;darwin&quot; in entry.compatible:    result.append(entry.name)result'[  &quot;airport&quot;,  &quot;airport_s&quot;,  &quot;arp&quot;,  &quot;crontab&quot;,  &quot;crontab_u&quot;,  ...]```Output as bash array```bashjc -a | jello -rl '\result = []for entry in _.parsers:  if &quot;darwin&quot; in entry.compatible:    result.append(entry.name)result'airportairport_sarpcrontabcrontab_u...```### List and Dictionary ComprehensionOutput as JSON array```bashjc -a | jello '[entry.name for entry in _.parsers if &quot;darwin&quot; in entry.compatible]'[  &quot;airport&quot;,  &quot;airport_s&quot;,  &quot;arp&quot;,  &quot;crontab&quot;,  &quot;crontab_u&quot;,  ...]```Output as bash array```bashjc -a | jello -rl '[entry.name for entry in _.parsers if &quot;darwin&quot; in entry.compatible]'airportairport_sarpcrontabcrontab_u...```### Expressions and Environment Variables```bashecho '{&quot;login_name&quot;: &quot;joeuser&quot;}' | jello 'os.getenv(&quot;LOGNAME&quot;) == _.login_name'true```### Using 3rd Party ModulesYou can import and use your favorite modules to manipulate the data.  For example, using `glom`:```bashjc -a | jello '\from glom import *glom(_, (&quot;parsers&quot;, [&quot;name&quot;]))'[  &quot;airport&quot;,  &quot;airport_s&quot;,  &quot;arp&quot;,  &quot;blkid&quot;,  &quot;crontab&quot;,  &quot;crontab_u&quot;,  &quot;csv&quot;,  ...]```### Advanced JSON ManipulationThe data from this example comes from https://programminghistorian.org/assets/jq_twitter.jsonUnder **Grouping and Counting**, Matthew describes an advanced `jq` filter against a sample Twitter dataset that includes JSON Lines data. There he describes the following query:&gt; &quot;We can now create a table of users. Letâs create a table with columns for the user id, user name, followers count, and a column of their tweet ids separated by a semicolon.&quot;https://programminghistorian.org/en/lessons/json-and-jqHere is a simple solution using `jello`:```bashcat jq_twitter.json | jello -l '\user_ids = set()for tweet in _:    user_ids.add(tweet.user.id)result = []for user in user_ids:    user_profile = {}    tweet_ids = []    for tweet in _:        if tweet.user.id == user:            user_profile.update({                &quot;user_id&quot;: user,                &quot;user_name&quot;: tweet.user.screen_name,                &quot;user_followers&quot;: tweet.user.followers_count})            tweet_ids.append(str(tweet.id))    user_profile[&quot;tweet_ids&quot;] = &quot;;&quot;.join(tweet_ids)    result.append(user_profile)result'...{&quot;user_id&quot;: 2696111005, &quot;user_name&quot;: &quot;EGEVER142&quot;, &quot;user_followers&quot;: 1433, &quot;tweet_ids&quot;: &quot;619172303654518784&quot;}{&quot;user_id&quot;: 42226593, &quot;user_name&quot;: &quot;shirleycolleen&quot;, &quot;user_followers&quot;: 2114, &quot;tweet_ids&quot;: &quot;619172281294655488;619172179960328192&quot;}{&quot;user_id&quot;: 106948003, &quot;user_name&quot;: &quot;MrKneeGrow&quot;, &quot;user_followers&quot;: 172, &quot;tweet_ids&quot;: &quot;501064228627705857&quot;}{&quot;user_id&quot;: 18270633, &quot;user_name&quot;: &quot;ahhthatswhy&quot;, &quot;user_followers&quot;: 559, &quot;tweet_ids&quot;: &quot;501064204661850113&quot;}{&quot;user_id&quot;: 14331818, &quot;user_name&quot;: &quot;edsu&quot;, &quot;user_followers&quot;: 4220, &quot;tweet_ids&quot;: &quot;615973042443956225;618602288781860864&quot;}{&quot;user_id&quot;: 2569107372, &quot;user_name&quot;: &quot;SlavinOleg&quot;, &quot;user_followers&quot;: 35, &quot;tweet_ids&quot;: &quot;501064198973960192;501064202794971136;501064214467731457;501064215759568897;501064220121632768&quot;}{&quot;user_id&quot;: 22668719, &quot;user_name&quot;: &quot;nodehyena&quot;, &quot;user_followers&quot;: 294, &quot;tweet_ids&quot;: &quot;501064222772445187&quot;}...```</longdescription>
</pkgmetadata>