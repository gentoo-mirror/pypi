<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>API to call PEP 517 hooks=========================.. warning::   The core of this package has been renamed to   `pyproject-hooks &lt;https://pyproject-hooks.readthedocs.io/&gt;`_. Please use that   package (low level) or `build &lt;https://pypa-build.readthedocs.io/en/stable/&gt;`_   (higher level) in place of ``pep517``.`PEP 517 &lt;https://www.python.org/dev/peps/pep-0517/&gt;`_ specifies a standardAPI for systems which build Python packages.`PEP 660 &lt;https://www.python.org/dev/peps/pep-0660/&gt;`_ extends it with a buildmode that leads to editable installs.This package contains wrappers around the hooks specified by PEP 517 andPEP 660. It provides:- A mechanism to call the hooks in a subprocess, so they are isolated from  the current process.- Fallbacks for the optional hooks, so that frontends can call the hooks without  checking which are defined.Run the tests with ``pytest`` or `tox &lt;https://pypi.org/project/tox&gt;`_.Usageâ€”you are responsible for ensuring build requirements are available:.. code-block:: python    import os    import tomli    from pep517.wrappers import Pep517HookCaller    src = 'path/to/source'  # Folder containing 'pyproject.toml'    with open(os.path.join(src, 'pyproject.toml'), 'rb') as f:        build_sys = tomli.load(f)['build-system']    print(build_sys['requires'])  # List of static requirements    # The caller is responsible for installing these and running the hooks in    # an environment where they are available.    hooks = Pep517HookCaller(        src,        build_backend=build_sys['build-backend'],        backend_path=build_sys.get('backend-path'),    )    config_options = {}   # Optional parameters for backend    # List of dynamic requirements:    print(hooks.get_requires_for_build_wheel(config_options))    # Again, the caller is responsible for installing these build requirements    destination = 'also/a/folder'    whl_filename = hooks.build_wheel(destination, config_options)    assert os.path.isfile(os.path.join(destination, whl_filename))Deprecated high-level---------------------For now, ``pep517`` also contains higher-level functions which install the builddependencies into a temporary environment and build a wheel/sdist using them.This is a rough implementation, e.g. it does not do proper build isolation.The `PyPA build project &lt;https://github.com/pypa/build&gt;`_ is recommended as analternative, although it's still quite young in October 2020.This layer of functionality in ``pep517`` is now deprecated, but won't beremoved for some time, as there is code relying on it.High level usage, with build requirements handled:.. code-block:: python    import os    from pep517.envbuild import build_wheel, build_sdist    src = 'path/to/source'  # Folder containing 'pyproject.toml'    destination = 'also/a/folder'    whl_filename = build_wheel(src, destination)    assert os.path.isfile(os.path.join(destination, whl_filename))    targz_filename = build_sdist(src, destination)    assert os.path.isfile(os.path.join(destination, targz_filename))To test the build backend for a project, run in a system shell:.. code-block:: shell    python3 -m pep517.check path/to/source  # source dir containing pyproject.tomlTo build a backend into source and/or binary distributions, run in a shell:.. code-block:: shell    python -m pep517.build path/to/source  # source dir containing pyproject.tomlAll of this high-level functionality is deprecated.</longdescription>
</pkgmetadata>