<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AVR-Python-Libraries## InstallTo install the base package, run:```bashpip install bell-avr-libraries```Additionally, the `mqtt` and `serial` extras are available if you want to usethe MQTT or PCC functionality.```bashpip install bell-avr-libraries[mqtt,serial]```## Usage### MQTT```pythonfrom bell.avr import mqtt```These are MQTT utilities that are used to have a consistent messaging protocolthroughout all the AVR software modules.The first part of this are the payloads for the MQTT messages themselves. As AVRexclusively uses JSON, these are all[`TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict)sthat have all of the required fields for a message.Example:```pythonfrom bell.avr.mqtt.payloads import AvrPcmSetBaseColorPayloadpayload = AvrPcmSetBaseColorPayload((128, 232, 142, 0))```The second part of the MQTT libraries, is the `MQTTModule` class.This is a boilerplate module for AVR that makes it very easy to sendand recieve MQTT messages and do something with them.Example:```pythonfrom bell.avr.mqtt.client import MQTTModulefrom bell.avr.mqtt.payloads import AvrFcmVelocityPayload, AvrPcmSetServoOpenClosePayloadclass Sandbox(MQTTModule):    def __init__(self) -&gt; None:        super().__init__()        self.topic_map = {&quot;avr/fcm/velocity&quot;: self.show_velocity}    def show_velocity(self, payload: AvrFcmVelocityPayload) -&gt; None:        vx = payload[&quot;vX&quot;]        vy = payload[&quot;vY&quot;]        vz = payload[&quot;vZ&quot;]        v_ms = (vx, vy, vz)        print(f&quot;Velocity information: {v_ms} m/s&quot;)    def open_servo(self) -&gt; None:        payload = AvrPcmSetServoOpenClosePayload(servo=0, action=&quot;open&quot;)        self.send_message(&quot;avr/pcm/set_servo_open_close&quot;, payload)if __name__ == &quot;__main__&quot;:    box = Sandbox()    box.run()```The `topic_map` dictionary is a class attribute that maps topics to subscribe toand a function that will handle an incoming payload. The `payload` argumentshould match the appropriate `Payload` class for that topic.Additionally, the `message_cache` attribute is a dictionary that holdsa copy of the last payload sent by that module on a given topic. The keys are thetopic strings, and the values are the topic payloads.### Utils```pythonfrom bell.avr import utils```These are general purpose utilities.#### Decorators```pythonfrom bell.avr.utils import decorators```There are 3 different function decorators available, which are helpful for MQTTmessage callbacks. First is the `try_except` decorator, which wraps thefunction in a `try: except:` statement and will log any exceptions to the console:```python    @decorators.try_except    def assemble_hil_gps_message(self) -&gt; None:        ...```Additionally, there is the `reraise` argument, which can be set to `True` to raiseany exceptions that are encountered. This is helpful if you still want exceptionsto propagate up, but log them.There is an async version of this decorator as well with an `async_` prefix.```python    @decorators.async_try_except()    async def connected_status_telemetry(self) -&gt; None:        ...```The last decorator is `run_forever` which will run the wrapped function forever,with a given `period` or `frequency`.```python    @decorators.run_forever(frequency=5)    def read_data(self) -&gt; None:        ...```#### Timing```pythonfrom bell.avr.utils import timing```Here is a `rate_limit` function which take a callable and aperiod or frequency, and only run the callable at that given rate.```pythonfor _ in range(10):    # add() will only run twice    timing.rate_limit(add, period=5)    time.sleep(1)```This works tracking calls to the `rate_limit` function from a line numberwithin a file, so multiple calls to `rate_limit` say within a loopwith the same callable and period will be treated seperately. This allowsfor dynamic frequency manipulation.### Serial```pythonfrom bell.avr import serial```These are serial utilities that help facilitate finding and communicatingwith the AVR peripherial control computer.#### Client```pythonfrom bell.avr.serial import client```The `SerialLoop` class is a small wrapper around the `pyserial` `serial.Serial`class which adds a `run` method that will try to read data from the serial deviceas fast as possible.```pythonser = client.SerialLoop()```#### PCC```pythonfrom bell.avr.serial import client```The `PeripheralControlComputer` class sends serial messagesto the AVR peripherial control computer, via easy-to-use class methods.```pythonimport bell.avr.serial.clientimport bell.avr.serial.pccimport threadingclient = bell.avr.serial.client.SerialLoop()client.port = portclient.baudrate = baudrateclient.open()pcc = bell.avr.serial.pcc.PeripheralControlComputer(client)client_thread = threading.Thread(target=client.run)client_thread.start()pcc.set_servo_max(0, 100)```#### Ports```pythonfrom bell.avr.serial import ports```Here is a `list_serial_ports` function which returns a list of detected serialports connected to the system.```pythonserial_ports = ports.list_serial_ports()# [&quot;COM1&quot;, &quot;COM5&quot;, ...]```## DevelopmentInstall [`poetry`](https://python-poetry.org/) and run`poetry install --extras mqtt --extras serial` to install of the dependenciesinside a virtual environment.Build the auto-generated code with `poetry run python build.py`. From here,you can now produce a package with `poetry build`.To add new message definitions, add entries to the `bell/avr/mqtt/messages.jsonc` file.The 3 parts of a new message are as follows:1. &quot;topic&quot;: This is the full topic path for the message. This must be all lower case and   start with &quot;avr/&quot;.2. &quot;payload&quot;: These are the keys of the payload for the message.   This is a list of key entries (see below).3. &quot;docs&quot;: This is an optional list of Markdown strings that explains what this   message does. Each list item is a new line.The key entries for a message have the following elements:1. &quot;key&quot;: This is the name of the key. Must be a valid Python variable name.2. &quot;type&quot;: This is the data type of the key such as `Tuple[int, int, int, int]`.   Must be a valid Python type hint. Otherwise, this can be a list of more   key entries, effectively creating a nested dictionary.3. &quot;docs&quot;: This is an optional list of Markdown strings that explains what the   key is. Each list item is a new line.The `bell/avr/mqtt/schema.json` file will help ensure the correct schema is maintained,assuming you are using VS Code.## MQTT Documentation### Data Types#### AvrApriltagsRawTags- `&quot;id&quot;` (`int`):    The ID of the AprilTag- `&quot;pos&quot;` (`AvrApriltagsRawTagsPos`)- `&quot;rotation&quot;` (`Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]`):    The 3x3 rotation matrix#### AvrApriltagsRawTagsPos- `&quot;x&quot;` (`float`):    The position in meters of the camera relative to the AprilTag's X frame- `&quot;y&quot;` (`float`):    The position in meters of the camera relative to the AprilTag's Y frame- `&quot;z&quot;` (`float`):    The position in meters of the camera relative to the AprilTag's Z frame#### AvrApriltagsSelectedPosThe position of the vehicle in world frame in centimeters- `&quot;n&quot;` (`float`):    The +north position of the vehicle relative to the world origin in world frame- `&quot;e&quot;` (`float`):    The +east position of the vehicle relative to the world origin in world frame- `&quot;d&quot;` (`float`):    The +down position of the vehicle relative to the world origin in world frame#### AvrApriltagsVisibleTags- `&quot;id&quot;` (`int`):    The ID of the AprilTag- `&quot;horizontal_dist&quot;` (`float`):    The horizontal scalar distance from vehicle to AprilTag, in centimeters- `&quot;vertical_dist&quot;` (`float`):    The vertical scalar distance from vehicle to AprilTag, in centimeters- `&quot;angle_to_tag&quot;` (`float`):    The angle formed by the vector pointing from the vehicles body to the AprilTag in world frame relative to world-north- `&quot;heading&quot;` (`float`):    The heading of the vehicle in world frame- `&quot;pos_rel&quot;` (`AvrApriltagsVisibleTagsPosRel`):    The relative position of the vehicle to the tag in world frame in centimeters- `&quot;pos_world&quot;` (`AvrApriltagsVisibleTagsPosWorld`):    The position of the vehicle in world frame in centimeters (if the tag has no truth data, this will not be present in the output)#### AvrApriltagsVisibleTagsPosRelThe relative position of the vehicle to the tag in world frame in centimeters- `&quot;x&quot;` (`float`):    The x (+north/-south) position of the vehicle relative to the AprilTag in world frame- `&quot;y&quot;` (`float`):    The y (+east/-west) position of the vehicle relative to the AprilTag in world frame- `&quot;z&quot;` (`float`):    The z (+down/-up) position of the vehicle relative to the AprilTag in world frame#### AvrApriltagsVisibleTagsPosWorldThe position of the vehicle in world frame in centimeters (if the tag has no truth data, this will not be present in the output)- `&quot;x&quot;` (`Optional[float]`):    The x position of the vehicle relative to the world origin (this is the ship) in world frame (for reference the mountain is **north** of the beach)- `&quot;y&quot;` (`Optional[float]`):    The y position of the vehicle relative to the world origin in world frame- `&quot;z&quot;` (`Optional[float]`):    The z position of the vehicle relative to the world origin in world frame### Message Payloads#### AvrApriltagsFpsPayloadTopic: `avr/apriltags/fps`This reports the framerate of AprilTag processing- `&quot;fps&quot;` (`int`):    Number of frames of video data processed in the last second#### AvrApriltagsRawPayloadTopic: `avr/apriltags/raw`This topic publishes the raw AprilTag data- `&quot;tags&quot;` (`List[AvrApriltagsRawTags]`)#### AvrApriltagsSelectedPayloadTopic: `avr/apriltags/selected`This topic publishes its best candidate for position feedback- `&quot;tag_id&quot;` (`int`):    The id of the tag- `&quot;pos&quot;` (`AvrApriltagsSelectedPos`):    The position of the vehicle in world frame in centimeters- `&quot;heading&quot;` (`float`)#### AvrApriltagsVisiblePayloadTopic: `avr/apriltags/visible`This topic publishes the transformed AprilTag data- `&quot;tags&quot;` (`List[AvrApriltagsVisibleTags]`)#### AvrAutonomousBuildingDropPayloadTopic: `avr/autonomous/building/drop`This enables or disables a building payload drop. This is not used by any Bell code, but available to students to listen to.- `&quot;id&quot;` (`int`):    0-index ID of the relevant building- `&quot;enabled&quot;` (`bool`):    Boolean of whether the building should have drop enabled#### AvrAutonomousEnablePayloadTopic: `avr/autonomous/enable`This enables or disables autonomous mode. This is not used by any Bell code, but available to students to.- `&quot;enabled&quot;` (`bool`)#### AvrFcmAttitudeEulerPayloadTopic: `avr/fcm/attitude/euler`This reports the current attitude of the drone from the flight controller.- `&quot;roll&quot;` (`float`):    Roll in degrees- `&quot;pitch&quot;` (`float`):    Pitch in degrees- `&quot;yaw&quot;` (`float`):    Yaw in degrees#### AvrFcmBatteryPayloadTopic: `avr/fcm/battery`This reports battery information from the flight controller.- `&quot;voltage&quot;` (`float`):    Battery voltage- `&quot;soc&quot;` (`float`):    State of charge (0 - 100)#### AvrFcmEventsPayloadTopic: `avr/fcm/events`This reports events from the flight controller such as flight mode changes.- `&quot;name&quot;` (`str`):    The name of the event.- `&quot;payload&quot;` (`str`):    The payload of the event.#### AvrFcmGpsInfoPayloadTopic: `avr/fcm/gps_info`This reports the current status of the flight controller's GPS connection.- `&quot;num_satellites&quot;` (`int`):    Number of visible satellites in use. HIL GPS will appear as 13.- `&quot;fix_type&quot;` (`str`):    GPS fix type#### AvrFcmHilGpsStatsPayloadTopic: `avr/fcm/hil_gps_stats`This reports statistics on the HIL GPS data that is fed into the flight controller.- `&quot;num_frames&quot;` (`int`):    This is the number of messages that have been sent to the flight controller since the software has started.#### AvrFcmLocationGlobalPayloadTopic: `avr/fcm/location/global`This reports the current position of the drone in global coordinates from the flight controller.- `&quot;lat&quot;` (`float`):    Latitude in degrees- `&quot;lon&quot;` (`float`):    Longitude in degrees- `&quot;alt&quot;` (`float`):    Altitude relative to takeoff altitude in meters- `&quot;hdg&quot;` (`float`):    Heading in degrees.#### AvrFcmLocationHomePayloadTopic: `avr/fcm/location/home`This reports the current position of the drone's home position in global coordinates.- `&quot;lat&quot;` (`float`):    Latitude in degrees of the home position- `&quot;lon&quot;` (`float`):    Longitude in degrees of the home position- `&quot;alt&quot;` (`float`):    Altitude relative to the home position in meters#### AvrFcmLocationLocalPayloadTopic: `avr/fcm/location/local`This reports the current position of the drone in local coordinates from the flight controller.- `&quot;dX&quot;` (`float`):    X position in a local North/East/Down coordinate system in meters- `&quot;dY&quot;` (`float`):    Y position in a local North/East/Down coordinate system in meters- `&quot;dZ&quot;` (`float`):    Z position in a local North/East/Down coordinate system in meters#### AvrFcmStatusPayloadTopic: `avr/fcm/status`This reports general status of the flight controller.- `&quot;armed&quot;` (`bool`):    Boolean of if the drone is currently armed- `&quot;mode&quot;` (`str`):    Current flight mode, which is one of the following:    - 'UNKNOWN'    - 'READY'    - 'TAKEOFF'    - 'HOLD'    - 'MISSION'    - 'RETURN_TO_LAUNCH'    - 'LAND'    - 'OFFBOARD'    - 'FOLLOW_ME'    - 'MANUAL'    - 'ALTCTL'    - 'POSCTL'    - 'ACRO'    - 'STABILIZED'    - 'RATTITUDE'#### AvrFcmVelocityPayloadTopic: `avr/fcm/velocity`This reports the current velocity vectors of the drone from the flight controller.- `&quot;vX&quot;` (`float`):    X velocity in a local North/East/Down coordinate system in meters per second- `&quot;vY&quot;` (`float`):    Y velocity in a local North/East/Down coordinate system in meters per second- `&quot;vZ&quot;` (`float`):    Z velocity in a local North/East/Down coordinate system in meters per second#### AvrFusionAttitudeEulerPayloadTopic: `avr/fusion/attitude/euler`This reports the computed attitude of the drone from our sensor fusion.- `&quot;psi&quot;` (`float`):    Roll in radians- `&quot;theta&quot;` (`float`):    Pitch in radians- `&quot;phi&quot;` (`float`):    Yaw in radians#### AvrFusionAttitudeHeadingPayloadTopic: `avr/fusion/attitude/heading`This reports the computed heading of the drone from our sensor fusion.- `&quot;heading&quot;` (`float`):    Heading in degrees#### AvrFusionAttitudeQuatPayloadTopic: `avr/fusion/attitude/quat`This reports the computed attitude of the drone from our sensor fusion.- `&quot;w&quot;` (`float`):    Quaternion w value- `&quot;x&quot;` (`float`):    Quaternion x value- `&quot;y&quot;` (`float`):    Quaternion y value- `&quot;z&quot;` (`float`):    Quaternion z value#### AvrFusionClimbratePayloadTopic: `avr/fusion/climbrate`This reports the computed rate of climb of the drone from our sensor fusion.- `&quot;climb_rate_fps&quot;` (`float`):    Rate of climb in feet per second#### AvrFusionCoursePayloadTopic: `avr/fusion/course`This reports the computed course of the drone from our sensor fusion.- `&quot;course&quot;` (`float`):    Course in degrees#### AvrFusionGeoPayloadTopic: `avr/fusion/geo`This reports the computed position of the drone in global coordinates from our sensor fusion.- `&quot;lat&quot;` (`float`):    Latitude in degrees- `&quot;lon&quot;` (`float`):    Longitude in degrees- `&quot;alt&quot;` (`float`):    Altitude relative to takeoff altitude in meters#### AvrFusionGroundspeedPayloadTopic: `avr/fusion/groundspeed`This reports the computed groundspeed of the drone from our sensor fusion.- `&quot;groundspeed&quot;` (`float`):    Groundspeed of the drone in meters per second. This is a normal vector of the N and E velocities.#### AvrFusionHilGpsPayloadTopic: `avr/fusion/hil_gps`This is the raw data that will get converted to a MAVLink message and sent to the flight controller for HIL GPS. &lt;https://mavlink.io/en/messages/common.html#HIL_GPS&gt;- `&quot;time_usec&quot;` (`int`):    UNIX epoch timestamp in microseconds- `&quot;fix_type&quot;` (`int`):    0-1: no fix, 2: 2D fix, 3: 3D fix.- `&quot;lat&quot;` (`int`):    WGS84 Latitude * 10000000- `&quot;lon&quot;` (`int`):    WGS84 Longitude * 10000000- `&quot;alt&quot;` (`int`):    Altitude from sea level in mm. Positive for up.- `&quot;eph&quot;` (`int`):    GPS HDOP horizontal dilution of position- `&quot;epv&quot;` (`int`):    GPS VDOP vertical dilution of position- `&quot;vel&quot;` (`int`):    GPS ground speed in centimeters per second- `&quot;vn&quot;` (`int`):    GPS velocity in north direction in centimeters per second- `&quot;ve&quot;` (`int`):    GPS velocity in east direction in centimeters per second- `&quot;vd&quot;` (`int`):    GPS velocity in down direction in centimeters per second- `&quot;cog&quot;` (`int`):    Course over ground in degrees- `&quot;satellites_visible&quot;` (`int`):    Number of satellites visible. This is hardcoded to 13 for our HIL GPS.- `&quot;heading&quot;` (`int`):    Custom heading field. This is the heading in degrees * 100.#### AvrFusionPositionNedPayloadTopic: `avr/fusion/position/ned`This reports the computed position of the drone in local coordinates from our sensor fusion.- `&quot;n&quot;` (`float`):    X position in a local North/East/Down coordinate system in meters- `&quot;e&quot;` (`float`):    Y position in a local North/East/Down coordinate system in meters- `&quot;d&quot;` (`float`):    Z position in a local North/East/Down coordinate system in meters#### AvrFusionVelocityNedPayloadTopic: `avr/fusion/velocity/ned`This reports the computed velocity vectors of the drone from our sensor fusion.- `&quot;Vn&quot;` (`float`):    X velocity in a local North/East/Down coordinate system in meters per second- `&quot;Ve&quot;` (`float`):    Y velocity in a local North/East/Down coordinate system in meters per second- `&quot;Vd&quot;` (`float`):    Z velocity in a local North/East/Down coordinate system in meters per second#### AvrPcmFireLaserPayloadTopic: `avr/pcm/fire_laser`Fires the laser for a 0.25 sec pulse. Has a cooldown of 0.5 sec.There is no content for this class#### AvrPcmSetBaseColorPayloadTopic: `avr/pcm/set_base_color`This sets the color of the LED strip on the PCC- `&quot;wrgb&quot;` (`Tuple[int, int, int, int]`):    A list of 4 `int`s between 0 and 255 to set the base color of the LEDs. This is in order of White, Red, Green, Blue. Example: [0, 0, 255, 0] would be Green.#### AvrPcmSetLaserOffPayloadTopic: `avr/pcm/set_laser_off`Turns off laser (laser off from blip mode - but doesn't prevent fire_laser)There is no content for this class#### AvrPcmSetLaserOnPayloadTopic: `avr/pcm/set_laser_on`Turns on laser (in blip mode - 0.1 second on every 0.5. sec)There is no content for this class#### AvrPcmSetServoAbsPayloadTopic: `avr/pcm/set_servo_abs`This sets the absolute position of a specific servo. SERVOMIN 150 is closed, and SERVOMAX 425 is open. We need to send a High and Low byte due to limitations of the API- `&quot;servo&quot;` (`int`):    ID of the servo to set the percent as an `int`. This is 0-indexed.- `&quot;absolute&quot;` (`int`):    Absolute position between SERVOMIN 150 and SERVOMAX 425#### AvrPcmSetServoMaxPayloadTopic: `avr/pcm/set_servo_max`This sets the maximum pulse width of a specific servo.- `&quot;servo&quot;` (`int`):    ID of the servo to set the maximum pulse width as an `int`. This is 0-indexed.- `&quot;max_pulse&quot;` (`int`):    A `int` between 0 and 1000.#### AvrPcmSetServoMinPayloadTopic: `avr/pcm/set_servo_min`This sets the minimum pulse width of a specific servo.- `&quot;servo&quot;` (`int`):    ID of the servo to set the minimum pulse width as an `int`. This is 0-indexed.- `&quot;min_pulse&quot;` (`int`):    A `int` between 0 and 1000.#### AvrPcmSetServoOpenClosePayloadTopic: `avr/pcm/set_servo_open_close`This opens or closes a specific servo.- `&quot;servo&quot;` (`int`):    ID of the servo to open or close as an `int`. This is 0-indexed.- `&quot;action&quot;` (`Literal[&quot;open&quot;, &quot;close&quot;]`):    Either the literal string &quot;open&quot; or &quot;close&quot;.#### AvrPcmSetServoPctPayloadTopic: `avr/pcm/set_servo_pct`This sets the percentage of a specific servo. 0 is closed, and 100 is open.- `&quot;servo&quot;` (`int`):    ID of the servo to set the percent as an `int`. This is 0-indexed.- `&quot;percent&quot;` (`int`):    A `int` between 0 and 100.#### AvrPcmSetTempColorPayloadTopic: `avr/pcm/set_temp_color`This sets the color of the LED strip on the PCC temporarily- `&quot;wrgb&quot;` (`Tuple[int, int, int, int]`):    A list of 4 `int`s between 0 and 255 to set the base color of the LEDs. This is in order of White, Red, Green, Blue. Example: [0, 0, 255, 0] would be Green.- `&quot;time&quot;` (`float`):    Optional `float` for the number of seconds the color should be set for. Default is 0.5.#### AvrStatusLightApriltagsPayloadTopic: `avr/status/light/apriltags`There is no content for this class#### AvrStatusLightFcmPayloadTopic: `avr/status/light/fcm`There is no content for this class#### AvrStatusLightPcmPayloadTopic: `avr/status/light/pcm`There is no content for this class#### AvrStatusLightThermalPayloadTopic: `avr/status/light/thermal`There is no content for this class#### AvrStatusLightVioPayloadTopic: `avr/status/light/vio`There is no content for this class#### AvrThermalReadingPayloadTopic: `avr/thermal/reading`This publishes data from the thermal camera- `&quot;data&quot;` (`str`):    The raw data from the thermal camera are integer values from an 8x8 grid of pixels. This data is then converted into a bytearray and base64 encoded. Any example of how to unpack this data:        ```python    import base64    import json        data = json.loads(payload)[&quot;data&quot;]    base64_decoded = data.encode(&quot;utf-8&quot;)    as_bytes = base64.b64decode(base64_decoded)    pixel_ints = list(bytearray(as_bytes))    ```#### AvrVioConfidencePayloadTopic: `avr/vio/confidence`This reports the tracking camera's confidence- `&quot;tracker&quot;` (`float`):    Number between 0 and 100 of tracking confidence#### AvrVioHeadingPayloadTopic: `avr/vio/heading`This reports the measued heading of the drone from the tracking camera.- `&quot;degrees&quot;` (`float`):    Heading in degrees#### AvrVioOrientationEulPayloadTopic: `avr/vio/orientation/eul`This reports the measued attitude of the drone from the tracking camera.- `&quot;psi&quot;` (`float`):    Roll in radians- `&quot;theta&quot;` (`float`):    Pitch in radians- `&quot;phi&quot;` (`float`):    Yaw in radians#### AvrVioOrientationQuatPayloadTopic: `avr/vio/orientation/quat`This reports the measued attitude of the drone from the tracking camera.- `&quot;w&quot;` (`float`):    Quaternion w value- `&quot;x&quot;` (`float`):    Quaternion x value- `&quot;y&quot;` (`float`):    Quaternion y value- `&quot;z&quot;` (`float`):    Quaternion z value#### AvrVioPositionNedPayloadTopic: `avr/vio/position/ned`This reports the measured position of the drone in local coordinates from the tracking camera.- `&quot;n&quot;` (`float`):    X position in a local North/East/Down coordinate system in meters- `&quot;e&quot;` (`float`):    Y position in a local North/East/Down coordinate system in meters- `&quot;d&quot;` (`float`):    Z position in a local North/East/Down coordinate system in meters#### AvrVioResyncPayloadTopic: `avr/vio/resync`This reports significant position differences from the tracking camera, and detected AprilTags at known positions.- `&quot;n&quot;` (`float`):    X position difference in a local North/East/Down coordinate system in meters- `&quot;e&quot;` (`float`):    Y position difference in a local North/East/Down coordinate system in meters- `&quot;d&quot;` (`float`):    Z position difference in a local North/East/Down coordinate system in meters- `&quot;heading&quot;` (`float`):    Heading difference in degrees#### AvrVioVelocityNedPayloadTopic: `avr/vio/velocity/ned`This reports the measued velocity vectors of the drone from the tracking camera.- `&quot;n&quot;` (`float`):    X velocity in a local North/East/Down coordinate system in meters per second- `&quot;e&quot;` (`float`):    Y velocity in a local North/East/Down coordinate system in meters per second- `&quot;d&quot;` (`float`):    Z velocity in a local North/East/Down coordinate system in meters per second</longdescription>
</pkgmetadata>