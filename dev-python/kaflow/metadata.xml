<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;h1&gt;kaflow&lt;/h1&gt;  &lt;p&gt;    &lt;em&gt;Kafka streams topic processing in Python.&lt;/em&gt;  &lt;/p&gt;  &lt;p&gt;    &lt;a href=&quot;https://github.com/gabrielmbmb/kaflow/actions?query=workflow%3ATest+event%3Apush+branch%3Amain&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://github.com/gabrielmbmb/kaflow/workflows/Test/badge.svg?event=push&amp;branch=main&quot; alt=&quot;Test&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/kaflow&quot;&gt;      &lt;img src=&quot;https://img.shields.io/pypi/v/kaflow?color=#2cbe4e&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/kaflow&quot;&gt;      &lt;img src=&quot;https://img.shields.io/pypi/pyversions/kaflow?color=#2cbe4e&quot;&gt;    &lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;---`kaflow` is a simple framework that allows you to build Kafka streams processing aplications in Python with ease.Some of the features offered by `kaflow`:- Dependency Injection system inspired by [FastAPI](https://github.com/tiangolo/fastapi) and [xpresso](https://github.com/adriangb/xpresso), and backed by [di](https://github.com/adriangb/di).- Automatic deserialization of incoming messages and serialization of outgoing messages. Supports popular formats like `JSON`, `Avro` or `Protobuf`.- Message validation thanks to [pydantic](https://github.com/pydantic/pydantic).## RequirementsPython 3.8+## Installation```shellpip install kaflow```## Example```pythonfrom kaflow import (    FromHeader,    FromKey,    FromValue,    Json,    Kaflow,    Message,    MessageOffset,    MessagePartition,    MessageTimestamp,    String,)from pydantic import BaseModelclass UserClick(BaseModel):    user_id: int    url: str    timestamp: intclass Key(BaseModel):    environment: strapp = Kaflow(name=&quot;AwesomeKakfaApp&quot;, brokers=&quot;localhost:9092&quot;)@app.consume(topic=&quot;user_clicks&quot;, sink_topics=[&quot;user_clicks_json&quot;])async def consume_user_clicks(    message: FromValue[Json[UserClick]],    key: FromKey[Json[Key]],    x_correlation_id: FromHeader[String[str]],    x_request_id: FromHeader[String[str]],    partition: MessagePartition,    offset: MessageOffset,    timestamp: MessageTimestamp,) -&gt; Message:    # Do something with the message    ...    # Publish to another topic    return Message(value=b'{&quot;user_clicked&quot;: &quot;true&quot;}')app.run()```</longdescription>
</pkgmetadata>