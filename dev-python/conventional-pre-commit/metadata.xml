<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># conventional-pre-commitA [`pre-commit`](https://pre-commit.com) hook to check commit messages for[Conventional Commits](https://conventionalcommits.org) formatting.## UsageMake sure `pre-commit` is [installed](https://pre-commit.com#install).Create a blank configuration file at the root of your repo, if needed:```consoletouch .pre-commit-config.yaml```Add a new repo entry to your configuration file:```yamlrepos:  # - repo: ...  - repo: https://github.com/compilerla/conventional-pre-commit    rev: &lt;git sha or tag&gt;    hooks:      - id: conventional-pre-commit        stages: [commit-msg]        args: [] # optional: list of Conventional Commits types to allow e.g. [feat, fix, ci, chore, test]```Install the `pre-commit` script:```consolepre-commit install --hook-type commit-msg```Make a (normal) commit :x::```console$ git commit -m &quot;add a new feature&quot;[INFO] Initializing environment for ....Conventional Commit......................................................Failed- hook id: conventional-pre-commit- duration: 0.07s- exit code: 1[Bad Commit message] &gt;&gt; add a new featureYour commit message does not follow Conventional Commits formattinghttps://www.conventionalcommits.org/Conventional Commits start with one of the below types, followed by a colon,followed by the commit message:    build chore ci docs feat fix perf refactor revert style testExample commit message adding a feature:    feat: implement new APIExample commit message fixing an issue:    fix: remove infinite loopOptionally, include a scope in parentheses after the type for more context:    fix(account): remove infinite loop```Make a (conventional) commit :heavy_check_mark::```console$ git commit -m &quot;feat: add a new feature&quot;[INFO] Initializing environment for ....Conventional Commit......................................................Passed- hook id: conventional-pre-commit- duration: 0.05s```## Install with pip`conventional-pre-commit` can also be installed and used from the command line:```shellpip install conventional-pre-commit```Then run the command line script:```shellconventional-pre-commit [types] input```- `[types]` is an optional list of Conventional Commit types to allow (e.g. `feat fix chore`)- `input` is a file containing the commit message to check:```shellconventional-pre-commit feat fix chore ci test .git/COMMIT_MSG```Or from a Python program:```pythonfrom conventional_pre_commit.format import is_conventional# prints Trueprint(is_conventional(&quot;feat: this is a conventional commit&quot;))# prints Falseprint(is_conventional(&quot;nope: this is not a conventional commit&quot;))# prints Trueprint(is_conventional(&quot;custom: this is a conventional commit&quot;, types=[&quot;custom&quot;]))```## Development`conventional-pre-commit` comes with a [VS Code devcontainer](https://code.visualstudio.com/learn/develop-cloud/containers)configuration to provide a consistent development environment.With the `Remote - Containers` extension enabled, open the folder containing this repository inside Visual Studio Code.You should receive a prompt in the Visual Studio Code window; click `Reopen in Container` to run the development environmentinside the devcontainer.If you do not receive a prompt, or when you feel like starting from a fresh environment:1. `Ctrl/Cmd+Shift+P` to bring up the command palette in Visual Studio Code1. Type `Remote-Containers` to filter the commands1. Select `Rebuild and Reopen in Container` to completely rebuild the devcontainer1. Select `Reopen in Container` to reopen the most recent devcontainer build## VersioningVersioning generally follows [Semantic Versioning](https://semver.org/).## Making a releaseReleases to PyPI are triggered by [publishing a release on GitHub](https://github.com/compilerla/conventional-pre-commit/releases/new).1. Create a branch `chore/release`1. Bump the version in `pyproject.toml`1. PR, merge `chore/release` into `main`1. Tag `main` with the new version (prefixed by `v`):   ```bash   git fetch   git reset --hard origin/main   git tag vX.Y.Z   git push origin vX.Y.Z   ```1. Publish a pre-release to push the new package to TestPyPI1. Publish a regular Release to push the new package to PyPI## License[Apache 2.0](LICENSE)Inspired by matthorgan's [`pre-commit-conventional-commits`](https://github.com/matthorgan/pre-commit-conventional-commits).</longdescription>
</pkgmetadata>