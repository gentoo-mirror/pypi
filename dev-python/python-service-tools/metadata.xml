<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-service-toolsUtilities for working with python services.![PyPI - Python Version](https://img.shields.io/pypi/pyversions/python-service-tools) ![PyPI](https://img.shields.io/pypi/v/python-service-tools.svg)## Usage### logging_configDefault configuration for structlog. Configure json logging at the INFO level:```pythonfrom servicetools.logging_config import default_logging, LogFormat, Verbositydefault_logging(Verbosity.INFO, LogFormat.JSON)```Configure text logging at the DEBUG level:```pythonfrom servicetools.logging_config import default_logging, LogFormat, Verbositydefault_logging(Verbosity.DEBUG, LogFormat.TEXT)```Configure text logging at the DEBUG level and filter out external loggers:```pythonfrom servicetools.logging_config import default_logging, LogFormat, Verbositydefault_logging(Verbosity.DEBUG, LogFormat.TEXT, [&quot;extern_logger_1&quot;])```### Log timing information for a functionDecorator to add timing information to the logs:```pythonfrom servicetools.timer import timerimport structlog@timer(structlog.get_logger(__name__))def some_function():    pass```### Create a namespace relative patchCreate namespace relative patches:```pythonimport some_package.sub_package.another_package as under_testfrom servicetools.testing import relative_patch_makerpatch = relative_patch_maker(under_test.__name__)class TestStuff:    #equivalent to @unittest.mock.patch(&quot;some_package.sub_package.another_package.something_to_patch&quot;)    @patch(&quot;something_to_patch&quot;)    def test_something(self, patched):        under_test.something()        patched.assert_called_once()    #equivalent to @unittest.mock.patch(&quot;some_package.sub_package.another_package.something_else_to_patch&quot;)    @patch(&quot;something_else_to_patch&quot;)    def test_something(self, patched):        under_test.something()        patched.assert_called_once()```### Starlette Structlog middleware Middleware for [Starlette](https://www.starlette.io/) framework to log HTTP requests to structlog. Log entries will be made at the start and end ofeach request. Error requests (400s and 500s) will also be logged. Any calls that throw exceptions will be converted 500 responses.```pythonfrom servicetools.middleware import StructlogRequestMiddlewareimport structlogapp.add_middleware(StructlogRequestMiddleware(app, logger=structlog.get_logger(__name__)))```There are options to customize the logging:```pythonimport loggingimport structlogfrom servicetools.middleware import StructlogRequestMiddlewareapp.add_middleware(StructlogRequestMiddleware(    app,    logger=structlog.get_logger(__name__),    log_level=logging.DEBUG,  # Log at the DEBUG level.    ignored_status_codes={404},  # Do not log 404 errors.))```### Dramatiq Lazy Actor specificationSpecification for [dramatiq](https://dramatiq.io/) actors that allows them to connect a brokerexplicitly through the `init_actor` function rather than implicitly when they are created. This allowsyou to defer setting up your Rabbitmq broker to a time of your choosing. To create a new actor thatuses this behavior, set up your dramatiq actors like so```pythonimport dramatiqfrom servicetools.lazyactor import LazyActor@dramatiq.actor(actor_class=LazyActor)def test_func(data: str) -&gt; None:    print(data)```Now, whenever you have set up your Rabbitmq instance and connected to it, tell your actors to connectto it like so```pythonfrom dramatiq.brokers.rabbitmq import RabbitmqBrokerfrom pika import PlainCredentialsimport dramatiqbroker = RabbitmqBroker(    host=&quot;localhost&quot;,    credentials=PlainCredentials(username=&quot;user&quot;, password=&quot;password&quot;),)dramatiq.set_broker(broker)test_func.init_actor(broker=broker)```## Development GuideThis project uses [poetry](https://python-poetry.org/):```$ pip install poetry$ cd to/project/root$ poetry install```### TestingTesting is done via pytest.```$ poetry run pytest```</longdescription>
</pkgmetadata>