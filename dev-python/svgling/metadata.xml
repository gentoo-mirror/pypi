<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `svgling`: syntax trees in python + svg**Author**: Kyle Rawlins, [kgr@jhu.edu](kgr@jhu.edu)**Dependencies**: [`svgwrite`](https://pypi.org/project/svgwrite/), python 3**Repository**: [https://github.com/rawlins/svgling/](https://github.com/rawlins/svgling/)**Installation**: download and use setuptools, or `pip install svgling`**License**: MIT License## OverviewThe `svgling` package is a pure python package for doing single-pass renderingof linguistics-style constituent trees into SVG. It is primarily intended forintegrating with Jupyter notebooks, but could be used to generate SVG diagramsfor all sorts of other purposes. It involves no javascript and so will workin Jupyter without any plugins.The basic interface is pretty simple: pass a tree-describing object to`svgling.draw_tree` (e.g. a tuple consisting of a label and a sequence ofdaughter nodes, which may themselves be trees).    import svgling    svgling.draw_tree((&quot;S&quot;, (&quot;NP&quot;, (&quot;D&quot;, &quot;the&quot;), (&quot;N&quot;, &quot;elephant&quot;)), (&quot;VP&quot;, (&quot;V&quot;, &quot;saw&quot;), (&quot;NP&quot;, (&quot;D&quot;, &quot;the&quot;), (&quot;N&quot;, &quot;rhinoceros&quot;)))))This produces an SVG image like the following:![example sentence](https://raw.githubusercontent.com/rawlins/svgling/master/demotree.svg?sanitize=true)The tree drawing code accepts two main tree formats: lisp-style trees made fromlists of lists (or tuples of tuples), with node labels as strings, or trees fromthe [`nltk`](https://www.nltk.org/) package, i.e. objects instantiating the[`nltk.tree.Tree`](https://www.nltk.org/_modules/nltk/tree.html) API. Thefollowing nltk code, as long as `svgling` has been imported, produces anidentical tree diagram to the above example, though by a very different route:    import svgling    nltk.Tree.fromstring(&quot;(S (NP (D the) (N elephant)) (VP (V saw) (NP (D the) (N rhinoceros))))&quot;)(That is, `svgling` monkey-patches NLTK to use SVG-based tree drawing code. Youmay also want to call `svgling.disable_nltk_png()` to fully disable thedefault NLTK png renderer, especially if you're on a mac or windows 64, or arerunning NLTK on a headless device; see nltk issue[#1887](https://github.com/nltk/nltk/issues/1887) for use-cases).)Beyond basic tree-drawing, the package supports a number of flourishes likemovement arrows. For documentation and examples, see the three .ipynb files inthe root of this repository: (links below to nbviewer static rendered versions):* [Overview.ipynb](https://nbviewer.jupyter.org/github/rawlins/svgling/blob/master/Overview.ipynb)* [svgling Gallery.ipynb](https://nbviewer.jupyter.org/github/rawlins/svgling/blob/master/svgling%20Gallery.ipynb)* [svgling Manual.ipynb](https://nbviewer.jupyter.org/github/rawlins/svgling/blob/master/svgling%20Manual.ipynb)## Core design principles and goals1. Be well suited for *programmatic* generation of tree diagrams (not justhand-customized diagrams).2. Be equally suited for theoretical linguistics and computationallinguistics/NLP, at least for cases where the latter is targeting constituenttrees. (This package is not aimed at dependency trees/graphs.)3. Do as much as possible with pure python (as opposed to python+javascript, orpython+tk, or python+dot, or...).## Strengths and limitationsThe `svgling` package does its rendering in one pass -- it takes a treestructure as input, produces an svg output, and that's it. Because of this, itis extremely simple to use in Jupyter, and no messing with plugins or Jupytersettings should be necessary. Because it is SVG-based, scaling and embedding inany web context should work smoothly. It also has minimal dependencies, justone package that provides an abstraction layer over generating svg. (If you'reinterested in programmatic diagramming in svg for Jupyter, I do recommend[`svgwrite`](https://github.com/mozman/svgwrite), it's under active developmentand has a very pleasant API + good documentation.)Single-pass rendering also places limitations on what can be done. One of thechallenges is that it mostly uses absolute position, and the exact position andwidth of text elements can't be determined without actually rendering to somedevice and seeing what happens. In addition, the exact details of rendering arein various ways at the mercy of the rendering device. This all means that`svgling` uses a bunch of tricks to estimate node size and width, and won'talways be perfect on all devices. This situation also places some hardlimitations on how far `svgling` can be extended without adding javascript orother multi-pass rendering techniques. For example, I would eventually like toallow mathjax in nodes, and allow nodes with complex / multi-line shapes, but atthe moment this does not seem possible in pure SVG without javascript on theclient side. The package does provide basic support for hybrid HTML/SVG treediagrams that allow complex nodes, including MathJax, but with substantiallimitations.There are many things that it might be nice to add to this package; if you find`svgling` useful, have any requests, or find any bugs, please let me know.## CompatibilityThe SVG files produced by `svgling` should be compatible with all major browsers(Chrome, Firefox, Safari, Edge) on both desktop and mobile; if you find acompatibility issue with some browser, please [report it as abug](https://github.com/rawlins/svgling/issues). Outside of browsers, it isworth noting that `svgling` uses nested `svg` tags, which seem to occasionallyprovide a challenge for software that loads SVGs. I welcome reports oncompatibility with software for editing SVG, but here's a partial list:* Inkscape: Works as long as `relative_units=False` is passed as a generation  option. The combination of relative units and nested SVGs seems to be poorly  handled.* LibreOffice Draw: reported to work. Exports a non-nested SVG (which is  compatible with InkScape.)* Adobe Illustrator: no idea, reports welcome!</longdescription>
</pkgmetadata>