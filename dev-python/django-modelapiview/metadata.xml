<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django_APIViewImplement a base generic view for handling model RESTful endpoints## Usage```py# models.pyfrom django.db import modelsfrom django_modelapiview import JSONMixinclass MyModel(JSONMixin, models.Model):    &quot;&quot;&quot;    Declare your model as you usually do but    add a json_fields list    &quot;&quot;&quot;    json_fields:list[str] = ['text', 'image', 'fk', 'fk_reverse', 'm2m', 'my_method']    text = models.TextField()    image = models.ImageField()    fk = models.ForeignKey(...)    # fk_reverse    m2m = models.ManyToManyField(...)    def my_method(self):        return &quot;my custom value&quot;``````py# views.pyfrom django_modelapiview import APIViewfrom django_modelapiview.responses import APIResponsefrom .models import MyModelclass MyView(APIView):    # Required    route:str = &quot;myroute&quot; # The url to access your view    # Optional    enforce_authentification:bool = True # Should this model be restricted with Token access    def get(self, request, *args, **kwargs) -&gt; APIResponse:... # One of head, options, get...``````py# views.pyfrom django_modelapiview import ModelAPIViewfrom .models import MyModelclass MyModelView(ModelAPIView):    # Required    model:JSONMixin = MyModel # Your model    route:str = &quot;mymodels&quot; # The url to access your collection    # Optional    queryset:QuerySet = MyModel.objects.all() # A custom base queryset (will be affected by query filters)    singular_name:str = &quot;my model&quot; # Singular name of your model for reason message    plural_name:str = &quot;my models&quot; # Plural name of your model for reason message    enforce_authentification:bool = True # Should this model be restricted with Token access    query_parameters:list[tuple[str, Callable[[QuerySet, object], QuerySet]]] = [        ('order_by', lambda queryset, field_names: queryset.order_by(*field_names.split(&quot;,&quot;)) if field_names else queryset),        ('limit', lambda queryset, limit: queryset[:int(limit)] if limit else queryset), # Should be last since sliced QuerySet can't be filtered anymore    ]    def get(self, request, *args, **kwargs) -&gt; APIResponse:... # One of head, options, get...``````py# urls.pyfrom django.urls import path, includefrom . import viewsurlpatterns = [    path(&quot;&quot;, include(&quot;django_routeview&quot;)), # Django RouteView are used as based class for APIView in order to automatically register them]``````sh# You can use query parameters like order_by or limit (or customs):https://myhost.com/api/mymodel/?order_by=-id&amp;limit=1 # Will inverse order by id and limit to one : get the last id# Or you can use Django defined filters:https://myhost.com/api/mymodel/?id__in=1,2,3&amp;foreignkey__id__in=2,3&amp;field__lte=5# And finally both:https://myhost.com/api/mymodel/?manytomany__in=2,3&amp;field__lte=5&amp;limit=10```It also supports translation:First enable it as an app```py#settings.pyINSTALLED_APPS = [    ...    'django_modelapiview',    ...]```Then change the language using GET parameters:```sh#Currently supports : enlish(en)(default), fran√ßais(fr)https://myhost.com/api/mymodel/?lang=fr```## Using base viewsDjango ModelAPIView provides 2 base views:* LoginView: to handle authentification (using the default Django authentification system)* URLsView: to list the urls availables### Usage```py# urls.pyfrom django.urls import pathfrom django_modelapiview.views import LoginView, URLsView # Importing them is enough```## ErrorsIf you get a &quot;Verb not implemented&quot; reason from your endpoint but you are sure to have defined it.You probable just forgot the `-&gt; APIResponse` return type hint.</longdescription>
</pkgmetadata>