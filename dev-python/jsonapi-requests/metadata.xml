<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jsonapi-requests[![Build Status](https://app.travis-ci.com/socialwifi/jsonapi-requests.svg?branch=master)](https://app.travis-ci.com/socialwifi/jsonapi-requests)[![Coverage Status](https://coveralls.io/repos/github/socialwifi/jsonapi-requests/badge.svg)](https://coveralls.io/github/socialwifi/jsonapi-requests)[![Latest Version](https://img.shields.io/pypi/v/jsonapi-requests.svg)](https://pypi.python.org/pypi/jsonapi-requests/)[![Supported Python versions](https://img.shields.io/pypi/pyversions/jsonapi-requests.svg)](https://pypi.python.org/pypi/jsonapi-requests/)[![Wheel Status](https://img.shields.io/pypi/wheel/jsonapi-requests.svg)](https://pypi.python.org/pypi/jsonapi-requests/)[![License](https://img.shields.io/pypi/l/jsonapi-requests.svg)](https://github.com/socialwifi/jsonapi-requests/blob/master/LICENSE)Python client implementation for json api. http://jsonapi.org/----## Usage example```pythonimport jsonapi_requestsapi = jsonapi_requests.Api.config({    'API_ROOT': 'https://localhost/api/2.0',    'AUTH': ('basic_auth_login', 'basic_auth_password'),    'VALIDATE_SSL': False,    'TIMEOUT': 1,})endpoint = api.endpoint('networks/cd9c124a-acc3-4e20-8c02-3a37d460df22/available-profiles')response = endpoint.get()for profile in response.data:    print(profile.attributes['name'])# Example output: &quot;162 Sushi&quot;endpoint = api.endpoint('cookies')endpoint.post(object=jsonapi_requests.JsonApiObject(    type='cookies',    attributes={        'uuid': '09d3a4fff8d64335a1ee9f1d9d054161',         'domain': 'some.domain.pl'    },))# Example output: &lt;ApiResponse({'data': {'id': '81', 'attributes': {'uuid': '09d3a4fff8d64335a1ee9f1d9d054161', 'domain': 'some.domain.pl'}, 'type': 'cookies'}})&gt;```## Orm exampleLets say we have api endpoint: `https://localhost/api/2.0/car/2`which returns```json{    &quot;data&quot;:{        &quot;id&quot;: &quot;2&quot;,        &quot;type&quot;: &quot;car&quot;,        &quot;attributes&quot;: {            &quot;color&quot;: &quot;red&quot;        },        &quot;relationships&quot;: {            &quot;driver&quot;: {                &quot;data&quot;: {                    &quot;id&quot;: &quot;3&quot;,                     &quot;type&quot;: &quot;person&quot;                }            }        }    },    &quot;included&quot;: [        {            &quot;id&quot;: &quot;3&quot;,            &quot;type&quot;: &quot;person&quot;,            &quot;attributes&quot;: {                &quot;name&quot;: &quot;Kowalski&quot;            },            &quot;relationships&quot;: {                &quot;married-to&quot;: {                    &quot;data&quot;: {                        &quot;id&quot;: &quot;4&quot;,                         &quot;type&quot;: &quot;person&quot;                    }                }            }        },        {            &quot;id&quot;: &quot;4&quot;,            &quot;type&quot;: &quot;person&quot;,            &quot;attributes&quot;: {                &quot;name&quot;: &quot;Kowalska&quot;            },            &quot;relationships&quot;: {                &quot;married-to&quot;: {                    &quot;data&quot;: {                        &quot;id&quot;: &quot;3&quot;,                         &quot;type&quot;: &quot;person&quot;                    }                }            }        },    ]}```Then we can run:```pythonimport jsonapi_requestsapi = jsonapi_requests.orm.OrmApi.config({    'API_ROOT': 'https://localhost/api/2.0',    'AUTH': ('basic_auth_login', 'basic_auth_password'),    'VALIDATE_SSL': False,    'TIMEOUT': 1,})class Person(jsonapi_requests.orm.ApiModel):    class Meta:        type = 'person'        api = api    name = jsonapi_requests.orm.AttributeField('name')    married_to = jsonapi_requests.orm.RelationField('married-to')class Car(jsonapi_requests.orm.ApiModel):    class Meta:        type = 'car'        api = api    color = jsonapi_requests.orm.AttributeField('color')    driver = jsonapi_requests.orm.RelationField('driver')car = Car.from_id(&quot;2&quot;)car.color # request happens here# Example output: 'red'car.driver.name# Example output:  'Kowalski'car.driver.married_to.name# Example output: 'Kowalska'car.driver.married_to.married_to.name# Example output: 'Kowalski'```## Authorization HTTP header forwarding in Flask applicationWhen using jsonapi\_requests with Flask, we can set `jsonapi_requests.auth.FlaskForwardAuth()` as `AUTH` configuration option to copy authorization header from current request context.It can be useful when fetching resources from different microservices.Installation with flask support:```bashpip install jsonapi-requests[flask]```Example usage:```pythonimport jsonapi_requestsapi = jsonapi_requests.Api.config({    'API_ROOT': 'https://localhost/api/2.0',    'AUTH': jsonapi_requests.auth.FlaskForwardAuth(),})```## DocumentationFor more documentation check our [wiki](https://github.com/socialwifi/jsonapi-requests/wiki).</longdescription>
</pkgmetadata>