<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fhirstarter&lt;p&gt;  &lt;a href=&quot;https://github.com/canvas-medical/fhirstarter/actions/workflows/test.yml&quot;&gt;    &lt;img src=&quot;https://github.com/canvas-medical/fhirstarter/actions/workflows/test.yml/badge.svg&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/fhirstarter/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/fhirstarter&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/fhirstarter/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/fhirstarter&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/fhirstarter/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/l/fhirstarter&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/psf/black&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000&quot;&gt;  &lt;/a&gt;&lt;/p&gt;An ASGI FHIR API framework built on top of [FastAPI](https://fastapi.tiangolo.com) and[FHIR Resources](https://pypi.org/project/fhir.resources/).The only version of FHIR that is currently supported is 4.0.1.## Installation```bashpip install fhirstarter```## Features* Automatic, standardized API route creation* Automatic validation of inputs and outputs through the use of FHIR Resources Pydantic models* Automatically-generated capability statement that can be customized, and a capability statement  API route* An exception-handling framework that produces FHIR-friendly responses (i.e. OperationOutcomes)* Automatically-generated, integrated documentation generated from the FHIR specification* Custom search parameters for search endpoints### DisclaimerFHIRStarter was built based on the business needs of Canvas Medical. At any point in time, it maynot be broadly applicable to the industry at large. Canvas Medical open-sourced the project so thatit can be used by healthcare software developers whose needs it might also meet. Ongoing support anddevelopment will be based on the business needs of Canvas Medical.## BackgroundFHIRStarter uses a provider-decorator pattern. Developers can write functions that implement FHIRinteractions -- such as create, read, search-type, and update -- and plug them into the framework.FHIRStarter then automatically creates FHIR-compatible API routes from these developer-providedfunctions. FHIR interactions that are supplied must use the resource classes defined by the[FHIR Resources](https://pypi.org/project/fhir.resources/) Python package, which is a collection ofPydantic models for FHIR resources.In order to stand up a FHIR server, all that is required is to create a FHIRStarter and aFHIRProvider instance, register a FHIR interaction with the provider, add the provider to theFHIRStarter instance, and pass the FHIRStarter instance to an ASGI server.## Usage### Currently-supported functionalityFHIRStarter supports create, read, search-type, and update endpoints across all FHIR R4 resourcetypes, and will automatically generate the `/metadata` capabilities statement endpoint.### ExampleA detailed example is available here: [example.py](https://github.com/canvas-medical/fhirstarter/blob/main/fhirstarter/scripts/example.py).```pythonimport uvicornfrom fhir.resources.fhirtypes import Idfrom fhir.resources.patient import Patientfrom fhirstarter import FHIRProvider, FHIRStarter, InteractionContextfrom fhirstarter.exceptions import FHIRResourceNotFoundError# Create the appapp = FHIRStarter()# Create a providerprovider = FHIRProvider()# Register the patient read FHIR interaction with the provider@provider.read(Patient)async def patient_read(context: InteractionContext, id_: Id) -&gt; Patient:    # Get the patient from the database    patient = ...    if not patient:        raise FHIRResourceNotFoundError    return Patient(        **{            # Map patient from database to FHIR Patient structure        }    )# Add the provider to the appapp.add_providers(provider)if __name__ == &quot;__main__&quot;:    # Start the server    uvicorn.run(app)```### Custom search parametersCustom search parameters can be defined in a configuration file that can be passed to the app oncreation.```toml[search-parameters.Patient.nickname]type = &quot;string&quot;description = &quot;Nickname&quot;uri = &quot;https://hostname/nickname&quot;include-in-capability-statement = true```Adding a custom search parameter via configuration allows this name to be used as an argument whendefining a search-type interaction handler and also adds this search parameter to the APIdocumentation for the search endpoint.### Capability statementIt is possible to customize the capability statement by setting a capability statement modifier:```pythondef amend_capability_statement(    capability_statement: MutableMapping[str, Any], request: Request, response: Response) -&gt; MutableMapping[str, Any]:    capability_statement[&quot;publisher&quot;] = &quot;Canvas Medical&quot;    return capability_statementapp.set_capability_statement_modifier(amend_capability_statement)```### FastAPI dependency injectionFastAPI's dependency injection is exposed at various levels:* **application**: the `__init__` method on the FHIRStarter class* **provider**: the `__init__` method on the FHIRProvider class* **handler**: the `create`, `read`, `search_type`, or `update` decorator used to add a handler to a providerDependencies specified at the application level will be injected into all routes in the application.Dependencies specified at the provider level will be injected into all routes that are added tothe application from that specific provider.Dependencies specified at the handler level only apply to that specific FHIR interaction.## Forward compatibilityAt some point in the future, it will be necessary to support FHIR R5. How this might be supported ona server that continues to support R4 has not yet been determined (e.g. a header that specifies theversion, adding the FHIR version to the URL path, etc.). It may be necessary to support alterationof how the URL path is specified through the provider construct. Currently, the FHIR version is notpart of the URL path, so the default behavior is that an API route defined as `/Patient` will be anR4 endpoint.</longdescription>
</pkgmetadata>