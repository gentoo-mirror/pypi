<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># setuptools_scm[![github ci](https://github.com/pypa/setuptools_scm/workflows/python%20tests+artifacts+release/badge.svg)](https://github.com/pypa/setuptools_scm/actions)[![tidelift](https://tidelift.com/badges/package/pypi/setuptools-scm) ](https://tidelift.com/subscription/pkg/pypi-setuptools-scm?utm_source=pypi-setuptools-scm&amp;utm_medium=readme)## about[setuptools-scm] extracts Python package versions from `git` or`hg` metadata instead of declaring them as the version argumentor in an SCM managed file.Additionally, [setuptools-scm] provides setuptoolswith a list of files that are managed by the SCM &lt;br/&gt;(i.e. it automatically adds **all of** the SCM-managed files to the sdist).&lt;br/&gt;Unwanted files must be excluded via `MANIFEST.in`.## `pyproject.toml` usageThe preferred way to configure [setuptools-scm] is to authorsettings in a `tool.setuptools_scm` section of `pyproject.toml`.This feature requires setuptools 60 or later.First, ensure that [setuptools-scm] is present during the project'sbuild step by specifying it as one of the build requirements.```toml[build-system]requires = [    &quot;setuptools&gt;=60&quot;,    &quot;setuptools-scm&gt;=8.0&quot;]```That will be sufficient to require [setuptools-scm] for projectsthat support [PEP 518] like [pip] and [build].[pip]: https://pypi.org/project/pip[build]: https://pypi.org/project/build[PEP 518]: https://peps.python.org/pep-0518/To enable version inference, you need to set the versiondynamically in the `project` section of `pyproject.toml`:```toml title=&quot;pyproject.toml&quot;[project]# version = &quot;0.0.1&quot;  # Remove any existing version parameter.dynamic = [&quot;version&quot;][tool.setuptools_scm]```Additionally, a version file can be written by specifying:```toml title=&quot;pyproject.toml&quot;[tool.setuptools_scm]version_file = &quot;pkg/_version.py&quot;```Where `pkg` is the name of your package.If you need to confirm which version string is being generated or debug the configuration,you can install [setuptools-scm] directly in your working environment and run:[setuptools-scm]: https://github.com/pypa/setuptools_scm```console$ python -m setuptools_scm# To explore other options, try:$ python -m setuptools_scm --help```## Interaction with Enterprise DistributionsSome enterprise distributions like RHEL7ship rather old setuptools versions.In those cases its typically possible to build by using an sdist against `setuptools_scm&lt;2.0`.As those old setuptools versions lack sensible types for versions,modern [setuptools-scm] is unable to support them sensibly.It's strongly recommended to build a wheel artifact using modern Python and setuptools,then installing the artifact instead of trying to run against old setuptools versions.## Code of ConductEveryone interacting in the [setuptools-scm] project's codebases, issuetrackers, chat rooms, and mailing lists is expected to follow the[PSF Code of Conduct].[PSF Code of Conduct]: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md## Security ContactTo report a security vulnerability, please use the[Tidelift security contact](https://tidelift.com/security).Tidelift will coordinate the fix and disclosure.</longdescription>
</pkgmetadata>