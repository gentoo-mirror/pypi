<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.5811772.svg   :target: https://doi.org/10.5281/zenodo.5811772   :alt: 10.5281/zenodo.5811772.. image:: https://github.com/astropy/pytest-arraydiff/workflows/CI/badge.svg    :target: https://github.com/astropy/pytest-arraydiff/actions    :alt: CI Status.. image:: https://img.shields.io/pypi/v/pytest-arraydiff.svg    :target: https://pypi.org/project/pytest-arraydiff    :alt: PyPI StatusAbout-----This is a `py.test &lt;http://pytest.org&gt;`__ plugin to facilitate thegeneration and comparison of data arrays produced during tests, in particularin cases where the arrays are too large to conveniently hard-code themin the tests (e.g. ``np.testing.assert_allclose(x, [1, 2, 3])``).The basic idea is that you can write a test that generates a Numpy array (orother related objects depending on the format, e.g. pandas DataFrame).You can then either run thetests in a mode to **generate** reference files from the arrays, or you can runthe tests in **comparison** mode, which will compare the results of the tests tothe reference ones within some tolerance.At the moment, the supported file formats for the reference files are:-  A plain text-based format (based on Numpy ``loadtxt`` output)-  The FITS format (requires `astropy &lt;http://www.astropy.org&gt;`__). With this   format, tests can return either a Numpy array for a FITS HDU object.-  A pandas HDF5 format using the pandas HDFStoreFor more information on how to write tests to do this, see the **Using**section below.Installing----------This plugin is compatible with Python 2.7, and 3.5 and later, andrequires `pytest &lt;http://pytest.org&gt;`__ and`numpy &lt;http://www.numpy.org&gt;`__ to be installed.To install, you can do::    pip install pytest-arraydiffYou can check that the plugin is registered with pytest by doing::    py.test --versionwhich will show a list of plugins::    This is pytest version 2.7.1, imported from ...    setuptools registered plugins:      pytest-arraydiff-0.1 at ...Using-----To use, you simply need to mark the function where you want to comparearrays using ``@pytest.mark.array_compare``, and make sure that thefunction returns a plain Numpy array::    python    import pytest    import numpy as np    @pytest.mark.array_compare    def test_succeeds():        return np.arange(3 * 5 * 4).reshape((3, 5, 4))To generate the reference data files, run the tests with the``--arraydiff-generate-path`` option with the name of the directorywhere the generated files should be placed::    py.test --arraydiff-generate-path=referenceIf the directory does not exist, it will be created. The directory willbe interpreted as being relative to where you are running ``py.test``.Make sure you manually check the reference arrays to ensure they arecorrect.Once you are happy with the generated data files, you should move themto a sub-directory called ``reference`` relative to the test files (thisname is configurable, see below). You can also generate the baselinearrays directly in the right directory.You can then run the tests simply with::    py.test --arraydiffand the tests will pass if the arrays are the same. If you omit the``--arraydiff`` option, the tests will run but will only check that thecode runs without checking the output arrays.Options-------The ``@pytest.mark.array_compare`` marker take an argument to specifythe format to use for the reference files:.. code:: python    @pytest.mark.array_compare(file_format='text')    def test_array():        ...The default file format can also be specified using the``--arraydiff-default-format=&lt;format&gt;`` flag when running ``py.test``,and ``&lt;format&gt;`` should be either ``fits`` or ``text``.The supported formats at this time are ``text`` and ``fits``, andcontributions for other formats are welcome. The default format is``text``.Additional arguments are the relative and absolute tolerances for floatingpoint values (which default to 1e-7 and 0, respectively):.. code:: python    @pytest.mark.array_compare(rtol=20, atol=0.1)    def test_array():        ...You can also pass keyword arguments to the writers using the``write_kwargs``. For the ``text`` format, these arguments are passed to``savetxt`` while for the ``fits`` format they are passed to Astropy's``fits.writeto`` function... code:: python    @pytest.mark.array_compare(file_format='fits', write_kwargs={'output_verify': 'silentfix'})    def test_array():        ...Other options include the name of the reference directory (whichdefaults to ``reference`` ) and the filename for the reference file(which defaults to the name of the test with a format-dependentextension)... code:: python    @pytest.mark.array_compare(reference_dir='baseline_arrays',                                   filename='other_name.fits')    def test_array():        ...The reference directory in the decorator above will be interpreted asbeing relative to the test file. Note that the baseline directory canalso be a URL (which should start with ``http://`` or ``https://`` andend in a slash).Finally, you can also set a custom baseline directory globally whenrunning tests by running ``py.test`` with::    py.test --arraydiff --arraydiff-reference-path=baseline_arraysThis directory will be interpreted as being relative to where the testsare run. In addition, if both this option and the ``reference_dir``option in the ``array_compare`` decorator are used, the one in thedecorator takes precedence.Test failure example--------------------If the arrays produced by the tests are correct, then the test willpass, but if they are not, the test will fail with a message similar tothe following::    E               AssertionError:    E    E               a: /var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/tmpbvjkzt_q/test_to_mask_rect-mode_subpixels-subpixels_18.txt    E               b: /var/folders/zy/t1l3sx310d3d6p0kyxqzlrnr0000gr/T/tmpbvjkzt_q/reference-test_to_mask_rect-mode_subpixels-subpixels_18.txt    E    E               Not equal to tolerance rtol=1e-07, atol=0    E    E               (mismatch 47.22222222222222%)    E                x: array([[ 0.      ,  0.      ,  0.      ,  0.      ,  0.404012,  0.55    ,    E                        0.023765,  0.      ,  0.      ],    E                      [ 0.      ,  0.      ,  0.      ,  0.112037,  1.028704,  1.1     ,...    E                y: array([[ 0.      ,  0.      ,  0.      ,  0.      ,  0.367284,  0.5     ,    E                        0.021605,  0.      ,  0.      ],    E                      [ 0.      ,  0.      ,  0.      ,  0.101852,  0.935185,  1.      ,...The file paths included in the exception are then available forinspection.Running the tests for pytest-arraydiff--------------------------------------If you are contributing some changes and want to run the tests, firstinstall the latest version of the plugin then do::    cd tests    py.test --arraydiffThe reason for having to install the plugin first is to ensure that theplugin is correctly loaded as part of the test suite.</longdescription>
</pkgmetadata>