<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># envoy_data_planeA conversion of envoyproxy/data-plane-api protocol buffers into Python dataclasses using betterproto## Intended usageThis is a helper library that allows importing every type available in the envoy API.One use-case might be generating Envoy configuration using a Python script.In my case, I will use this library in my custom built control-plane, so that I have autocompletion in my IDE, and a basic form of validation.In future, this may also help with building an idiomatic GRPC control-plane in Python.## InstallationThis package is published to PyPI:```shell scriptpython -m pip install envoy_data_plane```## Installing specific XDS revisionsThere are branches available with compiled python protobuf files.  To install them, you can use the following syntax:```shell scriptpip install git+https://github.com/cetanu/envoy_data_plane@&lt;BRANCH NAME&gt;```Examples:```pip install git+https://github.com/cetanu/envoy_data_plane@envoy_v1.13.7pip install git+https://github.com/cetanu/envoy_data_plane@envoy_v1.16.2pip install git+https://github.com/cetanu/envoy_data_plane@envoy_v1.17.2pip install git+https://github.com/cetanu/envoy_data_plane@envoy_v1.18.2pip install git+https://github.com/cetanu/envoy_data_plane@envoy_v1.19.0```Not all versions may be available. Raise an issue if you need another one added.## Example```pythonimport stringcaseimport jsonimport envoy_data_plane.envoy.api.v2 as envoyroute_config = envoy.RouteConfiguration(    name='MyRouteConfig',    virtual_hosts=[        envoy.route.VirtualHost(            name='SomeWebsite',            domains=['foobar.com'],            routes=[                envoy.route.Route(                    name='catchall',                    match=envoy.route.RouteMatch(                        prefix='/'                    ),                    direct_response=envoy.route.DirectResponseAction(                        status=200,                        body=envoy.core.DataSource(                            inline_string='Hello there'                        )                    )                )            ]        )    ])response = envoy.DiscoveryResponse(    version_info='0',    resources=[        route_config    ],)print(    json.dumps(response.to_dict(casing=stringcase.snakecase), indent=2))```Result:```{  &quot;version_info&quot;: &quot;0&quot;,  &quot;resources&quot;: [    {      &quot;name&quot;: &quot;MyRouteConfig&quot;,      &quot;virtual_hosts&quot;: [        {          &quot;name&quot;: &quot;SomeWebsite&quot;,          &quot;domains&quot;: [            &quot;foobar.com&quot;          ],          &quot;routes&quot;: [            {              &quot;name&quot;: &quot;catchall&quot;,              &quot;match&quot;: {                &quot;prefix&quot;: &quot;/&quot;,                &quot;headers&quot;: [],                &quot;query_parameters&quot;: []              },              &quot;direct_response&quot;: {                &quot;status&quot;: 200,                &quot;body&quot;: {                  &quot;inline_string&quot;: &quot;Hello there&quot;                }              },              &quot;request_headers_to_add&quot;: [],              &quot;response_headers_to_add&quot;: []            }          ],          &quot;virtual_clusters&quot;: [],          &quot;rate_limits&quot;: [],          &quot;request_headers_to_add&quot;: [],          &quot;response_headers_to_add&quot;: []        }      ],      &quot;response_headers_to_add&quot;: [],      &quot;request_headers_to_add&quot;: []    }  ]}```</longdescription>
</pkgmetadata>