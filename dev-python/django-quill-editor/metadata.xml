<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-quill-editor![PyPI](https://img.shields.io/pypi/v/django-quill-editor)**django-quill-editor** makes [Quill.js](https://quilljs.com/) easy to use on Django Forms and admin sites- **No configuration required for static files!**- The entire code for inserting WYSIWYG editor is less than 30 lines- It can be used in both admin and Django views![django-quill-editor](https://raw.githubusercontent.com/LeeHanYeong/django-quill-editor/master/_assets/django-quill-editor-sample.png)## Live Demo#### https://quill.lhy.kr/- Form | https://quill.lhy.kr/posts/create/normal/- ModelForm | https://quill.lhy.kr/posts/create/- Form (Initial HTML) | https://quill.lhy.kr/posts/create/normal/html/- Form (Initial Text) | https://quill.lhy.kr/posts/create/normal/text/- Admin | https://quill.lhy.kr/admin/login/## DocumentationThe full document is in [https://django-quill-editor.readthedocs.io/](https://django-quill-editor.readthedocs.io/), including everything about how to use the Form or ModelForm, and where you can add custom settings.Please refer to the **QuickStart** section below for simple usage.## QuickStart### Setup- Install `django-quill-editor` to your Python environment  &gt; Requires Python 3.7 or higher and Django 3.1 or higher.  ```shell  pip install django-quill-editor  ```- Add `django_quill` to `INSTALLED_APPS` in `settings.py`  ```python  # settings.py  INSTALLED_APPS = [      'django.contrib.admin',      ...      'django_quill',  ]  ```### Making ModelAdd `QuillField` to the **Model class** you want to use.&gt; 1. App containing models.py must be added to INSTALLED_APPS&gt; 2. After adding the app, you need to run makemigrations and migrate to create the DB table.```python# models.pyfrom django.db import modelsfrom django_quill.fields import QuillFieldclass QuillPost(models.Model):    content = QuillField()```### Using in adminJust register the Model in **admin.py** of the app.```pythonfrom django.contrib import adminfrom .models import QuillPost@admin.register(QuillPost)class QuillPostAdmin(admin.ModelAdmin):    pass```![admin-sample](https://raw.githubusercontent.com/LeeHanYeong/django-quill-editor/master/_assets/admin-sample.png)## Running the Live Demo project in localThe live demo is a deployment of the **&quot;playground&quot;** package, which is a django application within this library.  After cloning or downloading the repository, you can try running the live demo locally.**A Python virtual environment is required to run the project.**```shell# [Optional] We recommend that you start after creating a folder for your project.mkdir ~/projectscd projects# Clone repositorygit clone git@github.com:LeeHanYeong/django-quill-editor.git# Go to the project directory and apply the virtual environmentcd django-quill-editor# [apply venv]# Go to the playground packagecd playground# Install requirementspip install -r requirements.txt# Run migrate and runserverpython manage.py migratepython manage.py runserver```After the above operation, the live demo site works at localhost:8000.## ContributingAs an open source project, we welcome contributions.The code lives on [GitHub](https://github.com/LeeHanYeong/django-quill-editor)## Distribution tips (for owners)### Installation```shell# blackbrew install black# pre-commitbrew install pre-commitpre-commit install```### PyPI Release```shellpoetry install  # Install PyPI distribution packagespython deploy.py```### Sphinx docs```shellbrew install sphinx-doc  # macOS```#### Local```cd docsmake html# ...# The HTML pages are in _build/html.cd _build/htmlpython -m http.server 3001``` ### docker-compose up (in local)```shelldocker-compose -f docker-compose-local.yml up --build --force-recreate --remove-orphans```</longdescription>
</pkgmetadata>