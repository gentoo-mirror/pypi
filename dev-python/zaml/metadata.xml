<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># üöÄ zamlFast YAML 1.2 parsing library for Python 3.6+ üêç## What's This?Proof-of-concept for my PyCon DE 2022 [talk](https://2022.pycon.de/program/DFWSQR/), [video](https://www.youtube.com/watch?v=O0MmmZxdct4), **Speeding Up Python with Zig**, not yet recommended for production use!Library with the following objectives: - [x] Written in pure Zig, importing `Python.h` headers directly, no FFI, `ctypes` or `cffi`. - [x] Compiled using the Zig toolchain / CLI, no other tool (eg. `clang`) required. - [x] Tested to be compatible with mac OSX, Linux and Windows. - [x] Installable via PyPI - [ ] Should not require Zig toolchain locally in order to install and use. - [ ] Fastest available YAML 1.2 parser for Python.Help wanted to achieve the full objectives, PRs welcome.### Installation```pip install zaml```**Note**: currently source distribution only, ie. `sdist` - no binary `wheels` (yet), therefore requires Zig 0.10.0 installed locally. Any other Zig version is untested.### Installing LocallySome pre-requisites (linting etc.), `pyenv` also recommended:```bashpre-commit installpre-commit run --all-files```The simplest possible extension module is a module with one function, that takes no arguments and returns an integer. This repo demonstrates a pure Zig module that does exactly that:```bashpython -m venv .venvsource .venv/bin/activatepip install -e .```### TestsTests that the most basic possible Zig extension can in-fact be installed and returns the expected result:```bashpython test.py```### BenchmarkTo run a benchmark of the current `zaml` prototype (also runs in CI and asserts that the YAML structure is correctly parsed):```bashcd benchmarkpython benchmark.py```Results on my 2,3 GHz Quad-Core Intel Core i7 Mac:```bashRunning benchmarks...Benchmark results:zaml took 0.89 secondsPyYAML CSafeLoader took 13.36 secondsruamel took 38.86 secondsPyYAML SafeLoader took 81.78 seconds```### CreditsWould not exist without [kubkon's](https://github.com/kubkon), `zig-yaml`: https://github.com/kubkon/zig-yaml### Cross-platform Local Testing#### LinuxTo test in Linux, the easiest way is probably to use Docker:```bashdocker run --name zaml -v $PWD:/root/zaml -it fedora```This kicks you into a shell in a running a container with this library mounted inthe `/root/zaml` directory. Changes you make on your host machine will be immediatelyreflected in the container.Install Python 3 headers, zig and test the library:```bashdnf install zig python3-develcd /root/zamlpython3 -m venv .venvlinuxsource .venvlinux/bin/activatepip install -e .```To re-attach to the container after exiting:```bashdocker start -ia zaml```#### WindowsTo test in Windows from a Mac, the easiest way I have found is to use [Parallels](https://www.parallels.com/).#### MacOSXI am writing this `README` on a Mac. Consequently, I have not attempted testing this library in MacOSX from anotheroperating system host. If you manage this, please do add documentation about it here.### Publishing to PyPI **Note**: Temporary instructions (until full CI setup).You may need to upgrade `build` and `twine` (with your `virtualenv` activated):```python -m pip install --upgrade buildpython -m pip install --upgrade twine```Then:```rm -rf distpython3 -m build --sdistpython3 -m twine upload --repository pypi dist/*```</longdescription>
</pkgmetadata>