<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenAPIArt [![CICD](https://github.com/open-traffic-generator/openapiart/workflows/CICD/badge.svg)](https://github.com/open-traffic-generator/openapiart/actions)[![Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)[![pypi](https://img.shields.io/pypi/v/openapiart.svg)](https://pypi.org/project/openapiart)[![python](https://img.shields.io/pypi/pyversions/openapiart.svg)](https://pypi.python.org/pypi/openapiart)[![license](https://img.shields.io/badge/license-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)[![Total alerts](https://img.shields.io/lgtm/alerts/g/open-traffic-generator/openapiart.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/open-traffic-generator/openapiart/alerts/)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/open-traffic-generator/openapiart.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/open-traffic-generator/openapiart/context:python)The `OpenAPIArt` (OpenAPI Artifact Generator) python package does the following:- pre-processes OpenAPI yaml files according to the [MODELGUIDE](../main/MODELGUIDE.md)- using the path keyword bundles all dependency OpenAPI yaml files into a single openapi.yaml file- post-processes any [MODELGUIDE](../main/MODELGUIDE.md) extensions- validates the bundled openapi.yaml file- generates a `.proto` file from the openapi file- optionally generates a static redocly documentation file - optionally generates a `python ux sdk` from the openapi file- optionally generates a `go ux sdk` from the openapi file## Getting startedInstall the package```pip install openapiart```Generate artifacts from OpenAPI files```python&quot;&quot;&quot; The following command will produce these artifacts:    - ./artifacts/openapi.yaml    - ./artifacts/openapi.json    - ./artifacts/openapi.html    - ./artifacts/sample.proto    - ./artifacts/sample/__init__.py    - ./artifacts/sample/sample.py    - ./artifacts/sample/sample_pb2.py    - ./artifacts/sample/sample_pb2_grpc.py    - ./pkg/openapiart.go    - ./pkg/go.mod    - ./pkg/go.sum    - ./pkg/sanity/sanity_grpc.pb.go    - ./pkg/sanity/sanity.pb.go&quot;&quot;&quot;import openapiart# bundle api files# validate the bundled file# generate the documentation fileart = openapiart.OpenApiArt(    api_files=[        &quot;./openapiart/tests/api/info.yaml&quot;,        &quot;./openapiart/tests/common/common.yaml&quot;,        &quot;./openapiart/tests/api/api.yaml&quot;,    ],    artifact_dir=&quot;./artifacts&quot;,    protobuf_name=&quot;sanity&quot;,    extension_prefix=&quot;sanity&quot;,)# optionally generate a python ux sdk and python protobuf/grpc stubsart.GeneratePythonSdk(    package_name=&quot;sanity&quot;)# optionally generate a go ux sdk and go protobuf/grpc stubsart.GenerateGoSdk(    package_dir=&quot;github.com/open-traffic-generator/openapiart/pkg&quot;,     package_name=&quot;openapiart&quot;)```## Specifications&gt; This repository is based on the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md) which is a standard, language-agnostic interface to RESTful APIs. &gt; [Modeling guide specific to this package](../main/MODELGUIDE.md)</longdescription>
</pkgmetadata>