<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># [BILLING API DOCUMENTATION](https://uniclab-01.github.io/billing-api)# Unicboard public api (in developing):## base station api### get base station type api listmethod: GET&lt;br/&gt; route: '/base-stations/types'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID    &quot;name&quot;: str    &quot;notes&quot;: str]```### get base station type api objectmethod: GET&lt;br/&gt; route: '/base-stations/types/&lt;base_station_type_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;base_station_type_id&quot;: UUID```response:```json    &quot;id&quot;: UUID    &quot;name&quot;: str    &quot;notes&quot;: str```### create base station type apimethod: POST&lt;br/&gt; route: '/base-stations/types'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;name&quot;: str    &quot;notes&quot;: str```response:```json    &quot;id&quot;: UUID    &quot;name&quot;: str    &quot;notes&quot;: str```### modification base station type apimethod: PUT&lt;br/&gt; route: '/base-stations/types/&lt;base_station_type_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;base_station_type_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;name&quot;: str    &quot;notes&quot;: str```response:```json    &quot;id&quot;: UUID    &quot;name&quot;: str    &quot;notes&quot;: str```### get base station api listmethod: GET&lt;br/&gt; route: '/base-stations'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID    &quot;identifier&quot;: str    &quot;base_station_type&quot;: {        &quot;id&quot;: UUID        &quot;name&quot;: str        &quot;notes&quot;: str    }]```### get base station api objectmethod: GET&lt;br/&gt; route: '/base-stations/&lt;base_station_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json  &quot;base_station_id&quot;: UUID```response:```json    &quot;id&quot;: UUID    &quot;identifier&quot;: str    &quot;base_station_type&quot;: {        &quot;id&quot;: UUID        &quot;name&quot;: str        &quot;notes&quot;: str    }```### create base station apimethod: POST&lt;br/&gt; route: '/base-stations'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;base_station_type_id&quot;: UUID    &quot;identifier&quot;: str```response:```json    &quot;id&quot;: UUID    &quot;identifier&quot;: str    &quot;base_station_type&quot;: {        &quot;id&quot;: UUID        &quot;name&quot;: str        &quot;notes&quot;: str    }```### modification base station apimethod: PUT&lt;br/&gt; route: '/base-stations/&lt;base_station_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;base_station_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;base_station_type_id&quot;: UUID    &quot;identifier&quot;: str```response:```json    &quot;id&quot;: UUID    &quot;identifier&quot;: str    &quot;base_station_type&quot;: {        &quot;id&quot;: UUID        &quot;name&quot;: str        &quot;notes&quot;: str    }```## network api### get network api listmethod: GET&lt;br/&gt; route: '/networks'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID    &quot;name&quot;: str    &quot;type_network&quot;: str    &quot;data_gateway_id&quot;: UUID4    &quot;sys_type&quot;: str    &quot;specifier&quot;: Optional[str]    &quot;params&quot;: Optional[Dict[str, Any]]]```### get network api objectmethod: GET&lt;br/&gt; route: '/networks/&lt;network_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;network_id&quot;: UUID```response:```json    &quot;id&quot;: UUID    &quot;name&quot;: str    &quot;type_network&quot;: str    &quot;data_gateway_id&quot;: UUID4    &quot;sys_type&quot;: str    &quot;specifier&quot;: Optional[str]    &quot;params&quot;: Optional[Dict[str, Any]]```### create network apimethod: POST&lt;br/&gt; route: '/networks'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;name&quot;: str    &quot;type_network&quot;: str (input/output)    &quot;sys_type&quot;: str (INPUT_NBIOT/INPUT_LORA/OUTPUT_DATA_LOGGER_DEVICE_DATA/OUTPUT_DATA_AGGREGATOR_DEVICE_DATA)    &quot;specifier&quot;: Optional[str]```response:```json    &quot;id&quot;: UUID    &quot;name&quot;: str    &quot;type_network&quot;: str    &quot;data_gateway_id&quot;: UUID4    &quot;sys_type&quot;: str    &quot;specifier&quot;: Optional[str]    &quot;params&quot;: Optional[Dict[str, Any]]```### modification network apimethod: PUT&lt;br/&gt; route: '/networks/&lt;network_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;network_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;name&quot;: str    &quot;type_network&quot;: str (input/output)    &quot;sys_type&quot;: str (INPUT_NBIOT/INPUT_LORA/OUTPUT_DATA_LOGGER_DEVICE_DATA/OUTPUT_DATA_AGGREGATOR_DEVICE_DATA)    &quot;specifier&quot;: Optional[str]```response:```json    &quot;id&quot;: UUID    &quot;name&quot;: str    &quot;type_network&quot;: str    &quot;data_gateway_id&quot;: UUID4    &quot;sys_type&quot;: str    &quot;specifier&quot;: Optional[str]    &quot;params&quot;: Optional[Dict[str, Any]]```## device api### get device api listmethod: GET&lt;br/&gt; route: '/devices'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;manufacturer_serial_number&quot;: str    &quot;firmware_version&quot;: Optional[str]    &quot;hardware_version&quot;: Optional[str]    &quot;date_produced&quot;: Optional[datetime]    &quot;hacks&quot;: List[str]    &quot;device_tz&quot;: Optional[str]    &quot;device_clock_offset_s&quot;: Optional[int]    &quot;time_transition&quot;: str    &quot;device_manufacturer&quot;: {      &quot;id&quot;: UUID4,      &quot;name&quot;: str    },    &quot;device_modification&quot;: {        &quot;id&quot;: UUID4,        &quot;name&quot;: Optional[str],        &quot;device_modification_type_id&quot;: Optional[UUID4],        &quot;device_modification_type&quot;: {            &quot;id&quot;: UUID4,            &quot;sys_name&quot;: str,            &quot;name_ru&quot;: str,            &quot;name_en&quot;: str,            &quot;type&quot;: str,            &quot;metering_type_id&quot;: UUID4,            &quot;device_metering_type&quot;: {                &quot;id&quot;: UUID4,                &quot;sys_name&quot;: str,                &quot;name_ru&quot;: str,                &quot;name_en&quot;: str            }        }        }    &quot;device_channel&quot;: [        {            &quot;device_id&quot;: UUID4            &quot;serial_number&quot;: int            &quot;last_date_event_no_data&quot;: Optional[datetime]            &quot;inactivity_limit&quot;: Optional[int]            &quot;device_meter&quot;: [                {                    &quot;device_channel_id&quot;: UUID                    &quot;value_multiplier&quot;: Optional[float]                    &quot;unit_multiplier&quot;: Optional[float]                    &quot;kind&quot;: str                }            ]        }    ]    &quot;data_gateway_network_device&quot;: Optional[    {        &quot;id&quot;: UUID4        &quot;uplink_protocol_id&quot;: UUID4        &quot;downlink_protocol_id&quot;: UUID4        &quot;data_gateway_network_id&quot;: UUID4        &quot;mac&quot;: int        &quot;key_id&quot;: Optional[UUID4]        &quot;device_id&quot;: UUID4        &quot;uplink_encryption_key&quot;: Optional[str]        &quot;downlink_encryption_key&quot;: Optional[str]        &quot;encryption_key&quot;: Optional[str]        &quot;protocol&quot;:        {            &quot;id&quot;: UUID4            &quot;date_created&quot;: datetime            &quot;date_modified&quot;: datetime            &quot;name&quot;: str            &quot;type&quot;: ProtocolEnum        }        &quot;network&quot;: Optional[        {            &quot;id&quot;: UUID            &quot;name&quot;: str            &quot;type_network&quot;: str            &quot;data_gateway_id&quot;: UUID4            &quot;sys_type&quot;: str            &quot;specifier&quot;: Optional[str]            &quot;params&quot;: Optional[Dict[str, Any]]        }]    }]]```### get device api objectmethod: GET&lt;br/&gt; route: '/devices/&lt;device_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID```response:```json&quot;manufacturer_serial_number&quot;: str&quot;firmware_version&quot;: Optional[str]&quot;hardware_version&quot;: Optional[str]&quot;date_produced&quot;: Optional[datetime]&quot;hacks&quot;: List[str]&quot;device_tz&quot;: Optional[str]&quot;device_clock_offset_s&quot;: Optional[int]&quot;time_transition&quot;: str&quot;device_manufacturer&quot;: {  &quot;id&quot;: UUID4,  &quot;name&quot;: str},&quot;device_modification&quot;: {    &quot;id&quot;: UUID4,    &quot;name&quot;: Optional[str],    &quot;device_modification_type_id&quot;: Optional[UUID4],    &quot;device_modification_type&quot;: {        &quot;id&quot;: UUID4,        &quot;sys_name&quot;: str,        &quot;name_ru&quot;: str,        &quot;name_en&quot;: str,        &quot;type&quot;: str,        &quot;metering_type_id&quot;: UUID4,        &quot;device_metering_type&quot;: {            &quot;id&quot;: UUID4,            &quot;sys_name&quot;: str,            &quot;name_ru&quot;: str,            &quot;name_en&quot;: str        }    }}&quot;device_channel&quot;: [    {        &quot;device_id&quot;: UUID4        &quot;serial_number&quot;: int        &quot;last_date_event_no_data&quot;: Optional[datetime]        &quot;inactivity_limit&quot;: Optional[int]        &quot;device_meter&quot;: [            {                &quot;device_channel_id&quot;: UUID                &quot;value_multiplier&quot;: Optional[float]                &quot;unit_multiplier&quot;: Optional[float]                &quot;kind&quot;: str            }        ]    }]&quot;data_gateway_network_device&quot;: Optional[{    &quot;id&quot;: UUID4    &quot;uplink_protocol_id&quot;: UUID4    &quot;downlink_protocol_id&quot;: UUID4    &quot;data_gateway_network_id&quot;: UUID4    &quot;mac&quot;: int    &quot;key_id&quot;: Optional[UUID4]    &quot;device_id&quot;: UUID4    &quot;uplink_encryption_key&quot;: Optional[str]    &quot;downlink_encryption_key&quot;: Optional[str]    &quot;encryption_key&quot;: Optional[str]    &quot;protocol&quot;:    {        &quot;id&quot;: UUID4        &quot;date_created&quot;: datetime        &quot;date_modified&quot;: datetime        &quot;name&quot;: str        &quot;type&quot;: ProtocolEnum    }    &quot;network&quot;: Optional[    {        &quot;id&quot;: UUID        &quot;name&quot;: str        &quot;type_network&quot;: str        &quot;data_gateway_id&quot;: UUID4        &quot;sys_type&quot;: str        &quot;specifier&quot;: Optional[str]        &quot;params&quot;: Optional[Dict[str, Any]]    }]}]```### crate device apimethod: POST&lt;br/&gt; route: '/devices/'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;manufacturer_name&quot;: str    &quot;mac&quot;: int    &quot;manufacturer_serial_number&quot;: str    &quot;modification_type_id&quot;: UUID4    &quot;modification_id&quot;: UUID4    &quot;date_produced&quot;: Optional[datetime]    &quot;firmware_version&quot;: Optional[str]    &quot;hardware_version&quot;: Optional[str]    &quot;uplink_protocol_id&quot;: UUID4    &quot;downlink_protocol_id&quot;: UUID4    &quot;uplink_encryption_type&quot;: str (NO_ENCRYPTION/XTEA_V_NERO_V0/AES_ECB_V_NERO_V0/KUZNECHIK_V_NERO_V0)    &quot;downlink_encryption_type&quot;: str (NO_ENCRYPTION/XTEA_V_NERO_V0/AES_ECB_V_NERO_V0/KUZNECHIK_V_NERO_V0)    &quot;key_id&quot;: Optional[UUID4]    &quot;uplink_encryption_key&quot;: Optional[str]    &quot;downlink_encryption_key&quot;: Optional[str]    &quot;data_input_gateway_network_id&quot;: UUID4    &quot;data_gateway_id&quot;: UUID4    &quot;device_channels&quot;: List[      {          &quot;serial_number&quot;: int          &quot;inactivity_limit&quot;: Optional[int]          &quot;device_meter&quot;: List[            {                &quot;value_multiplier&quot;: float                &quot;unit_multiplier&quot;: float                &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)            }          ]              }    ]    &quot;modification_name&quot;: Optional[str]    &quot;modification_type_name&quot;: Optional[str]```response:&lt;br/&gt;```json    &quot;manufacturer_serial_number&quot;: str    &quot;firmware_version&quot;: Optional[str]    &quot;hardware_version&quot;: Optional[str]    &quot;date_produced&quot;: Optional[datetime]    &quot;device_manufacturer&quot;: {        &quot;id&quot;: UUID        &quot;name&quot;: str    }    &quot;device_modification&quot;: {        &quot;id&quot;: UUID        &quot;name&quot;: Optional[str]        &quot;device_modification_type_id&quot;: Optional[UUID]        &quot;device_modification_type&quot;: {            &quot;id&quot;: UUID            &quot;sys_name&quot;: str            &quot;name_ru&quot;: str            &quot;name_en&quot;: str            &quot;type&quot;: str (smart_meter/modem)            &quot;metering_type_id&quot;: UUID            &quot;device_metering_type&quot;: {                &quot;id&quot;: UUID                &quot;sys_name&quot;: str                &quot;name_ru&quot;: str                &quot;name_en&quot;: str            }        }    }    &quot;device_channel&quot;: [    {        &quot;serial_number&quot;: int        &quot;inactivity_limit&quot;: Optional[int]        &quot;device_meter&quot;: [            {                &quot;device_channel_id&quot;: UUID                &quot;value_multiplier&quot;: Optional[float]                &quot;unit_multiplier&quot;: Optional[float]                &quot;kind&quot;: str            }        ]    }    ]    &quot;data_gateway_network_device&quot;: Optional[    {        &quot;id&quot;: UUID4        &quot;uplink_protocol_id&quot;: UUID4        &quot;downlink_protocol_id&quot;: UUID4        &quot;data_gateway_network_id&quot;: UUID4        &quot;mac&quot;: int        &quot;key_id&quot;: Optional[UUID4]        &quot;device_id&quot;: UUID4        &quot;uplink_encryption_key&quot;: Optional[str]        &quot;downlink_encryption_key&quot;: Optional[str]        &quot;encryption_key&quot;: Optional[str]        &quot;protocol&quot;:        {            &quot;id&quot;: UUID4            &quot;date_created&quot;: datetime            &quot;date_modified&quot;: datetime            &quot;name&quot;: str            &quot;type&quot;: ProtocolEnum        }        &quot;network&quot;: Optional[        {            &quot;id&quot;: UUID            &quot;name&quot;: str            &quot;type_network&quot;: str            &quot;data_gateway_id&quot;: UUID4            &quot;sys_type&quot;: str            &quot;specifier&quot;: Optional[str]            &quot;params&quot;: Optional[Dict[str, Any]]        }]    }]```### modification device apimethod: PUT&lt;br/&gt; route: '/devices/&lt;device_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;device_modification_id&quot;: UUID    &quot;device_manufacturer_id&quot;: UUID    &quot;manufacturer_serial_number&quot;: str    &quot;date_produced&quot;: DateTime    &quot;firmware_version&quot;: str    &quot;hardware_version&quot;: str    &quot;device_tz&quot;: str    &quot;device_clock_offset_s&quot;: int    &quot;time_transition&quot;: str (summer/winter/unknown)```response:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_modification_id&quot;: UUID    &quot;device_manufacturer_id&quot;: UUID    &quot;manufacturer_serial_number&quot;: str    &quot;date_produced&quot;: DateTime    &quot;firmware_version&quot;: str    &quot;hardware_version&quot;: str    &quot;device_tz&quot;: str    &quot;device_clock_offset_s&quot;: int    &quot;time_transition&quot;: str (summer/winter/unknown)```### delete device apimethod: DELETE&lt;br/&gt; route: '/devices/&lt;device_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID```response:&lt;br/&gt; 200## device network api### get device network api listmethod: GET&lt;br/&gt; route: '/devices-networks/'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID4    &quot;uplink_protocol_id&quot;: UUID4    &quot;downlink_protocol_id&quot;: UUID4    &quot;data_gateway_network_id&quot;: UUID4    &quot;mac&quot;: int    &quot;key_id&quot;: Optional[UUID4]    &quot;device_id&quot;: UUID4    &quot;uplink_encryption_key&quot;: Optional[str]    &quot;downlink_encryption_key&quot;: Optional[str]    &quot;device&quot;: {        &quot;manufacturer_serial_number&quot;: str        &quot;firmware_version&quot;: Optional[str]        &quot;hardware_version&quot;: Optional[str]        &quot;date_produced&quot;: Optional[datetime]        &quot;device_manufacturer&quot;: {            &quot;id&quot;: UUID4            &quot;name&quot;: str        }        &quot;device_modification&quot;: {            &quot;id&quot;: UUID4            &quot;name&quot;: Optional[str]            &quot;device_modification_type_id&quot;: Optional[UUID4]            &quot;device_modification_type&quot;: {                &quot;id&quot;: UUID4                &quot;sys_name&quot;: str                &quot;name_ru&quot;: str                &quot;name_en&quot;: str                &quot;type&quot;: str (smart_meter/modem)                &quot;metering_type_id&quot;: UUID4                &quot;device_metering_type&quot;: {                    &quot;id&quot;: UUID4                    &quot;sys_name&quot;: str                    &quot;name_ru&quot;: str                    &quot;name_en&quot;: str                }                 }        }        &quot;device_channel&quot;: List[{            &quot;serial_number&quot;: int            &quot;inactivity_limit&quot;: Optional[int]            &quot;device_meter&quot;: [                {                    &quot;device_channel_id&quot;: UUID                    &quot;value_multiplier&quot;: Optional[float]                    &quot;unit_multiplier&quot;: Optional[float]                    &quot;kind&quot;: str                }            ]        }]    }    &quot;network&quot;: {        &quot;id&quot;: UUID        &quot;uplink_protocol_id&quot;: UUID        &quot;downlink_protocol_id&quot;: UUID        &quot;data_gateway_network_id&quot;: UUID        &quot;mac&quot;: int        &quot;key_id&quot;: Optional[UUID]        &quot;device_id&quot;: UUID        &quot;uplink_encryption_key&quot;: Optional[str]        &quot;downlink_encryption_key&quot;: Optional[str]        &quot;encryption_key&quot;: Optional[str]        &quot;protocol&quot;: {            id: UUID            name: str            type: str (WATER5_V_NERO_V0/NCP_SMP_V0/SMP_V0)        }        &quot;network&quot;: Optional[            &quot;name&quot;: str            &quot;type_network&quot;: str(input/output)            &quot;data_gateway_id&quot;: UUID            &quot;data_gateway&quot;: {              &quot;name&quot;: str            }             &quot;sys_type&quot;: str (INPUT_NBIOT/INPUT_LORA/OUTPUT_DATA_LOGGER_DEVICE_DATA/OUTPUT_DATA_AGGREGATOR_DEVICE_DATA)            &quot;specifier&quot;: Optional[str]            &quot;params&quot;: Optional[Dict[str, Any]]      ]  }]```### get device network api objectmethod: GET&lt;br/&gt; route: '/devices-networks/&lt;device_network_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_network_id&quot;: UUID```response:```json&quot;id&quot;: UUID4&quot;uplink_protocol_id&quot;: UUID4&quot;downlink_protocol_id&quot;: UUID4&quot;data_gateway_network_id&quot;: UUID4&quot;mac&quot;: int&quot;key_id&quot;: Optional[UUID4]&quot;device_id&quot;: UUID4&quot;uplink_encryption_key&quot;: Optional[str]&quot;downlink_encryption_key&quot;: Optional[str]&quot;device&quot;: {    &quot;manufacturer_serial_number&quot;: str    &quot;firmware_version&quot;: Optional[str]    &quot;hardware_version&quot;: Optional[str]    &quot;date_produced&quot;: Optional[datetime]    &quot;device_manufacturer&quot;: {        &quot;id&quot;: UUID4        &quot;name&quot;: str    }    &quot;device_modification&quot;: {        &quot;id&quot;: UUID4        &quot;name&quot;: Optional[str]        &quot;device_modification_type_id&quot;: Optional[UUID4]        &quot;device_modification_type&quot;: {            &quot;id&quot;: UUID4            &quot;sys_name&quot;: str            &quot;name_ru&quot;: str            &quot;name_en&quot;: str            &quot;type&quot;: str (smart_meter/modem)            &quot;metering_type_id&quot;: UUID4            &quot;device_metering_type&quot;: {                &quot;id&quot;: UUID4                &quot;sys_name&quot;: str                &quot;name_ru&quot;: str                &quot;name_en&quot;: str            }             }    }    &quot;device_channel&quot;: List[{        &quot;serial_number&quot;: int        &quot;inactivity_limit&quot;: Optional[int]        &quot;device_meter&quot;: [            {                &quot;device_channel_id&quot;: UUID                &quot;value_multiplier&quot;: Optional[float]                &quot;unit_multiplier&quot;: Optional[float]                &quot;kind&quot;: str            }        ]    }]}&quot;network&quot;: {    &quot;id&quot;: UUID    &quot;uplink_protocol_id&quot;: UUID    &quot;downlink_protocol_id&quot;: UUID    &quot;data_gateway_network_id&quot;: UUID    &quot;mac&quot;: int    &quot;key_id&quot;: Optional[UUID]    &quot;device_id&quot;: UUID    &quot;uplink_encryption_key&quot;: Optional[str]    &quot;downlink_encryption_key&quot;: Optional[str]    &quot;encryption_key&quot;: Optional[str]    &quot;protocol&quot;: {        id: UUID        name: str        type: str (WATER5_V_NERO_V0/NCP_SMP_V0/SMP_V0)    }    &quot;network&quot;: Optional[        &quot;name&quot;: str        &quot;type_network&quot;: str(input/output)        &quot;data_gateway_id&quot;: UUID        &quot;data_gateway&quot;: {          &quot;name&quot;: str        }         &quot;sys_type&quot;: str (INPUT_NBIOT/INPUT_LORA/OUTPUT_DATA_LOGGER_DEVICE_DATA/OUTPUT_DATA_AGGREGATOR_DEVICE_DATA)        &quot;specifier&quot;: Optional[str]        &quot;params&quot;: Optional[Dict[str, Any]]  ]}```### create device network apimethod: POST&lt;br/&gt; route: '/devices-networks'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;mac&quot;: int    &quot;uplink_encryption_key&quot;: str    &quot;downlink_encryption_key&quot;: str    &quot;uplink_encryption_type&quot;: str    &quot;downlink_encryption_type&quot;: str    &quot;key_id&quot;: str    &quot;device_id&quot;: UUID    &quot;data_gateway_network_id&quot;: UUID    &quot;uplink_protocol_id&quot;: UUID    &quot;downlink_protocol_id&quot;: UUID```response:```json    &quot;id&quot;: UUID4    &quot;mac&quot;: int    &quot;uplink_encryption_key&quot;: str    &quot;downlink_encryption_key&quot;: str    &quot;uplink_encryption_type&quot;: str    &quot;downlink_encryption_type&quot;: str    &quot;key_id&quot;: str    &quot;device_id&quot;: UUID    &quot;data_gateway_network_id&quot;: UUID    &quot;uplink_protocol_id&quot;: UUID    &quot;downlink_protocol_id&quot;: UUID```### modification device network apimethod: PUT&lt;br/&gt; route: '/devices-networks/&lt;device_network_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_network_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;mac&quot;: int    &quot;uplink_encryption_key&quot;: str    &quot;downlink_encryption_key&quot;: str    &quot;uplink_encryption_type&quot;: str    &quot;downlink_encryption_type&quot;: str    &quot;key_id&quot;: str    &quot;device_id&quot;: UUID    &quot;data_gateway_network_id&quot;: UUID    &quot;uplink_protocol_id&quot;: UUID    &quot;downlink_protocol_id&quot;: UUID```response:```json    &quot;id&quot;: UUID4    &quot;mac&quot;: int    &quot;uplink_encryption_key&quot;: str    &quot;downlink_encryption_key&quot;: str    &quot;uplink_encryption_type&quot;: str    &quot;downlink_encryption_type&quot;: str    &quot;key_id&quot;: str    &quot;device_id&quot;: UUID    &quot;data_gateway_network_id&quot;: UUID    &quot;uplink_protocol_id&quot;: UUID    &quot;downlink_protocol_id&quot;: UUID```### delete device network apimethod: DELETE&lt;br/&gt; route: '/devices-networks/&lt;device_network_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_network_id&quot;: UUID```response: 200## device channel api### get device channel api listmethod: GET&lt;br/&gt; route: '/channels'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;device_id&quot;: UUID4    &quot;serial_number&quot;: int    &quot;last_date_event_no_data&quot;: Optional[datetime]    &quot;inactivity_limit&quot;: Optional[int]    &quot;device_meter&quot;: [        &quot;device_channel_id&quot;: UUID        &quot;value_multiplier&quot;: Optional[float]        &quot;unit_multiplier&quot;: Optional[float]        &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)    ]]```### get device channel api list by devicemethod: GET&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID```response:```json[    &quot;device_id&quot;: UUID4    &quot;serial_number&quot;: int    &quot;last_date_event_no_data&quot;: Optional[datetime]    &quot;inactivity_limit&quot;: Optional[int]    &quot;device_meter&quot;: [        &quot;device_channel_id&quot;: UUID        &quot;value_multiplier&quot;: Optional[float]        &quot;unit_multiplier&quot;: Optional[float]        &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)    ]]```### get device channel api objectmethod: GET&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels/&lt;device_channel_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_channel_id&quot;: UUID```response:```json    &quot;device_id&quot;: UUID4    &quot;serial_number&quot;: int    &quot;last_date_event_no_data&quot;: Optional[datetime]    &quot;inactivity_limit&quot;: Optional[int]    &quot;device_meter&quot;: [        &quot;device_channel_id&quot;: UUID        &quot;value_multiplier&quot;: Optional[float]        &quot;unit_multiplier&quot;: Optional[float]        &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)    ]```### create device channel apimethod: POST&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;serial_number&quot;: int    &quot;inactivity_limit&quot;: Optional[int]```response:```json    &quot;device_id&quot;: UUID4    &quot;serial_number&quot;: int    &quot;last_date_event_no_data&quot;: Optional[datetime]    &quot;inactivity_limit&quot;: Optional[int]    &quot;device_meter&quot;: [        &quot;device_channel_id&quot;: UUID        &quot;value_multiplier&quot;: Optional[float]        &quot;unit_multiplier&quot;: Optional[float]        &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)    ]```### modification device channel apimethod: PUT&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels/&lt;device_channel_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_channel_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;serial_number&quot;: int    &quot;inactivity_limit&quot;: Optional[int]```response:```json    &quot;device_id&quot;: UUID4    &quot;serial_number&quot;: int    &quot;last_date_event_no_data&quot;: Optional[datetime]    &quot;inactivity_limit&quot;: Optional[int]    &quot;device_meter&quot;: [        &quot;device_channel_id&quot;: UUID        &quot;value_multiplier&quot;: Optional[float]        &quot;unit_multiplier&quot;: Optional[float]        &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)    ]```### delete device channel apimethod: DELETE&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels/&lt;device_channel_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_channel_id&quot;: UUID```response: 200## device meter api### get device meter api listmethod: GET&lt;br/&gt; route: '/meters'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID    &quot;device_channel_id&quot;: UUID    &quot;value_multiplier&quot;: Optional[float]    &quot;unit_multiplier&quot;: Optional[float]    &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)]```### get device meter api list by channelmethod: GET&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels/&lt;device_channel_id&gt;/meters'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_channel_id&quot;: UUID```response:```json[    &quot;id&quot;: UUID    &quot;device_channel_id&quot;: UUID    &quot;value_multiplier&quot;: Optional[float]    &quot;unit_multiplier&quot;: Optional[float]    &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)]```### get device meter api objectmethod: GET&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels/&lt;device_channel_id&gt;/meters/&lt;meter_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_channel_id&quot;: UUID    &quot;meter_id&quot;: UUID```response:```json    &quot;id&quot;: UUID    &quot;device_channel_id&quot;: UUID    &quot;value_multiplier&quot;: Optional[float]    &quot;unit_multiplier&quot;: Optional[float]    &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)```### create device meter apimethod: POST&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels/&lt;device_channel_id&gt;/meters'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_channel_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;value_multiplier&quot;: Optional[float]    &quot;unit_multiplier&quot;: Optional[float]    &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)```response:```json    &quot;id&quot;: UUID    &quot;device_channel_id&quot;: UUID    &quot;value_multiplier&quot;: Optional[float]    &quot;unit_multiplier&quot;: Optional[float]    &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)```### modification device meter apimethod: PUT&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels/&lt;device_channel_id&gt;/meters/&lt;meter_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_channel_id&quot;: UUID    &quot;meter_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;value_multiplier&quot;: Optional[float]    &quot;unit_multiplier&quot;: Optional[float]    &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)```response:```json    &quot;id&quot;: UUID    &quot;device_channel_id&quot;: UUID    &quot;value_multiplier&quot;: Optional[float]    &quot;unit_multiplier&quot;: Optional[float]    &quot;kind&quot;: str (COMMON_CONSUMED/COMMON_GENERATED/COMMON_ACTIVE_GENERATED/COMMON_ACTIVE_CONSUMED/COMMON_REACTIVE_GENERATED/COMMON_REACTIVE_CONSUMED/PHASE_A_ACTIVE_CONSUMED/PHASE_A_ACTIVE_GENERATED/PHASE_A_REACTIVE_CONSUMED/PHASE_A_REACTIVE_GENERATED/PHASE_B_ACTIVE_CONSUMED/PHASE_B_ACTIVE_GENERATED/PHASE_B_REACTIVE_CONSUMED/PHASE_B_REACTIVE_GENERATED/PHASE_C_ACTIVE_CONSUMED/PHASE_C_ACTIVE_GENERATED/PHASE_C_REACTIVE_CONSUMED/PHASE_C_REACTIVE_GENERATED)```### delete device meter apimethod: DELETE&lt;br/&gt; route: '/devices/&lt;device_id&gt;/channels/&lt;device_channel_id&gt;/meters/&lt;meter_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;device_id&quot;: UUID    &quot;device_channel_id&quot;: UUID    &quot;meter_id&quot;: UUID```response: 200## device manufacturer api### get device manufacturer api listmethod: GET&lt;br/&gt; route: '/manufacturers'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID    &quot;name&quot; : str]```### get device manufacturer api objectmethod: GET&lt;br/&gt; route: '/manufacturers/&lt;manufacturer_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;manufacturer_id&quot;: UUID```response:```json    &quot;id&quot;: UUID    &quot;name&quot; : str```### create device manufacturer api objectmethod: POST&lt;br/&gt;route: '/manufacturers'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json  &quot;name&quot; : str```response:```json    &quot;id&quot;: UUID    &quot;name&quot; : str```### modification device manufacturer api objectmethod: PUT&lt;br/&gt;route: '/manufacturers/&lt;manufacturer_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json  &quot;manufacturer_id&quot; : UUID```body:&lt;br/&gt;```json  &quot;name&quot; : str```response:```json    &quot;id&quot;: UUID    &quot;name&quot; : str```### delete device manufacturer api objectmethod: DELETE&lt;br/&gt;route: '/manufacturers/&lt;manufacturer_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json  &quot;manufacturer_id&quot; : UUID```response: 200## metering type api### get metering type api listmethod: GET&lt;br/&gt; route: '/metering-types'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str]```### get metering type api objectmethod: GET&lt;br/&gt; route: '/metering-types/&lt;metering_type_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;metering_type_id&quot;: UUID```response:```json    &quot;id&quot;: UUID    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str```### create metering type api objectmethod: POST&lt;br/&gt;route: '/metering-types'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str```response:```json    &quot;id&quot;: UUID    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str```### modification metering type api objectmethod: PUT&lt;br/&gt;route: '/metering-types/&lt;metering_type_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json  &quot;metering_type_id&quot; : UUID```body:&lt;br/&gt;```json    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str```response:```json[    &quot;id&quot;: UUID    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str]```### delete metering type api objectmethod: DELETE&lt;br/&gt;route: '/metering-types/&lt;metering_type_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json  &quot;metering_type_id&quot; : UUID```response: 200## device modification type api### get device modification type api listmethod: GET&lt;br/&gt; route: '/modification-types'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID4    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str    &quot;type&quot;: str (smart_meter/modem)    &quot;device_metering_type&quot;: {        &quot;id&quot;: UUID4        &quot;sys_name&quot;: str        &quot;name_ru&quot;: str        &quot;name_en&quot;: str    }]```### get device modification type api objectmethod: GET&lt;br/&gt; route: '/modification-types/&lt;modification_type_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;modification_type_id&quot;: UUID```response:```json    &quot;id&quot;: UUID4    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str    &quot;type&quot;: str (smart_meter/modem)    &quot;device_metering_type&quot;: {        &quot;id&quot;: UUID4        &quot;sys_name&quot;: str        &quot;name_ru&quot;: str        &quot;name_en&quot;: str    }```### create device modification type apimethod: POST&lt;br/&gt; route: '/modification-types'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str    &quot;type&quot;: str (smart_meter/modem)    &quot;device_metering_type&quot;: UUID```response:```json    &quot;id&quot;: UUID4    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str    &quot;type&quot;: str (smart_meter/modem)    &quot;device_metering_type&quot;: {        &quot;id&quot;: UUID4        &quot;sys_name&quot;: str        &quot;name_ru&quot;: str        &quot;name_en&quot;: str    }```### modification device modification type apimethod: PUT&lt;br/&gt; route: '/modification-types/&lt;modification_type_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;modification_type_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str    &quot;type&quot;: str (smart_meter/modem)    &quot;device_metering_type&quot;: UUID```response:```json    &quot;id&quot;: UUID4    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str    &quot;type&quot;: str (smart_meter/modem)    &quot;device_metering_type&quot;: {        &quot;id&quot;: UUID4        &quot;sys_name&quot;: str        &quot;name_ru&quot;: str        &quot;name_en&quot;: str    }```### delete device modification type apimethod: DELETE&lt;br/&gt; route: '/modification-types/&lt;modification_type_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;modification_type_id&quot;: UUID```response: 200## device modification api### get device modification api listmethod: GET&lt;br/&gt; route: '/modifications'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID4    &quot;name&quot;: str    &quot;max_daily_consumption&quot;: float    &quot;device_modification_type&quot;: {        &quot;id&quot;: UUID4        &quot;sys_name&quot;: str        &quot;name_ru&quot;: str        &quot;name_en&quot;: str        &quot;type&quot;: str (smart_meter/modem)        &quot;device_metering_type&quot;: {            &quot;id&quot;: UUID4            &quot;sys_name&quot;: str            &quot;name_ru&quot;: str            &quot;name_en&quot;: str        }    }]```### get device modification api objectmethod: GET&lt;br/&gt; route: '/modifications/&lt;modification_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;modification_id&quot;: UUID```response:```json    &quot;id&quot;: UUID4    &quot;name&quot;: str    &quot;max_daily_consumption&quot;: float    &quot;device_modification_type&quot;: {        &quot;id&quot;: UUID4        &quot;sys_name&quot;: str        &quot;name_ru&quot;: str        &quot;name_en&quot;: str        &quot;type&quot;: str (smart_meter/modem)        &quot;device_metering_type&quot;: {            &quot;id&quot;: UUID4            &quot;sys_name&quot;: str            &quot;name_ru&quot;: str            &quot;name_en&quot;: str        }    }```### create device modification apimethod: POST&lt;br/&gt; route: '/modifications'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str    &quot;type&quot;: str (smart_meter/modem)    &quot;metering_type_id&quot;: UUID4```response:```json    &quot;id&quot;: UUID4    &quot;name&quot;: str    &quot;max_daily_consumption&quot;: float    &quot;device_modification_type&quot;: {        &quot;id&quot;: UUID4        &quot;sys_name&quot;: str        &quot;name_ru&quot;: str        &quot;name_en&quot;: str        &quot;type&quot;: str (smart_meter/modem)        &quot;device_metering_type&quot;: {            &quot;id&quot;: UUID4            &quot;sys_name&quot;: str            &quot;name_ru&quot;: str            &quot;name_en&quot;: str        }    }```### modofication device modification apimethod: PUT&lt;br/&gt; route: '/modifications/&lt;modification_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;modification_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;sys_name&quot;: str    &quot;name_ru&quot;: str    &quot;name_en&quot;: str    &quot;type&quot;: str (smart_meter/modem)    &quot;metering_type_id&quot;: UUID4```response:```json    &quot;id&quot;: UUID4    &quot;name&quot;: str    &quot;max_daily_consumption&quot;: float    &quot;device_modification_type&quot;: {        &quot;id&quot;: UUID4        &quot;sys_name&quot;: str        &quot;name_ru&quot;: str        &quot;name_en&quot;: str        &quot;type&quot;: str (smart_meter/modem)        &quot;device_metering_type&quot;: {            &quot;id&quot;: UUID4            &quot;sys_name&quot;: str            &quot;name_ru&quot;: str            &quot;name_en&quot;: str        }    }```### delete device modification apimethod: DELETE&lt;br/&gt; route: '/modifications/&lt;modification_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;modification_id&quot;: UUID```response: 200## protocol api### get protocol api listmethod: GET&lt;br/&gt; route: '/protocols'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID4    &quot;name&quot;: str    &quot;type&quot;: str (WATER5_V_NERO_V0/NCP_SMP_V0/SMP_V0/SMP_M_GAS_METER_V0/SMP_M_ENERGY_METER_V0/SMP_M_JUPITER_08B_V0/SMP_M_JUPITER_12B_V0/SMP_M_JUPITER_16B_V0/SMP_M_WATER_METER_04B_V0/SMP_M_WATER_METER_08B_V0/SMP_M_WATER_METER_12B_V0/SMP_M_WATER_METER_16B_V0/WATER5_V_JUPITER_FREESCALE_V0/WATER5_V_JUPITER_STM_V0/WATER5_V_FLUO_STM_V0/WATER5_V_FLUO_FREESCALE_V0/WATER5_V_FLUO_A_V0/WATER5_V_FLUO_S_V0/WATER5_V_GAS_V0/WATER5_V_JUPITER_LORA_V0/WATER5_V_FLUO_LORA_V0)]```### get protocol api objectmethod: GET&lt;br/&gt; route: '/protocols/&lt;protocol_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;protocol_id&quot;: UUID```response:```json    &quot;id&quot;: UUID4    &quot;name&quot;: str    &quot;type&quot;: str (WATER5_V_NERO_V0/NCP_SMP_V0/SMP_V0/SMP_M_GAS_METER_V0/SMP_M_ENERGY_METER_V0/SMP_M_JUPITER_08B_V0/SMP_M_JUPITER_12B_V0/SMP_M_JUPITER_16B_V0/SMP_M_WATER_METER_04B_V0/SMP_M_WATER_METER_08B_V0/SMP_M_WATER_METER_12B_V0/SMP_M_WATER_METER_16B_V0/WATER5_V_JUPITER_FREESCALE_V0/WATER5_V_JUPITER_STM_V0/WATER5_V_FLUO_STM_V0/WATER5_V_FLUO_FREESCALE_V0/WATER5_V_FLUO_A_V0/WATER5_V_FLUO_S_V0/WATER5_V_GAS_V0/WATER5_V_JUPITER_LORA_V0/WATER5_V_FLUO_LORA_V0)```### create protocol apimethod: POST&lt;br/&gt; route: '/protocols'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;name&quot;: str    &quot;type&quot;: str (WATER5_V_NERO_V0/NCP_SMP_V0/SMP_V0/SMP_M_GAS_METER_V0/SMP_M_ENERGY_METER_V0/SMP_M_JUPITER_08B_V0/SMP_M_JUPITER_12B_V0/SMP_M_JUPITER_16B_V0/SMP_M_WATER_METER_04B_V0/SMP_M_WATER_METER_08B_V0/SMP_M_WATER_METER_12B_V0/SMP_M_WATER_METER_16B_V0/WATER5_V_JUPITER_FREESCALE_V0/WATER5_V_JUPITER_STM_V0/WATER5_V_FLUO_STM_V0/WATER5_V_FLUO_FREESCALE_V0/WATER5_V_FLUO_A_V0/WATER5_V_FLUO_S_V0/WATER5_V_GAS_V0/WATER5_V_JUPITER_LORA_V0/WATER5_V_FLUO_LORA_V0)```response:```json    &quot;id&quot;: UUID4    &quot;name&quot;: str    &quot;type&quot;: str (WATER5_V_NERO_V0/NCP_SMP_V0/SMP_V0/SMP_M_GAS_METER_V0/SMP_M_ENERGY_METER_V0/SMP_M_JUPITER_08B_V0/SMP_M_JUPITER_12B_V0/SMP_M_JUPITER_16B_V0/SMP_M_WATER_METER_04B_V0/SMP_M_WATER_METER_08B_V0/SMP_M_WATER_METER_12B_V0/SMP_M_WATER_METER_16B_V0/WATER5_V_JUPITER_FREESCALE_V0/WATER5_V_JUPITER_STM_V0/WATER5_V_FLUO_STM_V0/WATER5_V_FLUO_FREESCALE_V0/WATER5_V_FLUO_A_V0/WATER5_V_FLUO_S_V0/WATER5_V_GAS_V0/WATER5_V_JUPITER_LORA_V0/WATER5_V_FLUO_LORA_V0)```### modification protocol apimethod: PUT&lt;br/&gt; route: '/protocols/&lt;protocol_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;protocol_id&quot;: UUID```body:&lt;br/&gt;```json    &quot;name&quot;: str    &quot;type&quot;: str (WATER5_V_NERO_V0/NCP_SMP_V0/SMP_V0/SMP_M_GAS_METER_V0/SMP_M_ENERGY_METER_V0/SMP_M_JUPITER_08B_V0/SMP_M_JUPITER_12B_V0/SMP_M_JUPITER_16B_V0/SMP_M_WATER_METER_04B_V0/SMP_M_WATER_METER_08B_V0/SMP_M_WATER_METER_12B_V0/SMP_M_WATER_METER_16B_V0/WATER5_V_JUPITER_FREESCALE_V0/WATER5_V_JUPITER_STM_V0/WATER5_V_FLUO_STM_V0/WATER5_V_FLUO_FREESCALE_V0/WATER5_V_FLUO_A_V0/WATER5_V_FLUO_S_V0/WATER5_V_GAS_V0/WATER5_V_JUPITER_LORA_V0/WATER5_V_FLUO_LORA_V0)```response:```json    &quot;id&quot;: UUID4    &quot;name&quot;: str    &quot;type&quot;: str (WATER5_V_NERO_V0/NCP_SMP_V0/SMP_V0/SMP_M_GAS_METER_V0/SMP_M_ENERGY_METER_V0/SMP_M_JUPITER_08B_V0/SMP_M_JUPITER_12B_V0/SMP_M_JUPITER_16B_V0/SMP_M_WATER_METER_04B_V0/SMP_M_WATER_METER_08B_V0/SMP_M_WATER_METER_12B_V0/SMP_M_WATER_METER_16B_V0/WATER5_V_JUPITER_FREESCALE_V0/WATER5_V_JUPITER_STM_V0/WATER5_V_FLUO_STM_V0/WATER5_V_FLUO_FREESCALE_V0/WATER5_V_FLUO_A_V0/WATER5_V_FLUO_S_V0/WATER5_V_GAS_V0/WATER5_V_JUPITER_LORA_V0/WATER5_V_FLUO_LORA_V0)```### delete protocol apimethod: DELETE&lt;br/&gt; route: '/protocols/&lt;protocol_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;protocol_id&quot;: UUID```response: 200## base station task api### get base station task api listmethod: GET&lt;br/&gt; route: '/bs-tasks'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[  &quot;id&quot;: UUID  &quot;effective_macs&quot;: List[int],  &quot;effective_datetime_from&quot;: datetime  &quot;effective_datetime_to&quot;: datetime  &quot;effective_count&quot;: int  &quot;reglament_type&quot;: str (schedule,on_capture,immediate)  &quot;every_s&quot;: int  &quot;reglament_exclusion_time_section&quot;: json  &quot;priority&quot;: int  &quot;regulation&quot;: str (immediate, lbt)  &quot;bs_id&quot;: UUID   &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)  &quot;task_type&quot;: str (time_sync)  &quot;utc_offeset_s&quot;: int  &quot;protocol&quot;:  str (6k7, unbp)  &quot;time&quot;: datetime]```### get base station task api list by base station idmethod: GET&lt;br/&gt; route: '/bs-tasks/&lt;bs_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;bs_id&quot;: UUID    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[  &quot;id&quot;: UUID  &quot;effective_macs&quot;: List[int],  &quot;effective_datetime_from&quot;: datetime  &quot;effective_datetime_to&quot;: datetime  &quot;effective_count&quot;: int  &quot;reglament_type&quot;: str (schedule,on_capture,immediate)  &quot;every_s&quot;: int  &quot;reglament_exclusion_time_section&quot;: json  &quot;priority&quot;: int  &quot;regulation&quot;: str (immediate, lbt)  &quot;bs_id&quot;: UUID   &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)  &quot;task_type&quot;: str (time_sync)  &quot;utc_offeset_s&quot;: int  &quot;protocol&quot;:  str (6k7, unbp)  &quot;time&quot;: datetime]```### get base station task api objectmethod: GET&lt;br/&gt; route: '/bs-tasks/&lt;bs_task_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;bs_task_id&quot;: UUID```response:```json  &quot;id&quot;: UUID  &quot;effective_macs&quot;: List[int],  &quot;effective_datetime_from&quot;: datetime  &quot;effective_datetime_to&quot;: datetime  &quot;effective_count&quot;: int  &quot;reglament_type&quot;: str (schedule,on_capture,immediate)  &quot;every_s&quot;: int  &quot;reglament_exclusion_time_section&quot;: json  &quot;priority&quot;: int  &quot;regulation&quot;: str (immediate, lbt)  &quot;bs_id&quot;: UUID   &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)  &quot;task_type&quot;: str (time_sync)  &quot;utc_offeset_s&quot;: int  &quot;protocol&quot;:  str (6k7, unbp)  &quot;time&quot;: datetime```### create base station task api objectmethod: POST&lt;br/&gt; route: '/bs-tasks'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;effective_macs&quot;: List[int],    &quot;effective_datetime_from&quot;: datetime    &quot;effective_datetime_to&quot;: datetime    &quot;effective_count&quot;: int    &quot;reglament_type&quot;: str (schedule,on_capture,immediate)    &quot;every_s&quot;: int    &quot;reglament_exclusion_time_section&quot;: json    &quot;priority&quot;: int    &quot;regulation&quot;: str (immediate, lbt)    &quot;bs_id&quot;: UUID     &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)    &quot;task_type&quot;: str (time_sync)    &quot;utc_offeset_s&quot;: int    &quot;protocol&quot;:  str (6k7, unbp)    &quot;time&quot;: datetime```response:```json    &quot;id&quot;: UUID    &quot;effective_macs&quot;: List[int],    &quot;effective_datetime_from&quot;: datetime    &quot;effective_datetime_to&quot;: datetime    &quot;effective_count&quot;: int    &quot;reglament_type&quot;: str (schedule,on_capture,immediate)    &quot;every_s&quot;: int    &quot;reglament_exclusion_time_section&quot;: json    &quot;priority&quot;: int    &quot;regulation&quot;: str (immediate, lbt)    &quot;bs_id&quot;: UUID     &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)    &quot;task_type&quot;: str (time_sync)    &quot;utc_offeset_s&quot;: int    &quot;protocol&quot;:  str (6k7, unbp)    &quot;time&quot;: datetime```### delete base station task api objectmethod: DELETE&lt;br/&gt; route: '/bs-tasks/&lt;bs_task_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;bs_task_id&quot;: UUID```response: 200## base station task log api### get base station task log api listmethod: GET&lt;br/&gt; route: '/bs-tasks'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: uuid4, pk    &quot;task&quot;: {        &quot;id&quot;: UUID        &quot;effective_macs&quot;: List[int],        &quot;effective_datetime_from&quot;: datetime        &quot;effective_datetime_to&quot;: datetime        &quot;effective_count&quot;: int        &quot;reglament_type&quot;: str (schedule,on_capture,immediate)        &quot;every_s&quot;: int        &quot;reglament_exclusion_time_section&quot;: json        &quot;priority&quot;: int        &quot;regulation&quot;: str (immediate, lbt)        &quot;bs_id&quot;: UUID         &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)        &quot;task_type&quot;: str (time_sync)        &quot;utc_offeset_s&quot;: int        &quot;protocol&quot;:  str (6k7, unbp)        &quot;time&quot;: datetime    }    &quot;status&quot;: enum(created, in_progress, delivered, succeed, failed)]```### get base station task log api objectmethod: GET&lt;br/&gt; route: '/bs-task-logs/&lt;bs_taks_log_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;bs_taks_log_id&quot;: UUID```response:```json    &quot;id&quot;: uuid4, pk    &quot;task&quot;: {        &quot;id&quot;: UUID        &quot;effective_macs&quot;: List[int],        &quot;effective_datetime_from&quot;: datetime        &quot;effective_datetime_to&quot;: datetime        &quot;effective_count&quot;: int        &quot;reglament_type&quot;: str (schedule,on_capture,immediate)        &quot;every_s&quot;: int        &quot;reglament_exclusion_time_section&quot;: json        &quot;priority&quot;: int        &quot;regulation&quot;: str (immediate, lbt)        &quot;bs_id&quot;: UUID         &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)        &quot;task_type&quot;: str (time_sync)        &quot;utc_offeset_s&quot;: int        &quot;protocol&quot;:  str (6k7, unbp)        &quot;time&quot;: datetime    }    &quot;status&quot;: enum(created, in_progress, delivered, succeed, failed)```  ## base station command api### get base station command api listmethod: GET&lt;br/&gt; route: '/bs-commands'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: UUID    &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)    &quot;bs_id&quot;: UUID    &quot;command_type&quot;: str (delete_downlink_tasks, get_active_downlink_task_ids)    &quot;task_ids&quot;: List[int]]```### get base station command api objectmethod: GET&lt;br/&gt; route: '/bs-commands/&lt;bs_command_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;bs_command_id&quot;: UUID```response:```json    &quot;id&quot;: UUID    &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)    &quot;bs_id&quot;: UUID    &quot;command_type&quot;: str (delete_downlink_tasks, get_active_downlink_task_ids)    &quot;task_ids&quot;: List[int]```### create base station command apimethod: POST&lt;br/&gt; route: '/bs-commands'&lt;br/&gt;request:&lt;br/&gt;body:&lt;br/&gt;```json    &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)    &quot;bs_id&quot;: UUID    &quot;command_type&quot;: str (delete_downlink_tasks, get_active_downlink_task_ids)    &quot;task_ids&quot;: List[int]```response:```json    &quot;id&quot;: UUID    &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)    &quot;bs_id&quot;: UUID    &quot;command_type&quot;: str (delete_downlink_tasks, get_active_downlink_task_ids)    &quot;task_ids&quot;: List[int]```### delete base station command apimethod: DELETE&lt;br/&gt; route: '/bs-commands/&lt;bs_command_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;bs_command_id&quot;: UUID```response: 200## base station command log api### get base station command log api listmethod: GET&lt;br/&gt; route: '/bs-commands'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;limit&quot;: int    &quot;offset&quot;: int```response:```json[    &quot;id&quot;: uuid4, pk    &quot;bs_command&quot;: {        &quot;id&quot;: UUID        &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)        &quot;bs_id&quot;: UUID        &quot;command_type&quot;: str (delete_downlink_tasks, get_active_downlink_task_ids)        &quot;task_ids&quot;: List[int]    }    &quot;status&quot;: enum(created, in_progress, delivered, succeed, failed)]```### get base station command log api objectmethod: GET&lt;br/&gt; route: '/bs-command-logs/&lt;bs_command_log_id&gt;'&lt;br/&gt;request:&lt;br/&gt;```json    &quot;bs_command_log_id&quot;: UUID```response:```json    &quot;id&quot;: uuid4, pk    &quot;bs_command&quot;: {        &quot;id&quot;: UUID        &quot;status&quot;: str (created, in_progress, delivered, succeed, failed)        &quot;bs_id&quot;: UUID        &quot;command_type&quot;: str (delete_downlink_tasks, get_active_downlink_task_ids)        &quot;task_ids&quot;: List[int]    }    &quot;status&quot;: enum(created, in_progress, delivered, succeed, failed)```</longdescription>
</pkgmetadata>