<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![alt text](logo.png &quot;Logo&quot;)Runtype is a collection of run-time type utilities for Python.It is::runner: Fast! Uses an internal typesystem for maximum performance.:brain: Smart! Supports `typing`, forward-references, constraints, auto-casting, and more.:gear: Configurative! Write your own type system, and use it with *dataclass* and *dispatch*.------### Modules- :star: [**validation**](https://runtype.readthedocs.io/en/latest/validation.html) - Provides a smarter alternative to `isinstance` and `issubclass`, with support for the `typing` module, and type constraints.- :star: [**dataclass**](https://runtype.readthedocs.io/en/latest/dataclass.html) - Adds run-time type validation to the built-in dataclass.    - Improves dataclass ergonomics.    - Supports most mypy constructs, like `typing` and forward-references (`foo: 'Bar'`).    - Supports automatic value casting, Pydantic-style. (Optional, off by default)    - Supports types with constraints. (e.g. `String(max_length=10)`)    - Supports optional sampling for faster validation of big lists and dicts.    - Twice faster than Pydantic ([read here](https://runtype.readthedocs.io/en/latest/dataclass.html#compared-to-pydantic))- :star: [**dispatch**](https://runtype.readthedocs.io/en/latest/dispatch.html) - Provides fast multiple-dispatch for functions and methods, via a decorator.    - Inspired by Julia.- :star: [**type utilities**](https://runtype.readthedocs.io/en/latest/types.html) - Provides a set of classes to implement your own type-system.    - Used by runtype itself, to emulate the Python type-system.## DocsRead the docs here: https://runtype.readthedocs.io/## Install```bashpip install runtype```No dependencies.Requires Python 3.6 or up.[![codecov](https://codecov.io/gh/erezsh/runtype/branch/master/graph/badge.svg)](https://codecov.io/gh/erezsh/runtype)## Examples### Validation (Isa &amp; Subclass)```pythonfrom typing import Dict, Mappingfrom runtype import isa, issubclassprint( isa({'a': 1}, Dict[str, int]) )#&gt; Trueprint( isa({'a': 'b'}, Dict[str, int]) )#&gt; Falseprint( issubclass(Dict[str, int], Mapping[str, int]) )#&gt; Trueprint( issubclass(Dict[str, int], Mapping[int, str]) )#&gt; False```### Dataclasses```pythonfrom typing import Listfrom datetime import datetimefrom runtype import dataclass@dataclass(check_types='cast')  # Cast values to the target type, when applicableclass Person:    name: str    birthday: datetime = None   # Optional    interests: List[str] = []   # The list is copied for each instanceprint( Person(&quot;Beetlejuice&quot;) )#&gt; Person(name='Beetlejuice', birthday=None, interests=[])print( Person(&quot;Albert&quot;, &quot;1955-04-18T00:00&quot;, ['physics']) )#&gt; Person(name='Albert', birthday=datetime.datetime(1955, 4, 18, 0, 0), interests=['physics'])print( Person(&quot;Bad&quot;, interests=['a', 1]) )# Traceback (most recent call last):#   ...# TypeError: [Person] Attribute 'interests' expected value of type list[str]. Instead got ['a', 1]#     Failed on item: 1, expected type str```### Multiple Dispatch```pythonfrom runtype import Dispatchdp = Dispatch()@dpdef append(a: list, b):    return a + [b]@dpdef append(a: tuple, b):    return a + (b,)@dpdef append(a: str, b: str):    return a + bprint( append([1, 2, 3], 4) )#&gt; [1, 2, 3, 4]print( append((1, 2, 3), 4) )#&gt; (1, 2, 3, 4)print( append('foo', 'bar') )#&gt; foobarprint( append('foo', 4)     )# Traceback (most recent call last):#    ...# runtype.dispatch.DispatchError: Function 'append' not found for signature (&lt;class 'str'&gt;, &lt;class 'int'&gt;)```Dispatch can also be used for extending the dataclass builtin `__init__`:```pythondp = Dispatch()@dataclass(frozen=False)class Point:    x: int = 0    y: int = 0        @dp    def __init__(self, points: list | tuple):        self.x, self.y = points    @dp    def __init__(self, points: dict):        self.x = points['x']        self.y = points['y']    # Test constructorsp0 = Point()                         # Default constructorassert p0 == Point(0, 0)             # Default constructorassert p0 == Point([0, 0])           # User constructorassert p0 == Point((0, 0))           # User constructorassert p0 == Point({&quot;x&quot;: 0, &quot;y&quot;: 0}) # User constructor```## LicenseRuntype uses the [MIT license](LICENSE).## DonateIf you like Runtype and want to show your appreciation, you can do so at my [patreon page](https://www.patreon.com/erezsh), or [ko-fi page](https://ko-fi.com/erezsh).</longdescription>
</pkgmetadata>