<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ThingsBoard MQTT and HTTP client Python SDK[![Join the chat at https://gitter.im/thingsboard/chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/thingsboard/chat?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)&lt;a href=&quot;https://thingsboard.io&quot;&gt;&lt;img src=&quot;./logo.png?raw=true&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;/a&gt;ThingsBoard is an open-source IoT platform for data collection, processing, visualization, and device management.This project is a Python library that provides convenient client SDK for both Device and [Gateway](https://thingsboard.io/docs/reference/gateway-mqtt-api/) APIs.SDK supports:- Unencrypted and encrypted (TLS v1.2) connection- QoS 0 and 1 (MQTT only)- Automatic reconnect- All [Device MQTT](https://thingsboard.io/docs/reference/mqtt-api/) APIs provided by ThingsBoard- All [Gateway MQTT](https://thingsboard.io/docs/reference/gateway-mqtt-api/) APIs provided by ThingsBoard- Most [Device HTTP](https://thingsboard.io/docs/reference/http-api/) APIs provided by ThingsBoard- Device Claiming- Firmware updatesThe [Device MQTT](https://thingsboard.io/docs/reference/mqtt-api/) API and the [Gateway MQTT](https://thingsboard.io/docs/reference/gateway-mqtt-api/) API are base on the Paho MQTT library. The [Device HTTP](https://thingsboard.io/docs/reference/http-api/) API is based on the Requests library.## InstallationTo install using pip:```bashpip3 install tb-mqtt-client```## Getting StartedClient initialization and telemetry publishing### MQTT```pythonfrom tb_device_mqtt import TBDeviceMqttClient, TBPublishInfotelemetry = {&quot;temperature&quot;: 41.9, &quot;enabled&quot;: False, &quot;currentFirmwareVersion&quot;: &quot;v1.2.2&quot;}client = TBDeviceMqttClient(&quot;127.0.0.1&quot;, &quot;A1_TEST_TOKEN&quot;)# Connect to ThingsBoardclient.connect()# Sending telemetry without checking the delivery statusclient.send_telemetry(telemetry) # Sending telemetry and checking the delivery status (QoS = 1 by default)result = client.send_telemetry(telemetry)# get is a blocking call that awaits delivery status  success = result.get() == TBPublishInfo.TB_ERR_SUCCESS# Disconnect from ThingsBoardclient.disconnect()```### MQTT using TLSTLS connection to localhost. See https://thingsboard.io/docs/user-guide/mqtt-over-ssl/ for more information about client and ThingsBoard configuration.```pythonfrom tb_device_mqtt import TBDeviceMqttClientimport socketclient = TBDeviceMqttClient(socket.gethostname())client.connect(tls=True,               ca_certs=&quot;mqttserver.pub.pem&quot;,               cert_file=&quot;mqttclient.nopass.pem&quot;)client.disconnect()```### HTTP````pythonfrom tb_device_http import TBHTTPDeviceclient = TBHTTPDevice('https://thingsboard.example.com', 'secret-token')client.connect()client.send_telemetry({'temperature': 41.9})````## Using Device APIs**TBDeviceMqttClient** provides access to Device MQTT APIs of ThingsBoard platform. It allows to publish telemetry and attribute updates, subscribe to attribute changes, send and receive RPC commands, etc. Use **TBHTTPClient** for the Device HTTP API.#### Subscription to attributes##### MQTT```pythonimport timefrom tb_device_mqtt import TBDeviceMqttClientdef on_attributes_change(client, result, exception):    if exception is not None:        print(&quot;Exception: &quot; + str(exception))    else:        print(result)client = TBDeviceMqttClient(&quot;127.0.0.1&quot;, &quot;A1_TEST_TOKEN&quot;)client.connect()client.subscribe_to_attribute(&quot;uploadFrequency&quot;, on_attributes_change)client.subscribe_to_all_attributes(on_attributes_change)while True:    time.sleep(1)```##### HTTPNote: The HTTP API only allows a subscription to updates for all attribute.```pythonfrom tb_device_http import TBHTTPClientclient = TBHTTPClient('https://thingsboard.example.com', 'secret-token')def callback(data):    print(data)    # ...# Subscribeclient.subscribe('attributes', callback)# Unsubscribeclient.unsubscribe('attributes')```#### Telemetry pack sending##### MQTT```pythonimport loggingfrom tb_device_mqtt import TBDeviceMqttClient, TBPublishInfoimport timetelemetry_with_ts = {&quot;ts&quot;: int(round(time.time() * 1000)), &quot;values&quot;: {&quot;temperature&quot;: 42.1, &quot;humidity&quot;: 70}}client = TBDeviceMqttClient(&quot;127.0.0.1&quot;, &quot;A1_TEST_TOKEN&quot;)# we set maximum amount of messages sent to send them at the same time. it may stress memory but increases performanceclient.max_inflight_messages_set(100)client.connect()results = []result = Truefor i in range(0, 100):    results.append(client.send_telemetry(telemetry_with_ts))for tmp_result in results:    result &amp;= tmp_result.get() == TBPublishInfo.TB_ERR_SUCCESSprint(&quot;Result &quot; + str(result))client.disconnect()```##### HTTPUnsupported, the HTTP API does not allow the packing of values.#### Request attributes from server##### MQTT```pythonimport loggingimport timefrom tb_device_mqtt import TBDeviceMqttClientdef on_attributes_change(client,result, exception:    if exception is not None:        print(&quot;Exception: &quot; + str(exception))    else:        print(result)client = TBDeviceMqttClient(&quot;127.0.0.1&quot;, &quot;A1_TEST_TOKEN&quot;)client.connect()client.request_attributes([&quot;configuration&quot;,&quot;targetFirmwareVersion&quot;], callback=on_attributes_change)while True:    time.sleep(1)```##### HTTP```pythonfrom tb_device_http import TBHTTPClientclient = TBHTTPClient('https://thingsboard.example.com', 'secret-token')client_keys = ['attr1', 'attr2']shared_keys = ['shared1', 'shared2']data = client.request_attributes(client_keys=client_keys, shared_keys=shared_keys)```#### Respond to server RPC call##### MQTT```pythonimport psutilimport timeimport loggingfrom tb_device_mqtt import TBDeviceMqttClient# dependently of request method we send different data backdef on_server_side_rpc_request(client, request_id, request_body):    print(request_id, request_body)    if request_body[&quot;method&quot;] == &quot;getCPULoad&quot;:        client.send_rpc_reply(request_id, {&quot;CPU percent&quot;: psutil.cpu_percent()})    elif request_body[&quot;method&quot;] == &quot;getMemoryUsage&quot;:        client.send_rpc_reply(request_id, {&quot;Memory&quot;: psutil.virtual_memory().percent})client = TBDeviceMqttClient(&quot;127.0.0.1&quot;, &quot;A1_TEST_TOKEN&quot;)client.set_server_side_rpc_request_handler(on_server_side_rpc_request)client.connect()while True:    time.sleep(1)```##### HTTP```pythonfrom tb_device_http import TBHTTPClientclient = TBHTTPClient('https://thingsboard.example.com', 'secret-token')def callback(data):    rpc_id = data['id']    # ... do something with data['params'] and data['method']...    response_params = {'result': 1}    client.send_rpc(name='rpc_response', rpc_id=rpc_id, params=response_params)# Subscribeclient.subscribe('rpc', callback)# Unsubscribeclient.unsubscribe('rpc')```## Using Gateway APIs**TBGatewayMqttClient** extends **TBDeviceMqttClient**, thus has access to all it's APIs as a regular device.Besides, gateway is able to represent multiple devices connected to it. For example, sending telemetry or attributes on behalf of other, constrained, device. See more info about the gateway here: #### Telemetry and attributes sending ```pythonimport timefrom tb_gateway_mqtt import TBGatewayMqttClientgateway = TBGatewayMqttClient(&quot;127.0.0.1&quot;, &quot;GATEWAY_TEST_TOKEN&quot;)gateway.connect()gateway.gw_connect_device(&quot;Test Device A1&quot;)gateway.gw_send_telemetry(&quot;Test Device A1&quot;, {&quot;ts&quot;: int(round(time.time() * 1000)), &quot;values&quot;: {&quot;temperature&quot;: 42.2}})gateway.gw_send_attributes(&quot;Test Device A1&quot;, {&quot;firmwareVersion&quot;: &quot;2.3.1&quot;})gateway.gw_disconnect_device(&quot;Test Device A1&quot;)gateway.disconnect()```#### Request attributes```pythonimport loggingimport timefrom tb_gateway_mqtt import TBGatewayMqttClientdef callback(result, exception):    if exception is not None:        print(&quot;Exception: &quot; + str(exception))    else:        print(result)gateway = TBGatewayMqttClient(&quot;127.0.0.1&quot;, &quot;TEST_GATEWAY_TOKEN&quot;)gateway.connect()gateway.gw_request_shared_attributes(&quot;Test Device A1&quot;, [&quot;temperature&quot;], callback)while True:    time.sleep(1)```#### Respond to RPC```pythonimport timefrom tb_gateway_mqtt import TBGatewayMqttClientimport psutildef rpc_request_response(client, request_id, request_body):    # request body contains id, method and other parameters    print(request_body)    method = request_body[&quot;data&quot;][&quot;method&quot;]    device = request_body[&quot;device&quot;]    req_id = request_body[&quot;data&quot;][&quot;id&quot;]    # dependently of request method we send different data back    if method == 'getCPULoad':        gateway.gw_send_rpc_reply(device, req_id, {&quot;CPU load&quot;: psutil.cpu_percent()})    elif method == 'getMemoryLoad':        gateway.gw_send_rpc_reply(device, req_id, {&quot;Memory&quot;: psutil.virtual_memory().percent})    else:        print('Unknown method: ' + method)gateway = TBGatewayMqttClient(&quot;127.0.0.1&quot;, &quot;TEST_GATEWAY_TOKEN&quot;)gateway.connect()# now rpc_request_response will process rpc requests from serversgateway.gw_set_server_side_rpc_request_handler(rpc_request_response)# without device connection it is impossible to get any messagesgateway.gw_connect_device(&quot;Test Device A1&quot;)while True:    time.sleep(1)```## Other ExamplesThere are more examples for both [device](https://github.com/thingsboard/thingsboard-python-client-sdk/tree/master/examples/device) and [gateway](https://github.com/thingsboard/thingsboard-python-client-sdk/tree/master/examples/gateway) in corresponding [folders](https://github.com/thingsboard/thingsboard-python-client-sdk/tree/master/examples).## Support - [Community chat](https://gitter.im/thingsboard/chat) - [Q&amp;A forum](https://groups.google.com/forum/#!forum/thingsboard) - [Stackoverflow](http://stackoverflow.com/questions/tagged/thingsboard)## LicensesThis project is released under [Apache 2.0 License](./LICENSE).</longdescription>
</pkgmetadata>