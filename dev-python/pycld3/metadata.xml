<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `pycld3`Python bindings to the Compact Language Detector v3 (CLD3).[![CircleCI](https://circleci.com/gh/bsolomon1124/pycld3.svg?style=svg)](https://circleci.com/gh/bsolomon1124/pycld3)[![License](https://img.shields.io/github/license/bsolomon1124/pycld3.svg)](https://github.com/bsolomon1124/pycld3/blob/master/LICENSE)[![PyPI](https://img.shields.io/pypi/v/pycld3.svg)](https://pypi.org/project/pycld3/)[![Wheel](https://img.shields.io/pypi/wheel/pycld3)](https://img.shields.io/pypi/wheel/pycld3)[![Status](https://img.shields.io/pypi/status/pycld3.svg)](https://pypi.org/project/pycld3/)[![Python](https://img.shields.io/pypi/pyversions/pycld3.svg)](https://pypi.org/project/pycld3)[![Implementation](https://img.shields.io/pypi/implementation/pycld3)](https://pypi.org/project/pycld3)## Newer Alternative: `gcld3`**Note**: Since the original publication of this `pycld3`, Google's `cld3` authors have published the Python package [gcld3](https://pypi.org/project/gcld3/), which are official Python bindings built with [pybind](https://github.com/pybind/pybind11). Please check that project out as it is part of the canonical `cld3` repository and will likely stay in better lock step with any `cld3` changes over time.## OverviewThis package contains Python bindings (via Cython) to Google's [CLD3](https://github.com/google/cld3/) library.```python&gt;&gt;&gt; import cld3&gt;&gt;&gt; cld3.get_language(&quot;影響包含對氣候的變化以及自然資源的枯竭程度&quot;)LanguagePrediction(language='zh', probability=0.999969482421875, is_reliable=True, proportion=1.0)```The library outputs BCP-47-style language codes. For some languages, output is differentiated by script. Language and script names from Unicode CLDR. It supports over 100 languages/scripts. See full list of [supported languages/scripts](https://github.com/google/cld3/blob/master/README.md#supported-languages) in Google's CLD3 documentation.## Installing with Wheels: Supported Versions and PlatformsThis project supports **CPython versions 3.6 through 3.9.**We publish [wheels](https://pypi.org/project/pycld3/#files) for the following matrix:- **MacOS**: CPython 3.6 thru 3.9- **Linux**: CPython 3.6 thru 3.9; ([manylinux1](https://www.python.org/dev/peps/pep-0513/#the-manylinux1-policy))&lt;sup&gt;The wheels for both MacOS and manylinux1 include the external protobuf library copied into the wheel itselfvia [auditwheel](https://github.com/pypa/auditwheel) or[delocate](https://github.com/matthew-brett/delocate) so that you won't need to install any extra non-PyPI dependencies.&lt;/sup&gt;If you are installing on one of the variants listed above, you should **not** need to have `protoc` or `libprotobuf` installed:```bashpython -m pip install -U pycld3```## Installing from Source: PrerequisitesIf you are not on a platform variant that is eligible to use a wheel, you may still be able to use `pycld3` via its [source distribution](https://docs.python.org/3/distutils/sourcedist.html) (`tar.gz`), but a bit more work is required to install.Namely, you'll also need:- the Protobuf compiler (the `protoc` executable)- the Protobuf development headers and `libprotoc` library- a compiler, preferably `g++`Please consult [the official protobuf repository](https://github.com/protocolbuffers/protobuf) for information on installing Protobuf.The project contains an [Installation README](https://github.com/protocolbuffers/protobuf/tree/master/src) that covers installationon Windows and Unix.If for whatever reason you are on a Unix host but unable to use the wheels (for instance, if you have an i686 architecture), here is a quick-and-dirty guide to installing.### Debian/Ubuntu```bashsudo apt-get update -ysudo apt-get install -y --no-install-recommends \    g++ \    protobuf-compiler \    libprotobuf-devpython -m pip install -U pycld3```### Alpine Linux_Note_:[Alpine Linux does not support PyPI wheels](https://pythonspeed.com/articles/alpine-docker-python/)as of April 2020.  The steps below are mandatory on Alpine Linux because you will needto install from the source distribution.  If the situation permits, using a Debian distroshould be much easier (and faster).```bashapk --update add g++ protobuf protobuf-devpython -m pip install -U pycld3```### CentOS/RHELInstall from source, as root/UID 0:```bashsudo su -set -expushd /optPROTOBUF_VERSION='3.11.4'yum update -yyum install -y autoconf automake gcc-c++ glibc-headers gzip libtool make python3-devel zlib-develcurl -Lo /opt/protobuf.tar.gz \    &quot;https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-cpp-${PROTOBUF_VERSION}.tar.gz&quot;tar -xzvf protobuf.tar.gzrm -f protobuf.tar.gzpushd &quot;protobuf-${PROTOBUF_VERSION}&quot;./configure --with-zlib --disable-debug &amp;&amp; make &amp;&amp; make install &amp;&amp; ldconfig --verbosepopd &amp;&amp; rm -rf &quot;protobuf-${PROTOBUF_VERSION}&quot; &amp;&amp; popd &amp;&amp; set +expython -m pip install -U pycld3```Note: the steps above are for CentOS 8.  For earlier versions, you may need to replace:- `gcc-c++` with `g++`- `python3-devel` with `python-devel`### MacOS/Homebrew```bashbrew updatebrew upgrade protobuf || brew install -v protobufpython -m pip install -U pycld3```### WindowsPlease consult Protobuf's[C++ Installation - Windows](https://github.com/protocolbuffers/protobuf/tree/master/src#c-installation---windows)section for help with installing Protobuf on Windows.If you would like to help contribute Windows wheels (preferably as a job within the project'sCI/CD pipelines), please [file an issue](https://github.com/bsolomon1124/pycld3).## Usage`cld3` exports two module-level functions, `get_language()` and `get_frequent_languages()`:```python&gt;&gt;&gt; import cld3&gt;&gt;&gt; cld3.get_language(&quot;影響包含對氣候的變化以及自然資源的枯竭程度&quot;)LanguagePrediction(language='zh', probability=0.999969482421875, is_reliable=True, proportion=1.0)&gt;&gt;&gt; cld3.get_language(&quot;This is a test&quot;)LanguagePrediction(language='en', probability=0.9999980926513672, is_reliable=True, proportion=1.0)&gt;&gt;&gt; for lang in cld3.get_frequent_languages(...     &quot;This piece of text is in English. Този текст е на Български.&quot;,...     num_langs=3... ):...     print(lang)...LanguagePrediction(language='bg', probability=0.9173890948295593, is_reliable=True, proportion=0.5853658318519592)LanguagePrediction(language='en', probability=0.9999790191650391, is_reliable=True, proportion=0.4146341383457184)```## FAQ### `cld3` incorrectly detects my input.  How can I fix this?A first resort is to **preprocess (clean) your input text** based on conditions specific to your program.A salient example is to remove URLs and email addresses from the input.  **CLD3 (unlike [CLD2](https://github.com/CLD2Owners/cld2))does almost none of this cleaning for you**, in the spirit of not penalizing other users with overhead that they may not need.Here's such an example using a simplified URL regex from _Regular Expressions Cookbook, 2nd ed._:```python&gt;&gt;&gt; import re&gt;&gt;&gt; import cld3# cld3 does not ignore the URL components by default&gt;&gt;&gt; s = &quot;Je veux que: https://site.english.com/this/is/a/url/path/component#fragment&quot;&gt;&gt;&gt; cld3.get_language(s)LanguagePrediction(language='en', probability=0.5319557189941406, is_reliable=False, proportion=1.0)&gt;&gt;&gt; url_re = r&quot;\b(?:https?://|www\.)[a-z0-9-]+(\.[a-z0-9-]+)+(?:[/?].*)?&quot;&gt;&gt;&gt; new_s = re.sub(url_re, &quot;&quot;, s)&gt;&gt;&gt; new_s'Je veux que: '&gt;&gt;&gt; cld3.get_language(new_s)LanguagePrediction(language='fr', probability=0.9799421429634094, is_reliable=True, proportion=1.0)```&lt;sup&gt;_Note_: This URL regex aims for simplicity.  It requires a domain name, and doesn't allow a username or password; it allows the scheme(http or https) to be omitted if it can be inferred from the subdomain (www).  Source: _Regular Expressions Cookbook, 2nd ed._ - Goyvaerts &amp; Levithan.&lt;/sup&gt;**In some other cases, you cannot fix the incorrect detection.**Language detection algorithms in general may perform poorly with very short inputs.Rarely should you trust the output of something like `detect(&quot;hi&quot;)`.  Keep this limitation in mind regardlessof what library you are using.Please remember that, at the end of the day, this project is just a Python wrapper to the CLD3 C++ library that does the actual heavy-lifting.### I'm seeing an error during `pip` installation.  How can I fix this?First, please make sure you have read the [installation](#installation-supported-versions-and-platforms) section that that you haveinstalled Protobuf if necessary.If that doesn't help, please [file an issue](https://github.com/bsolomon1124/pycld3/issues) in this repository.The build process for this project is somewhat complex because it involves both Cython and Protobuf, but I do my bestto make it work everywhere possible.### Protobuf is installed, but I'm still seeing &quot;cannot open shared object file&quot;If you've installed Protobuf, but are seeing an error such as:```ImportError: libprotobuf.so.22: cannot open shared object file: No such file or directory```This likely means that Python is not finding the `libprotobuf` shared object,possibly because `ldconfig` didn't do what it was supposed to.You may need to tell it where to look.You can find where the library sits via:```bash$ find /usr -name 'libprotoc.so' \( -type l -o -type f \)/usr/local/lib/libprotoc.so```Then, you can add the directory containing this file to `LD_LIBRARY_PATH`:```bashexport LD_LIBRARY_PATH=&quot;$(dirname $(find /usr -name 'libprotoc.so' \( -type l -o -type f \))):$LD_LIBRARY_PATH&quot;```You can quickly test that this worked:```bash$ python -c 'import cld3; print(cld3.get_language(&quot;影響包含對氣候的變化以及自然資源的枯竭程度&quot;))'LanguagePrediction(language='zh', probability=0.999969482421875, is_reliable=True, proportion=1.0)```### AuthorsThis repository contains a fork of [`google/cld3`](https://github.com/google/cld3/) at commit 06f695f.  The license for `google/cld3` can be found at[LICENSES/CLD3\_LICENSE](https://github.com/bsolomon1124/pycld3/blob/master/LICENSES/CLD3_LICENSE).This repository is a combination of changes [introduced](https://github.com/google/cld3/issues/15) by [various forks](https://github.com/google/cld3/network/members) of `google/cld3` by the following people:- Johannes Baiter ([@jbaiter](https://github.com/jbaiter))- Elizabeth Myers ([@Elizafox](https://github.com/Elizafox))- Witold Bołt ([@houp](https://github.com/houp))- Alfredo Luque ([@iamthebot](https://github.com/iamthebot))- WISESIGHT ([@wisesight](https://github.com/wisesight))- RNogales ([@RNogales94](https://github.com/RNogales94))- Brad Solomon ([@bsolomon1124](https://github.com/bsolomon1124))</longdescription>
</pkgmetadata>