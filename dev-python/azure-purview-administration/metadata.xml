<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Azure Purview Administration client library for PythonAzure Purview is a fully managed cloud service.**Please rely heavily on the [service's documentation][account_product_documentation] to use this library**[Source code][source_code] |  [Package (PyPI)][account_pypi] | [API reference documentation][account_ref_docs]| [Product documentation][account_product_documentation]## _Disclaimer__Azure SDK Python packages support for Python 2.7 is ending 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_## Getting started### Prerequisites- Python 2.7, or 3.6 or later is required to use this package.- You must have an [Azure subscription][azure_subscription] and a [Purview][purview_resource] to use this package.#### Create a Purview ResourceFollow [these][purview_resource] instructions to create your Purview resource### Install the packageInstall the Azure Purview Account client library for Python with [pip][pip]:```bashpip install azure-purview-administration```### Authenticate the clientTo use an [Azure Active Directory (AAD) token credential][authenticate_with_token],provide an instance of the desired credential type obtained from the[azure-identity][azure_identity_credentials] library.To authenticate with AAD, you must first [pip][pip] install [`azure-identity`][azure_identity_pip] and[enable AAD authentication on your Purview resource][enable_aad]After setup, you can choose which type of [credential][azure_identity_credentials] from azure.identity to use.As an example, [DefaultAzureCredential][default_azure_credential]can be used to authenticate the client:Set the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRETUse the returned token credential to authenticate the client:```pythonfrom azure.purview.administration.account import PurviewAccountClientfrom azure.purview.administration.metadatapolicies import PurviewMetadataPoliciesClientfrom azure.identity import DefaultAzureCredentialcredential = DefaultAzureCredential()endpoint = &quot;https://&lt;my-account-name&gt;.purview.azure.com&quot;account_client = PurviewAccountClient(endpoint=endpoint, credential=credential)metadatapolicy_client = PurviewMetadataPoliciesClient(endpoint=endpoint, credential=credential)```## Key concepts### ClientThe package contains two kinds of client: `PurviewAccountClient` and `PurviewMetadataPoliciesClient`. You could use them with one package according to your requirements. ## ExamplesThe following section shows you how to initialize and authenticate your client, then list all of your keys.- [Get Keys](#get-keys &quot;Get All Keys&quot;)### Get Keys```pythonfrom azure.purview.administration.account import PurviewAccountClientfrom azure.identity import DefaultAzureCredentialcredential = DefaultAzureCredential()client = PurviewAccountClient(endpoint=&quot;https://&lt;my-account-name&gt;.purview.azure.com&quot;, credential=credential)response = client.accounts.get_access_keys()print(response)```The following section shows you how to initialize and authenticate your client, then list all of your roles.- [List_Roles](#list-roles &quot;List Roles&quot;)### List Roles```pythonfrom azure.purview.administration.metadatapolicies import PurviewMetadataPoliciesClientfrom azure.identity import DefaultAzureCredentialcredential = DefaultAzureCredential()client = PurviewMetadataPoliciesClient(endpoint=&quot;https://&lt;my-account-name&gt;.purview.azure.com&quot;, credential=credential)response = client.metadata_roles.list()result = [item for item in response]print(result)```## Troubleshooting### GeneralThe Purview client will raise exceptions if status code of your responses is not defined.### LoggingThis library uses the standard[logging][python_logging] library for logging.Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFOlevel.Detailed DEBUG level logging, including request/response bodies and unredactedheaders, can be enabled on a client with the `logging_enable` keyword argument:```pythonimport sysimport loggingfrom azure.identity import DefaultAzureCredentialfrom azure.purview.administration.account import PurviewAccountClient# Create a logger for the 'azure' SDKlogger = logging.getLogger('azure')logger.setLevel(logging.DEBUG)# Configure a console outputhandler = logging.StreamHandler(stream=sys.stdout)logger.addHandler(handler)endpoint = &quot;https://&lt;my-account-name&gt;.purview.azure.com&quot;credential = DefaultAzureCredential()# This client will log detailed information about its HTTP sessions, at DEBUG levelclient = PurviewAccountClient(endpoint=endpoint, credential=credential, logging_enable=True)```Similarly, `logging_enable` can enable detailed logging for a single call,even when it isn't enabled for the client:```pythonresult = client.accounts.get_access_keys(logging_enable=True)```## Next stepsFor more generic samples, see our [client docs][request_builders_and_client].## ContributingThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.This project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.&lt;!-- LINKS --&gt;[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/purview/[account_pypi]: https://pypi.org/project/azure-purview-catalog/#history[account_ref_docs]: https://azure.github.io/azure-sdk-for-python/[account_product_documentation]: https://azure.microsoft.com/services/purview/[azure_subscription]: https://azure.microsoft.com/free/[purview_resource]: https://docs.microsoft.com/azure/purview/create-catalog-portal[pip]: https://pypi.org/project/pip/[authenticate_with_token]: https://docs.microsoft.com/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-an-authentication-token[azure_identity_credentials]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials[azure_identity_pip]: https://pypi.org/project/azure-identity/[default_azure_credential]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential[enable_aad]: https://docs.microsoft.com/azure/purview/create-catalog-portal#add-a-security-principal-to-a-data-plane-role[python_logging]: https://docs.python.org/3.5/library/logging.html[cla]: https://cla.microsoft.com[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/[coc_contact]: mailto:opencode@microsoft.com[request_builders_and_client]: https://aka.ms/azsdk/python/protocol/quickstart# Release History## 1.0.0b1 (2021-09-29)- This is the initial release of the Azure Purview Administration library.- This package includes the operations of `azure-purview-account` that was previously released </longdescription>
</pkgmetadata>