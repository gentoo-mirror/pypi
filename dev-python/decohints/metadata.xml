<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;a&gt;        &lt;img src=&quot;https://raw.githubusercontent.com/gri-gus/decohints/main/assets/images/cover.png&quot; alt=&quot;decohints&quot;&gt;    &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.org/project/decohints&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/decohints&quot; alt=&quot;PyPI&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/decohints&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://static.pepy.tech/badge/decohints&quot; alt=&quot;PyPI&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://opensource.org/licenses/Apache-2.0&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/License-Apache_2.0-blue.svg&quot; alt=&quot;PyPI&quot;&gt;    &lt;/a&gt;&lt;/p&gt;# decohints&lt;a href=&quot;https://github.com/gri-gus/decohints/blob/main/README.ru.md&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;üá∑üá∫ –í–µ—Ä—Å–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º&lt;/b&gt;&lt;/a&gt;A decorator for decorators that allows you to see the parameters of a decorated function when using it in PyCharm.**PyPi**: https://pypi.org/project/decohints/## Reasons for creationBelow is an example of a decorator with parameters without the use of `decohints`:```pythonfrom functools import wrapsdef decorator_with_params(aa=None, bb=None, cc=None):    def _decorator(func):        @wraps(func)        def wrapper(*args, **kwargs):            try:                result = func(*args, **kwargs)            except Exception:                print(&quot;Error&quot;)                return            return result        return wrapper    return _decorator@decorator_with_params()def test(a: int, b: int) -&gt; int:    return a + b```If you type below `test()` in PyCharm and wait, it will show decorator wrapper parameter hints as `test` functionparameter hints:&lt;img width=&quot;150&quot; height=&quot;105&quot; src=&quot;https://raw.githubusercontent.com/gri-gus/decohints/main/assets/images/1.png&quot; alt=&quot;test() (*args, **kwargs)&quot;&gt;This is not convenient and can confuse developers, which is why this library was made.## Installation```shellpip install decohints```## Usage&gt; ‚úÖ Works with all kinds of decorators \&gt; ‚ö†Ô∏è If your decorator is already wrapped in another decorator, then `decohints` should be on topTo use, you need to follow two simple steps:1. Import the `decohints` decorator from the `decohints` library:```pythonfrom decohints import decohints```2. Wrap your decorator with a `decohints` decorator:```python@decohintsdef your_decorator():    ...```The following is an example of a decorator with parameters, with using `decohints`:```pythonfrom functools import wrapsfrom decohints import decohints@decohintsdef decorator_with_params(aa=None, bb=None, cc=None):    def _decorator(func):        @wraps(func)        def wrapper(*args, **kwargs):            try:                result = func(*args, **kwargs)            except Exception:                print(&quot;Error&quot;)                return            return result        return wrapper    return _decorator@decorator_with_params()def test(a: int, b: int) -&gt; int:    return a + b```If you type below `test()` in PyCharm and wait, it will show `test` function parameter hints:&lt;img width=&quot;150&quot; height=&quot;105&quot; src=&quot;https://raw.githubusercontent.com/gri-gus/decohints/main/assets/images/2.png&quot; alt=&quot;test() (a: int, b: int)&quot;&gt;&gt; ‚ùïExamples of use with decorator class, class decorators, and more are found at here:&lt;a href=&quot;https://github.com/gri-gus/decohints/tree/main/examples/decohints&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;click&lt;/b&gt;&lt;/a&gt;## Alternatives### Specifying the type of wrapper&gt; ‚úÖ Works with all kinds of decorator functionsSpecifying the type `wrapper: func` will have the same behavior as using `decohints`.Example:```pythonfrom functools import wrapsdef decorator(func):    @wraps(func)    def wrapper(*args, **kwargs):        try:            result = func(*args, **kwargs)        except Exception:            print(&quot;Error&quot;)            return        return result    wrapper: func    return wrapper@decoratordef test(a: int, b: int) -&gt; int:    return a + b```If you type below `test()` in PyCharm and wait, it will show `test` function parameter hints:&lt;img width=&quot;150&quot; height=&quot;105&quot; src=&quot;https://raw.githubusercontent.com/gri-gus/decohints/main/assets/images/2.png&quot; alt=&quot;test() (a: int, b: int)&quot;&gt;### Specifying an output type in a decorator with parameters&gt; ‚ùóÔ∏èThis method only works in decorator functions with parametersIf you specify the `Callable` type from the `typing` module for the result of the decorator with parameters, then thebehavior will be the same as using `decohints`.Example:```pythonfrom functools import wrapsfrom typing import Callabledef decorator_with_params(aa=None, bb=None, cc=None) -&gt; Callable:    def _decorator(func):        @wraps(func)        def wrapper(*args, **kwargs):            try:                result = func(*args, **kwargs)            except Exception:                print(&quot;Error&quot;)                return            return result        return wrapper    return _decorator@decorator_with_params()def test(a: int, b: int) -&gt; int:    return a + b```If you type below `test()` in PyCharm and wait, it will show `test` function parameter hints:&lt;img width=&quot;150&quot; height=&quot;105&quot; src=&quot;https://raw.githubusercontent.com/gri-gus/decohints/main/assets/images/2.png&quot; alt=&quot;test() (a: int, b: int)&quot;&gt;</longdescription>
</pkgmetadata>