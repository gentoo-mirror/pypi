<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># EarthNet Minicuber*A Python library for creating EarthNet-style minicubes.*&lt;a href='https://pypi.python.org/pypi/earthnet-minicuber'&gt;    &lt;img src='https://img.shields.io/pypi/v/earthnet-minicuber.svg' alt='PyPI' /&gt;&lt;/a&gt;&lt;a href=&quot;https://opensource.org/licenses/MIT&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/License-MIT-blue.svg&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/vitusbenson&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/twitter/follow/vitusbenson?style=social&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt;**GitHub**: [https://github.com/earthnet2021/earthnet-minicuber](https://github.com/earthnet2021/earthnet-minicuber)**PyPI**: [https://pypi.org/project/earthnet-minicuber/](https://pypi.org/project/earthnet-minicuber/)This package creates minicubes from cloud storage using STAC catalogues. A minicube usually contains a satellite image time series of Sentinel 2 imagery alongside other complementary information, all re-gridded to a common grid. This package implements a cloud mask based on deep learning, which allows for analysis-ready Sentinel 2 imagery.It is currently under development, thus do expect bugs and please report them!## Tutorial1. Loading the package```Pythonimport earthnet_minicuber as emc```2. Creating a dictionary with specifications of the desired minicube```Pythonspecs = {    &quot;lon_lat&quot;: (43.598946, 3.087414), # center pixel    &quot;xy_shape&quot;: (256, 256), # width, height of cutout around center pixel    &quot;resolution&quot;: 10, # in meters.. will use this on a local UTM grid..    &quot;time_interval&quot;: &quot;2021-07-01/2021-07-31&quot;,    &quot;providers&quot;: [        {            &quot;name&quot;: &quot;s2&quot;,            &quot;kwargs&quot;: {&quot;bands&quot;: [&quot;B02&quot;, &quot;B03&quot;, &quot;B04&quot;, &quot;B8A&quot;], &quot;best_orbit_filter&quot;: True, &quot;five_daily_filter&quot;: False, &quot;brdf_correction&quot;: True, &quot;cloud_mask&quot;: True, &quot;aws_bucket&quot;: &quot;planetary_computer&quot;}        },        {            &quot;name&quot;: &quot;s1&quot;,            &quot;kwargs&quot;: {&quot;bands&quot;: [&quot;vv&quot;, &quot;vh&quot;], &quot;speckle_filter&quot;: True, &quot;speckle_filter_kwargs&quot;: {&quot;type&quot;: &quot;lee&quot;, &quot;size&quot;: 9}, &quot;aws_bucket&quot;: &quot;planetary_computer&quot;}         },        {            &quot;name&quot;: &quot;ndviclim&quot;,            &quot;kwargs&quot;: {&quot;bands&quot;: [&quot;mean&quot;, &quot;std&quot;]}        },        {            &quot;name&quot;: &quot;cop&quot;,            &quot;kwargs&quot;: {}        },        {            &quot;name&quot;: &quot;esawc&quot;,            &quot;kwargs&quot;: {&quot;bands&quot;: [&quot;lc&quot;], &quot;aws_bucket&quot;: &quot;planetary_computer&quot;}        }        ]}```3. Downloading the minicube```Pythonmc = emc.load_minicube(specs, compute = True)```4. Plotting cloud-masked Sentinel 2 RGB imagery```Pythonemc.plot_rgb(mc)```See `notebooks/example.ipynb` for a more detailed usage example.## Data ProvidersThe minicuber is centered around the concept of data providers, which wrap a data source and handle data loading of that source. The `emc.Minicuber` class then manages these data providers, by telling them the spatio-temporal range for which data needs to be loaded and afterwards re-gridding all data to a common reference frame (UTM grid).### Sentinel 2The Sentinel 2 provider loads and processes Copernicus Sentinel 2 imagery.Kwargs:- `bands`: choose any subset from `[&quot;B01&quot;, &quot;B02&quot;, &quot;B03&quot;, &quot;B04&quot;, &quot;B05&quot;, &quot;B06&quot;, &quot;B07&quot;, &quot;B08&quot;, &quot;B8A&quot;, &quot;B09&quot;, &quot;B11&quot;, &quot;B12&quot;, &quot;WVP&quot;, &quot;AOT&quot;, &quot;SCL&quot;]`.- `aws_bucket`: We currently support data loading from three cloud buckets: Microsoft Planetary Computer (`&quot;planetary_computer&quot;`), Element84 AWS bucket (`element84`) and DigitalEarthAfrica AWS bucket (`dea`). We recommend using the Microsoft planetary computer with the keyword argument `aws_bucket = &quot;planetary_computer&quot;`.- `best_orbit_filter`: Sentinel 2 has a regular overpass frequency of 5 days. However, sometimes it can be smaller due to off-nadir captures. Such captures change the viewing angle of the scene. If `True`, this filter finds the best orbit and then only returns imagery from a regular 5-daily cycle.- `five_daily_filter`: If `True` returns a regular 5-daily cycle starting with the first date in `full_time_interval`. It has no effect, if `best_orbit_filter` is used.- `brdf_correction`: If `True`, does BRDF correction based on the Sentinel 2 Metadata (illumination angles).- `cloud_mask`: If `True`, creates a cloud and cloud shadow mask based on deep learning. It automatically finds the best available cloud mask for the requested `bands`.- `cloud_mask_rescale_factor`: If using cloud mask and a lower resolution than 10m, set this rescaling factor to the multiple of 10m that you are requesting. E.g. if `resolution = 20`, set `cloud_mask_rescale_factor = 2`.- `correct_processing_baseline`: If `True` (default): corrects the shift of +1000 that exists in Sentinel 2 data with processing baseline &gt;= 4.0## InstallationPrerequisites (We use an Anaconda environment):```conda create -n minicuber python=3.10 gdal cartopy -c conda-forgeconda deactivateconda activate minicuberpip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpupip install scipy matplotlib seaborn netCDF4 xarray zarr dask shapely pillow pandas s3fs fsspec boto3 psycopg2 pystac-client stackstac planetary-computer rasterio[s3] rioxarray odc-algo segmentation-models-pytorch folium ipykernel ipywidgets sen2nbar```Install this package with PyPI:```pip install earthnet-minicuber```or install this package in developing mode with```git clone https://github.com/earthnet2021/earthnet-minicuber.gitcd earthnet-minicuberpip install -e .```or directly with```pip install git+https://github.com/earthnet2021/earthnet-minicuber.git```## Similar PackagesThis package is build on top of [stackstac](https://stackstac.readthedocs.io/en/latest/), which allows accessing data stored in cloud-optimized geotiffs with xarray.Similar to this package, [cubo](https://github.com/davemlz/cubo) provides a high-level interface to stackstac.## AcknowledgementThis project has received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No 101004188 ([DeepCube Horizon 2020](https://deepcube-h2020.eu/ &quot;DeepCube Horizon 2020&quot;)). We are grateful to David Montero Loaiza for providing the [sen2nbar](https://github.com/ESDS-Leipzig/sen2nbar) package used for the Sentinel 2 BRDF correction. We are grateful to César Aybar and the [CloudSEN12](https://cloudsen12.github.io/) team, their work forms the basis for the cloud mask implemented in earthnet-minicuber.</longdescription>
</pkgmetadata>