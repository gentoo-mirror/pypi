<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyTacticianPyTactician is a Python Library for interfacing with the [Coq ProofAssistant](https://coq.inria.fr) through the[API](https://coq-tactician.github.io/api) of its[Tactician](https://coq-tactician.github.io) plugin and reading associateddatasets.The major version number `x` of this libraryindicates the version of the dataset and communication protocol. Any PyTacticianversion `x.y` is compatible with the communication protocol `x`.## InstallationBinary wheels are provided for Linux and MacOS (on[PyPI](https://pypi.org/project/pytactician)). On those platforms you caninstall by executing `pip install pytactician`. If you need to install fromsource, you need to have Cap'n Proto &gt;= 0.8 installed on your system. See themain repo[README](https://github.com/coq-tactician/coq-tactician-api#prerequisites) formore details on prerequisites. Once you have the prerequisites, you can installby running `pip install .` from the root of the repository.## UsagePyTactician provides a library to work with the datasets extracted from Coq andto directly interface with Coq through Tacticians API. The documentation for thelibrary can be found[here](https://coq-tactician.github.io/api/pytactician-pdoc).In addition, PyTactician contains a number of executables that can be used toanalyze datasets and interact with Coq. Available executables are as follows(use the `--help` flag for each executable to learn about all the options).- `pytact-check [-h] [--jobs JOBS] [--quick] [--verbose VERBOSE] dir`   Run sanity checks on a dataset and print some statistics.- `pytact-visualize [-h] [--port PORT] [--hostname HOSTNAME] [--dev] [--fast | --workers WORKERS] dataset`:   Start an interactive server that visualizes a dataset.- `pytact-server [-h] [--tcp TCP] [--record RECORD_FILE] {graph,text}`  Example python server capable of communicating with Coq through Tactician's 'synth' tactic  To learn how to interface Coq and Tactician with this server, see the sections below.- `pytact-oracle [-h] [--tcp PORT] [--record RECORD_FILE] {graph,text} dataset`  A tactic prediction server acting as an oracle, retrieving it's information from a dataset- `pytact-fake-coq [-h] (--tcp TCP_LOCATION | --stdin EXECUTABLE) data`  A fake Coq client that connects to a prediction server and feeds it a stream of previously recorded messages.- `pytact-prover`: A dummy example client that interfaces with Coq and Tactician for proof exploration  driven by the client.</longdescription>
</pkgmetadata>