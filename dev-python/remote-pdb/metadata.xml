<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========Overview========Remote vanilla PDB (over TCP sockets) *done right*: no extras, proper handling around connection failures and CI. Basedon `pdbx &lt;https://pypi.python.org/pypi/pdbx&gt;`_.* Free software: BSD 2-Clause LicenseInstallation============::    pip install remote-pdbUsage=====To open a remote PDB on first available port:.. code:: python    from remote_pdb import set_trace    set_trace() # you'll see the port number in the logsTo use some specific host/port:.. code:: python    from remote_pdb import RemotePdb    RemotePdb('127.0.0.1', 4444).set_trace()To connect just run ``telnet 127.0.0.1 4444``.  When you are finisheddebugging, either exit the debugger, or press Control-], then Control-d.Alternately, one can connect with NetCat: ``nc -C 127.0.0.1 4444`` or Socat: ``socat readlinetcp:127.0.0.1:4444`` (for line editing and history support).  When finished debugging, either exitthe debugger, or press Control-c.Note that newer Ubuntu disabled readline support in socat, so if you get``unknown device/address &quot;readline&quot;`` try using rlwrap like this::    rlwrap socat - tcp:127.0.0.1:4444Using in containers===================If you want to connect from the host to remote-pdb running inside the container you should make sure that:* The port you will use is mapped (eg: ``-p 4444:4444``).* The host is set to ``0.0.0.0`` (``localhost` or ``127.0.0.1`` will not work because  Docker doesn't map the port on the local interface).Integration with breakpoint() in Python 3.7+============================================If you are using Python 3.7 one can use the new ``breakpoint()`` built in to invokeremote PDB. In this case the following environment variable must be set:.. code:: bash    PYTHONBREAKPOINT=remote_pdb.set_traceThe debugger can then be invoked as follows, without any imports:.. code:: python    breakpoint()As the ``breakpoint()`` function does not take any arguments, environment variables can be used tospecify the host and port that the server should listen to. For example, to run ``script.py`` in such away as to make ``telnet 127.0.0.1 4444`` the correct way of connecting, one would run:.. code:: bash    PYTHONBREAKPOINT=remote_pdb.set_trace REMOTE_PDB_HOST=127.0.0.1 REMOTE_PDB_PORT=4444 python script.pyIf ``REMOTE_PDB_HOST`` is omitted then a default value of 127.0.0.1 will be used. If ``REMOTE_PDB_PORT`` isomitted then the first available port will be used. The connection information will be logged to the console,as with calls to ``remote_pdb.set_trace()``.To quiet the output, set ``REMOTE_PDB_QUIET=1``, this will prevent``RemotePdb`` from producing any output -- you'll probably want to specify``REMOTE_PDB_PORT`` as well since the randomized port won't be printed.Note about OS X===============In certain scenarios (backgrounded processes) OS X will prevent readline to be imported (and readline is a dependency of pdb).A workaround (run this early):.. code:: python    import signal    signal.signal(signal.SIGTTOU, signal.SIG_IGN)See `#9 &lt;https://github.com/ionelmc/python-remote-pdb/issues/9&gt;`_ and `cpython#14892 &lt;http://bugs.python.org/issue14892&gt;`_.Requirements============Python 2.6, 2.7, 3.2, 3.3 and PyPy are supported.Similar projects================* `qdb &lt;https://pypi.python.org/pypi/qdb&gt;`_Changelog=========2.1.0 (2020-07-24)------------------* Changed logging to use ``remote_pdb`` logger instead of the root one.  Contributed by Terence Honles in `#24 &lt;https://github.com/ionelmc/python-remote-pdb/pull/24&gt;`_.2.0.0 (2019-07-31)------------------* Fixed inconsistency with normal use of ``pdb`` - `BdbQuit` will now be raised on quitting.  Contributed by Anthony Sottile in `#18 &lt;https://github.com/ionelmc/python-remote-pdb/pull/18&gt;`_.  **BACKWARDS INCOMPATIBLE**.* Added ``REMOTE_PDB_QUIET=1`` to silence output.  Contributed by Anthony Sottile in `#19 &lt;https://github.com/ionelmc/python-remote-pdb/pull/19&gt;`_.1.3.0 (2019-03-13)------------------* Documented support for Python 3.7's ``breakpoint()``.* Added support for setting the socket listening host/port through the ``REMOTE_PDB_HOST``/``REMOTE_PDB_PORT``  environment variables. Contributed by Matthew Wilkes in `#14 &lt;https://github.com/ionelmc/python-remote-pdb/pull/14&gt;`_.* Removed use of `rw` file wrappers around sockets (turns out socket's ``makefile`` is very buggy in Python 3.6 and  later - `output is discarded &lt;https://bugs.python.org/issue35928&gt;`_). Contributed in `#13  &lt;https://github.com/ionelmc/python-remote-pdb/pull/13&gt;`_.1.2.0 (2015-09-26)------------------* Always print/log listening address.1.1.3 (2015-07-06)------------------* Corrected the default frame tracing starts from.1.1.2 (2015-07-06)------------------* Small readme update.1.1.1 (2015-07-06)------------------* Remove bogus ``remote_pdb`` console script.1.1.0 (2015-06-21)------------------* Fixed buffering issues when running on Python 3 and Windows.1.0.0 (2015-06-15)------------------* Added support for PDB++.0.2.1 (2014-03-07)------------------* First release on PyPI.</longdescription>
</pkgmetadata>