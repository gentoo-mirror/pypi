<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JSON to excel converter[![](https://img.shields.io/github/license/oarepo/json-excel-converter.svg)](https://github.com/oarepo/json-excel-converter/blob/master/LICENSE)[![](https://img.shields.io/travis/oarepo/json-excel-converter.svg)](https://travis-ci.org/oarepo/json-excel-converter)[![](https://img.shields.io/coveralls/oarepo/json-excel-converter.svg)](https://coveralls.io/r/oarepo/json-excel-converter)[![](https://img.shields.io/pypi/v/json-excel-converter.svg)](https://pypi.org/pypi/json-excel-converter)A package that converts json to CSV, excel or other table formats&lt;!--TOC--&gt;- [JSON to excel converter](#json-to-excel-converter)  - [Sample output](#sample-output)    - [Simple json](#simple-json)    - [Nested json](#nested-json)    - [json with array property](#json-with-array-property)  - [Installation](#installation)  - [Usage](#usage)    - [Simple usage](#simple-usage)    - [Streaming usage with restarts](#streaming-usage-with-restarts)    - [Arrays](#arrays)    - [XLSX Formatting](#xlsx-formatting)      - [Cell format](#cell-format)      - [Column widths](#column-widths)      - [Row heights](#row-heights)      - [Urls](#urls)      - [Custom cell rendering](#custom-cell-rendering)&lt;!--TOC--&gt;## Sample output![](./docs/sample.png)### Simple json```json[  {    &quot;col1&quot;: &quot;val1&quot;,    &quot;col2&quot;: &quot;val2&quot;   }]```the generated CSV/excel is:```col1          col2==================val1          val2```### Nested json```json[  {    &quot;col1&quot;: &quot;val1&quot;,    &quot;col2&quot;: {      &quot;col21&quot;: &quot;val21&quot;,      &quot;col22&quot;: &quot;val22&quot;    }  }]```the generated CSV/excel is (in excel, col2 spans two cells horizontally):```col1          col2              col21         col22=================================val1          val21         val22```### json with array property```json[  {    &quot;col1&quot;: &quot;val1&quot;,    &quot;col2&quot;: [      {        &quot;col21&quot;: &quot;val21&quot;      },      {        &quot;col21&quot;: &quot;val22&quot;      }    ]  }]```the generated CSV/excel is (in excel, col2 spans two cells horizontally):```col1          col2                       col21         col21=================================val1          val21         val22```## Installation```bashpip install json-excel-converter[extra]```where extra is: * ``xlsxwriter`` to use the xlsxwriter## Usage### Simple usage```pythonfrom json_excel_converter import Converter from json_excel_converter.xlsx import Writerdata = [    {'a': [1], 'b': 'hello'},    {'a': [1, 2, 3], 'b': 'world'}]conv = Converter()conv.convert(data, Writer(file='/tmp/test.xlsx'))```### Streaming usage with restarts```pythonfrom json_excel_converter import Converter, LinearizationError from json_excel_converter.csv import Writerconv = Converter()writer = Writer(file='/tmp/test.csv')while True:    try:        data = get_streaming_data()     # custom function to get iterator of data        conv.convert_streaming(data, writer)        break    except LinearizationError:        pass```### ArraysWhen the first row is processed, the library guesses the columns layout. In case of arrays,a column (or more columns if the array contains json objects) is created for eachof the items in the array, as shown in the example above.On subsequent rows the array might contain more items. The library reacts by adjusting the number of columns in the layout and raising ``LinearizationError`` as previous rows mightbe already output.``Converter.convert_streaming`` just raises this exception - it is the responsibility of callerto take the right action.``Converter.convert`` captures this error and restarts the processing. In case of CSVthis means truncating the output file to 0 bytes and processing the data again. XLSX writercaches all the data before writing them to excel so the restart just means discarding the cache.If you know the size of the array in advance, you should pass it in options. Then noprocessing restarts are required and ``LinearizationError`` is not raised. ```pythonfrom json_excel_converter import Converter, Optionsfrom json_excel_converter.xlsx import Writerdata = [    {'a': [1]},    {'a': [1, 2, 3]}]options = Options()options['a'].cardinality = 3conv = Converter(options=options)writer = Writer(file='/tmp/test.xlsx')conv.convert(data, writer)# orconv.convert_streaming(data, writer)    # no exception occurs here```### XLSX Formatting#### Cell formatXLSX writer enables you to format the header and data by passing an array of header_formatters ordata_formatters. Take these from ``json_excel_converter.xlsx.formats`` package or create your own.```pythonfrom json_excel_converter import Converterfrom json_excel_converter.xlsx import Writerfrom json_excel_converter.xlsx.formats import LastUnderlined, Bold, \    Centered, Formatdata = [    {'a': 'Hello'},    {'a': 'World'}]w = Writer('/tmp/test3.xlsx',           header_formats=(               Centered, Bold, LastUnderlined,               Format({                   'font_color': 'red'               })),           data_formats=(               Format({                   'font_color': 'green'               }),)           )conv = Converter()conv.convert(data, w)```See https://xlsxwriter.readthedocs.io/format.html for details on formats in xlsxwriter#### Column widthsPass the required column widths to writer:```pythonw = Writer('/tmp/test3.xlsx', column_widths={    'a': 20})```Width of nested data can be specified as well: ```pythondata = [    {'a': {'b': 1, 'c': 2}}]w = Writer('/tmp/test3.xlsx', column_widths={    'a.b': 20,    'a.c': 30,})```![](./docs/test3.png)To set the default column width, pass it as ``DEFAULT_COLUMN_WIDTH`` property:```pythonw = Writer('/tmp/test3.xlsx', column_widths={    DEFAULT_COLUMN_WIDTH: 20})```#### Row heightsRow heights can be specified via the ``row_heights`` writer option:```pythonw = Writer('/tmp/test3.xlsx', row_heights={    DEFAULT_ROW_HEIGHT: 20,     # a bit taller rows    1: 40                       # extra tall header})```#### Urls![](./docs/test4.png)To render url, pass a function that gets data of a row and returns url to options ```pythondata = [    {'a': 'https://google.com'},]options = Options()options['a'].url = lambda data: data['a']conv = Converter(options)conv.convert(data, w)```**Note:** this will only be rendered in XLSX output, CSV output will silentlyignore the link.#### Custom cell renderingOverride the ``write_cell`` method. The method receives ``cell_data`` (instance of ``json_excel_converter.Value``) and ``data`` (the originaldata being written to this row). Note that this method is used bothfor writing header and rows - for header the ``data`` parameter is None. ```pythonclass UrlWriter(Writer):    def write_cell(self, row, col, cell_data, cell_format, data):        if cell_data.path == 'a' and data:            self.sheet.write_url(row, col,                                 'https://test.org/' + data['b'],                                 string=cell_data.value)        else:            super().write_cell(row, col, cell_data, cell_format, data)```</longdescription>
</pkgmetadata>