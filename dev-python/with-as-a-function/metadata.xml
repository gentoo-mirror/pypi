<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python ``with`` as a Function=============================Use context managers with a function instead of a statement.Provides a minimal and portable interface for using contextmanagers with all the advantages of functions over syntax.Allows using context managers on Python implementations thatare too old or too incomplete to have the ``with`` statement.Versioning----------This library's version numbers follow the `SemVer 2.0.0specification &lt;https://semver.org/spec/v2.0.0.html&gt;`_.Installation------------::    pip install with-as-a-functionUsage-----Import ``with_``, ``iwith``, or both:.. code:: python    from with_ import with_, iwith``with_`` wraps a function in a context manager.For example,.. code:: python    data = with_(open('my_file.txt'), lambda my_file: my_file.read())is similar to:.. code:: python    with open('my_file.txt') as my_file:        data = my_file.read()``iwith`` wraps a generator or other iterable in a context manager.For example,.. code:: python    lines = iwith(open('my_file.txt'), lambda my_file: my_file)is similar to:.. code:: python    def _lines():        with open('my_file.txt') as my_file:            yield from my_file    lines = _lines()And of course because ``with_`` and ``iwith`` are functions, youcan combine them with ``functools.partial`` and other functionalprogramming libraries and techniques for many more uses.Portability-----------Portable to all releases of Python 3, and releasesof Python 2 starting with 2.2.*Even those without the* ``with`` *statement andwithout the* ``yield from`` *expression.*For popular Python reimplementations with quicks or bugs thatmake the normal implementation of this module not work, otherimplementations are included in the source distribution.</longdescription>
</pkgmetadata>