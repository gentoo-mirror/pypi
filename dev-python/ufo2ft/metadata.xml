<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|GitHub Actions status| |PyPI Version| |Codecov| |Gitter Chat|ufo2ft======ufo2ft (&quot;UFO to FontTools&quot;) is a fork of`ufo2fdk &lt;https://github.com/typesupply/ufo2fdk&gt;`__ whose goal is togenerate OpenType font binaries from UFOs without the FDK dependency.The library provides two functions, ``compileOTF`` and ``compileTTF``,which work exactly the same way:.. code:: python    from defcon import Font    from ufo2ft import compileOTF    ufo = Font('MyFont-Regular.ufo')    otf = compileOTF(ufo)    otf.save('MyFont-Regular.otf')In most cases, the behavior of ufo2ft should match that of ufo2fdk,whose documentation is retained below (and hopefully is still accurate).Naming Data~~~~~~~~~~~As with any OpenType compiler, you have to set the font naming data to aparticular standard for your naming to be set correctly. In ufo2fdk, youcan get away with setting *two* naming attributes in your font.infoobject for simple fonts:-  familyName: The name for your family. For example, &quot;My Garamond&quot;.-  styleName: The style name for this particular font. For example,   &quot;Display Light Italic&quot;ufo2fdk will create all of the other naming data based on thse twofields. If you want to use the fully automatic naming system, all of theother name attributes should be set to ``None`` in your font. However,if you want to override the automated system at any level, you canspecify particular naming attributes and ufo2fdk will honor yoursettings. You don't have to set *all* of the attributes, just the onesyou don't want to be automated. For example, in the family &quot;My Garamond&quot;you have eight weights. It would be nice to style map the italics to theromans for each weight. To do this, in the individual romans anditalics, you need to set the style mapping data. This is done throughthe ``styleMapFamilyName`` and ``styleMapStyleName`` attributes. In eachof your roman and italic pairs you would do this:**My Garamond-Light.ufo**-  familyName = &quot;My Garamond&quot;-  styleName = &quot;Light&quot;-  styleMapFamilyName = &quot;My Garamond Display Light&quot;-  styleMapStyleName = &quot;regular&quot;**My Garamond-Light Italic.ufo**-  familyName = &quot;My Garamond&quot;-  styleName = &quot;Display Light Italic&quot;-  styleMapFamilyName = &quot;My Garamond Display Light&quot;-  styleMapStyleName = &quot;italic&quot;**My Garamond-Book.ufo**-  familyName = &quot;My Garamond&quot;-  styleName = &quot;Book&quot;-  styleMapFamilyName = &quot;My Garamond Display Book&quot;-  styleMapStyleName = &quot;regular&quot;**My Garamond-Book Italic.ufo**-  familyName = &quot;My Garamond&quot;-  styleName = &quot;Display Book Italic&quot;-  styleMapFamilyName = &quot;My Garamond Display Book&quot;-  styleMapStyleName = &quot;italic&quot;**etc.**Additionally, if you have defined any naming data, or any data for thatmatter, in table definitions within your font's features that data willbe honored.Feature generation~~~~~~~~~~~~~~~~~~If your font's features do not contain kerning/mark/mkmk features,ufo2ft will create them based on your font's kerning/anchor data.In addition to`Adobe OpenType feature files &lt;http://www.adobe.com/devnet/opentype/afdko/topic_feature_file_syntax.html&gt;`__,ufo2ft also supports the`MTI/Monotype format &lt;http://monotype.github.io/OpenType_Table_Source/otl_source.html&gt;`__.For example, a GPOS table in this format would be stored within the UFO at``data/com.github.googlei18n.ufo2ft.mtiFeatures/GPOS.mti``.Fallbacks~~~~~~~~~Most of the fallbacks have static values. To see what is set for these,look at ``fontInfoData.py`` in the source code.In some cases, the fallback values are dynamically generated from otherdata in the info object. These are handled internally with functions.Merging TTX~~~~~~~~~~~If the UFO data directory has a ``com.github.fonttools.ttx`` folder with TTXfiles ending with ``.ttx``, these will be merged in the generated font.The index TTX (generated when using using ``ttx -s``) is not required... |GitHub Actions status| image:: https://github.com/googlefonts/ufo2ft/workflows/Test%20+%20Deploy/badge.svg.. |PyPI Version| image:: https://img.shields.io/pypi/v/ufo2ft.svg   :target: https://pypi.org/project/ufo2ft/.. |Codecov| image:: https://codecov.io/gh/googlefonts/ufo2ft/branch/master/graph/badge.svg   :target: https://codecov.io/gh/googlefonts/ufo2ft.. |Gitter Chat| image:: https://badges.gitter.im/fonttools-dev/ufo2ft.svg   :alt: Join the chat at https://gitter.im/fonttools-dev/ufo2ft   :target: https://gitter.im/fonttools-dev/ufo2ft?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badgeColor fonts~~~~~~~~~~~ufo2ft supports building ``COLR`` and ``CPAL`` tables.If there is ``com.github.googlei18n.ufo2ft.colorPalettes`` key in font lib, and``com.github.googlei18n.ufo2ft.colorLayerMapping`` key in the font orin any of the glyphs lib, then ufo2ft will build ``CPAL`` table from the colorpalettes, and ``COLR`` table from the color layers.``colorPalettes`` is a array of palettes, each palette is a array of colors andeach color is a array of floats representing RGBA colors. For example:.. code:: xml    &lt;key&gt;com.github.googlei18n.ufo2ft.colorPalettes&lt;/key&gt;    &lt;array&gt;      &lt;array&gt;        &lt;array&gt;          &lt;real&gt;0.26&lt;/real&gt;          &lt;real&gt;0.0&lt;/real&gt;          &lt;real&gt;0.23&lt;/real&gt;          &lt;real&gt;1.0&lt;/real&gt;        &lt;/array&gt;        &lt;array&gt;          &lt;real&gt;0.86&lt;/real&gt;          &lt;real&gt;0.73&lt;/real&gt;          &lt;real&gt;0.28&lt;/real&gt;          &lt;real&gt;1.0&lt;/real&gt;        &lt;/array&gt;      &lt;/array&gt;    &lt;/array&gt;``colorLayerMapping`` is a array of color layers, each color layer is a array oflayer name and palette color index. It is a per-glyph key, but if present inthe font lib then it will be used for all glyphs that lack it. For example:.. code:: xml      &lt;key&gt;com.github.googlei18n.ufo2ft.colorLayerMapping&lt;/key&gt;      &lt;array&gt;        &lt;array&gt;          &lt;string&gt;color.1&lt;/string&gt;          &lt;integer&gt;1&lt;/integer&gt;        &lt;/array&gt;        &lt;array&gt;          &lt;string&gt;color.2&lt;/string&gt;          &lt;integer&gt;0&lt;/integer&gt;        &lt;/array&gt;      &lt;/array&gt;With these this key present, ufo2ft will copy the color layers into individualglyphs and setup ``COLR`` table.Alternatively, if the color layers are already separate UFO glyphs, the``com.github.googlei18n.ufo2ft.colorLayers`` font lib key can be used. It usesa table keyed by base glyph, and the value is an array of color layers, eachcolor layer is an array of glyph name and palette color index. For example:.. code:: xml    &lt;key&gt;com.github.googlei18n.ufo2ft.colorLayers&lt;/key&gt;    &lt;dict&gt;      &lt;key&gt;alef-ar&lt;/key&gt;      &lt;array&gt;        &lt;array&gt;          &lt;string&gt;alef-ar.color0&lt;/string&gt;          &lt;integer&gt;2&lt;/integer&gt;        &lt;/array&gt;      &lt;/array&gt;      &lt;key&gt;alefHamzaabove-ar&lt;/key&gt;      &lt;array&gt;        &lt;array&gt;          &lt;string&gt;alefHamzaabove-ar.color0&lt;/string&gt;          &lt;integer&gt;1&lt;/integer&gt;        &lt;/array&gt;        &lt;array&gt;          &lt;string&gt;alefHamzaabove-ar.color1&lt;/string&gt;          &lt;integer&gt;2&lt;/integer&gt;        &lt;/array&gt;      &lt;/array&gt;    &lt;dict&gt;</longdescription>
</pkgmetadata>