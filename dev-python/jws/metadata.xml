<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>python-jws=====A Python implementation of [JSON Web Signatures draft 02](http://self-issued.info/docs/draft-jones-json-web-signature.html)Also now works on Python 3.3+ as well as Python 2.7+.  However, it's a naive conversion to support both Python 2 and Python 3 so there may well be hidden bugs.Installing----------    $ pip install jwsAlgorithms----------The JWS spec reserves several algorithms for cryptographic signing. Out of the 9, this library currently supports 7:**HMAC** – native* HS256 – HMAC using SHA-256 hash algorithm* HS384 – HMAC using SHA-384 hash algorithm* HS512 – HMAC using SHA-512 hash algorithm**RSA** – requires pycrypto &gt;= 2.5: ``pip install pycrypto``* RS256 – RSA using SHA-256 hash algorithm**ECDSA** – requires ecdsa lib: ``pip install ecdsa``* ES256 – ECDSA using P-256 curve and SHA-256 hash algorithm* ES384 – ECDSA using P-384 curve and SHA-384 hash algorithm* ES512 – ECDSA using P-521 curve and SHA-512 hash algorithmThere is also a mechanism for extending functionality by adding your ownalgorithms without cracking open the whole codebase. See the advanced usagesection for an example.For RSA and ECDSA, all crypto libraries are lazily loaded so you won't need the dependencies unless you try to use the functionality.Usage-----Let's check out some examples.    &gt;&gt;&gt; import jws    &gt;&gt;&gt; header  = { 'alg': 'HS256' }    &gt;&gt;&gt; payload = { 'claim': 'JSON is the raddest.', 'iss': 'brianb' }    &gt;&gt;&gt; signature = jws.sign(header, payload, 'secret')    &gt;&gt;&gt; jws.verify(header, payload, signature, 'secret')    True    &gt;&gt;&gt; jws.verify(header, payload, signature, 'badbadbad')    Traceback (most recent call last):    ...    jws.exceptions.SignatureError: Could not validate signatureNow with a real key!    &gt;&gt;&gt; import ecdsa    &gt;&gt;&gt; sk256 = ecdsa.SigningKey.generate(curve=ecdsa.NIST256p)    &gt;&gt;&gt; vk = sk256.get_verifying_key()    &gt;&gt;&gt; header = { 'alg': 'ES256' }    &gt;&gt;&gt; sig = jws.sign(header, payload, sk256)    &gt;&gt;&gt; jws.verify(header, payload, sig, vk)    TrueAdvanced Usage--------------Make this file    # file: sillycrypto.py    import jws    from jws.algos import AlgorithmBase, SignatureError    class FXUY(AlgorithmBase):        def __init__(self, x, y):            self.x = int(x)            self.y = int(y)        def sign(self, msg, key):            return 'verysecure' * self.x + key * self.y        def verify(self, msg, sig, key):            if sig != self.sign(msg, key):                raise SignatureError('nope')            return True    jws.algos.CUSTOM += [       # a regular expression with two named matching groups. (x and y)        # named groups will be sent to the class constructor        (r'^F(?P&lt;x&gt;\d)U(?P&lt;y&gt;\d{2})$',  FXUY),    ]And in an interpreter:    &gt;&gt;&gt; import jws    &gt;&gt;&gt; header = { 'alg': 'F7U12' }    &gt;&gt;&gt; payload = { 'claim': 'wutt' }    &gt;&gt;&gt; sig = jws.sign(header, payload, '&lt;trollface&gt;')    Traceback (most recent call last):      ....    jws.exceptions.AlgorithmNotImplemented: &quot;F7U12&quot; not implemented.    &gt;&gt;&gt;    &gt;&gt;&gt; import sillycrypto    &gt;&gt;&gt; sig = jws.sign(header, payload, '&lt;trollface&gt;')    &gt;&gt;&gt; jws.verify(header, payload, sig, '&lt;trollface&gt;')    True    &gt;&gt;&gt; jws.verify(header, payload, sig, 'y u no verify?')    Traceback (most recent call last):    ....    jws.exceptions.SignatureError: nopeOther Stuff---------Check outhttps://github.com/brianloveswords/python-jws/blob/master/examples/minijwt.pyfor a 14-line implemention of JWT.Seehttps://github.com/brianloveswords/python-jws/blob/master/examples/ragecrypto.pyfor a rage-comic inspired cryptography extension.TODO-------* Write about all the rad stuff that can be done around headers (as extensible as crypto algos)* Pull in JWK supportTests-----use nosetestsLicense-------MIT</longdescription>
</pkgmetadata>