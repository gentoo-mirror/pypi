<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Installation## Used packages and environment* Main package: Zipline-reloaded 2.2.0* Python 3.8 or above* Microsoft Windows OS* Other Python dependency packages: Pandas, Numpy, Logbook, Exchange-calendars## How to install Zipline Reloaded modified by TEJ* We're going to illustrate under anaconda environment, so we suggest using [Anaconda](https://www.anaconda.com/data-science-platform) as development environment.* Download dependency packages. [(zipline-tej.yml)](https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/tejtw/zipline-tej/blob/main/zipline-tej.yml)* Start an Anaconda (base) prompt, create an virtual environment and install the appropriate versions of packages:(We **strongly** recommand using virtual environment to keep every project independent.) [(reason)](https://csguide.cs.princeton.edu/software/virtualenv#definition)```# change directionary to the folder exists zipline-tej.yml$ cd &lt;C:\Users\username\Downloads&gt;# create virtual env$ conda env create -f zipline-tej.yml# activate virtual env$ conda activate zipline-tej```Also, if you are familiar with Python enough, you can create a virtual environment without zipline-tej.yml and here's the sample :```# create virtual env$ conda create -n &lt;env_name&gt; python=3.8# activate virtual env$ conda activate &lt;env_name&gt;# download dependency packages$ conda install -c conda-forge -y ta-lib$ conda install -y notebook=6.4.11$ conda install -y xlrd=2.0.1$ conda install -y openpyxl=3.0.9$ pip install zipline-tej```* Notice that we need to download TA-lib at first, so that we can download zipline-tej successfully.## Exchange Calendar IssuesWe're now developing specfic on Taiwan securities backtesting strategy, so we're using the unique trading calendar created by ourselves.  [download](https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/tejtw/zipline-tej/tree/main/exchange_calendars)After downloaded the calendar file above, overwrite **calendar_utils.py** in exchange_calendars folder and add **exchange_calendar_tejxtai.py**.\* Navigate to the exchange_calendars folder within site packages. This is typically located at C:\Users\username\Anaconda3\envs\zipline-tej\Lib\site-packages\exchange_calendarsBut some users may located at C:\Users\username\\AppData\Roaming\Python\Python38\Scriptswhich we aren't pleased to see. So if this happened, we suggest to put **exchange-calendars** folder to former path we mentioned above.# Quick start## CLI InterfaceThe following code implements a simple buy_and_hold trading algorithm.```pythonfrom zipline.api import order, record, symboldef initialize(context):    context.asset = symbol(&quot;2330&quot;)    def handle_data(context, data):    order(context.asset, 10)    record(TSMC=data.current(context.asset, &quot;price&quot;))    def analyze(context=None, results=None):    import matplotlib.pyplot as plt    # Plot the portfolio and asset data.    ax1 = plt.subplot(211)    results.portfolio_value.plot(ax=ax1)    ax1.set_ylabel(&quot;Portfolio value (TWD)&quot;)    ax2 = plt.subplot(212, sharex=ax1)    results.TSMC.plot(ax=ax2)    ax2.set_ylabel(&quot;TSMC price (TWD)&quot;)    # Show the plot.    plt.gcf().set_size_inches(18, 8)    plt.show()```You can then run this algorithm using the Zipline CLI. But first, you need to download some market data with historical prices and trading volumes:* Before ingesting data, you have to set some environment variables as follow: ```# setting TEJAPI_KEY to get permissions loading data$ set TEJAPI_KEY=&lt;your_key&gt;# setting download ticker$ set ticker=2330 2317# setting backtest period$ set mdate=20200101 20220101```* Ingest and run backtesting algorithm```$ zipline ingest -b tquant$ zipline run -f buy_and_hold.py  --start 20200101 --end 20220101 -o bah.pickle --no-benchmark --trading-calendar TEJ_XTAI```Then, the resulting performance DataFrame is saved as bah.pickle, which you can load and analyze from Python.## Jupyter Notebook ### Set environment variables TEJAPI_KEY, ticker and mdate\* ticker would be your target ticker symbol, and it should be a string. If there're more than one ticker needed, use &quot; &quot;, &quot;,&quot; or &quot;;&quot; to split them apart. \* mdate refers the begin date and end date, use &quot; &quot;, &quot;,&quot; or &quot;;&quot; to split them apart.```pythonIn[1]:import os    os.environ['TEJAPI_KEY'] = &lt;your_key&gt;    os.environ['ticker'] ='2330 2317'     os.environ['mdate'] ='20200101 20220101'  ```### Call ingest to download data to ~\\\.zipline```pythonIn[2]:    !zipline ingest -b tquant[Out]: Merging daily equity files:[YYYY-MM-DD HH:mm:ss.ssssss] INFO: zipline.data.bundles.core: Ingesting tquant.```### Design the backtesting strategy```pythonIn[3]:from zipline.api import order, record, symboldef initialize(context):    context.asset = symbol(&quot;2330&quot;)    def handle_data(context, data):    order(context.asset, 10)    record(TSMC=data.current(context.asset, &quot;price&quot;))    def analyze(context=None, results=None):    import matplotlib.pyplot as plt    # Plot the portfolio and asset data.    ax1 = plt.subplot(211)    results.portfolio_value.plot(ax=ax1)    ax1.set_ylabel(&quot;Portfolio value (TWD)&quot;)    ax2 = plt.subplot(212, sharex=ax1)    results.TSMC.plot(ax=ax2)    ax2.set_ylabel(&quot;TSMC price (TWD)&quot;)    # Show the plot.    plt.gcf().set_size_inches(18, 8)    plt.show()```### Run backtesting algorithm and plot```pythonIn[4]:from zipline import run_algorithmimport pandas as pdfrom zipline.utils.calendar_utils import get_calendartrading_calendar = get_calendar('TEJ_XTAI')start = pd.Timestamp('20200103', tz ='utc' )end = pd.Timestamp('20211230', tz='utc')result = run_algorithm(start=start,                  end=end,                  initialize=initialize,                  capital_base=1000000,                  handle_data=handle_data,                  bundle='tquant',                  trading_calendar=trading_calendar,                  analyze=analyze,                  data_frequency='daily'                  )[Out]:```![output](https://github.com/tejtw/zipline-tej/blob/main/output_img/output.png?raw=true)### Show trading process```pythonIn[5]: result[Out]:```&lt;div&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;period_open&lt;/th&gt;      &lt;th&gt;period_close&lt;/th&gt;      &lt;th&gt;starting_value&lt;/th&gt;      &lt;th&gt;ending_value&lt;/th&gt;      &lt;th&gt;starting_cash&lt;/th&gt;      &lt;th&gt;ending_cash&lt;/th&gt;      &lt;th&gt;portfolio_value&lt;/th&gt;      &lt;th&gt;longs_count&lt;/th&gt;      &lt;th&gt;shorts_count&lt;/th&gt;      &lt;th&gt;long_value&lt;/th&gt;      &lt;th&gt;...&lt;/th&gt;      &lt;th&gt;treasury_period_return&lt;/th&gt;      &lt;th&gt;trading_days&lt;/th&gt;      &lt;th&gt;period_label&lt;/th&gt;      &lt;th&gt;algo_volatility&lt;/th&gt;      &lt;th&gt;benchmark_period_return&lt;/th&gt;      &lt;th&gt;benchmark_volatility&lt;/th&gt;      &lt;th&gt;algorithm_period_return&lt;/th&gt;      &lt;th&gt;alpha&lt;/th&gt;      &lt;th&gt;beta&lt;/th&gt;      &lt;th&gt;sharpe&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2020-01-03 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2020-01-03 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2020-01-03 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;1.000000e+06&lt;/td&gt;      &lt;td&gt;1.000000e+06&lt;/td&gt;      &lt;td&gt;1.000000e+06&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2020-01&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;0.000000&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2020-01-06 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2020-01-06 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2020-01-06 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;3320.0&lt;/td&gt;      &lt;td&gt;1.000000e+06&lt;/td&gt;      &lt;td&gt;9.966783e+05&lt;/td&gt;      &lt;td&gt;9.999983e+05&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;3320.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2020-01&lt;/td&gt;      &lt;td&gt;0.000019&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;-0.000002&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;-11.224972&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2020-01-07 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2020-01-07 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2020-01-07 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;3320.0&lt;/td&gt;      &lt;td&gt;6590.0&lt;/td&gt;      &lt;td&gt;9.966783e+05&lt;/td&gt;      &lt;td&gt;9.933817e+05&lt;/td&gt;      &lt;td&gt;9.999717e+05&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;6590.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;2020-01&lt;/td&gt;      &lt;td&gt;0.000237&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;-0.000028&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;-10.038514&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2020-01-08 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2020-01-08 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2020-01-08 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;6590.0&lt;/td&gt;      &lt;td&gt;9885.0&lt;/td&gt;      &lt;td&gt;9.933817e+05&lt;/td&gt;      &lt;td&gt;9.900850e+05&lt;/td&gt;      &lt;td&gt;9.999700e+05&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;9885.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;2020-01&lt;/td&gt;      &lt;td&gt;0.000203&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;-0.000030&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;-9.298128&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2020-01-09 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2020-01-09 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2020-01-09 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;9885.0&lt;/td&gt;      &lt;td&gt;13500.0&lt;/td&gt;      &lt;td&gt;9.900850e+05&lt;/td&gt;      &lt;td&gt;9.867083e+05&lt;/td&gt;      &lt;td&gt;1.000208e+06&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;13500.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;5&lt;/td&gt;      &lt;td&gt;2020-01&lt;/td&gt;      &lt;td&gt;0.001754&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.000208&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;5.986418&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;...&lt;/th&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2021-12-24 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2021-12-24 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2021-12-24 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;2920920.0&lt;/td&gt;      &lt;td&gt;2917320.0&lt;/td&gt;      &lt;td&gt;-1.308854e+06&lt;/td&gt;      &lt;td&gt;-1.314897e+06&lt;/td&gt;      &lt;td&gt;1.602423e+06&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;2917320.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;484&lt;/td&gt;      &lt;td&gt;2021-12&lt;/td&gt;      &lt;td&gt;0.232791&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.602423&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;1.170743&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2021-12-27 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2021-12-27 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2021-12-27 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;2917320.0&lt;/td&gt;      &lt;td&gt;2933040.0&lt;/td&gt;      &lt;td&gt;-1.314897e+06&lt;/td&gt;      &lt;td&gt;-1.320960e+06&lt;/td&gt;      &lt;td&gt;1.612080e+06&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;2933040.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;485&lt;/td&gt;      &lt;td&gt;2021-12&lt;/td&gt;      &lt;td&gt;0.232577&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.612080&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;1.182864&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2021-12-28 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2021-12-28 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2021-12-28 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;2933040.0&lt;/td&gt;      &lt;td&gt;2982750.0&lt;/td&gt;      &lt;td&gt;-1.320960e+06&lt;/td&gt;      &lt;td&gt;-1.327113e+06&lt;/td&gt;      &lt;td&gt;1.655637e+06&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;2982750.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;486&lt;/td&gt;      &lt;td&gt;2021-12&lt;/td&gt;      &lt;td&gt;0.233086&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.655637&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;1.237958&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2021-12-29 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2021-12-29 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2021-12-29 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;2982750.0&lt;/td&gt;      &lt;td&gt;2993760.0&lt;/td&gt;      &lt;td&gt;-1.327113e+06&lt;/td&gt;      &lt;td&gt;-1.333276e+06&lt;/td&gt;      &lt;td&gt;1.660484e+06&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;2993760.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;487&lt;/td&gt;      &lt;td&gt;2021-12&lt;/td&gt;      &lt;td&gt;0.232850&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.660484&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;1.243176&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2021-12-30 05:30:00+00:00&lt;/th&gt;      &lt;td&gt;2021-12-30 01:01:00+00:00&lt;/td&gt;      &lt;td&gt;2021-12-30 05:30:00+00:00&lt;/td&gt;      &lt;td&gt;2993760.0&lt;/td&gt;      &lt;td&gt;2995050.0&lt;/td&gt;      &lt;td&gt;-1.333276e+06&lt;/td&gt;      &lt;td&gt;-1.339430e+06&lt;/td&gt;      &lt;td&gt;1.655620e+06&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;2995050.0&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;488&lt;/td&gt;      &lt;td&gt;2021-12&lt;/td&gt;      &lt;td&gt;0.232629&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.0&lt;/td&gt;      &lt;td&gt;0.655620&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;1.235305&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;488 rows × 38 columns&lt;/p&gt;&lt;/div&gt;## Common errors * NotSessionError : The date of algorithm start date or end date is not available in trading algorithm.    * Solution : Adjust start date or end date to align trading calendar.* DateOutOfBounds : The trading calendar would update every day, but it would be fixed on the **FIRST TIME** executed date in Jupyter Notebook.    * Solution : Restart Jupyter Notebook kernel.# More Zipline Tutorials* For more [tutorials]()# Suggestions* To get TEJAPI_KEY [(link)](https://api.tej.com.tw/trial.html)* [TEJ Official Website](https://www.tej.com.tw/)</longdescription>
</pkgmetadata>