<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MET Norway Location ForecastA Python interface for the MET Norway[Locationforecast/2.0](https://api.met.no/weatherapi/locationforecast/2.0/documentation)service. This is a free weather data service provided by the [NorwegianMeteorological Institute](https://www.met.no/en).## Contents- [Features](#Features)- [Installation](#Installation)- [Usage](#Usage)  - [Basics](#Basics)  - [Accessing Data](#Accessing-Data)  - [Custom URLs](#Custom-URLs)  - [Configuration](#Configuration)  - [More Examples](#More-Examples)- [Notes on Licensing](#Notes-on-Licensing)- [Dependencies](#Dependencies)- [Useful Links](#Useful-Links)## Features- Get weather data for anywhere in the world- Automatically take care of caching data- Helpful classes for managing forecast data- Convert between units of measurement## InstallationInstalling with pip:```shellpip install metno-locationforecast```It's recommended to install ```metno-locationforecast``` into a virtualenvironment for your application.## Usage### BasicsBefore using this package you should be aware of the [terms ofservice](https://api.met.no/doc/TermsOfService) for using the MET Weather API.The ```metno-locationforecast``` package will not make requests unless currentdata has expired and will send requests with the appropriate```If-Modified-Since``` header where possible. Identification can be provided bypassing a ```User-Agent``` string to the forecast class, see more on this below.After installing ```metno-locationforecast``` the following commands can be runin a python console. Start by importing the ```Place``` and ```Forecast```classes, these are the main classes you will need to interact with.```pycon&gt;&gt;&gt; from metno_locationforecast import Place, Forecast```**Note:** Use an underscore in the name when importing.Create a ```Place``` instance. The first argument is your name for the place,next are the geographic coordinates. Geographic coordinates are given bylatitude, longitude (in degrees) and altitude (in metres).```pycon&gt;&gt;&gt; new_york = Place(&quot;New York&quot;, 40.7, -74.0, 10)```The altitude parameter is optional but recommended. Note that latitude andlongitude are rounded to four decimal places and altitude is rounded to thenearest integer, this is required by the MET API.[GeoNames](http://www.geonames.org/) is a helpful website for finding thegeographic coordinates of a place.Next create a ```Forecast``` instance for the place. Here you need to supply a```User-Agent``` string, typically this will include the name and version ofyour application as well as contact information (email address or website) moredetails on what is expected [here](https://api.met.no/doc/TermsOfService). DoNOT use the string supplied here as this does not apply to your site.```pycon&gt;&gt;&gt; ny_forecast = Forecast(new_york, &quot;metno-locationforecast/1.0 https://github.com/Rory-Sullivan/metno-locationforecast&quot;)```There are also three optional arguments that you can supply. First is the```forecast_type``` parameter, options are ```&quot;compact&quot;``` (a limited set ofvariables suitable for most purposes) or ```&quot;complete&quot;``` (an extensive set ofweather data). For more details on the differences check out the this[page](https://api.met.no/doc/locationforecast/datamodel). ```&quot;compact&quot;``` isthe default.The second optional parameter is ```save_location```, this is the folder wheredata will be stored. The default is ```&quot;./data/&quot;```. Finally there is the```base_url``` parameter, more on this in the [Custom URLs](#Custom-URLs)section.These parameters can be configured for your entire app by using a configurationfile, more on this in the [configuration](#Configuration) section.Next run the update method. This will make a request to the MET API for data andwill save the data to the save location. If data already exists for theforecast, this will only request new data if the data has expired and will makethe request using the appropriate ```If-Modified-Since``` header. It returns astring describing which process occurred, this will be one of```'Data-Not-Expired'```, ```'Data-Not-Modified'``` or ```'Data-Modified'```.Only in the case of ```'Data-Modified'``` has any change to the data occurred.```pycon&gt;&gt;&gt; ny_forecast.update()'Data-Modified'&gt;&gt;&gt; ny_forecast.update()'Data-Not-Expired'```Finally we can print the forecast.```pycon&gt;&gt;&gt; print(ny_forecast)Forecast for New York:        Forecast between 2020-07-21 14:00:00 and 2020-07-21 15:00:00:                air_pressure_at_sea_level: 1016.7hPa                air_temperature: 28.7celsius                cloud_area_fraction: 1.6%                ...```### Accessing DataPrinting forecasts to the terminal is great but most likely you want to use theforecast data in your own application. When the update method is run it parsesthe returned data which can then be accessed through attributes of the forecastinstance.The most notable of these is the ```data``` attribute.```pycon&gt;&gt;&gt; type(ny_forecast.data)&lt;class 'metno_locationforecast.data_containers.Data'&gt;```This is a special ```Data``` class which stores the weather data information.You can list its attributes like so;```pycon&gt;&gt;&gt; vars(ny_forecast.data).keys()dict_keys(['last_modified', 'expires', 'updated_at', 'units', 'intervals'])``````last_modified```, ```expires``` and ```updated_at``` are```datetime.datetime``` objects for when the data was last modified, when it isexpected to expire and when the forecast was updated, respectively.```units``` contains a dictionary mapping variable names to the units in whichthey are provided by the API.```intervals``` is where we find the actual weather data. It is a list ofintervals. Note that the MET API usually supplies multiple intervals for eachtime point in the data set, the forecast parser takes the *shortest* suppliedinterval for each time point.```pycon&gt;&gt;&gt; type(ny_forecast.data.intervals)&lt;class 'list'&gt;&gt;&gt;&gt; type(ny_forecast.data.intervals[0])&lt;class 'metno_locationforecast.data_containers.Interval'&gt;&gt;&gt;&gt; print(ny_forecast.data.intervals[0])Forecast between 2020-07-21 14:00:00 and 2020-07-21 15:00:00:        air_pressure_at_sea_level: 1016.7hPa        air_temperature: 28.7celsius        cloud_area_fraction: 1.6%        relative_humidity: 56.0%        wind_from_direction: 349.7degrees        wind_speed: 1.4m/s        precipitation_amount: 0.0mm```Each interval is an ```Interval``` instance. This interval class has a```variables``` attribute which is a dictionary mapping variable names to```Variable``` instances.```pycon&gt;&gt;&gt; first_interval = ny_forecast.data.intervals[0]&gt;&gt;&gt; first_interval.start_timedatetime.datetime(2020, 7, 21, 14, 0)&gt;&gt;&gt; first_interval.end_timedatetime.datetime(2020, 7, 21, 15, 0)&gt;&gt;&gt; first_interval.durationdatetime.timedelta(0, 3600)&gt;&gt;&gt; first_interval.variables.keys()dict_keys(['air_pressure_at_sea_level', 'air_temperature', 'cloud_area_fraction', 'relative_humidity', 'wind_from_direction', 'wind_speed', 'precipitation_amount'])&gt;&gt;&gt;&gt;&gt;&gt; rain = first_interval.variables[&quot;precipitation_amount&quot;]&gt;&gt;&gt; print(rain)precipitation_amount: 0.0mm&gt;&gt;&gt; rain.value0.0&gt;&gt;&gt; rain.units'mm'```For a full overview of the ```Data```, ```Interval``` and ```Variable``` classessee the[code](https://github.com/Rory-Sullivan/metno-locationforecast/blob/master/metno_locationforecast/data_containers.py).Other attributes of the ```Forecast``` class that could be useful are;- ```response```: This is the full ```requests.Response``` object received from the  MET API (metno-locationforecast uses the  [requests](https://requests.readthedocs.io/en/master/) library).- ```json_string```: A string containing all data in json format. This is what is  saved.- ```json```: An object representation of the json_string.The ```Forecast``` class also has additional methods that may be of use.- ```save()```: Save data to save location.- ```load()```: Load data from saved file.The code for the ```Forecast``` class can be found[here](https://github.com/Rory-Sullivan/metno-locationforecast/blob/master/metno_locationforecast/forecast.py).### Custom URLsBy default the Forecast class will fetch data from'https://api.met.no/weatherapi/locationforecast/2.0/' if you wish to use adifferent domain you can pass a ```base_url``` parameter to the constructorfunction. Note that the type for the forecast will be appended to this url whenrequests are made, if this is not suitable for your application you should passan empty string for the type.```pycon&gt;&gt;&gt; ny_forecast = Forecast(new_york, &quot;metno-locationforecast/1.0&quot;, forecast_type=&quot;&quot;,  base_url=&quot;somewhere.com&quot;)&gt;&gt;&gt; ny_forecast.url'somewhere.com'```### ConfigurationIf you wish to provide application wide configuration for your module this canbe done in either a ```metno-locationforecast.ini``` file or in a ```setup.cfg```file in the root directory of your application. Below is an example of theconfigurations that you can put in there showing their default values.```ini[metno-locationforecast]user_agent = Noneforecast_type = compactsave_location = ./database_url = https://api.met.no/weatherapi/locationforecast/2.0/```Note that regardless of the file, configurations need to be under a```[metno-locationforecast]``` section and settings in a```metno-locationforecast.ini``` file will take precedence.### More ExamplesFor further usage examples see the[examples](https://github.com/Rory-Sullivan/metno-locationforecast/tree/master/examples)folder.To see what can be done with this library you could also checkout [DryRock](https://github.com/Rory-Sullivan/Dry-Rock). It is another projectmaintained by myself that uses the ```metno-locationforecast``` library. It wasin fact the original inspiration for me to create this library.## Notes on LicensingWhile the code in this package is covered by an MIT license and is free to usethe weather data collected from the MET Weather API is covered by a separatelicense and has it's own [terms of use](https://api.met.no/doc/TermsOfService).## Dependencies- [Requests](https://requests.readthedocs.io/en/master/)## Useful Links- PyPI page - &lt;https://pypi.org/project/metno-locationforecast/&gt;- Github page - &lt;https://github.com/Rory-Sullivan/metno-locationforecast&gt;- The Norwegian Meteorological Institute - &lt;https://www.met.no/en&gt;- MET Weather API - &lt;https://api.met.no/&gt;- MET Weather API Terms of Service - &lt;https://api.met.no/doc/TermsOfService&gt;- Locationforecast/2.0 documentation - &lt;https://api.met.no/weatherapi/locationforecast/2.0&gt;- Full list of variables and their names - &lt;https://api.met.no/doc/locationforecast/datamodel&gt;- Yr Developer Portal - &lt;https://developer.yr.no/&gt;- Yr Terms of Service (same as the MET API terms of service but perhaps more readable) - &lt;https://developer.yr.no/doc/TermsOfService/&gt;- GeoNames - &lt;http://www.geonames.org/&gt;- Requests library - &lt;https://requests.readthedocs.io/en/master/&gt;</longdescription>
</pkgmetadata>