<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>argusclient -- A minimal client library for Argus webservice------------------------------------------------------------This is a minimal and thin layer of Python client code on top of theArgus webservices REST API. Most of the library API is 1:1 with that ofREST API so it serves to be more of a convenience than an abstraction.This means you still need to be familiar with the underlying REST API tobe effective. For more information on the REST API and data model, referto the `Argus - UserGuide &lt;https://github.com/SalesforceEng/Argus/wiki&gt;`__.Special thanks to `Demian Brecht &lt;https://github.com/demianbrecht&gt;`__for giving a lot of feedback early and helping to shape the API and theproject.You can also browse the Python API documentation online at: `&lt;https://salesforce.github.io/python-argusclient/&gt;`__A quick primer to using argusclient~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Below you will find functional and self-explanatory code that shows howto do the following:-  Import the relevant pieces from argusclient-  Create the main entry point and establish login session-  Query for existing namespaces-  Create a new namespace-  Collect metrics and annotations-  Post metrics and annotations-  Query for existing dashboards-  Update or Create dashboard-  Query for existing alerts-  Delete alert-  Create an alert along with a trigger and a notificationIn addition, also look at the bundled example named``splunk_to_argus.py`` that shows how to extract metrics from Splunk andpush them to Argus.Some package imports and initializations that we use later^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^::    import sys, os, time, calendar, getpass, logging, random    import lxml.etree    from argusclient import *    from argusclient.dashboardtags import DASHBOARD, CHART, TITLE, METRIC, FLAGS    logging.basicConfig()    logging.root.setLevel(logging.INFO)    logging.getLogger(&quot;requests&quot;).setLevel(logging.WARN)    endpoint = &quot;http://localhost:8080/argusws&quot;    user = &quot;hdara&quot;    password = None    tags = { &quot;host&quot;: &quot;hdara-wsl&quot; }    fields = { &quot;user&quot;: user }    curtm = long(calendar.timegm(time.gmtime()))*1000    ns_name = &quot;hdara-ns&quot;    ns_access_addl_users = (&quot;hdara&quot;,)    dashboard_name = &quot;hdara.test.dashboard&quot;    alert_name = &quot;hdara.test.alert&quot;    scope_name = &quot;hdara&quot;    metric_name = &quot;test&quot;    ans = []Login to the service and establish session^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*For mtls login, see examples/mtls_login.py*::    argus = ArgusServiceClient(user,                               password or getpass.getpass(&quot;SSO password for %s: &quot; % user),                               endpoint=endpoint)    logging.info(&quot;Logging in&quot;)    argus.login()Check if a namespace exists and create one if missing^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^::    logging.info(&quot;Looking up existing namespace with name: %s&quot;, ns_name)    nss = dict((ns.qualifier, ns) for ns in argus.namespaces.values())    ns = nss.get(ns_name)    if not ns:        logging.info(&quot;Creating new namespace with name: %s&quot;, ns_name)        ns = argus.namespaces.add(Namespace(ns_name))Generate some random metrics against hdara-ns:hdara:test and mark the start and end with annotations.^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^::    logging.info(&quot;Generating some metric and annotation data for the dashboard&quot;)    m = Metric(scope_name, metric_name, tags=tags, namespace=ns_name)    for t in xrange(10, 0, -1):        # Warden requires 1 minute gap between successive data points.        ts = curtm-t*60*1000        m.datapoints[ts] = random.randint(50, 100)        if not ans or t == 1:            ans.append(Annotation(&quot;script&quot;, &quot;hdara&quot;, &quot;test&quot;, ts, ts, &quot;generated&quot;, tags=tags, fields=dict(event=ans and &quot;start&quot; or &quot;end&quot;, **fields)))Send metrics and annotations to Argus^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^::    logging.info(&quot;Adding metrics data to Argus&quot;)    am_resp = argus.metrics.add([m]);    if am_resp.error_count():        logging.error(&quot;Errors reported in metric data: errorCount: %s errorMessages: %s&quot;, am_resp.error_count(), am_resp.error_messages())    logging.info(&quot;Adding annotation data to Argus&quot;)    an_resp = argus.annotations.add(ans)    if an_resp.error_count():        logging.error(&quot;Errors reported in annotation data: errorCount: %s errorMessages: %s&quot;, an_resp.error_count(), an_resp.error_messages())Generate dashboard content^^^^^^^^^^^^^^^^^^^^^^^^^^::    mquery = str(MetricQuery(scope_name, metric_name, &quot;sum&quot;, tags=tags, stTimeSpec=&quot;-1d&quot;, enTimeSpec=&quot;-0d&quot;, namespace=ns_name))    aquery = str(AnnotationQuery(scope_name, metric_name, &quot;generated&quot;, tags=tags, stTimeSpec=&quot;-1d&quot;, enTimeSpec=&quot;-0d&quot;))    content = lxml.etree.tostring(DASHBOARD(        CHART(            TITLE(&quot;hdara.test&quot;),            METRIC(mquery, name=&quot;hdara.test.metric&quot;),            FLAGS(aquery, name=&quot;hdara.test.annotation&quot;),            name=&quot;Chart&quot;            )    ), method=&quot;html&quot;)    dashbobj.content = contentUpdate or Create dashboard^^^^^^^^^^^^^^^^^^^^^^^^^^::    logging.info(&quot;Looking up existing dashboard with name: %s&quot;, dashboard_name)    dashbobj = argus.dashboards.get_user_dashboard(user, dashboard_name, shared=False)    if not dashbobj:        logging.info(&quot;Creating new dashboard with name: %s&quot;, dashboard_name)        dashbobj = Dashboard(dashboard_name, content, shared=True, description=&quot;A new dashboard&quot;)        dashbobj = argus.dashboards.add(dashbobj)    else:        logging.info(&quot;Updating dashboard with name: %s id %s&quot;, dashboard_name, dashbobj.argus_id)        dashbobj.content = content        argus.dashboards.update(dashbobj.argus_id, dashbobj)    logging.info(&quot;Dashboard url: %s&quot;, os.path.join(os.path.dirname(endpoint), &quot;argus/#/dashboards&quot;, str(dashbobj.argus_id)).replace(&quot;-ws&quot;, &quot;-ui&quot;))Look for an existing alert and delete it so that we can recreate it^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^::    logging.info(&quot;Looking up existing alert with name: %s owned by user: %s&quot;, alert_name, user)    alertobj = argus.alerts.get_user_alert(user, alert_name, shared=False)    if alertobj:        logging.info(&quot;Deleting existing alert with name: %s id: %s&quot;, alert_name, alertobj.argus_id)        argus.alerts.delete(alertobj.argus_id)Finally, create alert with a trigger and a notification^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^::    logging.info(&quot;Creating new alert with alert name: %s&quot;, alert_name)    alertobj = argus.alerts.add(Alert(alert_name, mquery, &quot;* */1 * * *&quot;,                                      trigger=Trigger(&quot;hdara.test.trigger&quot;, Trigger.GREATER_THAN, 100000, 600000),                                      notification=Notification(&quot;hdara.test.notification&quot;, Notification.EMAIL, subscriptions=[&quot;hdara@salesforce.com&quot;]),                                      shared=True))</longdescription>
</pkgmetadata>