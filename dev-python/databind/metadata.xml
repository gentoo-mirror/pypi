<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;databind&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://img.shields.io/pypi/pyversions/databind?style=for-the-badge&quot; alt=&quot;Python versions&quot;&gt;  &lt;a href=&quot;https://pypi.org/project/databind/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/databind?style=for-the-badge&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Databind is a Python serialization library on top of dataclasses, inspired by similar libraries from other languageslike &lt;a href=&quot;https://github.com/FasterXML/jackson-databind&quot;&gt;jackson-databind&lt;/a&gt; and &lt;a href=&quot;https://serde.rs/&quot;&gt;serde-rs&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://niklasrosenstein.github.io/python-databind/core/basic-usage/&quot;&gt;CORE Guide&lt;/a&gt; |  &lt;a href=&quot;https://niklasrosenstein.github.io/python-databind/json/examples/&quot;&gt;JSON Examples&lt;/a&gt;&lt;/p&gt;## Overview ðŸ“–The `databind.core` package provides the core framework for databind. It is then used by `databind.json` to providecomprehensive serializatio support between Python and JSON-like data structure. The serialization can easily beextended to YAML or TOML by combining it with respective libraries (e.g. `pyaaml` and `tomli`).```python@dataclassclass Server:    host: str    port: int@dataclassclass Config:    server: Serverfrom databind.json import dump, loadassert load({&quot;server&quot;: {&quot;host&quot;: &quot;localhost&quot;, &quot;port&quot;: 8080}}, Config) == Config(server=Server(host='localhost', port=8080))assert dump(Config(server=Server(host='localhost', port=8080)), Config) == {&quot;server&quot;: {&quot;host&quot;: &quot;localhost&quot;, &quot;port&quot;: 8080}}```If you install the `databind` proxy package, you get matching versions of `databind.core` and `databind.json`.## Features âœ¨  [typeapi]: https://github.com/NiklasRosenstein/python-typeapi* Support for a plethora of builtin types, including `Enum`, `Decimal`, `UUID`, `Path`, `datetime`, `date`, `time`, `timedelta`* Support for multiple union serialization modes (nested, flat, keyed, `typing.Literal`)* Support for generic types, e.g. `load([{&quot;name&quot;: &quot;Jane Doe&quot;}], list[Person])`* Support for new-style type hints in older Python versions when using forward refererences (strings or `__future__.annotations`) thanks to [typeapi][]    * [PEP 604 - Allow writing union types as X | Y](https://www.python.org/dev/peps/pep-0604/)    * [PEP585 - Type Hinting Generics in Standard Collections](https://www.python.org/dev/peps/pep-0585/))* Support for customized serialization and deserialization of types* Support for flattening fields of a nested dataclass or collecting remaining fields in a `dict`* Full runtime type checking during serialization* Use &quot;settings&quot; to customize serialization behaviour    * As global settings per `load()`/`dump()` call: `load(..., settings=[ExtraKeys(True)])`    * As class-level settings using a decorator: `@Union(style=Union.FLAT)` or `@ExtraKeys(True)`    * As type-hint level settings using `typing.Annotated` (or `typing_extensions.Annotated`): `full_name: Annotated[str, Alias(&quot;fullName&quot;)]` or `FullNameField = Annotated[str, Alias(&quot;fullName&quot;)]`---&lt;p align=&quot;center&quot;&gt;Copyright &amp;copy; 2022 &amp;ndash; Niklas Rosenstein&lt;/p&gt;</longdescription>
</pkgmetadata>