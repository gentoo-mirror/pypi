<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>darkskylib==========This  library for the `Dark SkyAPI &lt;https://darksky.net/dev/docs&gt;`__ provides access to detailedweather information from around the globe.Quick start-----------Before you start using this library, you need to get your API key`here &lt;https://darksky.net/dev/register&gt;`__.API Calls~~~~~~~~~Function ``forecast`` handles all request parameters and returns a``Forecast`` object... code:: python    &gt;&gt;&gt; from darksky import forecast    &gt;&gt;&gt; boston = forecast(key, 42.3601, -71.0589)    &gt;&gt;&gt;The first 3 positional arguments are identical to the 3 requiredparameters for API call. The optional query parameters need to beprovided as keyword arguments.Using ``time`` argument will get you a **time machine call**.Using ``timeout`` argument will set default `request timeout &lt;http://docs.python-requests.org/en/master/api/#requests.request&gt;`__ ... code:: python    &gt;&gt;&gt; BOSTON = key, 42.3601, -71.0589    &gt;&gt;&gt; from datetime import datetime as dt    &gt;&gt;&gt; t = dt(2013, 5, 6, 12).isoformat()    &gt;&gt;&gt; boston = forecast(*BOSTON, time=t)    &gt;&gt;&gt; boston.time    1367866800Data Points and Data Blocks~~~~~~~~~~~~~~~~~~~~~~~~~~~The values as well as ``DataPoint`` and ``DataBlock`` objects areaccessed using instance attributes or dictionary keys. You can accesscurrent values directly, without going through ``currently`` data point... code:: python    &gt;&gt;&gt; boston['currently']['temperature']    60.72    &gt;&gt;&gt; boston.temperature    60.72**Data blocks** are indexable and iterable by their ``data`` values... code:: python    &gt;&gt;&gt; len(boston.hourly)    24    &gt;&gt;&gt;    &gt;&gt;&gt; boston.hourly[1].temperature    59.49    &gt;&gt;&gt;    &gt;&gt;&gt; # list temperatures for next 10 hours    ... [hour.temperature for hour in boston.hourly[:10]]    [60.83, 59.49, 58.93, 57.95, 56.01, 53.95, 51.21, 49.21, 47.95, 46.31]Nonexistent attributes will raise ``AttributeError`` and dictionary keys``KeyError`` the way you'd expect.Raw data~~~~~~~~To get the raw data dictionary, you can either access it throughinstance attributes or navigate to it through dictionary keys, the sameway you would navigate the actual dictionary... code:: python    &gt;&gt;&gt; boston.hourly[2]    {'ozone': 290.06, 'temperature': 58.93, 'pressure': 1017.8, 'windBearing': 274, 'dewPoint': 52.58, 'cloudCover': 0.29, 'apparentTemperature': 58.93, 'windSpeed': 7.96, 'summary': 'Partly Cloudy', 'icon': 'partly-cloudy-night', 'humidity': 0.79, 'precipProbability': 0, 'precipIntensity': 0, 'visibility': 8.67, 'time': 1476410400}    &gt;&gt;&gt;    &gt;&gt;&gt; boston['hourly']['data'][2]    {'ozone': 290.06, 'temperature': 58.93, 'pressure': 1017.8, 'windBearing': 274, 'dewPoint': 52.58, 'cloudCover': 0.29, 'apparentTemperature': 58.93, 'windSpeed': 7.96, 'summary': 'Partly Cloudy', 'icon': 'partly-cloudy-night', 'humidity': 0.79, 'precipProbability': 0, 'precipIntensity': 0, 'visibility': 8.67, 'time': 1476410400}Flags and Alerts~~~~~~~~~~~~~~~~All dashes ``-`` in attribute names of **Flags** objects are replaced byunderscores ``_``. This doesn't affect the dictionary keys... code:: python    &gt;&gt;&gt; # instead of 'boston.flags.isd-stations'    ... boston.flags.isd_stations    ['383340-99999', '383390-99999', '383410-99999', '384620-99999', '384710-99999']    &gt;&gt;&gt;    &gt;&gt;&gt; boston.flags['isd-stations']    ['383340-99999', '383390-99999', '383410-99999', '384620-99999', '384710-99999']Even though **Alerts** are represented by a list, the data accessibilitythrough instance attributes is preserved for alerts in the list... code:: python    &gt;&gt;&gt; boston.alerts[0].title    'Freeze Watch for Norfolk, MA'Updating data~~~~~~~~~~~~~Use ``refresh()`` method to update data of a ``Forecast`` object. The``refresh()`` method takes optional queries (including ``time``, makingit a **Time machine** object) as keyword arguments. Calling``refresh()`` without any arguments will set all queries to defaultvalues. Use ``timeout`` argument to set the request timeout... code:: python    &gt;&gt;&gt; boston.refresh()    &gt;&gt;&gt; (boston.time, boston.temperature, len(boston.hourly))    (1476403500, 60.72, 49)    &gt;&gt;&gt;    &gt;&gt;&gt; boston.refresh(units='si', extend='hourly')    &gt;&gt;&gt; (boston.time, boston.temperature, len(boston.hourly))    (1476404205, 15.81, 169)    &gt;&gt;&gt;    &gt;&gt;&gt; boston.refresh(units='us')    &gt;&gt;&gt; (boston.time, boston.temperature, len(boston.hourly))    (1476404489, 60.57, 49)For Developers~~~~~~~~~~~~~~Response headers are stored in a dictionary under ``response_headers``attribute... code:: python    &gt;&gt;&gt; boston.response_headers['X-response-Time']    '146.035ms'Example script--------------.. code:: python    from darksky import forecast    from datetime import date, timedelta    BOSTON = 42.3601, 71.0589    weekday = date.today()    with forecast('API_KEY', *BOSTON) as boston:        print(boston.daily.summary, end='\n---\n')        for day in boston.daily:            day = dict(day = date.strftime(weekday, '%a'),                       sum = day.summary,                       tempMin = day.temperatureMin,                       tempMax = day.temperatureMax                       )            print('{day}: {sum} Temp range: {tempMin} - {tempMax}'.format(**day))            weekday += timedelta(days=1)Output:::    Light rain on Friday and Saturday, with temperatures bottoming out at 48°F on Tuesday.    ---    Sun: Partly cloudy in the morning. Temp range: 44.86 - 57.26°F    Mon: Mostly cloudy in the morning. Temp range: 44.26 - 55.28°F    Tue: Clear throughout the day. Temp range: 36.85 - 47.9°F    Wed: Partly cloudy starting in the afternoon, continuing until evening. Temp range: 33.23 - 47.93°F    Thu: Light rain overnight. Temp range: 35.75 - 49.71°F    Fri: Light rain in the morning and afternoon. Temp range: 45.47 - 57.11°F    Sat: Drizzle in the morning. Temp range: 43.3 - 62.08°F    Sun: Clear throughout the day. Temp range: 39.81 - 60.84°FLicense-------The code is available under terms of `MITLicense &lt;https://raw.githubusercontent.com/lukaskubis/darkskylib/master/LICENSE&gt;`__</longdescription>
</pkgmetadata>