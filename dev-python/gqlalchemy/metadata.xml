<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GQLAlchemy&lt;p&gt;    &lt;a href=&quot;https://github.com/memgraph/gqlalchemy/actions&quot;&gt;&lt;img src=&quot;https://github.com/memgraph/gqlalchemy/workflows/Build%20and%20Test/badge.svg&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/memgraph/gqlalchemy/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/memgraph/gqlalchemy&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/gqlalchemy&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/gqlalchemy&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://memgraph.com/docs/gqlalchemy&quot; alt=&quot;Documentation&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/documentation-GQLAlchemy-orange&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/memgraph/gqlalchemy/stargazers&quot; alt=&quot;Stargazers&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/memgraph/gqlalchemy?style=social&quot; /&gt;&lt;/a&gt;&lt;/p&gt;**GQLAlchemy** is a fully open-source Python library and **Object Graph Mapper** (OGM) - a link between graph database objects and Python objects.An Object Graph Mapper or OGM provides a developer-friendly workflow that allows for writing object-oriented notation to communicate with graph databases. Instead of writing Cypher queries, you will be able to write object-oriented code, which the OGM will automatically translate into Cypher queries.## InstallationGQLAlchemy is built on top of Memgraph's low-level Python client `pymgclient`([PyPI](https://pypi.org/project/pymgclient/) /[Documentation](https://memgraph.github.io/pymgclient/) /[GitHub](https://github.com/memgraph/pymgclient)). To install GQLAlchemy, you first need to install `pymgclient` [build prerequisites](https://memgraph.github.io/pymgclient/introduction.html#build-prerequisites).After you have installed the prerequisites, run the following command:`pip install gqlalchemy`With the above command, you get the basic GQLAlchemy capabilities. To add additional import/export capabilities, install GQLAlchemy with one of the following commands:- `pip install gqlalchemy[arrow]` # Support for the CSV, Parquet, ORC and IPC/Feather/Arrow formats- `pip install gqlalchemy[dgl]` # DGL support (includes PyTorch)- `pip install gqlalchemy[all]` # All of the aboveIf you intend to use GQLAlchemy with PyTorch Geometric support, that library must be installed manually:```bashpip install gqlalchemy[torch_pyg] # prerequisitepip install torch-scatter torch-sparse torch-cluster torch-spline-conv torch-geometric -f https://data.pyg.org/whl/torch-1.13.0+cpu.html&quot;```If you are using [Conda](https://docs.conda.io/en/latest/) for Python environment management, you can install GQLAlchemy through pip.## Build &amp; TestThe project uses [Poetry](https://python-poetry.org/) to build the library. Clone or download the [GQLAlchemy source code](https://github.com/memgraph/gqlalchemy) locally and run the following command to build it from source with Poetry:```bashpoetry install --all-extras```The ``poetry install --all-extras`` command installs GQLAlchemy with all extras(optional dependencies). Alternatively, you can use the ``-E`` option to definewhat extras to install:```bashpoetry install # No extraspoetry install -E arrow # Support for the CSV, Parquet, ORC and IPC/Feather/Arrow formatspoetry install -E dgl # DGL support (also includes torch)```To run the tests, make sure you have an [active Memgraph instance](/memgraph), and execute one of the following commands:```bashpoetry run pytest . -k &quot;not slow&quot; # If all extras installedpoetry run pytest . -k &quot;not slow and not extras&quot; # Otherwise```If you‚Äôve installed only certain extras, it‚Äôs also possible to run their associated tests:```bashpoetry run pytest . -k &quot;arrow&quot;poetry run pytest . -k &quot;dgl&quot;```## GQLAlchemy capabilities&lt;details&gt;&lt;summary&gt;üó∫Ô∏è Object graph mapper&lt;/summary&gt;&lt;br&gt;Below you can see an example of how to create `User` and `Language` node classes, and a relationship class of type `SPEAKS`. Along with that, you can see how to create a new node and relationship and how to save them in the database. After that, you can load those nodes and relationship from the database.&lt;br&gt;&lt;br&gt;```pythonfrom gqlalchemy import Memgraph, Node, Relationship, Fieldfrom typing import Optionaldb = Memgraph()class User(Node, index=True, db=db):    id: str = Field(index=True, exist=True, unique=True, db=db)class Language(Node):    name: str = Field(unique=True, db=db)class Speaks(Relationship, type=&quot;SPEAKS&quot;):    passuser = User(id=&quot;3&quot;, username=&quot;John&quot;).save(db)language = Language(name=&quot;en&quot;).save(db)speaks_rel = Speaks(    _start_node_id = user._id,    _end_node_id = language._id).save(db)loaded_user = User(id=&quot;3&quot;).load(db=db)print(loaded_user)loaded_speaks = Speaks(        _start_node_id=user._id,        _end_node_id=language._id    ).load(db)print(loaded_speaks)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;üî® Query builder&lt;/summary&gt;&lt;br&gt;When building a Cypher query, you can use a set of methods that are wrappers around Cypher clauses. &lt;br&gt;&lt;br&gt;```pythonfrom gqlalchemy import create, matchfrom gqlalchemy.query_builder import Operatorquery_create = create()        .node(labels=&quot;Person&quot;, name=&quot;Leslie&quot;)        .to(relationship_type=&quot;FRIENDS_WITH&quot;)        .node(labels=&quot;Person&quot;, name=&quot;Ron&quot;)        .execute()query_match = match()        .node(labels=&quot;Person&quot;, variable=&quot;p1&quot;)        .to()        .node(labels=&quot;Person&quot;, variable=&quot;p2&quot;)        .where(item=&quot;p1.name&quot;, operator=Operator.EQUAL, literal=&quot;Leslie&quot;)        .return_(results=[&quot;p1&quot;, (&quot;p2&quot;, &quot;second&quot;)])        .execute()```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;üö∞ Manage streams&lt;/summary&gt;&lt;br&gt;You can create and start Kafka or Pulsar stream using GQLAlchemy. &lt;br&gt;**Kafka stream** ```pythonfrom gqlalchemy import MemgraphKafkaStreamstream = MemgraphKafkaStream(name=&quot;ratings_stream&quot;, topics=[&quot;ratings&quot;], transform=&quot;movielens.rating&quot;, bootstrap_servers=&quot;localhost:9093&quot;)db.create_stream(stream)db.start_stream(stream)```**Pulsar stream**```pythonfrom gqlalchemy import MemgraphPulsarStreamstream = MemgraphPulsarStream(name=&quot;ratings_stream&quot;, topics=[&quot;ratings&quot;], transform=&quot;movielens.rating&quot;, service_url=&quot;localhost:6650&quot;)db.create_stream(stream)db.start_stream(stream)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;üóÑÔ∏è Import table data from different sources&lt;/summary&gt;&lt;br&gt;**Import table data to a graph database**You can translate table data from a file to graph data and import it to Memgraph. Currently, we support reading of CSV, Parquet, ORC and IPC/Feather/Arrow file formats via the PyArrow package.Read all about it in [table to graph importer how-to guide](https://memgraph.com/docs/gqlalchemy/how-to-guides/table-to-graph-importer).**Make a custom file system importer**If you want to read from a file system not currently supported by GQLAlchemy, or use a file type currently not readable, you can implement your own by extending abstract classes `FileSystemHandler` and `DataLoader`, respectively.Read all about it in [custom file system importer how-to guide](https://memgraph.com/docs/gqlalchemy/how-to-guides/custom-file-system-importer).&lt;/details&gt;&lt;details&gt;&lt;summary&gt;‚öôÔ∏è Manage Memgraph instances&lt;/summary&gt;&lt;br&gt;You can start, stop, connect to and monitor Memgraph instances with GQLAlchemy.**Manage Memgraph Docker instance**```pythonfrom gqlalchemy.instance_runner import (    DockerImage,    MemgraphInstanceDocker)memgraph_instance = MemgraphInstanceDocker(    docker_image=DockerImage.MEMGRAPH, docker_image_tag=&quot;latest&quot;, host=&quot;0.0.0.0&quot;, port=7687)memgraph = memgraph_instance.start_and_connect(restart=False)memgraph.execute_and_fetch(&quot;RETURN 'Memgraph is running' AS result&quot;))[0][&quot;result&quot;]```**Manage Memgraph binary instance**```pythonfrom gqlalchemy.instance_runner import MemgraphInstanceBinarymemgraph_instance = MemgraphInstanceBinary(    host=&quot;0.0.0.0&quot;, port=7698, binary_path=&quot;/usr/lib/memgraph/memgraph&quot;, user=&quot;memgraph&quot;)memgraph = memgraph_instance.start_and_connect(restart=False)memgraph.execute_and_fetch(&quot;RETURN 'Memgraph is running' AS result&quot;))[0][&quot;result&quot;]```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;üî´ Manage database triggers&lt;/summary&gt;&lt;br&gt;Because Memgraph supports database triggers on `CREATE`, `UPDATE` and `DELETE` operations, GQLAlchemy also implements a simple interface for maintaining these triggers.```pythonfrom gqlalchemy import Memgraph, MemgraphTriggerfrom gqlalchemy.models import (    TriggerEventType,    TriggerEventObject,    TriggerExecutionPhase,)db = Memgraph()trigger = MemgraphTrigger(    name=&quot;ratings_trigger&quot;,    event_type=TriggerEventType.CREATE,    event_object=TriggerEventObject.NODE,    execution_phase=TriggerExecutionPhase.AFTER,    statement=&quot;UNWIND createdVertices AS node SET node.created_at = LocalDateTime()&quot;,)db.create_trigger(trigger)triggers = db.get_triggers()print(triggers)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;üíΩ On-disk storage&lt;/summary&gt;&lt;br&gt;Since Memgraph is an in-memory graph database, the GQLAlchemy library provides an on-disk storage solution for large properties not used in graph algorithms. This is useful when nodes or relationships have metadata that doesn‚Äôt need to be used in any of the graph algorithms that need to be carried out in Memgraph, but can be fetched after. Learn all about it in the [on-disk storage how-to guide](https://memgraph.com/docs/gqlalchemy/how-to-guides/on-disk-storage).&lt;/details&gt;&lt;br&gt;If you want to learn more about OGM, query builder, managing streams, importing data from different source, managing Memgraph instances, managing database triggers and using on-disk storage, check out the GQLAlchemy [how-to guides](https://memgraph.com/docs/gqlalchemy/how-to-guides).## Development (how to build)```bashpoetry run flake8 .poetry run black .poetry run pytest . -k &quot;not slow and not extras&quot;```## DocumentationThe GQLAlchemy documentation is available on [memgraph.com/docs/gqlalchemy](https://memgraph.com/docs/gqlalchemy/).The documentation can be generated by executing:```pip3 install pydoc-markdownpydoc-markdown```## LicenseCopyright (c) 2016-2022 [Memgraph Ltd.](https://memgraph.com)Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not usethis file except in compliance with the License. You may obtain a copy of theLicense at     http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, software distributedunder the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES ORCONDITIONS OF ANY KIND, either express or implied. See the License for thespecific language governing permissions and limitations under the License.</longdescription>
</pkgmetadata>