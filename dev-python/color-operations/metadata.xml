<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># color-operations&lt;p align=&quot;center&quot;&gt;  &lt;p align=&quot;center&quot;&gt;Apply basic color-oriented image operations.&lt;/p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/vincentsarago/color-operations/actions?query=workflow%3ACI&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://github.com/vincentsarago/color-operations/workflows/CI/badge.svg&quot; alt=&quot;Test&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://codecov.io/gh/vincentsarago/color-operations&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://codecov.io/gh/vincentsarago/color-operations/branch/main/graph/badge.svg&quot; alt=&quot;Coverage&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/color-operations&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://img.shields.io/pypi/v/color-operations?color=%2334D058&amp;label=pypi%20package&quot; alt=&quot;Package version&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/vincentsarago/color-operations/blob/main/LICENSE&quot; target=&quot;_blank&quot;&gt;      &lt;img src=&quot;https://img.shields.io/github/license/vincentsarago/color-operations.svg&quot; alt=&quot;license&quot;&gt;  &lt;/a&gt;&lt;/p&gt;Lightweight version of [**rio-color**](https://github.com/mapbox/rio-color) but removing rasterio dependency.## InstallYou can install color-operations using pip```pip install -U pippip install color-operations```Build from source```git checkout https://github.com/vincentsarago/color-operations.gitcd color-operationspip install -U pippip install -e .```## Operations**Gamma** adjustment adjusts RGB values according to a power law, effectively brightening or darkening the midtones. It can be very effective in satellite imagery for reducing atmospheric haze in the blue and green bands.**Sigmoidal** contrast adjustment can alter the contrast and brightness of an image in a way thatmatches human's non-linear visual perception. It works well to increase contrast without blowing out the very dark shadows or already-bright parts of the image.**Saturation** can be thought of as the &quot;colorfulness&quot; of a pixel. Highly saturated colors are intense and almost cartoon-like, low saturation is more muted, closer to black and white. You can adjust saturation independently of brightness and hue but the data must be transformed into a different color space.Ref https://github.com/mapbox/rio-color/blob/master/README.md## Examples#### SigmoidalContrast![sigmoidal_contrast](img/sigmoidal_contrast.jpg)Bias![sigmoidal_bias](img/sigmoidal_bias.jpg)#### GammaRed![gamma_red](img/gamma_red.jpg)Green![gamma_green](img/gamma_green.jpg)Blue![gamma_blue](img/gamma_blue.jpg)#### Saturation![saturation](img/saturation.jpg)#### Combinations of operations![combos](img/combos.jpg)Ref https://github.com/mapbox/rio-color/blob/master/README.md## Python API#### `color_operations.operations`The following functions accept and return numpy `ndarrays`. The arrays are assumed to be scaled 0 to 1. In some cases, the input array is assumed to be in the RGB colorspace.All arrays use rasterio ordering with the shape as (bands, columns, rows). Be aware that other image processing software may use the (columns, rows, bands) axis order.* `sigmoidal(arr, contrast, bias)`* `gamma(arr, g)`* `saturation(rgb, proportion)`* `simple_atmo(rgb, haze, contrast, bias)`The `color_operations.operations.parse_operations` function takes an *operations string* andreturns a list of python functions which can be applied to an array.```pythonfrom color_operations import parse_operationsops = &quot;gamma b 1.85, gamma rg 1.95, sigmoidal rgb 35 0.13, saturation 1.15&quot;assert arr.shape[0] == 3assert arr.min() &gt;= 0assert arr.max() &lt;= 1for func in parse_operations(ops):    arr = func(arr)```This provides a tiny domain specific language (DSL) to allow youto compose ordered chains of image manipulations using the above operations.For more information on operation strings, see the `rio color` command line help.#### `color_operations.colorspace`The `colorspace` module provides functions for converting scalars and numpy arrays between different colorspaces.```pythonfrom color_operations.colorspace import ColorSpace as cs  # enum defining available color spacesfrom color_operations.colorspace import convert, convert_arrconvert_arr(array, src=cs.rgb, dst=cs.lch) # for arrays...convert(r, g, b, src=cs.rgb, dst=cs.lch)  # for scalars...dict(cs.__members__)  # can convert to/from any of these color spaces{    'rgb': &lt;ColorSpace.rgb: 0&gt;,    'xyz': &lt;ColorSpace.xyz: 1&gt;,    'lab': &lt;ColorSpace.lab: 2&gt;,    'lch': &lt;ColorSpace.lch: 3&gt;,    'luv': &lt;ColorSpace.luv: 4&gt;}```</longdescription>
</pkgmetadata>