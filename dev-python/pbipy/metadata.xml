<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pbipy![PyPI](https://img.shields.io/pypi/v/pbipy) ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/andrewvillazon/pbipy) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pbipy) ![GitHub](https://img.shields.io/github/license/andrewvillazon/pbipy) ![Static Badge](https://img.shields.io/badge/Python-blue?logo=python&amp;logoColor=yellow) ![Static Badge](https://img.shields.io/badge/power-bi-yellow?logoColor=yellow&amp;labelColor=yellow&amp;color=black)`pbipy` is a Python Library for interacting with the Power BI Rest API. It aims to simplyify working with the Power BI Rest API and support programatic administration of Power BI in Python.`pbipy` supports operations for Apps, Dataflows, Datasets, Reports, and Workspaces (Groups), allowing users to perform actions on their PowerBI instance using Python.## Installation```consolepip install pbipy```Or to install the latest development code:```consolepip install git+https://github.com/andrewvillazon/pbipy```## Getting Started: AuthenticationTo use `pbipy` you'll first need to acquire a `bearer_token`.*How do I get a `bearer_token`?*To acquire a `bearer_token` you'll need to authenticate against your [Registered Azure Power BI App](https://learn.microsoft.com/en-us/power-bi/developer/embedded/register-app?tabs=customers). Registering is the first step in turning on the Power BI Rest API, so from here on it's assumed your Power BI Rest API is up and running.To authenticate against the Registered App, Microsoft provides the `MSAL` and `azure-identity` python libraries. These libraries support different ways of acquiring a `bearer_token` and which to use will depend on how your cloud/tenant is configured.Because there are multiple ways to acquire the token, `pbipy` leaves it up to do this in the way that suits, rather than directly handling authentication (of course, this might change in future).This `README` doesn't cover authentication in detail, however, these are some helpful resources that look at acquiring a `bearer_token` in the context of Power BI:* [Power BI REST API with Python and MSAL. Part II.](https://www.datalineo.com/post/power-bi-rest-api-with-python-and-msal-part-ii)* [Power BI REST API with Python Part III, azure-identity](https://www.datalineo.com/post/power-bi-rest-api-with-python-part-iii-azure-identity)* [Monitoring Power BI using REST APIs from Python](https://data-goblins.com/power-bi/power-bi-api-python)The example below uses the `msal` library to to get a bearer_token.```pythonimport msal#  msal auth setupdef acquire_bearer_token(username, password, azure_tenant_id, client_id, scopes):    app = msal.PublicClientApplication(client_id, authority=azure_tenant_id)    result = app.acquire_token_by_username_password(username, password, scopes)    return result[&quot;access_token&quot;]bearer_token = acquire_bearer_token(    username=&quot;your-username&quot;,    password=&quot;your-password&quot;,    azure_tenant_id=&quot;https://login.microsoftonline.com/your-azure-tenant-id&quot;,    client_id=&quot;your-pbi-client-id&quot;,    scopes=[&quot;https://analysis.windows.net/powerbi/api/.default&quot;],)```The code that follows assumes you've authenticated and acquired your `bearer_token`.## UseageStart by creating the `PowerBI()` client. Interactions with the Power BI Rest API go through this object. ```pythonfrom pbipy import PowerBIpbi = PowerBI(bearer_token)```To interact with the API, simply call the relevant method from the client.```python# Grab the datasets from a workspacepbi.datasets(group=&quot;f089354e-8366-4e18-aea3-4cb4a3a50b48&quot;)````pbipy` converts API responses into regular Python objects, with snake case included! üêçüêç```pythonsales = pbi.dataset(&quot;cfafbeb1-8037-4d0c-896e-a46fb27ff229&quot;)print(type(sales))print(hasattr(sales, &quot;configured_by&quot;))# &lt;class 'pbipy.resources.Dataset'&gt;# True```Most methods take in an object id...```pythondataset = pbi.dataset(    id=&quot;cfafbeb1-8037-4d0c-896e-a46fb27ff229&quot;,    group=&quot;a2f89923-421a-464e-bf4c-25eab39bb09f&quot;)```... or just pass in the object itself.```pythongroup = pbi.group(&quot;a2f89923-421a-464e-bf4c-25eab39bb09f&quot;)dataset = pbi.dataset(    &quot;cfafbeb1-8037-4d0c-896e-a46fb27ff229&quot;    ,group=group)```If you need to access the raw json representation, this is supported to.```pythonsales = pbi.dataset(&quot;cfafbeb1-8037-4d0c-896e-a46fb27ff229&quot;)print(sales.raw)# {#   &quot;id&quot;: &quot;cfafbeb1-8037-4d0c-896e-a46fb27ff229&quot;,#   &quot;name&quot;: &quot;SalesMarketing&quot;,#   &quot;addRowsAPIEnabled&quot;: False,#   &quot;configuredBy&quot;: &quot;john@contoso.com&quot;,#   ...# }```## Example: Working with DatasetsLet's see how `pbipy` works by performing some operations on a Dataset.First, we initialize our client.```pythonfrom pbipy import PowerBIpbi = PowerBI(bearer_token)```Now that we've got a client, we can load a Dataset from the API. To load a Dataset, we call the `dataset()` method with an `id` and `group` argument. In the Power BI Rest API, a **Group** and **Workspace** are synonymous and used interchangeably.```pythonsales = pbi.dataset(    id=&quot;cfafbeb1-8037-4d0c-896e-a46fb27ff229&quot;,    group=&quot;f089354e-8366-4e18-aea3-4cb4a3a50b48&quot;,)print(sales)# &lt;Dataset id='cfafbeb1-8037-4d0c-896e-a46fb27ff229', name='SalesMarketing', ...&gt;```Dataset not updating? Let's look at the Refresh History. We call the `refresh_history()` method on our Dataset. Easy.```pythonrefresh_history = sales.refresh_history()for entry in refresh_history:    print(entry)# {&quot;refreshType&quot;:&quot;ViaApi&quot;, &quot;startTime&quot;:&quot;2017-06-13T09:25:43.153Z&quot;, &quot;status&quot;: &quot;Completed&quot; ...}```Need to kick off a refresh? That's easy too.```pythonsales.refresh()```How about adding some user permissions to our Dataset? Just call the `add_user()` method with the User's details and permissions.```python# Give John 'Read' access on the datasetsales.add_user(&quot;john@contoso.com&quot;, &quot;User&quot;, &quot;Read&quot;)```Lastly, if we're feeling adventurous, we can execute DAX against a Dataset and use the results in Python.```pythondxq_result = sales.execute_queries(&quot;EVALUATE VALUES(MyTable)&quot;)print(dxq_result)# {#   &quot;results&quot;: [#     {#       &quot;tables&quot;: [#         {#           &quot;rows&quot;: [#             {#               &quot;MyTable[Year]&quot;: 2010,#               &quot;MyTable[Quarter]&quot;: &quot;Q1&quot;#             },# ...# }```## Example: Working with the Admin object`pbypi` also supports [Administrator Operations](https://learn.microsoft.com/en-us/rest/api/power-bi/admin), specialized operations available to users with Power BI Admin rights. Let's see how we can use these.First, we need to initialize our client. Then we call the `admin` method and initialize an `Admin` object.```pythonfrom pbipy import PowerBIpbi = PowerBI(bearer_token)admin = pbi.admin()```Need to review some access on some reports? We can call the `report_users` method.```pythonusers = admin.report_users(&quot;5b218778-e7a5-4d73-8187-f10824047715&quot;)print(users[0])# {&quot;displayName&quot;: &quot;John Nick&quot;, &quot;emailAddress&quot;: &quot;john@contoso.com&quot;, ...}```What about understanding User activity on your Power BI tenant?```pythonfrom datetime import datetimestart_dtm = datetime(2019, 8, 31, 0, 0, 0)end_dtm = datetime(2019, 8, 31, 23, 59, 59)activity_events = admin.activity_events(start_dtm, end_dtm)print(activity_events)# [#   {#       &quot;Id&quot;: &quot;41ce06d1&quot;, #       &quot;CreationTime&quot;: &quot;2019-08-13T07:55:15&quot;, #       &quot;Operation&quot;: &quot;ViewReport&quot;, #       ...#   },#   {#       &quot;Id&quot;: &quot;c632aa64&quot;, #       &quot;CreationTime&quot;: &quot;2019-08-13T07:55:10&quot;, #       &quot;Operation&quot;: &quot;GetSnapshots&quot;, #       ...#   }# ]```## More examples### Datasets in a Workspace```pythondatasets = pbi.datasets(group=&quot;f089354e-8366-4e18-aea3-4cb4a3a50b48&quot;)for dataset in datasets:    print(dataset)# &lt;Dataset id='cfafbeb1-8037-4d0c-896e-a46fb27ff229', ...&gt;# &lt;Dataset id='f7fc6510-e151-42a3-850b-d0805a391db0', ...&gt;```### List Workspaces```pythongroups = pbi.groups()for group in groups:    print(group)# &lt;Group id='a2f89923-421a-464e-bf4c-25eab39bb09f', name='contoso'&gt;# &lt;Group id='3d9b93c6-7b6d-4801-a491-1738910904fd', name='marketing'&gt;```### Create a Workspace```pythongroup = pbi.create_group(&quot;contoso&quot;)print(group)# &lt;Group id='a2f89923-421a-464e-bf4c-25eab39bb09f', name='contoso'&gt;```### Users and their access```pythongroup = pbi.group(&quot;a2f89923-421a-464e-bf4c-25eab39bb09f&quot;)users = group.users()for user in users:    print(user)# {&quot;identifier&quot;: &quot;john@contoso.com&quot;, &quot;groupUserAccessRight&quot;: &quot;Admin&quot;, ... }# {&quot;identifier&quot;: &quot;Adam@contoso.com&quot;, &quot;groupUserAccessRight&quot;: &quot;Member&quot;, ... }```## Power BI Rest API Operations`pbipy` methods wrap around the Operations described in the Power BI Rest API Reference:[Power BI REST APIs for embedded analytics and automation - Power BI REST API](https://learn.microsoft.com/en-us/rest/api/power-bi/)## What's implemented?Most of the core operations on Datasets, Workspaces (Groups), Reports, Apps, and Dataflows are implemented. Given the many available endpoints, not everything is covered by `pbipy`, so expect a few features to be missing.If an operation is missing and you think it'd be useful, feel free to suggest it on the [Issues tab](https://github.com/andrewvillazon/pbipy/issues).| PowerBI Component   | Progress | Notes                                                                             ||---------------------|----------|-------------------------------------------------------------------------------------- || Datasets            | Done     |                                                                                   || Groups (Workspaces) | Done    |                                                                                   || Reports             | Done      |                                                                                   || Apps                | Done   |                                                                                   || Dataflows           | Done    |                                                                                   || Admin Operations     | Done    | Implements operations related to Datasets, Groups, Reports, Apps, and Dataflows only. || Dashboards          | Todo     |                                                                                   || Everything else     | Backlog  |                                                                                   |## ContributingContributions such as bug reports, fixes, documentation or docstrings, enhancements, and ideas are welcome. `pbipy` uses github to host code, track issues, record feature requests, and accept pull requests.A `contributing.md` is in the works, but in the meantime below is a general guide.### Making a contributionPull requests are the best way to make a contribution to the code:1. Fork the repo and create your branch from master.2. If you've added code that should be tested, add tests.3. Add docstrings.4. Ensure the test suite passes.5. Format your code (`pbipy` uses [black](https://github.com/psf/black)).6. Issue that pull request!### Reporting a bugGreat Bug Reports tend to have:* A quick summary and/or background* Steps to reproduce. Be specific! Give sample code if you can.* What you expected would happen* What actually happens* Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)## AcknowledgementsThe design of this library was heavily inspired by (basically copied) the [pycontribs/jira](https://github.com/pycontribs/jira) library. It also borrows elements of [cmberryay's pypowerbi wrapper](https://github.com/cmberryau/pypowerbi).Thank You to all the contributors to these libraries for the great examples of what an API Wrapper can be.</longdescription>
</pkgmetadata>