<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gino-starlette[![Codacy Badge](https://api.codacy.com/project/badge/Grade/0bec53f18d3b49aea6f558a269df318a)](https://app.codacy.com/gh/python-gino/gino-starlette?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=python-gino/gino-starlette&amp;utm_campaign=Badge_Grade_Settings)## IntroductionAn extension for GINO to support starlette server.## UsageThe common usage looks like this:```pythonfrom starlette.applications import Starlettefrom gino.ext.starlette import Ginoapp = Starlette()db = Gino(app, **kwargs)```## ConfigurationGINO adds a middleware to the Starlette app to setup and cleanup database according tothe configurations that passed in the `kwargs` parameter.The config includes:| Name                         | Description                                                                                                       | Default     || ---------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------- || `driver`                     | the database driver                                                                                               | `asyncpg`   || `host`                       | database server host                                                                                              | `localhost` || `port`                       | database server port                                                                                              | `5432`      || `user`                       | database server user                                                                                              | `postgres`  || `password`                   | database server password                                                                                          | empty       || `database`                   | database name                                                                                                     | `postgres`  || `dsn`                        | a SQLAlchemy database URL to create the engine, its existence will replace all previous connect arguments.        | N/A         || `retry_times`                | the retry times when database failed to connect                                                                   | `20`        || `retry_interval`             | the interval in **seconds** between each time of retry                                                            | `5`         || `pool_min_size`              | the initial number of connections of the db pool.                                                                 | N/A         || `pool_max_size`              | the maximum number of connections in the db pool.                                                                 | N/A         || `echo`                       | enable SQLAlchemy echo mode.                                                                                      | N/A         || `ssl`                        | SSL context passed to `asyncpg.connect`                                                                           | `None`      || `use_connection_for_request` | flag to set up lazy connection for requests.                                                                      | N/A         || `retry_limit`                | the number of retries to connect to the database on start up.                                                     | 1           || `retry_interval`             | seconds to wait between retries.                                                                                  | 1           || `kwargs`                     | other parameters passed to the specified dialects, like `asyncpg`. Unrecognized parameters will cause exceptions. | N/A         |## Lazy ConnectionIf `use_connection_for_request` is set to be True, then a lazy connection is availableat `request['connection']`. By default, a database connection is borrowed on the firstquery, shared in the same execution context, and returned to the pool on response.If you need to release the connection early in the middle to do some long-running tasks,you can simply do this:```pythonawait request['connection'].release(permanent=False)```</longdescription>
</pkgmetadata>