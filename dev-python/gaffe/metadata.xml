<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Introducing Gaffe: Streamlined Exception Handling for PythonAre you tired of managing messy, unstructured exceptions in your Python projects? Gaffe is here to save the day! This elegant library offers a metaclass-based approach for highly extensible and easy-to-integrate custom exceptions, leading to better error handling and improved code readability.## 🔥 Key Features- 🎯 Simple, concise syntax for defining custom errors with optional subtypes- 🧩 Clean integration through metaclass-based approach- 🌳 Supports inheritance and composition of custom errors- 🏗️ Automatic generation of error classes with custom attributes- 🧮 Easy error comparison with the __eq__ method, supporting both class and instance comparisons- 🕵️♂️ raises decorator to inspect and validate exceptions raised by functions or methods- 🚀 Quick InstallationFor pip enthusiasts:```bashpip install gaffe```For poetry aficionados:```bashpoetry add gaffe```# 💡 Getting StartedTo employ Gaffe's custom error system, import the Error class and create custom errors by inheriting from it:```pythonfrom gaffe import Errorclass NotFoundError(Exception):    ...class MyError(Error):    not_found: NotFoundError    invalid_input: ...    authentication_error = &quot;authentication_error&quot;```    With this example, you'll get three custom errors under the MyError class, ready to be used just like any other Python exceptions.## 🎩 Raises DecoratorHarness the power of the raises decorator to define and validate the types of exceptions a function or method can raise:```pythonfrom gaffe import raises@raises(TypeError, ValueError)def my_function(x: int, y: int) -&gt; float:    if x &lt;= 0 or y &lt;= 0:        raise ValueError(&quot;x and y must be positive&quot;)    return x / y```The raises decorator ensures that my_function can only raise TypeError and ValueError. If it tries to raise an unlisted exception, an AssertionError will be raised with a suitable error message.## 🤖 Mypy IntegrationTo keep mypy happy, use the gaffe.mypy:plugin in your config file, and ensure that error properties are annotated with `Exception` type instead of `...````toml[tool.mypy]plugins = &quot;gaffe.mypy:plugin&quot;```Ready to revolutionize your Python exception handling? Get started with Gaffe today and check out the test scenarios for more examples!</longdescription>
</pkgmetadata>