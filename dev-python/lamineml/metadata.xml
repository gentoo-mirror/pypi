<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Make sure you have upgraded version of pipWindows```py -m pip install --upgrade pip```Linux/MAC OS```python3 -m pip install --upgrade pip```## Create a project with the following structure```packaging_tutorial/├── LICENSE├── pyproject.toml├── README.md├── setup.cfg├── src/│   └── example_package/│       ├── __init__.py│       └── example.py└── tests/touch LICENSEtouch pyproject.tomltouch setup.cfgmkdir src/mypackagetouch src/mypackage/__init__.pytouch src/mypackage/main.pymkdir tests```## pyproject.toml This file tells tools like pip and build how to create your project```[build-system]requires = [    &quot;setuptools&gt;=42&quot;,    &quot;wheel&quot;]build-backend = &quot;setuptools.build_meta&quot;```build-system.requires gives a list of packages that are needed to build your package. Listing something here will only make it available during the build, not after it is installed.build-system.build-backend is the name of Python object that will be used to perform the build. If you were to use a different build system, such as flit or poetry, those would go here, and the configuration details would be completely different than the setuptools configuration described below.# Setup.cfg setupUsing setup.cfg is a best practice, but you could have a dynamic setup file using setup.py```[metadata]name = example-pkg-YOUR-USERNAME-HEREversion = 0.0.1author = Example Authorauthor_email = author@example.comdescription = A small example packagelong_description = file: README.mdlong_description_content_type = text/markdownurl = https://github.com/pypa/sampleprojectproject_urls =    Bug Tracker = https://github.com/pypa/sampleproject/issuesclassifiers =    Programming Language :: Python :: 3    License :: OSI Approved :: MIT License    Operating System :: OS Independent[options]package_dir =    = srcpackages = find:python_requires = &gt;=3.6[options.packages.find]where = src```# Running the build### Make sure your build tool is up to dateWindows```py -m pip install --upgrade build```Linux/MAC OS```python3 -m pip install --upgrade build```### Create the build```py -m build```### Referenceshttps://packaging.python.org/tutorials/packaging-projects/</longdescription>
</pkgmetadata>