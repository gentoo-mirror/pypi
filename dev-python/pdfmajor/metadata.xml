<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PDFMajor &lt;table&gt;&lt;tr&gt;  &lt;td&gt;Latest Release&lt;/td&gt;  &lt;td&gt;    &lt;a href=&quot;https://pypi.org/project/pdfmajor/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/pdfmajor.svg&quot; alt=&quot;latest release&quot; /&gt;    &lt;/a&gt;  &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;PDF-Major is a **complete re-write** of `PDFMiner.six`. It is meant to be a more light-weight implementation that makes fewer assumptions on the data. The ultimate goal of this project is to provide a simpler, faster and more functional library that both casual and low-level developers could build upon.## DocumentationSee [full API documentation here](https://asosnovsky.github.io/pdfmajor/api/).## Basic Example```pyfrom pdfmajor.interpreter import PDFInterpreterfor page in PDFInterpreter(&quot;/path/to/pdf.pdf&quot;):    print(&quot;page start&quot;, page.page_num)    for item in page:        print(&quot; &gt;&quot;, item)    print(&quot;page end&quot;, page.page_num)```## Why a re-write?`PDFMiner` was designed to run in python 2.7, `PDFMiner.six` was written to bring cross-version support for python 2 and 3. However, after attempting to build and extend upon `PDFMiner.six` I found it rather difficult to extend and identify additional details regarding the items encoded in the pdf. This library will attempt to expose as much information as possible to end-users, without having them solely rely on to-xml or to-json exports.## Features * Functional extraction method based on generators * Parse, analyze, and convert PDF documents. * PDF-1.7 specification support. (well, almost) * Font-Color extraction * Shape fill and stroke color extraction * CJK languages and vertical writing scripts support. * Various font types (Type1, TrueType, Type3, and CID) support. * Basic encryption (RC4) support.**Note**: We took out the layout-analysis process in this version (there is no more LTTextHorizontal or LTTextVertical). While the mathematics behind the grouping process was sound, the coupling of the layout-analysis process with the parsing and interpretation process produced unfriendly-code. This feature could be brought back by running your own implementation of it on the `pdfmajor.interpreter.PageInterpreter` class, but at the current time is not supported.## How to Install### Source  * Install Python 3.6.4 or newer.  * clone this repo    `git clone https://github.com/asosnovsky/pdfmajor`  * install repo    `python setup.py install`### Pypi  * Install Python 3.6.4 or newer.  * install repo    `pip install pdfmajor`## Terms and Conditions(This is so-called MIT/X License)Copyright (c) 2018-2019  Ariel Sosnovsky &lt;ariel at sosnovsky dot ca&gt;Permission is hereby granted, free of charge, to any personobtaining a copy of this software and associated documentationfiles (the &quot;Software&quot;), to deal in the Software withoutrestriction, including without limitation the rights to use,copy, modify, merge, publish, distribute, sublicense, and/orsell copies of the Software, and to permit persons to whom theSoftware is furnished to do so, subject to the followingconditions:The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANYKIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THEWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULARPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ORCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OROTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>