<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>epyc: Python computational experiment management================================================.. image:: https://badge.fury.io/py/epyc.svg    :target: https://pypi.org/project/epyc/.. image:: https://readthedocs.org/projects/epyc/badge/?version=latest    :target: https://epyc.readthedocs.io/en/latest/index.html.. image:: https://github.com/simoninireland/epyc/actions/workflows/ci.yaml/badge.svg    :target: https://github.com/simoninireland/epyc/actions.. image:: https://zenodo.org/badge/63255319.svg   :target: https://zenodo.org/badge/latestdoi/63255319.. image:: https://joss.theoj.org/papers/10.21105/joss.03764/status.svg   :target: https://doi.org/10.21105/joss.03764.. image:: https://www.gnu.org/graphics/gplv3-88x31.png    :target: https://www.gnu.org/licenses/gpl-3.0.en.htmlOverview--------``epyc`` is a Python module for controlling a long-running series ofcomputational experiments, as is often found when writing simulationsof complex networks and other such domains. There is often a need toperform a computation across a multi-dimensional parameter space,varying the parameters, performing and aggregating multiplerepetitions, and wrangling results for analysis andpresentation. Often the experiments being performed are on such ascale as to require the use of a computing cluster to perform multipleexperiments simultaneously.Managing all these tasks is complicated, so ``epyc`` tries to automateit. It provides a way to define a &quot;laboratory&quot; performing a collectionof &quot;experiments&quot; whose parameters and results are collected togethr into &quot;resultsets&quot; and recorded in a &quot;labnotebook&quot; for later retrieval. Laboratories can be sequential (for asingle machine) or parallel (to use a multicore or cluster ofmachines); lab notebooks can be persistent to allow experiments to befired-off and their results retrieved later -- handy if you use alaptop. Notebooks store all the data and metadata in a portable formatto improve the reproducibility of computational experiments.``epyc`` also includes a small number of &quot;experiment combinators&quot; thatseparate the logic of a single experiment from the logic of performingmultiple repetitions and other structuring tasks. This means thatany experiment can be repeated and statistically summarised, forexample.Installation------------``epyc`` works with Python 3.6 and above, and with PyPy3. You can installit directly from PyPi using ``pip``:::   pip install epycThe master distribution of ``epyc`` is hosted on GitHub. To obtain acopy, just clone the repo:::    git clone git@github.com:simoninireland/epyc.git    cd epyc    pip install .Examples--------See `the examples directory &lt;https://github.com/simoninireland/epyc/tree/master/doc/examples&gt;`_ for code examples.Documentation-------------API documentation for ``epyc`` can be found on `ReadTheDocs &lt;https://epyc.readthedocs.io/en/latest/&gt;`_.You can also read a Jupyter notebook describing several ``epyc`` usecases online `here &lt;https://github.com/simoninireland/epyc/blob/master/doc/epyc.ipynb&gt;`_.Author and license------------------Copyright (c) 2016-2022, Simon Dobson &lt;simoninireland@gmail.com&gt;Licensed under the `GNU General Public Licence v3 &lt;https://www.gnu.org/licenses/gpl-3.0.en.html&gt;`_.</longdescription>
</pkgmetadata>