<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Attendedsysupgrade Server for OpenWrt (GSoC 2017)[![codecov](https://codecov.io/gh/aparcar/asu/branch/master/graph/badge.svg)](https://codecov.io/gh/aparcar/asu)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![PyPi](https://badge.fury.io/py/asu.svg)](https://badge.fury.io/py/asu)This project simplifies the sysupgrade process for upgrading the firmware ofdevices running OpenWrt or distributions based on it. These tools offer an easyway to reflash the router with a new firmware version(including all packages) without the need to use `opkg`.It's called Attended SysUpgrade (ASU) because the upgrade process is not startedautomatically, but is initiated by a user who waits until it's done.ASU is based on an API (described below) to request custom firmware images withany selection of packages pre-installed. This avoids the need to set up a buildenvironment, and makes it possible to create a custom firmware image even usinga mobile device.## Clients of the Sysupgrade Server### OpenWrt Firmware SelectorSimple web interface using vanilla JavaScript currently developed by @mwarning.It offers a device search based on model names and show links either to[official images](https://downloads.openwrt.org/) or requests images via the_asu_ API. Please join in the development at[GitLab repository](https://gitlab.com/openwrt/web/firmware-selector-openwrt-org)![ofs](misc/ofs.png)### LuCI appThe package[`luci-app-attendedsysupgrade`](https://github.com/openwrt/luci/tree/master/applications/luci-app-attendedsysupgrade)offers a simple tool under `System &gt; Attended Sysupgrade`. It requests a newfirmware image that includes the current set of packages, waits until it's builtand flashes it. If &quot;Keep Configuration&quot; is checked in the GUI, the deviceupgrades to the new firmware without any need to re-enter any configuration orre-install any packages.![luci](misc/luci.png)### CLIThe [`auc`](https://github.com/openwrt/packages/tree/master/utils/auc) packageperforms the same process as the `luci-app-attendedsysupgrade`from SSH/the command line.![auc](misc/auc.png)## ServerThe server listens for image requests and, if valid, automatically generatesthem. It coordinates several OpenWrt ImageBuilders and caches the resultingimages in a Redis database. If an image is cached, the server can provide itimmediately without rebuilding.### Active server- [sysupgrade.openwrt.org](https://sysupgrade.openwrt.org)- [asu.aparcar.org](https://asu.aparcar.org)- ~~[chef.libremesh.org](https://chef.libremesh.org)~~ (`CNAME` to  asu.aparcar.org)## Run your own serverRedis is required to store image requests:    sudo apt install redis-server tarInstall _asu_:    pip install asuCreate a `config.py`.You can use `misc/config.py` as an example.Start the server via the following commands:    export FLASK_APP=asu.asu  # set Flask app to asu    flask janitor update      # download upstream profiles/packages - this runs forever    flask run                 # run development server - this runs foreverStart the worker via the following comand:    rq worker                 # this runs forever### DockerRun the service inside multiple Docker containers. The services include the _ASU_ server itself, a _janitor_ service which fills the Redis database withknown packages and profiles as well as a `rqworker` which actually buildsimages.Currently all services share the same folder and therefore a very &quot;open&quot; accessis required. Suggestions on how to improve this setup are welcome.    mkdir -p ./asu-service/public/    chmod -R 777 ./asu-service/    cp ./misc/config.py ./asu-service/    docker-compose upA webserver should proxy API calls to port 8000 of the `server` service whilethe `asu/` folder should be file hosted as-is.### ProductionIt is recommended to run _ASU_ via `gunicorn` proxied by `nginx` or`caddyserver`. Find a possible server configurations in the `misc/` folder.The _ASU_ server will try `$PWD/config.py` and `/etc/asu/config.py` to find aconfiguration. Find an example configuration in the `misc/` folder.    pip install gunicorn    gunicorn &quot;asu.asu:create_app()&quot;Ideally use the tool `squid` to cache package indexes, which are reloaded everytime an image is built. Find a basic configuration in at `misc/squid.conf`which should be copied to `/etc/squid/squid.conf`.If you want to use `systemd` find the service files `asu.service` and`worker@.service` in the `misc` folder as well.### DevelopmentAfter cloning this repository, create a Python virtual environment and installthe dependencies:    python3 -m venv .direnv    source .direnv/bin/activate    pip install -r requirements.txt    export FLASK_APP=asu.asu  # set Flask app to asu    export FLASK_APP=tests.conftest:mock_app FLASK_DEBUG=1 # run Flask in debug mode with mock data    flask run### APIThe API is documented via _OpenAPI_ and can be viewed interactively on theserver:[https://sysupgrade.openwrt.org/ui/](https://sysupgrade.openwrt.org/ui/)</longdescription>
</pkgmetadata>