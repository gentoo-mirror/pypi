<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Rule Engine===========|badge-build| |badge-pypi|A lightweight, optionally typed expression language with a custom grammar for matching arbitrary Python objects.Documentation is available at https://zeroSteiner.github.io/rule-engine/.:Warning:  The next minor version (3.6) will be the last to support Python versions 3.4 and 3.5. There is currently no timeline  for its release. The following version, either 3.7 or 4.0, will not suport Python versions 3.4 or 3.5.Rule Engine expressions are written in their own language, defined as strings in Python. The syntax is most similar toPython with some inspiration from Ruby. Some features of this language includes:- Optional type hinting- Matching strings with regular expressions- Datetime datatypes- Compound datatypes (equivalents for Python dict, list and set types)- Data attributes- Thread safetyExample Usage-------------The following example demonstrates the basic usage of defining a rule object and applying it to two dictionaries,showing that one matches while the other does not. See `Getting Started`_ for more information... code-block:: python   import rule_engine   # match a literal first name and applying a regex to the email   rule = rule_engine.Rule(       'first_name == &quot;Luke&quot; and email =~ &quot;.*@rebels.org$&quot;'   ) # =&gt; &lt;Rule text='first_name == &quot;Luke&quot; and email =~ &quot;.*@rebels.org$&quot;' &gt;   rule.matches({       'first_name': 'Luke', 'last_name': 'Skywalker', 'email': 'luke@rebels.org'   }) # =&gt; True   rule.matches({      'first_name': 'Darth', 'last_name': 'Vader', 'email': 'dvader@empire.net'   }) # =&gt; FalseThe next example demonstrates the optional type system. A custom context is created that defines two symbols, one stringand one float. Because symbols are defined, an exception will be raised if an unknown symbol is specified or an invalidoperation is used. See `Type Hinting`_ for more information... code-block:: python   import rule_engine   # define the custom context with two symbols   context = rule_engine.Context(type_resolver=rule_engine.type_resolver_from_dict({       'first_name': rule_engine.DataType.STRING,       'age': rule_engine.DataType.FLOAT   }))   # receive an error when an unknown symbol is used   rule = rule_engine.Rule('last_name == &quot;Vader&quot;', context=context)   # =&gt; SymbolResolutionError: last_name   # receive an error when an invalid operation is used   rule = rule_engine.Rule('first_name + 1', context=context)   # =&gt; EvaluationError: data type mismatchWant to give the rule expression language a try? Checkout the `Debug REPL`_ that makes experimentation easy. Afterinstalling just run ``python -m rule_engine.debug_repl``.Installation------------Install the latest release from PyPi using ``pip install rule-engine``. Releases follow `Semantic Versioning`_ toindicate in each new version whether it fixes bugs, adds features or breaks backwards compatibility. See the`Change Log`_ for a curated list of changes.Credits-------* Spencer McIntyre - zeroSteiner |social-github|License-------The Rule Engine library is released under the BSD 3-Clause license. It is able to be used for both commercial andprivate purposes. For more information, see the `LICENSE`_ file... |badge-build| image:: https://img.shields.io/github/actions/workflow/status/zeroSteiner/rule-engine/ci.yml?branch=master&amp;style=flat-square   :alt: GitHub Workflow Status (branch)   :target: https://github.com/zeroSteiner/rule-engine/actions/workflows/ci.yml.. |badge-pypi| image:: https://img.shields.io/pypi/v/rule-engine?style=flat-square   :alt: PyPI   :target: https://pypi.org/project/rule-engine/.. |social-github| image:: https://img.shields.io/github/followers/zeroSteiner?style=social   :alt: GitHub followers   :target: https://github.com/zeroSteiner.. |social-twitter| image:: https://img.shields.io/twitter/follow/zeroSteiner   :alt: Twitter Follow   :target: https://twitter.com/zeroSteiner.. _Change Log: https://zerosteiner.github.io/rule-engine/change_log.html.. _Debug REPL: https://zerosteiner.github.io/rule-engine/debug_repl.html.. _Getting Started: https://zerosteiner.github.io/rule-engine/getting_started.html.. _LICENSE: https://github.com/zeroSteiner/rule-engine/blob/master/LICENSE.. _Semantic Versioning: https://semver.org/.. _Type Hinting: https://zerosteiner.github.io/rule-engine/getting_started.html#type-hinting</longdescription>
</pkgmetadata>