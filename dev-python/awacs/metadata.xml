<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====awacs=====.. image:: https://img.shields.io/pypi/v/awacs.svg    :target: https://pypi.python.org/pypi/awacs.. image:: https://travis-ci.org/cloudtools/awacs.png?branch=master    :target: https://travis-ci.org/cloudtools/awacs.. image:: https://img.shields.io/pypi/l/awacs.svg    :target: https://opensource.org/licenses/BSD-2-ClauseAbout=====awacs - Amazon Web Access Control SubsystemThe awacs library allows for easier creation of AWS Access PolicyLanguage JSON by writing Python code to describe the AWS policies.To facilitate catching  policy format or JSON errors early thelibrary has property and type checking built into the classes.**NOTE:** The old *awacs.aws.Policy* object is going to be deprecated in thefuture, in preference for the *awacs.aws.PolicyDocument* class. This is dueto confusion that arises between the old object and *troposphere.iam.Policy*objects.Installation============awacs can be installed using the pip distribution system for python byissuing:.. code-block:: sh  $ pip install awacsAlternatively, you can run use setup.py to install by cloning this repositoryand issuing:.. code-block:: sh  $ python setup.py installExamples========An example to use this comes from the `AWS IAM`_ documentation.This shows creating policy attached to an Amazon S3 bucket:.. code-block:: python  from awacs.aws import Action, Allow, PolicyDocument, Principal, Statement  from awacs.iam import ARN as IAM_ARN  from awacs.s3  import ARN as S3_ARN  account = &quot;123456789012&quot;  user = &quot;user/Bob&quot;  pd = PolicyDocument(      Version=&quot;2012-10-17&quot;,      Id=&quot;S3-Account-Permissions&quot;,      Statement=[          Statement(              Sid=&quot;1&quot;,              Effect=Allow,              Principal=Principal(&quot;AWS&quot;, [IAM_ARN(user, '', account)]),              Action=[Action(&quot;s3&quot;, &quot;*&quot;)],              Resource=[S3_ARN(&quot;my_corporate_bucket/*&quot;),],          ),      ],  )  print(pd.to_json())would produce this json policy:.. code-block:: json  {      &quot;Id&quot;: &quot;S3-Account-Permissions&quot;,       &quot;Statement&quot;: [          {              &quot;Action&quot;: [                  &quot;s3:*&quot;              ],               &quot;Effect&quot;: &quot;Allow&quot;,               &quot;Principal&quot;: [                  {                      &quot;AWS&quot;: [                          &quot;arn:aws:iam::123456789012:user/Bob&quot;                      ]                  }              ],               &quot;Resource&quot;: [                  &quot;arn:aws:s3:::my_corporate_bucket/*&quot;              ],               &quot;Sid&quot;: &quot;1&quot;          }      ],       &quot;Version&quot;: &quot;2012-10-17&quot;  }Community=========We have a google group, cloudtools-dev_, where you can ask questions andengage with the cloudtools/awacs community.  Issues &amp; pull requests are alwayswelcome!.. _`AWS IAM`: http://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html.. _cloudtools-dev: https://groups.google.com/forum/#!forum/cloudtools-devContributing new actions========================To update actions there is a generator tool which will scrape policies fromAWS's documentation resource and auto-generate new files.The following commands can be run (with Python 3.7+) to update the repo:.. code-block:: sh  $ python3 -m pip install -r scrape/requirements.txt  $ python3 -m pip install .  $ python3 ./scrape/scrape.py  $ git diff</longdescription>
</pkgmetadata>