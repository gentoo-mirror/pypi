<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># freddyProvides randomized json data (samples) that complies with a givenschema.Works both for json schema and pydantic models.## Usage### pydantic```pythonimport datetimefrom pprint import pprintfrom typing import List, Optionalfrom pydantic import BaseModel, Fieldimport freddyclass User(BaseModel):    id: int    name = 'John Doe'    signup_ts: Optional[datetime.datetime] = None    friends: List[int] = []    pattern_field: str = Field(..., regex=r&quot;^[-_a-zA-Z0-9]+$&quot;)sample = freddy.sample(User)pprint(sample){'id': 452, 'signup_ts': '1903-03-12T20:20:00', 'friends': [675, 408], 'pattern_field': 'EUvKs7BIK-Ne', 'name': 'xfphlync'}User.validate(sample)User(id=452, signup_ts=datetime.datetime(1903, 3, 12, 20, 20), friends=[675, 408], pattern_field='EUvKs7BIK-Ne', name='xfphlync')```### jsonschema```pythonfrom pprint import pprintimport jsonschemaimport freddyfamily_schema = {    &quot;type&quot;: &quot;array&quot;,    &quot;items&quot;: {        &quot;properties&quot;: {            &quot;member&quot;: {&quot;$ref&quot;: &quot;#/definitions/person&quot;},            &quot;role&quot;: {&quot;$ref&quot;: &quot;#/definitions/role&quot;},        },        &quot;type&quot;: &quot;object&quot;,    },    &quot;maxItems&quot;: 5,    &quot;minItems&quot;: 1,    &quot;definitions&quot;: {        &quot;person&quot;: {            &quot;properties&quot;: {                &quot;age&quot;: {&quot;type&quot;: &quot;integer&quot;},                &quot;name&quot;: {&quot;type&quot;: &quot;string&quot;},                &quot;pets&quot;: {                    &quot;items&quot;: {&quot;$ref&quot;: &quot;#/definitions/pet&quot;},                    &quot;maxItems&quot;: 2,                    &quot;type&quot;: &quot;array&quot;,                },            },            &quot;type&quot;: &quot;object&quot;,        },        &quot;pet&quot;: {            &quot;properties&quot;: {                &quot;kind&quot;: {&quot;enum&quot;: [&quot;dog&quot;, &quot;cat&quot;], &quot;type&quot;: &quot;string&quot;},                &quot;name&quot;: {&quot;type&quot;: &quot;string&quot;},            },            &quot;type&quot;: &quot;object&quot;,        },        &quot;role&quot;: {            &quot;enum&quot;: [                &quot;father&quot;,                &quot;mather&quot;,                &quot;son&quot;,                &quot;daughter&quot;,                &quot;aunt&quot;,                &quot;grandma&quot;,                &quot;grandpa&quot;,            ],            &quot;type&quot;: &quot;string&quot;,        },    }}# Get 10 random samplesfor i in range(10):    sample_family = freddy.sample(family_schema)    # Validate against schema    jsonschema.validate(sample_family, family_schema)pprint(sample_family)[    {&quot;member&quot;: {&quot;age&quot;: 77, &quot;name&quot;: &quot;k&quot;, &quot;pets&quot;: []}, &quot;role&quot;: &quot;grandma&quot;},    {&quot;member&quot;: {&quot;age&quot;: 64, &quot;name&quot;: &quot;naifvxf&quot;, &quot;pets&quot;: []}, &quot;role&quot;: &quot;grandpa&quot;},    {        &quot;member&quot;: {            &quot;age&quot;: 23,            &quot;name&quot;: &quot;itruydotrj&quot;,            &quot;pets&quot;: [{&quot;kind&quot;: &quot;cat&quot;, &quot;name&quot;: &quot;o&quot;}, {&quot;kind&quot;: &quot;cat&quot;, &quot;name&quot;: &quot;uonmvfgd&quot;}],        },        &quot;role&quot;: &quot;son&quot;,    },]```## Install``` shellpip install freddy```## Development``` shell# Clone the repogit@github.com:lferran/freddy.gitcd freddymake develop# Run testsmake tests```## JSON Schema supportConforms to JSON Schema Draft 7. The following features are supported:- [x] boolean type- [x] null type- [x] string type- [x] number type- [x] integer type- [x] array type- [x] object type- [x] definitions/references- [x] Boolean type- [x] consts- [x] `exclusiveMinimum` and `exclusiveMaximum` in integers and      numbers.- [x] number `multipleOf` keyword- [x] string `pattern` regex keyword- [ ] `required` keyword- [ ] `additionalProperties`- [ ] all string built-in formats- [ ] be able to provide custom basic type factories- [ ] multiple types: `{&quot;type&quot;: [&quot;string&quot;, &quot;array&quot;]}`- [ ] look into `allOf`: generate multiple objects + mergeDoes not support:- ID referencing- `allOf` and `not` keywords- conditional keywords `if`, `then` and `else`- `patternProperties` on objects- property and schema `dependencies` on objects.</longdescription>
</pkgmetadata>