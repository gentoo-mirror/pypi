<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>django-capture-tag==================.. image:: https://img.shields.io/travis/edoburu/django-capture-tag/master.svg?branch=master    :target: http://travis-ci.org/edoburu/django-capture-tag.. image:: https://img.shields.io/pypi/v/django-capture-tag.svg    :target: https://pypi.python.org/pypi/django-capture-tag/.. image:: https://img.shields.io/pypi/dm/django-capture-tag.svg    :target: https://pypi.python.org/pypi/django-capture-tag/.. image:: https://img.shields.io/badge/wheel-yes-green.svg    :target: https://pypi.python.org/pypi/django-capture-tag/.. image:: https://img.shields.io/pypi/l/django-capture-tag.svg    :target: https://pypi.python.org/pypi/django-capture-tag/.. image:: https://img.shields.io/codecov/c/github/edoburu/django-capture-tag/master.svg    :target: https://codecov.io/github/edoburu/django-capture-tag?branch=masterA micro-library to capture output in Django templates.This can be useful for example to:* Repeat page titles in web pages, e.g. for the ``&lt;title&gt;`` tag and breadcrumb.* Repeat contents for Social Media tags.* Reusing thumbnail output in multiple places.* Fetch configuration data from extended templates.Installation------------Install the module from PyPI:.. code-block:: bash    pip install django-capture-tagAdd the package to ``INSTALLED_APPS``:.. code-block:: python    INSTALLED_APPS += (        'capture_tag',    )Load the tag in your template:.. code-block:: html+django    {% load capture_tags %}Syntax------The following options are available:.. code-block:: html+django    {% capture %}...{% endcapture %}                    # output in {{ capture }}    {% capture silent %}...{% endcapture %}             # output in {{ capture }} only    {% capture as varname %}...{% endcapture %}         # output in {{ varname }}    {% capture as varname silent %}...{% endcapture %}  # output in {{ varname }} onlyExample usage-------------To capture Social Media tags:.. code-block:: html+django    {% load capture_tags %}    &lt;head&gt;        ...        {# Allow templates to override the page title/description #}        &lt;meta name=&quot;description&quot; content=&quot;{% capture as meta_description %}{% block meta-description %}{% endblock %}{% endcapture %}&quot; /&gt;        &lt;title&gt;{% capture as meta_title %}{% block meta-title %}Untitled{% endblock %}{% endcapture %}&lt;/title&gt;        {# display the same value as default, but allow templates to override it. #}        &lt;meta property=&quot;og:description&quot; content=&quot;{% block og-description %}{{ meta_description }}{% endblock %}&quot; /&gt;        &lt;meta name=&quot;twitter:title&quot; content=&quot;{% block twitter-title %}{{ meta_title }}{% endblock %}&quot; /&gt;    &lt;/head&gt;Take configuration from extended templates:.. code-block:: html+django    # base.html    {% load capture_tags %}    # read once    {% capture as home_url silent %}{% block home_url %}{% url 'app:index' %}{% endblock %}{% endcapture %}    # reuse twice.    &lt;a href=&quot;{{ home_url }}&quot; class=&quot;btn page-top&quot;&gt;Back to home&lt;/a&gt;    &lt;a href=&quot;{{ home_url }}&quot; class=&quot;btn page-bottom&quot;&gt;Back to home&lt;/a&gt;    # child.html    {% extends &quot;base.html&quot; %}    {% block home_url %}{% url 'user:profile' %}{% endblock %}Notice~~~~~~When a value is used only once, this package is not needed.In such case, simply place the ``{% block .. %}`` at the proper location where contents is replaced.All common Django template tags support the ``as variable`` syntax,such as ``{% url 'app:index' as home_url %}`` or ``{% trans &quot;Foo&quot; as foo_label %}``.</longdescription>
</pkgmetadata>