<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># purerpc&lt;!--  --&gt;_purerpc_ is a native, async Python gRPC client and server implementation supporting[asyncio](https://docs.python.org/3/library/asyncio.html),[uvloop](https://github.com/MagicStack/uvloop), and[trio](https://github.com/python-trio/trio) (achieved with [anyio](https://github.com/agronholm/anyio) compatibility layer).This project is in maintenance mode.  Updates will primarily be limited to fixingsevere bugs, keeping the package usable for actively developed projects, andeasing maintenance.For use cases limited to asyncio, consider the Python package published by themain [grpc](https://github.com/grpc/grpc) project instead.## Requirements* CPython &gt;= 3.7* PyPy &gt;= 3.7## InstallationLatest PyPI version:```bashpip install purerpc[grpc]```NOTE: for PyPy, replace &quot;grpc&quot; with &quot;grpc-pypy&quot;.  Support is tentative, as  [grpc does not officially support PyPy](https://github.com/grpc/grpc/issues/4221).Latest development version:```bashpip install git+https://github.com/python-trio/purerpc.git[grpc]```These invocations will include dependencies for the grpc runtime andgeneration of service stubs.To install extra dependencies for running tests or examples, using the`test_utils` module, etc., apply the `[dev]` suffix (e.g.`pip install purerpc[dev]`).## protoc pluginpurerpc adds `protoc-gen-purerpc` plugin for `protoc` to your `PATH` environment variableso you can use it to generate service definition and stubs: ```bashprotoc --purerpc_out=. --python_out=. -I. greeter.proto```or, if you installed the `grpcio-tools` Python package:```bashpython -m grpc_tools.protoc --purerpc_out=. --python_out=. -I. greeter.proto```## UsageNOTE: `greeter_grpc` module is generated by purerpc's `protoc-gen-purerpc` plugin.### Server```pythonfrom purerpc import Serverfrom greeter_pb2 import HelloRequest, HelloReplyfrom greeter_grpc import GreeterServicerclass Greeter(GreeterServicer):    async def SayHello(self, message):        return HelloReply(message=&quot;Hello, &quot; + message.name)    async def SayHelloToMany(self, input_messages):        async for message in input_messages:            yield HelloReply(message=f&quot;Hello, {message.name}&quot;)if __name__ == '__main__':    server = Server(50055)    server.add_service(Greeter().service)    # NOTE: if you already have an async loop running, use &quot;await server.serve_async()&quot;    import anyio    anyio.run(server.serve_async)  # or set explicit backend=&quot;asyncio&quot; or &quot;trio&quot;```### Client```pythonimport purerpcfrom greeter_pb2 import HelloRequest, HelloReplyfrom greeter_grpc import GreeterStubasync def gen():    for i in range(5):        yield HelloRequest(name=str(i))async def listen():    async with purerpc.insecure_channel(&quot;localhost&quot;, 50055) as channel:        stub = GreeterStub(channel)        reply = await stub.SayHello(HelloRequest(name=&quot;World&quot;))        print(reply.message)        async for reply in stub.SayHelloToMany(gen()):            print(reply.message)if __name__ == '__main__':    # NOTE: if you already have an async loop running, use &quot;await listen()&quot;    import anyio    anyio.run(listen)  # or set explicit backend=&quot;asyncio&quot; or &quot;trio&quot;```You can mix server and client code, for example make a server that requests something using purerpc from another gRPC server, etc.More examples in `misc/` folder# Project historypurerpc was originally written by [Andrew Stepanov](https://github.com/standy66)and used the curio async event loop.  Later itwas migrated to the [anyio](https://github.com/agronholm/anyio) API, supportingasyncio, curio, uvloop, and trio (though curio support has since been droppedfrom the API).After going a few years unmaintained, the project was adopted by the [python-trioorganization](https://github.com/python-trio) with the intent of ensuring acontinued gRPC solution for Trio users.</longdescription>
</pkgmetadata>