<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Qlik SDKQlik's Python SDK allows you to leverage the APIs of Qlik Cloud platform from the comfort of python.---- [qlik-sdk-python](#qlik-sdk-python)  - [Install](#install)  - [Getting started](#getting-started)  - [Authentication options](#authentication-options)    - [API keys](#api-keys)  - [Changelog](#changelog)  - [Contributing](#contributing)    - [Bugs](#bugs)    - [Features](#features)    - [Developing](#developing)  - [Examples](#examples)    - [apps_items.py](#apps_itemspy)    - [flask_oauth.py](#flask_oauthpy)    - [import_export.py](#import_exportpy)    - [rpc basics example_custom_type.py](#rpc-basics-example_custom_typepy)    - [rpc basics lists app_object_list app_object_list.py](#rpc-basics-lists-app_object_list-app_object_listpy)    - [rpc basics lists field_list field_list.py](#rpc-basics-lists-field_list-field_listpy)    - [rpc basics lists variable_list variable_list.py](#rpc-basics-lists-variable_list-variable_listpy)    - [rpc data hypercubes pivot hypercube_pivot.py](#rpc-data-hypercubes-pivot-hypercube_pivotpy)    - [rpc data hypercubes stacked hypercube_stacked.py](#rpc-data-hypercubes-stacked-hypercube_stackedpy)    - [rpc data hypercubes straight hypercube_straight.py](#rpc-data-hypercubes-straight-hypercube_straightpy)    - [rpc rpc.py](#rpc-rpcpy)---## Install```bashpython3 -m pip install --upgrade qlik-sdk```## Getting startedThe lowest supported python version is `3.8`.A good place to start is our [examples](./examples/). Take a look and learn how to authorize and use our REST and RPC clients to access the APIs. If you're in a real hurry, the essence of our examples is shown below.```pythonfrom qlik_sdk import Auth, AuthType, Configapi_key = &quot;&lt;MY_API_KEY&gt;&quot;base_url = &quot;&lt;URL_TO_MY_TENANT&gt;&quot; # E.g. https://foo.qlikcloud.eu.comq = Qlik(config=Config(host=base_url, auth_type=AuthType.APIKey, api_key=api_key))user = q.users.get_me()print(&quot;Logged in as: &quot; + user.name)# For REST calls: auth.rest# For RPC calls: auth.rpc```## Authentication options### API keysAn API key is a token representing a user in your tenant. Anyone may interact with the platform programmatically using the API key. The token contains the user context, respecting the access control privileges the user has in your tenant. More info can be found on [Qlik Dev Portal](https://qlik.dev/basics/authentication-options#api-keys).For a step-by-step guide on how to get an API key for your tenant, check this [tutorial](https://qlik.dev/tutorials/generate-your-first-api-key).### OAuth2OAuth is a standard security protocol for authorization and delegation. It allows third party applications to access API resources without disclosing the end-user credentials.For a step-by-step guide on how to create an OAuth client for your tenant, check [Creating and managing OAuth clients](https://help.qlik.com/en-US/cloud-services/Subsystems/Hub/Content/Sense_Hub/Admin/mc-create-oauth-client.htm)```py# Authorization  # Create auth object  config = Config(        host='my-tenant.qlikcloud.com',        auth_type=AuthType.OAuth2,        client_id='&lt;clientId&gt;',        client_secret='&lt;clientSecret&gt;',        redirect_url='&lt;redirectUrl&gt;',        scope='&lt;scopes&gt;',    )  auth = Auth(config=config)  # for login redirect to authorization uri for OAuth exchange token flow  # which will call callback endpoint with credentials  redirect(auth.generate_authorization_url(), code=301)  # on callback endpoint (redirectUri), exachange the creadentials with token  auth.authorize(request.full_path)  # fetch a resource  user = auth.rest(path=&quot;/users/me&quot;)  # refreshing token  auth.refresh_token()  # deauthorization  auth.deauthorize()```## Examples### apps_items.py```pyimport osimport uuidfrom dataclasses import asdictfrom dotenv import dotenv_valuesfrom qlik_sdk import (    AppAttributes,    AppUpdateAttributes,    AuthType,    Config,    CreateApp,    Qlik,    UpdateApp,)# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this scriptfile_dir = os.path.dirname(os.path.abspath(__file__))dotenv_path = os.path.join(file_dir, &quot;.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)q = Qlik(config=config)user = q.users.get_me()print(&quot;Logged in as: &quot; + user.name)def log_req(req):    print(&quot;request:&quot;, req.method, req.url)    return reqdef log_res(res):    print(&quot;response:&quot;, res.request.method, res.request.url, &quot;-&gt;&quot;, res.status_code)    return resq.apps.auth.rest.interceptors[&quot;response&quot;].use(log_res)q.apps.auth.rest.interceptors[&quot;request&quot;].use(log_req)# The body parameter can be either an object or a dict# The recommended way is to use an object# create apps - 2 methods - dict body or obj body# create app - dict bodyrandom_app_name1 = str(uuid.uuid1())app_dict_body = q.apps.create(data={&quot;attributes&quot;: {&quot;name&quot;: random_app_name1}})app_dict_body.delete()# create app - obj bodyrandom_app_name2 = str(uuid.uuid1())app = q.apps.create(    data=CreateApp(        attributes=AppAttributes(name=random_app_name2, description=&quot;desc&quot;, spaceId=&quot;&quot;)    ),)# Convert app object to dictapp_asdict = asdict(app)# set load script, reload and evaluate expressionwith app.open():    script = &quot;Load RecNo() as N autogenerate(200);&quot;    app.set_script(script)    app.do_reload()    eval = app.evaluate(&quot;SUM([N])&quot;)    print(eval)# Set attribute# body: dictapp.set(data={&quot;attributes&quot;: {&quot;name&quot;: &quot;set-name-dict&quot;}})# body: objupdate_name = str(uuid.uuid1())app.set(    UpdateApp(        attributes=AppUpdateAttributes(description=&quot;new description&quot;, name=update_name)    ))# items list - query param nameitems0 = q.items.get_items(name=update_name)app.delete()items1 = q.items.get_items(name=update_name)# get_items using an app name query param, result-length before and after deleteprint(    f&quot;found items matching: {update_name}, before and after delete: {len(items0)}, {len(items1)}&quot;)items = q.items.get_items()first_100_item_names = []for item in items.pagination:    if len(first_100_item_names) &lt; 100:        first_100_item_names.append(item.name)    else:        break```### flask_oauth.py```pyimport osimport randomfrom dotenv import dotenv_valuesfrom flask import Flask, redirect, render_template, request# src. should be removed when example is publicfrom src.qlik_sdk import Auth, AuthType, Config# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this scriptfile_dir = os.path.dirname(os.path.abspath(__file__))dotenv_path = os.path.join(file_dir, &quot;.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER_OAUTH&quot;, False)client_id = env_values.get(&quot;CLIENT_ID_WEB&quot;, False)client_secret = env_values.get(&quot;CLIENT_SECRET_WEB&quot;, False)redirect_url = &quot;http://localhost:3000/login/callback&quot;config = Config(    host=host,    auth_type=AuthType.OAuth2,    client_id=client_id,    client_secret=client_secret,    redirect_url=redirect_url,    scope=[&quot;offline_access&quot;],)auth = Auth(config=config)app = Flask(__name__)template_data = {&quot;is_logged_in&quot;: False, &quot;user&quot;: &quot;&quot;, &quot;eval_result&quot;: &quot;&quot;}@app.route(&quot;/&quot;)def index():    try:        user = auth.rest(path=&quot;/users/me&quot;)        user = user.json()        template_data[&quot;is_logged_in&quot;] = True        template_data[&quot;user&quot;] = f&quot;User: {user['name']} is logged in&quot;    except Exception:        template_data[&quot;is_logged_in&quot;] = False        template_data[&quot;user&quot;] = &quot;&quot;    return render_template(&quot;index.html&quot;, template_data=template_data)@app.route(&quot;/login&quot;)def login():    return redirect(auth.generate_authorization_url(), code=301)@app.route(&quot;/login/callback&quot;)def callback():    auth.authorize(request.full_path)    return redirect(&quot;/&quot;, code=301)@app.route(&quot;/logout&quot;)def logout():    auth.deauthorize()    template_data[&quot;is_logged_in&quot;] = False    template_data[&quot;user&quot;] = &quot;&quot;    return redirect(&quot;/&quot;, code=301)@app.route(&quot;/refresh&quot;)def refresh():    auth.refresh_token()    return redirect(&quot;/&quot;, code=301)@app.route(&quot;/websocket&quot;)def websocket():    random_id = random.randint(1, 1000)    app_id = f&quot;SessionApp_{random_id}&quot;    try:        # Open a websocket for a session app using RpcClient        rpc_session = auth.rpc(app_id)        try:            rpc_session.open()            app_handle = (rpc_session.send(&quot;GetActiveDoc&quot;, -1))[&quot;qReturn&quot;][&quot;qHandle&quot;]            rpc_session.send(                &quot;SetScript&quot;,                app_handle,                &quot;Load RecNo() as N autogenerate(10)&quot;,            )            rpc_session.send(&quot;DoReload&quot;, app_handle)            eval_result = rpc_session.send(&quot;Evaluate&quot;, app_handle, &quot;SUM([N])&quot;)            template_data[&quot;is_logged_in&quot;] = True            template_data[&quot;eval_result&quot;] = eval_result[&quot;qReturn&quot;]        except Exception as err:            print(f&quot;rpc_session error occured: {err}&quot;)            return redirect(&quot;/&quot;, code=500)        finally:            rpc_session.close()            print(&quot;rpc_connection closed&quot;)    except Exception as err:        print(f&quot;error occured while setting up auth: {err}&quot;)        return redirect(&quot;/&quot;, code=500)    return redirect(&quot;/&quot;, code=301)if __name__ == &quot;__main__&quot;:    app.run(host=&quot;localhost&quot;, port=3000, debug=True)```### import_export.py```pyimport jsonimport osimport shutilimport uuidfrom dotenv import dotenv_valuesfrom qlik_sdk import AuthType, Config, Qlik# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this scriptfile_dir = os.path.dirname(os.path.abspath(__file__))dotenv_path = os.path.join(file_dir, &quot;.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)with open(os.path.join(file_dir, &quot;sheetListDef.json&quot;)) as json_file:    sheet_list_def = json.load(json_file)config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)q = Qlik(config=config)# Print user nameuser = q.users.get_me()print(&quot;Logged in as: &quot; + user.name)# Create a managed spacespace_name = &quot;publish-apps-sdk-test&quot; + str(uuid.uuid1())shared_space = q.spaces.create(    {        &quot;name&quot;: space_name,        &quot;description&quot;: &quot;space used for testing&quot;,        &quot;type&quot;: &quot;managed&quot;,    })print(f&quot;created space with name {space_name} and id {shared_space.id}&quot;)# Import app - (app with multiple sheets)qvf_file = os.path.join(file_dir, &quot;two-sheets.qvf&quot;)app_name = &quot;import-test&quot; + str(uuid.uuid1())with open(qvf_file, &quot;rb&quot;) as qvf_data:    imported_app = q.apps.import_app(data=qvf_data, name=app_name)print(f&quot;imported app with name {app_name} and id {imported_app.attributes.id}&quot;)# Publish each sheetprint(f&quot;open app with id {imported_app.attributes.id} and publish all sheets&quot;)with imported_app.open():    session_obj = imported_app.create_session_object(sheet_list_def)    sheet_list_layout = session_obj.get_layout()    sheet_id_list = [q.qInfo.qId for q in sheet_list_layout.qAppObjectList.qItems]    for sheet_id in sheet_id_list:        print(f&quot;publishing sheet with id {sheet_id}&quot;)        sheet_obj = imported_app.get_object(sheet_id)        sheet_obj.publish()# Publish the appprint(    f&quot;publish app with id {imported_app.attributes.id} to space with id {shared_space.id}&quot;)published_app = imported_app.publish({&quot;spaceId&quot;: shared_space.id})print(f&quot;published app id {published_app.attributes.id}&quot;)# export applocal_filename = f&quot;exported{uuid.uuid1()}.qvf&quot;temp_contents_url = imported_app.export()# download app streaming to filewith q.auth.rest(path=temp_contents_url, method=&quot;get&quot;, stream=True) as r:    with open(local_filename, &quot;wb&quot;) as f:        shutil.copyfileobj(r.raw, f)print(f&quot;Exported {published_app.attributes.name} to {local_filename}&quot;)ext_file_path = env_values.get(&quot;EXTENSION_ZIP_PATH&quot;, False)# Upload extensionwith open(ext_file_path, &quot;rb&quot;) as ext_file:    ext = q.extensions.create(file=ext_file)# TODO# set properties - change sheet name# upload theme# apply themes on the app# import datafiles# Delete everything createdprint(&quot;cleaning up&quot;)ext.delete()imported_app.delete()published_app.delete()shared_space.delete()os.remove(local_filename)```### rpc basics example_custom_type.py```pyimport osimport sysimport uuidfrom dotenv import dotenv_valuesfrom qlik_sdk import Apps, Auth, AuthType, Config# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this scriptfile_dir = os.path.dirname(os.path.abspath(__file__))dotenv_path = os.path.join(file_dir, &quot;../../.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)auth = Auth(config)apps = Apps(config)session_app_id = &quot;SessionApp_&quot; + str(uuid.uuid1())session_app = apps.create_session_app(session_app_id)with session_app.open():    # create a generic object of a custom type    properties = {        &quot;qInfo&quot;: {&quot;qType&quot;: &quot;custom-object&quot;},    }    obj = session_app.create_session_object(properties)    # set a custom property i.e. a property not defined in GenericObjectProperties    properties[&quot;CustomProperty&quot;] = &quot;custom-property-value&quot;    obj.set_properties(properties)    # fetch the properties and validate that the custom property is returned    new_props = obj.get_properties()    if new_props.qInfo.qType != &quot;custom-object&quot;:        sys.exit(1)    if new_props.CustomProperty != &quot;custom-property-value&quot;:        sys.exit(1)```### rpc basics lists app_object_list app_object_list.py```pyimport osimport sysimport uuidfrom dotenv import dotenv_valuesfrom src.qlik_sdk import Apps, AuthType, Config, GenericObjectPropertiesfrom src.qlik_sdk.apis.Apps import JsonObjectfrom src.qlik_sdk.apis.Qix import AppObjectListDef, NxInfoclass CustomObjectProperties(GenericObjectProperties):    meta: dict[str, str] = Nonedef list_app_objects():    # get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script    file_dir = os.path.abspath(&quot;&quot;)    dotenv_path = os.path.join(file_dir + &quot;/examples&quot;, &quot;.env&quot;)    if not os.path.exists(dotenv_path):        print(&quot;Missing .env file: &quot; + dotenv_path)    env_values = dotenv_values(dotenv_path=dotenv_path)    host = env_values.get(&quot;QCS_SERVER&quot;, False)    api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)    config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)    apps = Apps(config)    session_app_id = &quot;SessionApp_&quot; + str(uuid.uuid1())    session_app = apps.create_session_app(session_app_id)    with session_app.open():        for i in range(10):            properties = CustomObjectProperties(                qInfo=NxInfo(qType=&quot;my-object&quot;),                meta=dict({&quot;title&quot;: f&quot;my-object-{i}&quot;}),            )            session_app.create_object(properties)        list_properties = GenericObjectProperties(            qInfo=NxInfo(qType=&quot;my-list&quot;),            qAppObjectListDef=AppObjectListDef(                qType=&quot;my-object&quot;, qData=JsonObject(title=&quot;/meta/title&quot;)            ),        )        try:            object = session_app.create_object(qProp=list_properties)            layout = object.get_layout()            return layout.qAppObjectList.qItems.__len__()        except ValueError as e:            print(e.__class__)if list_app_objects() != 10:    print(&quot;Error in number of objects .....&quot;)    sys.exit(1)```### rpc basics lists field_list field_list.py```pyimport osimport sysimport uuidfrom dotenv import dotenv_valuesfrom src.qlik_sdk import Apps, AuthType, Config, GenericObjectPropertiesfrom src.qlik_sdk.apis.Qix import FieldListDef, NxInfoscript = &quot;&quot;&quot;TempTable:LoadRecNo() as Field1,Rand() as Field2,Rand() as Field3AutoGenerate 100&quot;&quot;&quot;# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this scriptfile_dir = os.path.abspath(&quot;&quot;)dotenv_path = os.path.join(file_dir + &quot;/examples&quot;, &quot;.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)apps = Apps(config)session_app_id = &quot;SessionApp_&quot; + str(uuid.uuid1())session_app = apps.create_session_app(session_app_id)with session_app.open():    # Load in some data into the session document:    session_app.set_script(script)    session_app.do_reload()    # Create a field list using qFieldListDef and list all fields available in the document.    object = session_app.create_session_object(        GenericObjectProperties(            qInfo=NxInfo(qType=&quot;my-field-list&quot;),            qFieldListDef=FieldListDef(),        )    )    layout = object.get_layout()    print(&quot;field-list &quot;, layout.qFieldList.qItems)    items = layout.qFieldList.qItems    if (        items.__len__() != 3        or items[0].qName != &quot;Field1&quot;        or items[1].qName != &quot;Field2&quot;        or items[2].qName != &quot;Field3&quot;    ):        print(&quot;Error generated qFieldsLists ......&quot;)        sys.exit(1)```### rpc basics lists variable_list variable_list.py```pyimport osimport sysimport uuidfrom dotenv import dotenv_valuesfrom src.qlik_sdk import Apps, AuthType, Config, GenericObjectPropertiesfrom src.qlik_sdk.apis.Apps import JsonObjectfrom src.qlik_sdk.apis.Qix import NxInfo, VariableListDefscript = &quot;&quot;&quot;TempTable:LoadRecNo() as Field1,Rand() as Field2,Rand() as Field3AutoGenerate 100&quot;&quot;&quot;# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this scriptfile_dir = os.path.abspath(&quot;&quot;)dotenv_path = os.path.join(file_dir + &quot;/examples&quot;, &quot;.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)apps = Apps(config)session_app_id = &quot;SessionApp_&quot; + str(uuid.uuid1())session_app = apps.create_session_app(session_app_id)with session_app.open():    # Load in some data into the session document:    session_app.set_script(script)    session_app.do_reload()    session_app.create_variable_ex(        GenericObjectProperties(            qInfo=NxInfo(qType=&quot;variable&quot;),            qComment=&quot;sample comment&quot;,            qDefinition=&quot;=Count(Field1)&quot;,            qName=&quot;vVariableName&quot;,        )    )    variable = session_app.get_variable_by_id(&quot;vVariableName&quot;)    object = session_app.create_session_object(        GenericObjectProperties(            qInfo=NxInfo(qType=&quot;VariableList&quot;),            qVariableListDef=VariableListDef(                qType=&quot;variable&quot;,                qData=JsonObject(tags=&quot;/tags&quot;),                qShowSession=True,                qShowConfig=True,                qShowReserved=True,            ),        )    )    layout = object.get_layout()    layout.qVariableList.qItems    print(&quot;variable-list: &quot;, layout.qVariableList.qItems)    for item in layout.qVariableList.qItems:        if item.qName == &quot;vVariableName&quot;:            sys.exit(0)    sys.exit(1)```### rpc data hypercubes pivot hypercube_pivot.py```pyimport osimport sysimport uuidfrom dotenv import dotenv_valuesfrom src.qlik_sdk import Apps, AuthType, Configfrom src.qlik_sdk.apis.Qix import (    GenericObjectProperties,    HyperCubeDef,    NxDimension,    NxInfo,    NxInlineDimensionDef,    NxInlineMeasureDef,    NxMeasure,    NxPage,    NxSelectionCell,)script = &quot;&quot;&quot;TempTable:LoadRecNo() as ID,RecNo()+1 as ID2,Rand() as ValueAutoGenerate 100&quot;&quot;&quot;# get QCS_SERVER and QCS_API_KEY from .env filefile_dir = os.path.dirname(os.path.abspath(__file__))dotenv_path = os.path.join(file_dir, &quot;../../../../.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)apps = Apps(config)session_app_id = &quot;SessionApp_&quot; + str(uuid.uuid1())session_app = apps.create_session_app(session_app_id)with session_app.open():    # Load in some data into the session document:    session_app.set_script(script)    session_app.do_reload()    obj = session_app.create_object(        GenericObjectProperties(            qInfo=NxInfo(qType=&quot;my-pivot-hypercube&quot;),            qHyperCubeDef=HyperCubeDef(                qDimensions=[                    NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[&quot;ID&quot;])),                    NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[&quot;ID2&quot;])),                ],                qMeasures=[                    NxMeasure(                        qDef=NxInlineMeasureDef(                            qDef=&quot;Sum(Value)&quot;,                        )                    )                ],                qMode=&quot;EQ_DATA_MODE_PIVOT&quot;,                qAlwaysFullyExpanded=True,            ),        )    )    data = obj.get_hyper_cube_pivot_data(        &quot;/qHyperCubeDef&quot;,        [            NxPage(                qHeight=5,                qLeft=0,                qTop=0,                qWidth=2,            )        ],    )    print(&quot;HyperCude object data: &quot;, data)    obj.select_pivot_cells(        &quot;/qHyperCubeDef&quot;, [NxSelectionCell(qType=&quot;D&quot;, qRow=1, qCol=0)], False, False    )    data = obj.get_hyper_cube_pivot_data(        &quot;/qHyperCubeDef&quot;,        [            NxPage(                qHeight=5,                qLeft=0,                qTop=0,                qWidth=2,            )        ],    )    print(&quot;Hypercube data pages after selection: &quot;, data)    if not (        len(data) == 1        and len(data[0].qData) == 1        and len(data[0].qTop) == 1        and data[0].qTop[0].qText == &quot;Sum(Value)&quot;    ):        print(&quot;Error in generated stack pages ......&quot;)        sys.exit(1)```### rpc data hypercubes stacked hypercube_stacked.py```pyimport osimport sysimport uuidfrom dotenv import dotenv_valuesfrom src.qlik_sdk import Apps, AuthType, Configfrom src.qlik_sdk.apis.Qix import (    GenericObjectProperties,    HyperCubeDef,    NxDimension,    NxInfo,    NxInlineDimensionDef,    NxInlineMeasureDef,    NxMeasure,    NxPage,    NxSelectionCell,)script = &quot;&quot;&quot;TempTable:LoadRecNo() as ID,RecNo()+1 as ID2,Rand() as ValueAutoGenerate 100&quot;&quot;&quot;# get QCS_SERVER and QCS_API_KEY from .env filefile_dir = os.path.dirname(os.path.abspath(__file__))dotenv_path = os.path.join(file_dir, &quot;../../../../.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)apps = Apps(config)session_app_id = &quot;SessionApp_&quot; + str(uuid.uuid1())session_app = apps.create_session_app(session_app_id)with session_app.open():    # Load in some data into the session document:    session_app.set_script(script)    session_app.do_reload()    obj = session_app.create_object(        GenericObjectProperties(            qInfo=NxInfo(                qType=&quot;my-stacked-hypercube&quot;,            ),            qHyperCubeDef=HyperCubeDef(                qDimensions=[                    NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[&quot;ID&quot;])),                    NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[&quot;ID2&quot;])),                ],                qMeasures=[                    NxMeasure(                        qDef=NxInlineMeasureDef(                            qDef=&quot;Sum(Value)&quot;,                        )                    )                ],                qMode=&quot;EQ_DATA_MODE_PIVOT_STACK&quot;,                qAlwaysFullyExpanded=True,            ),        )    )    data = obj.get_hyper_cube_stack_data(        &quot;/qHyperCubeDef&quot;,        [            NxPage(                qHeight=5,                qLeft=0,                qTop=0,                qWidth=2,            )        ],        10000,    )    print(&quot;HyperCude stack data: &quot;, data)    obj.select_pivot_cells(        &quot;/qHyperCubeDef&quot;,        [            NxSelectionCell(                qType=&quot;D&quot;,                qRow=1,                qCol=0,            )        ],        False,        False,    )    data = obj.get_hyper_cube_stack_data(        &quot;/qHyperCubeDef&quot;,        [            NxPage(                qHeight=5,                qLeft=0,                qTop=0,                qWidth=2,            )        ],        10000,    )    print(&quot;Hypercube stack data pages after selection: &quot;, data)    if not (        len(data) == 1        and len(data[0].qData) == 1        and len(data[0].qData[0].qSubNodes) == 1        and len(data[0].qData[0].qSubNodes[0].qSubNodes) == 1    ):        print(&quot;Error in generated stack pages ......&quot;)        sys.exit(1)```### rpc data hypercubes straight hypercube_straight.py```pyimport osimport sysimport uuidfrom dotenv import dotenv_valuesfrom src.qlik_sdk import Apps, AuthType, Configfrom src.qlik_sdk.apis.Qix import (    GenericObjectProperties,    HyperCubeDef,    NxDimension,    NxInfo,    NxInlineDimensionDef,    NxInlineMeasureDef,    NxMeasure,    NxPage,)script = &quot;&quot;&quot;TempTable:LoadRecNo() as ID,Rand() as ValueAutoGenerate 100&quot;&quot;&quot;# get QCS_SERVER and QCS_API_KEY from .env filefile_dir = os.path.dirname(os.path.abspath(__file__))dotenv_path = os.path.join(file_dir, &quot;../../../../.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)apps = Apps(config)session_app_id = &quot;SessionApp_&quot; + str(uuid.uuid1())session_app = apps.create_session_app(session_app_id)with session_app.open():    # Load in some data into the session document:    session_app.set_script(script)    session_app.do_reload()    obj = session_app.create_object(        GenericObjectProperties(            qInfo=NxInfo(                qType=&quot;my-straight-hypercube&quot;,            ),            qHyperCubeDef=HyperCubeDef(                qDimensions=[NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[&quot;ID&quot;]))],                qMeasures=[                    NxMeasure(                        qDef=NxInlineMeasureDef(                            qDef=&quot;=Sum(Value)&quot;,                        )                    )                ],                qInitialDataFetch=[NxPage(qHeight=5, qWidth=2)],            ),        )    )    layout = obj.get_layout()    print(&quot;Hypercube data pages: &quot;, layout)    data = obj.select_hyper_cube_cells(&quot;/qHyperCubeDef&quot;, [0, 2, 4], [0], False, False)    print(&quot;After selection (notice the `qState` values)&quot;)    print(&quot;HyperCude object data: &quot;, data)    layout = obj.get_layout()    print(layout)    if not (        len(layout.qHyperCube.qDimensionInfo[0].qGroupFieldDefs) == 1        and layout.qHyperCube.qDimensionInfo[0].qGroupFieldDefs[0] == &quot;ID&quot;        and layout.qInfo.qType == &quot;my-straight-hypercube&quot;    ):        print(&quot;Error in generated layout ......&quot;)        sys.exit(1)```### rpc rpc.py```pyimport osimport uuidfrom dotenv import dotenv_valuesfrom qlik_sdk import Auth, AuthType, Config, Qlikfrom qlik_sdk.rpc import RequestObject# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this scriptfile_dir = os.path.dirname(os.path.abspath(__file__))dotenv_path = os.path.join(file_dir, &quot;../.env&quot;)if not os.path.exists(dotenv_path):    print(&quot;Missing .env file: &quot; + dotenv_path)env_values = dotenv_values(dotenv_path=dotenv_path)host = env_values.get(&quot;QCS_SERVER&quot;, False)api_key = env_values.get(&quot;QCS_API_KEY&quot;, False)auth = Auth(Config(host=host, auth_type=AuthType.APIKey, api_key=api_key))q = Qlik(Config(host=host, auth_type=AuthType.APIKey, api_key=api_key))def log_request_interceptor(request: RequestObject) -&gt; RequestObject:    print(&quot;request: &quot; + str(request))    return requestdef log_qreturn_response_interceptor(response):    if &quot;result&quot; in response and &quot;qReturn&quot; in response[&quot;result&quot;]:        qreturn = str(response[&quot;result&quot;][&quot;qReturn&quot;])        print(f&quot;qReturn: {qreturn}&quot;)    return response# register interceptorsauth.rpc.interceptors[&quot;request&quot;].use(log_request_interceptor)auth.rpc.interceptors[&quot;response&quot;].use(log_qreturn_response_interceptor)session_app_id = &quot;SessionApp_&quot; + str(uuid.uuid1())rpc_session = auth.rpc(app_id=session_app_id)with rpc_session.open() as rpc_client:    app = rpc_client.send(&quot;OpenDoc&quot;, -1, session_app_id)    handle = app[&quot;qReturn&quot;][&quot;qHandle&quot;]    script = &quot;Load RecNo() as N autogenerate(200);&quot;    # set load script and reload    rpc_client.send(&quot;SetScript&quot;, handle, script)    rpc_client.send(&quot;DoReload&quot;, handle)    # parameters can be passed without name which will be sent positional in an array    count_expr = &quot;COUNT([N])&quot;    positional_eval = rpc_client.send(&quot;Evaluate&quot;, handle, count_expr)    print(f&quot;Evaluate {count_expr} = {positional_eval}&quot;)    # parameters can also be passed with name which will be sent as an object    sum_expr = &quot;SUM([N])&quot;    keyword_eval = rpc_client.send(&quot;Evaluate&quot;, handle, qExpression=sum_expr)    print(f&quot;Evaluate {sum_expr} = {keyword_eval}&quot;)```</longdescription>
</pkgmetadata>