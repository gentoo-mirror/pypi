<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># IPParserThe IPParser Python module was created to simplify accepting IPv4 addresses, DNS names, and target / host information when creating other security or network tools. User inputs are taken and parsed to provide a list of IPv4 addresses or DNS names that can be used for iteration. If called with ```resolve=True```, ipparser will attempt to perform &quot;A&quot; record lookups and returns all IP addresses found for the host.#### Inputs:IPParser currently accepts the following user inputs:* Single IP (192.168.1.10)* IP ranges (192.168.1.1-55)* Multiple IP's (192.168.1.3,192.168.1.7,m8r0wn.com)* CIDR Ranges /8-/32 (192.168.1.0/24)* URL's (https://m8r0wn.com/demo)* IP:Port (192.168.1.1:8080)* DNS Names (m8r0wn.com)* TXT files (Containing any of the items listed)* Nmap XML Reports## Install```bashpip3 install ipparser```OR ```bashgit clone https://github.com/m8r0wn/ipparsercd ipparserpython3 setup.py install```## Usage:The IPParser function can be called with the following arguments (shown with their default values):* ```resolve=False``` - Resolve any DNS names identified, to IPv4 addresses, and append to output.* ```open_ports=False``` - Return IP:Port notation for all open ports found (Nmap XML only)* ```silent=False``` - Do not show errors while parsing.* ```exit_on_error=True``` - Exit on errors found while parsing user input.* ```debug=False``` - Show input classification for debugging.## Examples```python&gt;&gt;&gt; from ipparser import ipparser&gt;&gt;&gt; ipparser('192.168.1.3-5')['192.168.1.3', '192.168.1.4', '192.168.1.5']&gt;&gt;&gt; ipparser('yahoo.com',resolve=True)['98.138.219.232', '98.138.219.231', '72.30.35.9', '72.30.35.10', '98.137.246.7', '98.137.246.8']&gt;&gt;&gt; ipparser('example', resolve=True, exit_on_error=False)IPParser Error: Invalid or unsupported input provided 'example'&gt;&gt;&gt; ipparser('192.168.1.1,yahoo.com')['192.168.1.1', 'yahoo.com']ipparser('192.168.1.1,yahoo.com,example', resolve=True, exit_on_error=False)IPParser Error: Invalid or unsupported input provided 'example'['192.168.1.1', '98.138.219.231', '98.137.246.8', '98.137.246.7', '72.30.35.9', '98.138.219.232', '72.30.35.10']&gt;&gt;&gt; ipparser('192.168.1.1,yahoo.com,example', resolve=True, silent=True)['192.168.1.1', '72.30.35.10', '98.138.219.231', '98.137.246.7', '98.137.246.8', '72.30.35.9', '98.138.219.232']```## Argparse Integration* Standard Argument:```pythonfrom ipparser import ipparserfrom argparse import ArgumentParserargs = ArgumentParser(description='ipparser integration with argparse')args.add_argument('-host', dest='host', default=False, type=lambda x: ipparser(x), help='Host Input')args = args.parse_args()``````Namespace(host=['192.168.1.1'])```* Required Positional Argument (Method 1):```pythonfrom ipparser import ipparserfrom argparse import ArgumentParserargs = ArgumentParser(description='ipparser integration with argparse')args.add_argument(dest='positional_host', nargs='+', type=lambda x: ipparser(x, resolve=False), help='Host Input')args = args.parse_args()``````Namespace(positional_host=[['192.168.1.1']])```* Required Positional Argument (Method 2):```pythonfrom ipparser import ipparserfrom argparse import ArgumentParserargs = ArgumentParser(description='ipparser integration with argparse')args.add_argument(dest='positional_host', nargs='+', help='Host Input')args = args.parse_args()args.positional_host = ipparser(args.positional_host[0]) ``````positional_host=['192.168.1.1'])```* Allow user args to determine resolve setting:```pythonfrom sys import argvfrom ipparser import ipparserfrom argparse import ArgumentParserr = Falseif &quot;-r&quot; in argv:    r = Trueargs = ArgumentParser(description='ipparser integration with argparse')args.add_argument('-r', dest='resolve',action='store_true', help='Resolve input DNS hosts')args.add_argument(dest='positional_host', nargs='+', type=lambda x: ipparser(x, resolve=r), help='Host Input')args = args.parse_args()```## Sys.argv Usage* Standard Argument```pythonfrom sys import argvfrom ipparser import ipparserif &quot;-host&quot; in argv:    host = ipparser(argv[argv.index(&quot;-host&quot;) + 1])``````host = ['192.168.1.1']```* Positional Argument```pythonfrom sys import argvfrom ipparser import ipparserhost = ipparser(argv[-1])``````host = ['192.168.1.1']```## Contributors* [@darneymartin](https://github.com/darneymartin)</longdescription>
</pkgmetadata>