<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image::  https://travis-ci.org/django-polymorphic/django-polymorphic.svg?branch=master    :target: http://travis-ci.org/django-polymorphic/django-polymorphic.. image:: https://img.shields.io/pypi/v/django-polymorphic.svg    :target: https://pypi.python.org/pypi/django-polymorphic/.. image:: https://img.shields.io/codecov/c/github/django-polymorphic/django-polymorphic/master.svg    :target: https://codecov.io/github/django-polymorphic/django-polymorphic?branch=master.. image:: https://readthedocs.org/projects/django-polymorphic/badge/?version=stable    :target: https://django-polymorphic.readthedocs.io/en/stable/Polymorphic Models for Django=============================Django-polymorphic simplifies using inherited models in Django projects.When a query is made at the base model, the inherited model classes are returned.When we store models that inherit from a ``Project`` model..... code-block:: python    &gt;&gt;&gt; Project.objects.create(topic=&quot;Department Party&quot;)    &gt;&gt;&gt; ArtProject.objects.create(topic=&quot;Painting with Tim&quot;, artist=&quot;T. Turner&quot;)    &gt;&gt;&gt; ResearchProject.objects.create(topic=&quot;Swallow Aerodynamics&quot;, supervisor=&quot;Dr. Winter&quot;)...and want to retrieve all our projects, the subclassed models are returned!.. code-block:: python    &gt;&gt;&gt; Project.objects.all()    [ &lt;Project:         id 1, topic &quot;Department Party&quot;&gt;,      &lt;ArtProject:      id 2, topic &quot;Painting with Tim&quot;, artist &quot;T. Turner&quot;&gt;,      &lt;ResearchProject: id 3, topic &quot;Swallow Aerodynamics&quot;, supervisor &quot;Dr. Winter&quot;&gt; ]Using vanilla Django, we get the base class objects, which is rarely what we wanted:.. code-block:: python    &gt;&gt;&gt; Project.objects.all()    [ &lt;Project: id 1, topic &quot;Department Party&quot;&gt;,      &lt;Project: id 2, topic &quot;Painting with Tim&quot;&gt;,      &lt;Project: id 3, topic &quot;Swallow Aerodynamics&quot;&gt; ]This also works when the polymorphic model is accessed viaForeignKeys, ManyToManyFields or OneToOneFields.Features--------* Full admin integration.* ORM integration:  * support for ForeignKey, ManyToManyField, OneToOneField descriptors.  * Filtering/ordering of inherited models (``ArtProject___artist``).  * Filtering model types: ``instance_of(...)`` and ``not_instance_of(...)``  * Combining querysets of different models (``qs3 = qs1 | qs2``)  * Support for custom user-defined managers.* Uses the minumum amount of queries needed to fetch the inherited models.* Disabling polymorphic behavior when needed.While *django-polymorphic* makes subclassed models easy to use in Django,we still encourage to use them with caution. Each subclassed model will requireDjango to perform an ``INNER JOIN`` to fetch the model fields from the database.While taking this in mind, there are valid reasons for using subclassed models.That's what this library is designed for!The current release of *django-polymorphic* supports Django 2.1, 2.2, 3.0, 3.1and Python 3.5+ is supported.For older Django versions, install *django-polymorphic==1.3*.For more information, see the `documentation at Read the Docs &lt;https://django-polymorphic.readthedocs.io/&gt;`_.Installation------------Install using ``pip``\ ..... code:: bash    $ pip install django-polymorphicLicense=======Django-polymorphic uses the same license as Django (BSD-like).</longdescription>
</pkgmetadata>