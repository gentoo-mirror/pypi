<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;img src=&quot;https://docs.momentohq.com/img/logo.svg&quot; alt=&quot;logo&quot; width=&quot;400&quot;/&gt;[![project status](https://momentohq.github.io/standards-and-practices/badges/project-status-official.svg)](https://github.com/momentohq/standards-and-practices/blob/main/docs/momento-on-github.md)[![project stability](https://momentohq.github.io/standards-and-practices/badges/project-stability-stable.svg)](https://github.com/momentohq/standards-and-practices/blob/main/docs/momento-on-github.md) # Momento Python Client LibraryPython client SDK for Momento Serverless Cache: a fast, simple, pay-as-you-go caching solution withoutany of the operational overhead required by traditional caching solutions!## Getting Started :running:### Requirements- [Python 3.7](https://www.python.org/downloads/) or above is required- A Momento Auth Token is required, you can generate one using the [Momento CLI](https://github.com/momentohq/momento-cli)### ExamplesReady to dive right in? Just check out the [examples](https://github.com/momentohq/client-sdk-python/tree/main/examples) directory for complete, working examples ofhow to use the SDK.### InstallationThe [Momento SDK is available on PyPi](https://pypi.org/project/momento/). To install via pip:```bashpip install momento```### UsageThe examples below require an environment variable named MOMENTO_AUTH_TOKEN which mustbe set to a valid [Momento authentication token](https://docs.momentohq.com/docs/getting-started#obtain-an-auth-token).Python 3.10 introduced the `match` statement, which allows for [structural pattern matching on objects](https://peps.python.org/pep-0636/#adding-a-ui-matching-objects).If you are running python 3.10 or greater, here is a quickstart you can use in your own project:```pythonfrom datetime import timedeltafrom momento import CacheClient, Configurations, CredentialProviderfrom momento.responses import CacheGet, CacheSet, CreateCacheif __name__ == &quot;__main__&quot;:    cache_name = &quot;default-cache&quot;    with CacheClient(        configuration=Configurations.Laptop.v1(),        credential_provider=CredentialProvider.from_environment_variable(&quot;MOMENTO_AUTH_TOKEN&quot;),        default_ttl=timedelta(seconds=60),    ) as cache_client:        create_cache_response = cache_client.create_cache(cache_name)        match create_cache_response:            case CreateCache.CacheAlreadyExists():                print(f&quot;Cache with name: {cache_name} already exists.&quot;)            case CreateCache.Error() as error:                raise error.inner_exception        print(&quot;Setting Key: foo to Value: FOO&quot;)        set_response = cache_client.set(cache_name, &quot;foo&quot;, &quot;FOO&quot;)        match set_response:            case CacheSet.Error() as error:                raise error.inner_exception        print(&quot;Getting Key: foo&quot;)        get_response = cache_client.get(cache_name, &quot;foo&quot;)        match get_response:            case CacheGet.Hit() as hit:                print(f&quot;Look up resulted in a hit: {hit}&quot;)                print(f&quot;Looked up Value: {hit.value_string!r}&quot;)            case CacheGet.Miss():                print(&quot;Look up resulted in a: miss. This is unexpected.&quot;)            case CacheGet.Error() as error:                raise error.inner_exception```The above code uses [structural pattern matching](https://peps.python.org/pep-0636/), a feature introduced in Python 3.10.Using a Python version less than 3.10? No problem. Here is the same example compatible across all versions of Python:```pythonfrom datetime import timedeltafrom momento import CacheClient, Configurations, CredentialProviderfrom momento.responses import CacheGet, CacheSet, CreateCacheif __name__ == &quot;__main__&quot;:    cache_name = 'default-cache'    with CacheClient(configuration=Configurations.Laptop.v1(),                     credential_provider=CredentialProvider.from_environment_variable('MOMENTO_AUTH_TOKEN'),                     default_ttl=timedelta(seconds=60)                     ) as cache_client:        create_cache_response = cache_client.create_cache(cache_name)        if isinstance(create_cache_response, CreateCache.CacheAlreadyExists):            print(f&quot;Cache with name: {cache_name} already exists.&quot;)        elif isinstance(create_cache_response, CreateCache.Error):            raise create_cache_response.inner_exception        print(&quot;Setting Key: foo to Value: FOO&quot;)        set_response = cache_client.set(cache_name, 'foo', 'FOO')        if isinstance(set_response, CacheSet.Error):            raise set_response.inner_exception        print(&quot;Getting Key: foo&quot;)        get_response = cache_client.get(cache_name, 'foo')        if isinstance(get_response, CacheGet.Hit):            print(f&quot;Look up resulted in a hit: {get_response.value_string}&quot;)            print(f&quot;Looked up Value: {get_response.value_string}&quot;)        elif isinstance(get_response, CacheGet.Miss):            print(&quot;Look up resulted in a: miss. This is unexpected.&quot;)        elif isinstance(get_response, CacheGet.Error):            raise get_response.inner_exception```### LoggingTo avoid cluttering DEBUG logging with per-method logs the Momento SDK adds a TRACE logging level. This will only happenif the TRACE level does not already exist.To enable TRACE level logging you can call logging.basicConfig() before making any log statements:```pythonimport logginglogging.basicConfig(level='TRACE')```### Error HandlingComing Soon!### TuningComing Soon!----------------------------------------------------------------------------------------For more info, visit our website at [https://gomomento.com](https://gomomento.com)!</longdescription>
</pkgmetadata>