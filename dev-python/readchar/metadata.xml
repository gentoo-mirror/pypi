<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub Repository](https://img.shields.io/badge/-GitHub-%230D0D0D?logo=github&amp;labelColor=gray)](https://github.com/magmax/python-readchar)[![Latest PyPi version](https://img.shields.io/pypi/v/readchar.svg)](https://pypi.python.org/pypi/readchar)[![supported Python versions](https://img.shields.io/pypi/pyversions/readchar)](https://pypi.python.org/pypi/readchar)[![Project licence](https://img.shields.io/pypi/l/readchar?color=blue)](LICENCE) &lt;br&gt;[![Automated testing results](https://img.shields.io/github/actions/workflow/status/magmax/python-readchar/run-tests.yaml?branch=master)](https://github.com/magmax/python-readchar/actions/workflows/run-tests.yaml?query=branch%3Amaster)[![Coveralls results](https://coveralls.io/repos/github/magmax/python-readchar/badge.svg?branch=master)](https://coveralls.io/github/magmax/python-readchar?branch=master)[![Number of PyPi downloads](https://img.shields.io/pypi/dd/readchar.svg)](https://pypi.python.org/pypi/readchar)# python-readcharLibrary to easily read single chars and keystrokes.Born as a [python-inquirer](https://github.com/magmax/python-inquirer) requirement.## Installationsimply install it via `pip`:```bashpip install readchar```Or download the source code from [PyPi](https://pypi.python.org/pypi/readchar).## UsageSimply read a character or keystroke:```pythonimport readcharkey = readchar.readkey()```React to different kinds of key-presses:```pythonfrom readchar import readkey, keywhile True:  k = readkey()  if k == &quot;a&quot;:    # do stuff  if k == key.DOWN:    # do stuff  if k == key.ENTER:    break```## DocumentationThere are just two methods:### `readchar.readchar() -&gt; str`Reads one character from `stdin`, returning it as a string with length 1. Waits until acharacter is available.As only ASCII characters are actually a single character, you usually want to use thenext function, that also handles longer keys.### `readchar.readkey() -&gt; str`Reads the next keystroke from `stdin`, returning it as a string. Waits until a keystrokeis available.A keystroke can be:- single characters as returned by `readchar()`. These include:  - character for normal keys: &lt;kbd&gt;a&lt;/kbd&gt;, &lt;kbd&gt;Z&lt;/kbd&gt;, &lt;kbd&gt;9&lt;/kbd&gt;,...  - special characters like &lt;kbd&gt;ENTER&lt;/kbd&gt;, &lt;kbd&gt;BACKSPACE&lt;/kbd&gt;, &lt;kbd&gt;TAB&lt;/kbd&gt;,...  - combinations with &lt;kbd&gt;CTRL&lt;/kbd&gt;: &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;A&lt;/kbd&gt;,...- keys that are made up of multiple characters:  - characters for cursors/arrows: &lt;kbd&gt;ü°©&lt;/kbd&gt;, &lt;kbd&gt;ü°™&lt;/kbd&gt;, &lt;kbd&gt;ü°´&lt;/kbd&gt;,    &lt;kbd&gt;ü°®&lt;/kbd&gt;  - navigation keys: &lt;kbd&gt;INSERT&lt;/kbd&gt;, &lt;kbd&gt;HOME&lt;/kbd&gt;,...  - function keys: &lt;kbd&gt;F1&lt;/kbd&gt; to &lt;kbd&gt;F12&lt;/kbd&gt;  - combinations with &lt;kbd&gt;ALT&lt;/kbd&gt;: &lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;A&lt;/kbd&gt;,...  - combinations with &lt;kbd&gt;CTRL&lt;/kbd&gt; and &lt;kbd&gt;ALT&lt;/kbd&gt;:    &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;SUPR&lt;/kbd&gt;,...&gt; **Note** &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; will not be returned by `readkey()`, but instead&gt; raise a `KeyboardInterupt`. If you what to handle it yourself, use `readchar()`.### `readchar.key` moduleThis submodule contains a list of available keys to compare against. The constants aredefined depending on your operating system, so it should be fully portable. If a key islisted here for your platform, `readkey()` can read it, and you can compare against it.### `readchar.config` classThis static class contains configurations for `readchar`. It holds constants that areused in other parts of the code as class attributes. You can override/change these tomodify its behaviour. Here is a description of the existing attributes:&lt;dl&gt;&lt;dt&gt;&lt;code&gt;INTERRUPT_KEYS&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;List of keys that will result in `readkey()` raising a `KeyboardInterrupt`. &lt;br&gt;*Default:* `[key.CTRL_C]`&lt;/dd&gt;&lt;/dl&gt;## OS SupportThis library actively supports these operating systems:- Linux- WindowsSome operating systems are enabled, but not actively tested or supported:- macOS- FreeBSD / OpenBSDTheoretically every Unix based system should work, but they will not be actively tested.It is also required that somebody provides initial test results before the OS is enabledand added to the list. Feel free to open a PR for that.Thank you!## How to contributeYou have an issue problem or found a bug? You have a great new idea or just want to fixa typo? Great :+1:. We are happy to accept your issue or pull request, but first, pleaseread our[contribution guidelines](https://github.com/magmax/python-readchar/blob/master/CONTRIBUTING.md).They will also tell you how to write code for this repo and how to properly prepare anissue or a pull request.______________________________________________________________________*Copyright (c) 2014-2022 Miguel √Ångel Garc√≠a*</longdescription>
</pkgmetadata>