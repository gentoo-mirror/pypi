<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Audit Field Changes on Django Models[![tests][tests_badge]][tests_link][![coverage][coverage_badge]][coverage_link][![pypi package][pypi_badge]][pypi_link][tests_badge]: https://github.com/dimagi/django-field-audit/actions/workflows/tests.yml/badge.svg[tests_link]: https://github.com/dimagi/django-field-audit/actions/workflows/tests.yml[coverage_badge]: https://github.com/dimagi/django-field-audit/raw/coverage-badge/coverage.svg[coverage_link]: https://github.com/dimagi/django-field-audit/actions/workflows/coverage.yml[pypi_badge]: https://badge.fury.io/py/django-field-audit.svg[pypi_link]: https://pypi.org/project/django-field-audit/A Django app for auditing field changes on database models.## Installation```pip install django-field-audit```## Documentation&lt;!--The [django-field-audit documentation][docs] shows how to use this library toaudit field changes on Django Models.[docs]: https://dimagi.github.io/django-field-audit/--&gt;### Django SettingsTo enable the app, add it to your Django `INSTALLED_APPS` configuration and runmigrations. Settings example:```pythonINSTALLED_APPS = [    # ...    &quot;field_audit&quot;,]```The &quot;auditor chain&quot; (see `FIELD_AUDIT_AUDITORS` in the **Custom settings** tablebelow) is configured out of the box with the default auditors. If`change_context` auditing is desired for authenticated Django requests, add theapp middleware to your Django `MIDDLEWARE` configuration. For example:```pythonMIDDLEWARE = [    # ...    &quot;field_audit.middleware.FieldAuditMiddleware&quot;,]```The audit chain can be updated to use custom auditors (subclasses of`field_audit.auditors.BaseAuditor`). If `change_context` auditing is notdesired, the audit chain can be cleared to avoid extra processing:```pythonFIELD_AUDIT_AUDITORS = []```#### Custom settings details| Name                              | Description                                                    | Default value when unset|:----------------------------------|:---------------------------------------------------------------|:------------------------| `FIELD_AUDIT_AUDITEVENT_MANAGER`  | A custom manager to use for the `AuditEvent` Model.            | `field_audit.models.DefaultAuditEventManager`| `FIELD_AUDIT_AUDITORS`            | A custom list of auditors for acquiring `change_context` info. | `[&quot;field_audit.auditors.RequestAuditor&quot;, &quot;field_audit.auditors.SystemUserAuditor&quot;]`### Model AuditingTo begin auditing Django models, import the `field_audit.audit_fields` decoratorand decorate models specifying which fields should be audited for changes.Example code:```python# flight/models.pyfrom django.db import modelsfrom field_audit import audit_fields@audit_fields(&quot;tail_number&quot;, &quot;make_model&quot;, &quot;operated_by&quot;)class Aircraft(models.Model):    id = AutoField(primary_key=True)    tail_number = models.CharField(max_length=32, unique=True)    make_model = models.CharField(max_length=64)    operated_by = models.CharField(max_length=64)```#### Audited DB write operationsBy default, Model and QuerySet methods are audited, with the exception of four&quot;special&quot; QuerySet methods:| DB Write Method               | Audited|:------------------------------|:-------| `Model.delete()`              | Yes| `Model.save()`                | Yes| `QuerySet.bulk_create()`      | No| `QuerySet.bulk_update()`      | No| `QuerySet.create()`           | Yes (via `Model.save()`)| `QuerySet.delete()`           | No| `QuerySet.get_or_create()`    | Yes (via `QuerySet.create()`)| `QuerySet.update()`           | No| `QuerySet.update_or_create()` | Yes (via `QuerySet.get_or_create()` and `Model.save()`)#### Auditing Special QuerySet WritesAuditing for the four &quot;special&quot; QuerySet methods that perform DB writes (labeled**No** in the table above) _can_ be enabled. This requires three extra usagedetails:1. Enable the feature by calling the audit decorator specifying   `@audit_fields(..., audit_special_queryset_writes=True)`.2. Configure the model class so its default manager is an instance of   `field_audit.models.AuditingManager`.3. All calls to the four &quot;special&quot; QuerySet write methods require an extra   `audit_action` keyword argument whose value is one of:   - `field_audit.models.AuditAction.AUDIT`   - `field_audit.models.AuditAction.IGNORE`##### Important Notes- Specifying `audit_special_queryset_writes=True` (step **1** above) without  setting the default manager to an instance of `AuditingManager` (step **2**  above) will raise an exception when the model class is evaluated.- At this time, `QuerySet.delete()`, `QuerySet.update()`,  and `QuerySet.bulk_create()` &quot;special&quot; write methods can actually perform  change auditing when called with `audit_action=AuditAction.AUDIT`.   `QuerySet.bulk_update()` is not currently implemented and will raise  `NotImplementedError` if called with that action. Implementing this remaining  method remains a task for the future, see **TODO** below. All four methods do  support `audit_action=AuditAction.IGNORE` usage, however.- All audited methods use transactions to ensure changes to audited models  are only committed to the database if audit events are successfully created  and saved as well.#### Bootstrap events for models with existing recordsIn the scenario where auditing is enabled for a model with existing data, it canbe valuable to generate &quot;bootstrap&quot; audit events for all of the existing modelrecords in order to ensure that there is at least one audit event record forevery model instance that currently exists.  There is a migration utility forperforming this bootstrap operation. Example code:```python# flight/migrations/0002_bootstrap_aircarft_auditing.pyfrom django.db import migrations, modelsfrom field_audit.utils import run_bootstrapfrom flight.models import Aircraftclass Migration(migrations.Migration):    dependencies = [        ('flight', '0001_initial'),    ]    operations = [        run_bootstrap(Aircraft, [&quot;tail_number&quot;, &quot;make_model&quot;, &quot;operated_by&quot;])    ]```##### Bootstrap events via management commandIf bootstrapping is not suitable during migrations, there is a management command forperforming the same operation.  The management command does not accept arbitraryfield names for bootstrap records, and uses the fields configured by theexisting `audit_fields(...)` decorator on the model. Example (analogous tomigration action shown above):```shmanage.py bootstrap_field_audit_events init Aircraft```Additionally, if a post-migration bootstrap &quot;top up&quot; action is needed, thethe management command can also perform this action. A &quot;top up&quot; operationcreates bootstrap audit events for any existing model records which do not havea &quot;create&quot; or &quot;bootstrap&quot; `AuditEvent` record. Note that the management commandis currently the only way to &quot;top up&quot; bootstrap audit events. Example:```shmanage.py bootstrap_field_audit_events top-up Aircraft```### Using with SQLiteThis app uses Django's `JSONField` which means if you intend to use the app witha SQLite database, the SQLite `JSON1` extension is required. If your system'sPython `sqlite3` library doesn't ship with this extension enabled, see[this article](https://code.djangoproject.com/wiki/JSON1Extension) for detailson how to enable it.## ContributingAll feature and bug contributions are expected to be covered by tests.### Setup for developersCreate/activate a python virtualenv and install the required dependencies.```shellcd django-field-auditmkvirtualenv django-field-audit  # or however you choose to setup your environmentpip install django nose flake8 coverage```### Running tests**Note**: By default, local tests use an in-memory SQLite database. Ensure thatyour local Python's `sqlite3` library ships with the `JSON1` extension enabled(see [Using with SQLite](#using-with-sqlite)).- Tests  ```shell  nosetests  ```- Style check  ```shell  flake8 --config=setup.cfg  ```- Coverage  ```shell  coverage run -m nose  coverage report -m  ```### Adding migrationsThe example `manage.py` is available for making new migrations.```shellpython example/manage.py makemigrations field_audit```### Uploading to PyPIPackage and upload the generated files.```shellpip install -r pkg-requires.txtpython setup.py sdist bdist_wheeltwine upload dist/*```## TODO- Implement auditing for the remaining &quot;special&quot; QuerySet write operations:  - `bulk_update()`- Write full library documentation using github.io.- Switch to `pytest` to support Python 3.10.### Backlog- Add to optimization for `instance.save(save_fields=[...])` [maybe].- Support adding new audit fields on the same model at different times (instead  of raising `AlreadyAudited`) [maybe].</longdescription>
</pkgmetadata>