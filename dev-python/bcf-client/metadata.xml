<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bcfA simple Python implementation of BCF.Manipulation of BCF-XML is available via `bcfxml.py` and manipulation of BCF-APIis available via `bcfapi.py`.It tries to support BCF-XML version 2.1 and 3.0, and BCF-API 3.0.## bcfxmlThe `bcfxml.load` function lets you read a BCF-XML file.It takes care of using the right version based on the &quot;bcf.version&quot; file contained in the BCF package.The BCF files are extracted and parsed on-demand, and edits are stored in memory until you call the `save` method.```pythonfrom bcf.bcfxml import load# Load a projectwith load(&quot;/path/to/file.bcf&quot;) as bcfxml:    project = bcfxml.project    print(project.name)    # To edit a project, just modify the object directly    bcfxml.project.name = &quot;New name&quot;    # Get a dictionary of topics    topics = bcfxml.topics    for topic_guid, topic_handler in bcfxml.topics.items():        topic = topic_handler.topic        print(&quot;Topic guid is&quot;, topic.guid)        print(&quot;Topic title is&quot;, topic.title)        # Fetch extra data about a topic        header = topic_handler.header        comments = topic_handler.comments        viewpoints = topic_handler.viewpoints        for comment in comments:            print(comment.guid)            print(comment.comment)            print(comment.author)    # Get a particular topic    topic = bcfxml.get_topic(guid)    # Modify a topic    topic.title = &quot;New title&quot;    bcfxml.save()```## bcfapiThe `bcfapi` module lets you interact with the BCF-API standard.```pythonfrom bcf.v3.bcfapi import FoundationClient, BcfClientfoundation_client = FoundationClient(&quot;YOUR_CLIENT_ID&quot;, &quot;YOUR_CLIENT_SECRET&quot;, &quot;OPENCDE_BASEURL&quot;)auth_methods = foundation_client.get_auth_methods()# Our library currently only implements the authorization_code flowif &quot;authorization_code&quot; in auth_methods:    foundation_client.login()bcf_client = BcfClient(foundation_client)versions = foundation_client.get_versions()for version in versions:if &quot;3.0&quot; in versions:    if version[&quot;api_id&quot;] == &quot;bcf&quot; and version[&quot;version_id&quot;] == &quot;3.0&quot;:        bcf_client.set_version(version)data = bcf_client.get_projects()print(data)project_id = data[0][&quot;project_id&quot;]print(project_id)data = bcf_client.get_project(project_id)print(data)data = bcf_client.get_extensions(project_id)print(data)```</longdescription>
</pkgmetadata>