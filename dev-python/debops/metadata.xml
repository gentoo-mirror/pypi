<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. _debops-logodebops-logo-debops:|DebOps logo| DebOps====================*Your Debian-based data center in a box*|GitHub CI| |GitLab CI| |CII Best Practices| |REUSE status| |RSScommits|The DebOps project provides a set of general-purpose`Ansible &lt;https://github.com/ansible/ansible/&gt;`__ roles that can be usedto manage `Debian &lt;https://www.debian.org/&gt;`__ or`Ubuntu &lt;https://www.ubuntu.com/&gt;`__ hosts. In addition, a default setof Ansible playbooks can be used to apply the provided roles in acontrolled way, using Ansible inventory groups.The roles are written with a high customization in mind, which can bedone using Ansible inventory. This way the role and playbook code can beshared between multiple environments, with different configuration in toeach one.Services can be managed on a single host, or spread between multiplehosts. DebOps provides support for different SQL and NoSQL databases,web servers, programming languages and specialized applications usefulin a data center environment or in a cluster. The project can also beused to deploy virtualization environments using KVM/libvirt, Docker orLXC technologies to manage virtual machines and/or containers.You can find out more about DebOps features on the `project’sdocumentation page &lt;https://docs.debops.org/&gt;`__.Quick start-----------Start a Docker container which acts as an Ansible Controller host withDebOps support, based on Debian Buster:::   docker run -it --rm debops/debops   cd src/controller ; debops run common --diffOr, create a Vagrant VM which acts as an Ansible Controller host:::   git clone https://github.com/debops/debops   cd debops &amp;&amp; vagrant up &amp;&amp; vagrant ssh   cd src/controller ; debops run common --diffYou can use configuration in the ``src/controller`` subdirectory to tryout DebOps against the container/VM, or create your own DebOps projectdirectory using ``debops project init`` command.More quick start tips can be found `in the DebOps quick startguide &lt;https://docs.debops.org/en/master/introduction/quick-start.html&gt;`__.Installation------------You can install the `DebOps Pythonpackage &lt;https://pypi.org/project/debops/&gt;`__, which includes the DebOpsroles and playbooks, as well as additional scripts which can be used tosetup separate project directories and run Ansible in a convenient way.To install the Python package with Ansible and other requireddependencies, run the command:::   pip install --user debops[ansible]Alternatively, DebOps roles are available on `AnsibleGalaxy &lt;https://galaxy.ansible.com/debops/debops/&gt;`__ as an AnsibleCollection which can be installed using the ``ansible-galaxy`` command:::   ansible-galaxy collection install debops.debopsRead the `installationinstructions &lt;https://docs.debops.org/en/master/introduction/install.html&gt;`__in the DebOps documentation for more details about required software anddependencies.Getting started---------------Ansible uses SSH to connect to and manage the hosts. DebOps enforces theSSH security by disabling password authentication, therefore using SSHkeys to connect to the hosts is strongly recommended. This can bechanged using the inventory variables.During initial deployments you might find that the firewall created byDebOps blocked you from accessing the hosts. Because of that it’sadvisable to have an out-of-band console access to the host which can beused to login and troubleshoot the connection.Create a new environment within a DebOps “project directory”, add somehosts in the Ansible inventory and run the default DebOps playbookagainst them to configure them:::   # Create a new environment   debops project init ~/src/projects/my-environment   cd ~/src/projects/my-environment   # Modify the 'ansible/inventory/hosts' file to suit your needs, for example   # uncomment the local host to configure it with DebOps   # Run the full playbook against all hosts in the inventory   debops run site   # Run the common playbook against specific host in the inventory   debops run common -l &lt;hostname&gt;You should read the `Getting Started withDebOps &lt;https://docs.debops.org/en/master/introduction/getting-started.html&gt;`__guide for a more in-depth explanation of how the project can be used tomanage multiple hosts via Ansible.Development-----------Create `a fork of thisrepository &lt;https://github.com/debops/debops/fork&gt;`__ and clone it toyour workstation. Create a development DebOps environment and symlinkthe forked repository in it. Now you can create new playbooks/roles inthe forked repository and see their results in the developmentenvironment.::   git clone git@github.com:&lt;username&gt;/debops ~/src/github.com/&lt;username&gt;/debops   cd ~/src/github.com/&lt;username&gt;/debops   git remote add upstream https://github.com/debops/debops.git   debops project init ~/src/projects/debops-devel   cd ~/src/projects/debops-devel   ln -s ~/src/github.com/&lt;username&gt;/debops debopsYou can pull latest changes to the project from the upstream repository:::   cd ~/src/github.com/&lt;username&gt;/debops   git checkout master   git fetch upstream   git rebase upstream/masterRead the `developmentguide &lt;https://docs.debops.org/en/master/developer-guide/contribution-workflow.html&gt;`__file for more details about the DebOps development process.Contributing------------DebOps development is done via a distributed development model. Newfeatures and changes are prepared in a `fork of the officialrepository &lt;https://github.com/debops/debops/fork&gt;`__ and are publishedto the original repository via GitHub pull requests. PRs are reviewed bythe DebOps developer team and if accepted, are merged in the mainrepository.GPG-signed ``git`` commits are preferred to ensure authenticity.Read the `contributingguide &lt;https://docs.debops.org/en/master/developer-guide/contributing.html&gt;`__file for more details about how to contribute to DebOps.Licensing---------The DebOps project is licensed under the `GNU General Public License 3.0or later &lt;https://www.gnu.org/licenses/gpl-3.0&gt;`__. You can find fulltext of the license in the`LICENSES/GPL-3.0-or-later.txt &lt;https://github.com/debops/debops/blob/master/LICENSES/GPL-3.0-or-later.txt&gt;`__file.Some files included with the DebOps project use a different license. Thelicenses are marked in these files using the `SPDX licenseidentifiers &lt;https://spdx.org/ids&gt;`__ and can be found in the``LICENSES/`` subdirectory. They are also included in the projecttarballs, Ansible Collections and Python packages. The project uses the`REUSE Specification &lt;https://reuse.software/spec/&gt;`__ and itsassociated tool to check and verify copyright and license information inall files... |DebOps logo| image:: https://raw.githubusercontent.com/debops/debops/master/lib/images/debops-small.png   :target: https://debops.org/.. |GitHub CI| image:: https://github.com/debops/debops/workflows/Continuous%20Integration/badge.svg   :target: https://github.com/debops/debops/actions?query=workflow%3A%22Continuous+Integration%22.. |GitLab CI| image:: https://gitlab.com/debops/debops/badges/master/pipeline.svg   :target: https://gitlab.com/debops/debops/pipelines.. |CII Best Practices| image:: https://bestpractices.coreinfrastructure.org/projects/237/badge   :target: https://bestpractices.coreinfrastructure.org/en/projects/237.. |REUSE status| image:: https://api.reuse.software/badge/github.com/debops/debops   :target: https://api.reuse.software/info/github.com/debops/debops.. |RSS commits| image:: https://img.shields.io/badge/RSS-commits-orange.svg   :target: https://github.com/debops/debops/commits/master.atom</longdescription>
</pkgmetadata>