<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![abc](https://raw.githubusercontent.com/pthom/imgui_bundle/doc/bindings/imgui_bundle/demos_assets/images/logo_imgui_bundle_512.png)Dear ImGui Bundle: easily create ImGui applications in Python and C++.Batteries included![![sources](https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/badge_view_sources.png)](https://github.com/pthom/imgui_bundle/)[![doc](https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/badge_view_docs.png)](https://pthom.github.io/imgui_bundle)[![manual](https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/badge_interactive_manual.png)](https://traineq.org/ImGuiBundle/emscripten/bin/demo_imgui_bundle.html)# Introduction## About Dear ImGui Bundle[Dear ImGui Bundle](https://github.com/pthom/imgui_bundle) is a bundlefor [Dear ImGui](https://github.com/ocornut/imgui), including variouspowerful libraries from its ecosystem. It enables to easily create ImGuiapplications in C++ and Python, under Windows, macOS, and Linux. It isaimed at application developers, researchers, and beginner developerswho want to quickly get started.## Interactive manual &amp; demo in one click!Click on the animated demonstration below to launch the fullyinteractive demonstration.&lt;figure&gt;&lt;img src=&quot;https://traineq.org/imgui_bundle_doc/demo_bundle8.gif&quot;id=&quot;truc&quot; alt=&quot;Dear ImGui Bundle interactive demo&quot; /&gt;&lt;figcaption aria-hidden=&quot;true&quot;&gt;Dear ImGui Bundle interactivedemo&lt;/figcaption&gt;&lt;/figure&gt;This demonstration is also an interactive manual, similar to the online[ImGuiManual](https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html)## Batteries includedDear ImGui Bundle includes the following libraries:-   [imgui](https://github.com/ocornut/imgui.git) : Dear ImGui,    bloat-free Graphical User interface for C++ with minimal    dependencies-   [implot](https://github.com/epezent/implot): Immediate Mode Plotting-   [Hello ImGui](https://github.com/pthom/hello_imgui.git):    cross-platform Gui apps with the simplicity of a &quot;Hello World&quot; app-   [ImGuizmo](https://github.com/CedricGuillemet/ImGuizmo.git):    Immediate mode 3D gizmo for scene editing and other controls based    on Dear ImGui-   [ImGuiColorTextEdit](https://github.com/BalazsJako/ImGuiColorTextEdit):    Colorizing text editor for ImGui-   [imgui-node-editor](https://github.com/thedmd/imgui-node-editor):    Node Editor built using Dear ImGui-   [imgui-knobs](https://github.com/altschuler/imgui-knobs): Knobs    widgets for ImGui-   [ImFileDialog](https://github.com/pthom/ImFileDialog.git): A file    dialog library for Dear ImGui-   [portable-file-dialogs](https://github.com/samhocevar/portable-file-dialogs)    Portable GUI dialogs library (C++11, single-header)-   [imgui\_md](https://github.com/mekhontsev/imgui_md.git): Markdown    renderer for Dear ImGui using MD4C parser-   [imspinner](https://github.com/dalerank/imspinner): Set of nice    spinners for imgui-   [imgui\_toggle](https://github.com/cmdwtf/imgui_toggle): A toggle    switch widget for Dear ImGui.-   [ImmVision](https://github.com/pthom/immvision.git): Immediate image    debugger and insights-   [imgui\_tex\_inspect](https://github.com/andyborrell/imgui_tex_inspect):    A texture inspector tool for Dear ImGui-   [imgui-command-palette](https://github.com/hnOsmium0001/imgui-command-palette.git):    A Sublime Text or VSCode style command palette in ImGuiA big thank you to their authors for their awesome work!## Easily port your code between python and C++The python bindings are autogenerated via an advanced generator (so thatkeeping them up to date is easy), and closely mirror the original C++API, with fully typed bindings.The original code documentation is meticulously kept inside the pythonstubs. See for example the documentation for[imgui](https://github.com/pthom/imgui_bundle/blob/main/bindings/imgui_bundle/imgui/__init__.pyi),[implot](https://github.com/pthom/imgui_bundle/blob/main/bindings/imgui_bundle/implot.pyi),and [helloimgui](https://github.com/pthom/imgui_bundle/blob/main/bindings/imgui_bundle/hello_imgui.pyi)Thanks to this, code completion in your favorite python IDE works like acharm, and porting code between Python and C++ becomes easy.# Build and install instructions## Install for Python### Install from pypi    pip install imgui-bundle    pip install opencv-contrib-python -   in order to run the immvision module, install opencv-python or    opencv-contrib-pythonNote: under windows, you might need to install [msvcredist](https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-2022).### Install from source:    git clone https://github.com/pthom/imgui_bundle.git    cd imgui_bundle    git submodule update --init --recursive     pip install -v .     pip install opencv-contrib-python-   Since there are lots of submodules, this might take a few minutes-   The build process might take up to 5 minutes### Run the python demoSimply run `demo_imgui_bundle`.The source for the demos can be found inside[bindings/imgui\_bundle/demos\_python](https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/demos_python).Consider `demo_imgui_bundle` as an always available manual for DearImGui Bundle with lots of examples and related code source.## Install for C++### Integrate Dear ImGui Bundle in your own project in 5 minutesThe easiest way to use Dear ImGui Bundle in an external project is touse the example provided in[example\_integration](https://github.com/pthom/imgui_bundle/tree/doc/_example_integration).This folder includes everything you need to set up your own project.### Build from sourceIf you choose to clone this repo, follow these instructions:    git clone https://github.com/pthom/imgui_bundle.git    cd imgui_bundle    git submodule update --init --recursive     mkdir build    cd build    cmake .. -DIMMVISION_FETCH_OPENCV=ON     make -j-   Since there are lots of submodules, this might take a few minutes-   The flag `-DIMMVISION_FETCH_OPENCV=ON` is optional. If set, a    minimal version of OpenCV will be downloaded a compiled at this    stage (this might require a few minutes)The `immvision` module will only be built if OpenCV can be found.Otherwise, it will be ignored, and no error will be emitted.If you have an existing OpenCV install, set its path via:    cmake .. -DOpenCV_DIR=/.../path/to/OpenCVConfig.cmake### Run the C++ demoIf you built ImGuiBundle from source, Simply run`build/bin/demo_imgui_bundle`.The source for the demos can be found inside[bindings/imgui\_bundle/demos\_cpp](https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/demos_cpp/).Consider `demo_imgui_bundle` as a manual with lots of examples andrelated code source. It is always [availableonline](https://traineq.org/ImGuiBundle/emscripten/bin/demo_imgui_bundle.html)# Usage instructions## Dear ImGui - Immediate GUIDear ImGui is an implementation of the Immediate Gui paradigm.### Consult the ImGui ManualDear ImGui comes with a complete demo. It demonstrates all the widgets,together with an example code on how to use them.[ImGuiManual](https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html)is an easy way to consult this demo, and to see the corresponding code.The demo code is in C++, but read on for &quot;Code advices&quot; on how totranslate from C++ to python.### ExampleAn example is often worth a thousand words, the following code:C++    // Display a text    ImGui::Text(&quot;Counter = %i&quot;, app_state.counter);    ImGui::SameLine(); // by default ImGui starts a new line at each widget    // The following line displays a button    if (ImGui::Button(&quot;increment counter&quot;))        // And returns true if it was clicked: you can *immediately* handle the click        app_state.counter += 1;    // Input a text: in C++, InputText returns a bool and modifies the text directly    bool changed = ImGui::InputText(&quot;Your name?&quot;, &amp;app_state.name);    ImGui::Text(&quot;Hello %s!&quot;, app_state.name.c_str());Python    # Display a text    imgui.text(f&quot;Counter = {app_state.counter}&quot;)    imgui.same_line()  # by default ImGui starts a new line at each widget    # The following line displays a button    if imgui.button(&quot;increment counter&quot;):        # And returns true if it was clicked: you can *immediately* handle the click        app_state.counter += 1    # Input a text: in python, input_text returns a tuple(modified, new_value)    changed, app_state.name = imgui.input_text(&quot;Your name?&quot;, app_state.name)    imgui.text(f&quot;Hello {app_state.name}!&quot;)Displays this:![immediate guiexample](https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/immediate_gui_example.png)## Hello ImGui - Starter packDear ImGui Bundle includes [HelloImGui](https://github.com/pthom/hello_imgui), which is itself based onImGui. &quot;Hello ImGui&quot; can be compared to a starter pack that enables toeasily write cross-platform Gui apps for Windows, macOS, Linux, iOS, and[emscripten](https://en.wikipedia.org/wiki/Emscripten).### APISee the &quot;Hello ImGui&quot; [APIdoc](https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/hello_imgui_api.md).Also consult the doc on how to build [DPIaware](https://github.com/pthom/hello_imgui/tree/master/src/hello_imgui/dpi_aware.h)applications.### Features-   Full multiplatform support: Windows, Linux, OSX, iOS, Emscripten,    Android (poorly supported). See demo    [video](https://traineq.org/HelloImGui_6_Platforms.mp4)-   Power Save mode: reduce FPS when application is idle (see    [RunnerParams.fpsIdle](https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/runner_params.h))-   [DPI    aware](https://github.com/pthom/hello_imgui/tree/master/src/hello_imgui/dpi_aware.h)    applications (widget placement, window size, font loading and    scaling)-   Theme tweaking (see [demo    video](https://www.youtube.com/watch?v=4f_-3DDcAZk), and    [API](https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/imgui_theme.h)    )-   Window geometry utilities: autosize, restore window position, full    screen, etc. (see    [WindowGeometry](https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/app_window_params.h))-   Multiplatform [assets    embedding](https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/hello_imgui_assets.h)-   Switch between Glfw or Sdl backend (see    [RunnerParams.backendType](https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/runner_params.h))The usage of `Hello ImGui` is optional. You can also build an imguiapplication from scratch, in C++ or in python (see [pythonexample](https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/demos_python/demos_immapp/imgui_example_glfw_opengl3.py))HelloImGui is fully configurable by POD (plain old data) structures. See[theirdescription](https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/hello_imgui_api.md)## ImmApp - Immediate AppImGui Bundle includes a library named ImmApp (which stands for ImmediateApp). ImmApp is a thin extension of HelloImGui that enables to easilyinitialize the ImGuiBundle addons that require additional setup atstartup### API[C++API](https://github.com/pthom/imgui_bundle/tree/doc/external/immapp/immapp/runner.h)[Pythonbindings](https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/immapp/immapp_cpp.pyi)### How to start an application with addonsSome libraries included by ImGui Bundle require an initialization atstartup. ImmApp makes this easy via AddOnParams.The example program below demonstrates how to run an application whichwill use implot (which requires a context to be created at startup), andimgui\_md (which requires additional fonts to be loaded at startup).C++    #include &quot;immapp/immapp.h&quot;    #include &quot;imgui_md_wrapper/imgui_md_wrapper.h&quot;    #include &quot;implot/implot.h&quot;    #include &quot;demo_utils/api_demos.h&quot;    #include &lt;vector&gt;    #include &lt;cmath&gt;    int main(int, char**)    {        // This call is specific to the ImGui Bundle interactive manual. In a standard application, you could write:        //         HelloImGui::SetAssetsFolder(&quot;my_assets&quot;); // (By default, HelloImGui will search inside &quot;assets&quot;)        ChdirBesideAssetsFolder();        constexpr double pi = 3.1415926535897932384626433;        std::vector&lt;double&gt; x, y1, y2;        for (double _x = 0; _x &lt; 4 * pi; _x += 0.01)        {            x.push_back(_x);            y1.push_back(std::cos(_x));            y2.push_back(std::sin(_x));        }        auto gui = [x,y1,y2]()        {            ImGuiMd::Render(&quot;# This is the plot of _cosinus_ and *sinus*&quot;);  // Markdown            if (ImPlot::BeginPlot(&quot;Plot&quot;))            {                ImPlot::PlotLine(&quot;y1&quot;, x.data(), y1.data(), x.size());                ImPlot::PlotLine(&quot;y2&quot;, x.data(), y2.data(), x.size());                ImPlot::EndPlot();            }        };        HelloImGui::SimpleRunnerParams runnerParams { .guiFunction = gui, .windowSize = {600, 400} };        ImmApp::AddOnsParams addons { .withImplot = true, .withMarkdown = true };        ImmApp::Run(runnerParams, addons);        return 0;    }Python:    import numpy as np    from imgui_bundle import implot, imgui_md, immapp    from imgui_bundle.demos_python import demo_utils    def main():        # This call is specific to the ImGui Bundle interactive manual. In a standard application, you could write:        #         hello_imgui.set_assets_folder(&quot;my_assets&quot;); # (By default, HelloImGui will search inside &quot;assets&quot;)        demo_utils.set_hello_imgui_demo_assets_folder()        x = np.arange(0, np.pi * 4, 0.01)        y1 = np.cos(x)        y2 = np.sin(x)        def gui():            imgui_md.render(&quot;# This is the plot of _cosinus_ and *sinus*&quot;)  # Markdown            if implot.begin_plot(&quot;Plot&quot;):                implot.plot_line(&quot;y1&quot;, x, y1)                implot.plot_line(&quot;y2&quot;, x, y2)                implot.end_plot()        immapp.run(gui, with_implot=True, with_markdown=True, window_size=(600, 400))    if __name__ == &quot;__main__&quot;:        main()## Using Dear ImGui Bundle with jupyter notebookImmApp adds support for integration inside jupyter notebook: theapplication will be run in an external window, and a screenshot will beplaced on the notebook after execution.This requires a window server, and will not run on google collab.Below is a screenshot, that you can test by running `jupyter notebook`inside `bindings/imgui_bundle/demos_python/notebooks`![immapp notebookexample](https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/immapp_notebook_example.jpg)[40 seconds demo video onYoutube](https://www.youtube.com/watch?v=QQIC7lpHono)### API:[immapp/immapp\_notebook.py](https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/immapp/immapp_notebook.py)# C++ / Python porting advices## General advicesImGui is a C++ library that was ported to Python. In order to work withit, you will often refer to its[manual](https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html),which shows example code in C++.In order to translate from C++ to Python:1.  Change the function names and parameters' names from `CamelCase` to    `snake_case`2.  Change the way the output are handled.    1.  in C++ `ImGui::RadioButton` modifies its second parameter (which        is passed by address) and returns true if the user clicked the        radio button.    2.  In python, the (possibly modified) value is transmitted via the        return: `imgui.radio_button` returns a `Tuple[bool, str]` which        contains `(user_clicked, new_value)`.3.  if porting some code that uses static variables, use the    `@immapp.static` decorator. In this case, this decorator simply adds    a variable `value` at the function scope. It is preserved between    calls. Normally, this variable should be accessed via    `demo_radio_button.value`, however the first line of the function    adds a synonym named static for more clarity. Do not overuse them!    Static variable suffer from almost the same shortcomings as global    variables, so you should prefer to modify an application state.### Example:C++    void DemoRadioButton()    {        static int value = 0;        ImGui::RadioButton(&quot;radio a&quot;, &amp;value, 0); ImGui::SameLine();        ImGui::RadioButton(&quot;radio b&quot;, &amp;value, 1); ImGui::SameLine();        ImGui::RadioButton(&quot;radio c&quot;, &amp;value, 2);    }Python    @immapp.static(value=0)    def demo_radio_button():        static = demo_radio_button        clicked, static.value = imgui.radio_button(&quot;radio a&quot;, static.value, 0)        imgui.same_line()        clicked, static.value = imgui.radio_button(&quot;radio b&quot;, static.value, 1)        imgui.same_line()        clicked, static.value = imgui.radio_button(&quot;radio c&quot;, static.value, 2)## Enums and TextInputIn the example below, two differences are important:### InputText functions:`imgui.input_text` (Python) is equivalent to `ImGui::InputText` (C++)-   In C++, it uses two parameters for the text: the text pointer, and    its length.-   In Python, you can simply pass a string, and get back its modified    value in the returned tuple.### Enums handling:-   `ImGuiInputTextFlags_` (C++) corresponds to `imgui.InputTextFlags_`    (python) and it is an *enum* (note the trailing underscore).-   `ImGuiInputTextFlags` (C++) corresponds to `imgui.InputTextFlags`    (python) and it is an *int* (note: no trailing underscore)You will find many similar enums.The dichotomy between int and enums, enables you to write flags that area combinations of values from the enum (see example below).### ExampleC++    void DemoInputTextUpperCase()    {        static char text[64] = &quot;&quot;;        ImGuiInputTextFlags flags = (            ImGuiInputTextFlags_CharsUppercase            | ImGuiInputTextFlags_CharsNoBlank        );        /*bool changed = */ ImGui::InputText(&quot;Upper case, no spaces&quot;, text, 64, flags);    }Python    @immapp.static(text=&quot;&quot;)    def demo_input_text_decimal() -&gt; None:        static = demo_input_text_decimal        flags:imgui.InputTextFlags = (                imgui.InputTextFlags_.chars_uppercase.value              | imgui.InputTextFlags_.chars_no_blank.value            )        changed, static.text = imgui.input_text(&quot;Upper case, no spaces&quot;, static.text, flags)Note: in C++, by using `imgui_stdlib.h`, it is also possible to write:    #include &quot;imgui/misc/cpp/imgui_stdlib.h&quot;    void DemoInputTextUpperCase_StdString()    {        static std::string text;        ImGuiInputTextFlags flags = (            ImGuiInputTextFlags_CharsUppercase            | ImGuiInputTextFlags_CharsNoBlank        );        /*bool changed = */ ImGui::InputText(&quot;Upper case, no spaces&quot;, &amp;text, flags);    }## Advanced glfw callbacksWhen using the glfw backend, you can set advanced callbacks on all glfwevents.Below is an example that triggers a callback whenever the window size ischanged:    import imgui_bundle    import glfw   # always import glfw *after* imgui_bundle!!!    # define a callback    def my_window_size_callback(window: glfw._GLFWwindow, w: int, h: int):        print(f&quot;Window size changed to {w}x{h}&quot;)    # Get the glfw window used by hello imgui    window = imgui_bundle.glfw_window_hello_imgui()    glfw.set_window_size_callback(window, my_window_size_callback)It is important to import glfw *after* imgui\_bundle, since - uponimport - imgui\_bundle informs glfw that it shall use its own version ofthe glfw dynamic library.## Debug native C++ in python scriptsImGui Bundle provides tooling to help you debug the C++ side, when youencounter a bug that is difficult to diagnose from Python.It can be used in two steps:1.  Edit the file `pybind_native_debug/pybind_native_debug.py`. Change    its content so that it runs the python code you would like to debug.    Make sure it works when you run it as a python script.2.  Now, debug the C++ project `pybind_native_debug_bundle` which is    defined in the directory `pybind_native_debug/`. This will run your    python code from C++, and you can debug the C++ side (place    breakpoints, watch variables, etc).Example: [this issue onmacOS](https://github.com/pthom/hello_imgui/issues/33) was solved thanksto this.# Closing words## Who is this project forAs mentioned in the intro,[Dear ImGui Bundle](https://github.com/pthom/imgui_bundle) is a bundlefor [Dear ImGui](https://github.com/ocornut/imgui), including variouspowerful libraries from its ecosystem. It enables to easily create ImGuiapplications in C++ and Python, under Windows, macOS, and Linux. It isaimed at application developers, researchers, and beginner developerswho want to quickly get started.Dear ImGui Bundle aims to make applications prototyping fast and easy,in a multiplatform / multi-tooling context. The intent is to reduce thetime between an idea and a first GUI prototype down to almost zero.It is well adapted for-   developers and researchers who want to switch easily between and    research and development environment by facilitating the port of    research artifacts-   beginners and developers who want to quickly develop an application    without learning a GUI framework### Who is this project **not** forYou should prefer a more complete framework (such as Qt for example) ifyour intent is to build a fully fledged application, with support forinternationalization, advanced styling, etc.Also, the library makes no guarantee of ABI stability, and its API isopened to slight adaptations and breaking changes if they are found tomake the overall usage better and/or safer.## AcknowledgmentsDear ImGui Bundle would not be possible without the work of the authorsof &quot;Dear ImGui&quot;, and especially [OmarCornut](https://www.miracleworld.net/).It also includes a lot of other projects, and I’d like to thank theirauthors for their awesome work!A particular mention for [Evan Pezent](https://evanpezent.com/) (authorof ImPlot), [Cédric Guillemet](https://github.com/CedricGuillemet)(author of ImGuizmo), [BalázsJákó](https://merlin3d.wordpress.com/about/) (author ofImGuiColorTextEdit), and [Michał Cichoń](https://github.com/thedmd)(author of imgui-node-editor), and [DmitryMekhontsev](https://github.com/mekhontsev) (author of imgui-md), [AndyBorrel](https://github.com/andyborrell) (author of imgui-tex-inspect,another image debugging tool, which I discovered long after havingdeveloped immvision).This doc was built using [Asciidoc](https://asciidoc.org/).Immvision was inspired by [The ImageDebugger](https://billbaxter.com/projects/imdebug/), by Bill Baxter.## LicenseThe MIT License (MIT)Copyright (c) 2021-2023 Pascal ThometPermission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the&quot;Software&quot;), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.## Alternatives[pyimgui](https://pyimgui.readthedocs.io/en/latest/) providesbattle-tested comprehensive python bindings for ImGui. I worked withthis project a lot, and contributed a bit to it. In the end, I had todevelop a separate project, in order to be able to add auto-generatedand auto-documented python modules.[Dear PyGui](https://dearpygui.readthedocs.io/en/latest/)([repository](https://github.com/hoffstadt/DearPyGui)) provides pythonbindings for ImGui with a lot of addons, and a more pythonesque API,which makes it perhaps more suited for Python only projects.## About the authorDear ImGui Bundle is developed by Pascal Thomet. I am reachable on my[Github page](https://github.com/pthom). I sometimes[blog](http://code-ballads.net/). There is a[playlist](https://www.youtube.com/playlist?list=PLaJx_KrDECZPzttQ77Gv8DD7OAUwmtWUc)related to ImGui Bundle on YouTube.I have a past in computer vision, and a lot of experience in thetrenches between development and research teams; and I found ImGui to bea nice way to reduce the delay between a research prototype and its usein production code.I also have an inclination for self documenting code, and the doc youare reading was a way to explore new ways to document projects.## How is Dear ImGui Bundle developedThe development of the initial version of Dear ImGui Bundle took aboutone year at full time.The bindings are auto-generated thanks to an advanced parser, so thatthey are easy to keep up to date. I’ll give more information about thebindings generator a bit later in 2023.Please be tolerant if you find issues! Dear ImGui Bundle is developedfor free, under a very permissive license, by one main author (and mostof its API comes from external libraries).If you need consulting about this library or about the bindingsgenerator in the context of a commercial project, please contact me byemail.Contributions are welcome!### HistoryThree of my past projects gave me the idea to develop this library.-   [ImGui    Manual](https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html),    an interactive manual for Dear ImGui, which I developed in June 2020-   [implot demo](https://traineq.org/implot_demo/src/implot_demo.html)    which I developed in 2020.-   [imgui\_datascience](https://github.com/pthom/imgui_datascience), a    python package I developed in 2018 for image analysis and debugging.    Its successor is immvision.Developments for Dear ImGui Bundle and its related automatic bindinggenerator began in january 2022.# FAQSee [FAQ](https://pthom.github.io/imgui_bundle/faq.html)</longdescription>
</pkgmetadata>