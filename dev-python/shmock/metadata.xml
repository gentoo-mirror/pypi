<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SHell command MOCK (SHMOCK)===========================Purpose-------Tools for system administration typically call lots of programs on the command line. This makes automated testing quite tricky, since you may need to* run &quot;sudo ....&quot;, even though the build system is not allowed to use sudo* have tools like &quot;uname&quot; or &quot;ifconfig&quot; produce certain output for testingshmock helps you by creating mock commands that supersede the system's own commands due to a temporarily manipulated $PATH. Based on the command line parameters, mock commands can have different* output on STDOUT and STDERR* exit codeIt is not possible to simulate slowness or commands that behave differently the second time you call them. Command line parsing is very limited, but that's not a problem for auto-generated calls. However, these limitations make the implementation very simple.Configuration-------------To configure which commands should be mocked (and how), use a dictionary like this:.. code-block:: python    commands_to_mock = {        'saynay': 'Nay sayers say nay.'        'jonny': {            (): &quot;walker&quot;,            &quot;foo&quot;: &quot;bar&quot;,            (&quot;b&quot;, &quot;goode&quot;): &quot;Go, Jonny, go!&quot;,            (&quot;be&quot;, &quot;bad&quot;): {&quot;stderr&quot;: &quot;yup&quot;, &quot;returncode&quot;: 255},            None: {                &quot;stdout&quot;: &quot;You called me with some unknown parameters.&quot;,                &quot;stderr&quot;: &quot;And I don't like that.&quot;,                &quot;returncode&quot;: 1            }        }    }The first part uses the most simple way of defining a mocked command: A 'saynay' command is defined that always prints &quot;Nay sayers say nay.&quot; and exits successfully, regardless of command line options.After that, a 'jonny' command is defined that illustrates the full feature set of the shmock module. The command is defined to* When called with no parameters, print &quot;walker&quot;.* When called with a single parameter &quot;foo&quot;, print &quot;bar&quot;.* When called with the two parameters &quot;b&quot; and &quot;goode&quot;, print &quot;Go, Jonny, go!&quot;.* When called with &quot;be bad&quot;, print &quot;yup&quot; to standard error and then exit with 255.* When called with any other parameters, print &quot;You...&quot; to standard out, print &quot;And...&quot; to standard error and then exit with 1.Usage-----The ShellCommandMock is intended to be used in &quot;with&quot; contexts as shown below:.. code-block:: python    import os    from shmock import ShellCommandMock    with ShellCommandMock(commands_to_mock):        os.system(&quot;echo $PATH&quot;)        os.system(&quot;jonny&quot;)        os.system(&quot;jonny b goode&quot;)        os.system(&quot;jonny be bad&quot;)        os.system(&quot;jonny foobar&quot;)    os.system(&quot;echo $PATH&quot;)Advanced Usage--------------Sometimes you want to keep the mocked shell commands for further testing/debugging. You can tell shmock to not clean up the mock environment with.. code-block:: python    from shmock import ShellCommandMock    with ShellCommandMock(commands_to_mock, keep_temp_dir=True):        passshmock will print the location of the mock environment, so that you can add it to you $PATH.When output is printed, shmock calls print(), and print() automatically appends a newline to the output. As a result, it is currently not possible to produce output that does not end in a newline. This will be fixed once it becomes a problem.License-------Copyright 2015 Immobilienscout24 GmbHLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.</longdescription>
</pkgmetadata>