<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># greenletio[![Build status](https://github.com/miguelgrinberg/greenletio/workflows/build/badge.svg)](https://github.com/miguelgrinberg/greenletio/actions) [![codecov](https://codecov.io/gh/miguelgrinberg/greenletio/branch/main/graph/badge.svg)](https://codecov.io/gh/miguelgrinberg/greenletio)This project allows synchronous and asynchronous functions to be used together.Unlike other methods based on executors and thread or process pools,`greenletio` allows synchronous functions to work like their asynchronouscounterparts, without the need to create expensive threads or processes.## ExamplesThe following are some of the possibilities when using `greenletio`.### Convert a sync function into an awaitable```pythonimport asynciofrom greenletio import async_@async_def sync_function(arg):    passasync def async_function():    await sync_function(42)asyncio.run(async_function())```### Use await inside a sync function```pythonfrom greenletio import await_async def async_function():    passdef sync_function():    await_(async_function())```### Call an async function as a normal function```pythonfrom greenletio import await_@await_async def async_function():    passdef sync_function():    async_function()```## Resources- [Documentation](http://greenletio.readthedocs.io/en/latest/)- [PyPI](https://pypi.python.org/pypi/greenletio)- [Change Log](https://github.com/miguelgrinberg/greenletio/blob/main/CHANGES.md)</longdescription>
</pkgmetadata>