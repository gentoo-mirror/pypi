<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SPF## Sender-Policy-Framework queries in Python.### Quick StartInstallation------------This package requires either the dns (dnspython) or DNS (PyDNS/Py3DNS modulesand either the ipaddr module or python3.3 and later.  It does not work withthe ipaddress module backport.  For dnspython, at least version 1.16.0 isrequired.  The authres module is required to process and generate RFC 7601Authentication Results headers.  These can all be installed from pypi via pip.Additionally, they are also available via many distribution packaging systems.pyspf uses traditional python distutils, so dependencies are not installedautomatically.  pyspf can be installed from pypi via pip or manually:After unpacking the source distribution, install this in your site-specific Python extension directory::% python setup.py build% su# python setup.py installThe minimum Python version required is python2.6.  The spf module in thisversion has been tested with python3 versions through python3.8.Testing-------After this package is installed, cd into the test directory andexecute testspf.py::    % cd test    % python testspf.py    WARN: invalid-domain-long in rfc4408-tests.yml, 8.1/2, 5/10: fail preferred to temperror    WARN: txttimeout in rfc4408-tests.yml, 4.4/1: fail preferred to temperror    WARN: spfoverride in rfc4408-tests.yml, 4.5/5: pass preferred to fail    WARN: multitxt1 in rfc4408-tests.yml, 4.5/5: pass preferred to permerror    WARN: multispf2 in rfc4408-tests.yml, 4.5/6: permerror preferred to pass    ..    ----------------------------------------------------------------------    Ran 2 tests in 3.036s    OKThis runs the SPF council test-suite as of when this package was built.It does not test the pyDNS installation, but uses an internal driver.This avoids changing results due to DNS timeouts.In addition, spf.py runs an internal self-test every time it is used from thecommand line.If you're running on Mac OS X, and it looks like DNS.DiscoverNameServers()is failing, you'll need to edit your /etc/resolv.conf and specify adomain name.  For some reason, OS X writes out resolv.conf with a single'domain' line, which isn't good at all.  Later versions of py3dns have beenupdated to better support Max OS X.Description===========SPF does email sender validation.  For more information about SPF,please see http://www.openspf.net/One incompatible change was introduced in version 1.7.  Prior to version 1.7,connections from a local IP address (127...) would always return a Pass result.  The special case was eliminated.  Programs calling pySPF should notdo SPF checks on locally submitted mail.This SPF client is intended to be installed on the border MTA, checkingif incoming SMTP clients are permitted to forward mail.  The SPF checkshould be done during the MAIL FROM:&lt;...&gt; command.There are two ways to use this package.  The first is from the commandline::% python spf.py {ip-addr} {mail-from} {helo}For instance, during an SMTP exchange from client 69.55.226.139::S: 220 mail.example.com ESMTP PostfixC: EHLO mx1.wayforward.netS: 250-mail.example.comS: ...S: 250 8BITMIMEC: MAIL FROM:&lt;terry@wayforward.net&gt;Then the following command line would check if this is a valid sender::% ./spf.py 69.55.226.139 terry@wayforward.net mx1.wayforward.net ('pass', 250, 'sender SPF authorized')Command line calls return RFC 4408/7208 result codes, i.e. 'pass', 'fail','neutral', 'softfail, 'permerror', or 'temperror'.The second way is via the module's APIs.The legacy (pySPF 1.6) API:&gt;&gt;&gt; import spf&gt;&gt;&gt; spf.check(i='69.55.226.139',...           s='terry@wayforward.net',...           h='mx1.wayforward.net')('pass', 250, 'sender SPF authorized')The first element in the tuple is one of 'pass', 'fail', 'netural', 'softfail','unknown', or 'error'.  The second is the SMTP response status code: 550 for 'fail', 450 for 'error' and 250 for all else.  The third is an explanation.Note: SPF results alone are never sufficient to decide that a message should beaccepted.  Accept, reject, or defer decisions are a function of local recieverpolicy.The RFC 4408/7208 compliant API::        &gt;&gt;&gt; import spf        &gt;&gt;&gt; spf.check2(i='69.55.226.139',        ...           s='terry@wayforward.net',        ...           h='mx1.wayforward.net')        ('pass', 'sender SPF verified')The first element in the tuple is one of 'pass', 'fail', 'neutral', 'softfail,'permerror', or 'temperror'.  The second is an explanation.This package also provides two additional helper scripts; type99.py and spfquery.py.  The type99.py script will convert DNS TXT strings to a binary equivalent suitable for use in a BIND zone file.  The spfquery.py script is aPython reimplementination of Wayne Schlitt's spfquery command line tool.The type99.py script is called from the command line as follows:python type99.py &quot;v=spf1 -all&quot; {Note: Use your desired SPF record instead.}\# 12 0b763d73706631202d616c6c {This is the correct result for &quot;v=spf1 -all&quot;}or python type99 - {File name}The input file format is a standard BIND Zone file.  The type99 script will adda Type99 record for each TXT record found in the file.  Use of DNS type 99(type SPF) was removed from SPF in RFC 7208, so this script should be ofhistorical interest only.The spfquery.py script is called with a number of possible options.  Options caneither use standard '-' prefix or be PERL style long options, '--'.  Supportedoptions are:&quot;--file&quot; or &quot;-file&quot; {filename}: Read the query (or queries) from the designated     file.  If {filename} is '0', then query inputs are read from STDIN. &quot;--ip&quot; or &quot;-ip&quot; {address}: Client IP address to use for SPF check.&quot;--sender&quot; or &quot;-sender&quot; {Mail From address}: Envelope sender from which mail was    received.&quot;--helo&quot; or &quot;-helo&quot; {client hostname}: HELO/EHLO name used by SMTP client.&quot;--local&quot; or &quot;-local&quot; {local policy SPF string}: Additional SPF mechanisms to be    checked on the basis of local policy.  Note that local policy matches are     not strictly SPF results.  Local policy processing is not defined in RFC     4408 or RFC 7208.  Result may vary among SPF implementations.&quot;--rcpt-to&quot; or &quot;rcpt-to&quot; {rcpt-to address - if available}: Receipt to address is    not used for actual SPF processing, but if available it can be useful for     logging, spf-received header construction, and providing useful rejection    messages when messages are rejected due to SPF.--default-explanation&quot; or &quot;-default-explanation&quot; {explanation string}: Default    Fail explanation string to be used.&quot;--sanitize&quot; or &quot;-sanitize&quot; and &quot;--debug&quot; or &quot;-debug&quot;: These options are no-op    in the Python implementation, but are valid inputs to provide compatibliity    with input files developed to work with the original PERL and C spfquery    implementations.Overall per SPF check time limits can be controlled by passing querytimeto the spf.check2 function or when initializing a spf.query object.It is set to 20 seconds by default based on RFC 7208.  If querytime is set to0, then the overall time limit is disabled and the per DNS lookup limit is usedinstead.  This defaults to 20 seconds and can be controlled viaspf.MAX_PER_LOOKUP_TIME.  RFC 4408 says that the overall limit MAY be used andrecommends no less than 20 seconds if it is. RFC 7208 is stronger, so adefault limit aligned to the RFC requirements is now used.License: Python Software Foundation LicenseAuthor:Terence Way terry@wayforward.nethttp://www.wayforward.net/spf/Maintainers:Stuart Gathman stuart@gathman.orgScott Kitterman scott@kitterman.comhttp://cheeseshop.python.org/pypi/pyspfCode is currently hosted at https://github.com/sdgathman/pyspf/</longdescription>
</pkgmetadata>