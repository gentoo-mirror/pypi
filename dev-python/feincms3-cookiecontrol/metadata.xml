<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======================feincms3-cookiecontrol======================Despite its name and the fact that it is documented as a part offeincms3, feincms3-cookiecontrol can also be used standalone... image:: docs/banner.png   :width: 400   :alt: The cookie bannerCookie control==============Some jurisidictions require the the users' consent before adding analyticsscripts and tracking cookies. While it may be best to not use any analytics andtracking at all this may not be possible or even desirable in allcircumstances.Many solutions exist for adding a consent banner to the website. Some of thosebanners require loading JavaScript and other assets from external servers. Thisraises some questions because loading those scripts may also be seen astracking already. It is certainly safer to implement a cookie control panellocally. It would be boring to start from scratch on each site.This guide explains how to use `feincms3-cookiecontrol &lt;https://github.com/feinheit/feincms3-cookiecontrol/&gt;`__.Installation~~~~~~~~~~~~Install the package:.. code-block:: shell    venv/bin/pip install feincms3-cookiecontrolAdd ``feincms3_cookiecontrol`` to ``INSTALLED_APPS``:.. code-block:: python    INSTALLED_APPS = [        # ...        &quot;feincms3_cookiecontrol&quot;,    ]Apply the initial migration:.. code-block:: shell    python manage.py migrateAdd the panel to the template, e.g. in ``base.html`` at the end of the``&lt;body&gt;`` element:.. code-block:: html+django    &lt;!doctype html&gt;    &lt;html&gt;      ...      &lt;body&gt;        ...        {% load feincms3_cookiecontrol %}{% feincms3_cookiecontrol %}      &lt;/body&gt;    &lt;/html&gt;You'll have to add all tracking scripts yourself now.The presentation of the panel is a fixed banner at the bottom of theviewport. Once any cookies have been accepted (essential cookies have to beaccepted, e.g. the CSRF cookie) the banner is replaced by a single button whichallows showing the control panel again.Customize the appearance~~~~~~~~~~~~~~~~~~~~~~~~The default colors of the control panel may not fit into your site. The bestway to customize the appearance is to set a few CSS variables, e.g.:.. code-block:: css    .f3cc {      --f3cc-background: #e9e9e9;      --f3cc-foreground: #000000;      --f3cc-button-background: #cbcbcb;      --f3cc-accept-background: #90f690;      --f3cc-button-foreground: #cbcbcb;      --f3cc-accept-foreground: #cbcbcb;    }It's recommended to set all variables if you set a single one; the exception is``--f3cc-button-foreground`` which defaults to the value of``--f3cc-foreground`` and ``--f3cc-accept-foreground`` which defaults to thevalue of ``--f3cc-button-foreground``.Hiding the modify button~~~~~~~~~~~~~~~~~~~~~~~~You may want to suppress the button to modify the consent on some pages, forexample on all pages except for the privacy policy. A good way to achieve thisfollows.Let's assume you're using page types as described in the feincms3 templates andregions guide. Let's also assume that your privacy policy page uses thestandard page type described in the guide:.. code-block:: python    class Page(AbstractPage, PageTypeMixin):        TYPES = [            TemplateType(                key=&quot;standard&quot;,                title=_(&quot;standard&quot;),                template_name=&quot;pages/standard.html&quot;,                regions=[                    Region(key=&quot;main&quot;, title=_(&quot;Main&quot;)),                ],            ),        ]We will add an additional page type which can be used as a marker. Since we'reusing feincms3 apps be sure to read the introduction to feincms3 apps if youhaven't done this already. You may also want to take a look at the feincms3root passthru reference... code-block:: python    class Page(AbstractPage, PageTypeMixin):        TYPES = [            TemplateType(                key=&quot;standard&quot;,                title=_(&quot;standard&quot;),                template_name=&quot;pages/standard.html&quot;,                regions=[                    Region(key=&quot;main&quot;, title=_(&quot;Main&quot;)),                ],            ),            ApplicationType(                key=&quot;privacy-policy&quot;,                title=_(&quot;privacy policy&quot;),                urlconf=&quot;feincms3.root.passthru&quot;,                template_name=&quot;pages/standard.html&quot;,                regions=[                    Region(key=&quot;main&quot;, title=_(&quot;Main&quot;)),                ],            ),        ].. note::   We cannot just use a new ``TemplateType`` because we **only** want to hide   the button on all other pages if a privacy policy page actually exists!Now you can extend the ``page_context`` helper:.. code-block:: python    from feincms3.root.passthru import reverse_passthru    def page_context(request, *, page=None):        ...        context = {            ...        }        if url := reverse_passthru(&quot;privacy-policy&quot;, fallback=None):            context[&quot;privacy_policy_url&quot;] = request.build_absolute_uri(url)        return contextNow you can use this additional variable in the template:.. code-block:: html+django    &lt;!doctype html&gt;    &lt;html&gt;      ...      &lt;body&gt;        ...        {% load feincms3_cookiecontrol %}        {% feincms3_cookiecontrol privacy_policy_url=privacy_policy_url %}      &lt;/body&gt;    &lt;/html&gt;The frontend code will automatically add a link to the privacy policy to thebanner's content and will only show the modify button if the current locationmatches the privacy policy's URL.Using the panel from a different site~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The panel can be integrated into another site by following these steps.Set the domain for the cookie so that the cookie is available on subdomains (besure to check the relevant guides to understand what the problems may be whendoing this and what restrictions you have to honor):.. code-block:: python    COOKIECONTROL = {&quot;domain&quot;: &quot;example.com&quot;}Add the view and optionally provide the privacy policy URL:.. code-block:: python    from feincms3.root.passthru import reverse_passthru_lazy    from feincms3_cookiecontrol.views import inject    urlpatterns = [        # Base case        path(&quot;f3cc-inject.js&quot;, inject),        # Using reverse_passthru_lazy.        # NOTE! The inject view uses `request.build_absolute_uri` to        # complete the URL, you do not have to add the domain and        # protocol yourself here.        path(            &quot;f3cc-inject.js&quot;,            inject,            {&quot;privacy_policy_url&quot;: reverse_passthru_lazy(&quot;privacy-policy&quot;, fallback=&quot;/&quot;)},        ),    ]Embed the script:.. code-block:: html    &lt;script async src=&quot;https://example.com/f3cc-inject.js&quot;&gt;&lt;/script&gt;.. note::   The preferred way to embed the panel is using the template tag. The template   tag method only requires an additional request for a static asset while the   method using a view requires an additional request to a view.Selectively embed iframes or other third party scripts~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. image:: docs/embed.png   :width: 400   :alt: Consciously embed a YouTube videoIf users do not consent to your cookie policy, embedding third party scripts or iframesmight violate data protection laws, since personal data is transfered to a third partywithout the users knowledge or consent. One way is to disable third party contentalltogether or selectively asking users to consent to the data policies of specificproviders. The letter is accomplished by the 'conscious embed' functionality.Extend default providers in your ``settings.py``:.. code-block:: python    EMBED_PROVIDERS = {        &quot;some-provider&quot;: {            &quot;title&quot;: &quot;Mailchimp&quot;,            &quot;privacy_policy_url&quot;: &quot;https://mailchimp.com/legal/privacy/&quot;,        },    }Surround the embedded code with the template block ``embed``:.. code-block:: html    ...    {% load feincms3_cookiecontrol %}    ...    &lt;div class=&quot;container&quot;&gt;        {% wrap &quot;mailchimp&quot; %}        &lt;script src=&quot;https://some-provider.com/example.js&quot;&gt;&lt;/script&gt;        {% endwrap %}    &lt;/div&gt;    ...Users that did not consent to your general cookie policy will now get asked to allowembedding content of specific providers.You can also wrap your default renderer for embedded content plugins like``feincms3.plugins.external`` or ``feincms3.embedding``, but you have toexplicitly specify the provider (as above with the ``{% wrap %}``template tag).If HTML is added dynamically to the site which contains such embedded fragmentsyou have to call the ``f3ccRenderEmbeds()`` JavaScript function yourself toembed the third party content which has already been accepted by the user.Automatically embedding content using an URL only~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The ``feincms3_cookiecontrol.embedding`` module also offers an ``embed``function where you can only pass an URL and either you get back the wrappedembed code or nothing at all. You may also specify your own embed providers; inthis case you should also add a ``handler`` key to the ``EMBED_PROVIDERS``setting; the function only receives the URL and returns either the embeddingHTML or ``None`` if the URL isn't using the provider at all. At the time ofwriting the module supports embedding YouTube and Vimeo URLs.You may use the ``embed`` shortcut as follows:.. code-block:: python    # ...    from feincms3_cookiecontrol.embedding import embed    # ...    class EmbeddedVideo(plugins.external.External, PagePlugin):        # ...        def embedded_html(self):            return embed(self.url)The same functionality is also available directly in templates:.. code-block:: html    ...    {% load feincms3_cookiecontrol %}    {% embed plugin.url %}    ...</longdescription>
</pkgmetadata>