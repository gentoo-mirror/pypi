<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>spall=====.. image:: https://img.shields.io/badge/License-MIT-yellow.svg    :target: https://opensource.org/licenses/MIT    :alt: License.. image:: https://img.shields.io/pypi/v/spall    :target: https://pypi.org/project/spall/    :alt: PyPI.. image:: https://github.com/jshwi/spall/actions/workflows/ci.yml/badge.svg    :target: https://github.com/jshwi/spall/actions/workflows/ci.yml    :alt: CI.. image:: https://results.pre-commit.ci/badge/github/jshwi/spall/master.svg   :target: https://results.pre-commit.ci/latest/github/jshwi/spall/master   :alt: pre-commit.ci status.. image:: https://github.com/jshwi/spall/actions/workflows/codeql-analysis.yml/badge.svg    :target: https://github.com/jshwi/spall/actions/workflows/codeql-analysis.yml    :alt: CodeQL.. image:: https://codecov.io/gh/jshwi/spall/branch/master/graph/badge.svg    :target: https://codecov.io/gh/jshwi/spall    :alt: codecov.io.. image:: https://readthedocs.org/projects/spall/badge/?version=latest    :target: https://spall.readthedocs.io/en/latest/?badge=latest    :alt: readthedocs.org.. image:: https://img.shields.io/badge/python-3.8-blue.svg    :target: https://www.python.org/downloads/release/python-380    :alt: python3.8.. image:: https://img.shields.io/badge/code%20style-black-000000.svg    :target: https://github.com/psf/black    :alt: Black.. image:: https://img.shields.io/badge/linting-pylint-yellowgreen    :target: https://github.com/PyCQA/pylint    :alt: pylintObject-oriented commandline---------------------------Install-------.. code-block:: console    $ pip install spallDevelopment-----------.. code-block:: console    $ pip install spallUsage-----Import ``Subprocess`` from ``spall``.. code-block:: python    &gt;&gt;&gt; from spall import SubprocessInstantiate individual executables.. code-block:: python    &gt;&gt;&gt; cat = Subprocess(&quot;cat&quot;)    &gt;&gt;&gt; echo = Subprocess(&quot;echo&quot;)    &gt;&gt;&gt; fails = Subprocess(&quot;false&quot;)Default is to return returncode and print stdout and stderr to console.. code-block:: python    &gt;&gt;&gt; returncode = echo.call(&quot;Hello, world&quot;)    Hello, world    &gt;&gt;&gt; returncode    0Capture stdout with the ``capture`` keyword argument.. code-block:: python    &gt;&gt;&gt; echo.call(&quot;Hello, world&quot;, capture=True)    0Stdout is consumed by calling ``stdout()`` which returns a list.. code-block:: python    &gt;&gt;&gt; echo.stdout()    ['Hello, world']    &gt;&gt;&gt; echo.stdout()    []Stdout is accrued until ``stdout()`` is called.. code-block:: python    &gt;&gt;&gt; echo.call(&quot;Hello, world&quot;, capture=True)    0    &gt;&gt;&gt; echo.call(&quot;Goodbye, world&quot;, capture=True)    0    &gt;&gt;&gt; echo.stdout()    ['Hello, world', 'Goodbye, world']    &gt;&gt;&gt; echo.stdout()    []Pipe stdout to file with the ``file`` keyword argument.. code-block:: python    &gt;&gt;&gt; import os    &gt;&gt;&gt; import tempfile    &gt;&gt;&gt;    &gt;&gt;&gt; tmp = tempfile.NamedTemporaryFile(delete=False)    &gt;&gt;&gt; echo.call(&quot;Hello, world&quot;, file=tmp.name)    0    &gt;&gt;&gt; returncode = cat.call(tmp.name)    Hello, world    &gt;&gt;&gt; returncode    0    &gt;&gt;&gt; os.remove(tmp.name)    # redirect to /dev/null    &gt;&gt;&gt; echo.call(&quot;Hello, world&quot;, file=os.devnull)    0Failing command will raise a ``subprocess.CalledProcessError``.. code-block:: python    &gt;&gt;&gt; import contextlib    &gt;&gt;&gt; from subprocess import CalledProcessError    &gt;&gt;&gt;    &gt;&gt;&gt; with contextlib.redirect_stderr(None):    ...     try:    ...         returncode = fails.call()    ...     except CalledProcessError as err:    ...         str(err)    &quot;Command 'false' returned non-zero exit status 1.&quot;    &gt;&gt;&gt; returncode    0This, however, will not.. code-block:: python    &gt;&gt;&gt; with contextlib.redirect_stderr(None):    ...     fails.call(suppress=True)    1All the keyword arguments above can be set as the default for the instantiated object.. code-block:: python    &gt;&gt;&gt; echo = Subprocess(&quot;echo&quot;, capture=True)    &gt;&gt;&gt; echo.call(&quot;Hello, world&quot;)    0    &gt;&gt;&gt; echo.stdout()    ['Hello, world']Which can then be overridden.. code-block:: python    &gt;&gt;&gt; returncode = echo.call(&quot;Hello, world&quot;, capture=False)    Hello, world    &gt;&gt;&gt; returncode    0    &gt;&gt;&gt; echo.stdout()    []</longdescription>
</pkgmetadata>