<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/github/workflow/status/nathanhi/pyfatfs/test?style=flat-square    :target: https://github.com/nathanhi/pyfatfs/actions/workflows/test.yml    :alt: CI build status.. image:: https://img.shields.io/readthedocs/pyfatfs?style=flat-square    :target: https://pyfatfs.readthedocs.io/    :alt: Read the Docs.. image:: https://img.shields.io/coveralls/github/nathanhi/pyfatfs?style=flat-square    :target: https://coveralls.io/github/nathanhi/pyfatfs    :alt: Test coverage overview.. image:: https://img.shields.io/codacy/grade/3def4d7b0bcd4b6f9aa4bb64e0338540?style=flat-square    :target: https://app.codacy.com/gh/nathanhi/pyfatfs    :alt: Codacy Code Quality.. image:: https://img.shields.io/pypi/pyversions/pyfatfs?style=flat-square    :target: https://github.com/nathanhi/pyfatfs    :alt: PyPI - Python Version.. image:: https://img.shields.io/pypi/v/pyfatfs?style=flat-square    :target: https://pypi.org/project/pyfatfs    :alt: PyPI.. image:: https://img.shields.io/github/license/nathanhi/pyfatfs.svg?style=flat-square    :target: https://github.com/nathanhi/pyfatfs/blob/HEAD/LICENSE    :alt: MIT Licensepyfatfs=======pyfatfs is a filesystem module for use with `PyFilesystem2 &lt;https://pypi.org/project/fs/&gt;`_for anyone who needs to access or modify files on a FAT filesystem. It alsoprovides a low-level API that allows direct interaction with a FAT filesystemwithout PyFilesystem2 abstraction.pyfatfs supports FAT12/FAT16/FAT32 as well as the VFAT extension (long file names).Installation------------pyfatfs is available via PyPI as ``pyfatfs``, so just execute the followingcommand to install the package for your project:.. code-block:: bash   $ pip install pyfatfsUsage=====The easiest way to get started with pyfatfs is to use it in conjunctionwith PyFilesystem2:PyFilesystem2-------------.. pyfilesystem-quickstart-beginUse fs.open_fs to open a filesystem with a FAT `FS URL &lt;https://pyfilesystem2.readthedocs.io/en/latest/openers.html&gt;`_:.. code-block:: python   import fs   my_fs = fs.open_fs(&quot;fat:///dev/sda1&quot;)Parameters''''''''''It is possible to supply query parameters to the URI of thePyFilesystem2 opener to influence certain behavior; it canbe compared to mount options. Multiple parameters can besupplied by separating them via ``ampersand (&amp;)``.encoding^^^^^^^^pyfatfs offers an encoding parameter to allow overriding thedefault encoding of ibm437 for file names, which was mainlyused by DOS and still is the `default on Linux &lt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/fat/Kconfig?h=v5.10#n81&gt;`_.Any encoding known by Python can be used as value for thisparameter, but keep in mind that this might affect interoperabilitywith other systems, especially when the selected encoding/codepageis not native or supported.Please note that this only affects encoding of the 8DOT3 short file names, notlong file names of the VFAT extension, as LFN are always stored as UTF-16-LE... code-block:: python   import fs   my_fs = fs.open_fs(&quot;fat:///dev/sda1?encoding=cp1252&quot;)offset^^^^^^Specify an offset in bytes to skip when accessing the file. That way evencomplete disk images can be read if the location of the partition is known:.. code-block:: python   import fs   my_fs = fs.open_fs(&quot;fat:///dev/sda?offset=32256&quot;)preserve_case^^^^^^^^^^^^^Preserve case when creating files. This will force LFN entries for allcreated files that do not match the 8DOT3 rules. This defaults to truebut can be disabled by setting preserve_case to false:.. code-block:: python   import fs   my_fs = fs.open_fs(&quot;fat:///dev/sda1?preserve_case=false&quot;)read_only^^^^^^^^^Open filesystem in read-only mode and thus don't allow writes/modifications.This defaults to false but can be enabled by setting read_only to true:.. code-block:: python   import fs   my_fs = fs.open_fs(&quot;fat:///dev/sda1?read_only=true&quot;)utc^^^Create all timestamps on the filesystem in UTC time rather than local time.Affects all directory entries' creation, modification and access times... code-block:: python    import fs    my_fs = fs.open_fs(&quot;fat:///dev/sda1?utc=true&quot;).. pyfilesystem-quickstart-endTesting-------Tests are located at the `tests` directory. In order to test your newcontribution to pyfatfs just run.. code-block:: bash    $ python setup.py testfrom your shell.</longdescription>
</pkgmetadata>