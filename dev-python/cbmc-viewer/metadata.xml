<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## CBMC Viewer[CBMC](https://github.com/diffblue/cbmc) is a Bounded Model Checker for C.It can prove that (for computations of bounded depth) a C program exhibitsno memory safe errors (no buffer overflows, no invalid pointers, etc),no undefined behaviors, and no failures of assertions in the code.[CBMC Viewer](https://github.com/awslabs/aws-viewer-for-cbmc) is a toolthat scans the output of CBMC and produces a browsable summary of its findings.## ExampleHere is a simple example of using cbmc-viewer.Running this example requires installing [CBMC](https://github.com/diffblue/cbmc).Installation on MacOS is just `brew install cbmc`.Installation on other operation systems is described on the [CBMCrelease page](https://github.com/diffblue/cbmc/releases/latest).Create a source file `main.c` containing```#include &lt;stdlib.h&gt;static int global;int main() {  int *ptr = malloc(sizeof(int));  assert(global &gt; 0);  assert(*ptr &gt; 0);  return 0;}```and run the commands```goto-cc -o main.goto main.ccbmc main.goto --trace --xml-ui &gt; result.xmlcbmc main.goto --cover location --xml-ui &gt; coverage.xmlcbmc main.goto --show-properties --xml-ui &gt; property.xmlcbmc-viewer --goto main.goto --result result.xml --coverage coverage.xml --property property.xml --srcdir .```and open the report created by cbmc-viewer in a web browser with```open report/html/index.html```What you will see is* A *coverage report* summarizing what lines of source code were  exercised by cbmc.  In this case, coverage is 100%.  Clicking on `main`,  you can see the source code for `main` annotated with coverage data  (all lines are green because all lines were hit).* A *bug report* summarizing what issues cbmc found with the code. In this case,  the bugs are violations of the assertions because, for example, it is possible  that the uninitialized integer allocated on the heap contains a negative value.  For each bug, there is a link to    * The line of code where the bug occurred.    * An error trace showing the steps of the program leading to the bug.      For each step, there a link to the line of code that generated the step,      making it easy to follow the error trace and root cause the bug.## DocumentationThe [cbmc-viewer documentation](https://model-checking.github.io/cbmc-viewer) includes a[reference manual](https://model-checking.github.io/cbmc-viewer/reference-manual) and a[user guide](https://model-checking.github.io/cbmc-viewer/user-guide).These documents are currently works in progress and will improve over time.## InstallationMost people should just follow the instructions on the[release page](https://github.com/awslabs/aws-viewer-for-cbmc/releases/latest).Developers can install the package in Python &quot;development mode&quot; as follows.* Clone the repository and install dependencies with  ```      git clone https://github.com/awslabs/aws-viewer-for-cbmc.git cbmc-viewer      apt install python3-pip python3-venv python3-jinja2 python3-voluptuous universal-ctags  ```  Installing ctags is optional. See the ctags discussion at the end of the  [release page](https://github.com/awslabs/aws-viewer-for-cbmc/releases/latest).* Install development mode with  ```      cd cbmc-viewer      make develop      export PATH=/tmp/cbmc-viewer/bin:$PATH  ```* Uninstall development mode with  ```      cd cbmc-viewer      make undevelop  ```## SecuritySee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.## LicenseThis project is licensed under the Apache-2.0 License.</longdescription>
</pkgmetadata>