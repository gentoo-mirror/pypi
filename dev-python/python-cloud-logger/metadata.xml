<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python-cloud-loggerA logger with thread local storage for logging context in all logs without repeating the code. This is a json logger where some contextual fields need to be included in every log per request/thread in a safe and efficient way.Note that, all the loggers retrieved on that particular thread ( by using logging.getLogger ) will inherit the context.## Usage```pythonfrom pythoncloudlogger import *logger=logging.getLogger(&quot;myapp-logger&quot;)logger.updateContext({  &quot;requestId&quot; : &quot;1245&quot;})logger.info(&quot;Request successfully processed&quot;)logger.clearContext()```## RedactJsonFormatterThis formatter is an extension of pythonjsonlogger ( https://pypi.org/project/pythonjsonlogger ). This extension will allow you to mask fields in the json before it logs. The redaction keys are case insensitive.### Usage```python# Set the environment variables#import logging,osfrom pythonjsonlogger.formatters import RedactJsonFormatteros.environ[&quot;redactionKeys&quot;]=&quot;x-api-key,Authorization&quot;os.environ[&quot;redactionString&quot;]=&quot;&lt;secret&gt;&quot;logger = logging.getLogger(__name__)ch = logging.StreamHandler()ch.setLevel(logging.INFO)# create formatter and add it to the handlersformatter = pythoncloudlogger.RedactJsonFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')ch.setFormatter(formatter)logger.addHandler(ch)logger.info({&quot;message&quot; : &quot;My request details&quot;,&quot;headers&quot; : {# will be masked&quot;x-api-key&quot; : &quot;sdfsf&quot;,&quot;another-level&quot; :{# will be masked&quot;Authorization&quot; : &quot;Bearer dfsfd&quot;}}})```</longdescription>
</pkgmetadata>