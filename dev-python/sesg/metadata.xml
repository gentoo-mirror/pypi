<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sesg&gt; SeSG (Search String Generator) python package repository.[![PyPI version](https://badge.fury.io/py/sesg.svg)](https://badge.fury.io/py/sesg)[![Documentation Status](https://readthedocs.org/projects/sesg/badge/?version=latest)](https://sesg.readthedocs.io/en/latest/?badge=latest)[![CI](https://github.com/demetrius-mp/sesg/actions/workflows/pipeline.yaml/badge.svg)](https://github.com/demetrius-mp/sesg/actions/workflows/pipeline.yaml)[![codecov](https://codecov.io/github/demetrius-mp/sesg/branch/main/graph/badge.svg?token=Y6DXNMDGU1)](https://codecov.io/github/demetrius-mp/sesg)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v0.json)](https://github.com/charliermarsh/ruff)[![Docstring Style](https://img.shields.io/badge/%20style-google-3666d6.svg)](https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings)[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)SeSG is a tool developed to help Systematic Literature Review researchers, specifically at the step of building a search string.## InstallationYou can install with `pip`, `poetry`, or any other package manager:```bashpoetry add sesg```## Usage&gt; For a more extensive example, please refer to [this repository](https://github.com/demetrius-mp/sesg-cli).### Generating a search string```pythonfrom dataclasses import dataclassfrom random import samplefrom sesg.search_string import (    SimilarWordsFinder,    create_enrichment_text,    generate_search_string,    set_pub_year_boundaries,)from sesg.topic_extraction import create_docs, extract_topics_with_bertopicfrom transformers import BertForMaskedLM, BertTokenizer@dataclassclass Study:    title: str    abstract: str    keywords: strGS: list[Study] = []QGS: list[Study] = sample(GS, len(GS) // 3)def main():    docs = create_docs(        [            {                &quot;title&quot;: s.title,                &quot;abstract&quot;: s.abstract,                &quot;keywords&quot;: s.keywords,            }            for s in QGS        ]    )    enrichment_text = create_enrichment_text(        [            {                &quot;title&quot;: s.title,                &quot;abstract&quot;: s.abstract,            }            for s in QGS        ]    )    similar_words_finder = SimilarWordsFinder(        enrichment_text=enrichment_text,        bert_model=BertForMaskedLM.from_pretrained(&quot;bert-base-uncased&quot;),        bert_tokenizer=BertTokenizer.from_pretrained(&quot;bert-base-uncased&quot;),    )    topics = extract_topics_with_bertopic(        docs,        kmeans_n_clusters=2,        umap_n_neighbors=5,    )    search_string = generate_search_string(        topics,        n_words_per_topic=5,        n_similar_words_per_word=1,        similar_words_finder=similar_words_finder,    )    search_string = f&quot;TITLE-ABS-KEY({search_string})&quot;    search_string = set_pub_year_boundaries(search_string, min_year=2010, max_year=2020)    print(search_string)    # TITLE-ABS-KEY(((&quot;antipatterns&quot;) AND (&quot;detection&quot; OR &quot;management&quot;) AND (&quot;bdtex&quot;) AND (&quot;approach&quot; OR &quot;algorithm&quot;) AND (&quot;smurf&quot;)) OR ((&quot;code&quot; OR &quot;pattern&quot;) AND (&quot;detection&quot; OR &quot;management&quot;) AND (&quot;design&quot; OR &quot;software&quot;) AND (&quot;software&quot; OR &quot;computer&quot;) AND (&quot;learning&quot; OR &quot;translation&quot;))) AND PUBYEAR &gt; 1999 AND PUBYEAR &lt; 2018  # noqa: E501if __name__ == &quot;__main__&quot;:    main()```### Assessing the quality of a search string```pythonimport triofrom sesg.evaluation import EvaluationFactory, Studyfrom sesg.scopus import InvalidStringError, Page, ScopusClientAPI_KEYS: list[str] = []GS: list[Study] = []QGS: list[Study] = []async def main():    string = 'TITLE-ABS-KEY(&quot;machine learning&quot; and &quot;code smell&quot;) AND PUBYEAR &gt; 2010 AND PUBYEAR &lt; 2020'  # noqa: E501    evaluation_factory = EvaluationFactory(gs=GS, qgs=QGS)    client = ScopusClient(API_KEYS)    entries: list[Page.Entry] = []    try:        async for page in client.search(string):            entries.extend(page.entries)    except InvalidStringError:        print(&quot;Invalid string&quot;)    evaluation = evaluation_factory.evaluate([e.title for e in entries])    print(evaluation.start_set_recall)    # 0.7if __name__ == &quot;__main__&quot;:    trio.run(main)```## CreditsThis project is a continuation of [Leo Fuchs'](https://github.com/LeoFuchs/SeSG) work. Most of my work in this project consisted in refactoring the codebase, adding tests, improving the documentation and optimizing the performance, along with the addition of some new features.## HighlightsBelow you can find the major improvements over the original project:- Added [**BERTopic**](https://github.com/MaartenGr/BERTopic) as a topic extraction strategy.- Improved **snowballing** performance by 100x~120x (thanks to [rapidfuzz](https://github.com/maxbachmann/RapidFuzz) and [multiprocessing](https://docs.python.org/3.10/library/multiprocessing.html)).- Improved **scopus search** performance by 30x~40x (thanks to [httpx](https://github.com/encode/httpx/) and [Eduardo Mendes'](https://github.com/dunossauro) help).- Improved **search string generation** performance by ~1.5x (thanks to a caching system).- Improved **code quality** by adopting the use of [lint](https://github.com/charliermarsh/ruff) and [formatting](https://github.com/psf/black) tools. Also, added [type hints](https://docs.python.org/3/library/typing.html) to try to catch errors before runtime.- Added **tests** to prevent bugs when refactoring or adding new features.- Added [**docs**](https://sesg.readthedocs.io/en/latest/) to help users and contributors.## ContributingYou can contribute in many ways, such as [creating issues](https://github.com/demetrius-mp/sesg/issues) and [submitting pull requests](https://github.com/demetrius-mp/sesg/pulls). If you wish to contribute with code, please read the [contributor guide](https://sesg.readthedocs.io/en/latest/contributor-guide/).## LicenseThis project is licensed under the terms of the [GPL-3.0-only license](https://spdx.org/licenses/GPL-3.0-only.html).</longdescription>
</pkgmetadata>