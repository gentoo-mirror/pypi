<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Package renamed to torchdatasets!&lt;img align=&quot;left&quot; width=&quot;256&quot; height=&quot;256&quot; src=&quot;https://github.com/szymonmaszke/torchdatasets/blob/master/assets/logos/medium.png&quot;&gt;* Use `map`, `apply`, `reduce` or `filter` directly on `Dataset` objects* `cache` data in RAM/disk or via your own method (partial caching supported)* Full PyTorch's [`Dataset`](https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset) and [`IterableDataset`](https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset&gt;) support* General `torchdatasets.maps` like `Flatten` or `Select`* Extensible interface (your own cache methods, cache modifiers, maps etc.)* Useful `torchdatasets.datasets` classes designed for general tasks (e.g. file reading)* Support for `torchvision` datasets (e.g. `ImageFolder`, `MNIST`, `CIFAR10`) via `td.datasets.WrapDataset`* Minimal overhead (single call to `super().__init__()`)| Version | Docs | Tests | Coverage | Style | PyPI | Python | PyTorch | Docker | Roadmap ||---------|------|-------|----------|-------|------|--------|---------|--------|---------|| [![Version](https://img.shields.io/static/v1?label=&amp;message=0.2.0&amp;color=377EF0&amp;style=for-the-badge)](https://github.com/szymonmaszke/torchdatasets/releases) | [![Documentation](https://img.shields.io/static/v1?label=&amp;message=docs&amp;color=EE4C2C&amp;style=for-the-badge)](https://szymonmaszke.github.io/torchdatasets/)  | ![Tests](https://github.com/szymonmaszke/torchdatasets/workflows/test/badge.svg) | ![Coverage](https://img.shields.io/codecov/c/github/szymonmaszke/torchdatasets?label=%20&amp;logo=codecov&amp;style=for-the-badge) | [![codebeat](https://img.shields.io/static/v1?label=&amp;message=CB&amp;color=27A8E0&amp;style=for-the-badge)](https://codebeat.co/projects/github-com-szymonmaszke-torchdatasets-master) | [![PyPI](https://img.shields.io/static/v1?label=&amp;message=PyPI&amp;color=377EF0&amp;style=for-the-badge)](https://pypi.org/project/torchdatasets/) | [![Python](https://img.shields.io/static/v1?label=&amp;message=3.6&amp;color=377EF0&amp;style=for-the-badge&amp;logo=python&amp;logoColor=F8C63D)](https://www.python.org/) | [![PyTorch](https://img.shields.io/static/v1?label=&amp;message=&gt;=1.2.0&amp;color=EE4C2C&amp;style=for-the-badge)](https://pytorch.org/) | [![Docker](https://img.shields.io/static/v1?label=&amp;message=docker&amp;color=309cef&amp;style=for-the-badge)](https://hub.docker.com/r/szymonmaszke/torchdatasets) | [![Roadmap](https://img.shields.io/static/v1?label=&amp;message=roadmap&amp;color=009688&amp;style=for-the-badge)](https://github.com/szymonmaszke/torchdatasets/blob/master/ROADMAP.md) |# :bulb: Examples__Check documentation here:__[https://szymonmaszke.github.io/torchdatasets](https://szymonmaszke.github.io/torchdatasets)## General example- Create image dataset, convert it to Tensors, cache and concatenate with smoothed labels:```pythonimport torchdatasets as tdimport torchvisionclass Images(td.Dataset): # Different inheritance    def __init__(self, path: str):        super().__init__() # This is the only change        self.files = [file for file in pathlib.Path(path).glob(&quot;*&quot;)]    def __getitem__(self, index):        return Image.open(self.files[index])    def __len__(self):        return len(self.files)images = Images(&quot;./data&quot;).map(torchvision.transforms.ToTensor()).cache()```You can concatenate above dataset with another (say `labels`) and iterate over them as per usual:```pythonfor data, label in images | labels:    # Do whatever you want with your data```- Cache first `1000` samples in memory, save the rest on disk in folder `./cache`:```pythonimages = (    ImageDataset.from_folder(&quot;./data&quot;).map(torchvision.transforms.ToTensor())    # First 1000 samples in memory    .cache(td.modifiers.UpToIndex(1000, td.cachers.Memory()))    # Sample from 1000 to the end saved with Pickle on disk    .cache(td.modifiers.FromIndex(1000, td.cachers.Pickle(&quot;./cache&quot;)))    # You can define your own cachers, modifiers, see docs)```To see what else you can do please check [**torchdatasets documentation**](https://szymonmaszke.github.io/torchdatasets/)## Integration with `torchvision`Using `torchdatasets` you can easily split `torchvision` datasets and apply augmentationonly to the training part of data without any troubles:```pythonimport torchvisionimport torchdatasets as td# Wrap torchvision dataset with WrapDatasetdataset = td.datasets.WrapDataset(torchvision.datasets.ImageFolder(&quot;./images&quot;))# Split datasettrain_dataset, validation_dataset, test_dataset = torch.utils.data.random_split(    model_dataset,    (int(0.6 * len(dataset)), int(0.2 * len(dataset)), int(0.2 * len(dataset))),)# Apply torchvision mappings ONLY to train datasettrain_dataset.map(    td.maps.To(        torchvision.transforms.Compose(            [                torchvision.transforms.RandomResizedCrop(224),                torchvision.transforms.RandomHorizontalFlip(),                torchvision.transforms.ToTensor(),                torchvision.transforms.Normalize(                    mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]                ),            ]        )    ),    # Apply this transformation to zeroth sample    # First sample is the label    0,)```Please notice you can use `td.datasets.WrapDataset` with any existing `torch.utils.data.Dataset`instance to give it additional `caching` and `mapping` powers!# :wrench: Installation## :snake: [pip](&lt;https://pypi.org/project/torchdatasets/&gt;)### Latest release:```shellpip install --user torchdatasets```### Nightly:```shellpip install --user torchdatasets-nightly```## :whale2: [Docker](https://hub.docker.com/r/szymonmaszke/torchdatasets)__CPU standalone__ and various versions of __GPU enabled__ images are availableat [dockerhub](https://hub.docker.com/r/szymonmaszke/torchdatasets/tags).For CPU quickstart, issue:```shelldocker pull szymonmaszke/torchdatasets:18.04```Nightly builds are also available, just prefix tag with `nightly_`. If you are going for `GPU` image make sure you have[nvidia/docker](https://github.com/NVIDIA/nvidia-docker) installed and it's runtime set.# :question: ContributingIf you find any issue or you think some functionality may be useful to others and fits this library, please [open new Issue](https://help.github.com/en/articles/creating-an-issue) or [create Pull Request](https://help.github.com/en/articles/creating-a-pull-request-from-a-fork).To get an overview of thins one can do to help this project, see [Roadmap](https://github.com/szymonmaszke/torchdatasets/blob/master/ROADMAP.md)</longdescription>
</pkgmetadata>