<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flake8-test-docsHave you ever needed to understand a new project and started reading the testsonly to find that you have no idea what the tests are doing? Good testdocumentation is critical during test definition and when reviewing testswritten in the past or by someone else. This linter checks that the testfunction docstring includes a description of the test setup, execution andchecks.## Getting Started```shellpython -m venv venvsource ./venv/bin/activatepip install flake8 flake8-test-docsflake8 test_source.py```On the following code:```Python# test_source.pydef test_foo():    value = foo()    assert value == &quot;bar&quot;```This will produce warnings such as:```shellflake8 test_source.pytest_source.py:2:1: TDO001 Docstring not defined on test function, more information: https://github.com/jdkandersson/flake8-test-docs#fix-tdo001```This can be resolved by changing the code to:```Python# test_source.pydef test_foo():    &quot;&quot;&quot;    arrange: given foo that returns bar    act: when foo is called    assert: then bar is returned    &quot;&quot;&quot;    value = foo()    assert value == &quot;bar&quot;```## ConfigurationThe plugin adds the following configurations to `flake8`:* `--test-docs-patter`: The pattern the test documentation should follow,  e.g., `given/when/then`. Defaults to `arrange/act/assert`.* `--test-docs-filename-pattern`: The filename pattern for test files. Defaults  to `test_.*\.py`.* `--test-docs-function-pattern`: The function pattern for test functions.  Defaults to `test_.*`.## RulesA few rules have been defined to allow for selective suppression:* `TDO001`: checks that test functions have a docstring.* `TDO002`: checks that test function docstrings follow the documentation  pattern.### Fix TDO001This linting rule is triggered by a test function in a test file without adocstring. For example:```Python# test_source.pydef test_foo():    result = foo()    assert result == &quot;bar&quot;```This example can be fixed by:```Python# test_source.pydef test_foo():    &quot;&quot;&quot;    arrange: given foo that returns bar    act: when foo is called    assert: then bar is returned    &quot;&quot;&quot;    result = foo()    assert result == &quot;bar&quot;```### Fix TDO002This linting rule is triggered by a test function in a test file with adocstring that doesn't follow the documentation pattern. For example:```Python# test_source.pydef test_foo():    &quot;&quot;&quot;Test foo.&quot;&quot;&quot;    result = foo()    assert result == &quot;bar&quot;```This example can be fixed by:```Python# test_source.pydef test_foo():    &quot;&quot;&quot;    arrange: given foo that returns bar    act: when foo is called    assert: then bar is returned    &quot;&quot;&quot;    result = foo()    assert result == &quot;bar&quot;```The message of the linting rule should give you the specific problem with thedocumentation. In general, the pattern is:* start on the second line with the same indentation is the start of the  docstring* the starting line should begin with `arrange:` (or whatever was set using  `--test-docs-patter`) followed by at least some words describing the test  setup* long test setup descriptions can be broken over multiple lines by indenting  the lines after the first by one level (e.g., 4 spaces by default)* this is followed by similar sections starting with `act:` describing the test  execution and `assert:` describing the checks* the last line should be indented the same as the start of the docstringBelow are some valid examples. Starting with a vanilla example:```Python# test_source.pydef test_foo():    &quot;&quot;&quot;    arrange: given foo that returns bar    act: when foo is called    assert: then bar is returned    &quot;&quot;&quot;    result = foo()    assert result == &quot;bar&quot;```Here is an example where the test function is in a nested scope:```Python# test_source.pyclass TestSuite:    def test_foo():        &quot;&quot;&quot;        arrange: given foo that returns bar        act: when foo is called        assert: then bar is returned        &quot;&quot;&quot;        result = foo()        assert result == &quot;bar&quot;```Here is an example where each of the descriptions go over multiple lines:```Python# test_source.pydef test_foo():    &quot;&quot;&quot;    arrange: given foo        that returns bar    act: when foo        is called    assert: then bar        is returned    &quot;&quot;&quot;    result = foo()    assert result == &quot;bar&quot;```</longdescription>
</pkgmetadata>