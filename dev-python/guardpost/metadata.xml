<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build](https://github.com/Neoteroi/guardpost/workflows/Build/badge.svg)](https://github.com/Neoteroi/guardpost/actions?query=workflow%3ABuild)[![pypi](https://img.shields.io/pypi/v/guardpost.svg?color=blue)](https://pypi.org/project/guardpost/)[![versions](https://img.shields.io/pypi/pyversions/guardpost.svg)](https://github.com/Neoteroi/guardpost)[![license](https://img.shields.io/github/license/Neoteroi/guardpost.svg)](https://github.com/Neoteroi/guardpost/blob/main/LICENSE)[![codecov](https://codecov.io/gh/Neoteroi/guardpost/branch/main/graph/badge.svg?token=sBKZG2D1bZ)](https://codecov.io/gh/Neoteroi/guardpost)# Authentication and authorization framework for Python appsBasic framework to handle authentication and authorization in asynchronousPython applications.**Features:**- strategy to implement authentication (who or what is using a service?)- strategy to implement authorization (is the acting identity authorized to do a certain action?)- support for dependency injection for classes handling authentication and  authorization requirements- built-in support for JSON Web Tokens (JWTs) authenticationThis library is freely inspired by [authorization in ASP.NETCore](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies?view=aspnetcore-2.2);although its implementation is extremely different.## Installation```bashpip install guardpost```To install with support for `JSON Web Tokens (JWTs)` validation:```pip install guardpost[jwt]```### ExamplesFor examples, refer to the [examples folder](./examples).## Functions to validate JWTsGuardPost includes functions to validate JSON Web Tokens (JWTs) and handleJSON Web Keys Sets (JWKS).The built-in validator class can retrieve automatically JWKS from identity providersand handle automatically caching and keys rotation. Caching is useful to not incur inuseless performance fees (e.g. downloading JWKS at each web request), and keys rotationis important because identity providers can periodically change the keys they use tosign JWTs.To use these features, install to include additional dependencies:```bashpip install guardpost[jwt]```The following example shows how to use guardpost to validate tokens:```pythonimport asynciofrom guardpost.jwts import JWTValidatorasync def main():    validator = JWTValidator(        authority=&quot;YOUR_AUTHORITY&quot;,        valid_issuers=[&quot;YOUR_ISSUER_VALUE&quot;],        valid_audiences=[&quot;YOUR_AUDIENCE&quot;],    )    # keys are fetched when necessary    data = await validator.validate_jwt(&quot;YOUR_TOKEN&quot;)    print(data)asyncio.run(main())```An example value for `authority`, to validate access tokens issued byAzure Active Directory could be: `https://sts.windows.net/YOUR_TENANT_ID/`.GuardPost is used in BlackSheep and has been tested with:- Auth0- Azure Active Directory- Azure Active Directory B2C- Okta## If you have doubts about authentication vs authorization...`Authentication` answers the question: _Who is the user who is initiating theaction?_, or more in general: _Who is the user, or what is the service, that isinitiating the action?_.`Authorization` answers the question: _Is the user, or service, authorized todo something?_.Usually, to implement authorization, is necessary to have the context of theentity that is executing the action.## Usage in BlackSheep`guardpost` is used in the [BlackSheep](https://www.neoteroi.dev/blacksheep/)web framework, to implement [authentication and authorizationstrategies](https://www.neoteroi.dev/blacksheep/authentication/) for requesthandlers.To see how `guardpost` is used in `blacksheep` web framework, read:* [Authentication](https://www.neoteroi.dev/blacksheep/authentication/)* [Authorization](https://www.neoteroi.dev/blacksheep/authorization/)# DocumentationUnder construction. ðŸš§</longdescription>
</pkgmetadata>