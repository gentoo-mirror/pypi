<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Databudgie![Github Actions Build](https://github.com/schireson/databudgie/actions/workflows/build.yml/badge.svg)[![Coverage Status](https://coveralls.io/repos/github/schireson/databudgie/badge.svg?branch=main&amp;t=6I0aU6)](https://coveralls.io/github/schireson/databudgie?branch=main)[![DocumentationStatus](https://readthedocs.org/projects/databudgie/badge/?version=latest)](https://databudgie.readthedocs.io)![](docs/source/_static/databudgie.png)Databudgie is a CLI &amp; library for database performing targeted backup andrestore of database tables or arbitrary queries against database tables.# UsageA minimal config file might look like:```yaml# databudgie.yml or config.databudgie.ymlbackup:  url: postgresql://postgres:postgres@localhost:5432/postgres  tables:    - name: public.product      query: &quot;select * from {table} where store_id &gt; 4&quot;      location: s3://my-s3-bucket/databudgie/public.productrestore:  url: postgresql://postgres:postgres@localhost:5432/postgres  tables:    - name: public.product      location: s3://my-s3-bucket/databudgie/public.product```With that config in place, backing up the defined tables (using the specifiedconfig) is as simple as `databudgie backup`; and restore `databudgie restore`.## Installation```bashpip install databudgie```</longdescription>
</pkgmetadata>