<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- ix-docs-ignore --&gt;![imgix logo](https://assets.imgix.net/sdk-imgix-logo.svg)`imgix-python` is a client library for generating image URLs with [imgix](https://www.imgix.com/).[![Version](https://img.shields.io/pypi/v/imgix.svg)](https://pypi.org/project/imgix/)[![Build Status](https://travis-ci.com/imgix/imgix-python.svg?branch=main)](https://travis-ci.com/imgix/imgix-python)![Downloads](https://img.shields.io/pypi/dm/imgix)![Python Versions](https://img.shields.io/pypi/pyversions/imgix)[![License](https://img.shields.io/github/license/imgix/imgix-python)](https://github.com/imgix/imgix-python/blob/main/LICENSE)[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-python.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-python?ref=badge_shield)---&lt;!-- /ix-docs-ignore --&gt;- [Installation](#installation)- [Usage](#usage)- [Signed URLs](#signed-urls)- [Disabled Path Encoding](#disabled-path-encoding)- [Srcset Generation](#srcset-generation)    * [Fixed-Width Images](#fixed-width-images)        + [Variable Quality](#variable-quality)    * [Fluid-Width Images](#fluid-width-images)        + [Custom Widths](#custom-widths)        + [Width Ranges](#width-ranges)        + [Width Tolerance](#width-tolerance)        + [Explore Target Widths](#explore-target-widths)    * [Usage with UTF-8](#usage-with-utf-8)- [The `ixlib` Parameter](#the-ixlib-parameter)- [Testing](#testing)- [License](#license)## Installation``` bashpip install imgix```## UsageTo begin creating imgix URLs, import the imgix library and create a URL builder. The URL builder can be reused to create URLs for any images on the domains it is provided.``` python&gt;&gt;&gt; from imgix import UrlBuilder&gt;&gt;&gt; ub = UrlBuilder(&quot;demo.imgix.net&quot;)&gt;&gt;&gt; ub.create_url(&quot;bridge.png&quot;, {'w': 100, 'h': 100})'https://demo.imgix.net/bridge.png?h=100&amp;w=100'```_HTTPS_ support is enabled by default. _HTTP_ can be toggled on by setting `use_https` to `False`:``` python&gt;&gt;&gt; from imgix import UrlBuilder&gt;&gt;&gt; ub = UrlBuilder(&quot;demo.imgix.net&quot;, use_https=False)&gt;&gt;&gt; ub.create_url(&quot;/bridge.png&quot;, {'w': 100, 'h': 100})'http://demo.imgix.net/bridge.png?h=100&amp;w=100'```## Signed URLsTo produce a signed URL, you must enable secure URLs on your source and then provide your signature key to the URL builder.``` python&gt;&gt;&gt; from imgix import UrlBuilder&gt;&gt;&gt; ub = UrlBuilder(&quot;demo.imgix.net&quot;, sign_key=&quot;test1234&quot;)&gt;&gt;&gt; ub.create_url(&quot;/bridge.png&quot;, {'w': 100, 'h': 100})'https://demo.imgix.net/bridge.png?h=100&amp;w=100&amp;s=bb8f3a2ab832e35997456823272103a4'```## Disabled Path EncodingPath encoding is enabled by default. It can be toggled off by setting `disable_path_encoding` to `True` in the optional `options` paramater in `create_url()` and `create_srcset()` functions:```python&gt;&gt;&gt; from imgix import UrlBuilder&gt;&gt;&gt; ub = UrlBuilder(&quot;sdk-test.imgix.net&quot;)&gt;&gt;&gt; ub.create_url(&quot; &lt;&gt;[]{}|^%.jpg&quot;, params={'w': 100, 'h': 100}, options={'disable_path_encoding': True})'https://sdk-test.imgix.net/ &lt;&gt;[]{}|^%.jpg?h=100&amp;w=100'```Normally this would output a source URL like `https://demo.imgix.net/%20%3C%3E%5B%5D%7B%7D%7C%5E%25.jpg?h=100&amp;2=100`, but since path encoding is disabled, it will output a source URL like `https://sdk-test.imgix.net/ &lt;&gt;[]{}|^%.jpg?h=100&amp;w=100`.```python&gt;&gt;&gt; from imgix import UrlBuilder&gt;&gt;&gt; ub = UrlBuilder(&quot;sdk-test.imgix.net&quot;)&gt;&gt;&gt; ub.create_srcset(&quot;image&lt;&gt;[]{} 123.png&quot;, widths=[100], options={'disable_path_encoding': True})'https://sdk-test.imgix.net/image&lt;&gt;[]{} 123.png?w=100 100w'```Normally this would output a source URL like `https://sdk-test.imgix.net/image%3C%3E%5B%5D%7B%7D%20123.png?&amp;w=100 100w`, but since path encoding is disabled, it will output a source URL like `https://sdk-test.imgix.net//image&lt;&gt;[]{} 123.png?w=100 100w`.## Srcset GenerationThe imgix-python package allows for generation of custom srcset attributes, which can be invoked through the `create_srcset` method. By default, the generated srcset will allow for responsive size switching by building a list of image-width mappings.``` pythonimport osfrom imgix import UrlBuilder# Keep Your Secrets Safe!SECRET = os.getenv(&quot;IX_SIGN_KEY&quot;)ub = UrlBuilder(&quot;demos.imgix.net&quot;, sign_key=SECRET)srcset = ub.create_srcset(&quot;image.png&quot;)```The above will produce the following srcset attribute value which can then be served to the client: ``` htmlhttps://demos.imgix.net/image.png?w=100&amp;s=e415797545a77a9d2842dedcfe539c9a 100w,https://demos.imgix.net/image.png?w=116&amp;s=b2da46f5c23ef13d5da30f0a4545f33f 116w,https://demos.imgix.net/image.png?w=135&amp;s=b61422dead929f893c04b8ff839bb088 135w,                                        ...https://demos.imgix.net/image.png?w=7401&amp;s=ad671301ed4663c3ce6e84cb646acb96 7401w,https://demos.imgix.net/image.png?w=8192&amp;s=a0fed46e2bbcc70ded13dc629aee5398 8192w```### Fixed-Width ImagesIn cases where enough information is provided about an image's dimensions, `create_srcset` will instead build a srcset that will allow for an image to be served at different resolutions. The parameters taken into consideration when determining if an image is fixed-width are `w`, `h`, and `ar`.By invoking `create_srcset` with either a width **or** the height and aspect ratio (along with `fit=crop`, typically) provided, a different srcset will be generated for a fixed-width image instead.``` pythonfrom imgix import UrlBuilder&gt;&gt;&gt; ub = UrlBuilder(&quot;demos.imgix.net&quot;, sign_key=&quot;my-token&quot;)&gt;&gt;&gt; srcset = ub.create_srcset(&quot;image.png&quot;, {'h':800, 'ar':'3:2', 'fit':'crop'})```Will produce the following attribute value:``` htmlhttps://demos.imgix.net/image.png?ar=3%3A2&amp;dpr=1&amp;fit=crop&amp;h=800&amp;s=6cf5c443d1eb98bc3d96ea569fcef088 1x,https://demos.imgix.net/image.png?ar=3%3A2&amp;dpr=2&amp;fit=crop&amp;h=800&amp;s=d60a61a5f34545922bd8dff4e53a0555 2x,https://demos.imgix.net/image.png?ar=3%3A2&amp;dpr=3&amp;fit=crop&amp;h=800&amp;s=590f96aa426f8589eb7e449ebbeb66e7 3x,https://demos.imgix.net/image.png?ar=3%3A2&amp;dpr=4&amp;fit=crop&amp;h=800&amp;s=c89c2fd3148957647e86cfc32ba20517 4x,https://demos.imgix.net/image.png?ar=3%3A2&amp;dpr=5&amp;fit=crop&amp;h=800&amp;s=3d73af69d78d49eef0f81b4b5d718a2c 5x```By default, this library generates a `srcset` with pixel density values of `1` through `5`.These target ratios can be controlled by using the `devicePixelRatios` parameters.```pythonfrom imgix import UrlBuilderclient = UrlBuilder(&quot;demo.imgix.net&quot;)client.create_srcset(  &quot;image.jpg&quot;,  { &quot;w&quot;: 100 },  {    &quot;device_pixel_ratios&quot;: [ 1, 2, 3 ]  })```Will produce the following attribute value:```htmlhttps://demo.imgix.net/image.jpg?dpr=1&amp;ixlib=python-3.2.1&amp;q=75&amp;w=100 1x,https://demo.imgix.net/image.jpg?dpr=2&amp;ixlib=python-3.2.1&amp;q=50&amp;w=100 2x,https://demo.imgix.net/image.jpg?dpr=3&amp;ixlib=python-3.2.1&amp;q=35&amp;w=100 3x'```For more information to better understand srcset, we highly recommend[Eric Portis' &quot;Srcset and sizes&quot; article](https://ericportis.com/posts/2014/srcset-sizes/) which goes into depth about the subject.#### Variable QualityThis library will automatically append a variable `q` parameter mapped to each `dpr` parameter when generating a [fixed-width image](#fixed-width-images) srcset. This technique is commonly used to compensate for the increased file size of high-DPR images.Since high-DPR images are displayed at a higher pixel density on devices, image quality can be lowered to reduce overall file size––without sacrificing perceived visual quality. For more information and examples of this technique in action, see [this blog post](https://blog.imgix.com/2016/03/30/dpr-quality).This behavior will respect any overriding `q` value passed in as a parameter. Additionally, it can be disabled altogether by passing `disable_variable_quality = true` to `create_srcset`.This behavior specifically occurs when a [fixed-width image](#fixed-width-images) is rendered, for example:```python# Note that `params={&quot;w&quot;: 100}` allows `create_srcset` to _infer_ the creation# of a DPR based srcset attribute for fixed-width images.ub = imgix.UrlBuilder('demo.imgix.net')# Set `disable_variable_quality` to True to disable variable quality.srcset = ub.create_srcset('image.jpg', params={&quot;w&quot;: 100}, disable_variable_quality=False)```The above will generate a srcset with the following `q` to `dpr` query `params`:```htmlhttps://demo.imgix.net/image.jpg?w=100&amp;dpr=1&amp;q=75 1x,https://demo.imgix.net/image.jpg?w=100&amp;dpr=2&amp;q=50 2x,https://demo.imgix.net/image.jpg?w=100&amp;dpr=3&amp;q=35 3x,https://demo.imgix.net/image.jpg?w=100&amp;dpr=4&amp;q=23 4x,https://demo.imgix.net/image.jpg?w=100&amp;dpr=5&amp;q=20 5x```By default, this library will automatically append a variable `q` parameter mapped to each `dpr` parameter when generating a [fixed-width image](#fixed-width-images) srcset.To customize variable qualities, you can pass a `variable_qualities` dictionary in the `options` while creating srcset as below:```pythonfrom imgix import UrlBuilderclient = UrlBuilder(&quot;demo.imgix.net&quot;)client.create_srcset(&quot;image.jpg&quot;, {&quot;w&quot;: 100}, {&quot;variable_qualities&quot;: {1: 45, 2: 30, 3: 20, 4: 15, 5: 10}})```The above script will produce the following output:```bashhttps://demo.imgix.net/image.jpg?dpr=1&amp;q=45&amp;w=100 1xhttps://demo.imgix.net/image.jpg?dpr=2&amp;q=30&amp;w=100 2xhttps://demo.imgix.net/image.jpg?dpr=3&amp;q=20&amp;w=100 3xhttps://demo.imgix.net/image.jpg?dpr=4&amp;&amp;q=15&amp;w=100 4xhttps://demo.imgix.net/image.jpg?dpr=5&amp;q=10&amp;w=100 5x``` You can also pass `variable_qualities` along with the `device_pixel_ratios` option as below:```pythonfrom imgix import UrlBuilderclient = UrlBuilder(&quot;demo.imgix.net&quot;)client.create_srcset(  &quot;image.jpg&quot;,  { &quot;w&quot;: 100 },  {    &quot;device_pixel_ratios&quot;: [ 1, 2, 3 ],    &quot;variable_qualities&quot;: { 1: 45, 2: 30, 3: 20 }  })```The above script will produce the following output:```htmlhttps://testing.imgix.net/image.jpg?dpr=1&amp;q=45&amp;w=100 1x,https://testing.imgix.net/image.jpg?dpr=2&amp;q=30&amp;w=100 2x,https://testing.imgix.net/image.jpg?dpr=3&amp;q=20&amp;w=100 3x```### Fluid-Width Images#### Custom WidthsIn situations where specific widths are desired when generating `srcset` pairs, a user can specify them by passing an array of positive integers as `widths`:``` python&gt;&gt;&gt; from imgix import UrlBuilder&gt;&gt;&gt; builder = UrlBuilder('demo.imgix.net')&gt;&gt;&gt; builder.create_srcset('image.jpg', widths=[144, 240, 320, 446, 640])'https://demo.imgix.net/image.jpg?w=144 144w,\nhttps://demo.imgix.net/image.jpg?w=240 240w,\nhttps://demo.imgix.net/image.jpg?w=320 320w,\nhttps://demo.imgix.net/image.jpg?w=446 446w,\nhttps://demo.imgix.net/image.jpg?w=640 640w'``````htmlhttps://demo.imgix.net/image.jpg?w=144 144w,https://demo.imgix.net/image.jpg?w=240 240w,https://demo.imgix.net/image.jpg?w=320 320w,https://demo.imgix.net/image.jpg?w=446 446w,https://demo.imgix.net/image.jpg?w=640 640w```**Note**: in situations where a `srcset` is being rendered as a [fixed-width](#fixed-width-images) srcset, any custom `widths` passed in will be ignored.Additionally, if both `widths` and a width `tol`erance are passed to the `create_srcset` method, the custom widths list will take precedence.#### Width RangesIn certain circumstances, you may want to limit the minimum or maximum value of the non-fixed `srcset` generated by the `create_srcset` method. To do this, you can specify the widths at which a srcset should `start` and `stop`:```python&gt;&gt;&gt; from imgix import UrlBuilder&gt;&gt;&gt; ub = UrlBuilder('demo.imgix.net')&gt;&gt;&gt; ub.create_srcset('image.jpg', start=500, stop=2000)'https://demo.imgix.net/image.jpg?w=500 500w,\nhttps://demo.imgix.net/image.jpg?w=580 580w,\nhttps://demo.imgix.net/image.jpg?w=673 673w,\nhttps://demo.imgix.net/image.jpg?w=780 780w,\nhttps://demo.imgix.net/image.jpg?w=905 905w,\nhttps://demo.imgix.net/image.jpg?w=1050 1050w,\nhttps://demo.imgix.net/image.jpg?w=1218 1218w,\nhttps://demo.imgix.net/image.jpg?w=1413 1413w,\nhttps://demo.imgix.net/image.jpg?w=1639 1639w,\nhttps://demo.imgix.net/image.jpg?w=1901 1901w,\nhttps://demo.imgix.net/image.jpg?w=2000 2000w'```Formatted version of the above srcset attribute:``` htmlhttps://demo.imgix.net/image.jpg?w=500 500w,https://demo.imgix.net/image.jpg?w=580 580w,https://demo.imgix.net/image.jpg?w=673 673w,https://demo.imgix.net/image.jpg?w=780 780w,https://demo.imgix.net/image.jpg?w=905 905w,https://demo.imgix.net/image.jpg?w=1050 1050w,https://demo.imgix.net/image.jpg?w=1218 1218w,https://demo.imgix.net/image.jpg?w=1413 1413w,https://demo.imgix.net/image.jpg?w=1639 1639w,https://demo.imgix.net/image.jpg?w=1901 1901w,https://demo.imgix.net/image.jpg?w=2000 2000w'```#### Width ToleranceThe `srcset` width `tol`erance dictates the maximum `tol`erated difference between an image's downloaded size and its rendered size.For example, setting this value to `0.10` means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate.A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.By default, srcset width `tol`erance is set to 0.08 (8 percent), which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as width `tol`erance:```python&gt;&gt;&gt; import imgix&gt;&gt;&gt; ub = imgix.UrlBuilder('demo.imgix.net')&gt;&gt;&gt; srcset = ub.create_srcset('image.jpg', start=100, stop=384, tol=0.20)```In this case, the `width_tolerance` is set to 20 percent, which will be reflected in the difference between subsequent widths in a srcset pair:```htmlhttps://demo.imgix.net/image.jpg?w=100 100w,https://demo.imgix.net/image.jpg?w=140 140w,https://demo.imgix.net/image.jpg?w=196 196w,https://demo.imgix.net/image.jpg?w=274 274w,https://demo.imgix.net/image.jpg?w=384 384w```#### Explore Target WidthsThe `target_widths` function is used internally to generate lists of target widths to be used in calls to `create_srcset`.It is a way to generate, play with, and explore different target widths separately from srcset attributes. One way of generating a srcset attribute is:```pythonsrcset = ub.create_srcset('image.jpg', start=300, stop=3000, tol=0.13)```The above is convenient if `start`, `stop`, and `tol`erance are known in advance. Another approach is to use `target_widths` to determine which combination of values for `start`, `stop`, and `tol`erance work best.```python&gt;&gt;&gt; from imgix import UrlBuilder, target_widths&gt;&gt;&gt; # Create&gt;&gt;&gt; widths = target_widths(300, 3000, 0.13)&gt;&gt;&gt; widths[300, 378, 476, 600, 756, 953, 1200, 1513, 1906, 2401, 3000]&gt;&gt;&gt; # Explore&gt;&gt;&gt; sm, md, lg = widths[:3], widths[3:7], widths[7:]&gt;&gt;&gt; widths = [w for w in widths[1::2]]&gt;&gt;&gt; widths[378, 600, 953, 1513, 2401]&gt;&gt;&gt; # Serve&gt;&gt;&gt; ub = UrlBuilder('demo.imgix.net')&gt;&gt;&gt; srcset = ub.create_srcset('image.png', widths=widths)&gt;&gt;&gt; srcset'https://demo.imgix.net/image.png?w=378 378w,\nhttps://demo.imgix.net/image.png?w=600 600w,\nhttps://demo.imgix.net/image.png?w=953 953w,\nhttps://demo.imgix.net/image.png?w=1513 1513w,\nhttps://demo.imgix.net/image.png?w=2401 2401w'```### Usage with UTF-8For usage with non-ASCII characters, please be sure that your project's source files specify UTF-8 encoding:``` python# -*- coding: utf-8 -*-```If you don't add this encoding, and you have an image with the name 'tiburón.jpeg', for example, you will get the following error trying to run your script:``` pythonSyntaxError: Non-ASCII character '***' in file test.py on line 6, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details```## The `ixlib` ParameterFor security and diagnostic purposes, we sign all requests with the language and version of library used to generate the URL.This can be disabled by setting `include_library_param` to `False` like so:``` pythonUrlBuilder('demo.imgix.net', include_library_param=False)```## TestingRun the following to execute the project's tests and code linter:``` bashtox```If you have cloned this repo or downloaded it locally, you can also run `python -m doctest -v README.md` to test the examples in this readme.## License[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-python.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-python?ref=badge_large)# Changelog## [4.0.0](https://github.com/imgix/imgix-python/compare/3.2.1...4.0.0) (2022-12-08)### Breaking Changes- feat: drop python 2 support ([#88](https://github.com/imgix/imgix-python/pull/88))- fix: fixed-height produces dpr-based srcset ([#88](https://github.com/imgix/imgix-python/pull/88))- feat: encode file path components ([#88](https://github.com/imgix/imgix-python/pull/88))### Features- feat: add path encoding to be disabled optionally ([#98](https://github.com/imgix/imgix-python/pull/98))- feat: customize variable qualities in options ([#102](https://github.com/imgix/imgix-python/pull/102))- feat: customize target device pixel ratios ([#103](https://github.com/imgix/imgix-python/pull/103))## [3.2.1](https://github.com/imgix/imgix-python/compare/3.2.0...3.2.1) (2020-06-10)- refactor: relax validation for min/max width values ([#80](https://github.com/imgix/imgix-python/pull/80))## [3.2.0](https://github.com/imgix/imgix-python/compare/3.1.2...3.2.0) (2020-06-05)- feat: create custom srcset ([#63](https://github.com/imgix/imgix-python/pull/63))- feat: introduce variable image output quality ([#65](https://github.com/imgix/imgix-python/pull/65))- fix: remove ensure even ([#72](https://github.com/imgix/imgix-python/pull/72))- feat: throw exceptions from validators ([#77](https://github.com/imgix/imgix-python/pull/77))- fix: convert tol to float ([#75](https://github.com/imgix/imgix-python/pull/75))## [3.1.2](https://github.com/imgix/imgix-python/compare/3.1.1...3.1.2) (2020-03-11)- Fix Python 2/3 compatibility issues  ([\#57](https://github.com/imgix/imgix-python/pull/57))## [3.1.1](https://github.com/imgix/imgix-python/compare/3.1.0...3.1.1) (2019-08-22)- fix: include dpr parameter when generating fixed-width srcset  ([\#50](https://github.com/imgix/imgix-python/pull/50))## [3.1.0](https://github.com/imgix/imgix-python/compare/3.0.0...3.1.0) (2019-08-22)- feat: add srcset generation  ([\#48](https://github.com/imgix/imgix-python/pull/48))- build(tox): improve code coverage reporting; parallelize testing  ([\#49](https://github.com/imgix/imgix-python/pull/49))## [3.0.0](https://github.com/imgix/imgix-python/compare/2.3.0...3.0.0) (2019-06-07)- fix: remove deprecated domain sharding functionality  ([\#44](https://github.com/imgix/imgix-python/pull/44))- fix: remove deprecated [opts]{.title-ref} parameter  ([\#46](https://github.com/imgix/imgix-python/pull/46))- fix: remove deprecated [sign\_with\_library\_version]{.title-ref}  parameter ([\#47](https://github.com/imgix/imgix-python/pull/47))## [2.3.0](https://github.com/imgix/imgix-python/compare/2.2.0...2.3.0) (2019-06-06)- feat: deprecate [domains]{.title-ref} in favor of  [domain]{.title-ref}  ([\#45](https://github.com/imgix/imgix-python/pull/45))## [2.2.0](https://github.com/imgix/imgix-python/compare/2.1.0...2.2.0) (2019-05-07)- deprecate domain sharding  ([\#41](https://github.com/imgix/imgix-python/pull/41))([\#42](https://github.com/imgix/imgix-python/pull/42))## 2.1.0 (2019-02-13)- Domain validation added during [UrlBuilder]{.title-ref}  initialization- [sign\_with\_library\_version]{.title-ref} parameter from  [UrlBuilder]{.title-ref} deprecated in favor of  [include\_library\_param]{.title-ref}.## 2.0.0 (2018-08-08)- [UrlBuilder]{.title-ref}\'s [sign\_mode]{.title-ref} argument  removed- [opts]{.title-ref} parameter from  [UrlBuilder.create\_url]{.title-ref} deprecated in favor of  [params]{.title-ref}.## 1.2.0 (2018-06-20)- [sign\_mode]{.title-ref} argument deprecated- License corrected to BSD-2-Clause.- Docstrings added to classes and methods.## 1.1.2 (2016-06-30)- Proper encodeURIComponent-style URL encoding for web proxy sources.  See \#21 for more information.## 1.1.0 (2016-02-26)- Added automatic Base64 encoding for all Base64 variant parameters.- Properly encoding all query keys and values.## 1.0.0 (2016-01-15)- Change UrlBuilder\#create_url to accept dict instead of kwargs.  This fixes an issue with reserved words that are also imgix params  potentially causing errors.## 0.2.1 (2016-01-15)- Fixed a bug where any passed params that were falsy would not be  passed through to imgix.## 0.2.0 (2015-06-15)- Introduces defaulting to HTTPS on all requests, per the  imgix-blueprint.## 0.1.0 (2015-06-11)- Includes new functionality to sign every URL with an ixlib parameter  for diagnostic purposes.## 0.0.4 (2015-06-10)- New README note about publishing packages</longdescription>
</pkgmetadata>