<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Gentools========.. image:: https://img.shields.io/pypi/v/gentools.svg?style=flat-square    :target: https://pypi.python.org/pypi/gentools.. image:: https://img.shields.io/pypi/l/gentools.svg?style=flat-square    :target: https://pypi.python.org/pypi/gentools.. image:: https://img.shields.io/pypi/pyversions/gentools.svg?style=flat-square    :target: https://pypi.python.org/pypi/gentools.. image:: https://img.shields.io/travis/ariebovenberg/gentools.svg?style=flat-square    :target: https://travis-ci.org/ariebovenberg/gentools.. image:: https://img.shields.io/codecov/c/github/ariebovenberg/gentools.svg?style=flat-square    :target: https://coveralls.io/github/ariebovenberg/gentools?branch=main.. image:: https://img.shields.io/readthedocs/gentools.svg?style=flat-square    :target: http://gentools.readthedocs.io/en/latest/?badge=latestTools for generators, generator functions, and generator-based coroutines.Key features:* Create reusable generators* Compose generators* Build python 2/3-compatible generators (``gentools`` version &lt;1.2 only)Installation------------.. code-block:: bash   pip install gentoolsExamples--------- Make generator functions reusable:.. code-block:: python   &gt;&gt;&gt; @reusable   ... def countdown(value, step):   ...     while value &gt; 0:   ...         yield value   ...         value -= step   &gt;&gt;&gt; from_3 = countdown(3, step=1)   &gt;&gt;&gt; list(from_3)   [3, 2, 1]   &gt;&gt;&gt; list(from_3)   [3, 2, 1]   &gt;&gt;&gt; isinstance(from_3, countdown)  # generator func is wrapped in a class   True   &gt;&gt;&gt; from_3.step  # attribute access to arguments   1   &gt;&gt;&gt; from_3.replace(value=5)  # create new instance with replaced fields   countdown(value=5, step=1)  # descriptive repr()- map a generator's ``yield``, ``send``, and ``return`` values:.. code-block:: python   &gt;&gt;&gt; @map_return('final value: {}'.format)   ... @map_send(int)   ... @map_yield('the current max is: {}'.format)   ... def my_max(value):   ...     while value &lt; 100:   ...         newvalue = yield value   ...         if newvalue &gt; value:   ...             value = newvalue   ...     return value   &gt;&gt;&gt; gen = my_max(5)   &gt;&gt;&gt; next(gen)   'the current max is: 5'   &gt;&gt;&gt; gen.send(11.3)   'the current max is: 11'   &gt;&gt;&gt; gen.send(104)   StopIteration('final value: 104')- relay a generator's yield/send interactions through another generator:.. code-block:: python   &gt;&gt;&gt; def try_until_positive(outvalue):   ...     value = yield outvalue   ...     while value &lt; 0:   ...         value = yield 'not positive, try again'   ...     return value   &gt;&gt;&gt; @relay(try_until_positive)   ... def my_max(value):   ...     while value &lt; 100:   ...         newvalue = yield value   ...         if newvalue &gt; value:   ...             value = newvalue   ...     return value   &gt;&gt;&gt; gen = my_max(5)   &gt;&gt;&gt; next(gen)   5   &gt;&gt;&gt; gen.send(-4)   'not positive, try again'   &gt;&gt;&gt; gen.send(-1)   'not positive, try again'   &gt;&gt;&gt; gen.send(8)   8   &gt;&gt;&gt; gen.send(104)   StopIteration(104)- make python 2/3 compatible generators with ``return``.   (`gentools` version &lt;1.2 only).. code-block:: python   &gt;&gt;&gt; @py2_compatible   ... def my_max(value):   ...     while value &lt; 100:   ...         newvalue = yield value   ...         if newvalue &gt; value:   ...             value = newvalue   ...     return_(value)</longdescription>
</pkgmetadata>