<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># conjur-api-python3Python3-based API SDK for [Conjur OSS](https://www.conjur.org/). The repoalso includes a self-contained CLI tool (`conjur-cli`) that wraps the APIin a simple executable script/binary.[![Test Coverage](https://api.codeclimate.com/v1/badges/d90d69a3942120b36785/test_coverage)](https://codeclimate.com/github/cyberark/conjur-api-python3/test_coverage) [![Maintainability](https://api.codeclimate.com/v1/badges/d90d69a3942120b36785/maintainability)](https://codeclimate.com/github/cyberark/conjur-api-python3/maintainability)---### **Status**: Alpha#### **Warning: Naming and APIs are still subject to breaking changes!**---## Installing the code### Using conjur-api-python3 with Conjur OSS Are you using this project with [Conjur OSS](https://github.com/cyberark/conjur)? Then we **strongly** recommend choosing the version of this project to use from the latest [Conjur OSS suite release](https://docs.conjur.org/Latest/en/Content/Overview/Conjur-OSS-Suite-Overview.html). Conjur maintainers perform additional testing on the suite release versions to ensure compatibility. When possible, upgrade your Conjur version to match the [latest suite release](https://docs.conjur.org/Latest/en/Content/ReleaseNotes/ConjurOSS-suite-RN.htm); when using integrations, choose the latest suite release that matches your Conjur version. For any questions, please contact us on [Discourse](https://discuss.cyberarkcommons.org/c/conjur/5).### From PyPI```$ pip3 install conjur-client```### From source```$ pip3 install .```Note: On some machines, you have to use `pip` instead of `pip3` but in most cases,you will want to use `pip3` if it's available for your platform.## Usage### CLICLI can either be used with the included executable script:```shellconjur-cli --insecure -l https://myserver -a orgname -u admin -p secret \  variable get foo/bar```Or through the installed module:```shellpython -m conjur --insecure -l https://myserver -a orgname -u admin -p secret list```### APIMost usage is done by creating a Client instance and then invoking the API on it:#### With login ID and password```python3#!/usr/bin/env python3from conjur import Clientclient = Client(url='https://conjur.myorg.com',                account='default',                login_id='admin',                password='mypassword',                ca_bundle='/path/to/my/ca/bundle')print(&quot;Setting variable...&quot;)client.set('conjur/my/variable', 'new value')print(&quot;Fetching variable...&quot;)new_value = client.get('conjur/my/variable')print(&quot;Variable value is:&quot;, new_value.decode('utf-8'))```#### With login Id and API keyWrite the code same as in the first example but create the client with the following arguments:```python3client = Client(url='https://conjur.myorg.com',                account='default',                login_id='admin',                api_key='myapikey',                ca_bundle='/path/to/my/ca/bundle')```#### With `.netrc` and `.conjurrc` settingsWrite the code same as in the first example but create the client with the following arguments:```python3client = Client()```## Currently supported client methods:#### `get(variable_id)`Gets a variable value based on its ID. Variable is binary datathat should be decoded to your system's encoding (e.g.`get(variable_id).decode('utf-8')`.#### `get_many(variable_id[,variable_id...])`Gets multiple variable values based on their IDs. Variables arereturned in a dictionary that maps the variable name to its value.#### `set(variable_id, value)`Sets a variable to a specific value based on its ID.Note: Policy to create the variable must have been already loadedotherwise you will get a 404 error during invocation.#### `apply_policy_file(policy_name, policy_file)`Applies a file-based YAML to a named policy. This method onlysupports additive changes. Result is a dictionary object constructedfrom the returned JSON data.#### `replace_policy_file(policy_name, policy_file)`Replaces a named policy with one from the provided file. This isusually a destructive invocation. Result is a dictionary objectconstructed from the returned JSON data.#### `delete_policy_file(policy_name, policy_file)`Modifies an existing Conjur policy. Data may be explicitlydeleted using the !delete, !revoke, and !deny statements. Unlike&quot;replace&quot; mode, no data is ever implicitly deleted. Result is adictionary object constructed from the returned JSON data.#### `list()`Returns a Python list of all the available resources for the currentaccount.#### `whoami()`_Note: This method requires Conjur v1.9+_Returns a Python dictionary of information about the client making anAPI request (such as its ip address, user, account,token expiration date etc.).## ContributingWe store instructions for development and guidelines for how to build and test thisproject in the [CONTRIBUTING.md](CONTRIBUTING.md) - please refer to that documentif you would like to contribute.## LicenseThis project is [licensed under Apache License v2.0](LICENSE.md)</longdescription>
</pkgmetadata>