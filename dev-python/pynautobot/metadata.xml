<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![pynautobot](docs/nautobot_logo.svg &quot;Nautobot logo&quot;)# PynautobotPython API client library for [Nautobot](https://github.com/nautobot/nautobot).&gt; Pynautobot was initially developed as a fork of [pynetbox](https://github.com/digitalocean/pynetbox/).&gt; Pynetbox was originally developed by Zach Moody at DigitalOcean and the NetBox Community.The complete documentation for pynautobot can be found at [Read the Docs](https://pynautobot.readthedocs.io/en/stable/).Questions? Comments? Join us in the **#nautobot** Slack channel on [Network to Code](https://networktocode.slack.com)!## InstallationYou can install via [pip](#using-pip) or [poetry](#using-poetry)### Using pip```shell$ pip install pynautobot...```### Using poetry```shell$ git clone https://github.com/nautobot/pynautobot.git...$ pip install poetry...$ poetry shellVirtual environment already activated: /home/user/pynautobot/.venv$ poetry install...```## Quick StartA short introduction is provided here; the full documention for pynautobot is at [Read the Docs](http://pynautobot.readthedocs.io/).To begin, import pynautobot and instantiate an `Api` object, passing the `url` and `token`.```pythonimport pynautobotnautobot = pynautobot.api(    url=&quot;http://localhost:8000&quot;,    token=&quot;d6f4e314a5b5fefd164995169f28ae32d987704f&quot;,)```The Api object provides access to the Apps in Nautobot.The Apps provide access to the Models and the field data stored in Nautobot.Pynautobot uses the `Endpoint` class to represent Models.For example, here is how to access **Devices** stored in Nautobot:```pythondevices = nautobot.dcim.devicesdevices&lt;pynautobot.core.endpoint.Endpoint object at 0x7fe801e62fa0&gt;```## JobsPynautobot provides a specialized `Endpoint` class to represent the Jobs model. This class is called `JobsEndpoint`.This extends the `Endpoint` class by adding the `run` method so pynautobot can be used to call/execute a job run.1. Run from a instance of a job.```python&gt;&gt;&gt; gc_backup_job = nautobot.extras.jobs.all()[14]&gt;&gt;&gt; job_result = gc_backup_job.run()&gt;&gt;&gt; job_result.result.id'1838f8bd-440f-434e-9f29-82b46549a31d' # &lt;-- Job Result ID.```2. Run with Job Inputs```pythonjob = nautobot.extras.jobs.all()[7]job.run(data={&quot;hostname_regex&quot;: &quot;.*&quot;})```3. Run by providing the job id```python&gt;&gt;&gt; gc_backup_job = nautobot.extras.jobs.run(class_path=nautobot.extras.jobs.all()[14].id)&gt;&gt;&gt; gc_backup_job.result.id'548832dc-e586-4c65-a7c1-a4e799398a3b' # &lt;-- Job Result ID.```## QueriesPynautobot provides several ways to retrieve objects from Nautobot.Only the `get()` method is show here.To continue from the example above, the `Endpoint` object returned will be used to `get`the device named _hq-access-01_.```pythonswitch = devices.get(nam=&quot;hq-access-01&quot;)```The object returned from the `get()` method is an implementation of the `Record` class.This object provides access to the field data from Nautobot.```pythonswitch.id'6929b68d-8f87-4470-8377-e7fdc933a2bb'switch.name'hq-access-01'switch.sitehq```### ThreadingPynautobot supports multithreaded calls for `.filter()` and `.all()` queries. It is **highly recommended** you have `MAX_PAGE_SIZE` in your Nautobot install set to anything _except_ `0` or `None`. The default value of `1000` is usually a good value to use. To enable threading, add `threading=True` parameter when instantiating the `Api` object:```pythonnautobot = pynautobot.api(    url=&quot;http://localhost:8000&quot;,    token=&quot;d6f4e314a5b5fefd164995169f28ae32d987704f&quot;,    threading=True,)```### VersioningUsed for Nautobot Rest API versioning. Versioning can be controlled globally by setting `api_version` on initialization of the `API` class and/or for a specific request e.g (`list()`, `get()`, `create()` etc.) by setting an optional `api_version` parameter.**Global versioning**```pythonimport pynautobotnautobot = pynautobot.api(    url=&quot;http://localhost:8000&quot;,    token=&quot;d6f4e314a5b5fefd164995169f28ae32d987704f&quot;,    api_version=&quot;1.3&quot;)```**Request specific versioning**```pythonimport pynautobotnautobot = pynautobot.api(  url=&quot;http://localhost:8000&quot;, token=&quot;d6f4e314a5b5fefd164995169f28ae32d987704f&quot;,)tags = nautobot.extras.tagstags.create(name=&quot;Tag&quot;, slug=&quot;tag&quot;, api_version=&quot;1.2&quot;,)tags.list(api_version=&quot;1.3&quot;,)```### Retry logicBy default, the client will not retry any operation. This behavior can be adjusted via the `retries` optional parameters. This will only affect for HTTP codes: 429, 500, 502, 503 and 504.**Retries**```pythonimport pynautobotnautobot = pynautobot.api(    url=&quot;http://localhost:8000&quot;,    token=&quot;d6f4e314a5b5fefd164995169f28ae32d987704f&quot;,    retries=3)```## Related projectsPlease see [our wiki](https://github.com/nautobot/nautobot/wiki/Related-Projects)for a list of relevant community projects.</longdescription>
</pkgmetadata>