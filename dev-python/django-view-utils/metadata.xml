<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django View Utils[![Tests](https://github.com/valberg/django-view-utils/actions/workflows/test.yml/badge.svg)](https://github.com/valberg/django-view-utils/actions/workflows/test.yml)[![Documentation](https://readthedocs.org/projects/django-view-utils/badge/?version=latest)](https://django-view-utils.readthedocs.io/en/latest/?badge=latest)[![PyPI - Version](https://img.shields.io/pypi/v/django-view-utils.svg)](https://pypi.org/project/django-view-utils)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-view-utils.svg)](https://pypi.org/project/django-view-utils)-----**django-view-utils** aims to be a collection of useful utilities for Django views. Mainly function based views.## Features### `@view` decoratorThe `@view` decorator is a simple way to create a view function and register it with a URL.```python# &lt;app&gt;/views.urlfrom django_view_utils import view@view(paths=&quot;/hello-world/&quot;, name=&quot;hello-world&quot;)def my_view(request):    ...# &lt;app&gt;/urls.pyfrom django.urls import pathfrom django_view_utils import include_view_urlsurlpatterns = [    path(&quot;&quot;, include_view_urls()),]```By default, django-view-utils will look for a `views.py` file in your app.This can be disabled by setting `DJANGO_VIEW_UTILS_AUTO_DISCOVER` to `False`, then registering view modules is up to you by supplying the `modules` keyword argument to `include_view_urls`.#### `@view` decorator optionsConveniently it also supports `login_required`, `staff_required` and `permission_required`.```python@view(paths=&quot;/hello-world/&quot;, name=&quot;hello-world&quot;, login_required=True)def my_view(request):    ...@view(paths=&quot;/hello-world/&quot;, name=&quot;hello-world&quot;, staff_required=True)def my_view(request):    ...@view(paths=&quot;/hello-world/&quot;, name=&quot;hello-world&quot;, permissions=[&quot;myapp.can_do_something&quot;])def my_view(request):    ...```#### InspirationThis decorator is very much inspired by the idea of &quot;locality of behaviour&quot; by Carson Gross (creator of HTMX): https://htmx.org/essays/locality-of-behaviour/.It also bears resemblance to the `@app.route` decorator in Flask, the `@app.&lt;HTTP method&gt;` decorator in FastAPI and probably many other Python web frameworks.**Table of Contents**- [Installation](#installation)- [License](#license)## Installation```consolepip install django-view-utils```## Development```consolegit clonecd django-view-utilspip install hatchhatch run tests:covhatch run tests:typecheck```## License`django-view-utils` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.</longdescription>
</pkgmetadata>