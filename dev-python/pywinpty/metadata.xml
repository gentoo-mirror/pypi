<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyWinpty: Pseudoterminals for Windows in Python[![Project License - MIT](https://img.shields.io/pypi/l/pywinpty.svg)](./LICENSE.txt)[![pypi version](https://img.shields.io/pypi/v/pywinpty.svg)](https://pypi.org/project/pywinpty/)[![conda version](https://img.shields.io/conda/vn/conda-forge/pywinpty.svg)](https://www.anaconda.com/download/)[![download count](https://img.shields.io/conda/dn/conda-forge/pywinpty.svg)](https://www.anaconda.com/download/)[![Downloads](https://pepy.tech/badge/pywinpty)](https://pepy.tech/project/pywinpty)[![PyPI status](https://img.shields.io/pypi/status/pywinpty.svg)](https://github.com/spyder-ide/pywinpty)[![Windows tests](https://github.com/andfoy/pywinpty/actions/workflows/windows_build.yml/badge.svg)](https://github.com/andfoy/pywinpty/actions/workflows/windows_build.yml)*Copyright © 2017–2022 Spyder Project Contributors**Copyright © 2022– Edgar Andrés Margffoy Tuay*## OverviewPyWinpty allows creating and communicating with Windows processes that receive input and print outputs via console input and output pipes. PyWinpty supports both the native [ConPTY](https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/) interface and the previous, fallback [winpty](https://github.com/rprichard/winpty) library.## DependenciesTo compile pywinpty sources, you must have [Rust](https://rustup.rs/) installed.Optionally, you can also have Winpty's C header and library files available on your include path.## InstallationYou can install this library by using conda or pip package managers, as it follows:Using conda (Recommended):```bashconda install pywinpty```Using pip:```bashpip install pywinpty```## Building from sourceTo build from sources, you will require both a working stable or nightly Rust toolchain withtarget `x86_64-pc-windows-msvc`, which can be installed using [rustup](https://rustup.rs/).Optionally, this library can be linked against winpty library, which you can install using conda-forge:```batchconda install winpty -c conda-forge```If you don't want to use conda, you will need to have the winpty binaries and headers available on your PATH.Finally, pywinpty uses [Maturin](https://github.com/PyO3/maturin) as the build backend, which can be installed using `pip`:```batchpip install maturin```To test your compilation environment settings, you can build pywinpty sources locally, byexecuting:```bashmaturin develop```This package depends on the following Rust crates:* [PyO3](https://github.com/PyO3/pyo3): Library used to produce Python bindings from Rust code.* [WinPTY-rs](https://github.com/andfoy/winpty-rs): Create and spawn processes inside a pseudoterminal in Windows from Rust.* [Maturin](https://github.com/PyO3/maturin): Build system to build and publish Rust-based Python packages.## Package usagePywinpty offers a single python wrapper around winpty library functions.This implies that using a single object (``winpty.PTY``) it is possible to access to all functionality, as it follows:```python# High level usage using `spawn`from winpty import PtyProcessproc = PtyProcess.spawn('python')proc.write('print(&quot;hello, world!&quot;)\r\n')proc.write('exit()\r\n')while proc.isalive():print(proc.readline())# Low level usage using the raw `PTY` objectfrom winpty import PTY# Start a new winpty-agent process of size (cols, rows)cols, rows = 80, 25process = PTY(cols, rows)# Spawn a new console process, e.g., CMDprocess.spawn(br'C:\windows\system32\cmd.exe')# Read console output (Unicode)process.read()# Write input to console (Unicode)process.write(b'Text')# Resize console sizenew_cols, new_rows = 90, 30process.set_size(new_cols, new_rows)# Know if the process is alivealive = process.isalive()# End winpty-agent processdel process```## Running testsWe use pytest to run tests as it follows (after calling ``maturin develop``), the test suite dependson pytest-lazy-fixture, which can be installed via pip:```batchpip install pytest pytest-lazy-fixture flaky```All the tests can be exceuted using the following command```bashpython runtests.py```## ChangelogVisit our [CHANGELOG](CHANGELOG.md) file to learn more about our new features and improvements.## Contribution guidelinesWe follow PEP8 and PEP257 for pure python packages and Rust to compile extensions. We use MyPy type annotations for all functions and classes declared on this package. Feel free to send a PR or create an issue if you have any problem/question.</longdescription>
</pkgmetadata>