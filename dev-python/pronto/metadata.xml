<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `pronto` [![Stars](https://img.shields.io/github/stars/althonos/pronto.svg?style=social&amp;maxAge=3600&amp;label=Star)](https://github.com/althonos/pronto/stargazers)*A Python frontend to ontologies.*[![Actions](https://img.shields.io/github/actions/workflow/status/althonos/pronto/test.yml?branch=master&amp;logo=github&amp;style=flat-square&amp;maxAge=300)](https://github.com/althonos/pronto/actions)[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&amp;maxAge=2678400)](https://choosealicense.com/licenses/mit/)[![Source](https://img.shields.io/badge/source-GitHub-303030.svg?maxAge=2678400&amp;style=flat-square)](https://github.com/althonos/pronto/)[![Docs](https://img.shields.io/readthedocs/pronto?style=flat-square&amp;maxAge=3600)](http://pronto.readthedocs.io/en/stable/?badge=stable)[![Coverage](https://img.shields.io/codecov/c/gh/althonos/pronto?style=flat-square&amp;maxAge=3600)](https://codecov.io/gh/althonos/pronto/)[![Sanity](https://img.shields.io/codacy/grade/157b5fd24e5648ea80580f28399e79a4.svg?style=flat-square&amp;maxAge=3600)](https://codacy.com/app/althonos/pronto)[![PyPI](https://img.shields.io/pypi/v/pronto.svg?style=flat-square&amp;maxAge=3600)](https://pypi.python.org/pypi/pronto)[![Bioconda](https://img.shields.io/conda/vn/bioconda/pronto?style=flat-square&amp;maxAge=3600)](https://anaconda.org/bioconda/pronto)[![Versions](https://img.shields.io/pypi/pyversions/pronto.svg?style=flat-square&amp;maxAge=3600)](https://pypi.org/project/pronto/#files)[![Wheel](https://img.shields.io/pypi/wheel/pronto?style=flat-square&amp;maxAge=3600)](https://pypi.org/project/pronto/#files)[![Changelog](https://img.shields.io/badge/keep%20a-changelog-8A0707.svg?maxAge=2678400&amp;style=flat-square)](https://github.com/althonos/pronto/blob/master/CHANGELOG.md)[![GitHub issues](https://img.shields.io/github/issues/althonos/pronto.svg?style=flat-square&amp;maxAge=600)](https://github.com/althonos/pronto/issues)[![DOI](https://img.shields.io/badge/doi-10.5281%2Fzenodo.595572-purple?style=flat-square&amp;maxAge=2678400)](https://doi.org/10.5281/zenodo.595572)[![Downloads](https://img.shields.io/pypi/dm/pronto?style=flat-square&amp;color=303f9f&amp;maxAge=86400&amp;label=downloads)](https://pepy.tech/project/pronto)## üö© Table of Contents- [Overview](#%EF%B8%8F-overview)- [Supported Languages](#%EF%B8%8F-supported-languages)- [Installing](#-installing)- [Examples](#-examples)- [API Reference](#-api-reference)- [License](#-license)## üó∫Ô∏è OverviewPronto is a Python library to parse, browse, create, and exportontologies, supporting several ontology languages and formats. Itimplement the specifications of the[Open Biomedical Ontologies 1.4](http://owlcollab.github.io/oboformat/doc/obo-syntax.html)in the form of an safe high-level interface. *If you're only interested inparsing OBO or OBO Graphs document, you may wish to consider[`fastobo`](https://pypi.org/project/fastobo) instead.*## üè≥Ô∏è Supported Languages- [Open Biomedical Ontologies 1.4](http://owlcollab.github.io/oboformat/doc/GO.format.obo-1_4.html).  *Because this format is fairly new, not all OBO ontologies can be parsed at the  moment. See the [OBO Foundry roadmap](https://github.com/orgs/fastobo/projects/2)  listing the compliant ontologies, and don't hesitate to contact their developers  to push adoption forward.*- [OBO Graphs](https://github.com/geneontology/obographs) in [JSON](http://json.org/)  format. *The format is not yet stabilized to the results may change from file  to file.*- [Ontology Web Language 2](https://www.w3.org/TR/owl2-overview/)  in [RDF/XML format](https://www.w3.org/TR/2012/REC-owl2-mapping-to-rdf-20121211/).  *OWL2 ontologies are reverse translated to OBO using the mapping defined in the  [OBO 1.4 Semantics](http://owlcollab.github.io/oboformat/doc/obo-syntax.html).*## üîß InstallingInstalling with `pip` is the easiest:```console# pip install pronto          # if you have the admin rights$ pip install pronto --user   # install it in a user-site directory```There is also a `conda` recipe in the `bioconda` channel:```console$ conda install -c bioconda pronto```Finally, a development version can be installed from GitHubusing `setuptools`, provided you have the right dependenciesinstalled already:```console$ git clone https://github.com/althonos/pronto$ cd pronto# python setup.py install```## üí° ExamplesIf you're only reading ontologies, you'll only use the `Ontology`class, which is the main entry point.```python&gt;&gt;&gt; from pronto import Ontology```It can be instantiated from a path to an ontology in one of the supportedformats, even if the file is compressed:```python&gt;&gt;&gt; go = Ontology(&quot;tests/data/go.obo.gz&quot;)```Loading a file from a persistent URL is also supported, although you may alsowant to use the `Ontology.from_obo_library` method if you're using persistentURLs a lot:```python&gt;&gt;&gt; cl = Ontology(&quot;http://purl.obolibrary.org/obo/cl.obo&quot;)&gt;&gt;&gt; stato = Ontology.from_obo_library(&quot;stato.owl&quot;)```### üè∑Ô∏è Get a term by accession`Ontology` objects can be used as mappings to access any entitythey contain from their identifier in compact form:```python&gt;&gt;&gt; cl['CL:0002116']Term('CL:0002116', name='B220-low CD38-positive unswitched memory B cell')```Note that when loading an OWL ontology, URIs will be compacted to CURIEswhenever possible:```python&gt;&gt;&gt; aeo = Ontology.from_obo_library(&quot;aeo.owl&quot;)&gt;&gt;&gt; aeo[&quot;AEO:0000078&quot;]Term('AEO:0000078', name='lumen of tube')```### üñäÔ∏è Create a new term from scratchWe can load an ontology, and edit it locally. Here, we add a new protein classto the Protein Ontology.```python&gt;&gt;&gt; pr = Ontology.from_obo_library(&quot;pr.obo&quot;)&gt;&gt;&gt; brh = ms.create_term(&quot;PR:XXXXXXXX&quot;)&gt;&gt;&gt; brh.name = &quot;Bacteriorhodopsin&quot;&gt;&gt;&gt; brh.superclasses().add(pr[&quot;PR:000001094&quot;])  # is a rhodopsin-like G-protein&gt;&gt;&gt; brh.disjoint_from.add(pr[&quot;PR:000036194&quot;])   # disjoint from eukaryotic proteins```### ‚úèÔ∏è Convert an OWL ontology to OBO formatThe `Ontology.dump` method can be used to serialize an ontology to any of thesupported formats (currently OBO and OBO JSON):```python&gt;&gt;&gt; edam = Ontology(&quot;http://edamontology.org/EDAM.owl&quot;)&gt;&gt;&gt; with open(&quot;edam.obo&quot;, &quot;wb&quot;) as f:...     edam.dump(f, format=&quot;obo&quot;)```### üåø Find ontology terms without subclassesThe `terms` method of `Ontology` instances can be used toiterate over all the terms in the ontology (including theones that are imported). We can then use the `is_leaf`method of `Term` objects to check is the term is a leaf in theclass inclusion graph.```python&gt;&gt;&gt; ms = Ontology(&quot;ms.obo&quot;)&gt;&gt;&gt; for term in ms.terms():...     if term.is_leaf():...         print(term.id)MS:0000000MS:1000001...```### ü§´ Silence warnings`pronto` is explicit about the parts of the code that are doing non-standard assumptions, or missing capabilities to handle certainconstructs. It does so by raising warnings with the `warnings` module, which can get quite verbose. If you are fine with the inconsistencies, you can manually disable warning reports in your consumer code with the `filterwarnings` function:```pythonimport warningsimport prontowarnings.filterwarnings(&quot;ignore&quot;, category=pronto.warnings.ProntoWarning)```&lt;!-- ### ü§ù Merging several ontologies --&gt;## üìñ API ReferenceA complete API reference can be found in the[online documentation](https://pronto.readthedocs.io/en/latest/api.html), ordirectly from the command line using `pydoc`:```console$ pydoc pronto.Ontology```## üìú LicenseThis library is provided under the open-source[MIT license](https://choosealicense.com/licenses/mit/).Please cite this library if you are using it in a scientificcontext using the following DOI:[**10.5281/zenodo.595572**](https://doi.org/10.5281/zenodo.595572)</longdescription>
</pkgmetadata>