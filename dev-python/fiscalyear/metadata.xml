<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://github.com/adamjstewart/fiscalyear/actions/workflows/style.yaml/badge.svg   :target: https://github.com/adamjstewart/fiscalyear/actions/workflows/style.yaml.. image:: https://github.com/adamjstewart/fiscalyear/actions/workflows/tests.yaml/badge.svg   :target: https://github.com/adamjstewart/fiscalyear/actions/workflows/tests.yaml.. image:: https://codecov.io/gh/adamjstewart/fiscalyear/branch/master/graph/badge.svg   :target: https://codecov.io/gh/adamjstewart/fiscalyear.. image:: https://readthedocs.org/projects/fiscalyear/badge/?version=latest   :target: https://fiscalyear.readthedocs.io.. image:: https://badge.fury.io/py/fiscalyear.svg   :target: https://pypi.org/project/fiscalyear/.. image:: https://anaconda.org/conda-forge/fiscalyear/badges/version.svg   :target: https://anaconda.org/conda-forge/fiscalyear.. image:: https://img.shields.io/spack/v/py-torchgeo   :target: https://spack.readthedocs.io/en/latest/package_list.html#py-torchgeoOverview========`fiscalyear &lt;https://github.com/adamjstewart/fiscalyear&gt;`_ is a small, lightweight Python module providing helpful utilities for managing the fiscal calendar. It is designed as an extension of the built-in `datetime &lt;https://docs.python.org/3/library/datetime.html&gt;`_ and `calendar &lt;https://docs.python.org/3/library/calendar.html&gt;`_ modules, adding the ability to query the fiscal year, fiscal quarter, fiscal month, and fiscal day of a date or datetime object.Basic Usage===========``fiscalyear`` provides several useful classes.FiscalYear----------The ``FiscalYear`` class provides an object for storing information about the start and end of a particular fiscal year... code-block:: python   &gt;&gt;&gt; from fiscalyear import *   &gt;&gt;&gt; a = FiscalYear(2017)   &gt;&gt;&gt; a.start   FiscalDateTime(2016, 10, 1, 0, 0)   &gt;&gt;&gt; a.end   FiscalDateTime(2017, 9, 30, 23, 59, 59)   &gt;&gt;&gt; a.isleap   FalseYou can also get the current ``FiscalYear`` with:.. code-block:: python   &gt;&gt;&gt; FiscalYear.current()   FiscalYear(2018)FiscalQuarter-------------The ``FiscalYear`` class also allows you to query information about a specific fiscal quarter... code-block:: python   &gt;&gt;&gt; a.q3.start   FiscalDateTime(2017, 4, 1, 0, 0)   &gt;&gt;&gt; a.q3.end   FiscalDateTime(2017, 6, 30, 23, 59, 59)These objects represent the standalone ``FiscalQuarter`` class... code-block:: python   &gt;&gt;&gt; b = FiscalQuarter(2017, 3)   &gt;&gt;&gt; b.start   FiscalDateTime(2017, 4, 1, 0, 0)   &gt;&gt;&gt; b.end   FiscalDateTime(2017, 6, 30, 23, 59, 59)   &gt;&gt;&gt; a.q3 == b   True   &gt;&gt;&gt; b in a   True   &gt;&gt;&gt; b.next_fiscal_quarter   FiscalQuarter(2017, 4)You can also get the current ``FiscalQuarter`` with:.. code-block:: python   &gt;&gt;&gt; FiscalQuarter.current()   FiscalQuarter(2018, 2)FiscalMonth-----------The ``FiscalMonth`` class allows you to keep track of the fiscal month... code-block:: python   &gt;&gt;&gt; c = FiscalMonth(2017, 9)   &gt;&gt;&gt; c.start   FiscalDateTime(2017, 6, 1, 0, 0)   &gt;&gt;&gt; c.end   FiscalDateTime(2017, 6, 30, 23, 59, 59)   &gt;&gt;&gt; c in a   True   &gt;&gt;&gt; c in b   True   &gt;&gt;&gt; c.next_fiscal_month   FiscalMonth(2017, 10)You can also get the current ``FiscalMonth`` with:.. code-block:: python   &gt;&gt;&gt; FiscalMonth.current()   FiscalMonth(2018, 4)FiscalDay---------To keep track of the fiscal day, use the ``FiscalDay`` class... code-block:: python   &gt;&gt;&gt; d = FiscalDay(2017, 250)   &gt;&gt;&gt; d.start   FiscalDateTime(2017, 6, 6, 0, 0)   &gt;&gt;&gt; d.end   FiscalDateTime(2017, 6, 6, 23, 59, 59)   &gt;&gt;&gt; d in a   True   &gt;&gt;&gt; d in b   True   &gt;&gt;&gt; d in c   True   &gt;&gt;&gt; d.next_fiscal_day   FiscalDay(2017, 251)You can also get the current ``FiscalDay`` with:.. code-block:: python   &gt;&gt;&gt; FiscalDay.current()   FiscalDay(2018, 94)FiscalDateTime--------------The start and end of each of the above objects are stored as instances of the ``FiscalDateTime`` class. This class provides all of the same features as the ``datetime`` class, with the addition of the ability to query the fiscal year, fiscal quarter, fiscal month, and fiscal day... code-block:: python   &gt;&gt;&gt; e = FiscalDateTime.now()   &gt;&gt;&gt; e   FiscalDateTime(2017, 4, 8, 20, 30, 31, 105323)   &gt;&gt;&gt; e.fiscal_year   2017   &gt;&gt;&gt; e.fiscal_quarter   3   &gt;&gt;&gt; e.next_fiscal_quarter   FiscalQuarter(2017, 4)   &gt;&gt;&gt; e.fiscal_month   7   &gt;&gt;&gt; e.fiscal_day   190FiscalDate----------If you don't care about the time component of the ``FiscalDateTime`` class, the ``FiscalDate`` class is right for you... code-block:: python   &gt;&gt;&gt; f = FiscalDate.today()   &gt;&gt;&gt; f   FiscalDate(2017, 4, 8)   &gt;&gt;&gt; f.fiscal_year   2017   &gt;&gt;&gt; f.prev_fiscal_year   FiscalYear(2016)Installation============``fiscalyear`` has no dependencies, making it simple and easy to install. The recommended way to install ``fiscalyear`` is with ``pip``... code-block:: console   $ pip install fiscalyearFor alternate installation methods, see the `Installation Documentation &lt;http://fiscalyear.readthedocs.io/en/latest/installation.html&gt;`_.Documentation=============Documentation is hosted on `Read the Docs &lt;http://fiscalyear.readthedocs.io/en/latest/index.html&gt;`_.</longdescription>
</pkgmetadata>