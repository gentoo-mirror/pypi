<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># rtoml[![Actions Status](https://github.com/samuelcolvin/rtoml/workflows/CI/badge.svg)](https://github.com/samuelcolvin/rtoml/actions?query=event%3Apush+branch%3Amain+workflow%3ACI)[![Coverage](https://codecov.io/gh/samuelcolvin/rtoml/branch/main/graph/badge.svg)](https://codecov.io/gh/samuelcolvin/rtoml)[![pypi](https://img.shields.io/pypi/v/rtoml.svg)](https://pypi.python.org/pypi/rtoml)[![versions](https://img.shields.io/pypi/pyversions/rtoml.svg)](https://github.com/samuelcolvin/rtoml)[![license](https://img.shields.io/github/license/samuelcolvin/rtoml.svg)](https://github.com/samuelcolvin/rtoml/blob/main/LICENSE)A better TOML library for python implemented in rust.## Why Use rtoml* Correctness: rtoml is based on the widely used and very stable [toml-rs](https://github.com/alexcrichton/toml-rs)library, it passes all the [standard TOML tests](https://github.com/BurntSushi/toml-test) as well as having 100%coverage on python code. Other TOML libraries for python I tried all failed to parse some valid TOML.* Performance: see [github.com/pwwang/toml-bench](https://github.com/pwwang/toml-bench) -  rtoml is much faster than pure Python TOML libraries.## InstallRequires `python&gt;=3.7`, binaries are available from pypi for Linux, macOS and Windows,see [here](https://pypi.org/project/rtoml/#files).```bashpip install rtoml```If no binary is available on pypi for you system configuration; you'll need rust stableinstalled before you can install rtoml.## Usage#### load```pythondef load(toml: Union[str, Path, TextIO]) -&gt; Dict[str, Any]: ...```Parse TOML via a string or file and return a python dictionary. The `toml` argument may be a `str`,`Path` or file object from `open()`.#### loads```pythondef loads(toml: str) -&gt; Dict[str, Any]: ...```Parse a TOML string and return a python dictionary. (provided to match the interface of `json` and similar libraries)#### dumps```pythondef dumps(obj: Any, *, pretty: bool = False) -&gt; str: ...```Serialize a python object to TOML.If `pretty` is true, output has a more &quot;pretty&quot; format.#### dump```pythondef dump(obj: Any, file: Union[Path, TextIO], *, pretty: bool = False) -&gt; int: ...```Serialize a python object to TOML and write it to a file. `file` may be a `Path` or file object from `open()`.If `pretty` is true, output has a more &quot;pretty&quot; format.### Example```pyfrom datetime import datetime, timezone, timedeltaimport rtomlobj = {    'title': 'TOML Example',    'owner': {        'dob': datetime(1979, 5, 27, 7, 32, tzinfo=timezone(timedelta(hours=-8))),        'name': 'Tom Preston-Werner',    },    'database': {        'connection_max': 5000,        'enabled': True,        'ports': [8001, 8001, 8002],        'server': '192.168.1.1',    },}loaded_obj = rtoml.load(&quot;&quot;&quot;\# This is a TOML document.title = &quot;TOML Example&quot;[owner]name = &quot;Tom Preston-Werner&quot;dob = 1979-05-27T07:32:00-08:00 # First class dates[database]server = &quot;192.168.1.1&quot;ports = [8001, 8001, 8002]connection_max = 5000enabled = true&quot;&quot;&quot;)assert loaded_obj == objassert rtoml.dumps(obj) == &quot;&quot;&quot;\title = &quot;TOML Example&quot;[owner]dob = 1979-05-27T07:32:00-08:00name = &quot;Tom Preston-Werner&quot;[database]connection_max = 5000enabled = trueserver = &quot;192.168.1.1&quot;ports = [8001, 8001, 8002]&quot;&quot;&quot;```</longdescription>
</pkgmetadata>