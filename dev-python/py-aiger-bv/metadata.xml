<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;figure&gt;  &lt;img src=&quot;logo_text.svg&quot; alt=&quot;py-aiger-bv logo&quot; width=300px&gt;  &lt;figcaption&gt;pyAiger-BV: Extension of pyAiger for manipulating    sequential bitvector circuits.&lt;/figcaption&gt;&lt;/figure&gt;[![Build Status](https://cloud.drone.io/api/badges/mvcisback/py-aiger-bv/status.svg)](https://cloud.drone.io/mvcisback/py-aiger-bv)[![codecov](https://codecov.io/gh/mvcisback/py-aiger-bv/branch/master/graph/badge.svg)](https://codecov.io/gh/mvcisback/py-aiger-bv)[![Docs](https://img.shields.io/badge/API-link-color)](https://mvcisback.github.io/py-aiger-bv)[![PyPI version](https://badge.fury.io/py/py-aiger-bv.svg)](https://badge.fury.io/py/py-aiger-bv)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) # Table of Contents- [About](#about-py-aiger-bv)- [Installation](#installation)- [BitVector Expr DSL](#bitvector-expression-dsl)- [Sequential Circuit DSL](#sequential-circuit-dsl)# About Py-Aiger-BVThis library provides word level abstractions on top of[py-aiger](https://github.com/mvcisback/py-aiger). This is done by the`AIGBV` which groups inputs, outputs, and latches into named**ordered** sequences, e.g. bitvectors.The resulting objects can be turned into `AIG`s where each input,output, or latches name has its index appended to its name. For example,an bitvector input, `'x'` with 3 bits becomes inputs `'x[0]', 'x[1]', 'x[3]'`# InstallationIf you just need to use `aiger_bv`, you can just run:`$ pip install py-aiger-bv`For developers, note that this project uses the[poetry](https://poetry.eustace.io/) python package/dependencymanagement tool. Please familarize yourself with it and thenrun:`$ poetry install`# BitVector Expression DSLAs in py-aiger, when writing combinatorial circuits, the SequentialCircuit DSL can be somewhat clumsy. For this common usecase, we havedeveloped the BitVector Expression DSL. This DSL actually consists oftwo DSLs for signed and unsigned BitVectors.  All circuits generatedthis way have a single output word. We use a **big-endian** encodingwhere the most significant digit is the first element of the tuplerepresenting the word. For signed numbers, two's complement is used.```pythonimport aiger_bv# Create 16 bit variables.x = aiger_bv.atom(16, 'x')y = aiger_bv.atom(16, 'y', signed=True)  # Signed by default.z = aiger_bv.uatom(16, 'z')              # Equiv to signed=False.# bitwise ops.expr1 = x &amp; y  # Bitwise and.expr2 = x | y  # Bitwise or.expr3 = x ^ y  # Bitwise xor.expr4 = ~x  # Bitwise negation.# arithmeticexpr5 = x + yexpr6 = x - yexpr7 = x &lt;&lt; yexpr8 = x &gt;&gt; y  # logical if unsigned, arithmetic if signed.expr9 = -x  # Arithmetic negation. Only defined for signed expr.expr10 = abs(x)expr11 = x @ y  # inner product of bitvectors mod 2 (+ is xor).# comparisonexpr12 = x == yexpr13 = x != yexpr14 = x &lt; yexpr15 = x &lt;= yexpr16 = x &gt; yexpr17 = x &gt;= y# Atoms can be constants.expr18 = x &amp; aiger_bv.atom(16, 3)expr19 = x &amp; aiger_bv.atom(16, 0xff)# BitVector expressions can be concatenated.expr20 = x.concat(y)# Particular bits can be indexed to create new expressions.expr21 = x[1]# Single bit expressions can be repeated.expr22 = x[1].repeat(10)# And you can inspect the AIGBV if needed.circ = x.aigbv# And you can inspect the AIG if needed.circ = x.aigbv.aig# And of course, you can get a BoolExpr from a single output aig.expr = aiger_bv.UnsignedBVExpr(circ)```# Sequential Circuit DSLpy-aiger-bv's Sequential Circuit DSL implements the same basic api aspy-aiger's Sequential Circuit DSL, but operates at the (variablelength) word level rather than the bit level.```pythonimport aigerimport aiger_bvcirc = ... # Create a circuit (see below).# We assume this circuit has word level# inputs: x,y, outputs: z, w, q, latches: a, bassert circ.inputs == {'x', 'y'}assert circ.outputs == {'z', 'w', 'q'}assert circ.latches == {'a', 'b'}```## Sequential composition```pythoncirc3 = circ1 &gt;&gt; circ2```## Parallel composition```pythoncirc3 = circ1 | circ2```## Adding Feedback (inserts a delay)```python# Connect output y to input x with delay (initialized to True).# (Default initialization is False.)cir2 = circ.feedback(    inputs=['x'],    outputs=['y'],    initials=[True],    keep_outputs=True)```## Relabeling```python# Relabel input 'x' to 'z'.circ2 = circ['i', {'x': 'z'}]# Relabel output 'y' to 'w'.circ2 = circ['o', {'y': 'w'}]# Relabel latches 'l1' to 'l2'.circ2 = circ['l', {'l1': 'l2'}]```## Evaluation```python# Combinatoric evaluation.circ(inputs={'x':(True, False, True), 'y': (True, False)})# Sequential evaluation.circ.simulate([        {'x': (True, False, True), 'y': (True, False)},        {'x': (False, False, True), 'y': (False, False)},    ])# Simulation Coroutine.sim = circ.simulator()  # Coroutinenext(sim)  # Initializeprint(sim.send({'x': (True, False, True), 'y': (True, False)}))print(sim.send({'x': (False, False, True), 'y': (False, False)}))# Unrollcirc2 = circ.unroll(steps=10, init=True)```## aiger.AIG to aiger.AIGBVThere are two main ways to take an object `AIG` from `aiger` andconvert it into an `AIGBV` object. The first is the `aig2aigbv`command which simply makes all inputs words of size 1.```python# Create aiger_bv.AIGERBV object from aiger.AIG object.circ  = ... # Some aiger.AIG objectword_circ = aiger_bv.aig2aigbv(circ)  # aiger_bv.AIGBV object```## Gadget Library### General Manipulation```python# Copy outputs 'x' and 'y' to 'w1, w2' and 'z1, z2'.circ1 = circ &gt;&gt; aiger_bv.tee(wordlen=3, iomap={        'x': ('w1', 'w2'),        'y': ('z1', 'z2')    })# Take 1 bit output, 'x', duplicate it 5 times, and group into# a single 5-length word output, 'y'.circ2 = circ &gt;&gt; aiger_bv.repeat(wordlen=5, input='x', output='z')# Reverse order of a word.circ3 = circ &gt;&gt; aiger_bv.reverse_gate(wordlen=5, input='x', output='z')# Sink and Source circuits (see encoding section for encoding details).## Always output binary encoding for 15. circ4 = aiger_bv.source(wordlen=4, value=15, name='x', signed=False)## Absorb output 'y'circ5 = circ &gt;&gt; aiger_bv.sink(wordlen=4, inputs=['y'])# Identity Gatecirc6 = circ &gt;&gt; aiger_bv.identity_gate(wordlen=3, input='x')# Combine/Concatenate wordscirc7 = circ &gt;&gt; aiger_bv.combine_gate(    left_wordlen=3, left='x',    right_wordlen=3, right='y',    output='z')# Split wordscirc8 = circ &gt;&gt; aiger_bv.split_gate(    input='x',    left_wordlen=1, left='z',    right_wordlen=2, right='w')# Select single index of circuit and make it a wordlen=1 output.circ9 = circ &gt;&gt; aiger_bv.index_gate(wordlen=3, idx=1, input='x', output='x1')```## Bitwise Operations- `aiger_bv.bitwise_and(3, left='x', right='y', output='x&amp;y')`- `aiger_bv.bitwise_or(3, left='x', right='y', output='x|y')`- `aiger_bv.bitwise_xor(3, left='x', right='y', output='x^y')`- `aiger_bv.bitwise_negate(3, left='x', output='~x')`## Arithmetic- `aiger_bv.add_gate(3, left='x', right='y', output='x+y')`- `aiger_bv.subtract_gate_gate(3, left='x', right='y', output='x-y')`- `aiger_bv.inc_gate(3, left='x', output='x+1')`- `aiger_bv.dec_gate(3, left='x', output='x+1')`- `aiger_bv.negate_gate(3, left='x', output='-x')`- `aiger_bv.logical_right_shift(3, shift=1, input='x', output='x&gt;&gt;1')`- `aiger_bv.arithmetic_right_shift(3, shift=1, input='x', output='x&gt;&gt;1')`- `aiger_bv.left_shift(3, shift=1, input='x', output='x&lt;&lt;1')`## Comparison- `aiger_bv.is_nonzero_gate(3, input='x', output='is_nonzero')`- `aiger_bv.is_zero_gate(3, input='x', output='is_zero')`- `aiger_bv.eq_gate(3, left='x', right='y', output='x=y')`- `aiger_bv.ne_gate(3, left='x', right='y', output='x!=y')`- `aiger_bv.unsigned_lt_gate(3, left='x', right='y', output='x&lt;y')`- `aiger_bv.unsigned_gt_gate(3, left='x', right='y', output='x&gt;y')`- `aiger_bv.unsigned_le_gate(3, left='x', right='y', output='x&lt;=y')`- `aiger_bv.unsigned_ge_gate(3, left='x', right='y', output='x&gt;=y')`- `aiger_bv.signed_lt_gate(3, left='x', right='y', output='x&lt;y')`- `aiger_bv.signed_gt_gate(3, left='x', right='y', output='x&gt;y')`- `aiger_bv.signed_le_gate(3, left='x', right='y', output='x&lt;=y')`- `aiger_bv.signed_ge_gate(3, left='x', right='y', output='x&gt;=y')`</longdescription>
</pkgmetadata>