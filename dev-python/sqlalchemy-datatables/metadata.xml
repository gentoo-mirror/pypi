<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>======================sqlalchemy-datatables======================|Build Status| |PyPi Version| |Scrutinizer| |Coverage|.. |Build Status| image:: https://travis-ci.org/Pegase745/sqlalchemy-datatables.svg?branch=master    :target: https://travis-ci.org/Pegase745/sqlalchemy-datatables.. |PyPi Version| image:: https://badge.fury.io/py/sqlalchemy-datatables.svg    :target: https://pypi.python.org/pypi/sqlalchemy-datatables/.. |Scrutinizer| image:: https://scrutinizer-ci.com/g/Pegase745/sqlalchemy-datatables/badges/quality-score.png    :target: https://scrutinizer-ci.com/g/Pegase745/sqlalchemy-datatables/.. |Coverage| image:: https://codecov.io/gh/Pegase745/sqlalchemy-datatables/branch/master/graph/badge.svg    :target: https://codecov.io/gh/Pegase745/sqlalchemy-datatablessqlalchemy-datatables is a framework agnostic library providing an `SQLAlchemy &lt;http://www.sqlalchemy.org/&gt;`_ integration of jQuery `DataTables &lt;http://datatables.net/&gt;`_ &gt;= 1.10, and helping you manage server side requests in your application.Installation------------**To install via pip:***Python 3*.. code-block:: bash    $ pip3 install sqlalchemy-datatables**To install from source:**.. code-block:: bash    $ git clone git@github.com:Pegase745/sqlalchemy-datatables.git    $ cd sqlalchemy-datatables    $ pip3 install .**To contribute:**.. code-block:: bash    In a virtualenv    $ git clone git@github.com:Pegase745/sqlalchemy-datatables.git    $ cd sqlalchemy-datatables    $ make allUsage-----.. code-block:: python    @view_config(route_name='data', renderer='json')    def data(request):        &quot;&quot;&quot;Return server side data.&quot;&quot;&quot;        # defining columns        #  - explicitly cast date to string, so string searching the date        #    will search a date formatted equal to how it is presented        #    in the table        columns = [            ColumnDT(User.id),            ColumnDT(User.name),            ColumnDT(Address.description),            ColumnDT(func.strftime('%d-%m-%Y', User.birthday)),            ColumnDT(User.age)        ]        # defining the initial query depending on your purpose        #  - don't include any columns        #  - if you need a join, also include a 'select_from'        query = DBSession.query().\            select_from(User).\            join(Address).\            filter(Address.id &gt; 4)        # instantiating a DataTable for the query and table needed        rowTable = DataTables(request.GET, query, columns)        # returns what is needed by DataTable        return rowTable.output_result()Examples--------You can find working examples `in the repository &lt;examples&gt;`_, including an integration with the `yadcf &lt;https://github.com/vedmack/yadcf/&gt;`_ plugin:- `Pyramid example &lt;examples/pyramid_tut/README.rst&gt;`_- `Flask example &lt;examples/flask_tut/README.rst&gt;`_Changelog---------All notable changes to this project will be documented in `this section &lt;https://github.com/Pegase745/sqlalchemy-datatables/releases&gt;`_.This project adheres to `Semantic Versioning &lt;http://semver.org/&gt;`_ and `Keep A Changelog &lt;http://keepachangelog.com/&gt;`_.License-------The project is licensed under the MIT license.</longdescription>
</pkgmetadata>