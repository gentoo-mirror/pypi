<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python package to communicate with ublox receiversPython package to communicate with ublox chipsetsTo install the package:```bashpip3 install pyublox```## Basic usageThis section includes some basic sections on how to use the package```bash# Helppyublox -h# Autodetect ublox receiver connected via a serial port, including some# basic receiver configuration (rates, tracked signals, ...)pyublox detect```## Testing the packageThis package uses the pytest suite, to execute the tests, issue the followingcommand```bashpytest -v -r s /path/to/source```The `-r s` option is used to show the reason of skipped tests or modules### Development within a Docker containerThe best way to develop the package is by using a controlled environement.To do this, run a Python 3.7 container like so```bashdocker run -v `pwd`:/pyublox -ti rokubun/gcc:debian-python3.7 bash```If deveoping within the Raspberry Pi```bashdocker run -v `pwd`:/pyublox --device=/dev/ttyACM0  -ti python:3.7  bash# Develop using jupyter (mounting a folder to store the Notebooks)cd amic/pyublox/docker run -v `pwd`:/pyublox -v &quot;${PWD}/notebooks&quot;:/notebooks -p 8888:8888 --device=/dev/ttyACM0  -ti andresvidal/jupyter-armv7l```Once within the container type the following commands:```bash# The package requires git to work properlypip install -e /pyublox```More information on the image available in [jupyter-armv7l repository](https://github.com/andresvidal/jupyter-armv7l)We can also use docker compose```bash# Build the imagecd amic/pyublox/docker-compose build# Or directly run the container for development, this is equivalent to the# docker run call shown above, but we do not need to launch pip installdocker-compose up```## Submission to PyPiIn order to deploy to PyPi```bash# Update setuptoolspython3 -m pip install --user --upgrade setuptools wheel# Create the distribution wheelpython3 setup.py sdist bdist_wheel# Upload the distribution wheels to the PyPi repopython3 -m twine upload dist/*```More details on deployment can be found [here](https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives).</longdescription>
</pkgmetadata>