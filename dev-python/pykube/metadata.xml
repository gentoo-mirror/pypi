<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pykube======.. image:: http://slack.kelproject.com/badge.svg   :target: http://slack.kelproject.com/.. image:: https://img.shields.io/travis/kelproject/pykube.svg   :target: https://travis-ci.org/kelproject/pykube.. image:: https://img.shields.io/pypi/dm/pykube.svg   :target:  https://pypi.python.org/pypi/pykube/.. image:: https://img.shields.io/pypi/v/pykube.svg   :target:  https://pypi.python.org/pypi/pykube/.. image:: https://img.shields.io/badge/license-apache-blue.svg   :target:  https://pypi.python.org/pypi/pykube/Python client library for Kubernetes.. image:: https://storage.googleapis.com/kel-assets/kel_full-02_200.jpg   :target: http://kelproject.com/Kel is an open source Platform as a Service (PaaS) from Eldarion, Inc. thatmakes it easy to manage web application deployment and hosting through theentire lifecycle from development through testing to production. It addscomponents and tools on top of Kubernetes that help developers manage theirapplication infrastructure. Kel builds on Eldarion's 7+ years experience runningone of the leading Python and Django PaaSes.For more information about Kel, see `kelproject.com`_, follow us on Twitter`@projectkel`_, and join our `Slack team`_... _kelproject.com: http://kelproject.com/.. _@projectkel: https://twitter.com/projectkel.. _Slack team: http://slack.kelproject.com/Features--------* HTTP interface using requests using kubeconfig for authentication* Python native querying of Kubernetes API objectsInstallation------------To install pykube, use pip::    pip install pykubeUsage-----Query for all ready pods in a custom namespace:.. code:: python    import operator    import pykube    api = pykube.HTTPClient(pykube.KubeConfig.from_file(&quot;/Users/&lt;username&gt;/.kube/config&quot;))    pods = pykube.Pod.objects(api).filter(namespace=&quot;gondor-system&quot;)    ready_pods = filter(operator.attrgetter(&quot;ready&quot;), pods)Selector query:.. code:: python    pods = pykube.Pod.objects(api).filter(        namespace=&quot;gondor-system&quot;,        selector={&quot;gondor.io/name__in&quot;: {&quot;api-web&quot;, &quot;api-worker&quot;}},    )    pending_pods = pykube.objects.Pod.objects(api).filter(        field_selector={&quot;status.phase&quot;: &quot;Pending&quot;}    )Watch query:.. code:: python    watch = pykube.Job.objects(            api,            namespace=&quot;gondor-system&quot;)        .filter(field_selector={&quot;metadata.name&quot;:&quot;my-job&quot;})        .watch()        # watch is a generator:    for watch_event in watch:        print(watch.type) # 'ADDED', 'DELETED', 'MODIFIED'        print(watch.object) # pykube.Job objectCreate a ReplicationController:.. code:: python    obj = {        &quot;apiVersion&quot;: &quot;v1&quot;,        &quot;kind&quot;: &quot;ReplicationController&quot;,        &quot;metadata&quot;: {            &quot;name&quot;: &quot;my-rc&quot;,            &quot;namespace&quot;: &quot;gondor-system&quot;        },        &quot;spec&quot;: {            &quot;replicas&quot;: 3,            &quot;selector&quot;: {                &quot;app&quot;: &quot;nginx&quot;            },            &quot;template&quot;: {                &quot;metadata&quot;: {                    &quot;labels&quot;: {                        &quot;app&quot;: &quot;nginx&quot;                    }                },                &quot;spec&quot;: {                    &quot;containers&quot;: [                        {                            &quot;name&quot;: &quot;nginx&quot;,                            &quot;image&quot;: &quot;nginx&quot;,                            &quot;ports&quot;: [                                {&quot;containerPort&quot;: 80}                            ]                        }                    ]                }            }        }    }    pykube.ReplicationController(api, obj).create()Delete a ReplicationController:.. code:: python    obj = {        &quot;apiVersion&quot;: &quot;v1&quot;,        &quot;kind&quot;: &quot;ReplicationController&quot;,        &quot;metadata&quot;: {            &quot;name&quot;: &quot;my-rc&quot;,            &quot;namespace&quot;: &quot;gondor-system&quot;        }    }    pykube.ReplicationController(api, obj).delete()Check server version:.. code:: python    api = pykube.HTTPClient(pykube.KubeConfig.from_file(&quot;/Users/&lt;username&gt;/.kube/config&quot;))    api.versionRequirements------------* Python 2.7 or 3.3+* requests (included in ``install_requires``)* PyYAML (included in ``install_requires``)License-------The code in this project is licensed under the Apache License, version 2.0(included in this repository under LICENSE).Contributing------------By making a contribution to this project, you are agreeing to the `DeveloperCertificate of Origin v1.1`_ (also included in this repository under DCO.txt)... _Developer Certificate of Origin v1.1: http://developercertificate.orgCode of Conduct----------------In order to foster a kind, inclusive, and harassment-free community, the KelProject follows the `Contributor Covenant Code of Conduct`_... _Contributor Covenant Code of Conduct: http://contributor-covenant.org/version/1/4/Commercial Support------------------Commercial support for Kel is available through Eldarion, please contactinfo@eldarion.com.</longdescription>
</pkgmetadata>