<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Epure=====&lt;a href=&quot;https://github.com/nagvalhm/epure&quot;&gt;Epure&lt;/a&gt; is python agnostic ORM - you can store and retrieve data having no idea about database, table and columns. All technical details hidden from you. Care only about your business logic.Supported databases----------Postgres: yes ✔️Oracle: no ❌Installing----------Install and update using &lt;a href=&quot;https://pip.pypa.io/en/stable/getting-started/&quot;&gt;`pip`&lt;/a&gt;:```$ pip install -U epure```Install and update using &lt;a href=&quot;https://python-poetry.org/docs/&quot;&gt;`poetry`&lt;/a&gt;:```$ poetry add epure```Connecting Epure to database----------```python# import connection functions from Epurefrom epure import GresDbfrom epure import connect# Classic way to connect database to epure# Format of string to connect ('database://user:password@host:port')GresDb('postgres://postgres:postgres@localhost:5432',log_level=3).connect()# Alternative way of connectiondb = GresDb('postgres://postgres:postgres@localhost:32', # host=&quot;localhost&quot;, port=&quot;5432&quot;, # database=&quot;postgres&quot;, # user=&quot;postgres&quot;, password=&quot;postgres&quot;,log_level=3) # log_level defines level of description of opertaionsdb.connect() #  with DB written in auto-generated file epure_db.log```A Simple Example---------------- ##### ⚠️ In order to save attributes of class to db, type hints is required! ⚠️ ##### Create example class with Epure, create instance of it and read it from DB.```python# save this as epure_example.py# --------------------------------# import epure class decoratorfrom epure import epure# different types hints avalibleimport typesfrom typing import List, Dict, Tuple, Callable# ⚠️ In order to save attributes of class to db, type hints is required! ⚠️ # decorate class by @epure() wrap function@epure()class Example:    int_attr:int     bool_attr:bool    float_attr:float    str_attr:str    range_attr:range    complex_attr:complex    list_attr:list    generic_list_attr:List[int]    dict_attr:Dict[int, str]    str_attr_with_default_val:str = 'example_str' # with default val 'example_str'    epure_cls_attr:SomeEpureCls # field that contains another epure class    NoneType_attr:types.NoneType# creating instance of epurized Example classobj = Example()# assigning vals to instanceobj.int_attr = 1obj.str_attr = &quot;example&quot;obj.list_attr = [1,2,3,4]# saving obj instance to databaseobj.save()# saved instance has attribute of node_id that is uniquenode_id = obj.node_id # -&gt; UUID4# node_id is used to search epure objects and retrive them from DB via read() method, returns list of list with object(s)res = obj.table.read(node_id=node_id) # -&gt; list[list[epure_object]]```Save epure instance----------------```python    in development```Update epure instance----------------```python    @epure()    class Example:    int_attr:int    ex = Example()    ex.int_attr = 42    ex.save()    ex.int_attr = 60    ex.save() # If instance of epure already has node_id attr, the next save() will be treated as update        res = ex.table.read(node_id=ex.node_id)[0][0]    res.int_attr # -&gt; 60  ```Read from table method variations----------------#### 1. Read by kwargs:Use keyword arguments to select records with specified fields```python # node_id is UUID type id used to search epure objects and # retrive them from DB via read() method, returns list of list with object(s)res = epure.table.read(node_id=node_id) # -&gt; list[list[epure_object]]# find objects with several keyword argsres = epure.table.read(int3=6, str3=&quot;str3_value&quot;) # -&gt; list[list[epure_object(s)]]```#### 2. Read by lambda function:Use python lambda function to select records with certain conditions and to use joins ```python# tp is table proxy of Example table cls, dbp is database proxy of all tables# when lambda is used tp and dbp will be assumed as table proxy and db proxy of Example classres = Example.resource.read(lambda tp, dbp:     [tp.float_attr, tp.range_attr, tp.epure_cls_attr, dbp['example'].node_id,        dbp['example'] &lt;&lt; (tp.epure_cls_attr == dbp['example'].node_id # &quot;&lt;&lt;&quot; is a join operator    | tp.generic_list0 == dbp['example'].generic_list_attr) ^    tp.str_attr == 'str3_value'     &amp; (tp.int_attr &gt; 3 | tp.float_attr &lt; 0.8)    ^dbp['another_table'] &lt;&lt; tp.epure_class1 == dbp['another_table'].node_id    ]) # -&gt; list[list[epure_object]]```#### 3. Read by @ (at/matmul) sign:@ (at/matmul) is used in query as header query delimeter```pythonexmpl_db_proxy = Example.resource.resource_proxy['example']an_ex_db_proxy = Example.resource.resource_proxy['another_table']#Example AExample.resource.read(exmpl_db_proxy @ int_attr &gt; 12) # -&gt; list[list[epure_objects]]#Example B#   exmpl_db_proxy.str_attr is a query headerExample.resource.read(exmpl_db_proxy.str_attr @ exmpl_db_proxy.str_attr == an_ex_db_proxy.str2 | exmpl_db_proxy.int1 == an_ex_db_proxy.int0 % 3 &amp; 5 == an_ex_db_proxy.int3 | (an_ex_db_proxy.int2 &gt; an_ex_db_proxy.int7)) # -&gt; list[list[epure_objects]]```#### 4. Read by sql query:```python#   use your query to select epure obj from dbExample.resource.read('select * from example where int = 42') # -&gt; list[list[epure_objects]]```Avalible operators in query----------------#### 1. equals &quot;==&quot;```pythonExample.resource.read(int_attr == 12)```#### 2. and &quot;&amp;&quot;```pythonExample.resource.read(int_attr == 12 &amp; str_attr == &quot;cute doge&quot;)```#### 3. or &quot;|&quot;```pythonExample.resource.read(int_attr == 12 | str_attr == &quot;cute doge&quot;)```#### 4. more &quot;&gt;&quot; / less &quot;&lt;&quot; ```pythonExample.resource.read(int_attr &gt; 12 | float_attr &lt; 8.31)```#### 5. in: gte(greater than or equals) &quot;&gt;=&quot; /lte(less than or equals) &quot;&lt;=&quot;##### Gte and Lte operators are used as &quot;in&quot; sql operator in cases when operands are:##### One of operands is table proxy and other is a tuple or an subquery:```python# tupleExample.resource.read(int_attr &gt;= (12, 24)) # int_attr in (12, 24)# subqueryExample.resource.read(int_attr &gt;= (exmpl_db_proxy @ int_attr &gt; 2)) # int_attr in subquery```##### In any other case &gt;= operator functions as normal gte operator, like for int:```python# tupleExample.resource.read(int_attr &gt;= 12) # int_attr more or equals 12 ```#### 6. like &quot;%&quot; (modulo)##### % operator is used as &quot;like&quot; sql operator in cases when operands are:##### If left operand is a table proxy and right op is a string```pythonExample.resource.read(exmpl_db_proxy.string_attr % '%a%') # this % will be treated as 'like' op```##### in any other case % will be treated like regular modulo```pythonExample.resource.read(exmpl_db_proxy.int_attr % 3) # this % will be treated as regular modulo```#### 7. not &quot;!=&quot; (ne) (in development)```python```#### 8. join &lt;&lt; / &gt;&gt; (bit shift) (in development)```pythonExample.resource.read(another_table_proxy &lt;&lt; x. == y.f4 ^ x.f1 == y.f2 &amp; 5 == x.f5 | x.f6 == y.f7)```Developers-----Nikita Umarov (Pichugin), Pavel PichuginLinks------   Documentation: https://github.com/nagvalhm/epure/blob/main/README.md-   Changes: https://github.com/nagvalhm/epure-   PyPI Releases: https://pypi.org/project/epure/-   Source Code: https://github.com/nagvalhm/epure-   Issue Tracker: https://github.com/nagvalhm/epure/issues-   Website: https://pypi.org/project/epure/</longdescription>
</pkgmetadata>