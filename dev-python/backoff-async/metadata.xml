<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>backoff=======.. image:: https://travis-ci.org/litl/backoff.svg?branch=master    :target: https://travis-ci.org/litl/backoff?branch=master.. image:: https://coveralls.io/repos/litl/backoff/badge.svg?branch=master    :target: https://coveralls.io/r/litl/backoff?branch=master**Function decoration for backoff and retry**This module provides function decorators which can be used to wrap afunction such that it will be retried until some condition is met. Itis meant to be of use when accessing unreliable resources with thepotential for intermittent failures i.e. network resources and externalAPIs. Somewhat more generally, it may also be of use for dynamicallypolling resources for externally generated content.Examples========Since Kenneth Reitz's `requests &lt;http://python-requests.org&gt;`_ modulehas become a defacto standard for HTTP clients in python, networkingexamples below are written using it, but it is in no way required bythe backoff module.@backoff.on_exception---------------------The ``on_exception`` decorator is used to retry when a specified exceptionis raised. Here's an example using exponential backoff when any``requests`` exception is raised::    @backoff.on_exception(backoff.expo,                          requests.exceptions.RequestException,                          max_tries=8)    def get_url(url):        return requests.get(url)The decorator will also accept a tuple of exceptions for cases whereyou want the same backoff behavior for more than one exception type::    @backoff.on_exception(backoff.expo,                          (requests.exceptions.Timeout,                           requests.exceptions.ConnectionError),                          max_tries=8)    def get_url(url):        return requests.get(url)In some cases the raised exception instance itself may need to beinspected in order to determine if it is a retryable condition. The``giveup`` keyword arg can be used to specify a function which acceptsthe exception and returns a truthy value if the exception should notbe retried::    def fatal_code(e):        return 400 &lt;= e.response.status_code &lt; 500    @backoff.on_exception(backoff.expo,                          requests.exceptions.RequestException,                          max_tries=8,                          giveup=fatal_code)    def get_url(url):        return requests.get(url)@backoff.on_predicate---------------------The ``on_predicate`` decorator is used to retry when a particularcondition is true of the return value of the target function.  This maybe useful when polling a resource for externally generated content.Here's an example which uses a fibonacci sequence backoff when thereturn value of the target function is the empty list::    @backoff.on_predicate(backoff.fibo, lambda x: x == [], max_value=13)    def poll_for_messages(queue):        return queue.get()Extra keyword arguments are passed when initializing thewait generator, so the ``max_value`` param above is passed as a keywordarg when initializing the fibo generator.When not specified, the predicate param defaults to the falsey test,so the above can more concisely be written::    @backoff.on_predicate(backoff.fibo, max_value=13)    def poll_for_message(queue)        return queue.get()More simply, a function which continues polling every second until itgets a non-falsey result could be defined like like this::    @backoff.on_predicate(backoff.constant, interval=1)    def poll_for_message(queue)        return queue.get()Jitter------A jitter algorithm can be supplied with the ``jitter`` keyword arg toeither of the backoff decorators. This argument should be a functionaccepting the original unadulterated backoff value and returning it'sjittered counterpart.As of version 1.2, the default jitter function ``backoff.full_jitter``implements the 'Full Jitter' algorithm as defined in the AWSArchitecture Blog's `Exponential Backoff And Jitter&lt;https://www.awsarchitectureblog.com/2015/03/backoff.html&gt;`_ post.Previous versions of backoff defaulted to adding some random number ofmilliseconds (up to 1s) to the raw sleep value. If desired, thisbehavior is now available as ``backoff.random_jitter``.Using multiple decorators-------------------------The backoff decorators may also be combined to specify differentbackoff behavior for different cases::    @backoff.on_predicate(backoff.fibo, max_value=13)    @backoff.on_exception(backoff.expo,                          requests.exceptions.HTTPError,                          max_tries=4)    @backoff.on_exception(backoff.expo,                          requests.exceptions.TimeoutError,                          max_tries=8)    def poll_for_message(queue):        return queue.get()Runtime Configuration---------------------The decorator functions ``on_exception`` and ``on_predicate`` aregenerally evaluated at import time. This is fine when the keyword argsare passed as constant values, but suppose we want to consult adictionary with configuration options that only become available atruntime. The relevant values are not available at import time. Instead,decorator functions can be passed callables which are evaluated atruntime to obtain the value::    def lookup_max_tries():        # pretend we have a global reference to 'app' here        # and that it has a dictionary-like 'config' property        return app.config[&quot;BACKOFF_MAX_TRIES&quot;]    @backoff.on_exception(backoff.expo,                          ValueError,                          max_tries=lookup_max_tries)More cleverly, you might define a function which returns a lookupfunction for a specified variable::    def config(app, name):        return functools.partial(app.config.get, name)    @backoff.on_exception(backoff.expo,                          ValueError,                          max_value=config(app, &quot;BACKOFF_MAX_VALUE&quot;)                          max_tries=config(app, &quot;BACKOFF_MAX_TRIES&quot;))Event handlers--------------Both backoff decorators optionally accept event handler functionsusing the keyword arguments ``on_success``, ``on_backoff``, and ``on_giveup``.This may be useful in reporting statistics or performing other customlogging.Handlers must be callables with a unary signature accepting a dictargument. This dict contains the details of the invocation. Valid keysinclude:* *target*: reference to the function or method being invoked* *args*: positional arguments to func* *kwargs*: keyword arguments to func* *tries*: number of invocation tries so far* *wait*: seconds to wait (``on_backoff`` handler only)* *value*: value triggering backoff (``on_predicate`` decorator only)A handler which prints the details of the backoff event could beimplemented like so::    def backoff_hdlr(details):        print (&quot;Backing off {wait:0.1f} seconds afters {tries} tries &quot;               &quot;calling function {func} with args {args} and kwargs &quot;               &quot;{kwargs}&quot;.format(**details))    @backoff.on_exception(backoff.expo,                          requests.exceptions.RequestException,                          on_backoff=backoff_hdlr)    def get_url(url):        return requests.get(url)**Multiple handlers per event type**In all cases, iterables of handler functions are also accepted, whichare called in turn. For example, you might provide a simple list ofhandler functions as the value of the ``on_backoff`` keyword arg::    @backoff.on_exception(backoff.expo,                          requests.exceptions.RequestException,                          on_backoff=[backoff_hdlr1, backoff_hdlr2])    def get_url(url):        return requests.get(url)**Getting exception info**In the case of the ``on_exception`` decorator, all ``on_backoff`` and``on_giveup`` handlers are called from within the except block for theexception being handled. Therefore exception info is available to thehandler functions via the python standard library, specifically``sys.exc_info()`` or the ``traceback`` module.Logging configuration---------------------Errors and backoff and retry attempts are logged to the 'backoff'logger. By default, this logger is configured with a NullHandler, sothere will be nothing output unless you configure a handler.Programmatically, this might be accomplished with something as simpleas::    logging.getLogger('backoff').addHandler(logging.StreamHandler())The default logging level is ERROR, which corresponds to logging anytime``max_tries`` is exceeded as well as any time a retryable exception israised. If you would instead like to log any type of retry, you canset the logger level to INFO::    logging.getLogger('backoff').setLevel(logging.INFO)</longdescription>
</pkgmetadata>