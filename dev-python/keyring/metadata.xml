<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/keyring.svg   :target: https://pypi.org/project/keyring.. image:: https://img.shields.io/pypi/pyversions/keyring.svg.. image:: https://github.com/jaraco/keyring/workflows/tests/badge.svg   :target: https://github.com/jaraco/keyring/actions?query=workflow%3A%22tests%22   :alt: tests.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json    :target: https://github.com/astral-sh/ruff    :alt: Ruff.. image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black   :alt: Code style: Black.. image:: https://readthedocs.org/projects/keyring/badge/?version=latest   :target: https://keyring.readthedocs.io/en/latest/?badge=latest.. image:: https://img.shields.io/badge/skeleton-2023-informational   :target: https://blog.jaraco.com/skeleton.. image:: https://tidelift.com/badges/package/pypi/keyring   :target: https://tidelift.com/subscription/pkg/pypi-keyring?utm_source=pypi-keyring&amp;utm_medium=readme.. image:: https://badges.gitter.im/jaraco/keyring.svg   :alt: Join the chat at https://gitter.im/jaraco/keyring   :target: https://gitter.im/jaraco/keyring?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badgeThe Python keyring library provides an easy way to access thesystem keyring service from python. It can be used in anyapplication that needs safe password storage.These recommended keyring backends are supported:* macOS `Keychain  &lt;https://en.wikipedia.org/wiki/Keychain_%28software%29&gt;`_* Freedesktop `Secret Service  &lt;http://standards.freedesktop.org/secret-service/&gt;`_ supports many DE including  GNOME (requires `secretstorage &lt;https://pypi.python.org/pypi/secretstorage&gt;`_)* KDE4 &amp; KDE5 `KWallet &lt;https://en.wikipedia.org/wiki/KWallet&gt;`_  (requires `dbus &lt;https://pypi.python.org/pypi/dbus-python&gt;`_)* `Windows Credential Locker  &lt;https://docs.microsoft.com/en-us/windows/uwp/security/credential-locker&gt;`_Other keyring implementations are available through `Third-Party Backends`_.Installation - Linux====================On Linux, the KWallet backend relies on dbus-python_, which does not alwaysinstall correctly when using pip (compilation is needed). For best results,install dbus-python as a system package... _dbus-python: https://gitlab.freedesktop.org/dbus/dbus-pythonCompatibility - macOS=====================macOS keychain supports macOS 11 (Big Sur) and later requires Python 3.8.7or later with the &quot;universal2&quot; binary. See`#525 &lt;https://github.com/jaraco/keyring/issues/525&gt;`_ for details.Using Keyring=============The basic usage of keyring is pretty simple: just call``keyring.set_password`` and ``keyring.get_password``::    &gt;&gt;&gt; import keyring    &gt;&gt;&gt; keyring.set_password(&quot;system&quot;, &quot;username&quot;, &quot;password&quot;)    &gt;&gt;&gt; keyring.get_password(&quot;system&quot;, &quot;username&quot;)    'password'Command-line Utility--------------------Keyring supplies a ``keyring`` command which is installed with thepackage. After installing keyring in most environments, thecommand should be available for setting, getting, and deletingpasswords. For more usage information, invoke with no argumentsor with ``--help`` as so::    $ keyring --help    $ keyring set system username    Password for 'username' in 'system':    $ keyring get system username    passwordThe command-line functionality is also exposed as an executablepackage, suitable for invoking from Python like so::    $ python -m keyring --help    $ python -m keyring set system username    Password for 'username' in 'system':    $ python -m keyring get system username    passwordTab Completion--------------If installed via a package manager (apt, pacman, nix, homebrew, etc),these shell completions may already have been distributed with the package(no action required).Keyring provides tab completion if the ``completion`` extra is installed::    $ pip install 'keyring[completion]'Then, generate shell completions, something like::    $ keyring --print-completion bash | sudo tee /usr/share/bash-completion/completions/keyring    $ keyring --print-completion zsh | sudo tee /usr/share/zsh/site-functions/_keyring    $ keyring --print-completion tcsh | sudo tee /etc/profile.d/keyring.csh**Note**: the path of `/usr/share` is mainly for GNU/Linux. For other OSs,consider:- macOS (Homebrew x86): /usr/local/share- macOS (Homebrew ARM): /opt/homebrew/share- Android (Termux): /data/data/com.termux/files/usr/share- Windows (mingw64 of msys2): /mingw64/share- ...After installing the shell completions, enable them following your shell'srecommended instructions. e.g.:- bash: install `bash-completion &lt;https://github.com/scop/bash-completion&gt;`_,  and ensure ``. /usr/share/bash-completion/bash_completion`` in ``~/.bashrc``.- zsh: ensure ``autoload -Uz compinit &amp;&amp; compinit`` appears in ``~/.zshrc``,  then ``grep -w keyring ~/.zcompdump`` to verify keyring appears, indicating  it was installed correctly.Configuring===========The python keyring lib contains implementations for several backends. Thelibrary will attempt toautomatically choose the most suitable backend for the currentenvironment. Users may also specify the preferred keyring in aconfig file or by calling the ``set_keyring()`` function.Config file path----------------The configuration is stored in a file named &quot;keyringrc.cfg&quot;found in a platform-specific location. To determinewhere the config file is stored, run ``keyring diagnose``.Config file content-------------------To specify a keyring backend, set the **default-keyring** option to thefull path of the class for that backend, such as``keyring.backends.OS_X.Keyring``.If **keyring-path** is indicated, keyring will add that path to the Pythonmodule search path before loading the backend.For example, this config might be used to load the``SimpleKeyring`` from the ``simplekeyring`` module inthe ``./demo`` directory (not implemented)::    [backend]    default-keyring=simplekeyring.SimpleKeyring    keyring-path=demoThird-Party Backends====================In addition to the backends provided by the core keyring package forthe most common and secure use cases, thereare additional keyring backend implementations available for otheruse cases. Simply install them to make them available:- `keyrings.cryptfile &lt;https://pypi.org/project/keyrings.cryptfile&gt;`_  - Encrypted text file storage.- `keyring_jeepney &lt;https://pypi.org/project/keyring_jeepney&gt;`__ - a  pure Python backend using the secret service DBus API for desktop  Linux.- `keyrings.alt &lt;https://pypi.org/project/keyrings.alt&gt;`_ - &quot;alternate&quot;,  possibly-insecure backends, originally part of the core package, but  available for opt-in.- `gsheet-keyring &lt;https://pypi.org/project/gsheet-keyring&gt;`_  - a backend that stores secrets in a Google Sheet. For use with  `ipython-secrets &lt;https://pypi.org/project/ipython-secrets&gt;`_.- `bitwarden-keyring &lt;https://pypi.org/project/bitwarden-keyring/0.1.0/&gt;`_  - a backend that stores secrets in the `BitWarden &lt;https://bitwarden.com/&gt;`_  password manager.- `sagecipher &lt;https://pypi.org/project/sagecipher&gt;`_ - an encryption  backend which uses the ssh agent protocol's signature operation to  derive the cipher key.- `keyrings.osx_keychain_keys &lt;https://pypi.org/project/keyrings.osx-keychain-keys&gt;`_  - OSX keychain key-management, for private, public, and symmetric keys.Write your own keyring backend==============================The interface for the backend is defined by ``keyring.backend.KeyringBackend``.Every backend should derive from that base class and define a ``priority``attribute and three functions: ``get_password()``, ``set_password()``, and``delete_password()``. The ``get_credential()`` function may be defined ifdesired.See the ``backend`` module for more detail on the interface of this class.Keyring employs entry points to allow any third-party package to implementbackends without any modification to the keyring itself. Those interested increating new backends are encouraged to create new, third-party packagesin the ``keyrings`` namespace, in a manner modeled by the `keyrings.altpackage &lt;https://github.com/jaraco/keyrings.alt&gt;`_. See the``setup.cfg`` filein that project for hints on how to create the requisite entry points.Backends that prove essential may be considered for inclusion in the corelibrary, although the ease of installing these third-party packages shouldmean that extensions may be readily available.To create an extension for Keyring, please submit a pull request tohave your extension mentioned as an available extension.Runtime Configuration=====================Keyring additionally allows programmatic configuration of thebackend calling the api ``set_keyring()``. The indicated backendwill subsequently be used to store and retrieve passwords.To invoke ``set_keyring``::    # define a new keyring class which extends the KeyringBackend    import keyring.backend    class TestKeyring(keyring.backend.KeyringBackend):        &quot;&quot;&quot;A test keyring which always outputs the same password        &quot;&quot;&quot;        priority = 1        def set_password(self, servicename, username, password):            pass        def get_password(self, servicename, username):            return &quot;password from TestKeyring&quot;        def delete_password(self, servicename, username):            pass    # set the keyring for keyring lib    keyring.set_keyring(TestKeyring())    # invoke the keyring lib    try:        keyring.set_password(&quot;demo-service&quot;, &quot;tarek&quot;, &quot;passexample&quot;)        print(&quot;password stored successfully&quot;)    except keyring.errors.PasswordSetError:        print(&quot;failed to store password&quot;)    print(&quot;password&quot;, keyring.get_password(&quot;demo-service&quot;, &quot;tarek&quot;))Disabling Keyring=================In many cases, uninstalling keyring will never be necessary.Especially on Windows and macOS, the behavior of keyring isusually degenerate, meaning it will return empty values tothe caller, allowing the caller to fall back to some otherbehavior.In some cases, the default behavior of keyring is undesirable andit would be preferable to disable the keyring behavior altogether.There are several mechanisms to disable keyring:- Uninstall keyring. Most applications are tolerant to keyring  not being installed. Uninstalling keyring should cause those  applications to fall back to the behavior without keyring.  This approach affects the Python environment where keyring  would otherwise have been installed.- Configure the Null keyring in the environment. Set  ``PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring``  in the environment, and the ``Null`` (degenerate) backend  will be used. This approach affects all uses of Keyring where  that variable is set.- Permanently configure the Null keyring for the user by running  ``keyring --disable`` or ``python -m keyring --disable``.  This approach affects all uses of keyring for that user.Altering Keyring Behavior=========================Keyring provides a mechanism to alter the keyring's behavior throughenvironment variables. Each backend implements a``KeyringBackend.set_properties_from_env``, whichwhen invoked will find all environment variables beginning with``KEYRING_PROPERTY_{NAME}`` and will set a property for each``{NAME.lower()}`` on the keyring. This method is invoked duringinitialization for the default/configured keyring.This mechanism may be used to set some useful values on variouskeyrings, including:- keychain; macOS, path to an alternate keychain file- appid; Linux/SecretService, alternate ID for the applicationUsing Keyring on Ubuntu 16.04=============================The following is a complete transcript for installing keyring in avirtual environment on Ubuntu 16.04.  No config file was used::  $ sudo apt install python3-venv libdbus-glib-1-dev  $ cd /tmp  $ pyvenv py3  $ source py3/bin/activate  $ pip install -U pip  $ pip install secretstorage dbus-python  $ pip install keyring  $ python  &gt;&gt;&gt; import keyring  &gt;&gt;&gt; keyring.get_keyring()  &lt;keyring.backends.SecretService.Keyring object at 0x7f9b9c971ba8&gt;  &gt;&gt;&gt; keyring.set_password(&quot;system&quot;, &quot;username&quot;, &quot;password&quot;)  &gt;&gt;&gt; keyring.get_password(&quot;system&quot;, &quot;username&quot;)  'password'Using Keyring on headless Linux systems=======================================It is possible to use the SecretService backend on Linux systems withoutX11 server available (only D-Bus is required). In this case:* Install the `GNOME Keyring`_ daemon.* Start a D-Bus session, e.g. run ``dbus-run-session -- sh`` and run  the following commands inside that shell.* Run ``gnome-keyring-daemon`` with ``--unlock`` option. The description of  that option says:      Read a password from stdin, and use it to unlock the login keyring      or create it if the login keyring does not exist.  When that command is started, enter a password into stdin and  press Ctrl+D (end of data). After that, the daemon will fork into  the background (use ``--foreground`` option to block).* Now you can use the SecretService backend of Keyring. Remember to  run your application in the same D-Bus session as the daemon... _GNOME Keyring: https://wiki.gnome.org/Projects/GnomeKeyringUsing Keyring on headless Linux systems in a Docker container=============================================================It is possible to use keyring with the SecretService backend in Docker containers as well.All you need to do is install the necessary dependencies and add the `--privileged` flagto avoid any `Operation not permitted` errors when attempting to unlock the system's keyring.The following is a complete transcript for installing keyring on a Ubuntu 18:04 container::  docker run -it -d --privileged ubuntu:18.04  $ apt-get update  $ apt install -y gnome-keyring python3-venv python3-dev  $ python3 -m venv venv  $ source venv/bin/activate # source a virtual environment to avoid polluting your system  $ pip3 install --upgrade pip  $ pip3 install keyring  $ dbus-run-session -- sh # this will drop you into a new D-bus shell  $ echo 'somecredstorepass' | gnome-keyring-daemon --unlock # unlock the system's keyring  $ python  &gt;&gt;&gt; import keyring  &gt;&gt;&gt; keyring.get_keyring()  &lt;keyring.backends.SecretService.Keyring object at 0x7f9b9c971ba8&gt;  &gt;&gt;&gt; keyring.set_password(&quot;system&quot;, &quot;username&quot;, &quot;password&quot;)  &gt;&gt;&gt; keyring.get_password(&quot;system&quot;, &quot;username&quot;)  'password'Integration===========API---The keyring lib has a few functions:* ``get_keyring()``: Return the currently-loaded keyring implementation.* ``get_password(service, username)``: Returns the password stored in the  active keyring. If the password does not exist, it will return None.* ``get_credential(service, username)``: Return a credential object stored  in the active keyring. This object contains at least ``username`` and  ``password`` attributes for the specified service, where the returned  ``username`` may be different from the argument.* ``set_password(service, username, password)``: Store the password in the  keyring.* ``delete_password(service, username)``: Delete the password stored in  keyring. If the password does not exist, it will raise an exception.In all cases, the parameters (``service``, ``username``, ``password``)should be Unicode text.Exceptions----------The keyring lib raises the following exceptions:* ``keyring.errors.KeyringError``: Base Error class for all exceptions in keyring lib.* ``keyring.errors.InitError``: Raised when the keyring cannot be initialized.* ``keyring.errors.PasswordSetError``: Raised when the password cannot be set in the keyring.* ``keyring.errors.PasswordDeleteError``: Raised when the password cannot be deleted in the keyring.Get Involved============Python keyring lib is an open community project and eagerlywelcomes contributors.* Repository: https://github.com/jaraco/keyring/* Bug Tracker: https://github.com/jaraco/keyring/issues/* Mailing list: http://groups.google.com/group/python-keyringFor Enterprise==============Available as part of the Tidelift Subscription.This project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.`Learn more &lt;https://tidelift.com/subscription/pkg/pypi-keyring?utm_source=pypi-keyring&amp;utm_medium=referral&amp;utm_campaign=github&gt;`_.Security Contact================To report a security vulnerability, please use the`Tidelift security contact &lt;https://tidelift.com/security&gt;`_.Tidelift will coordinate the fix and disclosure.Security Considerations=======================Each built-in backend may have security considerations to understandbefore using this library. Authors of tools or libraries utilizing``keyring`` are encouraged to consider these concerns.As with any list of known security concerns, this list is not exhaustive.Additional issues can be added as needed.- macOS Keychain    - Any Python script or application can access secrets created by      ``keyring`` from that same Python executable without the operating      system prompting the user for a password. To cause any specific      secret to prompt for a password every time it is accessed, locate      the credential using the ``Keychain Access`` application, and in      the ``Access Control`` settings, remove ``Python`` from the list      of allowed applications.- Freedesktop Secret Service    - No analysis has been performed- KDE4 &amp; KDE5 KWallet    - No analysis has been performed- Windows Credential Locker    - No analysis has been performedMaking Releases===============This project makes use of automated releases and continuousintegration. Thesimple workflow is to tag a commit and push it to Github. If itpasses tests in CI, it will be automatically deployed to PyPI.Other things to consider when making a release:- Check that the changelog is current for the intended release.Running Tests=============Tests are continuously run in Github Actions.To run the tests locally, install and invoke`tox &lt;https://pypi.org/project/tox&gt;`_.Background==========The project was based on Tarek Ziade's idea in `this post`_. Kang Zhanginitially carried it out as a `Google Summer of Code`_ project, and Tarekmentored Kang on this project... _this post: http://tarekziade.wordpress.com/2009/03/27/pycon-hallway-session-1-a-keyring-library-for-python/.. _Google Summer of Code: http://socghop.appspot.com/</longdescription>
</pkgmetadata>