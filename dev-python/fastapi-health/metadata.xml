<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;    &lt;strong&gt;FastAPI Health üöëÔ∏è&lt;/strong&gt;&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/Kludex/fastapi-health&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/last-commit/Kludex/fastapi-health&quot; alt=&quot;Latest Commit&quot;&gt;    &lt;/a&gt;        &lt;img src=&quot;https://img.shields.io/github/workflow/status/Kludex/fastapi-health/Test&quot;&gt;        &lt;img src=&quot;https://img.shields.io/codecov/c/github/Kludex/fastapi-health&quot;&gt;    &lt;br /&gt;    &lt;a href=&quot;https://pypi.org/project/fastapi-health&quot; target=&quot;_blank&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/fastapi-health&quot; alt=&quot;Package version&quot;&gt;    &lt;/a&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/fastapi-health&quot;&gt;    &lt;img src=&quot;https://img.shields.io/github/license/Kludex/fastapi-health&quot;&gt;&lt;/p&gt;The goal of this package is to help you to implement the [Health Check API](https://microservices.io/patterns/observability/health-check-api.html) pattern.## Installation``` bashpip install fastapi-health```## Quick StartCreate the health check endpoint dynamically using different conditions. Each condition is acallable, and you can even have dependencies inside of it:```pythonfrom fastapi import FastAPI, Dependsfrom fastapi_health import healthdef get_session():    return Truedef is_database_online(session: bool = Depends(get_session)):    return sessionapp = FastAPI()app.add_api_route(&quot;/health&quot;, health([is_database_online]))```## Advanced UsageThe `health()` method receives the following parameters:- `conditions`: A list of callables that represents the conditions of your API, it can return either `bool` or a `dict`.- `success_output`: An optional dictionary that will be the content response of a successful health call.- `failure_output`: An optional dictionary analogous to `success_output` for failure scenarios.- `success_status`: An integer that overwrites the default status (200) in case of success.- `failure_status`: An integer that overwrites the default status (503) in case of failure.It's important to notice that you can have a _peculiar_ behavior in case of hybrid return statements (`bool` and `dict`) on the conditions.For example:``` Pythonfrom fastapi import FastAPIfrom fastapi_health import healthdef healthy_condition():    return {&quot;database&quot;: &quot;online&quot;}def sick_condition():    return Falseapp = FastAPI()app.add_api_route(&quot;/health&quot;, health([healthy_condition, sick_condition]))```This will generate a response composed by the status being 503 (default `failure_status`), because `sick_condition` returns `False`, and the JSON body `{&quot;database&quot;: &quot;online&quot;}`. It's not wrong, or a bug. It's meant to be like this.## LicenseThis project is licensed under the terms of the MIT license.</longdescription>
</pkgmetadata>