<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Hashids[![Github Actions](https://github.com/ericls/django-hashids/workflows/test/badge.svg)](https://github.com/ericls/django-hashids/actions)[![Code Coverage](https://codecov.io/gh/ericls/django-hashids/branch/master/graph/badge.svg)](https://codecov.io/gh/ericls/django-hashids)[![Python Version](https://img.shields.io/pypi/pyversions/django-hashids.svg)](https://pypi.org/project/django-hashids/)[![PyPI Package](https://img.shields.io/pypi/v/django-hashids.svg)](https://pypi.org/project/django-hashids/)[![License](https://img.shields.io/pypi/l/django-hashids.svg)](https://github.com/ericls/django-hashids/blob/master/LICENSE)django-hashids is a simple and non-intrusive hashids library for Django. It acts as a model field, but it does not touch the database or change the model.# Features- Proxy the internal model `pk` field without storing the value in the database.- Allows lookups and filtering by hashid string.- Can be used as sort key- Allows specifying a salt, min_length and alphabet globally- Supports custom salt, min_length, and alphabet per field- Supports Django REST Framework Serializers- Supports exact ID searches in Django Admin when field is specified in search_fields.- Supports common filtering lookups, such as __iexact, __contains, __icontains, though matching is the same as __exact.- Supports other lookups: isnull, gt, gte, lt and lte.# Install```bashpip install django-hashids````django-hashids` is tested with Django 1.11, 2.2, 3.0, 3.1, 3.2, 4.0 and python 3.6, 3.7, 3.8, 3.9, 3.10.# UsageAdd `HashidsField` to any model```pythonfrom django_hashids import HashidsFieldclass TestModel(Model):    hashid = HashidsField(real_field_name=&quot;id&quot;)````TestModel.hashid` field will proxy `TestModel.id` field but all queries will return and receive hashids strings. `TestModel.id` will work as before.## Examples```pythoninstance = TestModel.objects.create()instance2 = TestModel.objects.create()instance.id  # 1instance2.id  # 2# Allows access to the fieldinstance.hashid  # '1Z'instance2.hashid  # '4x'# Allows querying by the fieldTestModel.objects.get(hashid=&quot;1Z&quot;)TestModel.objects.filter(hashid=&quot;1Z&quot;)TestModel.objects.filter(hashid__in=[&quot;1Z&quot;, &quot;4x&quot;])TestModel.objects.filter(hashid__gt=&quot;1Z&quot;)  # same as id__gt=1, would return instance 2# Allows usage in queryset.valuesTestModel.objects.values_list(&quot;hashid&quot;, flat=True) # [&quot;1Z&quot;, &quot;4x&quot;]TestModel.objects.filter(hashid__in=TestModel.objects.values(&quot;hashid&quot;))```## ConfigThe folloing attributes can be added in settings file to set default arguments of `HashidsField`:1. `DJANGO_HASHIDS_SALT`: default salt2. `DJANGO_HASHIDS_MIN_LENGTH`: default minimum length3. `DJANGO_HASHIDS_ALPHABET`: default alphabet`HashidsField` does not reqiure any arguments but the followinig arguments can be supplied to modify its behavior.| Name               |                        Description                        || ------------------ | :-------------------------------------------------------: || `real_field_name`  |                  The proxied field name                   || `hashids_instance` | The hashids instance used to encode/decode for this field || `salt`             |     The salt used for this field to generate hashids      || `min_length`       |  The minimum length of hashids generated for this field   || `alphabet`         |    The alphabet used by this field to generate hashids    |The argument `hashids_instance` is mutually exclusive to `salt`, `min_length` and `alphabet`. See [hashids-python](https://github.com/davidaurelio/hashids-python) for more info about the arguments.Some common Model arguments such as `verbose_name` are also supported.</longdescription>
</pkgmetadata>