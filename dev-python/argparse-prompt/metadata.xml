<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ArgparsePromptArgparsePrompt is a wrapper for the built-in Argparse, allowing missing command-line arguments to be filled in by theuser via interactive prompts# InstallationArgparsePrompt can be installed using pip:```bashpip install argparse_prompt```# Usage## Basic UsageThe only public interface of this module is the `PromptParser` class, which is a subclass of Python's [ArgumentParser](https://docs.python.org/3/library/argparse.html). Use this class in exactly the same way that you woulduse ArgumentParser, except that, if any argument does not have a specified `default` value, and a value is not providedfor it on the commandline, the `PromptParser` will prompt for a value for this argument using `input()`, which is read from stdin.Consider the code below (taken from one of the unit tests):```pythonfrom argparse_prompt import PromptParserparser = PromptParser()parser.add_argument('--argument', '-a', help='An argument you could provide', default='foo')print(parser.parse_args().argument)```If you run this script with a value for `argument`, the parsing will run as normal:```$ python test/default_parser.py --argument 1212```However if you don't specify a value for `arg`, the parser will prompt you for one```$ python test/default_parser.pyargument: An argument you could provide&gt; (foo) carcar```## Default ValuesSince this argument has a default value, you can also just hit enter and this value will be used automatically:```python test/default_parser.pyargument: An argument you could provide&gt; (foo) foo```## Type CheckingYou can also specify a type for the argument in the normal way:```pythonfrom argparse_prompt import PromptParserparser = PromptParser()parser.add_argument('--argument', '-a', help='An argument you could provide', type=int)print(parser.parse_args().argument)```If you do, this type checking will be used for the value you enter at the prompt:```$ python test/typed_parser.py  argument: An argument you could provideabcArgument &quot;argument&quot; was given a value not of type &lt;class 'int'&gt;```## Secure ValuesFor arguments that need to be secure, such as passwords, secret keys etc, you can use `secure=True` when defining yourargument. This will cause whatever the user inputs for that field to be hidden from the terminal, in the same way that `git`, or `ssh` hides the password input.For example:```pythonparser.add_argument('--password', '-p', help='A very secret password', secure=True)```## Situationally Disabling the PromptIf you use the `prompt` argument to `add_argument`, parsing will be disabled:```pythonparser.add_argument('--argument', '-a', help='An argument you could provide', default='foo', prompt=False)```Also, if you want to disable all prompting (for an automated script, for example), just set the `ARGPARSE_PROMPT_AUTO` toa truthy value:```bashARGPARSE_PROMPT_AUTO=1 python test/default_parser.py```</longdescription>
</pkgmetadata>