<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># hccpy Hierachical Condition Categories Python Package.This module implements the [Hierachical Condition Categories](https://www.cms.gov/cciio/resources/forms-reports-and-other-resources/downloads/ra-march-31-white-paper-032416.pdf) that are used for adjusting risks for the Medicare population.The original SAS implementation can be found [here](https://www.nber.org/data/cms-risk-adjustment.html).The latest version is 0.1.9 which was released on 05/13/2023.Currently, hccpy supports:* CMS-HCC V22* CMS-HCC V23* CMS-HCC V24* CMS-HCC V28* CMS-HCC ESRD* HHS-HCC 2019 (V05)* HHS-HCC 2022 (V07)Note that hccpy does not have support for ICD-9.## InstallingInstalling from the source:```$ git clone git@github.com:yubin-park/hccpy.git$ cd hccpy$ python setup.py develop```Or, simply using `pip`:```$ pip install hccpy```## File Structure- `hccpy/ `: The package source code is located here.  - `data/`: The raw data files directly downloaded from [the National Burequ of Economics Research](https://www.nber.org/data/cms-risk-adjustment.html)    - Here, you see the original SAS scripts and data files for the CMS HCC models.  - `_AGESEXV2.py`: a Python re-write of the `AGESEXV2.TXT` SAS script.  - `_V2218O1M.py`: a Python re-write of the `V2218O1M.TXT` SAS script.  - `_V2218O1P.py`: a Python re-write of the `V2219O1P.TXT` SAS script.  - `_V22I0ED2.py`: a Python re-write of the `V22I0ED2.TXT` SAS script.  - `_V2318P1M.py`: a Python re-write of the `V2318P1M.TXT` SAS script.  - `_V2419P1M.py`: a Python re-write of the `V2419P1M.TXT` SAS script.  - `hcc.py`: the **main** module that combines the various logical components for CMS-HCC  - `hhshcc.py`: the **main** module for HHS-HCC  - `utils.py`: utility functions for reading data files- `tests/`: test scripts to check the validity of the outputs.- `LICENSE.txt`: Apache 2.0.- `README.md`: This README file.- `setup.py`: a set-up script.## Code Examples`hccpy` is really simple to use.Please see some examples below:### Importing To import the `HCCEngine` class from `hccpy`:  ```python&gt;&gt;&gt; import json&gt;&gt;&gt; from hccpy.hcc import HCCEngine&gt;&gt;&gt; he = HCCEngine()&gt;&gt;&gt; print(he.profile.__doc__)Returns the HCC risk profile of a given patient information.        Parameters        ----------        dx_lst : list of str                 A list of ICD10 codes for the measurement year.        age : int or float              The age of the patient.        sex : str               The sex of the patient; {&quot;M&quot;, &quot;F&quot;}        elig : str               The eligibility segment of the patient.               Allowed values are as follows:               - &quot;CFA&quot;: Community Full Benefit Dual Aged               - &quot;CFD&quot;: Community Full Benefit Dual Disabled               - &quot;CNA&quot;: Community NonDual Aged               - &quot;CND&quot;: Community NonDual Disabled               - &quot;CPA&quot;: Community Partial Benefit Dual Aged               - &quot;CPD&quot;: Community Partial Benefit Dual Disabled               - &quot;INS&quot;: Long Term Institutional               - &quot;NE&quot;: New Enrollee               - &quot;SNPNE&quot;: SNP NE        orec: str              Original reason for entitlement code.              - &quot;0&quot;: Old age and survivor's insurance              - &quot;1&quot;: Disability insurance benefits              - &quot;2&quot;: End-stage renal disease               - &quot;3&quot;: Both DIB and ESRD        medicaid: bool                  If the patient is in Medicaid or not.&gt;&gt;&gt;```### HCC-Profiling a Member with Diagnosis CodesTo get a HCC profile from a list of diagnosis codes (in ICD-10):```python&gt;&gt;&gt; rp = he.profile([&quot;E1169&quot;, &quot;I5030&quot;, &quot;I509&quot;, &quot;I211&quot;, &quot;I209&quot;, &quot;R05&quot;])&gt;&gt;&gt; print(json.dumps(rp, indent=2)){  &quot;risk_score&quot;: 1.3139999999999998,  &quot;details&quot;: {    &quot;CNA_M70_74&quot;: 0.379,    &quot;CNA_HCC85&quot;: 0.323,    &quot;CNA_HCC88&quot;: 0.14,    &quot;CNA_HCC18&quot;: 0.318,    &quot;CNA_HCC85_gDiabetesMellit&quot;: 0.154,    &quot;CNA_DIABETES_CHF&quot;: 0.0  },  &quot;hcc_lst&quot;: [    &quot;HCC85&quot;,    &quot;HCC88&quot;,    &quot;HCC18&quot;  ],  &quot;hcc_map&quot;: {    &quot;I5030&quot;: &quot;HCC85&quot;,    &quot;I209&quot;: &quot;HCC88&quot;,    &quot;E1169&quot;: &quot;HCC18&quot;,    &quot;I509&quot;: &quot;HCC85&quot;  },  &quot;parameters&quot;: {    &quot;age&quot;: 70,    &quot;sex&quot;: &quot;M&quot;,    &quot;elig&quot;: &quot;CNA&quot;,    &quot;medicaid&quot;: false,    &quot;disabled&quot;: 0,    &quot;origds&quot;: 0  }}&gt;&gt;&gt;```### HCC for the new model, V28Please use &quot;V28&quot; when initializing the engine.```python&gt;&gt;&gt; from hccpy.hcc import HCCEngine&gt;&gt;&gt; he = HCCEngine(&quot;28&quot;)```Also, see the `test_v23()` examples in `tests/hcc_tests.py`.### Coding Intensity Factor and Normalization FactorsYou can add normalization factors and coding intensity factors to directly calculate the adjusted risk score.By default, these two parameters are set as:```pythoncif = 0.059, # coding intensity factor.norm_params={   &quot;C&quot;: 1.015, # community/institution models  &quot;D&quot;: 1.022, # ESRD Dialysis  &quot;G&quot;: 1.028 # ESRD Graft}```You can overwrite these parameters. For example, this setting below would not adjust the raw risk score.```pythonHCCEngine(version=&quot;28&quot;, cif = 0, norm_params={&quot;C&quot;: 1})```To see the adjusted risk scores, ```python&gt;&gt;&gt; from hccpy.hcc import HCCEngine&gt;&gt;&gt; he = HCCEngine(&quot;28&quot;)&gt;&gt;&gt; rp = he.profile([&quot;E1169&quot;, &quot;I5030&quot;, &quot;I509&quot;, &quot;I211&quot;, &quot;I209&quot;, &quot;R05&quot;],                    age=70, sex=&quot;M&quot;, elig=&quot;CNA&quot;) &gt;&gt;&gt; rp[&quot;risk_score_adj&quot;]```Also, see the `test_norm_factors()` examples in `tests/hcc_tests.py`.### HCC-Profiling a New MemberIf a member is new, then provide the `elig=&quot;NE&quot;` in the input:```python&gt;&gt;&gt; rp = he.profile([], elig=&quot;NE&quot;, age=65)&gt;&gt;&gt; print(json.dumps(rp, indent=2)){  &quot;risk_score&quot;: 0.514,  &quot;details&quot;: {    &quot;NE_NMCAID_NORIGDIS_NEM65&quot;: 0.514  },  &quot;hcc_lst&quot;: [],  &quot;hcc_map&quot;: {},  &quot;parameters&quot;: {    &quot;age&quot;: 65,    &quot;sex&quot;: &quot;M&quot;,    &quot;elig&quot;: &quot;NE_NMCAID_NORIGDIS_NE&quot;,    &quot;medicaid&quot;: false,    &quot;disabled&quot;: 0,    &quot;origds&quot;: 0  }}&gt;&gt;&gt;```### HCC-Profiling a Intitutionalized MemberIf a member has a different eligibility status, change the eligibility as follows (e.g. institutionalized member):```python&gt;&gt;&gt; rp = he.profile([&quot;E1169&quot;, &quot;I5030&quot;, &quot;I509&quot;, &quot;I209&quot;], elig=&quot;INS&quot;)&gt;&gt;&gt; print(json.dumps(rp, indent=2)){  &quot;risk_score&quot;: 2.6059999999999994,  &quot;details&quot;: {    &quot;INS_M70_74&quot;: 1.323,    &quot;INS_HCC88&quot;: 0.497,    &quot;INS_HCC18&quot;: 0.441,    &quot;INS_HCC85&quot;: 0.191,    &quot;INS_HCC85_gDiabetesMellit&quot;: 0.0,    &quot;INS_DIABETES_CHF&quot;: 0.154  },  &quot;hcc_lst&quot;: [    &quot;HCC88&quot;,    &quot;HCC18&quot;,    &quot;HCC85&quot;  ],  &quot;hcc_map&quot;: {    &quot;I209&quot;: &quot;HCC88&quot;,    &quot;E1169&quot;: &quot;HCC18&quot;,    &quot;I509&quot;: &quot;HCC85&quot;,    &quot;I5030&quot;: &quot;HCC85&quot;  },  &quot;parameters&quot;: {    &quot;age&quot;: 70,    &quot;sex&quot;: &quot;M&quot;,    &quot;elig&quot;: &quot;INS&quot;,    &quot;medicaid&quot;: false,    &quot;disabled&quot;: 0,    &quot;origds&quot;: 0  }}```### HCC-Describing a Hierachical Condition CategoryTo get the description, hierarchy parents and children of a HCC:```python&gt;&gt;&gt; hcc_doc = he.describe_hcc(&quot;HCC19&quot;)  # either &quot;HCC19&quot;, &quot;hcc19&quot; or &quot;19&quot;&gt;&gt;&gt; print(json.dumps(hcc_doc, indent=2)){  &quot;description&quot;: &quot;Diabetes without Complication&quot;,  &quot;children&quot;: [],  &quot;parents&quot;: [    &quot;HCC17&quot;,    &quot;HCC18&quot;  ]}```### Eligible Risk Adjustment CodesNot all claims are eligible for risk adjustment.For professional claims, a certain set of CPT codes is required to be eligible, while for institutional claims, a certain set of bill types is needed.This module provides an easy interface for determining if a certain claim is eligible for risk adjustment or not.NOTE: This function uses CPT codes, and this requires [AMA CPT license](https://www.ama-assn.org/practice-management/cpt/ama-cpt-licensing-overview).Once you carefully review the license, you need to download [a data file](https://www.cms.gov/Medicare/Health-Plans/MedicareAdvtgSpecRateStats/Downloads/2019-Medicare-CPT-HCPC-List.zip).```python&gt;&gt;&gt; from hccpy.raeligible import RAEligible&gt;&gt;&gt; rae = RAEligible()&gt;&gt;&gt; rae.load(fn=&quot;CY2019Q2_CPTHCPCS_CMS_20190425.csv&quot;)&gt;&gt;&gt; rae.is_eligible(pr_lst=[&quot;C5271&quot;])True&gt;&gt;&gt; rae.is_eligible(pr_lst=[&quot;C5270&quot;])False&gt;&gt;&gt;```NOTE: The data file (`CY2019Q2_CPTHCPCS_CMS_20190425.csv`) should be located in the same folder.## NOTE- https://packaging.python.org/tutorials/packaging-projects/```python -m buildtwine upload dist/*```## LicenseApache 2.0## Authors/Maintainers- Yubin Park @yubin-park- Thomas Chen @t-kychen- Matt Walker @mwalker14- David Roberts @dr00b- Kevin Buchan Jr. @kevinbuchanjr## References- https://www.nber.org/data/cms-risk-adjustment.html- https://www.cms.gov/medicare/health-plans/medicareadvtgspecratestats/risk-adjustors.html- https://github.com/calyxhealth/pyriskadjust- https://github.com/AlgorexHealth/hcc-python- https://github.com/galtay/hcc_risk_models- https://www.cms.gov/cciio/resources/forms-reports-and-other-resources/downloads/ra-march-31-white-paper-032416.pdf- https://www.cms.gov/cciio/resources/regulations-and-guidance/index.html</longdescription>
</pkgmetadata>