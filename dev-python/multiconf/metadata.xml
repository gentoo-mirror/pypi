<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build Status| |Coverage| |Documentation Status| |PyPi Package|What====Multiconf is a framework for describing a complex configuration formultiple environments using Python.Why?====It started from a simple need of deployment automation for Java EE projects,Apache and more. Having worked on different projects with nested levels ofplain text property files or XML configuration files,I thought somethingbetter was needed.With plain text property files, the number of property files increases asenvironments and technologies are added to a project. It becomes hard to getan overview of properties describing similar configurations. Has a propertyvalue been defined for every environment? And it is getting even harder todescribe *proper* settings: what depends on what and what can be used and whatcan't.With XML on the other hand, you can create a strict validated model, but youkeep having to extend the schema and the tools processing it. And maybe youdon't like the verbosity.So why use XML or property files when you can have your configuration directlyin python? So, out of this Multiconf was born.What are proper settings?-------------------------E.g:-  All configured ports follow one convention-  All servers names follow one convention-  Some configuration objects must have mandatory parameters (for   example: Database name or URL required for Datasource object)-  Some configuration objects must have mandatory children (for example:   WebLogic Cluster doesn't make sense w/o Managed Servers)-  Default settings are propagated through all environments and can be   overridden for specific environments-  No duplicated settingsHow===Multiconf provides a set of classes, where attributes may have differentvalues for different environments, while enforcing that a value isdefined for all defined environments. Multiconf allows you to implementyour own DOM like object model and get early warning that somethingwithin your definition is wrong. Other tools use YAML or JSON to definesettings of the components, but then you need something to validatethose settings. Multiconf is both - definition and validation. Multiconfallows you to define environment groups, so that you can easily createnew environments by adding them to a group and only override the valuesthat differ from the group values.You have to define your configuration data model as classes derived fromMulticonf base classes, one of which is ``ConfigItem``.E.g, in your config data model (your framework) you define:.. code:: python    class Host(ConfigItem):        def __init__(name=MC_REQUIRED, mem=MC_REQUIRED):            self.name = name            self.mem = mem        @property        def fqd(self):            return &quot;{name}.{env}.my.organisation&quot;.format(                self.name, self.env.name)In you project configuration file you can then declare a configuration objectwith different attribute values for different environments:.. code:: python    ...    with Host(&quot;web1&quot;) as host:        host.setattr('mem', dev=&quot;1G&quot;, tst=&quot;2G&quot;, preprod=&quot;4G&quot;, prod=&quot;4G&quot;)Above uses the Multiconf ``setattr`` method to assign different values to differentenvs. Note that the envs *dev*, *tst*, *preprod* and *prod* must have been declaredbeforehand and Multiconf will ensure that all of them get a value.After instantiating your config for the *prod* env you can then accessproperties on the host object::    cfg.host.name -&gt; web1    cfg.host.mem -&gt; 4G    cfg.host.fqd -&gt; web1.prod.my.organisationNote that classes derived from the Multiconf classes (e.g: ``ConfigItem``) do notallow on the fly creation of attributes. Configuration items are not meant forgeneral programming, but for strictly validated configurations.See the documentation and the *demo* project for details about nested objects,repeatable objects, instantiation, environment definitions, environment groups,default values and other details.What Multiconf is not=====================-  Multiconf is not tied to configuration of any particular product or   technology.-  Multiconf doesn't know how to create any of the environment's   components, i.e. Multiconf has no 'playbooks' or 'recipes' to execute.Running the demo:=================Execute ./demo/demo.py --env (or 'python demo/demo.py ...'), e.g:./demo/demo.py --env prodIf run without any arguments it will print a usage message The validenvironments are those specified at the top of demo/config.pyRunning the test suite:=======================Execute: make, py.test or tox Running 'make' will execute the testsuite, the demo and build the documentation.Requirements============Multiconf: Python 3.6.1+ Test Suite: pytest, pytest-cov (for older Python versions use multiconf 8.x)demjson (optional) - pip install -U pytest pytest-cov demjson.. |Build Status| image:: https://api.travis-ci.org/lhupfeldt/multiconf.svg?branch=master   :target: https://travis-ci.org/lhupfeldt/multiconf.. |Documentation Status| image:: https://readthedocs.org/projects/multiconf/badge/?version=stable   :target: https://multiconf.readthedocs.org/en/stable/.. |PyPi Package| image:: https://badge.fury.io/py/multiconf.svg   :target: https://badge.fury.io/py/multiconf.. |Coverage| image:: https://coveralls.io/repos/github/lhupfeldt/multiconf/badge.svg?branch=master   :target: https://coveralls.io/github/lhupfeldt/multiconf?branch=master.. |License| image:: https://img.shields.io/github/license/lhupfeldt/multiconf.svg   :target: https://github.com/lhupfeldt/multiconf/blob/master/LICENSE.TXT</longdescription>
</pkgmetadata>