<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># WorkToy v0.31.2Collection of General Utilities```pip install worktoy```## Parsing ArgumentsIn the present version, parse arguments with `extractArg`:    def func(*args, **kwargs) -&gt; Any:        &quot;&quot;&quot;Let us find a str indicating name in these arguments!&quot;&quot;&quot;        nameKeys = stringList('name, identifier, title, target')        name, args, kwargs = extractArg(str, nameKeys, *args, **kwargs)        #  And lets find an integer to represent the amount:        amountKeys = stringList('amount, count, quantity')        amount, args, kwargs = extractArg(int, nameKeys, *args, **kwargsIn the above example, we used two powerful convenience functions fromWorkToy to parse an arbitrary collection of positional and keywordarguments to a `str` and an `int`. The `stringList` splits our text oncommas followed by a space, providing:    nameKeys    &gt;&gt;&gt; ['name', 'identifier', 'title', 'target']    amountKeys    &gt;&gt;&gt; ['amount, count, quantity']In the next part, `extractArg` finds the first keyword argument from thelist of keys that belongs to the type given and returns it. If it findsno such argument, it returns the first positional argument encounteredhaving the indicated type. This allows a great deal of flexibility in howa function is invoked.## The None-aware 'maybe'In a programming language which shall rename nameless as well as typeless,the following syntax is available:    const func = (arg = null) =&gt; {        let val1 = arg || 1.0;        let val2 = arg ?? 1.0;        return [val1, val2]; }In the above code, the default argument is set to null (in this contextnull is treated the same as None in Python). The `??` operator is thenull-coalescence operator, which is nearly the same as the `or` operator.  Consider the return value obtained from calling `func()`:    func()    &gt;&gt;&gt; (2)  [1, 1]This makes sense, but what happens when we call the function on a falsyvalue other than null, such as 0:    func(0)    &gt;&gt;&gt; (3)  [1, 0]The first value in the return value comes from using the pipes (thelogical or operator), is not aware of the difference between null andother falsy values. The null-coalescence operator is able to tell thedifference. The WorkToy module brings this to python along with severalderived utility functions:### `maybe`In the below python code, we implement the same function using the maybefunction from WorkToy:    def func(arg: Any = None) -&gt; Any:        &quot;&quot;&quot;Function using the maybe from the WorkToy module&quot;&quot;&quot;        val1 = arg or 1.0        val2 = maybe(arg, 1.0)        return [val1, val2]The implementation of maybe simply follows a common pattern:    def maybe(*args) -&gt; Any:        &quot;&quot;&quot;Implementation of maybe returns the first argument given that         is different from None. If no such argument is found None is         returned.&quot;&quot;&quot;        for arg in args:            if arg is not None:                 return arg        return NoneUnlike the `??` operator, the `maybe` operator handles an arbitrarynumber of arguments.### `maybeType`The first of the derived functions finds the first argument of aparticular type:    def maybeType(type_: type, *args) -&gt; type_:        &quot;&quot;&quot;Returns the first argument of given type&quot;&quot;&quot;### `maybeTypes`Adding an 's' returns every argument of given type. Further, it supportskeyword arguments `pad: int` and `padChar: Any`. If `pad` is given itdefines the length of the returned list padded with `padChar` or `None`by default. Setting `pad` will either pad or crop as necessary.</longdescription>
</pkgmetadata>