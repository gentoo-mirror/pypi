<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GrowthBook Python SDKPowerful Feature flagging and A/B testing for Python apps.![Build Status](https://github.com/growthbook/growthbook-python/workflows/Build/badge.svg)-  **No external dependencies**-  **Lightweight and fast**-  **No HTTP requests** everything is defined and evaluated locally-  Python 3.6+-  100% test coverage-  Flexible **targeting**-  **Use your existing event tracking** (GA, Segment, Mixpanel, custom)-  **Remote configuration** to change feature flags without deploying new code## Installation`pip install growthbook` (recommended) or copy `growthbook.py` into your project## Quick Usage```pythonimport requestsfrom growthbook import GrowthBook# We recommend using a db or cache layer in productionapiResp = requests.get(&quot;https://cdn.growthbook.io/api/features/MY_API_KEY&quot;)features = apiResp.json()[&quot;features&quot;]# User attributes for targeting and experimentationattributes = {  &quot;id&quot;: &quot;123&quot;,  &quot;customUserAttribute&quot;: &quot;foo&quot;}def on_experiment_viewed(experiment, result):  # Use whatever event tracking system you want  analytics.track(attributes[&quot;id&quot;], &quot;Experiment Viewed&quot;, {    'experimentId': experiment.key,    'variationId': result.variationId  })# Create a GrowthBook instancegb = GrowthBook(  attributes = attributes,  features = features,  trackingCallback = on_experiment_viewed)# Simple on/off feature gatingif gb.isOn(&quot;my-feature&quot;):  print(&quot;My feature is on!&quot;)# Get the value of a feature with a fallbackcolor = gb.getFeatureValue(&quot;button-color-feature&quot;, &quot;blue&quot;)```## GrowthBook classThe GrowthBook constructor has the following parameters:-  **enabled** (`bool`) - Flag to globally disable all experiments. Default true.-  **attributes** (`dict`) - Dictionary of user attributes that are used for targeting and to assign variations-  **url** (`str`) - The URL of the current request (if applicable)-  **features** (`dict`) - Feature definitions from the GrowthBook API-  **forcedVariations** (`dict`) - Dictionary of forced experiment variations (used for QA)-  **qaMode** (`boolean`) - If true, random assignment is disabled and only explicitly forced variations are used.-  **trackingCallback** (`callable`) - A function that takes `experiment` and `result` as arguments.There are also getter and setter methods for features and attributes if you need to update them later in the request:```pythongb.setFeatures(gb.getFeatures())gb.setAttributes(gb.getAttributes())```### FeaturesDefines all of the available features plus rules for how to assign values to users. Features are usually fetched from the GrowthBook API and persisted in cache or a database in production.Feature definitions are defined in a JSON format. You can fetch them directly from the GrowthBook API:```pythonimport requestsapiResp = requests.get(&quot;https://cdn.growthbook.io/api/features/MY_API_KEY&quot;)features = apiResp.json()[&quot;features&quot;]```Or, you can use a copy stored in your database or cache server instead:```pythonimport jsonjson_string = '{&quot;feature-1&quot;:{...},&quot;feature-2&quot;:{...},...}'features = json.loads(json_string)```We recommend using the db/cache approach for production.### AttributesYou can specify attributes about the current user and request. These are used for two things:1.  Feature targeting (e.g. paid users get one value, free users get another)2.  Assigning persistent variations in A/B tests (e.g. user id &quot;123&quot; always gets variation B)Attributes can be any JSON data type - boolean, integer, float, string, list, or dict.```pythonattributes = {  'id': &quot;123&quot;,  'loggedIn': True,  'age': 21.5,  'tags': [&quot;tag1&quot;, &quot;tag2&quot;],  'account': {    'age': 90  ]}```### Tracking ExperimentsAny time an experiment is run to determine the value of a feature, you want to track that event in your analytics system.You can use the `trackingCallback` option to do this:```pythonfrom growthbook import GrowthBook, Experiment, Resultdef on_experiment_viewed(experiment: Experiment, result: Result):  # Use whatever event tracking system you want  analytics.track(attributes[&quot;id&quot;], &quot;Experiment Viewed&quot;, {    'experimentId': experiment.key,    'variationId': result.variationId  })gb = GrowthBook(  trackingCallback = on_experiment_viewed)```## Using FeaturesThere are 3 main methods for interacting with features.- `gb.isOn(&quot;feature-key&quot;)` returns true if the feature is on- `gb.isOff(&quot;feature-key&quot;)` returns false if the feature is on- `gb.getFeatureValue(&quot;feature-key&quot;, &quot;default&quot;)` returns the value of the feature with a fallbackIn addition, you can use `gb.evalFeature(&quot;feature-key&quot;)` to get back a `FeatureResult` object with the following properties:- **value** - The JSON-decoded value of the feature (or `null` if not defined)- **on** and **off** - The JSON-decoded value cast to booleans- **source** - Why the value was assigned to the user. One of `unknownFeature`, `defaultValue`, `force`, or `experiment`- **experiment** - Information about the experiment (if any) which was used to assign the value to the user- **experimentResult** - The result of the experiment (if any) which was used to assign the value to the user## Inline ExperimentsInstead of declaring all features up-front and referencing them by ids in your code, you can also just run an experiment directly. This is done with the `gb-&gt;run` method:```pythonfrom growthbook import Experimentexp = Experiment(  key = &quot;my-experiment&quot;,   variations = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;])# Either &quot;red&quot;, &quot;blue&quot;, or &quot;green&quot;print(gb.run(exp).value)```As you can see, there are 2 required parameters for experiments, a string key, and an array of variations.  Variations can be any data type, not just strings.There are a number of additional settings to control the experiment behavior:-  **key** (`str`) - The globally unique tracking key for the experiment-  **variations** (`any[]`) - The different variations to choose between-  **weights** (`float[]`) - How to weight traffic between variations. Must add to 1.-  **coverage** (`float`) - What percent of users should be included in the experiment (between 0 and 1, inclusive)- **condition** (`dict`) - Targeting conditions-  **force** (`int`) - All users included in the experiment will be forced into the specified variation index-  **hashAttribute** (`string`) - What user attribute should be used to assign variations (defaults to &quot;id&quot;)-  **namespace** (`tuple[str,float,float]`) - Used to run mutually exclusive experiments.Here's an example that uses all of them:```pythonexp = Experiment(  key=&quot;my-test&quot;,  # Variations can be a list of any data type  variations=[0, 1],  # Run a 40/60 experiment instead of the default even split (50/50)  weights=[0.4, 0.6],  # Only include 20% of users in the experiment  coverage=0.2,  # Targeting condition using a MongoDB-like syntax  condition={    'country': 'US',    'browser': {      '$in': ['chrome', 'firefox']    }  },  # Use an alternate attribute for assigning variations (default is 'id')  hashAttribute=&quot;sessionId&quot;,  # Includes the first 50% of users in the &quot;pricing&quot; namespace  # Another experiment with a non-overlapping range will be mutually exclusive (e.g. [0.5, 1])  namespace=(&quot;pricing&quot;, 0, 0.5),)```### Inline Experiment Return ValueA call to `run` returns a `Result` object with a few useful properties:```pythonresult = gb.run(exp)# If user is part of the experimentprint(result.inExperiment) # True or False# The index of the assigned variationprint(result.variationId) # e.g. 0 or 1# The value of the assigned variationprint(result.value) # e.g. &quot;A&quot; or &quot;B&quot;# If the variation was randomly assigned by hashing user attributesprint(result.hashUsed) # True or False# The user attribute used to assign a variationprint(result.hashAttribute) # &quot;id&quot;# The value of that attributeprint(result.hashValue) # e.g. &quot;123&quot;```The `inExperiment` flag will be false if the user was excluded from being part of the experiment for any reason (e.g. failed targeting conditions).The `hashUsed` flag will only be true if the user was randomly assigned a variation. If the user was forced into a specific variation instead, this flag will be false.### Example Experiments3-way experiment with uneven variation weights:```pythongb.run(Experiment(  key = &quot;3-way-uneven&quot;,  variations = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;],  weights = [0.5, 0.25, 0.25]))```Slow rollout (10% of users who match the targeting condition):```python# User is marked as being in &quot;qa&quot; and &quot;beta&quot;gb = GrowthBook(  attributes = {    &quot;id&quot;: &quot;123&quot;,    &quot;beta&quot;: True,    &quot;qa&quot;: True,  },)gb.run(Experiment(  key = &quot;slow-rollout&quot;,  variations = [&quot;A&quot;, &quot;B&quot;],  coverage = 0.1,  condition = {    'beta': True  }))```Complex variations```pythonresult = gb.run(Experiment(  key = &quot;complex-variations&quot;,  variations = [    (&quot;blue&quot;, &quot;large&quot;),    (&quot;green&quot;, &quot;small&quot;)  ],))# Either &quot;blue,large&quot; OR &quot;green,small&quot;print(result.value[0] + &quot;,&quot; + result.value[1])```Assign variations based on something other than user id```pythongb = GrowthBook(  attributes = {    &quot;id&quot;: &quot;123&quot;,    &quot;company&quot;: &quot;growthbook&quot;  })# Users in the same company will always get the same variationgb.run(Experiment(  key = &quot;by-company-id&quot;,  variations = [&quot;A&quot;, &quot;B&quot;],  hashAttribute = &quot;company&quot;))```### DjangoFor Django (and other web frameworks), we recommend adding a simple middleware where you instantiate the GrowthBook object```pythonfrom growthbook import GrowthBookdef growthbook_middleware(get_response):    def middleware(request):        request.gb = GrowthBook(          # ...        )        response = get_response(request)        request.gb.destroy() # Cleanup        return response    return middleware```Then, you can easily evaluate a feature (or run an inline experiment) in any of your views:```pythondef index(request):    featureEnabled = request.gb.isOn(&quot;my-feature&quot;)    # ...```</longdescription>
</pkgmetadata>