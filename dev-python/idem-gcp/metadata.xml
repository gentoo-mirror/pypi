<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========idem-gcp========.. image:: https://img.shields.io/badge/made%20with-pop-teal   :alt: Made with pop, a Python implementation of Plugin Oriented Programming   :target: https://pop.readthedocs.io/.. image:: https://img.shields.io/badge/made%20with-idem-teal   :alt: Made with idem, a Python implementation of Plugin Oriented Programming   :target: https://www.idemproject.io/.. image:: https://img.shields.io/badge/docs%20on-docs.idemproject.io-blue   :alt: Documentation is published with Sphinx on docs.idemproject.io   :target: https://docs.idemproject.io/idem-gcp/en/latest/index.html.. image:: https://img.shields.io/badge/made%20with-python-yellow   :alt: Made with Python   :target: https://www.python.org/GCP Cloud Provider for Idem.About=====``idem-gcp`` helps manage GCP with ``idem``.* `idem-gcp source code &lt;https://gitlab.com/vmware/idem/idem-gcp&gt;`__* `idem-gcp documentation &lt;https://docs.idemproject.io/idem-gcp/en/latest/index.html&gt;`__What is POP?------------This project is built with `pop &lt;https://pop.readthedocs.io/&gt;`__, a Python-basedimplementation of *Plugin Oriented Programming (POP)*. POP seeks to bringtogether concepts and wisdom from the history of computing in new ways to solvemodern computing problems.For more information:* `Intro to Plugin Oriented Programming (POP) &lt;https://pop-book.readthedocs.io/en/latest/&gt;`__* `pop-awesome &lt;https://gitlab.com/saltstack/pop/pop-awesome&gt;`__* `pop-create &lt;https://gitlab.com/saltstack/pop/pop-create/&gt;`__What is Idem?-------------This project is built with `idem &lt;https://www.idemproject.io/&gt;`__, an idempotent,imperatively executed, declarative programming language written in Python. This project extendsidem!For more information:* `Idem Project Website &lt;https://www.idemproject.io/&gt;`__* `Idem Project docs portal &lt;https://docs.idemproject.io/&gt;`__Getting Started===============Prerequisites-------------* Python 3.8+* git *(if installing from source, or contributing to the project)*Installation------------.. note::   If wanting to contribute to the project, and setup your local development   environment, see the ``CONTRIBUTING.rst`` document in the source repository   for this project.If wanting to use ``idem-gcp``, you can do so by eitherinstalling from PyPI or from source.Install from PyPI+++++++++++++++++.. code-block:: bash  pip install idem-gcpInstall from source+++++++++++++++++++Clone the `idem_gcp` repository... code:: bash    git clone git@gitlab.com:vmware/idem/idem-gcp.git    cd idem_gcpCreate a virtual environment, and then activate it:.. code:: bash    python3 -m venv venv    source venv/bin/activateInstall idem-gcp and other base requirements:.. code:: bash    pip3 install -e .    pip3 install -r requirements/base.txtInstall the following packages in order to run the tests:.. code:: bash    pip3 install -r requirements/py3.10/tests.txt**NOTE:**  Change py3.10 if needed with your  Python version. There is support for py3.8, py3.9, py3.10 and py3.11.Setup=====After installation GCP Idem Provider execution and state modules will be accessible to the pop `hub`.In order to use them we need to set up our credentials.Create a new file called `credentials.yaml` and populate it with your credential profiles.To provide your GCP credentials in the file, use the &quot;gcp&quot; provider key.Under that key, add different profiles as needed.A profile specifies authentication parameters for GCP.The `default` profile will be automatically used by `idem`,but the other ones could be explicitly specified for each run or SLS file.This is done through the `--acct-profile` `idem` cli flag or the`acct_profile` SLS property.There is currently one GCP authentication mechanism supported by idem-gcp -providing service account keys.The following example gives the overall structure of the authenticationparameters' expected format.credentials.yaml..  code:: sls    gcp:      default:        type: service_account        project_id: “&lt;project&gt;”        private_key_id: “&lt;key_id&gt;”        private_key: &quot;-----BEGIN PRIVATE KEY-----\n&lt;private_key&gt;\n-----END PRIVATE KEY-----\n&quot;        client_email: “&lt;service_account_email&gt;“        client_id: “&lt;client_id&gt;”        auth_uri: https://accounts.google.com/o/oauth2/auth        token_uri: https://oauth2.googleapis.com/token        auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs        client_x509_cert_url: “&lt;certificate_url&gt;“        universe_domain: googleapis.com      &lt;other_profile_name&gt;:        ...The values of these parameters can be obtained through the GCP console after creating a service account and generating a service account key in JSON format.Be sure to assign appropriate roles for the service account, such that it has the rights to access and manage the needed resources.For a better security posture, follow the principal of least privilege and do not use service accounts with excessive rights.For more information on the authentication parameters used, refer to the `Credentials &lt;https://google-auth.readthedocs.io/en/master/reference/google.oauth2.service_account.html#google.oauth2.service_account.Credentials&gt;`_ docs.Encrypt the created credentials file:.. code:: bash    acct encrypt credentials.yamlThe output of this command is the ACCT_KEY which needs to be securely stored.A `credentials.yaml.fernet` encrypted file is also created in the working directory, whose path should be used as ACCT_FILE.These could be given to idem either through environment variables or directly as `idem` run parameters.Setting environment variables-----------------------------.. code:: bash    export ACCT_KEY=&quot;&lt;ACCT_KEY&gt;&quot;    export ACCT_FILE=$PWD/credentials.yaml.fernetProviding acct parameters to the idem run-----------------------------------------.. code:: bash    idem &lt;subcommand&gt; --acct-key &quot;&lt;ACCT_KEY&gt;&quot; --acct-file &quot;$PWD/credentials.yaml.fernet&quot; --acct-profile &quot;&lt;profile_name&gt;&quot;Specifying account profile in SLS files---------------------------------------.. code:: sls    ensure_resource:      gcp.&lt;service&gt;.&lt;resource&gt;.present:        - acct_profile: &lt;profile_name&gt;        - name: resource_name        - kwarg1: val1For more information on the Idem ACCT authentication management subsystem, refer to the following resources:* `Account credentials file doc &lt;https://docs.idemproject.io/idem/en/latest/topics/tutorials/acct_file.html&gt;`_* `Multiple Account Management &lt;https://docs.idemproject.io/idem/en/latest/topics/tutorials/acct.html&gt;`_* `ACCT advanced features &lt;https://docs.idemproject.io/idem/en/latest/topics/sls_acct.html&gt;`_</longdescription>
</pkgmetadata>