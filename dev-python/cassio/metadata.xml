<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cassIOA framework-agnostic Python library to seamlessly integrate Apache Cassandra with ML/LLM/genAI workloads.**Note**: this is currently an alpha release.## UsersInstallation is as simple as:```pip install cassio```For example usages and integration with higher-level LLM frameworkssuch as LangChain, please visit [cassio.org](https://cassio.org).## CassIO developers### SetupTo develop `cassio`, use the `requirements-dev.txt`.To use the dev version in an integration (e.g. your branch of LangChain),`pip install -e .` in this `cassio` repo from within the virtual environmentyou are using to develop your integration.#### PoetryIf the integration is Poetry-based (e.g. LangChain itself), you should get thisin your `pyproject.toml`:```cassio = {path = &quot;../../cassio&quot;, develop = true}```Then you do```poetry remove cassio                                      # if necessarypoetry lock --no-updatepoetry install -E all --with dev --with test_integration  # or similar, this is for langchain```[Inspired from this](https://github.com/orgs/python-poetry/discussions/1135).You also need a recent Poetry for this to work.### Git flow_Note: this is a rough guide, use your common sense and consider exceptions._`main` is where versioned releases occur (the corresponding commits are git-taggedas `v0.0.7` and similar, parallel to the PyPI releases).Please do not push/PR more than trivial fixes directly to `main`.Features should generally be done on specific branches and merged into `dev`for wider testing. Then, with a slower cadence (such as, when releasing),`dev` would be merged to `main`.![Git flow](images/git-flow.png)#### VersioningWe are still at `0.*`. Occasional breaking changes are to be expected,but please think carefully. Later, a stronger versioning model will be adopted.### StyleStyle is enforced through `black` and linting with `ruff`. We also taketype-checking seriously. The code should run through `make format` withoutissues.### Python version coverageAt the moment we try to run tests under Python3.8 and Python3.10 to try andcatch versions-specific issues(such as the newer `typing` syntax such as `typeA | typeB`, illegal on 3.8).### Publishing- Bump version in setup.py- Add to `CHANGES.txt`- Commit the very code that will be built:```make buildtwine upload dist/*  # (login to PyPI ...)```### TestingPlease run tests (and add some coverage for new features). This is notenforced other than to your conscience. Type `make` for the available tests.To run the full tests, there's `make test-all`.#### Unit testingYou need a virtualenv with the `requirements-dev.txt` installed.```make test-unit```#### Integration with the DBYou need a virtualenv with the `requirements-dev.txt` installed.Create the DB connection settings file, `cp TEMPLATE.testing.env .testing.env`and then edit the properties. You need at least one of either Astra DB or aCassandra cluster to use, with vector-search support.Launch the tests with either of:```make test-integrationmake test-astra-integrationmake test-cassandra-integration```The latter two above specify `TEST_DB_MODE` as either `LOCAL_CASSANDRA` or`ASTRA_DB`. _Ideally you should test with both, since some tests areskipped in either case._</longdescription>
</pkgmetadata>