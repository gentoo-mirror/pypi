<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Checkmk Development ToolsThis repository includes scripts/tools for Checkmk developers.TBD: what should go hereTBD: what shouldn't go here## InstallationWhile you can just clone and use the tools inside of course (they're just plain Python or Bashscripts), the intended way to use it is via `pip` or inside a virtual environment.Install it locally using `pip`:```sh[&lt;PYTHON&gt; -m] pip[3] install [--user] [--upgrade] checkmk-dev-tools```## Contained tools### `cmk-dev howto`### `werk`### `ci-artifacts``ci-rtifacts` is a tool which makes artifacts of CI jobs (currently only Jenkins)locally available based on certain constraints like job parameters and time constraints.#### UsageRun `ci-artifacts --help` in general. Here come a few more detailed examples,which might be outdated.Assuming credentials are configured and you don't have any more constraints thana build has been completed successfully, `fetch` downloads a given jobs artifactsto a folder called `out`:```ci-artifacts fetch checkmk/master/winagt-build```In contrast, this is what a more detailed call might look like```ci-artifacts --log-level debug \    --credentials url_env=JENKINS_URL,username_env=JENKINS_USERNAME,password_env=JENKINS_PASSWORD \    fetch checkmk/master/winagt-build \    --params EDITION=raw,DISTRO=&quot;ubuntu-22.04&quot; \    --params-no-check DISABLE_CACHE=false \    --dependency-paths agents/wnx,agents/windows,packages/cmk-agent-ctl \    --time-constraints today \    --base-dir ~/my-git-projects/checkmk/master \    --out-dir package_download```**`--credentials &lt;CREDENTIALS&gt;`**Provide URL, username and password to your Jenkins instance.**`--params &lt;JOB-PARAMETERS&gt;`**Comma separated list of job-parameters used for identifying existing builds andto start new ones.**`--params-no-check &lt;JOB-PARAMETERS&gt;`**Comma separated list of job-parameters used only to start new ones.**`--time-constraints &lt;SPECIFIER&gt;`**Check for build date constraints when looking for existing builds - currentlyonly `today` is taken into account.**`--dependency-paths &lt;PATH,..&gt;`**Comma separated list of relative paths to files and directories checked fordifferences when looking for existing builds**`--base-dir &lt;PATH&gt;`**Path taken as repository base dir to prefix paths provided with `--dependency-paths`as well as base dir for `--out-dir`.**`--out-dir &lt;PATH&gt;`**Artifact download destination directory.**`--omit-new-build`**Don't start new builds, even when no matching build could be found.**`--force-new-build`**Don't look for existing builds, always start a new build instead.**`--log-level`**Provide a Python `logging` level name, e.g. `DEBUG` (case-insensitive)## Development &amp; Contribution### SetupFor active development you need to have `poetry` and `pre-commit` installed```shpython3 -m pip install --upgrade --user poetry pre-commitgit clone ssh://review.lan.tribe29.com:29418/checkmk_dev_toolscd checkmk_dev_toolspre-commit install# if you need a specific version of Python inside your dev environmentpoetry env use ~/.pyenv/versions/3.10.4/bin/python3poetry install```### Workflow* (once and only for publishing to PyPi) Get token on PyPi.org* (once and only for publishing to PyPi) `poetry config pypi-token.pypi pypi-&lt;LONG-STRING&gt;`  (will write to `~/.config/pypoetry/auth.toml`)* modify and check commits via `pre-commit`* after work is done locally:  - adapt version in `pyproject.toml`  - build and check a package```shpoetry build &amp;&amp; \twine check dist/* &amp;&amp;python3 -m pip uninstall -y checkmk_dev_tools &amp;&amp; \python3 -m pip install --user dist/checkmk_dev_tools-$(grep -E &quot;^version.?=&quot; pyproject.toml | cut -d '&quot;' -f 2)-py3-none-any.whl```  - check installed package  - go through review process  - publish the new package `poetry publish --build`  - commit new version &amp;&amp; push</longdescription>
</pkgmetadata>