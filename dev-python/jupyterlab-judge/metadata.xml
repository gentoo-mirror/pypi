<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Jupyter Lab Judge[![Github Actions Status](https://github.com/team-monolith-product/jupyterlab-judge/workflows/Build/badge.svg)](https://github.com/team-monolith-product/jupyterlab-judge/actions/workflows/build.yml)Work In Progress.A simple online judge for Jupyter Lab.## Highlights![highlights](https://user-images.githubusercontent.com/4434752/174207715-fff3ecb5-0143-41f0-a162-d4b17a517874.gif)## Goal- No additional system for code execution- Solve and get result on Jupyter Lab- Replaceable backend### No Additional System For Code ExecutionTypical online judge systems require task manager for code executions.This project uses kernels to execute codes. Therefore no other system is required.However this architecture leads some security risks. It will be explained later.### Solve And Get Result On Jupyter LabThis project includes jupyter lab extension for solving problems and submitting solutions.### Replaceable Backend(WIP) Basically, problems are retrieved from [codle.io](https://codle.io/), and submission history is stored in browsers.Problem and submission storage can be configured.## SecurityIn this system, code is executed at users' notebook server.Therefore test cases for problems must be delivered to the users.This could be a serious risk for some systems. Be aware of it.## ArchitectureThis extension is composed of a Python package named `jupyterlab_judge`for the server extension and a NPM package named `jupyterlab-judge`for the frontend extension.## Requirements### 0.\*.\*- JupyterLab &gt;= 3.0### 1.\*.\*- JupyterLab &gt;= 4.0## InstallTo install the extension, execute:```bashpip install jupyterlab_judge```## UninstallTo remove the extension, execute:```bashpip uninstall jupyterlab_judge```## TroubleshootIf you are seeing the frontend extension, but it is not working, checkthat the server extension is enabled:```bashjupyter server extension list```If the server extension is installed and enabled, but you are not seeingthe frontend extension, check the frontend extension is installed:```bashjupyter labextension list```## Contributing### Development EnvironmentIn `0.*.*`, you can create Conda environment by executing :```conda create -n jupyterlab-ext --override-channels --strict-channel-priority -c conda-forge -c nodefaults jupyterlab=3 cookiecutter nodejs jupyter-packaging git```In `1.*.*`, you can create Conda environment by executing :```conda create -n jupyterlab4-ext --override-channels --strict-channel-priority -c conda-forge -c nodefaults jupyterlab=4 nodejs=18 git copier=7 jinja2-timeconda activate jupyterlab4-ext```### Development installNote: You will need NodeJS to build the extension package.The `jlpm` command is JupyterLab's pinned version of[yarn](https://yarnpkg.com/) that is installed with JupyterLab. You may use`yarn` or `npm` in lieu of `jlpm` below.```bash# Clone the repo to your local environment# Change directory to the jupyterlab_judge directory# Install package in development modepip install -e &quot;.[test]&quot;# Link your development version of the extension with JupyterLabjupyter labextension develop . --overwrite# Server extension must be manually installed in develop modejupyter server extension enable jupyterlab_judge# Rebuild extension Typescript source after making changesjlpm build```You can watch the source directory and run JupyterLab at the same time in different terminals to watch for changes in the extension's source and automatically rebuild the extension.```bash# Watch the source directory in one terminal, automatically rebuilding when neededjlpm watch# Run JupyterLab in another terminaljupyter lab```With the watch command running, every saved change will immediately be built locally and available in your running JupyterLab. Refresh JupyterLab to load the change in your browser (you may need to wait several seconds for the extension to be rebuilt).By default, the `jlpm build` command generates the source maps for this extension to make it easier to debug using the browser dev tools. To also generate source maps for the JupyterLab core extensions, you can run the following command:```bashjupyter lab build --minimize=False```### Development uninstall```bash# Server extension must be manually disabled in develop modejupyter server extension disable jupyterlab_judgepip uninstall jupyterlab_judge```In development mode, you will also need to remove the symlink created by `jupyter labextension develop`command. To find its location, you can run `jupyter labextension list` to figure out where the `labextensions`folder is located. Then you can remove the symlink named `jupyterlab-judge` within that folder.### Testing the extension#### Server testsThis extension is using [Pytest](https://docs.pytest.org/) for Python code testing.Install test dependencies (needed only once):```shpip install -e &quot;.[test]&quot;# Each time you install the Python package, you need to restore the front-end extension linkjupyter labextension develop . --overwrite```To execute them, run:```shpytest -vv -r ap --cov jupyterlab_judge```#### Frontend testsThis extension is using [Jest](https://jestjs.io/) for JavaScript code testing.To execute them, execute:```shjlpmjlpm test```#### Integration testsThis extension uses [Playwright](https://playwright.dev/docs/intro) for the integration tests (aka user level tests).More precisely, the JupyterLab helper [Galata](https://github.com/jupyterlab/jupyterlab/tree/master/galata) is used to handle testing the extension in JupyterLab.More information are provided within the [ui-tests](./ui-tests/README.md) README.### Packaging the extensionSee [RELEASE](RELEASE.md)### TranslateAfter adding `trans.__`, execute following code```jupyterlab-translate update . jupyterlab_judge -l ko_KR```This will update `jupyterlab_judge.po` file with some errors. (ignore it)Add your translation to `jupyterlab_judge.po` and execute```jupyterlab-translate compile . jupyterlab_judge -l ko_KR```</longdescription>
</pkgmetadata>