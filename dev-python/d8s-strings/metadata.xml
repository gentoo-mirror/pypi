<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Democritus Strings[![PyPI](https://img.shields.io/pypi/v/d8s-strings.svg)](https://pypi.python.org/pypi/d8s-strings)[![CI](https://github.com/democritus-project/d8s-strings/workflows/CI/badge.svg)](https://github.com/democritus-project/d8s-strings/actions)[![Lint](https://github.com/democritus-project/d8s-strings/workflows/Lint/badge.svg)](https://github.com/democritus-project/d8s-strings/actions)[![codecov](https://codecov.io/gh/democritus-project/d8s-strings/branch/main/graph/badge.svg?token=V0WOIXRGMM)](https://codecov.io/gh/democritus-project/d8s-strings)[![The Democritus Project uses semver version 2.0.0](https://img.shields.io/badge/-semver%20v2.0.0-22bfda)](https://semver.org/spec/v2.0.0.html)[![The Democritus Project uses black to format code](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://choosealicense.com/licenses/lgpl-3.0/)Democritus functions&lt;sup&gt;[1]&lt;/sup&gt; for working with Python strings.[1] Democritus functions are &lt;i&gt;simple, effective, modular, well-tested, and well-documented&lt;/i&gt; Python functions.We use `d8s` (pronounced &quot;dee-eights&quot;) as an abbreviation for `democritus` (you can read more about this [here](https://github.com/democritus-project/roadmap#what-is-d8s)).## Installation```pip install d8s-strings```## UsageYou import the library like:```pythonfrom d8s_strings import *```Once imported, you can use any of the functions listed below.## Functions  - ```python    def string_chars_at_start(string: str, chars: Iterable) -&gt; Iterable[str]:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_chars_at_start_len(string: str, chars: Iterable) -&gt; int:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def a10n(string: str) -&gt; str:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_remove_index(string: str, index: int) -&gt; str:        &quot;&quot;&quot;Remove the item from the string at the given index.&quot;&quot;&quot;    ```  - ```python    def string_replace_index(string: str, index: int, replacement: str) -&gt; str:        &quot;&quot;&quot;Replace the character in the string at the given index with the replacement.&quot;&quot;&quot;    ```  - ```python    def string_remove_before(string: str, stop_string: str):        &quot;&quot;&quot;Remove everything from the start of the given string until the stop_string.&quot;&quot;&quot;    ```  - ```python    def string_remove_after(string: str, start_string: str):        &quot;&quot;&quot;Remove everything after the start_string to the end of the given string.&quot;&quot;&quot;    ```  - ```python    def string_is_palindrome(string: str) -&gt; bool:        &quot;&quot;&quot;Return whether or not the given string is a palindrome.&quot;&quot;&quot;    ```  - ```python    def string_reverse(string: str) -&gt; str:        &quot;&quot;&quot;Reverse the given string.&quot;&quot;&quot;    ```  - ```python    def indefinite_article(word):        &quot;&quot;&quot;Return the word with the appropriate indefinite article.&quot;&quot;&quot;    ```  - ```python    def is_plural(possible_plural: str) -&gt; bool:        &quot;&quot;&quot;Return whether or not the possible_plural is plural.&quot;&quot;&quot;    ```  - ```python    def pluralize(word: str) -&gt; str:        &quot;&quot;&quot;Make the word plural.&quot;&quot;&quot;    ```  - ```python    def is_singular(possible_singular: str) -&gt; bool:        &quot;&quot;&quot;Return whether or not the possible_singular is singular.&quot;&quot;&quot;    ```  - ```python    def singularize(word: str) -&gt; str:        &quot;&quot;&quot;Make the word singular.&quot;&quot;&quot;    ```  - ```python    def cardinalize(word: str, count: int) -&gt; str:        &quot;&quot;&quot;Return the appropriate form of the given word for the count.&quot;&quot;&quot;    ```  - ```python    def ordinalize(number: int) -&gt; str:        &quot;&quot;&quot;Return the appropriate form for the ordinal form of the given number.&quot;&quot;&quot;    ```  - ```python    def string_forms(text):        &quot;&quot;&quot;Return multiple forms for the given text.&quot;&quot;&quot;    ```  - ```python    def string_left_pad(string, length: int, *, padding_characters=' '):        &quot;&quot;&quot;Pad the given string with the given padding_characters such that the length of the resulting string is equal to the `length` argument. Adapted from the javascript code here: https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/.&quot;&quot;&quot;    ```  - ```python    def string_to_bool(string: str) -&gt; bool:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def text_examples(n=10):        &quot;&quot;&quot;Create n example texts.&quot;&quot;&quot;    ```  - ```python    def string_has_multiple_consecutive_spaces(string):        &quot;&quot;&quot;Return True if the given string has multiple, consecutive spaces.&quot;&quot;&quot;    ```  - ```python    def character_examples(n=10):        &quot;&quot;&quot;Create n example characters.&quot;&quot;&quot;    ```  - ```python    def text_abbreviate(text):        &quot;&quot;&quot;Abbreviate the given text.&quot;&quot;&quot;    ```  - ```python    def text_input_is_yes(message):        &quot;&quot;&quot;Get yes/no input from the user and return `True` if the input is yes and `False` if the input is no.&quot;&quot;&quot;    ```  - ```python    def text_input_is_no(message):        &quot;&quot;&quot;Get yes/no input from the user and return `True` if the input is no and `False` if the input is yes.&quot;&quot;&quot;    ```  - ```python    def string_is_yes(string):        &quot;&quot;&quot;Check if a string is some form of `y` or `yes`.&quot;&quot;&quot;    ```  - ```python    def string_is_no(string):        &quot;&quot;&quot;Check if a string is some form of `n` or `no`.&quot;&quot;&quot;    ```  - ```python    def xor(message, key):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def text_join(join_character, *args):        &quot;&quot;&quot;Join all of the arguments around the given join_character.&quot;&quot;&quot;    ```  - ```python    def string_insert(existing_string, new_string, index):        &quot;&quot;&quot;Insert the new_string into the existing_string at the given index.&quot;&quot;&quot;    ```  - ```python    def base64_encode(input_string):        &quot;&quot;&quot;Base64 encode the string.&quot;&quot;&quot;    ```  - ```python    def base64_decode(input_string):        &quot;&quot;&quot;Base64 decode the string.&quot;&quot;&quot;    ```  - ```python    def string_sequence_matcher(string_a, string_b):        &quot;&quot;&quot;Create a difflib.SequenceMatcher for the given string.&quot;&quot;&quot;    ```  - ```python    def strings_diff(string_a, string_b):        &quot;&quot;&quot;Return the diff of the two strings.&quot;&quot;&quot;    ```  - ```python    def string_add_to_start_of_each_line(string: str, string_to_add_to_each_line: str):        &quot;&quot;&quot;Add the given string_to_add_to_each_line to the beginning of each line in the string.&quot;&quot;&quot;    ```  - ```python    def string_get_closes_matches(word, possible_matches, maximum_matches=3, cutoff=0.6):        &quot;&quot;&quot;Return the words from the list of possible matches that are closest to the given word.&quot;&quot;&quot;    ```  - ```python    def strings_similarity(a: str, b: str):        &quot;&quot;&quot;Return the ratio of similarity between the two strings.&quot;&quot;&quot;    ```  - ```python    def strings_matching_blocks(a: str, b: str):        &quot;&quot;&quot;Return the matching blocks in the given strings.&quot;&quot;&quot;    ```  - ```python    def strings_longest_matching_block(a: str, b: str):        &quot;&quot;&quot;Return the longest matching block in the string.&quot;&quot;&quot;    ```  - ```python    def strings_diff_opcodes(a: str, b: str):        &quot;&quot;&quot;Return the opcodes representing the differences/similarities between two strings.&quot;&quot;&quot;    ```  - ```python    def string_common_prefix(a: str, b: str) -&gt; str:        &quot;&quot;&quot;Returns the common prefix string from left to right between a and b.&quot;&quot;&quot;    ```  - ```python    def string_common_suffix(a: str, b: str):        &quot;&quot;&quot;Returns the common suffix string from left to right between a and b.&quot;&quot;&quot;    ```  - ```python    def characters(input_string):        &quot;&quot;&quot;Return all of the characters in the given string.&quot;&quot;&quot;    ```  - ```python    def hex_to_string(hex_string):        &quot;&quot;&quot;Convert the given hex string to ascii.&quot;&quot;&quot;    ```  - ```python    def string_to_hex(ascii_string: str, seperator='') -&gt; str:        &quot;&quot;&quot;Convert the given ascii string to hex.&quot;&quot;&quot;    ```  - ```python    def character_to_unicode_number(character):        &quot;&quot;&quot;Convert the given character to its Unicode number. This is the same as the `ord` function in python.&quot;&quot;&quot;    ```  - ```python    def unicode_number_to_character(unicode_number):        &quot;&quot;&quot;Convert the given unicode_number to it's unicode character form. This is the same as the `chr` function in python.&quot;&quot;&quot;    ```  - ```python    def hamming_distance(string_1, string_2, as_percent=False):        &quot;&quot;&quot;Return the number of positions at which corresponding symbols in string_1 and string_2 are different (this is known as the Hamming Distance). See https://en.wikipedia.org/wiki/Hamming_distance.&quot;&quot;&quot;    ```  - ```python    def from_char_code(integer_list):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def text_ascii_characters(text: str) -&gt; Tuple[str]:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def text_non_ascii_characters(text: str) -&gt; Tuple[str]:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def letter_as_number(letter):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def letter_frequency(letter, text):        &quot;&quot;&quot;Find the frequency of the given letter in the given text.&quot;&quot;&quot;    ```  - ```python    def string_entropy(text, ignore_case=False):        &quot;&quot;&quot;Find the shannon entropy of the text. Inspired by the algorithm here https://web.archive.org/web/20160320142455/https://deadhacker.com/2007/05/13/finding-entropy-in-binary-files/. You can see more here: https://en.wikipedia.org/wiki/Entropy_(information_theory)&quot;&quot;&quot;    ```  - ```python    def substrings(iterable):        &quot;&quot;&quot;Find all substrings in the given string.&quot;&quot;&quot;    ```  - ```python    def string_remove_non_alphabetic_characters(string: str):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_remove_non_numeric_characters(string: str):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_remove_non_alpha_numeric_characters(string: str):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_remove(regex_pattern, input_string, **kwargs):        &quot;&quot;&quot;Remove the regex_pattern from the input_string.&quot;&quot;&quot;    ```  - ```python    def string_remove_unicode(string: str):        &quot;&quot;&quot;Remove all Unicode characters from the given string.&quot;&quot;&quot;    ```  - ```python    def string_remove_numbers(input_string: str, replacement: str = ' '):        &quot;&quot;&quot;Remove all numbers from the input_strings.&quot;&quot;&quot;    ```  - ```python    def string_remove_from_start(input_string, string_to_remove):        &quot;&quot;&quot;Remove the string_to_remove from the start of the input_string.&quot;&quot;&quot;    ```  - ```python    def string_remove_from_end(input_string, string_to_remove):        &quot;&quot;&quot;Remove the string_to_remove from the end of the input_string.&quot;&quot;&quot;    ```  - ```python    def string_as_numbers(input_string: str):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_in_iterable_fuzzy(input_string, iterable):        &quot;&quot;&quot;Find if the given input_string is in one of the strings in an iterable.&quot;&quot;&quot;    ```  - ```python    def string_find_between(input_string: str, start_string: str, end_string: str, *args):        &quot;&quot;&quot;Find the string in the input_string that is between the start_string and the end_string.&quot;&quot;&quot;    ```  - ```python    def switch(a, b, text):        &quot;&quot;&quot;Switch a and b in the text.&quot;&quot;&quot;    ```  - ```python    def string_encode_as_bytes(input_string, encoding='utf-8', **kwargs):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def bytes_decode_as_string(bytes_text, encoding='utf-8', **kwargs):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_shorten(input_string, length, suffix='...'):        &quot;&quot;&quot;Shorten the given input_string to the given length.&quot;&quot;&quot;    ```  - ```python    def string_split_without_empty(input_string, split_char):        &quot;&quot;&quot;Split a input_string on split_char and remove empty entries.&quot;&quot;&quot;    ```  - ```python    def string_has_index(string: str, index: Union[str, int]) -&gt; bool:        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_split_on_uppercase(input_string: str, include_uppercase_characters=False, split_acronyms=True):        &quot;&quot;&quot;Split the input_string on uppercase characters. If split_acronyms is False, the function will not split consecutive uppercase letters.&quot;&quot;&quot;    ```  - ```python    def string_split_on_lowercase(input_string, include_lowercase_characters=False):        &quot;&quot;&quot;Split the string on lowercase characters.&quot;&quot;&quot;    ```  - ```python    def string_split_multiple(string, *splitting_characters):        &quot;&quot;&quot;Split a string up based on multiple splitting_characters.&quot;&quot;&quot;    ```  - ```python    def string_reverse_case(input_string):        &quot;&quot;&quot;Make lowercase characters uppercased and visa-versa.&quot;&quot;&quot;    ```  - ```python    def text_vowels(text):        &quot;&quot;&quot;Return all of the vowels in the text.&quot;&quot;&quot;    ```  - ```python    def text_vowel_count(text):        &quot;&quot;&quot;Count the number of vowels in the text.&quot;&quot;&quot;    ```  - ```python    def text_consonants(text):        &quot;&quot;&quot;Return all of the consonants in the text.&quot;&quot;&quot;    ```  - ```python    def text_consonant_count(text):        &quot;&quot;&quot;Count the number of consonants in the text.&quot;&quot;&quot;    ```  - ```python    def text_input(message='Enter/Paste your content.'):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def text_ensure_starts_with(text: str, prefix: str):        &quot;&quot;&quot;Make sure the given text starts with the given prefix.&quot;&quot;&quot;    ```  - ```python    def text_ensure_ends_with(text: str, suffix: str):        &quot;&quot;&quot;Make sure the given text ends with the given suffix.&quot;&quot;&quot;    ```  - ```python    def titlecase(item):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def uppercase(item):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def uppercase_first_letter(text):        &quot;&quot;&quot;Make the first letter of the text uppercase.&quot;&quot;&quot;    ```  - ```python    def lowercase_first_letter(text):        &quot;&quot;&quot;Make the first letter of the text lowercase.&quot;&quot;&quot;    ```  - ```python    def crazycase(text):        &quot;&quot;&quot;Make the case of the characters in the given text pseudo-random&quot;&quot;&quot;    ```  - ```python    def kebab_case(text):        &quot;&quot;&quot;Return the text with a &quot;-&quot; in place of every space.&quot;&quot;&quot;    ```  - ```python    def snake_case(text):        &quot;&quot;&quot;Return the text with a &quot;_&quot; in place of every space.&quot;&quot;&quot;    ```  - ```python    def camel_case(text: str):        &quot;&quot;&quot;Return the text with no spaces and every word (except the first one) capitalized.&quot;&quot;&quot;    ```  - ```python    def pascal_case(text: str):        &quot;&quot;&quot;Return the text with no spaces and every word capitalized.&quot;&quot;&quot;    ```  - ```python    def sentence_case(text: str):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def uppercase_count(text):        &quot;&quot;&quot;Count the number of uppercase letters in the given text.&quot;&quot;&quot;    ```  - ```python    def lowercase_count(text):        &quot;&quot;&quot;Count the number of lowercase letters in the given text.&quot;&quot;&quot;    ```  - ```python    def lowercase(item):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def string_rotate(text, rot=13):        &quot;&quot;&quot;Return the text converted using a Caesar cipher (https://en.wikipedia.org/wiki/Caesar_cipher) in which the text is rotated by the given amount (using the `rot` argument).&quot;&quot;&quot;    ```  - ```python    def text_is_english_sentence(text: str) -&gt; bool:        &quot;&quot;&quot;Determine whether or not the sentence is likely English.&quot;&quot;&quot;    ```  - ```python    def leet_speak_to_text(leet_speak_text):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def text_to_leet_speak(text):        &quot;&quot;&quot;.&quot;&quot;&quot;    ```  - ```python    def unicode_to_ascii(text: str):        &quot;&quot;&quot;Convert the text to ascii.&quot;&quot;&quot;    ```## Development👋 &amp;nbsp;If you want to get involved in this project, we have some short, helpful guides below:- [contribute to this project 🥇][contributing]- [test it 🧪][local-dev]- [lint it 🧹][local-dev]- [explore it 🔭][local-dev]If you have any questions or there is anything we did not cover, please raise an issue and we'll be happy to help.## CreditsThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and Floyd Hightower's [Python project template](https://github.com/fhightower-templates/python-project-template).[contributing]: https://github.com/democritus-project/.github/blob/main/CONTRIBUTING.md#contributing-a-pr-[local-dev]: https://github.com/democritus-project/.github/blob/main/CONTRIBUTING.md#local-development-</longdescription>
</pkgmetadata>