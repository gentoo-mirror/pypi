<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># curse-api----## A simple async python Curseforge api wrapper using pydanticBuilt to serve CF endpoints while providing methods and functions to assist in finding the right mod.- Quick Install: `pip install curse-api[quick]`- [Features](#features)- [Quick Start](#quick-start)- [Examples](#examples)----## Some backstoryA while back when I was starting to learn python further then the basics I created a small tool to download Minecraft mods from a pack manifest.Soon after I wrote it the new API changes came and broke it. Now once more I want to return to that project idea and expand further. After first rewriting the project using [chili](https://pypi.org/project/chili/) it felt off, so returned to rewrite once more using [pydantic](https://pypi.org/project/pydantic/) for data validation and ease of access. This is mostly a pet project to learn further python.----## FeaturesMain Dependency:- [Pydantic](https://pypi.org/project/pydantic/)Native async library support:- [Aiohttp](https://pypi.org/project/aiohttp/) - `pip install curse-api[aiohttp]`- [Httpx](https://pypi.org/project/httpx/) - `pip install curse-api[httpx]`Currently implemented:- Important endpoint support- Full CurseForge model- Mediocre error handling- Pluggable API factories- Serialization and deserialization of models- Python 3.7, 3.8 &amp; 3.9 support- AsyncTo Do:- Fix to be usable with pydantic based ORM's- Address all TODO's- Test other games too- Add more- Write docs- Update and fix error handling- Shortcuts to import clientsCI/CD:- Type checking- Version testing- Tests----## Examples### Quick startRequires an api from CF to use the API. You can get one [here](https://docs.curseforge.com/#authentication).This example runs through most of the basics```pythonfrom curse_api import CurseAPIfrom curse_api.clients.httpx import HttpxFactoryimport osimport asyncioasync def main():    async with CurseAPI(os.environ[&quot;CF_API_KEY&quot;], factory=HttpxFactory) as api:        &quot;Mods&quot;        a = await api.search_mods(searchFilter=&quot;JEI&quot;, slug=&quot;jei&quot;)        # applies the search filters to the standard of CF docs        mod = await api.get_mod(250398)  # returns a singular Mod        mod_list = await api.get_mods([285109, 238222])  # returns a list of Mods        &quot;files&quot;        &quot;See examples/download.py&quot;        # TODO finish file support        files = await api.get_files([3940240])  # returns a list of Files matching their id        mod_files = await api.get_mod_files(238222)  # returns all the Files of on a give Mod        &quot;Version details - large data&quot;        &quot;See examples/modloader.py&quot;        mc = await api.minecraft_versions()  # returns all of minecraft version data        ml = await api.modloader_versions()  # returns **ALL** modloader versions on curseforge        mc_112 = await api.get_specific_minecraft_version(&quot;1.12.2&quot;)  # returns minecraft version related information        forge = await api.get_specific_minecraft_modloader(&quot;forge-36.2.39&quot;)  # returns forge related version informationif __name__ == &quot;__main__&quot;:    asyncio.run(main())```### Downloading to a fileThis example opens a properly named file in the current working directory and writes to it.```pythonfrom curse_api import CurseAPIfrom curse_api.clients.httpx import HttpxFactoryimport osimport asyncioasync def main():    async with CurseAPI(os.environ[&quot;CF_API_KEY&quot;], factory=HttpxFactory) as api:        # fetch the latest file from project with slug 'jei'        mod_l, page_data = await api.search_mods(slug=&quot;jei&quot;)        latest = mod_l[0].latestFiles[0]        with open(latest.fileName, &quot;wb&quot;) as f:            down = await api.download(latest.downloadUrl)  # type: ignore            async for b in down:                f.write(b)if __name__ == &quot;__main__&quot;:    asyncio.run(main())```----### Sub project / extension ideas- Modloader download and installation- Minecraft Version type / parser- MC pack installation- DB cache extension- Manifest parsing</longdescription>
</pkgmetadata>