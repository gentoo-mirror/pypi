<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ramda.py[![Build Status](https://github.com/slavaGanzin/ramda.py/actions/workflows/python-package.yml/badge.svg)](https://github.com/slavaGanzin/ramda.py/actions/workflows/python-package.yml)[![PyPI version](https://badge.fury.io/py/ramda.svg)](https://badge.fury.io/py/ramda)Python Clone of [Ramda.js](http://ramdajs.com). Improved fork of [Jack Firth's original impementation](https://github.com/jackfirth/pyramda)```shpip install ramda``````python&gt;&gt;&gt; from ramda import *&gt;&gt;&gt; inc(1)2&gt;&gt;&gt; map(inc, [1, 2, 3])[2, 3, 4]&gt;&gt;&gt; incEach = map(inc)&gt;&gt;&gt; incEach([1, 2, 3])[2, 3, 4]```# Docs```pythonT(*args)    &quot;&quot;&quot;A function that always returns true. Any passed in parameters are ignored&quot;&quot;&quot;add(x, y)    &quot;&quot;&quot;Adds two values&quot;&quot;&quot;adjust(f, i, xs)    &quot;&quot;&quot;Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application&quot;&quot;&quot;all(p, xs)    &quot;&quot;&quot;Returns true if all elements of the list match the predicate, false ifthere are any that don't.Dispatches to the all method of the second argument, if present.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;all_pass(ps, v)    &quot;&quot;&quot;Takes a list of predicates and returns a predicate that returns true for agiven list of arguments if every one of the provided predicates is satisfiedby those arguments.The function returned is a curried function whose arity matches that of thehighest-arity predicate&quot;&quot;&quot;always(x, y)    &quot;&quot;&quot;Returns a function that always returns the given value. Note that fornon-primitives the value returned is a reference to the original value.This function is known as const, constant, or K (for K combinator) inother languages and libraries&quot;&quot;&quot;any(p, xs)    &quot;&quot;&quot;Returns true if at least one of elements of the list match the predicate,false otherwise.Dispatches to the any method of the second argument, if present.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;any_pass(ps, v)    &quot;&quot;&quot;Takes a list of predicates and returns a predicate that returns true for agiven list of arguments if at least one of the provided predicates issatisfied by those arguments.The function returned is a curried function whose arity matches that of thehighest-arity predicate&quot;&quot;&quot;ap(fs, xs)    &quot;&quot;&quot;ap applies a list of functions to a list of values.Dispatches to the ap method of the second argument, if present. Alsotreats curried functions as applicatives&quot;&quot;&quot;aperture(n, xs)    &quot;&quot;&quot;Returns a new list, composed of n-tuples of consecutive elements. If n isgreater than the length of the list, an empty list is returned.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;append(x, ys)    &quot;&quot;&quot;Returns a new list containing the contents of the given list, followed bythe given element&quot;&quot;&quot;apply(f, xs)    &quot;&quot;&quot;Applies function fn to the argument list args. This is useful forcreating a fixed-arity function from a variadic function. fn should be abound function if context is significant&quot;&quot;&quot;apply_spec(spec)    &quot;&quot;&quot;Given a spec object recursively mapping properties to functions, creates afunction producing an object of the same structure, by mapping each propertyto the result of calling its associated function with the supplied arguments&quot;&quot;&quot;apply_to(x, f)    &quot;&quot;&quot;Takes a value and applies a function to it.This function is also known as the thrush combinator&quot;&quot;&quot;ascend(predicate)    &quot;&quot;&quot;Makes an ascending comparator function out of a function that returns a valuethat can be compared with &lt; and &gt;&quot;&quot;&quot;assoc(key, value, object)    &quot;&quot;&quot;Makes a shallow clone of an object, setting or overriding the specifiedproperty with the given value. Note that this copies and flattens prototypeproperties onto the new object as well. All non-primitive properties arecopied by reference&quot;&quot;&quot;assoc_path(path, value, object)    &quot;&quot;&quot;Makes a shallow clone of an object, setting or overriding the nodes requiredto create the given path, and placing the specific value at the tail end ofthat path. Note that this copies and flattens prototype properties onto thenew object as well. All non-primitive properties are copied by reference&quot;&quot;&quot;binary(f)    &quot;&quot;&quot;Wraps a function of any arity (including nullary) in a function that acceptsexactly 2 parameters. Any extraneous parameters will not be passed to thesupplied function&quot;&quot;&quot;bind(f, o)    &quot;&quot;&quot;Creates a function that is bound to a context.Note: R.bind does not provide the additional argument-binding capabilities ofFunction.prototype.bind&quot;&quot;&quot;both(p1, p2, v)    &quot;&quot;&quot;A function which calls the two provided functions and returns the &amp;&amp;of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, R.both also accepts any fantasy-land compatibleapplicative functor&quot;&quot;&quot;call(f, *args)    &quot;&quot;&quot;Returns the result of calling its first argument with the remainingarguments. This is occasionally useful as a converging function forR.converge: the first branch can produce a function while theremaining branches produce values to be passed to that function as itsarguments&quot;&quot;&quot;chain(f, xs)    &quot;&quot;&quot;chain maps a function over a list and concatenates the results. chainis also known as flatMap in some librariesDispatches to the chain method of the second argument, if present,according to the FantasyLand Chain spec&quot;&quot;&quot;clamp(min, max, value)    &quot;&quot;&quot;Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates&quot;&quot;&quot;clone(v)    &quot;&quot;&quot;Creates a deep copy of the value which may contain (nested) Arrays andObjects, Numbers, Strings, Booleans and Dates. Functions areassigned by reference rather than copiedDispatches to a clone method if present&quot;&quot;&quot;comparator(predicate)    &quot;&quot;&quot;Makes a comparator function out of a function that reports whether the firstelement is less than the second&quot;&quot;&quot;complement(f)    &quot;&quot;&quot;Takes a function f and returns a function g such that if called with the same argumentswhen f returns a &quot;truthy&quot; value, g returns false and when f returns a &quot;falsy&quot; value g returns true.R.complement may be applied to any functor&quot;&quot;&quot;compose(*funcs)    &quot;&quot;&quot;Performs right-to-left function composition. The rightmost function may haveany arity; the remaining functions must be unary.Note: The result of compose is not automatically curried&quot;&quot;&quot;concat(xs, ys)    &quot;&quot;&quot;Returns the result of concatenating the given lists or strings.Note: R.concat expects both arguments to be of the same type,unlike the native Array.prototype.concat method. It will throwan error if you concat an Array with a non-Array value.Dispatches to the concat method of the first argument, if present.Can also concatenate two members of a fantasy-landcompatible semigroup&quot;&quot;&quot;cond(conditions, value)    &quot;&quot;&quot;Returns a function, fn, which encapsulates if/else, if/else, ... logic.R.cond takes a list of [predicate, transformer] pairs. All of the argumentsto fn are applied to each of the predicates in turn until one returns a&quot;truthy&quot; value, at which point fn returns the result of applying itsarguments to the corresponding transformer. If none of the predicatesmatches, fn returns undefined&quot;&quot;&quot;contains(y, xs)    &quot;&quot;&quot;Returns true if the specified value is equal, in R.equalsterms, to at least one element of the given list; false otherwise&quot;&quot;&quot;converge(converging, branches, args)    &quot;&quot;&quot;Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value&quot;&quot;&quot;count_by(function, list)    &quot;&quot;&quot;Counts the elements of a list according to how many match each value of akey generated by the supplied function. Returns an object mapping the keysproduced by fn to the number of occurrences in the list. Note that allkeys are coerced to strings because of how JavaScript objects work.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;curry_by_spec(curry_spec, f)    &quot;&quot;&quot;Returns a curried equivalent of the provided function. The curried functionhas two unusual capabilities. First, its arguments needn't be provided oneat a time. If f is a ternary function and g is R.curry(f), thefollowing are equivalent:g(1)(2)(3)g(1)(2, 3)g(1, 2)(3)g(1, 2, 3)Secondly, the special placeholder value R.__ may be used to specify&quot;gaps&quot;, allowing partial application of any combination of arguments,regardless of their positions. If g is as above and _ is R.__,the following are equivalent:g(1, 2, 3)g(_, 2, 3)(1)g(_, _, 3)(1)(2)g(_, _, 3)(1, 2)g(_, 2)(1)(3)g(_, 2)(1, 3)g(_, 2)(_, 3)(1)&quot;&quot;&quot;curry_n(n, f)    &quot;&quot;&quot;Returns a curried equivalent of the provided function, with the specifiedarity. The curried function has two unusual capabilities. First, itsarguments needn't be provided one at a time. If g is R.curryN(3, f), thefollowing are equivalent:g(1)(2)(3)g(1)(2, 3)g(1, 2)(3)g(1, 2, 3)Secondly, the special placeholder value R.__ may be used to specify&quot;gaps&quot;, allowing partial application of any combination of arguments,regardless of their positions. If g is as above and _ is R.__,the following are equivalent:g(1, 2, 3)g(_, 2, 3)(1)g(_, _, 3)(1)(2)g(_, _, 3)(1, 2)g(_, 2)(1)(3)g(_, 2)(1, 3)g(_, 2)(_, 3)(1)&quot;&quot;&quot;dec(x)    &quot;&quot;&quot;Decrements its argument&quot;&quot;&quot;default_to(default, x)    &quot;&quot;&quot;Returns the second argument if it is not null, undefined or NaN;otherwise the first argument is returned&quot;&quot;&quot;descend(predicate)    &quot;&quot;&quot;Makes a descending comparator function out of a function that returns a valuethat can be compared with &lt; and &gt;&quot;&quot;&quot;difference(xs, ys)    &quot;&quot;&quot;Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Objects and Arrays are compared in terms ofvalue equality, not reference equality&quot;&quot;&quot;difference_with(f, xs, ys)    &quot;&quot;&quot;Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements&quot;&quot;&quot;dissoc(key, object)    &quot;&quot;&quot;Returns a new object that does not contain a prop property&quot;&quot;&quot;dissoc_path(path, object)    &quot;&quot;&quot;Makes a shallow clone of an object, omitting the property at the given path.Note that this copies and flattens prototype properties onto the new objectas well. All non-primitive properties are copied by reference&quot;&quot;&quot;divide(x, y)    &quot;&quot;&quot;Divides two numbers. Equivalent to a / b&quot;&quot;&quot;drop(n, xs)    &quot;&quot;&quot;Returns all but the first n elements of the given list, string, ortransducer/transformer (or object with a drop method).Dispatches to the drop method of the second argument, if present&quot;&quot;&quot;drop_last(n, xs)    &quot;&quot;&quot;Returns a list containing all but the last n elements of the given list&quot;&quot;&quot;drop_last_while(predicate, xs)    &quot;&quot;&quot;Returns a new list excluding all the tailing elements of a given list whichsatisfy the supplied predicate function. It passes each value from the rightto the supplied predicate function, skipping elements until the predicatefunction returns a falsy value. The predicate function is applied to one argument:(value)&quot;&quot;&quot;None    &quot;&quot;&quot;Returns a new list without any consecutively repeating elements.R.equals is used to determine equality.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;drop_repeats_with(f, xs)    &quot;&quot;&quot;Returns a new list without any consecutively repeating elements. Equality isdetermined by applying the supplied predicate to each pair of consecutive elements. Thefirst element in a series of equal elements will be preserved.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;drop_while(predicate, xs)    &quot;&quot;&quot;Returns a new list excluding the leading elements of a given list whichsatisfy the supplied predicate function. It passes each value to the suppliedpredicate function, skipping elements while the predicate function returnstrue. The predicate function is applied to one argument: (value).Dispatches to the dropWhile method of the second argument, if present.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;either(predicate1, predicate2, value)    &quot;&quot;&quot;A function wrapping calls to the two functions in an || operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, R.either also accepts any fantasy-land compatibleapplicative functor&quot;&quot;&quot;empty(x)    &quot;&quot;&quot;Returns the empty value of its argument's type. Ramda defines the emptyvalue of Array ([]), Object ({}), String (''), and Arguments. Othertypes are supported if they define &lt;Type&gt;.empty,&lt;Type&gt;.prototype.empty or implement theFantasyLand Monoid spec.Dispatches to the empty method of the first argument, if present&quot;&quot;&quot;ends_with(needle, haystack)    &quot;&quot;&quot;Checks if a list ends with the provided values&quot;&quot;&quot;eq_by(predicate, a, b)    &quot;&quot;&quot;Takes a function and two values in its domain and returns true if thevalues map to the same value in the codomain; false otherwise&quot;&quot;&quot;eq_props(prop, object1, object2)    &quot;&quot;&quot;Reports whether two objects have the same value, in R.equalsterms, for the specified property. Useful as a curried predicate&quot;&quot;&quot;equals(x, y)    &quot;&quot;&quot;Returns true if its arguments are equivalent, false otherwise. Handlescyclical data structures.Dispatches symmetrically to the equals methods of both arguments, ifpresent&quot;&quot;&quot;evolve(transformations, object)    &quot;&quot;&quot;Creates a new object by recursively evolving a shallow copy of object,according to the transformation functions. All non-primitive propertiesare copied by reference.A transformation function will not be invoked if its corresponding keydoes not exist in the evolved object&quot;&quot;&quot;filter(p, xs)    &quot;&quot;&quot;Takes a predicate and a Filterable, and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate. Filterable objects include plain objects or any objectthat has a filter method such as Array.Dispatches to the filter method of the second argument, if present.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;find(p, xs)    &quot;&quot;&quot;Returns the first element of the list which matches the predicate, orundefined if no element matches.Dispatches to the find method of the second argument, if present.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;find_index(p, xs)    &quot;&quot;&quot;Returns the index of the first element of the list which matches thepredicate, or -1 if no element matches.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;find_last(p, xs)    &quot;&quot;&quot;Returns the last element of the list which matches the predicate, orundefined if no element matches.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;find_last_index(p, xs)    &quot;&quot;&quot;Returns the index of the last element of the list which matches thepredicate, or -1 if no element matches.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;flatten_until(is_leaf, xs)    &quot;&quot;&quot;Returns a new list by pulling every item out of it (and all its sub-arrays)and putting them in a new array, depth-first&quot;&quot;&quot;flip(f)    &quot;&quot;&quot;Returns a new function much like the supplied one, except that the first twoarguments' order is reversed&quot;&quot;&quot;for_each(f, xs)    &quot;&quot;&quot;Iterate over an input list, calling a provided function fn for eachelement in the list.fn receives one argument: (value).Note: R.forEach does not skip deleted or unassigned indices (sparsearrays), unlike the native Array.prototype.forEach method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike Array.prototype.forEach, Ramda's forEach returnsthe original array. In some libraries this function is named each.Dispatches to the forEach method of the second argument, if present&quot;&quot;&quot;for_each_obj_indexed(f, xs)    &quot;&quot;&quot;Iterate over an input object, calling a provided function fn for eachkey and value in the object.fn receives three argument: (value, key, obj)&quot;&quot;&quot;from_pairs(pairs)    &quot;&quot;&quot;Creates a new object from a list key-value pairs. If a key appears inmultiple pairs, the rightmost pair is included in the object&quot;&quot;&quot;group_by(f, xs)    &quot;&quot;&quot;Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the groupBy method of the second argument, if present.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;group_with(predicate, xs)    &quot;&quot;&quot;Takes a list and returns a list of lists where each sublist's elements areall satisfied pairwise comparison according to the provided function.Only adjacent elements are passed to the comparison function&quot;&quot;&quot;gt(y, x)    &quot;&quot;&quot;Returns true if the first argument is greater than the second; falseotherwise&quot;&quot;&quot;gte(y, x)    &quot;&quot;&quot;Returns true if the first argument is greater than or equal to the second;false otherwise&quot;&quot;&quot;has(name, o)    &quot;&quot;&quot;Returns whether or not an object has an own property with the specified name&quot;&quot;&quot;head(list)    &quot;&quot;&quot;Returns the first element of the given list or string. In some librariesthis function is named first&quot;&quot;&quot;identical(x, y)    &quot;&quot;&quot;Returns true if its arguments are identical, false otherwise. Values areidentical if they reference the same memory. NaN is identical to NaN;0 and -0 are not identical&quot;&quot;&quot;identity(x)    &quot;&quot;&quot;A function that does nothing but return the parameter supplied to it. Goodas a default or placeholder function&quot;&quot;&quot;if_else(predicate, on_true_func, on_false_func, value)    &quot;&quot;&quot;Creates a function that will process either the onTrue or the onFalsefunction depending upon the result of the condition predicate&quot;&quot;&quot;inc(x)    &quot;&quot;&quot;Increments its argument&quot;&quot;&quot;index_by(f, xs)    &quot;&quot;&quot;Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;index_of(y, xs)    &quot;&quot;&quot;Returns the position of the first occurrence of an item in an array, or -1if the item is not included in the array. R.equals is used todetermine equality&quot;&quot;&quot;init(list)    &quot;&quot;&quot;Returns all but the last element of the given list or string&quot;&quot;&quot;inner_join(predicate, xs, ys)    &quot;&quot;&quot;Takes a predicate pred, a list xs, and a list ys, and returns a listxs' comprising each of the elements of xs which is equal to one or moreelements of ys according to pred.pred must be a binary function expecting an element from each list.xs, ys, and xs' are treated as sets, semantically, so ordering shouldnot be significant, but since xs' is ordered the implementation guaranteesthat its values are in the same order as they appear in xs. Duplicates arenot removed, so xs' may contain duplicates if xs contains duplicates&quot;&quot;&quot;insert(position, element, list)    &quot;&quot;&quot;Inserts the supplied element into the list, at the specified index. Note thatthis is not destructive: it returns a copy of the list with the changes.No lists have been harmed in the application of this function&quot;&quot;&quot;insert_all(position, elements, list)    &quot;&quot;&quot;Inserts the sub-list into the list, at the specified index. Note that this is notdestructive: it returns a copy of the list with the changes.No lists have been harmed in the application of this function&quot;&quot;&quot;intersection(list1, list2)    &quot;&quot;&quot;Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists&quot;&quot;&quot;intersperse(separator, xs)    &quot;&quot;&quot;Creates a new list with the separator interposed between elements.Dispatches to the intersperse method of the second argument, if present&quot;&quot;&quot;invert(object)    &quot;&quot;&quot;Same as R.invertObj, however this accounts for objects withduplicate values by putting the values into an array&quot;&quot;&quot;invert_obj(object)    &quot;&quot;&quot;Returns a new object with the keys of the given object as values, and thevalues of the given object, which are coerced to strings, as keys. Notethat the last key found is preferred when handling the same value&quot;&quot;&quot;invoker(arity, f)    &quot;&quot;&quot;Turns a named method with a specified arity into a function that can becalled directly supplied with arguments and a target object.The returned function is curried and accepts arity + 1 parameters wherethe final parameter is the target object&quot;&quot;&quot;is_empty(xs)    &quot;&quot;&quot;Returns true if the given value is its type's empty value; falseotherwise&quot;&quot;&quot;is_nil(xs)    &quot;&quot;&quot;Checks if the input value is null or undefined&quot;&quot;&quot;join(sep, xs)    &quot;&quot;&quot;Returns a string made by inserting the separator between each element andconcatenating all the elements into a single string&quot;&quot;&quot;juxt(functions, *args)    &quot;&quot;&quot;juxt applies a list of functions to a list of values&quot;&quot;&quot;keys(dict)    &quot;&quot;&quot;Returns a list containing the names of all the enumerable own properties ofthe supplied object.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms&quot;&quot;&quot;last(list)    &quot;&quot;&quot;Returns the last element of the given list or string&quot;&quot;&quot;last_index_of(y, xs)    &quot;&quot;&quot;Returns the position of the last occurrence of an item in an array, or -1 ifthe item is not included in the array. R.equals is used todetermine equality&quot;&quot;&quot;length(x)    &quot;&quot;&quot;Returns the number of elements in the array by returning list.length&quot;&quot;&quot;lt(y, x)    &quot;&quot;&quot;Returns true if the first argument is less than the second; falseotherwise&quot;&quot;&quot;lte(y, x)    &quot;&quot;&quot;Returns true if the first argument is less than or equal to the second;false otherwise&quot;&quot;&quot;map(f, xs)    &quot;&quot;&quot;Takes a function anda functor,applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable map implementations for Array and Object,so this function may be applied to [1, 2, 3] or {x: 1, y: 2, z: 3}.Dispatches to the map method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together&quot;&quot;&quot;map_accum(function, accumulator, list)    &quot;&quot;&quot;The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, acc and value, and shouldreturn a tuple [acc, value]&quot;&quot;&quot;map_accum_right(function, accumulator, list)    &quot;&quot;&quot;The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to mapAccum, except moves through the input list fromthe right to the left.The iterator function receives two arguments, value and acc, and shouldreturn a tuple [value, acc]&quot;&quot;&quot;map_obj_indexed(f, xs)    &quot;&quot;&quot;An Object-specific version of map. The function is applied to threearguments: (value, key, obj). If only the value is significant, usemap instead&quot;&quot;&quot;None    &quot;&quot;&quot;Tests a regular expression against a String. Note that this function willreturn an empty array when there are no matches. This differs fromString.prototype.matchwhich returns null when there are no matches&quot;&quot;&quot;max(x, y)    &quot;&quot;&quot;Returns the larger of its two arguments&quot;&quot;&quot;max_by(f, x, y)    &quot;&quot;&quot;Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function&quot;&quot;&quot;mean(xs)    &quot;&quot;&quot;Returns the mean of the given list of numbers&quot;&quot;&quot;median(xs)    &quot;&quot;&quot;Returns the median of the given list of numbers&quot;&quot;&quot;memoize(f)    &quot;&quot;&quot;Creates a new function that, when invoked, caches the result of calling fnfor a given argument set and returns the result. Subsequent calls to thememoized fn with the same argument set will not result in an additionalcall to fn; instead, the cached result for that set of arguments will bereturned&quot;&quot;&quot;memoize_with(key_generator, f)    &quot;&quot;&quot;A customisable version of R.memoize. memoizeWith takes anadditional function that will be applied to a given argument set and used tocreate the cache key under which the results of the function to be memoizedwill be stored. Care must be taken when implementing key generation to avoidclashes that may overwrite previous entries erroneously&quot;&quot;&quot;merge(object1, object2)    &quot;&quot;&quot;Create a new object with the own properties of the first object merged withthe own properties of the second object. If a key exists in both objects,the value from the second object will be used&quot;&quot;&quot;merge_all(objects)    &quot;&quot;&quot;Merges a list of objects together into one object&quot;&quot;&quot;merge_with(function, object1, object2)    &quot;&quot;&quot;Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object&quot;&quot;&quot;merge_with_key(function, object1, object2)    &quot;&quot;&quot;Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object&quot;&quot;&quot;min(x, y)    &quot;&quot;&quot;Returns the smaller of its two arguments&quot;&quot;&quot;min_by(f, x, y)    &quot;&quot;&quot;Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function&quot;&quot;&quot;modulo(x, y)    &quot;&quot;&quot;Divides the first parameter by the second and returns the remainder. Notethat this function preserves the JavaScript-style behavior for modulo. Formathematical modulo see mathMod&quot;&quot;&quot;multiply(x, y)    &quot;&quot;&quot;Multiplies two numbers. Equivalent to a * b but curried&quot;&quot;&quot;n_ary(n, f)    &quot;&quot;&quot;Wraps a function of any arity (including nullary) in a function that acceptsexactly n parameters. Any extraneous parameters will not be passed to thesupplied function&quot;&quot;&quot;negate(x)    &quot;&quot;&quot;Negates its argument&quot;&quot;&quot;none(predicate, X)    &quot;&quot;&quot;Returns true if no elements of the list match the predicate, falseotherwise.Dispatches to the any method of the second argument, if present&quot;&quot;&quot;nth(n, xs)    &quot;&quot;&quot;Returns the nth element of the given list or string. If n is negative theelement at index length + n is returned&quot;&quot;&quot;nth_arg(n)    &quot;&quot;&quot;Returns a function which returns its nth argument&quot;&quot;&quot;obj_of(k, v)    &quot;&quot;&quot;Creates an object containing a single key:value pair&quot;&quot;&quot;of(x)    &quot;&quot;&quot;Returns a singleton array containing the value provided.Note this of is different from the ES6 of; Seehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of&quot;&quot;&quot;omit(keys, dict)    &quot;&quot;&quot;Returns a partial copy of an object omitting the keys specified&quot;&quot;&quot;once(f)    &quot;&quot;&quot;Accepts a function fn and returns a function that guards invocation offn such that fn can only ever be called once, no matter how many timesthe returned function is invoked. The first value calculated is returned insubsequent invocations&quot;&quot;&quot;pair(first, second)    &quot;&quot;&quot;Takes two arguments, fst and snd, and returns [fst, snd]&quot;&quot;&quot;partial(f, args)    &quot;&quot;&quot;Takes a function f and a list of arguments, and returns a function g.When applied, g returns the result of applying f to the argumentsprovided initially followed by the arguments provided to g&quot;&quot;&quot;None    &quot;&quot;&quot;Takes a predicate and a list or other Filterable object and returns thepair of filterable objects of the same type of elements which do and do notsatisfy, the predicate, respectively. Filterable objects include plain objects or any objectthat has a filter method such as Array&quot;&quot;&quot;path(keys, dict)    &quot;&quot;&quot;Retrieve the value at a given path&quot;&quot;&quot;path_eq(path, equals_to, value)    &quot;&quot;&quot;Determines whether a nested path on an object has a specific value, inR.equals terms. Most likely used to filter a list&quot;&quot;&quot;path_or(default, path, value)    &quot;&quot;&quot;If the given, non-null object has a value at the given path, returns thevalue at that path. Otherwise returns the provided default value&quot;&quot;&quot;path_satisfies(predicate, path, value)    &quot;&quot;&quot;Returns true if the specified object property at given path satisfies thegiven predicate; false otherwise&quot;&quot;&quot;pick(keys, dict)    &quot;&quot;&quot;Returns a partial copy of an object containing only the keys specified. Ifthe key does not exist, the property is ignored&quot;&quot;&quot;pick_all(keys, dict)    &quot;&quot;&quot;Similar to pick except that this one includes a key: undefined pair forproperties that don't exist&quot;&quot;&quot;pick_by(f, dict)    &quot;&quot;&quot;Returns a partial copy of an object containing only the keys that satisfythe supplied predicate&quot;&quot;&quot;pipe(*funcs)    &quot;&quot;&quot;Performs left-to-right function composition. The leftmost function may haveany arity; the remaining functions must be unary.In some libraries this function is named sequence.Note: The result of pipe is not automatically curried&quot;&quot;&quot;pluck(key, xs)    &quot;&quot;&quot;Returns a new list by plucking the same named property off all objects inthe list supplied.pluck will work onany functor inaddition to arrays, as it is equivalent to R.map(R.prop(k), f)&quot;&quot;&quot;prepend(value, list)    &quot;&quot;&quot;Returns a new list with the given element at the front, followed by thecontents of the list&quot;&quot;&quot;product(xs)    &quot;&quot;&quot;Multiplies together all the elements of a list&quot;&quot;&quot;project(selectors, list)    &quot;&quot;&quot;Reasonable analog to SQL select statement&quot;&quot;&quot;prop(name, o)    &quot;&quot;&quot;Returns a function that when supplied an object returns the indicatedproperty of that object, if it exists&quot;&quot;&quot;prop_eq(property, value, object)    &quot;&quot;&quot;Returns true if the specified object property is equal, inR.equals terms, to the given value; false otherwise.You can test multiple properties with R.where&quot;&quot;&quot;prop_is(type, property, value)    &quot;&quot;&quot;Returns true if the specified object property is of the given type;false otherwise&quot;&quot;&quot;prop_or(default, property, object)    &quot;&quot;&quot;If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue&quot;&quot;&quot;prop_satisfies(predicate, property, object)    &quot;&quot;&quot;Returns true if the specified object property satisfies the givenpredicate; false otherwise. You can test multiple properties withR.where&quot;&quot;&quot;props(properties, object)    &quot;&quot;&quot;Acts as multiple prop: array of keys in, array of values out. Preservesorder&quot;&quot;&quot;range(from_, to)    &quot;&quot;&quot;Returns a list of numbers from from (inclusive) to to (exclusive)&quot;&quot;&quot;reduce(iterator, accumulator, list)    &quot;&quot;&quot;Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: (acc, value). It may useR.reduced to shortcut the iteration.The arguments' order of reduceRight's iterator functionis (value, acc).Note: R.reduce does not skip deleted or unassigned indices (sparsearrays), unlike the native Array.prototype.reduce method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the reduce method of the third argument, if present. Whendoing so, it is up to the user to handle the R.reducedshortcuting, as this is not implemented by reduce&quot;&quot;&quot;reduce_while(predicate, iterator, accumulator, list)    &quot;&quot;&quot;Like reduce, reduceWhile returns a single item by iteratingthrough the list, successively calling the iterator function. reduceWhilealso takes a predicate that is evaluated before each step. If the predicatereturns false, it &quot;short-circuits&quot; the iteration and returns the currentvalue of the accumulator&quot;&quot;&quot;__init__(self, value)    &quot;&quot;&quot;Returns a value wrapped to indicate that it is the final value of the reduceand transduce functions. The returned value should be considered a blackbox: the internal structure is not guaranteed to be stable.Note: this optimization is unavailable to functions not explicitly listedabove. For instance, it is not currently supported byreduceRight&quot;&quot;&quot;reject(p, xs)    &quot;&quot;&quot;The complement of filter.Acts as a transducer if a transformer is given in list position. Filterableobjects include plain objects or any object that has a filter method suchas Array&quot;&quot;&quot;remove(index, length, list)    &quot;&quot;&quot;Removes the sub-list of list starting at index start and containingcount elements. Note that this is not destructive: it returns a copy ofthe list with the changes.No lists have been harmed in the application of this function&quot;&quot;&quot;repeat(value, times)    &quot;&quot;&quot;Returns a fixed list of size n containing a specified identical value&quot;&quot;&quot;replace(pattern, replacement, string)    &quot;&quot;&quot;Replace a substring or regex match in a string with a replacement&quot;&quot;&quot;reverse(list)    &quot;&quot;&quot;Returns a new list or string with the elements or characters in reverseorder&quot;&quot;&quot;scan(function, accumulator, list)    &quot;&quot;&quot;Scan is similar to reduce, but returns a list of successivelyreduced values from the left&quot;&quot;&quot;slice(from_index, to_index, list_or_string)    &quot;&quot;&quot;Returns the elements of the given list or string (or object with a slicemethod) from fromIndex (inclusive) to toIndex (exclusive).Dispatches to the slice method of the third argument, if present&quot;&quot;&quot;sort(comparator, list)    &quot;&quot;&quot;Returns a copy of the list, sorted according to the comparator function,which should accept two values at a time and return a negative number if thefirst value is smaller, a positive number if it's larger, and zero if theyare equal. Please note that this is a copy of the list. It does notmodify the original&quot;&quot;&quot;sort_by(comparator, list)    &quot;&quot;&quot;Sorts the list according to the supplied function&quot;&quot;&quot;sort_with(comparators, list)    &quot;&quot;&quot;Sorts a list according to a list of comparators&quot;&quot;&quot;split(separator, string)    &quot;&quot;&quot;Splits a string into an array of strings based on the givenseparator&quot;&quot;&quot;split_at(index, list)    &quot;&quot;&quot;Splits a given list or string at a given index&quot;&quot;&quot;split_every(length, collection)    &quot;&quot;&quot;Splits a collection into slices of the specified length&quot;&quot;&quot;split_when(predicate, list)    &quot;&quot;&quot;Takes a list and a predicate and returns a pair of lists with the following properties:the result of concatenating the two output lists is equivalent to the input list;none of the elements of the first output list satisfies the predicate; andif the second output list is non-empty, its first element satisfies the predicate&quot;&quot;&quot;starts_with(values, list)    &quot;&quot;&quot;Checks if a list starts with the provided values&quot;&quot;&quot;subtract(x, y)    &quot;&quot;&quot;Subtracts its second argument from its first argument&quot;&quot;&quot;sum(xs)    &quot;&quot;&quot;Adds together all the elements of a list&quot;&quot;&quot;symmetric_difference(first, second)    &quot;&quot;&quot;Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both&quot;&quot;&quot;symmetric_difference_with(predicate, first, second)    &quot;&quot;&quot;Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements&quot;&quot;&quot;tail(list)    &quot;&quot;&quot;Returns all but the first element of the given list or string (or objectwith a tail method).Dispatches to the slice method of the first argument, if present&quot;&quot;&quot;take(n, list)    &quot;&quot;&quot;Returns the first n elements of the given list, string, ortransducer/transformer (or object with a take method).Dispatches to the take method of the second argument, if present&quot;&quot;&quot;take_last(n, list)    &quot;&quot;&quot;Returns a new list containing the last n elements of the given list.If n &gt; list.length, returns a list of list.length elements&quot;&quot;&quot;take_last_while(predicate, list)    &quot;&quot;&quot;Returns a new list containing the last n elements of a given list, passingeach value to the supplied predicate function, and terminating when thepredicate function returns false. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:(value)&quot;&quot;&quot;take_while(predicate, list)    &quot;&quot;&quot;Returns a new list containing the first n elements of a given list,passing each value to the supplied predicate function, and terminating whenthe predicate function returns false. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:(value).Dispatches to the takeWhile method of the second argument, if present.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;tap(f, v)    &quot;&quot;&quot;Runs the given function with the supplied object, then returns the object.Acts as a transducer if a transformer is given as second parameter&quot;&quot;&quot;test(pattern, string)    &quot;&quot;&quot;Determines whether a given string matches a given regular expression&quot;&quot;&quot;times(n)    &quot;&quot;&quot;Calls an input function n times, returning an array containing the resultsof those function calls.fn is passed one argument: The current value of n, which begins at 0and is gradually incremented to n - 1&quot;&quot;&quot;to_lower(string)    &quot;&quot;&quot;The lower case version of a string&quot;&quot;&quot;to_pairs(object)    &quot;&quot;&quot;Converts an object into an array of key, value arrays. Only the object'sown properties are used.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms&quot;&quot;&quot;to_upper(string)    &quot;&quot;&quot;The upper case version of a string&quot;&quot;&quot;transpose(list)    &quot;&quot;&quot;Transposes the rows and columns of a 2D list.When passed a list of n lists of length x,returns a list of x lists of length n&quot;&quot;&quot;trim(x)    &quot;&quot;&quot;Removes (strips) whitespace from both ends of the string&quot;&quot;&quot;try_catch(tryer, catcher)    &quot;&quot;&quot;tryCatch takes two functions, a tryer and a catcher. The returnedfunction evaluates the tryer; if it does not throw, it simply returns theresult. If the tryer does throw, the returned function evaluates thecatcher function and returns its result. Note that for effectivecomposition with this function, both the tryer and catcher functionsmust return the same type of results&quot;&quot;&quot;unapply(function)    &quot;&quot;&quot;Takes a function fn, which takes a single array argument, and returns afunction which:takes any number of positional arguments;passes these arguments to fn as an array; andreturns the result.In other words, R.unapply derives a variadic function from a function whichtakes an array. R.unapply is the inverse of R.apply&quot;&quot;&quot;unary(function)    &quot;&quot;&quot;Wraps a function of any arity (including nullary) in a function that acceptsexactly 1 parameter. Any extraneous parameters will not be passed to thesupplied function&quot;&quot;&quot;unfold(iterator, seed)    &quot;&quot;&quot;Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: (seed)&quot;&quot;&quot;union(X, Y)    &quot;&quot;&quot;Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list&quot;&quot;&quot;union_with(predicate, X, Y)    &quot;&quot;&quot;Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements&quot;&quot;&quot;uniq(xs)    &quot;&quot;&quot;Returns a new list containing only one copy of each element in the originallist. R.equals is used to determine equality&quot;&quot;&quot;uniq_by(predicate, list)    &quot;&quot;&quot;Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied function toeach list element. Prefers the first item if the supplied function producesthe same value on two items. R.equals is used for comparison&quot;&quot;&quot;unless(predicate, function, value)    &quot;&quot;&quot;Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the whenFalseFn function with the same argument. If the predicateis satisfied, the argument is returned as is&quot;&quot;&quot;unnest(list)    &quot;&quot;&quot;Shorthand for R.chain(R.identity), which removes one level of nesting fromany Chain&quot;&quot;&quot;until(predicate, transformation, value)    &quot;&quot;&quot;Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value&quot;&quot;&quot;update(i, v, xs)    &quot;&quot;&quot;Returns a new copy of the array with the element at the provided indexreplaced with the given value&quot;&quot;&quot;use_with(function, transformers)    &quot;&quot;&quot;Accepts a function fn and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction fn with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to fn as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity&quot;&quot;&quot;values(dict)    &quot;&quot;&quot;Returns a list of all the enumerable own properties of the supplied object.Note that the order of the output array is not guaranteed across differentJS platforms&quot;&quot;&quot;when(predicate, when_true_fn, value)    &quot;&quot;&quot;Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe whenTrueFn function with the same argument. If the predicate is notsatisfied, the argument is returned as is&quot;&quot;&quot;where(spec, object)    &quot;&quot;&quot;Takes a spec object and a test object; returns true if the test satisfiesthe spec. Each of the spec's own properties must be a predicate function.Each predicate is applied to the value of the corresponding property of thetest object. where returns true if all the predicates return true, falseotherwise.where is well suited to declaratively expressing constraints for otherfunctions such as filter and find&quot;&quot;&quot;where_eq(spec, object)    &quot;&quot;&quot;Takes a spec object and a test object; returns true if the test satisfiesthe spec, false otherwise. An object satisfies the spec if, for each of thespec's own properties, accessing that property of the object gives the samevalue (in R.equals terms) as accessing that property of thespec.whereEq is a specialization of where&quot;&quot;&quot;without(xs1, xs2)    &quot;&quot;&quot;Returns a new list without values in the first argument.R.equals is used to determine equality.Acts as a transducer if a transformer is given in list position&quot;&quot;&quot;xprod(xs1, xs2)    &quot;&quot;&quot;Creates a new list out of the two supplied by creating each possible pairfrom the lists&quot;&quot;&quot;zip(first, second)    &quot;&quot;&quot;Creates a new list out of the two supplied by pairing up equally-positioneditems from both lists. The returned list is truncated to the length of theshorter of the two input lists.Note: zip is equivalent to zipWith(function(a, b) { return [a, b] })&quot;&quot;&quot;zip_obj(key, val)    &quot;&quot;&quot;Creates a new object out of a list of keys and a list of values.Key/value pairing is truncated to the length of the shorter of the two lists.Note: zipObj is equivalent to pipe(zip, fromPairs)&quot;&quot;&quot;zip_with(f, xs1, xs2)    &quot;&quot;&quot;Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists&quot;&quot;&quot;```</longdescription>
</pkgmetadata>