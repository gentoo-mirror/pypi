<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Hyperlinks for pydantic models==============================Read `a blog post from the library author&lt;https://www.jmoisio.eu/en/blog/2023/03/12/a-library-for-managing-hyperlinks-in-modern-python-web-applications/&gt;`_discussing why this library exists.In a typical web application relationships between resources are modeled byprimary and foreign keys in a database (integers, UUIDs, etc.). The most naturalway to represent relationships in REST APIs is by URLs to the related resources(explained in `this blog&lt;https://cloud.google.com/blog/products/application-development/api-design-why-you-should-use-links-not-keys-to-represent-relationships-in-apis&gt;`_).``hrefs`` makes it easy to add hyperlinks between `pydantic&lt;https://pydantic-docs.helpmanual.io/&gt;`_ models in a declarative way. Justdeclare a ``Href`` field and the library will automatically convert between keysand URLs:.. code-block:: python   from hrefs import Href, BaseReferrableModel   from pydantic import BaseModel   class Book(BaseReferrableModel):       id: int       class Config:           details_view = &quot;get_book&quot;   class Library(BaseModel):       books: list[Href[Book]]   @app.get(&quot;/books/{id}&quot;)   def get_book(id: int) -&gt; Book:       return Book(id=id)   @app.get(&quot;/library&quot;)   def get_library() -&gt; Library:       &quot;&quot;&quot;       Will serialize into:       {&quot;books&quot;:[&quot;https://example.com/books/1&quot;,&quot;https://example.com/books/2&quot;,&quot;https://example.com/books/3&quot;]}       &quot;&quot;&quot;       return Library(books=[1,2,3])   @app.post(&quot;/library&quot;)   def post_library(library: Library):       &quot;&quot;&quot;       Assuming the request contains       {&quot;books&quot;:[&quot;https://example.com/books/1&quot;,&quot;https://example.com/books/2&quot;,&quot;https://example.com/books/3&quot;]}       Will deserialize into: [1,2,3]       &quot;&quot;&quot;       write_to_database([href.key for href in library.books])``hrefs`` was written especially with `FastAPI &lt;https://fastapi.tiangolo.com/&gt;`_in mind, but integrates into any application or framework using pydantic toparse and serialize models.Check out the `documentation &lt;https://hrefs.readthedocs.io/&gt;`_ to get started!Installation------------Install the library using ``pip`` or your favorite package management tool:.. code-block:: console   $ pip install hrefs</longdescription>
</pkgmetadata>