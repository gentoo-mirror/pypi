<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Flask Ninja![build](https://github.com/kiwicom/flask-ninja/workflows/Build%20jobs/badge.svg)![python](https://img.shields.io/badge/Python-3.9%20|%203.10-blue)**Flask Ninja** is a web framework for building APIs with Flask and Python 3.9+ type hints.Key features:- Easy: Designed to be easy to use and intuitive.- Fast to code: Type hints and automatic docs lets you focus only on business logic.- Standards-based: Based on the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema.- Models based: Pydantic models support and automatic (de)serialization of requests/responses.- Secure: Natively supports various authentication methods for the requests.For mode details, see the [Documentation](https://flask-ninja.readthedocs.io/en/latest/)## Installation```pip install flask-ninja```## UsageIn your flask project where you create flask app:```Pythonfrom flask import Flaskfrom flask_ninja import NinjaAPIfrom pydantic import BaseModelapp = Flask(__name__)api = NinjaAPI(app)class Response(BaseModel):    &quot;&quot;&quot;Response model containing results of various number operations.&quot;&quot;&quot;    sum: int    difference: int    product: int    power: int@api.get(&quot;/compute&quot;)def compute(a: int, b: int) -&gt; Response:    &quot;&quot;&quot;Computes results of various number operations.    This endpoint returns a result of the following operations:    - sum    - difference    - product    - power    :param int a: First number    :param int b: Second number number    &quot;&quot;&quot;    return Response(        sum=a + b,        difference=a - b,        product=a * b,        power=a ** b    )if __name__ == &quot;__main__&quot;:    app.run()```**That's it !**Now you've just created an API that:- receives an HTTP GET request at `/compute`- takes, validates and type-casts GET parameters `a` and `b`- validates the returned Response object and serializes it into JSON- generates an OpenAPI schema for defined operation### Interactive API docsNow go to &lt;a href=&quot;http://127.0.0.1:8000/docs&quot; target=&quot;_blank&quot;&gt;http://127.0.0.1:5000/docs&lt;/a&gt;You will see the automatic interactive API documentation (provided by &lt;a href=&quot;https://github.com/swagger-api/swagger-ui&quot; target=&quot;_blank&quot;&gt;Swagger UI&lt;/a&gt;):</longdescription>
</pkgmetadata>