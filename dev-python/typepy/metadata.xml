<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. contents:: **typepy**   :backlinks: top   :depth: 2Summary=========`typepy &lt;https://github.com/thombashi/typepy&gt;`__ is a Python library for variable type checker/validator/converter at a run time... image:: https://badge.fury.io/py/typepy.svg    :target: https://badge.fury.io/py/typepy    :alt: PyPI package version.. image:: https://anaconda.org/conda-forge/typepy/badges/version.svg    :target: https://anaconda.org/conda-forge/typepy    :alt: conda-forge package version.. image:: https://img.shields.io/pypi/pyversions/typepy.svg    :target: https://pypi.org/project/typepy    :alt: Supported Python versions.. image:: https://img.shields.io/pypi/implementation/typepy.svg    :target: https://pypi.org/project/typepy    :alt: Supported Python implementations.. image:: https://github.com/thombashi/typepy/workflows/Tests/badge.svg    :target: https://github.com/thombashi/typepy/actions?query=workflow%3ATests    :alt: Linux/macOS/Windows CI status.. image:: https://coveralls.io/repos/github/thombashi/typepy/badge.svg?branch=master    :target: https://coveralls.io/github/thombashi/typepy?branch=master    :alt: Test coverage.. image:: https://github.com/thombashi/typepy/actions/workflows/codeql-analysis.yml/badge.svg    :target: https://github.com/thombashi/typepy/actions/workflows/codeql-analysis.yml    :alt: CodeQLFeatures==========- checking a value type- validate a value for a type- convert a value from a type to the other typeThe correspondence between Python types and ``typepy`` classes are as follows:.. table:: Supported Types    ================================================  =======================================================================================================    Python Type                                       typepy: Type Class    ================================================  =======================================================================================================    ``bool``                                          `Bool &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#bool-type&gt;`__    ``datetime``                                      `DateTime &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#datetime-type&gt;`__    ``dict``                                          `Dictionary &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#dictionary-type&gt;`__    ``float``/``decimal.Decimal`` (not infinity/NaN)  `RealNumber &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#real-number-type&gt;`__    ``float``/``decimal.Decimal`` (infinity)          `Infinity &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#infinity-type&gt;`__    ``float``/``decimal.Decimal`` (NaN)               `Nan &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#nan-type&gt;`__    ``int``                                           `Integer &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#integer-type&gt;`__    ``list``                                          `List &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#list-type&gt;`__    ``None``                                          `None &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#none-type&gt;`__    ``str`` (not null)                                `String &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#string-type&gt;`__    ``str`` (null)                                    `NullString &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#null-string-type&gt;`__    ``str`` (IP address)                              `IpAddress &lt;https://typepy.rtfd.io/en/latest/pages/reference/type.html#ip-address-type&gt;`__    ================================================  =======================================================================================================Installation============Installation: pip------------------------------::    pip install typepyInstall additional dependency packages with the following command if using ``typepy.DateTime`` class::    pip install typepy[datetime]Installation: conda------------------------------::    conda install -c conda-forge typepyInstallation: apt------------------------------::    sudo add-apt-repository ppa:thombashi/ppa    sudo apt update    sudo apt install python3-typepyDependencies============- Python 3.6+- `Python package dependencies (automatically installed) &lt;https://github.com/thombashi/typepy/network/dependencies&gt;`__Optioal dependencies----------------------------------These packages can be installed via ``pip install typepy[datetime]``:- `python-dateutil &lt;https://dateutil.readthedocs.io/en/stable/&gt;`__- `pytz &lt;https://pypi.org/project/pytz/&gt;`__Usage=======Type Check Method----------------------:Examples:    .. code-block:: pycon        &gt;&gt;&gt; from typepy import Integer        &gt;&gt;&gt; Integer(1).is_type()        True        &gt;&gt;&gt; Integer(1.1).is_type()        FalseType Validation Method--------------------------------------------:Examples:    .. code-block:: pycon        &gt;&gt;&gt; from typepy import Integer        &gt;&gt;&gt; Integer(1).validate()        &gt;&gt;&gt; try:        ...     Integer(1.1).validate()        ... except TypeError as e:        ...     # validate() raised TypeError when the value unmatched the type class        ...     print(e)        ...        invalid value type: expected=INTEGER, actual=&lt;type 'float'&gt;Type Conversion Methods--------------------------------------------convert method~~~~~~~~~~~~~~~~~~~~~~~~~~~~:Examples:    .. code-block:: pycon        &gt;&gt;&gt; from typepy import Integer, TypeConversionError        &gt;&gt;&gt; Integer(&quot;1&quot;).convert()        1        &gt;&gt;&gt; try:        ...     Integer(1.1).convert()        ... except TypeConversionError as e:        ...     # convert() raised TypeConversionError when conversion failed        ...     print(e)        ...        failed to convert from float to INTEGERtry_convert method~~~~~~~~~~~~~~~~~~~~~~~~~~~~:Examples:    .. code-block:: pycon        &gt;&gt;&gt; from typepy import Integer        &gt;&gt;&gt; Integer(&quot;1&quot;).try_convert()        1        &gt;&gt;&gt; print(Integer(1.1).try_convert())  # try_convert() returned None when conversion failed        Noneforce_convert~~~~~~~~~~~~~~~~~~~~~~~~~~~~:Examples:    .. code-block:: pycon        &gt;&gt;&gt; from typepy import Integer, TypeConversionError        &gt;&gt;&gt; Integer(&quot;1&quot;).force_convert()  # force_convert() forcibly convert the value        1        &gt;&gt;&gt; Integer(1.1).force_convert()        1        &gt;&gt;&gt; try:        ...     Integer(&quot;abc&quot;).force_convert()        ... except TypeConversionError as e:        ...     # force_convert() raised TypeConversionError when the value not convertible        ...     print(e)        ...        failed to force_convert to int: type=&lt;class 'str'&gt;For more information--------------------------------------------Type check/validate/convert results differed according to``strict_level`` value which can pass to typepy classes constructors as an argument.More information can be found in the`API reference &lt;https://typepy.rtfd.io/en/latest/pages/reference/index.html&gt;`__.Documentation===============https://typepy.rtfd.io/</longdescription>
</pkgmetadata>