<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pdbr[![PyPI version](https://badge.fury.io/py/pdbr.svg)](https://pypi.org/project/pdbr/) [![Python Version](https://img.shields.io/pypi/pyversions/pdbr.svg)](https://pypi.org/project/pdbr/) [![](https://github.com/cansarigol/pdbr/workflows/Test/badge.svg)](https://github.com/cansarigol/pdbr/actions?query=workflow%3ATest) [![pre-commit.ci status](https://results.pre-commit.ci/badge/github/cansarigol/pdbr/master.svg)](https://results.pre-commit.ci/latest/github/cansarigol/pdbr/master)pdbr is intended to make the PDB results more colorful. it uses [Rich](https://github.com/willmcgugan/rich) library to carry out that.## InstallingInstall with `pip` or your favorite PyPi package manager.```pip install pdbr```## BreakpointIn order to use ```breakpoint()```, set **PYTHONBREAKPOINT** with &quot;pdbr.set_trace&quot;```pythonimport osos.environ[&quot;PYTHONBREAKPOINT&quot;] = &quot;pdbr.set_trace&quot;```or just import pdbr```pythonimport pdbr```## New commands### (ic)ecreamüç¶ [Icecream](https://github.com/gruns/icecream) print.### (i)nspect / inspectall | ia[rich.inspect](https://rich.readthedocs.io/en/latest/introduction.html?s=03#rich-inspector)### search | srcSearch a phrase in the current frame.In order to repeat the last one, type **/** character as arg.### sqlDisplay value in sql format.![](/images/image13.png)It can be used for Django model queries as follows.```&gt;&gt;&gt; sql str(Users.objects.all().query)```![](/images/image14.png)### (syn)tax[ val,lexer ] Display [lexer](https://pygments.org/docs/lexers/).### (v)arsGet the local variables list as table.### varstree | vtGet the local variables list as tree.![](/images/image5.png)## ConfigConfig is specified in **setup.cfg** and can be local or global. Local config (current working directory) has precedence over global (default) one. Global config must be located in `$XDG_CONFIG_HOME/pdbr/` directory.### StyleIn order to use Rich's traceback, style, and theme:```[pdbr]style = yellowuse_traceback = Truetheme = friendly```### History**store_history** setting is used to keep and reload history, even the prompt is closed and opened again:```[pdbr]...store_history=.pdbr_history```## CeleryIn order to use **Celery** remote debugger with pdbr, use ```celery_set_trace``` as below sample. For more information see the [Celery user guide](https://docs.celeryproject.org/en/stable/userguide/debugging.html).```pythonfrom celery import Celeryapp = Celery('tasks', broker='pyamqp://guest@localhost//')@app.taskdef add(x, y):    import pdbr; pdbr.celery_set_trace()    return x + y```#### TelnetInstead of using `telnet` or `nc`, in terms of using pdbr style, `pdbr_telnet` command can be used.![](/images/image6.png)Also in order to activate history and be able to use arrow keys, install and use [rlwrap](https://github.com/hanslub42/rlwrap) package.```rlwrap -H '~/.pdbr_history' pdbr_telnet localhost 6899```## IPython`pdbr` integrates with [IPython](https://ipython.readthedocs.io/).This makes [`%magics`](https://ipython.readthedocs.io/en/stable/interactive/magics.html) available, for example:```python(Pdbr) %timeit range(100)104 ns ¬± 2.05 ns per loop (mean ¬± std. dev. of 7 runs, 10,000,000 loops each)```To enable `IPython` features, install it separately, or like below:```pip install pdbr[ipython]```## pytestIn order to use `pdbr` with pytest `--pdb` flag, add `addopts` setting in your pytest.ini.```[pytest]addopts: --pdbcls=pdbr:RichPdb```## Context Decorator`pdbr_context` and `apdbr_context` (`asyncio` corresponding) can be used as **with statement** or **decorator**. It calls `post_mortem` if `traceback` is not none.```pythonfrom pdbr import apdbr_context, pdbr_context@pdbr_context()def foo():    ...def bar():    with pdbr_context():        ...@apdbr_context()async def foo():    ...async def bar():    async with apdbr_context():        ...```![](/images/image12.png)## Django DiscoverRunnerTo being activated the pdb in Django test, change `TEST_RUNNER` like below. Unlike Django (since you are not allowed to use for smaller versions than 3), pdbr runner can be used for version 1.8 and subsequent versions.```TEST_RUNNER = &quot;pdbr.runner.PdbrDiscoverRunner&quot;```![](/images/image10.png)## Middlewares### Starlette```pythonfrom fastapi import FastAPIfrom pdbr.middlewares.starlette import PdbrMiddlewareapp = FastAPI()app.add_middleware(PdbrMiddleware, debug=True)@app.get(&quot;/&quot;)async def main():    1 / 0    return {&quot;message&quot;: &quot;Hello World&quot;}```### DjangoIn order to catch the problematic codes with post mortem, place the middleware class.```MIDDLEWARE = (    ...    &quot;pdbr.middlewares.django.PdbrMiddleware&quot;,)```![](/images/image11.png)## ShellRunning `pdbr` command in terminal starts an `IPython` terminal app instance. Unlike default `TerminalInteractiveShell`, the new shell uses pdbr as debugger class instead of `ipdb`.#### %debug magic sample![](/images/image9.png)### As a ScriptIf `pdbr` command is used with an argument, it is invoked as a script and [debugger-commands](https://docs.python.org/3/library/pdb.html#debugger-commands) can be used with it.```python# equivalent code: `python -m pdbr -c 'b 5' my_test.py`pdbr -c 'b 5' my_test.py&gt;&gt;&gt; Breakpoint 1 at /my_test.py:5&gt; /my_test.py(3)&lt;module&gt;()      1      2----&gt; 3 def test():      4         foo = &quot;foo&quot;1     5         bar = &quot;bar&quot;(Pdbr)```### Terminal#### Django shell sample![](/images/image7.png)## Vscode user snippetTo create or edit your own snippets, select **User Snippets** under **File &gt; Preferences** (**Code &gt; Preferences** on macOS), and then select **python.json**.Place the below snippet in json file for **pdbr**.```{  ...  &quot;pdbr&quot;: {        &quot;prefix&quot;: &quot;pdbr&quot;,        &quot;body&quot;: &quot;import pdbr; pdbr.set_trace()&quot;,        &quot;description&quot;: &quot;Code snippet for pdbr debug&quot;    },}```For **Celery** debug.```{  ...  &quot;rdbr&quot;: {        &quot;prefix&quot;: &quot;rdbr&quot;,        &quot;body&quot;: &quot;import pdbr; pdbr.celery_set_trace()&quot;,        &quot;description&quot;: &quot;Code snippet for Celery pdbr debug&quot;    },}```## Samples![](/images/image1.png)![](/images/image3.png)![](/images/image4.png)### Traceback![](/images/image2.png)</longdescription>
</pkgmetadata>