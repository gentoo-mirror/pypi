<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># configclasses![PyPI](https://img.shields.io/pypi/v/12factor-configclasses)[![codecov](https://codecov.io/gh/headsrooms/configclasses/branch/master/graph/badge.svg?token=U0bxsmAUoe)](https://codecov.io/gh/headsrooms/configclasses)&lt;a href=&quot;https://codeclimate.com/github/kingoodie/configclasses/maintainability&quot;&gt;&lt;img src=&quot;https://api.codeclimate.com/v1/badges/9094f65f5caef64fb993/maintainability&quot; /&gt;&lt;/a&gt;[![Downloads](https://pepy.tech/badge/12factor-configclasses/month)](https://pepy.tech/project/12factor-configclasses)Like dataclasses but for config.Specify your config with a class and load it with your env vars or env files.```pythonimport httpxfrom configclasses import configclassclass UserAPIClient(httpx.AsyncClient):    def __init__(self, config: ClientConfig, *args, **kwargs):        self.config = config        super().__init__(*args, **kwargs)    async def get_users(self, headers: Optional[Headers] = None) -&gt; Dict[str, Any]:        response = await self.get(f&quot;{self.path}/users&quot;, auth=headers)        response.raise_for_status()        return response.json()    @configclassclass ClientConfig:    host: str    port: intconfig = ClientConfig.from_path(&quot;.env&quot;)async with UserAPIClient(config) as client:    users = await client.get_users(auth_headers)```## Features- Fill your configclasses with existent env vars.- Define default values in case these variables have no value at all.- Load your config files in env vars following [12factor apps](https://12factor.net) recommendations.- Support for _.env_, _yaml_, _toml_, _ini_ and _json_.- Convert your env vars with specified type in configclass: `int`, `float`, `str` or `bool`.- Use nested configclasses to more complex configurations.- Specify a prefix with `@configclass(prefix=&quot;&lt;PREFIX&gt;&quot;)` to append this prefix to your configclass'  attribute names.- Config groups (__TODO__): https://cli.dev/docs/tutorial/config_groups/## RequirementsPython 3.8+## InstallationDepending on your chosen config file format you can install:- .env  -&gt;   ```pip install 12factor-configclasses[dotenv]```- .yaml -&gt;   ```pip install 12factor-configclasses[yaml]```- .toml -&gt;   ```pip install 12factor-configclasses[toml]```- .ini  -&gt;   ```pip install 12factor-configclasses```- .json -&gt;   ```pip install 12factor-configclasses```Or install all supported formats with:    pip install 12factor-configclasses[full]    ## UsageThere are three ways to use it:- Loading an .env file:```.env# .envHOST=0.0.0.0PORT=8000DB_URL=sqlite://:memory:GENERATE_SCHEMAS=TrueDEBUG=TrueHTTPS_ONLY=FalseGZIP=TrueSENTRY=False``````python#config.pyfrom configclasses import configclass@configclassclass DB:    user: str    password: str    url: str@configclassclass AppConfig:    host: str    port: int    db: DB    generate_schemas: bool    debug: bool    https_only: bool    gzip: bool    sentry: bool``````python# app.pyfrom api.config import AppConfigapp_config = AppConfig.from_path(&quot;.env&quot;)app = Starlette(debug=app_config.debug)if app_config.https_only:    app.add_middleware(        HTTPSRedirectMiddleware)if app_config.gzip:    app.add_middleware(GZipMiddleware)if app_config.sentry:    app.add_middleware(SentryAsgiMiddleware)...register_tortoise(    app,    db_url=app_config.db.url,    modules={&quot;models&quot;: [&quot;api.models&quot;]},    generate_schemas=app_config.generate_schemas,)if __name__ == &quot;__main__&quot;:    uvicorn.run(app, host=app_config.host, port=app_config.port)```    - Loading predefined environmental variables:The same than before, but instead of:    app_config = AppConfig.from_path(&quot;.env&quot;)    You will do:    app_config = AppConfig.from_environ()    - Loading a file from a string:```pythontest_env = &quot;&quot;&quot;HOST=0.0.0.0PORT=8000DB_URL=sqlite://:memory:GENERATE_SCHEMAS=TrueDEBUG=TrueHTTPS_ONLY=FalseGZIP=TrueSENTRY=False&quot;&quot;&quot;app_config = AppConfig.from_string(test_env, &quot;.env&quot;)```</longdescription>
</pkgmetadata>