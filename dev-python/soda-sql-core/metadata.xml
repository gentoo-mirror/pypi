<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sodadata/docs/main/assets/images/soda-banner.png&quot; alt=&quot;Soda logo&quot; /&gt;&lt;/p&gt;&lt;h1 align=&quot;center&quot;&gt;Soda SQL&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Data testing, monitoring and profiling for SQL accessible data.&lt;/b&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/sodadata/soda-sql/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202-blue.svg&quot; alt=&quot;License: Apache 2.0&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://join.slack.com/t/soda-community/shared_invite/zt-m77gajo1-nXJF7JtbbRht2zwaiLb9pg&quot;&gt;&lt;img alt=&quot;Slack&quot; src=&quot;https://img.shields.io/badge/chat-slack-green.svg&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pypi.org/project/soda-sql/&quot;&gt;&lt;img alt=&quot;Pypi Soda SQL&quot; src=&quot;https://img.shields.io/badge/pypi-soda%20sql-green.svg&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/sodadata/soda-sql/actions/workflows/build.yml&quot;&gt;&lt;img alt=&quot;Build soda-sql&quot; src=&quot;https://github.com/sodadata/soda-sql/actions/workflows/build.yml/badge.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;**What does Soda SQL do?**Soda SQL allows you to * Stop your pipeline when bad data is detected * Extract metrics and column profiles through super efficient SQL * Full control over metrics and queries through declarative config files**Why Soda SQL?**To protect against silent data issues for the consumers of your data,it's best-practice to profile and test your data: * as it lands in your warehouse, * after every important data processing step * right before consumption.This way you will prevent delivery of bad data to downstream consumers.You will spend less time firefighting and gain a better reputation.**How does Soda SQL work?**Soda SQL is a Command Line Interface (CLI) and a Python library to measureand test your data using SQL.As input, Soda SQL uses YAML configuration files that include: * SQL connection details * What metrics to compute * What tests to run on the measurementsBased on those configuration files, Soda SQL will perform scans.  A scanperforms all measurements and runs all tests associated with one table.  Typicallya scan is executed after new data has arrived.  All soda-sql configuration filescan be checked into your version control system as part of your pipelinecode.&gt; Want to try Soda SQL? Head over to our ['Quick start tutorial'](https://docs.soda.io/soda-sql/getting-started/5_min_tutorial.html) and get started straight away!**&quot;[Show me the metrics](https://www.youtube.com/watch?v=1-mOKMq19zU)&quot;**Let's walk through an example. Simple metrics and tests can be configured in scan YAML configurationfiles. An example of the contents of such a file:```yamlmetrics:    - row_count    - missing_count    - missing_percentage    - values_count    - values_percentage    - valid_count    - valid_percentage    - invalid_count    - invalid_percentage    - min    - max    - avg    - sum    - min_length    - max_length    - avg_length    - distinct    - unique_count    - duplicate_count    - uniqueness    - maxs    - mins    - frequent_values    - histogramcolumns:    ID:        metrics:            - distinct            - duplicate_count        valid_format: uuid        tests:            duplicate_count == 0    CATEGORY:        missing_values:            - N/A            - No category        tests:            missing_percentage &lt; 3    SIZE:        tests:            max - min &lt; 20sql_metrics:    - sql: |        SELECT sum(volume) as total_volume_us        FROM CUSTOMER_TRANSACTIONS        WHERE country = 'US'      tests:        - total_volume_us &gt; 5000```Based on these configuration files, Soda SQL will scan your dataeach time new data arrived like this:```bash$ soda scan ./soda/metrics my_warehouse my_datasetSoda 1.0 scan for dataset my_dataset on prod my_warehouse  | SELECT column_name, data_type, is_nullable  | FROM information_schema.columns  | WHERE lower(table_name) = 'customers'  |   AND table_catalog = 'datasource.database'  |   AND table_schema = 'datasource.schema'  - 0.256 secondsFound 4 columns: ID, NAME, CREATE_DATE, COUNTRY  | SELECT  |  COUNT(*),  |  COUNT(CASE WHEN ID IS NULL THEN 1 END),  |  COUNT(CASE WHEN ID IS NOT NULL AND ID regexp '\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b' THEN 1 END),  |  MIN(LENGTH(ID)),  |  AVG(LENGTH(ID)),  |  MAX(LENGTH(ID)),  | FROM customers  - 0.557 secondsrow_count : 23543missing   : 23invalid   : 0min_length: 9avg_length: 9max_length: 9...more queries...47 measurements computed23 tests executedAll is good. No tests failed. Scan took 23.307 seconds```The next step is to add Soda SQL scans in your favoritedata pipeline orchestration solution like:* Airflow* AWS Glue* Prefect* Dagster* Fivetran* Matillion* LuigiIf you like the goals of this project, encourage us! Star [sodadata/soda-sql on Github](https://github.com/sodadata/soda-sql).&gt; Next, head over to our ['Quick start tutorial'](https://docs.soda.io/soda-sql/getting-started/5_min_tutorial.html) and get your first project going!</longdescription>
</pkgmetadata>