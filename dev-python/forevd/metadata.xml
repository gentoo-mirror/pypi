<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Table of contents1. [Intro](#intro)1. [Dependencies](#dependencies)1. [Running `forevd`](#running-forevd)1. [Config Files](#config-files)    1. [OIDC Config](#oidc-config)    1. [LDAP](#ldap-config)1. [Mutual TLS](#mutual-tls)1. [Authorization](#authorization)# Intro`forevd` is a forward and reverse proxy that helps deliver authentication and, optionally,authorization as a sidecar.This project was created to help eliminate any need to add authentication into your applicationcode.# DependenciesAt the moment, `forevd`, runs using Apache, so you will need to have httpd or docker image of itavailable at runtime.- Apache- nginx (TBD)# Running `forevd`The following proivides some details on how to run `forevd`. The way the options work is thatanything provided immediately on the CLI, are &quot;global&quot; defaults; if you then provide config(optionally files), via the `--locations`, `--ldap` or `--oidc` options, then those will overridethe CLI options, of, e.g. `--backend` and `--location`.# Config FilesYou can optionally provide config files for more complicated setups; this section provides soemexamples, which can be found in the `etc` directory.The config files use Jinja2 templating via environment variables, so, instead of putting values indirectly, you can use the form `{{ ENV_VAR_NAME }}` to have the environment varibale injected atruntime.The following command line options support files: `--locations`, `--ldap` or `--oidc`, via the `@`symbol, similar to `curl`'s command line option `--data`, for example, `--oidc @etc/oidc.yaml`## Locations ConfigThis config allows you to provide much more control over each &quot;location&quot; or &quot;endpoint&quot; to yourreverse proxy. For example, using different backends for different URLs or adding authorization. Theformat of the file is a dictionary of locations, or endpoints, and their correspondign data.### KeysThere are 5 key config options for each location:1. `path`: the path, location or endpoint of what to protect or unprotect1. `match`: whether the path value is a regex or *match*1. `authc`: this is the authentication (aka `authc`) key, representing what authc to enable; this is   dictionary with keys being either `mtls` or `oidc`.1. `authz`: this is the authorization (aka `authz`) key, representing what authz to enable; this is   dictionary with keys, see below example and details at the [Authorization](#authorization)    section.Note: remember that global authentication options `--oidc` and `mtls`, so if you want to set OIDCacross all endpoints, except, say, `/api`, you would need to disable it explicitly with:```yaml- path: /api  authc:    oidc: false```### ExampleThe following adds LDAP group **and** static user authorization to `/````yaml- path: /  authz:    join_type: &quot;any&quot;    ldap:      url: &quot;ldaps://127.0.0.1/DC=foo,DC=example,DC=com&quot;      bind-dn: &quot;foo&quot;      bind-pw: &quot;{{ LDAP_BINDID_PASSWORD }}&quot;      groups:        - &quot;CN=foobar,OU=groups,DC=example,DC=com&quot;    users:      - erick.bourgeois```Let's break this down a bit:- the high level keys are endpoints- the next level is authorization config- the `join_type` key word tells `forevd` how to &quot;combine&quot; or join the two different authorizations,  values are:  - `any`: if any of the authorization types match, allow connection through  - `all`: all of the authorization types **must** match to allow connection through## OIDC ConfigThis is useful for adding any other global OIDC config; there are required fields for the auth towork, e.g. `ClientID` and `ClientSecret`.### Example```yamlProviderMetadataUrl: &quot;https://{{ OIDC_PROVIDER_NAME }}.us.auth0.com/.well-known/openid-configuration&quot;RedirectURI: &quot;https://erick-pro.jeb.ca:8080/secure/redirect_uri&quot;ClientId: &quot;{{ OIDC_CLIENT_ID }}&quot;ClientSecret: &quot;{{ OIDC_CLIENT_SECRET }}&quot;Scope: '&quot;openid profile&quot;'PKCEMethod: S256RemoteUserClaim: nickname```## LDAP ConfigThis is used for global LDAP config, e.g. setting cache information for `mod_ldap`. Note: The `LDAP`prefix is stripped, as it's redundant and it's added as part of the config generation.### Example```yamlSharedCacheSize: 500000CacheEntries: 1024CacheTTL: 600OpCacheEntries: 1024OpCacheTTL: 600```# Mutual TLSThe following command provides termination of mTLS on `/` and passes connections to a backend at`http://0.0.0.0:8080````forevd --debug --listen 0.0.0.0:8080 \    --ca-cert $PWD/../certs/ca/ca-cert.pem    --cert $PWD/../certs/server.crt    --cert-key $PWD/../certs/server.key    --backend http://localhost:8081    --location /    --mtls require    --server-name example.com    --var-dir /var/tmp/apache```# AuthorizationTo add authorization, it's recommended you use a config file for the `--locations` command line.There is currently support for LDAP group lookups, static user names, or allow all valid users. Hereare the keys supported:1. `allow_all`: this key let's `forevd` know to allow all valid users through1. `join_type`: this is the &quot;join&quot; type between all authorizations setup  - `any`: if any of the authorization types match, allow connection through  - `all`: all of the authorization types **must** match to allow connection through1. `ldap`: this is the LDAP configuration for group lookups, keys are:   - `url`: LDAP URL, e.g. `ldaps://127.0.0.1/DC=foo,DC=example,DC=com`   - `bind-dn`: the DN for bind operation   - `bind-pw`: the password for bind operation   - `groups`: a list of groups DNs1. `users`: a list of user names to verify againstSee [Locations Example](#example) for more detail.</longdescription>
</pkgmetadata>