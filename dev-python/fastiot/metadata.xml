<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Fast-IoT (fastiot)FastIoT is a framework for rapid development of IIoT-Systems using Python as main programming language.It helps to set up a micro-service architecture and create services. The development has been started as basis for various research projects at Fraunhofer IVV, Dresden, Germany.  To get started quickly it is equipped with a powerful command line interface (CLI): `fiot`.This helps setting up a new project, create new services and run tests. It also supports creating cross-architecture Docker-containers and deployment configurations with docker-compose filesand Ansible playbooks to bring the software to the systems they belong. Run `fiot --help` for a full list of features.As for now the overall framework has only been used and tested on Linux systems.A full documentation is available at https://fastiot.readthedocs.io (or at http://docs.dev.ivv-dd.fhg.de/fastiot/_latest/ within the Fraunhofer IVV)If you use this framework in your scientific projects please cite: &gt; Tilman Klaeger, Konstantin Merker, &quot;FastIoT – A Holistic Approach for Rapid Development of IIoT Systems&quot;, 2022.&gt; https://doi.org/10.48550/arXiv.2201.13243.## LicenseCopyright 2022 Fraunhofer IVV, Dresden and contributorsLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at   http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.## RequirementsThese are the requirements you need to setup:* Python 3.9 or newer and the possibility to create virtual environments.If you want to build services or do integration tests with databases or other services you also need to have a workingdocker setup:* Docker* docker-composeIf you want to use Ansible for deploying your services you also need to Ansible installed.## Getting startedIt is always recommended to use a separate virtual environment for each project, so let’s create one: `python3 -m venv venv` and use it: `source venv/bin/activate`Afterwards you can install FastIoT: `python3 -m pip install &quot;fastiot[dev]&quot;`To set up a new project with the name `my_first_project` you can now run: `fiot create new-project my_first_project`Within this repository you can find some sample services to use as template.Or you can simply ask the CLI to create a new services: `fiot create new-service my_first_service`.You should now find a service stub in your project to be extended with your application logic.The service will be added to the deployment &quot;full&quot; automatically.You can now also create deployment configurations (e.g. a `docker-compose.yaml`) using `fiot config` and build containers for your project using `fiot build`.As the service has been added to a deployment automatically you now start the service (with broker) with the command`fiot start full`. You should see the log messages from sending and receiving data. To cancel just press [Ctrl]+[C].For a more comprehensive list of features, a guide to the project structure please refer to the complete documentation.To run services locally, in your IDE or within a container you may also refer to the complete documentation.## Developing FastIoTSimply check out this project and install the dependencies listed in `requirements.txt`.To run all tests and sample services you may also install additional packages listed in `requirements/requirements-all.txt`. ### Project structureA detailed structure for all projects based on FastIoT is listed in the documentation. Here just the few most important parts are listed:* `src/fastiot`: The core library and base with CLI, message handling, …* `src/fastiot_core_services`: Core Services to use directly in any project* `src/fastiot_sample_services`: Some examples about how to write services. Maybe used as copy and paste template for* own services.### Release processCurrently, and subject to change, new commits in the main-branch will rise the version number automatically and count from the last tag set.Once the interfaces are proven to be stable, development will take place in specific dev branches and only be merged tomain for a new release.</longdescription>
</pkgmetadata>