<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python SDK for Jason GNSS Cloud PPK Service[Jason GNSS Cloud PPK Service](https://jason.rokubun.cat) is a cloud-basedpositioning engine that uses GNSS data. One of the main features of this serviceis that offers an API so that users can automatize the GNSS data processingwithout the need to access the front-end.The online documentation of the service can be found [here](https://jason.docs.rokubun.cat).To install the package:```bashpip3 install jason-gnss```Note that this SDK supports only Python 3.x.## AuthenticationIt is important that you have the `JASON_API_KEY` and `JASON_SECRET_TOKEN` environement variables. These can be fetched by accessing your area in the Jason PaaS and then going to `My Account` -&gt; `API Credentials`.## Use the package as an SDKThe package is basically a library that can be embedded into your Python scripts```pythonimport jason_gnss as jason# Submit a process without waiting for it to finish (fetch it later)jason.submit_process(rover_file)# ({'message': 'success', 'id': 3505}, 200)# Get the status of your process. The documentation of the return can # be found in the Jason online documentationprocess_id = 3505jason.get_status(process_id)# ({'process': {'id': 3505, ...}, 200)# Download the results file for a given process that you ownjason.download_results(process_id)# '/jason_gnss/rokubun_gnss_id_003505.zip'```## Command line toolsThe package has also a command line tool so that you can use it out-of-the-box.The following examples illustrate how to use it.```bashexport JASON_API_KEY='&lt;jason-api-key&gt;'export JASON_SECRET_TOKEN='&lt;your-private-jason-user-token&gt;'#Â Get the helpjason -h# Process a rover filejason process test/jason_gnss_test_file_rover.txt# Process a rover file and adding a base station file as welljason process test/jason_gnss_test_file_rover.txt test/jason_gnss_test_file_base.txt# Perform a PPK processing specifying a rover, base file as well as the location# of the base stationjason process test/jason_gnss_test_file_rover.txt \              test/jason_gnss_test_file_base.txt \              --base_position 41.809142804  2.163228514  936.01730# Get the status of a processjason status process_id# Fetch the results file for a given process idjason download process_id# Convert a file to RINEX 3.03 formatjason convert test/jason_gnss_test_file_smartphone.txt```The arguments of the command line tools follow the [docopt](http://docopt.org)## Docker execution/developmentIt is recommended that you use docker to execute or work with this package.This repository contains both a `Dockerfile` as well as a `docker-compose.yml`to help you with this.Follow these instructions:```bash# Command to build the imagedocker-compose build# Start the container with the package loaded with the commanddocker-compose run jason_gnss```Once inside the container:```bash# Install the packagepython setup.py install```Now, while in the container, you can issue commands in the prompt orwithin the Python console.### API Key and secret tokenIf you are using docker-compose, we recommend that you store your authorizationkeys in a file `.env` and run the Docker container via the command`docker-compose run jason-gnss`. With this, your credentials will be loadedin the container and the Jason tools will be ready to use without the needto declare these variables.```textJASON_API_KEY='&lt;jason-api-key&gt;'JASON_SECRET_TOKEN='&lt;your-private-jason-user-token&gt;'```Although probably not used for the end user, for debugging purposes, in theevent that you have a local instance of the Jason service running in yourfacilities, you can set the Jason entry point by defining the `JASON_API_URL`environment variable.</longdescription>
</pkgmetadata>