<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸ“¼ Python FFmpeg Video Streaming[![Build Status](https://travis-ci.org/aminyazdanpanah/python-ffmpeg-video-streaming.svg?branch=master)](https://travis-ci.org/aminyazdanpanah/python-ffmpeg-video-streaming)[![Build status](https://ci.appveyor.com/api/projects/status/qy712tou5pvq629y?svg=true)](https://ci.appveyor.com/project/aminyazdanpanah/python-ffmpeg-video-streaming)[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/aminyazdanpanah/python-ffmpeg-video-streaming/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/aminyazdanpanah/python-ffmpeg-video-streaming/?branch=master)[![Downloads](https://pepy.tech/badge/python-ffmpeg-video-streaming)](https://pepy.tech/project/python-ffmpeg-video-streaming)[![PyPI version](https://badge.fury.io/py/python-ffmpeg-video-streaming.svg)](https://badge.fury.io/py/python-ffmpeg-video-streaming)[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/LICENSE)## OverviewThis package uses the **[FFmpeg](https://ffmpeg.org)** to package media content for online streaming such as DASH and HLS. You can also use **[DRM](https://en.wikipedia.org/wiki/Digital_rights_management)** for HLS packaging. There are several options to open a file from a cloud and save files to clouds as well.- **[Full Documentation](https://video.aminyazdanpanah.com/python/)** is available describing all features and components.- In this version(&gt;=v0.1.0) all codes are rewritten from scratch. If you find any bugs in the library, please **[file an issue](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/issues)**. **[Pull requests](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/pulls)** are also welcome. **Contents**- [Requirements](#requirements)- [Installation](#installation)- [Quickstart](#quickstart)  - [Opening a Resource](#opening-a-resource)  - [DASH](#dash)  - [HLS](#hls)    - [Encryption(DRM)](#encryptiondrm)  - [Transcoding](#transcoding)  - [Saving Files](#saving-files)  - [Metadata](#metadata)  - [Conversion](#conversion)- [Several Open Source Players](#several-open-source-players)- [FAQs](#faqs)- [Contributing and Reporting Bugs](#contributing-and-reporting-bugs)- [Credits](#credits)- [License](#license)## Requirements1. This version of the package is only compatible with **[Python 3.8](https://www.python.org/downloads/)** or higher.2. To use this package, you need to **[install the FFmpeg](https://ffmpeg.org/download.html)**. You will need both FFmpeg and FFProbe binaries to use it.## InstallationInstall the package via **[pip](https://pypi.org/project/pip/)**:``` bashpip install python-ffmpeg-video-streaming```Alternatively, add the dependency directly to your `requirements.txt` file:``` txtpython-ffmpeg-video-streaming&gt;=0.1```## QuickstartFirst of all, you need to import the package in your code:```pythonimport ffmpeg_streaming```### Opening a ResourceThere are several ways to open a resource.#### 1. From an FFmpeg supported resourceYou can pass a local path of video(or a supported resource) to the `input` method:```pythonvideo = ffmpeg_streaming.input('/var/media/video.mp4')```See **[FFmpeg Protocols Documentation](https://ffmpeg.org/ffmpeg-protocols.html)** for more information about supported resources such as HTTP, FTP, and etc.**For example:** ```pythonvideo = ffmpeg_streaming.input('https://www.aminyazdanpanah.com/?&quot;PATH TO A VIDEO FILE&quot; or &quot;PATH TO A LIVE HTTP STREAM&quot;')```#### 2. From CloudsYou can open a file from a cloud by passing an instance of the Cloud object to the `input` method. ```pythonfrom ffmpeg_streaming import S3s3 = S3(aws_access_key_id='YOUR_KEY_ID', aws_secret_access_key='YOUR_KEY_SECRET', region_name='YOUR_REGION')video = ffmpeg_streaming.input(s3, bucket_name=&quot;bucket-name&quot;, key=&quot;video.mp4&quot;)```Visit **[this page](https://video.aminyazdanpanah.com/python/start/clouds?r=open)** to see some examples of opening a file from **[Amazon S3](https://aws.amazon.com/s3)**, **[Google Cloud Storage](https://console.cloud.google.com/storage)**, **[Microsoft Azure Storage](https://azure.microsoft.com/en-us/features/storage-explorer/)**, and a custom cloud.#### 3. Capture Webcam or Screen (Live Streaming)You can pass the name of a supported, connected capture device(i.e. the name of a webcam, camera, screen and etc) to the `input` method to stream a live media over the network from your connected device.  ```pythoncapture = ffmpeg_streaming.input('CAMERA NAME OR SCREEN NAME', capture=True) ```To list the supported, connected capture devices, see **[FFmpeg Capture Webcam](https://trac.ffmpeg.org/wiki/Capture/Webcam)** and **[FFmpeg Capture Desktop](https://trac.ffmpeg.org/wiki/Capture/Desktop)**.  ### DASH**[Dynamic Adaptive Streaming over HTTP (DASH)](http://dashif.org/)**, also known as MPEG-DASH, is an adaptive bitrate streaming technique that enables high-quality streaming of media content over the Internet delivered from conventional HTTP web servers. [Learn more](https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP) Create DASH files:```pythonfrom ffmpeg_streaming import Formatsdash = video.dash(Formats.h264())dash.auto_generate_representations()dash.output('/var/media/dash.mpd')```Generate representations manually:```pythonfrom ffmpeg_streaming import Formats, Bitrate, Representation, Size_144p  = Representation(Size(256, 144), Bitrate(95 * 1024, 64 * 1024))_240p  = Representation(Size(426, 240), Bitrate(150 * 1024, 94 * 1024))_360p  = Representation(Size(640, 360), Bitrate(276 * 1024, 128 * 1024))_480p  = Representation(Size(854, 480), Bitrate(750 * 1024, 192 * 1024))_720p  = Representation(Size(1280, 720), Bitrate(2048 * 1024, 320 * 1024))_1080p = Representation(Size(1920, 1080), Bitrate(4096 * 1024, 320 * 1024))_2k    = Representation(Size(2560, 1440), Bitrate(6144 * 1024, 320 * 1024))_4k    = Representation(Size(3840, 2160), Bitrate(17408 * 1024, 320 * 1024))dash = video.dash(Formats.h264())dash.representations(_144p, _240p, _360p, _480p, _720p, _1080p, _2k, _4k)dash.output('/var/media/dash.mpd')```See **[DASH section](https://video.aminyazdanpanah.com/python/start?r=dash#dash)** in the documentation, for more examples.### HLS**[HTTP Live Streaming (also known as HLS)](https://developer.apple.com/streaming/)** is an HTTP-based adaptive bitrate streaming communications protocol implemented by Apple Inc. as part of its QuickTime, Safari, OS X, and iOS software. Client implementations are also available in Microsoft Edge, Firefox, and some versions of Google Chrome. Support is widespread in streaming media servers. [Learn more](https://en.wikipedia.org/wiki/HTTP_Live_Streaming) Create HLS files:```pythonfrom ffmpeg_streaming import Formatshls = video.hls(Formats.h264())hls.auto_generate_representations()hls.output('/var/media/hls.m3u8')```Generate representations manually:```pythonfrom ffmpeg_streaming import Formats, Bitrate, Representation, Size_360p  = Representation(Size(640, 360), Bitrate(276 * 1024, 128 * 1024))_480p  = Representation(Size(854, 480), Bitrate(750 * 1024, 192 * 1024))_720p  = Representation(Size(1280, 720), Bitrate(2048 * 1024, 320 * 1024))hls = video.hls(Formats.h264())hls.representations(_360p, _480p, _720p)hls.output('/var/media/hls.m3u8')```See **[HLS section](https://video.aminyazdanpanah.com/python/start?r=hls#hls)** in the documentation, for more examples such as Fragmented MP4, live from camera/screen and so on.#### Encryption(DRM)The encryption process requires some kind of secret (key) together with an encryption algorithm. HLS uses AES in cipher block chaining (CBC) mode. This means each block is encrypted using the ciphertext of the preceding block. [Learn more](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation)You must specify a path to save a random key to your local machine and also a URL(or a path) to access the key on your website(the key you will save must be accessible from your website). You must pass both these parameters to the `encryption` method:##### Single KeyThe following code generates a key for all segment files.```pythonfrom ffmpeg_streaming import Formats#A path you want to save a random key to your local machinesave_to = '/home/public_html/&quot;PATH TO THE KEY DIRECTORY&quot;/key'#A URL (or a path) to access the key on your websiteurl = 'https://www.aminyazdanpanah.com/?&quot;PATH TO THE KEY DIRECTORY&quot;/key'# or url = '/&quot;PATH TO THE KEY DIRECTORY&quot;/key';hls = video.hls(Formats.h264())hls.encryption(save_to, url)hls.auto_generate_representations()hls.output('/var/media/hls.m3u8')```##### Key RotationAn integer as a &quot;key rotation period&quot; can also be passed to the `encryption` method (i.e. `encryption(save_to, url, 10)`) to use a different key for each set of segments, rotating to a new key after this many segments. For example, if 10 segment files have been generated then it will generate a new key. If you set this value to **`1`**, each segment file will be encrypted with a new encryption key. This can improve security and allows for more flexibility. See **[the example](https://video.aminyazdanpanah.com/python/start?r=enc-hls#hls-encryption)** for more information.**IMPORTANT:** It is very important to protect your key(s) on your website. For example, you can use a token(using a Get/Post HTTP method or add a token to authorization header) to check if the user is eligible to access the key or not. You can also use a session(or cookie) on your website to restrict access to the key(s)(**It is highly recommended**).    ##### DRMHowever FFmpeg supports AES encryption for HLS packaging, which you can encrypt your content, it is not a full **[DRM](https://en.wikipedia.org/wiki/Digital_rights_management)** solution. If you want to use a full DRM solution, I recommend trying **[FairPlay Streaming](https://developer.apple.com/streaming/fps/)** solution which then securely exchange keys, and protect playback on devices.**Besides [Apple's FairPlay](https://developer.apple.com/streaming/fps/)** DRM system, you can also use other DRM systems such as **[Microsoft's PlayReady](https://www.microsoft.com/playready/overview/)** and **[Google's Widevine](https://www.widevine.com/)**.### TranscodingYou can get realtime information about the transcoding using the following code. ```pythonfrom ffmpeg_streaming import Formatsimport sysdef monitor(ffmpeg, duration, time_, time_left, process):    &quot;&quot;&quot;    Handling proccess.    Examples:    1. Logging or printing ffmpeg command    logging.info(ffmpeg) or print(ffmpeg)    2. Handling Process object    if &quot;something happened&quot;:        process.terminate()    3. Email someone to inform about the time of finishing process    if time_left &gt; 3600 and not already_send:  # if it takes more than one hour and you have not emailed them already        ready_time = time_left + time.time()        Email.send(            email='someone@somedomain.com',            subject='Your video will be ready by %s' % datetime.timedelta(seconds=ready_time),            message='Your video takes more than %s hour(s) ...' % round(time_left / 3600)        )       already_send = True    4. Create a socket connection and show a progress bar(or other parameters) to your users    Socket.broadcast(        address=127.0.0.1        port=5050        data={            percentage = per,            time_left = datetime.timedelta(seconds=int(time_left))        }    )    :param ffmpeg: ffmpeg command line    :param duration: duration of the video    :param time_: current time of transcoded video    :param time_left: seconds left to finish the video process    :param process: subprocess object    :return: None    &quot;&quot;&quot;    per = round(time_ / duration * 100)    sys.stdout.write(        &quot;\rTranscoding...(%s%%) %s left [%s%s]&quot; %        (per, datetime.timedelta(seconds=int(time_left)), '#' * per, '-' * (100 - per))    )    sys.stdout.flush()hls = video.hls(Formats.h264())hls.auto_generate_representations()hls.output('/var/media/hls.m3u8', monitor=monitor)```##### Output From a Terminal:![transcoding](https://github.com/aminyazdanpanah/aminyazdanpanah.github.io/blob/master/video-streaming/transcoding.gif?raw=true &quot;transcoding&quot; )### Saving FilesThere are several ways to save files.#### 1. To a Local PathYou can pass a local path to the `output` method. If there is no directory, then the package will create it.```pythonfrom ffmpeg_streaming import Formatsdash = video.dash(Formats.h264())dash.auto_generate_representations()dash.output('/var/media/dash.mpd')```It can also be None. The default path to save files is the input directory.```pythonfrom ffmpeg_streaming import Formatshls = video.hls(Formats.h264())hls.auto_generate_representations()hls.output()```**NOTE:** If you open a file from a cloud and do not pass a path to save the file to your local machine, you will have to pass a local path to the `output` method.#### 2. To CloudsYou can save your files to a cloud by passing an instance of a `CloudManager` to the `output` method. ```pythonfrom ffmpeg_streaming import  S3, CloudManagers3 = S3(aws_access_key_id='YOUR_KEY_ID', aws_secret_access_key='YOUR_KEY_SECRET', region_name='YOUR_REGION')save_to_s3 = CloudManager().add(s3, bucket_name=&quot;bucket-name&quot;)hls.output(clouds=save_to_s3)``` A path can also be passed to save a copy of files to your local machine.```pythonhls.output('/var/media/hls.m3u8', clouds=save_to_s3)```Visit **[this page](https://video.aminyazdanpanah.com/python/start/clouds?r=save)** to see some examples of saving files to **[Amazon S3](https://aws.amazon.com/s3)**, **[Google Cloud Storage](https://console.cloud.google.com/storage)**, **[Microsoft Azure Storage](https://azure.microsoft.com/en-us/features/storage-explorer/)**, and a custom cloud. **NOTE:** This option is only valid for **[VOD](https://en.wikipedia.org/wiki/Video_on_demand)** (it does not support live streaming).**Schema:** The relation is `one-to-many`&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/aminyazdanpanah/aminyazdanpanah.github.io/blob/master/video-streaming/video-streaming.gif?raw=true&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;#### 3. To a Server InstantlyYou can pass a URL(or a supported resource like `FTP`) to the `output` method to upload all the segments files to the HTTP server(or other protocols) using the HTTP PUT method and update the manifest files every refresh times.```python# DASHdash.output('http://YOUR-WEBSITE.COM/live-stream/out.mpd')# HLShls.save_master_playlist('/var/media/hls.m3u8')#Before running the following code, you should upload the master playlist to the server. For example upload the '/var/media/hls.m3u8' to 'ftp://[user[:password]@]server[:port]/var/media/hls.m3u8'hls.output('ftp://[user[:password]@]server[:port]/var/media/hls.m3u8')```See **[FFmpeg Protocols Documentation](https://ffmpeg.org/ffmpeg-protocols.html)** for more information about supported resources.### MetadataYou can get information from the video file using the following code.```pythonfrom ffmpeg_streaming import FFProbeffprobe = FFProbe('/var/media/video.mp4')```See **[the example](https://video.aminyazdanpanah.com/python/start?r=metadata#metadata)** for more information.### ConversionYou can convert your stream to a file or to another stream protocol. You should pass a manifest of the stream to the `input` method:#### 1. HLS To DASH```pythonfrom ffmpeg_streaming import Formats, Bitrate, Representation, Sizevideo = ffmpeg_streaming.input('https://www.aminyazdanpanah.com/?PATH/TO/HLS-MANIFEST.M3U8')_480p  = Representation(Size(854, 480), Bitrate(750 * 1024, 192 * 1024))dash = video.dash(Formats.h264())dash.representations(_480p)dash.output('/var/media/dash.mpd')```#### 2. DASH To HLS```pythonvideo = ffmpeg_streaming.input('https://www.aminyazdanpanah.com/?PATH/TO/DASH-MANIFEST.MPD')hls = video.hls(Formats.h264())hls.auto_generate_representations()hls.output('/var/media/hls.m3u8')```#### 3. Stream(DASH or HLS) To File```pythonvideo = ffmpeg_streaming.input('https://www.aminyazdanpanah.com/?PATH/TO/MANIFEST.MPD or M3U8')stream = video.stream2file(Formats.h264())stream.output('/var/media/new-video.mp4')```## Several Open Source PlayersYou can use these libraries to play your streams.- **WEB**    - DASH and HLS:         - **[Video.js 7](https://github.com/videojs/video.js) (Recommended) - [videojs-http-streaming (VHS)](https://github.com/videojs/http-streaming)**        - **[Plyr](https://github.com/sampotts/plyr)**        - **[DPlayer](https://github.com/MoePlayer/DPlayer)**        - **[MediaElement.js](https://github.com/mediaelement/mediaelement)**        - **[Clappr](https://github.com/clappr/clappr)**        - **[Shaka Player](https://github.com/google/shaka-player)**        - **[Flowplayer](https://github.com/flowplayer/flowplayer)**    - DASH:        - **[dash.js](https://github.com/Dash-Industry-Forum/dash.js)**    - HLS:         - **[hls.js](https://github.com/video-dev/hls.js)**- **Android**    - DASH and HLS:         - **[ExoPlayer](https://github.com/google/ExoPlayer) (Recommended)**        - **[VLC for Android](https://github.com/videolan/vlc-android)**- **IOS**    - DASH:         - **[MPEGDASH-iOS-Player](https://github.com/MPEGDASHPlayer/MPEGDASH-iOS-Player)**    - HLS:         - **[Player](https://github.com/piemonte/Player)**- **Android and IOS**    - DASH and HLS:        - **[ijkplayer](https://github.com/bilibili/ijkplayer)**- **Windows, Linux, and macOS**    - DASH and HLS:        - **[FFmpeg(ffplay)](https://github.com/FFmpeg/FFmpeg) (Recommended)**        - **[VLC media player](https://github.com/videolan/vlc)**## FAQs**I created stream files and now what should I pass to a player?**You must pass a **master playlist(manifest) URL**(e.x. `https://www.aminyazdanpanah.com/?&quot;PATH TO STREAM DIRECTORY&quot;/dash-stream.mpd` or `/PATH_TO_STREAM_DIRECTORY/hls-stream.m3u8` ) to a player. See the demo page of these players for more information(**[hls.js Demo](https://hls-js.netlify.app/demo/)**, **[dash.js Demo](https://reference.dashif.org/dash.js/v3.1.2/samples/dash-if-reference-player/index.html)**, **[videojs Demo](https://videojs.com/advanced?video=elephantsdream)** and etc).  **My player does not show the quality selector button to change the video quality?**Some Players do not have an embedded quality selector button to change this option and you should install(or add) the plugin for this use case. For example, if you are using Videojs to play your stream, you can install **[videojs-hls-quality-selector](https://github.com/chrisboustead/videojs-hls-quality-selector)** to show the quality selector. For adding a plugin to other players, you can easily Google it!**I uploaded my stream files to a cloud but it does not play on my website?**If you save your stream content to a cloud(i.e. **[Amazon S3](https://aws.amazon.com/s3)**), make sure your contents are **PUBLIC**. If they are not, you must change the access control. **Does [IOS](https://www.apple.com/ios) support the DASH stream?**No, IOS does not have native support for DASH. Although there are some libraries such as **[Viblast](https://github.com/Viblast/ios-player-sdk)** and **[MPEGDASH-iOS-Player](https://github.com/MPEGDASHPlayer/MPEGDASH-iOS-Player)** to support this technique, I have never tested them. So maybe some of them will not work properly.See [this page](https://video.aminyazdanpanah.com/python/start?r=faq#faq) for more FAQs.## Contributing and Reporting BugsI'd love your help in improving, correcting, adding to the specification. Please **[file an issue](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/issues)** or **[submit a pull request](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/pulls)**.- See **[Contributing File](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/CONTRIBUTING.md)** for more information.- If you discover a security vulnerability within this package, please see **[SECURITY File](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/SECURITY.md)** for more information.## Credits- **[Amin Yazdanpanah](https://www.aminyazdanpanah.com/?u=github.com/aminyazdanpanah/python-ffmpeg-video-streaming)**- **[All Contributors](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/graphs/contributors)**## LicenseThe MIT License (MIT). See **[License File](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/LICENSE)** for more information.</longdescription>
</pkgmetadata>