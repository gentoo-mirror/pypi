<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># unified-rangeThe library converts input semver ranges to a uniform model, and the other way around, providing objects that are easier to use programmatically.## Examples of supported ranges1. npm style semver - `&lt;1.2.3 &gt;=2.0.0`2. ruby style semver - `&lt;1.2.3, &gt;=2.0.0`3. maven style version ranges - `[1.2.3,2.1.1), [3.0.0,4.1.1)`Additionally, use this library to run algorithms on any input version ranges and calculate whether a specific version is included in this range.## Prerequisites1. Ensure you have installed either pip or pipenv2. Install:   `pipenv install unified-range` or `pip install unified-range`3. Import the `api` module:   `from unified_range import api`## How to useFollowing are the different functions you can perform with this library.### To convert a range to the uniform string range, from the semver format:`ver_rng = api.from_semver(semver_str)`Results: uniform range structure### Convert from the uniform range structure to a semver string (return str):`semver = api.to_semver(unified_spec_str)`### To convert the versionrange object to a string:`version_range_str = str(ver_rng)`### Convert from the uniform string to the uniform model object (VersionRange objects):`ver_rng = api.unified_range(unified_spec_str)````&gt;&gt;&gt; api.unified_range('[1.2.3,4.5.6)')&lt;unified_range.models.UnifiedVersionRange at 0x7f7e4dc17320&gt;```### Within a list of ranges, retrieve versions not included:`filtered_lst = api.filter_versions(ascending_version_list, ranges)````&gt;&gt;&gt; api.filter_versions(['0.1', '0.2', '1.0', '1.1', '2.0'], ['[,0.2]', '[1.1]'])['1.0', '2.0']```The versions in `ascending_version_list` should be sorted in ascending order,from oldest to newest, and contain all the versions for the package.### From a list of version ranges, retrieve the closest version in the list to the current version (next):Filter next version and maximum version from list of version and ranges:`next_version = api.next_filtered_version(current_version, ascending_version_list, ranges)`current_version must be included in the ascending_version_list.```&gt;&gt;&gt; api.next_filtered_version(current_version='0.2', ascending_version_list=['0.1', '0.2', '1.0', '1.1', '2.0'], ranges=['[,0.2]', '[1.1]'])'1.0'&gt;&gt;&gt; api.next_filtered_version(current_version='1.1', ascending_version_list=['0.1', '0.2', '1.0', '1.1', '2.0'], ranges=['[,0.2]', '[1.1]'])'2.0' ```### Retreive the latest version that is not included:`max_version = api.maximum_filtered_version(ascending_version_list, ranges)````&gt;&gt;&gt; api.maximum_filtered_version(ascending_version_list=['0.1', '0.2', '1.0', '1.1', '2.0'], ranges=['[,0.2]', '[1.1]'])'2.0' ```## Uniform structure examplesFollowing are the uniform structures used in this library:Uniform string structure example: (,1.2.3)### Uniform model examples:`UnifiedVersionRange.constraints -&gt; List[Restrictions]``Restriction.bounds -&gt; Tuple[Bound, Bound]``Bound.version -&gt; str``Bound.inclusive -&gt; boolean`## References and prior worksThis library was built with the following:1. Maven’s VersionRange:[model](https://github.com/apache/maven/tree/master/maven-artifact/src/main/java/org/apache/maven/artifact/versioning) and [spec](https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html) of maven.2. https://semver.org/3. [npm’s semver library](https://www.npmjs.com/package/semver )</longdescription>
</pkgmetadata>