<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Scratch API wrapper with support for almost all site featuresThis library can set cloud variables, follow Scratchers, post comments and do so much more! It has special features that make it easy to transmit data through cloud variables.**Some functions require logging in to Scratch.****You also need to have the coding language Python installed on your device.***Download Python here if you don't have it: https://www.python.org/downloads/*The project is maintained by TimMcCool: https://scratch.mit.edu/users/TimMcCool/[![PyPI status](https://img.shields.io/pypi/status/scratchattach.svg)](https://pypi.python.org/pypi/scratchattach/)[![PyPI download month](https://img.shields.io/pypi/dm/scratchattach.svg)](https://pypi.python.org/pypi/scratchattach/)[![PyPI version shields.io](https://img.shields.io/pypi/v/scratchattach.svg)](https://pypi.python.org/pypi/scratchattach/)[![GitHub license](https://badgen.net/github/license/TimMcCool/scratchattach)](https://github.com/TimMcCool/scratchattach/blob/master/LICENSE)# InstallationRun the following command in your command prompt/ shell:```pip install -U scratchattach```**OR**Add this to your Python code:```pythonimport osos.system(&quot;pip install -U scratchattach&quot;)```# Logging in  `scratch3.Session`**Logging in with username / password:**```pythonimport scratchattach as scratch3session = scratch3.login(&quot;username&quot;, &quot;password&quot;)````login()` returns a `Session` object that saves your login**Logging in with a sessionId:***You can get your session id from your browser's cookies. [More information](https://github.com/TimMcCool/scratchattach/#get-your-session-id)*```pythonimport scratchattach as scratch3session = scratch3.Session(&quot;sessionId&quot;, username=&quot;username&quot;)```**Attributes:**```pysession.session_id #Returns the associated session idsession.xtokensession.email #Returns the email address associated with the accountsession.new_scratcher #Returns True if the associated account is a New Scratchersession.mute_statussession.banned #Returns True if the associated account is banned```# Cloud variables  `scratch3.CloudConnection`*Make sure you're using the latest scratchattach version. Update scratchattach with `pip install scratchattach --upgrade`***Connect to the Scratch cloud:**With a `Session` object:```pythonconn = session.connect_cloud(&quot;project_id&quot;)```Directly with a sessionId (cookie connect):```pythonconn = scratch3.CloudConnection(project_id = &quot;project_id&quot;, username=&quot;username&quot;, session_id=&quot;sessionId&quot;)```**Connect to the TurboWarp cloud:**Does not require a session.```pythonconn = scratch3.TwCloudConnection(project_id = &quot;project_id&quot;, username=&quot;username&quot;)  # Optional argument: cloud_host=&quot;wss://clouddata.turbowarp.org&quot;# To connect to forkphorus's cloud server, use cloud_host=&quot;wss://stratus.turbowarp.org&quot;```**Set a cloud var:**New Scratchers can set Scratch cloud variables too.```pythonconn.set_var(&quot;variable&quot;, &quot;value&quot;) #the variable name is specified without the cloud emoji```**Get a Scratch cloud var from the clouddata logs:**Does not require a connection / session.```pythonvalue = scratch3.get_var(&quot;project_id&quot;, &quot;variable&quot;)variables = scratch3.get_cloud(&quot;project_id&quot;) #Returns a dict with all cloud var valueslogs = scratch3.get_cloud_logs(&quot;project_id&quot;) #Returns the cloud logs as list```**Get a Scratch / TurboWarp cloud var from the websocket:** (new in v0.8.0)Requires a connection to Scratch or TurboWarp's cloud (a `CloudConnection` / `TwCloudConnection` object).```pythonvalue = conn.get_var(&quot;variable&quot;)```**Close the cloud connection:**```pythonconn.disconnect()```# Encoding / Decoding  `scratch3.Encoding`Scratchattach has a built in encoder. Scratch sprite to decode texts encoded with scratchattach: https://scratch3-assets.1tim.repl.co/Encoder.sprite3```pythonfrom scratchattach import EncodingEncoding.encode(&quot;input&quot;) #will return the encoded textEncoding.decode(&quot;encoded&quot;) #will decode an encoded text```# Cloud events  `scratch3.CloudEvents`*Cloud events allow reacting to cloud events in real time. If a Scratchersets / creates / deletes a cloud var on the given project, anevent will be called.*They do not require a session.**How to use with Scratch:**```pythonimport scratchattach as scratch3events = scratch3.CloudEvents(&quot;project_id&quot;)@events.eventdef on_set(event): #Called when a cloud var is set    print(f&quot;{event.user} set the variable {event.var} to the valuee {event.value} at {event.timestamp}&quot;)@events.eventdef on_del(event):    print(f&quot;{event.user} deleted variable {event.var}&quot;)@events.eventdef on_create(event):    print(f&quot;{event.user} created variable {event.var}&quot;)@events.event #Called when the event listener is readydef on_ready():   print(&quot;Event listener ready!&quot;)events.start()```**How to use with TurboWarp:** (new in v0.4.7)```pythonimport scratchattach as scratch3events = scratch3.TwCloudEvents(&quot;project_id&quot;)...```**Functions:**```pyevents.start(thread=True)events.pause()events.resume()events.stop()```# Cloud Requests  `scratch3.CloudRequests`Cloud Requests Framework (inspired by discord.py) that allows Scratch projects and Python to interact*This makes it possible to access data like message counts, user stats and more from Scratch projects! Uses cloud variables to transmit data.***[Cloud Requests are documented on this page:](https://github.com/TimMcCool/scratchattach/wiki/Cloud-Requests)**[https://github.com/TimMcCool/scratchattach/blob/main/CLOUD_REQUESTS.md](https://github.com/TimMcCool/scratchattach/wiki/Cloud-Requests)If you want to access external information in Scratch projects or store data on an external database, scratchattach's Cloud Requests are ideal for your project:- Similar to cloud events, but send back data to the project- Automatically encode / decode sent data- Tons of extra features# Users  `scratch3.User`**Get a user:**```pythonuser = session.connect_user(&quot;username&quot;)```Get the user that you are logged in with:```pythonsession.get_linked_user()```You can also get users without logging in: (but then you can't use any functions that require a login, like user.follow(), user.post_comment(), ...)```pythonuser = scratch3.get_user(&quot;username&quot;)```**Attributes:**```pythonuser.join_dateuser.about_meuser.wiwo #Returns the user's 'What I'm working on' sectionuser.country #Returns the country from the user profileuser.icon_url #Returns the link to the user's pfp (90x90)user.id #Returns the id of the useruser.scratchteam #Retuns True if the user is in the Scratch team# ----- ----- #user.update() #Updates the above data```**Functions:**```pythonuser.message_count()user.featured_data() #Returns info on the user's featured project as dictuser.follower_count()user.following_count()user.project_count()user.favorites_count() #Returns the amount of projects the user has favoriteduser.studio_count() #Returns the amount of studios the user is curatinguser.studio_following_count()user.followers(limit=40, offset=0) #Returns the followers as list of scratch3.User objectsuser.following(limit=40, offset=0) #Returns the people the user is following as list of scratch3.User objectsuser.projects(limit=None, offset=0) #Returns the projects the user has shared as list of scratch3.Project objectsuser.favorites(limit=None, offset=0) #Returns the projects the user has favorited as list of scratch3.Project objectsuser.studios(limit=None, offset=0) #Returns the studios the user is curating as list of dictsuser.viewed_projects(limit=24, offset=0) #To use this you need to be logged in as the user. Returns the projects the user has recently viewed as list of scratch3.Project objectsuser.activity_html(limit=1000) #Returns the user's activity as HTML documentuser.follow()user.unfollow()user.is_following(&quot;scratcher&quot;) #Returns True if user is following the specified Scratcheruser.is_followed_by(&quot;scratcher&quot;) #Returns True if user is followed by the specified Scratcheruser.comments(limit=20, page=1) #Returns the user's profile commentsuser.post_comment(&quot;comment content&quot;, parent_id=&quot;&quot;, commentee_id=&quot;&quot;) #Posts a comment on the user's profile. Requires logging in. Returns the info of the posted commented.user.reply_comment(&quot;comment content&quot;, parent_id=&quot;parent_id&quot;) #Replies to a specified profile comment. Requires logging in. Returns the info of the posted commented.user.delete_comment(comment_id=&quot;comment_id&quot;)user.report_comment(comment_id=&quot;comment_id&quot;)user.toggle_commenting()user.set_bio(text) #Changes the 'About me' of the useruser.set_wiwo(text)user.set_featured(&quot;project_id&quot;, label=&quot;&quot;) #Changes the featured projectuser.stats() #Returns the user's statistics as dict. Fetched from ScratchDBuser.ranks() #Returns the user's ranks as dict. Fetched from ScratchDBuser.followers_over_time(segment=1, range=30) #Fetched from ScratchDBuser.forum_posts(page=0, order=&quot;newest&quot;) #Returns a list of scratch3.ForumPost objects. New in v0.5.5. Fetched from ScratchDBuser.forum_counts() #Returns the amount of posts a user has written different forums as dict. Fetched from ScratchDBuser.forum_counts_over_time() #Fetched from ScratchDBuser.forum_signature() #Fetched from ScratchDBuser.forum_signature_history() #A change log for the user's forum history. Fetched from ScratchDBuser.ocular_status() #Returns information about the user's ocular status, like the status text, the color, and the time of the last update.```# Projects  `scratch3.Project`**Get a project:**```pythonproject = session.connect_project(&quot;project_id&quot;)```You can also get projects without logging in: (but then you can't use any functions that require a login, and you can't get your unshared projects)```pythonproject = scratch3.get_project(&quot;project_id&quot;)```**Attributes:**```pythonproject.id  #Returns the project idproject.url  #Returns the project urlproject.author  #Returns the username of the authorproject.comments_allowed  #Returns True if comments are enabledproject.instructionsproject.notes  #Returns the 'Notes and Credits' sectionproject.created  #Returns the date of the project creationproject.last_modified  #Returns the date when the project was modified the last timeproject.share_dateproject.thumbnail_urlproject.remix_parentproject.remix_rootproject.loves  #Returns the love countproject.favorites #Returns the project's favorite countproject.remix_count  #Returns the number of remixesproject.views  #Returns the view countproject.project_token# ----- ----- #project.update()  #Updates the above data```**Functions:**```pythonproject.get_author()  #Returns the author as scratch3.User objectproject.ranks()  #Returns the project's ranks. Fetched from ScratchDBproject.moderation_status() #Returns the project's moderation status (either &quot;safe&quot; or &quot;notsafe&quot; (nfe)). New in v0.5.4. Fetched from jeffalo.netproject.comments(limit=40, offset=0)  #Fetches all project comments except for comment repliesproject.get_comment_replies(comment_id=&quot;comment_id&quot;, limit=40, offset=0)  #Fetches the replies to a specific commentproject.post_comment(content=&quot;comment content&quot;, parent_id=&quot;&quot;, commentee_id=&quot;&quot;)  #Returns the info of the posted commented.project.reply_comment(content=&quot;comment content&quot;, parent_id=&quot;parent_id&quot;)  #Returns the info of the posted commented.project.delete_comment(comment_id=&quot;comment_id&quot;)project.report_comment(comment_id=&quot;comment_id&quot;)project.love()project.unlove()project.favorite()project.unfavorite()project.post_view()project.set_title(&quot;new title&quot;)project.set_instructions(&quot;new instructions&quot;)project.set_notes(&quot;new notes and credits&quot;)  #Sets the notes and credits section of the projectproject.set_thumbnail(file=&quot;filename.png&quot;) #File must be .png and fit Scratch's thumbnail guidelinesproject.share()project.unshare()project.turn_off_commenting()project.turn_on_commenting()project.toggle_commenting()project.remixes(limit=None, offset=0) #Returns the remixes as list of scratch3.Projectproject.studios(limit=None, offset=0) #Returns the studios the project is in as list of dictsproject.download(filename=&quot;project_name.sb3&quot;, dir=&quot;&quot;) #Downloads the project to your computer. The downloaded file will only work in the online editorproject.get_raw_json() #Returns the json of the project content as dictproject.get_creator_agent() #Returns the user-agent of the user who created the project (with information about their browser and OS)```# Unshared projects  `scratch3.PartialProject`When connecting / getting a project that you can't access, a `PartialProject` object is returned instead.**Most attributes and most functions don't work for such projects. However, these still work:**```pythonproject.remixes(limit=None, offset=0)```# Studios  `scratch3.Studio`(New in v0.5.0)**Get a studio:**```pythonstudio = session.connect_studio(&quot;studio_id&quot;)```You can also get studios without logging in: (But then you can't use any functions that require a login, like studio.follow(), studio.add_project(), ...)```pythonstudio = scratch3.get_studio(&quot;studio_id&quot;)```**Attributes:**```pythonstudio.idstudio.titlestudio.descriptionstudio.host_id #The user id of the studio hoststudio.open_to_all #Whether everyone is allowed to add projectsstudio.comments_allowedstudio.image_urlstudio.createdstudio.modifiedstudio.follower_countstudio.manager_countstudio.project_count# ----- ----- #studio.update()  #Updates the above data```**Functions:**```pythonstudio.follow()studio.unfollow()studio.comments(limit=40, offset=0)  #Fetches all project comments except for comment repliesstudio.get_comment_replies(comment_id=&quot;comment_id&quot;, limit=40, offset=0)  #Fetches the replies to a specific commentstudio.post_comment(content=&quot;comment content&quot;, parent_id=&quot;&quot;, commentee_id=&quot;&quot;)  #Returns the info of the posted commented.studio.reply_comment(content=&quot;comment content&quot;, parent_id=&quot;parent_id&quot;)  #Returns the info of the posted commented.studio.add_project(&quot;project_id&quot;)studio.remove_project(&quot;project_id&quot;)studio.set_description(&quot;new description&quot;)studio.set_title(&quot;new title&quot;)studio.open_projects() #Allows everyone to add projectsstudio.close_projects()studio.turn_off_commenting() # New in v1.0.1studio.turn_on_commenting()studio.toggle_commenting()studio.invite_curator(&quot;username&quot;)studio.promote_curator(&quot;username&quot;)studio.remove_curator(&quot;username&quot;)studio.leave() #Removes yourself from the studiostudio.projects(limit=40, offset=0)studio.curators(limit=24, offset=0) #Returns the curators as list of users (scratch3.User)studio.managers(limit=24, offset=0)studio.activity(limit=24, offset=0) #New in v1.0.1```# Search / Explore pageDoesn't require a session**Search:**```pythonsession.search_projects(query=&quot;query&quot;, mode=&quot;trending&quot;, language=&quot;en&quot;, limit=40, offset=0)scratch3.search_projects(query=&quot;query&quot;, mode=&quot;trending&quot;, language=&quot;en&quot;, limit=40, offset=0) #Doesn't require logging inscratch3.search_studios(query=&quot;query&quot;, mode=&quot;trending&quot;, language=&quot;en&quot;, limit=40, offset=0)session.search_posts(query=&quot;query&quot;, order=&quot;newest&quot;, page=0) #Searches forum posts. Returns a list of scratch3.ForumPost objectsscratch3.search_posts(query=&quot;query&quot;, order=&quot;newest&quot;, page=0) #Doesn't require logging in```**Get the explore page:**```pythonsession.explore_projects(query=&quot;*&quot;, mode=&quot;trending&quot;, language=&quot;en&quot;, limit=40, offset=0)scratch3.explore_projects(query=&quot;*&quot;, mode=&quot;trending&quot;, language=&quot;en&quot;, limit=40, offset=0) #Doesn't require logging inscratch3.explore_studios(query=&quot;*&quot;, mode=&quot;trending&quot;, language=&quot;en&quot;, limit=40, offset=0)```# Messages / My stuff page```pythonsession.mystuff_projects(&quot;all&quot;, page=1, sort_by=&quot;&quot;) #Returns the projects from your &quot;My stuff&quot; page as listsession.messages(limit=40, offset=0) #Returns your messages as dictsession.clear_messages() #Marks your messages as readsession.get_message_count() #Returns your message count```# Frontpage```pythonscratch3.get_news(limit=10, offset=0) #Returns the news from the Scratch front page as listscratch3.featured_projects() #Returns the featured projects from the Scratch homepage as listscratch3.featured_studios()scratch3.top_loved()scratch3.top_remixed()scratch3.newest_projects() #Returns a list with the newest Scratch projects. This list is not present on the Scratch home page, but the API still provides it.scratch3.design_studio_projects()session.get_feed(limit=20, offset=0) #Returns your &quot;What's happening&quot; section from the Scratch front page as listsession.loved_by_followed_users(limit=40, offset=0) #Returns the projects loved by users you are following as list```# Forum topics `scratch3.ForumTopic`(New in v0.5.5)All of this data is fetched from ScratchDB v3, therefore it may be slighty off.**Get a forum topic:**```pythontopic = session.connect_topic(&quot;topic_id&quot;)```You can also get topics without logging in:```pythontopic = scratch3.get_topic(&quot;topic_id&quot;)```**Get a list of the topics in a category:**```pythontopic_list = session.connect_topic_list(&quot;category_name&quot;, page=0)```You can also do this without logging in:```pythontopic_list = scratch3.get_topic_list(&quot;category_name&quot;, page=0)```**Attributes:**```pythontopic.titletopic.categorytopic.closedtopic.deletedtopic.post_count# ----- ----- #topic.update()  #Updates the above data```**Functions:**```pythontopic.posts(page=0, order=&quot;oldest&quot;) #Returns the topic posts as list of scratch3.ForumPost objects. Possible parameters for &quot;order&quot; are &quot;oldest&quot; and &quot;newest&quot;topic.first_post() #Returns the first topic post as scratch3.ForumPost objecttopic.follow()topic.unfollow()topic.post_count_by_user(&quot;username&quot;)topic.activity() #Returns an activity / change log for the topic```To prevent spam, adding posts to topics is not a scratchattach feature and never will be.# Forum posts `scratch3.ForumPost`(New in v0.5.5)All of this data is fetched from ScratchDB v3, therefore it may be slighty off.**Get a forum post:**```pythonpost = session.connect_post(&quot;post_id&quot;)```You can also get posts without logging in:```pythonpost = scratch3.get_post(&quot;post_id&quot;)```**Search for forum posts:**```pythonpost_list = session.search_posts(query=&quot;query&quot;, order=&quot;newest&quot;, page=0) #Returns a list of scratch3.ForumPost objects```You can also get posts without logging in:```pythonpost_list = scratch3.search_posts(query=&quot;query&quot;, order=&quot;newest&quot;, page=0) #Returns a list of scratch3.ForumPost objects```**Attributes:**```pythonpost.idpost.authorpost.posted #The date the post was madepost.edited #The date of the most recent post edit. If the post wasn't edited this is Nonepost.edited_by #The user who made the most recent edit. If the post wasn't edited this is Nonepost.deleted #Whether the post was deletedpost.html_content #Returns the content as HTMLpost.bb_content #Returns the content as BBCodepost.topic_id #The id of the topic the post is inpost.topic_name #The name of the topic the post is inpost.topic_category #The name of the category the post topic is in# ----- ----- #post.update()  #Updates the above data```**Functions:**```pythonpost.get_topic() #Returns the topic the post is in as scratch3.ForumTopic objectpost.get_author() #Returns the post author as scratch3.User objectpost.edit(new_content) #Requires you to be the post author.post.ocular_reactions()```# Site stats and health```pythonscratch3.total_site_stats() #Returns the total project count, user count, comment count and other total countsscratch3.monthly_site_traffic() #Returns last month's site trafficscratch3.country_counts() #Returns the amount of Scratch users in each countryscratch3.age_distribution() #Returns how many Scratchers were 1,2,3,4,5,6,... years old when they created their accountscratch3.get_health() #Returns Scratch's health data```# Backpack```pythonsession.backpack(limit=20, offset=0) #Returns the contents of your backpack as dictionarysession.delete_from_backpack(&quot;asset id&quot;) #Deletes an asset from your backpack```# Get your session idThis section explains how to get your Scratch session id from your browser cookies.1. Open scratch.mit.edu in your browser2. Click the ðŸ”’ icon in the URL bar, then click &quot;Cookies&quot;3. Then find a cookie called `scratchsessionid` (in the &quot;scratch.mit.edu&quot; Â» &quot;Cookies&quot; folder). The content of this cookie is your Scratch session id![](https://scratch3-assets.1tim.repl.co/template/cookies.png)# Contributors- Allmost all code by TimMcCool.- See the GitHub repository for full list of contributors.- Create a pull request to contribute code yourself.# SupportIf you need help with your code, leave a comment on TimMcCool's Scratchprofile: https://scratch.mit.edu/users/TimMcCool/</longdescription>
</pkgmetadata>