<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://img.shields.io/pypi/v/cognitopy.svg?style=plastic)](https://pypi.org/project/cognitopy/)![PyPI - Downloads](https://img.shields.io/pypi/dm/cognitopy?style=plastic)# cognitopyThis is a package that will allow you to use the aws Cognito technology, so for now we are going to allow the management of users, authentication and creation of groups by Roles.  The potential of this package is the ease of management of all these functionalities and only creating an object with 3 parameters.## Installation```bashpip install cognitopy```## Variables for using the admin functionsThe cognito admin functions require that we have the aws, access key and secret access key credentials defined as system environment variables.```pythonimport osos.environ[&quot;AWS_ACCESS_KEY_ID&quot;] = 'XXXXXXXXXXXXXXXXXXXXXXXX'os.environ[&quot;AWS_SECRET_ACCESS_KEY&quot;] = 'XXXXXXXXXXXXXXXXXXXXXXXX'```## UsageTo define the cognitopy object it is necessary to give it the userpool_id, the client_id and the client_secret information.  The secret_hash parameter is set to False by default and indicates that for requests it is necessary to provide the secret_hash.```pythonfrom cognitopy import CognitoPyCOGNITO_USERPOOL_ID = 'XXX-XXX-XXXXXX'COGNITO_APP_CLIENT_ID = 'XXXXXXXXXXXXXXXXXXXXXXXX'COGNITO_APP_CLIENTE_SECRET = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'cognitopy = CognitoPy(    userpool_id=COGNITO_USERPOOL_ID, client_id=COGNITO_APP_CLIENT_ID, client_secret=COGNITO_APP_CLIENTE_SECRET,    secret_hash=True)```Now I will explain the different functions that we can use in this version, with an example.  All these examples are in the directory example.### Using context managerIt will allow us to use the cognitopy object in a context manager, so that we do not have to worry about closing the connection.```pythonwith CognitoPy(userpool_id=COGNITO_USERPOOL_ID, client_id=COGNITO_APP_CLIENT_ID,               client_secret=COGNITO_APP_CLIENTE_SECRET) as cognito:    cognito.register(username=&quot;XXXXX@mail.to&quot;, password=&quot;XXXXXXX8&quot;, user_attributes={})```### Register a new userIt will register a user in our cognito service and send us a confirmation message.```pythonid_user = cognito.register(username='XXXXX@mail.to', password='XXXXXXX8', user_attributes={})print(id_user)```### Confirm a new userIt is responsible for confirming the user from the number received by mail.```pythoncognito.confirm_register(username='XXXXX@mail.to', confirmation_code='820850')```### Resend confirm codeIt allows us to receive a confirmation code again, when we have previously requested to change password or register.```pythoncognito.resend_confirmation_code(username='XXXXX@mail.to')```### Login a userIt will return the access token and refresh token of a confirmed user.```pythontokens = cognito.login(username='XXXXX@mail.to', password='XXXXXXX')print(tokens['access_token'], tokens['refresh_token'])```### Refresh access tokenIt will renew the user's access token.```pythonaccess_token = cognito.renew_access_token(access_token='XXXXXXXXX', refresh_token='XXXXXXXXX')print(access_token)```### Check if access token is expiredCheck if the access token has expired.```pythonis_expired = cognito.check_expired_token(access_token='XXXXXXXXX')print(is_expired)```### Forgot passwordAllows us to change our password by sending us a confirmation code.```pythoncognito.initiate_forgot_password(username='XXXXX@mail.to')```### Confirm forgot passwordChange the password of a user from the confirmation code received.```pythoncognito.confirm_forgot_password(username='XXXXX@mail.to', confirmation_code='YYYYY', password='XXXXXXX')```### Delete userDelete the user from his access token.```pythoncognito.delete_user(access_token='XXXXXXXXX')```### Change passwordChange the password from your access token.```pythoncognito.change_password(access_token='XXXXXXXXX', previous_password='XXXXXXX', proposed_password=&quot;XXXXXXX&quot;)```### Get user informationWe obtain basic user information from the user's access token.```pythondata_user = cognito.get_info_user_by_token(access_token='XXXXXXXXX')print(data_user['username'], data_user['groups'])```### Admin delete userWe remove a user from our service from the administrator credentials.```pythoncognito.admin_delete_user(username='XXXXX@mail.to')```### Admin create groupWe create a group from our service from the administrator credentials.precedence: A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values.role_arn: The role Amazon Resource Name (ARN) for the group.```pythoncognito.admin_create_group(group_name='test_group', description='test group', precedence=1)```### Admin delete groupWe remove a group from our service from the administrator credentials.```pythoncognito.admin_delete_group(group_name='test_group')```### Admin add user to groupWe add a user to group from our service from the administrator credentials.```pythoncognito.admin_add_user_to_group(username='XXXXX@mail.to', group_name='test_group')```### Admin remove user from groupWe remove a user to group from our service from the administrator credentials.```pythoncognito.admin_remove_user_from_group(username='XXXXX@mail.to', group_name='test_group')```### Admin confirm user registrationWe confirm a user register from the administrator credentials.```pythoncognito.admin_confirm_register(username=&quot;XXXXX@mail.to&quot;)```### Admin create userWe create a user from the administrator credentials.  message_action = MessageAction.SUPPRESS | MessageAction.RESEND  Set to RESEND to resend the invitation message to a user that already exists and reset the expiration limit on the userâ€™s account. Set to SUPPRESS to suppress sending the message.  desired_delivery = [DesiredDelivery.EMAIL | DesiredDelivery.SMS] or [DesiredDelivery.EMAIL, DesiredDelivery.SMS]  Specify EMAIL if email will be used to send the welcome message. Specify SMS if the phone number will be used.  optional temporary_password  ```pythoncognito.admin_create_user(username=&quot;XXXXX@mail.to&quot;, force_alias=True, user_attributes={},                          message_action=MessageAction.SUPPRESS, desired_delivery=[DesiredDelivery.EMAIL],                          temporary_password=&quot;XXXXXXX&quot;)```### Admin disable userWe disable a user from the administrator credentials.```pythoncognito.admin_disable_user(username=&quot;XXXXX@mail.to&quot;)```### Admin enable userWe enabled a user from the administrator credentials.```pythoncognito.admin_enable_user(username=&quot;XXXXX@mail.to&quot;)```### Admin get userWe get info about a user from the administrator credentials.```pythondata_user = cognito.admin_get_user(username=&quot;XXXXX@mail.to&quot;)print(data_user)```### Admin loginWe login a user from the administrator credentials.```pythontokens = cognito.admin_login(username=&quot;XXXXX@mail.to&quot;, password=&quot;XXXXXXX&quot;)print(tokens)```### Admin renew access tokenWe renew access token a user from the administrator credentials.```pythontoken = cognito.admin_renew_access_token(access_token=&quot;XXXXX&quot;, refresh_token=&quot;XXXXXXX&quot;)print(token)```### Admin list groups for userWe list groups for user from the administrator credentials.```pythongroups = cognito.admin_list_groups_for_user(username=&quot;XXXXX@mail.to&quot;, limit=10)print(groups)groups = cognito.admin_list_groups_for_user(username=&quot;XXXXX@mail.to&quot;, limit=10, next_token=groups[&quot;NextToken&quot;])print(groups)```### Admin reset passwordWe reset password from the administrator credentials.  After applying this function it will be necessary to launch the initiate_forgot_password function, since the user's password will be disabled.```pythoncognito.admin_reset_password(username=&quot;XXXXX@mail.to&quot;)```### Resolve challenge sms mfaWe resolve challenge sms mfa.```pythontokens = cognito.resolve_challenge_challenge_sms_mfa(username=&quot;XXXXX@mail.to&quot;, session=&quot;XXXXXX&quot;, sms_mfa_code=&quot;XXXXXX&quot;)print(tokens)```### Resolve challenge new password requiredWe resolve challenge new password required.```pythontokens = cognito.resolve_challenge_new_password(username=&quot;XXXXX@mail.to&quot;, session=&quot;XXXXXX&quot;, new_password=&quot;XXXXXX&quot;)print(tokens)```</longdescription>
</pkgmetadata>