<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status for the Core backend](https://github.com/xdslproject/xdsl/actions/workflows/ci-core.yml/badge.svg)](https://github.com/xdslproject/xdsl/actions/workflows/ci-core.yml?query=workflow%3A%22CI+-+Python+application%22++)[![PyPI version](https://badge.fury.io/py/xdsl.svg)](https://badge.fury.io/py/xdsl)[![Code Coverage](https://codecov.io/gh/xdslproject/xdsl/main/graph/badge.svg)](https://codecov.io/gh/xdslproject/xdsl)[![Zulip Status](https://img.shields.io/badge/chat-on%20zulip-%2336C5F0)](https://xdsl.zulipchat.com)# xDSL: A Python-native SSA Compiler Framework[xDSL](http://www.xdsl.dev) is a Python-native compiler framework built aroundSSA-based intermediate representations (IRs). Users of xDSL build a compiler byassembling predefined domain-specific IRs and, optionally, defining their own custom IRs. xDSL uses multi-level IRs, meaningthat during the compilation process, a program will be lowered through severalof these IRs. This allows the implementation of abstraction-specificoptimization passes, similar to the structure of common DSL compilers (such asDevito, Psyclone, and Firedrake). To simplify the writing of these passes, xDSLuses a uniform data structure based on SSA, basic blocks, and regions, whichadditionally enables the writing of generic passes.The design of xDSL is influenced by [MLIR](https://mlir.llvm.org/), a compilerframework developed in C++, that is part of the LLVM project. An inherentadvantage of a close design is the easy interaction between the two frameworks,making it possible to translate abstractions and programs back and forth. Thisresults in one big SSA-based abstraction ecosystem that can be worked withthrough Python, making analysis through simple scripting languages possible.Additionally, xDSL can leverage MLIR's code generation and low-leveloptimization capabilities.- [Installation](#installation)- [Using xDSL](#using-xdsl)- [xDSL Developer Setup](#xdsl-developer-setup)  - [Developer Installation](#developer-installation)  - [Testing](#testing)  - [Formatting](#formatting)## InstallationTo use xDSL as part of a larger project for developing your own compiler,just install [xDSL via pip](https://pypi.org/project/xdsl/):```bashpip install xdsl```## Using xDSLTo use xDSL we recommend following the [xDSL Developer Setup](#xdsl-developer-setup)to clone the repository including the notebooks.The following tutorials will present xDSL basic concepts, how touse its irdl dialect to define new dialects in a user-friendly way, and how towork with both xDSL and MLIR.- [A simple introduction](https://xdsl.dev/xdsl/retro/notebooks/?path=tutorial.ipynb)- [A DSL for defining new IRs](https://xdsl.dev/xdsl/retro/notebooks/?path=irdl.ipynb)- [Connecting xDSL with MLIR](docs/mlir_interoperation.md)## xDSL Developer SetupTo contribute to the development of xDSL follow the subsequent steps.### Developer Installation```bashgit clone https://github.com/xdslproject/xdsl.gitpip install --editable .# Optional installation of extra requirementspip install --requirement requirements-optional.txt```### TestingThe xDSL project uses pytest unit tests and LLVM-style filecheck tests. They canbe executed from the root directory:```bash# Executes pytests which are located in tests/pytest# Executes filecheck testslit tests/filecheck```### FormattingAll python code used in xDSL uses [yapf](https://github.com/google/yapf) toformat the code in a uniform manner.To automate the formatting within vim, one can usehttps://github.com/vim-autoformat/vim-autoformat and trigger a `:Autoformat` onsave.</longdescription>
</pkgmetadata>