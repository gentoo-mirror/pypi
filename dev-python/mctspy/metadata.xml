<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## mctspy : python implementation of Monte Carlo Tree Search algorithmBasic python implementation of [Monte Carlo Tree Search](https://int8.io/monte-carlo-tree-search-beginners-guide) (MCTS) intended to run on small game trees. ### Installation```pip3 install mctspy``` ### Running tic-tac-toe example to run tic-tac-toe example:```pythonimport numpy as npfrom mctspy.tree.nodes import TwoPlayersGameMonteCarloTreeSearchNodefrom mctspy.tree.search import MonteCarloTreeSearchfrom mctspy.games.examples.tictactoe import TicTacToeGameStatestate = np.zeros((3,3))initial_board_state = TicTacToeGameState(state = state, next_to_move=1)root = TwoPlayersGameMonteCarloTreeSearchNode(state = initial_board_state)mcts = MonteCarloTreeSearch(root)best_node = mcts.best_action(10000)```### Running MCTS for your own 2 players zero-sum game If you want to apply MCTS for your own game, its state implementation should derive from  `mmctspy.games.common.TwoPlayersGameState` (lookup `mctspy.games.examples.tictactoe.TicTacToeGameState` for inspiration)</longdescription>
</pkgmetadata>