<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==========python-osc==========Open Sound Control server and client implementations in **pure python** (3.5+)... image:: https://github.com/attwad/python-osc/actions/workflows/python-test.yml/badge.svg    :target: https://github.com/attwad/python-osc/actions/workflows/python-test.ymlCurrent status==============This library was developed following the`OpenSoundControl Specification 1.0 &lt;https://opensoundcontrol.stanford.edu/spec-1_0.html&gt;`_and is currently in a stable state.Features========* UDP blocking/threading/forking/asyncio server implementations* UDP client* int, int64, float, string, double, MIDI, timestamps, blob OSC arguments* simple OSC address&lt;-&gt;callback matching system* extensive unit test coverage* basic client and server examplesDocumentation=============Available at https://python-osc.readthedocs.io/.Installation============python-osc is a pure python library that has no external dependencies,to install it just use pip (prefered):.. image:: https://img.shields.io/pypi/v/python-osc.svg    :target: https://pypi.python.org/pypi/python-osc.. code-block:: bash    $ pip install python-oscor from the raw sources for the development version:.. code-block:: bash    $ python setup.py test    $ python setup.py installExamples========Simple client-------------.. code-block:: python  &quot;&quot;&quot;Small example OSC client  This program sends 10 random values between 0.0 and 1.0 to the /filter address,  waiting for 1 seconds between each value.  &quot;&quot;&quot;  import argparse  import random  import time  from pythonosc import udp_client  if __name__ == &quot;__main__&quot;:    parser = argparse.ArgumentParser()    parser.add_argument(&quot;--ip&quot;, default=&quot;127.0.0.1&quot;,        help=&quot;The ip of the OSC server&quot;)    parser.add_argument(&quot;--port&quot;, type=int, default=5005,        help=&quot;The port the OSC server is listening on&quot;)    args = parser.parse_args()    client = udp_client.SimpleUDPClient(args.ip, args.port)    for x in range(10):      client.send_message(&quot;/filter&quot;, random.random())      time.sleep(1)Simple server-------------.. code-block:: python  &quot;&quot;&quot;Small example OSC server  This program listens to several addresses, and prints some information about  received packets.  &quot;&quot;&quot;  import argparse  import math  from pythonosc.dispatcher import Dispatcher  from pythonosc import osc_server  def print_volume_handler(unused_addr, args, volume):    print(&quot;[{0}] ~ {1}&quot;.format(args[0], volume))  def print_compute_handler(unused_addr, args, volume):    try:      print(&quot;[{0}] ~ {1}&quot;.format(args[0], args[1](volume)))    except ValueError: pass  if __name__ == &quot;__main__&quot;:    parser = argparse.ArgumentParser()    parser.add_argument(&quot;--ip&quot;,        default=&quot;127.0.0.1&quot;, help=&quot;The ip to listen on&quot;)    parser.add_argument(&quot;--port&quot;,        type=int, default=5005, help=&quot;The port to listen on&quot;)    args = parser.parse_args()    dispatcher = Dispatcher()    dispatcher.map(&quot;/filter&quot;, print)    dispatcher.map(&quot;/volume&quot;, print_volume_handler, &quot;Volume&quot;)    dispatcher.map(&quot;/logvolume&quot;, print_compute_handler, &quot;Log volume&quot;, math.log)    server = osc_server.ThreadingOSCUDPServer(        (args.ip, args.port), dispatcher)    print(&quot;Serving on {}&quot;.format(server.server_address))    server.serve_forever()Building bundles----------------.. code-block:: python    from pythonosc import osc_bundle_builder    from pythonosc import osc_message_builder    bundle = osc_bundle_builder.OscBundleBuilder(        osc_bundle_builder.IMMEDIATELY)    msg = osc_message_builder.OscMessageBuilder(address=&quot;/SYNC&quot;)    msg.add_arg(4.0)    # Add 4 messages in the bundle, each with more arguments.    bundle.add_content(msg.build())    msg.add_arg(2)    bundle.add_content(msg.build())    msg.add_arg(&quot;value&quot;)    bundle.add_content(msg.build())    msg.add_arg(b&quot;\x01\x02\x03&quot;)    bundle.add_content(msg.build())    sub_bundle = bundle.build()    # Now add the same bundle inside itself.    bundle.add_content(sub_bundle)    # The bundle has 5 elements in total now.    bundle = bundle.build()    # You can now send it via a client as described in other examples.License?========Unlicensed, do what you want with it. (http://unlicense.org)</longdescription>
</pkgmetadata>