<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Scalesec GCP Workload Identity Federation[![.github/workflows/python-linter.yml](https://github.com/ScaleSec/gcp-workload-identity-federation/actions/workflows/python-linter.yml/badge.svg)](https://github.com/ScaleSec/gcp-workload-identity-federation/actions/workflows/python-linter.yml) [![CodeQL](https://github.com/ScaleSec/gcp-workload-identity-federation/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/ScaleSec/gcp-workload-identity-federation/actions/workflows/codeql-analysis.yml)This package provides a python module to federate access from AWS to GCP using Workload Identity. View our [blog](https://scalesec.com/blog/access-gcp-from-aws-using-workload-identity-federation/) for additional details.## Prerequisites* A GCP service account (environment variable &quot;GCP_SERVICE_ACCOUNT_EMAIL&quot;)* An AWS IAM role (environment variable &quot;AWS_ROLE_NAME&quot;)* AWS credentials (environment variable &quot;AWS_PROFILE&quot;)* python3.x## Quick start```bash# Create venv and install packagemake setupsource .venv/bin/activatepip install scalesec-gcp-workload-identity``````bash# Rename example .envmv .env.example .env``````bash# Enter your own environment variablescat &lt;&lt;EOF &gt;.env# GCPexport GCP_PROJECT_NUMBER=export GCP_PROJECT_ID=# gcp workload identity pool idexport GCP_WORKLOAD_ID=export GCP_WORKLOAD_PROVIDER=export GCP_SERVICE_ACCOUNT_EMAIL=# awsexport AWS_REGION=export AWS_ACCOUNT_ID=export AWS_ROLE_NAME=# Non-required varsexport TOKEN_LIFETIME=export TOKEN_SCOPES=EOF``````bash# Source the environment variables so they are exposedsource .env``````bash# set up GCP credentialsgcloud auth login# Configure the default projectgcloud config set project $GCP_PROJECT_ID# Enable the STS service in the projectgcloud services enable sts.googleapis.com# Enable the IAM credentials servicegcloud services enable iamcredentials.googleapis.com# The following commands use the .env values# Create the GCP Workload Identity Poolgcloud beta iam workload-identity-pools create &quot;$GCP_WORKLOAD_ID&quot; \  --location=&quot;global&quot; \  --description=&quot;$GCP_WORKLOAD_ID&quot; \  --display-name=&quot;$GCP_WORKLOAD_ID&quot;# Create the GCP Workload Identity AWS Providergcloud beta iam workload-identity-pools providers create-aws &quot;$GCP_WORKLOAD_PROVIDER&quot; \  --location=&quot;global&quot; \  --workload-identity-pool=&quot;$GCP_WORKLOAD_ID&quot; \  --account-id=&quot;$AWS_ACCOUNT_ID&quot;# Add the appropriate IAM binding to a pre-existing service accountgcloud iam service-accounts add-iam-policy-binding $GCP_SERVICE_ACCOUNT_EMAIL \  --role roles/iam.workloadIdentityUser \  --member &quot;principalSet://iam.googleapis.com/projects/$GCP_PROJECT_NUMBER/locations/global/workloadIdentityPools/$GCP_WORKLOAD_ID/attribute.aws_role/arn:aws:sts::${AWS_ACCOUNT_ID}:assumed-role/$AWS_ROLE_NAME&quot;```### Using the moduleSet your AWS credentials```bashexport AWS_PROFILE=xyz```Getting a Service Account token is now simple:```pythonfrom scalesec_gcp_workload_identity.main import TokenServicefrom os import getenv# The arguments to TokenService can be ingested# from the environment if they were exported above.# Otherwise, pass in your own argumentstoken_service = TokenService(  gcp_project_number=getenv('GCP_PROJECT_NUMBER'),  gcp_workload_id=getenv('GCP_WORKLOAD_ID'),  gcp_workload_provider=getenv('GCP_WORKLOAD_PROVIDER'),  gcp_service_account_email=getenv('GCP_SERVICE_ACCOUNT_EMAIL'),  aws_account_id=getenv('AWS_ACCOUNT_ID'),  aws_role_name=getenv('AWS_ROLE_NAME'),  aws_region=getenv('AWS_REGION'),  gcp_token_lifetime=getenv('TOKEN_LIFETIME'), # Not required  gcp_token_scopes=getenv('TOKEN_SCOPES') # Not required)sa_token, expiry_date = token_service.get_token()```### Token expirationThe default expiration for a service account token is 1h in GCP. This behavior can be changed by overriding the environment variable `TOKEN_LIFETIME` in the `.env` file. By default, GCP does not allow tokens to have an expiry over 1 hour and an organization policy __must__ be updated for this change to take affect. The organization policy is called `iam.allowServiceAccountCredentialLifetimeExtension` and it accepts a list of service accounts that are allowed to have an &gt; 1 hr token.```bash# To configure the organization policygcloud org-policies set-policy policy.yaml# An example policy.json:name: projects/1234567890/policies/iam.allowServiceAccountCredentialLifetimeExtensionspec:  etag: BwXBMNmIrQg=  rules:  - values:      allowedValues:      - your-sa@yourproject.iam.gserviceaccount.com```#### Token scopesThe default scope for the service account token is `https://www.googleapis.com/auth/cloud-platform`. This behaviour can be overridden to enable a different set of scopes by using the environment variable `TOKEN_SCOPES` in the `.env` file with a comma-separated list of GCP scopes.## Testing```shell# make a venvmake setup```Edit `.env` with your values```shell# install depsmake dev# run pytestmake test```## Local LintingTo test that your code will pass the lint and code quality GitHub action:* Clone the repository locally* Make your updates* From the root of the repository, execute:```bashpylint --rcfile .github/workflows/configs/.pylintrc scalesec_gcp_workload_identity tests examples```## ExamplesWe have provided [examples](./examples) on how to use the service account access token generated by this module. Access tokens are mainly used via an API call or using `curl` on the CLI.## Restricting Identity Pool ProvidersBy default, any GCP user with the `roles/iam.workloadIdentityPoolAdmin` or `roles/owner` role is able to create a workload identity pool in your GCP organization. There are two organization policies available to help you lockdown which outside providers can have pools in your organization.* `constraints/iam.workloadIdentityPoolProviders ` - Accepts a list of URIs such as `https://sts.amazonaws.com` or `https://sts.windows.net/$AZURE_TENANT_ID`. For example:```bash# Allows all AWS accounts but no Azure or OIDCgcloud beta resource-manager org-policies allow constraints/iam.workloadIdentityPoolProviders \     https://sts.amazonaws.com --organization=$ORG_ID# Allows only a specific Azure tenant but no AWS or OIDCgcloud beta resource-manager org-policies allow constraints/iam.workloadIdentityPoolProviders \     https://sts.windows.net/$AZURE_TENANT_ID --organization=$ORG_ID```* `constraints/iam.workloadIdentityPoolAwsAccounts` - Specifically focused on AWS, this constraint accepts a list of AWS account IDs. If this orgnanization policy is used, `constraints/iam.workloadIdentityPoolProviders` must either allow `https://sts.amazonaws.com` or be set to default (allow all). For example:```bash# Only allows a specific AWS accountgcloud beta resource-manager org-policies allow constraints/iam.workloadIdentityPoolAwsAccounts \    $AWS_ACCOUNT_ID --organization=$ORG_ID```## Upload to PyPiSet your token/credentials in ~/.pypirc`make dist VERSION=1.x.x`## FeedbackFeedback is welcome and encouraged via a GitHub issue. Please open an issue for any bugs, feature requests, or general improvements you would like to see. Thank you in advance!</longdescription>
</pkgmetadata>