<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A python module for currencies. The module compiles a dictionary ofcurrency objects containing information useful in financial analysis.Not all currencies in the world are supported yet. You are welcome tojoin and add more.:Package: |version| |license| |pyversions| |status| |downloads|:CI: |master-build| |coverage-master|:Dowloads: https://pypi.org/project/ccy/:Source: https://github.com/quantmind/ccy.. |version| image:: https://badge.fury.io/py/ccy.svg  :target: https://badge.fury.io/py/ccy.. |pyversions| image:: https://img.shields.io/pypi/pyversions/ccy.svg  :target: https://pypi.org/project/ccy/.. |license| image:: https://img.shields.io/pypi/l/ccy.svg  :target: https://pypi.org/project/ccy/.. |status| image:: https://img.shields.io/pypi/status/ccy.svg  :target: https://pypi.org/project/ccy/.. |downloads| image:: https://img.shields.io/pypi/dd/ccy.svg  :target: https://pypi.org/project/ccy/.. |master-build| image:: https://github.com/quantmind/ccy/workflows/build/badge.svg  :target: https://github.com/quantmind/ccy/actions?query=workflow%3Abuild.. |coverage-master| image:: https://codecov.io/gh/quantmind/ccy/branch/master/graph/badge.svg  :target: https://codecov.io/gh/quantmind/ccy.. contents::    :local:Currency object======================To use it::    &gt;&gt;&gt; import ccy    &gt;&gt;&gt; c = ccy.currency('aud')    &gt;&gt;&gt; c.printinfo()    code: AUD    twoletterscode: AD    rounding: 4    default_country: AU    isonumber: 036    order: 3    name: Australian Dollar    &gt;&gt;&gt; c.as_cross()    'AUDUSD'    &gt;&gt;&gt; c.as_cross('/')    'AUD/USD'a currency object has the following properties:* *code*: the `ISO 4217`_ code.* *twoletterscode*: two letter code (can't remeber the ISO number). Very useful for financial data providers such as Bloomberg.* *default_country*: the default `ISO 3166-1 alpha-2`_ country code for the currency.* *isonumber*: the ISO 4217 number.* *name*: the name of the currency.* *order*: default ordering in currency pairs (more of this below).* *rounding*: number of decimal placesCurrency Crosses~~~~~~~~~~~~~~~~~~~~~~~~~~You can create currency pairs by using the ``currency_pair`` function::    &gt;&gt;&gt; import ccy    &gt;&gt;&gt; p = ccy.currency_pair('eurusd')    &gt;&gt;&gt; p    ccy_pair: EURUSD    &gt;&gt;&gt; p.mkt()  # market convention pair    ccy_pair: EURUSD    &gt;&gt;&gt; p = ccy.currency_pair('chfusd')    &gt;&gt;&gt; p    ccy_pair: CHFUSD    &gt;&gt;&gt; p.mkt()  # market convention pair    ccy_pair: USDCHFSome shortcuts::    &gt;&gt;&gt; import ccy    &gt;&gt;&gt; ccy.cross('aud')    'AUDUSD'    &gt;&gt;&gt; ccy.crossover('eur')    'EUR/USD'    &gt;&gt;&gt; ccy.crossover('chf')    'USD/CHF'Note, the Swiss franc cross is represented as 'USD/CHF', while the Aussie Dollarand Euro crosses are represented with the USD as denominator.This is the market convention which is handled by the **order** propertyof a currency object.Country information~~~~~~~~~~~~~~~~~~~~~~~~~~To use it::    &gt;&gt;&gt; import ccy    &gt;&gt;&gt; c = ccy.country('us')    &gt;&gt;&gt; c    'United States'    &gt;&gt;&gt; ccy.countryccy('us')    'USD'Not all the country codes are standard `ISO 3166-1 alpha-2`_.There is a function for adding extra pseudo-countries::    import ccy    ccy.set_new_country('EU','EUR','Eurozone')Set a new country with code 'EU', currency 'EUR' named 'Eurozone'.This pseudo country is set in the library already.Countries==============Country information is obtained via the pytz_ package which is strictrequirement for ``ccy``::    &gt;&gt;&gt; from ccy import country    &gt;&gt;&gt; country('it')    'Italy'It knows about the 18 eurozone_ countries (European countries which share theeuro as common currency)::    &gt;&gt;&gt; from ccy import eurozoneeurozone is tuple of country ISO codes::    &gt;&gt;&gt; import ccy    &gt;&gt;&gt; ccy.print_eurozone()    Austria    Belgium    Cyprus    Estonia    Finland    France    Germany    Greece    Ireland    Italy    Latvia    Lithuania    Luxembourg    Malta    Netherlands    Portugal    Slovakia    Slovenia    SpainDate and Periods===================The module is shipped with a ``date`` module for manipulating time periods andconverting dates between different formats. The *period* function can be usedto create ``Period`` instances::    &gt;&gt;&gt; from ccy import period    &gt;&gt;&gt; p = period('1m')    &gt;&gt;&gt; p    1M    &gt;&gt;&gt; p += '2w'    &gt;&gt;&gt; p    1M2W    &gt;&gt;&gt; P += '3m'    &gt;&gt;&gt; p    4M2WInstallation================This library works for Python 2.6 and higher, including Python 3.In addition, it requires:* pytz_ for Countries information.* dateutils_ for date calculationsInstall using ``pip``::    pip install ccyor from source::    python setup.py installRunning tests~~~~~~~~~~~~~~~~~~~~~From within the package directory::    python setup.py test.. _pytz: http://pytz.sourceforge.net/.. _`ISO 3166-1 alpha-2`: http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.. _`ISO 4217`: http://en.wikipedia.org/wiki/ISO_4217.. _dateutils: https://pypi.python.org/pypi/python-dateutil.. _eurozone: http://www.eurozone.europa.eu/euro-area/euro-area-member-states/</longdescription>
</pkgmetadata>