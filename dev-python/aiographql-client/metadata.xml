<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Asynchronous GraphQL Client[![PyPI version](https://badge.fury.io/py/aiographql-client.svg)](https://badge.fury.io/py/aiographql-client)[![Python Versions](https://img.shields.io/pypi/pyversions/aiographql-client)](https://pypi.org/project/aiographql-client/)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![Documentation Status](https://readthedocs.org/projects/aiographql-client/badge/?version=latest)](https://aiographql-client.readthedocs.io/en/latest/?badge=latest)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=abn_aiographql-client&amp;metric=alert_status)](https://sonarcloud.io/dashboard?id=abn_aiographql-client)[![](https://github.com/abn/aiographql-client/workflows/Test%20Suite/badge.svg)](https://github.com/abn/aiographql-client/actions?query=workflow%3A%22Test+Suite%22)An asynchronous GraphQL client built on top of aiohttp and graphql-core-next. The client by default introspects schemas and validates all queries prior to dispatching to the server.## DocumentationFor the most recent project documentation, you can visit https://aiographql-client.readthedocs.io/.## Installation`pip install aiographql-client`## Example UsageHere are some example usages of this client implementation. For more examples, and advanced scenarios,see [Usage Examples](https://aiographql-client.readthedocs.io/en/latest/examples.html) section inthe documentation.### Simple Query```pyasync def get_logged_in_username(token: str) -&gt; GraphQLResponse:    client = GraphQLClient(        endpoint=&quot;https://api.github.com/graphql&quot;,        headers={&quot;Authorization&quot;: f&quot;Bearer {token}&quot;},    )    request = GraphQLRequest(        query=&quot;&quot;&quot;            query {              viewer {                login              }            }        &quot;&quot;&quot;    )    return await client.query(request=request)``````console&gt;&gt;&gt; import asyncio&gt;&gt;&gt; response = asyncio.run(get_logged_in_username(&quot;&lt;TOKEN FROM GITHUB GRAPHQL API&gt;&quot;))&gt;&gt;&gt; response.data{'viewer': {'login': 'username'}}```### Query Subscription```pyasync def print_city_updates(client: GraphQLClient, city: str) -&gt; None:    request = GraphQLRequest(        query=&quot;&quot;&quot;            subscription ($city:String!) {              city(where: {name: {_eq: $city}}) {                description                id              }            }        &quot;&quot;&quot;,        variables={&quot;city&quot;: city},    )    # subscribe to data and error events, and print them    await client.subscribe(        request=request, on_data=print, on_error=print, wait=True    )```For custom event specific callback registration, see [Callback Registry Documentation](https://aiographql-client.readthedocs.io/en/latest/examples.html#callback-registry).### Query Validation FailuresIf your query is invalid, thanks to graphql-core-next, we get a detailed exception in the traceback.```aiographql.client.exceptions.GraphQLClientValidationException: Query validation failedCannot query field 'ids' on type 'chatbot'. Did you mean 'id'?GraphQL request (4:13)3:           chatbot {4:             ids, bot_names               ^5:           }Cannot query field 'bot_names' on type 'chatbot'. Did you mean 'bot_name' or 'bot_language'?GraphQL request (4:18)3:           chatbot {4:             ids, bot_names                    ^5:           }```### Query Variables &amp; OperationsSupport for multi-operation requests and variables is available via the client. For example,the following request contains multiple operations. The instance specifies default values to use.```pyrequest = GraphQLRequest(    query=&quot;&quot;&quot;    query get_bot_created($id: Int) {      chatbot(where: {id: {_eq: $id}}) {        id, created      }    }    query get_bot_name($id: Int) {      chatbot(where: {id: {_eq: $id}}) {        id, bot_name      }    }    &quot;&quot;&quot;,    variables={&quot;id&quot;: 109},    operation=&quot;get_bot_name&quot;)```The default values can be overridden at the time of making the request if required.```pyawait client.query(request=request, variables={&quot;id&quot;: 20}, operation=&quot;get_bot_created&quot;)```</longdescription>
</pkgmetadata>