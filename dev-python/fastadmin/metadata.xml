<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Admin Dashboard App for FastAPI/Flask/Django[![Build Status](https://github.com/vsdudakov/fastadmin/workflows/CI/badge.svg?branch=main)](https://github.com/vsdudakov/fastadmin/workflows/CI/badge.svg?branch=main)[![codecov](https://codecov.io/gh/vsdudakov/fastadmin/branch/main/graph/badge.svg?token=RNGX5HOW3T)](https://codecov.io/gh/vsdudakov/fastadmin)[![License](https://img.shields.io/github/license/vsdudakov/fastadmin)](https://github.com/vsdudakov/fastadmin/blob/master/LICENSE)[![PyPi](https://badgen.net/pypi/v/fastadmin)](https://pypi.org/project/fastadmin/)[![Python 3.10](https://img.shields.io/badge/python-3.10-blue.svg)](https://www.python.org/downloads/release/python-3100/)## Screenshots![SignIn View](https://raw.githubusercontent.com/vsdudakov/fastadmin/main/docs/assets/images/signin.png)![List View](https://raw.githubusercontent.com/vsdudakov/fastadmin/main/docs/assets/images/list.png)![Change View](https://raw.githubusercontent.com/vsdudakov/fastadmin/main/docs/assets/images/change.png)&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://twitter.com/intent/tweet?text=Admin%20Dashboard%20For%20FastAPI&amp;url=https://github.com/vsdudakov/fastadmin&amp;hashtags=FastAPI,AdminDashboard&quot;&gt;    &lt;img alt=&quot;tweet&quot; src=&quot;https://img.shields.io/twitter/url/https/twitter?label=Share%20on%20twitter&amp;style=social&quot; target=&quot;_blank&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;## IntroductionFastAdmin is an easy-to-use Admin Dashboard App for FastAPI/Flask/Django inspired by Django Admin.FastAdmin was built with relations in mind and admiration for the excellent and popular Django Admin.It's engraved in its design that you may configure your admin dashboard for FastAPI/Flask/Django easiest way.FastAdmin is designed to be minimalistic, functional and yet familiar.## Getting Started### Installation#### Install the package using pip:frameworks:fastapi, django, flaskorms:django, tortoise-orm, pony, sqlalchemy```bashpip install fastadmin[fastapi,django]  # for fastapi with django ormpip install fastadmin[fastapi,tortoise-orm]  # for fastapi with tortoise ormpip install fastadmin[fastapi,pony]  # for fastapi with pony ormpip install fastadmin[fastapi,sqlalchemy]  # for fastapi with sqlalchemy ormpip install fastadmin[django]  # for django with django ormpip install fastadmin[django,pony]  # for django with pony ormpip install fastadmin[flask,sqlalchemy]  # for flask with sqlalchemy...```for (macos) zsh use```bashpip install fastadmin\[fastapi,django\]```or using poetry```bashpoetry add 'fastadmin[fastapi,django]'  # for fastapi with django ormpoetry add 'fastadmin[fastapi,tortoise-orm]'  # for fastapi with tortoise ormpoetry add 'fastadmin[fastapi,pony]'  # for fastapi with pony ormpoetry add 'fastadmin[fastapi,sqlalchemy]'  # for fastapi with sqlalchemy ormpoetry add 'fastadmin[django]'  # for django with django ormpoetry add 'fastadmin[django,pony]'  # for django with pony ormpoetry add 'fastadmin[flask,sqlalchemy]'  # for flask with sqlalchemy...```#### Setup ENV variables```bashexport ADMIN_USER_MODEL=Userexport ADMIN_USER_MODEL_USERNAME_FIELD=usernameexport ADMIN_SECRET_KEY=secret_key```For additional information see [Settings](https://vsdudakov.github.io/fastadmin#settings) documentation.### Quick Tutorial### Setup with your framework:#### For FastAPI:```pythonfrom fastapi import FastAPIfrom fastadmin import fastapi_app as admin_app...app = FastAPI()...app.mount(&quot;/admin&quot;, admin_app)...```Run your project (see [https://fastapi.tiangolo.com/tutorial/first-steps/](https://fastapi.tiangolo.com/tutorial/first-steps/)):```bashuvicorn ...```Go to [http://localhost:8000/admin](http://localhost:8000/admin).#### For Flask:```pythonfrom flask import Flaskfrom fastadmin import flask_app as admin_app...app = Flask(__name__)...app.register_blueprint(admin_app, url_prefix=&quot;/admin&quot;)...```Run your project (see [https://flask.palletsprojects.com/en/2.2.x/quickstart/](https://flask.palletsprojects.com/en/2.2.x/quickstart/)):```bashflask ...```Go to [http://localhost:5000/admin](http://localhost:5000/admin).#### For Django:In root urls.py```pythonfrom django.urls import pathfrom fastadmin import get_django_admin_urls as get_admin_urls...urlpatterns = [    path(&quot;admin/&quot;, get_admin_urls()),]```Run your project (see [https://docs.djangoproject.com/en/4.1/intro/](https://docs.djangoproject.com/en/4.1/intro/)):```bashpython manage.py runserver```Go to [http://localhost:8000/admin](http://localhost:8000/admin).### Register ORM models:You have to implement authenticate method for FastAdmin authentication on AdminModel class which is registered for ADMIN_USER_MODEL.#### For Tortoise ORM:```pythonimport bcryptfrom tortoise.models import Modelfrom fastadmin import register, TortoiseModelAdminclass User(Model):    username = fields.CharField(max_length=255, unique=True)    hash_password = fields.CharField(max_length=255)    is_superuser = fields.BooleanField(default=False)    is_active = fields.BooleanField(default=False)    ...    async def __str__(self):        return self.usernameclass Group(Model):    name = fields.CharField(max_length=255)    ...    async def __str__(self):        return self.name@register(User)class UserAdmin(TortoiseModelAdmin):    exclude = (&quot;hash_password&quot;,)    list_display = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    list_display_links = (&quot;id&quot;, &quot;username&quot;)    list_filter = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    search_fields = (&quot;username&quot;,)    async def authenticate(self, username: str, password: str) -&gt; UUID | int | None:        user = await User.filter(username=username, is_superuser=True).first()        if not user:            return None        if not bcrypt.checkpw(password.encode(), user.hash_password.encode()):            return None        return user.id@register(Group)class GroupAdmin(TortoiseModelAdmin):    list_display = (&quot;id&quot;, &quot;name&quot;)    list_display_links = (&quot;id&quot;,)    list_filter = (&quot;id&quot;, &quot;name&quot;)    search_fields = (&quot;name&quot;,)```#### For Django ORM:```pythonfrom django.db import modelsfrom fastadmin import DjangoModelAdmin, registerclass User(models.Model):    username = fields.CharField(max_length=255, unique=True)    hash_password = fields.CharField(max_length=255)    is_superuser = fields.BooleanField(default=False)    is_active = fields.BooleanField(default=False)    ...    def __str__(self):        return self.usernameclass Group(models.Model):    name = fields.CharField(max_length=255)    ...    def __str__(self):        return self.name@register(User)class UserAdmin(DjangoModelAdmin):    exclude = (&quot;hash_password&quot;,)    list_display = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    list_display_links = (&quot;id&quot;, &quot;username&quot;)    list_filter = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    search_fields = (&quot;username&quot;,)    def authenticate(self, username, password):        obj = User.objects.filter(username=username, is_superuser=True).first()        if not obj:            return None        if not obj.check_password(password):            return None        return obj.id@register(Group)class GroupAdmin(DjangoModelAdmin):    list_display = (&quot;id&quot;, &quot;name&quot;)    list_display_links = (&quot;id&quot;,)    list_filter = (&quot;id&quot;, &quot;name&quot;)    search_fields = (&quot;name&quot;,)```#### For SQLAlchemy:```pythonimport bcryptfrom sqlalchemy import (    Boolean,    String,    select,)from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_columnfrom fastadmin import SqlAlchemyModelAdmin, registersqlalchemy_engine = create_async_engine(    f&quot;sqlite+aiosqlite://db.sqlite&quot;,    echo=True,)sqlalchemy_sessionmaker = async_sessionmaker(sqlalchemy_engine, expire_on_commit=False)class Base(DeclarativeBase):    passclass User(Base):    username: Mapped[str] = mapped_column(String(length=255), nullable=False)    hash_password: Mapped[str] = mapped_column(String(length=255), nullable=False)    is_superuser: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)    is_active: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)    ...    async def __str__(self):        return self.usernameclass Group(Base):    name: Mapped[str] = mapped_column(String(length=255), nullable=False)    ...    async def __str__(self):        return self.name@register(User, sqlalchemy_sessionmaker=sqlalchemy_sessionmaker)class UserAdmin(SqlAlchemyModelAdmin):    exclude = (&quot;hash_password&quot;,)    list_display = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    list_display_links = (&quot;id&quot;, &quot;username&quot;)    list_filter = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    search_fields = (&quot;username&quot;,)    async def authenticate(self, username, password):        sessionmaker = self.get_sessionmaker()        async with sessionmaker() as session:            query = select(User).filter_by(username=username, password=password, is_superuser=True)            result = await session.scalars(query)            user = result.first()            if not user:                return None            if not bcrypt.checkpw(password.encode(), user.hash_password.encode()):                return None            return user.id@register(Group, sqlalchemy_sessionmaker=sqlalchemy_sessionmaker)class GroupAdmin(SqlAlchemyModelAdmin):    list_display = (&quot;id&quot;, &quot;name&quot;)    list_display_links = (&quot;id&quot;,)    list_filter = (&quot;id&quot;, &quot;name&quot;)    search_fields = (&quot;name&quot;,)```#### For PonyORM:```pythonimport bcryptfrom pony.orm import Database, PrimaryKeyfrom fastadmin import PonyORMModelAdmin, registerdb = Database()db.bind(provider=&quot;sqlite&quot;, filename=&quot;db.sqlite&quot;, create_db=True)class User(db.Entity):    id = PrimaryKey(int, auto=True)    username = Required(str)    hash_password = Required(str)    is_superuser = Required(bool, default=False)    is_active = Required(bool, default=False)    ...    def __str__(self):        return self.usernameclass Group(db.Entity):    id = PrimaryKey(int, auto=True)    name = Required(str)    ...    def __str__(self):        return self.namedb.generate_mapping()@register(User)class UserAdmin(PonyORMModelAdmin):    exclude = (&quot;hash_password&quot;,)    list_display = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    list_display_links = (&quot;id&quot;, &quot;username&quot;)    list_filter = (&quot;id&quot;, &quot;username&quot;, &quot;is_superuser&quot;, &quot;is_active&quot;)    search_fields = (&quot;username&quot;,)    @db_session    def authenticate(self, username, password):        user = next((f for f in self.model_cls.select(username=username, password=password, is_superuser=True)), None)        if not user:            return None        if not bcrypt.checkpw(password.encode(), user.hash_password.encode()):            return None        return user.id@register(Tournament)class GroupAdmin(PonyORMModelAdmin):    list_display = (&quot;id&quot;, &quot;name&quot;)    list_display_links = (&quot;id&quot;,)    list_filter = (&quot;id&quot;, &quot;name&quot;)    search_fields = (&quot;name&quot;,)```For additional information see [ModelAdmin](https://vsdudakov.github.io/fastadmin#model_admin_objects) and [InlineModelAdmin](https://vsdudakov.github.io/fastadmin#inline_model_admin_objects) documentation.## DocumentationSee full documentation [here](https://vsdudakov.github.io/fastadmin).## LicenseThis project is licensed under the MIT License - see the [LICENSE](https://github.com/vsdudakov/fastadmin/blob/main/LICENSE) file for details.</longdescription>
</pkgmetadata>