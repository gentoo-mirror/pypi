<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;docs/img/heroes/it_hates_me_hero.png&quot; style=&quot;width: 95%; height: auto;&quot;/&gt;&lt;/p&gt;# Marvin### The AI engineering frameworkMarvin is a lightweight AI engineering framework for building natural language interfaces that are reliable, scalable, and easy to trust.Sometimes the most challenging part of working with generative AI is remembering that it's not magic; it's software. It's new, it's nondeterministic, and it's incredibly powerful - but still software.Marvin's goal is to bring the best practices for building dependable, observable software to generative AI. As the team behind Prefect, which does something very similar for data engineers, we've poured years of open-source developer tool experience and lessons into Marvin's design.## DocumentationMarvin's docs are available at [askmarvin.ai](https://www.askmarvin.ai), including concepts, tutorials, and an API reference.```bashpip install marvin```Getting started? Head over to our [setup guide](https://www.askmarvin.ai/welcome/installation/).## CommunityTo ask questions, share ideas, or just chat with like-minded developers, join us on [Discord](https://discord.gg/Kgw4HpcuYG) or [Twitter](https://twitter.com/AskMarvinAI)!## Core AI ComponentsMarvin's high-level abstractions are familiar Python interfaces that make it easy to leverage AI in your application. These interfaces aim to be simple and self-documenting, adding a touch of AI magic to everyday objects.üß© [**AI Models**](https://www.askmarvin.ai/components/ai_model/) for structuring text into type-safe schemasüè∑Ô∏è [**AI Classifiers**](https://www.askmarvin.ai/components/ai_classifier/) for bulletproof classification and routingü™Ñ [**AI Functions**](https://www.askmarvin.ai/components/ai_function/) for complex business logic and transformationsü§ù [**AI Applications**](https://www.askmarvin.ai/components/ai_application/) for interactive use and persistent state___### üß© AI ModelsMarvin's most basic component is the AI Model, a drop-in replacement for Pydantic's `BaseModel`. AI Models can be instantiated from any string, making them ideal for structuring data, entity extraction, and synthetic data generation. You can learn more about AI models [here](https://www.askmarvin.ai/components/ai_model/).```pythonfrom marvin import ai_modelfrom pydantic import BaseModel, Field@ai_modelclass Location(BaseModel):    city: str    state: str = Field(..., description=&quot;The two-letter state abbreviation&quot;)Location(&quot;The Big Apple&quot;)# Location(city='New York', state='NY')```### üè∑Ô∏è AI ClassifiersAI Classifiers let you build multi-label classifiers with no code and no training data. Given user input, each classifier uses a [clever logit bias trick](https://twitter.com/AAAzzam/status/1669753721574633473) to force an LLM to deductively choose the best option. It's bulletproof, cost-effective, and lets you build classifiers as quickly as you can write your classes.You can learn more about AI Classifiers [here](https://www.askmarvin.ai/components/ai_classifier/).```pythonfrom marvin import ai_classifierfrom enum import Enum@ai_classifierclass AppRoute(Enum):    &quot;&quot;&quot;Represents distinct routes command bar for a different application&quot;&quot;&quot;    USER_PROFILE = &quot;/user-profile&quot;    SEARCH = &quot;/search&quot;    NOTIFICATIONS = &quot;/notifications&quot;    SETTINGS = &quot;/settings&quot;    HELP = &quot;/help&quot;    CHAT = &quot;/chat&quot;    DOCS = &quot;/docs&quot;    PROJECTS = &quot;/projects&quot;    WORKSPACES = &quot;/workspaces&quot;AppRoute(&quot;update my name&quot;)# AppRoute.USER_PROFILE```### ü™Ñ AI FunctionsAI Functions look like regular functions, but have no source code. Instead, an AI uses their description and inputs to generate their outputs, making them ideal for NLP applications like sentiment analysis. You can learn more about AI Functions [here](https://www.askmarvin.ai/components/ai_function/).```pythonfrom marvin import ai_fn@ai_fndef sentiment(text: str) -&gt; float:    &quot;&quot;&quot;    Given `text`, returns a number between 1 (positive) and -1 (negative)    indicating its sentiment score.    &quot;&quot;&quot;sentiment(&quot;I love working with Marvin!&quot;) # 0.8sentiment(&quot;These examples could use some work...&quot;) # -0.2```### ü§ù AI ApplicationsAI Applications permit interactive use cases and are designed to be invoked multiple times. They maintain three forms of state: the application's own `state`, the AI's `plan`, and a `history` of interactions. AI Applications can be used to implement many &quot;classic&quot; LLM use cases, such as chatbots, tool-using agents, developer assistants, and more. In addition, thanks to their persistent state and planning, they can implement applications that don't have a traditional chat UX, such as a ToDo app. Here's an example:```pythonfrom datetime import datetimefrom pydantic import BaseModel, Fieldfrom marvin import AIApplication# create models to represent the state of our ToDo appclass ToDo(BaseModel):    title: str    description: str = None    due_date: datetime = None    done: bool = Falseclass ToDoState(BaseModel):    todos: list[ToDo] = []# create the app with an initial state and descriptiontodo_app = AIApplication(    state=ToDoState(),    description=(        &quot;A simple todo app. Users will provide instructions for creating and updating&quot;        &quot; their todo lists.&quot;    ),)# invoke the application by adding a todoresponse = todo_app(&quot;I need to go to the store tomorrow at 5pm&quot;)print(f&quot;Response: {response.content}\n&quot;)# Response: Got it! I've added a new task to your to-do list. You need to go to the store tomorrow at 5pm.print(f&quot;App state: {todo_app.state.json(indent=2)}&quot;)# App state: {#   &quot;todos&quot;: [#     {#       &quot;title&quot;: &quot;Go to the store&quot;,#       &quot;description&quot;: &quot;Buy groceries&quot;,#       &quot;due_date&quot;: &quot;2023-07-12T17:00:00+00:00&quot;,#       &quot;done&quot;: false#     }#   ]# }```## Marvin is great for...### Scalable APIs, data pipelines, and agents:üè∑Ô∏è Build bulletproof and lightning-fast classifiersüß© Extract structured &amp; type-safe data from unstructured text üß™ Generate synthetic data for your applications ü´° Solve complex deductive and inferential tasks at scaleüîé Scrape web data without custom scrapers### AI powered apps with access to tools, data, and the web:üòç Customize ChatGPT with system prompts and toolsüéì Extract relevant insights from your dataüßëüíª Add a junior developer to your teamüó£Ô∏è Quickly add NLP to your app### Advanced applications:üì± AI applications with persistent stateüïµÔ∏è Autonomous agents with high-level planningüí¨ Text-to-application: generate stateful applications by describing them</longdescription>
</pkgmetadata>