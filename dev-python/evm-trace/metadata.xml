<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Quick StartEthereum Virtual Machine transaction tracing tool## Dependencies- [python3](https://www.python.org/downloads) version 3.8 or greater, python3-dev## Installation### via `pip`You can install the latest release via [`pip`](https://pypi.org/project/pip/):```bashpip install evm-trace```### via `setuptools`You can clone the repository and use [`setuptools`](https://github.com/pypa/setuptools) for the most up-to-date version:```bashgit clone https://github.com/ApeWorX/evm-trace.gitcd evm-tracepython3 setup.py install```## Quick Usage### Geth Style TracesIf you are using a node that supports the `debug_traceTransaction` RPC, you can use `web3.py` to get trace frames:```pythonfrom web3 import HTTPProvider, Web3from evm_trace import TraceFrameweb3 = Web3(HTTPProvider(&quot;https://path.to.my.node&quot;))txn_hash = &quot;0x...&quot;struct_logs = web3.manager.request_blocking(&quot;debug_traceTransaction&quot;, [txn_hash]).structLogsfor item in struct_logs:    frame = TraceFrame.parse_obj(item)```If you want to get the call-tree node, you can do:```pythonfrom evm_trace import CallType, get_calltree_from_geth_traceroot_node_kwargs = {    &quot;gas_cost&quot;: 10000000,    &quot;gas_limit&quot;: 10000000000,    &quot;address&quot;: &quot;0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045&quot;,    &quot;calldata&quot;: &quot;0x00&quot;,    &quot;value&quot;: 1000,    &quot;call_type&quot;: CallType.CALL,}# Where `trace` is a `TraceFrame` (see example above)calltree = get_calltree_from_geth_trace(trace, **root_node_kwargs)```### Parity Style TracesIf you are using a node that supports the `trace_transaction` RPC, you can use `web3.py` to get trace objects:```pythonfrom evm_trace import CallType, ParityTraceListraw_trace_list = web3.manager.request_blocking(&quot;trace_transaction&quot;, [txn_hash])trace_list = ParityTraceList.parse_obj(raw_trace_list)```And to make call-tree nodes, you can do:```pythonfrom evm_trace import get_calltree_from_parity_tracetree = get_calltree_from_parity_trace(trace_list)```### Gas ReportsIf you are using a node that supports creating traces, you can get a gas report.```pythonfrom evm_trace.gas import get_gas_report# see examples above for creating a calltreecalltree = get_calltree_from_geth_trace(trace, **root_node_kwargs)gas_report = get_gas_report(calltree)```For a more custom report, use the `merge_reports` method to combine a list of reports into a single report.Pass two or more `Dict[Any, Dict[Any, List[int]]]` to combine reports where `List[int]` is the gas used.Customize the values of `Any` accordingly:1. The first `Any` represents the bytes from the address.2. The second `Any` represents the method selector.For example, you may replace addresses with token names or selector bytes with signature call strings.Import the method like so:```pythonfrom evm_trace.gas import merge_reports```## DevelopmentThis project is in development and should be considered a beta.Things might not be in their final state and breaking changes may occur.Comments, questions, criticisms and pull requests are welcomed.## LicenseThis project is licensed under the [Apache 2.0](LICENSE).</longdescription>
</pkgmetadata>