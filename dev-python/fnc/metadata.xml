<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>fnc***|version| |build| |coveralls| |license|Functional programming in Python with generators and other utilities.Links=====- Project: https://github.com/dgilland/fnc- Documentation: https://fnc.readthedocs.io- PyPI: https://pypi.python.org/pypi/fnc/- Github Actions: https://github.com/dgilland/fnc/actionsFeatures========- Functional-style methods that work with and return generators.- Shorthand-style iteratees (callbacks) to easily filter and map data.- String object-path support for references nested data structures.- 100% test coverage.- Python 3.6+Quickstart==========Install using pip:::    pip3 install fncImport the main module:.. code-block:: python    import fncStart working with data:.. code-block:: python    users = [        {'id': 1, 'name': 'Jack', 'email': 'jack@example.org', 'active': True},        {'id': 2, 'name': 'Max', 'email': 'max@example.com', 'active': True},        {'id': 3, 'name': 'Allison', 'email': 'allison@example.org', 'active': False},        {'id': 4, 'name': 'David', 'email': 'david@example.net', 'active': False}    ]Filter active users:.. code-block:: python    # Uses &quot;matches&quot; shorthand iteratee: dictionary    active_users = fnc.filter({'active': True}, users)    # &lt;filter object at 0x7fa85940ec88&gt;    active_uesrs = list(active_users)    # [{'name': 'Jack', 'email': 'jack@example.org', 'active': True},    #  {'name': 'Max', 'email': 'max@example.com', 'active': True}]Get a list of email addresses:.. code-block:: python    # Uses &quot;pathgetter&quot; shorthand iteratee: string    emails = fnc.map('email', users)    # &lt;map object at 0x7fa8577d52e8&gt;    emails = list(emails)    # ['jack@example.org', 'max@example.com', 'allison@example.org', 'david@example.net']Create a ``dict`` of users keyed by ``'id'``:.. code-block:: python    # Uses &quot;pathgetter&quot; shorthand iteratee: string    users_by_id = fnc.keyby('id', users)    # {1: {'id': 1, 'name': 'Jack', 'email': 'jack@example.org', 'active': True},    #  2: {'id': 2, 'name': 'Max', 'email': 'max@example.com', 'active': True},    #  3: {'id': 3, 'name': 'Allison', 'email': 'allison@example.org', 'active': False},    #  4: {'id': 4, 'name': 'David', 'email': 'david@example.net', 'active': False}}Select only ``'id'`` and ``'email'`` fields and return as dictionaries:.. code-block:: python    # Uses &quot;pickgetter&quot; shorthand iteratee: set    user_emails = list(fnc.map({'id', 'email'}, users))    # [{'email': 'jack@example.org', 'id': 1},    #  {'email': 'max@example.com', 'id': 2},    #  {'email': 'allison@example.org', 'id': 3},    #  {'email': 'david@example.net', 'id': 4}]Select only ``'id'`` and ``'email'`` fields and return as tuples:.. code-block:: python    # Uses &quot;atgetter&quot; shorthand iteratee: tuple    user_emails = list(fnc.map(('id', 'email'), users))    # [(1, 'jack@example.org'),    #  (2, 'max@example.com'),    #  (3, 'allison@example.org'),    #  (4, 'david@example.net')]Access nested data structures using object-path notation:.. code-block:: python    fnc.get('a.b.c[1][0].d', {'a': {'b': {'c': [None, [{'d': 100}]]}}})    # 100    # Same result but using a path list instead of a string.    fnc.get(['a', 'b', 'c', 1, 0, 'd'], {'a': {'b': {'c': [None, [{'d': 100}]]}}})    # 100Compose multiple functions into a generator pipeline:.. code-block:: python    from functools import partial    filter_active = partial(fnc.filter, {'active': True})    get_emails = partial(fnc.map, 'email')    get_email_domains = partial(fnc.map, lambda email: email.split('@')[1])    get_active_email_domains = fnc.compose(        filter_active,        get_emails,        get_email_domains,        set,    )    email_domains = get_active_email_domains(users)    # {'example.com', 'example.org'}Or do the same thing except using a terser &quot;partial&quot; shorthand:.. code-block:: python    get_active_email_domains = fnc.compose(        (fnc.filter, {'active': True}),        (fnc.map, 'email'),        (fnc.map, lambda email: email.split('@')[1]),        set,    )    email_domains = get_active_email_domains(users)    # {'example.com', 'example.org'}For more details and examples, please see the full documentation at https://fnc.readthedocs.io... |version| image:: https://img.shields.io/pypi/v/fnc.svg?style=flat-square    :target: https://pypi.python.org/pypi/fnc/.. |build| image:: https://img.shields.io/github/workflow/status/dgilland/fnc/Main/master?style=flat-square    :target: https://github.com/dgilland/fnc/actions.. |coveralls| image:: https://img.shields.io/coveralls/dgilland/fnc/master.svg?style=flat-square    :target: https://coveralls.io/r/dgilland/fnc.. |license| image:: https://img.shields.io/pypi/l/fnc.svg?style=flat-square    :target: https://pypi.python.org/pypi/fnc/Changelog=========v0.5.3 (2021-10-14)-------------------- Minor performance optimization in ``pick``.v0.5.2 (2020-12-24)-------------------- Fix regression in ``v0.5.1`` that broke ``get/has`` for dictionaries and dot-delimited keys that reference integer dict-keys.v0.5.1 (2020-12-14)-------------------- Fix bug in ``get/has`` that caused ``defaultdict`` objects to get populated on key access.v0.5.0 (2020-10-23)-------------------- Fix bug in ``intersection/intersectionby`` and ``difference/differenceby`` where incorrect results could be returned when generators passed in as the sequences to compare with.- Add support for Python 3.9.- Drop support for Python &lt;= 3.5.v0.4.0 (2019-01-23)-------------------- Add functions:  - ``differenceby``  - ``duplicatesby``  - ``intersectionby``  - ``unionby``v0.3.0 (2018-08-31)-------------------- compose: Introduce new &quot;partial&quot; shorthand where instead of passing a callable, a ``tuple`` can be given which will then be converted to a callable using ``functools.partial``. For example, instead of ``fnc.compose(partial(fnc.filter, {'active': True}), partial(fnc.map, 'email'))``, one can do ``fnc.compose((fnc.filter, {'active': True}), (fnc.map, 'email'))``.v0.2.0 (2018-08-24)-------------------- Add functions:  - ``negate``  - ``over``  - ``overall``  - ``overany``- Rename functions: (**breaking change**)  - ``ismatch -&gt; conforms``  - ``matches -&gt; conformance``- Make ``conforms/conformance`` (formerly ``ismatch/matches``) accept callable dictionary values that act as predicates against comparison target. (**breaking change**)v0.1.1 (2018-08-17)-------------------- pick: Don't return ``None`` for keys that don't exist in source object. Instead of ``fnc.pick(['a'], {}) == {'a': None}``, it's now ``fnc.pick(['a'], {}) == {}``.v0.1.0 (2018-08-15)-------------------- First release.MIT LicenseCopyright (c) 2020 Derrick GillandPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>