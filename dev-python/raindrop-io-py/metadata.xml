<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![version](https://img.shields.io/badge/python-3.10+-green)](https://www.python.org/)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)[![license](https://img.shields.io/badge/License-MIT-green.svg)](https://github.com/PBorocz/raindrop-io-py/blob/trunk/LICENSE)|docs|# Raindrop-IO-pyPython wrapper for the API to the [Raindrop.io](https://raindrop.io) Bookmark Manager as well as a simple command-line interface to perform common operations.## BackgroundI wanted to use an existing API for the Raindrop Bookmark Manager ([python-raindropio](https://github.com/atsuoishimoto/python-raindropio)) to perform some bulk operations through a simple command-line interface. However, the API available was incomplete and didn't contain any user-interface. Thus, this is a _fork_ and significant extension of [python-raindropio](https://github.com/atsuoishimoto/python-raindropio) (ht [Atsuo Ishimoto](https://github.com/atsuoishimoto)).This package includes:-   An API providing access to the Raindrop environment. For instance: create, update, delete link/file-based Raindrops; create, update delete Raindrop collections, tags etc.-   A terminal-based user-interface that both tests the API as well as providing (me) a fast, simple interface to my Raindrop collections.## StatusAs the API layer is based on a fork of an existing package, it's reasonably stable. However, the command-line interface (CLI) is brand new (and lacking tests, ie. &quot;works for me!&quot; ;-).## RequirementsRequires Python 3.10 or later (well, at least I'm developing against 3.10.9).## Install```shell[.venv] python -m pip install raindrop-io-py```## SetupTo use this package, besides your own account on [Raindrop](https://raindrop.io), you'll need to create an `integration app` on the Raindrop.io site from which you can create API token(s).-   Go to [&lt;https://app.draindrop.api/settings/integrations&gt;](https://app.raindrop.io/settings/integrations) and select `+ create new app`.-   Give it a descriptive name and then select the app you just created.-   Select `Create test token` and copy the token provided. Note that the basis for calling it a _test_ token is that it only gives you access to bookmarks within *your own account*. Raindrop allows you to use their API against other people's environments using oAuth (see untested/unsupported `flask_oauth.py` file in /examples)-   Save your token into your environment (we use python-dotenv so a simple .env/.envrc file containing your token should suffice), for example:```shell# If you use direnv or it's equivalent, place something like this in a .env file:RAINDROP_TOKEN=01234567890-abcdefghf-aSample-API-Token-01234567890-abcdefghf# Or for bash:export RAINDROP_TOKEN=01234567890-abcdefghf-aSample-API-Token-01234567890-abcdefghf# Or for fish:set -gx RAINDROP_TOKEN 01234567890-abcdefghf-aSample-API-Token-01234567890-abcdefghf# etc...```## ExamplesA full suite of examples are provided in the `examples` directory. Each can be run independently as:```shell[.venv] % python examples/list_collections.py```or a wrapper script is available to run all of them, in logical order with a small wait to be nice to Raindrop's API:```shell[.venv] % python examples/RUN_ALL.py```### API ExamplesHere are a few examples of API usage (all of these should be able to be executed &quot;as-is&quot;):#### Display All Collections and **Unsorted** Bookmarks:This example shows the intended usage of the API as a context-manager, from which any number of calls can be made:```pythonimport osfrom dotenv import load_dotenvfrom raindropiopy.api import API, Collection, CollectionRef, Raindropload_dotenv()with API(os.environ[&quot;RAINDROP_TOKEN&quot;]) as api:    print(&quot;Current Collections:&quot;    for collection in Collection.get_collections(api):        print(collection.title)    print(&quot;\nUnsorted Raindrop Bookmarks:&quot;    for item in Raindrop.search(api, collection=CollectionRef.Unsorted):        print(item.title)```#### Create a New Raindrop Bookmark to a URL```pythonimport osfrom dotenv import load_dotenvfrom raindropiopy.api import API, Raindropload_dotenv()with API(os.environ[&quot;RAINDROP_TOKEN&quot;]) as api:    link, title = &quot;https://www.python.org/&quot;, &quot;Our Benevolent Dictator's Creation&quot;    print(f&quot;Creating Raindrop to: '{link}' with title: '{title}'...&quot;, flush=True, end=&quot;&quot;)    raindrop = Raindrop.create_link(api, link=link, title=title, tags=[&quot;abc&quot;, &quot;def&quot;])    print(f&quot;Done, id={raindrop.id}&quot;)```(after this has executed, go to your Raindrop.io environment (site or app) and you should see this Raindrop to python.org available)#### Create a New Raindrop Collection```pythonimport osimport sysfrom datetime import datetimefrom getpass import getuserfrom dotenv import load_dotenvfrom raindropiopy.api import API, Collectionload_dotenv()with API(os.environ[&quot;RAINDROP_TOKEN&quot;]) as api:    title = f&quot;TEST Collection ({getuser()}@{datetime.now():%Y-%m-%dT%H:%M:%S})&quot;    print(f&quot;Creating collection: '{title}'...&quot;, flush=True, end=&quot;&quot;)    collection = Collection.create(api, title=title)    print(f&quot;Done, {collection.id=}.&quot;)```(after this has executed, go to your Raindrop.io environment (site or app) and you should see this collection available)## Command-Line Interface Usage```shell[.venv] % raindropiopy```Note: remember to setup `RAINDROP-TOKEN` in your environment!## DocumentationWe use [Sphinx](https://www.sphinx-doc.org/en/master/index.html) with [Google-style docstrings](https://www.sphinx-doc.org/en/master/usage/extensions/example_google.html) to document our API. Documentation is hosted by [ReadTheDocs](https://readthedocs.org/) and can be found [here](https://raindrop-io-py.readthedocs.io/en/latest/).## Acknowledgments[python-raindropio](https://github.com/atsuoishimoto/python-raindropio) from [Atsuo Ishimoto](https://github.com/atsuoishimoto).## LicenseThe project is licensed under the MIT License.## Release History### Unreleased### v0.1.0 - 2023-02-16- CHANGED: `Raindrop.create_file` to handle `collection` argument consistent with `Raindrop.create_link`, specifically, either a `Collection`, `CollectionRef` or direct integer collection_id.- ADDED: Beginning of documentation suite on Read-The-Docs.### v0.0.15 - 2023-02-11- CHANGED: `Raindrop.search_paged` is now hidden (can't see a reason to explicitly use it over `Raindrop.search`)- CHANGED: Several attributes that, while allowed to be set by RaindropIO's API, are now *not* able to be set by this API. For example, you shouldn't be able to change &quot;time&quot; by setting `created` or `last_update` fields on a Raindrop or Collection.- CHANGED: The `Collection`, `Raindrop` and `Tag` &quot;remove&quot; method is now &quot;delete&quot; to more accurately match with RaindropIO's API).### v0.0.14 - 2023-02-09- FIXED: `Raindrop.cache.size` and `Raindrop.cache.created` attributes are now optional (RaindropIO's API doesn't always provide them).- FIXED: README examples corrected to reflect simpler Raindrop.search call.### v0.0.13 - 2023-02-07- CHANGED: Cross-referenced the fields available from the Raindrop API with our API; most available but several optional ones skipped for now.- CHANGED: (Internal) Remove dependency on [&quot;jashin&quot;](https://github.com/sojin-project/jashin) library by moving to [pydantic](https://docs.pydantic.dev/) for all Raindrop API models.### v0.0.12 - 2023-02-06- CHANGED: (Internal) Move from README.org to README.md to allow PyPI to display project information correctly.### v0.0.11 - 2023-02-06- CHANGED: Raindrop search API call is now non-paged (the &quot;paged&quot; version is still available as `Raindrop.search_paged`).### v0.0.10 - 2023-02-05- ADDED: Ability to specify raindrop field: Description on a created Raindrop (either file or link-based).- ADDED: Ability to re-query existing search results (eg. after changes) and smoothed out post-search interactions.### v0.0.9 - 2023-02-04- ADDED: An ability to view, edit and delete raindrops returned from a search.- ADDED: A simple `RUN_ALL.py` script to the examples directory to...well, run all the examples in order!- CHANGED: The display of raindrops returned from a search to include tags and to only show Collection name if all raindrops are across multiple collections.### v0.0.8 - 2023-01-25- CHANGED: Added simple version method in root package:```pythonfrom raindropiopy import versionprint(version())```### v0.0.7 - 2023-01-25- CHANGED: Moved from keeping README in markdown to org file format. Incorporated package's ChangeLog into README as well (at the bottom).- CHANGED: Added new manage.py release automation capability (internal only, nothing public-facing).### v0.0.6 - 2023-01-22- FIXED: CLI autocomplete now works again after adding support for &quot;single-letter&quot; command-shortcuts.- ADDED: A set of missing attributes to the Raindrop API model type, eg. file, cache etc. Only attribute still missing is &quot;highlights&quot;.### v0.0.5 - 2023-01-21- ADDED: Support use of [Vulture](https://github.com/jendrikseipp/vulture) for dead-code analysis (not in pre-commit through due to conflict with ruff's McCabe complexity metric)- CHANGED: Moved internal module name to match that of package name. Since we couldn't use raindroppy as a package name on PyPI due to similarities with existing packages (one of which was for a **crypto** package), we renamed this package to raindrop-io-py. In concert, the internal module is now `raindropiopy`:```pythonfrom raindroiopy.api import API```- FIXED: Sample file upload specification in `examples/create_raindrop_file.py` is now correct... |docs| image:: https://readthedocs.org/projects/docs/badge/?version=latest    :alt: Documentation Status    :scale: 100%    :target: https://docs.readthedocs.io/en/latest/?badge=latest</longdescription>
</pkgmetadata>