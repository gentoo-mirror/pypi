<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Chocs-Trace &lt;br&gt; [![PyPI version](https://badge.fury.io/py/chocs-middleware.trace.svg)](https://pypi.org/project/chocs-middleware.trace/) [![CI](https://github.com/kodemore/chocs-trace/actions/workflows/main.yaml/badge.svg)](https://github.com/kodemore/chocs-trace/actions/workflows/main.yaml) [![Release](https://github.com/kodemore/chocs-trace/actions/workflows/release.yml/badge.svg)](https://github.com/kodemore/chocs-trace/actions/workflows/release.yml) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)Http tracing middleware for chocs library. # Installation### Poetry:```bashpoetry add chocs-middleware.trace```### Pip:```bashpip install chocs-middleware.trace```# Features- Automatic generation and propagation of tracing headers (x-request-id, x-correlation-id, x-causation-id)- Sentry integration- More intuitive log formatting options- Structured logging# Usage## Support tracing in your responses```pythonfrom chocs_middleware.trace import TraceMiddlewarefrom chocs import Application, HttpRequest, HttpResponse# id_prefix will ensure generated tracing headers to contain your prefixapp = Application(TraceMiddleware(id_prefix=&quot;service-name-&quot;))@app.get(&quot;/hello&quot;)def say_hello(req: HttpRequest) -&gt; HttpResponse:    return HttpResponse(&quot;Hello!&quot;)  # tracing middleware will automatically attach x-request-id, x-correlation-id, x-causation-id headers to your response```## Tracing requests```pythonfrom chocs_middleware.trace import TraceMiddleware, HttpStrategyfrom chocs import Application, HttpRequest, HttpResponseimport requests# http_strategy will try to detect requests library and use it to add tracing headers in all your requests# if it fails to detect requests library it will fallback to urllib3app = Application(TraceMiddleware(http_strategy=HttpStrategy.AUTO))@app.get(&quot;/hello&quot;)def say_hello(req: HttpRequest) -&gt; HttpResponse:        requests.get(&quot;http://example.com/test&quot;)  # middleware will automatically attach x-correlation-id, x-causation-id and x-request-id headers to your request        return HttpResponse(&quot;Hello!&quot;)# when using the requests.request method you will need to add headers for it to use, otherwise it will generate default headers and is unable to attach x-correlation-id, x-causation-id and x-request-id headers@app.get(&quot;/test&quot;)    def say_hello(req: HttpRequest, headers=req.headers) -&gt; HttpResponse:        response = requests.request(&quot;GET&quot;, &quot;http://test.com/&quot;)        assert response.content == b&quot;ok&quot;        return HttpResponse(&quot;OK&quot;)```## Using logger```pythonfrom chocs import Application, HttpRequest, HttpResponsefrom chocs_middleware.trace import TraceMiddleware, Loggerapp = Application(TraceMiddleware())@app.get(&quot;/hello&quot;)def say_hello(req: HttpRequest) -&gt; HttpResponse:    logger = Logger.get(&quot;logger_name&quot;)    logger.info(&quot;Hello {name}!&quot;, name=&quot;Bob&quot;)  # will output to log stream Hello Bob!    return HttpResponse(&quot;Hello!&quot;)```### Formatting message```pythonfrom chocs import Application, HttpRequest, HttpResponsefrom chocs_middleware.trace import TraceMiddleware, Loggerapp = Application(TraceMiddleware())@app.get(&quot;/hello&quot;)def say_hello(req: HttpRequest) -&gt; HttpResponse:    logger = Logger.get(&quot;logger_name&quot;, message_format=&quot;[{level}] {tags.request.x-correlation-id} {msg}&quot;)    logger.info(&quot;Hello {name}!&quot;, name=&quot;Bob&quot;)  # will output to log stream Hello Bob!    return HttpResponse(&quot;Hello!&quot;)```#### Available formatting options| Name | Example value | Description ||---|:---:|---|| `{level}` | DEBUG | Log level name || `{msg}` | Example message | Log message after interpolation || `{log_message}` | Example {name} | Log message before interpolation || `{timestamp}` | 2022-03-07T20:06:23.453866 | Time of the logged message || `{filename}` | example.py | Name of the python file where message was log || `{funcName}` | example_function | Name of the function where message was log || `{module}` | example_module | Name of the module where message was log || `{pathname}` | example/path | Path name of the file where message was log || `{tags.*}` | some value | Custom tag value set by calling `Logger.set_tag` function |</longdescription>
</pkgmetadata>