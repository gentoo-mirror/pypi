<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;jaxtyping&lt;/h1&gt;Type annotations **and runtime type-checking** for:1. shape and dtype of [JAX](https://github.com/google/jax) arrays; *(Now also supports PyTorch, NumPy, and TensorFlow!)*2. [PyTrees](https://jax.readthedocs.io/en/latest/pytrees.html).**For example:**```pythonfrom jaxtyping import Array, Float, PyTree# Accepts floating-point 2D arrays with matching dimensionsdef matrix_multiply(x: Float[Array, &quot;dim1 dim2&quot;],                    y: Float[Array, &quot;dim2 dim3&quot;]                  ) -&gt; Float[Array, &quot;dim1 dim3&quot;]:    ...def accepts_pytree_of_ints(x: PyTree[int]):    ...def accepts_pytree_of_arrays(x: PyTree[Float[Array, &quot;batch c1 c2&quot;]]):    ...```## Installation```bashpip install jaxtyping```Requires Python 3.9+.JAX is an optional dependency, required for a few JAX-specific types. If JAX is not installed then these will not be available, but you may still use jaxtyping to provide shape/dtype annotations for PyTorch/NumPy/TensorFlow/etc.The annotations provided by jaxtyping are compatible with runtime type-checking packages, so it is common to also install one of these. The two most popular are [typeguard](https://github.com/agronholm/typeguard) (which exhaustively checks every argument) and [beartype](https://github.com/beartype/beartype) (which checks random pieces of arguments).## DocumentationAvailable at [https://docs.kidger.site/jaxtyping](https://docs.kidger.site/jaxtyping).## Finally### See also: other tools in the JAX ecosystemNeural networks: [Equinox](https://github.com/patrick-kidger/equinox).Numerical differential equation solvers: [Diffrax](https://github.com/patrick-kidger/diffrax).Computer vision models: [Eqxvision](https://github.com/paganpasta/eqxvision).SymPy&lt;-&gt;JAX conversion; train symbolic expressions via gradient descent: [sympy2jax](https://github.com/google/sympy2jax).### DisclaimerThis is not an official Google product.</longdescription>
</pkgmetadata>