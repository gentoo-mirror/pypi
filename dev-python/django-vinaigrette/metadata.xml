<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://travis-ci.com/ecometrica/django-vinaigrette.svg?branch=master    :target: https://travis-ci.com/ecometrica/django-vinaigrette?branch=master.. image:: https://coveralls.io/repos/github/ecometrica/django-vinaigrette/badge.svg?branch=master    :target: https://coveralls.io/github/ecometrica/django-vinaigrette?branch=master==================django-vinaigrette==================Vinaigrette translates Django model data -- stored in the database -- using GNU gettextand Django's standard internationalization features.Installing==========Add ``vinaigrette`` to ``INSTALLED_APPS`` in your settings.Then, tell vinaigrette which fields you want to translate. Because vinaigrette needs to register signals,you should register your model translations when models have finished loading, in the appropriate ``apps.py`` files(or wherever you keep your ``AppConfig`` subclasses):.. code:: python    import vinaigrette    class SaladAppConfig(AppConfig):        def ready(self):            # Import the model requiring translation            from .models import Ingredient  # or...            Ingredient = self.get_model(&quot;Ingredient&quot;)            # Register fields to translate            vinaigrette.register(Ingredient, ['name', 'description'])This tells vinaigrette to translate the ``name`` and ``description`` fields on Ingredient objects.Using=====After installing vinaigrette, the PO files generated by ``manage.py makemessages`` will includestrings from the registered fields. If a particular string is translated, the model value willbe the string translated into the appropriate language:.. code:: python    &gt;&gt;&gt; from django.utils.translation import activate    &gt;&gt;&gt; i = Ingredient(name=u'Lettuce')    &gt;&gt;&gt; i.name    u'Lettuce'    &gt;&gt;&gt; activate('fr')    &gt;&gt;&gt; i.name    u'Laitue'Et cetera=========There are a couple of options to restrict which objects translation strings will be collectedfrom. See the docstring for ``vinaigrette.register``.Vinaigrette adds a ``--keep-obsolete`` option to ``manage.py makemessages``, which prevents gettextfrom deactivating translated messages no longer present in code or in registered database fields.Vinaigrette is designed for database content that is:- always edited in the default language- edited by site administrators, not usersOnly model instances are translated. Data accessed via the Django QuerySet ``values`` method willnot be translated.In general, when a field is accessed, it will always return the translated version, if one exists.However, if a value is set, the exact value entered (and not the translated version) should be savedto the database. For example:.. code:: python    &gt;&gt;&gt; from django.utils.translation import activate    &gt;&gt;&gt; i = Ingredient(name=u'Lettuce')    &gt;&gt;&gt; activate('fr')    &gt;&gt;&gt; i.name    u'Laitue'    &gt;&gt;&gt; i.name = 'Cabbage'    &gt;&gt;&gt; i.name    u'Chou'    &gt;&gt;&gt; i.save()    &gt;&gt;&gt; Ingredient.objects.get(name='Cabbage').name    u'Chou'Help! The Admin is messing up all the vinaigrette fields whenever I save changes!---------------------------------------------------------------------------------Add ``vinaigrette.middleware.VinaigretteAdminLanguageMiddleware`` to your``settings.MIDDLEWARE`` to force the admin to always use the main language, andnot have vinaigrette mess with your change views.Contributing============Testing-------* Create a virtualenv for the project* Install ``tox``. When tox is run, it will create the test environments for  supported Django and Python versions and then run tests against themRelease Notes=============2.0.1-----* Rebuild for PyPI2.0.0-----* Remove Python 2 support* Allow running makemessages without specifying a locale (runs on all  locales)* Address Django upgrade warnings* Ensure that makemessages works when a non-English locale is active  during its execution1.2.1-----* Fix Python 2 support for makemessages  * Add a test for makemessages1.2.0--------* Added an optional contexts parameter for the register function, for  providing translation context for model fields.* Update middleware to the 1.10+ style  * Maintains backwards-compat with 1.9 and below    * Will now work in either ``MIDDLEWARE_CLASSES`` or ``MIDDLEWARE``  * Deprecates ``VinaigrettteAdminLanguageMiddleware`` for ``VinaigretteAdminLanguageMiddleware``    * Users should change to ``vinaigrette.middleware.VinaigretteAdminLanguageMiddleware``    * ``vinaigrette.VinaigrettteAdminLanguageMiddleware`` will continue to work until next major version* Adds tox and pytest for development and testing1.1.1-----* Update contact info1.1.0-----* Django 2.0 support1.0.1-----* Remembered to update version properly1.0.0-----* Add the ``--keep-vinaigrette-temp`` option which keeps the temporary file containing the generated list of translations* Added support for Django 1.9* Remove support for Django versions &lt; 1.80.5.0-----* Can specify properties to use instead of database field names in .register() function.0.4.0-----* Support for Django 1.70.3.0-----* Support for python 3.3.0.2.0-----* Bug fix for the --all option, it now works again.* New VinaigrettteAdminLanguageMiddleware middleware.0.1.3-----* Support for Django 1.6.</longdescription>
</pkgmetadata>