<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>lz==[![](https://github.com/lycantropos/lz/workflows/CI/badge.svg)](https://github.com/lycantropos/lz/actions/workflows/ci.yml &quot;Github Actions&quot;)[![](https://codecov.io/gh/lycantropos/lz/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/lz &quot;Codecov&quot;)[![](https://readthedocs.org/projects/lz/badge/?version=latest)](https://lz.readthedocs.io/en/latest &quot;Documentation&quot;)[![](https://img.shields.io/github/license/lycantropos/lz.svg)](https://github.com/lycantropos/lz/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/lz.svg)](https://badge.fury.io/py/lz &quot;PyPI&quot;)In what follows `python` is an alias for `python3.7` or `pypy3.7`or any later version (`python3.8`, `pypy3.8` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository```bashpython -m pip install --upgrade lz```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/lz.gitcd lz```Install dependencies```bashpython -m pip install -r requirements.txt```Install```bashpython setup.py install```Usage -----  `lz` provides a bunch of utilities for working with functions, predicates &amp; iterables such as1. [function composition](https://en.wikipedia.org/wiki/Function_composition)    ```python    &gt;&gt;&gt; from lz.functional import compose    &gt;&gt;&gt; sum_of_first_n_natural_numbers = compose(sum, range)    &gt;&gt;&gt; sum_of_first_n_natural_numbers(10)    45    ```2. [currying](https://en.wikipedia.org/wiki/Currying)    ```python    &gt;&gt;&gt; from lz.functional import curry     &gt;&gt;&gt; curried_power = curry(pow)     &gt;&gt;&gt; two_to_power = curried_power(2)     &gt;&gt;&gt; two_to_power(10)    1024    ```3. flipping positional parameters order    ```python    &gt;&gt;&gt; from lz.functional import flip    &gt;&gt;&gt; flipped_power = flip(pow)    &gt;&gt;&gt; flipped_power(2, 3)    9    ```4. packing function's arguments    ```python    &gt;&gt;&gt; from lz.functional import pack    &gt;&gt;&gt; packed_int = pack(int)    &gt;&gt;&gt; packed_int(['10'])    10    &gt;&gt;&gt; packed_int(['10'], {'base': 2})    2    ```5. left [partial application](https://en.wikipedia.org/wiki/Partial_application)    ```python    &gt;&gt;&gt; from lz import left    &gt;&gt;&gt; count_from_zero_to = left.applier(range, 0)    &gt;&gt;&gt; list(count_from_zero_to(10))    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]    ```6. right [partial application](https://en.wikipedia.org/wiki/Partial_application)    ```python    &gt;&gt;&gt; from lz import right    &gt;&gt;&gt; square = right.applier(pow, 2)    &gt;&gt;&gt; square(10)    100    ```7. [negating](https://en.wikipedia.org/wiki/Negation) predicate    ```python    &gt;&gt;&gt; from lz.logical import negate    &gt;&gt;&gt; false_like = negate(bool)    &gt;&gt;&gt; false_like([])    True    &gt;&gt;&gt; false_like([0])    False    ```8. [conjoining](https://en.wikipedia.org/wiki/Logical_conjunction) predicates    ```python    &gt;&gt;&gt; from lz.logical import conjoin    &gt;&gt;&gt; is_valid_constant_identifier = conjoin(str.isupper, str.isidentifier)    &gt;&gt;&gt; is_valid_constant_identifier('SECOND_SECTION')    True    &gt;&gt;&gt; is_valid_constant_identifier('2ND_SECTION')    False    ```9. [disjoining](https://en.wikipedia.org/wiki/Logical_disjunction) predicates    ```python    &gt;&gt;&gt; from lz.logical import disjoin    &gt;&gt;&gt; alphabetic_or_numeric = disjoin(str.isalpha, str.isnumeric)    &gt;&gt;&gt; alphabetic_or_numeric('Hello')    True    &gt;&gt;&gt; alphabetic_or_numeric('42')    True    &gt;&gt;&gt; alphabetic_or_numeric('Hello42')    False    ```10. [exclusive disjoining](https://en.wikipedia.org/wiki/Exclusive_or) predicates    ```python    &gt;&gt;&gt; from lz.logical import exclusive_disjoin    &gt;&gt;&gt; from keyword import iskeyword    &gt;&gt;&gt; valid_object_name = exclusive_disjoin(str.isidentifier, iskeyword)    &gt;&gt;&gt; valid_object_name('valid_object_name')    True    &gt;&gt;&gt; valid_object_name('_')    True    &gt;&gt;&gt; valid_object_name('1')    False    &gt;&gt;&gt; valid_object_name('lambda')    False    ```11. reversing sequences and any string streams    ```python    &gt;&gt;&gt; from lz.reversal import reverse    &gt;&gt;&gt; list(reverse(range(10)))    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]    &gt;&gt;&gt; import io    &gt;&gt;&gt; list(reverse(io.BytesIO(b'Hello\nWorld!')))    [b'World!', b'Hello\n']    ```12. chunking iterable    ```python    &gt;&gt;&gt; from lz.iterating import chopper    &gt;&gt;&gt; to_triplets = chopper(3)    &gt;&gt;&gt; list(map(tuple, to_triplets(range(10))))    [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]    ```13. sliding over iterable    ```python    &gt;&gt;&gt; from lz.iterating import slider    &gt;&gt;&gt; slide_pairwise = slider(2)    &gt;&gt;&gt; list(slide_pairwise(range(10)))    [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]     ```14. [interleaving](https://en.wikipedia.org/wiki/Interleave_sequence) iterables    ```python    &gt;&gt;&gt; from lz.iterating import interleave    &gt;&gt;&gt; list(interleave([range(10), range(10, 20)]))    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]      ```15. iterable [transposition](https://en.wikipedia.org/wiki/Transpose)    ```python    &gt;&gt;&gt; from lz.transposition import transpose    &gt;&gt;&gt; list(map(tuple, transpose(zip(range(10), range(10, 20)))))    [(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18, 19)]     ```16. iterable duplication    ```python    &gt;&gt;&gt; from lz.replication import duplicate    &gt;&gt;&gt; list(map(tuple, duplicate(range(10))))    [(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]      ```and [many more](https://lz.readthedocs.io/en/latest).Development-----------### Building docsInstall project in editable mode```bashpython -m pip install -e .```Install dependencies```bashpython -m pip install -r docs/requirements.txt```Build docs```bashcd docsmake html```### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies```bashpython -m pip install -r requirements-tests.txt```Plain```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script (e.g. can be used in `Git` hooks):- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script (e.g. can be used in `Git` hooks):- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>