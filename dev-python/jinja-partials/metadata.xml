<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Jinja PartialsSimple reuse of partial HTML page templates in the Jinja template language for Python web frameworks.(There is also a [Pyramid/Chameleon version here](https://github.com/mikeckennedy/chameleon_partials).)## OverviewWhen building real-world web apps with Flask + Jinja2, it's easy to end up with repeated HTML fragments.Just like organizing code for reuse, it would be ideal to reuse smaller sections of HTML template code.That's what this library is all about.## ExampleThis project comes with a sample flask application (see the `example` folder). This app displays videosthat can be played on YouTube. The image, subtitle of author and view count are reused throughout theapp. Here's a visual:![](https://raw.githubusercontent.com/mikeckennedy/jinja_partials/main/readme_resources/reused-html-visual.png)Check out the [**demo / example application**](https://github.com/mikeckennedy/jinja_partials/tree/main/example) to see it in action. ## InstallationIt's just `pip install jinja-partials` and you're all set with this pure Python package.## UsageUsing the library is incredible easy. The first step is to register the partial method with Jinja and Flask.Do this once at app startup:```pythonimport flaskimport jinja_partialsapp = flask.Flask(__name__)jinja_partials.register_extensions(app)# ...```You can also use this library in your FastAPI (or Starlette) project!```pythonfrom fastapi.templating import Jinja2Templates# or `from starlette.templating import Jinja2Templates`import jinja_partialstemplates = Jinja2Templates(&quot;tests/test_templates&quot;)jinja_partials.register_starlette_extensions(templates)# ...```Next, you define your main HTML (Jinja2) templates as usual. Then define your partial templates. I recommend locating and naming them accordingly:```├── templates│   ├── home│   │   ├── index.html│   │   └── listing.html│   └── shared│       ├── _layout.html│       └── partials│           ├── video_image.html│           └── video_square.html```Notice the `partials` subfolder in the `templates/shared` folder.The templates are just HTML fragments. Here is a stand-alone one for the YouTube thumbnail fromthe example app:```html&lt;img src=&quot;https://img.youtube.com/vi/{{ video.id }}/maxresdefault.jpg&quot;     class=&quot;img img-responsive {{ ' '.join(classes) }}&quot;     alt=&quot;{{ video.title }}&quot;     title=&quot;{{ video.title }}&quot;&gt;```Notice that an object called `video` and list of classes are passed in as the model.Templates can also be nested. Here is the whole single video fragment with the image as well as other infolinking out to YouTube:```html&lt;div&gt;    &lt;a href=&quot;https://www.youtube.com/watch?v={{ video.id }}&quot; target=&quot;_blank&quot;&gt;        {{ render_partial('shared/partials/video_image.html', video=video) }}    &lt;/a&gt;    &lt;a href=&quot;https://www.youtube.com/watch?v={{ video.id }}&quot; target=&quot;_blank&quot;       class=&quot;author&quot;&gt;{{ video.author }}&lt;/a&gt;    &lt;div class=&quot;views&quot;&gt;{{ &quot;{:,}&quot;.format(video.views) }} views&lt;/div&gt;&lt;/div&gt;```Now you see the `render_partial()` method. It takes the subpath into the templates folder andany model data passed in as keyword arguments.We can finally generate the list of video blocks as follows:```html{% for v in videos %}    &lt;div class=&quot;col-md-3 video&quot;&gt;        {{ render_partial('shared/partials/video_square.html', video=v) }}    &lt;/div&gt;{% endfor %}```This time, we reframe each item in the list from the outer template (called `v`) as the `video` modelin the inner HTML section.## Why not just use `include` or `macro` from Jinja?The short answer is they are nearly the same, but both fall short in different ways. For a more detailed response, see the discussion on [**issue #1**](https://github.com/mikeckennedy/jinja_partials/issues/1)</longdescription>
</pkgmetadata>