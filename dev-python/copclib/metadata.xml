<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># copc-libcopc-lib provides an easy-to-use reader and writer interface for [COPC](https://copc.io/) point clouds, with bindings for python and C++.## InstallationThe quickest way to get started with copc-lib is with our conda and pip packages.### CondaConda includes both the C++ and python bindings:```bashconda install -c conda-forge copc-lib```### PipPip provide only python bindings:```bashpip install copclib```### Building from source#### Dependenciescopc-lib has the following dependencies:- laz-perf&gt;=[3.0.0](https://github.com/hobu/laz-perf/releases/tag/3.0.0)- Catch2 v2.x (test suite only)- Pybind11 (python bindings only)To install all dependencies:```bashconda install -c conda-forge &quot;laz-perf&gt;=3.0&quot; Catch2=2.13 pybind11```#### C++```bashgit clone https://github.com/RockRobotic/copc-lib.gitcd copc-libmkdir build &amp;&amp; cd buildcmake ..cmake --build .sudo cmake --install .```#### Python```bashgit clone https://github.com/RockRobotic/copc-lib.gitpip install ./copc-lib```#### Example Files &amp; Unit TestsTo build the copc-lib examples and unit tests along with the main library, you must enable them:```bashmkdir build &amp;&amp; cd buildcmake .. -DWITH_TESTS=ON -DWITH_PYTHON=ONcmake --build .ctest # All tests should pass```## UsageThe `Reader` and `Writer` objects provide the primary means of interfacing with your COPC files. For more complex use cases, we also provide additional objects such as LAZ Compressors and Decompressors (see [example/example-writer.cpp](example/example-writer.cpp)).For common use cases, see the `example` and `test` folders for full examples.### C++copc-lib is compatible with CMake. Assuming copc-lib and lazperf are installed on the system, you can link with them in your `CMakeLists.txt`:```CMakefind_package(COPCLIB REQUIRED)find_package(LAZPERF REQUIRED)add_executable(funlib fun-main.cpp)target_link_libraries(funlib COPCLIB::copc-lib LAZPERF::lazperf)```The primary public interface will be your [FileReader](./cpp/include/copc-lib/io/copc_reader.hpp) and [FileWriter](./cpp/include/copc-lib/io/copc_writer.hpp) objects. Check the headers and [example files](./example) for documentation.```cpp#include &lt;iostream&gt;#include &lt;copc-lib/io/reader.hpp&gt;void main(){    // Create a reader object    FileReader reader(&quot;autzen-classified.copc.laz&quot;);    // Get the node metadata from the hierarchy    auto node = reader.FindNode(copc.VoxelKey(0, 0, 0, 0));    // Fetch the points of a node    auto points = reader.GetPoints(node);    // Iterate through each point    for (const auto &amp;point : points)        std::cout &lt;&lt; &quot;X: &quot; &lt;&lt; point.X &quot;, Y: &quot; &lt;&lt; point.Y &lt;&lt; &quot;, Z: &quot; &lt;&lt; point.Z  &lt;&lt; std::endl;}```### Python[Example files](./example) are also provided for python.```pythonimport copclib as copc# Create a reader objectreader = copc.FileReader(&quot;autzen-classified.copc.laz&quot;)# Get the node metadata from the hierarchynode = reader.FindNode(copc.VoxelKey(0, 0, 0, 0))# Fetch the points of a nodepoints = reader.GetPoints(node)# Iterate through each pointfor point in points:    print(point.x, point.y, point.z)```Note that, in python, dimension names for points follow the [laspy naming scheme](https://laspy.readthedocs.io/en/latest/intro.html#point-format-6), with the exception of `scan_angle`.## Helpful Links- [COPC Spec](https://copc.io/)- [copc.js](https://github.com/connormanning/copc.js) - TypeScript library for reading COPC files- [copc.js for browser](https://github.com/connormanning/copc.js/pull/1) - Webpacked version of copc.js for the browser## ContributingPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.Please make sure to update tests as appropriate.## LicensePlease see [LICENSE.md](LICENSE.md)## Creditscopc-lib is created and maintained by [Chris Lee](https://github.com/CCInc), [Leo Stanislas](https://github.com/leo-stan) and other members of [RockRobotic](https://github.com/RockRobotic).The [COPC file format](https://copc.io) is created and maintained by HOBU Inc.Some code has been adopted from [PDAL](https://github.com/PDAL/PDAL) and [lazperf](https://github.com/hobu/laz-perf), both of which are maintained by HOBU Inc.</longdescription>
</pkgmetadata>