<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># StepFunctions Activity WorkerA worker that listens to a StepFunctions activity and executes a provided function using the inputs from the activity task.The StepFunctions Activity Worker encapsulates all the parts of communicating with the StepFunctions API so you don't have to worry about task heartbeats or maintaining task tokens and success/failure scenarios; all you have to worry about is executing the task.### InstallationInstall from [PyPI](https://pypi.org/project/stepfunctions-activity-worker/):```pip install stepfunctions_activity_worker```### Usage```pythonfrom stepfunctions_activity_worker import ActivityWorkerdef my_task(**task_input):    &quot;&quot;&quot;Perform the task based on this task's input.&quot;&quot;&quot;    # Perform your task here!     return {&quot;result&quot;: &quot;done!&quot;}if __name__ == &quot;__main__&quot;:    activity_arn = &quot;PLACE YOUR ACTIVITY ARN HERE&quot;    worker = ActivityWorker(activity_arn, my_task)    worker.listen()```## WarningThe `ActivityWorker` class, if not provided with a `client` argument on instantiation, will create a *properly configured* client from your default session.However, if you are providing an already instantiated `client` to the `ActivityWorker` class, *make sure it is proply configured to make StepFunctions API calls*!The [`GetActivityTask` API call](https://docs.aws.amazon.com/step-functions/latest/apireference/API_GetActivityTask.html) __blocks for 60 seconds__ which *matches* the [`botocore.config.Config` default `read_timeout`](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html). This means that if the API response for `GetActivityTask` is not punctual (which it often isn't) it will cause unnecessary retry-requests &amp; eventually bubble up an HTTP exception.```pythonimport boto3import botocorefrom stepfunctions_activity_worker import ActivityWorkerdef my_task(**task_input):    &quot;&quot;&quot;Perform the task based on this task's input.&quot;&quot;&quot;    # Perform your task here!     return {&quot;result&quot;: &quot;done!&quot;}config = botocore.config.Config(  read_timeout=70,  # Insert other custom configuration here)stepfunctions = boto3.client('stepfunctions', config=config)activity_worker = ActivityWorker(activity_arn, my_task, client=stepfunctions)```</longdescription>
</pkgmetadata>