<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyCognitoMakes working with AWS Cognito easier for Python developers.## Getting Started- [Python Versions Supported](#python-versions-supported)- [Install](#install)- [Environment Variables](#environment-variables)  - [COGNITO_JWKS](#cognito-jwks) (optional)- [Cognito Utility Class](#cognito-utility-class) `pycognito.Cognito`  - [Cognito Methods](#cognito-methods)    - [Register](#register)    - [Authenticate](#authenticate)    - [Admin Authenticate](#admin-authenticate)    - [Initiate Forgot Password](#initiate-forgot-password)    - [Confirm Forgot Password](#confirm-forgot-password)    - [Change Password](#change-password)    - [Confirm Sign Up](#confirm-sign-up)    - [Update Profile](#update-profile)    - [Send Verification](#send-verification)    - [Get User Object](#get-user-object)    - [Get User](#get-user)    - [Get Users](#get-users)    - [Get Group Object](#get-group-object)    - [Get Group](#get-group)    - [Get Groups](#get-groups)    - [Check Token](#check-token)    - [Verify Tokens](#verify-tokens)    - [Logout](#logout)    - [Associate Software Token](#associate-software-token)    - [Verify Software Token](#verify-software-token)    - [Set User MFA Preference](#set-user-mfa-preference)    - [Respond to Software Token MFA challenge](#respond-to-software-token-mfa-challenge)    - [Respond to SMS MFA challenge](#respond-to-sms-mfa-challenge)- [Cognito SRP Utility](#cognito-srp-utility)  - [Using AWSSRP](#using-awssrp)- [SRP Requests Authenticator](#srp-requests-authenticator)## Python Versions Supported- 3.6- 3.7- 3.8## Install`pip install pycognito`## Environment Variables#### COGNITO_JWKS**Optional:** This environment variable is a dictionary that represent the well known JWKs assigned to your user pool by AWS Cognito. You can find the keys for your user pool by substituting in your AWS region and pool id for the following example.`https://cognito-idp.{aws-region}.amazonaws.com/{user-pool-id}/.well-known/jwks.json`**Example Value (Not Real):**```commandlineCOGNITO_JWKS={&quot;keys&quot;: [{&quot;alg&quot;: &quot;RS256&quot;,&quot;e&quot;: &quot;AQAB&quot;,&quot;kid&quot;: &quot;123456789ABCDEFGHIJKLMNOP&quot;,&quot;kty&quot;: &quot;RSA&quot;,&quot;n&quot;: &quot;123456789ABCDEFGHIJKLMNOP&quot;,&quot;use&quot;: &quot;sig&quot;},{&quot;alg&quot;: &quot;RS256&quot;,&quot;e&quot;: &quot;AQAB&quot;,&quot;kid&quot;: &quot;123456789ABCDEFGHIJKLMNOP&quot;,&quot;kty&quot;: &quot;RSA&quot;,&quot;n&quot;: &quot;123456789ABCDEFGHIJKLMNOP&quot;,&quot;use&quot;: &quot;sig&quot;}]}```## Cognito Utility Class### Example with All Arguments```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id',    client_secret='optional-client-secret'    username='optional-username',    id_token='optional-id-token',    refresh_token='optional-refresh-token',    access_token='optional-access-token',    access_key='optional-access-key',    secret_key='optional-secret-key')```#### Arguments- **user_pool_id:** Cognito User Pool ID- **client_id:** Cognito User Pool Application client ID- **client_secret:** App client secret (if app client is configured with client secret)- **username:** User Pool username- **id_token:** ID Token returned by authentication- **refresh_token:** Refresh Token returned by authentication- **access_token:** Access Token returned by authentication- **access_key:** AWS IAM access key- **secret_key:** AWS IAM secret key### Examples with Realistic Arguments#### User Pool Id and Client ID OnlyUsed when you only need information about the user pool (ex. list users in the user pool)```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id')```#### UsernameUsed when the user has not logged in yet. Start with these arguments when you plan to authenticate with either SRP (authenticate) or admin_authenticate (admin_initiate_auth).```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id',    username='bob')```#### TokensUsed after the user has already authenticated and you need to build a new Cognito instance (ex. for use in a view).```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id',    id_token='your-id-token',    refresh_token='your-refresh-token',    access_token='your-access-token')u.verify_tokens() # See method doc below; may throw an exception```## Cognito AttributesAfter any authentication or other explicit verification of tokens, the following additional attributes will be available:- `id_claims` — A dict of verified claims from the id token- `access_claims` — A dict of verified claims from the access token## Cognito Methods#### RegisterRegister a user to the user pool**Important:** The arguments for `set_base_attributes` and `add_custom_attributes` methods depend on your user pool's configuration, and make sure the client id (app id) used has write permissions for the attributes you are trying to create. Example, if you want to create a user with a given_name equal to Johnson make sure the client_id you're using has permissions to edit or create given_name for a user in the pool.```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id', 'your-client-id')u.set_base_attributes(email='you@you.com', some_random_attr='random value')u.register('username', 'password')```Register with custom attributes.Firstly, add custom attributes on 'General settings -&gt; Attributes' page.Secondly, set permissions on 'Generals settings-&gt; App clients-&gt; Show details-&gt; Set attribute read and write permissions' page.```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id', 'your-client-id')u.set_base_attributes(email='you@you.com', some_random_attr='random value')u.add_custom_attributes(state='virginia', city='Centreville')u.register('username', 'password')```##### Arguments- **username:** User Pool username- **password:** User Pool password- **attr_map:** Attribute map to Cognito's attributes#### AuthenticateAuthenticates a userIf this method call succeeds the instance will have the following attributes **id_token**, **refresh_token**, **access_token**, **expires_in**, **expires_datetime**, and **token_type**.```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id',    username='bob')u.authenticate(password='bobs-password')```##### Arguments- **password:** - User's password#### Admin AuthenticateAuthenticate the user using admin super privileges```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id',    username='bob')u.admin_authenticate(password='bobs-password')```- **password:** User's password#### Initiate Forgot PasswordSends a verification code to the user to use to change their password.```pythonu = Cognito('your-user-pool-id','your-client-id',    username='bob')u.initiate_forgot_password()```##### ArgumentsNo arguments#### Confirm Forgot PasswordAllows a user to enter a code provided when they reset their passwordto update their password.```pythonu = Cognito('your-user-pool-id','your-client-id',    username='bob')u.confirm_forgot_password('your-confirmation-code','your-new-password')```##### Arguments- **confirmation_code:** The confirmation code sent by a user's request  to retrieve a forgotten password- **password:** New password#### Change PasswordChanges the user's password```pythonfrom pycognito import Cognito#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')u.change_password('previous-password','proposed-password')```##### Arguments- **previous_password:** - User's previous password- **proposed_password:** - The password that the user wants to change to.#### Confirm Sign UpUse the confirmation code that is sent via email or text to confirm the user's account```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id')u.confirm_sign_up('users-conf-code',username='bob')```##### Arguments- **confirmation_code:** Confirmation code sent via text or email- **username:** User's username#### Update ProfileUpdate the user's profile```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')u.update_profile({'given_name':'Edward','family_name':'Smith',},attr_map=dict())```##### Arguments- **attrs:** Dictionary of attribute name, values- **attr_map:** Dictionary map from Cognito attributes to attribute names we would like to show to our users#### Send VerificationSend verification email or text for either the email or phone attributes.```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')u.send_verification(attribute='email')```##### Arguments- **attribute:** - The attribute (email or phone) that needs to be verified#### Get User ObjectReturns an instance of the specified user_class.```pythonu = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')u.get_user_obj(username='bjones',    attribute_list=[{'Name': 'string','Value': 'string'},],    metadata={},    attr_map={&quot;given_name&quot;:&quot;first_name&quot;,&quot;family_name&quot;:&quot;last_name&quot;}    )```##### Arguments- **username:** Username of the user- **attribute_list:** List of tuples that represent the user's attributes as returned by the admin_get_user or get_user boto3 methods- **metadata: (optional)** Metadata about the user- **attr_map: (optional)** Dictionary that maps the Cognito attribute names to what we'd like to display to the users#### Get UserGet all of the user's attributes. Gets the user's attributes using Boto3 and uses that info to create an instance of the user_class```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id',    username='bob')user = u.get_user(attr_map={&quot;given_name&quot;:&quot;first_name&quot;,&quot;family_name&quot;:&quot;last_name&quot;})```##### Arguments- **attr_map:** Dictionary map from Cognito attributes to attribute names we would like to show to our users#### Get UsersGet a list of the user in the user pool.```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id')user = u.get_users(attr_map={&quot;given_name&quot;:&quot;first_name&quot;,&quot;family_name&quot;:&quot;last_name&quot;})```##### Arguments- **attr_map:** Dictionary map from Cognito attributes to attribute names we would like to show to our users#### Get Group objectReturns an instance of the specified group_class.```pythonu = Cognito('your-user-pool-id', 'your-client-id')group_data = {'GroupName': 'user_group', 'Description': 'description',            'Precedence': 1}group_obj = u.get_group_obj(group_data)```##### Arguments- **group_data:** Dictionary with group's attributes.#### Get GroupGet all of the group's attributes. Returns an instance of the group_class.Requires developer credentials.```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id')group = u.get_group(group_name='some_group_name')```##### Arguments- **group_name:** Name of a group#### Get GroupsGet a list of groups in the user pool. Requires developer credentials.```pythonfrom pycognito import Cognitou = Cognito('your-user-pool-id','your-client-id')groups = u.get_groups()```#### Check TokenChecks the exp attribute of the access_token and either refreshes the tokens by calling the renew_access_tokens method or does nothing. **IMPORTANT:** Access token is required```pythonu = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')u.check_token()```##### ArgumentsNo arguments for check_token#### Verify TokensVerifies the current `id_token` and `access_token`.An exception will be thrown if they do not pass verification.It can be useful to call this method immediately after instantiation when you're providing externally-remembered tokens to the `Cognito()` constructor.Note that if you're calling `check_tokens()` after instantitation, you'll still want to call `verify_tokens()` afterwards it in case it did nothing.This method also ensures that the `id_claims` and `access_claims` attributes are set with the verified claims from each token.```pythonu = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')u.check_tokens()  # Optional, if you want to maybe renew the tokensu.verify_tokens()```##### ArgumentsNo arguments for verify_tokens#### LogoutLogs the user out of all clients and removes the expires_in, expires_datetime, id_token, refresh_token, access_token, and token_type attributes.```pythonfrom pycognito import Cognito#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')u.logout()```##### ArgumentsNo arguments for logout#### Associate Software TokenGet the secret code to issue the software token MFA code.Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user.```pythonfrom pycognito import Cognito#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')secret_code = u.associate_software_token()# Display the secret_code to the user and enter it into a TOTP generator (such as Google Authenticator) to have them generate a 6-digit code.```##### ArgumentsNo arguments for associate_software_token#### Verify Software TokenVerify the 6-digit code issued based on the secret code issued by associate_software_token. If this validation is successful, Cognito will enable Software token MFA.```pythonfrom pycognito import Cognito#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')secret_code = u.associate_software_token()# Display the secret_code to the user and enter it into a TOTP generator (such as Google Authenticator) to have them generate a 6-digit code.code = input('Enter the 6-digit code.')device_name = input('Enter the device name')u.verify_software_token(code, device_name)```##### Arguments- **code:** 6-digit code generated by the TOTP generator app- **device_name:** Name of a device#### Set User MFA PreferenceEnable and prioritize Software Token MFA and SMS MFA.If both Software Token MFA and SMS MFA are invalid, the preference value will be ignored.```pythonfrom pycognito import Cognito#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    id_token='id-token',refresh_token='refresh-token',    access_token='access-token')# SMS MFA are valid. SMS preference.u.set_user_mfa_preference(True, False, &quot;SMS&quot;)# Software Token MFA are valid. Software token preference.u.set_user_mfa_preference(False, True, &quot;SOFTWARE_TOKEN&quot;)# Both Software Token MFA and SMS MFA are valid. Software token preferenceu.set_user_mfa_preference(True, True, &quot;SOFTWARE_TOKEN&quot;)# Both Software Token MFA and SMS MFA are disabled.u.set_user_mfa_preference(False, False)```##### Arguments- **sms_mfa:** SMS MFA enabled / disabled (bool)- **software_token_mfa:** Software Token MFA enabled / disabled (bool)- **preferred:** Which is the priority, SMS or Software Token? The expected value is &quot;SMS&quot; or &quot;SOFTWARE_TOKEN&quot;. However, it is not needed only if both of the previous arguments are False.#### Respond to Software Token MFA challengeResponds when a Software Token MFA challenge is requested at login.```pythonfrom pycognito import Cognitofrom pycognito.exceptions import SoftwareTokenMFAChallengeException#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    username='bob')try:    u.authenticate(password='bobs-password')except SoftwareTokenMFAChallengeException as error:    code = input('Enter the 6-digit code generated by the TOTP generator (such as Google Authenticator).')    u.respond_to_software_token_mfa_challenge(code)```When recreating a Cognito instance```pythonfrom pycognito import Cognitofrom pycognito.exceptions import SoftwareTokenMFAChallengeException#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    username='bob')try:    u.authenticate(password='bobs-password')except SoftwareTokenMFAChallengeException as error:    mfa_tokens = error.get_tokens()u = Cognito('your-user-pool-id','your-client-id',    username='bob')code = input('Enter the 6-digit code generated by the TOTP generator (such as Google Authenticator).')u.respond_to_software_token_mfa_challenge(code, mfa_tokens)```##### Arguments- **code:** 6-digit code generated by the TOTP generator app- **mfa_tokens:** mfa_token stored in MFAChallengeException. Not required if you have not regenerated the Cognito instance.#### Respond to SMS MFA challengeResponds when a SMS MFA challenge is requested at login.```pythonfrom pycognito import Cognitofrom pycognito.exceptions import SMSMFAChallengeException#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    username='bob')try:    u.authenticate(password='bobs-password')except SMSMFAChallengeException as error:    code = input('Enter the 6-digit code you received by SMS.')    u.respond_to_sms_mfa_challenge(code)```When recreating a Cognito instance```pythonfrom pycognito import Cognitofrom pycognito.exceptions import SMSMFAChallengeException#If you don't use your tokens then you will need to#use your username and password and call the authenticate methodu = Cognito('your-user-pool-id','your-client-id',    username='bob')try:    u.authenticate(password='bobs-password')except SMSMFAChallengeException as error:    mfa_tokens = error.get_tokens()u = Cognito('your-user-pool-id','your-client-id',    username='bob')code = input('Enter the 6-digit code generated by the TOTP generator (such as Google Authenticator).')u.respond_to_sms_mfa_challenge(code, mfa_tokens)```##### Arguments- **code:** 6-digit code you received by SMS- **mfa_tokens:** mfa_token stored in MFAChallengeException. Not required if you have not regenerated the Cognito instance.## Cognito SRP UtilityThe `AWSSRP` class is used to perform [SRP(Secure Remote Password protocol)](https://www.ietf.org/rfc/rfc2945.txt) authentication.This is the preferred method of user authentication with AWS Cognito.The process involves a series of authentication challenges and responses, which if successful,results in a final response that contains ID, access and refresh tokens.### Using AWSSRPThe `AWSSRP` class takes a username, password, cognito user pool id, cognito app id, an optionalclient secret (if app client is configured with client secret), an optional pool_region or `boto3` client.Afterwards, the `authenticate_user` class method is used for SRP authentication.```pythonimport boto3from pycognito.aws_srp import AWSSRPclient = boto3.client('cognito-idp')aws = AWSSRP(username='username', password='password', pool_id='user_pool_id',             client_id='client_id', client=client)tokens = aws.authenticate_user()```## SRP Requests Authenticator`pycognito.utils.RequestsSrpAuth` is a [Requests](https://docs.python-requests.org/en/latest/)authentication plugin to automatically populate an HTTP header with a Cognito token. By default, it'll populatethe `Authorization` header using the Cognito Access Token as a `bearer` token.`RequestsSrpAuth` handles fetching new tokens using the refresh tokens.### Usage```pythonimport requestsfrom pycognito.utils import RequestsSrpAuthauth = RequestsSrpAuth(  username='myusername',  password='secret',  user_pool_id='eu-west-1_1234567',  client_id='4dn6jbcbhqcofxyczo3ms9z4cc',  user_pool_region='eu-west-1',)response = requests.get('http://test.com', auth=auth)```</longdescription>
</pkgmetadata>