<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Welcome to GIMERAAdvanced handling of submodules by integrating them or handling as submodules as you knowbut provide auto merge functions of hotfixes from other repositories or inside.Rule of thumb: * no data is lost, it is safe to call gimera.If there are staged files, gimera wont continue.During run of gimera commits are done for example after pulling submodules or updatinglocal paths.## How to install:```bashpipx install gimeragimera completion  (Follow instructions)```## How to use:Put gimera.yml into your root folder of your project:```yamlcommon:  vars:    VERSION: '15.0'repos:    # make ordinary git submodule:    - url: &quot;https://github.com/foo/bar&quot;      branch: branch1_${VERSION}      path: roles/sub1      patches: []      type: submodule      # default True      enabled: True    # instead of submodule put the content directly in the repository;    # apply patches from local git repository    - url: &quot;https://github.com/foo/bar&quot;      branch: branch1      path: roles2/sub1      patches:          - 'roles2/sub1_patches'      type: integrated    # apply patches from another remote repository    #    - url: &quot;https://github.com/foo/bar&quot;      branch: branch1      path: roles2/sub1      remotes:          remote2: https://github.com/foo2/bar2      merges:          - remote2 main          - origin refs/pull/1/head      type: integrated```Patches and remote merges may be combined.Then execute:```bashgimera apply```## How to make a patchfile:From the example above:  * edit roles2/sub1/file1.txt```bashgimera apply```Then a patch file is created as suggestion in roles2/sub1_patches which you may commit and push.### Re-Edit patch file:```bashgimera edit-patch file1.patch file2.patch```  * by this, you can combine several patch files into one again## How to fetch only one or more repo:```bashgimera apply repo_path repo_path2 repo_path3````## How to fetch latest versions:```bashgimera apply --update```Latest versions are pulled and patches are applied.## Force Integrated or Submodule mode for repo and subrepositoriesUse Case: you have an integrated repository. Now you want to turn it into submodule,to easily commit and push changes. Then you do:```bashgimera apply &lt;path&gt; -S```Now although it is configured as integrated, it is now a submodule.After that you can go back to default settings or force integrated mode.You should call update to pull the latest version.```bashgimera apply &lt;path&gt; -I --update```## Recursive setupIf you have your tools in git submodules and depending where you add your modulesspecific patches have to be applied, you can use the following structure. A concreteuse case is for example odoo and using sub modules.So instead of creating a branch for 13.0 / 14.0 / 15.0 / 16.0 you just create themain branch and working on version 14.0 for example. Then you create patch dirsfor each version.In the submodule:```yamlgimera.ymlcommon:  patches:    - patches/${VERSION}```The main gimera which integrates the submodule should be:```yamlcommon:  vars:    VERSION: 15.0repos:  type: integrated  url: .....  path: sub1```After that a recursive gimera is required.```gimera apply -r```## Contributors  * Michael Tietz (mtietz@mt-software.de)  * Walter Saltzmann## install directly```bashpip install git+https://github.com/marcwimmer/gimera```</longdescription>
</pkgmetadata>