<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GrowthBook Python SDKPowerful Feature flagging and A/B testing for Python apps.![Build Status](https://github.com/growthbook/growthbook-python/workflows/Build/badge.svg)-   **Lightweight and fast**-   **Local evaluation**, no network requests required-   Python 3.6+-   100% test coverage-   Flexible **targeting**-   **Use your existing event tracking** (GA, Segment, Mixpanel, custom)-   **Remote configuration** to change feature flags without deploying new code## Installation`pip install growthbook` (recommended) or copy `growthbook.py` into your project## Quick Usage```pythonfrom growthbook import GrowthBook# User attributes for targeting and experimentationattributes = {  &quot;id&quot;: &quot;123&quot;,  &quot;customUserAttribute&quot;: &quot;foo&quot;}def on_experiment_viewed(experiment, result):  # Use whatever event tracking system you want  analytics.track(attributes[&quot;id&quot;], &quot;Experiment Viewed&quot;, {    'experimentId': experiment.key,    'variationId': result.variationId  })# Create a GrowthBook instancegb = GrowthBook(  attributes = attributes,  on_experiment_viewed = on_experiment_viewed,  api_host = &quot;https://cdn.growthbook.io&quot;,  client_key = &quot;sdk-abc123&quot;)# Load features from the GrowthBook API with cachinggb.load_features()# Simple on/off feature gatingif gb.is_on(&quot;my-feature&quot;):  print(&quot;My feature is on!&quot;)# Get the value of a feature with a fallbackcolor = gb.get_feature_value(&quot;button-color-feature&quot;, &quot;blue&quot;)```### Web Frameworks (Django, Flask, etc.)For web frameworks, you should create a new `GrowthBook` instance for every incoming request and call `destroy()` at the end of the request to clean up resources.In Django, for example, this is best done with a simple middleware:```pythonfrom growthbook import GrowthBookdef growthbook_middleware(get_response):    def middleware(request):        request.gb = GrowthBook(          # ...        )        request.gb.load_features()        response = get_response(request)        request.gb.destroy() # Cleanup        return response    return middleware```Then, you can easily use GrowthBook in any of your views:```pythondef index(request):    feature_enabled = request.gb.is_on(&quot;my-feature&quot;)    # ...```## Loading FeaturesThere are two ways to load feature flags into the GrowthBook SDK. You can either use the built-in fetching/caching logic or implement your own custom solution.### Built-in Fetching and CachingTo use the built-in fetching and caching logic, in the `GrowthBook` constructor, pass in your GrowthBook `api_host` and `client_key`. If you have encryption enabled for your GrowthBook endpoint, you also need to pass the `decryption_key` into the constructor.Then, call the `load_features()` method to initiate the HTTP request with a cache layer.Here's a full example:```pythongb = GrowthBook(  api_host = &quot;https://cdn.growthbook.io&quot;,  client_key = &quot;sdk-abc123&quot;,  # How long to cache features in seconds (Optional, default 60s)  cache_ttl = 60,)gb.load_features()```#### CachingGrowthBook comes with a custom in-memory cache. If you run Python in a multi-process mode, the different processes cannot share memory, so you likely want to switch to a distributed cache system like Redis instead.Here is an example of using Redis:```pythonfrom redis import Redisimport jsonfrom growthbook import GrowthBook, AbstractFeatureCache, feature_repoclass RedisFeatureCache(AbstractFeatureCache):  def __init__(self):    self.r = Redis(host='localhost', port=6379)    self.prefix = &quot;gb:&quot;  def get(self, key: str):    data = self.r.get(self.prefix + key)    # Data stored as a JSON string, parse into dict before returning    return None if data is None else json.loads(data)  def set(self, key: str, value: dict, ttl: int) -&gt; None:    self.r.set(self.prefix + key, json.dumps(value))    self.r.expire(self.prefix + key, ttl)# Configure GrowthBook to use your custom cache classfeature_repo.set_cache(RedisFeatureCache())```### Custom ImplementationIf you prefer to handle the entire fetching/caching logic yourself, you can just pass in a `dict` of features from the GrowthBook API directly into the constructor:```python# From the GrowthBook APIfeatures = {'my-feature':{'defaultValue':False}}gb = GrowthBook(  features = features)```Note: When doing this, you do not need to specify your `api_host` or `client_key` and you don't need to call `gb.load_features()`.## GrowthBook classThe GrowthBook constructor has the following parameters:-   **enabled** (`bool`) - Flag to globally disable all experiments. Default true.-   **attributes** (`dict`) - Dictionary of user attributes that are used for targeting and to assign variations-   **url** (`str`) - The URL of the current request (if applicable)-   **qa_mode** (`boolean`) - If true, random assignment is disabled and only explicitly forced variations are used.-   **on_experiment_viewed** (`callable`) - A function that takes `experiment` and `result` as arguments.-   **api_host** (`str`) - The GrowthBook API host to fetch feature flags from. Defaults to `https://cdn.growthbook.io`-   **client_key** (`str`) - The client key that will be passed to the API Host to fetch feature flags-   **decryption_key** (`str`) - If the GrowthBook API endpoint has encryption enabled, specify the decryption key here-   **cache_ttl** (`int`) - How long to cache features in-memory from the GrowthBook API (seconds, default `60`)-   **features** (`dict`) - Feature definitions from the GrowthBook API (only required if `client_key` is not specified)-   **forced_variations** (`dict`) - Dictionary of forced experiment variations (used for QA)There are also getter and setter methods for features and attributes if you need to update them later in the request:```pythongb.set_features(gb.get_features())gb.set_attributes(gb.get_attributes())```### AttributesYou can specify attributes about the current user and request. These are used for two things:1.  Feature targeting (e.g. paid users get one value, free users get another)2.  Assigning persistent variations in A/B tests (e.g. user id &quot;123&quot; always gets variation B)Attributes can be any JSON data type - boolean, integer, float, string, list, or dict.```pythonattributes = {  'id': &quot;123&quot;,  'loggedIn': True,  'age': 21.5,  'tags': [&quot;tag1&quot;, &quot;tag2&quot;],  'account': {    'age': 90  }}# Pass into constructorgb = GrowthBook(attributes = attributes)# Or set latergb.set_attributes(attributes)```### Tracking ExperimentsAny time an experiment is run to determine the value of a feature, you want to track that event in your analytics system.You can use the `on_experiment_viewed` option to do this:```pythonfrom growthbook import GrowthBook, Experiment, Resultdef on_experiment_viewed(experiment: Experiment, result: Result):  # Use whatever event tracking system you want  analytics.track(attributes[&quot;id&quot;], &quot;Experiment Viewed&quot;, {    'experimentId': experiment.key,    'variationId': result.variationId  })# Pass into constructorgb = GrowthBook(  on_experiment_viewed = on_experiment_viewed)```## Using FeaturesThere are 3 main methods for interacting with features.-   `gb.is_on(&quot;feature-key&quot;)` returns true if the feature is on-   `gb.is_off(&quot;feature-key&quot;)` returns false if the feature is on-   `gb.get_feature_value(&quot;feature-key&quot;, &quot;default&quot;)` returns the value of the feature with a fallbackIn addition, you can use `gb.evalFeature(&quot;feature-key&quot;)` to get back a `FeatureResult` object with the following properties:-   **value** - The JSON-decoded value of the feature (or `None` if not defined)-   **on** and **off** - The JSON-decoded value cast to booleans-   **source** - Why the value was assigned to the user. One of `unknownFeature`, `defaultValue`, `force`, or `experiment`-   **experiment** - Information about the experiment (if any) which was used to assign the value to the user-   **experimentResult** - The result of the experiment (if any) which was used to assign the value to the user## Inline ExperimentsInstead of declaring all features up-front and referencing them by ids in your code, you can also just run an experiment directly. This is done with the `run` method:```pythonfrom growthbook import Experimentexp = Experiment(  key = &quot;my-experiment&quot;,  variations = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;])# Either &quot;red&quot;, &quot;blue&quot;, or &quot;green&quot;print(gb.run(exp).value)```As you can see, there are 2 required parameters for experiments, a string key, and an array of variations. Variations can be any data type, not just strings.There are a number of additional settings to control the experiment behavior:-   **key** (`str`) - The globally unique tracking key for the experiment-   **variations** (`any[]`) - The different variations to choose between-   **seed** (`str`) - Added to the user id when hashing to determine a variation. Defaults to the experiment `key`-   **weights** (`float[]`) - How to weight traffic between variations. Must add to 1.-   **coverage** (`float`) - What percent of users should be included in the experiment (between 0 and 1, inclusive)-   **condition** (`dict`) - Targeting conditions-   **force** (`int`) - All users included in the experiment will be forced into the specified variation index-   **hashAttribute** (`string`) - What user attribute should be used to assign variations (defaults to &quot;id&quot;)-   **hashVersion** (`int`) - What version of our hashing algorithm to use. We recommend using the latest version `2`.-   **namespace** (`tuple[str,float,float]`) - Used to run mutually exclusive experiments.Here's an example that uses all of them:```pythonexp = Experiment(  key=&quot;my-test&quot;,  # Variations can be a list of any data type  variations=[0, 1],  # If this changes, it will re-randomize all users in the experiment  seed=&quot;abcdef123456&quot;,  # Run a 40/60 experiment instead of the default even split (50/50)  weights=[0.4, 0.6],  # Only include 20% of users in the experiment  coverage=0.2,  # Targeting condition using a MongoDB-like syntax  condition={    'country': 'US',    'browser': {      '$in': ['chrome', 'firefox']    }  },  # Use an alternate attribute for assigning variations (default is 'id')  hashAttribute=&quot;sessionId&quot;,  # Use the latest hashing algorithm  hashVersion=2,  # Includes the first 50% of users in the &quot;pricing&quot; namespace  # Another experiment with a non-overlapping range will be mutually exclusive (e.g. [0.5, 1])  namespace=(&quot;pricing&quot;, 0, 0.5),)```### Inline Experiment Return ValueA call to `run` returns a `Result` object with a few useful properties:```pythonresult = gb.run(exp)# If user is part of the experimentprint(result.inExperiment) # True or False# The index of the assigned variationprint(result.variationId) # e.g. 0 or 1# The value of the assigned variationprint(result.value) # e.g. &quot;A&quot; or &quot;B&quot;# If the variation was randomly assigned by hashing user attributesprint(result.hashUsed) # True or False# The user attribute used to assign a variationprint(result.hashAttribute) # &quot;id&quot;# The value of that attributeprint(result.hashValue) # e.g. &quot;123&quot;```The `inExperiment` flag will be false if the user was excluded from being part of the experiment for any reason (e.g. failed targeting conditions).The `hashUsed` flag will only be true if the user was randomly assigned a variation. If the user was forced into a specific variation instead, this flag will be false.### Example Experiments3-way experiment with uneven variation weights:```pythongb.run(Experiment(  key = &quot;3-way-uneven&quot;,  variations = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;],  weights = [0.5, 0.25, 0.25]))```Slow rollout (10% of users who match the targeting condition):```python# User is marked as being in &quot;qa&quot; and &quot;beta&quot;gb = GrowthBook(  attributes = {    &quot;id&quot;: &quot;123&quot;,    &quot;beta&quot;: True,    &quot;qa&quot;: True,  },)gb.run(Experiment(  key = &quot;slow-rollout&quot;,  variations = [&quot;A&quot;, &quot;B&quot;],  coverage = 0.1,  condition = {    'beta': True  }))```Complex variations```pythonresult = gb.run(Experiment(  key = &quot;complex-variations&quot;,  variations = [    (&quot;blue&quot;, &quot;large&quot;),    (&quot;green&quot;, &quot;small&quot;)  ],))# Either &quot;blue,large&quot; OR &quot;green,small&quot;print(result.value[0] + &quot;,&quot; + result.value[1])```Assign variations based on something other than user id```pythongb = GrowthBook(  attributes = {    &quot;id&quot;: &quot;123&quot;,    &quot;company&quot;: &quot;growthbook&quot;  })# Users in the same company will always get the same variationgb.run(Experiment(  key = &quot;by-company-id&quot;,  variations = [&quot;A&quot;, &quot;B&quot;],  hashAttribute = &quot;company&quot;))```## LoggingThe GrowthBook SDK uses a Python logger with the name `growthbook` and includes helpful info for debugging as well as warnings/errors if something is misconfigured.Here's an example of logging to the console```pythonimport logginglogger = logging.getLogger('growthbook')logger.setLevel(logging.DEBUG)handler = logging.StreamHandler()formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s')handler.setFormatter(formatter)logger.addHandler(handler)```</longdescription>
</pkgmetadata>