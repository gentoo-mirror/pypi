<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django eMarkâ†“&lt;img alt=&quot;emark logo: envelope with markdown stamp&quot; src=&quot;https://raw.githubusercontent.com/voiio/emark/main/emark-logo.svg&quot; width=&quot;320&quot; height=&quot;170&quot; align=&quot;right&quot;&gt;Markdown template based HTML and text emails for Django.* simple email templates with markdown* support for HTML and text emails* i18n support* built-in UTM tracking* automatic CSS inliner via [premailer](https://github.com/peterbe/premailer/)[![PyPi Version](https://img.shields.io/pypi/v/emark.svg)](https://pypi.python.org/pypi/emark/)[![Test Coverage](https://codecov.io/gh/voiio/emark/branch/main/graph/badge.svg)](https://codecov.io/gh/voiio/emark)[![GitHub License](https://img.shields.io/github/license/voiio/emark)](https://raw.githubusercontent.com/voiio/emark/master/LICENSE)## Setup```ShellSessionpython3 -m pip install emark``````python# settings.pyINSTALLED_APPS = [    'emark',    # ...]``````ShellSessionpython3 manage.py migrate```## Usage```markdown&lt;!-- myapp/my_message.md --&gt;# Hello WorldHi {{ user.short_name }}!``````python# myapp/emails.pyfrom emark.message import MarkdownEmailclass MyMessage(MarkdownEmail):    subject = &quot;Hello World&quot;    template_name = &quot;myapp/my_message.md&quot;``````python# myapp/views.pyfrom . import emailsdef my_view(request):    message = emails.MyMessage.to_user(request.user)    message.send()```### TemplatesYou can use Django's template engine, just like you usually would.You can use translations, template tags, filters, blocks, etc.You may also have a base template, that you inherit form in your individualemails to provide a consistent salutation and farewell.```markdown&lt;!-- base.md --&gt;{% load static i18n %}{% block salutation %}Hi {{ user.short_name }}!{% endblock %}{% block content %}{% endblock %}{% block farewell %}{% blocktrans trimmed %}Best regards,{{ site_admin }}{% endblocktrans %}{% endblock %}{% block footer %}Legal footer.{% endblock %}``````markdown&lt;!-- myapp/email.md --&gt;{% extends &quot;base.md&quot; %}{% block content %}This is the content of the email.{% endblock %}```### ContextThe context is passed to the template as a dictionary. Furthermore, you mayoverride the `get_context_data` method to add additional context variables.```python# myapp/emails.pyfrom emark.message import MarkdownEmailclass MyMessage(MarkdownEmail):    subject = &quot;Hello World&quot;    template_name = &quot;myapp/email.md&quot;    def get_context_data(self):        context = super().get_context_data()        context[&quot;my_variable&quot;] = &quot;Hello World&quot;        return context```### TrackingEvery `MarkdownEmail` subclass comes with automatic UTM tracking.UTM parameters are added to all links in the email. Existing UTM params on linkthat have been explicitly set, are not overridden. The default parameters are:* `utm_source`: `website`* `utm_medium`: `email`* `utm_campaign`: `{{ EMAIL_CLASS_NAME }}`The global UTM parameters can be overridden via the `EMARK_UTM_PARAMS` setting,which is a dictionary of parameters:```python# settings.pyEMARK_UTM_PARAMS = {    &quot;utm_source&quot;: &quot;website&quot;,  # default    &quot;utm_medium&quot;: &quot;email&quot;,  # default}```You may also change the UTM parameters by overriding the `get_utm_params`or passing a `utm_params` dictionary to class constructor.```python# myapp/emails.pyfrom emark.message import MarkdownEmailclass MyMessage(MarkdownEmail):  subject = &quot;Hello World&quot;  template_name = &quot;myapp/email.md&quot;  # override the parameters for this email class  def get_utm_params(self):    return {      &quot;utm_source&quot;: &quot;myapp&quot;,      &quot;utm_medium&quot;: &quot;email&quot;,      &quot;utm_campaign&quot;: &quot;my-campaign&quot;,    }# or alternatively during instantiationMyMessage(utm_params={&quot;utm_campaign&quot;: &quot;my-other-campaign&quot;}).send()```## Credits- Django eMark uses modified version of [Responsive HTML Email Template](https://github.com/leemunroe/responsive-html-email-template/) as a base template- For CSS inlining, Django eMark uses [premailer](https://github.com/peterbe/premailer/)</longdescription>
</pkgmetadata>