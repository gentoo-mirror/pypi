<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align='center'&gt;&lt;img src=&quot;https://github.com/Zehui127/hybrid-graph-benchmark/blob/pre-release/docs/title.png?raw=true&quot; style=&quot;width: 75%; height: auto;&quot;/&gt;&lt;/p&gt;------------------------------------------------------------------[![paper](https://img.shields.io/badge/Download-Raw%20Data-green)](https://zenodo.org/record/7982540)[![PyPI version](https://img.shields.io/pypi/v/hybrid-graph?color=purple)](https://pypi.org/project/hybrid-graph/)[![paper](https://img.shields.io/badge/Document-Website-purple)](https://zehui127.github.io/hybrid-graph-benchmark/)[![license](https://img.shields.io/github/license/Zehui127/hybrid-graph-benchmark)](LICENSE)&lt;!-- [![paper](https://img.shields.io/badge/Paper-Open%20Review-orange)]() --&gt;&lt;!-- [![paper](https://img.shields.io/badge/Access-PyTorch%20Geometric-green)](https://pytorch-geometric.readthedocs.io/en/latest/index.html) --&gt;&lt;!-- ![]() --&gt;This is a benchmark dataset for evaluating **hybrid-graph** (hypergraph and hierarchical graph) learning algorithms. It contains: - 23 real-world higer-order graphs from the domains of biology, social media, and wikipedia - Built-in functionalities for preprocessing hybrid-graphs - A framework to easily train and evaluate Graph Neural Networks&lt;!-- ![](https://github.com/Zehui127/hypergraph-benchmarks/blob/pre-release/img/architecture.png?raw=true) --&gt;&lt;img src=&quot;https://github.com/Zehui127/hybrid-graph-benchmark/blob/pre-release/docs/architecture.png?raw=true&quot; style=&quot;width: 75%; height: auto;&quot;&gt;# Installation## RequirementsFirst, install the required PyTorch packages. You will need to know the version of CUDA you have installed, as well as the version of PyTorch you want to use. Replace `${TORCH}` and `${CUDA}` with these versions in the following commands:```bash# TORCH=2.0.1 if use newest stable torch version# CUDA=cpu if cuda is not availablepython -m pip install torch-scatter -f https://data.pyg.org/whl/torch-${TORCH}+${CUDA}.htmlpython -m pip install torch-sparse -f https://data.pyg.org/whl/torch-${TORCH}+${CUDA}.htmlpython -m pip install torch-geometric==2.2.0```Once these dependencies are installed, you can install this package with one of the following:## Pip install```bashpip install hybrid-graph# or pip install git+https://github.com/Zehui127/hybrid-graph-benchmark.git```## From source```bashgit clone https://github.com/Zehui127/hybrid-graph-benchmark.gitcd hybrid-graph-benchmarkpip install -e .```# UsageHybrid-graph provide both datasets and flash training/evaluation capabilities.## (1) Access the Datasetwe use the ```torch_geometric.data.Data``` to wrap the graphs with additional adjacency matrix for hyperedge representation.```pythonfrom hg.datasets import Facebook, HypergraphSAINTNodeSampler# download data to the path 'data/facebook'data = Facebook('data/facebook')print(data[0]) # e.g. Data(x=[22470, 128], edge_index=[2, 342004], y=[22470], hyperedge_index=[2, 2344151], num_hyperedges=236663)# create a sampler which sample 1000 nodes from the graph for 5 timessampler = HypergraphSAINTNodeSampler(data[0],batch_size=1000,num_steps=5)batch = next(iter(sampler))print(batch)  # e.g. Data(num_nodes=918, edge_index=[2, 7964], hyperedge_index=[2, 957528], num_hyperedges=210718, x=[918, 128], y=[918])```Data Loaders can also be obtained using ```hg.hybrid_graph.io.get_dataset``````pythonfrom hg.hybrid_graph.io import get_datasetname = 'musae_Facebook'train_loader, valid_loader, test_loader,data_info = get_dataset(name)```## (2) Train/Evaluate with ```hybrid-graph```Assuming that you have [Pip install](#pip-install).Training can be triggered with the following, it takes only a few minutes to train GCN even on CPU device.```bash#-a=gpu,cpu,tpuhybrid-graph train grand_Lung gcn -a=cpu```Evaluation can be triggered with```bash# load the saved checkpoint from the path 'lightning_logs/version_0/checkpoints/best.ckpt'hybrid-graph eval grand_lung gcn -load='lightning_logs/version_0/checkpoints/best.ckpt' -a=cpu```# Add New ModelsIn order to add new models, you should [Install from source](#from-source).```bashcd hybrid-graph-benchmark/hg/hybrid_graph/models/gnntouch customize_model.py```Within ```customize_model.py```, it should correctly handle the input feature size, prediction size and task type.Below is the definition of vanila Graph Convolutional Networks (GCN)```pythonfrom torch_geometric.nn import GCNConvclass CustomizeGNN(torch.nn.Module):    def __init__(            self, info, *args, **kwargs):        super().__init__()        dim = 32        self.conv1 = GCNConv(info[&quot;num_node_features&quot;], dim)        self.is_regression = info[&quot;is_regression&quot;]        if info[&quot;is_regression&quot;]:            self.conv2 = GCNConv(dim, dim)            self.head = nn.Linear(dim, 1)        else:            self.conv2 = GCNConv(dim, info[&quot;num_classes&quot;])    def forward(self, data, *args, **kargs):        x, edge_index = data.x, data.edge_index        x = F.relu(self.conv1(x, edge_index))        x = F.dropout(x, training=self.training)        x = self.conv2(x, edge_index)        if self.is_regression:            x = self.head(x).squeeze()        else:            x = F.log_softmax(x, dim=1)        return x```Finally, you should register you model in ```hybrid-graph-benchmark/hg/hybrid_graph/models/__init__.py``````pythonfrom .gnn.customize_model import CustomizeGNNfactory = {            'sage': SAGENet,            'gcn':CustomizeGNN, # abbreviation: ClassName,          }```</longdescription>
</pkgmetadata>