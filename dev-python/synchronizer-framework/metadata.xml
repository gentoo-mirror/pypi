<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Synchronizer FrameworkThis framework provides a data synchronization pattern based on a declarative bi-directional definition. The definitionis a mapping of entity types with identity keys and non-key attributes which support CRUD operations and asynchronization strategy. The data sources may be arbitrarily implemented as long as they inherit from `sync.base.Base`.Common data sources like ORMs (django-orm, sqlalchemy) or REST APIs may be used as long as they support CRUD.Data sources may mixin `sync.base.Timestamped` to apply a last-write wins synchronization strategy based onthe `updated_at` field.The project targets audiences which have chosen data synchronization as a primary integration method for microservices.Inspiration has been taken from projects Kubernetes and Chef.Disclaimer: The demo and README mentions systems like Desire and Daphne. Those are no open source projects, but sometarget audience will understand them. The definition is supposed to cover all use-cases of the Desire architecture.### Features* Adding missing objects* Defer adding objects, which miss required foreign keys, because they do not exist or which are not synchronized yet* Linking synchronized objects with each other to track them subsequently* Many objects contributing to a single synchronized object on the remote side* Updating non-key attributes* Last write wins (entity needs to support `sync.base.Timestamped`)* Deep-join attribute sourcing* Abstract data access to make the pattern work with any CRUD data source (like Microsoft Dynamics, ldap, REST APIs,  netconf, gNMI, CSP SDKs)    * i.e. AWS SDK Create as `AllocateHostedConnection`, Read as `DescribeConnections`, ...    * Data sources need to implement crud operations as defined in `sync.datasource.DataSource`* pre-load/include for deep joins* Optional deletion based on orphaned entities* Possibility to expedite single object synchronization based on an event stream    * Celery support* SQLAlchemy backend support* Redis linking backend support* dockerizedMore details about the pattern can be found in the `tests` path.### Missing/TODO* Deletion based on intent (with cryptographic verification) ### Known Limitations1. Cannot synchronize three-way at once.   *Example:*   Assume entities `PA` required parent of `A`, `BA` required parent of `B`, `CA` required parent of `C`. Mappings are   defined as `M1: A -&gt; B` and `M2: B &lt;- C`. The pattern prevents each `M1` and `M2` to progress independently. For `M1`   , information about `PC` is missing and for `M2` information about `PA` is missing. Further, assume `x(e)` to denote   an entity `e`   transformed to the namespace of `x`.   *Solution:*    * Introduce an intermediary entity `I` which accepts optional parents `I(PA)` and `I(PC)`    * remove `M1` and `M2`    * create `M3: A -&gt; I`, `M4: I &lt;- C`    * create `M5: I -&gt; B`   The sequence of `M3, M4, M5` leads to a synchronized `B` containing both parents `B(PA)` and `B(PC)`. The order of   events always keeps consistent states. For example, `M5` may never progress before `M4` even if it is executed   before.   The solution is *not* limited to uni-directional mappings, but the author chose demonstrating uni-directional   mappings for easier understanding of how data flows.1. The orphan deletion may be counter-intuitive and will be changed in a future version. Refrain from using it, if you   do not understand the consequences.## Define EntitiesEntities below resemble the desire and daphne entity hierarchy and deviate to some extent. The intention is todemonstrate the synchronization pattern instead of resembling existing models accurately. The details which are left outof consideration seem to be straight-forward to implement.### Base```pythonclass DemoBase(InMemoryLinks, Hierarchical, InMemoryTimestamp):    ...```### Daphne```pythonclass VlanServiceProvider(DemoBase):    def __init__(self, name=None, children=set()):        super().__init__()        self.name = name        self.children = childrenclass VlanServiceConnection(DemoBase):    def __init__(self, name, region, pop):        super().__init__()        self.name = name        self.region = region        self.pop = pop```### Desire```pythonclass CloudServiceProvider(DemoBase):    def __init__(self, name=None, children=None):        super().__init__()        self.name = name        self.children = children or set()class CloudRegion(DemoBase):    def __init__(self, name=None, children=None):        super().__init__()        self.name = name        self.children = children or set()class CloudHandover(DemoBase):    def __init__(self, name=None, children=None):        super().__init__()        self.name = name        self.children = children or set()class NIC(DemoBase):    def __init__(self, name=None):        super().__init__()        self.name = name```## Define Mapping```pythonmappings = [   Mapping(      entity_types=(VlanServiceConnection, CloudRegion),      modes={Mode.LEFT_TO_RIGHT},      keys={         AttributeMap(&quot;region&quot;, &quot;name&quot;),         AttributeMap(            &quot;parent&quot;, &quot;parent&quot;, VlanServiceProvider, CloudServiceProvider         ),      },      attributes={AttributeMap(&quot;externalRef&quot;, &quot;external_ref&quot;)},   ),   Mapping(      entity_types=(VlanServiceProvider, CloudServiceProvider),      modes={Mode.LEFT_TO_RIGHT, Mode.RIGHT_TO_LEFT},      keys={AttributeMap(&quot;name&quot;, &quot;name&quot;)},      attributes={AttributeMap(&quot;canUpgrade&quot;, &quot;upgrade_allowed&quot;)},   ),   Mapping(      entity_types=(VlanServiceConnection, CloudHandover),      modes={Mode.LEFT_TO_RIGHT},      keys={         AttributeMap(&quot;pop&quot;, &quot;name&quot;),         AttributeMap(&quot;__self__&quot;, &quot;parent&quot;, VlanServiceConnection, CloudRegion),      },      attributes={AttributeMap(&quot;externalRef&quot;, &quot;external_ref&quot;)},   ),   Mapping(      entity_types=(VlanServiceConnection, NIC),      modes={Mode.RIGHT_TO_LEFT},      keys={         AttributeMap(&quot;name&quot;, &quot;name&quot;),         AttributeMap(&quot;region&quot;, (&quot;parent&quot;, &quot;parent&quot;, &quot;name&quot;)),         AttributeMap(&quot;pop&quot;, (&quot;parent&quot;, &quot;name&quot;)),         AttributeMap(            &quot;parent&quot;,            (&quot;parent&quot;, &quot;parent&quot;, &quot;parent&quot;),            VlanServiceProvider,            CloudServiceProvider,         ),      },      attributes={AttributeMap(&quot;externalRef&quot;, &quot;external_ref&quot;)},   ),   Mapping(      entity_types=(VlanServiceConnection, NIC),      modes={Mode.LEFT_TO_RIGHT},      keys={         AttributeMap(&quot;name&quot;, &quot;name&quot;),         AttributeMap(            &quot;__self__&quot;, &quot;parent&quot;, VlanServiceConnection, CloudHandover         ),      },      attributes={AttributeMap(&quot;externalRef&quot;, &quot;external_ref&quot;)},   ),]```## Define some objects```pythondaphne_db = Db.from_collection(    {        VlanServiceProvider(            name=&quot;AWS&quot;,            children={                VlanServiceConnection(&quot;nic-1&quot;, &quot;eu-central-1&quot;, &quot;INX6&quot;),                VlanServiceConnection(&quot;nic-2&quot;, &quot;eu-central-1&quot;, &quot;EqFA5&quot;),                VlanServiceConnection(&quot;nic-3&quot;, &quot;eu-west-2&quot;, &quot;EqFA5&quot;),            },        ),        VlanServiceProvider(name=&quot;AZURE&quot;, children=set()),    })desire_db = Db.from_collection(    {        CloudServiceProvider(            name=&quot;AWS&quot;,            children={                CloudRegion(                    name=&quot;eu-central-1&quot;,                    children={                        CloudHandover(name=&quot;INX6&quot;, children={NIC(&quot;nic-1&quot;)}),                        CloudHandover(name=&quot;EqFA5&quot;, children={NIC(&quot;nic-2a&quot;)}),                    },                ),                CloudRegion(                    name=&quot;eu-west-1&quot;,                    children={                        CloudHandover(name=&quot;LON1&quot;, children={NIC(name=&quot;nic-3a&quot;)})                    },                ),                CloudRegion(                    name=&quot;eu-west-2&quot;,                    children={                        CloudHandover(                            name=&quot;EqFA5&quot;,                            children={NIC(name=&quot;nic-3&quot;, external_ref=&quot;nic3-eref&quot;)},                        )                    },                ),            },        ),        CloudServiceProvider(            name=&quot;IBM&quot;,            children={                CloudRegion(                    name=&quot;EU-Frankfurt&quot;,                    children={CloudHandover(name=&quot;fra03&quot;, children={NIC(&quot;nic-4&quot;)})},                )            },        ),    })```## Plug it together```pythonsync(daphne_db, desire_db, mappings)```## Demo Output```shell$ python src/demo/main.py/home/sspies/git/sync-poc/venv/bin/python3 /home/sspies/git/sync-poc/src/demo/main.pyINFO:root:Initial DB statesINFO:root:{&lt;class 'demo.desire.CloudServiceProvider'&gt;: [CloudServiceProvider(name=IBM),                                              CloudServiceProvider(name=AWS)], &lt;class 'demo.desire.CloudRegion'&gt;: [CloudRegion(name=EU-Frankfurt, parent=CloudServiceProvider(name=IBM)),                                     CloudRegion(name=eu-west-2, parent=CloudServiceProvider(name=AWS)),                                     CloudRegion(name=eu-central-1, parent=CloudServiceProvider(name=AWS)),                                     CloudRegion(name=eu-west-1, parent=CloudServiceProvider(name=AWS))], &lt;class 'demo.desire.CloudHandover'&gt;: [CloudHandover(name=fra03, parent=CloudRegion(name=EU-Frankfurt)),                                       CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-west-2)),                                       CloudHandover(name=INX6, parent=CloudRegion(name=eu-central-1)),                                       CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-central-1)),                                       CloudHandover(name=LON1, parent=CloudRegion(name=eu-west-1))], &lt;class 'demo.desire.NIC'&gt;: [NIC(name=nic-4, parent=CloudHandover(name=fra03)),                             NIC(name=nic-3, parent=CloudHandover(name=EqFA5)),                             NIC(name=nic-1, parent=CloudHandover(name=INX6)),                             NIC(name=nic-2a, parent=CloudHandover(name=EqFA5)),                             NIC(name=nic-3a, parent=CloudHandover(name=LON1))]}INFO:root:{&lt;class 'demo.daphne.VlanServiceProvider'&gt;: [VlanServiceProvider(name=AZURE),                                             VlanServiceProvider(name=AWS)], &lt;class 'demo.daphne.VlanServiceConnection'&gt;: [VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6),                                               VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5),                                               VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5)]}WARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6).parent. VlanServiceProvider(name=AWS) not in CloudServiceProviderWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5).parent. VlanServiceProvider(name=AWS) not in CloudServiceProviderWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5).parent. VlanServiceProvider(name=AWS) not in CloudServiceProviderINFO:root:✨ Adding CloudServiceProvider(name=AZURE)INFO:root:✨ Adding VlanServiceProvider(name=IBM)WARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6).__self__. VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6) not in CloudRegionWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5).__self__. VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5) not in CloudRegionWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5).__self__. VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5) not in CloudRegionINFO:root:✨ Adding VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03)INFO:root:✨ Adding VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5)INFO:root:✨ Adding VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1)WARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6).__self__. VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6) not in CloudHandoverWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5).__self__. VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5) not in CloudHandoverWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5).__self__. VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5) not in CloudHandoverWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03).__self__. VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03) not in CloudHandoverWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5).__self__. VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5) not in CloudHandoverWARNING:root:Cannot find linked entity of VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1).__self__. VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1) not in CloudHandoverINFO:root:27 operation(s) madeINFO:root:Operations: [SkipMissingLink(VlanServiceConnection -&gt; CloudRegion), SkipMissingLink(VlanServiceConnection -&gt; CloudRegion), SkipMissingLink(VlanServiceConnection -&gt; CloudRegion), Addition(CloudServiceProvider(name=AZURE)), Linking(frozenset({VlanServiceProvider(name=AZURE), CloudServiceProvider(name=AZURE)})), Linking(frozenset({VlanServiceProvider(name=AWS), CloudServiceProvider(name=AWS)})), AttributeUpdated(CloudServiceProvider(name=AWS).upgrade_allowed: True -&gt; False from VlanServiceProvider(name=AWS)), Addition(VlanServiceProvider(name=IBM)), Linking(frozenset({VlanServiceProvider(name=IBM), CloudServiceProvider(name=IBM)})), SkipMissingLink(VlanServiceConnection -&gt; CloudHandover), SkipMissingLink(VlanServiceConnection -&gt; CloudHandover), SkipMissingLink(VlanServiceConnection -&gt; CloudHandover), Addition(VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03)), Linking(frozenset({NIC(name=nic-4, parent=CloudHandover(name=fra03)), VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03)})), Linking(frozenset({NIC(name=nic-3, parent=CloudHandover(name=EqFA5)), VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5)})), AttributeUpdated(VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5).externalRef:  -&gt; nic3-eref from NIC(name=nic-3, parent=CloudHandover(name=EqFA5))), Linking(frozenset({VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6), NIC(name=nic-1, parent=CloudHandover(name=INX6))})), Addition(VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5)), Linking(frozenset({NIC(name=nic-2a, parent=CloudHandover(name=EqFA5)), VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5)})), Addition(VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1)), Linking(frozenset({NIC(name=nic-3a, parent=CloudHandover(name=LON1)), VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1)})), SkipMissingLink(VlanServiceConnection -&gt; NIC), SkipMissingLink(VlanServiceConnection -&gt; NIC), SkipMissingLink(VlanServiceConnection -&gt; NIC), SkipMissingLink(VlanServiceConnection -&gt; NIC), SkipMissingLink(VlanServiceConnection -&gt; NIC), SkipMissingLink(VlanServiceConnection -&gt; NIC)]INFO:root:DB states after first and before second runINFO:root:{&lt;class 'demo.desire.CloudServiceProvider'&gt;: [CloudServiceProvider(name=IBM),                                              CloudServiceProvider(name=AWS),                                              CloudServiceProvider(name=AZURE)], &lt;class 'demo.desire.CloudRegion'&gt;: [CloudRegion(name=EU-Frankfurt, parent=CloudServiceProvider(name=IBM)),                                     CloudRegion(name=eu-west-2, parent=CloudServiceProvider(name=AWS)),                                     CloudRegion(name=eu-central-1, parent=CloudServiceProvider(name=AWS)),                                     CloudRegion(name=eu-west-1, parent=CloudServiceProvider(name=AWS))], &lt;class 'demo.desire.CloudHandover'&gt;: [CloudHandover(name=fra03, parent=CloudRegion(name=EU-Frankfurt)),                                       CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-west-2)),                                       CloudHandover(name=INX6, parent=CloudRegion(name=eu-central-1)),                                       CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-central-1)),                                       CloudHandover(name=LON1, parent=CloudRegion(name=eu-west-1))], &lt;class 'demo.desire.NIC'&gt;: [NIC(name=nic-4, parent=CloudHandover(name=fra03)),                             NIC(name=nic-3, parent=CloudHandover(name=EqFA5)),                             NIC(name=nic-1, parent=CloudHandover(name=INX6)),                             NIC(name=nic-2a, parent=CloudHandover(name=EqFA5)),                             NIC(name=nic-3a, parent=CloudHandover(name=LON1))]}INFO:root:{&lt;class 'demo.daphne.VlanServiceProvider'&gt;: [VlanServiceProvider(name=AZURE),                                             VlanServiceProvider(name=AWS),                                             VlanServiceProvider(name=IBM)], &lt;class 'demo.daphne.VlanServiceConnection'&gt;: [VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6),                                               VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5),                                               VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5),                                               VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03),                                               VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5),                                               VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1)]}INFO:root:✨ Adding NIC(name=nic-2, parent=CloudHandover(name=EqFA5))INFO:root:Sync with 16 operation(s) madeINFO:root:Operations: [Linking(frozenset({VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6), CloudRegion(name=eu-central-1, parent=CloudServiceProvider(name=AWS))})), Linking(frozenset({CloudRegion(name=eu-west-2, parent=CloudServiceProvider(name=AWS)), VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5)})), AttributeUpdated(CloudRegion(name=eu-west-2, parent=CloudServiceProvider(name=AWS)).external_ref:  -&gt; nic3-eref from VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5)), Linking(frozenset({CloudRegion(name=eu-central-1, parent=CloudServiceProvider(name=AWS)), VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5)})), Linking(frozenset({CloudRegion(name=EU-Frankfurt, parent=CloudServiceProvider(name=IBM)), VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03)})), Linking(frozenset({VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5), CloudRegion(name=eu-central-1, parent=CloudServiceProvider(name=AWS))})), Linking(frozenset({VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1), CloudRegion(name=eu-west-1, parent=CloudServiceProvider(name=AWS))})), Linking(frozenset({VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6), CloudHandover(name=INX6, parent=CloudRegion(name=eu-central-1))})), Linking(frozenset({CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-west-2)), VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5)})), AttributeUpdated(CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-west-2)).external_ref:  -&gt; nic3-eref from VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5)), Linking(frozenset({CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-central-1)), VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5)})), Linking(frozenset({CloudHandover(name=fra03, parent=CloudRegion(name=EU-Frankfurt)), VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03)})), Linking(frozenset({VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5), CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-central-1))})), Linking(frozenset({CloudHandover(name=LON1, parent=CloudRegion(name=eu-west-1)), VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1)})), Addition(NIC(name=nic-2, parent=CloudHandover(name=EqFA5))), Linking(frozenset({NIC(name=nic-2, parent=CloudHandover(name=EqFA5)), VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5)}))]INFO:root:🙌 Final DB statesINFO:root:{&lt;class 'demo.desire.CloudServiceProvider'&gt;: [CloudServiceProvider(name=IBM),                                              CloudServiceProvider(name=AWS),                                              CloudServiceProvider(name=AZURE)], &lt;class 'demo.desire.CloudRegion'&gt;: [CloudRegion(name=EU-Frankfurt, parent=CloudServiceProvider(name=IBM)),                                     CloudRegion(name=eu-west-2, parent=CloudServiceProvider(name=AWS)),                                     CloudRegion(name=eu-central-1, parent=CloudServiceProvider(name=AWS)),                                     CloudRegion(name=eu-west-1, parent=CloudServiceProvider(name=AWS))], &lt;class 'demo.desire.CloudHandover'&gt;: [CloudHandover(name=fra03, parent=CloudRegion(name=EU-Frankfurt)),                                       CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-west-2)),                                       CloudHandover(name=INX6, parent=CloudRegion(name=eu-central-1)),                                       CloudHandover(name=EqFA5, parent=CloudRegion(name=eu-central-1)),                                       CloudHandover(name=LON1, parent=CloudRegion(name=eu-west-1))], &lt;class 'demo.desire.NIC'&gt;: [NIC(name=nic-4, parent=CloudHandover(name=fra03)),                             NIC(name=nic-3, parent=CloudHandover(name=EqFA5)),                             NIC(name=nic-1, parent=CloudHandover(name=INX6)),                             NIC(name=nic-2a, parent=CloudHandover(name=EqFA5)),                             NIC(name=nic-3a, parent=CloudHandover(name=LON1)),                             NIC(name=nic-2, parent=CloudHandover(name=EqFA5))]}INFO:root:{&lt;class 'demo.daphne.VlanServiceProvider'&gt;: [VlanServiceProvider(name=AZURE),                                             VlanServiceProvider(name=AWS),                                             VlanServiceProvider(name=IBM)], &lt;class 'demo.daphne.VlanServiceConnection'&gt;: [VlanServiceConnection(name=nic-1, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=INX6),                                               VlanServiceConnection(name=nic-3, parent=VlanServiceProvider(name=AWS), region=eu-west-2, pop=EqFA5),                                               VlanServiceConnection(name=nic-2, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5),                                               VlanServiceConnection(name=nic-4, parent=VlanServiceProvider(name=IBM), region=EU-Frankfurt, pop=fra03),                                               VlanServiceConnection(name=nic-2a, parent=VlanServiceProvider(name=AWS), region=eu-central-1, pop=EqFA5),                                               VlanServiceConnection(name=nic-3a, parent=VlanServiceProvider(name=AWS), region=eu-west-1, pop=LON1)]}INFO:root:🎉🥳 Sync with 0 operations made. Synchronization has convergedINFO:root:Operations: []Process finished with exit code 0```# Celery Demo## Start the compose setup``` shell❯ docker-compose up -d --buildCreating network &quot;synchronizer-framework_default&quot; with the default driverBuilding workerStep 1/11 : FROM python:3.8-slim ---&gt; b281745b6df9Step 2/11 : RUN apt-get update ; apt-get install -y sqlite3 vim ; apt-get clean ---&gt; Using cache ---&gt; 25b681e3e49cStep 3/11 : WORKDIR /app/synchronizer-framework ---&gt; Using cache ---&gt; 20c652ac628dStep 4/11 : COPY ./requirements.txt . ---&gt; Using cache ---&gt; 9a1f9aa5c9a4Step 5/11 : RUN pip install -r requirements.txt ---&gt; Using cache ---&gt; ae9c400626e5Step 6/11 : COPY src/ ./src ---&gt; Using cache ---&gt; be73849dfe6fStep 7/11 : COPY tests ./tests ---&gt; Using cache ---&gt; 3e59bd21b326Step 8/11 : COPY conftest.py . ---&gt; Using cache ---&gt; 3c06b0dcc7f9Step 9/11 : ENV C_FORCE_ROOT=true ---&gt; Using cache ---&gt; 2a187de06fcdStep 10/11 : ENV PYTHONPATH=&quot;src/&quot; ---&gt; Using cache ---&gt; 027396f1f6f9Step 11/11 : CMD [ &quot;python&quot;, &quot;-m&quot;, &quot;demo.main&quot;] ---&gt; Using cache ---&gt; b8b1c92054b7Successfully built b8b1c92054b7Successfully tagged synchronizer-framework_worker:latestBuilding beatStep 1/11 : FROM python:3.8-slim ---&gt; b281745b6df9Step 2/11 : RUN apt-get update ; apt-get install -y sqlite3 vim ; apt-get clean ---&gt; Using cache ---&gt; 25b681e3e49cStep 3/11 : WORKDIR /app/synchronizer-framework ---&gt; Using cache ---&gt; 20c652ac628dStep 4/11 : COPY ./requirements.txt . ---&gt; Using cache ---&gt; 9a1f9aa5c9a4Step 5/11 : RUN pip install -r requirements.txt ---&gt; Using cache ---&gt; ae9c400626e5Step 6/11 : COPY src/ ./src ---&gt; Using cache ---&gt; be73849dfe6fStep 7/11 : COPY tests ./tests ---&gt; Using cache ---&gt; 3e59bd21b326Step 8/11 : COPY conftest.py . ---&gt; Using cache ---&gt; 3c06b0dcc7f9Step 9/11 : ENV C_FORCE_ROOT=true ---&gt; Using cache ---&gt; 2a187de06fcdStep 10/11 : ENV PYTHONPATH=&quot;src/&quot; ---&gt; Using cache ---&gt; 027396f1f6f9Step 11/11 : CMD [ &quot;python&quot;, &quot;-m&quot;, &quot;demo.main&quot;] ---&gt; Using cache ---&gt; b8b1c92054b7Successfully built b8b1c92054b7Successfully tagged synchronizer-framework_beat:latestCreating synchronizer-framework_worker_1   ... doneCreating synchronizer-framework_beat_1     ... doneCreating synchronizer-framework_redis_1    ... doneCreating synchronizer-framework_rabbitmq_1 ... done```## Show worker logs```shellworker_1    | [2021-04-21 18:16:06,166: INFO/MainProcess] Received task: sync.tasks.sync_all[281f9bc5-6ac8-4355-864e-692995abca5c]  worker_1    | [2021-04-21 18:16:06,341: INFO/ForkPoolWorker-2] Task sync.tasks.sync_all[281f9bc5-6ac8-4355-864e-692995abca5c] succeeded in 0.17173888799879933s: [Linking(frozenset({VlanServiceConnection(id=1, name=nic-1, region=eu-central-1, pop=INX6, externalRef=None, parent=VlanServiceProvider(id=2, name=AWS, canUpgrade=False)), CloudRegion(id=2, name=eu-central-1, external_ref=None, parent=CloudServiceProvider(id=2, name=AWS, upgrade_allowed=False))})), Linking(frozenset({CloudRegion(id=2, name=eu-central-1, external_ref=None, parent=CloudServiceProvider(id=2, name=AWS, upgrade_allowed=False)), VlanServiceConnection(id=2, name=nic-2, region=eu-central-1, pop=EqFA5, externalRef=None, parent=VlanServiceProvider(id=2, name=AWS, canUpgrade=False))})), Linking(frozenset({VlanServiceConnection(id=3, name=nic-3, region=eu-west-2, pop=EqFA5, externalRef=nic3-eref, parent=VlanServiceProvider(id=2, name=AWS, canUpgrade=False)), CloudRegion(id=4, name=eu-west-2, external_ref=None, parent=CloudServiceProvider(id=2, name=AWS, upgrade_allowed=False))})), Linking(frozenset({CloudRegion(id=1, name=EU-Frankfurt, external_ref=None, parent=CloudServiceProvider(id=1, name=IBM,..., Li..., ...]worker_1    | [2021-04-21 18:16:16,165: INFO/MainProcess] Received task: sync.tasks.sync_all[64b780e0-b5e3-4771-913d-de3f54b2ccec]  worker_1    | [2021-04-21 18:16:16,300: INFO/ForkPoolWorker-2] Task sync.tasks.sync_all[64b780e0-b5e3-4771-913d-de3f54b2ccec] succeeded in 0.13250631099799648s: []```## Issue a new object and synchronize it immediately```pythonfrom demo.daphne import VlanServiceProviderfrom demo.fixtures import daphne_sqa_ds, desire_sqa_ds, make_mappingsfrom demo.celery import tasksif __name__ == &quot;__main__&quot;:   ds = daphne_sqa_ds()   vlsp = VlanServiceProvider(name=&quot;test&quot;)   ds.create(vlsp)   tasks.sync_one.delay(      daphne_sqa_ds, desire_sqa_ds, make_mappings(), vlsp.__class__, vlsp.id   )``````shell docker-compose exec worker python src/demo/create_and_sync.py```  ## Worker log```shellworker_1    | [2021-04-21 18:22:12,938: INFO/MainProcess] Received task: sync.tasks.sync_one[11dfd53a-1198-47e8-b624-25218b463660]  worker_1    | [2021-04-21 18:22:12,957: INFO/ForkPoolWorker-2] ✨ Adding CloudServiceProvider(id=4, name=test, upgrade_allowed=None)worker_1    | [2021-04-21 18:22:12,959: INFO/ForkPoolWorker-2] Task sync.tasks.sync_one[11dfd53a-1198-47e8-b624-25218b463660] succeeded in 0.02017242200236069s: [Addition(CloudServiceProvider(id=4, name=test, upgrade_allowed=None)), Linking(frozenset({CloudServiceProvider(id=4, name=test, upgrade_allowed=None), VlanServiceProvider(id=4, name=test, canUpgrade=None)}))]```## Show link and synchronized entry```shell❯ docker-compose exec redis redis-cli smembers VlanServiceProvider:4:CloudServiceProvider1) &quot;CloudServiceProvider:4&quot;❯ docker-compose exec worker sqlite3 /tmp/desire.sqlite &quot;SELECT * FROM cloud_service_providers where id = 4;&quot;4|test|``` </longdescription>
</pkgmetadata>