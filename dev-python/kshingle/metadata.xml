<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|PyPI version| |DOI| |PyPi downloads|kshingle========Utility functions to split a string into character-level k-shingles,shingle sets, sequences of k-shingles.The package ``kshingle`` can be deployed for the following use cases:-  `Character-level Shingling for MinHash/LSH &lt;#usage-for-minhashing&gt;`__   : The result is a set of unique shingles for each document.-  `Transform text into Input Sequences for   NNs &lt;#usage-for-input-sequences&gt;`__ : The result is input sequence   with k features.Install package---------------.. code:: sh   pip install &quot;kshingle&gt;=0.10.0,&lt;1&quot;Usage for MinHashing--------------------Please note that the package ``kshingle`` only addresses character-levelshingles, and **not** combining word tokens (n-grams, w-shingling).Generate Shingle Sets~~~~~~~~~~~~~~~~~~~~~For algorithms like MinHash(e.g. `datasketch &lt;https://github.com/ekzhu/datasketch&gt;`__ package) adocument (i.e. a string) must be split into a set of unique shingles... code:: py   import kshingle as ks   shingles = ks.shingleset_k(&quot;abc&quot;, k=3)   # {'a', 'ab', 'abc', 'b', 'bc', 'c'}.. code:: py   import kshingle as ks   shingles = ks.shingleset_range(&quot;abc&quot;, 2, 3)   # {'ab', 'abc', 'bc', 'c'}.. code:: py   import kshingle as ks   shingles = ks.shingleset_list(&quot;abc&quot;, [1, 3])   # {'a', 'abc', 'b', 'c'}Wildcard Shingle Sets~~~~~~~~~~~~~~~~~~~~~Typos can lead to rare shingles, that don’t match with the correctspelling. The longer the shingled text, the less important the effect oftypos. However, short text strings will produce less shingles, i.e. thevariance of the similarity due to typos is much higher for short textstrings than for large text documents. In order to smooth this effect,we can generate variants of a specfic shingle by replacing characterswith a wildcard characters (e.g. special unicode characters such as``U+FFFF``).Example: With ``k=5`` the document ``&quot;aBc DeF&quot;`` would result in 25unique shingles without assumned typos. For each of these shingles, weenumerate all variants of up to 2 typos. This leads to a total of 152unique shingles with no typo, 1 typo, and 2 typos... code:: py   import kshingle as ks   shingles = ks.shingleset_k(&quot;aBc DeF&quot;, k=5)  # -&gt; 25 shingles   shingles = shingles.union(       ks.wildcard_shinglesets(shingles, n_max_wildcards=2))  # -&gt; 152 shinglesdatasketch usage~~~~~~~~~~~~~~~~.. code:: py   import datasketch   import kshingle as ks   # Enable wildcard variants and check the results   with_wildcard = False   s1 = ks.shingleset_k(&quot;Die Zeitung wird zugestellt.&quot;, k=5)   s2 = ks.shingleset_k(&quot;Der Bericht wird zugestellt&quot;, k=5)   if with_wildcard:       s1 = s1.union(ks.wildcard_shinglesets(s1, 2))       s2 = s1.union(ks.wildcard_shinglesets(s2, 2))   m1 = datasketch.MinHash(num_perm=128)   for s in s1:       m1.update(s.encode('utf8'))   m2 = datasketch.MinHash(num_perm=128)   for s in s2:       m2.update(s.encode('utf8'))   m1.jaccard(m2)Utility functions~~~~~~~~~~~~~~~~~.. code:: py   import kshingle as ks   metric = ks.jaccard_strings(&quot;Bericht&quot;, &quot;berichten&quot;, k=5)   # 0.5128205128205128References~~~~~~~~~~-  A. Z. Broder, “On the resemblance and containment of documents,” in   Proceedings. Compression and Complexity of SEQUENCES 1997 (Cat.   No.97TB100171), Salerno, Italy, 1998, pp. 21–29, doi:   `10.1109/SEQUEN.1997.666900 &lt;https://doi.org/10.1109/SEQUEN.1997.666900&gt;`__-  Ch. 3 in: J. Leskovec, A. Rajaraman, and J. D. Ullman, Mining of   Massive Datasets, 2nd ed. Cambridge: Cambridge University Press,   2014. URL: http://infolab.stanford.edu/~ullman/mmds/book.pdf-  “MinHash,” Wikipedia. Apr. 17, 2021, Accessed: May 01, 2021.   Available:   https://en.wikipedia.org/w/index.php?title=MinHash&amp;oldid=1018264865.Usage for Input Sequences-------------------------Convert a string to a sequences of shingles~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Using the ``k`` parameter.. code:: py   import kshingle as ks   shingles = ks.shingleseqs_k(&quot;aBc DeF&quot;, k=3)   # [['a', 'B', 'c', ' ', 'D', 'e', 'F'],   #  ['aB', 'Bc', 'c ', ' D', 'De', 'eF'],   #  ['aBc', 'Bc ', 'c D', ' De', 'DeF']]Using a range for ``k``.. code:: py   import kshingle as ks   shingles = ks.shingleseqs_range(&quot;aBc DeF&quot;, n_min=2, n_max=3)   # [['aB', 'Bc', 'c ', ' D', 'De', 'eF'],   #  ['aBc', 'Bc ', 'c D', ' De', 'DeF']]Using a specific list of k values.. code:: py   import kshingle as ks   shingles = ks.shingleseqs_list(&quot;aBc DeF&quot;, klist=[2, 5])   # [['aB', 'Bc', 'c ', ' D', 'De', 'eF'],   #  ['aBc D', 'Bc De', 'c DeF']]Padding~~~~~~~The functions ``shingleseqs_k``, ``shingleseqs_range``, and``shingleseqs_list`` can pad the sequence with a ``placeholder``element. The ``padding`` modes are-  ``center`` : Pad on both sides (The ``evenpad='pre' | 'post``   parameter is only available for ``padding='center'``, and applied on   sequences with even ``n``-shingles)-  ``pre`` : Pad at the beginning of the sequence-  ``post`` : Pad at the end of sequence.. code:: py   import kshingle as ks   shingles = ks.shingleseqs_list(&quot;1234567&quot;, k=5, padding='center', evenpad='pre', placeholder='x')   [[f&quot;{s:^5}&quot; for s in seq] for seq in shingles]::   [['  1  ', '  2  ', '  3  ', '  4  ', '  5  ', '  6  ', '  7  '],    ['  x  ', ' 12  ', ' 23  ', ' 34  ', ' 45  ', ' 56  ', ' 67  '],    ['  x  ', ' 123 ', ' 234 ', ' 345 ', ' 456 ', ' 567 ', '  x  '],    ['  x  ', '  x  ', '1234 ', '2345 ', '3456 ', '4567 ', '  x  '],    ['  x  ', '  x  ', '12345', '23456', '34567', '  x  ', '  x  ']]Identify Vocabulary of unique shingles~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: py   import kshingle as ks   data = [       'Ceratosaurus („Horn-Echse“) ist eine Gattung theropoder Dinosaurier aus dem Oberjura von Nordamerika und Europa.',       'Charakteristisch für diesen zweibeinigen Fleischfresser waren drei markante Hörner auf dem Schädel sowie eine Reihe kleiner Osteoderme (Hautknochenplatten), die über Hals, Rücken und Schwanz verlief.',       'Er ist der namensgebende Vertreter der Ceratosauria, einer Gruppe basaler (ursprünglicher) Theropoden.'   ]   shingled = [ks.shingleseqs_k(s, k=6) for s in data]   VOCAB = ks.identify_vocab(       shingled, sortmode='log-x-length', n_min_count=2, n_max_vocab=20)   print(VOCAB)Upsert a word to VOCAB~~~~~~~~~~~~~~~~~~~~~~.. code:: py   import kshingle as ks   VOCAB = ['a', 'b']   # insert because &quot;[UNK]&quot; doesn't exist   VOCAB, idx = ks.upsert_word_to_vocab(VOCAB, &quot;[UNK]&quot;)   print(idx, VOCAB)   # 2 ['a', 'b', '[UNK]']   # don't insert because &quot;[UNK]&quot; already exists   VOCAB, idx = ks.upsert_word_to_vocab(VOCAB, &quot;[UNK]&quot;)   print(idx, VOCAB)   # 2 ['a', 'b', '[UNK]']Encode sequences of shingles~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: py   import kshingle as ks   data = ['abc d abc de abc def', 'abc defg abc def gh abc def ghi']   shingled = [ks.shingleseqs_k(s, k=5) for s in data]   VOCAB = ks.identify_vocab(shingled, n_max_vocab=10)   VOCAB, unkid = ks.upsert_word_to_vocab(VOCAB, &quot;[UNK]&quot;)   # Encode all sequences   encoded = ks.encode_with_vocab(shingled, VOCAB, unkid)Find k~~~~~~For bigger ``k`` values, the generate longer shingles that occur lessfrequent. And less frequent shingles might be excluded in``ks.identify_vocab``. As a result at some upper ``k`` value thegenerated sequences only contains ``[UNK]`` encoded elements. Thefunction ``ks.shrink_k_backwards`` identifies ``k`` values that generatesequences that contain at least one encoded shingle across all examples... code:: py   import kshingle as ks   data = ['abc d abc de abc def', 'abc defg abc def gh abc def ghi']   # Step 1: Build a VOCAB   shingled = [ks.shingleseqs_k(s, k=9) for s in data]   VOCAB = ks.identify_vocab(shingled, n_max_vocab=10)   VOCAB, unkid = ks.upsert_word_to_vocab(VOCAB, &quot;[UNK]&quot;)   encoded = ks.encode_with_vocab(shingled, VOCAB, unkid)   # Identify k's that are actually used   klist = ks.shrink_k_backwards(encoded, unkid)   # Step 2: Shingle sequences again   shingled = [ks.shingleseqs_list(s, klist=klist) for s in data]   encoded = encode_with_vocab(shingled, VOCAB, unkid)   # ...Collectively Exhaustive Wildcard Shingling (CEWS)-------------------------------------------------CEWS is a selection algorithm for k-shingles with wildcards to build avocabulary list.Extract and count shingles~~~~~~~~~~~~~~~~~~~~~~~~~~First, build a database ``db`` with shingles as keys and the occurencewithin a corpus as values... code:: py   from collections import Counter   import kshingle as ks   import itertools   # load the corpora   docs = [&quot;...&quot;, &quot;...&quot;]   # loop over all documents   db = Counter()   for doc in docs:       # extract all shingles of different k-length (no wildcards!)       shingles = ks.shingleseqs_k(doc, k=5)  # bump it up to 8       # count all unique shingles, and add the result       db += Counter(itertools.chain(*shingles))   db = dict(db)   len(db)Extra: Augment text by adding typological errors~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~In order to increase the generalizibility of a trained ML model, we canuse text augmentation to produce possible edge case of errornous text.High quality corpora try to avoid such errors, and corpora basedlaymen’s text might not include each possible edge case... code:: py   import augtxt.keyboard_layouts as kbl   from augtxt.augmenters import wordaug   import numpy as np   from collections import Counter   # Augmentation settings: Probability of typological errors   settings = [       {'p': 0.50, 'fn': 'typo.drop_n_next_twice', 'args': {'loc': ['m', 'e'], 'keep_case': [True, False]} },       {'p': 0.50, 'fn': 'typo.swap_consecutive', 'args': {'loc': ['m', 'e'], 'keep_case': [True, False]} },       {'p': 0.25, 'fn': 'typo.pressed_twice', 'args': {'loc': 'u', 'keep_case': [True, False]} },       {'p': 0.25, 'fn': 'typo.drop_char', 'args': {'loc': ['m', 'e'], 'keep_case': [True, False]} },       {'p': 0.25, 'fn': 'typo.pressed_shiftalt', 'args': {'loc': ['b', 'm'], 'keymap': kbl.macbook_us, 'trans': kbl.keyboard_transprob}},   ]   # Number of augmentation rounds (i.e. the total count will be 10-1000x larger)   n_augm_rounds = 10   # maximum percentage of augmentions   pct_augmented = 0.1    pct_augmented *= (1.0 + np.prod([cfg['p'] for cfg in settings]))   # Count factor for original shingle   n_factor_original = int((n_augm_rounds / pct_augmented) * (1 - pct_augmented))   # reproducibility   np.random.seed(seed=42)   # loop over shingle frequency database (`db`)   db2 = Counter()   for original in db.keys():       augmented = [wordaug(original, settings) for _ in range(n_augm_rounds)]       # count all unique augmented shingles, and add the result       db2 += Counter(augmented)       # count the original shingle       db2[original] += n_factor_original   db2 = dict(db2)   len(db2)Select the shingles (CEWS), create pattern list, and encode data~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: py   # use `db` or `db2` (see above)   import kshingle as ks   memo = ks.cews(db2, max_wildcards=1, min_samples_leaf=10, threshold=0.9)   # ensure that certain shingles are in the memoization cache   #memo = {k: db[k] for k in [&quot;i.e.&quot;, &quot;e.g.&quot;]}   #memo = ks.cews(db2, memo=memo, max_wildcards=1, min_samples_leaf=10, threshold=0.9)   # `min_samples_leaf` as pecentage   #memo = ks.cews(db2, max_wildcards=1, min_samples_leaf=0.0005, threshold=0.9)   # try to stop early when reaching a target vocab size   #memo = ks.cews(db2, max_wildcards=1, vocab_size=500, min_samples_leaf='auto', threshold=0.9)   # test rare edge cases first   #memo = ks.cews(db2, max_wildcards=1, priority='rare', min_samples_leaf=1, threshold=0.9)   # Build a pattern list   PATTERNS = ks.shingles_to_patterns(memo, wildcard='\uFFFF')   unkid = sum([len(pats) for pats in PATTERNS.values()])Finally, we can start to encode data.. code:: py   # Encode data   encoded, shingled = ks.encode_multi_match_text(       text, k=5, PATTERNS=PATTERNS, num_matches=3, unkid=unkid)   # is slower   # encoded, shingled = ks.encode_multi_match_corpus(   #     [text], k=5, PATTERNS=PATTERNS, num_matches=3, unkid=unkid)Appendix--------Installation~~~~~~~~~~~~The ``kshingle`` `git repo &lt;http://github.com/ulf1/kshingle&gt;`__ isavailable as `PyPi package &lt;https://pypi.org/project/kshingle&gt;`__::   pip install kshingle   pip install git+ssh://git@github.com/ulf1/kshingle.gitCommands~~~~~~~~Install a virtual environment::   python3 -m venv .venv   source .venv/bin/activate   pip install --upgrade pip   pip install -r requirements.txt --no-cache-dir   pip install -r requirements-dev.txt --no-cache-dir(If your git repo is stored in a folder with whitespaces, then don’t usethe subfolder ``.venv``. Use an absolute path without whitespaces.)Python commands-  Check syntax:   ``flake8 --ignore=F401 --exclude=$(grep -v '^#' .gitignore | xargs | sed -e 's/ /,/g')``-  Run Unit Tests: ``pytest``Publish.. code:: sh   pandoc README.md --from markdown --to rst -s -o README.rst   python setup.py sdist    twine upload -r pypi dist/*Clean up::   find . -type f -name &quot;*.pyc&quot; | xargs rm   find . -type d -name &quot;__pycache__&quot; | xargs rm -r   rm -r .pytest_cache   rm -r .venvSupport~~~~~~~Please `open an issue &lt;https://github.com/ulf1/kshingle/issues/new&gt;`__for support.Contributing~~~~~~~~~~~~Please contribute using `GithubFlow &lt;https://guides.github.com/introduction/flow/&gt;`__. Create a branch,add commits, and `open a pullrequest &lt;https://github.com/ulf1/kshingle/compare/&gt;`__... |PyPI version| image:: https://badge.fury.io/py/kshingle.svg   :target: https://badge.fury.io/py/kshingle.. |DOI| image:: https://zenodo.org/badge/317843267.svg   :target: https://zenodo.org/badge/latestdoi/317843267.. |PyPi downloads| image:: https://img.shields.io/pypi/dm/kshingle   :target: https://img.shields.io/pypi/dm/kshingle</longdescription>
</pkgmetadata>