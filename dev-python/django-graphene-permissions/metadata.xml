<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DGP - Django graphene permissionsPermission system inspired by DRF## InstallationInstall the latest release:```shell$ pip3 install django-graphene-permissions```Or using pipenv```shell$ pipenv install django-graphene-permissions```## Usage### Permission definition---You can create new permissions by subclassing `BasePermission` e.g. ```pythonfrom django_graphene_permissions.permissions import BasePermissionclass MyPermission(BasePermission):    @staticmethod    def has_permission(context):        return context.user and context.user.is_authenticated    @staticmethod    def has_object_permission(context, obj):        return True```This package provides predefined permissions : * `AllowAny` : Allow any access.* `IsAuthenticated` : Allow only authenticated users.### Node Permission---Subclass `PermissionDjangoObjectType` and define the permissions via the static method `permission_classes` that should return an iterable of permission classes```pythonfrom django_graphene_permissions import PermissionDjangoObjectTypefrom django_graphene_permissions.permissions import IsAuthenticatedclass ExampleNode(PermissionDjangoObjectType):    class Meta:        model = Example        interfaces = (relay.Node,)    @staticmethod    def permission_classes():        return [IsAuthenticated]```### Mutation Permission---Apply the `permissions_checker([Permission,...])` decorator to `mutate` e.g.```pythonfrom django_graphene_permissions import permissions_checkerfrom django_graphene_permissions.permissions import IsAuthenticatedclass ExampleDeleteMutation(graphene.Mutation):    ok = graphene.Boolean()    class Arguments:        id = graphene.ID()    @permissions_checker([IsAuthenticated])    def mutate(self, info, id):        instance = get_instance(id)        instance.delete()        return ExampleDeleteMutation(ok=True)``` ### Query Permission---Apply the `permissions_checker([Permission,...])` decorator to the field resolver e.g.```pythonfrom django_graphene_permissions import permissions_checkerfrom django_graphene_permissions.permissions import IsAuthenticatedclass Query(graphene.ObjectType):    post = relay.Node.Field(PostNode)    posts = DjangoFilterConnectionField(PostNode)    @permissions_checker([IsAuthenticated])    def resolve_posts(self, info, **kwargs):        return Post.objects.all()```## TODO* Improvements* Tests* Add a `PermissionDjangoFilterConnectionField`* Better docs</longdescription>
</pkgmetadata>