<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Nitpick=======|PyPI||Supported Python versions||GitHub Actions Python Workflow||Documentation Status||Coveralls||Maintainability||Test Coverage||pre-commit||pre-commit.ci status||Project License||Code style: black||Renovate||semantic-release||FOSSA Status|Command-line tool and `flake8 &lt;https://github.com/PyCQA/flake8&gt;`_plugin to enforce the same settings across multiple language-independentprojects.Useful if you maintain multiple projects and are tired ofcopying/pasting the same INI/TOML/YAML/JSON keys and values over andover, in all of them.The CLI now has a ``nitpick fix`` command that modifies configurationfiles directly (pretty much like`black &lt;https://github.com/psf/black&gt;`_ and`isort &lt;https://github.com/PyCQA/isort&gt;`_ do with Python files).See the `CLI docs for moreinfo &lt;https://nitpick.rtfd.io/en/latest/cli.html&gt;`_.Many more features are planned for the future, check `theroadmap &lt;https://github.com/andreoliwa/nitpick/projects/1&gt;`_.The style file--------------A &quot;Nitpick code style&quot; is a `TOML &lt;https://github.com/toml-lang/toml&gt;`_file with the settings that should be present in config files from othertools.Example of a style:.. code-block:: toml    [&quot;pyproject.toml&quot;.tool.black]    line-length = 120    [&quot;pyproject.toml&quot;.tool.poetry.dev-dependencies]    pylint = &quot;*&quot;    [&quot;setup.cfg&quot;.flake8]    ignore = &quot;D107,D202,D203,D401&quot;    max-line-length = 120    inline-quotes = &quot;double&quot;    [&quot;setup.cfg&quot;.isort]    line_length = 120    multi_line_output = 3    include_trailing_comma = true    force_grid_wrap = 0    combine_as_imports = trueThis style will assert that:-  ... `black &lt;https://github.com/psf/black&gt;`_,   `isort &lt;https://github.com/PyCQA/isort&gt;`_ and   `flake8 &lt;https://github.com/PyCQA/flake8&gt;`_ have a line length of   120;-  ... `flake8 &lt;https://github.com/PyCQA/flake8&gt;`_ and   `isort &lt;https://github.com/PyCQA/isort&gt;`_ are configured as above in   ``setup.cfg``;-  ... `Pylint &lt;https://www.pylint.org&gt;`__ is present as a   `Poetry &lt;https://github.com/python-poetry/poetry&gt;`_ dev dependency   in ``pyproject.toml``.Supported file types--------------------These are the file types currently handled by Nitpick.-  Some files are only being checked and have to be modified manually;-  Some files can already be fixed automatically (with the   ``nitpick fix`` command);-  Others are still under construction; the ticket numbers are shown in   the table (upvote the ticket with üëçüèª if you would like to prioritise   development).Implemented~~~~~~~~~~~.. auto-generated-start-implemented.. list-table::   :header-rows: 1   * - File type     - ``nitpick check``     - ``nitpick fix``   * - `Any INI file &lt;https://nitpick.rtfd.io/en/latest/plugins.html#ini-files&gt;`_     - ‚úÖ     - ‚úÖ   * - `Any JSON file &lt;https://nitpick.rtfd.io/en/latest/plugins.html#json-files&gt;`_     - ‚úÖ     - ‚úÖ   * - `Any plain text file &lt;https://nitpick.rtfd.io/en/latest/plugins.html#text-files&gt;`_     - ‚úÖ     - ‚ùå   * - `Any TOML file &lt;https://nitpick.rtfd.io/en/latest/plugins.html#toml-files&gt;`_     - ‚úÖ     - ‚úÖ   * - `Any YAML file &lt;https://nitpick.rtfd.io/en/latest/plugins.html#yaml-files&gt;`_     - ‚úÖ     - ‚úÖ   * - `.editorconfig &lt;https://nitpick.rtfd.io/en/latest/library.html#any&gt;`_     - ‚úÖ     - ‚úÖ   * - `.pylintrc &lt;https://nitpick.rtfd.io/en/latest/plugins.html#ini-files&gt;`_     - ‚úÖ     - ‚úÖ   * - `setup.cfg &lt;https://nitpick.rtfd.io/en/latest/plugins.html#ini-files&gt;`_     - ‚úÖ     - ‚úÖ.. auto-generated-end-implementedPlanned~~~~~~~.. auto-generated-start-planned.. list-table::   :header-rows: 1   * - File type     - ``nitpick check``     - ``nitpick fix``   * - Any Markdown file     - `#280 &lt;https://github.com/andreoliwa/nitpick/issues/280&gt;`_ üöß     - ‚ùì   * - Any Terraform file     - `#318 &lt;https://github.com/andreoliwa/nitpick/issues/318&gt;`_ üöß     - ‚ùì   * - Dockerfile     - `#272 &lt;https://github.com/andreoliwa/nitpick/issues/272&gt;`_ üöß     - `#272 &lt;https://github.com/andreoliwa/nitpick/issues/272&gt;`_ üöß   * - .dockerignore     - `#8 &lt;https://github.com/andreoliwa/nitpick/issues/8&gt;`_ üöß     - `#8 &lt;https://github.com/andreoliwa/nitpick/issues/8&gt;`_ üöß   * - .gitignore     - `#8 &lt;https://github.com/andreoliwa/nitpick/issues/8&gt;`_ üöß     - `#8 &lt;https://github.com/andreoliwa/nitpick/issues/8&gt;`_ üöß   * - Jenkinsfile     - `#278 &lt;https://github.com/andreoliwa/nitpick/issues/278&gt;`_ üöß     - ‚ùì   * - Makefile     - `#277 &lt;https://github.com/andreoliwa/nitpick/issues/277&gt;`_ üöß     - ‚ùì.. auto-generated-end-plannedStyle Library (Presets)-----------------------Nitpick has a builtin library of style presets, shipped as `Python resources &lt;https://docs.python.org/3/library/importlib.html#module-importlib.resources&gt;`_.This library contains building blocks for your your custom style.Just choose styles from the table below and create your own style, like LEGO.Read how to:- `...add multiple styles to the configuration file &lt;https://nitpick.readthedocs.io/en/latest/configuration.html#multiple-styles&gt;`_;- `...include styles inside a style &lt;https://nitpick.readthedocs.io/en/latest/nitpick_section.html#nitpick-styles&gt;`_... auto-generated-start-style-libraryany~~~.. list-table::   :header-rows: 1   * - Style URL     - Description   * - `py://nitpick/resources/any/codeclimate &lt;src/nitpick/resources/any/codeclimate.toml&gt;`_     - `CodeClimate &lt;https://codeclimate.com/&gt;`_   * - `py://nitpick/resources/any/commitizen &lt;src/nitpick/resources/any/commitizen.toml&gt;`_     - `Commitizen (Python) &lt;https://github.com/commitizen-tools/commitizen&gt;`_   * - `py://nitpick/resources/any/commitlint &lt;src/nitpick/resources/any/commitlint.toml&gt;`_     - `commitlint &lt;https://github.com/conventional-changelog/commitlint&gt;`_   * - `py://nitpick/resources/any/editorconfig &lt;src/nitpick/resources/any/editorconfig.toml&gt;`_     - `EditorConfig &lt;https://editorconfig.org/&gt;`_   * - `py://nitpick/resources/any/git-legal &lt;src/nitpick/resources/any/git-legal.toml&gt;`_     - `Git.legal - CodeClimate Community Edition &lt;https://github.com/kmewhort/git.legal-codeclimate&gt;`_   * - `py://nitpick/resources/any/markdownlint &lt;src/nitpick/resources/any/markdownlint.toml&gt;`_     - `Markdown lint &lt;https://github.com/markdownlint/markdownlint&gt;`_   * - `py://nitpick/resources/any/pre-commit-hooks &lt;src/nitpick/resources/any/pre-commit-hooks.toml&gt;`_     - `pre-commit hooks for any project &lt;https://github.com/pre-commit/pre-commit-hooks&gt;`_   * - `py://nitpick/resources/any/prettier &lt;src/nitpick/resources/any/prettier.toml&gt;`_     - `Prettier &lt;https://github.com/prettier/prettier&gt;`_javascript~~~~~~~~~~.. list-table::   :header-rows: 1   * - Style URL     - Description   * - `py://nitpick/resources/javascript/package-json &lt;src/nitpick/resources/javascript/package-json.toml&gt;`_     - `package.json &lt;https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md&gt;`_kotlin~~~~~~.. list-table::   :header-rows: 1   * - Style URL     - Description   * - `py://nitpick/resources/kotlin/ktlint &lt;src/nitpick/resources/kotlin/ktlint.toml&gt;`_     - `ktlint &lt;https://github.com/pinterest/ktlint&gt;`_presets~~~~~~~.. list-table::   :header-rows: 1   * - Style URL     - Description   * - `py://nitpick/resources/presets/nitpick &lt;src/nitpick/resources/presets/nitpick.toml&gt;`_     - `Default style file for Nitpick &lt;https://nitpick.rtfd.io/&gt;`_proto~~~~~.. list-table::   :header-rows: 1   * - Style URL     - Description   * - `py://nitpick/resources/proto/protolint &lt;src/nitpick/resources/proto/protolint.toml&gt;`_     - `protolint (Protobuf linter) &lt;https://github.com/yoheimuta/protolint&gt;`_python~~~~~~.. list-table::   :header-rows: 1   * - Style URL     - Description   * - `py://nitpick/resources/python/310 &lt;src/nitpick/resources/python/310.toml&gt;`_     - Python 3.10   * - `py://nitpick/resources/python/311 &lt;src/nitpick/resources/python/311.toml&gt;`_     - Python 3.11   * - `py://nitpick/resources/python/37 &lt;src/nitpick/resources/python/37.toml&gt;`_     - Python 3.7   * - `py://nitpick/resources/python/38 &lt;src/nitpick/resources/python/38.toml&gt;`_     - Python 3.8   * - `py://nitpick/resources/python/39 &lt;src/nitpick/resources/python/39.toml&gt;`_     - Python 3.9   * - `py://nitpick/resources/python/absent &lt;src/nitpick/resources/python/absent.toml&gt;`_     - Files that should not exist   * - `py://nitpick/resources/python/autoflake &lt;src/nitpick/resources/python/autoflake.toml&gt;`_     - `autoflake &lt;https://github.com/myint/autoflake&gt;`_   * - `py://nitpick/resources/python/bandit &lt;src/nitpick/resources/python/bandit.toml&gt;`_     - `Bandit &lt;https://github.com/PyCQA/bandit&gt;`_   * - `py://nitpick/resources/python/black &lt;src/nitpick/resources/python/black.toml&gt;`_     - `Black &lt;https://github.com/psf/black&gt;`_   * - `py://nitpick/resources/python/flake8 &lt;src/nitpick/resources/python/flake8.toml&gt;`_     - `Flake8 &lt;https://github.com/PyCQA/flake8&gt;`_   * - `py://nitpick/resources/python/github-workflow &lt;src/nitpick/resources/python/github-workflow.toml&gt;`_     - `GitHub Workflow for Python &lt;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions&gt;`_   * - `py://nitpick/resources/python/ipython &lt;src/nitpick/resources/python/ipython.toml&gt;`_     - `IPython &lt;https://github.com/ipython/ipython&gt;`_   * - `py://nitpick/resources/python/isort &lt;src/nitpick/resources/python/isort.toml&gt;`_     - `isort &lt;https://github.com/PyCQA/isort&gt;`_   * - `py://nitpick/resources/python/mypy &lt;src/nitpick/resources/python/mypy.toml&gt;`_     - `Mypy &lt;https://github.com/python/mypy&gt;`_   * - `py://nitpick/resources/python/poetry-editable &lt;src/nitpick/resources/python/poetry-editable.toml&gt;`_     - `Poetry (editable projects; PEP 600 support) &lt;https://github.com/python-poetry/poetry&gt;`_   * - `py://nitpick/resources/python/poetry &lt;src/nitpick/resources/python/poetry.toml&gt;`_     - `Poetry &lt;https://github.com/python-poetry/poetry&gt;`_   * - `py://nitpick/resources/python/pre-commit-hooks &lt;src/nitpick/resources/python/pre-commit-hooks.toml&gt;`_     - `pre-commit hooks for Python projects &lt;https://pre-commit.com/hooks&gt;`_   * - `py://nitpick/resources/python/pylint &lt;src/nitpick/resources/python/pylint.toml&gt;`_     - `Pylint &lt;https://github.com/PyCQA/pylint&gt;`_   * - `py://nitpick/resources/python/radon &lt;src/nitpick/resources/python/radon.toml&gt;`_     - `Radon &lt;https://github.com/rubik/radon&gt;`_   * - `py://nitpick/resources/python/readthedocs &lt;src/nitpick/resources/python/readthedocs.toml&gt;`_     - `Read the Docs &lt;https://github.com/readthedocs/readthedocs.org&gt;`_   * - `py://nitpick/resources/python/sonar-python &lt;src/nitpick/resources/python/sonar-python.toml&gt;`_     - `SonarQube Python plugin &lt;https://github.com/SonarSource/sonar-python&gt;`_   * - `py://nitpick/resources/python/stable &lt;src/nitpick/resources/python/stable.toml&gt;`_     - Current stable Python version   * - `py://nitpick/resources/python/tox &lt;src/nitpick/resources/python/tox.toml&gt;`_     - `tox &lt;https://github.com/tox-dev/tox&gt;`_shell~~~~~.. list-table::   :header-rows: 1   * - Style URL     - Description   * - `py://nitpick/resources/shell/bashate &lt;src/nitpick/resources/shell/bashate.toml&gt;`_     - `bashate (code style for Bash) &lt;https://github.com/openstack/bashate&gt;`_   * - `py://nitpick/resources/shell/shellcheck &lt;src/nitpick/resources/shell/shellcheck.toml&gt;`_     - `ShellCheck (static analysis for shell scripts) &lt;https://github.com/koalaman/shellcheck&gt;`_   * - `py://nitpick/resources/shell/shfmt &lt;src/nitpick/resources/shell/shfmt.toml&gt;`_     - `shfmt (shell script formatter) &lt;https://github.com/mvdan/sh&gt;`_.. auto-generated-end-style-libraryQuickstart----------Install~~~~~~~Install in an isolated global environment with`pipx &lt;https://github.com/pipxproject/pipx&gt;`_::    # Latest PyPI release    pipx install nitpick    # Development branch from GitHub    pipx install git+https://github.com/andreoliwa/nitpickOn macOS/Linux, install with`Homebrew &lt;https://github.com/Homebrew/brew&gt;`_::    # Latest PyPI release    brew install andreoliwa/formulae/nitpick    # Development branch from GitHub    brew install andreoliwa/formulae/nitpick --HEADOn Arch Linux, install with yay::    yay -Syu nitpickAdd to your project with`Poetry &lt;https://github.com/python-poetry/poetry&gt;`_::    poetry add --dev nitpickOr install it with pip::    pip install -U nitpickRun~~~To fix and modify your files directly::    nitpick fixTo check for errors only::    nitpick checkNitpick is also a ``flake8`` plugin, so you can run this on a projectwith at least one Python (``.py``) file::    flake8 .Nitpick will download and use the opinionated `default style file &lt;nitpick-style.toml&gt;`_.You can use it as a template to configure your own style.Run as a pre-commit hook~~~~~~~~~~~~~~~~~~~~~~~~If you use `pre-commit &lt;https://pre-commit.com/&gt;`_ on your project, addthis to the ``.pre-commit-config.yaml`` in your repository::    repos:      - repo: https://github.com/andreoliwa/nitpick        rev: v0.33.2        hooks:          - id: nitpickThere are 3 available hook IDs:- ``nitpick`` and ``nitpick-fix`` both run the ``nitpick fix`` command;- ``nitpick-check`` runs ``nitpick check``.If you want to run Nitpick as a flake8 plugin instead::    repos:      - repo: https://github.com/PyCQA/flake8        rev: 4.0.1        hooks:          - id: flake8            additional_dependencies: [nitpick]Run as a MegaLinter plugin~~~~~~~~~~~~~~~~~~~~~~~~~~If you use `MegaLinter &lt;https://megalinter.github.io/&gt;`_ you can run Nitpick as a plugin. Add the following two entries to your ``.mega-linter.yml`` configuration file:.. code-block:: yaml    PLUGINS:      - https://raw.githubusercontent.com/andreoliwa/nitpick/v0.33.2/mega-linter-plugin-nitpick/nitpick.megalinter-descriptor.yml    ENABLE_LINTERS:      - NITPICKMore information----------------Nitpick is being used by projects such as:-  `wemake-services/wemake-python-styleguide &lt;https://github.com/wemake-services/wemake-python-styleguide&gt;`_-  `dry-python/returns &lt;https://github.com/dry-python/returns&gt;`_-  `sobolevn/django-split-settings &lt;https://github.com/sobolevn/django-split-settings&gt;`_-  `catalyst-team/catalyst &lt;https://github.com/catalyst-team/catalyst&gt;`_-  `alan-turing-institute/AutSPACEs &lt;https://github.com/alan-turing-institute/AutSPACEs&gt;`_-  `pytest-dev/pytest-mimesis &lt;https://github.com/pytest-dev/pytest-mimesis&gt;`_For more details on styles and which configuration files are currentlysupported, `see the full documentation &lt;https://nitpick.rtfd.io/&gt;`_... |PyPI| image:: https://img.shields.io/pypi/v/nitpick.svg   :target: https://pypi.org/project/nitpick.. |GitHub Actions Python Workflow| image:: https://github.com/andreoliwa/nitpick/workflows/Python/badge.svg.. |Documentation Status| image:: https://readthedocs.org/projects/nitpick/badge/?version=latest   :target: https://nitpick.rtfd.io/en/latest/?badge=latest.. |Coveralls| image:: https://coveralls.io/repos/github/andreoliwa/nitpick/badge.svg   :target: https://coveralls.io/github/andreoliwa/nitpick.. |Maintainability| image:: https://api.codeclimate.com/v1/badges/61e0cdc48e24e76a0460/maintainability   :target: https://codeclimate.com/github/andreoliwa/nitpick.. |Test Coverage| image:: https://api.codeclimate.com/v1/badges/61e0cdc48e24e76a0460/test_coverage   :target: https://codeclimate.com/github/andreoliwa/nitpick.. |Supported Python versions| image:: https://img.shields.io/pypi/pyversions/nitpick.svg   :target: https://pypi.org/project/nitpick/.. |Project License| image:: https://img.shields.io/pypi/l/nitpick.svg   :target: https://pypi.org/project/nitpick/.. |Code style: black| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black.. |Renovate| image:: https://img.shields.io/badge/renovate-enabled-brightgreen.svg   :target: https://renovatebot.com/.. |semantic-release| image:: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg   :target: https://github.com/semantic-release/semantic-release.. |pre-commit| image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commit.. |pre-commit.ci status| image:: https://results.pre-commit.ci/badge/github/andreoliwa/nitpick/develop.svg   :target: https://results.pre-commit.ci/latest/github/andreoliwa/nitpick/develop.. |FOSSA Status| image:: https://app.fossa.com/api/projects/git%2Bgithub.com%2Fandreoliwa%2Fnitpick.svg?type=shield   :target: https://app.fossa.com/projects/git%2Bgithub.com%2Fandreoliwa%2Fnitpick?ref=badge_shieldContributing------------Your help is very much appreciated.There are many possibilities for new features in this project, and not enough time or hands to work on them.If you want to contribute with the project, set up your development environment following the steps on the `contribution guidelines &lt;https://nitpick.rtfd.io/en/latest/contributing.html&gt;`_ and send your pull request.</longdescription>
</pkgmetadata>