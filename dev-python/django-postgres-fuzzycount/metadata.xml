<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Created by `Stephen McDonald &lt;http://twitter.com/stephen_mcd&gt;`_Introduction============Up until PostgreSQL 9.2, ``COUNT`` queries generally required scanningevery row in a database table. With millions of rows, this can becomequite slow. One work-around for this is to query statistics inPostgreSQL for an approximate row count, which in many cases is anacceptable trade-off.Given a table called ``bigdata``, the following query will return anapproximate row count::    SELECT reltuples FROM pg_class WHERE relname = 'bigdata';You can read more information about `slow COUNT queries in PostgreSQL`_in the PostgreSQL wiki.What ``django-postgres-fuzzycount`` provides is a way of using thisapproach directly in your Django model managers. It was originallybuilt for displaying statistics in the `kouio RSS reader`_, a popular alternative to Google Reader, that acquired over 5 million news articlesin its database during the first week of its launch.Installation============The easiest way to install ``django-postgres-fuzzycount`` is directlyfrom PyPi using `pip`_ by running the following command::    $ pip install -U django-postgres-fuzzycountOtherwise you can download and install it directly from source::    $ python setup.py installUsage=====By using the ``fuzzycount.FuzzyCountManager`` on your Django models,its ``count()`` method will return an approximate value when queryingPostgreSQL tables without any ``WHERE`` OR ``HAVING`` clauses::    from django.db import models    from fuzzycount import FuzzyCountManager    class BigData(models.Model):        big = models.BooleanField(default=True)        data = models.TextField()        objects = FuzzyCountManager()    BigData.objects.count()  # Uses fuzzycount    BigData.objects.filter(id__gt=9000).count()  # Doesn't use fuzzycountThe ``fuzzycount.FuzzyCountManager`` also checks the database enginebeing used, and only applies the approximate count query when usingPostgreSQL, so other database backends can be used and will behave asusual (for varying definitions of `usual`, depending on the database :-).Inspiration===========  * `postgres_loose_table_counts`_, a Ruby gem providing the same    approach for Rails  * This `Django snippet`_, which bakes the approach into the admin.. _`slow COUNT queries in PostgreSQL`: http://wiki.postgresql.org/wiki/Slow_Counting.. _`kouio RSS reader`: https://kouio.com.. _`pip`: http://www.pip-installer.org/.. _`postgres_loose_table_counts`: https://github.com/goodfilms/postgres_loose_table_counts.. _`Django snippet`: http://djangosnippets.org/snippets/2855/</longdescription>
</pkgmetadata>