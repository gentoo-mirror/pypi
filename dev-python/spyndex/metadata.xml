<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/davemlz/spyndex&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/davemlz/spyndex/main/docs/_static/spyndex.png&quot; alt=&quot;spyndex&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;&lt;a href=&quot;https://github.com/davemlz/awesome-ee-spectral-indices&quot; target=&quot;_blank&quot;&gt;    Awesome Spectral Indices&lt;/a&gt; in Python:&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;b&gt;&lt;a href=&quot;https://github.com/numpy/numpy&quot; target=&quot;_blank&quot;&gt;    Numpy&lt;/a&gt; | &lt;a href=&quot;https://github.com/pandas-dev/pandas&quot; target=&quot;_blank&quot;&gt;    Pandas&lt;/a&gt; | &lt;a href=&quot;https://github.com/geopandas/geopandas&quot; target=&quot;_blank&quot;&gt;    GeoPandas&lt;/a&gt; | &lt;a href=&quot;https://github.com/pydata/xarray&quot; target=&quot;_blank&quot;&gt;    Xarray&lt;/a&gt; | &lt;a href=&quot;https://github.com/google/earthengine-api&quot; target=&quot;_blank&quot;&gt;    Earth Engine&lt;/a&gt; | &lt;a href=&quot;https://github.com/microsoft/planetary-computer-sdk-for-python&quot; target=&quot;_blank&quot;&gt;    Planetary Computer&lt;/a&gt; | &lt;a href=&quot;https://docs.dask.org/en/latest/&quot; target=&quot;_blank&quot;&gt;    Dask&lt;/a&gt; &lt;/b&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href='https://pypi.python.org/pypi/spyndex'&gt;    &lt;img src='https://img.shields.io/pypi/v/spyndex.svg' alt='PyPI' /&gt;&lt;/a&gt;&lt;a href='https://anaconda.org/conda-forge/spyndex'&gt;    &lt;img src='https://img.shields.io/conda/vn/conda-forge/spyndex.svg' alt='conda-forge' /&gt;&lt;/a&gt;&lt;a href='https://spyndex.readthedocs.io/en/latest/?badge=latest'&gt;    &lt;img src='https://readthedocs.org/projects/spyndex/badge/?version=latest' alt='Documentation Status' /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/davemlz/spyndex/actions/workflows/tests.yml&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/davemlz/spyndex/actions/workflows/tests.yml/badge.svg&quot; alt=&quot;Tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/davemlz/spyndex/actions/workflows/update_awesome_spectral_indices.yml&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/davemlz/spyndex/actions/workflows/update_awesome_spectral_indices.yml/badge.svg&quot; alt=&quot;Awesome Spectral Indices&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://opensource.org/licenses/MIT&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/License-MIT-blue.svg&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sponsors/davemlz&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/GitHub%20Sponsors-Donate-ff69b4.svg&quot; alt=&quot;GitHub Sponsors&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.buymeacoffee.com/davemlz&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/Buy%20me%20a%20coffee-Donate-ff69b4.svg&quot; alt=&quot;Buy me a coffee&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ko-fi.com/davemlz&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/kofi-Donate-ff69b4.svg&quot; alt=&quot;Ko-fi&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/dmlmont&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/twitter/follow/dmlmont?style=social&quot; alt=&quot;Twitter&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot; alt=&quot;Black&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pycqa.github.io/isort/&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336&quot; alt=&quot;isort&quot;&gt;&lt;/a&gt;&lt;/p&gt;---**GitHub**: [https://github.com/davemlz/spyndex](https://github.com/davemlz/spyndex)**Documentation**: [https://spyndex.readthedocs.io/](https://spyndex.readthedocs.io/)**Paper**: [https://doi.org/10.1038/s41597-023-02096-0](https://doi.org/10.1038/s41597-023-02096-0)**PyPI**: [https://pypi.org/project/spyndex/](https://pypi.org/project/spyndex/)**Conda-forge**: [https://anaconda.org/conda-forge/spyndex](https://anaconda.org/conda-forge/spyndex)**Tutorials**: [https://spyndex.readthedocs.io/en/latest/tutorials.html](https://spyndex.readthedocs.io/en/latest/tutorials.html)---## OverviewThe [Awesome Spectral Indices](https://github.com/davemlz/awesome-spectral-indices) is a standardized ready-to-use curated list of spectral indicesthat can be used as expressions for computing spectral indices in remote sensing applications. The list was born initially to supply spectral indices for [Google Earth Engine](https://earthengine.google.com/) through [eemont](https://github.com/davemlz/eemont) and [spectral](https://github.com/davemlz/spectral), but given the necessity to compute spectral indices for other object classes outside the Earth Engine ecosystem, a new package was required.Spyndex is a python package that uses the spectral indices from the *Awesome Spectral Indices* list and creates an expression evaluation method that iscompatible with python object classes that support [overloaded operators](https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types)(e.g. [numpy.ndarray](https://github.com/numpy/numpy), [pandas.Series](https://github.com/pandas-dev/pandas),[xarray.DataArray](https://github.com/pydata/xarray)).Some of the `spyndex` features are listed here:- Access to Spectral Indices from the Awesome Spectral Indices list.- Multiple Spectral Indices computation.- Kernel Indices computation.- Parallel processing.- Compatibility with a lot of python objects!Check the simple usage of spyndex here:```pythonimport spyndeximport numpy as npimport xarray as xrN = np.random.normal(0.6,0.10,10000)R = np.random.normal(0.1,0.05,10000)da = xr.DataArray(    np.array([N,R]).reshape(2,100,100),    dims = (&quot;band&quot;,&quot;x&quot;,&quot;y&quot;),    coords = {&quot;band&quot;: [&quot;NIR&quot;,&quot;Red&quot;]})idx = spyndex.computeIndex(    index = [&quot;NDVI&quot;,&quot;SAVI&quot;],    params = {        &quot;N&quot;: da.sel(band = &quot;NIR&quot;),        &quot;R&quot;: da.sel(band = &quot;Red&quot;),        &quot;L&quot;: 0.5    })```Bands can also be passed as keywords arguments:```pythonidx = spyndex.computeIndex(    index = [&quot;NDVI&quot;,&quot;SAVI&quot;],    N = da.sel(band = &quot;NIR&quot;),    R = da.sel(band = &quot;Red&quot;),    L = 0.5)```And indices can be computed from their class:```pythonidx = spyndex.indices.NDVI.compute(    N = da.sel(band = &quot;NIR&quot;),    R = da.sel(band = &quot;Red&quot;),)```## How does it work?Any python object class that supports overloaded operators can be used with spyndex methods.---*&quot;Hey... what do you mean by 'overloaded operators'?&quot;*---That's the million dollars' question! An object class that supports overloaded operators is the one that allows you to compute mathematical operations using common operators (`+`, `-`, `/`, `*`, `**`) like `a + b`, `a + b * c` or `(a - b) / (a + b)`. You know the last one, right? That's the formula of the famous [NDVI](https://doi.org/10.1016/0034-4257(79)90013-0).So, if you can use the overloaded operators with an object class, you can use that class with [spyndex](https://github.com/davemlz/spyndex)!&gt; BE CAREFUL! Not all overloaded operators work as mathematical operators. In a `list` object class, the addition operator (`+`) concatenates two objects instead of performing an addition operation! So you must convert the `list` into a `numpy.ndarray` before using spyndex!Here is a little list of object classes that support mathematical overloaded operators:- `float` (Python Built-in type) or `numpy.float*` (with [numpy](https://github.com/numpy/numpy))- `int` (Python Built-in type) or `numpy.int*` (with [numpy](https://github.com/numpy/numpy))- `numpy.ndarray` (with [numpy](https://github.com/numpy/numpy))- `pandas.Series` (with [pandas](https://github.com/pandas-dev/pandas) or [geopandas](https://github.com/geopandas/geopandas))- `xarray.DataArray` (with [xarray](https://github.com/pydata/xarray))- `ee.Image` (with [earthengine-api](https://github.com/google/earthengine-api) and [eemont](https://github.com/davemlz/eemont))- `ee.Number` (with [earthengine-api](https://github.com/google/earthengine-api) and [eemont](https://github.com/davemlz/eemont))And wait, there is more! If objects that support overloaded operatores can be used in spyndex, that means that you can work in **parallel**with [dask](https://docs.dask.org/en/latest/)!Here is the list of the dask objects that you can use with spyndex:- `dask.Array` (with [dask](https://docs.dask.org/en/latest/))- `dask.Series` (with [dask](https://docs.dask.org/en/latest/))This means that you can actually use spyndex in a lot of processes! For example, you can download a Sentinel-2 image with[sentinelsat](https://github.com/sentinelsat/sentinelsat), open and read it with [rasterio](https://github.com/mapbox/rasterio) and then compute the desired spectral indices with [spyndex](https://github.com/davemlz/spyndex). Or you can search through the Landsat-8 STAC in the [Planetary Computer](https://planetarycomputer.microsoft.com/) ecosystem using [pystac-client](https://github.com/stac-utils/pystac-client),convert it to an `xarray.DataArray` with [stackstac](https://github.com/gjoseph92/stackstac) and then compute spectral indices using[spyndex](https://github.com/davemlz/spyndex) in parallel with [dask](https://docs.dask.org/en/latest/)! Amazing, right!?## InstallationInstall the latest version from PyPI:```pip install spyndex```Upgrade spyndex by running:```pip install -U spyndex```Install the latest version from conda-forge:```conda install -c conda-forge spyndex```Install the latest dev version from GitHub by running:```pip install git+https://github.com/davemlz/spyndex```## Features### Exploring Spectral IndicesSpectral Indices from the Awesome Spectral Indices list can be accessed through`spyndex.indices`. This is a `Box` object where each one of the indices in the listcan be accessed as well as their [attributes](https://github.com/davemlz/awesome-ee-spectral-indices#attributes):```pythonimport spyndex# All indicesspyndex.indices# NDVI indexspyndex.indices[&quot;NDVI&quot;]# Or with dot notationspyndex.indices.NDVI# Formula of the NDVIspyndex.indices[&quot;NDVI&quot;][&quot;formula&quot;]# Or with dot notationspyndex.indices.NDVI.formula# Reference of the NDVIspyndex.indices[&quot;NDVI&quot;][&quot;reference&quot;]# Or with dot notationspyndex.indices.NDVI.reference```### Default ValuesSome Spectral Indices require constant values in order to be computed. Default valuescan be accessed through `spyndex.constants`. This is a `Box` object where each oneof the [constants](https://github.com/davemlz/awesome-spectral-indices#expressions) can beaccessed:```pythonimport spyndex# All constantsspyndex.constants# Canopy Background Adjustmentspyndex.constants[&quot;L&quot;]# Or with dot notationspyndex.constants.L# Default valuespyndex.constants[&quot;L&quot;][&quot;default&quot;]# Or with dot notationspyndex.constants.L.default```### Band ParametersThe standard band parameters description can be accessed through `spyndex.bands`. This is a `Box` object where each one of the [bands](https://github.com/davemlz/awesome-spectral-indices#expressions) can be accessed:```pythonimport spyndex# All bandsspyndex.bands# Blue bandspyndex.bands[&quot;B&quot;]# Or with dot notationspyndex.bands.B```### One (or more) Spectral Indices ComputationUse the `computeIndex()` method to compute as many spectral indices as you want!The `index` parameter receives the spectral index or a list of spectral indices tocompute, while the `params` parameter receives a dictionary with the[required parameters](https://github.com/davemlz/awesome-ee-spectral-indices#expressions)for the spectral indices computation.```pythonimport spyndeximport xarray as xrimport matplotlib.pyplot as pltfrom rasterio import plot# Open a dataset (in this case a xarray.DataArray)snt = spyndex.datasets.open(&quot;sentinel&quot;)# Scale the data (remember that the valid domain for reflectance is [0,1])snt = snt / 10000# Compute the desired spectral indicesidx = spyndex.computeIndex(    index = [&quot;NDVI&quot;,&quot;GNDVI&quot;,&quot;SAVI&quot;],    params = {        &quot;N&quot;: snt.sel(band = &quot;B08&quot;),        &quot;R&quot;: snt.sel(band = &quot;B04&quot;),        &quot;G&quot;: snt.sel(band = &quot;B03&quot;),        &quot;L&quot;: 0.5    })# Plot the indices (and the RGB image for comparison)fig, ax = plt.subplots(2,2,figsize = (10,10))plot.show(snt.sel(band = [&quot;B04&quot;,&quot;B03&quot;,&quot;B02&quot;]).data / 0.3,ax = ax[0,0],title = &quot;RGB&quot;)plot.show(idx.sel(index = &quot;NDVI&quot;),ax = ax[0,1],title = &quot;NDVI&quot;)plot.show(idx.sel(index = &quot;GNDVI&quot;),ax = ax[1,0],title = &quot;GNDVI&quot;)plot.show(idx.sel(index = &quot;SAVI&quot;),ax = ax[1,1],title = &quot;SAVI&quot;)```&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/davemlz/spyndex&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/davemlz/spyndex/main/docs/_static/sentinel.png&quot; alt=&quot;sentinel spectral indices&quot;&gt;&lt;/a&gt;&lt;/p&gt;### Kernel Indices ComputationUse the `computeKernel()` method to compute the required kernel for kernel indices likethe kNDVI! The `kernel` parameter receives the kernel to compute, while the `params` parameter receives a dictionary with the[required parameters](https://github.com/davemlz/awesome-ee-spectral-indices#expressions)for the kernel computation (e.g., `a`, `b` and `sigma` for the RBF kernel).```pythonimport spyndeximport xarray as xrimport matplotlib.pyplot as pltfrom rasterio import plot# Open a dataset (in this case a xarray.DataArray)snt = spyndex.datasets.open(&quot;sentinel&quot;)# Scale the data (remember that the valid domain for reflectance is [0,1])snt = snt / 10000# Compute the kNDVI and the NDVI for comparisonidx = spyndex.computeIndex(    index = [&quot;NDVI&quot;,&quot;kNDVI&quot;],    params = {        # Parameters required for NDVI        &quot;N&quot;: snt.sel(band = &quot;B08&quot;),        &quot;R&quot;: snt.sel(band = &quot;B04&quot;),        # Parameters required for kNDVI        &quot;kNN&quot; : 1.0,        &quot;kNR&quot; : spyndex.computeKernel(            kernel = &quot;RBF&quot;,            params = {                &quot;a&quot;: snt.sel(band = &quot;B08&quot;),                &quot;b&quot;: snt.sel(band = &quot;B04&quot;),                &quot;sigma&quot;: snt.sel(band = [&quot;B08&quot;,&quot;B04&quot;]).mean(&quot;band&quot;)            }),    })# Plot the indices (and the RGB image for comparison)fig, ax = plt.subplots(1,3,figsize = (15,15))plot.show(snt.sel(band = [&quot;B04&quot;,&quot;B03&quot;,&quot;B02&quot;]).data / 0.3,ax = ax[0],title = &quot;RGB&quot;)plot.show(idx.sel(index = &quot;NDVI&quot;),ax = ax[1],title = &quot;NDVI&quot;)plot.show(idx.sel(index = &quot;kNDVI&quot;),ax = ax[2],title = &quot;kNDVI&quot;)```&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/davemlz/spyndex&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/davemlz/spyndex/main/docs/_static/kNDVI.png&quot; alt=&quot;sentinel kNDVI&quot;&gt;&lt;/a&gt;&lt;/p&gt;### A `pandas.DataFrame`? Sure!No matter what kind of python object you're working with, it can be used with `spyndex` as long as it supports mathematical overloaded operators! ```pythonimport spyndeximport pandas as pdimport seaborn as snsimport matplotlib.pyplot as plt# Open a dataset (in this case a pandas.DataFrame)df = spyndex.datasets.open(&quot;spectral&quot;)# Compute the desired spectral indicesidx = spyndex.computeIndex(    index = [&quot;NDVI&quot;,&quot;NDWI&quot;,&quot;NDBI&quot;],    params = {        &quot;N&quot;: df[&quot;SR_B5&quot;],        &quot;R&quot;: df[&quot;SR_B4&quot;],        &quot;G&quot;: df[&quot;SR_B3&quot;],        &quot;S1&quot;: df[&quot;SR_B6&quot;]    })# Add the land cover column to the resultidx[&quot;Land Cover&quot;] = df[&quot;class&quot;]# Create a color palette for plottingcolors = [&quot;#E33F62&quot;,&quot;#3FDDE3&quot;,&quot;#4CBA4B&quot;]# Plot a pairplot to check the indices behaviourplt.figure(figsize = (15,15))g = sns.PairGrid(idx,hue = &quot;Land Cover&quot;,palette = sns.color_palette(colors))g.map_lower(sns.scatterplot)g.map_upper(sns.kdeplot,fill = True,alpha = .5)g.map_diag(sns.kdeplot,fill = True)g.add_legend()plt.show()```&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/davemlz/spyndex&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/davemlz/spyndex/main/docs/_static/spectral.png&quot; alt=&quot;landsat spectral indices&quot;&gt;&lt;/a&gt;&lt;/p&gt;### Parallel ProcessingParallel processing is possible with `spyndex` and `dask`! You can use `dask.array` or `dask.dataframe` objects to compute spectral indices with spyndex!If you're using `xarray`, you can also define a chunk size and work in parallel!```pythonimport spyndeximport numpy as npimport dask.array as da# Define the array shapearray_shape = (10000,10000)# Define the chunk sizechunk_size = (1000,1000)# Create a dask.array objectdask_array = da.array([    da.random.normal(0.6,0.10,array_shape,chunks = chunk_size),    da.random.normal(0.1,0.05,array_shape,chunks = chunk_size)])# &quot;Compute&quot; the desired spectral indicesidx = spyndex.computeIndex(    index = [&quot;NDVI&quot;,&quot;SAVI&quot;],    params = {        &quot;N&quot;: dask_array[0],        &quot;R&quot;: dask_array[1],        &quot;L&quot;: 0.5    })# Since dask works in lazy mode,# you have to tell it that you want to compute the indices!idx.compute()```### Plotting Spectral IndicesAll posible values of a spectral index can be visualized using `spyndex.plot.heatmap()`! This is a module that doesn't require data,just specify the index, the bands, and BOOM! Heatmap of all the possible values of the index!```pythonimport spyndeximport matplotlib.pyplot as pltimport seaborn as sns# Define subplots gridfig, ax = plt.subplots(1,2,figsize = (20,8))# Plot the NDVI with the Red values on the x-axis and the NIR on the y-axisax[0].set_title(&quot;NDVI heatmap with default parameters&quot;)spyndex.plot.heatmap(&quot;NDVI&quot;,&quot;R&quot;,&quot;N&quot;,ax = ax[0])# Keywords arguments can be passed for sns.heatmap()ax[1].set_title(&quot;NDVI heatmap with seaborn keywords arguments&quot;)spyndex.plot.heatmap(&quot;NDVI&quot;,&quot;R&quot;,&quot;N&quot;,annot = True,cmap = &quot;Spectral&quot;,ax = ax[1])plt.show()```&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://github.com/davemlz/spyndex&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/davemlz/spyndex/main/docs/_static/heatmap2.png&quot; alt=&quot;heatmap&quot;&gt;&lt;/a&gt;&lt;/p&gt;## LicenseThe project is licensed under the MIT license.## ContributingCheck the [contributing page](https://spyndex.readthedocs.io/en/latest/contributing.html).</longdescription>
</pkgmetadata>