<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># notion-api&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.org/project/notion-api&quot;&gt;&lt;img alt=&quot;PYPI&quot; src=&quot;https://img.shields.io/pypi/v/notion-api&quot;&gt;&lt;/a&gt;    &amp;nbsp;    &lt;a href=&quot;https://pypi.org/project/notion-api&quot;&gt;&lt;img alt=&quot;PYPI&quot; src=&quot;https://img.shields.io/pypi/status/notion-api&quot;&gt;&lt;/a&gt;    &amp;nbsp;    &lt;img alt=&quot;pyversions&quot; src=&quot;https://img.shields.io/pypi/pyversions/notion-api&quot;&gt;&lt;/a&gt;    &amp;nbsp;    &lt;img alt=&quot;last commit&quot; src=&quot;https://img.shields.io/github/last-commit/ayvi-0001/notion-api?color=%239146ff&quot;&gt;&lt;/a&gt;    &amp;nbsp;    &lt;a href=&quot;https://developers.notion.com/reference/versioning&quot;&gt;&lt;img alt=&quot;notion versioning&quot; src=&quot;https://img.shields.io/static/v1?label=notion-API-version&amp;message=2022-06-28&amp;color=%232e1a00&quot;&gt;&lt;/a&gt;    &amp;nbsp;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/ayvi-0001/notion-api/blob/main/LICENSE&quot;&gt;&lt;img alt=&quot;license: MIT&quot; src=&quot;https://img.shields.io/github/license/ayvi-0001/notion-api?color=informational&quot;&gt;&lt;/a&gt;    &amp;nbsp;    &lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;    &amp;nbsp;    &lt;a href=&quot;https://pycqa.github.io/isort/&quot;&gt;&lt;img alt=&quot;code style: black&quot; src=&quot;https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336&quot;&gt;&lt;/a&gt;&lt;/p&gt;__Disclaimer: This is an _unofficial_ package and has no affiliation with Notion.so__  A wrapper for Notion's API, aiming to simplify the dynamic nature of interacting with Notion.  README contains examples of the main functionality, including: creating Pages/Databases/Blocks, adding/removing/editing properties, retrieving property values, and database queries.  Some more in-depth walkthroughs can be be found in [`examples/`](https://github.com/ayvi-0001/notion-api/tree/main/examples)    This package is not complete - new features will continue to be added, and current features may change.&lt;br&gt;&lt;div border=&quot;0&quot; align=&quot;center&quot;&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;td align=&quot;center&quot;&gt;&lt;b&gt;Links: Notion API Updates&lt;/b&gt;&lt;/td&gt;        &lt;/tr&gt;            &lt;td&gt; &lt;a href=&quot;https://developers.notion.com/reference/intro&quot;&gt;API Reference&lt;/a&gt;&lt;/td&gt;&lt;tr&gt;        &lt;/td&gt;            &lt;td&gt;&lt;a href=&quot;https://developers.notion.com/page/changelog&quot;&gt;Notion API Changelog &lt;/img&gt;&lt;/a&gt;&lt;/tr&gt;            &lt;td&gt; &lt;a href=&quot;https://www.notion.so/releases&quot;&gt;Notion.so Releases&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;            &lt;td&gt; &lt;a href=&quot;https://developers.notion.com/page/notion-platform-roadmap&quot;&gt;Notion Platform Roadmap&lt;/a&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/div&gt;---## Install```pip install -U notion-api```## Usage```pyimport dotenvimport notion# client will check env variables for 'NOTION_TOKEN'dotenv.load_dotenv()  homepage = notion.Page('773b08ff38b44521b44b115827e850f2')parent_db = notion.Database(homepage.parent_id)# will also look for env var `TZ` to set the timezone for all notion objects. If not found, will default to local timezone.````__getitem__` searchs for page property values when indexing a Page, and for property objects when indexing a Database.```pyhomepage['dependencies']# {#     &quot;id&quot;: &quot;WYYq&quot;,#     &quot;type&quot;: &quot;relation&quot;,#     &quot;relation&quot;: [#         {#             &quot;id&quot;: &quot;7bcbc8e6-e237-434b-bd0d-6b56e044200b&quot;#         }#     ],#     &quot;has_more&quot;: false# }parent_db['dependencies']# {#     &quot;id&quot;: &quot;WYYq&quot;,#     &quot;name&quot;: &quot;dependencies&quot;,#     &quot;type&quot;: &quot;relation&quot;,#     &quot;relation&quot;: {#         &quot;database_id&quot;: &quot;f5984a7e-2257-4ab0-9d0a-23ea12324031&quot;,#         &quot;type&quot;: &quot;dual_property&quot;,#         &quot;dual_property&quot;: {#             &quot;synced_property_name&quot;: &quot;blocked&quot;,#             &quot;synced_property_id&quot;: &quot;wx%7DQ&quot;#         }#     }# }```**_See usage of retrieving values from a page in [examples/retrieving-property-items.md](https://github.com/ayvi-0001/notion-api/blob/main/examples/retrieving-property-items.md)_**  Below is a brief example if we were wanting to get the page id from the above property `dependencies` in `homepage`.```pyfrom notion import propertyitemsrelated_id: list[str] = propertyitems.relation(homepage.dependencies)``````py&gt;&gt;&gt; [&quot;7bcbc8e6-e237-434b-bd0d-6b56e044200b&quot;]```Both Page's and Database's have setters for title/icon/cover.```pyhomepage.title = &quot;new page&quot;homepage.cover = &quot;https://www.notion.so/images/page-cover/webb1.jpg&quot;homepage.icon = &quot;https://www.notion.so/icons/alien-pixel_purple.svg&quot;```&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/ayvi-0001/notion-api/blob/main/examples/images/new_page.png?raw=true&quot;&gt; &lt;/p&gt;&lt;br&gt;## Creating Pages/Databases/BlocksThe current version of the Notion api does not allow pages to be created to the parent `workspace`.  Create objects by passing an existing Page/Database instance as an arg to the `create` classmethods.```pynew_database = notion.Database.create(    parent_instance=testpage,    database_title=&quot;Example Database&quot;,    name_column=&quot;page&quot;, # This is the column containing page names. Defaults to &quot;Name&quot;.    is_inline=True, # can also toggle inline with setters.    description=&quot;Database description can go here.&quot;,)new_page = notion.Page.create(new_database, page_title=&quot;A new database row&quot;)```Blocks are also created using the classmethods of `Block`. They all require a parent instance of either `Page` or `Block` to append the new block too.The newly created block is returned as an instance of `Block`, which can be used as the parent instance to a nested block. ```pyfrom notion import properties as prop# `original_synced_block` refers to the original synced block in the Notion UI.original_synced_block = notion.Block.original_synced_block(homepage)# Adding content to the synced blocknotion.Block.paragraph(original_synced_block, [prop.RichText(&quot;This is a synced block.&quot;)])# Referencing the synced block in a new page.notion.Block.duplicate_synced_block(new_page, original_synced_block.id)```&lt;br&gt;There are few extensions to the `Block` class that have specific functions unique to their block-type.  Below is an example using `CodeBlock`. The others are `TableBlock`, `EquationBlock`, `RichTextBlock`, and `ToDoBlock`. You can see usage for them in [`examples/block_extensions.md`](https://github.com/ayvi-0001/notion-api/blob/main/examples/block_extensions.md).```pycode_block = notion.CodeBlock(&quot;84c5721d8a954667902a757f0033f9e0&quot;)git_graph = r&quot;&quot;&quot;%%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': { 'darkMode':'true', 'git0': '#ff0000', 'git1': '#00ff00', 'git2': '#0000ff', 'git3': '#ff00ff', 'git4': '#00ffff', 'git5': '#ffff00', 'git6': '#ff00ff', 'git7': '#00ffff' } } }%%gitGraph       commit       branch develop       commit tag:&quot;v1.0.0&quot;       commit       checkout main       commit type: HIGHLIGHT       commit       merge develop       commit       branch featureA       commit&quot;&quot;&quot;code_block.language = prop.CodeBlockLang.mermaidcode_block.code = git_graphcode_block.caption = &quot;Example from https://mermaid.js.org/syntax/gitgraph.html&quot;```&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;https://github.com/ayvi-0001/notion-api/blob/main/examples/images/code_commit_diagram.png?raw=true&quot;&gt;&lt;/p&gt;&lt;br&gt;**_Example Function: Using `notion.Workspace()` to retrieve a user, and appending blocks in a page to mention user/date._**```pydef inline_mention(page: notion.Page, message: str, user_name: str) -&gt; None:    mentionblock = notion.Block.paragraph(        page,        [            prop.Mention.user(                notion.Workspace().retrieve_user(user_name=user_name),                annotations=prop.Annotations(                    code=True, bold=True, color=prop.BlockColor.purple                ),            ),            prop.RichText(&quot; - &quot;),            prop.Mention.date(                datetime.now().astimezone(page.tz).isoformat(),                annotations=prop.Annotations(                    code=True,                    bold=True,                    italic=True,                    underline=True,                    color=prop.BlockColor.gray,                ),            ),            prop.RichText(&quot;:&quot;),        ],    )    # First method returned the newly created block that we append to here:    notion.Block.paragraph(mentionblock, [prop.RichText(message)])    notion.Block.divider(page)``````py&gt;&gt;&gt; homepage = notion.Page(&quot;0b9eccfa890e4c3390175ee10c664a35&quot;)&gt;&gt;&gt; inline_mention(page=homepage, message=&quot;example&quot;, user_name=&quot;AYVI&quot;)```&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;https://github.com/ayvi-0001/notion-api/blob/main/examples/images/example_function_reminder.png?raw=true&quot;&gt;&lt;/p&gt;&lt;br&gt;## Add, Set, &amp; Delete: Page property values | Database property objectsThe first argument for all database property methods is the name of the property,  If a property of that name does not exist, then a new property will be created. If a property of that name already exists, but it's a different type than the method used - then the API will overwrite this and change the property object to the new type.  The original parameters will be saved if you decide to switch back (i.e. if you change a formula column to a select column, upon changing it back to a formula column, the original formula expression will still be there).   ```pynew_database.formula_column(&quot;page id&quot;, expression=&quot;id()&quot;)new_database.delete_property(&quot;url&quot;)new_database.multiselect_column(    &quot;new options column&quot;,    options=[        prop.Option(&quot;option-a&quot;, prop.PropertyColor.red),        prop.Option(&quot;option-b&quot;, prop.PropertyColor.green),        prop.Option(&quot;option-c&quot;, prop.PropertyColor.blue),    ],)# if an option does not already exist, a new one will be created with a random color.# this is not true for `status` column types, which can only be edited via UI.new_page.set_multiselect(&quot;options&quot;, [&quot;option-a&quot;, &quot;option-b&quot;])```&lt;br&gt;## Database QueriesA single `notion.query.PropertyFilter` is equivalent to filtering one property type in Notion.To build filters equivalent to Notion's 'advanced filters', use `notion.query.CompoundFilter`.The database method `query()` will return the raw response from the API.  The method `query_pages()` will extract the page ID for each object in the array of results, and return a list of `notion.Page` objects.```pyfrom datetime import datetimefrom datetime import timedeltafrom notion import queryTODAY = datetime.combine(datetime.today(), datetime.min.time())TOMORROW = TODAY + timedelta(1)query_filter = query.CompoundFilter()._and(    query.PropertyFilter.date(&quot;date&quot;, &quot;created_time&quot;, &quot;on_or_after&quot;, TODAY.isoformat()),    query.PropertyFilter.date(&quot;date&quot;, &quot;created_time&quot;, &quot;before&quot;, TOMORROW.isoformat()),    query.CompoundFilter()._or(        query.PropertyFilter.text(&quot;name&quot;, &quot;title&quot;, &quot;contains&quot;, &quot;your page title&quot;),        query.PropertyFilter.text(&quot;name&quot;, &quot;title&quot;, &quot;contains&quot;, &quot;your other page title&quot;),    ),)query_sort = query.SortFilter(    [        query.PropertyValueSort.ascending(&quot;your property name&quot;),        query.EntryTimestampSort.created_time_descending(),    ])query_result = new_database.query(    filter=query_filter,    sort=query_sort,    page_size=5,    filter_property_values=[&quot;name&quot;, &quot;options&quot;],)```&lt;br&gt;## Exceptions &amp; Validating ResponsesErrors in Notion requests return an object with the keys: 'object', 'status', 'code', and 'message'.Exceptions are raised by matching the error code and returning the message. For example:```pyhomepage._patch_properties(payload={'an_incorrect_key':'value'})# Example error object for line above..# {#   'object': 'error', #   'status': 400, #   'code': 'validation_error', #   'message': 'body failed validation: body.an_incorrect_key should be not present, instead was `&quot;value&quot;`.'# }``````shTraceback (most recent call last):File &quot;c:\path\to\file\_.py&quot;, line 6, in &lt;module&gt;    homepage._patch_properties(payload={'an_incorrect_key':'value'})File &quot;c:\...\notion\exceptions\validate.py&quot;, line 48, in validate_response    raise NotionValidationError(message)notion.exceptions.errors.NotionValidationError: body failed validation: body.an_incorrect_key should be not present, instead was `&quot;value&quot;`.Error 400: The request body does not match the schema for the expected parameters.```Possible errors are: - `NotionInvalidJson` - `NotionInvalidRequestUrl` - `NotionInvalidRequest` - `NotionValidationError` - `NotionMissingVersion` - `NotionUnauthorized` - `NotionRestrictedResource` - `NotionObjectNotFound` - `NotionConflictError` - `NotionRateLimited` - `NotionInternalServerError` - `NotionServiceUnavailable` - `NotionDatabaseConnectionUnavailable`A common error to look out for is `NotionObjectNotFound`. This error is often raised because your bot has not been added as a connection to the page. &lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;https://github.com/ayvi-0001/notion-api/blob/main/examples/images/directory_add_connections.png?raw=true&quot;&gt;  &lt;/p&gt;By default, a bot will have access to the children of any Parent object it has access too. Be sure to double check this connection when moving pages.  If you're working on a page that your token has access to via its parent page/database, but you never explicitly granted access to the child page -  and you later move that child page out, then it will lose access.---</longdescription>
</pkgmetadata>