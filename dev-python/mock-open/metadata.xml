<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>mock-open=========[![PyPI version](https://badge.fury.io/py/mock-open.svg)](https://pypi.python.org/pypi/mock-open/)[![Build Status](https://travis-ci.org/nivbend/mock-open.svg?branch=master)](https://travis-ci.org/nivbend/mock-open)[![GitHub license](https://img.shields.io/github/license/nivbend/mock-open.svg)](https://github.com/nivbend/mock-open/blob/master/LICENSE)[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://GitHub.com/nivbend/mock-open/graphs/commit-activity)[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)A better mock for file I/O.Install-------```$ pip install mock-open```class `MockOpen`----------------The `MockOpen` class should work as a stand-in replacement for [`mock.mock_open`][mock-open] withsome added features (though it tries to conform to how the builtin `open` works where the twodiffer): * Multiple file support, including a mapping-like access to file mocks by path:   ```python   from mock_open import MockOpen   mock_open = MockOpen()   mock_open[&quot;/path/to/file&quot;].read_data = &quot;Data from a fake file-like object&quot;   mock_open[&quot;/path/to/bad_file&quot;].side_effect = IOError()   ```   You can also configure behavior via the regular `mock` library API:   ```python   mock_open = MockOpen()   mock_open.return_value.write.side_effect = IOError()   ``` * Persistent file contents between calls to `open`:   ```python   with patch(&quot;builtins.open&quot;, MockOpen()):       with open(&quot;/path/to/file&quot;, &quot;w&quot;) as handle:           handle.write(&quot;Some text&quot;)       with open(&quot;/path/to/file&quot;, &quot;r&quot;) as handle:           assert &quot;Some text&quot; == handle.read()   ``` * All the regular file operations: `read`, `readline`, `readlines`, `write`, `writelines`, `seek`,   `tell`.Acknowledgements----------------This library uses modified versions of tests from the [CPython source code][CPython] as part of itstest suite. The original tests are licensed under the [PSF license agreement][PSF License] and arecopyright of the Python Software Foundation.[mock-open]: http://docs.python.org/library/unittest.mock.html#mock-open[CPython]: https://github.com/python/cpython[PSF License]: https://docs.python.org/license.html#terms-and-conditions-for-accessing-or-otherwise-using-python</longdescription>
</pkgmetadata>