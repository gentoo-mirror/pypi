<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Build|_ |CodeHealth|_ |coverage|_ |pypi|_ |CodeQuality|_.. |Build| image:: https://travis-ci.org/asifpy/django-crudbuilder.svg?branch=master.. _Build: https://travis-ci.org/asifpy/django-crudbuilder.. |CodeHealth| image:: https://landscape.io/github/asifpy/django-crudbuilder/master/landscape.svg?style=flat.. _CodeHealth: https://landscape.io/github/asifpy/django-crudbuilder/master.. |pypi| image:: https://img.shields.io/pypi/v/django-crudbuilder.svg.. _pypi: https://pypi.python.org/pypi/django-crudbuilder.. |CodeQuality| image:: https://scrutinizer-ci.com/g/asifpy/django-crudbuilder/badges/build.png?b=master.. _CodeQuality: https://scrutinizer-ci.com/g/asifpy/django-crudbuilder/?branch=master.. |coverage| image:: https://coveralls.io/repos/github/asifpy/django-crudbuilder/badge.svg?branch=master.. _coverage: https://coveralls.io/github/asifpy/django-crudbuilder?branch=master ==================django-crudbuilder==================Generic CRUD implementation in Django which uses django tables2 to list objects.Documentation-------------https://django-crudbuilder.readthedocs.org/en/latest/index.htmlFeatures:---------- Generates class based views for CRUD- Uses django-tables2 to display objects in ListView- Define multiple crud builders for same model with separate URL- Allows custom forms/tables as additional arguments- Context provides additional template variables APP_LABEL and MODEL for all CRUD templates- Enable/disable login required option for CRUD views- Enable/disable permission required option for CRUD views- All the generated views/tables/forms/url are extendable.- post_create and post_update signals to handle specific actions in Create and Update views- Add your own custom templates for List/Create/Detail/Update/Delete views- Separate CREATE and UPDATE forms- Define your own custom queryset for list view- Inline Formset support for parent child models- Default Bootstrap3 CSS- All the generated views are extendable.Prerequisites-------------- Django 1.10+- Python 2.7+, 3.3+- Django Tables2 &lt; 2.0Installation------------.. code-block:: python    pip install django-crudbuilderUsage-----**Add &quot;crudbuilder&quot; to INSTALLED_APPS**.. code-block:: pythonINSTALLED_APPS = {...'django_tables2','crudbuilder'}LOGIN_REQUIRED_FOR_CRUD = True/FalsePERMISSION_REQUIRED_FOR_CRUD = True/FalsePROJECT_NAME = 'YOUR PROJECT NAME'**Create models in yourapp/models.py**.. code-block:: pythonclass Person(models.Model):&quot;&quot;&quot; an actual singular human being &quot;&quot;&quot;name = models.CharField(blank=True, max_length=100)email = models.EmailField()created_at = models.DateTimeField(auto_now=True)created_by = models.ForeignKey(User, blank=True, null=True)def __unicode__(self):return self.name**Create CRUD for Person model in yourapp/crud.py**.. code-block:: pythonfrom crudbuilder.abstract import BaseCrudBuilder  from yourapp.models import Person  class PersonCrud(BaseCrudBuilder):  model = Person  search_fields = ['name']  tables2_fields = ('name', 'email')  tables2_css_class = &quot;table table-bordered table-condensed&quot;  tables2_pagination = 20  # default is 10  modelform_excludes = ['created_by', 'updated_by']  login_required=True  permission_required=True  # permissions = {  #   'list': 'example.person_list',  #'create': 'example.person_create'  # }**Open yourapp/urls.py and add the following**.. code-block:: pythonfrom crudbuilder import urlsurlpatterns = [url(r'^admin/', include(admin.site.urls)),url(r'^crud/',  include(urls)),]**View All your registered CRUDS**.. code-block:: pythonhttp://127.0.0.1:8000/crud/**Now you can access the below CRUD URLS**.. code-block:: python- http://127.0.0.1:8000/crud/yourappname/yourmodelname- http://127.0.0.1:8000/crud/yourappname/yourmodelname/create/- http://127.0.0.1:8000/crud/yourappname/yourmodelname/&lt;pk&gt;/detail/- http://127.0.0.1:8000/crud/yourappname/yourmodelname/&lt;pk&gt;/update/- http://127.0.0.1:8000/crud/yourappname/yourmodelname/&lt;pk&gt;/delete/LOGIN REQUIRED--------------To enable global login required for all the models CRUD views, add the following to settings file.. code-block:: pythonLOGIN_REQUIRED_FOR_CRUD = TrueIf you want to enable login required only for specific model crud, then you need to add following to crud class.. code-block:: python# myapp/crud.pylogin_required = TruePERMISSION REQUIRED-------------------To enable global permission required for all the models CRUD views, add the following to settings file.. code-block:: pythonPERMISSION_REQUIRED_FOR_CRUD = TrueIf you want to enable permission required only for specific model crud, then you need to add following to crud class.. code-block:: python# myapp/crud.pypermission_required = TrueBy enabling either of above flag, crudbuilder by default checks for following permissions:.. code-block:: python- For ListView   : &lt;your app_name&gt;.&lt;your model&gt;_list- For CreateView : &lt;your app_name&gt;.&lt;your model&gt;_create- For DetailView : &lt;your app_name&gt;.&lt;your model&gt;_detail- For UpdateView : &lt;your app_name&gt;.&lt;your model&gt;_update- For DeleteView : &lt;your app_name&gt;.&lt;your model&gt;_deleteIf you want to add your own permissions, then define your own permission required dictionary explicitly in CRUD class... code-block:: pythonpermissions = {'list'  : 'example.permission1','create': 'example.permission2''detail': 'example.permission3','update': 'example.permission4','delete': 'example.permission5',}EXTRA TEMPLATE VARIABLES------------------------Added mixin which allows access to additional template variables like app lable and model name in every template... code-block:: pythonAPP : {{app_label}}MODEL : {{actual_model_name}}PLURIZED MODEL : {{pluralized_model_name}}</longdescription>
</pkgmetadata>