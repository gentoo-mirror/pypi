<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Nicer error messages for PythonOther languages such as C++ have gotten quite useful error messages anddiagnostics with tips on how the fix the problems but Python is still stuckwith the bare stacktraces that are very intimidating and often not very helpful.![TraceRite](https://raw.githubusercontent.com/sanic-org/tracerite/master/docs/with-tracerite.webp)**TraceRite backtrace shows where the user has terminated the program.**TraceRite hides the irrelevant IPython/notebook internals and concisely showswhat happened (the program was interrupted) and where that happened. This couldfurther be improved by converting the KeyboardInterrupt message into somethingmore suitable, like &quot;You stopped the program&quot;, but what you see above is justthe default handling that never considered this particular error.Although IPython and Google Colab developers have done their tweaks to improvebacktraces, it is all too apparent that much remains to be done:![Colab](https://raw.githubusercontent.com/sanic-org/tracerite/master/docs/without-tracerite.webp)**Standard backtrace from Google Colab.**Even for the experienced programmer, it is tedious to read through the wall oftext to find the relevant details of what went wrong.In more complex situations where one might get many screenfuls of standardtraceback, TraceRite produces scrollable outputs that concentrate on the relevantdetails but also provide variable inspectors on each frame where it may berelevant:![Nested exceptions](https://raw.githubusercontent.com/sanic-org/tracerite/master/docs/nested.webp)**TraceRite output with nested exceptions.**## UsageAt the beginning of your Notebook:```ipython%pip install tracerite%load_ext tracerite```## BackgroundThis project is a proof of concept, showing a modern way to format errormessages in a human-readable manner. Heuristics are used to hide (by default)irrelevant stack frames and show the actual location of the problem. Since itwould otherwise be impossible to find out the variable contents after the programhas crashed, a variable inspector built into each stack frame quickly revealsproblems with the variables mentioned at the source of error. Care is taken toadd revelant details such as notebook input field numbers and class names notnormally present in Python tracebacks, while hiding overly long paths and otherclutter.All output is in HTML and as such only works in Jupyter notebooks and otherbrowser-based systems (this should be useful for web development frameworks aswell). This allows interactivity and much better layout than that of the textconsole.## LicensePublic Domain or equivalent.## Help wantedI won't be able to maintain this all by myself. If you like the idea of nicertracebacks, please offer your help in development! Pull requests are welcomebut it would be even better if you could pick up the whole project as your own.As of now, this project is in no way properly polished for release. Yet, it isuseful enough to such a degree that I always use it in my notebooks, and itreally makes Python development a much smoother experience.</longdescription>
</pkgmetadata>