<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--SPDX-FileCopyrightText: 2021 Magenta ApS &lt;https://magenta.dk&gt;SPDX-License-Identifier: MPL-2.0--&gt;# FastRAMQPIFastRAMQPI is an opinionated library for FastAPI and RAMQP.It is implemented as a thin wrapper around `FastAPI` and `RAMQP`.It is very MO specific.## Usage```pythonfrom pydantic import BaseSettingsfrom fastramqpi import FastRAMQPIfrom fastramqpi import FastRAMQPISettingsclass Settings(BaseSettings):    class Config:        frozen = True        env_nested_delimiter = &quot;__&quot;    fastramqpi: FastRAMQPISettings = Field(        default_factory=FastRAMQPISettings,        description=&quot;FastRAMQPI settings&quot;    )    # All your program settings hereunder...fastapi_router = APIRouter()@fastapi_router.post(&quot;/trigger/all&quot;)async def update_all(request: Request) -&gt; dict[str, str]:    context: dict[str, Any] = request.state.context    graphql_session = context[&quot;grapqh_session&quot;]    program_settings = context[&quot;user_context&quot;][&quot;settings&quot;]    ...    return {&quot;status&quot;: &quot;OK&quot;}amqp_router = MORouter()@amqp_router.register(&quot;*.*.*&quot;)async def listen_to_all(context: dict, payload: PayloadType) -&gt; None:    graphql_session = context[&quot;grapqh_session&quot;]    program_settings = context[&quot;user_context&quot;][&quot;settings&quot;]    ...def create_fastramqpi(**kwargs: Any) -&gt; FastRAMQPI:    settings = Settings(**kwargs)    fastramqpi = FastRAMQPI(        application_name=&quot;orggatekeeper&quot;, settings=settings.fastramqpi    )    fastramqpi.add_context(settings=settings)    # Add our AMQP router(s)    amqpsystem = fastramqpi.get_amqpsystem()    amqpsystem.router.registry.update(amqp_router.registry)    # Add our FastAPI router(s)    app = fastramqpi.get_app()    app.include_router(fastapi_router)    return fastramqpidef create_app(**kwargs: Any) -&gt; FastAPI:    fastramqpi = create_fastramqpi(**kwargs)    return fastramqpi.get_app()```### MetricsFastRAMQPI Metrics are exported via `prometheus/client_python` on the FastAPI's `/metrics`.## Autogenerated GraphQL ClientFastRAMQPI exposes an[authenticated httpx client](https://docs.authlib.org/en/latest/client/api.html#authlib.integrations.httpx_client.AsyncOAuth2Client)through the dependency injection system. While it is possible to call the OS2moAPI directly through it, the recommended approach is to define a properly-typedGraphQL client in the integration and configure it to make calls through theauthenticated client. Instead of manually implementing such client, we stronglyrecommend to use the[**Ariadne Code Generator**](https://github.com/mirumee/ariadne-codegen), whichgenerates an integration-specific client based on the general OS2mo GraphQLschema and the exact queries and mutations the integration requires.To integrate such client, first add and configure the codegen:```toml# pyproject.toml[tool.poetry.dependencies]ariadne-codegen = {extras = [&quot;subscriptions&quot;], version = &quot;^0.7.1&quot;}[tool.ariadne-codegen]# Ideally, the GraphQL client is generated as part of the build process and# never committed to git. Unfortunately, most of our tools and CI analyses the# project directly as it is in Git. In the future - when the CI templates# operate on the built container image - only the definition of the schema and# queries should be checked in.## The default package name is `graphql_client`. Make it more obvious that the# files are not to be modified manually.target_package_name = &quot;autogenerated_graphql_client&quot;target_package_path = &quot;my_integration/&quot;client_name = &quot;GraphQLClient&quot;schema_path = &quot;schema.graphql&quot;  # curl -O http://localhost:5000/graphql/v8/schema.graphqlqueries_path = &quot;queries.graphql&quot;plugins = [    # Return values directly when only a single top field is requested    &quot;ariadne_codegen.contrib.shorter_results.ShorterResultsPlugin&quot;,][tool.ariadne-codegen.scalars.DateTime]type = &quot;datetime.datetime&quot;[tool.ariadne-codegen.scalars.UUID]type = &quot;uuid.UUID&quot;```Where you replace `&quot;my_integration/&quot;` with the path to your integration.Grab OS2mo's GraphQL schema:```bashcurl -O http://localhost:5000/graphql/v8/schema.graphql```Define your queries:```gql# queries.graphql# SPDX-FileCopyrightText: Magenta ApS &lt;https://magenta.dk&gt;# SPDX-License-Identifier: MPL-2.0query Version {  version {    mo_version    mo_hash  }}```Generate the client - you may have to activate some virtual environment:```bashariadne-codegen```The client class is passed to FastRAMQPI on startup. This will ensure it isautomatically opened and closed and configured with authentication:```python# app.pyfrom autogenerated_graphql_client import GraphQLClientdef create_app(**kwargs: Any) -&gt; FastAPI:    fastramqpi = FastRAMQPI(..., graphql_client_cls=GraphQLClient)    ...```The FastRAMQPI framework cannot define the annotated type for the GraphQL clientsince its methods depend on the specific queries required by the integration.Therefore, each implementing integration needs to define their own:```python# depends.pyfrom typing import Annotatedfrom fastapi import Dependsfrom ramqp.depends import from_contextfrom my_integration.autogenerated_graphql_client import GraphQLClient as _GraphQLClientGraphQLClient = Annotated[_GraphQLClient, Depends(from_context(&quot;graphql_client&quot;))]```Finally, we can define our AMQP handler to use the GraphQL client:```python# events.pyfrom . import depends@router.register(&quot;*&quot;)async def handler(mo: depends.GraphQLClient) -&gt; None:    version = await mo.version()    print(version)```To get REUSE working, you might consider adding the following to `.reuse/dep5`:```textFiles: my_integration/autogenerated_graphql_client/*Copyright: Magenta ApS &lt;https://magenta.dk&gt;License: MPL-2.0```## Development### Prerequisites- [Poetry](https://github.com/python-poetry/poetry)### Getting Started1. Clone the repository:```git clone git@git.magenta.dk:rammearkitektur/FastRAMQPI.git```2. Install all dependencies:```poetry install```3. Set up pre-commit:```poetry run pre-commit install```### Running the testsYou use `poetry` and `pytest` to run the tests:`poetry run pytest`You can also run specific files`poetry run pytest tests/&lt;test_folder&gt;/&lt;test_file.py&gt;`and even use filtering with `-k``poetry run pytest -k &quot;Manager&quot;`You can use the flags `-vx` where `v` prints the test &amp; `x` makes the test stop if any tests fails (Verbose, X-fail)## AuthorsMagenta ApS &lt;https://magenta.dk&gt;## LicenseThis project uses: [MPL-2.0](LICENSES/MPL-2.0.txt)This project uses [REUSE](https://reuse.software) for licensing.All licenses can be found in the [LICENSES folder](LICENSES/) of the project.</longdescription>
</pkgmetadata>