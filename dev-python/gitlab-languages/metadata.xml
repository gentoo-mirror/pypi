<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gitlab-languages[![PyPI - License](https://img.shields.io/pypi/l/gitlab-languages.svg)](https://github.com/max-wittig/gitlab-languages/blob/master/LICENSE)Utility to generate a Prometheus data source text file for your GitLab instanceusing the [GitLab Language API](https://docs.gitlab.com/ee/api/projects.html#languages)## installation from PyPI1. Install from PyPI as CLI   ```bash   pip install -U gitlab-languages   ```1. Run the program   ```bash   gitlab-languages --cache cache.json --args owned=True # more info about usage: see below   ```## installation from source1. Install python dependencies    ```bash    poetry install    ```1. Set the required environment variables    ```bash    export GITLAB_TOKEN=&lt;SOME_TOKEN_WITH_API_SCOPE&gt;    export GITLAB_URL=https://gitlab.com # optional, defaults to https://gitlab.com    # optional:    export WORKER_COUNT=24    ```1. Run the tool    ```bash    gitlab-languages    ```## usage```plainusage: gitlab_languages [-h] [--project_limit PROJECT_LIMIT]                        [--args ARGS [ARGS ...]]                        [--groups GROUPS [GROUPS ...]]                        [--ignore_groups IGNORE_GROUPS [IGNORE_GROUPS ...]]                        [--cache CACHE] [-o OUTPUT]optional arguments:  -h, --help            show this help message and exit  --project_limit PROJECT_LIMIT                        Set project limit to scan  --args ARGS [ARGS ...]                        Provide custom args to the GitLab API  --groups GROUPS [GROUPS ...]                        Scan only certain groups  --ignore_groups IGNORE_GROUPS [IGNORE_GROUPS ...]                        Ignore certain groups and their projects  --cache CACHE         Cache file to use  -o OUTPUT, --output OUTPUT                        Location of the metrics file output```### additional argumentsYou can specify additional arguments, that will be directly supplied to the[python-gitlab library](https://github.com/python-gitlab/python-gitlab) or to the GitLab API endpoint.Example:```bashgitlab-languages --args owned=True```More info about the available additional args can be found here:* http://python-gitlab.readthedocs.io/en/stable/* https://docs.gitlab.com/ee/api/### example outputThe output will look something like this:```plainmetrics.txt# HELP languages_percent Languages scanned in percent# TYPE languages_percent gaugelanguages_percent{language=&quot;Java&quot;} 11.73languages_percent{language=&quot;CSS&quot;} 1.97languages_percent{language=&quot;TypeScript&quot;} 3.5languages_percent{language=&quot;HTML&quot;} 6.14languages_percent{language=&quot;JavaScript&quot;} 17.16languages_percent{language=&quot;Python&quot;} 10.4languages_percent{language=&quot;Modelica&quot;} 3.7languages_percent{language=&quot;TeX&quot;} 1.64languages_percent{language=&quot;Shell&quot;} 6.35languages_percent{language=&quot;Batchfile&quot;} 0.76languages_percent{language=&quot;HCL&quot;} 7.15languages_percent{language=&quot;BitBake&quot;} 0.56languages_percent{language=&quot;C&quot;} 5.25languages_percent{language=&quot;C++&quot;} 0.72languages_percent{language=&quot;Matlab&quot;} 2.77languages_percent{language=&quot;TXL&quot;} 0.05languages_percent{language=&quot;Objective-C&quot;} 1.48languages_percent{language=&quot;XSLT&quot;} 1.68languages_percent{language=&quot;Perl&quot;} 1.71languages_percent{language=&quot;Ruby&quot;} 0.03languages_percent{language=&quot;C#&quot;} 10.3languages_percent{language=&quot;PowerShell&quot;} 0.11languages_percent{language=&quot;Pascal&quot;} 0.01languages_percent{language=&quot;ASP&quot;} 0.0languages_percent{language=&quot;PLpgSQL&quot;} 0.0languages_percent{language=&quot;Makefile&quot;} 2.06languages_percent{language=&quot;SQLPL&quot;} 0.0languages_percent{language=&quot;Puppet&quot;} 0.0languages_percent{language=&quot;Groovy&quot;} 2.56languages_percent{language=&quot;M4&quot;} 0.01languages_percent{language=&quot;Roff&quot;} 0.15languages_percent{language=&quot;CMake&quot;} 0.01languages_percent{language=&quot;NSIS&quot;} 0.01languages_percent{language=&quot;PHP&quot;} 0.0languages_percent{language=&quot;Go&quot;} 0.0languages_percent{language=&quot;Smalltalk&quot;} 0.02languages_percent{language=&quot;Visual Basic&quot;} 0.0languages_percent{language=&quot;Smarty&quot;} 0.0# HELP languages_scanned_total Total languages scanned# TYPE languages_scanned_total gaugelanguages_scanned_total 38.0# HELP projects_scanned_total Total projects scanned# TYPE projects_scanned_total gaugeprojects_scanned_total 61.0# HELP projects_skipped_total Total projects skipped# TYPE projects_skipped_total gaugeprojects_skipped_total 0.0# HELP projects_no_language_total Projects without language detected# TYPE projects_no_language_total gaugeprojects_no_language_total 39.0# HELP groups_scanned_total Total groups scanned# TYPE groups_scanned_total gaugegroups_scanned_total 0.0```Run the script via GitLab CI with schedules and export the metrics.txt file as GitLab pages.Then you can add it to your Prometheus instance as scrape source.</longdescription>
</pkgmetadata>