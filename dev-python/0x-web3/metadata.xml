<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Web3.py0x-web3 is a temporary fork of web3. It adds primitive support for ABI tuples, which is needed in order to facilitate calling the 0x smart contracts. The fork’s changes to web3.py are visible in an open PR, and when that PR (or something analogous) is merged, this package will be taken down.[![Join the chat at https://gitter.im/ethereum/web3.py](https://badges.gitter.im/ethereum/web3.py.svg)](https://gitter.im/ethereum/web3.py?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)[![Build Status](https://circleci.com/gh/ethereum/web3.py.svg?style=shield)](https://circleci.com/gh/ethereum/web3.py.svg?style=shield)A Python implementation of [web3.js](https://github.com/ethereum/web3.js)* Python 3.5+ supportRead more in the [documentation on ReadTheDocs](http://web3py.readthedocs.io/). [View the change log on Github](docs/releases.rst).## Quickstart```pythonimport jsonimport web3from web3 import Web3, HTTPProvider, TestRPCProviderfrom solc import compile_sourcefrom web3.contract import ConciseContract# Solidity source codecontract_source_code = '''pragma solidity ^0.4.0;contract Greeter {    string public greeting;    function Greeter() {        greeting = 'Hello';    }    function setGreeting(string _greeting) public {        greeting = _greeting;    }    function greet() constant returns (string) {        return greeting;    }}'''compiled_sol = compile_source(contract_source_code) # Compiled source codecontract_interface = compiled_sol['&lt;stdin&gt;:Greeter']# web3.py instancew3 = Web3(TestRPCProvider())# Instantiate and deploy contractcontract = w3.eth.contract(abi=contract_interface['abi'], bytecode=contract_interface['bin'])# Get transaction hash from deployed contracttx_hash = contract.deploy(transaction={'from': w3.eth.accounts[0], 'gas': 410000})# Get tx receipt to get contract addresstx_receipt = w3.eth.getTransactionReceipt(tx_hash)contract_address = tx_receipt['contractAddress']# Contract instance in concise modeabi = contract_interface['abi']contract_instance = w3.eth.contract(address=contract_address, abi=abi,ContractFactoryClass=ConciseContract)# Getters + Setters for web3.eth.contract objectprint('Contract value: {}'.format(contract_instance.greet()))contract_instance.setGreeting('Nihao', transact={'from': w3.eth.accounts[0]})print('Setting value to: Nihao')print('Contract value: {}'.format(contract_instance.greet()))```## Developer Setup```shgit clone git@github.com:ethereum/web3.py.gitcd web3.py```Please see OS-specific instructions for:- [Linux](docs/README-linux.md#Developer-Setup)- [Mac](docs/README-osx.md#Developer-Setup)- [Windows](docs/README-windows.md#Developer-Setup)- [FreeBSD](docs/README-freebsd.md#Developer-Setup)Then run these install commands:```shvirtualenv venv. venv/bin/activatepip install -e .[dev]```For different environments, you can set up multiple `virtualenv`. For example, if you want to create a `venvdocs`, then you do the following:```shvirtualenv venvdocs. venvdocs/bin/activatepip install -e .[docs]pip install -e .```## Using DockerIf you would like to develop and test inside a Docker environment, use the *sandbox* container provided in the **docker-compose.yml** file.To start up the test environment, run:```docker-compose up -d```This will build a Docker container set up with an environment to run the Python test code.  **Note: This container does not have `go-ethereum` installed, so you cannot run the go-ethereum test suite.**To run the Python tests from your local machine:```docker-compose exec sandbox bash -c 'pytest -n 4 -f -k &quot;not goethereum&quot;'```You can run arbitrary commands inside the Docker container by using the `bash -c` prefix.```docker-compose exec sandbox bash -c ''```Or, if you would like to just open a session to the container, run:```docker-compose exec sandbox bash```### Testing SetupDuring development, you might like to have tests run on every file save.Show flake8 errors on file change:```sh# Test flake8when-changed -v -s -r -1 web3/ tests/ ens/ -c &quot;clear; flake8 web3 tests ens &amp;&amp; echo 'flake8 success' || echo 'error'&quot;```You can use `pytest-watch`, running one for every Python environment:```shpip install pytest-watchcd venvptw --onfail &quot;notify-send -t 5000 'Test failure ⚠⚠⚠⚠⚠' 'python 3 test on web3.py failed'&quot; ../tests ../web3```Or, you can run multi-process tests in one command, but without color:```sh# in the project root:pytest --numprocesses=4 --looponfail --maxfail=1# the same thing, succinctly:pytest -n 4 -f --maxfail=1```#### How to Execute the Tests?1. [Setup your development environment](https://github.com/ethereum/web3.py/#developer-setup).2. Execute `tox` for the testsThere are multiple [components](https://github.com/ethereum/web3.py/blob/master/.travis.yml#L53) of the tests. You can run test to against specific component. For example:```sh# Run Tests for the Core component (for Python 3.5):tox -e py35-core# Run Tests for the Core component (for Python 3.6):tox -e py36-core```If for some reason it is not working, add `--recreate` params.`tox` is good for testing against the full set of build targets. But if you want to run the tests individually, `py.test` is better for development workflow. For example, to run only the tests in one file:```shpy.test tests/core/gas-strategies/test_time_based_gas_price_strategy.py```### Release setupFor Debian-like systems:```apt install pandoc```To release a new version:```shmake release bump=$$VERSION_PART_TO_BUMP$$```#### How to bumpversionThe version format for this repo is `{major}.{minor}.{patch}` for stable, and`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).To issue the next version in line, specify which part to bump,like `make release bump=minor` or `make release bump=devnum`.If you are in a beta version, `make release bump=stage` will switch to a stable.To issue an unstable version when the current version is stable, specify thenew version explicitly, like `make release bump=&quot;--new-version 4.0.0-alpha.1 devnum&quot;`</longdescription>
</pkgmetadata>