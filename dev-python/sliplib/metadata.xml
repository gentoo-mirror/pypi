<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://readthedocs.org/projects/sliplib/badge/?version=latest   :target: http://sliplib.readthedocs.org/en/master/?badge=master   :alt: ReadTheDocs Documentation Status.. image:: https://travis-ci.org/rhjdjong/SlipLib.svg   :target: https://travis-ci.org/rhjdjong/SlipLib   :alt: Travis Test Status.. image:: https://ci.appveyor.com/api/projects/status/d1nwwn34xoaxh3tt/branch/master?svg=true   :target: https://ci.appveyor.com/project/RuuddeJong/sliplib/branch/master   :alt: AppVeyor Test Status==============================================``sliplib`` --- A module for the SLIP protocol==============================================The `sliplib` module implements the encoding and decodingfunctionality for SLIP packets, as described in :rfc:`1055`.It defines encoding, decoding, and validation functions,as well as a  driver class that can be used to implementa SLIP protocol stack, and higher-level classes thatapply the SLIP protocol to TCP connections or IO streams.Read the `documentation &lt;http://sliplib.readthedocs.org/en/master/&gt;`_for detailed information.Background==========The SLIP protocol is described in :rfc:`1055` (:title:`A Nonstandard forTransmission of IP Datagrams over Serial Lines: SLIP`, J. Romkey,June 1988).  The original purpose of the protocol isto provide a mechanism to indicate the boundaries of IP packets,in particular when the IP packets are sent over a connection thatdoes not provide a framing mechanism, such as serial lines ordial-up connections.There is, however, nothing specific to IP in the SLIP protocol.SLIP offers a generic framing method that can be used for anytype of data that must be transmitted over a (continuous) byte stream.In fact, the main reason for creating this modulewas the need to communicate with a third-party application thatused SLIP over TCP (which is a continuous byte stream)to frame variable length data structures.Usage=====Installation------------To install the `sliplib` module, use.. code::    pip install sliplibLow-level usage---------------The recommended basic usage is to run all encoding and decoding operationsthrough an instantiation `driver` of the `Driver` class, in combinationwith the appropriate I/O code.The `Driver` class itself works without any I/O, and can therefore be used withany networking code, or any bytestream like pipes, serial I/O, etc.It can work in synchronous as well as in asynchronous environments.The `Driver` class offers the methods`send` and `receive` to handlethe conversion between messages and SLIP-encoded packets.High-level usage----------------The module also provides a `SlipWrapper` abstract baseclassthat provides the methods `send_msg` and `recv_msg` to sendand receive single SLIP-encoded messages. This base classwraps an instance of the `Driver` class with a user-provided stream.Two concrete subclasses of `SlipWrapper` are provided:* `SlipStream` allows the wrapping of a byte IO stream.* `SlipSocket` allows the wrapping of a TCP socket.In addition, the module also provides a `SlipRequestHandler`to facilitate the creation of TCP servers that can handleSLIP-encoded messages.Error Handling==============Contrary to the reference implementation described in :rfc:`1055`,which chooses to essentially ignore protocol errors,the functions and classes in the `sliplib` moduleuse a `ProtocolError` exceptionto indicate protocol errors, i.e. SLIP packets with invalid byte sequences.The `Driver` class raises the `ProtocolError` exceptionas soon as a complete SLIP packet with an invalid byte sequence is received .The `SlipWrapper` class and its subclasses catch the `ProtocolError`\sraised by the `Driver` class, and re-raise them whenan attempt is made to read the contents of a SLIP packet that containedinvalid data.</longdescription>
</pkgmetadata>