<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.com/hjweide/pyastar2d.svg?branch=master)](https://travis-ci.com/hjweide/pyastar2d)[![Coverage Status](https://coveralls.io/repos/github/hjweide/pyastar2d/badge.svg?branch=master)](https://coveralls.io/github/hjweide/pyastar2d?branch=master)[![PyPI version](https://badge.fury.io/py/pyastar2d.svg)](https://badge.fury.io/py/pyastar2d)# PyAstar2DThis is a very simple C++ implementation of the A\* algorithm for pathfindingon a two-dimensional grid.  The solver itself is implemented in C++, but iscallable from Python.  This combines the speed of C++ with the convenience ofPython.I have not done any formal benchmarking, but the solver finds the solution to a1802 by 1802 maze in 0.29s and a 4008 by 4008 maze in 0.83s when running on mynine-year-old Intel(R) Core(TM) i7-2630QM CPU @ 2.00GHz.  See [ExampleResults](#example-results) for more details.See `src/cpp/astar.cpp` for the core C++ implementation of the A\* shortestpath search algorithm, `src/pyastar2d/astar_wrapper.py` for the Python wrapperand `examples/example.py` for example usage.When determining legal moves, 4-connectivity is the default, but it is possibleto set `allow_diagonal=True` for 8-connectivity.## InstallationInstructions for installing `pyastar2d` are given below.### From PyPIThe easiest way to install `pyastar2d` is directly from the Python package index:```pip install pyastar2d```### From sourceYou can also install `pyastar2d` by cloning this repository and building ityourself.  If running on Linux or MacOS, simply run```bashpip install .````from the root directory.  If you are using Windows you may have to install Cython manually first:```bashpip install Cythonpip install .```To check that everything worked, run the example:```bashpython examples/example.py```### As a dependencyInclude `pyastar2d` in your `requirements.txt` to install from `pypi`, or addthis line to `requirements.txt`:```pyastar2d @ git+git://github.com/hjweide/pyastar2d.git@master#egg=pyastar2d```## UsageA simple example is given below:```pythonimport numpy as npimport pyastar2d# The minimum cost must be 1 for the heuristic to be valid.# The weights array must have np.float32 dtype to be compatible with the C++ code.weights = np.array([[1, 3, 3, 3, 3],                    [2, 1, 3, 3, 3],                    [2, 2, 1, 3, 3],                    [2, 2, 2, 1, 3],                    [2, 2, 2, 2, 1]], dtype=np.float32)# The start and goal coordinates are in matrix coordinates (i, j).path = pyastar2d.astar_path(weights, (0, 0), (4, 4), allow_diagonal=True)print(path)# The path is returned as a numpy array of (i, j) coordinates.array([[0, 0],       [1, 1],       [2, 2],       [3, 3],       [4, 4]])```Note that all grid points are represented as `(i, j)` coordinates.  An exampleof using `pyastar2d` to solve a maze is given in `examples/maze_solver.py`.## Example Results&lt;a name=&quot;example-results&quot;&gt;&lt;/a&gt;To test the implementation, I grabbed two nasty mazes from Wikipedia.  They areincluded in the ```mazes``` directory, but are originally from here:[Small](https://upload.wikimedia.org/wikipedia/commons/c/cf/MAZE.png) and[Large](https://upload.wikimedia.org/wikipedia/commons/3/32/MAZE_2000x2000_DFS.png).I load the ```.png``` files as grayscale images, and set the white pixels to 1(open space) and the black pixels to `INF` (walls).To run the examples specify the input and output files using the `--input` and`--output` flags.  For example, the following commands will solve the small andlarge mazes:```python examples/maze_solver.py --input mazes/maze_small.png --output solns/maze_small.pngpython examples/maze_solver.py --input mazes/maze_large.png --output solns/maze_large.png```### Small Maze (1802 x 1802): ```bashtime python examples/maze_solver.py --input mazes/maze_small.png --output solns/maze_small.pngLoaded maze of shape (1802, 1802) from mazes/maze_small.pngFound path of length 10032 in 0.292794sPlotting path to solns/maze_small.pngDonereal0m1.214suser0m1.526ssys0m0.606s```The solution found for the small maze is shown below:&lt;img src=&quot;https://github.com/hjweide/pyastar2d/raw/master/solns/maze_small_soln.png&quot; alt=&quot;Maze Small Solution&quot; style=&quot;width: 100%&quot;/&gt;### Large Maze (4002 x 4002): ```bashtime python examples/maze_solver.py --input mazes/maze_large.png --output solns/maze_large.pngLoaded maze of shape (4002, 4002) from mazes/maze_large.pngFound path of length 783737 in 0.829181sPlotting path to solns/maze_large.pngDonereal0m29.385suser0m29.563ssys0m0.728s```The solution found for the large maze is shown below:&lt;img src=&quot;https://github.com/hjweide/pyastar2d/raw/master/solns/maze_large_soln.png&quot; alt=&quot;Maze Large Solution&quot; style=&quot;width: 100%&quot;/&gt;## MotivationI recently needed an implementation of the A* algorithm in Python to find theshortest path between two points in a cost matrix representing an image.Normally I would simply use [networkx](https://networkx.github.io/), but forgraphs with millions of nodes the overhead incurred to construct the graph canbe expensive.  Considering that I was only interested in graphs that may berepresented as two-dimensional grids, I decided to implement it myself usingthis special structure of the graph to make various optimizations.Specifically, the graph is represented as a one-dimensional array because thereis no need to store the neighbors.  Additionally, the lookup tables forpreviously-explored nodes (their costs and paths) are also stored asone-dimensional arrays.  The implication of this is that checking the lookuptable can be done in O(1), at the cost of using O(n) memory.  Alternatively, wecould store only the nodes we traverse in a hash table to reduce the memoryusage.  Empirically I found that replacing the one-dimensional array with ahash table (`std::unordered_map`) was about five times slower.## TestsThe default installation does not include the dependencies necessary to run thetests.  To install these, first run```bashpip install -r requirements-dev.txt```before running```bashpy.test```The tests are fairly basic but cover some of themore common pitfalls.  Pull requests for more extensive tests are welcome.## References1. [A\* search algorithm on Wikipedia](https://en.wikipedia.org/wiki/A*_search_algorithm#Pseudocode)2. [Pathfinding with A* on Red Blob Games](http://www.redblobgames.com/pathfinding/a-star/introduction.html)</longdescription>
</pkgmetadata>