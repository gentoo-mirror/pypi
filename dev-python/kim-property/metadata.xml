<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># KIM-PROPERTY utility module[![Python package](https://github.com/openkim/kim-property/workflows/Python%20package/badge.svg)](https://github.com/openkim/kim-property/actions)[![Windows Build status](https://ci.appveyor.com/api/projects/status/5860x3twnmpwwmsa?svg=true)](https://ci.appveyor.com/project/yafshar/kim-property)[![codecov](https://codecov.io/gh/openkim/kim-property/branch/master/graph/badge.svg)](https://codecov.io/gh/openkim/kim-property)[![Anaconda-Server Badge](https://img.shields.io/conda/vn/conda-forge/kim-property.svg)](https://anaconda.org/conda-forge/kim-property)[![PyPI](https://img.shields.io/pypi/v/kim-property.svg)](https://pypi.python.org/pypi/kim-property)[![License](https://img.shields.io/badge/license-LGPL--2.1--or--later-blue)](LICENSE)The objective is to make it as easy as possible to convert a script (forexample a [LAMMPS](https://lammps.sandia.gov/) script) that computes a[KIM property](https://openkim.org/properties) to a KIM Test.This utility module has 5 modes:1- **[Create](#Create)**\    Take as input the property instance ID and property definition name and    create initial property instance data structure. It checks and indicates    whether the property definition exists in [OpenKIM](https://openkim.org/).2- **[Destroy](#Destroy)**\    Delete a previously created property instance ID.3- **[Modify](#Modify)**\    Incrementally build the property instance by receiving keys with    associated arguments. It can &quot;append&quot; and add to a key's existing array    argument.4- **[Remove](#Remove)**\    Remove a key.5- **[Dump](#Dump)**\    Take as input the generated instance and a filename, validate each    instance against the property definition and either issues an error or    writes the instance out to file in edn format. Final validation should    make sure all keys/arguments are legal and all required keys are    provided.## CreateCreating property instances::````py    &gt;&gt;&gt; kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    '[{&quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot; &quot;instance-id&quot; 1}]'    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; kim_property_create(2, 'atomic-mass', property_inst)    '[{&quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot; &quot;instance-id&quot; 1} {&quot;property-id&quot; &quot;tag:brunnels@noreply.openkim.org,2016-05-11:property/atomic-mass&quot; &quot;instance-id&quot; 2}]'    &gt;&gt;&gt; property_inst = kim_property_create(2, 'atomic-mass', property_inst)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1        }        {            &quot;property-id&quot; &quot;tag:brunnels@noreply.openkim.org,2016-05-11:property/atomic-mass&quot;            &quot;instance-id&quot; 2        }    ]````A property instance is stored in a subset of the KIM-EDN format as described in[KIM Property Instances](https://openkim.org/doc/schema/properties-framework).Each property instance must contain the `property-id` and `instance-id`.`kim-property` utility module can create a new property instance, using a KIMproperty ID. A KIM property ID is an identifier of a KIM Property Definition,which can be,(1) a property short name,(2) the full unique ID of the property (including the contributor and date),(3) a file name corresponding to a local property definition file.Examples of each of these cases are shown below:````py    &gt;&gt;&gt; kim_property_create(1, 'atomic-mass')    &gt;&gt;&gt; kim_property_create(2, 'cohesive-energy-relation-cubic-crystal')````````py    &gt;&gt;&gt; kim_property_create(1, 'tag:brunnels@noreply.openkim.org,2016-05-11:property/atomic-mass')    &gt;&gt;&gt; kim_property_create(2, 'tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal')````````py    &gt;&gt;&gt; kim_property_create(1, 'new-property.edn')    &gt;&gt;&gt; kim_property_create(2, '/home/mary/marys-kim-properties/dissociation-energy.edn')````In the last example, &quot;new-property.edn&quot; and&quot;/home/mary/marys-kim-properties/dissociation-energy.edn&quot;are the names of files that contain user-defined (local) property definitions.## DestroyDestroying property instances::````py    &gt;&gt;&gt; property_inst_obj = '[{&quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot; &quot;instance-id&quot; 1}]'    &gt;&gt;&gt; kim_property_destroy(property_inst_obj, 1)    '[]'    &gt;&gt;&gt; property_inst_obj = '[{&quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot; &quot;instance-id&quot; 1} {&quot;property-id&quot; &quot;tag:brunnels@noreply.openkim.org,2016-05-11:property/atomic-mass&quot; &quot;instance-id&quot; 2}]'    &gt;&gt;&gt; kim_property_destroy(property_inst_obj, 2)    '[{&quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot; &quot;instance-id&quot; 1}]'````## ModifyModifying (setting) property instances.Once a `kim_property_create` has been given to instantiate a propertyinstance, maps associated with the property's keys can be edited using thekim_property_modify.In using this command, the special keyword &quot;key&quot; should be given, followedby the property key name and the key-value pair in the map associated withthe key that is to be set.For example, the `cohesive-energy-relation-cubic-crystal` property definitionconsists of property keys named &quot;short-name&quot;, &quot;species&quot;, ...An instance of this property could be created like so::````py    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;short-name&quot;,                &quot;source-value&quot;, &quot;1&quot;, &quot;fcc&quot;,                &quot;key&quot;, &quot;species&quot;,                &quot;source-value&quot;, &quot;1:4&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;,                &quot;key&quot;, &quot;a&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;5&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1            &quot;short-name&quot; {                &quot;source-value&quot; [                    &quot;fcc&quot;                ]            }            &quot;species&quot; {                &quot;source-value&quot; [                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                ]            }            &quot;a&quot; {                &quot;source-value&quot; [                    3.9149                    4.0                    4.032                    4.0817                    4.1602                ]                &quot;source-unit&quot; &quot;angstrom&quot;                &quot;digits&quot; 5            }        }    ]````For cases where there are multiple keys or a key receives an array of valuescomputed one at a time, the `kim_property_modify` can be called multipletimes and append values to a given key.````py    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;short-name&quot;,                &quot;source-value&quot;, &quot;1&quot;, &quot;fcc&quot;,                &quot;key&quot;, &quot;species&quot;,                &quot;source-value&quot;, &quot;1:4&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;,                &quot;key&quot;, &quot;a&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;5&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1            &quot;short-name&quot; {                &quot;source-value&quot; [                    &quot;fcc&quot;                ]            }            &quot;species&quot; {                &quot;source-value&quot; [                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                ]            }            &quot;a&quot; {                &quot;source-value&quot; [                    3.9149                    4.0                    4.032                    4.0817                    4.1602                ]                &quot;source-unit&quot; &quot;angstrom&quot;                &quot;digits&quot; 5            }        }    ]    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;2&quot;, &quot;1:2&quot;, &quot;0.5&quot;, &quot;0.5&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1            &quot;short-name&quot; {                &quot;source-value&quot; [                    &quot;fcc&quot;                ]            }            &quot;species&quot; {                &quot;source-value&quot; [                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                ]            }            &quot;a&quot; {                &quot;source-value&quot; [                    3.9149                    4.0                    4.032                    4.0817                    4.1602                ]                &quot;source-unit&quot; &quot;angstrom&quot;                &quot;digits&quot; 5            }            &quot;basis-atom-coordinates&quot; {                &quot;source-value&quot; [                    [                        0.0                        0.0                        0.0                    ]                    [                        0.5                        0.5                        0.0                    ]                ]            }        }    ]    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;3&quot;, &quot;1:3&quot;, &quot;0.5&quot;, &quot;0.0&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;4&quot;, &quot;2:3&quot;, &quot;0.5&quot;, &quot;0.5&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1            &quot;short-name&quot; {                &quot;source-value&quot; [                    &quot;fcc&quot;                ]            }            &quot;species&quot; {                &quot;source-value&quot; [                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                ]            }            &quot;a&quot; {                &quot;source-value&quot; [                    3.9149                    4.0                    4.032                    4.0817                    4.1602                ]                &quot;source-unit&quot; &quot;angstrom&quot;                &quot;digits&quot; 5            }            &quot;basis-atom-coordinates&quot; {                &quot;source-value&quot; [                    [                        0.0                        0.0                        0.0                    ]                    [                        0.5                        0.5                        0.0                    ]                    [                        0.5                        0.0                        0.5                    ]                    [                        0.0                        0.5                        0.5                    ]                ]            }        }    ]    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;cohesive-potential-energy&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.324&quot;, &quot;3.3576&quot;, &quot;3.3600&quot;, &quot;3.3550&quot;, &quot;3.3260&quot;,                &quot;source-std-uncert-value&quot;, &quot;1:5&quot;, &quot;0.002&quot;, &quot;0.0001&quot;, &quot;0.00001&quot;, &quot;0.0012&quot;, &quot;0.00015&quot;,                &quot;source-unit&quot;, &quot;eV&quot;,                &quot;digits&quot;, &quot;5&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1            &quot;short-name&quot; {                &quot;source-value&quot; [                    &quot;fcc&quot;                ]            }            &quot;species&quot; {                &quot;source-value&quot; [                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                ]            }            &quot;a&quot; {                &quot;source-value&quot; [                    3.9149                    4.0                    4.032                    4.0817                    4.1602                ]                &quot;source-unit&quot; &quot;angstrom&quot;                &quot;digits&quot; 5            }            &quot;basis-atom-coordinates&quot; {                &quot;source-value&quot; [                    [                        0.0                        0.0                        0.0                    ]                    [                        0.5                        0.5                        0.0                    ]                    [                        0.5                        0.0                        0.5                    ]                    [                        0.0                        0.5                        0.5                    ]                ]            }            &quot;cohesive-potential-energy&quot; {                &quot;source-value&quot; [                    3.324                    3.3576                    3.36                    3.355                    3.326                ]                &quot;source-std-uncert-value&quot; [                    0.002                    0.0001                    1e-05                    0.0012                    0.00015                ]                &quot;source-unit&quot; &quot;eV&quot;                &quot;digits&quot; 5            }        }    ]````**Note:**Variables which are introduced with a specified extent of either an emptyvector `[]` or `[1]`, are scalars.Calling a `kim_property_modify` will update the scalars and vector valueswhich are already set.For example:````py    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;space-group&quot;,                &quot;source-value&quot;, &quot;Immm&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1            &quot;space-group&quot; {                &quot;source-value&quot; &quot;Immm&quot;            }        }    ]````Calling the `kim_property_modify` again set the scalar variable with a newvalue.````py    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;space-group&quot;,                &quot;source-value&quot;, &quot;P6_3/mmc&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1            &quot;space-group&quot; {                &quot;source-value&quot; &quot;P6_3/mmc&quot;            }        }    ]````**Note:**If the source-value key is a scalar, the values of the uncertainty and digitskeys must be scalars. Thus, calling the `kim_property_modify` with a non-scalarkey where the source-value key is a scalar fails.**Note:**If the source-value key's value is an array (EDN vector), the values of theuncertainty and digits keys must be either arrays of the same extent, orscalars in which case they are taken to apply equally to all values in thesource-value array. The keys associated with uncertainty and precision conformto the[ISO Guide to the Expression of Uncertainty in Measurement](https://www.iso.org/standard/50461.html)and the[ThermoML standard notation](https://www.degruyter.com/view/journals/ci/28/3/article-p22.xml).The keys associated with uncertainty and precision of the[KIM Property Instances](https://openkim.org/doc/schema/properties-framework)are:- source-std-uncert-value- source-expand-uncert-value- coverage-factor- source-asym-std-uncert-neg- source-asym-std-uncert-pos- source-asym-expand-uncert-neg- source-asym-expand-uncert-pos- uncert-lev-of-confid- digitsIn below example, the `a`-key source-value key's value is an array, which meansthe value of the `digits`-key must be either an array of the same extent, or ascalar.1. The value of the `digits`-key is a scalar:    ````py        &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')        &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                    &quot;key&quot;, &quot;a&quot;,                    &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                    &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;5&quot;)        &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)        &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))        [            {                &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;                &quot;instance-id&quot; 1                &quot;a&quot; {                    &quot;source-value&quot; [                        3.9149                        4.0                        4.032                        4.0817                        4.1602                    ]                    &quot;source-unit&quot; &quot;angstrom&quot;                    &quot;digits&quot; 5                }            }        ]    ````2. The value of the `digits`-key is an array of the same extent:    ````py        &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')        &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                    &quot;key&quot;, &quot;a&quot;,                    &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                    &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;1:5&quot;, &quot;5&quot;, &quot;5&quot;, &quot;5&quot;, &quot;5&quot;, &quot;5&quot;)        &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)        &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))        [            {                &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;                &quot;instance-id&quot; 1                &quot;a&quot; {                    &quot;source-value&quot; [                        3.9149                        4.0                        4.032                        4.0817                        4.1602                    ]                    &quot;source-unit&quot; &quot;angstrom&quot;                    &quot;digits&quot; [                        5                        5                        5                        5                        5                    ]                }            }        ]    ````## RemoveRemoving (a) key(s) from a property instance::````py    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;short-name&quot;,                &quot;source-value&quot;, &quot;1&quot;, &quot;fcc&quot;,                &quot;key&quot;, &quot;species&quot;,                &quot;source-value&quot;, &quot;1:4&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;,                &quot;key&quot;, &quot;a&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;2&quot;, &quot;1:2&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;3&quot;, &quot;1:3&quot;, &quot;0.5&quot;, &quot;0.0&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;4&quot;, &quot;2:3&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;cohesive-potential-energy&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.324&quot;, &quot;3.3576&quot;, &quot;3.3600&quot;, &quot;3.3550&quot;, &quot;3.3260&quot;,                &quot;source-std-uncert-value&quot;, &quot;1:5&quot;, &quot;0.002&quot;, &quot;0.0001&quot;, &quot;0.00001&quot;, &quot;0.0012&quot;, &quot;0.00015&quot;,                &quot;source-unit&quot;, &quot;eV&quot;,                &quot;digits&quot;, &quot;5&quot;)    &gt;&gt;&gt; property_inst = kim_property_remove(property_inst, 1, &quot;key&quot;, &quot;a&quot;, &quot;source-unit&quot;)    &gt;&gt;&gt; property_inst = kim_property_remove(property_inst, 1, &quot;key&quot;, &quot;cohesive-potential-energy&quot;, &quot;key&quot;, &quot;basis-atom-coordinates&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; print(kim_edn.dumps(property_inst_obj, indent=4))    [        {            &quot;property-id&quot; &quot;tag:staff@noreply.openkim.org,2014-04-15:property/cohesive-energy-relation-cubic-crystal&quot;            &quot;instance-id&quot; 1            &quot;short-name&quot; {                &quot;source-value&quot; [                    &quot;fcc&quot;                ]            }            &quot;species&quot; {                &quot;source-value&quot; [                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                    &quot;Al&quot;                ]            }            &quot;a&quot; {                &quot;source-value&quot; [                    3.9149                    4.0                    4.032                    4.0817                    4.1602                ]                &quot;digits&quot; 5            }        }    ]````## DumpFirst, it validates the generated instances against the property definition.Then serializes it to a [KIM-EDN](https://github.com/openkim/kim-edn#kim-edn)formatted stream and dumps it to a `fp` (a `.write()`-supporting file-likeobject or a name string to open a file).The validation makes sure all keys/arguments are legal and all required keysare provided.````py    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;short-name&quot;,                &quot;source-value&quot;, &quot;1&quot;, &quot;fcc&quot;,                &quot;key&quot;, &quot;species&quot;,                &quot;source-value&quot;, &quot;1:4&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;,                &quot;key&quot;, &quot;a&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;2&quot;, &quot;1:2&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;3&quot;, &quot;1:3&quot;, &quot;0.5&quot;, &quot;0.0&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;4&quot;, &quot;2:3&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;cohesive-potential-energy&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.324&quot;, &quot;3.3576&quot;, &quot;3.3600&quot;, &quot;3.3550&quot;, &quot;3.3260&quot;,                &quot;source-std-uncert-value&quot;, &quot;1:5&quot;, &quot;0.002&quot;, &quot;0.0001&quot;, &quot;0.00001&quot;, &quot;0.0012&quot;, &quot;0.00015&quot;,                &quot;source-unit&quot;, &quot;eV&quot;,                &quot;digits&quot;, &quot;5&quot;)    &gt;&gt;&gt; kim_property_dump(property_inst, &quot;results.edn&quot;)````or````py    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;short-name&quot;,                &quot;source-value&quot;, &quot;1&quot;, &quot;fcc&quot;,                &quot;key&quot;, &quot;species&quot;,                &quot;source-value&quot;, &quot;1:4&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;,                &quot;key&quot;, &quot;a&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;2&quot;, &quot;1:2&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;3&quot;, &quot;1:3&quot;, &quot;0.5&quot;, &quot;0.0&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;4&quot;, &quot;2:3&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;cohesive-potential-energy&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.324&quot;, &quot;3.3576&quot;, &quot;3.3600&quot;, &quot;3.3550&quot;, &quot;3.3260&quot;,                &quot;source-std-uncert-value&quot;, &quot;1:5&quot;, &quot;0.002&quot;, &quot;0.0001&quot;, &quot;0.00001&quot;, &quot;0.0012&quot;, &quot;0.00015&quot;,                &quot;source-unit&quot;, &quot;eV&quot;,                &quot;digits&quot;, &quot;5&quot;)    &gt;&gt;&gt; property_inst_obj = kim_edn.loads(property_inst)    &gt;&gt;&gt; kim_property_dump(property_inst_obj, &quot;results.edn&quot;)````or````py    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;short-name&quot;,                &quot;source-value&quot;, &quot;1&quot;, &quot;fcc&quot;,                &quot;key&quot;, &quot;species&quot;,                &quot;source-value&quot;, &quot;1:4&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;,                &quot;key&quot;, &quot;a&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;2&quot;, &quot;1:2&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;3&quot;, &quot;1:3&quot;, &quot;0.5&quot;, &quot;0.0&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;4&quot;, &quot;2:3&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;cohesive-potential-energy&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.324&quot;, &quot;3.3576&quot;, &quot;3.3600&quot;, &quot;3.3550&quot;, &quot;3.3260&quot;,                &quot;source-std-uncert-value&quot;, &quot;1:5&quot;, &quot;0.002&quot;, &quot;0.0001&quot;, &quot;0.00001&quot;, &quot;0.0012&quot;, &quot;0.00015&quot;,                &quot;source-unit&quot;, &quot;eV&quot;,                &quot;digits&quot;, &quot;5&quot;)    &gt;&gt;&gt; with open(&quot;results.edn&quot;, 'w') as fp:            kim_property_dump(property_inst, fp)````An example with two property instances,````py    &gt;&gt;&gt; property_inst = kim_property_create(1, 'cohesive-energy-relation-cubic-crystal')    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 1,                &quot;key&quot;, &quot;short-name&quot;,                &quot;source-value&quot;, &quot;1&quot;, &quot;fcc&quot;,                &quot;key&quot;, &quot;species&quot;,                &quot;source-value&quot;, &quot;1:4&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;, &quot;Al&quot;,                &quot;key&quot;, &quot;a&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.9149&quot;, &quot;4.0000&quot;, &quot;4.032&quot;, &quot;4.0817&quot;, &quot;4.1602&quot;,                &quot;source-unit&quot;, &quot;angstrom&quot;, &quot;digits&quot;, &quot;5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;2&quot;, &quot;1:2&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;3&quot;, &quot;1:3&quot;, &quot;0.5&quot;, &quot;0.0&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;basis-atom-coordinates&quot;,                &quot;source-value&quot;, &quot;4&quot;, &quot;2:3&quot;, &quot;0.5&quot;, &quot;0.5&quot;,                &quot;key&quot;, &quot;cohesive-potential-energy&quot;,                &quot;source-value&quot;, &quot;1:5&quot;, &quot;3.324&quot;, &quot;3.3576&quot;, &quot;3.3600&quot;, &quot;3.3550&quot;, &quot;3.3260&quot;,                &quot;source-std-uncert-value&quot;, &quot;1:5&quot;, &quot;0.002&quot;, &quot;0.0001&quot;, &quot;0.00001&quot;, &quot;0.0012&quot;, &quot;0.00015&quot;,                &quot;source-unit&quot;, &quot;eV&quot;,                &quot;digits&quot;, &quot;5&quot;)    &gt;&gt;&gt; property_inst = kim_property_create(2, 'atomic-mass', property_inst)    &gt;&gt;&gt; property_inst = kim_property_modify(property_inst, 2,                &quot;key&quot;, &quot;mass&quot;,                &quot;source-value&quot;, &quot;1.434e-19&quot;, &quot;source-unit&quot;, &quot;si&quot;,                &quot;key&quot;, &quot;species&quot;,                &quot;source-value&quot;, &quot;Al&quot;)    &gt;&gt;&gt; kim_property_dump(property_inst, &quot;results.edn&quot;)````## Installing kim-property### RequirementsYou need Python 3.6 or later to run `kim-property`. You can have multiplePython versions (2.x and 3.x) installed on the same system without problems.To install Python 3 for different Linux flavors, macOS and Windows, packagesare available at\[https://www.python.org/getit/](https://www.python.org/getit/)### Using pip**pip** is the most popular tool for installing Python packages, and the oneincluded with modern versions of Python.`kim-property` can be installed with `pip`:```shpip install kim-property```**Note:**Depending on your Python installation, you may need to use `pip3` instead of`pip`.```shpip3 install kim-property```Depending on your configuration, you may have to run `pip` like this:```shpython3 -m pip install kim-property```### Using pip (GIT Support)`pip` currently supports cloning over `git````shpip install git+https://github.com/openkim/kim-property.git```For more information and examples, see the[pip install](https://pip.pypa.io/en/stable/reference/pip_install/#id18) reference.### Using conda**conda** is the package management tool for Anaconda Python installations.Installing `kim-property` from the `conda-forge` channel can be achieved byadding `conda-forge` to your channels with:```shconda config --add channels conda-forge```Once the `conda-forge` channel has been enabled, `kim-property` can beinstalled with:```shconda install kim-property```It is possible to list all of the versions of `kim-property` available onyour platform with:```shconda search kim-property --channel conda-forge```## CopyrightCopyright (c) 2020-2023, Regents of the University of Minnesota.\All Rights Reserved## ContributingContributors:\&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Yaser Afshar</longdescription>
</pkgmetadata>