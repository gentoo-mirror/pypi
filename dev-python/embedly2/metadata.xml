<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>embedly2========This is a fork of the unmaintained`embedly-python &lt;https://github.com/embedly/embedly-python&gt;`_library. It aims to keep the package installable and functionalon new versions of Python.The original README follows:Python library for interacting with Embedly's API. To get started sign up fora key at `embed.ly/signup &lt;https://app.embed.ly/signup&gt;`_.Install-------Install with `Pip &lt;http://www.pip-installer.org&gt;`_::  pip install embedly2This library supports Python 3.6 through 3.10.Getting Started---------------This library is meant to be a dead simple way to interact with the Embedly API.There are only 2 main objects, the ``Embedly`` client and the ``Url`` responsemodel. Here is a simple example and then we will go into the objects::  &gt;&gt;&gt; from embedly import Embedly  &gt;&gt;&gt; client = Embedly(:key)  &gt;&gt;&gt; obj = client.oembed('http://instagram.com/p/BL7ti/')  &gt;&gt;&gt; obj['type']  u'photo'  &gt;&gt;&gt; obj['url']  u'http://images.ak.instagram.com/media/2011/01/24/cdd759a319184cb79793506607ff5746_7.jpg'  &gt;&gt;&gt; obj = client.oembed('http://instagram.com/error/error/')  &gt;&gt;&gt; obj['error']  TrueEmbedly Client&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;The Embedly client is a object that takes in a key and optional User Agentand timeout parameters then handles all the interactions and HTTP requeststo Embedly. To initialize the object, you'll need the key that you got whenyou signed up for Embedly.::  &gt;&gt;&gt; from embedly import Embedly  &gt;&gt;&gt; client = Embedly('key')  &gt;&gt;&gt; client2 = Embedly('key', 'Mozilla/5.0 (compatible; example-org;)')  &gt;&gt;&gt; client3 = Embedly('key', 'Mozilla/5.0 (compatible; example-org;)', 30)  &gt;&gt;&gt; client4 = Embedly('key', timeout=10, user_agent='Mozilla/5.0 (compatible; example-org;)')The client object now has a bunch of different methods that you can use.``oembed``  Corresponds to the `oEmbed endpoint  &lt;http://embed.ly/docs/embed/api/endpoints/1/oembed&gt;`_. Passes back an object  that allows you to retrieve a title, thumbnail, description and the embed  html::    &gt;&gt;&gt; client.oembed('http://vimeo.com/18150336')    &lt;embedly.models.Url at 0x10223d950&gt;``extract``  Corresponds to the `Extract endpoint  &lt;http://embed.ly/docs/extract/api/endpoints/1/extract&gt;`_. Passes back an  object that allows you to retrieve a title, description, content, html and a  list of images.::    &gt;&gt;&gt; client.extract('http://vimeo.com/18150336')    &lt;embedly.models.Url at 0x10223d950&gt;``preview``  **Preview is no longer available to new users and has been replaced by extract.**  Corresponds to the `Preview endpoint  &lt;http://embed.ly/docs/endpoints/1/preview&gt;`_. Passes back a simple object  that allows you to retrieve a title, description, content, html and a list of  images.::    &gt;&gt;&gt; client.preview('http://vimeo.com/18150336')    &lt;embedly.models.Url at 0x10223d950&gt;``objectify``  **Objectify is no longer available to new users and has been replaced by extract.**  Corresponds to the `Objectify endpoint  &lt;http://embed.ly/docs/endpoints/2/objectify&gt;`_. Passes back a simple object  that allows you to retrieve pretty much everything that Embedly knows about a  URL.::    &gt;&gt;&gt; client.objectify('http://vimeo.com/18150336')    &lt;embedly.models.Url at 0x10223d950&gt;The above functions all take the same arguements, a URL or a list of URLs andkeyword arguments that correspond to Embedly's `query arguments&lt;http://embed.ly/docs/endpoints/arguments&gt;`_. Here is an example::  &gt;&gt;&gt; client.oembed(['http://vimeo.com/18150336',    'http://www.youtube.com/watch?v=hD7ydlyhvKs'], maxwidth=500, words=20)There are some supporting functions that allow you to limit URLs before sendingthem to Embedly. Embedly can return metadata for any URL, these just allow adeveloper to only pass a subset of Embedly `providers&lt;http://embed.ly/providers&gt;`_. Note that URL shorteners like bit.ly or t.co arenot supported through these regexes.``regex``  If you would like to only send URLs that returns embed HTML via Embedly you  can match the URL to the regex before making the call. The matching providers  are listed at `embed.ly/providers &lt;http://embed.ly/providers&gt;`_::    &gt;&gt;&gt; url = 'http://vimeo.com/18150336'    &gt;&gt;&gt; client.regex.match(url)    &lt;_sre.SRE_Match at 0x1017ba718&gt;``is_supported``  This is a simplified version of ``regex``::    &gt;&gt;&gt; url = 'http://vimeo.com/18150336'    &gt;&gt;&gt; client.is_supported(url)    TrueUrl Object&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;The ``Url`` object is basically a response dictionary returned fromone of the Embedly API endpoints.::  &gt;&gt;&gt; response = client.oembed('http://vimeo.com/18150336', words=10)Depending on the method you are using, the response will have differentattributes. We will go through a few, but you should read the `documentation&lt;http://embed.ly/docs&gt;`_ to get the full list of data that is passed back.::  &gt;&gt;&gt; response['type']  u'video'  &gt;&gt;&gt; response['title']  u'Wingsuit Basejumping - The Need 4 Speed: The Art of Flight'  &gt;&gt;&gt; response['provider_name']  u'Vimeo'  &gt;&gt;&gt; response['width']  1280As you can see the ``Url`` object works like a dictionary, but it's slightlyenhanced. It will always have ``method`` and ``original_url`` attributes,which represent the Embedly request type and the URL requested.::  &gt;&gt;&gt; response.method  'oembed'  &gt;&gt;&gt; response.original_url  'http://vimeo.com/18150336'  # useful because the response data itself may not have a URL  # (or it could have a redirected link, querystring params, etc)  &gt;&gt;&gt; response['url']  ...  KeyError: 'url'For the Preview and Objectify endpoints the sub-objects can also be accessed inthe same manner.::  &gt;&gt;&gt; obj = client.preview('http://vimeo.com/18150336', words=10)  &gt;&gt;&gt; obj['object']['type']  u'video'  &gt;&gt;&gt; obj['images'][0]['url']  u'http://b.vimeocdn.com/ts/117/311/117311910_1280.jpg'Error Handling--------------If there was an error processing the request, the ``Url`` object will containan error. For example if we use an invalid key, we will get a 401 response back::  &gt;&gt;&gt; client = Embedly('notakey')  &gt;&gt;&gt; obj = client.preview('http://vimeo.com/18150336')  &gt;&gt;&gt; obj['error']  True  &gt;&gt;&gt; obj['error_code']  401Changelog---------Version 0.6.0 (May 25, 2022)- Declare support for Python 3.6 through 3.10; drop support for Python 2,  3.2, and 3.3.- Fix installation with recent versions of setuptools.Copyright---------Copyright (c) 2013 Embed.ly, Inc. See LICENSE for details.</longdescription>
</pkgmetadata>