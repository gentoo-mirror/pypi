<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyCirclize: Circular visualization in Python![Python3](https://img.shields.io/badge/Language-Python3-steelblue)![OS](https://img.shields.io/badge/OS-_Windows_|_Mac_|_Linux-steelblue)![License](https://img.shields.io/badge/License-MIT-steelblue)[![Latest PyPI version](https://img.shields.io/pypi/v/pycirclize.svg)](https://pypi.python.org/pypi/pycirclize)[![conda-forge](https://img.shields.io/conda/vn/conda-forge/pycirclize.svg?color=green)](https://anaconda.org/conda-forge/pycirclize)[![CI](https://github.com/moshi4/pyCirclize/actions/workflows/ci.yml/badge.svg)](https://github.com/moshi4/pyCirclize/actions/workflows/ci.yml)## Table of contents- [Overview](#overview)- [Installation](#installation)- [API Usage](#api-usage)- [Code Example](#code-example)- [Not Implemented Features](#not-implemented-features)## OverviewpyCirclize is a circular visualization python package implemented based on matplotlib.This package is developed for the purpose of easily and beautifully plotting circular figure such as Circos Plot and Chord Diagram in Python.In addition, useful genome and phylogenetic tree visualization methods for the bioinformatics field are also implemented.pyCirclize was inspired by [circlize](https://github.com/jokergoo/circlize) and [pyCircos](https://github.com/ponnhide/pyCircos).More detailed documentation is available [here](https://moshi4.github.io/pyCirclize/).![pyCirclize_gallery.png](https://raw.githubusercontent.com/moshi4/pyCirclize/main/docs/images/pyCirclize_gallery.png)  **Fig.1 pyCirclize example plot gallery**## Installation`Python 3.8 or later` is required for installation.**Install PyPI package:**    pip install pycirclize**Install conda-forge package:**    conda install -c conda-forge pycirclize## API UsageAPI usage is described in each of the following sections in the [document](https://moshi4.github.io/pyCirclize/).- [Getting Started](https://moshi4.github.io/pyCirclize/getting_started/)- [Plot API Example](https://moshi4.github.io/pyCirclize/plot_api_example/)- [Chord Diagram](https://moshi4.github.io/pyCirclize/chord_diagram/)- [Circos Plot (Genomics)](https://moshi4.github.io/pyCirclize/circos_plot/)- [Phylogenetic Tree](https://moshi4.github.io/pyCirclize/phylogenetic_tree/)- [Plot Tips](https://moshi4.github.io/pyCirclize/plot_tips/)## Code Example### 1. Circos Plot```pythonfrom pycirclize import Circosimport numpy as npnp.random.seed(0)# Initialize Circos sectorssectors = {&quot;A&quot;: 10, &quot;B&quot;: 15, &quot;C&quot;: 12, &quot;D&quot;: 20, &quot;E&quot;: 15}circos = Circos(sectors, space=5)for sector in circos.sectors:    # Plot sector name    sector.text(f&quot;Sector: {sector.name}&quot;, r=110, size=15)    # Create x positions &amp; random y values    x = np.arange(sector.start, sector.end) + 0.5    y = np.random.randint(0, 100, len(x))    # Plot lines    track1 = sector.add_track((80, 100), r_pad_ratio=0.1)    track1.xticks_by_interval(interval=1)    track1.axis()    track1.line(x, y)    # Plot points     track2 = sector.add_track((55, 75), r_pad_ratio=0.1)    track2.axis()    track2.scatter(x, y)    # Plot bars    track3 = sector.add_track((30, 50), r_pad_ratio=0.1)    track3.axis()    track3.bar(x, y)# Plot links circos.link((&quot;A&quot;, 0, 3), (&quot;B&quot;, 15, 12))circos.link((&quot;B&quot;, 0, 3), (&quot;C&quot;, 7, 11), color=&quot;skyblue&quot;)circos.link((&quot;C&quot;, 2, 5), (&quot;E&quot;, 15, 12), color=&quot;chocolate&quot;, direction=1)circos.link((&quot;D&quot;, 3, 5), (&quot;D&quot;, 18, 15), color=&quot;lime&quot;, ec=&quot;black&quot;, lw=0.5, hatch=&quot;//&quot;, direction=2)circos.link((&quot;D&quot;, 8, 10), (&quot;E&quot;, 2, 8), color=&quot;violet&quot;, ec=&quot;red&quot;, lw=1.0, ls=&quot;dashed&quot;)circos.savefig(&quot;example01.png&quot;)```![example01.png](https://raw.githubusercontent.com/moshi4/pyCirclize/main/docs/images/example01.png)  ### 2. Circos Plot (Genomics)```pythonfrom pycirclize import Circosfrom pycirclize.utils import fetch_genbank_by_accidfrom pycirclize.parser import Genbank# Download `NC_002483` E.coli plasmid genbankgbk_fetch_data = fetch_genbank_by_accid(&quot;NC_002483&quot;)gbk = Genbank(gbk_fetch_data)# Initialize Circos instance with genome sizecircos = Circos(sectors={gbk.name: gbk.range_size})circos.text(f&quot;Escherichia coli K-12 plasmid F\n\n{gbk.name}&quot;, size=14)circos.rect(r_lim=(90, 100), fc=&quot;lightgrey&quot;, ec=&quot;none&quot;, alpha=0.5)sector = circos.sectors[0]# Plot forward strand CDSf_cds_track = sector.add_track((95, 100))f_cds_feats = gbk.extract_features(&quot;CDS&quot;, target_strand=1)f_cds_track.genomic_features(f_cds_feats, plotstyle=&quot;arrow&quot;, fc=&quot;salmon&quot;, lw=0.5)# Plot reverse strand CDSr_cds_track = sector.add_track((90, 95))r_cds_feats = gbk.extract_features(&quot;CDS&quot;, target_strand=-1)r_cds_track.genomic_features(r_cds_feats, plotstyle=&quot;arrow&quot;, fc=&quot;skyblue&quot;, lw=0.5)# Plot 'gene' qualifier label if existslabels, label_pos_list = [], []for feat in gbk.extract_features(&quot;CDS&quot;):    start = int(str(feat.location.start))    end = int(str(feat.location.end))    label_pos = (start + end) / 2    gene_name = feat.qualifiers.get(&quot;gene&quot;, [None])[0]    if gene_name is not None:        labels.append(gene_name)        label_pos_list.append(label_pos)f_cds_track.xticks(label_pos_list, labels, label_size=6, label_orientation=&quot;vertical&quot;)# Plot xticks (interval = 10 Kb)r_cds_track.xticks_by_interval(    10000, outer=False, label_formatter=lambda v: f&quot;{v/1000:.1f} Kb&quot;)circos.savefig(&quot;example02.png&quot;)```![example02.png](https://raw.githubusercontent.com/moshi4/pyCirclize/main/docs/images/example02.png)  ### 3. Chord Diagram```pythonfrom pycirclize import Circosimport pandas as pd# Create matrix dataframe (3 x 6)row_names = [&quot;F1&quot;, &quot;F2&quot;, &quot;F3&quot;]col_names = [&quot;T1&quot;, &quot;T2&quot;, &quot;T3&quot;, &quot;T4&quot;, &quot;T5&quot;, &quot;T6&quot;]matrix_data = [    [10, 16, 7, 7, 10, 8],    [4, 9, 10, 12, 12, 7],    [17, 13, 7, 4, 20, 4],]matrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)# Initialize Circos from matrix for plotting Chord Diagramcircos = Circos.initialize_from_matrix(    matrix_df,    space=5,    cmap=&quot;tab10&quot;,    label_kws=dict(size=12),    link_kws=dict(ec=&quot;black&quot;, lw=0.5, direction=1),)circos.savefig(&quot;example03.png&quot;)```![example03.png](https://raw.githubusercontent.com/moshi4/pyCirclize/main/docs/images/example03.png)  ## Not Implemented FeaturesList of features implemented in other Circos plotting tools but not yet implemented in pyCirclize.I may implement them when I feel like it.- Plot histogram- Plot boxplot- Plot violin- Label position auto adjustment</longdescription>
</pkgmetadata>