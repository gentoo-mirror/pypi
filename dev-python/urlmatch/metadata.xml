<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>urlmatch - fnmatch for the web==============================Use ``urlmatch`` to verify that URLs conform to certain patterns. Thelibrary and match patterns are based heavily on the `Google ChromeExtension matchpatterns &lt;http://developer.chrome.com/extensions/match_patterns&gt;`__.Usage-----.. code:: python    from urlmatch import urlmatch    match_pattern = 'http://*.example.com/*'    urlmatch(match_pattern, 'http://subdomain.example.com/') # True    urlmatch(match_pattern, 'http://sub.subdomain.example.com/') # True    urlmatch(match_pattern, 'https://example.com/') # False    urlmatch(match_pattern, 'http://bad.com/') # FalseOptions-------There are a few options that affect how the match patterns work.-  ``path_required`` (default is True) - a ``bool`` which dictates   whether the match pattern must have path-  ``fuzzy_scheme`` (default is False) - a ``bool`` which dictates   whether the scheme should be matched &quot;fuzzily.&quot; if this is true, then   any valid scheme (``*``, ``http``, ``https``) will match both   ``http`` and ``https``-  ``http_auth_allowed`` (default is True) - ``bool`` which dictates   whether URLs with HTTP Authentication in the URL should be allowed or   notMatch pattern syntax--------------------The basic match pattern syntax is simple:::    &lt;url-pattern&gt; := &lt;scheme&gt;://&lt;host&gt;&lt;path&gt;    &lt;scheme&gt; := '*' | 'http' | 'https'    &lt;host&gt; := '*' | '*.' &lt;any char except '/' and '*'&gt;+    &lt;path&gt; := '/' &lt;any chars&gt;Examples~~~~~~~~-  ``http://*/*`` - matches any URL that uses the http scheme-  ``https://*/*`` - matches any URL that uses the https scheme-  ``http://*/test*`` - matches any URL that uses the http scheme and   has a path that starts with ``test``-  ``*://test.com/*`` - matches any url with the domain ``test.com``-  ``http://*.test.com`` - matches ``test.com`` and any subdomain of   ``test.com``-  ``http://test.com/foo/bar.html`` - matches the exact URLBugs----If you find an issue, let me know in the issues section!Contributing------------From the `Rubinius &lt;http://rubini.us/&gt;`__ contribution page:    Writing code and participating should be fun, not an exercise in    perseverance. Stringent commit polices, for whatever their other    qualities may bring, also mean longer turnaround times.Submit a patch and once it's accepted, you'll get commit access to therepository. Feel free to fork the repository and send a pull request,once it's merged in you'll get added. If not, feel free to bug`jessepollak &lt;http://github.com/jessepollak&gt;`__ about it.How To Contribute------------------  Clone: ``git@github.com:jessepollak/urlmatch.git``-  Create a topic branch: ``git checkout -b awesome_feature``-  Commit away (and add unit tests for any code your write).-  Keep up to date: ``git fetch &amp;&amp; git rebase origin/master``.-  Run the tests: ``python setup.py test``Once you're ready:-  Fork the project on GitHub-  Add your repository as a remote:   ``git remote add your_remote your_repo``-  Push up your branch: ``git push your_remote awesome_feature``-  Create a Pull Request for the topic branch, asking for review.Once it's accepted:-  If you want access to the core repository feel free to ask! Then you   can change origin to point to the Read+Write URL:::    git remote set-url origin git@github.com:jessepollak/urlmatch.gitOtherwise, you can continue to hack away in your own fork.</longdescription>
</pkgmetadata>