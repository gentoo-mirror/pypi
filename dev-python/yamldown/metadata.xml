<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># YamldownThis library allows users to load and read &quot;YAMLdown&quot; files. That is,Markdown (primarily for github) with YAML embedded inside. Github markdownalready renders YAML style text in markdown as a table. This library parsesa yamldown file into its respective YAML and markdown.## Installation`pip install yamldown`For local installation and development, you can run the make file:    sauron@orthanc:[~]$ cd yamldown    sauron@orthanc:[yamldown]$ makeThis will create a virtual environemnt `env`, install everything in`requirements.txt` and in `setup.py`, run tests, and run mypy, python 3's typechecker. Be sure to activate the virtual environment when local developing:    source env/bin/activateor    . env/bin/activateTo undo your activated virtual environment, just run the command `deactivate`## UsageImporting the yamldown module will let you `load` and `dump` yamldown files.`load` receives a file-like object (backed by text in yamldown format) andreturns a tuple, first a dictionary with the containing YAML, and second astring with the contents of the Markdown. In this way the yaml can be utilized.Example:    $ python3    &gt;&gt;&gt; import io    &gt;&gt;&gt; import yamldown    &gt;&gt;&gt; s = &quot;&quot;&quot;    ...---    ... things:    ...   - hello    ...   - world    ... foo: bar    ... ---    ... This is some markdown text&quot;&quot;&quot;    &gt;&gt;&gt; f = io.StringIO(s)    &gt;&gt;&gt; yml, md = yamldown.load(f)    &gt;&gt;&gt; print(yml)    {'things': ['hello', 'world'], 'foo': 'bar'}    &gt;&gt;&gt;print(md)    This is some markdown textTo write out a yamldown file, `dump` takes a dictionary with your yaml dataand a string of markdown and outputs a string. The order in which the yamlappears in the document can be specified with the `yamlfirst` option: `True`for if the yaml should appear first (like in the above example) and `False` toappear last.Example:    $ python3    &gt;&gt;&gt; import yamldown    &gt;&gt;&gt; yml = {'things': ['hello', 'world'], 'foo': 'bar'}    &gt;&gt;&gt; md = &quot;This is some markdown text&quot;    &gt;&gt;&gt; print(yamldown.dump(yml, md))    ---    foo: bar    things:    - hello    - world    ---    This is some markdown text</longdescription>
</pkgmetadata>