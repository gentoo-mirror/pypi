<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dictparse![Python package](https://github.com/Julian-Nash/dictparse/workflows/Python%20package/badge.svg?branch=master)A simple, slim and useful, zero-dependency utility for parsing dictionaries or dictionary-like objects.It's particularly useful for parsing incoming request data in REST APIs &amp; web applications, for example in the case of Flask, parsing form data from `request.form`, query string arguments from`request.args` or JSON data from `request.json`.The `dictparse` design takes inspiration from Python's own `argparse` library, similar to the `ArgumentParser` class, taking input as a dictionary or dictionary-like object, enforcing rules, types, applying functions, default values and returning a `NameSpace`, with values mapped to attributes.### Installation```shell scriptpip install dictparse```### ExampleThe following code is a Python program that takes takes some data in the form of a dictionary and parses it:```pycon&gt;&gt;&gt; from dictparse import DictionaryParser&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;name&quot;, str, required=True)&gt;&gt;&gt; params = parser.parse_dict({&quot;name&quot;: &quot;FooBar&quot;})&gt;&gt;&gt; params.name'FooBar'```### Creating a parserThe first step is to create the DictionaryParser object```pycon&gt;&gt;&gt; from dictparse import DictionaryParser&gt;&gt;&gt; parser = DictionaryParser(description=&quot;Create a new user&quot;)```### Adding parametersAdding parameters to the parser is done by making calls to the `add_param` method. These calls tell the `DictionaryParser` how to handle the values passed in and turn them into the desired output, enforcing rules , changing types and transforming values based on the arguments passed to the `add_param` method.```pycon&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;name&quot;, str, required=True)&gt;&gt;&gt; parser.add_param(&quot;language&quot;, str, choices=[&quot;python&quot;, &quot;javascript&quot;, &quot;rust&quot;])&gt;&gt;&gt; parser.add_param(&quot;tags&quot;, str, action=lambda x: x.split(&quot;,&quot;))&gt;&gt;&gt; params = parser.parse_dict({&quot;name&quot;: &quot;FooBar&quot;, &quot;language&quot;: &quot;python&quot;, &quot;tags&quot;: &quot;foo,bar,baz&quot;})&gt;&gt;&gt; params.name'FooBar'&gt;&gt;&gt; params.language'python'&gt;&gt;&gt; params.tags['foo', 'bar', 'baz']&gt;&gt;&gt; params.to_dict(){'name': 'FooBar', 'language': 'python', 'tags': ['foo', 'bar', 'baz']}```If the parser does not find a value matching the name, the default value is `None`### Arguments available for `add_param````py3DictionaryParser.add_param(    name: str,    type_: Optional[Union[Type[str], Type[int], Type[float], Type[bool], Type[list], Type[dict], Type[set], Type[tuple]]] = None,    dest: Optional[str] = None,    required: Optional[bool] = False,    choices: Optional[Union[list, set, tuple]] = None,    action: Optional[Callable] = None,    description: Optional[str] = None,    default: Optional[Any] = None,    regex: Optional[str] = None) -&gt; None```- `name`: The parameter name (required - See note below)- `type_`: The common parameter type (The parser will attempt to convert the parameter value to the given type)- `dest`: The destination name of the parameter (See note below)- `required`: If `True`, enforce a value for the parameter must exists- `choices`: A list, set, or tuple of possible choices- `action`: A function to apply to the value (Applied after any type conversion)- `description`: A description of the parameter- `default`: A default value for the parameter if not found- `regex`: A regular expression to match against (Sets the parameter to `None` if the match is negative)&gt; Note - The `name` and `dest` parameters must comply with standard Python variable naming conventions (only start&gt; with a letter or underscore &amp; only contain alpha-numeric characters), not be a Python keyword and not start and end&gt; with a double underscore (dunder)### Parsing the dataAfter creating the parser and adding parameters to it, data can be parsed by calling the `parse_dict` method, passingin the data to be parsed. This returns a `NameSpace` object.```py3DictionaryParser.parse_dict(    data: Dict[str, Any],     strict: Optional[bool] = False,     action: Optional[Callable] = None) -&gt; NameSpace:```- `data`: A dictionary or dictionary-like object- `strict`: If `True`, raises an exception if any parameters not added to the parser are received- `action`: A function to apply to all parameters (after any type conversion and after action passed to `add_param`)### The `NameSpace` objectA `NameSpace` object is returned when calling `parse_dict` and contains the parsed data after applying your rulesdefined when adding arguments.Parameters can be accessed as attributes of the `NameSpace` using dot notation:```pycon&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;age&quot;, int, required=True)&gt;&gt;&gt; params = parser.parse_dict({&quot;age&quot;: 30})&gt;&gt;&gt; params.age30```A standard `AttributeError` will be raised if an attribute is accessed without being added to the parser:```pycon&gt;&gt;&gt; params.fooTraceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;AttributeError: 'NameSpace' object has no attribute 'foo'```if the `dest` parameter is supplied when adding a parameter in `add_param`, the value can only be accessed by using the`dest` value:```pycon&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;bar&quot;, str, dest=&quot;foo&quot;)&gt;&gt;&gt; params = parser.parse_dict({&quot;bar&quot;: &quot;bar&quot;})&gt;&gt;&gt; params.foo'bar'```The `NameSpace` object has the following available methods:#### `get````py3NameSpace.get(    name: str,     default: Optional[Any] = None) -&gt; Union[None, Any]:```Calling the `get` method on the `NameSpace` and passing in a key works in the same way as calling `get` on a dictionary, returning either the value for the parameter requested or `None` if the `NameSpace` does not have that attribute.An optional default value can be supplied using the `default` parameter to be returned if the attribute does not exist.```pycon&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;age&quot;, int, required=True)&gt;&gt;&gt; parser.add_param(&quot;weight&quot;, int)&gt;&gt;&gt; params = parser.parse_dict({&quot;age&quot;: 30, &quot;height&quot;: 1.9})&gt;&gt;&gt; params.weightNone&gt;&gt;&gt; params.get(&quot;age&quot;)30&gt;&gt;&gt; params.get(&quot;foo&quot;, 42)42```#### `to_dict````py3NameSpace.to_dict() -&gt; dict```Returns a dictionary of the parsed parameters.```pycon&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;one&quot;, str)&gt;&gt;&gt; parser.add_param(&quot;two&quot;, int)&gt;&gt;&gt; parser.add_param(&quot;three&quot;, list)&gt;&gt;&gt; params = parser.parse_dict({&quot;one&quot;: &quot;one&quot;, &quot;two&quot;: 2, &quot;three&quot;: [1, 2, 3]})&gt;&gt;&gt; params.to_dict(){'one': 'one', 'two': 2, 'three': [1, 2, 3]}````to_dict()` accepts an optional parameter `exclude`, a list of keys to exclude from the returned dictionary```pycon&gt;&gt;&gt; from dictparse import DictionaryParser&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;csrf_token&quot;, str, required=True)&gt;&gt;&gt; parser.add_param(&quot;name&quot;, str)&gt;&gt;&gt; parser.add_param(&quot;email&quot;, str)&gt;&gt;&gt; params = parser.parse_dict({&quot;csrf_token&quot;: &quot;xxyyzz112233&quot;, &quot;name&quot;: &quot;foo&quot;, &quot;email&quot;: &quot;foo@bar.com&quot;})&gt;&gt;&gt; params.to_dict(exclude=[&quot;csrf_token&quot;]){'name': 'foo', 'email': 'foo@bar.com'}```#### `get_param`Returns a `Param` object```pycon&gt;&gt;&gt; from dictparse import DictionaryParser&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;names&quot;, list, default=[])&gt;&gt;&gt; params = parser.parse_dict({&quot;names&quot;: [&quot;foo&quot;, &quot;bar&quot;]})&gt;&gt;&gt; names = params.get_param(&quot;names&quot;)&gt;&gt;&gt; names.name'names'&gt;&gt;&gt; names.value['foo', 'bar']&gt;&gt;&gt; names.default[]````Param` objects are hold all data associated with the parameter, as can be seen below in the `Param.__init__` method:```shell scriptclass Param(object):    def __init__(            self,            name: str,            type_: Optional[Union[Type[str], Type[int], Type[float], Type[bool], Type[list], Type[dict], Type[set], Type[tuple]]] = None,            dest: Optional[str] = None,            required: Optional[bool] = False,            choices: Optional[Union[list, set, tuple]] = None,            action: Optional[Callable] = None,            description: Optional[str] = None,            default: Optional[Any] = None,            regex: Optional[str] = None,            value: Optional[Any] = None    ):```&gt; Note - The `NameSpace` will be assigned the value for `dest` if supplied in `add_param````pycon&gt;&gt;&gt; from dictparse import DictionaryParser&gt;&gt;&gt; parser = DictionaryParser()&gt;&gt;&gt; parser.add_param(&quot;foo&quot;, str, dest=&quot;bar&quot;)&gt;&gt;&gt; params = parser.parse_dict({&quot;foo&quot;: 42})&gt;&gt;&gt; param = params.get_param(&quot;bar&quot;)&gt;&gt;&gt; param.name'foo'&gt;&gt;&gt; param.dest'bar'&gt;&gt;&gt; param.value'42'```### Flask exampleAn example of parsing JSON data sent in a POST request to a Flask route:```py3from app.users import create_userfrom flask import Flask, requestfrom respond import JSONResponsefrom dictparse import DictionaryParserdef create_app():    app = Flask(__name__)    @app.route(&quot;/&quot;, methods=[&quot;POST&quot;])    def post():        parser = DictionaryParser(description=&quot;Create a new user&quot;)        parser.add_param(&quot;name&quot;, str, required=True)        parser.add_param(&quot;age&quot;, int)        parser.add_param(&quot;password&quot;, str, required=True, action=lambda x: x.encode(&quot;utf-8&quot;))        parser.add_param(&quot;interests&quot;, list, action=lambda x: [i.strip() for i in x])        parser.add_param(&quot;level&quot;, float, default=1.5)        parser.add_param(&quot;stage&quot;, str, choices=[&quot;alpha&quot;, &quot;beta&quot;])        try:            params = parser.parse_dict(request.get_json())        except Exception as e:            return JSONResponse.bad_request(str(e))        user = create_user(            name=params.name,            age=params.age,            password=params.password,            interests=params.interests,            level=params.level,            stage=params.stage        )        return JSONResponse.created(user.to_dict())    return appif __name__ == &quot;__main__&quot;:    app = create_app()    app.run()```### Exception handlingExceptions will be raised in the following scenarios:##### `ParserTypeError`Raised when a parameter cannot be parsed to the type declared in `add_param````py3from dictparse import DictionaryParserfrom dictparse.exceptions import ParserTypeErrorparser = DictionaryParser()parser.add_param(&quot;age&quot;, int)try:    params = parser.parse_dict({&quot;age&quot;: &quot;thirty&quot;})except ParserTypeError as e:    print(e)  # Invalid value 'thirty' for parameter 'age', expected 'int' not 'str'````ParserTypeError` contains the following attributes:- `param`: The parameter name (`str`)- `value`: The parameter value (`Any`)- `expected`: The expected type (`type`)##### `ParserRequiredParameterError`Raised when `parse_dict` is called and a parameter is required, but not found```py3from dictparse import DictionaryParserfrom dictparse.exceptions import ParserRequiredParameterErrorparser = DictionaryParser()parser.add_param(&quot;name&quot;, str)parser.add_param(&quot;email&quot;, str, required=True)try:    params = parser.parse_dict({&quot;name&quot;: &quot;John Doe&quot;})except ParserRequiredParameterError as e:    print(e)  # Missing required parameter 'email'```- `ParserRequiredParameterError` has a single attribute `param`, the name of the parameter (str)##### `ParserInvalidChoiceError`Raised when `parse_dict` is called and parses a value not defined in the `choices` parameter of `add_param````py3from dictparse import DictionaryParserfrom dictparse.exceptions import ParserInvalidChoiceErrorparser = DictionaryParser()parser.add_param(&quot;name&quot;, str)parser.add_param(&quot;language&quot;, str, choices=[&quot;python&quot;, &quot;bash&quot;])try:    params = parser.parse_dict({&quot;name&quot;: &quot;John Doe&quot;, &quot;language&quot;: &quot;javascript&quot;})except ParserInvalidChoiceError as e:    print(e)  # Parameter 'language' must be one of '['python', 'bash']', not 'javascript'````ParserInvalidChoiceError` has the following 3 attributes:- `param`: The parameter name (str)- `value`: The parameter value (Any)- `choices`: The available choices added via `add_param` (list|set|tuple)##### `ParserInvalidParameterError`Raised calling `parse_dict` with `strict` set to `True`The `strict` parameter enforces the parser to only accept parameters that have been added to the parser```py3from dictparse import DictionaryParserfrom dictparse.exceptions import ParserInvalidParameterErrorparser = DictionaryParser()parser.add_param(&quot;name&quot;, str)parser.add_param(&quot;language&quot;, str, choices=[&quot;python&quot;, &quot;bash&quot;])try:    params = parser.parse_dict({&quot;name&quot;: &quot;John Doe&quot;, &quot;language&quot;: &quot;python&quot;, &quot;email&quot;: &quot;jdoe@gmail.com&quot;}, strict=True)except ParserInvalidParameterError as e:    print(e)  # Invalid parameter 'email'````ParserInvalidParameterError` has a single attribute `param`, the name of the parameter (str)### Other runtime considerations for `parse_dict`If an invalid data type for `data` is passed to `parse_dict` (such as a list or string), it raises a `ParserInvalidDataTypeError````py3from dictparse import DictionaryParserfrom dictparse.exceptions import ParserInvalidDataTypeErrorparser = DictionaryParser()parser.add_param(&quot;name&quot;, str)try:    params = parser.parse_dict([{&quot;name&quot;, &quot;John Doe&quot;}])except ParserInvalidDataTypeError as e:    print(e)  # Invalid type for 'data', must be a dict or dict-like object, not 'list'try:    params = parser.parse_dict(&quot;foo&quot;)except ParserInvalidDataTypeError as e:    print(e)  # Invalid type for 'data', must be a dict or dict-like object, not 'str'```### Tests &amp; coverageA test suite is available in the `tests` directory with 100% coverage (15/Sep/2020)```shell scriptName                      Stmts   Miss  Cover---------------------------------------------dictparse/__init__.py         1      0   100%dictparse/exceptions.py      37      0   100%dictparse/parser.py         106      0   100%tests/__init__.py             0      0   100%tests/test_parser.py        310      0   100%---------------------------------------------TOTAL                       454      0   100%```</longdescription>
</pkgmetadata>