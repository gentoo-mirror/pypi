<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># orquestra-vqa## What is it?`orquestra-vqa` is a library with core functionalities for implementing variational quantum algorithms developed by [Zapata](https://www.zapatacomputing.com) for our [Orquestra](https://www.zapatacomputing.com/orquestra/) platform.`orquestra-vqa` provides:-   interfaces for implementing ansatzes including qaoa and qcbm.-   optimizers and cost functions tailored to vqa-   misc functions such as grouping, qaoa interpolation, and estimators## InstallationEven though it's intended to be used with Orquestra, `orquestra-vqa` can be also used as a Python module.To install it you need to run `pip install orquestra-vqa` or `pip install .` from the main directory. This installation will install its dependencies: `orquestra-quantum`, `orquestra-opt` and `orquestra-cirq`.## UsageHere's an example of how to use methods from `orquestra-vqa` to create a cost function for qcbm and optimize it using scipy optimizer.```pythonfrom orquestra.vqa.cost_function.qcbm_cost_function import create_QCBM_cost_functionfrom orquestra.vqa.ansatz.qcbm import QCBMAnsatzfrom orquestra.opt.history.recorder import recorderfrom orquestra.quantum.symbolic_simulator import SymbolicSimulatorfrom orquestra.quantum.distributions import compute_mmdfrom orquestra.quantum.distributions import MeasurementOutcomeDistributionfrom orquestra.opt.optimizers.scipy_optimizer import ScipyOptimizerimport numpy as nptarget_distribution = MeasurementOutcomeDistribution(    {        &quot;0000&quot;: 1.0,        &quot;0001&quot;: 0.0,        &quot;0010&quot;: 0.0,        &quot;0011&quot;: 1.0,        &quot;0100&quot;: 0.0,        &quot;0101&quot;: 1.0,        &quot;0110&quot;: 0.0,        &quot;0111&quot;: 0.0,        &quot;1000&quot;: 0.0,        &quot;1001&quot;: 0.0,        &quot;1010&quot;: 1.0,        &quot;1011&quot;: 0.0,        &quot;1100&quot;: 1.0,        &quot;1101&quot;: 0.0,        &quot;1110&quot;: 0.0,        &quot;1111&quot;: 1.0,    })def orquestra_vqa_example_function():    ansatz = QCBMAnsatz(1, 4, &quot;all&quot;)    backend = SymbolicSimulator()    distance_measure_kwargs = {                &quot;distance_measure&quot;: compute_mmd,                &quot;distance_measure_parameters&quot;: {&quot;sigma&quot;: 1},            }    cost_function = create_QCBM_cost_function(        ansatz,        backend,        10,        **distance_measure_kwargs,        target_distribution=target_distribution    )    optimizer = ScipyOptimizer(method=&quot;L-BFGS-B&quot;)    initial_params = np.ones(ansatz.number_of_params) / 5    opt_results = optimizer.minimize(cost_function, initial_params)    return opt_resultsorquestra_vqa_example_function()```## Development and ContributionYou can find the development guidelines in the [`orquestra-quantum` repository](https://github.com/zapatacomputing/orquestra-quantum).</longdescription>
</pkgmetadata>