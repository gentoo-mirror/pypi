<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># country converterThe country converter (coco) is a Python package to convert and matchcountry names between different classifications and between differentnaming versions. Internally it uses regular expressions to match countrynames. Coco can also be used to build aggregation concordance matricesbetween different classification schemes.[![image](https://img.shields.io/pypi/v/country-converter.svg)](https://pypi.python.org/pypi/country_converter/)[![image](https://anaconda.org/conda-forge/country_converter/badges/version.svg)](https://anaconda.org/conda-forge/country_converter)[![image](https://zenodo.org/badge/DOI/10.5281/zenodo.838035.svg)](https://doi.org/10.5281/zenodo.838035)[![image](http://joss.theoj.org/papers/af694f2e5994b8aacbad119c4005e113/status.svg)](http://joss.theoj.org/papers/af694f2e5994b8aacbad119c4005e113)[![image](https://github.com/IndEcol/country_converter/workflows/build/badge.svg)](https://github.com/IndEcol/country_converter/actions)[![image](https://coveralls.io/repos/github/IndEcol/country_converter/badge.svg?branch=master&amp;service=github)](https://coveralls.io/github/IndEcol/country_converter?branch=master)[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![image](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)## MotivationTo date, there is no single standard of how to name or specifyindividual countries in a (meta) data description. While some datasources follow ISO 3166, this standard defines a two and a three lettercode in addition to a numerical classification. To further complicatethe matter, instead of using one of the existing standards, manydatabases use unstandardised country names to classify countries.The country converter (coco) automates the conversion from differentstandards and version of country names. Internally, coco is based on atable specifying the different ISO and UN standards per country togetherwith the official name and a regular expression which aim to match allEnglish versions of a specific country name. In addition, coco includesclassification based on UN-, EU-, OECD-membership, UN regionsspecifications, continents and various MRIO and IAM databases (see[Classification schemes](#classification-schemes) below).## InstallationCountry_converter is registered at PyPI. From the command line:    pip install country_converter --upgradeThe country converter is also available from the [condaforge](https://conda-forge.org/) and can be installed using conda with(if you don't have the conda_forge channel added to your conda configadd &quot;-c conda-forge&quot;, see [the install instructionshere](https://github.com/conda-forge/country_converter-feedstock)):    conda install country_converterAlternatively, the source code is available on[GitHub](https://github.com/IndEcol/country_converter).The package depends on [Pandas](http://pandas.pydata.org/); for testing[pytest](http://pytest.org/) is required. For further information onrunning the tests see [CONTRIBUTING.md](CONTRIBUTING.md).## Usage### Basic usage#### Use within PythonConvert various country names to some standard names:``` pythonimport country_converter as cocosome_names = ['United Rep. of Tanzania', 'DE', 'Cape Verde', '788', 'Burma', 'COG',              'Iran (Islamic Republic of)', 'Korea, Republic of',              &quot;Dem. People's Rep. of Korea&quot;]standard_names = coco.convert(names=some_names, to='name_short')print(standard_names)```Which results in \['Tanzania', 'Germany', 'Cabo Verde', 'Tunisia','Myanmar', 'Congo Republic', 'Iran', 'South Korea', 'North Korea'\]. Theinput format is determined automatically, based on ISO two letter, ISOthree letter, ISO numeric or regular expression matching. In case of anyambiguity, the source format can be specified with the parameter 'src'.In case of multiple conversion, better performance can be achieved byinstantiating a single CountryConverter object for all conversions:``` pythonimport country_converter as cococc = coco.CountryConverter()some_names = ['United Rep. of Tanzania', 'Cape Verde', 'Burma',              'Iran (Islamic Republic of)', 'Korea, Republic of',              &quot;Dem. People's Rep. of Korea&quot;]standard_names = cc.convert(names = some_names, to = 'name_short')UNmembership = cc.convert(names = some_names, to = 'UNmember')print(standard_names)print(UNmembership)```In order to more efficiently convert Pandas Series, the `pandas_convert()` method can be used. Theperformance gain is especially significant for large Series. For a series containing 1 million rowsa 4000x speedup can be achieved, compared to `convert()`.``` pythonimport country_converter as cocoimport pandas as pdcc = coco.CountryConverter()some_countries = pd.Series(['Australia', 'Belgium', 'Brazil', 'Bulgaria', 'Cyprus', 'Czech Republic',                  'Guatemala', 'Mexico', 'Honduras', 'Costa Rica', 'Colombia', 'Greece', 'Hungary',                  'India', 'Indonesia', 'Ireland', 'Italy', 'Japan', 'Latvia', 'Lithuania',                  'Luxembourg', 'Malta', 'Jamaica', 'Ireland', 'Turkey', 'United Kingdom',                  'United States'], name='country') iso3_codes = cc.pandas_convert(series=some_countries, to='ISO3')                  ```Convert between classification schemes:``` pythoniso3_codes = ['USA', 'VUT', 'TKL', 'AUT', 'XXX' ]iso2_codes = coco.convert(names=iso3_codes, to='ISO2')print(iso2_codes)```Which results in \['US', 'VU', 'TK', 'AT', 'not found'\]The not found indication can be specified (e.g. not_found = 'notthere'), if None is passed for 'not_found', the original entry getspassed through:``` pythoniso2_codes = coco.convert(names=iso3_codes, to='ISO2', not_found=None)print(iso2_codes)```results in \['US', 'VU', 'TK', 'AT', 'XXX'\]Internally the data is stored in a Pandas DataFrame, which can beaccessed directly. For example, this can be used to filter countries formembership organisations (per year). Note: for this, an instance ofCountryConverter is required.``` pythonimport country_converter as cococc = coco.CountryConverter()some_countries = ['Australia', 'Belgium', 'Brazil', 'Bulgaria', 'Cyprus', 'Czech Republic',                  'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary',                  'India', 'Indonesia', 'Ireland', 'Italy', 'Japan', 'Latvia', 'Lithuania',                  'Luxembourg', 'Malta', 'Romania', 'Russia', 'Turkey', 'United Kingdom',                  'United States']oecd_since_1995 = cc.data[(cc.data.OECD &gt;= 1995) &amp; cc.data.name_short.isin(some_countries)].name_shorteu_until_1980 = cc.data[(cc.data.EU &lt;= 1980) &amp; cc.data.name_short.isin(some_countries)].name_shortprint(oecd_since_1995)print(eu_until_1980)```All classifications can be directly accessed by:``` pythoncc.EU28cc.OECDcc.EU27as('ISO3')```and the classification schemes available:``` pythoncc.valid_class```There is also a methdod for only getting country classifications (thusomitting any grouping of countries):``` pythoncc.valid_country_classifications```If you rather need a dictionary describing the classification/membershipuse:``` pythonimport country_converter as cococc = coco.CountryConverter()cc.get_correspondence_dict('EXIO3', 'ISO3')```to also include countries not assigned within a specific classificationuse:``` pythoncc.get_correspondence_dict('EU27', 'ISO2', replace_nan='NonEU')```The regular expressions can also be used to match any list of countriesto any other. For example:``` pythonmatch_these = ['norway', 'united_states', 'china', 'taiwan']master_list = ['USA', 'The Swedish Kingdom', 'Norway is a Kingdom too',               'Peoples Republic of China', 'Republic of China' ]matching_dict = coco.match(match_these, master_list)```Country converter by default provides a warning to the python &lt;spanclass=&quot;title-ref&quot;&gt;logging&lt;/span&gt; logger if no match is found. Thefollowing example demonstrates how to configure the &lt;spanclass=&quot;title-ref&quot;&gt;coco&lt;/span&gt; logging behaviour.``` pythonimport loggingimport country_converter as cocologging.basicConfig(level=logging.INFO)coco.convert(&quot;asdf&quot;)# WARNING:country_converter.country_converter:asdf not found in regex# Out: 'not found'coco_logger = coco.logging.getLogger()coco_logger.setLevel(logging.CRITICAL)coco.convert(&quot;asdf&quot;)# Out: 'not found'```See the IPython Notebook([country_converter_examples.ipynb](http://nbviewer.ipython.org/github/IndEcol/country_converter/blob/master/doc/country_converter_examples.ipynb))for more information.#### Command line usageThe country converter package also provides a command line interfacecalled coco.Minimal example:    coco Cyprus DE Denmark Estonia 4 'United Kingdom' AUTConverts the given names to ISO3 codes based on matching the input toISO2, ISO3, ISOnumeric or regular expression matching. The list of namesmust be separated by spaces, country names consisting of multiple wordsmust be put in quotes ('').The input classification can be specified with '--src' or '-s' (or willbe determined automatically), the target classification with '--to' or'-t'.The default output is a space separated list, this can be changed bypassing a separator by '--output_sep' or '-o' (e.g -o '\|').Thus, to convert from ISO3 to UN number codes and receive the output ascomma separated list use:    coco AUT DEU VAT AUS -s ISO3 -t UNcode -o ', 'The command line tool also allows to specify the output for none foundentries, including passing them through to the output by passing None:    coco CAN Peru US Mexico Venezuela UK Arendelle --not_found=Noneand to specify an additional data file which will overwrite existingcountry matching    coco Congo --additional_data path/to/datafile.csvSee&lt;https://github.com/IndEcol/country_converter/tree/master/tests/custom_data_example.txt&gt;for an example of an additional datafile.The flags --UNmember_only (-u) and --include_obsolete (-i) restrict thesearch to UN member states only or extend it to also include currentlyobsolete countries. For example, the [NetherlandsAntilles](https://en.wikipedia.org/wiki/Netherlands_Antilles) weredissolved in 2010.Thus:    coco &quot;Netherlands Antilles&quot;results in &quot;not found&quot;. The search, however, can be extended to recentlydissolved countries by:    coco &quot;Netherlands Antilles&quot; -iwhich results in 'ANT'.In addition to the countries, the coco command line tool also acceptsvarious country classifications (EXIO1, EXIO2, EXIO3, WIOD, Eora,MESSAGE, OECD, EU27, EU28, UN, obsolete, Cecilia2050, BRIC, APEC, BASIC,CIS, G7, G20). One of these can be passed by    coco G20which lists all countries in that classification.For the classifications covering almost all countries (MRIO and IAMclassifications)    coco EXIO3lists the unique classification names. When passing a --to parameter, asimplified correspondence of the chosen classification is printed:    coco EXIO3 --to ISO3For further information call the help by    coco -h#### Use in MatlabNewer (tested in 2016a) versions of Matlab allow to directly call Pythonfunctions and libraries. This requires a Python version \&gt;= 3.4installed in the system path (e.g. through Anaconda).To test, try this in Matlab:``` matlabpy.print(py.sys.version)```If this works, you can also use coco after installing it through pip (atthe windows commandline - see the installing instruction above):``` matlabpip install country_converter --upgrade```And in matlab:``` matlabcoco = py.country_converter.CountryConverter()countries = {'The Swedish Kingdom', 'Norway is a Kingdom too', 'Peoples Republic of China', 'Republic of China'};ISO2_pythontype = coco.convert(countries, pyargs('to', 'ISO2'));ISO2_cellarray = cellfun(@char,cell(ISO2_pythontype),'UniformOutput',false);```Alternatively, as a long oneliner:``` matlabshort_names = cellfun(@char, cell(py.country_converter.convert({56, 276}, pyargs('src', 'UNcode', 'to', 'name_short'))), 'UniformOutput',false);```All properties of coco as explained above are also available in Matlab:``` matlabcoco = py.country_converter.CountryConverter();coco.EU27EU27ISO3 = coco.EU27as('ISO3');```These functions return a Pandas DataFrame. The underlying values can beaccess with .values (e.g.``` matlabEU27ISO3.values```I leave it to professional Matlab users to figure out how to furtherprocess them.See also IPython Notebook([country_converter_examples.ipynb](http://nbviewer.ipython.org/github/IndEcol/country_converter/blob/master/doc/country_converter_examples.ipynb))for more information - all functions available in Python (for examplepassing additional data files, specifying the output in case of missingdata) work also in Matlab by passing arguments through the pyargsfunction.### Building concordances for country aggregationCoco provides a function for building concordance vectors, matrices anddictionaries between different classifications. This can be used inpython as well as in matlab. For further information see([country_converter_aggregation_helper.ipynb](http://nbviewer.ipython.org/github/IndEcol/country_converter/blob/master/doc/country_converter_aggregation_helper.ipynb))## Classification schemesCurrently the following classification schemes are available (see alsoData sources below for further information):1.  ISO2 (ISO 3166-1 alpha-2)2.  ISO3 (ISO 3166-1 alpha-3)3.  ISO - numeric (ISO 3166-1 numeric)4.  UN numeric code (M.49 - follows to a large extend ISO-numeric)5.  A standard or short name6.  The &quot;official&quot; name7.  Continent8.  UN region9.  [EXIOBASE](http://exiobase.eu/) 1 classification10. [EXIOBASE](http://exiobase.eu/) 2 classification11. [EXIOBASE](http://exiobase.eu/) 3 classification12. [WIOD](http://www.wiod.org/home) classification13. [Eora](http://www.worldmrio.com/)14. [OECD](http://www.oecd.org/about/membersandpartners/list-oecd-member-countries.htm)    membership (per year)15. [MESSAGE](http://www.iiasa.ac.at/web/home/research/researchPrograms/Energy/MESSAGE-model-regions.en.html)    11-region classification16. [IMAGE](https://models.pbl.nl/image/index.php/Welcome_to_IMAGE_3.0_Documentation)17. [REMIND](https://www.pik-potsdam.de/en/institute/departments/transformation-pathways/models/remind)18. [UN](http://www.un.org/en/members/) membership (per year)19. [EU](https://ec.europa.eu/eurostat/statistics-explained/index.php/Glossary:EU_enlargements)    membership (including EU12, EU15, EU25, EU27, EU27_2007, EU28)20. [EEA](https://ec.europa.eu/eurostat/statistics-explained/index.php/Glossary:European_Economic_Area_(EEA))    membership21. [Schengen](https://en.wikipedia.org/wiki/Schengen_Area) region22. [Cecilia](https://cecilia2050.eu/system/files/De%20Koning%20et%20al.%20%282014%29_Scenarios%20for%202050_0.pdf)    2050 classification23. [APEC](https://en.wikipedia.org/wiki/Asia-Pacific_Economic_Cooperation)24. [BRIC](https://en.wikipedia.org/wiki/BRIC)25. [BASIC](https://en.wikipedia.org/wiki/BASIC_countries)26. [CIS](https://en.wikipedia.org/wiki/Commonwealth_of_Independent_States)    (as by 2019, excl. Turkmenistan)27. [G7](https://en.wikipedia.org/wiki/Group_of_Seven)28. [G20](https://en.wikipedia.org/wiki/G20) (listing all EU member    states as individual members)29. [FAOcode](http://www.fao.org/faostat/en/#definitions) (numeric)30. [GBDcode](http://ghdx.healthdata.org/) (numeric - Global Burden of    Disease country codes)31. [IEA](https://www.iea.org/countries) (World Energy Balances 2021)32. [DACcode](https://www.oecd.org/dac/financing-sustainable-development/development-finance-standards/dacandcrscodelists.htm)    (numeric - OECD Development Assistance Committee)33. [ccTLD](https://en.wikipedia.org/wiki/Country_code_top-level_domain) - country code top-level domains34. [GWcode](https://www.tandfonline.com/doi/abs/10.1080/03050629908434958) - Gledisch &amp; Ward numerical codes as published in https://www.andybeger.com/states/articles/statelists.htmlCoco contains official recognised codes as well as non-standard codesfor disputed or dissolved countries. To restrict the set to only theofficial recognized UN members or include obsolete countries, pass``` pythonimport country_converter as cococc = coco.CountryConverter()cc_UN = coco.CountryConverter(only_UNmember=True)cc_all = coco.CountryConverter(include_obsolete=True)cc.convert(['PSE', 'XKX', 'EAZ', 'FRA'], to='name_short')cc_UN.convert(['PSE', 'XKX', 'EAZ', 'FRA'], to='name_short')cc_all.convert(['PSE', 'XKX', 'EAZ', 'FRA'], to='name_short')```cc results in \['Palestine', 'Kosovo', 'not found', 'France'\], whereascc_UN converts to \['not found', 'not found', 'not found', 'France'\]and cc_all converts to \['Palestine', 'Kosovo', 'Zanzibar', 'France'\]Note that the underlying dataframe is available at the attribute .data(e.g. cc_all.data).## Data sources and further readingMost of the underlying data can be found in Wikipedia, the pagedescribing [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) is agood starting point. UN regions/codes are given on the United NationStatistical Division([unstats](http://unstats.un.org/unsd/methods/m49/m49regin.htm))webpage. The differences between the ISO numeric and UN (M.49) codes are[also explained at wikipedia](https://en.wikipedia.org/wiki/UN_M.49).[EXIOBASE](http://exiobase.eu/), [WIOD](http://www.wiod.org/home) and[Eora](http://www.worldmrio.com/) classification were extracted from therespective databases. For [Eora](http://www.worldmrio.com/), the namesare based on the 'Country names' csv file provided on the webpage, butupdated for different names used in the Eora26 database. The MESSAGEclassification follows the 11-region aggregation given in the[MESSAGE](http://www.iiasa.ac.at/web/home/research/researchPrograms/Energy/MESSAGE-model-regions.en.html)model regions description. The[IMAGE](https://models.pbl.nl/image/index.php/Welcome_to_IMAGE_3.0_Documentation)classification is based on the &quot;[region classificationmap](https://models.pbl.nl/image/index.php/Region_classification_map)&quot;,for[REMIND](https://www.pik-potsdam.de/en/institute/departments/transformation-pathways/models/remind)we received a country mapping from the model developers.The membership of[OECD](http://www.oecd.org/about/membersandpartners/list-oecd-member-countries.htm)and [UN](http://www.un.org/en/members/) can be found at the membershiporganisations' webpages, information about obsolete country codes on the[Statoids](http://www.statoids.com/w3166his.html) webpage.The situation for the[EU](https://ec.europa.eu/eurostat/statistics-explained/index.php/Glossary:EU_enlargements)got complicated due to the Brexit process. For the naming, coco followsthe [Eurostatglossary](https://ec.europa.eu/eurostat/statistics-explained/index.php/Glossary:EU_enlargements),thus EU27 refers to the EU without UK, whereas EU27_2007 refers to theEU without Croatia (the status after the 2007 enlargement). The shortcutEU always links to the most recent classification. The[EEA](https://ec.europa.eu/eurostat/statistics-explained/index.php/Glossary:European_Economic_Area_(EEA))agreements for the UK ended by 2021-01-01 (which also affects Guernsey, Isle of Man, Jersey and Gibraltar). Switzerland is not part of the EEA but member of the single market.The Global Burden of Disease country codes were extracted form the [GBDcode book availablehere.](https://ghdx.healthdata.org/sites/default/files/ihme_query_tool/IHME_GBD_2019_CODEBOOK.zip)## Communication, issues, bugs and enhancementsPlease use the issue tracker for documenting bugs, proposingenhancements and all other communication related to coco.You can follow me on [mastodon - @kst@qoto.org](https://qoto.org/@kst) and [twitter](https://twitter.com/kst_stadler) to getthe latest news about all my open-source and research projects (andoccasionally some random retweets/toots).## ContributingWant to contribute? Great! Please check[CONTRIBUTING.md](CONTRIBUTING.md) if you want to help to improve cocoand for some pointer for how to add classifications.## Related softwareThe package [pycountry](https://pypi.python.org/pypi/pycountry) providesaccess to the official ISO databases for historic countries, countrysubdivisions, languages and currencies. In case you need to convertnon-English country names,[countrynames](https://github.com/occrp/countrynames) includes anextensive database of country names in different languages and functionsto convert them to the different ISO 3166 standards.[Python-iso3166](https://github.com/deactivated/python-iso3166) focuseson conversion between the two-letter, three-letter and three-digit codesdefined in the ISO 3166 standard.If you are using R, you should have a look at[countrycode](https://github.com/vincentarelbundock/countrycode).## Citing the country converterVersion 0.5 of the country converter was published in the [Journal ofOpen Source Software](http://joss.theoj.org/). To cite the countryconverter in publication please use:Stadler, K. (2017). The country converter coco - a Python package forconverting country names between different classification schemes. TheJournal of Open Source Software. doi:[10.21105/joss.00332](http://dx.doi.org/10.21105/joss.00332)For the full bibtex key see [CITATION](CITATION)## AcknowledgementsThis package was inspired by (and the regular expression are mostlybased on) the R-package[countrycode](https://github.com/vincentarelbundock/countrycode) by[Vincent Arel-Bundock](http://arelbundock.com/) and his (defunct) portto Python (pycountrycode). Many thanks to [RobertGieseke](https://github.com/rgieseke) for the review of the source codeand paper for the publication in the [Journal of Open SourceSoftware](http://joss.theoj.org/).</longdescription>
</pkgmetadata>