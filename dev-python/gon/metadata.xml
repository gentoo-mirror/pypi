<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>gon===[![](https://github.com/lycantropos/gon/workflows/CI/badge.svg)](https://github.com/lycantropos/gon/actions/workflows/ci.yml &quot;Github Actions&quot;)[![](https://codecov.io/gh/lycantropos/gon/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/gon &quot;Codecov&quot;)[![](https://readthedocs.org/projects/gon/badge/?version=latest)](https://gon.readthedocs.io/en/latest &quot;Documentation&quot;)[![](https://img.shields.io/github/license/lycantropos/gon.svg)](https://github.com/lycantropos/gon/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/gon.svg)](https://badge.fury.io/py/gon &quot;PyPI&quot;)Summary-------`gon` is a pure Python library that provides supportfor planar geometry objects built from discrete points,finite number of straight line segments (e.g. polylines)and areas bound by closed polylines (e.g. polygons).Main features are- convenience: all geometric objectsare [immutable](https://docs.python.org/3/glossary.html#term-immutable), [hashable](https://docs.python.org/3/glossary.html#term-hashable)and implement [set-like](https://docs.python.org/3/library/collections.abc.html#collections.abc.Set) interface,i.e. support containment, equality, &quot;is-subset&quot; testsand boolean set operations (e.g. finding intersection).- correctness: all calculations are robust for floating point numbers&amp; precise for integral numbers (like `int`),each operation corresponds to its mathematical definitionand property-based tested.- efficiency: all operations are efficientin terms of both time &amp; memory complexity,upper bound for expected time complexity is `O(n * log n)`,for memory complexity is `O(n)`.---In what follows `python` is an alias for `python3.7` or `pypy3.7`or any later version (`python3.7`, `pypy3.8` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository```bashpython -m pip install --upgrade gon```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/gon.gitcd gon```Install dependencies```bashpython -m pip install -r requirements.txt```Install```bashpython setup.py install```Usage-----```python&gt;&gt;&gt; from gon.base import EMPTY, Angle, Contour, Point, Polygon&gt;&gt;&gt; square = Polygon(Contour([Point(0, 0), Point(4, 0), Point(4, 4),...                           Point(0, 4)]))&gt;&gt;&gt; square == squareTrue&gt;&gt;&gt; square &gt;= squareTrue&gt;&gt;&gt; square &lt;= squareTrue&gt;&gt;&gt; square &lt; squareFalse&gt;&gt;&gt; square &gt; squareFalse&gt;&gt;&gt; square &amp; square == squareTrue&gt;&gt;&gt; square | square == squareTrue&gt;&gt;&gt; square - square is EMPTYTrue&gt;&gt;&gt; square ^ square is EMPTYTrue&gt;&gt;&gt; Point(0, 0) in squareTrue&gt;&gt;&gt; square.index()&gt;&gt;&gt; Point(0, 0) in squareTrue&gt;&gt;&gt; len(square.border.vertices) == 4True&gt;&gt;&gt; len(square.holes) == 0True&gt;&gt;&gt; square.is_convexTrue&gt;&gt;&gt; square.convex_hull == squareTrue&gt;&gt;&gt; square.area == 16True&gt;&gt;&gt; square.perimeter == 16True&gt;&gt;&gt; square.centroid == Point(2, 2)True&gt;&gt;&gt; square.distance_to(Point(2, 2)) == 0True&gt;&gt;&gt; square.distance_to(Point(7, 8)) == 5True&gt;&gt;&gt; (square.rotate(Angle(0, 1), Point(4, 4))...  == Polygon(Contour([Point(8, 0), Point(8, 4), Point(4, 4), Point(4, 0)])))True&gt;&gt;&gt; (square.scale(1, 2)...  == Polygon(Contour([Point(0, 0), Point(4, 0), Point(4, 8), Point(0, 8)])))True&gt;&gt;&gt; (square.translate(1, 2)...  == Polygon(Contour([Point(1, 2), Point(5, 2), Point(5, 6), Point(1, 6)])))True&gt;&gt;&gt; (square.triangulate().triangles()...  == [Contour([Point(0, 4), Point(4, 0), Point(4, 4)]),...      Contour([Point(0, 0), Point(4, 0), Point(0, 4)])])True```Development-----------### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies```bashpython -m pip install -r requirements-tests.txt```Plain```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script:- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script:- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>