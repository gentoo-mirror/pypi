<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Scientific PlotsCreate and save plots in scientific style## Table of Contents[[_TOC_]]## OverviewThis python module includes useful methods and definitions for various pythonprojects.The focus lies of on the automatic creation of a set of plots, which aredesigned to be used in scientific journals, dissertations and presentations.The most important components are the definitions of types compatiblefor numpy, located in `types_.py`, and the typing stubs in `stubs/`. Thesetyping stubs are also distributed in this package.## PlottingThe easiest way to implement the plotting features provided by this library, isto use one of the predefined function in `scientific_plots.default_plots`.Alternatively, any plotting functions can be decorated by using the`apply_styles` decorator in `scientific_plots.plot_settings`.For example, this could look like this:```import matplotlib.pyplot as pltfrom scientific_plots.plot_settings import apply_styles@apply_stylesdef plot_something() -&gt; None:    &quot;&quot;&quot;Example function.&quot;&quot;&quot;    plt.plot(...)    ...    plt.savefig(&quot;subfolder/your_plot_name.pdf&quot;)```The script will create a bunch of plots and place them in the given locationnext to your given path. Thus, it is advisable to create a different subfolderfor new plots.For three-dimensional plots, it is recommended to set the optional argument*three_d* of the decorator to true:```@apply_styles(three_d=True)def plot_function():    ...```Alternatively, this package provides default plot settings in the submodule*default_plots*. The provided function apply a default design, which shouldlook good in most situations.```from scientific_plots.default_plots import plotplot(x, y, &quot;x_label&quot;, &quot;y_label&quot;, &quot;subfolder/filename.pdf&quot;)```Besides this simple plot, this library also provides the following defaultplots:`plot_fit`: Plot data and a fit of this data.```def fit_function(x):    ...    # fit some data    ...    return yplot_fit(    x, y, fit_function, &quot;x_label&quot;, &quot;y_label&quot;,    &quot;subfolder&quot;/&quot;filename.pdf&quot;)`````two_plots`: Plot two curves sharing a single y-axis.```two_plots(    x1, y1, &quot;label1&quot;,    x2, y2, &quot;label2&quot;,    &quot;xlabel&quot;, &quot;ylabel&quot;, &quot;subfolder&quot;/&quot;filename&quot;.pdf)````two_axis_plots`: Plot two curves with two y-axis in a single graph.```two_axis_plots(    x1, y1, &quot;label1&quot;,    x2, y2, &quot;label2&quot;,    &quot;xlabel&quot;, &quot;ylabel1&quot;, &quot;ylabel2&quot;,    &quot;subfolder&quot;/&quot;filename&quot;.pdf)```All of those functions have the following command-line arguments:- `logscale`: Plot the data double logarithmic.- `single_log`: Plot the x-axis logarithmic.- `single_log_y`: Plot the y-axis logarithmic.- `xlim`: Set the limits on the x-axis manually.- `ylim`: Set the limits on the y-axis manually.## TypesAdditional Vector like types for numpy-arrays are provided in`scientifc_plots.types_`.  These types can be used for static type checkingusing mypy.## Typing StubsAddtional typing stubs for scipy, matplotlib and numba are provided andinstalled by this package. These packages do not provide type hints on theirown.</longdescription>
</pkgmetadata>