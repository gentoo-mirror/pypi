<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ViSearch Python SDK===================.. image:: https://travis-ci.org/visenze/visearch-sdk-python.svg        :target: https://travis-ci.org/visenze/visearch-sdk-python.. image:: https://img.shields.io/pypi/v/visearch.svg        :target: https://pypi.python.org/pypi/visearch.. contents::1. Overview-----------ViSearch is an API that provides accurate, reliable and scalable imagesearch. ViSearch API provides endpoints that let developers index theirimages and perform image searches efficiently. ViSearch API can beeasily integrated into your web and mobile applications. More detailsabout ViSearch API can be found in the`documentation &lt;http://www.visenze.com/docs/overview/introduction&gt;`__.The ViSearch Python SDK is an open source software for easy integrationof ViSearch Search API with your application server. It provides threesearch methods based on the ViSearch Search API - pre-indexed search,color search and upload search. The ViSearch Python SDK also provides aneasy integration of the ViSearch Data API which includes data insertingand data removing. For source code and references, visit the github`repository &lt;https://github.com/visenze/visearch-sdk-python&gt;`__.* Supported on Python 2.7+ and 3.3+2. Setup--------To install visearch, simply:::    $ pip install visearch3. Initialization-----------------To start using ViSearch API, initialize ViSearch client with yourViSearch API credentials. Your credentials can be found in `ViSearchDashboard &lt;https://dashboard.visenze.com&gt;`__:.. code:: python    from visearch import client    access_key = 'your app access key'    secret_key = 'your app secret key'    api = client.ViSearchAPI(access_key, secret_key)4. Indexing Images------------------4.1 Indexing Your First Images~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Built for scalability, ViSearch API enables fast and accurate searcheson high volume of images. Before making your first image search, youneed to prepare a list of images and index them into ViSearch by callingthe /insert endpoint. Each image must have a unique identifier and apublicly downloadable URL. ViSearch will parallelly fetch your imagesfrom the given URLs, and index the downloaded for searching. After theimage indexes are built, you can start searching for `similar imagesusing the uniqueidentifier &lt;https://github.com/visenze/visearch-sdk-python#pre-indexed-search&gt;`__,`using acolor &lt;https://github.com/visenze/visearch-sdk-python#color-search&gt;`__,or `using anotherimage &lt;https://github.com/visenze/visearch-sdk-python#upload-search&gt;`__.To index your images, prepare a list of images and call the /insertendpoint... code:: python    # the list of images to be indexed    # the unique identifier of the image 'im_name', the publicly downloadable url of the image 'im_url'    images = [        {'im_name': 'red_dress', 'im_url': 'http://mydomain.com/images/red_dress.jpg'},        {'im_name': 'blue_dress', 'im_url': 'http://mydomain.com/images/blue_dress.jpg'}    ]    # calls the /insert endpoint to index the image    response = api.insert(images)Each ``insert`` call to ViSearch accepts a maximum of 100 images. We recommend indexing your images in batches of 100 for optimized image indexing speed.4.2 Image with Metadata~~~~~~~~~~~~~~~~~~~~~~~Images usually come with descriptive text or numeric values as metadata,for example: title, description, category, brand, and price of an onlineshop listing image caption, tags, geo-coordinates of a photo.ViSearch combines the power of text search with image search. You canindex your images with metadata, and leverage text based query andfiltering for even more accurate image search results, for example:limit results within a price range limit results to certain tags, andsome keywords in the captions For detailed reference for resultfiltering, see `Advanced SearchParameters &lt;https://github.com/visenze/visearch-sdk-python#advanced-search-parameters&gt;`__.To index your images with metadata, first you need to configure themetadata schema in ViSearch Dashboard (link to). You can add and removemetadata keys, and modify the metadata types to suit your needs.Let's assume you have the following metadata schema configured:+---------------+----------+--------------+| Name          | Type     | Searchable   |+===============+==========+==============+| title         | string   | true         |+---------------+----------+--------------+| description   | text     | true         |+---------------+----------+--------------+| price         | float    | true         |+---------------+----------+--------------+Then index your image with title, decription, and price:.. code:: python    images = [{               'im_name': 'blue_dress',               'im_url': 'http://mydomain.com/images/blue_dress.jpg',               'title': 'Blue Dress',               'description': 'A blue dress',               'price': 100.0              },              ...             ]    # calls the /insert endpoint to index the image    response = api.insert(images)Metadata keys are case-sensitive, and metadata without a matching key inthe schema will not be processed by ViSearch. Make sure to configuremetadata schema for all of your metadata keys.4.3 Updating Images~~~~~~~~~~~~~~~~~~~If you need to update an image or its metadata, call the ``insert``endpoint with the same unique identifier of the image. ViSearch willfetch the image from the updated URL and index the new image, andreplace the metadata of the image if provided... code:: python    images = [{               'im_name': 'blue_dress',               'im_url': 'http://mydomain.com/images/blue_dress.jpg',               'title': 'Blue Dress',               'description': 'A blue dress',               'price': 100.0              },              ...             ]    # calls the /update endpoint to index the image    response = api.update(images)    Each ``insert`` call to ViSearch accepts a maximum of 100 images. We    recommend updating your images in batches of 100 for optimized image    indexing speed.4.4 Removing Images~~~~~~~~~~~~~~~~~~~In case you decide to remove some of the indexed images, you can callthe /remove endpoint with the list of unique identifier of the indexedimages. ViSearch will then remove the specified images from the index.You will not be able to perform pre-indexed search on this image, andthe image will not be found in any search result... code:: python    image_names = [&quot;red_dress&quot;, &quot;blue_dress&quot;]    response = api.remove(image_names)We recommend calling ``remove`` in batches of 100 images for optimized image indexing speed.4.5 Check Indexing Status~~~~~~~~~~~~~~~~~~~~~~~~~~The fetching and indexing process take time, and you may only search forimages after their indexs are built. If you want to keep track of thisprocess, you can call the ``insert_status`` endpoint with the image'stransaction identifier... code:: python    import time    import math    # the list of images to be indexed    # the unique identifier of the image 'im_name', the publicly downloadable url of the image 'im_url'    images = [        {'im_name': 'pic5', 'im_url': 'http://mydomain.com/images/vintage_wingtips.jpg'},    ]    response = api.insert(images)    trans_id = response['trans_id']    percent = 0    while (percent &lt; 100):        time.sleep(1)        status_response = api.insert_status(trans_id)        if 'result' in status_response and len(status_response['result']) &gt; 0:            percent = status_response['result'][0]['processed_percent']            print '{}% complete'.format(percent)    page_index = 1    error_per_page = 10    fail_count = None    status_response = api.insert_status(trans_id, page_index, error_per_page)    if 'result' in status_response and len(status_response['result']) &gt; 0:        result_data = status_response['result'][0]        print result_data        fail_count = result_data['fail_count']        print 'Start time: {}'.format(result_data['start_time'])        print 'Update time: {}'.format(result_data['update_time'])        print &quot;{} insertions with {} succeed and {} fail&quot;.format(            result_data['total'],            result_data['success_count'],            result_data['fail_count']            )    if fail_count &gt; 0:        result_data = status_response['result'][0]        error_limit = result_data['error_limit']        total_page_number = int(math.ceil(float(fail_count) / error_limit))        for i in range(total_page_number):            page_index = i + 1            status_response = api.insert_status(trans_id, page_index, error_per_page)            error_list = status_response['result'][0]['error_list']            for error in error_list:                print &quot;failure at page {} with error message {}&quot;.format(                    page_index,                    error)5. Solutions-------------------5.1 Find Similar~~~~~~~~~~~~~~~~~~~~~~**Find similar** solution is to search for visually similar images in the image database giving an indexed image’s unique identifier (im_name)... code:: python    response = api.search(&quot;blue_dress&quot;)5.2 You May Also Like~~~~~~~~~~~~~~~~~~~~~~**You may also like** solution is to provide a list of recommended items fromthe indexed image database based on customizable rules giving an indexedimage’s unique identifier (im_name).5.3 Search by Image~~~~~~~~~~~~~~~~~**Search by image** solution is to search similar images by uploading an imageor providing an image url.* Using an image from a local file path:.. code:: python    image_path = 'blue_dress.jpg'    response = api.uploadsearch(image_path=image_path)* Using image url:.. code:: python    image_url = 'http://mydomain.com/images/red_dress.jpg'    response = api.uploadsearch(image_url=image_url)5.3.1 Selection Box^^^^^^^^^^^^^^^^^^^If the object you wish to search for takes up only a small portion ofyour image, or other irrelevant objects exists in the same image,chances are the search result could become inaccurate. Use the Boxparameter to refine the search area of the image to improve accuracy.Noted that the box coordinated is setted with respect to the originalsize of the image passed, it will be automatically scaled to fit theresized image for uploading:.. code:: python    image_url = 'http://mydomain.com/images/red_dress.jpg'    box = (0,0,10,10)    response = api.uploadsearch(image_url=image_url, box=box)5.3.2 Resizing Settings^^^^^^^^^^^^^^^^^^^^^^^When performing upload search, you might experience increasing searchlatency with increasing image file sizes. This is due to the increasedtime transferring your images to the ViSearch server, and the increasedtime for processing larger image files in ViSearch.To reduce upload search latency, by default the ``uploadSearch`` methodmakes a copy of your image file if both of the image dimensions exceed512 pixels, and resizes the copy to dimensions not exceeding 512x512pixels. This is the optimized size to lower search latency while notsacrificing search accuracy for general use cases:.. code:: python    # client.uploadSearch(params) is equivalent to using STANDARD resize settings, 512x512 and jpeg 75 quality    image_path = 'blue_dress.jpg'    response = api.uploadsearch(image_path=image_path, resize='STANDARD')If your image contains fine details such as textile patterns andtextures, use the HIGH resize settings to get better search results:.. code:: python    # for images with fine details, use HIGH resize settings 1024x1024 and jpeg 75 quality    image_path = 'blue_dress.jpg'    response = api.uploadsearch(image_path=image_path, resize='HIGH')Or provide customized resize settings:.. code:: python    # using customized resize settings 800x800 and jpeg 80 quality    image_path = 'blue_dress.jpg'    response = api.uploadsearch(image_path=image_path, resize=(800, 800, 80))5.4 Search by Color~~~~~~~~~~~~~~~~**Search by color** solution is to search images with similar color byproviding a color code. The color code should be in Hexadecimal and passedto the colorsearch service... code:: python    response = api.colorsearch(&quot;fa4d4d&quot;)6. Search Results-----------------ViSearch returns a maximum number of 1000 most relevant image searchresults. You can provide pagination parameters to control the paging ofthe image search results.Pagination parameters:+---------+-----------+----------------------------------------------------------------------------------------------------+| Name    | Type      | Description                                                                                        |+=========+===========+====================================================================================================+| page    | Integer   | Optional parameter to specify the page of results. The first page of result is 1. Defaults to 1.   |+---------+-----------+----------------------------------------------------------------------------------------------------+| limit   | Integer   | Optional parameter to specify the result per page limit. Defaults to 10.                           |+---------+-----------+----------------------------------------------------------------------------------------------------+.. code:: python    page = 1    limit = 25    response = api.uploadsearch(image_url=image_url, page=page, limit=limit)7. Advanced Search Parameters-----------------------------7.1 Retrieving Metadata~~~~~~~~~~~~~~~~~~~~~~~To retrieve metadata of your image results, provide the list (or tuple)of metadata keys for the metadata value to be returned in the ``fl``(field list) property:.. code:: python    fl = [&quot;price&quot;, &quot;brand&quot;, &quot;title&quot;, &quot;im_url&quot;]  #, or fl = (&quot;price&quot;, &quot;brand&quot;, &quot;title&quot;, &quot;im_url&quot;)    response = api.uploadsearch(image_url=image_url, fl=fl)Only metadata of type string, int, and float can be retrieved from ViSearch. Metadata of type text is not available for retrieval.7.2 Filtering Results~~~~~~~~~~~~~~~~~~~~~To filter search results based on metadata values, provide a dict ofmetadata key to filter value in the ``fq`` (filter query) property:.. code:: python    fq = {&quot;im_cate&quot;: &quot;bags&quot;, &quot;price&quot;: &quot;10,199&quot;}    response = api.uploadsearch(image_url=image_url, fq=fq)Querying syntax for each metadata type is listed in the following table:=======    ======Type        FQ=======    ======string      Metadata value must be exactly matched with the query value, e.g. &quot;Vintage Wingtips&quot; would not match &quot;vintage wingtips&quot; or &quot;vintage&quot;text        Metadata value will be indexed using full-text-search engine and supports fuzzy text matching, e.g. &quot;A pair of high quality leather wingtips&quot; would match any word in the phraseint         Metadata value can be either: (1) exactly matched with the query value; (2) matched with a ranged query minValue,maxValue, e.g. int value 1, 99, and 199 would match ranged query 0,199 but would not match ranged query 200,300float       Metadata value can be either: (1) exactly matched with the query value; (2) matched with a ranged query minValue,maxValue, e.g. float value 1.0, 99.99, and 199.99 would match ranged query 0.0,199.99 but would not match ranged query 200.0,300.0=======    ======7.3 Result Score~~~~~~~~~~~~~~~~ViSearch image search results are ranked in descending order i.e. fromthe highest scores to the lowest, ranging from 1.0 to 0.0. By default,the score for each image result is not returned. You can turn on the**boolean** ``score`` property to retrieve the scores for each imageresult:.. code:: python    score = True    response = api.uploadsearch(image_url=image_url, score=score)If you need to restrict search results from a minimum score to a maximumscore, specify the ``score_min`` and/or ``score_max`` parameters:+--------------+---------+--------------------------------------------------------+| Name         | Type    | Description                                            |+==============+=========+========================================================+| score\_min   | Float   | Minimum score for the image results. Default is 0.0.   |+--------------+---------+--------------------------------------------------------+| score\_max   | Float   | Maximum score for the image results. Default is 1.0.   |+--------------+---------+--------------------------------------------------------+.. code:: python    score_min = 0.5    score_max = 0.8    response = api.uploadsearch(image_url=image_url, score_max=score_max, score_min=score_min)8. Declaration---------------  The image upload.jpg included in the SDK is downloaded from   http://pixabay.com/en/boots-shoes-pants-folded-fashion-690502/Release History---------------0.5.2 (2022-11-22)++++++++++++++++++**Features**- visearch.bind supports post json data0.5.1 (2020-04-20)++++++++++++++++++**Features**- Change default timeout form 60s to 30s0.4.5 (2017-11-14)++++++++++++++++++**Features**- rename multi product search to discover search0.4.4 (2017-10-27)++++++++++++++++++**Features**- support multi product search0.4.3 (2016-11-08)++++++++++++++++++**Improvement**- add &quot;X-Requested-With&quot; in the request header when calling api0.4.1 (2016-09-28)++++++++++++++++++**Improvement**- fix the issue for recommendation endpoint and add a test cases0.4.0 (2016-09-20)++++++++++++++++++**Features**- add recommendation endpoint0.3.9 (2016-07-20)++++++++++++++++++**Improvement**- allow passing search endpoint as parameter0.3.8 (2016-04-20)++++++++++++++++++**Improvement**- exclude im_url from the required fields in update0.3.7 (2016-01-21)++++++++++++++++++**Improvement**- add missing info in multipart upload0.3.6 (2015-12-24)++++++++++++++++++**Improvement**- send raw image in uploadsearch to make consistent results as in dashboard0.3.5 (2015-12-24)++++++++++++++++++**Bug fix**- fix tests due to httpretty incompatibility for python 30.3.4 (2015-12-24)++++++++++++++++++**Bug fix**- encode url parameter in uploadsearch0.3.3 (2015-12-04)++++++++++++++++++**Bug fix**- fix dict iteritem issue for python 30.3.2 (2015-12-04)++++++++++++++++++**Improvement**- support arbitrary parameters in search0.3.0 (2015-11-13)++++++++++++++++++**Improvement**- Add get_all_fl field so that user can query for all metafields0.2.8 (2015-11-12)++++++++++++++++++**Improvement**- support arbitrary parameters in insert0.2.6 (2015-07-30)++++++++++++++++++**Bugfixes**- update insert_status with extra parameters0.2.4 (2015-06-08)++++++++++++++++++**Bugfixes**- Drop support for python 2.60.2.2 (2015-06-08)++++++++++++++++++**Bugfixes**- Separate POST request data/parameters0.2.0 (2015-04-10)++++++++++++++++++**Bugfixes**- Close opened files in tearDown()**Features and Improvements**- Test compatibility on py26, py340.1.0 (2015-04-06)---------------------* First release on PyPI.</longdescription>
</pkgmetadata>