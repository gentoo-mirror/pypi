<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Odoo RPC Client===============.. image:: https://gitlab.com/katyukha/odoo-rpc-client/badges/master/pipeline.svg    :target: https://gitlab.com/katyukha/odoo-rpc-client/commits/master.. image:: https://gitlab.com/katyukha/odoo-rpc-client/badges/master/coverage.svg    :target: https://gitlab.com/katyukha/odoo-rpc-client/commits/master.. image:: https://img.shields.io/readthedocs/odoo-rpc-client.svg    :target: https://odoo-rpc-client.readthedocs.io/en/latest/.. image:: https://img.shields.io/pypi/dm/odoo-rpc-client.svg    :target: https://pypi.org/project/odoo-rpc-client/    :alt: PyPI - Downloads-------------------.. contents::   :depth: 2Canonical source----------------The canonical source of *odoo-rpc-client* is hosted on `GitLab &lt;https://gitlab.com/katyukha/odoo-rpc-client&gt;`__.Overview--------This is core part of `OpenERP Proxy &lt;https://github.com/katyukha/openerp-proxy&gt;`__This project is just **RPC client** for Odoo.This project provides interface similar toOdoo internal code to perform operations on **Odoo** objects hiding**XML-RPC** or **JSON-RPC** behind.Features~~~~~~~~-  *Python 3.5+* support-  You can call any public method on any OpenERP / Odoo object including:   *read*, *search*, *write*, *unlink* and others-  Have *a lot of speed optimizations* (caching, read only requested fields,   read data for all records in current set (cache), by one RPC call, etc)-  Desinged to take as more benefits of **IPython autocomplete** as posible-  Provides *browse\_record* like interface, allowing to browse related   models too. Supports `browse` method.   Also adds method `search_records` to simplify   search-and-read operations.-  *Extension support*. You can easily modify most of components of this lib   creating Your own extensions and plugins. It is realy simple. See for examples in   `openerp_proxy/ext/ &lt;https://github.com/katyukha/openerp-proxy/tree/master/openerp_proxy/ext&gt;`__ directory.-  *Plugin Support*. Plugins are same as extensions, but aimed to implement additional logic.   For example look at `odoo_rpc_client/plugins &lt;https://gitlab.com/katyukha/odoo-rpc-client/tree/master/odoo_rpc_client/plugins&gt;`__   and `odoo_rpc_client/plugin.py &lt;https://gitlab.com/katyukha/odoo-rpc-client/blob/master/odoo_rpc_client/plugin.py&gt;`__ -  Support of **JSON-RPC** for *version 8+* of Odoo-  Support of using **named parametrs** in RPC method calls (server version 6.1 and higher).-  *Experimental* integration with `AnyField &lt;https://pypi.python.org/pypi/anyfield&gt;`__-  Missed feature? fill and issue on `GitHub &lt;https://github.com/katyukha/odoo-rpc-client/issues&gt;`__ or `GitLab  &lt;https://gitlab.com/katyukha/odoo-rpc-client/issues&gt;`__Quick example~~~~~~~~~~~~~.. code:: python    from odoo_rpc_client import Client    # assume that odoo server is listening localhost on standard 8069 port and    # have database 'my_db'.    client = Client('localhost', 'my_db', 'user', 'password')    # get current user    client.user    print(client.user.name)    # simple rpc calls    client.execute('res.partner', 'read', [client.user.partner_id.id])    # Model browsing    SaleOrder = client['sale.order']    s_orders = SaleOrder.search_records([])    for order in s_orders:        print(order.name)        for line in order.order_line:            print(&quot;\t%s&quot; % line.name)        print(&quot;-&quot; * 5)        print()Supported Odoo server versions~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Tested with:- Odoo versions: *10.0*, *11.0*, *12.0*, *13.0*, *14.0*- Python versions: *2.7*, *3.5*, *3.6*, *3.7*, *3.8*, *3.9*Install-------This project is present on `PyPI &lt;https://pypi.python.org/pypi/odoo_rpc_client/&gt;`__so it could be installed via PIP::    pip install odoo_rpc_clientYodoo Cockpit - Manage your odoo infrastructure via odoo--------------------------------------------------------.. image:: https://crnd.pro/web/image/18846/banner_2_4_gif_animation_cut.gif  :target: https://crnd.pro/yodoo-cockpit  :alt: Yodoo Cockpit - Manage your odoo infrastructure via odooTake a look at `Yodoo Cockpit &lt;https://crnd.pro/yodoo-cockpit&gt;`__ project, and discover the easiest way to manage your odoo installation.Just short notes about `Yodoo Cockpit &lt;https://crnd.pro/yodoo-cockpit&gt;`__:- start new production-ready odoo instance in 1-2 minutes.- add custom addons to your odoo instances in 5-10 minutes.- out-of-the-box email configuration: just press button and add some records to your DNS, and get a working email- make your odoo instance available to external world (internet) in 30 seconds (just add single record in your DNS)If you have any questions, then contact us at `info@crnd.pro &lt;mailto:info@crnd.pro&gt;`__, so we could schedule online-demonstration.Level up your service quality-----------------------------Level up your service with our `Helpdesk &lt;https://crnd.pro/solutions/helpdesk&gt;`__ / `Service Desk &lt;https://crnd.pro/solutions/service-desk&gt;`__ / `ITSM &lt;https://crnd.pro/itsm&gt;`__ solution.Just test it at `yodoo.systems &lt;https://yodoo.systems/saas/templates&gt;`__: choose template you like, and start working.Test all available features of `Bureaucrat ITSM &lt;https://crnd.pro/itsm&gt;`__ with `this template &lt;https://yodoo.systems/saas/template/bureaucrat-itsm-demo-data-95&gt;`__.    Usage-----Connect to server / database~~~~~~~~~~~~~~~~~~~~~~~~~~~~The one diference betwen using as lib and using as shell is the wayconnection to database is created. When using as shell the primary objectis session, which provides some interactivity. But when using as libraryin most cases there are no need for that interactivity, so connectionshould be created manualy, providing connection data from some other sourceslike config file or something else.So here is a way to create connection.. code:: python    from odoo_rpc_client import Client    db = Client(host='my_host.int',                dbname='my_db',                user='my_db_user',                pwd='my_password here')And next all there same, no more differences betwen shell and lib usage.General usage~~~~~~~~~~~~~For example lets try to find how many sale orders in 'done' state we have inour database. (Look above sections to get help on how to connect to Odoo database).. code:: python    &gt;&gt;&gt; sale_order_obj = db['sale.order']  # or You may use 'db.get_obj('sale.order')' if You like    &gt;&gt;&gt;    &gt;&gt;&gt; # Now lets search for sale orders:    &gt;&gt;&gt; sale_order_obj.search([('state', '=', 'done')], count=True)    5So we have 5 orders in done state. So let's read them.Default way to read data from Odoo is to search for required recordswith *search* method which return's list of IDs of records, then readdata using *read* method. Both methods mostly same as Odoo internalones:.. code:: python    &gt;&gt;&gt; sale_order_ids = sale_order_obj.search([('state', '=', 'done')])    &gt;&gt;&gt; sale_order_datas = sale_order_obj.read(sale_order_ids, ['name'])  # Last argument is optional.                                                                          # it describes list of fields to read                                                                          # if it is not provided then all fields                                                                          # will be read    &gt;&gt;&gt; sale_order_datas[0]    {'id': 3,     'name': 'SO0004'    }As we see reading data in such way allows us to get list of dictionarieswhere each contain fields have been readAnother way to read data is to use`search_records`or`read_lecords`method. Each of these methods receives same aguments as ``search`` or``read`` method respectively. But passing ``count`` argument for``search\_records`` will cause error. Main difference betwen these methodsin using `Record` classinstead of *dict* for each record had been read. Record class provides some orm-like abilities for records,allowing for example access fields as attributes and provide mechanismsto lazily fetch related fields... code:: python    &gt;&gt;&gt; sale_orders = sale_order_obj.search_records([('state', '=', 'done')])    &gt;&gt;&gt; sale_orders[0]    R(sale.order, 9)[SO0011]    &gt;&gt;&gt;    &gt;&gt;&gt; # So we have list of Record objects. Let's check what they are    &gt;&gt;&gt; so = sale_orders[0]    &gt;&gt;&gt; so.id    9    &gt;&gt;&gt; so.name    SO0011    &gt;&gt;&gt; so.partner_id    R(res.partner, 9)[Better Corp]    &gt;&gt;&gt;    &gt;&gt;&gt; so.partner_id.name    Better Corp    &gt;&gt;&gt; so.partner_id.active    TrueAdditional features-------------------Plugins~~~~~~~In version 0.4 plugin system was completly refactored. At this versionwe start using `extend_me &lt;https://pypi.python.org/pypi/extend_me&gt;`__library to build extensions and plugins easily.Plugins are usual classes that provides functionality that should be availableat ``db.plugins.*`` point, implementing logic not related to core system.--------------For more information see `sourcecode &lt;https://gitlab.com/katyukha/odoo-rpc-client&gt;`__ and`documentation &lt;https://odoo-rpc-client.readthedocs.io/en/latest/&gt;`__</longdescription>
</pkgmetadata>