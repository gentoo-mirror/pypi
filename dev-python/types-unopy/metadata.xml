<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======================LibreOffice API Typings=======================This project allow typings for the full `LibreOffice API &lt;https://api.libreoffice.org/&gt;`_WHY===Working with `LibreOffice API &lt;https://api.libreoffice.org/&gt;`_ in a modern code editor such as `Visual Studio Code &lt;https://code.visualstudio.com/&gt;`_there is not type support for `LibreOffice API &lt;https://api.libreoffice.org/&gt;`_ This project solves that Issue.VERSION=======This package is for Version ``7.4`` + of `LibreOffice API &lt;https://api.libreoffice.org/&gt;`_.From one version of LibreOffice to the next, generally speaking, the API does not changed much.Because this is the case it is very likely this current version of ``LibreOffice API Typings``will work fine with other versions of LibreOffice. This a typing package so not much can go wrong in other versions.Installation============PIP---**types-unopy** on `PyPI &lt;https://pypi.org/project/types-unopy/&gt;`_.. code-block:: bash    $ pip install types-unopyFor version ``7.3`` (or less) of LibreOffice... code-block:: bash    $ pip install &quot;types-unopy&lt;1.0&quot;CONDA-----**types-unopy** on `Anaconda &lt;https://anaconda.org/conda-forge/types-unopy&gt;`_.. code-block:: bash    $ conda install -c conda-forge types-unopyFor version ``7.3`` (or less) of LibreOffice... code-block:: bash    $ conda install -c conda-forge &quot;types-unopy&lt;1.0&quot;Related=======`Types-ScriptForge leverages &lt;https://github.com/Amourspirit/python-types-scriptforge&gt;`_ ``types-unopy``. By installingTypes-ScriptForge into your project you will also automatically install ``types-unopy``.USAGE=====Not all object in `LibreOffice API &lt;https://api.libreoffice.org/&gt;`_ can be directly imported.Any UNO object that is a *service* cannot be imported at runtime.For instance if you need to import ``SheetCellRange`` so it can be usedas type the following will fail at runtime... code-block:: python    &gt;&gt;&gt; from com.sun.star.sheet import SheetCellRange    ImportError: No module named 'com' (or 'com.sun.star.sheet.SheetCellRange' is unknown)The solution is to use `TYPE_CHECKING &lt;https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING&gt;`_... code-block:: python    &gt;&gt;&gt; from __future__ import annotations    &gt;&gt;&gt; from typing import TYPE_CHECKING    &gt;&gt;&gt; if TYPE_CHECKING:    ...     from com.sun.star.sheet import SheetCellRange    ...Anything imported in the ``TYPE_CHECKING`` block will not be available at runtime.For this reason types inside the ``TYPE_CHECKING`` must be wrapped in quotes **OR** ``from __future__ import annotations`` must be the first line of the module.Example of wrapping type in quotes... code-block:: python    def do_work(range: 'SheetCellRange') -&gt; None: ...Known Issues============Enums-----There is no enum classes in API only enum members.To access the enum members they must be imported directly.For example to import ``com.sun.star.beans.PropertyState.DIRECT_VALUE``If you need the behavior of regular Enum Classes consider using `ooouno &lt;https://github.com/Amourspirit/python-ooouno&gt;`_.. code-block:: python    &gt;&gt;&gt; from com.sun.star.beans import PropertyState    ImportError: No module named 'com' (or 'com.sun.star.beans.PropertyState' is unknown    &gt;&gt;&gt;    &gt;&gt;&gt; from com.sun.star.beans.PropertyState import DIRECT_VALUE    &gt;&gt;&gt; DIRECT_VALUE.value    'DIRECT_VALUE'    &gt;&gt;&gt;    &gt;&gt;&gt; type(DIRECT_VALUE)    &lt;class 'uno.Enum'&gt;Demo====.. figure:: https://user-images.githubusercontent.com/4193389/163689461-ab349f19-81b0-450b-bf49-50303a5c4da4.gif    :alt: Example image.Special Cases=============ImportError-----------By default an ``ImportError`` is raised when importing form ``com.sun.star`` at runtime.This is by design as the import error triggers ``uno`` to search LibreOffice API for actual import;Otherwise, ``com.sun.star`` is seen a namespace import and ``uno`` is ignored.In some cases the ``ImportError`` may need to be suppressed.Suppressing ``ImportError`` is accomplished by adding ``&quot;ooouno_ignore_import_error&quot;`` to environment and setting it to ``&quot;True&quot;``.. code-block:: python    &gt;&gt;&gt; import os    &gt;&gt;&gt; os.environ[&quot;ooouno_ignore_import_error&quot;] = &quot;True&quot; # must be stringWhen building with `Sphinx`_ and `autodoc`_ it may be necessary to exclude uno related imports.This can be accomplished using the `autodoc_mock_imports &lt;https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#confval-autodoc_mock_imports&gt;`_ option... code-block:: python    # docs conf.py    autodoc_mock_imports = ['uno', 'unohelper', 'com']For a reference see ``ooo-dev-tools`` `conf.py &lt;https://github.com/Amourspirit/python_ooo_dev_tools/blob/main/docs/conf.py&gt;`__.Enum Protocols--------------As mentioned above there are no enum classes in API only enum members.For this reason this package implements protocols for enums... code-block:: python    from com.sun.star.beans.PropertyState import DIRECT_VALUE    # DIRECT_VALUE is a type of PropertyStateProtoThe implemented protocol for ``PropertyState`` is as follows:.. code-block:: python    class PropertyStateProto(Protocol):        &quot;&quot;&quot;Protocol for PropertyState&quot;&quot;&quot;        @property        def typeName(self) -&gt; Literal[&quot;com.sun.star.beans.PropertyState&quot;]:            ...        value: Any        AMBIGUOUS_VALUE: PropertyStateProto        DEFAULT_VALUE: PropertyStateProto        DIRECT_VALUE: PropertyStateProtoImplemented methods such as ``com.sun.star.beans.PropertyState.XPropertyState.getPropertyState()`` return a protocol, in this case ``PropertyStateProto``.If you need to import a protocol for type hinting in your project then it will need to be guarded.Type Guarding Protocol^^^^^^^^^^^^^^^^^^^^^^Since ``typing.TYPE_CHECKING`` is always ``False`` at runtime we can use it.There are two way to handle importing a protocol class.The first way is by importing ``annotations``.. code-block:: python    from __future__ import annotations    import uno    from com.sun.star.sheet.SolverConstraintOperator import SolverConstraintOperatorProto    # ...    def solve_operation(value: int, x: SolverConstraintOperatorProto) -&gt; int:        ...Note when using ``annotations`` the ``cast`` to protocol must be wrapped in a string... code-block:: python    from typing import cast    from com.sun.star.sheet.SolverConstraintOperator import SolverConstraintOperatorProto    from ooo.dyn.sheet.solver_constraint_operator import SolverConstraintOperator    # ...    # SolverConstraintOperatorProto must be wrapped in a string    # if it has not been assigned to object at runtime.    solve_operation(        11, cast(&quot;SolverConstraintOperatorProto&quot;, SolverConstraintOperator.BINARY)    )The other way is to assign the protocol class as an object at runtime... code-block:: python    from typing import TYPE_CHECKING    import uno    from com.sun.star.sheet.SolverConstraintOperator import SolverConstraintOperatorProto    if TYPE_CHECKING:        # While writing code we have the advantages of protocol        from com.sun.star.sheet.SolverConstraintOperator import SolverConstraintOperatorProto    else:        # code is executing. Now protocol is an object and basically ignored        SolverConstraintOperatorProto = objectRelated Projects================* `OOO Development Tools &lt;https://github.com/Amourspirit/python_ooo_dev_tools&gt;`__* `ooouno &lt;https://github.com/Amourspirit/python-ooouno&gt;`__* `ScriptForge Typings &lt;https://github.com/Amourspirit/python-types-scriptforge&gt;`__* `Access2base Typings &lt;https://github.com/Amourspirit/python-types-access2base&gt;`__* `LibreOffice Python UNO Examples &lt;https://github.com/Amourspirit/python-ooouno-ex&gt;`__* `LibreOffice UNO Typings &lt;https://github.com/Amourspirit/python-types-uno-script&gt;`__* `LibreOffice Developer Search &lt;https://github.com/Amourspirit/python_lo_dev_search&gt;`__* `OOO UNO TEMPLATE &lt;https://github.com/Amourspirit/ooo_uno_tmpl&gt;`__.. _Sphinx: https://www.sphinx-doc.org/en/master/.. _autodoc: https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html</longdescription>
</pkgmetadata>