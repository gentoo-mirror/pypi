<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># rich-argparse![python -m rich_argparse](https://user-images.githubusercontent.com/93259987/224482407-ea1de764-09f7-415e-acaa-259466ba9c18.svg)[![tests](https://github.com/hamdanal/rich-argparse/actions/workflows/tests.yml/badge.svg)](https://github.com/hamdanal/rich-argparse/actions/workflows/tests.yml)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/hamdanal/rich-argparse/main.svg)](https://results.pre-commit.ci/latest/github/hamdanal/rich-argparse/main)[![Python Version](https://img.shields.io/pypi/pyversions/rich-argparse)![Release](https://img.shields.io/github/v/release/hamdanal/rich-argparse?sort=semver)![Downloads](https://pepy.tech/badge/rich-argparse/month)](https://pypi.org/project/rich-argparse/)Format argparse and optparse help using [rich](https://pypi.org/project/rich).## Table of contents* [Installation](#installation)* [Usage](#usage)* [Output styles](#output-styles)  * [Colors](#customize-the-colors)  * [Group names](#customize-group-name-formatting)  * [Syntax highlighting](#special-text-highlighting)  * [Usage colors](#colors-in-the-usage)* [Subparsers](#working-with-subparsers)* [Third party formatters](#working-with-third-party-formatters)* [Optparse](#optparse-support) (experimental)## InstallationInstall from PyPI with pip or your favorite tool.```shpip install rich-argparse```## UsageSimply pass `formatter_class` to the argument parser```pythonimport argparsefrom rich_argparse import RichHelpFormatterparser = argparse.ArgumentParser(..., formatter_class=RichHelpFormatter)...```rich-argparse defines help formatter classes that produce colorful and easy to read help text. Theformatter classes are equivalent to argparse's built-in formatters:| `rich_argparse` formatter | `argparse` equivalent ||---------------------------|-----------------------|| `RichHelpFormatter` | `HelpFormatter` || `RawDescriptionRichHelpFormatter` | `RawDescriptionHelpFormatter` || `RawTextRichHelpFormatter` | `RawTextHelpFormatter` || `ArgumentDefaultsRichHelpFormatter` | `ArgumentDefaultsHelpFormatter` || `MetavarTypeRichHelpFormatter` | `MetavarTypeHelpFormatter` |For more information on how these formatters work, check the [argparse documentation](https://docs.python.org/3/library/argparse.html#formatter-class).## Output stylesThe default styles used by rich-argparse formatters are carefully chosen to work in different lightand dark themes. If these styles don't suit your taste, read below to learn how to change them.&gt; **Note**&gt; The examples below only mention `RichHelpFormatter` but apply to all other formatter classes.### Customize the colorsYou can customize the colors in the output by modifying the `styles` dictionary on the formatterclass. By default, `RichHelpFormatter` defines the following styles:```python{    'argparse.args': 'cyan',  # for positional-arguments and --options (e.g &quot;--help&quot;)    'argparse.groups': 'dark_orange',  # for group names (e.g. &quot;positional arguments&quot;)    'argparse.help': 'default',  # for argument's help text (e.g. &quot;show this help message and exit&quot;)    'argparse.metavar': 'dark_cyan',  # for metavariables (e.g. &quot;FILE&quot; in &quot;--file FILE&quot;)    'argparse.prog': 'grey50',  # for %(prog)s in the usage (e.g. &quot;foo&quot; in &quot;Usage: foo [options]&quot;)    'argparse.syntax': 'bold',  # for highlights of back-tick quoted text (e.g. &quot;`some text`&quot;)    'argparse.text': 'default',  # for the descriptions and epilog (e.g. &quot;A program to foo&quot;)}```For example, to make the description and epilog *italic*, change the `argparse.text` style:```pythonRichHelpFormatter.styles[&quot;argparse.text&quot;] = &quot;italic&quot;```### Customize group name formattingYou can change how the names of the groups (like `'positional arguments'` and `'options'`) areformatted by setting the `RichHelpFormatter.group_name_formatter` function. By default,`RichHelpFormatter` sets the function to `str.title` but any function that takes the group nameas an input and returns a str works. For example, to apply the *UPPER CASE* format do this:```pythonRichHelpFormatter.group_name_formatter = str.upper```### Special text highlightingYou can [highlight patterns](https://rich.readthedocs.io/en/stable/highlighting.html) in the helptext and the description text of your parser's help output using regular expressions. By default,`RichHelpFormatter` highlights patterns of `--options-with-hyphens` using the `argparse.args` styleand patterns of `` `back tick quoted text` `` using the `argparse.syntax` style. You can controlwhat patterns are highlighted by modifying the `RichHelpFormatter.highlights` list. To disable allhighlights, you can clear this list using `RichHelpFormatter.highlights.clear()`.You can also add custom highlight patterns and styles. The following example highlights alloccurrences of `pyproject.toml` in green.```python# Add a style called `pyproject` which applies a green style (any rich style works)RichHelpFormatter.styles[&quot;argparse.pyproject&quot;] = &quot;green&quot;# Add the highlight regex (the regex group name must match an existing style name)RichHelpFormatter.highlights.append(r&quot;\b(?P&lt;pyproject&gt;pyproject\.toml)\b&quot;)# Pass the formatter class to argparseparser = argparse.ArgumentParser(..., formatter_class=RichHelpFormatter)...```### Colors in the `usage``RichHelpFormatter` colors the usage generated by the formatter using the same styles used to colorthe arguments and their metavars. If you use a custom `usage` message in the parser, this text willtreated as &quot;plain text&quot; and will not be colored by default. You can enable colors in user definedusage message with [console markup](https://rich.readthedocs.io/en/stable/markup.html) by setting`RichHelpFormatter.usage_markup = True`. If you enable this option, make sure to [escape](https://rich.readthedocs.io/en/stable/markup.html#escaping) any square brackets in the usage text.## Working with subparsersIf your code uses argparse's subparsers and you want to format the subparsers' help output withrich-argparse, you have to explicitly pass `formatter_class` to the subparsers since subparsersdo not inherit the formatter class from the parent parser by default. You have two options:1. Create a helper function to set `formatter_class` automatically:   ```python    subparsers = parser.add_subparsers(...)    def add_parser(*args, **kwds):        kwds.setdefault(&quot;formatter_class&quot;, parser.formatter_class)        return subparsers.add_parser(*args, **kwds)    p1 = add_parser(...)    p2 = add_parser(...)   ```1. Set `formatter_class` on each subparser individually:   ```python    subparsers = parser.add_subparsers(...)    p1 = subparsers.add_parser(..., formatter_class=parser.formatter_class)    p2 = subparsers.add_parser(..., formatter_class=parser.formatter_class)   ```## Working with third party formatters`RichHelpFormatter` can be used with third party formatters that do not rely on the **private**internals of `argparse.HelpFormatter`. For example, [django](https://pypi.org/project/django)defines a custom help formatter that is used with its built in commands as well as with extensionlibraries and user defined commands. To use rich-argparse in your django project, change your`manage.py` file as follows:```diffdiff --git a/my_project/manage.py b/my_project/manage.pyindex 7fb6855..5e5d48a 100755--- a/my_project/manage.py+++ b/my_project/manage.py@@ -1,22 +1,38 @@ #!/usr/bin/env python &quot;&quot;&quot;Django's command-line utility for administrative tasks.&quot;&quot;&quot; import os import sys def main():     &quot;&quot;&quot;Run administrative tasks.&quot;&quot;&quot;     os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')     try:         from django.core.management import execute_from_command_line     except ImportError as exc:         raise ImportError(             &quot;Couldn't import Django. Are you sure it's installed and &quot;             &quot;available on your PYTHONPATH environment variable? Did you &quot;             &quot;forget to activate a virtual environment?&quot;         ) from exc++    from django.core.management.base import BaseCommand, DjangoHelpFormatter+    from rich_argparse import RichHelpFormatter++    class DjangoRichHelpFormatter(DjangoHelpFormatter, RichHelpFormatter):  # django first+        &quot;&quot;&quot;A rich-based help formatter for django commands.&quot;&quot;&quot;++    original_create_parser = BaseCommand.create_parser++    def create_parser(*args, **kwargs):+        parser = original_create_parser(*args, **kwargs)+        parser.formatter_class = DjangoRichHelpFormatter  # set the formatter_class+        return parser++    BaseCommand.create_parser = create_parser+     execute_from_command_line(sys.argv) if __name__ == '__main__':     main()```Now try out some command like: `python manage.py runserver --help`. Notice how the specialordering of the arguments applied by django is respected by the new help formatter.## Optparse supportrich-argparse now ships with experimental support for [optparse]. Import optparse help formattersfrom `rich_argparse.optparse`:```pythonimport optparsefrom rich_argparse.optparse import IndentedRichHelpFormatterparser = optparse.OptionParser(formatter=IndentedRichHelpFormatter())...```Similar to `argparse`, you can customize the styles used by the formatter by modifying the`RichHelpFormatter.styles` dictionary. These are the same styles used by `argparse` but withthe `optparse.` prefix. For example, to change the style used for the metavar of an option:```pythonRichHelpFormatter.styles[&quot;optparse.metavar&quot;] = &quot;italic&quot;```Syntax highlighting works the same way as `argparse`.Colors in the `usage` are not supported yet.Customizing the group name format is not supported. optparse uses title case by default.[optparse]: https://docs.python.org/3/library/optparse.html</longdescription>
</pkgmetadata>