<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ampapi-python## This implementation is under active development, please feel free to contribute or create an issue if you've found anything that needs fixingThis API allows you to communicate with AMP installations from within Python.Documentation for available API calls can be found by appending /API to the URL of any existing AMP installation.Please Note: This program is directly based on the [ampapi-node](https://github.com/CubeCoders/ampapi-node) implementation and is almost verbatim in most aspects.## Installation```bashpip install ampapi```or```bashpip install 'ampapi @ git+https://github.com/p0t4t0sandwich/ampapi-python.git'```You also need the following packages installed:```bashpip install requests aiohttp json dataclasses```## Async Example```pythonimport asynciofrom ampapi.ampapi import AMPAPIAsyncasync def start() -&gt; None:    API = AMPAPIAsync(&quot;http://localhost:8080/&quot;)    try:        # The third parameter is either used for 2FA logins, or if no password is specified to use a remembered token from a previous login, or a service login token.        loginResult = await API.Core_LoginAsync(&quot;admin&quot;, &quot;myfancypassword123&quot;, &quot;&quot;, False)        if &quot;success&quot; in loginResult.keys() and loginResult[&quot;success&quot;]:            print(&quot;Login successful&quot;)            API.sessionId = loginResult[&quot;sessionID&quot;]            # API call parameters are simply in the same order as shown in the documentation.            await API.Core_SendConsoleMessageAsync(&quot;say Hello Everyone, this message was sent from the Python API!&quot;)            currentStatus = await API.Core_GetStatusAsync()            CPUUsagePercent = currentStatus[&quot;Metrics&quot;][&quot;CPU Usage&quot;][&quot;Percent&quot;]            print(f&quot;Current CPU usage is: {CPUUsagePercent}%&quot;)        else:            print(&quot;Login failed&quot;)            print(loginResult)    except Exception as err:        print(err)asyncio.run(start())```## Non-Async Example```pythonfrom ampapi.ampapi import AMPAPIdef start() -&gt; None:    API = AMPAPI(&quot;http://localhost:8080/&quot;)    try:        # Perform first-stage API initialization.        APIInitOK = API.init()        if not APIInitOK:            print(&quot;API Init failed&quot;)            return        # The third parameter is either used for 2FA logins, or if no password is specified to use a remembered token from a previous login, or a service login token.        loginResult = API.Core.Login(&quot;admin&quot;, &quot;myfancypassword123&quot;, &quot;&quot;, False)        if &quot;success&quot; in loginResult.keys() and loginResult[&quot;success&quot;]:            print(&quot;Login successful&quot;)            API.sessionId = loginResult[&quot;sessionID&quot;]            # Perform second-stage API initialization, we only get the full API data once we're logged in.            APIInitOK = API.init()            if not APIInitOK:                print(&quot;API Stage 2 Init failed&quot;)                return            # API call parameters are simply in the same order as shown in the documentation.            API.Core.SendConsoleMessage(&quot;say Hello Everyone, this message was sent from the Python API!&quot;)            currentStatus = API.Core.GetStatus()            CPUUsagePercent = currentStatus[&quot;Metrics&quot;][&quot;CPU Usage&quot;][&quot;Percent&quot;]            print(f&quot;Current CPU usage is: {CPUUsagePercent}%&quot;)        else:            print(&quot;Login failed&quot;)            print(loginResult)    except Exception as err:        print(err)start()```## Additional NotesAs you may have noticed, the async and non-async implementations differ quite a bit. This is due to lambda functions within python being unable to use async methods. Usually this can be solved by manually defining the function, but as that would be cumbersome, I've opted to create a script to grab the API spec from the AMP API and generate all the needed functions (script found under /utils/ampapi_async_gen.py).Async implementation: `API.Core_LoginAsync()`Sync implementation: `API.Core.Login()`Additonally, unlike other languages, the &quot;Zen of Python&quot; prevents dot/property notation for dictionaries (Think API.Core.Login). I've used dataclasses and some class properties to bypass this, so in the end:`API.Core.Login() == API[&quot;Core&quot;][&quot;Login&quot;]()`.</longdescription>
</pkgmetadata>