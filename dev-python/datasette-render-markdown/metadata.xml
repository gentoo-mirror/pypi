<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># datasette-render-markdown[![PyPI](https://img.shields.io/pypi/v/datasette-render-markdown.svg)](https://pypi.org/project/datasette-render-markdown/)[![Changelog](https://img.shields.io/github/v/release/simonw/datasette-render-markdown?include_prereleases&amp;label=changelog)](https://github.com/simonw/datasette-render-markdown/releases)[![Tests](https://github.com/simonw/datasette-render-markdown/workflows/Test/badge.svg)](https://github.com/simonw/datasette-render-markdown/actions?query=workflow%3ATest)[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/simonw/datasette-render-markdown/blob/main/LICENSE)[Datasette](https://datasette.io/) plugin for rendering Markdown.## InstallationInstall this plugin in the same environment as Datasette to enable this new functionality:```bashdatasette install datasette-render-markdown```## UsageYou can explicitly list the columns you would like to treat as Markdown using [plugin configuration](https://datasette.readthedocs.io/en/stable/plugins.html#plugin-configuration) in a `metadata.json` file.Add a `&quot;datasette-render-markdown&quot;` configuration block and use a `&quot;columns&quot;` key to list the columns you would like to treat as Markdown values:```json{    &quot;plugins&quot;: {        &quot;datasette-render-markdown&quot;: {            &quot;columns&quot;: [&quot;body&quot;]        }    }}```This will cause any `body` column in any table to be treated as markdown and safely rendered using [Python-Markdown](https://python-markdown.github.io/). The resulting HTML is then run through [Bleach](https://bleach.readthedocs.io/) to avoid the risk of XSS security problems.Save this to `metadata.json` and run Datasette with the `--metadata` flag to load this configuration:    $ datasette serve mydata.db --metadata metadata.jsonThe configuration block can be used at the top level, or it can be applied just to specific databases or tables. Here's how to apply it to just the `entries` table in the `news.db` database:```json{    &quot;databases&quot;: {        &quot;news&quot;: {            &quot;tables&quot;: {                &quot;entries&quot;: {                    &quot;plugins&quot;: {                        &quot;datasette-render-markdown&quot;: {                            &quot;columns&quot;: [&quot;body&quot;]                        }                    }                }            }        }    }}```And here's how to apply it to every `body` column in every table in the `news.db` database:```json{    &quot;databases&quot;: {        &quot;news&quot;: {            &quot;plugins&quot;: {                &quot;datasette-render-markdown&quot;: {                    &quot;columns&quot;: [&quot;body&quot;]                }            }        }    }}```## Columns that match a naming conventionThis plugin can also render markdown in any columns that match a specific naming convention.By default, columns that have a name ending in `_markdown` will be rendered.You can try this out using the following query:```sqlselect '# Hello there* This is a list* of items[And a link](https://github.com/simonw/datasette-render-markdown).'as demo_markdown```You can configure a different list of wildcard patterns using the `&quot;patterns&quot;` configuration key. Here's how to render columns that end in either `_markdown` or `_md`:```json{    &quot;plugins&quot;: {        &quot;datasette-render-markdown&quot;: {            &quot;patterns&quot;: [&quot;*_markdown&quot;, &quot;*_md&quot;]        }    }}```To disable wildcard column matching entirely, set `&quot;patterns&quot;: []` in your plugin metadata configuration.## Markdown extensionsThe [Python-Markdown library](https://python-markdown.github.io/) that powers this plugin supports extensions, both [bundled](https://python-markdown.github.io/extensions/) and [third-party](https://github.com/Python-Markdown/markdown/wiki/Third-Party-Extensions). These can be used to enable additional Markdown features such as [table support](https://python-markdown.github.io/extensions/tables/).You can configure support for extensions using the `&quot;extensions&quot;` key in your plugin metadata configuration.Since extensions may introduce new HTML tags, you will also need to add those tags to the list of tags that are allowed by the [Bleach](https://bleach.readthedocs.io/) sanitizer. You can do that using the `&quot;extra_tags&quot;` key, and you can allow-list additional HTML attributes using `&quot;extra_attrs&quot;`. See [the Bleach documentation](https://bleach.readthedocs.io/en/latest/clean.html#allowed-tags-tags) for more information on this.Here's how to enable support for [Markdown tables](https://python-markdown.github.io/extensions/tables/):```json{    &quot;plugins&quot;: {        &quot;datasette-render-markdown&quot;: {            &quot;extensions&quot;: [&quot;tables&quot;],            &quot;extra_tags&quot;: [&quot;table&quot;, &quot;thead&quot;, &quot;tr&quot;, &quot;th&quot;, &quot;td&quot;, &quot;tbody&quot;]        }    }}```### GitHub-Flavored MarkdownEnabling [GitHub-Flavored Markdown](https://help.github.com/en/github/writing-on-github) (useful for if you are working with data imported from GitHub using [github-to-sqlite](https://github.com/dogsheep/github-to-sqlite)) is a little more complicated.First, you will need to install the [py-gfm](https://py-gfm.readthedocs.io) package:    $ pip install py-gfmNote that `py-gfm` has [a bug](https://github.com/Zopieux/py-gfm/issues/13) that causes it to pin to `Markdown&lt;3.0` - so if you are using it you should install it _before_ installing `datasette-render-markdown` to ensure you get a compatibly version of that dependency.Now you can configure it like this. Note that the extension name is `mdx_gfm:GithubFlavoredMarkdownExtension` and you need to allow-list several extra HTML tags and attributes:```json{    &quot;plugins&quot;: {        &quot;datasette-render-markdown&quot;: {            &quot;extra_tags&quot;: [                &quot;hr&quot;,                &quot;br&quot;,                &quot;details&quot;,                &quot;summary&quot;,                &quot;input&quot;            ],            &quot;extra_attrs&quot;: {                &quot;input&quot;: [                    &quot;type&quot;,                    &quot;disabled&quot;,                    &quot;checked&quot;                ],            },            &quot;extensions&quot;: [                &quot;mdx_gfm:GithubFlavoredMarkdownExtension&quot;            ]        }    }}```The `&lt;input type=&quot;&quot; checked disabled&gt;` attributes are needed to support rendering checkboxes in issue descriptions.## Markdown in templatesThe plugin introduces a new template tag: `{% markdown %}...{% endmarkdown %}` - which can be used to render Markdown in your Jinja templates.```html+jinja{% markdown %}# This will be rendered as markdown{% endmarkdown %}```You can use attributes on the `{% markdown %}` tag to enable extensions and allow-list additional tags and attributes:```html+jinja{% markdown  extensions=&quot;tables&quot;  extra_tags=&quot;table thead tr th td tbody&quot;   extra_attrs=&quot;p:id,class a:name,href&quot; %}## Markdown tableFirst Header  | Second Header------------- | -------------Content Cell  | Content CellContent Cell  | Content Cell&lt;a href=&quot;https://www.example.com/&quot; name=&quot;namehere&quot;&gt;Example&lt;/a&gt;&lt;p id=&quot;paragraph&quot; class=&quot;klass&quot;&gt;Paragraph&lt;/p&gt;{% endmarkdown %}```The `extensions=` and `extra_tags=` attributes accept a space-separated list of values.The `extra_attrs=` attribute accepts a space-separated list of `tag:attr1,attr2` values - each tag can specify one or more attributes that should be allowed.You can also use the `{{ render_markdown(...) }}` function, like this:```html+jinja{{ render_markdown(&quot;&quot;&quot;## Markdown tableFirst Header  | Second Header------------- | -------------Content Cell  | Content CellContent Cell  | Content Cell&quot;&quot;&quot;, extensions=[&quot;tables&quot;],    extra_tags=[&quot;table&quot;, &quot;thead&quot;, &quot;tr&quot;, &quot;th&quot;, &quot;td&quot;, &quot;tbody&quot;])) }}```The `{% markdown %}` tag is recommended, as it avoids the need to `\&quot;` escape quotes in your Markdown content.</longdescription>
</pkgmetadata>