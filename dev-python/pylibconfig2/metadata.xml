<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://travis-ci.org/heinzK1X/pylibconfig2.svg    :target: https://travis-ci.org/heinzK1X/pylibconfig2pylibconfig2============Pure python library for libconfig syntax. IO works via strings, and include directives.Usage-----Scalar types are pythons basic types str, int, long, float, bool. The libconfigtypes Array, List, Group are implemented as ConfArray, ConfList, ConfGroup,respectively. A config is setup from a string only, and represented as a stringautomatically.The config~~~~~~~~~~Config represents a libconfig configuration. The string representation is itselfreadable as a config. Access works via attributes:    &gt;&gt;&gt; import pylibconfig2 as cfg    &gt;&gt;&gt; c = cfg.Config(&quot;my_setting = 5;&quot;)    &gt;&gt;&gt; str(c)    'my_setting = 5;'    &gt;&gt;&gt; c.my_setting    5Or via lookup as in the original libconfig way (no exceptions are raised):    &gt;&gt;&gt; c = Config('my = {nested = {sett = (0, {ng = &quot;rocks!&quot;})}}')    &gt;&gt;&gt; c.lookup('my.nested.sett.[1].ng')    'rocks!'    &gt;&gt;&gt; c.lookup('my.nested.foo', 'bar')    'bar'Setting values should be done by path (but attribution is also possible):    &gt;&gt;&gt; c = Config('')    &gt;&gt;&gt; c.setup('foo', 1)    True    &gt;&gt;&gt; c.setup('bar', '{hello = &quot;world&quot;}')    True    &gt;&gt;&gt; c.lookup('bar.hello')    'world'    &gt;&gt;&gt; c.setup('a.nonexisting.group', '&quot;returns False!&quot;')    FalseThese functions are given for further convenience:    keys()    values()    items()    get(key, default)    set(key, value)An array~~~~~~~~ConfArray represents a libconfig array. Access works via the [] operator:    &gt;&gt;&gt; c = cfg.Config(&quot;my_array = [1, 2, 3];&quot;)    &gt;&gt;&gt; c.my_array[1]    2A list~~~~~~ConfList represents a libconfig list. Access works via the [] operator:    &gt;&gt;&gt; c = cfg.Config('my_list = (1.5, 2L, 0xee, &quot;string&quot;);')    &gt;&gt;&gt; c.my_list[1]    2LA group~~~~~~~ConfGroup represents a libconfig group. Access works via attributes:    &gt;&gt;&gt; c = cfg.Config(&quot;my_group = {my_setting = 5;};&quot;)    &gt;&gt;&gt; c.my_group.my_setting    5Again, these functions are given for convenience:    keys()    values()    items()    get(key, default)    set(key, value)</longdescription>
</pkgmetadata>