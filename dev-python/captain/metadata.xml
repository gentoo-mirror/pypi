<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CaptainEasy python cli scripts for people that just want get things done.__Important__ - If you have older scripts you might need the [captain~=3.0.0 branch](https://github.com/Jaymon/captain/tree/3.0.0). The mainline branch has an entirely different interface.## UsageA valid `captain` cli script needs just two things:1. A `Default` class that extends `captain.Command` and has a `handle()` method:    ```python    from captain import Command        class Default(Command):        def handle(self, foo, bar):            return 0    ```2. Calling `captain.handle()` at the end of your script:    ```python    from captain import Command, handle        class Default(Command):        def handle(self, foo, bar):            return 0    if __name__ == &quot;__main__&quot;:        handle()    ```That's it! Whatever arguments you define in your class's `Default.handle()` method will be options on the command line. A captain script is called just like any other python command line script, so to run the above example you could do:    $ python path/to/script.py --foo=1 --bar=2## Argument DecoratorThe `captain.arg()` decorator provides a nice passthrough api to the full [argparse.ArgumentParser.add_argument() method](https://docs.python.org/3/library/argparse.html#the-add-argument-method) if you want to fine tune how arguments are passed into your script:```pythonfrom captain import Command, handle, argclass Default(Command):    @arg('--foo', '-f', action=&quot;store_true&quot;)    @arg('arg', metavar='ARG')    def handle(self, *args, **kwargs):        '''this is the help description'''        self.output.out(args)        self.output.out(kwargs)if __name__ == &quot;__main__&quot;:    handle()```Would print a help string like this:    usage: script.py [-h] [--foo FOO] ARG    this is the help description    positional arguments:      ARG    optional arguments:      -h, --help         show this help message and exit      --foo FOO, -f FOO## Command OutputThe `captain.io.Output` class makes it easy to print stuff in your script while still giving you full control by being able to configure the logger if you need to. It also will obey the global `--quiet` flag that Captain adds to every script. It's available in the `handle()` method by using `self.output`:```pythonfrom captain import Commandclass Default(Command):    def handle(self, *args, **kwargs):        var1 = &quot;print&quot;        var2 = &quot;stdout&quot;        self.output.out(&quot;this will {} to {}&quot;, var1, var2)        var2 = &quot;stderr&quot;        self.output.err(&quot;this will {} to {}&quot;, var1, var2)        e = ValueError(&quot;this will print with stacktrace and everything&quot;)        self.output.exception(e)```The `captain.io.Output` class has a lot of nice little helper methods but Captain can also work with modules like [clint](https://github.com/kennethreitz/clint) if you need to do more advanced cli output.## ExamplesA typical standard python cli script```pythonimport argparseif __name__ == '__main__':    parser = argparse.ArgumentParser(description='fancy script description')    parser.add_argument(&quot;--foo&quot;, action='store_true')    parser.add_argument(&quot;--bar&quot;, default=0, type=int)    parser.add_argument(&quot;args&quot;, nargs='*')    args = parser.parse_args()    sys.exit(0)```would become:```pythonimport captainclass Default(captain.Command):    def handle(foo=False, bar=0, *args):        '''fancy script description'''        return 0if __name__ == '__main__':    captain.handle()```### SubcommandsCaptain supports multiple subcommands defined in the script by naming your `captain.Command` child classes something other than `Default`:```python# cli.pyimport captainclass Foo(captain.Command):    def handle(self):        passclass Bar(captain.Command):    def handle(self):        passif __name__ == '__main__':    captain.handle()```So `foo` could be called using:    $ python cli.py fooAnd `bar` could be called using:    $ python cli.py bar### Embedding captain in another packageIf you want a script from you package to be usable using both `python -m example` and maybe a `console_scripts` entry point defined in `setup.py`, you can set up your package's `__main__.py` module like this:```python# example/__main__.pyfrom captain import Command, handleclass Default(captain.Command):    def handle(self):        pass        if __name__ == &quot;__main__&quot;:    handle()```And then in your `setup.py` script you can add:```pythonentry_points = {    'console_scripts': [        'example = example.__main__:handle'    ],}```That's all there is to it.## InstallUse pip:    $ pip install captainFor latest and greatest:    $ pip install -U &quot;git+https://github.com/Jaymon/captain#egg=captain&quot;</longdescription>
</pkgmetadata>