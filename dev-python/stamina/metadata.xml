<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># *stamina*: Production-grade Retries Made EasyTransient failures are common in distributed systems.To make your systems resilient, you need to **retry** failed operations.But bad retries can make things *much worse*.*stamina* is an opinionated wrapper around the great-but-unopinionated [Tenacity](https://tenacity.readthedocs.io/) package.Its goal is to be as **ergonomic** as possible while doing the **right thing** by default and minimizing the potential for **misuse**.It is the result of years of copy-pasting the same configuration over and over again:- Retry only on certain exceptions.- Exponential **backoff** with **jitter** between retries.- Limit the number of retries **and** total time.- Automatic **async** support.- Preserve **type hints** of the decorated callable.- Flexible **instrumentation** with [Prometheus](https://github.com/prometheus/client_python), [*structlog*](https://www.structlog.org/), and standard library's `logging` support out-of-the-box.- Easy _global_ deactivation for testing.For example:```pythonimport httpximport stamina@stamina.retry(on=httpx.HTTPError, attempts=3)def do_it(code: int) -&gt; httpx.Response:    resp = httpx.get(f&quot;https://httpbin.org/status/{code}&quot;)    resp.raise_for_status()    return resp```&lt;!-- end docs index --&gt;**Async** callables work use the same API and it's possible to retry **arbitrary blocks**, too.Check out our [tutorial](https://stamina.hynek.me/en/latest/tutorial.html) for more examples!## Release Information### Added- Instrumentation is now pluggable!  You can define your own hooks that are run with retry details whenever a retry is scheduled.  The documentation now has a whole chapter on instrumentation.  [#37](https://github.com/hynek/stamina/pull/37)- If *structlog* is not installed, the scheduled retry is now logged using the standard library `logging` module by default.  [#35](https://github.com/hynek/stamina/pull/35)### Changed- Tenacity's internal `AttemptManager` object is no longer exposed to the user.  This was an oversight and never documented.  `stamina.retry_context()` now yields instances of `stamina.Attempt`.  [#22](https://github.com/hynek/stamina/pull/22)- Initialization of instrumentation is now delayed.  This means that if there's no retries, there's no startup overhead from importing *structlog* and *prometheus-client*.  [#34](https://github.com/hynek/stamina/pull/34)- Some key names in *structlog* log messages have been renamed to better reflect their meaning (`slept` → `waited_so_far`, `attempt` → `retry_num`, and `error` → `caused_by`).  You can rename them back using *structlog*'s [`structlog.processors.EventRenamer`](https://www.structlog.org/en/stable/api.html#structlog.processors.EventRenamer).  [#35](https://github.com/hynek/stamina/pull/35)---[→ Full Changelog](https://github.com/hynek/stamina/blob/main/CHANGELOG.md)## Credits*stamina* is written by [Hynek Schlawack](https://hynek.me/) and distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.The development is kindly supported by my employer [Variomedia AG](https://www.variomedia.de/) and all my amazing [GitHub Sponsors](https://github.com/sponsors/hynek).This project would not be possible without the years of incredible work that went into [Tenacity](https://tenacity.readthedocs.io/).</longdescription>
</pkgmetadata>