<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>fancycompleter: colorful Python TAB completion==============================================What is is?-----------`fancycompleter` is a module to improve your experience in Python byadding TAB completion to the interactive prompt. It is an extension ofthe stdlib\'s[rlcompleter](http://docs.python.org/library/rlcompleter.html) module.Its best feature is that the completions are displayed in differentcolors, depending on their type:![image](http://bitbucket.org/antocuni/fancycompleter/raw/5bf506e05ce7/screenshot.png)In the image above, strings are shown in green, functions in blue,integers and boolean in yellows, `None` in gray, types and classes infuchsia. Everything else is plain white.`fancycompleter` is compatible with Python 3. However, by default colorsdon\'t work on Python 3, see the section [How do I getcolors?](#how-do-i-get-colors) for details.Other features---------------   To save space on screen, `fancycompleter` only shows the characters    &quot;after the dot&quot;. By contrast, in the example above `rlcompleter`    shows everything prepended by `&quot;sys.&quot;`.-   If we press `&lt;TAB&gt;` at the beginning of the line, a real tab    character is inserted, instead of trying to complete. This is useful    when typing function bodies or multi-line statements at the prompt.-   Unlike `rlcompleter`, `fancycompleter` **does** complete expressions    containing dictionary or list indexing. For example,    `mydict['foo'].&lt;TAB&gt;` works (assuming that `mydict` is a dictionary    and that it contains the key `'foo'`, of course :-)).-   Starting from Python 2.6, if the completed name is a callable,    `rlcompleter` automatically adds an open parenthesis `(`. This is    annoying in case we do not want to really call it, so    `fancycompleter` disable this behaviour.Installation------------First, install the module with `pip` or `easy_install`:    $ pip install fancycompleterThen, at the Python interactive prompt:    &gt;&gt;&gt; import fancycompleter    &gt;&gt;&gt; fancycompleter.interact(persist_history=True)    &gt;&gt;&gt;If you want to enable `fancycompleter` automatically at startup, you canadd those two lines at the end of your[PYTHONSTARTUP](http://docs.python.org/using/cmdline.html#envvar-PYTHONSTARTUP)script.If you do **not** have a `PYTHONSTARTUP` script, thefollowing command will create one for you in `~/python_startup.py`:    $ python -m fancycompleter installOn Windows, `install` automatically sets the `PYTHONSTARTUP` environmentvariable. On other systems, you need to add the proper command in`~/.bashrc` or equivalent.**Note**: depending on your particular system, `interact` might need toplay dirty tricks in order to display colors, although everything should&quot;just work&quot;. In particular, the call to `interact` should be the lastline in the startup file, else the next lines might not be executed. Seesection [What is really going on?](#what-is-really-going-on) fordetails.How do I get colors?--------------------If you are using **PyPy**, you can stop reading now, as `fancycompleter`will work out of the box.If you are using **CPython on Linux/OSX** and you installed`fancycompleter` with `pip` or `easy_install`, they automaticallyinstalled `pyrepl` as a requirement, and you should also get colors outof the box. If for some reason you don\'t want to use `pyrepl`, youshould keep on reading.By default, in CPython line input and TAB completion are handled by [GNUreadline](http://tiswww.case.edu/php/chet/readline/rltop.html) (at leaston Linux). However, `readline` explicitly strips escape sequences fromthe completions, so completions with colors are not displayed correctly.There are two ways to solve it:&gt; -   (suggested) don\'t use `readline` at all and rely on&gt;     [pyrepl](http://codespeak.net/pyrepl/)&gt; -   use a patched version of `readline` to allow colorsBy default, `fancycompleter` tries to use `pyrepl` if it finds it. Toget colors you need a recent version, \&gt;= 0.8.2.Starting from version 0.6.1, `fancycompleter` works also on **Windows**,relying on [pyreadline](https://pypi.python.org/pypi/pyreadline). At themoment of writing, the latest version of `pyreadline` is 2.1, which does**not** support colored completions; here is the [pullrequest](https://github.com/pyreadline/pyreadline/pull/48) which addssupport for them. To enable colors, you can install `pyreadline` from[this fork](https://github.com/antocuni/pyreadline) using the followingcommand:    pip install --upgrade https://github.com/antocuni/pyreadline/tarball/masterIf you are using **Python 3**, `pyrepl` does not work, and thus is notinstalled. Your only option to get colors is to use a patched`readline`, as explained below.I really want to use readline-----------------------------This method is not really recommended, but if you really want, you canuse use a patched readline: you can find the patches in the `misc/`directory:&gt; -   for&gt;     [readline-5.2](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/readline-escape-5.2.patch)&gt; -   for&gt;     [readline-6.0](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/readline-escape-6.0.patch)You can also try one of the following precompiled versions, which hasbeen tested on Ubuntu 10.10: remember to put them in a place where thelinker can find them, e.g. by setting `LD_LIBRARY_PATH`:&gt; -   readline-6.0 for&gt;     [32-bit](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/libreadline.so.6-32bit)&gt; -   readline-6.0 for&gt;     [64-bit](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/libreadline.so.6-64bit)Once it is installed, you should double-check that you can find it, e.g.by running `ldd` on Python\'s `readline.so` module:    $ ldd /usr/lib/python2.6/lib-dynload/readline.so | grep readline            libreadline.so.6 =&gt; /home/antocuni/local/32/lib/libreadline.so.6 (0x00ee7000)Finally, you need to force `fancycompleter` to use colors, since bydefault, it uses colors only with `pyrepl`: you can do it by placing acustom config file in `~/.fancycompleterrc.py`. An example config fileis[here](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/fancycompleterrc.py)(remind that you need to put a dot in front of the filename!).Customization-------------To customize the configuration of fancycompleter, you need to put a filenamed `.fancycompleterrc.py` in your home directory. The file mustcontain a class named `Config` inheriting from `DefaultConfig` andoverridding the desired values.What is really going on?------------------------The default and preferred way to get colors is to use `pyrepl`. However,there is no way to tell CPython to use `pyrepl` instead of the built-inreadline at the interactive prompt: this means that even if we installour completer inside pyrepl\'s readline library, the interactive promptwon\'t see it.The issue is simply solved by avoiding to use the built-in prompt:instead, we use a pure Python replacement based on[code.InteractiveConsole](http://docs.python.org/library/code.html#code.InteractiveConsole).This brings us also some niceties, such as the ability to do multi-lineediting of the history.The console is automatically run by `fancycompleter.interact()`,followed by `sys.exit()`: this way, if we execute it from the script in`PYTHONSTARTUP`, the interpreter exits as soon as we finish the use theprompt (e.g. by pressing CTRL-D, or by calling `quit()`). This way, weavoid to enter the built-in prompt and we get a behaviour which closelyresembles the default one. This is why in this configuration lines after`fancycompleter.interact()` might not be run.Note that if we are using `readline` instead of `pyrepl`, the trick isnot needed and thus `interact()` will simply returns, letting thebuilt-in prompt to show up. The same is true if we are running PyPy, asits built-in prompt is based on pyrepl anyway.</longdescription>
</pkgmetadata>