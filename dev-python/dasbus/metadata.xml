<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dasbusThis DBus library is written in Python 3, based on GLib and inspired by pydbus. Find out more inthe [documentation](https://dasbus.readthedocs.io/en/latest/).The code used to be part of the [Anaconda Installer](https://github.com/rhinstaller/anaconda)project. It was based on the [pydbus](https://github.com/LEW21/pydbus) library, but we replacedit with our own solution because its upstream development stalled. The dasbus library isa result of this effort.[![Build Status](https://travis-ci.com/rhinstaller/dasbus.svg?branch=master)](https://travis-ci.com/rhinstaller/dasbus)[![Documentation Status](https://readthedocs.org/projects/dasbus/badge/?version=latest)](https://dasbus.readthedocs.io/en/latest/?badge=latest)[![codecov](https://codecov.io/gh/rhinstaller/dasbus/branch/master/graph/badge.svg)](https://codecov.io/gh/rhinstaller/dasbus)## Requirements* Python 3.6+* PyGObject 3You can install [PyGObject](https://pygobject.readthedocs.io) provided by your operating systemor use PyPI. The system package is usually called `python3-gi`, `python3-gobject` or `pygobject3`.See the [instructions](https://pygobject.readthedocs.io/en/latest/getting_started.html) foryour platform (only for PyGObject, you don't need cairo or GTK).The library is known to work with Python 3.8, PyGObject 3.34 and GLib 2.63, but these are not therequired minimal versions.## InstallationInstall the package from [PyPI](https://pypi.org/project/dasbus/) or install the packageprovided by your operating system if available.### Install from PyPIFollow the instructions above to install the requirements before you install `dasbus` with `pip`.The required dependencies has to be installed manually in this case.```pip3 install dasbus```### Install the system packageFollow the instructions for your operating system to install the `python-dasbus` package.The required dependencies should be installed automatically by the system package manager.* [Arch Linux](https://dasbus.readthedocs.io/en/latest/#install-on-arch-linux)* [Debian / Ubuntu](https://dasbus.readthedocs.io/en/latest/#install-on-debian-ubuntu)* [Fedora / CentOS / RHEL](https://dasbus.readthedocs.io/en/latest/#install-on-fedora-centos-rhel)* [openSUSE](https://dasbus.readthedocs.io/en/latest/#install-on-opensuse)## ExamplesShow the current hostname.```pythonfrom dasbus.connection import SystemMessageBusbus = SystemMessageBus()proxy = bus.get_proxy(    &quot;org.freedesktop.hostname1&quot;,    &quot;/org/freedesktop/hostname1&quot;)print(proxy.Hostname)```Send a notification to the notification server.```pythonfrom dasbus.connection import SessionMessageBusbus = SessionMessageBus()proxy = bus.get_proxy(    &quot;org.freedesktop.Notifications&quot;,    &quot;/org/freedesktop/Notifications&quot;)id = proxy.Notify(    &quot;&quot;, 0, &quot;face-smile&quot;, &quot;Hello World!&quot;,    &quot;This notification can be ignored.&quot;,    [], {}, 0)print(&quot;The notification {} was sent.&quot;.format(id))```Handle a closed notification.```pythonfrom dasbus.loop import EventLooploop = EventLoop()from dasbus.connection import SessionMessageBusbus = SessionMessageBus()proxy = bus.get_proxy(    &quot;org.freedesktop.Notifications&quot;,    &quot;/org/freedesktop/Notifications&quot;)def callback(id, reason):    print(&quot;The notification {} was closed.&quot;.format(id))proxy.NotificationClosed.connect(callback)loop.run()```Asynchronously fetch a list of network devices.```pythonfrom dasbus.loop import EventLooploop = EventLoop()from dasbus.connection import SystemMessageBusbus = SystemMessageBus()proxy = bus.get_proxy(    &quot;org.freedesktop.NetworkManager&quot;,    &quot;/org/freedesktop/NetworkManager&quot;)def callback(call):    print(call())proxy.GetDevices(callback=callback)loop.run()```Inhibit the system suspend and hibernation.```pythonimport osfrom dasbus.connection import SystemMessageBusfrom dasbus.unix import GLibClientUnixbus = SystemMessageBus()proxy = bus.get_proxy(    &quot;org.freedesktop.login1&quot;,    &quot;/org/freedesktop/login1&quot;,    client=GLibClientUnix)fd = proxy.Inhibit(    &quot;sleep&quot;, &quot;my-example&quot;, &quot;Running an example&quot;, &quot;block&quot;)proxy.ListInhibitors()os.close(fd)```Define the org.example.HelloWorld service.```pythonclass HelloWorld(object):    __dbus_xml__ = &quot;&quot;&quot;    &lt;node&gt;        &lt;interface name=&quot;org.example.HelloWorld&quot;&gt;            &lt;method name=&quot;Hello&quot;&gt;                &lt;arg direction=&quot;in&quot; name=&quot;name&quot; type=&quot;s&quot; /&gt;                &lt;arg direction=&quot;out&quot; name=&quot;return&quot; type=&quot;s&quot; /&gt;            &lt;/method&gt;        &lt;/interface&gt;    &lt;/node&gt;    &quot;&quot;&quot;    def Hello(self, name):        return &quot;Hello {}!&quot;.format(name)```Define the org.example.HelloWorld service with an automatically generated XML specification.```pythonfrom dasbus.server.interface import dbus_interfacefrom dasbus.typing import Str@dbus_interface(&quot;org.example.HelloWorld&quot;)class HelloWorld(object):    def Hello(self, name: Str) -&gt; Str:        return &quot;Hello {}!&quot;.format(name)print(HelloWorld.__dbus_xml__)```Publish the org.example.HelloWorld service on the session message bus.```pythonfrom dasbus.connection import SessionMessageBusbus = SessionMessageBus()bus.publish_object(&quot;/org/example/HelloWorld&quot;, HelloWorld())bus.register_service(&quot;org.example.HelloWorld&quot;)from dasbus.loop import EventLooploop = EventLoop()loop.run()```See more examples in the [documentation](https://dasbus.readthedocs.io/en/latest/examples.html).## InspirationLook at the [complete examples](https://github.com/rhinstaller/dasbus/tree/master/examples) or[DBus services](https://github.com/rhinstaller/anaconda/tree/master/pyanaconda/modules) ofthe Anaconda Installer for more inspiration.</longdescription>
</pkgmetadata>