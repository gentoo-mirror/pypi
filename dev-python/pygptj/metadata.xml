<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyGPT-J* Python bindings for GPT-J  [ggml](https://github.com/ggerganov/ggml) language models.* Almost the same API as [pyllamacpp](https://github.com/abdeladim-s/pyllamacpp).[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)[![PyPi version](https://badgen.net/pypi/v/pygptj)](https://pypi.org/project/pygptj/)# Table of contents&lt;!-- TOC --&gt;* [Installation](#installation)* [CLI](#cli)* [Tutorial](#tutorial)    * [Quick start](#quick-start)    * [Interactive Dialogue](#interactive-dialogue)    * [Attribute a persona to the language model](#attribute-a-persona-to-the-language-model)* [API reference](#api-reference)* [License](#license)&lt;!-- TOC --&gt;# Installation1. The easy way is to use the prebuilt wheels```bashpip install pygptj```2. Build from source:```shellgit clone git+https://github.com/abdeladim-s/pygptj.git```# CLI You can run the following simple command line interface to test the package once it is installed:```shellpygtj path/to/ggml/model```# Tutorial### Quick start```pythonfrom pygptj.model import Modelmodel = Model(model_path='path/to/gptj/ggml/model')for token in model.generate(&quot;Tell me a joke ?&quot;):    print(token, end='', flush=True)```### Interactive DialogueYou can set up an interactive dialogue by simply keeping the `model` variable alive:```pythonfrom pygptj.model import Modelmodel = Model(model_path='/path/to/ggml/model')while True:    try:        prompt = input(&quot;You: &quot;, flush=True)        if prompt == '':            continue        print(f&quot;AI:&quot;, end='')        for token in model.generate(prompt):            print(f&quot;{token}&quot;, end='', flush=True)        print()    except KeyboardInterrupt:        break```### Attribute a persona to the language modelThe following is an example showing how to _&quot;attribute a persona to the language model&quot;_ :```pythonfrom pygptj.model import Modelprompt_context = &quot;&quot;&quot;Act as Bob. Bob is helpful, kind, honest,and never fails to answer the User's requests immediately and with precision. User: Nice to meet you Bob!Bob: Welcome! I'm here to assist you with anything you need. What can I do for you today?&quot;&quot;&quot;prompt_prefix = &quot;\nUser:&quot;prompt_suffix = &quot;\nBob:&quot;model = Model(model_path='/path/to/ggml/model',              prompt_context=prompt_context,              prompt_prefix=prompt_prefix,              prompt_suffix=prompt_suffix)while True:  try:    prompt = input(&quot;User: &quot;)    if prompt == '':      continue    print(f&quot;Bob: &quot;, end='')    for token in model.generate(prompt, antiprompt='User:'):      print(f&quot;{token}&quot;, end='', flush=True)      print()  except KeyboardInterrupt:    break```* You can always refer to the [short documentation](https://nomic-ai.github.io/pygptj/) for more details.# API referenceYou can check the [API reference documentation](https://abdeladim-s.github.io/pygptj/) for more details.# LicenseThis project is licensed under the MIT  [License](./LICENSE).</longdescription>
</pkgmetadata>