<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenMetadata Airflow Managed DAGS ApiThis is a plugin for Apache Airflow &gt;= 1.10 and Airflow &gt;=2.x that exposes REST APIs to deploy anOpenMetadata workflow definition and manage DAGS and tasks.## DevelopmentYou can run `make branch=issue-3659-v2 test_up` and specify any branch from OpenMetadata that you'dneed to test the changes in the APIs. This will prepare a separated airflow container.The command will build the image by downloading the branch changes inside the container. This helps ustest the REST APIs using some ongoing changes on OpenMetadata as well.## RequirementsFirst, make sure that Airflow is properly installed with the latest version `2.3.3`. Fromthe [docs](https://airflow.apache.org/docs/apache-airflow/stable/installation/installing-from-pypi.html):Then, install following packages in your scheduler and webserver python env.```pip install openmetadata-airflow-managed-apis       ```## ConfigurationAdd the following section to airflow.cfg```[openmetadata_airflow_apis]dag_generated_configs = {AIRFLOW_HOME}/dag_generated_configs```substitute AIRFLOW_HOME with your airflow installation home## Deploy```pip install &quot;apache-airflow==2.3.3&quot; --constraint &quot;https://raw.githubusercontent.com/apache/airflow/constraints-2.3.3/constraints-3.9.txt&quot;```1. Install the package2. `mkdir -p {AIRFLOW_HOME}/dag_generated_configs`3. (re)start the airflow webserver and scheduler    ```    airflow webserver    airflow scheduler    ```## ValidateYou can check that the plugin is correctly loaded by going to `http://{AIRFLOW_HOST}:{AIRFLOW_PORT}/restapi`,or accessing the REST_API_PLUGIN view through the Admin dropdown.## APIs#### Enable JWT Auth tokensPlugin enables JWT Token based authentication for Airflow versions 1.10.4 or higher when RBAC support is enabled.##### Generating the JWT access token```bashcurl -XPOST http://localhost:8080/api/v1/security/login -H &quot;Content-Type: application/json&quot; -d '{&quot;username&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;admin&quot;, &quot;refresh&quot;:true, &quot;provider&quot;: &quot;db&quot;}'```##### Examples:```bashcurl -X POST http://localhost:8080/api/v1/security/login -H &quot;Content-Type: application/json&quot; -d '{&quot;username&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;admin&quot;, &quot;refresh&quot;:true, &quot;provider&quot;: &quot;db&quot;}'```##### Sample response which includes access_token and refresh_token.```json{ &quot;access_token&quot;:&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDQyMTc4MzgsIm5iZiI6MTYwNDIxNzgzOCwianRpIjoiMTI4ZDE2OGQtMTZiOC00NzU0LWJiY2EtMTEyN2E2ZTNmZWRlIiwiZXhwIjoxNjA0MjE4NzM4LCJpZGVudGl0eSI6MSwiZnJlc2giOnRydWUsInR5cGUiOiJhY2Nlc3MifQ.xSWIE4lR-_0Qcu58OiSy-X0XBxuCd_59ic-9TB7cP9Y&quot;, &quot;refresh_token&quot;:&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDQyMTc4MzgsIm5iZiI6MTYwNDIxNzgzOCwianRpIjoiZjA5NTNkODEtNWY4Ni00YjY0LThkMzAtYzg5NTYzMmFkMTkyIiwiZXhwIjoxNjA2ODA5ODM4LCJpZGVudGl0eSI6MSwidHlwZSI6InJlZnJlc2gifQ.VsiRr8_ulCoQ-3eAbcFz4dQm-y6732QR6OmYXsy4HLk&quot;}```By default, JWT access token is valid for 15 mins and refresh token is valid for 30 days. You can renew the access token with the help of refresh token as shown below.##### Renewing the Access Token```bashcurl -X POST &quot;http://{AIRFLOW_HOST}:{AIRFLOW_PORT}/api/v1/security/refresh&quot; -H 'Authorization: Bearer &lt;refresh_token&gt;'```##### Examples:```bashcurl -X POST &quot;http://localhost:8080/api/v1/security/refresh&quot; -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDQyMTc4MzgsIm5iZiI6MTYwNDIxNzgzOCwianRpIjoiZjA5NTNkODEtNWY4Ni00YjY0LThkMzAtYzg5NTYzMmFkMTkyIiwiZXhwIjoxNjA2ODA5ODM4LCJpZGVudGl0eSI6MSwidHlwZSI6InJlZnJlc2gifQ.VsiRr8_ulCoQ-3eAbcFz4dQm-y6732QR6OmYXsy4HLk'```##### sample response returns the renewed access token as shown below.```json{ &quot;access_token&quot;:&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDQyODQ2OTksIm5iZiI6MTYwNDI4NDY5OSwianRpIjoiZDhhN2IzMmYtMWE5Zi00Y2E5LWFhM2ItNDEwMmU3ZmMyMzliIiwiZXhwIjoxNjA0Mjg1NTk5LCJpZGVudGl0eSI6MSwiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.qY2e-bNSgOY-YboinOoGqLfKX9aQkdRjo025mZwBadA&quot;}```#### Enable API requests with JWT##### If the Authorization header is not added in the api requestï¼Œresponse error:```json{&quot;msg&quot;:&quot;Missing Authorization Header&quot;}```##### Pass the additional Authorization:Bearer &lt;access_token&gt; header in the rest API request.Examples:```bashcurl -X GET -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDQyODQ2OTksIm5iZiI6MTYwNDI4NDY5OSwianRpIjoiZDhhN2IzMmYtMWE5Zi00Y2E5LWFhM2ItNDEwMmU3ZmMyMzliIiwiZXhwIjoxNjA0Mjg1NTk5LCJpZGVudGl0eSI6MSwiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.qY2e-bNSgOY-YboinOoGqLfKX9aQkdRjo025mZwBadA' http://localhost:8080/rest_api/api\?api\=dag_state\&amp;dag_id\=dag_test\&amp;run_id\=manual__2020-10-28T17%3A36%3A28.838356%2B00%3A00```## Using the APIOnce you deploy the plugin and restart the webserver, you can start to use the REST API. Bellow you will see the endpoints that are supported. **Note:** If enable RBAC, `http://{AIRFLOW_HOST}:{AIRFLOW_PORT}/rest_api/`&lt;br&gt;This web page will show the Endpoints supported and provide a form for you to test submitting to them.- [deploy_dag](#deploy_dag)- [delete_dag](#delete_dag)### ***&lt;span id=&quot;deploy_dag&quot;&gt;deploy_dag&lt;/span&gt;***##### Description:- Deploy a new dag, and refresh dag to session.##### Endpoint:```texthttp://{AIRFLOW_HOST}:{AIRFLOW_PORT}/rest_api/api?api=deploy_dag```##### Method:- POST##### POST request Arguments:```json{&quot;workflow&quot;: {&quot;name&quot;: &quot;test_ingestion_x_35&quot;,&quot;force&quot;: &quot;true&quot;,&quot;pause&quot;: &quot;false&quot;,&quot;unpause&quot;: &quot;true&quot;,&quot;dag_config&quot;: {&quot;test_ingestion_x_35&quot;: {&quot;default_args&quot;: {&quot;owner&quot;: &quot;harsha&quot;,&quot;start_date&quot;: &quot;2021-10-29T00:00:00.000Z&quot;,&quot;end_date&quot;: &quot;2021-11-05T00:00:00.000Z&quot;,&quot;retries&quot;: 1,&quot;retry_delay_sec&quot;: 300},&quot;schedule_interval&quot;: &quot;0 3 * * *&quot;,&quot;concurrency&quot;: 1,&quot;max_active_runs&quot;: 1,&quot;dagrun_timeout_sec&quot;: 60,&quot;default_view&quot;: &quot;tree&quot;,&quot;orientation&quot;: &quot;LR&quot;,&quot;description&quot;: &quot;this is an example dag!&quot;,&quot;tasks&quot;: {&quot;task_1&quot;: {&quot;operator&quot;: &quot;airflow.operators.python_operator.PythonOperator&quot;,&quot;python_callable_name&quot;: &quot;metadata_ingestion_workflow&quot;,&quot;python_callable_file&quot;: &quot;metadata_ingestion.py&quot;,&quot;op_kwargs&quot;: {&quot;workflow_config&quot;: {&quot;metadata_server&quot;: {&quot;config&quot;: {&quot;api_endpoint&quot;: &quot;http://localhost:8585/api&quot;,&quot;auth_provider_type&quot;: &quot;no-auth&quot;},&quot;type&quot;: &quot;metadata-server&quot;},&quot;sink&quot;: {&quot;config&quot;: {&quot;es_host&quot;: &quot;localhost&quot;,&quot;es_port&quot;: 9200,&quot;index_dashboards&quot;: &quot;true&quot;,&quot;index_tables&quot;: &quot;true&quot;,&quot;index_topics&quot;: &quot;true&quot;},&quot;type&quot;: &quot;elasticsearch&quot;},&quot;source&quot;: {&quot;config&quot;: {&quot;include_dashboards&quot;: &quot;true&quot;,&quot;include_tables&quot;: &quot;true&quot;,&quot;include_topics&quot;: &quot;true&quot;,&quot;limit_records&quot;: 10},&quot;type&quot;: &quot;metadata&quot;}}}}}}}}}```##### Examples:```bashcurl -H  'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MzU2NTE1MDAsIm5iZiI6MTYzNTY1MTUwMCwianRpIjoiNWQyZTM3ZDYtNjdiYS00NGZmLThjOWYtMDM0ZTQyNGE3MTZiIiwiZXhwIjoxNjM1NjUyNDAwLCJpZGVudGl0eSI6MSwiZnJlc2giOnRydWUsInR5cGUiOiJhY2Nlc3MifQ.DRUYCAiMh5h2pk1MZZJ4asyVFC20pu35DuAANQ5GxGw' -H 'Content-Type: application/json' -d &quot;@test_ingestion_config.json&quot; -X POST http://localhost:8080/rest_api/api\?api\=deploy_dag```##### response:```json{&quot;message&quot;: &quot;Workflow [test_ingestion_x_35] has been created&quot;, &quot;status&quot;: &quot;success&quot;}```### ***&lt;span id=&quot;delete_dag&quot;&gt;delete_dag&lt;/span&gt;***##### Description:- Delete dag based on dag_id.##### Endpoint:```texthttp://{AIRFLOW_HOST}:{AIRFLOW_PORT}/rest_api/api?api=delete_dag&amp;dag_id=value```##### Method:- GET##### GET request Arguments:- dag_id - string - The id of dag.##### Examples:```bashcurl -X GET http://localhost:8080/rest_api/api?api=delete_dag&amp;dag_id=dag_test```##### response:```json{  &quot;message&quot;: &quot;DAG [dag_test] deleted&quot;,  &quot;status&quot;: &quot;success&quot;}```</longdescription>
</pkgmetadata>