<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=================================================iXML - A simple iterative event-driven XML parser=================================================.. image:: https://secure.travis-ci.org/YAmikep/ixml.png    :target: https://travis-ci.org/YAmikep/ixml.. image:: https://coveralls.io/repos/YAmikep/ixml/badge.png   :target: https://coveralls.io/r/YAmikep/ixml  .. image:: https://pypip.in/v/ixml/badge.png    :target: https://crate.io/packages/ixml/.. image:: https://pypip.in/d/ixml/badge.png    :target: https://crate.io/packages/ixml/iXML is an iterative event-driven XML parser with a standard Python iterator interface.Docs----.. http://ixml.readthedocs.org/en/latest/Install-------From PyPI (stable)::    pip install ixmlFrom Github (unstable)::    pip install git+git://github.com/YAmikep/ixml.git#egg=ixmliXML currently requires the `lxml &lt;http://lxml.de/&gt;`_ library because there is no fallback backend based on the standard library yet.Main API---------- ``ixml.parse(data)``: iterator returning parsing events.- ``ixml.items(data, path, builder_klass=DictObjectBuilder)``: iterator returning Python objects found under a specified path.Notes:- ``data`` must be a file like object.- The Python objects yielded by ``ixml.items`` are constructed from the parsing events by an ``ObjectBuilder`` (``DictObjectBuilder`` by default). Please make your own if you wish as long as it implements the ``ObjectBuilder`` interface (see ``ixml.builders.interface``).- Top-level ``ixml`` module tries to automatically find and import a suitable parsing backend. You can also explicitly import a required backend from ``ixml.backends``.Usage and examples------------------All examples will be using this XML document:.. code:: python    &gt;&gt;&gt; XML = '''&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;    &lt;cities&gt;        &lt;city name=&quot;Paris&quot;&gt;            &lt;country&gt;France&lt;/country&gt;            &lt;language&gt;French&lt;/language&gt;            &lt;attractions&gt;                &lt;monument&gt;Eiffel Tower&lt;/monument&gt;                &lt;monument&gt;Triumphal Arch&lt;/monument&gt;                &lt;museum&gt;Louvre Museum&lt;/museum&gt;                &lt;museum&gt;Quai Branly Museum&lt;/museum&gt;            &lt;/attractions&gt;                  &lt;/city&gt;        &lt;city name=&quot;Dallas&quot;&gt;            &lt;country&gt;USA&lt;/country&gt;            &lt;language&gt;English&lt;/language&gt;            &lt;attractions&gt;                &lt;monument&gt;Bank America Plaza&lt;/monument&gt;                &lt;monument&gt;Dallas Theatre Center&lt;/monument&gt;                &lt;museum&gt;Dallas Museum of Art&lt;/museum&gt;                &lt;museum&gt;Old Red Museum&lt;/museum&gt;            &lt;/attractions&gt;                  &lt;/city&gt;     &lt;/cities&gt;'''- **ixml.parse**Using the ``parse`` function, you can react on individual events:.. code:: python    &gt;&gt;&gt; import ixml    &gt;&gt;&gt; from StringIO import StringIO        # The parse function takes a file like object    &gt;&gt;&gt; data = StringIO(XML)    # Extract only the languages and the countries    &gt;&gt;&gt; languages, countries = set(), set()    &gt;&gt;&gt; for path, event, value in ixml.parse(data):    ...     if path == 'cities.city.language':    ...         languages.add(value)    ...     elif path == 'cities.city.country':    ...         countries.add(value)    &gt;&gt;&gt; print languages, countries    set(['French', 'English']) set(['USA', 'France'])Below are all the parsing events from ``parse``:.. code:: python        ('cities', u'start', None)        ('cities.city', u'start', None)        ('cities.city.@name', 'data', 'Paris')        ('cities.city.country', 'data', 'France')        ('cities.city.language', 'data', 'French')        ('cities.city.attractions', u'start', None)        ('cities.city.attractions.monument', 'data', 'Eiffel Tower')        ('cities.city.attractions.monument', 'data', 'Triumphal Arch')        ('cities.city.attractions.museum', 'data', 'Louvre Museum')        ('cities.city.attractions.museum', 'data', 'Quai Branly Museum')        ('cities.city.attractions', u'end', None)        ('cities.city', u'end', None)        ('cities.city', u'start', None)        ('cities.city.@name', 'data', 'Dallas')        ('cities.city.country', 'data', 'USA')        ('cities.city.language', 'data', 'English')        ('cities.city.attractions', u'start', None)        ('cities.city.attractions.monument', 'data', 'Bank America Plaza')        ('cities.city.attractions.monument', 'data', 'Dallas Theatre Center')        ('cities.city.attractions.museum', 'data', 'Dallas Museum of Art')        ('cities.city.attractions.museum', 'data', 'Old Red Museum')        ('cities.city.attractions', u'end', None)        ('cities.city', u'end', None)        ('cities', u'end', None)- **ixml.items**Another usage is having iXML yields native Python objects for a specific path with ``items``:.. code:: python    &gt;&gt;&gt; import ixml    &gt;&gt;&gt; from StringIO import StringIO        # The items function takes a file like object    &gt;&gt;&gt; data = StringIO(XML)    &gt;&gt;&gt; for city in ixml.items(data, 'cities.city'):    ...     do_something_with(city)Below are the two &quot;city&quot; Python objects created. They are constructed as a dict by default. You can change this behavior by providing another builder class to the ``items`` function... code:: python    {           'country': 'France',         '@name': 'Paris',         'language': 'French',         'attractions': {            'museum': ['Louvre Museum', 'Quai Branly Museum'],            'monument': ['Eiffel Tower', 'Triumphal Arch']        }    }    {        'country': 'USA',        '@name': 'Dallas',        'language': 'English',        'attractions': {            'museum': ['Dallas Museum of Art', 'Old Red Museum'],             'monument': ['Bank America Plaza', 'Dallas Theatre Center']        }    }Parsing events--------------Parsing events contain the XML tree context (path), an event and a value::    (path, event, value)1. **The tree context (or path)**It is a simplified path format that:- uses dots to define different levels- uses namespace prefixes in the tag name- ignores default namespaces (handled automatically behind the scene)- uses @ for attributesExamples:- rss.channel.item- rss.channel.item.@myAttr- rss.channel.ns1:item.title2. **The events**- &quot;start&quot; and &quot;end&quot; for containers:.. code:: python    &lt;rss&gt;   # =&gt; ('rss', 'start', None)        &lt;...&gt;    &lt;/rss&gt;  # =&gt; ('rss', 'end', None)- &quot;data&quot; for leaves and attributes:.. code:: python    &lt;rss&gt;           &lt;title myAttr=&quot;Test&quot;&gt;Some text&lt;/title&gt;  # =&gt; ('rss.title', 'data', 'Some text'), ('rss.title.@myAttr', 'data', 'Test')    &lt;/rss&gt;3. **The value**If there is a value, it will always be a string, None otherwise.There is currently no automatic conversion feature (to int, etc).Backends--------iXML can provide several implementation of the parsing by using backends located in ixml/backends:- ``lxmliterparse``: wrapper around the well known `iterparse LXML &lt;http://lxml.de/parsing.html#iterparse-and-iterwalk&gt;`_ function.You can import a specific backend and use it in the same way as the top level library:.. code:: python    &gt;&gt;&gt; import ixml.backends.lxmliterparse as ixml    &gt;&gt;&gt; for path, event, value in ixml.parse(...):    ...     # ... Importing the top level library as ``import ixml`` tries to import all backends in order.iXML currently requires the `lxml &lt;http://lxml.de/&gt;`_ library because there is no fallback backend based on the standard library yet.ObjectBuilder------------The ``items`` function uses an ObjectBuilder to build an object while parsing the data.The events are passed into the ``event`` function of the builder that accepts three parameters: path, event type and value.The object being built is available at any time from the ``value`` attribute.You can make your own builder as long as it implements the ObjectBuilder interface (see ixml/builders/interface).Contribute----------Clone and install testing dependencies::    $ python setup.py develop     $ pip install -r requirements_tests.txtEnsure tests pass::    $ ./scripts/runtests.shOr using tox::    $ tox</longdescription>
</pkgmetadata>