<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>``linesman`` is a much needed profiler-for-WSGI applications.  It installs asmiddleware, can be configured entirely from any ``paster`` config, and aims tobe a jack-of-all-trades when it comes to profiling WSGI apps.Since a picture is worth a thousand words, here are a few screenshots of theinterface:- `Session listing  &lt;https://github.com/amcfague/linesman/raw/master/examples/session_listing.png&gt;`_- `Profile page  &lt;https://github.com/amcfague/linesman/raw/master/examples/profile.png&gt;`_- `Profile page w/ pie chart  &lt;https://github.com/amcfague/linesman/raw/master/examples/profile-with-pie-chart.png&gt;`_- `Generated callgraph  &lt;https://github.com/amcfague/linesman/raw/master/examples/callgraph.png&gt;`_The changelog can always be viewed `from the source&lt;https://github.com/amcfague/linesman/blob/master/docs/changelog.rst&gt;`_, or `onPyPi &lt;http://packages.python.org/linesman/changelog.html&gt;`_.  Keep in mind,PyPi is only updated with each release, and does not include developmentdocumentation.Reasoning behind this library=============================One of my team's stories at work was to investigate existing Python profilingtools for use with some of our new web stacks (all in Pylons).  I looked at afew--``repoze.profile``, ``kea.profile``, and even ``dozer`` (still in0.2alpha)--but couldn't find any that suited our use case.  We wanted to...- visualize the flow of our code- identify bottlenecks quickly and easily- have the ability to strip out extraneous callsMany of the tools simply outputted the ``pstats`` object from ``cProfile``,which can be difficult to parse, and even more difficult to identify the callorder.  Considering that ``cProfile`` provided all the information needed, Ifigured it would be just as easy to write our own middleware.``linesman`` is a name given to people who inspect electrical ``Pylons``, andwas a meek attempt at having a relevant library name.Setting up middleware=====================Now, you'll need to tell your WSGI application how to use Linesman.  Assumingyou're using Paster, you can do this very easily in your `development.ini` (orsimilar) config file.  Add a new filter section::    [filter:linesman]    use = egg:linesman#profilerThen, find the section for your specific application.  Typically, it will havea section header that looks like ``[app:main]``.  Add the following configoption somewhere within this section::    filter-with = linesmanWallah!  Once you start your paster server, you'll be all set.  Verify that allis working correctly by accessing pages on your server.  This will also createprofile entries for the next step.Accessing the profiles======================This will assume that your application is mounted at the root directory,`/`, and that your server is running on `localhost` at port 5000.  Ifnot, make sure you adjust your URLs accordingly.Access the URL at http://127.0.0.1:5000/__profiler__, which should presentyou with a list of profiles and times, with a link to the `stats` page.  If youcan see this (and view the profiles), then you're all set!Happy profiling!</longdescription>
</pkgmetadata>