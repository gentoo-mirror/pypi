<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Moz SQL ParserLet's make a SQL parser so we can provide a familiar interface to non-sql datastores!|Branch      |Status   ||------------|---------||master      | [![Build Status](https://travis-ci.org/klahnakoski/moz-sql-parser.svg?branch=master)](https://travis-ci.org/klahnakoski/moz-sql-parser) ||dev         | [![Build Status](https://travis-ci.org/klahnakoski/moz-sql-parser.svg?branch=dev)](https://travis-ci.org/klahnakoski/moz-sql-parser)    |## Problem StatementSQL is a familiar language used to access databases. Although, each database vendor has its quirky implementation, there is enough standardization that the average developer does not need to know of those quirks. This familiar core SQL (lowest common denominator, if you will) is useful enough to explore data in primitive ways. It is hoped that, once programmers have reviewed a datastore with basic SQL queries, and they see the value of that data, and they will be motivated to use the datastore's native query format.## ObjectivesThe primary objective of this library is to convert SQL queries to JSON-izable parse trees. This originally targeted MySQL, but has grown to include other database vendors. *Please [paste some SQL into a new issue](https://github.com/klahnakoski/moz-sql-parser/issues) if it does not work for you*## Non-Objectives * No plans to provide update statements, like `update` or `insert`* No plans to provide data access tools It is my sincere hope you can convert the JSON into queries for your particular backend datastore  ## Project StatusJan 2021 -There are [almost 500 tests](https://github.com/mozilla/moz-sql-parser/tree/dev/tests). This parser is good enough for basic usage, including inner queries, `with` clauses, and window functions.  There is still a lot missing to support BigQuery and Redshift queries.  ## Install    pip install moz-sql-parser## Parsing SQL    &gt;&gt;&gt; from moz_sql_parser import parse    &gt;&gt;&gt; import json    &gt;&gt;&gt; json.dumps(parse(&quot;select count(1) from jobs&quot;))    '{&quot;select&quot;: {&quot;value&quot;: {&quot;count&quot;: 1}}, &quot;from&quot;: &quot;jobs&quot;}'    Each SQL query is parsed to an object: Each clause is assigned to an object property of the same name.     &gt;&gt;&gt; json.dumps(parse(&quot;select a as hello, b as world from jobs&quot;))    '{&quot;select&quot;: [{&quot;value&quot;: &quot;a&quot;, &quot;name&quot;: &quot;hello&quot;}, {&quot;value&quot;: &quot;b&quot;, &quot;name&quot;: &quot;world&quot;}], &quot;from&quot;: &quot;jobs&quot;}'The `SELECT` clause is an array of objects containing `name` and `value` properties. ### Recursion Limit Python's default recursion limit (1000) is not hit when parsing the test suite, but this may not be the case for large SQL. You can increase the recursion limit before you `parse`:    &gt;&gt;&gt; from moz_sql_parser import parse    &gt;&gt;&gt; sys.setrecursionlimit(3000)    &gt;&gt;&gt; parse(complicated_sql)## Generating SQLYou may also generate SQL from the a given JSON document. This is done by the formatter, which is still incomplete (Jan2020).    &gt;&gt;&gt; from moz_sql_parser import format    &gt;&gt;&gt; format({&quot;from&quot;:&quot;test&quot;, &quot;select&quot;:[&quot;a.b&quot;, &quot;c&quot;]})    'SELECT a.b, c FROM test'## ContributingIn the event that the parser is not working for you, you can help make this better but simply pasting your sql (or JSON) into a new issue. Extra points if you describe the problem. Even more points if you submit a PR with a test.  If you also submit a fix, then you also have my gratitude. ## Run TestsSee [the tests directory](https://github.com/mozilla/moz-sql-parser/tree/dev/tests) for instructions running tests, or writing new ones.## More about implementationSQL queries are translated to JSON objects: Each clause is assigned to an object property of the same name.        # SELECT * FROM dual WHERE a&gt;b ORDER BY a+b    {        &quot;select&quot;: &quot;*&quot;,         &quot;from&quot;: &quot;dual&quot;,         &quot;where&quot;: {&quot;gt&quot;: [&quot;a&quot;, &quot;b&quot;]},         &quot;orderby&quot;: {&quot;value&quot;: {&quot;add&quot;: [&quot;a&quot;, &quot;b&quot;]}}    }        Expressions are also objects, but with only one property: The name of the operation, and the value holding (an array of) parameters for that operation.     {op: parameters}and you can see this pattern in the previous example:    {&quot;gt&quot;: [&quot;a&quot;,&quot;b&quot;]}    ## Array ProgrammingThe `moz-sql-parser.scrub()` method is used liberally throughout the code, and it &quot;simplifies&quot; the JSON.  You may find this form a bit tedious to work with because the JSON property values can be values, lists of values, or missing.  Please consider converting everything to arrays: ```def listwrap(value):    if value is None:        return []    elif isinstance(value, list)        return value    else:        return [value]```  then you may avoid all the is-it-a-list checks :```for select in listwrap(parsed_result.get('select')):    do_something(select)```you may find it easier if all JSON expressions had a list of operands:```def normalize(expression)    # ensure parameters are in a list    return {        op: params        for op, param = expression.items()        for params in [[normalize(p) for p in listwrap(param)]]    }```</longdescription>
</pkgmetadata>