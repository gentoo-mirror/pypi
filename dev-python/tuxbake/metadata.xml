<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>TuxBake, by [Linaro](https://www.linaro.org/), is a command line tool andPython library that provides portable and repeatable OE builds. TuxBake is a part of [TuxSuite](https://tuxsuite.com), a suite of tools and services to help developers do build and boot test Linux kernel and OE distros.[[_TOC_]]# About TuxBakeTuxBake is a python application to build OE Distros. It takes a json file as input whichdescribes the layers needed to be downloaded, local_conf and bblayers_conf parameters alongwith machine, distro targets. It downloads the layers for with using either git protocols orthe repo tool. It uses containers (both Docker and Podman) to provide a standardised buildenvironments to do the build which can be easily reproduced by other users.# Installing TuxbakeThere are several options for installing TuxBake (TuxMake is a prerequisite):```pip3 install tuxmakegit clone https://gitlab.com/Linaro/tuxbakecd tuxbake/pip3 install .```## Tools requiredThe tools that needs to be installed on the host system are:```docker or podman, git, repo```# build-definition.json template with repo```{  &quot;container&quot;: &quot;ubuntu-20.04&quot;,  &quot;distro&quot;: &quot;rpb&quot;,  &quot;envsetup&quot;: &quot;setup-environment&quot;,  &quot;machine&quot;: &quot;dragonboard-845c&quot;,  &quot;extraconfigs&quot;: [],  &quot;sources&quot;: {    &quot;repo&quot;: {      &quot;branch&quot;: &quot;qcom/dunfell&quot;,      &quot;manifest&quot;: &quot;default.xml&quot;,      &quot;url&quot;: &quot;https://github.com/96boards/oe-rpb-manifest.git&quot;    }  },  &quot;target&quot;: &quot;rpb-console-image rpb-console-image-test rpb-desktop-image rpb-desktop-image-test&quot;}```# build-definition.json template with git repositories```{  &quot;sources&quot;: {    &quot;git_trees&quot;: [      {        &quot;url&quot;: &quot;http://git.yoctoproject.org/git/poky&quot;,        &quot;branch&quot;: &quot;honister&quot;      },      {        &quot;url&quot;: &quot;https://github.com/ndechesne/meta-qcom&quot;,        &quot;branch&quot;: &quot;honister&quot;      }    ]  },  &quot;container&quot;: &quot;ubuntu-20.04&quot;,  &quot;envsetup&quot;: &quot;poky/oe-init-build-env&quot;,  &quot;extraconfigs&quot;: [],  &quot;distro&quot;: &quot;poky&quot;,  &quot;machine&quot;: &quot;dragonboard-845c&quot;,  &quot;target&quot;: &quot;core-image-minimal&quot;,  &quot;bblayers_conf&quot;: [  &quot;BBLAYERS += \&quot;../meta-qcom/\&quot;&quot;  ],    &quot;environment&quot;: {  }```# Fields of build-defintion.json## sourcesThe sources is a dictionary with single item. It could be either git_trees or repo.### git_treesThe git_trees is a list of dictionary object. Each dictionaryobject will have &quot;url&quot; and one of the following &quot;branch&quot;, &quot;ref&quot;or the &quot;sha&quot; field.  If specifying the &quot;ref&quot; feild that shouldbe in any of the formats:&quot;ref&quot;: &quot;refs/pull/number/head&quot;&quot;ref&quot;: &quot;refs/pull/number/merge&quot;&quot;ref&quot;: &quot;refs/tags/tag&quot;Note: The &quot;number&quot; is the number of the pull request. and formerge requests in Gitlab, just change &quot;pull&quot; to&quot;merge-requests&quot;.### repoThe repo field is a dictionary object. The dictionary should have &quot;branch&quot;, &quot;manifest&quot; and &quot;url&quot; field describing where the manifests are hosted along with the branch and manifest file to be used in the build.## distroThis is the distro variable passed to OE build.## dl_dirThis should be the absolute path to the download directory that is passed to OE build. NOTE: It will not work specifying the 'dl_dir' string with '~/' or '$HOME' in the path.## sstate_dirThis should be the absolute path to the sstate-cache directory that is passed to OE build. NOTE: It will not work specifying the 'sstate_dir' string with '~/' or '$HOME' in the path.## sstate_mirrorThis should start with 'file:///some/local/dir/sstate/PATH' and/or 'https://someserver.tld/share/sstate/PATH;downloadfilename=PATH' sstate-cache directory that is passed to OE build.## envsetupThis is path to the script relative to the source directory that needs to be sourced to setup bitbake build environment.## extraconfigsThis is a list of string and each entry corresponds to some extra configs that will be used while building the target.## machineThis is the machine variable passed to OE build.## targetThis the target passed to the bitbake command.## containerThis is the container used by Docker or Podman to do the build. We currently support ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, ubuntu-22.04, centos-8, debian-bullseye, debian-buster, debian-stretch, fedora-33, fedora-34, opensuse-leap-15.1, opensuse-leap-15.2## local_confThis is a list of of string and each entry corresponds to a line in local.conf file. The list of string is converted to local.conf file.## bblayers_confThis is a list of of string and each entry corresponds to a line in bblayers.conf file. The list of string is converted to bblayers.conf file.## environmentThis is a dictionary of environment variables which are set before calling bitbake.# Using TuxBakeTuxBake takes the build-definition as input along with a source directory path where the code is downloaded.# ExamplesBuild OE example:    $ tuxbake --build-definition examples/oe-rpb.json --src-dir $PWD/oe/</longdescription>
</pkgmetadata>