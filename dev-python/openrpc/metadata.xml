<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=center&gt;  &lt;h1&gt;OpenRPC&lt;/h1&gt;  &lt;h3&gt;OpenRPC provides classes to rapidly develop an  &lt;a href=&quot;https://open-rpc.org&quot;&gt;OpenRPC&lt;/a&gt; server.&lt;/h3&gt;  &lt;img src=&quot;https://img.shields.io/badge/License-MIT-blue.svg&quot;   height=&quot;20&quot;   alt=&quot;License: MIT&quot;&gt;  &lt;img src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;   height=&quot;20&quot;   alt=&quot;Code style: black&quot;&gt;  &lt;img src=&quot;https://img.shields.io/pypi/v/openrpc.svg&quot;   height=&quot;20&quot;   alt=&quot;PyPI version&quot;&gt;  &lt;img src=&quot;https://img.shields.io/badge/coverage-100%25-success&quot;   height=&quot;20&quot;   alt=&quot;Code Coverage&quot;&gt;  &lt;a href=&quot;https://gitlab.com/mburkard/openrpc/-/blob/main/CONTRIBUTING.md&quot;&gt;    &lt;img src=&quot;https://img.shields.io/static/v1.svg?label=Contributions&amp;message=Welcome&amp;color=2267a0&quot;     height=&quot;20&quot;     alt=&quot;Contributions Welcome&quot;&gt;  &lt;/a&gt;&lt;/div&gt;## InstallationOpenRPC is on PyPI and can be installed with:```shellpip install openrpc``````shellpoetry add openrpc```## UsageThis library provides an `RPCServer` class that can be used to quickly create an OpenRPCServer.```pythonfrom openrpc import RPCServerrpc = RPCServer(title=&quot;Demo Server&quot;, version=&quot;1.0.0&quot;)```### Register a function as an RPC MethodTo register a method with the RPCServer add the `@rpc.method()` decorator to a function.```python@rpc.method()def add(a: int, b: int) -&gt; int:    return a + b```### Process JSON RPC RequestOpenRPC is transport agnostic. To use it, pass JSON RPC requests as strings or bytestrings to the `process_request` or `process_request_async` method.The `process_request` will return a JSON RPC response as a string.```pythonreq = &quot;&quot;&quot;{  &quot;id&quot;: 1,  &quot;method&quot;: &quot;add&quot;,  &quot;params&quot;: {&quot;a&quot;: 2, &quot;b&quot;: 2},  &quot;jsonrpc&quot;: &quot;2.0&quot;}&quot;&quot;&quot;await rpc.process_request_async(req)# returns -&gt; '{&quot;id&quot;: 1, &quot;result&quot;: 4, &quot;jsonrpc&quot;: &quot;2.0&quot;}'```### Pydantic SupportFor data classes to work properly use Pydantic. RPCServer will use Pydantic for JSONserialization/deserialization when calling methods and when generating schemaswith `rpc.discover`.### RPC DiscoverThe `rpc.discover` method is automatically generated. It relies heavily on type hints.## Example Using SanicA quick example using `OpenRPC` exposing the methodsusing a [Sanic](https://sanic.dev/en/) websocket server.```pythonfrom openrpc import RPCServerfrom sanic import Request, Sanic, Websocketapp = Sanic(&quot;DemoServer&quot;)rpc = RPCServer(title=&quot;DemoServer&quot;, version=&quot;1.0.0&quot;)@rpc.method()async def add(a: int, b: int) -&gt; int:    return a + b@app.websocket(&quot;/api/v1/&quot;)async def process_websocket(_request: Request, ws: Websocket) -&gt; None:    async for msg in ws:        json_rpc_response = await rpc.process_request_async(msg)        await ws.send(json_rpc_response)if __name__ == &quot;__main__&quot;:    app.run()```Example In```json{  &quot;id&quot;: 1,  &quot;method&quot;: &quot;add&quot;,  &quot;params&quot;: {    &quot;a&quot;: 1,    &quot;b&quot;: 3  },  &quot;jsonrpc&quot;: &quot;2.0&quot;}```Example Result Out```json{  &quot;id&quot;: 1,  &quot;result&quot;: 4,  &quot;jsonrpc&quot;: &quot;2.0&quot;}```## Support The Developer&lt;a href=&quot;https://www.buymeacoffee.com/mburkard&quot; target=&quot;_blank&quot;&gt;  &lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-blue.png&quot;       width=&quot;217&quot;       height=&quot;60&quot;       alt=&quot;Buy Me A Coffee&quot;&gt;&lt;/a&gt;</longdescription>
</pkgmetadata>