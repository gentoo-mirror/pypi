<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># alianator[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/alianator?logo=python&amp;logoColor=white&amp;style=for-the-badge)](https://pypi.org/project/alianator)[![PyPI](https://img.shields.io/pypi/v/alianator?logo=pypi&amp;color=green&amp;logoColor=white&amp;style=for-the-badge)](https://pypi.org/project/alianator)[![GitHub release (latest SemVer)](https://img.shields.io/github/v/release/celsiusnarhwal/alianator?logo=github&amp;color=orange&amp;logoColor=white&amp;style=for-the-badge)](https://github.com/celsiusnarhwal/alianator/releases)[![PyPI - License](https://img.shields.io/pypi/l/alianator?color=03cb98&amp;style=for-the-badge)](https://github.com/celsiusnarhwal/alianator/blob/master/LICENSE)[![Black](https://aegis.celsiusnarhwal.dev/badge/black?style=for-the-badge)](https://github.com/psf/black)alianator is a Discord permission name resolver for [Pycord](https://github.com/Pycord-Development/pycord).It takes Discord's API permission flags (e.g. `manage_guild`) and resolves them to their user-facing aliases (e.g. `Manage Server`).## Installation```bash$ pip install alianator```## Usagealianator can resolve aliases from `discord.Permissions` objects, integers, strings, tuples, lists of strings, and listsof tuples.```pythonimport alianatoralianator.resolve(arg, mode=mode)```The optional `mode` flag can be used to specify which permissions should be resolved. If `mode` is `True`, only grantedpermissions will be resolved; if `mode` is `False`, only denied permissions will be resolved; if `mode` is `None`, allpermissions will be resolved. If `mode` is not explicitly specified, it will default to `True`.```pythonimport alianatorimport discord# Resolving from a discord.Permissions objectperms = discord.Permissions.general()aliases = alianator.resolve(perms)print(aliases)# ['Manage Channels', 'Manage Server', 'View Audit Log', 'Read Messages', 'View Server Insights', 'Manage Roles', 'Manage Webhooks', 'Manage Emojis and Stickers']# Resolving from an integerperms = 3072aliases = alianator.resolve(perms)print(aliases)# ['View Channel', 'Send Messages and Create Posts']# Resolving from a stringperms = &quot;send_tts_messages&quot;aliases = alianator.resolve(perms)print(aliases)# ['Send Text-To-Speech Messages']# Resolving from a tupleperms = (&quot;moderate_members&quot;, True)aliases = alianator.resolve(perms)print(aliases)# ['Timeout Members']# Resolving from a list of stringsperms = [&quot;manage_guild&quot;, &quot;manage_emojis&quot;]aliases = alianator.resolve(perms)print(aliases)# ['Manage Server', 'Manage Emojis and Stickers']# Resolving from a list of tuplesperms = [(&quot;use_slash_commands&quot;, True), (&quot;use_voice_activation&quot;, True)]aliases = alianator.resolve(perms)print(aliases)# ['Use Application Commands', 'Use Voice Activity']```That's about all there is to it. alianator does one thing and does it well.## Licensealianator is released under the [MIT License](https://github.com/celsiusnarhwal/alianator/blob/master/LICENSE.md).</longdescription>
</pkgmetadata>