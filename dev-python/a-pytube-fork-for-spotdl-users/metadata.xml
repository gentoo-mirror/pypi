<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>##  (24 JULY 2020) Note: Actively soliciting contributers!Ping @ronncc if you would like to help out &lt;div align=&quot;center&quot;&gt;  &lt;p&gt;  &lt;img src=&quot;https://github.com/nficano/pytube/blob/master/images/pytube.png?raw=true&quot; width=&quot;350&quot; height=&quot;328&quot; alt=&quot;pytube logo&quot; /&gt;  &lt;/p&gt;  &lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://img.shields.io/pypi/v/pytube.svg&quot; alt=&quot;pypi&quot;&gt;  &lt;a href=&quot;https://travis-ci.org/nficano/pytube&quot;&gt;&lt;img src=&quot;https://travis-ci.org/nficano/pytube.svg?branch=master&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;http://python-pytube.readthedocs.io/en/latest/?badge=latest&quot;&gt;&lt;img src=&quot;https://readthedocs.org/projects/python-pytube/badge/?version=latest&quot; /&gt;&lt;/a&gt;  &lt;a href=&quot;https://coveralls.io/github/nficano/pytube?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/nficano/pytube/badge.svg?branch=master#23e6f7ac56dd3bde&quot; /&gt;&lt;/a&gt;      &lt;a href=&quot;https://pypi.org/project/pytube/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/dm/pytube.svg&quot; alt=&quot;pypi&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/pytube/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/pytube.svg&quot; /&gt;&lt;/a&gt;    &lt;p&gt;  &lt;/p&gt;&lt;/div&gt;# pytube*pytube* is a very serious, lightweight, dependency-free Python library (and command-line utility) for downloading YouTube Videos.## DescriptionYouTube is the most popular video-sharing platform in the world and as a hacker you may encounter a situation where you want to script something to download videos.  For this I present to you *pytube*.*pytube* is a lightweight library written in Python. It has no third party dependencies and aims to be highly reliable.*pytube* also makes pipelining easy, allowing you to specify callback functions for different download events, such as  ``on progress`` or ``on complete``.Finally *pytube* also includes a command-line utility, allowing you to quickly download videos right from terminal.### Behold, a perfect balance of simplicity versus flexibility:```python &gt;&gt;&gt; YouTube('https://youtu.be/9bZkp7q19f0').streams.first().download() &gt;&gt;&gt; yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0') &gt;&gt;&gt; yt.streams  ... .filter(progressive=True, file_extension='mp4')  ... .order_by('resolution')  ... .desc()  ... .first()  ... .download()```## Features- Support for Both Progressive &amp; DASH Streams- Support for downloading complete playlist- Easily Register ``on_download_progress`` &amp; ``on_download_complete`` callbacks- Command-line Interfaced Included- Caption Track Support- Outputs Caption Tracks to .srt format (SubRip Subtitle)- Ability to Capture Thumbnail URL.- Extensively Documented Source Code- No Third-Party Dependencies## InstallationDownload using pip via pypi.```bash$ pip install pytube```## Getting startedLet's begin with showing how easy it is to download a video with pytube:```python&gt;&gt;&gt; from pytube import YouTube&gt;&gt;&gt; YouTube('http://youtube.com/watch?v=9bZkp7q19f0').streams.first().download()```This example will download the highest quality progressive download stream available.Next, let's explore how we would view what video streams are available:```python&gt;&gt;&gt; yt = YouTube('http://youtube.com/watch?v=9bZkp7q19f0')&gt;&gt;&gt; yt.streams.all() [&lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;43&quot; mime_type=&quot;video/webm&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp8.0&quot; acodec=&quot;vorbis&quot;&gt;, &lt;Stream: itag=&quot;18&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.42001E&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;36&quot; mime_type=&quot;video/3gpp&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;mp4v.20.3&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;17&quot; mime_type=&quot;video/3gpp&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;mp4v.20.3&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;137&quot; mime_type=&quot;video/mp4&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.640028&quot;&gt;, &lt;Stream: itag=&quot;248&quot; mime_type=&quot;video/webm&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;136&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401f&quot;&gt;, &lt;Stream: itag=&quot;247&quot; mime_type=&quot;video/webm&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;135&quot; mime_type=&quot;video/mp4&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;, &lt;Stream: itag=&quot;244&quot; mime_type=&quot;video/webm&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;134&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;, &lt;Stream: itag=&quot;243&quot; mime_type=&quot;video/webm&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;133&quot; mime_type=&quot;video/mp4&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d4015&quot;&gt;, &lt;Stream: itag=&quot;242&quot; mime_type=&quot;video/webm&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;160&quot; mime_type=&quot;video/mp4&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d400c&quot;&gt;, &lt;Stream: itag=&quot;278&quot; mime_type=&quot;video/webm&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;, &lt;Stream: itag=&quot;140&quot; mime_type=&quot;audio/mp4&quot; abr=&quot;128kbps&quot; acodec=&quot;mp4a.40.2&quot;&gt;, &lt;Stream: itag=&quot;171&quot; mime_type=&quot;audio/webm&quot; abr=&quot;128kbps&quot; acodec=&quot;vorbis&quot;&gt;, &lt;Stream: itag=&quot;249&quot; mime_type=&quot;audio/webm&quot; abr=&quot;50kbps&quot; acodec=&quot;opus&quot;&gt;, &lt;Stream: itag=&quot;250&quot; mime_type=&quot;audio/webm&quot; abr=&quot;70kbps&quot; acodec=&quot;opus&quot;&gt;, &lt;Stream: itag=&quot;251&quot; mime_type=&quot;audio/webm&quot; abr=&quot;160kbps&quot; acodec=&quot;opus&quot;&gt;]```You may notice that some streams listed have both a video codec and audio codec, while others have just video or just audio, this is a result of YouTube supporting a streaming technique called Dynamic Adaptive Streaming over HTTP (DASH).In the context of pytube, the implications are for the highest quality streams; you now need to download both the audio and video tracks and then post-process them with software like FFmpeg to merge them.The legacy streams that contain the audio and video in a single file (referred to as &quot;progressive download&quot;) are still available, but only for resolutions 720p and below.To only view these progressive download streams:```python &gt;&gt;&gt; yt.streams.filter(progressive=True).all()  [&lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;43&quot; mime_type=&quot;video/webm&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp8.0&quot; acodec=&quot;vorbis&quot;&gt;,  &lt;Stream: itag=&quot;18&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.42001E&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;36&quot; mime_type=&quot;video/3gpp&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;mp4v.20.3&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;17&quot; mime_type=&quot;video/3gpp&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;mp4v.20.3&quot; acodec=&quot;mp4a.40.2&quot;&gt;]```Conversely, if you only want to see the DASH streams (also referred to as &quot;adaptive&quot;) you can do:```python&gt;&gt;&gt; yt.streams.filter(adaptive=True).all() [&lt;Stream: itag=&quot;137&quot; mime_type=&quot;video/mp4&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.640028&quot;&gt;,  &lt;Stream: itag=&quot;248&quot; mime_type=&quot;video/webm&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;136&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401f&quot;&gt;,  &lt;Stream: itag=&quot;247&quot; mime_type=&quot;video/webm&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;135&quot; mime_type=&quot;video/mp4&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;,  &lt;Stream: itag=&quot;244&quot; mime_type=&quot;video/webm&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;134&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;,  &lt;Stream: itag=&quot;243&quot; mime_type=&quot;video/webm&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;133&quot; mime_type=&quot;video/mp4&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d4015&quot;&gt;,  &lt;Stream: itag=&quot;242&quot; mime_type=&quot;video/webm&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;160&quot; mime_type=&quot;video/mp4&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d400c&quot;&gt;,  &lt;Stream: itag=&quot;278&quot; mime_type=&quot;video/webm&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;vp9&quot;&gt;,  &lt;Stream: itag=&quot;140&quot; mime_type=&quot;audio/mp4&quot; abr=&quot;128kbps&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;171&quot; mime_type=&quot;audio/webm&quot; abr=&quot;128kbps&quot; acodec=&quot;vorbis&quot;&gt;,  &lt;Stream: itag=&quot;249&quot; mime_type=&quot;audio/webm&quot; abr=&quot;50kbps&quot; acodec=&quot;opus&quot;&gt;,  &lt;Stream: itag=&quot;250&quot; mime_type=&quot;audio/webm&quot; abr=&quot;70kbps&quot; acodec=&quot;opus&quot;&gt;,  &lt;Stream: itag=&quot;251&quot; mime_type=&quot;audio/webm&quot; abr=&quot;160kbps&quot; acodec=&quot;opus&quot;&gt;]```You can also download a complete Youtube playlist:```python&gt;&gt;&gt; from pytube import Playlist&gt;&gt;&gt; pl = Playlist(&quot;https://www.youtube.com/watch?v=Edpy1szoG80&amp;list=PL153hDY-y1E00uQtCVCVC8xJ25TYX8yPU&quot;)&gt;&gt;&gt; pl.download_all()&gt;&gt;&gt; # or if you want to download in a specific directory&gt;&gt;&gt; pl.download_all('/path/to/directory/')```This will download the highest progressive stream available (generally 720p) from the given playlist. Later more options would be given for user's flexibilityto choose video resolution.Pytube allows you to filter on every property available (see the documentation for the complete list), let's take a look at some of the most useful ones.To list the audio only streams:```python&gt;&gt;&gt; yt.streams.filter(only_audio=True).all()  [&lt;Stream: itag=&quot;140&quot; mime_type=&quot;audio/mp4&quot; abr=&quot;128kbps&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;171&quot; mime_type=&quot;audio/webm&quot; abr=&quot;128kbps&quot; acodec=&quot;vorbis&quot;&gt;,  &lt;Stream: itag=&quot;249&quot; mime_type=&quot;audio/webm&quot; abr=&quot;50kbps&quot; acodec=&quot;opus&quot;&gt;,  &lt;Stream: itag=&quot;250&quot; mime_type=&quot;audio/webm&quot; abr=&quot;70kbps&quot; acodec=&quot;opus&quot;&gt;,  &lt;Stream: itag=&quot;251&quot; mime_type=&quot;audio/webm&quot; abr=&quot;160kbps&quot; acodec=&quot;opus&quot;&gt;]```To list only ``mp4`` streams:```python&gt;&gt;&gt; yt.streams.filter(subtype='mp4').all() [&lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;18&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.42001E&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;137&quot; mime_type=&quot;video/mp4&quot; res=&quot;1080p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.640028&quot;&gt;,  &lt;Stream: itag=&quot;136&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401f&quot;&gt;,  &lt;Stream: itag=&quot;135&quot; mime_type=&quot;video/mp4&quot; res=&quot;480p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;,  &lt;Stream: itag=&quot;134&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d401e&quot;&gt;,  &lt;Stream: itag=&quot;133&quot; mime_type=&quot;video/mp4&quot; res=&quot;240p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d4015&quot;&gt;,  &lt;Stream: itag=&quot;160&quot; mime_type=&quot;video/mp4&quot; res=&quot;144p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.4d400c&quot;&gt;,  &lt;Stream: itag=&quot;140&quot; mime_type=&quot;audio/mp4&quot; abr=&quot;128kbps&quot; acodec=&quot;mp4a.40.2&quot;&gt;]```Multiple filters can also be specified:```python&gt;&gt;&gt; yt.streams.filter(subtype='mp4', progressive=True).all()&gt;&gt;&gt; # this can also be expressed as:&gt;&gt;&gt; yt.streams.filter(subtype='mp4').filter(progressive=True).all()  [&lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;,  &lt;Stream: itag=&quot;18&quot; mime_type=&quot;video/mp4&quot; res=&quot;360p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.42001E&quot; acodec=&quot;mp4a.40.2&quot;&gt;]```You also have an interface to select streams by their itag, without needing to filter:```python&gt;&gt;&gt; yt.streams.get_by_itag(22)  &lt;Stream: itag=&quot;22&quot; mime_type=&quot;video/mp4&quot; res=&quot;720p&quot; fps=&quot;30fps&quot; vcodec=&quot;avc1.64001F&quot; acodec=&quot;mp4a.40.2&quot;&gt;```If you need to optimize for a specific feature, such as the &quot;highest resolution&quot; or &quot;lowest average bitrate&quot;:```python&gt;&gt;&gt; yt.streams.filter(progressive=True).order_by('resolution').desc().all()```Note that ``order_by`` cannot be used if your attribute is undefined in any of the Stream instances, so be sure to apply a filter to remove those before calling it.If your application requires post-processing logic, pytube allows you to specify an &quot;on download complete&quot; callback function:```python &gt;&gt;&gt; def convert_to_aac(stream, file_handle):         return  # do work &gt;&gt;&gt; yt.register_on_complete_callback(convert_to_aac)```Similarly, if your application requires on-download progress logic, pytube exposes a callback for this as well:```python &gt;&gt;&gt; def show_progress_bar(stream, chunk, file_handle, bytes_remaining):         return  # do work &gt;&gt;&gt; yt.register_on_progress_callback(show_progress_bar)```## Command-line interfacepytube also ships with a tiny cli interface for downloading and probing videos.Let's start with downloading:```bash$ pytube http://youtube.com/watch?v=9bZkp7q19f0 --itag=22```To view available streams:```bash$ pytube http://youtube.com/watch?v=9bZkp7q19f0 --list```Finally, if you're filing a bug report, the cli contains a switch called ``--build-playback-report``, which bundles up the state, allowing others to easily replay your issue.</longdescription>
</pkgmetadata>