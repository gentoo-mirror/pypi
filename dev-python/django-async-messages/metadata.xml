<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====================django-async-messages=====================Simple asynchronous messages for django.  Plays nicely with Celery.Questions=========What problem does this solve?-----------------------------Suppose a user instigates an expensive task that you are processing offline (egusing Celery).  This library provides a simple mechanism for notifying the userwhen the task is finished, utilising Django's messaging framework.What's an example?------------------You might use Celery to generate a large report and then employ this library tonotify the user that their report is ready to be downloaded.  The user will seethe message you've sent them when they make their next request after the messageis submitted.How does it work?-----------------A cache is used to persist the messages, and middleware is used to pick these upand submit them to `Django's messaging framework`_.  All very simple... _`Django's messaging framework`: https://docs.djangoproject.com/en/dev/ref/contrib/messages/Aren't there other libraries that do this?------------------------------------------Yes, there are - but they solve the problem in different ways:* `django-offline-messages`_ - this provides an alternative storage backend that  Django's messages framework can use.* `django-notifications`_  .. _`django-offline-messages`: https://github.com/dym/django-offline-messages.. _`django-notifications`: https://github.com/jtauber/django-notificationWhat's good about this implementation?--------------------------------------* It's simple, fast and easy to use.  * It works cohesively with existing Django cache and messages framework.  It  will work no matter what cache backend your are using, and whatever storage  backend is used for messages. What's bad?-----------* A user may miss the message if they navigating quickly between pages. But   this is a general problem of the Django messages framework.Install=======From PyPI (stable)::    pip install django-async-messagesFrom Github (unstable)::    pip install git+git://github.com/codeinthehole/django-async-messages#egg=djang-async-messagesAdd ``'async_messages.middleware.AsyncMiddleware'`` to your ``MIDDLEWARE_CLASSES``.Ensure it comes after ``'django.contrib.messages.middleware.MessageMiddleware'``.You need to have ``CACHES`` configured in you settings for this to work.  As usual,memcache is the best choice.  Note that `local memory caching`_ is not suitable aseach process has its own private cache and a Celery task can't communicate withthe webserver process cache... _`local memory caching`: https://docs.djangoproject.com/en/dev/topics/cache/#local-memory-cachingUse===Send a message to a single user::    &gt;&gt;&gt; from async_messages import message_user    &gt;&gt;&gt; from django.contrib.auth.models import User    &gt;&gt;&gt; barry = User.objects.get(username='barry')    &gt;&gt;&gt; message_user(barry, &quot;Barry, your report is ready&quot;) Send a message to lots of users::    &gt;&gt;&gt; from async_messages import message_users    &gt;&gt;&gt; staff = User.objects.filter(is_staff=True)    &gt;&gt;&gt; message_users(staff, &quot;All budgets must be spent by the end of the day&quot;)Specify message level::    &gt;&gt;&gt; from django.contrib.messages import constants    &gt;&gt;&gt; message_users(staff, &quot;Boom!&quot;, constants.WARNING)Send multiple messages to a single user::    &gt;&gt;&gt; from async_messages import message_user    &gt;&gt;&gt; from django.contrib.auth.models import User    &gt;&gt;&gt; barry = User.objects.get(username='barry')    &gt;&gt;&gt; message_user(barry, &quot;Barry, your report is queued up for processing&quot;)     &gt;&gt;&gt; # do more awesome stuff    &gt;&gt;&gt; message_user(barry, &quot;Barry, your report is ready&quot;) Alternative way to send a message to a single user, imitating the django.contrib.messages API::    &gt;&gt;&gt; from async_messages import messages    &gt;&gt;&gt; barry = User.objects.get(username='barry')    &gt;&gt;&gt; messages.debug(barry, &quot;Barry was here&quot;)    &gt;&gt;&gt; messages.info(barry, &quot;Hi, Barry&quot;)    &gt;&gt;&gt; messages.success(barry, &quot;Barry, your report is ready&quot;)    &gt;&gt;&gt; messages.warning(barry, &quot;Barry, you didn't lock your session&quot;)    &gt;&gt;&gt; messages.error(barry, &quot;You are not Barry&quot;)Contributing============Fork, clone and create a virtualenv.  Then run::    make installRun tests with::    ./runtests.pyPlease submit pull requests using 'develop' as the target branch.License=======MIT_.. _MIT: http://en.wikipedia.org/wiki/MIT_LicenseChangelog=========0.3.1-----* Fix bug around request instances that don't have a user attribute0.3---* Mimic ``django.contrib.messages`` API for sending a message to a user0.2---* Added possibility to queue multiple messages0.1.2-----* Altered dependency on Django to be only 1.2+0.1.1-----* Altered middleware to use ``process_response``.* Better docstrings0.1---* Minimum viable product</longdescription>
</pkgmetadata>