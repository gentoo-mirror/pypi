<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>***PEX***.. image:: https://github.com/pantsbuild/pex/workflows/CI/badge.svg?branch=main    :target: https://github.com/pantsbuild/pex/actions?query=branch%3Amain+workflow%3ACI.. image:: https://img.shields.io/pypi/l/pex.svg    :target: https://pypi.org/project/pex/.. image:: https://img.shields.io/pypi/v/pex.svg    :target: https://pypi.org/project/pex/.. image:: https://img.shields.io/pypi/pyversions/pex.svg    :target: https://pypi.org/project/pex/.. image:: https://img.shields.io/pypi/wheel/pex.svg    :target: https://pypi.org/project/pex/#files.. contents:: **Contents**Overview========pex is a library for generating .pex (Python EXecutable) files which areexecutable Python environments in the spirit of `virtualenvs &lt;http://virtualenv.org&gt;`_.pex is an expansion upon the ideas outlined in`PEP 441 &lt;https://peps.python.org/pep-0441/&gt;`_and makes the deployment of Python applications as simple as ``cp``.  pex files may eveninclude multiple platform-specific Python distributions, meaning that a single pex filecan be portable across Linux and OS X.pex files can be built using the ``pex`` tool.  Build systems such as `Pants&lt;http://pantsbuild.org/&gt;`_, `Buck &lt;http://facebook.github.io/buck/&gt;`_, and  `{py}gradle &lt;https://github.com/linkedin/pygradle&gt;`_  alsosupport building .pex files directly.Still unsure about what pex does or how it works?  Watch this quick lightningtalk: `WTF is PEX? &lt;http://www.youtube.com/watch?v=NmpnGhRwsu0&gt;`_.pex is licensed under the Apache2 license.Installation============To install pex, simply.. code-block:: bash    $ pip install pexYou can also build pex in a git clone using tox:.. code-block:: bash    $ tox -e package    $ cp dist/pex ~/binThis builds a pex binary in ``dist/pex`` that can be copied onto your ``$PATH``.The advantage to this approach is that it keeps your Python environment as empty aspossible and is more in-line with what pex does philosophically.Simple Examples===============Launch an interpreter with ``requests``, ``flask`` and ``psutil`` in the environment:.. code-block:: bash    $ pex requests flask 'psutil&gt;2,&lt;3'Save Dependencies From Pip~~~~~~~~~~~~~~~~~~~~~~~~~~Or instead freeze your current virtualenv via requirements.txt and execute it anywhere:.. code-block:: bash    $ pex $(pip freeze) -o my_virtualenv.pex    $ deactivate    $ ./my_virtualenv.pexEphemeral Environments~~~~~~~~~~~~~~~~~~~~~~Run webserver.py in an environment containing ``flask`` as a quick way to experiment:.. code-block:: bash    $ pex flask -- webserver.pyLaunch Sphinx in an ephemeral pex environment using the Sphinx entry point ``sphinx:main``:.. code-block:: bash    $ pex sphinx -e sphinx:main -- --helpUsing Entry Points~~~~~~~~~~~~~~~~~~Projects specifying a ``console_scripts`` entry point in their configurationcan build standalone executables for those entry points.To build a standalone ``pex-tools-executable.pex`` binary that runs the``pex-tools`` console script found in all pex version ``2.1.35`` and newer distributions:.. code-block:: bash    $ pex &quot;pex&gt;=2.1.35&quot; --console-script pex-tools --output-file pex-tools-executable.pexSpecifying A Specific Interpreter~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You can also build pex files that use a specific interpreter type:.. code-block:: bash    $ pex &quot;pex&gt;=2.1.35&quot; -c pex-tools --python=pypy -o pex-tools-pypy-executable.pexMost pex options compose well with one another, so the above commands can bemixed and matched, and equivalent short options are available.For a full list of options, just type ``pex --help``.Integrating pex into your workflow==================================If you use tox (and you should!), a simple way to integrate pex into yourworkflow is to add a packaging test environment to your ``tox.ini``:.. code-block:: ini    [testenv:package]    deps = pex    commands = pex . -o dist/app.pexThen ``tox -e package`` will produce a relocatable copy of your applicationthat you can copy to staging or production environments.Documentation=============More documentation about Pex, building .pex files, and how .pex files workis available at https://pex.readthedocs.io.Development===========Pex uses `tox &lt;https://tox.wiki/en/latest/&gt;`_ for test and development automation. To runthe test suite, just invoke tox:.. code-block:: bash    $ toxIf you don't have tox, you can generate a pex of tox:.. code-block::    $ pex tox -c tox -o ~/bin/toxTox provides many useful commands and options, explained at https://tox.wiki/en/latest/ .Below, we provide some of the most commonly used commands used when working on Pex, but thedocs are worth acquainting yourself with to better understand how Tox works and how to do moreadvanced commands.To run a specific environment, identify the name of the environment you'd like to invoke byrunning ``tox --listenvs-all``, then invoke like this:.. code-block::    $ tox -e format-runTo run MyPy:.. code-block::    $ tox -e typecheckAll of our tox test environments allow passthrough arguments, which can be helpful to runspecific tests:.. code-block::    $ tox -e py37-integration -- -k test_reproducible_buildTo run Pex from source, rather than through what is on your PATH, invoke via Python:.. code-block::    $ python -m pexContributing============To contribute, follow these instructions: https://www.pantsbuild.org/docs/contributor-overview</longdescription>
</pkgmetadata>