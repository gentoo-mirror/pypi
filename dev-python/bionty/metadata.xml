<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Stars](https://img.shields.io/github/stars/laminlabs/bionty?logo=GitHub&amp;color=yellow)](https://github.com/laminlabs/bionty)[![Coverage](https://codecov.io/gh/laminlabs/bionty/branch/main/graph/badge.svg?token=8292E0S0Z7)](https://codecov.io/gh/laminlabs/bionty)[![pypi](https://img.shields.io/pypi/v/bionty?color=blue&amp;label=pypi%20package)](https://pypi.org/project/bionty)# BiontyBiological ontologies for data scientists: look up, search, inspect, and map terms.To manage custom bio-registries along with public ontologies, see this [LaminDB guide](https://lamin.ai/docs/biology/registries).## Entities- `Gene` - [Ensembl](https://ensembl.org/), [NCBI Gene](https://www.ncbi.nlm.nih.gov/gene/)- `Protein` - [Uniprot](https://www.uniprot.org/)- `Species` - [NCBI Taxonomy](https://www.ncbi.nlm.nih.gov/taxonomy/), [Ensembl Species](https://useast.ensembl.org/info/about/species.html)- `CellLine` - [Cell Line Ontology](https://github.com/CLO-ontology/CLO)- `CellType` - [Cell Ontology](https://obophenotype.github.io/cell-ontology/)- `CellMarker` - [CellMarker](http://xteam.xbio.top/CellMarker)- `Tissue` - [Uberon](http://obophenotype.github.io/uberon/)- `Disease` - [Mondo](https://mondo.monarchinitiative.org/), [Human Disease](https://disease-ontology.org/)- `Phenotype` - [Human Phenotype](https://hpo.jax.org/app/), [Mammalian Phenotype](http://obofoundry.org/ontology/mp.html), [Zebrafish Phenotype](http://obofoundry.org/ontology/zp.html)- `Pathway` - [Gene Ontology](https://bioportal.bioontology.org/ontologies/GO), [Pathway Ontology](https://bioportal.bioontology.org/ontologies/PW)- `ExperimentalFactor` - [Experimental Factor Ontology](https://www.ebi.ac.uk/ols/ontologies/efo)- `Drug` - [Drug Ontology](https://bioportal.bioontology.org/ontologies/DRON)- `BFXPipeline` - largely based on [nf-core](https://nf-co.re/)Check out [sources.yaml](https://github.com/laminlabs/bionty/blob/main/bionty/sources/sources.yaml) for details.Didn't see your favorite source or version? Bionty is [extendable](https://lamin.ai/docs/bionty/extend)!## InstallationBionty is a Python package available for ![pyversions](https://img.shields.io/pypi/pyversions/bionty)```shellpip install bionty```## Usage overview &amp; quickstart```pythonimport bionty as bt```### Look up terms with auto-complete```pythonlookup = bt.ExperimentalFactor().lookup()# access via Python-friendly keyslookup.single_cell_rna_sequencing# access via dictionarylookup_dict = lookup.dict()lookup_dict[&quot;single-cell RNA sequencing&quot;]```### Search ontology terms```pythoncelltype_bionty = bt.CellType()# Free text search against a fieldcelltype_bionty.search(&quot;gamma delta T cell&quot;)```### Validate, inspect &amp; standardize terms```pythongene_bionty = bt.Gene()# Validate against a field of referencegene_bionty.validate([&quot;A1BG&quot;, &quot;FANCD1&quot;], gene_bionty.symbol)# Run full inspection on the gene symbolsgene_bionty.inspect([&quot;A1BG&quot;, &quot;FANCD1&quot;], gene_bionty.symbol)# Convert synonyms to standardized gene symbolsgene_bionty.standardize([&quot;A1BG&quot;, &quot;FANCD1&quot;])```### Access a reference DataFrame```python# Reference table of the human genesdf = bt.Gene(species=&quot;human&quot;).df()```### Track ontology sources```python# Display currently used sourcesbt.display_currently_used_sources()# Display all managed sourcesbt.display_available_sources()# Local yaml file specifying all managed sourcesbt.LOCAL_SOURCES# Access to the Mondo ontologydisease = bt.Disease(source=&quot;mondo&quot;)# Access to the Human Disease ontologydisease = bt.Disease(source=&quot;doid&quot;, version=&quot;2023-01-30&quot;)```## DocumentationRead the [docs](https://lamin.ai/docs/bionty/).</longdescription>
</pkgmetadata>