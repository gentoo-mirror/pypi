<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ðŸŸ£ aiopurpleair: A Python3, asyncio-based library to interact with the PurpleAir API[![CI][ci-badge]][ci][![PyPI][pypi-badge]][pypi][![Version][version-badge]][version][![License][license-badge]][license][![Code Coverage][codecov-badge]][codecov][![Maintainability][maintainability-badge]][maintainability]&lt;a href=&quot;https://www.buymeacoffee.com/bachya1208P&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/default-orange.png&quot; alt=&quot;Buy Me A Coffee&quot; height=&quot;41&quot; width=&quot;174&quot;&gt;&lt;/a&gt;`aiopurpleair` is a Python3, asyncio-based library to interact with the[PurpleAir](https://www2.purpleair.com/) API.- [Installation](#installation)- [Python Versions](#python-versions)- [Usage](#usage)  - [Checking an API Key](#checking-an-api-key)  - [Getting Sensors](#getting-sensors)  - [Getting a Single Sensor](#getting-a-single-sensor)  - [Getting Nearby Sensors](#getting-nearby-sensors)  - [Getting a Map URL](#getting-a-map-url)  - [Connection Pooling](#connection-pooling)- [Contributing](#contributing)# Installation```bashpip install aiopurpleair```# Python Versions`aiopurpleair` is currently supported on:- Python 3.9- Python 3.10- Python 3.11# UsageIn-depth documentation on the API can be found [here][purpleair-api]. Unless otherwisenoted, `aiopurpleair` endeavors to follow the API as closely as possible.## Checking an API KeyTo check whether an API key is valid and what properties it has:```pythonimport asynciofrom aiopurpleair import APIasync def main() -&gt; None:    &quot;&quot;&quot;Run.&quot;&quot;&quot;    api = API(&quot;&lt;API KEY&gt;&quot;)    response = await api.async_check_api_key()    # &gt;&gt;&gt; response.api_key_type == ApiKeyType.READ    # &gt;&gt;&gt; response.api_version == &quot;V1.0.11-0.0.41&quot;    # &gt;&gt;&gt; response.timestamp_utc == datetime(2022, 10, 27, 18, 25, 41)asyncio.run(main())```## Getting Sensors```pythonimport asynciofrom aiopurpleair import APIasync def main() -&gt; None:    &quot;&quot;&quot;Run.&quot;&quot;&quot;    api = API(&quot;&lt;API_KEY&gt;&quot;)    response = await api.sensors.async_get_sensors([&quot;name&quot;])    # &gt;&gt;&gt; response.api_version == &quot;V1.0.11-0.0.41&quot;    # &gt;&gt;&gt; response.data == {    # &gt;&gt;&gt;     131075: SensorModel(sensor_index=131075, name=Mariners Bluff),    # &gt;&gt;&gt;     131079: SensorModel(sensor_index=131079, name=BRSKBV-outside),    # &gt;&gt;&gt; }    # &gt;&gt;&gt; response.data_timestamp_utc == datetime(2022, 11, 3, 19, 25, 31)    # &gt;&gt;&gt; response.fields == [&quot;sensor_index&quot;, &quot;name&quot;]    # &gt;&gt;&gt; response.firmware_default_version == &quot;7.02&quot;    # &gt;&gt;&gt; response.max_age == 604800    # &gt;&gt;&gt; response.timestamp_utc == datetime(2022, 11, 3, 19, 26, 29)asyncio.run(main())```### Method Parameters- `fields` (required): The sensor data fields to include- `location_type` (optional): An LocationType to filter by- `max_age` (optional): Filter results modified within these seconds- `modified_since` (optional): Filter results modified since a UTC datetime- `read_keys` (optional): Read keys for private sensors- `sensor_indices` (optional): Filter results by sensor index## Getting a Single Sensor```pythonimport asynciofrom aiopurpleair import APIasync def main() -&gt; None:    &quot;&quot;&quot;Run.&quot;&quot;&quot;    api = API(&quot;&lt;API_KEY&gt;&quot;)    response = await api.sensors.async_get_sensor(131075)    # &gt;&gt;&gt; response.api_version == &quot;V1.0.11-0.0.41&quot;    # &gt;&gt;&gt; response.data_timestamp_utc == datetime(2022, 11, 5, 16, 36, 21)    # &gt;&gt;&gt; response.sensor == SensorModel(sensor_index=131075, ...),    # &gt;&gt;&gt; response.timestamp_utc == datetime(2022, 11, 5, 16, 37, 3)asyncio.run(main())```### Method Parameters- `sensor_index` (required): The sensor index of the sensor to retrieve.- `fields` (optional): The sensor data fields to include.- `read_key` (optional): A read key for a private sensor.## Getting Nearby SensorsThis method returns a list of `NearbySensorResult` objects that are within a bounding boxaround a given latitude/longitude pair. The list is sorted from nearest to furthest(i.e., the first index in the list is the closest to the latitude/longitude).`NearbySensorResult` objects have two properties:- `sensor`: the corresponding `SensorModel` object- `distance`: the calculated distance (in kilometers) between this sensor and the provided  latitude/longitude```pythonimport asynciofrom aiopurpleair import APIasync def main() -&gt; None:    &quot;&quot;&quot;Run.&quot;&quot;&quot;    api = API(&quot;&lt;API_KEY&gt;&quot;)    sensors = await api.sensors.async_get_nearby_sensors(        [&quot;name&quot;], 51.5285582, -0.2416796, 10    )    # &gt;&gt;&gt; [NearbySensorResult(...), NearbySensorResult(...)]asyncio.run(main())```### Method Parameters- `fields` (required): The sensor data fields to include- `latitude` (required): The latitude of the point to measure distance from- `longitude` (required): The longitude of the point to measure distance from- `distance` (required): The distance from the measured point to search (in kilometers)- `limit` (optional): Limit the results## Getting a Map URLIf you need to get the URL to a particular sensor index on the PurpleAir map website,simply pass the appropriate sensor index to the `get_map_url` method:```pythonimport asynciofrom aiopurpleair import APIasync def main() -&gt; None:    &quot;&quot;&quot;Run.&quot;&quot;&quot;    api = API(&quot;&lt;API_KEY&gt;&quot;)    map_url = api.get_map_url(12345)    # &gt;&gt;&gt; https://map.purpleair.com/1/mAQI/a10/p604800/cC0?select=12345asyncio.run(main())```## Connection PoolingBy default, the library creates a new connection to the PurpleAir API with eachcoroutine. If you are calling a large number of coroutines (or merely want to squeezeout every second of runtime savings possible), an [`aiohttp`][aiohttp] `ClientSession` canbe used for connection pooling:```pythonimport asynciofrom aiohttp import ClientSessionfrom aiopurpleair import APIasync def main() -&gt; None:    &quot;&quot;&quot;Run.&quot;&quot;&quot;    async with ClientSession() as session:        api = await API(&quot;&lt;API KEY&gt;&quot;)        # Get to work...asyncio.run(main())```# ContributingThanks to all of [our contributors][contributors] so far!1. [Check for open features/bugs][issues] or [initiate a discussion on one][new-issue].2. [Fork the repository][fork].3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`4. (_optional, but highly recommended_) Enter the virtual environment: `source ./.venv/bin/activate`5. Install the dev environment: `script/setup`6. Code your new feature or bug fix on a new branch.7. Write tests that cover your new functionality.8. Run tests and ensure 100% code coverage: `poetry run pytest --cov aiopurpleair tests`9. Update `README.md` with any new documentation.10. Submit a pull request![aiohttp]: https://github.com/aio-libs/aiohttp[ci-badge]: https://github.com/bachya/aiopurpleair/workflows/CI/badge.svg[ci]: https://github.com/bachya/aiopurpleair/actions[codecov-badge]: https://codecov.io/gh/bachya/aiopurpleair/branch/dev/graph/badge.svg[codecov]: https://codecov.io/gh/bachya/aiopurpleair[contributors]: https://github.com/bachya/aiopurpleair/graphs/contributors[fork]: https://github.com/bachya/aiopurpleair/fork[issues]: https://github.com/bachya/aiopurpleair/issues[license-badge]: https://img.shields.io/pypi/l/aiopurpleair.svg[license]: https://github.com/bachya/aiopurpleair/blob/main/LICENSE[maintainability-badge]: https://api.codeclimate.com/v1/badges/a03c9e96f19a3dc37f98/maintainability[maintainability]: https://codeclimate.com/github/bachya/aiopurpleair/maintainability[new-issue]: https://github.com/bachya/aiopurpleair/issues/new[new-issue]: https://github.com/bachya/aiopurpleair/issues/new[notion]: https://getnotion.com[purpleair-api]: https://api.purpleair.com/#api-welcome[purpleair]: https://www2.purpleair.com/[pypi-badge]: https://img.shields.io/pypi/v/aiopurpleair.svg[pypi]: https://pypi.python.org/pypi/aiopurpleair[version-badge]: https://img.shields.io/pypi/pyversions/aiopurpleair.svg[version]: https://pypi.python.org/pypi/aiopurpleair</longdescription>
</pkgmetadata>