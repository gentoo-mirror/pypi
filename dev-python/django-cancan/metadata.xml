<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-cancan&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;django-cancan.svg&quot; alt=&quot;Logo&quot; height=&quot;224&quot; /&gt;&lt;/p&gt;[![Build Status](https://travis-ci.com/pgorecki/django-cancan.svg?branch=master)](https://travis-ci.com/pgorecki/django-cancan)[![PyPI version](https://badge.fury.io/py/django-cancan.svg)](https://badge.fury.io/py/django-cancan)`django-cancan` is an authorization library for Django. It works on top of default Django permissions and allows to restrict the resources (models and objects) a given user can access.This library is inspired by [cancancan](https://github.com/CanCanCommunity/cancancan) for Ruby on Rails.## Key features- All of your permissions logic is kept in one place. User permissions are defined in a single function and not scattered across views,  querysets, etc.- Same permissions logic is used to check permissions on a single model instance and to generate queryset containing all instances that the user can access- Easy unit testing- Integration with built-in Django default permissions system and Django admin (coming soon)- Intergration with Django Rest Framework (coming soon)## How to installUsing `pip`:```pip install django-cancan```## Quick start1. Add `cancan` to your `INSTALLED_APPS` setting like this:```pythonINSTALLED_APPS = [    ...,    'cancan',]```2. Create a function that define the access rules for a given user. For example, create `abilities.py` in `myapp` module:```pythondef define_access_rules(user, rules):    # Anybody can view published articles    rules.allow('view', Article, published=True)    if not user.is_authenticated:        return     # Allow logged in user to view his own articles, regardless of the `published` status    # allow accepts the same kwargs that you would provide to QuerySet.filter method    rules.allow('view', Article, author=user)    if user.has_perm('article.view_unpublished'):        # You can also check for custom model permissions (i.e. view_unpublished)        rules.allow('view', Article, published=False)    if user.is_superuser:        # Superuser gets unlimited access to all articles        rules.allow('add', Article)        rules.allow('view', Article)        rules.allow('change', Article)        rules.allow('delete', Article)```3.  In `settings.py` add `CANCAN` section, so that `cancan` library will know where to search for `define_access_rules` function from the previous step:```pythonCANCAN = {    'ABILITIES': 'myapp.abilities.define_access_rules'}```The `define_access_rules` function will be executed automatically per each request by the `cancan` middleware. The middleware will call the function to determine the abilities of a current user.Let's add `cancan` middleware, just after `AuthenticationMiddleware`:```pythonMIDDLEWARE = [    ...    'django.contrib.auth.middleware.AuthenticationMiddleware',    'cancan.middleware.CanCanMiddleware',    ...]```By adding the middleware you will also get an access to `request.ability` instance which you can useto:  - check model permissions,  - check object permissions, - generate model querysets (i.e. when inheriting from `ListView`)4. Check for abilities in views:```pythonclass ArticleListView(ListView):    model = Article    def get_queryset():        # this is how you can retrieve all objects that current user can access        qs = self.request.ability.queryset_for('view', Article)        return qsclass ArticleDetailView(PermissionRequiredMixin, DetailView):    queryset = Article.objects.all()    def has_permission(self):        article = self.get_object()        # this is how you can check if user can access an object        return self.request.ability.can('view', article)```5. Check for abilities in templatesYou can also check for abilities in template files, i. e. to show/hide/disable buttons or links.First you need to add `cancan` processor to `context_processors` in `TEMPLATES` section of `settings.py`:```pythonTEMPLATES = [    {        ...,        &quot;OPTIONS&quot;: {            &quot;context_processors&quot;: [                ...,                &quot;cancan.context_processors.abilities&quot;,            ],        },    },]```This will give you access to `ability` object in a template. You also need add `{% load cancan_tags %}` at the beginning of the template file.Next you can check for object permissions:```{% load cancan_tags %}...{% if ability|can:&quot;change&quot;|subject:article %}    &lt;a href=&quot;{% url 'article_edit' pk=article.id %}&quot;&gt;Edit article&lt;/a&gt;{% endif %}```or model permissions:```{% if ability|can:&quot;add&quot;|&quot;myapp.Article&quot; %}    &lt;a href=&quot;{% url 'article_new' %}&quot;&gt;Create new article&lt;/a&gt;{% endif %}```You can also use `can` template tag to create a reusable variable:```{% can &quot;add&quot; &quot;core.Project&quot; as can_add_project %}...{% if can_add_project %}    ...{% endif %}```## Checking for abilities in Django Rest FrameworkLet's start by creating a pemission class:```pythonfrom rest_framework import permissionsdef set_aliases_for_drf_actions(ability):    &quot;&quot;&quot;    map DRF actions to default Django permissions    &quot;&quot;&quot;    ability.access_rules.alias_action(&quot;list&quot;, &quot;view&quot;)    ability.access_rules.alias_action(&quot;retrieve&quot;, &quot;view&quot;)    ability.access_rules.alias_action(&quot;create&quot;, &quot;add&quot;)    ability.access_rules.alias_action(&quot;update&quot;, &quot;change&quot;)    ability.access_rules.alias_action(&quot;partial_update&quot;, &quot;change&quot;)    ability.access_rules.alias_action(&quot;destroy&quot;, &quot;delete&quot;)class AbilityPermission(permissions.BasePermission):    def has_permission(self, request, view=None):        ability = request.ability        set_aliases_for_drf_actions(ability)        return ability.can(view.action, view.get_queryset().model)    def has_object_permission(self, request, view, obj):        ability = request.ability        set_aliases_for_drf_actions(ability)        return ability.can(view.action, obj)```Next, secure the ViewSet with `AbilityPermission` and override `get_queryset` method to list objects based on the access rights.```pythonclass ArticleViewset(ModelViewSet):    permission_classes = [AbilityPermission]    def get_queryset(self):        return self.request.ability.queryset_for(self.action, Article).distinct()```## `ability.queryset_for` and `rules.allow` explainedWhen executing `rules.allow` you specify 2 positional arguments: `action` and `subject`. Any additional parameters passed to allow will filterthe results in the same way as for Django `QuerySet.fiter` method.Let's say that we have the following models in `core.models.py`:```pythonclass Project(models.Model):    name = models.CharField(max_length=128)    description = models.TextField(default=&quot;&quot;, blank=True)    members = models.ManyToManyField(User, through=&quot;Membership&quot;)    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name=&quot;owner&quot;)class Membership(models.Model):    user = models.ForeignKey(User, on_delete=models.CASCADE)    project = models.ForeignKey(Project, on_delete=models.CASCADE)```If you have the following rules:```rules.allow('view', Project, name=&quot;Foo&quot;)```then executing:```ability.queryset_for('view', Project)```will result in the following query:```SELECT &quot;core_project&quot;.&quot;id&quot;, &quot;core_project&quot;.&quot;name&quot;, &quot;core_project&quot;.&quot;description&quot;, &quot;core_project&quot;.&quot;created_by_id&quot; FROM &quot;core_project&quot; WHERE &quot;core_project&quot;.&quot;name&quot; = Foo```Similarly, `rules.allow('view', Project, name=&quot;Foo&quot;, description__contains=&quot;Bar&quot;)`will generate a query:```SELECT &quot;core_project&quot;.&quot;id&quot;, &quot;core_project&quot;.&quot;name&quot;, &quot;core_project&quot;.&quot;description&quot;, &quot;core_project&quot;.&quot;created_by_id&quot; FROM &quot;core_project&quot; WHERE (&quot;core_project&quot;.&quot;description&quot; LIKE %Bar% ESCAPE '\' AND &quot;core_project&quot;.&quot;name&quot; = Foo)```Multiple rules for the same action and model will result in OR'ed queries, i.e.:```rules.allow('view', Project, name=&quot;Foo&quot;)rules.allow('view', Project, description__contains=&quot;Bar&quot;)```will generate a query:```SELECT &quot;core_project&quot;.&quot;id&quot;, &quot;core_project&quot;.&quot;name&quot;, &quot;core_project&quot;.&quot;description&quot;, &quot;core_project&quot;.&quot;created_by_id&quot; FROM &quot;core_project&quot; WHERE (&quot;core_project&quot;.&quot;description&quot; LIKE %Bar% ESCAPE '\' OR &quot;core_project&quot;.&quot;name&quot; = Foo)```See [example_project/cancan_playground.ipynb](example_project/cancan_playground.ipynb) for more examples.## Sponsors&lt;a href=&quot;https://ermlab.com/&quot; target=&quot;_blank&quot;&gt;  &lt;img src=&quot;https://ermlab.com/wp-content/uploads/2019/08/ermlab_logo_plain_h80.png&quot; alt=&quot;Ermlab&quot; width=&quot;200&quot;/&gt;&lt;/a&gt;&lt;hr&gt;&lt;div&gt;Logo made by &lt;a href=&quot;http://www.freepik.com/&quot; title=&quot;Freepik&quot;&gt;Freepik&lt;/a&gt; from &lt;a href=&quot;https://www.flaticon.com/&quot; title=&quot;Flaticon&quot;&gt;www.flaticon.com&lt;/a&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>