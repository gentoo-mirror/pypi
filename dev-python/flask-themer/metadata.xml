<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![PyPI](https://img.shields.io/pypi/v/flask-themer?style=flat-square)![PyPI - License](https://img.shields.io/pypi/l/flask-themer?style=flat-square)![GitHub Workflow Status](https://img.shields.io/github/workflow/status/TkTech/flask-themer/Run%20tests?style=flat-square)# Flask-ThemerSimple theme support for flask apps.Flask-Themer is inspired by the (seemingly) abandoned [flask-themes][] project,but has been written from scratch for py3.7+ (or 3.6 with the dataclassesbackport). However it is _not_ immediately compatible with flask-themes anddoes not seek to be. Flask-Themer tries to have little opinion on how youactually structure your project and its themes and does not require aparticular metadata format/file.Flask-Themer releases follow [Semantic Versioning][semver].Flask-Themer has 100% test coverage and considers it an error to fall below100%.## InstallationInstall the latest release from [PyPi][]:```pip install flask-themer```or get the latest development version from github:```git clone https://github.com/TkTech/flask-themer.gitcd flask-themerpython setup.py develop```## QuickstartFlask-Themer usage is usually very basic, and once setup you likely won't needto touch it again. Lets do a quickstart. Notice how we import `render_template`from `flask_themer` instead of `flask`.Our `app.py` looks like this:```pythonfrom flask import Flaskfrom flask_themer import Themer, render_templateapp = Flask(__name__)themer = Themer(app)@themer.current_theme_loaderdef get_current_theme():    # This is where you would look up the current user's theme if one was    # logged in, for example.    return 'default'@app.route('/')def hello_world():    return render_template('hello.html')```And next to it we have a directory called `themes` with a directory called`default` inside of it. Our `themes/default/hello.html` looks like this:```jinja2Hello world!```That's it! By default Flask-Themer will look for a `themes` directory next toyour project and assume all the directories inside of it are themes. You canchange what directory it looks for with `THEMER_DEFAULT_DIRECTORY`, or specifythe template loaders explicitly to overwrite the default:```pythonfrom flask_themer import Themer, FileSystemThemeLoaderapp = Flask(__name__)themer = Themer(app, loaders=[    FileSystemThemeLoader(app, os.path.join(        app.root_path,        'also_themes'    ))])```## Using Themes From TemplatesTwo template globals are added once Flask-Themer is setup, `theme()` and`theme_static()` (just like flask-themes). These methods look up the currentlyactive theme and look for the given path in that theme, returning a specialpath that Jinja can use to load it.```jinja2{% extends theme(&quot;base.html&quot;) %}{% block header %}    {{ super() }}    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ theme_static(&quot;bootstrap.css&quot;) }}&quot;&gt;{% endblock %}```## Theme Loaders_Theme_ loaders are the mechanism by which Flask-Themer discovers what themesare available. You can create a custom loader to get themes from a ZIP file, ora database for example. Usually if you create a new `ThemeLoader` you'll alsoneed to create a new Jinja [_template_ loader][loader] so Jinja knows how toread individual templates. Lets do a very minimal example that loads just asingle theme from a ZIP file.```pythonfrom zipfile import ZipFilefrom flask_themer import ThemeLoader, Themefrom jinja2.loaders import BaseLoader, TemplateNotFoundclass ZipFileTemplateLoader(BaseLoader):    def __init__(self, *args, archive, **kwargs):        super().__init__(*args, **kwargs)        self.archive = archive    def get_source(self, environment, template):        try:            return (self.archive.read(template), None, False)        except KeyError:            raise TemplateNotFound(template)class ZipFileThemeLoader(ThemeLoader):    def __init__(self, path_to_zip):        self.archive = ZipFile(path_to_zip)    @property    def themes(self):        yield Theme(            name='my_dumb_theme',            theme_loader=self,            jinja_loader=ZipFileTemplateLoader(archive=self.archive),        )    def get_static(self, theme, path):        return self.archive.read(path)```And then to use our new loaders we update our previous example:```python...themer = Themer(app, loaders=[    ZipFileThemeLoader('my_dumb_theme.zip')])...```Pretty simple right? You can see how we could easily create a loader to loadmultiple themes from an archive, or load a user's customized theme from adatabase.[flask-themes]: https://github.com/maxcountryman/flask-themes[pypi]: https://pypi.org/[semver]: https://semver.org/[loader]: https://jinja.palletsprojects.com/en/latest/api/#loaders</longdescription>
</pkgmetadata>