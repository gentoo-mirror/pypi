<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Conn[![](https://img.shields.io/pypi/v/connpy.svg?style=flat-square)](https://pypi.org/pypi/connpy/)[![](https://img.shields.io/pypi/pyversions/connpy.svg?style=flat-square)](https://pypi.org/pypi/connpy/)[![](https://img.shields.io/pypi/l/connpy.svg?style=flat-square)](https://github.com/fluzzi/connpy/blob/main/LICENSE)[![](https://img.shields.io/pypi/dm/connpy.svg?style=flat-square)](https://pypi.org/pypi/connpy/)Connpy is a ssh and telnet connection manager and automation module## Installationpip install connpy## Automation module usage### Standalone module```import connpyrouter = connpy.node(&quot;unique name&quot;,&quot;ip/hostname&quot;, user=&quot;username&quot;, password=&quot;password&quot;)router.run([&quot;term len 0&quot;,&quot;show run&quot;])print(router.output)hasip = router.test(&quot;show ip int brief&quot;,&quot;1.1.1.1&quot;)if hasip:    print(&quot;Router has ip 1.1.1.1&quot;)else:    print(&quot;router does not have ip 1.1.1.1&quot;)```### Using manager configuration```import connpyconf = connpy.configfile()device = conf.getitem(&quot;router@office&quot;)router = connpy.node(&quot;unique name&quot;, **device, config=conf)result = router.run(&quot;show ip int brief&quot;)print(result)```### Running parallel tasks on multiple devices ```import connpyconf = connpy.configfile()#You can get the nodes from the config from a folder and fitlering in itnodes = conf.getitem(&quot;@office&quot;, [&quot;router1&quot;, &quot;router2&quot;, &quot;router3&quot;])#You can also get each node individually:nodes = {}nodes[&quot;router1&quot;] = conf.getitem(&quot;router1@office&quot;)nodes[&quot;router2&quot;] = conf.getitem(&quot;router2@office&quot;)nodes[&quot;router10&quot;] = conf.getitem(&quot;router10@datacenter&quot;)#Also, you can create the nodes manually:nodes = {}nodes[&quot;router1&quot;] = {&quot;host&quot;: &quot;1.1.1.1&quot;, &quot;user&quot;: &quot;username&quot;, &quot;password&quot;: &quot;password1&quot;}nodes[&quot;router2&quot;] = {&quot;host&quot;: &quot;1.1.1.2&quot;, &quot;user&quot;: &quot;username&quot;, &quot;password&quot;: &quot;password2&quot;}nodes[&quot;router3&quot;] = {&quot;host&quot;: &quot;1.1.1.2&quot;, &quot;user&quot;: &quot;username&quot;, &quot;password&quot;: &quot;password3&quot;}#Finally you run some tasks on the nodesmynodes = connpy.nodes(nodes, config = conf)result = mynodes.test([&quot;show ip int br&quot;], &quot;1.1.1.2&quot;)for i in result:    print(&quot;---&quot; + i + &quot;---&quot;)    print(result[i])    print()# Or for one specific nodemynodes.router1.run([&quot;term len 0&quot;. &quot;show run&quot;], folder = &quot;/home/user/logs&quot;)```### Using variables```import connpyconfig = connpy.configfile()nodes = config.getitem(&quot;@office&quot;, [&quot;router1&quot;, &quot;router2&quot;, &quot;router3&quot;])commands = []commands.append(&quot;config t&quot;)commands.append(&quot;interface lo {id}&quot;)commands.append(&quot;ip add {ip} {mask}&quot;)commands.append(&quot;end&quot;)variables = {}variables[&quot;router1@office&quot;] = {&quot;ip&quot;: &quot;10.57.57.1&quot;}variables[&quot;router2@office&quot;] = {&quot;ip&quot;: &quot;10.57.57.2&quot;}variables[&quot;router3@office&quot;] = {&quot;ip&quot;: &quot;10.57.57.3&quot;}variables[&quot;__global__&quot;] = {&quot;id&quot;: &quot;57&quot;}variables[&quot;__global__&quot;][&quot;mask&quot;] =  &quot;255.255.255.255&quot;expected = &quot;!&quot;routers = connpy.nodes(nodes, config = config)routers.run(commands, variables)routers.test(&quot;ping {ip}&quot;, expected, variables)for key in routers.result:    print(key, ' ---&gt; ', (&quot;pass&quot; if routers.result[key] else &quot;fail&quot;))```## Connection manager ### Features    - You can generate profiles and reference them from nodes using @profilename so you dont      need to edit multiple nodes when changing password or other information.    - Nodes can be stored on @folder or @subfolder@folder to organize your devices. Then can       be referenced using node@subfolder@folder or node@folder    - If you have too many nodes. Get completion script using: conn config --completion.      Or use fzf installing pyfzf and running conn config --fzf true    - Much more!### Usage:```usage: conn [-h] [--add | --del | --mod | --show | --debug] [node|folder]       conn {profile,move,mv,copy,cp,list,ls,bulk,config} ...positional arguments:  node|folder    node[@subfolder][@folder]                 Connect to specific node or show all matching nodes                 [@subfolder][@folder]                 Show all available connections globaly or in specified path```### Options:```  -h, --help         show this help message and exit  -v, --version      Show version  -a, --add          Add new node[@subfolder][@folder] or [@subfolder]@folder  -r, --del, --rm    Delete node[@subfolder][@folder] or [@subfolder]@folder  -e, --mod, --edit  Modify node[@subfolder][@folder]  -s, --show         Show node[@subfolder][@folder]  -d, --debug        Display all conections steps```### Commands:```  profile        Manage profiles  move (mv)      Move node  copy (cp)      Copy node  list (ls)      List profiles, nodes or folders  bulk           Add nodes in bulk  run            Run scripts or commands on nodes  config         Manage app config```### Manage profiles:```usage: conn profile [-h] (--add | --del | --mod | --show) profilepositional arguments:  profile        Name of profile to manageoptions:  -h, --help         show this help message and exit  -a, --add          Add new profile  -r, --del, --rm    Delete profile  -e, --mod, --edit  Modify profile  -s, --show         Show profile```### Examples:```   conn profile --add office-user   conn --add @office   conn --add @datacenter@office   conn --add server@datacenter@office   conn --add pc@office   conn --show server@datacenter@office   conn pc@office   conn server``` </longdescription>
</pkgmetadata>