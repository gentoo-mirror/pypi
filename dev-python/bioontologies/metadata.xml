<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://github.com/biopragmatics/bioontologies/raw/main/docs/source/logo.png&quot; height=&quot;150&quot;&gt;&lt;/p&gt;--&gt;&lt;h1 align=&quot;center&quot;&gt;  Bioontologies&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://github.com/biopragmatics/bioontologies/actions?query=workflow%3ATests&quot;&gt;        &lt;img alt=&quot;Tests&quot; src=&quot;https://github.com/biopragmatics/bioontologies/workflows/Tests/badge.svg&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/bioontologies&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/bioontologies&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/bioontologies&quot;&gt;        &lt;img alt=&quot;PyPI - Python Version&quot; src=&quot;https://img.shields.io/pypi/pyversions/bioontologies&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/biopragmatics/bioontologies/blob/main/LICENSE&quot;&gt;        &lt;img alt=&quot;PyPI - License&quot; src=&quot;https://img.shields.io/pypi/l/bioontologies&quot; /&gt;    &lt;/a&gt;    &lt;a href='https://bioontologies.readthedocs.io/en/latest/?badge=latest'&gt;        &lt;img src='https://readthedocs.org/projects/bioontologies/badge/?version=latest' alt='Documentation Status' /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://codecov.io/gh/biopragmatics/bioontologies/branch/main&quot;&gt;        &lt;img src=&quot;https://codecov.io/gh/biopragmatics/bioontologies/branch/main/graph/badge.svg&quot; alt=&quot;Codecov status&quot; /&gt;    &lt;/a&gt;      &lt;a href=&quot;https://github.com/cthoyt/cookiecutter-python-package&quot;&gt;        &lt;img alt=&quot;Cookiecutter template from @cthoyt&quot; src=&quot;https://img.shields.io/badge/Cookiecutter-snekpack-blue&quot; /&gt;     &lt;/a&gt;    &lt;a href='https://github.com/psf/black'&gt;        &lt;img src='https://img.shields.io/badge/code%20style-black-000000.svg' alt='Code style: black' /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/biopragmatics/bioontologies/blob/main/.github/CODE_OF_CONDUCT.md&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg&quot; alt=&quot;Contributor Covenant&quot;/&gt;    &lt;/a&gt;&lt;/p&gt;Tools for biomedical ontologies.## üí™ Getting StartedThis package lets you get OBO Graphs from ontologies based on their OWLfiles, OBO files, or [Bioregistry](https://bioregistry.io) prefixes. Internally,it uses [ROBOT](https://robot.obolibrary.org) to convert from these formatsto [OBO Graph JSON](https://github.com/geneontology/obographs).```pythonimport bioontologies# Get an ontology and convert to OBO Graph object via an OWL IRIowl_iri = &quot;http://purl.obolibrary.org/obo/go.owl&quot;parse_results = bioontologies.convert_to_obograph(owl_iri)# Get an ontology and convert to OBO Graph object via an OBO IRIobo_iri = &quot;http://purl.obolibrary.org/obo/go.obo&quot;parse_results = bioontologies.convert_to_obograph(obo_iri)# Get an ontology by its Bioregistry prefixparse_results = bioontologies.get_obograph_by_prefix(&quot;go&quot;)go_graph_document = parse_results.graph_document```## üöÄ InstallationThe most recent release can be installed from[PyPI](https://pypi.org/project/bioontologies/) with:```bash$ pip install bioontologies```The most recent code and data can be installed directly from GitHub with:```bash$ pip install git+https://github.com/biopragmatics/bioontologies.git```## üëê ContributingContributions, whether filing an issue, making a pull request, or forking, are appreciated. See[CONTRIBUTING.md](https://github.com/biopragmatics/bioontologies/blob/master/.github/CONTRIBUTING.md) for more information on getting involved.## üëã Attribution### ‚öñÔ∏è LicenseThe code in this package is licensed under the MIT License.&lt;!--### üìñ CitationCitation goes here!--&gt;### üéÅ SupportThe Bioregistry was developed by the [INDRA Lab](https://indralab.github.io), a part of the[Laboratory of Systems Pharmacology](https://hits.harvard.edu/the-program/laboratory-of-systems-pharmacology/about/)and the [Harvard Program in Therapeutic Science (HiTS)](https://hits.harvard.edu)at [Harvard Medical School](https://hms.harvard.edu/).### üí∞ FundingThe development of this package is funded by the DARPA Young Faculty Award W911NF2010255 (PI: Benjamin M. Gyori).### üç™ CookiecutterThis package was created with [@audreyfeldroy](https://github.com/audreyfeldroy)'s[cookiecutter](https://github.com/cookiecutter/cookiecutter) package using [@cthoyt](https://github.com/cthoyt)'s[cookiecutter-snekpack](https://github.com/cthoyt/cookiecutter-snekpack) template.## üõ†Ô∏è For Developers&lt;details&gt;  &lt;summary&gt;See developer instructions&lt;/summary&gt;The final section of the README is for if you want to get involved by making a code contribution.### Development InstallationTo install in development mode, use the following:```bash$ git clone git+https://github.com/biopragmatics/bioontologies.git$ cd bioontologies$ pip install -e .```### ü•º TestingAfter cloning the repository and installing `tox` with `pip install tox`, the unit tests in the `tests/` folder can berun reproducibly with:```shell$ tox```Additionally, these tests are automatically re-run with each commit in a [GitHub Action](https://github.com/biopragmatics/bioontologies/actions?query=workflow%3ATests).### üìñ Building the DocumentationThe documentation can be built locally using the following:```shell$ git clone git+https://github.com/biopragmatics/bioontologies.git$ cd bioontologies$ tox -e docs$ open docs/build/html/index.html``` The documentation automatically installs the package as well as the `docs`extra specified in the [`setup.cfg`](setup.cfg). `sphinx` pluginslike `texext` can be added there. Additionally, they need to be added to the`extensions` list in [`docs/source/conf.py`](docs/source/conf.py).### üì¶ Making a ReleaseAfter installing the package in development mode and installing`tox` with `pip install tox`, the commands for making a new release are contained within the `finish` environmentin `tox.ini`. Run the following from the shell:```shell$ tox -e finish```This script does the following:1. Uses [Bump2Version](https://github.com/c4urself/bump2version) to switch the version number in the `setup.cfg`,   `src/bioontologies/version.py`, and [`docs/source/conf.py`](docs/source/conf.py) to not have the `-dev` suffix2. Packages the code in both a tar archive and a wheel using [`build`](https://github.com/pypa/build)3. Uploads to PyPI using [`twine`](https://github.com/pypa/twine). Be sure to have a `.pypirc` file configured to avoid the need for manual input at this   step4. Push to GitHub. You'll need to make a release going with the commit where the version was bumped.5. Bump the version to the next patch. If you made big changes and want to bump the version by minor, you can   use `tox -e bumpversion minor` after.&lt;/details&gt;</longdescription>
</pkgmetadata>