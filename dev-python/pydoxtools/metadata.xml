<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ðŸŽ©âœ¨ðŸ“„ pydoxtools (Python Library) ðŸŽ©âœ¨ðŸ“„================================================================================![Python](https://img.shields.io/pypi/pyversions/pydoxtools.svg)[![PyPI version](https://img.shields.io/pypi/v/pydoxtools.svg)](https://pypi.python.org/pypi/pydoxtools)[![Mkdocs](https://img.shields.io/badge/doc-mkdocs-845ed7.svg)](https://pydoxtools.xyntopia.com)[![GitHub discussions](https://img.shields.io/badge/discuss-online-845ef7)](https://github.com/xyntopia/pydoxtools/discussions)[![GitHub stars](https://img.shields.io/github/stars/xyntopia/pydoxtools)](https://github.com/xyntopia/pydoxtools/stargazers)***[Documentation](https://pydoxtools.xyntopia.com)Pydoxtools is a library that provides a sophisticated interface for reading andwriting documents, designed to work with AI models such as GPT, Alpaca, andHuggingface. It offers functionalities such as:- Pipeline management- Integration with AI (LLMs and more) models- low-resource (PDF) table extraction without configuration and expensive  layout detection algorithms!- Document analysis and question-answering- Support for most of todays document formats- Vector index Creation- Entity, address identification and more- List and keyword extraction- Data normalization, translation, and cleaningThe library allows for the creation of complex extraction pipelinesfor batch-processing of documents by defining them as a lazily-executed graph.## Installation### Installing from GitHubWhile pydoxtools can already be installed through pip, due to themany updates coming in right now, it is currently recommended to usethe latest version from GitHub as follows:    pip install -U &quot;pydoxtools[etl,inference] @ git+https://github.com/xyntopia/pydoxtools.git&quot;### Installing from PyPIPydoxtools can also be installed through pip, which will become the recommendedmethod once it becomes more stable:    pip install -U pydoxtools[etl,inference]For loading additional file formats (docx, odt, epub), OCR and other options,check out the additional &gt; [Installation Options](#installation-options) &lt;.## ðŸš€ Teaser ðŸš€Experience a new level of convenience and efficiency in handlingdocuments with Pydoxtools, and reimagine your data extraction pipelines!In this teaser, we'll demonstrate how to create a document, extracttables, and ask questions using AI models:```pythonimport pydoxtools as pdx# Create a document from various sources: file, string, bytestring, file-like object, or URLdoc = pdx.Document(&quot;https://www.raspberrypi.org/app/uploads/2012/12/quick-start-guide-v1.1.pdf&quot;)# List available extraction functionsprint(doc.x_funcs)# get all tables from a single document:print(doc.tables)# Extract the first 20 tables that we can find in a directory (this might take a while,# make sure, to only choose a small directory for testing purposes)docs = pdx.DocumentBag(&quot;./my_directory_with_documents&quot;, forgiving_extracts=True)print(docs.bag_apply([&quot;tables_df&quot;, &quot;filename&quot;]).take(20))# Ask a question about the documents using a local Q&amp;A modelprint(doc.answers([&quot;how much ram does it have?&quot;]))# Or only ask about the documents tables (or any other extracted information):print(doc.answers([&quot;how much ram does it have?&quot;], &quot;tables&quot;))# To use ChatGPT for question-answering, set the API key as an environment variable:# OPENAI_API_KEY=&quot;sk ....&quot;# Then, ask questions about the document using ChatGPTprint(doc.chat_answers([&quot;What is the target group of this document?&quot;])[0].content)print(doc.chat_answers([&quot;Answer if a 5-year old would be able to follow these instructions?&quot;])[0].content)```With Pydoxtools, you can easily access and process your documents, perform various extractions,and utilize AI models for more advanced analysis.### Supported File FormatsPydoxtools already supports loading from a large variety of different sources:- Documents from URLs,- pdf, html, docx, doc, odt, markdwn, rtf, epub, mediawiki- everything supported by [pandoc](https://pandoc.org/),- images (png, jpg, bmp, tiff etc...),- And some &quot;native-python&quot; dataformats: PIL.Image.Image, &lt;class 'dict'&gt;, &lt;class 'list'&gt;- data formats: yaml (json in progress)- And more!## Some Features in More Detail### Large PipelinesPydoxtools' main feature is the ability to mix LLMs and otherAI models in large, composable, and customizable pipelines.Using pipelines comes with the slight disadvantage that itcan be more challenging to add type hints to the code.However, using pipelines decouples all parts of your code,allowing all operators to work independently. Thismakes it easy to run the pipeline in a distributed setting for big dataand enables easy, lazy evaluation. Additionally,mixing different LLM logics together becomes much easier.Check out how Pydoxtools' `Document` class mixes pipelines for each individual file type:- Every node in an ellipse can be called as an attribute of the document-analysis pipeline.- Every execution path is lazily executed throughout the entire graph.- Every node is cached by default (but can be turned off).- Every piece of this pipeline can be replaced by a customized version.As an example, consider this pipeline for *.png images from the repository,which includes OCR, keyword extraction, vectorization, and more:![png pipeline](http://pydoxtools.xyntopia.com/images/document_logic_.png.svg)Pipelines can be mixed, partially overwritten, and extended, giving you a lot of possibilitiesto extend and adapt the functionality for your specific use case.To learn more about Pydoxtools' large pipelines feature, please refer tothe [documentation](http://pydoxtools.xyntopia.com/reference/#pydoxtools.document.Document).#### Pipeline ConfigurationPipelines can be configured. For example the local model used forquestion answering can be selected like this:    doc = Document(fobj=&quot;./data/PFR-PR23_BAT-110__V1.00_.pdf&quot;))            .config(qam_model_id='bert-large-uncased-whole-word-masking-finetuned-squad')where &quot;qam_model_id&quot; can be any model from huggingface for question answering.    TODO: document how to configure a pipeline### PDF Table Extraction AlgorithmsThe library features its own sophisticated Table extraction algorithm which is benchmarkedagainst a large pdf table dataset. In contrast to how most &quot;classical&quot; table extractionalgorithms work, it doesn't require:- extensive configuration- no expensive deep neural networks for table area recognition which need a GPU and  a lot of memory/CPU requirementsThis makes it possible to run analysis on PDF files with pydoxtools on CPU withvery limited resources!### TODO: Describe more of the features here...## Use Cases- create new documents from unstructured information- analyze documents using any model from huggingface- analyze documents using a custom model- download a pdf from URL- generate document keywords- extract tables- download document from URL &quot;manually&quot; and then feed to document- extract addresses- extract addresses and use this information for the qam- ingest documents into a vector db## Installation OptionsIf you simply want to get going, you can install the following libraries on your systemwhich will do evrything for you:```bashsudo apt-get install tesseract-ocr tesseract-ocr-deu tesseract-ocr-fra tesseract-ocr-eng tesseract-ocr-spa \                     poppler-utils graphviz graphviz-dev \sudo apt-get install pandoc# OR (for getting the newest version with all features)# cd /tmp# wget https://github.com/jgm/pandoc/releases/download/2.19.2/pandoc-2.19.2-1-amd64.deb# dpkg -i pandoc-2.19.2-1-amd64.deb```Below are some explanation what the different### Supporting \*.docx, \*.odt, \*.epubIn order to be able to load docx, odt and rtf files, you have to install pandoc.Right now, the python pandoc library does not work with pandoc version &gt; 3.0.0. Itis therefore recommended to install a version from here for your OS:https://github.com/jgm/pandoc/releases/tag/2.19.2### Image OCR SupportPydoxtools can automatically analyze images as well, makin use of[OCR](https://en.wikipedia.org/wiki/Optical_character_recognition).In order to be able to use this, install tesseract on your system:Under linux this looks like the following:```bashsudo apt-get update &amp;&amp; sudo apt-get tesseract-ocr# install tesseract languages # Display a list of all Tesseract language packs:#   apt-cache search tesseract-ocr# install all languages:# sudo apt install tesseract-ocr-*# install only german, french, english, spanish language packssudo apt install tesseract-ocr-deu tesseract-ocr-fra tesseract-ocr-eng tesseract-ocr-spa```### pdf image renderingFor pdf rendering, Pydoxtools makes use of a library &quot;poppler&quot; whichneeds to be installed on your system. Under linux, this looks like the following:```bashsudo apt-get install poppler-utils```### GraphvizFor visualizing the document logic, you need to install graphviz on your system.Under linux, this looks like the following:```bashsudo apt-get install graphviz graphviz-dev```## Development--&gt; see [](DEVELOPMENT)## LicenseThis project is licensed under the terms of [MIT](LICENSE) license.You can check the compatibility using the following tool in a venv environment in a productionsetting:    pip install pip-licenses    pip-licenses | grep -Ev 'MIT License|BSD License|Apache Software License|Python Software Foundation License|Apache 2.0|MIT|Apache License 2.0|hnswlib|Pillow|new BSD|BSD'### DependenciesHere is a list of Libraries, that this project is based on:[list](poetry.lock)</longdescription>
</pkgmetadata>