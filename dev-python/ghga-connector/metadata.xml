<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![tests](https://github.com/ghga-de/ghga-connector/actions/workflows/unit_and_int_tests.yaml/badge.svg)[![codecov](https://codecov.io/gh/ghga-de/ghga-connector/branch/main/graph/badge.svg?token=GYH99Y71CK)](https://codecov.io/gh/ghga-de/ghga-connector)# GHGA-ConnectorA CLI - Client to perform up- and download operations to and from a local GHGA Node.## Documentation:An extensive documentation can be found [here](...) (coming soon).## Quick Start:### InstallationThis package uses PycURL and thus has curl (https://curl.se/) as a dependency. On Debian-based Linux distributions, you can install cURL using:```sudo apt install libcurl4-openssl-dev libssl-dev```This package is available at PyPI: https://pypi.org/project/ghga_connectorYou can install it from there using:```pip install ghga_connector```### Using the CLI:To get help on the command line interface, type:```ghga_connector --help```## DevelopmentFor setting up the development environment, we rely on the[devcontainer feature](https://code.visualstudio.com/docs/remote/containers) of vscodein combination with Docker Compose.To use it, you have to have Docker Compose as well as vscode with its &quot;Remote - Containers&quot; extension (`ms-vscode-remote.remote-containers`) installed.Then open this repository in vscode and run the command`Remote-Containers: Reopen in Container` from the vscode &quot;Command Palette&quot;.This will give you a full-fledged, pre-configured development environment including:- infrastructural dependencies of the service (databases, etc.)- all relevant vscode extensions pre-installed- pre-configured linting and auto-formating- a pre-configured debugger- automatic license-header insertionMoreover, inside the devcontainer, there are two convenience commands available(please type them in the integrated terminal of vscode):- `dev_install` - install the service with all development dependencies,installs pre-commit, and applies any migration scripts to the test database(please run that if you are starting the devcontainer for the first timeor if you added any python dependencies to the [`./setup.cfg`](./setup.cfg))- `dev_launcher` - starts the service with the development config yaml(located in the `./.devcontainer/` dir)If you prefer not to use vscode, you could get a similar setup (without the editor specific features)by running the following commands:``` bash# Execute in the repo's root dir:cd ./.devcontainer# build and run the environment with docker-composedocker-compose up# attach to the main container:# (you can open multiple shell sessions like this)docker exec -it devcontainer_app_1 /bin/bash```## LicenseThis repository is free to use and modify according to the [Apache 2.0 License](./LICENSE).</longdescription>
</pkgmetadata>