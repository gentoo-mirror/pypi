<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dash Bootstrap Templates#### See these features live at : https://hellodash.pythonanywhere.com/theme_explorer`dash-bootstrap-templates` library provides: - **52 Bootstrap themed Plotly figure templates**   - You will find a Plotly template for each of the 26 Bootstrap/Bootswatch themes available in the [Dash Bootstrap Components Library](https://dash-bootstrap-components.opensource.faculty.ai/). These templates will automatically style your figures with Bootstrap theme colors and fonts.  - As of V1.1 a dark mode is available for each theme.  This is ideal for use with the [Bootstrap Color Modes](https://getbootstrap.com/docs/5.3/customize/color-modes/) available as of Bootstrap 5.3.0- **Two  [All-in-One](https://dash.plotly.com/all-in-one-components) components** to change themes in a Dash app.  - `ThemeSwitchAIO` toggles between two themes.  - `ThemeChangerAIO` select from multiple themes.  - **Examples of a Color Mode Switch** to toggle between a light and dark theme.- **The dbc.css stylesheet** which styles Dash AG Grid, Dash Core Components and the Dash DataTable with a Bootstrap theme.    - [![](https://data.jsdelivr.com/v1/package/gh/AnnMarieW/dash-bootstrap-templates/badge?style=rounded)](https://www.jsdelivr.com/package/gh/AnnMarieW/dash-bootstrap-templates)&gt; **Usage Notes**:&gt;  - The `ThemeChangerAIO` component  and the `dbc.css` stylesheet requires  Dash Bootstrap Components&gt;=V1.0.0.  It will only&gt; work with the themes included in Dash Bootstrap Components&gt;=V1.0.0.&gt; &gt;  - As of V1.0.8, the themes in the `ThemeSwitchAIO` component can be specified as a pathname or a URL.  This allows for working&gt; off-line and with custom stylesheets.&gt; &gt; - The Bootstrap themed Plotly figure templates can be used with any Plotly figure.  It does not require Dash or&gt; the Dash Bootstrap Components library.&lt;br&gt;&lt;br&gt;## Figure Template Quickstart```python&quot;pip install dash-bootstrap-templates```&gt; Learn more about Plotly figure templates and themes at: https://plotly.com/python/templates/```python&quot;&quot;&quot;A sample of 8 of the 26 Bootstrap themed Plotly figure templates availablein the dash-bootstrap-template library&quot;&quot;&quot;from dash import Dash, html, dccimport dash_bootstrap_components as dbcfrom dash_bootstrap_templates import load_figure_templateimport plotly.express as pxdf = px.data.gapminder()templates = [    &quot;bootstrap&quot;,    &quot;minty&quot;,    &quot;pulse&quot;,    &quot;flatly&quot;,    &quot;quartz&quot;,    &quot;cyborg&quot;,    &quot;darkly&quot;,    &quot;vapor&quot;,]load_figure_template(templates)figures = [    px.scatter(        df.query(&quot;year==2007&quot;),        x=&quot;gdpPercap&quot;,        y=&quot;lifeExp&quot;,        size=&quot;pop&quot;,        color=&quot;continent&quot;,        log_x=True,        size_max=60,        template=template,        title=&quot;Gapminder 2007: '%s' theme&quot; % template,    )    for template in templates]app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])app.layout = dbc.Container([dcc.Graph(figure=fig, className=&quot;m-4&quot;) for fig in figures])if __name__ == &quot;__main__&quot;:    app.run_server(debug=True)```![image](https://user-images.githubusercontent.com/72614349/143956424-9e172c03-139e-4126-bed5-b1800ad7e17a.png)![image](https://user-images.githubusercontent.com/72614349/143956545-769a00f8-92a3-44aa-8718-bdbb32b2464e.png)![image](https://user-images.githubusercontent.com/72614349/143956649-32b620c7-231a-4de6-ad3a-8fb0863da2a4.png)![image](https://user-images.githubusercontent.com/72614349/143956713-7fdbed38-6799-472b-87ba-d863481c6525.png)![figure_template2](https://user-images.githubusercontent.com/72614349/129459807-30c22ffe-7a8c-44b9-9555-6cfd50ec355b.png)&lt;br&gt;&lt;br&gt;## dbc.css  stylesheetThe  `dash-ag-grid`, `dash-core-components`, the Dash `DataTable` and Plotly figures are not automatically styled with a Bootstrap theme.An easy way to make your Dash components look better with a Bootstrap theme is to use the stylesheet from the [dash-bootstrap-templates](https://github.com/AnnMarieW/dash-bootstrap-templates) library. This stylesheet defines the &quot;dbc&quot; class.Adding `className=&quot;dbc dbc-ag-grid&quot;` minimally styles Dash components with your selected Bootstrap theme:- Makes the text readable in both light and dark themes.- Uses theme's font-family.- Changes the accent color to the theme's primary colorYou can add the dbc class as an external stylesheet like this:```dbc_css = (&quot;https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates@V1.0.2/dbc.min.css&quot;)app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc_css])```Add  `className=&quot;dbc dbc-ag-grid&quot;` to the outer container of the app or a component like this:```app.layout = dbc.Container(    [        ...    ],    fluid=True,    className=&quot;dbc dbc-ag-grid&quot;)```**That's it!** Simply adding `className=&quot;dbc dbc-ag-grid&quot;` will make Dash AG Grid,  Dash Core Components and the DataTable look better with **ALL** themes included in the `dash-bootstrap-components` library.&gt; See a live demo at: https://hellodash.pythonanywhere.com/adding-themes/dcc-componentsIf you have suggestion for improvements or if you find a bug, please let us know on the [issue tracker](https://github.com/AnnMarieW/dash-bootstrap-templates/issues)**Requires `dash-bootstrap-components&gt;=V1.0.0`**## Theme Switcher Components&gt; See a live demo at https://hellodash.pythonanywhere.com/theme_change_components`dash-bootstrap-templates` has two [All-in-One](https://dash.plotly.com/all-in-one-components) components to change themes. The `ThemeSwitchAIO` is a switch with icons on the left and right, which is ideal for toggling between a light and a dark theme. The `ThemeChangerAIO` has a button that opens an `dbc.Offcanvas` component which by default shows all the available themes.Note the All-in-One component switches the Bootstrap stylesheet for the app and sets the default Plotly figure templatefor the theme, however, figures must be updated in a callback in order to render the figure with the new template.See the callback below for an example.  The `template_from_url` is a helper function that returns the template namebased on the theme url.  For example `template_from_ur(dbc.themes.SLATE)` returns `&quot;slate&quot;`&lt;br&gt;&lt;br&gt;## ThemeChangerAIO Quickstart```pythonfrom dash import Dash, dcc, html, Input, Outputimport pandas as pdimport plotly.express as pximport dash_bootstrap_components as dbcfrom dash_bootstrap_templates import ThemeChangerAIO, template_from_urldbc_css = (    &quot;https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates@V1.0.1/dbc.min.css&quot;)app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP, dbc_css])df = pd.DataFrame(    {        &quot;Fruit&quot;: [&quot;Apples&quot;, &quot;Oranges&quot;, &quot;Bananas&quot;, &quot;Apples&quot;, &quot;Oranges&quot;, &quot;Bananas&quot;],        &quot;Amount&quot;: [4, 1, 2, 2, 4, 5],        &quot;City&quot;: [&quot;SF&quot;, &quot;SF&quot;, &quot;SF&quot;, &quot;Montreal&quot;, &quot;Montreal&quot;, &quot;Montreal&quot;],    })header = html.H4(    &quot;ThemeChangerAIO Demo&quot;, className=&quot;bg-primary text-white p-4 mb-2 text-center&quot;)buttons = html.Div(    [        dbc.Button(&quot;Primary&quot;, color=&quot;primary&quot;),        dbc.Button(&quot;Secondary&quot;, color=&quot;secondary&quot;),        dbc.Button(&quot;Success&quot;, color=&quot;success&quot;),        dbc.Button(&quot;Warning&quot;, color=&quot;warning&quot;),        dbc.Button(&quot;Danger&quot;, color=&quot;danger&quot;),        dbc.Button(&quot;Info&quot;, color=&quot;info&quot;),        dbc.Button(&quot;Light&quot;, color=&quot;light&quot;),        dbc.Button(&quot;Dark&quot;, color=&quot;dark&quot;),        dbc.Button(&quot;Link&quot;, color=&quot;link&quot;),    ],    className=&quot;m-4&quot;,)graph = html.Div(dcc.Graph(id=&quot;graph&quot;), className=&quot;m-4&quot;)app.layout = dbc.Container(    [        header,        dbc.Row(            [                dbc.Col(ThemeChangerAIO(aio_id=&quot;theme&quot;, radio_props={&quot;value&quot;:dbc.themes.FLATLY}), width=2,),                dbc.Col([buttons, graph],width=10),            ]        ),    ],    className=&quot;m-4 dbc&quot;,    fluid=True,)@app.callback(    Output(&quot;graph&quot;, &quot;figure&quot;), Input(ThemeChangerAIO.ids.radio(&quot;theme&quot;), &quot;value&quot;),)def update_graph_theme(theme):    return px.bar(        df, x=&quot;Fruit&quot;, y=&quot;Amount&quot;, color=&quot;City&quot;, barmode=&quot;group&quot;, template=template_from_url(theme)    )if __name__ == &quot;__main__&quot;:    app.run_server(debug=True)```![theme_changer](https://user-images.githubusercontent.com/72614349/141466834-6b02f478-cae8-4927-b05e-be0e98cb61df.gif)---------```python```Here is the same app, but using a the `ThemeSwitchAIO` component to toggle between two themes.See the  [(code here)](https://github.com/AnnMarieW/dash-bootstrap-templates/blob/main/examples/demo_toggle.py).It's also possible to change the icons.  See an example of using Bootstrap icons instead of the default FontAwesomeicons [here](https://github.com/AnnMarieW/dash-bootstrap-templates/blob/main/examples/demo_toggle_icons.py).![theme_toggle](https://user-images.githubusercontent.com/72614349/141466191-13709102-a2fb-45b5-a984-383d3e6ab373.gif)&lt;br&gt;&lt;br&gt;## Color Mode Switch__Requires dash-bootstrap-components&gt;=1.5.0__This is the recommended way to switch between a light and a dark mode using  [Bootstrap Color modes](https://getbootstrap.com/docs/5.3/customize/color-modes/) available in Bootstrap 5.3.0.![color-mode-templates](https://github.com/AnnMarieW/dash-bootstrap-templates/assets/72614349/86c56043-08e0-4b8a-a473-13e2ef89533a)```pythonfrom dash import Dash, html, dcc, Input, Output, clientside_callback, callbackimport plotly.express as pximport dash_bootstrap_components as dbcfrom dash_bootstrap_templates import load_figure_templateload_figure_template([&quot;minty&quot;, &quot;minty_dark&quot;])df = px.data.gapminder()app = Dash(__name__, external_stylesheets=[dbc.themes.MINTY, dbc.icons.FONT_AWESOME])color_mode_switch =  html.Span(    [        dbc.Label(className=&quot;fa fa-moon&quot;, html_for=&quot;switch&quot;),        dbc.Switch( id=&quot;switch&quot;, value=False, className=&quot;d-inline-block ms-1&quot;, persistence=True),        dbc.Label(className=&quot;fa fa-sun&quot;, html_for=&quot;switch&quot;),    ])app.layout = dbc.Container(    [        html.Div([&quot;Bootstrap Light Dark Color Modes Demo&quot;], className=&quot;bg-primary text-white h3 p-2&quot;),        color_mode_switch,        dcc.Graph(id=&quot;graph&quot;, className=&quot;border&quot;),    ])@callback(    Output(&quot;graph&quot;, &quot;figure&quot;),    Input(&quot;switch&quot;, &quot;value&quot;),)def update_figure_template(switch_on):    template = &quot;minty&quot; if switch_on else &quot;minty_dark&quot;    fig = px.scatter(        df.query(&quot;year==2007&quot;),        x=&quot;gdpPercap&quot;,        y=&quot;lifeExp&quot;,        size=&quot;pop&quot;,        color=&quot;continent&quot;,        log_x=True,        size_max=60,        template=template,    )    return figclientside_callback(    &quot;&quot;&quot;    (switchOn) =&gt; {       switchOn         ? document.documentElement.setAttribute('data-bs-theme', 'light')         : document.documentElement.setAttribute('data-bs-theme', 'dark')       return window.dash_clientside.no_update    }    &quot;&quot;&quot;,    Output(&quot;switch&quot;, &quot;id&quot;),    Input(&quot;switch&quot;, &quot;value&quot;),)if __name__ == &quot;__main__&quot;:    app.run_server(debug=True)```&lt;br&gt;&lt;br&gt;## Dash AG Grid with a Bootstrap themeHere is an example of the theme change component to show different Bootstrap themes with Dash AG Grid:See live demo https://hellodash.pythonanywhere.com/adding-themes/ag-grid![ag-grid-dbc-theme](https://github.com/AnnMarieW/dash-bootstrap-templates/assets/72614349/10bd25fc-1e01-4ba9-ac38-d18a14d7ef4f)&lt;br&gt;&lt;br&gt;## Background[Dash Labs](https://community.plotly.com/t/introducing-dash-labs/52087) is Plotly library that explores new features for future releases of Dash. In Dash Labs V0.4.0, there was a cool feature where Bootstrap themed figure templates were created &quot;on the fly&quot;. This was apart of the layout templates project that is no longer being developed.    Even though these Bootstrap themed figure templates will not be included in Dash, the `dash-bootstrap-templates` makesthem available to you. The figure templates are created using the Dash Labs' algorithms and saved in json format.  When you use `load_figure_template()` in your app, it loads the json file, adds it to `plotly.io` and sets it as the default figure template for an app.  See more information about  Plotly figure templates [here](https://plotly.com/python/templates/).&lt;br&gt;&lt;br&gt;## Available ThemesThis library provides a figure template for the following Bootstrap/Bootswatch themes:templates = [  &quot;bootstrap&quot;,  &quot;cerulean&quot;,  &quot;cosmo&quot;,  &quot;cyborg&quot;,  &quot;darkly&quot;,  &quot;flatly&quot;,  &quot;journal&quot;,  &quot;litera&quot;,  &quot;lumen&quot;,  &quot;lux&quot;,  &quot;materia&quot;,  &quot;minty&quot;,  &quot;morph&quot;,  &quot;pulse&quot;,  &quot;quartz&quot;,  &quot;sandstone&quot;,  &quot;simplex&quot;,  &quot;sketchy&quot;,  &quot;slate&quot;,  &quot;solar&quot;,  &quot;spacelab&quot;,  &quot;superhero&quot;,  &quot;united&quot;,  &quot;vapor&quot;,  &quot;yeti&quot;,  &quot;zephyr&quot;]templates_dark = ['bootstrap_dark', 'cerulean_dark', 'cosmo_dark', 'cyborg_dark', 'darkly_dark', 'flatly_dark', 'journal_dark', 'litera_dark', 'lumen_dark', 'lux_dark', 'materia_dark', 'minty_dark', 'morph_dark', 'pulse_dark', 'quartz_dark', 'sandstone_dark', 'simplex_dark', 'sketchy_dark', 'slate_dark', 'solar_dark', 'spacelab_dark', 'superhero_dark', 'united_dark', 'vapor_dark', 'yeti_dark', 'zephyr_dark']Note in dark themes [&quot;cyborg&quot;, &quot;darkly&quot;, &quot;slate&quot;, &quot;solar&quot;, &quot;superhero&quot;, &quot;vapor&quot;], there is not much difference in the figure templates in light or dark color modes.## ThemeChangerAIO Reference**ThemeChangerAIO** is an All-in-One component  composed  of a parent `html.Div` withthe following components as children:- `dbc.Button` (&quot;`switch`&quot;) Opens the Offcanvas component for user to select a theme.- `dbc.Offcanvas` (&quot;`offcanvas`&quot;)- `dbc.RadioItems` (&quot;`radio`&quot;).  The themes are displayed as RadioItems inside the `dbc.Offcanvas` component.  The `value` is a url for the theme- `html.Div` is used as the `Output` of the clientside callbacks.The ThemeChangerAIO component updates the stylesheet  when the `value` of radio changes. (ie the user selects a new theme)- param: `radio_props` A dictionary of properties passed into the dbc.RadioItems component. The default `value` is `dbc.themes.BOOTSTRAP`- param: `button_props`  A dictionary of properties passed into the dbc.Button component.- param: `offcanvas_props`. A dictionary of properties passed into the dbc.Offcanvas component- param: `aio_id` The All-in-One component ID used to generate components' dictionary IDs.The All-in-One component dictionary IDs are available as:- ThemeChangerAIO.ids.radio(aio_id)- ThemeChangerAIO.ids.offcanvas(aio_id)- ThemeChangerAIO.ids.button(aio_id)    ## ThemeSwitchAIO Reference**ThemeSwitchAIO** is an All-in-One component  composed  of a parent `html.Div` with the following components as children:- `dbc.Switch` (&quot;`switch`&quot;) with icons to the left and right of the switch.- `dcc.Store` (&quot;`store`&quot;) The `themes` are stored in the `data` prop.- `html.Div` is used as the `Output` of the clientside callbacks.The ThemeSwitchAIO component updates the stylesheet when triggered by changes to the `value` of `switch` or whenthe themes are updated in the &quot;`store`&quot; component.  The themes in the switch may be updated in a callbackby changing the theme urls in the &quot;`store`&quot; component.- param: `switch_props` A dictionary of properties passed into the dbc.Switch component.- param: `themes` A list of two urls for the external stylesheets or pathnames to files.- param: `icons`  A dict of the icons to the left and right of the switch. The default is    `{&quot;left&quot; :&quot;fa fa-moon&quot;, &quot;right&quot; :&quot;fa fa-sun&quot;}`.- param: `aio_id` The All-in-One component ID used to generate component's dictionary IDs.The All-in-One component dictionary IDs are available as- ThemeSwitchAIO.ids.switch(aio_id)- ThemeSwitchAIO.ids.store(aio_id)---### ContributorsSpecial thanks to @tcbegley and @emilhe for their help with this project.</longdescription>
</pkgmetadata>