<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![csf1](https://github.com/jianboqi/CSF/blob/master/CSFDemo/CSF1.png) ![csf2](https://github.com/jianboqi/CSF/blob/master/CSFDemo/CSF2.png)# CSFAirborne LiDAR filtering method based on Cloth Simulation.This is the code for the article:W. Zhang, J. Qi*, P. Wan, H. Wang, D. Xie, X. Wang, and G. Yan, “An Easy-to-Use Airborne LiDAR Data Filtering Method Based on Cloth Simulation,” Remote Sens., vol. 8, no. 6, p. 501, 2016.(http://www.mdpi.com/2072-4292/8/6/501/htm)**New feature has been implemented:**Now, We has wrapped a Python interface for CSF with swig. It is simpler to use now. This new feature can make CSF easier to be embeded into a large project. For example, it can work with Laspy (https://github.com/laspy/laspy). What you do is just read a point cloud into a python 2D list, and pass it to CSF.The following example shows how to use it with laspy.```python# coding: utf-8import laspyimport CSFimport numpy as npinFile = laspy.read(r&quot;in.las&quot;) # read a las filepoints = inFile.pointsxyz = np.vstack((inFile.x, inFile.y, inFile.z)).transpose() # extract x, y, z and put into a listcsf = CSF.CSF()# prameter settingscsf.params.bSloopSmooth = Falsecsf.params.cloth_resolution = 0.5# more details about parameter: http://ramm.bnu.edu.cn/projects/CSF/download/csf.setPointCloud(xyz)ground = CSF.VecInt()  # a list to indicate the index of ground points after calculationnon_ground = CSF.VecInt() # a list to indicate the index of non-ground points after calculationcsf.do_filtering(ground, non_ground) # do actual filtering.outFile = laspy.LasData(inFile.header)outFile.points = points[np.array(ground)] # extract ground points, and save it to a las file.out_file.write(r&quot;out.las&quot;)```**Reading data from txt file:**If the lidar data is stored in txt file (x y z for each line), it can also be imported directly.```pythonimport CSFcsf = CSF.CSF()csf.readPointsFromFile('samp52.txt')csf.params.bSloopSmooth = Falsecsf.params.cloth_resolution = 0.5ground = CSF.VecInt()  # a list to indicate the index of ground points after calculationnon_ground = CSF.VecInt() # a list to indicate the index of non-ground points after calculationcsf.do_filtering(ground, non_ground) # do actual filtering.csf.savePoints(ground,&quot;ground.txt&quot;)```### How to use CSF in PythonDownload the source code. under python folder:```pythonpython setup.py buildpython setup.py install ```### How to use CSF in Matlabsee more details from file `demo_mex.m` under matlab folder.### How to use CSF in RThanks to the nice work of @Jean-Romain, through the collaboration, the CSF has been made as a R package, the details can be found in the [RCSF repository](https://github.com/Jean-Romain/RCSF). This package can be used easily with the [lidR package](https://github.com/Jean-Romain/lidR):```rlibrary(lidR)las  &lt;- readLAS(&quot;file.las&quot;)las  &lt;- lasground(las, csf())```### How to use CSF in C++Now, CSF is built by CMake, it produces a static library, which can be used by other c++ programs.#### linuxTo build the library, run:```bashmkdir build #or other namecd buildcmake ..makesudo make install```or if you want to build the library and the demo executable `csfdemo````bashmkdir build #or other namecd buildcmake -DBUILD_DEMO=ON ..makesudo make install```#### WindowsYou can use CMake GUI to generate visual studio solution file.### Binary VersionFor binary release version, it can be downloaded at: http://ramm.bnu.edu.cn/projects/CSF/download/Note: This code has been changed a lot since the publication of the corresponding paper. A lot of optimizations have been made. We are still working on it, and wish it could be better.### Cloudcompare PulginAt last, if you are interested in Cloudcompare, there is a good news. our method has been implemented as a Cloudcompare plugin, you can refer to : https://github.com/cloudcompare/trunk### Related projectA tool named `CSFTools` has been recently released, it is based on CSF, and provides dem/chm generation, normalization. Please refer to: https://github.com/jianboqi/CSFTools### LicenseCSF is maintained and developed by Jianbo QI. It is now released under Apache 2.0.</longdescription>
</pkgmetadata>