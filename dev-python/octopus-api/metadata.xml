<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># octopus-api![octopus_icon](https://github.com/FilipByren/octopus-api/blob/main/image.png?raw=true)## AboutOctopus-api is a python library for performing client-based optimized connections requests and limit rates set by the endpoint contract.Octopus-api is simple; it combines the [asyncio](https://docs.python.org/3/library/asyncio.html) and [aiohttp](https://docs.aiohttp.org/en/stable/) library's functionality and makes sure the requests follows the constraints set by the contract.## Installation`pip install octopus-api`## PyPihttps://pypi.org/project/octopus-api/## Get startedTo start Octopus, you first initiate the client, setting your constraints. ```pythonclient = OctopusApi(rate=30, resolution=&quot;minute&quot;, retries=10)client = OctopusApi(rate=5, resolution=&quot;sec&quot;, retries=3)client = OctopusApi(connections=100, retries=5)```After that, you will specify what you want to perform on the endpoint response. This is done within a user-defined function.```pythonasync def patch_data(session: TentacleSession, request: Dict):    async with session.patch(url=request[&quot;url&quot;], data=requests[&quot;data&quot;], params=request[&quot;params&quot;]) as response:        body = await response.json()        return body[&quot;id&quot;]```As Octopus `TentacleSession` uses [aiohttp](https://docs.aiohttp.org/en/stable/) under the hood, the resulting  way to write **POST**, **GET**, **PUT** and **PATCH** for aiohttp will be the same for octopus. The only difference is the added functionality of retries and optional rate limit.Finally, you finish everything up with the `execute` call for the octopus client, where you provide the list of requests dicts and the user function.The execute call will then return a list of the return values defined in user function. As the requests list is a bounded stream we return the result in order.```pythonresult: List = client.execute(requests_list=[    {        &quot;url&quot;: &quot;http://localhost:3000&quot;,        &quot;data&quot;: {&quot;id&quot;: &quot;a&quot;, &quot;first_name&quot;: &quot;filip&quot;},        &quot;params&quot;: {&quot;id&quot;: &quot;a&quot;}    },    {        &quot;url&quot;: &quot;http://localhost:3000&quot;,        &quot;data&quot;: {&quot;id&quot;: &quot;b&quot;, &quot;first_name&quot;: &quot;morris&quot;},        &quot;params&quot;: {&quot;id&quot;: &quot;b&quot;}     }    ] , func=patch_data)```### ExamplesOptimize the request based on max connections constraints:```pythonfrom octopus_api import TentacleSession, OctopusApifrom typing import Dict, Listif __name__ == '__main__':    async def get_text(session: TentacleSession, request: Dict):        async with session.get(url=request[&quot;url&quot;], params=request[&quot;params&quot;]) as response:            body = await response.text()            return body    client = OctopusApi(connections=100)    result: List = client.execute(requests_list=[{        &quot;url&quot;: &quot;http://google.com&quot;,        &quot;params&quot;: {}}] * 100, func=get_text)    print(result)```Optimize the request based on rate limit constraints:```pythonfrom octopus_api import TentacleSession, OctopusApifrom typing import Dict, Listif __name__ == '__main__':    async def get_ethereum_id(session: TentacleSession, request: Dict):        async with session.get(url=request[&quot;url&quot;], params=request[&quot;params&quot;]) as response:            body = await response.json()            return body[&quot;id&quot;]    client = OctopusApi(rate=30, resolution=&quot;minute&quot;)    result: List = client.execute(requests_list=[{        &quot;url&quot;: &quot;http://api.coingecko.com/api/v3/coins/ethereum?tickers=false&amp;localization=false&amp;market_data=false&quot;,        &quot;params&quot;: {}}] * 100, func=get_ethereum_id)    print(result)```Optimize the request based on rate limit and connections limit:```pythonfrom octopus_api import TentacleSession, OctopusApifrom typing import Dict, Listif __name__ == '__main__':    async def get_ethereum(session: TentacleSession, request: Dict):        async with session.get(url=request[&quot;url&quot;], params=request[&quot;params&quot;]) as response:            body = await response.json()            return body    client = OctopusApi(rate=50, resolution=&quot;sec&quot;, connections=6)    result: List = client.execute(requests_list=[{        &quot;url&quot;: &quot;https://api.pro.coinbase.com/products/ETH-EUR/candles?granularity=900&amp;start=2021-12-04T00:00:00Z&amp;end=2021-12-04T00:00:00Z&quot;,        &quot;params&quot;: {}}] * 1000, func=get_ethereum)    print(result)```</longdescription>
</pkgmetadata>