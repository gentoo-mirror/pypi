<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># inuits_policy_based_authinuits_policy_based_auth is a python package for securing API endpoints based on policies.## InstallationInstall inuits_policy_based_auth as follows:```pip install inuits-policy-based-auth```## Getting StartedIn your app, instantiate the PolicyFactory by passing a logger as argument. For example, in app.py (all examples given are based on a Python Flask app).```pythonfrom inuits_policy_based_auth import PolicyFactorypolicy_factory = PolicyFactory(logger)```### Manually loading policiesImporting and registering policies can be done manually.```pythonfrom inuits_policy_based_auth.authentication.policies.token_based_policies.authlib_flask_oauth2_policy import (    AuthlibFlaskOauth2Policy,)from inuits_policy_based_auth.authorization.policies.super_admin_policy import (    SuperAdminPolicy,)policy_factory.register_authentication_policy(AuthlibFlaskOauth2Policy(...))policy_factory.register_authorization_policy(SuperAdminPolicy())```However, it is strongly recommended to load policies dynamically as this will allow you to make use of the full potential of this package.### Dynamically loading policiesYou can write a loader which loads policies dynamically based on a configuration file.Example configuration file:```json{  &quot;[app_name]&quot;: {    &quot;name&quot;: &quot;[app_name]&quot;,    &quot;description&quot;: &quot;&quot;,    &quot;version&quot;: 0.1,    &quot;author&quot;: &quot;Inuits&quot;,    &quot;author_email&quot;: &quot;developers@inuits.eu&quot;,    &quot;license&quot;: &quot;GPLv2&quot;,    &quot;policies&quot;: {      &quot;authentication&quot;: [        &quot;token_based_policies.authlib_flask_oauth2_policy&quot;      ],      &quot;authorization&quot;: [        &quot;super_admin_policy&quot;,        &quot;open_data_policy&quot;      ]    }  }}```Example policy_loader.py:```pythonimport jsonimport osfrom importlib import import_modulefrom inuits_policy_based_auth import PolicyFactoryfrom inuits_policy_based_auth.exceptions import (    PolicyFactoryException,)def load_policies(policy_factory: PolicyFactory):    apps = {}    configuration_file_name = os.getenv(&quot;CONFIGURATION_FILE_NAME&quot;) or &quot;&quot;    with open(configuration_file_name) as configuration_file:        apps = json.load(configuration_file)    for app in apps:        try:            auth_type = &quot;authentication&quot;            for policy_module_name in apps[app][&quot;policies&quot;].get(auth_type):                policy = __get_class(app, auth_type, policy_module_name)                policy = __instantiate_authentication_policy(                    policy_module_name, policy, policy_factory.logger                )                policy_factory.register_authentication_policy(policy)            auth_type = &quot;authorization&quot;            for policy_module_name in apps[app][&quot;policies&quot;].get(auth_type):                policy = __get_class(app, auth_type, policy_module_name)                policy_factory.register_authorization_policy(policy())        except Exception as error:            raise PolicyFactoryException(                f&quot;Policy factory was not configured correctly: {str(error)}&quot;            ).with_traceback(error.__traceback__)def __get_class(app, auth_type, policy_module_name):    module = None    try:        module = import_module(f&quot;apps.{app}.policies.{auth_type}.{policy_module_name}&quot;)    except:        module = import_module(            f&quot;inuits_policy_based_auth.{auth_type}.policies.{policy_module_name}&quot;        )    policy_class_name = module.__name__.split(&quot;.&quot;)[-1].title().replace(&quot;_&quot;, &quot;&quot;)    policy = getattr(module, policy_class_name)    return policydef __instantiate_authentication_policy(policy_module_name, policy, logger):    if policy_module_name == &quot;token_based_policies.authlib_flask_oauth2_policy&quot;:        return policy(            logger,            os.getenv(&quot;STATIC_ISSUER&quot;, False),            os.getenv(&quot;STATIC_PUBLIC_KEY&quot;, False),            os.getenv(&quot;REALMS&quot;, &quot;&quot;).split(&quot;,&quot;),            os.getenv(&quot;ROLE_PERMISSION_FILE&quot;, &quot;role_permission.json&quot;),            os.getenv(&quot;REMOTE_TOKEN_VALIDATION&quot;, False) in [&quot;True&quot;, &quot;true&quot;, True],            os.getenv(&quot;REMOTE_PUBLIC_KEY&quot;, False),        )    return policy()```Now you can import the loader in app.py and pass ```policy_factory``` as an argument to it.```pythonfrom apps.policy_loader import load_policiesload_policies(policy_factory)```As you can see in these examples, dynamically loading policies will allow you to add new policies and override existing ones, which makes this package highly customizable and generic.### Custom policiesContinuing from the examples above, you can make a custom authorization policy by creating a folder ```policies``` within a specific app. Here you should create the folders ```authentication``` and ```authorization``` that will contain custom policies which you can add to your configuration. In this case we name our new policy the same as an existing one, which will override it. Each authentication policy must inherit from BaseAuthenticationPolicy and implement the abstract method ```authenticate```, while each authorization policy must inherit from BaseAuthorizationPolicy and implement the abstract method ```authorize```.Example folder structure:```api├── apps│  ├── [app_name]│  │  ├── policies│  │  │  ├── authentication│  │  │  └── authorization│  │  │     └── open_data_policy.py│  │  ├── ......│  ├── configuration.json│  └── policy_loader.py...└── app.py```Example custom open_data_policy.py:```pythonfrom inuits_policy_based_auth import BaseAuthorizationPolicyclass OpenDataPolicy(BaseAuthorizationPolicy):    def authorize(self, policy_context, user_context, request_context):        request = request_context.http_request        if request.method == &quot;GET&quot; and user_context.tenant == &quot;inuits&quot;:            policy_context.access_verdict = True        return policy_context```## UsageIf everything is set up correctly, you can use the ```apply_policies``` decorator as follows:```pythonfrom app import policy_factoryfrom flask import requestfrom inuits_policy_based_auth import RequestContextclass Entity():    @policy_factory.apply_policies(RequestContext(request))    def get(self):        ...```You can also use the ```authenticate``` decorator to only apply authentication policies:```pythonfrom app import policy_factoryclass Entity():    @policy_factory.authenticate()    def get(self):        ...```## ContributingDo not hesitate to open issues and create pull requests.</longdescription>
</pkgmetadata>