<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: images/logo.png===============.. image:: https://img.shields.io/badge/PayPal-donate-blue?logo=paypal    :target: https://www.paypal.me/mterpilowski.. image:: https://img.shields.io/circleci/build/github/maximtrp/scikit-posthocs    :target: https://app.circleci.com/pipelines/github/maximtrp/scikit-posthocs.. image:: https://img.shields.io/readthedocs/scikit-posthocs.svg    :target: https://scikit-posthocs.readthedocs.io.. image:: http://joss.theoj.org/papers/10.21105/joss.01169/status.svg    :target: https://doi.org/10.21105/joss.01169.. image:: https://codecov.io/gh/maximtrp/scikit-posthocs/branch/master/graph/badge.svg    :target: https://codecov.io/gh/maximtrp/scikit-posthocs.. image:: https://app.codacy.com/project/badge/Grade/50d2a82a6dd84b51b515cebf931067d7    :target: https://www.codacy.com/gh/maximtrp/scikit-posthocs/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=maximtrp/scikit-posthocs&amp;amp;utm_campaign=Badge_Grade.. image:: https://pepy.tech/badge/scikit-posthocs    :target: https://pepy.tech/project/scikit-posthocs.. image:: https://img.shields.io/github/issues/maximtrp/scikit-posthocs.svg    :target: https://github.com/maximtrp/scikit-posthocs/issues.. image:: https://img.shields.io/pypi/v/scikit-posthocs.svg    :target: https://pypi.python.org/pypi/scikit-posthocs/.. image:: https://img.shields.io/conda/vn/conda-forge/scikit-posthocs.svg    :target: https://anaconda.org/conda-forge/scikit-posthocs**scikit-posthocs** is a Python package that provides post hoc tests forpairwise multiple comparisons that are usually performed in statisticaldata analysis to assess the differences between group levels if a statisticallysignificant result of ANOVA test has been obtained.**scikit-posthocs** is tightly integrated with Pandas DataFrames and NumPyarrays to ensure fast computations and convenient data import and storage.This package will be useful for statisticians, data analysts, andresearchers who use Python in their work.Background----------Python statistical ecosystem comprises multiple packages. However, itstill has numerous gaps and is surpassed by R packages and capabilities.`SciPy &lt;https://www.scipy.org/&gt;`_ (version 1.2.0) offers *Student*, *Wilcoxon*,and *Mann-Whitney* tests that are not adapted to multiple pairwisecomparisons. `Statsmodels &lt;http://statsmodels.sourceforge.net/&gt;`_ (version 0.9.0)features *TukeyHSD* test that needs some extra actions to be fluentlyintegrated into a data analysis pipeline.`Statsmodels &lt;http://statsmodels.sourceforge.net/&gt;`_ also has good helpermethods: ``allpairtest`` (adapts an external function such as``scipy.stats.ttest_ind`` to multiple pairwise comparisons) and``multipletests`` (adjusts *p* values to minimize type I and II errors).`PMCMRplus &lt;https://rdrr.io/cran/PMCMRplus/&gt;`_ is a very good R package thathas no rivals in Python as it offers more than 40 various tests (includingpost hoc tests) for factorial and block design data. PMCMRplus was aninspiration and a reference for *scikit-posthocs*.**scikit-posthocs** attempts to improve Python statistical capabilities byoffering a lot of parametric and nonparametric post hoc tests along withoutliers detection and basic plotting methods.Features--------.. image:: images/flowchart.png  :alt: Tests Flowchart- *Omnibus* tests:  - Durbin test (for balanced incomplete block design).  - Mack-Wolfe test.  - Hayter (OSRT) test.- *Parametric* pairwise multiple comparisons tests:  - Scheffe test.  - Student T test.  - Tamhane T2 test.  - TukeyHSD test.- *Non-parametric* tests for factorial design:  - Conover test.  - Dunn test.  - Dwass, Steel, Critchlow, and Fligner test.  - Mann-Whitney test.  - Nashimoto and Wright (NPM) test.  - Nemenyi test.  - van Waerden test.  - Wilcoxon test.- *Non-parametric* tests for block design:  - Conover test.  - Durbin and Conover test.  - Miller test.  - Nemenyi test.  - Quade test.  - Siegel test.- Outliers detection tests:  - Simple test based on interquartile range (IQR).  - Grubbs test.  - Tietjen-Moore test.  - Generalized Extreme Studentized Deviate test (ESD test).- Other tests:  - Anderson-Darling test.- Global null hypothesis tests:    - Fisher's combination test.  - Simes test.- Plotting functionality (e.g. significance plots).All post hoc tests are capable of p adjustments for multiplepairwise comparisons.Dependencies------------- `NumPy and SciPy packages &lt;https://www.scipy.org/&gt;`_- `Statsmodels &lt;http://statsmodels.sourceforge.net/&gt;`_- `Pandas &lt;http://pandas.pydata.org/&gt;`_- `Matplotlib &lt;https://matplotlib.org/&gt;`_- `Seaborn &lt;https://seaborn.pydata.org/&gt;`_Compatibility-------------Package is only compatible with Python 3.Install-------You can install the package using ``pip`` (from PyPi):.. code:: bash  pip install scikit-posthocsOr using ``conda`` (from conda-forge repo):.. code:: bash  conda install -c conda-forge scikit-posthocsThe latest version from GitHub can be installed using:.. code:: bash  pip install git+https://github.com/maximtrp/scikit-posthocs.gitExamples--------Parametric ANOVA with post hoc tests~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Here is a simple example of the one-way analysis of variance (ANOVA)with post hoc tests used to compare *sepal width* means of threegroups (three iris species) in *iris* dataset.To begin, we will import the dataset using statsmodels``get_rdataset()`` method... code:: python  &gt;&gt;&gt; import statsmodels.api as sa  &gt;&gt;&gt; import statsmodels.formula.api as sfa  &gt;&gt;&gt; import scikit_posthocs as sp  &gt;&gt;&gt; df = sa.datasets.get_rdataset('iris').data  &gt;&gt;&gt; df.columns = df.columns.str.replace('.', '')  &gt;&gt;&gt; df.head()      SepalLength   SepalWidth   PetalLength   PetalWidth Species  0           5.1          3.5           1.4          0.2  setosa  1           4.9          3.0           1.4          0.2  setosa  2           4.7          3.2           1.3          0.2  setosa  3           4.6          3.1           1.5          0.2  setosa  4           5.0          3.6           1.4          0.2  setosaNow, we will build a model and run ANOVA using statsmodels ``ols()``and ``anova_lm()`` methods. Columns ``Species`` and ``SepalWidth``contain independent (predictor) and dependent (response) variablevalues, correspondingly... code:: python  &gt;&gt;&gt; lm = sfa.ols('SepalWidth ~ C(Species)', data=df).fit()  &gt;&gt;&gt; anova = sa.stats.anova_lm(lm)  &gt;&gt;&gt; print(anova)                 df     sum_sq   mean_sq         F        PR(&gt;F)  C(Species)    2.0  11.344933  5.672467  49.16004  4.492017e-17  Residual    147.0  16.962000  0.115388       NaN           NaNThe results tell us that there is a significant difference betweengroups means (p = 4.49e-17), but does not tell us the exact group pairs whichare different in means. To obtain pairwise group differences, we will carryout a posteriori (post hoc) analysis using ``scikits-posthocs`` package.Student T test applied pairwisely gives us the following p values:.. code:: python  &gt;&gt;&gt; sp.posthoc_ttest(df, val_col='SepalWidth', group_col='Species', p_adjust='holm')                    setosa    versicolor     virginica  setosa     -1.000000e+00  5.535780e-15  8.492711e-09  versicolor  5.535780e-15 -1.000000e+00  1.819100e-03  virginica   8.492711e-09  1.819100e-03 -1.000000e+00Remember to use a `FWER controlling procedure &lt;https://en.wikipedia.org/wiki/Family-wise_error_rate#Controlling_procedures&gt;`_,such as Holm procedure, when making multiple comparisons. As seen from thistable, significant differences in group means are obtained for all group pairs.Non-parametric ANOVA with post hoc tests~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If normality and other `assumptions &lt;https://en.wikipedia.org/wiki/One-way_analysis_of_variance&gt;`_are violated, one can use a non-parametric Kruskal-Wallis H test (one-waynon-parametric ANOVA) to test if samples came from the same distribution.Let's use the same dataset just to demonstrate the procedure. Kruskal-Wallistest is implemented in SciPy package. ``scipy.stats.kruskal`` methodaccepts array-like structures, but not DataFrames... code:: python  &gt;&gt;&gt; import scipy.stats as ss  &gt;&gt;&gt; import statsmodels.api as sa  &gt;&gt;&gt; import scikit_posthocs as sp  &gt;&gt;&gt; df = sa.datasets.get_rdataset('iris').data  &gt;&gt;&gt; df.columns = df.columns.str.replace('.', '')  &gt;&gt;&gt; data = [df.loc[ids, 'SepalWidth'].values for ids in df.groupby('Species').groups.values()]``data`` is a list of 1D arrays containing *sepal width* values, one array pereach species. Now we can run Kruskal-Wallis analysis of variance... code:: python  &gt;&gt;&gt; H, p = ss.kruskal(*data)  &gt;&gt;&gt; p  1.5692820940316782e-14P value tells us we may reject the null hypothesis that the population mediansof all of the groups are equal. To learn what groups (species) differ in theirmedians we need to run post hoc tests. ``scikit-posthocs`` provides a lot ofnon-parametric tests mentioned above. Let's choose Conover's test... code:: python  &gt;&gt;&gt; sp.posthoc_conover(df, val_col='SepalWidth', group_col='Species', p_adjust = 'holm')                    setosa    versicolor     virginica  setosa     -1.000000e+00  2.278515e-18  1.293888e-10  versicolor  2.278515e-18 -1.000000e+00  1.881294e-03  virginica   1.293888e-10  1.881294e-03 -1.000000e+00Pairwise comparisons show that we may reject the null hypothesis (p &lt; 0.01) foreach pair of species and conclude that all groups (species) differ in theirsepal widths.Block design~~~~~~~~~~~~In block design case, we have a primary factor (e.g. treatment) and a blockingfactor (e.g. age or gender). A blocking factor is also called a *nuisance*factor, and it is usually a source of variability that needs to be accountedfor.An example scenario is testing the effect of four fertilizers on crop yield infour cornfields. We can represent the results with a matrix in which rowscorrespond to the blocking factor (field) and columns correspond to theprimary factor (yield).The following dataset is artificial and created just for demonstrationof the procedure:.. code:: python  &gt;&gt;&gt; data = np.array([[ 8.82, 11.8 , 10.37, 12.08],                       [ 8.92,  9.58, 10.59, 11.89],                       [ 8.27, 11.46, 10.24, 11.6 ],                       [ 8.83, 13.25,  8.33, 11.51]])First, we need to perform an omnibus test — Friedman rank sum test. It isimplemented in ``scipy.stats`` subpackage:.. code:: python  &gt;&gt;&gt; import scipy.stats as ss  &gt;&gt;&gt; ss.friedmanchisquare(*data.T)  FriedmanchisquareResult(statistic=8.700000000000003, pvalue=0.03355726870553798)We can reject the null hypothesis that our treatments have the samedistribution, because p value is less than 0.05. A number of post hoc tests areavailable in ``scikit-posthocs`` package for unreplicated block design data.In the following example, Nemenyi's test is used:.. code:: python  &gt;&gt;&gt; import scikit_posthocs as sp  &gt;&gt;&gt; sp.posthoc_nemenyi_friedman(data)            0         1         2         3  0 -1.000000  0.220908  0.823993  0.031375  1  0.220908 -1.000000  0.670273  0.823993  2  0.823993  0.670273 -1.000000  0.220908  3  0.031375  0.823993  0.220908 -1.000000This function returns a DataFrame with p values obtained in pairwisecomparisons between all treatments.One can also pass a DataFrame and specify the names of columns containingdependent variable values, blocking and primary factor values.The following code creates a DataFrame with the same data:.. code:: python  &gt;&gt;&gt; data = pd.DataFrame.from_dict({'blocks': {0: 0, 1: 1, 2: 2, 3: 3, 4: 0, 5: 1, 6:  2, 7: 3, 8: 0, 9: 1, 10: 2, 11: 3, 12: 0, 13: 1, 14: 2, 15: 3}, 'groups': {0:  0, 1: 0, 2: 0, 3: 0, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 3,  13: 3, 14: 3, 15: 3}, 'y': {0: 8.82, 1: 8.92, 2: 8.27, 3: 8.83, 4: 11.8, 5:  9.58, 6: 11.46, 7: 13.25, 8: 10.37, 9: 10.59, 10: 10.24, 11: 8.33, 12: 12.08,  13: 11.89, 14: 11.6, 15: 11.51}})  &gt;&gt;&gt; data      blocks  groups      y  0        0       0   8.82  1        1       0   8.92  2        2       0   8.27  3        3       0   8.83  4        0       1  11.80  5        1       1   9.58  6        2       1  11.46  7        3       1  13.25  8        0       2  10.37  9        1       2  10.59  10       2       2  10.24  11       3       2   8.33  12       0       3  12.08  13       1       3  11.89  14       2       3  11.60  15       3       3  11.51This is a *melted* and ready-to-use DataFrame. Do not forget to pass ``melted``argument:.. code:: python  &gt;&gt;&gt; sp.posthoc_nemenyi_friedman(data, y_col='y', block_col='blocks', group_col='groups', melted=True)            0         1         2         3  0 -1.000000  0.220908  0.823993  0.031375  1  0.220908 -1.000000  0.670273  0.823993  2  0.823993  0.670273 -1.000000  0.220908  3  0.031375  0.823993  0.220908 -1.000000Data types~~~~~~~~~~Internally, ``scikit-posthocs`` uses NumPy ndarrays and pandas DataFrames tostore and process data. Python lists, NumPy ndarrays, and pandas DataFramesare supported as *input* data types. Below are usage examples of variousinput data structures.Lists and arrays^^^^^^^^^^^^^^^^.. code:: python  &gt;&gt;&gt; x = [[1,2,1,3,1,4], [12,3,11,9,3,8,1], [10,22,12,9,8,3]]  &gt;&gt;&gt; # or  &gt;&gt;&gt; x = np.array([[1,2,1,3,1,4], [12,3,11,9,3,8,1], [10,22,12,9,8,3]])  &gt;&gt;&gt; sp.posthoc_conover(x, p_adjust='holm')            1         2         3  1 -1.000000  0.057606  0.007888  2  0.057606 -1.000000  0.215761  3  0.007888  0.215761 -1.000000You can check how it is processed with a hidden function ``__convert_to_df()``:.. code:: python  &gt;&gt;&gt; sp.__convert_to_df(x)  (    vals  groups   0      1       1   1      2       1   2      1       1   3      3       1   4      1       1   5      4       1   6     12       2   7      3       2   8     11       2   9      9       2   10     3       2   11     8       2   12     1       2   13    10       3   14    22       3   15    12       3   16     9       3   17     8       3   18     3       3, 'vals', 'groups')It returns a tuple of a DataFrame representation and names of the columnscontaining dependent (``vals``) and independent (``groups``) variable values.*Block design* matrix passed as a NumPy ndarray is processed with a hidden``__convert_to_block_df()`` function:.. code:: python  &gt;&gt;&gt; data = np.array([[ 8.82, 11.8 , 10.37, 12.08],                       [ 8.92,  9.58, 10.59, 11.89],                       [ 8.27, 11.46, 10.24, 11.6 ],                       [ 8.83, 13.25,  8.33, 11.51]])  &gt;&gt;&gt; sp.__convert_to_block_df(data)  (    blocks groups      y   0        0      0   8.82   1        1      0   8.92   2        2      0   8.27   3        3      0   8.83   4        0      1  11.80   5        1      1   9.58   6        2      1  11.46   7        3      1  13.25   8        0      2  10.37   9        1      2  10.59   10       2      2  10.24   11       3      2   8.33   12       0      3  12.08   13       1      3  11.89   14       2      3  11.60   15       3      3  11.51, 'y', 'groups', 'blocks')DataFrames^^^^^^^^^^If you are using DataFrames, you need to pass column names containing variablevalues to a post hoc function:.. code:: python  &gt;&gt;&gt; import statsmodels.api as sa  &gt;&gt;&gt; import scikit_posthocs as sp  &gt;&gt;&gt; df = sa.datasets.get_rdataset('iris').data  &gt;&gt;&gt; df.columns = df.columns.str.replace('.', '')  &gt;&gt;&gt; sp.posthoc_conover(df, val_col='SepalWidth', group_col='Species', p_adjust = 'holm')``val_col`` and ``group_col`` arguments specify the names of the columnscontaining dependent (response) and independent (grouping) variable values.Significance plots------------------P values can be plotted using a heatmap:.. code:: python  &gt;&gt;&gt; pc = sp.posthoc_conover(x, val_col='values', group_col='groups')  &gt;&gt;&gt; heatmap_args = {'linewidths': 0.25, 'linecolor': '0.5', 'clip_on': False, 'square': True, 'cbar_ax_bbox': [0.80, 0.35, 0.04, 0.3]}  &gt;&gt;&gt; sp.sign_plot(pc, **heatmap_args).. image:: images/plot-conover.pngCustom colormap applied to a plot:.. code:: python  &gt;&gt;&gt; pc = sp.posthoc_conover(x, val_col='values', group_col='groups')  &gt;&gt;&gt; # Format: diagonal, non-significant, p&lt;0.001, p&lt;0.01, p&lt;0.05  &gt;&gt;&gt; cmap = ['1', '#fb6a4a',  '#08306b',  '#4292c6', '#c6dbef']  &gt;&gt;&gt; heatmap_args = {'cmap': cmap, 'linewidths': 0.25, 'linecolor': '0.5', 'clip_on': False, 'square': True, 'cbar_ax_bbox': [0.80, 0.35, 0.04, 0.3]}  &gt;&gt;&gt; sp.sign_plot(pc, **heatmap_args).. image:: images/plot-conover-custom-cmap.pngCiting------If you want to cite *scikit-posthocs*, please refer to the publication inthe `Journal of Open Source Software &lt;http://joss.theoj.org&gt;`_:Terpilowski, M. (2019). scikit-posthocs: Pairwise multiple comparison tests inPython. Journal of Open Source Software, 4(36), 1169, https://doi.org/10.21105/joss.01169.. code::  @ARTICLE{Terpilowski2019,    title    = {scikit-posthocs: Pairwise multiple comparison tests in Python},    author   = {Terpilowski, Maksim},    journal  = {The Journal of Open Source Software},    volume   = {4},    number   = {36},    pages    = {1169},    year     = {2019},    doi      = {10.21105/joss.01169}  }Acknowledgement---------------Thorsten Pohlert, PMCMR author and maintainerCopyright (c) 2020 Maksim TerpilowskiPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.</longdescription>
</pkgmetadata>