<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>arcp-py=======Create/parse arcp_ (Archive and Package) URIs... image:: https://readthedocs.org/projects/arcp/badge/?version=latest  :target: https://arcp.readthedocs.io/en/latest/?badge=latest  :alt: Documentation Status.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.1162749.svg  :target: https://doi.org/10.5281/zenodo.1162749.. image:: https://travis-ci.org/stain/arcp-py.svg?branch=master  :target: https://travis-ci.org/stain/arcp-py.. image:: https://img.shields.io/pypi/v/arcp.svg?maxAge=86400  :target: https://pypi.org/project/arcp/.. image:: https://coveralls.io/repos/github/stain/arcp-py/badge.svg?branch=master  :target: https://coveralls.io/github/stain/arcp-py?branch=master.. image:: https://codecov.io/gh/stain/arcp-py/branch/master/graph/badge.svg  :target: https://codecov.io/gh/stain/arcp-pyIntroduction------------``arcp`` provides functions for creating arcp_ URIs, which can be used for identifying or parsing hypermedia files packaged in an archive or package, like a ZIP file.arcp URIs can be used to consume or reference hypermedia resources bundled inside a file archive or an application package, as well as to resolve URIs for archive resources within a programmatic framework.This URI scheme provides mechanisms to generate a unique base URI to represent the root of the archive, so that relative URI references in a bundled resource can be resolved within the archive without having to extract the archive content on the local file system.An arcp URI can be used for purposes of isolation (e.g. when consuming multiple archives), security constraints (avoiding “climb out” from thearchive), or for externally identiyfing sub-resources referenced byhypermedia formats.Examples: - ``arcp://uuid,32a423d6-52ab-47e3-a9cd-54f418a48571/doc.html`` - ``arcp://uuid,b7749d0b-0e47-5fc4-999d-f154abe68065/pics/`` - ``arcp://ni,sha-256;F-34D4TUeOfG0selz7REKRDo4XePkewPeQYtjL3vQs0/`` - ``arcp://name,gallery.example.org/``The different forms of URI authority_ in arcp URIs can be used dependingon which uniqueness constraints to apply when addressing an archive.See the arcp_ specification (*draft-soilandreyes-arcp*) for details.Note that this library only provides mechanisms to *generate* and *parse* arcp URIs, and do *not* integrate with any particular archive or URL handling modules like ``zipfile`` or ``urllib.request``.License-------© 2018-2020 Stian Soiland-Reyes &lt;https://orcid.org/0000-0001-9842-9718&gt;, The University of Manchester, UKLicensed under the Apache License, version 2.0 &lt;https://www.apache.org/licenses/LICENSE-2.0&gt;, see the file LICENSE.txt for details.Contribute----------Source code: &lt;https://github.com/stain/arcp-py&gt;Feel free to raise a pull request at &lt;https://github.com/stain/arcp-py/pulls&gt;or an issue at &lt;https://github.com/stain/arcp-py/issues&gt;.Submitted contributions are assumed to be covered by section 5 of the Apache License 2.0.Installing----------You will need Python 2.7, Python 3.4 or later (Recommended: 3.6).If you have pip_, then the easiest is normally to install from &lt;https://pypi.org/project/arcp/&gt; using::    pip install arcpIf you want to install manually from this code base, then try::    python setup.py installUsage------For full documentation, see &lt;https://arcp.readthedocs.io/&gt; or use ``help(arcp)``This module provides functions for creating arcp_ URIs, which can be used for identifying or parsing hypermedia files packaged in an archive or package, like a ZIP file:: python    &gt;&gt;&gt; from arcp import *    &gt;&gt;&gt; arcp_random()    'arcp://uuid,dcd6b1e8-b3a2-43c9-930b-0119cf0dc538/'    &gt;&gt;&gt; arcp_random(&quot;/foaf.ttl&quot;, fragment=&quot;me&quot;)    'arcp://uuid,dcd6b1e8-b3a2-43c9-930b-0119cf0dc538/foaf.ttl#me'    &gt;&gt;&gt; arcp_hash(b&quot;Hello World!&quot;, &quot;/folder/&quot;)    'arcp://ni,sha-256;f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk/folder/'    &gt;&gt;&gt; arcp_location(&quot;http://example.com/data.zip&quot;, &quot;/file.txt&quot;)    'arcp://uuid,b7749d0b-0e47-5fc4-999d-f154abe68065/file.txt'arcp URLs can be used with ``urllib.parse``, for instance using ``urljoin`` to resolve relative references::    &gt;&gt;&gt; css = arcp.arcp_name(&quot;app.example.com&quot;, &quot;css/style.css&quot;)    &gt;&gt;&gt; urllib.parse.urljoin(css, &quot;../fonts/foo.woff&quot;)    'arcp://name,app.example.com/fonts/foo.woff'In addition this module provides functions that can be usedto parse arcp URIs into its constituent fields:: python    &gt;&gt;&gt; is_arcp_uri(&quot;arcp://uuid,b7749d0b-0e47-5fc4-999d-f154abe68065/file.txt&quot;)    True    &gt;&gt;&gt; is_arcp_uri(&quot;http://example.com/t&quot;)    False    &gt;&gt;&gt; u = parse_arcp(&quot;arcp://uuid,b7749d0b-0e47-5fc4-999d-f154abe68065/file.txt&quot;)    ARCPSplitResult(scheme='arcp',prefix='uuid',name='b7749d0b-0e47-5fc4-999d-f154abe68065',      uuid='b7749d0b-0e47-5fc4-999d-f154abe68065',path='/file.txt',query='',fragment='')    &gt;&gt;&gt; u.path    '/file.txt'    &gt;&gt;&gt; u.prefix    'uuid'    &gt;&gt;&gt; u.uuid    UUID('b7749d0b-0e47-5fc4-999d-f154abe68065')    &gt;&gt;&gt; u.uuid.version    5    &gt;&gt;&gt; parse_arcp(&quot;arcp://ni,sha-256;f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk/folder/&quot;).hash    ('sha-256', '7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069')The object returned from ``parse_arcp`` is similar to ``ParseResult`` from ``urlparse``, but contains additional properties ``prefix``, ``uuid``, ``ni``, ``hash`` and ``name``, some of which will be ``None`` depending on the arcp prefix.The function ``arcp.parse.urlparse`` can be imported as an alternative to ``urllib.parse.urlparse``. If the scheme is ``arcp`` then the extra arcp fields like `prefix`, `uuid`, `hash` and `name` are availableas from `parse_arcp`, otherwise the output is the same as from regular `urlparse`:: python    &gt;&gt;&gt; from arcp.parse import urlparse    &gt;&gt;&gt; urlparse(&quot;arcp://ni,sha-256;f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk/folder/soup;sads&quot;)    ARCPParseResult(scheme='arcp',prefix='ni',       name='sha-256;f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk',       ni='sha-256;f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk',       hash=('sha-256', '7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069',       path='/folder/soup;sads',query='',fragment='')    &gt;&gt;&gt; urlparse(&quot;http://example.com/help?q=a&quot;)    ParseResult(scheme='http', netloc='example.com', path='/help', params='',       query='q=a', fragment='').. _arcp: https://tools.ietf.org/html/draft-soilandreyes-arcp-03.. _pip: https://docs.python.org/3/installing/.. _authority: https://tools.ietf.org/id/draft-soilandreyes-arcp-03.html#rfc.section.4.1</longdescription>
</pkgmetadata>