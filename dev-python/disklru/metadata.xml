<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># disklru`pip install disklru`Creates a disk based lru (least recently used) cache, backed by sqlite, that you can use in your apps.Zero dependency package. Only relies on the python standard lib. Cross platform tests.[![Linting](https://github.com/zackees/disklru/actions/workflows/lint.yml/badge.svg)](https://github.com/zackees/disklru/actions/workflows/lint.yml)[![MacOS_Tests](https://github.com/zackees/disklru/actions/workflows/push_macos.yml/badge.svg)](https://github.com/zackees/disklru/actions/workflows/push_macos.yml)[![Ubuntu_Tests](https://github.com/zackees/disklru/actions/workflows/push_ubuntu.yml/badge.svg)](https://github.com/zackees/disklru/actions/workflows/push_ubuntu.yml)[![Win_Tests](https://github.com/zackees/disklru/actions/workflows/push_win.yml/badge.svg)](https://github.com/zackees/disklru/actions/workflows/push_win.yml)# Usage```pythonfrom disklru import DiskLRUCacheLRU_CACHE_FILE = &quot;cache.db&quot;MAX_ENTRIES = 4cache = DiskLRUCache(LRU_CACHE_FILE, MAX_ENTRIES)cache.put(&quot;key&quot;, &quot;value&quot;)assert cache.get(&quot;key1&quot;) == &quot;val&quot;cache.clear()```# API```pythonclass DiskLRUCache:    &quot;&quot;&quot;Disk-based LRU cache using SQLite.&quot;&quot;&quot;    def get(self, key: str) -&gt; str | None:        &quot;&quot;&quot;Returns the value associated with the given key, or None if the key is not in the cache.&quot;&quot;&quot;    def get_json(self, key: str) -&gt; Any:        &quot;&quot;&quot;Returns the value associated with the given key, or None if the key is not in the cache.&quot;&quot;&quot;    def put(self, key: str, value: str) -&gt; None:        &quot;&quot;&quot;Sets the value associated with the given key.&quot;&quot;&quot;    def put_json(self, key: str, val: Any) -&gt; None:        &quot;&quot;&quot;Sets the value associated with the given key.&quot;&quot;&quot;    def delete(self, key) -&gt; None:        &quot;&quot;&quot;Deletes the given key from the cache.&quot;&quot;&quot;    def purge(self, timestamp) -&gt; None:        &quot;&quot;&quot;Purges all elements less than the timestamp.&quot;&quot;&quot;    def clear(self) -&gt; None:        &quot;&quot;&quot;Clears the cache.&quot;&quot;&quot;    def __del__(self) -&gt; None:        &quot;&quot;&quot;Destructor.&quot;&quot;&quot;        self.close()    def close(self) -&gt; None:        &quot;&quot;&quot;Closes the connection to the database.&quot;&quot;&quot;```# Development### WindowsThis environment requires you to use `git-bash`.### LintingRun `./lint.sh` to find linting errors using `pylint`, `flake8` and `mypy`.</longdescription>
</pkgmetadata>