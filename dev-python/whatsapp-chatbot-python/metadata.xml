<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># whatsapp-chatbot-python![](https://img.shields.io/badge/license-CC%20BY--ND%204.0-green)![](https://img.shields.io/pypi/status/whatsapp-chatbot-python)![](https://img.shields.io/pypi/pyversions/whatsapp-chatbot-python)![](https://img.shields.io/github/actions/workflow/status/green-api/whatsapp-chatbot-python/python-package.yml)![](https://img.shields.io/pypi/dm/whatsapp-chatbot-python)- [Документация на русском языке](https://github.com/green-api/whatsapp-chatbot-python/blob/master/docs/README.md).whatsapp-chatbot-python is a library for integration with WhatsApp messenger using the APIservice [green-api.com](https://green-api.com/en/). You should get a registration token and an account ID inyour [personal cabinet](https://console.green-api.com/) to use the library. There is a free developer account tariff.## APIThe documentation for the REST API can be found at the [link](https://green-api.com/en/docs/). The library is a wrapperfor the REST API, so the documentation at the link above also applies.## AuthorizationTo send a message or perform other Green API methods, the WhatsApp account in the phone app must be authorized. Toauthorize the account, go to your [cabinet](https://console.green-api.com/) and scan the QR code using the WhatsApp app.## InstallationInstallation:```shellpython -m pip install whatsapp-chatbot-python```## Import```from whatsapp_chatbot_python import GreenAPIBot, Notification```## Examples### How to initialize an object```bot = GreenAPIBot(    &quot;1101000001&quot;, &quot;d75b3a66374942c5b3c019c698abc2067e151558acbd412345&quot;)```### How to start receiving and answering messagesTo start receiving messages, you must create a handler function with one parameter (`notification`). The `notification`parameter is the class where the notification object (`event`) and the functions to answer the message are stored. Tosend a text message in response to a notification, you need to call the `notification.answer` function and pass therethe text of the message. You don't need to pass the `chatId` parameter because it is automatically taken from thenotification.Next, you need to add the handler function to the list of handlers. This can be done with the `bot.router.message`decorator as in the example or with the `bot.router.message.add_handler` function. The decorator must be called withbrackets.To start the bot, call the `bot.run_forever` function. You can stop the bot with the key combination Ctrl + C.Link to example: [base.py](https://github.com/green-api/whatsapp-chatbot-python/blob/master/examples/base.py).```@bot.router.message(text_message=&quot;message&quot;)def message_handler(notification: Notification) -&gt; None:    notification.answer(&quot;Hello&quot;)bot.run_forever()```### How to receive other notifications and handle the notification bodyYou can receive not only incoming messages but also outgoing messages. You can also get the status of the sent message.- To receive outgoing messages, you need to use the `bot.router.outgoing_message` object;- To receive outgoing API messages, you need to use the `bot.router.outgoing_api_message` object;- To receive the status of sent messages, you need to use the `bot.router.outgoing_message_status` object.The body of the notification is in `notification.event`. In this example, we get the message type from the notificationbody.Link to example: [event.py](https://github.com/green-api/whatsapp-chatbot-python/blob/master/examples/event.py).```@bot.router.message()def message_handler(notification: Notification) -&gt; None:    print(notification.event)bot.run_forever()```### How to filter incoming messagesMessages can be filtered by chat, sender, message type, and text. To filter chat, sender, and message type, you can usea string (`str`) or a list of strings (`list[str]`). The message text can be filtered by text, command, and regularexpressions. Below is a table with filter names and possible values.| Filter name    | Description                                                                               | Possible values                                                    ||----------------|-------------------------------------------------------------------------------------------|--------------------------------------------------------------------|| `from_chat`    | Chats or chats from which you want to receive messages                                    | `&quot;11001234567@c.us&quot;` or `[&quot;11001234567@c.us&quot;, &quot;11002345678@c.us&quot;]` || `from_sender`  | The sender or senders from whom you want to receive messages                              | `&quot;11001234567@c.us&quot;` or `[&quot;11001234567@c.us&quot;, &quot;11002345678@c.us&quot;]` || `type_message` | The type or types of message to be handled                                                | `&quot;textMessage&quot;` or `[&quot;textMessage&quot;, &quot;extendedTextMessage&quot;]`        || `text_message` | Your function will be executed if the text fully matches the text                         | `&quot;Hello. I need help.&quot;` or `[&quot;Hello&quot;, &quot;I need help&quot;]`              || `regexp`       | Your function will be executed if the text matches the regular expression pattern         | `r&quot;Hello. I need help.&quot;`                                           || `command`      | Your function will be executed if the prefix and the command match your values completely | `&quot;help&quot;` or `(&quot;help&quot;, &quot;!/&quot;)`                                       |#### How to add filters through the decorator```@bot.router.message(command=&quot;command&quot;)```#### How to add filters with the function```bot.router.message.add_handler(handler, command=&quot;command&quot;)```#### How to filter messages by chat, sender, or message typeTo filter messages by chat, sender, or message type, you must add a string (`str`) or a list of strings (`list[str]`).```from_chat = &quot;11001234567@c.us&quot;``````from_sender = &quot;11001234567@c.us&quot;``````type_message = [&quot;textMessage&quot;, &quot;extendedTextMessage&quot;]```#### How to filter messages by message text or regular expressionsYou must add a string (`str`) to filter messages by text or regular expressions.```text_message = &quot;Hello. I need help.&quot;``````regexp = r&quot;Hello. I need help.&quot;```#### How to filter messages by commandAdd a string (`str`) or a tuple (`tuple`) to filter messages by command. You need to specify either a command name or acommand name and a prefix string. The default prefix is `/`.```command = &quot;help&quot;``````command = (&quot;help&quot;, &quot;!/&quot;)```#### ExampleLink to example: [filters.py](https://github.com/green-api/whatsapp-chatbot-python/blob/master/examples/filters.py).```@bot.router.message(command=&quot;rates&quot;)def message_handler(notification: Notification) -&gt; None:    notification.answer_with_file(file=&quot;data/rates.png&quot;)bot.run_forever()```### How to handle buttonsTo be notified when a button is pressed, you must use the `bot.router.buttons` object.Link to example: [buttons.py](https://github.com/green-api/whatsapp-chatbot-python/blob/master/examples/buttons.py).```@bot.router.buttons()def buttons_handler(notification: Notification) -&gt; None:    notification.answer_buttons(&quot;Choose a color&quot;, [        {            &quot;buttonId&quot;: 1,            &quot;buttonText&quot;: &quot;Red&quot;        },        {            &quot;buttonId&quot;: 2,            &quot;buttonText&quot;: &quot;Green&quot;        },        {            &quot;buttonId&quot;: 3,            &quot;buttonText&quot;: &quot;Blue&quot;        }    ])bot.run_forever()```### Example of a botLink to example: [full_example.py](https://github.com/green-api/whatsapp-chatbot-python/blob/master/examples/full_example.py).```pythonfrom whatsapp_chatbot_python import GreenAPIBot, Notificationbot = GreenAPIBot(    &quot;1101000001&quot;, &quot;d75b3a66374942c5b3c019c698abc2067e151558acbd412345&quot;)@bot.router.message(command=&quot;start&quot;)def message_handler(notification: Notification) -&gt; None:    sender_data = notification.event[&quot;senderData&quot;]    sender_name = sender_data[&quot;senderName&quot;]    notification.answer(        (            f&quot;Hello, {sender_name}. Here's what I can do:\n\n&quot;            &quot;1. Report a problem\n&quot;            &quot;2. Show office address\n&quot;            &quot;3. Show available rates\n&quot;            &quot;4. Call a support operator\n\n&quot;            &quot;Choose a number and send to me.&quot;        )    )@bot.router.message(text_message=[&quot;1&quot;, &quot;Report a problem&quot;])def report_problem_handler(notification: Notification) -&gt; None:    notification.answer(        &quot;https://github.com/green-api/issues/issues/new&quot;, link_preview=False    )@bot.router.message(text_message=[&quot;2&quot;, &quot;Show office address&quot;])def show_office_address_handler(notification: Notification) -&gt; None:    chat = notification.get_chat()    notification.api.sending.sendLocation(        chatId=chat, latitude=55.7522200, longitude=37.6155600    )@bot.router.message(text_message=[&quot;3&quot;, &quot;Show available rates&quot;])def show_available_rates_handler(notification: Notification) -&gt; None:    notification.answer_with_file(&quot;data/rates.png&quot;)@bot.router.message(text_message=[&quot;4&quot;, &quot;Call a support operator&quot;])def call_support_operator_handler(notification: Notification) -&gt; None:    notification.answer(&quot;Good. A tech support operator will contact you soon.&quot;)bot.run_forever()```## Service methods documentation[Service methods documentation](https://green-api.com/en/docs/api/)## LicenseLicensed under [Creative Commons Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)](https://creativecommons.org/licenses/by-nd/4.0/) terms. Please see file [LICENSE](https://github.com/green-api/whatsapp-chatbot-python/blob/master/LICENSE).</longdescription>
</pkgmetadata>