<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pycfmodel![Build Status](https://github.com/Skyscanner/pycfmodel/workflows/PyPI%20release/badge.svg)[![PyPI version](https://badge.fury.io/py/pycfmodel.svg)](https://badge.fury.io/py/pycfmodel)[![Total alerts](https://img.shields.io/lgtm/alerts/g/Skyscanner/pycfmodel.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/Skyscanner/pycfmodel/alerts/)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/Skyscanner/pycfmodel.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/Skyscanner/pycfmodel/context:python)[![Documentation Status](https://readthedocs.org/projects/pycfmodel/badge/?version=latest)](https://pycfmodel.readthedocs.io/en/latest/?badge=latest)*A python model for Cloud Formation scripts.***pycfmodel** makes it easier to work with CloudFormation scripts in Python bycreating a model comprised of python objects. Objects have various helperfunctions which help with performing common tasks related to parsing andinspecting CloudFormation scripts.`pip install pycfmodel`## Currently Supported* AWSTemplateFormatVersion* Conditions* Description* Mappings* Metadata* Outputs* Parameters* Resources:    * Properties:        * Policy        * Policy Document        * Principal        * Security Group Egress Prop        * Security Group Ingress Prop        * Statement        * Tag    * EC2 VPC Endpoint Policy    * Generic Resource    * IAM Group    * IAM Managed Policy    * IAM Policy    * IAM Role    * IAM User    * KMS Key    * OpenSearch Service (legacy ElasticSearch resource)        * Elasticsearch Domain    * OpenSearch Service        * OpenSearchService Domain    * S3 Bucket    * S3 Bucket Policy    * Security Group    * Security Group Egress    * Security Group Ingress    * SNS Topic Policy    * SQS Queue Policy* Transform## Example```pythonfrom pycfmodel import parsetemplate = {    &quot;AWSTemplateFormatVersion&quot;: &quot;2010-09-09&quot;,    &quot;Parameters&quot;: {&quot;StarParameter&quot;: {&quot;Type&quot;: &quot;String&quot;, &quot;Default&quot;: &quot;*&quot;, &quot;Description&quot;: &quot;Star Param&quot;}},    &quot;Resources&quot;: {        &quot;rootRole&quot;: {            &quot;Type&quot;: &quot;AWS::IAM::Role&quot;,            &quot;Properties&quot;: {                &quot;AssumeRolePolicyDocument&quot;: {                    &quot;Version&quot;: &quot;2012-10-17&quot;,                    &quot;Statement&quot;: [                        {                            &quot;Effect&quot;: &quot;Allow&quot;,                            &quot;Principal&quot;: {&quot;AWS&quot;: {&quot;Fn::Sub&quot;: &quot;arn:aws:iam::${AWS::AccountId}:root&quot;}},                            &quot;Action&quot;: [&quot;sts:AssumeRole&quot;],                        }                    ],                },                &quot;Path&quot;: &quot;/&quot;,                &quot;Policies&quot;: [                    {                        &quot;PolicyName&quot;: &quot;root&quot;,                        &quot;PolicyDocument&quot;: {                            &quot;Version&quot;: &quot;2012-10-17&quot;,                            &quot;Statement&quot;: [                                {                                    &quot;Effect&quot;: &quot;Allow&quot;,                                    &quot;Action&quot;: {&quot;Ref&quot;: &quot;StarParameter&quot;},                                    &quot;Resource&quot;: {&quot;Ref&quot;: &quot;StarParameter&quot;},                                }                            ],                        },                    }                ],            },        }    },}model = parse(template).resolve(extra_params={&quot;AWS::AccountId&quot;: &quot;123&quot;})rootRole = model.Resources[&quot;rootRole&quot;]policy = rootRole.Properties.Policies[0]statement = policy.PolicyDocument.Statement[0]assert statement.Action == &quot;*&quot;assert statement.Resource == &quot;*&quot;assert rootRole.Properties.AssumeRolePolicyDocument.Statement[0].Principal == {&quot;AWS&quot;: &quot;arn:aws:iam::123:root&quot;}```## Local Development Commands```bashmake install-devmake coveragemake testmake freeze```If the test `tests/test_constants.py::test_cloudformation_actions` is failing, it can be resolved by updating the known AWS Actions:```bashpython3 scripts/generate_cloudformation_actions_file.py```</longdescription>
</pkgmetadata>