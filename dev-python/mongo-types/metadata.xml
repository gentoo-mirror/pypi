<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mongo-types [![PyPI](https://img.shields.io/pypi/v/mongo-types.svg)](https://pypi.org/project/mongo-types/)Type stubs for [`mongoengine`][0] with some basic type stubs for [`pymongo`][1]and [`bson`][2].Allows for autocomplete and static typing.## install```shellpip install mongo-types```Monkey patch mongoengine's `QuerySet` so we can type it with a genericargument at runtime:```pythonimport typesfrom mongoengine.queryset.queryset import QuerySetdef no_op(self, x):    return selfQuerySet.__class_getitem__ = types.MethodType(no_op, QuerySet)```## usageAfter installing and monkey patching, the types should work for the mostpart,but you'll probably need to change how you write some things.### getting `objects` to workBy default, the base document is typed to not have an `objects` property sothat each document can type it properly.Here's a helper class that's useful for simple cases which don't modify the`QuerySet`.```pythonfrom typing import Generic, Type, TypeVarfrom mongoengine import QuerySet, DocumentU = TypeVar(&quot;U&quot;, bound=Document)class QuerySetManager(Generic[U]):    def __get__(self, instance: object, cls: Type[U]) -&gt; QuerySet[U]:        return QuerySet(cls, cls._get_collection())class Page(Document):    meta = {        &quot;collection&quot;: &quot;pages&quot;,    }    objects = QuerySetManager[&quot;Page&quot;]()    organization = fields.StringField()```### replacing usages of `queryset_class`before:```pythonfrom typing import Typefrom mongoengine import QuerySet, Documentclass PostQuerySet(QuerySet):    def for_org(self, *, org: str) -&gt; QuerySet:        return self.filter(organization=org)    def exists(self) -&gt; bool:        return self.count() &gt; 0class Post(Document):    meta = {        &quot;collection&quot;: &quot;posts&quot;,        &quot;queryset_class&quot;: SMSLogQuerySet,    }    organization = fields.StringField()    # --snip--```after:```pythonfrom typing import Typefrom mongoengine import QuerySet, Documentclass PostQuerySet(QuerySet[&quot;Post&quot;]):    def for_org(self, *, org: str) -&gt; QuerySet[&quot;Post&quot;]:        return self.filter(organization=org)    def exists(self) -&gt; bool:        return self.count() &gt; 0class QuerySetManager:    def __get__(self, instance: object, cls: Type[Post]) -&gt; PostQuerySet:        return PostQuerySet(cls, cls._get_collection())class Post(Document):    meta = {        &quot;collection&quot;: &quot;posts&quot;,    }    objects = QuerySetManager()    organization = fields.StringField()    # --snip--```### replicating `@queryset_manager` behaviorbefore:```pythonfrom mongoengine import Document, QuerySet, queryset_manager, fieldsclass UserQuerySet(QuerySet):    def for_org(self, *, org: str) -&gt; QuerySet:        return self.filter(organization=org)class User(Document):    meta = {        &quot;collection&quot;: &quot;users&quot;,        &quot;queryset_class&quot;: UserQuerySet,    }    is_active = fields.BooleanField()    # --snip--    @queryset_manager    def objects(self, queryset: QuerySet) -&gt; QuerySet:        return queryset.filter(is_active=True)    @queryset_manager    def all_objects(self, queryset: QuerySet) -&gt; QuerySet:        return querysetmaybe_user = User.all_objects.first()```after:```pythonfrom __future__ import annotationsfrom typing import Typefrom mongoengine import QuerySet, Documentclass UserQuerySet(QuerySet[&quot;User&quot;]):    def for_org(self, *, org: str) -&gt; UserQuerySet:        return self.filter(organization=org)class QuerySetManager:    def __get__(self, instance: object, cls: Type[User]) -&gt; UserQuerySet:        return UserQuerySet(cls, cls._get_collection()).filter(is_active=True)class User(Document):    meta = {        &quot;collection&quot;: &quot;users&quot;,    }    is_active = fields.BooleanField()    # --snip--    objects = QuerySetManager()    @classmethod    def all_objects(cls) -&gt; UserQuerySet:        return UserQuerySet(cls, cls._get_collection())maybe_user = User.all_objects().first()```### fixing &quot;Model&quot; has no attribute &quot;id&quot;Mongoengine will define an `id` field for you automatically.Mongo-types require you specify your `id` explicitly so thatthe types can be more strict.```pythonclass User(Document):    meta = {        &quot;collection&quot;: &quot;users&quot;,    }# becomesclass User(Document):    meta = {        &quot;collection&quot;: &quot;users&quot;,    }    id = fields.StringField(db_field=&quot;_id&quot;, primary_key=True, default=default_id)# or if you prefer ObjectIdsclass User(Document):    meta = {        &quot;collection&quot;: &quot;users&quot;,    }    id = fields.ObjectIdField(db_field=&quot;_id&quot;, primary_key=True, default=ObjectId)```## dev```shellpoetry install# run formatting, linting, and typecheckings/lint# buildpoetry build -f wheel# build and publishpoetry publish --build```[0]: https://github.com/MongoEngine/mongoengine[1]: https://github.com/mongodb/mongo-python-driver/tree/master/pymongo[2]: https://github.com/mongodb/mongo-python-driver/tree/master/bson## related- &lt;https://github.com/sbdchd/django-types&gt;- &lt;https://github.com/sbdchd/djangorestframework-types&gt;- &lt;https://github.com/sbdchd/celery-types&gt;- &lt;https://github.com/sbdchd/msgpack-types&gt;</longdescription>
</pkgmetadata>