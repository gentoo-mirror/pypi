<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=======extruct=======.. image:: https://github.com/scrapinghub/extruct/workflows/build/badge.svg?branch=master    :target: https://github.com/scrapinghub/extruct/actions    :alt: Build Status.. image:: https://img.shields.io/codecov/c/github/scrapinghub/extruct/master.svg?maxAge=2592000    :target: https://codecov.io/gh/scrapinghub/extruct    :alt: Coverage report.. image:: https://img.shields.io/pypi/v/extruct.svg   :target: https://pypi.python.org/pypi/extruct   :alt: PyPI Version*extruct* is a library for extracting embedded metadata from HTML markup.Currently, *extruct* supports:- `W3C's HTML Microdata`_- `embedded JSON-LD`_- `Microformat`_ via `mf2py`_- `Facebook's Open Graph`_- (experimental) `RDFa`_ via `rdflib`_- `Dublin Core Metadata (DC-HTML-2003)`_.. _W3C's HTML Microdata: http://www.w3.org/TR/microdata/.. _embedded JSON-LD: http://www.w3.org/TR/json-ld/#embedding-json-ld-in-html-documents.. _RDFa: https://www.w3.org/TR/html-rdfa/.. _rdflib: https://pypi.python.org/pypi/rdflib/.. _Microformat: http://microformats.org/wiki/Main_Page.. _mf2py: https://github.com/microformats/mf2py.. _Facebook's Open Graph: http://ogp.me/.. _Dublin Core Metadata (DC-HTML-2003): https://www.dublincore.org/specifications/dublin-core/dcq-html/2003-11-30/The microdata algorithm is a revisit of `this Scrapinghub blog post`_ showing how to use EXSLT extensions... _this Scrapinghub blog post: http://blog.scrapinghub.com/2014/06/18/extracting-schema-org-microdata-using-scrapy-selectors-and-xpath/Installation------------::    pip install extructUsage-----All-in-one extraction+++++++++++++++++++++The simplest example how to use extruct is to call``extruct.extract(htmlstring, base_url=base_url)``with some HTML string and an optional base URL.Let's try this on a webpage that uses all the syntaxes supported (RDFa with `ogp`_).First fetch the HTML using python-requests and then feed the response body to ``extruct``::  &gt;&gt;&gt; import extruct  &gt;&gt;&gt; import requests  &gt;&gt;&gt; import pprint  &gt;&gt;&gt; from w3lib.html import get_base_url  &gt;&gt;&gt;  &gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=2)  &gt;&gt;&gt; r = requests.get('https://www.optimizesmart.com/how-to-use-open-graph-protocol/')  &gt;&gt;&gt; base_url = get_base_url(r.text, r.url)  &gt;&gt;&gt; data = extruct.extract(r.text, base_url=base_url)  &gt;&gt;&gt;  &gt;&gt;&gt; pp.pprint(data)  { 'dublincore': [ { 'elements': [ { 'URI': 'http://purl.org/dc/elements/1.1/description',                                        'content': 'What is Open Graph Protocol '                                                   'and why you need it? Learn to '                                                   'implement Open Graph Protocol '                                                   'for Facebook on your website. '                                                   'Open Graph Protocol Meta Tags.',                                        'name': 'description'}],                        'namespaces': {},                        'terms': []}],  'json-ld': [ { '@context': 'https://schema.org',                   '@id': '#organization',                   '@type': 'Organization',                   'logo': 'https://www.optimizesmart.com/wp-content/uploads/2016/03/optimize-smart-Twitter-logo.jpg',                   'name': 'Optimize Smart',                   'sameAs': [ 'https://www.facebook.com/optimizesmart/',                               'https://uk.linkedin.com/in/analyticsnerd',                               'https://www.youtube.com/user/optimizesmart',                               'https://twitter.com/analyticsnerd'],                   'url': 'https://www.optimizesmart.com/'}],    'microdata': [ { 'properties': {'headline': ''},                     'type': 'http://schema.org/WPHeader'}],    'microformat': [ { 'children': [ { 'properties': { 'category': [ 'specialized-tracking'],                                                       'name': [ 'Open Graph '                                                                 'Protocol for '                                                                 'Facebook '                                                                 'explained with '                                                                 'examples\n'                                                                 '\n'                                                                 'Specialized '                                                                 'Tracking\n'                                                                 '\n'                                                                 '\n'                                                                 (...)                                                                 'Follow '                                                                 '@analyticsnerd\n'                                                                 '!function(d,s,id){var '                                                                 &quot;js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, &quot;                                                                 &quot;'script', &quot;                                                                 &quot;'twitter-wjs');&quot;]},                                       'type': ['h-entry']}],                       'properties': { 'name': [ 'Open Graph Protocol for '                                                 'Facebook explained with '                                                 'examples\n'                                                 (...)                                                 'Follow @analyticsnerd\n'                                                 '!function(d,s,id){var '                                                 &quot;js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, &quot;                                                 &quot;'script', 'twitter-wjs');&quot;]},                       'type': ['h-feed']}],    'opengraph': [ { 'namespace': {'og': 'http://ogp.me/ns#'},                     'properties': [ ('og:locale', 'en_US'),                                     ('og:type', 'article'),                                     ( 'og:title',                                       'Open Graph Protocol for Facebook '                                       'explained with examples'),                                     ( 'og:description',                                       'What is Open Graph Protocol and why you '                                       'need it? Learn to implement Open Graph '                                       'Protocol for Facebook on your website. '                                       'Open Graph Protocol Meta Tags.'),                                     ( 'og:url',                                       'https://www.optimizesmart.com/how-to-use-open-graph-protocol/'),                                     ('og:site_name', 'Optimize Smart'),                                     ( 'og:updated_time',                                       '2018-03-09T16:26:35+00:00'),                                     ( 'og:image',                                       'https://www.optimizesmart.com/wp-content/uploads/2010/07/open-graph-protocol.jpg'),                                     ( 'og:image:secure_url',                                       'https://www.optimizesmart.com/wp-content/uploads/2010/07/open-graph-protocol.jpg')]}],    'rdfa': [ { '@id': 'https://www.optimizesmart.com/how-to-use-open-graph-protocol/#header',                'http://www.w3.org/1999/xhtml/vocab#role': [ { '@id': 'http://www.w3.org/1999/xhtml/vocab#banner'}]},              { '@id': 'https://www.optimizesmart.com/how-to-use-open-graph-protocol/',                'article:modified_time': [ { '@value': '2018-03-09T16:26:35+00:00'}],                'article:published_time': [ { '@value': '2010-07-02T18:57:23+00:00'}],                'article:publisher': [ { '@value': 'https://www.facebook.com/optimizesmart/'}],                'article:section': [{'@value': 'Specialized Tracking'}],                'http://ogp.me/ns#description': [ { '@value': 'What is Open '                                                              'Graph Protocol '                                                              'and why you need '                                                              'it? Learn to '                                                              'implement Open '                                                              'Graph Protocol '                                                              'for Facebook on '                                                              'your website. '                                                              'Open Graph '                                                              'Protocol Meta '                                                              'Tags.'}],                'http://ogp.me/ns#image': [ { '@value': 'https://www.optimizesmart.com/wp-content/uploads/2010/07/open-graph-protocol.jpg'}],                'http://ogp.me/ns#image:secure_url': [ { '@value': 'https://www.optimizesmart.com/wp-content/uploads/2010/07/open-graph-protocol.jpg'}],                'http://ogp.me/ns#locale': [{'@value': 'en_US'}],                'http://ogp.me/ns#site_name': [{'@value': 'Optimize Smart'}],                'http://ogp.me/ns#title': [ { '@value': 'Open Graph Protocol for '                                                        'Facebook explained with '                                                        'examples'}],                'http://ogp.me/ns#type': [{'@value': 'article'}],                'http://ogp.me/ns#updated_time': [ { '@value': '2018-03-09T16:26:35+00:00'}],                'http://ogp.me/ns#url': [ { '@value': 'https://www.optimizesmart.com/how-to-use-open-graph-protocol/'}],                'https://api.w.org/': [ { '@id': 'https://www.optimizesmart.com/wp-json/'}]}]}Select syntaxes+++++++++++++++It is possible to select which syntaxes to extract by passing a list with the desired ones to extract. Valid values: 'microdata', 'json-ld', 'opengraph', 'microformat', 'rdfa' and 'dublincore'. If no list is passed all syntaxes will be extracted and returned::  &gt;&gt;&gt; r = requests.get('http://www.songkick.com/artists/236156-elysian-fields')  &gt;&gt;&gt; base_url = get_base_url(r.text, r.url)  &gt;&gt;&gt; data = extruct.extract(r.text, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'])  &gt;&gt;&gt;  &gt;&gt;&gt; pp.pprint(data)  { 'microdata': [],    'opengraph': [ { 'namespace': { 'concerts': 'http://ogp.me/ns/fb/songkick-concerts#',                                    'fb': 'http://www.facebook.com/2008/fbml',                                    'og': 'http://ogp.me/ns#'},                     'properties': [ ('fb:app_id', '308540029359'),                                     ('og:site_name', 'Songkick'),                                     ('og:type', 'songkick-concerts:artist'),                                     ('og:title', 'Elysian Fields'),                                     ( 'og:description',                                       'Find out when Elysian Fields is next '                                       'playing live near you. List of all '                                       'Elysian Fields tour dates and concerts.'),                                     ( 'og:url',                                       'https://www.songkick.com/artists/236156-elysian-fields'),                                     ( 'og:image',                                       'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg')]}],    'rdfa': [ { '@id': 'https://www.songkick.com/artists/236156-elysian-fields',                'al:ios:app_name': [{'@value': 'Songkick Concerts'}],                'al:ios:app_store_id': [{'@value': '438690886'}],                'al:ios:url': [ { '@value': 'songkick://artists/236156-elysian-fields'}],                'http://ogp.me/ns#description': [ { '@value': 'Find out when '                                                              'Elysian Fields is '                                                              'next playing live '                                                              'near you. List of '                                                              'all Elysian '                                                              'Fields tour dates '                                                              'and concerts.'}],                'http://ogp.me/ns#image': [ { '@value': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg'}],                'http://ogp.me/ns#site_name': [{'@value': 'Songkick'}],                'http://ogp.me/ns#title': [{'@value': 'Elysian Fields'}],                'http://ogp.me/ns#type': [{'@value': 'songkick-concerts:artist'}],                'http://ogp.me/ns#url': [ { '@value': 'https://www.songkick.com/artists/236156-elysian-fields'}],                'http://www.facebook.com/2008/fbmlapp_id': [ { '@value': '308540029359'}]}]}Alternatively, if you already parsed the HTML before calling extruct, you can use the tree instead of the HTML string: ::  &gt;&gt;&gt; # using the request from the previous example  &gt;&gt;&gt; base_url = get_base_url(r.text, r.url)  &gt;&gt;&gt; from extruct.utils import parse_html  &gt;&gt;&gt; tree = parse_html(r.text)  &gt;&gt;&gt; data = extruct.extract(tree, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'])Microformat format doesn't support the HTML tree, so you need to use a HTML string.Uniform+++++++Another option is to uniform the output of microformat, opengraph, microdata, dublincore and json-ld syntaxes to the following structure: ::    {'@context': 'http://example.com',                 '@type': 'example_type',                 /* All other the properties in keys here */                 }To do so set ``uniform=True`` when calling ``extract``, it's false by default for backward compatibility. Here the same example as before but with uniform set to True: ::  &gt;&gt;&gt; r = requests.get('http://www.songkick.com/artists/236156-elysian-fields')  &gt;&gt;&gt; base_url = get_base_url(r.text, r.url)  &gt;&gt;&gt; data = extruct.extract(r.text, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'], uniform=True)  &gt;&gt;&gt;  &gt;&gt;&gt; pp.pprint(data)  { 'microdata': [],    'opengraph': [ { '@context': { 'concerts': 'http://ogp.me/ns/fb/songkick-concerts#',                                 'fb': 'http://www.facebook.com/2008/fbml',                                 'og': 'http://ogp.me/ns#'},                   '@type': 'songkick-concerts:artist',                   'fb:app_id': '308540029359',                   'og:description': 'Find out when Elysian Fields is next '                                     'playing live near you. List of all '                                     'Elysian Fields tour dates and concerts.',                   'og:image': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg',                   'og:site_name': 'Songkick',                   'og:title': 'Elysian Fields',                   'og:url': 'https://www.songkick.com/artists/236156-elysian-fields'}],    'rdfa': [ { '@id': 'https://www.songkick.com/artists/236156-elysian-fields',                'al:ios:app_name': [{'@value': 'Songkick Concerts'}],                'al:ios:app_store_id': [{'@value': '438690886'}],                'al:ios:url': [ { '@value': 'songkick://artists/236156-elysian-fields'}],                'http://ogp.me/ns#description': [ { '@value': 'Find out when '                                                              'Elysian Fields is '                                                              'next playing live '                                                              'near you. List of '                                                              'all Elysian '                                                              'Fields tour dates '                                                              'and concerts.'}],                'http://ogp.me/ns#image': [ { '@value': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg'}],                'http://ogp.me/ns#site_name': [{'@value': 'Songkick'}],                'http://ogp.me/ns#title': [{'@value': 'Elysian Fields'}],                'http://ogp.me/ns#type': [{'@value': 'songkick-concerts:artist'}],                'http://ogp.me/ns#url': [ { '@value': 'https://www.songkick.com/artists/236156-elysian-fields'}],                'http://www.facebook.com/2008/fbmlapp_id': [ { '@value': '308540029359'}]}]}NB rdfa structure is not uniformed yet.Returning HTML node+++++++++++++++++++It is also possible to get references to HTML node for every extracted metadata item.The feature is supported only by microdata syntax.To use that, just set the ``return_html_node`` option of ``extract`` method to ``True``.As the result, an additional key &quot;nodeHtml&quot; will be included in the result for everyitem. Each node is of ``lxml.etree.Element`` type: ::  &gt;&gt;&gt; r = requests.get('http://www.rugpadcorner.com/shop/no-muv/')  &gt;&gt;&gt; base_url = get_base_url(r.text, r.url)  &gt;&gt;&gt; data = extruct.extract(r.text, base_url, syntaxes=['microdata'], return_html_node=True)  &gt;&gt;&gt;  &gt;&gt;&gt; pp.pprint(data)  { 'microdata': [ { 'htmlNode': &lt;Element div at 0x7f10f8e6d3b8&gt;,                     'properties': { 'description': 'KEEP RUGS FLAT ON CARPET!\n'                                                    'Not your thin sticky pad, '                                                    'No-Muv is truly the best!',                                     'image': ['', ''],                                     'name': ['No-Muv', 'No-Muv'],                                     'offers': [ { 'htmlNode': &lt;Element div at 0x7f10f8e6d138&gt;,                                                   'properties': { 'availability': 'http://schema.org/InStock',                                                                   'price': 'Price:  '                                                                            '$45'},                                                   'type': 'http://schema.org/Offer'},                                                 { 'htmlNode': &lt;Element div at 0x7f10f8e60f48&gt;,                                                   'properties': { 'availability': 'http://schema.org/InStock',                                                                   'price': '(Select '                                                                            'Size/Shape '                                                                            'for '                                                                            'Pricing)'},                                                   'type': 'http://schema.org/Offer'}],                                     'ratingValue': ['5.00', '5.00']},                     'type': 'http://schema.org/Product'}]}Single extractors-----------------You can also use each extractor individually. See below.Microdata extraction++++++++++++++++++++::  &gt;&gt;&gt; import pprint  &gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=2)  &gt;&gt;&gt;  &gt;&gt;&gt; from extruct.w3cmicrodata import MicrodataExtractor  &gt;&gt;&gt;  &gt;&gt;&gt; # example from http://www.w3.org/TR/microdata/#associating-names-with-items  &gt;&gt;&gt; html = &quot;&quot;&quot;&lt;!DOCTYPE HTML&gt;  ... &lt;html&gt;  ...  &lt;head&gt;  ...   &lt;title&gt;Photo gallery&lt;/title&gt;  ...  &lt;/head&gt;  ...  &lt;body&gt;  ...   &lt;h1&gt;My photos&lt;/h1&gt;  ...   &lt;figure itemscope itemtype=&quot;http://n.whatwg.org/work&quot; itemref=&quot;licenses&quot;&gt;  ...    &lt;img itemprop=&quot;work&quot; src=&quot;images/house.jpeg&quot; alt=&quot;A white house, boarded up, sits in a forest.&quot;&gt;  ...    &lt;figcaption itemprop=&quot;title&quot;&gt;The house I found.&lt;/figcaption&gt;  ...   &lt;/figure&gt;  ...   &lt;figure itemscope itemtype=&quot;http://n.whatwg.org/work&quot; itemref=&quot;licenses&quot;&gt;  ...    &lt;img itemprop=&quot;work&quot; src=&quot;images/mailbox.jpeg&quot; alt=&quot;Outside the house is a mailbox. It has a leaflet inside.&quot;&gt;  ...    &lt;figcaption itemprop=&quot;title&quot;&gt;The mailbox.&lt;/figcaption&gt;  ...   &lt;/figure&gt;  ...   &lt;footer&gt;  ...    &lt;p id=&quot;licenses&quot;&gt;All images licensed under the &lt;a itemprop=&quot;license&quot;  ...    href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt;MIT  ...    license&lt;/a&gt;.&lt;/p&gt;  ...   &lt;/footer&gt;  ...  &lt;/body&gt;  ... &lt;/html&gt;&quot;&quot;&quot;  &gt;&gt;&gt;  &gt;&gt;&gt; mde = MicrodataExtractor()  &gt;&gt;&gt; data = mde.extract(html)  &gt;&gt;&gt; pp.pprint(data)  [{'properties': {'license': 'http://www.opensource.org/licenses/mit-license.php',                   'title': 'The house I found.',                   'work': 'http://www.example.com/images/house.jpeg'},    'type': 'http://n.whatwg.org/work'},   {'properties': {'license': 'http://www.opensource.org/licenses/mit-license.php',                   'title': 'The mailbox.',                   'work': 'http://www.example.com/images/mailbox.jpeg'},    'type': 'http://n.whatwg.org/work'}]JSON-LD extraction++++++++++++++++++::  &gt;&gt;&gt; import pprint  &gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=2)  &gt;&gt;&gt;  &gt;&gt;&gt; from extruct.jsonld import JsonLdExtractor  &gt;&gt;&gt;  &gt;&gt;&gt; html = &quot;&quot;&quot;&lt;!DOCTYPE HTML&gt;  ... &lt;html&gt;  ...  &lt;head&gt;  ...   &lt;title&gt;Some Person Page&lt;/title&gt;  ...  &lt;/head&gt;  ...  &lt;body&gt;  ...   &lt;h1&gt;This guys&lt;/h1&gt;  ...     &lt;script type=&quot;application/ld+json&quot;&gt;  ...     {  ...       &quot;@context&quot;: &quot;http://schema.org&quot;,  ...       &quot;@type&quot;: &quot;Person&quot;,  ...       &quot;name&quot;: &quot;John Doe&quot;,  ...       &quot;jobTitle&quot;: &quot;Graduate research assistant&quot;,  ...       &quot;affiliation&quot;: &quot;University of Dreams&quot;,  ...       &quot;additionalName&quot;: &quot;Johnny&quot;,  ...       &quot;url&quot;: &quot;http://www.example.com&quot;,  ...       &quot;address&quot;: {  ...         &quot;@type&quot;: &quot;PostalAddress&quot;,  ...         &quot;streetAddress&quot;: &quot;1234 Peach Drive&quot;,  ...         &quot;addressLocality&quot;: &quot;Wonderland&quot;,  ...         &quot;addressRegion&quot;: &quot;Georgia&quot;  ...       }  ...     }  ...     &lt;/script&gt;  ...  &lt;/body&gt;  ... &lt;/html&gt;&quot;&quot;&quot;  &gt;&gt;&gt;  &gt;&gt;&gt; jslde = JsonLdExtractor()  &gt;&gt;&gt;  &gt;&gt;&gt; data = jslde.extract(html)  &gt;&gt;&gt; pp.pprint(data)  [{'@context': 'http://schema.org',    '@type': 'Person',    'additionalName': 'Johnny',    'address': {'@type': 'PostalAddress',                'addressLocality': 'Wonderland',                'addressRegion': 'Georgia',                'streetAddress': '1234 Peach Drive'},    'affiliation': 'University of Dreams',    'jobTitle': 'Graduate research assistant',    'name': 'John Doe',    'url': 'http://www.example.com'}]RDFa extraction (experimental)++++++++++++++++++++++++++++++::  &gt;&gt;&gt; import pprint  &gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=2)  &gt;&gt;&gt; from extruct.rdfa import RDFaExtractor  # you can ignore the warning about html5lib not being available  INFO:rdflib:RDFLib Version: 4.2.1  /home/paul/.virtualenvs/extruct.wheel.test/lib/python3.5/site-packages/rdflib/plugins/parsers/structureddata.py:30: UserWarning: html5lib not found! RDFa and Microdata parsers will not be available.    'parsers will not be available.')  &gt;&gt;&gt;  &gt;&gt;&gt; html = &quot;&quot;&quot;&lt;html&gt;  ...  &lt;head&gt;  ...    ...  ...  &lt;/head&gt;  ...  &lt;body prefix=&quot;dc: http://purl.org/dc/terms/ schema: http://schema.org/&quot;&gt;  ...    &lt;div resource=&quot;/alice/posts/trouble_with_bob&quot; typeof=&quot;schema:BlogPosting&quot;&gt;  ...       &lt;h2 property=&quot;dc:title&quot;&gt;The trouble with Bob&lt;/h2&gt;  ...       ...  ...       &lt;h3 property=&quot;dc:creator schema:creator&quot; resource=&quot;#me&quot;&gt;Alice&lt;/h3&gt;  ...       &lt;div property=&quot;schema:articleBody&quot;&gt;  ...         &lt;p&gt;The trouble with Bob is that he takes much better photos than I do:&lt;/p&gt;  ...       &lt;/div&gt;  ...      ...  ...    &lt;/div&gt;  ...  &lt;/body&gt;  ... &lt;/html&gt;  ... &quot;&quot;&quot;  &gt;&gt;&gt;  &gt;&gt;&gt; rdfae = RDFaExtractor()  &gt;&gt;&gt; pp.pprint(rdfae.extract(html, base_url='http://www.example.com/index.html'))  [{'@id': 'http://www.example.com/alice/posts/trouble_with_bob',    '@type': ['http://schema.org/BlogPosting'],    'http://purl.org/dc/terms/creator': [{'@id': 'http://www.example.com/index.html#me'}],    'http://purl.org/dc/terms/title': [{'@value': 'The trouble with Bob'}],    'http://schema.org/articleBody': [{'@value': '\n'                                                 '        The trouble with Bob '                                                 'is that he takes much better '                                                 'photos than I do:\n'                                                 '      '}],    'http://schema.org/creator': [{'@id': 'http://www.example.com/index.html#me'}]}]You'll get a list of expanded JSON-LD nodes.Open Graph extraction++++++++++++++++++++++++++++++::  &gt;&gt;&gt; import pprint  &gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=2)  &gt;&gt;&gt;  &gt;&gt;&gt; from extruct.opengraph import OpenGraphExtractor  &gt;&gt;&gt;  &gt;&gt;&gt; html = &quot;&quot;&quot;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;  ... &lt;html xmlns=&quot;https://www.w3.org/1999/xhtml&quot; xmlns:og=&quot;https://ogp.me/ns#&quot; xmlns:fb=&quot;https://www.facebook.com/2008/fbml&quot;&gt;  ...  &lt;head&gt;  ...   &lt;title&gt;Himanshu's Open Graph Protocol&lt;/title&gt;  ...   &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=WINDOWS-1252&quot; /&gt;  ...   &lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;en-us&quot; /&gt;  ...   &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;event-education.css&quot; /&gt;  ...   &lt;meta name=&quot;verify-v1&quot; content=&quot;so4y/3aLT7/7bUUB9f6iVXN0tv8upRwaccek7JKB1gs=&quot; &gt;  ...   &lt;meta property=&quot;og:title&quot; content=&quot;Himanshu's Open Graph Protocol&quot;/&gt;  ...   &lt;meta property=&quot;og:type&quot; content=&quot;article&quot;/&gt;  ...   &lt;meta property=&quot;og:url&quot; content=&quot;https://www.eventeducation.com/test.php&quot;/&gt;  ...   &lt;meta property=&quot;og:image&quot; content=&quot;https://www.eventeducation.com/images/982336_wedding_dayandouan_th.jpg&quot;/&gt;  ...   &lt;meta property=&quot;fb:admins&quot; content=&quot;himanshu160&quot;/&gt;  ...   &lt;meta property=&quot;og:site_name&quot; content=&quot;Event Education&quot;/&gt;  ...   &lt;meta property=&quot;og:description&quot; content=&quot;Event Education provides free courses on event planning and management to event professionals worldwide.&quot;/&gt;  ...  &lt;/head&gt;  ...  &lt;body&gt;  ...   &lt;div id=&quot;fb-root&quot;&gt;&lt;/div&gt;  ...   &lt;script&gt;(function(d, s, id) {  ...               var js, fjs = d.getElementsByTagName(s)[0];  ...               if (d.getElementById(id)) return;  ...                  js = d.createElement(s); js.id = id;  ...                  js.src = &quot;//connect.facebook.net/en_US/all.js#xfbml=1&amp;appId=501839739845103&quot;;  ...                  fjs.parentNode.insertBefore(js, fjs);  ...                  }(document, 'script', 'facebook-jssdk'));&lt;/script&gt;  ...  &lt;/body&gt;  ... &lt;/html&gt;&quot;&quot;&quot;  &gt;&gt;&gt;  &gt;&gt;&gt; opengraphe = OpenGraphExtractor()  &gt;&gt;&gt; pp.pprint(opengraphe.extract(html))  [{&quot;namespace&quot;: {        &quot;og&quot;: &quot;http://ogp.me/ns#&quot;    },    &quot;properties&quot;: [        [            &quot;og:title&quot;,            &quot;Himanshu's Open Graph Protocol&quot;        ],        [            &quot;og:type&quot;,            &quot;article&quot;        ],        [            &quot;og:url&quot;,            &quot;https://www.eventeducation.com/test.php&quot;        ],        [            &quot;og:image&quot;,            &quot;https://www.eventeducation.com/images/982336_wedding_dayandouan_th.jpg&quot;        ],        [            &quot;og:site_name&quot;,            &quot;Event Education&quot;        ],        [            &quot;og:description&quot;,            &quot;Event Education provides free courses on event planning and management to event professionals worldwide.&quot;        ]      ]   }]Microformat extraction++++++++++++++++++++++++++++++::  &gt;&gt;&gt; import pprint  &gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=2)  &gt;&gt;&gt;  &gt;&gt;&gt; from extruct.microformat import MicroformatExtractor  &gt;&gt;&gt;  &gt;&gt;&gt; html = &quot;&quot;&quot;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;  ... &lt;html xmlns=&quot;https://www.w3.org/1999/xhtml&quot; xmlns:og=&quot;https://ogp.me/ns#&quot; xmlns:fb=&quot;https://www.facebook.com/2008/fbml&quot;&gt;  ...  &lt;head&gt;  ...   &lt;title&gt;Himanshu's Open Graph Protocol&lt;/title&gt;  ...   &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=WINDOWS-1252&quot; /&gt;  ...   &lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;en-us&quot; /&gt;  ...   &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;event-education.css&quot; /&gt;  ...   &lt;meta name=&quot;verify-v1&quot; content=&quot;so4y/3aLT7/7bUUB9f6iVXN0tv8upRwaccek7JKB1gs=&quot; &gt;  ...   &lt;meta property=&quot;og:title&quot; content=&quot;Himanshu's Open Graph Protocol&quot;/&gt;  ...   &lt;article class=&quot;h-entry&quot;&gt;  ...    &lt;h1 class=&quot;p-name&quot;&gt;Microformats are amazing&lt;/h1&gt;  ...    &lt;p&gt;Published by &lt;a class=&quot;p-author h-card&quot; href=&quot;http://example.com&quot;&gt;W. Developer&lt;/a&gt;  ...       on &lt;time class=&quot;dt-published&quot; datetime=&quot;2013-06-13 12:00:00&quot;&gt;13&lt;sup&gt;th&lt;/sup&gt; June 2013&lt;/time&gt;&lt;/p&gt;  ...    &lt;p class=&quot;p-summary&quot;&gt;In which I extoll the virtues of using microformats.&lt;/p&gt;  ...    &lt;div class=&quot;e-content&quot;&gt;  ...     &lt;p&gt;Blah blah blah&lt;/p&gt;  ...    &lt;/div&gt;  ...   &lt;/article&gt;  ...  &lt;/head&gt;  ...  &lt;body&gt;&lt;/body&gt;  ... &lt;/html&gt;&quot;&quot;&quot;  &gt;&gt;&gt;  &gt;&gt;&gt; microformate = MicroformatExtractor()  &gt;&gt;&gt; data = microformate.extract(html)  &gt;&gt;&gt; pp.pprint(data)  [{&quot;type&quot;: [        &quot;h-entry&quot;    ],    &quot;properties&quot;: {        &quot;name&quot;: [            &quot;Microformats are amazing&quot;        ],        &quot;author&quot;: [            {                &quot;type&quot;: [                    &quot;h-card&quot;                ],                &quot;properties&quot;: {                    &quot;name&quot;: [                        &quot;W. Developer&quot;                    ],                    &quot;url&quot;: [                        &quot;http://example.com&quot;                    ]                },                &quot;value&quot;: &quot;W. Developer&quot;            }        ],        &quot;published&quot;: [            &quot;2013-06-13 12:00:00&quot;        ],        &quot;summary&quot;: [            &quot;In which I extoll the virtues of using microformats.&quot;        ],        &quot;content&quot;: [            {                &quot;html&quot;: &quot;\n&lt;p&gt;Blah blah blah&lt;/p&gt;\n&quot;,                &quot;value&quot;: &quot;\nBlah blah blah\n&quot;            }        ]      }   }]DublinCore extraction++++++++++++++++++++++++++++++::    &gt;&gt;&gt; import pprint    &gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=2)    &gt;&gt;&gt; from extruct.dublincore import DublinCoreExtractor    &gt;&gt;&gt; html = '''&lt;head profile=&quot;http://dublincore.org/documents/dcq-html/&quot;&gt;    ... &lt;title&gt;Expressing Dublin Core in HTML/XHTML meta and link elements&lt;/title&gt;    ... &lt;link rel=&quot;schema.DC&quot; href=&quot;http://purl.org/dc/elements/1.1/&quot; /&gt;    ... &lt;link rel=&quot;schema.DCTERMS&quot; href=&quot;http://purl.org/dc/terms/&quot; /&gt;    ...    ...    ... &lt;meta name=&quot;DC.title&quot; lang=&quot;en&quot; content=&quot;Expressing Dublin Core    ... in HTML/XHTML meta and link elements&quot; /&gt;    ... &lt;meta name=&quot;DC.creator&quot; content=&quot;Andy Powell, UKOLN, University of Bath&quot; /&gt;    ... &lt;meta name=&quot;DCTERMS.issued&quot; scheme=&quot;DCTERMS.W3CDTF&quot; content=&quot;2003-11-01&quot; /&gt;    ... &lt;meta name=&quot;DC.identifier&quot; scheme=&quot;DCTERMS.URI&quot;    ... content=&quot;http://dublincore.org/documents/dcq-html/&quot; /&gt;    ... &lt;link rel=&quot;DCTERMS.replaces&quot; hreflang=&quot;en&quot;    ... href=&quot;http://dublincore.org/documents/2000/08/15/dcq-html/&quot; /&gt;    ... &lt;meta name=&quot;DCTERMS.abstract&quot; content=&quot;This document describes how    ... qualified Dublin Core metadata can be encoded    ... in HTML/XHTML &amp;lt;meta&amp;gt; elements&quot; /&gt;    ... &lt;meta name=&quot;DC.format&quot; scheme=&quot;DCTERMS.IMT&quot; content=&quot;text/html&quot; /&gt;    ... &lt;meta name=&quot;DC.type&quot; scheme=&quot;DCTERMS.DCMIType&quot; content=&quot;Text&quot; /&gt;    ... &lt;meta name=&quot;DC.Date.modified&quot; content=&quot;2001-07-18&quot; /&gt;    ... &lt;meta name=&quot;DCTERMS.modified&quot; content=&quot;2001-07-18&quot; /&gt;'''    &gt;&gt;&gt; dublinlde = DublinCoreExtractor()    &gt;&gt;&gt; data = dublinlde.extract(html)    &gt;&gt;&gt; pp.pprint(data)    [ { 'elements': [ { 'URI': 'http://purl.org/dc/elements/1.1/title',                        'content': 'Expressing Dublin Core\n'                                   'in HTML/XHTML meta and link elements',                        'lang': 'en',                        'name': 'DC.title'},                      { 'URI': 'http://purl.org/dc/elements/1.1/creator',                        'content': 'Andy Powell, UKOLN, University of Bath',                        'name': 'DC.creator'},                      { 'URI': 'http://purl.org/dc/elements/1.1/identifier',                        'content': 'http://dublincore.org/documents/dcq-html/',                        'name': 'DC.identifier',                        'scheme': 'DCTERMS.URI'},                      { 'URI': 'http://purl.org/dc/elements/1.1/format',                        'content': 'text/html',                        'name': 'DC.format',                        'scheme': 'DCTERMS.IMT'},                      { 'URI': 'http://purl.org/dc/elements/1.1/type',                        'content': 'Text',                        'name': 'DC.type',                        'scheme': 'DCTERMS.DCMIType'}],        'namespaces': { 'DC': 'http://purl.org/dc/elements/1.1/',                        'DCTERMS': 'http://purl.org/dc/terms/'},        'terms': [ { 'URI': 'http://purl.org/dc/terms/issued',                     'content': '2003-11-01',                     'name': 'DCTERMS.issued',                     'scheme': 'DCTERMS.W3CDTF'},                   { 'URI': 'http://purl.org/dc/terms/abstract',                     'content': 'This document describes how\n'                                'qualified Dublin Core metadata can be encoded\n'                                'in HTML/XHTML &lt;meta&gt; elements',                     'name': 'DCTERMS.abstract'},                   { 'URI': 'http://purl.org/dc/terms/modified',                     'content': '2001-07-18',                     'name': 'DC.Date.modified'},                   { 'URI': 'http://purl.org/dc/terms/modified',                     'content': '2001-07-18',                     'name': 'DCTERMS.modified'},                   { 'URI': 'http://purl.org/dc/terms/replaces',                     'href': 'http://dublincore.org/documents/2000/08/15/dcq-html/',                     'hreflang': 'en',                     'rel': 'DCTERMS.replaces'}]}]Command Line Tool-----------------*extruct* provides a command line tool that allows you to fetch a page andextract the metadata from it directly from the command line.Dependencies++++++++++++The command line tool depends on ``requests``, which is not installed by defaultwhen you install **extruct**. In order to use the command line tool, you caninstall **extruct** with the `cli` extra requirements::    pip install 'extruct[cli]'Usage+++++::    extruct &quot;http://example.com&quot;Downloads &quot;http://example.com&quot; and outputs the Microdata, JSON-LD and RDFa, Open Graphand Microformat metadata to `stdout`.Supported Parameters++++++++++++++++++++By default, the command line tool will try to extract all the supportedmetadata formats from the page (currently Microdata, JSON-LD, RDFa, Open Graphand Microformat). If you want to restrict the output to just one or a subset ofthose, you can pass their individual names collected in a list through 'syntaxes' argument.For example, this command extracts only Microdata and JSON-LD metadata from&quot;http://example.com&quot;::    extruct &quot;http://example.com&quot; --syntaxes microdata json-ldNB syntaxes names passed must correspond to these: microdata, json-ld, rdfa, opengraph, microformatDevelopment version-------------------::    mkvirtualenv extruct    pip install -r requirements-dev.txtTests-----Run tests in current environment::    py.test testsUse tox_ to run tests with different Python versions::    tox.. _tox: https://testrun.org/tox/latest/.. _ogp: https://ogp.me/</longdescription>
</pkgmetadata>