<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FastAPI - CognitoFastAPI package that ease usage of AWS Cognito Auth.This package provides basic functions/tools which helps developers to useCognito JWT.## Requirements* Python &gt;=3.8* FastAPI * AWS Cognito Service## How to install### Pip Command```pip install fastapi-cognito```## How to useThis is the simple example of how to use this package:* Create app```pythonfrom fastapi import FastAPIapp = FastAPI()```  All mandatory fields are added in CognitoSettingsBaseSettings object. Settings can be added in different ways.You can provide all required settings in **.yaml** or **.json** files,or your global BaseSettings file. Note that userpools field is Dict,**FIRST** user pool in a dict will be set as default automatically ifuserpool_name is not provided in CognitoAuth object.All fields shown in example below, are also required in .json or .yaml file(with syntax matching those files.)You should also import BaseSettings from pydantic if you are going to use global BaseSettings object.* Provide settings that are mandatory for CognitoAuth to work. You can provideone or more userpools.  * `app_client_id` field for userpool besides string, can contain multiple string values provided within     list, tuple or set```pythonfrom pydantic_settings import BaseSettingsfrom pydantic.types import Anyclass Settings(BaseSettings):    check_expiration: bool = True    jwt_header_prefix: str = &quot;Bearer&quot;    jwt_header_name: str = &quot;Authorization&quot;    userpools: dict[str, dict[str, Any]] = {        &quot;eu&quot;: {            &quot;region&quot;: &quot;USERPOOL_REGION&quot;,            &quot;userpool_id&quot;: &quot;USERPOOL_ID&quot;,            &quot;app_client_id&quot;: [&quot;APP_CLIENT_ID_1&quot;, &quot;APP_CLIENT_ID_2&quot;] # Example with multiple ids        },        &quot;us&quot;: {            &quot;region&quot;: &quot;USERPOOL_REGION&quot;,            &quot;userpool_id&quot;: &quot;USERPOOL_ID&quot;,            &quot;app_client_id&quot;: &quot;APP_CLIENT_ID&quot;        },        ...    }settings = Settings()```  This example below shows how global BaseSettings object can be mapped toCognitoSettings and passed as param to CognitoAuth.If we were using .yaml or .json, we should call **.from_yaml(_filename_)** or**.from_json(_filename_)** methods on CognitoSettings object.* Instantiate CognitoAuth and pass previously created settings as settings param.  ```pythonfrom fastapi_cognito import CognitoAuth, CognitoSettings# default userpool(eu) will be used if there is no userpool_name param provided.cognito_eu = CognitoAuth(  settings=CognitoSettings.from_global_settings(settings))cognito_us = CognitoAuth(  settings=CognitoSettings.from_global_settings(settings), userpool_name=&quot;us&quot;)```* This is a simple endpoint that is protected by Cognito, it uses FastAPI dependency injection to resolve all required operations and get Cognito JWT.It can be used later to add more security to endpoints and to get requireddata about user which token belongs to.  ```pythonfrom fastapi_cognito import CognitoTokenfrom fastapi import Depends@app.get(&quot;/&quot;)def hello_world(auth: CognitoToken = Depends(cognito_eu.auth_required)):    return {&quot;message&quot;: &quot;Hello world&quot;}```### Optional authenticationIf authentication should be optional, we can use ```cognito_eu.auth_optional```Example:```pythonfrom fastapi_cognito import CognitoTokenfrom fastapi import Depends@app.get(&quot;/&quot;)def hello_world(auth: CognitoToken = Depends(cognito_eu.auth_optional)):    return {&quot;message&quot;: &quot;Hello world&quot;}```### Custom Token ModelIn case your token payload contains additional values, you can provide customtoken model instead of `CognitoToken`. If there is no custom token modelprovided, `CognitoToken` will be set as a default model. Custom model shouldbe provided to `CognitoAuth` object.Example:```pythonclass CustomTokenModel(CognitoToken):    custom_value: Optional[str] = Nonecognito = CognitoAuth(    settings=CognitoSettings.from_global_settings(settings),    # Here we provide custom token model    custom_model=CustomTokenModel)@app.get(&quot;/&quot;)def hello_world(auth: CustomTokenModel = Depends(cognito.auth_required)):    return {&quot;message&quot;: f&quot;Hello {auth.custom_value}&quot;}```</longdescription>
</pkgmetadata>