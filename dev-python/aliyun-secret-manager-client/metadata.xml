<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Aliyun Secrets Manager Client for Python========================================The Aliyun Secrets Manager Client for Python enables Python developersto easily work with Aliyun KMS Secrets.Read this in other languages: 简体中文&lt;https://github.com/aliyun/aliyun-secretsmanager-client-python/blob/master/README.zh-cn.rst&gt;-  `Aliyun Secrets Manager Client   Homepage &lt;https://help.aliyun.com/document_detail/190269.html?spm=a2c4g.11186623.6.621.201623668WpoMj&gt;`__-  `Issues &lt;https://github.com/aliyun/aliyun-secretsmanager-client-python/issues&gt;`__-  `Release &lt;https://github.com/aliyun/aliyun-secretsmanager-client-python/releases&gt;`__License-------`Apache License2.0 &lt;https://www.apache.org/licenses/LICENSE-2.0.html&gt;`__Features---------  Provide quick integration capability to gain secret information-  Provide Alibaba secrets cache ( memory cache or encryption file cache   )-  Provide tolerated disaster by the secrets with the same secret name   and secret data in different regions-  Provide default backoff strategy and user-defined backoff strategyRequirements------------Python 2.7，3.5，3.6，3.7Install-------Install the official release version through PIP (taking Linux as anexample):.. code:: bash   $ pip install aliyun-secret-manager-clientYou can also install the unzipped installer package directly:.. code:: bash   $ sudo python setup.py installSample Code-----------Ordinary User Sample Code~~~~~~~~~~~~~~~~~~~~~~~~~-  Build Secrets Manager Client by system environment variables (`system   environment variables setting for details &lt;README_environment.md&gt;`__).. code:: python   from alibaba_cloud_secretsmanager_client.secret_manager_cache_client_builder import SecretManagerCacheClientBuilder   if __name__ == '__main__':       secret_cache_client = SecretManagerCacheClientBuilder.new_client()       secret_info = secret_cache_client.get_secret_info(&quot;#secretName#&quot;)       print(secret_info.__dict__)-  Build Secrets Manager Client by the given parameters(accessKey,   accessSecret, regionId, etc).. code:: python   from alibaba_cloud_secretsmanager_client.secret_manager_cache_client_builder import SecretManagerCacheClientBuilder   from alibaba_cloud_secretsmanager_client.service.default_secret_manager_client_builder import DefaultSecretManagerClientBuilder   if __name__ == '__main__':       secret_cache_client = SecretManagerCacheClientBuilder.new_cache_client_builder(DefaultSecretManagerClientBuilder.standard() \           .with_access_key(&quot;#accessKeyId#&quot;, &quot;#accessKeySecret#&quot;) \           .with_region(&quot;#regionId#&quot;).build()) \       .build();       secret_info = secret_cache_client.get_secret_info(&quot;#secretName#&quot;)       print(secret_info.__dict__)Particular User Sample Code~~~~~~~~~~~~~~~~~~~~~~~~~~~-  Use custom parameters or customized implementation.. code:: python   from alibaba_cloud_secretsmanager_client.secret_manager_cache_client_builder import SecretManagerCacheClientBuilder   from alibaba_cloud_secretsmanager_client.cache.file_cache_secret_store_strategy import FileCacheSecretStoreStrategy   from alibaba_cloud_secretsmanager_client.service.default_secret_manager_client_builder import DefaultSecretManagerClientBuilder   from alibaba_cloud_secretsmanager_client.service.default_refresh_secret_strategy import DefaultRefreshSecretStrategy   from alibaba_cloud_secretsmanager_client.service.full_jitter_back_off_strategy import FullJitterBackoffStrategy   if __name__ == '__main__':       secret_cache_client = SecretManagerCacheClientBuilder \       .new_cache_client_builder(DefaultSecretManagerClientBuilder.standard().with_access_key(&quot;#accessKeyId#&quot;, &quot;#accessKeySecret#&quot;) \            .with_back_off_strategy(FullJitterBackoffStrategy(3, 2000, 10000)) \            .with_region(&quot;#regionId#&quot;).build()) \        .with_cache_secret_strategy(FileCacheSecretStoreStrategy(&quot;#cacheSecretPath#&quot;, True,&quot;#salt#&quot;)) \        .with_refresh_secret_strategy(DefaultRefreshSecretStrategy(&quot;#ttlName#&quot;)) \        .with_cache_stage(&quot;#stage#&quot;) \        .with_secret_ttl(&quot;#secretName#&quot;, 1 * 60 * 1000l) \        .build()       secret_info = secret_cache_client.get_secret_info(&quot;#secretName#&quot;)       print(secret_info.__dict__)</longdescription>
</pkgmetadata>