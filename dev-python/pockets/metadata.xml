<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Pockets full of useful Python tools!====================================*Let me check my pockets...*----------------------------The Pockets library pulls together many of the Python helper functions I'vefound useful over the years.If you've worked on a project that exports an API and accesses a data store,you've probably seen some code that looks like this::    # Receive a data type with underscores from some API    data_type = 'user_preference'    # Convert underscored data type to CamelCase to match the data model    model_name = camel(data_type)    # Resolve the model name into a model class    model_class = resolve(model_name, modules=[&quot;webapp.model.admin&quot;,                                               &quot;webapp.model.user&quot;,                                               &quot;webapp.model.businesslogic&quot;]    # Instantiate the model class and do stuff with the instance...    instance = model_class()There's an impedance mismatch any time you work with two different frameworks;especially when you want to update your back-end while maintaining legacycompatibility with an external API.Pockets is full of highly tested, well maintained functions that help bridgethe gap. Here are just a few examples..... rubric :: Easily get the right logger no matter where you are::    &gt;&gt;&gt; from pockets.autolog import log    &gt;&gt;&gt; log.error(&quot;Always log from the correct module.Class!&quot;)    mymodule.MyClass: Always log from the correct module.Class!.. rubric :: Convert underscore_separated string to CamelCase::    &gt;&gt;&gt; from pockets import camel    &gt;&gt;&gt; camel(&quot;xml_http_request&quot;, upper_segments=[1])    'XmlHTTPRequest'.. rubric :: Convert CamelCase string to underscore_separated::    &gt;&gt;&gt; from pockets import uncamel    &gt;&gt;&gt; uncamel(&quot;XmlHTTPRequest&quot;)    'xml_http_request'.. rubric :: Resolve a string into an object::    &gt;&gt;&gt; from pockets import resolve    &gt;&gt;&gt; resolve(&quot;calendar.TextCalendar&quot;)    &lt;class 'calendar.TextCalendar'&gt;.. rubric :: Peek ahead iterator::    &gt;&gt;&gt; from pockets import iterpeek    &gt;&gt;&gt; p = iterpeek([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;])    &gt;&gt;&gt; p.peek()    'a'    &gt;&gt;&gt; p.next()    'a'    &gt;&gt;&gt; p.peek(3)    ['b', 'c', 'd']Downloads and Docs------------------Full documentation is available on `Read the Docs&lt;http://pockets.readthedocs.org&gt;`_.Built packages are available on `PyPI &lt;https://pypi.python.org/pypi/pockets&gt;`_.`Source code &lt;https://github.com/RobRuana/pockets&gt;`_ is available on `GitHub&lt;https://github.com/RobRuana/pockets&gt;`_. Feel free to:- `Create an issue &lt;https://github.com/RobRuana/pockets/issues&gt;`_ to request a  feature or a report a bug.- `Fork the repository &lt;https://github.com/RobRuana/pockets/fork&gt;`_ and make  changes to the **master** branch for next release.- Send a pull request and pester the maintainer until it's merged. Make sure  to add yourself to `AUTHORS  &lt;https://github.com/RobRuana/pockets/blob/master/AUTHORS&gt;`_ and update  `CHANGES &lt;https://github.com/RobRuana/pockets/blob/master/CHANGES&gt;`_.Build Status------------.. image:: https://travis-ci.org/RobRuana/pockets.svg    :target: https://travis-ci.org/RobRuana/pockets    :alt: Build Status.. image:: https://coveralls.io/repos/RobRuana/pockets/badge.svg    :target: https://coveralls.io/r/RobRuana/pockets    :alt: Coverage Status.. image:: https://readthedocs.org/projects/pockets/badge/?version=latest    :target: https://readthedocs.org/projects/pockets/?badge=latest    :alt: Documentation Status</longdescription>
</pkgmetadata>