<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pure_PRNG![PyPI](https://img.shields.io/pypi/v/pure_prng?color=red)![PyPI - Status](https://img.shields.io/pypi/status/pure_prng)![GitHub Release Date](https://img.shields.io/github/release-date/fsssosei/pure_prng)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/fsssosei/Pure_PRNG.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/fsssosei/Pure_PRNG/context:python)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/bf34f8d12be84b4492a5a3709df0aae5)](https://www.codacy.com/manual/fsssosei/pure_prng?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=fsssosei/pure_prng&amp;amp;utm_campaign=Badge_Grade)![PyPI - Downloads](https://img.shields.io/pypi/dw/pure_prng?label=PyPI%20-%20Downloads)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pure_prng)![PyPI - License](https://img.shields.io/pypi/l/pure_prng)*Generate professional pseudo-random number package in python.*Only the pseudo-random number algorithm with good statistical properties is implemented.There are &quot;methods&quot; that specify the period of a multi-precision pseudo-random sequence.## Realized pseudo-random number generation algorithm|PRNG algorithms                      |Period||-------------------------------------|------||Quadratic Congruential Generator(QCG)|2^256||Cubic Congruential Generator(CCG)|2^256||Inversive Congruential Generator(ICG)|102\*2^256||PCG64_XSL_RR|2^128||PCG64_DXSM|2^128||LCG64_32_ext|2^128||LCG128Mix_XSL_RR|2^128||LCG128Mix_DXSM|2^128||LCG128Mix_MURMUR3|2^128||PhiloxCounter|4\*2^(4\*64)||ThreeFryCounter|4\*2^(4\*64)||AESCounter|2^128||ChaChaCounter|2^128||SPECKCounter|2^129||XSM64|2^128||EFIIX64|2^64||SplitMix64|2^64||Ran64|2^64|***Please inform me if any PRNG fails to pass the new statistical test.***## InstallationInstallation can be done through pip. You must have python version &gt;= 3.8pip install pure-prng## UsageThe statement to import the package:from pure_prng_package import pure_prngExample:&gt;&gt;&gt; seed = 170141183460469231731687303715884105727&gt;&gt;&gt; period = 115792089237316195423570985008687907853269984665640564039457584007913129639747&gt;&gt;&gt; prng_instance = pure_prng(seed)&gt;&gt;&gt; source_random_number = prng_instance.source_random_number()&gt;&gt;&gt; next(source_random_number)65852230656997158461166665751696465914198450243194923777324019418213544382100&gt;&gt;&gt; prng_instance = pure_prng(seed, new_prng_period = 2 ** 512)&gt;&gt;&gt; source_random_number = prng_instance.source_random_number()&gt;&gt;&gt; next(source_random_number)8375486648769878807557228126183349922765245383564825377649864304632902242469125910865615742661048315918259479944116325466004411700005484642554244082978452&gt;&gt;&gt; prng_instance = pure_prng(seed)&gt;&gt;&gt; rand_bits = prng_instance.rand_bits(512)&gt;&gt;&gt; next(rand_bits)mpz(6144768950704661248519702670268583753928668607451020183407159490385670202458730311510261255705698403097105657582435836672179668357656056427608305574891156)&gt;&gt;&gt; rand_bits = prng_instance.rand_bits(512, period)&gt;&gt;&gt; next(rand_bits)mpz(2954964798889411590155032615694646383408546750268072607273800792672971321854983100133610686738061114434885994588970398525439724215184541467422573311905001)&gt;&gt;&gt; prng_instance = pure_prng(seed)&gt;&gt;&gt; rand_float = prng_instance.rand_float(100)&gt;&gt;&gt; next(rand_float)mpfr('0.56576176351048513846261940831522',100)&gt;&gt;&gt; prng_instance = pure_prng(seed)&gt;&gt;&gt; rand_int = prng_instance.rand_int(100, 1)&gt;&gt;&gt; next(rand_int)mpz(21)&gt;&gt;&gt; prng_instance = pure_prng(seed)&gt;&gt;&gt; get_randint_set = prng_instance.get_randint_set(100, 1, 6)&gt;&gt;&gt; next(get_randint_set){mpz(34), mpz(99), mpz(37), mpz(45), mpz(19), mpz(21)}&gt;&gt;&gt; prng_instance = pure_prng(seed)&gt;&gt;&gt; rand_with_period = prng_instance.rand_with_period(period)&gt;&gt;&gt; next(rand_with_period)mpz(65852230656997158461166665751696465914198450243194923777324019418213544381986)&gt;&gt;&gt; rand_with_period = prng_instance.rand_with_period(period, 'raw_binary_number')&gt;&gt;&gt; next(rand_with_period)mpz(53067260390396280968027884646874354062063398901623645439544105836818444733296)## Future workThe following algorithm is intended to be implemented:NLFSRCellular automate period pseudo randomGPU Philox</longdescription>
</pkgmetadata>