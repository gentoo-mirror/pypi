<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/ccnmtl/django-s3sign.svg?branch=master)](https://travis-ci.org/ccnmtl/django-s3sign)[![Coverage Status](https://coveralls.io/repos/github/ccnmtl/django-s3sign/badge.svg?branch=master)](https://coveralls.io/github/ccnmtl/django-s3sign?branch=master)# django-s3signs3 sign view for django## installation    $ pip install django-s3sign## usageAdd `s3sign` to `INSTALLED_APPS`. Subclass `s3sign.views.SignS3View`and override as needed.Attributes you can override (and their default values):```    name_field = 's3_object_name'    type_field = 's3_object_type'    expiration_time = 10    mime_type_extensions = [        ('bmp', '.bmp'),        ('gif', '.gif'),        ('jpeg', '.jpg'),        ('pdf', '.pdf'),        ('png', '.png'),        ('svg', '.svg'),        ('webp', '.webp'),    ]    default_extension = '.obj'    root = ''    path_string = (        &quot;{root}{now.year:04d}/{now.month:02d}/&quot;        &quot;{now.day:02d}/{basename}{extension}&quot;)    acl = &quot;public-read&quot;```Methods you can override:* `get_aws_access_key(self)`* `get_aws_secret_key(self)`* `get_bucket(self)`* `get_mimetype(self, request)`* `extension_from_mimetype(self, mime_type)`* `now(self)` # useful for unit tests* `now_time(self)` # useful for unit tests* `basename(self)`* `get_object_name(self, extension)`Most of those should be clear. Read the source if in doubt.Eg to use a different root path:```from s3sign.views import SignS3View...class MySignS3View(LoggedInView, SignS3View):    root = 'uploads/'```With a different S3 bucket:```class MySignS3View(LoggedInView, SignS3View):    def get_bucket(self):        return settings.DIFFERENT_BUCKET_NAME```Keeping the uploaded filename instead of doing a random one andwhitelisted extension:```class MySignS3View(LoggedInView, SignS3View):    def basename(self, request):        filename = request.GET[self.get_name_field()]        return os.path.basename(filename)    def extension(self, request):        filename = request.GET[self.get_name_field()]        return os.path.splitext(filename)[1]```### javascript/formsThe required javascript is also included, so you can include it inyour page with:    {% load static %}    &lt;script src=&quot;{% static 's3sign/js/s3upload.js' %}&quot;&gt;&lt;/script&gt;Your form would then somewhere have a bit like:    &lt;form method=&quot;post&quot;&gt;        &lt;p id=&quot;status&quot;&gt;            &lt;strong&gt;Please select a file&lt;/strong&gt;        &lt;/p&gt;        &lt;input type=&quot;hidden&quot; name=&quot;s3_url&quot; id=&quot;uploaded-url&quot; /&gt;        &lt;input type=&quot;file&quot; id=&quot;file&quot; onchange=&quot;s3_upload();&quot;/&gt;    &lt;/form&gt;And```&lt;script&gt;function s3_upload() {    var s3upload = new S3Upload({        file_dom_el: null, // Optional, and overrides file_dom_selector                           // when present.        file_dom_selector: '#file',        s3_sign_put_url: '/sign_s3/', // change this if you route differently        s3_object_name: $('#file')[0].value,        onProgress: function(percent, message) {            $('#status').text('Upload progress: ' + percent + '% ' + message);        },        onFinishS3Put: function(url) {            $('#uploaded-url').val(url);        },        onError: function(status) {            $('#status').text('Upload error: ' + status);        }    });}&lt;/script&gt;```</longdescription>
</pkgmetadata>