<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;strong&gt;Block development toolkit for UP42.&lt;/strong&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.org/project/up42-blockutils/&quot; title=&quot;up42-blockutils on pypi&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/up42-blockutils&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://twitter.com/UP42_&quot; title=&quot;UP42 on Twitter&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/UP42_.svg?style=social&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;b&gt;      &lt;a href=&quot;https://blockutils.up42.com/&quot;&gt; Documentation&lt;/a&gt; &amp;nbsp; • &amp;nbsp;      &lt;a href=&quot;http://www.up42.com&quot;&gt;UP42.com&lt;/a&gt; &amp;nbsp; • &amp;nbsp;      &lt;a href=&quot;#support&quot;&gt;Support&lt;/a&gt;    &lt;/b&gt;&lt;/p&gt;## Highlights- Python package with utilities to build blocks in UP42.- For UP42 partners and customers interested in creating blocks!- Base classes for data and processing blocks.- Facilities to easily create tests, ensuring production ready blocks.## OverviewThe UP42 `blockutils` package provides several modules with specific concerns:- **Blocks**: Base classes for data and processing blocks.- **Common**: Directory and query/parameter input handling.- **Logging**: Standard logging facility.- **Data Path**: Input and output file handling.- **E2E**: Utility class to create end-to-end tests.- **Exceptions**: Shared exceptions between blocks.- **Format**: Exotic file handling (DIMAP and NETCDF).- **Raster**: Raster handling methods.- **Geometry**: Generic recurrent geometry operations.- **Windows**: Raster windowed read and write helper, useful for large file handling.- **STAC**: Handling STAC type queries.- **WMTS**: Helper for downloading, processing and merging tiles.See the full code reference [here](https://blockutils.up42.com/blocks/).## Docker imageIn order to make development of blocks easier, we have made available a public `blockutils`base image that you can use in your `Dockerfile`. Check out the[DockerHub page](https://hub.docker.com/r/up42/up42-blockutils-py37)for the `up42/up42-blockutils-py37` image.## Template repositoriesFor your convenience, we have created two template repositories hosted on GitHub that include this package and generic `make` utilities for building and pushing blocks:- [Data block template](https://github.com/up42/data-block-template)- [Processing block template](https://github.com/up42/processing-block-template)## InstallThe package requires Python &gt; 3.6.```bashpip install up42-blockutils```## QuickstartThe example below shows a minimal processing block that takes a raster file and returnsthe raster values to the power of 2. In this example we make use of the `logging`,`blocks`, `exceptions`, `datapath` and `windows` modules.```python3from pathlib import Pathimport rasterio as riofrom geojson import FeatureCollection, Featureimport blockutilslogger = blockutils.logging.get_logger(__name__)class AProcessingBlock(blockutils.blocks.ProcessingBlock):    def process(self, input_fc: FeatureCollection) -&gt; FeatureCollection:        output_fc = FeatureCollection([])        if not input_fc.features:            raise blockutils.exceptions.UP42Error(                blockutils.exceptions.SupportedErrors.NO_INPUT_ERROR            )        for feat in input_fc[&quot;features&quot;]:            logger.info(f&quot;Processing {feat}...&quot;)            input_path = Path(&quot;/tmp/input/&quot;) / Path(blockutils.datapath.get_data_path(feat))            with rio.open(input_path) as src:                src_win = blockutils.windows.WindowsUtil(src)                (                    output_name,                    output_path,                ) = blockutils.datapath.get_output_filename_and_path(                    input_path.name, postfix=&quot;processed&quot;                )                dst_meta = src.meta.copy()                with rio.open(output_path, &quot;w&quot;, **dst_meta) as dst:                    for win in src_win.windows_regular():                        exp = src.read(window=win) ** 2                        dst.write(exp, window=win)                out_feat = Feature(bbox=feat.bbox, geometry=feat.geometry)                out_feat[&quot;properties&quot;] = self.get_metadata(feat)                out_feat = blockutils.datapath.set_data_path(out_feat, output_name)                logger.info(f&quot;Processed {out_feat}...&quot;)                output_fc.features.append(out_feat)            return output_fcAProcessingBlock().run()```## SupportFor any issues or help please contact us via Email **[support@up42.com](mailto:support@up42.com)**.</longdescription>
</pkgmetadata>