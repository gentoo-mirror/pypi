<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Swift[![PyPI version](https://badge.fury.io/py/swift-sim.svg)](https://badge.fury.io/py/swift-sim)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/swift-sim)](https://img.shields.io/pypi/pyversions/swift-sim)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)[![QUT Centre for Robotics Open Source](https://github.com/qcr/qcr.github.io/raw/master/misc/badge.svg)](https://qcr.github.io)Swift is a light-weight browser-based simulator built on top of the [Robotics Toolbox for Python](https://github.com/petercorke/robotics-toolbox-python). This simulator provides robotics-specific functionality for rapid prototyping of algorithms, research, and education. Built using Python and Javascript, Swift is cross-platform (Linux, MacOS, and Windows) while also leveraging the ubiquity and support of these languages.Through the [Robotics Toolbox for Python](https://github.com/petercorke/robotics-toolbox-python), Swift can visualise over 30 supplied robot models: well-known contemporary robots from Franka-Emika, Kinova, Universal Robotics, Rethink as well as classical robots such as the Puma 560 and the Stanford arm. Swift is under development and will support mobile robots in the future.Swift provides:  * visualisation of mesh objects (Collada and STL files) and primitive shapes;  * robot visualisation and simulation;  * recording and saving a video of the simulation;  * source code which can be read for learning and teaching;## Installing### Using pipSwift is designed to be controlled through the [Robotics Toolbox for Python](https://github.com/petercorke/robotics-toolbox-python). By installing the toolbox through PyPI, swift is installed as a dependency```shell scriptpip3 install roboticstoolbox-python```Otherwise, Swift can be install by```shell scriptpip3 install swift-sim```### From GitHubTo install the latest version from GitHub```shell scriptgit clone https://github.com/jhavl/swift.gitcd swiftpip3 install -e .```## Code Examples### Robot PlotWe will load a model of the Franka-Emika Panda robot and plot it. We set the joint angles of the robot into the ready joint configuration qr.```pythonimport roboticstoolbox as rppanda = rp.models.Panda()panda.plot(q=panda.qr)```&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://github.com/jhavl/swift/blob/master/.github/figures/panda.png&quot;&gt;&lt;/p&gt;### Resolved-Rate Motion ControlWe will load a model of the Franka-Emika Panda robot and make it travel towards a goal pose defined by the variable Tep.```pythonimport roboticstoolbox as rtbimport spatialmath as smimport numpy as np# Make and instance of the Swift simulator and open itenv = rtb.backends.Swift()env.launch()# Make a panda model and set its joint angles to the ready joint configurationpanda = rtb.models.Panda()panda.q = panda.qr# Set a desired and effector pose an an offset from the current end-effector poseTep = panda.fkine(panda.q) * sm.SE3.Tx(0.2) * sm.SE3.Ty(0.2) * sm.SE3.Tz(0.45)# Add the robot to the simulatorenv.add(panda)# Simulate the robot while it has not arrived at the goalarrived = Falsewhile not arrived:    # Work out the required end-effector velocity to go towards the goal    v, arrived = rtb.p_servo(panda.fkine(panda.q), Tep, 1)        # Set the Panda's joint velocities    panda.qd = np.linalg.pinv(panda.jacobe(panda.q)) @ v        # Step the simulator by 50 milliseconds    env.step(0.05)```&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;./.github/figures/panda.gif&quot;&gt;&lt;/p&gt;</longdescription>
</pkgmetadata>