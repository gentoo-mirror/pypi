<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>#  üé© AlfredClientSimplest Alfred Client that I use my own projects.## Usage```bashpip install alfred5```- Projects dir structure    - Put your codes and `requirements.txt` to `src` folders    - Install `alfred5` via         ```bash        pip install alfred5 --target=src/libs        ```    - Add the top of the `main.py`        ```python            import sys            sys.path.insert(0, &quot;src/libs&quot;)        ```        - ![main](https://i.imgur.com/O6rYLQA.png)    - If u want to use different `--target` for ex `.` use `WorkflowClient.run(packagedir=&quot;.&quot;)`    - Sample of default structure:         - ![structure](https://i.imgur.com/doLWDR4.png)    - **If u install all of requirements, dont need to create `requirements.txt` file in `src`**    - _If you use `vscode`, add the code that below to `.vscode/settings.json` to debug your file_        - ![vscode](https://i.imgur.com/QeseMTr.png)        ```json        {            &quot;python.analysis.extraPaths&quot;: [                &quot;./src/libs&quot;            ],            &quot;python.analysis.exclude&quot;: [                &quot;./src/libs&quot;            ]        }        ```- Via `SnippetsClient` API create custom snippets programmaically- Via `WorkflowClient` API create custom alfred workflow    - Craete `requirements.txt` file for your python project to let `alfred5` installs them if needed üôÉ    - To install `from requirements.txt` do all import packages inside `main`            - Use `global` keyword to access imported packages globally        - `client.query` is the query string        - `client.page_count` is the page count for pagination results    - Dont need to add `alfred5` to `requirements.txt`- Use `WorkflowClient.log` to log your message to alfred debugger     - [debugging alfred workflow](https://www.alfredapp.com/help/workflows/utilities/debug/)    - [why this project use stderr for all logging operation](https://www.alfredforum.com/topic/14721-get-the-python-output-back-to-alfred/?do=findComment&amp;comment=75303)- Use `WorkflowClient(main, cache=True)` method to use caching system    - Just do it for static (not timebased nor any dynamic stuff) response     - Db path is `db/results.yml` also you can see it from workflow debug panel## ‚≠êÔ∏è Example Project![alt](https://i.imgur.com/tUJjVUJ.png)```pythonfrom re import subfrom urllib.parse import quote_plusimport syssys.path.insert(0, &quot;src/libs&quot;)from alfred5 import WorkflowClientasync def main(client: WorkflowClient):    # To auto install requirements all import operation must be in here    global get    from requests import get    query = client.query    client.log(f&quot;my query: {query}&quot;)  # use it to see your log in workflow debug panel    # (use cache=True) Use cache system to quick response instead of old style that below    # if client.load_cached_response():    #     return    char_count = str(len( query))    word_count = str(len(query.split(&quot; &quot;)))    line_count = str(len(query.split(&quot;\n&quot;)))    encoded_string = quote_plus(query)    remove_dublication = &quot; &quot;.join(dict.fromkeys(query.split(&quot; &quot;)))    upper_case = query.upper()    lower_case = query.lower()    capitalized = query.capitalize()    template = sub(r&quot;[a-zA-Z0-9]&quot;, &quot;X&quot;, query)    client.add_result(encoded_string, &quot;Encoded&quot;, arg=encoded_string)    client.add_result(remove_dublication, &quot;Remove dublication&quot;, arg=remove_dublication)    client.add_result(upper_case, &quot;Upper Case&quot;, arg=upper_case)    client.add_result(lower_case, &quot;Lower Case&quot;, arg=lower_case)    client.add_result(capitalized, &quot;Capitalized&quot;, arg=capitalized)    client.add_result(template, &quot;Template&quot;, arg=template)    client.add_result(char_count, &quot;Characters&quot;, arg=char_count)    client.add_result(word_count, &quot;Words&quot;, arg=word_count)    client.add_result(line_count, &quot;Lines&quot;, arg=line_count)        #¬†(use cache=True) to cache result for query instead of old style that below    #     if u work with static results (not dynamic; coin price etc.)    # client.cache_response()  if __name__ == &quot;__main__&quot;:    WorkflowClient.run(main)  # WorkflowClient.run(main, cache=True)```## üî∞ How to Create Workflow![insturaction1](https://i.imgur.com/2oDMChr.png)![insturaction2](https://i.imgur.com/IMVWNDm.png)![insturaction3](https://i.imgur.com/WicJKBN.png)![insturaction4](https://i.imgur.com/AwPNT8Y.png)## ü™™ License```Copyright 2023 Yunus Emre Ak ~¬†YEmreAk.comLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.```</longdescription>
</pkgmetadata>