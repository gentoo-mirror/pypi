<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `etuples`[![Tests](https://github.com/pythological/etuples/actions/workflows/tests.yml/badge.svg)](https://github.com/pythological/etuples/actions/workflows/tests.yml) [![Coverage Status](https://coveralls.io/repos/github/pythological/etuples/badge.svg?branch=main)](https://coveralls.io/github/pythological/etuples?branch=main) [![PyPI](https://img.shields.io/pypi/v/etuples)](https://pypi.org/project/etuples/)Python [S-expression](https://en.wikipedia.org/wiki/S-expression) emulation using tuple-like objects.## Examples`etuple`s are like tuples:```python&gt;&gt;&gt; from operator import add&gt;&gt;&gt; from etuples import etuple, etuplize&gt;&gt;&gt; et = etuple(add, 1, 2)&gt;&gt;&gt; etExpressionTuple((&lt;built-in function add&gt;, 1, 2))&gt;&gt;&gt; from IPython.lib.pretty import pprint&gt;&gt;&gt; pprint(et)e(&lt;function _operator.add(a, b, /)&gt;, 1, 2)&gt;&gt;&gt; et[0:2]ExpressionTuple((&lt;built-in function add&gt;, 1))````etuple`s can also be evaluated:```python&gt;&gt;&gt; et.evaled_obj3```Evaluated `etuple`s are cached:```python&gt;&gt;&gt; et = etuple(add, &quot;a&quot;, &quot;b&quot;)&gt;&gt;&gt; et.evaled_obj'ab'&gt;&gt;&gt; et.evaled_obj is et.evaled_objTrue```Reconstructed `etuple`s and their evaluation results are preserved across tuple operations:```python&gt;&gt;&gt; et_new = (et[0],) + et[1:]&gt;&gt;&gt; et_new is etTrue&gt;&gt;&gt; et_new.evaled_obj is et.evaled_objTrue````rator`, `rands`, and `apply` will return the operator, the operands, and apply the operation to the operands:```python&gt;&gt;&gt; from etuples import rator, rands, apply&gt;&gt;&gt; et = etuple(add, 1, 2)&gt;&gt;&gt; rator(et)&lt;built-in function add&gt;&gt;&gt;&gt; rands(et)ExpressionTuple((1, 2))&gt;&gt;&gt; apply(rator(et), rands(et))3````rator` and `rands` are [`multipledispatch`](https://github.com/mrocklin/multipledispatch) functions that can be extended to handle arbitrary objects:```pythonfrom etuples.core import ExpressionTuplefrom collections.abc import Sequenceclass Node:    def __init__(self, rator, rands):        self.rator, self.rands = rator, rands    def __eq__(self, other):        return self.rator == other.rator and self.rands == other.randsclass Operator:    def __init__(self, op_name):        self.op_name = op_name    def __call__(self, *args):        return Node(Operator(self.op_name), args)    def __repr__(self):        return self.op_name    def __eq__(self, other):        return self.op_name == other.op_namerands.add((Node,), lambda x: x.rands)rator.add((Node,), lambda x: x.rator)@apply.register(Operator, (Sequence, ExpressionTuple))def apply_Operator(rator, rands):    return Node(rator, rands)``````python&gt;&gt;&gt; mul_op, add_op = Operator(&quot;*&quot;), Operator(&quot;+&quot;)&gt;&gt;&gt; mul_node = Node(mul_op, [1, 2])&gt;&gt;&gt; add_node = Node(add_op, [mul_node, 3])````etuplize` will convert non-tuple objects into their corresponding `etuple` form:```python&gt;&gt;&gt; et = etuplize(add_node)&gt;&gt;&gt; pprint(et)e(+, e(*, 1, 2), 3)&gt;&gt;&gt; et.evaled_obj is add_nodeTrue````etuplize` can also do shallow object-to-`etuple` conversions:```python&gt;&gt;&gt; et = etuplize(add_node, shallow=True)&gt;&gt;&gt; pprint(et)e(+, &lt;__main__.Node at 0x7f347361a080&gt;, 3)```## InstallationUsing `pip`:```bashpip install etuples```### DevelopmentFirst obtain the project source:```bashgit clone git@github.com:pythological/etuples.git```Create a virtual environment and install the development dependencies:```bash$ pip install -r requirements.txt```Set up `pre-commit` hooks:```bash$ pre-commit install --install-hooks```Tests can be run with the provided `Makefile`:```bashmake check```</longdescription>
</pkgmetadata>