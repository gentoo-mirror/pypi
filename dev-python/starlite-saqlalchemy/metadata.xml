<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;starlite-saqlalchemy&lt;/h1&gt;&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://www.topsport.com.au/assets/images/logo_pulse.svg&quot; width=&quot;200&quot; alt=&quot;TopSport Pulse&quot;/&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://pypi.org/project/starlite-saqlalchemy&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/starlite-saqlalchemy&quot; alt=&quot;PYPI: starlite-saqlalchemy&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/topsport-com-au/starlite-saqlalchemy/blob/main/LICENSE&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/l/starlite-saqlalchemy?color=blue&quot; alt=&quot;License: MIT&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://python.org&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/pyversions/starlite-saqlalchemy&quot; alt=&quot;Python: supported versions&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://results.pre-commit.ci/latest/github/topsport-com-au/starlite-saqlalchemy/main&quot;&gt;    &lt;img alt=&quot;pre-commit.ci status&quot; src=&quot;https://results.pre-commit.ci/badge/github/topsport-com-au/starlite-saqlalchemy/main.svg&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/6646&quot;&gt;    &lt;img alt=&quot;OpenSSF Best Practices&quot; src=&quot;https://bestpractices.coreinfrastructure.org/projects/6646/badge&quot;&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/topsport-com-au/starlite-saqlalchemy/actions/workflows/ci.yml&quot;&gt;    &lt;img alt=&quot;Actions: CI&quot; src=&quot;https://github.com/topsport-com-au/starlite-saqlalchemy/actions/workflows/ci.yml/badge.svg?branch=main&amp;event=push&quot;/&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://sonarcloud.io/summary/new_code?id=topsport-com-au_starlite-saqlalchemy&quot;&gt;    &lt;img alt=&quot;Reliability Rating&quot; src=&quot;https://sonarcloud.io/api/project_badges/measure?project=topsport-com-au_starlite-saqlalchemy&amp;metric=reliability_rating&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://sonarcloud.io/summary/new_code?id=topsport-com-au_starlite-saqlalchemy&quot;&gt;    &lt;img alt=&quot;Quality Gate Status&quot; src=&quot;https://sonarcloud.io/api/project_badges/measure?project=topsport-com-au_starlite-saqlalchemy&amp;metric=alert_status&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://sonarcloud.io/summary/new_code?id=topsport-com-au_starlite-saqlalchemy&quot;&gt;    &lt;img alt=&quot;Quality Gate Status&quot; src=&quot;https://sonarcloud.io/api/project_badges/measure?project=topsport-com-au_starlite-saqlalchemy&amp;metric=coverage&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://sonarcloud.io/summary/new_code?id=topsport-com-au_starlite-saqlalchemy&quot;&gt;    &lt;img alt=&quot;Quality Gate Status&quot; src=&quot;https://sonarcloud.io/api/project_badges/measure?project=topsport-com-au_starlite-saqlalchemy&amp;metric=sqale_rating&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://sonarcloud.io/summary/new_code?id=topsport-com-au_starlite-saqlalchemy&quot;&gt;    &lt;img alt=&quot;Quality Gate Status&quot; src=&quot;https://sonarcloud.io/api/project_badges/measure?project=topsport-com-au_starlite-saqlalchemy&amp;metric=security_rating&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://sonarcloud.io/summary/new_code?id=topsport-com-au_starlite-saqlalchemy&quot;&gt;    &lt;img alt=&quot;Quality Gate Status&quot; src=&quot;https://sonarcloud.io/api/project_badges/measure?project=topsport-com-au_starlite-saqlalchemy&amp;metric=bugs&quot;/&gt;  &lt;/a&gt;  &lt;a href=&quot;https://sonarcloud.io/summary/new_code?id=topsport-com-au_starlite-saqlalchemy&quot;&gt;    &lt;img alt=&quot;Quality Gate Status&quot; src=&quot;https://sonarcloud.io/api/project_badges/measure?project=topsport-com-au_starlite-saqlalchemy&amp;metric=vulnerabilities&quot;/&gt;  &lt;/a&gt;&lt;/p&gt;Configuration for a [Starlite](https://github.com/starlite-api/starlite) application that features:- SQLAlchemy 2.0- SAQ async worker- Lots of features!## InstallationThis will install `starlite-saqlalchemy` with minimal dependencies.```consolepoetry add starlite-saqlalchemy```You can also install additional dependencies depending on the features you need:```console# Repository implementation, DTOspoetry add starlite-saqlalchemy[sqlalchemy]# Async worker using saqpoetry add starlite-saqlalchemy[worker]# Redis cache backendpoetry add starlite-saqlalchemy[cache]# Sentry integration for starlitepoetry add starlite-saqlalchemy[sentry]# or to install them all:poetry add starlite-saqlalchemy[all]```## Example```pythonfrom starlite import Starlite, getfrom starlite_saqlalchemy import ConfigureApp@get(&quot;/example&quot;)def example_handler() -&gt; dict:    &quot;&quot;&quot;Hello, world!&quot;&quot;&quot;    return {&quot;hello&quot;: &quot;world&quot;}app = Starlite(route_handlers=[example_handler], on_app_init=[ConfigureApp()])```## FeaturesThe application configured in the above example includes the following configuration.### Logging after exception handlerReceives and logs any unhandled exceptions raised out of route handling.### Redis cacheIntegrates a Redis cache backend with Starlite first-class cache support.### Collection route filtersSupport filtering collection routes by created and updated timestamps, list of ids, and limit/offsetpagination.Includes an aggregate `filters` dependency to easily inject all filters into a route handler, e.g,:```pythonfrom starlite import getfrom starlite_saqlalchemy.dependencies import FilterTypes@get()async def get_collection(filters: list[FilterTypes]) -&gt; list[...]:    ...```### Gzip compressionConfigures Starlite's built-in Gzip compression support.### Exception handlersException handlers that translate non-Starlite repository and service object exceptiontypes into Starlite's HTTP exceptions.### Health checkA health check route handler that returns some basic application info.### LoggingConfigures logging for the application including:- Queue listener handler, appropriate for asyncio applications- Health check route filter so that health check requests don't clog your logs- An informative log format- Configuration for dependency logs### Openapi configConfigures OpenAPI docs for the application, including config by environment to allow for easypersonalization per application.### Starlite Response classA response class that can handle serialization of SQLAlchemy/Postgres UUID types.### Sentry configurationJust supply the DSN via environment, and Sentry is configured for you.### SQLAlchemyEngine, logging, pooling etc all configurable via environment. We configure starlite and include acustom `before_send` wrapper that inspects the outgoing status code to determine whether thetransaction that represents the request should be committed, or rolled back.### Async SAQ worker configA customized SAQ queue and worker that is started and shutdown using the Starlite lifecycle eventhooks - no need to run your worker in another process, we attach it to the same event loop as theStarlite app uses. Be careful not to do things in workers that will block the loop!## Extra FeaturesIn addition to application config, the library include:### RepositoryAn abstract repository object type and a SQLAlchemy repository implementation.### DTO FactoryA factory for building pydantic models from SQLAlchemy 2.0 style declarative classes. Use these toannotate the `data` parameter and return type of routes to control the data that can be modified perroute, and the information included in route responses.### HTTP Client and Endpoint decorator`http.Client` is a wrapper around `httpx.AsyncClient` with some extra features including unwrappingenveloped data, and closing the underlying client during shutdown of the Starlite application.### ORM ConfigurationA SQLAlchemy declarative base class that includes:- a mapping of the builtin `UUID` type to the postgresql dialect UUID type.- an `id` column- a `created` timestamp column- an `updated` timestamp column- an automated `__tablename__` attribute- a `from_dto()` class method, to ease construction of model types from DTO objects.We also add:- a `before_flush` event listener that ensures that the `updated` timestamp is touched on instances  on their way into the database.- a constraint naming convention so that index and constraint names are automatically generated.### Service objectA Service object that integrates with the Repository ABC and provides standard logic for typicaloperations.### SettingsConfiguration by environment.## ContributingAll contributions big or small are welcome and appreciated! Please check out `CONTRIBUTING.md` forspecific information about configuring your environment and workflows used by this project.</longdescription>
</pkgmetadata>