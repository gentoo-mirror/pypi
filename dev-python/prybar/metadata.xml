<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>prybar: Create temporary ``pkg_resources`` entry points at runtime======================================================================.. image:: https://travis-ci.org/h4l/prybar.svg?branch=master    :target: https://travis-ci.org/h4l/prybar    :alt: CI Status.. image:: https://readthedocs.org/projects/prybar/badge/?version=latest    :target: https://prybar.readthedocs.io/en/latest/    :alt: Documentation Status.. image:: https://img.shields.io/pypi/status/prybar.svg    :target: https://pypi.org/project/prybar/    :alt: PyPI - StatusA Python library to temporarily define ``pkg_resources`` `entry points &lt;ep intro_&gt;`_at runtime. The primary use case is testing code which works with entry points... _ep intro: https://packaging.python.org/guides/creating-and-discovering-plugins/#using-package-metadataInstalling----------.. code:: console    $ pip install prybarprybar requires Python 3.6 or greater.Usage-----.. code:: pycon    &gt;&gt;&gt; import prybar    &gt;&gt;&gt; from pkg_resources import iter_entry_points    &gt;&gt;&gt; # Entry point doesn't exist    &gt;&gt;&gt; list(iter_entry_points('example.hash_types', 'sha256'))    []    &gt;&gt;&gt; # With prybar's context manager we can create entry points temporarily    &gt;&gt;&gt; with prybar.dynamic_entrypoint('example.hash_types',    ...                                name='sha256', module='hashlib'):    ...     hash = next(iter_entry_points('example.hash_types', 'sha256')).load()    ...     hash(b'foo').hexdigest()[:6]    '2c26b4'    &gt;&gt;&gt; # And it's gone again    &gt;&gt;&gt; list(iter_entry_points('example.hash_types', 'sha256'))    []See the `full documentation &lt;https://prybar.readthedocs.io/&gt;`_ for more.</longdescription>
</pkgmetadata>