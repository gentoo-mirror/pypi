<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># mike**mike** is a Python utility that makes it easy to deploy multiple versions ofyour [MkDocs](http://www.mkdocs.org)-powered docs to a Git branch, suitable forhosting on Github via `gh-pages`. To see an example of this in action, take alook at the documentation for [bfg9000][bfg9000].## Why Use mike?mike is built around the idea that once you've generated your docs for aparticular version, you should never need to touch that version again. Thismeans you never have to worry about breaking changes in MkDocs, since your olddocs (built with an old version of MkDocs) are already generated and sitting inyour `gh-pages` branch.While mike is flexible, it's optimized around putting your docs in a`&lt;major&gt;.&lt;minor&gt;` directory, with optional aliases (e.g. `latest` or `dev`) toparticularly notable versions. This makes it easy to make permalinks to whateverversion of the documentation you want to direct people to.## How It Worksmike works by creating a new Git commit on your `gh-pages` branch every time youdeploy a new version of your docs using `mike deploy` (or other mike subcommandsthat change your `gh-pages` branch). When deploying a particular version,previously-deployed docs for that version are erased and overwritten, but docsfor other versions remain untouched.## InstallationLike most Python projects, mike uses [setuptools][setuptools], so installationis what you might expect:```shpip install mike```Once you've installed mike, you might also want to set up shell-completion forit. If you have [shtab][shtab] installed, you can do this with`mike generate-completion`, which will print the shell-completion code for yourshell. For more details on how to set this up, consult shtab's[documentation][shtab-setup].## Usage### Before Using mikeBefore using mike for the first time, you may want to use [`mike delete--all`](#deleting-docs) to delete any old documentation on your `gh-pages`branch before building your new versioned docs. (If you prefer, you can alsomanually move your old documentation to a subdirectory of your `gh-pages` branchso that it's still accessible.)### ConfigurationTo help integrate into the MkDocs build process, mike uses an MkDocs plugin.This plugin is added by default when building your documentation with mike, butby adding it explicitly to your `mkdocs.yml` file, you can configure how theplugin works. The plugin adds a version selector to supported themes as well asupdating the `site_url` (if you set it) to point to the version of the docs thatare being built:```yamlplugins:  - mike:      # These fields are all optional; the defaults are as below...      alias_type: symlink      redirect_template: null      deploy_prefix: ''      canonical_version: null      version_selector: true      css_dir: css      javascript_dir: js```* `alias_type`: The method to create aliases; one of:  * `symlink`: Create a symbolic link from the alias to the base directory of    the documentation  * `redirect`: Create an HTML redirect for each page of the documentation  * `copy`: Copy all the files of the documentation to the alias's path* `redirect_template`: The template file to use when creating HTML redirects; if  `null`, use the default template* `deploy_prefix`: The root directory to put the generated docs in; this can be  useful if you'd like to have other pages at the root of your site, or to host  multiple, independently-versioned sets of docs side by side* `canonical_version`: The &quot;canonical&quot; version to use for the documentation,  useful for telling search engines what pages to prefer (e.g. `latest` if  you've defined that as an alias that always points to the latest release); if  `null`, mike will use the version specified via `mike deploy`* `version_selector`: True if the version selector should be shown on pages;  false otherwise* `css_dir`: The directory to place the version selector's CSS* `javascript_dir`: The directory to place the version selector's Javascript### Building Your Docsmike is designed to produce one version of your docs at a time. That way, youcan easily deploy a new version without touching any older versions of yourdocs; this can be especially important if your old docs are no longer buildablewith the newest version of MkDocs (or if they weren't built with MkDocs atall!). To deploy the current version of your docs, simply run:```shmike deploy [version]```Where `[version]` is the current version of your project, represented howeveryou like (I recommend using `[major].[minor]` and excluding the patchnumber). You can also pass aliases to the `deploy` command to host aparticularly-relevant version of your docs somewhere special (e.g. `latest`):```shmike deploy [version] [alias]...```If `[version]` already exists, this command will *also* update all of thepre-existing aliases for it. Normally, if an alias specified on the command lineis already associated with another version, this will return an error. If you*do* want to move an alias from another version to this version (includingwhen the new version itself was previously an alias), you can pass`-u`/`--update-aliases` to allow this. For example, this can be useful whenreleasing a new version and updating the `latest` alias to point to this newversion.By default, each alias creates a symbolic link to the base directory of the realversion of the docs; to create a copy of the docs for each alias, you can pass`--alias-type=copy`, or to use a simple HTML redirect for each page, you canpass `--alias-type=redirect`. If you're using redirects, you can customize theredirect template with `-T`/`--template`; this takes a path to a [Jinja][jinja]template that accepts an `{{href}}` variable.If you'd like to specify a title for this version that doesn't match the versionstring, you can pass `-t TITLE`/`--title=TITLE` as well. You can set customproperties for this version as well, using `--prop-set`, `--prop-set-string`,`--prop-set-all`, `--prop-delete`, and `--prop-delete-all` (see the [ManagingProperties](#managing-properties) section for more details).In addition, you can specify where to deploy your docs via `-b`/`--branch`,`-r`/`--remote`, and `--deploy-prefix`, specifying the branch, remote, anddirectory prefix within the branch, respectively. Finally, to push your docs toa remote branch, simply add `-p`/`--push` to your command.You can also specify many of these options via your `mkdocs.yml` configurationas shown above. For example, `--alias-type` can also be specified via`plugins.mike.alias_type`. (For `--branch` and `--remote`, you can use thebuilt-in MkDocs fields `remote_branch` and `remote_name`.)### Viewing Your DocsTo test that your docs have been built as expected, you can serve them locallyfrom a dev server:```shmike serve```By default, this serves the docs on `http://localhost:8000`, but you canchange this with `-a`/`--dev-addr`. Remember though, *this is for testing only*.To host your docs for real, you should use a real web server.### Deleting DocsSometimes you need to delete an old version of your docs, either because youmade a mistake or you're pruning unsupported versions. You can do this via the`delete` subcommand:```shmike delete [identifier]...```If `identifier` is a version, this will delete the version and all its aliasesfrom the branch; if it's an alias, it will only delete that alias.If you'd like to *completely* wipe the contents of your docs branch, just run`mike delete --all`. Like `deploy` above, you can specify `--branch`, `--push`,etc to control how the commit is handled.### Listing DocsIf you ever need to see the list of all currently-deployed doc versions, you canrun:```shmike list```To list the info for a particular version, you can just pass the version name oran alias to that version:```shmike list [identifier]```Sometimes, you need this information to be consumed by another tool. In thatcase, pass `-j`/`--json` to return the list of doc versions as JSON.### Setting the Default VersionWith all the versions of docs you have, you may want to set a *default* versionso that people going to the root of your site are redirected to the latestversion of the docs:```shmike set-default [identifier]```If you want to use a different template from the default, you can pass`-T`/`--template`; this takes a path to a [Jinja][jinja] template that acceptsan `{{href}}` variable. (Note that this page *always* uses a redirect, no matterthe setting of `alias_type`/`--alias-type`.)Like `deploy` and `delete` above, you can specify `--branch`, `--push`,etc to control how the commit is handled.### Changing a Version's TitleAs you update your docs, you may want to change the title of a particularversion. For example, your `1.0` docs might have the title `1.0.0`, and when yourelease a new patch, you want to update the title to `1.0.1`. You can do thiswith the `retitle` command:```shmike retitle [identifier] [title]```As with other commands that change your docs, you can specify `--branch`,`--push`, etc to control how the commit is handled.### Adding a New Version AliasSometimes, you might need to add a new alias for a version without rebuildingyour documentation. You can use the `alias` command for this:```shmike alias [identifier] [alias]...```As with `deploy`, you can pass `-u`/`--update-aliases` to change where anexisting alias points to.Once again, you can specify `--branch`, `--push`, etc to control how the commitis handled.### Managing PropertiesEach version of your documentation can have any arbitrary properties assigned toit that you like. You can use these properties to hold extra metadata, and thenyour documentation theme can consult those properties to do whatever you like.When using the built-in MkDocs themes, mike supports one property: `hidden`.When this is `true`, that version will be hidden from the version selector(unless it's the current version).You can get properties via `props` command:```shmike props [identifier] [prop]```If `prop` is specified, this will return the value of that property; otherwise,it will return all of that version's properties as a JSON object.You can also set properties by specifying one or more of `--set prop=json`,`--set-string prop=str`, `--set-all json`, `--delete prop`, and `--delete-all`.(If you prefer, you can also set properties at the same time as deploying viathe `--prop-*` options.)When getting or setting a particular property, you can specify it with alimited JSONPath-like syntax. You can use bare field names, quoted fieldnames, and indices/field names inside square brackets. The only operatorsupported is `.`. For example, this is a valid expression:```javascriptfoo.&quot;bar&quot;[0][&quot;baz&quot;]```When setting values, you can add to the head or tail of a list via the `head`or `tail` keywords, e.g.:```javascriptfoo[head]```As usual, you can specify `--branch`, `--push`, etc to control how the commit ishandled.### More DetailsFor more details on the available options, consult the `--help` command formike.## Version OrderingThere are lots of versioning schemes out there, but mike tries its best to orderyour versions in a reasonable manner. Version identifiers that &quot;look like&quot;versions (e.g. `1.2.3`, `1.0b1`, `v1.0`) are treated as ordinary versions,whereas other identifiers, like `devel`, are treated as development versions,and placed *above* ordinary versions.The above scheme should get things right most of the time, but you can alwayspost-process your `versions.json` file to manipulate the ordering to suit yourneeds.## Staying in Syncmike will do its best to stay in-sync with your remote repository and willautomatically update your local branch to match the remote's if possible (notethat mike *won't* automatically `git fetch` anything). If your local branch hasdiverged from your remote, mike will leave it as-is and ask you what to do. Toignore the remote's state, just pass `--ignore`; to update to the remote'sstate, pass `--rebase`.## `CNAME` (and Other Special Files)Some special files that you'd like to deploy along with your documentation (suchas `CNAME`) aren't related to a particular version of the docs, and instead needto go in the root directory of your site. There's no special handling for thisin mike, but since your built docs live on a Git branch, it's still easy tomanage: check out your `gh-pages` branch (or wherever your built docslive), and commit the necessary files to the root directory.## Deploying via CISince mike just generates commits to an ordinary Git branch, it should worksmoothly with your favorite CI system. However, you should keep in mind thatsome CI systems make shallow clones of your repository, meaning that the CI jobwon't have a local instance of your documentation branch to commit to. This willnaturally cause issues when trying to push the commit. This is easy to resolvethough; just manually fetch your `gh-pages` branch (or whichever you deploy to)before running mike:```shgit fetch origin gh-pages --depth=1```You may also need to [configure a Git user][gh-action-commit] so that mike canmake commits:```shgit config user.name ci-botgit config user.email ci-bot@example.com```Alternately, you can set the environment variables `GIT_COMMITTER_NAME` and`GIT_COMMITTER_EMAIL` (as well as `GIT_COMMITTER_DATE` if you like):```shGIT_COMMITTER_NAME=ci-bot GIT_COMMITTER_EMAIL=ci-bot@example.com \mike deploy 1.0```## For Theme AuthorsIf you'd like to provide support for mike in your theme, you just need tofetch `versions.json` and build a version selector. `versions.json` looks likethis:```javascript[  {&quot;version&quot;: &quot;1.0&quot;, &quot;title&quot;: &quot;1.0.1&quot;, &quot;aliases&quot;: [&quot;latest&quot;]},  {&quot;version&quot;: &quot;0.9&quot;, &quot;title&quot;: &quot;0.9&quot;, &quot;aliases&quot;: [], &quot;properties&quot;: &quot;anything&quot;}]```Every version has a `version` string, a `title` (which may be the same as`version`), a list of `aliases`, and optionally, a `properties` attribute thatcan hold anything at all. These `properties` can be used by other packages,themes, etc in order to add their own custom metadata to each version.If you're creating a third-party extension to an existing theme, you add asetuptools entry point for `mike.themes` pointing to a Python submodule thatcontains `css/` and `js/` subdirectories containing the extra code to beinstalled into the user's documentation. This will then automatically beincluded via the `mike` plugin in the user's `mkdocs.yml` file.To see some examples of how to work with this, check the[`mike/themes/mkdocs`](mike/themes/mkdocs) directory.## LicenseThis project is licensed under the [BSD 3-clause license](LICENSE).[pypi-image]: https://img.shields.io/pypi/v/mike.svg[pypi-link]: https://pypi.python.org/pypi/mike[ci-image]: https://github.com/jimporter/mike/workflows/build/badge.svg[ci-link]: https://github.com/jimporter/mike/actions?query=branch%3Amaster+workflow%3Abuild[codecov-image]: https://codecov.io/gh/jimporter/mike/branch/master/graph/badge.svg[codecov-link]: https://codecov.io/gh/jimporter/mike[bfg9000]: https://jimporter.github.io/bfg9000[setuptools]: https://pythonhosted.org/setuptools/[shtab]: https://github.com/iterative/shtab[shtab-setup]: https://github.com/iterative/shtab#cli-usage[jinja]: https://jinja.palletsprojects.com/[gh-action-commit]: https://github.com/actions/checkout#push-a-commit-using-the-built-in-token</longdescription>
</pkgmetadata>