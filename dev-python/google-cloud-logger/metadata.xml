<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># python_google_cloud_logger[![CircleCI](https://circleci.com/gh/rai200890/python_google_cloud_logger.svg?style=svg&amp;circle-token=cdb4c95268aa18f240f607082833c94a700f96e9)](https://circleci.com/gh/rai200890/python_google_cloud_logger)[![PyPI version](https://badge.fury.io/py/google-cloud-logger.svg)](https://badge.fury.io/py/google-cloud-logger)[![Maintainability](https://api.codeclimate.com/v1/badges/e988f26e1590a6591d96/maintainability)](https://codeclimate.com/github/rai200890/python_google_cloud_logger/maintainability)[![Test Coverage](https://api.codeclimate.com/v1/badges/e988f26e1590a6591d96/test_coverage)](https://codeclimate.com/github/rai200890/python_google_cloud_logger/test_coverage)Python log formatter for Google Cloud according to [v2 specification](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) using [python-json-logger](https://github.com/madzak/python-json-logger) formatterInspired by Elixir's [logger_json](https://github.com/Nebo15/logger_json) ## Instalation### Pipenv```    pipenv install google_cloud_logger ```### Pip```    pip install google_cloud_logger ```## Usage```pythonLOG_CONFIG = {    &quot;version&quot;: 1,    &quot;formatters&quot;: {        &quot;json&quot;: {            &quot;()&quot;: &quot;google_cloud_logger.GoogleCloudFormatter&quot;,            &quot;application_info&quot;: {                &quot;type&quot;: &quot;python-application&quot;,                &quot;name&quot;: &quot;Example Application&quot;            },            &quot;format&quot;: &quot;[%(asctime)s] %(levelname)s in %(module)s: %(message)s&quot;        }    },    &quot;handlers&quot;: {        &quot;json&quot;: {            &quot;class&quot;: &quot;logging.StreamHandler&quot;,            &quot;formatter&quot;: &quot;json&quot;        }    },    &quot;loggers&quot;: {        &quot;root&quot;: {            &quot;level&quot;: &quot;INFO&quot;,            &quot;handlers&quot;: [&quot;json&quot;]        }    }}import loggingfrom logging import configconfig.dictConfig(LOG_CONFIG) # load log config from dictlogger = logging.getLogger(&quot;root&quot;) # get root logger instancelogger.info(&quot;farofa&quot;, extra={&quot;extra&quot;: &quot;extra&quot;}) # log message with extra arguments  ```Example output:```json{&quot;timestamp&quot;: &quot;2018-11-03T22:05:03.818000Z&quot;, &quot;severity&quot;: &quot;INFO&quot;, &quot;message&quot;: &quot;farofa&quot;, &quot;labels&quot;: {&quot;type&quot;: &quot;python-application&quot;, &quot;name&quot;: &quot;Example Application&quot;}, &quot;metadata&quot;: {&quot;userLabels&quot;: {&quot;extra&quot;: &quot;extra&quot;}}, &quot;sourceLocation&quot;: {&quot;file&quot;: &quot;&lt;ipython-input-9-8e9384d78e2a&gt;&quot;, &quot;line&quot;: 1, &quot;function&quot;: &quot;&lt;module&gt;&quot;}}```## CreditsThanks [@thulio](https://github.com/thulio), [@robsonpeixoto](https://github.com/robsonpeixoto), [@ramondelemos](https://github.com/ramondelemos)</longdescription>
</pkgmetadata>