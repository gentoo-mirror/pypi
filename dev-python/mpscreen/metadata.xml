<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Infompscreen is a tool for screen manipulation. It allows for multiple consoles, dividing screen, custom colors and supports multiprocess environments. It uses ASCI escape codes so will work on linux only. If your console is set up for 256 colors## UsageIn order to use this first setup screen server and build elements. Once build you must start the server.```python# build screen serverss = mpscreen() # build screen elementsl1 = ss.buildLine(top=1, pattern=[&quot; Main Pattern : &quot;, Vstr(&quot;v:&lt;13&quot;)], background=52, color=207) # adding custom elementsl2 = ss.buildLine(top=2, pattern=[&quot; Main Pattern  &quot;, Vint(&quot;count:5&quot;), ' / ', Vint(&quot;total:5&quot;)], background=55, color=207)upperConsole = ss.buildBuffer(top=3, height=20)lowerConsole = ss.buildBuffer(bottom=2, top=25, background = 117)# start the serverss.start() ```Now you can manipulate screen from any process. ```pythondef linePrinter(cs: line):    for i in range(100, 200):        cs.v = &quot;xxx&quot; + str(i) * 3        time.sleep(0.2)def linePrinter2(cs: line):    cs.total = 200    for i in range(0, 200):        cs.count = i        time.sleep(0.2)def bufferPrinter(bs: buffer):    for i in range(1000, 3000):        bs.append(('\u001b[48;5;13m') + (str(i) * (2)))        bs.append((str(i) * 13))        time.sleep(0.1)pr = [Process(target=linePrinter, args=[l1]),      Process(target=linePrinter2, args=[l2]),      Process(target=bufferPrinter, args=[upperConsole]),      Process(target=bufferPrinter, args=[lowerConsole])]for p in pr:    p.start()for p in pr:    p.join()ss.close()```</longdescription>
</pkgmetadata>