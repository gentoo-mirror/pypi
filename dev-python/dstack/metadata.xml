<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;h1 align=&quot;center&quot;&gt;  &lt;a target=&quot;_blank&quot; href=&quot;https://dstack.ai&quot;&gt;    &lt;img alt=&quot;dstack&quot; src=&quot;https://raw.githubusercontent.com/dstackai/dstack/master/docs/assets/images/dstack-logo.svg&quot; width=&quot;350px&quot;/&gt;  &lt;/a&gt;&lt;/h1&gt;&lt;h3 align=&quot;center&quot;&gt;Effortlessly train and deploy generative AI&lt;/h3&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://dstack.ai/docs&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;Docs&lt;/b&gt;&lt;/a&gt; •&lt;a href=&quot;https://dstack.ai/examples&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/a&gt; •&lt;a href=&quot;https://dstack.ai/blog&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;Blog&lt;/b&gt;&lt;/a&gt; •&lt;a href=&quot;https://discord.gg/u8SmfwPpMd&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;Discord&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;[![Last commit](https://img.shields.io/github/last-commit/dstackai/dstack?style=flat-square)](https://github.com/dstackai/dstack/commits/)[![PyPI - License](https://img.shields.io/pypi/l/dstack?style=flat-square&amp;color=blue)](https://github.com/dstackai/dstack/blob/master/LICENSE.md)&lt;/div&gt;`dstack` is an open-source platform for training, fine-tuning, and deployment of generative AI models across various cloud providers (e.g., AWS, GCP, Azure, Lambda Cloud, etc.)## Latest news ✨- [2023/10] [Fine-tuning API](https://dstack.ai/docs/guides/fine-tuning/) (Release)- [2023/10] [Simplified cloud setup, and refined API](https://dstack.ai/blog/2023/10/18/simplified-cloud-setup/) (Release)- [2023/09] [RAG with Llama Index and Weaviate](https://dstack.ai/examples/llama-index-weaviate) (Example)- [2023/09] [Deploying LLMs using Python API](https://dstack.ai/examples/deploy-python) (Example)- [2023/08] [Fine-tuning Llama 2 using QLoRA](https://dstack.ai/examples/finetuning-llama-2) (Example)- [2023/08] [Deploying Stable Diffusion using FastAPI](https://dstack.ai/examples/stable-diffusion-xl) (Example)- [2023/07] [Deploying LLMS using TGI](https://dstack.ai/examples/text-generation-inference) (Example)- [2023/07] [Deploying LLMS using vLLM](https://dstack.ai/examples/vllm) (Example)## InstallationBefore using `dstack` through CLI or API, set up a `dstack` server.### Install the serverThe easiest way to install the server, is via `pip`:&lt;div class=&quot;termy&quot;&gt;```shell$ pip install &quot;dstack[all]&quot; -U```&lt;/div&gt;### Configure cloudsIf you have default AWS, GCP, or Azure credentials on your machine, `dstack` will pick them up automatically.Otherwise, you need to manually specify the cloud credentials in `~/.dstack/server/config.yml`.For further cloud configuration details, refer to [server configuration](https://dstack.ai/docs/configuration/server).### Start the serverTo start the server, use the `dstack server` command:&lt;div class=&quot;termy&quot;&gt;```shell$ dstack serverThe server is running at http://127.0.0.1:3000/.The admin token is xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx```&lt;/div&gt;## Using CLI### Define a configurationThe CLI allows you to define what you want to run as a YAML file andrun it via the `dstack run` CLI command.#### Dev environmentsA dev environment is a cloud instance pre-configured with an IDE.```yamltype: dev-environmentpython: &quot;3.11&quot; # (Optional) If not specified, your local version is usedide: vscode```#### TasksA task can be a batch job or a web app.```yamltype: taskpython: &quot;3.11&quot; # (Optional) If not specified, your local version is usedports:  - 6006commands:  - pip install -r requirements.txt  - tensorboard --logdir ./logs &amp;  - python train.py```If you run a task, `dstack` forwards the configured ports to `localhost`.#### ServicesA service is a web app accessible from the Internet.```yamltype: serviceimage: ghcr.io/huggingface/text-generation-inference:latestenv:   - MODEL_ID=TheBloke/Llama-2-13B-chat-GPTQ port: 80commands:  - text-generation-launcher --trust-remote-code --quantize gptq```&gt; **Note:**&gt; Before you can run a service, you have to set up a [gateway](https://dstack.ai/docs/guides/services.md#set-up-a-gateway).Running a service will make it available at `https://&lt;run-name&gt;.&lt;your-domain&gt;` using thedomain configured for the gateway.### Run a configurationTo run a configuration, use the [`dstack run`](https://dstack.ai/docs/reference/cli/run.md) command followed by working directory and the path to the configuration file.```shelldstack run . -f text-generation-inference/serve.dstack.yml --gpu 80GB -y RUN           BACKEND  INSTANCE              SPOT  PRICE STATUS    SUBMITTED tasty-zebra-1 lambda   200GB, 1xA100 (80GB)  no    $1.1  Submitted now Privisioning...Serving on https://tasty-zebra-1.mydomain.com```## Using APIAs an alternative to the CLI, you can run tasks and services and manage runs programmatically.### Create a clientFirst, create an instance of `dstack.api.Client`:```pythonfrom dstack.api import Client, ClientErrortry:    client = Client.from_config()except ClientError:    print(&quot;Can't connect to the server&quot;)```### Submit a runHere's an example of how to run a task:```pythonfrom dstack.api import Task, Resources, GPUtask = Task(    image=&quot;ghcr.io/huggingface/text-generation-inference:latest&quot;,    env={&quot;MODEL_ID&quot;: &quot;TheBloke/Llama-2-13B-chat-GPTQ&quot;},    commands=[        &quot;text-generation-launcher --trust-remote-code --quantize gptq&quot;,    ],    ports=[&quot;80&quot;],)run = client.runs.submit(    run_name=&quot;my-awesome-run&quot;,    configuration=task,    resources=Resources(gpu=GPU(memory=&quot;24GB&quot;)),)```[//]: # (TODO: Explain how to mount a repo)To forward the configured ports to `localhost`, use the `attach` and `detach` methods on the run.```pythontry:    run.attach()        # ...except KeyboardInterrupt:    run.stop(abort=True)finally:    run.detach()```## More informationFor additional information and examples, see the following links:- [Docs](https://dstack.ai/docs)- [Examples](https://dstack.ai/examples)- [Blog](https://dstack.ai/blog)- [Discord](https://discord.gg/u8SmfwPpMd)## Licence[Mozilla Public License 2.0](LICENSE.md)</longdescription>
</pkgmetadata>