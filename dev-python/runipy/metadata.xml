<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|Travis Build Status| |Coveralls| |License| |Version| |Gitter|--------------``runipy``: run IPython as a script=====================================The IPython notebook provides an interactive interface to a Python interpreter.- **Literate programming**: the IPython notebook is an ideal format for  writing &quot;literate&quot; programs, in which the code is part of a larger multi-media  document. ``runipy`` lets you run such programs directly, without first  converting to a pure Python script.- **Report generation**: ``runipy`` can run the notebook and convert it into HTML  in one go, making it an easy way to automate reports.- **Data pipeline**: if you use IPython notebooks to create a data pipeline,  ``runipy`` lets you automate that pipeline without losing the notebook  formatting.Requirements------------``runipy`` currently supports IPython versions 2.4.x, 3.2.x and the current developmentversion of 4.x.Installation------------The easiest way to install ``runipy`` is with ``pip``::    $ pip install runipyCommand-line use----------------To run a ``.ipynb`` file as a script, run::    $ runipy MyNotebook.ipynbTo save the output of each cell back to the notebook file, run::    $ runipy -o MyNotebook.ipynbTo save the notebook output as a *new* notebook, run::    $ runipy MyNotebook.ipynb OutputNotebook.ipynbTo run a ``.ipynb`` file and generate an ``HTML`` report, run::    $ runipy MyNotebook.ipynb --html report.htmlPassing Arguments-----------------You can pass arguments to the notebook through environment variables.The use of environment variables is OS- and shell- dependent, but in atypical UNIX-like environment they can be passed on the command linebefore the program name::    $ myvar=value runipy MyNotebook.ipynbHere is one way this can be done from pure python::    from os import environ    from subprocess import call    environ['myvar'] = 'value'    call([&quot;runipy&quot;, &quot;MyNotebook.ipynb&quot;])Then in the notebook, to access myvar::    from os import environ    myvar = environ['myvar']``environ`` is just a ``dict``, so you can use ``.get()`` to fall back ona default value::    from os import environ    myvar = environ.get('myvar', 'default!')Stdin / Stdout--------------``runipy`` can read stdin and stdout and sit in a UNIX pipeline::    $ runipy --stdout &lt; MyNotebook.ipynb &gt; OutputNotebook.ipynb    $ cat MyNotebook.ipynb | runipy --stdout &gt; OutputNotebook.ipynbProgrammatic use----------------It is also possible to run IPython notebooks from Python, using::    from runipy.notebook_runner import NotebookRunner    from IPython.nbformat.current import read    notebook = read(open(&quot;MyNotebook.ipynb&quot;), 'json')    r = NotebookRunner(notebook)    r.run_notebook()and you can enable ``pylab`` with::    r = NotebookRunner(notebook, pylab=True)    The notebook is stored in the object and can be saved using::    from IPython.nbformat.current import write    write(r.nb, open(&quot;MyOtherNotebook.ipynb&quot;, 'w'), 'json')`run_notebook()` takes two optional arguments. The first, `skip_exceptions`, takes a boolean value (`False` by default). If `True`, exceptions will be ignoredand the notebook will continue to execute cells after encountering an exception.The second argument is `progress_callback`, which must be either `None` or afunction that takes one argument. This function is called after execution ofeach cell with the 0-based index of the cell just evaluated. This can be usefulfor tracking progress of long-running notebooks.Credit------Portions of the code are based on code by `Min RK &lt;https://github.com/minrk&gt;`_Thanks to Kyle Kelley, Nitin Madnani, George Titsworth, Thomas Robitaille,Andrey Tatarinov, Matthew Brett, Adam Haney, Nathan Goldbaum, Adam Ginsburg,Gustavo Bragan√ßa, Tobias Brandt, Andrea Zonca, Aaron O'Leary, Simon Guillot,Fernando Correia, Takashi Nishibayashi, Simon Conseil, and Thomas Frenchfor patches, documentation fixes, and suggestions... |Travis Build Status| image:: https://travis-ci.org/paulgb/runipy.svg?branch=master    :target: https://travis-ci.org/paulgb/runipy.. |Coveralls| image:: https://coveralls.io/repos/paulgb/runipy/badge.svg?branch=master&amp;service=github  :target: https://coveralls.io/github/paulgb/runipy?branch=master.. |License| image:: https://img.shields.io/badge/license-BSD-blue.svg   :alt: BSD License   :target: https://raw.githubusercontent.com/paulgb/runipy/master/LICENSE.. |Version| image:: https://img.shields.io/pypi/v/runipy.svg   :target: https://pypi.python.org/pypi/runipy.. |Gitter| image:: https://badges.gitter.im/Join%20Chat.svg   :alt: Join the chat at https://gitter.im/paulgb/runipy   :target: https://gitter.im/paulgb/runipy?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge</longdescription>
</pkgmetadata>