<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sydney.py[![Latest Release](https://img.shields.io/github/v/release/vsakkas/sydney.py.svg)](https://github.com/vsakkas/sydney.py/releases/tag/v0.11.3)[![Python](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)[![MIT License](https://img.shields.io/badge/license-MIT-blue)](https://github.com/vsakkas/sydney.py/blob/master/LICENSE)Python Client for Bing Chat, also known as Sydney.&gt; **Note**&gt; This is an **unofficial** client.## Features- Connect to Bing Chat, Microsoft's AI-powered personal assistant.- Ask questions and have a conversation in various conversation styles.- Compose content in various formats and tones.- Stream response tokens for real-time communication.- Supports asyncio for efficient and non-blocking I/O operations.## Requirements- Python 3.10 or newer- Microsoft account with access to [Bing Chat](https://bing.com/chat)## InstallationTo install Sydney.py, run the following command:```bashpip install sydney-py```or, if you use [poetry](https://python-poetry.org/):```bashpoetry add sydney-py```## Usage### PrerequisitesTo use Sydney.py you first need to extract the `_U` cookie from [Bing](https://bing.com). The `_U` cookie is used to authenticate your requests to the Bing Chat API.To get the `_U` cookie, follow these steps:- Log in to [Bing](https://bing.com) using your Microsoft account.- Open the developer tools in your browser (usually by pressing `F12` or right-clicking and selecting `Inspect element`).- Select the `Storage` tab and click on the `Cookies` option to view all cookies associated with the website.- Look for the `_U` cookie and click on it to expand its details.- Copy the value of the `_U` cookie (it should look like a long string of letters and numbers).Then, set it as an environment variable in your shell:```bashexport BING_U_COOKIE=&lt;your-cookie&gt;```or, in your Python code:```pythonos.environ[&quot;BING_U_COOKIE&quot;] = &quot;&lt;your-cookie&gt;&quot;```### ExampleYou can use Sydney.py to easily create a CLI client for Bing Chat:```pythonimport asynciofrom sydney import SydneyClientasync def main() -&gt; None:    async with SydneyClient() as sydney:        while True:            prompt = input(&quot;You: &quot;)            if prompt == &quot;!reset&quot;:                await sydney.reset_conversation()                continue            elif prompt == &quot;!exit&quot;:                break            print(&quot;Sydney: &quot;, end=&quot;&quot;, flush=True)            async for response in sydney.ask_stream(prompt):                print(response, end=&quot;&quot;, flush=True)            print(&quot;\n&quot;)if __name__ == &quot;__main__&quot;:    asyncio.run(main())```### Sydney ClientYou can create a Sydney Client and initialize a connection with Bing Chat which starts a conversation:```pythonsydney = SydneyClient()await sydney.start_conversation()# Conversationawait sydney.end_conversation()```Alternatively, you can use the `async with` statement to keep the code compact:```pythonasync with SydneyClient() as sydney:    # Conversation```### Conversation StyleYou can set the conversation style when creating a Sydney Client:```pythonsydney = SydneyClient(style=&quot;creative&quot;)```The available options are `creative`, `balanced` and `precise`.### Reset ConversationYou can reset the conversation in order to make the client forget the previous conversation. You can also change the conversation style without creating a new client:```pythonasync withSydneyClient() as sydney:    # Conversation    await sydney.reset_conversation(style=&quot;creative&quot;)```### AskYou can ask Bing Chat questions and (optionally) include citations in the results:```pythonasync with SydneyClient() as sydney:    response = await sydney.ask(&quot;When was Bing Chat released?&quot;, citations=True)    print(response)```You can also stream the response tokens:```pythonasync with SydneyClient() as sydney:    async for response in sydney.ask_stream(&quot;When was Bing Chat released?&quot;, citations=True):        print(response, end=&quot;&quot;, flush=True)```&gt; **Note**&gt; Both versions of the `ask` method support the same parameters.### ComposeYou can ask Bing Chat to compose different types of content, such emails, articles, ideas and more:```pythonasync with SydneyClient() as sydney:    response = sydney.compose(&quot;Why Python is a great language&quot;, format=&quot;ideas&quot;)    print(response)```You can also stream the response tokens:```pythonasync with SydneyClient() as sydney:   async for response in sydney.compose_stream(&quot;Why Python is a great language&quot;, format=&quot;ideas&quot;):        print(response, end=&quot;&quot;, flush=True)```The available options for the `tone` parameter are `professional`, `casual`, `enthusiastic`, `informational` and `funny`.The available options for the `format` parameter are `paragraph`, `email`, `blogpost` and `ideas`.The available options for the `length` parameter are `short`, `medium` and `long`.&gt; **Note**&gt; Both versions of the `compose` method support the same parameters.### Raw ResponseYou can also receive the raw JSON response that comes from Bing Chat instead of a text answer. Both `ask` and `compose` support this feature:```pythonasync with SydneyClient() as sydney:    response = await sydney.ask(&quot;When was Bing Chat released?&quot;, raw=True)    print(response)```*For more detailed documentation and options, please refer to the code docstrings.*## LicenseThis project is licensed under the MIT License - see the [LICENSE](https://github.com/vsakkas/sydney.py/blob/master/LICENSE) file for details.</longdescription>
</pkgmetadata>