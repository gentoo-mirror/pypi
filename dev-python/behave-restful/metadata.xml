<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Behave Restful==============.. image:: https://travis-ci.org/behave-restful/behave-restful.svg?branch=master   :target: https://travis-ci.org/behave-restful/behave-restful   :alt: Build StatusBehave Restful is a Behavior Driven Development (BDD) framework based on `behave &lt;https://pythonhosted.org/behave/&gt;`_\ , that implements a language suitable to test and validate REST APIs and Services. It leverages the power of the `gherkin &lt;https://github.com/cucumber/cucumber/wiki/Gherkin&gt;`_ language to write business readable tests that validate the behavior of REST APIs.Although, Behave Restful is implemented in `python &lt;http://www.python.org&gt;`_ and uses `behave &lt;https://pythonhosted.org/behave/&gt;`_ as underlying framework, it can test services implemented in any language as easy as:.. code-block:: gherkin   Feature: API to add a new book to our collection       As a user, I want to add a new book to my &quot;to-read&quot; collection.       Scenario: Add a new book to collection.           Given a request url http://my.reads/api/books               And a request json payload                   &quot;&quot;&quot;                   {                       &quot;category&quot;: &quot;reference&quot;,                       &quot;author&quot;: &quot;Nigel Rees&quot;,                       &quot;title&quot;: &quot;Sayings of the Century&quot;,                       &quot;price&quot;: 8.95,                       &quot;status&quot;: &quot;to-read&quot;                   }                   &quot;&quot;&quot;           When the request sends POST           Then the response status is CREATED               And the response json matches                   &quot;&quot;&quot;                   {                       &quot;title&quot;: &quot;BookObject&quot;,                       &quot;type&quot;: &quot;object&quot;                       &quot;properties&quot;: {                           &quot;id&quot;: {&quot;type&quot;: &quot;number&quot;},                           &quot;category&quot;: {&quot;type&quot;: &quot;string&quot;},                           &quot;author&quot;: {&quot;type&quot;: &quot;string&quot;},                           &quot;title&quot;: {&quot;type&quot;: &quot;string&quot;},                           &quot;price&quot;: {&quot;type&quot;: &quot;number&quot;},                           &quot;status&quot;: {&quot;type&quot;: &quot;string&quot;, &quot;enum&quot;: [&quot;to-read&quot;, &quot;reading&quot;, &quot;read&quot;]}                       },                       &quot;required&quot;: [&quot;id&quot;, &quot;category&quot;, &quot;title&quot;]                   }                   &quot;&quot;&quot;               And the response json at $.id is equal to 100               And the response json at $.category is equal to &quot;reference&quot;               And the response json at $.title is equal to &quot;Sayings of the Century&quot;As you can see in the example, we send a POST request to the specified url witha JSON payload, and we can validate the result very easy. First, we verify thatthe status of the response is CREATED (it succeeds). Then we validate theresponse JSON body using the expected `JSON Schema &lt;http://json-schema.org/&gt;`_. Finally, we validate specific values in the response using `JSONPath &lt;http://goessner.net/articles/JsonPath/&gt;`_Installation------------Use pip to install behave-restful in your project.. code-block::   pip install behave-restfulSetup-----To add support for ``behave-restful`` steps in your ``.feature`` files, you need to include behave-restful's environment and step definitions.You can do this simply by adding two boilerplate files to your project:In the root of your ``features`` directory, add this ``environment.py`` file:.. code-block:: python   # {your_project}/features/en/__init__.py   import os   import behave_restful.app as br_app   def before_all(context):       this_directory = os.path.abspath(os.path.dirname(__file__))       br_app.BehaveRestfulApp().initialize_context(context, this_directory)       context.hooks.invoke(br_app.BEFORE_ALL, context)   def after_all(context):       context.hooks.invoke(br_app.AFTER_ALL, context)   def before_feature(context, feature):       context.hooks.invoke(br_app.BEFORE_FEATURE, context, feature)   def after_feature(context, feature):       context.hooks.invoke(br_app.AFTER_FEATURE, context, feature)   def before_scenario(context, scenario):       context.hooks.invoke(br_app.BEFORE_SCENARIO, context, scenario)   def after_scenario(context, scenario):       context.hooks.invoke(br_app.AFTER_SCENARIO, context, scenario)   def before_step(context, step):       context.hooks.invoke(br_app.BEFORE_STEP, context, step)   def after_step(context, step):       context.hooks.invoke(br_app.AFTER_STEP, context, step)   def before_tag(context, tag):       context.hooks.invoke(br_app.BEFORE_TAG, context, tag)   def after_tag(context, tag):       context.hooks.invoke(br_app.AFTER_TAG, context, tag)And under ``features/steps`` add this ``__init__.py`` file:.. code-block:: python   # {your_project}/features/steps/__init__.py   from behave_restful.lang import *</longdescription>
</pkgmetadata>