<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyVLX - controling VELUX windows with Python============================================[![CI](https://github.com/Julius2342/pyvlx/actions/workflows/ci.yml/badge.svg)](https://github.com/Julius2342/pyvlx/actions/workflows/ci.yml)PyVLX uses the Velux KLF 200 interface to control io-Homecontrol devices, e.g. Velux Windows.Installation------------PyVLX can be installed via:```bashpip3 install pyvlx```Home Assistant Plugin---------------------PyVLX is used within [Home Assistant](https://www.home-assistant.io/components/velux/). To enable it add the following lines to your ~/.homeassistant/configuration.yml:```yamlvelux:    host: &quot;192.168.0.0&quot;    password: &quot;1ADwl48dka&quot;```*Please note that this uses the WiFi password, not the web login.*For debugging frames add:```yamllogger:  default: warning  logs:    homeassistant.components.velux: debug    pyvlx: debug```Basic Operations----------------```python&quot;&quot;&quot;Just a demo of the new PyVLX module.&quot;&quot;&quot;import asynciofrom pyvlx import PyVLX, Positionasync def main(loop):    &quot;&quot;&quot;Demonstrate functionality of PyVLX.&quot;&quot;&quot;    pyvlx = PyVLX('pyvlx.yaml', loop=loop)    # Alternative:    # pyvlx = PyVLX(host=&quot;192.168.2.127&quot;, password=&quot;velux123&quot;, loop=loop)    # Runing scenes:    await pyvlx.load_scenes()    await pyvlx.scenes[&quot;All Windows Closed&quot;].run()    # Changing position of windows:    await pyvlx.load_nodes()    await pyvlx.nodes['Bath'].open()    await pyvlx.nodes['Bath'].close()    await pyvlx.nodes['Bath'].set_position(Position(position_percent=45))    # Read limits of windows    # limit = await pyvlx.nodes['Bath'].get_limitation()    # limit.min_value    # limit.max_value        # Changing of on-off switches:    # await pyvlx.nodes['CoffeeMaker'].set_on()    # await pyvlx.nodes['CoffeeMaker'].set_off()    # You can easily rename nodes:    # await pyvlx.nodes[&quot;Window 10&quot;].rename(&quot;Window 11&quot;)            await pyvlx.disconnect()if __name__ == '__main__':    # pylint: disable=invalid-name    LOOP = asyncio.get_event_loop()    LOOP.run_until_complete(main(LOOP))    # LOOP.run_forever()    LOOP.close()```</longdescription>
</pkgmetadata>