<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Logo](https://github.com/boonlogic/amber-python-sdk/blob/master/docs/BoonLogic.png?raw=true)# Boon Amber Python SDKAn SDK for Boon Amber sensor analytics- __Website__: [boonlogic.com](https://boonlogic.com)- __Documentation__: [Boon Docs Main Page](https://docs.boonlogic.com)- __SDK Functional Breakdown__: [amber-python-sdk classes and methods](https://boonlogic.github.io/amber-python-sdk/docs/boonamber/index.html)## InstallationThe Boon Amber SDK is a Python 3 project and can be installed via pip.```pip install boonamber```## Credentials setupNote: An account in the Boon Amber cloud must be obtained from Boon Logic to use the Amber SDK.The username and password should be placed in a file named _~/.Amber.license_ whose contents are the following:```json{    &quot;default&quot;: {        &quot;username&quot;: &quot;AMBER-ACCOUNT-USERNAME&quot;,        &quot;password&quot;: &quot;AMBER-ACCOUNT-PASSWORD&quot;,        &quot;server&quot;: &quot;https://amber.boonlogic.com/v1&quot;    }}```The _~/.Amber.license_ file will be consulted by the Amber SDK to find and authenticate your account credentials with the Amber server. Credentials may optionally be provided instead via the environment variables `AMBER_USERNAME` and `AMBER_PASSWORD`.## Connectivity testThe following Python script provides a basic proof-of-connectivity:[connect-example.py](examples/connect-example.py)```pythonimport sysimport jsonfrom boonamber import AmberClient, AmberCloudError, AmberUserError# if you wish to turn off tls certificate warnings# import urllib3# urllib3.disable_warnings()## Alternatively invoke python with -Wignore## At initialization the client discovers Amber account credentials# under the &quot;default&quot; entry in the ~/.Amber.license file.#amber = AmberClient(verify=False)amber = AmberClient()try:    # Get a list of all sensors belonging to the current user.    version_info = amber.get_version()except AmberCloudError as e:    # AmberCloudError is raised upon any error response from the Amber server.    print(&quot;Amber Cloud error: {}&quot;.format(e))    sys.exit(1)except AmberUserError as e:    # AmberUserError is raised upon client-side usage errors with the SDK.    print(&quot;Amber user error: {}&quot;.format(e))    sys.exit(1)print(json.dumps(version_info, indent=4))```Running the connect-example.py script should yield output like the following:```$ python connect-example.py{    &quot;release&quot;: &quot;0.0.405&quot;,    &quot;api-version&quot;: &quot;/v1&quot;,    &quot;builder&quot;: &quot;ec74f421&quot;,    &quot;expert-api&quot;: &quot;dee23681&quot;,    &quot;expert-common&quot;: &quot;300a588e&quot;,    &quot;nano-secure&quot;: &quot;61c431e2&quot;,    &quot;swagger-ui&quot;: &quot;914af396&quot;}```where the dictionary `{}` lists all sensors that currently exist under the given Boon Amber account.## Full ExampleExample to demonstrate each API call[full-example.py](examples/full-example.py)## Fusion ExampleExample to demonstrate submitting data via the label for individual features of a fusion vector.[fusion-example.py](examples/fusion-example.py)## Advanced CSV file processorExample of streaming a .csv file.  Full Amber analytic results will be displayed after each streaming request.  [stream-advanced.py](examples/stream-advanced.py)&lt;br&gt;[output_current.csv](examples/output_current.csv)## Pretrain exampleExample of pretraining a .csv file[pretrain-example.py](examples/pretrain-example.py)&lt;br&gt;[output_current.csv](examples/output_current.csv)</longdescription>
</pkgmetadata>