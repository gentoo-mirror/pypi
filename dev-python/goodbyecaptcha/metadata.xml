<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://img.shields.io/pypi/v/goodbyecaptcha.svg    :alt: PyPI    :target: https://pypi.org/project/goodbyecaptcha/.. image:: https://img.shields.io/pypi/pyversions/goodbyecaptcha.svg    :alt: PyPI - Python Version    :target: https://pypi.org/project/goodbyecaptcha/.. image:: https://img.shields.io/sourceforge/dt/goodbyecatpcha.svg    :alt: SourceForge - Downloads    :target: https://sourceforge.net/projects/goodbyecatpcha/files/latest/download.. image:: https://img.shields.io/pypi/l/goodbyecaptcha.svg    :alt: PyPI - License    :target: https://pypi.org/project/goodbyecaptcha/.. image:: https://img.shields.io/pypi/status/goodbyecaptcha.svg    :alt: PyPI - Status    :target: https://pypi.org/project/goodbyecaptcha/GoodByeCaptcha==============An async Python library to automate solving ReCAPTCHA v2 by images/audio usingMozilla's DeepSpeech, PocketSphinx, Microsoft Azure’s, Wit.AI, Google Speech orAmazon's Transcribe Speech-to-Text API. Also image recognition to detectthe object suggested in the captcha. Built with Pyppeteer for Chromeautomation framework and similarities to Puppeteer, PyDub for easilyconverting MP3 files into WAV, aiohttp for async minimalistic web-server,and Python’s built-in AsyncIO for convenience.Disclaimer----------This project is for educational and research purposes only. Any actionsand/or activities related to the material contained on this GitHubRepository is solely your responsibility. The misuse of the informationin this GitHub Repository can result in criminal charges brought againstthe persons in question. The author will not be held responsible in theevent any criminal charges be brought against any individuals misusingthe information in this GitHub Repository to break the law.Compatibility-------------Linux, macOS, and Windows!Requirements------------Python`3.7 &lt;https://www.python.org/downloads/release/python-370/&gt;`__,`FFmpeg &lt;https://ffmpeg.org/download.html&gt;`__, a `MicrosoftAzure &lt;https://portal.azure.com/&gt;`__ account for Bing Speech API access, anAmazon Web Services account for Transcribe and S3 access, a Wit.AI or for Pocketsphinx.You'll need pulseaudio, swig, libasound2-dev, and libpulse-dev under Debian.Train the yolov3 neural network to improve image recognition.Training YoloV3---------------I recommend training yolov3 to improve the recaptcha resolution with the following information: - `Dataset &lt;https://storage.googleapis.com/openimages/web/download.html&gt;`__ - `Tutorial Video &lt;https://www.youtube.com/playlist?list=PLZBN9cDu0MSk4IFFnTOIDihvhnHWhAa8W&gt;`__ - Object classes: `bicycle, bridge, bus, car, chimneys, crosswalk, fire hydrant, motorcycle, palm trees, parking meters, stair, taxis, tractors, traffic light, trees`Installation------------.. code:: shell   $ apt-get update &amp;&amp; apt-get install -y libpangocairo-1.0-0 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxi6 libxtst6 libnss3 libcups2 libxss1 libxrandr2 libgconf-2-4 libasound2 libasound2-dev libatk1.0-0 libgtk-3-0 gconf-service libappindicator1 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgdk-pixbuf2.0-0 libglib2.0-0 libnspr4 libpango-1.0-0 libpulse-dev libstdc++6 libx11-6 libxcb1 libxext6 libxfixes3 libxrender1 libxtst6 ca-certificates fonts-liberation lsb-release xdg-utils build-essential ffmpeg swig software-properties-common curl   $ pip install goodbyecaptchaInstall tutorial----------------.. image:: https://img.youtube.com/vi/hPYMUdQ2aV8/0.jpg   :target: https://www.youtube.com/watch?v=hPYMUdQ2aV8Configuration-------------Please edit goodbyecaptcha.example.yaml and save as goodbyecaptcha.yamlUsage-----If you want to use it in your own script.. code:: python    from goodbyecaptcha.solver import Solver    pageurl = &quot;https://www.google.com/recaptcha/api2/demo&quot;    proxy = &quot;127.0.0.1:1000&quot;    auth_details = {&quot;username&quot;: &quot;user&quot;, &quot;password&quot;: &quot;pass&quot;}    args = [&quot;--timeout 5&quot;]    options = {&quot;ignoreHTTPSErrors&quot;: True, &quot;args&quot;: args}  # References: https://miyakogi.github.io/pyppeteer/reference.html    client = Solver(        # With Proxy        # pageurl, lang='en-US', options=options, proxy=proxy, proxy_auth=auth_details        # Without Proxy        pageurl, lang='en-US', options=options    )    solution = client.loop.run_until_complete(client.start())    if solution:        print(solution)If you want to use events.. code:: python    from goodbyecaptcha.solver import Solver    pageurl = &quot;https://www.google.com/recaptcha/api2/demo&quot;    proxy = &quot;127.0.0.1:1000&quot;    auth_details = {&quot;username&quot;: &quot;user&quot;, &quot;password&quot;: &quot;pass&quot;}    args = [&quot;--timeout 5&quot;]    options = {&quot;ignoreHTTPSErrors&quot;: True, &quot;args&quot;: args}  # References: https://miyakogi.github.io/pyppeteer/reference.html    class MySolver(Solver):        async def on_goto(self):            # Set Cookies and other stuff            await self.page.setCookie({                'name': 'cookie1',                'value': 'value1',                'domain': '.google.com'            })            self.log('Cookies ready!')        async def on_start(self):            # Set or Change data            self.log('Set data in form ...')            await self.page.type('input[name=&quot;input1&quot;]', 'value')        async def on_finish(self):            # Click button Send            self.log('Clicking send button ...')            await self.page.click('input[id=&quot;recaptcha-demo-submit&quot;]')            await self.page.waitForNavigation()            await self.page.screenshot({'path': 'image.png'})    client = MySolver(        # With Proxy        # pageurl, lang='en-US', options=options, proxy=proxy, proxy_auth=auth_details        # Without Proxy        pageurl, lang='en-US', options=options    )    client.loop.run_until_complete(client.start())</longdescription>
</pkgmetadata>