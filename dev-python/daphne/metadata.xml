<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>daphne======.. image:: https://img.shields.io/pypi/v/daphne.svg    :target: https://pypi.python.org/pypi/daphneDaphne is a HTTP, HTTP2 and WebSocket protocol server for`ASGI &lt;https://github.com/django/asgiref/blob/main/specs/asgi.rst&gt;`_ and`ASGI-HTTP &lt;https://github.com/django/asgiref/blob/main/specs/www.rst&gt;`_,developed to power Django Channels.It supports automatic negotiation of protocols; there's no need for URLprefixing to determine WebSocket endpoints versus HTTP endpoints.Running-------Simply point Daphne to your ASGI application, and optionallyset a bind address and port (defaults to localhost, port 8000)::    daphne -b 0.0.0.0 -p 8001 django_project.asgi:applicationIf you intend to run daphne behind a proxy server you can use UNIXsockets to communicate between the two::    daphne -u /tmp/daphne.sock django_project.asgi:applicationIf daphne is being run inside a process manager, you mightwant it to bind to a file descriptor passed down from a parent process.To achieve this you can use the --fd flag::    daphne --fd 5 django_project.asgi:applicationIf you want more control over the port/socket bindings you can fall back tousing `twisted's endpoint description strings&lt;http://twistedmatrix.com/documents/current/api/twisted.internet.endpoints.html#serverFromString&gt;`_by using the `--endpoint (-e)` flag, which can be used multiple times.This line would start a SSL server on port 443, assuming that `key.pem` and `crt.pem`exist in the current directory (requires pyopenssl to be installed)::    daphne -e ssl:443:privateKey=key.pem:certKey=crt.pem django_project.asgi:applicationEndpoints even let you use the ``txacme`` endpoint syntax to get automatic certificatesfrom Let's Encrypt, which you can read more about at http://txacme.readthedocs.io/en/stable/.To see all available command line options run daphne with the ``-h`` flag.HTTP/2 Support--------------Daphne supports terminating HTTP/2 connections natively. You'llneed to do a couple of things to get it working, though. First, you need tomake sure you install the Twisted ``http2`` and ``tls`` extras::    pip install -U 'Twisted[tls,http2]'Next, because all current browsers only support HTTP/2 when using TLS, you willneed to start Daphne with TLS turned on, which can be done using the Twisted endpoint syntax::    daphne -e ssl:443:privateKey=key.pem:certKey=crt.pem django_project.asgi:applicationAlternatively, you can use the ``txacme`` endpoint syntax or anything else thatenables TLS under the hood.You will also need to be on a system that has **OpenSSL 1.0.2 or greater**; if you areusing Ubuntu, this means you need at least Ubuntu 16.04.Now, when you start up Daphne, it should tell you this in the log::    2017-03-18 19:14:02,741 INFO     Starting server at ssl:port=8000:privateKey=privkey.pem:certKey=cert.pem, channel layer django_project.asgi:channel_layer.    2017-03-18 19:14:02,742 INFO     HTTP/2 support enabledThen, connect with a browser that supports HTTP/2, and everything should beworking. It's often hard to tell that HTTP/2 is working, as the log Daphne gives youwill be identical (it's HTTP, after all), and most browsers don't make it obviousin their network inspector windows. There are browser extensions that will letyou know clearly if it's working or not.Daphne only supports &quot;normal&quot; requests over HTTP/2 at this time; there is notyet support for extended features like Server Push. It will, however, result inmuch faster connections and lower overheads.If you have a reverse proxy in front of your site to serve static files orsimilar, HTTP/2 will only work if that proxy understands and passes through theconnection correctly.Root Path (SCRIPT_NAME)-----------------------In order to set the root path for Daphne, which is the equivalent of theWSGI ``SCRIPT_NAME`` setting, you have two options:* Pass a header value ``Daphne-Root-Path``, with the desired root path as a  URLencoded ASCII value. This header will not be passed down to applications.* Set the ``--root-path`` commandline option with the desired root path as a  URLencoded ASCII value.The header takes precedence if both are set. As with ``SCRIPT_ALIAS``, the valueshould start with a slash, but not end with one; for example::    daphne --root-path=/forum django_project.asgi:applicationPython Support--------------Daphne requires Python 3.7 or later.Contributing------------Please refer to the`main Channels contributing docs &lt;https://github.com/django/channels/blob/main/CONTRIBUTING.rst&gt;`_.To run tests, make sure you have installed the ``tests`` extra with the package::    cd daphne/    pip install -e '.[tests]'    pytestMaintenance and Security------------------------To report security issues, please contact security@djangoproject.com. For GPGsignatures and more security process information, seehttps://docs.djangoproject.com/en/dev/internals/security/.To report bugs or request new features, please open a new GitHub issue.This repository is part of the Channels project. For the shepherd and maintenance team, please see the`main Channels readme &lt;https://github.com/django/channels/blob/main/README.rst&gt;`_.</longdescription>
</pkgmetadata>