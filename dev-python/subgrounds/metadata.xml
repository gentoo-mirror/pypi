<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Subgrounds&lt;!-- [![GitHub Actions](https://github.com/0xPlaygrounds/subgrounds/workflows/CI/badge.svg)](https://github.com/0xPlaygrounds/subgrounds/actions) --&gt;[![PyPI](https://img.shields.io/pypi/v/subgrounds.svg)](https://pypi.org/project/subgrounds/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/subgrounds.svg)](https://pypi.org/project/subgrounds/)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)&lt;br&gt;[![Discord](https://img.shields.io/discord/896944341598208070?color=7289DA&amp;label=discord&amp;logo=discord&amp;logoColor=fff)](https://discord.gg/gMSSh5bjvk)[![Twitter Follow](https://img.shields.io/twitter/follow/Playgrounds0x?color=%231fa1f2&amp;label=Playgrounds%20Analytics&amp;logo=Twitter&amp;logoColor=1fa1f2&amp;style=flat-square)](https://twitter.com/Playgrounds0x)&lt;!-- start elevator-pitch --&gt;An intuitive python library for interfacing with Subgraphs.## Features- **Simple**: Leverage a Pythonic API to easily build queries and transformations without the need for raw GraphQL manipulation.- **Automated**: Automatically handle pagination and schema introspection for effortless data retrieval.- **Powerful**: Create sophisticated queries using the `SyntheticFields` transformation system.&lt;!-- end elevator-pitch --&gt;## Resources- [**Subgrounds Docs**](http://docs.playgrounds.network/): User guide and API documentation- [**Examples**](https://github.com/0xPlaygrounds/subgrounds/tree/main/examples): A list of examples showcasing Subgrounds integration with Dash and Plotly- [**Community projects**](http://docs.playgrounds.network//examples/): An ever growing list of projects created by our community members- [**MetricsDAO Subgrounds Workshop**](https://docs.metricsdao.xyz/get-involved/workshops/2022-03-30+-subgrounds-workshop-series): Subgrounds workshop series hosted by MetricsDAO ## Installation&gt; Subgrounds **requires** atleast Python 3.10+Subgrounds is available on PyPi. To install it, run the following:&lt;br&gt;`pip install subgrounds`.Subgrounds also comes bundled with some handy `dash` wrappers. To use those wrappers, you can install the extra `dash` dependencies.&lt;br&gt;`pip install subgrounds[dash]`.## Simple example&lt;!-- start simple-example --&gt;```python&gt;&gt;&gt; from subgrounds import Subgrounds&gt;&gt;&gt; sg = Subgrounds()&gt;&gt;&gt; # Load&gt;&gt;&gt; aave_v2 = sg.load_subgraph('https://api.thegraph.com/subgraphs/name/messari/aave-v2-ethereum')&gt;&gt;&gt; # Construct the query&gt;&gt;&gt; latest = aave_v2.Query.markets(  orderBy=aave_v2.Market.totalValueLockedUSD,  orderDirection='desc',  first=5,)&gt;&gt;&gt; # Return query to a dataframe&gt;&gt;&gt; sg.query_df([  latest.name,  latest.totalValueLockedUSD,])                  markets_name  markets_totalValueLockedUSD0  Aave interest bearing STETH                 1.522178e+091   Aave interest bearing WETH                 1.221299e+092   Aave interest bearing USDC                 8.140547e+083   Aave interest bearing WBTC                 6.615692e+084   Aave interest bearing USDT                 3.734017e+08```&lt;!-- end simple-example --&gt;## About UsPlaygrounds Analytics is a data solutions company providing serverless on-chain data infrastructures and services for data teams, analysts, and engineers. Checkout us out [here](https://playgrounds.network/) to learn more!&lt;!-- TODO: Move this to github pages docs --&gt;&lt;!-- # Dash and Plotly wrappersSubgrounds provides wrappers for Plotly objects and Dash components to facilitate visualization of data from The Graph.Plotly wrappers can be found in the `subgrounds.plotly_wrappers` submodule. The wrappers include a `Figure` wrapper as well as wrappers for most Plotly traces (see https://plotly.com/python/reference/). All Plotly trace wrappers accept the same arguments as their underlying Plotly trace with the notable difference being that Subgrounds `FieldPath` objects can be used as arguments wherever one would usually provide data to the traces.```pythonfrom subgrounds.plotly_wrappers import Bar, Figurefrom subgrounds.dash_wrappers import Graphborrows = aave_v2.Query.borrows(  orderBy=aave_v2.Borrow.timestamp,  orderDirection='desc',  first=100)repays = aave_v2.Query.repays(  orderBy=aave_v2.Repay.timestamp,  orderDirection='desc',  first=100)# Dashboardapp = dash.Dash(__name__)app.layout = html.Div(  html.Div([    html.H4('Entities'),    html.Div([      # Subgrounds Graph Dash component      Graph(        # A Subgrounds Plotly figure         Figure(          subgrounds=sg,          traces=[            # Subgrounds Plotly traces            Bar(x=borrows.reserve.symbol, y=borrows.amount),            Bar(x=repays.reserve.symbol, y=repays.amount)          ]        )      )    ])  ]))``` --&gt;&lt;!-- Generates the following Dash dashboard (at time of writing):![Alt text](https://raw.githubusercontent.com/Protean-Labs/subgrounds/main/img/bar-chart-example.png) --&gt;&lt;!-- # Examples and resourcesSee the `examples/` directory for an evergrowing list of examples. --&gt;## AcknowledgmentsThis software project would not be possible without the support of The Graph Foundation. You can learn more about The Graph and its mission [here](https://thegraph.com/).&lt;!-- TODO: Move this to github pages docs --&gt;&lt;!-- # Notes## Non-subgraph GraphQL APIsAlthough Subgrounds has been developed with subgraph APIs in mind, most features will also work with any GraphQL API. However, Subgrounds has not been tested with non-subgraph GraphQL APIs and some features will definitely break if the non-subgraph APIs do not follow the same conventions as subgraph APIs (e.g.: automatic pagination relies on each entity having a unique `id` field).It is nonetheless possible to use Subgrounds with non-subgraph GraphQL APIs by using `load_api` instead of `load_subgraph`. This will bypass Subgrounds automatic pagination feature and pagination will therefore have to be done manually. Below is an example of using Subgrounds with the snapshot GraphQL API.```python&gt;&gt;&gt; from datetime import datetime&gt;&gt;&gt; from subgrounds.subgrounds import Subgrounds&gt;&gt;&gt; from subgrounds.subgraph import SyntheticField&gt;&gt;&gt; sg = Subgrounds()&gt;&gt;&gt; snapshot = sg.load_api('https://hub.snapshot.org/graphql')&gt;&gt;&gt; snapshot.Proposal.datetime = SyntheticField(...   lambda timestamp: str(datetime.fromtimestamp(timestamp)),...   SyntheticField.STRING,...   snapshot.Proposal.end,... )&gt;&gt;&gt; proposals = snapshot.Query.proposals(...   orderBy='created',...   orderDirection='desc',...   first=100,...   where=[...     snapshot.Proposal.space == 'olympusdao.eth',...     snapshot.Proposal.state == 'closed'...   ]... )&gt;&gt;&gt; sg.query_df([...   proposals.datetime,...   proposals.title,...   proposals.votes,... ])     proposals_datetime                                    proposals_title  proposals_votes0   2022-03-25 15:33:00  OIP-87: BeraChain Investment + Strategic Partn...              1841   2022-03-25 12:00:00                 OIP-86: Uniswap Migration Proposal              1462   2022-03-25 13:12:00                    TAP 8 - Yearn Finance Whitelist              1373   2022-03-22 15:10:10                      OIP-85: Emissions Adjustments              1674   2022-03-13 20:17:26                  TAP 7 - Anchor Protocol Whitelist              141..                  ...                                                ...              ...95  2021-11-20 23:00:00                 OlympusDAO Add ETH to the Treasury               5296  2022-01-31 12:00:00                            Add BTC to the Treasury              23297  2021-11-29 23:00:00   OlympusDAO OlympusDAO Launch OHM on POLYGON c...              23498  2021-11-29 23:00:00                 OlympusDAO Launch OHM on BSC chain               9299  2021-11-20 23:00:00  Suggestions to add more video operation guidan...               53[100 rows x 3 columns]```## GraphQL AliasesThe use of the alias `xf608864358427cfb` in the query string is to prevent conflict when merging fieldpaths that select the same fields with different arguments. For example, in the following code, the `borrows` query field is selected twice with different arguments:```python&gt;&gt;&gt; latest_borrows = aave_v2.Query.borrows(...  orderBy=aave_v2.Borrow.timestamp,...  orderDirection='desc',...  first=100...)&gt;&gt;&gt; largest_borrows = aave_v2.Query.borrows(...  orderBy=aave_v2.Borrow.amount,...  orderDirection='desc',...  first=100...)&gt;&gt;&gt; req = sg.mk_request([...   latest_borrows.reserve.symbol,...   latest_borrows.amount,...   largest_borrows.reserve.symbol,...   largest_borrows.amount,... ])&gt;&gt;&gt; print(req.graphql)query {  x8b3edf3dc6501837: borrows(first: 100, orderBy: amount, orderDirection: desc) {    reserve {      symbol    }    amount  }  xf608864358427cfb: borrows(first: 100, orderBy: timestamp, orderDirection: desc) {    reserve {      symbol    }    amount  }}``` --&gt;</longdescription>
</pkgmetadata>