<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============================================Serpyco: a serializer for python dataclasses============================================What is Serpyco ?-----------------Serpyco is a serialization library for `Python 3.6+ dataclasses &lt;https://docs.python.org/3/library/dataclasses.html&gt;`_ that works just by defining your dataclasses:.. code-block:: python    import dataclasses    import typing    import serpyco    @dataclasses.dataclass    class Example(object):        name: str        num: int        tags: typing.List[str]    serializer = serpyco.Serializer(Example)    result = serializer.dump(Example(name=&quot;foo&quot;, num=2, tags=[&quot;hello&quot;, &quot;world&quot;]))    print(result)    {'name': 'foo', 'num': 2, 'tags': ['hello', 'world']}Serpyco works by analysing the dataclass fields and can recognize many types : `List`, `Set`, `Tuple`, `Optional`, `Union`... You can also embed other dataclasses in a definition.The main use-case for Serpyco is to serialize objects for an API, but it can be helpful whenever you need to transform objects to/from builtin Python types.Features--------- Serialization and unserialization of dataclasses- Validation of input/output data- Very fast- Extensible through custom encodersInstalling----------Serpyco is best installed via pip:.. code-block:: shell    pip install serpycoIt has only 3 (4 with python 3.6 dataclasses backport) dependencies:- rapid-json: used for data validation and fast JSON dump/load- python-dateutil: used for serializing datetime objects- typing_inspect: used to inspect types as needed to create serializersDocumentation-------------- `Documentation &lt;https://sgrignard.gitlab.io/serpyco/docs&gt;`_- `API Reference &lt;https://sgrignard.gitlab.io/serpyco/docs/api.html&gt;`_Contributing------------Serpyco is written using `Python &lt;https://www.python.org&gt;`_ and `Cython &lt;https://www.cython.org&gt;`_ for parts needing speed.- `Issue tracker &lt;https://gitlab.com/sgrignard/serpyco/issues&gt;`_- `Source code &lt;https://gitlab.com/sgrignard/serpyco&gt;`_</longdescription>
</pkgmetadata>