<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># itypes[![Build Status](https://travis-ci.org/PavanTatikonda/itypes.svg?branch=master)](https://travis-ci.org/PavanTatikonda/itypes)Basic immutable container types for Python.A simple implementation that's designed for simplicity over performance.Use these in circumstances where it may result in more comprehensible code,or when you want to create custom types with restricted, immutable interfaces.For an alternative implementation designed for performance,please see [pyrsistent](https://github.com/tobgu/pyrsistent).### InstallationInstall using `pip`:    pip install itypes### Instantiating dictionaries and lists.    &gt;&gt;&gt; import itypes    &gt;&gt;&gt; d = itypes.Dict({'a': 1, 'b': 2, 'c': 3})    &gt;&gt;&gt; l = itypes.List(['a', 'b', 'c'])### On instantiation, nested types are coerced to immutables.    &gt;&gt;&gt; d = itypes.Dict({'a': 123, 'b': ['a', 'b', 'c']})    &gt;&gt;&gt; d['b']    List(['a', 'b', 'c'])### Assignments and deletions return new copies.Methods: `set(key, value)`, `delete(key)`    &gt;&gt;&gt; d2 = d.set('c', 456)    &gt;&gt;&gt; d2    Dict({'a': 123, 'b': ['a', 'b', 'c'], 'c': 456})    &gt;&gt;&gt; d3 = d2.delete('a')    &gt;&gt;&gt; d3    Dict({'b': ['a', 'b', 'c'], 'c': 456})### Standard assignments and deletions fail.    &gt;&gt;&gt; d['z'] = 123    TypeError: 'Dict' object doesn't support item assignment    &gt;&gt;&gt; del(d['c'])    TypeError: 'Dict' object doesn't support item deletion### Nested lookups.Method: `get_in(keys, default=None)`    &gt;&gt;&gt; d['b'][-1]    'c'    &gt;&gt;&gt; d['b'][5]    IndexError: list index out of range    &gt;&gt;&gt; d.get_in(['b', -1])    'c'    &gt;&gt;&gt; d.get_in(['b', 5])    None### Nested assignments and deletions.Methods: `set_in(keys, value)`, `delete_in(keys)`    &gt;&gt;&gt; d2 = d.set_in(['b', 1], 'xxx')    &gt;&gt;&gt; d2    Dict({'a': 123, 'b': ['a', 'xxx', 'c']})    &gt;&gt;&gt; d3 = d2.delete_in(['b', 0])    &gt;&gt;&gt; d3    Dict({'a': 123, 'b': ['xxx', 'c']})### Equality works against standard types.    &gt;&gt;&gt; d = itypes.Dict({'a': 1, 'b': 2, 'c': 3})    &gt;&gt;&gt; d == {'a': 1, 'b': 2, 'c': 3}    True### Objects are hashable.    &gt;&gt;&gt; hash(d)    277752239### Shortcuts for switching between mutable and immutable types.Functions: `to_mutable(instance)`, `to_immutable(value)`    &gt;&gt;&gt; value = itypes.to_mutable(d)    &gt;&gt;&gt; value    {'a': 123, 'b': ['a', 'b', 'c']}    &gt;&gt;&gt; itypes.to_immutable(value)    Dict({'a': 123, 'b': ['a', 'b', 'c']})### Subclassing.Only private attribute names may be set on instances. Use `@property` for attribute access.Define a `.clone(self, data)` method if objects have additional state.Example:    class Configuration(itypes.Dict):        def __init__(self, title, *args, **kwargs):            self._title = title            super(Configuration, self).__init__(*args, **kwargs)        @property        def title(self):            return self._title        def clone(self, data):            return Configuration(self._title, data)Using the custom class:    &gt;&gt;&gt; config = Configuration('worker-process', {'hostname': 'example.com', 'dynos': 4})    &gt;&gt;&gt; config.title    'worker-process'    &gt;&gt;&gt; new = config.set('dynos', 2)    &gt;&gt;&gt; new    Configuration({'dynos': 2, 'hostname': 'example.com'})    &gt;&gt;&gt; new.title    'worker-process'### Custom immutable objects.Subclass `itypes.Object` for an object that prevents setting public attributes.    &gt;&gt;&gt; class Custom(itypes.Object):    ...     passOnly private attribute names may be set on instances. Use `@property` for attribute access.    &gt;&gt;&gt; class Document(itypes.Object):    ... def __init__(self, title, content):    ...     self._title = title    ...     self._content = title    ... @property    ... def title(self):    ...     return self._title    ... @property    ... def content(self):    ...     return self._contentUsing immutable objects:    &gt;&gt;&gt; doc = Document(title='Immutability', content='For simplicity')    &gt;&gt;&gt; doc.title    'Immutability'    &gt;&gt;&gt; doc.title = 'Changed'    TypeError: 'Document' object doesn't support property assignment.</longdescription>
</pkgmetadata>