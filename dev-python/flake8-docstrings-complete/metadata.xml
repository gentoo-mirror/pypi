<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># flake8-docstrings-completeLinter that checks docstrings of functions, methods and classes. It should beused in conjunction with `pydocstyle` (or `flake8-docstrings`) as the linterassumes that the docstrings already pass `pydocstyle` checks. This[blog post](https://jdkandersson.com/2023/01/07/writing-great-docstrings-in-python/)discusses how to write great docstrings and the motivation for this linter!## Getting Started```shellpython -m venv venvsource ./venv/bin/activatepip install flake8 flake8-docstrings flake8-docstrings-completeflake8 source.py```On the following code where the `foo` function has the `bar` and `baz`arguments where the `baz` argument is missing from the `Args` section in thedocstring:```Python# source.pydef foo(bar, baz):    &quot;&quot;&quot;Perform foo action on bar.    Args:        bar: The value to perform the foo action on.    &quot;&quot;&quot;```This will produce warnings such as:```shellflake8 test_source.pysource.py:2:14: DCO023 &quot;baz&quot; argument should be described in the docstring, more information: https://github.com/jdkandersson/flake8-docstrings-complete#fix-dco023```This can be resolved by adding the `baz` argument to the `Args` section:```Python# source.pydef foo(bar, baz):    &quot;&quot;&quot;Perform foo action on bar.    Args:        bar: The value to perform the foo action on.        baz: The modifier to the foo action.    &quot;&quot;&quot;````flake8-docstrings-complete` adds the following checks to complement`pydocstyle`:1. If a function/ method has arguments, that the arguments section is included.2. If a function/ method has arguments, that all function/ method arguments are   in the argument section.3. If an arguments section is in the function/ method docstring, the argument   section contains no arguments the function/ method doesn't have.4. Function/ method arguments are only documented once.5. If a function/ method has a return statement with a value, the return value   section is included.6. If a function/ method has a yield statement with a value, the yield value   section is included.7. If a function/ method raises an exception, the raises section is included   with a description for each exception that is raised.8. Each raised exception is only described once.9. If a class has public attributes, that the attributes section is included.10. If a class has public attributes, that all public attributes are in the   attributes section.11. If an attributes section is in the class docstring, the attributes section   contains no attributes the class doesn't have.12. Class attributes are only documented once.13. Any of the sections being checked are not present multiple times.Note:- `self` and `cls` are not counted as arguments.- `test_.*` methods are skipped in `test_.*\.py` files (function and file names  are configurable).- functions with a `@fixture` et al dectorator in `conftest.py` and  `test_.*\.py` files are skipped (function and fixture file names are  configurable)## ConfigurationThe plugin adds the following configurations to `flake8`:- `--docstrings-complete-test-filename-pattern`: The filename pattern for test  files. Defaults to `test_.*\.py`.- `--docstrings-complete-test-function-pattern`: The function name pattern for  test functions. Defaults to `test_.*`.- `--docstrings-complete-fixture-filename-pattern`: The filename pattern for  fixture files. Defaults to `conftest\.py`.- `--docstrings-complete-fixture-decorator-pattern`: The decorator name pattern  for fixture functions. Defaults to `(^|\.)fixture$`.## RulesA few rules have been defined to allow for selective suppression:- `DCO010`: docstring missing on a function/ method/ class.- `DCO020`: function/ method has one or more arguments and the docstring does  not have an arguments section.- `DCO021`: function/ method with no arguments and the docstring has an  arguments section.- `DCO022`: function/ method with one or more arguments and the docstring has  multiple arguments sections.- `DCO023`: function/ method has one or more arguments not described in the  docstring.- `DCO024`: function/ method has one or more arguments described in the  docstring which are not arguments of the function/ method.- `DCO025`: function/ method has one or more arguments described in the  docstring multiple times.- `DCO030`: function/ method that returns a value does not have the returns  section in the docstring.- `DCO031`: function/ method that does not return a value has the returns  section in the docstring.- `DCO032`: function/ method that returns a value and the docstring has  multiple returns sections.- `DCO040`: function/ method that yields a value does not have the yields  section in the docstring.- `DCO041`: function/ method that does not yield a value has the yields  section in the docstring.- `DCO042`: function/ method that yields a value and the docstring has  multiple yields sections.- `DCO050`: function/ method raises one or more exceptions and the docstring  does not have a raises section.- `DCO051`: function/ method that raises no exceptions and the docstring has a  raises section.- `DCO052`: function/ method that raises one or more exceptions and the  docstring has multiple raises sections.- `DCO053`: function/ method that raises one or more exceptions where one or  more of the exceptions is not described in the docstring.- `DCO054`: function/ method has one or more exceptions described in the  docstring which are not raised in the function/ method.- `DCO055`: function/ method that has a raise without an exception has an empty  raises section in the docstring.- `DCO056`: function/ method has one or more exceptions described in the  docstring multiple times.- `DCO060`: class has one or more public attributes and the docstring does not  have an attributes section.- `DCO061`: class with no attributes and the docstring has an attributes  section.- `DCO062`: class with one or more attributes and the docstring has multiple  attributes sections.- `DCO063`: class has one or more public attributes not described in the  docstring.- `DCO064`: class has one or more attributes described in the docstring which  are not attributes of the class.- `DCO065`: class has one or more attributes described in the docstring  multiple times.### Fix DCO010This linting rule is triggered by a function/ method/ class without adocstring. For example:```Pythondef foo():    passclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;        passclass FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    def foo(self):        pass```This example can be fixed by adding a docstring:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    def foo(self):        &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;```### Fix DCO020This linting rule is triggered by a function/ method that has one or morearguments with a docstring that does not have an arguments section. Forexample:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;```These examples can be fixed by adding the arguments section and describing allarguments in the arguments section:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    &quot;&quot;&quot;def foo(bar):    &quot;&quot;&quot;Perform foo action.    Arguments:        bar: the value to perform the foo action on.    &quot;&quot;&quot;def foo(bar):    &quot;&quot;&quot;Perform foo action.    Parameters:        bar: the value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.        &quot;&quot;&quot;```### Fix DCO021This linting rule is triggered by a function/ method that has no arguments witha docstring that has an arguments section. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    &quot;&quot;&quot;def foo():    &quot;&quot;&quot;Perform foo action.    Arguments:        bar: the value to perform the foo action on.    &quot;&quot;&quot;def foo():    &quot;&quot;&quot;Perform foo action.    Parameters:        bar: the value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.        &quot;&quot;&quot;```These examples can be fixed by removing the arguments section:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;```### Fix DCO022This linting rule is triggered by a function/ method that has one or morearguments and a docstring that has multiple arguments sections. For example:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    Args:        bar: the value to perform the foo action on.    &quot;&quot;&quot;def foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    Arguments:        bar: the value to perform the foo action on.    Parameters:        bar: the value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.        Args:            bar: the value to perform the foo action on.        &quot;&quot;&quot;```These examples can be fixed by removing the additional arguments sections:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    &quot;&quot;&quot;def foo(bar):    &quot;&quot;&quot;Perform foo action.    Arguments:        bar: the value to perform the foo action on.    &quot;&quot;&quot;def foo(bar):    &quot;&quot;&quot;Perform foo action.    Parameters:        bar: the value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.        &quot;&quot;&quot;```### Fix DCO023This linting rule is triggered by a function/ method that has one or morearguments where one or more of those arguments is not described in thedocstring. For example:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:    &quot;&quot;&quot;def foo(bar, baz):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:        &quot;&quot;&quot;```These examples can be fixed by adding the missing arguments to the argumentssection:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    &quot;&quot;&quot;def foo(bar, baz):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.        baz: the modifier to the foo action.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.        &quot;&quot;&quot;```### Fix DCO024This linting rule is triggered by a function/ method that has one or morearguments and a docstring that describes one or more arguments where on or moreof the described arguments are not arguments of the function/ method. Forexample:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.        baz: the modifier to the foo action.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.            baz: the modifier to the foo action.        &quot;&quot;&quot;```These examples can be fixed by removing the arguments the function/ methoddoesn't have from the docstring:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.        &quot;&quot;&quot;```### Fix DCO025This linting rule is triggered by a function/ method that has one or morearguments and a docstring that describes one or more arguments where on or moreof the described arguments are described multiple times. For example:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.        bar: the value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.            bar: the value to perform the foo action on.        &quot;&quot;&quot;```These examples can be fixed by removing the duplicate arguments from the docstring:```Pythondef foo(bar):    &quot;&quot;&quot;Perform foo action.    Args:        bar: the value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    def foo(self, bar):        &quot;&quot;&quot;Perform foo action.        Args:            bar: the value to perform the foo action on.        &quot;&quot;&quot;```### Fix DCO030This linting rule is triggered by a function/ method that has at least onereturn statement with a value and does not have a returns section in thedocstring. For example:```Pythondef foo():    &quot;&quot;&quot;Return bar.&quot;&quot;&quot;    return &quot;bar&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Return bar.&quot;&quot;&quot;        return &quot;bar&quot;```These examples can be fixed by adding the returns section:```Pythondef foo():    &quot;&quot;&quot;Return bar.    Return:        bar.    &quot;&quot;&quot;    return &quot;bar&quot;def foo():    &quot;&quot;&quot;Return bar.    Returns:        bar.    &quot;&quot;&quot;    return &quot;bar&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Return bar.        Returns:            bar.        &quot;&quot;&quot;        return &quot;bar&quot;```### Fix DCO031This linting rule is triggered by a function/ method that has no returnstatement with a value and has a returns section in thedocstring. For example:```Pythondef foo():    &quot;&quot;&quot;Return bar.    Returns:        bar.    &quot;&quot;&quot;    passclass FooClass:    def foo(self):        &quot;&quot;&quot;Return bar.        Returns:            bar.        &quot;&quot;&quot;        pass```These examples can be fixed by removing the returns section:```Pythondef foo():    &quot;&quot;&quot;Take foo action.&quot;&quot;&quot;    passclass FooClass:    def foo(self):        &quot;&quot;&quot;Take foo action.&quot;&quot;&quot;        pass```### Fix DCO032This linting rule is triggered by a function/ method that returns a value andhas a docstring that has multiple returns sections. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Returns:        bar.    Returns:        bar.    &quot;&quot;&quot;    return &quot;bar&quot;def foo():    &quot;&quot;&quot;Perform foo action.    Returns:        bar.    Return:        bar.    &quot;&quot;&quot;    return &quot;bar&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Returns:            bar.        Returns:            bar.        &quot;&quot;&quot;        return &quot;bar&quot;```These examples can be fixed by removing the additional returns sections:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Returns:        bar.    &quot;&quot;&quot;    return &quot;bar&quot;def foo():    &quot;&quot;&quot;Perform foo action.    Returns:        bar.    &quot;&quot;&quot;    return &quot;bar&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Returns:            bar.        &quot;&quot;&quot;        return &quot;bar&quot;```### Fix DCO040This linting rule is triggered by a function/ method that has at least oneyield statement with a value or a yield from statement and does not have ayields section in the docstring. For example:```Pythondef foo():    &quot;&quot;&quot;Yield bar.&quot;&quot;&quot;    yield &quot;bar&quot;def foo():    &quot;&quot;&quot;Yield bar.&quot;&quot;&quot;    yield from (&quot;bar&quot;,)class FooClass:    def foo(self):        &quot;&quot;&quot;Yield bar.&quot;&quot;&quot;        yield &quot;bar&quot;```These examples can be fixed by adding the yields section:```Pythondef foo():    &quot;&quot;&quot;Yield bar.    Yield:        bar.    &quot;&quot;&quot;    yield &quot;bar&quot;def foo():    &quot;&quot;&quot;Yield bar.    Yields:        bar.    &quot;&quot;&quot;    yield &quot;bar&quot;def foo():    &quot;&quot;&quot;Yield bar.    Yields:        bar.    &quot;&quot;&quot;    yield from (&quot;bar&quot;,)class FooClass:    def foo(self):        &quot;&quot;&quot;Yield bar.        Yields:            bar.        &quot;&quot;&quot;        yield &quot;bar&quot;```### Fix DCO041This linting rule is triggered by a function/ method that has no yieldstatement with a value nor a yield from statement and has a yields sectionin the docstring. For example:```Pythondef foo():    &quot;&quot;&quot;Yield bar.    Yields:        bar.    &quot;&quot;&quot;    passclass FooClass:    def foo(self):        &quot;&quot;&quot;Yield bar.        Yields:            bar.        &quot;&quot;&quot;        pass```These examples can be fixed by:```Pythondef foo():    &quot;&quot;&quot;Take foo action.&quot;&quot;&quot;    passclass FooClass:    def foo(self):        &quot;&quot;&quot;Take foo action.&quot;&quot;&quot;        pass```### Fix DCO042This linting rule is triggered by a function/ method that yields a value andhas a docstring that has multiple yields sections. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Yields:        bar.    Yields:        bar.    &quot;&quot;&quot;    yield &quot;bar&quot;def foo():    &quot;&quot;&quot;Perform foo action.    Yields:        bar.    Yields:        bar.    &quot;&quot;&quot;    yield from (&quot;bar&quot;,)def foo():    &quot;&quot;&quot;Perform foo action.    Yields:        bar.    Yield:        bar.    &quot;&quot;&quot;    yield &quot;bar&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Yields:            bar.        Yields:            bar.        &quot;&quot;&quot;        yield &quot;bar&quot;```These examples can be fixed by removing the additional yields sections:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Yields:        bar.    &quot;&quot;&quot;    yield &quot;bar&quot;def foo():    &quot;&quot;&quot;Perform foo action.    Yields:        bar.    &quot;&quot;&quot;    yield from (&quot;bar&quot;,)def foo():    &quot;&quot;&quot;Perform foo action.    Yields:        bar.    &quot;&quot;&quot;    yield &quot;bar&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Yields:            bar.        &quot;&quot;&quot;        yield &quot;bar&quot;```### Fix DCO050This linting rule is triggered by a function/ method that raises one or moreexceptions and a docstring that does not have a raises section. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    raise BarErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;        raise BarError```These examples can be fixed by adding the raises section and describing allraised exceptions in it:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrordef foo():    &quot;&quot;&quot;Perform foo action.    Raise:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;        raise BarError```### Fix DCO051This linting rule is triggered by a function/ method that raises no exceptionswith a docstring that has a raises section. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;def foo():    &quot;&quot;&quot;Perform foo action.    Raise:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;```These examples can be fixed by removing the raises section:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;class FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;```### Fix DCO052This linting rule is triggered by a function/ method that raises one or moreexceptions with a docstring that has multiple raises sections. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrordef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    Raise:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.        Raises:            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;        raise BarError```These examples can be fixed by removing the additional raises sections:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrordef foo():    &quot;&quot;&quot;Perform foo action.    Raise:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;        raise BarError```### Fix DCO053This linting rule is triggered by a function/ method that raises one or moreexceptions where one or more of those exceptions is not described in thedocstring. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    raise BarErrordef foo(bar, baz):    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarError    raise BazErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;        raise BarError```These examples can be fixed by describing the additional exceptions in thedocstring:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrordef foo(bar, baz):    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.        BazError: the alternate value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarError    raise BazErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;        raise BarError```### Fix DCO054This linting rule is triggered by a function/ method that raises one or moreexceptions and a docstring that describes one or more exceptions where on ormore of the described exceptions are not raised by the function/ method. Forexample:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.        BazError: the alternate value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.            BazError: the alternate value to perform the foo action on was wrong.        &quot;&quot;&quot;        raise BarError```These examples can be fixed by removing the exception that is not raised fromthe docstring:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;        raise BarError```### Fix DCO055This linting rule is triggered by a function/ method that has a `raise`statement without an exception (typically re-raising exceptions) and the raisessection is not included or is empty. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    try:        bar()    except BarError:        raisedef foo():    &quot;&quot;&quot;Perform foo action.    Raises:    &quot;&quot;&quot;    try:        bar()    except BarError:        raiseclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;        try:            bar()        except BarError:            raise```These examples can be fixed by describing at least one exception in the raisessection:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    try:        bar()    except BarError:        raisedef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    try:        bar()    except BarError:        raiseclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;        try:            bar()        except BarError:            raise```### Fix DCO056This linting rule is triggered by a function/ method that raises one or moreexceptions and a docstring that describes one or more exceptions where on ormore of the described exceptions are described multiple times. For example:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;        raise BarError```These examples can be fixed by removing the duplicate descriptions from thedocstring:```Pythondef foo():    &quot;&quot;&quot;Perform foo action.    Raises:        BarError: the value to perform the foo action on was wrong.    &quot;&quot;&quot;    raise BarErrorclass FooClass:    def foo(self):        &quot;&quot;&quot;Perform foo action.        Raises:            BarError: the value to perform the foo action on was wrong.        &quot;&quot;&quot;        raise BarError```### Fix DCO060This linting rule is triggered by a class that has one or more publicattributes with a docstring that does not have an attributes section. Forexample:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    def __init__(self):        self.bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    def bar(self):        self.baz = &quot;baz&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;    baz = &quot;baz&quot;```These examples can be fixed by adding the attributes section and describing allattributes in the attributes section:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attributes:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attributes:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    def __init__(self):        self.bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attributes:        baz: The value to perform the foo action on.    &quot;&quot;&quot;    def bar(self):        self.baz = &quot;baz&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.        baz: The alternate value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;    baz = &quot;baz&quot;```### Fix DCO061This linting rule is triggered by a class that has no attributes with adocstring that has an attributes section. For example:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attributes:        bar: The value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attributes:    &quot;&quot;&quot;    def __init__(self):        self._bar = &quot;bar&quot;```These examples can be fixed by removing the attributes section:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    def __init__(self):        self._bar = &quot;bar&quot;```### Fix DCO062This linting rule is triggered by a class that has one or more attributes anda docstring that has multiple attributes sections. For example:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    Attributes:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;```These examples can be fixed by removing the additional attributes sections:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attributes:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;```### Fix DCO063This linting rule is triggered by a class that has one or more publicattributes where one or more of those public attributes is not described in thedocstring. For example:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:    &quot;&quot;&quot;    @property    def bar(self):        return &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:    &quot;&quot;&quot;    @functools.cached_property    def bar(self):        return &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;    baz = &quot;baz&quot;```These examples can be fixed by adding the missing attributes to the attributessection:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attributes:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    @property    def bar(self):        return &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    @functools.cached_property    def bar(self):        return &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.        baz: The alternate value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;    baz = &quot;baz&quot;```### Fix DCO064This linting rule is triggered by a class that has one or more attributes and adocstring that describes one or more attributes where on or moreof the described attributes are not attributes of the class. For example:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        _bar: The value to perform the foo action on.    &quot;&quot;&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.        baz: The alternate value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;```These examples can be fixed by removing the attributes the class doesn't havefrom the docstring:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.&quot;&quot;&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    def __init__(self):        &quot;&quot;&quot;Construct.&quot;&quot;&quot;        self.bar = &quot;bar&quot;```### Fix DCO065This linting rule is triggered by a class that has one or more attributes and adocstring that describes one or more attributes where on or moreof the described attributes are described multiple times. For example:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.        bar: The value to perform the foo action on.    &quot;&quot;&quot;    def __init__(self):        &quot;&quot;&quot;Construct.&quot;&quot;&quot;        self.bar = &quot;bar&quot;```These examples can be fixed by removing the duplicate descriptions from thedocstring:```Pythonclass FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    bar = &quot;bar&quot;class FooClass:    &quot;&quot;&quot;Perform foo action.    Attrs:        bar: The value to perform the foo action on.    &quot;&quot;&quot;    def __init__(self):        &quot;&quot;&quot;Construct.&quot;&quot;&quot;        self.bar = &quot;bar&quot;```## Docstring ExamplesExamples of function/ method and class docstrings are:```Pythondef foo(bar):    &quot;&quot;&quot;Perform the foo actions on bar.    Args:        bar: the value to perform the foo actions on.    Returns:        bar after applying to foo action to it.    Yields:        All the foo actions that have been performed.    Raises:        FooError: an error occurred whilst performing the foo action.    &quot;&quot;&quot;class Foo:    &quot;&quot;&quot;Foo object.    Attrs:        bar: the value to perform the foo actions on.    &quot;&quot;&quot;    def __init__(self, bar):        &quot;&quot;&quot;Construct.        Args:            bar: the value to perform the foo actions on.        &quot;&quot;&quot;        self.bar = bar```## SectionsThere are several alternative names for each of the sections which are capturedcase-insensitive:- arguments: `Args`, `Arguments`, `Parameters`- return value: `Return`, `Returns`- yield value: `Yield`, `Yields`- raise: `Raises`- attributes: `Attrs`, `Attributes`Section information is extracted using the following algorithm:1. Look for a line that has zero or more whitespace characters, followed by a   section name (non-case-sensistive) followed by a colon.2. Look for any sub-sections on a line which starts with zero or more   whitespace characters followed by a word, optionally followed by whitespace   and any characters within round brackets followed by a colon.3. The section ends if any line with zero or more whitespace characters is   encountered or the end of the docstring is reached.## Future Ideas:- Check that argument, exceptions and attributes have non-empty description.- Check that arguments, exceptions and attributes have meaningful descriptions.- Check other other PEP257 conventions</longdescription>
</pkgmetadata>