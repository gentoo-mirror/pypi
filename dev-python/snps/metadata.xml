<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://raw.githubusercontent.com/apriha/snps/master/docs/images/snps_banner.png|ci| |codecov| |docs| |pypi| |python| |downloads| |black|snps====tools for reading, writing, merging, and remapping SNPs ðŸ§¬``snps`` *strives to be an easy-to-use and accessible open-source library for working withgenotype data*Features--------Input / Output``````````````- Read raw data (genotype) files from a variety of direct-to-consumer (DTC) DNA testing  sources with a `SNPs &lt;https://snps.readthedocs.io/en/stable/snps.html#snps.snps.SNPs&gt;`_  object- Read and write VCF files (e.g., convert `23andMe &lt;https://www.23andme.com&gt;`_ to VCF)- Merge raw data files from different DNA tests, identifying discrepant SNPs in the process- Read data in a variety of formats (e.g., files, bytes, compressed with `gzip` or `zip`)- Handle several variations of file types, validated via  `openSNP parsing analysis &lt;https://github.com/apriha/snps/tree/master/analysis/parse-opensnp-files&gt;`_Build / Assembly Detection and Remapping````````````````````````````````````````- Detect the build / assembly of SNPs (supports builds 36, 37, and 38)- Remap SNPs between builds / assembliesData Cleaning`````````````- Perform quality control (QC) / filter low quality SNPs based on `chip clusters &lt;https://doi.org/10.1016/j.csbj.2021.06.040&gt;`_- Fix several common issues when loading SNPs- Sort SNPs based on chromosome and position- Deduplicate RSIDs- Deduplicate alleles in the non-PAR regions of the X and Y chromosomes for males- Deduplicate alleles on MT- Assign PAR SNPs to the X or Y chromosomeAnalysis````````- Derive sex from SNPs- Detect deduced genotype / chip array and chip version based on `chip clusters &lt;https://doi.org/10.1016/j.csbj.2021.06.040&gt;`_- Predict ancestry from SNPs (when installed with `ezancestry &lt;https://github.com/arvkevi/ezancestry&gt;`_)Supported Genotype Files------------------------``snps`` supports `VCF &lt;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3137218/&gt;`_ files andgenotype files from the following DNA testing sources:- `23andMe &lt;https://www.23andme.com&gt;`_- `Ancestry &lt;https://www.ancestry.com&gt;`_- `CircleDNA &lt;https://circledna.com/&gt;`_- `CÃ³digo 46 &lt;https://codigo46.com.mx&gt;`_- `DNA.Land &lt;https://dna.land&gt;`_- `Family Tree DNA &lt;https://www.familytreedna.com&gt;`_- `Genes for Good &lt;https://genesforgood.sph.umich.edu&gt;`_- `LivingDNA &lt;https://livingdna.com&gt;`_- `Mapmygenome &lt;https://mapmygenome.in&gt;`_- `MyHeritage &lt;https://www.myheritage.com&gt;`_- `Sano Genetics &lt;https://sanogenetics.com&gt;`_- `tellmeGen &lt;https://www.tellmegen.com&gt;`_Additionally, ``snps`` can read a variety of &quot;generic&quot; CSV and TSV files.Dependencies------------``snps`` requires `Python &lt;https://www.python.org&gt;`_ 3.7.1+ and the following Pythonpackages:- `numpy &lt;http://www.numpy.org&gt;`_- `pandas &lt;http://pandas.pydata.org&gt;`_- `atomicwrites &lt;https://github.com/untitaker/python-atomicwrites&gt;`_Installation------------``snps`` is `available &lt;https://pypi.org/project/snps/&gt;`_ on the`Python Package Index &lt;https://pypi.org&gt;`_. Install ``snps`` (and its requiredPython dependencies) via ``pip``::    $ pip install snpsFor `ancestry prediction &lt;https://snps.readthedocs.io/en/stable/snps.html#snps.snps.SNPs.predict_ancestry&gt;`_capability, ``snps`` can be installed with `ezancestry &lt;https://github.com/arvkevi/ezancestry&gt;`_::    $ pip install snps[ezancestry]Examples--------Download Example Data`````````````````````First, let's setup logging to get some helpful output:&gt;&gt;&gt; import logging, sys&gt;&gt;&gt; logger = logging.getLogger()&gt;&gt;&gt; logger.setLevel(logging.INFO)&gt;&gt;&gt; logger.addHandler(logging.StreamHandler(sys.stdout))Now we're ready to download some example data from `openSNP &lt;https://opensnp.org&gt;`_:&gt;&gt;&gt; from snps.resources import Resources&gt;&gt;&gt; r = Resources()&gt;&gt;&gt; paths = r.download_example_datasets()Downloading resources/662.23andme.340.txt.gzDownloading resources/662.ftdna-illumina.341.csv.gzLoad Raw Data`````````````Load a `23andMe &lt;https://www.23andme.com&gt;`_ raw data file:&gt;&gt;&gt; from snps import SNPs&gt;&gt;&gt; s = SNPs(&quot;resources/662.23andme.340.txt.gz&quot;)&gt;&gt;&gt; s.source'23andMe'&gt;&gt;&gt; s.count991786The ``SNPs`` class accepts a path to a file or a bytes object. A ``Reader`` class attempts toinfer the data source and load the SNPs. The loaded SNPs are`normalized &lt;https://snps.readthedocs.io/en/stable/snps.html#snps.snps.SNPs.snps&gt;`_ andavailable via a ``pandas.DataFrame``:&gt;&gt;&gt; df = s.snps&gt;&gt;&gt; df.columns.valuesarray(['chrom', 'pos', 'genotype'], dtype=object)&gt;&gt;&gt; df.index.name'rsid'&gt;&gt;&gt; df.chrom.dtype.name'object'&gt;&gt;&gt; df.pos.dtype.name'uint32'&gt;&gt;&gt; df.genotype.dtype.name'object'&gt;&gt;&gt; len(df)991786``snps`` also attempts to detect the build / assembly of the data:&gt;&gt;&gt; s.build37&gt;&gt;&gt; s.build_detectedTrue&gt;&gt;&gt; s.assembly'GRCh37'Merge Raw Data Files````````````````````The dataset consists of raw data files from two different DNA testing sources - let's combinethese files. Specifically, we'll update the ``SNPs`` object with SNPs from a`Family Tree DNA &lt;https://www.familytreedna.com&gt;`_ file.&gt;&gt;&gt; merge_results = s.merge([SNPs(&quot;resources/662.ftdna-illumina.341.csv.gz&quot;)])Merging SNPs('662.ftdna-illumina.341.csv.gz')SNPs('662.ftdna-illumina.341.csv.gz') has Build 36; remapping to Build 37Downloading resources/NCBI36_GRCh37.tar.gz27 SNP positions were discrepant; keeping original positions151 SNP genotypes were discrepant; marking those as null&gt;&gt;&gt; s.source'23andMe, FTDNA'&gt;&gt;&gt; s.count1006960&gt;&gt;&gt; s.build37&gt;&gt;&gt; s.build_detectedTrueIf the SNPs being merged have a build that differs from the destination build, the SNPs to mergewill be remapped automatically. After this example merge, the build is still detected, since thebuild was detected for all ``SNPs`` objects that were merged.As the data gets added, it's compared to the existing data, and SNP position and genotypediscrepancies are identified. (The discrepancy thresholds can be tuned via parameters.) Thesediscrepant SNPs are available for inspection after the merge via properties of the ``SNPs`` object.&gt;&gt;&gt; len(s.discrepant_merge_genotypes)151Additionally, any non-called / null genotypes will be updated during the merge, if the filebeing merged has a called genotype for the SNP.Moreover, ``merge`` takes a ``chrom`` parameter - this enables merging of only SNPs associatedwith the specified chromosome (e.g., &quot;Y&quot; or &quot;MT&quot;).Finally, ``merge`` returns a list of ``dict``, where each ``dict`` has information correspondingto the results of each merge (e.g., SNPs in common).&gt;&gt;&gt; sorted(list(merge_results[0].keys()))['common_rsids', 'discrepant_genotype_rsids', 'discrepant_position_rsids', 'merged']&gt;&gt;&gt; merge_results[0][&quot;merged&quot;]True&gt;&gt;&gt; len(merge_results[0][&quot;common_rsids&quot;])692918Remap SNPs``````````Now, let's remap the merged SNPs to change the assembly / build:&gt;&gt;&gt; s.snps.loc[&quot;rs3094315&quot;].pos752566&gt;&gt;&gt; chromosomes_remapped, chromosomes_not_remapped = s.remap(38)Downloading resources/GRCh37_GRCh38.tar.gz&gt;&gt;&gt; s.build38&gt;&gt;&gt; s.assembly'GRCh38'&gt;&gt;&gt; s.snps.loc[&quot;rs3094315&quot;].pos817186SNPs can be remapped between Build 36 (``NCBI36``), Build 37 (``GRCh37``), and Build 38(``GRCh38``).Save SNPs`````````Ok, so far we've merged the SNPs from two files (ensuring the same build in the process andidentifying discrepancies along the way). Then, we remapped the SNPs to Build 38. Now, let's savethe merged and remapped dataset consisting of 1M+ SNPs to a tab-separated values (TSV) file:&gt;&gt;&gt; saved_snps = s.to_tsv(&quot;out.txt&quot;)Saving output/out.txt&gt;&gt;&gt; print(saved_snps)output/out.txtMoreover, let's get the reference sequences for this assembly and save the SNPs as a VCF file:&gt;&gt;&gt; saved_snps = s.to_vcf(&quot;out.vcf&quot;)Downloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.1.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.2.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.3.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.4.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.5.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.6.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.7.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.8.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.9.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.10.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.11.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.12.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.13.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.14.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.15.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.16.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.17.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.18.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.19.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.20.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.21.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.22.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.X.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.Y.fa.gzDownloading resources/fasta/GRCh38/Homo_sapiens.GRCh38.dna.chromosome.MT.fa.gzSaving output/out.vcf1 SNP positions were found to be discrepant when saving VCFWhen saving a VCF, if any SNPs have positions outside of the reference sequence, they are markedas discrepant and are available via a property of the ``SNPs`` object.All `output files &lt;https://snps.readthedocs.io/en/stable/output_files.html&gt;`_ are saved to theoutput directory.Documentation-------------Documentation is available `here &lt;https://snps.readthedocs.io/&gt;`_.Acknowledgements----------------Thanks to Mike Agostino, Padma Reddy, Kevin Arvai, `openSNP &lt;https://opensnp.org&gt;`_,`Open Humans &lt;https://www.openhumans.org&gt;`_, and `Sano Genetics &lt;https://sanogenetics.com&gt;`_... https://github.com/rtfd/readthedocs.org/blob/master/docs/badges.rst.. |ci| image:: https://github.com/apriha/snps/actions/workflows/ci.yml/badge.svg?branch=master   :target: https://github.com/apriha/snps/actions/workflows/ci.yml.. |codecov| image:: https://codecov.io/gh/apriha/snps/branch/master/graph/badge.svg   :target: https://codecov.io/gh/apriha/snps.. |docs| image:: https://readthedocs.org/projects/snps/badge/?version=stable   :target: https://snps.readthedocs.io/.. |pypi| image:: https://img.shields.io/pypi/v/snps.svg   :target: https://pypi.python.org/pypi/snps.. |python| image:: https://img.shields.io/pypi/pyversions/snps.svg   :target: https://www.python.org.. |downloads| image:: https://pepy.tech/badge/snps   :target: https://pepy.tech/project/snps.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/psf/black</longdescription>
</pkgmetadata>