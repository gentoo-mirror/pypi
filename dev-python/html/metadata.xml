<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Simple, elegant HTML, XHTML and XML generation.Constructing your HTML----------------------To construct HTML start with an instance of ``html.HTML()``. Addtags by accessing the tag's attribute on that object. For example:&gt;&gt;&gt; from html import HTML&gt;&gt;&gt; h = HTML()&gt;&gt;&gt; h.p('Hello, world!')&gt;&gt;&gt; print h                          # or print(h) in python 3+&lt;p&gt;Hello, world!&lt;/p&gt;You may supply a tag name and some text contents when creating a HTMLinstance:&gt;&gt;&gt; h = HTML('html', 'text')&gt;&gt;&gt; print h&lt;html&gt;text&lt;/html&gt;You may also append text content later using the tag's ``.text()`` methodor using augmented addition ``+=``. Any HTML-specific characters (``&lt;&gt;&amp;&quot;``)in the text will be escaped for HTML safety as appropriate unless``escape=False`` is passed. Each of the following examples uses a new``HTML`` instance:&gt;&gt;&gt; p = h.p('hello world!\n')&gt;&gt;&gt; p.br&gt;&gt;&gt; p.text('more &amp;rarr; text', escape=False)&gt;&gt;&gt; p += ' ... augmented'&gt;&gt;&gt; h.p&gt;&gt;&gt; print h&lt;p&gt;hello, world!&lt;br&gt;more &amp;rarr; text ... augmented&lt;/p&gt;&lt;p&gt;Note also that the top-level ``HTML`` object adds newlines between tags bydefault. Finally in the above you'll see an empty paragraph tag - tags withno contents get no closing tag.If the tag should have sub-tags you have two options. You may either addthe sub-tags directly on the tag:&gt;&gt;&gt; l = h.ol&gt;&gt;&gt; l.li('item 1')&gt;&gt;&gt; l.li.b('item 2 &gt; 1')&gt;&gt;&gt; print h&lt;ol&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;&lt;b&gt;item 2 &amp;gt; 1&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;Note that the default behavior with lists (and tables) is to add newlinesbetween sub-tags to generate a nicer output. You can also see in thatexample the chaining of tags in ``l.li.b``.Tag attributes may be passed in as well:&gt;&gt;&gt; t = h.table(border='1')&gt;&gt;&gt; for i in range(2):&gt;&gt;&gt;   r = t.tr&gt;&gt;&gt;   r.td('column 1')&gt;&gt;&gt;   r.td('column 2')&gt;&gt;&gt; print t&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;column 1&lt;/td&gt;&lt;td&gt;column 2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;column 1&lt;/td&gt;&lt;td&gt;column 2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;A variation on the above is to use a tag as a context variable. Thefollowing is functionally identical to the first list construction butwith a slightly different sytax emphasising the HTML structure:&gt;&gt;&gt; with h.ol as l:...   l.li('item 1')...   l.li.b('item 2 &gt; 1')You may turn off/on adding newlines by passing ``newlines=False`` or``True`` to the tag (or ``HTML`` instance) at creation time:&gt;&gt;&gt; l = h.ol(newlines=False)&gt;&gt;&gt; l.li('item 1')&gt;&gt;&gt; l.li('item 2')&gt;&gt;&gt; print h&lt;ol&gt;&lt;li&gt;item 1&lt;/li&gt;&lt;li&gt;item 2&lt;/li&gt;&lt;/ol&gt;Since we can't use ``class`` as a keyword, the library recognises ``klass``as a substitute:&gt;&gt;&gt; print h.p(content, klass=&quot;styled&quot;)&lt;p class=&quot;styled&quot;&gt;content&lt;/p&gt;Unicode-------``HTML`` will work with either regular strings **or** unicode strings, butnot **both at the same time**.Obtain the final unicode string by calling ``unicode()`` on the ``HTML``instance:&gt;&gt;&gt; h = HTML()&gt;&gt;&gt; h.p(u'Some Euro: €1.14')&gt;&gt;&gt; unicode(h)u'&lt;p&gt;Some Euro: €1.14&lt;/p&gt;'If (under Python 2.x) you add non-unicode strings or attempt to get theresultant HTML source through any means other than ``unicode()`` then youwill most likely get one of the following errors raised:UnicodeDecodeError   Probably means you've added non-unicode strings to your HTML.UnicodeEncodeError   Probably means you're trying to get the resultant HTML using ``print``   or ``str()`` (or ``%s``).How generation works--------------------The HTML document is generated when the ``HTML`` instance is &quot;stringified&quot;.This could be done either by invoking ``str()`` on it, or just printing it.It may also be returned directly as the &quot;iterable content&quot; from a WSGI appfunction.You may also render any tag or sub-tag at any time by stringifying it.Tags with no contents (either text or sub-tags) will have no closing tag.There is no &quot;special list&quot; of tags that must always have closing tags, soif you need to force a closing tag you'll need to provide some content,even if it's just a single space character.Rendering doesn't affect the HTML document's state, so you can add to orotherwise manipulate the HTML after you've stringified it.Creating XHTML--------------To construct XHTML start with an instance of ``html.XHTML()`` and use itas you would an ``HTML`` instance. Empty elements will now be renderedwith the appropriate XHTML minimized tag syntax. For example:&gt;&gt;&gt; from html import XHTML&gt;&gt;&gt; h = XHTML()&gt;&gt;&gt; h.p&gt;&gt;&gt; h.br&gt;&gt;&gt; print h&lt;p&gt;&lt;/p&gt;&lt;br /&gt;Creating XML------------A slight tweak to the ``html.XHTML()`` implementation allows us to generatearbitrary XML using ``html.XML()``:&gt;&gt;&gt; from html import XML&gt;&gt;&gt; h = XML('xml')&gt;&gt;&gt; h.p&gt;&gt;&gt; h.br('hi there')&gt;&gt;&gt; print h&lt;xml&gt;&lt;p /&gt;&lt;br&gt;hi there&lt;/br&gt;&lt;/xml&gt;Tags with difficult names-------------------------If your tag name isn't a valid Python identifier name, or if it's called&quot;text&quot; or &quot;raw_text&quot; you can add your tag slightly more manually:&gt;&gt;&gt; from html import XML&gt;&gt;&gt; h = XML('xml')&gt;&gt;&gt; h += XML('some-tag', 'some text')&gt;&gt;&gt; h += XML('text', 'some text')&gt;&gt;&gt; print h&lt;xml&gt;&lt;some-tag&gt;some text&lt;/some-tag&gt;&lt;text&gt;some text&lt;/text&gt;&lt;/xml&gt;Version History (in Brief)--------------------------- 1.16 detect and raise a more useful error when some WSGI frameworks  attempt to call HTML.read(). Also added ability to add new content using  the += operator.- 1.15 fix Python 3 compatibility (unit tests)- 1.14 added plain XML support- 1.13 allow adding (X)HTML instances (tags) as new document content- 1.12 fix handling of XHTML empty tags when generating unicode  output (thanks Carsten Eggers)- 1.11 remove setuptools dependency- 1.10 support plain ol' distutils again- 1.9 added unicode support for Python 2.x- 1.8 added Python 3 compatibility- 1.7 added Python 2.5 compatibility and escape argument to tag  construction- 1.6 added .raw_text() and and WSGI compatibility- 1.5 added XHTML support- 1.3 added more documentation, more tests- 1.2 added special-case klass / class attribute- 1.1 added escaping control- 1.0 was the initial release----I would be interested to know whether this module is useful - if you use itplease indicate so at https://www.ohloh.net/p/pyhtmlThis code is copyright 2009-2011 eKit.com Inc (http://www.ekit.com/)See the end of the source file for the license of use.XHTML support was contributed by Michael Haubenwallner.</longdescription>
</pkgmetadata>