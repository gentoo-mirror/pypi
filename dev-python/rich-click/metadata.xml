<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;    &lt;picture&gt;        &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://raw.githubusercontent.com/ewels/rich-click/main/docs/images/rich-click-logo-darkmode.png&quot;&gt;        &lt;img alt=&quot;rich-click logo&quot; src=&quot;https://raw.githubusercontent.com/ewels/rich-click/main/docs/images/rich-click-logo.png&quot;&gt;    &lt;/picture&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;em&gt;Richly rendered command line interfaces in click.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;https://github.com/ewels/rich-click/workflows/Test%20Coverage/badge.svg&quot; alt=&quot;Test Coverage badge&quot;&gt;    &lt;img src=&quot;https://github.com/ewels/rich-click/workflows/Lint%20code/badge.svg&quot; alt=&quot;Lint code badge&quot;&gt;&lt;/p&gt;---**rich-click** is a shim around [click](https://click.palletsprojects.com/) that renders help output nicely using [Rich](https://github.com/Textualize/rich).- Click is a _&quot;Python package for creating beautiful command line interfaces&quot;_.- Rich is a _&quot;Python library for rich text and beautiful formatting in the terminal&quot;_.The intention of `rich-click` is to provide attractive help output fromclick, formatted with rich, with minimal customisation required.## Features- üåà Rich command-line formatting of click help and error messages- üí´ Nice styles be default, usage is simply `import rich_click as click`- üíª CLI tool to run on _other people's_ tools (prefix the command with `rich-click`)- üéÅ Group commands and options into named panels- ‚ùå Well formatted error messages- üî¢ Easily give custom sort order for options and commands- üé® Extensive customisation of styling and behaviour possible## Examples### Simple ExampleTo use rich-click in your code, replace `import click` with `import rich_click as click` in your existing click CLI:```pythonimport rich_click as click@click.command()@click.option(&quot;--count&quot;, default=1, help=&quot;Number of greetings.&quot;)@click.option(&quot;--name&quot;, prompt=&quot;Your name&quot;, help=&quot;The person to greet.&quot;)def hello(count, name):    &quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;    for _ in range(count):        click.echo(f&quot;Hello, {name}!&quot;)if __name__ == '__main__':    hello()```![`python examples/11_hello.py --help`](docs/images/hello.svg)_Screenshot from [`examples/11_hello.py`](examples/11_hello.py)_### More complex example![examples/03_groups_sorting.py](docs/images/command_groups.svg)_Screenshot from [`examples/03_groups_sorting.py`](examples/03_groups_sorting.py)_## InstallationYou can install `rich-click` from the [Python Package Index (PyPI)](https://pypi.org/project/rich-click/) with `pip` or equivalent.```bashpython -m pip install rich-click```Conda users can find `rich-click` on [conda forge](https://anaconda.org/conda-forge/rich-click).Just set up conda to use conda-forge (see [docs](https://conda-forge.org/docs/user/introduction.html#how-can-i-install-packages-from-conda-forge)) then run:```bashconda install rich-click```Users on macOS can install `rich-click` via [MacPorts](https://ports.macports.org/port/py-rich-click/).```bashsudo port install py-rich-click```Note that rich-click requires `click&gt;=7` but formatted subcommands (groups) only work with `click&gt;=8`. With v7 the output simply reverts to default click output.## Usage### Import as clickTo use `rich-click`, switch out your normal `click` import with `rich-click`, using the same namespace:```pythonimport rich_click as click```That's it! ‚ú® Then continue to use `click` as you would normally.&gt; See [`examples/01_simple.py`](examples/01_simple.py) for an example.The intention is to maintain most / all of the normal click functionality and arguments.If you spot something that breaks or is missing once you start using the plugin, please create an issue about it.### DeclarativeIf you prefer, you can `RichGroup` or `RichCommand` with the `cls` argument in your click usage instead.This means that you can continue to use the unmodified `click` package in parallel.&gt; See [`examples/02_declarative.py`](examples/02_declarative.py) for an example.### Command-line usage`rich-click` comes with a CLI tool that allows you to format the click help output from _any_ package.As long as that tool is using click and isn't already passing custom `cls` objects, it should work.However, please consider it an experimental feature at this point.To use, simply prefix to your normal command.For example, to get richified click help text from a package called `awesometool`, you could run:```console$ rich-click awesometool --helpUsage: awesometool [OPTIONS]..more richified output below..```### PatchingIn some situations, you might be registering a command from another Click CLI that does not use Rich-Click:```pythonimport rich_click as clickfrom some_library import another_cli@click.group(&quot;my-cli&quot;)def cli():    pass# `another_cli` will NOT have Rich-Click markup. :(cli.add_command(another_cli)```In this situation, `another_cli` retains its original behavior. In order to make `another_cli` work with Rich-Click, you need to patch `click` before you import `another_cli`. You can patch Click with `rich_click.cli.patch` like this:```pythonimport rich_click as clickfrom rich_click.cli import patchpatch()from some_library import another_cli  # noqa: E402@click.group(&quot;my-cli&quot;)def cli():    pass# `another_cli` will have Rich-Click markup. :)cli.add_command(another_cli)```## CustomisationThere are a large number of customisation options in rich-click.These can be modified by changing variables in the `click.rich_click` namespace.Note that most normal click options should still work, such as `show_default=True`, `required=True` and `hidden=True`.&gt; Note: All images below are auto-generated using another side-project of mine: [rich-codex](https://github.com/ewels/rich-codex). Pretty cool!### Using Rich markupIn order to be as widely compatible as possible with a simple import, rich-click does _not_ parse rich formatting markup (eg. `[red]`) by default. You need to opt-in to this behaviour.To use rich markup in your help texts, add the following:```pythonclick.rich_click.USE_RICH_MARKUP = True```Or alternatively, with the `rich_config` and `RichHelpConfiguration`:```python@click.command()@click.rich_config(help_config=click.RichHelpConfiguration(use_rich_markup=True))def cli():    ...```Remember that you'll need to escape any regular square brackets using a back slash in your help texts,for example: `[dim]\[my-default: foo][\]`![`python examples/04_rich_markup.py --help`](docs/images/rich_markup.svg &quot;Rich markup example&quot;)&gt; See [`examples/04_rich_markup.py`](examples/04_rich_markup.py) for an example.### Using MarkdownIf you prefer, you can use Markdown text.You must choose either Markdown or rich markup. If you specify both, Markdown takes preference.```pythonclick.rich_click.USE_MARKDOWN = True```Or alternatively, with the `RichHelpConfiguration`:```python@click.command()@click.rich_config(help_config=click.RichHelpConfiguration(use_markdown=True))def cli():    ...```![`python examples/05_markdown.py --help`](docs/images/markdown.svg &quot;Markdown example&quot;)&gt; See [`examples/05_markdown.py`](examples/05_markdown.py) for an example.### Positional argumentsThe default click behaviour is to only show positional arguments in the top usage string,and not in the list below with the options.If you prefer, you can tell rich-click to show arguments with `SHOW_ARGUMENTS`.By default, they will get their own panel but you can tell rich-click to bundle them together with `GROUP_ARGUMENTS_OPTIONS`:```pythonclick.rich_click.SHOW_ARGUMENTS = Trueclick.rich_click.GROUP_ARGUMENTS_OPTIONS = True```Or alternatively, with the `RichHelpConfiguration`:```pythonhelp_config = click.RichHelpConfiguration(    show_arguments=True,    group_arguments_options=True)@click.command()@click.rich_config(help_config=help_config)def cli():    ...```![`python examples/06_arguments.py --help`](docs/images/arguments.svg &quot;Positional arguments example&quot;)&gt; See [`examples/06_arguments.py`](examples/06_arguments.py) for an example.### Metavars and option choicesMetavars are click's way of showing expected input types.For example, if you have an option that must be an integer, the metavar is `INTEGER`.If you have a choice, the metavar is a list of the possible values.By default, rich-click shows metavars in their own column.However, if you have a long list of choices, this column can be quite wide and result in a lot of white space:![`python examples/08_metavars_default.py --help`](docs/images/metavars_default.svg &quot;Default metavar display&quot;)It may look better to show metavars appended to the help text, instead of in their own column.For this, use the following:```pythonclick.rich_click.SHOW_METAVARS_COLUMN = Falseclick.rich_click.APPEND_METAVARS_HELP = True``````pythonhelp_config = click.RichHelpConfiguration(    show_metavars_column=False,    append_metavars_help=True)@click.command()@click.rich_config(help_config=help_config)def cli():    ...```![`python examples/08_metavars.py --help`](docs/images/metavars_appended.svg &quot;Appended metavar&quot;)&gt; See [`examples/08_metavars.py`](examples/08_metavars.py) for an example.### Error messagesBy default, rich-click gives some nice formatting to error messages:![`python examples/01_simple.py --hep || true`](docs/images/error.svg &quot;Error message&quot;)You can customise the _Try 'command --help' for help._ message with `ERRORS_SUGGESTION`using rich-click though, and add some text after the error with `ERRORS_EPILOGUE`.For example, from [`examples/07_custom_errors.py`](examples/07_custom_errors.py):```pythonclick.rich_click.STYLE_ERRORS_SUGGESTION = &quot;magenta italic&quot;click.rich_click.ERRORS_SUGGESTION = &quot;Try running the '--help' flag for more information.&quot;click.rich_click.ERRORS_EPILOGUE = &quot;To find out more, visit [link=https://mytool.com]https://mytool.com[/link]&quot;```![`python examples/07_custom_errors.py --hep || true`](docs/images/custom_error.svg &quot;Custom error message&quot;)&gt; See [`examples/07_custom_errors.py`](examples/07_custom_errors.py) for an example.### Help widthThe default behaviour of rich-click is to use the full width of the terminal for output.However, if you've carefully crafted your help texts for the default narrow click output, you may find that you now have a lot of whitespace at the side of the panels.To limit the maximum width of the help output, regardless of the terminal size, set `WIDTH` in characters as follows:```pythonclick.rich_click.WIDTH = 128```To still use the full width of the terminal up to a certain limit, set `MAX_WIDTH` in characters as follows:```pythonclick.rich_click.MAX_WIDTH = 96```Setting `MAX_WIDTH` overrides the effect of `WIDTH`### StylingMost aspects of rich-click formatting can be customised, from colours to alignment.For example, to print the option flags in a different colour, you can use:```pythonclick.rich_click.STYLE_OPTION = &quot;magenta&quot;```To add a blank line between rows of options, you can use:```pythonclick.rich_click.STYLE_OPTIONS_TABLE_LEADING = 1click.rich_click.STYLE_OPTIONS_TABLE_BOX = &quot;SIMPLE&quot;```You can make some really ~horrible~ _colourful_ solutions using these styles if you wish:&lt;!-- RICH-CODEXextra_env:    TERMINAL_WIDTH: 160--&gt;![`python examples/10_table_styles.py --help`](docs/images/style_tables.svg &quot;Rich markup example&quot;)&gt; See [`examples/10_table_styles.py`](examples/10_table_styles.py) for an example.See the [_Configuration options_](#configuration-options) section below for the full list of available options.## Groups and sorting`rich-click` gives functionality to list options and subcommands in groups, printed as separate panels.It accepts a list of options / commands which means you can also choose a custom sorting order.- For options (flags), set `click.rich_click.OPTION_GROUPS`- For subcommands (groups), set `click.rich_click.COMMAND_GROUPS`![`python examples/03_groups_sorting.py --help`](docs/images/command_groups.svg &quot;Command groups&quot;)When grouping subcommands into more than one group (in above example: 'Main usage' and 'Configuration') you may find that the automatically calculated widths of different groups do not line up, due to varying option name lengths.You can avoid this by enforcing the alignment of the help text across groups by setting `click.rich_click.STYLE_COMMANDS_TABLE_COLUMN_WIDTH_RATIO = (1, 2)`. This results in a fixed ratio of 1:2 for the width of command name and help text column.&gt; See [`examples/03_groups_sorting.py`](examples/03_groups_sorting.py) for a full example.### OptionsTo group option flags into two sections with custom names, see the following example:```pythonclick.rich_click.OPTION_GROUPS = {    &quot;mytool&quot;: [        {            &quot;name&quot;: &quot;Simple options&quot;,            &quot;options&quot;: [&quot;--name&quot;, &quot;--description&quot;, &quot;--version&quot;, &quot;--help&quot;],        },        {            &quot;name&quot;: &quot;Advanced options&quot;,            &quot;options&quot;: [&quot;--force&quot;, &quot;--yes&quot;, &quot;--delete&quot;],        },    ]}```If you omit `name` it will use `Commands` (can be configured with `OPTIONS_PANEL_TITLE`).### CommandsHere we create two groups of commands for the base command of `mytool`.Any subcommands not listed will automatically be printed in a panel at the end labelled &quot;Commands&quot; as usual.```pythonclick.rich_click.COMMAND_GROUPS = {    &quot;mytool&quot;: [        {            &quot;name&quot;: &quot;Commands for uploading&quot;,            &quot;commands&quot;: [&quot;sync&quot;, &quot;upload&quot;],        },        {            &quot;name&quot;: &quot;Download data&quot;,            &quot;commands&quot;: [&quot;get&quot;, &quot;fetch&quot;, &quot;download&quot;],        },    ]}```If you omit `name` it will use `Commands` (can be configured with `COMMANDS_PANEL_TITLE`).### Multiple commandsIf you use multiple nested subcommands, you can specify their commands using the top-level dictionary keys:```pythonclick.rich_click.COMMAND_GROUPS = {    &quot;mytool&quot;: [{&quot;commands&quot;: [&quot;sync&quot;, &quot;auth&quot;]}],    &quot;mytool sync&quot;: [        {            &quot;name&quot;: &quot;Commands for uploading&quot;,            &quot;commands&quot;: [&quot;sync&quot;, &quot;upload&quot;],        },        {            &quot;name&quot;: &quot;Download data&quot;,            &quot;commands&quot;: [&quot;get&quot;, &quot;fetch&quot;, &quot;download&quot;],        },    ],    &quot;mytool auth&quot;:[{&quot;commands&quot;: [&quot;login&quot;, &quot;logout&quot;]}],}```### Table stylingTypically you would style the option / command tables using the global config options.However, if you wish you may style tables on a per-group basis using the `table_styles` key:```pythonclick.rich_click.COMMAND_GROUPS = {    &quot;mytool&quot;: [        {            &quot;commands&quot;: [&quot;sync&quot;, &quot;auth&quot;],            &quot;table_styles&quot;: {                &quot;show_lines&quot;: True,                &quot;row_styles&quot;: [&quot;magenta&quot;, &quot;yellow&quot;, &quot;cyan&quot;, &quot;green&quot;],                &quot;border_style&quot;: &quot;red&quot;,                &quot;box&quot;: &quot;DOUBLE&quot;,            },        },    ],}```The available keys are: `show_lines`, `leading`, `box`, `border_style`, `row_styles`, `pad_edge`, `padding`.## Configuration optionsHere is the full list of config options:```python# Default stylesSTYLE_OPTION = &quot;bold cyan&quot;STYLE_ARGUMENT = &quot;bold cyan&quot;STYLE_COMMAND = &quot;bold cyan&quot;STYLE_SWITCH = &quot;bold green&quot;STYLE_METAVAR = &quot;bold yellow&quot;STYLE_METAVAR_APPEND = &quot;dim yellow&quot;STYLE_METAVAR_SEPARATOR = &quot;dim&quot;STYLE_HEADER_TEXT = &quot;&quot;STYLE_FOOTER_TEXT = &quot;&quot;STYLE_USAGE = &quot;yellow&quot;STYLE_USAGE_COMMAND = &quot;bold&quot;STYLE_DEPRECATED = &quot;red&quot;STYLE_HELPTEXT_FIRST_LINE = &quot;&quot;STYLE_HELPTEXT = &quot;dim&quot;STYLE_OPTION_HELP = &quot;&quot;STYLE_OPTION_DEFAULT = &quot;dim&quot;STYLE_OPTION_ENVVAR = &quot;dim yellow&quot;STYLE_REQUIRED_SHORT = &quot;red&quot;STYLE_REQUIRED_LONG = &quot;dim red&quot;STYLE_OPTIONS_PANEL_BORDER = &quot;dim&quot;ALIGN_OPTIONS_PANEL = &quot;left&quot;STYLE_OPTIONS_TABLE_SHOW_LINES = FalseSTYLE_OPTIONS_TABLE_LEADING = 0STYLE_OPTIONS_TABLE_PAD_EDGE = FalseSTYLE_OPTIONS_TABLE_PADDING = (0, 1)STYLE_OPTIONS_TABLE_BOX = &quot;&quot;STYLE_OPTIONS_TABLE_ROW_STYLES = NoneSTYLE_OPTIONS_TABLE_BORDER_STYLE = NoneSTYLE_COMMANDS_PANEL_BORDER = &quot;dim&quot;ALIGN_COMMANDS_PANEL = &quot;left&quot;STYLE_COMMANDS_TABLE_SHOW_LINES = FalseSTYLE_COMMANDS_TABLE_LEADING = 0STYLE_COMMANDS_TABLE_PAD_EDGE = FalseSTYLE_COMMANDS_TABLE_PADDING = (0, 1)STYLE_COMMANDS_TABLE_BOX = &quot;&quot;STYLE_COMMANDS_TABLE_ROW_STYLES = NoneSTYLE_COMMANDS_TABLE_BORDER_STYLE = NoneSTYLE_COMMANDS_TABLE_COLUMN_WIDTH_RATIO = (None, None)STYLE_ERRORS_PANEL_BORDER = &quot;red&quot;ALIGN_ERRORS_PANEL = &quot;left&quot;STYLE_ERRORS_SUGGESTION = &quot;dim&quot;STYLE_ERRORS_SUGGESTION_COMMAND = &quot;blue&quot;STYLE_ABORTED = &quot;red&quot;WIDTH = int(getenv(&quot;TERMINAL_WIDTH&quot;)) if getenv(&quot;TERMINAL_WIDTH&quot;) else NoneMAX_WIDTH = int(getenv(&quot;TERMINAL_WIDTH&quot;)) if getenv(&quot;TERMINAL_WIDTH&quot;) else WIDTHCOLOR_SYSTEM = &quot;auto&quot;  # Set to None to disable colorsFORCE_TERMINAL = True if getenv(&quot;GITHUB_ACTIONS&quot;) or getenv(&quot;FORCE_COLOR&quot;) or getenv(&quot;PY_COLORS&quot;) else None# Fixed stringsHEADER_TEXT = NoneFOOTER_TEXT = NoneDEPRECATED_STRING = &quot;(Deprecated) &quot;DEFAULT_STRING = &quot;[default: {}]&quot;ENVVAR_STRING = &quot;[env var: {}]&quot;REQUIRED_SHORT_STRING = &quot;*&quot;REQUIRED_LONG_STRING = &quot;[required]&quot;RANGE_STRING = &quot; [{}]&quot;APPEND_METAVARS_HELP_STRING = &quot;({})&quot;ARGUMENTS_PANEL_TITLE = &quot;Arguments&quot;OPTIONS_PANEL_TITLE = &quot;Options&quot;COMMANDS_PANEL_TITLE = &quot;Commands&quot;ERRORS_PANEL_TITLE = &quot;Error&quot;ERRORS_SUGGESTION = None  # Default: Try 'cmd -h' for help. Set to False to disable.ERRORS_EPILOGUE = NoneABORTED_TEXT = &quot;Aborted.&quot;# BehavioursSHOW_ARGUMENTS = False  # Show positional argumentsSHOW_METAVARS_COLUMN = True  # Show a column with the option metavar (eg. INTEGER)APPEND_METAVARS_HELP = False  # Append metavar (eg. [TEXT]) after the help textGROUP_ARGUMENTS_OPTIONS = False  # Show arguments with options instead of in own panelOPTION_ENVVAR_FIRST = False  # Show env vars before option help text instead of avertUSE_MARKDOWN = False  # Parse help strings as markdownUSE_MARKDOWN_EMOJI = True  # Parse emoji codes in markdown :smile:USE_RICH_MARKUP = False  # Parse help strings for rich markup (eg. [red]my text[/])COMMAND_GROUPS = {} # Define sorted groups of panels to display subcommandsOPTION_GROUPS = {} # Define sorted groups of panels to display options and argumentsUSE_CLICK_SHORT_HELP = False  # Use click's default function to truncate help text```Full type annotations of these config options are availble in `src/rich_click/rich_click.py`.100% of these options are supported in the `RichHelpConfiguration` class, as well.## ContributingContributions and suggestions for new features are welcome, as are bug reports!Please create a new [issue](https://github.com/ewels/rich-click/issues)or better still, dive right in with a pull-request.### Local setup1. Create a new venv with a python3.7+ interpreter using `python3 -m venv venv`2. Activate the venv with `source venv/bin/activate`3. Install our the package as an editable including all dev dependencies with `pip3 install -e .&quot;[dev]&quot;`4. Install pre-commit with `pre-commit install`#### Pre-commitOur pre-commit hooks contain the following hooks:- [Prettier](https://prettier.io/): formats our markdown and yaml files nicely.- no relative imports: prevents you from using relative imports.- [iSort](https://pycqa.github.io/isort/): will automatically sort the imports alphabetically.- [black](https://black.readthedocs.io/): will automatically format your code to be according to standardized python format.- [flake8](https://flake8.pycqa.org/): will do linting checks to make sure all your code is correctly styled and used.- [mypy](http://mypy-lang.org/): static type checker which verifies you are not using objects incorrectly.As mentioned, some of these tools automatically fix your code while other only highlight potential issues.Sometimes it will be enough to try to commit a second time and it will pass, while other times it may requiremanual changes to your code.In rare cases it may be difficult or undesirable to change to code to pass the linting rules.If this happens, it's ok to add a flake8 `# noqa` or mypy `# type: ignore` comment to skip that line.For details of how to do this, please see the [flake8 docs](https://flake8.pycqa.org/en/3.1.1/user/ignoring-errors.html#in-line-ignoring-errors)and [mypy docs](https://mypy.readthedocs.io/en/stable/common_issues.html#spurious-errors-and-locally-silencing-the-checker).## CreditsThis package was written by Phil Ewels ([@ewels](http://github.com/ewels/)),based on initial code by Will McGugan ([@willmcgugan](https://github.com/willmcgugan)).rich-click is co-maintained by [@dwreeves](http://github.com/dwreeves/).Furthermore, these contributors helped make the package what it is today:- [@BrutalSimplicity](https://github.com/BrutalSimplicity)- [@harens](http://github.com/harens/)- [@fridex](http://github.com/fridex/)- [@pawamoy](http://github.com/pawamoy/)- [@jorrick](http://github.com/harens/)See the full list of contributors [here](https://github.com/ewels/rich-click/graphs/contributors).</longdescription>
</pkgmetadata>