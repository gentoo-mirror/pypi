<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># QReader&lt;img alt=&quot;QReader&quot; title=&quot;QReader&quot; src=&quot;https://raw.githubusercontent.com/Eric-Canas/QReader/main/documentation/resources/logo.png&quot; width=&quot;20%&quot; align=&quot;left&quot;&gt; **QReader** is a **Robust** and **Straight-Forward** solution for reading **difficult** and **tricky** **QR** codes within images in **Python**. Powered by a &lt;a href=&quot;https://github.com/Eric-Canas/qrdet&quot; target=&quot;_blank&quot;&gt;YOLOv7&lt;/a&gt; model.Behind the scenes, the library is composed by two main building blocks: A **QR Detector** based on a &lt;a href=&quot;https://github.com/WongKinYiu/yolov7&quot; target=&quot;_blank&quot;&gt;YOLOv7&lt;/a&gt; model trained on a large dataset of QR codes (also offered as &lt;a href=&quot;https://github.com/Eric-Canas/qrdet&quot; target=&quot;_blank&quot;&gt;stand-alone&lt;/a&gt;), and the &lt;a href=&quot;https://github.com/NaturalHistoryMuseum/pyzbar&quot; target=&quot;_blank&quot;&gt;Pyzbar&lt;/a&gt; **QR Decoder**. On top of &lt;a href=&quot;https://github.com/NaturalHistoryMuseum/pyzbar&quot; target=&quot;_blank&quot;&gt;Pyzbar&lt;/a&gt;, **QReader** transparently applyes different image preprocessing techniques that maximize the **decoding** rate on difficult images.## InstallationTo install **QReader**, simply run:```bashpip install qreader```If you're not using **Windows**, you may need to install some additional **pyzbar** dependencies:On Linux:```bashsudo apt-get install libzbar0```On Mac OS X:```bashbrew install zbar```**NOTE:** If you're running **QReader** in a server with very limited resources, you may want to install the **CPU** version of [**PyTorch**](https://pytorch.org/get-started/locally/), before installing **QReader**. To do so, run: ``pip install torch --no-cache-dir`` (Thanks to [**@cjwalther**](https://github.com/Eric-Canas/QReader/issues/5) for his advice).## Usage&lt;a href=&quot;https://colab.research.google.com/github/Eric-Canas/QReader/blob/main/example.ipynb&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://colab.research.google.com/assets/colab-badge.svg&quot; alt=&quot;Open In Colab&quot; data-canonical-src=&quot;https://colab.research.google.com/assets/colab-badge.svg&quot; style=&quot;max-width: 100%;&quot;&gt;&lt;/a&gt;**QReader** is a very simple and straight-forward library. For most use cases, you'll only need to call ``detect_and_decode``:```pythonfrom qreader import QReaderimport cv2# Create a QReader instanceqreader = QReader()# Get the image that contains the QR code (QReader expects an uint8 numpy array)image = cv2.cvtColor(cv2.imread(&quot;path/to/image.png&quot;), cv2.COLOR_BGR2RGB)# Use the detect_and_decode function to get the decoded QR datadecoded_text = qreader.detect_and_decode(image=image)`````detect_and_decode`` will return a `tuple` containing the decoded _string_ of every **QR** found in the image.  **NOTE**: Some entries can be `None`, it will happen when a **QR** have been detected but **couldn't be decoded**.## API Reference### QReader.detect_and_decode(image, return_bboxes = False)This method will decode the **QR** codes in the given image and return the decoded _strings_ (or None, if any of them could be detected but not decoded).- ``image``: **np.ndarray**. NumPy Array containing the ``image`` to decode. The image is expected to be in ``uint8`` format [_HxWxC_], RGB.- ``return_bboxes``: **boolean**. If ``True``, it will also return the bboxes of each detected **QR**. Default: `False`- Returns: **tuple[str | None] | tuple[tuple[tuple[int, int, int, int], str | None]]**: A tuple with all detected **QR** codes decodified. If ``return_bboxes`` is `False`, the output will look like: `('Decoded QR 1', 'Decoded QR 2', None, 'Decoded QR 4', ...)`. If ``return_bboxes`` is `True` it will look like: `(((x1_1, y1_1, x2_1, y2_1), 'Decoded QR 1'), ((x1_2, y1_2, x2_2, y2_2), 'Decoded QR 2'), ...)`.### QReader.detect(image)This method detects the **QR** codes in the image and returns the **bounding boxes** surrounding them in the format (_x1_, _y1_, _x2_, _y2_). - ``image``: **np.ndarray**. NumPy Array containing the ``image`` to decode. The image must is expected to be in ``uint8`` format [_HxWxC_], RGB.- Returns: **tuple[tuple[int, int, int, int]]**. The bounding boxes of the **QR** code in the format `((x1_1, y1_1, x2_1, y2_1), (x1_1, y1_1, x2_1, x2_2))`.**NOTE**: This the only function you will need? Take a look at &lt;a href=&quot;https://github.com/Eric-Canas/qrdet&quot; target=&quot;_blank&quot;&gt;QRDet&lt;/a&gt;.### QReader.decode(image, bbox = None)This method decodes a single **QR** code on the given image, if a ``bbox`` is given (recommended) it will only look within that delimited region.Internally, this method will run the &lt;a href=&quot;https://github.com/NaturalHistoryMuseum/pyzbar&quot; target=&quot;_blank&quot;&gt;pyzbar&lt;/a&gt; decoder, using different image preprocessing techniques (_sharpening_, _binarization_, _blurring_...) every time it fails to increase the detection rate.- ``image``: **np.ndarray**. NumPy Array containing the ``image`` to decode. The image must is expected to be in ``uint8`` format [_HxWxC_], RGB.- ``bbox``: **tuple[int, int, int, int] | None**. The bounding box of the **QR** code in the format (_x1_, _y1_, _x2_, _y2_) [that's the output of `detect`]. If ``None``, it will look for the **QR** code in the whole image (not recommended). Default: ``None``.- Returns: **str**. The decoded text of the **QR** code. If no **QR** code can be decoded, it will return ``None``.## Usage Tests&lt;div&gt;&lt;img alt=&quot;test_on_mobile&quot; title=&quot;test_on_mobile&quot; src=&quot;https://raw.githubusercontent.com/Eric-Canas/QReader/main/documentation/resources/test_mobile.jpeg&quot; width=&quot;60%&quot;&gt;&lt;img alt=&quot;&quot; title=&quot;QReader&quot; src=&quot;https://raw.githubusercontent.com/Eric-Canas/QReader/main/documentation/resources/test_draw_64x64.jpeg&quot; width=&quot;32%&quot; align=&quot;right&quot;&gt;&lt;/div&gt;&lt;div&gt;Two sample images. At left, an image taken with a mobile phone. At right, a 64x64 &lt;b&gt;QR&lt;/b&gt; pasted over a drawing.&lt;/div&gt;    &lt;br&gt;The following code will try to decode these images containing &lt;b&gt;QR&lt;/b&gt;s with **QReader**, &lt;a href=&quot;https://github.com/NaturalHistoryMuseum/pyzbar&quot; target=&quot;_blank&quot;&gt;pyzbar&lt;/a&gt; and &lt;a href=&quot;https://opencv.org/&quot; target=&quot;_blank&quot;&gt;OpenCV&lt;/a&gt;.```pythonfrom qreader import QReaderfrom cv2 import QRCodeDetector, imreadfrom pyzbar.pyzbar import decode# Initialize the three tested readers (QRReader, OpenCV and pyzbar)qreader_reader, cv2_reader, pyzbar_reader = QReader(), QRCodeDetector(), decodefor img_path in ('test_mobile.jpeg', 'test_draw_64x64.jpeg'):    # Read the image    img = imread(img_path)    # Try to decode the QR code with the three readers    qreader_out = qreader_reader.detect_and_decode(image=img)    cv2_out = cv2_reader.detectAndDecode(img=img)[0]    pyzbar_out = pyzbar_reader(image=img)    # Read the content of the pyzbar output (double decoding will save you from a lot of wrongly decoded characters)    pyzbar_out = tuple(out.data.data.decode('utf-8').encode('shift-jis').decode('utf-8') for out in pyzbar_out)    # Print the results    print(f&quot;Image: {img_path} -&gt; QReader: {qreader_out}. OpenCV: {cv2_out}. pyzbar: {pyzbar_out}.&quot;)```The output of the previous code is:```txtImage: test_mobile.jpeg -&gt; QReader: ('https://github.com/Eric-Canas/QReader'). OpenCV: . pyzbar: ().Image: test_draw_64x64.jpeg -&gt; QReader: ('https://github.com/Eric-Canas/QReader'). OpenCV: . pyzbar: ().```Note that **QReader** internally uses &lt;a href=&quot;https://github.com/NaturalHistoryMuseum/pyzbar&quot; target=&quot;_blank&quot;&gt;pyzbar&lt;/a&gt; as **decoder**. The improved **detection-decoding rate** that **QReader** achieves comes from the combination of different image pre-processing techniques and the &lt;a href=&quot;https://github.com/WongKinYiu/yolov7&quot; target=&quot;_blank&quot;&gt;YOLOv7&lt;/a&gt; based &lt;a href=&quot;https://github.com/Eric-Canas/qrdet&quot; target=&quot;_blank&quot;&gt;**QR** detector&lt;/a&gt; that is able to detect **QR** codes in harder conditions than classical _Computer Vision_ methods.## AcknowledgementsThis library is based on the following projects:- &lt;a href=&quot;https://github.com/WongKinYiu/yolov7&quot; target=&quot;_blank&quot;&gt;YoloV7&lt;/a&gt; model for **Object Detection**.- &lt;a href=&quot;https://github.com/NaturalHistoryMuseum/pyzbar&quot; target=&quot;_blank&quot;&gt;Pyzbar&lt;/a&gt; **QR** Decoder.- &lt;a href=&quot;https://opencv.org/&quot; target=&quot;_blank&quot;&gt;OpenCV&lt;/a&gt; methods for image filtering.</longdescription>
</pkgmetadata>