<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Dolby.io REST APIs Client for Python - CLICommand Line Interface utility for the dolby.io REST [Communications](https://docs.dolby.io/communications-apis/reference/authentication-api) and [Media](https://docs.dolby.io/media-processing/reference/media-enhance-overview) APIs.## Install this projectCheck the [dolbyio-rest-apis-cli](https://pypi.org/project/dolbyio-rest-apis-cli/) package on PyPI. To install the latest stable python package run the following command: ```bashpython3 -m pip install dolbyio-rest-apis-cli```Upgrade your package to the latest version:```bashpython3 -m pip install --upgrade dolbyio-rest-apis-cli```## Communications CommandsDisplay the help and version of the command line:```bashcommunications --helpcommunications --version```### AuthenticationGet your app key and secret from the dolby.io dashboard and run the following command to get the access token as a json payload:```bashcommunications auth -k &quot;APP_KEY&quot; -s &quot;APP_SECRET&quot; --output json```Add the flag `--api` to get an access token that you can use to query the REST APIs.  Change the output to `--output text` to get a text format for the output.  Use `--output access_token` to retrieve only the access token so you can easily assign it to a variable:```bashACCESS_TOKEN=$(communications auth -k &quot;APP_KEY&quot; -s &quot;APP_SECRET&quot; --api --output access_token 2&gt; /dev/null)```### RemixUsing the access token you've retrieved using the `auth` command, you can start a remix for a specific conference:```bashcommunications remix \    --access_token &quot;ACCESS_TOKEN&quot; \    --cid &quot;00000000-0000-0000-0000-000000000000&quot; \    --start \    --output json```Or simply check the status of a remix:```bashcommunications remix \    --access_token &quot;ACCESS_TOKEN&quot; \    --cid &quot;00000000-0000-0000-0000-000000000000&quot; \    --output json```### StreamingStart the streaming to an RTMP endpoint for a specific conference:```bashcommunications streaming \    --access_token &quot;ACCESS_TOKEN&quot; \    --cid &quot;00000000-0000-0000-0000-000000000000&quot; \    --action start \    --target rtmp \    --output json \    --urls &quot;rtmp://a.rtmp.youtube.com/live2/{streaming_key}&quot;```Stop the RTMP streaming for a specific conference:```bashcommunications streaming \    --access_token &quot;ACCESS_TOKEN&quot; \    --cid &quot;00000000-0000-0000-0000-000000000000&quot; \    --action stop \    --target rtmp \    --output json```## Media CommandsDisplay the help and version of the command line:```bashmedia --helpmedia --version```### AuthenticationGet your app key and secret from the dolby.io dashboard and run the following command to get the access token as a json payload:```bashmedia auth -k &quot;APP_KEY&quot; -s &quot;APP_SECRET&quot; --output json```  Change the output to `--output text` to get a text format for the output.  Use `--output access_token` to retrieve only the access token so you can easily assign it to a variable:```bashACCESS_TOKEN=$(media auth -k &quot;APP_KEY&quot; -s &quot;APP_SECRET&quot; --output access_token 2&gt; /dev/null)```### Input / OutputUpload a file to Dolby.io temporary storage:```bashmedia io \    --access_token &quot;&lt;ACCESS_TOKEN&gt;&quot; \    --dlb_url &quot;dlb://in/file.mp4&quot; \    --file &quot;/path/to/file.mp4&quot; \    upload```Download a file from Dolby.io temporary storage:```bashmedia io \    --access_token &quot;&lt;ACCESS_TOKEN&gt;&quot; \    --dlb_url &quot;dlb://out/processed_file.mp4&quot; \    --file &quot;/path/to/processed_file.mp4&quot; \    download```### EnhanceStart enhancing a media:```bashmedia enhance    --access_token &quot;&lt;ACCESS_TOKEN&gt;&quot; \    start \    --file &quot;/path/to/job_description.json&quot;```&gt; The result is the job identifier.Get the result from a enhancement job:```bashmedia enhance    --access_token &quot;&lt;ACCESS_TOKEN&gt;&quot; \    result \    --job_id &quot;00000000-0000-0000-0000-000000000000&quot;```### Music MasteringStart mastering a music:```bashmedia mastering    --access_token &quot;&lt;ACCESS_TOKEN&gt;&quot; \    start \    --file &quot;/path/to/job_description.json&quot;```&gt; The result is the job identifier.Get the result from a music mastering job:```bashmedia mastering    --access_token &quot;&lt;ACCESS_TOKEN&gt;&quot; \    result \    --job_id &quot;00000000-0000-0000-0000-000000000000&quot;```</longdescription>
</pkgmetadata>