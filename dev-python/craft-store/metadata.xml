<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Craft StoreThis project aims to provide python interfaces for communicating withCanonical Stores, such as Charmhub and the Snap Store.# LicenseFree software: GNU Lesser General Public License v3# Documentation:https://craft-store.readthedocs.io.# ContributingA `Makefile` is provided for easy interaction with the project. To seeall available options run:```make help```## Running testsTo run all tests in the suite run:```make tests```### Integration testsSome integration tests require collaborator permission on the `craft-store-test-charm`charm package on the staging craft-store. These can be run by creating a pull request.Other integration tests simply require a valid login to the staging charmhub store.These can be run by exporting charmhub staging credentials to the environmentvariable `CRAFT_STORE_CHARMCRAFT_CREDENTIALS`. An easy way to do this is to create a `charmcraft.yaml` file containing the lines:    charmhub:      api-url: &quot;https://api.staging.charmhub.io&quot;      storage-url: &quot;https://storage.staging.snapcraftcontent.com&quot;and then run `charmcraft login --export cc.cred` to login and`export CRAFT_STORE_CHARMCRAFT_CREDENTIALS=$(cat cc.cred)` to put the credentialsinto the environment variable. Note that if you do not have collaborator permissionson `craft-store-test-charm`, some tests will fail rather than being skipped.## Adding new requirementsIf a new dependency is added to the project run:```make freeze-requirements```## Verifying documentation changesTo locally verify documentation changes run:```make docs```After running, newly generated documentation shall be available at`./docs/_build/html/`.## Committing codePlease follow these guidelines when committing code for this project:- Use a topic with a colon to start the subject- Separate subject from body with a blank line- Limit the subject line to 50 characters- Do not capitalize the subject line- Do not end the subject line with a period- Use the imperative mood in the subject line- Wrap the body at 72 characters- Use the body to explain what and why (instead of how)As an example:    endpoints: support package attenuations    Required in order to obtain credentials that apply only to a given package;    be it charm, snap or bundle.</longdescription>
</pkgmetadata>