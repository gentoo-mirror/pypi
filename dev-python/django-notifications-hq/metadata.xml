<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># `django-notifications` Documentation[![build-status](https://travis-ci.org/django-notifications/django-notifications.svg)](https://travis-ci.org/django-notifications/django-notifications)[![Coverage Status](https://coveralls.io/repos/github/django-notifications/django-notifications/badge.svg?branch=master)](https://coveralls.io/github/django-notifications/django-notifications?branch=master)[django-notifications](https://github.com/django-notifications/django-notifications) is a GitHub notification alike app for Django, it was derived from [django-activity-stream](https://github.com/justquick/django-activity-stream)The major difference between `django-notifications` and `django-activity-stream`:- `django-notifications` is for building something like Github &quot;Notifications&quot;- While `django-activity-stream` is for building Github &quot;News Feed&quot;Notifications are actually actions events, which are categorized by four main components.-   `Actor`. The object that performed the activity.-   `Verb`. The verb phrase that identifies the action of the activity.-   `Action Object`. *(Optional)* The object linked to the action    itself.-   `Target`. *(Optional)* The object to which the activity was    performed.`Actor`, `Action Object` and `Target` are `GenericForeignKeys` to anyarbitrary Django object. An action is a description of an action thatwas performed (`Verb`) at some instant in time by some `Actor` on someoptional `Target` that results in an `Action Object` gettingcreated/updated/deleted.For example: [justquick](https://github.com/justquick/) `(actor)`*closed* `(verb)` [issue2](https://github.com/justquick/django-activity-stream/issues/2)`(action_object)` on[activity-stream](https://github.com/justquick/django-activity-stream/)`(target)` 12 hours agoNomenclature of this specification is based on the Activity StreamsSpec: &lt;http://activitystrea.ms/specs/atom/1.0/&gt;## Requirements-   Python 3.7, 3.8, 3.9, 3.10, 3.11-   Django 3.2, 4.0, 4.1## InstallationInstallation is easy using `pip` and will install all requiredlibraries.```bash$ pip install django-notifications-hq```or get it from source```bash$ git clone https://github.com/django-notifications/django-notifications$ cd django-notifications$ python setup.py sdist$ pip install dist/django-notifications-hq*```Note that [django-model-utils](http://pypi.python.org/pypi/django-model-utils)will be installed: this is required for the pass-through QuerySet manager.Then to add the Django Notifications to your project add the app`notifications` to your `INSTALLED_APPS` and urlconf.The app should go somewhere after all the apps that are going to begenerating notifications like `django.contrib.auth````pythonINSTALLED_APPS = (    'django.contrib.auth',    ...    'notifications',    ...)```Add the notifications urls to your urlconf:```pythonimport notifications.urlsurlpatterns = [    ...    url('^inbox/notifications/', include(notifications.urls, namespace='notifications')),    ...]```The method of installing these urls, importing rather than using`'notifications.urls'`, is required to ensure that the urls areinstalled in the `notifications` namespace.To run schema migration, execute`python manage.py migrate notifications`.## Generating NotificationsGenerating notifications is probably best done in a separate signal.```pythonfrom django.db.models.signals import post_savefrom notifications.signals import notifyfrom myapp.models import MyModeldef my_handler(sender, instance, created, **kwargs):    notify.send(instance, verb='was saved')post_save.connect(my_handler, sender=MyModel)```To generate an notification anywhere in your code, simply import thenotify signal and send it with your actor, recipient, and verb.```pythonfrom notifications.signals import notifynotify.send(user, recipient=user, verb='you reached level 10')```The complete syntax is.```pythonnotify.send(actor, recipient, verb, action_object, target, level, description, public, timestamp, **kwargs)```Arguments:-   **actor**: An object of any type. (Required) Note: Use    **sender** instead of **actor** if you intend to use keyword    arguments-   **recipient**: A **Group** or a **User QuerySet** or a list of    **User**. (Required)-   **verb**: An string. (Required)-   **action\_object**: An object of any type. (Optional)-   **target**: An object of any type. (Optional)-   **level**: One of Notification.LEVELS (\'success\', \'info\',    \'warning\', \'error\') (default=info). (Optional)-   **description**: An string. (Optional)-   **public**: An boolean (default=True). (Optional)-   **timestamp**: An tzinfo (default=timezone.now()). (Optional)### Extra dataYou can attach arbitrary data to your notifications by doing thefollowing:-   Add to your settings.py:    `DJANGO_NOTIFICATIONS_CONFIG = { 'USE_JSONFIELD': True}`Then, any extra arguments you pass to `notify.send(...)` will beattached to the `.data` attribute of the notification object. These willbe serialised using the JSONField\'s serialiser, so you may need to takethat into account: using only objects that will be serialised is a goodidea.### Soft deleteBy default, `delete/(?P&lt;slug&gt;\d+)/` deletes specified notificationrecord from DB. You can change this behaviour to \&quot;mark`Notification.deleted` field as `True`\&quot; by:-   Add to your settings.py:    `DJANGO_NOTIFICATIONS_CONFIG = { 'SOFT_DELETE': True}`With this option, QuerySet methods `unread` and `read` contain one morefilter: `deleted=False`. Meanwhile, QuerySet methods `deleted`,`active`, `mark_all_as_deleted`, `mark_all_as_active` are turned on. Seemore details in QuerySet methods section.## API### QuerySet methodsUsing `django-model-utils`, we get the ability to add queryset methodsto not only the manager, but to all querysets that will be used,including related objects. This enables us to do things like:```python    Notification.objects.unread()```which returns all unread notifications. To do this for a single user, wecan do:```python    user = User.objects.get(pk=pk)    user.notifications.unread()```There are some other QuerySet methods, too.#### `qs.unsent()`Return all of the unsent notifications, filtering the current queryset.(emailed=False)#### `qs.sent()`Return all of the sent notifications, filtering the current queryset.(emailed=True)#### `qs.unread()`Return all of the unread notifications, filtering the current queryset.When `SOFT_DELETE=True`, this filter contains `deleted=False`.#### `qs.read()`Return all of the read notifications, filtering the current queryset.When `SOFT_DELETE=True`, this filter contains `deleted=False`.#### `qs.mark_all_as_read()` \| `qs.mark_all_as_read(recipient)`Mark all of the unread notifications in the queryset (optionally alsofiltered by `recipient`) as read.#### `qs.mark_all_as_unread()` \| `qs.mark_all_as_unread(recipient)`Mark all of the read notifications in the queryset (optionally alsofiltered by `recipient`) as unread.#### `qs.mark_as_sent()` \| `qs.mark_as_sent(recipient)`Mark all of the unsent notifications in the queryset (optionally alsofiltered by `recipient`) as sent.#### `qs.mark_as_unsent()` \| `qs.mark_as_unsent(recipient)`Mark all of the sent notifications in the queryset (optionally alsofiltered by `recipient`) as unsent.#### `qs.deleted()`Return all notifications that have `deleted=True`, filtering the currentqueryset. Must be used with `SOFT_DELETE=True`.#### `qs.active()`Return all notifications that have `deleted=False`, filtering thecurrent queryset. Must be used with `DELETE=True`.#### `qs.mark_all_as_deleted()` \| `qs.mark_all_as_deleted(recipient)`Mark all notifications in the queryset (optionally also filtered by`recipient`) as `deleted=True`. Must be used with `DELETE=True`.#### `qs.mark_all_as_active()` \| `qs.mark_all_as_active(recipient)`Mark all notifications in the queryset (optionally also filtered by`recipient`) as `deleted=False`. Must be used with `SOFT_DELETE=True`.### Model methods#### `obj.timesince([datetime])`A wrapper for Django\'s `timesince` function.#### `obj.mark_as_read()`Mark the current object as read.### Template tagsPut `{% load notifications\_tags %}` in the template beforeyou actually use notification tags.### `notifications_unread````python    {% notifications_unread %}```Give the number of unread notifications for a user, or nothing (an emptystring) for an anonymous user.Storing the count in a variable for further processing is advised, suchas:```python    {% notifications_unread as unread_count %}    ...    {% if unread_count %}        You have &lt;strong&gt;{{ unread_count }}&lt;/strong&gt; unread notifications.    {% endif %}```## Live-updater APITo ensure users always have the most up-to-date notifications,`django-notifications` includes a simple javascript API forupdating specific fields within a django template.There are two possible API calls that can be made:1.  `api/unread_count/` that returns a javascript object with 1 key:    `unread_count` eg:        {&quot;unread_count&quot;:1}2.  `api/unread_list/` that returns a javascript object with 2 keys:    `unread_count` and `unread_list` eg:        {         &quot;unread_count&quot;:1,         &quot;unread_list&quot;:[--list of json representations of notifications--]        }    Representations of notifications are based on the django method:    `model_to_dict`    Query string arguments:    -   **max** - maximum length of unread list.    -   **mark\_as\_read** - mark notification in list as read.    For example, get `api/unread_list/?max=3&amp;mark_as_read=true` returns    3 notifications and mark them read (remove from list on next    request).### How to use:1.  Put `{% load notifications_tags %}` in the template before you    actually use notification tags.2.  In the area where you are loading javascript resources add the    following tags in the order below:        &lt;script src=&quot;{% static 'notifications/notify.js' %}&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;        {% register_notify_callbacks callbacks='fill_notification_list,fill_notification_badge' %}    `register_notify_callbacks` takes the following arguments:    1.  `badge_class` (default `live_notify_badge`) - The identifier        `class` of the element to show the unread count,        that will be periodically updated.    2.  `menu_class` (default `live_notify_list`) - The identifier        `class` of the element to insert a list of unread        items, that will be periodically updated.    3.  `refresh_period` (default `15`) - How often to fetch unread        items from the server (integer in seconds).    4.  `fetch` (default `5`) - How many notifications to fetch each        time.    5.  `callbacks` (default `&lt;empty string&gt;`) - A comma-separated list        of javascript functions to call each period.    6.  `api_name` (default `list`) - The name of the API to call (this        can be either `list` or `count`).    7. ``mark_as_read`` (default ``False``) - Marks notifications as read when fetched.3.  To insert a live-updating unread count, use the following template:        {% live_notify_badge %}    `live_notify_badge` takes the following arguments:    -  `badge_class` (default `live_notify_badge`) - The identifier        `class` for the `&lt;span&gt;` element that will be created to show        the unread count.4.  To insert a live-updating unread list, use the following template:        {% live_notify_list %}    `live_notify_list` takes the following arguments:    -  `list_class` (default `live_notify_list`) - The identifier        `class` for the `&lt;ul&gt;` element that will be created to insert        the list of notifications into.### Using the live-updater with bootstrapThe Live-updater can be incorporated into bootstrap with minimal code.To create a live-updating bootstrap badge containing the unread count,simply use the template tag:    {% live_notify_badge badge_class=&quot;badge&quot; %}To create a live-updating bootstrap dropdown menu containing a selectionof recent unread notifications, simply use the template tag:    {% live_notify_list list_class=&quot;dropdown-menu&quot; %}### Customising the display of notifications using javascript callbacksWhile the live notifier for unread counts should suit most use cases,users may wish to alter how unread notifications are shown.The `callbacks` argument of the `register_notify_callbacks` dictateswhich javascript functions are called when the unread api call is made.To add a custom javascript callback, simply add this to the list, likeso:    {% register_notify_callbacks callbacks='fill_notification_badge,my_special_notification_callback' %}The above would cause the callback to update the unread count badge, andwould call the custom function`my_special_notification_callback`. All callbackfunctions are passed a single argument by convention called`data`, which contains the entire result from the API.For example, the below function would get the recent list of unreadmessages and log them to the console:```javascriptfunction my_special_notification_callback(data) {    for (var i=0; i &lt; data.unread_list.length; i++) {        msg = data.unread_list[i];        console.log(msg);    }}```### Testing the live-updater1.  Clone the repo2.  Run `./manage.py runserver`3.  Browse to `yourserverip/test/`4.  Click \'Make a notification\' and a new notification should appear    in the list in 5-10 seconds.## Serializing the django-notifications ModelSee here - &lt;http://www.django-rest-framework.org/api-guide/relations/#generic-relationships&gt;In this example the target object can be of type Foo or Bar and theappropriate serializer will be used.```pythonclass GenericNotificationRelatedField(serializers.RelatedField):    def to_representation(self, value):        if isinstance(value, Foo):            serializer = FooSerializer(value)        if isinstance(value, Bar):            serializer = BarSerializer(value)        return serializer.dataclass NotificationSerializer(serializers.Serializer):    recipient = PublicUserSerializer(User, read_only=True)    unread = serializers.BooleanField(read_only=True)    target = GenericNotificationRelatedField(read_only=True)```Thanks to @DaWy### `AbstractNotification` modelIn case you need to customize the notification model in order to addfield or customised features that depend on your application, you caninherit and extend the `AbstractNotification` model, example:```python#In your_app/models.pyfrom django.db import modelsfrom notifications.base.models import AbstractNotificationclass Notification(AbstractNotification):    # custom field example    category = models.ForeignKey('myapp.Category',                                 on_delete=models.CASCADE)    class Meta(AbstractNotification.Meta):        abstract = False```You will require to define `NOTIFICATIONS_NOTIFICATION_MODEL` setting in`setting.py` as follows:```python# In your_project/settings.pyNOTIFICATIONS_NOTIFICATION_MODEL = 'your_app.Notification'```## Notes### Email NotificationSending email to users has not been integrated into this library. So fornow you need to implement it if needed. There is a reserved field`Notification.emailed` to make it easier.### Sample AppA sample app has been implemented in`notifications/tests/sample_notifications` that extends`django-notifications` with the sole purpose of testing itsextensibility. You can run the SAMPLE APP by setting the environmentvariable `SAMPLE_APP` as follows```bashexport SAMPLE_APP=1# Run the Django development server with sample_notifications app installedpython manage.py runserver# Unset SAMPLE_APP to remove sample_notifications app from list of INSTALLED_APPSunset SAMPLE_APP```## `django-notifications` TeamCore contributors (in alphabetical order):-   [Alvaro Leonel](https://github.com/AlvaroLQueiroz)-   [Federico Capoano](https://github.com/nemesisdesign)-   [Samuel Spencer](https://github.com/LegoStormtroopr)-   [Yang Yubo](https://github.com/yangyubo)-   [YPCrumble](https://github.com/YPCrumble)-   [Zhongyuan Zhang](https://github.com/zhang-z)## ContributeWe are looking for contributors, for anyone who\'d like to contributeand willing to put time and energy on this project, please contact [YangYubo](https://github.com/yangyubo).</longdescription>
</pkgmetadata>