<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.org/amirziai/flatten.svg?branch=master)](https://travis-ci.org/amirziai/flatten) [![PyPI version](https://badge.fury.io/py/flatten_json.svg)](https://badge.fury.io/py/flatten_json) [![Codacy Badge](https://api.codacy.com/project/badge/Coverage/7ae779ec4e99462f907c5afecfd5de48)](https://www.codacy.com/app/amirziai/flatten?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=amirziai/flatten&amp;utm_campaign=Badge_Coverage) # flatten_jsonFlattens JSON objects in Python. ```flatten_json``` flattens the hierarchy in your object which can be useful if you want to force your objects into a table.## Installation```bashpip install flatten_json```## flatten### UsageLet's say you have the following object:```pythondic = {    &quot;a&quot;: 1,    &quot;b&quot;: 2,    &quot;c&quot;: [{&quot;d&quot;: [2, 3, 4], &quot;e&quot;: [{&quot;f&quot;: 1, &quot;g&quot;: 2}]}]}```which you want to flatten. Just apply ```flatten```:```pythonfrom flatten_json import flattenflatten(dic)```Results:```python{'a': 1, 'b': 2, 'c_0_d_0': 2, 'c_0_d_1': 3, 'c_0_d_2': 4, 'c_0_e_0_f': 1, 'c_0_e_0_g': 2}```### Usage with PandasFor the following object:```pythondic = [    {&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: {&quot;d&quot;: 3, &quot;e&quot;: 4}},    {&quot;a&quot;: 0.5, &quot;c&quot;: {&quot;d&quot;: 3.2}},    {&quot;a&quot;: 0.8, &quot;b&quot;: 1.8},]```We can apply `flatten` to each element in the array and then use pandas to capture the output as a dataframe:```pythondic_flattened = [flatten(d) for d in dic]```which creates an array of flattened objects:```python[{'a': 1, 'b': 2, 'c_d': 3, 'c_e': 4}, {'a': 0.5, 'c_d': 3.2}, {'a': 0.8, 'b': 1.8}]```Finally you can use ```pd.DataFrame``` to capture the flattened array:```pythonimport pandas as pddf = pd.DataFrame(dic_flattened)```The final result as a Pandas dataframe:```abc_dc_e0123410.5NaN3.2NaN20.81.8NaNNaN```### Custom separatorBy default `_` is used to separate nested element. You can change this by passing the desired character:```pythonflatten({&quot;a&quot;: [1]}, '|')```returns:```python{'a|0': 1}```### Ignore root keysBy default `flatten` goes through all the keys in the object. If you are not interested in output from a set of keys you can pass this set as an argument to `root_keys_to_ignore`:```pythondic = {    'a': {'a': [1, 2, 3]},    'b': {'b': 'foo', 'c': 'bar'},    'c': {'c': [{'foo': 5, 'bar': 6, 'baz': [1, 2, 3]}]}}flatten(dic, root_keys_to_ignore={'b', 'c'})```returns:```python{    'a_a_0': 1,    'a_a_1': 2,    'a_a_2': 3}```This feature can prevent unnecessary processing which is a concern with deeply nested objects.## unflattenReverses the flattening process. Example usage:```pythonfrom flatten_json import unflattendic = {    'a': 1,    'b_a': 2,    'b_b': 3,    'c_a_b': 5}unflatten(dic)```returns:```python{    'a': 1,    'b': {'a': 2, 'b': 3},    'c': {'a': {'b': 5}}}```### Unflatten with lists`flatten` encodes key for list values with integer indices which makes it ambiguous for reversing the process. Consider this flattened dictionary:```pythona = {'a': 1, 'b_0': 5}```Both `{'a': 1, 'b': [5]}` and `{'a': 1, 'b': {0: 5}}` are legitimate answers. Calling `unflatten_list` the dictionary is first unflattened and then in a post-processing step the function looks for a list pattern (zero-indexed consecutive integer keys) and transforms the matched values into a list. Here's an example:```pythonfrom flatten_json import unflatten_listdic = {    'a': 1,    'b_0': 1,    'b_1': 2,    'c_a': 'a',    'c_b_0': 1,    'c_b_1': 2,    'c_b_2': 3}unflatten_list(dic)```returns:```python{    'a': 1,    'b': [1, 2],    'c': {'a': 'a', 'b': [1, 2, 3]}}```## Command line invocation```bash&gt;&gt;&gt; echo '{&quot;a&quot;: {&quot;b&quot;: 1}}' | flatten_json{&quot;a_b&quot;: 1}&gt;&gt;&gt; echo '{&quot;a&quot;: {&quot;b&quot;: 1}}' &gt; test.json&gt;&gt;&gt; cat test.json | flatten_json{&quot;a_b&quot;: 1}```</longdescription>
</pkgmetadata>