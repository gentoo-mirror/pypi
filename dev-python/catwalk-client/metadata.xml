<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Catwalk ClientCatwalk is case aggregator for ML solutions where model query/responses can be collected for the later evaluation.  This is client library helping to perform some common operations on the Catwalk API using python code.## InstallRun `pip install catwalk-client`## Sending casesTo send new open cases to the Catwalk instance you can use snippet below.User can allow concurrent case collection while creating `CatwalkClient` by setting `concurrent` argument to `True`. The `ThreadPoolExecutor` is created with number of maximum workers passed by `max_workers` argument, by default it's 4 workers.```python    from catwalk_client import CatwalkClient    # catwalk_url can be passed explicitly or can be provided in CATWALK_URL environment variable    client = CatwalkClient(submitter_name=&quot;fatman&quot;, submitter_version=&quot;1.0.0&quot;, catwalk_url=&quot;http://localhost:9100&quot;, concurrent=True, max_workers=2)    # direct call with dict to create new case    client.send({        &quot;metadata&quot;: {&quot;someint&quot;: 20},        &quot;query&quot;: [            {&quot;name&quot;: &quot;lokalid&quot;, &quot;value&quot;: &quot;7386259234132&quot;, &quot;type&quot;: &quot;string&quot;},            {&quot;name&quot;: &quot;test3&quot;, &quot;value&quot;: &quot;yup&quot;, &quot;type&quot;: &quot;string&quot;},            {&quot;name&quot;: &quot;test2&quot;, &quot;value&quot;: &quot;yup&quot;, &quot;type&quot;: &quot;string&quot;},            {&quot;name&quot;: &quot;test1&quot;, &quot;value&quot;: &quot;yup&quot;, &quot;type&quot;: &quot;string&quot;}        ],        &quot;context&quot;: [],        &quot;response&quot;: [            {                &quot;name&quot;: &quot;predictions&quot;,                &quot;type&quot;: {                    &quot;name&quot;: &quot;prediction&quot;,                    &quot;thresholds&quot;: [                        {&quot;from&quot;: 0, &quot;to&quot;: 0.02, &quot;label&quot;: &quot;NO&quot;},                        {&quot;from&quot;: 0.02, &quot;to&quot;: 0.6, &quot;label&quot;: &quot;PERHAPS&quot;},                        {&quot;from&quot;: 0.6, &quot;to&quot;: 1, &quot;label&quot;: &quot;YES&quot;}                    ]                },                &quot;value&quot;: {                    &quot;477110&quot;: 0.1493704617023468,                    &quot;477111&quot;: 0.3493704617023468,                    &quot;477112&quot;: 0.6493704617023468                },            }        ]    })    # fluent API to create new cases    client.new_case().add_query(        name=&quot;some query key&quot;, value=&quot;1345243&quot;, type=&quot;str&quot;    ).add_query(        name=&quot;other query key&quot;, value=&quot;1345243&quot;, type=&quot;str&quot;    ).add_context(        name=&quot;photo&quot;, value=&quot;url&quot;, type=&quot;image&quot;    ).add_response(        name=&quot;is_valid&quot;, value=True, type=&quot;bool&quot;    ).set_metadata(        caller=&quot;esc-1&quot;    ).send()```### ResultWhen a case is successfully collected client should return ID of a collected case.In some cases host might response with an error. In this case client will inform user that it ocurredand it will display response status, error type and error message.## Exporting cases### Exporting case can be done programmatically, by including CatwalkClient in your code. It requires to input _AUTHORIZATION TOKEN_, you can find it by going to your `User profile`. Each environment (prod, preprod, dev, test) has different tokens.To export cases from the Catwalk instance there is `export_cases` generator function available.```python    # catwalk_url can be passed explicitly or can be provided in CATWALK_URL environment variable    # auth_token can be passed explicitly or can be provided in CATWALK_AUTH_TOKEN environment variable    client = CatwalkClient(        catwalk_url=&quot;https://catwalk.ikp-test-c3.kubernilla.dk/api&quot;, auth_token=&quot;*TOKEN*&quot;, insecure=False    )    def get_cw_data(client: CatwalkClient, name, version):        data = []        for case in client.export_cases(            from_datetime=datetime(2023, 2, 8),            to_datetime=datetime(2023, 2, 9),            submitter_name=name,  # submitter_name is an optional argument,            submitter_version=version,  # submitter_version is an optional argument,            max_retries=5,        ):            print(case.id)            data.append(case)        print(&quot;Number of exported cases:&quot;, len(data))        return data    data = get_cw_data(client, &quot;test&quot;, &quot;0.0.1&quot;)```## Fetching a single case using `track_id````python    case = client.get_case(&quot;test_track_id&quot;)    print(case.dict())```## Fetching case evaluation results using `track_id````python    case_evaluation_results = client.get_case_evaluation_results(&quot;test_track_id&quot;)    print([e.dict() for e in case_evaluation_results])```## Updating a caseReplaces already existing case details with given data.```python    case_details = {        &quot;metadata&quot;: {&quot;someint&quot;: 20},        &quot;query&quot;: [            {&quot;name&quot;: &quot;lokalid&quot;, &quot;value&quot;: &quot;1234&quot;, &quot;type&quot;: &quot;number&quot;},        ],        &quot;context&quot;: [],        &quot;response&quot;: [            {                &quot;name&quot;: &quot;response&quot;,                &quot;type&quot;: &quot;bool&quot;,                &quot;value&quot;: True,            }        ],    }    client.update(&quot;test_track_id&quot;, case_details)```## Altering a caseA way of updating a case. It first fetches the case by `track_id` as a `CaseBuilder` object.This way it's easy to update `query`, `context`, `response`, or `metadata` of the case byusing the built-in methods.### Notice:**`set_metadata` method replaces the whole `metadata` property with a given value.**```python    case = client.alter_case(&quot;test_track_id&quot;)    case.add_query(&quot;lokalid&quot;, &quot;1234&quot;, &quot;number&quot;)    case.update()```## Initiating a sessionA way of creating a session with cases assigned by track IDs. There are two ways to initiate a session.### Method 1```python    session_id = client.create_session(        session_name,        session_description,    )    client.add_cases_to_session(session_id, track_ids)    client.start_session(session_id, assign_to=[&quot;admin@example.com&quot;])```### Method 2```python    client.initiate_session(        session_name,        track_ids,        assign_to=[&quot;admin@example.com&quot;],        description=session_description,    )```## ExceptionsCatwalk Client might end up throwing an exception. Here are a few that user can experience:- **Connection error**: when the connection between client and host couldn't be established.  This might occur either when user enters a wrong host address or when the host is offline.- **ValidationError** or **TypeError**: when user enters wrongly formatted case.- **Authorization Error (403)**: when user doesn't enter the authorization token (or enters one without appropriate permissions).- **Other** - when any other error unhandled directly by Catwalk Client occurs it will  display an exception name.</longdescription>
</pkgmetadata>