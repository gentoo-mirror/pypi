<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Bodo Platform SDKA simple SDK for Bodo Cloud Platform.List of contents:- [Getting Started](#getting-started)- [Job resource](#job-resource)- [Cluster resource](#cluster-resource)- [Workspace resource](#workspace-resource)- [Cloud config](#cloud-config)- [Instance Role Manager](#instance-role)- [Billing module](#billing-module)## Getting started&lt;a id=&quot;getting-started&quot;&gt;&lt;/a&gt;The first step is to create an *API Token* in the Bodo Platform forBodo SDK authentication.Navigate to *API Tokens* in the Admin Console to generate a token.Copy and save the token's *Client ID* and *Secret Key* and use them for BodoClientdefinition:```pythonfrom bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)```Alternatively, set `BODO_CLIENT_ID` and `BODO_SECRET_KEY` environment variablesto avoid requiring keys:```pythonfrom bodosdk.client import get_bodo_clientclient = get_bodo_client()```**Other bodo client options**- print_logs - default False, if enabled all API calls will be printed```pythonfrom bodosdk.client import get_bodo_clientfrom bodosdk.models import WorkspaceKeyskeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys, print_logs=True)```### Job resource&lt;a id=&quot;job-resource&quot;&gt;&lt;/a&gt;Module responsible for managing jobs in workspace.- [Bodo Platform Jobs](#bodo-platform-jobs)  - [create job](#create-job)  - [list jobs](#list-jobs)  - [get job](#get-job)  - [remove job](#remove-job)  - [get execution info](#get-execution)  - [waiter](#job-waiter)  - [get job logs](#get-job-logs)  - [Bodo Platform Batch Jobs](#bodo-platform-batch-jobs)  - [Create batch job definition](#create-batch-job-definition)  - [List batch job definitions](#list-batch-job-definitions)  - [Get batch job definition by id](#get-batch-job-definition-by-id)  - [Get batch job definition by name](#get-batch-job-definition-by-name)  - [Remove batch job definition](#remove-batch-job-definition)  - [Submit a batch job run](#submit-a-batch-job-run)  - [List batch job runs](#list-batch-job-runs)  - [Get batch job run](#get-batch-job-run)  - [Cancel batch job run](#cancel-batch-job-run)  - [Cancel all job runs on a cluster UUIDs](#cancel-all-job-runs-on-a-cluster-uuids)  - [Check batch job run status](#check-batch-job-run-status)  - [Submit SQL job run](#submit-sql-job-run)  - [Job Run waiter](#job-run-waiter)&lt;br/&gt;#### Bodo Platform Jobs&lt;a id=&quot;bodo-platform-jobs&quot;&gt;&lt;/a&gt;##### Create job&lt;a id=&quot;create-job&quot;&gt;&lt;/a&gt;`BodoClient.job.create(job: JobDefinition)`Creates a job to be executed on cluster. You can either create job dedicated cluster by providing its definition orprovide existing cluster uuid. Job dedicated clusters will be removed as soon as job execution will finish, if you provideuuid of existing one, cluster will remain.**Example 1. Use git repository and cluster definition:**```python3from bodosdk.models import GitRepoSource, WorkspaceKeys, JobDefinition, JobClusterDefinitionfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)job_definition = JobDefinition(    name='test',    args='./examples/nyc-taxi/get_daily_pickups.py',    source_config=GitRepoSource(        repo_url='https://github.com/Bodo-inc/Bodo-examples.git',        username='XYZ',        token='XYZ'    ),    cluster_object=JobClusterDefinition(        instance_type='c5.large',        accelerated_networking=False,        image_id='ami-0a2005b824a8758e5',        workers_quantity=2    ),    variables={},    timeout=120,    retries=0,    retries_delay=0,    retry_on_timeout=False)client.job.create(job_definition)```**Example 2. Run job from shared drive and existing cluster:**```python3from bodosdk.models import JobCluster, WorkspaceSource, WorkspaceKeys, JobDefinitionfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)job_definition = JobDefinition(    name='test',    args='nyc-taxi/get_daily_pickups.py',    source_config=WorkspaceSource(        path='/shared/bodo-examples/examples/'    ),    cluster_object=JobCluster(        uuid='0f0c5261-9827-4572-84f3-f6a9b10cf77d'    ),    variables={},    timeout=120,    retries=0,    retries_delay=0,    retry_on_timeout=False)client.job.create(job_definition)```**Example 3. Run job from a script file in an S3 bucket**To run a script file located on an S3 bucket, the cluster must have the required permissions to read the files from S3.This can be provided by creating an [Instance Role](https://pypi.org/project/bodosdk/#instance-role) with access to the required S3 bucket.Please make sure to specify an Instance Role that should be attached to the Job Cluster. The policy attached to the rolesshould provide access to both the bucket and its contents.Also make sure to attach any other policies to this role for the cluster and the job to function correctly.This may include(but not limited to) s3 access for reading script files and s3 access to read data that is used in your job script file.In addition to specifying the bucket path, we require users to specify the bucket region their bucket scripts are in in the S3Sourcedefinition, called bucket_region.```python3from bodosdk.models import WorkspaceKeys, JobDefinition, JobClusterDefinition, S3Source, CreateRoleDefinition, CreateRoleResponsefrom bodosdk.client import get_bodo_clientfrom typing import Listfrom uuid import UUIDkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)role_definition = CreateRoleDefinition(    name=&quot;test-sdk-role-creation&quot;,    description=&quot;testing&quot;,    data=InstanceRole(role_arn=&quot;arn:aws:iam::427443013497:role/testing_bucket_with_my_script&quot;))result_create_role: CreateRoleResponse = client.instance_role.create(role_definition)# wait for successful role creation and thenjob_definition = JobDefinition(    name='execute_s3_test',    args='test_s3_job.py',    source_config=S3Source(        bucket_path='s3://path-to-my-bucket/my_job_script_folder/',        bucket_region='us-east-1'    ),    cluster_object=JobClusterDefinition(        instance_type='c5.large',        accelerated_networking=False,        image_id='ami-0a2005b824a8758e5',        workers_quantity=2,        instance_role_uuid=result_create_role.uuid    ),    variables={},    timeout=120,    retries=0,    retries_delay=0,    retry_on_timeout=False)client.job.create(job_definition)```In the case you want to use one of the existing instance role that you might have pre-defined, you can copy the UUID for the instancerole from the platform by navigating to the Instance role manager option in your workspace and add it to the SDK script or,use the SDK to list all available instance roles, iterate through the list returned and break at the one we want to use depending ona condition.```python3from bodosdk.models import WorkspaceKeys, JobDefinition, JobClusterDefinition, S3Source, CreateRoleDefinition, CreateRoleResponsefrom bodosdk.client import get_bodo_clientfrom typing import Listfrom uuid import UUIDkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)list_of_instance_roles = client.instance_role.list()role_to_use = Nonefor role in list_of_instance_roles:    if role.name == 'role_i_want_to_use':        role_to_use = role        break# wait for successful role creation and thenjob_definition = JobDefinition(    name='execute_s3_test',    args='test_s3_job.py',    source_config=S3Source(        bucket_path='s3://path-to-my-bucket/my_job_script_folder/',        bucket_region='us-east-1'    ),    cluster_object=JobClusterDefinition(        instance_type='c5.large',        accelerated_networking=False,        image_id='ami-0a2005b824a8758e5',        workers_quantity=2,        instance_role_uuid=result_create_role.uuid    ),    variables={},    timeout=120,    retries=0,    retries_delay=0,    retry_on_timeout=False)client.job.create(job_definition)```##### List jobs&lt;a id=&quot;list-jobs&quot;&gt;&lt;/a&gt;`BodoClient.job.list()`Returns list of all jobs defined in workspace.**Example:**```pythonfrom typing import Listfrom bodosdk.models import WorkspaceKeys, JobResponsefrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)jobs: List[JobResponse] = client.job.list()```##### Get job&lt;a id=&quot;get-job&quot;&gt;&lt;/a&gt;`BodoClient.job.get(job_uuid)`Returns specific job in workspace. Example:```pythonfrom bodosdk.models import WorkspaceKeys, JobResponsefrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)job: JobResponse = client.job.get('8c32aec5-7181-45cc-9e17-8aff35fd269e')```##### Get job logs&lt;a id=&quot;get-job-logs&quot;&gt;&lt;/a&gt;`BodoClient.job.get_job_logs(job_uuid)`Returns specific stdout and stderr urls along with Expiration timestamp in workspace.Also, Downloads specific stdout and stderr logs in workspace and additionally provides links as well + stdout: Standard output of the program execution+ stderr: Standard error messages of the program executionDownloads files as below and overrides if they already exist+ stdout_{uuid}.txt+ stderr_{uuid}.txtExample:```pythonfrom bodosdk.models import WorkspaceKeys, JobRunLogsResponsefrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)logs: JobRunLogsResponse = client.job.get_job_logs('8c32aec5-7181-45cc-9e17-8aff35fd269e')```##### Remove job&lt;a id=&quot;remove-job&quot;&gt;&lt;/a&gt;`BodoClient.job.delete(job_uuid)`Removes specific job from workspace. Example:```pythonfrom bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)client.job.remove('8c32aec5-7181-45cc-9e17-8aff35fd269e')```##### Get execution&lt;a id=&quot;get-execution&quot;&gt;&lt;/a&gt;`BodoClient.job.get_job_executions(job_uuid)`Gets all executions info for specific job. Result it's a list with one element (in future we might extend it)```pythonfrom bodosdk.models import WorkspaceKeys, JobExecutionfrom bodosdk.client import get_bodo_clientfrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)executions: List[JobExecution] = client.job.get_job_executions('8c32aec5-7181-45cc-9e17-8aff35fd269e')```##### Job waiter&lt;a id=&quot;job-waiter&quot;&gt;&lt;/a&gt;`BodoClient.job.get_waiter()`Get waiter object, which can be used to wait till job finish. Waiter has following method```python3from typing import Callabledef wait(        self,        uuid,        on_success: Callable = None,        on_failure: Callable = None,        on_timeout: Callable = None,        check_period=10,        timeout=None):  pass```By default returns job model if no callbacks is provided. There is option to pass callable objects as followingparameters:- `on_success` - will be executed on succes, job object passed as argument- `on_failure` - will be executed on failure, job object passed as argument- `on_timeout` - will be executed on timeout, job_uuid passed as argumentOther options are:- `check_period` - seconds between status checks- `timeout` - threshold in seconds after which Timeout error will be raised, `None` means no timeout**Example 1. Success callback:**```pythonfrom bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)waiter = client.job.get_waiter()def success_callback(job):    print('Job has finished')    return jobresult = waiter.wait('8c32aec5-7181-45cc-9e17-8aff35fd269e', on_success=success_callback)```**Example 2. Timeout callback:**```pythonfrom bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)waiter = client.job.get_waiter()def timeout_callback(job_uuid):    print(f'Waiter timeout for {job_uuid}')    return job_uuidresult = waiter.wait('8c32aec5-7181-45cc-9e17-8aff35fd269e', on_timeout=timeout_callback, timeout=1)```&lt;br/&gt;#### Bodo Platform Batch Jobs &lt;a id=&quot;bodo-platform-batch-jobs&quot;&gt;&lt;/a&gt;##### Create batch job definition &lt;a id=&quot;create-batch-job-definition&quot;&gt;&lt;/a&gt;`BodoClient.job.create_batch_job_definition(job_definition: CreateBatchJobDefinition)`Creates batch job definition in the given workspace.- **Example 1: Create batch job definition for a workspace source script**    ```python    from bodosdk.models import WorkspaceKeys, CreateBatchJobDefinition, BatchJobDefinition    from bodosdk.client import get_bodo_client    from bodosdk.models.job import CreateBatchJobDefinition, JobConfig, JobSource, JobSourceType, SourceCodeType, \        WorkspaceDef, RetryStrategy    keys = WorkspaceKeys(      client_id='XYZ',      secret_key='XYZ'    )    client = get_bodo_client(keys)    workspace_source_def = JobSource(        type=JobSourceType.WORKSPACE,        definition=WorkspaceDef(            path=&quot;Example-path/batch-job-defs&quot;,        ),    )    retry_strategy = RetryStrategy(        num_retries=1,        retry_on_timeout=False,        delay_between_retries=2,    )    jobConfig = JobConfig(        source=workspace_source_def,        source_code_type=SourceCodeType.PYTHON,        sourceLocation=&quot;test.py&quot;,        args=None,        retry_strategy=retry_strategy,        timeout=10000,        env_vars=None,    )    createBatchJobDef = CreateBatchJobDefinition(        name=&quot;test-job&quot;,        config=jobConfig,        description=&quot;test-batch-job-description-attempt&quot;,        cluster_config={            &quot;bodoVersion&quot;: &quot;2023.1.3&quot;,            &quot;instance_type&quot;: &quot;c5.2xlarge&quot;,            &quot;workers_quantity&quot;: 2,            &quot;accelerated_networking&quot;: False,        }, )    jobdef = client.job.create_batch_job_definition(createBatchJobDef)    ```- **Example 2: Create batch job definition for a git source script**  ```python  from bodosdk.models import WorkspaceKeys, CreateBatchJobDefinition, BatchJobDefinition  from bodosdk.client import get_bodo_client  from bodosdk.models.job import CreateBatchJobDefinition, JobConfig, JobSource, JobSourceType, SourceCodeType, \      WorkspaceDef, RetryStrategy  keys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ'  )  client = get_bodo_client(keys)  git_source_def = JobSource(      type=JobSourceType.GIT,      definition=GitDef(          repo_url='https://github.com/Bodo-inc/Bodo-examples.git',          username='XYZ',          token='XYZ'      ),  )  retry_strategy = RetryStrategy(      num_retries=1,      retry_on_timeout=False,      delay_between_retries=2,  )  jobConfig = JobConfig(      source=git_source_def,      source_code_type=SourceCodeType.PYTHON,      sourceLocation=&quot;test.py&quot;,      args=None,      retry_strategy=retry_strategy,      timeout=10000,      env_vars=None,  )  createBatchJobDef = CreateBatchJobDefinition(      name=&quot;test-job&quot;,      config=jobConfig,      description=&quot;test-batch-job-description-attempt&quot;,      cluster_config={          &quot;bodoVersion&quot;: &quot;2023.1.3&quot;,          &quot;instance_type&quot;: &quot;c5.2xlarge&quot;,          &quot;workers_quantity&quot;: 2,          &quot;accelerated_networking&quot;: False,      }, )  jobdef = client.job.create_batch_job_definition(createBatchJobDef)  ```&lt;br/&gt;#####  List batch job definitions &lt;a id=&quot;list-batch-job-definitions&quot;&gt;&lt;/a&gt;`BodoClient.job.list_batch_job_definitions()`Lists all batch job definitions in the given workspace.**Example:**```pythonfrom typing import Listfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.job import CreateJobRun, JobSource, JobRunStatus, BatchJobDefinitionResponsekeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)jobdefs: List[BatchJobDefinitionResponse] = client.job.list_batch_job_definitions()```&lt;br/&gt;#####  Get batch job definition by id &lt;a id=&quot;get-batch-job-definition-by-id&quot;&gt;&lt;/a&gt;`BodoClient.job.get_batch_job_definition(job_definition_id: str)`Gets specific batch job definition by id.**Example:**```pythonfrom typing import Listfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.job import CreateJobRun, JobSource, JobRunStatus, BatchJobDefinitionResponsekeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)jobdef: BatchJobDefinitionResponse = client.job.get_batch_job_definition('04412S5b-300e-42db-84d4-5f22f7506594')```&lt;br/&gt;##### Get batch job definition by name &lt;a id=&quot;get-batch-job-definition-by-name&quot;&gt;&lt;/a&gt;`BodoClient.job.get_batch_job_definition_by_name(name: str)`Gets specific batch job definition by id.**Example:**```pythonfrom typing import Listfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.job import CreateJobRun, JobSource, JobRunStatus, BatchJobDefinitionResponsekeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)jobdef: BatchJobDefinitionResponse = client.job.get_batch_job_definition('04412S5b-300e-42db-84d4-5f22f7506594')```&lt;br/&gt;#####  Remove batch job definition &lt;a id=&quot;remove-batch-job-definition&quot;&gt;&lt;/a&gt;`BodoClient.job.remove_batch_job_definition(job_definition_id: str)`Removes specific batch job definition by id.**Example:**```pythonfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.job import CreateJobRun, JobSource, JobRunStatus, BatchJobDefinitionResponsekeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)client.job.remove_batch_job_definition('04412S5b-300e-42db-84d4-5f22f7506594')```&lt;br/&gt;#####  Submit a batch job run &lt;a id=&quot;submit-a-batch-job-run&quot;&gt;&lt;/a&gt;`BodoClient.job.submit_batch_job_run(job_run: CreateJobRun)`Submits a job run for a given batch job definition.**Example:**```pythonfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.job import CreateJobRun, JobSource, JobRunStatus, BatchJobDefinitionResponsekeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)client.job.submit_batch_job_run(CreateJobRun(batchJobDefinitionUUID='04412S5b-300e-42db-84d4-5f22f7506594', clusterUUID='12936Q5z-109d-89yi-23c4-3d91u1219823'))```#####  List batch job runs &lt;a id=&quot;list-batch-job-runs&quot;&gt;&lt;/a&gt;`BodoClient.job.list_batch_job_runs()`| Parameter         | Type                | Description                              | Required          ||-------------------|---------------------|------------------------------------------|-------------------|| `batch_job_id`    | `List[str]`         | List of Ids of the batch job definitions | No                || `status`          | `List[JobRunStatus]`| List of Job Run Statuses                 | No                || `cluster_id`      | `List[str]`         | List of Ids of the clusters              | No                |Lists all batch job runs in the given workspace filtered by given parameters.**Example:**```pythonfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType,  WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.job import CreateJobRun, JobSource, JobRunStatus, BatchJobDefinitionResponsekeys = WorkspaceKeys(  client_id=&quot;XYZ&quot;,  secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)jobruns = client.job.list_batch_job_runs(statuses=[JobRunStatus.FAILED],                                         cluster_ids=['ba62e653-312a-490e-9457-71d7bc096959'])```&lt;br/&gt;##### List batch job runs by batch job name`BodoClient.job.list_job_runs_by_batch_job_name()`| Parameter            | Type                | Description                              | Required          ||----------------------|---------------------|------------------------------------------|-------------------|| `batch_job_names`    | `List[str]`         | List of Ids of the batch job definitions | No                || `status`             | `List[JobRunStatus]`| List of Job Run Statuses                 | No                || `cluster_id`         | `List[str]`         | List of Ids of the clusters              | No                |Lists all batch job runs in the given workspace filtered by given parameters.**Example:**```pythonfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.job import CreateJobRun, JobSource, JobRunStatus, BatchJobDefinitionResponsekeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)jobruns = client.job.list_job_runs_by_batch_job_name(batch_job_names=['production-job-1'], statuses=[JobRunStatus.FAILED], cluster_ids=['ba62e653-312a-490e-9457-71d7bc096959'])```&lt;br/&gt;#####  Get batch job run &lt;a id=&quot;get-batch-job-run&quot;&gt;&lt;/a&gt;`BodoClient.job.get_batch_job_run(job_run_id: str)`Gets specific batch job run by id.**Example:**```pythonfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)jobrun = client.job.get_batch_job_run('04412S5b-300e-42db-84d4-5f22f7506594')```&lt;br/&gt;#####  Cancel batch job run &lt;a id=&quot;cancel-batch-job-run&quot;&gt;&lt;/a&gt;`BodoClient.job.cancel_batch_job_run(job_run_id: str)`Cancels specific batch job run by id.**Example:**```pythonfrom bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)client.job.cancel_batch_job_run('04412S5b-300e-42db-84d4-5f22f7506594')```&lt;br/&gt;#####  Cancel all job runs on a cluster UUIDs &lt;a id=&quot;cancel-all-job-runs-on-a-cluster-uuids&quot;&gt;&lt;/a&gt;`BodoClient.job.cancel_all_job_runs(cluster_uuid: Union[List[str], List[UUID]])`Cancels all the job runs for a set of cluster UUIDs provided as a function parameter**Example:**```pythonfrom bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)client.job.cancel_all_job_runs(['04412S5b-300e-42db-84d4-5f22f7506594'])```#####  Check batch job run status &lt;a id=&quot;check-batch-job-run-status&quot;&gt;&lt;/a&gt;`BodoClient.job.check_job_run_status(job_run_id: str)`Checks status of specific batch job run by id.**Example:**```pythonfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)status = client.job.check_job_run_status('04412S5b-300e-42db-84d4-5f22f7506594')```&lt;br/&gt;#####  Submit SQL job run &lt;a id=&quot;submit-sql-job-run&quot;&gt;&lt;/a&gt;`BodoClient.job.submit_sql_job_run(sql_job_details: CreateSQLJobRun)`Submits a SQL query as a job run. The SQL job run contains the SQL query text and the cluster UUID on which the query will be executed along with catalog and the query tags. The query tags field accepts a JSON which returns the query tags associated with a query. !!! note    This needs a database [catalog][catalog] to be configured in the workspace.**Example:**```pythonfrom bodosdk.models import PersonalKeys, WorkspaceKeys, JobConfig, SourceCodeType, RetryStrategy, JobSourceType, \    WorkspaceDef, CreateBatchJobDefinitionfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_client(keys)jobrun = client.job.submit_sql_job_run(CreateSQLJobRun(            clusterUUID=cluster.uuid,            catalog=&quot;SNOWFLAKE_CATALOG&quot;,            sql_query_text=&quot;SELECT * FROM PUBLIC.TABLE LIMIT 10&quot;,            query_tags={&quot;DAG_ID&quot;:&quot;398482&quot;, &quot;MACHINE_ID&quot;: &quot;1934&quot;}))```&lt;br/&gt;##### Job Run waiter &lt;a id=&quot;job-run-waiter&quot;&gt;&lt;/a&gt;`BodoClient.job.get_job_run_waiter()`Returns a waiter object that waits until the job run uuid specified finishes.To wait for job run to be finished, invoke the waiter.wait() function,which can take the following parameters.```python3from typing import Callabledef wait(        self,        uuid,        on_success: Callable = None,        on_failure: Callable = None,        on_timeout: Callable = None,        check_period=10,        timeout=None):  pass```By default returns job model if no callbacks is provided. There is option to pass callable objects as followingparameters:- `on_success` - will be executed on succes, job object passed as argument- `on_failure` - will be executed on failure, job object passed as argument- `on_timeout` - will be executed on timeout, job_uuid passed as argumentOther options are:- `check_period` - seconds between status checks- `timeout` - threshold in seconds after which Timeout error will be raised, `None` means no timeout**Example 1. Success/Failure callbacks:**```pythonfrom bodosdk.models import WorkspaceKeys, CreateJobRunfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)input_job = CreateJobRun(clusterUUID='&lt;cluster-uuid&gt;', batchJobDefinitionUUID='&lt;batch-job-definition-uuid&gt;')job_run = client.job.submit_batch_job_run(input_job)waiter = client.job.get_job_run_waiter()def success_callback(job):    print(&quot;in success callback&quot;, job.status)def failure_callback(job):    print('in failure callback', job.status)result = waiter.wait(job_run.uuid, on_success=success_callback, on_failure=failure_callback)```**Example 2. Timeout callback:**```pythonfrom bodosdk.models import WorkspaceKeys, CreateJobRunfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)input_job = CreateJobRun(clusterUUID='&lt;cluster-uuid&gt;', batchJobDefinitionUUID='&lt;batch-job-definition-uuid&gt;')job_run = client.job.submit_batch_job_run(input_job)waiter = client.job.get_job_run_waiter()def timeout_callback(job_uuid):    print(f'Waiter timeout for {job_uuid}')    return job_uuidresult = waiter.wait(job_run.status, on_timeout=timeout_callback, timeout=1)```### Cluster resource &lt;a id=&quot;cluster-resource&quot;&gt;&lt;/a&gt;Module responsible for managing clusters in workspace.- [get available instance types](#available-instance-types)- [get available images](#available-images)- [create cluster](#create-cluster)- [list clusters](#list-clusters)- [get cluster](#get-cluster)- [remove cluster](#remove-cluster)- [scale cluster](#scale-cluster)- [get jobs for cluster](#list-jobs-for-cluster)- [modify cluster metadata](#modify-cluster-metadata)#### Availability Zone SelectionWhen creating a cluster, you can specify the availability zone in which the cluster will be created. However, cluster creation might fail if the availability zone does not have sufficient capacity to create the cluster.Even after the cluster is created, resuming or scaling it  might fail if the availability zone does not have sufficient capacity to resume or scale the cluster.Bodo supports an `auto_az` flag in cluster creation which is by default set to `True`. When enabledcreate, scale and resume tasks attempt to automatically select an availability zone with sufficient capacity for said cluster. If you want to disable this behavior, set `auto_az` to `False` in the `ClusterDefinition` object.### Available instance types&lt;a id=&quot;available-instance-types&quot;&gt;&lt;/a&gt;`BodoClient.cluster.get_available_instance_types(region:str)`Returns list of instance types available for given region```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)instance_types = client.cluster.get_available_instance_types('us-west-2')```### Available images&lt;a id=&quot;available-images&quot;&gt;&lt;/a&gt;`BodoClient.cluster.get_available_images(region:str)`Returns list of images available for given region```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)images = client.cluster.get_available_images('us-west-2')```### Create cluster&lt;a id=&quot;create-cluster&quot;&gt;&lt;/a&gt;`BodoClient.cluster.create(cluster_definition: ClusterDefinition)`Creates a cluster in the workspace based on the instance type, no of workers and whether the instance is a spot instance. The cluster can be configured to have an auto-pause and auto-stop time in minutes to pause and stop the cluster when there is no activity.If you choose to create a cluster with spot instances, please note:- Spot instance clusters are only supported on AWS at this moment.- Spot instance has lower cost at the expense of reliability. We recommend to use instance types with lower reclaim rate according to [AWS spot instance advisor](https://aws.amazon.com/ec2/spot/instance-advisor/).- Spot instance clusters cannot be paused/resumed. Please use stop/restart instead- Auto pause on spot instance clusters is not allowed. Please use auto stop instead- Spot instance clusters will have a 60 minute auto stop by default to avoid accidental long running clustersTo create a regular cluster:```python3from bodosdk.models import WorkspaceKeys, ClusterDefinitionfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)cluster_definition = ClusterDefinition(    name=&quot;test&quot;,    instance_type=&quot;c5.large&quot;,    workers_quantity=2,    use_spot_instance=False,     auto_pause=100,    image_id=&quot;ami-038d89f8d9470c862&quot;,    bodo_version=&quot;2022.4&quot;,    description=&quot;my desc here&quot;,    auto_az=False,)result_create = client.cluster.create(cluster_definition)```To create a spot instance cluster:```python3from bodosdk.models import WorkspaceKeys, ClusterDefinitionfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)cluster_definition = ClusterDefinition(    name=&quot;test-spot&quot;,    instance_type=&quot;c5.large&quot;,    workers_quantity=2,    use_spot_instance=True,     auto_stop=100,    image_id=&quot;ami-038d89f8d9470c862&quot;,    bodo_version=&quot;2022.4&quot;,    description=&quot;my desc here&quot;,    auto_az=False,)result_create = client.cluster.create(cluster_definition)```### List clusters&lt;a id=&quot;list-clusters&quot;&gt;&lt;/a&gt;```BodoClient.cluster.list()```Returns list of all clusters in workspace```python3from bodosdk.models import WorkspaceKeys, ClusterResponsefrom bodosdk.client import get_bodo_clientfrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)clusters: List[ClusterResponse] = client.cluster.list()```### Get cluster&lt;a id=&quot;get-cluster&quot;&gt;&lt;/a&gt;```BodoClient.cluster.get(cluster_uuid)```Returns cluser by uuid```python3from bodosdk.models import WorkspaceKeys, ClusterResponsefrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)clusters: ClusterResponse = client.cluster.get('&lt;CLUSTER-UUID&gt;')```### Remove cluster&lt;a id=&quot;remove-cluster&quot;&gt;&lt;/a&gt;```BodoClient.client.remove(cluster_uuid, force_remove=False, mark_as_terminated=False)```Method removing cluster from platform- force_remove: try to remove cluster even if something on cluster is happening- mark_as_terminated: mark cluster as removed without removing resources, may be useful if cluster creation failed and common removing is failing```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)client.cluster.remove('&lt;CLUSTER-UUID&gt;')```### Stop cluster&lt;a id=&quot;stop-cluster&quot;&gt;&lt;/a&gt;```BodoClient.cluster.stop(cluster_uuid)```Stops any cluster activity. You will not incur any charges for stopped cluster. You can restart it again at any time.```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)client.cluster.stop('&lt;CLUSTER-UUID&gt;')```### Restart cluster&lt;a id=&quot;restart-cluster&quot;&gt;&lt;/a&gt;```BodoClient.cluster.restart(cluster_uuid)```Restarts cluster. You can restart cluster only if it is stopped.```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)client.cluster.restart('&lt;CLUSTER-UUID&gt;')```### Scale cluster&lt;a id=&quot;scale-cluster&quot;&gt;&lt;/a&gt;```BodoClient.cluster.scale(scale_cluster: ScaleCluster)```Changes number of nodes in cluster (AWS only)```python3from bodosdk.models import WorkspaceKeys, ScaleCluster, ClusterResponsefrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)NEW_WORKERS_QUANTITY = 3scale_cluster = ScaleCluster(    uuid='&lt;CLUSTER-UUID&gt;',    workers_quantity=NEW_WORKERS_QUANTITY)cluster: ClusterResponse = client.cluster.scale(scale_cluster)```### List jobs for a cluster&lt;a id=&quot;list-jobs-for-cluster&quot;&gt;&lt;/a&gt;```BodoClient.cluster.list_jobs(uuid)```Gets all jobs for cluster```python3from bodosdk.models import WorkspaceKeys, JobResponsefrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)jobs: List[JobResponse] = client.cluster.list_jobs(uuid)```Get active jobs for cluster```python3from bodosdk.models import WorkspaceKeys, JobResponse, JobStatusfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)jobs: List[JobResponse] = client.cluster.list_jobs(uuid, status=[JobStatus.NEW, JobStatus.INPROGRESS])```### Modify Cluster metadata &lt;a id=&quot;modify-cluster-metadata&quot;&gt;&lt;/a&gt;```BodoClient.cluster.modify(ModifyCluster(...))```This function can be used to edit cluster metadata for a given cluster. The properties that we can edit aredescription, autopause time, autostop time, bodo-version, instance type, instance role, flag for auto availability zone selection and the number of workers.Changing the number of workers will kick off a scaling event on the cluster, which will resume the cluster if it is in paused state.The modify function also supports modifying a subset of property part if the ModifyCluster object like listed in the example below. The cluster modification can only happen when the cluster is in stopped state. The fields that aren't required tobe modified are optional and don't necessarily have to be passed during the call to the API.Note: Disabling the `auto_az` flag without specifying an `availability_zone` in the same request might result in the cluster failing.      So make sure to provide a fallback zone to avoid failures.       ```python3from bodosdk.models import WorkspaceKeys, ModifyCluster, ClusterResponsefrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')role_definition = CreateRoleDefinition(  name=&quot;test-sdk-role-creation&quot;,  description=&quot;testing-instance-role-creation&quot;,  data=InstanceRole(role_arn=&quot;arn:aws:iam::427443013497:role/testing_bucket_with_my_script&quot;))result_create_role: CreateRoleResponse = client.instance_role.create(role_definition)client = get_bodo_client(keys)modify_cluster = ModifyCluster(    uuid=&lt;cluster-uuid&gt;,    auto_pause=60,    auto_stop=0,    workers_quantity=4,    description=&quot;using the SDK&quot;,    instance_type=&quot;c5.large&quot;,    instance_role_uuid=result_create_role.uuid,    bodo_version=&quot;2022.4&quot;,    auto_az=True,)partial_modify_cluster = ModifyCluster(    uuid=&lt;cluster-uuid&gt;,    autopause=120,)new_cluster: List[ClusterResponse] = client.cluster.modify(modify_cluster)new_cluster_partial: List[ClusterResponse] = client.cluster.modify(partial_modify_cluster)```#### Detach Custom Instance RoleReplace the custom instance role with default role which is automatically created for a cluster```detach_custom_instance_role = ModifyCluster(    uuid=&lt;cluster-uuid&gt;,    instance_role_uuid='default',)new_cluster_partial: List[ClusterResponse] = client.cluster.modify(detach_custom_instance_role)```### Workspace resource&lt;a id=&quot;workspace-resource&quot;&gt;&lt;/a&gt;Module responsible for managing workspaces in an organization.- [workspace getting started](#workspace-getting-started)- [create workspace](#create-workspace)- [list workspaces](#list-workspaces)- [get workspace](#get-workspace)- [remove workspace](#remove-workspace)- [assign user](#assign-user)### Workspace getting started&lt;a id=&quot;workspace-getting-started&quot;&gt;&lt;/a&gt;In order to work with Workspace, users need to generate Personal Tokens, under Admin Console, from the Bodo Platform Dashboard.Then instantiate a PersonalKeys object with the generated client_id and secret_id. Then Pass in this personal key whileinstantiating a client object```from bodosdk.models import PersonalKeyspersonal_keys = PersonalKeys(    client_id='&lt;CLIENT-ID&gt;',    secret_id='&lt;SECRET-ID&gt;',)client = get_bodo_organization_client(personal_keys)```### Create Workspace&lt;a id=&quot;create-workspace&quot;&gt;&lt;/a&gt;```BodoClient.workspace.create(workspace_definition: WorkspaceDefinition)```Creates a workspace with the specifications passed in through a WorkspaceDefinition object under theuser's organization```from bodosdk.models import PersonalKeysfrom bodosdk.models import WorkspaceDefinitionpersonal_keys = PersonalKeys(    client_id='&lt;CLIENT-ID&gt;',    secret_id='&lt;SECRET-ID&gt;',)client = get_bodo_organization_client(personal_keys)wd = WorkspaceDefinition(    name=&quot;&lt;WORSPACE-NAME&gt;&quot;,    cloud_config_uuid=&quot;&lt;CONFIG-UUID&gt;&quot;,    region=&quot;&lt;WORKSPACE-REGION&gt;&quot;)resp = client.workspace.create(wd)```### List Workspaces&lt;a id=&quot;list-workspaces&quot;&gt;&lt;/a&gt;```BodoClient.workspace.list()```Returns a list of all workspaces defined under this organization. The with_task boolean controls printing outtasks running in the workspaces. The returned list is a list of GetWorkspaceResponse object```from bodosdk.models import PersonalKeyspersonal_keys = PersonalKeys(    client_id='&lt;CLIENT-ID&gt;',    secret_id='&lt;SECRET-ID&gt;',)client = get_bodo_organization_client(personal_keys)resp = client.workspace.list(with_tasks=False)```### Get Workspace&lt;a id=&quot;get-workspace&quot;&gt;&lt;/a&gt;```BodoClient.workspace.get(uuid: str)```Returns information about the workspace with the given uuid. Returns a GetWorkspaceResponse object with details about the workspace uuid mentioned.```from bodosdk.models import PersonalKeyspersonal_keys = PersonalKeys(    client_id='&lt;CLIENT-ID&gt;',    secret_id='&lt;SECRET-ID&gt;',)client = get_bodo_organization_client(personal_keys)resp = client.workspace.get(&quot;&lt;WORKSPACE-UUID&gt;&quot;)```### Remove Workspace&lt;a id=&quot;remove-workspace&quot;&gt;&lt;/a&gt;```BodoClient.workspace.remove(uuid: str)```Removes the workspace with the passed in uuid. The operation is only successful if all resources within the workspaces(jobs, clusters, notebooks) are terminated. Otherwise, returns an error. Returns None if successful```from bodosdk.models import PersonalKeyspersonal_keys = PersonalKeys(    client_id='&lt;CLIENT-ID&gt;',    secret_id='&lt;SECRET-ID&gt;',)client = get_bodo_organization_client(personal_keys)resp = client.workspace.remove(&quot;&lt;WORKSPACE-UUID&gt;&quot;)```### Assign user&lt;a id=&quot;assign-user&quot;&gt;&lt;/a&gt;```BodoClient.workspace.remove(uuid: str)```Assign user to workspace.```from bodosdk.models import PersonalKeyspersonal_keys = PersonalKeys(    client_id='&lt;CLIENT-ID&gt;',    secret_id='&lt;SECRET-ID&gt;',)client = get_bodo_organization_client(personal_keys)workspace_uuid = &quot;&lt;some uuid&gt;&quot;users: List[UserAssignment] = [    UserAssignment(        email=&quot;example@example.com&quot;,        skip_email=True,        bodo_role=BodoRole.ADMIN    )]client.workspace.assign_users(workspace_uuid, users):```## Cloud Config&lt;a id=&quot;cloud-config&quot;&gt;&lt;/a&gt;Module responsible for creating cloud configurations for organization.- [create cloud configuration](#create-config)- [list cloud configurations](#list-configs)- [get cloud config](#get-config)### Create config&lt;a id=&quot;create-config&quot;&gt;&lt;/a&gt;```BodoClient.cloud_config.create(config: Union[CreateAwsCloudConfig, CreateAzureCloudConfig])```Create cloud configuration for cloudAWS example```python3from bodosdk.models import OrganizationKeys, CreateAwsProviderData, CreateAwsCloudConfig, AwsCloudConfigfrom bodosdk.client import get_bodo_clientkeys = OrganizationKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)config = CreateAwsCloudConfig(    name='test',    aws_provider_data=CreateAwsProviderData(        tf_backend_region='us-west-1',        access_key_id='xyz',        secret_access_key='xyz'    ))config: AwsCloudConfig = client.cloud_config.create(config)```Azure example```python3from bodosdk.models import OrganizationKeys, CreateAzureProviderData, CreateAzureCloudConfig, AzureCloudConfigfrom bodosdk.client import get_bodo_clientkeys = OrganizationKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)config = CreateAzureCloudConfig(    name='test',    azure_provider_data=CreateAzureProviderData(        tf_backend_region='eastus',        tenant_id='xyz',        subscription_id='xyz',        resource_group='MyResourceGroup'    ))config: AzureCloudConfig = client.cloud_config.create(config)```### Get config&lt;a id=&quot;list-configs&quot;&gt;&lt;/a&gt;```BodoClient.cloud_config.list()```Get list of cloud configs.```python3from bodosdk.models import OrganizationKeys, AzureCloudConfig, AwsCloudConfigfrom bodosdk.client import get_bodo_clientfrom typing import Union, Listkeys = OrganizationKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)configs: List[Union[AwsCloudConfig, AzureCloudConfig]] = client.cloud_config.list()```### Get config&lt;a id=&quot;get-config&quot;&gt;&lt;/a&gt;```BodoClient.cloud_config.get(uuid: Union[str, UUID])```Get cloud config by uuid.```python3from bodosdk.models import OrganizationKeys, AzureCloudConfig, AwsCloudConfigfrom bodosdk.client import get_bodo_clientfrom typing import Unionkeys = OrganizationKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)config: Union[AwsCloudConfig, AzureCloudConfig] = client.cloud_config.get('8c32aec5-7181-45cc-9e17-8aff35fd269e')```### Instance Role Manager&lt;a id=&quot;instance-role&quot;&gt;&lt;/a&gt;Module responsible for managing AWS roles in workspace.- [create role](#create-role)- [list roles](#list-roles)- [get role](#get-role)- [remove role](#remove-role)### Create role&lt;a id=&quot;create-role&quot;&gt;&lt;/a&gt;```BodoClient.instance_role.create()```Creates an AWS role with the specified role definition with a given AWS role arn.```python3from bodosdk.models import WorkspaceKeys, CreateRoleDefinition, CreateRoleResponsefrom bodosdk.client import get_bodo_clientfrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)role_definition = CreateRoleDefinition(    name=&quot;test-sdk-role-creation&quot;,    description=&quot;testing&quot;,    data=InstanceRole(role_arn=&quot;arn:aws:iam::1234567890:role/testing&quot;))result_create:CreateRoleResponse = client.instance_role.create(role_definition)```### List roles&lt;a id=&quot;list-roles&quot;&gt;&lt;/a&gt;```BodoClient.instance_role.list()```Returns list of all roles in workspace```python3from bodosdk.models import WorkspaceKeys, InstanceRoleItemfrom bodosdk.client import get_bodo_clientfrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)result_list:List[InstanceRoleItem] = client.instance_role.list()```### Get role&lt;a id=&quot;get-role&quot;&gt;&lt;/a&gt;```BodoClient.instance_role.get(cluster_uuid)```Returns role by uuid```python3from bodosdk.models import WorkspaceKeys, InstanceRoleItemfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)clusters: InstanceRoleItem = client.instance_role.get('&lt;CLUSTER-UUID&gt;')```### Remove role&lt;a id=&quot;remove-role&quot;&gt;&lt;/a&gt;```BodoClient.instance_role.remove(cluster_uuid, mark_as_terminated=False)```Method removing role from a workspace- mark_as_terminated: mark role as removed without removing resources, may be useful if role creation failed and common removing is failing```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)client.instance_role.remove('&lt;ROLE-UUID&gt;')```## Catalog&lt;a id=&quot;catalog&quot;&gt;&lt;/a&gt;Module responsible for storing database catalogs- [create catalog](#create-catalog)- [get catalog by uuid](#get-catalog-uuid)- [get catalog by name](#get-catalog-name)- [list catalogs](#list-catalogs)- [update catalog](#update-catalog)- [remove catalog](#remove-catalog-uuid)- [remove all catalogs](#remove-all-catalogs)### Create Catalog&lt;a id=&quot;create-catalog&quot;&gt;&lt;/a&gt;```BodoClient.catalog.create()```Stores the Database Catalog```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.catalog import CatalogDefinition, SnowflakeConnectionDefinitionkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)# Type Support for Snowflakesnowflake_definition = SnowflakeConnectionDefinition(    host=&quot;test.snowflake.com&quot;,    port=443,    username=&quot;test-username&quot;,    password=&quot;password&quot;,    database=&quot;test-db&quot;,    warehouse=&quot;test-wh&quot;,    role=&quot;test-role&quot;)# For other databases, need to defined as JSONconnection_data = {    &quot;host&quot;: &quot;test.db.com&quot;,    &quot;username&quot;: &quot;test-username&quot;,    &quot;password&quot;: &quot;*****&quot;,    &quot;database&quot;: &quot;test-db&quot;,}catalog_definition = CatalogDefinition(    name=&quot;catalog-1&quot;,    description=&quot;catalog description&quot;,    catalogType=&quot;SNOWFLAKE&quot;, # Currently Support Snowflake    data=snowflake_definition)client.catalog.create(catalog_definition)```### Get Catalog by UUID&lt;a id=&quot;get-catalog-uuid&quot;&gt;&lt;/a&gt;```BodoClient.catalog.get_catalog()```Retrieves the Catalog details by UUID```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.catalog import CatalogInfokeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)catalog_info: CatalogInfo = client.catalog.get(&quot;&lt;CATALOG-UUID&gt;&quot;)```### Get Catalog by Name&lt;a id=&quot;get-catalog-name&quot;&gt;&lt;/a&gt;```BodoClient.catalog.get_by_name()```Retrieves the Catalog details by UUID```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.catalog import CatalogInfokeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)catalog_info: CatalogInfo = client.catalog.get_by_name(&quot;test-catalog&quot;)```### List Catalogs&lt;a id=&quot;list-catalogs&quot;&gt;&lt;/a&gt;```BodoClient.catalog.list()```Retrieves all catalogs in a workspace.```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.catalog import CatalogInfokeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)catalog_info: CatalogInfo = client.catalog.list()```### Update Catalog&lt;a id=&quot;update-catalog&quot;&gt;&lt;/a&gt;```BodoClient.catalog.update()```Updates the Database Catalog```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.catalog import CatalogDefinition, SnowflakeConnectionDefinitionkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)# Type Support for Snowflakesnowflake_definition = SnowflakeConnectionDefinition(    host=&quot;update.snowflake.com&quot;,    port=443,    username=&quot;test-username&quot;,    password=&quot;password&quot;,    database=&quot;test-db&quot;,    warehouse=&quot;test-wh&quot;,    role=&quot;test-role&quot;)new_catalog_def = CatalogDefinition(    name=&quot;catalog-1&quot;,    description=&quot;catalog description&quot;,    catalogType=&quot;SNOWFLAKE&quot;, # Currently Support Snowflake    data=snowflake_definition)client.catalog.update(&quot;&lt;CATALOG-UUID&gt;&quot;, new_catalog_def)```### Remove Catalog by UUID&lt;a id=&quot;remove-catalog-uuid&quot;&gt;&lt;/a&gt;```BodoClient.catalog.remove()```Deletes a Database Catalog by UUID```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)client.catalog.remove(&quot;&lt;CATALOG-UUID&gt;&quot;)```### Remove all Catalogs&lt;a id=&quot;remove-all-catalogs&quot;&gt;&lt;/a&gt;```BodoClient.catalog.remove()```Deletes a Database Catalog by UUID```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)client.catalog.remove_all()```## Secret Groups&lt;a id=&quot;secret-group&quot;&gt;&lt;/a&gt;Module responsible for separating secrets into multiple groups.A default secret group will be created at the time of workspace creation.Users can define custom secret groups using the following functions.- [create secret group](#create-secret-group)- [list secret groups](#list-secret-groups)- [update secret group](#update-secret-group)- [delete secret group](#delete-secret-group)### Create Secret Group&lt;a id=&quot;create-secret-group&quot;&gt;&lt;/a&gt;```BodoClient.secret_group.create()```Create a secret group```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secret_group import SecretGroupDefinitionkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)secret_group_definition = SecretGroupDefinition(    name=&quot;sg-1&quot;, # Name should be unique to that workspace    description=&quot;secret group description&quot;,)client.secret_group.create(secret_group_definition)```### List Secret Groups&lt;a id=&quot;list-secret-groups&quot;&gt;&lt;/a&gt;```BodoClient.secret_group.list()```List all the secret groups in a workspace.```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secret_group import SecretGroupInfofrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)groups_list: List[SecretGroupInfo] = client.secret_group.list()```### Update Secret Group&lt;a id=&quot;update-secret-group&quot;&gt;&lt;/a&gt;```BodoClient.secret_group.update()```Updates the secret group description```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secret_group import SecretGroupInfo, SecretGroupDefinitionkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)update_secret_group_def = SecretGroupDefinition(    name=&quot;sg-1&quot;, # Cannot modify the name in the group    description=&quot;secret group description&quot;,)groups_data: SecretGroupInfo = client.secret_group.update(update_secret_group_def)```### Delete Secret Group&lt;a id=&quot;delete-secret-group&quot;&gt;&lt;/a&gt;```BodoClient.secret_group.remove()```Removes the secret group.**Note: Can only remove if all the secrets in the group are deleted**```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)client.secret_group.remove(&quot;&lt;secret-group-uuid&gt;&quot;)```## Secrets&lt;a id=&quot;secrets&quot;&gt;&lt;/a&gt;Module responsible for creating secrets.- [create secret](#create-secrets)- [get secret](#get-secret)- [list secrets](#list-secrets)- [list secrets by secret group](#list-secrets-by-secret-group)- [update secret](#update-secret)- [delete secret](#delete-secret)### Create Secret&lt;a id=&quot;create-secret&quot;&gt;&lt;/a&gt;```BodoClient.secrets.create()```Create the secret in a secret group.```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secrets import SecretDefinitionkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)secret_definition = SecretDefinition(    name=&quot;secret-1&quot;,    data={        &quot;key&quot;: &quot;value&quot;    },    secret_group=&quot;&lt;secret-group-name&gt;&quot; #If not defined, defaults to default to secret group)client.secrets.create(secret_definition)```### Get Secrets by UUID&lt;a id=&quot;get-secret&quot;&gt;&lt;/a&gt;```BodoClient.secrets.get()```Retrieves the Secrets by UUID```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secrets import SecretInfokeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)secret_info: SecretInfo = client.secrets.get(&quot;&lt;secret-uuid&gt;&quot;)```### List Secrets by Workspace&lt;a id=&quot;list-secrets&quot;&gt;&lt;/a&gt;```BodoClient.secrets.list()```List the secrets in a workspace```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secrets import SecretInfofrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)secrets_info: List[SecretInfo] = client.secrets.list()```### List Secrets by Secret Group&lt;a id=&quot;list-secrets-by-secret-group&quot;&gt;&lt;/a&gt;```BodoClient.secrets.list_by_group()```List the Secrets by Secret Group```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secrets import SecretInfofrom typing import Listkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)secrets_info: List[SecretInfo] = client.secrets.list_by_group(&quot;&lt;secret-group-name&gt;&quot;)```### Update Secret&lt;a id=&quot;update-secret&quot;&gt;&lt;/a&gt;```BodoClient.secrets.update()```Updates the secret.```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secrets import SecretDefinitionkeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)update_secret_def = SecretDefinition(    data={        &quot;key&quot;: &quot;value&quot;    })client.secrets.update(&quot;&lt;secret-uuid&gt;&quot;, update_secret_def)```### Delete Secrets by UUID&lt;a id=&quot;delete-secret&quot;&gt;&lt;/a&gt;```BodoClient.secrets.remove()```Delete the Secret by UUID```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_clientfrom bodosdk.models.secrets import SecretInfokeys = WorkspaceKeys(    client_id='XYZ',    secret_key='XYZ')client = get_bodo_client(keys)secret_info: SecretInfo = client.secrets.remove(&quot;&lt;secret-uuid&gt;&quot;)```### Billing module &lt;a id=&quot;billing-module&quot;&gt;&lt;/a&gt;Billing module provides access to billing information related to a particular workspace. - [Get job run billing report CSV](#job-run-billing)- [Get cluster level billing report CSV](#cluster-level-billing)##### Get job run billing report CSV &lt;a id = &quot;job-run-billing&quot;&gt;&lt;/a&gt;`BodoClient.job.get_job_run_price_export(startTime: str, endTime: str)`Provides a CSV download link for the billing report, specifically at the job run level, displaying EC2 costs per job runwithin the defined startTime and endTime range and for a particular workspaceUUID which can be obtained from [list-workspaces](#list-workspaces). The billing report includes essential fields such as start time, end time, duration, worker count, instance type, and associated costs. This link remains active for a duration of 7 days and is exclusively available to AWS customers. It's important to note that reports can only be generated for a 15-day time period.* Example 1 - CSV report for date rangeThe following Python code generates a CSV report for a specified date range, starting from September 5th toSeptember 6th for a given workspace UUID. . You can also provide the same date range with a timestamp in the ISO8601 format, such as`2023-09-05T11:15:00Z`. After running the code, it will display a link to the CSV report that can be clicked toinitiate the download:```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_organization_clientkeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_organization_client(keys)print(client.billing.get_job_run_price_export('2023-09-05', '2023-09-06', 'WORKSPACE-UUID'))```##### Get cluster level billing report CSV &lt;a id = &quot;cluster-level-billing&quot;&gt;&lt;/a&gt;Provides a CSV download link for the billing report, specifically at the cluster level, displaying EC2 costs per cluster runwithin the defined startTime and endTime range and for a particular workspaceUUID which can be obtained from [list-workspaces](#list-workspaces) The billing report includes essential fields such as start time, end time, duration, worker count, instance type, and associated costs. This link remains active for a duration of 7 days and is exclusively available to AWS customers. It's important to note that reports can only be generated for a 15-day time period.* Example 1 - CSV report for date rangeThe following Python code generates a CSV report for a specified date range, starting from September 5th toSeptember 6th for a given workspace UUID. You can also provide the same date range with a timestamp in the ISO8601 format, such as `2023-09-05T11:15:00Z`. After running the code, it will display a link to the CSV report that can be clicked to initiate the download:```python3from bodosdk.models import WorkspaceKeysfrom bodosdk.client import get_bodo_organization_clientkeys = WorkspaceKeys(    client_id=&quot;XYZ&quot;,    secret_key=&quot;XYZ&quot;)client = get_bodo_organization_client(keys)print(client.billing.get_cluster_price_export('2023-09-05', '2023-09-06', 'WORKSPACE-UUID'))```</longdescription>
</pkgmetadata>