<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Logo Optimus](https://raw.githubusercontent.com/ironmussa/Optimus/master/images/logoOptimus.png)](https://hioptimus.com) [![PyPI version](https://badge.fury.io/py/optimuspyspark.svg)](https://badge.fury.io/py/optimuspyspark) [![Build Status](https://travis-ci.org/ironmussa/Optimus.svg?branch=master)](https://travis-ci.org/ironmussa/Optimus) [![Documentation Status](https://readthedocs.org/projects/optimus-ironmussa/badge/?version=latest)](http://optimus-ironmussa.readthedocs.io/en/latest/?badge=latest)  [![built_by iron](https://img.shields.io/badge/built_by-iron-FF69A4.svg)](http://ironmussa.com) [![Updates](https://pyup.io/repos/github/ironmussa/Optimus/shield.svg)](https://pyup.io/repos/github/ironmussa/Optimus/)  [![GitHub release](https://img.shields.io/github/release/ironmussa/optimus.svg)](https://github.com/ironmussa/Optimus/) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/02b3ba0fe2b64d6297c6b8320f8b15a7)](https://www.codacy.com/app/argenisleon/Optimus?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=ironmussa/Optimus&amp;amp;utm_campaign=Badge_Grade)[![Coverage Status](https://coveralls.io/repos/github/ironmussa/Optimus/badge.svg?branch=master)](https://coveralls.io/github/ironmussa/Optimus?branch=master) [![Mentioned in Awesome Data Science](https://awesome.re/mentioned-badge.svg)](https://github.com/bulutyazilim/awesome-datascience)![Discord](https://img.shields.io/discord/579030865468719104.svg)[![Downloads](https://pepy.tech/badge/optimuspyspark)](https://pepy.tech/project/optimuspyspark)[![Downloads](https://pepy.tech/badge/optimuspyspark/month)](https://pepy.tech/project/optimuspyspark/month)[![Downloads](https://pepy.tech/badge/optimuspyspark/week)](https://pepy.tech/project/optimuspyspark/week)**NOTE: We are working hard in version 3.0 https://github.com/ironmussa/Optimus/tree/develop-3.0. in which you could use pandas, cudf, Dask, Dask/cudf as backend using a unified API.**To launch a live notebook server to test optimus using binder or Colab, click on one of the following badges:[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/ironmussa/Optimus/master)[![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ironmussa/Optimus/blob/master/examples/10_min_from_spark_to_pandas_with_optimus.ipynb)Optimus is the missing framework to profile, clean, process and do ML in a distributed fashion using Apache Spark(PySpark).## Installation (pip):  In your terminal just type  `pip install optimuspyspark`### Requirements* Apache Spark&gt;= 2.4.0  * Python&gt;=3.6  ## Examples You can go to the 10 minutes to Optimus [notebook](https://github.com/ironmussa/Optimus/blob/master/examples/10_min_from_spark_to_pandas_with_optimus.ipynb) where you can find the basic to start working. Also you can go to the [examples](examples/) folder to found specific notebooks about data cleaning, data munging, profiling, data enrichment and how to create ML and DL models.Besides check the [Cheat Sheet](https://htmlpreview.github.io/?https://github.com/ironmussa/Optimus/blob/master/docs/cheatsheet/optimus_cheat_sheet.html) ## Documentation[![Documentation](https://media.readthedocs.com/corporate/img/header-logo.png)](http://docs.hioptimus.com/en/latest/)  ## Feedback Feedback is what drive Optimus future, so please take a couple of minutes to help shape the Optimus' Roadmap:  http://bit.ly/optimus_survey  Also if you want to a suggestion or feature request use https://github.com/ironmussa/optimus/issues## Start Optimus```pythonfrom optimus import Optimusop= Optimus(verbose=True)```You also can use an already created Spark session:```pythonfrom pyspark.sql import SparkSessionfrom optimus import Optimusspark = SparkSession.builder.appName('optimus').getOrCreate()op= Optimus(spark)```## Loading dataNow Optimus can load data in csv, json, parquet, avro, excel from a local file or URL.```python#csvdf = op.load.csv(&quot;../examples/data/foo.csv&quot;)#json# Use a local filedf = op.load.json(&quot;../examples/data/foo.json&quot;)# Use a urldf = op.load.json(&quot;https://raw.githubusercontent.com/ironmussa/Optimus/master/examples/data/foo.json&quot;)# parquetdf = op.load.parquet(&quot;../examples/data/foo.parquet&quot;)# avro# df = op.load.avro(&quot;../examples/data/foo.avro&quot;).table(5)# excel df = op.load.excel(&quot;../examples/data/titanic3.xls&quot;)```Also you can load data from oracle, redshift, mysql and postgres. See ***Database connection***## Saving Data```python#csvdf.save.csv(&quot;data/foo.csv&quot;)# jsondf.save.json(&quot;data/foo.json&quot;)# parquetdf.save.parquet(&quot;data/foo.parquet&quot;)# avro#df.save.avro(&quot;examples/data/foo.avro&quot;)```Also you can save data to oracle, redshift, mysql and postgres. See ***Database connection***## Handling Spark jars, packages and repositoriesWith optimus is easy to loading jars, packages and repos. You can init optimus/spark like ```pythonop= Optimus(repositories = &quot;myrepo&quot;, packages=&quot;org.apache.spark:spark-avro_2.12:2.4.3&quot;, jars=&quot;my.jar&quot;, driver_class_path=&quot;this_is_a_jar_class_path.jar&quot;, verbose= True)```## Create dataframesAlso you can create a dataframe from scratch```pythonfrom pyspark.sql.types import *from datetime import date, datetimedf = op.create.df(    [        (&quot;names&quot;, &quot;str&quot;, True),         (&quot;height(ft)&quot;,&quot;int&quot;, True),         (&quot;function&quot;, &quot;str&quot;, True),         (&quot;rank&quot;, &quot;int&quot;, True),         (&quot;age&quot;,&quot;int&quot;,True),        (&quot;weight(t)&quot;,&quot;float&quot;,True),        (&quot;japanese name&quot;, ArrayType(StringType()), True),        (&quot;last position seen&quot;, &quot;str&quot;, True),        (&quot;date arrival&quot;, &quot;str&quot;, True),        (&quot;last date seen&quot;, &quot;str&quot;, True),        (&quot;attributes&quot;, ArrayType(FloatType()), True),        (&quot;DateType&quot;),        (&quot;Tiemstamp&quot;),        (&quot;Cybertronian&quot;, &quot;bool&quot;, True),         (&quot;NullType&quot;, &quot;null&quot;, True),    ],    [        (&quot;Optim'us&quot;, 28, &quot;Leader&quot;, 10, 5000000, 4.3, [&quot;Inochi&quot;, &quot;Convoy&quot;], &quot;19.442735,-99.201111&quot;, &quot;1980/04/10&quot;,         &quot;2016/09/10&quot;, [8.5344, 4300.0], date(2016, 9, 10), datetime(2014, 6, 24), True,         None),        (&quot;bumbl#ebéé  &quot;, 17, &quot;Espionage&quot;, 7, 5000000, 2.0, [&quot;Bumble&quot;, &quot;Goldback&quot;], &quot;10.642707,-71.612534&quot;, &quot;1980/04/10&quot;,         &quot;2015/08/10&quot;, [5.334, 2000.0], date(2015, 8, 10), datetime(2014, 6, 24), True,         None),        (&quot;ironhide&amp;&quot;, 26, &quot;Security&quot;, 7, 5000000, 4.0, [&quot;Roadbuster&quot;], &quot;37.789563,-122.400356&quot;, &quot;1980/04/10&quot;,         &quot;2014/07/10&quot;, [7.9248, 4000.0], date(2014, 6, 24), datetime(2014, 6, 24), True,         None),        (&quot;Jazz&quot;, 13, &quot;First Lieutenant&quot;, 8, 5000000, 1.80, [&quot;Meister&quot;], &quot;33.670666,-117.841553&quot;, &quot;1980/04/10&quot;,         &quot;2013/06/10&quot;, [3.9624, 1800.0], date(2013, 6, 24), datetime(2014, 6, 24), True, None),        (&quot;Megatron&quot;, None, &quot;None&quot;, 10, 5000000, 5.70, [&quot;Megatron&quot;], None, &quot;1980/04/10&quot;, &quot;2012/05/10&quot;, [None, 5700.0],         date(2012, 5, 10), datetime(2014, 6, 24), True, None),        (&quot;Metroplex_)^$&quot;, 300, &quot;Battle Station&quot;, 8, 5000000, None, [&quot;Metroflex&quot;], None, &quot;1980/04/10&quot;, &quot;2011/04/10&quot;,         [91.44, None], date(2011, 4, 10), datetime(2014, 6, 24), True, None),    ], infer_schema = True).h_repartition(1)```With .table() you have a beautifull way to show your data. You have extra information like column number, column data type and marked white spaces ```pythondf.table()```![](readme/images/table.png)Also you can create a dataframe from a panda dataframe```pythonimport pandas as pdpdf = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c',3:'d'},                    'B': {0: 1, 1: 3, 2: 5,3:7},                       'C': {0: 2, 1: 4, 2: 6,3:None},                       'D': {0:'1980/04/10',1:'1980/04/10',2:'1980/04/10',3:'1980/04/10'},                       })s_pdf = op.create.df(pdf=pdf)s_pdf.table()```![](readme/images/pandas.png)## Cleaning and ProcessingOptimus V2 was created to make data cleaning a breeze. The API was designed to be super easy to newcomers and very familiar for people that comes from Pandas.Optimus expands the Spark DataFrame functionality adding .rows and .cols attributes.For example you can load data from a url, transform and apply some predefined cleaning functions:```python# This is a custom functiondef func(value, arg):    return &quot;this was a number&quot;new_df = df\    .rows.sort(&quot;rank&quot;,&quot;desc&quot;)\    .withColumn('new_age', df.age)\    .cols.lower([&quot;names&quot;,&quot;function&quot;])\    .cols.date_transform(&quot;date arrival&quot;, &quot;yyyy/MM/dd&quot;, &quot;dd-MM-YYYY&quot;)\    .cols.years_between(&quot;date arrival&quot;, &quot;dd-MM-YYYY&quot;, output_cols = &quot;from arrival&quot;)\    .cols.remove_accents(&quot;names&quot;)\    .cols.remove_special_chars(&quot;names&quot;)\    .rows.drop(df[&quot;rank&quot;]&gt;8)\    .cols.rename(str.lower)\    .cols.trim(&quot;*&quot;)\    .cols.unnest(&quot;japanese name&quot;, output_cols=&quot;other names&quot;)\    .cols.unnest(&quot;last position seen&quot;,separator=&quot;,&quot;, output_cols=&quot;pos&quot;)\    .cols.drop([&quot;last position seen&quot;, &quot;japanese name&quot;,&quot;date arrival&quot;, &quot;cybertronian&quot;, &quot;nulltype&quot;])```You transform this```pythondf.table()```![](readme/images/table1.png)Into this```pythonnew_df.table()```![](readme/images/table2.png)Note that you can use Optimus functions and Spark functions(`.WithColumn()`) and all the df function availables in a Spark Dataframe at the same time. To know about all the Optimus functionality please go to this [notebooks](examples/)### Handling column outputWith Optimus you can handle how the output column from a transformation in going to be handled.```pythonfrom pyspark.sql import functions as Fdef func(col_name, attr):    return F.upper(F.col(col_name))```If a **string** is passed to **input_cols** and **output_cols** is not defined the result from the operation is going to be saved in the same input column```pythonoutput_df = df.cols.apply(input_cols=&quot;names&quot;, output_cols=None,func=func)output_df.table()```![](readme/images/column_output_1.png)If a **string** is passed to **input_cols** and a **string** is passed to **output_cols** the output is going to be saved in the output column```pythonoutput_df = df.cols.apply(input_cols=&quot;names&quot;, output_cols=&quot;names_up&quot;,func=func)output_df.table()```![](readme/images/column_output_2.png)If a **list** is passed to **input_cols** and a **string** is passed to **out_cols** Optimus will concatenate the list with every element in the list to create a new column name with the output```pythonoutput_df = df.cols.apply(input_cols=[&quot;names&quot;,&quot;function&quot;], output_cols=&quot;_up&quot;,func=func)output_df.table()```![](readme/images/column_output_3.png)If a **list** is passed to **input_cols** and a **list** is passed in **out_cols** Optimus will output every input column in the respective output column```pythonoutput_df = df.cols.apply(input_cols=[&quot;names&quot;,&quot;function&quot;], output_cols=[&quot;names_up&quot;,&quot;function_up&quot;],func=func)output_df.table()```![](readme/images/column_output_4.png)### Custom functionsSpark has multiple ways to transform your data like rdd, Column Expression, udf and pandas udf. In Optimus we created the `apply()` and `apply_expr` which handles all the implementation complexity.Here you apply a function to the &quot;billingid&quot; column. Sum 1 and 2 to the current column value. All powered by Pandas UDF```pythondef func(value, args):    return value + args[0] + args[1]df.cols.apply(&quot;height(ft)&quot;,func,&quot;int&quot;, [1,2]).table()```![](readme/images/table3.png)If you want to apply a Column Expression use `apply_expr()` like this. In this case we pass an argument 10 to divide the actual column value```pythonfrom pyspark.sql import functions as Fdef func(col_name, args):    return F.col(col_name)/20df.cols.apply(&quot;height(ft)&quot;, func=func, args=20).table()```![](readme/images/table4.png)You can change the table output back to ascii if you wish```pythonop.output(&quot;ascii&quot;)```To return to HTML just:```pythonop.output(&quot;html&quot;)```## Data profilingOptimus comes with a powerful and unique data profiler. Besides basic and advance stats like min, max, kurtosis, mad etc, it also let you know what type of data has every column. For example if a string column have string, integer, float, bool, date Optimus can give you an unique overview about your data. Just run `df.profile(&quot;*&quot;)` to profile all the columns. For more info about the profiler please go to this [notebook](./examples/profiler.ipynb).Let's load a &quot;big&quot; dataset```pythondf = op.load.csv(&quot;https://raw.githubusercontent.com/ironmussa/Optimus/master/examples/data/Meteorite_Landings.csv&quot;).h_repartition()```### Numeric```pythonop.profiler.run(df, &quot;mass (g)&quot;, infer=False)```![](readme/images/profiler_numeric.png)```pythonop.profiler.run(df, &quot;name&quot;, infer=False)```![](readme/images/profiler.png)### Processing DatesFor dates data types Optimus can give you extra information```pythonop.profiler.run(df, &quot;year&quot;, infer=True)```![](readme/images/profiler1.png)### Profiler SpeedWith **relative_error** and **approx_count** params you can control how some operations are caculated so you can speedup the profiling in case is needed.relative_error: Relative Error for quantile discretizer calculation. 1 is Faster, 0 Slowerapprox_count: Use ```approx_count_distinct``` or ```countDistinct```. ```approx_count_distinct``` is faster```pythonop.profiler.run(df, &quot;mass (g)&quot;, infer=False, relative_error =1, approx_count=True)```## PlotsBesides histograms and frequency plots you also have scatter plots and box plots. All powered by Apache by pyspark```pythondf = op.load.excel(&quot;../examples/data/titanic3.xls&quot;)df = df.rows.drop_na([&quot;age&quot;,&quot;fare&quot;])```You can output to the notebook or as an image```python# Output and image```![](readme/images/hist.png)```pythondf.plot.frequency(&quot;age&quot;)```![](readme/images/frequency.png)```pythondf.plot.scatter([&quot;fare&quot;, &quot;age&quot;], buckets=30)```![](readme/images/scatter.png)```pythondf.plot.box(&quot;age&quot;)```![](readme/images/box.png)```pythondf.plot.correlation(&quot;*&quot;)```![](readme/images/correlation.png)### Using other plotting librariesOptimus has a tiny API so you can use any plotting library. For example, you can use ```df.cols.scatter()```, ```df.cols.frequency()```, ```df.cols.boxplot()``` or ```df.cols.hist()``` to output a JSON that you can process to adapt the data to any plotting library.## Outliers### Get the ouliers using tukey```pythondf.outliers.tukey(&quot;age&quot;).select().table()```![](readme/images/table5.png)### Remove the outliers using tukey```pythondf.outliers.tukey(&quot;age&quot;).drop().table()```![](readme/images/table6.png)```pythondf.outliers.tukey(&quot;age&quot;).info()```### You can also use z_score, modified_z_score or mad```pythondf.outliers.z_score(&quot;age&quot;, threshold=2).drop()df.outliers.modified_z_score(&quot;age&quot;, threshold = 2).drop()df.outliers.mad(&quot;age&quot;, threshold = 2).drop()```## Database connectionOptimus have handy tools to connect to databases and extract informacion. Optimus can handle **redshift**, **postgres**, **oracle** and **mysql**```pythonfrom optimus import Optimusop= Optimus(verbose=True)``````python# This import is only to hide the credentialsfrom credentials import *# For others databases use in db_type accepts 'oracle','mysql','redshift','postgres'db =  op.connect(    db_type=DB_TYPE,    host=HOST,    database= DATABASE,    user= USER,    password = PASSWORD,    port=PORT)# Show all tables namesdb.tables(limit=&quot;all&quot;)``````python# # Show a summary of every tabledb.table.show(&quot;*&quot;,20)``````python# # Get a table as dataframedf_ = db.table_to_df(&quot;places_interest&quot;).table()``````python# # Create new table in the databasedb.df_to_table(df, &quot;new_table&quot;)```## Data enrichmentYou can connect to any external API to enrich your data using Optimus. Optimus uses MongoDB to download the data and then merge it with the Spark Dataframe. You need to install MongoDBLet's load a tiny dataset we can enrich```pythondf = op.load.json(&quot;https://raw.githubusercontent.com/ironmussa/Optimus/master/examples/data/foo.json&quot;)``````pythonimport requestsdef func_request(params):    # You can use here whatever header or auth info you need to send.     # For more information see the requests library    url= &quot;https://jsonplaceholder.typicode.com/todos/&quot; + str(params[&quot;id&quot;])    return requests.get(url)def func_response(response):    # Here you can parse de response    return response[&quot;title&quot;]e = op.enrich(host=&quot;localhost&quot;, port=27017, db_name=&quot;jazz&quot;)df_result = e.run(df, func_request, func_response, calls= 60, period = 60, max_tries = 8)``````pythondf_result.table(&quot;all&quot;)``````pythondf_result.table()```![](readme/images/table7.png)# Clustering StringsOptimus implements some funciton to cluster Strings. We get graet inspiration from OpenRefineHere a quote from its site:&quot;In OpenRefine, clustering refers to the operation of &quot;finding groups of different values that might be alternative representations of the same thing&quot;. For example, the two strings &quot;New York&quot; and &quot;new york&quot; are very likely to refer to the same concept and just have capitalization differences. Likewise, &quot;Gödel&quot; and &quot;Godel&quot; probably refer to the same person.&quot;For more informacion see this:https://github.com/OpenRefine/OpenRefine/wiki/Clustering-In-Depth## Keycolision```pythondf = op.read.csv(&quot;../examples/data/random.csv&quot;,header=True, sep=&quot;;&quot;)``````pythonfrom optimus.ml import keycollision as keyCol``````pythondf_kc = keyCol.fingerprint_cluster(df, 'STATE')df_kc.table()df_kc.table()```![](readme/images/table8.png)```pythonkeyCol.fingerprint_cluster(df, &quot;STATE&quot;).to_json()``````pythondf_kc = keyCol.n_gram_fingerprint_cluster(df, &quot;STATE&quot; , 2)df_kc.table()df_kc.table()```![](readme/images/table9.png)```pythonkeyCol.n_gram_fingerprint_cluster(df, &quot;STATE&quot; , 2).to_json()```## Nearest Neighbor Methods```pythonfrom optimus.ml import distancecluster as dcdf_dc = dc.levenshtein_matrix(df,&quot;STATE&quot;)df_dc.table()```![](readme/images/table10.png)```pythondf_dc=dc.levenshtein_filter(df,&quot;STATE&quot;)df_dc.table()df_dc.table()```![](readme/images/table11.png)```pythondf_dc = dc.levenshtein_cluster(df,&quot;STATE&quot;)df_dc.table()df_dc.table()```![](readme/images/table12.png)```pythondc.to_json(df, &quot;STATE&quot;)```## Machine Learning Machine Learning is one of the last steps, and the goal for most Data Science WorkFlows.Apache Spark created a library called MLlib where they coded great algorithms for Machine Learning. Nowwith the ML library we can take advantage of the Dataframe API and its optimization to create Machine Learning Pipelines easily.Even though this task is not extremely hard, it is not easy. The way most Machine Learning models work on Sparkare not straightforward, and they need lots of feature engineering to work. That's why we created the feature engineeringsection inside Optimus.One of the best &quot;tree&quot; models for machine learning is Random Forest. What about creating a RF model with justone line? With Optimus is really easy.```pythondf_cancer = op.load.csv(&quot;https://raw.githubusercontent.com/ironmussa/Optimus/master/tests/data_cancer.csv&quot;)``````pythoncolumns = ['diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean',           'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean',           'fractal_dimension_mean']df_predict, rf_model = op.ml.random_forest(df_cancer, columns, &quot;diagnosis&quot;)```This will create a DataFrame with the predictions of the Random Forest model.So lets see the prediction compared with the actual label:```pythondf_predict.cols.select([&quot;label&quot;,&quot;prediction&quot;]).table()```![](readme/images/table13.png)The rf_model variable contains the Random Forest model for analysis.## Contributing to OptimusContributions go far beyond pull requests and commits. We are very happy to receive any kind of contributions   including:  * [Documentation](https://github.com/ironmussa/Optimus/tree/master/docs/source) updates, enhancements, designs, or   bugfixes.  * Spelling or grammar fixes.  * README.md corrections or redesigns.  * Adding unit, or functional [tests](https://github.com/ironmussa/Optimus/tree/master/tests)   * Triaging GitHub issues -- especially determining whether an issue still persists or is reproducible.  * [Searching #optimusdata on twitter](https://twitter.com/search?q=optimusdata) and helping someone else who needs help.  * [Blogging, speaking about, or creating tutorials](https://hioptimus.com/category/blog/)   about Optimus and its many features.  * Helping others on [Discord](https://img.shields.io/discord/579030865468719104.svg)    ## Backers  [[Become a backer](https://opencollective.com/optimus#backer)] and get your image on our README on Github with a link to your site.  [![OpenCollective](https://opencollective.com/optimus/backers/badge.svg)](#backers)   ## Sponsors  [[Become a sponsor](https://opencollective.com/optimus#backer)] and get your image on our README on Github with a link to your site.  [![OpenCollective](https://opencollective.com/optimus/sponsors/badge.svg)](#sponsors)  ## Core TeamArgenis Leon## Contributors:https://github.com/ironmussa/Optimus/graphs/contributors## License:  Apache 2.0 ©</longdescription>
</pkgmetadata>