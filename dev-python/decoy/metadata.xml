<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;    &lt;img alt=&quot;Decoy logo&quot; src=&quot;https://michael.cousins.io/decoy/img/decoy.png&quot; width=&quot;256px&quot;&gt;    &lt;h1 class=&quot;decoy-title&quot;&gt;Decoy&lt;/h1&gt;    &lt;p&gt;Opinionated mocking library for Python&lt;/p&gt;    &lt;p&gt;        &lt;a title=&quot;CI Status&quot; href=&quot;https://github.com/mcous/decoy/actions&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/mcous/decoy/ci.yml?branch=main&amp;style=flat-square&quot;&gt;&lt;/a&gt;        &lt;a title=&quot;Code Coverage&quot; href=&quot;https://app.codecov.io/gh/mcous/decoy/&quot;&gt;&lt;img src=&quot;https://img.shields.io/codecov/c/github/mcous/decoy?style=flat-square&quot;&gt;&lt;/a&gt;        &lt;a title=&quot;License&quot; href=&quot;https://github.com/mcous/decoy/blob/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/mcous/decoy?style=flat-square&quot;&gt;&lt;/a&gt;        &lt;a title=&quot;PyPI Version&quot;href=&quot;https://pypi.org/project/decoy/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/decoy?style=flat-square&quot;&gt;&lt;/a&gt;        &lt;a title=&quot;Supported Python Versions&quot; href=&quot;https://pypi.org/project/decoy/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/pyversions/decoy?style=flat-square&quot;&gt;&lt;/a&gt;    &lt;/p&gt;    &lt;p&gt;        &lt;a href=&quot;https://michael.cousins.io/decoy/&quot; class=&quot;decoy-hidden&quot;&gt;Usage guide and documentation&lt;/a&gt;    &lt;/p&gt;&lt;/div&gt;Decoy is a mocking library designed for **effective and productive test-driven development** in Python. If you want to use tests to guide the structure of your code, Decoy might be for you!Decoy mocks are **async/await** and **type-checking** friendly. Decoy is heavily inspired by (and/or stolen from) the excellent [testdouble.js][] and [Mockito][] projects. The Decoy API is powerful, easy to read, and strives to help you make good decisions about your code.## Install```bash# pippip install decoy# poetrypoetry add --dev decoy# pipenvpipenv install --dev decoy```## Setup### Pytest setupDecoy ships with its own [pytest][] plugin, so once Decoy is installed, you're ready to start using it via its pytest fixture, called `decoy`.```python# test_my_thing.pyfrom decoy import Decoydef test_my_thing_works(decoy: Decoy) -&gt; None:    ...```### Mypy setupBy default, Decoy is compatible with Python [typing][] and type-checkers like [mypy][]. However, stubbing functions that return `None` can trigger a [type checking error](https://mypy.readthedocs.io/en/stable/error_code_list.html#check-that-called-function-returns-a-value-func-returns-value) during correct usage of the Decoy API. To suppress these errors, add Decoy's plugin to your mypy configuration.```ini# mypy.iniplugins = decoy.mypy```### Other testing librariesDecoy works well with [pytest][], but if you use another testing library or framework, you can still use Decoy! You just need to do two things:1. Create a new instance of [`Decoy()`](https://michael.cousins.io/decoy/api/#decoy.Decoy) before each test2. Call [`decoy.reset()`](https://michael.cousins.io/decoy/api/#decoy.Decoy.reset) after each testFor example, using the built-in [unittest][] framework, you would use the `setUp` fixture method to do `self.decoy = Decoy()` and the `tearDown` method to call `self.decoy.reset()`. For a working example, see [`tests/test_unittest.py`](https://github.com/mcous/decoy/blob/main/tests/test_unittest.py).## Basic UsageThis basic example assumes you are using [pytest][]. For more detailed documentation, see Decoy's [usage guide][] and [API reference][].Decoy will add a `decoy` fixture to pytest that provides its mock creation API.```pythonfrom decoy import Decoydef test_something(decoy: Decoy) -&gt; None:    ...```!!! note    Importing the `Decoy` interface for type annotations is recommended, but optional. If your project does not use type annotations, you can simply write:    ```python    def test_something(decoy):        ...    ```### Create a mockUse `decoy.mock` to create a mock based on some specification. From there, inject the mock into your test subject.```pythondef test_add_todo(decoy: Decoy) -&gt; None:    todo_store = decoy.mock(cls=TodoStore)    subject = TodoAPI(store=todo_store)    ...```See [creating mocks][] for more details.### Stub a behaviorUse `decoy.when` to configure your mock's behaviors. For example, you can set the mock to return a certain value when called in a certain way using `then_return`:```pythondef test_add_todo(decoy: Decoy) -&gt; None:    &quot;&quot;&quot;Adding a todo should create a TodoItem in the TodoStore.&quot;&quot;&quot;    todo_store = decoy.mock(cls=TodoStore)    subject = TodoAPI(store=todo_store)    decoy.when(        todo_store.add(name=&quot;Write a test for adding a todo&quot;)    ).then_return(        TodoItem(id=&quot;abc123&quot;, name=&quot;Write a test for adding a todo&quot;)    )    result = subject.add(&quot;Write a test for adding a todo&quot;)    assert result == TodoItem(id=&quot;abc123&quot;, name=&quot;Write a test for adding a todo&quot;)```See [stubbing with when][] for more details.### Verify a callUse `decoy.verify` to assert that a mock was called in a certain way. This is best used with dependencies that are being used for their side-effects and don't return a useful value.```pythondef test_remove_todo(decoy: Decoy) -&gt; None:    &quot;&quot;&quot;Removing a todo should remove the item from the TodoStore.&quot;&quot;&quot;    todo_store = decoy.mock(cls=TodoStore)    subject = TodoAPI(store=todo_store)    subject.remove(&quot;abc123&quot;)    decoy.verify(todo_store.remove(id=&quot;abc123&quot;), times=1)```See [spying with verify][] for more details.[testdouble.js]: https://github.com/testdouble/testdouble.js[mockito]: https://site.mockito.org/[pytest]: https://docs.pytest.org/[unittest]: https://docs.python.org/3/library/unittest.html[typing]: https://docs.python.org/3/library/typing.html[mypy]: https://mypy.readthedocs.io/[api reference]: https://michael.cousins.io/decoy/api/[usage guide]: https://michael.cousins.io/decoy/usage/create/[creating mocks]: https://michael.cousins.io/decoy/usage/create/[stubbing with when]: https://michael.cousins.io/decoy/usage/when/[spying with verify]: https://michael.cousins.io/decoy/usage/verify/</longdescription>
</pkgmetadata>