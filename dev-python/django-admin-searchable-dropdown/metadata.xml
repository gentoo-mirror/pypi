<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://d25lcipzij17d.cloudfront.net/badge.svg?id=py&amp;r=r&amp;type=6e&amp;v=1.2&amp;x2=0)](https://pypi.org/project/django-admin-searchable-dropdown/1.2/)Django Admin Searchable Dropdown================================A Django admin filter implementation that renders as a searchable select field dropdown.Overview:---------If you have more than twenty values for a field that you want to filter by inDjango admin, the filtering sidebar gets long, cluttered, sometimes wide and hence, hard to use.This app contains the `AutocompleteFilter` class that renders as a drop-down in thefiltering sidebar that can be searched to avoid this problem. Requirements:-------------Requires Django version &gt;= 2.0Features:-------------* Custom search view/endpoint ([more details](#functionality-to-provide-a-custom-view-for-search))* `list_filter` Filter Factory support ([more details](#shortcut-for-creating-filters))* Custom widget text ([more details](#customizing-widget-text))* Support for [Grappelli](https://grappelliproject.com/)Installation:-------------You can install it via pip.  To get the latest version clone this repo.```shell scriptpip install django-admin-searchable-dropdown```Add `admin_searchable_dropdown` to your `INSTALLED_APPS` inside settings.py of your project.Usage:------Let's say you have following models:```pythonfrom django.db import modelsclass CarCompany(models.Model):    name = models.CharField(max_length=128)class CarModel(models.Model):    name = models.CharField(max_length=64)    company = models.ForeignKey(CarCompany, on_delete=models.CASCADE)```And you would like to filter results in `CarModelAdmin` on the basis of `company`.  You need to define `search fields` in `CarCompany` and then define filter like this:```pythonfrom django.contrib import adminfrom admin_searchable_dropdown.filters import AutocompleteFilterclass CarCompanyFilter(AutocompleteFilter):    title = 'Company' # display title    field_name = 'company' # name of the foreign key fieldclass CarCompanyAdmin(admin.ModelAdmin):    search_fields = ['name'] # this is required for django's autocomplete functionality    # ...class CarModelAdmin(admin.ModelAdmin):    list_filter = [CarCompanyFilter]    # ...```After following these steps you may see the filter as:![](https://raw.githubusercontent.com/whoisashish/django-admin-searchable-dropdown/main/admin_searchable_dropdown/media/UnFiltered.PNG)![](https://raw.githubusercontent.com/whoisashish/django-admin-searchable-dropdown/main/admin_searchable_dropdown/media/Filtered.PNG)Functionality to provide a custom view for search:--------------------------------------------------You can also register your custom view instead of using Django admin's `search_results` to control the results in the autocomplete. For this you will need to create your custom view and register the URL in your admin class as shown below:In your `views.py`:```pythonfrom admin_searchable_dropdown.views import AutocompleteJsonViewclass CustomSearchView(AutocompleteJsonView):    def get_queryset(self):        &quot;&quot;&quot;           your custom logic goes here.        &quot;&quot;&quot;        queryset = CarCompany.objects.all().order_by('name')        return queryset```After this, register this view in your admin class:```pythonfrom django.contrib import adminfrom django.urls import pathclass CarModelAdmin(admin.ModelAdmin):    list_filter = [CarCompanyFilter]    def get_urls(self):        urls = super().get_urls()        custom_urls = [            path('custom_search/', self.admin_site.admin_view(CustomSearchView.as_view(model_admin=self)),                 name='custom_search'),        ]        return custom_urls + urls```Finally, just tell the filter class to use this new view:```pythonfrom django.shortcuts import reversefrom admin_searchable_dropdown.filters import AutocompleteFilterclass CarCompanyFilter(AutocompleteFilter):    title = 'Company'    field_name = 'company'    def get_autocomplete_url(self, request, model_admin):        return reverse('admin:custom_search')```Shortcut for creating filters:------------------------------It's also possible to use the `AutocompleteFilterFactory` shortcut to createfilters on the fly, as shown below. Nested relations are supported too, withno need to specify the model.```An autocomplete widget filter with a customizable title. Use like this:        AutocompleteFilterFactory('My title', 'field_name')        AutocompleteFilterFactory('My title', 'fourth__third__second__first')    Be sure to include distinct in the model admin get_queryset() if the second form is used.    Assumes: parameter_name == f'fourth__third__second__{field_name}'        * title: The title for the filter.        * base_parameter_name: The field to use for the filter.        * viewname: The name of the custom AutocompleteJsonView URL to use, if any.        * use_pk_exact: Whether to use '__pk__exact' in the parameter name when possible.        * label_by: How to generate the static label for the widget - a callable, the name          of a model callable, or the name of a model field.```Example:```pythonfrom django.contrib import adminfrom admin_searchable_dropdown.filters import AutocompleteFilterFactoryclass AlbumAdmin(admin.ModelAdmin):    list_filter = [        AutocompleteFilterFactory('Company', 'company', 'admin:custom_search', True)    ]    def get_urls(self):        &quot;&quot;&quot;As above...&quot;&quot;&quot;```Customizing widget text-----------------------You can customize the text displayed in the filter widget, to use somethingother than `str(obj)`. This needs to be configured for both the dropdownendpoint and the widget itself.In your `views.py`, override `display_text`:```pythonfrom admin_searchable_dropdown.views import AutocompleteJsonViewclass CustomSearchView(AutocompleteJsonView):    @staticmethod    def display_text(obj):        return obj.my_str_method()    def get_queryset(self):        &quot;&quot;&quot;As above...&quot;&quot;&quot;```Then use either of two options to customize the text.Option one is to specify the form_field in an AutocompleteFilter in your`admin.py`:```pythonfrom django import formsfrom django.contrib import adminfrom django.shortcuts import reversefrom admin_searchable_dropdown.filters import AutocompleteFilterclass FuelChoiceField(forms.ModelChoiceField):    def label_from_instance(self, obj):        return obj.my_str_method()class CarCompanyFilter(AutocompleteFilter):    title = 'Company'    field_name = 'company'    form_field = FuelChoiceField    def get_autocomplete_url(self, request, model_admin):        return reverse('admin:custom_search')class CarModelAdmin(admin.ModelAdmin):    list_filter = [CarCompanyFilter]    def get_urls(self):        &quot;&quot;&quot;As above...&quot;&quot;&quot;```Option two is to use an AutocompleteFilterFactory in your `admin.py`add a `label_by` argument:```pythonfrom django.contrib import adminfrom admin_searchable_dropdown.filters import AutocompleteFilterFactoryclass CarModelAdmin(admin.ModelAdmin):    list_filter = [        AutocompleteFilterFactory('Company', 'company', 'admin:custom_search', True, label_by='my_str_method')    ]    def get_urls(self):        &quot;&quot;&quot;As above...&quot;&quot;&quot;```Contributing:------------Based on [this StackOverflow question, and the comments that went unresolved in the selected answer](http://stackoverflow.com/a/20900314/258772) and[code from FeinCMS](https://github.com/feincms/feincms/blob/master/feincms/templates/admin/filter.html) and[code from mrts](https://github.com/mrts/django-admin-list-filter-dropdown/blob/8ab1575dcd3cb9b28a80cc07695cec65fa85dfad/django_admin_listfilter_dropdown/templates/django_admin_listfilter_dropdown/dropdown_filter.html).To Contribute, please fork the project, make a pull-request, and clearly mention the problems or improvements your PR is addressing.License:--------Django Admin Searchable Dropdown is an Open Source project licensed under the terms of the MIT LICENSE.</longdescription>
</pkgmetadata>