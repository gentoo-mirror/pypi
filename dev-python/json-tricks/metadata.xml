<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JSON tricks (python)The [pyjson-tricks] package brings several pieces offunctionality to python handling of json files:1.  **Store and load numpy arrays** in human-readable format.2.  **Store and load class instances** both generic and customized.3.  **Store and load date/times** as a dictionary (including timezone).4.  **Preserve map order** `{}` using `OrderedDict`.5.  **Allow for comments** in json files by starting lines with `#`.6.  Sets, complex numbers, Decimal, Fraction, enums, compression,    duplicate keys, pathlib Paths, bytes ...As well as compression and disallowing duplicate keys.* Code: &lt;https://github.com/mverleg/pyjson_tricks&gt;* Documentation: &lt;http://json-tricks.readthedocs.org/en/latest/&gt;* PIP: &lt;https://pypi.python.org/pypi/json_tricks&gt;Several keys of the format `__keyname__` have special meanings, and moremight be added in future releases.If you\'re considering JSON-but-with-comments as a config file format,have a look at [HJSON](https://github.com/hjson/hjson-py), it might bemore appropriate. For other purposes, keep reading!Thanks for all the Github stars‚≠ê!# Installation and useYou can install using``` bashpip install json-tricks```Decoding of some data types needs the corresponding package to beinstalled, e.g. `numpy` for arrays, `pandas` for dataframes and `pytz`for timezone-aware datetimes.You can import the usual json functions dump(s) and load(s), as well asa separate comment removal function, as follows:``` bashfrom json_tricks import dump, dumps, load, loads, strip_comments```The exact signatures of these and other functions are in the [documentation](http://json-tricks.readthedocs.org/en/latest/#main-components).Quite some older versions of Python are supported. For an up-to-date  list see [the automated tests](./.github/workflows/tests.yml).# Features## Numpy arraysWhen not compressed, the array is encoded in sort-of-readable and veryflexible and portable format, like so:``` pythonarr = arange(0, 10, 1, dtype=uint8).reshape((2, 5))print(dumps({'mydata': arr}))```this yields:``` javascript{    &quot;mydata&quot;: {        &quot;dtype&quot;: &quot;uint8&quot;,        &quot;shape&quot;: [2, 5],        &quot;Corder&quot;: true,        &quot;__ndarray__&quot;: [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]    }}```which will be converted back to a numpy array when using`json_tricks.loads`. Note that the memory order (`Corder`) is onlystored in v3.1 and later and for arrays with at least 2 dimensions.As you see, this uses the magic key `__ndarray__`. Don\'t use`__ndarray__` as a dictionary key unless you\'re trying to make a numpyarray (and know what you\'re doing).Numpy scalars are also serialized (v3.5+). They are represented by theclosest python primitive type. A special representation was notfeasible, because Python\'s json implementation serializes some numpytypes as primitives, without consulting custom encoders. If you want topreserve the exact numpy type, use[encode_scalars_inplace](https://json-tricks.readthedocs.io/en/latest/#json_tricks.np_utils.encode_scalars_inplace).There is also a compressed format. From the next major release, thiswill be default when using compression. For now you can use it as:``` pythondumps(data, compression=True, properties={'ndarray_compact': True})```This compressed format encodes the array data in base64, with gzipcompression for the array, unless 1) compression has little effect forthat array, or 2) the whole file is already compressed. If you only wantcompact format for large arrays, pass the number of elements to`ndarray_compact`.Example:``` pythondata = [linspace(0, 10, 9), array([pi, exp(1)])]dumps(data, compression=False, properties={'ndarray_compact': 8})[{   &quot;__ndarray__&quot;: &quot;b64.gz:H4sIAAAAAAAC/2NgQAZf7CE0iwOE5oPSIlBaEkrLQegGRShfxQEAz7QFikgAAAA=&quot;,   &quot;dtype&quot;: &quot;float64&quot;,   &quot;shape&quot;: [9] }, {   &quot;__ndarray__&quot;: [3.141592653589793, 2.718281828459045],   &quot;dtype&quot;: &quot;float64&quot;,   &quot;shape&quot;: [2] }]```## Class instances`json_tricks` can serialize class instances.If the class behaves normally (not generated dynamic, no `__new__` or`__metaclass__` magic, etc) *and* all it\'s attributes are serializable,then this should work by default.``` python# json_tricks/test_class.pyclass MyTestCls:def __init__(self, **kwargs):    for k, v in kwargs.items():        setattr(self, k, v)cls_instance = MyTestCls(s='ub', dct={'7': 7})json = dumps(cls_instance, indent=4)cls_instance_again = loads(json)```You\'ll get your instance back. Here the json looks like this:``` javascript{   &quot;__instance_type__&quot;: [   &quot;json_tricks.test_class&quot;,   &quot;MyTestCls&quot;   ],   &quot;attributes&quot;: {   &quot;s&quot;: &quot;ub&quot;,   &quot;dct&quot;: {   &quot;7&quot;: 7   }   }}```As you can see, this stores the module and class name. The class must beimportable from the same module when decoding (and should not havechanged). If it isn\'t, you have to manually provide a dictionary to`cls_lookup_map` when loading in which the class name can be looked up.Note that if the class is imported, then `globals()` is such adictionary (so try `loads(json, cls_lookup_map=glboals())`). Also notethat if the class is defined in the \'top\' script (that you\'re callingdirectly), then this isn\'t a module and the import part cannot beextracted. Only the class name will be stored; it can then only bedeserialized in the same script, or if you provide `cls_lookup_map`.Note that this also works with `slots` without having to do anything(thanks to `koffie` and `dominicdoty`), which encodes like this (customindentation):``` javascript{    &quot;__instance_type__&quot;: [&quot;module.path&quot;, &quot;ClassName&quot;],    &quot;slots&quot;: {&quot;slotattr&quot;: 37},    &quot;attributes&quot;: {&quot;dictattr&quot;: 42}}```If the instance doesn\'t serialize automatically, or if you want custombehaviour, then you can implement `__json__encode__(self)` and`__json_decode__(self, **attributes)` methods, like so:``` pythonclass CustomEncodeCls:def __init__(self):    self.relevant = 42    self.irrelevant = 37    def __json_encode__(self):    # should return primitive, serializable types like dict, list, int, string, float...    return {'relevant': self.relevant}    def __json_decode__(self, **attrs):    # should initialize all properties; note that __init__ is not called implicitly    self.relevant = attrs['relevant']    self.irrelevant = 12```As you\'ve seen, this uses the magic key `__instance_type__`. Don\'t use`__instance_type__` as a dictionary key unless you know what you\'redoing.## Date, time, datetime and timedeltaDate, time, datetime and timedelta objects are stored as dictionaries of\&quot;day\&quot;, \&quot;hour\&quot;, \&quot;millisecond\&quot; etc keys, for each nonzero property.Timezone name is also stored in case it is set. You\'ll need to have`pytz` installed to use timezone-aware date/times, it\'s not needed fornaive date/times.``` javascript{    &quot;__datetime__&quot;: null,    &quot;year&quot;: 1988,    &quot;month&quot;: 3,    &quot;day&quot;: 15,    &quot;hour&quot;: 8,    &quot;minute&quot;: 3,    &quot;second&quot;: 59,    &quot;microsecond&quot;: 7,    &quot;tzinfo&quot;: &quot;Europe/Amsterdam&quot;}```This approach was chosen over timestamps for readability and consistencybetween date and time, and over a single string to prevent parsingproblems and reduce dependencies. Note that if `primitives=True`,date/times are encoded as ISO 8601, but they won\'t be restoredautomatically.Don\'t use `__date__`, `__time__`, `__datetime__`, `__timedelta__` or`__tzinfo__` as dictionary keys unless you know what you\'re doing, asthey have special meaning.## OrderGiven an ordered dictionary like this (see the tests for a longer one):``` pythonordered = OrderedDict((    ('elephant', None),    ('chicken', None),    ('tortoise', None),))```Converting to json and back will preserve the order:``` pythonfrom json_tricks import dumps, loadsjson = dumps(ordered)ordered = loads(json, preserve_order=True)```where `preserve_order=True` is added for emphasis; it can be left outsince it\'s the default.As a note on [performance](http://stackoverflow.com/a/8177061/723090),both dicts and OrderedDicts have the same scaling for getting andsetting items (`O(1)`). In Python versions before 3.5, OrderedDicts wereimplemented in Python rather than C, so were somewhat slower; sincePython 3.5 both are implemented in C. In summary, you should have noscaling problems and probably no performance problems at all, especiallyin Python 3. Python 3.6+ preserves order of dictionaries by defaultmaking this redundant, but this is an implementation detail that shouldnot be relied on.## Comments*Warning: in the next major version, comment parsing will be opt-in, notdefault anymore (for performance reasons). Update your code now to pass`ignore_comments=True` explicitly if you want comment parsing.*This package uses `#` and `//` for comments, which seem to be the mostcommon conventions, though only the latter is valid javascript.For example, you could call `loads` on the following string:{ # &quot;comment 1    &quot;hello&quot;: &quot;Wor#d&quot;, &quot;Bye&quot;: &quot;\&quot;M#rk\&quot;&quot;, &quot;yes\\\&quot;&quot;: 5,# comment&quot; 2    &quot;quote&quot;: &quot;\&quot;th#t's\&quot; what she said&quot;, // comment &quot;3&quot;    &quot;list&quot;: [1, 1, &quot;#&quot;, &quot;\&quot;&quot;, &quot;\\&quot;, 8], &quot;dict&quot;: {&quot;q&quot;: 7} #&quot; comment 4 with quotes}// comment 5And it would return the de-commented version:``` javascript{    &quot;hello&quot;: &quot;Wor#d&quot;, &quot;Bye&quot;: &quot;\&quot;M#rk\&quot;&quot;, &quot;yes\\\&quot;&quot;: 5,    &quot;quote&quot;: &quot;\&quot;th#t's\&quot; what she said&quot;,    &quot;list&quot;: [1, 1, &quot;#&quot;, &quot;\&quot;&quot;, &quot;\\&quot;, 8], &quot;dict&quot;: {&quot;q&quot;: 7}}```Since comments aren't stored in the Python representation of the data,loading and then saving a json file will remove the comments (it alsolikely changes the indentation).The implementation of comments is a bit crude, which means that there are some exceptional cases that aren't handled correctly ([#57](https://github.com/mverleg/pyjson_tricks/issues/57)).It is also not very fast. For that reason, if `ignore_comments` wasn't explicitly set to True, then json-tricks first tries to parge without ignoring comments. If that fails, then it will automatically re-try with comment handling. This makes the no-comment case faster at the costof the comment case, so if you are expecting comments make sure to set`ignore_comments` to True.## Other features* Special floats like `NaN`, `Infinity` and  `-0` using the `allow_nan=True` argument  ([non-standard](https://stackoverflow.com/questions/1423081/json-left-out-infinity-and-nan-json-status-in-ecmascript)  json, may not decode in other implementations).* Sets are serializable and can be loaded. By default the set json  representation is sorted, to have a consistent representation.* Save and load complex numbers (py3) with `1+2j` serializing as  `{'__complex__': [1, 2]}`.* Save and load `Decimal` and `Fraction` (including NaN, infinity, -0  for Decimal).* Save and load `Enum` (thanks to `Jenselme`), either built-in in  python3.4+, or with the [enum34](https://pypi.org/project/enum34/)  package in earlier versions. `IntEnum` needs  [encode_intenums_inplace](https://json-tricks.readthedocs.io/en/latest/#json_tricks.utils.encode_intenums_inplace).* `json_tricks` allows for gzip compression using the  `compression=True` argument (off by default).* `json_tricks` can check for duplicate keys in maps by setting  `allow_duplicates` to False. These are [kind of  allowed](http://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object),  but are handled inconsistently between json implementations. In  Python, for `dict` and `OrderedDict`, duplicate keys are silently  overwritten.* Save and load `pathlib.Path` objects (e.g., the current path,  `Path('.')`, serializes as `{&quot;__pathlib__&quot;: &quot;.&quot;}`)  (thanks to `bburan`).* Save and load bytes (python 3+ only), which will be encoded as utf8 if   that is valid, or as base64 otherwise. Base64 is always used if   primitives are requested. Serialized as  `[{&quot;__bytes_b64__&quot;: &quot;aGVsbG8=&quot;}]` vs `[{&quot;__bytes_utf8__&quot;: &quot;hello&quot;}]`.# Preserve type vs use primitiveBy default, types are encoded such that they can be restored to theiroriginal type when loaded with `json-tricks`. Example encodings in thisdocumentation refer to that format.You can also choose to store things as their closest primitive type(e.g. arrays and sets as lists, decimals as floats). This may bedesirable if you don\'t care about the exact type, or you are loadingthe json in another language (which doesn\'t restore python types).It\'s also smaller.To forego meta data and store primitives instead, pass `primitives` to`dump(s)`. This is available in version `3.8` and later. Example:``` pythondata = [    arange(0, 10, 1, dtype=int).reshape((2, 5)),    datetime(year=2017, month=1, day=19, hour=23, minute=00, second=00),    1 + 2j,    Decimal(42),    Fraction(1, 3),    MyTestCls(s='ub', dct={'7': 7}),  # see later    set(range(7)),]# Encode with metadata to preserve types when decodingprint(dumps(data))`````` javascript// (comments added and indenting changed)[    // numpy array    {        &quot;__ndarray__&quot;: [            [0, 1, 2, 3, 4],            [5, 6, 7, 8, 9]],        &quot;dtype&quot;: &quot;int64&quot;,        &quot;shape&quot;: [2, 5],        &quot;Corder&quot;: true    },    // datetime (naive)    {        &quot;__datetime__&quot;: null,        &quot;year&quot;: 2017,        &quot;month&quot;: 1,        &quot;day&quot;: 19,        &quot;hour&quot;: 23    },    // complex number    {        &quot;__complex__&quot;: [1.0, 2.0]    },    // decimal &amp; fraction    {        &quot;__decimal__&quot;: &quot;42&quot;    },    {        &quot;__fraction__&quot;: true        &quot;numerator&quot;: 1,        &quot;denominator&quot;: 3,    },    // class instance    {        &quot;__instance_type__&quot;: [          &quot;tests.test_class&quot;,          &quot;MyTestCls&quot;        ],        &quot;attributes&quot;: {          &quot;s&quot;: &quot;ub&quot;,          &quot;dct&quot;: {&quot;7&quot;: 7}        }    },    // set    {        &quot;__set__&quot;: [0, 1, 2, 3, 4, 5, 6]    }]`````` python# Encode as primitive types; more simple but loses type informationprint(dumps(data, primitives=True))`````` javascript// (comments added and indentation changed)[    // numpy array    [[0, 1, 2, 3, 4],    [5, 6, 7, 8, 9]],    // datetime (naive)    &quot;2017-01-19T23:00:00&quot;,    // complex number    [1.0, 2.0],    // decimal &amp; fraction    42.0,    0.3333333333333333,    // class instance    {        &quot;s&quot;: &quot;ub&quot;,        &quot;dct&quot;: {&quot;7&quot;: 7}    },    // set    [0, 1, 2, 3, 4, 5, 6]]```Note that valid json is produced either way: ``json-tricks`` stores meta data as normal json, but other packages probably won't interpret it.Note that valid json is produced either way: `json-tricks` stores metadata as normal json, but other packages probably won\'t interpret it.# Usage &amp; contributionsCode is under [Revised BSDLicense](https://github.com/mverleg/pyjson_tricks/blob/master/LICENSE.txt)so you can use it for most purposes including commercially.Contributions are very welcome! Bug reports, feature suggestions andcode contributions help this project become more useful for everyone!There is a short [contributionguide](https://github.com/mverleg/pyjson_tricks/blob/master/CONTRIBUTING.txt).Contributors not yet mentioned: `janLo` (performance boost).# TestsTests are run automatically for commits to the repository for allsupported versions. This is the status:![image](https://github.com/mverleg/pyjson_tricks/workflows/pyjson-tricks/badge.svg?branch=master)To run the tests manually for your version, see [thisguide](https://github.com/mverleg/pyjson_tricks/blob/master/tests/run_locally.rst).</longdescription>
</pkgmetadata>