<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PPTX RendererThis package let's you run your powerpoint presentations like a jupyter-notebook.You can insert placeholders in the ppt and also write python code in the ppt'snotes and use either a python function or an equivalent commandline tool toconvert it into an output rendered presentation.## Installation```consolepip install pptx-renderer```## UsageBelow is a simple example.```pythonfrom pptx_renderer import PPTXRendererp = PPTXRenderer(&quot;template.pptx&quot;)someval = &quot;hello&quot;def mymethod(abc):    return f&quot;{abc} &quot; * 5myimage = r&quot;is_it_worth_the_time.png&quot;mytable = [[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]] * 10p.render(    &quot;output.pptx&quot;,     {        &quot;someval&quot;: someval, &quot;mymethod&quot;: mymethod, &quot;myimage&quot;: myimage,        &quot;mytable&quot;: mytable,    })```This will convert this![Before](docs/_src/_static/before.png)to this.![After](docs/_src/_static/after.png)You can define some functions within the ppt itself by writing python code inthe notes section of slides. And the variables and functions in this codecan be used in the main ppt.For example: write the following in one of the slide's notes.&lt;pre&gt;```pythondef myfunc(input):    return input * 42```&lt;/pre&gt;Now you can, for example, add the placeholder `{{{myfunc(42)}}}` in your slides.If the template ppt is a self contained python script ie: if it does not requirevariable values and function definition to be passed from outside, you cangenerate the output ppt directly from the commandline using the followingcommand.```consolepptx-renderer input_template.pptx output_file.pptx```## PlaceholdersYou can have placeholders for text, image or a table. Placeholders can be addedinside text boxes and shapes. All placeholders should be enclosed within a pairof triple braces (`{{{` and `}}}`).### TextAny placeholder which can be evaluated into a string can act as a text placeholder.For example: `{{{&quot;hello &quot; * 10/2}}}` or `{{{abs(-2)}}}`### Imageif you have added `:image()` as a suffix to the python statement, the renderer willtry to convert the value of python statement to a file location and insert animage from that file location.For example: `{{{&quot;c:\temp\myimage.png&quot;:image()}}}`### TableTables are similar to images, but only that instead of a string, the pythonstatement should evaluate to a list of lists. Then you can add `:table()` as asuffix and it will be convert to a table inside the ppt.For example: `{{{[[&quot;col1&quot;, &quot;col2&quot;, &quot;col3&quot;],[1, 2, 3]]:table()}}}` will render to|col1 | col2 | col3||-----|------|-----||1    |2     |3    |## Code in slide notesYou can write regular python code in the slide notes but enclosed between`` ```python `` and `` ``` ``.For example: Create a new pptx and write the following in the first slide's notes&lt;pre lang=&quot;python&quot;&gt;```pythonimport numpy as npmyarr = np.array([[1, 2], [3, 4]])```&lt;/pre&gt;And in the slide, create a rectangluar shape and add the text `{{{myarr:table()}}}`and a text box with the text `The determinant of the array is {{{np.linalg.det(myarr)}}}`</longdescription>
</pkgmetadata>