<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SeaflowpyA Python package for SeaFlow flow cytometer data.## Table of Contents1. [Install](#install)1. [Read EVT/OPP/VCT Files](#evtoppvct)1. [Command-line Interface](#cli)1. [Configuration](#configuration)1. [Integration with R](#rintegration)1. [Testing](#testing)1. [Development](#development)&lt;a name=&quot;install&quot;&gt;&lt;/a&gt;## InstallThis package is compatible with Python 3.7 and 3.8.### SourceThis will clone the repo and create a new virtual environment `seaflowpy`.`venv` can be replaced with `virtualenv`, `conda`, etc.```shgit clone https://github.com/armbrustlab/seaflowpycd seaflowpy[[ -d ~/venvs ]] || mkdir ~/venvspython3 -m venv ~/venvs/seaflowpysource ~/venvs/seaflowpy/bin/activatepip3 install -U pip setuptools wheelpip3 install -r requirements-test.txtpip3 install .# Confirm the seaflowpy command-line tool is accessibleseaflowpy version# Make sure basic tests passpytest# Leave the new virtual environmentdeactivate```### PyPI```shpip3 install seaflowpy```### DockerDocker images are available from Docker Hub at `ctberthiaume/seaflowpy`.```shdocker pull ctberthiaume/seaflowpydocker run -it ctberthiaume/seaflowpy seaflowpy version```The Docker build file is in this repo at `/Dockerfile`. The build process for the Docker image is detailed in `/build.sh`.&lt;a name=&quot;evtoppvct&quot;&gt;&lt;/a&gt;## Read EVT/OPP/VCT FilesAll file reading functions will return a `pandas.DataFrame` of particle data.Gzipped EVT, OPP, or VCT files can be read if they end with a &quot;.gz&quot; extension.For these code examples assume `seaflowpy` has been imported as `sfp`and `pandas` has been imported as `pd`, e.g.```pythonimport pandas as pdimport seaflowpy as sfp```and `*_filepath` has been set to the correct data file.Read an EVT file```pythonevt = sfp.fileio.read_evt_labview(evt_filepath)```Read an OPP file as an Apache Arrow Parquet file, select the 50% quantile, and subset columns.VCT files created with `popcycle` are also standard Parquet files and can be read in a similar fashion.```pythonopp = pd.read_parquet(opp_filepath)opp50 = opp[opp[&quot;q50&quot;]]opp50 = opp50[['fsc_small', 'chl_small', 'pe']]```&lt;a name=&quot;cli&quot;&gt;&lt;/a&gt;## Command-line interfaceAll `seaflowpy` CLI tools are accessible from the `seaflowpy` executable.Run `seaflowpy --help` to begin exploring the CLI usage documentation.### SFL validation workflowSFL validation sub-commands are available under the `seaflowpy sfl` command.The usage details for each command can be accessed as `seaflowpy sfl &lt;cmd&gt; -h`.The basic worfkflow should be1) If starting with an SDS file, first convert to SFL with `seaflowpy sds2sfl`2) If the SFL file is output from `sds2sfl` or is a raw SeaFlow SFL file,convert it to a normalized format with `seaflowpy sfl print`.This command can be used to concatenate multiple SFL files,e.g. merge all SFL files in day-of-year directories.3) Check for potential errors or warnings with `seaflowpy sfl validate`.4) Fix errors and warnings. Duplicate file errors can be fixed with `seaflowpy sfl dedup`.Bad lat/lon errors may be fixed with`seaflowpy sfl convert-gga`,assuming the bad coordinates are GGA to begin with.This can be checked with with `seaflowpy sfl detect-gga`.Other errors or missing values may need to be fixed manually.5) (Optional) Update event rates based on true event counts and file durationwith `seaflowpy sfl fix-event-rate`.True event counts for raw EVT files can be determined with `seaflowpy evt count`.If filtering has already been performed then event counts can be pulled fromthe `all_count` column of the opp table in the SQLITE3 database.e.g. `sqlite3 -separator $'\t' SCOPE_14.db 'SELECT file, all_count ORDER BY file'`6) (Optional) As a check for dataset completeness,the list of files in an SFL file can be compared to the actual EVT files presentwith `seaflowpy sfl manifest`. It's normal for a few files to differ,especially near midnight. If a large number of files are missing it may be asign that the data transfer was incomplete or the SFL file is missing some days.7) Once all errors or warnings have been fixed, do a final `seaflowpy validate`before adding the SFL file to the appropriate repository.&lt;a name=&quot;configuration&quot;&gt;&lt;/a&gt;## ConfigurationTo use `seaflowpy sfl manifest` AWS credentials need to be configured.The easiest way to do this is to install the `awscli` Python packageand go through configuration.```shpip3 install awscliaws configure```This will store AWS configuration in `~/.aws` which `seaflowpy` will use toaccess Seaflow data in S3 storage.&lt;a name=&quot;rintegration&quot;&gt;&lt;/a&gt;## Integration with RTo call `seaflowpy` from R, update the PATH environment variable in`~/.Renviron`. For example:```shPATH=${PATH}:${HOME}/venvs/seaflowpy/bin```&lt;a name=&quot;testing&quot;&gt;&lt;/a&gt;## TestingSeaflowpy uses `pytest` for testing. Tests can be run from this directory as`pytest` to test the installed version of the package, or run `tox` to installthe source into a temporary virtual environment for testing.&lt;a name=&quot;development&quot;&gt;&lt;/a&gt;## Development### Source code structureThis project follows the [Git feature branch workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow).Active development happens on the `develop` branch and on feature branches which are eventually merged into `develop`.### BuildTo build source tarball, wheel, and Docker image, run `./build.sh`. This will* create `seaflowpy-dist` with source tarball and wheel file (created during Docker build)* Docker image named `seaflowpy:&lt;version&gt;`To remove all build files, run `rm -rf ./seaflowpy-dist`.### Updating requirements filesCreate a new virtual environment```shpython3 -m venv newenvsource newenv/bin/activate```Update pip, wheel, setuptools```shpip3 install -U pip wheel setuptools```And install `seaflowpy` and freeze  the requirements```shpip3 install . &amp;&amp; \pytest &amp;&amp; \pip3 freeze | grep -v seaflowpy &gt;requirements.txt```Then install test dependencies, test, and freeze```shpip3 install pytest pytest-benchmark &amp;&amp; \pytest &amp;&amp; \pip3 freeze | grep -v seaflowpy &gt;requirements-test.txt```Then install dev dependencies, test, and freeze```shpip3 install pylint twine jupyterlab &amp;&amp; \pytest &amp;&amp; \pip3 freeze | grep -v seaflowpy &gt;requirements-dev.txt```Leave the virtual environment```shdeactivate```</longdescription>
</pkgmetadata>