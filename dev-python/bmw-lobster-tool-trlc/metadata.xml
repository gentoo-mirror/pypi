<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># LOBSTERThe **L**ightweight **O**pen **B**MW **S**oftware **T**raceability**E**vidence **R**eport allows you to demonstrate software traceabilityand requirements coverage, which is essential for meeting standardssuch as ISO 26262.This package contains a tool to interface with the proprietaryrequirements management tool[Codebeamer](https://intland.com/codebeamer).## ConfigurationThis tool is a bit more complex and you need to supply a config file,named (by default) `lobster-trlc.conf`. In it you can declare howyou'd like tracing tags to be extracted.For record types you can write:```package.typename {   description = field_name   tags = field_name}```By default none of the objects are traced, but adding a declarationlike this marks this type (and all its extensions) as things to trace.The `description` marks which field carries the description text thatcan be optionally included in LOBSTER.The tags field identifies the field carrying a tags field. In LOBSTERall tags are namespaced, and by default the namespace is &quot;req&quot; as thatis generally what you want to do. But you can change this by includingthe namespace like so:```   tags &quot;franka&quot; = field_name```For tuple types like this one:```tuple Codebeamer_Id {  item Integer  separator @  version optional Integer}```You need to provide a series of text expansions so that the`lobster-trlc` tool can build lobster tags from it. You can do thislike so:```example.Codebeamer_Id {  to_string = &quot;$(item)@$(version)&quot;  to_string = &quot;$(item)&quot;}```These functions are applied in order, and we pick the first one thatfully manages to apply. When a value is `null`, then and it'd be used(like in the first to_string function above) then the expansion doesnot apply and we move to the next, and so on. When none apply an erroris created.If you need to justify requirements not being linked or implemented,then you can also defined up to three extra fields (using `just_up`,`just_down`, and `just_global`) that should carry thisinformation. For example:```trlctype Requirement {   text String   unimplemented_justification optional String}```With this config file:```plainexample.Requirement {   description = text   just_down   = unimplemented_justification}```The meaning of &quot;up&quot; is along the usual direction of tracing tags. Forexample putting this in a software requirement means it is not linkedto a system requirement. The meaning of &quot;down&quot; is against the usualdirection of tracing tags. For example putting this in a softwarerequirement means it is either not implemented or not tested.As you can see the down justification is much more imprecise than anup justification. You should only use them if there is no other way toattach this justification on the actual offending object.Finally the &quot;global&quot; justification is a catch all: it just means notracing policy will be validated at all when considering this object.## Tools* `lobster-trlc`: Extrat requirements from TRLC.## Copyright &amp; License informationThe copyright holder of LOBSTER is the Bayerische Motoren WerkeAktiengesellschaft (BMW AG), and LOBSTER is published under the [GNUAffero General Public License, Version3](https://github.com/bmw-software-engineering/lobster/blob/main/LICENSE.md).This tool has no actual dependency on, or with, Codebeamer. It justtalks the API as described here: https://codebeamer.com/cb/wiki/117612</longdescription>
</pkgmetadata>