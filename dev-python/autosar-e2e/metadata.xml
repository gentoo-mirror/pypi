<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># autosar-e2e[![PyPI - Version](https://img.shields.io/pypi/v/autosar-e2e.svg)](https://pypi.org/project/autosar-e2e)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/autosar-e2e.svg)](https://pypi.org/project/autosar-e2e)[![Documentation Status](https://readthedocs.org/projects/autosar-e2e/badge/?version=latest)](https://autosar-e2e.readthedocs.io/en/latest/?badge=latest)The documentation is available [here](https://autosar-e2e.readthedocs.io/en/latest/).-----**Table of Contents**- [Description](#description)- [Installation](#installation)- [Usage](#usage)- [Test](#test)- [Build](#build)- [License](#license)## DescriptionThis library provides fast C implementations of the E2E CRC algorithms and E2E profiles. Currently, all relevant CRC algorithms are available in module `e2e.crc`but only E2E profiles 1, 2 and 5 are available. If you provide example data for the other profiles I would try to implement them, too.## Installation```consolepip install autosar-e2e```## Usage### CRC example```python3import e2ecrc: int = e2e.crc.calculate_crc8_h2f(b&quot;\x00\x00\x00\x00&quot;)```### E2E Profile 2```python3import e2e# create datadata = bytearray(b&quot;\x00&quot; *  8)length = len(data) - 1data_id_list = b&quot;\x00&quot; * 16# increment counter and calculate CRC inplacee2e.p02.e2e_p02_protect(data, length, data_id_list, increment_counter=True)# check CRCcrc_correct: bool = e2e.p02.e2e_p02_check(data, length, data_id_list)```## Test```consolepip install pipxpipx run tox```## Build```consolepip install pipxpipx run buildpipx run twine check dist/*```## License`autosar-e2e` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.</longdescription>
</pkgmetadata>