<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Napoleon - *Marching toward legible docstrings*===============================================.. note:: As of Sphinx 1.3, the napoleon extension will come packaged with   Sphinx under `sphinx.ext.napoleon`. The `sphinxcontrib.napoleon` extension   will continue to work with Sphinx &lt;= 1.2.Are you tired of writing docstrings that look like this::    :param path: The path of the file to wrap    :type path: str    :param field_storage: The :class:`FileStorage` instance to wrap    :type field_storage: FileStorage    :param temporary: Whether or not to delete the file when the File       instance is destructed    :type temporary: bool    :returns: A buffered writable file descriptor    :rtype: BufferedFileStorage`ReStructuredText`_ is great, but it creates visually dense, hard to read`docstrings`_. Compare the jumble above to the same thing rewrittenaccording to the `Google Python Style Guide`_::    Args:        path (str): The path of the file to wrap        field_storage (FileStorage): The :class:`FileStorage` instance to wrap        temporary (bool): Whether or not to delete the file when the File           instance is destructed    Returns:        BufferedFileStorage: A buffered writable file descriptorMuch more legible, no?Napoleon is a `Sphinx extension`_ that enables Sphinx to parse both `NumPy`_and `Google`_ style docstrings - the style recommended by `Khan Academy`_.Napoleon is a pre-processor that parses `NumPy`_ and `Google`_ styledocstrings and converts them to reStructuredText before Sphinx attempts toparse them. This happens in an intermediate step while Sphinx is processingthe documentation, so it doesn't modify any of the docstrings in your actualsource code files... _ReStructuredText: http://docutils.sourceforge.net/rst.html.. _docstrings: http://www.python.org/dev/peps/pep-0287/.. _Google Python Style Guide:   http://google.github.io/styleguide/pyguide.html.. _Sphinx extension: http://sphinx-doc.org/extensions.html.. _Google:   http://google.github.io/styleguide/pyguide.html#Comments.. _NumPy:   https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt.. _Khan Academy:   https://sites.google.com/a/khanacademy.org/forge/for-developers/styleguide/python#TOC-DocstringsGetting Started---------------1. Install the napoleon extension::       $ pip install sphinxcontrib-napoleon2. After `setting up Sphinx`_ to build your docs, enable napoleon in the   Sphinx `conf.py` file::       # conf.py       # Add napoleon to the extensions list       extensions = ['sphinxcontrib.napoleon']2. Use `sphinx-apidoc` to build your API documentation::       $ sphinx-apidoc -f -o docs/source projectdir.. _setting up Sphinx: http://sphinx-doc.org/tutorial.htmlDocstrings----------Napoleon interprets every docstring that `Sphinx autodoc`_ can find,including docstrings on: ``modules``, ``classes``, ``attributes``,``methods``, ``functions``, and ``variables``. Inside each docstring,specially formatted `Sections`_ are parsed and converted toreStructuredText.All standard reStructuredText formatting still works as expected... _Sphinx autodoc: http://sphinx-doc.org/ext/autodoc.html.. _Sections:Docstring Sections------------------All of the following section headers are supported:    * ``Args`` *(alias of Parameters)*    * ``Arguments`` *(alias of Parameters)*    * ``Attributes``    * ``Example``    * ``Examples``    * ``Keyword Args`` *(alias of Keyword Arguments)*    * ``Keyword Arguments``    * ``Methods``    * ``Note``    * ``Notes``    * ``Other Parameters``    * ``Parameters``    * ``Return`` *(alias of Returns)*    * ``Returns``    * ``Raises``    * ``References``    * ``See Also``    * ``Warning``    * ``Warnings`` *(alias of Warning)*    * ``Warns``    * ``Yield`` *(alias of Yields)*    * ``Yields``Google vs NumPy---------------Napoleon supports two styles of docstrings: `Google`_ and `NumPy`_. Themain difference between the two styles is that Google uses indention toseparate sections, whereas NumPy uses underlines.Google style::    def func(arg1, arg2):        &quot;&quot;&quot;Summary line.        Extended description of function.        Args:            arg1 (int): Description of arg1            arg2 (str): Description of arg2        Returns:            bool: Description of return value        &quot;&quot;&quot;        return TrueNumPy style::    def func(arg1, arg2):        &quot;&quot;&quot;Summary line.        Extended description of function.        Parameters        ----------        arg1 : int            Description of arg1        arg2 : str            Description of arg2        Returns        -------        bool            Description of return value        &quot;&quot;&quot;        return TrueNumPy style tends to require more vertical space, whereas Google styletends to use more horizontal space. Google style tends to be easier toread for short and simple docstrings, whereas NumPy style tends be easierto read for long and in-depth docstrings.The `Khan Academy`_ recommends using Google style.The choice between styles is largely aesthetic, but the two styles shouldnot be mixed. Choose one style for your project and be consistent with it.For full documentation see https://sphinxcontrib-napoleon.readthedocs.io</longdescription>
</pkgmetadata>