<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MLPathMLPath is an MLOPs library on Python that makes tracking machine learning experiments and organizing machine learning projects easier. It consists of two subpackages so far, MLQuest for tracking and MLDir for directory structure.Check this for &lt;a href='https://essamwisam.github.io/MLPath/mlpath.html'&gt;documentation&lt;/a&gt;. It also has examples and notes that will help you further understand the library.### Installation```pip install mlpath```&lt;h1 text-align='center'&gt; MLQuest &lt;/h1&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/49572294/218260658-846c1aab-fe57-44fa-baa6-5d988ff07e1b.png&quot;&gt;&lt;/img&gt;### To get started&gt; This is your code without mlquest```Python# Preprocessingx_data_p = Preprocessing(x_data=[1, 2, 3], alpha=1024, beta_param=7, c=12)# Feature Extractionx_data_f = FeatureExtraction(x_data_p, 14, 510, 4)  # Model Initializationmodel = RadialBasisNet(x_data_f, 12, 2, 3)# Model Trainingaccuracy = train_model(model)```&gt; This is your code with mlquest```Pythonfrom mlpath import mlquest as mlql = mlq.l# Start a new quest, this corresponds to a table where every run of the Python file will be logged.mlq.start_quest('Radial Basis Pipeline', log_defs=False)     # Preprocessingx_data_p = l(Preprocessing)(x_data=[1, 2, 3], alpha=1114, beta_param=2, c=925)# Feature Extractionx_data_f = l(FeatureExtraction)(x_data_p, 32, 50, 4)  # x_data_p is an array so it won't be logged.# Model Initializationmodel = l(RadialBasisNet)(x_data_f, 99, 19, 31)# Model Trainingaccuracy = train_model(model)# log the accuracymlq.log_metrics(accuracy)        # can also do mlq.log_metric(acc=accuracy) so its logged as accmlq.end_quest()```After three runs, the markdown file under the ```Quests``` folder has&lt;table&gt;&lt;tr&gt;&lt;th colspan=4 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;info&lt;/th&gt;&lt;th colspan=3 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;Preprocessing&lt;/th&gt;&lt;th colspan=3 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;FeatureExtraction&lt;/th&gt;&lt;th colspan=3 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;RadialBasisNet&lt;/th&gt;&lt;th colspan=1 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;metrics&lt;/th&gt;&lt;/tr&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;time&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;date&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;duration&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;id&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;alpha&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;beta_param&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;c&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;x_param&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;y_param&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;z_param&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;p_num&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;k_num&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;l_num&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;accuracy&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;16:31:16&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;02/11/23&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;1.01 min&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;1&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;74&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;12&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;95&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;13&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;530&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;4&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;99&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;99&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;3&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;50&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;16:32:40&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;02/11/23&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;4.91 ms&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;2&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;14&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;2&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;95&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;132&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;530&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;4&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;99&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;19&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;3&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;70&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;16:32:57&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;02/11/23&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;4.93 ms&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;3&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;1114&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;2&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;925&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;32&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;50&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;4&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;99&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;19&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;31&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;70&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;Editors like VSCode support viewing markdown out-of-the-box. You may need to press `CTRL/CMD+Shift+V`⦿ Besides of the markdown, you will also find a ```json``` folder in that directory with a config file that allows you to customize the columns to show in the markdown table.### But you probably prefer a web interfaceIn the same level as the ```Quests``` folder run the command ```mlweb``` then open ```http://localhost:5000``` in your browser. You should see something like this:&lt;img width=&quot;1430&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/49572294/218263965-3e376645-e85f-4045-8cf2-20294832983f.png&quot;&gt;⦿ You can search for specific runs, an example would be ```metrics.accuracy&gt;50``` (similar syntax to MLFlow)⦿ You can customize the columns to show in the table by clicking on `columns` (in lieu of doing it through```json``` config file)⦿ Choose which model (folder containing python files where you run quests) and which pipeline file (quest) using the bar on the left### An example with Scikit-Learn```pythonfrom mlpath import mlquest as mlq# We won't log defaults here but note that being aware of them and their values/impact is important.mlq.start_quest('Fractal-GB', log_defs=False, table_dest='../../')# read the datax_train_i, x_val_i, y_train_i, y_val_i = read_data()# preprocess the datax_train_p, x_val_p = preprocess_data(x_train_i, x_val_i)# extract fractal featuresx_train_f, x_val_f = mlq.l(apply_SFTA)(x_train_p, x_val_p, deviation=10)# initialize a GB modelmodel = mlq.l(GradientBoostingClassifier)(n_estimators=10, learning_rate=220, max_depth=110)# train the modelmodel.fit(x_train_f, y_train_i)# report the accuracyaccuracy = model.score(x_val_f, y_val_i).item()     # .item() so its a scalar that can be loggedmlq.log_metrics(acc=accuracy)mlq.end_quest()```&lt;table&gt;&lt;tr&gt;&lt;th colspan=4 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;info&lt;/th&gt;&lt;th colspan=1 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;apply_SFTA&lt;/th&gt;&lt;th colspan=3 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;GradientBoostingClassifier&lt;/th&gt;&lt;th colspan=1 style=&quot;text-align: center; vertical-align: middle;&quot;&gt;metrics&lt;/th&gt;&lt;/tr&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;time&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;date&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;duration&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;id&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;deviation&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;n_estimators&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;learning_rate&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;max_depth&lt;/th&gt;&lt;th style=&quot;text-align: center; vertical-align: middle;&quot;&gt;acc&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;17:26:34&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;02/11/23&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;2.33 min&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;1&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;30&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;10&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;50&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;12&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;17:29:08&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;02/11/23&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;344.98 ms&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;2&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;10&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;50&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;20&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;10&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;17:29:14&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;02/11/23&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;251.52 ms&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;3&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;10&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;50&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;20&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;10&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;17:29:22&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;02/11/23&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;266.31 ms&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;4&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;10&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;10&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;220&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;110&lt;/td&gt;&lt;td style=&quot;text-align: center; vertical-align: middle;&quot;&gt;0.5&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;### An example with PyTorchA real example on a dummy dataset that demonstrates using the library on real models is provided in the MLDir examples mentioned below.&lt;h1 text-align='center'&gt; MLDir &lt;/h1&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/49572294/218267208-c4f01847-4184-4732-aa10-bfe7f37b7005.png&quot;&gt;&lt;/img&gt;MLDir is a simple CLI that creates a standard directory structure for your machine learning project. It provides a folder structure that is comprehensive, highly scalable (development-wise) and apt for collaboration.#### Note of caution⦿ Although it integrates well with MLQuest, neither MLQuest nor MLDir require the other to function.⦿ Suppose your project has very few people working on it (only you) or does not require trying many models with many other preprocessing methods and features, then you may not really need MLDir. A notebook and MLQuest should be enough. Otherwise use MLDir to prevent your directory from becoming a spaghetti soup of Python files.### 📜 The MLDir ManifestoThe directory structure generated by MLDir complies with the MLDir manifesto ( a set of 'soft' standards) which attempts to enforce seperation of concerns among different stages of the machine learning pipeline and among writing code and running experiments (hyperparameter tuning). It specifies:➜ Each stage in the ML pipeline should be a separate directory.➜ If that stage is further broken down into sub-stages, each sub-stage should be a separate directory (in the top level)➜ For any pipeline stage, each alternative that implements that stage should be in a separate directory within that stage's folder.➜ Any implementation of a stage is a set of functions.➜ Functions are defined only in .py files not in notebooks.➜ Notebooks are only for testing or running entire pipelines (e.g., training and hyperparameter tuning). They import the needed functions from pipeline stages.You can also read more about the manifesto [here](https://github.com/EssamWisam/MLPath/tree/main/mlpath/mldir_cli/project).### To get startedMLDir is part of MLPath. So you don't need to install it separately. To create a simple folder structure, run:```bashmldir --name &lt;project_name&gt;```⦿ If mldir is ran without a name, it uses the name 'Project'This generates the following folder structure:```.├── DataFiles│   ├── Dataset 1│   └── Dataset 2├── DataPreparation│   ├── Ingestion│   └── Preprocessing├── FeatureExtraction│   ├── BoW│   ├── GLCM│   └── OneHot├── ModelPipelines│   ├── GRU│   ├── GradientBoost│   └── SVM├── ModelScoring│   ├── Pipeline│   └── Scoring├── README.md├── Sandbox.ipynb│   ├── DataPreparation│   ├── FeatureExtraction│   └── ModelsPipelines└── Sandbox.ipynb```The file in each folder has instructions on how to use it. These are all grouped in the README for a more detailed explanation.### Other important options```bashmldir --name&lt;project-name&gt; --full```⦿ The --full option generates an even more comprehensive folder structure. Including folders such as ```ModelImplementations```, ```References``` and most importantly ```Production```.⦿ The ```Production``` folder contains a Flask app that can be used to serve your model as an API. All you need is only to import your final model into app.py and replace the dummy model with it. The Flask app assumes that your model takes a file via path and returns a prediction but it can be easilt extended otherwise to suit your needs&lt;img width=&quot;1430&quot; alt=&quot;image&quot; src=&quot;https://user-images.githubusercontent.com/49572294/218269358-d2db4974-c5a1-4531-a696-69e842f7bb55.png&quot;&gt;### A note on the Flask app⦿ Even if you have never used Flask (and need to do more than just plug in your model), notice that the app is composed of a templates folder that stores the HTML of the pages and a static folder that stores CSS/JS and other assets. Lastly, the app.py file contains the code that runs the app by rendering the right HTML page and passing the right parameters to it according to your request (visiting a URL, submitting a file,...)### A complete example```bashmldir --name &lt;project-name&gt;  --example```⦿ The --example option generates a complete example on a dummy dataset (but real models) that should be helpful for you to understand more about the folder structure and how to use it (or you can use it as a template for your own project). The example also uses ## CreditsThanks to [Abdullah](https://github.com/abdullahalshawafi) for all his startling work on the mlweb module and for all the time he spent with me to discuss or test the library.Thanks to [Jimmy](https://github.com/Hero2323) for all his help in testing the library.### Collaborators&lt;table&gt;&lt;tr&gt;    &lt;td align=&quot;center&quot;&gt;        &lt;a href=&quot;https://github.com/EssamWisam&quot;&gt;            &lt;img src=&quot;https://avatars.githubusercontent.com/u/49572294?v=4&quot; width=&quot;100;&quot; alt=&quot;EssamWisam&quot;/&gt;            &lt;br /&gt;            &lt;sub&gt;&lt;b&gt;Essam Wisam&lt;/b&gt;&lt;/sub&gt;        &lt;/a&gt;    &lt;/td&gt;    &lt;td align=&quot;center&quot;&gt;        &lt;a href=&quot;https://github.com/abdullahalshawafi&quot;&gt;            &lt;img src=&quot;https://avatars.githubusercontent.com/u/53022307?v=4&quot; width=&quot;100;&quot; alt=&quot;AhmedNossir&quot;/&gt;            &lt;br /&gt;            &lt;sub&gt;&lt;b&gt;Abdullah Adel&lt;/b&gt;&lt;/sub&gt;        &lt;/a&gt;    &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</longdescription>
</pkgmetadata>