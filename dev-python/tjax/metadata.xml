<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============Tools for JAX=============.. role:: bash(code)    :language: bash.. role:: python(code)    :language: pythonThis repository implements a variety of tools for the differential programming library`JAX &lt;https://github.com/google/jax&gt;`_.----------------Major components----------------Tjax's major components are:- A `dataclass &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/dataclasses&gt;`_ decorator :python:`dataclasss` that facilitates defining structured JAX objects (so-called &quot;pytrees&quot;), which benefits from:  - the ability to mark fields as static (not available in `chex.dataclass`), and  - a display method that produces formatted text according to the tree structure.- A `fixed_point &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/fixed_point&gt;`_ finding library heavily based on `fax &lt;https://github.com/gehring/fax&gt;`_.  Our  library  - supports stochastic iterated functions, and  - uses dataclasses instead of closures to avoid leaking JAX tracers.- A `shim &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/gradient&gt;`_ for the gradient transformation library `optax &lt;https://github.com/deepmind/optax&gt;`_ that supports:  - easy differentiation and vectorization of “gradient transformation” (learning rule) parameters,  - gradient transformation objects that can be passed *dynamically* to jitted functions, and  - generic type annotations.- A pretty printer :python:`print_generic` for aggregate and vector types, including dataclasses.  (See  `display &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/display&gt;`_.)  It features:  - a version for printing traced values :python:`tapped_print_generic`,  - decoding size of the batched axes when printing ordinary and traced values,  - colorized tree output for aggregate structures, and  - formatted tabular output for arrays (or statistics when there's no room for tabular output).----------------Minor components----------------Tjax also includes:- Versions of :python:`custom_vjp` and :python:`custom_jvp` that support being used on methods:  :python:`custom_vjp_method` and :python:`custom_vjp_method`  (See `shims &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/shims.py&gt;`_.)- Tools for working with cotangents.  (See  `cotangent_tools &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/cotangent_tools.py&gt;`_.)- JAX tree registration for `NetworkX &lt;https://networkx.github.io/&gt;`_ graph types.  (See  `graph &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/graph.py&gt;`_.)- Leaky integration :python:`leaky_integrate` and Ornstein-Uhlenbeck process iteration  :python:`diffused_leaky_integrate`.  (See `leaky_integral &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/leaky_integral.py&gt;`_.)- An improved version of :python:`jax.tree_util.Partial`.  (See `partial &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/partial.py&gt;`_.)- A testing function :python:`assert_tree_allclose` that automatically produces testing code.  And, a related  function :python:`tree_allclose`.  (See `testing &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/testing.py&gt;`_.)- Basic tools like :python:`divide_where`.  (See `tools &lt;https://github.com/NeilGirdhar/tjax/blob/master/tjax/_src/tools.py&gt;`_.)-----------------------Contribution guidelines------------------------ Conventions: PEP8.- How to run tests: :bash:`pytest .`- How to clean the source:  - :bash:`ruff .`  - :bash:`pyright`  - :bash:`mypy`  - :bash:`isort .`  - :bash:`pylint tjax tests`</longdescription>
</pkgmetadata>