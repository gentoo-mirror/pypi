<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![](https://img.shields.io/pypi/pyversions/django-extra-settings.svg?color=3776AB&amp;logo=python&amp;logoColor=white)](https://www.python.org/)[![](https://img.shields.io/pypi/djversions/django-extra-settings?color=0C4B33&amp;logo=django&amp;logoColor=white&amp;label=django)](https://www.djangoproject.com/)[![](https://img.shields.io/pypi/v/django-extra-settings.svg?color=blue&amp;logo=pypi&amp;logoColor=white)](https://pypi.org/project/django-extra-settings/)[![](https://pepy.tech/badge/django-extra-settings/month)](https://pepy.tech/project/django-extra-settings)[![](https://img.shields.io/github/stars/fabiocaccamo/django-extra-settings?logo=github)](https://github.com/fabiocaccamo/django-extra-settings/stargazers)[![](https://img.shields.io/pypi/l/django-extra-settings.svg?color=blue)](https://github.com/fabiocaccamo/django-extra-settings/blob/main/LICENSE.txt)[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-extra-settings/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-extra-settings/main)[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-extra-settings/test-package.yml?branch=main&amp;label=build&amp;logo=github)](https://github.com/fabiocaccamo/django-extra-settings)[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-extra-settings?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-extra-settings)[![](https://img.shields.io/codacy/grade/554c0505ed9844f3865bee975d1b894c?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-extra-settings)[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-extra-settings?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-extra-settings/)[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)# django-extra-settingsconfig and manage typed extra settings using just the django admin.![](https://user-images.githubusercontent.com/1035294/74425761-81325400-4e54-11ea-9095-3d64e1420bfe.gif)## Installation-   Run `pip install django-extra-settings`-   Add `extra_settings` to `settings.INSTALLED_APPS`-   Run `python manage.py migrate`-   Run `python manage.py collectstatic`-   Restart your application server-   Just go to the admin where you can `create`, `update` and `delete` your settings.## Usage### SettingsAll these settings are optional, if not defined in `settings.py` the default values (listed below) will be used.```python# the name of the installed app for registering the extra settings admin.EXTRA_SETTINGS_ADMIN_APP = &quot;extra_settings&quot;``````python# the name of the cache to use, if not found the &quot;default&quot; cache will be used.EXTRA_SETTINGS_CACHE_NAME = &quot;extra_settings&quot;``````python# a list of settings that will be available by default, each item must contain &quot;name&quot;, &quot;type&quot; and &quot;value&quot;.# check the #types section to see all the supported settings types.EXTRA_SETTINGS_DEFAULTS = [    {        &quot;name&quot;: &quot;SETTING_NAME&quot;,        &quot;type&quot;: &quot;string&quot;,        &quot;value&quot;: &quot;Hello World&quot;,    },    # ...]``````python# if True, settings names will be forced to honor the standard django settings formatEXTRA_SETTINGS_ENFORCE_UPPERCASE_SETTINGS = True``````python# if True, the template tag will fallback to django.conf.settings,# very useful to retrieve conf settings such as DEBUG.EXTRA_SETTINGS_FALLBACK_TO_CONF_SETTINGS = True``````python# the upload_to path value of settings of type 'file'EXTRA_SETTINGS_FILE_UPLOAD_TO = &quot;files&quot;``````python# the upload_to path value of settings of type 'image'EXTRA_SETTINGS_IMAGE_UPLOAD_TO = &quot;images&quot;``````python# if True, settings name prefix list filter will be shown in the admin changelistEXTRA_SETTINGS_SHOW_NAME_PREFIX_LIST_FILTER = False``````python# if True, settings type list filter will be shown in the admin changelistEXTRA_SETTINGS_SHOW_TYPE_LIST_FILTER = False``````python# the package name displayed in the adminEXTRA_SETTINGS_VERBOSE_NAME = &quot;Settings&quot;```### AdminYou can display the settings model admin in another installed app group by using the `EXTRA_SETTINGS_ADMIN_APP` setting.You can also have a more advanced control, by registering the settings admin with multiple installed apps and filtering each app settings using the `queryset_processor` argument.&gt; :warning: If you do either of the above, you must run migrations for each app that will display `extra_settings` model admin in its admin *(because django creates migrations even for proxy models)*.#### Admin advanced configuration exampleIn your custom app `photos.admin` module:```pythonfrom extra_settings.admin import register_extra_settings_adminregister_extra_settings_admin(    app=__name__,    queryset_processor=lambda qs: qs.filter(name__istartswith=&quot;PHOTOS_&quot;),    unregister_default=True,)```In your custom app `videos.admin` module:```pythonfrom extra_settings.admin import register_extra_settings_adminregister_extra_settings_admin(    app=__name__,    queryset_processor=lambda qs: qs.filter(name__istartswith=&quot;VIDEOS_&quot;),    unregister_default=True,)```By default the `&quot;extra_settings&quot;` app has its own admin app group.### CachingYou can customise the app caching options using `settings.CACHES[&quot;extra_settings&quot;]` setting, otherwise the `&quot;default&quot;` cache will be used:```pythonCACHES = {    # ...    &quot;extra_settings&quot;: {        &quot;BACKEND&quot;: &quot;django.core.cache.backends.locmem.LocMemCache&quot;,        &quot;TIMEOUT&quot;: 60,    },    # ...}```By default the `&quot;extra_settings&quot;` cache is used, if you want to use another cache you can set it using the `EXTRA_SETTINGS_CACHE_NAME` setting.### PythonYou can **create**, **read**, **update** and **delete** settings programmatically:#### TypesThis is the list of the currently supported setting types you may need to use:-   `Setting.TYPE_BOOL`-   `Setting.TYPE_DATE`-   `Setting.TYPE_DATETIME`-   `Setting.TYPE_DECIMAL`-   `Setting.TYPE_DURATION`-   `Setting.TYPE_EMAIL`-   `Setting.TYPE_FILE`-   `Setting.TYPE_FLOAT`-   `Setting.TYPE_IMAGE`-   `Setting.TYPE_INT`-   `Setting.TYPE_JSON`-   `Setting.TYPE_STRING`-   `Setting.TYPE_TEXT`-   `Setting.TYPE_TIME`-   `Setting.TYPE_URL`#### Create```pythonfrom extra_settings.models import Settingsetting_obj = Setting(    name=&quot;SETTING_NAME&quot;,    value_type=Setting.TYPE_STRING,    value=&quot;django-extra-settings&quot;,)setting_obj.save()```#### Read```pythonfrom extra_settings.models import Settingvalue = Setting.get(&quot;SETTING_NAME&quot;, default=&quot;django-extra-settings&quot;)```#### Update```pythonfrom extra_settings.models import Settingsetting_obj = Setting(    name=&quot;SETTING_NAME&quot;,    value_type=Setting.TYPE_BOOL,    value=True,)setting_obj.value = Falsesetting_obj.save()```#### Delete```pythonfrom extra_settings.models import SettingSetting.objects.filter(name=&quot;SETTING_NAME&quot;).delete()```#### ValidatorsYou can define a custom validator for each setting:-   Validators must be defined using full python path, eg. `myapp.mymodule.my_validator`.-   Validators are called passing a single argument (the value of the setting) and if the value is valid, they should return `True`, otherwise returning `False` or `None` a `ValidationError` is raised.### TemplatesYou can retrieve settings in templates:```html{% load extra_settings %}{% get_setting 'SETTING_NAME' default='django-extra-settings' %}```### TestsYou can override specific settings during tests using `extra_settings.test.override_settings`.It can be used both as decorator and as context-manager:```pythonfrom extra_settings.test import override_settings# decorator@override_settings(SETTING_NAME_1=&quot;value for testing 1&quot;, SETTING_NAME_2=&quot;value for testing 2&quot;)def test_with_custom_settings(self):    pass# context managerdef test_with_custom_settings(self):    with override_settings(SETTING_NAME_1=&quot;value for testing 1&quot;, SETTING_NAME_2=&quot;value for testing 2&quot;):        pass```## Testing```bash# clone repositorygit clone https://github.com/fabiocaccamo/django-extra-settings.git &amp;&amp; cd django-extra-settings# create virtualenv and activate itpython -m venv venv &amp;&amp; . venv/bin/activate# upgrade pippython -m pip install --upgrade pip# install requirementspip install -r requirements.txt -r requirements-test.txt# install pre-commit to run formatters and linterspre-commit install --install-hooks# run teststox# orpython runtests.py# orpython -m django test --settings &quot;tests.settings&quot;```## LicenseReleased under [MIT License](LICENSE.txt).---## Supporting- :star: Star this project on [GitHub](https://github.com/fabiocaccamo/django-extra-settings)- :octocat: Follow me on [GitHub](https://github.com/fabiocaccamo)- :blue_heart: Follow me on [Twitter](https://twitter.com/fabiocaccamo)- :moneybag: Sponsor me on [Github](https://github.com/sponsors/fabiocaccamo)## See also- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. üßô ‚ö°- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. üé®- [`django-maintenance-mode`](https://github.com/fabiocaccamo/django-maintenance-mode) - shows a 503 error page when maintenance-mode is on. üöß üõ†Ô∏è- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. ‚Ü™Ô∏è- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. üå≥- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, I/O shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. üìò- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode Italian fiscal codes - codifica/decodifica del Codice Fiscale. üáÆüáπ üí≥- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. üß¢- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. üßü‚ôÇÔ∏è</longdescription>
</pkgmetadata>