<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CloudLink PythonThis is the original, Python-based codebase for CloudLink server.## 💡 Features 💡### 🪶 Fast and lightweightCloudLink can run on minimal resources. At least 25MB of RAM and any reasonably capable CPU can run a CloudLink server.### 🌐 Essential networking tools* Unicast and multicast packets across clients* Expandable functionality with a built-in method loader### 📦 Minimal dependenciesAll dependencies below can be installed using `pip install -r requirements.txt`.* 🐍 Python &gt;=3.11* 🧵 asyncio (Built-in)* 📃 [&quot;ujson&quot; ultrajson](https://github.com/ultrajson/ultrajson)* 🔍 [pyeve/cerberus](https://github.com/pyeve/cerberus)* ❄️ [&quot;snowflake-id&quot; vd2org/snowflake](https://github.com/vd2org/snowflake)* 🌐 [aaugustin/websockets](https://github.com/aaugustin/websockets)### 🔋Batteries includedThe CloudLink Python server comes with full support for the CL4 protocol and the Scratch cloud variable protocol.Just download, setup, and start!### 🧱 Plug-and-play modularityYou can easily extend the functionality of the server using classes and decorators. Here's an example of a simple plugin that displays &quot;Foobar!&quot; in the consolewhen a client sends the message `{ &quot;cmd&quot;: &quot;foo&quot; }` to the server.```python# Import the serverfrom cloudlink import server# Import default protocolfrom cloudlink.server.protocols import clpv4# Instantiate the server objectserver = server()# Set logging levelserver.logging.basicConfig(    level=server.logging.DEBUG)# Load default CL protocolclpv4 = clpv4(server)# Define the functions your plugin executesclass myplugin:    def __init__(self, server, protocol):                # Example command - client sends { &quot;cmd&quot;: &quot;foo&quot; } to the server, this function will execute        @server.on_command(cmd=&quot;foo&quot;, schema=protocol.schema)        async def foobar(client, message):            print(&quot;Foobar!&quot;)# Load the plugin!myplugin(server, clpv4)# Start the server!server.run()```</longdescription>
</pkgmetadata>