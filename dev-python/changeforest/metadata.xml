<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Random Forests for Change Point DetectionChange point detection aims to identify structural breaks in the probabilitydistribution of a time series. Existing methods either assume a parametric model forwithin-segment distributions or are based on ranks or distances and thus fail inscenarios with a reasonably large dimensionality.`changeforest` implements a classifier-based algorithm that consistently estimateschange points without any parametric assumptions, even in high-dimensional scenarios.It uses the out-of-bag probability predictions of a random forest to construct apseudo-log-likelihood that gets optimized using a computationally feasible two-stepmethod.See [1] for details.## InstallationTo install from `conda-forge` (recommended), run```bashconda install -c conda-forge changeforest```To install from `PyPI`, run```bashpip install changeforest```## ExampleIn the following example, we perform random forest-based change point detection ona simulated dataset with `n=600` observations and covariance shifts at `t=200, 400`.```pythonIn [1]: import numpy as np   ...:    ...: Sigma = np.full((5, 5), 0.7)   ...: np.fill_diagonal(Sigma, 1)   ...:    ...: rng = np.random.default_rng(12)   ...: X = np.concatenate(   ...:     (   ...:         rng.normal(0, 1, (200, 5)),   ...:         rng.multivariate_normal(np.zeros(5), Sigma, 200),   ...:         rng.normal(0, 1, (200, 5)),   ...:     ),   ...:     axis=0,   ...: )```The simulated dataset `X` coincides with the _change in covariance_ (CIC) setupdescribed in [1]. Observations in the first and last segment are independently drawnfrom a standard multivariate Gaussian distribution. Observations in the second segmentare i.i.d. normal with mean zero and unit variance, but with a covariance of ρ = 0.7between coordinates. This is a challenging scenario.```pythonIn [2]: from changeforest import changeforest   ...:    ...: result = changeforest(X, &quot;random_forest&quot;, &quot;bs&quot;)   ...: resultOut[2]:                     best_split max_gain p_value(0, 600]                   412   19.603   0.005 ¦--(0, 412]               201   62.981   0.005 ¦   ¦--(0, 201]           194  -12.951    0.76 ¦   °--(201, 412]         211   -9.211   0.545 °--(412, 600]             418  -37.519   0.915In [3]: result.split_points()Out[3]: [201, 412]````changeforest` correctly identifies the change point around `t=200` but is slightlyoff at `t=412`. The `changeforest` function returns a `BinarySegmentationResult`.We use its `plot` method to investigate the gain curves maximized by the change point estimates:```In [4]: result.plot().show()```&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;../docs/py_cic_rf_binary_segmentation_result_plot.png&quot; /&gt;&lt;/p&gt;Change point estimates are marked in red.For `method=&quot;random_forest&quot;` and `method=&quot;knn&quot;`, the `changeforest` algorithm uses a two-step approach tofind an optimizer of the gain. This fits a classifier for three split candidatesat the segment's 1/4, 1/2 and 3/4 quantiles, computes approximate gain curves usingthe resulting pseudo-log-likelihoods and selects the overall optimizer as a second guess.We can investigate the gain curves from the optimizer using the `plot` method of `OptimizerResult`.The initial guesses are marked in blue.```In [5]: result.optimizer_result.plot().show()```&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;../docs/py_cic_rf_optimizer_result_plot.png&quot; /&gt;&lt;/p&gt; One can observe that the approximate gain curves are piecewise linear, with maximaaround the true underlying change points.The `BinarySegmentationResult` returned by `changeforest` is a tree-like object with attributes`start`, `stop`, `best_split`, `max_gain`, `p_value`, `is_significant`, `optimizer_result`, `model_selection_result`, `left`, `right` and `segments`. These can be interesting to investigate the output of the algorithm further.The `changeforest` algorithm can be tuned with hyperparameters. See[here](https://github.com/mlondschien/changeforest/blob/287ac0f10728518d6a00bf698a4d5834ae98715d/src/control.rs#L3-L30)for their descriptions and default values. In Python, the parameters canbe specified with the [`Control` class](https://github.com/mlondschien/changeforest/blob/b33533fe0ddf64c1ea60d0d2203e55b117811667/changeforest-py/changeforest/control.py#L1-L26),which can be passed to `changeforest`. The following will build random forests with20 trees:```pythonIn [6]: from changeforest import Control   ...: changeforest(X, &quot;random_forest&quot;, &quot;bs&quot;, Control(random_forest_n_estimators=20))Out[6]:                             best_split max_gain p_value(0, 600]                           592  -11.786    0.01 ¦--(0, 592]                       121    -6.26   0.015 ¦   ¦--(0, 121]                    13  -14.219   0.615 ¦   °--(121, 592]                 416   21.272   0.005 ¦       ¦--(121, 416]             201   37.157   0.005 ¦       ¦   ¦--(121, 201]         192   -17.54    0.65 ¦       ¦   °--(201, 416]         207   -6.701    0.74 ¦       °--(416, 592]             584  -44.054   0.935 °--(592, 600]     ```The `changeforest` algorithm still detects change points around `t=200, 400` but alsoreturns two false positives.Due to the nature of the change, `method=&quot;change_in_mean&quot;` is unable to detect anychange points at all:```pythonIn [7]: changeforest(X, &quot;change_in_mean&quot;, &quot;bs&quot;)Out[7]:           best_split max_gain p_value(0, 600]         589    8.318 ```## References[1] M. Londschien, S. Kovács and P. Bühlmann (2022), &quot;Random Forests for Change Point Detection&quot;, working paper.</longdescription>
</pkgmetadata>