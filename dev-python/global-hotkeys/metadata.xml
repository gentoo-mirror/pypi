<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Global Hotkey Bindings for WindowsUse this library to set system wide keybindings for your code to respond to.## Installation```pip install global-hotkeys -U```## Example usage```pythonfrom global_hotkeys import *import time# Flag to indicate whether the program should continue running.is_alive = Truedef print_hello():    print(&quot;Hello&quot;)def print_world():    print(&quot;World&quot;)def print_foo():    print(&quot;Foo&quot;)def print_bar():    print(&quot;Bar&quot;)def print_with_params(params):    print(params[&quot;test&quot;])def press_with_params(params):    print(params[&quot;press_param&quot;])def release_with_params(params):    print(params[&quot;release_param&quot;])def exit_application():    global is_alive    print(&quot;exiting&quot;)    stop_checking_hotkeys()    is_alive = False# Declare some key bindings.bindings = [    [&quot;control + 7, control + 4&quot;, None, print_world, True],    [&quot;control + 5&quot;, None, print_hello, False],    [&quot;control + 6&quot;, None, print_with_params, False, {&quot;test&quot;:5}],    [        &quot;control + 8&quot;,         press_with_params,         release_with_params,         False,         {&quot;press_param&quot;:&quot;pressed!&quot;},         {&quot;release_param&quot;: &quot;released!&quot;}    ],    # dict style    {        &quot;hotkey&quot;: &quot;control + 4&quot;,        &quot;on_press_callback&quot;: None,        &quot;on_release_callback&quot;: print_with_params,        &quot;actuate_on_partial_release&quot;: False,        &quot;callback_params&quot;: {&quot;test&quot;: &quot;testing&quot;},    },    # dict style with differentiating params for press and release callbacks    {        &quot;hotkey&quot;: &quot;control + 9&quot;,        &quot;on_press_callback&quot;: press_with_params,        &quot;on_release_callback&quot;: release_with_params,        &quot;actuate_on_partial_release&quot;: False,        &quot;press_callback_params&quot;: {&quot;press_param&quot;:&quot;ctrl+9 pressed!&quot;},        &quot;release_callback_params&quot;: {&quot;release_param&quot;: &quot;ctrl+9 released!&quot;},    },    [&quot;window + 1&quot;, None, print_foo, False],    [&quot;t,m&quot;, None, print_bar, False],    [&quot;control + Q&quot;, None, exit_application, False],]# Bindings take on the form of:#   &lt;binding&gt;, on_press_callback, on_release_callback, actuate_on_partial_release_flag, callback_params## *Note that callback_params will be passed to both press and release callback functions## Or in explicit dict format:# {#     &quot;hotkey&quot;: &lt;binding&gt;,#     &quot;on_press_callback&quot;: &lt;press_callback&gt;,#     &quot;on_release_callback&quot;: &lt;release_callback&gt;,#     &quot;actuate_on_partial_release&quot;: False | True,#     &quot;callback_params&quot;: &lt;a variable or expression can go here&gt;  &lt;-- This applies to both callbacks.#     &quot;press_callback_params&quot;: &lt;a variable or expression can go here&gt;#     &quot;release_callback_params&quot;: &lt;a variable or expression can go here&gt;# }# It's useful to have 'actuate_on_partial_release_flag' set to False, # so your modifier keys don't get in the way of any automatic keyboard output you're doing in response.# Note the actual hotkey syntax. Key combinations are denoted via the '+' character, # and additional key chords are separated by commas. Spaces are ignored.# Register all of our keybindingsregister_hotkeys(bindings)# Finally, start listening for keypressesstart_checking_hotkeys()# Keep waiting until the user presses the exit_application keybinding.# Note that the hotkey listener will exit when the main thread does.while is_alive:    time.sleep(0.1)```## Also note that I've included a simple global snippets example using this functionality.It's in the `tests` folder if you download this project's source from [GitHub](https://github.com/btsdev/global_hotkeys).It's the file `global_snippets.py` and it demonstrates toggling on and off global snippets using a hotkey, and using key chords to inject snippets, in this case the current date time. This is a nod to a user who emailed regarding the addition of this functionality.It achieves this by pasting in the current date time to any input field after backspacing to erase the snippet's chord from the input field (careful where you use it though. For faster input of snippets, I relied on just placing the date string into the clipboard and emulating CTRL+V to paste).Also, it uses the winsound library's Beep function to emit a low and subtle visual cue to indicate whether you just toggled the global snippets on or off.### Try setting up and using the Hyperkey to avoid hotkey conflicts with your applications.I personally use the Hyperkey (which is basically Window+Control+Shift+Alt and also known as the 'OfficeKey' on keyboards that have actually have it) to avoid clashing with most applications' own hotkeys, which is normally not available in windows, but it can be setup using [Autohotkey](https://stackoverflow.com/questions/40435980/how-to-emulate-hyper-key-in-windows-10-using-autohotkey) and also applying the [OfficeKeyFix](https://github.com/anthonyheddings/OfficeKeyFix) which you'll need to compile yourself if one is interested. You can read more about the officekey issue on [Super User](https://superuser.com/questions/1455857/how-to-disable-office-key-keyboard-shortcut-opening-office-app). I personally mapped it to my right control key instead of the capslock key; it was just a simple edit to the Autohotkey script. Both of these I placed in my windows startup folder, and then I was all set.## Additional functionalityYou may also add/remove keybindings one at a time, in bulk, or completely clear them all out (which also stops the hotkey listener thread).```python# Just reusing our bindings declaration from above (this is not a complete code example, btw).bindings = [    [&quot;control + 7, control + 4&quot;, None, print_world, True],    [&quot;control + 5&quot;, None, print_hello, False],    [&quot;window + 1&quot;, None, print_foo, False],    [&quot;t,m&quot;, None, print_bar, False],    [&quot;control + Q&quot;, None, exit_application, False],]# Register a single keybinding (if it's not already registered). # Returns True if the key didn't already exist and was added, # else False (the binding is already registered - remove it first if # you wish to overwrite it with new event handlers).register_hotkey(bindings[0])# Remove a single keybinding (if it exists). # Returns True if the key existed and was removed, else False (the binding is already gone).remove_hotkey(bindings[0])# Register a list of keybindings.register_hotkeys(bindings)# Remove a list of keybindings.remove_hotkeys(bindings)# Remove all keybindings and terminate the hotkey listener thread.clear_hotkeys()```## List of the available keys```backspacetabclearentershiftcontrolaltpausecaps_lockescapespacepage_uppage_downleft_windowright_windowwindowendhomeleftuprightdownselectprintexecuteenterprint_screeninsertdeletehelp0123456789abcdefghijklmnopqrstuvwxyznumpad_0numpad_1numpad_2numpad_3numpad_4numpad_5numpad_6numpad_7numpad_8numpad_9multiply_keyadd_keyseparator_key  &lt;-- '|' also known as the 'pipe'|subtract_keydecimal_keydivide_keyf1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f24num_lockscroll_lockleft_shiftright_shiftleft_controlright_controlleft_menuright_menubrowser_backbrowser_forwardbrowser_refreshbrowser_stopbrowser_searchbrowser_favoritesbrowser_start_and_homevolume_mutevolume_Downvolume_upnext_trackprevious_trackstop_mediaplay/pause_mediastart_mailselect_mediastart_application_1start_application_2attn_keycrsel_keyexsel_keyplay_keyzoom_keyclear_key+,-./`;[\]'````Change Log==========0.1.6 (6/21/2023)------------------ Changelog updated.0.1.5 (6/21/2023)------------------ Minor fix to the register_hotkey function.0.1.4 (6/21/2023)------------------ Added optional press and release callback parameter differentiation. Merged fix for press callback function.0.1.3 (5/28/2023)------------------ Implemented retrofitting for the original hotkey style: e.g. [&quot;control&quot;, &quot;alt&quot;, &quot;z&quot;]. This is converted automatically to &quot;control + alt + z&quot;.0.1.2 (5/28/2023)------------------ Added dict binding format support. Also added support for supplying callback parameters for bindings.0.1.1 (5/28/2023)------------------ Added syntax update warning for anyone still using the old hotkey binding syntax. Updated the singular register_hotkey function.0.1.0 (5/28/2023)------------------ Code refactoring. Hotkey formatting is updated. Key chord sequences now supported. Now providing option to actuate release callback either on partial release of the last key chord, or on full release of all keys in the last keychord (though if the windows modifier key is used, unfortunately it still just actuates immediately on partial release).0.0.6 (5/27/2023)------------------ Fixed window key detection.0.0.5 (5/27/2023)------------------ Fixed unwanted modifier keys bug. Added pywin32 as dependency.0.0.4 (12/1/2020)------------------ Fixed Development Status: It's now set to Beta.0.0.3 (12/1/2020)------------------ Readme update: Added some clarification in the example usage.0.0.2 (12/1/2020)------------------ Readme update.0.0.1 (12/1/2020)------------------ First Release</longdescription>
</pkgmetadata>