<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gooddata-scan-clientNo description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:- API version: v0- Package version: 1.3.0- Build package: org.openapitools.codegen.languages.PythonClientCodegen## Requirements.Python &gt;=3.6## Installation &amp; Usage### pip installIf the python package is hosted on a repository, you can install directly using:```shpip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git```(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)Then import the package:```pythonimport gooddata_scan_client```### SetuptoolsInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).```shpython setup.py install --user```(or `sudo python setup.py install` to install the package for all users)Then import the package:```pythonimport gooddata_scan_client```## Getting StartedPlease follow the [installation procedure](#installation--usage) and then run the following:```pythonimport timeimport gooddata_scan_clientfrom pprint import pprintfrom gooddata_scan_client.api import scanning_apifrom gooddata_scan_client.model.data_source_schemata import DataSourceSchematafrom gooddata_scan_client.model.scan_request import ScanRequestfrom gooddata_scan_client.model.scan_result_pdm import ScanResultPdm# Defining the host is optional and defaults to http://localhost# See configuration.py for a list of all supported configuration parameters.configuration = gooddata_scan_client.Configuration(    host = &quot;http://localhost&quot;)# Enter a context with an instance of the API clientwith gooddata_scan_client.ApiClient(configuration) as api_client:    # Create an instance of the API class    api_instance = scanning_api.ScanningApi(api_client)    data_source_id = &quot;myPostgres&quot; # str | Data source id    try:        # Get a list of schema names of a database        api_response = api_instance.get_data_source_schemata(data_source_id)        pprint(api_response)    except gooddata_scan_client.ApiException as e:        print(&quot;Exception when calling ScanningApi-&gt;get_data_source_schemata: %s\n&quot; % e)```## Documentation for API EndpointsAll URIs are relative to *http://localhost*Class | Method | HTTP request | Description------------ | ------------- | ------------- | -------------*ScanningApi* | [**get_data_source_schemata**](docs/ScanningApi.md#get_data_source_schemata) | **GET** /api/v1/actions/dataSources/{dataSourceId}/scanSchemata | Get a list of schema names of a database*ScanningApi* | [**scan_data_source**](docs/ScanningApi.md#scan_data_source) | **POST** /api/v1/actions/dataSources/{dataSourceId}/scan | Scan a database to get a physical data model (PDM)*TestConnectionApi* | [**test_data_source**](docs/TestConnectionApi.md#test_data_source) | **POST** /api/v1/actions/dataSources/{dataSourceId}/test | Test data source connection by data source id*TestConnectionApi* | [**test_data_source_definition**](docs/TestConnectionApi.md#test_data_source_definition) | **POST** /api/v1/actions/dataSource/test | Test connection by data source definition*ActionsApi* | [**get_data_source_schemata**](docs/ActionsApi.md#get_data_source_schemata) | **GET** /api/v1/actions/dataSources/{dataSourceId}/scanSchemata | Get a list of schema names of a database*ActionsApi* | [**scan_data_source**](docs/ActionsApi.md#scan_data_source) | **POST** /api/v1/actions/dataSources/{dataSourceId}/scan | Scan a database to get a physical data model (PDM)*ActionsApi* | [**scan_sql**](docs/ActionsApi.md#scan_sql) | **POST** /api/v1/actions/dataSources/{dataSourceId}/scanSql | Collect metadata about SQL query*ActionsApi* | [**test_data_source**](docs/ActionsApi.md#test_data_source) | **POST** /api/v1/actions/dataSources/{dataSourceId}/test | Test data source connection by data source id*ActionsApi* | [**test_data_source_definition**](docs/ActionsApi.md#test_data_source_definition) | **POST** /api/v1/actions/dataSource/test | Test connection by data source definition## Documentation For Models - [ColumnWarning](docs/ColumnWarning.md) - [DataSourceParameter](docs/DataSourceParameter.md) - [DataSourceSchemata](docs/DataSourceSchemata.md) - [DeclarativeColumn](docs/DeclarativeColumn.md) - [DeclarativeTable](docs/DeclarativeTable.md) - [DeclarativeTables](docs/DeclarativeTables.md) - [ScanRequest](docs/ScanRequest.md) - [ScanResultPdm](docs/ScanResultPdm.md) - [ScanSqlRequest](docs/ScanSqlRequest.md) - [ScanSqlResponse](docs/ScanSqlResponse.md) - [SqlColumn](docs/SqlColumn.md) - [TableWarning](docs/TableWarning.md) - [TestDefinitionRequest](docs/TestDefinitionRequest.md) - [TestQueryDuration](docs/TestQueryDuration.md) - [TestRequest](docs/TestRequest.md) - [TestResponse](docs/TestResponse.md)## Documentation For Authorization All endpoints do not require authorization.## Authorsupport@gooddata.com## Notes for Large OpenAPI documentsIf the OpenAPI document is large, imports in gooddata_scan_client.apis and gooddata_scan_client.models may fail with aRecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:Solution 1:Use specific imports for apis and models like:- `from gooddata_scan_client.api.default_api import DefaultApi`- `from gooddata_scan_client.model.pet import Pet`Solution 2:Before importing the package, adjust the maximum recursion limit as shown below:```import syssys.setrecursionlimit(1500)import gooddata_scan_clientfrom gooddata_scan_client.apis import *from gooddata_scan_client.models import *```</longdescription>
</pkgmetadata>