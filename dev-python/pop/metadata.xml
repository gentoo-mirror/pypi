<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====POP====Pop is used to express the Plugin Oriented Programming Paradigm. The PluginOriented Programming Paradigm has been designed to make pluggable softwareeasy to write and easy to extend.Plugin Oriented Programming presents a new way to scale development teamsand deliver complex software. This is done by making the applications entirelyout of plugins, and also making the applications themselves natively pluggablewith each other.Using Plugin Oriented Programming it then becomes easy to have the best of bothworlds, software can be built in small pieces, making development easier tomaintain. The small pieces can then be merged and deployed in a singlebinary, making code deployment easy as well.All this using Python, one of the world's most popular and powerful programminglanguages.Getting Started===============A more complete Getting Started Guide is available inside of the documentationfor ``pop``. The best place to start is in the doc's Getting Started Guide foundhere:https://pop.readthedocs.ioFirst off, install ``pop`` from pypi:.. code-block:: bash    pip3 install popNow all it takes to create a pluggable application is a few lines of code.This is the root of every pop project.We create a hub, we add dynamic subsystems, and then we call them through the hub's namespace... code-block:: python    import pop.hub    hub = pop.hub.Hub()    # Dynamic subsystems can now be added to the hub    hub.pop.sub.add(dyne_name=&quot;my_dynamic_sub&quot;)    # This hub now exists on the namespace and mirrors the file tree of that sub    # the sub &quot;my_dynamic_sub&quot; had a plugin called &quot;init&quot; with a function called &quot;cli&quot; we could do this:    hub.my_dynamic_sub.init.cli()Writing your first pop application can be very simple, there is a tool called ``pop-create`` that automatesmuch of the groundwork needed to get started with an advanced application... code-block:: bash    pip3 install pop-createNow that you have ``pop-create``, use the tool  to bootstrap your project!This will make your Python project boiler plate for you!.. code-block:: bash    mkdir poppy    cd poppy    pop-create seed -n poppyNow you have a ``setup.py`` that file will detect changes to you project and &quot;Just Work&quot;.Feel free to open it up and fill in some of the blank places, like author name,description, etc. The ``pop-create`` program also made your first directories, your``run.py`` startup script, everything you need to install your project and the ``pop```conf.py` file used to load in configuration. Running `pop-create` also made a fewother files, but nothing to worry about now.Look at `pop-create &lt;https://gitlab.com/saltstack/pop/pop-create&gt;`__'s documentationfor more details of what it can do.Congratulations! You have a ``pop`` project! Now you can run the project:.. code-block:: bash    python3 run.pyWith a project up and running you can now add more plugins, more code and moreplugin subsystems!What Happened?==============Take a look at the `poppy/poppy/init.py` file, your little `run.py` scriptcreated the `hub`, loaded your first plugin subsystem, `poppy` and calledthe run function therein. This is the starting point for your app.Next dive into the `pop documentation &lt;https://pop.readthedocs.io&gt;`__, we will take you through how tothink in Plugin Oriented Programming, helping you see a new way to writecode that is more flexible and dynamic than anything you have seen before!Single Binary=============In the first few sentences of this document I promised you a single binary!This is easy to do! Just pip install ``tiamat``:.. code-block:: bash    pip3 install tiamat    tiamat --log-level=debug build -n poppy -r requirements/base.txtThis built a single binary of your program! Now you can run it... code-block:: bash    ./dist/poppyDocumentation=============Check out the docs for more information:https://pop.readthedocs.ioThere is a much more in depth tutorial here, followed by documents on how tothink in Plugin Oriented Programming. Take your time to read it, it is not longand can change how you look at writing software!</longdescription>
</pkgmetadata>