<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![img](https://img.shields.io/gitlab/pipeline/ymd_h/cpprb.svg)![img](https://img.shields.io/pypi/v/cpprb.svg)![img](https://img.shields.io/pypi/l/cpprb.svg)![img](https://img.shields.io/pypi/status/cpprb.svg)[![img](https://gitlab.com/ymd_h/cpprb/badges/master/coverage.svg)](https://ymd_h.gitlab.io/cpprb/coverage/)[![img](https://img.shields.io/pypi/dd/cpprb.svg)](https://pypi.org/project/cpprb/)[![img](https://img.shields.io/pypi/dw/cpprb.svg)](https://pypi.org/project/cpprb/)[![img](https://img.shields.io/pypi/dm/cpprb.svg)](https://pypi.org/project/cpprb/)![img](https://ymd_h.gitlab.io/cpprb/images/favicon.png)# Overviewcpprb is a python ([CPython](https://github.com/python/cpython/tree/master/Python)) module providing replay buffer classes forreinforcement learning.Major target users are researchers and library developers.You can build your own reinforcement learning algorithms together withyour favorite deep learning library (e.g. [TensorFlow](https://www.tensorflow.org/), [PyTorch](https://pytorch.org/)).cpprb forcuses speed, flexibility, and memory efficiency.By utilizing [Cython](https://cython.org/), complicated calculations (e.g. segment tree forprioritized experience replay) are offloaded onto C++.(The name cpprb comes from &quot;C++ Replay Buffer&quot;.)In terms of API, initially cpprb referred to [OpenAI Baselines](https://github.com/openai/baselines)'implementation. The current version of cpprb has much moreflexibility. Any [NumPy](https://numpy.org/) compatible types of any numbers of values canbe stored (as long as memory capacity is sufficient). For example, youcan store the next action and the next next observation, too.# Installationcpprb requires following softwares before installation.-   C++17 compiler (for installation from source)    -   [GCC](https://gcc.gnu.org/) (maybe 7.2 and newer)    -   [Visual Studio](https://visualstudio.microsoft.com/) (2017 Enterprise is fine)-   Python 3-   pipAdditionally, here are user's good feedbacks for installation at [Ubuntu](https://gitlab.com/ymd_h/cpprb/issues/73).(Thanks!)## Install from [PyPI](https://pypi.org/) (Recommended)The following command installs cpprb together with other dependencies.    pip install cpprbDepending on your environment, you might need `sudo` or `--user` flagfor installation.On supported platflorms (Linux x86-64, Windows amd64, and macOSx86&lt;sub&gt;64&lt;/sub&gt;), binary packages hosted on PyPI can be used, so that you don'tneed C++ compiler. On the other platforms, such as 32bit orarm-architectured Linux and Windows, you cannot install from binary,and you need to compile by yourself. Please be patient, we plan tosupport wider platforms in future.If you have any troubles to install from binary, you can fall back tosource installation by passing `--no-binary` option to the above pipcommand. (In order to avoid NumPy source installation, it is better toinstall NumPy beforehand.)    pip install numpy    pip install --no-binary cpprb## Install from source codeFirst, download source code manually or clone the repository;    git clone https://gitlab.com/ymd_h/cpprb.gitThen you can install in the same way;    cd cpprb    pip install .For this installation, you need to convert extended Python (.pyx) toC++ (.cpp) during installation, it takes longer time than installationfrom PyPI.# Usage## Basic UsageBasic usage is following step;1.  Create replay buffer (`ReplayBuffer.__init__`)2.  Add transitions (`ReplayBuffer.add`)    1.  Reset at episode end (`ReplayBuffer.on_episode_end`)3.  Sample transitions (`ReplayBuffer.sample`)## Example CodeHere is a simple example for storing standard environment (aka. `obs`,`act`, `rew`, `next_obs`, and `done`).    from cpprb import ReplayBuffer        buffer_size = 256    obs_shape = 3    act_dim = 1    rb = ReplayBuffer(buffer_size,      env_dict ={&quot;obs&quot;: {&quot;shape&quot;: obs_shape},         &quot;act&quot;: {&quot;shape&quot;: act_dim},         &quot;rew&quot;: {},         &quot;next_obs&quot;: {&quot;shape&quot;: obs_shape},         &quot;done&quot;: {}})        obs = np.ones(shape=(obs_shape))    act = np.ones(shape=(act_dim))    rew = 0    next_obs = np.ones(shape=(obs_shape))    done = 0        for i in range(500):        rb.add(obs=obs,act=act,rew=rew,next_obs=next_obs,done=done)            if done:    # Together with resetting environment, call ReplayBuffer.on_episode_end()    rb.on_episode_end()        batch_size = 32    sample = rb.sample(batch_size)    # sample is a dictionary whose keys are 'obs', 'act', 'rew', 'next_obs', and 'done'## Construction Parameters(See also [API reference](https://ymd_h.gitlab.io/cpprb/api/api/cpprb.ReplayBuffer.html))&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;&lt;colgroup&gt;&lt;col  class=&quot;org-left&quot; /&gt;&lt;col  class=&quot;org-left&quot; /&gt;&lt;col  class=&quot;org-left&quot; /&gt;&lt;col  class=&quot;org-left&quot; /&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;Name&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;Type&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;Optional&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;Discription&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;No&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Buffer size&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;env_dict&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Yes (but unusable)&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Environment definition (See &lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/flexible_environment/&quot;&gt;here&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;next_of&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;str&lt;/code&gt; or array-like of &lt;code&gt;str&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Yes&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Memory compression (See &lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/memory_compression/&quot;&gt;here&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;stack_compress&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;str&lt;/code&gt; or array-like of &lt;code&gt;str&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Yes&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Memory compression (See &lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/memory_compression/&quot;&gt;here&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;default_dtype&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;numpy.dtype&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Yes&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Fall back data type&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;Nstep&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Yes&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Nstep configuration (See &lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/nstep/&quot;&gt;here&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;mmap_prefix&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;Yes&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;mmap file prefix (See &lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/mmap/&quot;&gt;here&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;## NotesFlexible environment values are defined by `env_dict` when buffercreation. The detail is described at [document](https://ymd_h.gitlab.io/cpprb/features/flexible_environment/).Since stored values have flexible name, you have to pass to`ReplayBuffer.add` member by keyword.# Featurescpprb provides buffer classes for building following algorithms.&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;&lt;colgroup&gt;&lt;col  class=&quot;org-left&quot; /&gt;&lt;col  class=&quot;org-left&quot; /&gt;&lt;col  class=&quot;org-left&quot; /&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;Algorithms&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;cpprb class&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;Paper&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;Experience Replay&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;ReplayBuffer&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://link.springer.com/article/10.1007/BF00992699&quot;&gt;L. J. Lin&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/per/&quot;&gt;Prioritized Experience Replay&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;PrioritizedReplayBuffer&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1511.05952&quot;&gt;T. Schaul et. al.&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/nstep/&quot;&gt;Multi-step (Nstep) Learning&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;ReplayBuffer&lt;/code&gt;, &lt;code&gt;PrioritizedReplayBuffer&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/ape-x/&quot;&gt;Multiprocess Learning (Ape-X)&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;MPReplayBuffer&lt;/code&gt; &lt;code&gt;MPPrioritizedReplayBuffer&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1803.00933&quot;&gt;D. Horgan et. al.&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/laber/&quot;&gt;Large Batch Experience Replay (LaBER)&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;LaBERmean&lt;/code&gt;, &lt;code&gt;LaBERlazy&lt;/code&gt;, &lt;code&gt;LaBERmax&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://dblp.org/db/journals/corr/corr2110.html#journals/corr/abs-2110-01528&quot;&gt;T. Lahire et al.&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/rer/&quot;&gt;Reverse Experience Replay (RER)&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;ReverseReplayBuffer&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1910.08780&quot;&gt;E. Rotinov&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://ymd_h.gitlab.io/cpprb/features/her/&quot;&gt;Hindsight Experience Replay (HER)&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;code&gt;HindsightReplayBuffer&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;org-left&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1707.01495&quot;&gt;M. Andrychowicz et al.&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;cpprb features and its usage are described at following pages:-   [Flexible Environment](https://ymd_h.gitlab.io/cpprb/features/flexible_environment/)-   [Multi-step add](https://ymd_h.gitlab.io/cpprb/features/multistep_add/)-   [Prioritized Experience Replay](https://ymd_h.gitlab.io/cpprb/features/per/)-   [Nstep Experience Replay](https://ymd_h.gitlab.io/cpprb/features/nstep/)-   [Memory Compression](https://ymd_h.gitlab.io/cpprb/features/memory_compression/)-   [Map Large Data on File](https://ymd_h.gitlab.io/cpprb/features/mmap/)-   [Multiprocess Learning (Ape-X)](https://ymd_h.gitlab.io/cpprb/features/ape-x/)-   [Save/Load Transitions](https://ymd_h.gitlab.io/cpprb/features/save_load_transitions/)# Design## Column-oriented and FlexibleOne of the most distinctive design of cpprb is column-orientedflexibly defined transitions. As far as we know, other replay bufferimplementations adopt row-oriented flexible transitions (aka. array oftransition class) or column-oriented non-flexible transitions.In deep reinforcement learning, sampled batch is divided intovariables (i.e. `obs`, `act`, etc.). If the sampled batch isrow-oriented, users (or library) need to convert it intocolumn-oriented one. (See [doc](https://ymd_h.gitlab.io/cpprb/features/flexible_environment/), too)## Batch Insertioncpprb can accept addition of multiple transitions simultaneously. Thisdesign is convenient when batch transitions are moved from localbuffers to a global buffer. Moreover it is more efficient because ofnot only removing pure-Python `for` loop but also suppressingunnecessary priority updates for PER. (See [doc](https://ymd_h.gitlab.io/cpprb/features/multistep_add/), too)## Minimum DependencyWe try to minimize dependency. Only NumPy is required during itsexecution. Small dependency is always preferable to avoid dependencyhell.# Contributing to cpprbAny contribution are very welcome!## Making Community LargerBigger commumity makes development more active and improve cpprb.-   Star [GitLab repository](https://gitlab.com/ymd_h/cpprb) (and/or [GitHub Mirror](https://github.com/ymd-h/cpprb))-   Publish your code using cpprb-   Share this repository to your friend and/or followers.## Q &amp; A at ForumWhen you have any problems or requests, you can check [Discussions onGitHub.com](https://github.com/ymd-h/cpprb/discussions). If you still cannot find any information, you can postyour own.We keep [issues on GitLab.com](https://gitlab.com/ymd_h/cpprb/issues) and users are still allowed to openissues, however, we mainly use the place as development issue tracker.## Merge Request (Pull Request)cpprb follows local rules:-   Branch Name    -   &quot;HotFix&lt;sub&gt;\*&lt;/sub&gt;\*\*&quot; for bug fix    -   &quot;Feature&lt;sub&gt;\*&lt;/sub&gt;\*\*&quot; for new feature implementation-   docstring    -   Must for external API    -   [Numpy Style](https://numpydoc.readthedocs.io/en/latest/format.html)-   Unit Test    -   Put test code under &quot;test/&quot; directory    -   Can test by `python -m unittest &lt;Your Test Code&gt;` command    -   Continuous Integration on GitLab CI configured by `.gitlab-ci.yaml`-   Open an issue and associate it to Merge RequestStep by step instruction for beginners is described at [here](https://ymd_h.gitlab.io/cpprb/contributing/merge_request).# Links## cpprb sites-   [Project Site](https://ymd_h.gitlab.io/cpprb/)    -   [Class Reference](https://ymd_h.gitlab.io/cpprb/api/)    -   [Unit Test Coverage](https://ymd_h.gitlab.io/cpprb/coverage/)-   [Main Repository](https://gitlab.com/ymd_h/cpprb)-   [GitHub Mirror](https://github.com/ymd-h/cpprb)-   [cpprb on PyPI](https://pypi.org/project/cpprb/)## cpprb users' repositories-   **[keiohta/TF2RL](https://github.com/keiohta/tf2rl):** TensorFlow2.x Reinforcement Learning## Example usage at Kaggle competition-   [Ape-X DQN-LAP: SafeGuard &amp; RewardRedesign](https://www.kaggle.com/ymdhryk/ape-x-dqn-lap-safeguard-rewardredesign) | [Hungry Geese](https://www.kaggle.com/c/hungry-geese)## Japanese Documents-   [【強化学習】cpprb で Experience Replay を簡単に！| Qiita](https://qiita.com/ymd_h/items/505c607c40cf3e42d080)-   [【強化学習】Ape-X の高速な実装を簡単に！| Qiita](https://qiita.com/ymd_h/items/ac9e3f1315d56a1b2718)-   [【強化学習】自作ライブラリでDQN | Qiita](https://qiita.com/ymd_h/items/21071d7778cfb3cd596a)-   [【強化学習】Ape-Xの高速化を実現 | Zenn](https://zenn.dev/ymd_h/articles/03edcaa47a3b1c)-   [【強化学習】cpprb に遷移のファイル保存機能を追加 | Zenn](https://zenn.dev/ymd_h/articles/e65fed3b7991c9)# Licensecpprb is available under MIT license.    MIT License        Copyright (c) 2019 Yamada Hiroyuki        Permission is hereby granted, free of charge, to any person obtaining a copy    of this software and associated documentation files (the &quot;Software&quot;), to deal    in the Software without restriction, including without limitation the rights    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell    copies of the Software, and to permit persons to whom the Software is    furnished to do so, subject to the following conditions:        The above copyright notice and this permission notice shall be included in all    copies or substantial portions of the Software.        THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE    SOFTWARE.# CitationWe would be very happy if you cite cpprb in your papers.    @misc{Yamada_cpprb_2019,    author = {Yamada, Hiroyuki},    month = {1},    title = {{cpprb}},    url = {https://gitlab.com/ymd_h/cpprb},    year = {2019}    }-   3rd Party Papers citing cpprb    -   [E. Aitygulov and A. I. Panov, &quot;Transfer Learning with Demonstration Forgetting for Robotic Manipulator&quot;, Proc. Comp. Sci. 186 (2021), 374-380, https://doi.org/10.1016/j.procs.2021.04.159](https://www.sciencedirect.com/science/article/pii/S187705092100990X)    -   [T. Kitamura and R. Yonetani, &quot;ShinRL: A Library for Evaluating RL Algorithms from Theoretical and Practical Perspectives&quot;, NeurIPS Deep RL Workshop (2021)](https://nips.cc/Conferences/2021/Schedule?showEvent=21848) ([arXiv](https://arxiv.org/abs/2112.04123), [code](https://github.com/omron-sinicx/ShinRL))</longdescription>
</pkgmetadata>