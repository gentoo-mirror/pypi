<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django test curl[![CI](https://github.com/crccheck/django-test-curl/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/crccheck/django-test-curl/actions/workflows/ci.yml?query=branch%3Amaster)With _Django test curl_, you can take your test cases and immediately try themagainst an actual server via the magic of copy-paste!Django's [testing tools] come with a great [test client] you can use tosimulate requests against views. Against deployed Django projects, if you wantto do simple requests, you would probably use [curl]. If you want to use thesame syntax for both, this is the package for you.### Good places to use thisThis was developed to TDD recreating an existing API in Django. If you have alibrary of [curl] requests that you need to replicate, this is perfect forthat. If you need a portable format to turn test cases into QA automation, thisis great for that too.### Bad places to use thisIf the `.curl(...)` syntax requires lots of string formatting, you should stickto the traditional [test client]. If the test case isn't copy-pastable, it'snot a good fit. This also means if you use randomness to generate yourrequests, you'll lose that extra test coverage.## Installation```sh$ pip install django-test-curl```## Usage```pythonfrom django_test_curl import CurlClientclass SimpleTest(TestCase):    &quot;&quot;&quot;https://docs.djangoproject.com/en/stable/topics/testing/tools/#example&quot;&quot;&quot;    def setUp(self):        self.client = CurlClient()    def test_details(self):        response = self.client.curl(&quot;&quot;&quot;          curl http://localhost:8000/customer/details/        &quot;&quot;&quot;)        self.assertEqual(response.status_code, 200)        self.assertEqual(len(response.context['customers']), 5)```If you're using a custom `Client`, you can use the mixin version:```pythonfrom django.test import Clientfrom django_test_curl import CurlClientMixinclass MyClient(CurlClientMixin, Client):    ...```We support a subset of curl's functionality. For a full list and examples, seethe [tests](./django_test_curl/test_django_test_curl.py).- Headers- GET/POST/PUT/DELETE/etc- HTTP basic auth[curl]: https://curl.haxx.se/[test client]: https://docs.djangoproject.com/en/stable/topics/testing/tools/#the-test-client[testing tools]: https://docs.djangoproject.com/en/stable/topics/testing/tools/</longdescription>
</pkgmetadata>