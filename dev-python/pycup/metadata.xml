<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyCUP&lt;img src=&quot;https://img.shields.io/badge/Version-0.1.6-brightgreen&quot; /&gt;&lt;img src=&quot;https://img.shields.io/badge/Language-Python-blue&quot; /&gt;This is an open-source package designed for (environmental) model calibration and uncertainty analysis. The current version is the very first version, we welcome all comments, suggestions, and improvements.## v 0.1.6 UpdatePyCUP now supports a basic integration with PEST++ calibration project for a more convenient model-agnostic calibration process. The pycup.integrate.PESTconvertor can generate an objective function, which can read/write the parameter file, run the commandline, read the simulation results with the PEST++ instruction files. The function can be used by PyCUP algorithms so that users can do the calibration without writting the objective function and IO functions by themselves. As the PyCUP algorithms have mechanisms differ from which used by PEST++, some settings in PEST++ control file will be ignored. More details can be found in the example in documentations in the repository.## What does it have### (1) For model calibration/optimization1. Single-objective heuristic algorithms including PSO, GWO, MFO, SOA, SCA, SSA, TSA, and WOA.2. Multi-objective heuristic algorithms including MOPSO, MODE, and NSGA-II.3. Elite opposition strategy modified heuristic algorithms -- with better optimum search abilities.4. Statistic based-method LHS-GLUE.5. Three kinds of algorithm border check mechanisms including Absorb, Random, and Rebound, designed for different problems.### (2) For sensitivity &amp; uncertainty analysis1. Likelihood uncertainty estimation used in the GLUE framework for the parameter uncertainty analysis/prediction uncertainty estimation.2. The frequency based-uncertainty estimation method for the prediction uncertainty estimation.3. The multi-linear regression method for the all-at-a-time parameter sensitivity based on statmodels.### (3) Other convenient features1. Multi-processing calibration.2. Recording and resuming during the calibration task.3. Several result plotting functions.4. A special simulation result object  for multi-station &amp; multi-event results (of environmental models) in pycup.ResLib.### (4) Package/Tools integration1. PyCUP can be linked to spotpy database for post-processing, a pycup objective function can also be generated from the spotpy objective function using the module named pycup.integrate.2. The required objective function for pycup calibration can be easily generated using a PEST++ optimization project with/without a tsproc.exe. The PESTconvertor object in pycup.integrate provides several APIs for reading PEST++ files such as .pst, .ins, and .tpl.## How to installThe project has been uploaded onto the PyPI https://pypi.org/project/pycup/ . Or install the .whl file in the dist folder.```pip install pycup```## How to useHere is a simple example. For more details, please see the documentation.```pythonimport pycup as cpimport numpy as npdef uni_fun1(X):# X for example np.array([1,2,3,...,30])    fitness = np.sum(np.power(X,2)) + 1 # example: 1.2    result = fitness.reshape(1,-1) # example ([1.2,])    return fitness,resultlb = -100 * np.ones(30)ub = 100 * np.ones(30)cp.SSA.run(pop = 1000, dim = 30, lb = lb, ub = ub, MaxIter = 30, fun = uni_fun1)```## Example SWMM (Storm Water Management Model) calibration projects***IMPORTANT: PLEASE OPEN YOUR PYCHARM OR COMMAND LINE WITH THE ADMINISTRATOR RIGHTS BEFORE EXECUTING THE EXAMPLE PROJECT***#### Location: https://github.com/QianyangWang/PyCUP1. The example in folder 'Example01-GLUE' contains an SWMM calibration project using single-processing GLUE. Install the dependencies (for example: pip install swmm-api==0.2.0.18.3, pip install pyswmm). Execute the 'Calibrate.py' to calibrate the model. Then, execute the 'PostProcessing.py' for uncertainty analysis.2. The example in folder 'Example02-multiprocessing' contains an SWMM calibration project using multi-processing EOGWO.3. The example in folder 'Example03-multiobjective' contains an SWMM multi-objective calibration project using EOMOPSO. 4. The example in folder 'Example04-validation&amp;prediction' shows how to use our (Ensemble)Validator/(Ensemble)Predictor objects for the validation and prediction of the model using the calibrated parameter (set).5. The example in folder 'Example05-multi-station&amp;event' shows how to use the pycup.Reslib.SimulationResult object for the storage of multi-station &amp; multi-event simulation results, as well as the further analysis using them.&lt;div align=center&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/116932670/209893309-e67c425f-0eff-47b4-a552-b30d717a138b.png&quot;&gt;&lt;/div&gt;## Example PEST++ conversion project (with a Xinanjiang hydrologic model)1. The example in folder 'Example06-PESTintegration' contains a PEST++ Xinanjiang model calibration project and the python script to run a PyCUP calibration based on it.</longdescription>
</pkgmetadata>