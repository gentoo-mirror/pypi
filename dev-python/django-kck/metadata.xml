<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django KCKDjango KCK is data orchestration for Django.  It can be used for:* scheduled data imports from remote sources* ensuring each data product kept fresh, either by updating at a regular  interval or when there is a change in source data on upon which it  depends* preparing complex data products in advance of a likely request* simplifying and optimizing complex data flowsThe development pattern Django KCK encourages for data productsemphasizes compartmentalization and simplification over complexity,cached data with configurable refresh routines over real-timecomputation, and common-sense optimizations over sprawling distributedparallelism.## HistoryDjango KCK is a simplified version of KCK that targets the Djangoenvironment exclusively.  It also uses PostgreSQL as the cache backend,instead of Cassandra.## Quick Install## Basic Usage```# myapp/primers.pyfrom kck import Primerclass TitleListPrimer(Primer):    key = 'title_list'    parameters = [        {&quot;name&quot;: &quot;id&quot;, &quot;from_str&quot;: int}    ]    def compute(self, key):        param_dict = self.key_to_param_dict(key)        results = [{ 'title': lkp_title(id) } for id in param_dict['id_list']]        return results``````# myapp/views.pyfrom kck import Cachefrom django.http import JsonResponsedef first_data_product_view(request, author_id):    cache = Cache.get_instance()    title_list = cache.get(f'title_list/{author_id}')    return JsonResponse(title_list)```## TheoryEssentially, Django KCK is a lazy-loading cache.  Instead of warming thecache in advance, Django KCK lets a developer tell the cache how toprime itself in the event of a cache miss.If we don't warm the cache in advance and we ask the cache for a dataproduct that depends on a hundred other data products in the cache, eachof which either gathers or computes data from other sources, then thisdesign will only generate or request the data that is absolutelynecessary for the computation.  In this way, Django KCK is able to dothe last amount of work possible to accomplish the task.To further expedite the process or building derivative data products,Django KCK includes mechanisms that allow for periodic or triggeredupdates of data upon which a data product depends, such that it will beimmediately available when a request is made.It also makes it possible to &quot;augment&quot; derivative data products withnew information so that, for workloads that can take advantage of theoptimization, a data product can be updated in place, withoutregenerating the product in its entirety.  Where it works, this approachcan turn minutes of computation into milliseconds.</longdescription>
</pkgmetadata>