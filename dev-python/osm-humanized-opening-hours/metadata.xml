<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Humanized Opening Hours - A parser for the opening_hours fields from OSM========================================================================**Humanized Opening Hours** is a Python 3 module allowing a simple usage of the opening_hours fields used in OpenStreetMap.Any pull request (following PEP-8) is more than welcome!```python&gt;&gt;&gt; import humanized_opening_hours as hoh&gt;&gt;&gt; field = &quot;Mo-Fr 06:00-21:00; Sa,Su 08:00-12:00&quot;&gt;&gt;&gt; oh = hoh.OHParser(field)&gt;&gt;&gt; oh.is_open()True&gt;&gt;&gt; oh.next_change()datetime.datetime(2017, 12, 24, 12, 0)&gt;&gt;&gt; print(oh.render().plaintext_week_description())&quot;&quot;&quot;Monday: 06:00 - 21:00Tuesday: 06:00 - 21:00Wednesday: 06:00 - 21:00Thursday: 06:00 - 21:00Friday: 06:00 - 21:00Saturday: 08:00 - 12:00Sunday: 08:00 - 12:00&quot;&quot;&quot;&gt;&gt;&gt; print('\n'.join(oh.render().full_description()))&quot;&quot;&quot;Monday to Friday: 06:00 to 21:00.Saturday and Sunday: 08:00 to 12:00.&quot;&quot;&quot;```**This module is still in development and bugs may occur. If you discover one, please create an issue.**# InstallationThis library is so small, you can include it directly into your project.Also, it is available on PyPi.    $ pip3 install osm-humanized-opening-hours# How to use itThe only mandatory argument to give to the constructor is the field, which must be a string.```python&gt;&gt;&gt; import humanized_opening_hours as hoh&gt;&gt;&gt; field = &quot;Mo-Fr 06:00-21:00; Sa,Su 07:00-21:00&quot;&gt;&gt;&gt; &gt;&gt;&gt; oh = hoh.OHParser(field)&gt;&gt;&gt; oh.is_open()True```## Basic methodsTo know if the facility is open at the present time. Returns a boolean.Can take a datetime.datetime moment to check for another time.```python&gt;&gt;&gt; oh.is_open()True```-----To know at which time the facility status (open / closed) will change.Returns a datetime.datetime object.Can take a datetime.datetime moment to check for another time.If we are on December 24 before 21:00 / 09:00PM...```python&gt;&gt;&gt; oh.next_change()datetime.datetime(2017, 12, 24, 21, 0, tzinfo=&lt;UTC&gt;)```For consecutive days fully open (&quot;Mo-Fr 00:00-24:00&quot;), you can allow recursion with the &quot;allow_recursion&quot; parameter to get the true next change, but it will raise a &quot;RecursionError&quot; with &quot;24/7&quot; fields.```python&gt;&gt;&gt; oh = hoh.OHParser(&quot;Mo-Fr 00:00-24:00&quot;)&gt;&gt;&gt; oh.next_change(allow_recursion=False)datetime.datetime(2018, 1, 8, 0, 0, tzinfo=&lt;UTC&gt;)&gt;&gt;&gt; oh.next_change(allow_recursion=True)datetime.datetime(2018, 1, 11, 23, 59, 59, 999999, tzinfo=&lt;UTC&gt;)```-----You can get a sanitized version of the field given to the constructor with the *sanitize* staticmethod or the **sanitized_field** attribute.```python&gt;&gt;&gt; field = &quot;mo-su 0930-2000;jan off&quot;&gt;&gt;&gt; print(hoh.OHParser.sanitize(field))&quot;Mo-Su 09:30-20:00; Jan off&quot;```If you try to parse a field which is invalid or contains a pattern which is not supported, an `humanized_opening_hours.exceptions.ParseError` (inheriting from `humanized_opening_hours.exceptions.HOHError`) will be raised.If the field contains a period which spans over midnight (like `Mo-Fr 20:00-02:00`), a `humanized_opening_hours.exceptions.SpanOverMidnight` exception (also inheriting from `HOHError`) will be raised, because this is not supported yet.## Solar hoursIf the field contains solar hours, here is how to deal with them.First of all, you can easily know if you need to set them by checking the `OHParser.needs_solar_hours_setting` variable.If one of its values is `True`, you need to set them in the `solar_hours` dict with `datetime.time` objects.For example, if you know that the sunrise is at 08:00 and the sunset at 20:00, you can do this:```pythonoh.solar_hours[&quot;sunrise&quot;] = datetime.time(8, 0)oh.solar_hours[&quot;sunset&quot;] = datetime.time(20, 0)```**If you try to do something with a field requiring setting without setting it, you will get a &quot;SolarHoursNotSetError&quot;.**Attention, except if the facility is on the equator, this setting will be valid only for a short period.## Have nice schedulesThe `OHRenderer` class allows you to get various representations of the schedules.Its `__init__` method takes an OHParser object in argument, and two optional arguments:- `universal` (bool) : allows to have human-readable descriptions without having to parse the solar hours (True default).- `locale_name` (str) : the language to use (&quot;en&quot; default), which can be changed with the `set_locale()` method.It has several methods to retrieve useful informations.This object can also be created from an OHParser instance with its `render()` method.```pythonohr = oh.render(universal=False)```Shorter, you can get it directly from a field with the `render_field()` function.```pythonohr = hoh.render_field(field, universal=False)```### Locales managementThe `available_locales()` method returns a list of the available locales (strings).The `set_locale()` method allows to set a new locale for rendering. It takes a single argument: the locale_name.### get_human_namesReturns a dict of lists with the names of months and weekdays in the current locale.Example:```python&gt;&gt;&gt; ohr.get_human_names(){    'months': [        'January', 'February', 'March',        'April', 'May', 'June', 'July',        'August', 'September', 'October',        'November', 'December'    ],    'days': [        'Monday', 'Tuesday', 'Wednesday',        'Thursday', 'Friday', 'Saturday',        'Sunday'    ]}```### time_before_next_changeReturns a humanized delay before the next change in opening status.```python&gt;&gt;&gt; ohr.time_before_next_change()&quot;in 3 hours&quot;&gt;&gt;&gt; ohr.time_before_next_change(word=False)&quot;3 hours&quot;```### plaintext_week_descriptionReturns a plaintext description of the schedules of a week.This method takes either a `datetime.date` object or a list of `datetime.date` objects.In the first case, it is converted into a list of the days in the same week.It can also take no parameter, so the described week will be the current one.```python&gt;&gt;&gt; ohr.plaintext_week_description()&quot;&quot;&quot;Monday: 08:00 - 19:00Tuesday: 08:00 - 19:00Wednesday: 08:00 - 19:00Thursday: 08:00 - 19:00Friday: 08:00 - 19:00Saturday: 08:00 - 12:00Sunday: closed&quot;&quot;&quot;```### full_descriptionReturns a list of strings (sentences) describing the whole field.```python# Field: &quot;Mo-Fr 10:00-19:00; Sa 10:00-12:00; Dec 25 off&quot;&gt;&gt;&gt; print(' '.join(oh.render().full_description()))&quot;Monday to Friday: 10:00 to 19:00. Saturday: 10:00 to 12:00. 25 December: closed.&quot;```You can get the same result with the `field_description()` function, which takes the field and an optional `locale_name` parameter.## ObjectsApart the main HumanizedOpeningHours class, HOH provides four other objects:- `Day` : a weekday, or public or schoold holidays;- `Period` : a period with two `Moment` objects : a beginning and an end;- `MomentKind` : the kind of a period;- `Moment` : a moment in time, which can be a beginning or an end of a period.### DayAttributes:- `periods` (list) : a list of `Period` objects included in this day;- `date` (datetime.date) : the date of the day;- `is_PH` (bool) : True if the day is a public holiday;- `is_SH` (bool) : True if the day is a school holiday.```python# To know whether there is / are opening period(s) in this day.&gt;&gt;&gt; day.opens_today()True```You can get a Day in two ways. Firstly with the `get_day()` method of OHParser, which takes a `datetime.date` object.You can also use slicing with `datetime.date` object(s). It also supports stepping (with an integer).```python&gt;&gt;&gt; oh[datetime.date.today()]'&lt;Day 'Mo' (2 periods)&gt;'&gt;&gt;&gt; oh[datetime.date(2018, 1, 1):datetime.date(2018, 1, 3)]['&lt;Day 'Mo' (2 periods)&gt;', '&lt;Day 'Tu' (2 periods)&gt;', '&lt;Day 'We' (2 periods)&gt;']```### PeriodAttributes:- `beginning` (Moment object) : the beginning of the period;- `end` (Moment object) : the end of the period.```python# To know if a period contains a solar hour, use the `is_variable()` method.&gt;&gt;&gt; period.is_variable()datetime.timedelta(0, 10800)# Know if a datetime.time object is between the beginning and the end of this period (i.e. it is open at this time).&gt;&gt;&gt; moment = datetime.time(18, 30)&gt;&gt;&gt; moment in periodTrue```### MomentKindA simple Enum with the following values:- `NORMAL`;- `SUNRISE`;- `SUNSET`;- `DAWN`;- `DUSK`.### MomentAttributes:- `kind` (MomentKind) : the kind of this moment;```python# Gets a datetime.time object (localized on UTC), or None if the moment is variable.&gt;&gt;&gt; moment.time()datetime.time(18, 30, tzinfo=&lt;UTC&gt;)```# Supported field formatsHere are the field formats officialy supported and tested (examples).```24/7Mo 10:00-20:00Mo-Fr 10:00-20:00Sa,Su 10:00-20:00Su,PH off  # or &quot;closed&quot;10:00-20:00sunrise-sunset  # or &quot;dawn&quot; / &quot;dusk&quot;(sunrise+01:00)-20:00Jan 10:00-20:00Jan-Feb 10:00-20:00Jan,Dec 10:00-20:00Jan Mo 10:00-20:00Jan,Feb Mo 10:00-20:00Jan-Feb Mo 10:00-20:00Jan Mo-Fr 10:00-20:00Jan,Feb Mo-Fr 10:00-20:00Jan-Feb Mo-Fr 10:00-20:00SH Mo 10:00-20:00SH Mo-Fr 10:00-20:00easter 10:00-20:00easter +1 day 10:00-20:00easter +2 days 10:00-20:00```The following formats are NOT supported yet and their parsing will raise a ParseError.```20:00-02:00  # Span over midnight.yearsweeksSu[1] 10:00-20:00SH,PH Mo-Fr 10:00-20:00SH,PH Mo-Fr,Su 10:00-20:00Jan-Feb,Aug Mo-Fr,Su 10:00-20:00```# PerformancesHOH uses the module [Lark](https://github.com/erezsh/lark) (with the LALR parser) to parse the fields.It takes about 0.0005 seconds to parse a basic field, 0.05 seconds to parse a hundred, and 0.4 for a thousand.# DependenciesThis module requires the following modules, which can be installed with `pip3`.```pythonlark-parserpytzbabel```# LicenceThis module is published under the AGPLv3 license, the terms of which can be found in the [LICENCE](LICENCE) file.</longdescription>
</pkgmetadata>