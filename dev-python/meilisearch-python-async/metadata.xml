<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Meilisearch Python Async[![Tests Status](https://github.com/sanders41/meilisearch-python-async/workflows/Testing/badge.svg?branch=main&amp;event=push)](https://github.com/sanders41/meilisearch-python-async/actions?query=workflow%3ATesting+branch%3Amain+event%3Apush)[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/sanders41/meilisearch-python-async/main.svg)](https://results.pre-commit.ci/latest/github/sanders41/meilisearch-python-async/main)[![Coverage](https://codecov.io/github/sanders41/meilisearch-python-async/coverage.svg?branch=main)](https://codecov.io/gh/sanders41/meilisearch-python-async)[![PyPI version](https://badge.fury.io/py/meilisearch-python-async.svg)](https://badge.fury.io/py/meilisearch-python-async)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/meilisearch-python-async?color=5cc141)](https://github.com/sanders41/meilisearch-python-async)Meilisearch Python Async is a Python async client for the [Meilisearch](https://github.com/meilisearch/meilisearch) API. Meilisearch also has an official [Python client](https://github.com/meilisearch/meilisearch-python).Which of the two clients to use comes down to your particular use case. The purpose for this async client is to allow for non-blocking calls when working in async frameworks such as [FastAPI](https://fastapi.tiangolo.com/), or if your own code base you are working in is async. If this does not match your use case then the official client will be a better choice.## InstallationUsing a virtual environmnet is recommended for installing this package. Once the virtual environment is created and activated install the package with:```shpip install meilisearch-python-async```## Run MeilisearchThere are several ways to [run Meilisearch](https://docs.meilisearch.com/reference/features/installation.html#download-and-launch).Pick the one that works best for your use case and then start the server.As as example to use Docker:```shdocker pull getmeili/meilisearch:latestdocker run -it --rm -p 7700:7700 getmeili/meilisearch:latest ./meilisearch --master-key=masterKey```## Useage### Add Documents- Note: `client.index(&quot;books&quot;) creates an instance of an Index object but does not make a network call to send the data yet so it does not need to be awaited.```pyfrom meilisearch_python_async import Clientasync with Client('http://127.0.0.1:7700', 'masterKey') as client:    index = client.index(&quot;books&quot;)    documents = [        {&quot;id&quot;: 1, &quot;title&quot;: &quot;Ready Player One&quot;},        {&quot;id&quot;: 42, &quot;title&quot;: &quot;The Hitchhiker's Guide to the Galaxy&quot;},    ]    await index.add_documents(documents)```The server will return an update id that can be used to [get the status](https://docs.meilisearch.com/reference/api/updates.html#get-an-update-status)of the updates. To do this you would save the result response from adding the documets to a variable,this will be a UpdateId object, and use it to check the status of the updates.```pyupdate = await index.add_documents(documents)status = await client.index('books').get_update_status(update.update_id)```### Basic Searching```pysearch_result = await index.search(&quot;ready player&quot;)```### Base Search Results: SearchResults object with values```pySearchResults(    hits = [        {            &quot;id&quot;: 1,            &quot;title&quot;: &quot;Ready Player One&quot;,        },    ],    offset = 0,    limit = 20,    nb_hits = 1,    exhaustive_nb_hits = bool,    facets_distributionn = None,    processing_time_ms = 1,    query = &quot;ready player&quot;,)```### Custom SearchInformation about the parameters can be found in the [search parameters](https://docs.meilisearch.com/reference/features/search_parameters.html) section of the documentation.```pyindex.search(    &quot;guide&quot;,    attributes_to_highlight=[&quot;title&quot;],    filters=&quot;book_id &gt; 10&quot;)```### Custom Search Results: SearchResults object with values```pySearchResults(    hits = [        {            &quot;id&quot;: 42,            &quot;title&quot;: &quot;The Hitchhiker's Guide to the Galaxy&quot;,            &quot;_formatted&quot;: {                &quot;id&quot;: 42,                &quot;title&quot;: &quot;The Hitchhiker's Guide to the &lt;em&gt;Galaxy&lt;/em&gt;&quot;            }        },    ],    offset = 0,    limit = 20,    nb_hits = 1,    exhaustive_nb_hits = bool,    facets_distributionn = None,    processing_time_ms = 5,    query = &quot;galaxy&quot;,)```## DocumentationSee our [docs](https://meilisearch-python-async.paulsanders.dev) for the full documentation.## ContributingContributions to this project are welcome. If you are interesting in contributing please see our [contributing guide](CONTRIBUTING.md)</longdescription>
</pkgmetadata>