<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># exaSPIM pipeline utils[![License](https://img.shields.io/badge/license-MIT-brightgreen)](LICENSE)![Code Style](https://img.shields.io/badge/code%20style-black-black)Code repository to be installed in exaSPIM processing capsules.Wrapper code for ImageJ automation.## ImageJ wrapper moduleThe ImageJ wrapper module contains Fiji macro templates and wrapper code to automatically run interest point detection and interest point based registrationin the Code Ocean capsule. This functionality is set as the main entry point ofthe package if the whole package is invoked on the command line or the `aind_exaspim_pipeline` command is run.```bashpython -m aind_exaspim_pipeline_utils```## InstallationTo use the software, in the root directory, run```bashpip install -e .```To develop the code, run```bashpip install -e .[dev]```## Contributing### Linters and testingThere are several libraries used to run linters, check documentation, and run tests.- Please test your changes using the **coverage** library, which will run the tests and log a coverage report:```bashcoverage run -m unittest discover &amp;&amp; coverage report```- Use **interrogate** to check that modules, methods, etc. have been documented thoroughly:```bashinterrogate .```- Use **flake8** to check that code is up to standards (no unused imports, etc.):```bashflake8 .```- Use **black** to automatically format the code into PEP standards:```bashblack .```- Use **isort** to automatically sort import statements:```bashisort .```### Pull requestsFor internal members, please create a branch. For external members, please fork the repository and open a pull request from the fork. We'll primarily use [Angular](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit) style for commit messages. Roughly, they should follow the pattern:```text&lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt;```where scope (optional) describes the packages affected by the code changes and type (mandatory) is one of:- **build**: Changes that affect build tools or external dependencies (example scopes: pyproject.toml, setup.py)- **ci**: Changes to our CI configuration files and scripts (examples: .github/workflows/ci.yml)- **docs**: Documentation only changes- **feat**: A new feature- **fix**: A bugfix- **perf**: A code change that improves performance- **refactor**: A code change that neither fixes a bug nor adds a feature- **test**: Adding missing tests or correcting existing tests### DocumentationTo generate the rst files source files for documentation, run```bashsphinx-apidoc -o doc_template/source/ src ```Then to create the documentation HTML files, run```bashsphinx-build -b html doc_template/source/ doc_template/build/html```More info on sphinx installation can be found [here](https://www.sphinx-doc.org/en/master/usage/installation.html).</longdescription>
</pkgmetadata>