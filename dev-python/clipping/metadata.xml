<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>clipping========[![](https://github.com/lycantropos/clipping/workflows/CI/badge.svg)](https://github.com/lycantropos/clipping/actions/workflows/ci.yml &quot;Github Actions&quot;)[![](https://readthedocs.org/projects/clip/badge/?version=latest)](https://clip.readthedocs.io/en/latest &quot;Documentation&quot;)[![](https://codecov.io/gh/lycantropos/clipping/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/clipping &quot;Codecov&quot;)[![](https://img.shields.io/github/license/lycantropos/clipping.svg)](https://github.com/lycantropos/clipping/blob/master/LICENSE &quot;License&quot;)[![](https://badge.fury.io/py/clipping.svg)](https://badge.fury.io/py/clipping &quot;PyPI&quot;)In what follows `python` is an alias for `python3.6` or `pypy3.6`or any later version (`python3.7`, `pypy3.7` and so on).Installation------------Install the latest `pip` &amp; `setuptools` packages versions```bashpython -m pip install --upgrade pip setuptools```### UserDownload and install the latest stable version from `PyPI` repository```bashpython -m pip install --upgrade clipping```### DeveloperDownload the latest version from `GitHub` repository```bashgit clone https://github.com/lycantropos/clipping.gitcd clipping```Install dependencies```bashpython -m pip install -r requirements.txt```Install```bashpython setup.py install```Usage-----```python&gt;&gt;&gt; from ground.base import get_context&gt;&gt;&gt; context = get_context()&gt;&gt;&gt; EMPTY = context.empty&gt;&gt;&gt; Mix = context.mix_cls&gt;&gt;&gt; Multipoint = context.multipoint_cls&gt;&gt;&gt; Multisegment = context.multisegment_cls&gt;&gt;&gt; Point = context.point_cls&gt;&gt;&gt; Segment = context.segment_cls&gt;&gt;&gt; left_edge = Segment(Point(0, 0), Point(0, 1))&gt;&gt;&gt; right_edge = Segment(Point(1, 0), Point(1, 1))&gt;&gt;&gt; bottom_edge = Segment(Point(0, 0), Point(1, 0))&gt;&gt;&gt; top_edge = Segment(Point(0, 1), Point(1, 1))&gt;&gt;&gt; main_diagonal = Segment(Point(0, 0), Point(1, 1))&gt;&gt;&gt; trident = Multisegment([left_edge, main_diagonal, bottom_edge])&gt;&gt;&gt; square_edges = Multisegment([bottom_edge, right_edge, top_edge, left_edge])&gt;&gt;&gt; from clipping.planar import intersect_multisegments&gt;&gt;&gt; (intersect_multisegments(trident, square_edges)...  == intersect_multisegments(square_edges, trident)...  == Multisegment([left_edge, bottom_edge]))True&gt;&gt;&gt; from clipping.planar import complete_intersect_multisegments&gt;&gt;&gt; (complete_intersect_multisegments(trident, square_edges)...  == complete_intersect_multisegments(square_edges, trident)...  == Mix(Multipoint([Point(1, 1)]), Multisegment([left_edge, bottom_edge]),...         EMPTY))True&gt;&gt;&gt; from clipping.planar import unite_multisegments&gt;&gt;&gt; (unite_multisegments(trident, square_edges)...  == unite_multisegments(square_edges, trident)...  == Multisegment([left_edge, bottom_edge, main_diagonal, top_edge,...                   right_edge]))True&gt;&gt;&gt; from clipping.planar import subtract_multisegments&gt;&gt;&gt; subtract_multisegments(trident, square_edges) == main_diagonalTrue&gt;&gt;&gt; (subtract_multisegments(square_edges, trident)...  == Multisegment([top_edge, right_edge]))True&gt;&gt;&gt; from clipping.planar import symmetric_subtract_multisegments&gt;&gt;&gt; (symmetric_subtract_multisegments(trident, square_edges)...  == symmetric_subtract_multisegments(square_edges, trident)...  == Multisegment([main_diagonal, top_edge, right_edge]))True&gt;&gt;&gt; Contour = context.contour_cls&gt;&gt;&gt; Multipolygon = context.multipolygon_cls&gt;&gt;&gt; Polygon = context.polygon_cls&gt;&gt;&gt; first_square = Contour([Point(0, 0), Point(1, 0), Point(1, 1),...                         Point(0, 1)])&gt;&gt;&gt; second_square = Contour([Point(1, 0), Point(2, 0), Point(2, 1),...                          Point(1, 1)])&gt;&gt;&gt; third_square = Contour([Point(1, 1), Point(2, 1), Point(2, 2),...                         Point(1, 2)])&gt;&gt;&gt; fourth_square = Contour([Point(0, 1), Point(1, 1), Point(1, 2),...                          Point(0, 2)])&gt;&gt;&gt; from clipping.planar import intersect_multipolygons&gt;&gt;&gt; (intersect_multipolygons(Multipolygon([Polygon(first_square, []),...                                        Polygon(third_square, [])]),...                          Multipolygon([Polygon(second_square, []),...                                        Polygon(fourth_square, [])]))...  is EMPTY)True&gt;&gt;&gt; (intersect_multipolygons(Multipolygon([Polygon(first_square, []),...                                        Polygon(third_square, [])]),...                          Multipolygon([Polygon(first_square, []),...                                        Polygon(third_square, [])]))...  == Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]))True&gt;&gt;&gt; from clipping.planar import complete_intersect_multipolygons&gt;&gt;&gt; (complete_intersect_multipolygons(...      Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]),...      Multipolygon([Polygon(second_square, []),...                    Polygon(fourth_square, [])]))...  == Multisegment([Segment(Point(0, 1), Point(1, 1)),...                   Segment(Point(1, 0), Point(1, 1)),...                   Segment(Point(1, 1), Point(2, 1)),...                   Segment(Point(1, 1), Point(1, 2))]))True&gt;&gt;&gt; (complete_intersect_multipolygons(...      Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]),...      Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]))...  == Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]))True&gt;&gt;&gt; from clipping.planar import unite_multipolygons&gt;&gt;&gt; (unite_multipolygons(Multipolygon([Polygon(first_square, []),...                                    Polygon(third_square, [])]),...                      Multipolygon([Polygon(second_square, []),...                                    Polygon(fourth_square, [])]))...  == Polygon(Contour([Point(0, 0), Point(2, 0), Point(2, 2), Point(0, 2)]),...             []))True&gt;&gt;&gt; (unite_multipolygons(Multipolygon([Polygon(first_square, []),...                                    Polygon(third_square, [])]),...                      Multipolygon([Polygon(first_square, []),...                                    Polygon(third_square, [])]))...  == Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]))True&gt;&gt;&gt; from clipping.planar import subtract_multipolygons&gt;&gt;&gt; (subtract_multipolygons(Multipolygon([Polygon(first_square, []),...                                       Polygon(third_square, [])]),...                         Multipolygon([Polygon(first_square, []),...                                       Polygon(third_square, [])]))...  is EMPTY)True&gt;&gt;&gt; (subtract_multipolygons(Multipolygon([Polygon(first_square, []),...                                       Polygon(third_square, [])]),...                         Multipolygon([Polygon(second_square, []),...                                       Polygon(fourth_square, [])]))...  == Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]))True&gt;&gt;&gt; from clipping.planar import symmetric_subtract_multipolygons&gt;&gt;&gt; (symmetric_subtract_multipolygons(...      Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]),...      Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]))...  is EMPTY)True&gt;&gt;&gt; (symmetric_subtract_multipolygons(...      Multipolygon([Polygon(first_square, []), Polygon(third_square, [])]),...      Multipolygon([Polygon(second_square, []),...                    Polygon(fourth_square, [])]))...  == Polygon(Contour([Point(0, 0), Point(2, 0), Point(2, 2), Point(0, 2)]),...             []))True```Development-----------### Bumping version#### PreparationInstall[bump2version](https://github.com/c4urself/bump2version#installation).#### Pre-releaseChoose which version number category to bump following [semverspecification](http://semver.org/).Test bumping version```bashbump2version --dry-run --verbose $CATEGORY```where `$CATEGORY` is the target version number category name, possiblevalues are `patch`/`minor`/`major`.Bump version```bashbump2version --verbose $CATEGORY```This will set version to `major.minor.patch-alpha`. #### ReleaseTest bumping version```bashbump2version --dry-run --verbose release```Bump version```bashbump2version --verbose release```This will set version to `major.minor.patch`.### Running testsInstall dependencies```bashpython -m pip install -r requirements-tests.txt```Plain```bashpytest```Inside `Docker` container:- with `CPython`  ```bash  docker-compose --file docker-compose.cpython.yml up  ```- with `PyPy`  ```bash  docker-compose --file docker-compose.pypy.yml up  ````Bash` script:- with `CPython`  ```bash  ./run-tests.sh  ```  or  ```bash  ./run-tests.sh cpython  ```- with `PyPy`  ```bash  ./run-tests.sh pypy  ````PowerShell` script:- with `CPython`  ```powershell  .\run-tests.ps1  ```  or  ```powershell  .\run-tests.ps1 cpython  ```- with `PyPy`  ```powershell  .\run-tests.ps1 pypy  ```</longdescription>
</pkgmetadata>