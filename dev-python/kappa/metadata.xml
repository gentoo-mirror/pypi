<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=====kappa=====.. image:: https://travis-ci.org/garnaat/kappa.svg?branch=develop    :target: https://travis-ci.org/garnaat/kappa.. image:: https://landscape.io/github/garnaat/kappa/develop/landscape.svg    :target: https://landscape.io/github/garnaat/kappa/develop**Kappa** is a command line tool that (hopefully) makes it easier todeploy, update, and test functions for AWS Lambda.There are quite a few steps involved in developing a Lambda function.You have to:* Write the function itself* Create the IAM role required by the Lambda function itself (the executing role) to allow it access to any resources it needs to do its job* Add additional permissions to the Lambda function if it is going to be used in a Push model (e.g. S3, SNS) rather than a Pull model.* Zip the function and any dependencies and upload it to AWS Lambda* Test the function with mock data* Retrieve the output of the function from CloudWatch Logs* Add an event source to the function* View the output of the live functionKappa tries to help you with some of this.  It creates all IAM policies for youbased on the resources you have told it you need to access.  It creates the IAMexecution role for you and associates the policy with it.  Kappa will zip upthe function and any dependencies and upload them to AWS Lambda.  It also sendstest data to the uploaded function and finds the related CloudWatch log streamand displays the log events.  Finally, it will add the event source to turnyour function on.If you need to make changes, kappa will allow you to easily update your Lambdafunction with new code or update your event sources as needed.Installation============The quickest way to get kappa is to install the latest stable version via pip::    pip install kappaOr for the development version::    pip install git+https://github.com/garnaat/kappa.gitQuick Start===========To get a feel for how kappa works, let's take a look at a very simple examplecontained in the ``samples/simple`` directory of the kappa distribution.  Thisexample is so simple, in fact, that it doesn't really do anything.  It's just asmall Lambda function (written in Python) that accepts some JSON input, logsthat input to CloudWatch logs, and returns a JSON document back.The structure of the directory is::    simple/    ├── _src    │   ├── README.md    │   ├── requirements.txt    │   ├── setup.cfg    │   └── simple.py    ├── _tests    │   └── test_one.json    └── kappa.yml.sampleWithin the directory we see:* ``kappa.yml.sample`` which is a sample YAML configuration file for the project* ``_src`` which is a directory containing the source code for the Lambda function* ``_test`` which is a directory containing some test dataThe first step is to make a copy of the sample configuration file:.. code-block:: bash    cd simple    cp kappa.yml.sample kappa.ymlNow you will need to edit ``kappa.yml`` slightly for your use.  The file lookslike this:.. code-block:: yaml    ---    name: kappa-simple    environments:      dev:        profile: &lt;your profile here&gt;        region: &lt;your region here&gt;        environment_variables:          &lt;key 1&gt;: &lt;value 1&gt;          &lt;key 2&gt;: &lt;value 2&gt;        policy:          resources:            - arn: arn:aws:logs:*:*:*              actions:                - &quot;*&quot;      prod:        profile: &lt;your profile here&gt;        region: &lt;your region here&gt;        policy:          resources:            - arn: arn:aws:logs:*:*:*              actions:              - &quot;*&quot;    lambda:      description: A very simple Kappa example      handler: simple.handler      runtime: python2.7      memory_size: 128      timeout: 3The ``name`` at the top is just a name used for this Lambda function and otherthings we create that are related to this Lambda function (e.g. roles,policies, etc.).The ``environments`` section is where we define the different environments intowhich we wish to deploy this Lambda function.  Each environment is identifiedby a ``profile`` (as used in the AWS CLI and other AWS tools) and a``region``.  You can define as many environments as you wish but eachinvocation of ``kappa`` will deal with a single environment.  An environmentcan optionally contain ``environment variables`` as key-value pairs.  Eachenvironment section also includes a ``policy`` section.  This is where we tellkappa about AWS resources that our Lambda function needs access to and whatkind of access it requires.  For example, your Lambda function may need toread from an SNS topic or write to a DynamoDB table and this is where you wouldprovide the ARN (`Amazon Resource Name`_) that identifies those resources.Since this is a very simple example, the only resource listed here is forCloudWatch logs so that our Lambda function is able to write to the CloudWatchlog group that will be created for it automatically by AWS Lambda... _`Amazon Resource Name`: http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.htmlThe ``lambda`` section contains the configuration information about our Lambdafunction.  These values are passed to Lambda when we create the function andcan be updated at any time after.To modify this for your own use, you just need to put in the right values for``profile`` and ``region`` in one of the environment sections.  You can alsochange the names of the environments to be whatever you like but the name``dev`` is the default value used by kappa so it's kind of handy to avoidtyping.Once you have made the necessary modifications, you should be ready to deployyour Lambda function to the AWS Lambda service.  To do so, just do this:.. code-block:: bash    kappa deployThis assumes you want to deploy the default environment called ``dev`` and thatyou have named your config file ``kappa.yml``.  If, instead, you called yourenvironment ``test`` and named your config file foo.yml, you would do this:.. code-block:: bash    kappa --env test --config foo.yml deployIn either case, you should see output that looks something like this:.. code-block:: bash    kappa deploy    # deploying    # ...deploying policy kappa-simple-dev    # ...creating function kappa-simple-dev    # doneSo, what kappa has done is it has created a new Managed Policy called``kappa-simple-dev`` that grants access to the CloudWatch Logs service.  It hasalso created an IAM role called ``kappa-simple-dev`` that uses that policy.And finally it has zipped up our Python code and created a function in AWSLambda called kappa-simple-dev.To test this out, try this:.. code-block:: bash    kappa invoke _tests/test_one.json    # invoking    # START RequestId: 0f2f9ecf-9df7-11e5-ae87-858fbfb8e85f Version: $LATEST    # [DEBUG]2015-12-08T22:00:15.363Z0f2f9ecf-9df7-11e5-ae87-858fbfb8e85f{u'foo': u'bar', u'fie': u'baz'}    # END RequestId: 0f2f9ecf-9df7-11e5-ae87-858fbfb8e85f    # REPORT RequestId: 0f2f9ecf-9df7-11e5-ae87-858fbfb8e85fDuration: 0.40 msBilled Duration: 100 ms Memory Size: 256 MBMax Memory Used: 23 MB    #    # Response:    # {&quot;status&quot;: &quot;success&quot;}    # doneWe have just called our Lambda function, passing in the contents of the file``_tests/test_one.json`` as input to our function.  We can see the output ofthe CloudWatch logs for the call and we can see the logging call in the Pythonfunction that prints out the ``event`` (the data) passed to the function.  Andfinally, we can see the Response from the function which, for now, is just ahard-coded data structure returned by the function.Need to make a change in your function, your list of resources, or yourfunction configuration?  Just go ahead and make the change and then re-run the``deploy`` command:.. code-block:: bash    kappa deployKappa will figure out what has changed and make the necessary updates for you.That gives you a quick overview of kappa.  To learn more about it, I recommendyou check out the tutorial.Policies========Hands up who loves writing IAM policies. Yeah, that's what I thought. WithKappa, there is a simplified way of writing policies and granting your Lambdafunction the permissions it needs.The simplified version allows you to specify, in your ``kappa.yml`` file, theARN of the resource you want to access, and then a list of the API methods youwant to allow. For example:.. code-block:: yaml    policy:      resources:        - arn: arn:aws:logs:*:*:*          actions:            - &quot;*&quot;To express this using the official IAM policy format, you can instead use astatement:.. code-block:: yaml    policy:      statements:        - Effect: Allow          Resource: &quot;*&quot;          Action:            - &quot;logs:*&quot;Both of these do the same thing.</longdescription>
</pkgmetadata>