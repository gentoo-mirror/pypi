<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/pytheriak.svg)](https://badge.fury.io/py/pytheriak)# pytheriakPython wrapper functions for Theriak-Domino.## InstallationYou can install the package from pypi.org.Run the following to install:```pythonpip install pytheriak```## Usage### Run theriak from your python scriptImport the wrapper module.```pythonfrom pytheriak import wrapper```First, create a TherCaller-object.\The `programs_dir` must be set to the Programs directory of your Theriak-Domino installation. Specify the database (ensure that you correctly specify the file extension e.g., .txt or .bs). Specify your version of Theriak-Domino for completeness.\To run Theriak from Python, the database file should be in the same directory as your python script. On Windows you must also have a theriak.ini in the directory.```pythontheriak = wrapper.TherCaller(programs_dir=&quot;..\Programs&quot;,                             database=&quot;a database file&quot;,                             theriak_version=&quot;v2023.01.02beta&quot;)```As input for Theriak define:\1. Pressure in bars.```pythonpressure = 4000```2. Temperature in degree celsius.```pythontemperature = 550```3. Bulk composition following the Theriak-Domino format: Elements in uppercase followed by (number of moles).```pythonbulk = &quot;AL(2)SI(1)O(?)&quot;```Then call minimisation() on the TherCaller-object.```pythonrock, element_list = theriak.minimisation(pressure, temperature, bulk)```This method returns a Rock-object containing all the properties of the minimised system and an element list. The list acts as an element - index lookup table for all compositional vectors of the Rock (bulk and phase compositions).### Access the properties of the Rock-objectAn easy way to checkout all accessible properties is looking at the object's attributes using ...```pythondir(rock)```Useful rock properties are:```pythonrock.g_system                   # Gibbs free energy of the system [J]rock.bulk_composition_moles     # Bulk composition [mol]rock.mineral_assemblage         # List of stable solid phases...```Mineral (and fluid) assemblage contain Mineral- and Fluid-Objects which hold the phase related properties.```pythonmineral = rock.mineral_assemblage[i]mineral.name                    # Phase name from databasemineral.n                       # Amount of phase [mol]mineral.composition_apfu        # Mineral composition [apfu]...```A quick, easy and pythonic way to retrieve properties is using list comprehensions.```python[mineral.name for mineral in rock.mineral_assemblage][mineral.composition_apfu for mineral in rock.mineral_assemblage]```</longdescription>
</pkgmetadata>