<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RadVisRadVis (Radiology Visualization) is a visualization tool for medical images. ## Installation`pip install radvis`## RadSlice ViewerLoading an image and displaying it with a slider```pythonimport radvis as rv# Creates a 'RadImage' object containing the image dataimage = rv.load_image('path/to/image.nii.gz') # Can also load from DICOM or Numpy filesslicer = rv.RadSlicer(image, axis=0)slicer.display()```![](https://raw.githubusercontent.com/medlee-code/RadVis/main/images/example_0.gif?token=GHSAT0AAAAAACBJZC7OUK4KUWZ4QWBJIGJ6ZC7T4HA)Create a `RadImage` from a numpy array```pythonimport radvis as rvimport numpy as np# Creating a numpy arrayimage_data = np.random.rand(100, 100, 100)# Creating a 'RadImage' object from the numpy arrayimage = rv.from_numpy(image_data)slicer = rv.RadSlicer(image, axis=0)slicer.display()```Adding masks to the image```pythonimport radvis as rvimport numpy as npimage = rv.load_image('path/to/image.nii.gz')slicer = rv.RadSlicer(image, axis=0)# 0 values wont be displayedred_mask = np.zeros_like(image.image_data) red_mask[5:100, 5:100, 5:100] = 1blue_mask = np.zeros_like(image.image_data)blue_mask[70:150, 70:150, 70:150] = 1slicer.add_mask(red_mask, color=&quot;red&quot;)slicer.add_mask(blue_mask, color=&quot;blue&quot;)slicer.display()```![](https://raw.githubusercontent.com/medlee-code/RadVis/main/images/example_mask_0.gif?token=GHSAT0AAAAAACBJZC7OHBDQFXT7KM5L42NUZC7T4SQ)Mask can be another RadImage object so you can load up your masks from a DICOM or NIFTI```pythonimport radvis as rvimport numpy as npAXIS = 1IMAGE_PATH = &quot;path/to/image.nii.gz&quot;IMAGE_MASK_PATH = &quot;path/to/mask.nii.gz&quot;image = rv.load_image(IMAGE_PATH)mask = rv.load_image(IMAGE_MASK_PATH)slicer = rv.RadSlicer(image, AXIS, width=3)slicer.add_mask(mask, color=&quot;red&quot;, alpha=0.3)slicer.display()slicer.save_animation(f&quot;images/axis_{AXIS}_brain_seg.gif&quot;, fps=30)slicer.save_frame(f&quot;images/axis_{AXIS}_brain_seg.png&quot;, index=180, dpi=300)```&lt;p float=&quot;left&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/medlee-code/RadVis/main/images/axis_1_brain_seg.gif?token=GHSAT0AAAAAACBJZC7PZ2WT3CJ26PONDN2YZC7T46Q&quot; width=&quot;49%&quot; /&gt;   &lt;img src=&quot;https://raw.githubusercontent.com/medlee-code/RadVis/main/images/axis_2_brain_seg.gif?token=GHSAT0AAAAAACBJZC7PDVRWL2CW2OCTUV3CZC7T5BQ&quot; width=&quot;49%&quot; /&gt;&lt;/p&gt;You can also display multiple slicers at once```Pythonimport radvis as rvimport numpy as npimg1 = rv.from_numpy(np.random.rand(50, 10, 10))img2 = rv.from_numpy(np.random.rand(10, 50, 10))img3 = rv.from_numpy(np.random.rand(10, 10, 50))img4 = rv.from_numpy(np.random.rand(50, 10, 10))img5 = rv.from_numpy(np.random.rand(10, 50, 10))img6 = rv.from_numpy(np.random.rand(10, 10, 50))rs1 = rv.RadSlicer(img1, title=&quot;Image 1&quot;)rs2 = rv.RadSlicer(img2, title=&quot;Image 2&quot;)rs3 = rv.RadSlicer(img3, title=&quot;Image 3&quot;)rs4 = rv.RadSlicer(img4, title=&quot;Image 4&quot;)rs5 = rv.RadSlicer(img5, title=&quot;Image 5&quot;)rs6 = rv.RadSlicer(img6, title=&quot;Image 6&quot;)rsg = rv.RadSlicerGroup([rs1, rs2, rs3, rs4, rs5, rs6], rows=2, cols=3)rsg.update_slider_heights(0.05)rsg.display()```## Processing ModuleThe processing module of RadVis offers a set of functions to perform preprocessing tasks### ClippingThe `percentile_clipping` function clips pixel intensities above and below percentile ranges### Noise ReductionThe `noise_reduction` function reduces the amount of noise in the image### NormalizationThe `normalization` function normalizes the pixel intensities of the image to a specified range.### PaddingThe `add_padding` function adds padding evenly to match a target shapeExample usage of processing functions:```pythonimport radvis as rvimport numpy as np# Loading imageimage = rv.load_image(filepath='path/to/image.nii.gz')# Applying processing functionsclipped_image = rv.processing.percentile_clipping(image, lower_percentile=0.25, upper_percentile=0.75)filtered_image = rv.processing.noise_reduction(clipped_image, filter_size=1)normalized_image = rv.processing.normalization(filtered_image, min_val=0, max_val=255)padded_image = rv.processing.add_padding(normalized_image, target_shape=(128, 128, 128))# Displaying processed imageslicer = rv.RadSlicer(padded_image, axis=0)slicer.display()```</longdescription>
</pkgmetadata>