<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Introduction============The PPCI (Pure Python Compiler Infrastructure) project is a compilerwritten entirely in the `Python &lt;https://www.python.org/&gt;`_ programminglanguage. It contains front-ends for various programming languages aswell as machine code generation functionality. With this library you cangenerate (working!) machine code using Python (and thus very easy toexplore, extend, etc.)!The project contains:- Language frontends for C, Python, Pascal, Basic and Brainfuck- Code generation for several architectures: 6500, arm, avr, m68k, microblaze, msp430, openrisc, risc-v, stm8, x86_64, xtensa- Command line utilities, such as ppci-cc, ppci-ld and ppci-opt- WebAssembly, JVM, OCaml support- Support for ELF, EXE, S-record and hexfile formats- An intermediate representation (IR) which can be serialized in json- The project can be used as a library so you can script the compilation processInstallation------------Since the compiler is a python package, you can install it with pip:.. code:: bash    $ pip install ppciUsage-----An example of commandline usage:.. code:: bash    $ cd examples/linux64/hello-make    $ ppci-cc -c -O1 -o hello.o hello.c    ...    $ ppci-ld --entry main --layout linux64.ld hello.o -o hello    ...    $ ./hello    Hello, World!API example to compile C code:.. code-block:: python    &gt;&gt;&gt; import io    &gt;&gt;&gt; from ppci.api import cc, link    &gt;&gt;&gt; source_file = io.StringIO(&quot;&quot;&quot;    ...  int printf(char* fmt) { }    ...      ...  void main() {    ...     printf(&quot;Hello world!\n&quot;);    ...  }    ... &quot;&quot;&quot;)    &gt;&gt;&gt; obj = cc(source_file, 'arm')    &gt;&gt;&gt; obj = link([obj])Example how to assemble some assembly code:.. code-block:: python    &gt;&gt;&gt; import io    &gt;&gt;&gt; from ppci.api import asm    &gt;&gt;&gt; source_file = io.StringIO(&quot;&quot;&quot;section code    ... pop rbx    ... push r10    ... mov rdi, 42&quot;&quot;&quot;)    &gt;&gt;&gt; obj = asm(source_file, 'x86_64')    &gt;&gt;&gt; obj.get_section('code').data    bytearray(b'[ARH\xbf*\x00\x00\x00\x00\x00\x00\x00')Example of the low level api usage:.. code-block:: python    &gt;&gt;&gt; from ppci.arch.x86_64 import instructions, registers    &gt;&gt;&gt; i = instructions.Pop(registers.rbx)    &gt;&gt;&gt; i.encode()    b'['Functionality-------------- `Command line utilities &lt;https://ppci.readthedocs.io/en/latest/reference/cli.html&gt;`_:    - `ppci-cc &lt;https://ppci.readthedocs.io/en/latest/reference/cli.html#ppci-cc&gt;`_    - `ppci-ld &lt;https://ppci.readthedocs.io/en/latest/reference/cli.html#ppci-ld&gt;`_    - and many more.- Can be used with tools like make or other build tools.- `Language support &lt;https://ppci.readthedocs.io/en/latest/reference/lang/index.html&gt;`_:    - `C &lt;https://ppci.readthedocs.io/en/latest/reference/lang/c.html&gt;`_    - Pascal    - Python    - Basic    - Brainfuck    - `C3 &lt;https://ppci.readthedocs.io/en/latest/reference/lang/c3.html&gt;`_      (PPCI's own systems language, intended to address some pitfalls of C)- CPU support:    - 6500, arm, avr, m68k, microblaze, msp430, openrisc, risc-v, stm8, x86_64, xtensa- Support for:    - `WebAssembly &lt;https://ppci.readthedocs.io/en/latest/reference/wasm.html&gt;`_    - JVM    - OCaml bytecode    - LLVM IR    - DWARF debugging format- `File formats &lt;https://ppci.readthedocs.io/en/latest/reference/format/index.html&gt;`_:    - ELF files    - COFF PE (EXE) files    - hex files    - S-record files- Uses well known human-readable and machine-processable formats like JSON and XML as  its tools' formats.Documentation-------------Documentation can be found here:- https://ppci.readthedocs.io/.. warning::    **This project is in alpha state and not ready for production use!**You can try out PPCI at godbolt.org, a site which offers Web access tovarious compilers: https://godbolt.org/g/eooaPP|gitter|_|appveyor|_|codecov|_|docstate|_|travis|_|codacygrade|_|codacycoverage|_|downloads|_|conda|_.. |codecov| image:: https://codecov.io/bb/windel/ppci/branch/default/graph/badge.svg.. _codecov: https://codecov.io/bb/windel/ppci/branch/default.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/h0h5huliflrac65o?svg=true.. _appveyor: https://ci.appveyor.com/project/WindelBouwman/ppci-786.. |docstate| image:: https://readthedocs.org/projects/ppci/badge/?version=latest.. _docstate: https://ppci.readthedocs.io/en/latest.. |travis| image:: https://travis-ci.org/windelbouwman/ppci.svg?branch=master.. _travis: https://travis-ci.org/windelbouwman/ppci.. |codacygrade| image:: https://api.codacy.com/project/badge/Grade/a178be14a54243be81c27172031dc82c.. _codacygrade: https://www.codacy.com/app/windel-bouwman/ppci-mirror.. |codacycoverage| image:: https://api.codacy.com/project/badge/Coverage/a178be14a54243be81c27172031dc82c.. _codacycoverage: https://www.codacy.com/app/windel-bouwman/ppci-mirror.. |downloads| image:: https://anaconda.org/conda-forge/ppci/badges/downloads.svg.. _downloads: https://anaconda.org/conda-forge/ppci.. |conda| image:: https://anaconda.org/conda-forge/ppci/badges/version.svg.. _conda: https://anaconda.org/conda-forge/ppci.. |gitter| image:: https://badges.gitter.im/ppci-chat/Lobby.svg.. _gitter: https://gitter.im/ppci-chat/Lobby</longdescription>
</pkgmetadata>