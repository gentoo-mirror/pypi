<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.infertrade.com/static/media/InferTradeLogo.5c2cc437.svg&quot; alt=&quot;InferTrade&quot;/&gt;&lt;/p&gt;# InferTrade[`infertrade`](https://github.com/ta-oliver/infertrade) is an open source trading and investment strategy library designed for accessibility and compatibility.The [`infertrade`](https://github.com/ta-oliver/infertrade) package seeks to achieve three objectives:- Simplicity: a simple [`pandas`](https://github.com/pandas-dev/pandas) to [`pandas`](https://github.com/pandas-dev/pandas) interface that those experienced in trading but new to Python can easily use.- Gateway to data science: classes that allow rules created for the infertrade simple interface to be used with [`scikit-learn`](https://github.com/scikit-learn/scikit-learn) functionality for prediction and calibration. (fit, transform, predict, pipelines, gridsearch) and [`scikit-learn`](https://github.com/scikit-learn/scikit-learn) compatible libraries, like [`feature-engine`](https://github.com/solegalli/feature_engine).- The best open source trading strategies: wrapping functionality to allow strategies from any open source Python libraries with compatible licences, such as [`ta`](https://github.com/bukosabino/ta) to be used with the `infertrade` interface.The project is licenced under the [Apache 2.0](https://choosealicense.com/licenses/apache-2.0/) licence.  ## Connection to InferTrade.comMany thanks for looking into the [`infertrade`](https://github.com/ta-oliver/infertrade) package!I created [InferTrade.com](https://infertrade.com/) to provide cutting edge statistical analysis in an accessible free interface. The intention was to help individuals and small firms have access to the same quality of analysis as large institutions for systematic trading and to allow more time to be spent on creating good signals rather than backtesting and strategy verification. If someone has done the hard work of gaining insights into markets I wanted them to be able to compete in a landscape of increasingly automated statistically-driven market participants. A huge amount of effort has been made by the trading and AI/ML communities to create open source packages with [powerful diagnostic functionality](https://github.com/mljar/mljar-supervised), which means you do not need to build a large and complex in-house analytics library to be able to support your investment decisions with solid statistical machine learning. However there remain educational and technical barriers to using this community-created wealth if you are not an experience programmer or do not have mathematical training. I want [InferTrade.com](www.infertrade.com) to allow everyone trading in markets to have access without barriers - cost, training or time - to be competitive, with an easy to use interface that both provides direct analysis and education insights to support your trading. The initial impetus for the creation of this open source package, [`infertrade`](https://github.com/ta-oliver/infertrade) was to ensure any of our users finding an attractive strategy on InferTrade.com could easily implement the rule in Python and have full access to the code to fully understand every aspect of how it works. By adding wrapper for existing libraries we hope to support further independent backtesting by users with their own preferred choice of trading libraries. We at InferStat heavily use open source in delivering InferTrade.com's functionality and we also wanted to give something back to the trading and data science community. The Apache 2.0 licence is a permissive licence, so that you can use or build upon [`infertrade`](https://github.com/ta-oliver/infertrade) for your personal, community or commercial projects.The [`infertrade`](https://github.com/ta-oliver/infertrade) package and InferTrade.com will be adding functionality each week, and we are continually seeking to improve the experience and support the package and website provides for traders, portfolio managers and other users. Gaining feedback on new features is extremely helpful for us to improve our UX and design, as are any ideas for enhancements that would help you to trade better. If you would like to assist me in turning InferTrade into the leading open source trading platform we can offer participation in our Beta Testing programme ([sign up link](https://docs.google.com/forms/d/e/1FAIpQLSeNznsSNx-UUZ_nc9wchgsTy1z9T75YO5cZOB03YP-vQ-F2NQ/viewform?usp=sf_link)). You can also fork this repository and make direct improvements to the package.Best,Tom OliverInferStat Founder and CEO- https://github.com/ta-oliver- https://www.linkedin.com/in/thomas-a-oliver/## Contact UsThis was [InferStat's](https://inferstat.com/) first open source project and we welcome your thoughts for improvements to code structure, documentation or any changes that would support your use of the library. If you would like assistance with using the [`infertrade`](https://github.com/ta-oliver) you can email us at support@infertrade.com or [book a video call](www.calendly.com/infertrade)If you would like to contribute to the package, e.g. to add support for an additional package or library, please see our [contributing](CONTRIBUTING.md) information.If you want guidance on infertrade API then please see our [API Guidance](API_GUIDANCE.md) information.## QuickstartPlease note the project requires Python 3.7 or higher due to dependent libraries used.See [Windows](https://github.com/ta-oliver/infertrade/blob/main/docs/Install%20Windows.md) or [Linux](https://github.com/ta-oliver/infertrade/blob/main/docs/Install%20Ubuntu%20Linux.md) guides for installation details.### My First InferTrade Rule```import pandas as pdimport matplotlib.pyplot as pltdef my_first_infertrade_rule(df: pd.DataFrame) -&gt; pd.DataFrame:    df[&quot;allocation&quot;] = 0.0    df[&quot;allocation&quot;][df.pct_change() &gt; 0.02] = 0.5         return df    my_dataframe = pd.read_csv(&quot;example_market_data.csv&quot;)    my_dataframe_with_allocations = my_first_infertrade_rule(my_dataframe)my_dataframe_with_allocations.plot([&quot;close&quot;], [&quot;allocation&quot;])plt.show()```![image](https://user-images.githubusercontent.com/29981664/110859161-ed2ef800-82b2-11eb-8bcb-cfdc3596b880.png)### Basic usage with community functions&quot;Community&quot; functions are those declared in this repository, not retrieved from an external package. They are all exposed at `infertrade.algos.community`.```pythonfrom infertrade.algos.community import normalised_close, scikit_signal_factoryfrom infertrade.data.simulate_data import simulated_market_data_4_years_gensignal_transformer = scikit_signal_factory(normalised_close)signal_transformer.fit_transform(simulated_market_data_4_years_gen())```### Usage with TA```pythonfrom infertrade.algos.community import scikit_signal_factoryfrom infertrade.data.simulate_data import simulated_market_data_4_years_genfrom infertrade.algos import ta_adaptorfrom ta.trend import AroonIndicatoradapted_aroon = ta_adaptor(AroonIndicator, &quot;aroon_down&quot;, window=1)signal_transformer = scikit_signal_factory(adapted_aroon)signal_transformer.fit_transform(simulated_market_data_4_years_gen())```### Calculate positions with simple position function```pythonfrom infertrade.algos.community.allocations import constant_allocation_sizefrom infertrade.utilities.operations import scikit_allocation_factoryfrom infertrade.data.simulate_data import simulated_market_data_4_years_genposition_transformer = scikit_allocation_factory(constant_allocation_size)position_transformer.fit_transform(simulated_market_data_4_years_gen())```### Example of position calculation via kelly just based on signal generation```pythonfrom infertrade.algos.community import scikit_signal_factoryfrom infertrade.data.simulate_data import simulated_market_data_4_years_genfrom infertrade.utilities.operations import PositionsFromPricePrediction, PricePredictionFromSignalRegressionfrom sklearn.pipeline import make_pipelinefrom infertrade.algos import ta_adaptorfrom ta.trend import AroonIndicatoradapted_aroon = ta_adaptor(AroonIndicator, &quot;aroon_down&quot;, window=1)pipeline = make_pipeline(scikit_signal_factory(adapted_aroon),                         PricePredictionFromSignalRegression(),                         PositionsFromPricePrediction()                         )pipeline.fit_transform(simulated_market_data_4_years_gen())```### Creating simulated data for testingFor convenience, the `infertrade.data` module contains some basic functions for simulating market data.```import matplotlib.pyplot as pltfrom infertrade.data.simulate_data import simulated_market_data_4_years_gensimulated_market_data_4_years_gen().plot(y=[&quot;open&quot;, &quot;close&quot;, &quot;high&quot;, &quot;low&quot;, &quot;last&quot;])plt.show()```![image](https://user-images.githubusercontent.com/29981664/111359984-1e794080-8684-11eb-88df-5e2af83eadd5.png)```import matplotlib.pyplot as pltfrom infertrade.data.simulate_data import simulated_correlated_equities_4_years_gensimulated_correlated_equities_4_years_gen().plot(y=[&quot;price&quot;, &quot;signal&quot;])plt.show()```![image](https://user-images.githubusercontent.com/29981664/111360130-4668a400-8684-11eb-933e-e8f10662b0bb.png)### Exporting portfolio performance to a CSV fileThe &quot;infertrade.api&quot; module contains an Api class with multiple useful functions including &quot;export_to_csv&quot; which is used to exportportfolio performance as a CSV file.The function accepts up to two dataframes containing market data, a rule name and a relationship name and the output would be a CSV file containinginformation about the provided rule and relationship perfomance with provided market data.```pythonfrom infertrade.api import ApiApi.export_to_csv(dataframe=&quot;MarketData&quot;, rule_name=&quot;weighted_moving_averages&quot;)&quot;&quot;&quot;Resulting CSV file would contain portfolio performance of supplied MarketData after trading using weighted moving averages&quot;&quot;&quot;Api.export_to_csv(dataframe=&quot;MarketData1&quot;, second_df=&quot;MarketData2&quot;, rule_name=&quot;weighted_moving_averages&quot;, relationship=&quot;change_relationship&quot;)&quot;&quot;&quot;Resulting CSV file would contain portfolio performance of supplied MarketData1 and MarketData2 after trading using weighted moving averages and calculating the change relationship&quot;&quot;&quot;```![image](https://user-images.githubusercontent.com/74156271/131223361-6a3ba607-57ea-4826-b03f-5bb337f7f497.png)### Calculate multiple combinations of relationships between supplied data and export to CSVBesides the &quot;infertrade.api.export_to_csv&quot; method out api module contains&quot;infertrade.api.export_cross_prediction&quot;The function accepts a list of dataframes containing market data andsequentially calculates the performance of trading strategy using pairwise combination```pythonfrom infertrade.api import ApiApi.export_cross_prediction(listOfDataframes)                                            &quot;&quot;&quot; The result of this would be CSV files of every possible combination of supplied datawith relationship calculations of every relationship ranked using the &quot;percent_gain&quot; column &quot;&quot;&quot;Api.export_cross_prediction(listOfDataframes,                            column_to_sort=&quot;percent_gain&quot;,                            export_as_csv=False)&quot;&quot;&quot; If export_as_csv is set to false the return will only be ranked indexes of dataframesalong with total sum of supplied column used to sort &quot;&quot;&quot;Api.export_cross_prediction(listOfDataframes,                            number_of_results=3,)&quot;&quot;&quot; number_of_results is used to only save/return top X ranked combinations &quot;&quot;&quot;### Using the InferTrade APIThe &quot;api_automation&quot; module contains the &quot;execute_it_api_request&quot; function,by supplying the function with a request name from the API_GUIDANCE.md fileand your API key it is able to execute any call mentioned in the guidance.```pythonfrom infertrade.utilities.api_automation import execute_it_api_requestexecute_it_api_request( request_name=&quot;Get trading rule metadata&quot;,                         api_key=&quot;YourApiKey&quot;)```Calls that contain data inside of lists (&quot;[]&quot;) need you to provide the specified data.In this example, the API request (&quot;Get available time series simulation models&quot;)contains two lists and those are : &quot;research_1&quot; and &quot;price&quot;To supply this data we simply pass the lists inside a dictionary as &quot;additional_data&quot;```pythonfrom infertrade.utilities.api_automation import execute_it_api_requestadditional_data = {&quot;price&quot;:[0,1,2,3,4,5,6,7,8,9],&quot;research_1&quot;:[0,1,2,3,4,5,6,7,8,9]}execute_it_api_request( request_name=&quot;Get available time series simulation models&quot;,                         api_key=&quot;YourApiKey&quot;,                        additional_data = additional_data)```The passed data does not have to replace data inside a list, you can replace anykey listed in the JSON body of the request by using the same feature as before.If you wish to use your own body or header you can do that by passing them to the function:```pythonfrom infertrade.utilities.api_automation import execute_it_api_requestexecute_it_api_request( request_name=&quot;Get available time series simulation models&quot;,                         api_key=&quot;YourApiKey&quot;,                        request_body = &quot;YourRequestBody&quot;,                        header = &quot;YourHeader&quot;)```The default headers are set to:```pythonheaders = {    'Content-Type': 'application/json',    'x-api-key': 'YourApiKey'}```You can also pass a specific Content Type to the function:```pythonfrom infertrade.utilities.api_automation import execute_it_api_requestexecute_it_api_request( request_name=&quot;Get trading rule metadata&quot;,                         api_key=&quot;YourApiKey&quot;,                        Content_Type=&quot;YourContentType&quot;)```The default request are executed using the &quot;request&quot; module but if you preferusing the &quot;http.client&quot; you can use the &quot;selected_module&quot; argument insidethe function call```pythonfrom infertrade.utilities.api_automation import execute_it_api_requestexecute_it_api_request( request_name=&quot;Get trading rule metadata&quot;,                         api_key=&quot;YourApiKey&quot;,                        selected_module=&quot;http.client&quot;)```You can also use the &quot;parse_to_csv&quot; function to read data from a csv file eitherlocated on your computer or the InferTrade package:```pythonfrom infertrade.utilities.api_automation import execute_it_api_request, parse_csv_filedata = parse_csv_file(file_name=&quot;File_Name&quot;)additional = {&quot;trailing_stop_loss_maximum_daily_loss&quot;: &quot;value&quot;,            &quot;price&quot;: data[&quot;Column_Name&quot;],            &quot;research_1&quot;: data[&quot;Column_Name&quot;]}response = execute_it_api_request(            request_name=&quot;Get available time series simulation models&quot;,            api_key=&quot;YourApiKey&quot;,            additional_data=additional,            )print(response.txt)```If you are only providing the file name, the function presumes that it is located in&quot;/infertrade/&quot;.The same functions can be used alongside postman to generate request bodies,if you set &quot;execute_request&quot; to false in the function parameters it will returnthe request body with additional data:```pythonfrom infertrade.utilities.api_automation import execute_it_api_request, parse_csv_filedata = parse_csv_file(file_location=&quot;File_Location&quot;)additional = {&quot;trailing_stop_loss_maximum_daily_loss&quot;: &quot;value&quot;,            &quot;price&quot;: data[&quot;Column_Name&quot;],            &quot;research_1&quot;: data[&quot;Column_Name&quot;]}response = execute_it_api_request(            request_name=&quot;Get available time series simulation models&quot;,            api_key=&quot;YourApiKey&quot;,            additional_data=additional,            execute_request=False            )print(response)```The result of this will be the request body with &quot;price&quot;, &quot;research_1&quot; and &quot;trailing_stop_loss_maximum_daily_loss&quot; set to provided data.</longdescription>
</pkgmetadata>