<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># WeightipyWeightipy is a cut down version of [Quantipy3](https://github.com/Quantipy/quantipy3) for weighting people data using the RIM (iterative raking) algorithm.### Changes from Quantipy- Removed all quantipy overhead. Weightipy supports the latest versions of Pandas and Numpy and is tested for Python 3.7, 3.8, 3.9, 3.10 and 3.11.- Weightipy runs up to 6 times faster than Quantipy, depending on the dataset.- Rim class will not generate reports like Quantipy did, unless the parameter verbose is set to True on the Rim constructor.## Installation`pip install weightipy`or`python3 -m pip install weightipy`#### Create a virtual envirionmentIf you want to create a virtual environment when using Weightipy:conda```pythonconda create -n envwp python=3```with venv```pythonpython -m venv [your_env_name] ```## 5-minutes to Weightipy**Get started**Assuming we have the variables `gender` and `agecat` we can weight the dataset like this:```Pythonimport weightipy as wptargets = {    &quot;agecat&quot;: {&quot;18-24&quot;: 5.0, &quot;25-34&quot;: 30.0, &quot;35-49&quot;: 26.0, &quot;50-64&quot;: 19.0, &quot;65+&quot;: 20.0},    &quot;gender&quot;: {&quot;Male&quot;: 49, &quot;Female&quot;: 51}}scheme = wp.scheme_from_dict(targets)df_weighted = wp.weight_dataframe(    df=my_df,    scheme=scheme,    weight_column=&quot;weights&quot;)efficiency = wp.weighting_efficiency(df_weighted[&quot;weights&quot;])```In case we are working with census data, which also includes a region variable and we wouldlike to weight the data by age and gender in each region, we can use the `scheme_from_df` function:```Pythonimport weightipy as wpimport pandas as pddf_data = pd.read_csv(&quot;data_to_weight.csv&quot;)df_census = pd.read_csv(&quot;census_data.csv&quot;)scheme = wp.scheme_from_df(    df=df_census,    cols_weighting=[&quot;agecat&quot;, &quot;gender&quot;],    col_filter=&quot;region&quot;,    col_freq=&quot;freq&quot;)df_weighted = wp.weight_dataframe(    df=d,    scheme=scheme,    weight_column=&quot;weights&quot;)efficiency = wp.weighting_efficiency(df_weighted[&quot;weights&quot;])```Or by using the underlying functions that will give more access to the weighting process, wecan use the Rim and WeightEngine classes directly:```Pythonimport weightipy as wp# in this example, agecat and gender are int dtypeage_targets = {'agecat':{1:5.0, 2:30.0, 3:26.0, 4:19.0, 5:20.0}}gender_targets = {'gender':{0:49, 1:51}}scheme = wp.Rim('gender_and_age')scheme.set_targets(targets=[age_targets, gender_targets])my_df[&quot;identity&quot;] = range(len(my_df))engine = wp.WeightEngine(data=df)engine.add_scheme(scheme=scheme, key=&quot;identity&quot;, verbose=False)engine.run()df_weighted = engine.dataframe()col_weights = f&quot;weights_{scheme.name}&quot;efficiency = wp.weighting_efficiency(df_weighted[col_weights])print(engine.get_report())Weight variable       weights_gender_and_ageWeight group                  _default_name_Weight filter                           NoneTotal: unweighted                 582.000000Total: weighted                   582.000000Weighting efficiency               60.009826Iterations required                14.000000Mean weight factor                  1.000000Minimum weight factor               0.465818Maximum weight factor               6.187700Weight factor ratio                13.283522```For more references on the underlying classes, refer to the Quantipy [documentation](https://quantipy.readthedocs.io/en/staging-develop/sites/lib_doc/weights/02_rim.html#using-the-rim-class)Overview of functions to get started:| Function             | Description                                                                                                                                                                                                                                  ||----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|| weight_dataframe     | Weights data by scheme, returns modified dataframe with new weight column.                                                                                                                                                                   || weighting_efficiency | Takes weights and returns efficiency of weighting. See: https://quantipy.readthedocs.io/en/staging-develop/sites/lib_doc/weights/03_diags.html#the-weighting-efficiency                                                                      || scheme_from_dict     | Turns a dict of dicts into a Rim scheme. Keys of the dict are column names and the values are distributions. These are normalized.                                                                                                           || scheme_from_df       | Creates a Rim scheme from a dataframe from specified weighting columns and frequency column. Useful when working with census data.                                                                                                           || Rim class            | Useful for creation of more complex weighting schemas. For example when weighting subregions or groups, which require filters. See: https://quantipy.readthedocs.io/en/staging-develop/sites/lib_doc/weights/02_rim.html#using-the-rim-class || WeightEngine class   | Useful for more specialised manipulation of the weighting process                                                                                                                                                                            |## Planned features- More utility functions to simplify the weighting process- More performance improvements, in order to better support batch weighting of many datasets- Support for multithreaded weighting (possibly using Polars)- Rewrite of the API to be less oriented towards how Quantipy worked and more in line with simple weighting needs- Far future: Support for more weighting algorithms# ContributingThe test suite for Weightipy can be run with the command`python3 -m pytest tests`But when developing a specific aspect of Weightipy, it might be quicker to run (e.g. for the Rim class)`python3 -m unittest tests.test_rim`We welcome volunteers and supporters. Please include a test case with any pull request, especially those that run calculations.# Quantipy#### Origins- Quantipy was concieved of and instigated by Gary Nelson: http://www.datasmoothie.com### Contributors on Quantipy- Alexander Buchhammer, Alasdair Eaglestone, James Griffiths, Kerstin Müller : https://yougov.co.uk- Datasmoothie’s Birgir Hrafn Sigurðsson and [Geir Freysson](http://www.twitter.com/@geirfreysson): http://www.datasmoothie.com</longdescription>
</pkgmetadata>