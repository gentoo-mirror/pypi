<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pyjq: Binding for jq JSON Processor===================================[![CircleCI](https://circleci.com/gh/doloopwhile/pyjq.svg?style=svg)](https://circleci.com/gh/doloopwhile/pyjq)pyjq is a Python bindings for jq (&lt;http://stedolan.github.io/jq/&gt;).&gt; jq is like sed for JSON data - you can use it to slice and filter and&gt; map and transform structured data with the same ease that sed, awk,&gt; grep and friends let you play with text.&gt;&gt; &lt;http://stedolan.github.io/jq/&gt;You can seamlessly call jq script (like regular expression) and processa plain python data structure.For your information, &lt;https://pypi.python.org/pypi/jq&gt; is another jqbinding which is different and incompatible with pyjq.Example-------```python&gt;&gt;&gt; data = dict(...     parameters= [...         dict(name=&quot;PKG_TAG_NAME&quot;, value=&quot;trunk&quot;),...         dict(name=&quot;GIT_COMMIT&quot;, value=&quot;master&quot;),...         dict(name=&quot;TRIGGERED_JOB&quot;, value=&quot;trunk-buildall&quot;)...     ],...     id=&quot;2013-12-27_00-09-37&quot;,...     changeSet=dict(items=[], kind=&quot;git&quot;),... )&gt;&gt;&gt; import pyjq&gt;&gt;&gt; pyjq.first('.parameters[] | {&quot;param_name&quot;: .name, &quot;param_type&quot;:.type}', data){'param_name': 'PKG_TAG_NAME', 'param_type': None}```Install-------You will need flex, bison (3.0 or newer), libtool, make, automake and autoconf to build jq.Install them by Homebrew, APT or other way.You can install from PyPI by usual way.```shellpip install pyjq```API---For jq script, [see its manual](http://stedolan.github.io/jq/manual/).Only four APIs are provided:- `all`- `first`- `one`- `compile``all` transforms a value by JSON script and returns all results as a list.```python&gt;&gt;&gt; value = {&quot;user&quot;:&quot;stedolan&quot;,&quot;titles&quot;:[&quot;JQ Primer&quot;, &quot;More JQ&quot;]}&gt;&gt;&gt; pyjq.all('{user, title: .titles[]}', value)[{'user': 'stedolan', 'title': 'JQ Primer'}, {'user': 'stedolan', 'title': 'More JQ'}]````all` takes an optional argument `vars`.`vars` is a dictonary of predefined variables for `script`.The values in `vars` are available in the `script` as a `$key`.That is, `vars` works like `--arg` option and `--argjson` option of jq command.```python&gt;&gt;&gt; pyjq.all('{user, title: .titles[]} | select(.title == $title)', value, vars={&quot;title&quot;: &quot;More JQ&quot;})[{'user': 'stedolan', 'title': 'More JQ'}]````all` takes an optional argument `url`.If `url` is given, the subject of transformation is retrieved from the `url`.```python&gt;&gt; pyjq.all(&quot;.[] | .login&quot;, url=&quot;https://api.github.com/repos/stedolan/jq/contributors&quot;) # get all contributors of jq['nicowilliams', 'stedolan', 'dtolnay', ... ]```Additionally, `all` takes an optional argument `opener`.The default `opener` will download contents using `urllib.request.urlopen` and decode using `json.decode`.However, you can customize this behavior using a custom `opener`.`first` and `one` are similar to to `all`.`first` returns the first result of transformation.When there are no results, `first` returns `None` or the given `default`.```python&gt;&gt;&gt; data = {&quot;user&quot;:&quot;stedolan&quot;,&quot;titles&quot;:[&quot;JQ Primer&quot;, &quot;More JQ&quot;]}&gt;&gt;&gt; pyjq.first('{user, title: .titles[]}', data){'user': 'stedolan', 'title': 'JQ Primer'}&gt;&gt;&gt; pyjq.first('.titles[] | select(test(&quot;T&quot;))', data) # returns None&gt;&gt;&gt; pyjq.first('.titles[] | select(test(&quot;T&quot;))', data, default=&quot;Third JS&quot;)'Third JS'````one` returns the only result of a transformation.It raises an exception when there are no results or when there are two or more results.```python&gt;&gt;&gt; data = {&quot;user&quot;:&quot;stedolan&quot;,&quot;titles&quot;: [&quot;JQ Primer&quot;, &quot;More JQ&quot;]}&gt;&gt;&gt; pyjq.one('.titles[] | select(test(&quot;P&quot;))', data)'JQ Primer'&gt;&gt;&gt; pyjq.one('.titles[] | select(test(&quot;T&quot;))', data)Traceback (most recent call last):IndexError: Result of jq is empty&gt;&gt;&gt; pyjq.one('.titles[] | select(test(&quot;J&quot;))', data)Traceback (most recent call last):IndexError: Result of jq have multiple elements````compile` is similar to `re.compile`. It accepts jq script and returns an object with methods.```python&gt;&gt;&gt; data = {&quot;user&quot;:&quot;stedolan&quot;,&quot;titles&quot;:[&quot;JQ Primer&quot;, &quot;More JQ&quot;]}&gt;&gt;&gt; import pyjq&gt;&gt;&gt; pat = pyjq.compile('{user, title: .titles[]}')&gt;&gt;&gt; pat.all(data)[{'user': 'stedolan', 'title': 'JQ Primer'}, {'user': 'stedolan', 'title': 'More JQ'}]```Limitations-----------jq is a JSON Processor. Therefore pyjq is able to process only&quot;JSON compatible&quot; data (object made only from str, int, float, list, dict).Q&amp;A---### How can I process a json string (f.e. gotten from an API) with pyjq?You should call `json.loads` from the standard library on the string, before you pass it to pyjq.Author------[OMOTO Kenji](https://github.com/doloopwhile)License-------MIT License. See [LICENSE](./LICENSE).This package includes [jq](https://github.com/stedolan/jq) and [oniguruma](https://github.com/kkos/oniguruma). Their license files are included in their respective archive files.- jq: `dependencies/jq-1.5.tar.gz`- oniguruma: `dependencies/onig-6.9.0.tar.gz`Changelog---------### 2.6.0- Supports 3.10### 2.5.1- Fixed typo.### 2.5.0- Supports only 3.7+.- Added pyjq.ScriptRuntimeError.### 2.4.0- Dropped support for Python 2.7, 3.4, 3.5 (Supports only 3.6+).### 2.3.0- Supported WindowsPE(msys)### 2.2.0- Added `library_paths=` option.### 2.1.0- API's translate JS object not to `dict` but to `collections.OrderedDict`.### 2.0.0- Semantic versioning.- Bundle source codes of jq and oniguruma.- Supported Python 3.5.- Dropped support for Python 3.2.- Aeded `all` method.### 1.0- First release.</longdescription>
</pkgmetadata>