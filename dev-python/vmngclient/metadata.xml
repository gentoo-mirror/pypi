<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;docs/vManage-client_LOGO.svg&quot; alt=&quot;vManage-client logo&quot; style=&quot;height:150px&quot; /&gt;&lt;/p&gt;[![Python-Supported](https://img.shields.io/static/v1?label=Python&amp;logo=Python&amp;color=3776AB&amp;message=3.8%20|%203.9%20|%203.10%20|%203.11%20|%203.12)](https://www.python.org/)vManage client is a package for creating simple and parallel automatic requests via official vManage API. It is intended to serve as a multiple session handler (provider, provider as a tenant, tenant). The library is not dependent on environment which is being run in, you just need a connection to any vManage.## Installation```consolepip install vmngclient```## Session usage exampleOur session is an extension to `requests.Session` designed to make it easier to communicate via API calls with vManage. We provide ready to use authenticetion, you have to simply provide the vmanage url, username and password as as if you were doing it through a GUI. ```pythonfrom vmngclient.session import create_vManageSessionurl = &quot;example.com&quot;username = &quot;admin&quot;password = &quot;password123&quot;session = create_vManageSession(url=url, username=username, password=password)session.get(&quot;/dataservice/device&quot;)```## API usage examples&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Get devices&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```pythondevices = session.api.devices.get()```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Admin Tech&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```Pythonadmin_tech_file = session.api.admin_tech.generate(&quot;172.16.255.11&quot;)session.api.admin_tech.download(admin_tech_file)session.api.admin_tech.delete(admin_tech_file)```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Speed test&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```pythondevices = session.api.devices.get()speedtest = session.api.speedtest.speedtest(devices[0], devices[1])```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Upgrade device&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```python# Prepare devices listvsmarts = session.api.devices.get().filter(personality=Personality.VSMART)image = &quot;viptela-20.7.2-x86_64.tar.gz&quot;# Upload imagesession.api.repository.upload_image(image)# Install softwareinstall_task = session.api.software.install(devices=vsmarts, image=image)# Check action statusinstall_task.wait_for_completed()```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Get alarms&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;To get all alarms:```pythonalarms = session.api.alarms.get()```To get all not viewed alarms:```pythonnot_viewed_alarms = session.api.alarms.get().filter(viewed=False)```To get all alarms from past `n` hours:```pythonn = 24alarms_from_n_hours = session.api.alarms.get(from_time=n)```To get all critical alarms from past `n` hours:```pythonn = 48critical_alarms = session.api.alarms.get(from_time=n).filter(severity=Severity.CRITICAL)```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Users&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```python# Get all userssession.api.users.get()# Create usernew_user = User(userName=&quot;new_user&quot;, password=&quot;new_user&quot;, group=[&quot;netadmin&quot;], description=&quot;new user&quot;)session.api.users.create(new_user)# Update user datanew_user_update = UserUpdateRequest(userName=&quot;new_user&quot;, group=[&quot;netadmin&quot;, &quot;netops&quot;], locale=&quot;en_US&quot;, description=&quot;updated-new_user-description&quot;, resGroupName=&quot;global&quot;)session.api.users.update(new_user_update)# Update user passwordsession.api.users.update_password(&quot;new_user&quot;, &quot;n3W-P4s$w0rd&quot;)# Reset usersession.api.users.reset(&quot;new_user&quot;)# Delete usersession.api.users.delete(&quot;new_user&quot;)# Get current user authentication type and rolesession.api.users.get_auth_type()session.api.users.get_role()```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;User Groups&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```python# Get all user groupssession.api.user_groups.get()# Create user groupgroup = UserGroup(&quot;new_user_group&quot;, [])group.enable_read({&quot;Audit Log&quot;, &quot;Alarms&quot;})group.enable_read_and_write({&quot;Device Inventory&quot;})session.api.user_groups.create(group)# Update user groupgroup.disable({&quot;Alarms&quot;})session.api.user_groups.update(group)# Delete user groupsession.api.user_groups.delete(group.group_name)```&lt;/details&gt;&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Sessions&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```python# Get all active sessionsactive_sessions = session.api.sessions.get()# Invalidate sessions for given usernew_user_sessions = active_sessions.filter(raw_username=&quot;new_user&quot;)session.api.sessions.invalidate(new_user_sessions)```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Resource Groups&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```python# get resource groupssession.api.resource_groups.get()# create resource groupnew_resource_group = ResourceGroup(    name=&quot;new_resource_group&quot;,    desc=&quot;Custom Resource Group #1&quot;,    siteIds=[])session.api.resource_groups.create(new_resource_group)# update resource groupresource_group = session.api.resource_groups.get().filter(name=&quot;new_resource_group&quot;).single_or_default()updated_resource_group = ResourceGroupUpdateRequest(    id=resource_group.id,    name=resource_group.name,    desc=&quot;Custom Resource Group #1 with updated description and site ids&quot;,    siteIds=[200])# switch to resource group viewsession.api.resource_groups.switch(&quot;new_resource_group&quot;)# delete resource groupsession.api.resource_groups.delete(resource_group.id)```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Tenant management&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```pythonapi = session.api.tenant_management# create tenantstenants = [    Tenant(        name=&quot;tenant1&quot;,        orgName=&quot;CiscoDevNet&quot;,        subDomain=&quot;alpha.bravo.net&quot;,        desc=&quot;This is tenant for unit tests&quot;,        edgeConnectorEnable=True,        edgeConnectorSystemIp=&quot;172.16.255.81&quot;,        edgeConnectorTunnelInterfaceName=&quot;GigabitEthernet1&quot;,        wanEdgeForecast=1,    )]create_task = api.create(tenants)create_task.wait_for_completed()# list all tenantstenants_data = api.get_all()# pick tenant from list by nametenant = tenants_data.filter(name=&quot;tenant1&quot;).single_or_default()# get selected tenant idtenant_id = tenant.tenant_id# get vsession id of selected tenantvsessionid = api.vsession_id(tenant_id)# delete tenant by idsdelete_task = api.delete([tenant_id])delete_task.wait_for_completed()# othersapi.get_hosting_capacity_on_vsmarts()api.get_statuses()api.get_vsmart_mapping()```&lt;/details&gt;&lt;details&gt;    &lt;summary&gt; &lt;b&gt;Tenant migration&lt;/b&gt; &lt;i&gt;(click to expand)&lt;/i&gt;&lt;/summary&gt;```pythonfrom pathlib import Pathfrom vmngclient.session import create_vManageSessionfrom vmngclient.model.tenant import TenantExportfrom vmngclient.workflows.tenant_migration import migration_workflowtenant = TenantExport(    name=&quot;mango&quot;,    org_name=&quot;Provider Org-Mango Inc&quot;,    subdomain=&quot;mango.fruits.com&quot;,    wan_edge_forecast=100,    migration_key=&quot;MangoTenantMigrationKey&quot;,   # only for SDWAN Manager &gt;= 20.13    is_destination_overlay_mt=True,            # only for SDWAN Manager &gt;= 20.13)with create_vManageSession(url=&quot;10.0.1.15&quot;, username=&quot;st-admin&quot;, password=&quot;&quot;) as origin_session, \     create_vManageSession(url=&quot;10.9.0.16&quot;, username=&quot;mt-provider-admin&quot;, password=&quot;&quot;) as target_session:    migration_workflow(        origin_session=origin_session,        target_session=target_session,        workdir=Path(&quot;workdir&quot;),        tenant=tenant,        validator=&quot;10.9.12.26&quot;    )````migration_workflow` performs multi-step migration procedure according to [Migrate Single-Tenant Cisco SD-WAN Overlay to Multitenant Cisco SD-WAN Deployment](https://www.cisco.com/c/en/us/td/docs/routers/sdwan/configuration/system-interface/vedge-20-x/systems-interfaces-book/sdwan-multitenancy.html#concept_sjj_jmm_z4b)Since 20.13 also MT to ST is supported (just provide suitable origin/target sessions, and `is_destination_overlay_mt` parameter)Each step of the `migration_workflow` procedure can be executed independently using api methods: `export_tenant`, `download`, `import_tenant`, `store_token`, `migrate_network````pythonorigin_api = origin_session.api.tenant_migration_apitarget_api = target_session.api.tenant_migration_apitenant_file = Path(&quot;~/tenant.tar.gz&quot;)token_file = Path(&quot;~/tenant-token.txt&quot;)# exportexport_task = origin_api.export_tenant(tenant=tenant)remote_filename = export_task.wait_for_file()# downloadorigin_api.download(export_path, remote_filename)# importimport_task = target_api.import_tenant(export_path, tenant.migration_key)import_task.wait_for_completed()# get tokenmigration_id = import_task.import_info.migration_token_query_params.migration_idtarget_api.store_token(migration_id, token_path)# migrate networkmigrate_task = origin_api.migrate_network(token_path)migrate_task.wait_for_completed()```&lt;/details&gt;### Note:To remove `InsecureRequestWarning`, you can include in your scripts (warning is suppressed when `VMNGCLIENT_DEVEL` environment variable is set):```Pythonimport urllib3urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)```## Catching Exceptions```pythontry:session.api.users.delete_user(&quot;XYZ&quot;)except vManageBadRequestError as error:# Process an error.logger.error(error.info.details)# message = 'Delete users request failed' # details = 'No user with name XYZ was found' # code = 'USER0006'```## [Supported API endpoints](https://github.com/CiscoDevNet/vManage-client/blob/main/ENDPOINTS.md)## [Contributing, bug reporting and feature requests](https://github.com/CiscoDevNet/vManage-client/blob/main/CONTRIBUTING.md)## Seeking supportYou can contact us by submitting [issues](https://github.com/CiscoDevNet/vManage-client/issues), or directly via mail on vmngclient@cisco.com.</longdescription>
</pkgmetadata>