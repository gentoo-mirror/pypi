<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Permission==========|Latest Version| |The MIT License|Simple and flexible permission control for Flask app.Features---------  **Simple**: all you need to do is subclassing ``Rule`` and   ``Permission`` class.-  **Flexible**: support rule inheritance and bitwise operations(\ ``&amp;``   and ``|``) to build your own rules.Installation------------::    $ pip install permissionRule----``Rule`` has 3 methods which can be overrided:-  base(): define base rule.-  check(): determine whether this rule should be passed or not.-  deny(): will be executed when ``check()`` failed.You should always override ``check()`` and ``deny()`` while overriding``base()`` as needed.Permission----------``Permission`` has 1 method which can be overrided:-  rule(): define rule needed by this permissionYou should always override ``rule()``.``Permission`` has 2 instance methods you can use in codes:-  check(): call this to check rule of this permission-  deny(): call this to execute codes when ``check()`` failedUsage-----First you need to define your own rules by subclassing ``Rule`` thenoverride ``check()`` and ``deny()``:.. code:: py    # rules.py    from flask import session, flash, redirect, url_for    from permission import Rule    class UserRule(Rule):        def check(self):            &quot;&quot;&quot;Check if there is a user signed in.&quot;&quot;&quot;            return 'user_id' in session        def deny(self):            &quot;&quot;&quot;When no user signed in, redirect to signin page.&quot;&quot;&quot;            flash('Sign in first.')            return redirect(url_for('signin'))Then you define permissions by subclassing ``Permission`` and override``rule()``:.. code:: py    # permissions.py    from permission import Permission    from .rules import UserRule    class UserPermission(Permission):        &quot;&quot;&quot;Only signin user has this permission.&quot;&quot;&quot;        def rule(self):            return UserRule()There are 4 ways to use the ``UserPermission`` defined above:**1. Use as view decorator**.. code:: py    from .permissions import UserPermission    @app.route('/settings')    @UserPermission()    def settings():        &quot;&quot;&quot;User settings page, only accessable for sign-in user.&quot;&quot;&quot;        return render_template('settings.html')**2. Use in view codes**.. code:: py    from .permissions import UserPermission    @app.route('/settions')    def settings():        permission = UserPermission()        if not permission.check()            return permission.deny()        return render_template('settings.html')**3. Use in view codes (using ``with`` statement)**.. code:: py    from .permissions import UserPermission    @app.route('/settions')    def settings():        with UserPermission():            return render_template('settings.html')**Note**: if you don't raise an exception when the permission checkfailed (in other words, a rule's ``deny()`` will be called),``PermissionDeniedException`` will be raised in order to stop theexecution of the with-body codes. By the way, you can import thisexception as needed:.. code:: py    from permission import PermissionDeniedException**4. Use in Jinja2 templates**First you need to inject your defined permissions to template context:.. code:: py    from . import permissions    @app.context_processor    def inject_vars():        return dict(            permissions=permissions        )then in templates:.. code:: html    {% if permissions.UserPermission().check() %}        &lt;a href=&quot;{{ url_for('new') }}&quot;&gt;New&lt;/a&gt;    {% endif %}Rule Inheritance----------------Need to say, inheritance here is not the same thing as Python classinheritance, it's just means you can use RuleA as the base rule ofRuleB.We achieve this by overriding ``base()``.Let's say an administrator user should always be a user:.. code:: py    # rules.py    from flask import session, abort, flash, redirect, url_for    from permission import Rule    class UserRule(Rule):        def check(self):            return 'user_id' in session        def deny(self):            flash('Sign in first.')            return redirect(url_for('signin'))    class AdminRule(Rule):        def base(self):            return UserRule()        def check(self):            user_id = int(session['user_id'])            user = User.query.filter(User.id == user_id).first()            return user and user.is_admin        def deny(self):            abort(403)Rule Bitwise Operations------------------------  ``RuleA &amp; RuleB`` means it will be passed when both RuleA and RuleB   are passed.-  ``RuleA | RuleB`` means it will be passed either RuleA or RuleB is   passed.Let's say we need to build a forum with Flask. Only the topic creatorand administrator user can edit a topic:First define rules:.. code:: py    # rules.py    from flask import session, abort, flash, redirect, url_for    from permission import Rule    from .models import User, Topic    class UserRule(Rule):        def check(self):            &quot;&quot;&quot;Check if there is a user signed in.&quot;&quot;&quot;            return 'user_id' in session        def deny(self):            &quot;&quot;&quot;When no user signed in, redirect to signin page.&quot;&quot;&quot;            flash('Sign in first.')            return redirect(url_for('signin'))    class AdminRule(Rule):        def base(self):            return UserRule()        def check(self):            user_id = int(session['user_id'])            user = User.query.filter(User.id == user_id).first()            return user and user.is_admin        def deny(self):            abort(403)    class TopicCreatorRule(Rule):        def __init__(self, topic):            self.topic = topic            super(TopicCreatorRule, self).__init__()        def base(self):            return UserRule()        def check(self):            return topic.user_id == session['user_id']        def deny(self):            abort(403)then define permissions:.. code:: py    # permissions.py    from permission import Permission    class TopicAdminPermission(Permission):        def __init__(self, topic):            self.topic = topic            super(TopicAdminPermission, self).__init__()        def rule(self):            return AdminRule() | TopicCreatorRule(self.topic)so we can use ``TopicAdminPermission`` in ``edit_topic`` view:.. code:: py    from .permissions import TopicAdminPermission    @app.route('topic/&lt;int:topic_id&gt;/edit')    def edit_topic(topic_id):        topic = Topic.query.get_or_404(topic_id)        permission = TopicAdminPermission(topic)        if not permission.check():            return permission.deny()        ...License-------MIT.. |Latest Version| image:: http://img.shields.io/pypi/v/permission.svg   :target: https://pypi.python.org/pypi/permission.. |The MIT License| image:: http://img.shields.io/badge/license-MIT-blue.svg   :target: https://github.com/hustlzp/permission/blob/master/LICENSE</longdescription>
</pkgmetadata>