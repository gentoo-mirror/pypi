<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cyberlang - batteries included python bindings for cyber[![license](https://img.shields.io/pypi/l/cyberlang.svg)](./LICENSE)[![pypi version](https://img.shields.io/pypi/v/cyberlang.svg)](https://pypi.org/project/cyberlang/)[![PyPI status](https://img.shields.io/pypi/status/cyberlang.svg)](https://github.com/qtstrap/qtstrap)[![discord](https://img.shields.io/discord/828041790711136274)](https://discord.gg/Ky8vNZJvAT)## Installation```pip install cyberlang```## UsageSimply create a CyberVM instance and evaluate a string:```pyfrom cyber import CyberVMvm = CyberVM()vm.eval(&quot;print 'hello world!'&quot;)```Want to capture printed output? Override the `print` function from Cyber's `core` module with a binding.The decorator generates all the required wrappers and interfaces, and registers everything with Cyber's VM.```pyfrom cyber import CyberVMvm = CyberVM()@vm.function('core.print')def _print(string: str):    print(string)vm.eval(&quot;print 'hello world!'&quot;)```Alternate techniques for creating callback functions:```py# if no module, assume core# same result as previous example# this creates function &quot;print2&quot; in the &quot;core&quot; module@cyber.function('print2')def _print2(string: str):    print(string)# if no module, assume core# if no function name, use existing function name# this creates function &quot;test&quot; in the &quot;core&quot; module@cyber.functiondef test():    print('core.test')```Or define multiple functions at once using this class-based syntax```py# &quot;core&quot; already exists, so add a() and b() to itclass Core(cyber.module('core')):    def a(self):        print('core.test')    def b(self):        print('core.test2')# create &quot;new_module&quot; and add c() and d() to it@cyber.module('new_module')class Module:    def c(self):        print('new_module.test')    def d(self):        print('new_module.test2')# create module, implicitly named &quot;NewModule&quot; and add e() and f() to it@cyber.moduleclass NewModule:    def e(self):        print('NewModule.test')    def f(self):        print('NewModule.test2')```# Supporters[fubar](https://github.com/fubark) - creator of the Cyber language</longdescription>
</pkgmetadata>