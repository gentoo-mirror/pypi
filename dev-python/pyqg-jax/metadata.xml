<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyQG JAX Port[![PyQG-JAX on PyPI](https://img.shields.io/pypi/v/pyqg-jax)][pypi][![Documentation](https://readthedocs.org/projects/pyqg-jax/badge/?version=latest)][docs][![Tests](https://github.com/karlotness/pyqg-jax/actions/workflows/test.yml/badge.svg)][tests]This is a partial port of [PyQG](https://github.com/pyqg/pyqg) to[JAX](https://github.com/google/jax) which enables GPU acceleration,batching, automatic differentiation, etc.- **Documentation:** https://pyqg-jax.readthedocs.io/en/latest/- **Source Code:** https://github.com/karlotness/pyqg-jax- **Bug Reports:** https://github.com/karlotness/pyqg-jax/issues⚠️ **Warning:** this is a partial, early stage port. There may be bugsand other numerical issues. The API may evolve as work continues.## InstallationInstall from PyPI using pip:```console$ python -m pip install pyqg-jax```This should install required dependencies, but JAX itself may requirespecial attention. Follow the [JAX installationinstructions](https://github.com/google/jax#installation).## Usage[Documentation][docs] is a work in progress. The parameters `QGModel`implemented here are the same as for the model in the original PyQG,so consult the [pyqgdocumentation](https://pyqg.readthedocs.io/en/latest/) for details.However, there are a few overarching changes used to make the modelsJAX-compatible:1. The model state is now a separate, immutable object rather than   being attributes of the `QGModel` class2. Time-stepping is now separated from the models. Use   `steppers.AB3Stepper` for the same time stepping as in the original   `QGModel`.3. Random initialization requires an explicit `key` variable as with   all JAX random number generation.The `QGModel` uses double precision (`float64`) values for part of itscomputation regardless of the precision setting. Make sure JAX is setto enable 64-bit. [See thedocumentation](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#double-64bit-precision)for details. One option is to set the following environment variables:```bashexport JAX_ENABLE_X64=Trueexport JAX_DEFAULT_DTYPE_BITS=32```or use the [`%env`magic](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-env)in a Jupyter notebook.### Short ExampleA short example initializing a `QGModel`, adding a parameterization,and taking a single step.```pycon&gt;&gt;&gt; import pyqg_jax&gt;&gt;&gt; import jax&gt;&gt;&gt; # Construct model, parameterization, and time-stepper&gt;&gt;&gt; stepped_model = pyqg_jax.steppers.SteppedModel(...     model=pyqg_jax.parameterizations.smagorinsky.apply_parameterization(...         pyqg_jax.qg_model.QGModel(),...         constant=0.08,...     ),...     stepper=pyqg_jax.steppers.AB3Stepper(dt=3600.0),... )&gt;&gt;&gt; # Initialize the model state (wrapped in stepper and parameterization state)&gt;&gt;&gt; stepper_state = stepped_model.create_initial_state(...     jax.random.PRNGKey(0)... )&gt;&gt;&gt; # Compute next state&gt;&gt;&gt; next_stepper_state = stepped_model.step_model(stepper_state)&gt;&gt;&gt; # Unwrap the result from the stepper and parameterization&gt;&gt;&gt; next_param_state = next_stepper_state.state&gt;&gt;&gt; next_model_state = next_param_state.model_state&gt;&gt;&gt; final_q = next_model_state.q```For repeated time-stepping combine `step_model` with[`jax.lax.scan`](https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.scan.html).## LicenseThis software is distributed under the MIT license. See LICENSE.txtfor the license text.[pypi]: https://pypi.org/project/pyqg-jax[docs]: https://pyqg-jax.readthedocs.io/en/latest/[tests]: https://github.com/karlotness/pyqg-jax/actions</longdescription>
</pkgmetadata>