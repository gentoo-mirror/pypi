<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Aporia Python SDKAporia's Python SDK is a powerful tool designed to streamline ML monitoring and observability. Define your models, monitors, dashboards, segments, custom metrics, and other ML Observability resources *as code*, just like in Terraform or Pulumi. The SDK also enables you to query metrics from Aporia to integrate with other platforms.## Key Features * **ML Monitoring as Code:** Make it easier to manage and track changes by managing your models, dashboards, segments, and other ML Observability resources as code. * **CI/CD Integration:** Integrate with your CI/CD pipeline to automatically monitor all your models with Aporia. * **Query Metrics:** Fetch metrics directly from Aporia's platform to inform decisions or to use in other applications. * **Data Source Integration:** You can define and integrate multiple types of data sources, like S3, Snowflake, Glue Data Catalog, Databricks, and others. This allows your models to leverage a wide range of data for training and inference. * **Pythonic Interface:** Use the familiar Python programming paradigm to interact with Aporia.## InstallationYou can install the Aporia SDK using pip:```bashpip install aporia```## Quickstart### Define models as code```pythonimport datetimeimport osfrom aporia import Aporia, MetricDataset, MetricParameters, TimeRangeimport aporia.as_code as aporiaaporia_token = os.environ[&quot;APORIA_TOKEN&quot;]aporia_account = os.environ[&quot;APORIA_ACCOUNT&quot;]aporia_workspace = os.environ[&quot;APORIA_WORKSPACE&quot;]stack = aporia.Stack(    token=aporia_token,    account=aporia_account,    workspace=aporia_workspace,)# Your model definition code goes herestack.apply(yes=True, rollback=False, config_path=&quot;config.json&quot;)```### Query Metrics using the SDKThis example shows how you can use the Aporia SDK to query metrics from a model:```pythonfrom datetime import datetimefrom aporia import (    Aporia,    MetricDataset,    MetricParameters,    TimeRange,    DatasetType,)aporia_token = os.environ[&quot;APORIA_TOKEN&quot;]aporia_account = os.environ[&quot;APORIA_ACCOUNT&quot;]aporia_workspace = os.environ[&quot;APORIA_WORKSPACE&quot;]aporia_client = Aporia(    token=aporia_token,    account_name=aporia_account,    workspace_name=aporia_workspace,)last_week_dataset = MetricDataset(    dataset_type=DatasetType.SERVING,    time_range=TimeRange(        start=datetime.now() - datetime.timedelta(days=7),        end=datetime.now(),    ),)metrics = aporia_client.query_metrics(    model_id=model_id,    metrics=[        MetricParameters(            dataset=MetricDataset(dataset_type=DatasetType.SERVING),            name=&quot;count&quot;,        ),    ],)print(f&quot;The model had {metrics[0]} predictions last week&quot;)```Refer to the official Aporia documentation for detailed information on how to use the SDK.## DevelopmentThis package uses Poetry for dependency management. To install dependencies, use:```bashpoetry install```</longdescription>
</pkgmetadata>