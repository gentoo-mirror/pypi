<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># UUIDTTimestamp-orderable UUIDs for Python, written in Rust.## Installation```bashpip install uuidt```## Usage```pythonimport uuidt# Create a new UUIDTu = uuidt.new('my-namespace')# Print the UUIDT propertiesprint(u.namespace)print(u.timestamp)print(u.hostname)print(u.random_chars)# Convert to a stringprint(str(u))# Extract the timestamp from a UUIDT stringprint(uuidt.extract_timestamp(&quot;cr3su3qh-4ium-00bk-00ip-vqlpgpomk3dv&quot;))# 1678562753992474990```## MotivationUUIDs are great for generating unique identifiers, but they are notnecessarily time-orderable. This is a problem if you want to generate a UUIDfor a new record in a database, and then use that UUID to order the recordsby creation time.Many databases avoid this problem using auto-incrementing integer IDs, butthis isn't possible in distributed databases like[CockroachDB](https://www.cockroachlabs.com/), so a UUID is typically used asthe primary key instead.This library generates UUIDs that are time-orderable. The first 12 alphanumericcharacters of the UUID are a nanosecond-precision timestamp which has beenbase-36 encoded, so they can be sorted lexicographically. The remaining 20characters are a combination of a namespace, the hostname of the machine thatgenerated the UUID, and a random string.Technically, UUID1s are also time-orderable, but they are not guaranteed tobe ordered by creation time, and it can be difficult to extract thetimestamp from a UUID1.## Why Rust?Mostly as a learning opportunity for me, though also for speed. The Rustimplementation is significantly faster than the Python implementation, whichused Numpy to convert to base-36.### What if I don't want the Rust implementation?UUIDT should be installable as a wheel on most systems, but if you hate Ferrisand want to use the Python implementation instead, here's some equivalentcode:```pythonimport randomimport socketimport timeimport numpy as npBASE = 36DIVISOR = BASE - 1CHARACTERS = list('0123456789abcdefghijklmnopqrstuvwxyz')[:BASE]class UUIDT:    def __init__(self, namespace: str, timestamp: int, hostname: str, random_chars: str):        self.namespace = namespace        self.timestamp = timestamp        self.hostname = hostname        self.random_chars = random_chars    def __str__(self):        hostname_enc = sum(self.hostname.encode('utf-8'))        namespace_enc = sum(self.namespace.encode('utf-8'))        timestamp_str = np.base_repr(self.timestamp, 36).lower()        hostname_str = np.base_repr(hostname_enc, 36).lower()        namespace_str = np.base_repr(namespace_enc, 36).lower()        return (            f'{timestamp_str[:8]}-{timestamp_str[8:]}-{hostname_str:0&gt;4}-'            f'{namespace_str:0&gt;4}-{self.random_chars}'        )def new(namespace: str) -&gt; UUIDT:    timestamp = time.time_ns()    hostname = socket.gethostname()    random_chars = ''.join(random.choices(CHARACTERS, k=4))    return UUIDT(namespace, timestamp, hostname, random_chars)```## LicenseMIT## Using UUIDT in your projectWhile UUIDT is MIT licensed, I'm really curious to seeing the projects thatuse it! If you use UUIDT in your project, I'd love to hear about it! Pleaselet me know by either opening an issue or sending me an email at the addressin the `pyproject.toml` file.## ContributingContributions are welcome! Just open an issue or a pull request.</longdescription>
</pkgmetadata>