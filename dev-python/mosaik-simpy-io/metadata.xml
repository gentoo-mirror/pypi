<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>mosaik-simpy-io===============*mosaik-simpy-io* is a fork of simpy.io_ to fix some problems for the use of simpy.io together with mosaik_... _simpy.io: https://gitlab.com/team-simpy/simpy.io.. _mosaik: https://mosaik.offis.deVersion: 0.2.4License: MITsimpy.io--------*simpy.io* is an asynchronous networking library based on SimPy_. The natureof networking is thoroughly event-based (messages can for example be thought ofas events). *simpy.io* marries the solid event system of SimPy_ withasynchronous input and output.It provides several degrees of abstraction (raw sockets, packets andrequest-reply messages), supports various back-ends ((e)poll, select, asyncore,virtual) and lets you use different socket types, like TCP, SSL-encrypted,simulated). Furthermore protocols like HTTP, WebSockets and an extensible RPCinterface are also supported... _SimPy: http://simpy.readthedocs.orgCurrent status--------------simpy.io is currently in the early alpha phase of development. There is noguarantee for API stability (modules will almost certainly be renamed beforethe 1.0 release) and simpy.io may break on your system. Sadly, there isn't anydocumentation available as of now (apart from the examples and tests).The state of the individual modules is as follows:* sockets: stable *alpha** packets: stable *alpha** message: stable *alpha** http: *draft** websockets: *draft** rpc: *draft*Installation------------simpy.io requires Python between 3.5 and 3.9 and SimPy 3. You can install it from via pip:.. sourcecode:: bash    $ pip install mosaik-simpy-ioExamples--------The following three examples demonstrate simpy.io's levels of abstraction:Socket level^^^^^^^^^^^^When working directly with simpy.io sockets, you can try to *read* and *write*a specified number of bytes from or to a socket (note that there is noguarantee from the OS that all data will be received or transmitted):.. sourcecode:: python    &gt;&gt;&gt; from simpy.io import select as backend    &gt;&gt;&gt;    &gt;&gt;&gt; def server(env, addr):    ...     server_sock = backend.TCPSocket.server(env, addr)    ...     sock = yield server_sock.accept()    ...     data = yield sock.read(4)    ...     print(data.decode())    ...     yield sock.write('cya'.encode())    &gt;&gt;&gt;    &gt;&gt;&gt; def client(env, addr):    ...     sock = backend.TCPSocket.connection(env, addr)    ...     yield sock.write('ohai'.encode())    ...     data = yield sock.read(3)    ...     print(data.decode())    &gt;&gt;&gt;    &gt;&gt;&gt; addr = ('127.0.0.1', 5555)    &gt;&gt;&gt; env = backend.Environment()    &gt;&gt;&gt; srv = env.process(server(env, addr))    &gt;&gt;&gt; cli = env.process(client(env, addr))    &gt;&gt;&gt; env.run(until=cli)    ohai    cyaPacket level^^^^^^^^^^^^simpy.io packets alleviate the limitation of raw sockets and allow you to readand write complete packets. These can either be bytes (if you use ``Packet``)or (unicode) strings (if you use ``PacketUTF8``):.. sourcecode:: python    &gt;&gt;&gt; from simpy.io import select as backend    &gt;&gt;&gt; from simpy.io.packet import Packet    &gt;&gt;&gt;    &gt;&gt;&gt; def server(env, addr):    ...     server_sock = backend.TCPSocket.server(env, addr)    ...     sock = yield server_sock.accept()    ...     packet = Packet(sock)    ...     data = yield packet.read()    ...     print(data.decode())    ...     yield packet.write('cya'.encode())    &gt;&gt;&gt;    &gt;&gt;&gt; def client(env, addr):    ...     packet = Packet(backend.TCPSocket.connection(env, addr))    ...     yield packet.write('ohai'.encode())    ...     data = yield packet.read()    ...     print(data.decode())    &gt;&gt;&gt;    &gt;&gt;&gt; addr = ('127.0.0.1', 5556)    &gt;&gt;&gt; env = backend.Environment()    &gt;&gt;&gt; srv = env.process(server(env, addr))    &gt;&gt;&gt; cli = env.process(client(env, addr))    &gt;&gt;&gt; env.run(until=cli)    ohai    cyaMessage level^^^^^^^^^^^^^The message level adds message counters that allow you to asynchronously sendmessages (even concurrently) and maps replies to their proper requests.Furthermore, you can specify (de)serializers (by default, *JSON* is used) andreplies can signal success/failure:.. sourcecode:: python    &gt;&gt;&gt; from simpy.io import select as backend    &gt;&gt;&gt; from simpy.io.packet import PacketUTF8    &gt;&gt;&gt; from simpy.io.message import Message    &gt;&gt;&gt;    &gt;&gt;&gt; def server(env, addr):    ...     server_sock = backend.TCPSocket.server(env, addr)    ...     sock = yield server_sock.accept()    ...     message = Message(env, PacketUTF8(sock))    ...     request = yield message.recv()    ...     print(request.content)    ...     yield request.succeed('cya')    &gt;&gt;&gt;    &gt;&gt;&gt; def client(env, addr):    ...     message = Message(env, PacketUTF8(    ...             backend.TCPSocket.connection(env, addr)))    ...     reply = yield message.send('ohai')    ...     print(reply)    &gt;&gt;&gt;    &gt;&gt;&gt; addr = ('127.0.0.1', 5557)    &gt;&gt;&gt; env = backend.Environment()    &gt;&gt;&gt; srv = env.process(server(env, addr))    &gt;&gt;&gt; cli = env.process(client(env, addr))    &gt;&gt;&gt; env.run(until=cli)    ohai    cyaHelp &amp; Contact--------------Bugs should be posted on our `issue tracker`__ here on GitLab.__ https://gitlab.com/mosaik/tools/simpy.io/-/issues/newChangelog=========0.2.4 - 2022-05-12------------------- [FIX] Fix for external event simulations in realtime- [FIX] Renamed async.py to asnycio.py to fix problem with import of async, which is a keyword since Python 3.5- [FIX] Constrain simpy version to &lt;4.0.0 due to incompatibility- [CHANGE] python 3.5, 3.6, 3.7, 3.8 and 3.9 are currently supported, python &lt;=3.4 not anymore.Authors=======mosaik-simpy-io is a fork of simpy.io, which was developed by Ontje Lünsdorf and Stefan Scherfke.The authors of mosaik-simpy-io are Annika Ofenloch and Jan Sören Schwarz.</longdescription>
</pkgmetadata>