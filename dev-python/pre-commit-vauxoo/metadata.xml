<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========Overview========.. image:: https://www.vauxoo.com/logo.png   :alt: Vauxoo   :target: https://www.vauxoo.com/pre-commit script to run automatically the configuration and variables custom from Vauxoo* Free software: GNU Lesser General Public License v3 or later (LGPLv3+)Installation============Install in the same way than you usually install pypi packages    python3 -m pip install --force-reinstall -U pre-commit-vauxooOr using 'sudo':    sudo python3 -m pip install --force-reinstall -U pre-commit-vauxooOr using '--user':    python3 -m pip install --user --force-reinstall -U pre-commit-vauxooOr using virtualenv    source YOUR_VENV/bin/activate &amp;&amp; pip install --force-reinstall -U pre-commit-vauxooYou can confirm your environment running `pre-commit-vauxoo --version`Usage=====Run pre-commit-vauxoo command in git repository where you want to run our lintsThe autofixes are disabled by default you can use the following option to enable it  pre-commit-vauxoo -t allFull --help command result:::  Usage: pre-commit-vauxoo [OPTIONS]    pre-commit-vauxoo run pre-commit with custom validations and configuration    files  Options:    -p, --paths PATH CSV            PATHS are the specific filenames to run                                    hooks on separated by commas.  [env var:                                    INCLUDE_LINT; default: .]    --no-overwrite                  Overwrite configuration files.                                    *If True, existing configuration files into                                    the project will be overwritten.                                    *If False, then current files will be used,                                    if they exist.  [env var:                                    PRECOMMIT_NO_OVERWRITE_CONFIG_FILES]    --fail-optional                 Change the exit_code for 'optional'                                    precommit-hooks-type.                                    *If this flag is enabled so the exit_code                                    will be -1 (error) if 'optional' fails.                                    *If it is disabled (by default), exit_code                                    will be 0 (successful) even if 'optional'                                    fails.  [env var: PRECOMMIT_FAIL_OPTIONAL]    -x, --exclude-autofix PATH CSV  Exclude paths on which to run the autofix                                    pre-commit configuration, separated by                                    commas  [env var: EXCLUDE_AUTOFIX]    -l, --exclude-lint PATH CSV     Paths to exclude checks, separated by                                    commas.  [env var: EXCLUDE_LINT]    -d, --pylint-disable-checks TEXT CSV                                    Pylint checks to disable, separated by                                    commas.  [env var: PYLINT_DISABLE_CHECKS]    -S, --skip-string-normalization                                    If '-t fix' is enabled, don't normalize                                    string quotes or prefixes '' -&gt; &quot;&quot;                                    This parameter is related to 'black' hook                                    [env var: BLACK_SKIP_STRING_NORMALIZATION]    -t, --precommit-hooks-type [mandatory|optional|fix|experimental|all|-mandatory|-optional|-fix|-experimental]                                    Pre-commit configuration file to run hooks,                                    separated by commas.                                    prefix '-' means that the option will be                                    removed.                                    *Mandatory: Stable hooks that needs to be                                    fixed (Affecting build status).                                    *Optional: Optional hooks that could be                                    fixed later. (No affects build status almost                                    '--fail-optional' is set).                                    *Experimental: Experimental hooks that only                                    to test. (No affects build status).                                    *Fix: Hooks auto fixing source code (Affects                                    build status).                                    *All: All configuration files to run hooks.                                    [env var: PRECOMMIT_HOOKS_TYPE; default:                                    all, -fix]    --install                       Install the pre-commit script                                    Using this option a '.git/hooks/pre-commit'                                    will be created                                    Now your command 'git commit' will run 'pre-                                    commit-vauxoo' before to commit    --version                       Show the version of this package    --odoo-version TEXT             Odoo version used for the repository.  [env                                    var: VERSION]    --help                          Show this message and exit... Documentation.. =============.. https://pre-commit-vauxoo.readthedocs.io/Development===========To run all the tests run::    toxNote, to combine the coverage data from all the tox environments run:.. list-table::    :widths: 10 90    :stub-columns: 1    - - Windows      - ::            set PYTEST_ADDOPTS=--cov-append            tox    - - Other      - ::            PYTEST_ADDOPTS=--cov-append tox# ChangeLog was not generated. You need to install &quot;pbr&quot;</longdescription>
</pkgmetadata>