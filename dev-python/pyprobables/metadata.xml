<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>PyProbables===========.. image:: https://img.shields.io/badge/license-MIT-blue.svg    :target: https://opensource.org/licenses/MIT/    :alt: License.. image:: https://img.shields.io/github/release/barrust/pyprobables.svg    :target: https://github.com/barrust/pyprobables/releases    :alt: GitHub release.. image:: https://github.com/barrust/pyprobables/workflows/Python%20package/badge.svg    :target: https://github.com/barrust/pyprobables/actions?query=workflow%3A%22Python+package%22    :alt: Build Status.. image:: https://codecov.io/gh/barrust/pyprobables/branch/master/graph/badge.svg?token=OdETiNgz9k    :target: https://codecov.io/gh/barrust/pyprobables    :alt: Test Coverage.. image:: https://readthedocs.org/projects/pyprobables/badge/?version=latest    :target: http://pyprobables.readthedocs.io/en/latest/?badge=latest    :alt: Documentation Status.. image:: https://badge.fury.io/py/pyprobables.svg    :target: https://pypi.org/project/pyprobables/    :alt: Pypi Release.. image:: https://pepy.tech/badge/pyprobables    :target: https://pepy.tech/project/pyprobables    :alt: Downloads**pyprobables** is a pure-python library for probabilistic data structures.The goal is to provide the developer with a pure-python implementation ofcommon probabilistic data-structures to use in their work.To achieve better raw performance, it is recommended supplying an alternativehashing algorithm that has been compiled in C. This could include using themd5 and sha512 algorithms provided or installing a third party package andwriting your own hashing strategy. Some options include the murmur hash`mmh3 &lt;https://github.com/hajimes/mmh3&gt;`__ or those from the`pyhash &lt;https://github.com/flier/pyfasthash&gt;`__ library. Each data object in**pyprobables** makes it easy to pass in a custom hashing function.Read more about how to use `Supplying a pre-defined, alternative hashing strategies`_or `Defining hashing function using the provided decorators`_.Installation------------------Pip Installation:::    $ pip install pyprobablesTo install from source:To install `pyprobables`, simply clone the `repository on GitHub&lt;https://github.com/barrust/pyprobables&gt;`__, then run from the folder:::    $ python setup.py install`pyprobables` supports python 3.6 - 3.10+For *python 2.7* support, install `release 0.3.2 &lt;https://github.com/barrust/pyprobables/releases/tag/v0.3.2&gt;`__::    $ pip install pyprobables==0.3.2API Documentation---------------------The documentation of is hosted on`readthedocs.io &lt;http://pyprobables.readthedocs.io/en/latest/code.html#api&gt;`__You can build the documentation locally by running:::    $ pip install sphinx    $ cd docs/    $ make htmlAutomated Tests------------------To run automated tests, one must simply run the following command from thedownloaded folder:::  $ python setup.py testQuickstart------------------Import pyprobables and setup a Bloom Filter^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from probables import (BloomFilter)    blm = BloomFilter(est_elements=1000, false_positive_rate=0.05)    blm.add('google.com')    blm.check('facebook.com')  # should return False    blm.check('google.com')  # should return TrueImport pyprobables and setup a Count-Min Sketch^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from probables import (CountMinSketch)    cms = CountMinSketch(width=1000, depth=5)    cms.add('google.com')  # should return 1    cms.add('facebook.com', 25)  # insert 25 at once; should return 25Import pyprobables and setup a Cuckoo Filter^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from probables import (CuckooFilter)    cko = CuckooFilter(capacity=100, max_swaps=10)    cko.add('google.com')    cko.check('facebook.com')  # should return False    cko.check('google.com')  # should return TrueSupplying a pre-defined, alternative hashing strategies^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from probables import (BloomFilter)    from probables.hashes import (default_sha256)    blm = BloomFilter(est_elements=1000, false_positive_rate=0.05,                      hash_function=default_sha256)    blm.add('google.com')    blm.check('facebook.com')  # should return False    blm.check('google.com')  # should return True.. _use-custom-hashing-strategies:Defining hashing function using the provided decorators^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    import mmh3  # murmur hash 3 implementation (pip install mmh3)    from pyprobables.hashes import (hash_with_depth_bytes)    from pyprobables import (BloomFilter)    @hash_with_depth_bytes    def my_hash(key):        return mmh3.hash_bytes(key)    blm = BloomFilter(est_elements=1000, false_positive_rate=0.05, hash_function=my_hash).. code:: python    import mmh3  # murmur hash 3 implementation (pip install mmh3)    from pyprobables.hashes import (hash_with_depth_int)    from pyprobables import (BloomFilter)    @hash_with_depth_int    def my_hash(key, encoding='utf-8'):        max64mod = UINT64_T_MAX + 1        val = int(hashlib.sha512(key.encode(encoding)).hexdigest(), 16)        return val % max64mod    blm = BloomFilter(est_elements=1000, false_positive_rate=0.05, hash_function=my_hash)See the `API documentation &lt;http://pyprobables.readthedocs.io/en/latest/code.html#api&gt;`__for other data structures available and the`quickstart page &lt;http://pyprobables.readthedocs.io/en/latest/quickstart.html#quickstart&gt;`__for more examples!Changelog------------------Please see the `changelog&lt;https://github.com/barrust/pyprobables/blob/master/CHANGELOG.md&gt;`__ for a listof all changes.Backward Compatible Changes---------------------------If you are using previously exported probablistic data structures (v0.4.1 or below)and used the default hashing strategy, you will want to use the following codeto mimic the original default hashing algorithm... code:: python    from probables import BloomFilter    from probables.hashes import hash_with_depth_int    @hash_with_depth_int    def old_fnv1a(key, depth=1):        return tmp_fnv_1a(key)    def tmp_fnv_1a(key):        max64mod = UINT64_T_MAX + 1        hval = 14695981039346656073        fnv_64_prime = 1099511628211        tmp = map(ord, key)        for t_str in tmp:            hval ^= t_str            hval *= fnv_64_prime            hval %= max64mod        return hval    blm = BloomFilter(filpath=&quot;old-file-path.blm&quot;, hash_function=old_fnv1a)</longdescription>
</pkgmetadata>