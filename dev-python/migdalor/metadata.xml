<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/roma-glushko/migdalor/blob/main/docs/imgs/logo-wide.png?raw=true&quot; width=&quot;100%&quot; alt=&quot;Migdalor - a Kubernetes native cluster management for modern Python&quot; /&gt;&lt;/p&gt;# MigdalorMigdalor is a cluster membership library for modern asyncio Python distributed systems running in Kubernetes.Migdalor doesn't require a separate broker (e.g. Redis, etcd, Zookeeper, Chabby, etc) to work, but leverage Kubernetes out-of-the-box capabilitiesto solve the peer discovery problem.## Features- üêç Modern Asyncio Pythonic API- üî¶ Brokerless Kubernetes native peer discovery based on headless services- üî≠ Hooks into membership change events - üõ†Ô∏è Ability to manage membership manually## Installation```bashpip install midgalor# or# poetry add midgalor# pdm add midgalor```## Usage```pythonimport migdalorcluster = migdalor.Cluster(    node_address=(node_address),  # the current node address (e.g. 127.0.0.1:8001)    discovery=migdalor.KubernetesServiceDiscovery(service_address=cluster_address), # Kubernetes headless service address (e.g. cluster:8000)    ## Callbacks on different events    # nodes_added_handlers=[...]     # nodes_removed_handlers=[...],    ## Membership update rate    # update_every_secs=10,)await cluster.start()# You can also add or remove nodes manually if you support that in your protocolawait cluster.add([(&quot;127.0.0.1&quot;, 8001)])# await cluster.remove([(&quot;127.0.0.1&quot;, 8001)])await cluster.stop()```Midgalor comes with some comprehensive example to help you get started:- [The Party Cluster](/examples/party_cluster) - An example of using Migdalor to implement peer discovery in Kubernetes cluster</longdescription>
</pkgmetadata>