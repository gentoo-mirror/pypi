<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![N|Python](https://www.python.org/static/community_logos/python-powered-w-100x40.png)](https://www.python.org)[![CircleCI](https://circleci.com/gh/fusion-energy/neutronics_material_maker/tree/main.svg?style=svg)](https://circleci.com/gh/fusion-energy/neutronics_material_maker/tree/main)[![codecov](https://codecov.io/gh/fusion-energy/neutronics_material_maker/branch/main/graph/badge.svg)](https://codecov.io/gh/fusion-energy/neutronics_material_maker)[![PyPI version](https://badge.fury.io/py/neutronics-material-maker.svg)](https://badge.fury.io/py/neutronics-material-maker)[![Documentation Status](https://readthedocs.org/projects/neutronics-material-maker/badge/?version=latest)](https://neutronics-material-maker.readthedocs.io/en/latest/?badge=latest)[![Code Quality Score](https://www.code-inspector.com/project/13383/score/svg)](https://frontend.code-inspector.com/public/project/13383/neutronics_material_maker/dashboard)[![Code Grade](https://www.code-inspector.com/project/13383/status/svg)](https://frontend.code-inspector.com/public/project/13383/neutronics_material_maker/dashboard)# **Neutronics Material Maker**The aim of this project is to facilitate the creation of materials for use inneutronics codes such as OpenMC, Serpent, MCNP and Fispact.The hope is that by having this collection of materials it is easier to reusematerials across projects, use a common source with less room for user error.One nice aspect of this material maker is the ability to change the density ofa material based on isotope enrichment (e.g. inbuild lithium ceramics),temperature and pressure.:point_right: [Documentation](https://neutronics-material-maker.readthedocs.io/en/latest/):point_right: [Video presentation]()## Installation### CondaTo use the code you will need to have OpenMC installed[OpenMC](https://docs.openmc.org/en/latest/quickinstall.html).The recommended method is to install from[Conda Forge](https://conda-forge.org) which also installs all the dependenciesincluding OpenMC.```bashconda create --name new_env python=3.8conda activate new_envconda install neutronics_material_maker -c conda-forge```### PipAlternatively the code can be easily installed using pip. This method doesn'tcurrently include OpenMC so that will have to be installed separately usingConda or compiled.```bashpip install neutronics_material_maker```To include the optional capability of calculating the density of coolantsadditional packages are needed (CoolProp). A slightly modified pip installis required in this case.```bashpip install &quot;neutronics_material_maker[density]&quot;```## FeaturesMaterials for using in neutronics codes have two main aspects; a list ofisotopes along with their abundance and the material density.This code contains an internal collection of materials with their isotopeabundances and densities (sometimes temperature, pressure and enrichmentdependant), but you may also import your own materials collection.## Usage - Finding Available MaterialsEach of the materials available is stored in an internal dictionary that can beaccessed using the ```AvailableMaterials()``` command.```pythonimport neutronics_material_maker as nmmall_materials = nmm.AvailableMaterials()print(all_materials.keys())```### Usage - Material()```pythonimport neutronics_material_maker as nmmmy_mat = nmm.Material(    name='my_custom_material',    isotopes={'Li6':0.5, 'Li7':0.5},    density=2.01,    percent_type='ao',    density_unit='g/cm3')my_mat.openmc_material```## Usage - Material from libraryHere is an example that accesses a material from the internal collection calledeurofer which has about 60 isotopes of a density of 7.78g/cm3.```pythonimport neutronics_material_maker as nmmmy_mat = nmm.Material.from_library('eurofer')my_mat.openmc_material```## Usage - Hot Pressurised MaterialFor several materials within the collection the temperature and the pressure impacts the density of the material. The neutronics_material_maker adjusts the density to take temperature and the pressure into account when appropriate. Densities are calculated either by a material specific formula (for example [FLiBe](https://github.com/fusion-energy/neutronics_material_maker/blob/main/neutronics_material_maker/data/multiplier_and_breeder_materials.json)) or using [CoolProps](https://pypi.org/project/CoolProp/) (for example [coolants](https://github.com/fusion-energy/neutronics_material_maker/blob/main/neutronics_material_maker/data/coolant_materials.json))```pythonimport neutronics_material_maker as nmmmy_mat1 = nmm.Material.from_library(name='H2O', temperature=600, pressure=15e6)my_mat1.openmc_material```For several materials within the collection the density is adjusted when thematerial is enriched. For breeder blankets in fusion it is common to enrich thelithium 6 content.## Usage - Enriched MaterialLithium ceramics used in fusion breeder blankets often contain enrichedlithium-6 content. This slight change in density is accounted for by theneutronics_material_maker.```pythonimport neutronics_material_maker as nmmmy_mat2 = nmm.Material.from_library(name='Li4SiO4', enrichment=60)my_mat2.openmc_material```## Usage - Material.from_mixtureMaterials can also be mixed together using the from_mixture method. Thisaccepts a list of ```neutronics_material_maker.Materials``` or ```openmc.Material``` objects along with the material fractions (fracs).```pythonimport neutronics_material_maker as nmmmy_mat1 = nmm.Material.from_library(name='Li4SiO4', packing_fraction=0.64)my_mat2 = nmm.Material.from_library(name='Be12Ti')my_mat3 = nmm.Material.from_mixture(materials=[my_mat1, my_mat2],                        fracs=[0.4, 0.6],                        percent_type='vo')my_mat3.openmc_material```## Usage - Importing Your Own Material LibraryAssuming you have a JSON file saved as ```mat_lib.json``` containing materialsdefined in the same format as the[exisiting materials](https://github.com/fusion-energy/neutronics_material_maker/tree/main/neutronics_material_maker/data)then you can import this file into the package using```AddMaterialFromFile()```. Another option is to use ```AddMaterialFromDir()```to import a directory of json files.```pythonimport neutronics_material_maker as nmmnmm.AddMaterialFromFile('mat_lib.json')nmm.AvailableMaterials() # this will print the new larger list of materials```## Usage - Exporting To Different Neutronics CodesYou can export to OpenMC, Serpent, MCNP and Fispact with the appropiatearguments.```pythonimport neutronics_material_maker as nmmmy_mat = nmm.Materialfrom_library('tungsten')# openmcmy_mat.openmc_material# mcnp - required a material_id to be setmy_mat.material_id = 1my_mat.mcnp_material# serpentmy_mat.serpent_material# fispact - requires volume to be specifiedmy_mat.volume_in_cm3 = 1 / my_mat.densitymy_mat.fispact_material```## Further ExamplesFurther examples can be found in the[neutronics workshop task 11](https://github.com/fusion-energy/openmc_workshop/tree/master/tasks/task_11)and in the [Documentation](https://neutronics-material-maker.readthedocs.io/en/latest/)# AcknowledgementInspired by software projects [Pyne](https://pyne.io/) and making use of[OpenMC](https://docs.openmc.org/en/stable/) functionality and the[JSON](https://www.json.org/json-en.html) file format and[PNNL](https://www.pnnl.gov/main/publications/external/technical_reports/PNNL-15870Rev1.pdf)for many definitions.</longdescription>
</pkgmetadata>