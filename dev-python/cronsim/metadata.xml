<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CronSim[![Tests](https://github.com/cuu508/cronsim/actions/workflows/pytest.yml/badge.svg)](https://github.com/cuu508/cronsim/actions/workflows/pytest.yml)Cron Sim(ulator), a cron expression parser and evaluator. Works with Python 3.8+.CronSim is written for and being used in[Healthchecks](https://github.com/healthchecks/healthchecks/)(a cron job monitoring service).Development priorities:* Correctness. CronSim tries to match Debian's cron as closely as possible,  including its quirky behaviour during DST transitions.* Readability. Prefer simple over clever.* Minimalism. Don't implement features that Healthchecks will not use  (for example, iteration in reverse, or the seconds field in cron expressions).## Installation```pip install cronsim```## Usage```pythonfrom datetime import datetimefrom cronsim import CronSimit = CronSim(&quot;0 0 * 2 MON#5&quot;, datetime.now())for x in range(0, 10):    print(next(it))```Outputs:```2044-02-29 00:00:002072-02-29 00:00:002112-02-29 00:00:002140-02-29 00:00:002168-02-29 00:00:002196-02-29 00:00:002208-02-29 00:00:002236-02-29 00:00:002264-02-29 00:00:002292-02-29 00:00:00```## CronSim Works With zoneinfoCronSim starting from version 2.0 is designed to work with timezones provided bythe zoneinfo module.A previous version, CronSim 1.0, was designed for pytz and relied on itsfollowing non-standard features:* the non-standard `is_dst` flag in the `localize()` method* the `pytz.AmbiguousTimeError` and `pytz.NonExistentTimeError` exceptions* the `normalize()` method## Supported Cron Expression FeaturesCronSim aims to match [Debian's cron implementation](https://salsa.debian.org/debian/cron/-/tree/master/)(which itself is based on Paul Vixie's cron, with modifications). If CronSim evaluatesan expression differently from Debian's cron, that's a bug.CronSim is open to adding support for non-standard syntax features, as long asthey don't conflict or interfere with the standard syntax.## DST TransitionsCronSim handles Daylight Saving Time transitions the same asDebian's cron. Debian has special handling for jobs with a granularitygreater than one hour:```Local time changes of less than three hours, such as  those  caused  bythe  start or end of Daylight Saving Time, are handled specially.  Thisonly applies to jobs that run at a specific time and jobs that are  runwith  a    granularity  greater  than  one hour.  Jobs that run more fre-quently are scheduled normally.If time has moved forward, those jobs that would have run in the inter-val that has been skipped will be run immediately.  Conversely, if timehas moved backward, care is taken to avoid running jobs twice.```See test cases in `test_cronsim.py`, `TestDstTransitions` classfor examples of this special handling.## Cron Expression Feature Matrix| Feature                              | Debian | croniter | cronsim || ------------------------------------ | :----: | :------: | :-----: || Seconds in the 6th field             | No     | Yes      | No      || &quot;L&quot; as the day-of-month              | No     | Yes      | Yes     || &quot;L&quot; in the day-of-week field         | No     | No       | Yes     || Nth weekday of month                 | No     | Yes      | Yes     |**Seconds in the 6th field**: an optional sixth field specifying seconds.Supports the same syntax features as the minutes field.Example: `* * * * * */15` (every 15 seconds).**&quot;L&quot; as the day-of-month**: support for the &quot;L&quot; special character in theday-of-month field. Interpreted as &quot;the last day of the month&quot;.Example: `0 0 L * *` (at the midnight of the last day of every month).**&quot;L&quot; in the day-of-week field**: support for the &quot;{weekday}L&quot; syntax.For example, &quot;5L&quot; means &quot;the last Friday of the month&quot;.Example: `0 0 * * 6L` (at the midnight of the last Saturday of every month).**Nth weekday of month**: support for &quot;{weekday}#{nth}&quot; syntax.For example, &quot;MON#1&quot; means &quot;first Monday of the month&quot;, &quot;MON#2&quot; means &quot;second Mondayof the month&quot;.Example: `0 0 * * MON#1` (at midnight of the first monday of every month).## The `explain()` MethodStarting from version 2.4, the CronSim objects have an `explain()` methodwhich generates a text description of the supplied cron expression.```pythonfrom datetime import datetimefrom cronsim import CronSimexpr = CronSim(&quot;*/5 9-17 * * *&quot;, datetime.now())print(expr.explain())```Outputs:```Every 5th minute from 9:00 through 17:59```The text descriptions are available in English only. The text descriptionsuse the 24-hour time format (&quot;23:00&quot; instead of &quot;11:00 PM&quot;).For examples of generated descriptions see `tests/test_explain.py`.</longdescription>
</pkgmetadata>