<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SMARTAPI-PYTHONSMARTAPI-PYTHON is a Python library for dealing AMX,that is a set of REST-like HTTP APIs that expose many capabilities required to build stock market investment and trading platforms. It lets you execute orders in real time.## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install smartapi-python.```bashpip install smartapi-pythonpip install websocket-client```## Usage```python# package import statementfrom smartapi import SmartConnect #or from smartapi.smartConnect import SmartConnect#import smartapi.smartExceptions(for smartExceptions)#create object of callobj=SmartConnect(api_key=&quot;your api key&quot;,                #optional                #access_token = &quot;your access token&quot;,                #refresh_token = &quot;your refresh_token&quot;)#login api calldata = obj.generateSession(&quot;Your Client ID&quot;,&quot;Your Password&quot;,&quot;Your totp&quot;)refreshToken= data['data']['refreshToken']#fetch the feedtokenfeedToken=obj.getfeedToken()#fetch User ProfileuserProfile= obj.getProfile(refreshToken)#place ordertry:    orderparams = {        &quot;variety&quot;: &quot;NORMAL&quot;,        &quot;tradingsymbol&quot;: &quot;SBIN-EQ&quot;,        &quot;symboltoken&quot;: &quot;3045&quot;,        &quot;transactiontype&quot;: &quot;BUY&quot;,        &quot;exchange&quot;: &quot;NSE&quot;,        &quot;ordertype&quot;: &quot;LIMIT&quot;,        &quot;producttype&quot;: &quot;INTRADAY&quot;,        &quot;duration&quot;: &quot;DAY&quot;,        &quot;price&quot;: &quot;19500&quot;,        &quot;squareoff&quot;: &quot;0&quot;,        &quot;stoploss&quot;: &quot;0&quot;,        &quot;quantity&quot;: &quot;1&quot;        }    orderId=obj.placeOrder(orderparams)    print(&quot;The order id is: {}&quot;.format(orderId))except Exception as e:    print(&quot;Order placement failed: {}&quot;.format(e.message))#gtt rule creationtry:    gttCreateParams={            &quot;tradingsymbol&quot; : &quot;SBIN-EQ&quot;,            &quot;symboltoken&quot; : &quot;3045&quot;,            &quot;exchange&quot; : &quot;NSE&quot;,             &quot;producttype&quot; : &quot;MARGIN&quot;,            &quot;transactiontype&quot; : &quot;BUY&quot;,            &quot;price&quot; : 100000,            &quot;qty&quot; : 10,            &quot;disclosedqty&quot;: 10,            &quot;triggerprice&quot; : 200000,            &quot;timeperiod&quot; : 365        }    rule_id=obj.gttCreateRule(gttCreateParams)    print(&quot;The GTT rule id is: {}&quot;.format(rule_id))except Exception as e:    print(&quot;GTT Rule creation failed: {}&quot;.format(e.message))#gtt rule listtry:    status=[&quot;FORALL&quot;] #should be a list    page=1    count=10    lists=obj.gttLists(status,page,count)except Exception as e:    print(&quot;GTT Rule List failed: {}&quot;.format(e.message))#Historic apitry:    historicParam={    &quot;exchange&quot;: &quot;NSE&quot;,    &quot;symboltoken&quot;: &quot;3045&quot;,    &quot;interval&quot;: &quot;ONE_MINUTE&quot;,    &quot;fromdate&quot;: &quot;2021-02-08 09:00&quot;,     &quot;todate&quot;: &quot;2021-02-08 09:16&quot;    }    obj.getCandleData(historicParam)except Exception as e:    print(&quot;Historic Api failed: {}&quot;.format(e.message))#logouttry:    logout=obj.terminateSession('Your Client Id')    print(&quot;Logout Successfull&quot;)except Exception as e:    print(&quot;Logout failed: {}&quot;.format(e.message))```## Getting started with SmartAPI Websocket's```pythonfrom smartapi import SmartWebSocket# feed_token=092017047FEED_TOKEN=&quot;YOUR_FEED_TOKEN&quot;CLIENT_CODE=&quot;YOUR_CLIENT_CODE&quot;# token=&quot;mcx_fo|224395&quot;token=&quot;EXCHANGE|TOKEN_SYMBOL&quot;    #SAMPLE: nse_cm|2885&amp;nse_cm|1594&amp;nse_cm|11536&amp;nse_cm|3045# token=&quot;mcx_fo|226745&amp;mcx_fo|220822&amp;mcx_fo|227182&amp;mcx_fo|221599&quot;task=&quot;mw&quot;   # mw|sfi|dpss = SmartWebSocket(FEED_TOKEN, CLIENT_CODE)def on_message(ws, message):    print(&quot;Ticks: {}&quot;.format(message))def on_open(ws):    print(&quot;on open&quot;)    ss.subscribe(task,token)def on_error(ws, error):    print(error)def on_close(ws):    print(&quot;Close&quot;)# Assign the callbacks.ss._on_open = on_openss._on_message = on_messagess._on_error = on_errorss._on_close = on_closess.connect()```</longdescription>
</pkgmetadata>