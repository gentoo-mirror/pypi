<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Iconify API implementation and tools for Django projects========================================================This re-usable app hepls integrating `Iconify`_ into Django projects.Iconify is a unified icons framework, providing access to 40,000+ iconsfrom different icon sets.Iconify replaces classical icon fonts, claiming that such fonts wouldget too large for some icon sets out there. Instead, it provides an APIto add icons in SVG format from its collections.`django-iconify`_ eases integration into Django. Iconify, to be performant,uses a server-side API to request icons from (in batches, with transformationsapplied, etc.). Upstream provides a CDN-served central API as well asself-hosted options written in PHP or Node.js, all of which are undesirablefor Django projects. `django-iconify`_ implements the Iconify API as are-usable Django app.Installation------------To add `django-iconify`_ to a project, first add it as dependency to yourproject, e.g. using `poetry`_::  $ poetry add django-iconifyThen, add it to your `INSTALLED_APPS` setting to make its views availablelater::  INSTALLED_APPS = [      ...      &quot;dj_iconify.apps.DjIconifyConfig&quot;,      ...  ]You need to make the `JSON collection`_ available by some means. You candownload it manually, or use your favourite asset management library. Forinstance, you could use `django-yarnpkg`_ to depend on the `@iconify/json`Yarn package::  YARN_INSTALLED_APPS = [    &quot;@iconify/json&quot;,  ]  NODE_MODULES_ROOT = os.path.join(BASE_DIR, &quot;node_modules&quot;)No matter which way, finally, you have to configure the path to thecollections in your settings::    ICONIFY_JSON_ROOT = os.path.join(NODE_MODULES_ROOT, &quot;@iconify&quot;, &quot;json&quot;)If you do not use `django-yarnpkg`_, construct the path manually, ot usewhatever mechanism your asset manager provides.You can configure which icon collections are available using two settings:  ICONIFY_COLLECTIONS_ALLOWED = [&quot;foo&quot;, &quot;bar&quot;]This list controls which collections can be used. If it is set to anon-empty list, only the collections listed are allowed.  ICONIFY_COLLECTIONS_DISALLOWED = [&quot;foo&quot;, &quot;bar&quot;]This list, on the other hand, controls which collections cannot be used.If this list contains values, while `COLLECTIONS_ALLOWED` doesn't, allcollections except the listed ones are allowed.The allow/disallow feature can be used in cases where only a limited setof collections should be available due to design principles or for legalreasons.Finally, include the URLs in your `urlpatterns`::  from django.urls import include, path  urlpatterns = [      path(&quot;icons/&quot;, include(&quot;dj_iconify.urls&quot;)),  ]Usage-----Iconify SVG Framework~~~~~~~~~~~~~~~~~~~~~To use the `Iconify SVG Framework`_, get its JavaScript from somewhere(e.g. using `django-yarnpkg`_ again, or directly from the CDN, from yourow nstatic files, or wherever).`django-iconify`_ provides a view that returns a small JavaScript snippetthat configures the `Iconify SVG Framework`_ to use its API endpoints. Inthe following example, we first load this configuration snippet, theninclude the `Iconify SVG Framework`_ from the CDN (do not do this inproduction, where data protection matters)::  &lt;script type=&quot;text/javascript&quot; src=&quot;{% url 'config.js' %}&quot;&gt;&lt;/script&gt;  &lt;script type=&quot;text/javascript&quot; src=&quot;https://code.iconify.design/1/1.0.6/iconify.min.js&quot;&gt;&lt;/script&gt;Loading SVG directly (&quot;How to use Iconify in CSS&quot;)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`django-iconify`_ also implements the direct SVG API. For now, you have to useDjango's regular URL reverse resolver to construct an SVG URL, or craft itby hand::  &lt;img src=&quot;{% url 'iconify_svg' 'mdi' 'account' %}?rotate=90deg %}&quot; /&gt;Documentation on what query parameters are supported can be found in thedocumentation on `How to use Iconify in CSS`_.In the future, a template tag will be available to simplify this.Including SVG in template directly~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*Not implemented yet*In the future, a template tag will be available to render SVG icons directlyinto the template, which can be helpful in situations where retrieving externalresources in undesirable, like HTML e-mails.Example-------The source distribution as well as the `Git repository`_ contain a full exampleapplication that serves the API under `/icons/` and a test page under `/test.html`.It is reduced to a minimal working example for the reader's convenience... _Iconify: https://iconify.design/.. _django-iconify: https://edugit.org/AlekSIS/libs/django-iconify.. _poetry: https://python-poetry.org/.. _JSON collection: https://github.com/iconify/collections-json.. _django-yarnpkg: https://edugit.org/AlekSIS/libs/django-yarnpkg.. _Iconify SVG Framework: https://docs.iconify.design/implementations/svg-framework/.. _How to use Iconify in CSS: https://docs.iconify.design/implementations/css.html.. _Git repository: https://edugit.org/AlekSIS/libs/django-iconify</longdescription>
</pkgmetadata>