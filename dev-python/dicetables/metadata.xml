<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://travis-ci.org/eric-s-s/dice-tables.svg?branch=master    :target: https://travis-ci.org/eric-s-s/dice-tables.. image:: https://coveralls.io/repos/github/eric-s-s/dice-tables/badge.svg?branch=master    :target: https://coveralls.io/github/eric-s-s/dice-tables?branch=master#################dicetables v4.0.1#################Calculate the Combinations For Any Set of Dice==============================================Have you ever wondered what the chances were for killing that 25 hp creaturewith your lvl-5 fireball? Of course you have(it's 3.24%. Good luck with that).What about if you could use your loaded dice that roll 6 twice as often.We've got you covered (still only a 10% chance). Want to make sureyou'll win a bet on a number spread for DND dice randomly grabbed from a bag?No problem(&quot;i'll bet you can't roll 150-200 on 7D4, 4D8, 5D12 and 4D20&quot; ...because it's a 0.3% chance). Ever wondered what would happen if you flipped acoin a thousand times? (Your chance of flipping heads more than 600 timesis 0.000000009%.)Impress your friends. Wow the gender of your choice -with .... DICETABLES!!!Getting Started===============This module has no dependencies and no requirements. So to get started, simply:.. code-block:: bash    $ pip install dicetablesor:.. code-block:: bash    $ git clone https://github.com/eric-s-s/dice-tables.git    $ cd dice-tables    $ python setup.py installThe basic objects to use are DiceTable or DetailedDiceTable, and any of the dice classes.  They are:- Die- ModDie- WeightedDie- ModWeightedDie- Modifier- StrongDie- Exploding- ExplodingOn- BestOfDicePool- WorstOfDicePool- UpperMidOfDicePool- LowerMidOfDicePoolfor details about the dice, see `The Dice`_.for details about the dice-tables see`DiceTable and DetailedDiceTable &lt;http://dice-tables.readthedocs.io/en/latest/the_dicetable.html&gt;`_These are all immutable objects. When you add dice to a DiceTable, it returns a new object anddoesn't alter the original. Use the :code:`DiceTable.new()` class method to create an empty DiceTable.&gt;&gt;&gt; import dicetables as dt&gt;&gt;&gt; empty = dt.DiceTable.new()&gt;&gt;&gt; empty&lt;DiceTable containing []&gt;&gt;&gt;&gt; empty.add_die(dt.Die(6), times=10)&lt;DiceTable containing [10D6]&gt;&gt;&gt;&gt; empty&lt;DiceTable containing []&gt;&gt;&gt;&gt; table = empty.add_die(dt.Die(4), times=3)&gt;&gt;&gt; table = table.add_die(dt.Die(10), times=5)&gt;&gt;&gt; table.get_list()[(Die(4), 3), (Die(10), 5)]&gt;&gt;&gt; print(table.get_dict())  # This is each roll and how many times it occurs.{8: 1, 9: 8, 10: 36, 11: 120, 12: 327, ... ... 55: 3072, 56: 1608, 57: 768, 58: 327, 59: 120, 60: 36, 61: 8, 62: 1}To get more detailed information, use`EventsCalculations &lt;http://dice-tables.readthedocs.io/en/latest/events_info.html&gt;`_.It can get the mean, stddev, a nice string of thecombinations, points and axes for graphing, and stats for any set of rolls.&gt;&gt;&gt; calculator = dt.EventsCalculations(table)&gt;&gt;&gt; calculator.mean()35.0&gt;&gt;&gt; calculator.stddev(decimal_place=8)6.70820393&gt;&gt;&gt; calculator.stats_strings(list(range(8, 20)) + [35] + list(range(50, 63)))StatsStrings(query_values='8-19, 35, 50-62',             query_occurrences='515,778',             total_occurrences='6,400,000',             one_in_chance='12.41',             pct_chance='8.059')&gt;&gt;&gt; calculator.percentage_points()[(8, 1.5624999999999997e-05), (9, 0.00012499999999999998), (10, 0.0005625), ... (59, 0.001875), (60, 0.0005625), (61, 0.00012499999999999998), (62, 1.5624999999999997e-05)]&gt;&gt;&gt; big_table = dt.DetailedDiceTable.new().add_die(dt.Die(6), 1000)&gt;&gt;&gt; print(big_table.calc.full_table_string())  # DetailedDiceTable owns an EventsCalculations1000: 11001: 1,0001002: 500,5001003: 1.672e+81004: 4.192e+101005: 8.417e+12...3513: 1.016e+7763514: 1.012e+7763515: 1.007e+7763516: 1.001e+7763517: 9.957e+7753518: 9.898e+775...5998: 500,5005999: 1,0006000: 1You can now roll events with a `Roller`&gt;&gt;&gt; events = dt.DiceTable.new().add_die(dt.Die(6))&gt;&gt;&gt; roller = dt.Roller(events)&gt;&gt;&gt; roller.roll() in [1, 2, 3, 4, 5, 6]TrueThat should get you started. For details see`&lt;http://dice-tables.readthedocs.io/en/latest/&gt;`_and the github repository at `&lt;https://github.com/eric-s-s/dice-tables&gt;`_---------ChangeLog---------v4.0.2------fixed bug in Parser.  Before `Parser().parse_die(&quot;Die(1, 2, 3)&quot;)` returned `Die(1)`.  Now, it raises a ParserError.`Parser().parse_die(&quot;ModDie(1, 2, modifier=3&quot;)` also raises `ParserError` as does not enough arguments.v4.0.0------**Breaking change again!**Revamped DicePools and the Parser.Dice Pools^^^^^^^^^^BestOfDicePool, WorstOfDicePool, UpperMidOfDicePool and LowerMidOfDicePool are now ProtoDiewrappers around a DicePool object.  :code:`DicePool(Die(6), 4)` is now a non-IntegerEventsobject. It is immutable and can get passed around to various DicePoolCollection objects whichare ProtoDie.  So now it is:&gt;&gt;&gt; import dicetables as dt&gt;&gt;&gt; pool = dt.DicePool(dt.Die(6), 4)&gt;&gt;&gt; best_of = dt.BestOfDicePool(pool=pool, select=3)&gt;&gt;&gt; worst_of = dt.BestOfDicePool(pool=pool, select=3)&gt;&gt;&gt; super_best_of = dt.BestOfDicePool(pool=pool, select=1)Parser^^^^^^The parser now takes a LimitChecker object.  This defaults to a NoOpLimitCheckerwhich doesn't check limits and there's a class method to make a parser with a usefullimit checker that is the same as the old behavior.  You can pass in your own limitchecker provided that it inherits from:code:`dicetables.tools.limit_checker.AbstractLimitChecker`.&gt;&gt;&gt; from dicetables import Parser, Die, LimitsError&gt;&gt;&gt; no_limit = Parser()&gt;&gt;&gt; Die(1000) == no_limit.parse_die(&quot;Die(1000)&quot;)True&gt;&gt;&gt; limited = Parser.with_limits()&gt;&gt;&gt; limited.parse_die(&quot;Die(1000)&quot;)Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;LimitsError: Max die_size: 500v3.0.0------Breaking change!  Python 2 is no longer supportedType hints have been added!v2.6.0------- added `Roller`.. _`The Dice` : http://dice-tables.readthedocs.io/en/latest/the_dice.html.. _`DicePool` : http://dice-tables.readthedocs.io/en/latest/the_dice.html#dice-poolsv2.5.0------- added `DicePool`_ die objects:    - `BestOfDicePool`    - `WorstOfDicePool`    - `UpperMidOfDicePool`    - `LowerMidOfDicePool`- `Parser().add_die_size_limit_kwarg` and `Parser().add_explosions_limit_kwarg` are removed. Use  `Parser().add_limits_kwarg`from v2.4.0 to v2.4.4---------------------- fixed error where `parse_die_within_limits` failed when using default values for dice.- `Parser` can parse strings with leading and trailing whitespaces.- `parse_die_within_limits` now raises `LimitsError`- added `max_power_for_commaed` option to `EventsCalculations.full_table_string`.- added `max_power_for_commaed` and `min_power_for_fixed_pt` to `EventsCalculations.stats_strings`.since v2.2.0------------- Improved ExplodingOn speed.- Added `parse_die_within_limits` function to parser. Also added limit values. Changed getters to properties.since v2.1.0------------- EventsCalculations added functions log10_points and log10_axes- New dice: Exploding(other_die, explosions=2), ExplodingOn(other_die, explodes_on, explosions=2)- see `The Dice`_. and  `Events info &lt;http://dice-tables.readthedocs.io/en/latest/events_info.html&gt;`_ for details- New object: `Parser &lt;http://dice-tables.readthedocs.io/en/latest/implementation_details/parser.html&gt;`_ -  It converts strings to dice objects.</longdescription>
</pkgmetadata>