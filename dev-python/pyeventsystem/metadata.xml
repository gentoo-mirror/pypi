<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://travis-ci.org/CloudVE/pyeventsystem.svg?branch=master   :target: https://travis-ci.org/CloudVE/pyeventsystem   :alt: build status.. image:: https://codecov.io/gh/CloudVE/pyeventsystem/branch/master/graph/badge.svg   :target: https://codecov.io/gh/CloudVE/pyeventsystem   :alt: coverage statuspyeventsystem=============pyeventsystem is an event-driven middleware library for Python. In addition toproviding a mechanism for subscribing and listening to events, it also providesa mechanism for intercepting functions, thus making it suitable for writingmiddleware. By intercepting functions, middleware can be injected before, afteror even replacing the original function. It also provides capabilities forgrouping related event handlers into middleware classes, making it easier tomanage installable middleware.Simple Example==============.. code-block:: python    from pyeventsystem.middleware import SimpleMiddlewareManager    from pyeventsystem.middleware import dispatch    from pyeventsystem.middleware import observe    class MyMiddleWare(object):        def __init__(self, event_dispatcher):            self.events = event_dispatcher        @dispatch(&quot;a.series.of.unfortunate.events&quot;, priority=2500)        def perform_villainy(self, name):            return &quot;Drop ACME Anvil on &quot; + name        @observe(&quot;a.series.of.unfortunate.events&quot;, priority=2400)        def pre_log_villainy(self, event_args, name):            print(&quot;Prepping for villainy: &quot; + name)        @observe(&quot;*.unfortunate.events&quot;, priority=2600)        def post_log_villainy(self, event_args, name):            print(&quot;Result of villainy: {0}&quot;.format(event_args['result']))    manager = SimpleMiddlewareManager()    myobj = MyMiddleWare(manager.events)    manager.add(myobj)    myobj.perform_villainy(&quot;RoadRunner&quot;)In this example, we have intercepted the `perform_villainy` function, andobserved the function both before and after execution.The output is:.. code-block:: console    Prepping for villainy: RoadRunner    Result of villainy: Drop ACME Anvil on RoadRunner</longdescription>
</pkgmetadata>