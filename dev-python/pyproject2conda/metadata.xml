<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- markdownlint-disable MD041 --&gt;[![Repo][repo-badge]][repo-link] [![Docs][docs-badge]][docs-link][![PyPI license][license-badge]][license-link][![PyPI version][pypi-badge]][pypi-link][![Conda (channel only)][conda-badge]][conda-link][![Code style: black][black-badge]][black-link]&lt;!--  For more badges, see  https://shields.io/category/other  https://naereen.github.io/badges/  [pypi-badge]: https://badge.fury.io/py/pyproject2conda--&gt;[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg[black-link]: https://github.com/psf/black[pypi-badge]: https://img.shields.io/pypi/v/pyproject2conda[pypi-link]: https://pypi.org/project/pyproject2conda[docs-badge]: https://img.shields.io/badge/docs-sphinx-informational[docs-link]: https://pages.nist.gov/pyproject2conda/[repo-badge]: https://img.shields.io/badge/--181717?logo=github&amp;logoColor=ffffff[repo-link]: https://github.com/wpk-nist-gov/pyproject2conda[conda-badge]: https://img.shields.io/conda/v/wpk-nist/pyproject2conda[conda-link]: https://anaconda.org/wpk-nist/pyproject2conda[license-badge]: https://img.shields.io/pypi/l/cmomy?color=informational[license-link]:  https://github.com/wpk-nist-gov/pyproject2conda/blob/main/LICENSE&lt;!-- other links --&gt;[poetry2conda]: https://github.com/dojeda/poetry2conda# `pyproject2conda`A script to convert `pyproject.toml` dependecies to `environemnt.yaml` files.## OverviewThe main goal of `pyproject2conda` is to provide a means to keep all basicdependency information, for both `pip` based and `conda` based environments, in`pyproject.toml`. I often use a mix of pip and conda when developing packages,and in my everyday workflow. Some packages just aren't available on both. If youuse poetry, I'd highly recommend [poetry2conda].## Features- Simple comment based syntax to add information to dependencies when creating  `environment.yaml`## StatusThis package is actively used by the author, but is still very much a work inprogress. Please feel free to create a pull request for wanted features andsuggestions!## Quick startUse one of the following```bashpip install pyproject2conda```or```bashconda install -c wpk-nist pyproject2conda```## Example usage### Basic usage&lt;!-- [[[cogimport subprocessimport shlexdef run_command(cmd, wrapper=&quot;bash&quot;, include_cmd=True):    args = shlex.split(cmd)    output = subprocess.check_output(args)    total = output.decode()    if include_cmd:        total = f&quot;$ {cmd}\n{total}&quot;    if wrapper:        total = f&quot;\n```{wrapper}\n&quot;  + total + &quot;```\n&quot;    print(total)def cat_lines(path=&quot;tests/test-pyproject.toml&quot;, begin=0, end=8, begin_dot=True, end_dot=True):    with open(path, 'r') as f:        lines = [line.rstrip() for line in f]    output = '\n'.join(lines[slice(begin, end)])    if begin_dot:        output = &quot;# ...\n&quot; +  output    if end_dot:        output = output + &quot;\n# ...&quot;    output = &quot;\n```toml\n&quot; + output + &quot;\n```\n&quot;    print(output)]]] --&gt;&lt;!-- [[[end]]] --&gt;Consider the `toml` file [test-pyproject.toml](./tests/test-pyproject.toml).&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=0, end=8, begin_dot=False)]]] --&gt;```toml[project]name = &quot;hello&quot;requires-python = &quot;&gt;=3.8,&lt;3.11&quot;dependencies = [    &quot;athing&quot;, # p2c: -p # a comment    &quot;bthing&quot;, # p2c: -s &quot;bthing-conda&quot;    &quot;cthing; python_version &lt; '3.10'&quot;, # p2c: -c conda-forge# ...```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;Note the comment lines `# p2c:...`. These are special tokens that`pyproject2conda` will analyze. The basic options are:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;&quot;&quot;python -c &quot;from pyproject2conda.parser import _default_parser; _default_parser().parse_args(['--help'])&quot; &quot;&quot;&quot;, include_cmd=False)]]] --&gt;```bashusage: -c [-h] [-c CHANNEL] [-p] [-s] [package ...]Parser searches for comments '# p2c: [OPTIONS]positional arguments:  packageoptions:  -h, --help            show this help message and exit  -c CHANNEL, --channel CHANNEL                        Channel to add to the pyproject requirement  -p, --pip             If specified, install dependency on pyproject                        dependency (on this line) with pip  -s, --skip            If specified skip pyproject dependency on this line```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;So, if we run the following, we get:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/test-pyproject.toml&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/test-pyproject.tomlchannels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;Note that other comments can be mixed in.By default, the python version is not included in the resulting conda output. Toinclude the specification from pyproject.toml, use `-p/--python` option:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/test-pyproject.toml --python-include&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/test-pyproject.toml --python-includechannels:  - conda-forgedependencies:  - python&gt;=3.8,&lt;3.11  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;To specify a specific value of python in the output, pass a value with:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/test-pyproject.toml --python-include python=3.9&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/test-pyproject.toml --python-include python=3.9channels:  - conda-forgedependencies:  - python=3.9  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;Note that this is for including python in the resulting environment file.You can also constrain packages by the python version using the standardpyproject.toml syntax `&quot;...; python_version &lt; 'some-version-number'&quot;`. For isparsed for for both the pip packages and conda packages:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/test-pyproject.toml --python-version 3.10&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/test-pyproject.toml --python-version 3.10channels:  - conda-forgedependencies:  - bthing-conda  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;### Installing extrasGiven the extra dependency:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=9, end=22)]]] --&gt;```toml# ...[project.optional-dependencies]test = [    &quot;pandas&quot;,    &quot;pytest&quot;, # p2c: -c conda-forge]dev-extras = [    # p2c: -s &quot;additional-thing; python_version &lt; '3.9'&quot; # this is an additional conda package    ## p2c: -s &quot;another-thing&quot; # this will be skipped because of ## before p2c.    &quot;matplotlib&quot;, # p2c: -s conda-matplotlib]# ...```&lt;!-- [[[end]]] --&gt;&lt;!-- markdownlint-restore --&gt;&lt;!-- prettier-ignore-end --&gt;and running the the following gives:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/test-pyproject.toml -e test&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/test-pyproject.toml -e testchannels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - pandas  - conda-forge::pytest  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;`pyproject2conda` also works with self referenced dependencies:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/test-pyproject.toml -e dev&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/test-pyproject.toml -e devchannels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - pandas  - conda-forge::pytest  - additional-thing  - conda-matplotlib  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;This also shows that `p2c` comments without dependencies are also parsed. Tocomment out such lines, make sure `p2c` is preceded by `##`.### Header in outputBy default, `pyproject2conda` includes a header in most output files to notethat the files are auto generated. No header is included by default when writingto standard output. To override this behavior, pass `--header/--noheader`:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/test-pyproject.toml --header&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/test-pyproject.toml --header## This file is autogenerated by pyrpoject2conda.# You should not manually edit this file.# Instead edit the corresponding pyproject.toml file.#channels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing```&lt;!-- [[[end]]] --&gt;### Usage within python`pyproject2conda` can also be used within python:```pycon&gt;&gt;&gt; from pyproject2conda import PyProject2Conda&gt;&gt;&gt; p = PyProject2Conda.from_path(&quot;./tests/test-pyproject.toml&quot;)# Basic environment&gt;&gt;&gt; print(p.to_conda_yaml(python_include=&quot;get&quot;).strip())channels:  - conda-forgedependencies:  - python&gt;=3.8,&lt;3.11  - bthing-conda  - conda-forge::cthing  - pip  - pip:      - athing# Environment with extras&gt;&gt;&gt; print(p.to_conda_yaml(extras=&quot;test&quot;).strip())channels:  - conda-forgedependencies:  - bthing-conda  - conda-forge::cthing  - pandas  - conda-forge::pytest  - pip  - pip:      - athing```### Configuration`pyproject2conda` can be configured with a `[tool.pyproject2conda]` section in`pyproject.toml`. To specify conda channels use:&lt;!-- prettier-ignore-start --&gt;&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=28, end=None)]]] --&gt;```toml# ...][tool.pyproject2conda]channels = ['conda-forge']# ...```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;Note that specifying channels at the comand line overrides`tool.pyproject2conda.channels`.You can also specify environments without the base dependencies (those under`project.dependencies`) by passing the `--no-base` flag. This is useful fordefining environments for build, etc, that do not require the package beinstalled. For example:&lt;!-- prettier-ignore-start --&gt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog cat_lines(begin=22, end=26)]]] --&gt;```toml# ...dev = [&quot;hello[test]&quot;, &quot;hello[dev-extras]&quot;]dist-pypi = [    # this is intended to be parsed with --no-base option    &quot;setuptools&quot;,# ...```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;These can be accessed using either of the following:&lt;!-- markdownlint-disable-next-line MD013 --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml -f tests/test-pyproject.toml -e dist-pypi --no-base&quot;)]]] --&gt;```bash$ pyproject2conda yaml -f tests/test-pyproject.toml -e dist-pypi --no-basechannels:  - conda-forgedependencies:  - setuptools  - pip  - pip:      - build```&lt;!-- [[[end]]] --&gt;or```pycon&gt;&gt;&gt; from pyproject2conda import PyProject2Conda&gt;&gt;&gt; p = PyProject2Conda.from_path(&quot;./tests/test-pyproject.toml&quot;)# Basic environment&gt;&gt;&gt; print(p.to_conda_yaml(extras='dist-pypi', include_base_dependencies=False).strip())channels:  - conda-forgedependencies:  - setuptools  - pip  - pip:      - build```### CLI options&lt;!-- prettier-ignore-start --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda --help&quot;)]]] --&gt;```bash$ pyproject2conda --helpUsage: pyproject2conda [OPTIONS] COMMAND [ARGS]...Options:  --help  Show this message and exit.Commands:  conda-requirements  Create requirement files for conda and pip.  json                Create json representation.  list                List available extras  requirements        Create requirements.txt for pip depedencies.  yaml                Create yaml file from dependencies and...```&lt;!-- [[[end]]] --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda list --help&quot;)]]] --&gt;```bash$ pyproject2conda list --helpUsage: pyproject2conda list [OPTIONS]  List available extrasOptions:  -f, --file PATH  input pyproject.toml file  -v, --verbose  --help           Show this message and exit.```&lt;!-- [[[end]]] --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda yaml --help&quot;)]]] --&gt;```bash$ pyproject2conda yaml --helpUsage: pyproject2conda yaml [OPTIONS]  Create yaml file from dependencies and optional-dependencies.Options:  -e, --extra TEXT        Extra depenedencies. Can specify multiple times for                          multiple extras.  -c, --channel TEXT      conda channel.  Can specify. Overrides                          [tool.pyproject2conda.channels]  -f, --file PATH         input pyproject.toml file  -n, --name TEXT         Name of conda env  -o, --output PATH       File to output results  --python-include TEXT   If flag passed without options, include python spec                          from pyproject.toml in yaml output.  If value                          passed, use this value (exactly) in the output. So,                          for example, pass `--python-include &quot;python=3.8&quot;`  --python-version TEXT   Python version to check `python_verion &lt;=&gt;                          {python_version}` lines against.  That is, this                          version is used to limit packages in resulting                          output. For example, if have a line like                          `a-package; python_version &lt; '3.9'`, Using                          `--python-version 3.10` will not include                          `a-package`, while `--python-version 3.8` will                          include `a-package`.  --base / --no-base      Default is to include base (project.dependencies)                          with extras. However, passing `--no-base` will                          exclude base dependencies. This is useful to define                          environments that should exclude base dependencies                          (like build, etc) in pyproject.toml.  --header / --no-header  If True (--header) include header line in output.                          Default is to include the header for output to a                          file, and not to include header when writing to                          stdout.  --help                  Show this message and exit.```&lt;!-- [[[end]]] --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda requirements --help&quot;)]]] --&gt;```bash$ pyproject2conda requirements --helpUsage: pyproject2conda requirements [OPTIONS]  Create requirements.txt for pip depedencies.Options:  -e, --extra TEXT        Extra depenedencies. Can specify multiple times for                          multiple extras.  -f, --file PATH         input pyproject.toml file  -o, --output PATH       File to output results  --base / --no-base      Default is to include base (project.dependencies)                          with extras. However, passing `--no-base` will                          exclude base dependencies. This is useful to define                          environments that should exclude base dependencies                          (like build, etc) in pyproject.toml.  --header / --no-header  If True (--header) include header line in output.                          Default is to include the header for output to a                          file, and not to include header when writing to                          stdout.  --help                  Show this message and exit.```&lt;!-- [[[end]]] --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda conda-requirements --help&quot;)]]] --&gt;```bash$ pyproject2conda conda-requirements --helpUsage: pyproject2conda conda-requirements [OPTIONS] [PATH_CONDA] [PATH_PIP]  Create requirement files for conda and pip.  These can be install with, for example,  conda install --file {path_conda} pip install -r {path_pip}Options:  -e, --extra TEXT        Extra depenedencies. Can specify multiple times for                          multiple extras.  --python-include TEXT   If flag passed without options, include python spec                          from pyproject.toml in yaml output.  If value                          passed, use this value (exactly) in the output. So,                          for example, pass `--python-include &quot;python=3.8&quot;`  --python-version TEXT   Python version to check `python_verion &lt;=&gt;                          {python_version}` lines against.  That is, this                          version is used to limit packages in resulting                          output. For example, if have a line like                          `a-package; python_version &lt; '3.9'`, Using                          `--python-version 3.10` will not include                          `a-package`, while `--python-version 3.8` will                          include `a-package`.  -c, --channel TEXT      conda channel.  Can specify. Overrides                          [tool.pyproject2conda.channels]  -f, --file PATH         input pyproject.toml file  --base / --no-base      Default is to include base (project.dependencies)                          with extras. However, passing `--no-base` will                          exclude base dependencies. This is useful to define                          environments that should exclude base dependencies                          (like build, etc) in pyproject.toml.  --header / --no-header  If True (--header) include header line in output.                          Default is to include the header for output to a                          file, and not to include header when writing to                          stdout.  --prefix TEXT           set conda-output=prefix + 'conda.txt', pip-                          output=prefix + 'pip.txt'  --prepend-channel  --help                  Show this message and exit.```&lt;!-- [[[end]]] --&gt;&lt;!-- [[[cog run_command(&quot;pyproject2conda json --help&quot;)]]] --&gt;```bash$ pyproject2conda json --helpUsage: pyproject2conda json [OPTIONS]  Create json representation.  Keys are: &quot;dependencies&quot;: conda dependencies. &quot;pip&quot;: pip dependencies.  &quot;channels&quot;: conda channels.Options:  -e, --extra TEXT       Extra depenedencies. Can specify multiple times for                         multiple extras.  --python-include TEXT  If flag passed without options, include python spec                         from pyproject.toml in yaml output.  If value passed,                         use this value (exactly) in the output. So, for                         example, pass `--python-include &quot;python=3.8&quot;`  --python-version TEXT  Python version to check `python_verion &lt;=&gt;                         {python_version}` lines against.  That is, this                         version is used to limit packages in resulting                         output. For example, if have a line like                         `a-package; python_version &lt; '3.9'`, Using `--python-                         version 3.10` will not include `a-package`, while                         `--python-version 3.8` will include `a-package`.  -c, --channel TEXT     conda channel.  Can specify. Overrides                         [tool.pyproject2conda.channels]  -f, --file PATH        input pyproject.toml file  -o, --output PATH      File to output results  --base / --no-base     Default is to include base (project.dependencies)                         with extras. However, passing `--no-base` will                         exclude base dependencies. This is useful to define                         environments that should exclude base dependencies                         (like build, etc) in pyproject.toml.  --help                 Show this message and exit.```&lt;!-- [[[end]]] --&gt;&lt;!-- prettier-ignore-end --&gt;&lt;!-- end-docs --&gt;&lt;!-- ## Documentation --&gt;&lt;!-- See the [documentation][docs-link] for a look at --&gt;&lt;!-- `pyproject2conda` in action. --&gt;## LicenseThis is free software. See [LICENSE][license-link].## Related workTBD## ContactThe author can be reached at wpk@nist.gov.## CreditsThis package was created with[Cookiecutter](https://github.com/audreyr/cookiecutter) and the[wpk-nist-gov/cookiecutter-pypackage](https://github.com/wpk-nist-gov/cookiecutter-pypackage)Project template forked from[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage).# ChangelogChangelog for `pyproject2conda`## UnreleasedSee the fragment files in[changelog.d](https://github.com/wpk-nist-gov/pyproject2conda)&lt;!-- scriv-insert-here --&gt;This software was developed by employees of the National Institute of Standardsand Technology (NIST), an agency of the Federal Government. Pursuant to title 17United States Code Section 105, works of NIST employees are not subject tocopyright protection in the United States and are considered to be in the publicdomain. Permission to freely use, copy, modify, and distribute this software andits documentation without fee is hereby granted, provided that this notice anddisclaimer of warranty appears in all copies.THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHEREXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTYTHAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM FROMINFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO THESOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE. IN NO EVENTSHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DIRECT,INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, ORIN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT BASED UPON WARRANTY,CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS SUSTAINED BY PERSONS ORPROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUTOF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.Distributions of NIST software should also include copyright and licensingstatements of any third-party software that are legally bundled with the code incompliance with the conditions of those licenses.</longdescription>
</pkgmetadata>