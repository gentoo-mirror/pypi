<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Welcome to django-listable's documentation!###########################################.. image:: https://travis-ci.org/randlet/django-listable.svg?branch=master    :target: https://travis-ci.org/randlet/django-listable=====About=====Listable is a Django package to make the integration of your Djangomodels with `Datatables.js &lt;https://datatables.net/&gt;`_ easy.Django-listable was motivated by my repeated need to generate sortableand filterable tables from my Django models for CRUD apps.The idea is that you should easily be able to go from a model like this::    class Staff(models.Model):        first_name = models.CharField(max_length=255, help_text=_(&quot;Enter the name of the staff being rounded&quot;))        last_name = models.CharField(max_length=255, help_text=_(&quot;Enter the name of the staff being rounded&quot;))        active = models.CharField(max_length=10, choices = ACTIVE_CHOICES)        position = models.ForeignKey(Position)        department = models.ForeignKey(Department)        limit = models.Q(app_label='staff', model='genericmodela') | models.Q(app_label='staff', model='genericmodelb')        content_type = models.ForeignKey(ContentType, limit_choices_to=limit)        object_id = models.PositiveIntegerField()        generic_object = generic.GenericForeignKey(&quot;content_type&quot;, &quot;object_id&quot;)to a filterable/orderable table in a template like this with as little code as possible:.. image:: docs/_static/staff_table.pngThere are a couple of other similar projects worth checking out to see if they fit yourneeds better:- `django-datatables-view &lt;https://pypi.python.org/pypi/django-datatables-view&gt;`_- `django-datatables &lt;https://pypi.python.org/pypi/django-datatables&gt;`_- `django-eztables &lt;https://github.com/noirbizarre/django-eztables&gt;`_============Installation============    $ pip install django-listable========Settings========Listable currently has 4 settings you can configure to be usedas default values for your table (they can be overriden in the listable template tag).*LISTABLE_DOM*Default datatables sDOM parameter to use. By default listable uses the Bootstrap 3 dom below.::    # bootstrap 2    # LISTABLE_DOM = '&lt;&quot;row-fluid&quot;&lt;&quot;span6&quot;ir&gt;&lt;&quot;span6&quot;p&gt;&gt;rt&lt;&quot;row-fluid&quot;&lt;&quot;span12&quot;lp&gt;&gt;'    #boostrap 3    LISTABLE_DOM =  '&lt;&quot;row&quot;&lt;&quot;col-sm-6&quot;i&gt;&lt;&quot;col-sm-6&quot;rp&gt;&gt;rt&lt;&quot;row&quot;&lt;&quot;col-sm-12&quot;lp&gt;&gt;'*LISTABLE_PAGINATION_TYPE* ::    # pagination types -&gt; bootstrap2, bootstrap3, two_button, full_numbers    LISTABLE_PAGINATION_TYPE = &quot;full_numbers&quot;*LISTABLE_STATE_SAVE*Enable sticky filters by default.::    LISTABLE_STATE_SAVE = True*LISTABLE_PAGINATE_BY*Default page size.::    LISTABLE_PAGINATE_BY = 10=====Usage=====There's four steps to using django-listable1. Including `listable` in your settings.INSTALLED_APPS2. Create a view by subclassing listable.views.BaseListableView3. Connect the view to a url pattern in your apps urls.py4. Include the `listable` template tag in a templateThese steps will demonstrated below assuming we havea Django application called staff and we want to create a page on oursite with a list of staff and the department and business they belong to.with the following models defined::    class Business(models.Model):        name = models.CharField(max_length=255)    class Department(models.Model):        name = models.CharField(max_length=255)        business = models.ForeignKey(Business)    class Staff(models.Model):        first_name = models.CharField(max_length=255, help_text=_(&quot;Enter the name of the staff being rounded&quot;))        last_name = models.CharField(max_length=255, help_text=_(&quot;Enter the name of the staff being rounded&quot;))        active = models.CharField(max_length=10, choices = ACTIVE_CHOICES)        department = models.ForeignKey(Department)        def name(self):            return &quot;%s, %s&quot; % (self.last_name, self.first_name)        def status(self):            return self.get_active_display()A full functional example can be found in the demo app included withdjango-listable.Adding `listable` to settings.INSTALLED_APPS--------------------------------------------To start using django-listable add `listable` to your INSTALLED_APPS::    INSTALLED_APPS = (        'django.contrib.auth',        'django.contrib.contenttypes',        'django.contrib.sessions',        'django.contrib.sites',        'django.contrib.messages',        'django.contrib.staticfiles',        'django.contrib.admin',        'staff',        'listable',        ...    )Defining a Listable view------------------------To define a `listable` view, sublcass `listable.views.BaseListableView`and set the model  that is to be used as the source of data::    from listable.views import BaseListableView    from models import Staff    class StaffList(BaseListableView):        model = models.Staff        ...Defining Columns for your table^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Every `listable` view must define one or more fields to be displayed as columns in the table.`listable` fields are defined in a manner similar to ModelForms::    class StaffList(BaseListableView):        model = models.Staff        fields = (...)        widgets = {...} # optional        search_fields = {...} # optional        order_fields = {...} # optional        headers = {...} # optional        select_related = (...) # optional        prefetch_related = (...) # optional*fields*Fields defines an iterable of the columns that you want to display in the table,these fields can either be fields on your model, foreign key lookups, the nameof a callable on your view, the name of a callable on your model or the result of an *extra*query.*widgets*Widgets is a dictionary mapping a field to a search widget type. Currently you can useeither text (default) or select inputs. For example::    from listable.views import BaseListableView, SELECT    from . import models    class StaffList(BaseListableView):        model = models.Staff        fields = (&quot;id&quot;, &quot;name&quot;, &quot;active&quot;, &quot;department__name&quot;,)        widgets = {            &quot;department__name&quot;: SELECT,            &quot;active&quot;: SELECT,        }The choices available in a select widget are currently automaticallypopulated although this will change to allow manual configuration of choicesin the future. The choices are populated based on either the `choices` optionfor a model field or in the case of a foreign key all the values of the foreignkey lookup. (*I hope to make this more flexible in the future*)*search_fields (optional)*Search fields are a mapping of field names to the django filter syntax that shouldbe used for searching the table.  This can either be a string, an iterable ofstrings or a falsy value to disable searching on that field.  For example::    search_fields = {        &quot;name&quot;: (&quot;first_name__icontains&quot;, &quot;last_name__icontains&quot;,),        &quot;last_name&quot;: &quot;last_name__exact&quot;,        &quot;genericname&quot;: &quot;genericname__icontains&quot;,        &quot;department__name&quot;: False,    }if a field is not declared in search_field's it a filter using `icontains` is assumed. *loose_text_search*If set to True, will split search terms. E.g. &quot;Sm ti&quot; will return an object with field value of &quot;Small Ticket&quot;.This is very similar to how Django's admin backend does its searches. Be default, the value is False for backwardcompatibility.*order_fields (optional)*Order fields allows you to define how a column should be ordered (similar toDjango's ordering or order_by).  For example::    order_fields = {        &quot;name&quot;: (&quot;last_name&quot;, &quot;first_name&quot;,),    }*headers (optional)*Headers is a mapping of field names to the column name to be displayed. For example by defaulta field name of `department__business__name` would be converted to &quot;Department Business Name&quot; but thatcould be overriden like so::    headers = {        &quot;department__business__name&quot;: _(&quot;Business&quot;),    }*select_related*Allows you to use Django's queryset select_related option for reducing database queries. e.g::    select_related = (&quot;department&quot;, &quot;position&quot;, &quot;department__business&quot;,)*prefetch_related*Allows you to use Django's queryset prefetch_related option for reducing database queries. e.g::    prefetch_related = (&quot;some_fk__some_field&quot;,)*get_extra**Due to a bug with pagination, using an extra query will result in your entire table being loaded into memory beforebeing paginated :(*You may define a callable `get_extra` method on your view that should return a dictionary suitablefor use in the Django queryset's `extra` method.  For example::    def get_extra(self):        return {select: {'is_recent': &quot;pub_date &gt; '2006-01-01'&quot;}}A more complex example is given in the &quot;Complete Example&quot; sample below.Formatting fields^^^^^^^^^^^^^^^^^The order in which `listable` tries to find a method for formatting a field for display is as follows:1. A method on the actual view::    class StaffList(BaseListableView):        model = models.Staff        fields = (..., &quot;name&quot;,...)        def name(self, staff):            return staff.name()2. A `get_{field}_display` callable on the model.3. A callable on the model::    class Staff(Model):        ...        def staff_name(self):            return &quot;{0} {1}&quot;.format(self.first_name, self.last_name)    class StaffList(BaseListableView):        model = models.Staff        fields = (..., &quot;staff_name&quot;,...)4. A field on the model.A `listable` column is defined using the `listable.views.Column` data structure.A `Column` is essentially a namedtuple with the following fields (detailed descriptions below):Including the `listable` template tag in a template---------------------------------------------------To include `listable` in your templates you need to load the `listable` templatetags and include the `listable_css`, a placeholder for the listable tableand the listable tag which tells the template the name of the view to wire the table to.::    {% extends 'base.html' %}    {% load listable %}    {% block extra_css %}        {% listable_css %}    {% endblock extra_css %}    {% block content %}        {{listable_table}}    {% endblock %}    {% block extra_js %}    {% listable 'staff-list'%}    {% endblock extra_js %}with the example above requiring a url something like::    urlpatterns = patterns('',        url('staff-list/$', views.StaffList.as_view(), name=&quot;staff-list&quot;),    )Arguments to the listable tag^^^^^^^^^^^^^^^^^^^^^^^^^^^^^The listable tag currently has 1 required argument and five optional keyword args.A full example of the listable template tag looks like::    {% listable 'staff-list' dom=&quot;&quot;, save_state=False, pagination_type=&quot;&quot;, css_table_class=&quot;&quot;, css_input_class=&quot;&quot; %}*dom*Overrides the default Datatables sDOM parameter to use. ::    {% listable 'staff-list' dom='&lt;&quot;row-fluid&quot;&lt;&quot;span6&quot;ir&gt;&lt;&quot;span6&quot;p&gt;&gt;rt&lt;&quot;row-fluid&quot;&lt;&quot;span12&quot;lp&gt;&gt;' %}*pagination_type*Overrides the default Datatables sDOM parameter to use. ::    {% listable 'staff-list' pagination_type='bootstrap3' %}*save_state*Save state enables/disables sticky filters in `DataTables &lt;Datahttp://www.datatables.net/examples/basic_init/state_save.html&gt;`_.::    {% listable 'staff-list' save_state=False %}*css_table_class*Add a css class to your datatables table e.g.::    {% listable 'staff-list' css_table_class=&quot;striped compact&quot; %}*css_input_class*Add a css class to the datatables column filter inputs e.g.::    {% listable 'staff-list' css_table_class=&quot;input-sm&quot; %}==================A Complete Example==================This is a complete example of a `django-listable` table. It is includedas a demo app under the django-listable/listable-demo/models.py---------::    ACTIVE = 'active'    INACTIVE = 'inactive'    TERMINATED = 'terminated'    ACTIVE_CHOICES = (        (ACTIVE, &quot;Active&quot;),        (INACTIVE, &quot;Inactive&quot;),        (TERMINATED, &quot;Terminated&quot;),    )    ACTIVE_CHOICES_DISPLAY = dict(ACTIVE_CHOICES)    class Business(models.Model):        name = models.CharField(max_length=255)        business_type = models.IntegerField(choices=zip(range(5), range(5)), default=1)        class Meta:            verbose_name_plural = &quot;Businesses&quot;        def __unicode__(self):            return self.name    class Department(models.Model):        name = models.CharField(max_length=255)        business = models.ForeignKey(Business)        def __unicode__(self):            return self.name    class Position(models.Model):        name = models.CharField(max_length=255)        def __unicode__(self):            return self.name    class AbstractGeneric(models.Model):        name = models.CharField(max_length=255)        description = models.TextField()        staff = generic.GenericRelation(            &quot;Staff&quot;,            content_type_field=&quot;content_type&quot;,            object_id_field=&quot;object_id&quot;,        )        class Meta:            abstract = True    class GenericModelA(AbstractGeneric):        class Meta:            verbose_name_plural = &quot;Generic Model A's&quot;        def __unicode__(self):            return self.name    class GenericModelB(AbstractGeneric):        class Meta:            verbose_name_plural = &quot;Generic Model B's&quot;        def __unicode__(self):            return self.name    class Staff(models.Model):        first_name = models.CharField(max_length=255, help_text=_(&quot;Enter the name of the staff being rounded&quot;))        last_name = models.CharField(max_length=255, help_text=_(&quot;Enter the name of the staff being rounded&quot;))        active = models.CharField(max_length=10, choices=ACTIVE_CHOICES)        position = models.ForeignKey(Position)        department = models.ForeignKey(Department)        limit = models.Q(app_label='staff', model='genericmodela') | models.Q(app_label='staff', model='genericmodelb')        content_type = models.ForeignKey(ContentType, limit_choices_to=limit)        object_id = models.PositiveIntegerField()        generic_object = generic.GenericForeignKey(&quot;content_type&quot;, &quot;object_id&quot;)        class Meta:            verbose_name_plural = &quot;staff&quot;            ordering = (&quot;last_name&quot;, &quot;first_name&quot;,)        def name(self):            return &quot;%s, %s&quot; % (self.last_name, self.first_name)        def status(self):            return ACTIVE_CHOICES_DISPLAY[self.active]        def __unicode__(self):            return self.name()views.py--------::    class StaffList(BaseListableView):        model = models.Staff        fields = (            &quot;id&quot;,            &quot;name&quot;,            &quot;active&quot;,            &quot;department__name&quot;,            &quot;position__name&quot;,            &quot;department__business__name&quot;,            &quot;department__business__business_type&quot;,            &quot;genericname&quot;,        )        widgets = {            &quot;department__business__name&quot;: SELECT,            &quot;department__business__business_type&quot;: SELECT,            &quot;position__name&quot;: SELECT,            &quot;choices&quot;: SELECT,            &quot;active&quot;: SELECT,        }        search_fields = {            &quot;name&quot;: (&quot;first_name__icontains&quot;, &quot;last_name__icontains&quot;,),            &quot;last_name&quot;: &quot;last_name__exact&quot;,            &quot;genericname&quot;: &quot;genericname__icontains&quot;,            &quot;department__name&quot;: &quot;department__name__icontains&quot;,        }        order_fields = {            &quot;name&quot;: (&quot;last_name&quot;, &quot;first_name&quot;,),        }        headers = {            &quot;position__name&quot;: _(&quot;Position&quot;),            &quot;department__business__name&quot;: _(&quot;Business&quot;),            &quot;department__business__business_type&quot;: _(&quot;Business Type&quot;),        }        select_related = (&quot;department&quot;, &quot;position&quot;, &quot;department__business&quot;,)        def generic(self, obj):            return obj.generic_object.name        def name(self, staff):            return staff.name()        def get_extra(self):            cta = ContentType.objects.get_for_model(models.GenericModelA)            ctb = ContentType.objects.get_for_model(models.GenericModelB)            extraq = &quot;&quot;&quot;            CASE                WHEN content_type_id = {0}                    THEN (SELECT name from staff_genericmodela WHERE object_id = staff_genericmodela.id)                WHEN content_type_id = {1}                    THEN (SELECT name from staff_genericmodelb WHERE object_id = staff_genericmodelb.id)            END            &quot;&quot;&quot;.format(cta.pk, ctb.pk)            return {&quot;select&quot;: {'genericname': extraq}}staff_list.html---------------::    {% extends 'base.html' %}    {% load listable %}    {% block extra_css %}        {% listable_css %}    {% endblock extra_css %}    {% block content %}        {{listable_table}}    {% endblock %}    {% block extra_js %}    {% listable 'staff-list' save_state=True %}    {% endblock extra_js %}=======History=======0.8.1 (2023-05-25)------------------* In order to allow ``|`` characters in searches, the search term separator for  multi selects has been updated to use ```|``` which is a 3 character sequence  unlikely to apply in normal searches.0.8.0 (2023-04-18)------------------* Added a loose_text_search setting to views.  Set ``loose_text_search = True``  on your view to enable partial matching in your text searches. For example  &quot;Fo Ba&quot; will match &quot;Foo Bar&quot;.0.7.0 (2023-02-24)------------------* Listable for Django 3.20.6.0 (2021-10-07)------------------* Add field names to column headers as data attributes* Add columnSearch to Listable context object0.5.2 (2021-08-20)------------------* Fix issue with encoding of search filters0.5.1 (2021-06-15)------------------* wrap datatables css/scripts in function so static is not called at import0.5.0 (2021-02-03)------------------* Fixed a same site cookie issue* Fixed a bug where select dropdowns were being truncated by bottom of page* Added a get_fields method to set fields dynamically* Fix an issue with incorrect timezones* Add support for Django 2-0.4.3 (2017-05-11)------------------Fix values_to_dt to allow unicode0.4.1 (2016-10-14)------------------Add fix for when using FORCE_SCRIPT_NAME setting0.4.0 (2016-10-02)------------------Update to support Django 1.8-1.10 and Python 2.7-3.50.3.10 (2016-11-08)-------------------Cast search term to lower case if case insensitive search requested to alloweasier filtering with extra queries.0.3.9 (2016-09-27)------------------Fix formatting bug introduced by 0.3.80.3.8 (2016-09-27)------------------Fix unicode encoding error0.3.7 (2016-08-25)------------------Add date range picker0.3.6 (2016-06-29)------------------Add multi select and date select widgets (thanks to @ryanbottema)0.3.5 (2016-06-22)------------------Fix filtering and count queries for django-mssql0.3.3 (2015-04-12)------------------* Fix filtering of None values for SELECT fields0.3.1 (2015-02-25)------------------* Fix issue with boolean field filtering0.2.10 (2014-12-16)-------------------* Fix issue with pagination type0.2.9 (2014-12-15)------------------* Fix issue with namespaced urls0.2.6 (2014-10-30)------------------* add view args &amp; kwargs to context to allow full reverse0.2.5 (2014-10-30)------------------* fix order_by0.2.0 (2014-10-29)------------------* Complete overhaul of api0.1.2 (2014-07-09)------------------* Fix saveState bug0.1.0 (2013-08-15)------------------* First release on PyPI.</longdescription>
</pkgmetadata>