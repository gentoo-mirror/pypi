<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fsmlog[![Upload Python Package](https://github.com/Parsa2820/fsmlog/actions/workflows/python-publish.yml/badge.svg)](https://github.com/Parsa2820/fsmlog/actions/workflows/python-publish.yml)A tool for converting finite state machine to verilog codeEmbedded Systems Course Optional Assignment - Spring 2023Parsa Mohammadian - 98102284## Table of Contents- [Installation](#installation)- [Usage](#usage)    - [Validate](#validate)    - [Convert](#convert)- [Specifications](#specifications)- [Technical Details](#technical-details)- [Example](#example)## InstallationFrom pypi:```bashpip install fsmlog```From source:```bashmake install```## Usage&gt; You can use `--help` to get more information about the usage of each command.The tool consists of two commands: `validate` and `convert`.### ValidateThe `validate` command is used to validate the input file. It will check if the input file is a valid finite state machine according to the tool's [specifications](#specifications). It takes one argument: the path to the input file.### ConvertThe `convert` command is used to convert the input file to verilog code. It takes two arguments: the path to the input file and the path to the output file. If the output file is not specified, the output will be printed to the console.## SpecificationsThe input file must be a valid json file with the following structure:```json{    &quot;inputs&quot;: [],    &quot;outputs&quot;: [],    &quot;states&quot;: [],    &quot;initial_state&quot;: &quot;&quot;,}```The `inputs` and `outputs` fields are lists of registers. Each register has the following structure:```json{    &quot;name&quot;: &quot;&quot;,    &quot;length&quot;: 0}```The `states` field is a list of states. Each state has the following structure:```json{    &quot;name&quot;: &quot;&quot;,    &quot;transitions&quot;: [],    &quot;outputs&quot;: {}}```The `outputs` field is just key-value pairs of the output registers. The `transitions` field is a list of transitions. Each transition has the following structure:```json{    &quot;destination&quot;: &quot;&quot;,    &quot;condition&quot;: &quot;&quot;}```The `condition` field must be a valid verilog boolean expression.&gt; Valid input file examples can be found in the [example](example) directory.## Technical DetailsThe tool uses [jinja2](https://jinja.palletsprojects.com/en/3.0.x/) to generate the verilog code. The `template.v` file can be found in the [src](src) directory. This template can be populated with the `FiniteStateMachine` object named `fsm`. The `FiniteStateMachine` object is created from the input file using the `FiniteStateMachine.from_json` method. The `FiniteStateMachine` class has similar attributes to the input file's structure. The `FiniteStateMachine` class can be found in the [src/model/fsm.py](src/model/fsm.py) file.## ExampleConsider the following finite state machine:![air-conditioning](example/air-conditioning.png)We can encode this finite state machine as specified in [specifications](#specifications). The encoded file can be found in the [example](example) directory. The file is named `air-conditioning.json`.The following command will validate the input file:```bashfsmlog validate example/air-conditioning.json``````FSM example/air-conditioning.json is valid```Now we can convert the input file to verilog code:```bashfsmlog convert example/air-conditioning.json --output example/air-conditioning.v```The generated verilog code can be found in the [example](example) directory. The file is named `air-conditioning.v`.The resulting verilog code can be both simulated and synthesized.</longdescription>
</pkgmetadata>