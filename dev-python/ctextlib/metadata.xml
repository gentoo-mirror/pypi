<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CText# Advanced text processing library in C++ and Python ## AboutA Modern C++ library with many useful text processing routines. CText can solve some complicated text processing tasks that otherwise are taking too much time in C++ and Python, some of these like managing lines and words are available on higher level languages like C#, Java and Python but not in C++. But C++ gives more low-level control, except supporting the missing text functions CText implements optimized text routines. Library is very flexible and scalale, it is easy to add quickly custom text processing routnes, can be used to make  pre-processing problems for different NLP and ML tasks or just to practice Modern C++. ## Main Features* **Modern C++ Template library**: You only need to include one header, very simple to use.* **Unicode Support**: - you can have both UNICODE and ANSI in one project.* **Hundreds of optimized text processing methods**: - Many standard and non-standard text processing operations are covered. I have a long TODO list with much more to add. * **Clean and easy to understand code**: - You can use CText to quickly start more complicated text processing applications and abstracting from the too many lower level details and optimizations.* **Portable**:  I am using CText with VS2017/VS2019 and GCC 7.4 but it easily can be ported to other platforms.* **Stand alone**:  CText do not depends on any other libraries, the only requirements are C++11 and STL* **Scalable**:  All text routines are easily to be further extended for all commonly supported char types and platforms. * **Python**:  Support of all Python versions Please feel free to contact me for questions or suggestions.### PythonTo install CText:```pip install ctextlib```To test if CText iis installed:```pythonimport ctextliba = ctextlib.Text(&quot;Hello World&quot;)print(a)```Or:```pythonfrom ctextlib import Text as texta = text(&quot;Hello World&quot;)print(a)```Python methods reference:&lt;b&gt;addToFileName&lt;/b&gt;```pythona = text(&quot;C:\\Temp\\Temp2\\File.bmp&quot;)a.addToFileName(&quot;_mask&quot;)print(a)``````C:\Temp\Temp2\File_mask.bmp```&lt;b&gt;append&lt;/b&gt;```pythona = text(&quot;Hello &quot;)a.append(&quot;World&quot;)``````Hello World``````pythona = text(&quot;123&quot;)a.append('4',4)``````1234444``````pythona = text(&quot;&quot;)a.append(['Hello', ' ', 'World'])``````Hello World```&lt;b&gt;appendRange&lt;/b&gt;```pythona = text()a.appendRange('a','z').appendRange('0','9')``````abcdefghijklmnopqrstuvwxyz0123456789```&lt;b&gt;between&lt;/b&gt;```pythona = text('The quick brown fox jumps over the lazy dog')a.between('q','d')print(a)``````uick brown fox jumps over the lazy``````pythona = text('The quick brown fox jumps over the lazy dog')a.between('quick','lazy')print(a)`````` brown fox jumps over the```&lt;b&gt;contain&lt;/b&gt;```pythona = text('The quick brown fox jumps over the lazy dog')if a.contain('quick') :    print(&quot;contain 'quick'&quot;)``````contain 'quick'```Case-incensitive```pythona = text('The quick brown fox jumps over the lazy dog')if a.contain('Quick', False) :    print(&quot;contain 'quick'&quot;)``````contain 'quick'``````pythona = text('The quick brown fox jumps over the lazy dog')if a.contain(['slow','fast','quick']):    print(&quot;contain 'quick'&quot;)``````contain 'quick'```&lt;b&gt;containAny&lt;/b&gt;```pythona = text('Hello World')a.containAny('abcd')True```&lt;b&gt;containOnly&lt;/b&gt;```pythona = text('4365767')a.containOnly('0123456789')True```&lt;b&gt;count&lt;/b&gt;```pythona = text('The quick brown fox jumps over the lazy dog')a.count('the', False)``````2```&lt;b&gt;countWordFrequencies&lt;/b&gt;```pythonfrom ctextlib import Text as texta = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.countWordFrequencies(False)``````[(2, 'the'), (1, 'brown'), (1, 'dog'), (1, 'fox'), (1, 'jumps'), (1, 'lazy'), (1, 'over'), (1, 'quick')]```&lt;b&gt;cutAfterFirst&lt;/b&gt;```pythons = text('The quick brown fox jumps over the lazy dog')a.cutAfterFirst('o')``````The quick br```&lt;b&gt;cutAfterLast&lt;/b&gt;```pythons = text('The quick brown fox jumps over the lazy dog')a.cutAfterLast('o')``````The quick brown fox jumps over the lazy d```&lt;b&gt;cutBeforeFirst&lt;/b&gt;```pythons = text('The quick brown fox jumps over the lazy dog')a.cutBeforeFirst('o')``````own fox jumps over the lazy dog```&lt;b&gt;cutEnds&lt;/b&gt;```pythons = text('The quick brown fox jumps over the lazy dog')a.cutEnds(4)``````quick brown fox jumps over the lazy```&lt;b&gt;cutLeft&lt;/b&gt;```pythons = text(&quot;Hello World&quot;)s.cutLeft(6)``````World```&lt;b&gt;cutRight&lt;/b&gt;```pythons = text(&quot;Hello World&quot;)s.cutRight(6)``````Hello```&lt;b&gt;enclose&lt;/b&gt;```pythona = text(&quot;Hello World&quot;)a.enclose('&lt;','&gt;')a.enclose('&quot;')``````&lt;Hello World&gt;&quot;Hello World&quot;```&lt;b&gt;endsWith&lt;/b&gt;```pythona = text(&quot;Hello World&quot;)if a.endsWith('World'):    print(&quot;ends with 'World'&quot;)``````ends with 'World'```With case-insensitive search:```pythona = text(&quot;Hello World&quot;)if a.endsWith('world', False):    print(&quot;ends with 'world'&quot;)``````ends with 'world'```&lt;b&gt;endsWithAny&lt;/b&gt;```pythonif(a.endsWithAny(['cat','dog'])):    print('end to animal...')``````end to animal...```&lt;b&gt;erase&lt;/b&gt;```pythona = text('The quick brown fox jumps over the lazy dog')a.erase(8, 10)print(a)`````` The quicx jumps over the lazy dog``` &lt;b&gt;equal&lt;/b&gt;```pythona = text()a.equal('A',10)``````AAAAAAAAAA```&lt;b&gt;find&lt;/b&gt;```pythona = text('The quick brown fox jumps over the lazy dog')a.find('brown')``````'brown fox jumps over the lazy dog'```With case-incensitive search:```pythona = text('The quick brown fox jumps over the lazy dog')a.find('Brown', False)``````'brown fox jumps over the lazy dog'```&lt;b&gt;fromArray&lt;/b&gt;```pythona = text()a.fromArray([1,2,3,4])print(a)``````1 2 3 4``````pythona = text()a.fromArray([1,2,3,4], '|')print(a)``````1|2|3|4``````pythona = text()a.fromArray([1,2,3,4], '')print(a)``````1234```Array of floats```pythona = text()a.fromArray([1.1,2.2,3.3,4.4])print(a)``````1.1 2.2 3.3 4.4```Array of strings```pythona = text()a.fromArray(['hello','world'])print(a)``````hello world``````pythonimport numpy as npa = text()a.fromArray(np.array([&quot;hello&quot;,&quot;world&quot;]))print(a)``````hello world```&lt;b&gt;fromArrayAsHex&lt;/b&gt;```pythona = text()a.fromArrayAsHex([10,20,30,40])print(a)``````0A 14 1E 28```Use without separator```pythona.fromArrayAsHex([10,20,30,40],2,'')print(a)``````0A141E28``````pythona = text()a.fromArrayAsHex([1000,2000,3000,4000])print(a)``````3E8 7D0 BB8 FA0``````pythona = text()a.fromArrayAsHex([1000,2000,3000,4000], 4, ',')print(a)``````03E8,07D0,0BB8,0FA0```&lt;b&gt;fromBinary&lt;/b&gt;```pythona = text()a.fromBinary(12345)print(a)``````00000000000000000011000000111001```&lt;b&gt;fromDouble&lt;/b&gt;```pythona = text()a.fromDouble(3.333338478)print(a)a.fromDouble(3.33989, 4)print(a)a.fromDouble(3.333338478, 10)``````3.3333383.33993.3333384780```&lt;b&gt;fromHex&lt;/b&gt;```pythona = text()a.fromHex(1234567)a.fromHex('a')a.fromHex(&quot;48 65 6C 6C 6F 20 57 6F 72 6C 64&quot;)``````0012D68761Hello World```&lt;b&gt;fromInteger&lt;/b&gt;```pythona = text()a.fromInteger(358764)print(a)``````358764```&lt;b&gt;fromMatrix&lt;/b&gt;```pythonfrom ctextlib import Text as textimport numpy as npx = np.array([[10, 20, 30], [40, 50, 60]])a = text()a.fromMatrix(x)print(a)``````10 20 3040 50 60``````pythonfrom ctextlib import Text as textimport numpy as npx = np.array([[10, 20, 30], [40, 50, 60]])a = text()a.fromMatrix(x, ',')``````10,20,3040,50,60```&lt;b&gt;fromMatrixAsHex&lt;/b&gt;```pythonfrom ctextlib import Text as textimport numpy as npx = np.array([[10, 20, 30], [40, 50, 60]])a = text()a.fromMatrixAsHex(x)print(a)``````0A 14 1E28 32 3C``````pythonfrom ctextlib import Text as textimport numpy as npx = np.array([[1000, 2000, 3000], [4000, 5000, 6000]])a = text()a.fromMatrixAsHex(x,4)print(a)``````03E8 07D0 0BB80FA0 1388 1770```&lt;b&gt;getDir&lt;/b&gt;```pythona = text(&quot;D:\\Folder\\SubFolder\\TEXT\\file.dat&quot;)a.getDir()``````D:\Folder\SubFolder\TEXT\```&lt;b&gt;getExtension&lt;/b&gt;```pythona = text(&quot;D:\\Folder\\SubFolder\\TEXT\\file.dat&quot;)a.getExtension()``````'.dat'```&lt;b&gt;getFileName&lt;/b&gt;```pythona = text(&quot;D:\\Folder\\SubFolder\\TEXT\\file.dat&quot;)a.getFileName()``````'file.dat'```&lt;b&gt;hash&lt;/b&gt;```pythons.hash()``````9257130453210036571```&lt;b&gt;indexOf&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog.&quot;)a.indexOf(&quot;brown&quot;)``````10```&lt;b&gt;indexOfAny&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog.&quot;)a.indexOfAny([&quot;fox&quot;, &quot;dog&quot;])``````16```&lt;b&gt;indexOfAny&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog.&quot;)a.indexOfAny(&quot;abc&quot;)``````7```&lt;b&gt;insert&lt;/b&gt;```pythona = text(&quot;abc&quot;)a.insert(1,'d',2)``````addbc``````pythona = text(&quot;The quick jumps over the lazy dog.&quot;)a.insert(10,&quot;fox &quot;)``````The quick fox jumps over the lazy dog.```&lt;b&gt;insertAtBegin&lt;/b&gt;&lt;br&gt;&lt;b&gt;insertAtEnd&lt;/b&gt;```pythona = text(&quot;Hello&quot;)a.insertAtBegin(&quot;&lt;begin&gt;&quot;)a.insertAtEnd(&quot;&lt;/begin&gt;&quot;)``````&lt;begin&gt;abc&lt;/begin&gt;```&lt;b&gt;isAlpha&lt;/b&gt;```pythona = text(&quot;Abcd&quot;)a.isAlpha()True```&lt;b&gt;isBinary&lt;/b&gt;```pythona = text(&quot;01111011100001&quot;)a.isBinary()True```&lt;b&gt;isEmpty&lt;/b&gt;```pythona = text()a.isEmpty()True```&lt;b&gt;isHexNumber&lt;/b&gt;```pythona = text(&quot;12AB56FE&quot;)a.isHexNumber()True```&lt;b&gt;isNumber&lt;/b&gt;```pythona = text(&quot;123456&quot;)a.isNumber()True```&lt;b&gt;isLower&lt;/b&gt;```pythona = text(&quot;hello world&quot;)a.isLower()True```&lt;b&gt;isUpper&lt;/b&gt;```pythona = text(&quot;HELLO WORLD&quot;)a.isUpper()True```&lt;b&gt;isPalindrome&lt;/b&gt;```pythona = text(&quot;racecar&quot;)a.isPalindrome()True```&lt;b&gt;keep&lt;/b&gt;```pythons = text(&quot;Hello World&quot;).keep(3,5)``````lo Wo```&lt;b&gt;keepLeft&lt;/b&gt;```pythona = text(&quot;The quick jumps over the lazy dog.&quot;)a.keepLeft(10)``````The quick```&lt;b&gt;keepRight&lt;/b&gt;```pythona = text(&quot;The quick jumps over the lazy dog.&quot;)a.keepRight(10)`````` lazy dog.```&lt;b&gt;lastIndexOf&lt;/b&gt;```pythons = text(&quot;Hello World&quot;)s.lastIndexOf('l')``````9```&lt;b&gt;lines&lt;/b&gt;```pythona = text(&quot;L1\nL2\n\nL3\nL4\n  \n\nL5&quot;)a.lines()``````['L1', 'L2', 'L3', 'L4', 'L5']```&lt;b&gt;linesCount&lt;/b&gt;```pythona = text(&quot;L1\nL2\n\nL3\nL4\n  \n\nL5&quot;)a.linesCount()``````7```&lt;b&gt;linesRemoveEmpty&lt;/b&gt;```pythona = text(&quot;L1\nL2\n\nL3\nL4\n  \n\nL5&quot;)a.linesRemoveEmpty()print(a)``````L1L2L3L4L5```Several per line methods&lt;br&gt;&lt;b&gt;linesAppend&lt;/b&gt;&lt;br&gt;&lt;b&gt;linesInsertAtBegin&lt;/b&gt;&lt;br&gt;&lt;b&gt;linesSort&lt;/b&gt;&lt;br&gt;&lt;b&gt;linesPaddRight&lt;/b&gt;&lt;br&gt;&lt;b&gt;linesTrim&lt;/b&gt;&lt;br&gt;Example of opening a text file, sort all lines, and save it with another name```pythonfrom ctextlib import Text as texts = text()s.readFile('Unordered.txt')s.linesSort()s.writeFile('Sorted_python.txt')```&lt;b&gt;limit&lt;/b&gt;```pythons = text(&quot;Hello World&quot;)s.limit(6)``````Hello```&lt;b&gt;lower&lt;/b&gt;```pythons = text(&quot;Hello World&quot;)s.lower()``````hello world```&lt;b&gt;makeUnique&lt;/b&gt;```pythona = text()a.appendRange('a','z').appendRange('a','z')abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza.makeUnique()print(a)``````abcdefghijklmnopqrstuvwxyz```&lt;b&gt;mid&lt;/b&gt;```pythona = text(&quot;Hello World&quot;).mid(3)``````lo Wo```&lt;b&gt;nextLine&lt;/b&gt;```python# Example of iterating all linesfrom ctextlib import Text as texta = text(&quot;Line1\nLine2\nLine3&quot;)line = text()pos = 0while(pos &gt;= 0):    pos = a.nextLine(pos,line)    print(line)``````Line1Line2Line3```&lt;b&gt;nextWord&lt;/b&gt;```python# Example of iterating all wordsfrom ctextlib import Text as texta = text('The quick brown fox jumps over the lazy dog')word = text()pos = 0while(pos &gt;= 0):    pos = a.nextWord(pos,word)    print(word)``````Thequickbrownfoxjumpsoverthelazydog```&lt;b&gt;paddLeft&lt;/b&gt;```pythons = text(&quot;Abra&quot;)s.paddLeft('.', 16)``````............Abra```&lt;b&gt;paddRight&lt;/b&gt;```pythons = text(&quot;Abra&quot;)s.paddRight('.', 16)``````Abra............```&lt;b&gt;pathCombine&lt;/b&gt;```pythona = text(&quot;C:\\Temp&quot;)a.pathCombine(&quot;..\\Folder&quot;)``````C:\Folder```&lt;b&gt;quote&lt;/b&gt;```pythona = text(&quot;Hello&quot;)a.quote()``````&quot;Hello&quot;```&lt;b&gt;random&lt;/b&gt;```pythona = text()a.random()&quot;P1kAlMiG2Kb7FzP5&quot;a.sort()&quot;1257AFGKMPPbiklz&quot;a.shuffle()&quot;k2lF7KAPG5M1Pzbi&quot;a.random(32)P1kAlMiG2Kb7FzP5tM1QBI6DSS92c31A```&lt;b&gt;randomAlpha&lt;/b&gt;```pythons = text()s.randomAlpha()IkEffmzNiMKKASVW```&lt;b&gt;randomNumber&lt;/b&gt;```pythons = text()s.randomNumber()3892795431s.randomNumber(32)33341138742779319865028602486509```&lt;b&gt;readFile&lt;/b&gt;```python# demontrates how to read a whole text filefrom ctextlib import Text as texta = text()a.readFile('test.txt')print(a)``````Hello World```&lt;b&gt;regexMatch&lt;/b&gt;```pythons = text(&quot;+336587890078&quot;)if(s.regexMatch(&quot;(\\+|-)?[[:digit:]]+&quot;)):    print(&quot;it is a number&quot;)``````it is a number```&lt;b&gt;regexLines&lt;/b&gt;```txtanimals.txt------------CatDogGiraffeLionLlamaMonkeyMouseParrotPoodleScorpionSnakeWeasel``````python# collect all lines starting with given charactersfrom ctextlib import Text as texta = text()a.readFile(&quot;animals.txt&quot;)a.regexLines(&quot;^[A-G][a-z]+&quot;)``````['Cat', 'Dog', 'Giraffe']```&lt;b&gt;regexReplace&lt;/b&gt;    ```pythonfrom ctextlib import Text as texta = text(&quot;there is sub-sequence in the sub-way string&quot;)a.regexReplace(&quot;\\b(sub)([^ ]*)&quot;, &quot;sub-$2&quot;)``````there is sub--sequence in the sub--way string```&lt;b&gt;regexSearch&lt;/b&gt;    ```python# collect all words using regexfrom ctextlib import Text as texta = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.regexSearch(&quot;\\w+&quot;)``````'The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']```&lt;b&gt;regexWords&lt;/b&gt;    ```python# collect all words starting with given charactersfrom ctextlib import Text as texta = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.regexWords(&quot;^[a-n][a-z]+&quot;)``````['brown', 'fox', 'jumps', 'lazy', 'dog']   ```&lt;b&gt;remove&lt;/b&gt;```pythona = text('we few, we happy few, we band of brothers.')a.remove('we')a.reduceChain()a.trim()``````few happy few band of brothers```&lt;b&gt;removeAny&lt;/b&gt;```pythonfrom ctextlib import Text as texta = text('The quick brown fox jumps over the lazy dog')a.removeAny(['brown','quick','lazy'])a.reduceChain()``````The fox jumps over the dog```&lt;b&gt;removeExtension&lt;/b&gt;```pythona = text(&quot;D:\\Folder\\SubFolder\\TEXT\\File.dat&quot;)a.removeExtension()``````D:\Folder\SubFolder\TEXT\File```&lt;b&gt;removeFileName&lt;/b&gt;```pythona = text(&quot;D:\\Folder\\SubFolder\\TEXT\\File.dat&quot;)a.removeFileName()``````D:\Folder\SubFolder\TEXT\```&lt;b&gt;removeWhileBegins&lt;/b&gt;```pythona = text(&quot;Some text ending with something&quot;)a.removeWhileBegins(&quot;Some text &quot;)print(a)``````ending with something```&lt;b&gt;removeWhileEnds&lt;/b&gt;```pythona = text(&quot;Some text ending with something&quot;)a.removeWhileEnds(&quot; something&quot;)print(a)``````Some text ending with```&lt;b&gt;replace&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.replace(&quot;fox&quot;, &quot;cat&quot;)print(a)``````The quick brown cat jumps over the lazy dog``````pythona = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.replace([&quot;fox&quot;, &quot;cat&quot;,&quot;dog&quot;,&quot;quick&quot;], &quot;-&quot;)``````The ----- brown --- jumps over the lazy ---```&lt;b&gt;replaceAny&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.replaceAny([&quot;fox&quot;, &quot;cat&quot;,&quot;dog&quot;], &quot;***&quot;)print(a)``````The quick brown *** jumps over the lazy ***``````pythona = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.replaceAny([&quot;fox&quot;, &quot;dog&quot;], [&quot;dog&quot;, &quot;fox&quot;])``````The quick brown dog jumps over the lazy fox```&lt;b&gt;reverse&lt;/b&gt;```pythona = text(&quot;Hello&quot;)a.reverse()``````olleH```&lt;b&gt;right&lt;/b&gt;```pythona = text(&quot;Hello World&quot;)a.right(5)``````World```&lt;b&gt;rotate&lt;/b&gt;```pythona = text(&quot;Hello World&quot;)a.rotateLeft(2)a.rotateRight(4)```Output```llo WorldHeldHello Wor```&lt;b&gt;split&lt;/b&gt;```python# by default split uses the standard separators (&quot; \t\r\n&quot;)a = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.split()``````['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']``````python# split can be used with any list of separator charactersa = text(&quot;The quick, brown....fox,,, ,jumps over,the  lazy.dog&quot;)a.split(&quot;,. &quot;)``````['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']```&lt;b&gt;toBinary&lt;/b&gt;```pythonbOk = Falsea = text(&quot;100001&quot;)a.toBinary(bOk)33```&lt;b&gt;toHex&lt;/b&gt;```pythona = text(&quot;Hello World&quot;)a.toHex()print(a)``````48 65 6C 6C 6F 20 57 6F 72 6C 64```Using separator character. ```pythona = text(&quot;Hello World&quot;)a.toHex(',')print(a)``````48,65,6C,6C,6F,20,57,6F,72,6C,64```&lt;b&gt;toHex&lt;/b&gt;```pythonbOk = Falsea = text(&quot;1E1E&quot;)a.toHex(bOk)7710```&lt;b&gt;trim&lt;/b&gt;```pythona = text(&quot; \t\n   lazy dog  \t\n   &quot;)a.trim()lazy doga = text(&quot;000000000000101&quot;)a.trimLeft(&quot;0&quot;)101a = (&quot;101000000000000&quot;)a.trimRight('0')101a = text(&quot;0000000101000000000&quot;)a.trim(&quot;0&quot;)101```&lt;b&gt;upper&lt;/b&gt;```pythons = text(&quot;Hello World&quot;)s.upper()``````HELLO WORLD```&lt;b&gt;words&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.words()``````['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']``````pythona = text(&quot;The|quick|brown|fox|jumps|over|the|lazy|dog&quot;)a.words('|')``````['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']```&lt;b&gt;wordsCapitalize&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.wordsCapitalize()``````The Quick Brown Fox Jumps Over The Lazy Dog```&lt;b&gt;wordsCount&lt;/b&gt;```pythona = text('The quick brown fox jumps over the lazy dog')a.wordsCount()``````9```&lt;b&gt;wordsEnclose&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.wordsEnclose('[',']')``````[The] [quick] [brown] [fox] [jumps] [over] [the] [lazy] [dog]```&lt;b&gt;wordsReverse&lt;/b&gt;```pythona = text(&quot;The quick brown fox jumps over the lazy dog&quot;)a.wordsReverse()``````ehT kciuq nworb xof spmuj revo eht yzal god```&lt;b&gt;wordsSort&lt;/b&gt;```pythona = text('The quick brown fox jumps over the lazy dog')a.wordsSort()```Output```The brown dog fox jumps lazy over quick the```&lt;b&gt;writeFile&lt;/b&gt;```python# demontrates how to write to a text filefrom ctextlib import Text as texta = text(&quot;Hello World&quot;)a.writeFile('test.txt')print(a)```## UNICODE for PythonPython is using UTF8 as strings representation. When using Python texts containing non-English Unicode characters it is recommended to use the Unicode version of CText as demonstrated below:```python# demonstrate text processing of Swedish unicode textfrom ctextlib import TextU as texts = text('Den snabbbruna räven hoppar över den lata hunden')&gt;&gt;&gt; s.cutBeforeFirst('ö')``````över den lata hunden``````python# demonstrate text processing of Russian unicode textfrom ctextlib import TextU as texts = text('Быстрая коричневая лиса прыгает на ленивую собаку')s.cutAfterLast('ы')``````Быстрая коричневая лиса пр``````python# demonstrate text processing of Czech unicode textfrom ctextlib import TextU as texts = text('Rychlá hnědá liška skočí přes líného psa')s.cutAfterFirst('á', True)``````Rychlá``````python# demonstrate text processing of Greek unicode textfrom ctextlib import TextU as texts = text('Η γρήγορη καφέ αλεπού πηδάει πάνω από το τεμπέλικο σκυλί')s.cutAfterFirst('έ', True)``````Η γρήγορη καφέ``````python# demonstrate text processing of Armenian unicode textfrom ctextlib import TextU as texts = text('Արագ շագանակագույն աղվեսը ցատկում է ծույլ շան վրա')s.cutBeforeFirst('է')``````է ծույլ շան վրա``````python# demonstrate text processing of Georgian unicode textfrom ctextlib import TextU as texts = text('სწრაფი ყავისფერი მელა გადაბმულია ზარმაცი ძაღლი')s.cutBeforeFirst('მ')``````მელა გადაბმულია ზარმაცი ძაღლი```For the full info type help(text).## Build CText Unit Test and Demo projects&lt;br&gt;To build the UnitTest project and the demos with CMake and Visual Studio:&lt;br&gt; open terminal in the folder \Apps and type&lt;br&gt;cmake .&lt;br&gt;Alternatively, you can load in VS2017 or later \Apps\CMakeLists.txt from File-&gt;Open-&gt;CMake.., after generates cache is completed, choose CMake-&gt;Build All&lt;br&gt;To compile with GCC in Debug or Release:&lt;br&gt;cmake -D CMAKE_BUILD_TYPE=Release .&lt;br&gt;cmake -D CMAKE_BUILD_TYPE=Debug .&lt;br&gt;&lt;br&gt;This will build a console application that runs the Unit Tests.&lt;br&gt;&lt;br&gt; Also there is a Visual Studio solution (CText.sln) with all projects. Run UnitTests project first to see if all tests pass.&lt;br&gt;## C++ ExamplesFor all examples how to use CText please see the Unit Test project.### Sort all lines in a text file```cpp// this example reads a text file and sorts all lines in alphabeta order.#include &lt;iostream&gt;#include &quot;../CTEXT/CText.h&quot;#include &quot;tchar_utils.h&quot;int main(){        const char* input_name = &quot;/Unsorted.txt&quot;;    const char* output_name = &quot;/Sorted.txt&quot;;    CText pathIn = getcwd(0, 0);    CText pathOut = pathIn;    pathIn += input_name;    pathOut += output_name;    CText str;    if(!str.readFile(pathIn.str()))    {        std::cerr &lt;&lt; &quot;Error, can not open file: &quot; &lt;&lt; pathIn &lt;&lt; std::endl;        return 0;    }    str.linesSort();    str.writeFile(pathOut.str(), CText::ENCODING_ASCII);    return 0;}```### Replace words```cpp    CText s = _T(&quot;The quick brown fox jumps over the lazy dog&quot;);    s.replace(_T(&quot;brown&quot;), _T(&quot;red&quot;));    cout &lt;&lt; s &lt;&lt; endl;```Output:```   The quick red fox jumps over the lazy dog ```  ```cpp    CText s = _T(&quot;The quick brown fox jumps over the lazy dog&quot;);    const CText::Char* words[] = {_T(&quot;quick&quot;), _T(&quot;fox&quot;), _T(&quot;dog&quot;)};    s.replaceAny(words, 3, _T('-'));    cout &lt;&lt; s &lt;&lt; endl;```Output:```   The ----- brown --- jumps over the lazy ---     ```  ```cpp    CText s = _T(&quot;The quick brown fox jumps over the lazy dog&quot;);    s.replaceAny({_T(&quot;fox&quot;), _T(&quot;dog&quot;)}, {_T(&quot;dog&quot;), _T(&quot;fox&quot;)});    cout &lt;&lt; s &lt;&lt; endl;``````cpp    CText s = _T(&quot;The quick brown Fox jumps over the lazy Dog&quot;);    s.replaceAny({_T(&quot;fox&quot;), _T(&quot;dog&quot;)}, {_T(&quot;dog&quot;), _T(&quot;fox&quot;)}, false);    cout &lt;&lt; s &lt;&lt; endl;```Output:```   The quick brown dog jumps over the lazy fox   ```  ```cpp   CText s = _T(&quot;The quick brown fox jumps over the lazy dog&quot;);   const CText::Char* words[] = {_T(&quot;quick&quot;), _T(&quot;fox&quot;), _T(&quot;dog&quot;)};   s.replaceAny(words, 3, _T(&quot;****&quot;));   cout &lt;&lt; s &lt;&lt; endl;```Output:```   The **** brown **** jumps over the lazy ****  ```  ### Remove words, blocks and characters```cpp   CText s = _T(&quot;This is a monkey job!&quot;);   s.remove(_T(&quot;monkey&quot;));   s.reduceChain(' ');   cout &lt;&lt; s &lt;&lt; endl;```Output:```   This is a job!```  ```cpp   CText s = _T(&quot;Text containing &lt;several&gt; [blocks] separated by {brackets}&quot;);   s.removeBlocks(_T(&quot;&lt;[{&quot;), _T(&quot;&gt;]}&quot;));   s.reduceChain(' ');   s.trim()   cout &lt;&lt; s &lt;&lt; endl;```Output:```   Text containing separated by```  ```cpp   s = _T(&quot;one and two or three and five&quot;);   s.removeAny({_T(&quot;or&quot;), _T(&quot;and&quot;)});   s.reduceChain(' ');   cout &lt;&lt; s &lt;&lt; endl;```Output:```   one two three five```  ### File paths ```cppCText filepath = _T(&quot;D:\\Folder\\SubFolder\\TEXT\\File.dat&quot;);cout &lt;&lt; filepath.getExtension() &lt;&lt; endl;cout &lt;&lt; filepath.getFileName() &lt;&lt; endl;cout &lt;&lt; filepath.getDir() &lt;&lt; endl;filepath.replaceExtension(_T(&quot;.bin&quot;));cout &lt;&lt; filepath &lt;&lt; endl;filepath.removeExtension();cout &lt;&lt; filepath &lt;&lt; endl;filepath.replaceExtension(_T(&quot;.dat&quot;));cout &lt;&lt; filepath &lt;&lt; endl;filepath.replaceFileName(_T(&quot;File2&quot;));cout &lt;&lt; filepath &lt;&lt; endl;filepath.addToFileName(_T(&quot;_mask&quot;));cout &lt;&lt; filepath &lt;&lt; endl;filepath.replaceLastFolder(_T(&quot;Temp&quot;));cout &lt;&lt; filepath &lt;&lt; endl;filepath.removeAfterSlash();cout &lt;&lt; filepath &lt;&lt; endl;```Output```.datFile.datD:\Folder\SubFolder\TEXT\D:\Folder\SubFolder\TEXT\File.binD:\Folder\SubFolder\TEXT\FileD:\Folder\SubFolder\TEXT\File.datD:\Folder\SubFolder\TEXT\File2.datD:\Folder\SubFolder\TEXT\File2_mask.datD:\Folder\SubFolder\Temp\File2_mask.datD:\Folder\SubFolder\Temp``````cppCText path1(_T(&quot;C:\\Temp&quot;));CText path2(_T(&quot;..\\Folder&quot;));path1.pathCombine(path2.str());cout &lt;&lt; path1 &lt;&lt; endl;```Output```C:\\Folder```### Split and collection routines```cpp    CText s = _T(&quot;The quick  brown fox jumps  over the lazy dog&quot;);    vector&lt;CText&gt; words;    if(s.split(words) &lt; 9)        cout &lt;&lt; &quot;Error!&quot; &lt;&lt; endl ;    for(auto&amp; s : words)        cout &lt;&lt; s &lt;&lt; endl;``````cpp   CText s = _T(&quot;The,quick,brown,fox,jumps,over,the,lazy,dog&quot;);   vector&lt;std::string&gt; words;   if(s.split(words,false,_T(&quot;,&quot;)) != 9)      cout &lt;&lt; &quot;Error!&quot; &lt;&lt; endl ;   for(auto&amp; s : words)      cout &lt;&lt; s &lt;&lt; endl;``` Output:```Thequickbrownfoxjumpsoverthelazydog``````cpp    CText s = &quot;Line 1\r\nLine 2\n\nLine 3\n&quot;;    vector&lt;std::string&gt; lines;    s.collectLines(lines);    for(auto&amp; s : lines)      cout &lt;&lt; s &lt;&lt; endl;``` Output:```Line 1Line 2Line 3```### Read sentences from text file```cpp#include &lt;iostream&gt;#include &quot;../CTEXT/CText.h&quot;#include &quot;tchar_utils.h&quot;int main(){        const char* input_name = &quot;/Columbus.txt&quot;;    const char* output_name = &quot;/Columbus_Sentences.txt&quot;;    CText pathIn = getcwd(0, 0);    CText pathOut = pathIn;    pathIn += input_name;    pathOut += output_name;    CText str;    if(!str.readFile(pathIn.str()))    {        std::cerr &lt;&lt; &quot;Error, can not open file: &quot; &lt;&lt; pathIn &lt;&lt; std::endl;        return 0;    }    std::vector&lt;CText&gt; sentences;    str.collectSentences(sentences);    str.fromArray(sentences, _T(&quot;\n\n&quot;) );    str.writeFile(pathOut.str(), CText::ENCODING_UTF8);    return 0;}```### Count characters and words```cppCText s = _T(&quot;12345678909678543213&quot;);map&lt;CText::Char, int&gt; freq;s.countChars(freq);``````cppCText s = _T(&quot;Nory was a Catholic because her mother was a Catholic, and Nory’s mother was a Catholic because her father was a Catholic, and her father was a Catholic because his mother was a Catholic, or had been.&quot;);std::multimap&lt;int, CText, std::greater&lt;int&gt; &gt; freq;s.countWordFrequencies(freq);s.fromMap(freq);cout &lt;&lt; s;```Output:```Catholic 6a 6was 6because 3her 3mother 3and 2father 2Nory 1Nory's 1been 1had 1his 1or 1```### Conversion routines```cppCText s = _T(&quot;1 2 3 4 5 6 7 8 9&quot;);vector&lt;int&gt; v;s.toArray&lt;int&gt;(v);``` Output:```{1,2,3,4,5,6,7,8,9}``````cppCText s = _T(&quot;1,2,3,4,5,6,7,8,9&quot;);vector&lt;int&gt; v;s.toArray&lt;int&gt;(v, _T(','));``` Output:```{1,2,3,4,5,6,7,8,9}``````cppCText s = _T(&quot;1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9&quot;);vector&lt;double&gt; v;s.toArray&lt;double&gt;(v, _T(','));```Output:```{1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9}```From hexadecimal numbers array:```cppCText s = _T(&quot;0A 1E 2A 1B&quot;);vector&lt;int&gt; v;s.toArray&lt;int&gt;(v, _T(' '), true);```Output:```{10, 30, 42, 27}``````cppCText s = _T(&quot;1a:2b:3c:4d:5e:6f&quot;);vector&lt;int&gt; v;s.toArray&lt;int&gt;(v, _T(':'), true);```Output:```{26, 43, 60, 77, 94, 111}```Without separator:```cppCText s = _T(&quot;0A1E2A1B&quot;);s.toArray&lt;int&gt;(v, 0, true);```Output:```{10, 30, 42, 27}``````cppConvert hex to chars string CText s = _T(&quot;48 65 6C 6C 6F 20 57 6F 72 6C 64&quot;);std::vector&lt;int&gt; bytes;s.toChars&lt;int&gt;(bytes, true);s.fromChars&lt;int&gt;(bytes);cout &lt;&lt; s &lt;&lt; endl;```Output:```Hello World```Parse numerical matrix:```cppstd::vector&lt;std::vector&lt;int&gt;&gt; m;CText s = _T(&quot;1 2 3\n4 5 6\n7 8 9&quot;);s.toMatrix&lt;int&gt;(m, _T(' '));```Output:```{    {1, 2, 3},    {4, 5, 6},    {7, 8, 9},};```### Highlight wordsFollowing will make bold all words starting with &quot;Col&quot;, &quot;Spa&quot;,&quot;Isa&quot;, ending to &quot;an&quot;), &quot;as&quot; or containing &quot;pe&quot; or &quot;sea&quot;:```cppvector&lt;CText&gt; start = {_T(&quot;Col&quot;), _T(&quot;Spa&quot;), _T(&quot;Isa&quot;)};vector&lt;CText&gt; end = {_T(&quot;an&quot;), _T(&quot;as&quot;)};vector&lt;CText&gt; contain = {_T(&quot;pe&quot;), _T(&quot;sea&quot;)};str.wordsEnclose(_T(&quot;&lt;b&gt;&quot;), _T(&quot;&lt;/b&gt;&quot;), &amp;start, &amp;end, &amp;contain);```   Portugal had been the main &lt;b&gt;European&lt;/b&gt; power interested in pursuing trade routes &lt;b&gt;overseas&lt;/b&gt;. Their next-door neighbors, Castile (predecessor of &lt;b&gt;Spain&lt;/b&gt;) had been somewhat slower to begin exploring the Atlantic &lt;b&gt;because&lt;/b&gt; of the bigger land area it had to re-conquer (the Reconquista) from the Moors. It &lt;b&gt;was&lt;/b&gt; not until the late 15th century, following the dynastic union of the Crowns of Castile and Aragon and the completion of the Reconquista, that the unified crowns of what would become &lt;b&gt;Spain&lt;/b&gt; (although countries still legally existing) emerged and became fully committed to looking for new trade routes and colonies &lt;b&gt;overseas&lt;/b&gt;. In 1492 the joint rulers conquered the Moorish kingdom of Granada, which had been providing Castile with &lt;b&gt;African&lt;/b&gt; goods through tribute. &lt;b&gt;Columbus&lt;/b&gt; had previously failed to convince King John II of Portugal to fund his exploration of a western route, but the new king and queen of the re-conquered &lt;b&gt;Spain&lt;/b&gt; decided to fund &lt;b&gt;Columbus's&lt;/b&gt; expedition in hopes of bypassing Portugal's lock on Africa and the &lt;b&gt;Indian&lt;/b&gt; &lt;b&gt;Ocean&lt;/b&gt;, reaching Asia by traveling west&lt;b&gt;Columbus&lt;/b&gt; &lt;b&gt;was&lt;/b&gt; granted &lt;b&gt;an&lt;/b&gt; audience with them; on May 1, 1489, he &lt;b&gt;presented&lt;/b&gt; his plans to Queen &lt;b&gt;Isabella&lt;/b&gt;, who referred them to a committee. They pronounced the idea impractical, and &lt;b&gt;advised&lt;/b&gt; the monarchs not to support the &lt;b&gt;proposed&lt;/b&gt; venture## TODO List* **More methods for words,lines,sentences and complex expressions**:  There are lots more methods that can be added to support diferent NLP and lexical tasks.* **Further improve containers abstraction**: CText needs more convertion routines to/from STL and other containers and generic data structures.* **Regular Expressions**: - Partial or full support to regular expressions.* **Other char types**: - Character types like char_32 can be also supported* **Mini Text Editor**: - This is a text editor based on CText that I plan to port on Modern C++.* **Export to Python**: - I want to export CText library to Python-3* **Performance Test**: - Add performance tests comparing with STL string.</longdescription>
</pkgmetadata>