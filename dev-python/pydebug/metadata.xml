<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pydebug=======Tiny python debugging utility modeled after visionmedia's node.js debugmodule and the python 3 print functionInstallation------------::    $ python setup.py installUsage-----With ``debug`` you simply invoke the exported function to generate yourdebug function, passing it a name which will determine if a noopfunction is returned, or custom decorated function that emulates thepython 3 ``print`` function but, by default, prints to ``sys.stderr``. Aunique color is selected per-function for visibility.Example *test.py*:.. code:: py    import pydebug    import time    #     # pydebug.debug(name)    #    # once you have initialized the debug module you can call it as shown below    #    # debug(*objects, sep=' ', end='\n', file=sys.stderr, flush=False)    #    debug = pydebug.debug(&quot;test&quot;)    debug(&quot;hi there2&quot;)    debug2 = pydebug.debug(&quot;test2&quot;)    debug2(&quot;awesome&quot;)    debug({&quot;awesome&quot;: True}, True, 1, &quot;test&quot;)    debug([], {1,2,3}, {&quot;awesome&quot;: True}, True, 1, &quot;test&quot;)    time.sleep(0.1)    debug('should be milliseconds now')    time.sleep(1)    debug('should be seconds now')The **DEBUG** environment variable is then used to enable these based onspace or comma-delimited names. Here are some examples:::    $ DEBUG=* python test_pydebug.py    $ DEBUG=test python test_pydebug.py    $ DEBUG=test2 python test_pydebug.py    $ DEBUG=test* python test_pydebug.pyMicrosecond diff----------------When actively developing an application it can be useful to see when thetime spent between one ``debug()`` call and the next. Suppose forexample you invoke ``debug()`` before requesting a resource, and afteras well, the &quot;+NNNus&quot; will show you how much time was spent betweencalls.When File is not a TTY----------------------When the file is not a TTY, ``to_utc_string()`` is called which mimicksthe default behavior of the Javascript ``Date#toUTCString()`` methodused in the node.js debug module, making it more useful for logging thedebug information as shown below::    $ DEBUG=* python test_pydebug.py 2&gt;&amp;1 | grep test    $ DEBUG=* python test_pydebug.py 2&gt;&amp;1 | grep test2Conventions-----------If you're using this in one or more of your libraries, you *should* usethe name of your library so that developers may toggle debugging asdesired without guessing names. If you have more than one debuggers you*should* prefix them with your library name and use &quot;:&quot; to separatefeatures. For example &quot;bodyParser&quot; from Connect would then be&quot;connect:bodyParser&quot;.Wildcards---------The &quot;\*&quot; character may be used as a wildcard. Suppose for example yourlibrary has debuggers named &quot;connect:bodyParser&quot;, &quot;connect:compress&quot;,&quot;connect:session&quot;, instead of listing all three with``DEBUG=connect:bodyParser,connect.compress,connect:session``, you maysimply do ``DEBUG=connect:*``, or to run everything using this modulesimply use ``DEBUG=*``.You can also exclude specific debuggers by prefixing them with a &quot;-&quot;character or whitespace. For example:::    $ DEBUG=test2,-test python test_pydebug.py    $ DEBUG=&quot;test2 -test&quot; python test_pydebug.pyLicense-------The MIT License (MIT)Copyright (c) 2013 Malcom GilbertPermission is hereby granted, free of charge, to any person obtaining acopy of this software and associated documentation files (the&quot;Software&quot;), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall be includedin all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESSOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</longdescription>
</pkgmetadata>