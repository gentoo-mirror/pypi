<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AutodoxTool for generating documentation automatically from code annotations, types,and docstrings.## Status- [x] Code- [x] Docs- [x] Package published## Usage### Installation```bashpip install autodox```### Document a module from CLIUse the following to document a module with default configuration:```bashautodox module_name [options] &gt; target_file.md```The output can be configured with the following options:- `-exclude_name=name` to exclude a specific part of the module by name- `-exclude_type=type` to exclude any module parts of the given type- `-package=module_name` to scope a relative import- `-header_level=number` to increase the hashtag count in headers by `number`- `-function_format=format` - can be one of 'header', 'paragraph', or 'list'- `-method_format=format` - can be one of 'header', 'paragraph', or 'list'- `-value_format=format` - can be one of 'header', 'paragraph', or 'list'- `-include_private` to include things prefaced with '_'- `-include_dunder` to include things prefaced with '__'- `-include_submodules` to include submodules- `-document_submodules` to run the module documentation for submodules- `-debug` to increase the level of debug statements printed (starts at 0)For experimentation and to learn how the options work, try running the following:```bashautodox autodox [options]```### Programmatic accessThe autodox package can also be used by importing and running the desireddocumentation function(s). The following are included.- `dox_a_module(module: ModuleType, options: dict = None) -&gt; str` produces docs for a module- `dox_a_value(value: Any, options: dict = None) -&gt; str` produces docs for a value- `dox_a_function(function: Callable, options: dict = None) -&gt; str` produces docs for a function- `dox_a_class(cls: type, options: dict = None) -&gt; str` produces docs for a classThe valid options for each will be described below. Additionally, there is asystem for setting up hooks that interact with the doc generation process tochange the inputs or outputs, and that will be described below the options forthe four `dox_a_{thing}` functions.#### `dox_a_module(module: ModuleType, options: dict = None) -&gt; str`Produces docs for a module. Valid options are the following:- `exclude_names: list[str]` - names to exclude from docs- `exclude_types: list[str]` - types to exclude from docs- `header_level: int` - number of additional hashtags to add to headers- `include_private: bool` - if True, includes things with names prefaced by '_'- `include_dunder: bool` - if True, includes things with names prefaced by '__'- `include_submodules: bool` - if True, notes will be made about any additionalmodules encountered when analyzing the specified module- `document_submodules: bool` - if True, `dox_a_module` will be calledrecursively on any additional modules encountered when analyzing the specifiedmodule#### `dox_a_value(value: Any, options: dict = None) -&gt; str`Produces docs for a value. Valid options are the following:- `header_level: int` - number of additional hashtags to add to headers- `format: str` - format can be one of 'header', 'paragraph', or 'list'#### `dox_a_function(function: Callable, options: dict = None) -&gt; str`Produces docs for a function. Valid options are the following:- `header_level: int` - number of additional hashtags to add to headers#### `dox_a_class(cls: type, options: dict = None) -&gt; str`Produces docs for a class. Valid options are the following:- `exclude_names: list[str]` - names to exclude from docs- `header_level: int` - number of additional hashtags to add to headers- `include_private: bool` - if True, includes things with names prefaced by '_'- `include_dunder: bool` - if True, includes things with names prefaced by '__'- `method_format: str` - can be one of 'header', 'paragraph', or 'list'#### HooksThere are eight events where custom functionality can be run, specified in the`Event` enum:- `AFTER_HEADER`- `AFTER_PARAGRAPH`- `AFTER_LIST`- `BEFORE_VALUE`- `AFTER_VALUE`- `BEFORE_FUNCTION`- `AFTER_FUNCTION`- `BEFORE_CLASS`- `AFTER_CLASS`- `BEFORE_MODULE`- `AFTER_MODULE`Handlers for the `BEFORE_` events can be set using the `set_before_handler`function. These handlers will receive the item to be documented and a dictcontaining any options passed into the `dox_a_{thing}` function, and they shouldreturn a tuple containing those two arguments after any modifications are madeto them. Example:```pythonfrom autodox import Event, set_before_handlerfrom typing import Callabledef handle_before_function(function: Callable, options: dict):    # set an option    options['header_level'] = 2    return (function, options)set_before_handler(Event.BEFORE_FUNCTION, handle_before_function)```Handlers for the `AFTER_` events can be set using the `set_after_handler`function. These handlers will receive the str doc after the `dox_a_{thing}`function has completed executing, and they should return that document after anymodifications are made. Example:```pythonfrom autodox import Event, set_after_handlerdef handle_after_function(doc: str):    # do some string manipulation    return doc + 'But really, why would you call this function anyway?\n\n'set_after_handler(Event.AFTER_FUNCTION, handle_after_function)```Muliple handlers can be set for each event, and they will be executed in order,passing the output from the first as input to the second, etc. Example:```pythonfrom autodox import Event, set_after_handler# add 'hello world' to the end of each list item in two stepsdef hello(doc: str):    return doc + ' hello'def world(doc: str):    return doc + ' world'set_after_handler(Event.AFTER_LIST, hello)set_after_handler(Event.AFTER_LIST, world)```## TestingThe test suite for this library is currently limited to hooks (14 tests) and afew edge cases I encountered using the package (10 tests).To test, clone the repository and run the following:```python test_hooks.pypython test_doxing.py```## ISC LicenseCopyleft (c) 2023 k98kurzPermission to use, copy, modify, and/or distribute this softwarefor any purpose with or without fee is hereby granted, providedthat the above copyleft notice and this permission notice appear inall copies.THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALLWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIEDWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THEAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, ORCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSSOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR INCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</longdescription>
</pkgmetadata>