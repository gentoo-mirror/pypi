<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://pl-public-data.s3.amazonaws.com/assets_lightning/pytorch-lightning.png&quot; width=&quot;400px&quot;&gt;**The lightweight PyTorch wrapper for high-performance AI research.Scale your models, not the boilerplate.**______________________________________________________________________&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.pytorchlightning.ai/&quot;&gt;Website&lt;/a&gt; •  &lt;a href=&quot;#key-features&quot;&gt;Key Features&lt;/a&gt; •  &lt;a href=&quot;#how-to-use&quot;&gt;How To Use&lt;/a&gt; •  &lt;a href=&quot;https://lightning.ai/docs/pytorch/stable/&quot;&gt;Docs&lt;/a&gt; •  &lt;a href=&quot;#examples&quot;&gt;Examples&lt;/a&gt; •  &lt;a href=&quot;#community&quot;&gt;Community&lt;/a&gt; •  &lt;a href=&quot;https://lightning.ai/&quot;&gt;Lightning AI&lt;/a&gt; •  &lt;a href=&quot;https://github.com/Lightning-AI/lightning/blob/master/LICENSE&quot;&gt;License&lt;/a&gt;&lt;/p&gt;&lt;!-- DO NOT ADD CONDA DOWNLOADS... README CHANGES MUST BE APPROVED BY EDEN OR WILL --&gt;[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytorch-lightning)](https://pypi.org/project/pytorch-lightning/)[![PyPI Status](https://badge.fury.io/py/pytorch-lightning.svg)](https://badge.fury.io/py/pytorch-lightning)[![PyPI Status](https://pepy.tech/badge/pytorch-lightning)](https://pepy.tech/project/pytorch-lightning)[![Conda](https://img.shields.io/conda/v/conda-forge/pytorch-lightning?label=conda&amp;color=success)](https://anaconda.org/conda-forge/pytorch-lightning)[![DockerHub](https://img.shields.io/docker/pulls/pytorchlightning/pytorch_lightning.svg)](https://hub.docker.com/r/pytorchlightning/pytorch_lightning)[![codecov](https://codecov.io/gh/Lightning-AI/lightning/release/2.0.4/graph/badge.svg)](https://codecov.io/gh/Lightning-AI/lightning)[![ReadTheDocs](https://readthedocs.org/projects/pytorch-lightning/badge/?version=2.0.4)](https://lightning.ai/docs/pytorch/stable/)[![Discord](https://img.shields.io/discord/1077906959069626439?style=plastic)](https://discord.gg/VptPCZkGNa)[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/Lightning-AI/lightning/blob/master/LICENSE)&lt;!--[![CodeFactor](https://www.codefactor.io/repository/github/Lightning-AI/lightning/badge)](https://www.codefactor.io/repository/github/Lightning-AI/lightning)--&gt;&lt;/div&gt;###### \*Codecov is &gt; 90%+ but build delays may show less______________________________________________________________________## PyTorch Lightning is just organized PyTorchLightning disentangles PyTorch code to decouple the science from the engineering.![PT to PL](../../https://github.com/Lightning-AI/lightning/raw/2.0.4/docs/source-app/_static/images/general/pl_quick_start_full_compressed.gif)______________________________________________________________________## Lightning Design PhilosophyLightning structures PyTorch code with these principles:&lt;div align=&quot;center&quot;&gt;  &lt;img src=&quot;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/philosophies.jpg&quot; max-height=&quot;250px&quot;&gt;&lt;/div&gt;Lightning forces the following structure to your code which makes it reusable and shareable:- Research code (the LightningModule).- Engineering code (you delete, and is handled by the Trainer).- Non-essential research code (logging, etc... this goes in Callbacks).- Data (use PyTorch DataLoaders or organize them into a LightningDataModule).Once you do this, you can train on multiple-GPUs, TPUs, CPUs, IPUs, HPUs and even in 16-bit precision without changing your code![Get started in just 15 minutes](https://lightning.ai/docs/pytorch/latest/starter/introduction.html)______________________________________________________________________## Continuous IntegrationLightning is rigorously tested across multiple CPUs, GPUs, TPUs, IPUs, and HPUs and against major Python and PyTorch versions.&lt;details&gt;  &lt;summary&gt;Current build statuses&lt;/summary&gt;&lt;center&gt;|       System / PyTorch ver.        |                                                                                              1.11                                                                                               |                                                                                                              1.12                                                                                                               | 1.13                                                                                                                                                                                                                            | 2.0  || :--------------------------------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---- ||        Linux py3.9 \[GPUs\]        |                                                                                                -                                                                                                | [![Build Status](&lt;https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20(GPUs)?branchName=refs%2Ftags%2F2.0.4&gt;)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=24&amp;branchName=master) | [![Build Status](&lt;https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20(GPUs)?branchName=refs%2Ftags%2F2.0.4&gt;)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=24&amp;branchName=master) | Soon ||        Linux py3.9 \[TPUs\]        |                                                                                                -                                                                                                |                     [![Test PyTorch - TPU](https://github.com/Lightning-AI/lightning/actions/workflows/tpu-tests.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/tpu-tests.yml)                     |                                                                                                                                                                                                                                 | Soon ||        Linux py3.8 \[IPUs\]        |                                                                                                -                                                                                                |                                                                                                                -                                                                                                                | [![Build Status](&lt;https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20(IPUs)?branchName=refs%2Ftags%2F2.0.4&gt;)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=25&amp;branchName=master) | Soon ||        Linux py3.8 \[HPUs\]        |                                                                                                -                                                                                                |                                                                                                                -                                                                                                                | [![Build Status](&lt;https://dev.azure.com/Lightning-AI/lightning/_apis/build/status/pytorch-lightning%20(HPUs)?branchName=refs%2Ftags%2F2.0.4&gt;)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=26&amp;branchName=master) | Soon ||  Linux (multiple Python versions)  | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | Soon ||   OSX (multiple Python versions)   | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | Soon || Windows (multiple Python versions) | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml) |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | Soon |&lt;/center&gt;&lt;/details&gt;______________________________________________________________________## How To Use### Step 0: InstallSimple installation from PyPI```bashpip install pytorch-lightning```&lt;!--  --&gt;### Step 1: Add these imports```pythonimport osimport torchfrom torch import nnimport torch.nn.functional as Ffrom torchvision.datasets import MNISTfrom torch.utils.data import DataLoader, random_splitfrom torchvision import transformsimport pytorch_lightning as pl```### Step 2: Define a LightningModule (nn.Module subclass)A LightningModule defines a full *system* (ie: a GAN, autoencoder, BERT or a simple Image Classifier).```pythonclass LitAutoEncoder(pl.LightningModule):    def __init__(self):        super().__init__()        self.encoder = nn.Sequential(nn.Linear(28 * 28, 128), nn.ReLU(), nn.Linear(128, 3))        self.decoder = nn.Sequential(nn.Linear(3, 128), nn.ReLU(), nn.Linear(128, 28 * 28))    def forward(self, x):        # in lightning, forward defines the prediction/inference actions        embedding = self.encoder(x)        return embedding    def training_step(self, batch, batch_idx):        # training_step defines the train loop. It is independent of forward        x, y = batch        x = x.view(x.size(0), -1)        z = self.encoder(x)        x_hat = self.decoder(z)        loss = F.mse_loss(x_hat, x)        self.log(&quot;train_loss&quot;, loss)        return loss    def configure_optimizers(self):        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)        return optimizer```**Note: Training_step defines the training loop. Forward defines how the LightningModule behaves during inference/prediction.**### Step 3: Train!```pythondataset = MNIST(os.getcwd(), download=True, transform=transforms.ToTensor())train, val = random_split(dataset, [55000, 5000])autoencoder = LitAutoEncoder()trainer = pl.Trainer()trainer.fit(autoencoder, DataLoader(train), DataLoader(val))```## Advanced featuresLightning has over [40+ advanced features](https://lightning.ai/docs/pytorch/latest/common/trainer.html#trainer-flags) designed for professional AI research at scale.Here are some examples:&lt;div align=&quot;center&quot;&gt;  &lt;img src=&quot;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/features_2.jpg&quot; max-height=&quot;600px&quot;&gt;&lt;/div&gt;&lt;details&gt;  &lt;summary&gt;Highlighted feature code snippets&lt;/summary&gt;```python# 8 GPUs# no code changes neededtrainer = Trainer(max_epochs=1, accelerator=&quot;gpu&quot;, devices=8)# 256 GPUstrainer = Trainer(max_epochs=1, accelerator=&quot;gpu&quot;, devices=8, num_nodes=32)```&lt;summary&gt;Train on TPUs without code changes&lt;/summary&gt;```python# no code changes neededtrainer = Trainer(accelerator=&quot;tpu&quot;, devices=8)```&lt;summary&gt;16-bit precision&lt;/summary&gt;```python# no code changes neededtrainer = Trainer(precision=16)```&lt;summary&gt;Experiment managers&lt;/summary&gt;```pythonfrom pytorch_lightning import loggers# tensorboardtrainer = Trainer(logger=TensorBoardLogger(&quot;logs/&quot;))# weights and biasestrainer = Trainer(logger=loggers.WandbLogger())# comettrainer = Trainer(logger=loggers.CometLogger())# mlflowtrainer = Trainer(logger=loggers.MLFlowLogger())# neptunetrainer = Trainer(logger=loggers.NeptuneLogger())# ... and dozens more```&lt;summary&gt;EarlyStopping&lt;/summary&gt;```pythones = EarlyStopping(monitor=&quot;val_loss&quot;)trainer = Trainer(callbacks=[es])```&lt;summary&gt;Checkpointing&lt;/summary&gt;```pythoncheckpointing = ModelCheckpoint(monitor=&quot;val_loss&quot;)trainer = Trainer(callbacks=[checkpointing])```&lt;summary&gt;Export to torchscript (JIT) (production use)&lt;/summary&gt;```python# torchscriptautoencoder = LitAutoEncoder()torch.jit.save(autoencoder.to_torchscript(), &quot;model.pt&quot;)```&lt;summary&gt;Export to ONNX (production use)&lt;/summary&gt;```pythonautoencoder = LitAutoEncoder()input_sample = torch.randn((1, 64))with tempfile.NamedTemporaryFile(suffix=&quot;.onnx&quot;, delete=False) as tmpfile:    autoencoder.to_onnx(tmpfile.name, input_sample, export_params=True)```&lt;/details&gt;### Pro-level control of optimization (advanced users)For complex/professional level work, you have optional full control of the optimizers.```pythonclass LitAutoEncoder(pl.LightningModule):    def __init__(self):        super().__init__()        self.automatic_optimization = False    def training_step(self, batch, batch_idx):        # access your optimizers with use_pl_optimizer=False. Default is True        opt_a, opt_b = self.optimizers(use_pl_optimizer=True)        loss_a = ...        self.manual_backward(loss_a, opt_a)        opt_a.step()        opt_a.zero_grad()        loss_b = ...        self.manual_backward(loss_b, opt_b, retain_graph=True)        self.manual_backward(loss_b, opt_b)        opt_b.step()        opt_b.zero_grad()```______________________________________________________________________## Advantages over unstructured PyTorch- Models become hardware agnostic- Code is clear to read because engineering code is abstracted away- Easier to reproduce- Make fewer mistakes because lightning handles the tricky engineering- Keeps all the flexibility (LightningModules are still PyTorch modules), but removes a ton of boilerplate- Lightning has dozens of integrations with popular machine learning tools.- [Tested rigorously with every new PR](https://github.com/Lightning-AI/lightning/tree/master/tests). We test every combination of PyTorch and Python supported versions, every OS, multi GPUs and even TPUs.- Minimal running speed overhead (about 300 ms per epoch compared with pure PyTorch).______________________________________________________________________## Examples###### Self-supervised Learning- [CPC transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#cpc-transforms)- [Moco v2 tranforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#moco-v2-transforms)- [SimCLR transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#simclr-transforms)###### Convolutional Architectures- [GPT-2](https://lightning-bolts.readthedocs.io/en/stable/models/convolutional.html#gpt-2)- [UNet](https://lightning-bolts.readthedocs.io/en/stable/models/convolutional.html#unet)###### Reinforcement Learning- [DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#dqn-loss)- [Double DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#double-dqn-loss)- [Per DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#per-dqn-loss)###### GANs- [Basic GAN](https://lightning-bolts.readthedocs.io/en/stable/models/gans.html#basic-gan)- [DCGAN](https://lightning-bolts.readthedocs.io/en/stable/models/gans.html#dcgan)###### Classic ML- [Logistic Regression](https://lightning-bolts.readthedocs.io/en/stable/models/classic_ml.html#logistic-regression)- [Linear Regression](https://lightning-bolts.readthedocs.io/en/stable/models/classic_ml.html#linear-regression)______________________________________________________________________## CommunityThe PyTorch Lightning community is maintained by- [10+ core contributors](https://lightning.ai/docs/pytorch/latest/community/governance.html) who are all a mix of professional engineers, Research Scientists, and Ph.D. students from top AI labs.- 680+ active community contributors.Want to help us build Lightning and reduce boilerplate for thousands of researchers? [Learn how to make your first contribution here](https://devblog.pytorchlightning.ai/quick-contribution-guide-86d977171b3a)PyTorch Lightning is also part of the [PyTorch ecosystem](https://pytorch.org/ecosystem/) which requires projects to have solid testing, documentation and support.### Asking for helpIf you have any questions please:1. [Read the docs](https://lightning.ai/docs/pytorch/latest).1. [Search through existing Discussions](https://github.com/Lightning-AI/lightning/discussions), or [add a new question](https://github.com/Lightning-AI/lightning/discussions/new)1. [Join our Discord community](https://discord.gg/VptPCZkGNa).</longdescription>
</pkgmetadata>