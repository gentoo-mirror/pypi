<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GatorGrade: A Python Tool to Implement GatorGraderGatorGrade is a Python tool that executes GatorGrader, an automatic grading toolthat can be used to check assignments through user-created checks. GatorGrade isthe newer Python-based version of[GatorGradle](https://github.com/GatorEducator/gatorgradle/blob/master/README.md).## Installing GatorGradeGatorGrade requires Python 3.7 or later. To install GatorGrade, we recommendusing the [`pipx`](https://pypa.github.io/pipx/) Python application installer.Once you have `pipx` installed, you can install GatorGrade by running`pipx install gatorgrade`.## Using GatorGradeTo use GatorGrade to run GatorGrader checks for an assignment, the assignmentmust contain a `gatorgrade.yml` file that defines the GatorGrader checks.Instructors, for more information on configuring the `gatorgrade.yml` file, seethe [Configuring GatorGrader Checks](#configuring-gatorgrader-checks) sectionbelow.To use GatorGrade to run GatorGrader checks, run the `gatorgrade` command withinthe assignment. This command will produce output that shows the passing(:heavy_check_mark:) or failing status (:x:) of each GatorGrader check as wellas the overall percentage of passing checks. The following is the output ofrunning GatorGrade on the [GatorGrade HelloWorld](https://github.com/GatorEducator/gatorgrade-hello-world/tree/main)assignment.```consoleRunning set up commands...Installing dependencies from lock fileNo dependencies to install or updateSetup complete!Finished!✔  Complete all TODOs✔  Call the say_hello function✔  Call the say_hello_color function✘  Complete all TODOs✘  Write at least 25 words in writing/reflection.md✔  Pass pylint✔  Have a total of 5 commits, 2 of which were created by you-~-  FAILURES  -~-✘  Complete all TODOs   → Found 3 fragment(s) in the reflection.md or the output✘  Write at least 25 words in writing/reflection.md   → Found 3 word(s) in total of file reflection.md        ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓        ┃ Passed 5/7 (71%) of checks for gatorgrade-hello-world! ┃        ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛```## Configuring GatorGrader ChecksInstructors can configure GatorGrader checks for an assignment by creating a`gatorgrade.yml` file. In this file, you can configure GatorGrader checks to runwithin a file context (i.e. for a specific file; `MatchFileFragment` is anexample of a GatorGrader check that should be run within a file context) _or_ inthe global context (i.e. for the assignment in general; `CountCommits` is anexample of a GatorGrader check that should be run in the global context).To configure GatorGrader checks to run within a file context, specify the pathto the file as a key (or nested keys) before specifying the GatorGrader checks.For each GatorGrader check, define a `description` to print in theoutput, the name of the `check`, and any `options` specific to the GatorGrader check.```yml- src:    - hello_world.py:        - description: Complete all TODOs          check: MatchFileFragment          options:            fragment: TODO            count: 0        - description: Define a print statement          check: MatchFileFragment          options:            fragment: print(            count: 1```To configure GatorGrader checks to run in the global context, specify theGatorGrader checks at the top level of the `gatorgrade.yml` file (i.e. notnested within any path).```yml- description: Have a total of 8 commits, 5 of which were created by you  check: CountCommits  options:    count: 8```### Using GatorGrade to Generate A Boilerplate `gatorgrade.yml` FileFor convenience, instructors can use GatorGrade to generate a boilerplate`gatorgrade.yml` file that contains files or folders given to the GatorGrade command.To generate a `gatorgrade.yml` file, run `gatorgrade generate &lt;TARGET_PATH_LIST&gt;`,where `&lt;TARGET_PATH_LIST&gt;` is a list of relative paths to files or folders youwant to include in the `gatorgrade.yml` file. These paths must correspond toexisting files or folders in the current directory. Any given folders will beexpanded to the files they contain. Please note that files and folders thatstart with `__` or `.` and empty folders will be automatically ignored.## Contributing to GatorGradeIf you would like to contribute to GatorGrade, please refer to the [GatorGradeWiki](https://github.com/GatorEducator/gatorgrade/wiki/Contributing-Guidelines)for contributing guidelines.</longdescription>
</pkgmetadata>