<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>### table of content### disclaimerThis package is free of uses, modifications for any project.### why ?If you want to implement menus in your pygame app in python without recoding every classic widgets, this is for you. Pygame_easy_menu allow you to link your windows to a menu_manager that you can toggle or not. It will then allow you to add widget to every menu with pre-code functions.### installationcommand :```python -m pip install pygame_easy_menu```## How to use ?To use menu in your pygame window you first need to initiate a menu manager, this class will be link to your pygame window and allow you to add menu, activate and desactivate it.You can then add sprite to your menu and define their function trigger on pygame event.### link your window or make onecreate a new window : ```pythonfrom pygame_easy_menu import *from pygame_easy_menu.tools import *import pygamepygame.init()menu_manager = Menu_Manager(name=&quot;MySuperGame&quot;, size=Vector2(1000,800), background=BG)```link the library to an already existing window :```pythonfrom pygame_easy_menu import *from pygame_easy_menu.tools import BG # a free background image for your tests&quot;&quot;&quot;[...] your previous code&quot;&quot;&quot;menu_manager = Menu_Manager(window=win, background=BG) # win is your pygame window```### add menuto add a menu you juste need to create it with the Menu class and it will automatically be added to your menu manager. To select the menu at screen of the menu manager, you need to store it in the ``actual_menu`` attribute. Every time a new menu is store in ``actual_menu`` the setup fonction of the menu will be executed.```python# to add a menu :principal = Menu(&quot;principale&quot;)# you can also select a specific background for a menusecond = Menu(&quot;second&quot;,background=&quot;myimage.png&quot;)menu_manager.actual_menu = principal #this will change the actual menu of your game, if your menu manager is running this attribute can't be empty.```To edit the setup function of a menu you need to use the decorator set_setup add pass any function under it, the decorator will update the setup function automatically.```python@principal.set_setupdef setup():    # you can name your function like you want    # your stuff here```### add spriteTo add a sprite to a menu you need to declare a function where you return a sprite based class and put it under the ``add_sprite`` decorator of you menu. If you want to create your own sprite class you need to pass the ``sprite`` class in its inherance.```python@principal.add_spritedef back_button():    _button = Button(        name=&quot;mybutton&quot;,        path= &quot;myimageofbutton.png&quot;      )    &quot;&quot;&quot;    put the config of your button here    &quot;&quot;&quot;    return _button```there currently are the following widget : AlertBox,InputBox,Button,textZone,sprite### run the menu_managerTo run the you need to start the ``menu_manager.run()`` function, this function will run until ``menu_manager.running`` is False. You need to put this function at the end of your code or in a function if you don't want your code to be stucked.You can the stop the manager by calling ``menu_manager.stop()`` if you want to close the menu and launch back the game. You can also completly stop the program by calling ``menu_manager.destroy()``.## menu functions and parameters### child and parentsEvery menu can be link with other menu by parent/child system. This way you can retreive a menu either with your global variable or by menu's functions.One menu can have multiple children but only one parent. When you define your Menu you can also pass name of children or future children, or the name of its parent. Warning if you say that a menu is the children of a parent menu, the name wont be automatically add to the list of the other instance (for now).Add a child :```pythonprincipal = Menu(&quot;principal&quot;,childs=[&quot;second&quot;])```Add a parent :```pythonsecond = Menu(&quot;second&quot;,parent=&quot;principal&quot;,childs=&quot;third&quot;)```// childs parameter can be either a list or a string.You can then when the menu_manager is running get one child of your menu or its parent.Get a child : Menu.get_child(self,child_name)```pythonmychilds = second.get_child(&quot;third&quot;)```Get all children (return a generator) : Menu.get_childs(self)```python# return a generator you can itter infor child in second.get_childs():    &quot;&quot;&quot;    your code here    &quot;&quot;&quot;# to transform to a listmychild = [child for child in second.get_childs()]```Get the parent : Menu.get_parent(self)```pythonmychilds = second.get_parent()```### spritesOnce you add a sprite to a Menu you can then access it with either the list of sprite or with the ``get_sprite`` function.Get a sprite : Menu.get_sprite(self,name)```python_button = second.get_sprite(&quot;mybutton&quot;)# you can also itter in the list directlyfor _button in second.sprites:    &quot;&quot;&quot;    your code here    &quot;&quot;&quot;```## sprite functions and parameters### SpriteEach widget is a derivate from the sprite class, those fonctions are in most cases in other widget.add a sprite : Sprite.add_sprite(self,sprite)```python@main_menu.add_spritedef my_sprite():    _sprite = Sprite(        name=&quot;my_sprite&quot;,        path=&quot;myimage.png&quot;,        manager=menu_manager    )    &quot;&quot;&quot;    Put your config here    &quot;&quot;&quot;    return _sprite```change postion : Sprite.set_positon(pos:Vector2)```python_sprite.set_position(Vector2(110,250)) # absolute position_sprite.set_position(Vector2(0.5,0.33)) # position in percentage of the screen```change scale : Sprite.set_scale(pos:Vector2)```python_sprite.set_scale(Vector2(110,250)) # absolute scale_sprite.set_scale(Vector2(0.5,0.33)) # scale in percentage of the previous surface size```add function on event : Sprite.Event(_event:pygame.Event)(function)```python@_sprite.Event(pygame.QUIT)def debug_bye(event):    &quot;&quot;&quot;    your code here    &quot;&quot;&quot;```this function will we executed each time the event pygame.QUIT is raise.### ButtonA Button is a derivate of the sprite class.Button has the decorator on click : Button.on_click(self,function)```python@main_menu.add_spritedef my_button():    _button = Button(        name=&quot;mybutton&quot;,        path= &quot;myimageofbutton.png&quot;,        manager=menu_manager    )    &quot;&quot;&quot;    put the config of your button here    &quot;&quot;&quot;    @_Button.on_click    def debug(event):        &quot;&quot;&quot;        your code here        &quot;&quot;&quot;        return _button```this function will we executed each time the button is clicked.### TextBoxA TextBox is a derivate of the sprite class.```python@_textbox.on_change```### InputBox### Alert boox## exemple code```pythonfrom pygame_easy_menu import *from pygame_easy_menu.tools import BG,B_BGimport pygamepygame.init()menu_manager = Menu_Manager(name=&quot;mygame&quot;,size=Vector2(1000,800),background=BG)main_menu = Menu(name=&quot;Main&quot;)@main_menu.add_spritedef play_button():    _button = Button(        name = &quot;Play_Button&quot;,        path = B_BG    )    _button.set_position(Vector2(0.5,0.33))    _button.set_text(&quot;Play&quot;,padding=0.15)    @_button.on_click    def launch():        print(&quot;my game is launch&quot;)    return _button@main_menu.add_spritedef exit_button():    _button = Button(        name = &quot;Exit_button&quot;,        path = B_BG    )    _button.set_position(Vector2(0.5,0.66))    _button.set_text(&quot;Exit&quot;,padding=0.15)    @_button.on_click    def launch():        menu_manager.destroy()    return _buttonmenu_manager.actual_menu = main_menuif __name__ == &quot;__main__&quot;:    try:        menu_manager.run()    except KeyboardInterrupt:        menu_manager.destroy()```# a faireajouter icon par d√©faut dans le module pour exemple codefinir read mehow to run the menu</longdescription>
</pkgmetadata>