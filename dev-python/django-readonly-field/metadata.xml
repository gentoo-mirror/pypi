<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=============================Django Readonly Field=============================.. image:: https://badge.fury.io/py/django-readonly-field.png    :target: https://pypi.org/pypi/django-readonly-field.. image:: https://travis-ci.org/peopledoc/django-readonly-field.png?branch=master    :target: https://travis-ci.org/peopledoc/django-readonly-field.. image:: https://img.shields.io/codecov/c/github/peopledoc/django-readonly-field/master.svg    :target: https://codecov.io/github/peopledoc/django-readonly-field?branch=masterMake some Django model fields readonly. In other words, it lets you tell Django toread some fields from your database, but never try to write those back. It can beuseful if your fields are populated by triggers or something.Requirements------------+ **Postgresql only**+ Django, tested from 2.2 to 4.1+ With Python, tested from 3.7 to 3.11Documentation-------------The full documentation is at https://django-readonly-field.readthedocs.org.Quickstart----------Install Django Readonly Field::    pip install django-readonly-fieldIn your ``settings.py`` :.. code-block:: python    INSTALLED_APPS = [        # ...        &quot;django_readonly_field&quot;,    ]In the model where you want some fields to be read-only:.. code-block:: python    class Spaceship(models.Model):        name = models.CharField(max_length=100)        color = models.CharField(max_length=16)        class ReadonlyMeta:            readonly = [&quot;color&quot;]That's it. Now, Django won't try to write the ``color`` field on the database.Warning-------Django won't try to write those fields. Consequence is that your Database**must** be ok with Django not writing those fields. They should eitherbe nullable or have a database default or be filled by a trigger, otherwiseyou will get an ``IntegrityError``.Don't forget that Django model field defaults won't become database defaults.You might have to write an SQL migration for this.Running Tests--------------You will need a usable Postgresql database in order to test the project.::    source &lt;YOURVIRTUALENV&gt;/bin/activate    export DATABASE_URL=postgres://USER:PASSWORD@HOST:PORT/NAME    (myenv) $ pip install -r requirements.txtRun tests for a specific version::    (myenv) $ pytestRun tests for all versions (if tox is installed globally, you don't need avirtual environment)::    $ toxCredits---------Tools used in rendering this package:*  Cookiecutter_*  `cookiecutter-djangopackage`_.. _Cookiecutter: https://github.com/audreyr/cookiecutter.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage</longdescription>
</pkgmetadata>