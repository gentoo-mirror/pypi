<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://s4.ax1x.com/2022/02/14/Hy7lAf.png&quot; width=&quot;350px&quot;&gt;**An Open-Source Framework for Paramter-Efficient Tuning (Delta Tuning).**------&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#Overview&quot;&gt;Overview&lt;/a&gt; •  &lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt; •  &lt;a href=&quot;https://opendelta.readthedocs.io/en/latest/notes/usage.html&quot;&gt;Basic Usage&lt;/a&gt; •   &lt;a href=&quot;https://opendelta.readthedocs.io/&quot;&gt;Docs&lt;/a&gt; •   &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1BIVa8ocAPga-u7rBOXLYaTfaJSjI1dWfwohmLjmFDrY/edit?usp=sharing&quot;&gt;Performance&lt;/a&gt; •&lt;/p&gt;&lt;/div&gt;![version](https://img.shields.io/badge/version-0.0.1-blue)## OverviewOpenDelta is a toolkit for parameter-efficient tuning methods (we dub it as *delta tuning*), by which users could flexibly assign (or add) a small amount parameters to update while keeping the most paramters frozen. By using OpenDelta, users could easily implement prefix-tuning, adapters, Lora, or any other types of delta tuning with preferred PTMs.- The latest version of OpenDelta is tested on Python==3.8.13, PyTorch==1.12.1, transformers==4.22.2. Other versions are likely to be supported as well. If you encounter bugs when using your own package versions, please raise an issue, we will look into it as soon as possible. - **A demo of using Opendelta to modify the PLM (E.g., BART).**![How PLM changes using Delta-tuning](docs/source/imgs/demo.gif)## News- **2022.10.25** Release v0.3.2. Support [BMTrain]()! Improve docs. Add inspect utilities.- **2022.10.14** Release v0.3.0. We make the usage of default configurations of each delta tuning methods (i.e., the position they are attached) more friendly! If a custom model has our supported models as submodules inside, the default configuration is also available. Other key changes can be seen in [Update Log](https://opendelta.readthedocs.io/en/latest/notes/update.html#version-0-3-0)- **2022.10.10** Merge a long-developed branch v0.2.4 into the master branch. Key updates are (1) the an example unifying the delta tuning paradigm and the prompt-tuning paradigm; (2) and support for [Delta Center](https://www.openbmb.org/toolKits/deltacenter), whose webpage is still under construction. Details can be seen in [Update Log](https://opendelta.readthedocs.io/en/latest/notes/update.html#version-0-2-4)- **2022.03.24** We notice several bugs in Soft Prompt Tuning and Prefix Tuning, mainly due to their need to customize attention ids, token_type_ids, we are fixing it! Currently, please use the other methods since they are stabler and better in performance. - **2022.03.20** Add a [colab example](https://colab.research.google.com/drive/1uAhgAdc8Qr42UKYDlgUv0f7W1-gAFwGo?usp=sharing) to illustrate efficient training and space-saving multitask-serving.- **2022.03.20** A new pip version released.- **2022.02.16** Support [regular expression](https://opendelta.readthedocs.io/en/latest/notes/namebasedaddr.html#regexexpr) in named-based addressing. ## Installation1. create a virtualenv (optional)```shellconda create -n opendelta_env python=3.8conda activate opendelta_env```2 install the lastest version```bashpip install git+https://github.com/thunlp/OpenDelta.git```**or** install the lastest pip version (more stable)```bashpip install opendelta```**or** build from source```bashgit clone git@github.com:thunlp/OpenDelta.gitcd OpenDeltapython setup.py install# python setup.py develop # if you want to do some modifications on the code for your research:```## Must TryThe following codes and comments walk you through the key functionality of OpenDelta. It is also in [must_try.py](https://github.com/thunlp/OpenDelta/tree/main/examples/unittest/must_try.py) and [must_try.ipynb in colab](https://colab.research.google.com/drive/1Nbe9zxt8LGQnKmtvEs07IN_PznjNCyk4?usp=sharing).```python# use tranformers as usual.from transformers import AutoModelForSeq2SeqLM, AutoTokenizert5 = AutoModelForSeq2SeqLM.from_pretrained(&quot;t5-large&quot;)t5_tokenizer = AutoTokenizer.from_pretrained(&quot;t5-large&quot;)# A running exampleinputs_ids = t5_tokenizer.encode(&quot;Is Harry Poter wrtten by JKrowling&quot;, return_tensors=&quot;pt&quot;)t5_tokenizer.decode(t5.generate(inputs_ids)[0]) # &gt;&gt;&gt; '&lt;pad&gt;&lt;extra_id_0&gt;? Is it Harry Potter?&lt;/s&gt;'# use existing delta modelsfrom opendelta import AutoDeltaModel, AutoDeltaConfig# use existing delta models from DeltaCenterdelta = AutoDeltaModel.from_finetuned(&quot;thunlp/Spelling_Correction_T5_LRAdapter_demo&quot;, backbone_model=t5)# freeze the whole backbone model except the delta models.delta.freeze_module()# visualize the changedelta.log()t5_tokenizer.decode(t5.generate(inputs_ids)[0]) # &gt;&gt;&gt; &lt;pad&gt; Is Harry Potter written by JK Rowling?&lt;/s&gt;# Now save merely the delta models, not the whole backbone model, to tmp/delta.save_finetuned(&quot;.tmp&quot;)import os; os.listdir(&quot;.tmp&quot;)# &gt;&gt;&gt;  The state dict size is 1.443 MB# &gt;&gt;&gt;  We encourage users to push their final and public models to delta center to share them with the community!# reload the model from local url and add it to pre-trained T5.t5 = AutoModelForSeq2SeqLM.from_pretrained(&quot;t5-large&quot;)delta1 = AutoDeltaModel.from_finetuned(&quot;.tmp&quot;, backbone_model=t5)import shutil; shutil.rmtree(&quot;.tmp&quot;) # don't forget to remove the tmp files. t5_tokenizer.decode(t5.generate(inputs_ids)[0]) # &gt;&gt;&gt; &lt;pad&gt; Is Harry Potter written by JK Rowling?&lt;/s&gt;# detach the delta models, the model returns to the unmodified status.delta1.detach()t5_tokenizer.decode(t5.generate(inputs_ids)[0])  # &gt;&gt;&gt; '&lt;pad&gt;&lt;extra_id_0&gt;? Is it Harry Potter?&lt;/s&gt;'# use default configuration for cunstomized wrapped models which have PLMs inside. This is a common need for users. import torch.nn as nnclass WrappedModel(nn.Module):  def __init__(self, inner_model):    super().__init__()    self.inner = inner_model  def forward(self, *args, **kwargs):    return self.inner(*args, **kwargs)wrapped_model = WrappedModel(WrappedModel(t5))# say we use LoRAdelta_config = AutoDeltaConfig.from_dict({&quot;delta_type&quot;:&quot;lora&quot;})delta2 = AutoDeltaModel.from_config(delta_config, backbone_model=wrapped_model)delta2.log()# &gt;&gt;&gt; root#       -- inner#          -- inner#             ...#             ... lora_A:[8,1024], lora_B:[1024,8]delta2.detach()# use a not default configuration# say we add lora to the last four layer of the decoder of t5, with lora rank=5delta_config3 = AutoDeltaConfig.from_dict({&quot;delta_type&quot;:&quot;lora&quot;, &quot;modified_modules&quot;:[&quot;[r]decoder.*((20)|(21)|(22)|(23)).*DenseReluDense\.wi&quot;], &quot;lora_r&quot;:5})delta3 = AutoDeltaModel.from_config(delta_config3, backbone_model=wrapped_model)delta3.log()```## Verified Default Configurations  - **You can try to use OpenDelta on *any* backbone models based on PyTorch.**  - However, with small chances that the interface of the submodules of the backbone model is not supported. Therefore we verified some commonlyused models that OpenDelta are sure to support.- We will keep testing more and more emerging models.- Pull requests are welcomed when you successfully apply OpenDelta on your own backbone model.</longdescription>
</pkgmetadata>