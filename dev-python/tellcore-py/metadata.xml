<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Python wrapper for Telldus Core===============================.. image:: https://badge.fury.io/py/tellcore-py.png    :target: https://pypi.python.org/pypi/tellcore-py/.. image:: https://secure.travis-ci.org/erijo/tellcore-py.png?branch=master    :target: http://travis-ci.org/erijo/tellcore-pytellcore-py is a Python wrapper for `Telldus' &lt;http://www.telldus.com/&gt;`_ homeautomation library `Telldus Core &lt;http://developer.telldus.se/doxygen/&gt;`_.* Documentation: https://tellcore-py.readthedocs.org/* Official home page: https://github.com/erijo/tellcore-py* Python package index: https://pypi.python.org/pypi/tellcore-pyPlease report any problem as a `GitHub issue report&lt;https://github.com/erijo/tellcore-py/issues/new&gt;`_.Features--------* Wraps the C-interface with a python interface (with classes and exceptions).* Automatically frees memory for returned strings.* Throws an exception (TelldusError) in case a library function returns an  error.* Supports python 3 with automatic handling of strings (i.e. converting between  bytes used by the C-library and strings as used by python).* Takes care of making callbacks from the library thread-safe.* Unit tested.* Besides being useful with the regular Python implementation (a.k.a. `CPython  &lt;http://en.wikipedia.org/wiki/CPython&gt;`_), it also works with `pypy  &lt;http://pypy.org/&gt;`_.* Open source (`GPLv3+  &lt;https://github.com/erijo/tellcore-py/blob/master/LICENSE.txt&gt;`_).* Works on Linux, Mac OS X and Windows.Requirements------------* Python 2.7, 3.2+ or pypy* `Telldus Core library &lt;http://telldus.com/products/nativesoftware&gt;`_Installation------------.. code-block:: bash    $ pip install tellcore-pyCan also be installed by cloning the `GIP repository&lt;https://github.com/erijo/tellcore-py&gt;`_ or downloading the `ZIP archive&lt;https://github.com/erijo/tellcore-py/archive/master.zip&gt;`_ from GitHub andunpacking it. Then change directory to tellcore-py and run:.. code-block:: bash    $ python setup.py installUsers-----* `Home Assistant &lt;https://home-assistant.io&gt;`_ - Open-source home automation  platform running on Python 3* `Tellprox &lt;https://github.com/p3tecracknell/tellprox/&gt;`_ - A local server to  use in place of Telldus Live* `tellive-py &lt;https://github.com/erijo/tellive-py&gt;`_ - A Python wrapper for  Telldus LiveExample-------A simple example for adding a new &quot;lamp&quot; device, turning it on and then turningall devices off... code-block:: python    from tellcore.telldus import TelldusCore    core = TelldusCore()    lamp = core.add_device(&quot;lamp&quot;, &quot;arctech&quot;, &quot;selflearning-switch&quot;, house=12345, unit=1)    lamp.turn_on()    for device in core.devices():        device.turn_off()More examples can be found in the `bin&lt;https://github.com/erijo/tellcore-py/tree/master/bin&gt;`_ directory.Internals---------At the bottom there is the Library class which is a `ctypes&lt;http://docs.python.org/library/ctypes.html&gt;`_ wrapper and closely matches theAPI of the underlying Telldus Core library. The library class takes care offreeing memory returned from the base library and converts errors returned toTelldusException. The library class is not intended to be used directly.Instead, the TelldusCore class provides a more python-ish API on top of thelibrary class. This class is used for e.g. adding new devices, or enumeratingthe existing devices, sensors and/or controllers. E.g. calling the devices()method returns a list of Device instances. The Device class in turn has methodsfor turning the device on, off, etc.Changelog=========1.1.3 (2016-11-22)------------------* Added datetime attribute to ``SensorValue``.* Fixed strange problem in ``Library`` where the class itself could  sometimes be None in ``__del__``.1.1.2 (2015-06-24)------------------* Added option to ``Library`` to make it possible to select if strings should  be decoded or not.* Made tellcore_tool not decode strings (i.e. convert to unicode) when running  under Python 2.x to avoid unicode errors when printing non ascii characters.1.1.1 (2015-05-01)------------------* Fixed a bug that made tellcore_tool not work with Python 3.x.1.1.0 (2014-11-19)------------------* The callback dispatcher is no longer global, but tied to a ``Library``  instance. Applications wishing to use callbacks must now pass an explicit  dispatcher instance to the ``TelldusCore`` constructor.1.0.4 (2014-11-05)------------------* Made ``last_sent_value`` return an int instead of string.1.0.3 (2014-02-02)------------------* Work around crash in Telldus Core (&lt; v2.1.2) when re-initalizing the library  after ``tdClose``.1.0.2 (2014-01-28)------------------* Packaging fixes.1.0.1 (2014-01-26)------------------* Added ``AsyncioCallbackDispatcher`` class for integrating callbacks with the  new event loop available in Python 3.4 (asyncio).* Include tools from bin/ when installing.1.0.0 (2014-01-09)------------------* Added high level support for device groups in the form of the new class  ``DeviceGroup``.* More complete documentation.* Removed the methods process_callback and process_pending_callbacks from  ``TelldusCore``. Instead, callback_dispatcher is now a public attribute of  ``TelldusCore`` and the default callback dispatcher  ``QueuedCallbackDispatcher`` implements the two methods instead.0.9.0 (2014-01-03)------------------* Telldus functions that used to return bool (``tdSetName``, ``tdSetProtocol``,  ``tdSetModel``, ``tdSetDeviceParameter`` and ``tdRemoveDevice``) now raise an  exception instead of returning False.* Support for rain- and windsensors.* Include data type in ``SensorValue``.0.8.0 (2013-08-11)------------------* Improved callback handling to simplify integration with different event  loops. Parameter conversion is now done in the library code and the  adaptation to different event loops is done by a simple callback dispatch  class. The default dispatcher (when using ``TelldusCore``) is still done  using a queue.* New documentation for parts of the package. Can be read online at  https://tellcore-py.readthedocs.org/.* Fix problem with strings and python 3 (issue #2).0.1.0 (2013-06-26)------------------* First release.</longdescription>
</pkgmetadata>