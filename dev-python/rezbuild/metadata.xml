<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># RezbuildRezbuild is a python library for build rez packages. Please visit the [Rez website](https://github.com/nerdvegas/rez) for more information about rez.点击 [这里](https://gitlab.com/Pili-Pala/rezbuild/-/blob/main/README_zh_CN.md)访问 Rezbuild 的中文文档。## DescriptionThis project is a tool to build rez packages. It simplifies the build process.Rezbuild support build rez package by python wheel, python source archive,python source, archive file, unix source, macOS pkg and macOS dmg.## Installation### requisitesRezbuild requires the python-3.6+, build-0.3+(lower version did not test) andpip-18+ to run.### InstallThere are 3 ways to install rezbuild, choose according to your own situation.#### 1.Install by source for rez(New in rezbuild, or do not have rezbuild in you environment)If you are new in rezbuild, or there's no other version of rezbuild in you rezenvironment, you can use rez to install this package from source. Make sure allthe requirement already installed into you rez environment(python-3.6+,build-0.3+, pip-18+).Then, clone this project, cd the source root and run the rez install command:```shellgit clone git@gitlab.com:Pili-Pala/rezbuild.gitcd rezbuildrez build -i```#### 2.Install by itself(Need rezbuild in you rez repository)Rezbuild can install by itself. Make sure you have all the requirements areinstalled into rez environment, include rezbuild (another version of thispackage). Download wheel file from[PyPI](https://pypi.org/project/rezbuild/#files). Then create a directory likethis:```textinstall_rezbuild/├── build.py├── package.py└── installers/    └── rezbuild-0.14.1-py3-none-any.whl```The content of build.py can be like this:```python# build.pyfrom rezbuild.builder import PythonWheelBuilderif __name__ == '__main__':    builder = PythonWheelBuilder()    builder.build()```The content of package.py can be like this:```python# package.pyname = &quot;rezbuild&quot;version = &quot;version of this package you download&quot;requires = [    &quot;build-0.3+&quot;,    &quot;pip-18+&quot;,    &quot;python-3.6+&quot;,]private_build_requires = [    &quot;rezbuild&quot;,]build_command = 'python {root}/build.py {install}'def commands():    env.PYTHONPATH.append(&quot;{root}/site-packages&quot;)```Then, run this command in the root directory `rez build -i`.After that, this package will be installed as a rez package.#### 3.Install from pypiOf course, you can install this package from pip```shellpip install rezbuild```As this package is for rez, install from pypi doesn't make sense in most of thetime.## UsageAfter 2.70.0, rez removed the bez build system. So rezbuild based onrez-2.70.0.### Build from python wheel file(PythonWheelBuilder)I assume that you already know what is rez, how to make a package.py, and nowyou want to build a third-party python package come from the internet.First, add a build file into you package root, just like a file named`build.py`. The content can be like this:```python# Import third-party modulesfrom rezbuild import PythonWheelBuilderif __name__ == '__main__':    PythonWheelBuilder().build()```Then add variable `build_command` into the `package.py` file,content should be like this: `build_command = 'python {root}/build.py {install}'`.After that, go to [PyPI](https://pypi.org) to download the wheel file and putthe file into `source_root/installers`. The tree should like this:```textsource_root/├── build.py├── package.py└── installers/    └── the_package_you_want_to_install.whl```Finally, change directory to source_root and run the command `rez build -i`,the package will be installed.### Build from python source code(PythonSourceBuilder)PythonSourceBuilder is used to build rez package from python source whichmeeting the requirements of Python official structure. The source structureplease refer to[python official website](https://packaging.python.org/en/latest/tutorials/packaging-projects/).The source structure should like this:```textsource_root/├── build.py├── package.py├── pyproject.toml├── setup.cfg└── src/    └── module/        └── __init__.py```The content of `build.py`:```python# Import third-party modulesfrom rezbuild import PythonSourceBuilderif __name__ == '__main__':    PythonSourceBuilder().build()```Then ensure you already make all the necessary files to build a python package.`PythonSourceBuilder` will use the official way to build the package.Then run the command `rez build -i`, the package will be build and installed.### Build from the python source archive fileSome packages only supply the python source archive file, we can use thePythonSourceArchiveBuilder builder to build.### Copy build(CopyBuilder)Sometimes we don't want to use the official way to build rez package(metadatawill be missing if we don't use the official way), but only copy the code. UseCopyBuilder can build package by only copy the source code. The default sourcepath is the folder named `src` under the source root. Pass the path to the rootparameter in build method to custom the source path. build.py file should likethis:```python# Import built-in modulesimport os# Import third-party modulesfrom rezbuild import CopyBuilderif __name__ == '__main__':    builder = CopyBuilder()    builder.build(root=os.path.join(builder.source_path, &quot;example_package&quot;))```### Build from Archive file(ExtractBuilder)ExtractBuilder can extract the archive file to build rez package.ExtractBuilder now support zip, tar.gz, tar.xz and 7z.exe.`build.py`:```python# Import third-party modulesfrom rezbuild import ExtractBuilderif __name__ == '__main__':    ExtractBuilder().build()```Put the archive file into `installers` folder.```textsource_root/├── build.py├── package.py└── installers/    └── archive.zip```### Build from source code(CompileBuilder)CompileBuilder support use `configure` and `make` command to build packageon Linux and macOS. The arguments of configure is passed by theextra_config_args parameter of CompileBuilder.build method.`build.py` 如下:```python# Import third-party modulesfrom rezbuild import CompileBuilderif __name__ == '__main__':    CompileBuilder().build(extra_config_args=[&quot;LDFLAGS=-L/path/to/lib&quot;])```Put the source archive file into installers folder.```textsource_root/├── build.py├── package.py└── installers/    └── git-2.32.0.tar.gz```### Build from dmg file(MacOSDmgBuilder)Make `build.py` like this:```python# Import third-party modulesfrom rezbuild import MacOSDmgBuilderif __name__ == '__main__':    MacOSDmgBuilder().build()```Put archive file into `installers` folder.```textsource_root/├── build.py├── package.py└── installers/    └── installer.dmg```Then run command `rez build -i` from `source_root`.`MacOSDmgBuilder` will create a shell script in the package root, has a samewith the `.app` folder. Set `create_shell` to `False` to prevent his creation.For example: `MacOSDmgBuilder().build(create_shell=False)`### Custom builderYou can customize a builder for you code from base builder. Just make a builderinherit from RezBuilder and rewrite `custom_build` function. Follow willintroduce all the default builder from rezbuild so that you can use them tocustomize you own builder.#### RezBuilder`RezBuilder` is the root builder, all the builder inherit from it. It gets therez environment, make sure the workspace, install package, and execute youcustom build function.For example:```python# Import built-in modulesimport osimport shutil# Import third-party modulesfrom rezbuild import RezBuilderclass CustomBuilder(RezBuilder):    def custom_build(self):        shutil.copytree(os.path.join(self.source_path, &quot;src&quot;), self.build_path)if __name__ == '__main__':    CustomBuilder().build()```build function will invoke the custom_build function to build the package.### Multiple variantIf you need to install a multi-variant package with different installers foreach variant, you can put the installers into the folders that named with thevariant index under the `installers` folder. For example:```textgit/    |___installers/        |___0            |___PortableGit-2.32.0.2-64-bit.7z.exe        |___1            |___git-2.32.0.tar.xz    |___build.py    |___package.py```Rezbuild will get all the installers under the variant folder when building it.## API### builder module### RezBuilder()`RezBuilder` is the root builder, any other builder is inherited from it. RezBuilder load the environment variables, makesure the workspace, install thepackage and execute the custom build method.### RezBuilder.build_pathBuild path. The rez default directory.### RezBuilder.install_pathInstall path. Default is ~/packages.### RezBuilder.source_pathThe source path.### RezBuilder.workspaceWorkspace. All the files and folders will be copied to the installation path.### RezBuilder.namePackage name.### RezBuilder.versionBuild version.### RezBuilder.variant_indexVariant index.### RezBuilder.build(**kwargs) -&gt; NoneBuild method, trigger the build process. This method will invoke the custombuild method of the subclass to run the build.kwargs: Accept all the key word arguments to pass to the custom_build method.## VersioningWe use [SemVer](http://semver.org/) for versioning. For the versions available,see the [tags on this repository](https://gitlab.com/Pili-Pala/rezbuild/tags).## Author[PiliPala](https://gitlab.com/Pili-Pala)## License[GPLv3](https://www.gnu.org/licenses/gpl-3.0.txt)</longdescription>
</pkgmetadata>