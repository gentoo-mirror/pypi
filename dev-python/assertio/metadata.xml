<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AssertioPseudo-functional Python api testing framework.## Installation`pip install assertio`## Basic UsageAssertio consists on create requests on a chain way, you can organizethis requests within a Runner class in order to define test cases.You can find below an example using the [Pokemon API](https://pokeapi.co)```python# main.pyfrom assertio import Request, Runnerclass MyRunner(Runner):    def test_get_pikachu(self):        Request()\            .to(&quot;/pokemon/pikachu&quot;)\            .with_method(&quot;GET&quot;)\            .perform()\            .assert_http_ok()\            .assert_response_field(&quot;name&quot;)\            .equals(&quot;pikachu&quot;)MyRunner().start()```This will run all the defined methods within `MyRunner` as long as they startwith `test`.Wait, where should I add my API URL? Well you can export an enviromnent variable for that!```bash$ export ASSERTIO_BASE_URL=https://pokeapi.co/api/v2```Once this environment variable is setup let's start the test!```bash$ python main.py```Should do the trick!But that's not it!Assertio has many assertions defined and is flexible enough to let you defineyour custom assertions and preconditions.You can chain as many assertions and preconditions as you want, just rememberto keep it simple, if your request chain is 15 lines long, maybe it's timeto consider to split it in smaller tests.Anyway, let's take a look to a more complex example using a POST to a customAPI.Remember to change the `ASSERTIO_BASE_URL` environment variable```bash$ export ASSERTIO_BASE_URL=http://my-books-api-domain/api/v1```And let's try to add a new resource.```python# main.pyfrom assertio import Request, RunnerDEFAULT_HEADERS = {&quot;Content-Type&quot;: &quot;application/json&quot;}BOOK_PAYLOAD = {    &quot;id&quot;: 144,    &quot;title&quot;: &quot;The Divine Comedy&quot;,     &quot;author&quot;: {        &quot;id&quot;: 12,        &quot;name&quot;: &quot;Dante Alighieri&quot;,        &quot;nationality&quot;: &quot;Italian&quot;    },     &quot;year&quot;: 1472}class MyRunner(Runner):    def test_create_book(self):        Request()\            .to(&quot;/books/&quot;)\            .with_method(&quot;POST&quot;)\            .with_headers(DEFAULT_HEADERS)\            .with_body(BOOK_PAYLOAD)\            .perform()\            .assert_http_created()\            .assert_response_field(&quot;author.nationality&quot;)\            .equals(&quot;Italian&quot;)MyRunner().start()```All the tests must start with `test`! Otherwise `start()` method will not run it</longdescription>
</pkgmetadata>