<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SolarEnergy![PyPI](https://img.shields.io/pypi/v/solarenergy?color=%230A0)![PyPI - Downloads](https://img.shields.io/pypi/dm/solarenergy)[![Code check](https://github.com/MarcvdSluys/SolarEnergy/actions/workflows/code-check.yml/badge.svg)](https://github.com/MarcvdSluys/SolarEnergy/actions/workflows/code-check.yml)[![DocumentationStatus](https://readthedocs.org/projects/solarenergy/badge/?version=latest)](https://solarenergy.readthedocs.io/en/latest/?badge=latest)![PyPI - Licence](https://img.shields.io/pypi/l/solarenergy?color=%230A0)A Python module to do simple modelling in the field of solar energy.  The code is being developed by [Marc vander Sluys](http://marc.vandersluys.nl) of the department of astrophysics of the Radboud University Nijmegen,the Netherlands and the department of Sustainable energy of the HAN University of Applied Sciences in Arnhem,the Netherlands, now at the Netherlands Institute for Nuclear and High-Energy Physics (Nikhef) and theInstitute for Gravitational and Subatomic Physics (GRASP) at Utrecht University in the Netherlands. TheSolarEnergy package can be used under the conditions of the EUPL 1.2 licence.## InstallationThis package can be installed using `pip install solarenergy`.  This should automatically install thedependency packages `numpy`, `pytz`, `astroconst` and `soltrack` (&gt;=0.2.0) if they haven't been installedalready.  If you are installing by hand, ensure that these packages are installed as well (if you're not usinga Python version older than 3.7, you will need to install `dataclasses` in addition).## Code examples### Code example for a numer or range (array, vector) of instancesIn this mode, we prepare a list of datetimes (Pandas Series, DatetimeIndex, ndarrays of datetime64, ...) andfeed that to SolarEnergy at once, for better performance and easier use.```python&quot;&quot;&quot;Example Python script using the SolarEnergy module for a range of instances.&quot;&quot;&quot;# Location of my solar panels:from solarenergy import d2r,r2dgeoLon =  5*d2r  # Geographic longitude (&gt;0 for eastern hemisphere; ° -&gt; rad)geoLat = 52*d2r  # Geographic latitude  (&gt;0 for northern hemisphere; ° -&gt; rad)# Orientation of my solar panels:spAz   = -2*d2r  # Azimuth ('wind direction') of my panels are facing.  Note: South=0, W=90° (pi/2 rad) in the northern hemisphere!  (rad)spIncl = 28*d2r  # Inclination of my panels w.r.t. the horizontal  (rad)import pandas as pddates = pd.date_range('2022-03-21', pd.to_datetime('2022-03-22'), freq='1h', tz='Europe/Amsterdam')  # DatetimeIndex 0-24hdf = pd.DataFrame(data=dates, columns=['dtm'])  # Create a Pandas DataFrame with the datetimes as first column# Compute Sun positions (using SolTrack behind the scenes) and add them as three columns to the df:import solarenergy as sedf['sunAz'],df['sunAlt'],df['sunDist'] = se.sun_position_from_datetime(geoLon,geoLat, df['dtm'])df['I_ext']     = 1361.5 / df.sunDist**2                                 # Extraterrestrial radiation (at the top of the atmosphere; AM0)df['AM']        = se.airmass(df.sunAlt)                                  # Air mass for this Sun altitudedf['extFac']    = se.extinction_factor(df.AM)                            # Extinction factor at sea level for this airmassdf['DNI']       = df.I_ext / df.extFac                                   # DNI for a clear skydf['cosTheta']  = se.cos_angle_sun_panels(spAz,spIncl, df.sunAz,df.sunAlt)  # cos of the angle with which Sun hits my panelsdf['dirRad']    = df.DNI * df.cosTheta                                   # Insolation of direct sunlight on my panelsdf.sunAz  *= r2d  # Convert azimuth and ...df.sunAlt *= r2d  # ... altitude to degrees for printingprint(df[df.sunAlt &gt; 0])  # Print the results for the hours where the Sun is above the horizon```### Code example for a single calculationNote that in most cases, the vector option is preferred (see the [code example](#code-example) above, and see[Performance](#performance) for details).  The code example below is given for completeness.```python&quot;&quot;&quot;Example Python script using the SolarEnergy module for a single instance.&quot;&quot;&quot;# Location of my solar panels:from solarenergy import d2r,r2d  # Convert between radians and degreesgeoLon =  5*d2r  # Geographic longitude (&gt;0 for eastern hemisphere; ° -&gt; rad)geoLat = 52*d2r  # Geographic latitude  (&gt;0 for northern hemisphere; ° -&gt; rad)# Orientation of my solar panels:spAz   = -2*d2r  # Azimuth ('wind direction') of my panels are facing.  Note: South=0, W=90° (pi/2 rad) in the northern hemisphere!  (rad)spIncl = 28*d2r  # Inclination of my panels w.r.t. the horizontal  (rad)# An hour past noon local time on 1 March 2020:myTZ  = 'Europe/Amsterdam'year  = 2020month = 3day   = 1hour  = 13# Compute Sun position (uses SolTrack behind the scenes):import solarenergy as sesunAz,sunAlt,sunDist = se.sun_position_from_date_and_time(geoLon,geoLat, year,month,day, hour, timezone=myTZ)I_ext     = 1361.5 / sunDist**2                                 # Extraterrestrial radiation (at the top of the atmosphere; AM0)AM        = se.airmass(sunAlt)                                  # Air mass for this Sun altitudeextFac    = se.extinction_factor(AM)                            # Extinction factor at sea level for this airmasscosTheta  = se.cos_angle_sun_panels(spAz,spIncl, sunAz,sunAlt)  # cos of the angle with which Sun hits my panelsDNI       = I_ext / extFac                                      # DNI for a clear skydirRad    = DNI * cosTheta                                      # Insolation of direct sunlight on my panels# Print input and output:import numpy as npprint(&quot;Location:           %0.3lf E, %0.3lf N&quot;  % (geoLon*r2d, geoLat*r2d))print(&quot;Date:               %4d-%2.2d-%2.2d&quot;     % (year, month, day))print(&quot;Time:               %2d:00&quot;              % (hour))print()print(&quot;Sun azimuth:        %7.3lf°&quot;   % (sunAz*r2d))print(&quot;Sun altitude:       %7.3lf°&quot;   % (sunAlt*r2d))print(&quot;Sun distance:       %7.4lf AU&quot; % (sunDist))print()print(&quot;I_ext:              %7.1lf W/m²&quot;    % (I_ext))print()print(&quot;Air mass:           %7.3lf&quot;         % (AM))print(&quot;Extinction factor:  %7.3lf&quot;         % (extFac))print(&quot;DNI:                %7.1lf W/m²&quot;    % (DNI))print()print(&quot;Sun-panels angle:   %7.1lf°&quot;        % (np.arccos(cosTheta)*r2d))print(&quot;Direct insolation:  %7.1lf W/m²&quot;    % (dirRad))```## PerformanceSolarEnergy starts with the computation of the position of the Sun for a given instant (scalar) or for aseries of instances using an array or vector.  The latter is faster than the former (for ~2 instances or more)and may be easier to use in the majority of applications, depending on the problem given.The table below shows the speed with which the position of the Sun is computed (in number of positions persecond) as a function of the size of the dataset.  The runs were timed on a single hyperthreaded core cappedat 3.4GHz and the minimum time of 10 runs is displayed.  The scalar runs scale linearly, the speed peaksaround 1&lt;sup&gt;5&lt;/sup&gt;-1&lt;sup&gt;6&lt;/sup&gt; elements for vectors.  Timings below are for timezone-naive datetimes (andhence UTC), if timezone-aware datetimes are used, the calculations take about 4.4 times longer(!)| Mode   | N&lt;sub&gt;calc&lt;/sub&gt; | Time (s) | Speed (/s) ||--------|------------------|----------|------------|| scalar | 1e3              | 0.616    | 1623       ||        |                  |          |            || vector | 1                | 7.95e-4  | 1258       || vector | 1e1              | 8.79e-4  | 11,377     || vector | 1e2              | 0.001037 | 96,432     || vector | 1e3              | 0.00257  | 389,105    || vector | 1e4              | 0.0134   | 746,269    || vector | 1e5              | 0.0687   | 1,455,604  || vector | 1e6              | 0.667    | 1,499,250  || vector | 1e7              | 8.56     | 1,168,224  |## SolarEnergy pages* [Pypi](https://pypi.org/project/solarenergy/): SolarEnergy Python package* [GitHub](https://github.com/MarcvdSluys/SolarEnergy): SolarEnergy source code* [ReadTheDocs](https://solarenergy.readthedocs.io): SolarEnergy documentation## Author and licence* Author: Marc van der Sluys* Contact: http://marc.vandersluys.nl* Licence: [EUPL 1.2](https://www.eupl.eu/1.2/en/)## References* This Python code is adapted from the Fortran implementation in  [libTheSky](http://libthesky.sourceforge.net/), which contains many references.* [Celestial mechanics in a nutshell (CMiaNS)](https://cmians.sourceforge.io/)* [SolTrack](https://pypi.org/project/soltrack/): a free, fast and simple Python package to compute the position of the Sun, as well as its rise and set times.</longdescription>
</pkgmetadata>