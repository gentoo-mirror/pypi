<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># sense_api## Sense Energy Monitor API InterfaceThe Sense API provides access to the unofficial API for the Sense Energy Monitor.  Through the API,one can retrieve both realtime and trend data including individual devices.Systematic access to the Sense monitor data. Exploratory work on pulling data from Senseto be used in other tools - HomeASsistant, Smartthings, ActiveTiles, etc. Python version based on the work done here in Powershell:https://gist.github.com/mbrownnycnyc/db3209a1045746f5e287ea6b6631e19c## Local Device EmulationThe SenseLink class emulates the energy monitoring functionality of TP-Link Kasa HS110 Smart Plugs and allows you to report &quot;custom&quot; power usage to your Sense Home Energy Monitor.  This requires enabling &quot;TP-Link HS110/HS300 Smart Plug&quot; in the Sense app.Based off the work of https://github.com/cbpowell/SenseLink### ContributorsFeel free to fork and PR! https://github.com/kbickar### Todo- Add POST/PUT where/if applicable- CLI- Improved error handling### Install```pip install sense_energy```### Web API Example Usage:```python    from sense_energy import Senseable    sense = Senseable()    sense.authenticate(username, password)    sense.update_realtime()    sense.update_trend_data()    print (&quot;Active:&quot;, sense.active_power, &quot;W&quot;)    print (&quot;Active Solar:&quot;, sense.active_solar_power, &quot;W&quot;)    print (&quot;Daily:&quot;, sense.daily_usage, &quot;KWh&quot;)    print (&quot;Daily Solar:&quot;, sense.daily_production, &quot;KWh&quot;)    print (&quot;Active Devices:&quot;,&quot;, &quot;.join(sense.active_devices))```There are plenty of methods for you to call so modify however you see fitIf using the API to log data, you should only create one instance of Senseable and then reuse that to get the updated stats.  Creating the instance authenticates with the Sense API which should only be once every 15-20 minutes at most.  Calling the `update_trend_data()` function will update all the trend stats and `get_realtime()` will retrieve the latest real time stats.The get_realtime() is by default rate limited to one call per 30 seconds. This canbe modified by setting the Senseable object attribute `rate_limit` to a different value.### Local emulation Example Usage:```pythonasync def test():import timedef test_devices():devices = [PlugInstance(&quot;lamp1&quot;, start_time=time()-20, alias=&quot;Lamp&quot;, power=10),    PlugInstance(&quot;fan1&quot;, start_time=time()-300, alias=&quot;Fan&quot;, power=140)]for d in devices:yield dsl = SenseLink(test_devices)await sl.start()try:await asyncio.sleep(180)  # Serve for 3 minutesfinally:await sl.stop()if __name__ == &quot;__main__&quot;:asyncio.run(test())```</longdescription>
</pkgmetadata>