<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>py-solc=======|Build Status| |PyPi version| |PyPi downloads|Python wrapper around the ``solc`` Solidity compiler.Dependency----------This library requires the ``solc`` executable to be present.Only versions ``&gt;=0.4.2`` are supported and tested though this librarymay work with other versions.`solc installationinstructions &lt;http://solidity.readthedocs.io/en/latest/installing-solidity.html&gt;`__Quickstart----------Installation.. code:: sh    pip install py-solcDevelopment-----------Clone the repository and then run:.. code:: sh    pip install -e . -r requirements-dev.txtRunning the tests~~~~~~~~~~~~~~~~~You can run the tests with:.. code:: sh    py.test testsOr you can install ``tox`` to run the full test suite.Releasing~~~~~~~~~Pandoc is required for transforming the markdown README to the properformat to render correctly on pypi.For Debian-like systems:::    apt install pandocOr on OSX:.. code:: sh    brew install pandocTo release a new version:.. code:: sh    bumpversion $$VERSION_PART_TO_BUMP$$    git push &amp;&amp; git push --tags    make releaseHow to bumpversion^^^^^^^^^^^^^^^^^^The version format for this repo is ``{major}.{minor}.{patch}`` forstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable(``stage`` can be alpha or beta).To issue the next version in line, use bumpversion and specify whichpart to bump, like ``bumpversion minor`` or ``bumpversion devnum``.If you are in a beta version, ``bumpversion stage`` will switch to astable.To issue an unstable version when the current version is stable, specifythe new version explicitly, like``bumpversion --new-version 4.0.0-alpha.1 devnum``Standard JSON Compilation-------------------------Use the ``solc.compile_standard`` function to make use the[standard-json] compilation feature.`Solidity Documentation for Standard JSON input and ouptupformat &lt;http://solidity.readthedocs.io/en/develop/using-the-compiler.html#compiler-input-and-output-json-description&gt;`__::    &gt;&gt;&gt; from solc import compile_standard    &gt;&gt;&gt; compile_standard({    ...     'language': 'Solidity',    ...     'sources': {'Foo.sol': 'content': &quot;....&quot;},    ... })    {        'contracts': {...},        'sources': {...},        'errors': {...},    }    &gt;&gt;&gt; compile_standard({    ...     'language': 'Solidity',    ...     'sources': {'Foo.sol': 'urls': [&quot;/path/to/my/sources/Foo.sol&quot;]},    ... }, allow_paths=&quot;/path/to/my/sources&quot;)    {        'contracts': {...},        'sources': {...},        'errors': {...},    }Legacy Combined JSON compilation--------------------------------.. code:: python    &gt;&gt;&gt; from solc import compile_source, compile_files, link_code    &gt;&gt;&gt; compile_source(&quot;contract Foo { function Foo() {} }&quot;)    {        'Foo': {            'abi': [{'inputs': [], 'type': 'constructor'}],            'code': '0x60606040525b5b600a8060126000396000f360606040526008565b00',            'code_runtime': '0x60606040526008565b00',            'source': None,            'meta': {                'compilerVersion': '0.3.5-9da08ac3',                'language': 'Solidity',                'languageVersion': '0',            },        },    }    &gt;&gt;&gt; compile_files([&quot;/path/to/Foo.sol&quot;, &quot;/path/to/Bar.sol&quot;])    {        'Foo': {            'abi': [{'inputs': [], 'type': 'constructor'}],            'code': '0x60606040525b5b600a8060126000396000f360606040526008565b00',            'code_runtime': '0x60606040526008565b00',            'source': None,            'meta': {                'compilerVersion': '0.3.5-9da08ac3',                'language': 'Solidity',                'languageVersion': '0',            },        },        'Bar': {            'abi': [{'inputs': [], 'type': 'constructor'}],            'code': '0x60606040525b5b600a8060126000396000f360606040526008565b00',            'code_runtime': '0x60606040526008565b00',            'source': None,            'meta': {                'compilerVersion': '0.3.5-9da08ac3',                'language': 'Solidity',                'languageVersion': '0',            },        },    }    &gt;&gt;&gt; unlinked_code = &quot;606060405260768060106000396000f3606060405260e060020a6000350463e7f09e058114601a575b005b60187f0c55699c00000000000000000000000000000000000000000000000000000000606090815273__TestA_________________________________90630c55699c906064906000906004818660325a03f41560025750505056&quot;    &gt;&gt;&gt; link_code(unlinked_code, {'TestA': '0xd3cda913deb6f67967b99d67acdfa1712c293601'})    ... &quot;606060405260768060106000396000f3606060405260e060020a6000350463e7f09e058114601a575b005b60187f0c55699c00000000000000000000000000000000000000000000000000000000606090815273d3cda913deb6f67967b99d67acdfa1712c29360190630c55699c906064906000906004818660325a03f41560025750505056&quot;Setting the path to the ``solc`` binary---------------------------------------You can use the environment variable ``SOLC_BINARY`` to set the path toyour solc binary.Installing the ``solc`` binary------------------------------    This feature is experimental and subject to breaking changes.Any of the following versions of ``solc`` can be installed using``py-solc`` on the listed platforms.-  ``v0.4.1`` (linux)-  ``v0.4.2`` (linux)-  ``v0.4.6`` (linux)-  ``v0.4.7`` (linux)-  ``v0.4.8`` (linux/osx)-  ``v0.4.9`` (linux)-  ``v0.4.11`` (linux/osx)-  ``v0.4.12`` (linux/osx)-  ``v0.4.13`` (linux/osx)-  ``v0.4.14`` (linux/osx)-  ``v0.4.15`` (linux/osx)-  ``v0.4.16`` (linux/osx)-  ``v0.4.17`` (linux/osx)-  ``v0.4.18`` (linux/osx)-  ``v0.4.19`` (linux/osx)-  ``v0.4.20`` (linux/osx)-  ``v0.4.21`` (linux/osx)-  ``v0.4.22`` (linux/osx)-  ``v0.4.23`` (linux/osx)-  ``v0.4.24`` (linux/osx)-  ``v0.4.25`` (linux/osx)Installation can be done via the command line:.. code:: bash    $ python -m solc.install v0.4.25Or from python using the ``install_solc`` function... code:: python    &gt;&gt;&gt; from solc import install_solc    &gt;&gt;&gt; install_solc('v0.4.25')The installed binary can be found under your home directory. The``v0.4.25`` binary would be located at``$HOME/.py-solc/solc-v0.4.25/bin/solc``. Older linux installs will alsorequire that you set the environment variable``LD_LIBRARY_PATH=$HOME/.py-solc/solc-v0.4.25/bin``Import path remappings----------------------``solc`` provides path aliasing allow you to have more reusable projectconfigurations.You can use this like:::    from solc import compile_source, compile_files, link_code    compile_files([source_file_path], import_remappings=[&quot;zeppeling=/my-zeppelin-checkout-folder&quot;])`More information about solc importaliasing &lt;http://solidity.readthedocs.io/en/develop/layout-of-source-files.html#paths&gt;`__.. |Build Status| image:: https://travis-ci.org/ethereum/py-solc.png   :target: https://travis-ci.org/ethereum/py-solc.. |PyPi version| image:: https://pypip.in/v/py-solc/badge.png   :target: https://pypi.python.org/pypi/py-solc.. |PyPi downloads| image:: https://pypip.in/d/py-solc/badge.png   :target: https://pypi.python.org/pypi/py-solc</longdescription>
</pkgmetadata>