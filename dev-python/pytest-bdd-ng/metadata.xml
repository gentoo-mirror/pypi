<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>BDD library for the pytest runner=================================.. image:: http://img.shields.io/pypi/v/pytest-bdd-ng.svg    :target: https://pypi.python.org/pypi/pytest-bdd-ng.. image:: https://codecov.io/gh/elchupanebrej/pytest-bdd-ng/branch/default/graph/badge.svg    :target: https://app.codecov.io/gh/elchupanebrej/pytest-bdd-ng.. image:: https://readthedocs.org/projects/pytest-bdd-ng/badge/?version=default    :target: https://pytest-bdd-ng.readthedocs.io/en/default/?badge=default    :alt: Documentation Status.. image:: https://badgen.net/badge/stand%20with/UKRAINE/?color=0057B8&amp;labelColor=FFD700    :target: https://savelife.in.ua/en/.. _behave: https://pypi.python.org/pypi/behave.. _pytest: https://docs.pytest.org.. _Gherkin: https://cucumber.io/docs/gherkin/reference.. _pytest-bdd-ng: https://pytest-bdd-ng.readthedocs.io/en/default/**pytest-bdd-ng** combine descriptive clarity of Gherkin_ languagewith power and fullness of pytest_ infrastructure.It enables unifying unit and functionaltests, reduces the burden of continuous integration server configuration and allows the reuse oftest setups.Pytest fixtures written for unit tests can be reused for setup and actionsmentioned in feature steps with dependency injection. This allows a true BDDjust-enough specification of the requirements without obligatory maintaining any context objectcontaining the side effects of Gherkin imperative declarations... NOTE:: Project documentation: pytest-bdd-ng_Install pytest-bdd-ng---------------------::    pip install pytest-bdd-ngProject layout--------------**pytest-bdd-ng** automatically collect `*.feature` files from pytest_ tests directory.Important to remember, that feature files are used by other team members as live documentation,so it's not a very good idea to mix documentation and test code.The more features and scenarios you have, the more important becomes the question abouttheir organization. So recommended way is to organize your feature files in the folders bysemantic groups:::    features    ├──frontend    │  └──auth    │     └──login.feature    └──backend       └──auth          └──login.featureAnd tests for this features could be organized in the next manner:::    tests    └──conftest.py    └──functional    │     └──__init__.py    │     └──conftest.py    │     │     └── &quot;User step library used by descendant tests&quot;    │     │    │     │         from steps.auth.given import *    │     │         from steps.auth.when import *    │     │         from steps.auth.then import *    │     │    │     │         from steps.order.given import *    │     │         from steps.order.when import *    │     │         from steps.order.then import *    │     │    │     │         from steps.browser.given import *    │     │         from steps.browser.when import *    │     │         from steps.browser.then import *    │     │    │     └──frontend_auth.feature -&gt; ../../features/frontend/auth.feature    │     └──backend_auth.feature -&gt; ../../features/backend/auth.feature    ...Step definitions could be organized in the next way::    steps    └──auth    │     └── given.py    │     │      └── &quot;&quot;&quot;User auth step definitions&quot;&quot;&quot;    │     │          from pytest import fixture    │     │          from pytest_bdd import given, when, then, step    │     │    │     │          @fixture    │     │          def credentials():    │     │             return 'test_login', 'test_very_secure_pass'    │     │    │     │          @given('User login into application')    │     │          def user_login(credentials):    │     │             ...    │     └── when.py    │     └── then.py    └──order    │     └── given.py    │     └── when.py    │     └── then.py    └──browser    │     └── ...    ...To make links between feature files at features directory and test directory there are few options(for more information please investigate project tests):#. Symlinks#. `.desktop` files#. `.webloc` files#. `.url` files.. NOTE:: Link files also could be used to load features by http://License-------This software is licensed under the `MIT license &lt;http://en.wikipedia.org/wiki/MIT_License&gt;`_.© 2013-2023 Oleg Pidsadnyi, Anatoly Bubenkov, Konstantin Goloveshko and others</longdescription>
</pkgmetadata>