<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.python-httpx.org/&quot;&gt;&lt;img width=&quot;350&quot; height=&quot;208&quot; src=&quot;https://raw.githubusercontent.com/encode/httpx/master/docs/img/butterfly.png&quot; alt='HTTPX'&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;HTTPX&lt;/strong&gt; &lt;em&gt;- A next-generation HTTP client for Python.&lt;/em&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/encode/httpx/actions&quot;&gt;    &lt;img src=&quot;https://github.com/encode/httpx/workflows/Test%20Suite/badge.svg&quot; alt=&quot;Test Suite&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/httpx/&quot;&gt;    &lt;img src=&quot;https://badge.fury.io/py/httpx.svg&quot; alt=&quot;Package version&quot;&gt;&lt;/a&gt;&lt;/p&gt;HTTPX is a fully featured HTTP client library for Python 3. It includes **an integratedcommand line client**, has support for both **HTTP/1.1 and HTTP/2**, and provides both **syncand async APIs**.---Install HTTPX using pip:```shell$ pip install httpx```Now, let's get started:```pycon&gt;&gt;&gt; import httpx&gt;&gt;&gt; r = httpx.get('https://www.example.org/')&gt;&gt;&gt; r&lt;Response [200 OK]&gt;&gt;&gt;&gt; r.status_code200&gt;&gt;&gt; r.headers['content-type']'text/html; charset=UTF-8'&gt;&gt;&gt; r.text'&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Example Domain&lt;/title&gt;...'```Or, using the command-line client.```shell$ pip install 'httpx[cli]'  # The command line client is an optional dependency.```Which now allows us to use HTTPX directly from the command-line...&lt;p align=&quot;center&quot;&gt;  &lt;img width=&quot;700&quot; src=&quot;https://raw.githubusercontent.com/encode/httpx/master/docs/img/httpx-help.png&quot; alt='httpx --help'&gt;&lt;/p&gt;Sending a request...&lt;p align=&quot;center&quot;&gt;  &lt;img width=&quot;700&quot; src=&quot;https://raw.githubusercontent.com/encode/httpx/master/docs/img/httpx-request.png&quot; alt='httpx http://httpbin.org/json'&gt;&lt;/p&gt;## FeaturesHTTPX builds on the well-established usability of `requests`, and gives you:* A broadly [requests-compatible API](https://www.python-httpx.org/compatibility/).* An integrated command-line client.* HTTP/1.1 [and HTTP/2 support](https://www.python-httpx.org/http2/).* Standard synchronous interface, but with [async support if you need it](https://www.python-httpx.org/async/).* Ability to make requests directly to [WSGI applications](https://www.python-httpx.org/advanced/#calling-into-python-web-apps) or [ASGI applications](https://www.python-httpx.org/async/#calling-into-python-web-apps).* Strict timeouts everywhere.* Fully type annotated.* 100% test coverage.Plus all the standard features of `requests`...* International Domains and URLs* Keep-Alive &amp; Connection Pooling* Sessions with Cookie Persistence* Browser-style SSL Verification* Basic/Digest Authentication* Elegant Key/Value Cookies* Automatic Decompression* Automatic Content Decoding* Unicode Response Bodies* Multipart File Uploads* HTTP(S) Proxy Support* Connection Timeouts* Streaming Downloads* .netrc Support* Chunked Requests## InstallationInstall with pip:```shell$ pip install httpx```Or, to include the optional HTTP/2 support, use:```shell$ pip install httpx[http2]```HTTPX requires Python 3.7+.## DocumentationProject documentation is available at [https://www.python-httpx.org/](https://www.python-httpx.org/).For a run-through of all the basics, head over to the [QuickStart](https://www.python-httpx.org/quickstart/).For more advanced topics, see the [Advanced Usage](https://www.python-httpx.org/advanced/) section, the [async support](https://www.python-httpx.org/async/) section, or the [HTTP/2](https://www.python-httpx.org/http2/) section.The [Developer Interface](https://www.python-httpx.org/api/) provides a comprehensive API reference.To find out about tools that integrate with HTTPX, see [Third Party Packages](https://www.python-httpx.org/third_party_packages/).## ContributeIf you want to contribute with HTTPX check out the [Contributing Guide](https://www.python-httpx.org/contributing/) to learn how to start.## DependenciesThe HTTPX project relies on these excellent libraries:* `httpcore` - The underlying transport implementation for `httpx`.  * `h11` - HTTP/1.1 support.* `certifi` - SSL certificates.* `idna` - Internationalized domain name support.* `sniffio` - Async library autodetection.As well as these optional installs:* `h2` - HTTP/2 support. *(Optional, with `httpx[http2]`)** `socksio` - SOCKS proxy support. *(Optional, with `httpx[socks]`)** `rich` - Rich terminal support. *(Optional, with `httpx[cli]`)** `click` - Command line client support. *(Optional, with `httpx[cli]`)** `brotli` or `brotlicffi` - Decoding for &quot;brotli&quot; compressed responses. *(Optional, with `httpx[brotli]`)*A huge amount of credit is due to `requests` for the API layout thatmuch of this work follows, as well as to `urllib3` for plenty of designinspiration around the lower-level networking details.---&lt;p align=&quot;center&quot;&gt;&lt;i&gt;HTTPX is &lt;a href=&quot;https://github.com/encode/httpx/blob/master/LICENSE.md&quot;&gt;BSD licensed&lt;/a&gt; code.&lt;br/&gt;Designed &amp; crafted with care.&lt;/i&gt;&lt;br/&gt;&amp;mdash; ðŸ¦‹ &amp;mdash;&lt;/p&gt;## Release Information### Changed* The logging behaviour has been changed to be more in-line with other standard Python logging usages. We no longer have a custom `TRACE` log level, and we no longer use the `HTTPX_LOG_LEVEL` environment variable to auto-configure logging. We now have a significant amount of `DEBUG` logging available at the network level. Full documentation is available at https://www.python-httpx.org/logging/ (#2547, encode/httpcore#648)* The `Response.iter_lines()` method now matches the stdlib behaviour and does not include the newline characters. It also resolves a performance issue. (#2423)* Query parameter encoding switches from using + for spaces and %2F for forward slash, to instead using %20 for spaces and treating forward slash as a safe, unescaped character. This differs from `requests`, but is in line with browser behavior in Chrome, Safari, and Firefox. Both options are RFC valid. (#2543)* NetRC authentication is no longer automatically handled, but is instead supported by an explicit `httpx.NetRCAuth()` authentication class. See the documentation at https://www.python-httpx.org/advanced/#netrc-support (#2525)### Removed* The `rfc3986` dependancy has been removed. (#2252)---[Full changelog](https://github.com/encode/httpx/blob/master/CHANGELOG.md)</longdescription>
</pkgmetadata>