<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>==============pyzip 0.2.0==============`PyZip` is a package for managing a zip content as a dictionary... image:: https://badge.fury.io/py/pyzip.svg    :target: https://badge.fury.io/py/pyzip.. image:: https://travis-ci.org/ipazc/pyzip.svg?branch=master    :target: https://travis-ci.org/ipazc/pyzip.. image:: https://coveralls.io/repos/github/ipazc/pyzip/badge.svg?branch=master    :target: https://coveralls.io/github/ipazc/pyzip?branch=master.. image:: https://landscape.io/github/ipazc/pyzip/master/landscape.svg?style=flat   :target: https://landscape.io/github/ipazc/pyzip/master   :alt: Code HealthIs this zipping process simple enough?.. code:: python    &gt;&gt;&gt; from pyzip import PyZip    &gt;&gt;&gt;     &gt;&gt;&gt; pyzip = PyZip()    &gt;&gt;&gt; pyzip['key1'] = b&quot;content_bytes&quot;    &gt;&gt;&gt; pyzip['key2'] = file_bytes    &gt;&gt;&gt;    &gt;&gt;&gt; pyzip.save(&quot;/path/to/file.zip&quot;)    &gt;&gt;&gt; zip_bytes = pyzip.to_bytes() # Alternatively, to bytesIt is run on top of the module `zipfile`, however, in addition to its functionality, `PyZip` accepts to edit and removeelements of a zip. Furthermore, it provides integrity checks to ensure that elements are successfully stored (SHA256 hash).Installation============Currently it is only supported **Python 3.4.1** onwards:.. code:: bash        sudo pip3 install pyzipBasic Usage===========`PyZip` can easily store content into a zip on the fly. The usage is the same as a normal dictionary:* Add content to in-memory zip:.. code:: python    &gt;&gt;&gt; from pyzip import PyZip    &gt;&gt;&gt;     &gt;&gt;&gt; pyzip = PyZip()    &gt;&gt;&gt; pyzip['key1'] = b&quot;content_bytes&quot;* Get specific content:.. code:: python    &gt;&gt;&gt; print(pyzip['key1'])    b&quot;content_bytes&quot;    * Edit content:.. code:: python    &gt;&gt;&gt; pyzip['key1'] = b&quot;replaced_content_bytes&quot;* Remove content:.. code:: python    &gt;&gt;&gt; del pyzip['key1']* Get zip bytes:.. code:: python    &gt;&gt;&gt; zip_bytes = pyzip.to_bytes()* Load from bytes:.. code:: python    &gt;&gt;&gt; pyzip = PyZip().from_bytes(zip_bytes)    * Save to zip file:.. code:: python    &gt;&gt;&gt; pyzip.save(&quot;path/to/file.zip&quot;)    * Load from zip file:.. code:: python    &gt;&gt;&gt; pyzip = PyZip().from_file(&quot;path/to/file.zip&quot;)* Convert existing dictionary into PyZip:.. code:: python    &gt;&gt;&gt; pyzip = PyZip({'file1': b'example', 'file2': b'example2'})* It is also possible to convert a multiple level dict into a PyZip:.. code:: python    &gt;&gt;&gt; pyzip = PyZip({'file1': b'example', 'file2': b'example2', 'folder1': {'file1': b'file1 in folder1'}})    Use case========PyZip can be used in along with `PyFolder &lt;https://pypi.python.org/pypi/pyfolder/0.0.1&gt;`_ in order to ease the compression and decompression of folders and zips:**Compressing recursively a folder into a zip:**.. code:: python    &gt;&gt;&gt; from pyzip import PyZip    &gt;&gt;&gt; from pyfolder import PyFolder    &gt;&gt;&gt;    &gt;&gt;&gt; path_to_compress = &quot;route/to/files&quot;    &gt;&gt;&gt;    &gt;&gt;&gt; pyzip = PyZip(PyFolder(path_to_compress, interpret=False))    &gt;&gt;&gt; pyzip.save(&quot;compressed_folder.zip&quot;)    &gt;&gt;&gt;**Uncompressing recursively a previously compressed folder from a zip:**.. code:: python    &gt;&gt;&gt; from pyzip import PyZip    &gt;&gt;&gt; from pyfolder import PyFolder    &gt;&gt;&gt;    &gt;&gt;&gt; destination = &quot;route/for/uncompress&quot;    &gt;&gt;&gt;    &gt;&gt;&gt; pyzip = PyZip(PyFolder(destination, interpret=False)).from_file(&quot;compressed_folder.zip&quot;, inflate=False)    &gt;&gt;&gt;LICENSE=======It is released under the MIT license.</longdescription>
</pkgmetadata>