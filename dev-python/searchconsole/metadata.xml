<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Google Search Console for Python[![Build Status](https://travis-ci.org/joshcarty/google-searchconsole.svg?branch=master)](https://travis-ci.org/joshcarty/google-searchconsole)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)`google-searchconsole` takes the pain out of working with the [Google SearchConsole](https://support.google.com/webmasters/answer/4559176?hl=en) Search Analytics Query API. It is written in Python and providesconvenient features to make querying a site's search analytics data easier.* **Authentication.** We provide a few different ways to make generatingcredentials and authenticating with your account easier. You can use storedfies as well as a way to do the OAuth2 flow interactively.* **Querying.** Easier to query by date ranges and filter by variousdimensions. No longer posting large nested JSON, the query object lets you makecomplex queries with ease.* **Exploration.** You can traverse your account hierarchy, with an accountcontaining webproperties with clear permission levels.* **Exports.** Clean JSON and pandas.DataFrame outputs so you can easilyanalyse your data in Python or Excel.This package is built on top of[Google's own API Client](https://developers.google.com/webmaster-tools/search-console-api-original/v3/prereqs)and is heavily inspired, from design to implementation, by [@debrouwere](https://github.com/debrouwere)'sfantastic [`google-analytics`](https://github.com/debrouwere/google-analytics) package.## QuickstartFirst, install the package using:`pip3 install git+https://github.com/joshcarty/google-searchconsole`Then, create a new project in the [Google Developers Console](https://console.developers.google.com),enable the  Google Search Console API under &quot;APIs &amp; Services&quot;. Next, create credentialsfor an OAuth client ID, choosing the Other Application type. Download a JSON copy ofyour client secrets.After that, executing your first query is as easy as```pythonimport searchconsoleaccount = searchconsole.authenticate(client_config='client_secrets.json')webproperty = account['https://www.example.com/']report = webproperty.query.range('today', days=-7).dimension('query').get()print(report.rows)```The above example will use your client configuration file to interactivelygenerate your credentials.### Saving CredentialsIf you wish to save your credentials, to avoid goingthrough the OAuth consent screen in the future, you can specify a path to savethem by specifying `serialize='path/to/credentials.json`.When you want to authenticate a new account you run:```pythonaccount = searchconsole.authenticate(client_config='client_secrets.json',                                     serialize='credentials.json')```Which will save your credentials to a file called `credentials.json`.From then on, you can authenticate with:```pythonaccount = searchconsole.authenticate(client_config='client_secrets.json',                                     credentials='credentials.json')```</longdescription>
</pkgmetadata>