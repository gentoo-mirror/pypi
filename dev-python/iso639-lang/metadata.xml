<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># iso639-lang![PyPI](https://img.shields.io/pypi/v/iso639-lang)![Supported Python versions](https://img.shields.io/pypi/pyversions/iso639-lang.svg)![PyPI - Downloads](https://img.shields.io/pypi/dm/iso639-lang)  **iso639-lang** is a simple library to handle the ISO 639 series of international standards for language codes.```python&gt;&gt;&gt; from iso639 import Lang&gt;&gt;&gt; Lang(&quot;fr&quot;)Lang(name='French', pt1='fr', pt2b='fre', pt2t='fra', pt3='fra', pt5='')```iso639-lang allows you to switch from one language code to another easily. There’s no need to manually download or parse data files, just use the `Lang` class!ISO 639-1, ISO 639-2, ISO 639-3 and ISO 639-5 parts are all supported.## Installing iso639-lang and Supported Versionsiso639-lang is available on PyPI:```console$ pip install iso639-lang```iso639-lang supports Python 3.6+.    ## UsageHandling language codes with iso639-lang is very simple.Begin by importing the `Lang` class:```python&gt;&gt;&gt; from iso639 import Lang````Lang` is instantiable with any ISO 639 language code or name. For example, let’s try to get the ISO 639 codes for French:```python&gt;&gt;&gt; lg = Lang(&quot;French&quot;)&gt;&gt;&gt; lg.name'French'&gt;&gt;&gt; lg.pt1'fr'&gt;&gt;&gt; lg.pt2b'fre'&gt;&gt;&gt; lg.pt2t'fra'&gt;&gt;&gt; lg.pt3'fra'&gt;&gt;&gt; lg.pt5''```You can use the `asdict` method to return ISO 639 language values as a Python dictionary.```python&gt;&gt;&gt; lg.asdict(){'name': 'French', 'pt1': 'fr', 'pt2b': 'fre', 'pt2t': 'fra', 'pt3': 'fra', 'pt5': ''}```### In data structuresLists of `Lang` instances are sortable by name. ```python&gt;&gt;&gt; langs = [Lang(&quot;deu&quot;), Lang(&quot;eng&quot;), Lang(&quot;rus&quot;), Lang(&quot;eng&quot;)]&gt;&gt;&gt; [lg.name for lg in sorted(langs)]['English', 'English', 'German', 'Russian']```As `Lang` is hashable, `Lang` instances can be added to a set or used as dictionary keys.```python&gt;&gt;&gt; [lg.pt3 for lg in set(langs)]['eng', 'rus', 'deu']```### Iterator`iter_langs()` iterates through all possible `Lang` instances, ordered alphabetically by name.```python&gt;&gt;&gt; from iso639 import iter_langs&gt;&gt;&gt; [lg.name for lg in iter_langs()][&quot;'Are'are&quot;, &quot;'Auhelawa&quot;, &quot;A'ou&quot;, ... , 'ǂHua', 'ǂUngkue', 'ǃXóõ']```### Language TypesThe type of a language is accessible thanks to the `type` method.```python&gt;&gt;&gt; lg = Lang(&quot;Latin&quot;)&gt;&gt;&gt; lg.type()'Ancient'```### MacrolanguagesYou can easily determine whether a language is a macrolanguage or an individual language.```python&gt;&gt;&gt; lg = Lang(&quot;Arabic&quot;)&gt;&gt;&gt; lg.scope()'Macrolanguage'```Use the `macro` method to get the macrolanguage of an individual language.```python&gt;&gt;&gt; lg = Lang(&quot;Wu Chinese&quot;)&gt;&gt;&gt; lg.macro()Lang(name='Chinese', pt1='zh', pt2b='chi', pt2t='zho', pt3='zho', pt5='')```Conversely, you can also list all the individual languages that share a common macrolanguage.```python&gt;&gt;&gt; lg = Lang(&quot;Persian&quot;)&gt;&gt;&gt; lg.individuals()[Lang(name='Iranian Persian', pt1='', pt2b='', pt2t='', pt3='pes', pt5=''), Lang(name='Dari', pt1='', pt2b='', pt2t='', pt3='prs', pt5='')]```### ExceptionsWhen an invalid language value is passed to `Lang`, an `InvalidLanguageValue` exception is raised.```python&gt;&gt;&gt; from iso639.exceptions import InvalidLanguageValue&gt;&gt;&gt; try:...     Lang(&quot;foobar&quot;)... except InvalidLanguageValue as e:...     e.msg... &quot;'foobar' not supported by ISO 639&quot;```When an deprecated language value is passed to `Lang`, a `DeprecatedLanguageValue` exception is raised.```python&gt;&gt;&gt; from iso639.exceptions import DeprecatedLanguageValue&gt;&gt;&gt; try:...     Lang(&quot;gsc&quot;)... except DeprecatedLanguageValue as e:...     lg = Lang(e.change_to)...     f&quot;{e.name} replaced by {lg.name}&quot;...'Gascon replaced by Occitan (post 1500)'```## Sources of data used by iso639-langAs of March 7, 2022, iso639-lang is based on the latest official code tables provided by the ISO 639 registration authorities.  | Standard  | Name                                                                                       | Registration Authority || --------- | ------------------------------------------------------------------------------------------ | ---------------------- || [ISO 639-1](https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3.tab) | *Part 1: Alpha-2 code*                                                                       | Infoterm               || [ISO 639-2](https://www.loc.gov/standards/iso639-2/ISO-639-2_utf-8.txt) | *Part 2: Alpha-3 code*                                                                       | Library of Congress    || [ISO 639-3](https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3.tab) | *Part 3: Alpha-3 code for comprehensive coverage of languages*                               | SIL International      || ISO 639-4 | *Part 4: Implementation guidelines and general principles for language coding* (not a list)  | ISO/TC 37/SC 2         || [ISO 639-5](http://id.loc.gov/vocabulary/iso639-5.tsv) | *Part 5: Alpha-3 code for language families and groups*                                      | Library of Congress    |</longdescription>
</pkgmetadata>