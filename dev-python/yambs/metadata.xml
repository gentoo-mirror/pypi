<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!--    =====================================    generator=datazen    version=3.1.4    hash=95602563e86f0658fcab5efca45060d1    =====================================--&gt;# yambs ([2.8.0](https://pypi.org/project/yambs/))[![python](https://img.shields.io/pypi/pyversions/yambs.svg)](https://pypi.org/project/yambs/)![Build Status](https://github.com/vkottler/yambs/workflows/Python%20Package/badge.svg)[![codecov](https://codecov.io/gh/vkottler/yambs/branch/master/graphs/badge.svg?branch=master)](https://codecov.io/github/vkottler/yambs)![PyPI - Status](https://img.shields.io/pypi/status/yambs)![Dependents (via libraries.io)](https://img.shields.io/librariesio/dependents/pypi/yambs)*Yet another meta build-system.*## Documentation### Generated* By [sphinx-apidoc](https://vkottler.github.io/python/sphinx/yambs)(What's [`sphinx-apidoc`](https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html)?)* By [pydoc](https://vkottler.github.io/python/pydoc/yambs.html)(What's [`pydoc`](https://docs.python.org/3/library/pydoc.html)?)## Python Version SupportThis package is tested with the following Python minor versions:* [`python3.11`](https://docs.python.org/3.11/)## Platform SupportThis package is tested on the following platforms:* `ubuntu-latest`* `macos-latest`* `windows-latest`# IntroductionIt's undeniable that a software engineer must implement some project-workflowtooling as a coming-of-age endeavor.Your current workflow is slow and cumbersome? Time to roll up your sleeves andimprove it!What does every build system on the block advertise? *Speed* of course!What else do they advertise? Scalability! Compile source repositories that onlyfleets of data centers can even fathom checking out entire source trees of.Compile your whole company's software stack in only eight hours! (Down fromten from the previous build-system we used!!!)**Most build systems optimize for technical problem solving, and leaveuser-facing configuration and recurring-interaction mechanisms anafterthought.**Want to use our awesome tool that solves every hard computer-science problemknown to mankind? Sorry but you need to learn a totally bespoke programminglanguage to get started. What's that? Does it have linting + formatting +static-analysis tooling? Your text editor doesn't even ship with syntaxhighlighting out of the box? C'mon just configure your build. Buy some bookson Amazon and spend a few days reading the manual cover-to-cover.This project aims at bringing sanity to the user-facing parts of build systems:**the commands you enter, and the coherence of configuration data that actuallywarrants human management** (and not automated generation).## Prior Art* [vmklib](https://github.com/vkottler/vmklib) - a &quot;Makefile library&quot; with aPython extensibility interface, great for generic project workflow tasks, butnot specific enough for meta build-system purposes* [datazen](https://github.com/vkottler/datazen) - a solution for connectingthe awesomeness of [Jinja](https://jinja.palletsprojects.com/en/3.1.x/) todata and template directories, eliminating a need for writing bespoke codeto generate common boilerplate when a bit of configuration data is sufficient* [rcmpy](https://github.com/vkottler/rcmpy) - a more targeted `datazen`,focused on a &quot;put templates and configuration data here&quot; approach togenerating userspace configuration files (for e.g. your developer workstationeditor, shell and other configurations)* [userfs](https://github.com/vkottler/userfs) - a tool for performingarbitrary fresh-system bootstrapping tasks (cloning repositories, buildingand installing software from source) at the userspace level, rather than asa privileged user# Y.A.W.R`yambs` ain't wheel reinvention.This isn't a build-system alternative - it generates build instructions for[ninja](https://ninja-build.org/).What's that? Have I heard of [CMake](https://cmake.org/)?[Meson](https://mesonbuild.com/) perhaps? What about[Bazel](https://bazel.build/)? GNU's [Make](https://www.gnu.org/software/make/)is a timeless classic.## Build System Cardinal Sins### Infinite Configurability and FlexibilityIt's understandable that almost every build system implementation begins withthe objective of compiling sources and linking programs from an *existing*source tree, with probably a lot of inconsistent organization conventions.This drives complexity into the build system's interface for being told whatto do. **It's rare for any build system to have an out-of-the-box notion ofwhere to look for things and what work to do.**### Infinite ScalabilityIsn't any modern piece of software junk if it can't scale to millions ofconcurrent network connections / disk read-write tasks / computations?That's what the current software engineering zeitgeist will tell you. Whydefine conventions for small/medium projects, trivial to spawn the N+1'thinstance when the need arises, when you can spend all of your time making aninfinitely scalable build system for every line of code that thousands ofpeople are contributing every day?## Solutions1. Sane out-of-the-box conventions: put your code here (and organize it byfollowing a specific convention), put your configuration data here.# Command-line Options```$ ./venv3.11/bin/mbs -husage: mbs [-h] [--version] [-v] [-q] [--curses] [--no-uvloop] [-C DIR]           {compile_config,dist,download,gen,native,uf2conv,noop} ...Yet another meta build-system.options:  -h, --help            show this help message and exit  --version             show program's version number and exit  -v, --verbose         set to increase logging verbosity  -q, --quiet           set to reduce output  --curses              whether or not to use curses.wrapper when starting  --no-uvloop           whether or not to disable uvloop as event loop driver  -C DIR, --dir DIR     execute from a specific directorycommands:  {compile_config,dist,download,gen,native,uf2conv,noop}                        set of available commands    compile_config      load configuration data and write results to a file    dist                create a source distribution    download            download GitHub release assets    gen                 poll the source tree and generate any new build files    native              generate build files for native-only target projects    uf2conv             convert to UF2 or flash directly    noop                command stub (does nothing)```## Sub-command Options### `compile_config````$ ./venv3.11/bin/mbs compile_config -husage: mbs compile_config [-h] [-i INCLUDES_KEY] [-u] [-e]                          output inputs [inputs ...]positional arguments:  output                file to write  inputs                files to readoptions:  -h, --help            show this help message and exit  -i INCLUDES_KEY, --includes-key INCLUDES_KEY                        top-level key to use for included files (default:                        includes)  -u, --update          whether or not to use the 'update' merge strategy                        (instead of 'recursive')  -e, --expect-overwrite                        allow configuration files to overwrite data when                        loaded```### `dist````$ ./venv3.11/bin/mbs dist -husage: mbs dist [-h] [-c CONFIG] [-s]options:  -h, --help            show this help message and exit  -c CONFIG, --config CONFIG                        the path to the top-level configuration file (default:                        'yambs.yaml')  -s, --sources         set this flag to only capture source files```### `download````$ ./venv3.11/bin/mbs download -husage: mbs download [-h] [-o OWNER] [-r REPO] [-O OUTPUT] [-p PATTERN]options:  -h, --help            show this help message and exit  -o OWNER, --owner OWNER                        repository owner (default: 'vkottler')  -r REPO, --repo REPO  repository name (default: 'toolchains')  -O OUTPUT, --output OUTPUT                        output directory (default: 'toolchains')  -p PATTERN, --pattern PATTERN                        a pattern to use to select project specifications                        filtered by name```### `gen````$ ./venv3.11/bin/mbs gen -husage: mbs gen [-h] [-c CONFIG] [-i] [-w] [-s] [-n]options:  -h, --help            show this help message and exit  -c CONFIG, --config CONFIG                        the path to the top-level configuration file (default:                        'yambs.yaml')  -i, --single-pass     only run a single watch iteration  -w, --watch           whether or not to continue watching for source tree                        changes  -s, --sources         whether or not to only re-generate source manifests  -n, --no-build        whether or not to skip running 'ninja'```### `native````$ ./venv3.11/bin/mbs native -husage: mbs native [-h] [-c CONFIG] [-i] [-w] [-s] [-n]options:  -h, --help            show this help message and exit  -c CONFIG, --config CONFIG                        the path to the top-level configuration file (default:                        'yambs.yaml')  -i, --single-pass     only run a single watch iteration  -w, --watch           whether or not to continue watching for source tree                        changes  -s, --sources         whether or not to only re-generate source manifests  -n, --no-build        whether or not to skip running 'ninja'```### `uf2conv````$ ./venv3.11/bin/mbs uf2conv -husage: mbs uf2conv [-h] [-b BASE] [-f FAMILY] [-o FILE] [-d DEVICE_PATH] [-l]                   [-c] [-D] [-w] [-C] [-i]                   [INPUT]positional arguments:  INPUT                 input file (HEX, BIN or UF2)options:  -h, --help            show this help message and exit  -b BASE, --base BASE  set base address of application for BIN format                        (default: 0x2000)  -f FAMILY, --family FAMILY                        specify familyID - number or name (default: 0x0)  -o FILE, --output FILE                        write output to named file; defaults to &quot;flash.uf2&quot; or                        &quot;flash.bin&quot; where sensible  -d DEVICE_PATH, --device DEVICE_PATH                        select a device path to flash  -l, --list            list connected devices  -c, --convert         do not flash, just convert  -D, --deploy          just flash, do not convert  -w, --wait            wait for device to flash  -C, --carray          convert binary file to a C array, not UF2  -i, --info            display header information from UF2, do not convert```# Internal Dependency GraphA coarse view of the internal structure and scale of`yambs`'s source.Generated using [pydeps](https://github.com/thebjorn/pydeps) (via`mk python-deps`).![yambs's Dependency Graph](im/pydeps.svg)</longdescription>
</pkgmetadata>