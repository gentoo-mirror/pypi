<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Waiting for stuff sucks.roadrunner is a looping testrunner with environment preloading for test-drivendevelopment.  It makes integration testing with Plone much faster.Currently it is focused around preloading a Plone environment but it couldalso work for other frameworks as well.It works by pre-loading Python code, setup of test layers and a default Plonesite. This is called the resident test environment.Your tests are run in a child process which gets a copy-on-write memory space.Other than that it pretty much works like the regular Zope testrunner.How much faster is it?======================Here's an example. You are writing integration or functional tests for a Ploneapplication.On this fairly current laptop it takes 25s to load Zope, Plone and setup asample Plone site.Add 5 seconds for the application load and test run for a total of 30 seconds.If you are iterating on a functional test and want to quickly check yourchanges that is too long to wait.Using roadrunner you load the environment the first time.  Subsequent timesyou run your test your total time will be only 5 seconds.Yes, you can save 25 seconds every time you run your test.How to use it?==============Roadrunner only currently works as part of a zc.buildout environment.The easiest way to try it is to add it to an existing Plone 3 buildout.Now for a sample part.This will create a new directory in parts named by the part containing a copyof your Zope instance environment but with the packages-under-test excludedfrom being loaded via ZCML by default.::  [roadrunner]  recipe = roadrunner:plone  packages-under-test = my.package  You can also match several packages using simple globbing, eg: my.packages.*The parameter 'zope2-instance' allows you to specify the name of the partwhich corresponds to the zope instance roadrunner will work against.  Thedefault is 'instance'.By default resident Plone site will be created. This should work in mostsituations where you are installing add-on products that use install methodsor GenericSetup profiles.setup-plone=0 allows you to disable the Plone site setup optimization. Youmight need to do this in certain situations where you are using the profile_idparameter.Then you can run roadrunner::  $ bin/roadrunner -s my.package  It will preload Zope &amp; Plone, then fork off the first testrunner. Once thefirst testrunner is complete you will receive the roadrunner prompt whereyou launch additional tests.Recipe Options==============zope2-instance:The zope2 instance to use for basing the installation on. Defaults to 'instance'.Gotchas=======- roadrunner is still a bit experimental. If in doubt, check it with the  regular testrunner. If you find a difference please send some details  including traceback, product versions, buildout.cfg and your tests.- It may require you to change your test setup slightly if you haven't yet  already.  You'll be fine as long as you follow the standard sequence of importing your  product, loading its ZCML and then calling ztc.installProduct within an  @onsetup deferred method.     This allows the loading of your product to occur in the child testrunner  process which critical that roadrunner does what its supposed to do.  For more details see an example here:    http://plone.org/documentation/tutorial/testing/writing-a-plonetestcase-unit-integration-test  - Because it preloads the Plone environment you won't be able to see changes  to the Core Plone components.  However, it should see all changes in your  application code which is what you will most likely be changing anyways.Other options to speed up Plone testing=======================================plone.reload is excellent to do exploratory testing and development.Known Issues============- ZCML registrations lost.  This can occur if you run unit tests which employPlacelessSetup.  A simple workaround is to avoid running unit tests andintegration tests together with roadrunner.  You can run them separatelywithout issue.Source &amp; Bug Tracker====================Source Code:  http://github.com/hexsprite/roadrunnerTracker:  http://hexsprite.lighthouseapp.com/projects/21973-roadrunnerTested With===========Plone 3.1.x Let me know if you get it working on anything else.Have also had reports of success with Plone 2.5.xAlso there are reports of success with Zope 2.9.8 and Plone 2.5.5.Windows is untested and probably does not work currently. Feedback and patchesaccepted.Author======Send questions, comments &amp; bug reports to:Jordan Baker &lt;jbb@no_spam_plz_scryent.com&gt;License=======Licensed under ZPL 2.1see doc/LICENSE.txtChangelog---------0.2.3.1 (Jun 25, 2009)======================- Added a MANIFEST so this can be built by pythons without git support installed.0.2.3 (Jun 16, 2009)====================- Bug #4: OSX Core errors due to no exec after fork.- Bug #2: the roadrunner script was not being updated properly.  now when you  re-run buildout it will pickup new dependencies.0.2.2 (Jun 1, 2008)===================Bugs Fixed:- zope2/lib/python was being placed at the very start of the path which didn't  allow newer eggs to be seen. Now placed at the end of sys.path.New Features:- hack to reset terminal after you kill PDB. May need work for Windows.0.2.1 (May 26, 2008)====================- fixed bug in the buildout recipe that excluded Zope from the sys.path. Bug  crept in because of &quot;dirty&quot; python install. virtualenv --no-site-packages is  your friend.- removed an annoying child process message.0.2 (May 25, 2008)==================-  added a zc.buildout recipe to setup roadrunner with Plone-  fixed globbing for packages under test-  fixed child signal handling so you can reliably interrupt running tests   without killing the parent 0.1  (May 18, 2008)===================Initial public version</longdescription>
</pkgmetadata>