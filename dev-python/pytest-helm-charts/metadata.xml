<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pytest-helm-charts[![build](https://github.com/giantswarm/pytest-helm-charts/actions/workflows/main.yml/badge.svg)](https://github.com/giantswarm/pytest-helm-charts/actions/workflows/main.yml/badge.svg)[![codecov](https://codecov.io/gh/giantswarm/pytest-helm-charts/branch/master/graph/badge.svg)](https://codecov.io/gh/giantswarm/pytest-helm-charts)[![Documentation Status](https://readthedocs.org/projects/pytest-helm-charts/badge/?version=latest)](https://pytest-helm-charts.readthedocs.io/en/latest/?badge=latest)[![PyPI Version](https://img.shields.io/pypi/v/pytest-helm-charts.svg)](https://pypi.org/project/pytest-helm-charts/)[![Python Versions](https://img.shields.io/pypi/pyversions/pytest-helm-charts.svg)](https://pypi.org/project/pytest-helm-charts/)[![Apache License](https://img.shields.io/badge/license-apache-blue.svg)](https://pypi.org/project/pytest-helm-charts/)A plugin to test helm charts on Kubernetes clusters.Full documentation (including API) available on &lt;https://pytest-helm-charts.readthedocs.io/&gt;.---## FeaturesThis plugin provides a set of [pytest](https://docs.pytest.org/) fixtures that allow you to easilywrite tests for Helm charts and run them on Kubernetes clusters.It can be also used to test Helm charts deployed using the Open Source[Giant Swarm App Platform](https://docs.giantswarm.io/basics/app-platform/).Most important features:- provides [pykube-ng](http://pykube.readthedocs.io/) interface to access Kubernetes clusters- provides [environment variables based options](#usage) to configure the target cluster to run on- provides fixtures to work with some standard Kubernetes resources as well as some custom ones:  - [Kubernetes objects](pytest_helm_charts.k8s)  - [Giant Swarm App Platform objects](pytest_helm_charts.giantswarm_app_platform)  - [Flux CD objects](pytest_helm_charts.flux)- provides set of fixtures to easily work with Helm charts## RequirementsPlease check `[tool.poetry.dependencies]` list in the [`pyproject.toml`](pyproject.toml) file.## InstallationYou can install &quot;pytest-helm-charts&quot; via `pip` from `PyPI`:```bashpip install pytest-helm-charts```## Usage### Running your testsWhen you want to run your tests, you invoke `pytest` as usual, just configuringcluster and chart information using environment variables or command line options.The following options are available as environment variables (start `pytest` with `-h`to check corresponding command line options):- &quot;KUBECONFIG&quot; - (mandatory) a path to kube config file used to connect to a k8s cluster- &quot;ATS_CHART_PATH&quot; - path to a chart being tested (if a chart is tested)- &quot;ATS_CHART_VERSION&quot; - version of the chart being tested (if a chart is tested)- &quot;ATS_CLUSTER_TYPE&quot; - type of the cluster used for testing- &quot;ATS_CLUSTER_VERSION&quot; - k8s version of the cluster used for testing- &quot;ATS_APP_CONFIG_FILE_PATH&quot; - optional path to a `values.yaml` file used to configure a chart under test(if a chart is tested)- &quot;ATS_EXTRA_*&quot; - any such arbitrary variable value will be extracted and included in the `test_extra_info` fixtureCurrently, the only supported cluster type is `external`, which means the cluster is notmanaged by the test suite. You just point the test suite to a `kube.config` file,which can be used to connect to the Kubernetes API with `KUBECONFIG` env variableoption. For creating development time clusters, we recommend using[KinD](https://kind.sigs.k8s.io/).If you use this project to test Helm charts against Giant Swarm App Platform, the `existing`cluster must already have the platform components installed. Please refer to and usethe [`app-test-suite`](https://github.com/giantswarm/app-test-suite) tool to easilycreate `KinD` based clusters with all the components already installed.### Writing testsThe easiest way to get started is by checking our[examples](https://pytest-helm-charts.readthedocs.io/en/latest/examples/basic).The list of available fixtures can be found by running `pytest --fixtures`, butyou can also just check [the most important fixtures](docs/fixtures.md).Full [API docs](https://pytest-helm-charts.readthedocs.io/en/latest/api/pytest_helm_charts/)are also available.## ContributingContributions are very welcome.- Project is managed with [`poetry`](https://python-poetry.org/),  to start developing run `poetry install`- Tests for all supported python versions can be run with [`tox`](https://tox.readthedocs.io/):  `poetry run tox -- --log-cli-level info tests/`- Please ensure  [the coverage](https://codecov.io/gh/giantswarm/pytest-helm-charts/)  at least stays the same before you submit a pull request.### Creating a new release- merge your changes to `master` branch- edit `pyproject.toml` and update the project version; edit `CHANGELOG.md`; commit- create a new tag with the same version in git, i.e. `git tag v1.1.1`- push your changes to GitHub to trigger a release `git push; git push origin v1.1.1`## LicenseSee [LICENSE](LICENSE).## ChangelogSee [CHANGELOG.md](./CHANGELOG.md).## IssuesIf you encounter any problems, please [file an issue](https://github.com/giantswarm/pytest-helm-charts/issues)along with a detailed description.</longdescription>
</pkgmetadata>