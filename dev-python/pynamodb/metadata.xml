<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========PynamoDB========.. image:: https://img.shields.io/pypi/v/pynamodb.svg    :target: https://pypi.python.org/pypi/pynamodb/.. image:: https://img.shields.io/conda/vn/conda-forge/pynamodb.svg    :target: https://anaconda.org/conda-forge/pynamodb.. image:: https://github.com/pynamodb/PynamoDB/workflows/Tests/badge.svg    :target: https://github.com/pynamodb/PynamoDB/actions.. image:: https://img.shields.io/coveralls/pynamodb/PynamoDB/master.svg    :target: https://coveralls.io/r/pynamodb/PynamoDBA Pythonic interface for Amazon's `DynamoDB &lt;http://aws.amazon.com/dynamodb/&gt;`_.DynamoDB is a great NoSQL service provided by Amazon, but the API is verbose.PynamoDB presents you with a simple, elegant API.Useful links:* See the full documentation at https://pynamodb.readthedocs.io/* Ask questions in the `GitHub issues &lt;https://github.com/pynamodb/PynamoDB/issues&gt;`_* See release notes at https://pynamodb.readthedocs.io/en/latest/release_notes.htmlInstallation============From PyPi::    $ pip install pynamodbFrom GitHub::    $ pip install git+https://github.com/pynamodb/PynamoDB#egg=pynamodbFrom conda-forge::    $ conda install -c conda-forge pynamodbBasic Usage===========Create a model that describes your DynamoDB table... code-block:: python    from pynamodb.models import Model    from pynamodb.attributes import UnicodeAttribute    class UserModel(Model):        &quot;&quot;&quot;        A DynamoDB User        &quot;&quot;&quot;        class Meta:            table_name = &quot;dynamodb-user&quot;        email = UnicodeAttribute(null=True)        first_name = UnicodeAttribute(range_key=True)        last_name = UnicodeAttribute(hash_key=True)PynamoDB allows you to create the table if needed (it must exist before you can use it!):.. code-block:: python    UserModel.create_table(read_capacity_units=1, write_capacity_units=1)Create a new user:.. code-block:: python    user = UserModel(&quot;John&quot;, &quot;Denver&quot;)    user.email = &quot;djohn@company.org&quot;    user.save()Now, search your table for all users with a last name of 'Denver' and whosefirst name begins with 'J':.. code-block:: python    for user in UserModel.query(&quot;Denver&quot;, UserModel.first_name.startswith(&quot;J&quot;)):        print(user.first_name)Examples of ways to query your table with filter conditions:.. code-block:: python    for user in UserModel.query(&quot;Denver&quot;, UserModel.email==&quot;djohn@company.org&quot;):        print(user.first_name)Retrieve an existing user:.. code-block:: python    try:        user = UserModel.get(&quot;John&quot;, &quot;Denver&quot;)        print(user)    except UserModel.DoesNotExist:        print(&quot;User does not exist&quot;)Upgrade Warning===============The behavior of 'UnicodeSetAttribute' has changed in backwards-incompatible waysas of the 1.6.0 and 3.0.1 releases of PynamoDB.See `UnicodeSetAttribute upgrade docs &lt;https://pynamodb.readthedocs.io/en/latest/release_notes.html&gt;`_for detailed instructions on how to safely perform the upgrade.Advanced Usage==============Want to use indexes? No problem:.. code-block:: python    from pynamodb.models import Model    from pynamodb.indexes import GlobalSecondaryIndex, AllProjection    from pynamodb.attributes import NumberAttribute, UnicodeAttribute    class ViewIndex(GlobalSecondaryIndex):        class Meta:            read_capacity_units = 2            write_capacity_units = 1            projection = AllProjection()        view = NumberAttribute(default=0, hash_key=True)    class TestModel(Model):        class Meta:            table_name = &quot;TestModel&quot;        forum = UnicodeAttribute(hash_key=True)        thread = UnicodeAttribute(range_key=True)        view = NumberAttribute(default=0)        view_index = ViewIndex()Now query the index for all items with 0 views:.. code-block:: python    for item in TestModel.view_index.query(0):        print(&quot;Item queried from index: {0}&quot;.format(item))It's really that simple.Want to use DynamoDB local? Just add a ``host`` name attribute and specify your local server... code-block:: python    from pynamodb.models import Model    from pynamodb.attributes import UnicodeAttribute    class UserModel(Model):        &quot;&quot;&quot;        A DynamoDB User        &quot;&quot;&quot;        class Meta:            table_name = &quot;dynamodb-user&quot;            host = &quot;http://localhost:8000&quot;        email = UnicodeAttribute(null=True)        first_name = UnicodeAttribute(range_key=True)        last_name = UnicodeAttribute(hash_key=True)Want to enable streams on a table? Just add a ``stream_view_type`` name attribute and specifythe type of data you'd like to stream... code-block:: python    from pynamodb.models import Model    from pynamodb.attributes import UnicodeAttribute    from pynamodb.constants import STREAM_NEW_AND_OLD_IMAGE    class AnimalModel(Model):        &quot;&quot;&quot;        A DynamoDB Animal        &quot;&quot;&quot;        class Meta:            table_name = &quot;dynamodb-user&quot;            host = &quot;http://localhost:8000&quot;            stream_view_type = STREAM_NEW_AND_OLD_IMAGE        type = UnicodeAttribute(null=True)        name = UnicodeAttribute(range_key=True)        id = UnicodeAttribute(hash_key=True)Features========* Python &gt;= 3.6 support* An ORM-like interface with query and scan filters* Compatible with DynamoDB Local* Supports the entire DynamoDB API* Support for Unicode, Binary, JSON, Number, Set, and UTC Datetime attributes* Support for Global and Local Secondary Indexes* Provides iterators for working with queries, scans, that are automatically paginated* Automatic pagination for bulk operations* Complex queries* Batch operations with automatic pagination* Iterators for working with Query and Scan operations</longdescription>
</pkgmetadata>