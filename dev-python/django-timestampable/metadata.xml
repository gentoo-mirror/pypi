<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django TimestampsTimestamps and Soft Delete Patterns in Django Models.## How to install### Option a)````bash$ pip install django-timestampable````### Option b)To install django-timestampable with [Django Rest Framework](https://www.django-rest-framework.org/) included:````bash$ pip install &quot;django-timestampable[drf]&quot;````*You can use the first option if you have Django Rest Framework already installed.*&amp;nbsp;#### And add &quot;timestamps&quot; to your INSTALLED_APPS settings```pythonINSTALLED_APPS = [    # ...    'timestamps',]```#### Or, if you installed with [Django Rest Framework](https://www.django-rest-framework.org/):```pythonINSTALLED_APPS = [    # ...    'rest_framework',    'timestamps',]```## Usagea) For models you want timestamps, just inherit Timestampable:```pythonfrom timestamps.models import models, Timestampableclass YourModel(Timestampable):    # your fields here ...```b) For models you want soft-delete, just inherit SoftDeletes:```pythonfrom timestamps.models import models, SoftDeletesclass YourModel(SoftDeletes):    # your fields here ...```c) If you want both, you can also inherit from Model for shorter convenience:```python# to this:from timestamps.models import models, Model  # explicit import Model (which contains timestamps)# instead of:# from django.db import models# Explicitly import of &quot;Model&quot; is required# because models.Model is the original from Django models moduleclass YourModel(Model):    # your fields here ...```### Soft Deleting- To get all objects without the deleted ones:```queryset = YourModel.objects```- To get only deleted objects:```queryset = YourModel.objects_deleted```- To get all the objects, including deleted ones:```queryset = YourModel.objects_with_deleted```#### To soft delete an instance```pythonsome_model = MyModel.objects.first()some_model.delete()  # or some_model.delete(hard=False)```#### To restore an instance```pythonsome_model = MyModel.objects_deleted.first()some_model.restore()```#### To hard delete an instance```pythonsome_model = MyModel.objects.first()some_model.delete(hard=True)```#### To bulk soft delete a queryset```pythonqs = MyModel.objects  # you can also apply filters to bulk delete a subset: qs = MyModel.objects.filter(...)qs.delete()  # or qs.delete(hard=False)```#### To bulk hard delete a queryset```pythonqs = MyModel.objects  # ... bulk hard delete a subset: qs = MyModel.objects.filter(...)qs.delete(hard=True)```#### To bulk restore a queryset```pythonqs = MyModel.objects_deleted  # ... bulk restore a subset: qs = MyModel.objects_deleted.filter(...)qs.restore()  # or qs.delete(hard=False)```&amp;nbsp;---&amp;nbsp;### Signals for Soft Deleting and RestoringYou have 4 signals available that you can listen in your project:- pre_soft_delete- post_soft_delete- pre_restore- post_restoreTo use them, just import the signals and register listeners for them. Eg:#### Pre Soft Delete```python3from timestamps.signals import pre_soft_deletefrom django.dispatch import receiver@receiver(pre_soft_delete)def on_pre_soft_delete(sender, instance, **kwargs):    print(f&quot;Model {sender} with id {instance.pk} will be deleted!&quot;)```#### Post Soft Delete```python3from timestamps.signals import post_soft_deletefrom django.dispatch import receiver@receiver(post_soft_delete)def on_post_soft_delete(sender, instance, **kwargs):    print(f&quot;Model {sender} with id {instance.pk} was deleted at {instance.deleted_at}!&quot;)```#### Pre Restore```python3from timestamps.signals import pre_restorefrom django.dispatch import receiver@receiver(pre_restore)def on_pre_restore(sender, instance, **kwargs):    print(f&quot;Model {sender} with id {instance.pk} deleted at {instance.deleted_at} will be restored!&quot;)```#### Post Restore```python3from timestamps.signals import post_restorefrom django.dispatch import receiver@receiver(post_restore)def on_post_restore(sender, instance, **kwargs):    print(f&quot;Model {sender} with id {instance.pk} restored!&quot;)```&amp;nbsp;---&amp;nbsp;### If you're using DRFYou can use the SoftDeleteModelViewSet along with DefaultRouter present in this packageand you will have access to a complete CRUD on soft deleted objects as well.This 2 classes allows you to expose:Consider a Dummy Model that inherits from SoftDelete.You can have all routes for CRUD operations on this model:| VERB | URL PATH | DESCRIPTION || ---- | -------- | ----------- || GET | /dummy/ | gets all the objects, without the deleted ones || POST | /dummy/ | creates a new object || DELETE | /dummy/[?permanent=\&lt;true,false&gt;] | deletes all objects (or a filtered subject). allows hard-delete. Default: soft-delete || GET | /dummy/\&lt;pk\&gt;/ | gets a non-deleted object (by primary key) || POST | /dummy/\&lt;pk\&gt;/ | updates an object (by primary key) || PATCH | /dummy/\&lt;pk\&gt;/ | partial updates an object (by primary key) || DELETE | /dummy/\&lt;pk\&gt;/[?permanent=\&lt;true,false&gt;] | deletes a non-deleted object (by primary key) || PATCH | /dummy/restore/ | restore all objects (or a filtered subject) || PATCH | /dummy/\&lt;pk\&gt;/restore/ | restores a soft-deleted object (by primary key) || GET | /dummy/deleted/ | gets all deleted objects || GET | /dummy/deleted/\&lt;pk\&gt;/ | gets a deleted object (by primary key) || GET | /dummy/with-deleted/ | get all objects, deleted included || GET | /dummy/with-deleted/\&lt;pk\&gt;/ | get an object (by primary key) |&amp;nbsp;The query parameter &quot;permanent&quot; it's case-sensitive and can also be one of the values:```pythontruthful_options = [    't', 'T',    'y', 'Y', 'yes', 'Yes', 'YES',    'true', 'True', 'TRUE',    'on', 'On', 'ON',    '1', 1,    True]``````pythonfalsely_options = [    'f', 'F',    'n', 'N', 'no', 'No', 'NO',    'false', 'False', 'FALSE',    'off', 'Off', 'OFF',    '0', 0,    'null',    False]```#### How to expose all CRUD operations```python# dummy/views.pyfrom timestamps.drf import viewsets  # instead of: from rest_framework import viewsetsfrom .models import Dummyfrom .serializers import DummySerializerclass DummyModelViewSet(viewsets.ModelViewSet):    queryset = Dummy.objects.all()    serializer_class = DummySerializer```````python# dummy/urls.pyfrom timestamps.drf import routers  # instead of: from rest_framework import routersfrom .views import DummyModelViewSetrouter = routers.DefaultRouter()router.register(r'dummy', DummyModelViewSet)urlpatterns = router.urls````#### Note AFor security reasons, by default, if you pass to the query parameter &quot;?permanent=true&quot; on a bulk destroy, the view will not let you hard-delete, raising a PermissionDenied.If you want to enable it on your project, just add to the project settings:```pythonTIMESTAMPS__BULK_HARD_DELETE = True```It's here to prevent users of &quot;forgetting&quot; that the routes also expose bulk hard-delete by default.In production, you can set this flag to True and manage hard-deleting using DRF permissions.*Hard-deleting one object at time is allowed by default.*&amp;nbsp;#### NOTE BBulk actions of restoring and deleting returns no content (status code 204) by default.If you want to return a response with the number of deleted/restored objects, just add this setting:```pythonTIMESTAMPS__BULK_RESPONSE_CONTENT = True```Example of returned response: ```{&quot;count&quot;: 3 }```&amp;nbsp;#### Note CIf you don't want to expose all the crud operations, be free to register as:```pythonrouter.register(r'dummy', DummyModelViewSet.as_view({'get': 'list_with_deleted'}))  # e.g.```And you can always use the mixins instead and create your APIViews:````pythonfrom rest_framework import genericfrom timestamps.drf.mixins import ListDeletedModelMixinfrom .models import Dummyfrom .serializers import DummySerializerclass MyView(ListDeletedModelMixin, generic.GenericAPIView):    queryset = Dummy.objects.all()    serializer_class = DummySerializer        def list_deleted(self, request, *args, **kwargs):        # optional. your code goes here...````Internally, the ListDeletedModelMixin just calls the method ListModelMixin.list(self, request, *args, **kwargs).The method of determining if the queryset must get all objects, only the deleted or all with deleted is done using AOP,which means that the method GenericAPIView.get_queryset() is advised at runtime to map the current actionto the correct queryset the view needs.If you don't inherit from generic.GenericAPIView, you must be aware that, for this type of scenarios,you need to override the method get_queryset() to return the objects that matches your needs.</longdescription>
</pkgmetadata>