<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># nflows&lt;a href=&quot;https://doi.org/10.5281/zenodo.4296287&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.4296287.svg&quot; alt=&quot;DOI&quot;&gt;&lt;/a&gt;`nflows` is a comprehensive collection of [normalizing flows](https://arxiv.org/abs/1912.02762) using [PyTorch](https://pytorch.org).## InstallationTo install from PyPI:```pip install nflows```## UsageTo define a flow:```pythonfrom nflows import transforms, distributions, flows# Define an invertible transformation.transform = transforms.CompositeTransform([    transforms.MaskedAffineAutoregressiveTransform(features=2, hidden_features=4),    transforms.RandomPermutation(features=2)])# Define a base distribution.base_distribution = distributions.StandardNormal(shape=[2])# Combine into a flow.flow = flows.Flow(transform=transform, distribution=base_distribution)```To evaluate log probabilities of inputs:```pythonlog_prob = flow.log_prob(inputs)```To sample from the flow:```pythonsamples = flow.sample(num_samples)```Additional examples of the workflow are provided in [examples folder](examples/).## DevelopmentYou can install all the dependencies using the `environment.yml` file to create a conda environment: ```conda env create -f environment.yml```Alternatively, you can install via `setup.py` (the `dev` flag installs development and testing dependencies):```pip install -e &quot;.[dev]&quot;```## Citing nflowsTo cite the package:```bibtex@software{nflows,  author       = {Conor Durkan and                  Artur Bekasov and                  Iain Murray and                  George Papamakarios},  title        = {{nflows}: normalizing flows in {PyTorch}},  month        = nov,  year         = 2020,  publisher    = {Zenodo},  version      = {v0.14},  doi          = {10.5281/zenodo.4296287},  url          = {https://doi.org/10.5281/zenodo.4296287}}```The version number is intended to be the one from `nflows/version.py`. The year/month correspond to the date of the release. BibTeX entries for other versions could be found on [Zenodo](https://doi.org/10.5281/zenodo.4296286).If you're using spline-based flows in particular, consider citing the _Neural Spline Flows_ paper: [[bibtex]](https://gpapamak.github.io/bibtex/neural_spline_flows.bib).## References`nflows` is derived from [bayesiains/nsf](https://github.com/bayesiains/nsf) originally published with&gt; C. Durkan, A. Bekasov, I. Murray, G. Papamakarios, _Neural Spline Flows_, NeurIPS 2019.&gt; [[arXiv]](https://arxiv.org/abs/1906.04032) [[bibtex]](https://gpapamak.github.io/bibtex/neural_spline_flows.bib)`nflows` has been used in &gt; Conor Durkan, Iain Murray, George Papamakarios, _On Contrastive Learning for Likelihood-free Inference_, ICML 2020.&gt; [[arXiv]](https://arxiv.org/abs/2002.03712).&gt; Artur Bekasov, Iain Murray, _Ordering Dimensions with Nested Dropout Normalizing Flows_.&gt; [[arXiv]](https://arxiv.org/abs/2006.08777).&gt; Tim Dockhorn, James A. Ritchie, Yaoliang Yu, Iain Murray, _Density Deconvolution with Normalizing Flows_.&gt; [[arXiv]](https://arxiv.org/abs/2006.09396).`nflows` is used by the conditional density estimation package [pyknos](https://github.com/mackelab/pyknos), and in turn the likelihood-free inference framework [sbi](https://github.com/mackelab/sbi).</longdescription>
</pkgmetadata>