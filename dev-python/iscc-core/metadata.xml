<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ISCC - Codec &amp; Algorithms[![Build](https://github.com/iscc/iscc-core/actions/workflows/tests.yml/badge.svg)](https://github.com/iscc/iscc-core/actions/workflows/tests.yml)[![Version](https://img.shields.io/pypi/v/iscc-core.svg)](https://pypi.python.org/pypi/iscc-core/)[![Coverage](https://codecov.io/gh/iscc/iscc-core/branch/main/graph/badge.svg?token=7BJ7HJU815)](https://codecov.io/gh/iscc/iscc-core)[![Quality](https://app.codacy.com/project/badge/Grade/ad1cc48ac0c0413ea2373a938148f019)](https://www.codacy.com/gh/iscc/iscc-core/dashboard)[![Downloads](https://pepy.tech/badge/iscc-core)](https://pepy.tech/project/iscc-core)`iscc-core` is the reference implementation of the core algorithms of the [ISCC](https://iscc.codes)(*International Standard Content Code*)## What is the ISCCThe ISCC is a similarity preserving fingerprint and identifier for digital media assets.ISCCs are generated algorithmically from digital content, just like cryptographic hashes. However,instead of using a single cryptographic hash function to identify data only, the ISCC uses variousalgorithms to create a composite identifier that exhibits similarity-preserving properties (softhash).The component-based structure of the ISCC identifies content at multiple levels of abstraction. Eachcomponent is self-describing, modular, and can be used separately or with others to aid in variouscontent identification tasks. The algorithmic design supports content deduplication, databasesynchronization, indexing, integrity verification, timestamping, versioning, data provenance,similarity clustering, anomaly detection, usage tracking, allocation of royalties, fact-checking andgeneral digital asset management use-cases.## What is `iscc-core``iscc-core` is a python based reference library of the core algorithms to create standard-compliantISCC codes. It also a good reference for porting ISCC to other programming languages.!!! tip    This is a low level reference implementation that does not inlcude features like mediatype    detection, metadata extraction or file format specific content extraction. Please have a look at    the [iscc-sdk](https://github.com/iscc/iscc-sdk) which adds those higher level features on top    of the `iscc-core` library.## Project StatusThe ISCC is under development as [ISO/CD 24138](https://www.iso.org/standard/77899.html) -International Standard Content Code within[ISO/TC 46/SC 9/WG 18](https://www.iso.org/committee/48836.html).## ISCC Architecture![ISCC Architecture](https://raw.githubusercontent.com/iscc/iscc-core/master/docs/images/iscc-codec-light.png)## ISCC MainTypes| Idx | Slug     | Bits | Purpose                                                || --- | :------- | ---- | ------------------------------------------------------ || 0   | META     | 0000 | Match on metadata similarity                           || 1   | SEMANTIC | 0001 | Match on semantic content similarity                   || 2   | CONTENT  | 0010 | Match on perceptual content similarity                 || 3   | DATA     | 0011 | Match on data similarity                               || 4   | INSTANCE | 0100 | Match on data identity                                 || 5   | ISCC     | 0101 | Composite of two or more components with common header |## InstallationUse the package manager [pip](https://pip.pypa.io/en/stable/) to install `iscc-core`.```bashpip install iscc-core```## Quick Start```pythonimport jsonimport iscc_core as icmeta_code = ic.gen_meta_code(name=&quot;ISCC Test Document!&quot;)print(f&quot;Meta-Code:     {meta_code['iscc']}&quot;)print(f&quot;Structure:     {ic.iscc_explain(meta_code['iscc'])}\n&quot;)# Extract text from filewith open(&quot;demo.txt&quot;, &quot;rt&quot;, encoding=&quot;utf-8&quot;) as stream:    text = stream.read()    text_code = ic.gen_text_code_v0(text)    print(f&quot;Text-Code:     {text_code['iscc']}&quot;)    print(f&quot;Structure:     {ic.iscc_explain(text_code['iscc'])}\n&quot;)# Process raw bytes of textfilewith open(&quot;demo.txt&quot;, &quot;rb&quot;) as stream:    data_code = ic.gen_data_code(stream)    print(f&quot;Data-Code:     {data_code['iscc']}&quot;)    print(f&quot;Structure:     {ic.iscc_explain(data_code['iscc'])}\n&quot;)    stream.seek(0)    instance_code = ic.gen_instance_code(stream)    print(f&quot;Instance-Code: {instance_code['iscc']}&quot;)    print(f&quot;Structure:     {ic.iscc_explain(instance_code['iscc'])}\n&quot;)# Combine ISCC-UNITs into ISCC-CODEiscc_code = ic.gen_iscc_code(    (meta_code[&quot;iscc&quot;], text_code[&quot;iscc&quot;], data_code[&quot;iscc&quot;], instance_code[&quot;iscc&quot;]))# Create convenience `Code` object from ISCC stringiscc_obj = ic.Code(iscc_code[&quot;iscc&quot;])print(f&quot;ISCC-CODE:     {ic.iscc_normalize(iscc_obj.code)}&quot;)print(f&quot;Structure:     {iscc_obj.explain}&quot;)print(f&quot;Multiformat:   {iscc_obj.mf_base32}\n&quot;)# Compare with changed ISCC-CODE:new_dc, new_ic = ic.Code.rnd(mt=ic.MT.DATA), ic.Code.rnd(mt=ic.MT.INSTANCE)new_iscc = ic.gen_iscc_code((meta_code[&quot;iscc&quot;], text_code[&quot;iscc&quot;], new_dc.uri, new_ic.uri))print(f&quot;Compare ISCC-CODES:\n{iscc_obj.uri}\n{new_iscc['iscc']}&quot;)print(json.dumps(ic.iscc_compare(iscc_obj.code, new_iscc[&quot;iscc&quot;]), indent=2))```The output of this example is as follows:```Meta-Code:     ISCC:AAAT4EBWK27737D2Structure:     META-NONE-V0-64-3e103656bffdfc7aText-Code:     ISCC:EAAQMBEYQF6457DPStructure:     CONTENT-TEXT-V0-64-060498817dcefc6fData-Code:     ISCC:GAA7UJMLDXHPPENGStructure:     DATA-NONE-V0-64-fa258b1dcef791a6Instance-Code: ISCC:IAA3Y7HR2FEZCU4NStructure:     INSTANCE-NONE-V0-64-bc7cf1d14991538dISCC-CODE:     ISCC:KACT4EBWK27737D2AYCJRAL5Z36G76RFRMO4554RU26HZ4ORJGIVHDIStructure:     ISCC-TEXT-V0-MCDI-3e103656bffdfc7a060498817dcefc6ffa258b1dcef791a6bc7cf1d14991538dMultiformat:   bzqavabj6ca3fnp757r5ambeyqf6457dp7isywhoo66i2npd46hiutektruCompare ISCC-CODES:ISCC:KACT4EBWK27737D2AYCJRAL5Z36G76RFRMO4554RU26HZ4ORJGIVHDIISCC:KACT4EBWK27737D2AYCJRAL5Z36G7Y7HA2BMECKMVRBEQXR2BJOS6NA{  &quot;meta_dist&quot;: 0,  &quot;content_dist&quot;: 0,  &quot;data_dist&quot;: 33,  &quot;instance_match&quot;: false}```## DocumentationDocumentation is published at&lt;https://core.iscc.codes&gt;## Development**Requirements**- [Python 3.7.2](https://www.python.org/) or higher for code generation and static site building.- [Poetry](https://python-poetry.org/) for installation and dependency management.**Development Setup**```shellgit clone https://github.com/iscc/iscc-core.gitcd iscc-corepoetry install```**Development Tasks**Tests, coverage, code formatting and other tasks can be run with the `poe` command:```shellpoePoe the Poet - A task runner that works well with poetry.version 0.18.1Result: No task specified.USAGE  poe [-h] [-v | -q] [--root PATH] [--ansi | --no-ansi] task [task arguments]GLOBAL OPTIONS  -h, --help     Show this help page and exit  --version      Print the version and exit  -v, --verbose  Increase command output (repeatable)  -q, --quiet    Decrease command output (repeatable)  -d, --dry-run  Print the task contents but don't actually run it  --root PATH    Specify where to find the pyproject.toml  --ansi         Force enable ANSI output  --no-ansi      Force disable ANSI outputCONFIGURED TASKS  gentests       Generate conformance test data  format         Code style formating with black  docs           Copy README.md to /docs  format-md      Markdown formating with mdformat  lf             Convert line endings to lf  test           Run tests with coverage  sec            Security check with bandit  all```Use `poe all` to run all tasks before committing any changes.## Maintainers[@titusz](https://github.com/titusz)## ContributingPull requests are welcome. For significant changes, please open an issue first to discuss yourplans. Please make sure to update tests as appropriate.You may also want join our developer chat on Telegram at &lt;https://t.me/iscc_dev&gt;.</longdescription>
</pkgmetadata>