<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![](/resources/banner.png)# nektar[![](https://images.hive.blog/20x20/https://images.ecency.com/DQmQBYsZc8G6awKZcVbonRsJBUWJ1HTZy3WuTaMXvBreyhj/4511507.png) Nektar](#) a Hive API SDK for Python.## Official Release**nektar** can now be used on your Python projects through PyPi by running pip command on a Python-ready environment.`pip install hive-nektar --upgrade`Current version is 0.9.\*, but more updates are coming soon.This is compatible with Python 3.9 or later.## WARNINGS: - This package is still under development, some future breakage is inevitable. - Some AppBase API methods are still under development and subject to change. - Do NOT copy your private keys in your codes!## Features**1.** Lightweight package for small Hive dApps or projects. &lt;br&gt;**2.** Readily available methods using the `nektar.Waggle()` class. &lt;br&gt;**3.** Highly costumizable via `appbase` module. &lt;br&gt;## Nektar ModuleContains the Waggle, Swarm, and Drone classes. ***WARNING:*** Store WIFs securely in a separate file!**Import Module**```pythonfrom nektar import Nektarimport jsonwifs = { &quot;active&quot;: &quot;5*&quot; , &quot;posting&quot;: &quot;5*&quot;}hive = Nektar(username, wifs=wifs)# Hive Developer Portal &gt; Understanding Configuration Values# https://developers.hive.io/tutorials-recipes/understanding-configuration-values.htmldata = hive.get_config()print(json.dumps(data, indent=2))# get configuration valuesdata = hive.get_config(field=&quot;HIVE_CHAIN_ID&quot;, fallback=&quot;bee*&quot;)print(&quot;HIVE_CHAIN_ID: &quot; + str(data))# get user's resource creditsprin(hive.resource_credits())print(hive.resource_credits(&quot;valid-username&quot;))# get user's manabarpercentage = hive.manabar()print(&quot;Current Mana: &quot; + str(int(percentage)) + &quot;%&quot;)# transfer HBD to another accountreceiver = &quot;valid-username&quot;amount = 0.001asset = &quot;HBD&quot;message = &quot;Thanks for supporting us!&quot;hive.memo(receiver, amount, asset, message)# transfer HIVE to another accountreceiver = &quot;valid-username&quot;amount = 0.001asset = &quot;HIVE&quot;message = &quot;Thanks for supporting us!&quot;result = hive.memo(receiver, amount, asset, message)# transfer HBD to savingsreceiver = &quot;valid-username&quot;amount = 0.001asset = &quot;HBD&quot;message = &quot;Thanks for supporting us!&quot;hive.transfer_to_savings(receiver, amount, asset, message)# transfer HIVE to savingsreceiver = &quot;valid-username&quot;amount = 0.001asset = &quot;HIVE&quot;message = &quot;Thanks for supporting us!&quot;hive.transfer_to_savings(receiver, amount, asset, message)# transfer HIVE to vesting (power up)receiver = &quot;valid-username&quot;amount = 0.001hive.transfer_to_vesting(receiver, amount)# Broadcasting a custom JSON (Posting key)hive.custom_json(    id_=&quot;nektar-tests&quot;,    jdata={ &quot;test&quot;: &quot;nektar&quot; },    required_posting_auths=[&quot;valid-username&quot;]# Broadcasting a custom JSON (Active key)hive.custom_json(    id_=&quot;nektar-tests&quot;,    jdata={ &quot;test&quot;: &quot;nektar&quot; },    required_auths=[&quot;valid-username&quot;]```**Import Module**```pythonfrom nektar import Nektarimport jsonwifs = { &quot;active&quot;: &quot;5*&quot; , &quot;posting&quot;: &quot;5*&quot;}hive = Nektar(username, wifs=wifs)```## Waggle Class Methods for blogging and engagement**Import Module**```pythonfrom nektar import Waggleimport json```**Basic Setup**```pythonfrom nektar import Wagglehive = Waggle(username)```**Setup Application**```pythonusername = &quot;hive-nektar&quot;app_name = &quot;nektar.app&quot;version = &quot;2022.10.05&quot;hive = Waggle(username, app=app_name, version=version)```**Setup Application with WIF/s** ***WARNING:*** Store WIFs securely in a separate file!```python## option 1wif = &quot;5*&quot;role=&quot;posting&quot;username = &quot;hive-nektar&quot;hive = Waggle(username, wif=wif, role=role)## option 2username = &quot;hive-nektar&quot;wifs = { &quot;active&quot;: &quot;5*&quot; }hive = Waggle(username, wifs=wifs)```**Initialize with Custom Parmeters**```pythoncustom_nodes = [&quot;testnet.openhive.network&quot;]CHAIN_ID_TESTNET = &quot;18dcf0a285365fc58b71f18b3d3fec954aa0c141c44e4e5cb4cf777b9eab274e&quot;hive = Waggle(&quot;valid-username&quot;, wifs=wifs, nodes=custom_nodes, chain_id=CHAIN_ID_TESTNET, timeout=25, retries=1, warning=True)```**Get account details**```pythonmetadata = json.loads(hive.account[&quot;posting_json_metadata&quot;])name = metadata[&quot;profile&quot;][&quot;name&quot;]```**Get Blockchain Constants** ```python# Hive Developer Portal &gt; Understanding Configuration Values# https://developers.hive.io/tutorials-recipes/understanding-configuration-values.htmldata = hive.get_config()print(json.dumps(data, indent=4))    data = hive.get_config(field=&quot;HIVE_CHAIN_ID&quot;, fallback=&quot;bee*&quot;)print(&quot;HIVE_CHAIN_ID: &quot; + str(data))```**Browse Communities** ```python## get up to 200 communities by rankcommunities = hive.communities(limit=200)for community in communities:    print(community[&quot;name&quot;] + &quot;\t&quot; + community[&quot;title&quot;])communities = {}sorting = [&quot;new&quot;, &quot;rank&quot;, &quot;subs&quot;]for sort in sorting:    ## get up to 1000 communities per sorting filter    for community in hive.communities(sort=sort):        communities.update({community[&quot;name&quot;]: community})```**Get Posts with tag** Get posts in a community by sorting filter: - `created` - `trending` - `hot` - `promoted` - `payout` - `payout_comments` - `muted````pythontag = &quot;travel&quot;posts = hive.posts(tag, limit=100, sort=&quot;created&quot;)print(posts[0][&quot;author&quot;])print(posts[0][&quot;permlink&quot;])print(posts[0][&quot;title&quot;])```**Get Posts in a Community** Get posts in a community by sorting filter: - `created` - `trending` - `hot` - `promoted` - `payout` - `payout_comments` - `muted````pythoncommunity = &quot;hive-1*&quot;  # supply with a valid community nameposts = hive.posts(community, limit=100, sort=&quot;created&quot;)print(posts[0][&quot;author&quot;])print(posts[0][&quot;permlink&quot;])print(posts[0][&quot;title&quot;])```**Get Posts with a Tag** Get posts in a community by sorting filter: - `created` - `trending` - `hot` - `promoted` - `payout` - `payout_comments` - `muted`.```pythontag = &quot;nature&quot;posts = hive.posts(tag, limit=10, sort=&quot;created&quot;)for post in posts:    print(post[&quot;title&quot;])```**Get Community Sunscribers** ```pythonsubscribers = {}community = &quot;hive-1*&quot;  # supply with a valid community namefor subscriber in hive.subscribers(community, limit=1000):    subscribers.update({subscriber[0]: subscriber})    print(subscriber[0])```**Search Accounts Starting with a *pattern*** ```pythonaccounts = hive.accounts(start=&quot;h&quot;, limit=1000)```**Get Account `raw` Current Resource Credits** ```python## resource credit of the initialized accountdata = hive.resource_credits()print(json.dumps(data, indent=4))## specify another accountdata = hive.resource_credits(&quot;valid-account&quot;)print(json.dumps(data, indent=4))```**Get Account Manabar Percentage** ```python## manabar of the initialized accountpercentage = hive.manabar()print(&quot;Current Mana: &quot; + str(int(percentage)) + &quot;%&quot;)## specify another accountpercentage = hive.manabar(&quot;valid-account&quot;)print(&quot;Current Mana: &quot; + str(int(percentage)) + &quot;%&quot;)```**Get Account Reputation** ```python## reputation of the initialized accountreputation = hive.reputation(score=False)print(&quot;Reputation: &quot; + str(reputation))## reputation of the initialized account, converted to scorescore = hive.reputation()print(&quot;Reputation score: &quot; + str(score))## specify another account, converted to scorescore = hive.reputation(account=&quot;valid-username&quot;)print(&quot;Reputation score: &quot; + str(score))```**Get the List of Followers** ```python## followers of the initialized accountfollowers = hive.followers()print(followers)## or using a valid account usernamefollowers = hive.followers(account=&quot;valid-username&quot;)print(followers)```**Get the Following of an Account** ```python## followers of the initialized accountfollowing = hive.following()print(&quot;\n&quot;.join(following))## or using a valid account usernamefollowing = hive.following(account=&quot;valid-username&quot;)print(&quot;\n&quot;.join(following))```**Follow or Unfollow an Account**```pythonaccount = &quot;valid-username&quot;hive.follow(account)# options to unfollowhive.follow(account, unfollow=True)hive.unfollow(account)```**Get List of Account History** ```python    # up to 1000 operations, most recent firsttransactions = hive.history()print(&quot;Transactions:&quot;, json.dumps(transactions[1], indent=4))# up to 1000 upvote operations of another acounttransactions = hive.history(account=&quot;oniemaniego&quot;, start=1000, low=0)print(&quot;Transactions:&quot;, json.dumps(transactions[1], indent=4))    # up to 100 operations of another acounttransactions = hive.history(account=&quot;oniemaniego&quot;, start=1000, limit=100)for transaction in transactions[:1]:    print(transaction[0], transaction[1][&quot;op&quot;])```**Get the List of Delegators** ```python## followers of the initialized accountdelegators = hive.delegators()for delegator, data in delegators.items():    print(delegator)    for dt, vests in data.items():        print(dt, vests)## or using a valid account usernamedelegators = hive.delegators(&quot;valid-username&quot;)for delegator, data in delegators.items():    print(delegator)    for dt, vests in data.items():        print(dt, vests)## only show active delegationsdelegators = hive.delegators(active=True)for delegator, vests in delegators.items():    print(delegator, vests)```**Get the List of Delegatees** ```python## followers of the initialized accountdelegatees = hive.delegatees()for delegatee, data in delegatees.items():    print(delegatee)    for dt, vests in data.items():        print(dt, vests)## or using a valid account usernamedelegatees = hive.delegatees(&quot;valid-username&quot;)for delegatee, data in delegatees.items():    print(delegatee)    for dt, vests in data.items():        print(dt, vests)## only show active delegationsdelegatees = hive.delegatees(active=True)for delegatee, vests in delegatees.items():    print(delegatee, vests)```**Get Blog Posts** Get posts of an account by sorting filter: - `blog` - `feed` - `post` - `replies` - `payout````python## blog posts of the initialized accountblogs = hive.blogs(limit=10)for blog in blogs:    for key, value in blog.items():        print(key + &quot;:&quot;, value)        ## customized blog search from another accountblogs = hive.blogs(account=&quot;valid-username&quot;, sort=&quot;blog&quot;)for blog in blogs:    for key, value in blog.items():        print(key + &quot;:&quot;, value)```**Get Outward Comments** Get comments made by an account/```pythoncomments = hive.comments(limit=20)for comment in comments:    print(comment[&quot;body&quot;])## comments of another accountcomments = hive.comments(username=&quot;valid-username&quot;, limit=100)for comment in comments:    print(json.dumps(comment, indent=2))```**Access a Blog Post/Comment (Bridge API)** If the post or comment does not exists in the blockchain, it will return an empty dictionary.```pythonauthor = &quot;valid-username&quot;permlink = &quot;valid-permlink&quot;content = hive.get_post(author, permlink)print(json.dumps(content, indent=4))    author = &quot;valid-username&quot;permlink = &quot;test-permlink-abc-123-def-456&quot;content = hive.get_post(author, permlink, retries=5)if not content:    print(&quot;The post is not yet in the blockchain.&quot;)print(json.dumps(content, indent=2))```**Access a Blog Post/Comment (Condenser API)** If the post or comment does not exists in the blockchain, it will return an empty dictionary.```pythonauthor = &quot;valid-username&quot;permlink = &quot;valid-permlink&quot;content = hive.get_post(author, permlink)print(json.dumps(content, indent=4))    author = &quot;valid-username&quot;permlink = &quot;test-permlink-abc-123-def-456&quot;content = hive.get_content(author, permlink, retries=2)if not content:    print(&quot;The post is not yet in the blockchain.&quot;)print(json.dumps(content, indent=2))```**Create a Post Programmatically** ***WARNING:*** Do NOT abuse Hive, post only quality contents not more than once a day.```python    title = &quot;Make Your Title Catchy, But Not ClickBait-y&quot;body =  &quot;# This is a header\n\n&quot; \        &quot;## Adding a `h2` Header&quot; \        &quot;![Image Caption](https://image.link.goes/here)\n\n&quot; \        &quot;&lt;center&gt;How to center a text?&lt;/center&gt;\n\n&quot; \        &quot;This is how to make it *itzlic*, **bold**, or ***both***!\n\n&quot; \        &quot;Drink more H&lt;sub&gt;2&lt;/sub&gt;O&lt;sup&gt;[citatation needed]&lt;/sup&gt; everyday.\n\n&quot; \        &quot;&lt;br&gt; this is a line break, below is a horizontal rule:\n\n&quot; \        &quot;---&quot; \        &quot;Click this [link](https://www.markdownguide.org/) to learn more about Markdowwn.\n\n&quot;description = &quot;My first blog using Nektar!&quot;tags = &quot;devtalk nektar hive api coderundebug&quot;community = &quot;hive-1*&quot;  # use a valid community namehive.new_post(title, body, description, tags, community)```**Reblog a Post**```pythonauthor = &quot;valid-username&quot;permlink = &quot;valid-permlink&quot;hive.reblog(author, permlink)```**Reply to a Post** ***WARNING:*** Do NOT abuse Hive, do not create spam comments.```pythonauthor = &quot;valid-username&quot;permlink = &quot;valid-permlink&quot;body = &quot;Allows markdown formatted text.&quot;hive.reply(author, permlink, body)```**Get all replies on a blog post.** ```pythonauthor = &quot;&quot;permlink = &quot;&quot;replies = hive.replies(author, permlink)print(json.dumps(replies, indent=2))```**Get all accounts who reblogged the blog post.** ```pythonauthor = &quot;&quot;permlink = &quot;&quot;accounts = hive.reblogs(author, permlink)print(&quot;Reblogged by: &quot; + &quot;, &quot;.join(accounts))```**Vote on A Post** ```pythonauthor = &quot;&quot;permlink = &quot;&quot;weight = 10000  # -10000 to 10000, where 1000 = 100%hive.vote(author, permlink, weight)```**Get active votes on a blog post.** ```pythonauthor = &quot;&quot;permlink = &quot;&quot;votes = hive.votes(author, permlink)print(json.dumps(votes, indent=2))```**Send a Memo** ```pythonreceiver = &quot;valid-username&quot;amount = 0.001asset = &quot;HBD&quot;message = &quot;Sending you some HBDs...&quot;hive.memo(receiver, amount, asset, message)```**Create a Custom JSON (Active Key)** ```pythonprotocol_id = &quot;nektar_admin&quot;json_data = { &quot;app&quot;: &quot;nektar.app/2022.10.05&quot; }required_auths = [&quot;valid-username&quot;]required_posting_auths = []hive.custom_json(protocol_id, json_data, required_auths, required_posting_auths)```**Check if Transaction has the Neccessary Auths** Will only check if the necessary WIF has signed the transaction, will not broadcast it.This is also available in `post`, `reply`, `vote`, and `memo` methods.```pythonprotocol_id = &quot;nektar_admin&quot;json_data = { &quot;app&quot;: &quot;nektar.app/2022.10.05&quot; }required_auths = [&quot;valid-username&quot;]required_posting_auths = []hive.custom_json(protocol_id, json_data, required_auths, required_posting_auths, verify_only=True)```**Check if a Custom Transaction has the Necessary Signatures** Will only check if the necessary WIF has signed the transaction, will not broadcast it.This is also available in `post`, `reply`, `vote`, and `memo` methods.```pythonsigned_transaction = [ { &quot;ref_block_num&quot;: 0, &quot;ref_block_prefix&quot;: 0, &quot;expiration&quot;: &quot;1970-01-01T00:00:00&quot;, &quot;operations&quot;: [], &quot;extensions&quot;: [], &quot;signatures&quot;: [] }]verified = hive.verify_authority(signed_transaction)print(&quot;OK:&quot;, verified)```**Power Up** ```pythonhive.power_up(&quot;valid-username&quot;, 100)```## Swarm Class Community Management methods```pythonfrom nektar import Swarm## Initialize Swarm classhive = Swarm(&quot;hive-*&quot;, &quot;valid-username&quot;, wif=&quot;5*&quot;, role=&quot;posting&quot;)## Initialize Swarm class with dictionary of WIFshive = Swarm(&quot;hive-*&quot;, &quot;valid-username&quot;, wifs=wifs)## Initialize Swarm class with app and version&quot;)hive = Swarm(&quot;hive-*&quot;, &quot;valid-username&quot;, app=&quot;nektar.app&quot;, version=&quot;2022.10.05&quot;)## Initialize Swarm class with custom parameters&quot;)hive = Swarm(&quot;hive-*&quot;, &quot;valid-username&quot;, wifs=wifs, timeout=25, retries=1, warning=True)## Mute a posthive.mute(&quot;valid-username&quot;, &quot;valid-permlink&quot;, &quot;Offtopic&quot;)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Unmute a post - option 1hive.mute(&quot;valid-username&quot;, &quot;valid-permlink&quot;, &quot;Offtopic&quot;, mute=False)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Unmute a post - option 2hive.unmute(&quot;valid-username&quot;, &quot;valid-permlink&quot;, &quot;On topic, apologies&quot;)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Mark post as spamhive.mark_spam(&quot;valid-username&quot;, &quot;valid-permlink&quot;)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Update community propertiestitle = &quot;Community Name&quot;about = &quot;About information&quot;is_nsfw = Falsedescription = &quot;This is a description&quot;flag_text = &quot;...&quot;hive.update(title, about, is_nsfw, description, flag_text)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Subscribe to a communityhive.subscribe()print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Unsubscribe to a community - option 1hive.subscribe(subscribe=False)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Unsubscribe to a community - option 2hive.unsubscribe()print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Pin a posthive.pin(&quot;valid-username&quot;, &quot;valid-permlink&quot;)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Unpin a post - option 1hive.pin(&quot;valid-username&quot;, &quot;valid-permlink&quot;, pin=False)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Unpin a post - option 2hive.unpin(&quot;valid-username&quot;, &quot;valid-permlink&quot;)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))## Flag a posthive.flag(&quot;valid-username&quot;, &quot;valid-permlink&quot;, &quot;flagging post for reason...&quot;)print(&quot;Transaction: &quot; + json.dumps(hive.appbase.signed_transaction, indent=2))```## AppBase Module**Basic Usage**```pythonfrom appbase import AppBaseCHAIN_ID_MAINNET = &quot;beeab0de00000000000000000000000000000000000000000000000000000000&quot;CHAIN_ID_TESTNET = &quot;18dcf0a285365fc58b71f18b3d3fec954aa0c141c44e4e5cb4cf777b9eab274e&quot;## Initialize AppBase Classhive = AppBase()## Initialize AppBase Class with custom parameterscustom_nodes = [&quot;testnet.openhive.network&quot;]hive = AppBase(nodes=custom_nodes, chain_id=CHAIN_ID_TESTNET, timeout=5, retries=1, warning=True)## Change to custom nodeshive.custom_nodes(custom_nodes)## Add new WIF and equivalent rolehive.append_wif(wif=&quot;5*&quot;, role=&quot;posting&quot;)hive.append_wif(wif=&quot;5*&quot;, role=&quot;active&quot;)## Add new dictionary of roles and their equivalent WIFswifs = {&quot;posting&quot;: &quot;5*&quot;, &quot;active&quot;: &quot;5*&quot;}hive.append_wif(wifs)## Change retries to custom valuehive.set_timeout(15)## Read the actual Hive API documentation for proper guidance## https://developers.hive.io/apidefinitions/## Access API and its methods - generichive.api(&quot;condenser&quot;)hive.api(&quot;condenser_api&quot;)## `account_by_key_api.get_key_references`# version = hive.api(&quot;account_by_key_api&quot;).*params = {&quot;keys&quot;: &quot;STM*&quot;]}data = hive.account_by_key().get_key_references(params)print(&quot;Account by public key: &quot; + json.dumps(data, indent=2))## `bridge.get_profile`# version = hive.api(&quot;bridge&quot;).*params = {&quot;account&quot;: &quot;valid-username1&quot;, &quot;observer&quot;: &quot;valid-username2&quot;}data = hive.bridge().get_profile(params)print(&quot;Profile: &quot; + json.dumps(data, indent=2))## `account_history_api.get_account_history`# version = hive.api(&quot;account_history&quot;).*params = {    &quot;account&quot;: &quot;valid-username&quot;,    &quot;start&quot;: 1000,    &quot;limit&quot;: 1000,    &quot;include_reversible&quot;: True,    &quot;operation_filter_low&quot;: 0,    &quot;operation_filter_high&quot;: 1,}data = hive.account_history().get_account_history(params)print(&quot;Account history: &quot; + json.dumps(data, indent=2))## `block_api.get_block`params = {&quot;block_num&quot;: 8675309}data = hive.block().get_block(params)print(&quot;Block: &quot; + json.dumps(data, indent=2))## Create an instance for specific API only.condenser = hive.condenser()params = &quot;valid-username&quot;, &quot;valid-permlink&quot;]data = condenser.get_content(params)print(&quot;Content #1: &quot; + json.dumps(data, indent=2))params = &quot;valid-username&quot;, 0, 10]data = condenser.get_blog(params)print(&quot;Content #2: &quot; + json.dumps(data, indent=2))## Using the `request` methodmethod = &quot;rc_api.find_rc_accounts&quot;params = {&quot;accounts&quot;: &quot;valid-username&quot;]}data = hive.request(method, params, strict=False)print(&quot;Accounts: &quot; + json.dumps(data, indent=2))## Using the `broadcast` method - `condenser_api`method = &quot;condenser_api.get_transaction_hex&quot;transaction = {    &quot;ref_block_num&quot;: 123456,    &quot;ref_block_prefix&quot;: 1234567890,    &quot;expiration&quot;: &quot;2022-10-05T18:00:00&quot;,    &quot;operations&quot;: [        [            &quot;vote&quot;,            {                &quot;voter&quot;: &quot;valid-username1&quot;,                &quot;author&quot;: &quot;valid-username2&quot;,                &quot;permlink&quot;: &quot;valid-permlink&quot;,                &quot;weight&quot;: 10000,            },        ]    ],    &quot;extensions&quot;: [],}data = hive.broadcast(method, transaction, strict=False)print(&quot;Transaction hex: &quot; + data)```</longdescription>
</pkgmetadata>