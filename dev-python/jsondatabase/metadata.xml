<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A flat file database for json objects.Home-page: https://github.com/gunthercox/jsondbAuthor: Gunther CoxAuthor-email: gunthercx@gmail.comLicense: BSDDescription: # jsondb                [![Build Status][travis-image]][travis-build]        [![PyPI version](https://badge.fury.io/py/jsondatabase.svg)](https://badge.fury.io/py/jsondatabase)                This is a utility for managing content in a database which stores        content in JSON format.                ## Installation                This package can be installed from [PyPi](https://pypi.python.org/pypi/jsondatabase) by running:                ```bash        pip install jsondatabase        ```                Note, the package name and the import name are different.        Import the package using `import jsondb`.                ## Usage                ```python        from jsondb.db import Database        db = Database(&quot;mydata.db&quot;)        ```                The database has an attribute which works similar to        [jQuery's `data`][jquery-data] attribute.                ```python        # Getting all data        db = Database(&quot;mydata.db&quot;)        print(db.data())        ```                ```python        # Getting a stored value        db = Database(&quot;mydata.db&quot;)        print(db.data(key=&quot;user_count&quot;))        ```                **It is important to note that a key will be created regardless of whether it        exists as long as a value is provided.** The database has the same functionality        as a dictionary.                ```python        # Setting a value        db = Database(&quot;mydata.db&quot;)        db.data(key=&quot;user_count&quot;, value=241)        ```                ```python        # Passing in a dictionary value        db = Database(&quot;mydata.db&quot;)        data = {            &quot;user_id&quot;: 234565,            &quot;user_name&quot;: &quot;AwesomeUserName&quot;,            &quot;is_moderator&quot;: True,        }        db.data(dictionary=data)        ```                ```python        # Deleting a value        db = Database(&quot;mydata.db&quot;)        db.delete(&quot;my_key&quot;)        ```                The database also supports a dictionary-like syntax for retrieving, setting, and        removing values.                ```python        db = Database(&quot;mydata.db&quot;)                # Retrieving a value        value = db[&quot;key&quot;]                # Setting a value        db[&quot;key&quot;] = value                # Removing a key        del db[&quot;key&quot;]                # Checking if a key exists        &quot;key&quot; in db        ```                ## Performance        If performance is an issue with large databases then the `python-cjson` module        can be installed. jsondb will automatically detect this and use cjson instead.                [jquery-data]: http://api.jquery.com/data/        [travis-build]: https://travis-ci.org/gunthercox/jsondb        [travis-image]: https://travis-ci.org/gunthercox/jsondb.svg                                        History        -------                `See release notes         &lt;https://github.com/gunthercox/jsondb/releases&gt;`_        Keywords: jsondbPlatform: UNKNOWNClassifier: Development Status :: 2 - Pre-AlphaClassifier: Intended Audience :: DevelopersClassifier: License :: OSI Approved :: BSD LicenseClassifier: Natural Language :: EnglishClassifier: Programming Language :: Python :: 2Classifier: Programming Language :: Python :: 2.6Classifier: Programming Language :: Python :: 2.7Classifier: Programming Language :: Python :: 3Classifier: Programming Language :: Python :: 3.3Classifier: Programming Language :: Python :: 3.4</longdescription>
</pkgmetadata>