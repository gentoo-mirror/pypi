<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python SSDPPython asyncio library for Simple Service Discovery Protocol (SSDP).SSDP is a UPnP substandard. For more information see:https://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol## Setup```bashpython3 -m pip install ssdp # lightweight, without any dependencies# orpython3 -m pip install ssdp[cli] # with cli support for testing and debugging```## Usage### CLI```console-interactive$ ssdp --helpUsage: ssdp [OPTIONS] COMMAND [ARGS]...  SSDP command line interface.Options:  -v, --verbose  Increase verbosity.  --help         Show this message and exit.Commands:  discover  Send out an M-SEARCH request and listening for responses.```#### DiscoverDiscover devices on the network and print the responses.```consolessdp discover --helpUsage: ssdp discover [OPTIONS]  Send out an M-SEARCH request and listening for responses.Options:  -b, --bind TEXT             Specify alternate bind address [default: all                              interfaces]  --search-target, --st TEXT  Search target [default: ssdp:all]  --max-wait, --mx INTEGER    Maximum wait time in seconds [default: 5]  --help                      Show this message and exit.```Example:```console$ ssdp discover[::]:1900 - - [Sun Jun 11 12:07:09 2023] M-SEARCH * HTTP/1.1HOST: 239.255.255.250:1900MAN: &quot;ssdp:discover&quot;MX: 5ST: ssdp:all[::ffff:192.168.178.1]:1900 - - [Sun Jun 11 12:07:09 2023] HTTP/1.1 200 OKCache-Control: max-age=1800Location: http://192.168.178.1:49000/MediaServerDevDesc.xmlServer: FRITZ!Box 7590 UPnP/1.0 AVM FRITZ!Box 7590 154.07.50Ext:ST: upnp:rootdeviceUSN: uuid:fa095ecc-e13e-40e7-8e6c-3ca62f98471f::upnp:rootdevice```### Python API#### MessagesThe SSDP library provides two classes for SSDP messages: `SSDPRequest` and`SSDPResponse`. Both classes are subclasses of `SSDPMessage` and providethe following methods:- `parse`: Parse a SSDP message from a string.- `__bytes__`: Convert the SSDP message to a bytes object.- `__str__`: Convert the SSDP message to a string.You can parse a SSDP message from a string with the `parse` method.It will return a `SSDPRequest` or `SSDPResponse` object dependingon the message type.```pycon&gt;&gt;&gt; import ssdp.messages&gt;&gt;&gt; ssdp.messages.SSDPRequest.parse('NOTIFY * HTTP/1.1\r\n\r\n')&lt;ssdp.messages.SSDPRequest object at 0x7f8b1c0b6a90&gt;&gt;&gt;&gt; ssdp.messages.SSDPResponse.parse('HTTP/1.1 200 OK\r\n\r\n')&lt;ssdp.messages.SSDPResponse object at 0x7f8b1c0b6a90&gt;```##### SSDPRequest```pycon&gt;&gt;&gt; from ssdp.messages import SSDPRequest&gt;&gt;&gt; SSDPRequest('NOTIFY', headers={...     'HOST': '10.0.0.42',...     'NT': 'upnp:rootdevice',...     'NTS': 'ssdp:alive',... })&lt;ssdp.messages.SSDPRequest object at 0x7f8b1c0b6a90&gt;```The `SSDPRequest` class provides the a `sendto` method to send the requestover a open transport.```pycon&gt;&gt;&gt; from ssdp import network, messages&gt;&gt;&gt; notify = messages.SSDPRequest('NOTIFY')&gt;&gt;&gt; notify.sendto(transport, (network.MULTICAST_ADDRESS_IPV4, network.PORT))```##### SSDPResponse```pycon&gt;&gt;&gt; from ssdp.messages import SSDPResponse&gt;&gt;&gt; SSDPResponse(200, 'OK', headers={...     'CACHE-CONTROL': 'max-age=1800',...     'LOCATION': 'http://10.0.0.1:80/description.xml',...     'SERVER': 'Linux/2.6.18 UPnP/1.0 quick_ssdp/1.0',...     'ST': 'upnp:rootdevice',... })&lt;ssdp.messages.SSDPResponse object at 0x7f8b1c0b6a90&gt;```#### Asyncio SSD Protocol datagram endpointThe `aio.SimpleServiceDiscoveryProtocol` class is a subclass of`asyncio.DatagramProtocol` and provides the following additional methods:- `response_received`: Called when a SSDP response was received.- `request_received`: Called when a SSDP request was received.The protocol can be used to react to SSDP messages in an asyncio event loop.This example sends a SSDP NOTIFY message and prints all received SSDP messages:```python#!/usr/bin/env python3import asyncioimport socketfrom ssdp import aio, messages, networkclass MyProtocol(aio.SimpleServiceDiscoveryProtocol):  def response_received(self, response, addr):    print(response, addr)  def request_received(self, request, addr):    print(request, addr)loop = asyncio.get_event_loop()connect = loop.create_datagram_endpoint(MyProtocol, family=socket.AF_INET)transport, protocol = loop.run_until_complete(connect)notify = messages.SSDPRequest('NOTIFY')notify.sendto(transport, (network.MULTICAST_ADDRESS_IPV4, network.PORT))try:  loop.run_forever()except KeyboardInterrupt:  passtransport.close()loop.close()```## SSDP lexer plugin for [Pygments][pygments]The SSDP library comes with a lexer plugin for [Pygments][pygments]to highlight SSDP messages. It's based on a HTTP lexer and adds SSDPspecific keywords.You can install the plugin with the following command:```bashpip install ssdp[pymgments]  # included in ssdp[cli]```You can either get the lexer by name:```pycon&gt;&gt;&gt; from pygments.lexers import get_lexer_by_name&gt;&gt;&gt; get_lexer_by_name('ssdp')&lt;pygments.lexers.SSDPLexer&gt;```Highlighting a SSDP message, could look like this:```python#/usr/bin/env python3from pygments import highlightfrom pygments.lexers import get_lexer_by_namefrom pygments.formatters import TerminalFormatterif __name__ == '__main__':    lexer = get_lexer_by_name('ssdp')    formatter = TerminalFormatter()    code = 'NOTIFY * HTTP/1.1\r\nHOST: localhost:1900'    msg = highlight(code, lexer, formatter)    print(msg)```[pygments]: https://pygments.org/</longdescription>
</pkgmetadata>