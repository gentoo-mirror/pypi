<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Chaos Toolkit Extension for Azure[![Build](https://github.com/chaostoolkit-incubator/chaostoolkit-azure/actions/workflows/build.yaml/badge.svg)](https://github.com/chaostoolkit-incubator/chaostoolkit-azure/actions/workflows/build.yaml)[![Python versions](https://img.shields.io/pypi/pyversions/chaostoolkit-azure.svg)](https://www.python.org/)This project is a collection of [actions][] and [probes][], gathered as anextension to the [Chaos Toolkit][chaostoolkit]. It targets the[Microsoft Azure][azure] platform.[actions]: http://chaostoolkit.org/reference/api/experiment/#action[probes]: http://chaostoolkit.org/reference/api/experiment/#probe[chaostoolkit]: http://chaostoolkit.org[azure]: https://azure.microsoft.com/en-us/## InstallThis package requires Python 3.5+To be used from your experiment, this package must be installed in the Pythonenvironment where [chaostoolkit][] already lives.```$ pip install -U chaostoolkit-azure```## UsageTo use the probes and actions from this package, add the following to yourexperiment file:```json{  &quot;type&quot;: &quot;action&quot;,  &quot;name&quot;: &quot;start-service-factory-chaos&quot;,  &quot;provider&quot;: {    &quot;type&quot;: &quot;python&quot;,    &quot;module&quot;: &quot;chaosazure.vm.actions&quot;,    &quot;func&quot;: &quot;stop_machines&quot;,    &quot;secrets&quot;: [&quot;azure&quot;],    &quot;arguments&quot;: {      &quot;parameters&quot;: {        &quot;TimeToRunInSeconds&quot;: 45      }    }  }}```That's it!Please explore the code to see existing probes and actions.## ConfigurationThis extension uses the [Azure SDK][sdk] libraries under the hood. The Azure SDK library expects that you have a tenant and client identifier, as well as a client secret and subscription, that allows you to authenticate with the Azure resource management API.Configuration values for the Chaos Toolkit Extension for Azure can come from several sources:- Experiment file- Azure credential fileThe extension will first try to load the configuration from the `experiment file`. If configuration is not provided in the `experiment file`, it will try to load it from the `Azure credential file`.[creds]: https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-connect-to-secure-cluster[requests]: http://docs.python-requests.org/en/master/[sdk]: https://github.com/Azure/azure-sdk-for-python### Credentials- Secrets in the Experiment file  ```json  {    &quot;secrets&quot;: {      &quot;azure&quot;: {        &quot;client_id&quot;: &quot;your-super-secret-client-id&quot;,        &quot;client_secret&quot;: &quot;your-even-more-super-secret-client-secret&quot;,        &quot;tenant_id&quot;: &quot;your-tenant-id&quot;      }    }  }  ```  You can retrieve secretes as well from [environment][env_secrets] or [HashiCorp vault][vault_secrets].     If you are not working with Public Global Azure, e.g. China Cloud You can set the cloud environment.  ```json  {    &quot;client_id&quot;: &quot;your-super-secret-client-id&quot;,    &quot;client_secret&quot;: &quot;your-even-more-super-secret-client-secret&quot;,    &quot;tenant_id&quot;: &quot;your-tenant-id&quot;,    &quot;azure_cloud&quot;: &quot;AZURE_CHINA_CLOUD&quot;  }  ```  Available cloud names:  - AZURE_CHINA_CLOUD  - AZURE_GERMAN_CLOUD  - AZURE_PUBLIC_CLOUD  - AZURE_US_GOV_CLOUD  [vault_secrets]: https://docs.chaostoolkit.org/reference/api/experiment/#vault-secrets  [env_secrets]: https://docs.chaostoolkit.org/reference/api/experiment/#environment-secrets- Secrets in the Azure credential file  You can retrieve a credentials file with your subscription ID already in place by signing in to Azure using the az login command followed by the az ad sp create-for-rbac command  ```bash  az login  az ad sp create-for-rbac --sdk-auth &gt; credentials.json  ```  credentials.json:  ```json  {    &quot;subscriptionId&quot;: &quot;&lt;azure_aubscription_id&gt;&quot;,    &quot;tenantId&quot;: &quot;&lt;tenant_id&gt;&quot;,    &quot;clientId&quot;: &quot;&lt;application_id&gt;&quot;,    &quot;clientSecret&quot;: &quot;&lt;application_secret&gt;&quot;,    &quot;activeDirectoryEndpointUrl&quot;: &quot;https://login.microsoftonline.com&quot;,    &quot;resourceManagerEndpointUrl&quot;: &quot;https://management.azure.com/&quot;,    &quot;activeDirectoryGraphResourceId&quot;: &quot;https://graph.windows.net/&quot;,    &quot;sqlManagementEndpointUrl&quot;: &quot;https://management.core.windows.net:8443/&quot;,    &quot;galleryEndpointUrl&quot;: &quot;https://gallery.azure.com/&quot;,    &quot;managementEndpointUrl&quot;: &quot;https://management.core.windows.net/&quot;  }  ```  Store the path to the file in an environment variable called **AZURE_AUTH_LOCATION** and make sure that your experiment does **NOT** contain `secrets` section. ### SubscriptionAdditionally you need to provide the Azure subscription id.- Subscription id in the experiment file  ```json  {    &quot;configuration&quot;: {      &quot;azure_subscription_id&quot;: &quot;your-azure-subscription-id&quot;    }  }  ```  Configuration may be as well retrieved from an [environment][env_configuration].  An old, but deprecated way of doing it was as follows, this still works  but should not be favoured over the previous approaches as it's not the  Chaos Toolkit way to pass structured configurations.  ```json  {    &quot;configuration&quot;: {      &quot;azure&quot;: {        &quot;subscription_id&quot;: &quot;your-azure-subscription-id&quot;      }    }  }  ```  [env_configuration]: https://docs.chaostoolkit.org/reference/api/experiment/#environment-configurations- Subscription id in the Azure credential file  Credential file described in the previous &quot;Credential&quot; section contains as well subscription id. If **AZURE_AUTH_LOCATION** is set and subscription id is **NOT** set in the experiment definition, extension will try to load it from the credential file.  ### Putting it all togetherHere is a full example for an experiment containing secrets and configuration: ```json{  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;title&quot;: &quot;...&quot;,  &quot;description&quot;: &quot;...&quot;,  &quot;tags&quot;: [&quot;azure&quot;, &quot;kubernetes&quot;, &quot;aks&quot;, &quot;node&quot;],  &quot;configuration&quot;: {    &quot;azure_subscription_id&quot;: &quot;xxx&quot;  },  &quot;secrets&quot;: {    &quot;azure&quot;: {      &quot;client_id&quot;: &quot;xxx&quot;,      &quot;client_secret&quot;: &quot;xxx&quot;,      &quot;tenant_id&quot;: &quot;xxx&quot;    }  },  &quot;steady-state-hypothesis&quot;: {    &quot;title&quot;: &quot;Services are all available and healthy&quot;,    &quot;probes&quot;: [      {        &quot;type&quot;: &quot;probe&quot;,        &quot;name&quot;: &quot;consumer-service-must-still-respond&quot;,        &quot;tolerance&quot;: 200,        &quot;provider&quot;: {          &quot;type&quot;: &quot;http&quot;,          &quot;url&quot;: &quot;https://some-url/&quot;        }      }    ]  },  &quot;method&quot;: [    {      &quot;type&quot;: &quot;action&quot;,      &quot;name&quot;: &quot;restart-node-at-random&quot;,      &quot;provider&quot;: {        &quot;type&quot;: &quot;python&quot;,        &quot;module&quot;: &quot;chaosazure.machine.actions&quot;,        &quot;func&quot;: &quot;restart_machines&quot;,        &quot;secrets&quot;: [&quot;azure&quot;],        &quot;config&quot;: [&quot;azure_subscription_id&quot;]      }    }  ],  &quot;rollbacks&quot;: []}```## ContributeIf you wish to contribute more functions to this package, you are more thanwelcome to do so. Please, fork this project, make your changes following theusual [PEP 8][pep8] code style, sprinkling with tests and submit a PR forreview.[pep8]: https://pycodestyle.readthedocs.io/en/latest/The Chaos Toolkit projects require all contributors must sign a[Developer Certificate of Origin][dco] on each commit they would like to mergeinto the master branch of the repository. Please, make sure you can abide bythe rules of the DCO before submitting a PR.[dco]: https://github.com/probot/dco#how-it-works### DevelopIf you wish to develop on this project, make sure to install the developmentdependencies. But first, [create a virtual environment][venv] and then installthose dependencies.[venv]: http://chaostoolkit.org/reference/usage/install/#create-a-virtual-environment```console$ pip install -r requirements-dev.txt -r requirements.txt```Then, point your environment to this directory:```console$ python setup.py develop```Now, you can edit the files and they will be automatically be seen by yourenvironment, even when running from the `chaos` command locally.### TestTo run the tests for the project execute the following:```$ pytest```</longdescription>
</pkgmetadata>