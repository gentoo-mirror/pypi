<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># libsastGeneric SAST for Security Engineers. Powered by regex based pattern matcher and semantic aware [semgrep](https://github.com/returntocorp/semgrep).Made with ![Love](https://cloud.githubusercontent.com/assets/4301109/16754758/82e3a63c-4813-11e6-9430-6015d98aeaab.png) in India [![Tweet](https://img.shields.io/twitter/url?url=https://github.com/ajinabraham/libsast)](https://twitter.com/intent/tweet/?text=Generic%20SAST%20for%20Security%20Engineers.%20Powered%20by%20regex%20based%20pattern%20matcher%20and%20semantic%20aware%20semgrep%20by%20%40ajinabraham%20%40OpenSecurity_IN&amp;url=https://github.com/ajinabraham/libsast)[![PyPI version](https://badge.fury.io/py/libsast.svg)](https://badge.fury.io/py/libsast)[![platform](https://img.shields.io/badge/platform-windows%2Fosx%2Flinux-green.svg)](https://github.com/ajinabraham/libsast)[![License](https://img.shields.io/:license-lgpl3+-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0.en.html)[![python](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/)[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/ajinabraham/libsast.svg?logo=lgtm&amp;logoWidth=18)](https://lgtm.com/projects/g/ajinabraham/libsast/context:python)[![Requirements Status](https://requires.io/github/ajinabraham/libsast/requirements.svg?branch=master)](https://requires.io/github/ajinabraham/libsast/requirements/?branch=master)[![Build](https://github.com/ajinabraham/libsast/workflows/Build/badge.svg)](https://github.com/ajinabraham/libsast/actions?query=workflow%3ABuild)### Support libsast* **Donate via Paypal:** [![Donate via Paypal](https://user-images.githubusercontent.com/4301109/76471686-c43b0500-63c9-11ea-8225-2a305efb3d87.gif)](https://paypal.me/ajinabraham)* **Sponsor the Project:** [![Github Sponsors](https://user-images.githubusercontent.com/4301109/95517226-9e410780-098e-11eb-9ef5-7b8c7561d725.png)](https://github.com/sponsors/ajinabraham)## Install`pip install libsast`Pattern Matcher is cross-platform, but Semgrep supports only Mac and Linux.## Command Line Options```bash$ libsastusage: libsast [-h] [-o OUTPUT] [-p PATTERN_FILE] [-s SGREP_PATTERN_FILE]               [--sgrep-file-extensions SGREP_FILE_EXTENSIONS [SGREP_FILE_EXTENSIONS ...]]               [--file-extensions FILE_EXTENSIONS [FILE_EXTENSIONS ...]]               [--ignore-filenames IGNORE_FILENAMES [IGNORE_FILENAMES ...]]               [--ignore-extensions IGNORE_EXTENSIONS [IGNORE_EXTENSIONS ...]]               [--ignore-paths IGNORE_PATHS [IGNORE_PATHS ...]]               [--show-progress] [-v]               [path [path ...]]positional arguments:  path                  Path can be file(s) or directoriesoptional arguments:  -h, --help            show this help message and exit  -o OUTPUT, --output OUTPUT                        Output filename to save JSON report.  -p PATTERN_FILE, --pattern-file PATTERN_FILE                        YAML pattern file, directory or url  -s SGREP_PATTERN_FILE, --sgrep-pattern-file SGREP_PATTERN_FILE                        sgrep rules directory  --sgrep-file-extensions SGREP_FILE_EXTENSIONS [SGREP_FILE_EXTENSIONS ...]                        File extensions that should be scanned with sgrep  --file-extensions FILE_EXTENSIONS [FILE_EXTENSIONS ...]                        File extensions that should be scanned with pattern                        matcher  --ignore-filenames IGNORE_FILENAMES [IGNORE_FILENAMES ...]                        File name(s) to ignore  --ignore-extensions IGNORE_EXTENSIONS [IGNORE_EXTENSIONS ...]                        File extension(s) to ignore in lower case  --ignore-paths IGNORE_PATHS [IGNORE_PATHS ...]                        Path(s) to ignore  --show-progress       Show scan progress  -v, --version         Show libsast version```## Example Usage```json$ libsast -s tests/assets/rules/semantic_grep/ -p tests/assets/rules/pattern_matcher/ tests/assets/files/{  &quot;pattern_matcher&quot;: {    &quot;test_regex&quot;: {      &quot;files&quot;: [        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            28,            28          ],          &quot;match_position&quot;: [            1141,            1149          ],          &quot;match_string&quot;: &quot;.close()&quot;        }      ],      &quot;metadata&quot;: {}    },    &quot;test_regex_and&quot;: {      &quot;files&quot;: [        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            3,            3          ],          &quot;match_position&quot;: [            52,            66          ],          &quot;match_string&quot;: &quot;webkit.WebView&quot;        },        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            7,            7          ],          &quot;match_position&quot;: [            194,            254          ],          &quot;match_string&quot;: &quot;.loadUrl(\&quot;file:/\&quot; + Environment.getExternalStorageDirectory(&quot;        }      ],      &quot;metadata&quot;: {}    },    &quot;test_regex_and_not&quot;: {      &quot;files&quot;: [        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            42,            42          ],          &quot;match_position&quot;: [            1415,            1424          ],          &quot;match_string&quot;: &quot;WKWebView&quot;        },        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            40,            40          ],          &quot;match_position&quot;: [            1363,            1372          ],          &quot;match_string&quot;: &quot;WKWebView&quot;        }      ],      &quot;metadata&quot;: {}    },    &quot;test_regex_and_or&quot;: {      &quot;files&quot;: [        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            50,            50          ],          &quot;match_position&quot;: [            1551,            1571          ],          &quot;match_string&quot;: &quot;telephony.SmsManager&quot;        },        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            58,            58          ],          &quot;match_position&quot;: [            1973,            1988          ],          &quot;match_string&quot;: &quot;sendTextMessage&quot;        }      ],      &quot;metadata&quot;: {}    },    &quot;test_regex_multiline_and_metadata&quot;: {      &quot;files&quot;: [        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            52,            52          ],          &quot;match_position&quot;: [            1586,            1684          ],          &quot;match_string&quot;: &quot;public void onRequestPermissionsResult(int requestCode,String permissions[], int[] grantResults) {&quot;        },        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            10,            11          ],          &quot;match_position&quot;: [            297,            368          ],          &quot;match_string&quot;: &quot;public static ForgeAccount add(Context context, ForgeAccount account) {&quot;        }      ],      &quot;metadata&quot;: {        &quot;cwe&quot;: &quot;CWE-1051 Initialization with Hard-Coded Network Resource Configuration Data&quot;,        &quot;description&quot;: &quot;This is a rule to test regex&quot;,        &quot;foo&quot;: &quot;bar&quot;,        &quot;masvs&quot;: &quot;MSTG-STORAGE-3&quot;,        &quot;owasp-mobile&quot;: &quot;M1: Improper Platform Usage&quot;,        &quot;owasp-web&quot;: &quot;A10: Insufficient Logging &amp; Monitoring&quot;,        &quot;severity&quot;: &quot;info&quot;      }    },    &quot;test_regex_or&quot;: {      &quot;files&quot;: [        {          &quot;file_path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,          &quot;match_lines&quot;: [            26,            26          ],          &quot;match_position&quot;: [            1040,            1067          ],          &quot;match_string&quot;: &quot;Context.MODE_WORLD_READABLE&quot;        }      ],      &quot;metadata&quot;: {}    }  },  &quot;semantic_grep&quot;: {    &quot;errors&quot;: [      {        &quot;code&quot;: 3,        &quot;level&quot;: &quot;warn&quot;,        &quot;message&quot;: &quot;Semgrep Core WARN - Lexical error in file tests/assets/files/test_matcher.test:40\n\tunrecognized symbols: !&quot;,        &quot;path&quot;: &quot;tests/assets/files/test_matcher.test&quot;,        &quot;type&quot;: &quot;Lexical error&quot;      },    ],    &quot;matches&quot;: {      &quot;boto-client-ip&quot;: {        &quot;files&quot;: [          {            &quot;file_path&quot;: &quot;tests/assets/files/example_file.py&quot;,            &quot;match_lines&quot;: [              4,              4            ],            &quot;match_position&quot;: [              24,              31            ],            &quot;match_string&quot;: &quot;c = boto3.client(host='8.8.8.8')&quot;          }        ],        &quot;metadata&quot;: {          &quot;cwe&quot;: &quot;CWE-1050 Excessive Platform Resource Consumption within a Loop&quot;,          &quot;description&quot;: &quot;boto client using IP address&quot;,          &quot;owasp-web&quot;: &quot;A8: Insecure Deserialization&quot;,          &quot;severity&quot;: &quot;ERROR&quot;        }      }    }  }}```## Python API```python&gt;&gt;&gt; from libsast import Scanner&gt;&gt;&gt; options = {'match_rules': '/Users/ajinabraham/Code/njsscan/njsscan/rules/pattern_matcher', 'sgrep_rules': '/Users/ajinabraham/Code/njsscan/njsscan/rules/semantic_grep', 'sgrep_extensions': {'', '.js'}, 'match_extensions': {'.hbs', '.sh', '.ejs', '.toml', '.mustache', '.tmpl', '.jade', '.json', '.ect', '.vue', '.yml', '.hdbs', '.tl', '.html', '.haml', '.dust', '.pug', '.tpl'}, 'ignore_filenames': {'bootstrap.min.js', '.DS_Store', 'bootstrap-tour.js', 'd3.min.js', 'tinymce.js', 'codemirror.js', 'tinymce.min.js', 'react-dom.production.min.js', 'react.js', 'jquery.min.js', 'react.production.min.js', 'codemirror-compressed.js', 'axios.min.js', 'angular.min.js', 'raphael-min.js', 'vue.min.js'}, 'ignore_extensions': {'.7z', '.exe', '.rar', '.zip', '.a', '.o', '.tz'}, 'ignore_paths': {'__MACOSX', 'jquery', 'fixtures', 'node_modules', 'bower_components', 'example', 'spec'}, 'show_progress': False}&gt;&gt;&gt; paths = ['../njsscan/tests/assets/dot_njsscan/']&gt;&gt;&gt; scanner = Scanner(options, paths)&gt;&gt;&gt; scanner.scan(){'pattern_matcher': {'handlebar_mustache_template': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/ignore_ext.hbs', 'match_string': '{{{html}}}', 'match_position': (52, 62), 'match_lines': (1, 1)}], 'metadata': {'id': 'handlebar_mustache_template', 'description': 'The Handlebar.js/Mustache.js template has an unescaped variable. Untrusted user input passed to this variable results in Cross Site Scripting (XSS).', 'type': 'Regex', 'pattern': '{{{.+}}}|{{[ ]*&amp;[\\w]+.*}}', 'severity': 'ERROR', 'input_case': 'exact', 'cwe': &quot;CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')&quot;, 'owasp': 'A1: Injection'}}}, 'semantic_grep': {'matches': {'node_aes_ecb': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (16, 87), 'match_lines': (14, 14), 'match_string': &quot;let decipher = crypto.createDecipheriv('aes-128-ecb', Buffer.from(ENCRYPTION_KEY), iv);&quot;}], 'metadata': {'owasp': 'A9: Using Components with Known Vulnerabilities', 'cwe': 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm', 'description': 'AES with ECB mode is deterministic in nature and not suitable for encrypting large amount of repetitive data.', 'severity': 'ERROR'}}, 'node_tls_reject': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/skip_dir/skip_me.js', 'match_position': (9, 58), 'match_lines': (9, 9), 'match_string': &quot;        process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';&quot;}, {'file_path': '../njsscan/tests/assets/dot_njsscan/skip_dir/skip_me.js', 'match_position': (9, 55), 'match_lines': (18, 18), 'match_string': '        process.env.NODE_TLS_REJECT_UNAUTHORIZED = &quot;0&quot;;'}], 'metadata': {'owasp': 'A6: Security Misconfiguration', 'cwe': 'CWE-295: Improper Certificate Validation', 'description': &quot;Setting 'NODE_TLS_REJECT_UNAUTHORIZED' to 0 will allow node server to accept self signed certificates and is not a secure behaviour.&quot;, 'severity': 'ERROR'}}, 'node_curl_ssl_verify_disable': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/skip_dir/skip_me.js', 'match_position': (5, 11), 'match_lines': (45, 51), 'match_string': '    curl(url,\n\n        {\n\n            SSL_VERIFYPEER: 0\n\n        },\n\n        function (err) {\n\n            response.end(this.body);\n\n        })'}], 'metadata': {'owasp': 'A6: Security Misconfiguration', 'cwe': 'CWE-599: Missing Validation of OpenSSL Certificate', 'description': 'SSL Certificate verification for node-curl is disabled.', 'severity': 'ERROR'}}, 'regex_injection_dos': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (5, 37), 'match_lines': (25, 27), 'match_string': '    var key = req.param(&quot;key&quot;);\n\n    // Regex created from user input\n\n    var re = new RegExp(&quot;\\\\b&quot; + key);'}], 'metadata': {'owasp': 'A1: Injection', 'cwe': 'CWE-400: Uncontrolled Resource Consumption', 'description': 'User controlled data in RegExp() can make the application vulnerable to layer 7 DoS.', 'severity': 'ERROR'}}, 'express_xss': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/skip.js', 'match_position': (9, 55), 'match_lines': (7, 10), 'match_string': '        var str = new Buffer(req.cookies.profile, \'base64\').toString();\n\n        var obj = serialize.unserialize(str);\n\n        if (obj.username) {\n\n            res.send(&quot;Hello &quot; + escape(obj.username));'}], 'metadata': {'owasp': 'A1: Injection', 'cwe': &quot;CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')&quot;, 'description': 'Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.', 'severity': 'ERROR'}}, 'generic_path_traversal': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (5, 35), 'match_lines': (36, 37), 'match_string': &quot;    var filePath = path.join(__dirname, '/' + req.query.load);\n\n    fileSystem.readFile(filePath); // ignore: generic_path_traversal&quot;}, {'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (5, 35), 'match_lines': (42, 43), 'match_string': &quot;    var filePath = path.join(__dirname, '/' + req.query.load);\n\n    fileSystem.readFile(filePath); // detect this&quot;}], 'metadata': {'owasp': 'A5: Broken Access Control', 'cwe': 'CWE-23: Relative Path Traversal', 'description': 'Untrusted user input in readFile()/readFileSync() can endup in Directory Traversal Attacks.', 'severity': 'ERROR'}}, 'express_open_redirect': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (5, 26), 'match_lines': (49, 51), 'match_string': '    var target = req.param(&quot;target&quot;);\n\n    // BAD: sanitization doesn\'t apply here\n\n    res.redirect(target); //ignore: express_open_redirect'}], 'metadata': {'owasp': 'A1: Injection', 'cwe': &quot;CWE-601: URL Redirection to Untrusted Site ('Open Redirect')&quot;, 'description': 'Untrusted user input in redirect() can result in Open Redirect vulnerability.', 'severity': 'ERROR'}}, 'node_deserialize': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/skip.js', 'match_position': (19, 45), 'match_lines': (8, 8), 'match_string': '        var obj = serialize.unserialize(str);'}], 'metadata': {'owasp': 'A8: Insecure Deserialization', 'cwe': 'CWE-502: Deserialization of Untrusted Data', 'description': &quot;User controlled data in 'unserialize()' or 'deserialize()' function can result in Object Injection or Remote Code Injection.&quot;, 'severity': 'ERROR'}}}, 'errors': [{'type': 'SourceParseError', 'code': 3, 'short_msg': 'parse error', 'long_msg': 'Could not parse .njsscan as javascript', 'level': 'warn', 'spans': [{'start': {'line': 2, 'col': 20}, 'end': {'line': 2, 'col': 21}, 'source_hash': 'c60298be568bfb1325d92cbb3c0bc1450a25b85bb2e4000bdc3267c05f1c8c73', 'file': '.njsscan', 'context_start': None, 'context_end': None}], 'help': 'If the code appears to be valid, this may be a semgrep bug.'}, {'type': 'SourceParseError', 'code': 3, 'short_msg': 'parse error', 'long_msg': 'Could not parse no_ext_scan as javascript', 'level': 'warn', 'spans': [{'start': {'line': 1, 'col': 3}, 'end': {'line': 1, 'col': 5}, 'source_hash': 'f002e2a715be216987dd1b134e7b9fa6eef28e3caa82dead0109c4cdc489e089', 'file': 'no_ext_scan', 'context_start': None, 'context_end': None}], 'help': 'If the code appears to be valid, this may be a semgrep bug.'}]}}```## Write you own Static Analysis toolWith libsast, you can write your own static analysis tools. libsast provides two matching engines:1. **Pattern Matcher**2. **Semantic Grep**### Pattern MatcherCurrently Pattern Matcher supports any language.Use [Regex 101](https://regex101.com/r/nGbAay/1) to write simple Python Regex rule patterns.A sample rule looks like```yaml- id: test_regex_or  message: This is a rule to test regex_or  input_case: exact  pattern:  - MODE_WORLD_READABLE|Context\.MODE_WORLD_READABLE  - openFileOutput\(\s*&quot;.+&quot;\s*,\s*1\s*\)  severity: error  type: RegexOr  metadata:    owasp-web: a1    reference: http://foo.bar    foo: Some extra metadata```A rule consist of * `id` : A unique id for the rule.* `message`: A description for the rule.* `input_case`: It can be `exact`, `upper` or `lower`. Data will be converted to lower case/upper case/as it is before comparing with the regex.* `pattern`: List of patterns depends on `type`.* `severity`: It can be `error`, `warning` or `info`.* `type`: Pattern Matcher supports `Regex`, `RegexAnd`, `RegexOr`, `RegexAndOr`, `RegexAndNot`.* `metadata` (optional): Define your own custom fields that you can use as metadata along with standard mappings. ```bash1. Regex - if regex1 in input2. RegexAnd - if regex1 in input and regex2 in input3. RegexOr - if regex1 in input or regex2 in input4. RegexAndOr -  if regex1 in input and (regex2 in input or regex3 in input)5. RegexAndNot - if regex1 in input and not regex2 in input```Example: [Pattern Matcher Rule](https://github.com/ajinabraham/libsast/blob/master/tests/assets/rules/pattern_matcher/patterns.yaml)Test your pattern matcher rules`$ libsast -p tests/assets/rules/pattern_matcher/patterns.yaml tests/assets/files/`#### Inbuilt Standard Mapping SupportMetadata fields also support [libsast standard mapping](https://github.com/ajinabraham/libsast/tree/master/libsast/standards).For example, the metadata field `owasp-web: a1` will get expanded at runtime as `owasp-web: 'A1: Injection'`. *Currently Supports** [OWASP Web Top 10](https://github.com/ajinabraham/libsast/blob/master/libsast/standards/owasp_web_top10_2017.yaml)* [OWASP Mobile Top 10](https://github.com/ajinabraham/libsast/blob/master/libsast/standards/owasp_mobile_top10_2016.yaml)* [OWASP MASVS](https://github.com/ajinabraham/libsast/blob/master/libsast/standards/owasp_masvs.yaml)* [CWE](https://github.com/ajinabraham/libsast/blob/master/libsast/standards/cwe.yaml)### Semantic GrepSemantic Grep uses [semgrep](https://github.com/returntocorp/semgrep), a fast and syntax-aware semantic code pattern search for many languages: like grep but for code.Currently it supports Python, Java, JavaScript, Go and C.Use [semgrep.dev](https://semgrep.dev/vAb) to write semantic grep rule patterns.A sample rule for Python code looks like```yamlrules:  - id: boto-client-ip    patterns:      - pattern-inside: boto3.client(host=&quot;...&quot;)      - pattern-regex: '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'    message: &quot;boto client using IP address&quot;    languages: [python]    severity: ERROR    metadata:      owasp-web: a2      owasp-mobile: m7      cwe: cwe-1048      foo: Some extra metadata```See semgrep documentation [here](https://semgrep.dev/docs/writing-rules/rule-syntax/).Example: [Semantic Grep Rule](https://github.com/ajinabraham/libsast/blob/master/tests/assets/rules/semantic_grep/sgrep.yaml)Test your semgrep rules`$ libsast -s tests/assets/rules/semantic_grep/sgrep.yaml tests/assets/files/`## Realworld Implementations* [njsscan](https://github.com/ajinabraham/njsscan) SAST is built with libsast pattern matcher and semantic grep.* [nodejsscan](https://github.com/ajinabraham/nodejsscan) nodejsscan is a static security code scanner for Node.js applications.* [MobSF](https://mobsf.github.io/Mobile-Security-Framework-MobSF/) Static Code Analyzer for Android and iOS mobile applications.* [mobsfscan](https://github.com/MobSF/mobsfscan) mobsfscan is a static security code scanner for Mobile applications built for Android (Java, Kotlin) &amp; iOS (Swift, Objective C).</longdescription>
</pkgmetadata>