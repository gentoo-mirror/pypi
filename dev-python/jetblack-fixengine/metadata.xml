<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jetblack-fixengineA pure python asyncio FIX engine.## StatusThis is work in progress.## InstallationThe package can be install from the pie store.```bashpip install jetblack-fixengine```## OverviewThis project provides a pure Python, asyncio implementation ofa FIX engine, supporting both initiators and acceptors.The engine uses the [jetblack-fixparser](https://github.com/rob-blackbourn/jetblack-fixparser)package to present the FIX messages a plain Python objects. For example, a `LOGON` messagecan be sent as follows:```pythonawait send_message({    'MsgType': 'LOGON',    'MsgSeqNum': 42,    'SenderCompID': 'ME',    'TargetCompID': 'BANK OF SOMEWHERE',    'SendingTime': datetime.now(timezone.utc),    'EncryptMethod': &quot;NONE&quot;,    'HeartBtInt': 30})```### FIX ProtocolsThe FIX protocol is a combination of *well known* messages (like `LOGON`)and *custom* messages (like an order to buy or sell). The protocolhas evolved through a number of different versions providing new features.Because of this the protocols are provided by config files. Historically`XML` was used. While this is supported, `yaml` is preferred and someexample protocols are provided in the[etc](https://github.com/rob-blackbourn/jetblack-fixengine/tree/master/etc)folder.Currently supported versions are 4.0, 4.1, 4.2, 4.3, 4.4.### InitiatorsAn initiator is a class which inherits from `FIXApplication`, and implements afew methods, and has access to `send_message` from the `fix_engine`. Here is an example.```pythonimport asyncioimport loggingfrom pathlib import Pathfrom typing import Mapping, Anyfrom jetblack_fixparser import load_yaml_protocolfrom jetblack_fixengine import (    FileStore,    start_initiator,    InitiatorConfig,    FIXApplication,    FIXEngine)LOGGER = logging.getLogger(__name__)class MyInitiator(FIXApplication):    &quot;&quot;&quot;An instance of the initiator&quot;&quot;&quot;    async def on_logon(            self,            _message: Mapping[str, Any],            fix_engine: FIXEngine    ) -&gt; None:        LOGGER.info('on_logon')    async def on_logout(            self,            _message: Mapping[str, Any],            fix_engine: FIXEngine    ) -&gt; None:        LOGGER.info('on_logout')    async def on_application_message(            self,            _message: Mapping[str, Any],            fix_engine: FIXEngine    ) -&gt; None:        LOGGER.info('on_application_message')app = MyInitiator()config = InitiatorConfig(    '127.0.0.1',    9801,    load_yaml_protocol(Path('etc') / 'FIX44.yaml'),    'INITIATOR1',    'ACCEPTOR',    FileStore(Path('store')))logging.basicConfig(level=logging.DEBUG)asyncio.run(    start_initiator(app, config))```### AcceptorThe acceptor works in the same way as the initiator. Here is an example:```pythonimport asyncioimport loggingfrom pathlib import Pathfrom typing import Mapping, Anyfrom jetblack_fixparser import load_yaml_protocolfrom jetblack_fixengine import (    FileStore,    start_acceptor,    AcceptorConfig,    FIXApplication,    FIXEngine)LOGGER = logging.getLogger(__name__)class MyAcceptor(FIXApplication):    &quot;&quot;&quot;An instance of the acceptor&quot;&quot;&quot;    async def on_logon(            self,            _message: Mapping[str, Any],            _fix_engine: FIXEngine    ) -&gt; None:        LOGGER.info('on_logon')    async def on_logout(            self,            _message: Mapping[str, Any],            _fix_engine: FIXEngine    ) -&gt; None:        LOGGER.info('on_logout')    async def on_application_message(            self,            _message: Mapping[str, Any],            _fix_engine: FIXEngine    ) -&gt; None:        LOGGER.info('on_application_message')logging.basicConfig(level=logging.DEBUG)app = MyAcceptor()config = AcceptorConfig(    '0.0.0.0',    9801,    load_yaml_protocol(Path('etc') / 'FIX44.yaml'),    'ACCEPTOR',    'INITIATOR1',    FileStore(Path(&quot;store&quot;)))asyncio.run(    start_acceptor(        app,        config    ))```Note that throwing the exception `LogonError` from `on_logon` will rejectthe logon request.### StoresThe engines need to store their state. Two stores are currently provided:a file store (`FileStore`) and sqlite (`SqlStore`).## ImplementationThe engines are implemented as state machines. This means they can betested without the need for IO.</longdescription>
</pkgmetadata>