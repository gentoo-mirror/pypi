<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1 align=&quot;center&quot;&gt;üèÉ‚ôÄÔ∏è Runhouse üè†&lt;/h1&gt;[//]: # (&lt;p align=&quot;center&quot;&gt;)[//]: # (  &lt;a href=&quot;https://discord.gg/RnhB6589Hs&quot;&gt; )[//]: # (    &lt;img alt=&quot;Join Discord&quot; src=&quot;https://img.shields.io/discord/1065833240625172600?label=Discord&amp;style=for-the-badge&quot;&gt;)[//]: # (  &lt;/a&gt;)[//]: # (&lt;/p&gt;)## üëµ Welcome Home!PyTorch lets you send a model or tensor `.to(device)`, sowhy can't you do `my_fn.to('a_gcp_a100')` or `my_table.to('parquet_in_s3')`?Runhouse allows just that: send code and data to any of your compute ordata infra (with your own cloud creds), all in Python, and continue to interact withthem normally from your existing code and environment. Think of it as an **expansion pack to your Pythoninterpreter** that lets it take detours to remote machines or manipulate remotedata. It wraps industry-standard tooling like Ray and the Cloud SDKs (boto, gsutil, etc. via [SkyPilot](https://github.com/skypilot-org/skypilot/))to give you production-quality features like queuing, distributed, async, logging,low latency, auto-launching, and auto-termination out of the box.Runhouse is for ML Researchers, Engineers, and Data Scientists who are tired of: - üöú manually shuttling code and data around between their local machine, remote instances, and cloud storage, - üêú debugging over ssh and notebook tunnels, - üßëüîß translating their code into a pipeline DSL just to use multiple hardware types, - ü™¶ debugging in an orchestrator, - üë©‚úàÔ∏è missing out on fancy LLM IDE features, - üïµÔ∏è and struggling to find or reproduce their teammates' code and data artifacts.By way of a visual,[//]: # (![img.png]&amp;#40;docs/assets/img.png&amp;#41;)[//]: # (![img_1.png]&amp;#40;docs/assets/img_1.png&amp;#41;)![img.png](https://raw.githubusercontent.com/run-house/runhouse/main/docs/assets/img.png)![img_1.png](https://raw.githubusercontent.com/run-house/runhouse/main/docs/assets/img_1.png)Take a look at this code (adapted from our first [tutorial](https://github.com/run-house/tutorials/tree/main/t01_Stable_Diffusion)):```pythonimport runhouse as rhfrom diffusers import StableDiffusionPipelinedef sd_generate(prompt):    model = StableDiffusionPipeline.from_pretrained(&quot;stabilityai/stable-diffusion-2-base&quot;).to(&quot;cuda&quot;)    return model(prompt).images[0]if __name__ == &quot;__main__&quot;:    gpu = rh.cluster(name=&quot;my-a100&quot;, instance_type=&quot;A100:1&quot;, provider=&quot;cheapest&quot;)    sd_generate = rh.function(sd_generate).to(gpu, reqs=[&quot;./&quot;, &quot;torch&quot;, &quot;diffusers&quot;])    sd_generate(&quot;An oil painting of Keanu Reeves eating a sandwich.&quot;).show()    sd_generate.save(name=&quot;sd_generate&quot;)```By saving, I or anyone I share with can load and call into this service with a single line of code, from anywherewith a Python interpreter and internet connection (notebook, IDE, CI/CD, orchestrator node, etc.):```pythonimport runhouse as rhsd_generate = rh.Function.from_name(&quot;sd_generate&quot;)image = sd_generate(&quot;A hot dog made of matcha.&quot;)```There's no magic yaml, DSL, code serialization, or &quot;submitting for execution.&quot; We'rejust spinning up the cluster for you (or using an existing cluster), syncing over your code,starting an RPC connection, and running your code on the cluster.**_Runhouse does things for you that you'd spend time doing yourself, in as obvious a way as possible._**On the data side, we can do things like:```python# Send a folder up to a cluster (rsync)rh.folder(path=&quot;./instance_images&quot;).to(system=gpu, path=&quot;dreambooth/instance_images&quot;)gpu.run([f&quot;accelerate launch diffusers/examples/dreambooth/train_dreambooth.py&quot;         f&quot;--instance_data_dir=dreambooth/instance_images &quot;         f&quot;--output_dir=dreambooth/output &quot;])# This goes directly cluster-&gt; s3, doesn't bounce to localoutputs_s3 = rh.folder(system=gpu, path=&quot;dreambooth/outputs&quot;).to(&quot;s3&quot;, path=&quot;runhouse/dreambooth/outputs&quot;)outputs_s3.save(&quot;dreambooth_outputs&quot;)```To load down the folder in full later:```pythonrh.Folder.from_name(&quot;dreambooth_outputs&quot;).to(&quot;here&quot;)```We support interactive blob and table primitives too:```pythonimport runhouse as rhfrom transformers import AutoTokenizerdef tokenize_dataset(dataset_table):    hf_dataset = dataset_table.to(&quot;here&quot;).convert_to(&quot;hf_dataset&quot;).fetch()    tokenizer = AutoTokenizer.from_pretrained(&quot;bert-base-cased&quot;)    tokenized_ds = hf_dataset.map(lambda x: tokenizer(x[&quot;text&quot;], truncation=True, padding=True), batched=True)    return rh.table(tokenized_ds).write()if __name__ == &quot;__main__&quot;:    # Load a table in from anywhere (S3, GCS, Azure, cluster fs, local fs, etc)    raw_dataset = rh.table(system=&quot;gcs&quot;, path=&quot;my_bucket/my_data.parquet&quot;)    tokenize_dataset = rh.function(tokenize_dataset).to(&quot;^rh-32-cpu&quot;, env=[&quot;./&quot;, &quot;transformers&quot;, &quot;tokenizers&quot;])    tokenized_table = tokenize_dataset(raw_dataset).to(&quot;gcs&quot;, path=&quot;my_bucket/preprocessed_data.parquet&quot;)    tokenized_table.save(&quot;preprocessed-dataset&quot;)```And later:```pythonimport runhouse as rhdef train_model(preprocessed_table):    ...    preprocessed_table.stream_format = &quot;torch&quot;    for batch in preprocessed_table.stream(batch_size=30):        ...    return rh.blob(pickle.dumps(model)).write()if __name__ == &quot;__main__&quot;:    preprocessed_table = rh.Table.from_name(&quot;preprocessed-dataset&quot;)    train_model = rh.function(train_model).to(&quot;my-a100&quot;, env=[&quot;./&quot;, &quot;torch&quot;, &quot;transformers&quot;])    trained_model = train_model(preprocessed_table)    trained_model.to(&quot;s3&quot;, path=&quot;runhouse/my_bucket&quot;).save(name=&quot;yelp_fine_tuned_bert&quot;)```These APIs work from anywhere with a Python interpreter and an internet connection,so notebooks, scripts, pipeline nodes, etc. are all fair game. We currently support AWS,GCP, Azure, and Lambda Labs credentials through SkyPilot, as well as BYO cluster (just dropin an ip address and ssh key).## üö® This is an Alpha üö®Runhouse is heavily under development and we expect to iterateon the APIs before reaching beta (version 0.1.0).## üê£ Getting Startedtldr;```commandlinepip install runhouse# Or &quot;runhouse[aws]&quot;, &quot;runhouse[gcp]&quot;, &quot;runhouse[azure]&quot;, &quot;runhouse[all]&quot;sky check# Optionally, for portability (e.g. Colab):runhouse login```### üîå InstallationRunhouse can be installed from Pypi with:```pip install runhouse```Depending on which cloud providers you plan to use, you can also install the followingadditional dependencies (to install the right versions of tools like boto, gsutil, etc.):```commandlinepip install &quot;runhouse[aws]&quot;pip install &quot;runhouse[gcp]&quot;pip install &quot;runhouse[azure]&quot;# Orpip install &quot;runhouse[all]&quot;```As this is an alpha, we push feature updates every few weeks as new microversions.### ‚úàÔ∏è Verifying your Cloud Setup with SkyPilotRunhouse supports both BYO cluster, where you interact with existing compute via theirIP address and SSH key, and autoscaled clusters, where we spin up and down cloud instancesin your own cloud account for you. If you only plan to use BYO clusters, you candisregard the following.Runhouse uses [SkyPilot](https://skypilot.readthedocs.io/en/latest/) formuch of the heavy lifting with launching and terminating cloud instances.We love it and you should [throw them a Github star ‚≠êÔ∏è](https://github.com/skypilot-org/skypilot/).To verify that your cloud credentials are set up correctly for autoscaling, run```sky check```in your command line. This will confirm which cloud providers are ready touse, and will give detailed instructions if any setup is incomplete. SkyPilot alsoprovides an excellent suite of CLI commands for basic instance management operations.There are a few that you'll be reaching for frequently when using Runhouse with autoscalingthat you should familiarize yourself with,[here](https://runhouse-docs.readthedocs-hosted.com/en/latest/overview/compute.html#on-demand-clusters).### üîí Creating a Runhouse Account for Secrets and PortabilityUsing Runhouse with only the OSS Python package is perfectly fine. However,you can unlock some unique portability features by creating an (always free)account on [api.run.house](https://api.run.house) and saving your secrets and/orresource metadata there. For example, you can open a Google Colab, call `runhouse login`,and all of your secrets or resources will be ready to use there with no additional setup.Think of the OSS-package-only experience as akin to Microsoft Office,while creating an account will make your cloud resources sharable and accessiblefrom anywhere like Google Docs. Youcan see examples of this portability in the[Runhouse Tutorials](https://github.com/run-house/tutorials).To create an account, visit [api.run.house](https://api.run.house),or simply call `runhouse login` from the command line (or`rh.login()` from Python).&gt; **Note**:These portability features only ever store light metadata about your resources(e.g. my_folder_name -&gt; [provider, bucket, path]) on our API servers. All the actual data and computestays inside your own cloud account and never hits our servers. The Secrets service storesyour secrets in Hashicorp Vault (an industry standard for secrets management), and our secretsAPIs simply call Vault's APIs. We never store secrets on our API servers. We plan to addsupport for BYO secrets management shortly. Let us know if you need it and which system you use.## üë®üè´ Tutorials / API Walkthrough / Docs[Tutorials can be found here](https://github.com/run-house/tutorials). They have been structured to provide acomprehensive walkthrough of the APIs.[Docs can be found here](https://runhouse-docs.readthedocs-hosted.com/en/latest/index.html).They include both high-level overviews of the architecture and detailed API references.## üé™ FunhouseCheck out [Funhouse](https://github.com/run-house/funhouse) for running fun applications using Runhouse --think the latest Stable Diffusion models, text generation models, launching Gradio spaces, and even more!## üôã‚ôÇÔ∏è Getting HelpPlease join our [discord server here](https://discord.gg/RnhB6589Hs)to message us, or email us (first name at run.house), or create an issue.## üë∑‚ôÄÔ∏è ContributingWe welcome contributions! Please check out [contributing](CONTRIBUTING.md) if you're interested.</longdescription>
</pkgmetadata>