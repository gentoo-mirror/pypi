<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/unikubehq/cli/main/logo_cli.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;img alt=&quot;Build Status&quot; src=&quot;https://github.com/unikubehq/cli/actions/workflows/python-app.yaml/badge.svg&quot;&gt;    &lt;a href=&quot;https://sonarcloud.io/dashboard?id=unikubehq_cli&quot;&gt;&lt;img alt=&quot;Quality Gate Status&quot; src=&quot;https://sonarcloud.io/api/project_badges/measure?project=unikubehq_cli&amp;metric=alert_status&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://coveralls.io/github/unikubehq/cli?branch=main&quot;&gt;&lt;img alt=&quot;Coverage Status&quot; src=&quot;https://coveralls.io/repos/github/unikubehq/cli/badge.svg?branch=main&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://unikubeworkspace.slack.com&quot;&gt;&lt;img alt=&quot;Unikube Slack Community&quot; src=&quot;https://raw.githubusercontent.com/unikubehq/frontend/main/.github/slack.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt;# The Unikube CLIThis is the command line interface for [unikube][link_unikube].## DocumentationThe unikube [cli documentation][link_unikube_cli_documentation] is automatically built.### Installation#### GeneralThe unikube cli can be installed via `pip`. Please make sure you are using Python 3.```shellpip install unikube```#### MacOSThe unikube cli is also installable via brew:```shellbrew tap unikubehq/toolingbrew install unikubehq/tooling/unikube```### Make Local```bashcd docsmake html```## Development---### SetupStart the local unikube development cluster:```bashk3d cluster start unikube```### Install CLITo install the latest (pre-)release of the Unikube CLI type```bashsudo pip3 install unikube==&lt;VERSION&gt; --upgrade --pre```#### Enable tab completion`unikube` support tab completion scripts for bash.```shellunikube system completion bash &gt; /etc/bash_completion.d/unikube.bash-completion```You probably need to restart your shell in order for the completion script to do its work.### Virtual Environment + RequirementsCreate virtual environment:```bashpython -m .venv venv```Install requirements (production + development):```bashpip3 install -r requirements.txt -r requirements.dev.txt```### Version Build + ReleaseVersion management is handled via bump2version.`bump2version patch|minor|major`Increase _dev_ version (e.g.: 1.0.0-dev1 -&gt; 1.0.0-dev2):`bump2version build`Create release (e.g.: 1.0.0-dev2 -&gt; 1.0.0):`bump2version release`## Test---Tests for the unikube cli are developed using the `pytest` framework in combination with the _click.testing_ module.Thus, it is possible to run the tests using `pytest` or by configuring the testing environment/options within your IDE to use `pytest`.Currently, most tests are developed directly against the unikube API, using a test-account. Therefore, it is required to provide the credentials via the following environment variables:```TESTRUNNER_EMAIL=...TESTRUNNER_SECRET=...```Otherwise, tests might fail locally, even if they are correct.It is possible to set the environment variables using an `.env` file within your virtual environment or by providing them explicitly:```TESTRUNNER_EMAIL=... TESTRUNNER_SECRET=... pytest```[link_unikube]: https://unikube.io[link_unikube_cli_documentation]: https://cli.unikube.io</longdescription>
</pkgmetadata>