<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>NumerBlox================&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;`numerblox` offers Numerai specific functionality, so you can worry lessabout software/data engineering and focus more on building great Numeraimodels!Most of the components in this library are designed for solid weeklyinference pipelines, but tools like `NumerFrame`, preprocessors andevaluators also greatly simplify the training process.**Documentation:**[crowdcent.github.io/numerblox](https://crowdcent.github.io/numerblox/)![](https://img.shields.io/pypi/v/numerblox.png)![](https://img.shields.io/pypi/pyversions/numerblox.png)![](https://img.shields.io/github/contributors/crowdcent/numerblox.png)![](https://img.shields.io/github/issues-raw/crowdcent/numerblox.png)![](https://img.shields.io/github/repo-size/crowdcent/numerblox.png)![](https://img.shields.io/github/workflow/status/crowdcent/numerblox/CI.png)## 1. Install## 1. Getting Started**This document has been generated by[NBDev](https://github.com/fastai/nbdev).** Please edit`nbs/index.ipynb` instead of this `README.md`. Read `CONTRIBUTING.MD`for more information on the contribution process and how to changefiles. Thank you!### 1.1 InstallationInstall numerblox from PyPi by running:`pip install numerblox`Alternatively you can clone this repository and install it indevelopment mode running the following from the root of the repository:`pip install -e .`### 1.2 Running NotebooksStart by spinning up your favorite Jupyter Notebook environment. Herewe’ll use:`jupyter notebook`Test your installation using one of the education notebooks in`nbs/edu_nbs`. A good example is `numerframe_tutorial`. Run it in yourNotebook environment to quickly test if your installation has succeeded### 2.1. Contents#### 2.1.1. Core functionality`numerblox` features the following functionality:1.  Downloading data2.  A custom data structure extending Pandas DataFrame (`NumerFrame`)3.  A suite of preprocessors for Numerai Classic and Signals (feature    selection, engineering and manipulation)4.  Model objects for easy inference.5.  A suite of postprocessors for Numerai Classic and Signals    (standardization, ensembling, neutralization and penalization)6.  Pipelines handling processing and prediction (`ModelPipeline` and    `ModelPipelineCollection`)7.  Evaluation (`NumeraiClassicEvaluator` and `NumeraiSignalsEvaluator`)8.  Authentication (`Key` and `load_key_from_json`)9.  Submitting (`NumeraiClassicSubmitter`, `NumeraiSignalsSubmitter` and    `NumerBaySubmitter`)#### 2.1.2. Educational notebooksExample notebooks can be found in the `nbs/edu_nbs` directory.`nbs/edu_nbs` currently contains the following examples: -`numerframe_tutorial.ipynb`: A deep dive into what `NumerFrame` has tooffer. - `submitting.ipynb`: How to use Submitters for safe and easyNumerai submissions. - `google_cloud_storage.ipynb`: How to useDownloaders and Submitters to interact with Google Cloud Storage(GCS). - `load_model_from_wandb.ipynb`: For [Weights &amp;Biases](https://wandb.ai/) users. Easily pull a model from W&amp;B forinference. - `numerbay_integration.ipynb`: How to use `NumerBlox` todownload and upload predictions listed on[NumerBay](https://numerbay.ai). - `synthetic_data_generation.ipynb`:Tutorial for generating synthetic data for training Numerai models.Development notebooks are also in the `nbs` directory. These notebooksare also used to generate the documentation.**Full documentation:**[crowdcent.github.io/numerblox](https://crowdcent.github.io/numerblox/)### 2.2. ExamplesBelow we will illustrate a common use case for inference pipelines. Tolearn more in-depth about the features of this library, check outnotebooks in `nbs/edu_nbs`.#### 2.2.1. Numerai Classic``` python# --- 0. Numerblox dependencies ---from numerblox.download import NumeraiClassicDownloaderfrom numerblox.numerframe import create_numerframefrom numerblox.postprocessing import FeatureNeutralizerfrom numerblox.model import SingleModelfrom numerblox.model_pipeline import ModelPipelinefrom numerblox.key import load_key_from_jsonfrom numerblox.submission import NumeraiClassicSubmitter# --- 1. Download version 4 data ---downloader = NumeraiClassicDownloader(&quot;data&quot;)downloader.download_inference_data(&quot;current_round&quot;)# --- 2. Initialize NumerFrame ---dataf = create_numerframe(file_path=&quot;data/current_round/live.parquet&quot;)# --- 3. Define and run pipeline ---models = [SingleModel(&quot;test_assets/joblib_v2_example_model.joblib&quot;,                      model_name=&quot;test&quot;)]# No preprocessing and 0.5 feature neutralizationpostprocessors = [FeatureNeutralizer(pred_name=f&quot;prediction_test&quot;,                                     proportion=0.5)]pipeline = ModelPipeline(preprocessors=[],                         models=models,                         postprocessors=postprocessors)dataf = pipeline(dataf)# --- 4. Submit ---# Load credentials from .json (random credentials in this example)key = load_key_from_json(&quot;test_assets/test_credentials.json&quot;)submitter = NumeraiClassicSubmitter(directory_path=&quot;sub_current_round&quot;, key=key)# full_submission checks contents, saves as csv and submits.submitter.full_submission(dataf=dataf,                          cols=f&quot;prediction_test_neutralized_0.5&quot;,                          model_name=&quot;test&quot;)# --- 5. Clean up environment (optional) ---downloader.remove_base_directory()submitter.remove_base_directory()```&lt;pre style=&quot;white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace&quot;&gt;💻 Directory structure before starting&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┗━━ &lt;/span&gt;📁 test_assets&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;    ┣━━ &lt;/span&gt;📄 joblib_v2_example_model.joblib&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;    ┗━━ &lt;/span&gt;📄 test_credentials.json&lt;/pre&gt;&lt;pre style=&quot;white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace&quot;&gt;💻 Directory structure after submitting&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┣━━ &lt;/span&gt;📁 data&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┃   ┗━━ &lt;/span&gt;📁 current_round&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┃       ┗━━ &lt;/span&gt;📄 numerai_tournament_data.parquet&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┗━━ &lt;/span&gt;📁 sub_current_round&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;    ┗━━ &lt;/span&gt;📄 test_model1.csv&lt;/pre&gt;#### 2.2.2. Numerai Signals``` python# --- 0. Numerblox dependencies ---from numerblox.download import KaggleDownloaderfrom numerblox.numerframe import create_numerframefrom numerblox.preprocessing import KatsuFeatureGeneratorfrom numerblox.model import SingleModelfrom numerblox.model_pipeline import ModelPipelinefrom numerblox.key import load_key_from_jsonfrom numerblox.submission import NumeraiSignalsSubmitter# --- 1. Download Katsu1110 yfinance dataset from Kaggle ---kd = KaggleDownloader(&quot;data&quot;)kd.download_inference_data(&quot;code1110/yfinance-stock-price-data-for-numerai-signals&quot;)# --- 2. Initialize NumerFrame ---dataf = create_numerframe(&quot;data/full_data.parquet&quot;)# --- 3. Define and run pipeline ---models = [SingleModel(&quot;models/signals_model.cbm&quot;, model_name=&quot;cb&quot;)]# Simple and fast feature generator based on Katsu Signals starter notebook# https://www.kaggle.com/code1110/numeraisignals-starter-for-beginnerspipeline = ModelPipeline(preprocessors=[KatsuFeatureGenerator(windows=[20, 40, 60])],                         models=models,                         postprocessors=[])dataf = pipeline(dataf)# --- 4. Submit ---# Load credentials from .json (random credentials in this example)key = load_key_from_json(&quot;test_assets/test_credentials.json&quot;)submitter = NumeraiSignalsSubmitter(directory_path=&quot;sub_current_round&quot;, key=key)# full_submission checks contents, saves as csv and submits.# cols selection must at least contain 1 ticker column and a signal column.dataf['signal'] = dataf['prediction_cb']submitter.full_submission(dataf=dataf,                          cols=['bloomberg_ticker', 'signal'],                          model_name=&quot;test_model1&quot;)# --- 5. Clean up environment (optional) ---kd.remove_base_directory()submitter.remove_base_directory()```&lt;pre style=&quot;white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace&quot;&gt;💻 Directory structure before starting&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┣━━ &lt;/span&gt;📁 test_assets&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┃   ┗━━ &lt;/span&gt;📄 test_credentials.json&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┗━━ &lt;/span&gt;📁 models&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;    ┗━━ &lt;/span&gt;📄 signals_model.cbm&lt;/pre&gt;&lt;pre style=&quot;white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace&quot;&gt;💻 Directory structure after submitting&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┣━━ &lt;/span&gt;📁 data&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┃   ┗━━ &lt;/span&gt;📄 full_data.parquet&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┗━━ &lt;/span&gt;📁 sub_current_round&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;    ┗━━ &lt;/span&gt;📄 submission.csv&lt;/pre&gt;## 3. ContributingBe sure to read `CONTRIBUTING.md` for detailed instructions oncontributing.If you have questions or want to discuss new ideas for `numerblox`,check out[rocketchat.numer.ai/channel/numerblox](https://rocketchat.numer.ai/channel/numerblox).## 4. Branch structureEvery new feature should be implemented in a branch that branches from`dev` and has the naming convention `feature/{FEATURE_DESCRIPTION}`.Explicit bugfixes should be named `bugfix/{FIX_DESCRIPTION}`. An examplestructure is given below.&lt;pre style=&quot;white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace&quot;&gt;Branch structure&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;┗━━ &lt;/span&gt;📦 master (release)&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;    ┗━━ &lt;/span&gt;👨💻 dev&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;        ┣━━ &lt;/span&gt;✨ feature/ta-signals-features&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;        ┣━━ &lt;/span&gt;✨ feature/news-api-downloader&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;        ┣━━ &lt;/span&gt;✨ feature/staking-portfolio-management&lt;span style=&quot;color: #808080; text-decoration-color: #808080&quot;&gt;        ┗━━ &lt;/span&gt;✨ bugfix/evaluator-metrics-fix&lt;/pre&gt;## 5. Crediting sourcesSome of the components in this library may be based on forum posts,notebooks or ideas made public by the Numerai community. We have doneour best to ask all parties who posted a specific piece of code fortheir permission and credit their work in the documentation. If yourcode is used in this library without credits, please let us know, so wecan add a link to your article/code.If you are contributing to `numerblox` and are using ideas postedearlier by someone else, make sure to credit them by posting a link totheir article/code in documentation.</longdescription>
</pkgmetadata>