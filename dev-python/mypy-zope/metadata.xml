<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Plugin for mypy to support zope.interface[![Build Status](https://travis-ci.org/Shoobx/mypy-zope.svg?branch=master)](https://travis-ci.org/Shoobx/mypy-zope)[![Coverage Status](https://coveralls.io/repos/github/Shoobx/mypy-zope/badge.svg)](https://coveralls.io/github/Shoobx/mypy-zope)[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)The goal is to be able to make zope interfaces to be treated as types in mypysense.## UsageInstall both mypy and mypy-zope:```shpip install mypy-zope```Edit `mypy.ini` file in your project to enable the plugin:```ini[mypy]namespace_packages=Trueplugins=mypy_zope:plugin```You're done! You can now check your project with mypy:```shmypy your-project-dir```## What is supported?You can browse[sample files](https://github.com/Shoobx/mypy-zope/tree/master/tests/samples)to get some sense on what features are supported and how they are handled.### Interface declarationsYou can define the interface and provide implementation:```pythonclass IAnimal(zope.interface.Interface):    def say() -&gt; None:        pass@zope.interface.implementer(IAnimal)class Cow(object):    def say(self) -&gt; None:        print(&quot;Moooo&quot;)animal: IAnimal = Cow()animal.say()```The interface `IAnimal` will be treated as superclass of the implementation`Cow`: you will be able to pass an implementation to functions accepting aninterface and all the usual polymorphism tricks.It is also possible to declare the implementation using `classImplements`function  with the same effect as `@imlementer` decorator. This is useful ifyou do not control the code that defines the implementation class.```pythonclassImplements(Cow, IAnimal)animal: IAnimal = Cow()```### Schema field type inferenceA limited support for defining attributes as `zope.schema.Field`s is supported too:```pythonclass IAnimal(zope.interface.Interface):    number_of_legs = zope.schema.Int(title=&quot;Number of legs&quot;)@zope.interface.implementer(IAnimal)class Cow(object):    number_of_legs = 4```In context of an interface, some known `zope.schema` field types areautomatically translated to python types, so the `number_of_legs` attributes isgetting the type `int` in the example above. That means mypy will report anerror if you try to assign string to that attribute on an instance of `IAnimal`type. Custom fields or fields not recognized by plugin are given type `Any`.### Field propertiesSupport for `zope.schema.FieldProperty` is limited, because type information isnot transferred from an interface to implementation attribute, but mypy doesn'treport errors on sources like this:```pythonclass IAnimal(zope.interface.Interface):    number_of_legs = zope.schema.Int(title=&quot;Number of legs&quot;)@zope.interface.implementer(IAnimal)class Cow(object):    number_of_legs = zope.schema.FieldProperty(IAnimal['number_of_legs'])```The type of `Cow.number_of_legs` will become `Any` in this case, even though`IAnimal.number_of_legs` would be inferred as `int`.### Adaptation patternZope interfaces can be &quot;called&quot; to lookup an adapter, like this:```pythonclass IEUPowerSocket(zope.interface.Interface):    def fit():        passadapter = IEUPowerSocket(us_plug)adapter.fit()```Type of the `adapter` variable will be set to `IEUPowerSocket`.### Conditional type inferenceWhen using `zope.interface`'s `implementedBy()` and `providedBy()` methodsin an if statement, `mypy` will know which type it is inside those statements.```pythonif IAnimal.providedBy(ob):    ob.number_of_legs += 2```### Declaration of overloaded methods in interfacesSimilarly to regular [overloadedfunctions](https://docs.python.org/3/library/typing.html#typing.overload),`@overload` declarations are supported in interfaces as well:```pythonclass IAnimal(zope.interface.Interface):    @overload    def say() -&gt; str:        ...    @overload    def say(count: int) -&gt; List[str]:        ...    def say(count: int = None) -&gt; Union[str, List[str]]:        pass@zope.interface.implementer(IAnimal)class Cow(object):    @overload    def say(self) -&gt; str:        ...    @overload    def say(self, count: int) -&gt; List[str]:        ...    def say(self, count: int = None) -&gt; Union[str, List[str]]:        if count is None:            return &quot;Mooo&quot;        return [&quot;Mooo&quot;] * count```### Type stubs for zope.interface and zope.schema`mypy-zope` ships with type stubs (`*.pyi` files) for `zope.interface` and`zope.schema` packages. They are enabled automatically as soon as plugin isenabled.## What is not supported?These `zope.interface` features are not supported:* Declaring modules as interface implementers.* Type inference for `zope.schema.List` and `zope.schema.Dict` fields.* Stub files are largely incomplete* Interface compatibility checker will not type-check non-method attributes## Ready to use!Currently, the project is used in production in various substantially largeprojects and considered production-grade, however there still might be subtlebugs around. Suggestions and pull requests are welcomed!</longdescription>
</pkgmetadata>