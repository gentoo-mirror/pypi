<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AwesomeVersion[![codecov](https://codecov.io/gh/ludeeus/awesomeversion/branch/main/graph/badge.svg)](https://codecov.io/gh/ludeeus/awesomeversion)![python version](https://img.shields.io/badge/Python-3.7=&gt;&lt;=3.10-blue.svg)![dependencies](https://img.shields.io/badge/Dependencies-0-blue.svg)[![PyPI](https://img.shields.io/pypi/v/awesomeversion)](https://pypi.org/project/awesomeversion)![Actions](https://github.com/ludeeus/awesomeversion/workflows/Actions/badge.svg?branch=main)_One version package to rule them all, One version package to find them, One version package to bring them all, and in the darkness bind them._Make anything a version object, and compare against a vast section of other version formats.## Installation```bashpython3 -m pip install awesomeversion```## AwesomeVersion classThe AwesomeVersion class takes a version as the first argument, you can also pass in additional kwargs to customize the version object.Argument | Description--- | ---`version` | The version string to parse.`ensure_strategy` | Match the `AwesomeVersion` object against spesific strategies when creating if. If it does not match `AwesomeVersionStrategyException` will be raised`find_first_match` | If True, the version given will be scanned for the first match of the given `ensure_strategy`. Raises `AwesomeVersionStrategyException` If it is not found for any of the given strategies.## Example usageThese are some examples of what you can do, more examples can be found in the `tests` directory.```pythonfrom awesomeversion import AwesomeVersioncurrent = AwesomeVersion(&quot;1.2.2&quot;)upstream = AwesomeVersion(&quot;1.2.3&quot;)print(upstream &gt; current)&gt; True``````pythonfrom awesomeversion import AwesomeVersionversion = AwesomeVersion(&quot;1.2.3b0&quot;)print(version.beta)&gt; True``````pythonfrom awesomeversion import AwesomeVersioncurrent = AwesomeVersion(&quot;2021.1.0&quot;)upstream = AwesomeVersion(&quot;2021.1.0b2&quot;)print(upstream &gt; current)&gt; False``````pythonfrom awesomeversion import AwesomeVersioncurrent = AwesomeVersion(&quot;latest&quot;)upstream = AwesomeVersion(&quot;2021.1.0&quot;)print(upstream &gt; current)&gt; False``````pythonfrom awesomeversion import AwesomeVersioncurrent = AwesomeVersion(&quot;latest&quot;)upstream = AwesomeVersion(&quot;dev&quot;)print(upstream &gt; current)&gt; True``````pythonfrom awesomeversion import AwesomeVersionwith AwesomeVersion(&quot;20.12.0&quot;) as current:    with AwesomeVersion(&quot;20.12.1&quot;) as upstream:        print(upstream &gt; current)&gt; True``````pythonfrom awesomeversion import AwesomeVersionwith AwesomeVersion(&quot;20.12.0&quot;) as current:    print(&quot;2020.12.1&quot; &gt; current)&gt; True``````pythonfrom awesomeversion import AwesomeVersionversion = AwesomeVersion(&quot;2.12.0&quot;)print(version.major)&gt; 2print(version.minor)&gt; 12print(version.patch)&gt; 0```## Contribute**All** contributions are welcome!1. Fork the repository2. Clone the repository locally and open the devcontainer or use GitHub codespaces3. Do your changes4. Lint the files with `make lint`5. Ensure all tests passes with `make test`6. Ensure 100% coverage with `make coverage`7. Commit your work, and push it to GitHub8. Create a PR against the `main` branch</longdescription>
</pkgmetadata>