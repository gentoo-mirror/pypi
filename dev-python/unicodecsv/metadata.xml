<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>unicodecsv==========The unicodecsv is a drop-in replacement for Python 2.7's csv module which supports unicode strings without a hassle.  Supported versions are python 2.7, 3.3, 3.4, 3.5, and pypy 2.4.0.More fully----------Python 2's csv module doesn't easily deal with unicode strings, leading to the dreaded &quot;'ascii' codec can't encode characters in position ...&quot; exception.You can work around it by encoding everything just before calling write (or just after read), but why not add support to the serializer?.. code-block:: pycon   &gt;&gt;&gt; import unicodecsv as csv   &gt;&gt;&gt; from io import BytesIO   &gt;&gt;&gt; f = BytesIO()   &gt;&gt;&gt; w = csv.writer(f, encoding='utf-8')   &gt;&gt;&gt; _ = w.writerow((u'é', u'ñ'))   &gt;&gt;&gt; _ = f.seek(0)   &gt;&gt;&gt; r = csv.reader(f, encoding='utf-8')   &gt;&gt;&gt; next(r) == [u'é', u'ñ']   TrueNote that unicodecsv expects a bytestream, not unicode -- so there's no need to use `codecs.open` or similar wrappers.  Plain `open(..., 'rb')` will do.(Version 0.14.0 dropped support for python 2.6, but 0.14.1 added it back.  See c0b7655248c4249 for the mistaken, breaking change.)</longdescription>
</pkgmetadata>