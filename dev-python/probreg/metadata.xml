<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ![logo](https://raw.githubusercontent.com/neka-nat/probreg/master/images/logo.png)[![Build status](https://github.com/neka-nat/probreg/actions/workflows/build-and-test.yaml/badge.svg)](https://github.com/neka-nat/probreg/actions/workflows/build-and-test.yaml/badge.svg)[![PyPI version](https://badge.fury.io/py/probreg.svg)](https://badge.fury.io/py/probreg)[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](LICENSE)[![Documentation Status](https://readthedocs.org/projects/probreg/badge/?version=latest)](https://probreg.readthedocs.io/en/latest/?badge=latest)[![Downloads](https://pepy.tech/badge/probreg)](https://pepy.tech/project/probreg)Probreg is a library that implements point cloud **reg**istration algorithms with **prob**ablistic model.The point set registration algorithms using stochastic model are more robust than ICP(Iterative Closest Point).This package implements several algorithms using stochastic models and provides a simple interface with [Open3D](http://www.open3d.org/).## Core features* Open3D interface* Rigid and non-rigid transformation## Algorithms* Maximum likelihood when the target or source point cloud is observation data    * [Coherent Point Drift (2010)](https://arxiv.org/pdf/0905.2635.pdf)    * [Extended Coherent Point Drift (2016)](https://ieeexplore.ieee.org/abstract/document/7477719) (add correspondence priors to CPD)    * [FilterReg (CVPR2019)](https://arxiv.org/pdf/1811.10136.pdf)* Variational Bayesian inference    * [Bayesian Coherent Point Drift (2020)](https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8985307)* Distance minimization of two probabilistic distributions    * [GMMReg (2011)](https://ieeexplore.ieee.org/document/5674050)    * [Support Vector Registration (2015)](https://arxiv.org/pdf/1511.04240.pdf)* Hierarchical Stocastic model    * [GMMTree (ECCV2018)](https://arxiv.org/pdf/1807.02587.pdf)### Transformations| type | CPD | SVR, GMMReg | GMMTree | FilterReg | BCPD (experimental) ||------|-----|-------------|---------|-----------|---------------------||Rigid | **Scale + 6D pose** | **6D pose** | **6D pose** | **6D pose** &lt;/br&gt; (Point-to-point,&lt;/br&gt; Point-to-plane,&lt;/br&gt; FPFH-based)| - ||NonRigid | **Affine**, **MCT** | **TPS** | - | **Deformable Kinematic** &lt;/br&gt; (experimental) | **Combined model** &lt;/br&gt; (Rigid + Scale + NonRigid-term)### CUDA supportYou need to install cupy.```pip install cupy```* [Rigid CPD](https://github.com/neka-nat/probreg/blob/master/examples/cpd_rigid_cuda.py)* [Affine CPD](https://github.com/neka-nat/probreg/blob/master/examples/cpd_affine3d_cuda.py)## InstallationYou can install probreg using `pip`.```pip install probreg```Or install probreg from source.```git clone https://github.com/neka-nat/probreg.git --recursivecd probregpip install -e .```## Getting StartedThis is a sample code that reads a PCD file and calls CPD registration.You can easily execute registrations from Open3D point cloud object and draw the results.```pyimport copyimport numpy as npimport open3d as o3from probreg import cpd# load source and target point cloudsource = o3.io.read_point_cloud('bunny.pcd')source.remove_non_finite_points()target = copy.deepcopy(source)# transform target point cloudth = np.deg2rad(30.0)target.transform(np.array([[np.cos(th), -np.sin(th), 0.0, 0.0],                           [np.sin(th), np.cos(th), 0.0, 0.0],                           [0.0, 0.0, 1.0, 0.0],                           [0.0, 0.0, 0.0, 1.0]]))source = source.voxel_down_sample(voxel_size=0.005)target = target.voxel_down_sample(voxel_size=0.005)# compute cpd registrationtf_param, _, _ = cpd.registration_cpd(source, target)result = copy.deepcopy(source)result.points = tf_param.transform(result.points)# draw resultsource.paint_uniform_color([1, 0, 0])target.paint_uniform_color([0, 1, 0])result.paint_uniform_color([0, 0, 1])o3.visualization.draw_geometries([source, target, result])```## Resources* [Documentation](https://probreg.readthedocs.io/en/latest/?badge=latest)## Results### Compare algorithms| CPD | SVR | GMMTree | FilterReg ||-----|-----|---------|-----------|| &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/cpd_rigid.gif&quot; width=&quot;640&quot;&gt; |  &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/svr_rigid.gif&quot; width=&quot;640&quot;&gt; | &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/gmmtree_rigid.gif&quot; width=&quot;640&quot;&gt; | &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/filterreg_rigid.gif&quot; width=&quot;640&quot;&gt; |### Noise test| ICP(Open3D) | CPD | FilterReg ||-------------|-----|-----------|| &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/icp_noise.gif&quot; width=&quot;640&quot;&gt; |  &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/cpd_noise.gif&quot; width=&quot;640&quot;&gt; | &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/filterreg_noise.gif&quot; width=&quot;640&quot;&gt; |### Non rigid registration| CPD | SVR | Filterreg | BCPD ||-----|-----|-----------|------|| &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/cpd_nonrigid.gif&quot; width=&quot;640&quot;&gt; | &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/svr_nonrigid.gif&quot; width=&quot;640&quot;&gt; | &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/filterreg_deformable.gif&quot; width=&quot;640&quot;&gt; | &lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/bcpd_nonrigid.gif&quot; width=&quot;640&quot;&gt; |### Feature based registration| FPFH FilterReg ||----------------||&lt;img src=&quot;https://raw.githubusercontent.com/neka-nat/probreg/master/images/filterreg_fpfh.gif&quot; width=&quot;640&quot;&gt; |### Time measurementExecute an example script for measuring time.```OMP_NUM_THREADS=1 python time_measurement.py# Results [s]# ICP(Open3D):  0.02030642901081592# CPD:  3.6435861150093842# SVR:  0.5795929960149806# GMMTree:  0.34479290700983256# FilterReg:  0.039795294986106455```## Citing```@software{probreg,    author = {{Kenta-Tanaka et al.}},    title = {probreg},    url = {https://probreg.readthedocs.io/en/latest/},    version = {0.1.6},    date = {2019-9-29},}```</longdescription>
</pkgmetadata>