<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://travis-ci.org/cbjuan/jhub_remote_login.svg?branch=master    :target: https://travis-ci.org/cbjuan/jhub_remote_login=========================Jupyterhub Authenticators=========================Authenticate to Jupyterhub using an authenticating proxy that can setthe Remote-User header.Also supports for passing additional information to the jupyter user. This includes alist of user defined /data headers.-----------------------------------------Architecture and Security Recommendations-----------------------------------------This type of authentication relies on an HTTP header, and a maliciousclient could spoof the REMOTE_USER header.  The recommended architecture for thistype of authentication requires that an authenticating proxy be placed in frontof your Jupyterhub.  Your Jupyerhub should **only** be accessible from the proxyand **never** directly accessible by a client.  This type of access is typically enforced with network access controls.  E.g. ina simple case, the host on which the Jupyterhub service accepts incoming requestshas its host based firewall configured to only accept incoming connections fromthe proxy host.Further, the authenticating proxy should make sure it removes any REMOTE_USERheaders from incoming requests and only applies the header to proxied requeststhat have been properly authenticated.------------Installation------------This package can be installed with `pip` either from a local git repository or from PyPi.Installation from local git repository::    cd jhub_remote_login    pip install .Installation from PyPi::    pip install jhub-remote-loginAlternately, you can add the local project folder must be on your PYTHONPATH.-------------Configuration-------------You should edit your `jupyterhub_config.py` config file to set theauthenticator class::    c.JupyterHub.authenticator_class = 'jhub_remote_login.RemoteUserAuthenticator'You should be able to start jupyterhub.  The &quot;/login&quot; resourcewill look for the authenticated user name in the HTTP header &quot;Remote-User&quot;.If found, and not blank, you will be logged in as that user.Alternatively, you can use `RemoteUserLocalAuthenticator`::    c.JupyterHub.authenticator_class = 'jhub_remote_login.RemoteUserLocalAuthenticator'This provides the same authentication functionality but is derived from`LocalAuthenticator` and therefore provides features such as the abilityto add local accounts through the admin interface if configured to do so.--------------------Dummy Authentication--------------------Provides an option for testing JupyterHub authentication with a dummy authenticatorthat can have a global preset password for any account::    c.JupyterHub.authenticator_class = 'jhub_remote_login.DummyAuthenticator'    c.DummyAuthenticator.password = 'password'Note! Don't use in production.-------------------------------------------------------------Remote User Authentication extended with user-defined headers-------------------------------------------------------------Provides the capability to supply the jupyterhub user with additional state informationvia the /data path. This adds two base request paths to the jupyterhub web application::'/login' -&gt; requires a non empty Remote-User header'/data' -&gt; requires both an authenticated request and a valid configured headerBefore information can be passed to the user via the '/data' path, a list of validheaders is required. These preset valid headers are then upon a POST request to the'/data' URl appended to the current authenticated jupyterhub user data dictionary. I.e.user.data[Header] = HeaderValueThe extended authenticator can be activated by setting the following option in thejupyterhub config file::    c.JupyterHub.authenticator_class = 'jhub_remote_login.DataRemoteUserAuthenticator'    # Making 'State' a valid header to pass to /data    c.DataRemoteUserAuthenticator.data_headers = ['State']Beyond providing the custom header possibility, the authenticator also by defaultencodes the Remote-User header with 'b32encode'. The authenticator therefore also providesthe possibility of storing the actual value for debugging purposes in the user.real_namevariable via the jupyterhub auth_state mechanism of passing information tothe spawner as noted at `Authenticators &lt;https://jupyterhub.readthedocs.io/en/stable/reference/authenticators.html&gt;`_.</longdescription>
</pkgmetadata>