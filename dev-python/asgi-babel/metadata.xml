<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>ASGI-Babel###########.. _description:**asgi-babel** -- Adds internationalization (i18n) support to ASGI applications (Asyncio_ / Trio_ / Curio_).. _badges:.. image:: https://github.com/klen/asgi-babel/workflows/tests/badge.svg    :target: https://github.com/klen/asgi-babel/actions    :alt: Tests Status.. image:: https://img.shields.io/pypi/v/asgi-babel    :target: https://pypi.org/project/asgi-babel/    :alt: PYPI Version.. image:: https://img.shields.io/pypi/pyversions/asgi-babel    :target: https://pypi.org/project/asgi-babel/    :alt: Python Versions.. _contents:.. contents::.. _requirements:Requirements=============- python &gt;= 3.8.. _installation:Installation=============**asgi-babel** should be installed using pip: ::    pip install asgi-babelUsage=====Common ASGI applications:.. code:: python    from asgi_babel import BabelMiddleware, current_locale, gettext    async def my_app(scope, receive, send):        &quot;&quot;&quot;Get a current locale.&quot;&quot;&quot;        locale = current_locale.get().language.encode()        hello_world = gettext('Hello World!').encode()        await send({&quot;type&quot;: &quot;http.response.start&quot;, &quot;status&quot;: 200})        await send({&quot;type&quot;: &quot;http.response.body&quot;, &quot;body&quot;: b&quot;Current locale is %s\n&quot; % locale})        await send({&quot;type&quot;: &quot;http.response.body&quot;, &quot;body&quot;: hello_world})    app = BabelMiddleware(my_app, locales_dirs=['tests/locales'])    # http GET /    #    # Current_locale is en    # Hello World!    # http GET / &quot;accept-language: ft-CH, fr;q-0.9&quot;    #    # Current_locale is fr    # Bonjour le monde!As `ASGI-Tools`_ Internal middleware.. code:: python    from asgi_tools import App    from asgi_babel import BabelMiddleware, gettext    app = App()    app.middleware(BabelMiddleware.setup(locales_dirs=['tests/locales']))    @app.route('/')    async def index(request):        return gettext('Hello World!')    @app.route('/locale')    async def locale(request):        return current_locale.get().languageUsage with Curio async library------------------------------The `asgi-babel` uses context variable to set current locale.  To enable thecontext variables with curio you have to run Curio_ with ``contextvars``support:.. code-block:: python   from curio.task import ContextTask   curio.run(main, taskcls=ContextTask)Options========The middleware's options with default values:.. code:: python   from asgi_babel import BabelMiddleware   app = BabelMiddleware(        # Your ASGI application        app,        # Default locale        default_locale='en',        # A path to find translations        locales_dirs=['locales']        # A function with type: typing.Callable[[asgi_tools.Request], t.Awaitable[t.Optional[str]]]        # which takes a request and default locale and return current locale        locale_selector=asgi_babel.select_locale_by_request,   )How to extract &amp; compile locales:=================================http://babel.pocoo.org/en/latest/messages.htmlhttp://babel.pocoo.org/en/latest/cmdline.html.. _bugtracker:Bug tracker===========If you have any suggestions, bug reports orannoyances please report them to the issue trackerat https://github.com/klen/asgi-babel/issues.. _contributing:Contributing============Development of the project happens at: https://github.com/klen/asgi-babel.. _license:License========Licensed under a `MIT license`_... _links:.. _ASGI-Tools: https://github.com/klen/asgi-tools.. _Asyncio: https://docs.python.org/3/library/asyncio.html.. _Curio: https://curio.readthedocs.io/en/latest/.. _MIT license: http://opensource.org/licenses/MIT.. _Trio: https://trio.readthedocs.io/en/stable/.. _klen: https://github.com/klen</longdescription>
</pkgmetadata>