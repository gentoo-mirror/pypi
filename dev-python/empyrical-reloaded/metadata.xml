<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://empyrical.ml4trading.io&quot;&gt;&lt;img src=&quot;https://i.imgur.com/PbZNeud.png&quot; width=&quot;35%&quot;&gt;&lt;/a&gt;&lt;/p&gt;![PyPI](https://img.shields.io/pypi/v/empyrical-reloaded)![Conda (channel only)](https://img.shields.io/conda/vn/ml4t/empyrical-reloaded)[![PyPI Wheels](https://github.com/stefan-jansen/empyrical-reloaded/actions/workflows/build_wheels.yml/badge.svg)](https://github.com/stefan-jansen/empyrical-reloaded/actions/workflows/build_wheels.yml)[![Conda packages](https://github.com/stefan-jansen/empyrical-reloaded/actions/workflows/conda_package.yml/badge.svg)](https://github.com/stefan-jansen/empyrical-reloaded/actions/workflows/conda_package.yml)[![CI Tests](https://github.com/stefan-jansen/empyrical-reloaded/actions/workflows/unit_tests.yml/badge.svg)](https://github.com/stefan-jansen/empyrical-reloaded/actions/workflows/unit_tests.yml)Common financial return and risk metrics in Python.## Installationempyrical requires Python 3.7+. You can install it using `pip`:```bashpip install empyrical-reloaded```or `conda`:```bashconda install empyrical-reloaded -c ml4t -c ranaroussi```empyrical requires and installs the following packages while executing the above commands:- numpy&gt;=1.9.2- pandas&gt;=1.0.0- scipy&gt;=0.15.1- pandas-datareader&gt;=0.4- yfinance&gt;=0.1.59Empyrical uses [yfinance](https://github.com/ranaroussi/yfinance) to download price data from [Yahoo! Finance](https://finance.yahoo.com/) and [pandas-datareader](https://pandas-datareader.readthedocs.io/en/latest/) to access [Fama-French](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html) risk factors.## Usage### Simple StatisticsEmpyrical computes basic metrics from returns and volatility to alpha and beta, Value at Risk, and Shorpe or Sortino ratios.```pythonimport numpy as npfrom empyrical import max_drawdown, alpha_betareturns = np.array([.01, .02, .03, -.4, -.06, -.02])benchmark_returns = np.array([.02, .02, .03, -.35, -.05, -.01])# calculate the max drawdownmax_drawdown(returns)# calculate alpha and betaalpha, beta = alpha_beta(returns, benchmark_returns)```### Rolling MeasuresEmpyrical also aggregates returna nd risk metrics for rolling windows:```pythonimport numpy as npfrom empyrical import roll_max_drawdownreturns = np.array([.01, .02, .03, -.4, -.06, -.02])# calculate the rolling max drawdownroll_max_drawdown(returns, window=3)```### Pandas SupportEmpyrical also works with both [NumPy](https://numpy.org/) arrays and [Pandas](https://pandas.pydata.org/) data structures:```pythonimport pandas as pdfrom empyrical import roll_up_capture, capturereturns = pd.Series([.01, .02, .03, -.4, -.06, -.02])factor_returns = pd.Series([.02, .01, .03, -.01, -.02, .02])# calculate a capture ratiocapture(returns, factor_returns)-0.147387712263491```### Fama-French Risk FactorsEmpyrical downloads Fama-French risk factors from 1970 onward:```pythonimport empyrical as emprisk_factors = emp.utils.get_fama_french()risk_factors.head().append(risk_factors.tail())                           Mkt-RF     SMB     HML       RF     MomDate1970-01-02 00:00:00+00:00  0.0118  0.0131  0.0100  0.00029 -0.03411970-01-05 00:00:00+00:00  0.0059  0.0066  0.0072  0.00029 -0.01521970-01-06 00:00:00+00:00 -0.0074  0.0010  0.0020  0.00029  0.00401970-01-07 00:00:00+00:00 -0.0015  0.0039 -0.0032  0.00029  0.00111970-01-08 00:00:00+00:00  0.0004  0.0018 -0.0015  0.00029  0.00332021-02-22 00:00:00+00:00 -0.0112 -0.0009  0.0314  0.00000 -0.03252021-02-23 00:00:00+00:00 -0.0015 -0.0128  0.0090  0.00000 -0.01852021-02-24 00:00:00+00:00  0.0115  0.0120  0.0134  0.00000 -0.00072021-02-25 00:00:00+00:00 -0.0273 -0.0112  0.0087  0.00000 -0.01952021-02-26 00:00:00+00:00 -0.0028  0.0072 -0.0156  0.00000  0.0195```### Asset Prices and Benchmark ReturnsEmpyrical [yfinance](https://github.com/ranaroussi/yfinance) to download price data from [Yahoo! Finance](https://finance.yahoo.com/). To obtain the S&amp;P returns since 1950, use:```pythonimport empyrical as empsymbol = '^GSPC'returns = emp.utils.get_symbol_returns_from_yahoo(symbol,                                                  start='1950-01-01')import seaborn as sns  # requires separate installationimport matplotlib.pyplot as plt  # requires separate installationfig, axes = plt.subplots(ncols=2, figsize=(14, 5))with sns.axes_style('whitegrid'):    returns.plot(ax=axes[0], rot=0, title='Time Series', legend=False)    sns.histplot(returns, ax=axes[1], legend=False)axes[1].set_title('Histogram')sns.despine()plt.tight_layout()plt.suptitle('Daily S&amp;P 500 Returns')```&lt;a href=&quot;https://empyrical.ml4trading.io&quot;&gt;&lt;img src=&quot;https://i.imgur.com/0PSxfSI.png&quot; width=&quot;100%&quot;&gt;&lt;/a&gt;### DocumentationSee the [documentation](https://empyrical.ml4trading.io) for details on the API.## SupportPlease [open an issue](https://github.com/stefan-jansen/empyrical-reloaded/issues/new) for support.## ContributingPlease contribute using [Github Flow](https://guides.github.com/introduction/flow/). Create a branch, add commits, and [open a pull request](https://github.com/stefan-jansen/empyrical-reloaded/compare/).## Testing- install requirements    - &quot;pytest&gt;=6.2.0&quot;,```bashpytest tests```</longdescription>
</pkgmetadata>