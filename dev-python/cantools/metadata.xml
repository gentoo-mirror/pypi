<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>|appveyor|_|coverage|_|nala|_About=====CAN BUS tools in Python 3.- `DBC`_, `KCD`_, SYM, ARXML 3&amp;4 and CDD file parsing.- CAN message encoding and decoding.- Simple and extended signal multiplexing.- Diagnostic DID encoding and decoding.- ``candump`` output decoder.- Node `tester`_.- `C` source code generator.- CAN bus monitor.- Graphical plots of signals.Project homepage: https://github.com/eerimoq/cantoolsDocumentation: https://cantools.readthedocs.ioInstallation============.. code-block:: bash    python3 -m pip install cantoolsExample usage=============Scripting---------The example starts by parsing a `small DBC-file`_ and printing itsmessages and signals... code-block:: python   &gt;&gt;&gt; import cantools   &gt;&gt;&gt; from pprint import pprint   &gt;&gt;&gt; db = cantools.database.load_file('tests/files/dbc/motohawk.dbc')   &gt;&gt;&gt; db.messages   [message('ExampleMessage', 0x1f0, False, 8, 'Example message used as template in MotoHawk models.')]   &gt;&gt;&gt; example_message = db.get_message_by_name('ExampleMessage')   &gt;&gt;&gt; pprint(example_message.signals)   [signal('Enable', 7, 1, 'big_endian', False, 1.0, 0, 0.0, 0.0, '-', False, None, {0: 'Disabled', 1: 'Enabled'}, None),    signal('AverageRadius', 6, 6, 'big_endian', False, 0.1, 0, 0.0, 5.0, 'm', False, None, None, ''),    signal('Temperature', 0, 12, 'big_endian', True, 0.01, 250, 229.53, 270.47, 'degK', False, None, None, None)]The example continues `encoding`_ a message and sending it on a CANbus using the `python-can`_ package... code-block:: python   &gt;&gt;&gt; import can   &gt;&gt;&gt; can_bus = can.interface.Bus('vcan0', bustype='socketcan')   &gt;&gt;&gt; data = example_message.encode({'Temperature': 250.1, 'AverageRadius': 3.2, 'Enable': 1})   &gt;&gt;&gt; message = can.Message(arbitration_id=example_message.frame_id, data=data)   &gt;&gt;&gt; can_bus.send(message)Alternatively, a message can be encoded using the `encode_message()`_method on the database object.The last part of the example receives and `decodes`_ a CAN message... code-block:: python   &gt;&gt;&gt; message = can_bus.recv()   &gt;&gt;&gt; db.decode_message(message.arbitration_id, message.data)   {'AverageRadius': 3.2, 'Enable': 'Enabled', 'Temperature': 250.09}See `examples`_ for additional examples.Command line tool-----------------The decode subcommand^^^^^^^^^^^^^^^^^^^^^Decode CAN frames captured with the Linux program ``candump``... code-block:: text   $ candump vcan0 | python3 -m cantools decode tests/files/dbc/motohawk.dbc     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::   ExampleMessage(       Enable: 'Enabled' -,       AverageRadius: 0.0 m,       Temperature: 255.92 degK   )     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::   ExampleMessage(       Enable: 'Enabled' -,       AverageRadius: 0.0 m,       Temperature: 255.92 degK   )     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::   ExampleMessage(       Enable: 'Enabled' -,       AverageRadius: 0.0 m,       Temperature: 255.92 degK   )Alternatively, the decoded message can be printed on a single line:.. code-block:: text   $ candump vcan0 | python3 -m cantools decode --single-line tests/files/dbc/motohawk.dbc     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)The plot subcommand^^^^^^^^^^^^^^^^^^^The plot subcommand is similar to the decode subcommand but messages are visualized using `matplotlib`_ instead of being printed to stdout... code-block:: bash    $ candump -l vcan0    $ cat candump-2021-01-04_180521.log    (1609779922.655421) vcan0 00000343#B204B9049C049C04    (1609779922.655735) vcan0 0000024A#120527052E051905    (1609779923.657524) vcan0 00000343#C404C404CB04C404    (1609779923.658086) vcan0 0000024A#8B058B058B059205    (1609779924.659912) vcan0 00000343#5C04790479045504    (1609779924.660471) vcan0 0000024A#44064B0659064406    (1609779925.662277) vcan0 00000343#15040704F203F203    (1609779925.662837) vcan0 0000024A#8B069906A706A706    (1609779926.664191) vcan0 00000343#BC03B503A703BC03    (1609779926.664751) vcan0 0000024A#A006A706C406C406    $ cat candump-2021-01-04_180521.log | python3 -m cantools plot tests/files/dbc/abs.dbc.. image:: https://github.com/cantools/cantools/raw/master/docs/plot-1.pngIf you don't want to show all signals you can select the desired signals with command line arguments.A ``*`` can stand for any number of any character, a ``?`` for exactly one arbitrary character.Signals separated by a ``-`` are displayed in separate subplots.Optionally a format can be specified after a signal, separated by a colon... code-block:: bash    $ cat candump-2021-01-04_180521.log | python3 -m cantools plot tests/files/dbc/abs.dbc '*33.*fl:-&lt;' '*33.*fr:-&gt;' - '*33.*rl:-&lt;' '*33.*rr:-&gt;'.. image:: https://github.com/cantools/cantools/raw/master/docs/plot-2-subplots.pngSignals with a different range of values can be displayed in the same subplot on different vertical axes by separating them with a comma... code-block:: bash   $ cat candump-2021-01-04_180521.log | cantools plot --auto-color tests/files/dbc/abs.dbc -- \      --ylabel 'Bremse 33' '*_33.*fl*:-&lt;' '*_33.*fr*:&gt;' '*_33.*rl*:3' '*_33.*rr*:4' , \      --ylabel 'Bremse 2' '*_2.*fl*:-&lt;' '*_2.*fr*:&gt;' '*_2.*rl*:3' '*_2.*rr*:4'.. image:: https://github.com/cantools/cantools/raw/master/docs/plot-2-axes.pngMatplotlib comes with different preinstalled styles that you can use:.. code-block:: bash   $ cat candump-2021-01-04_180521.log | cantools plot tests/files/dbc/abs.dbc --style seaborn.. image:: https://github.com/cantools/cantools/raw/master/docs/plot-seaborn.pngYou can try all available styles with.. code-block:: bash   $ cantools plot --list-styles . | sed -n '/^- /s/^- //p' | while IFS= read -r style; do         cat candump-2021-01-04_180521.log | cantools plot tests/files/dbc/abs.dbc --style &quot;$style&quot; --title &quot;--style '$style'&quot;     doneFor more information see.. code-block:: bash    $ python3 -m cantools plot --helpNote that by default matplotlib is not installed with cantools. But it can be by specifying an extraat installation:.. code-block:: bash    $ python3 -m pip install cantools[plot]The dump subcommand^^^^^^^^^^^^^^^^^^^Dump given database in a human readable format:.. code-block:: text   $ python3 -m cantools dump tests/files/dbc/motohawk.dbc   ================================= Messages =================================     ------------------------------------------------------------------------     Name:       ExampleMessage     Id:         0x1f0     Length:     8 bytes     Cycle time: - ms     Senders:    PCM1     Layout:                             Bit                7   6   5   4   3   2   1   0              +---+---+---+---+---+---+---+---+            0 |&lt;-x|&lt;---------------------x|&lt;--|              +---+---+---+---+---+---+---+---+                |                       +-- AverageRadius                +-- Enable              +---+---+---+---+---+---+---+---+            1 |-------------------------------|              +---+---+---+---+---+---+---+---+            2 |----------x|   |   |   |   |   |        B     +---+---+---+---+---+---+---+---+        y               +-- Temperature        t     +---+---+---+---+---+---+---+---+        e   3 |   |   |   |   |   |   |   |   |              +---+---+---+---+---+---+---+---+            4 |   |   |   |   |   |   |   |   |              +---+---+---+---+---+---+---+---+            5 |   |   |   |   |   |   |   |   |              +---+---+---+---+---+---+---+---+            6 |   |   |   |   |   |   |   |   |              +---+---+---+---+---+---+---+---+            7 |   |   |   |   |   |   |   |   |              +---+---+---+---+---+---+---+---+     Signal tree:       -- {root}          +-- Enable          +-- AverageRadius          +-- Temperature     Signal choices:       Enable           0 Disabled           1 Enabled     ------------------------------------------------------------------------The list subcommand^^^^^^^^^^^^^^^^^^^Print all information of a given database in a human readableformat. This is very similar to the &quot;dump&quot; subcommand, but the outputis less pretty, slightly more comprehensive and easier to parse byshell scripts:.. code-block:: bash    $ python3 -m cantools list -a tests/files/dbc/motohawk.dbc    ExampleMessage:      Comment[None]: Example message used as template in MotoHawk models.      Frame ID: 0x1f0 (496)      Size: 8 bytes      Is extended frame: False      Signals:        Enable:          Type: Integer          Start bit: 7          Length: 1 bits          Unit: -          Is signed: False          Named values:            0: DisabledThe generate C source subcommand^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Generate `C` source code from given database.The generated code contains:- Message `structs`_.- Message `pack`_ and `unpack`_ functions.- Signal `encode`_ and `decode`_ functions.- Frame id, length, type, cycle time and signal choices `defines`_.Known limitations:- The maximum signal size is 64 bits, which in practice is never  exceeded.Below is an example of how to generate C source code from adatabase. The database is ``tests/files/dbc/motohawk.dbc``... code-block:: text   $ python3 -m cantools generate_c_source tests/files/dbc/motohawk.dbc   Successfully generated motohawk.h and motohawk.c.See `motohawk.h`_ and `motohawk.c`_ for the contents of the generatedfiles.In this example we use ``--use-float`` so floating point numbers in the generatedcode are single precision (``float``) instead of double precision (``double``)... code-block:: text   $ python3 -m cantools generate_c_source --use-float tests/files/dbc/motohawk.dbc   Successfully generated motohawk.h and motohawk.c.In the next example we use ``--database-name`` to set a customnamespace for all generated types, defines and functions. The outputfile names are also changed by this option... code-block:: text   $ python3 -m cantools generate_c_source --database-name my_database_name tests/files/dbc/motohawk.dbc   Successfully generated my_database_name.h and my_database_name.c.See `my_database_name.h`_ and `my_database_name.c`_ for the contentsof the generated files.In the next example we use ``--no-floating-point-numbers`` to generatecode without floating point types, i.e. ``float`` and ``double``... code-block:: text   $ python3 -m cantools generate_c_source --no-floating-point-numbers tests/files/dbc/motohawk.dbc   Successfully generated motohawk.h and motohawk.c.See `motohawk_no_floating_point_numbers.h`_ and`motohawk_no_floating_point_numbers.c`_ for the contents of thegenerated files.In the last example ``--node`` is used to generatemessage pack functions only for messages sent by the specified node and unpackfunctions only for messages with its signal receivers belonging to that node. .. code-block:: text   $ cantools generate_c_source tests/files/dbc/motohawk.dbc --node PCM1   Successfully generated motohawk.h and motohawk.c.See `motohawk_sender_node.h`_ and`motohawk_sender_node.c`_ for the contents of thegenerated files.Other C code generators:- http://www.coderdbc.com- https://github.com/howerj/dbcc- https://github.com/lonkamikaze/hsk-libs/blob/master/scripts/dbc2c.awk- https://sourceforge.net/projects/comframe/The monitor subcommand^^^^^^^^^^^^^^^^^^^^^^Monitor CAN bus traffic in a text based user interface... code-block:: text   $ python3 -m cantools monitor tests/files/dbc/motohawk.dbc.. image:: https://github.com/cantools/cantools/raw/master/docs/monitor.pngThe menu at the bottom of the monitor shows the available commands.- Quit: Quit the monitor. Ctrl-C can be used as well.- Filter: Only display messages matching given regular  expression. Press &lt;Enter&gt; to return to the menu from the filter  input line.- Play/Pause: Toggle between playing and paused (or running and freezed).- Reset: Reset the monitor to its initial state.Contributing============#. Fork the repository.#. Install prerequisites.   .. code-block:: text      python3 -m pip install -e .[dev]#. Implement the new feature or bug fix.#. Implement test case(s) to ensure that future changes do not break   legacy.#. Run the linters   .. code-block:: text      ruff check cantools      mypy cantools#. Run the tests.   .. code-block:: text      tox -e py#. Create a pull request... |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/eerimoq/cantools?svg=true.. _appveyor: https://ci.appveyor.com/project/eerimoq/cantools/branch/master.. |coverage| image:: https://coveralls.io/repos/github/eerimoq/cantools/badge.svg?branch=master.. _coverage: https://coveralls.io/github/eerimoq/cantools.. |nala| image:: https://img.shields.io/badge/nala-test-blue.svg.. _nala: https://github.com/eerimoq/nala.. _small DBC-file: https://github.com/eerimoq/cantools/blob/master/tests/files/dbc/motohawk.dbc.. _motohawk.dbc: https://github.com/eerimoq/cantools/blob/master/tests/files/dbc/motohawk.dbc.. _python-can: https://python-can.readthedocs.io/en/master/.. _DBC: http://www.socialledge.com/sjsu/index.php?title=DBC_Format.. _KCD: https://github.com/julietkilo/kcd.. _tester: http://cantools.readthedocs.io/en/latest/#cantools.tester.Tester.. _encoding: http://cantools.readthedocs.io/en/latest/#cantools.database.can.Message.encode.. _encode_message(): http://cantools.readthedocs.io/en/latest/#cantools.database.can.Database.encode_message.. _decodes: http://cantools.readthedocs.io/en/latest/#cantools.database.can.Database.decode_message.. _examples: https://github.com/eerimoq/cantools/blob/master/examples.. _structs: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L58.. _pack: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L88.. _unpack: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L102.. _encode: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L116.. _decode: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L125.. _defines: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L42.. _motohawk.h: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h.. _motohawk.c: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.c.. _my_database_name.h: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/my_database_name.h.. _my_database_name.c: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/my_database_name.c.. _motohawk_no_floating_point_numbers.h: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk_no_floating_point_numbers.h.. _motohawk_no_floating_point_numbers.c: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk_no_floating_point_numbers.c.. _motohawk_sender_node.h: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk_sender_node.h.. _motohawk_sender_node.c: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk_sender_node.c.. _matplotlib: https://matplotlib.org/</longdescription>
</pkgmetadata>