<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># isoduration: Operations with ISO 8601 durations.[![PyPI Package](https://img.shields.io/pypi/v/isoduration?style=flat-square)](https://pypi.org/project/isoduration/)## What is this.ISO 8601 is most commonly known as a way to exchange datetimes in textual format. Alesser known aspect of the standard is the representation of durations. They have ashape similar to this:```P3Y6M4DT12H30M5S```This string represents a duration of 3 years, 6 months, 4 days, 12 hours, 30 minutes,and 5 seconds.The state of the art of ISO 8601 duration handling in Python is more or less limited towhat's offered by [`isodate`](https://pypi.org/project/isodate/). What we are trying toachieve here is to address the shortcomings of `isodate` (as described in their own[_Limitations_](https://github.com/gweis/isodate/#limitations) section), and a few ofour own annoyances with their interface, such as the lack of uniformity in theirhandling of types, and the use of regular expressions for parsing.## How to use it.This package revolves around the [`Duration`](src/isoduration/types.py) type.Given a ISO duration string we can produce such a type by using the `parse_duration()`function:```py&gt;&gt;&gt; from isoduration import parse_duration&gt;&gt;&gt; duration = parse_duration(&quot;P3Y6M4DT12H30M5S&quot;)&gt;&gt;&gt; duration.dateDateDuration(years=Decimal('3'), months=Decimal('6'), days=Decimal('4'), weeks=Decimal('0'))&gt;&gt;&gt; duration.timeTimeDuration(hours=Decimal('12'), minutes=Decimal('30'), seconds=Decimal('5'))```The `date` and `time` portions of the parsed duration are just regular[dataclasses](https://docs.python.org/3/library/dataclasses.html), so their members canbe accessed in a non-surprising way.Besides just parsing them, a number of additional operations are available:- Durations can be compared and negated:  ```py  &gt;&gt;&gt; parse_duration(&quot;P3Y4D&quot;) == parse_duration(&quot;P3Y4DT0H&quot;)  True  &gt;&gt;&gt; -parse_duration(&quot;P3Y4D&quot;)  Duration(DateDuration(years=Decimal('-3'), months=Decimal('0'), days=Decimal('-4'), weeks=Decimal('0')), TimeDuration(hours=Decimal('0'), minutes=Decimal('0'), seconds=Decimal('0')))  ```- Durations can be added to, or subtracted from, Python datetimes:  ```py  &gt;&gt;&gt; from datetime import datetime  &gt;&gt;&gt; datetime(2020, 3, 15) + parse_duration(&quot;P2Y&quot;)  datetime.datetime(2022, 3, 15, 0, 0)  &gt;&gt;&gt; datetime(2020, 3, 15) - parse_duration(&quot;P33Y1M4D&quot;)  datetime.datetime(1987, 2, 11, 0, 0)  ```- Durations are hashable, so they can be used as dictionary keys or as part of sets.- Durations can be formatted back to a ISO 8601-compliant duration string:  ```py  &gt;&gt;&gt; from isoduration import parse_duration, format_duration  &gt;&gt;&gt; format_duration(parse_duration(&quot;P11YT2H&quot;))  'P11YT2H'  &gt;&gt;&gt; str(parse_duration(&quot;P11YT2H&quot;))  'P11YT2H'  ```## How to improve it.These steps, in this order, should land you in a development environment:```shgit clone git@github.com:bolsote/isoduration.gitcd isoduration/python -m venv ve. ve/bin/activatepip install -U pippip install -e .pip install -r requirements/dev.txt```Adapt to your own likings and/or needs.Testing is driven by [tox](https://tox.readthedocs.io). The output of `tox -l` and acareful read of [tox.ini](tox.ini) should get you there.## FAQs.### How come `P1Y != P365D`?Some years have 366 days. If it's not always the same, then it's not the same.### Why do you create your own types, instead of somewhat shoehorning a `timedelta`?`timedelta` cannot represent certain durations, such as those involving years or months.Since it cannot represent all possible durations without dangerous arithmetic, then itmust not be the right type.### Why don't you use regular expressions to parse duration strings?[Regular expressions should only be used to parse regular languages.](https://stackoverflow.com/a/1732454)### Why is parsing the inverse of formatting, but the converse is not true?Because this wonderful representation is not unique.### Why do you support `&lt;insert here a weird case&gt;`?Probably because the standard made me to.### Why do you not support `&lt;insert here a weird case&gt;`?Probably because the standard doesn't allow me to.### Why is it not possible to subtract a datetime from a duration?I'm confused.### Why should I use this over some other thing?You shouldn't do what people on the Internet tell you to do.### Why are ISO standards so strange?Yes.## References.- [XML Schema Part 2: Datatypes, Appendix D](https://www.w3.org/TR/xmlschema-2/#isoformats):  This excitingly named document contains more details about ISO 8601 than any human  should be allowed to understand.- [`isodate`](https://pypi.org/project/isodate/): The original implementation of ISO  durations in Python. Worth a look. But ours is cooler.</longdescription>
</pkgmetadata>