<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bloomfilter-py![](https://img.shields.io/pypi/v/bloomfilter-py.svg)![](https://img.shields.io/pypi/pyversions/bloomfilter-py.svg)[![codecov](https://codecov.io/gh/OldPanda/bloomfilter-py/branch/master/graph/badge.svg?token=RBX1JK7P7O)](https://codecov.io/gh/OldPanda/bloomfilter-py)[![Downloads](https://pepy.tech/badge/bloomfilter-py)](https://pepy.tech/project/bloomfilter-py)## OverviewYet another Bloomfilter implementation in Python, compatible with Java's Guava library.I was looking for a Python library which is capable of reading what Bloomfilter of Java's Guava library serializes and is also able to output byte array which is recognizable by Java. But unfortunately failed. Hence I developed this library by borrowing how Guava implements Bloomfilter serialization/deserialization a lot to deal with Bloomfilters on both Python and Java sides.As for Bloomfilter usage in Java world, please refer to [this post](https://www.baeldung.com/guava-bloom-filter).Here's a brief [introduction](https://en.wikipedia.org/wiki/Bloom_filter) to Bloomfilter.## Requirements* Python 3.7+This library is not tested under Python 3.6 and lower versions.## Install```pip install bloomfilter-py```## Usage Examples### Basic Usage```Python&gt;&gt;&gt; from bloomfilter import BloomFilter&gt;&gt;&gt; bloom_filter = BloomFilter(expected_insertions=500, err_rate=0.01)&gt;&gt;&gt; for i in range(100):...     bloom_filter.put(i)...&gt;&gt;&gt; 1 in bloom_filterTrue&gt;&gt;&gt; 100 in bloom_filterFalse&gt;&gt;&gt;```### Serialize BloomfilterYou can easily serialize `BloomFilter` instance to a byte array```Python&gt;&gt;&gt; dumps = bloom_filter.dumps()&gt;&gt;&gt; with open(&quot;dumps.out&quot;, &quot;wb&quot;) as f:...     f.write(dumps)...&gt;&gt;&gt;```or to a hex string```Python&gt;&gt;&gt; hex_str = bloom_filter.dumps_to_hex()```or to a base64 encoded bytes```Pythonbase64_bytes = bloom_filter.dumps_to_base64()```### Deserialize BloomfilterAnd you can easily initialize a `BloomFilter` instance from a byte array```Python&gt;&gt;&gt; with open(&quot;dumps.out&quot;, &quot;rb&quot;) as f:...     bf = BloomFilter.loads(f.read())...&gt;&gt;&gt; 1 in bfTrue&gt;&gt;&gt; 100 in bfFalse&gt;&gt;&gt;```or from a hex string```Python&gt;&gt;&gt; bf = BloomFilter.loads_from_hex(hex_str)&gt;&gt;&gt; 1 in bfTrue&gt;&gt;&gt; 100 in bfFalse```or from a base64 encoded bytes```Python&gt;&gt;&gt; bf = BloomFilter.loads_from_base64(base64_bytes)&gt;&gt;&gt; 100 in bfFalse&gt;&gt;&gt; 200 in bfFalse&gt;&gt;&gt; 1 in bfTrue&gt;&gt;&gt; 99 in bfTrue```</longdescription>
</pkgmetadata>