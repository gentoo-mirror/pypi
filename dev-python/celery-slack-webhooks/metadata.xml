<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>celery-slack============|travis| |rtd| |codecov| |pypi| |pyversions|.. |travis| image:: https://img.shields.io/travis/crflynn/celery-slack.svg    :target: https://travis-ci.org/crflynn/celery-slack.. |rtd| image:: https://img.shields.io/readthedocs/celery-slack.svg    :target: http://celery-slack.readthedocs.io/en/latest/.. |codecov| image:: https://codecov.io/gh/crflynn/celery-slack/branch/master/graphs/badge.svg    :target: https://codecov.io/gh/crflynn/celery-slack.. |pypi| image:: https://img.shields.io/pypi/v/celery-slack.svg    :target: https://pypi.python.org/pypi/celery-slack.. |pyversions| image:: https://img.shields.io/pypi/pyversions/celery-slack.svg    :target: https://pypi.python.org/pypi/celery-slackCelery-slack is a `Celery &lt;http://docs.celeryproject.org/en/latest/index.html&gt;`_extension that posts messages to a Slack channelregarding a Celery application, its beat schedule, and its worker taskexecution. Optionally those messages can link to`Flower &lt;http://flower.readthedocs.io/en/latest/&gt;`_ task pages... image:: https://i.imgur.com/fDkivP8.pngPrerequisites-------------To use this package you will need a Slack App that is part of yourSlack workspace. You can create an App from`this page &lt;https://api.slack.com/apps&gt;`_. This App should have an incomingwebhook registered to one of your Slack channels. See`Slack incoming webhooks &lt;https://api.slack.com/incoming-webhooks&gt;`_ for moreinformation.Installation------------Celery-slack is a python package available on pypi.It can be installed using ``pip``:.. code-block:: python    pip install celery-slackBasic usage-----------The most basic implementation of celery-slack requires a Celery instance objectand a Slack webhook corresponding to a Slack channel. A simple example mightlook something like this:.. code-block:: python    from celery import Celery    from celery_slack import Slackify    SLACK_WEBHOOK = 'https://hooks.slack.com/services/XXX/YYY/ZZZ'    app = Celery('project')    app.config_from_object('project.config')    slack_app = Slackify(app, SLACK_WEBHOOK)    if __name__ == '__main__':        app.start()Advanced usage--------------Celery-slack offers a number of configuration options to customize the lookand output of Slack messages. The following are the default options of theextension:.. code-block:: javascript    DEFAULT_OPTIONS = {        &quot;slack_beat_init_color&quot;: &quot;#FFCC2B&quot;,        &quot;slack_broker_connect_color&quot;: &quot;#36A64F&quot;,        &quot;slack_broker_disconnect_color&quot;: &quot;#D00001&quot;,        &quot;slack_celery_startup_color&quot;: &quot;#FFCC2B&quot;,        &quot;slack_celery_shutdown_color&quot;: &quot;#660033&quot;,        &quot;slack_task_prerun_color&quot;: &quot;#D3D3D3&quot;,        &quot;slack_task_success_color&quot;: &quot;#36A64F&quot;,        &quot;slack_task_failure_color&quot;: &quot;#D00001&quot;,        &quot;slack_request_timeout&quot;: 1,        &quot;flower_base_url&quot;: None,        &quot;show_celery_hostname&quot;: False,        &quot;show_task_id&quot;: True,        &quot;show_task_execution_time&quot;: True,        &quot;show_task_args&quot;: True,        &quot;show_task_kwargs&quot;: True,        &quot;show_task_exception_info&quot;: True,        &quot;show_task_return_value&quot;: True,        &quot;show_task_prerun&quot;: False,        &quot;show_startup&quot;: True,        &quot;show_shutdown&quot;: True,        &quot;show_beat&quot;: True,        &quot;show_broker&quot;: False,        &quot;use_fixed_width&quot;: True,        &quot;include_tasks&quot;: None,        &quot;exclude_tasks&quot;: None,        &quot;failures_only&quot;: False,        &quot;webhook&quot;: None,        &quot;beat_schedule&quot;: None,        &quot;beat_show_full_task_path&quot;: False,    }Any subset of these options can be passed to the constructor in the formof keyword arguments. e.g... code-block:: python    options = {        # Some subset of options    }    app = Celery('project')    slack_app = Slackify(app, SLACK_WEBHOOK, **options)Most of the options are self explanatory, but here are some additional details:* **slack_\*_color**: The left vertical bar color associated with the slack    message attachments* **slack_request_timeout**: The Slack message request timeout in seconds* **flower_base_url**: e.g. https://flower.example.com, if provided, the slack    message titles will link to task pages    in `Flower &lt;http://flower.readthedocs.io/en/latest/&gt;`_* **show_task_id**: Show the uuid for the task.* **show_task_execution_time**: Show time to complete task in minutes/seconds* **show_celery_hostname**: Show the machine hostname on celery/beat messages* **show_task_args**: Show the task's args* **show_task_kwargs**: Show the task's keyword args* **show_task_exception_info**: Show the traceback for failed tasks* **show_task_return_value**: Show the return value of a successful task* **show_task_prerun**: Post messages at start of task execution* **show_startup**: Post message when celery starts* **show_shutdown**: Post message when celery stops* **show_beat**: Post message when beat starts* **show_broker**: Post messages when celery/beat disconnect from or reconnect    to the broker* **use_fixed_width**: Use slack fixed width formatting for args, kwargs,    retval, and exception info* **include_tasks**: A list of task paths to include. If used, post task    messages only for these tasks. Uses regex pattern matching.    e.g. ``module.submodule.taskname`` for a specific task or    just ``module.submodule`` for all tasks in that submodule. Cannot be used    in conjunction with ``exclude_tasks``.* **exclude_tasks**: A list of task paths to exclude. If used, suppress task    messages only for these tasks. All other tasks will generate slack    messages. Cannot be used in conjunction with ``include_tasks``. Uses    regex pattern matching.* **failures_only**: Only post messages on task failures.* **webhook**: The only required parameter. A slack webhook corresponding to a    slack channel.* **beat_schedule**: The celery beat schedule. If provided, the beat_init    message will display the schedule.* **beat_show_full_task_path**: Show the full module-task path. If False    (default) only show `submodule.taskname`.Warnings--------Note that Slack has `rate limits for incoming webhook requests &lt;https://api.slack.com/docs/rate-limits&gt;`_which is more or less 1 request per second.This extension makes little effort to abide by these rate limits. You shouldensure that your implementation of celery-slack does not violate these limitsby adjusting your task schedule or restricting the set of tasks which generateSlack messages using the ``include_tasks`` or ``exclude_tasks`` options.If a webhook response contains response code 429, celery-slack will suppressall messages for a time period given by the Retry-After response header. Uponreturning, celery-slack will post a WARNING message to Slack.</longdescription>
</pkgmetadata>