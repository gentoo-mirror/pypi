<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>AsyncNetFSM***********Asynchronous multi-vendor library for interacting with network devicesSupport TelnetRequires:---------* asyncio* AsyncSSH* Python &gt;=3.5* pyYAMLSupports:---------* Cisco IOS* Cisco IOS XE* Cisco IOS XR* Cisco ASA* Cisco NX-OS* Cisco FTD* HP Comware (like V1910 too)* Fujitsu Blade Switches* Mikrotik RouterOS* Arista EOS* Juniper JunOS* Aruba AOS 6.X* Aruba AOS 8.X* Terminal* FortinetExamples:---------Example of interacting with Cisco IOS devices:.. code-block:: python    import asyncio    import asyncnetfsm    async def task(param):        async with asyncnetfsm.create(**param) as ios:            # Testing sending simple command            out = await ios.send_command(&quot;show ver&quot;)            print(out)            # Testing sending configuration set            commands = [&quot;line console 0&quot;, &quot;exit&quot;]            out = await ios.send_config_set(commands)            print(out)            # Testing sending simple command with long output            out = await ios.send_command(&quot;show run&quot;)            print(out)            # Testing interactive dialog            out = await ios.send_command(&quot;conf&quot;, pattern=r'\[terminal\]\?', strip_command=False)            out += await ios.send_command(&quot;term&quot;, strip_command=False)            out += await ios.send_command(&quot;exit&quot;, strip_command=False, strip_prompt=False)            print(out)    async def run():        dev1 = { 'username' : 'user',                 'password' : 'pass',                 'device_type': 'cisco_ios',                 'ip': 'ip address',        }        dev2 = { 'username' : 'user',                 'password' : 'pass',                 'device_type': 'cisco_ios',                 'ip': 'ip address',        }        devices = [dev1, dev2]        tasks = [task(dev) for dev in devices]        await asyncio.wait(tasks)    loop = asyncio.get_event_loop()    loop.run_until_complete(run())</longdescription>
</pkgmetadata>