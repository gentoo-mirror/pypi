<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Fault![Linux Test](https://github.com/leonardt/fault/workflows/Linux%20Test/badge.svg)![MacOS Test](https://github.com/leonardt/fault/workflows/MacOS%20Test/badge.svg)[![BuildKite Status](https://badge.buildkite.com/c724929c65201c6ed5aebc027ffac02b5092d0bd8fad4341b6.svg?branch=master)](https://buildkite.com/stanford-aha/fault)[![Code Coverage](https://codecov.io/gh/leonardt/fault/branch/master/graph/badge.svg)](https://codecov.io/gh/leonardt/fault)[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)A Python package for testing hardware (part of the magma ecosystem).[API Documentation](http://truong.io/fault/)[CHANGELOG](./CHANGELOG.md)## Installation```pip install fault```## DocumentationCheck out the [fault tutorial](https://github.com/leonardt/fault/tree/master/tutorial)* [Actions](https://github.com/leonardt/fault/blob/master/doc/actions.md)* [Tester](https://github.com/leonardt/fault/blob/master/doc/tester.md)* [Integrating External Verilog](https://github.com/leonardt/fault/blob/master/doc/verilog_integration.ipynb)* [Properties](https://github.com/leonardt/fault/blob/master/doc/property.md)## Supported Simulators* Digital simulation  * [Verilator](https://www.veripool.org/wiki/verilator)  * [Icarus Verilog](http://iverilog.icarus.com)  * [Cadence Incisive/Xcelium](https://www.cadence.com/en_US/home/tools/system-design-and-verification/simulation-and-testbench-verification/xcelium-parallel-simulator.html)  * [Synopsys VCS](https://www.synopsys.com/verification/simulation/vcs.html)  * [Xilinx Vivado](https://www.xilinx.com/products/design-tools/vivado.html)* Formal verification  * Engines supported by [pySMT](https://github.com/pysmt/pysmt)* Analog simulation  * [ngspice](http://ngspice.sourceforge.net)  * [Cadence Spectre](https://www.cadence.com/en_US/home/tools/custom-ic-analog-rf-design/circuit-simulation/spectre-simulation-platform.html)  * [Synopsys HSPICE](https://www.synopsys.com/verification/ams-verification/hspice.html)* Mixed-signal simulation  * [Verilog-AMS](https://www.verilogams.com) via Cadence Incisive/Xcelium## ExampleHere is a simple ALU defined in magma.```pythonimport magma as mimport mantleclass ConfigReg(m.Circuit):    io = m.IO(D=m.In(m.Bits[2]), Q=m.Out(m.Bits[2])) + \        m.ClockIO(has_ce=True)    reg = mantle.Register(2, has_ce=True, name=&quot;conf_reg&quot;)    io.Q @= reg(io.D, CE=io.CE)class SimpleALU(m.Circuit):    io = m.IO(        a=m.In(m.UInt[16]),        b=m.In(m.UInt[16]),        c=m.Out(m.UInt[16]),        config_data=m.In(m.Bits[2]),        config_en=m.In(m.Enable)    ) + m.ClockIO()    opcode = ConfigReg(name=&quot;config_reg&quot;)(io.config_data, CE=io.config_en)    io.c @= mantle.mux(        [io.a + io.b, io.a - io.b, io.a * io.b, io.a ^ io.b], opcode)```Here's an example test in fault that uses the configuration interface, expectsa value on the internal register, and checks the result of performing theexpected operation.```pythonimport operatorimport faultops = [operator.add, operator.sub, operator.mul, operator.floordiv]tester = fault.Tester(SimpleALU, SimpleALU.CLK)tester.circuit.CLK = 0tester.circuit.config_en = 1for i in range(0, 4):    tester.circuit.config_data = i    tester.step(2)    tester.circuit.a = 3    tester.circuit.b = 2    tester.eval()    tester.circuit.c.expect(ops[i](3, 2))```We can run this with three different simulators```pythontester.compile_and_run(&quot;verilator&quot;, flags=[&quot;-Wno-fatal&quot;], directory=&quot;build&quot;)tester.compile_and_run(&quot;system-verilog&quot;, simulator=&quot;ncsim&quot;, directory=&quot;build&quot;)tester.compile_and_run(&quot;system-verilog&quot;, simulator=&quot;vcs&quot;, directory=&quot;build&quot;)```### Working with internal signalsFault supports peeking, expecting, and printing internal signals. For the`verilator` target, you should use the keyword argument `magma_opts` with`&quot;verilator_debug&quot;` set to true.  This will cause coreir to compile the verilogwith the required debug comments.  Example:```pythontester.compile_and_run(&quot;verilator&quot;, flags=[&quot;-Wno-fatal&quot;],                        magma_opts={&quot;verilator_debug&quot;: True}, directory=&quot;build&quot;)```If you're using `mantle.Register` from the `coreir` implementation, you canalso poke the internal register value directly using the `value` field.  Noticethat `conf_reg` is defined in `ConfigReg` to be an instance of`mantle.Register` and the test bench pokes it by setting `confg_reg.value`equal to `1`.```pythontester = fault.Tester(SimpleALU, SimpleALU.CLK)tester.circuit.CLK = 0# Set config_en to 0 so stepping the clock doesn't clobber the poked valuetester.circuit.config_en = 0# Initializetester.step(2)for i in reversed(range(4)):    tester.circuit.config_reg.conf_reg.value = i    tester.step(2)    tester.circuit.config_reg.conf_reg.O.expect(i)    # You can also print these internal signals using the getattr interface    tester.print(&quot;O=%d\n&quot;, tester.circuit.config_reg.conf_reg.O)```## FAQ### How can I write test bench logic that depends on the runtime state of the circuit?A common pattern in testing is to only perform certain actions depending on thestate of the circuit.  For example, one may only want to expect an output valuewhen a valid signal is high, ignoring it otherwise.  Another pattern is to changethe expected value over time by using a looping structure.  Finally, one maywant to expect a value that is a function of other runtime values.  To supportthese pattern, `fault` provides support &quot;peeking&quot; values, performing expressionson &quot;peeked&quot; values, if statements, and while loops.  #### Peek ExpressionsSuppose we had a circuit as follows:```pythonclass BinaryOpCircuit(m.Circuit):    io = m.IO(I0=m.In(m.UInt[5]), I1=m.In(m.UInt[5]), O=m.Out(m.UInt[5]))    io.O @= io.I0 + io.I1 &amp; (io.I1 - io.I0)```We can write a generic test that expects the output `O` in termsof the inputs `I0` and `I1` (rather than computing the expected value inPython).```pythontester = fault.Tester(BinaryOpCircuit)for _ in range(5):    tester.poke(tester._circuit.I0, hwtypes.BitVector.random(5))    tester.poke(tester._circuit.I1, hwtypes.BitVector.random(5))    tester.eval()    expected = tester.circuit.I0 + tester.circuit.I1    expected &amp;= tester.circuit.I1 - tester.circuit.I0    tester.circuit.O.expect(expected)```This is a useful pattern for writing reuseable test components (e.g.  composignthe output checking logic with various input stimuli generators).#### Control StructuresThe `tester._while(&lt;test&gt;)` action accepts a Peek value or expression as the test condition for a loop and returns a child tester that allows the user to add actions to the body of the loop.  Here's a simple example that loops until a done signal is asserted, printing some debug information in the loop body:```python# Wait for loop to completeloop = tester._while(dut.n_done)debug_print(loop, dut)loop.step()loop.step()# check final statetester.circuit.count.expect(expected_num_cycles - 1)```Notice that you can also add actions after the loop to check expected behaviorafter the loop has completed.The `tester._if(&lt;test&gt;)` action behaves similarly by accepting a test peek value or expression and conditionally executes actions depending on theresult of the expression.  Here is a simple example:```pythonif_tester = tester._if(tester.circuit.O == 0)if_tester.circuit.I = 1else_tester = if_tester._else()else_tester.circuit.I = 0tester.eval()```The `tester._for(&lt;num_iter&gt;)` action provides a simple way to write a loop overa fixed number of iterations.  Use the attribute `index` to get access to thecurrent iteration, for example:```pythonloop = tester._for(8)loop.poke(circ.I, loop.index)loop.eval()tester.expect(circ.O, loop.index)```### What Python values can I use to poke/expect ports?Here are the supported Python values for poking the following port types:* `m.Bit` - `bool` (`True`/`False`) or `int` (`0`/`1`) or `hwtypes.Bit`* `m.Bits[N]` - `hwtypes.BitVector[N]`, `int` (where the number of bits used to  express it is equal to `N`)* `m.SInt[N]` - `hwtypes.SIntVector[N]`, `int` (where the number of bits used to  express it is equal to `N`)* `m.UInt[N]` - `hwtypes.UIntVector[N]`, `int` (where the number of bits used to  express it is equal to `N`)* `m.Array[N, T]` - `list` (where the length of the list is equal to `N` and  the elements recursively conform to the supported types of values for `T`).  For example, suppose I have a port `I` of type `m.Array[3, m.Bits[3]]`.   I can poke it as follows:  ```python  val = [random.randint(0, (1 &lt;&lt; 4) - 1) for _ in range(3)]  tester.poke(circ.I, val)  ```  You can also poke it by element as follows:  ```python  for i in range(3):      val = random.randint(0, (1 &lt;&lt; 4) - 1)      tester.poke(circ.I[i], val)      tester.eval()      tester.expect(circ.O[i], val)  ```* `m.Tuple(a=m.Bits[4], b=m.Bits[4])` - `tuple` (where the length of the tuple is equal to the number of fields), `dict` (where there is a one-to-one mapping between key/value pairs to the tuple fields).  Example:  ```python  tester.circuit.I = (4, 2)  tester.eval()  tester.circuit.O.expect((4, 2))  tester.circuit.I = {&quot;a&quot;: 4, &quot;b&quot;: 2}  tester.eval()  tester.circuit.O.expect({&quot;a&quot;: 4, &quot;b&quot;: 2})  ```### How do I generate waveforms with fault?Fault supports generating `.vcd` dumps when using the `verilator` and`system-verilog/ncsim` target.For the `verilator` target, use the `flags` keyword argument to pass the`--trace` flag.  For example,    tester.compile_and_run(&quot;verilator&quot;, flags=[&quot;-Wno-fatal&quot;, &quot;--trace&quot;])The `--trace` flag must be passed through to verilator so it generates codethat supports waveform dumping. The test harness generated by fault willinclude the required logic for invoking `tracer-&gt;dump(main_time)` for everycall to `eval` and `step`.  `main_time` is incremented for every call to step.The output `.vcd` file will be saved in the file `logs/{circuit_name}` where`circuit_name` is the name of the ciruit passed to `Tester`.  The `logs`directory will be placed in the same directory as the generated harness, whichis controlled by the `directory` keyword argument (by default this is`&quot;build/&quot;`).For the `system-verilog` target, enable this feature using the`compile_and_run` parameter `dump_waveform=True`.  By default, the waveformfile will be named `waveforms.vcd` for `ncsim` and `waveforms.vpd` for `vcs`.The name of the file can be changed using the parameter`waveform_file=&quot;&lt;file_name&gt;&quot;`.  The `vcs` simulator also supports dumping `fsdb` by using the argument`waveform_type=&quot;fsdb&quot;`.  For this to work, you'll need to also use the `flags`argument using the path defined in your verdi manual.  For example,`$VERDI_HOME/doc/linking_dumping.pdf`.  Here is an example using an older version of verdi (using the VERDIHOMEenvironment variable):```pythonverdi_home = os.environ[&quot;VERDIHOME&quot;]# You may need to change the 'vcs_latest' and 'LINUX64' parts of the path# depending on your verdi version, please consult# $VERDI_HOME/doc/linking_dumping.pdfflags = ['-P',          f' {verdi_home}/share/PLI/vcs_latest/LINUX64/novas.tab',         f' {verdi_home}/share/PLI/vcs_latest/LINUX64/pli.a']tester.compile_and_run(target=&quot;system-verilog&quot;, simulator=&quot;vcs&quot;,                       waveform_type=&quot;fsdb&quot;, dump_waveforms=True, flags=flags)```Here's an example for a newer version of verdi```pythonverdi_home = os.environ[&quot;VERDI_HOME&quot;]flags = ['-P',         f' {verdi_home}/share/PLI/VCS/linux64/novas.tab',         f' {verdi_home}/share/PLI/VCS/linux64/pli.a']tester.compile_and_run(target=&quot;system-verilog&quot;, simulator=&quot;vcs&quot;,                       waveform_type=&quot;fsdb&quot;, dump_waveforms=True, flags=flags)```To configure fsdb dumping, use the `fsdb_dumpvars_args` parameter of thecompile_and_run command to pass a string to the `$fsdbDumpvars()` function.For example:```pythontester.compile_and_run(target=&quot;system-verilog&quot;, simulator=&quot;vcs&quot;,                       waveform_type=&quot;fsdb&quot;, dump_waveforms=True,                       fsdb_dumpvars_args='0, &quot;dut&quot;')```will produce:```verilog  $fsdbDumpvars(0, &quot;dut&quot;);```inside the generated test bench.### How do I pass through flags to the simulator?The `verilator` and `system-verilog` target support the parameter `flags` whichaccepts a list of flags (strings) that will be passed through to the simulatorcommand (`verilator` for verilator, `irun` for ncsim, `vcs` for vcs, and`iverilog` for iverilog).### Can I include a message to print when an expect fails?Use the `msg` argument to the expect action. You can either pass a standalonestring, e.g.```pythontester.circuit.O.expect(0, msg=&quot;my error message&quot;)```or you can pass a printf/$display style message using a tuple.  The first argumentshould be the format string, the subsequent arguments are the format values,e.g.```pythontester.circuit.O.expect(0, msg=(&quot;MY_MESSAGE: got %x, expected 0!&quot;,                                tester.circuit.O))```### Can I display or print values from my testbench?Yes, you can use the `tester.print` API which accepts a format string and avariable number of arguments.  Here's an example:```pythontester = fault.Tester(circ, circ.CLK)tester.poke(circ.I, 0)tester.eval()tester.expect(circ.O, 0)tester.poke(circ.CLK, 0)tester.step()tester.print(&quot;%08x\n&quot;, circ.O)```### Can I just generate a test bench without running it?Yes, here's an example:```python# compile the testertester.compile(&quot;verilator&quot;)# generate the test bench file (returns the name of the file)tb_file = tester.generate_test_bench(&quot;verilator&quot;)```or for system verilog```pythontester.compile(&quot;system-verilog&quot;, simulator=&quot;ncsim&quot;)tb_file = tester.generate_test_bench(&quot;system-verilog&quot;)```</longdescription>
</pkgmetadata>