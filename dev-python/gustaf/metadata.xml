<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![gustaf](https://raw.githubusercontent.com/tataratat/gustaf/main/docs/source/gustaf-logo.png)__gustaf__ is a Python library to process and visualize numerical-analysis-geometries;gustaf currently supports the following elements:- points,- lines,- triangle,- quadrilateral,- tetrahedron, and- hexahedron.# Installation`gustaf` only has `numpy` for its strict dependency. The minimal version can be installed using `pip`.```pip install gustaf```To install all the &lt;a href='#optional-dependencies'&gt;optional dependencies&lt;/a&gt; at the same time, you can use:```# quotation marks required for some shellspip install &quot;gustaf[all]&quot;```For the latest develop version of gustaf:```pip install git+https://github.com/tataratat/gustaf.git@main```# Quick StartThis example shows how to visualize and extract properties of tetrahedrons and NURBS using gustaf.For visualization, gustaf uses &lt;a href='https://vedo.embl.es'&gt;vedo&lt;/a&gt; as main backend.To begin we need to import the needed libraries:```pythonimport gustaf as gusimport numpy as np```## Create a tetrahedronNow we create our first volume. It will be just a basic cube. Even here we canalready choose between using a tetrahedron and a hexahedron-basedmesh. The `Volume` class will use tetrahedrons if the volumes keyword is madeup of a list of 4 elements (defining the corners of the tetrahedron), if 8elements are in each list hexahedrons are used (&lt;a href='https://tataratat.github.io/gustaf/gustaf.utils.html#gustaf.utils.connec.make_hexa_volumes'&gt;defining the corners of the hexahedron in the correct order&lt;/a&gt;).```python# create tetrahedron mesh using Volumes# it requires vertices and connectivity info, volumestet = gus.Volumes(    vertices=[        [0.0, 0.0, 0.0],        [1.0, 0.0, 0.0],        [0.0, 1.0, 0.0],        [1.0, 1.0, 0.0],        [0.0, 0.0, 1.0],        [1.0, 0.0, 1.0],        [0.0, 1.0, 1.0],        [1.0, 1.0, 1.0],    ],    volumes=[        [0, 2, 7, 3],        [0, 2, 6, 7],        [0, 6, 4, 7],        [5, 0, 4, 7],        [5, 0, 7, 1],        [7, 0, 3, 1],    ],)# set line color and widthtet.show_options[&quot;lc&quot;] = &quot;black&quot;tet.show_options[&quot;lw&quot;] = 4tet.show()```![Tetrahedron based volume](https://raw.githubusercontent.com/tataratat/gustaf/main/docs/source/_static/tet.png)```pythonhexa = gus.Volumes(    vertices=[        [0.0, 0.0, 0.0], #0        [1.0, 0.0, 0.0], #1        [0.0, 1.0, 0.0],        [1.0, 1.0, 0.0], #3        [0.0, 0.0, 1.0],        [1.0, 0.0, 1.0],        [0.0, 1.0, 1.0], #6        [1.0, 1.0, 1.0],    ],    volumes=[        [0, 1, 3, 2, 4, 5, 7, 6],    ],)hexa.show_options[&quot;lc&quot;] = &quot;black&quot;hexa.show_options[&quot;lw&quot;] = 4hexa.show()```![Hexahedron based volume](https://raw.githubusercontent.com/tataratat/gustaf/main/docs/source/_static/quad.png)## Basic visualizationAs just shown, it is really easy to show the objects by just calling the`show()` function on the object. But that is just the beginning of thepossibilities in vedo. You can plot multiple objects next to each other:```python# show multiple items in one plot# each list will be put into a separate subplot.gus.show(    [&quot;Tetrahedron&quot;, tet],    [&quot;Hexahedron&quot;, hexa])```![Compare hexahedron and tetrahedron-based volumes](https://raw.githubusercontent.com/tataratat/gustaf/main/docs/source/_static/tet_quad.png)Now let's add a color map to the object for the norm of thecoordinate, and let us also add at each vertex an arrow with random directionand length.```python# let's visualize some scalar data and vector data defined on verticestet.vertex_data[&quot;arange&quot;] = np.arange(len(tet.vertices))  # scalartet.show_options[&quot;data_name&quot;] = &quot;arange&quot;tet.vertex_data[&quot;random&quot;] = np.random.random((len(tet.vertices), 3))  # vectortet.show_options[&quot;arrow_data&quot;] = &quot;random&quot;tet.show()```![Add additional data to the object](https://raw.githubusercontent.com/tataratat/gustaf/main/docs/source/_static/tet_vertex_data.png)Are you interested in splines?Please checkout &lt;a href='https://tataratat.github.io/splinepy/'&gt;splinepy&lt;/a&gt;!# Optional Dependencies| Package | Description || ------- | ----------- || &lt;a href='https://numpy.org'&gt;numpy&lt;/a&gt; | Fast array data operations. || &lt;a href='https://vedo.embl.es'&gt;vedo&lt;/a&gt; | Default renderer / visualization core of gustaf. || &lt;a href='https://scipy.org'&gt;scipy&lt;/a&gt; | Create k-d trees and simple rotation matrices.|| &lt;a href='https://github.com/tataratat/napf'&gt;napf&lt;/a&gt; | Fast k-d tree build / query based on nanoflann. Supersedes scipy if it is importable. || &lt;a href='https://github.com/tataratat/funi'&gt;funi&lt;/a&gt; | A different method to find unique float array rows. But faster than k-d trees! || &lt;a href='https://github.com/nschloe/meshio'&gt;meshio&lt;/a&gt; | Supports loading/exporting numerous mesh formats. |</longdescription>
</pkgmetadata>