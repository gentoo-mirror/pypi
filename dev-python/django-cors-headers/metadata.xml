<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===================django-cors-headers===================.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/django-cors-headers/main.yml?branch=main&amp;style=for-the-badge   :target: https://github.com/adamchainz/django-cors-headers/actions?workflow=CI.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge  :target: https://github.com/adamchainz/django-cors-headers/actions?workflow=CI.. image:: https://img.shields.io/pypi/v/django-cors-headers.svg?style=for-the-badge    :target: https://pypi.org/project/django-cors-headers/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge    :target: https://github.com/psf/black.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white&amp;style=for-the-badge   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commitA Django App that adds Cross-Origin Resource Sharing (CORS) headers toresponses. This allows in-browser requests to your Django application fromother origins.----**Improve your Django and Git skills** with `my books &lt;https://adamj.eu/books/&gt;`__.----About CORS----------Adding CORS headers allows your resources to be accessed on other domains. It'simportant you understand the implications before adding the headers, since youcould be unintentionally opening up your site's private data to others.Some good resources to read on the subject are:* Julia Evans' `introductory comic &lt;https://drawings.jvns.ca/cors/&gt;`__ and  `educational quiz &lt;https://questions.wizardzines.com/cors.html&gt;`__.* Jake Archibald’s `How to win at CORS &lt;https://jakearchibald.com/2021/cors/&gt;`__* The `MDN Article &lt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&gt;`_* The `HTML5 Rocks Tutorial &lt;https://www.html5rocks.com/en/tutorials/cors/&gt;`_* The `Wikipedia Page &lt;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&gt;`_Requirements------------Python 3.8 to 3.12 supported.Django 3.2 to 5.0 supported.Setup-----Install from **pip**:.. code-block:: sh    python -m pip install django-cors-headersand then add it to your installed apps:.. code-block:: python    INSTALLED_APPS = [        ...,        &quot;corsheaders&quot;,        ...,    ]Make sure you add the trailing comma or you might get a ``ModuleNotFoundError``(see `this blogpost &lt;https://adamj.eu/tech/2020/06/29/why-does-python-raise-modulenotfounderror-when-modifying-installed-apps/&gt;`__).You will also need to add a middleware class to listen in on responses:.. code-block:: python    MIDDLEWARE = [        ...,        &quot;corsheaders.middleware.CorsMiddleware&quot;,        &quot;django.middleware.common.CommonMiddleware&quot;,        ...,    ]``CorsMiddleware`` should be placed as high as possible, especially before anymiddleware that can generate responses such as Django's ``CommonMiddleware`` orWhitenoise's ``WhiteNoiseMiddleware``. If it is not before, it will not be ableto add the CORS headers to these responses.About-----**django-cors-headers** was created in January 2013 by Otto Yiu. It wentunmaintained from August 2015 and was forked in January 2016 to the package`django-cors-middleware &lt;https://github.com/zestedesavoir/django-cors-middleware&gt;`_by Laville Augustin at Zeste de Savoir.In September 2016, Adam Johnson, Ed Morley, and others gained maintenanceresponsibility for **django-cors-headers**(`Issue 110 &lt;https://github.com/adamchainz/django-cors-headers/issues/110&gt;`__)from Otto Yiu.Basically all of the changes in the forked **django-cors-middleware** weremerged back, or re-implemented in a different way, so it should be possible toswitch back. If there's a feature that hasn't been merged, please open an issueabout it.**django-cors-headers** has had `40+ contributors&lt;https://github.com/adamchainz/django-cors-headers/graphs/contributors&gt;`__in its time; thanks to every one of them.Configuration-------------Configure the middleware's behaviour in your Django settings. You must set atleast one of three following settings:* ``CORS_ALLOWED_ORIGINS``* ``CORS_ALLOWED_ORIGIN_REGEXES``* ``CORS_ALLOW_ALL_ORIGINS````CORS_ALLOWED_ORIGINS: Sequence[str]``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A list of origins that are authorized to make cross-site HTTP requests.The origins in this setting will be allowed, and the requesting origin will be echoed back to the client in the |access-control-allow-origin header|__.Defaults to ``[]``... |access-control-allow-origin header| replace:: ``access-control-allow-origin`` header__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-OriginAn Origin is defined by `the CORS RFC Section 3.2 &lt;https://tools.ietf.org/html/rfc6454#section-3.2&gt;`_ as a URI scheme + hostname + port, or one of the special values ``'null'`` or ``'file://'``.Default ports (HTTPS = 443, HTTP = 80) are optional.The special value ``null`` is sent by the browser in `&quot;privacy-sensitive contexts&quot; &lt;https://tools.ietf.org/html/rfc6454#section-6&gt;`__, such as when the client is running from a ``file://`` domain.The special value `file://` is sent accidentally by some versions of Chrome on Android as per `this bug &lt;https://bugs.chromium.org/p/chromium/issues/detail?id=991107&gt;`__.Example:.. code-block:: python    CORS_ALLOWED_ORIGINS = [        &quot;https://example.com&quot;,        &quot;https://sub.example.com&quot;,        &quot;http://localhost:8080&quot;,        &quot;http://127.0.0.1:9000&quot;,    ]Previously this setting was called ``CORS_ORIGIN_WHITELIST``, which still works as an alias, with the new name taking precedence.``CORS_ALLOWED_ORIGIN_REGEXES: Sequence[str | Pattern[str]]``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A list of strings representing regexes that match Origins that are authorized to make cross-site HTTP requests.Defaults to ``[]``.Useful when ``CORS_ALLOWED_ORIGINS`` is impractical, such as when you have a large number of subdomains.Example:.. code-block:: python    CORS_ALLOWED_ORIGIN_REGEXES = [        r&quot;^https://\w+\.example\.com$&quot;,    ]Previously this setting was called ``CORS_ORIGIN_REGEX_WHITELIST``, which still works as an alias, with the new name taking precedence.``CORS_ALLOW_ALL_ORIGINS: bool``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If ``True``, all origins will be allowed.Other settings restricting allowed origins will be ignored.Defaults to ``False``.Setting this to ``True`` can be *dangerous*, as it allows any website to make cross-origin requests to yours.Generally you'll want to restrict the list of allowed origins with ``CORS_ALLOWED_ORIGINS`` or ``CORS_ALLOWED_ORIGIN_REGEXES``.Previously this setting was called ``CORS_ORIGIN_ALLOW_ALL``, which still works as an alias, with the new name taking precedence.--------------The following are optional settings, for which the defaults probably suffice.``CORS_URLS_REGEX: str | Pattern[str]``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A regex which restricts the URL's for which the CORS headers will be sent.Defaults to ``r'^.*$'``, i.e. match all URL's.Useful when you only need CORS on a part of your site, e.g. an API at ``/api/``.Example:.. code-block:: python    CORS_URLS_REGEX = r&quot;^/api/.*$&quot;``CORS_ALLOW_METHODS: Sequence[str]``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~A list of HTTP verbs that are allowed for the actual request.Defaults to:.. code-block:: python    CORS_ALLOW_METHODS = (        &quot;DELETE&quot;,        &quot;GET&quot;,        &quot;OPTIONS&quot;,        &quot;PATCH&quot;,        &quot;POST&quot;,        &quot;PUT&quot;,    )The default can be imported as ``corsheaders.defaults.default_methods`` so you can just extend it with your custom methods.This allows you to keep up to date with any future changes.For example:.. code-block:: python    from corsheaders.defaults import default_methods    CORS_ALLOW_METHODS = (        *default_methods,        &quot;POKE&quot;,    )``CORS_ALLOW_HEADERS: Sequence[str]``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The list of non-standard HTTP headers that you permit in requests from the browser.Sets the |Access-Control-Allow-Headers header|__ in responses to `preflight requests &lt;https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request&gt;`__.Defaults to:.. |Access-Control-Allow-Headers header| replace:: ``Access-Control-Allow-Headers`` header__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers.. code-block:: python    CORS_ALLOW_HEADERS = (        &quot;accept&quot;,        &quot;authorization&quot;,        &quot;content-type&quot;,        &quot;user-agent&quot;,        &quot;x-csrftoken&quot;,        &quot;x-requested-with&quot;,    )The default can be imported as ``corsheaders.defaults.default_headers`` so you can extend it with your custom headers.This allows you to keep up to date with any future changes.For example:.. code-block:: python    from corsheaders.defaults import default_headers    CORS_ALLOW_HEADERS = (        *default_headers,        &quot;my-custom-header&quot;,    )``CORS_EXPOSE_HEADERS: Sequence[str]``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The list of extra HTTP headers to expose to the browser, in addition to the default `safelisted headers &lt;https://developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted_response_header&gt;`__.If non-empty, these are declared in the |access-control-expose-headers header|__.Defaults to ``[]``... |access-control-expose-headers header| replace:: ``access-control-expose-headers`` header__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers``CORS_PREFLIGHT_MAX_AGE: int``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~The number of seconds the browser can cache the preflight response.This sets the |access-control-max-age header|__ in preflight responses.If this is 0 (or any falsey value), no max age header will be sent.Defaults to ``86400`` (one day)... |access-control-max-age header| replace:: ``access-control-max-age`` header__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age**Note:**Browsers send `preflight requests &lt;https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request&gt;`__ before certain “non-simple” requests, to check they will be allowed.Read more about it in the `CORS MDN article &lt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#preflighted_requests&gt;`_.``CORS_ALLOW_CREDENTIALS: bool``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If ``True``, cookies will be allowed to be included in cross-site HTTP requests.This sets the |access-control-allow-credentials header|__ in preflight and normal responses.Defaults to ``False``... |access-control-allow-credentials header| replace:: ``Access-Control-Allow-Credentials`` header__ https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/access-control-allow-credentialsNote: in Django 2.1 the `SESSION_COOKIE_SAMESITE`_ setting was added, set to ``'Lax'`` by default, which will prevent Django's session cookie being sent cross-domain.Change the setting to ``'None'`` if you need to bypass this security restriction... _SESSION_COOKIE_SAMESITE: https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SESSION_COOKIE_SAMESITE``CORS_ALLOW_PRIVATE_NETWORK: bool``~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~If ``True``, allow requests from sites on “public” IP to this server on a “private” IP.In such cases, browsers send an extra CORS header ``access-control-request-private-network``, for which ``OPTIONS`` responses must contain ``access-control-allow-private-network: true``.Refer to:* `Local Network Access &lt;https://wicg.github.io/local-network-access/&gt;`__, the W3C Community Draft specification.* `Private Network Access: introducing preflights &lt;https://developer.chrome.com/blog/private-network-access-preflight/&gt;`__, a blog post from the Google Chrome team.CSRF Integration----------------Most sites will need to take advantage of the `Cross-Site Request Forgeryprotection &lt;https://docs.djangoproject.com/en/stable/ref/csrf/&gt;`_ that Djangooffers. CORS and CSRF are separate, and Django has no way of using your CORSconfiguration to exempt sites from the ``Referer`` checking that it does onsecure requests. The way to do that is with its `CSRF_TRUSTED_ORIGINS setting&lt;https://docs.djangoproject.com/en/stable/ref/settings/#csrf-trusted-origins&gt;`_.For example:.. code-block:: python    CORS_ALLOWED_ORIGINS = [        &quot;https://read-only.example.com&quot;,        &quot;https://read-and-write.example.com&quot;,    ]    CSRF_TRUSTED_ORIGINS = [        &quot;https://read-and-write.example.com&quot;,    ]Signals-------If you have a use case that requires more than just the above configuration,you can attach code to check if a given request should be allowed. For example,this can be used to read the list of origins you allow from a model. Attach anynumber of handlers to the ``check_request_enabled```Django signal &lt;https://docs.djangoproject.com/en/stable/ref/signals/&gt;`_, whichprovides the ``request`` argument (use ``**kwargs`` in your handler to protectagainst any future arguments being added). If any handler attached to thesignal returns a truthy value, the request will be allowed.For example you might define a handler like this:.. code-block:: python    # myapp/handlers.py    from corsheaders.signals import check_request_enabled    from myapp.models import MySite    def cors_allow_mysites(sender, request, **kwargs):        return MySite.objects.filter(host=request.headers[&quot;origin&quot;]).exists()    check_request_enabled.connect(cors_allow_mysites)Then connect it at app ready time using a `Django AppConfig&lt;https://docs.djangoproject.com/en/stable/ref/applications/&gt;`_:.. code-block:: python    # myapp/__init__.py    default_app_config = &quot;myapp.apps.MyAppConfig&quot;.. code-block:: python    # myapp/apps.py    from django.apps import AppConfig    class MyAppConfig(AppConfig):        name = &quot;myapp&quot;        def ready(self):            # Makes sure all signal handlers are connected            from myapp import handlers  # noqaA common use case for the signal is to allow *all* origins to access a subsetof URL's, whilst allowing a normal set of origins to access *all* URL's. Thisisn't possible using just the normal configuration, but it can be achieved witha signal handler.First set ``CORS_ALLOWED_ORIGINS`` to the list of trusted origins that areallowed to access every URL, and then add a handler to``check_request_enabled`` to allow CORS regardless of the origin for theunrestricted URL's. For example:.. code-block:: python    # myapp/handlers.py    from corsheaders.signals import check_request_enabled    def cors_allow_api_to_everyone(sender, request, **kwargs):        return request.path.startswith(&quot;/api/&quot;)    check_request_enabled.connect(cors_allow_api_to_everyone)</longdescription>
</pkgmetadata>