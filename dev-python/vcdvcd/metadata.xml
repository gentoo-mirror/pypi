<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>= vcdvcd:idprefix::idseparator: -:sectanchors::sectlinks::sectnumlevels: 6:sectnums::toc: macro:toclevels: 6:toc-title:Python Verilog value change dump (VCD) parser library + the nifty &lt;&lt;vcdcat&gt;&gt; VCD command line pretty printer.toc::[]== InstallationInstall the latest release:....python -m pip install --user vcdvcd....On Ubuntu 23.04 you need instead https://stackoverflow.com/questions/75608323/how-do-i-solve-error-externally-managed-environment-every-time-i-use-pip-3[]:....pipx install vcdvcd....Install master directly from this repository for development with `--editable`:....git clone https://github.com/cirosantilli/vcdvcdcd vcdvcdvirtualenv -p python3 .venv. .venv/bin/activatepython -m pip install --editable .....This allows you to direcly edit the source code here and see updates to importers from anywhere as shown at: https://stackoverflow.com/questions/35064426/when-would-the-e-editable-option-be-useful-with-pip-install/63353319#63353319[].You can also use &lt;&lt;vcdcat&gt;&gt; directly from a clone with:....git clone https://github.com/cirosantilli/vcdvcdpython -m pip install --user ./vcdvcdvcdvcd/vcdcat vcdvcd/counter_tb.vcd....== vcdcatNifty terminal CLI VCD pretty printer:....vcdcat -h....Dump all signal values:....vcdcat counter_tb.vcd....Output:....0 time1 counter_tb.clock2 counter_tb.enable3 counter_tb.out[1:0]4 counter_tb.reset5 counter_tb.top.out[1:0]0 1 2 3 4 5===========0 1 0 x 0 x1 0 0 x 1 x2 1 0 0 1 03 0 0 0 0 04 1 0 0 0 05 0 1 0 0 06 1 1 1 0 17 0 1 1 0 18 1 1 2 0 29 0 1 2 0 210 1 1 3 0 311 0 1 3 0 312 1 1 0 0 013 0 1 0 0 014 1 1 1 0 115 0 1 1 0 116 1 1 2 0 217 0 1 2 0 218 1 1 3 0 319 0 1 3 0 320 1 1 0 0 021 0 1 0 0 022 1 1 1 0 123 0 1 1 0 124 1 1 2 0 225 0 0 2 0 226 1 0 2 0 2....Dump only selected signals:....vcdcat counter_tb.vcd top.enable top.reset....Output:....0 time1 counter_tb.top.enable2 counter_tb.top.reset0 1 2=====0 0 01 0 13 0 05 1 025 0 0....Note how only times for which at least one selected signal changed are shown.=== `vcdcat --deltas`Only print the signals that changed for each time.If no signals changed at a given time, don't print anything for that time.This will potentially make the output much much smaller for large VCD files.Example:....vcdcat -d counter_tb.vcd....Output excerpt:....0 x counter_tb.top.out[1:0]0 0 counter_tb.reset0 0 counter_tb.enable0 1 counter_tb.clock0 x counter_tb.out[1:0]1 0 counter_tb.clock1 1 counter_tb.reset2 0 counter_tb.out[1:0]2 0 counter_tb.top.out[1:0]2 1 counter_tb.clock3 0 counter_tb.clock3 0 counter_tb.reset4 1 counter_tb.clock....Where for example the line:....0 x counter_tb.top.out[1:0]....means that:* at time `0`* the signal `counter_tb.top.out[1:0]`* changed to value `x`As without `--deltas`, we can also view deltas only for selected signals, e.g.:....vcdcat -d counter_tb.vcd 'counter_tb.top.out[1:0]'....outputs:....0 x counter_tb.top.out[1:0]2 0 counter_tb.top.out[1:0]6 1 counter_tb.top.out[1:0]8 2 counter_tb.top.out[1:0]10 3 counter_tb.top.out[1:0]12 0 counter_tb.top.out[1:0]14 1 counter_tb.top.out[1:0]16 2 counter_tb.top.out[1:0]18 3 counter_tb.top.out[1:0]20 0 counter_tb.top.out[1:0]22 1 counter_tb.top.out[1:0]24 2 counter_tb.top.out[1:0]....=== `vcdcat --china`vcdcat's most important option!TODO: this option is now broken because Pypi deleted the package https://pypi.org/project/china-dictatorship/ without any notification in 2023. Transparency and freedom of speech is not their thing apparently, oh well.....vcdcat --china &gt; index.htmlfirefox index.html....See also: https://cirosantilli.com/china-dictatorship/#mirrors== API usageLibrary usage examples can be seen at link:examples.py[] and run with:...../examples.py....Other examples are also being added to link:test.py[] which can be run with:...../test.py....By default, data is parsed at once into a per-signal format that allows for efficient random access, for example:....from vcdvcd import VCDVCD# Do the parsing.vcd = VCDVCD('counter_tb.vcd')# List all human readable signal names.print(vcd.references_to_ids.keys())# View all signal data.print(vcd.data)# Get a signal by human readable name.signal = vcd['counter_tb.top.out[1:0]']# tv is a list of Time/Value delta pairs for this signal.tv = signal.tvassert(tv[0] == (0, 'x'))assert(tv[1] == (2, '0'))assert(tv[2] == (6, '1'))# Random access value of the signal at a given time.# Note how it works for times between deltas as well.assert(signal[0] == 'x')assert(signal[1] == 'x')assert(signal[2] == '0')assert(signal[3] == '0')....But you can also use this library in a purely stream callback fashion as shown in the examples by doing something like:....class MyStreamParserCallbacks(vcdvcd.StreamParserCallbacks):    def value(        self,        vcd,        time,        value,        identifier_code,        cur_sig_vals,    ):        print('{} {} {}'.format(time, value, identifier_code))vcd = VCDVCD('counter_tb.vcd', callbacks=MyStreamParserCallbacks(), store_tvs=False)....`store_tvs=False` instructs the library to not store all the signal value change data,  which would likely just take up useless space in your streaming application. Only signal metadata is stored in that case.== About this repositoryThe VCD format is defined by the Verilog standard, and can be generated with `$dumpvars`.This repo was originally forked from Sameer Gauria's version, which is currently only hosted on PyPI with email patches and no public bug tracking: https://pypi.python.org/pypi/Verilog_VCD[].There is also a read-only mirror at: https://github.com/zylin/Verilog_VCD[].The initial purpose of this fork was &lt;&lt;vcdcat&gt;&gt;, but other features ended up being added (basically because by people are now able to conveniently communicate with the project on GitHub), e.g. convenient random access as mentioned at &lt;&lt;api-usage&gt;&gt; and basic tests at link:test.py[].Another stream implementation can be found at: https://github.com/GordonMcGregor/vcd_parser[].== Release procedureEnsure that basic tests don't blow up:...../examples.py./test.py./vcdcat counter_tb.vcd./vcdcat -d counter_tb.vcd....Update the `version` field in `setup.py`:....vim setup.py....Create a tag and push it:....v=v2.3.4git add setup.pygit commit -m $vgit tag -a $v -m $vgit push --follow-tags....Push to PyPi:....pipx install twinepython3 setup.py sdist bdist_wheeltwine upload dist/*rm -rf build dist *.egg-info....</longdescription>
</pkgmetadata>