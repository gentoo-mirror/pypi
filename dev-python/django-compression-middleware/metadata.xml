<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========================================================================Django Compression Middleware===========================================================================This middleware implements compressed content encoding for HTTP. It is similarto Django's ``GZipMiddleware`` (`documentation`_), but additionally supportsother compression methods. It is meant to be a drop-in replacement for Django's``GZipMiddleware``. Its documentation — including security warnings — thereforeapply here as well.The middleware is focussed on the task of compressing typical Django responsessuch as HTML, JSON, etc.  Both normal (bulk) and streaming responses aresupported. For static file compression, have a look at other projects such as`WhiteNoise`_.Zstandard is a new method for compression with little client support so far.Most browsers now support Brotli compression (check support status on `Can Iuse... Brotli`_). The middleware will choose the best compression methodsupported by the client as indicated in the request's ``Accept-Encoding``header. In order of preference:- Zstandard (zstd)- Brotli (br)- gzip (gzip)Summary of the project status:* .. image:: https://img.shields.io/github/actions/workflow/status/friedelwolff/django-compression-middleware/main.yml     :target: https://github.com/friedelwolff/django-compression-middleware/actions* .. image:: https://img.shields.io/pypi/djversions/django-compression-middleware.svg* .. image:: https://img.shields.io/pypi/pyversions/django-compression-middleware.svg* .. image:: https://img.shields.io/pypi/implementation/django-compression-middleware.svg.. _`documentation`: https://docs.djangoproject.com/en/dev/ref/middleware/#module-django.middleware.gzip.. _`WhiteNoise`: https://whitenoise.readthedocs.io/.. _`Can I use... Brotli`: http://caniuse.com/#search=brotliInstallation and usage----------------------The following requirements are supported and tested in all reasonablecombinations:- Python versions: 2.7, 3.5–3.11- Interpreters: CPython and PyPy.- Django versions: 1.11–4.1.. code:: shell    pip install --upgrade django-compression-middlewareTo apply compression to all the views served by Django, add``compression_middleware.middleware.CompressionMiddleware`` to the``MIDDLEWARE`` setting:.. code:: python    MIDDLEWARE = [        # ...        'compression_middleware.middleware.CompressionMiddleware',        # ...    ]Remove ``GZipMiddleware`` and ``BrotliMiddleware`` if you used it before.Consult the Django documentation on the correct `ordering of middleware`_... _`ordering of middleware`: https://docs.djangoproject.com/en/dev/ref/middleware/#middleware-orderingAlternatively you can decorate views individually to serve them withcompression:.. code:: python    from compression_middleware.decorators import compress_page    @compress_page    def index_view(request):        ...Note that your browser might not send the ``br`` entry in the ``Accept-Encoding``header when you test without HTTPS (common on localhost). You can force it tosend the header, though. In Firefox, visit ``about:config`` and set``network.http.accept-encoding`` to indicate support. Note that you mightencounter some problems on the web with such a setting (which is why Brotli isonly supported on secure connections by default).Credits and Resources---------------------The code and tests in this project are based on Django's ``GZipMiddleware`` andVašek Dohnal's ``django-brotli``. For compression, it uses the following modulesto bind to fast C modules:- The `zstandard`_ bindings. It supports both a C module (for CPython) and CFFI  which should be appropriate for PyPy. See the documentation for full details.- The `Brotli`_ bindings or `brotlipy`_. The latter is preferred on PyPy since  it is implemented using cffi. But both should work on both Python  implementations.- Python's builtin `gzip`_ module... _zstandard: https://pypi.org/project/zstandard/.. _Brotli: https://pypi.org/project/Brotli/.. _brotlipy: https://pypi.org/project/brotlipy/.. _gzip: https://docs.python.org/3/library/gzip.htmlFurther readding on Wikipedia:- `HTTP compression &lt;https://en.wikipedia.org/wiki/HTTP_compression&gt;`__- `Zstandard &lt;http://www.zstd.net/&gt;`__- `Brotli &lt;https://en.wikipedia.org/wiki/Brotli&gt;`__- `gzip &lt;https://en.wikipedia.org/wiki/Gzip&gt;`__Contributing------------1. Clone this repository (``git clone ...``)2. Create a virtualenv3. Install package dependencies: ``pip install --upgrade -r requirements_dev.txt``4. Change some code5. Run the tests: in the project root simply execute ``pytest``, and afterwards   preferably ``tox`` to test the full test matrix. Consider installing as many   supported interpreters as possible (having them in your ``PATH`` is often   sufficient).6. Submit a pull request and check for any errors reported by the Continuous   Integration service.License-------The MPL 2.0 LicenseCopyright (c) 2019-2023 `Friedel Wolff &lt;https://fwolff.net.za/&gt;`_.</longdescription>
</pkgmetadata>