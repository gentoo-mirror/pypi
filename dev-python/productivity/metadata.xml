<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Productivity============##### NOTE: This is in very early stages of development.Python ≥3.7 driver and command-line tool for [AutomationDirect Productivity Series PLCs](https://www.automationdirect.com/adc/overview/catalog/programmable_controllers/productivity_series_controllers).&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://www.automationdirect.com/images/overviews/p-series-cpus_400.jpg&quot; /&gt;&lt;/p&gt;Installation============```pip install productivity```Usage=====### PLC ConfigurationThis driver uses Modbus TCP/IP for communication. Unlike the ClickPLC, modbusaddresses need to be manually configured in the Productivity PLC firmware (see[manual](https://cdn.automationdirect.com/static/manuals/p2userm/p2userm.pdf)).To use this driver, go to `Write Program → Tag Database`, scroll down to the valuesyou care about, and double click the `Mod Start` cell of each value to assign an address.Then, go to `File → Export → Tags` to export a csv file. The file is used here soyou don't need to remember the addresses.### Command LineTo print the tags and their values, simply call the library with the PLC IP address and the tags file.```$ productivity the-plc-ip-address path/to/tags.csv```Use --set to set values on the PLC:```$ productivity the-plc-ip-address path/to/tags.csv -s &quot;{int_test: 4, float_test: 4.45, string_test: foo}&quot;```The --set parameter takes [YAML](https://learnxinyminutes.com/docs/yaml/), a simple data format that allows you to easily set multiple tags at once.See `productivity --help` for more.### PythonThis driver uses Python ≥3.5's async/await syntax to asynchronously communicate witha Productivity2000 PLC. For example (note that asyncio.run() requires Python &gt;=3.7):```pythonimport asynciofrom productivity import ProductivityPLCasync def run():    async with ProductivityPLC('the-plc-ip-address', 'path/to/tags.csv') as plc:        print(await plc.get())asyncio.run(run())```It is also possible to set tag values:```pythonasync def run():    async with ProductivityPLC('the-plc-ip-address', 'path/to/tags.csv') as plc:        await plc.set(start=True, setpoint=1.1)asyncio.run(run())```</longdescription>
</pkgmetadata>