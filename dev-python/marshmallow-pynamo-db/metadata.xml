<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Welcome to Marshmallow-Pynamo-DB[![PyPI](https://img.shields.io/pypi/v/marshmallow-pynamo-db)](https://pypi.org/project/marshmallow-pynamo-db/)[![Build](https://github.com/chrismaille/marshmallow-pynamodb/workflows/tests/badge.svg)](https://github.com/chrismaille/marshmallow-pynamodb/actions)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/stela)](https://www.python.org)&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot;src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)[PynamoDB](https://pynamodb.readthedocs.io/en/latest/) integration withthe [Marshmallow](https://marshmallow.readthedocs.io/en/latest/)(de)serialization library.###  InstallationFrom PyPi:```shell  $ pip install marshmallow-pynamo-db```#### Versions* For Marshmallow 3.x and PynamoDB 5.x use version `1.x`* For Marshmallow 3.x and PynamoDB 4.x use version `0.10.6`* For Marshmallow 2.x and PynamoDB 3.x use original project: https://github.com/mathewmarcus/marshmallow-pynamodb### Declare your models```pythonfrom pynamodb.models import Modelfrom pynamodb.attributes import UnicodeAttributeclass User(Model):    class Meta:        table_name = &quot;user&quot;    email = UnicodeAttribute(null=True)    first_name = UnicodeAttribute(range_key=True)    last_name = UnicodeAttribute(hash_key=True)```###  Generate marshmallow schemas```pythonfrom marshmallow_pynamodb import ModelSchemaclass UserSchema(ModelSchema):    class Meta:        model = Useruser_schema = UserSchema()```### (De)serialize your data```pythonuser = User(last_name=&quot;Smith&quot;, first_name=&quot;John&quot;)user_schema.dump(user)# {u'first_name': u'John', u'last_name': u'Smith', u'email': None}user_schema.load({&quot;last_name&quot;: &quot;Smith&quot;, &quot;first_name&quot;: &quot;John&quot;})# user&lt;Smith&gt;```### pynamodb-attributes supportCurrently we support the following custom attributes from[pynamodb-attributes](https://github.com/lyft/pynamodb-attributes)library:- `IntegerAttribute` â€“ same as `NumberAttribute` but whose value is typed as `int` (rather than `float`)- `UUIDAttribute` - serializes a `UUID` Python object as a `S` type attribute (_e.g._ `'a8098c1a-f86e-11da-bd1a-00112444be1e'`)- `UnicodeEnumAttribute` - serializes a string-valued `Enum` into a Unicode (`S`-typed) attribute- `IntegerEnumAttribute` - serializes a integer-valued `Enum` into a  Number (`S`-typed) attribute```pythonimport uuidfrom enum import Enumfrom pynamodb.attributes import UnicodeAttributefrom pynamodb.models import Modelfrom pynamodb_attributes import IntegerAttribute, UUIDAttribute, UnicodeEnumAttributefrom marshmallow_pynamodb import ModelSchemaclass Gender(Enum):    male = &quot;male&quot;    female = &quot;female&quot;    not_informed = &quot;not_informed&quot;class People(Model):    class Meta:        table_name = &quot;people&quot;    uuid = UUIDAttribute(hash_key=True)    first_name = UnicodeAttribute()    last_name = UnicodeAttribute()    gender = UnicodeEnumAttribute(Gender)    age = IntegerAttribute()class PeopleSchema(ModelSchema):    class Meta:        model = Peoplepeople_schema = PeopleSchema()payload = {    &quot;uuid&quot;: &quot;064245dc0e5f415c95d3ba6b8f728ae4&quot;,    &quot;first_name&quot;: &quot;John&quot;,    &quot;last_name&quot;: &quot;Doe&quot;,    &quot;gender&quot;: Gender.male.value,    &quot;age&quot;: 43}people = people_schema.load(payload)# people&lt;064245dc-0e5f-415c-95d3-ba6b8f728ae4&gt;assert people.gender == Gender.maleassert people.uuid == uuid.UUID(&quot;064245dc0e5f415c95d3ba6b8f728ae4&quot;)```See more examples in tests.### Nested models? No problem```pythonfrom marshmallow_pynamodb.schema import ModelSchemafrom pynamodb.models import Modelfrom pynamodb.attributes import (    ListAttribute,    MapAttribute,    NumberAttribute,    UnicodeAttribute,)class Location(MapAttribute):    latitude = NumberAttribute()    longitude = NumberAttribute()    name = UnicodeAttribute()class Person(MapAttribute):    firstName = UnicodeAttribute()    lastName = UnicodeAttribute()    age = NumberAttribute()class OfficeEmployeeMap(MapAttribute):    office_employee_id = NumberAttribute()    person = Person()    office_location = Location()class Office(Model):    class Meta:        table_name = 'OfficeModel'    office_id = NumberAttribute(hash_key=True)    address = Location()    employees = ListAttribute(of=OfficeEmployeeMap)class OfficeSchema(ModelSchema):    class Meta:        model = Office# noinspection PyTypeCheckerOfficeSchema().load(    {        'office_id': 789,        'address': {            'latitude': 6.98454,            'longitude': 172.38832,            'name': 'some_location'        },        'employees': [            {                'office_employee_id': 123,                'person': {                    'firstName': 'John',                    'lastName': 'Smith',                    'age': 45                },                'office_location': {                    'latitude': -24.0853,                    'longitude': 144.87660,                    'name': 'other_location'                }            },            {                'office_employee_id': 456,                'person': {                    'firstName': 'Jane',                    'lastName': 'Doe',                    'age': 33                },                'office_location': {                    'latitude': -20.57989,                    'longitude': 92.30463,                    'name': 'yal'                }            }        ]    })# Office&lt;789&gt;```### Using polyformed Models```python# pip install pynamodb_attributesimport uuidfrom pynamodb_attributes import UnicodeEnumAttribute, UUIDAttributefrom pynamodb.attributes import UnicodeAttribute, DiscriminatorAttributefrom pynamodb.models import Modelfrom marshmallow_pynamodb import ModelSchemafrom enum import Enumclass MyStatus(Enum):   CREATED = &quot;CREATED&quot;class BaseDocument(Model):  uuid = UUIDAttribute(default=uuid.uuid4)  cls = DiscriminatorAttribute()class MyDocument(BaseDocument, discriminator='my_document'):  status = UnicodeEnumAttribute(MyStatus, default=MyStatus.CREATED)  content = UnicodeAttribute()class MyDocumentSchema(ModelSchema):  class Meta:    model = MyDocumentinstance = MyDocumentSchema().load({&quot;content&quot;: &quot;foo&quot;})assert instance.content == &quot;foo&quot;assert instance.uuid is not None```### LicenseMIT licensed. See the bundled[LICENSE](https://github.com/mathewmarcus/marshmallow-pynamodb/blob/master/LICENSE.txt)file for more details.### Not working?Dont panic. Get a towel and, please, open an[issue](https://github.com/chrismaille/stela/issues).</longdescription>
</pkgmetadata>