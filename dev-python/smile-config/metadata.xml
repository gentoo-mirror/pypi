<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Table of Contents1.  [Install](#org23895a3)2.  [Usage](#org8eb203f)    1.  [Dataclass to command line options](#org5bad762)        1.  [Simple types](#org81fda4d)        2.  [Complex types](#org4a69be6)        3.  [Private fields](#orgab0dd51)        4.  [Nested dataclass](#org7d8971d)    2.  [APIs](#org5c599ba)        1.  [Example](#org5a05700)Generate command line options  from dataclasses.    # config.py    from dataclasses import dataclass, asdict, field    from smile_config import from_dataclass        @dataclass    class Train:        &quot;&quot;&quot;Train config.&quot;&quot;&quot;            batch_size: int = 64            @dataclass    class ML:        lr: Annotated[float, dict(help=&quot;learning rate&quot;, type=float)] = 0.001        train: Train = Train()        cc: list[int] = field(default_factory=lambda: [10])            @dataclass    class Example:        &quot;&quot;&quot;Example config.&quot;&quot;&quot;            ml: ML = ML()        x: bool = True        a: int | None = None        config = from_dataclass(Example()).config        print(config)        # If autocomplete is not working, try to add the following line to your config file:    from typing import cast    config = cast(Example, config)You can access the config as namedtuple.    &gt; python config.py --ml.cc 10 10 --ml.lr 0.001 --no-x --a &quot;1&quot;    Example(ml=ML(lr=0.001, train=Train(batch_size=64), cc=[10, 10]), x=False, a=1)Also, auto generate help message with default value.    &gt; python config.py --help    Usage: config.py [-h] [--ml.lr float] [--ml.train.batch_size int] [--ml.cc int [int ...]] [--x | --no-x] [--a int]        Example config.        Options:      -h, --help            show this help message and exit      --x, --no-x           - (default: True)      --a int               - (default: None)        Ml:      --ml.lr float         learning rate (default: 0.001)      --ml.cc int [int ...]                            - (default: [10])        Ml.Train:      --ml.train.batch_size int                            - (default: 64)&lt;a id=&quot;org23895a3&quot;&gt;&lt;/a&gt;# Install    pip install -U smile_config&lt;a id=&quot;org8eb203f&quot;&gt;&lt;/a&gt;# Usage&lt;a id=&quot;org5bad762&quot;&gt;&lt;/a&gt;## Dataclass to command line options&lt;a id=&quot;org81fda4d&quot;&gt;&lt;/a&gt;### Simple typesEverything that argpase can handle.  `int`, `float`, `str`, `bool`, and callable object.    @dataclass    class Simple:        a: int = 1        b: float = 2.0        c: str = &quot;hello&quot;        d: bool = False        e: list[int] = field(default_factory=lambda: [10])Will convert to:    parser.add_argument(&quot;--a&quot;, help=&quot;-&quot;, type=int, default=1)    parser.add_argument(&quot;--b&quot;, help=&quot;-&quot;, type=float, default=2.0)    parser.add_argument(&quot;--c&quot;, help=&quot;-&quot;, type=str, default=&quot;hello&quot;)    parser.add_argument(&quot;--d&quot;, help=&quot;-&quot;, type=bool, default=False, action=&quot;store_true&quot;)    parser.add_argument(&quot;--e&quot;, help=&quot;-&quot;, type=int, default=[10], nargs=&quot;+&quot;)&lt;a id=&quot;org4a69be6&quot;&gt;&lt;/a&gt;### Complex typesSmile config uses `Annotation` to handle complex types, which will passthe second argument to `parser.add_argument`.    @dataclass    class C:        x: Annotated[int, &quot;Helps for x.&quot;] = 1See the logic here:The first argument is the type, e.g. `int`.if the second argument is `str`, e.g. `s`, it will be passed as `parser.add_argument(&quot;--x&quot;, help=s, ...)`.If the second argument is a `list`, e.g. `args`, it will be passed as `parser.add_argument(&quot;--x&quot;, ..., *args)`.If the second argument is a `dict`, e.g. `kwds`, it will be passed as `parser.add_argument(&quot;--x&quot;, ..., **kwds)`.&lt;a id=&quot;orgab0dd51&quot;&gt;&lt;/a&gt;### Private fieldsFields that start with `_` will be ignored.  Thus, please initialize it by default or in \`\_\_post\_init\_\_\`.&lt;a id=&quot;org7d8971d&quot;&gt;&lt;/a&gt;### Nested dataclassOf course! It does support nested dataclass.    @dataclass    class A:        a: int = 1        @dataclass    class B:        a: A = A()        @dataclass    class C:        a: A = A()        b: B = B()        c: int = 0        _d: str = &quot;private _d&quot;            print(from_dataclass(C()).config)        # Output:    # C(a=A(a=1), b=B(a=A(a=1)), c=0, _d=&quot;private _d&quot;)&lt;a id=&quot;org5c599ba&quot;&gt;&lt;/a&gt;## APIsSmile config provides four APIs:    class Config:            # the dataclass dict        self.conf            # the dataclass        self.config        # Generate command line options from dataclass.    # For formatter: `from rich_argparse import RichHelpFormatter`    # `ns`: namespaces for types.    def from_dataclass(dc: Dataclass, *, formatter: HelpFormatter = RichHelpFormatter, ns: dict | None = None) -&gt; Config:...        # Convert dict to an existing dataclass    def from_dict(dc: Type[Dataclass], d: dict) -&gt; Dataclass:...        # Merge a dict with an existing dataclass instance    def merge_dict(dc: Dataclass, d: dict) -&gt; Dataclass:...&lt;a id=&quot;org5a05700&quot;&gt;&lt;/a&gt;### Example    @dataclass    class Eg:        a: int = 1        b: bool = False        conf = from_dataclass(Eg())        print(conf)  # Config    # output: Eg(a=1, b=False)        print(conf.conf)  # dict    # output: {'a': 1, 'b': False}        print(conf.config)  # Eg    # output: Eg(a=1, b=False)        conf_dc = from_dict(Eg, {&quot;a&quot;: 2, &quot;b&quot;: True})  # Type[Eg] -&gt; dict -&gt; Eg    print(conf_dc)    # output: Eg(a=2, b=True)        conf_merge = merge_dict(conf_dc, {&quot;a&quot;: 3})  # Eg -&gt; dict -&gt; Eg    print(conf_merge)    # output: Eg(a=3, b=True)</longdescription>
</pkgmetadata>