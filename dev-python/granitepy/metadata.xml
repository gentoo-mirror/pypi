<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># granitepygranitepy is a python wrapper for the [Lavalink](https://github.com/Frederikam/Lavalink) like audio provider called [Andesite](https://github.com/natanbc/andesite-node) for use with [discord.py](https://github.com/Rapptz/discord.py).## Links* [Discord support server](https://discord.gg/xP8xsHr)* [Documentation](https://granitepy.readthedocs.io/en/latest/index.html)# InstallationFrom Pypi```shell scriptpip install -U granitepy```From Github```shell scriptpip install -U git+https://github.com/iDevision/granitepy```# Example```pythonfrom discord.ext import commandsimport granitepybot = commands.Bot(command_prefix = &quot;!&quot;)bot.granitepy = granitepy.Client(bot)@bot.eventasync def on_ready():    await bot.granitepy.create_node(        host=&quot;node-ip&quot;,        port=12345,        password=&quot;node-password&quot;,        identifier=&quot;node-name&quot;    )@bot.command()async def connect(ctx):    # Create or fetch a player.    player = bot.granitepy.get_player(guild=ctx.guild)    # Check is the author is in a voice channel.    if not ctx.author.voice:        return await ctx.send(&quot;You must be connected to a voice channel&quot;)    # Connect to the authors voice channel.    await player.connect(ctx.author.voice.channel)    return await ctx.send(f&quot;Connected to {ctx.author.voice.channel.name}!&quot;)@bot.command()async def play(ctx, *, search):    player = bot.granitepy.get_player(guild=ctx.guild)    # Search for whatever the user has inputted.    result = await player.get_tracks(search)    # The users search returned nothing.    if not result:        return await ctx.send(&quot;No tracks were found.&quot;)    # Check if the result is a playlist.    if isinstance(result, granitepy.Playlist):        # Play the first track in the playlist.        return await player.play(result.tracks[0])    else:        # Play the first track in the list of results.        return await player.play(result[0])bot.run(&quot;token&quot;)```</longdescription>
</pkgmetadata>