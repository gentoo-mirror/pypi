<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>If you're a library or framework creator then it is nice to be able to createAPIs that can be used *either* as decorators or context managers.The contextdecorator module is a backport of new features added to the`contextlib module &lt;http://docs.python.org/library/contextlib.html&gt;`_ in Python 3.2. contextdecorator works with Python 2.4+ including Python 3.Context managers inheriting from ``ContextDecorator`` have to implement ``__enter__`` and ``__exit__`` as normal. `__exit__ &lt;http://docs.python.org/reference/datamodel.html#object.__exit__&gt;`_ retains its optional exception handling even when used as a decorator.Example::   from contextdecorator import ContextDecorator   class mycontext(ContextDecorator):      def __enter__(self):         print 'Starting'         return self      def __exit__(self, *exc):         print 'Finishing'         return False   &gt;&gt;&gt; @mycontext()   ... def function():   ...    print 'The bit in the middle'   ...   &gt;&gt;&gt; function()   Starting   The bit in the middle   Finishing   &gt;&gt;&gt; with mycontext():   ...    print 'The bit in the middle'   ...   Starting   The bit in the middle   FinishingExisting context managers that already have a base class can be extended byusing ``ContextDecorator`` as a mixin class::   from contextdecorator import ContextDecorator   class mycontext(ContextBaseClass, ContextDecorator):      def __enter__(self):         return self      def __exit__(self, *exc):         return Falsecontextdecorator also contains an implementation of `contextlib.contextmanager&lt;http://docs.python.org/library/contextlib.html#contextlib.contextmanager&gt;`_that uses ``ContextDecorator``. The context managers it creates can be used asdecorators as well as in with statements. ::   from contextdecorator import contextmanager      @contextmanager   def mycontext(*args):      print 'Started'      try:         yield      finally:         print 'Finished!'   &gt;&gt;&gt; @mycontext('some', 'args')   ... def function():   ...    print 'In the middle'   ...    Started   In the middle   Finished!      &gt;&gt;&gt; with mycontext('some', 'args'):   ...    print 'In the middle'   ...    Started   In the middle   Finished!Repository and issue tracker:* `contextdecorator on google code &lt;http://code.google.com/p/contextdecorator/&gt;`_The project is available for download from `PyPI&lt;http://pypi.python.org/pypi/contextdecorator&gt;`_so it can be easily installed:    | ``pip install -U contextdecorator``    | ``easy_install -U contextdecorator``The tests require `unittest2 &lt;http://pypi.python.org/pypi/unittest2&gt;`_to run.</longdescription>
</pkgmetadata>