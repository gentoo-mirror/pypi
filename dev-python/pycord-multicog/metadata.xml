<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pycord-multicogA pycord extension that allows splitting command groups into multiple cogs.## Installation```sh$ pip install pycord-multicog```## Usage### Creating cogs```py# cog number 1, a normal cog with a slash command groupclass Cog1(Cog):    group = SlashCommandGroup(&quot;group&quot;)    @group.command()    async def subcommand1(self, ctx):        await ctx.respond(&quot;This is a normal subcommand.&quot;)# cog number 2, has a command used with add_to_groupfrom pycord.multicog import add_to_groupclass Cog2(Cog):    @add_to_group(&quot;group&quot;)  # the decorator that does the magic    @slash_command()    async def subcommand2(self, ctx):        await ctx.respond(&quot;This subcommand is inside a different cog.&quot;)```### Applying multicog using apply_multicog```pyfrom pycord.multicog import apply_multicogmy_bot.add_cog(Cog1())my_bot.add_cog(Cog2())...apply_multicog(my_bot)  # manually apply multicog after cogs are loaded```### Applying multicog using Bot subclass```pyfrom pycord.multicog import Botmy_bot = Bot()  # will automatically apply multicog when commands are being synchronised```</longdescription>
</pkgmetadata>