<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>``pprint++``: a drop-in replacement for ``pprint`` that's actually pretty=========================================================================.. image:: https://travis-ci.org/wolever/pprintpp.svg?branch=master    :target: https://travis-ci.org/wolever/pprintppNow with Python 3 support!Installation------------``pprint++`` can be installed with Python 2 or Python 3 using ``pip`` or``easy_install``::    $ pip install pprintpp    - OR -    $ easy_install pprintppUsage-----``pprint++`` can be used in three ways:1. Through the separate ``pp`` package::    $ pip install pp-ez    $ python    ...    &gt;&gt;&gt; import pp    &gt;&gt;&gt; pp([&quot;Hello&quot;, &quot;world&quot;])    [&quot;Hello&quot;, &quot;world&quot;]   For more, see https://pypi.python.org/pypi/pp-ez2. As a command-line program, which will read Python literals from standard in   and pretty-print them::    $ echo &quot;{'hello': 'world'}&quot; | pypprint    {'hello': 'world'}3. As an `ipython &lt;https://github.com/ipython/ipython&gt;`_ extension::    In [1]: %load_ext pprintpp      This will use pprintpp for ipython's output.      To load this extension when ipython starts, put the previous line in your `startup file &lt;https://ipython.org/ipython-doc/1/config/overview.html#startup-files&gt;`_.      You can change the indentation level like so::        In [2]: %config PPrintPP.indentation = 4 4. To monkeypatch ``pprint``::    &gt;&gt;&gt; import pprintpp    &gt;&gt;&gt; pprintpp.monkeypatch()    &gt;&gt;&gt; import pprint    &gt;&gt;&gt; pprint.pprint(...)   Note: the original ``pprint`` module will be available with ``import   pprint_original``. Additionally, a warning will be issued if ``pprint`` has   already been imported. This can be suppressed by passing ``quiet=True``.5. And, if you *really* want, it can even be imported as a regular module:   &gt;&gt;&gt; import pprintpp   &gt;&gt;&gt; pprintpp.pprint(...)Usability Protips-----------------``pp``~~~~~~For bonus code aesthetics, ``pprintpp.pprint`` can be imported as ``pp``:.. code:: pycon    &gt;&gt;&gt; from pprintpp import pprint as pp    &gt;&gt;&gt; pp(...)And if that is just too many letters, the ``pp-ez`` package can be installedfrom PyPI, ensuring that pretty-printing is never more than an ``import pp``away::    $ pip install pp-ez    $ python    ...    &gt;&gt;&gt; import pp    &gt;&gt;&gt; pp([&quot;Hello&quot;, &quot;world&quot;])    [&quot;Hello&quot;, &quot;world&quot;]For more, see https://pypi.python.org/pypi/pp-ezWhy is it prettier?-------------------Unlike ``pprint``, ``pprint++`` strives to emit a readable, largelyPEP8-compliant, representation of its input.It also has explicit support for: the ``collections`` module (``defaultdict``and ``Counter``) and ``numpy`` arrays:.. code:: pycon    &gt;&gt;&gt; import numpy as np    &gt;&gt;&gt; from collections import defaultdict, Counter    &gt;&gt;&gt; pprint([np.array([[1,2],[3,4]]), defaultdict(int, {&quot;foo&quot;: 1}), Counter(&quot;aaabbc&quot;)])    [        array([[1, 2],               [3, 4]]),        defaultdict(&lt;type 'int'&gt;, {'foo': 1}),        Counter({'a': 3, 'b': 2, 'c': 1}),    ]Unicode characters, when possible, will be printed un-escaped. This is done bychecking both the output stream's encoding (defaulting to ``utf-8``) and thecharacter's Unicode category. An effort is made to print only characters whichwill be visually unambiguous: letters and numbers will be printed un-escaped,spaces, combining characters, and control characters will be escaped:.. code:: pycon    &gt;&gt;&gt; unistr = u&quot;\xe9e\u0301&quot;    &gt;&gt;&gt; print unistr    éé    &gt;&gt;&gt; pprint(unistr)    u'ée\u0301'The output stream's encoding will be considered too:.. code:: pycon    &gt;&gt;&gt; import io    &gt;&gt;&gt; stream = io.BytesIO()    &gt;&gt;&gt; stream.encoding = &quot;ascii&quot;    &gt;&gt;&gt; pprint(unistr, stream=stream)    &gt;&gt;&gt; print stream.getvalue()    u'\xe9e\u0301'Subclassess of built-in collection types which don't define a new ``__repr__``will have their class name explicitly added to their repr. For example:.. code:: pycon    &gt;&gt;&gt; class MyList(list):    ...     pass    ...    &gt;&gt;&gt; pprint(MyList())    MyList()    &gt;&gt;&gt; pprint(MyList([1, 2, 3]))    MyList([1, 2, 3])Note that, as you might expect, custom ``__repr__`` methods will be respected:.. code:: pycon    &gt;&gt;&gt; class MyList(list):    ...     def __repr__(self):    ...         return &quot;custom repr!&quot;    ...    &gt;&gt;&gt; pprint(MyList())    custom repr!**Note**: ``pprint++`` is still under development, so the format *will* changeand improve over time.Example~~~~~~~With ``printpp``:.. code:: pycon    &gt;&gt;&gt; import pprintpp    &gt;&gt;&gt; pprintpp.pprint([&quot;Hello&quot;, np.array([[1,2],[3,4]])])    [        'Hello',        array([[1, 2],               [3, 4]]),    ]    &gt;&gt;&gt; pprintpp.pprint(tweet)    {        'coordinates': None,        'created_at': 'Mon Jun 27 19:32:19 +0000 2011',        'entities': {            'hashtags': [],            'urls': [                {                    'display_url': 'tumblr.com/xnr37hf0yz',                    'expanded_url': 'http://tumblr.com/xnr37hf0yz',                    'indices': [107, 126],                    'url': 'http://t.co/cCIWIwg',                },            ],            'user_mentions': [],        },        'place': None,        'source': '&lt;a href=&quot;http://www.tumblr.com/&quot; rel=&quot;nofollow&quot;&gt;Tumblr&lt;/a&gt;',        'truncated': False,        'user': {            'contributors_enabled': True,            'default_profile': False,            'entities': {'hashtags': [], 'urls': [], 'user_mentions': []},            'favourites_count': 20,            'id_str': '6253282',            'profile_link_color': '0094C2',        },    }Without ``printpp``::    &gt;&gt;&gt; import pprint    &gt;&gt;&gt; import numpy as np    &gt;&gt;&gt; pprint.pprint([&quot;Hello&quot;, np.array([[1,2],[3,4]])])    ['Hello', array([[1, 2],           [3, 4]])]    &gt;&gt;&gt; tweet = {'coordinates': None, 'created_at': 'Mon Jun 27 19:32:19 +0000 2011', 'entities': {'hashtags': [], 'urls': [{'display_url': 'tumblr.com/xnr37hf0yz', 'expanded_url': 'http://tumblr.com/xnr37hf0yz', 'indices': [107, 126], 'url': 'http://t.co/cCIWIwg'}], 'user_mentions': []}, 'place': None, 'source': '&lt;a href=&quot;http://www.tumblr.com/&quot; rel=&quot;nofollow&quot;&gt;Tumblr&lt;/a&gt;', 'truncated': False, 'user': {'contributors_enabled': True, 'default_profile': False, 'entities': {'hashtags': [], 'urls': [], 'user_mentions': []}, 'favourites_count': 20, 'id_str': '6253282', 'profile_link_color': '0094C2'}}     &gt;&gt;&gt; pprint.pprint(tweet)    {'coordinates': None,     'created_at': 'Mon Jun 27 19:32:19 +0000 2011',     'entities': {'hashtags': [],                  'urls': [{'display_url': 'tumblr.com/xnr37hf0yz',                            'expanded_url': 'http://tumblr.com/xnr37hf0yz',                            'indices': [107, 126],                            'url': 'http://t.co/cCIWIwg'}],                  'user_mentions': []},     'place': None,     'source': '&lt;a href=&quot;http://www.tumblr.com/&quot; rel=&quot;nofollow&quot;&gt;Tumblr&lt;/a&gt;',     'truncated': False,     'user': {'contributors_enabled': True,              'default_profile': False,              'entities': {'hashtags': [], 'urls': [], 'user_mentions': []},              'favourites_count': 20,              'id_str': '6253282',              'profile_link_color': '0094C2'}}</longdescription>
</pkgmetadata>