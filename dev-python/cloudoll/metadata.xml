<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cloudoll 云端玩具## 更新日志`0.1.6` 2022-11-03- orm 允许更新为空数据- server 文件上传加入大小限制- smtp 出错异常处理`0.1.5` 2022-09-19- 修复logging level 错误的问题- 修正默认依赖 `0.1.4` 2022-09-12- 优化orm 超时的问题- 增加websocket 支持## 安装```sh#for python3 pip install cloudoll# orpip3 install cloudoll```[Docs](https://www.chuchur.com/article/cloudoll-for-python)## Server假设项目目录结构如下：```├─controllers│  ├─__init__.py│  ├─api│  │  ├─message.py│  │  └─__init__.py│  ├─view│  │  ├─errors.py│  │  ├─home.py│  │  └─__init__.py├─static│  ├─css│  │  └─index.css│  ├─img│  │  └─logo.png│  ├─js│  │  └─comment.js├─template│  │  ├─404.html│  │  ├─500.html│  │  └─index.html│  └─layout│      ├─footer.html│      ├─header.html│      └─index.html├─app.py├─configs.py└─models.py```### 初始化```pythonfrom cloudoll.web.server import serverasync def init(loop=None):  # await mysql.connect(loop, **MYSQL) # 可以在这里初始化orm  # tem_path = os.path.join(os.path.abspath(&quot;.&quot;), &quot;template&quot;)  # static = os.path.join(os.path.abspath(&quot;.&quot;), &quot;static&quot;)  server.create(          loop=loop,          # template=tem_path, #模板目录,可选          # static=static, # 静态资源 ,测试用          controllers=&quot;controllers&quot;, # 路由目录，路由会自动注册          middlewares=[], # 中间件，可选          client_max_size=1024*10*2 # 最大上传2MB 文件 ，，可选      )  await server.run(port=9000)if __name__ == &quot;__main__&quot;:    loop = asyncio.new_event_loop()    loop.run_until_complete(init(loop))    loop.run_forever()```### Rest API#### get , post, delete ,put```python# /controllers/api/message.pyfrom cloudoll.web.server import get,post,delete,put ,jsons#get@get('/v2/message/list')async def list(request,fm):  return jsons(dict(code=1, msg='ok'))#post@post('/v2/message/list')async def list(request,fm):  return jsons(dict(code=1, msg='ok'))#delete@delete('/v2/message/list')async def list(request,fm):  return jsons(dict(code=1, msg='ok'))#get@get('/v2/message/list')async def list(request,fm):  return jsons(dict(code=1, msg='ok'))#put@put('/v2/message/list')async def list(request,fm):  return jsons(dict(code=1, msg='ok'))```访问 http://127.0.0.1:9000/v2/message/list , 返回：```json{  &quot;code&quot;: 1,  &quot;msg&quot;: &quot;ok&quot;}```#### 传参formdata ，body ,还是url 传参 ,都通过路由第二个值接收```javascript// 前端var data = new FormData()data.append('a',1)data.append('b',2)$.post('/v2/message/list?id=1&amp;age=20',data=data)``````python# url = '/v2/message/list'@get('/v2/message/list')async def list(request,fm):  id = fm['id'] # 1  age = fm['age']  # 20  a = fm['a'] # 1  b = fm['b'] # 2  return jsons(dict(code=1, msg='ok'))```####  上传文件```pythonfrom cloudoll.web.server import post , jsons@post('/v2/upload/image')async def upload_image(request,fm):    file = fm['file']    if not file:        return jsons(dict(code='00001', msg='请上传图片'))    if not file.content_type.startswith('image'):        return jsons(dict(code='00002', msg='只支持图片上传'))    content = file.file.read()    savepath = '/home/chuchur/123.jpg'    with open(savepath, 'wb') as f:        f.write(content)    return jsons(dict(code=0, msg='ok'))```#### 动态路由```python@get('/v2/message/{id}')async def list(request,fm):  id = request.route[&quot;id&quot;] #取得路由id 值  return jsons(dict(code=1, msg='ok'))```#### Websocket```pythonfrom cloudoll.web.server import get, WebSocket@get(&quot;/v2/ws/test&quot;)async def getrecord(req, fm):    ws = WebSocket() # 初始化 WebSocket    await ws.prepare(req)    async for msg in ws:        if msg.type == 1:            text = msg.data # 收到客户端的消息            if text == &quot;close&quot;:                await ws.close()            else:                await ws.send_str('收到消息：'+text) #给客户端发送消息        elif msg.type == 258:            print(&quot;ws connection closed with exception %s&quot; % ws.exception())    print(&quot;websocket connection closed&quot;)    return ws```#### `Seesion````pythonfrom cloudoll.web.server import get@get('/test')async def test(request,fm):  #读取Seesion  a = request.session.get('a')  #设置Seesion  request.session['a'] = 'test'```#### JWTJSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案。```pythonfrom cloudoll.web.server import post, jsonsimport cloudoll.web.jwt as jwtAUTH_KEY = 'fjkdsal&amp;*(%^^&amp;'@post('/v2/login')async def test(request,fm):  # ...  # 如果账号密码匹配成功  user = {    &quot;nick&quot;: &quot;chuchur&quot;,    &quot;uid&quot;: 100  }  # 加密存储  token = jwt.encode( user, AUTH_KEY, exp=3600 * 24 * 2 ) #有效期两天  # 返回加密后的 token  return jsons(dict(code=0 , msg= 'ok' ,token=token))```#### 中间件下面是个登录验证的例子：```pythonfrom cloudoll.web.server import server, middleware, redirectimport cloudoll.web.jwt as jwtAUTH_KEY = 'fjkdsal&amp;*(%^^&amp;'def create_middleware():    &quot;&quot;&quot;    验证token 有效性    &quot;&quot;&quot;    @middleware    async def middlewares(request, handler):        try:            if request.path.startswith(&quot;/v2&quot;) and request.path != &quot;/v2/login&quot;:                token = request.headers[&quot;Authorization&quot;]                if not token:                    return jsons(dict(code=&quot;00001&quot;, msg=&quot;登录失效&quot;), status=403)                else:                    token = token.replace(&quot;bearer&quot;, &quot;&quot;).strip()                    user = jwt.decode(token, AUTH_KEY) # JWT解密 token                    if not user:                        return jsons(dict(code=&quot;00001&quot;, msg=&quot;登录失效&quot;), status=403)                    else:                        request.__user__ = user # 部分数据避免再次查询可以存储起来            return await handler(request)        except Exception as e:            logging.error(e)            if hasattr(e, &quot;status&quot;) and e.get(&quot;status&quot;) == 404:                return jsons(dict(code=&quot;00004&quot;, msg=&quot;数据被外星人偷走了！&quot;), status=404)                # or                # return redirect(&quot;/404&quot;)            else:                return jsons(dict(code=&quot;00005&quot;, msg=&quot;工程师被外星人偷走了！&quot;), status=500)                # or                # return redirect(&quot;/500&quot;)            raise    return middlewaresasync def init(loop=None):    # await mysql.connect(loop, **MYSQL) # 可以在这里初始orm    tem_path = os.path.join(os.path.abspath(&quot;.&quot;), &quot;template&quot;)    # static = os.path.join(os.path.abspath(&quot;.&quot;), &quot;static&quot;)    server.create(        loop=loop,        template=tem_path,        # static=static,        controllers=&quot;controllers&quot;,        middlewares=[create_middleware()], # 可以有多个中间件    )    await server.run(port=9000)if __name__ == &quot;__main__&quot;:    loop = asyncio.get_event_loop()    loop.run_until_complete(init(loop))    loop.run_forever()```### 视图模板默认模板引擎为 jinja2```pythonfrom cloudoll.web.server import get, view@get('/')async def home(request, fm):    data = {      &quot;user_name&quot;:&quot;chuchur&quot;,      &quot;age&quot;: 28    }    return view(        template=&quot;index.html&quot;, #模板名称        data=data    )```数据渲染```html&lt;!-- index.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt;  &lt;title&gt;cloudoll demo&lt;/title&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt;  姓名：{{ data.user_name }} &lt;br/&gt;  年龄：{{ data.age }}&lt;/body&gt;&lt;/html&gt;```#### `Cookie`cookie 渲染视图时可用```pythonfrom cloudoll.web.server import get, view@get('/')async def home(request, fm):    data = {      &quot;user_name&quot;:&quot;chuchur&quot;,      &quot;age&quot;: 28    }    v = view(        template=&quot;index.html&quot;, #模板名称        data=data    )    # 读取 Cookie    a =  request.cookies.get('a')    # 设置 Cookie 24 小时    v.set_cookie('a','100' ,max_age=86400 ,httponly=True)    # 设置 Cookie 过期    v.set_cookie('a','-deleted-' ,max_age=0 ,httponly=True)    return v```## Orm假定数据模型如下：```pythonclass Users(Model):__table__ = 'users'id = models.IntegerField(primary_key=True,auto_increment=True,not_null=True,comment='主键')user_name = models.CharField(max_length='255',not_null=True,comment='登录用户名')password = models.CharField(max_length='255',not_null=True,comment='登录密码')age = models.IntegerField(comment='年龄')```&gt; 数据模型可以通过全局api `tables2models` 生成，接口说明在后面&gt; ### 初始化```pythonfrom cloudoll.orm import mysqlMYSQL = {    &quot;debug&quot;: False,    &quot;db&quot;: {        &quot;host&quot;: &quot;127.0.0.1&quot;,        &quot;port&quot;: 3306,        &quot;user&quot;: &quot;root&quot;,        &quot;password&quot;: &quot;abcdefg&quot;,        &quot;db&quot;: &quot;test&quot;,        &quot;charset&quot;:&quot;utf8mb4&quot;    }}await mysql.connect(loop=None,**MYSQL)table_name = 'user'```### 模型API#### 分页查询```pythonpage = 1size = 20items = await Users.findAll(where=&quot;uid=?&quot; ,              cols=['id'], #列，默认*              limit=size,              offset=(page-1) * size              orderBy=&quot;id desc&quot;              params=[100])```#### 主键查询```python# 查询id为2的用户item = await Users(id=2).find()```#### 条件查询```python# 查询id为2 ， user_name 为chuchur的用户item = await Users(id=2, user_name=&quot;chuchur&quot;).findBy()```#### 主键更新```python# 更新id为2的用户，把user_name 更新为chuchuritem = await Users(id=2, user_name=&quot;chuchur&quot;).update()# oritem = await Users(id=2, user_name=&quot;chuchur&quot;).save()```#### 条件更新```python# 更新user_name 包含 mayun 的用户, 把user_name 更新为 啤酒云result = await Users.updateAll(       where=&quot;user_name like %?%&quot; ,       params=['mayun'] ,      user_name=&quot;啤酒云&quot;)```#### 主键删除```python# 删除id为2的用户result = await Users(id=2).delete()```#### 条件删除```python# 删除user_name 包含 mayun 的用户result = await Users.deleteAll(where=&quot;user_name like %?%&quot; , params=['mayun'])```#### 新增```python# 包含主键会 执行更新，不包含执行新增user = {  &quot;user_name&quot;:&quot;chuchur&quot;,  &quot;password&quot;:&quot;1234&quot;,  &quot;age&quot;:28}result = await Users(**user).save()```#### 统计```python# 统计id大于30的用户count = await Users.count(where=&quot;id&gt;30&quot;)# output 30```#### 判断存在```python# 判断id为1的用户 是否存在result = await Users.exists(where=&quot;uid=1&quot;)# output True or False```### 全局API#### 分页查询```pythonres = msyql.findAll(table_name ,    cols:['uid','age'],    where=&quot;age&gt;? and name like %?% &quot;,    limit=10,    offset=20 ,    params=[15,'mayun'])for item in res:  print(item)```#### 唯一查询```pythonitem = mysql.find(table_name,where=&quot;uid=1&quot;)```#### 条件唯一查询```python# findBy(table_name,key,value)item = mysql.findBy(table_name,'uid',1)```#### 新增```pythondata = {  &quot;name&quot;: '马云',  &quot;age&quot;: 1}result = mysql.insert(table_name,**data)print(result)# output : { id: 101}```#### 修改```pythondata = {  &quot;id&quot;:100,  &quot;name&quot;: '马云',  &quot;age&quot;: 1}# pk 为主键result = mysql.update(table_name,pk=id, **data)print(result)# output : True```#### 保存```pythondata = {  &quot;id&quot;:100,  &quot;name&quot;: '马云',  &quot;age&quot;: 1}# pk 为主键,有主键会自动执行更新，否则为新增result = mysql.save(table_name,pk=id, **data)print(result)# output : True```#### 删除```pythonresult = mysql.delete(table_name,where=&quot;uid=100&quot;)print(result)# output : True```#### 统计```pythonresult = mysql.count(table_name,where=&quot;age&gt;30&quot;)print(result)# output : 100```#### 批量修改```python# 符合条件的数据的 name 修改为 啤酒云result = mysql.updateAll(table_name,        where=&quot;name=? and age=1&quot; ,        params=['mayun'] ,        name=&quot;啤酒云&quot;)print(result)# output : True```#### 判断```pythonresult = mysql.exists(table_name,        where=&quot;name=? and age=1&quot; ,        params=['mayun'] ,        name=&quot;马云&quot;)print(result)# output : True```#### Table 转 Modelsql 如下：```sqlDROP TABLE IF EXISTS `users`;CREATE TABLE `users`  (  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',  `user_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '登录用户名',  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '登录密码',  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '头像',  `type` int NOT NULL DEFAULT 1 COMMENT '账户类型',  `state` int NOT NULL DEFAULT 1 COMMENT '账户状态',  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',  `last_login_ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '最后登录IP',  `nick_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '帐号昵称',  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '联系邮件',  `birthday` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '生日',  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;SET FOREIGN_KEY_CHECKS = 1;```执行建表sql 之后，就可以通过 `tables2models` 把表转为 models```python# tables2models([表1,表2...],模型保存路径)# 不传表，将导出所有的表模型await mysql.tables2models(['users'],savepath= '/home/chuchur/models.py')```得到数据模型：```pythonfrom cloudoll.orm.mysql import models, Modelclass Users(Model):__table__ = 'users'id = models.IntegerField(primary_key=True,auto_increment=True,not_null=True,comment='主键')user_name = models.CharField(max_length='255',not_null=True,comment='登录用户名')password = models.CharField(max_length='255',not_null=True,comment='登录密码')avatar = models.CharField(max_length='255',comment='头像')user_type = models.IntegerField(default='1',not_null=True,comment='账户类型')state = models.IntegerField(default='1',not_null=True,comment='账户状态')created_at = models.DatetimeField(default='CURRENT_TIMESTAMP',not_null=True,comment='创建时间')last_login_ip = models.CharField(max_length='255',comment='最后登录IP')nick_name = models.CharField(max_length='255',comment='帐号昵称')email = models.CharField(max_length='255',comment='联系邮件')birthday = models.CharField(max_length='255',comment='生日')```## http 爬虫模块### 爬取网页```pythonfrom cloudoll.web import httpresult  =  http.get('https://baidu.com')print(result)# output:  &lt;html&gt;....&lt;/html&gt;```### 请求rest api支持  post ,delete , put ,head ,option```python# 错误次数 尝试5次json = http.get('https://api.xxxx.com/v2/xxxx' ,trytimes=5)print(json)# output : { code: 0, message: 'ok'}```### 传参```python# get url 传参params=dict(a=1,b=2)http.get('https://api.xxxx.com/v2/xxxx',params=params)# get payload 传参params=dict(a=1,b=2)http.get('https://api.xxxx.com/v2/xxxx',data=params)# post 传参data=dict(a=1,b=2)http.get('https://api.xxxx.com/v2/xxxx',json=data)# 上传文件def upload():    path = '/home/chuchur/123.jpg'    with open(path, &quot;rb&quot;) as f:        files = {&quot;file&quot;: f}        # or        # files = {&quot;file&quot;: f, &quot;a&quot;: (None, 1), &quot;file_type&quot;: (None, 'image')}        headers = {&quot;authorization&quot;: AUTH}        req = http.post(            &quot;https://xxx.abc.com/v1/api/upload&quot;,            files=files,            data={&quot;a&quot;: 1 , &quot;file_type&quot;: &quot;image&quot; }, # 带其它参数            headers=headers,        )        if req[&quot;code&quot;] == 0:            logging.info(&quot;upload ok&quot;)            return True        else:            logging.info(&quot;upload faild&quot;)            return False```### html 简易解析器```pythonfrom cloudoll.web.html import parserfrom cloudoll.web import httpresult  =  http.get('https://baidu.com')print(result)# output:  &lt;html&gt;....&lt;/html&gt;ps = parser().parser(result)# 拿到所有 texttext = ps.text# 拿到所有 图片链接images = ps.images# 拿到所有 视频链接videos = ps.videos```### 下载文件```pythonsrc = 'https://www.baidu.com/img/flexible/logo/pc/result.png'savepath = '/home/chuchur/download/baidu-logo.png'http.download(src,savepath)```### 代理/头/cookies```pythonurl = 'https://xxx.xxx.com'proxies = {  'http':'127.0.0.1',  'https':'127.0.0.1'}headers = {  'token':'xxxxxx'}cookies = {  'username':'admin'}data = http.get(url,headers=headers ,cookies=cookies ,proxies=proxies)```## logging日志辅助 ，生成日志文件， 控制台打印彩色文字```python# /home/chuchur/work/test.pyfrom cloudoll import logginglogging.getLogger(__name__)# or# logging.getLogger(__file__)logging.debug('I am debug...')logging.info('I am info...')logging.warning('I am warning...')logging.error('I am error...')logging.critical('I am critical...')```控制台：![log_demo.png](log_demo.png)日志文件：**-all.log```log2022-07-26 18:36:27-root-__init__.py-[line:151]-DEBUG-[日志信息]: I am debug...2022-07-26 18:36:27-root-__init__.py-[line:149]-INFO-[日志信息]: I am info...2022-07-26 18:36:27-root-__init__.py-[line:153]-WARNING-[日志信息]: I am warning...2022-07-26 18:36:27-root-__init__.py-[line:155]-ERROR-[日志信息]: I am error...2022-07-26 18:36:27-root-__init__.py-[line:157]-CRITICAL-[日志信息]: I am critical...```日志文件：**-error.log```log2022-07-26 18:36:27-root-__init__.py-[line:155]-ERROR-[日志信息]: I am error...```## Mail快速配置发送邮件```python# test_mail.pyfrom cloudoll.mail import smtpMAIL = {    &quot;smtp_server&quot;: &quot;smtp.qq.com&quot;,    &quot;account&quot;: &quot;123456789@qq.com&quot;,    &quot;account_name&quot;: &quot;chuchur&quot;,    &quot;password&quot;: &quot;abcdefg&quot;,    &quot;prot&quot;: 465,  # 587    &quot;debug_level&quot;: 1,}client = smtp.Client(**MAIL)# 标题client.subject = &quot;test title&quot;# 正文client.content = &quot;long long ago...&quot;#收件人client.add_to_addr(&quot;chuchur&quot;, &quot;chuchur@qq.com&quot;)# 发送client.send()```### 多个收件人```pythonclient.add_to_addr(&quot;李彦宏&quot;, &quot;liyanhong@baidu.com&quot;)client.add_to_addr(&quot;马云&quot;, &quot;jackma@alibaba.com&quot;)```### 附件```pythonfilepathA = '/home/chuchur/img/a.jpg'filepathB = '/home/chuchur/img/b.jpg'client.addfile(filepathA)client.addfile(filepathB)```### 嵌入html 和 html 调用附件```pythonclient.addfile(&quot;/home/chuchur/img/a.jpg&quot;) # cid 0client.addfile(&quot;/home/chuchur/img/b.jpg&quot;) # cid 1client.addhtml(&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&quot; + '&lt;p&gt;&lt;img src=&quot;cid:0&quot;&gt;&lt;img src=&quot;cid:1&quot;&gt;&lt;/p&gt;' + &quot;&lt;/body&gt;&lt;/html&gt;&quot;)```## Robot快速接入 钉钉，飞书机器人### 钉钉机器人```pythonfrom cloudoll.robot import dingtalkwebhook = '机器人地址'secret = '机器人密钥'access_token = '机器人token' # 可以不设定,上传文件必填client = dingtalk.Client(    webhook=webhook,    secret=secret,    access_token=access_token,)client.sendtext(&quot;代码出bug了！&quot;)```### 飞书机器人```pythonfrom cloudoll.robot import feishuwebhook = '机器人地址'secret = '机器人密钥'client = feishu.Client(    webhook=webhook,    secret=secret,)client.sendtext(&quot;代码出bug了！&quot;)```</longdescription>
</pkgmetadata>