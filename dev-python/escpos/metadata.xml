<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>#############################################################psk-escpos - Python library to manipulate ESC/POS Printers#############################################################.. image:: https://travis-ci.org/python-escpos/python-escpos.svg?branch=master    :target: https://travis-ci.org/python-escpos/python-escpos    :alt: Continous Integration.. image:: https://codecov.io/github/python-escpos/python-escpos/coverage.svg?branch=master    :target: https://codecov.io/github/python-escpos/python-escpos?branch=master    :alt: Code Coverage.. image:: https://readthedocs.org/projects/python-escpos/badge/?version=latest    :target: https://python-escpos.readthedocs.io/en/latest/?badge=latest    :alt: Documentation StatusDescription-----------Python ESC/POS is a library which lets the user have access to all those printers handledby ESC/POS commands, as defined by Epson, from a Python application.The library tries to implement the functions provided by the ESC/POS-commandset and supports sending text, images,barcodes and qr-codes to the printer.Text can be aligned/justified and fonts can be changed by size, type and weight.Also, this module handles some hardware functionalities like cutting paper, control characters, printer resetand similar functions.Since supported commands differ from printer to printer the software tries to automatically apply the rightsettings for the printer that you set. These settings are handled by`escpos-printer-db &lt;https://github.com/receipt-print-hq/escpos-printer-db&gt;`_ which is also used in`escpos-php &lt;https://github.com/mike42/escpos-php&gt;`_.Dependencies------------This library makes use of:* `pyusb &lt;https://github.com/walac/pyusb&gt;`_ for USB-printers* `Pillow &lt;https://github.com/python-pillow/Pillow&gt;`_ for image printing* `qrcode &lt;https://github.com/lincolnloop/python-qrcode&gt;`_ for the generation of QR-codes* `pyserial &lt;https://github.com/pyserial/pyserial&gt;`_ for serial printers* `python-barcode &lt;https://github.com/WhyNotHugo/python-barcode&gt;`_ for the generation of barcodesDocumentation and Usage-----------------------The basic usage is:.. code:: python    from escpos.printer import Usb    &quot;&quot;&quot; Seiko Epson Corp. Receipt Printer (EPSON TM-T88III) &quot;&quot;&quot;    p = Usb(0x04b8, 0x0202, 0, profile=&quot;TM-T88III&quot;)    p.text(&quot;Hello World\n&quot;)    p.image(&quot;logo.gif&quot;)    p.barcode('1324354657687', 'EAN13', 64, 2, '', '')    p.cut()Another example based on the Network printer class:.. code:: python    from escpos.printer import Network    kitchen = Network(&quot;192.168.1.100&quot;) #Printer IP Address    kitchen.text(&quot;Hello World\n&quot;)    kitchen.barcode('1324354657687', 'EAN13', 64, 2, '', '')    kitchen.cut()Another example based on the Serial printer class:.. code:: python    from escpos.printer import Serial    &quot;&quot;&quot; 9600 Baud, 8N1, Flow Control Enabled &quot;&quot;&quot;    p = Serial(devfile='/dev/tty.usbserial',               baudrate=9600,               bytesize=8,               parity='N',               stopbits=1,               timeout=1.00,               dsrdtr=True)    p.text(&quot;Hello World\n&quot;)    p.qr(&quot;You can readme from your smartphone&quot;)    p.cut()Contributing------------This project is open for any contribution! Please see `CONTRIBUTING.rst &lt;https://python-escpos.readthedocs.io/en/latest/dev/contributing.html&gt;`_ for more information.Disclaimer----------None of the vendors cited in this project agree or endorse any of the patterns or implementations.Its names are used only to maintain context.</longdescription>
</pkgmetadata>