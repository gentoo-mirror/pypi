<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. _background:Background----------`libmagic &lt;http://www.darwinsys.com/file/&gt;`_ is the library that commonlysupports the *file* command on Unix system, other than Max OSX which has itsown implementation. The library handles the loading of *database* files thatdescribe the magic numbers used to identify various file types, as well as theassociated mime types. The library also handles character set detections... _installation:Installation------------Before installing *filemagic*, the *libmagic* library will need to beavailabile.  To test this is the check for the presence of the *file* commandand/or the *libmagic* man page. ::    $ which file    $ man libmagicOn Mac OSX, Apple has implemented their own version of the file command.However, *libmagic* can be installed using `homebrew&lt;https://github.com/mxcl/homebrew&gt;`_ ::    $ brew install libmagicAfter *brew* finished installing, the test for the *libmagic* man page shouldpass.Now that the presence of *libmagic* has been confirmed, use `pip&lt;http://pypi.python.org/pypi/pip&gt;`_ to install filemagic. ::    $ pip install filemagicThe *magic* module should now be availabe from the Python shell. ::    &gt;&gt;&gt; import magicThe next section will describe how to use the *magic.Magic* class toidentify file types... _usage:Usage-----The *magic* module uses `ctypes&lt;http://docs.python.org/dev/library/ctypes.html&gt;`_ to wrap the primitives from*libmagic* in the more user friendly *magic.Magic* class. This classhandles initialization, loading databases and the release of resources. ::    &gt;&gt;&gt; import magicTo ensure that resources are correctly released by *magic.Magic*, it'snecessary to either explicitly call *magic.Magic.close* on instances,or use ``with`` statement. ::    &gt;&gt;&gt; with magic.Magic() as m:    ...     pass    ...*magic.Magic* supports context managers which ensures resources arecorrectly released at the end of the ``with`` statements irrespective of anyexceptions.To identify a file from it's filename, use the*magic.Magic.id_filename()* method. ::    &gt;&gt;&gt; with magic.Magic() as m:    ...     m.id_filename('setup.py')    ...    'Python script, ASCII text executable'Similarily to identify a file from a string that has already been read, use the*magic.Magic.id_buffer* method. ::    &gt;&gt;&gt; with magic.Magic() as m:    ...     m.id_buffer('#!/usr/bin/python\n')    ...    'Python script, ASCII text executable'To identify with mime type, rather than a textual description, pass the*magic.MAGIC_MIME_TYPE* flag when creating the *magic.Magic*instance.  ::    &gt;&gt;&gt; with magic.Magic(flags=magic.MAGIC_MIME_TYPE) as m:    ...     m.id_filename('setup.py')    ...    'text/x-python'Similarily, *magic.MAGIC_MIME_ENCODING* can be passed to return theencoding type. ::    &gt;&gt;&gt; with magic.Magic(flags=magic.MAGIC_MIME_ENCODING) as m:    ...     m.id_filename('setup.py')    ...    'us-ascii'.. _unicode:Memory management-----------------The *libmagic* library allocates memory for its own use outside that Python.This memory needs to be released when a *magic.Magic* instance is nolonger needed. The preferred way to doing this is to explicitly call the*magic.Magic.close* method or use the ``with`` statement, asdescribed above.Starting with version 1.4 *magic.Magic* this memory will beautomatically cleaned up when the instance is garbage collected. However,unlike CPython, some Python interpreters such as `PyPy &lt;http://pypy.org&gt;`_,`Jython &lt;http://jython.org&gt;`_ and `IronPython &lt;http://ironpython.net&gt;`_ donot have deterministic garbage collection. Because of this, *filemagic* willissue a warning if it automatically cleans up resources.Unicode and filemagic---------------------On both Python2 and Python3, *magic.Magic*'s methods will encode anyunicode objects (the default string type for Python3) to byte strings beforebeing passed to *libmagic*. On Python3, returned strings will be decoded tounicode using the default encoding type. The user **should not** be concernedwhether unicode or bytes are passed to *magic.Magic* methods. However,the user **will** need to be aware that returned strings are always unicode onPython3 and byte strings on Python2... _issues:Reporting issues----------------The source code for *filemagic* is hosted on`Github &lt;https://github.com/aliles/filemagic&gt;`_.Problems can be reported using Github's`issues tracking &lt;https://github.com/aliles/filemagic/issues&gt;`_ system.*filemagic* has been tested against *libmagic* 5.11. Continuous integrationis provided by `Travis CI &lt;http://travis-ci.org&gt;`_. The current build statusis |build_status|... |build_status| image:: https://secure.travis-ci.org/aliles/filemagic.png?branch=master   :target: http://travis-ci.org/#!/aliles/filemagic</longdescription>
</pkgmetadata>