<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;!-- ![](media/cover.png) --&gt;# Formation&lt;!-- [![Build Status](https://travis-ci.org/jondot/formation.svg?branch=master)](https://travis-ci.org/jondot/formation.svg)[![Coverage Status](https://coveralls.io/repos/github/jondot/formation/badge.svg?branch=master)](https://coveralls.io/github/jondot/formation?branch=master) --&gt;A generic functional middleware infrastructure for Python.Take a look:```pyfrom datetime.datetime import nowfrom hs_formation import wrapfrom requests import getdef log(ctx, call):    print(&quot;started&quot;)    ctx = call(ctx)    print(&quot;ended&quot;)    return ctxdef timeit(ctx, call):    started = now()    ctx = call(ctx)    ended = now() - started    ctx['duration'] = ended    return ctxdef to_requests(ctx):    get(ctx['url'])    return ctxfancy_get = wrap(to_requests, middleware=[log, timeit])fancy_get({'url':'https://google.com'})```## Quick StartInstall using pip/pipenv/etc. (we recommend [poetry](https://github.com/sdispater/poetry) for sane dependency management):```$ poetry add formation```## Best PracticesA `context` object is a loose bag of objects. With that freedom comes responsibility and opinion.For example, this is how Formation models a `requests` integration, with data flowing inside `context`:* It models a `FormationHttpRequest` which abstracts the essentials of making an HTTP request (later shipped to `requests` itself in the way that it likes)* It tucks `FormationHttpRequest` under the `fmtn.req` key.* Additional information regarding such a request is kept _alongside_ `fmtn.req`. For example a request id is kept in the `req.id` key. This creates a flat (good thing) dict to probe. The reason additional data does not have the `fmtn` prefix is that you can always build your own that uses a different prefix (which you cant say about internal Formation inner workings).### added support for async http client via aio_httpYou can use this via ```for_aio_http```### Thanks:To all [Contributors](https://github.com/jondot/formation/graphs/contributors) - you make this happen, thanks!# CopyrightCopyright (c) 2018 [@jondot](http://twitter.com/jondot). See [LICENSE](LICENSE.txt) for further details.</longdescription>
</pkgmetadata>