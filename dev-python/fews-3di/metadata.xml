<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>fews-3di==========================================Program to start `3Di &lt;https://3diwatermanagement.com/&gt;`_ simulations fromFEWS.Installation and usage----------------------We can be installed using python 3.6+ with::  $ pip install fews-3diThe script is called ``run-fews-3di``, you can pass ``--help`` to get usageinstructions and ``--verbose`` to get more verbose output in case of problems.``run-fews-3di`` looks for a ``run_info.xml`` in the current directory bydefault, but you can pass a different file in a different location with``--settings``::  $ run-fews-3di  $ run-fews-3di --help  $ run-fews-3di --settings /some/directory/run_info.xmlConfiguration and input/output files------------------------------------The expected information in run_info.xml is::  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  &lt;Run xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns=&quot;http://www.wldelft.nl/fews/PI&quot;       xsi:schemaLocation=&quot;http://www.wldelft.nl/fews/PI                           http://fews.wldelft.nl/schemas/version1.0/pi-schemas/pi_run.xsd&quot;                           version=&quot;1.5&quot;&gt;      &lt;startDateTime date=&quot;2020-01-26&quot; time=&quot;10:00:00&quot;/&gt;      &lt;endDateTime date=&quot;2020-01-30&quot; time=&quot;12:00:00&quot;/&gt;      &lt;properties&gt;          &lt;string key=&quot;api_token&quot; value=&quot;aBCd1234.5678tOkeNabcde&quot;/&gt;          &lt;string key=&quot;organisation&quot; value=&quot;12345678abcd&quot;/&gt;          &lt;string key=&quot;modelrevision&quot; value=&quot;abcd123456787&quot;/&gt;          &lt;string key=&quot;simulationname&quot; value=&quot;Simulation name&quot;/&gt;          &lt;string key=&quot;save_state&quot; value=&quot;True&quot;/&gt;          &lt;string key=&quot;save_state_time&quot; value=&quot;1400&quot; /&gt;          &lt;string key=&quot;use_last_available_state&quot; value=&quot;False&quot; /&gt;          &lt;string key=&quot;saved_state_expiry_days&quot; value=&quot;5&quot;/&gt;          &lt;string key=&quot;rain_type&quot; value=&quot;radar&quot;/&gt;          &lt;string key=&quot;rain_input&quot; value=&quot;730d6675-35dd-4a35-aa9b-bfb8155f9ca7&quot;/&gt;          &lt;string key=&quot;rain_radar_multiplier&quot; value=&quot;0.8&quot;/&gt;          &lt;string key=&quot;fews_pre_processing&quot; value=&quot;True&quot;/&gt;          &lt;string key=&quot;lizard_results_scenario_name&quot; value=&quot;Testsimulatie&quot;/&gt;          &lt;string key=&quot;lizard_results_scenario_uuid&quot; value=&quot;&quot;/&gt;          &lt;string key=&quot;initial_waterlevel&quot; value=&quot;&quot;/&gt;          &lt;string key=&quot;api_host&quot; value=&quot;&quot;/&gt;      &lt;/properties&gt;  &lt;/Run&gt;**Note:** ``saved_state_expiry_days`` used to be spelled as``save_state_expiry_days``, without a &quot;d&quot;. The example radar uuid is the Dutchrainfall radar (NRR).**save_state:** To use a warm state provide a text file with id in thestates folder using the name ``states/3di-saved-state-id.txt``.  A cold stateis supplied in a similar way with the name: ``states/3di-cold-state-id.txt``.**use_last_available_state:** To overpass the state management system anddirectly take the last available state in the 3Di database the option:``use_last_available_state`` can be set to True.**save_state_time:** When saving a state a ``save_state_time`` can be specified.This parameter defines the time in the simulation (in seconds) when the stateshould be saved. If left empty the end of the simulation is used.**rain_type:** multipe rain-types can be used in the configuration:- ``constant``- ``radar``- ``custom``**rain_input:** according to the chosen rain-type, a rain input must be given in the configuration:- ``constant`` --&gt; ``integer [m/s]``- ``radar`` --&gt; ``lizard uuid``- ``custom`` --&gt; two options: ``rain_csv`` or ``rain_netcdf``. These files  must be stored in the input directory as ``input/rain.csv`` and  ``input/precipitation.nc``**rain_radar_multiplier:** can be used to multiply the rain_input ``radar``  with a constant value. This can be used to correct the radar input. The  default value is 1.0.**fews_pre_processing:** can be ``True`` or ``False``. Must be True if the results are needed in fews: additional pre_processing of the results is needed.**initial_waterlevel:** can be ``min``, ``max``, or ``mean``. When specified the initial waterlevel raster is taken into account. If left empty no initial waterlevel is used in the simulation.**initial_waterlevel:** if you want to use the initial waterlevel raster as defined in the settings (leave empty if no initial waterlevel is predefined):- ``min``- ``mean``- ``max``**api_host:** (optional) api_host address can be added here. If not provided the default api_host address (&quot;https://api.3di.live/v3.0&quot;) will be used.Several input files are needed, they should be in the ``input`` directory**relative** to the ``run_info.xml``:- ``run_info.xml``- ``input/lateral.csv``- ``input/precipitation.nc``- ``input/evaporation.nc``- ``input/ow.nc``- ``model/gridadmin.h5``Output is stored in the ``output`` directory relative to the ``run_info.xml``:- ``output/simulation.log`` (unavailable, but included in the zip)- ``output/flow_summary.log`` (idem)- ``output/log_files_sim_ID.zip``- ``output/results_3di.nc``- ``output/dischages.csv``- ``output/ow.nc``Development-----------Development happens on github. See ``DEVELOPMENT.rst`` for more information.Changelog of fews-3di===================================================3.1 (2023-08-14)----------------- Option to set multiplier by using rain radar as forcing. The multiplier is   set by the user in the settings file. 3.0.1 (2023-03-10)------------------- Fix bug in moving ow.nc file to results folder3.0 (2023-02-28)----------------- Update usage of API token instead of a deprecated username/password login  when connecting to 3Di. You need to change your ``settings.xml``: remove  ``username`` and ``password`` and add ``api_token``, with an api key you  generated on the 3Di website.2.2 (2022-12-05)----------------- Moving from temp to the actual file in a more windows-friendly way. (Moving  between a temp dir on ``c:`` and a target dir on ``d:`` isn't allowed).2.1 (2022-07-28)----------------- Simulation templates are used to create a simulation to adjust to the new 3Di version.- Added a seperate folder for the states of the staging (states_staging)2.0 (2022-06-21)----------------- Requiring threedi-api-client 4.0.1 or higher. This has several import and  functionality changes, which we'll have to use (and compensate for). Some  items to watch out for:  - The api host setting should not include the api version number.  - Preferrably, don't add a trailing slash to the api host url.- ``.login()`` no longer needs to be called. threedi-api-client handles it  automatically. If you call it, you get a deprecation warning.- ``--allow-missing-saved-state`` also works if there are no states found.1.15 (2022-06-10)------------------ Added optional api_host parameter to the settings file.1.14 (2022-02-08)------------------ Added missing requests dependency to package setup.1.13 (2021-09-01)------------------ Added possibility to write state at specific time intervall.1.12 (2021-04-28)------------------ Fixes for 1.11, initial waterlevel should work now.1.11 (2021-04-28)------------------ Added possibility to add initial waterlevel raster.1.10 (2021-02-09)------------------ Added the functionality to provide a cold state file.  Place next to original state file with the name:  3di-cold-state-id.txt.1.9 (2021-01-27)----------------- Added new rainfall modules, constant, csv and radar rain.- Processing results into fews is now optional.1.7 (2020-11-13)----------------- Checks for crashed status and queue's model.1.6 (2020-10-19)----------------- Using a &quot;streaming&quot; download of large files to prevent partial downloads.1.5 (2020-09-21)----------------- Added more resilience to local network errors. The loop that waits for  results to be ready checks the state every 30 seconds and is thus the most  vulnerable to wifi issues, a flaky VPN and local network hickups. We now  detect such a ``socket.gaierror`` there and simply try again in 30 seconds.1.4 (2020-07-21)----------------- A minor bugfix in the result files which are downloaded after the simulation1.3 (2020-07-16)----------------- A minor bugfix in the location where the script searches for the saved-state  file1.2 (2020-07-09)----------------- The code has been set-up to look for specific filenames in predefined  folders.- All inputs (rain, evaporation etc.) have now become optional, if one is  absent a logging message is returned but the code will run. This allows for  flexibility in the usage of the code with different kinds of input.- Two new optional parameters have been added: lizard_results_scenario_uuid and  lizard_results_scenario_name. If a Lizard results   scenario name is provided,  results will be processed in Lizard. If it is not provided, the simulation  runs as usual without processing.1.1 (2020-05-04)----------------- When an existing saved state isn't found, it can be because it is the first  time the script is run. Or the previous saved data has expired. The error  message now points at the ``--allow-missing-saved-state`` possibility. This  can be used to allow the missing of the saved state: a new one will be  created.- Fixed bug: two lines were accidentally swapped, leading to an early crash.1.0 (2020-05-04)----------------- Code cleanup + more coverage.- Improved the documentation, including a separate ``DEVELOPMENT.rst`` to keep  those details out of the generic readme.0.4 (2020-04-30)----------------- Reading and storing saved states added.0.3 (2020-04-23)----------------- Release mechanism fix.0.2 (2020-04-23)----------------- Added lateral upload.- Added rain upload.- Added evaporation upload.- Simulation is actually being run now.- Added processing of the results.- Added usage instructions.0.1 (2020-04-09)----------------- Started copying code from the old project.- Got 3Di api connection to work, including creating an (empty) simulation.- Initial project structure created with cookiecutter and  https://github.com/nens/cookiecutter-python-templateDevelopment instructions========================Development installation------------------------To install::  $ make installIf you want to use a specific version of python, you can first run somethinglike this::  $ python3.9 -m venv .There will be a script you can run like this::  $ bin/run-fews-3diIt runs the ``main()`` function in ``fews-3di/scripts.py``, adjust that ifnecessary. The script is configured in ``setup.py`` (see ``entry_points``).If you need a new dependency (like ``requests``), add it in ``setup.py`` in``install_requires``. Local development tools, like &quot;black&quot;, can be added tothe ``requirements.txt`` file. In both cases, run ``make install`` again.Code structure--------------- ``fews_3di/scripts.py``: the ``run-fews-3di`` code. Should only handle the  commandline stuff and logging setup.- ``fews_3di/simulation.py``: the main ``ThreediSimulation`` class. The  various steps like &quot;add rain&quot; and &quot;start simulation&quot; are separate methods on  that class: this way you can keep the overview of what's happening. It is a  class to make it easier to share common data like &quot;simulation id&quot;.- ``fews_3di/utils.py``: reading the settings plus some helper functions like  ``timestamps_from_netcdf()``.- ``fews_3di/tests/*``: the tests, including sample data.Error handling and logging--------------------------Try/excepts are only used when strictly necessary. Unexpected errors willsimply be shown as a traceback.Some errors are expected, like a missing setting or a missing netcdf file. Forthese, there's an explicit error class like ``MissingSettingException``. Theseare caught in ``scripts.py`` and shown as a neat error message. With``--verbose``, you also get the traceback.Debug logging is used to make it easy to figure out what the program is doingin case of a problem or an unexpected result.Info level logging is for feedback to the user. Don't log too much on thislevel.Warning/error are the usual. An error when something is wrong and we'restopping the script. A warning for when something *seems* wrong, but whenwe'll continue execution anyway.Neatness and tests------------------In order to get nicely formatted python files without having to spend manualwork on it, run the following command periodically::  $ make beautifulIf you don't have &quot;make&quot; installed, look in the Makefile for the commands itruns (black, flake8, isort).Run the tests regularly, this includes pyflakes and black checks::  $ make testRunning pytest by itself is also possible, for instance if you want to passspecific options::  $ bin/pytest --disable-warningsThe tests are also run automatically `on &quot;github actions&quot;&lt;https://github.com/nens/fews-3di/actions&gt;`_ for&quot;master&quot; and for pull requests. So don't just make a branch, but turn it intoa pull request right away:- **Important**: it is easy to give feedback on pull requests. Little comments  on the individual lines, for instance. So use it to get early feedback, if  you think that's useful.- On your pull request page, you also automatically get the feedback from the  automated tests.There's also`coverage reporting &lt;https://coveralls.io/github/nens/fews-3di&gt;`_on coveralls.io.As an **experiment**, python type hints are sprinkled throughout thecode. When running the tests, errors are often found. The reason for theexperiment was some confusion in the original version of fews-3di:- A string &quot;True&quot; from the settings instead of a proper boolean True/False  value.- Timestamps that were sometimes datetime objects and sometimes iso-formatted  datetime strings.With type hints, it is perfectly clear what something is supposed to be.Releases--------Before releasing, make sure the changelog is up to date, otherwisezest.releaser complains :-) Then run fullrelease::  $ bin/fullreleaseGithub detects the new tag and automatically uploads a new release tohttps://pypi.org/project/fews-3di/</longdescription>
</pkgmetadata>