<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>``trio-asyncio`` is a re-implementation of the ``asyncio`` mainloop on top ofTrio.Rationale=========There are quite a few asyncio-compatible libraries.On the other hand, Trio has native concepts of tasks and task cancellation.Asyncio, on the other hand, is based on chaining Future objects, albeitwith nicer syntax.Thus, being able to use asyncio libraries from Trio is useful.Principle of operation======================The core of the &quot;normal&quot; asyncio main loop is the repeated execution ofsynchronous code that's submitted to ``call_soon`` or``add_reader``/``add_writer``.Everything else within ``asyncio``, i.e. Futures and ``async``/``await``,is just syntactic sugar. There is no concept of a task; while a Future canbe cancelled, that in itself doesn't affect the code responsible forfulfilling it.On the other hand, trio has genuine tasks with no separation betweenreturning a value asynchronously, and the code responsible for providingthat value.``trio_asyncio`` implements a task which runs (its own version of) theasyncio main loop. It also contains shim code which translates between theseconcepts as transparently and correctly as possible, and it supplants a fewof the standard loop's key functions.This works rather well: ``trio_asyncio`` consists of just ~700 lines ofcode (asyncio: ~8000) but passes the complete Python 3.6 test suite with noerrors.``trio_asyncio`` requires Python 3.6 or better.Author======Matthias Urlichs &lt;matthias@urlichs.de&gt;</longdescription>
</pkgmetadata>