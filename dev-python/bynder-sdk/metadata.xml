<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Bynder Python SDK=================![Tests](https://github.com/Bynder/bynder-python-sdk/workflows/Tests/badge.svg)![Publish](https://github.com/Bynder/bynder-python-sdk/workflows/Publish/badge.svg)[![Coverage Status](https://coveralls.io/repos/github/Bynder/bynder-python-sdk/badge.svg?branch=master)](https://coveralls.io/github/Bynder/bynder-python-sdk?branch=master)![PyPI](https://img.shields.io/pypi/v/bynder-sdk)![PyPI - Downloads](https://img.shields.io/pypi/dm/bynder-sdk?color=orange)The main goal of this SDK is to speed up the integration of Byndercustomers who use Python. Making it easier to connect to the Bynder API(&lt;https://bynder.docs.apiary.io&gt;) and execute requests on it._**Note:** As of version 1.0.0 this SDK now uses OAuth 2.0. For the lastversion using OAuth 1.0a please refer to[version 0.0.6](https://github.com/Bynder/bynder-python-sdk/tree/0.0.6)_.Requirements and dependencies-----------------------------The Python SDK requires the following in order to fully work:-   `Python &gt;= 3.5`, older versions of Python won't work.Pip should handle all the dependencies automatically.Installation------------This SDK depends on a few libraries in order to work, installing it withpip should take care of everything automatically.Before you install the SDK we recommend you to setup a virtualenvironment:```bashvirtualenv -p python3 venv  # create virtual environmentsource venv/bin/activate    # activate virtual environment```After you have successfully setup a virtual environment you can installthe SDK with [pip](https://pip.pypa.io/en/stable/installing/). Run thefollowing command while your virtual environment is active.```bashpip install bynder-sdk```Getting started---------------This is a simple example on how to retrieve data from the Bynder assetbank. For a more detailed example of implementation refer to the [samplecode](https://github.com/Bynder/bynder-python-sdk/blob/master/example/app.py).First import the BynderClient:```pythonfrom bynder_sdk import BynderClient```When using OAuth2, create an instance of the client and use the flowto receive a token:```pythonbynder_client = BynderClient(    domain='portal.getbynder.com',    redirect_uri='https://...',    client_id='',    client_secret='',    token_saver=token_saver)print(bynder_client.get_authorization_url())code = input('Code: ')bynder_client.fetch_token(code)```When using a permanent token, the client instance can be created like this:```pythonbynder_client = BynderClient(  domain='portal.getbynder.com',  permanent_token='')```Finally call one of the API's endpoints through one of the clients:```pythonasset_bank_client = bynder_client.asset_bank_clientmedia_list = asset_bank_client.media_list({    'limit': 2,    'type': 'image'})```A full list of the currently available clients and methods in the SDKcan be found belowMethods Available-----------------These are the methods currently availble on the **Bynder Python SDK**,refer to the [Bynder API Docs](http://docs.bynder.apiary.io/) for morespecific details on the calls.### BynderClient:Get an instance of the Asset Bank Client or the Collection Client ifalready with access tokens set up. Also allows to generate andauthenticate request tokens, which are necessary for the rest of theAsset Bank and Collection calls.```pythonasset_bank_clientcollection_clientpim_clientworkflow_clientget_authorization_url()fetch_token()derivatives()```### asset\_bank\_client:All the Asset Bank related calls, provides information and access toMedia management.```pythonbrands()tags()meta_properties()media_list(query)media_info(media_id, query)media_download_url()set_media_properties(media_id, query)delete_media(media_id)create_usage(itegration_id, asset_id, query)usage(query)delete_usage(integration_id, asset_id, query)upload_file(file_path, brand_id, media_id, query)```With the `upload_file` method you can do two things. You can upload anew asset, or you can upload a new version of an exising asset. You cancontrol this by sending a media\_id or not.### collection\_client:All the collection related calls.```pythoncollections(query)collection_info(collection_id)create_collection(name, query)delete_collection(collection_id)collection_media_ids(collection_id)add_media_to_collection(collection_id, media_ids)remove_media_from_collection(collection_id, meedia_ids)share_collection(collection_id, collection_option, recipients, query)```### pim\_client:All the PIM related calls.```pythonmetaproperties()metaproperty_info(metaproperty_id)metaproperty_options(metaproperty_id)edit_metaproperty_option(metaproperty_option_id, children)```### workflow\_client:All the workflow related calls.```pythonusers()campaigns(query)campaign_info(campaign_id)create_campaign(name, key, description, responsibleID, query)delete_campaign(campaign_id)edit_campaign(campaign_id, name, key, description, responsibleID, query)metaproperties()metaproperty_info(metaproperty_id)groups()group_info(group_id)job_preset_info(job_preset_info)jobs(campaign_id)create_job(name, campaignID, accountableID, presetID, query)job_info(job_id)edit_job(job_id, name, campaignID, accauntableID, presetID, query)delete_job(job_id)}```Tests-----You can run the tests by using the command below. This will install thepackages required and execute the tests for all the clients.```bashmake test```</longdescription>
</pkgmetadata>