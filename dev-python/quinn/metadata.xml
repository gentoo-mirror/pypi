<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Quinn![CI](https://github.com/MrPowers/quinn/workflows/CI/badge.svg?branch=master)Pyspark helper methods to maximize developer productivity.Quinn validates DataFrames, extends core classes, defines DataFrame transformations, and provides SQL functions.![quinn](https://github.com/MrPowers/quinn/blob/master/quinn.png)## SetupQuinn is [uploaded to PyPi](https://pypi.org/project/quinn/) and can be installed with this command:```pip install quinn```## Pyspark Core Class Extensions```from quinn.extensions import *```### Column Extensions**isFalsy()**```pythonsource_df.withColumn(&quot;is_stuff_falsy&quot;, F.col(&quot;has_stuff&quot;).isFalsy())```Returns `True` if `has_stuff` is `None` or `False`.**isTruthy()**```pythonsource_df.withColumn(&quot;is_stuff_truthy&quot;, F.col(&quot;has_stuff&quot;).isTruthy())```Returns `True` unless `has_stuff` is `None` or `False`.**isNullOrBlank()**```pythonsource_df.withColumn(&quot;is_blah_null_or_blank&quot;, F.col(&quot;blah&quot;).isNullOrBlank())```Returns `True` if `blah` is `null` or blank (the empty string or a string that only contains whitespace).**isNotIn()**```pythonsource_df.withColumn(&quot;is_not_bobs_hobby&quot;, F.col(&quot;fun_thing&quot;).isNotIn(bobs_hobbies))```Returns `True` if `fun_thing` is not included in the `bobs_hobbies` list.**nullBetween()**```pythonsource_df.withColumn(&quot;is_between&quot;, F.col(&quot;age&quot;).nullBetween(F.col(&quot;lower_age&quot;), F.col(&quot;upper_age&quot;)))```Returns `True` if `age` is between `lower_age` and `upper_age`.  If `lower_age` is populated and `upper_age` is `null`, it will return `True` if `age` is greater than or equal to `lower_age`.  If `lower_age` is `null` and `upper_age` is populate, it will return `True` if `age` is lower than or equal to `upper_age`.### SparkSession Extensions**create_df()**```pythonspark.create_df(    [(&quot;jose&quot;, &quot;a&quot;), (&quot;li&quot;, &quot;b&quot;), (&quot;sam&quot;, &quot;c&quot;)],    [(&quot;name&quot;, StringType(), True), (&quot;blah&quot;, StringType(), True)])```Creates DataFrame with a syntax that's less verbose than the built-in `createDataFrame` method.### DataFrame Extensions**transform()**```pythonsource_df\    .transform(lambda df: with_greeting(df))\    .transform(lambda df: with_something(df, &quot;crazy&quot;))```Allows for multiple DataFrame transformations to be run and executed.## Quinn Helper Functions```pythonimport quinn```### DataFrame Validations**validate_presence_of_columns()**```pythonquinn.validate_presence_of_columns(source_df, [&quot;name&quot;, &quot;age&quot;, &quot;fun&quot;])```Raises an exception unless `source_df` contains the `name`, `age`, and `fun` column.**validate_schema()**```pythonquinn.validate_schema(source_df, required_schema)```Raises an exception unless `source_df` contains all the `StructFields` defined in the `required_schema`.**validate_absence_of_columns()**```pythonquinn.validate_absence_of_columns(source_df, [&quot;age&quot;, &quot;cool&quot;])```Raises an exception if `source_df` contains `age` or `cool` columns.### Functions**single_space()**```pythonactual_df = source_df.withColumn(    &quot;words_single_spaced&quot;,    quinn.single_space(col(&quot;words&quot;)))```Replaces all multispaces with single spaces (e.g. changes `&quot;this has   some&quot;` to `&quot;this has some&quot;`.**remove_all_whitespace()**```pythonactual_df = source_df.withColumn(    &quot;words_without_whitespace&quot;,    quinn.remove_all_whitespace(col(&quot;words&quot;)))```Removes all whitespace in a string (e.g. changes `&quot;this has some&quot;` to `&quot;thishassome&quot;`.**anti_trim()**```pythonactual_df = source_df.withColumn(    &quot;words_anti_trimmed&quot;,    quinn.anti_trim(col(&quot;words&quot;)))```Removes all inner whitespace, but doesn't delete leading or trailing whitespace (e.g. changes `&quot; this has some &quot;` to `&quot; thishassome &quot;`.**remove_non_word_characters()**```pythonactual_df = source_df.withColumn(    &quot;words_without_nonword_chars&quot;,    quinn.remove_non_word_characters(col(&quot;words&quot;)))```Removes all non-word characters from a string (e.g. changes `&quot;si%$#@!#$!@#mpsons&quot;` to `&quot;simpsons&quot;`.**exists()**```pythonsource_df.withColumn(    &quot;any_num_greater_than_5&quot;,    quinn.exists(lambda n: n &gt; 5)(col(&quot;nums&quot;)))````nums` contains lists of numbers and `exists()` returns `True` if any of the numbers in the list are greater than 5.  It's similar to the Python `any` function.**forall()**```pythonsource_df.withColumn(    &quot;all_nums_greater_than_3&quot;,    quinn.forall(lambda n: n &gt; 3)(col(&quot;nums&quot;)))````nums` contains lists of numbers and `forall()` returns `True` if all of the numbers in the list are greater than 3.  It's similar to the Python `all` function.**multi_equals()**```pythonsource_df.withColumn(    &quot;are_s1_and_s2_cat&quot;,    quinn.multi_equals(&quot;cat&quot;)(col(&quot;s1&quot;), col(&quot;s2&quot;)))````multi_equals` returns true if `s1` and `s2` are both equal to `&quot;cat&quot;`.### Transformations**snake_case_col_names()**```pythonquinn.snake_case_col_names(source_df)```Converts all the column names in a DataFrame to snake_case.  It's annoying to write SQL queries when columns aren't snake cased.**sort_columns()**```pythonquinn.sort_columns(source_df, &quot;asc&quot;)```Sorts the DataFrame columns in alphabetical order.  Wide DataFrames are easier to navigate when they're sorted alphabetically.### DataFrame Helpers**column_to_list()**```pythonquinn.column_to_list(source_df, &quot;name&quot;)```Converts a column in a DataFrame to a list of values.**two_columns_to_dictionary()**```pythonquinn.two_columns_to_dictionary(source_df, &quot;name&quot;, &quot;age&quot;)```Converts two columns of a DataFrame into a dictionary.  In this example, `name` is the key and `age` is the value.**to_list_of_dictionaries()**```pythonquinn.to_list_of_dictionaries(source_df)```Converts an entire DataFrame into a list of dictionaries.## ContributingWe are actively looking for feature requests, pull requests, and bug fixes.Any developer that demonstrates excellence will be invited to be a maintainer of the project.</longdescription>
</pkgmetadata>