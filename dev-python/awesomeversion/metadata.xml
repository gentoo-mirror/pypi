<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># AwesomeVersion[![codecov](https://codecov.io/gh/ludeeus/awesomeversion/branch/main/graph/badge.svg)](https://codecov.io/gh/ludeeus/awesomeversion)![python version](https://img.shields.io/badge/Python-3.8=&gt;&lt;=3.12-blue.svg)![dependencies](https://img.shields.io/badge/Dependencies-0-blue.svg)[![PyPI](https://img.shields.io/pypi/v/awesomeversion)](https://pypi.org/project/awesomeversion)![Actions](https://github.com/ludeeus/awesomeversion/workflows/Actions/badge.svg?branch=main)_One version package to rule them all, One version package to find them, One version package to bring them all, and in the darkness bind them._Make anything a version object, and compare against a vast section of other version formats.## Installation```bashpython3 -m pip install awesomeversion```## AwesomeVersion classThe AwesomeVersion class takes a version as the first argument, you can also pass in additional kwargs to customize the version object.Argument | Description--- | ---`version` | The version string to parse.`ensure_strategy` | Match the `AwesomeVersion` object against spesific strategies when creating if. If it does not match `AwesomeVersionStrategyException` will be raised`find_first_match` | If True, the version given will be scanned for the first match of the given `ensure_strategy`. Raises `AwesomeVersionStrategyException` If it is not found for any of the given strategies.## AwesomeVersion methods&lt;details&gt;&lt;summary&gt;&lt;code&gt;AwesomeVersion.in_range&lt;/code&gt;&lt;/summary&gt;This is a helper method to check if the version is in a range.This method takes two arguments, `lowest` and `highest`, both are required, and returns a boolean.&gt; **Note** This method is the same as doing `lowest &lt;= AwesomeVersion &lt;= highest`Example:```pythonfrom awesomeversion import AwesomeVersionprint(AwesomeVersion(&quot;1.2.2&quot;).in_range(&quot;1.2.1&quot;, &quot;1.3&quot;))&gt; Trueprint(AwesomeVersion(&quot;1.2.0&quot;).in_range(&quot;1.2.1&quot;, &quot;1.3&quot;))&gt; False```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;&lt;code&gt;AwesomeVersion.diff&lt;/code&gt;&lt;/summary&gt;This is a helper method to get the difference between two versions.This method takes one argument which is the version to compare against, and returns a `AwesomeVersionDiff` object.&gt; **Note** This method is the same as doing `AwesomeVersion - version`Example:```pythonfrom awesomeversion import AwesomeVersion&gt; print(AwesomeVersion(&quot;1.0&quot;).diff(&quot;2.1&quot;))AwesomeVersionDiff(major=True, minor=True, patch=False, modifier=False, strategy=False)```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;&lt;code&gt;AwesomeVersion.section&lt;/code&gt;&lt;/summary&gt;This is a helper method to get a section of the version.This method takes one argument which is the section to get, and returns an integer representing it (or 0 if it does not exist).Example:```pythonfrom awesomeversion import AwesomeVersion&gt; print(AwesomeVersion(&quot;1.0&quot;).section(0))1```&lt;/details&gt;## AwesomeVersion propertiesArgument | Description--- | ---`alpha` | This is a boolean representing if the version is an alpha version.`beta` | This is a boolean representing if the version is a beta version.`dev` | This is a boolean representing if the version is a dev version.`major` | This is an `AwesomeVersion` object representing the major version or `None` if not present.`micro` | This is an `AwesomeVersion` object representing the micro version or `None` if not present.`minor` | This is an `AwesomeVersion` object representing the minor version or `None` if not present.`modifier_type` | This is a string representing the modifier type of the version or `None` if not present.`modifier` | This is a string representing the modifier of the version or `None` if not present.`patch` | This is an `AwesomeVersion` object representing the patch version or `None` if not present.`prefix` | This is the prefix of the version or `None` if not present.`release_candidate` | This is a boolean representing if the version is a release candidate version.`simple` | This is a boolean representing if the version is a simple version.`strategy_description` | This is a `AwesomeVersionStrategyDescription` object representing the strategy description of the version.`strategy` | This is a `AwesomeVersionStrategy` object representing the strategy of the version.`string` | This is the string representation of the version (without the v prefix if present).`valid` | This is a boolean representing if the version is valid (not unknown strategy).`year` | This is alias to `major`, and is an `AwesomeVersion` object representing the year.## Example usageHere are some examples of how you can use this package, more examples can be found in the `tests` directory.&lt;details&gt;&lt;summary&gt;&lt;code&gt;Basic compare&lt;/code&gt;&lt;/summary&gt;```pythonfrom awesomeversion import AwesomeVersioncurrent = AwesomeVersion(&quot;1.2.2&quot;)upstream = AwesomeVersion(&quot;1.2.3&quot;)print(upstream &gt; current)&gt; True```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;&lt;code&gt;Compare beta version&lt;/code&gt;&lt;/summary&gt;```pythonfrom awesomeversion import AwesomeVersioncurrent = AwesomeVersion(&quot;2021.1.0&quot;)upstream = AwesomeVersion(&quot;2021.1.0b2&quot;)print(current &gt; upstream)&gt; True```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;&lt;code&gt;Check if version is a beta version&lt;/code&gt;&lt;/summary&gt;```pythonfrom awesomeversion import AwesomeVersionprint(AwesomeVersion(&quot;1.2.3b0&quot;).beta)&gt; Trueprint(AwesomeVersion(&quot;1.2.3&quot;).beta)&gt; False```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Use &lt;code&gt;AwesomeVersion&lt;/code&gt; with &lt;code&gt;with ...&lt;/code&gt;&lt;/summary&gt;```pythonfrom awesomeversion import AwesomeVersionwith AwesomeVersion(&quot;20.12.0&quot;) as current:    with AwesomeVersion(&quot;20.12.1&quot;) as upstream:        print(upstream &gt; current)&gt; True```&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Compare &lt;code&gt;AwesomeVersion&lt;/code&gt; with other non-&lt;code&gt;AwesomeVersion&lt;/code&gt; formats&lt;/summary&gt;```pythonfrom awesomeversion import AwesomeVersionbase = AwesomeVersion(&quot;20.12.0&quot;)print(base &gt; &quot;20.12.1&quot;)&gt; Falseprint(base &gt; &quot;19&quot;)&gt; Trueprint(base &gt; 5)&gt; True```&lt;/details&gt;## General behaviorYou can test your versions on the [demo page][awesomeversion_demo].### ModifiersWhen comparing versions with modifiers, if the base version is the same the modifier will be used to determine the order.If one of the versions do not have a modifier, the one without will be considered newer.The order of the modifiers are:- No modifier- RC- Beta- Alpha- Dev&lt;details&gt;&lt;summary&gt;Examples&lt;/summary&gt;```pythonfrom awesomeversion import AwesomeVersionprint(AwesomeVersion(&quot;1.0.0&quot;) &gt; AwesomeVersion(&quot;1.0.0b6&quot;))&gt; Trueprint(AwesomeVersion(&quot;1.0.0&quot;) &gt; AwesomeVersion(&quot;1.0.0.dev6&quot;))&gt; Trueprint(AwesomeVersion(&quot;1.0.0.dev19&quot;) &gt; AwesomeVersion(&quot;1.0.0b4&quot;))&gt; False```&lt;/details&gt;### Special versions (container)There are some special versions for container that are handled differently than typical version formats.The special versions are in the following order:- `dev` (newest)- `latest`- `beta`- `stable` (oldest)If only the first version is this special version, it will be considered newer.If only the second version is this special version, it will be considered older.&lt;details&gt;&lt;summary&gt;Examples&lt;/summary&gt;```pythonfrom awesomeversion import AwesomeVersionprint(AwesomeVersion(&quot;latest&quot;) &gt; AwesomeVersion(&quot;1.0.0b6&quot;))&gt; Trueprint(AwesomeVersion(&quot;1.0.0&quot;) &gt; AwesomeVersion(&quot;latest&quot;))&gt; Falseprint(AwesomeVersion(&quot;stable&quot;) &gt; AwesomeVersion(&quot;latest&quot;))&gt; Falseprint(AwesomeVersion(&quot;beta&quot;) &gt; AwesomeVersion(&quot;dev&quot;))&gt; False```&lt;/details&gt;## Contribute**All** contributions are welcome!1. Fork the repository2. Clone the repository locally and open the devcontainer or use GitHub codespaces3. Do your changes4. Lint the files with `make lint`5. Ensure all tests passes with `make test`6. Ensure 100% coverage with `make coverage`7. Commit your work, and push it to GitHub8. Create a PR against the `main` branch[awesomeversion_demo]: https://ludeeus.github.io/awesomeversion/</longdescription>
</pkgmetadata>