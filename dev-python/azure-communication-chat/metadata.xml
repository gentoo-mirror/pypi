<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Azure Communication Chat Package client library for PythonThis package contains a Python SDK for Azure Communication Services for Chat.Read more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview)[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-chat) | [Package (Pypi)](https://pypi.org/project/azure-communication-chat/) | [API reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-communication-chat/1.0.0b5/index.html) | [Product documentation](https://docs.microsoft.com/azure/communication-services/)# Getting started## Prerequisites- Python 2.7, or 3.6 or later is required to use this package.- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&amp;pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.## Install the packageInstall the Azure Communication Service Chat SDK.```bashpip install --pre azure-communication-chat```## User Access TokensUser access tokens enable you to build client applications that directly authenticate to Azure Communication Services. You can generate these tokens with azure.communication.identity module, and then use them to initialize the Communication Services SDKs. Example of using azure.communication.identity:```bashpip install --pre azure-communication-identity``````pythonfrom azure.communication.identity import CommunicationIdentityClientidentity_client = CommunicationIdentityClient.from_connection_string(&quot;&lt;connection string of your Communication service&gt;&quot;)user = identity_client.create_user()tokenresponse = identity_client.get_token(user, scopes=[&quot;chat&quot;])token = tokenresponse.token```The `user` created above will be used later, because that user should be added as a participant of new chat thread when you creatingit with this token. It is because the initiator of the create request must be in the list of the participants of the chat thread.## Create the Chat ClientThis will allow you to create, get, list or delete chat threads.```pythonfrom azure.communication.chat import ChatClient, CommunicationTokenCredential# Your unique Azure Communication service endpointendpoint = &quot;https://&lt;RESOURCE_NAME&gt;.communcationservices.azure.com&quot;chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))```## Create Chat Thread ClientThe ChatThreadClient will allow you to perform operations specific to a chat thread, like send message, get message, updatethe chat thread topic, add participants to chat thread, etc.You can get it by creating a new chat thread using ChatClient:```pythoncreate_chat_thread_result = chat_client.create_chat_thread(topic)chat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)```Additionally, the client can also direct so that the request is repeatable; that is, if the client makes therequest multiple times with the same Idempotency-Token and it will get back an appropriate response withoutthe server executing the request multiple times. The value of the Idempotency-Token is an opaque stringrepresenting a client-generated, globally unique for all time, identifier for the request.```pythoncreate_chat_thread_result = chat_client.create_chat_thread(    topic,    thread_participants=thread_participants,    idempotency_token=idempotency_token)chat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)```Alternatively, if you have created a chat thread before and you have its thread_id, you can create it by:```pythonchat_thread_client = chat_client.get_chat_thread_client(thread_id) # thread_id is the id of an existing chat thread```# Key conceptsA chat conversation is represented by a chat thread. Each user in the thread is called a thread participant.Thread participants can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat.Users also get near real-time updates for when others are typing and when they have read the messages.Once you initialized a `ChatClient` class, you can do the following chat operations:## Create, get, update, and delete threadsPerform CRD(Create-Read-Delete) operations on threads```Pythoncreate_chat_thread(topic, **kwargs)list_chat_threads(**kwargs)delete_chat_thread(thread_id, **kwargs)```Once you initialized a `ChatThreadClient` class, you can do the following chat operations:## Update threadPerform Update operation on thread topic```pythonupdate_topic(topic, **kwargs)```## Get Chat thread properties```pythonget_properties(**kwargs)```## Send, get, update, and delete messagesPerform CRUD(Create-Read-Update-Delete) operations on messages```Pythonsend_message(content, **kwargs)get_message(message_id, **kwargs)list_messages(**kwargs)update_message(message_id, content, **kwargs)delete_message(message_id, **kwargs)```## Get, add, and remove participantsPerform CRD(Create-Read-Delete) operations on thread participants```Pythonlist_participants(**kwargs)add_participants(thread_participants, **kwargs)remove_participant(participant_identifier, **kwargs)```## Send typing notificationNotify the service of typing notification```pythonsend_typing_notification(**kwargs)```## Send and get read receiptNotify the service that a message is read and get list of read messages.```Pythonsend_read_receipt(message_id, **kwargs)list_read_receipts(**kwargs)```# ExamplesThe following sections provide several code snippets covering some of the most common tasks, including:- [Thread Operations](#thread-operations)- [Message Operations](#message-operations)- [Thread Participant Operations](#thread-participant-operations)- [Events Operations](#events-operations)## Thread Operations### Create a threadUse the `create_chat_thread` method to create a chat thread.- Use `topic`, required, to give a thread topic;- Use `thread_participants`, optional, to provide a list the `ChatParticipant` to be added to the thread;    - `user`, required, it is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user()      from User Access Tokens    &lt;!-- [User Access Tokens](#user-access-tokens) --&gt;    - `display_name`, optional, is the display name for the thread participant.    - `share_history_time`, optional, time from which the chat history is shared with the participant.- Use `idempotency_token`, optional, to specify the unique identifier for the request.`CreateChatThreadResult` is the result returned from creating a thread, you can use it to fetch the `id` ofthe chat thread that got created. This `id` can then be used to fetch a `ChatThreadClient` object usingthe `get_chat_thread_client` method. `ChatThreadClient` can be used to perform other chat operations to this chat thread.```Python# Without idempotency_token and thread_participantstopic = &quot;test topic&quot;create_chat_thread_result = chat_client.create_chat_thread(topic)chat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)``````Python# With idempotency_token and thread_participantsfrom azure.communication.identity import CommunicationIdentityClientfrom azure.communication.chat import ChatParticipant, ChatClient, CommunicationTokenCredentialimport uuidfrom datetime import datetime# create an useridentity_client = CommunicationIdentityClient.from_connection_string('&lt;connection_string&gt;')user = identity_client.create_user()# user access tokenstokenresponse = identity_client.get_token(user, scopes=[&quot;chat&quot;])token = tokenresponse.token## OR pass existing user# from azure.communication.chat import CommunicationUserIdentifier# user_id = 'some_user_id'# user = CommunicationUserIdentifier(user_id)# create the chat_clientendpoint = &quot;https://&lt;RESOURCE_NAME&gt;.communcationservices.azure.com&quot;chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))# modify function to implement customer logicdef get_unique_identifier_for_request(**kwargs):    res = uuid.uuid4()    return restopic = &quot;test topic&quot;thread_participants = [ChatParticipant(    identifier=user,    display_name='name',    share_history_time=datetime.utcnow())]# obtains idempotency_token using some customer logicidempotency_token = get_unique_identifier_for_request()create_chat_thread_result = chat_client.create_chat_thread(    topic,    thread_participants=thread_participants,    idempotency_token=idempotency_token)thread_id = create_chat_thread_result.chat_thread.id# fetch ChatThreadClientchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)# Additionally, you can also check if all participants were successfully added or not# and subsequently retry adding the failed participants againdef decide_to_retry(error, **kwargs):    &quot;&quot;&quot;    Insert some custom logic to decide if retry is applicable based on error    &quot;&quot;&quot;    return Trueretry = [thread_participant for thread_participant, error in create_chat_thread_result.errors if decide_to_retry(error)]if retry:    chat_thread_client.add_participants(retry)```### Get a threadUse `get_properties` method retrieves a `ChatThreadProperties` from the service; `thread_id` is the unique ID of the thread.```Pythonchat_thread_properties = chat_thread_client.get_properties()```### List chat threadsUse `list_chat_threads` method retrieves the list of created chat threads- Use `results_per_page`, optional, The maximum number of messages to be returned per page.- Use `start_time`, optional, The start time where the range query.An iterator of `[ChatThreadItem]` is the response returned from listing threads```pythonfrom azure.communication.chat import ChatClient, CommunicationTokenCredentialfrom datetime import datetime, timedeltatoken = &quot;&lt;token&gt;&quot;endpoint = &quot;https://&lt;RESOURCE_NAME&gt;.communcationservices.azure.com&quot;chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))start_time = datetime.utcnow() - timedelta(days=2)chat_threads = chat_client.list_chat_threads(results_per_page=5, start_time=start_time)for chat_thread_item_page in chat_threads.by_page():    for chat_thread_item in chat_thread_item_page:        print(&quot;thread id:&quot;, chat_thread_item.id)```### Update a thread topicUse `update_topic` method to update a thread's properties. `topic` is used to describe the change of the thread topic- Use `topic` to give thread a new topic;```pythontopic = &quot;new topic&quot;chat_thread_client.update_topic(topic=topic)chat_thread = chat_thread_client.get_properties(thread_id)assert chat_thread.topic == topic```### Delete a threadUse `delete_chat_thread` method to delete a thread; `thread_id` is the unique ID of the thread.- Use `thread_id`, required, to specify the unique ID of the thread.```Pythonchat_client.delete_chat_thread(thread_id=thread_id)```## Message Operations### Send a messageUse `send_message` method to sends a message to a thread identified by `thread_id`.- Use `content`, required, to provide the chat message content.- Use `chat_message_type`, optional, to provide the chat message type. Possible values include: `ChatMessageType.TEXT`,  `ChatMessageType.HTML`, `'text'`, `'html'`; if not specified, `ChatMessageType.TEXT` will be set- Use `sender_display_name`,optional, to specify the display name of the sender, if not specified, empty name will be set`SendChatMessageResult` is the response returned from sending a message, it contains an id, which is the unique ID of the message.```Pythonfrom azure.communication.chat import ChatMessageTypetopic = &quot;test topic&quot;create_chat_thread_result = chat_client.create_chat_thread(topic)thread_id = create_chat_thread_result.chat_thread.idchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)content='hello world'sender_display_name='sender name'chat_message_type = ChatMessageType.TEXT# without specifying sender_display_name and chat_message_typesend_message_result = chat_thread_client.send_message(content)send_message_result_id = send_message_result.idprint(&quot;Message sent: id: &quot;, send_message_result_id)# specifying sender_display_name and chat_message_typesend_message_result_w_type = chat_thread_client.send_message(            content,            sender_display_name=sender_display_name,            chat_message_type=chat_message_type # equivalent to chat_message_type = 'text')send_message_result_w_type_id = send_message_result_w_type.idprint(&quot;Message sent: id: &quot;, send_message_result_w_type_id)```### Get a messageUse `get_message` method retrieves a message from the service; `message_id` is the unique ID of the message.- Use `message_id`,required, to specify message id of an existing message`ChatMessage` is the response returned from getting a message, it contains an id, which is the unique ID of the message, and other fields please refer to azure.communication.chat.ChatMessage```pythonchat_message = chat_thread_client.get_message(message_id=send_message_result_id)print(&quot;get_chat_message succeeded, message id:&quot;, chat_message.id, &quot;content: &quot;, chat_message.content)```### List messagesUse `list_messages` method retrieves messages from the service.- Use `results_per_page`, optional, The maximum number of messages to be returned per page.- Use `start_time`, optional, The start time where the range query.An iterator of `[ChatMessage]` is the response returned from listing messages```Pythonfrom datetime import datetime, timedeltastart_time = datetime.utcnow() - timedelta(days=1)chat_messages = chat_thread_client.list_messages(results_per_page=1, start_time=start_time)for chat_message_page in chat_messages.by_page():    for chat_message in chat_message_page:        print(&quot;ChatMessage: Id=&quot;, chat_message.id, &quot;; Content=&quot;, chat_message.content.message)```### Update a messageUse `update_message` to update a message identified by threadId and messageId.- Use `message_id`,required, is the unique ID of the message.- Use `content`, optional, is the message content to be updated; if not specified it is assigned to be empty```Pythoncontent = &quot;updated message content&quot;chat_thread_client.update_message(send_message_result_id, content=content)chat_message = chat_thread_client.get_message(message_id=send_message_result_id)assert chat_message.content.message == content```### Delete a messageUse `delete_message` to delete a message.- Use `message_id`, required, is the unique ID of the message.```pythonchat_thread_client.delete_message(message_id=send_message_result_id)```## Thread Participant Operations### List thread participantsUse `list_participants` to retrieve the participants of the thread.- Use `results_per_page`, optional, The maximum number of participants to be returned per page.- Use `skip`, optional, to skips participants up to a specified position in response.An iterator of `[ChatParticipant]` is the response returned from listing participants```pythonchat_participants = chat_thread_client.list_participants(results_per_page=5, skip=5)for chat_participant_page in chat_participants.by_page():    for chat_participant in chat_participant_page:        print(&quot;ChatParticipant: &quot;, chat_participant)```### Add thread participantsUse `add_participants` method to add thread participants to the thread.- Use `thread_participants`, required, to list the `ChatParticipant` to be added to the thread;  - `user`, required, it is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user() from User Access Tokens  &lt;!-- [User Access Tokens](#user-access-tokens) --&gt;  - `display_name`, optional, is the display name for the thread participant.  - `share_history_time`, optional, time from which the chat history is shared with the participant.A `list(tuple(ChatParticipant, ChatError))` is returned. When participant is successfully added,an empty list is expected. In case of an error encountered while adding participant, the list is populatedwith the failed participants along with the error that was encountered.```Pythonfrom azure.communication.identity import CommunicationIdentityClientfrom azure.communication.chat import ChatParticipantfrom datetime import datetime# create 2 usersidentity_client = CommunicationIdentityClient.from_connection_string('&lt;connection_string&gt;')new_users = [identity_client.create_user() for i in range(2)]# # conversely, you can also add an existing user to a chat thread; provided the user_id is known# from azure.communication.chat import CommunicationUserIdentifier## user_id = 'some user id'# user_display_name = &quot;Wilma Flinstone&quot;# new_user = CommunicationUserIdentifier(user_id)# participant = ChatParticipant(#     identifier=new_user,#     display_name=user_display_name,#     share_history_time=datetime.utcnow())participants = []for _user in new_users:  chat_participant = ChatParticipant(    identifier=_user,    display_name='Fred Flinstone',    share_history_time=datetime.utcnow()  )  participants.append(chat_participant)response = chat_thread_client.add_participants(thread_participants=participants)def decide_to_retry(error, **kwargs):    &quot;&quot;&quot;    Insert some custom logic to decide if retry is applicable based on error    &quot;&quot;&quot;    return True# verify if all users has been successfully added or not# in case of partial failures, you can retry to add all the failed participantsretry = [p for p, e in response if decide_to_retry(e)]if retry:    chat_thread_client.add_participants(retry)```### Remove thread participantUse `remove_participant` method to remove thread participant from the thread identified by threadId.`identifier` is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user() from `azure-communication-identity`&lt;!-- [User Access Tokens](#user-access-tokens)  --&gt;and was added into this chat thread.- Use `identifier` to specify the `CommunicationUserIdentifier` you created```pythonchat_thread_client.remove_participant(identifier=new_user)# # conversely you can also do the following; provided the user_id is known# from azure.communication.chat import CommunicationUserIdentifier## user_id = 'some user id'# chat_thread_client.remove_participant(identifier=CommunicationUserIdentifier(new_user))```## Events Operations### Send typing notificationUse `send_typing_notification` method to post a typing notification event to a thread, on behalf of a user.```Pythonchat_thread_client.send_typing_notification()```### Send read receiptUse `send_read_receipt` method to post a read receipt event to a thread, on behalf of a user.- Use `message_id` to specify the id of the message whose read receipt is to be sent```pythoncontent='hello world'send_message_result = chat_thread_client.send_message(content)send_message_result_id = send_message_result.idchat_thread_client.send_read_receipt(message_id=send_message_result_id)```### List read receiptsUse `list_read_receipts` method retrieves read receipts for a thread.- Use `results_per_page`, optional, The maximum number of read receipts to be returned per page.- Use `skip`,optional, to skips read receipts up to a specified position in response.An iterator of `[ChatMessageReadReceipt]` is the response returned from listing read receipts```pythonread_receipts = chat_thread_client.list_read_receipts(results_per_page=5, skip=5)for read_receipt_page in read_receipts.by_page():    for read_receipt in read_receipt_page:        print(read_receipt)        print(read_receipt.sender)        print(read_receipt.chat_message_id)        print(read_receipt.read_on)```## Sample CodeThese are code samples that show common scenario operations with the Azure Communication Chat client library.The async versions of the samples (the python sample files appended with `_async`) show asynchronous operations,and require Python 3.6 or later.Before run the sample code, refer to Prerequisites&lt;!-- [Prerequisites](#Prerequisites) --&gt;to create a resource, then set some Environment Variables```bashset AZURE_COMMUNICATION_SERVICE_ENDPOINT=&quot;https://&lt;RESOURCE_NAME&gt;.communcationservices.azure.com&quot;set COMMUNICATION_SAMPLES_CONNECTION_STRING=&quot;&lt;connection string of your Communication service&gt;&quot;pip install azure-communication-identitypython samples\chat_client_sample.pypython samples\chat_client_sample_async.pypython samples\chat_thread_client_sample.pypython samples\chat_thread_client_sample_async.py```# TroubleshootingRunning into issues? This section should contain details as to what to do there.# Next stepsMore sample code should go [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-chat/samples), along with links out to the appropriate example tests.# ContributingIf you encounter any bugs or have suggestions, please file an issue in the [Issues](&lt;https://github.com/Azure/azure-sdk-for-python/issues&gt;) section of the project.![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)</longdescription>
</pkgmetadata>