<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>TorMySQL========|Build Status|The highest performance asynchronous MySQL driver.PyPI page: https://pypi.python.org/pypi/tormysqlAbout=====Presents a Future-based API and greenlet for non-blocking access toMySQL.Support both `tornado &lt;https://github.com/tornadoweb/tornado&gt;`__ and`asyncio &lt;https://docs.python.org/3/library/asyncio.html&gt;`__.Installation============::    pip install TorMySQLUsed Tornado============example pool------------::    from tornado.ioloop import IOLoop    from tornado import gen    import tormysql    pool = tormysql.ConnectionPool(        max_connections = 20, #max open connections        idle_seconds = 7200, #conntion idle timeout time, 0 is not timeout        wait_connection_timeout = 3, #wait connection timeout        host = &quot;127.0.0.1&quot;,        user = &quot;root&quot;,        passwd = &quot;TEST&quot;,        db = &quot;test&quot;,        charset = &quot;utf8&quot;    )    @gen.coroutine    def test():        with (yield pool.Connection()) as conn:            try:                with conn.cursor() as cursor:                    yield cursor.execute(&quot;INSERT INTO test(id) VALUES(1)&quot;)            except:                yield conn.rollback()            else:                yield conn.commit()            with conn.cursor() as cursor:                yield cursor.execute(&quot;SELECT * FROM test&quot;)                datas = cursor.fetchall()        print datas                yield pool.close()    ioloop = IOLoop.instance()    ioloop.run_sync(test)example helpers---------------::    from tornado.ioloop import IOLoop    from tornado import gen    import tormysql    pool = tormysql.helpers.ConnectionPool(        max_connections = 20, #max open connections        idle_seconds = 7200, #conntion idle timeout time, 0 is not timeout        wait_connection_timeout = 3, #wait connection timeout        host = &quot;127.0.0.1&quot;,        user = &quot;root&quot;,        passwd = &quot;TEST&quot;,        db = &quot;test&quot;,        charset = &quot;utf8&quot;    )    @gen.coroutine    def test():        tx = yield pool.begin()        try:            yield tx.execute(&quot;INSERT INTO test(id) VALUES(1)&quot;)        except:            yield tx.rollback()        else:            yield tx.commit()        cursor = yield pool.execute(&quot;SELECT * FROM test&quot;)        datas = cursor.fetchall()        print datas        yield pool.close()    ioloop = IOLoop.instance()    ioloop.run_sync(test)Used asyncio alone==================example pool------------::    from asyncio import events    import tormysql    pool = tormysql.ConnectionPool(       max_connections = 20, #max open connections       idle_seconds = 7200, #conntion idle timeout time, 0 is not timeout       wait_connection_timeout = 3, #wait connection timeout       host = &quot;127.0.0.1&quot;,       user = &quot;root&quot;,       passwd = &quot;TEST&quot;,       db = &quot;test&quot;,       charset = &quot;utf8&quot;    )    async def test():       async with await pool.Connection() as conn:           try:               async with conn.cursor() as cursor:                   await cursor.execute(&quot;INSERT INTO test(id) VALUES(1)&quot;)           except:               await conn.rollback()           else:               await conn.commit()           async with conn.cursor() as cursor:               await cursor.execute(&quot;SELECT * FROM test&quot;)               datas = cursor.fetchall()       print(datas)       await pool.close()    ioloop = events.get_event_loop()    ioloop.run_until_complete(test)example helpers---------------::    from asyncio import events    import tormysql    pool = tormysql.helpers.ConnectionPool(       max_connections = 20, #max open connections       idle_seconds = 7200, #conntion idle timeout time, 0 is not timeout       wait_connection_timeout = 3, #wait connection timeout       host = &quot;127.0.0.1&quot;,       user = &quot;root&quot;,       passwd = &quot;TEST&quot;,       db = &quot;test&quot;,       charset = &quot;utf8&quot;    )    async def test():       async with await pool.begin() as tx:           await tx.execute(&quot;INSERT INTO test(id) VALUES(1)&quot;)       cursor = await pool.execute(&quot;SELECT * FROM test&quot;)       datas = cursor.fetchall()       print(datas)       await pool.close()    ioloop = events.get_event_loop()    ioloop.run_until_complete(test)Resources=========You can read `PyMySQL Documentation &lt;http://pymysql.readthedocs.io/&gt;`__online for more information.License=======TorMySQL uses the MIT license, see LICENSE file for the details... |Build Status| image:: https://travis-ci.org/snower/TorMySQL.svg?branch=master   :target: https://travis-ci.org/snower/TorMySQL</longdescription>
</pkgmetadata>