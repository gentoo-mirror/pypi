<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Atlas API==========Python Bindings for the Atlas Public APIThis project intends to create a fairly opinionated set of bindings for the Atlas Public API which makes interactingwith Atlas using Python easier. The API makes extensive use of enums and other helper type objects to take someof the guess work of administering Atlas clusters with Python.In most cases objects will be returned based upon the structure of the json returned but the API Endpoints. These objectsare defined either in the `specs.py` module or in a module named after the objects themselves (`alerts.py` for example).All calls to the Atlas API require API credentials, you can configure them in your Atlas project.`Atlas API &lt;https://docs.atlas.mongodb.com/api/&gt;`__`Configure Atlas API Access &lt;https://docs.atlas.mongodb.com/configure-api-access/&gt;`__`Current state of the python-atlasapi support &lt;https://github.com/mgmonteleone/python-atlasapi/blob/master/API.rst&gt;`__.. image:: https://img.shields.io/pypi/l/atlasapi.svg     :target: https://pypi.org/project/atlasapi/.. image:: https://img.shields.io/pypi/status/atlasapi.svg     :target: https://pypi.org/project/atlasapi/.. image:: https://img.shields.io/pypi/pyversions/atlasapi.svg     :target: https://pypi.org/project/atlasapi/     Documentation-------------.. image:: https://readthedocs.org/projects/python-atlasapi/badge/?version=latest     :target: https://python-atlasapi.readthedocs.io/en/latest/?badge=latest Found at https://python-atlasapi.readthedocs.io/Found at https://python-atlasapi.readthedocs.io/Autobuilt on each commit.Installation------------This package is available for Python 3.6+... image:: https://badge.fury.io/py/atlasapi.svg     :target: https://pypi.org/project/atlasapi/You can install the latest released version from pypi... code:: bash    pip3 install atlasapiUsage-----Get All Database Users^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from atlasapi.atlas import Atlas        a = Atlas(&quot;&lt;user&gt;&quot;,&quot;&lt;password&gt;&quot;,&quot;&lt;groupid&gt;&quot;)        # Low level Api    details = a.DatabaseUsers.get_all_database_users(pageNum=1, itemsPerPage=100)        # Iterable    for user in a.DatabaseUsers.get_all_database_users(iterable=True):        print(user[&quot;username&quot;])Create a Database User^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from atlasapi.atlas import Atlas    from atlasapi.specs import DatabaseUsersPermissionsSpecs, RoleSpecs    a = Atlas(&quot;&lt;user&gt;&quot;,&quot;&lt;password&gt;&quot;,&quot;&lt;groupid&gt;&quot;)    p = DatabaseUsersPermissionsSpecs(&quot;test&quot;, &quot;password for test user&quot;)    p.add_roles(&quot;test-db&quot;,                [RoleSpecs.dbAdmin,                RoleSpecs.readWrite])    p.add_role(&quot;other-test-db&quot;, RoleSpecs.readWrite, &quot;a_collection&quot;)    details = a.DatabaseUsers.create_a_database_user(p)Update a Database User^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from atlasapi.atlas import Atlas    from atlasapi.specs import DatabaseUsersUpdatePermissionsSpecs, RoleSpecs    a = Atlas(&quot;&lt;user&gt;&quot;,&quot;&lt;password&gt;&quot;,&quot;&lt;groupid&gt;&quot;)        # Update roles and password    p = DatabaseUsersUpdatePermissionsSpecs(&quot;password for test user&quot;)    p.add_role(&quot;test-db&quot;, RoleSpecs.read, &quot;a_collection&quot;)        details = a.DatabaseUsers.update_a_database_user(&quot;test&quot;, p)Delete a Database User^^^^^^^^^^^^^^^^^^^^^^.. code:: python    from atlasapi.atlas import Atlas        a = Atlas(&quot;&lt;user&gt;&quot;,&quot;&lt;password&gt;&quot;,&quot;&lt;groupid&gt;&quot;)        details = a.DatabaseUsers.delete_a_database_user(&quot;test&quot;)    Get a Single Database User^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python        from atlasapi.atlas import Atlas        a = Atlas(&quot;&lt;user&gt;&quot;,&quot;&lt;password&gt;&quot;,&quot;&lt;groupid&gt;&quot;)        details = a.DatabaseUsers.get_a_single_database_user(&quot;test&quot;)Clusters^^^^^^^^.. code:: python    from atlasapi.atlas import Atlas    from atlasapi.clusters import  AdvancedOptions    a = Atlas(&quot;&lt;user&gt;&quot;,&quot;&lt;password&gt;&quot;,&quot;&lt;groupid&gt;&quot;)        # Is existing cluster ?    a.Clusters.is_existing_cluster(&quot;cluster-dev&quot;)        # Get All Clusters    for cluster in a.Clusters.get_all_clusters(iterable=True):        print(cluster[&quot;name&quot;])        # Get a Single Cluster    details = a.Clusters.get_single_cluster(&quot;cluster-dev&quot;)        # Delete a Cluster (dry run, raise ErrConfirmationRequested)    details = a.Clusters.delete_cluster(&quot;cluster-dev&quot;)        # Delete a Cluster (approved)    details = a.Clusters.delete_cluster(&quot;cluster-dev&quot;, areYouSure=True)    # Create a Simple Replica Set Cluster    details = a.Clusters.create_basic_rs(name=&quot;cluster-dev&quot;)    # Create a cluster    provider_settings: ProviderSettings = ProviderSettings()    regions_config = RegionConfig()    replication_specs = ReplicationSpecs(regions_config={provider_settings.region_name: regions_config.__dict__})    cluster_config = ClusterConfig(name='test2',                               providerSettings=provider_settings,                               replication_specs=replication_specs)    output = a.Clusters.create_cluster(cluster_config)    # Modify a cluster    existing_config = a.Clusters.get_single_cluster_as_obj(cluster=TEST_CLUSTER_NAME)    out.providerSettings.instance_size_name = InstanceSizeName.M10    out.disk_size_gb = 13    new_config = a.Clusters.modify_cluster('pyAtlasAPIClustersTest', out)    pprint(new_config)    # Modify cluster instance size    a.Clusters.modify_cluster_instanct_size(cluster='pyAtlasAPIClustersTest',new_cluster_size=InstanceSizeName.M20)    # Pause(unpause) a cluster    a.Clusters.pause_cluster(cluster='pyAtlasAPIClustersTest', toggle_if_paused=True)    # Get Advanced Options    a.Clusters.get_single_cluster_advanced_options(cluster='pyAtlasAPIClustersTest')    # Set Advanced Options    options = AdvancedOptions(failIndexKeyTooLong=True)    self.a.Clusters.modify_cluster_advanced_options(cluster='pyAtlasAPIClustersTest',                                                                    advanced_options=options)Alerts^^^^^^.. code:: python    from atlasapi.atlas import Atlas    from atlasapi.specs import AlertStatusSpec        a = Atlas(&quot;&lt;user&gt;&quot;,&quot;&lt;password&gt;&quot;,&quot;&lt;groupid&gt;&quot;)        # Get All Alerts in OPEN status    for alert in a.Alerts.get_all_alerts(AlertStatusSpec.OPEN, iterable=True):        print(alert[&quot;id&quot;])        # Get an Alert    details = a.Alerts.get_an_alert(&quot;597f221fdf9db113ce1755cd&quot;)        # Acknowledge an Alert (BROKEN)    #  until (now + 6 hours)    from datetime import datetime, timezone, timedelta    now = datetime.now(timezone.utc)    until = now + timedelta(hours=6)    details = a.Alerts.acknowledge_an_alert(&quot;597f221fdf9db113ce1755cd&quot;, until, &quot;Acknowledge reason&quot;)        #  forever (BROKEN)    details = a.Alerts.acknowledge_an_alert_forever(&quot;597f221fdf9db113ce1755cd&quot;, &quot;Acknowledge reason&quot;)        # Unacknowledge an Alert (BROKEN    details = a.Alerts.unacknowledge_an_alert(&quot;597f221fdf9db113ce1755cd&quot;)Metrics (Measurements)^^^^^^^^^^^^^^^^^^^^^^Examples coming soon.Logs^^^^^^^^^^^^^^^^^^^.. code:: python    from atlasapi.atlas import Atlas    from atlasapi.specs import AlertStatusSpec    atlas = Atlas(&quot;&lt;user&gt;&quot;,&quot;&lt;password&gt;&quot;,&quot;&lt;groupid&gt;&quot;)    atlas.Hosts.fill_host_list()    test_host = atlas.Hosts.host_list[0]    print(f'Will get a mongod log for {test_host.hostname}')    out = atlas.Hosts.get_loglines_for_host(host_obj=test_host, log_name=AtlasLogNames.MONGODB)    for each_line in out:        print(each_line.__dict__)Whitelists^^^^^^^^^^Examples coming soon.Maintenance Windows^^^^^^^^^^^^^^^^^^^Examples coming soon.Error Types-----------About ErrAtlasGeneric^^^^^^^^^^^^^^^^^^^^^All ErrAtlas* Exception class inherit from ErrAtlasGeneric... code:: python        try:        ...    except ErrAtlasGeneric as e:        c, details = e.getAtlasResponse()        - 'c'    HTTP return code (4xx or 5xx for an error, 2xx otherwise)- 'details'    Response payloadExceptions^^^^^^^^^^- ErrRole    A role is not compatible with Atlas- ErrPagination    An issue occurs during a &quot;Get All&quot; function with 'iterable=True'- ErrPaginationLimits    Out of limit on 'pageNum' or 'itemsPerPage' parameters- ErrAtlasBadRequest    Something was wrong with the client request.- ErrAtlasUnauthorized    Authentication is required- ErrAtlasForbidden    Access to the specified resource is not permitted.- ErrAtlasNotFound    The requested resource does not exist.- ErrAtlasMethodNotAllowed    The HTTP method is not supported for the specified resource.- ErrAtlasConflict    This is typically the response to a request to create or modify a property of an entity that is unique when an existing entity already exists with the same value for that property.- ErrAtlasServerErrors    Something unexpected went wrong.- ErrConfirmationRequested    Confirmation requested to execute the call.Bugs or Issues--------------Please report bugs, issues or feature requests to `GithubIssues &lt;https://github.com/mgmonteleone/python-atlasapi/issues&gt;`__Testing-------`Circle Ci &lt;https://circleci.com/gh/mgmonteleone/python-atlasapi/&gt;`__develop.. image:: https://circleci.com/gh/mgmonteleone/python-atlasapi/tree/develop.svg?style=svg&amp;circle-token=34ce5f4745b141a0ee643bd212d85359c0594884    :target: https://circleci.com/gh/mgmonteleone/python-atlasapi/tree/develop    master.. image:: https://circleci.com/gh/mgmonteleone/python-atlasapi/tree/master.svg?style=svg&amp;circle-token=34ce5f4745b141a0ee643bd212d85359c0594884    :target: https://circleci.com/gh/mgmonteleone/python-atlasapi/tree/master.. image:: https://readthedocs.org/projects/python-atlasapi/badge/?version=latest     :target: https://python-atlasapi.readthedocs.io/en/latest/?badge=latest       :alt: Documentation Status</longdescription>
</pkgmetadata>