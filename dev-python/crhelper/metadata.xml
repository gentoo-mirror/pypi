<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Custom Resource HelperSimplify best practice Custom Resource creation, sending responses to CloudFormation and providing exception, timeout trapping, and detailed configurable logging.[![PyPI Version](https://img.shields.io/pypi/v/crhelper.svg)](https://pypi.org/project/crhelper/)![Python Versions](https://img.shields.io/pypi/pyversions/crhelper.svg)[![Build Status](https://travis-ci.com/aws-cloudformation/custom-resource-helper.svg?branch=main)](https://travis-ci.com/aws-cloudformation/custom-resource-helper)[![Test Coverage](https://codecov.io/gh/aws-cloudformation/custom-resource-helper/branch/main/graph/badge.svg)](https://codecov.io/gh/aws-cloudformation/custom-resource-helper)## Features* Dead simple to use, reduces the complexity of writing a CloudFormation custom resource* Guarantees that CloudFormation will get a response even if an exception is raised* Returns meaningful errors to CloudFormation Stack events in the case of a failure* Polling enables run times longer than the lambda 15 minute limit* JSON logging that includes request id's, stack id's and request type to assist in tracing logs relevant to a particular CloudFormation event* Catches function timeouts and sends CloudFormation a failure response* Static typing (mypy) compatible ## InstallationInstall into the root folder of your lambda function```shellcd my-lambda-function/pip install crhelper -t .```## Example Usage[This blog](https://aws.amazon.com/blogs/infrastructure-and-automation/aws-cloudformation-custom-resource-creation-with-python-aws-lambda-and-crhelper/) covers usage in more detail.```pythonfrom __future__ import print_functionfrom crhelper import CfnResourceimport logginglogger = logging.getLogger(__name__)# Initialise the helper, all inputs are optional, this example shows the defaultshelper = CfnResource(json_logging=False, log_level='DEBUG', boto_level='CRITICAL', sleep_on_delete=120, ssl_verify=None)try:    ## Init code goes here    passexcept Exception as e:    helper.init_failure(e)@helper.createdef create(event, context):    logger.info(&quot;Got Create&quot;)    # Optionally return an ID that will be used for the resource PhysicalResourceId,     # if None is returned an ID will be generated. If a poll_create function is defined     # return value is placed into the poll event as event['CrHelperData']['PhysicalResourceId']    #    # To add response data update the helper.Data dict    # If poll is enabled data is placed into poll event as event['CrHelperData']    helper.Data.update({&quot;test&quot;: &quot;testdata&quot;})    # To return an error to cloudformation you raise an exception:    if not helper.Data.get(&quot;test&quot;):        raise ValueError(&quot;this error will show in the cloudformation events log and console.&quot;)        return &quot;MyResourceId&quot;@helper.updatedef update(event, context):    logger.info(&quot;Got Update&quot;)    # If the update resulted in a new resource being created, return an id for the new resource.     # CloudFormation will send a delete event with the old id when stack update completes@helper.deletedef delete(event, context):    logger.info(&quot;Got Delete&quot;)    # Delete never returns anything. Should not fail if the underlying resources are already deleted.    # Desired state.@helper.poll_createdef poll_create(event, context):    logger.info(&quot;Got create poll&quot;)    # Return a resource id or True to indicate that creation is complete. if True is returned an id     # will be generated    return Truedef handler(event, context):    helper(event, context)```### PollingIf you need longer than the max runtime of 15 minutes, you can enable polling by adding additional decorators for `poll_create`, `poll_update` or `poll_delete`. When a poll function is defined for `create`/`update`/`delete` the function will not send a response to CloudFormation and instead a CloudWatch Events schedule will be created to re-invoke the lambda function every 2 minutes. When the function is invoked the matching `@helper.poll_` function will be called, logic to check for completion should go here, if the function returns `None` then the schedule will run again in 2 minutes. Once complete either return a PhysicalResourceID or `True` to have one generated. The schedule will be deleted and a response sent back to CloudFormation. If you use polling the following additional IAM policy must be attached to the function's IAM role:```json{  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [    {      &quot;Effect&quot;: &quot;Allow&quot;,      &quot;Action&quot;: [        &quot;lambda:AddPermission&quot;,        &quot;lambda:RemovePermission&quot;,        &quot;events:PutRule&quot;,        &quot;events:DeleteRule&quot;,        &quot;events:PutTargets&quot;,        &quot;events:RemoveTargets&quot;      ],      &quot;Resource&quot;: &quot;*&quot;    }  ]}```### Certificate VerificationTo turn off certification verification, or to use a custom CA bundle path for the underlying boto3 clients used by this library, override the `ssl_verify` argument with the appropriate values.  These can be either:* `False` - do not validate SSL certificates. SSL will still be used, but SSL certificates will not be verified.* `path/to/cert/bundle.pem` - A filename of the CA cert bundle to uses. You can specify this argument if you want to use a different CA cert bundle than the one used by botocore.## CreditsDecorator implementation inspired by https://github.com/ryansb/cfn-wrapper-pythonLog implementation inspired by https://gitlab.com/hadrien/aws_lambda_logging## LicenseThis library is licensed under the Apache 2.0 License.</longdescription>
</pkgmetadata>