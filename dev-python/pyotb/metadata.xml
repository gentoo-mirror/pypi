<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pyotb: Orfeo ToolBox for Python[![latest release](https://gitlab.orfeo-toolbox.org/nicolasnn/pyotb/-/badges/release.svg)](https://gitlab.orfeo-toolbox.org/nicolasnn/pyotb/-/releases)[![pipeline status](https://gitlab.orfeo-toolbox.org/nicolasnn/pyotb/badges/develop/pipeline.svg)](https://gitlab.orfeo-toolbox.org/nicolasnn/pyotb/-/commits/develop)[![coverage report](https://gitlab.orfeo-toolbox.org/nicolasnn/pyotb/badges/develop/coverage.svg)](https://gitlab.orfeo-toolbox.org/nicolasnn/pyotb/-/commits/develop)[![read the docs status](https://readthedocs.org/projects/pyotb/badge/?version=master)](https://pyotb.readthedocs.io/en/master/)**pyotb** wraps the [Orfeo Toolbox](https://www.orfeo-toolbox.org/) in a pythonic, developer friendly fashion.  ## Key features- Easy use of Orfeo ToolBox (OTB) applications from python- Simplify common sophisticated I/O features of OTB- Lazy execution of operations thanks to OTB streaming mechanism- Interoperable with popular python libraries ([numpy](https://numpy.org/) and [rasterio](https://rasterio.readthedocs.io/))- ExtensibleDocumentation hosted at [pyotb.readthedocs.io](https://pyotb.readthedocs.io/).## ExampleBuilding a simple pipeline with OTB applications```pyimport pyotb# RigidTransformResample, with input parameters as dictresampled = pyotb.RigidTransformResample({    &quot;in&quot;: &quot;https://myserver.ia/input.tif&quot;,  # Note: no /vsicurl/    &quot;interpolator&quot;: &quot;linear&quot;,     &quot;transform.type.id.scaley&quot;: 0.5,    &quot;transform.type.id.scalex&quot;: 0.5})# OpticalCalibration, with input parameters as argscalib = pyotb.OpticalCalibration(resampled)# BandMath, with input parameters as kwargsndvi = pyotb.BandMath(calib, exp=&quot;ndvi(im1b1, im1b4)&quot;)# Pythonic slicingroi = ndvi[20:586, 9:572]# Pipeline execution. The actual computation happens here!roi.write(&quot;output.tif&quot;, &quot;float&quot;)```</longdescription>
</pkgmetadata>