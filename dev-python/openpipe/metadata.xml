<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># OpenPipe Python ClientThis client allows you automatically report your OpenAI calls to [OpenPipe](https://openpipe.ai/). OpenPipe## Installation`pip install openpipe`## Usage1. Create a project at https://app.openpipe.ai2. Find your project's API key at https://app.openpipe.ai/project/settings3. Configure the OpenPipe client as shown below.```pythonfrom openpipe import openai, configure_openpipeimport os# Set the OpenPipe API key you got in step (2) above.# If you have the `OPENPIPE_API_KEY` environment variable set we'll read from it by default.configure_openpipe(api_key=os.getenv(&quot;OPENPIPE_API_KEY&quot;))# Configure OpenAI the same way you would normallyopenai.api_key = os.getenv(&quot;OPENAI_API_KEY&quot;)```You can now use your new OpenAI client, which functions identically to the generic OpenAI client while also reporting calls to your OpenPipe instance.## Special Features### TaggingOpenPipe has a concept of &quot;tagging.&quot; This is very useful for grouping a certain set of completions together. When you're using a dataset for fine-tuning, you can select all the prompts that match a certain set of tags. Here's how you can use the tagging feature:```pythoncompletion = openai.ChatCompletion.create(    model=&quot;gpt-3.5-turbo&quot;,    messages=[{&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;count to 10&quot;}],    openpipe={        &quot;tags&quot;: {&quot;prompt_id&quot;: &quot;counting&quot;},        &quot;log_request&quot;: True, # Enable/disable data collection. Defaults to True.    },)```</longdescription>
</pkgmetadata>