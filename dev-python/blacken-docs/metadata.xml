<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>============blacken-docs============.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/blacken-docs/main.yml?branch=main&amp;style=for-the-badge   :target: https://github.com/adamchainz/blacken-docs/actions?workflow=CI.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge  :target: https://github.com/adamchainz/blacken-docs/actions?workflow=CI.. image:: https://img.shields.io/pypi/v/blacken-docs.svg?style=for-the-badge   :target: https://pypi.org/project/blacken-docs/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge   :target: https://github.com/psf/black.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white&amp;style=for-the-badge   :target: https://github.com/pre-commit/pre-commit   :alt: pre-commitRun `Black &lt;https://pypi.org/project/black/&gt;`__ on Python code blocks in documentation files.Installation============Use **pip**:.. code-block:: sh    python -m pip install blacken-docsPython 3.8 to 3.12 supported.Black 22.1.0+ supported.pre-commit hook---------------You can also install blacken-docs as a `pre-commit &lt;https://pre-commit.com/&gt;`__ hook.Add the following to the ``repos`` section of your ``.pre-commit-config.yaml`` file (`docs &lt;https://pre-commit.com/#plugins&gt;`__):.. code-block:: yaml    -   repo: https://github.com/adamchainz/blacken-docs        rev: &quot;&quot;  # replace with latest tag on GitHub        hooks:        -   id: blacken-docs            additional_dependencies:            - black==22.12.0Then, reformat your entire project:.. code-block:: sh    pre-commit run blacken-docs --all-filesSince Black is a moving target, it’s best to pin it in ``additional_dependencies``.Upgrade as appropriate.Usage=====blacken-docs is a commandline tool that rewrites documentation files in place.It supports Markdown, reStructuredText, and LaTex files.Additionally, you can run it on Python files to reformat Markdown and reStructuredText within docstrings.Run ``blacken-docs`` with the filenames to rewrite:.. code-block:: sh    blacken-docs README.rstIf any file is modified, ``blacken-docs`` exits nonzero.blacken-docs currently passes the following options through to Black:* ``-l`` / ``--line-length``* ``-t`` / ``--target-version``* ``-S`` / ``--skip-string-normalization``It also has the below extra options:* ``-E`` / ``--skip-errors`` - Don’t exit non-zero for errors from Black (normally syntax errors).* ``--rst-literal-blocks`` - Also format literal blocks in reStructuredText files (more below).History=======blacken-docs was created by `Anthony Sottile &lt;https://github.com/asottile/&gt;`__ in 2018.At the end of 2022, Adam Johnson took over maintenance.Supported code block formats============================blacken-docs formats code blocks matching the following patterns.Markdown--------In “python” blocks:.. code-block:: markdown    ```python    def hello():        print(&quot;hello world&quot;)    ```And “pycon” blocks:.. code-block:: markdown    ```pycon    &gt;&gt;&gt; def hello():    ...     print(&quot;hello world&quot;)    ...    ```Within Python files, docstrings that contain Markdown code blocks may be reformatted:.. code-block:: python    def f():        &quot;&quot;&quot;docstring here        ```python        print(&quot;hello world&quot;)        ```        &quot;&quot;&quot;reStructuredText----------------In “python” blocks:.. code-block:: rst    .. code-block:: python        def hello():            print(&quot;hello world&quot;)In “pycon” blocks:.. code-block:: rst    .. code-block:: pycon        &gt;&gt;&gt; def hello():        ...     print(&quot;hello world&quot;)        ...Use ``--rst-literal-blocks`` to also format `literal blocks &lt;https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#literal-blocks&gt;`__:.. code-block:: rst    An example::        def hello():            print(&quot;hello world&quot;)Literal blocks are marked with ``::`` and can be any monospaced text by default.However Sphinx interprets them as Python code `by default &lt;https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#rst-literal-blocks&gt;`__.If your project uses Sphinx and such a configuration, add ``--rst-literal-blocks`` to also format such blocks.Within Python files, docstrings that contain reStructuredText code blocks may be reformatted:.. code-block:: python    def f():        &quot;&quot;&quot;docstring here        .. code-block:: python            print(&quot;hello world&quot;)        &quot;&quot;&quot;LaTeX-----In minted “python” blocks:.. code-block:: latex    \begin{minted}{python}    def hello():        print(&quot;hello world&quot;)    \end{minted}In minted “pycon” blocks:.. code-block:: latex    \begin{minted}{pycon}    &gt;&gt;&gt; def hello():    ...     print(&quot;hello world&quot;)    ...    \end{minted}In PythonTeX blocks:.. code-block:: latex    \begin{pycode}    def hello():        print(&quot;hello world&quot;)    \end{pycode}</longdescription>
</pkgmetadata>