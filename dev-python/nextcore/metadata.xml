<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;img alt=&quot;&quot; src=&quot;docs/_static/logo.svg&quot; width=&quot;160px&quot;/&gt;    # Nextcore  &lt;sub&gt;A low level Discord API wrapper.&lt;/sub&gt;  &lt;/div&gt;### ‚ú® Features- #### Speed  We try to make the library as fast as possible, without compromising on readability of the code or features.    &lt;video src=&quot;https://user-images.githubusercontent.com/35035079/172221406-b8d618e6-75fd-45d4-a470-62aeeab5bc0a.mp4&quot; /&gt;- #### Modularity  All the components can easily be swapped out with your own.- #### Control  Nextcore offers fine-grained control over things most libraries don't support.      This currently includes:    - Setting priority for individual requests  - Swapping out components&lt;br&gt;&lt;div align=&quot;center&quot;&gt;  # Examples  &lt;/div&gt;### üèì Ping pongA simple &quot;ping pong&quot; example in nextcore.This will respond with &quot;pong&quot; each time someone sends &quot;ping&quot; in the chat.```pyimport asynciofrom os import environfrom typing import castfrom discord_typings import MessageDatafrom nextcore.gateway import ShardManagerfrom nextcore.http import BotAuthentication, HTTPClient, Route# ConstantsAUTHENTICATION = BotAuthentication(environ[&quot;TOKEN&quot;])# Intents are a way to select what intents Discord should send to you.# For a list of intents see https://discord.dev/topics/gateway#gateway-intentsGUILD_MESSAGES_INTENT = 1 &lt;&lt; 9MESSAGE_CONTENT_INTENT = 1 &lt;&lt; 15INTENTS = GUILD_MESSAGES_INTENT | MESSAGE_CONTENT_INTENT  # Guild messages and message content intents.# Create a HTTPClient and a ShardManager.# A ShardManager is just a neat wrapper around Shard objects.http_client = HTTPClient()shard_manager = ShardManager(AUTHENTICATION, INTENTS, http_client)@shard_manager.event_dispatcher.listen(&quot;MESSAGE_CREATE&quot;)async def on_message(message: MessageData):    # This function will be called every time a message is sent.    if message[&quot;content&quot;] == &quot;ping&quot;:        # Send a pong message to respond.        route = Route(&quot;POST&quot;, &quot;/channels/{channel_id}/messages&quot;, channel_id=message[&quot;channel_id&quot;])        await http_client.request(            route,            rate_limit_key=AUTHENTICATION.rate_limit_key,            json={&quot;content&quot;: &quot;pong&quot;},            headers=AUTHENTICATION.headers,        )async def main():    await http_client.setup()    # This should return once all shards have started to connect.    # This does not mean they are connected.    await shard_manager.connect()    # Raise a error and exit whenever a critical error occurs    (error,) = await shard_manager.dispatcher.wait_for(lambda: True, &quot;critical&quot;)    raise cast(Exception, error)asyncio.run(main())```&gt; More examples can be seen in the [examples](examples/) directory.&lt;br&gt;## ContributingWant to help us out? Please read our [contributing](https://nextcore.readthedocs.io/en/latest/contributing/getting_started.html) docs.</longdescription>
</pkgmetadata>