<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gget[![pypi version](https://img.shields.io/pypi/v/gget)](https://pypi.org/project/gget)[![image](https://anaconda.org/bioconda/gget/badges/version.svg)](https://anaconda.org/bioconda/gget)[![Downloads](https://static.pepy.tech/personalized-badge/gget?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=brightgreen&amp;left_text=downloads)](https://pepy.tech/project/gget)[![Conda](https://img.shields.io/conda/dn/bioconda/gget?logo=Anaconda)](https://anaconda.org/bioconda/gget)[![license](https://img.shields.io/pypi/l/gget)](LICENSE)![status](https://github.com/pachterlab/gget/workflows/CI/badge.svg)![status](https://github.com/lauraluebbert/test_gget_alphafold/workflows/CI_alphafold/badge.svg)![Code Coverage](https://img.shields.io/badge/Coverage-83%25-green.svg)  `gget` is a free, open-source command-line tool and Python package that enables efficient querying of genomic databases. `gget`  consists of a collection of separate but interoperable modules, each designed to facilitate one type of database querying in a single line of code.      ![alt text](https://github.com/pachterlab/gget/blob/main/figures/gget_overview.png?raw=true)    If you use `gget` in a publication, please [cite*](https://pachterlab.github.io/gget/cite.html):    ```Luebbert, L., &amp; Pachter, L. (2023). Efficient querying of genomic reference databases with gget. Bioinformatics. https://doi.org/10.1093/bioinformatics/btac836```Read the article here: https://doi.org/10.1093/bioinformatics/btac836  # Installation```bashpip install --upgrade gget```Alternative:```bashconda install -c bioconda gget```For use in Jupyter Lab / Google Colab:```pythonimport gget```# [ðŸ”— Manual](https://pachterlab.github.io/gget) # ðŸª„ Quick start guideCommand line:```bash# Fetch all Homo sapiens reference and annotation FTPs from the latest Ensembl release$ gget ref homo_sapiens# Get Ensembl IDs of human genes with &quot;ace2&quot; or &quot;angiotensin converting enzyme 2&quot; in their name/description$ gget search -s homo_sapiens 'ace2' 'angiotensin converting enzyme 2'# Look up gene ENSG00000130234 (ACE2) and its transcript ENST00000252519$ gget info ENSG00000130234 ENST00000252519# Fetch the amino acid sequence of the canonical transcript of gene ENSG00000130234$ gget seq --translate ENSG00000130234# Quickly find the genomic location of (the start of) the amino acid sequence returned by gget seq$ gget blat MSSSSWLLLSLVAVTAAQSTIEEQAKTFLDKFNHEAEDLFYQSSLAS# BLAST (the start of) the amino acid sequence returned by gget seq$ gget blast MSSSSWLLLSLVAVTAAQSTIEEQAKTFLDKFNHEAEDLFYQSSLAS# Align nucleotide or amino acid sequences stored in a FASTA file$ gget muscle path/to/file.fa# Use Enrichr for an ontology analysis of a list of genes$ gget enrichr -db ontology ACE2 AGT AGTR1 ACE AGTRAP AGTR2 ACE3P# Get the human tissue expression of gene ACE2$ gget archs4 -w tissue ACE2# Get the protein structure (in PDB format) of ACE2 as stored in the Protein Data Bank # (PDB IDs can be returned by gget info with flag --pdb)$ gget pdb 1R42 -o 1R42.pdb# Fetch AnnData object based on specified genes, tissue and cell types$ gget cellxgene --gene ACE2 SLC5A1 --tissue lung --cell_type 'mucus secreting cell' -o example_adata.h5ad# Predict the protein structure of GFP from its amino acid sequence$ gget setup alphafold # setup only needs to be run once$ gget alphafold MSKGEELFTGVVPILVELDGDVNGHKFSVSGEGEGDATYGKLTLKFICTTGKLPVPWPTLVTTFSYGVQCFSRYPDHMKQHDFFKSAMPEGYVQERTIFFKDDGNYKTRAEVKFEGDTLVNRIELKGIDFKEDGNILGHKLEYNYNSHNVYIMADKQKNGIKVNFKIRHNIEDGSVQLADHYQQNTPIGDGPVLLPDNHYLSTQSALSKDPNEKRDHMVLLEFVTAAGITHGMDELYK```Python (Jupyter Lab / Google Colab):```python  import ggetgget.ref(&quot;homo_sapiens&quot;)gget.search([&quot;ace2&quot;, &quot;angiotensin converting enzyme 2&quot;], &quot;homo_sapiens&quot;)gget.info([&quot;ENSG00000130234&quot;, &quot;ENST00000252519&quot;])gget.seq(&quot;ENSG00000130234&quot;, translate=True)gget.blat(&quot;MSSSSWLLLSLVAVTAAQSTIEEQAKTFLDKFNHEAEDLFYQSSLAS&quot;)gget.blast(&quot;MSSSSWLLLSLVAVTAAQSTIEEQAKTFLDKFNHEAEDLFYQSSLAS&quot;)gget.muscle(&quot;path/to/file.fa&quot;)gget.enrichr([&quot;ACE2&quot;, &quot;AGT&quot;, &quot;AGTR1&quot;, &quot;ACE&quot;, &quot;AGTRAP&quot;, &quot;AGTR2&quot;, &quot;ACE3P&quot;], database=&quot;ontology&quot;, plot=True)gget.archs4(&quot;ACE2&quot;, which=&quot;tissue&quot;)gget.pdb(&quot;1R42&quot;, save=True)gget.cellxgene(gene = [&quot;ACE2&quot;, &quot;SLC5A1&quot;], tissue = &quot;lung&quot;, cell_type = &quot;mucus secreting cell&quot;)gget.setup(&quot;alphafold&quot;) # setup only needs to be run oncegget.alphafold(&quot;MSKGEELFTGVVPILVELDGDVNGHKFSVSGEGEGDATYGKLTLKFICTTGKLPVPWPTLVTTFSYGVQCFSRYPDHMKQHDFFKSAMPEGYVQERTIFFKDDGNYKTRAEVKFEGDTLVNRIELKGIDFKEDGNILGHKLEYNYNSHNVYIMADKQKNGIKVNFKIRHNIEDGSVQLADHYQQNTPIGDGPVLLPDNHYLSTQSALSKDPNEKRDHMVLLEFVTAAGITHGMDELYK&quot;)```Call `gget` from R using [reticulate](https://rstudio.github.io/reticulate/):```rsystem(&quot;pip install gget&quot;)install.packages(&quot;reticulate&quot;)library(reticulate)gget &lt;- import(&quot;gget&quot;)gget$ref(&quot;homo_sapiens&quot;)gget$search(list(&quot;ace2&quot;, &quot;angiotensin converting enzyme 2&quot;), &quot;homo_sapiens&quot;)gget$info(list(&quot;ENSG00000130234&quot;, &quot;ENST00000252519&quot;))gget$seq(&quot;ENSG00000130234&quot;, translate=TRUE)gget$blat(&quot;MSSSSWLLLSLVAVTAAQSTIEEQAKTFLDKFNHEAEDLFYQSSLAS&quot;)gget$blast(&quot;MSSSSWLLLSLVAVTAAQSTIEEQAKTFLDKFNHEAEDLFYQSSLAS&quot;)gget$muscle(&quot;path/to/file.fa&quot;, out=&quot;path/to/out.afa&quot;)gget$enrichr(list(&quot;ACE2&quot;, &quot;AGT&quot;, &quot;AGTR1&quot;, &quot;ACE&quot;, &quot;AGTRAP&quot;, &quot;AGTR2&quot;, &quot;ACE3P&quot;), database=&quot;ontology&quot;)gget$archs4(&quot;ACE2&quot;, which=&quot;tissue&quot;)gget$pdb(&quot;1R42&quot;, save=TRUE)```#### [More examples](https://github.com/pachterlab/gget_examples)</longdescription>
</pkgmetadata>