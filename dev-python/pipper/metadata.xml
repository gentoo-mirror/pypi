<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Pipper[![PyPI version](https://badge.fury.io/py/pipper.svg)](https://pypi.org/project/pipper/)[![build status](https://gitlab.com/rocket-boosters/pipper/badges/main/pipeline.svg)](https://gitlab.com/rocket-boosters/pipper/commits/main)[![coverage report](https://gitlab.com/rocket-boosters/pipper/badges/main/coverage.svg)](https://gitlab.com/rocket-boosters/pipper/commits/main)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Code style: flake8](https://img.shields.io/badge/code%20style-flake8-white)](https://gitlab.com/pycqa/flake8)[![Code style: mypy](https://img.shields.io/badge/code%20style-mypy-white)](http://mypy-lang.org/)[![PyPI - License](https://img.shields.io/pypi/l/pipper)](https://pypi.org/project/pipper/)__Private Python package manager on an S3 bucket__A Python package manager wrapped around pip and poetry for lightweightmanagement of non-public packages with an AWS S3 static backend. Requires noserver or database resources, only a private S3 bucket that stores the pipperpackages. Authentication is handled using standard AWS Identity and AccessManagement (IAM) users, roles and policies.## Installing pipperThe pipper package can be installed using pip:    $ pip install pipperor with poetry:    $ poetry add pipper --dev## Basic UsagePipper is primarily used from the command line and consists of multiple sub-command actions. The general format of a pipper command is:    $ pipper &lt;ACTION&gt; &lt;REQUIRED_ARGS&gt; --flag=&lt;VALUE&gt; --other-flag ...The available actions are: * [install](#install-action): add or update new packages * [download](#download-action): save remote packages locally * [info](#info-action): information on a specific package * [bundle](#bundle-action): bundle a package for publishing * [publish](#publish-action): release a new or updated package * [authorize](#authorize-action): create a pre-authorized url for download * [repository](#repository-action): Modify pre-defined pipper repositories    ## AWS CredentialsPipper uses AWS credentials for authentication. To maximize flexibility, the AWS credentials can be specified in a myriad of ways. Pipper will try toidentify credentials in the following order:__1. Explicit Credentials:__ You can specify the AWS credentials directly onthe command line with the `--credentials` flag:* `-c --credentials &lt;AWS_ACCESS_KEY_ID&gt; &lt;AWS_SECRET&gt; &lt;AWS_SESSION_TOKEN&gt;`This can be useful for situations where profiles are not initialized or undesirable. If your credentials do not require a session token, which isusually the case, that argument can be omitted. It's also possible to specifya missing token using a `0` value for the `&lt;AWS_SESSION_TOKEN&gt;` argument forsimplicity in cases where omitting the value is more difficult than includingit with an explicit ignore value.__2. Pipper Configuration:__ Using pipper's _repository_ command action, you can storecredentials and remote information in a pipper config file. If you do create a pipperrepository configuration, which stores AWS credentials, you can referencethat repository configuration by name to provide credentials to the various commands with the `--repository` command flag:* `-r --repository &lt;PIPPER_REPOSITORY_NAME&gt;`For more information on how to specify repository configurations for use withthis flag, see the [repository](#repository-action). This is the recommendedway to specify credentials for persistent environments like your local computer.__3. AWS Profiles:__ Standard AWS profile-based credentials can be used as well. Use the `--profile` flag to specify the name of the profile you wishto use:* `-p --profile &lt;AWS_PROFILE_NAME&gt;` __4. Pipper Environmental Variables:__ If none of the previous forms of credentials are provided, pipper will try to use pipper-specific environmental variables:`PIPPER_AWS_ACCESS_KEY_ID`     `PIPPER_AWS_SECRET_ACCESS_KEY`  `PIPPER_AWS_SESSION_TOKEN`__5. AWS Environmental Variables:__ If none of the previous forms of credentialsare provided, pipper will attempt to use the standard AWS environmental variables:`AWS_ACCESS_KEY_ID` `AWS_SECRET_ACCESS_KEY``AWS_SESSION_TOKEN`If neither set of environmental variables exist, pipperwill fallback to using the _default_ profile credentials if they exist.__6. Default Pipper Repository Configuration:__ If none of the other credentials are specified, pipper will try to use the default repositoryconfiguration if one exists.__7. System-level credentials:__ In the end, pipper will try to use the default system-level credentials, which is useful in situations like EC2instances where the credentials are baked into the instance. However, onremote systems the lack of specified credentials will likely result in authorization exceptions.## Install ActionThe pipper command can be used to install packages directly from the commandlin in much the same way you install packages with pip. The command isfollowed by one or more packages to install. Specific package versions can bedownloaded by appending the version to package names with a colon separator.    $ pipper install &lt;PACKAGE_NAME[:VERSION]&gt; &lt;PACKAGE_NAME[:VERSION]&gt;There are a number of flags available to modify how the install commandfunctions:* `-b --bucket &lt;BUCKET_NAME&gt;`    Name of the S3 bucket where the remote pipper files are stored.* `-i --input &lt;INPUT_FILE&gt;`    Allows you to load one or more packages from a pipper-formatted    JSON file. Use this in place of specifying the packages directly    in the command when convenient.    * `-u --upgrade`    When specified currently installed packages will be updated to the latest    version. If this flag is not specified the installation process will    ignore already installed packages, even if a newer version is available.When installing pipper packages, pipper dependencies are handled recursively aslong as the dependency packages have a properly configured pipper.json filelocated at the top-level of the repository.### Installation Examples    $ pipper install foo --bucket my_bucket --profile my_profileInstalls the `foo` package using the default AWS credentials associated withthe _my_profile_ AWS profile from the _my_bucket_ S3 bucket.## Download ActionThe download action can be used to download pipper packages for later use. Thiscan be helpful if you want to make packages available while offline or whenAWS credentials are unavailable.    $ pipper download &lt;PACKAGE_NAME[:VERSION]&gt;* `-b --bucket &lt;BUCKET_NAME&gt;`    Name of the S3 bucket where the remote pipper files are stored.* `-d --directory &lt;DIRECTORY_NAME&gt;`    The directory where the pipper bundle file for the package should be    saved to when downloaded.* `-i --input &lt;INPUT_FILE&gt;`    Allows you to download one or more packages from a pipper-formatted    JSON file. Use this in place of specifying the packages directly    in the command when convenient.* `-e --extract`    When specified, the downloaded pipper files will be immediately extracted    into their consituent wheel and metadata files. Useful if you want to     install directly with pip using advanced options such as installing to    a specific directly.## Repository ActionThe repository action allows you to create and managed named repositories, which can be used to simplify the management of credentials within the command line. The repository command action has a number of sub-actions:### Repository: add    $ pipper repository add &lt;REPOSITORY_NAME&gt;Adds a new repository configuration with the specified name. Use the `-p --profile` or `-c --credentials` flag to specify the AWS credentials tobe used by this repository. The _add_ sub-action has other flags:* `-b --bucket &lt;BUCKET_NAME&gt;`    Name of the S3 bucket where the remote pipper files are stored for this    configuration. If the bucket is set in the repository configuration, it    will automatically be used by pipper.* `-d --default`    If this flag is set, this repository configuration will be the default one    used when no credentials or other information is specified.### Repository: modify    $ pipper repostory modify &lt;EXISTING_REPOSITORY_NAME&gt;Modifies an existing repository configuration with new values. This sub-actionhas the same flags as the _add_ sub-action. Any flags that you set will beused to replace existing values. Any omitted flags will retain their existingvalues.### Repository: remove    $ pipper repository remove &lt;EXISTING_REPOSITORY_NAME&gt;    Removes an existing repository configuration from the configuration storage.### Repository: list    $ pipper repository listUse this command to list the currently stored repository configurations. Italso lets you know which of the configurations is set to the default value.### Repository: exists    $ pipper repository existsDisplays information on whether or not a repository configuration currently exists.## Authorize ActionThere are times when having AWS credentials available isn't practical. To getaround those you can create pre-authorized URLs for downloading and installingpackages that can be used where credentials are not available.    $ pipper authorize &lt;PACKAGE_NAME[:VERSION]&gt; ...    * `-b --bucket &lt;BUCKET_NAME&gt;`    Name of the S3 bucket where the remote pipper files are stored.* `-i --input &lt;INPUT_FILE&gt;`    Allows you to load one or more packages from a pipper-formatted    JSON file. Use this in place of specifying the packages directly    in the command when convenient.* `-o --ouput &lt;OUTPUT_FILE&gt;`    If specified, a pre-authorized pipper config file will be written that    can be used later by download and installation commands.* `-e --expires &lt;EXPIRES_IN&gt;`    How long the authorized URL is valid before it expires. The format    should be `&lt;NUMBER&gt;&lt;UNIT&gt;`, where the number is a positive integer and    the unit can be hours, minutes or seconds. Units can be abbreviated, e.g.:        * _12mins_: 12 minutes    * _130m_: 130 minutes    * _18s_: 18 seconds    * _3hr_: 3 hours## Info ActionPrints information on the locally installed and remote versions of the specified package. Also, informs you if there is a newer version of the packageavailable for upgrade.    $ pipper info &lt;PACKAGE_NAME&gt;* `-l --local`    Only display local package information, which can be useful if you're    just looking for what is installed locally and don't want to provide    AWS credential information as well.* `-b --bucket &lt;BUCKET_NAME&gt;`    Name of the S3 bucket where the remote pipper files are stored. This    flag is needed unless the local flag is used, which does not communicate    with the remote S3 files.## Bundle ActionCreates a pipper package distribution file that can be installed directly orpublished to a remote S3 bucket for distribution.    $ pipper bundle &lt;PACKAGE_DIRECTORY&gt;    * `-o --output &lt;OUTPUT_DIRECTORY&gt;`    The directory where the pipper bundle should be saved. Defaults to the     current working directory.        ## Publish ActionDeploys a pipper bundle file to a remote S3 bucket for distribution.    $ pipper publish &lt;PIPPER_FILENAME&gt;    If you specify a directory instead of a filename, pipper will search for apipper file in that directory and upload it. If multiple pipper files arefound, the most recently created one will be uploaded.        $ pipper publish &lt;DIRECTORY_CONTAINING_PIPPER_FILE&gt;* `-b --bucket &lt;BUCKET_NAME&gt;`        Name of the S3 bucket where the package will be published.* `-f --force`        Unless this flag is specified, publishing a package will be skipped if an    identical version of the package has already been published.## Version LockingPipper supports version matching/locking in a similar fashion to pip. However,the syntax is a little bit stricter. Values must conform to semanticversions. Consider a library `foo`. A specific version can be installed usingany of the following statements:- `foo` no version will install latest- `foo:1.2.3` that specific version- `foo:=1.2.3` that specific version- `foo:==1.2.3` that specific version- `foo:1.2.*` the latest revision of `1.2.x`- `foo:1.*.*` the latest minor version and revision of `1.x.x`- `foo:&lt;1.2.3` any version below the specified one- `foo:&lt;=1.2.3` any version equal to or below the specified one- `foo:&gt;1.2.3` any version above the specified one- `foo:&gt;=1.2.3` any version equal to or above the specified one</longdescription>
</pkgmetadata>