<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bqplot[![Travis](https://travis-ci.com/bqplot/bqplot.svg?branch=master)](https://travis-ci.com/bqplot/bqplot)[![Documentation](https://readthedocs.org/projects/bqplot/badge/?version=latest)](http://bqplot.readthedocs.org)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/bqplot/bqplot/stable?filepath=examples/Index.ipynb)[![Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jupyter-widgets/Lobby)2-D plotting library for Project Jupyter## Introduction`bqplot` is a 2-D visualization system for Jupyter, based on the constructs ofthe *Grammar of Graphics*.## Usage[![Wealth of Nations](./wealth-of-nations.gif)](https://github.com/bqplot/bqplot/blob/master/examples/Applications/Wealth%20Of%20Nations/Bubble%20Chart.ipynb)In bqplot, every component of a plot is an interactive widget. This allows theuser to integrate visualizations with other Jupyter interactive widgets tocreate integrated GUIs with a few lines of Python code.## Goals-   Provide a unified framework for 2-D visualizations with a pythonic API-   Provide a sensible API for adding user interactions (panning, zooming, selection, etc)Two APIs are provided- `Object Model`, which  is inspired by the constructs of the Grammar of Graphics (figure, marks, axes,  scales). This API is verbose but is fully customizable- `pyplot`, which is a context-based API similar to Matplotlib's pyplot. `pyplot` provides sensible default choices for most parameters## Trying it onlineTo try out bqplot interactively in your web browser, just click on the binderlink:[![Binder](docs/source/binder-logo.svg)](https://mybinder.org/v2/gh/bqplot/bqplot/stable?filepath=examples/Index.ipynb)### DependenciesThis package depends on the following packages:- `ipywidgets` (version &gt;=7.0.0, &lt;8.0)- `traitlets` (version &gt;=4.3.0, &lt;5.0)- `traittypes` (Version &gt;=0.2.1, &lt;0.3)- `numpy`- `pandas`### InstallationUsing pip:```$ pip install bqplot```Using conda```$ conda install -c conda-forge bqplot```If you are using JupyterLab &lt;=2:```$ jupyter labextension install @jupyter-widgets/jupyterlab-manager bqplot```##### Development installationFor a development installation (requires JupyterLab (version &gt;= 3) and yarn):```$ git clone https://github.com/bqplot/bqplot.git$ cd bqplot$ pip install -e .$ jupyter nbextension install --py --overwrite --symlink --sys-prefix bqplot$ jupyter nbextension enable --py --sys-prefix bqplot```Note for developers: the `--symlink` argument on Linux or OS X allows one tomodify the JavaScript code in-place. This feature is not availablewith Windows.For the experimental JupyterLab extension, install the Python package, make sure the Jupyter widgets extension is installed, and install the bqplot extension:```$ pip install &quot;ipywidgets&gt;=7.6&quot;$ jupyter labextension develop . --overwrite```Whenever you make a change of the JavaScript code, you will need to rebuild:```cd jsyarn run build```Then refreshing the JupyterLab/Jupyter Notebook is enough to reload the changes.##### Running testsYou can install the dependencies necessary to run the tests with:```bash    conda env update -f test-environment.yml```And run it with for Python tests:```bash    pytest```And `cd js` to run the JS tests with:```bashyarn run test```Every time you make a change on your tests it's necessary to rebuild the JS side:```bashyarn run build```## Examples### Using the `pyplot` API[![Pyplot Screenshot](/pyplot.png)](https://github.com/bqplot/bqplot/blob/master/examples/Basic%20Plotting/Pyplot.ipynb)### Using the `Object Model` API[![Bqplot Screenshot](/bqplot.png)](https://github.com/bqplot/bqplot/blob/master/examples/Advanced%20Plotting/Advanced%20Plotting.ipynb)## DocumentationFull documentation is available at https://bqplot.readthedocs.io/## Install a previous bqplot version (Only for JupyterLab &lt;= 2)In order to install a previous bqplot version, you need to know which front-end version (JavaScript) matches with the back-end version (Python).For example, in order to install bqplot `0.11.9`, you need the labextension version `0.4.9`.```$ pip install bqplot==0.11.9$ jupyter labextension install bqplot@0.4.9```Versions lookup table:| `back-end (Python)` | `front-end (JavaScript)` ||---------------------|--------------------------|| 0.12.14             | 0.5.14                   || 0.12.13             | 0.5.13                   || 0.12.12             | 0.5.12                   || 0.12.11             | 0.5.11                   || 0.12.10             | 0.5.10                   || 0.12.9              | 0.5.9                    || 0.12.8              | 0.5.8                    || 0.12.7              | 0.5.7                    || 0.12.6              | 0.5.6                    || 0.12.4              | 0.5.4                    || 0.12.3              | 0.5.3                    || 0.12.2              | 0.5.2                    || 0.12.1              | 0.5.1                    || 0.12.0              | 0.5.0                    || 0.11.9              | 0.4.9                    || 0.11.8              | 0.4.8                    || 0.11.7              | 0.4.7                    || 0.11.6              | 0.4.6                    || 0.11.5              | 0.4.5                    || 0.11.4              | 0.4.5                    || 0.11.3              | 0.4.4                    || 0.11.2              | 0.4.3                    || 0.11.1              | 0.4.1                    || 0.11.0              | 0.4.0                    |## DevelopmentSee our [contributing guidelines](CONTRIBUTING.md) to know how to contribute and set up a development environment.## LicenseThis software is licensed under the Apache 2.0 license. See the [LICENSE](LICENSE) filefor details.</longdescription>
</pkgmetadata>