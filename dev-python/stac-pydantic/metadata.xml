<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># stac-pydantic ![tests](https://github.com/arturo-ai/stac-pydantic/workflows/cicd/badge.svg)[Pydantic](https://pydantic-docs.helpmanual.io/) models for [STAC](https://github.com/radiantearth/stac-spec) Catalogs, Collections, Items, and the [STAC API](https://github.com/radiantearth/stac-api-spec) spec.  Initially developed by [arturo-ai](https://github.com/arturo-ai).## Installation```pip install stac-pydantic```For local development:```pip install -e .[&quot;dev&quot;]```| stac-pydantic | stac     ||-------------------|--------------|| 1.1.x             | 0.9.0        || 1.2.x             | 1.0.0-beta.1 || 1.3.x             | 1.0.0-beta.2 || 2.0.x             | 1.0.0        |## TestingRun the entire test suite:```tox```Run a single test case using the standard pytest convention:```pytest -v tests/test_models.py::test_item_extensions```## Usage### Loading ModelsLoad data into models with standard pydantic:```pythonfrom stac_pydantic import Catalogstac_catalog = {  &quot;stac_version&quot;: &quot;0.9.0&quot;,  &quot;id&quot;: &quot;sample&quot;,  &quot;description&quot;: &quot;This is a very basic sample catalog.&quot;,  &quot;links&quot;: [    {      &quot;href&quot;: &quot;item.json&quot;,      &quot;rel&quot;: &quot;item&quot;    }  ]}catalog = Catalog(**stac_catalog)assert catalog.id == &quot;sample&quot;assert catalog.links[0].href == &quot;item.json&quot;```### ExtensionsSTAC defines many extensions which let the user customize the data in their catalog. `stac-pydantic.extensions.validate_extensions` will validate a `dict`, `Item`, `Collection` or `Catalog` against the schema urls provided in the `stac_extensions` property: ```pythonfrom stac_pydantic import Itemfrom stac_pydantic.extensions import validate_extensionsstac_item = {    &quot;id&quot;: &quot;12345&quot;,    &quot;type&quot;: &quot;Feature&quot;,    &quot;stac_extensions&quot;: [        &quot;https://stac-extensions.github.io/eo/v1.0.0/schema.json&quot;     ],    &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [0, 0] },    &quot;properties&quot;: {        &quot;datetime&quot;: &quot;2020-03-09T14:53:23.262208+00:00&quot;,        &quot;eo:cloud_cover&quot;: 25,    },    &quot;links&quot;: [],    &quot;assets&quot;: [],}model = Item(**stac_item) validate_extensions(model, reraise_exception=True)assert getattr(model.properties, &quot;eo:cloud_cover&quot;) == 25 ```The complete list of current STAC Extensions can be found [here](https://stac-extensions.github.io/).#### Vendor ExtensionsThe same procedure described above works for any STAC Extension schema as long as it can be loaded from a public url.### Exporting ModelsMost STAC extensions are namespaced with a colon (ex `eo:gsd`) to keep them distinct from other extensions.  BecausePython doesn't support the use of colons in variable names, we use [Pydantic aliasing](https://pydantic-docs.helpmanual.io/usage/model_config/#alias-generator)to add the namespace upon model export.  This requires [exporting](https://pydantic-docs.helpmanual.io/usage/exporting_models/)the model with the `by_alias = True` parameter.  A convenience method (``to_dict()``) is provided to export models withextension namespaces:```pythonitem_dict = item.to_dict()assert item_dict['properties']['landsat:row'] == item.properties.row == 250```### CLI```Usage: stac-pydantic [OPTIONS] COMMAND [ARGS]...  stac-pydantic cli groupOptions:  --help  Show this message and exit.Commands:  validate-item  Validate STAC Item```</longdescription>
</pkgmetadata>