<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. image:: https://www.repostatus.org/badges/latest/active.svg    :target: https://www.repostatus.org/#active    :alt: Project Status: Active — The project has reached a stable, usable          state and is being actively developed... image:: https://github.com/jwodder/versioningit/actions/workflows/test.yml/badge.svg    :target: https://github.com/jwodder/versioningit/actions/workflows/test.yml    :alt: CI Status.. image:: https://codecov.io/gh/jwodder/versioningit/branch/master/graph/badge.svg    :target: https://codecov.io/gh/jwodder/versioningit.. image:: https://img.shields.io/pypi/pyversions/versioningit.svg    :target: https://pypi.org/project/versioningit/.. image:: https://img.shields.io/conda/vn/conda-forge/versioningit.svg    :target: https://anaconda.org/conda-forge/versioningit    :alt: Conda Version.. image:: https://img.shields.io/github/license/jwodder/versioningit.svg    :target: https://opensource.org/licenses/MIT    :alt: MIT License`GitHub &lt;https://github.com/jwodder/versioningit&gt;`_| `PyPI &lt;https://pypi.org/project/versioningit/&gt;`_| `Documentation &lt;https://versioningit.readthedocs.io&gt;`_| `Issues &lt;https://github.com/jwodder/versioningit/issues&gt;`_| `Changelog &lt;https://github.com/jwodder/versioningit/blob/master/CHANGELOG.md&gt;`_``versioningit`` — *Versioning It with your Version In Git*``versioningit`` is yet another Python packaging plugin for automaticallydetermining your package's version based on your version control repository'stags.  Unlike others, it allows easy customization of the version format andeven lets you easily override the separate functions used for versionextraction &amp; calculation.**Features:**- Works with both setuptools and Hatch_  .. _hatch: https://hatch.pypa.io- Installed &amp; configured through :pep:`518`'s ``pyproject.toml``- Supports Git, modern Git archives, and Mercurial- Formatting of the final version uses format template strings, with fields for  basic VCS information and separate template strings for distanced vs. dirty  vs. distanced-and-dirty repository states- Can optionally write the final version and other details to a file for  loading at runtime- Provides custom setuptools commands for inserting the final version and other  details into a source file at build time- The individual methods for VCS querying, tag-to-version calculation, version  bumping, version formatting, and writing the version to a file can all be  customized using either functions defined alongside one's project code or via  publicly-distributed entry points- Can alternatively be used as a library for use in ``setup.py`` or the like,  in case you don't want to or can't configure it via ``pyproject.toml``- The only thing it does is calculate your version and optionally write it to a  file; there's no overriding of your sdist contents based on what's in your  Git repository, especially not without a way to turn it off, because that  would just be rude.Installation &amp; Setup====================``versioningit`` requires Python 3.7 or higher.  Just use `pip&lt;https://pip.pypa.io&gt;`_ for Python 3 (You have pip, right?) to install``versioningit`` and its dependencies::    python3 -m pip install versioningitHowever, usually you won't need to install ``versioningit`` in your environmentdirectly.  Instead, you specify it in your project's ``pyproject.toml`` file inthe ``build-system.requires`` key, like so:.. code:: toml    # If using Setuptools:    [build-system]    requires = [        &quot;setuptools&quot;,        &quot;versioningit&quot;,    ]    build-backend = &quot;setuptools.build_meta&quot;    # If using Hatch:    [build-system]    requires = [        &quot;hatchling&quot;,        &quot;versioningit&quot;,    ]    build-backend = &quot;hatchling.build&quot;    # This setting is also required if you're using Hatch:    [tool.hatch.version]    source = &quot;versioningit&quot;Then, you configure ``versioningit`` by adding a ``[tool.versioningit]`` tableto your ``pyproject.toml``.  See `the documentation`__ for details, but youcan get up &amp; running with just the minimal configuration, an empty table:__ https://versioningit.readthedocs.io/en/stable/configuration.html.. code:: toml    [tool.versioningit]``versioningit`` eliminates the need to list an explicit version in``setup.py``, ``setup.cfg``, or ``pyproject.toml`` (and any explicit versionyou do list will be ignored when using ``versioningit``), so you should removeany such settings in order to reduce confusion.**Note:** If you're specifying your project metadata via a ``[project]`` tablein ``pyproject.toml``, you need to set ``project.dynamic = [&quot;version&quot;]`` inorder for ``versioningit`` to work.Once you have a ``[tool.versioningit]`` table in your ``pyproject.toml`` — andonce your repository has at least one tag — building your project with build_or similar will result in your project's version automatically being set basedon the latest tag in your Git repository.  You can test your configuration andsee what the resulting version will be using the ``versioningit`` command (`seethe documentation`__)... _build: https://github.com/pypa/build__ https://versioningit.readthedocs.io/en/stable/command.htmlExample Configurations======================One of ``versioningit``'s biggest strengths is its ability to configure theversion format using placeholder strings.  The default format configurationlooks like this:.. code:: toml    [tool.versioningit.format]    # Format used when there have been commits since the most recent tag:    distance = &quot;{base_version}.post{distance}+{vcs}{rev}&quot;    # Example formatted version: 1.2.3.post42+ge174a1f    # Format used when there are uncommitted changes:    dirty = &quot;{base_version}+d{build_date:%Y%m%d}&quot;    # Example formatted version: 1.2.3+d20230922    # Format used when there are both commits and uncommitted changes:    distance-dirty = &quot;{base_version}.post{distance}+{vcs}{rev}.d{build_date:%Y%m%d}&quot;    # Example formatted version: 1.2.3.post42+ge174a1f.d20230922Other format configurations of interest include:- The default format used by setuptools_scm_:  .. code:: toml      [tool.versioningit.next-version]      method = &quot;smallest&quot;      [tool.versioningit.format]      distance = &quot;{next_version}.dev{distance}+{vcs}{rev}&quot;      # Example formatted version: 1.2.4.dev42+ge174a1f      dirty = &quot;{base_version}+d{build_date:%Y%m%d}&quot;      # Example formatted version: 1.2.3+d20230922      distance-dirty = &quot;{next_version}.dev{distance}+{vcs}{rev}.d{build_date:%Y%m%d}&quot;      # Example formatted version: 1.2.4.dev42+ge174a1f.d20230922- The format used by versioneer_:  .. code:: toml      [tool.versioningit.format]      distance = &quot;{base_version}+{distance}.{vcs}{rev}&quot;      # Example formatted version: 1.2.3+42.ge174a1f      dirty = &quot;{base_version}+{distance}.{vcs}{rev}.dirty&quot;      # Example formatted version: 1.2.3+42.ge174a1f.dirty      distance-dirty = &quot;{base_version}+{distance}.{vcs}{rev}.dirty&quot;      # Example formatted version: 1.2.3+42.ge174a1f.dirty- The format used by vcversioner_:  .. code:: toml      [tool.versioningit.format]      distance = &quot;{base_version}.post{distance}&quot;      # Example formatted version: 1.2.3.post42      dirty = &quot;{base_version}&quot;      # Example formatted version: 1.2.3      distance-dirty = &quot;{base_version}.post{distance}&quot;      # Example formatted version: 1.2.3.post42.. _setuptools_scm: https://github.com/pypa/setuptools_scm.. _versioneer: https://github.com/python-versioneer/python-versioneer.. _vcversioner: https://github.com/habnabit/vcversioner</longdescription>
</pkgmetadata>