<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># binpibinpi aims to provide a simple interface for serializing and deserializing binary file formats.## Usage:```pythonimport binpiclass Data:    ...class FileHeader:    prop1 = binpi.Int()    prop2 = binpi.Short()    prop3 = binpi.Byte()    is_compressed = binpi.Boolean()    float_prop = binpi.Float()    some_data = binpi.ByteArray(size=&quot;prop1&quot;)    other_data = binpi.List(Data, size=&quot;prop3&quot;)    sub_struct = binpi.WrapType(Data)    children_count = binpi.Int()    children = binpi.List(binpi.RecursiveType(), size=&quot;children_count&quot;)    # deserializing    header_data = binpi.deserialize(FileHeader, binpi.FileReader(&quot;./some_path&quot;), endianness=binpi.LITTLE_ENDIAN)# modifyheader_data.prop2 = 200# serializing writer = binpi.serialize(header_data, binpi.FileWriter(&quot;./another_path&quot;), endianness=binpi.LITTLE_ENDIAN)```_For more complex examples, check `./examples/`_## How to install:```bash pip install binpi```## Supported Types:- Int, UInt, Short, UShort, Byte, UByte, Float, Double- IntEnumType- List, String, ByteArray- Boolean- RecursiveType (for cases where the structure contains list of substructures of the same type, check the `advanced_structure` example)- WrapType (for subtypes, check the `simple_image_archive_format` example)- All the types above support LE/BE## Comparing with other (de)serializing libraries- `pickle` - should be used for completely different use-cases than `binpi`, which is just simple deserializing of python objects, without having to care about its structure. - `struct` - anything `binpi` does can be implemented using `struct`, but `binpi` provides simpler interface for defining data structure, for the cost of performance.- `origami` - origami might be a better choice for (de)serializing fixed size data, but it doesn't provide (de)serializing of dynamically sized data, out of the box.- `bstruct` - same as `origami`- `construct` - probably the most comparable library to `binpi`, has even more feature, but instead of `binpi`, the data structures and output is represented using dictionaries## Interface### Serializing```pythondef serialize(    value,           # value to be serialized    writer: Writer,  # the output writer    first=None,      # first field to serialize    last=None        # last field to serialize) -&gt; None: ...class Writer(Protocol):    &quot;&quot;&quot; writer can be anything that implements method write_bytes &quot;&quot;&quot;    def write_bytes(self, data: bytes) -&gt; None: ...```binpi contains `FileWriter` and `BufferWriter`### Deserializing```pythondef deserialize(    class_: type,    # type of the target object     reader: Reader,  # the input reader    first=None,      # first field to serialize    last=None        # last field to serialize) -&gt; None: ...class Reader(Protocol):    &quot;&quot;&quot; reader can be anything that implements method read_bytes &quot;&quot;&quot;    def read_bytes(self, n: int) -&gt; bytes: ...```binpi contains `FileReader` and `BufferReader`## Extending with custom typesTo create your own custom (de)serializable type, you have to just create a new child class of `SerializableType` that implements `load_from_bytes` and `write_from_value````pythonimport typing, binpi, structclass CustomDoubledInt(binpi.SerializableType):    def load_from_bytes(self, deserializer: binpi.Deserializer, instance, *args, **kwargs):        return struct.unpack(&quot;&lt;i&quot;, deserializer.reader.read_bytes(4))[0] * 2    def write_from_value(self, serializer: binpi.Serializer, value, parent_instance, *args, **kwargs):        serializer.writer.write_bytes(struct.pack(&quot;&lt;i&quot;, value // 2))&quot;&quot;&quot; In case we want to have functional typechecking &quot;&quot;&quot;CustomDoubleInt: typing.Callable[..., int]```## TODO:- Tests- Performance benchmarks</longdescription>
</pkgmetadata>