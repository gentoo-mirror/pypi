<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># formalmathA formal mathematics package.## Install```pip install formalmath```## setmmA port for [metamath](https://us.metamath.org) and `set.mm`. The language `metamath` is a math proof verifying language. And, `set.mm` is its main database of theorems, based on the classical ZFC axiom system.`MObject` is the basic type Any `MObject` have a label. Some of them have short_code or metamath_code. The label system is unique (if you create a new MObject with the same label with existing one, the program will raise ValueError). So does the short_code and metamath_code. `Constant` is the type of constants, corresponding to $c statements in metamath.`Variable` is the type of variables, corresponding to $v statements in metamath.`Formula` is the base type of formulas, corresponding to wff in metamath and set.mm.`FormulaConstant` are Constant objects that are also Formulas.`FormulaVariable` are Variable objects that are also Formulas.`ClassType` is the base type of classes, corresponding to class in metamath and set.mm.`ClassConstant` are Constant objects that are also `ClassType` objects.`ClassVariable` are Variable objects that are also `ClassType` objects.`Template` are base type of templates. A template can generate new formula or class out of old.`FormulaTemplate` denote templates that generate new formula out of old formulas and other symbols.`ClassTemplate` denote templates that generate new `ClassType` objects out of old `ClassType` objects and other symbols.`SetVariable` denote `setvar` notation in metamath and set.mm.The port of other concepts in metamath and set.mm is a work in process.Example code:```pythonfrom formalmath.setmm import *test1 = MObject(&quot;x1&quot;)test2 = MObject(&quot;y1&quot;)# test3 = MObject(&quot;x1&quot;)print(test1) # output: MObject(&quot;x1&quot;)test3 = MObject.find_MObject_by_label(&quot;y1&quot;)print(test3) # output: MObject(&quot;y1&quot;)lp1 = Constant(&quot;\\left(&quot;)rp1 = Constant(&quot;\\right)&quot;)# lp2 = Constant(&quot;\\left(&quot;)print(lp1) # output: Constant(&quot;\left(&quot;)testConst = Constant.find_MObject_by_label(&quot;\\right)&quot;)print(testConst) # output: Constant(&quot;\right)&quot;)lp = Constant(&quot;(&quot;)rp = Constant(&quot;)&quot;)ra = Constant(&quot;-&gt;&quot;)phi = FormulaVariable(&quot;phi&quot;)psi = FormulaVariable(&quot;psi&quot;)chi = FormulaVariable(&quot;chi&quot;)phi_implies_psi = Formula(&quot;phips&quot;,list_of_symbols=[lp,phi,ra,psi,rp])complex_imply = Formula(&quot;ccimply&quot;,list_of_symbols=[lp,phi_implies_psi,ra,chi,rp])print(complex_imply) # Formula(&quot;( ( phi -&gt; psi ) -&gt; chi )&quot;)wi = FormulaTemplate({&quot;var_types&quot;:{&quot;x&quot;:Formula,&quot;y&quot;:Formula},&quot;template&quot;:[lp,&quot;x&quot;,ra,&quot;y&quot;,rp]})print(wi)# Template:  (  x  -&gt;  y  )# Types:# x : Formula# y : Formulanf = wi.generate({&quot;x&quot;:psi,&quot;y&quot;:chi})print(nf) # Formula(&quot;( psi -&gt; chi )&quot;)nf2 = wi.generate({&quot;x&quot;:phi,&quot;y&quot;:nf})nf3 = wi.generate({&quot;x&quot;:nf,&quot;y&quot;:nf2})print(nf3) # Formula(&quot;( ( psi -&gt; chi ) -&gt; ( phi -&gt; ( psi -&gt; chi ) ) )&quot;)wi2 = wi.generate_template({&quot;x&quot;:&quot;y&quot;,&quot;y&quot;:&quot;z&quot;})wiwi = wi.generate_template({&quot;x&quot;:wi,&quot;y&quot;:wi2})print(wiwi)# Template:  (  (  x  -&gt;  y  )  -&gt;  (  y  -&gt;  z  )  )# Types:# x : Formula# y : Formula# z : Formulawi3 = wiwi.generate_template({&quot;x&quot;:wi2,&quot;y&quot;:wiwi,&quot;z&quot;:&quot;w&quot;})print(wi3)# Template:  (  (  (  y  -&gt;  z  )  -&gt;  (  (  x  -&gt;  y  )  -&gt;  (  y  -&gt;  z  )  )  ) #  -&gt;  (  (  (  x  -&gt;  y  )  -&gt;  (  y  -&gt;  z  )  )  -&gt;  w  )  )# Types:# y : Formula# z : Formula# x : Formula# w : Formulaone = ClassConstant(&quot;1&quot;)two = ClassConstant(&quot;2&quot;)three = ClassConstant(&quot;3&quot;)equal = Constant(&quot;=&quot;)plus = Constant(&quot;+&quot;)temp_plus = ClassTemplate({&quot;var_types&quot;:{&quot;a&quot;:ClassType,&quot;b&quot;:ClassType},&quot;template&quot;:[&quot;a&quot;,plus,&quot;b&quot;]})temp_eq = FormulaTemplate({&quot;var_types&quot;:{&quot;u&quot;:ClassType,&quot;v&quot;:ClassType},&quot;template&quot;:[&quot;u&quot;,equal,&quot;v&quot;]})temp_new = temp_eq.generate_template({&quot;u&quot;:temp_plus,&quot;v&quot;:&quot;c&quot;})print(temp_new)# Template:  a  +  b  =  c# Types:# a : ClassType# b : ClassType# c : ClassTypeeq1p2e3 = temp_new.generate({&quot;a&quot;:one,&quot;b&quot;:two,&quot;c&quot;:three})print(eq1p2e3) # Formula(&quot;1 + 2 = 3&quot;)```</longdescription>
</pkgmetadata>