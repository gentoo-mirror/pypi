<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Build Status](https://travis-ci.com/terrencepreilly/darglint.svg?branch=develop)](https://travis-ci.com/terrencepreilly/darglint)# DarglintA functional docstring linter which checks whether a docstring'sdescription matches the actual function/method implementation.*Darglint* expects docstrings to be formatted using the[Google Python Style Guide](https://google.github.io/styleguide/pyguide.html),or [Sphinx Style Guide](https://pythonhosted.org/an_example_pypi_project/sphinx.html#function-definitions),or [Numpy Style Guide](https://numpydoc.readthedocs.io/en/latest/format.html).Feel free to submit an issue/pull request if you spot a problem orwould like a feature in *darglint*.**Table of Contents**:- [Project Status](#project-status)- [Installation](#installation)- [Configuration](#configuration)- [Usage](#usage)- [Scope](#scope)- [Sphinx](#sphinx)- [Numpy](#numpy)- [Integrations](#integrations)- [Flake8](#flake8)- [Roadmap](#roadmap)- [Contribution](#development-and-contributions)## Project StatusI no longer work with Python regularly, and I'd like to spend some moretime on other projects.  So while I'll continue to maintain darglint,I likely won't be adding significant new features.  That said, I willtry to accept pull requests.  See the contribution section for moreinformation.  Consider it in maintenance mode.## InstallationTo install *darglint*, use pip.```bashpip install darglint```Or, clone the repository, `cd` to the directory, and```bashpip install .```## Configuration*darglint* can be configured using a configuration file.  The configurationfile must be named either *.darglint*, *setup.cfg*, or *tox.ini*.  It mustalso have a section starting with the section header, `[darglint]`.Finally, the configuration file must be located either in the directory*darglint* is called from, or from a parent directory of that workingdirectory.Currently, the configuration file allows us to ignore errors, to specifymessage templates, to specify the strictness of checks and to ignore commonexceptions.### Error ConfigurationIf we would like to ignore `ExcessRaiseError`s (because we know thatan underlying function will raise an exception), then we would add itserror code to a file named *.darglint*:```ini[darglint]ignore=DAR402```We can ignore multiple errors by using a comma-separated list:```ini[darglint]ignore=DAR402,DAR103```Instead of specifying error codes to ignore in general one can also specify aregex to exclude certain function names from tests. For example, the following configuration would disable linting on all private methods.```ini[darglint]ignore_regex=^_(.*)```### Message Template ConfigurationIf we would like to specify a message template, we may do so asfollows:```ini[darglint]message_template={msg_id}@{path}:{line}```Which will produce a message such as `DAR102@driver.py:72`.Finally, we can specify the docstring style type using `docstring_style`(&quot;google&quot; by default):```ini[darglint]docstring_style=sphinx```### Strictness ConfigurationStrictness determines how lax darglint will be when checking docstrings.There are three levels of strictness available:- short: One-line descriptions are acceptable; anythingmore and the docstring will be fully checked.- long: One-line descriptions and descriptions withoutarguments/returns/yields/etc. sections will be allowed.  Anything more,and the docstring will be fully checked.- full: (Default) Docstrings will be fully checked.For example, if we have the following function:```pythondef double(x):    # &lt;docstring&gt;    return x * 2```Then the following table describes which errors will be raised foreach of the docstrings (rows) when checked against each of theconfigurations (columns):```┌──────────────────────────────┬──────────────────┬────────────────┬──────────────────┐│ Docstring                    │  short           │  long          │  full            │├──────────────────────────────┼──────────────────┼────────────────┼──────────────────┤│ &quot;&quot;&quot;Doubles the argument.&quot;&quot;&quot;  │ None             │ None           │ Missing argument ││                              │                  │                │ Missing return   ││                              │                  │                │                  ││                              │                  │                │                  │├──────────────────────────────┼──────────────────┼────────────────┼──────────────────┤│ &quot;&quot;&quot;Doubles the argument.     │ Missing argument │ None           │ Missing argument ││                              │ Missing return   │                │ Missing return   ││ Not very pythonic.           │                  │                │                  ││                              │                  │                │                  ││ &quot;&quot;&quot;                          │                  │                │                  ││                              │                  │                │                  │├──────────────────────────────┼──────────────────┼────────────────┼──────────────────┤│ &quot;&quot;&quot;Doubles the argument.     │ Missing return   │ Missing return │ Missing return   ││                              │                  │                │                  ││ Args:                        │                  │                │                  ││     x: The number to double. │                  │                │                  ││                              │                  │                │                  ││ &quot;&quot;&quot;                          │                  │                │                  │└──────────────────────────────┴──────────────────┴────────────────┴──────────────────┘```In short, if you want to be able to have single-line docstrings, and checkall other docstrings against their described parameters, you would specify```ini[darglint]strictness=short```In your configuration file.### Ignoring common exceptionsWe can specify a list of exceptions that don't need to be documented in theraises section of a docstring. For example,```ini[darglint]ignore_raise=ValueError,MyCustomError```### LoggingWhen *darglint* fails unexpectedly, you can try to gather moreinformation when submitting a bug by running with logging.For example,```bashdarglint --log-level=INFO unexpected_failures.py```*Darglint* accepts the levels, `DEBUG`, `INFO`, `WARNING`, `ERROR`, and`CRITICAL`.## Usage### Command Line useGiven a python source file, `serializers.py`, you would check the docstringsas follows:```bashdarglint serializers.py```You can give an optional verbosity setting to *darglint*.  For example,```bashdarglint -v 2 *.py```Would give a description of the error along with information as to thisspecific instance.  The default verbosity is 1, which gives the filename,function name, line number, error code, and some general hints.To use an arbitrary error format, you can pass a message template, whichis a python format string.  For example, if we pass the messagetemplate```bashdarglint -m &quot;{path}:{line} -&gt; {msg_id}&quot; darglint/driver.py```Then we would get back error messages like```bashdarglint/driver.py :61 -&gt; DAR101```The following attributes can be passed to the format string:- *line*: The line number,- *msg*: The error message,- *msg_id*: The error code,- *obj*: The function/method name,- *path*: The relative file path.The message template can also be specified in the configuration fileas the value `message_template`.*darglint* is particularly useful when combined with the utility, `find`.This allows us to check all of the files in our project at once.  For example,when eating my own dogfood (as I tend to do), I invoke *darglint* as follows:```bashfind . -name &quot;*.py&quot; | xargs darglint```Where I'm searching all files ending in &quot;.py&quot; recursively from thecurrent directory, and calling *darglint* on each one in turn.### Ignoring Errors in a DocstringYou can ignore specific errors in a particular docstring.  The syntaxis much like that of *pycodestyle*, etc.  It generally takes the fromof:```python# noqa: &lt;error&gt; &lt;argument&gt;```Where `&lt;error&gt;` is the particular error to ignore (`DAR402`, or `DAR201`for example), and `&lt;argument&gt;` is what (if anything) the ignorestatement refers to (if nothing, then it is not specified).Let us say that we want to ignore a missing return statementin the following docstring:```pythondef we_dont_want_a_returns_section():  &quot;&quot;&quot;Return the value, 3.  # noqa: DAR201  &quot;&quot;&quot;  return 3```We put the `noqa` anywhere in the top level of the docstring.However, this won't work if we are missing something more specific,like a parameter.  We may not want to ignore all missing parameters,either, just one particular one.  For example, we may be writing afunction that takes a class instance as self. (Say, in a bound *celery*task.) Then we would do something like:```pythondef a_bound_function(self, arg1):  &quot;&quot;&quot;Do something interesting.  Args:    arg1: The first argument.  # noqa: DAR101 arg1  &quot;&quot;&quot;  arg1.execute(self)```So, the argument comes to the right of the error.We may also want to mark excess documentation as being okay.  For example,we may not want to explicitly catch and raise a `ZeroDivisionError`.  Wecould do the following:```pythondef always_raises_exception(x):    &quot;&quot;&quot;Raise a zero division error or type error.o    Args:      x: The argument which could be a number or could not be.    Raises:      ZeroDivisionError: If x is a number.  # noqa: DAR402      TypeError: If x is not a number.  # noqa: DAR402    &quot;&quot;&quot;    x / 0```So, in this case, the argument for `noqa` is really all the way tothe left.  (Or whatever description we are parsing.)  We could alsohave put it on its own line, as `# noqa: DAR402 ZeroDivisionError`.### Type AnnotationsDarglint parses type annotations in docstrings, and can, optionally,compare the documented type to the actual type annotation.  This canbe useful when migrating a codebase to use type annotations.In order to make these comparisons, Darglint only accepts typesaccepted by Python (see [PEP 484](https://www.python.org/dev/peps/pep-0484/).)That is, it does not accept parentheses in type signatures. (Ifparentheses are used in the type signature, Darglint will mark thatargument as missing.  See Issue #90.)### Error Codes- *DAR001*: The docstring was not parsed correctly due to a syntax error.- *DAR002*: An argument/exception lacks a description- *DAR003*: A line is under-indented or over-indented.- *DAR004*: The docstring contains an extra newline where it shouldn't.- *DAR005*: The item contains a type section (parentheses), but no type.- *DAR101*: The docstring is missing a parameter in the definition.- *DAR102*: The docstring contains a parameter not in function.- *DAR103*: The docstring parameter type doesn't match function.- *DAR104*: (disabled) The docstring parameter has no type specified - *DAR105*: The docstring parameter type is malformed.- *DAR201*: The docstring is missing a return from definition.- *DAR202*: The docstring has a return not in definition.- *DAR203*: The docstring parameter type doesn't match function.- *DAR301*: The docstring is missing a yield present in definition.- *DAR302*: The docstring has a yield not in definition.- *DAR401*: The docstring is missing an exception raised.- *DAR402*: The docstring describes an exception not explicitly raised.- *DAR501*: The docstring describes a variable which is not defined.The number in the hundreds narrows the error by location in the docstring:- 000: Syntax, formatting, and style- 100: Args section- 200: Returns section- 300: Yields section- 400: Raises section- 500: Variables sectionYou can enable disabled-by-default exceptions in the configuration fileusing the `enable` option.  It accepts a comma-separated list of errorcodes.```ini[darglint]enable=DAR104```## ScopeDarglint's primary focus is to identify incorrect and missing documentationdof a function's signature. Checking style is a stretch goal, and is supportedon a best-effort basis.  Darglint does not check stylistic preferences expressedby tools in the Python Code Quality Authority (through tools such as `pydocstyle`).So when using Darglint, it may be a good idea to also use `pydocstyle`, if youwant to enforce style.  (For example, `pydocstyle` requires the short summaryto be separated from other sections by a line break.  Darglint makes no such check.)## SphinxDarglint can handle sphinx-style docstrings, but imposes some restrictionson top of the Sphinx style. For example, all fields (such as `:returns:`)must be the last items in the docstring.  They must be together, and allindents should be four spaces.  These restrictions may be loosened at alater date.To analyze Sphinx-style docstrings, pass the style flag to the command:```bashdarglint -s sphinx example.pydarglint --docstring-style sphinx example.py```Alternatively, you can specify the style in the configuration file usingthe setting, &quot;docstring\_style&quot;:```ini[darglint]docstring_style=sphinx```## NumpyDarglint now has an initial implementation for Numpy-style docstrings.Similarly to Sphinx-style docstrings, you can pass a style flag to thecommand:```bashdarglint -s numpy example.pydarglint --docstring-style numpy example.py```Or set it in a configuration file:```ini[darglint]docstring_style=numpy```The numpy parser and error reporter are not yet fully stabilized.Add issues or suggestions to the tracking bug, Issue #69.## Integrations### Flake8Darglint can be used in conjunction with Flake8 as a plugin.  The onlysetup necessary is to install Flake8 and Darglint in the same environment.Darglint will pull its configuration from Flake8. So, if you would like tolint Sphinx-style comments, then you should have `docstring_style=sphinx` in aFlake8 configuration file in the project directory.  The settings wouldbe entered under the flake8 configuration, not a separate configurationfor Darglint.  E.g.:```ini[flake8]strictness=shortdocstring_style=sphinx```To see which options are exposed through Flake8, you can check the Flake8tool:```bashflake8 --help | grep --before-context=2 Darglint```### SublimeLinterA plugin for SublimeLinter can be found [here](https://github.com/raddessi/SublimeLinter-contrib-darglint)### Pre-commitDownload [pre-commit](https://pre-commit.com/) and[install](https://pre-commit.com/#install) it. Once it is installed, add thisto `.pre-commit-config.yaml` in your repository:```yamlrepos:-   repo: https://github.com/terrencepreilly/darglint    rev: master    hooks:    - id: darglint```Then run `pre-commit install` and you're ready to go. Before commiting,`darglint` will be run on the staged files. If it finds any errors, the useris notified and the commit is aborted. Store necessary configuration (such aserror formatting) in `.darglint`, `setup.cfg` or `tox.ini`.## RoadmapBelow are some of the current features or efforts.  Where a milestone orissue is associated with the idea, it will be mentioned.  Some of theseideas are moonshots and may not get implemented.  They are orderedroughly according to current priority/feasibility.- [ ] Expose command-line options through sphinx.- [ ] Robust logging for errors caused/encountered by *darglint*.- [ ] Check class docstrings (See Issue #25).- [ ] Autoformatting docstrings.  (See Milestone #3).- [ ] Optional aggressive style checking through command line flag.- [ ] ALE support.- [ ] Syntastic support. (Syntastic is not accepting new checkers untiltheir next API stabilizes, so this may take some time.)## Development and Contributions### Development SetupInstall `darglint`. First, clone the repository:```bashgit clone https://github.com/terrencepreilly/darglint.git````cd` into the directory, create a virtual environment (optional), then setup:```bashcd darglint/virtualenv -p python3.6 .envsource .env/bin/activatepip install -e .```You can install dependencies using```bashpip install poetrypoetry install```You can run the tests using```bashpython setup.py test```Or, install `pytest` manually, `cd` to the project's root directory,and run```bashpytest```This project tries to conform by the styles imposed by `pycodestyle`and `pydocstyle`, as well as by `darglint` itself.A dockerfile exists for testing with Python3.4.  Although it's notofficially supported (only 3.6+), it's nice to try to make minorversion numbers support it.  You would build the dockerfile andtest using something like```bashpushd docker-builddocker build -t darglint-34 -f Dockerfile.test34 .popddocker run -it --rm -v $(pwd):/code darglint-34 pytest```### ContributionIf you would like to tackle an issue or feature, email me or comment on theissue to make sure it isn't already being worked on.  Contributions willbe accepted through pull requests.  New features should include unit tests,and, of course, properly formatted documentation.Also, check out the wiki prior to updating the grammar.  It includes adescription of darglint's parsing pipline.</longdescription>
</pkgmetadata>