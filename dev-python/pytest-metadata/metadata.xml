<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pytest-metadata===============pytest-metadata is a plugin for `pytest &lt;http://pytest.org&gt;`_ that providesaccess to test session metadata... image:: https://img.shields.io/badge/license-MPL%202.0-blue.svg   :target: https://github.com/pytest-dev/pytest-metadata/blob/master/LICENSE   :alt: License.. image:: https://img.shields.io/pypi/v/pytest-metadata.svg   :target: https://pypi.python.org/pypi/pytest-metadata/   :alt: PyPI.. image:: https://img.shields.io/travis/pytest-dev/pytest-metadata.svg   :target: https://travis-ci.org/pytest-dev/pytest-metadata/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/ambv/black   :alt: Travis.. image:: https://img.shields.io/github/issues-raw/pytest-dev/pytest-metadata.svg   :target: https://github.com/pytest-dev/pytest-metadata/issues   :alt: Issues.. image:: https://img.shields.io/requires/github/pytest-dev/pytest-metadata.svg   :target: https://requires.io/github/pytest-dev/pytest-metadata/requirements/?branch=master   :alt: RequirementsRequirements------------You will need the following in order to use pytest-metadata:- Python 3.7+ or PyPy3Installation------------To install pytest-metadata:.. code-block:: bash  $ pip install pytest-metadataContributing------------We welcome contributions.To learn more, see `Development &lt;https://github.com/pytest-dev/pytest-metadata/blob/master/development.rst&gt;`_Available metadata------------------The following metadata is gathered by this plugin:========  =============== ===================================Key       Description     Example========  =============== ===================================Python    Python version  3.6.4Platform  Platform        Darwin-17.4.0-x86_64-i386-64bitPackages  pytest packages {'py': '1.5.2', 'pytest': '3.4.1'}Plugins   pytest plugins  {'metadata': '1.6.0'}========  =============== ===================================Additional metadata-------------------You can provide your own metadata (key, value pair) by specifying ``--metadata`` on the commandline::   pytest --metadata foo barNote: You can provide multiple sets of ``--metadata``::   pytest --metadata foo bar --metadata baz zooThere's also the possibility of passing in metadata as a JSON string::    pytest --metadata-from-json '{&quot;cat_says&quot;: &quot;bring the cat nip&quot;, &quot;human_says&quot;: &quot;yes kitty&quot;}'Alternatively a JSON can be read from a given file::    pytest --metadata-from-json-file path/to/valid/file.jsonContinuous integration----------------------When run in a continuous integration environment, additional metadata is addedfrom environment variables. Below is a list of the supported continuousintegration providers, along with links to the environment variables that areadded to metadata if they're present.* `AppVeyor &lt;https://www.appveyor.com/docs/environment-variables/&gt;`_* `Bitbucket &lt;https://confluence.atlassian.com/bitbucket/environment-variables-794502608.html&gt;`_* `CircleCI &lt;https://circleci.com/docs/1.0/environment-variables/&gt;`_* `GitLab CI &lt;http://docs.gitlab.com/ce/ci/variables/README.html&gt;`_* `Jenkins &lt;https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables&gt;`_* `TaskCluster &lt;https://docs.taskcluster.net/reference/workers/docker-worker/environment&gt;`_* `Travis CI &lt;https://docs.travis-ci.com/user/environment-variables/&gt;`_Note that if you're using `Tox &lt;http://tox.readthedocs.io/&gt;`_ to run your teststhen you will need to `pass down any additional environment variables &lt;http://tox.readthedocs.io/en/latest/example/basic.html#passing-down-environment-variables&gt;`_for these to be picked up.Viewing metadata----------------If you pass ``--verbose`` on the command line when running your tests, then themetadata will be displayed in the terminal report header::  pytest --verbose  ============================ test session starts ============================  platform darwin -- Python 3.6.4, pytest-3.4.1, py-1.5.2, pluggy-0.6.0 -- /usr/bin/python  cachedir: .pytest_cache  metadata: {'Python': '3.6.4', 'Platform': 'Darwin-17.4.0-x86_64-i386-64bit', 'Packages': {'pytest': '3.4.1', 'py': '1.5.2', 'pluggy': '0.6.0'}, 'Plugins': {'metadata': '1.6.0'}}  plugins: metadata-1.6.0Including metadata in Junit XML-------------------------------Pytest-metadata provides the session scoped fixture :code:`include_metadata_in_junit_xml` that you may use to include any metadata in Junit XML as ``property`` tags.For example the following test module.. code-block:: python  import pytest  pytestmark = pytest.mark.usefixtures('include_metadata_in_junit_xml')  def test():      passwhen called with.. code-block:: bash  pytest --metadata Daffy Duck --junit-xml=results.xmlwould produce the following XML.. code-block:: xml  &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  &lt;testsuites&gt;    &lt;testsuite name=&quot;pytest&quot; errors=&quot;0&quot; failures=&quot;0&quot; skipped=&quot;0&quot; tests=&quot;1&quot; time=&quot;0.009&quot; timestamp=&quot;2020-11-27T06:38:44.407674&quot; hostname=&quot;sam&quot;&gt;      &lt;properties&gt;        &lt;property name=&quot;Daffy&quot; value=&quot;Duck&quot;/&gt;  ...Accessing metadata------------------To add/modify/delete metadata at the end of metadata collection, you can use the ``pytest_metadata`` hook:.. code-block:: python  import pytest  @pytest.hookimpl(optionalhook=True)  def pytest_metadata(metadata):      metadata.pop(&quot;password&quot;, None)To access the metadata from a test or fixture, you can use the ``metadata``fixture:.. code-block:: python  def test_metadata(metadata):      assert 'metadata' in metadata['Plugins']To access the metadata from a plugin, you can use the ``stash`` attribute ofthe ``config`` object. This can be used to read/add/modify the metadata:.. code-block:: python  def pytest_configure(config):    metadata = config.pluginmanager.getplugin(&quot;metadata&quot;)    if metadata:        from pytest_metadata.plugin import metadata_key        config.stash[metadata_key]['foo'] = 'bar'Plugin integrations-------------------Here's a handy list of plugins that either read or contribute to the metadata:* `pytest-base-url &lt;https://pypi.python.org/pypi/pytest-base-url/&gt;`_ - Adds the  base URL to the metadata.* `pytest-html &lt;https://pypi.python.org/pypi/pytest-html/&gt;`_ - Displays the  metadata at the start of each report.* `pytest-reporter-html1 &lt;https://pypi.org/project/pytest-reporter-html1/&gt;`_ -  Presents metadata as part of the report.* `pytest-selenium &lt;https://pypi.python.org/pypi/pytest-selenium/&gt;`_ - Adds the  driver, capabilities, and remote server to the metadata.Resources---------- `Release Notes &lt;http://github.com/davehunt/pytest-metadata/blob/master/CHANGES.rst&gt;`_- `Issue Tracker &lt;http://github.com/davehunt/pytest-metadata/issues&gt;`_- `Code &lt;http://github.com/davehunt/pytest-metadata/&gt;`_</longdescription>
</pkgmetadata>