<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;left&quot;&gt;    &lt;a href=&quot;https://github.com/debatelab/deepa2/actions/workflows/run_pytest.yml&quot;&gt;        &lt;img alt=&quot;unit tests&quot; src=&quot;https://github.com/debatelab/deepa2-datasets/actions/workflows/run_pytest.yml/badge.svg?branch=main&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://github.com/debatelab/deepa2/actions/workflows/code_quality_checks.yml&quot;&gt;        &lt;img alt=&quot;code quality&quot; src=&quot;https://github.com/debatelab/deepa2-datasets/actions/workflows/code_quality_checks.yml/badge.svg?branch=main&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://codeclimate.com/github/debatelab/deepa2/test_coverage&quot;&gt;        &lt;img src=&quot;https://api.codeclimate.com/v1/badges/8b4bc32031d6d67d4831/test_coverage&quot; /&gt;    &lt;/a&gt;    &lt;a href=&quot;https://codeclimate.com/github/debatelab/deepa2&quot;&gt;        &lt;img alt=&quot;Code Climate maintainability&quot; src=&quot;https://img.shields.io/codeclimate/maintainability/debatelab/deepa2&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/deepa2/&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/v/deepa2&quot; alt=&quot;PyPI version&quot;&gt;    &lt;/a&gt;    &lt;/p&gt;# Deep Argument Analysis (`deepa2`)&lt;/p&gt;This project provides `deepa2`, which* ü•ö takes NLP data (e.g. NLI, argument mining) as ingredients;* üéÇ bakes DeepA2 datatsets conforming to the [Deep Argument Analysis Framework](https://arxiv.org/abs/2110.01509);* üç∞ serves DeepA2 data as text2text datasets suitable for training language models.There's a public collection of üéÇ DeepA2 datatsets baked with `deepa2` at the [HF hub](https://huggingface.co/datasets/debatelab/deepa2).The [Documentation](docs/) describes usage options and gives background info on the Deep Argument Analysis Framework.## Quickstart### Integrating `deepa2` into Your Training Pipeline1. Install `deepa2` into your ML project's virtual environment, e.g.:```bashsource my-projects-venv/bin/activate python --version  # should be ^3.7python -m pip install deepa2```2. Add `deepa2` preprocessor to your training pipeline. Your training script may look like, for example:```sh#!/bin/bash# configure and activate environment...# download deepa2 datasets and # prepare for text2text trainingdeepa2 serve \    --path some-deepa2-dataset \    # &lt;&lt;&lt; üéÇ    --export_format csv \    --export_path t2t \             # &gt;&gt;&gt; üç∞# run default training script, # e.g., with ü§ó Transformerspython .../run_summarization.py \    --train_file t2t/train.csv \    # &lt;&lt;&lt; üç∞    --text_column &quot;text&quot; \    --summary_column &quot;target&quot; \    --...# clean-uprm -r t2t```3. That's it.### Create DeepA2 datasets with `deepa2` from existing NLP dataInstall [poetry](https://python-poetry.org/docs/#installation). Clone the repository:```bashgit clone https://github.com/debatelab/deepa2-datasets.git```Install this package from within the repo's root folder:```bashpoetry install```Bake a DeepA2 dataset, e.g.:```bashpoetry run deepa2 bake \\  --name esnli \\                   # &lt;&lt;&lt; ü•ö  --debug-size 100 \\  --export-path ./data/processed    # &gt;&gt;&gt; üéÇ  ```## Contribute a DeepA2Builder for another DatasetWe welcome contributions to this repository, especially scripts that port existing datasets to the DeepA2 Framework. Within this repo, a code module that transforms data into the DeepA2 format contains1. a Builder class that describes how DeepA2 examples will be constructed and that implements the abstract `builder.Builder` interface (such as, e.g., `builder.entailmentbank_builder.EnBankBuilder`);2. a DataLoader which provides a method for loading the raw data as a ü§ó Dataset object (such as, for example, `builder.entailmentbank_builder.EnBankLoader`) -- you may use `deepa2.DataLoader` as is in case the data is available in a way compatible with ü§ó Dataset;3. dataclasses which describe the features of the raw data and the preprocessed data, and which extend the dummy classes `deepa2.RawExample` and `deepa2.PreprocessedExample`;4. a collection of unit tests that check the concrete Builder's methods (such as, e.g., `tests/test_enbank.py`);5. a documentation of the pipeline (as for example in `docs/esnli.md`).Consider **suggesting** to collaboratively construct such a pipeline by opening a [new issue](https://github.com/debatelab/deepa2/issues/new?assignees=&amp;labels=enhancement&amp;template=new_dataset.md&amp;title=%5BDATASET+NAME%5D).## CitationThis repository builds on and extends the DeepA2 Framework originally presented in:```bibtex@article{betz2021deepa2,      title={DeepA2: A Modular Framework for Deep Argument Analysis with Pretrained Neural Text2Text Language Models},       author={Gregor Betz and Kyle Richardson},      year={2021},      eprint={2110.01509},      archivePrefix={arXiv},      primaryClass={cs.CL}}```</longdescription>
</pkgmetadata>