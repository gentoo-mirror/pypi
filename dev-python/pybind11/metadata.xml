<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. figure:: https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png   :alt: pybind11 logo**pybind11 — Seamless operability between C++11 and Python**|Latest Documentation Status| |Stable Documentation Status| |Gitter chat| |GitHub Discussions| |CI| |Build status||Repology| |PyPI package| |Conda-forge| |Python Versions|`Setuptools example &lt;https://github.com/pybind/python_example&gt;`_• `Scikit-build example &lt;https://github.com/pybind/scikit_build_example&gt;`_• `CMake example &lt;https://github.com/pybind/cmake_example&gt;`_.. start**pybind11** is a lightweight header-only library that exposes C++ typesin Python and vice versa, mainly to create Python bindings of existingC++ code. Its goals and syntax are similar to the excellent`Boost.Python &lt;http://www.boost.org/doc/libs/1_58_0/libs/python/doc/&gt;`_library by David Abrahams: to minimize boilerplate code in traditionalextension modules by inferring type information using compile-timeintrospection.The main issue with Boost.Python—and the reason for creating such asimilar project—is Boost. Boost is an enormously large and complex suiteof utility libraries that works with almost every C++ compiler inexistence. This compatibility has its cost: arcane template tricks andworkarounds are necessary to support the oldest and buggiest of compilerspecimens. Now that C++11-compatible compilers are widely available,this heavy machinery has become an excessively large and unnecessarydependency.Think of this library as a tiny self-contained version of Boost.Pythonwith everything stripped away that isn't relevant for bindinggeneration. Without comments, the core header files only require ~4Klines of code and depend on Python (3.6+, or PyPy) and the C++standard library. This compact implementation was possible thanks tosome of the new C++11 language features (specifically: tuples, lambdafunctions and variadic templates). Since its creation, this library hasgrown beyond Boost.Python in many ways, leading to dramatically simplerbinding code in many common situations.Tutorial and reference documentation is provided at`pybind11.readthedocs.io &lt;https://pybind11.readthedocs.io/en/latest&gt;`_.A PDF version of the manual is available`here &lt;https://pybind11.readthedocs.io/_/downloads/en/latest/pdf/&gt;`_.And the source code is always available at`github.com/pybind/pybind11 &lt;https://github.com/pybind/pybind11&gt;`_.Core features-------------pybind11 can map the following core C++ features to Python:- Functions accepting and returning custom data structures per value,  reference, or pointer- Instance methods and static methods- Overloaded functions- Instance attributes and static attributes- Arbitrary exception types- Enumerations- Callbacks- Iterators and ranges- Custom operators- Single and multiple inheritance- STL data structures- Smart pointers with reference counting like ``std::shared_ptr``- Internal references with correct reference counting- C++ classes with virtual (and pure virtual) methods can be extended  in PythonGoodies-------In addition to the core functionality, pybind11 provides some extragoodies:- Python 3.6+, and PyPy3 7.3 are supported with an implementation-agnostic  interface (pybind11 2.9 was the last version to support Python 2 and 3.5).- It is possible to bind C++11 lambda functions with captured  variables. The lambda capture data is stored inside the resulting  Python function object.- pybind11 uses C++11 move constructors and move assignment operators  whenever possible to efficiently transfer custom data types.- It's easy to expose the internal storage of custom data types through  Pythons' buffer protocols. This is handy e.g. for fast conversion  between C++ matrix classes like Eigen and NumPy without expensive  copy operations.- pybind11 can automatically vectorize functions so that they are  transparently applied to all entries of one or more NumPy array  arguments.- Python's slice-based access and assignment operations can be  supported with just a few lines of code.- Everything is contained in just a few header files; there is no need  to link against any additional libraries.- Binaries are generally smaller by a factor of at least 2 compared to  equivalent bindings generated by Boost.Python. A recent pybind11  conversion of PyRosetta, an enormous Boost.Python binding project,  `reported &lt;https://graylab.jhu.edu/Sergey/2016.RosettaCon/PyRosetta-4.pdf&gt;`_  a binary size reduction of **5.4x** and compile time reduction by  **5.8x**.- Function signatures are precomputed at compile time (using  ``constexpr``), leading to smaller binaries.- With little extra effort, C++ types can be pickled and unpickled  similar to regular Python objects.Supported compilers-------------------1. Clang/LLVM 3.3 or newer (for Apple Xcode's clang, this is 5.0.0 or   newer)2. GCC 4.8 or newer3. Microsoft Visual Studio 2017 or newer4. Intel classic C++ compiler 18 or newer (ICC 20.2 tested in CI)5. Cygwin/GCC (previously tested on 2.5.1)6. NVCC (CUDA 11.0 tested in CI)7. NVIDIA PGI (20.9 tested in CI)About-----This project was created by `WenzelJakob &lt;http://rgl.epfl.ch/people/wjakob&gt;`_. Significant features and/orimprovements to the code were contributed by Jonas Adler, Lori A. Burns,Sylvain Corlay, Eric Cousineau, Aaron Gokaslan, Ralf Grosse-Kunstleve, Trent Houliston, AxelHuebl, @hulucc, Yannick Jadoul, Sergey Lyskov, Johan Mabille, Tomasz Miąsko,Dean Moldovan, Ben Pritchard, Jason Rhinelander, Boris Schäling, PimSchellart, Henry Schreiner, Ivan Smirnov, Boris Staletic, and Patrick Stewart.We thank Google for a generous financial contribution to the continuousintegration infrastructure used by this project.Contributing~~~~~~~~~~~~See the `contributingguide &lt;https://github.com/pybind/pybind11/blob/master/.github/CONTRIBUTING.md&gt;`_for information on building and contributing to pybind11.License~~~~~~~pybind11 is provided under a BSD-style license that can be found in the`LICENSE &lt;https://github.com/pybind/pybind11/blob/master/LICENSE&gt;`_file. By using, distributing, or contributing to this project, you agreeto the terms and conditions of this license... |Latest Documentation Status| image:: https://readthedocs.org/projects/pybind11/badge?version=latest   :target: http://pybind11.readthedocs.org/en/latest.. |Stable Documentation Status| image:: https://img.shields.io/badge/docs-stable-blue.svg   :target: http://pybind11.readthedocs.org/en/stable.. |Gitter chat| image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg   :target: https://gitter.im/pybind/Lobby.. |CI| image:: https://github.com/pybind/pybind11/workflows/CI/badge.svg   :target: https://github.com/pybind/pybind11/actions.. |Build status| image:: https://ci.appveyor.com/api/projects/status/riaj54pn4h08xy40?svg=true   :target: https://ci.appveyor.com/project/wjakob/pybind11.. |PyPI package| image:: https://img.shields.io/pypi/v/pybind11.svg   :target: https://pypi.org/project/pybind11/.. |Conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pybind11.svg   :target: https://github.com/conda-forge/pybind11-feedstock.. |Repology| image:: https://repology.org/badge/latest-versions/python:pybind11.svg   :target: https://repology.org/project/python:pybind11/versions.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pybind11.svg   :target: https://pypi.org/project/pybind11/.. |GitHub Discussions| image:: https://img.shields.io/static/v1?label=Discussions&amp;message=Ask&amp;color=blue&amp;logo=github   :target: https://github.com/pybind/pybind11/discussions</longdescription>
</pkgmetadata>