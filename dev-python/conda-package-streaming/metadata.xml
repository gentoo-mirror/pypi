<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># conda-package-streamingDownload conda metadata from packages without transferring entire file. Getmetadata from local `.tar.bz2` packages without reading entire files.Uses enhanced pip `lazy_wheel` to fetch a file out of `.conda` with no more than3 range requests, but usually 2.Uses `tar = tarfile.open(fileobj=...)` to stream remote `.tar.bz2`. Closes theHTTP request once desired files have been seen.# QuickstartThe basic API yields (tarfile, member) tuples from conda files as tarfile isneeded to extract member. Note the `.tar.bz2` format yields all members, notjust `info/`, from `stream_conda_info` / `stream_conda_component`, while the`.conda` format yields members from the requested inner archive â€” allowing thecaller to decide when to stop reading.From a url,```pythonfrom conda_package_streaming.url import stream_conda_info# url = (ends with .conda or .tar.bz2)for tar, member in stream_conda_info(url):    if member.name == &quot;info/index.json&quot;:        index_json = json.load(tar.extractfile(member))        break```From s3,```pythonclient = boto3.client(&quot;s3&quot;)from conda_package_streaming.s3 import stream_conda_info# key = (ends with .conda or .tar.bz2)for tar, member in stream_conda_info(client, bucket, key):    if member.name == &quot;info/index.json&quot;:        index_json = json.load(tar.extractfile(member))        break```From a filename,```pythonfrom conda_package_streaming import package_streaming# filename = (ends with .conda or .tar.bz2)for tar, member in package_streaming.stream_conda_info(filename):    if member.name == &quot;info/index.json&quot;:        index_json = json.load(tar.extractfile(member))        break```From a file-like object,```pythonfrom contextlib import closingfrom conda_package_streaming.url import conda_reader_for_urlfrom conda_package_streaming.package_streaming import stream_conda_componentfilename, conda = conda_reader_for_url(url)# file object must be seekable for `.conda` format, but merely readable for `.tar.bz2`with closing(conda):    for tar, member in stream_conda_component(filename, conda, component=&quot;info&quot;):        if member.name == &quot;info/index.json&quot;:            index_json = json.load(tar.extractfile(member))            break```# Package goals* Extract conda packages (both formats)* Easy to install from pypi or conda* Do the least amount of I/O possible (no temporary files, transfer partial packages)* Open files from the network / standard HTTP / s3* Continue using conda-package-handling to create .conda packages# Generating documentationUses markdown, furo theme. Requires newer mdit-py-plugins.`pip install conda-package-streaming[docs]`One time:`sphinx-apidoc -o docs .`</longdescription>
</pkgmetadata>