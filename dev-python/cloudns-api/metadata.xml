<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>cloudns_api###########A Python 3 interface to the ClouDNS.net API===========================================Please note that this is still in Beta. Use at your own risk.This project is an independent project not developed by`CloudNS.net &lt;https://cloudns.net&gt;`__.The interface is designed to be simple and intuitive. Entities are representedas modules. Each has a list, create, update, and delete function (whenappropriate, ie, you cannot delete an SOA record). Some entities have functionsspecific to them, but whenever possible, the arguments are consistent. One ofthe major goals of this project is code readability.Another major goal is for the code to have 90%+ test coverage.For documentation on the `CloudNS.net &lt;https://cloudns.net&gt;`__ API see `here&lt;https://www.cloudns.net/wiki/article/41/&gt;`__.Please submit any bug reports and bug fixes on github `here&lt;https://github.com/prestix-studio/&gt;`__.Installing and including in projects====================================Installing cloudns_api----------------------.. code:: bash    $ pip install cloudns_apiIn order to authenticate, you must first generate a CloudNS auth user or subuser and password combination. (See `here&lt;https://www.cloudns.net/wiki/article/42/&gt;`__ for instructions.) Then you mustset the appropriate username and password values as environment variables asfollows:.. code:: bash    # USERNAME:    export CLOUDNS_API_AUTH_ID=my_user    #      - or -    export CLOUDNS_API_SUB_AUTH_ID=my_user    #      - or -    export CLOUDNS_API_SUB_AUTH_USER=my_user    # PASSWORD:    # This should be the password that corresponds to the above user or sub    # user.    export CLOUDNS_API_AUTH_PASSWORD=my_passwordWhen you are debugging, you can set the environment variable`CLOUDNS_API_DEBUG` to True:.. code:: bash    export CLOUDNS_API_DEBUG=TrueTo make things easier, you could put these in your python virtual environmentor use a package like`python-dotenv &lt;https://github.com/theskumar/python-dotenv&gt;`__ to automaticallyload your environment variables. Be sure to *not* include your private usernameand password in your public repositories.Running Tests-------------.. code:: bash    $ cd &lt;cloudns_api directory&gt;    $ py.test    $ py.test -x                    # Stop on failures    $ py.test tests/test_record.py  # Specific test    $ py.test -k validate           # Run tests with 'validate' in the nameImporting and Basic Usage-------------------------.. code:: python    &gt;&gt;&gt; import cloudns_api    &gt;&gt;&gt; response = cloudns_api.zone.list(search='example')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      [                {                    &quot;name&quot;:     &quot;example.com&quot;,                    &quot;type&quot;:     &quot;master&quot;,                    &quot;zone&quot;:     &quot;domain&quot;,                    &quot;status&quot;:   &quot;1&quot;                },                {                    &quot;name&quot;:     &quot;example.net&quot;,                    &quot;type&quot;:     &quot;master&quot;,                    &quot;zone&quot;:     &quot;domain&quot;,                    &quot;status&quot;:   &quot;1&quot;                },                {                    &quot;name&quot;:     &quot;example.org&quot;,                    &quot;type&quot;:     &quot;master&quot;,                    &quot;zone&quot;:     &quot;domain&quot;,                    &quot;status&quot;:   &quot;1&quot;                }            ]        }API Reference=============Introduction------------We have created the API to be consistent and predictable. API calls usuallyinclude `list`, `create`, `get`, and `update` functions that do exactly whatthey say. Arguments are passed in a consistent manner across all functions.When an argument accepts an integer, it can be passed as an integer or a stringof that integer.All arguments are passed to the API functions as keyword arguments. Each APIfunction turns these arguments into a `Parameters` instance. The constructionof the `Parameters` instance can also include information for validating thearguments. This validation happens by default when the object is instantiated.If a validation error occurs, the exception is thrown and handled in the apidecorator. A parameter is required unless the optional flag is set to `True`.The name of the parameter is matched to a validation function unless the`validate_as` option is set on that particular parameter. The `Parameters`object has a to_dict() method that returns the parameters as a key-value dictto be passed on to the CloudNS API using requests.The CloudNS API sometimes uses camel case and sometimes uses dashes in itsparameters. In our API, we convert both of these to snake case for consistencyand in order to be &quot;pythonic&quot;.API `update` functions require all required parameters to be passed. This canbe inconvenient at times, so cloudns_api includes an argument `patch` that whenset to `True` allows you to pass only arguments you wish to change. Behind thescenes, the API will get the existing data and merge it with the new data forthe update call. We've also included the convenient `patch` function as awrapper around `update` with the `patch` argument set to `True`.The cloudns_api includes these two helpful functions for checking your logincredentials and retrieving your CloudNS nameservers:.. code:: python    &gt;&gt;&gt; print(cloudns_api.api.get_login())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;:             &quot;Success&quot;,                &quot;status_description&quot;: &quot;Success login.&quot;            }        }    &gt;&gt;&gt; print(cloudns_api.api.get_nameservers())ApiResponse^^^^^^^^^^^All API calls return an `ApiResponse` instance. The `ApiResponse` object is awrapper around the basic response object from the `requests&lt;https://github.com/kennethreitz/requests&gt;`__ library. We've added a fewproperties and functions specific to our needs here... code:: python    &gt;&gt;&gt; print(response.success)      # See if a response succeeded    &gt;&gt;&gt; print(response.status_code)  # Get the status of a response    &gt;&gt;&gt; print(response.payload)      # The payload of the response                                     # Note that the parameters are converted                                     # to camel case here.    &gt;&gt;&gt; print(response.json())       # Get the response as json object    &gt;&gt;&gt; print(response.string())     # Get the response as json stringApiParameter^^^^^^^^^^^^The `ApiParameter` object is responsible for describing the kinds of parametersto pass to the api function and how these parameters should be validated.Understanding the ApiParameter object is not necessary for using the API, butcan be helpful to see what is going on under the hood.By default, an ApiParameter validates its parameters upon initialization. Butif the `validate` parameter is set to false, this can be deferred until later.You can then call the `validate()` method to manually validate the parameters... code:: python    &gt;&gt;&gt; print(parameters.validate())  # Validates the parameters according to                                      # their definitions    &gt;&gt;&gt; print(response.to_dict())  # Returns the parameters as a dict. Used                                   # when passing the parameters to requests.A full discription of how an ApiParameter object and its parameter definitionworks can be found in the `cloudns_api/parameters.py` file. You may also needto reference the `cloudns_api/validation.py` module to see how validationworks.DNS ZONE--------Parameters:+ page - int/string (optional) Page number to show.+ rows_per_page - int/string (optional) Number of rows per page to show.+ search - string (optional) Optional string to filter results by.+ group_id - int/string (optional) Optional group id to filter results by.Response Parameters:+ name - Domain name.+ type - Zone type (Master, Slave, Parked, GeoDNS)+ zone -+ status - active (1) or inactive(0)Listing DNS Zones^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.list(search='example')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      [                {                    &quot;name&quot;:     &quot;example.com&quot;,                    &quot;type&quot;:     &quot;master&quot;,                    &quot;zone&quot;:     &quot;domain&quot;,                    &quot;status&quot;:   &quot;1&quot;                },                {                    &quot;name&quot;:     &quot;example.net&quot;,                    &quot;type&quot;:     &quot;master&quot;,                    &quot;zone&quot;:     &quot;domain&quot;,                    &quot;status&quot;:   &quot;1&quot;                },                {                    &quot;name&quot;:     &quot;example.org&quot;,                    &quot;type&quot;:     &quot;master&quot;,                    &quot;zone&quot;:     &quot;domain&quot;,                    &quot;status&quot;:   &quot;1&quot;                }            ]        }    &gt;&gt;&gt; print(cloudns_api.zone.get_page_count(rows_per_page=10))  # Get page countCreating DNS Zones^^^^^^^^^^^^^^^^^^NOTE: The nameserver argument doesn't seem to currently work on ClouDNS'sservers... code:: python    &gt;&gt;&gt; response = cloudns_api.zone.create(domain_name='example.com',                                           zone_type='master')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;:                    &quot;Domain zone example.com was created successfully.&quot;            }        }Getting a DNS Zone^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.get(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;name&quot;:     &quot;example.com&quot;,                &quot;type&quot;:     &quot;master&quot;,                &quot;zone&quot;:     &quot;domain&quot;,                &quot;status&quot;:   &quot;1&quot;            }        }Updating a DNS Zone Serial Number^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.update(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;:                    &quot;Domain zone example.com was updated successfully.&quot;            }        }Activating/Deactivating a DNS Zone^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.activate(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;:                    &quot;The zone was activated!&quot;            }        }    &gt;&gt;&gt; cloudns_api.zone.deactivate(domain_name='example.com')    &gt;&gt;&gt; cloudns_api.zone.toggle_activation(domain_name='example.com')Deleting a DNS Zone^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.delete(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;:                    &quot;Domain zone example.com was deleted successfully.&quot;            }        }Getting ClouDNS Zone Stats^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.get_stats()    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;count&quot;: &quot;25&quot;,  # Number of zones used                &quot;limit&quot;: &quot;40&quot;   # Number of zones allowed by your plan            }        }Check if DNSSEC is available for a zone^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.dnssec_available(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      1,        }Activating/Deactivating a DNSSEC^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.dnssec_activate(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;:                    &quot;The DNSSEC is activated for your zone. The keys will be generated soon.&quot;            }        }    &gt;&gt;&gt; cloudns_api.zone.deactivate(domain_name='example.com')Getting DNSSEC DS Records^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.dnssec_ds_records(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,             &quot;payload&quot;: {                &quot;status&quot;: &quot;1&quot;,                &quot;ds&quot;: [                    &quot;example.com. 3600 IN DS 9813 13 2 613FDE9D90DB360EE4DDC1E18170D3306147A95E4F77177017C83E31057B9141&quot;                ],                &quot;ds_records&quot;: [                    {                        &quot;digest&quot;: &quot;613FDE9D90DB360EE4DDC1E18170D3306147A95E4F77177017C83E31057B9141&quot;,                        &quot;key_tag&quot;: &quot;9813&quot;,                        &quot;algorithm&quot;: &quot;13&quot;,                        &quot;algorithm_name&quot;: &quot;ECDSA SHA-256&quot;,                        &quot;digest_type&quot;: &quot;2&quot;,                        &quot;digest_type_name&quot;: &quot;SHA-256&quot;                    }                ],                &quot;dnskey&quot;: [                    &quot;example.com. 3600 IN DNSKEY 257 3 13 tDYgHxnS3cbLb9B2B2l+SsawWiG4jOzoFmnjy7PVL0NK5qiil/254sZLxEhXs0LNiL6YxcRVzYdHLkWi074SuQ==&quot;,                    &quot;example.com. 3600 IN DNSKEY 256 3 13 Nr9P1PdBNRCI7mpF7Nrx72rNZ7EQcHlVggUBJR0E9l+W0j37WlpluKM4qv/WVn/QsZxQOU1eSMPPyIXlT3sCvw==&quot;                ]            }        }Checking if a DNS Zone Has Been Updated on all Servers^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.zone.is_updated(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      True        }SOA Record----------Every domain zone contains one SOA record that contains the current version ofthe data in the zone, the administrator of the zone record, and TTL informationfor the zone.These functions only work for master zones.SOA Parameters:+ domain_name - string (required) Domain name or reverse zone name whose SOA  details you want to modify.+ primary_ns - string (required) Hostname of primary nameserver.+ admin_mail - string (required) DNS zone administrator's e-mail.+ refresh - integer (required) The time in seconds that a secondary DNS server  waits before querying the primary DNS server's SOA record to check for  changes. Rate can be any integer from 1200 to 43200 seconds.+ retry - integer (required) The time in seconds that a secondary server waits  before retrying a failed zone transfer. Usually, the retry rate is less than  the refresh rate. Rate can be any integer from 180 to 2419200 seconds.+ expire - integer (required) The time in seconds that a secondary server will  keep trying to complete a zone transfer. If this time expires before a  successful zone transfer, the secondary server will expire its zone file. The  secondary will stop answering queries, as it considers its data too old to be  reliable. Time can be any integer from 1209600 to 2419200 seconds.+ default_ttl - integer (required) The minimum time-to-live value applies to  all resource records in the zone file. TTL can be any integer from 60 to  2419200 seconds.Note that ClouDNS automatically increments the serial number when the zone isupdated or changed.Getting the SOA for a domain^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.soa.get('example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;admin_mail&quot;:     &quot;admin@example.com&quot;,                &quot;default_ttl&quot;:    &quot;3600&quot;,                &quot;expire&quot;:         &quot;1209600&quot;,                &quot;primary_ns&quot;:     &quot;ns1.example.com&quot;,                &quot;refresh&quot;:        &quot;7200&quot;,                &quot;retry&quot;:          &quot;1800&quot;,                &quot;serial_number&quot;:  &quot;2019060601&quot;            }        }Updating the SOA for a domain^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.soa.update(            'example.com',  # The domain to patch            admin_mail='admin@example.com',            default_ttl=3600,            expire=1209600,            primary_ns='ns1.example.com',            refresh=7200,            retry=1800,        )    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;:                    &quot;The SOA record was modified successfully.&quot;            }        }Patch Updating the SOA for a domain^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^A patch update allows you to specify only the parameters you wish to change... code:: python    &gt;&gt;&gt; response = cloudns_api.soa.patch(            'example.com',  # The domain to patch            admin_mail='admin@example.com',            primary_ns='ns1.example.com',        )    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;:                    &quot;The SOA record was modified successfully.&quot;            }        }DNS Records-----------Besides the SOA record, a domain can have a number of other records.+ A record - points a hostname to an IPv4 address.  * host - subdomain to optionally add to main domain  * record - an IPv4  * ttl - time to keep record in cache+ AAAA record - points a hostname to an IPv6 address.  * host - subdomain to optionally add to main domain  * record - an IPv6  * ttl - time to keep record in cache+ MX record - server responsible for accepting e-mail messages.  * host - subdomain to optionally add to main domain  * record - hostname of the server that will handle the email messages  * priority - priority index, prioritize the lowest indexed server  * ttl - time to keep record in cache+ CNAME record - canonical name record used for specifying host alisases.  * host - subdomain to optionally add to main domain  * record - the host this is an alias for  * ttl - time to keep record in cache+ TXT record - used to provide information for a wide variety of sources.  * host - subdomain to optionally add to main domain  * record - any text is valid  * ttl - time to keep record in cache+ SPF record - used to identify which servers are permitted to send emails for  your host. This record type is deprecated in favor of using a TXT record.  * host - subdomain to optionally add to main domain  * record - a specific format is required for this record  * ttl - time to keep record in cache+ NS record - used to identify the name servers responsible for your domain.  This must be the same as what your domain provider has configured.  * host - subdomain to optionally add to main domain  * record - the hostname of the nameserver  * ttl - time to keep record in cache+ SRV record - used to identify the host and port of specific services.  * host - subdomain to optionally add to main domain  * record - the hostname of the server  * port - the port the service answers on  * priority - priority index, prioritize the lowest indexed server  * weight - a relative weight for services with the same index  * ttl - time to keep record in cache+ WR record - web redirect record. Points web requests from one server to  another. This is not an official DNS record type.  * host - subdomain to optionally add to main domain  * record - the url to redirect  * redirect-type - use a 301 (permanent) or 302 (temporary) redirect code  * ttl - time to keep record in cache  * frame - redirect the url in a frame so it is &quot;transparent&quot; to the user. Use    '1' to enable and '0' to disable.  * frame-title - Title of the frame  * frame-keywords - Keywords used in the frame  * frame-description - Description used in the frame+ ALIAS record - a special ClouDNS record type similar to CNAME records that  allow you to take advantage of Round-robbin DNS.  * host - subdomain to optionally add to main domain  * record - the host this is an alias for  * ttl - time to keep record in cache+ RP record - specifies the email address of the user responsible for the  hostname.  * host - subdomain to optionally add to main domain  * record - an email address  * ttl - time to keep record in cache+ SSHFP record - contains the fingerprints for public keys used in SSH servers.  * host - subdomain to optionally add to main domain  * record - the fingerprint  * algorithm - algorithm type to use (RSA, DSA, ECDSA, or Ed25159)  * fptype - fingerprint type (SHA-1 or SHA-256)  * ttl - time to keep record in cache+ PTR record - used for reverse DNS lookups. For every PTR record, there must  be a corresponding A record. Must be created on a reverse DNS zone.  * host - subdomain to optionally add to main domain  * record - the PTR record  * ttl - time to keep record in cache+ NAPTR record - used to map servers and user addresses in the Session  Initiation Protocol (SIP)  * host - subdomain to optionally add to main domain  * record - the NAPTR record  * ttl - time to keep record in cache+ CAA record - allows a DNS domain name holder to specify one or more  Certification Authorities (CAs) authorized to issue certificates for that  domain  * host - subdomain to optionally add to main domain  * ttl - time to keep record in cache  * caa-flag - 0 for non-critical, 128 for critical  * caa-type - issue, issuewild, iodef  * caa-value - the record value+ TLSA record - asociates a TLS certificate or public key with the domain name  * host - the RFC TLSA format: _port._protocol.host.domain.com. (example:    _80._tcp.host.example.com)  * tlsa_usage - an integer with one of the following values:    - 0 - PKIX-TA: Certificate Authority Constraint    - 1 - PKIX-EE: Service Certificate Constraint    - 2 - DANE-TA: Trust Anchor Assertion    - 3 - DANE-EE: Domain Issued Certificate  * tlsa_selector - an integer with one of the following values:    - 0 - Cert: Use full certificates    - 1 - SPKI: Use subject public key  * tlsa_matching_type - an integer with one of the following values:    - 0 - Full: No Hash    - 1 - SHA-256: SHA-256 Hash    - 2 - SHA-512: SHA-512 hash  * record - the certificate association data in hexedecimal format  * ttl - time to keep record in cacheA wildcard ('*') can be added for domains and subdomains that do not exist inthe DNS record for these types: A (or AAAA), MX, TXT, CNAME, ALIAS and WebRedirect.ClouDNS supports the following values for TTLs:+ 1 Minute+ 5 Minutes+ 15 Minutes+ 30 Minutes+ 1 Hours+ 6 Hours+ 12 Hours+ 1 Day+ 2 Days+ 3 Days+ 1 Week+ 2 Weeks+ 1 MonthClouDNS uses round-robbin DNS when multiple A, AAAA, or Alias records areprovided with different values.Getting available record types for a zone^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record \            .get_available_record_types(zone_type='domain')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      [                &quot;A&quot;, &quot;AAAA&quot;, &quot;MX&quot;, &quot;CNAME&quot;, &quot;TXT&quot;, &quot;SPF&quot;, &quot;NS&quot;, &quot;SRV&quot;, &quot;WR&quot;,                &quot;ALIAS&quot;, &quot;RP&quot;, &quot;SSHFP&quot;, &quot;NAPTR&quot;, &quot;CAA&quot;            ]        }Getting available TTLs for Records^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.get_available_ttls()    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      [                60, 300, 900, 1800, 3600, 21600, 43200, 86400, 172800, 259200,                604800, 1209600, 2592000            ]        }Listing DNS Records^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.list(domain_name='example.com',                                           host='ns1')  # Host is optional    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;1234567&quot;: {                    &quot;id&quot;:                &quot;1234567&quot;,                    &quot;type&quot;:              &quot;A&quot;,                    &quot;host&quot;:              &quot;ns1&quot;,                    &quot;record&quot;:            &quot;10.0.0.1&quot;,                    &quot;dynamicurl_status&quot;: 0,                    &quot;failover&quot;:          &quot;0&quot;,                    &quot;ttl&quot;:               &quot;86400&quot;,                    &quot;status&quot;:            1                },                &quot;2345678&quot;: {                    &quot;id&quot;:                &quot;2345678&quot;,                    &quot;type&quot;:              &quot;A&quot;,                    &quot;host&quot;:              &quot;ns1&quot;,                    &quot;record&quot;:            &quot;10.0.0.2&quot;,                    &quot;dynamicurl_status&quot;: 0,                    &quot;failover&quot;:          &quot;0&quot;,                    &quot;ttl&quot;:               &quot;86400&quot;,                    &quot;status&quot;:            1                }            }        }Creating DNS Records^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.create(domain_name='example.com',                                             host='', record_type='A',                                             record='10.10.10.10', ttl=3600)    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;: &quot;The record was added successfully.&quot;,                &quot;data&quot;: {&quot;id&quot;: 123456789}            }        }Transferring DNS Records^^^^^^^^^^^^^^^^^^^^^^^^NOTE: This currently doesn't work as expected. For every domain, I seem to begetting 'The zone transfers are not allowed from this server!'.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.transfer(domain_name='example.com',                                               server='1.1.1.1')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {}        }Copying DNS Records^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.copy(domain_name='example.com',                                           from_domain='example.net',                                           delete_current_records=False)    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;: &quot;8 records were copied&quot;,            }        }Getting a specific DNS Record^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.get(domain_name='example.com',                                          record_id=1234567)    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;id&quot;:                &quot;1234567&quot;,                &quot;type&quot;:              &quot;A&quot;,                &quot;host&quot;:              &quot;ns1&quot;,                &quot;record&quot;:            &quot;10.0.0.1&quot;,                &quot;dynamicurl_status&quot;: 0,                &quot;failover&quot;:          &quot;0&quot;,                &quot;ttl&quot;:               &quot;86400&quot;,                &quot;status&quot;:            1            }        }Exporting a DNS Record to BIND^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.export(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;zone&quot;: &quot;$ORIGIN example.com.\n@\t3600\tIN\tSOA\tns1.example.com. ....&quot;            }        }Getting the Dynamic URL for a DNS Record^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.get_dynamic_url(            domain_name='example.com', record_id='12345')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;host&quot;:              &quot;example.com&quot;,                &quot;url&quot;:               &quot;https://ipv4.cloudns.net/api/dynamicURL/?q=ABC123&quot;,            }        }        # This will set 'example.com' to the IP address of the machine that        # runs the code:    &gt;&gt;&gt; requests.get('https://ipv4.cloudns.net/api/dynamicURL/?q=ABC123')        OKUpdating a specific DNS Record^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.get(domain_name='example.com',                                          record_id=1234567)    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;: {                &quot;id&quot;:                &quot;1234567&quot;,                &quot;type&quot;:              &quot;A&quot;,                &quot;host&quot;:              &quot;&quot;,                &quot;record&quot;:            &quot;10.0.0.1&quot;,                &quot;dynamicurl_status&quot;: 0,                &quot;failover&quot;:          &quot;0&quot;,                &quot;ttl&quot;:               &quot;86400&quot;,                &quot;status&quot;:            1            }        }Activating/Deactivating a DNS Record^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.activate(domain_name='example.com')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;:                    &quot;Record activated&quot;            }        }    &gt;&gt;&gt; cloudns_api.record.deactivate(domain_name='example.com')    &gt;&gt;&gt; cloudns_api.record.toggle_activation(domain_name='example.com')Deleting a specific DNS Record^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.. code:: python    &gt;&gt;&gt; response = cloudns_api.record.delete(domain_name='example.com',                                             record_id='123456789')    &gt;&gt;&gt; print(response.json())        {            &quot;success&quot;:      True,            &quot;status_code&quot;:  200,            &quot;payload&quot;:      {                &quot;status&quot;: &quot;Success&quot;,                &quot;status_description&quot;: &quot;The record was deleted successfully.&quot;,            }        }Soli Deo gloria.</longdescription>
</pkgmetadata>