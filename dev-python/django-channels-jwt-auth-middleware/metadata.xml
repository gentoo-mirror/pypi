<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-channels-jwt-auth-middlewareCustom AuthMiddlewareStack to get users from JWT token for Django Channels.## InstallationSimply,```bash$ pip install django-channels-jwt-auth-middleware```And that it.## UsageAll you have to do is wrap your URLRouter.```pyfrom django_channels_jwt_auth_middleware.auth import JWTAuthMiddlewareStackapplication = ProtocolTypeRouter({    &quot;http&quot;: get_asgi_application(),    &quot;websocket&quot;: JWTAuthMiddlewareStack(        URLRouter(            websocket_urlpatterns,        )    ),})````AuthMiddlewareStack` is already in `JWTAuthMiddlewareStack`. If you want to change this, simply do;```pythonfrom django_channels_jwt_auth_middleware.auth import JWTAuthMiddlewarefrom . import YourCustomMiddlewareStackdef CustomJWTAuthMiddlewareStack(app):    return JWTAuthMiddleware(YourCustomMiddlewareStack(app))```Simply as that :)## TestingTesting is done by two methods.1. automated testing using django's test system.2. manual testing by hand.I have tried testing the middleware through `ChannelsLiveServerTestCase`, but currently this does not run due to pickle error in multiprocessing package from python.  For this reason no-token test cases were tested using django's test system using a test project, and test cases with jwt token is tested by hand.  Hand testing chrome extension called `Browser WebSocket Client` was used. Blow is a simple evidence from the hand testing.![websocket_connection_with_jwt_token](testproject/evidence/websocket_connection_with_jwt_token.png)![websocket_connection_with_token_query_param_without_value](testproject/evidence/websocket_connection_with_token_query_param_without_value.png)![websocket_connection_without_token](testproject/evidence/websocket_connection_without_token.png)If you go to `testproject/pages/tests.py` you will see the consumer that is used for testing.```pyclass TestConsumer(WebsocketConsumer):    def connect(self):        self.accept()    # def disconnect(self, code):    #     self.disconnect()    def receive(self, text_data, bytes_data=None):        context = {            'message': 'testing consumer',        }        user = self.scope['user']        if (user_id := user.id):            context.update({'user': str(user_id)})        else:            context.update({'user': None})        self.send(text_data=json.dumps(context))```simply, is a data is passed in to the websocket it will return a user id of None for AnonymousUser.1.0.0 (2021-01-20)------------------* First release on PyPI.</longdescription>
</pkgmetadata>