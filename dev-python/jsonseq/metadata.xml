<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jsonseq[RFC 7464 JSON Text Sequences](https://tools.ietf.org/html/rfc7464) encoding and decoding for Python.[![BuildStatus](https://travis-ci.com/sgillies/jsonseq.svg?branch=master)](https://travis-ci.com/sgillies/jsonseq)[![CoverageStatus](https://coveralls.io/repos/github/sgillies/jsonseq/badge.svg?branch=master)](https://coveralls.io/github/sgillies/jsonseq?branch=master)[![Documentation Status](https://readthedocs.org/projects/jsonseq/badge/?version=latest)](https://jsonseq.readthedocs.io/en/latest/?badge=latest)## UsageThe `jsonseq.encode.JSONSeqEncoder` class takes streams of JSON-serializablePython objects and yields for each object its JSON representation sandwichedbetween an optional ASCII record separator (RS, `\x1e`) and a newline (`\n`).```python&gt;&gt;&gt; from jsonseq.encode import JSONSeqEncoder&gt;&gt;&gt; for chunk in JSONSeqEncoder().encode(({&quot;a&quot;: i, &quot;b&quot;: i} for i in range(3))):...     print(repr(chunk))...'{&quot;a&quot;: 0, &quot;b&quot;: 0}\n''{&quot;a&quot;: 1, &quot;b&quot;: 1}\n''{&quot;a&quot;: 2, &quot;b&quot;: 2}\n'```The RS allows pretty-printed JSON to be streamed out in sequences that can bedecoded again.```python&gt;&gt;&gt; for chunk in JSONSeqEncoder(with_rs=True, indent=2).encode(({&quot;a&quot;: i, &quot;b&quot;: i} for i in range(3))):...     print(repr(chunk))...'\x1e{\n  &quot;a&quot;: 0,\n  &quot;b&quot;: 0\n}\n''\x1e{\n  &quot;a&quot;: 1,\n  &quot;b&quot;: 1\n}\n''\x1e{\n  &quot;a&quot;: 2,\n  &quot;b&quot;: 2\n}\n'```You can also get small chunks of the JSON sequences as they are encoded withthe `iterencode()` method.```python&gt;&gt;&gt; for chunk in JSONSeqEncoder(with_rs=True).iterencode(({&quot;a&quot;: i} for i in range(3))):...     print(repr(chunk))...'\x1e''{''&quot;a&quot;'': ''0''}''\n''\x1e''{''&quot;a&quot;'': ''1''}''\n''\x1e''{''&quot;a&quot;'': ''2''}''\n'```You can use either `encode()` or `iterencode()` to copy JSON text sequences to a file.```pythonwith open(&quot;/tmp/example.jsons&quot;, &quot;w&quot;) as f:    for chunk in JSONSeqEncoder(with_rs=True, indent=2).iterencode(({&quot;a&quot;: i, &quot;b&quot;: i} for i in range(3))):        f.write(chunk)```There is no need to add a newline when calling the file's `write()` method.JSONSeqEncoder ensures that it's already there where it needs to be.The `jsonseq.decode.JSONSeqDecoder` class takes streams of JSON textssandwiched between the optional ASCII record separator (RS, `\x1e`) anda newline (`\n`) and yields decoded Python objects.```python&gt;&gt;&gt; stream = ['\x1e', '{', '&quot;a&quot;', ': ', '0', '}', '\n', '\x1e', '{', '&quot;a&quot;', ': ', '1', '}', '\n', '\x1e', '{', '&quot;a&quot;', ': ', '2', '}', '\n']&gt;&gt;&gt; for obj in JSONSeqDecoder().decode(stream):...     print(repr(obj))...{'a': 0}{'a': 1}{'a': 2}```Objects can be read from a file in the same way.```python&gt;&gt;&gt; with open(&quot;/tmp/example.jsons&quot;) as f:...     for obj in JSONSeqDecoder().decode(f):...         print(repr(obj))...{'a': 0, 'b': 0}{'a': 1, 'b': 1}{'a': 2, 'b': 2}````</longdescription>
</pkgmetadata>