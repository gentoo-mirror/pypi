<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django REST reCAPTCHA**Django REST reCAPTCHA v2 and v3 field serializer**[![CI](https://github.com/llybin/drf-recaptcha/workflows/tests/badge.svg)](https://github.com/llybin/drf-recaptcha/actions)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/a9b44d24cba74c75bca6472b2ee8da67)](https://www.codacy.com/app/llybin/drf-recaptcha?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=llybin/drf-recaptcha&amp;amp;utm_campaign=Badge_Grade)[![Codacy Badge](https://api.codacy.com/project/badge/Coverage/a9b44d24cba74c75bca6472b2ee8da67)](https://www.codacy.com/app/llybin/drf-recaptcha?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=llybin/drf-recaptcha&amp;amp;utm_campaign=Badge_Coverage)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![PyPI](https://img.shields.io/pypi/v/drf-recaptcha)](https://pypi.org/project/drf-recaptcha/)[![PyPI - Downloads](https://img.shields.io/pypi/dm/drf-recaptcha)](https://pypi.org/project/drf-recaptcha/)[![PyPI - License](https://img.shields.io/pypi/l/drf-recaptcha)](https://pypi.org/project/drf-recaptcha/)## Requirements*   Python: 3.7, 3.8, 3.9, 3.10, 3.11*   Django: 3.2, 4.0, 4.1, 4.2*   DRF: 3.11, 3.12, 3.13, 3.14## Installation1.  [Sign up for reCAPTCHA](https://www.google.com/recaptcha/)2.  Install with `pip install drf-recaptcha`3.  Add `&quot;drf_recaptcha&quot;` to your `INSTALLED_APPS` settings.4.  Set in settings `DRF_RECAPTCHA_SECRET_KEY````pythonINSTALLED_APPS = [   ...,   &quot;drf_recaptcha&quot;,   ...,]...DRF_RECAPTCHA_SECRET_KEY = &quot;YOUR SECRET KEY&quot;```## Usage```pythonfrom rest_framework.serializers import Serializer, ModelSerializerfrom drf_recaptcha.fields import ReCaptchaV2Field, ReCaptchaV3Fieldfrom feedback.models import Feedbackclass V2Serializer(Serializer):    recaptcha = ReCaptchaV2Field()    ...class GetOTPView(APIView):    def post(self, request):        serializer = V2Serializer(data=request.data, context={&quot;request&quot;: request})        serializer.is_valid(raise_exception=True)        ...class V3Serializer(Serializer):    recaptcha = ReCaptchaV3Field(action=&quot;example&quot;)    ...class V3WithScoreSerializer(Serializer):    recaptcha = ReCaptchaV3Field(        action=&quot;example&quot;,        required_score=0.6,    )    ...class GetReCaptchaScore(APIView):    def post(self, request):        serializer = V3WithScoreSerializer(data=request.data, context={&quot;request&quot;: request})        serializer.is_valid()        score = serializer.fields['recaptcha'].score        ...class FeedbackSerializer(ModelSerializer):    recaptcha = ReCaptchaV2Field()    class Meta:        model = Feedback        fields = (&quot;phone&quot;, &quot;full_name&quot;, &quot;email&quot;, &quot;comment&quot;, &quot;recaptcha&quot;)    def validate(self, attrs):        attrs.pop(&quot;recaptcha&quot;)        ...        return attrs    class DynamicContextSecretKey(APIView):    def post(self, request):        if request.platform == &quot;android&quot;:            recaptcha_secret_key = &quot;SPECIAL_FOR_ANDROID&quot;        else:            recaptcha_secret_key = &quot;SPECIAL_FOR_IOS&quot;        serializer = WithReCaptchaSerializer(            data=request.data,            context={                &quot;request&quot;: request,                &quot;recaptcha_secret_key&quot;: recaptcha_secret_key,            },        )        serializer.is_valid(raise_exception=True)        ...    class DynamicContextSecretKey(GenericAPIView):    serializer_class = WithReCaptchaSerializer        def get_serializer_context(self):        if self.request.platform == &quot;android&quot;:            recaptcha_secret_key = &quot;SPECIAL_FOR_ANDROID&quot;        else:            recaptcha_secret_key = &quot;SPECIAL_FOR_IOS&quot;        context = super().get_serializer_context()        context.update({&quot;recaptcha_secret_key&quot;: recaptcha_secret_key})        return context    class MobileSerializer(Serializer):    recaptcha = ReCaptchaV3Field(secret_key=&quot;&quot;)    ...```## Settings`DRF_RECAPTCHA_SECRET_KEY` - set your Google reCAPTCHA secret key. Type: str.`DRF_RECAPTCHA_DEFAULT_V3_SCORE` - by default: `0.5`. Type: float.`DRF_RECAPTCHA_ACTION_V3_SCORES` - by default: `{}`. Type: dict. You can define specific score for each action e.g. `{&quot;login&quot;: 0.6, &quot;feedback&quot;: 0.3}``DRF_RECAPTCHA_DOMAIN` - by default: `www.google.com`. Type: str.`DRF_RECAPTCHA_PROXY` - by default: `{}`. Type: dict. e.g. `{'http': 'http://127.0.0.1:8000', 'https': 'https://127.0.0.1:8000'}``DRF_RECAPTCHA_VERIFY_REQUEST_TIMEOUT` - by default: `10`. Type: int.### Priority of secret_key value1.  settings `DRF_RECAPTCHA_SECRET_KEY`2.  the argument `secret_key` of field3.  request.context[&quot;recaptcha_secret_key&quot;]## reCAPTCHA v3Validation is passed if the score value returned by Google is greater than or equal to required score.Required score value: `0.0 - 1.0`### Priority of score valueIf not defined or zero in current item then value from next item.1.  Value for action in settings `DRF_RECAPTCHA_ACTION_V3_SCORES`2.  Value in argument `required_score` of field3.  Default value in settings `DRF_RECAPTCHA_DEFAULT_V3_SCORE`4.  Default value `0.5`## TestingSet `DRF_RECAPTCHA_TESTING=True` in settings, no request to Google, no warnings, `DRF_RECAPTCHA_SECRET_KEY` is not required, set returning verification result in setting below.`DRF_RECAPTCHA_TESTING_PASS=True|False` - all responses are pass, default `True`.Use `from django.test import override_settings`## Credits[django-recaptcha](https://github.com/praekelt/django-recaptcha)reCAPTCHA copyright 2012 Google.</longdescription>
</pkgmetadata>