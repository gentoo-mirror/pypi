<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A simple but still powerfull Configuration Parser#################################################.. image:: https://secure.travis-ci.org/mortbauer/configreader.png?branch=master         :target: https://secure.travis-ci.org/mortbauer/configreaderThere are quite many Configuration Parsers for Python out there, but well, theyall kind of suck in there own way. Let me point out what I dislike:* `configparser`_: which is the de facto standard, has it's ini like language, in  my opionion quite awful, difficult and limited* Configuration through yaml: is beautiful, but how about intergration of  simple environment variables or interpolation of already defined values* How about just execution a python module, very unsafe (but who cares), but it  also pollutes the namespace with all sort of builtins and whatsoeverSo I was looking once again and found `python-config`_, which looked reallyexactly what I wanted, but well, I had my problems with it, since I wanted tohave acces to stuff like `os.getenv('HOME')` and similar, which was not reallypossible since it was forbidden to call a function, though you could stillevaluate stuff and so on. I looke into the source and thought well how can Iallow also calling functions? But I realized they are defining there ownparsing grammar, which seemed kind of reinventing the wheel since I alreadyknew the `ast`_ module. Finally I wrote a very simple Configuration Parser which lets `ast`_ and`operator`_ do most of the work. It has of course its own problems, and is hackof half an hour so don't expect much. For me it is still usefull, and maybe wecan improve it.Usage *******As a simple example of what is possible and how to use the module, see thefollowing config file which is by the way completely valid python::    home = os.getenv('HOME')    aster_root = home+&quot;/data/opt/aster&quot;    project = &quot;bikeframe-test&quot;    version = &quot;testing&quot;    # source directory for all files if relative path    srcdir = &quot;.&quot;    # output directory for all stuff    outdir = &quot;results&quot;    # input mesh file    meshfile = &quot;mesh.med&quot;    logfile = &quot;asterclient.log&quot;    workdir = &quot;/data/tmp&quot;    # define the studies    calculations = [        {&quot;name&quot;:&quot;main&quot;,          &quot;commandfile&quot;: &quot;main.comm&quot;,          &quot;resultfiles&quot;:{                &quot;bikeframe.rmed&quot;:80,                &quot;bikeframe.msh&quot;: 81,                &quot;buckling.rmed&quot;: 82,                &quot;bikeframe.table&quot;: 39,                &quot;bikeframe.resu&quot;: 38,                &quot;buckling.resu&quot;: 37,                },          &quot;inputfiles&quot;:[&quot;parameters.py&quot;],          },        {&quot;name&quot;: &quot;post&quot;,          &quot;commandfile&quot;:&quot;post.comm&quot;,          &quot;poursuite&quot;: &quot;main&quot;,          &quot;resultfiles&quot;:{            &quot;vmises.table&quot;: 40,            &quot;protocol&quot;: &quot;protocol*.rst&quot;,            }          }]Suppose we have this saved as `profile.conf` we could read it like::    import os    from configreader import Config    c = Config(open('profile.conf','r'),namespace={'os.getenv':os.getenv})which would give as all the values specified and evaluated as a python `dict`.If we wouldn't have provided the namespace with `os.getenv` the parsing wouldhave failed since it only allows functions mapped in the namespace, so you havecompletele fine grained possibility on what to allow. As input the `Config` class expects any file like object which is an objectwith a read method.Testing*******There are a few simple test cases in `tests` use best `py.test`_ to run them... _python-config: https://github.com/Inkvi/python-config.. _ast: http://docs.python.org/3.3/library/ast.html.. _operator: http://docs.python.org/3.3/library/operator.html.. _configparser: http://docs.python.org/3.3/library/configparser.html.. _py.test: https://pypi.python.org/pypi/pytest</longdescription>
</pkgmetadata>