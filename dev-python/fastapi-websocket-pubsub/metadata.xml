<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.ibb.co/NV6wmy8/pubsub.png&quot; width=&quot;55%&quot; alt=&quot;pubsub&quot; border=&quot;0&quot;&gt;&lt;/p&gt;## ‚ö°üóûÔ∏è FastAPI Websocket Pub/Sub &lt;a href=&quot;https://github.com/permitio/fastapi_websocket_pubsub/actions?query=workflow%3ATests&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://github.com/permitio/fastapi_websocket_pubsub/workflows/Tests/badge.svg&quot; alt=&quot;Tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/fastapi-websocket-pubsub/&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/fastapi-websocket-pubsub?color=%2331C654&amp;label=PyPi%20package&quot; alt=&quot;Package&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pepy.tech/project/fastapi-websocket-pubsub&quot; target=&quot;_blank&quot;&gt;    &lt;img src=&quot;https://static.pepy.tech/personalized-badge/fastapi-websocket-pubsub?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=blue&amp;left_text=Downloads&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt;A fast and durable Pub/Sub channel over Websockets.The easiest way to create a live publish / subscribe multi-cast over the web.Supports and tested on Python &gt;= 3.7 As seen at &lt;a href=&quot;https://www.youtube.com/watch?v=KP7tPeKhT3o&quot; target=&quot;_blank&quot;&gt;PyCon IL 2021&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=IuMZVWEUvGs&quot; target=&quot;_blank&quot;&gt;EuroPython 2021&lt;/a&gt;## Installation üõ†Ô∏è```pip install fastapi_websocket_pubsub```## IntroThe classic pub/sub pattern made easily accessible and scalable over the web and across your cloud in realtime; while enjoying the benefits of FastAPI (e.g. dependency injection).FastAPI + WebSockets + PubSub ==  ‚ö°üí™ ‚ù§Ô∏è- Subscribe    - Clients subscribe to topics (arbitrary strings) and receive relevant events along with structured data (serialized with Pydantic).        ```python        # Callback to be called upon event being published on server        async def on_event(data):            print(&quot;We got an event! with data- &quot;, data)        # Subscribe for the event         client.subscribe(&quot;my event&quot;, on_event)        ```- Publish     - Directly from server code to connected clients.         ```python        app = FastAPI()         endpoint = PubSubEndpoint()        endpoint.register_route(app, path=&quot;/pubsub&quot;)        endpoint.publish([&quot;my_event_topic&quot;], data=[&quot;my&quot;, &quot;data&quot;, 1])        ```    - From client to client (through the servers)        ```python         async with PubSubClient(server_uri=&quot;ws://localhost/pubsub&quot;) as client:            endpoint.publish([&quot;my_event_topic&quot;], data=[&quot;my&quot;, &quot;data&quot;, 1])        ```        - Across server instances (using [broadcaster](https://pypi.org/project/broadcaster/) and a backend medium (e.g. Redis, Kafka, ...))        - No matter which server a client connects to - it will get the messages it subscribes to        ```python        app = FastAPI()         endpoint = PubSubEndpoint(broadcaster=&quot;postgres://localhost:5432/&quot;)                @app.websocket(&quot;/pubsub&quot;)        async def websocket_rpc_endpoint(websocket: WebSocket):            await endpoint.main_loop(websocket)        ```        see [examples/pubsub_broadcaster_server_example.py](examples/pubsub_broadcaster_server_example.py) for full usage example ## Usage example (server publishing following HTTP trigger):In the code below, a client connects to the server and subscribes to a topic named &quot;triggered&quot;.Aside from PubSub websocket, the server also exposes a regular http route, which triggers publication of the event. ### Server:```pythonimport asyncioimport uvicornfrom fastapi import FastAPIfrom fastapi.routing import APIRouterfrom fastapi_websocket_pubsub import PubSubEndpointapp =  FastAPI()# Init endpointendpoint = PubSubEndpoint()# register the endpoint on the appendpoint.register_route(app, &quot;/pubsub&quot;)# Register a regular HTTP route@app.get(&quot;/trigger&quot;)async def trigger_events():    # Upon request trigger an event    endpoint.publish([&quot;triggered&quot;])```### Client:```pythonfrom fastapi_websocket_pubsub import PubSubClient# Callback to be called upon event being published on serverasync def on_trigger(data):    print(&quot;Trigger URL was accessed&quot;)async with PubSubClient(server_uri=&quot;ws://localhost/pubsub&quot;) as client:    # Subscribe for the event     client.subscribe(&quot;triggered&quot;, on_trigger)```## More Examples- See the [examples](/examples) and [tests](/tests) folders for more server and client examples.- See [fastapi-websocket-rpc depends example](https://github.com/permitio/fastapi_websocket_rpc/blob/master/tests/fast_api_depends_test.py) to see how to combine with FASTAPI dependency injections## What can I do with this?The combination of Websockets, and bi-directional Pub/Sub is  ideal to create realtime data propagation solution at scale over the web.  - Update mechanism - Remote control mechanism - Data processing - Distributed computing - Realtime communications over the web   ## Foundations:- Based on [fastapi-websocket-rpc](https://github.com/permitio/fastapi_websocket_rpc) for a robust realtime bidirectional channel- Based on [broadcaster](https://pypi.org/project/broadcaster/) for syncing server instances- Server Endpoint:    - Based on [FastAPI](https://github.com/tiangolo/fastapi): enjoy all the benefits of a full ASGI platform, including Async-io and dependency injections (for example to authenticate connections)    - Based on [Pydantic](https://pydantic-docs.helpmanual.io/): easily serialize structured data as part of RPC requests and responses. Simply Pass Pydantic data models as PubSub published data to have it available as part of an event. - Client :    - Based on [Tenacity](https://tenacity.readthedocs.io/en/latest/index.html): allowing configurable retries to keep to connection alive        - see WebSocketRpcClient.__init__'s retry_config     - Based on python [websockets](https://websockets.readthedocs.io/en/stable/intro.html) - a more comprehensive client than the one offered by FastAPI## Logging fastapi-websocket-pubsub uses fastapi-websocket-rpc for logging config.It provides a helper logging module to control how it produces logs for you.See [fastapi_websocket_rpc/logger.py](fastapi_websocket_rpc/logger.py).Use ```logging_config.set_mode``` or the 'WS_RPC_LOGGING' environment variable to choose the logging method you prefer.Or override completely via default logging config (e.g. 'logging.config.dictConfig'), all logger name start with: 'fastapi.ws_rpc.pubsub'example:```python# set RPC to log like UVICORNfrom fastapi_websocket_rpc.logger import logging_config, LoggingModeslogging_config.set_mode(LoggingModes.UVICORN)```## Pull requests - welcome!- Please include tests for new features </longdescription>
</pkgmetadata>