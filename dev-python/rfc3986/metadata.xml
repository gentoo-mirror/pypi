<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>rfc3986=======A Python implementation of `RFC 3986`_ including validation and authorityparsing.Installation------------Use pip to install ``rfc3986`` like so::    pip install rfc3986License-------`Apache License Version 2.0`_Example Usage-------------The following are the two most common use cases envisioned for ``rfc3986``.Replacing ``urlparse````````````````````````To parse a URI and receive something very similar to the standard library's``urllib.parse.urlparse``.. code-block:: python    from rfc3986 import urlparse    ssh = urlparse('ssh://user@git.openstack.org:29418/openstack/glance.git')    print(ssh.scheme)  # =&gt; ssh    print(ssh.userinfo)  # =&gt; user    print(ssh.params)  # =&gt; None    print(ssh.port)  # =&gt; 29418To create a copy of it with new pieces you can use ``copy_with``:.. code-block:: python    new_ssh = ssh.copy_with(        scheme='https'        userinfo='',        port=443,        path='/openstack/glance'    )    print(new_ssh.scheme)  # =&gt; https    print(new_ssh.userinfo)  # =&gt; None    # etc.Strictly Parsing a URI and Applying Validation``````````````````````````````````````````````To parse a URI into a convenient named tuple, you can simply:.. code-block:: python    from rfc3986 import uri_reference    example = uri_reference('http://example.com')    email = uri_reference('mailto:user@domain.com')    ssh = uri_reference('ssh://user@git.openstack.org:29418/openstack/keystone.git')With a parsed URI you can access data about the components:.. code-block:: python    print(example.scheme)  # =&gt; http    print(email.path)  # =&gt; user@domain.com    print(ssh.userinfo)  # =&gt; user    print(ssh.host)  # =&gt; git.openstack.org    print(ssh.port)  # =&gt; 29418It can also parse URIs with unicode present:.. code-block:: python    uni = uri_reference(b'http://httpbin.org/get?utf8=\xe2\x98\x83')  # â˜ƒ    print(uni.query)  # utf8=%E2%98%83With a parsed URI you can also validate it:.. code-block:: python    if ssh.is_valid():        subprocess.call(['git', 'clone', ssh.unsplit()])You can also take a parsed URI and normalize it:.. code-block:: python    mangled = uri_reference('hTTp://exAMPLe.COM')    print(mangled.scheme)  # =&gt; hTTp    print(mangled.authority)  # =&gt; exAMPLe.COM    normal = mangled.normalize()    print(normal.scheme)  # =&gt; http    print(mangled.authority)  # =&gt; example.comBut these two URIs are (functionally) equivalent:.. code-block:: python    if normal == mangled:        webbrowser.open(normal.unsplit())Your paths, queries, and fragments are safe with us though:.. code-block:: python    mangled = uri_reference('hTTp://exAMPLe.COM/Some/reallY/biZZare/pAth')    normal = mangled.normalize()    assert normal == 'hTTp://exAMPLe.COM/Some/reallY/biZZare/pAth'    assert normal == 'http://example.com/Some/reallY/biZZare/pAth'    assert normal != 'http://example.com/some/really/bizzare/path'If you do not actually need a real reference object and just want to normalizeyour URI:.. code-block:: python    from rfc3986 import normalize_uri    assert (normalize_uri('hTTp://exAMPLe.COM/Some/reallY/biZZare/pAth') ==            'http://example.com/Some/reallY/biZZare/pAth')You can also very simply validate a URI:.. code-block:: python    from rfc3986 import is_valid_uri    assert is_valid_uri('hTTp://exAMPLe.COM/Some/reallY/biZZare/pAth')Requiring Components~~~~~~~~~~~~~~~~~~~~You can validate that a particular string is a valid URI and requireindependent components:.. code-block:: python    from rfc3986 import is_valid_uri    assert is_valid_uri('http://localhost:8774/v2/resource',                        require_scheme=True,                        require_authority=True,                        require_path=True)    # Assert that a mailto URI is invalid if you require an authority    # component    assert is_valid_uri('mailto:user@example.com', require_authority=True) is FalseIf you have an instance of a ``URIReference``, you can pass the same argumentsto ``URIReference#is_valid``, e.g.,.. code-block:: python    from rfc3986 import uri_reference    http = uri_reference('http://localhost:8774/v2/resource')    assert uri.is_valid(require_scheme=True,                        require_authority=True,                        require_path=True)    # Assert that a mailto URI is invalid if you require an authority    # component    mailto = uri_reference('mailto:user@example.com')    assert uri.is_valid(require_authority=True) is FalseAlternatives------------- `rfc3987 &lt;https://pypi.python.org/pypi/rfc3987/1.3.4&gt;`_  This is a direct competitor to this library, with extra features,  licensed under the GPL.- `uritools &lt;https://pypi.python.org/pypi/uritools/0.5.1&gt;`_  This can parse URIs in the manner of RFC 3986 but provides no validation and  only recently added Python 3 support.- Standard library's `urlparse`/`urllib.parse`  The functions in these libraries can only split a URI (valid or not) and  provide no validation.Contributing------------This project follows and enforces the Python Software Foundation's `Code ofConduct &lt;https://www.python.org/psf/codeofconduct/&gt;`_.If you would like to contribute but do not have a bug or feature in mind, feelfree to email Ian and find out how you can help.The git repository for this project is maintained athttps://github.com/python-hyper/rfc3986.. _RFC 3986: https://datatracker.ietf.org/doc/html/rfc3986/.. _Apache License Version 2.0: https://www.apache.org/licenses/LICENSE-2.0</longdescription>
</pkgmetadata>