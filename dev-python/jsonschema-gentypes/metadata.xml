<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># JSON Schema generate Python typesTools to generate Python types based on TypedDict from a JSON schema## Quick startinstall:```bashpython3 -m pip install --user jsonschema-gentypes```Convert a JSON schema to a Python file contains the types:```bashjsonschema-gentypes --json-schema=&lt;JSON schema&gt; --python=&lt;destination Python file&gt;```## DockerYou can also run it with Docker:```bashdocker run --rm --user=$(id --user) --volume=$(pwd):/src camptocamp/jsonschema-gentypes```## Config fileYou can also write a config file named `jsonschema-gentypes.yaml` with:```yamlheaders: &gt;  # Automatically generated file from a JSON schema# Used to correctly format the generated filecallbacks:  - - black  - - isortgenerate:  - # JSON schema file path    source: jsonschema_gentypes/schema.json    # Python file path    destination: jsonschema_gentypes/configuration.py    # The name of the root element    root_name: Config    # Argument passed to the API    api_arguments:      additional_properties: Only explicit    # Rename an element    name_mapping: {}    # The minimum Python version that the code should support. By default the    # currently executing Python version is chosen. Note that the output    # may require typing_extensions to be installed.    python_version: '3.11'```And just run:```bashjsonschema-gentypes```## DefaultThe default values are exported in the Python file, then you can do something like that:```pythonvalue_with_default = my_object.get('field_name', my_schema.FIELD_DEFAULT)```## ValidationThis package also provide some validations features for YAML file based on `jsonschema`.Additional features:- Obtain the line and columns number in the errors, if the file is loaded with `ruamel.yaml`.- Export the default provided in the JSON schema.```python    import ruamel.yaml    import pkgutil    import jsonschema_gentypes.validate    schema_data = pkgutil.get_data(&quot;jsonschema_gentypes&quot;, &quot;schema.json&quot;)    with open(filename) as data_file:        yaml = ruamel.yaml.YAML()  # type: ignore        data = yaml.load(data_file)    errors, data = jsonschema_gentypes.validate.validate(filename, data, schema)    if errors:        print(&quot;\n&quot;.join(errors))        sys.exit(1)```The filling of the default value is deprecated because it can produce quite peculiar things, see also[the jsonschema documentation](https://python-jsonschema.readthedocs.io/en/stable/faq/#why-doesn-t-my-schema-s-default-property-set-the-default-on-my-instance).## LimitationsRequires Python 3.8See the [issues with label &quot;limitation&quot;](https://github.com/camptocamp/jsonschema-gentypes/issues?q=is%3Aissue+is%3Aopen+label%3Alimitation).## Pre-commit hooksThis project provides pre-commit hooks to automatically generate the files.```yamlrepos:  - repo: https://github.com/camptocamp/jsonschema-gentypes    rev: &lt;version&gt; # Use the ref you want to point at    hools:      - id: jsonschema-gentypes        files: |          (?x)^(              jsonschema-gentypes\.yaml|              &lt;schema_path&gt;\.json          )$```See also the pre_commit section in the configuration to run the pre-commit just after the generation, for example with:```yamlpre_commit:  enabled: true  arguments:    - --color=never```## ContributingInstall the pre-commit hooks:```bashpip install pre-commitpre-commit install --allow-missing-config```The `prospector` tests should pass.The code should be typed.The code should be tested with `pytests`.</longdescription>
</pkgmetadata>