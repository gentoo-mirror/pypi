<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;  &lt;h1 style=&quot;color: #0d47a1; font-size: 3em;&quot;&gt;pymino&lt;/h1&gt;    &lt;p&gt;    &lt;a href=&quot;https://discord.gg/JMJpzpsMNJ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/926853226152755280?color=blueviolet&amp;label=discord%20server&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://libraries.io/github/forevercynical/pymino&quot;&gt;&lt;img src=&quot;https://img.shields.io/librariesio/github/forevercynical/pymino?color=blueviolet&quot; alt=&quot;Libraries.io dependency status for GitHub repo&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/forevercynical/pymino/commits/main&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/forevercynical/pymino?label=last%20updated&amp;color=blueviolet&quot; alt=&quot;GitHub last commit&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://pypi.org/project/pymino/&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/dw/pymino?color=blueviolet&quot; alt=&quot;PyPI - Downloads&quot;&gt;&lt;/a&gt;  &lt;/p&gt;  &lt;p style=&quot;font-size: 1.2em; color: #424242;&quot;&gt;A Python wrapper to communicate with the Amino Apps API.&lt;/p&gt;  &lt;p style=&quot;font-size: 1.2em; color: #424242;&quot;&gt;Easily create a bot for Amino Apps using a modern, easy-to-use library.&lt;/p&gt;  &lt;div style=&quot;border: 3px solid red; padding: 10px; margin: 15px 0;&quot;&gt;    &lt;h3 style=&quot;color: red;&quot;&gt;&lt;strong&gt;WARNING&lt;/strong&gt;&lt;/h3&gt;    &lt;p&gt;&lt;strong&gt;Pymino is a fully reverse-engineered client. By using this client, you may be violating the Amino Apps' Terms of Service. This could lead to your account being suspended or permanently banned. Please use Pymino responsibly and at your own risk.&lt;/strong&gt;&lt;/p&gt;    &lt;p&gt;&lt;strong&gt;Understand that the developers and maintainers of Pymino are not responsible for any actions taken against your account as a result of using this client. Proceed with caution.&lt;/strong&gt;&lt;/p&gt;  &lt;/div&gt;  &lt;p style=&quot;font-size: 1.2em; color: #424242;&quot;&gt;If you have any questions or need help, feel free to join the Discord server.&lt;/p&gt;    &lt;a href=&quot;https://discord.gg/JMJpzpsMNJ&quot;&gt;    &lt;img src=&quot;https://cdn.discordapp.com/attachments/965797874791223317/1081754594977267833/discord-button.png&quot; alt=&quot;Join Our Discord Server&quot; width=&quot;150&quot; height=&quot;50&quot;&gt;  &lt;/a&gt;    &lt;h2 style=&quot;color: #0d47a1; font-size: 2em;&quot;&gt;Installation&lt;/h2&gt;    &lt;p style=&quot;font-size: 1.2em; color: #424242;&quot;&gt;Recommended installation method is through pip:&lt;/p&gt;    &lt;pre style=&quot;background-color: #f5f5f5; padding: 10px;&quot;&gt;&lt;code style=&quot;color: #f44336;&quot;&gt;pip install pymino&lt;/code&gt;&lt;/pre&gt;    &lt;p style=&quot;font-size: 1.2em; color: #424242;&quot;&gt;Alternatively, you can clone the repository and install it manually:&lt;/p&gt;    &lt;pre style=&quot;background-color: #f5f5f5; padding: 10px;&quot;&gt;&lt;code style=&quot;color: #f44336;&quot;&gt;git clone https://github.com/forevercynical/pymino.git  cd pymino  python setup.py install&lt;/code&gt;&lt;/pre&gt;    &lt;p style=&quot;font-size: 1.2em; color: #424242;&quot;&gt;For more detailed documentation and usage examples, check out the project's &lt;a href=&quot;https://pymino.info/index.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;  &lt;h2 align=&quot;center&quot;&gt;Client Class Usage&lt;/h2&gt;  &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&gt;&gt;&gt; from pymino import Client&gt;&gt;&gt; # Initialize the client&gt;&gt;&gt; client = Client() # You can set proxies and device_id here&gt;&gt;&gt; # You need to login to utilize most functions.&gt;&gt;&gt; client.login(&quot;email&quot;, &quot;password&quot;) or client.login(&quot;sid&quot;)&gt;&gt;&gt; print(f&quot;Logged in as {client.profile.username}&quot;)&gt;&gt;&gt; # We can either set community_id by link or by comId.&gt;&gt;&gt; client.fetch_community_id(community_link=&quot;https://aminoapps.com/c/OnePiece&quot;)&gt;&gt;&gt; # Or&gt;&gt;&gt; client.set_community_id(community_id=123)&gt;&gt;&gt; # To access community functions we utilize the community property.&gt;&gt;&gt; client.community.send_message(...     chatId=000000-0000-0000-000000,...     content=&quot;Hello world!&quot;... )&gt;&gt;&gt; # This will utilize the community id we set earlier.&gt;&gt;&gt; # We can also set the community id in the function call itself.&gt;&gt;&gt; client.community.send_message(...     chatId=000000-0000-0000-000000,...     content=&quot;Hello world!&quot;,...     comId=123... )  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;  &lt;h2 align=&quot;center&quot;&gt;Bot Class Usage&lt;/h2&gt;  &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&gt;&gt;&gt; from pymino import Bot&gt;&gt;&gt; from pymino.ext import *&gt;&gt;&gt; # Initialize the bot&gt;&gt;&gt; bot = Bot(...     command_prefix=&quot;!&quot;,...     community_id=00000000,...     console_enabled=True,...     device_id=None,...     intents=True,...     online_status=True,...     proxy=&quot;http://127.0.0.1:8080&quot; # Must be a string.... ) &gt;&gt;&gt; # The on_ready event is called when the bot has logged in.&gt;&gt;&gt; @bot.on_ready()... def ready():...     print(f&quot;{bot.profile.username} has logged in!&quot;)&gt;&gt;&gt; # The on_text_message event is called when a message is received.&gt;&gt;&gt; @bot.on_text_message()... def message(ctx: Context, member: Member, message: str):...     print(f&quot;{member.username}: {message}&quot;)...     if message.startswith(&quot;hi&quot;):...         ctx.reply(&quot;Hello!&quot;)&gt;&gt;&gt; # The on_member_join event is called when a member joins a chat.&gt;&gt;&gt; @bot.on_member_join()... def join(ctx: Context, member: Member):...     ctx.reply(f&quot;Welcome to the chat, {member.username}!&quot;)&gt;&gt;&gt; # The on_member_leave event is called when a member leaves a chat.&gt;&gt;&gt; @bot.on_member_leave()... def leave(ctx: Context):...     ctx.reply(f&quot;Goodbye!&quot;)&gt;&gt;&gt; # This is how you create a command.&gt;&gt;&gt; @bot.command(...     name=&quot;ping&quot;, # Set the name of the command....     description=&quot;This will reply with Pong!&quot;, # Set the description of the command....     aliases=[&quot;p&quot;], # Set the aliases of the command. This will allow !p to be used as !ping....     cooldown=0 # Set the cooldown of the command. This will prevent the command from being used for &lt;cooldown&gt; seconds.... )... def ping(ctx: Context): # The context is passed to the function....     ctx.reply(&quot;Pong!&quot;) # This will reply to the message with &quot;Pong!&quot;&gt;&gt;&gt; @bot.command(&quot;say&quot;)... def say(ctx: Context, message: str): # message will be the content message after the command....     ctx.reply(message) # This will reply to the message with the message argument.&gt;&gt;&gt; @bot.task(interval=10) # This will run any task every 10 seconds.... def task(): # This will not use community functions....     print(&quot;This is a task! It will run every 10 seconds!&quot;)&gt;&gt;&gt; @bot.task(interval=30)... def task(community: Community):...     [...] # Do something in the community...     community.send_message(chatId, &quot;Hello world!&quot;)...     print(&quot;This is a community task! It will run every 30 seconds.&quot;)&gt;&gt;&gt; @bot.on_error()... def error(error: Exception): # This will be called when an error occurs....     print(f&quot;An error has occurred: {error}&quot;)&gt;&gt;&gt; bot.run(&quot;email&quot;, &quot;password&quot;) or bot.run(&quot;sid&quot;) # You can login with email and password or sid.  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</longdescription>
</pkgmetadata>