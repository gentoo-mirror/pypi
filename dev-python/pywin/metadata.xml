<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pywin=====**pywin** is a lightweight python 2.5-3.3 launcher and switcher forWindows command line and MSYS/MINGW32. It's similar to the `py.exelauncher/switcher available in python3.3 &lt;http://docs.python.org/3/using/windows.html#launcher&gt;`__, butwritten with basic Windows batch scripts and a shell script forMSYS/MINGW32 support. I use bash and command line shell tools from`msysgit &lt;http://msysgit.github.com/&gt;`__, based on MSYS/MINGW32, to domost of my python development on Windows.**pywin** supports several useful features defined in `PEP397 &lt;http://www.python.org/dev/peps/pep-0397/&gt;`__, such as command lineconventions and hash bang #! python version headers in source files.While pywin lacks some of py.exe's features, it has the basics and a fewextras of its own.Requirements-------------  Windows &gt;= XP for command prompt support-  Windows &gt;= Vista for MSYS/MINGW support (requires ``mklink`` for   symbolic links)-  At least one installation of python 2.5 up to 3.3 (though it's not   useful without at least two)-  easy\_install, pip, or gitInstallation-------------  Make sure the main python installation you want pywin to live under   is in the PATH.-  With multiple python installations, it's recommended to have only the   main and Scripts directories from one installation in your PATH. For   example, ``C:\Python27;C:\Python27\Scripts``.easy\_install~~~~~~~~~~~~~.. code:: sh    easy_install pywinpip~~~.. code:: sh    pip install pywinfrom source~~~~~~~~~~~.. code:: sh    git clone git://github.com/davidmarble/pywin.git    cd pywin    python setup.py installGetting Started---------------.. code:: sh    # Assuming pywin was installed with Python27    C:\&gt;pyassoc        HKEY_CURRENT_USER\Software\Classes python keys created successfully.        .py files will launch with &quot;C:\Python27\pywin.bat&quot;    C:\&gt;pywin genlaunchers        Generating launchers...        C:\Python27\python2.7.bat -&gt; C:\Python27\python.exe        C:\Python27\python2.6.bat -&gt; C:\Python26\python.exe        C:\Python27\python2.5.bat -&gt; C:\Python25\python.exe        C:\Python27\python3.0.bat -&gt; C:\Python30\python.exe        C:\Python27\python3.1.bat -&gt; C:\Python31\python.exe        C:\Python27\python3.2.bat -&gt; C:\Python32\python.exe        C:\Python27\python3.3.bat -&gt; C:\Python33\python.exe    C:\&gt;pywin               # launch first python found in PATH    C:\&gt;pywin -2.7          # launch python 2.7    C:\&gt;pywin setdefault 3.3        Setting default python for active session to: 3.3        C:\Python33;C:\Python33\Scripts -- now at front of PATH    # Create a test file with a specified python version in the header    C:\&gt;echo #! /usr/bin/python2.7 &gt; test.py    C:\&gt;echo import sys;print(&quot;\n  %s&quot;%sys.exec_prefix) &gt;&gt; test.py    C:\&gt;test.py            C:\Python27    C:\&gt;pywin -3.2 test.py  # launch test.py with python 3.2      C:\Python32Overview--------**pywin** and its associated scripts are installed in the main directoryof the active python version (e.g. C:27). There's no need to install itunder more than one version of python (if you do, you'll have to run``pywin genlaunchers`` for each version you install it under). Make surethat this main python directory is always on the path. Alternatively youcan move the included scripts to another directory in your path.Auto-generate version-specific launchers~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**pywin** can create individual launch scripts to directly access corepython installations (e.g. python2.7). These can be called directly withor without arguments from the Windows command prompt and MSYS/MINGW bashprompt. To use this feature, call.. code:: sh    pywin genlaunchersLaunchers are created for all machine-wide and user-specific pythoninstallations found in the Windows registry. Windows batch files will beadded to the directory where **pywin** is located. MSYS/MINGW32 relieson Windows links created programmatically with ``mklink``, which is whyyou must have Windows &gt;= Vista installed to make use of this project.Launch a specific python version using pywin~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: sh    pywin -2.7  # launch python 2.7    pywin -3.2 test.py  # launch test.py with python 3.2Automatically invoke the right python with a script header~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Add a directive to the first or second line of a source file to have thecorrect interpreter called. Currently this only supports pythonlaunchers created by the ``pywin genlaunchers`` command. To use thisfeature, you must associate the .py extension with pywin.bat using theincluded ``pyassoc`` utility... code:: sh    pyassocpywin-----**NOTE:** ``pywin`` commands work from both Windows command line andMSYS/MINGW32 shell.genlaunchers~~~~~~~~~~~~.. code:: sh    pywin genlaunchersSearch for python installations and create batch files in the samedirectory where pywin is installed.Note if you're using MSYS/MINGW32 this must be run again in theMSYS/MINGW32 shell, and you must have Windows &gt;= Vista.setdefault~~~~~~~~~~.. code:: sh    pywin setdefault &lt;version&gt;Set the default python to ``&lt;major&gt;.&lt;minor&gt;`` version. Adds the rightpython home directory and its associated Scripts directory to the frontof PATH. Removes any other existing reference to a python Scriptsdirectory in PATH.Example.. code:: sh    # Existing PATH: C:\Windows\System32;C:\Windows;C:\Python27;C:\Python27\Scripts    pywin setdefault 3.3    # New PATH: C:\Python33;C:\Python33\Scripts;C:\Windows\System32;C:\Windows;C:\Python27;    # C:\Python27 is preserved so that pywin can be found.``pywin setdefault`` is only active for the current cmd.exe (orMSYS/MINGW32 shell) session. If you want to change thedefault python permanently, you need to change your system or userPATH and make sure pywin is installed for that python version.When calling this from MSYS/MINGW32, enter a dot first so the changes to$PATH propagate to your active shell. E.g. ``. pywin setdefault 3.3``launch with version and/or source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: sh    pywin [-&lt;version&gt;] [&lt;source file&gt;]Launch either a specific ``&lt;major&gt;.&lt;minor&gt;`` version of python, or asource file, or both. Note that specifying a version of python on thecommand line will override any version in the header of the source file.Example.. code:: sh    # launch python 2.7    pywin -2.7    # launch test.py with python 3.2    pywin -3.2 test.py    # launch test.py according to Version Search Order below    pywin test.pyVersion Search Order~~~~~~~~~~~~~~~~~~~~**pywin** will launch the first version of python found among:1. Any version specified after a #! in the first 2 lines of the source.   The interpreter will be invoked with any additional parameters.   examples:   ::       #! python3.3       #! /usr/bin/python2.7 -v2. If the environment variable ``VIRTUAL_ENV`` is set, use that   virtualenv's ``python.exe``.3. If the environment variable ``PYTHONHOME`` is set, use its   ``python.exe``.4. If none of the above, fall back to the first ``python.exe`` found on   the path.pyassoc-------.. code:: sh    pyassoc [original] [all_users]With no arguments, ``pyassoc`` will register the .py extension to runwith ``%pyhome%\pywin.bat``. This change is made in the registry to``HKEY_CURRENT_USER``, so that when .py files are invoked, anymachine-wide setting is overridden.Note that registry settings have no effect on launch .py files underMSYS/MINGW32.Parameters~~~~~~~~~~-  **original** - restore .py registry settings to launch with   ``%pyhome%\python.exe``-  **all\_users** - if administrator, apply changes to   ``HKEY_LOCAL_MACHINE`` and remove any ``HKEY_CURRENT_USER`` python   keys. Note that users can override this with their own   ``HKEY_CURRENT_USER`` values.%pyhome%~~~~~~~~The variable ``%pyhome%`` used by ``pyassoc`` is set in this manner:1. If the environment variable ``PYTHONHOME`` is set, use it.2. If the environment variable ``DEFAULTPYTHON`` is set, use it. This is   set when you call ``pywin setdefault &lt;version&gt;``, but only lasts for   the current session.3. The path the ``pyassoc.bat`` script is in.</longdescription>
</pkgmetadata>