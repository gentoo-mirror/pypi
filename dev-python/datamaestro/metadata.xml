<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/datamaestro.svg)](https://badge.fury.io/py/datamaestro) [![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit) [![DOI](https://zenodo.org/badge/4573876.svg)](https://zenodo.org/badge/latestdoi/4573876)# IntroductionFull documentation can be found at http://datamaestro.rtfd.ioThis projects aims at grouping utilities to deal with the numerous and heterogenous datasets present on the Web. It aimsat being1. a reference for available resources, listing datasets1. a tool to automatically download and process resources (when freely available)1. integration with the [experimaestro](http://experimaestro-python.rtfd.io/) experiment manager.1. (planned) a tool that allows to copy data from one computer to anotherEach datasets is uniquely identified by a qualified name such as `com.lecun.mnist`, which is usually the inversed path to the domain name of the website associated with the dataset.The main repository only deals with very generic processing (downloading, basic pre-processing and data types). Plugins can then be registered that provide access to domain specific datasets.## List of repositories- [Information Retrieval](https://github.com/bpiwowar/experimaestro-ir) [![PyPI version](https://badge.fury.io/py/experimaestro-ir.svg)](https://badge.fury.io/py/experimaestro-ir)- [NLP and information access related dataset](https://github.com/experimaestro/datamaestro_text) [![PyPI version](https://badge.fury.io/py/datamaestro-text.svg)](https://badge.fury.io/py/datamaestro-text) \  Natural Language Processing (e.g. Sentiment101) and Information access (e.g. TREC) datasets- [image-related dataset](https://github.com/experimaestro/datamaestro_image) [![PyPI version](https://badge.fury.io/py/datamaestro-image.svg)](https://badge.fury.io/py/datamaestro-image)  Image related datasets (e.g. MNIST)- [machine learning](https://github.com/experimaestro/datamaestro_ml) [![PyPI version](https://badge.fury.io/py/datamaestro-ml.svg)](https://badge.fury.io/py/datamaestro-ml)\ Generic machine learning datasets# Command line interface (CLI)The command line interface allows to interact with the datasets. The commands are listed below, help can be found by typing `datamaestro COMMAND --help`:- `search` search dataset by name, tags and/or tasks- `download` download files (if accessible on Internet) or ask for download path otherwise- `prepare` download dataset files and outputs a JSON containing path and other dataset information- `repositories` list the available repositories- `orphans` list data directories that do no correspond to any registered dataset (and allows to clean them up)- `create-dataset` creates a dataset definition# Example (CLI)## Retrieve and downloadThe commmand line interface allows to download automatically the different resources. Datamaestro extensions can provide additional processing tools.```bash$ datamaestro search tag:image[image] com.lecun.mnist$ datamaestro prepare com.lecun.mnistINFO:root:Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz into /home/bpiwowar/datamaestro/data/image/com/lecun/mnist/t10k-labels-idx1-ubyteINFO:root:Transforming fileINFO:root:Created file /home/bpiwowar/datamaestro/data/image/com/lecun/mnist/t10k-labels-idx1-ubyteINFO:root:Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz into /home/bpiwowar/datamaestro/data/image/com/lecun/mnist/t10k-images-idx3-ubyteINFO:root:Transforming fileINFO:root:Created file /home/bpiwowar/datamaestro/data/image/com/lecun/mnist/t10k-images-idx3-ubyteINFO:root:Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz into /home/bpiwowar/datamaestro/data/image/com/lecun/mnist/train-labels-idx1-ubyteINFO:root:Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gzDownloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz: 32.8kB [00:00, 92.1kB/s]                                                            INFO:root:Transforming fileINFO:root:Created file /home/bpiwowar/datamaestro/data/image/com/lecun/mnist/train-labels-idx1-ubyteINFO:root:Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz into /home/bpiwowar/datamaestro/data/image/com/lecun/mnist/train-images-idx3-ubyteINFO:root:Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gzDownloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz: 9.92MB [00:00, 10.6MB/s]INFO:root:Transforming fileINFO:root:Created file /home/bpiwowar/datamaestro/data/image/com/lecun/mnist/train-images-idx3-ubyte...JSON...```The previous command also returns a JSON on standard output```json{  &quot;train&quot;: {    &quot;images&quot;: {      &quot;path&quot;: &quot;.../data/image/com/lecun/mnist/train_images.idx&quot;    },    &quot;labels&quot;: {      &quot;path&quot;: &quot;.../data/image/com/lecun/mnist/train_labels.idx&quot;    }  },  &quot;test&quot;: {    &quot;images&quot;: {      &quot;path&quot;: &quot;.../data/image/com/lecun/mnist/test_images.idx&quot;    },    &quot;labels&quot;: {      &quot;path&quot;: &quot;.../data/image/com/lecun/mnist/test_labels.idx&quot;    }  },  &quot;id&quot;: &quot;com.lecun.mnist&quot;}```For those using Python, this is even better since the IDX format is supported```pythonIn [1]: from datamaestro import prepare_datasetIn [2]: ds = prepare_dataset(&quot;com.lecun.mnist&quot;)In [3]: ds.train.images.data().dtype, ds.train.images.data().shapeOut[3]: (dtype('uint8'), (60000, 28, 28))```## Python definition of datasetsEach dataset (or a set of related datasets) is described in Python using a mix of declarativeand imperative statements. This allows to quickly define how to download dataset using thedatamaestro declarative API; the imperative part is used when creating the JSON output,and is integrated with [experimaestro](http://experimaestro.github.io/experimaestro-python).Its syntax is described in the [documentation](https://datamaestro.readthedocs.io).For MNIST, this corresponds to.```pythonfrom datamaestro_image.data import ImageClassification, LabelledImages, Base, IDXImagefrom datamaestro.download.single import filedownloaderfrom datamaestro.definitions import  argument, datatasks, datatags, datasetfrom datamaestro.data.tensor import IDX@filedownloader(&quot;train_images.idx&quot;, &quot;http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz&quot;)@filedownloader(&quot;train_labels.idx&quot;, &quot;http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz&quot;)@filedownloader(&quot;test_images.idx&quot;, &quot;http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz&quot;)@filedownloader(&quot;test_labels.idx&quot;, &quot;http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz&quot;)@dataset(  ImageClassification,  url=&quot;http://yann.lecun.com/exdb/mnist/&quot;,)def MNIST(train_images, train_labels, test_images, test_labels):  &quot;&quot;&quot;The MNIST database  The MNIST database of handwritten digits, available from this page, has a  training set of 60,000 examples, and a test set of 10,000 examples. It is a  subset of a larger set available from NIST. The digits have been  size-normalized and centered in a fixed-size image.  &quot;&quot;&quot;  return {    &quot;train&quot;: LabelledImages(      images=IDXImage(path=train_images),      labels=IDX(path=train_labels)    ),    &quot;test&quot;: LabelledImages(      images=IDXImage(path=test_images),      labels=IDX(path=test_labels)    ),  }```# 0.8.0- Integration with other repositories: abstracting away the notion of dataset- Repository prefix- Set sub-datasets IDs automatically# 0.7.3- Updates for new experimaestro (0.8.5)- Search types with &quot;type:...&quot;# 0.6.17- Allow remote access through rpyc# 0.6.9`version` command</longdescription>
</pkgmetadata>