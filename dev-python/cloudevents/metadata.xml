<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python SDK for [CloudEvents](https://github.com/cloudevents/spec)[![PyPI version](https://badge.fury.io/py/cloudevents.svg)](https://badge.fury.io/py/cloudevents)## StatusThis SDK is still considered a work in progress, therefore things might (andwill) break with every update.This SDK current supports the following versions of CloudEvents:- v1.0- v0.3## Python SDKPackage **cloudevents** provides primitives to work with CloudEvents specification:https://github.com/cloudevents/spec.### InstallingThe CloudEvents SDK can be installed with pip:```pip install cloudevents```## Sending CloudEventsBelow we will provide samples on how to send cloudevents using the popular[`requests`](http://docs.python-requests.org) library.### Binary HTTP CloudEvent```pythonfrom cloudevents.http import CloudEventfrom cloudevents.conversion import to_binaryimport requests# Create a CloudEvent# - The CloudEvent &quot;id&quot; is generated if omitted. &quot;specversion&quot; defaults to &quot;1.0&quot;.attributes = {    &quot;type&quot;: &quot;com.example.sampletype1&quot;,    &quot;source&quot;: &quot;https://example.com/event-producer&quot;,}data = {&quot;message&quot;: &quot;Hello World!&quot;}event = CloudEvent(attributes, data)# Creates the HTTP request representation of the CloudEvent in binary content modeheaders, body = to_binary(event)# POSTrequests.post(&quot;&lt;some-url&gt;&quot;, data=body, headers=headers)```### Structured HTTP CloudEvent```pythonfrom cloudevents.conversion import to_structuredfrom cloudevents.http import CloudEventimport requests# Create a CloudEvent# - The CloudEvent &quot;id&quot; is generated if omitted. &quot;specversion&quot; defaults to &quot;1.0&quot;.attributes = {    &quot;type&quot;: &quot;com.example.sampletype2&quot;,    &quot;source&quot;: &quot;https://example.com/event-producer&quot;,}data = {&quot;message&quot;: &quot;Hello World!&quot;}event = CloudEvent(attributes, data)# Creates the HTTP request representation of the CloudEvent in structured content modeheaders, body = to_structured(event)# POSTrequests.post(&quot;&lt;some-url&gt;&quot;, data=body, headers=headers)```You can find a complete example of turning a CloudEvent into a HTTP request[in the samples' directory](samples/http-json-cloudevents/client.py).## Receiving CloudEventsThe code below shows how to consume a cloudevent using the popular python web framework[flask](https://flask.palletsprojects.com/en/2.2.x/quickstart/):```pythonfrom flask import Flask, requestfrom cloudevents.http import from_httpapp = Flask(__name__)# create an endpoint at http://localhost:/3000/@app.route(&quot;/&quot;, methods=[&quot;POST&quot;])def home():    # create a CloudEvent    event = from_http(request.headers, request.get_data())    # you can access cloudevent fields as seen below    print(        f&quot;Found {event['id']} from {event['source']} with type &quot;        f&quot;{event['type']} and specversion {event['specversion']}&quot;    )    return &quot;&quot;, 204if __name__ == &quot;__main__&quot;:    app.run(port=3000)```You can find a complete example of turning a CloudEvent into a HTTP request[in the samples' directory](samples/http-json-cloudevents/json_sample_server.py).## SDK versioningThe goal of this package is to provide support for all released versions of CloudEvents,ideally while maintaining the same API. It will use semantic versioningwith following rules:- MAJOR version increments when backwards incompatible changes is introduced.- MINOR version increments when backwards compatible feature is introduced  INCLUDING support for new CloudEvents version.- PATCH version increments when a backwards compatible bug fix is introduced.## Community- There are bi-weekly calls immediately following the [Serverless/CloudEvents  call](https://github.com/cloudevents/spec#meeting-time) at  9am PT (US Pacific). Which means they will typically start at 10am PT, but  if the other call ends early then the SDK call will start early as well.  See the [CloudEvents meeting minutes](https://docs.google.com/document/d/1OVF68rpuPK5shIHILK9JOqlZBbfe91RNzQ7u_P7YCDE/edit#)  to determine which week will have the call.- Slack: #cloudeventssdk channel under  [CNCF's Slack workspace](https://slack.cncf.io/).- Email: https://lists.cncf.io/g/cncf-cloudevents-sdk- Contact for additional information: Denis Makogon (`@denysmakogon` on slack).Each SDK may have its own unique processes, tooling and guidelines, commongovernance related material can be found in the[CloudEvents `docs`](https://github.com/cloudevents/spec/tree/main/docs)directory. In particular, in there you will find information concerninghow SDK projects are[managed](https://github.com/cloudevents/spec/blob/main/docs/GOVERNANCE.md),[guidelines](https://github.com/cloudevents/spec/blob/main/docs/SDK-maintainer-guidelines.md)for how PR reviews and approval, and our[Code of Conduct](https://github.com/cloudevents/spec/blob/main/docs/GOVERNANCE.md#additional-information)information.## MaintenanceWe use [black][black] and [isort][isort] for autoformatting. We set up a [tox][tox]environment to reformat the codebase.e.g.```bashpip install toxtox -e reformat```For information on releasing version bumps see [RELEASING.md](RELEASING.md)[black]: https://black.readthedocs.io/[isort]: https://pycqa.github.io/isort/[tox]: https://tox.wiki/</longdescription>
</pkgmetadata>