<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Roboflow Python---![roboflow logo](https://media.roboflow.com/homepage/cv_pipeline_compact.png?updatedAt=1679939317160)  &lt;div align=&quot;center&quot;&gt;      &lt;a href=&quot;https://youtube.com/roboflow&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/youtube.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949634652&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://roboflow.com&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/roboflow-app.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949746649&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://www.linkedin.com/company/roboflow-ai/&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/linkedin.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949633691&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://docs.roboflow.com&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/knowledge.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949634511&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://disuss.roboflow.com&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/forum.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949633584&quot;            width=&quot;3%&quot;          /&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/ultralytics/assets/main/social/logo-transparent.png&quot; width=&quot;3%&quot;/&gt;      &lt;a href=&quot;https://blog.roboflow.com&quot;&gt;          &lt;img            src=&quot;https://media.roboflow.com/notebooks/template/icons/purple/blog.png?ik-sdk-version=javascript-1.4.3&amp;updatedAt=1672949633605&quot;            width=&quot;3%&quot;          /&gt;      &lt;/a&gt;      &lt;/a&gt;  &lt;/div&gt;  &lt;br&gt;**Roboflow** streamlines your computer vision pipeline - upload data, label it, download datasets, train models, deploy models, and repeat.The **Roboflow Python Package** is a python wrapper around the core Roboflow web application and REST API.We also maintain an open source set of CV utililities and notebook tutorials in Python:* :fire: https://github.com/roboflow/supervision :fire:* :fire: https://github.com/roboflow/notebooks :fire:## InstallationTo install this package, please use `Python 3.6` or higher.Install from PyPi (Recommended):```bashpip install roboflow```Install from Source:```bashgit clone https://github.com/roboflow-ai/roboflow-python.gitcd roboflow-pythonpython3 -m venv envsource env/bin/activatepip3 install -r requirements.txt```## Authentication```pythonimport roboflowroboflow.login()```## Quickstart### DatasetsDownload any of over 200,000 public computer vision datasets from [Roboflow Universe](universe.roboflow.com). Label and download your own datasets on app.roboflow.com.```pythonimport roboflowdataset = roboflow.download_dataset(dataset_url=&quot;universe.roboflow.com/...&quot;, model_format=&quot;yolov8&quot;)#ex. dataset = roboflow.download_dataset(dataset_url=&quot;https://universe.roboflow.com/joseph-nelson/bccd/dataset/1&quot;, model_format=&quot;yolov8&quot;)print(dataset.location)```### ModelsPredict with any of over 50,000 public computer vision models. Train your own computer vision models on app.roboflow.com or train upload your model from open source models - see https://github.com/roboflow/notebooks```pythonimg_url = &quot;https://media.roboflow.com/quickstart/aerial_drone.jpeg?updatedAt=1678743716455&quot;universe_model_url = &quot;https://universe.roboflow.com/brad-dwyer/aerial-solar-panels/model/6&quot;model = roboflow.load_model(model_url=universe_model_url)pred = model.predict(img_url, hosted=True)pred.plot()```## Library StructureThe Roboflow python library is structured by the core Roboflow application objects.Workspace (workspace.py) --&gt; Project (project.py) --&gt; Version (version.py)```pythonfrom roboflow import Roboflowrf = Roboflow()workspace = rf.workspace(&quot;WORKSPACE_URL&quot;)project = workspace.project(&quot;PROJECT_URL&quot;)version = project.version(&quot;VERSION_NUMBER&quot;)```The workspace, project, and version parameters are the same that you will find in the URL addresses at app.roboflow.com and universe.roboflow.com.Within the workspace object you can perform actions like making a new project, listing your projects, or performing active learning where you are using predictions from one project's model to upload images to a new project.Within the project object, you can retrieve metadata about the project, list versions, generate a new dataset version with preprocessing and augmentation settings, train a model in your project, and upload images and annotations to your project.Within the version object, you can download the dataset version in any model format, train the version on Roboflow, and deploy your own external model to Roboflow.## ContributingIf you want to extend our Python library or if you find a bug, please open a PR!Also be sure to test your code the `unittest` command at the `/root` level directory.Run tests:```bashpython -m unittest```When creating new functions, please follow the [Google style Python docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html). See example below:```pythondef example_function(param1: int, param2: str) -&gt; bool:    &quot;&quot;&quot;Example function that does something.    Args:        param1: The first parameter.        param2: The second parameter.    Returns:        The return value. True for success, False otherwise.    &quot;&quot;&quot;```We provide a `Makefile` to format and ensure code quality. **Be sure to run them before creating a PR**.```bash# format code with `black` and `isort`make style# check code with flake8make check_code_quality```**Note** These tests will be run automatically when you commit thanks to git hooks.</longdescription>
</pkgmetadata>