<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub license](https://img.shields.io/github/license/materialsvirtuallab/matgl)](https://github.com/materialsvirtuallab/matgl/blob/main/LICENSE)[![Linting](https://github.com/materialsvirtuallab/matgl/workflows/Linting/badge.svg)](https://github.com/materialsvirtuallab/matgl/workflows/Linting/badge.svg)[![Testing](https://github.com/materialsvirtuallab/matgl/actions/workflows/testing.yml/badge.svg)](https://github.com/materialsvirtuallab/matgl/actions/workflows/testing.yml)[![Downloads](https://static.pepy.tech/badge/matgl)](https://pepy.tech/project/matgl)[![codecov](https://codecov.io/gh/materialsvirtuallab/matgl/branch/main/graph/badge.svg?token=3V3O79GODQ)](https://codecov.io/gh/materialsvirtuallab/matgl)# Materials Graph Library &lt;img src=&quot;https://github.com/materialsvirtuallab/matgl/blob/main/assets/MatGL.png?raw=true&quot; alt=&quot;matgl&quot; width=&quot;30%&quot; style=&quot;float: right&quot;&gt;## Official Documentation [:books:]&lt;https://matgl.ai&gt;## IntroductionMatGL (Materials Graph Library) is a graph deep learning library for materials science. Mathematical graphs are anatural representation for a collection of atoms. Graph deep learning models have been shown to consistently deliverexceptional performance as surrogate models for the prediction of materials properties.MatGL is built on the [Deep Graph Library (DGL)][dgl] and PyTorch, with suitable adaptations for materials-specificapplications. The goal is for MatGL to serve as an extensible platform to develop and share materials graph deeplearning models. For the initial release, we have re-implemented the [MatErials 3-body Graph Network (M3GNet)][m3gnet] and its predecessor, [MEGNet][megnet], which were originally implemented in Tensorflow, to improve theusability, extensibility and scalability of these models. Here are some key improvements over the TF implementations:- A more intuitive API and class structure based on DGL.- Multi-GPU support via PyTorch Lightning.This effort is a collaboration between the [Materials Virtual Lab][mavrl] and Intel Labs (Santiago Miret, MarcelNassar, Carmelo Gonzales).## StatusMajor milestones are summarized below. Please refer to the [changelog] for details.- v0.5.1 (Jun 9 2023): Model versioning implemented.- v0.5.0 (Jun 8 2023): Simplified saving and loading of models. Now models can be loaded with one line of code!- v0.4.0 (Jun 7 2023): Near feature parity with original TF implementations. Re-trained M3Gnet universal potential now  available.- v0.1.0 (Feb 16 2023): Initial implementations of M3GNet and MEGNet architectures have been completed. Expect  bugs!## Current ArchitecturesHere, we summarize the currently implemented architectures in MatGL. It should be stressed that this is by no meansan exhaustive list, and we expect new architectures to be added by the core MatGL team as well as other contributorsin future.&lt;div style=&quot;float: left; padding: 10px; width: 300px&quot;&gt;&lt;img src=&quot;https://github.com/materialsvirtuallab/matgl/blob/main/assets/MxGNet.png?raw=true&quot; alt=&quot;m3gnet_schematic&quot;&gt;&lt;p&gt;Figure: Schematic of M3GNet/MEGNet&lt;/p&gt;&lt;/div&gt;### MEGNet[MatErials Graph Network (MEGNet)][megnet] is an implementation of DeepMind's [graph networks][graphnetwork] formachine learning in materials science. We have demonstrated its success in achieving low prediction errors in a broadarray of properties in both [molecules and crystals][megnet]. New releases have included our recent work on[multi-fidelity materials property modeling][mfimegnet]. Figure 1 shows the sequential update steps of the graphnetwork, whereby bonds, atoms, and global state attributes are updated using information from each other, generating an output graph.### M3GNet[Materials 3-body Graph Network (M3GNet)][m3gnet] is a new materials graph neural network architecture thatincorporates 3-body interactions in MEGNet. An additional difference is the addition of the coordinates for atoms andthe 3×3 lattice matrix in crystals, which are necessary for obtaining tensorial quantities such as forces andstresses via auto-differentiation. As a framework, M3GNet has diverse applications, including:- **Interatomic potential development.** With the same training data, M3GNet performs similarly to state-of-the-art  machine learning interatomic potentials (MLIPs). However, a key feature of a graph representation is its  flexibility to scale to diverse chemical spaces. One of the key accomplishments of M3GNet is the development of a  [*universal IP*][m3gnet] that can work across the entire periodic table of the elements by training on relaxations  performed in the [Materials Project][mp].- **Surrogate models for property predictions.** Like the previous MEGNet architecture, M3GNet can be used to develop  surrogate models for property predictions, achieving in many cases accuracies that are better or similar to other  state-of-the-art ML models.For detailed performance benchmarks, please refer to the publications in the [References](#references) section.## InstallationMatgl can be installed via pip for the latest stable version:```bashpip install matgl```For the latest dev version, please clone this repo and install using:```bashpip install -e .```### CUDA (GPU) installationIf you intend to use CUDA (GPU) to speed up training, it is important to install the appropriate versions of PyTorchand DGL. The basic instructions are given below, but it is recommended that you consult the[PyTorch docs](https://pytorch.org/get-started/locally/) and [DGL docs](https://www.dgl.ai/pages/start.html) if yourun into any problems.```shellpip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118pip install dgl -f https://data.dgl.ai/wheels/cu118/repo.htmlpip install dglgo -f https://data.dgl.ai/wheels-test/repo.html```## UsagePre-trained M3GNet universal potential and MEGNet models for the Materials Project formation energy andmulti-fidelity band gap are now available.### Command line (from v0.6.2)A CLI tool now provides the capability to perform quick relaxations or predictions using pre-trained models, as wellas other simple administrative tasks (e.g., clearing the cache). Some simple examples:1. To perform a relaxation,    ```bash    mgl relax --infile Li2O.cif --outfile Li2O_relax.cif    ```2. To use one of the pre-trained property models,    ```bash    mgl predict --model M3GNet-MP-2018.6.1-Eform --infile Li2O.cif    ```3. To clear the cache,    ```bash    mgl clear    ```For a full range of options, use `mgl -h`.### CodeUsers who just want to use the models out of the box should use the newly implemented `matgl.load_model` conveniencemethod. The following is an example of a prediction of the formation energy for CsCl.```pythonfrom pymatgen.core import Lattice, Structureimport matglmodel = matgl.load_model(&quot;MEGNet-MP-2018.6.1-Eform&quot;)# This is the structure obtained from the Materials Project.struct = Structure.from_spacegroup(&quot;Pm-3m&quot;, Lattice.cubic(4.1437), [&quot;Cs&quot;, &quot;Cl&quot;], [[0, 0, 0], [0.5, 0.5, 0.5]])eform = model.predict_structure(struct)print(f&quot;The predicted formation energy for CsCl is {float(eform.numpy()):.3f} eV/atom.&quot;)```To obtain a listing of available pre-trained models,```pythonimport matglprint(matgl.get_available_pretrained_models())```## TutorialsWe wrote [tutorials] on how to use MatGL. These were generated from [Jupyter notebooks][jupyternb], which can be directly run on [Google Colab].## Resources- [API docs][apidocs] for all classes and methods.- [Developer Guide](developer.md) outlines the key design elements of `matgl`, especially for developers wishing to  train and contribute matgl models.- AdvancedSoft has implemented a [LAMMPS interface](https://github.com/advancesoftcorp/lammps/tree/based-on-lammps_2Jun2022/src/ML-M3GNET)  to both the TF and MatGL version of M3Gnet.## ReferencesA MatGL publication is currently being written. For now, pls refer to the CITATION.cff file for the citationinformation. If you are using any of the pretrained models, please cite the relevant works below:&gt; **MEGNet**&gt;&gt; Chen, C.; Ye, W.; Zuo, Y.; Zheng, C.; Ong, S. P. _Graph Networks as a Universal Machine Learning Framework for&gt; Molecules and Crystals._ Chem. Mater. 2019, 31 (9), 3564–3572. DOI: [10.1021/acs.chemmater.9b01294][megnet].&gt; **Multi-fidelity MEGNet**&gt;&gt; Chen, C.; Zuo, Y.; Ye, W.; Li, X.; Ong, S. P. _Learning Properties of Ordered and Disordered Materials from&gt; Multi-Fidelity Data._ Nature Computational Science, 2021, 1, 46–53. DOI: [10.1038/s43588-020-00002-x][mfimegnet].&gt; **M3GNet**&gt;&gt; Chen, C., Ong, S.P. _A universal graph deep learning interatomic potential for the periodic table._ Nature&gt; Computational Science, 2023, 2, 718–728. DOI: [10.1038/s43588-022-00349-3][m3gnet].## FAQs1. **The `M3GNet-MP-2021.2.8-PES` differs from the original TensorFlow (TF) implementation!**   _Answer:_ `M3GNet-MP-2021.2.8-PES` is a refitted model with some data improvements and minor architectural changes.   Porting over the weights from the TF version to DGL/PyTorch is non-trivial. We have performed reasonable benchmarking   to ensure that the new implementation reproduces the broad error characteristics of the original TF implementation   (see [examples][jupyternb]). However, it is not expected to reproduce the TF version exactly. This refitted model   serves as a baseline for future model improvements. We do not believe there is value in expending the resources   to reproduce the TF version exactly.2. **I am getting errors with `matgl.load_model()`!**   _Answer:_ The most likely reason is that you have a cached older version of the model. We often refactor models to   ensure the best implementation. This can usually be solved by updating your `matgl` to the latest version   and clearing your cache using the following command `mgl clear`. On the next run, the latest model will be   downloaded. With effect from v0.5.2, we have implemented a model versioning scheme that will detect code vs model   version conflicts and alert the user of such problems.3. **What pre-trained models should I be using?**   _Answer:_ There is no one definitive answer. In general, the newer the architecture and dataset, the more likely   the model performs better. However, it should also be noted that a model operating on a more diverse dataset may   compromise on  performance on a specific system. The best way is to look at the READMEs included with each model   and do some tests on the systems you are interested in.4. **How do I contribute to matgl?**   _Answer:_ For code contributions, please fork and submit pull requests. You should read the   [developer guide](developer.md) to understand the general design guidelines. We welcome pre-trained model   contributions as well, which should also be submitted via PRs. Please follow the folder structure of the   pretrained models. In particular, we expect all models to come with a `README.md` and notebook   documenting its use and its key performance metrics. Also, we expect contributions to be on new properties   or systems or to significantly outperform the existing models. We will develop an alternative means for model   sharing in the future.5. **None of your models do what I need. Where can I get help?**   _Answer:_ Please contact [Prof Ong][ongemail] with a brief description of your needs. For simple problems, we are   glad to advise and point you in the right direction. For more complicated problems, we are always open to   academic collaborations or projects. We also offer [consulting services][mqm] for companies with unique needs,   including but not limited to custom data generation, model development and materials design.## AcknowledgmentsThis work was primarily supported by the [Materials Project][mp], funded by the U.S. Department of Energy, Office ofScience, Office of Basic Energy Sciences, Materials Sciences and Engineering Division under contract no.DE-AC02-05-CH11231: Materials Project program KC23MP. This work used the Expanse supercomputing cluster at the ExtremeScience and Engineering Discovery Environment (XSEDE), which is supported by National Science Foundation grant numberACI-1548562.[m3gnetrepo]: https://github.com/materialsvirtuallab/m3gnet &quot;M3GNet repo&quot;[megnetrepo]: https://github.com/materialsvirtuallab/megnet &quot;MEGNet repo&quot;[dgl]: https://www.dgl.ai &quot;DGL website&quot;[mavrl]: http://materialsvirtuallab.org &quot;MAVRL website&quot;[changelog]: https://matgl.ai/changes &quot;Changelog&quot;[graphnetwork]: https://arxiv.org/abs/1806.01261 &quot;Deepmind's paper&quot;[megnet]: https://pubs.acs.org/doi/10.1021/acs.chemmater.9b01294 &quot;MEGNet paper&quot;[mfimegnet]: https://nature.com/articles/s43588-020-00002-x &quot;mfi MEGNet paper&quot;[m3gnet]: https://nature.com/articles/s43588-022-00349-3 &quot;M3GNet paper&quot;[mp]: http://materialsproject.org &quot;Materials Project&quot;[apidocs]: https://matgl.ai/matgl.html &quot;MatGL API docs&quot;[doc]: https://matgl.ai &quot;MatGL Documentation&quot;[google colab]: https://colab.research.google.com/ &quot;Google Colab&quot;[jupyternb]: https://github.com/materialsvirtuallab/matgl/tree/main/examples[ongemail]: mailto:ongsp@ucsd.edu &quot;Email&quot;[mqm]: https://materialsqm.com &quot;MaterialsQM&quot;[tutorials]: https://matgl.ai/tutorials &quot;Tutorials&quot;</longdescription>
</pkgmetadata>