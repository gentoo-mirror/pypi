<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python Elmax API client![Elmax Logo](docs/elmax-logo.png?raw=true &quot;Elmax Logo&quot;)Asynchronous Python API client for interacting with the Elmax Cloud services, via HTTP apis.![Release Build Status](https://github.com/albertogeniola/elmax-api/workflows/Release/badge.svg?branch=main)![Testing Status](https://github.com/albertogeniola/elmax-api/workflows/Testing/badge.svg?branch=main)![Documentation](https://github.com/albertogeniola/elmax-api/workflows/Publish%20Documentation/badge.svg?branch=main)## InstallationUse the package manager pip to install Python Elmax API client:```bash$ pip3 install elmax-api --user```or, to install it globally, use the following command```bash$ pip3 install elmax-api```## Usage```pythonimport asynciofrom elmax_api.http import Elmaxfrom elmax_api.model.command import SwitchCommandMY_USERNAME = 'TYPE_HERE_YOUR_ELMAX_EMAIL'MY_PASSWORD = 'TYPE_HERE_YOUR_ELMAX_PASSWORD'async def main():    # Instantiate the Elmax API client    client = Elmax(username=MY_USERNAME, password=MY_PASSWORD)    # List panels for your user    panels = await client.list_control_panels()    print(f&quot;Found {len(panels)} panels for user {client.get_authenticated_username()}&quot;)    # Get online panels only    online_panels = []    for p in panels:        status = 'ONLINE' if p.online else 'OFFLINE'        print(f&quot;+ {p.hash}: {status}&quot;)        if p.online:            online_panels.append(p)    if len(online_panels) == 0:        print(&quot;Sorry, no panel to work with. Exiting.&quot;)        exit(0)    # Fetch status of first panel    p = online_panels[0]    panel_status = await client.get_panel_status(control_panel_id=p.hash)    # Print some zone status    for z in panel_status.zones:        print(f&quot;Zone '{z.name}' open: {z.opened}&quot;)    # Toggle some actuator    actuator = panel_status.actuators[0]    old_status = actuator.opened    print(f&quot;Actuator {actuator.name} was {'ON' if old_status else 'OFF'}&quot;)    print(f&quot;Switching {'OFF' if old_status else 'ON'} actuator {actuator.name}&quot;)    await client.execute_command(endpoint_id=actuator.endpoint_id, command=SwitchCommand.TURN_ON if not old_status else SwitchCommand.TURN_OFF)    print(&quot;Waiting a bit...&quot;)    await asyncio.sleep(5)    print(&quot;Reverting back original actuator status&quot;)    await client.execute_command(endpoint_id=actuator.endpoint_id,                                 command=SwitchCommand.TURN_ON if old_status else SwitchCommand.TURN_OFF)    print(&quot;Done!&quot;)if __name__ == '__main__':    asyncio.run(main())```## DocumentationFull API documentation is available on GitHub pages, [here](https://albertogeniola.github.io/elmax-api/).</longdescription>
</pkgmetadata>