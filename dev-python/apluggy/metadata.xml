<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># apluggy[![PyPI - Version](https://img.shields.io/pypi/v/apluggy.svg)](https://pypi.org/project/apluggy)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/apluggy.svg)](https://pypi.org/project/apluggy)[![Test Status](https://github.com/simonsobs/apluggy/actions/workflows/unit-test.yml/badge.svg)](https://github.com/simonsobs/apluggy/actions/workflows/unit-test.yml)[![Test Status](https://github.com/simonsobs/apluggy/actions/workflows/type-check.yml/badge.svg)](https://github.com/simonsobs/apluggy/actions/workflows/type-check.yml)[![codecov](https://codecov.io/gh/simonsobs/apluggy/branch/main/graph/badge.svg)](https://codecov.io/gh/simonsobs/apluggy)A wrapper of [pluggy](https://pluggy.readthedocs.io/) to support asyncio and context managers.This package provides a subclass of[`pluggy.PluginManager`](https://pluggy.readthedocs.io/en/stable/api_reference.html#pluggy.PluginManager)which- allows async functions, context managers, and async context managers to be hooks- and accepts plugin factories in addition to plugin instances for registration.---**Table of Contents**- [apluggy](#apluggy)  - [Installation](#installation)  - [How to use](#how-to-use)  - [Links](#links)  - [License](#license)  - [Contact](#contact)---## InstallationYou can install apluggy with pip:```consolepip install apluggy```---## How to useHere, we show a simple example of how to use apluggy.We only describe the usage of additional features provided by apluggy. For theusage of pluggy itself, please refer to the [pluggydocumentation](https://pluggy.readthedocs.io/).### Start PythonYou can try this example in a Python interpreter.```console$ pythonPython 3.10.13 (...)......&gt;&gt;&gt;```### Import packagesImport necessary packages of this example.```python&gt;&gt;&gt; import asyncio&gt;&gt;&gt; import apluggy as pluggy&gt;&gt;&gt; from apluggy import asynccontextmanager, contextmanager```In this example, `apluggy` is imported with the alias `pluggy`.The decorators `asynccontextmanager` and `contextmanager` are imported from`apluggy`. They are wrappers of the decorators of the same names in the[contextlib package](https://docs.python.org/3/library/contextlib.html). Thewrappers preserve the signatures of decorated functions, which are necessary forpluggy to pass arguments to hook implementations correctly. (The decorator`contextmanger` in `apluggy` is the same object as the decorator`contextmanager` in the [decoratorpackage](https://pypi.org/project/decorator/). The decorator package does notprovide `asynccontextmanager` decorator as of version 5.1. The decorator`asynccontextmanger` in `apluggy` is implemented in a similar way as thedecorator `contextmanager` in the decorator package.)### Create hook specification and implementation decorators```python&gt;&gt;&gt; hookspec = pluggy.HookspecMarker('project')&gt;&gt;&gt; hookimpl = pluggy.HookimplMarker('project')```### Define hook specificationsIn this example, we define three hooks: async function, context manager, andasync context manager.```python&gt;&gt;&gt; class Spec:...     &quot;&quot;&quot;A hook specification namespace.&quot;&quot;&quot;......     @hookspec...     async def afunc(self, arg1, arg2):...         pass......     @hookspec...     @contextmanager...     def context(self, arg1, arg2):...         pass......     @hookspec...     @asynccontextmanager...     async def acontext(self, arg1, arg2):...         pass```### Define pluginsWe define two plugins as classes. Each plugin implements the three hooksdefined above.```python&gt;&gt;&gt; class Plugin_1:...     &quot;&quot;&quot;A hook implementation namespace.&quot;&quot;&quot;......     @hookimpl...     async def afunc(self, arg1, arg2):...         print('inside Plugin_1.afunc()')...         return arg1 + arg2......     @hookimpl...     @contextmanager...     def context(self, arg1, arg2):...         print('inside Plugin_1.context(): before')...         yield arg1 + arg2...         print('inside Plugin_1.context(): after')......     @hookimpl...     @asynccontextmanager...     async def acontext(self, arg1, arg2):...         print('inside Plugin_1.acontext(): before')...         yield arg1 + arg2...         print('inside Plugin_1.acontext(): after')&gt;&gt;&gt; class Plugin_2:...     &quot;&quot;&quot;A 2nd hook implementation namespace.&quot;&quot;&quot;......     @hookimpl...     async def afunc(self, arg1, arg2):...         print('inside Plugin_2.afunc()')...         return arg1 - arg2......     @hookimpl...     @contextmanager...     def context(self, arg1, arg2):...         print('inside Plugin_2.context(): before')...         yield arg1 - arg2...         print('inside Plugin_2.context(): after')......     @hookimpl...     @asynccontextmanager...     async def acontext(self, arg1, arg2):...         print('inside Plugin_2.acontext(): before')...         yield arg1 - arg2...         print('inside Plugin_2.acontext(): after')```### Create a plugin manager and register pluginsPlugins can be registered as instances or factories. In the followingexample, we register two plugins: `Plugin_1` as an instance, and `Plugin_2`as a factory.```python&gt;&gt;&gt; pm = pluggy.PluginManager('project')&gt;&gt;&gt; pm.add_hookspecs(Spec)&gt;&gt;&gt; _ = pm.register(Plugin_1())  # instantiation is optional.&gt;&gt;&gt; _ = pm.register(Plugin_2)  # callable is considered a plugin factory.```[Pluggy accepts a class ormodule](https://pluggy.readthedocs.io/en/stable/#define-and-collect-hooks) as aplugin. However, it actually accepts a class instance, not a class itself.Consequently, when plugins are loaded with[`load_setuptools_entrypoints()`](https://pluggy.readthedocs.io/en/stable/api_reference.html#pluggy.PluginManager.load_setuptools_entrypoints),the entry points must be class instances or modules. Classes themselves cannotbe used as entry points (if understood correctly).So that classes themselves can be entry points, apluggy accepts a class itself fora plugin registration. When apluggy receives a callable object, apluggy considersthe object as a plugin factory.### Call hooksThe following example shows how to call hooks.#### Async function```python&gt;&gt;&gt; async def call_afunc():...     results = await pm.ahook.afunc(arg1=1, arg2=2)  # ahook instead of hook...     print(results)&gt;&gt;&gt; asyncio.run(call_afunc())inside Plugin_2.afunc()inside Plugin_1.afunc()[-1, 3]```#### Context manager```python&gt;&gt;&gt; with pm.with_.context(arg1=1, arg2=2) as y:  # with_ instead of hook...     print(y)inside Plugin_2.context(): beforeinside Plugin_1.context(): before[-1, 3]inside Plugin_1.context(): afterinside Plugin_2.context(): after```In the reverse order:```python&gt;&gt;&gt; with pm.with_reverse.context(arg1=1, arg2=2) as y:  # with_reverse instead of hook...     print(y)inside Plugin_1.context(): beforeinside Plugin_2.context(): before[3, -1]inside Plugin_2.context(): afterinside Plugin_1.context(): after```#### Async context manager```python&gt;&gt;&gt; async def call_acontext():...     async with pm.awith.acontext(arg1=1, arg2=2) as y:  # awith instead of hook...         print(y)&gt;&gt;&gt; asyncio.run(call_acontext())inside Plugin_2.acontext(): beforeinside Plugin_1.acontext(): before[-1, 3]inside Plugin_1.acontext(): afterinside Plugin_2.acontext(): after```In the reverse order:```python&gt;&gt;&gt; async def call_acontext():...     async with pm.awith_reverse.acontext(arg1=1, arg2=2) as y:  # awith_reverse instead of hook...         print(y)&gt;&gt;&gt; asyncio.run(call_acontext())inside Plugin_1.acontext(): beforeinside Plugin_2.acontext(): before[3, -1]inside Plugin_2.acontext(): afterinside Plugin_1.acontext(): after```---## Links- [pluggy](https://pluggy.readthedocs.io/)- [decorator](https://pypi.org/project/decorator/)---## License- _apluggy_ is licensed under the [MIT](https://spdx.org/licenses/MIT.html) license.---## Contact- [Tai Sakuma](https://github.com/TaiSakuma) &lt;span itemscope  itemtype=&quot;https://schema.org/Person&quot;&gt;&lt;a itemprop=&quot;sameAs&quot;  content=&quot;https://orcid.org/0000-0003-3225-9861&quot;  href=&quot;https://orcid.org/0000-0003-3225-9861&quot; target=&quot;orcid.widget&quot; rel=&quot;me  noopener noreferrer&quot; style=&quot;vertical-align:text-top;&quot;&gt;&lt;img  src=&quot;https://orcid.org/sites/default/files/images/orcid_16x16.png&quot;  style=&quot;width:1em;margin-right:.5em;&quot; alt=&quot;ORCID iD icon&quot;&gt;&lt;/a&gt;&lt;/span&gt;</longdescription>
</pkgmetadata>