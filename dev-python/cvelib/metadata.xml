<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cvelibA library and a command line interface for the CVE Services API.**Note**: version 1.0.0 of cvelib is compatible with CVE Services 2.1.## Requirements- Python version 3.7 or greater- [pip](https://pypi.org/project/pip/)## Installation### Linux, MacOS, Windows```bashpython3 -m pip install --user cvelib```For more information on installing Python packages from PyPI, see the[Python Packaging User Guide](https://packaging.python.org/tutorials/installing-packages/#installing-from-pypi).If you are using Windows, `pip` may not add the path to use the `cve` command to your environment.If it was not added, you will most likely see the error:```cve : The term 'cve' is not recognized as the name of a cmdlet, function, script file, or operable program.Check the spelling of the name, or if a path was included, verify that the path is correct and try again.```To resolve this error, add the file path for where your `cve.exe` file resides (for example,`C:\Users\&lt;username&gt;\AppData\Roaming\Python\Python39\Scripts`) to your `PATH` variable. You canedit your environment variables by searching *Edit the system environment variables* from the Start menu.### Podman/DockerYou can fetch a specific version of the `cvelib` library installed in a container image athttps://quay.io/repository/prodsecdev/cvelib. You can set up an alias to run the `cve` command using this containerimage:```bashalias cve='podman run -it --rm quay.io/prodsecdev/cvelib'# ORalias cve='docker run -it --rm quay.io/prodsecdev/cvelib'```The `latest` container image tag will always point to the latest available version of the `cvelib` package in PyPI.## CLI Setup and ConfigurationEach CLI command executed requires the user to authenticate to the CVE Services API. You can providethe authentication details with every command (using options `-u/--username`, `-o/--org`, and`-a/--api-key`), or set them in the following environment variables:### Linux &amp; MacOS```bash$ export CVE_USER=margo$ export CVE_ORG=acme$ export CVE_API_KEY=&lt;api_key&gt;```### Windows Command Line```C:\&gt; setx CVE_USER margoC:\&gt; setx CVE_ORG acmeC:\&gt; setx CVE_API_KEY &lt;api_key&gt;```### Windows PowerShell```PS C:\&gt; $Env:CVE_USER=&quot;margo&quot;PS C:\&gt; $Env:CVE_ORG=&quot;acme&quot;PS C:\&gt; $Env:CVE_API_KEY=&quot;api_key&quot;```### Podman/DockerTo pass the configuration variables to the `cvelib` container, defined them in an `.env` file:```CVE_USER=margoCVE_ORG=acmeCVE_API_KEY=&lt;api_key&gt;```Then, specify that file in your Podman/Docker command, for example:```bashpodman run -it --rm --env-file=.env quay.io/prodsecdev/cvelib ping```Alternatively, you can set the environment variables as shown in the sections above and pass them to the containerusing:```bashpodman run -it --rm -e CVE_ORG -e CVE_API_KEY -e CVE_USER quay.io/prodsecdev/cvelib ping```### Additional ConfigurationAdditional options that have an accompanying environment variable include:* `-e/--environment` or `CVE_ENVIRONMENT`: allows you to configure the deployment environment  (that is, the URL at which CVE Services is available) to interface with. Allowed values: `prod`,  `test`, and `dev`. Separate credentials are required for each environment. The `test` and `dev`  environments may not be consistently available during the development life cycle of CVE Services.* `--api-url` or `CVE_API_URL`: allows you to override the URL for the CVE Services API that would  otherwise be determined by the deployment environment you selected. This is useful for local  testing to point to a CVE Services API instance running on localhost (for example,  `export CVE_API_URL=http://localhost:3000/api/).* `-i/--interactive` or `CVE_INTERACTIVE`: every create/update action will require confirmation  before a request is sent to CVE Services. Truthy values for the environment variable are:  `1`, `t`, `yes`.## CLI Usage ExamplesAvailable options and commands can be displayed by running `cve --help`. The following areexamples of some commonly used operations.Reserve one CVE ID in the current year (you will be prompted to confirm your action):```bashcve --interactive reserve```Reserve three non-sequential CVE IDs for a specific year:```bashcve reserve 3 --year 2021 --random```Publish a CVE record for an already-reserved CVE ID:```bashcve publish CVE-2022-1234 --cve-json '{&quot;affected&quot;: [], &quot;descriptions&quot;: [], &quot;providerMetadata&quot;: {}, &quot;references&quot;: []}'```For information on the required properties in a given CVE JSON record, see the `cnaPublishedContainer` schema in:https://github.com/CVEProject/cve-schema/blob/master/schema/v5.0/CVE_JSON_5.0_schema.json.List all rejected CVEs for year 2018:```bashcve list --year 2018 --state reject```Assuming you have the `ADMIN` role (also called an _Org Admin_), create a new user in yourorganization with:```bashcve user create -u foo@bar.com --name-first Foo --name-last Bar```Mark a user as inactive (again, assuming you have the `ADMIN` role):```bashcve user update -u foo@bar.com --mark-inactive```Reset your own API key:```bashcve user reset-key```List all users in your organization:```bashcve org users```See `-h/--help` of any command for a complete list of sub-commands and options.## Library Usage Example`cvelib` also exposes a Python interface to CVE Service that can be used within any Python application that includes`cvelib` as its dependency. Here is an example Python function that fetches the CVE record for a given CVE ID:```pythonimport osfrom cvelib.cve_api import CveApidef fetch_cve_record(cve_id: str) -&gt; dict:    cve_api = CveApi(        username=os.getenv(&quot;CVE_USER&quot;),        org=os.getenv(&quot;CVE_ORG&quot;),        api_key=os.getenv(&quot;CVE_API_KEY&quot;),    )    cve = cve_api.show_cve_record(cve_id)    return cve```For more information, see the individual methods defined in the[`CveApi` interface](https://github.com/RedHatProductSecurity/cvelib/blob/master/cvelib/cve_api.py).## Other CVE Services Clients- Client-side library written in JavaScript: https://github.com/xdrr/cve.js- A web-based client interface and a client library in JavaScript: https://github.com/CERTCC/cveClient- A web-based tool for creating and editing CVE records in the CVE JSON v5 format:  https://github.com/Vulnogram/Vulnogram  - A hosted instance is available at: https://vulnogram.github.io/#editor## Development Setup```bashgit clone https://github.com/RedHatProductSecurity/cvelib.gitcd cvelibpython3 -m venv venv  # Must be Python 3.6 or latersource venv/bin/activatepip install --upgrade pippip install -e .pip install tox# If you want to use any of the dev dependencies outside of Tox, you can install them all with:pip install -e .[dev]```This project uses the [Black](https://black.readthedocs.io) code formatter. To reformat the entirecode base after you make any changes, run:```bash# Reformat code base with Blackpip install blackblack .```To sort all imports using [isort](https://pycqa.github.io/isort/), run:```bash# Sort all importspip install isortisort .```Running tests and linters (`flake8`, `mypy`, and `isort`/`black` formatting checks):```bash# Run all tests and format check (also run as a Github action)tox# Run format check onlytox -e black# Run tests against Python 3.6 onlytox -e py36# Run a single test against Python 3.6 onlytox -e py36 -- tests/test_cli.py::test_cve_show```Any changes in the commands, their options, or help texts must be reflected in the generated man pages. To refreshthem, run:```bashpip install click-manclick-man cve# ORtox -e manpages```---[CVE](https://cve.org) is a registered trademark of [The MITRE Corporation](https://www.mitre.org).</longdescription>
</pkgmetadata>