<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Dopplerr Subtitle Downloader============================|Build Status| |Docker Automated buil| |Pypi package| |PyPI| |CoverageStatus| |Discord| |Feature Requests| |MIT licensed|Subtitle Download Web Service for Sonarr or Radarr. It uses`Subliminal &lt;https://github.com/Diaoul/subliminal&gt;`__ to searchautomatically for missing subtitles on download notification.-  Free software: MIT-  Source: https://github.com/Stibbons/dopplerr-  Python 3.-  Docker image based on Alpine Linux and S6-Overlay (based on   `Linuxserver &lt;https://www.linuxserver.io/&gt;`__'s images)Limitations===========-  only Sonarr Download notification-  video filename should not have been renamed (which helps finding the   right subtitle)-  all series should be on the same root directory-  series folder should be as ``Series Name (1900)``Support and Feature Requests============================Do NOT open issue for feature requests, please vote on`FeatHub &lt;http://feathub.com/Stibbons/dopplerr&gt;`__.For support, please use our`Discord &lt;https://discordapp.com/channels/378849537520959510/378849838751678465&gt;`__.Usage=====The best usage is through the docker image.Installation with Docker------------------------Use my docker image:::    docker create \        --name dopplerr \        -p 8086:8086 \        -e PUID=&lt;UID&gt; \        -e PGID=&lt;GID&gt; \        -e TZ=&lt;timezone&gt; \        -v /etc/localtime:/etc/localtime:ro \        -v &lt;path/to/animes&gt;:/animes \        -v &lt;path/to/movies&gt;:/movies \        -v &lt;path/to/series&gt;:/tv \        -e DOPPLERR_SUBLIMINAL_LANGUAGES=&quot;fra,eng&quot; \        -e DOPPLERR_MAPPING=&quot;tv=tv,movies=movies,animes=animes&quot; \        stibbons31/dopplerrMount your media directories in ``/``. Typically, ``/animes`` and``/tv`` are from Sonarr, and ``/movies`` from Radarr.It is a good practice to run Sonarr and Radarr in their own container,so they also &quot;see&quot; their media in path such as ``/tv``, ``/movies``,``/animes``. Mount these volume with the same name in the ``dopplerr``container.``DOPPLERR_MAPPING`` is used to list all interesting folders in mediabase directory (which is ``/`` by default if``DOPPLERR_GENERAL_BASEDIR`` is not set), so please define it even ifall directory mappings are trivial:``tv=tv,movies=movies,animes=animes``.``DOPPLERR_MAPPING`` can allows developers to run dopplerr directly fromtheir PC and allow a different naming conventions (for instance,``/path/to/Movies`` is where the movies are stored, but in allcontainers (Radarr, Dopplerr) they are mounted as ``/movies``).Parameters~~~~~~~~~~The parameters are split into two halves, separated by a colon, the lefthand side representing the host and the right the container side. Forexample with a port -p external:internal - what this shows is the portmapping from internal to external of the container. So, ``-p 8080:80``would expose port 80 from inside the container to be accessible from thehost's IP on port 8080 (Ex: ``http://192.168.x.x:8080``).Example of starting command line arguments:-  ``-p 8086:8086`` - the port webinterface-  ``-v /path/to/anime:/anime`` - location of Anime library on disk-  ``-v /path/to/movies:/movies`` - location of Movies library on disk-  ``-v /path/to/series:/tv`` - location of TV library on disk-  ``-e PGID=1000`` - for GroupID. See below for explanation-  ``-e PUID=100`` - for UserID. See below for explanation-  ``-v /etc/localtime`` - for timezone information - see Localtime for   important information-  ``-e TZ``- for timezone information, Europe/London - see Localtime   for important information-  ``-e DOPPLERR_SUBLIMINAL_LANGUAGES=fra,eng`` - set wanted subtitles   languages (mandatory)-  ``-e DOPPLERR_GENERAL_VERBOSE=1`` - set verbosity. 1=verbose,   0=silent (optional)Developers might also use:-  ``-e DOPPLERR_GENERAL_BASEDIR=/media`` - set media base directory   (optional) (needs something like ``-v /path/to/anime:/media/anime``   and so on)Localtime~~~~~~~~~It is important that you either set``-v /etc/localtime:/etc/localtime:ro`` or the TZ variable to enablescheduled tasks.Example:::    -e TZ=Europe/ParisUser / Group Identifiers~~~~~~~~~~~~~~~~~~~~~~~~Sometimes when using data volumes (-v flags) permissions issues canarise between the host OS and the container. We avoid this issue byallowing you to specify the user PUID and group PGID. Ensure the datavolume directory on the host is owned by the same user you specify andit will &quot;just work&quot; (TM).In this instance PUID=1001 and PGID=1001. To find yours use id user asbelow:::    $ id &lt;dockeruser&gt;    uid=1001(dockeruser) gid=1001(dockergroup) groups=1001(dockergroup)Wanted subtitle languages~~~~~~~~~~~~~~~~~~~~~~~~~Use a comma-separated list of 3-letter language descriptors you wantSubliminal to try to download them.Example:::    DOPPLERR_SUBLIMINAL_LANGUAGES=fra,engDescriptors are ISO-639-3 names of the language. See the `officialBabelfishtable &lt;https://github.com/Diaoul/babelfish/blob/f403000dd63092cfaaae80be9f309fd85c7f20c9/babelfish/data/iso-639-3.tab&gt;`__to find your prefered languages.Pipy Installation-----------------Create a dedicated virtual environment and install it properly with thefollowing commands:::    $ pip3 install dopplerr**Note:** One should NEVER install a Python application directly in yoursystem using ``sudo pip3 install ...``. You do not want to mess yourstartup scripts or any other python application that came well packagedby the maintainers of your distribution.Always use a Virtualenv. To install an application system-wide, use yourdistribution's packet manager (``apt`` / ``yum`` / ...).If you do not have this option, install a Python package user-wide(``pip3 install --user``).**Other Note**: while using ``pip``/``pip3`` to install from pre-builtpackages (&quot;distribution packages&quot;) from Pypi is the official method,please note this project uses ``pipenv`` for development, and uses a``Pipfile`` as primary source of dependencies definition.``requirements.txt`` file is automatically generated on change soinstalling through ``pip3`` from the GitHub source should work even ifit not the official installation method:::    pip3 install --user git+http://github.com/Stibbons/dopplerr#egg=dopplerrBe aware with this command you retrieve the latest code, which may bebroken.Radarr/Sonarr Configuration===========================Go in Settings to configure a &quot;Connect&quot; WebHook:-  Settings &gt; Connect &gt; add WebHook notification-  Select **On Download** and **On Upgrade**-  URL: ``http://&lt;ip address&gt;:8086/api/v1/notify/sonarr``   or   URL: ``http://&lt;ip address&gt;:8086/api/v1/notify/radarr``-  Method: POSTTwo READMEs ?=============There is a little trick to know about READMEs:-  Docker Hub does not render README written in restructuredText   correctly-  Pypi does not render README written in Markdown correctlySo, a restructuredText version of the README is created from``README.md`` on upload to Pypi. Simple. So, when updating``README.md``, do not forget to regenerate ``README.rst`` using``make readme``.Contributing============Check out the source code::    git cloneInstall requirement system-level dependencies with (or adaptaccordingly):::    $ sudo ./bootstrap-system.shSystem dependencies:-  ``git``-  ``make``-  ``pandoc``-  ``pip``-  ``pipenv``This project uses ``pipenv`` to jump seamlessly into a virtualenv.Setup your development environment with:::    $ make devUnit Tests with:::    $ make test-unitor run it live with::    $ make run-localActivate the environment (to start your editor from, for example):::    $ make shellPublishing new version======================Please note that much part is automatized, for example the publicationto Pypi is done automatically by Travis on successful tag build)Test building Wheel package with:::    $ make release wheelsCreate a release: create a tag with a Semver syntax.::    $ # ensure everything is committed    $ git tag 1.2.3    $ make release    $ git push --tagsOptionally you can tag code locally and push to GitHub. ``make release``is also executed during the Travis build, so if there is any fileschanged during the build (ex: ``README.rst``), it will be automaticallydone and so the Pypi package will be coherent. Do not retag if theREADME has been updated on GitHub, it has been properly done in theWheel/Source Packages on Pypi. So, no stress.On successful travis build on the Tag, your Pypi package will beautomatically updated.Same, on Tag, a Docker tag is also automatically created.Note:    According to PBR, alpha versions are to be noted ``x.y.z.a1``.. |Build Status| image:: https://travis-ci.org/Stibbons/dopplerr.svg?branch=master   :target: https://travis-ci.org/Stibbons/dopplerr.. |Docker Automated buil| image:: https://img.shields.io/docker/build/stibbons31/dopplerr.svg   :target: https://hub.docker.com/r/stibbons31/dopplerr/builds/.. |Pypi package| image:: https://badge.fury.io/py/dopplerr.svg   :target: https://pypi.python.org/pypi/dopplerr/.. |PyPI| image:: https://img.shields.io/pypi/pyversions/dopplerr.svg   :target: https://pypi.python.org/pypi/dopplerr/.. |Coverage Status| image:: https://coveralls.io/repos/github/Stibbons/dopplerr/badge.svg?branch=master   :target: https://coveralls.io/github/Stibbons/dopplerr?branch=master.. |Discord| image:: https://img.shields.io/discord/378849537520959510.svg   :target: https://discordapp.com/channels/378849537520959510/378849838751678465.. |Feature Requests| image:: http://feathub.com/Stibbons/dopplerr?format=svg   :target: http://feathub.com/Stibbons/dopplerr.. |MIT licensed| image:: https://img.shields.io/badge/license-MIT-blue.svg   :target: ./LICENSE</longdescription>
</pkgmetadata>