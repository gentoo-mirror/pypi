<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># nepali[![PyPI version](https://badge.fury.io/py/nepali.svg)](https://badge.fury.io/py/nepali)[![CI status](https://github.com/opensource-nepal/py-nepali/actions/workflows/python-package.yml/badge.svg?branch=master)](https://github.com/opensource-nepal/py-nepali/actions)[![Downloads](https://img.shields.io/pypi/dm/nepali.svg?maxAge=180)](https://pypi.org/project/nepali/)[![codecov](https://codecov.io/gh/opensource-nepal/py-nepali/branch/master/graph/badge.svg?token=PTUHYWCJ4I)](https://codecov.io/gh/opensource-nepal/py-nepali)`nepali` is a python package containing features that will be useful for Nepali projects.The major feature of this package is nepalidatetime, which is compatible with python's datetime feature. It helps nepali date to english, parsing nepali datetime, nepali timezone, and timedelta support in nepali datetime.## Example```pythonimport datetimefrom nepali import phone_numberfrom nepali.datetime import nepalidate, parsernepali_datetime = parser.parse('2079-02-15')# 2079-02-15 00:00:00date = datetime.date(2017, 3, 15)nepali_date = nepalidate.from_date(date)# 2073-12-02phone_number.parse(&quot;+977-9845217789&quot;)# {#     'type':      'Mobile',#     'number':    '9845217789',#     'operator':  &lt;Operator: Nepal Telecom&gt;# }```## Requirements    Python &gt;= 3## Installation    pip install nepali## Features1. [Date and Time](#date-and-time)   - [date_converter](#date_converter)   - [nepalidate](#nepalidate)   - [nepalidatetime](#nepalidatetime)   - [nepalihumanize](#nepalihumanize)   - [timezone](#timezone)   - [parse](#parse)   - [strftime() and strptime() Format Codes](#strftime-and-strptime-format-codes)1. [Numbers](#numbers)   - [nepalinumber](#nepalinumber)1. [Phone Number](#phone-number)1. [Locations](#locations)1. [For Django Template](#for-django-template)## Date and Time### date_converterDate converter module converts english date to nepali and nepali date to english. It doesn't contain any extra functionality.**Convert English date to Nepali date**```pythonfrom nepali.date_converter import converternp_year, np_month, np_date = converter.english_to_nepali(en_year, en_month, en_date)```Example```pythonfrom nepali.date_converter import converternp_year, np_month, np_date = converter.english_to_nepali(2023, 2, 7)print(np_year, np_month, np_date) # 2079 10 24```**Convert Nepali date to English date**```pythonfrom nepali.date_converter import converteren_year, en_month, en_date = converter.nepali_to_english(np_year, np_month, np_date)```Example```pythonfrom nepali.date_converter import converteren_year, en_month, en_date = converter.nepali_to_english(2079, 10, 24)print(en_year, en_month, en_date) # 2023 2 7```### nepalidate**Creating a new nepalidate object**```pythonfrom nepali.datetime import nepalidate# nepalidate object with year, month, daynp_date = nepalidate(year, month, day)# nepalidate object with today's datenp_date = nepalidate.today()# parse nepali datenp_date = nepalidate.strptime('2078-01-18', format='%Y-%m-%d')```**Getting nepalidate object from python datetime**```python# from date objectnp_date = nepalidate.from_date(date_obj)# from datetime objectnp_date = nepalidate.from_datetime(datetime_obj)```**Attributes and Methods**```pythonnp_date.year                       # 2078 (year)np_date.month                      # 1 (month)np_date.day                        # 18 (day)np_date.to_date()                  # datetime.date objectnp_date.to_datetime()              # datetime.datetime objectnp_date.to_nepalidatetime()        # nepalidatetime objectnp_date.strftime(&quot;%Y-%m-%d&quot;)       # 2078-01-18np_date.strftime_ne(&quot;%Y-%m-%d&quot;)    # २०७८-०१-१८np_date.weekday()                  # Sunday =&gt; 0, Monday =&gt; 1, ..., Saturday =&gt; 6```### nepalidatetime**Creating a new nepalidatetime object**```pythonfrom nepali.datetime import nepalidatetime# nepalidate object with year, month, day, hour, minute, secondnp_datetime = nepalidatetime(year, month, day[, hour[, minute[, second]]])# nepalidate object with current date and timenp_datetime = nepalidate.now()np_datetime = nepalidate.today()# parse nepali datetimenp_datetime = nepalidatetime.strptime('2078-01-12 13:12', format='%Y-%m-%d %H:%M')```**Getting nepalidatetime object from python datetime**```python# from date objectnp_datetime = nepalidatetime.from_date(date_obj)# from datetime objectnp_datetime = nepalidatetime.from_datetime(datetime_obj)```**Getting nepalidatetime object from nepalidate**```pythonnp_datetime = nepalidatetime.from_nepalidate(nepali_date)```**Attributes and Methods**```pythonnp_date.year                             # 2078 (year)np_date.month                            # 1 (month)np_date.day                              # 18 (day)np_date.hour                             # 23 (hour)np_date.minute                           # 59 (minute)np_date.second                           # 59 (day)np_date.to_date()                        # datetime.date objectnp_date.to_datetime()                    # datetime.datetime objectnp_date.to_nepalidate()                  # nepalidatetime objectnp_date.to_time()                        # nepalitime object (datetime.time compatible)np_date.strftime(&quot;%Y-%m-%d %H:%M&quot;)       # 2078-01-18 23:59np_date.strftime_ne(&quot;%Y-%m-%d %H:%M&quot;)    # २०७८-०१-१८ २३:५९np_date.weekday()                        # Sunday =&gt; 0, Monday =&gt; 1, ..., Saturday =&gt; 6```**Timedelta support**```python# timedelta addition and subtractionnp_datetime - datetime.timedelta(days=3)       # returns nepalidatetime# comparison between two datesnp_datetime1 - np_datetime2                    # returns timedelta objectnp_datetime1 &lt; np_datetime2                    # returns bool (True/False)np_datetime1 &gt;= datetime.datetime.now()        # returns bool (True/False)...```### nepalihumanizeReturns readable form of nepali date.```pythonfrom nepali.datetime import nepalihumanizenepalihumanize(datetime, [threshold, format])```The `threshold` is and optional field and is in seconds and the format is for the `strftime` format. If the datetime object crosses the threshold it print the date with the format. The `format` is also an optional and is `%B %d, %Y` in default.Example```pythonfrom nepali.datetime import nepalihumanize, nepalidatetimenp_datetime = nepalidatetime(2079, 10, 5)output = nepalihumanize(np_datetime)# output: ३ महिना अघिoutput = nepalihumanize(np_datetime, threshold=1400)# 1400 = 2 * 30 * 24; two months threshold# output: माघ ०५, २०७९```### timezone**NepaliTimeZone**You can use `NepaliTimeZone` directly to your datetime object.```pythonfrom nepali.timezone import NepaliTimeZonedatetime.datetime(2018, 8, 12, 16, 23, tzinfo=NepaliTimeZone())```**now**Returns current datetime object with timezone```pythonfrom nepali import timezonetimezone.now()````datetime.now()` vs `timezone.now()`:`datetime.now()` doesn't contain timezone, but `timezone.now()` will contain timezone of the system.**utc_now**Returns current UTC datetime object (with timezone UTC)```pythonfrom nepali import timezonetimezone.utc_now()```### parseParses date with commonly used date formats. Auto detects date format. If you are sure about the format, please use `strptime`.```pythonfrom nepali.datetime.parser import parsenp_datetime = parse(datetime_str)```Example```pythonnp_datetime = parse(&quot;2079-02-15&quot;)                     # 2079-02-15 00:00:00np_datetime = parse(&quot;२०७८-०१-१८&quot;)                      # 2078-01-15 00:00:00np_datetime = parse(&quot;2079/02/15&quot;)                     # 2079-02-15 00:00:00np_datetime = parse(&quot;2079-02-15 15:23&quot;)               # 2079-02-15 15:23:00np_datetime = parse(&quot;2079-02-15 5:23 AM&quot;)             # 2079-02-15 05:23:00np_datetime = parse(&quot;2079-02-15 5:23 AM&quot;)             # 2079-02-15 05:23:00np_datetime = parse(&quot;Jestha 15, 2079&quot;)                # 2079-02-15 00:00:00```### strftime() and strptime() Format Codes| Directive | Meaning                                                   | Example                        || --------- | --------------------------------------------------------- | ------------------------------ || `%A`      | Weekday as locale’s abbreviated name.                     | Sun, Mon, …, Sat (आइत, सोम, …) || `%A`      | Weekday as locale’s full name.                            | Sunday, Monday, …, Saturday    || `%d`      | Day of the month as a zero-padded decimal number.         | 01, 02, …, 31                  || `%-d`     | Day of the month as a decimal number.                     | 1, 2, …, 31                    || `%B`      | Month as locale’s full name.                              | Baishak, Jestha, …, Chaitra    || `%m`      | Month as a zero-padded decimal number.                    | 01, 02, …, 12                  || `%-m`     | Month as a decimal number.                                | 1, 2, …, 12                    || `%y`      | Year without century as a zero-padded decimal number.     | 00, 01, …, 99                  || `%Y`      | Year with century as a decimal number.                    | 2001, 2078, 2079, …, 2099      || `%H`      | Hour (24-hour clock) as a zero-padded decimal number.     | 00, 01, …, 23                  || `%-H`     | Hour (24-hour clock) as a decimal number.                 | 0, 1, 2, …, 23                 || `%I`      | Hour (12-hour clock) as a zero-padded decimal number.     | 01, 02, …, 12                  || `%-I`     | Hour (12-hour clock) as a decimal number.                 | 1, 2, …, 12                    || `%p`      | Locale’s equivalent of either AM or PM.                   | AM, PM (en_US)                 || `%M`      | Minute as a zero-padded decimal number.                   | 00, 01, …, 59                  || `%-M`     | Minute as a decimal number.                               | 0, 1, 2, …, 59                 || `%S`      | Second as a zero-padded decimal number.                   | 00, 01, …, 59                  || `%-S`     | Second as a decimal number.                               | 0, 1, 2, …, 59                 || `%f`      | Microsecond as a decimal number, zero-padded to 6 digits. | 000000, 000001, …, 999999      || `%%`      | A literal `'%'` character.                                | %                              |---## Numbers```pythonfrom nepali import number```**convert**Converts english number to nepali.```pythonnp_number = number.convert(&quot;1234567890&quot;)  # १२३४५६७८९०```**revert**Converts english number to nepali.```pythonen_number = number.revert(&quot;१२३४५६७८९०&quot;)  # 1234567890```**add_comma**Adds comma in nepali numbers.```pythonnumber_text = number.add_comma(&quot;1234567890&quot;)  # 1,23,45,67,890```### nepalinumber`nepalinumber` is a new data type, which can be used to represent Nepali (Devanagari) numbers. It allows us to perform arithmetic operations, just like with int and float. Additionally, it can be used to parse numbers and output them in Devanagari format.```pythonfrom nepali.number import nepalinumber```**Parsing**```pythona = nepalinumber(&quot;१८.२७&quot;)print(a)  # 18.27b = nepalinumber(15)print(b)  # 15```**Nepali (Devanagari) output**```pythona = nepalinumber(&quot;18.27&quot;)print(a.str_ne())  # १८.२७```**Arithmetic operations**```pythona = nepalinumber(&quot;1&quot;)b = nepalinumber(&quot;२&quot;)c = a + b * 3print(c)  # 7```---## Phone Number```pythonfrom nepali import phone_number```**is_valid**Checks is the given number is a valid nepali phone number.```pythonphone_number.is_valid(&quot;9851377890&quot;)      # Truephone_number.is_valid(&quot;+977-142314819&quot;)  # Truephone_number.is_valid(&quot;8251377890&quot;)      # False```**parse**Parse phone number and returns details of the number.```pythonphone_number.parse(&quot;9851377890&quot;)# {'type': 'Mobile', 'number': '9851377890', 'operator': &lt;Operator: Nepal Telecom&gt;}phone_number.parse(&quot;+977-142314819&quot;)# {'type': 'Landline', 'number': '0142314819', 'area_code': '01'}```---## LocationsProvides details of Nepal's Province, District, and Municipality.```pythonfrom nepali.locations import provinces, districts, municipalities``````pythonfrom nepali.locations.utils import get_province, get_district, get_municipality# Provinceget_province(name=&quot;Bagmati&quot;)# Bagmati Province# Districtget_district(name=&quot;Kathmandu&quot;)# Kathmandu# Municipalityget_municipality(name=&quot;Kathmandu&quot;)# Kathmandu Metropolitan City# Municipalityget_municipality(name_nepali=&quot;विराटनगर&quot;)# Biratnagar Metropolitan City```---## For Django TemplateAdd `'nepali'` to your `INSTALLED_APPS` setting.```pythonINSTALLED_APPS = [    ...    'nepali',    ...]```### nepalidatetimeIn your Template```python{% load nepalidatetime %}```#### nepalinow`nepalinow` renders the current Nepali date and time in 'en-US' locale (English).```python{% nepalinow %}``````python{% nepalinow '%Y-%m-%d' %}```#### nepalinow_ne`nepalinow_ne` renders the current Nepali date and time in 'ne' locale (Nepali).```python{% nepalinow_ne %}```#### nepalidate`nepalidate` renders the datetime object into nepali datetime format in 'en-US' locale (English).```python{{ datetime_obj|nepalidate:&quot;%Y-%m-%d&quot; }}```#### nepalidate_ne`nepalidate_ne` renders the datetime object into nepali datetime format in 'ne' locale (Nepali).```python{{ datetime_obj|nepalidate_ne:&quot;%Y-%m-%d&quot; }}```#### nepalihumanize`nepalihumanize` renders the datetime object to a human readable form for 'ne' locale (Nepali)```python{{ datetime_obj|nepalihumanize }}```### nepalinumberIn your Template```python{% load nepalinumber %}````nepalinumber` renders the english number into nepali format (devanagari)```python{{ forloop.counter|nepalinumber }}{{ 150|nepalinumber }}```## ContributionWe appreciate feedback and contribution to this package. To get started please see our [contribution guide](CONTRIBUTION.md)</longdescription>
</pkgmetadata>