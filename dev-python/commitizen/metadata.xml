<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/commitizen-tools/commitizen/pythonpackage.yml?label=python%20package&amp;logo=github&amp;logoColor=white&amp;style=flat-square)](https://github.com/commitizen-tools/commitizen/actions)[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg?style=flat-square)](https://conventionalcommits.org)[![PyPI Package latest release](https://img.shields.io/pypi/v/commitizen.svg?style=flat-square)](https://pypi.org/project/commitizen/)[![PyPI Package download count (per month)](https://img.shields.io/pypi/dm/commitizen?style=flat-square)](https://pypi.org/project/commitizen/)[![Supported versions](https://img.shields.io/pypi/pyversions/commitizen.svg?style=flat-square)](https://pypi.org/project/commitizen/)[![homebrew](https://img.shields.io/homebrew/v/commitizen?color=teal&amp;style=flat-square)](https://formulae.brew.sh/formula/commitizen)[![Codecov](https://img.shields.io/codecov/c/github/commitizen-tools/commitizen.svg?style=flat-square)](https://codecov.io/gh/commitizen-tools/commitizen)[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?style=flat-square&amp;logo=pre-commit&amp;logoColor=white)](https://github.com/pre-commit/pre-commit)![Using commitizen cli](images/demo.gif)---**Documentation:** [https://commitizen-tools.github.io/commitizen/](https://commitizen-tools.github.io/commitizen/)---## AboutCommitizen is a tool designed for teams.Its main purpose is to define a standard way of committing rulesand communicating it (using the cli provided by commitizen).The reasoning behind it is that it is easier to read, and enforces writingdescriptive commits.Besides that, having a convention on your commits makes it possible toparse them and use them for something else, like generating automaticallythe version or a changelog.### Commitizen features- Command-line utility to create commits with your rules. Defaults: [Conventional commits][conventional_commits]- Display information about your commit rules (commands: schema, example, info)- Bump version automatically using [semantic versioning][semver] based on the commits. [Read More](./bump.md)- Generate a changelog using [Keep a changelog][keepchangelog]## RequirementsPython 3.6+[Git][gitscm] `1.8.5.2`+## InstallationGlobal installation```bashsudo pip3 install -U Commitizen```### Python projectYou can add it to your local project using one of these:```bashpip install -U commitizen```for Poetry &gt;= 1.2.0:```bashpoetry add commitizen --group dev```for Poetry &lt; 1.2.0:```bashpoetry add commitizen --dev```### macOSOn macOS, it can also be installed via [homebrew](https://formulae.brew.sh/formula/commitizen):```bashbrew install commitizen```## Usage### CommittingRun in your terminal```bashcz commit```or the shortcut```bashcz c```#### Sign off the commitRun in the terminal```bashcz commit --signoff```or the shortcut```bashcz commit -s```### Integrating with Pre-commitCommitizen can lint your commit message for you with `cz check`.You can integrate this in your [pre-commit](https://pre-commit.com/) config with:```yaml---repos:  - repo: https://github.com/commitizen-tools/commitizen    rev: master    hooks:      - id: commitizen      - id: commitizen-branch        stages: [push]```After the configuration is added, you'll need to run:```shpre-commit install --hook-type commit-msg --hook-type pre-push```If you aren't using both hooks, you needn't install both stages.| Hook              | Recommended Stage || ----------------- | ----------------- || commitizen        | commit-msg        || commitizen-branch | pre-push          |Note that pre-commit discourages using `master` as a revision, and the above command will print a warning. You should replace the `master` revision with the [latest tag](https://github.com/commitizen-tools/commitizen/tags). This can be done automatically with:```shpre-commit autoupdate```Read more about the `check` command [here](check.md).### Help```sh$ cz --helpusage: cz [-h] [--debug] [-n NAME] [-nr NO_RAISE] {init,commit,c,ls,example,info,schema,bump,changelog,ch,check,version} ...Commitizen is a cli tool to generate conventional commits.For more information about the topic go to https://conventionalcommits.org/optional arguments:  -h, --help            show this help message and exit  --debug               use debug mode  -n NAME, --name NAME  use the given commitizen (default: cz_conventional_commits)  -nr NO_RAISE, --no-raise NO_RAISE                        comma separated error codes that won't rise error, e.g: cz -nr 1,2,3 bump. See codes at https://commitizen-                        tools.github.io/commitizen/exit_codes/commands:  {init,commit,c,ls,example,info,schema,bump,changelog,ch,check,version}    init                init commitizen configuration    commit (c)          create new commit    ls                  show available commitizens    example             show commit example    info                show information about the cz    schema              show commit schema    bump                bump semantic version based on the git log    changelog (ch)      generate changelog (note that it will overwrite existing file)    check               validates that a commit message matches the commitizen schema    version             get the version of the installed commitizen or the current project (default: installed commitizen)```## Setting up bash completionWhen using bash as your shell (limited support for zsh, fish, and tcsh is available), Commitizen can use [argcomplete](https://kislyuk.github.io/argcomplete/) for auto-completion. For this argcomplete needs to be enabled.argcomplete is installed when you install Commitizen since it's a dependency.If Commitizen is installed globally, global activation can be executed:```bashsudo activate-global-python-argcomplete```For permanent (but not global) Commitizen activation, use:```bashregister-python-argcomplete cz &gt;&gt; ~/.bashrc```For one-time activation of argcomplete for Commitizen only, use:```basheval &quot;$(register-python-argcomplete cz)&quot;```For further information on activation, please visit the [argcomplete website](https://kislyuk.github.io/argcomplete/).[conventional_commits]: https://www.conventionalcommits.org[semver]: https://semver.org/[keepchangelog]: https://keepachangelog.com/[gitscm]: https://git-scm.com/downloads</longdescription>
</pkgmetadata>