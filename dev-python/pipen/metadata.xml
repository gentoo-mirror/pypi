<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;    &lt;img src=&quot;./pipen.png&quot; width=&quot;320px&quot;&gt;**A pipeline framework for python**&lt;/div&gt;______________________________________________________________________[![Pypi][6]][7] [![Github][8]][9] ![Building][10] [![Docs and API][11]][1] [![Codacy][12]][13] [![Codacy coverage][14]][13] [![Deps][5]][23][Documentation][1] | [ChangeLog][2] | [Examples][3] | [API][4]## Features- Easy to use- Nearly zero-configuration- Nice logging- Highly extendable## Installation```bashpip install -U pipen```## Quickstart`example.py````pythonfrom pipen import Proc, Pipenclass P1(Proc):    &quot;&quot;&quot;Sort input file&quot;&quot;&quot;    input = &quot;infile&quot;    input_data = [&quot;/tmp/data.txt&quot;]    output = &quot;outfile:file:intermediate.txt&quot;    script = &quot;cat {{in.infile}} | sort &gt; {{out.outfile}}&quot;class P2(Proc):    &quot;&quot;&quot;Paste line number&quot;&quot;&quot;    requires = P1    input = &quot;infile&quot;    output = &quot;outfile:file:result.txt&quot;    script = &quot;paste &lt;(seq 1 3) {{in.infile}} &gt; {{out.outfile}}&quot;class MyPipeline(Pipen):    starts = P1if __name__ == &quot;__main__&quot;:    MyPipeline().run()``````shell&gt; echo -e &quot;3\n2\n1&quot; &gt; /tmp/data.txt&gt; python example.py``````log06-09 23:15:29 I core                  _____________________________________   __06-09 23:15:29 I core                  ___  __ \___  _/__  __ \__  ____/__  | / /06-09 23:15:29 I core                  __  /_/ /__  / __  /_/ /_  __/  __   |/ /06-09 23:15:29 I core                  _  ____/__/ /  _  ____/_  /___  _  /|  /06-09 23:15:29 I core                  /_/     /___/  /_/     /_____/  /_/ |_/06-09 23:15:29 I core06-09 23:15:29 I core                              version: 0.12.106-09 23:15:29 I core06-09 23:15:29 I core    ╔═══════════════════════════════════════════════════╗06-09 23:15:29 I core    ║                            MYPIPELINE                            ║06-09 23:15:29 I core    ╚═══════════════════════════════════════════════════╝06-09 23:15:29 I core    plugins         : verbose v0.9.006-09 23:15:29 I core    # procs         : 206-09 23:15:29 I core    profile         : default06-09 23:15:29 I core    outdir          : /home/pwwang/github/pipen/MyPipeline-output06-09 23:15:29 I core    cache           : True06-09 23:15:29 I core    dirsig          : 106-09 23:15:29 I core    error_strategy  : ignore06-09 23:15:29 I core    forks           : 106-09 23:15:29 I core    lang            : bash06-09 23:15:29 I core    loglevel        : info06-09 23:15:29 I core    num_retries     : 306-09 23:15:29 I core    scheduler       : local06-09 23:15:29 I core    submission_batch: 806-09 23:15:29 I core    template        : liquid06-09 23:15:29 I core    workdir         : /home/pwwang/github/pipen/.pipen/MyPipeline06-09 23:15:29 I core    plugin_opts     :06-09 23:15:29 I core    template_opts   :06-09 23:15:31 I core06-09 23:15:31 I core    ╭──────────────────────── P1 ───────────────────────╮06-09 23:15:31 I core    │ Sort input file                                                  │06-09 23:15:31 I core    ╰──────────────────────────────────────────────────╯06-09 23:15:31 I core    P1: Workdir: '/home/pwwang/github/pipen/.pipen/MyPipeline/P1'06-09 23:15:31 I core    P1: &lt;&lt;&lt; [START]06-09 23:15:31 I core    P1: &gt;&gt;&gt; ['P2']06-09 23:15:31 I verbose P1: size: 106-09 23:15:31 I verbose P1: [0/0] in.infile: /tmp/data.txt06-09 23:15:31 I verbose P1: [0/0] out.outfile:                 /home/pwwang/github/pipen/.pipen/MyPipeline/P1/0/output/intermediate.txt06-09 23:15:33 I verbose P1: Time elapsed: 00:00:02.018s06-09 23:15:33 I core06-09 23:15:33 I core    ╭════════════════════════ P2 ═══════════════════════╮06-09 23:15:33 I core    ║ Paste line number                                                ║06-09 23:15:33 I core    ╰══════════════════════════════════════════════════╯06-09 23:15:33 I core    P2: Workdir: '/home/pwwang/github/pipen/.pipen/MyPipeline/P2'06-09 23:15:33 I core    P2: &lt;&lt;&lt; ['P1']06-09 23:15:33 I core    P2: &gt;&gt;&gt; [END]06-09 23:15:33 I verbose P2: size: 106-09 23:15:33 I verbose P2: [0/0] in.infile:                 /home/pwwang/github/pipen/.pipen/MyPipeline/P1/0/output/intermediate.txt06-09 23:15:33 I verbose P2: [0/0] out.outfile:                 /home/pwwang/github/pipen/MyPipeline-output/P2/result.txt06-09 23:15:35 I verbose P2: Time elapsed: 00:00:02.009s06-09 23:15:35 I core              MYPIPELINE: 100%|█████████████████████████████| 2/2 [00:06&lt;00:00, 0.36 procs/s]``````shell&gt; cat ./MyPipeline-output/P2/result.txt1       12       23       3```## ExamplesSee more examples at `examples/` and a more realcase example at:https://github.com/pwwang/pipen-report/tree/master/example## Plugin galleryPlugins make `pipen` even better.- [`pipen-verbose`][15]: Add verbosal information in logs for pipen.- [`pipen-lock`][25]: Process lock for pipen to prevent multiple runs at the same time.- [`pipen-report`][16]: Generate report for pipen- [`pipen-filters`][17]: Add a set of useful filters for pipen templates.- [`pipen-diagram`][18]: Draw pipeline diagrams for pipen- [`pipen-annotate`][26]: Use docstring to annotate pipen processes- [`pipen-args`][19]: Command line argument parser for pipen- [`pipen-dry`][20]: Dry runner for pipen pipelines- [`pipen-log2file`][28]: Save running logs to file for pipen- [`pipen-board`][27]: Visualize configuration and running of pipen pipelines on the web- [`pipen-runinfo`][29]: Save running information to file for pipen- [`pipen-cli-init`][21]: A pipen CLI plugin to create a pipen project (pipeline)- [`pipen-cli-run`][22]: A pipen cli plugin to run a process or a pipeline- [`pipen-cli-require`][24]: A pipen cli plugin check the requirements of a pipeline[1]: https://pwwang.github.io/pipen[2]: https://pwwang.github.io/pipen/CHANGELOG[3]: https://pwwang.github.io/pipen/examples[4]: https://pwwang.github.io/pipen/api/pipen[5]: https://img.shields.io/librariesio/release/pypi/pipen?style=flat-square[6]: https://img.shields.io/pypi/v/pipen?style=flat-square[7]: https://pypi.org/project/pipen/[8]: https://img.shields.io/github/v/tag/pwwang/pipen?style=flat-square[9]: https://github.com/pwwang/pipen[10]: https://img.shields.io/github/actions/workflow/status/pwwang/pipen/build.yml?style=flat-square[11]: https://img.shields.io/github/actions/workflow/status/pwwang/pipen/docs.yml?label=docs&amp;style=flat-square[12]: https://img.shields.io/codacy/grade/cf1c6c97e5c4480386a05b42dec10c6e?style=flat-square[13]: https://app.codacy.com/gh/pwwang/pipen[14]: https://img.shields.io/codacy/coverage/cf1c6c97e5c4480386a05b42dec10c6e?style=flat-square[15]: https://github.com/pwwang/pipen-verbose[16]: https://github.com/pwwang/pipen-report[17]: https://github.com/pwwang/pipen-filters[18]: https://github.com/pwwang/pipen-diagram[19]: https://github.com/pwwang/pipen-args[20]: https://github.com/pwwang/pipen-dry[21]: https://github.com/pwwang/pipen-cli-init[22]: https://github.com/pwwang/pipen-cli-run[23]: https://libraries.io/github/pwwang/pipen#repository_dependencies[24]: https://github.com/pwwang/pipen-cli-require[25]: https://github.com/pwwang/pipen-lock[26]: https://github.com/pwwang/pipen-annotate[27]: https://github.com/pwwang/pipen-board[28]: https://github.com/pwwang/pipen-log2file[29]: https://github.com/pwwang/pipen-runinfo</longdescription>
</pkgmetadata>