<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![isort - isort your imports, so you don't have to.](https://raw.githubusercontent.com/pycqa/isort/main/art/logo_large.png)](https://pycqa.github.io/isort/)------------------------------------------------------------------------[![PyPI version](https://badge.fury.io/py/isort.svg)](https://badge.fury.io/py/isort)[![Test Status](https://github.com/pycqa/isort/workflows/Test/badge.svg?branch=develop)](https://github.com/pycqa/isort/actions?query=workflow%3ATest)[![Lint Status](https://github.com/pycqa/isort/workflows/Lint/badge.svg?branch=develop)](https://github.com/pycqa/isort/actions?query=workflow%3ALint)[![Code coverage Status](https://codecov.io/gh/pycqa/isort/branch/main/graph/badge.svg)](https://codecov.io/gh/pycqa/isort)[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.org/project/isort/)[![Join the chat at https://gitter.im/timothycrosley/isort](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/timothycrosley/isort?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)[![Downloads](https://pepy.tech/badge/isort)](https://pepy.tech/project/isort)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)[![DeepSource](https://static.deepsource.io/deepsource-badge-light-mini.svg)](https://deepsource.io/gh/pycqa/isort/?ref=repository-badge)_________________[Read Latest Documentation](https://pycqa.github.io/isort/) - [Browse GitHub Code Repository](https://github.com/pycqa/isort/)_________________isort your imports, so you don't have to.isort is a Python utility / library to sort imports alphabetically, andautomatically separated into sections and by type. It provides a command lineutility, Python library and [plugins for variouseditors](https://github.com/pycqa/isort/wiki/isort-Plugins) toquickly sort all your imports. It requires Python 3.8+ to run butsupports formatting Python 2 code too.- [Try isort now from your browser!](https://pycqa.github.io/isort/docs/quick_start/0.-try.html)- [Using black? See the isort and black compatibility guide.](https://pycqa.github.io/isort/docs/configuration/black_compatibility.html)- [isort has official support for pre-commit!](https://pycqa.github.io/isort/docs/configuration/pre-commit.html)![Example Usage](https://raw.github.com/pycqa/isort/main/example.gif)Before isort:```pythonfrom my_lib import Objectimport osfrom my_lib import Object3from my_lib import Object2import sysfrom third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14import sysfrom __future__ import absolute_importfrom third_party import lib3print(&quot;Hey&quot;)print(&quot;yo&quot;)```After isort:```pythonfrom __future__ import absolute_importimport osimport sysfrom third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,                         lib9, lib10, lib11, lib12, lib13, lib14, lib15)from my_lib import Object, Object2, Object3print(&quot;Hey&quot;)print(&quot;yo&quot;)```## Installing isortInstalling isort is as simple as:```bashpip install isort```Install isort with requirements.txt support:```bashpip install isort[requirements_deprecated_finder]```Install isort with Pipfile support:```bashpip install isort[pipfile_deprecated_finder]```Install isort with both formats support:```bashpip install isort[requirements_deprecated_finder,pipfile_deprecated_finder]```## Using isort**From the command line**:To run on specific files:```bashisort mypythonfile.py mypythonfile2.py```To apply recursively:```bashisort .```If [globstar](https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html)is enabled, `isort .` is equivalent to:```bashisort **/*.py```To view proposed changes without applying them:```bashisort mypythonfile.py --diff```Finally, to atomically run isort against a project, only applyingchanges if they don't introduce syntax errors:```bashisort --atomic .```(Note: this is disabled by default, as it prevents isort fromrunning against code written using a different version of Python.)**From within Python**:```pythonimport isortisort.file(&quot;pythonfile.py&quot;)```or:```pythonimport isortsorted_code = isort.code(&quot;import b\nimport a\n&quot;)```## Installing isort's for your preferred text editorSeveral plugins have been written that enable to use isort from within avariety of text-editors. You can find a full list of them [on the isortwiki](https://github.com/pycqa/isort/wiki/isort-Plugins).Additionally, I will enthusiastically accept pull requests that includeplugins for other text editors and add documentation for them as I amnotified.## Multi line output modesYou will notice above the \&quot;multi\_line\_output\&quot; setting. This settingdefines how from imports wrap when they extend past the line\_lengthlimit and has [12 possible settings](https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html).## IndentationTo change the how constant indents appear - simply change theindent property with the following accepted formats:-   Number of spaces you would like. For example: 4 would cause standard    4 space indentation.-   Tab-   A verbatim string with quotes around it.For example:```python&quot;    &quot;```is equivalent to 4.For the import styles that use parentheses, you can control whether ornot to include a trailing comma after the last import with the`include_trailing_comma` option (defaults to `False`).## Intelligently Balanced Multi-line ImportsAs of isort 3.1.0 support for balanced multi-line imports has beenadded. With this enabled isort will dynamically change the import lengthto the one that produces the most balanced grid, while staying below themaximum import length defined.Example:```pythonfrom __future__ import (absolute_import, division,                        print_function, unicode_literals)```Will be produced instead of:```pythonfrom __future__ import (absolute_import, division, print_function,                        unicode_literals)```To enable this set `balanced_wrapping` to `True` in your config or passthe `-e` option into the command line utility.## Custom Sections and Orderingisort provides configuration options to change almost every aspect of howimports are organized, ordered, or grouped together in sections.[Click here](https://pycqa.github.io/isort/docs/configuration/custom_sections_and_ordering.html) for an overview of all these options.## Skip processing of imports (outside of configuration)To make isort ignore a single import simply add a comment at the end ofthe import line containing the text `isort:skip`:```pythonimport module  # isort:skip```or:```pythonfrom xyz import (abc,  # isort:skip                 yo,                 hey)```To make isort skip an entire file simply add `isort:skip_file` to themodule's doc string:```python&quot;&quot;&quot; my_module.py    Best module ever   isort:skip_file&quot;&quot;&quot;import bimport a```## Adding or removing an import from multiple filesisort can be ran or configured to add / remove imports automatically.[See a complete guide here.](https://pycqa.github.io/isort/docs/configuration/add_or_remove_imports.html)## Using isort to verify codeThe `--check-only` option-------------------------isort can also be used to verify that code is correctly formattedby running it with `-c`. Any files that contain incorrectly sortedand/or formatted imports will be outputted to `stderr`.```bashisort **/*.py -c -vSUCCESS: /home/timothy/Projects/Open_Source/isort/isort_kate_plugin.py Everything Looks Good!ERROR: /home/timothy/Projects/Open_Source/isort/isort/isort.py Imports are incorrectly sorted.```One great place this can be used is with a pre-commit git hook, such asthis one by \@acdha:&lt;https://gist.github.com/acdha/8717683&gt;This can help to ensure a certain level of code quality throughout aproject.## Git hookisort provides a hook function that can be integrated into your Gitpre-commit script to check Python code before committing.[More info here.](https://pycqa.github.io/isort/docs/configuration/git_hook.html)## Setuptools integrationUpon installation, isort enables a `setuptools` command that checksPython files declared by your project.[More info here.](https://pycqa.github.io/isort/docs/configuration/setuptools_integration.html)## Spread the word[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)Place this badge at the top of your repository to let others know your project uses isort.For README.md:```markdown[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)```Or README.rst:```rst.. image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336    :target: https://pycqa.github.io/isort/```## Security contact informationTo report a security vulnerability, please use the [Tidelift securitycontact](https://tidelift.com/security). Tidelift will coordinate thefix and disclosure.## Why isort?isort simply stands for import sort. It was originally called&quot;sortImports&quot; however I got tired of typing the extra characters andcame to the realization camelCase is not pythonic.I wrote isort because in an organization I used to work in the managercame in one day and decided all code must have alphabetically sortedimports. The code base was huge - and he meant for us to do it by hand.However, being a programmer - I\'m too lazy to spend 8 hours mindlesslyperforming a function, but not too lazy to spend 16 hours automating it.I was given permission to open source sortImports and here we are :)------------------------------------------------------------------------[Get professionally supported isort with the TideliftSubscription](https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&amp;utm_medium=referral&amp;utm_campaign=readme)Professional support for isort is available as part of the [TideliftSubscription](https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&amp;utm_medium=referral&amp;utm_campaign=readme).Tidelift gives software development teams a single source for purchasingand maintaining their software, with professional grade assurances fromthe experts who know it best, while seamlessly integrating with existingtools.------------------------------------------------------------------------Thanks and I hope you find isort useful!~Timothy Crosley</longdescription>
</pkgmetadata>