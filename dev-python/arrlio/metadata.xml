<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Arrlio [WIP][Documentation](https://levsh.github.io/arrlio) (WIP)Asyncio distributed task/workflow system with supports generators and graphs![tests](https://github.com/levsh/arrlio/workflows/tests/badge.svg)![coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/levsh/727ed723ccaee0d5825513af6472e3a5/raw/coverage.json)[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)### Installation```bashpip install arrlio```Or to use latest develop version```bashpip install git+https://github.com/levsh/arrlio```### Usage#### Create tasks file```python# tasks.pyimport ioimport arrlioimport invoke@arrlio.taskasync def hello_world():    return &quot;Hello World!&quot;# task custom name@arrlio.task(name=&quot;foo&quot;)async def foo():    arrlio.logger.info(&quot;Hello from task 'foo'!&quot;)# access to task object as self argument@arrlio.task(bind=True)async def bind(self):    arrlio.logger.info(self.data.task_id)    arrlio.logger.info(self)# exception example@arrlio.taskasync def exception():    raise ZeroDivisionError# Arrlio supports generators and async generators@arrlio.taskdef xrange(count):    for x in range(count):        yield x@arrlio.taskasync def add_one(value: str):    return int(value) + 1@arrlio.taskasync def bash(cmd, stdin: str = None):    in_stream = io.StringIO(stdin)    out_stream = io.StringIO()    result = invoke.run(        cmd,        in_stream=in_stream,        out_stream=out_stream    )    return result.stdout```#### Create main file and run it```pythonimport asyncioimport loggingimport arrlioimport taskslogger = logging.getLogger(&quot;arrlio&quot;)logger.setLevel(&quot;INFO&quot;)BACKEND = &quot;arrlio.backends.local&quot;# BACKEND = &quot;arrlio.backends.rabbitmq&quot;async def main():    app = arrlio.App(arrlio.Config(backend={&quot;module&quot;: BACKEND}))    async with app:        await app.consume_tasks()        # call by task object        ar = await app.send_task(tasks.hello_world)        logger.info(await ar.get())        # call by task name        ar = await app.send_task(&quot;foo&quot;)        logger.info(await ar.get())        # task args example        ar = await app.send_task(tasks.add_one, args=(1,))        logger.info(await ar.get())        # exception example        try:            ar = await app.send_task(tasks.exception)            logger.info(await ar.get())        except Exception as e:            print(f&quot;\nThis is example exception for {app.backend}:\n&quot;)            logger.exception(e)            print()        # generator example        results = []        ar = await app.send_task(tasks.xrange, args=(3,))        async for result in ar:            results.append(result)        logger.info(results)  # -&gt; [0, 1, 2]if __name__ == &quot;__main__&quot;:    asyncio.run(main())```#### Arrlio supports graph execution```pythonimport asyncioimport loggingimport arrlioimport taskslogger = logging.getLogger(&quot;arrlio&quot;)logger.setLevel(&quot;INFO&quot;)BACKEND = &quot;arrlio.backends.local&quot;# BACKEND = &quot;arrlio.backends.rabbitmq&quot;async def main():    graph = arrlio.Graph(&quot;My Graph&quot;)    graph.add_node(&quot;A&quot;, tasks.add_one, root=True)    graph.add_node(&quot;B&quot;, tasks.add_one)    graph.add_node(&quot;C&quot;, tasks.add_one)    graph.add_edge(&quot;A&quot;, &quot;B&quot;)    graph.add_edge(&quot;B&quot;, &quot;C&quot;)# arrlio.plugins.events and arrlio.plugins.graphs# plugins are required    app = arrlio.App(        arrlio.Config(            backend={&quot;module&quot;: BACKEND},            plugins=[                {&quot;module&quot;: &quot;arrlio.plugins.events&quot;},                {&quot;module&quot;: &quot;arrlio.plugins.graphs&quot;},            ],        )    )    async with app:        await app.consume_tasks()# execute graph with argument 0        ars = await app.send_graph(graph, args=(0,))        logger.info(&quot;A: %i&quot;, await ars[&quot;A&quot;].get())  # -&gt; A: 1        logger.info(&quot;B: %i&quot;, await ars[&quot;B&quot;].get())  # -&gt; B: 2        logger.info(&quot;C: %i&quot;, await ars[&quot;C&quot;].get())  # -&gt; C: 3if __name__ == &quot;__main__&quot;:    asyncio.run(main())```#### Another graph example```pythonimport asyncioimport loggingimport arrlioimport taskslogger = logging.getLogger(&quot;arrlio&quot;)logger.setLevel(&quot;INFO&quot;)BACKEND = &quot;arrlio.backends.local&quot;# BACKEND = &quot;arrlio.backends.rabbitmq&quot;async def main():    graph = arrlio.Graph(&quot;My Graph&quot;)    graph.add_node(&quot;A&quot;, tasks.bash, root=True)    graph.add_node(&quot;B&quot;, tasks.bash, args=(&quot;wc -w&quot;,))    graph.add_edge(&quot;A&quot;, &quot;B&quot;)    app = arrlio.App(        arrlio.Config(            backend={&quot;module&quot;: BACKEND},            plugins=[                {&quot;module&quot;: &quot;arrlio.plugins.events&quot;},                {&quot;module&quot;: &quot;arrlio.plugins.graphs&quot;},            ],        )    )    async with app:        await app.consume_tasks()        ars = await app.send_graph(            graph,            args=('echo &quot;Number of words in this sentence:&quot;',)        )        logger.info(await asyncio.wait_for(ars[&quot;B&quot;].get(), timeout=2))  # -&gt; 6if __name__ == &quot;__main__&quot;:    asyncio.run(main())```#### And more examples```bashpoetry installpoetry run python examples/main.py```</longdescription>
</pkgmetadata>