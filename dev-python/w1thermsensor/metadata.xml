<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># W1ThermSensor[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/timofurrer/w1thermsensor?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)&gt; Get the temperature from your w1 therm sensor in a single line of code!&lt;br&gt;&gt; It's designed to be used with the Rasperry Pi hardware but also works on a Beagle Bone and others.***![CI](https://github.com/timofurrer/w1thermsensor/workflows/CI/badge.svg)[![PyPI version](https://badge.fury.io/py/w1thermsensor.svg)](https://badge.fury.io/py/w1thermsensor)[![codecov.io](http://codecov.io/github/timofurrer/w1thermsensor/coverage.svg?branch=master)](http://codecov.io/github/timofurrer/w1thermsensor?branch=master)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)**Raspberry Pi:** this package is available in Raspbian as `python-w1thermsensor` and `python3-w1thermsensor`.**Python 2 drop**: all w1thermsensor releases from 2.0 are Python 3.5+## Supported devicesThe following w1 therm sensor devices are supported:* DS18S20* DS1822* DS18B20* DS28EA00* DS1825/MAX31850K## SetupThe following hardware is needed:* w1 therm compatible sensor (some of them can be bought here: [Adafruit: DS18B20](https://www.adafruit.com/search?q=DS18B20))* wires to connect the sensor to your board (you might need a breadboard, too)* a board like the Raspberry Pi or the Beagle BoneOn the Raspberry Pi, you will need to add `dtoverlay=w1-gpio` (for regular connection) or `dtoverlay=w1-gpio,pullup=&quot;y&quot;` (for parasitic connection) to your /boot/config.txt. The default data pin is GPIO4 (RaspPi connector pin 7), but that can be changed from 4 to `x` with `dtoverlay=w1-gpio,gpiopin=x`.After that, don't forget to reboot.### Hardware-connection    Raspi VCC (3V3) Pin 1 -----------------------------   VCC    DS18B20                                                   |                                                   |                                                   R1 = 4k7 ...10k                                                   |                                                   |    Raspi GPIO 4    Pin 7 -----------------------------   Data   DS18B20           (BCM)    (BOARD)    Raspi GND       Pin 6 -----------------------------   GND    DS18B20### Soft-pull-upAlternatively to the hardware pull-up made by a physical resistor, or to the above mentioned software configuration `dtoverlay=w1-gpio,pullup=&quot;y&quot;` in /boot/config.txt, the following soft pull-up can be used:```pythonimport RPi.GPIO as GPIOGPIO.setmode(GPIO.BCM)GPIO.setup(4, GPIO.IN, pull_up_down=GPIO.PUD_UP)```When using this software pull-up, 1-Wire devices will be visible to the kernel only while the program pulls the GPIO pin up.### Hw device connection verificationRun the following command:```bashls -l /sys/bus/w1/devices```You should check the availability of one or more filenames starting with &quot;28-&quot;.Filenames starting with &quot;00-&quot; possibly mean that the pull-up resistor is missing.1-Wire devices can be plugged in dynamically and are visible to the kernel driver just after their hw connection.To test reading the temperature, issue the following command:```bashfor i in /sys/bus/w1/devices/28-*; do cat $i/w1_slave; done```## Installation### From PIPThis possibility is supported on all distributions:    pip install w1thermsensor*Note: maybe root privileges are required*Use the `async` extra to add support for asyncio and `AsyncW1ThermSensor`:    pip install w1thermsensor[async]### On Raspbian using `apt-get`If you are using the `w1thermsensor` module on a Rasperry Pi running Raspbian you can install it from the official repository:```bashsudo apt-get install python3-w1thermsensor```**Note:** For older versions of this package you might get the following error: `ImportError: No module named 'pkg_resources'` which indicates that you need to install `python-setuptools` or `python3-setuptools` respectively.### Manually build and install the debian package    debuild -us -uc    dpkg -i ../python3-w1thermsensor_*.deb## Usage as python packageThe usage is very simple and the interface clean..All examples are with the `DS18B20` sensor - It works the same way for the other supported devices.### Basic usage with one sensor (implicit)```pythonfrom w1thermsensor import W1ThermSensor, Unitsensor = W1ThermSensor()temperature_in_celsius = sensor.get_temperature()temperature_in_fahrenheit = sensor.get_temperature(Unit.DEGREES_F)temperature_in_all_units = sensor.get_temperatures([    Unit.DEGREES_C,    Unit.DEGREES_F,    Unit.KELVIN])```The need kernel modules will be automatically loaded in the constructor of the `W1ThermSensor` class. &lt;br&gt;If something went wrong an exception is raised.*The first found sensor will be taken*### Basic usage with one sensor (explicit)The DS18B20 sensor with the ID `00000588806a` will be taken.```pythonfrom w1thermsensor import W1ThermSensor, Sensorsensor = W1ThermSensor(sensor_type=Sensor.DS18B20, sensor_id=&quot;00000588806a&quot;)temperature_in_celsius = sensor.get_temperature()```### Multiple sensorsWith the `get_available_sensors` class-method you can get the ids of all available sensors.```pythonfrom w1thermsensor import W1ThermSensorfor sensor in W1ThermSensor.get_available_sensors():    print(&quot;Sensor %s has temperature %.2f&quot; % (sensor.id, sensor.get_temperature()))```Only sensors of a specific therm sensor type:```pythonfrom w1thermsensor import W1ThermSensor, Sensorfor sensor in W1ThermSensor.get_available_sensors([Sensor.DS18B20]):    print(&quot;Sensor %s has temperature %.2f&quot; % (sensor.id, sensor.get_temperature()))```### Set sensor resolutionSome w1 therm sensors support changing the resolution for the temperature reads.`w1thermsensor` enables to do so with the `W1ThermSensor.set_resolution()` method:```pythonsensor = W1ThermSensor(sensor_type=Sensor.DS18B20, sensor_id=&quot;00000588806a&quot;)sensor.set_resolution(9)```If the ``persist`` argument is set to ``False`` this valueis &quot;only&quot; stored in the volatile SRAM, so it is reset whenthe sensor gets power-cycled.If the ``persist`` argument is set to ``True`` the current setresolution is stored into the EEPROM. Since the EEPROM has a limitedamount of writes (&gt;50k), this command should be used wisely.```pythonsensor = W1ThermSensor(sensor_type=Sensor.DS18B20, sensor_id=&quot;00000588806a&quot;)sensor.set_resolution(9, persist=True)```**Note**: this is supported since Linux Kernel 4.7&lt;br&gt;**Note**: this requires `root` privileges### Disable kernel module auto loadingUpon import of the `w1thermsensor` package the `w1-therm` and `w1-gpio` kernel modules get loaded automatically.This requires the python process to run as root. Sometimes that's not what you want, thus you can disable the auto loadingand load the kernel module yourself prior to talk to your sensors with `w1thermsensor`.You can disable the auto loading feature by setting the `W1THERMSENSOR_NO_KERNEL_MODULE` environment variable to `1`:```bash# set it globally for your shell so that sub-processes will inherit it.export W1THERMSENSOR_NO_KERNEL_MODULE=1# set it just for your Python processW1THERMSENSOR_NO_KERNEL_MODULE=1 python my_awesome_thermsensor_script.py```Every other values assigned to `W1THERMSENSOR_NO_KERNEL_MODULE` will case `w1thermsensor` to load the kernel modules.*Note: the examples above also apply for the CLI tool usage. See below.*### Correcting Temperatures / Sensor CalibrationCalibrating the temperature sensor relies on obtaining a measured high and measured low value thathave known reference values that can be used for correcting the sensor's readings.  The simplestway to do this is to measure the melting point and boiling point of water since those values areknown.  This method will only work with waterproof sensors - you will need a different mechanismfor obtaining measured values if you are not using a waterproof sensor.In order to obtain the `measured_low_point`, fill a container to 80% with ice and add water to theice until the ice is floating and water is at the surface.  Submerse your sensor in the ice water,ensuring it does not touch the container.  Wait 5 minutes for the temperature to stabilize in thecontainer and then once the sensor readings have stabilized for approximately 30 seconds (readingsremain consistent), record the value as the `measured_low_point`In order to obtain the `measured_high_point`, bring a pot of water to a rapid boil.  Place yoursensor in the boiling water, ensuring that it does not touch the pot.  Allow the sensor to come upto temperature and once it has stabilized for approximately 30 seconds (readings remainconsistent), record the value as the `measured_high_point`Generally speaking, the `reference_low_point` should be left at 0.0 unless you have some specialsituation that changes the melting point of water.  Because melting does not involve a gaseousphase change, the effects of air pressure and altitude on the melting point are minimal.The `reference_high_point` on the other hand is greatly impacted by air pressure (and thusaltitude).  For example, the boiling point of water is 100.0C at sea level, and is approximately72C at the summit of Mount Everest (8848m above sea level).  While air pressure is what actuallydictates boiling point, generally speaking altitude is a close enough approximation for most usecases.  [Engineering Toolbox](https://www.engineeringtoolbox.com/boiling-points-water-altitude-d_1344.html)has a page that gives you the boiling point of water at different altitudes.This method is derived from [this Instructable](https://www.instructables.com/Calibration-of-DS18B20-Sensor-With-Arduino-UNO/).```pythonfrom w1thermsensor.calibration_data import CalibrationDatafrom w1thermsensor import W1ThermSensor, Unitcalibration_data = CalibrationData(        measured_high_point=measured_high_point,        measured_low_point=measured_low_point,        reference_high_point=reference_high_point,        reference_low_point=reference_low_point, # optional, defaults to 0.0    )sensor = W1ThermSensor(calibration_data=calibration_data)corrected_temperature_in_celsius = sensor.get_corrected_temperature()corrected_temperature_in_fahrenheit = sensor.get_corrected_temperature(Unit.DEGREES_F)corrected_temperature_in_all_units = sensor.get_corrected_temperatures([    Unit.DEGREES_C,    Unit.DEGREES_F,    Unit.KELVIN])```### Async InterfaceThe `w1thermsensor` package implements an async interface `AsyncW1ThermSensor` for asyncio.The following methods are supported:* `get_temperature()`* `get_temperatures()`* `get_resolution()`For example:```pythonfrom w1thermsensor import AsyncW1ThermSensor, Unitsensor = AsyncW1ThermSensor()temperature_in_celsius = await sensor.get_temperature()temperature_in_fahrenheit = await sensor.get_temperature(Unit.DEGREES_F)temperature_in_all_units = await sensor.get_temperatures([    Unit.DEGREES_C,    Unit.DEGREES_F,    Unit.KELVIN])```## Usage as CLI toolThe w1thermsensor module can be used as CLI tool since version `0.3.0`. &lt;br&gt;*Please note that the CLI tool will only get installed with the Raspbian Python 3 package* (`sudo apt-get install python3-w1thermsensor`)### List sensorsList all available sensors:```$ w1thermsensor ls$ w1thermsensor ls --json  # show results in JSON format```List only sensors of a specific type:```$ w1thermsensor ls --type DS1822$ w1thermsensor ls --type DS1822 --type MAX31850K  # specify multiple sensor types$ w1thermsensor ls --type DS1822 --json  # show results in JSON format```### Show temperaturesShow temperature of all available sensors: (Same synopsis as `ls`)```$ w1thermsensor all --type DS1822$ w1thermsensor all --type DS1822 --type MAX31850K  # specify multiple sensor types$ w1thermsensor all --type DS1822 --json  # show results in JSON format```Show temperature of a single sensor:```$ w1thermsensor get 1  # 1 is the id obtained by the ls command$ w1thermsensor get --hwid 00000588806a --type DS18B20$ w1thermsensor get 1  # show results in JSON format```Show temperature of a single sensor in the given resolution```$ w1thermsensor get 1 --resolution 10$ w1thermsensor get --hwid 00000588806a --type DS18B20 --resolution 11```### Change temperature read resolution and write to EEPROM```# w1thermsensor resolution 10 1# w1thermsensor resolution --hwid 00000588806a --type DS18B20 11```**Note**: this requires `root` privileges## ContributionI'm happy about all types of contributions to this project! :beers:****&lt;p align=&quot;center&quot;&gt;This project is published under [MIT](LICENSE).&lt;br&gt;A [Timo Furrer](https://tuxtimo.me) project.&lt;br&gt;- :tada: -&lt;/p&gt;*</longdescription>
</pkgmetadata>