<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Based on [react-graph-vis](https://github.com/crubier/react-graph-vis)## Install`pip install streamlit-agraph`## Example App Check out the example [App](https://marvelous-graph.streamlit.app)!## Basic Usage```pythonimport streamlitfrom streamlit_agraph import agraph, Node, Edge, Confignodes = []edges = []nodes.append( Node(id=&quot;Spiderman&quot;,                    label=&quot;Peter Parker&quot;,                    size=25,                    shape=&quot;circularImage&quot;,                   image=&quot;http://marvel-force-chart.surge.sh/marvel_force_chart_img/top_spiderman.png&quot;)             ) # includes **kwargsnodes.append( Node(id=&quot;Captain_Marvel&quot;,                    size=25,                   shape=&quot;circularImage&quot;,                   image=&quot;http://marvel-force-chart.surge.sh/marvel_force_chart_img/top_captainmarvel.png&quot;)             )edges.append( Edge(source=&quot;Captain_Marvel&quot;,                    label=&quot;friend_of&quot;,                    target=&quot;Spiderman&quot;,                    # **kwargs                   )             ) config = Config(width=750,                height=950,                directed=True,                 physics=True,                 hierarchical=False,                # **kwargs                )return_value = agraph(nodes=nodes,                       edges=edges,                       config=config)```## Config Bilder```pythonfrom streamlit_agraph.config import Config, ConfigBuilder# 1. Build the config (with sidebar to play with options) .config_builder = ConfigBuilder(nodes)config = config_builder.build()# 2. If your done, save the config to a file.config.save(&quot;config.json&quot;)# 3. Simple reload from json file (you can bump the builder at this point.)config = Config(from_json=&quot;config.json&quot;)```Formating the graph with hierachies is also possible via `Hierarchical Option` (see config):  Group as you can see on the node colors too. Just pass the `group` attribute to the `Node` object.![marvel.png](imgs/marvel_tree.png)## TripleStoreYou may also want to use the TripleStore (untested &amp; incomplete - yet):  HINT: Make sure to add only unique nodes and edges.```python# Currently not workin since update to agraph 2.0 - work in progressfrom rdflib import Graphfrom streamlit_agraph import TripleStore, agraphgraph = Graph()graph.parse(&quot;http://www.w3.org/People/Berners-Lee/card&quot;)store = TripleStore()for subj, pred, obj in graph:    store.add_triple(subj, pred, obj, &quot;&quot;)    agraph(list(store.getNodes()), list(store.getEdges()), config)```Also graph algos can dirctly supported via the networkx API (untested &amp; incomplete - yet):```pythonfrom streamlit_agraph import GraphAlgosalgos = GraphAlgos(store)algos.shortest_path(&quot;Spiderman&quot;, &quot;Captain_Marvel&quot;)algos.density()```</longdescription>
</pkgmetadata>