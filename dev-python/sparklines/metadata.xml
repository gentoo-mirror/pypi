<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Sparklines==========|ci| |pypi|.. |ci| image:: http://img.shields.io/travis/deeplook/sparklines.svg  :target: https://travis-ci.org/deeplook/sparklines.. |pypi| image:: https://img.shields.io/pypi/v/sparklines.svg  :target: https://pypi.python.org/pypi/sparklinesThis Python package implements Edward Tufte's concept of sparklines_, butlimited to text only e.g. like this: ▃▁▄▁▅█▂▅ (this I likely not displayedcorrectly in every browser). You can find more information about sparklines`on Wikipedia`_. This code was mainly developed for running simpleplausibility tests in sensor networks as shown in fig. 1 below:.. figure:: https://raw.githubusercontent.com/deeplook/sparklines/master/example_sensors.png   :width: 75%   :alt: example usecase with sensor values   :align: center   Fig. 1: Example usecase for such &quot;sparklines&quot; on the command-line,   showing IoT sensor values (generating code not included here).Due to limitations of available Unicode characters this works best when allvalues are positive. And even then true sparklines that look more like linesand less like bars are a real challenge, because they would need multiplecharacters with a single horizontal line on different vertical positions. Thiswould work only with a dedicated font, which is way beyond the scope of thistool and which would significantly complicate its usage. So we stick to thesecharacters: &quot;▁▂▃▄▅▆▇█&quot;, and use a blank for missing values.This code was tested ok for Python 2.6 to 2.7 and 3.2 to 3.5.Sample output-------------This is a recorded sample session illustrating how to use ``sparklines`` (asGitHub doesn't render embedded Asciinema_ recordings you'll see here an imagepointing to the respective`asciicast &lt;https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hep&gt;`_):.. image:: https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hep.png   :target: https://asciinema.org/a/5xwfvcrrk09fy3ml3a8n67hepHere is some example output on the command-line (please note that in somebrowsers the vertical alignment of these block characters might be displayedslightly wrong, the same effect can be seen for other repos referenced below):Examples for the code below:.. code-block:: bash    $ sparklines 2 7 1 8 2 8 1 8    ▂▇▁█▂█▁█    $ echo 2 7 1 8 2 8 1 8 | sparklines    ▂▇▁█▂█▁█    $ sparklines &lt; numbers.txt    ▂▇▁█▂█▁█    $ sparklines 0 2. 1e0    ▁█▅Installation------------You can install this package using ``pip install sparklines`` from the `PythonPackage Index`_.You can also clone this repository and install it via ``python setup.py install``or ``pip install -e .``.After installing, you will have access system-wide (or in your virtualenvif you have used that) to ``sparklines``, programmatically as well as via acommand-line tool with the same name.Test----To run the (still very small) &quot;test suite&quot;, download and unpack this repositoryor clone it, and run the command ``python setup.py test`` in the unpackedarchive. This will use a minified version of the ``pytest`` package includedin this package in the file ``test/runtests.py``. If you have the excellent``pytest`` package installed you can also run ``py.test test`` from the downloaded repository's root folder.Usage-----Please note that the samples below might look a little funky (misaligned or even colored) in some browsers, but it should be totally fine when you printthis in your terminal, Python or IPython session or your Python IDE of choice.Figure 2 below might sshow better what you should expect than the copied samplecode thereafter:.. figure:: https://raw.githubusercontent.com/deeplook/sparklines/master/example_python.png   :width: 65%   :alt: example interactive invocation   :align: center   Fig. 2: Example invocation from a Python and an IPython session.Command-Line............Here are two sample invocations from the command-line, copied into this README:.. code-block:: console    $ sparklines 1 2 3 4 5.0 null 3 2 1    ▁▃▅▆█ ▅▃▁    $ sparklines -n 2 1 2 3 4 5.0 null 3 2 1      ▁▅█ ▁      ▁▅███ █▅▁Programmatic............And here are sample invocations from interactive Python sessions, copied intothis README. The main function to use programmatically is ``sparklines.sparklines()``:.. code-block:: python    In [1]: from sparklines import sparklines    In [2]: for line in sparklines([1, 2, 3, 4, 5.0, None, 3, 2, 1]):       ...:     print(line)       ...:         ▁▃▅▆█ ▅▃▁    In [3]: for line in sparklines([1, 2, 3, 4, 5.0, None, 3, 2, 1], num_lines=2):        print(line)       ...:           ▁▅█ ▁      ▁▅███ █▅▁References----------This code was inspired by Zach Holman's `spark &lt;https://github.com/holman/spark&gt;`_, converted to a Python module by Kenneth Reitz as `spark.py &lt;https://raw.githubusercontent.com/kennethreitz/spark.py/master/spark.py&gt;`_ and by RegKrieg to a Python package named `pysparklines &lt;https://github.com/RedKrieg/pysparklines&gt;`_.And Roger Allen provides an even `shorter spark.py &lt;https://gist.githubusercontent.com/rogerallen/1368454/raw/b17e96b56ae881621a9f3b1508ca2e7fde3ec93e/spark.py&gt;`_.But since it is so short and easy to code in Python we can add a few niceextra features I was missing, like:- increasing resolution with multiple output lines per sparkline- showing gaps in input numbers for missing data- issuing warnings for negative values (allowed, but misleading)- highlighting values exceeding some threshold with a different  color (if ``termcolor`` package is available)- wrapping long sparklines at some max. length- (todo) adding separator characters like ``:`` at regular intervals.. _Asciinema: https://asciinema.org.. _Python Package Index: https://pypi.python.org/pypi/sparklines/.. _sparklines: http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR.. _on Wikipedia: https://en.wikipedia.org/wiki/Sparkline</longdescription>
</pkgmetadata>