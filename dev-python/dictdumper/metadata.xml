<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># DictDumper&amp;emsp; The `dictdumper` project is an open source Python program works as a stream formatted output dumper for `dict`.- [About](#about)    * `dictdumper.Dumper`    * `dictdumper.JSON`    * `dictdumper.PLIST`    * `dictdumper.Tree`    * `dictdumper.XML`    * `dictdumper.HTML`- [Installation](#installation)- [Usage](#usage)---### About&amp;emsp; Currently, it supports following formats -- - `dictdumper.Dumper` -- abstract base class of all dumpers - `dictdumper.JSON` -- dump JavaScript object notation (`JSON`) format file - `dictdumper.PLIST` -- dump Apple property list (`PLIST`) format file - `dictdumper.Tree` -- dump tree-view text (`TXT`) format file - `dictdumper.XML` -- dump extensible markup language (`XML`) file (__base class__) - `dictdumper.HTML` -- dump JavaScript file under `Vue.js` framework (__DEPRECATED__)![](https://github.com/JarryShaw/dictdumper/blob/master/doc/dictdumper.png)&amp;nbsp;### Installation:&gt; Note that `dictdumper` supports Python versions __2.7__ and all versions __since 3.0__```pip install dictdumper```&amp;nbsp;### Usage&amp;emsp; `dictdumper` is quite easy to use. After installation, importation, and initialisation, you can simple call the instance to dump contents.&gt; Take `dictdumper.Tree` for example```pythonimport dictdumperdumper = dictdumper.Tree('out.txt')test_1 = dict(    foo=-1,    bar='Hello, world!',    boo=dict(        foo_again=True,        bar_again=memoryview(b'bytes'),        boo_again=None,    ),)dumper(test_1, name='test_1')``````$ cat out.txttest_1  |-- foo -&gt; -1  |-- bar -&gt; Hello, world!  |-- boo        |-- foo_again -&gt; True        |-- bar_again        |     |-- type -&gt; memoryview        |     |-- value -&gt; 62 79 74 65 73        |     |-- text -&gt; bytes        |-- boo_again -&gt; NIL``````pythonimport datetimetest_2 = dict(    foo=[1, 2.0, 3],    bar=(1.0, bytearray(b'a long long bytes'), 3.0),    boo=dict(        foo_again=b'bytestring',        bar_again=datetime.datetime(2020, 1, 31, 20, 15, 10, 163010),        boo_again=float('-inf'),    ),)dumper(test_2, name='test_2')``````$ cat out.txttest_1  |-- foo -&gt; -1  |-- bar -&gt; Hello, world!  |-- boo        |-- foo_again -&gt; True        |-- bar_again        |     |-- type -&gt; memoryview        |     |-- value -&gt; 62 79 74 65 73        |     |-- text -&gt; bytes        |-- boo_again -&gt; NILtest_2  |-- foo  |     |--&gt; 1  |     |--&gt; 2.0  |     |--&gt; 3  |-- bar  |     |-- type -&gt; tuple  |     |-- value  |           |--&gt; 1.0  |           |--&gt; --  |           |     |-- type -&gt; bytearray  |           |     |-- value  |           |     |     |--&gt; 61 20 6c 6f 6e 67 20 6c 6f 6e 67 20 62 79 74 65  |           |     |          73  |           |     |-- text -&gt; a long long bytes  |           |--&gt; 3.0  |-- boo        |-- foo_again -&gt; 62 79 74 65 73 74 72 69 6e 67        |-- bar_again -&gt; 2020-01-31T20:15:10.163010        |-- boo_again -&gt; -Infinity``````pythontest_3 = dict(    foo=&quot;stringstringstringstringstringstringstringstringstringstring&quot;,    bar=[        &quot;s1&quot;, False, &quot;s3&quot;,    ],    boo=[        &quot;s4&quot;, dict(s=&quot;5&quot;, j=&quot;5&quot;), &quot;s6&quot;    ],    far=dict(        far_foo=[&quot;s1&quot;, &quot;s2&quot;, &quot;s3&quot;],        far_var=&quot;s4&quot;,    ),    biu=float('nan'),)dumper(test_3, name='test_3')``````$ cat out.txttest_1  |-- foo -&gt; -1  |-- bar -&gt; Hello, world!  |-- boo        |-- foo_again -&gt; True        |-- bar_again        |     |-- type -&gt; memoryview        |     |-- value -&gt; 62 79 74 65 73        |     |-- text -&gt; bytes        |-- boo_again -&gt; NILtest_2  |-- foo  |     |--&gt; 1  |     |--&gt; 2.0  |     |--&gt; 3  |-- bar  |     |-- type -&gt; tuple  |     |-- value  |           |--&gt; 1.0  |           |--&gt; --  |           |     |-- type -&gt; bytearray  |           |     |-- value  |           |     |     |--&gt; 61 20 6c 6f 6e 67 20 6c 6f 6e 67 20 62 79 74 65  |           |     |          73  |           |     |-- text -&gt; a long long bytes  |           |--&gt; 3.0  |-- boo        |-- foo_again -&gt; 62 79 74 65 73 74 72 69 6e 67        |-- bar_again -&gt; 2020-01-31T20:15:10.163010        |-- boo_again -&gt; -Infinitytest_3  |-- foo  |     |--&gt; stringstringstringstringstringstringstri  |          ngstringstringstring  |-- bar  |     |--&gt; s1  |     |--&gt; False  |     |--&gt; s3  |-- boo  |     |--&gt; s4  |     |--&gt; --  |     |     |-- s -&gt; 5  |     |     |-- j -&gt; 5  |     |--&gt; s6  |-- far  |     |-- far_foo  |     |     |--&gt; s1  |     |     |--&gt; s2  |     |     |--&gt; s3  |     |-- far_var -&gt; s4  |-- biu -&gt; NaN```</longdescription>
</pkgmetadata>