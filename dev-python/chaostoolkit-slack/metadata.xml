<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Chaos Toolkit Extension for Slack[![Build](https://github.com/chaostoolkit-incubator/chaostoolkit-slack/actions/workflows/build.yaml/badge.svg)](https://github.com/chaostoolkit-incubator/chaostoolkit-slack/actions/workflows/build.yaml)This project is an extension for the Chaos Toolkit to target [Slack][slack].[slack]: https://slack.com/## InstallThis package requires Python 3.7+To be used from your experiment, this package must be installed in the Pythonenvironment where [chaostoolkit][] already lives.[chaostoolkit]: https://github.com/chaostoolkit/chaostoolkit```$ pip install -U chaostoolkit-slack```### Slack AppTo use this extension, you need to create a Slack app in your workspace.Please follow the Slack documentation to create a basic app:https://api.slack.com/apps?new_app=1https://api.slack.com/tutorialsYou can start from this manifest if you want:```yamldisplay_information:  name: Chaos Toolkit events  long_description: Get live feedback information of all your Chaos Engineering    experiments executed from Chaos Toolkit. See which experiments deviated and    investigate their logs directly from a Slack thread.  description: Chaos Engineering experiments live events from Chaos Toolkit.  background_color: &quot;#ffffff&quot;settings:  org_deploy_enabled: false  socket_mode_enabled: false  is_hosted: false  token_rotation_enabled: falsefeatures:  bot_user:    display_name: chaostoolkitoauth_config:  scopes:    bot:      - channels:read      - chat:write      - files:write```Once your application is created, you may want to set the Chaos Toolkit[logo][logo] to clarify to your users where these messages come from.[logo]: https://chaostoolkit.org/resources/logos/### Slack TokenPlease follow the procedure on Slack to create a token suitable forAPI calls made using the Python client. The token should start with `xoxb-`.You can find the token in your app settings under the `OAuth &amp; Permissions`page.The token should have at least the following scopes:`channels:read`, `chat:write` and `files:write`[tokendoc]: https://api.slack.com/authentication/basics### Install your Slack appOnce created, you need to install the app in your workspace and invite it inany channel you wish to send events to. This channel will also have to be partspecified as a controls argument (see below).Now you should be good to go!## UsageCurrently, this extension only provides a control to send ChaosToolkit events to Slack channels.To use this extension, add the following to your experiment (or settings):```json&quot;secrets&quot;: {    &quot;slack&quot;: {        &quot;token&quot;: &quot;xoxb-...&quot;    }},&quot;controls&quot;: [    {        &quot;name&quot;: &quot;slack&quot;,        &quot;provider&quot;: {            &quot;type&quot;: &quot;python&quot;,            &quot;module&quot;: &quot;chaosslack.control&quot;,            &quot;secrets&quot;: [&quot;slack&quot;],            &quot;arguments&quot;: {                &quot;channel&quot;: &quot;general&quot;            }        }    }]```## ContributeIf you wish to contribute more functions to this package, you are more thanwelcome to do so. Please fork this project, make your changes following theusual [PEP 8][pep8] code style, add appropriate tests and submit a PR forreview.[pep8]: https://pycodestyle.readthedocs.io/en/latest/The Chaos Toolkit projects require all contributors must sign a[Developer Certificate of Origin][dco] on each commit they would like to mergeinto the master branch of the repository. Please, make sure you can abide bythe rules of the DCO before submitting a PR.[dco]: https://github.com/probot/dco#how-it-works### DevelopIf you wish to develop on this project, make sure to install the developmentdependencies. But first, [create a virtual environment][venv] and then installthose dependencies.[venv]: https://docs.chaostoolkit.org/reference/usage/install/#create-a-virtual-environment```console$ pip install -r requirements-dev.txt -r requirements.txt```Then, point your environment to this directory:```console$ pip install -e .```Now, you can edit the files and they will be automatically be seen by yourenvironment, even when running from the `chaos` command locally.To run the tests for the project execute the following:```$ pytest```</longdescription>
</pkgmetadata>