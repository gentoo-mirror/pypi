<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![coeralls](https://coveralls.io/repos/github/zincware/ZnTrack/badge.svg)](https://coveralls.io/github/zincware/ZnTrack)[![codecov](https://codecov.io/gh/zincware/ZnTrack/branch/main/graph/badge.svg?token=ZQ67FXN1IT)](https://codecov.io/gh/zincware/ZnTrack)[![Maintainability](https://api.codeclimate.com/v1/badges/f25e119bbd5d5ec74e2c/maintainability)](https://codeclimate.com/github/zincware/ZnTrack/maintainability)![PyTest](https://github.com/zincware/ZnTrack/actions/workflows/test.yaml/badge.svg)[![PyPI version](https://badge.fury.io/py/zntrack.svg)](https://badge.fury.io/py/zntrack)[![code-style](https://img.shields.io/badge/code%20style-black-black)](https://github.com/psf/black/)[![Documentation](https://readthedocs.org/projects/zntrack/badge/?version=latest)](https://zntrack.readthedocs.io/en/latest/?badge=latest)[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/zincware/ZnTrack/HEAD)[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6472850.svg)](https://doi.org/10.5281/zenodo.6472850)[![ZnTrack](https://img.shields.io/badge/Powered%20by-ZnTrack-%23007CB0)](https://zntrack.readthedocs.io/en/latest/)[![zincware](https://img.shields.io/badge/Powered%20by-zincware-darkcyan)](https://github.com/zincware)![Logo](https://raw.githubusercontent.com/zincware/ZnTrack/main/docs/source/_static/logo_ZnTrack.png)# ZnTrack: A Parameter Tracking Package for PythonZnTrack `zɪŋk træk` is a lightweight and easy-to-use package for trackingparameters in your Python projects using DVC. With ZnTrack, you can defineparameters in Python classes and monitor how they change over time. Thisinformation can then be used to compare the results of different runs, identifycomputational bottlenecks, and avoid the re-running of code components whereparameters have not changed.## Key Features- Parameter, output and metric tracking: ZnTrack makes it easy to store and  track the values of parameters in your Python code. It further allows you to  store any outputs produced and gives an easy interface to define metrics.- Lightweight and database-free: Unlike other parameter tracking solutions,  ZnTrack is lightweight and does not require any databases.## Getting StartedTo get started with ZnTrack, you can install it via pip: `pip install zntrack`Next, you can start using ZnTrack to track parameters, outputs and metrics inyour Python code. Here's an example of how to use ZnTrack to track the value ofa parameter in a Python class. Start in an empty directory and run `git init`and `dvc init` for preparation.Then put the following into a python file called `hello_world.py` and call itwith `python hello_world.py`.```pythonfrom zntrack import Node, znfrom random import randrangeclass HelloWorld(Node):    &quot;&quot;&quot;Define a ZnTrack Node&quot;&quot;&quot;    # parameter to be tracked    max_number: int = zn.params()    # parameter to store as output    random_number: int = zn.outs()    def run(self):        &quot;&quot;&quot;Command to be run by DVC&quot;&quot;&quot;        self.random_number = randrange(self.max_number)if __name__ == &quot;__main__&quot;:    # Write the computational graph    with zntrack.Project() as project:        hello_world = HelloWorld(max_number=512)    project.run()```This will create a [DVC](https://dvc.org) stage `HelloWorld`. The workflow isdefined in `dvc.yaml` and the parameters are stored in `params.yaml`.This will run the workflow with `dvc repro` automatically. Once the graph isexecuted, the results, i.e. the random number can be accessed directly by theNode object.```pythonhello_world.load()print(hello_world.random_numer)```An overview of all the ZnTrack features as well as more detailed examples can befound in the [ZnTrack Documentation](https://zntrack.readthedocs.io/en/latest/).## Wrap Python FunctionsZnTrack also provides tools to convert a Python function into a DVC Node. Thisapproach is much more lightweight compared to the class-based approach with onlya reduced set of functionality. Therefore, it is recommended for smaller nodesthat do not need the additional toolset that the class-based approach provides.```pythonfrom zntrack import nodify, NodeConfigimport pathlib@nodify(outs=pathlib.Path(&quot;text.txt&quot;), params={&quot;text&quot;: &quot;Lorem Ipsum&quot;})def write_text(cfg: NodeConfig):    cfg.outs.write_text(        cfg.params.text    )# build the DVC graphwith zntrack.Project() as project:    write_text()project.run()```The `cfg` dataclass passed to the function provides access to all configuredfiles and parameters via [dot4dict](https://github.com/zincware/dot4dict). Thefunction body will be executed by the `dvc repro` command or if ran via`write_text(run=True)`. All parameters are loaded from or stored in`params.yaml`.# Technical Details## ZnTrack as an Object-Relational Mapping for DVCOn a fundamental level the ZnTrack package provides an easy-to-use interface forDVC directly from Python. It handles all the computational overhead of readingconfig files, defining outputs in the `dvc.yaml` as well as in the script andmuch more.For more information on DVC visit their [homepage](https://dvc.org/doc).# CopyrightThis project is distributed under the[Apache License Version 2.0](https://github.com/zincware/ZnTrack/blob/main/LICENSE).## Similar ToolsThe following (incomplete) list of other projects that either work together withZnTrack or can achieve similar results with slightly different goals orprogramming languages.- [DVC](https://dvc.org/) - Main dependency of ZnTrack for Data Version Control.- [dvthis](https://github.com/jcpsantiago/dvthis) - Introduce DVC to R.- [DAGsHub Client](https://github.com/DAGsHub/client) - Logging parameters from  within .Python- [MLFlow](https://mlflow.org/) - A Machine Learning Lifecycle Platform.- [Metaflow](https://metaflow.org/) - A framework for real-life data science.- [Hydra](https://hydra.cc/) - A framework for elegantly configuring complex  applications</longdescription>
</pkgmetadata>