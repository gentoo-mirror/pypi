<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyTONLib[![PyPI](https://img.shields.io/pypi/v/pytonlib?color=blue)](https://pypi.org/project/pytonlib/)[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytonlib)](https://pypi.org/project/pytonlib/)![Github last commit](https://img.shields.io/github/last-commit/toncenter/pytonlib)This is standalone Python library based on `libtonlibjson`, the functionality is similar to the [ton-http-api](https://github.com/toncenter/ton-http-api) with the following restrictions:* a client can connect to only one LiteServer;* a client is asyncronious;* no requests cache.## Installation### From PyPiCurrently, the library works for Windows, Mac and Linux only on Intel CPUs:* (Windows) Install OpenSSL v1.1.1 for Win64 from [here](https://slproweb.com/products/Win32OpenSSL.html).* Install Python 3 package: `pip3 install pytonlib`.### DockerIn this repo Compose file is provided to deploy the example of service with *pytonlib*:```bashdocker-compose -f docker-compose.jupyter.yaml builddocker-compose -f docker-compose.jupyter.yaml up -d```Jupyter Notebook will be available on port 3100 (http://localhost:3100).## ExamplesWe recommend to use IPython or Jupyter Notebook for prototyping because they allow to run `async` code. An example of running `async` code from script could be found in the end of this section.* Connecting to the first LiteServer in mainnet config:```pythonimport requestsimport asynciofrom pathlib import Pathfrom pytonlib import TonlibClient# downloading mainnet configton_config = requests.get('https://ton.org/global.config.json').json()# create keystore directory for tonlibkeystore_dir = '/tmp/ton_keystore'Path(keystore_dir).mkdir(parents=True, exist_ok=True)# init TonlibClientclient = TonlibClient(ls_index=0, # choose LiteServer index to connect                      config=ton_config,                      keystore=keystore_dir)# init tonlibjsonawait client.init()```* Reading blocks info:```pythonmasterchain_info = await client.get_masterchain_info()block_header = await client.get_block_header(**masterchain_info['last'])shards = await client.get_shards(master_seqno=masterchain_info['last']['seqno'])```* Reading Block Transactions for masterchain block:```pythonmasterchain_info = await client.get_masterchain_info()txs = await client.get_block_transactions(**masterchain_info['last'], count=10)```* Running async code from script:```pythonimport requestsimport asynciofrom pathlib import Pathfrom pytonlib import TonlibClientasync def main():    loop = asyncio.get_running_loop()    ton_config = requests.get('https://ton.org/global.config.json').json()    # create keystore directory for tonlib    keystore_dir = '/tmp/ton_keystore'    Path(keystore_dir).mkdir(parents=True, exist_ok=True)    # init TonlibClient    client = TonlibClient(ls_index=0, # choose LiteServer index to connect                          config=ton_config,                          keystore=keystore_dir,                          loop=loop)    # init tonlibjson    await client.init()    # reading masterchain info    masterchain_info = await client.get_masterchain_info()    # closing session    await client.close()if __name__ == '__main__':    asyncio.run(main())```## Running testsTo run tests in *asyncio* mode use the following command: ```bashPYTHONPATH=./ pytest --asyncio-mode=strict tests/```</longdescription>
</pkgmetadata>