<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Supriya[![](https://img.shields.io/pypi/pyversions/supriya)]()[![](https://img.shields.io/pypi/l/supriya)]()[![](https://img.shields.io/github/actions/workflow/status/josiah-wolf-oberholtzer/supriya/test.yml?branch=main)]()[Supriya](https://github.com/josiah-wolf-oberholtzer/supriya) is a[Python](https://www.python.org/) API for[SuperCollider](http://supercollider.github.io/).Supriya lets you:- Boot and communicate with SuperCollider's ``scsynth`` synthesis engine:  [servers](http://josiahwolfoberholtzer.com/supriya/api/supriya/contexts/realtime.html)  in realtime.- Compile SuperCollider  [SynthDefs](http://josiahwolfoberholtzer.com/supriya/api/supriya/synthdefs/index.html)  natively in Python code- Explore  [nonrealtime](http://josiahwolfoberholtzer.com/supriya/api/supriya/contexts/nonrealtime.html)  composition with scores.- Build time-agnostic  [asyncio](https://docs.python.org/3/library/asyncio.html)-aware applications  with the  [context](http://josiahwolfoberholtzer.com/supriya/api/supriya/contexts/core.html)  interface.- Schedule  [patterns](http://josiahwolfoberholtzer.com/supriya/api/supriya/patterns/index.html)  and callbacks with tempo- and meter-aware  [clocks](http://josiahwolfoberholtzer.com/supriya/api/supriya/clocks/index.html)- Integrate with [IPython](http://ipython.org/),  [Sphinx](https://www.sphinx-doc.org/en/master/) and  [Graphviz](http://graphviz.org/)## Quickstart### 1. Get SupriyaInstall from PyPI:    pip install supriyaOr from source:    git clone https://github.com/josiah-wolf-oberholtzer/supriya.git    cd supriya    pip install -e .### 2. Get SuperColliderGet SuperCollider from http://supercollider.github.io/.### 3. Boot the serverStart your Python interpreter and import Supriya:    &gt;&gt;&gt; import supriyaBoot the SuperCollider server:    &gt;&gt;&gt; server = supriya.Server().boot()### 4. Build a SynthDefImport some classes:    &gt;&gt;&gt; from supriya.ugens import EnvGen, Out, SinOsc    &gt;&gt;&gt; from supriya.synthdefs import Envelope, synthdefMake a synthesizer definition:    &gt;&gt;&gt; @synthdef()    ... def simple_sine(frequency=440, amplitude=0.1, gate=1):    ...     sine = SinOsc.ar(frequency=frequency) * amplitude    ...     envelope = EnvGen.kr(envelope=Envelope.adsr(), gate=gate, done_action=2)    ...     Out.ar(bus=0, source=[sine * envelope] * 2)    ...Visualize the SynthDef (requires [Graphviz](http://graphviz.org/)):        &gt;&gt;&gt; supriya.graph(simple_sine)&lt;img src=&quot;./graph.svg&quot;&gt;Allocate it on the server:    &gt;&gt;&gt; _ = server.add_synthdefs(simple_sine)### 5. Create some nodesCreate and allocate a group:    &gt;&gt;&gt; group = server.add_group()Create some synthesizers with the previously defined synthesizer definition, andallocate them on the server as a child of the previously created group:    &gt;&gt;&gt; for i in range(3):    ...     _ = group.add_synth(simple_sine, frequency=111 * (i + 1))    ...Query the server's node tree:    &gt;&gt;&gt; print(server.query_tree())    NODE TREE 0 group        1 group            1000 group                1003 simple_sine                    amplitude: 0.1, frequency: 333.0, gate: 1.0                1002 simple_sine                    amplitude: 0.1, frequency: 222.0, gate: 1.0                1001 simple_sine                    amplitude: 0.1, frequency: 111.0, gate: 1.0### 6. Release and quitRelease the synths:    &gt;&gt;&gt; for synth in group.children[:]:    ...     synth.free()    ...Quit the server:    &gt;&gt;&gt; server.quit()## LicenseThis library is made available under the terms of the MIT license.</longdescription>
</pkgmetadata>