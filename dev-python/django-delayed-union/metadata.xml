<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>========Overview========``django-delayed-union`` is library designed to workaround somedrawbacks with Django's union, intersection, and differenceoperations.  In particular, once one of these operations is performed,certain methods on the queryset will silently not work::  &gt;&gt;&gt; qs = User.objects.filter(id=1)  &gt;&gt;&gt; unioned_qs = qs.union(qs)  &gt;&gt;&gt; should_be_empty_qs = unioned_qs.exclude(id=1)  &gt;&gt;&gt; user, = list(should_be_empty_qs); user.id  1In order to work around this, ``django-delayed-union`` provideswrappers around a collection of querysets.  These wrappers implement asimilar interface to ``QuerySet``, and delay performing the union,intersection, or difference operations until they are needed::  &gt;&gt;&gt; from django_delayed_union import DelayedUnionQuerySet  &gt;&gt;&gt; qs = User.objects.filter(id=1)  &gt;&gt;&gt; unioned_qs = DelayedUnionQuerySet(qs, qs)  &gt;&gt;&gt; empty_qs = unioned_qs.exclude(id=1)  &gt;&gt;&gt; list(empty_qs)  []Operations which would typically return a new ``QuerySet`` insteadreturn a new ``DelayedQuerySet`` with the operation applied to itscollection of querysets.One example of where this code has been useful with is when the theMySQL query planner has chosen an inefficient query plan for thequeryset of a `Django REST Framework &lt;https://github.com/foo/&gt;`_ viewwhich used an ``OR`` condition.  By using ``DelayedUnionQuerySet``,subclasses could perform additional filters on the queryset whilestill maintaining the efficient query plan.* Free software: BSD 3-Clause LicenseInstallation============::    pip install django-delayed-unionDocumentation=============https://django-delayed-union.readthedocs.io/Development===========To run the all tests run::    toxChangelog=========0.1.7 (2022-01-12)------------------* Fixed setup.py metadata0.1.6 (2022-01-12)------------------* Added support for Django 3.2 and 4.0.* Dropped Python 2 support.0.1.5 (2020-04-14)------------------* Added support for Python 3.8 and Django 3.00.1.4 (2019-10-19)------------------* Added query property to delayed querysets.* Fixed bug with count() and select_related() in MySQL* Added tests for Django 3.00.1.3 (2019-04-24)------------------* Added tests for Django 2.20.1.2 (2018-12-14)------------------* Added support for nested unions and intersections0.1.1 (2018-07-16)------------------* Cached the queryset generated after applying the delayed operation.0.1.0 (2018-03-14)------------------* First release on PyPI.</longdescription>
</pkgmetadata>