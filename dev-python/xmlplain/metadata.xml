<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># xmlplainXML as plain object utility module[![Build Status](https://secure.travis-ci.org/guillon/xmlplain.svg)](http://travis-ci.org/guillon/xmlplain)## SynopsysThis module is a set of utility functions for parsing self-containedXML input into plain list/dict/string types and emitting to/readingfrom XML or YAML formats.The motivating usage was to dump XML to YAML, manually editfiles as YAML, and emit XML output back.Though this module can be used more simply to dump compatible plainlist/dict/string objects into XML or YAML for textual storage.An XML file content when read to object and written back to XML hasall it's document strcuture and content preserved w.r.t. toelements start/end and text content.Though XML comments, document type specifications, externalentity definitions are discarded if present on input. External systementities (i.e. inclusion of external files) are not supportedand generate an input error.The input XML is just syntactically validated and does not validateagainst any DTD or schema specification as the underlying backendis the core xml.sax module.The only and optional destructive transformation on the documentcontent is a `strip_space` option on reading (resp. `pretty` optionon writing) which can affect non-leaf text content (strippingleading and trailing spaces).The XML namespaces are ignored as there is no actual schema validation,hence element, attribute names and namespaces URIs attributesare passed and preserved as-is.Note that there are alternative modules with nearly the samefunctionality, but none of them provide all of:- simple plain objects (dict, list, strings) dumped to/reloaded from XML- preservation of semi-structured XML documents (tags duplicates,  mixed text and tags) on input- management of human-editable form through YAML bridge## UsageIn order to convert a XML file to a YAML representation, for instance giventhe `tests/example-1.xml` file:```xml&lt;example&gt;  &lt;doc&gt;This is an example for xmlobj documentation. &lt;/doc&gt;  &lt;content version=&quot;beta&quot;&gt;    &lt;kind&gt;document&lt;/kind&gt;    &lt;class&gt;example&lt;/class&gt;    &lt;structured/&gt;    &lt;elements&gt;      &lt;item&gt;Elt 1&lt;/item&gt;      &lt;doc&gt;Elt 2&lt;/doc&gt;      &lt;item&gt;Elt 3&lt;/item&gt;      &lt;doc&gt;Elt 4&lt;/doc&gt;    &lt;/elements&gt;  &lt;/content&gt;&lt;/example&gt;```Execute the following python code:```pythonimport xmlplain# Read to plain objectwith open(&quot;tests/example-1.xml&quot;) as inf:  root = xmlplain.xml_to_obj(inf, strip_space=True, fold_dict=True)# Output plain YAMLwith open(&quot;example-1.yml&quot;, &quot;w&quot;) as outf:  xmlplain.obj_to_yaml(root, outf)```This will output the YAML representation in `example-1.yml`:```yamlexample:  doc: 'This is an example for xmlobj documentation. '  content:    '@version': beta    kind: document    class: example    structured: ''    elements:    - item: Elt 1    - doc: Elt 2    - item: Elt 3    - doc: Elt 4```One can then read the emitted YAML representation and generateagain an XML output with:```pythonimport xmlplain# Read the YAML filewith open(&quot;example-1.yml&quot;) as inf:  root = xmlplain.obj_from_yaml(inf)# Output back XMLwith open(&quot;example-1.new.xml&quot;, &quot;w&quot;) as outf:  xmlplain.xml_from_obj(root, outf, pretty=True)```This will output back the following XML (there may be someindentation and/or short empty elements differences w.r.t. theoriginal):```xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;example&gt;  &lt;doc&gt;This is an example for xmlobj documentation. &lt;/doc&gt;  &lt;content version=&quot;beta&quot;&gt;    &lt;kind&gt;document&lt;/kind&gt;    &lt;class&gt;example&lt;/class&gt;    &lt;structured&gt;&lt;/structured&gt;    &lt;elements&gt;      &lt;item&gt;Elt 1&lt;/item&gt;      &lt;doc&gt;Elt 2&lt;/doc&gt;      &lt;item&gt;Elt 3&lt;/item&gt;      &lt;doc&gt;Elt 4&lt;/doc&gt;    &lt;/elements&gt;  &lt;/content&gt;&lt;/example&gt;```For a detailled usage, read the API documentation with:    pydoc xmlplainOr get to the online documentation at: https://guillon.github.io/xmlplain## InstallThe module is compatible with `python 2.6/2.7` and `python 3.x`.For a local installation (installs to `$HOME/.local`) do:    pip install --user xmlplainThis will install the last release and its dependencies in your user environment.Optionally install at system level with:    sudo pip install xlmplain## SourcesDownload this module archives from the releases at: https://github.com/guillon/xmlplain/releasesOr clone the source git repository at: https://github.com/guillon/xmlplain## Installation from sourcesInstall first modules dependencies with:    pip install --user setuptools PyYAML ordereddictEither copy the `xmlplain.py` file somewhere or install itwith `setup.py`.For a user local installation (installs to `$HOME/.local`) do:    ./setup.py install --user## DevelopmentThis module is delivered as part of a source tree with tests, in orderto run tests, do for instance:    make -j16 checkWith python coverage installed, one may check coverage of changes with:    make -j16 coveragefirefox tests/coverage/html/index.htmlWhen check target pass and newly added code is covered,please submit a pull request to https://github.com/guillon/xmlplain## DocumentationThe documentation is generated with `sphinx` as is:make doc    firefox html/index.htmlThe online documentation is hosted at: https://guillon.github.io/xmlplain## ReleaseThe release process relies on the virtualenv tool, python2 and python3being installed on the release host.The release builds, tests, do coverage checks on both python2 and python3then generates documentation and uploadable archives for PyPi.Before Bumping a release be sure to update the `__version__` stringin `xmlplain.py` and commit it (no check is done against the versionin the release target).Then Proceed as follow to prepare the release:    make -j16 releaseWhen all this passes locally, commit all and push to github`next/master` branch in order to have travis checks running.Verify travis status before proceeding further, for instancefrom the travis command line with:    travis branchesOnce all is passed, and the `make -j16 release` target has been re-executed,upload doc to github and packages to PyPI with:    make release-uploadAt this point the package version should be available on https://pypi.org/project/xmlplainand the doc updated on https://guillon.github.io/xmlplainOne should check the proper installation on PyPi with:    make -j16 release-checkWhich will restart a release check, this time downloading from PyPI instead of usingthe local sources.After all is done, one should manually update the github with:- Apply a tag `vx.y.z` matching the new release version and push it to github- Go to github and finalize the tag promotion into a release with and at least upload  also on in the github release the source archive `xmlplain-x.y.x.tar.gz` available  on the just uploaded PyPi files: https://pypi.org/project/xmlplain/#files- Optionally add some information and publish the release## LicenseThis is free and unencumbered software released into the public domain.</longdescription>
</pkgmetadata>