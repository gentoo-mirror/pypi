<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># opentelemetry-resourcedetector-kubernetesAn OpenTelemetry package to populates Resource attributes for Kubernetes pods.## Usage```pythonfrom opentelemetry.sdk.resources import get_aggregated_resourcesfrom opentelemetry_resourcedetector_kubernetes import KubernetesResourceDetector...resource = get_aggregated_resources([    KubernetesResourceDetector(),    SomeOtherResourceDetector()])... pass the returned `resource` to a TracerProvder, for example ...```The `KubernetesResourceDetector` is able to detect the basic identifying informationfor a `Pod`, returning as `Resource` with these attributes populated:* `container.runtime` - always the string `&quot;kubernetes&quot;`* `container.id` - the unique ID of the container (a string of hexadecimal characters)* `k8s.pod.uid` - the UUID of the pod where your container and code is runningThis resource detector is the base class for the others in this package, and so youwill always get these three attributes in your traces, using any of the more detaileddetectors below.## Detecting more attributes with The &quot;Downward API&quot;The Kubernetes &quot;Downward API&quot; is a safe way to to pass Kubernetes metadata about yourpod to itself, as either:* [environment variables](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/),  implemented by `KubernetesDownwardAPIEnvironmentResourceDetector`, or* [files in a volume mounted to your pod](https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/),  implemented by `KubernetesDownwardAPIVolumeResourceDetector`For either of these methods to work, you will need to add the appropriate configurationto your Kubernetes manifests, and you'll configure the detector accordingly.The `opentelemetry_resourcedetector_kubernetes` classes using the Downward API will onlydetect and populate attributes from the [standard OpenTelemetry Kubernetes Resource Attribute](https://github.com/open-telemetry/opentelemetry-python/blob/cdab6e174a1b9afc68aaf57ca04fc972a14281bc/opentelemetry-semantic-conventions/src/opentelemetry/semconv/resource/__init__.py#L239-L337)that you choose to provide by configuring them in your manifests.  These detectors willonly report `k8s.*` and `container.*` OpenTelemetry attributes, and are not intended tobe a general-purpose collection mechanism for other types of attributes.The Downward API only supports a[subset of all the possible attributes](https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#capabilities-of-the-downward-api) you couldprovide.  Depending on your needs, you can also provide hard-coded environment variablesfollowing the same naming conventino in your Kubernetes manifest, or mix the environmentand volume approaches to paint a more complete picture.### KubernetesDownwardAPIEnvironmentResourceDetectorFor an example of using environment variables, you can pass a Pod's namespace and name:```yamlapiVersion: v1kind: Podmetadata:  namespace: cool-app  name: example-podspec:  containers:  - name: a-container    image: my-image:1.0.0    command: [&quot;run-my-cool-app&quot;]    env:    - name: OTEL_RD_K8S_NAMESPACE_NAME      valueFrom:        fieldRef:          fieldPath: metadata.namespace    - name: OTEL_RD_K8S_POD_NAME      valueFrom:        fieldRef:          fieldPath: metadata.name```Then, your running pod will see these environment variables populated:```bashOTEL_RD_K8S_NAMESPACE_NAME=cool-appOTEL_RD_K8S_POD_NAME=example-pod```When configuring your telemetry, you'll establish a &quot;contract&quot; for the names of theenvironment variables, indicating that they will be prefixed with `OTEL_RD`.  Theprefix is up to you, but the default is `OTEL_RD`.  From there, the resource detectorwill look for each environment variables prefixed with `OTEL_RD_`, and if the rest ofits name matches a[standard OpenTelemetry Kubernetes Resource Attribute](https://github.com/open-telemetry/opentelemetry-python/blob/cdab6e174a1b9afc68aaf57ca04fc972a14281bc/opentelemetry-semantic-conventions/src/opentelemetry/semconv/resource/__init__.py#L239-L337),it will be used during resource detection.```pythonfrom opentelemetry.sdk.resources import get_aggregated_resourcesfrom opentelemetry_resourcedetector_kubernetes import KubernetesDownwardAPIEnvironmentResourceDetector...resource = get_aggregated_resources([    KubernetesDownwardAPIEnvironmentResourceDetector(prefix='OTEL_RD'),    SomeOtherResourceDetector()])... pass the returned `resource` to a TracerProvder, for example ...```In this example, the `Resource` for all traces would include the attributes:```container.runtime = &quot;kubernetes&quot;k8s.pod.uid = &quot;...the UUID of the pod...&quot;container.id = &quot;...the id of the container...&quot;k8s.namespace.name = &quot;cool-app&quot;k8s.pod.name = &quot;example-pod&quot;```### KubernetesDownwardAPIVolumeResourceDetectorFor an example of using a Downward API volume, you can pass a Pod's namespace and name:```yamlapiVersion: v1kind: Podmetadata:  namespace: cool-app  name: example-podspec:  containers:  - name: a-container    image: my-image:1.0.0    command: [&quot;run-my-cool-app&quot;]    volumeMounts:  # this is at the *Container* level    - name: otelrd      mountPath: /etc/otelrd  volumes:  # this is at the *Pod* level    - name: otelrd      downwardAPI:        items:        - path: k8s.namespace.name          fieldRef:            fieldPath: metadata.namespace        - path: k8s.pod.name          fieldRef:            fieldPath: metadata.name```Then, your running pod will see these environment variables populated:```bash$ cat /etc/otelrd/k8s.namespace.namecool-app$ cat /etc/otelrd/k8s.pod.nameexample-pod```When configuring your telemetry, you'll establish a &quot;contract&quot; by indicating thedirectory into which you are mounting the Downward API metadata files (`/etc/otelrd`by default).  From there, the resource detector will look for files matching the namesof [standard OpenTelemetry Kubernetes Resource Attributes](https://github.com/open-telemetry/opentelemetry-python/blob/cdab6e174a1b9afc68aaf57ca04fc972a14281bc/opentelemetry-semantic-conventions/src/opentelemetry/semconv/resource/__init__.py#L239-L337).```pythonfrom opentelemetry.sdk.resources import get_aggregated_resourcesfrom opentelemetry_resourcedetector_kubernetes import KubernetesDownwardAPIEnvironmentResourceDetector...resource = get_aggregated_resources([    KubernetesDownwardAPIVolumeResourceDetector(directory='/etc/otelrd'),    SomeOtherResourceDetector()])... pass the returned `resource` to a TracerProvder, for example ...```In this example, the `Resource` for all traces would include the attributes:```container.runtime = &quot;kubernetes&quot;k8s.pod.uid = &quot;...the UUID of the pod...&quot;container.id = &quot;...the id of the container...&quot;k8s.namespace.name = &quot;cool-app&quot;k8s.pod.name = &quot;example-pod&quot;```</longdescription>
</pkgmetadata>