<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>``` _       _   _                 _ _ _     (_)     | | (_)               | (_) |     _  ___ | |_ _ _   _ _ __ ___ | |_| |__  | |/ _ \| __| | | | | '_ ` _ \| | | '_ \ | | (_) | |_| | |_| | | | | | | | | |_) ||_|\___/ \__|_|\__,_|_| |_| |_|_|_|_.__/                                                                                   ```# Definition and UsageThe **iotiumlib** module allows you to access ioTium Orchestrator using APIs in Python.# Download and Install``pip install iotiumlib``## Org``iotiumlib.org.methodname(params)``| Method        | Required Params                       | Optional Params                                                 ||---------------|---------------------------------------|-----------------------------------------------------------------|| get           | NA                                      | org_id                                                          || getv2         | NA                                    | filters                                                         || add           | org_name, billing_name, billing_email | domain_name, timezone, headless_mode, two_factor, vlan_support || delete        | org_id                                |                                                                 |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## Node``iotiumlib.node.methodname(params)``| Method | Required Params                       | Optional Params                                         ||--------|---------------------------------------|---------------------------------------------------------|| getv2  | NA                                    | filters                                                 || add    | inode_name, serial_number, profile_id | standalone_expires, label, data_saving_mode, ssh_keys    || edit   | node_id                               | inode_name, label, standalone_expires, data_saving_mode, ssh_keys || delete | node_id                               | NA                                                      || reboot | node_id                               | NA                                                      || notifications | node_id                                      | type, filters                                                   |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).&gt; Empty string in serial_number creates Virtual iNode.## SSH Key``iotiumlib.sshkey.methodname(params)``| Method | Required Params | Optional Params ||--------|-----------------|-----------------|| getv2  | NA              | filters         || add      | name, public_key|                || delete  | sshkey_id        |                |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## PKI``iotiumlib.pki.methodname(params)``| Method | Required Params | Optional Params ||--------|-----------------|-----------------|| getv2  | NA              | filters         |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## Profile``iotiumlib.profile.methodname(params)``| Method | Required Params | Optional Params ||--------|-----------------|-----------------|| getv2  | NA              | filters         |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## Network``iotiumlib.network.methodname(params)``| Method       | Required Params                        | Optional Params                                                                                                                                                      ||--------------|----------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|| getv2        | NA                                     | filters                                                                                                                                                              || add          | network_name, node_id | cidr,  start_ip, gateway_ip, end_ip, label, default_destination, connect_networks, firewall_selector, vlan_id, network_addressing, firewall_policy, service_addressing, static_routes, interface_ip || edit         | network_id                             | network_name, cidr, gateway_ip, start_ip, end_ip, label, default_destination, connect_networks, firewall_selector,  vlan_id, firewall_policy, static_routes, interface_ip          || delete       | network_id                             | firewall_policy, service_addressing, static_routes                                                                                                                   || resetcounter | network_id                             |                                                                                                                                                                      |                                                                                  |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## Firewall``iotiumlib.firewall.methodname(params)``| Method | Required Params     | Optional Params         ||--------|---------------------|-------------------------|| getv2  | NA                  | filters                 || add    | name, org_id, rules | label                   || edit   | firewallgroup_id    | name, label, edit_rules || delete | firewallgroup_id    | NA                      |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## Service``iotiumlib.service.methodname(params)``| Method         | Required Params     | Optional Params ||----------------|---------------------|-----------------|| getv2          | NA                  | filters         || getv2_template | NA                  | filters         || add            | payload             |                 || edit           | service_id, payload | NA              || delete         | service_id          | NA              |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## Secret``iotiumlib.secret.methodname(params)``| Method | Required Params | Optional Params ||--------|-----------------|-----------------|| getv2  | NA              | filters         || add    | name, filename  | type            || edit   | secret_id       | name, filename  || delete | secret_id       | NA              |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## User``iotiumlib.user.methodname(params)``| Method | Required Params             | Optional Params ||--------|-----------------------------|-----------------|| getv2  | NA                          | filters         || add    | name, email, password, role | NA            || edit   | user_id                     | name, role      || delete | user_id                     | NA              || notifications | NA                                      | org_id, node_id, type, filters                                                   |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).``iotiumlib.user.mysubscriptions.methodname(params)``| Method | Required Params          | Optional Params                                                ||--------|--------------------------|----------------------------------------------------------------|| getv2  | NA                       | filters                                                        || add    | alert_name, type, org_id | node_id, include_child, duration pod_id, network_id, tunnel_id || delete | sub_id                   | NA                                                               |&gt; returns a **Response** Object with all the response data (output, code, formattedOutput).## Package Helper Functions``iotiumlib.helper.get_resource_id_by_name(resource, argument)``| Resource                      | Argument     ||-------------------------------|--------------|| iotiumlib.node                | node_name    || iotiumlib.network             | network_name || iotiumlib.service             | service_name || iotiumlib.secret              | secret_name  || iotiumlib.profile             | profile_name || iotiumlib.org                 | org_name     || iotiumlib.firewall            | csp_name     || iotiumlib.user                | user_name    || iotiumlib.org.mysubscriptions | alert_name   |``iotiumlib.helper.get_resource_name_by_id(resource, argument)``| Resource                      | Argument   ||-------------------------------|------------|| iotiumlib.node                | node_id    || iotiumlib.network             | network_id || iotiumlib.service             | pod_id     || iotiumlib.secret              | secret_id  || iotiumlib.profile             | profile_id || iotiumlib.org                 | org_id     || iotiumlib.firewall            | csp_id     || iotiumlib.user                | user_id    || iotiumlib.org.mysubscriptions | alert_id   |``iotiumlib.helper.get_all_networks_from_node(name)````iotiumlib.helper.get_resource_by_label(resource, labelname)``### Python example```python## Importing the Libraryimport iotiumlib# Login to Orchestartoriotiumlib.orch.ip = &quot;OrchHostIp&quot; # Orchestrator IPrespObj=iotiumlib.orchlogin.login(&quot;useremail@domain.io&quot;, &quot;password&quot;)# Getting the Tokeniotiumlib.orch.token = respObj.Response.output['token']# Get ORG ID for logged in Useriotiumlib.orch.id = iotiumlib.org.get(org_id=None).Response.output['organization']['id']# Alternate Way to get ORG ID for logged in UserORG_ID = iotiumlib.helper.get_resource_id_by_name(iotiumlib.org, &quot;Org Name&quot;)# Get PROFILE ID. Options: Edge, Virtual Edge, Virtualedge_profile_id = iotiumlib.helper.get_resource_id_by_name(iotiumlib.profile, &quot;Edge&quot;)# Get list of Available Serial for Node provisionavail_serial_list = iotiumlib.pki.getv2(filters={&quot;assigned&quot;:&quot;false&quot;, &quot;own&quot;:&quot;true&quot;}).Response.outputfor pki in avail_serial_list:    print(pki['id'])###### Managing Users ######## Get User Roles for Your Organization#TODO# Adding a New UseruserRespObj = iotiumlib.user.add(name=&quot;User Name&quot;, email=&quot;email@domain.com&quot;, password=&quot;Password@1234&quot;, role=&quot;24c416ab-483c-402a-9b76-69bce4dd97ae&quot;)# Getting User ID for specfic UserUSER_ID = iotiumlib.helper.get_resource_id_by_name(iotiumlib.user, &quot;User Name&quot;)# Editing the User for name and roleiotiumlib.user.edit(user_id=USER_ID, role=&quot;ROLL_ID&quot;)iotiumlib.user.edit(user_id=USER_ID)iotiumlib.user.edit(user_id=USER_ID, name=&quot;New User Name&quot;, role=&quot;ROLL_ID&quot;)iotiumlib.user.edit(user_id=USER_ID, name=&quot;New User Name&quot;)# Deleting specfic Useriotiumlib.user.delete(user_id=USER_ID)###### Provising an Edge iNode ######## Other avail params: # standalone_expires (int) in minutes. Default=0# data_saving_mode (string). Default=&quot;Fast&quot;, Options: &quot;Slow&quot;, &quot;Off&quot;respObj = iotiumlib.node.add(inode_name=&quot;Node Name&quot;, serial_number=&quot;pki-id&quot;, profile_id=edge_profile_id, org_id=ORG_ID, label=&quot;key:value&quot;)print(respObj.Response.output)# Get Node ID for Node edit/delete/reboot/notificationsNODE_ID = iotiumlib.helper.get_resource_id_by_name(iotiumlib.node, &quot;Node Name&quot;)# Edit Edge iNode for inode_name, label, standalone_expires, data_saving_moderespObj_e = iotiumlib.node.edit(node_id=NODE_ID)# Initiate Reboot on specfic Edge iNoderespObj_r = iotiumlib.node.reboot(node_id=NODE_ID)# Delete Edge iNoderespObj_d = iotiumlib.node.delete(node_id=NODE_ID)# List iNode specfic event. Default: All Event. Options: type=node, network, service#start_date and end_date are in Epoch Time Stamp formatrespObj_n = iotiumlib.node.notifications(node_id=NODE_ID)respout = iotiumlib.node.notifications(node_id=NODE_ID, type=&quot;node&quot;).Response.outputrespout = iotiumlib.node.notifications(node_id=NODE_ID, type=&quot;node&quot;, filters={&quot;start_date&quot;:&quot;&quot;, &quot;end_date&quot;:&quot;&quot;}).Response.output###### Adding Local Network to Edge iNode #######iotiumlib.network.add(node_id=NODE_ID, network_name=&quot;TAN Network&quot;, cidr=&quot;192.168.0.0/28&quot;, start_ip=&quot;192.168.0.1&quot;, end_ip=&quot;192.168.0.14&quot;)# Get Network ID for Network edit/deleteTAN_ID = iotiumlib.helper.get_resource_id_by_name(iotiumlib.network, &quot;TAN Network&quot;)# Setting the Default Destination for Local Network to Edge iNodeâ€™s WAN Networkiotiumlib.network.edit(network_id=TAN_ID, default_destination=&quot;WAN_ID&quot;)# Connecting an Edge iNode Network to a Remote Virtual iNode networkiotiumlib.network.edit(network_id=TAN_ID, connect_networks=[{&quot;network_id&quot;:&quot;Remote_Network_Id&quot;, &quot;node_id&quot;:&quot;Remote_Node_Id&quot;}])# Delete Edge Local Networkiotiumlib.network.delete(network_id=TAN_ID)###### Using Custom Security Policy #######iotiumlib.firewall.add(name='FWG', org_id=ORG_ID,                        rules=[                            {'from_network':'name=TAN Network', 'to_network':'id=&quot;NETWORK-ID&quot;', 'protocol':'SSH'},                            {'from_network':'label=key:value', 'to_network':'type=wan', 'action':'ALLOW'},                            {'from_network':'label=key:value', 'to_network':'type=wan', 'action':'ALLOW', 'priority':'3000'},                        ])###### Using Secrets #######iotiumlib.secret.add(name=&quot;Service Secret Name&quot;, filename={'.dockerconfigjson': 'ContentInBase64Format'},type=&quot;Dockerconfigjson&quot;)iotiumlib.secret.add(name=&quot;Service Volume Name&quot;, filename=[],type=&quot;Opaque&quot;)###### Using Mysubscriptions ########type: NODE_STATE_CHANGE, TUNNEL_STATE_CHANGE, SERVICE_STATE_CHANGE, NODE_IP_CHANGE, NODE_UPGRADE, HEADLESS_EXPIRY, CERT_EXPIRY#include_child(bool): True to include child orgs. Scope: ORG level#duration(int): default 5min. #node_id: Scope: iNode level#tunnel_id: for type=TUNNEL_STATE_CHANGE#pod_id: for type=SERVICE_STATE_CHANGE#channel_type: default EMAIL#channel_id: for channel_type=WEBHOOKiotiumlib.user.mysubscriptions.add(alert_name=&quot;Alert Name&quot;, type=&quot;SERVICE_STATE_CHANGE&quot;, org_id=&quot;OrgID&quot;)###### Listing Events ########Default: All Event. Options: type=node, network, service#start_date and end_date are in Epoch Time Stamp formatiotiumlib.user.notifications(filters={&quot;start_date&quot;:&quot;&quot;, &quot;end_date&quot;:&quot;&quot;}, type=&quot;node&quot;).Response.outputiotiumlib.user.notifications(node_id=NODE_ID, filters={&quot;start_date&quot;:&quot;&quot;, &quot;end_date&quot;:&quot;&quot;}, type=&quot;node&quot;).Response.outputiotiumlib.user.notifications(org_id=ORG_ID, filters={&quot;start_date&quot;:&quot;&quot;, &quot;end_date&quot;:&quot;&quot;}, type=&quot;node&quot;).Response.output###### Using Webhooks #######iotiumlib.user.webhook.add(name=&quot;Webhook Name&quot;, &quot;url&quot;=&quot;https://abc.com/api/iotiumalerts&quot;, &quot;secret&quot;=&quot;test&quot;)```  </longdescription>
</pkgmetadata>