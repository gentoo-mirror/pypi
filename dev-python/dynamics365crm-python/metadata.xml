<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dynamics365crm-pythonDynamics365CRM API wrapper for Dynamics 365 written in Python.This library works for API version: v9.0## Installing```pip install dynamics365crm-python```## UsageThis library provides a client that is initialized with the following arguments- domain: the dynamics 365 tenant domain (yours or someone else's)- access_token: the retrieved token after authenticationArguments for OAuth2 flow- client_id: your Azure AD application client id- client_secret: your Azure AD application client secret```pythonfrom dynamics365crm.client import Client## Normal use to make calls to the apiclient = Client(&quot;https://tenant_name.crmX.dynamics.com&quot;, access_token=&quot;access_token&quot;)## OAuth2 configuration required argumentsclient = Client(    &quot;https://tenant_name.crmX.dynamics.com&quot;,    client_id=CLIENT_ID,    client_secret=CLIENT_SECRET,)```### OAuth2 Protocol#### Get authorization urlThis will return a [MSAL](https://github.com/AzureAD/microsoft-authentication-library-for-python) valid authorization url, the following are required:- tenant_id: someone else's Azure AD tenant_id  - Ask the dynamics tenant owner to go to the [Azure Portal](portal.azure.com) and retrieve the Tenant ID from the Azure Active Directory/Overview  - If your app is configured as multi-tenant (for any enterprise or personal account to use) you could pass &quot;common&quot; instead od the Tenant ID    - However microsoft azure app configuration is a mess so the Tenant ID is preferable- redirect_uri: your service callback url- state: your unique generated state to identify the requester  - you could also initiate an oauth flow with msal manually with initiate_auth_code_flow method, check the [official example](https://github.com/Azure-Samples/ms-identity-python-webapp)```pythonauthorization_url = client.build_authorization_url(&quot;tenant_id&quot;, &quot;redirect_uri&quot;, &quot;state&quot;)&gt;&gt;&gt; &quot;https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=XXXX&amp;response_type=code&amp;redirect_uri=https%3A%2F%your_domain/%2Fcallback%2F&amp;scope=https%3A%2F%2tenant_name.crmX.dynamics.com%2Fuser_impersonation+offline_access+openid+profile&amp;state=XXXX&amp;prompt=consent&quot;```#### Exchange the callback code for an access tokenTo finish the oauth protocol microsoft will redirect to your callback endpoint with a temporal code in the url query params to be exchanged for the full-fledged token (a json with the access_token, refresh_token, expires_in, etc.)Again the (**tenant_id** or &quot;common&quot;) and **redirect_uri** are required, the third argument is the code sent by microsoft```pythontoken = client.exchange_code(&quot;tenant_id&quot;, &quot;redirect_uri&quot;, &quot;code&quot;)```#### Refresh tokenIf the access token expires you could get a new **access_token** exchanging the long-lived **refresh_token**Again the **tenant_id** or &quot;common&quot; is required```pythontoken = client.refresh_access_token(&quot;tenant_id&quot;, &quot;refresh_token&quot;)```#### Set access tokenYou could pass the access_token in the constructor or set it with```pythonclient.set_access_token(&quot;access_token&quot;)```## Dynamics Web API### Contacts- See the documentation https://docs.microsoft.com/es-es/dynamics365/customer-engagement/web-api/contact?view=dynamics-ce-odata-9#### Get Contactscan receive orderby, filter, select, top, expand```list_contacts = client.get_contacts()```#### Create Contact```create_contact = client.create_contact(firstname=&quot;FIRSTNAME&quot;, lastname=&quot;LASTNAME&quot;, middlename=&quot;MIDDLENAME&quot;, emailaddress1=&quot;EMAILADDRESS&quot;)```#### Delete Contact```delete_contact = client.delete_contact('ID')```#### Update Contact```update_contact = client.update_contact('ID', firstname=&quot;FIRSTNAME&quot;, lastname=&quot;LASTNAME&quot;, middlename=&quot;MIDDLENAME&quot;, emailaddress1=&quot;EMAILADDRESS&quot;)```### Accounts- See the documentation https://docs.microsoft.com/es-es/dynamics365/customer-engagement/web-api/account?view=dynamics-ce-odata-9#### Get Accountscan receive orderby, filter, select, top, expand```get_accounts = client.get_accounts()```#### Create Account```create_account = client.create_account(name=&quot;NAME&quot;, websiteurl=&quot;WWW.WEBSITE.COM&quot;)```#### Delete Account```create_account = client.delete_account('ID')```#### Update Account```update_account = client.update_account(id=&quot;ID&quot;, name=&quot;NAME&quot;)```### Opportunities- See the documentation https://docs.microsoft.com/es-es/dynamics365/customer-engagement/web-api/opportunity?view=dynamics-ce-odata-9#### Get Opportunitiescan receive orderby, filter, select, top, expand```list_opportunities = client.get_opportunities()```#### Create Opportunities```create_opportunities = client.create_opportunity(name=&quot;OPPORTUNITY NAME&quot;)```#### Delete Opportunities```delete_opportunities = client.delete_opportunity(id=&quot;OPPORTUNITY ID&quot;)```#### Update Opportunities```update_opportunities = client.update_opportunity(id=&quot;OPPORTUNITY ID&quot;, name=&quot;OPPORTUNITY NAME&quot;, description=&quot;SOME DESCRIPTION&quot;)```### Leads- See the documentation https://docs.microsoft.com/es-es/dynamics365/customer-engagement/web-api/lead?view=dynamics-ce-odata-9#### Get Leadscan receive orderby, filter, select, top, expand```list_leads = client.get_leads()```#### Create Lead```create_leads = client.create_lead(fullname=&quot;LEAD NAME&quot;, subject=&quot;LEAD SUBJECT&quot;, mobilephone=&quot;123456&quot;, websiteurl=&quot;WWW.WEBSITE.COM&quot;, middlename=&quot;MIDDLE LEAD NAME&quot;)```#### Delete Lead```delete_leads = client.delete_lead(&quot;ID&quot;)```#### Update Lead```update_leads = client.update_lead(fullname=&quot;LEAD NAME&quot;, subject=&quot;LEAD SUBJECT&quot;, mobilephone=&quot;123456&quot;, websiteurl=&quot;WWW.WEBSITE.COM&quot;, middlename=&quot;MIDDLE LEAD NAME&quot;)```### Campaigns- See the documentation https://docs.microsoft.com/es-es/dynamics365/customer-engagement/web-api/campaign?view=dynamics-ce-odata-9#### Get Campaignscan receive orderby, filter, select, top, expand```list_campaigns = client.get_campaigns()```#### Create Campaign```create_campaign = client.create_campaign(name=&quot;CAMPAIGN NAME&quot;, description=&quot;SOME DESCRIPTION&quot;)```#### Delete Campaign```delete_campaign = client.delete_campaign(id=&quot;ID&quot;)```#### Update Campaign```update_campaign = client.update_campaign(id=&quot;ID&quot;, name=&quot;CAMPAIGN NAME&quot;, description=&quot;SOME DESCRIPTION&quot;)```## Requirements- requests- msal## ContributingWe are always grateful for any kind of contribution including but not limited to bug reports, code enhancements, bug fixes, and even functionality suggestions.#### You can report any bug you find or suggest new functionality with a new [issue](https://github.com/GearPlug/dynamics365crm-python/issues).#### If you want to add yourself some functionality to the wrapper:1. Fork it ( https://github.com/GearPlug/dynamics365crm-python )2. Create your feature branch (git checkout -b my-new-feature)3. Commit your changes (git commit -am 'Adds my new feature')4. Push to the branch (git push origin my-new-feature)5. Create a new Pull Request</longdescription>
</pkgmetadata>