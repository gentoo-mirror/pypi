<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pygram11[![Documentation Status](https://readthedocs.org/projects/pygram11/badge/?version=latest)](https://pygram11.readthedocs.io/en/latest/?badge=latest)[![Actions Status](https://github.com/douglasdavis/pygram11/workflows/Tests/badge.svg)](https://github.com/douglasdavis/pygram11/actions)[![PyPI version](https://img.shields.io/pypi/v/pygram11.svg?colorB=486b87&amp;style=flat)](https://pypi.org/project/pygram11/)[![Conda Forge](https://img.shields.io/conda/vn/conda-forge/pygram11.svg?colorB=486b87&amp;style=flat)](https://anaconda.org/conda-forge/pygram11)[![Python Version](https://img.shields.io/pypi/pyversions/pygram11)](https://pypi.org/project/pygram11/)Simple and fast histogramming in Python accelerated with[OpenMP](https://www.openmp.org/) with help from[pybind11](https://github.com/pybind/pybind11).`pygram11` provides functions for very fast histogram calculations(and the variance in each bin) in one and two dimensions. The API isvery simple; documentation can be [foundhere](https://pygram11.readthedocs.io/) (you'll also find [somebenchmarks](https://pygram11.readthedocs.io/en/stable/bench.html)there).## Installing### From PyPIBinary wheels are provided for Linux, macOS, and Windows. They can beinstalled from [PyPI](https://pypi.org/project/pygram11/) via pip:```pip install pygram11```### From conda-forgeFor installation via the `conda` package manager [pygram11 is part ofconda-forge](https://anaconda.org/conda-forge/pygram11).```noneconda install pygram11 -c conda-forge```### From SourceYou need is a C++14 compiler and OpenMP. If you are using a relativelymodern GCC release on Linux then you probably don't have to worryabout the OpenMP dependency. If you are on macOS, you can install`libomp` from Homebrew (pygram11 does compile on Apple Silicon deviceswith Python version `&gt;= 3.9` and `libomp` installed from Homebrew).With those dependencies met, simply run:```nonegit clone https://github.com/douglasdavis/pygram11.git --recurse-submodulescd pygram11pip install .```Or let pip handle the cloning procedure:```nonepip install git+https://github.com/douglasdavis/pygram11.git@main```Tests are run on Python versions `&gt;= 3.8` and binary wheels areprovided for those versions.## In ActionA histogram (with fixed bin width) of weighted data in one dimension:```python&gt;&gt;&gt; rng = np.random.default_rng(123)&gt;&gt;&gt; x = rng.standard_normal(10000)&gt;&gt;&gt; w = rng.uniform(0.8, 1.2, x.shape[0])&gt;&gt;&gt; h, err = pygram11.histogram(x, bins=40, range=(-4, 4), weights=w)```A histogram with fixed bin width which saves the under and overflow inthe first and last bins:```python&gt;&gt;&gt; x = rng.standard_normal(1000000)&gt;&gt;&gt; h, __ = pygram11.histogram(x, bins=20, range=(-3, 3), flow=True)```where we've used `__` to catch the `None` returned when weights areabsent. A histogram in two dimensions with variable width bins:```python&gt;&gt;&gt; x = rng.standard_normal(1000)&gt;&gt;&gt; y = rng.standard_normal(1000)&gt;&gt;&gt; xbins = [-2.0, -1.0, -0.5, 1.5, 2.0, 3.1]&gt;&gt;&gt; ybins = [-3.0, -1.5, -0.1, 0.8, 2.0, 2.8]&gt;&gt;&gt; h, err = pygram11.histogram2d(x, y, bins=[xbins, ybins])```Manually controlling OpenMP acceleration with context managers:```python&gt;&gt;&gt; with pygram11.omp_disabled():  # disable all thresholds....     result, _ = pygram11.histogram(x, bins=10, range=(-3, 3))...&gt;&gt;&gt; with pygram11.omp_forced(key=&quot;thresholds.var1d&quot;):  # force a single threshold....     result, _ = pygram11.histogram(x, bins=[-3, -2, 0, 2, 3])...```Histogramming multiple weight variations for the same data, thenputting the result in a DataFrame (the input pandas DataFrame will beinterpreted as a NumPy array):```python&gt;&gt;&gt; N = 10000&gt;&gt;&gt; weights = pd.DataFrame({&quot;weight_a&quot;: np.abs(rng.standard_normal(N)),...                         &quot;weight_b&quot;: rng.uniform(0.5, 0.8, N),...                         &quot;weight_c&quot;: rng.uniform(0.0, 1.0, N)})&gt;&gt;&gt; data = rng.standard_normal(N)&gt;&gt;&gt; count, err = pygram11.histogram(data, bins=20, range=(-3, 3), weights=weights, flow=True)&gt;&gt;&gt; count_df = pd.DataFrame(count, columns=weights.columns)&gt;&gt;&gt; err_df = pd.DataFrame(err, columns=weights.columns)```I also wrote a [blogpost](https://ddavis.io/posts/introducing-pygram11/) with some simpleexamples.## Other Libraries- [boost-histogram](https://github.com/scikit-hep/boost-histogram)  provides Pythonic object oriented histograms.- Simple and fast histogramming in Python using the NumPy C API:  [fast-histogram](https://github.com/astrofrog/fast-histogram) (no  variance or overflow support).- To calculate histograms in Python on a GPU, see  [cupy.histogram](https://docs.cupy.dev/en/stable/reference/generated/cupy.histogram.html).---If there is something you'd like to see in pygram11, please open anissue or pull request.</longdescription>
</pkgmetadata>