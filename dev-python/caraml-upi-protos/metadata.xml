<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># CaraML UPI ProtosGenerated Python code from [caraml-dev/universal-prediction-interface](https://github.com/caraml-dev/universal-prediction-interface). The intent of this package is to ease creation of Python server / client compatible with CaraML dataplane.## Example Usage#### Creating Server- Create `server.py` containing following dummy server code ```pythonfrom concurrent import futuresimport grpcimport randomfrom caraml.upi.v1 import upi_pb2_grpc, upi_pb2, value_pb2import caraml.upi.v1.upi_pb2 as upiv1class Model(upi_pb2_grpc.UniversalPredictionServiceServicer):    def PredictValues(self, request: upi_pb2.PredictValuesRequest, context: grpc.ServicerContext) -&gt; upi_pb2.PredictValuesResponse:        print(f&quot;request: {request}&quot;)        # Return random integer for each rows        result_rows = []        for row in request.prediction_rows:            result_row = upi_pb2.PredictionResultRow(row_id=row.row_id, values=[value_pb2.NamedValue(name=&quot;result&quot;, type = value_pb2.NamedValue.INTEGER_VALUE_FIELD_NUMBER, integer_value=random.randint(0, 100))])            result_rows.append(result_row)        return upi_pb2.PredictValuesResponse(            prediction_result_rows=result_rows,        )if __name__ == &quot;__main__&quot;:    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))    upi_pb2_grpc.add_UniversalPredictionServiceServicer_to_server(Model(), server)    port = 9000    print(f&quot;Running upi server at port {port}&quot;)    server.add_insecure_port(f&quot;[::]:{port}&quot;)    server.start()    server.wait_for_termination()```- Start the server```bashpython server.py&gt; Running upi server at port 9000```#### Creating Client- Create `client.py` containing following client code```pythonfrom caraml.upi.v1 import upi_pb2_grpc, upi_pb2from caraml.upi.v1 import value_pb2import grpcimport timedef run(server_port: 9000):    with grpc.insecure_channel(f&quot;localhost:{server_port}&quot;) as channel:        stub = upi_pb2_grpc.UniversalPredictionServiceStub(channel)        while True:            response = stub.PredictValues(upi_pb2.PredictValuesRequest(                prediction_rows=[                    upi_pb2.PredictionRow(row_id=&quot;1&quot;, model_inputs=[                    value_pb2.NamedValue(name=&quot;feature1&quot;, type=value_pb2.NamedValue.DOUBLE_VALUE_FIELD_NUMBER, double_value=1.1),                    value_pb2.NamedValue(name=&quot;feature2&quot;, type=value_pb2.NamedValue.DOUBLE_VALUE_FIELD_NUMBER, double_value=2.2),                    value_pb2.NamedValue(name=&quot;feature3&quot;, type=value_pb2.NamedValue.DOUBLE_VALUE_FIELD_NUMBER, double_value=3.3),                    value_pb2.NamedValue(name=&quot;feature4&quot;, type=value_pb2.NamedValue.DOUBLE_VALUE_FIELD_NUMBER, double_value=4.4),                    ]),                    upi_pb2.PredictionRow(row_id=&quot;2&quot;, model_inputs=[                    value_pb2.NamedValue(name=&quot;feature1&quot;, type=value_pb2.NamedValue.DOUBLE_VALUE_FIELD_NUMBER, double_value=1.1),                    value_pb2.NamedValue(name=&quot;feature2&quot;, type=value_pb2.NamedValue.DOUBLE_VALUE_FIELD_NUMBER, double_value=2.2),                    value_pb2.NamedValue(name=&quot;feature3&quot;, type=value_pb2.NamedValue.DOUBLE_VALUE_FIELD_NUMBER, double_value=3.3),                    value_pb2.NamedValue(name=&quot;feature4&quot;, type=value_pb2.NamedValue.DOUBLE_VALUE_FIELD_NUMBER, double_value=4.4),                    ]),                    ]            ))            print(response)            time.sleep(1)if __name__ == &quot;__main__&quot;:    run(9000)```- Start client in separate shell as the server```bashpython client.py```</longdescription>
</pkgmetadata>