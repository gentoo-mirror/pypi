<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## Documentationhttps://filter-stations.netlify.app/## Water Level Pipeline - A series of functions to be added to the filter-stations module in pypi to evalute which TAHMO stations to use that corroborates with the water level- All begins with the coordinates of the gauging station(location of the monitoring sensor)```pythonimport osfrom pathlib import Pathimport haversine as hsimport pandas as pdimport numpy as npimport datetimeimport statsmodels.api as smfrom matplotlib.dates import DateFormatterimport matplotlib.pyplot as pltimport warningsimport dateutil.parserwarnings.filterwarnings('ignore')# config_pathconfig_path = os.path.join(Path(os.getcwd()).parent.parent.absolute(), 'config.json')``````pythonfrom filter_stations import retreive_data, Interactive_maps, Filter, pipelineimport json# Authenticationwith open(config_path) as f:    conf = json.load(f)apiKey = conf['apiKey']apiSecret = conf['apiSecret']map_api_key = conf['map_api_key']fs = retreive_data(apiKey, apiSecret, map_api_key)pipe = pipeline(apiKey, apiSecret, map_api_key)maps = Interactive_maps(apiKey, apiSecret, map_api_key)```### Loading dataLoad the water level data from the github repository[Link here] &lt;br&gt;Load the TAHMO station data from the [Link here] &lt;br&gt;```python# muringato muringato_loc = [-0.406689, 36.96301]  # ewaso ewaso_loc = [0.026833, 36.914637]# Weather stations dataweather_stations_data = pd.read_csv(os.path.join(Path(os.getcwd()).parent.parent.absolute(), 'data', 'stations_precipitation.csv'))''' The water level data '''# muringato data sensor 2 2021muringato_data_s2_2021 = os.path.join(Path(os.getcwd()).parent.parent.absolute(), 'data', 'water_data_2021', 'muringato-sensor2.csv')# muringato data sensor 2 2022muringato_data_s2_2022 = os.path.join(Path(os.getcwd()).parent.parent.absolute(), 'data', 'water_data_2021', 'muringato-sensor2-2022.csv')# muringato data sensor 6 2021muringato_data_s6_2021 = os.path.join(Path(os.getcwd()).parent.parent.absolute(), 'data', 'water_data_2021', 'muringato-sensor6.csv')# muringato data sensor 6 2022muringato_data_s6_2022 = os.path.join(Path(os.getcwd()).parent.parent.absolute(), 'data', 'water_data_2021', 'muringato-sensor6-2022.csv')# ewaso data sensor 2020 convert the time column to datetimeewaso_data_2020 = os.path.join(Path(os.getcwd()).parent.parent.absolute(), 'data', 'water-level-data-ewaso', '1E2020.csv')# ewaso data sensor 2022ewaso_data_2022 = os.path.join(Path(os.getcwd()).parent.parent.absolute(), 'data', 'water-level-data-ewaso', '1E2022.csv')weather_stations_data.Date = weather_stations_data.Date.astype('datetime64[ns]')weather_stations_data.set_index('Date', inplace=True)```To format water level it needs to have a time column and water level column the names can be different but the order must be that```python# handle the water level datadef format_water_level(water_level_data_path):    # data needs to be in the format time, data/water_level or whatever the column is called    water_level_data = pd.read_csv(water_level_data_path)    # rename the first column to time    water_level_data.rename(columns={water_level_data.columns[0]: 'time'}, inplace=True)    # convert the time column to datetime    water_level_data.time = pd.to_datetime([dateutil.parser.parse(i).strftime('%d-%m-%Y') for i in water_level_data['time']])    water_level_data.time = water_level_data.time.astype('datetime64[ns]')    # rename the column to water_level    water_level_data.rename(columns={water_level_data.columns[1]: 'water_level'}, inplace=True)    # set the time column as the index    water_level_data.set_index('time', inplace=True)    return water_level_data``````pythonmuringato_data_s2_2021 = format_water_level(muringato_data_s2_2021)muringato_data_s2_2022 = format_water_level(muringato_data_s2_2022)muringato_data_s6_2021 = format_water_level(muringato_data_s6_2021)muringato_data_s6_2022 = format_water_level(muringato_data_s6_2022)ewaso_data_2020 = format_water_level(ewaso_data_2020)ewaso_data_2022 = format_water_level(ewaso_data_2022)```1. Filter the date range based on the water level data from first day of the water level data to the last day of the water level data2. Choose stations within a certain radius of the gauging station 100 km for example get the resulting weather data3. Get the stations with only 100 percent data no missing data4. Remove the stations data with the value zero from beginning to end if the water level data has some values above zero5. Calculate the correlation between the water level data and the weather data needs to be above 0 and have a lag of maximum 3 days6. Plot the resulting figures ### Choosing ewaso 2020 rangeremoving stations with missing data reduces from 1035 to 849 columns&lt;br&gt;removing all zeros reduces from 849 to 604 columns&lt;br&gt;columns with positive correlation reduces the number from 604 columns to 283 columns&lt;br&gt;checking for lag reduces the columns to 80```pythonabove, below = pipe.shed_stations(weather_stations_data,                   muringato_data_s6_2022,                   muringato_loc,                   100,                   lag=3                   )``````pythonbelow_stations = [i.split('_')[0] for i in below.keys()]print(below_stations)below_stations_metadata = fs.get_stations_info(multipleStations=below_stations)[['code', 'location.latitude', 'location.longitude']]```    ['TA00001', 'TA00023', 'TA00024', 'TA00025', 'TA00054', 'TA00056', 'TA00067', 'TA00077', 'TA00129', 'TA00147', 'TA00154', 'TA00155', 'TA00156', 'TA00166', 'TA00171', 'TA00189', 'TA00215', 'TA00222', 'TA00228', 'TA00230', 'TA00233', 'TA00250', 'TA00270', 'TA00270', 'TA00272', 'TA00272', 'TA00316', 'TA00317', 'TA00355', 'TA00459', 'TA00473', 'TA00480', 'TA00493', 'TA00494', 'TA00577', 'TA00601', 'TA00621', 'TA00653', 'TA00672', 'TA00676', 'TA00679', 'TA00692', 'TA00699', 'TA00704', 'TA00705', 'TA00711', 'TA00712', 'TA00712', 'TA00715', 'TA00717', 'TA00750', 'TA00751', 'TA00767']    ```pythonbelow_stations_metadata['distance']= below_stations_metadata.apply(lambda row: hs.haversine((muringato_loc[0],                                                                                              muringato_loc[1]), (row['location.latitude'],                                                                                                              row['location.longitude'])), axis=1)below_stations_metadata.sort_values(by='distance')```&lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;code&lt;/th&gt;      &lt;th&gt;location.latitude&lt;/th&gt;      &lt;th&gt;location.longitude&lt;/th&gt;      &lt;th&gt;distance&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;52&lt;/th&gt;      &lt;td&gt;TA00056&lt;/td&gt;      &lt;td&gt;-0.721656&lt;/td&gt;      &lt;td&gt;37.145585&lt;/td&gt;      &lt;td&gt;40.480889&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;22&lt;/th&gt;      &lt;td&gt;TA00024&lt;/td&gt;      &lt;td&gt;-1.071731&lt;/td&gt;      &lt;td&gt;37.045578&lt;/td&gt;      &lt;td&gt;74.517013&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;150&lt;/th&gt;      &lt;td&gt;TA00166&lt;/td&gt;      &lt;td&gt;-0.319508&lt;/td&gt;      &lt;td&gt;37.659139&lt;/td&gt;      &lt;td&gt;78.009238&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;172&lt;/th&gt;      &lt;td&gt;TA00189&lt;/td&gt;      &lt;td&gt;-0.795260&lt;/td&gt;      &lt;td&gt;37.665930&lt;/td&gt;      &lt;td&gt;89.304790&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;230&lt;/th&gt;      &lt;td&gt;TA00250&lt;/td&gt;      &lt;td&gt;-0.778940&lt;/td&gt;      &lt;td&gt;37.676738&lt;/td&gt;      &lt;td&gt;89.504935&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;600&lt;/th&gt;      &lt;td&gt;TA00715&lt;/td&gt;      &lt;td&gt;-1.225618&lt;/td&gt;      &lt;td&gt;36.809065&lt;/td&gt;      &lt;td&gt;92.655456&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;565&lt;/th&gt;      &lt;td&gt;TA00679&lt;/td&gt;      &lt;td&gt;-1.270835&lt;/td&gt;      &lt;td&gt;36.723916&lt;/td&gt;      &lt;td&gt;99.698089&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;23&lt;/th&gt;      &lt;td&gt;TA00025&lt;/td&gt;      &lt;td&gt;-1.301839&lt;/td&gt;      &lt;td&gt;36.760200&lt;/td&gt;      &lt;td&gt;102.058383&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;422&lt;/th&gt;      &lt;td&gt;TA00473&lt;/td&gt;      &lt;td&gt;-0.512371&lt;/td&gt;      &lt;td&gt;35.956813&lt;/td&gt;      &lt;td&gt;112.495996&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;513&lt;/th&gt;      &lt;td&gt;TA00621&lt;/td&gt;      &lt;td&gt;-1.633020&lt;/td&gt;      &lt;td&gt;37.146185&lt;/td&gt;      &lt;td&gt;137.874253&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;51&lt;/th&gt;      &lt;td&gt;TA00054&lt;/td&gt;      &lt;td&gt;-0.239342&lt;/td&gt;      &lt;td&gt;35.728897&lt;/td&gt;      &lt;td&gt;138.480985&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;424&lt;/th&gt;      &lt;td&gt;TA00480&lt;/td&gt;      &lt;td&gt;-1.376152&lt;/td&gt;      &lt;td&gt;37.797646&lt;/td&gt;      &lt;td&gt;142.238019&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;61&lt;/th&gt;      &lt;td&gt;TA00067&lt;/td&gt;      &lt;td&gt;-1.794285&lt;/td&gt;      &lt;td&gt;37.621211&lt;/td&gt;      &lt;td&gt;170.765765&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;140&lt;/th&gt;      &lt;td&gt;TA00156&lt;/td&gt;      &lt;td&gt;-1.701123&lt;/td&gt;      &lt;td&gt;38.068339&lt;/td&gt;      &lt;td&gt;189.255406&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;71&lt;/th&gt;      &lt;td&gt;TA00077&lt;/td&gt;      &lt;td&gt;-0.383066&lt;/td&gt;      &lt;td&gt;35.068406&lt;/td&gt;      &lt;td&gt;210.682047&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;139&lt;/th&gt;      &lt;td&gt;TA00155&lt;/td&gt;      &lt;td&gt;-2.523037&lt;/td&gt;      &lt;td&gt;36.829437&lt;/td&gt;      &lt;td&gt;235.795373&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;21&lt;/th&gt;      &lt;td&gt;TA00023&lt;/td&gt;      &lt;td&gt;-2.388550&lt;/td&gt;      &lt;td&gt;38.040767&lt;/td&gt;      &lt;td&gt;250.831198&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;155&lt;/th&gt;      &lt;td&gt;TA00171&lt;/td&gt;      &lt;td&gt;-0.002710&lt;/td&gt;      &lt;td&gt;34.596908&lt;/td&gt;      &lt;td&gt;266.903936&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;291&lt;/th&gt;      &lt;td&gt;TA00317&lt;/td&gt;      &lt;td&gt;0.040440&lt;/td&gt;      &lt;td&gt;34.371716&lt;/td&gt;      &lt;td&gt;292.394991&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;TA00001&lt;/td&gt;      &lt;td&gt;-1.123283&lt;/td&gt;      &lt;td&gt;34.397992&lt;/td&gt;      &lt;td&gt;296.112467&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;652&lt;/th&gt;      &lt;td&gt;TA00767&lt;/td&gt;      &lt;td&gt;-2.671990&lt;/td&gt;      &lt;td&gt;38.369665&lt;/td&gt;      &lt;td&gt;296.467402&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;290&lt;/th&gt;      &lt;td&gt;TA00316&lt;/td&gt;      &lt;td&gt;0.289862&lt;/td&gt;      &lt;td&gt;34.371222&lt;/td&gt;      &lt;td&gt;298.418648&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;131&lt;/th&gt;      &lt;td&gt;TA00147&lt;/td&gt;      &lt;td&gt;0.449274&lt;/td&gt;      &lt;td&gt;34.282303&lt;/td&gt;      &lt;td&gt;312.905564&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;117&lt;/th&gt;      &lt;td&gt;TA00129&lt;/td&gt;      &lt;td&gt;-3.390926&lt;/td&gt;      &lt;td&gt;37.717656&lt;/td&gt;      &lt;td&gt;342.264311&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;138&lt;/th&gt;      &lt;td&gt;TA00154&lt;/td&gt;      &lt;td&gt;-4.231107&lt;/td&gt;      &lt;td&gt;37.847804&lt;/td&gt;      &lt;td&gt;436.466702&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;211&lt;/th&gt;      &lt;td&gt;TA00230&lt;/td&gt;      &lt;td&gt;1.724690&lt;/td&gt;      &lt;td&gt;33.622000&lt;/td&gt;      &lt;td&gt;440.623881&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;329&lt;/th&gt;      &lt;td&gt;TA00355&lt;/td&gt;      &lt;td&gt;3.498069&lt;/td&gt;      &lt;td&gt;35.843897&lt;/td&gt;      &lt;td&gt;451.651266&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;544&lt;/th&gt;      &lt;td&gt;TA00653&lt;/td&gt;      &lt;td&gt;0.265062&lt;/td&gt;      &lt;td&gt;32.627203&lt;/td&gt;      &lt;td&gt;487.869319&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;196&lt;/th&gt;      &lt;td&gt;TA00215&lt;/td&gt;      &lt;td&gt;0.052465&lt;/td&gt;      &lt;td&gt;32.440690&lt;/td&gt;      &lt;td&gt;505.441217&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;203&lt;/th&gt;      &lt;td&gt;TA00222&lt;/td&gt;      &lt;td&gt;1.186240&lt;/td&gt;      &lt;td&gt;32.020330&lt;/td&gt;      &lt;td&gt;577.409865&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;584&lt;/th&gt;      &lt;td&gt;TA00699&lt;/td&gt;      &lt;td&gt;-0.707570&lt;/td&gt;      &lt;td&gt;31.402138&lt;/td&gt;      &lt;td&gt;619.216128&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;558&lt;/th&gt;      &lt;td&gt;TA00672&lt;/td&gt;      &lt;td&gt;-6.180302&lt;/td&gt;      &lt;td&gt;37.146832&lt;/td&gt;      &lt;td&gt;642.321296&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;597&lt;/th&gt;      &lt;td&gt;TA00712&lt;/td&gt;      &lt;td&gt;-6.676308&lt;/td&gt;      &lt;td&gt;39.131552&lt;/td&gt;      &lt;td&gt;737.484276&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;562&lt;/th&gt;      &lt;td&gt;TA00676&lt;/td&gt;      &lt;td&gt;-6.780374&lt;/td&gt;      &lt;td&gt;38.973512&lt;/td&gt;      &lt;td&gt;742.978650&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;635&lt;/th&gt;      &lt;td&gt;TA00750&lt;/td&gt;      &lt;td&gt;-6.805316&lt;/td&gt;      &lt;td&gt;39.139843&lt;/td&gt;      &lt;td&gt;751.347364&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;636&lt;/th&gt;      &lt;td&gt;TA00751&lt;/td&gt;      &lt;td&gt;-6.848668&lt;/td&gt;      &lt;td&gt;39.082174&lt;/td&gt;      &lt;td&gt;753.892793&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;432&lt;/th&gt;      &lt;td&gt;TA00494&lt;/td&gt;      &lt;td&gt;-6.833860&lt;/td&gt;      &lt;td&gt;39.167475&lt;/td&gt;      &lt;td&gt;755.338586&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;248&lt;/th&gt;      &lt;td&gt;TA00270&lt;/td&gt;      &lt;td&gt;-6.842390&lt;/td&gt;      &lt;td&gt;39.156760&lt;/td&gt;      &lt;td&gt;755.852180&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;250&lt;/th&gt;      &lt;td&gt;TA00272&lt;/td&gt;      &lt;td&gt;-6.890039&lt;/td&gt;      &lt;td&gt;39.117927&lt;/td&gt;      &lt;td&gt;759.501414&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;431&lt;/th&gt;      &lt;td&gt;TA00493&lt;/td&gt;      &lt;td&gt;-6.910845&lt;/td&gt;      &lt;td&gt;39.075597&lt;/td&gt;      &lt;td&gt;760.236606&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;214&lt;/th&gt;      &lt;td&gt;TA00233&lt;/td&gt;      &lt;td&gt;3.453500&lt;/td&gt;      &lt;td&gt;31.251250&lt;/td&gt;      &lt;td&gt;766.277105&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;209&lt;/th&gt;      &lt;td&gt;TA00228&lt;/td&gt;      &lt;td&gt;3.404720&lt;/td&gt;      &lt;td&gt;30.959600&lt;/td&gt;      &lt;td&gt;790.422401&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;498&lt;/th&gt;      &lt;td&gt;TA00601&lt;/td&gt;      &lt;td&gt;-14.080148&lt;/td&gt;      &lt;td&gt;33.907593&lt;/td&gt;      &lt;td&gt;1557.147407&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;602&lt;/th&gt;      &lt;td&gt;TA00717&lt;/td&gt;      &lt;td&gt;3.898305&lt;/td&gt;      &lt;td&gt;11.886437&lt;/td&gt;      &lt;td&gt;2827.236339&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;590&lt;/th&gt;      &lt;td&gt;TA00705&lt;/td&gt;      &lt;td&gt;4.952251&lt;/td&gt;      &lt;td&gt;8.341692&lt;/td&gt;      &lt;td&gt;3234.191975&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;481&lt;/th&gt;      &lt;td&gt;TA00577&lt;/td&gt;      &lt;td&gt;10.487147&lt;/td&gt;      &lt;td&gt;9.788223&lt;/td&gt;      &lt;td&gt;3240.086078&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;589&lt;/th&gt;      &lt;td&gt;TA00704&lt;/td&gt;      &lt;td&gt;5.378602&lt;/td&gt;      &lt;td&gt;6.998292&lt;/td&gt;      &lt;td&gt;3388.907422&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;596&lt;/th&gt;      &lt;td&gt;TA00711&lt;/td&gt;      &lt;td&gt;4.906530&lt;/td&gt;      &lt;td&gt;6.917064&lt;/td&gt;      &lt;td&gt;3389.011984&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;410&lt;/th&gt;      &lt;td&gt;TA00459&lt;/td&gt;      &lt;td&gt;9.066148&lt;/td&gt;      &lt;td&gt;6.569080&lt;/td&gt;      &lt;td&gt;3526.820348&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;577&lt;/th&gt;      &lt;td&gt;TA00692&lt;/td&gt;      &lt;td&gt;6.404114&lt;/td&gt;      &lt;td&gt;5.626307&lt;/td&gt;      &lt;td&gt;3559.025765&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;```python# Interactive visualsimport plotly.express as pximport plotly.graph_objects as gofig = px.scatter_mapbox(below_stations_metadata,                         lat=&quot;location.latitude&quot;,                         lon=&quot;location.longitude&quot;,                         hover_name=&quot;code&quot;,                         hover_data=[&quot;distance&quot;],                        color_discrete_sequence=[&quot;fuchsia&quot;],                        zoom=8,                        height=800,                        )# update marker sizefig.update_traces(marker=dict(size=10))# add a point for the central stationfig.add_trace(go.Scattermapbox(        lat=[muringato_loc[0]],        lon=[muringato_loc[1]],        mode='markers',        marker=go.scattermapbox.Marker(            size=14        ),        text=['Muringato gauging station'],    ))fig.update_layout(    mapbox_style=&quot;carto-positron&quot;,    margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0},    showlegend=False)fig.show()``````pythonpipe.plot_figs(    weather_stations_data,    list(muringato_data_s6_2022['water_level']),    list(below.keys()),    date=dateutil.parser.parse(str(muringato_data_s6_2022.index[0])).strftime('%d-%m-%Y'),     save=False   )```    Begin plotting!        ![png](water_level_pipeline_files/water_level_pipeline_15_1.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_2.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_3.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_4.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_5.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_6.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_7.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_8.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_9.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_10.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_11.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_12.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_13.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_14.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_15.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_16.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_17.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_18.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_19.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_20.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_21.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_22.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_23.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_24.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_25.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_26.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_27.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_28.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_29.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_30.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_31.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_32.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_33.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_34.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_35.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_36.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_37.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_38.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_39.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_40.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_41.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_42.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_43.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_44.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_45.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_46.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_47.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_48.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_49.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_50.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_51.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_52.png)        ![png](water_level_pipeline_files/water_level_pipeline_15_53.png)    ```pythonRADIUS = 100ewaso_weather_data_2020 = weather_stations_data.loc[ewaso_data_2020.index[0]:ewaso_data_2020.index[-1]]# ewaso stations within a particular radiusewaso_tahmo_stations_2020 = pipe.stations_within_radius(RADIUS, ewaso_loc[0], ewaso_loc[1], df=False)# Get stations without missing data# ewaso weather dataewaso_weather_data_2020_filtered = pipe.stations_data_check(stations_list=list(ewaso_tahmo_stations_2020),                                               percentage=1, data=ewaso_weather_data_2020                                              )# Check the sum of each column and drop columns with a sum of zero this is if the sum of water level is not equal to zeroewaso_weather_data_2020_filtered = ewaso_weather_data_2020_filtered.loc[:, ewaso_weather_data_2020_filtered.sum() != 0]```    API request: services/assets/v2/stations    ```pythonimport statsmodels.api as smdef calculate_lag(weather_stations_data, water_level_data, lag=3, above=None, below=None):    above_threshold_lag = dict()    below_threshold_lag = dict()    for cols in weather_stations_data.columns:        # check for positive correlation if not skip the column        if weather_stations_data[cols].corr(water_level_data['water_level']) &lt;= 0:            continue        # get the lag and the coefficient for columns with a positive correlation        coefficient_list = list(sm.tsa.stattools.ccf(weather_stations_data[cols], water_level_data['water_level']))            a = np.argmax(coefficient_list)        b = coefficient_list[a]         # print(f'{cols} has a lag of {a}')        # print(f'{cols} has a coefficient of {b}')        # print('-----------------------')        if a &gt; lag:            above_threshold_lag[cols] = a        elif a &lt;= lag:            below_threshold_lag[cols] = a    if above:        return above_threshold_lag    elif below:        return below_threshold_lag    else:        return above_threshold_lag, below_threshold_lag```Bringing all the functions together to create a pipeline```pythondef shed_stations(weather_stations_data, water_level_data,                  gauging_station_coords, radius, lag=3,                  percentage=1, above=None, below=None):    # Filter the date range based on the water level data from first day of the water level data to the last day of the water level data    weather_stations_data = weather_stations_data.loc[water_level_data.index[0]:water_level_data.index[-1]]    # Filter the weather stations based on the radius    lat, lon = gauging_station_coords[0], gauging_station_coords[1]    weather_stations_data_list = pipe.stations_within_radius(radius, lat, lon, df=False)    # get stations without missing data or the percentage of stations with missing data    weather_stations_data_filtered = pipe.stations_data_check(stations_list=weather_stations_data_list,                                                              percentage=percentage,                                                              data=weather_stations_data)    # Check the sum of each column and drop columns with a sum of zero this is if the sum of water level is not equal to zero    weather_stations_data_filtered = weather_stations_data_filtered.loc[:, weather_stations_data_filtered.sum() != 0]    # Filter the weather stations based on the lag and positive correlation    above_threshold_lag, below_threshold_lag = calculate_lag(weather_stations_data_filtered, water_level_data, lag=lag)    return above_threshold_lag, below_threshold_lag``````pythonabove_threshold_lag, below_threshold_lag = shed_stations(weather_stations_data, ewaso_data_2020, ewaso_loc, RADIUS, lag=3, percentage=1, above=True, below=False)len(below_threshold_lag)```    API request: services/assets/v2/stations        80### Plot the figures```pythonpipe.plot_figs(    weather_stations_data,    list(ewaso_data_2020['water_level']),    list(below_threshold_lag.keys()),    date=dateutil.parser.parse(str(ewaso_data_2020.index[0])).strftime('%d-%m-%Y'),     save=True   )```    Begin plotting!        ![png](water_level_pipeline_files/water_level_pipeline_22_1.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_2.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_3.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_4.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_5.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_6.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_7.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_8.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_9.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_10.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_11.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_12.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_13.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_14.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_15.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_16.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_17.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_18.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_19.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_20.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_21.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_22.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_23.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_24.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_25.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_26.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_27.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_28.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_29.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_30.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_31.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_32.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_33.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_34.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_35.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_36.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_37.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_38.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_39.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_40.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_41.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_42.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_43.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_44.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_45.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_46.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_47.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_48.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_49.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_50.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_51.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_52.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_53.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_54.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_55.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_56.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_57.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_58.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_59.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_60.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_61.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_62.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_63.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_64.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_65.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_66.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_67.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_68.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_69.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_70.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_71.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_72.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_73.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_74.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_75.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_76.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_77.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_78.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_79.png)        ![png](water_level_pipeline_files/water_level_pipeline_22_80.png)    Input water level data &lt;br&gt;Input TAHMO station data &lt;br&gt;```python# plot the two with different colorsfig, ax = plt.subplots(figsize=(10, 10))muringato_tahmo_stations.plot(kind='scatter',                            x='location.longitude',                            y='location.latitude',                            color='blue',                            alpha=0.7,                            ax=ax)ewaso_tahmo_stations.plot(kind='scatter',                            x='location.longitude',                            y='location.latitude',                            color='red',                            alpha=0.7,                            ax=ax)plt.show()```    ![png](water_level_pipeline_files/water_level_pipeline_24_0.png)    Apart from the completeness another method of validation by eliminating unusable sensors is checking for a positive correlation and lag- The default lag is 3 days between a particular station and the gauging station- The required format is a timeseries data - Provide the column names for evaluation format = [Date, data]- with the change in parameters one can choose above or below threshold ```pythondef plot_figs(weather_stations, water_list, threshold_list, save=False, dpi=500, date='11-02-2021'):    start_date = datetime.datetime.strptime(date, &quot;%d-%m-%Y&quot;)    end_date = start_date + datetime.timedelta(len(water_list)-1)    # weather_stations = weather_stations.set_index('Date')    df_plot = weather_stations[start_date:end_date]    df_plot = df_plot[threshold_list].reset_index()    df_plot.rename(columns={'index':'Date'}, inplace=True)            plt.rcParams['figure.figsize'] = (15, 9)    print('Begin plotting!')        for cols in df_plot.columns[1:]:        fig, ax1 = plt.subplots()        color = 'tab:blue'        ax1.set_xlabel(f'Time', fontsize=24, weight='bold')        ax1.set_ylabel(f'Rainfall {cols} (mm)', color=color, fontsize=24, weight='bold')        ax1.bar(pd.to_datetime(df_plot['Date'], format=&quot;%d/%m/%Y&quot;), df_plot[f'{cols}'], color=color, width=4, alpha=1.0)        ax1.tick_params(axis='y', labelcolor=color, labelsize=24)        ax1.tick_params(axis='x')        ax1.set_xticklabels(df_plot['Date'], fontsize=21, weight='bold')        ax1.grid(color='gray', linestyle='--', linewidth=0.8)        ax1.set(facecolor=&quot;white&quot;)        ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis        color = 'tab:red'        ax2.set_ylabel('Water level/Stage (m)', color=color, fontsize=24, weight='bold')        ax2.plot(pd.to_datetime(df_plot['Date'], format=&quot;%d/%m/%Y&quot;), water_list, color=color, linewidth=4)        ax2.tick_params(axis='y', labelcolor=color, labelsize=24)        ax2.set(facecolor=&quot;white&quot;)        plt.title('Stage and Rainfall against Time', fontsize=22, weight='bold')        date_form = DateFormatter(&quot;%m-%y&quot;)        ax1.xaxis.set_major_formatter(date_form)        fig.tight_layout()        if save:            fig.savefig(f'{cols}.png', dpi=dpi)``````pythonplot_figs(stations_df, lag_[list(lag_.keys())[0]]['water_list'], list(lag_.keys()), save=True, date='12-05-2020')```    Begin plotting!        ![png](water_level_pipeline_files/water_level_pipeline_27_1.png)        ![png](water_level_pipeline_files/water_level_pipeline_27_2.png)        ![png](water_level_pipeline_files/water_level_pipeline_27_3.png)        ![png](water_level_pipeline_files/water_level_pipeline_27_4.png)        ![png](water_level_pipeline_files/water_level_pipeline_27_5.png)        ![png](water_level_pipeline_files/water_level_pipeline_27_6.png)        ![png](water_level_pipeline_files/water_level_pipeline_27_7.png)        ![png](water_level_pipeline_files/water_level_pipeline_27_8.png)        ![png](water_level_pipeline_files/water_level_pipeline_27_9.png)    Format to get the stations maetadata```pythondef filter_metadata(lag_keys):    captured_list = [i.split('_')[0] for i in list(lag_keys)]    return fs.get_stations_info(multipleStations=captured_list)``````pythonfilter_metadata(list(lag_.keys()))```    API request: services/assets/v2/stations    &lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;code&lt;/th&gt;      &lt;th&gt;status&lt;/th&gt;      &lt;th&gt;installationdate&lt;/th&gt;      &lt;th&gt;elevationground&lt;/th&gt;      &lt;th&gt;sensorinstallations&lt;/th&gt;      &lt;th&gt;dataloggerinstallations&lt;/th&gt;      &lt;th&gt;creatorid&lt;/th&gt;      &lt;th&gt;created&lt;/th&gt;      &lt;th&gt;updaterid&lt;/th&gt;      &lt;th&gt;updated&lt;/th&gt;      &lt;th&gt;...&lt;/th&gt;      &lt;th&gt;location.countrycode&lt;/th&gt;      &lt;th&gt;location.zipcode&lt;/th&gt;      &lt;th&gt;location.latitude&lt;/th&gt;      &lt;th&gt;location.longitude&lt;/th&gt;      &lt;th&gt;location.elevationmsl&lt;/th&gt;      &lt;th&gt;location.note&lt;/th&gt;      &lt;th&gt;location.creatorid&lt;/th&gt;      &lt;th&gt;location.created&lt;/th&gt;      &lt;th&gt;location.updaterid&lt;/th&gt;      &lt;th&gt;location.updated&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;26&lt;/th&gt;      &lt;td&gt;TA00028&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2015-08-31T00:00:00Z&lt;/td&gt;      &lt;td&gt;9.0&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T08:35:17.888233Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T08:35:17.888233Z&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;KE&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;0.055219&lt;/td&gt;      &lt;td&gt;37.136747&lt;/td&gt;      &lt;td&gt;2003.6&lt;/td&gt;      &lt;td&gt;{}&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-10-26T13:32:16.15537Z&lt;/td&gt;      &lt;td&gt;37&lt;/td&gt;      &lt;td&gt;2022-06-30T11:11:50.27135Z&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;27&lt;/th&gt;      &lt;td&gt;TA00029&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2015-09-02T00:00:00Z&lt;/td&gt;      &lt;td&gt;2.0&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T08:36:19.30342Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T08:36:19.30342Z&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;KE&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;-0.500776&lt;/td&gt;      &lt;td&gt;36.587511&lt;/td&gt;      &lt;td&gt;2545.8&lt;/td&gt;      &lt;td&gt;{}&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-10-26T13:33:31.451613Z&lt;/td&gt;      &lt;td&gt;37&lt;/td&gt;      &lt;td&gt;2022-02-28T12:25:09.578242Z&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;53&lt;/th&gt;      &lt;td&gt;TA00057&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2015-10-08T00:00:00Z&lt;/td&gt;      &lt;td&gt;2.0&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T09:21:29.092833Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T09:21:29.092833Z&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;KE&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;-1.253030&lt;/td&gt;      &lt;td&gt;36.856487&lt;/td&gt;      &lt;td&gt;1645.3&lt;/td&gt;      &lt;td&gt;{}&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-10-29T09:13:33.768613Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2022-07-26T07:34:06.603938Z&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;68&lt;/th&gt;      &lt;td&gt;TA00074&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2015-11-19T00:00:00Z&lt;/td&gt;      &lt;td&gt;2.0&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T09:38:25.742397Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T09:38:25.742397Z&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;KE&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;-0.566080&lt;/td&gt;      &lt;td&gt;37.074412&lt;/td&gt;      &lt;td&gt;1726.8&lt;/td&gt;      &lt;td&gt;{}&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-10-29T10:35:28.49617Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2022-07-26T07:38:42.100985Z&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;74&lt;/th&gt;      &lt;td&gt;TA00080&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2016-01-28T00:00:00Z&lt;/td&gt;      &lt;td&gt;2.0&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T09:43:10.523398Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-11T09:43:10.523398Z&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;KE&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;-1.087589&lt;/td&gt;      &lt;td&gt;36.818402&lt;/td&gt;      &lt;td&gt;1777.3&lt;/td&gt;      &lt;td&gt;{}&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-10-29T10:53:47.845042Z&lt;/td&gt;      &lt;td&gt;37&lt;/td&gt;      &lt;td&gt;2022-02-28T13:07:04.709903Z&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;150&lt;/th&gt;      &lt;td&gt;TA00166&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2017-05-11T00:00:00Z&lt;/td&gt;      &lt;td&gt;2.0&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;None&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-12T08:29:28.10697Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-12-12T08:29:28.10697Z&lt;/td&gt;      &lt;td&gt;...&lt;/td&gt;      &lt;td&gt;KE&lt;/td&gt;      &lt;td&gt;&lt;/td&gt;      &lt;td&gt;-0.319508&lt;/td&gt;      &lt;td&gt;37.659139&lt;/td&gt;      &lt;td&gt;1404.0&lt;/td&gt;      &lt;td&gt;{}&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-11-10T08:47:37.949135Z&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2018-11-10T08:47:37.949135Z&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;6 rows Ã— 28 columns&lt;/p&gt;&lt;/div&gt;```python```</longdescription>
</pkgmetadata>