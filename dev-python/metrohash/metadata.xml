<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MetroHashPython wrapper for [MetroHash](https://github.com/jandrewrogers/MetroHash), afast non-cryptographic hash function.[![Build Status](https://img.shields.io/github/actions/workflow/status/escherba/python-metrohash/build.yml?branch=master)](https://github.com/escherba/python-metrohash/actions/workflows/build.yml)[![LatestVersion](https://img.shields.io/pypi/v/metrohash.svg)](https://pypi.python.org/pypi/metrohash)[![Downloads](https://img.shields.io/pypi/dm/metrohash.svg)](https://pypistats.org/packages/metrohash)[![License](https://img.shields.io/pypi/l/metrohash.svg)](https://opensource.org/licenses/Apache-2.0)[![Supported Pythonversions](https://img.shields.io/pypi/pyversions/metrohash.svg)](https://pypi.python.org/pypi/metrohash)## Getting StartedTo use this package in your program, simply type``` bashpip install metrohash```After that, you should be able to import the module and do things withit (see usage example below).## Usage Examples### Stateless hashingThis package provides Python interfaces to 64- and 128-bitimplementations of MetroHash algorithm. For stateless hashing, itexports `metrohash64` and `metrohash128` functions. Both take a value tobe hashed and an optional `seed` parameter:``` python&gt;&gt;&gt; import metrohash...&gt;&gt;&gt; metrohash.hash64_int(&quot;abc&quot;, seed=0)17099979927131455419&gt;&gt;&gt; metrohash.hash128_int(&quot;abc&quot;)182995299641628952910564950850867298725```### Incremental hashingUnlike its cousins CityHash and FarmHash, MetroHash allows incremental(stateful) hashing. For incremental hashing, use `MetroHash64` and`MetroHash128` classes. Incremental hashing is associative andguarantees that any combination of input slices will result in the samefinal hash value. This is useful for processing large inputs and streamdata. Example with two slices:``` python&gt;&gt;&gt; mh = metrohash.MetroHash64()&gt;&gt;&gt; mh.update(&quot;Nobody inspects&quot;)&gt;&gt;&gt; mh.update(&quot; the spammish repetition&quot;)&gt;&gt;&gt; mh.intdigest()7851180100622203313```The resulting hash value above should be the same as in:``` python&gt;&gt;&gt; mh = metrohash.MetroHash64()&gt;&gt;&gt; mh.update(&quot;Nobody inspects the spammish repetition&quot;)&gt;&gt;&gt; mh.intdigest()7851180100622203313```### Fast hashing of NumPy arraysThe Python [BufferProtocol](https://docs.python.org/3/c-api/buffer.html) allows Pythonobjects to expose their data as raw byte arrays to other objects, forfast access without copying to a separate location in memory. Amongothers, NumPy is a major framework that supports this protocol.All hashing functions in this packege will read byte arrays from objectsthat expose them via the buffer protocol. Here is an example showinghashing of a 4D NumPy array:``` python&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; arr = np.zeros((256, 256, 4))&gt;&gt;&gt; metrohash.hash64_int(arr)12125832280816116063```The arrays need to be contiguous for this to work. To convert anon-contiguous array, use NumPy's `ascontiguousarray()` function.## Development### Local workflowFor those who want to contribute, here is a quick start using somemakefile commands:``` bashgit clone https://github.com/escherba/python-metrohash.gitcd python-metrohashmake env           # create a virtual environmentmake test          # run Python testsmake cpp-test      # run C++ testsmake shell         # enter IPython shell```To find out which Make targets are available, type:``` bashmake help```### DistributionThe wheels are built using [cibuildwheel](https://cibuildwheel.readthedocs.io/)and are distributed to PyPI using GitHub actions. The wheels contain compiledbinaries and are available for the following platforms: windows-amd64,ubuntu-x86, linux-x86\_64, linux-aarch64, and macosx-x86\_64.## See AlsoFor other fast non-cryptographic hash functions available as Pythonextensions, see [FarmHash](https://github.com/escherba/python-cityhash)and [MurmurHash](https://github.com/hajimes/mmh3).## AuthorsThe MetroHash algorithm and C++ implementation is due to J. AndrewRogers. The Python bindings for it were written by Eugene Scherba.## LicenseThis software is licensed under the [Apache License,Version 2.0](https://opensource.org/licenses/Apache-2.0). See theincluded LICENSE file for details.</longdescription>
</pkgmetadata>