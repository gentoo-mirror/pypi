<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python 3D FDTD Simulator![Docs](https://readthedocs.org/projects/fdtd/badge/?version=latest)A 3D electromagnetic FDTD simulator written in Python. The FDTD simulator hasan optional PyTorch backend, enabling FDTD simulations on a GPU.## InstallationThe `fdtd`-library can be installed with `pip`:```pip install fdtd```The development version can be installed by cloning the repository```git clone http://github.com/flaport/fdtd```and linking it with pip```pip install -e fdtd```Development dependencies can be installed with```pip install -e fdtd[dev]```## Dependencies- python 3.6+- numpy- scipy- matplotlib- tqdm- pytorch (optional)## ContributingAll improvements or additions (for example new objects, sources or detectors) arewelcome. Please make a pull-request ðŸ˜Š.## Documentationread the documentation here: [https://fdtd.readthedocs.org](https://fdtd.readthedocs.org)### ImportsThe `fdtd` library is simply imported as follows:```pythonimport fdtd```### Setting the backendThe `fdtd` library allows to choose a backend. The `&quot;numpy&quot;` backend is thedefault one, but there are also several additional PyTorch backends:- `&quot;numpy&quot;` (defaults to float64 arrays)- `&quot;torch&quot;` (defaults to float64 tensors)- `&quot;torch.float32&quot;`- `&quot;torch.float64&quot;`- `&quot;torch.cuda&quot;` (defaults to float64 tensors)- `&quot;torch.cuda.float32&quot;`- `&quot;torch.cuda.float64&quot;`For example, this is how to choose the `&quot;torch&quot;` backend:```pythonfdtd.set_backend(&quot;torch&quot;)```In general, the `&quot;numpy&quot;` backend is preferred for standard CPU calculationswith `&quot;float64&quot;` precision. In general, `&quot;float64&quot;` precision is alwayspreferred over `&quot;float32&quot;` for FDTD simulations, however, `&quot;float32&quot;` mightgive a significant performance boost.The `&quot;cuda&quot;` backends are only available for computers with a GPU.### The FDTD-gridThe FDTD grid defines the simulation region.```python# signaturefdtd.Grid(    shape: Tuple[Number, Number, Number],    grid_spacing: float = 155e-9,    permittivity: float = 1.0,    permeability: float = 1.0,    courant_number: float = None,)```A grid is defined by its `shape`, which is just a 3D tuple of `Number`-types(integers or floats). If the shape is given in floats, it denotes the width,height and length of the grid in meters. If the shape is given in integers, itdenotes the width, height and length of the grid in terms of the`grid_spacing`. Internally, these numbers will be translated to three integers:`grid.Nx`, `grid.Ny` and `grid.Nz`.A `grid_spacing` can be given. For stability reasons, it is recommended tochoose a grid spacing that is at least 10 times smaller than the _smallest_wavelength in the grid. This means that for a grid containing a source withwavelength `1550nm` and a material with refractive index of `3.1`, therecommended minimum `grid_spacing` turns out to be `50nm`For the `permittivity` and `permeability` floats or arrays with the followingshapes- `(grid.Nx, grid.Ny, grid.Nz)`- or `(grid.Nx, grid.Ny, grid.Nz, 1)`- or `(grid.Nx, grid.Ny, grid.Nz, 3)`are expected. In the last case, the shape implies the possibility for differentpermittivity for each of the major axes (so-called _uniaxial_ or _biaxial_materials). Internally, these variables will be converted (for performancereasons) to their inverses `grid.inverse_permittivity` array and a`grid.inverse_permeability` array of shape `(grid.Nx, grid.Ny, grid.Nz, 3)`. Itis possible to change those arrays after making the grid.Finally, the `courant_number` of the grid determines the relation between the`time_step` of the simulation and the `grid_spacing` of the grid. If not given,it is chosen to be the maximum number allowed by the [Courant-Friedrichs-LewyCondition](https://en.wikipedia.org/wiki/Courantâ€“Friedrichsâ€“Lewy_condition):`1` for `1D` simulations, `1/âˆš2` for `2D` simulations and `1/âˆš3` for `3D`simulations (the dimensionality will be derived by the shape of the grid). Forstability reasons, it is recommended not to change this value.```pythongrid = fdtd.Grid(    shape = (25e-6, 15e-6, 1), # 25um x 15um x 1 (grid_spacing) --&gt; 2D FDTD)print(grid)```    Grid(shape=(161,97,1), grid_spacing=1.55e-07, courant_number=0.70)### Adding an object to the gridAn other option to locally change the `permittivity` or `permeability` in thegrid is to add an `Object` to the grid.```python# signaturefdtd.Object(    permittivity: Tensorlike,    name: str = None)```An object defines a part of the grid with modified update equations, allowingto introduce for example absorbing materials or biaxial materials for whichmixing between the axes are present through `Pockels coefficients` or manymore. In this case we'll make an object with a different `permittivity` thanthe grid it is in.Just like for the grid, the `Object` expects a `permittivity` to be a floats oran array of the following possible shapes- `(obj.Nx, obj.Ny, obj.Nz)`- or `(obj.Nx, obj.Ny, obj.Nz, 1)`- or `(obj.Nx, obj.Ny, obj.Nz, 3)`Note that the values `obj.Nx`, `obj.Ny` and `obj.Nz` are not given to theobject constructor. They are in stead derived from its placing in the grid:```pythongrid[11:32, 30:84, 0] = fdtd.Object(permittivity=1.7**2, name=&quot;object&quot;)```Several things happen here. First of all, the object is given the space`[11:32, 30:84, 0]` in the grid. Because it is given this space, the object's`Nx`, `Ny` and `Nz` are automatically set. Furthermore, by supplying a name tothe object, this name will become available in the grid:```pythonprint(grid.object)```        Object(name='object')            @ x=11:32, y=30:84, z=0:1A second object can be added to the grid:```pythongrid[13e-6:18e-6, 5e-6:8e-6, 0] = fdtd.Object(permittivity=1.5**2)```Here, a slice with floating point numbers was chosen. These floats will bereplaced by integer `Nx`, `Ny` and `Nz` during the registration of the object.Since the object did not receive a name, the object won't be available as anattribute of the grid. However, it is still available via the `grid.objects`list:```pythonprint(grid.objects)```    [Object(name='object'), Object(name=None)]This list stores all objects (i.e. of type `fdtd.Object`) in the order thatthey were added to the grid.### Adding a source to the gridSimilarly as to adding an object to the grid, an `fdtd.LineSource` can also beadded:```python# signaturefdtd.LineSource(    period: Number = 15, # timesteps or seconds    amplitude: float = 1.0,    phase_shift: float = 0.0,    name: str = None,)```And also just like an `fdtd.Object`, an `fdtd.LineSource` size is defined by itsplacement on the grid:```pythongrid[7.5e-6:8.0e-6, 11.8e-6:13.0e-6, 0] = fdtd.LineSource(    period = 1550e-9 / (3e8), name=&quot;source&quot;)```However, it is important to note that in this case a `LineSource` is added tothe grid, i.e. the source spans the diagonal of the cube defined by the slices.Internally, these slices will be converted into lists to ensure this behavior:```pythonprint(grid.source)```        LineSource(period=14, amplitude=1.0, phase_shift=0.0, name='source')            @ x=[48, ... , 51], y=[76, ... , 83], z=[0, ... , 0]Note that one could also have supplied lists to index the grid in the firstplace. This feature could be useful to create a `LineSource` of arbitraryshape.### Adding a detector to the grid```python# signaturefdtd.LineDetector(    name=None)```Adding a detector to the grid works the same as adding a source```pythongrid[12e-6, :, 0] = fdtd.LineDetector(name=&quot;detector&quot;)``````pythonprint(grid.detector)```        LineDetector(name='detector')            @ x=[77, ... , 77], y=[0, ... , 96], z=[0, ... , 0]### Adding grid boundaries```python# signaturefdtd.PML(    a: float = 1e-8, # stability factor    name: str = None)```Although, having an object, source and detector to simulate is in principleenough to perform an FDTD simulation, One also needs to define a grid boundaryto prevent the fields to be reflected. One of those boundaries that can beadded to the grid is a [Perfectly MatchedLayer](https://en.wikipedia.org/wiki/Perfectly_matched_layer) or `PML`. Theseare basically absorbing boundaries.```python# x boundariesgrid[0:10, :, :] = fdtd.PML(name=&quot;pml_xlow&quot;)grid[-10:, :, :] = fdtd.PML(name=&quot;pml_xhigh&quot;)# y boundariesgrid[:, 0:10, :] = fdtd.PML(name=&quot;pml_ylow&quot;)grid[:, -10:, :] = fdtd.PML(name=&quot;pml_yhigh&quot;)```### Grid summaryA simple summary of the grid can be shown by printing out the grid:```pythonprint(grid)```    Grid(shape=(161,97,1), grid_spacing=1.55e-07, courant_number=0.70)    sources:        LineSource(period=14, amplitude=1.0, phase_shift=0.0, name='source')            @ x=[48, ... , 51], y=[76, ... , 83], z=[0, ... , 0]    detectors:        LineDetector(name='detector')            @ x=[77, ... , 77], y=[0, ... , 96], z=[0, ... , 0]    boundaries:        PML(name='pml_xlow')            @ x=0:10, y=:, z=:        PML(name='pml_xhigh')            @ x=-10:, y=:, z=:        PML(name='pml_ylow')            @ x=:, y=0:10, z=:        PML(name='pml_yhigh')            @ x=:, y=-10:, z=:    objects:        Object(name='object')            @ x=11:32, y=30:84, z=0:1        Object(name=None)            @ x=84:116, y=32:52, z=0:1### Running a simulationRunning a simulation is as simple as using the `grid.run` method.```pythongrid.run(    total_time: Number,    progress_bar: bool = True)```Just like for the lengths in the grid, the `total_time` of the simulationcan be specified as an integer (number of `time_steps`) or as a float (inseconds).```pythongrid.run(total_time=100)```### Grid visualizationLet's visualize the grid. This can be done with the `grid.visualize` method:```python# signaturegrid.visualize(    grid,    x=None,    y=None,    z=None,    cmap=&quot;Blues&quot;,    pbcolor=&quot;C3&quot;,    pmlcolor=(0, 0, 0, 0.1),    objcolor=(1, 0, 0, 0.1),    srccolor=&quot;C0&quot;,    detcolor=&quot;C2&quot;,    show=True,)```This method will by default visualize all objects in the grid, as well as thefield intensity at the current `time_step` at a certain `x`, `y` **OR** `z`-plane. Bysetting `show=False`, one can disable the immediate visualization of thematplotlib image.```pythongrid.visualize(z=0)```![png](docs/_static/grid.png)## BackgroundAn as quick as possible explanation of the FDTD discretization of the Maxwellequations.### Update EquationsAn electromagnetic FDTD solver solves the time-dependent Maxwell Equations```python    curl(H) = Îµ*Îµ0*dE/dt    curl(E) = -Âµ*Âµ0*dH/dt```These two equations are called _Ampere's Law_ and _Faraday's Law_ respectively.In these equations, Îµ and Âµ are the relative permittivity and permeabilitytensors respectively. Îµ0 and Âµ0 are the vacuum permittivity and permeabilityand their square root can be absorbed into E and H respectively, such that `E := âˆšÎµ0*E` and `H := âˆšÂµ0*H`.Doing this, the Maxwell equations can be written as update equations:```python    E  += c*dt*inv(Îµ)*curl(H)    H  -= c*dt*inv(Âµ)*curl(E)```The electric and magnetic field can then be discretized on a grid withinterlaced Yee-coordinates, which in 3D looks like this:![grid discretization in 3D](docs/_static/yee.svg)According to the Yee discretization algorithm, there are inherently two typesof fields on the grid: `E`-type fields on integer grid locations and `H`-typefields on half-integer grid locations.The beauty of these interlaced coordinates is that they enable a very naturalway of writing the curl of the electric and magnetic fields: the curl of anH-type field will be an E-type field and vice versa.This way, the curl of E can be written as```python    curl(E)[m,n,p] = (dEz/dy - dEy/dz, dEx/dz - dEz/dx, dEy/dx - dEx/dy)[m,n,p]                   =( ((Ez[m,n+1,p]-Ez[m,n,p])/dy - (Ey[m,n,p+1]-Ey[m,n,p])/dz),                      ((Ex[m,n,p+1]-Ex[m,n,p])/dz - (Ez[m+1,n,p]-Ez[m,n,p])/dx),                      ((Ey[m+1,n,p]-Ey[m,n,p])/dx - (Ex[m,n+1,p]-Ex[m,n,p])/dy) )                   =(1/du)*( ((Ez[m,n+1,p]-Ez[m,n,p]) - (Ey[m,n,p+1]-Ey[m,n,p])), [assume dx=dy=dz=du]                             ((Ex[m,n,p+1]-Ex[m,n,p]) - (Ez[m+1,n,p]-Ez[m,n,p])),                             ((Ey[m+1,n,p]-Ey[m,n,p]) - (Ex[m,n+1,p]-Ex[m,n,p])) )```this can be written efficiently with array slices (note that the factor`(1/du)` was left out):```pythondef curl_E(E):    curl_E = np.zeros(E.shape)    curl_E[:,:-1,:,0] += E[:,1:,:,2] - E[:,:-1,:,2]    curl_E[:,:,:-1,0] -= E[:,:,1:,1] - E[:,:,:-1,1]    curl_E[:,:,:-1,1] += E[:,:,1:,0] - E[:,:,:-1,0]    curl_E[:-1,:,:,1] -= E[1:,:,:,2] - E[:-1,:,:,2]    curl_E[:-1,:,:,2] += E[1:,:,:,1] - E[:-1,:,:,1]    curl_E[:,:-1,:,2] -= E[:,1:,:,0] - E[:,:-1,:,0]    return curl_E```The curl for H can be obtained in a similar way (note again that the factor`(1/du)` was left out):```pythondef curl_H(H):    curl_H = np.zeros(H.shape)    curl_H[:,1:,:,0] += H[:,1:,:,2] - H[:,:-1,:,2]    curl_H[:,:,1:,0] -= H[:,:,1:,1] - H[:,:,:-1,1]    curl_H[:,:,1:,1] += H[:,:,1:,0] - H[:,:,:-1,0]    curl_H[1:,:,:,1] -= H[1:,:,:,2] - H[:-1,:,:,2]    curl_H[1:,:,:,2] += H[1:,:,:,1] - H[:-1,:,:,1]    curl_H[:,1:,:,2] -= H[:,1:,:,0] - H[:,:-1,:,0]    return curl_H```The update equations can now be rewritten as```python    E  += (c*dt/du)*inv(Îµ)*curl_H    H  -= (c*dt/du)*inv(Âµ)*curl_E```The number `(c*dt/du)` is a dimensionless parameter called the _Courant number_`sc`. For stability reasons, the Courant number should always be smaller than`1/âˆšD`, with `D` the dimension of the simulation. This can be intuitively beunderstood as the condition that information should always travel slower thanthe speed of light through the grid. In the FDTD method described here,information can only travel to the neighboring grid cells (through applicationof the curl). It would therefore take `D` time steps to travel over thediagonal of a `D`-dimensional cube (square in `2D`, cube in `3D`), the Courantcondition follows then automatically from the fact that the length of thisdiagonal is `1/âˆšD`.This yields the final update equations for the FDTD algorithm:```python    E  += sc*inv(Îµ)*curl_H    H  -= sc*inv(Âµ)*curl_E```This is also how it is implemented:```pythonclass Grid:    # ... [initialization]    def step(self):        self.update_E()        self.update_H()    def update_E(self):        self.E += self.courant_number * self.inverse_permittivity * curl_H(self.H)    def update_H(self):        self.H -= self.courant_number * self.inverse_permeability * curl_E(self.E)```### SourcesAmpere's Law can be updated to incorporate a current density:```python    curl(H) = J + Îµ*Îµ0*dE/dt```Making again the usual substitutions `sc := c*dt/du`, `E := âˆšÎµ0*E` and `H := âˆšÂµ0*H`, the update equations can be modified to include the current density:```python    E += sc*inv(Îµ)*curl_H - dt*inv(Îµ)*J/âˆšÎµ0```Making one final substitution `Es := -dt*inv(Îµ)*J/âˆšÎµ0` allows us to write thisin a very clean way:```python    E += sc*inv(Îµ)*curl_H + Es```Where we defined Es as the _electric field source term_.It is often useful to also define a _magnetic field source term_ `Hs`, which would bederived from the _magnetic current density_ if it were to exist. In the same way,Faraday's update equation can be rewritten as```python    H  -= sc*inv(Âµ)*curl_E + Hs``````pythonclass Source:    # ... [initialization]    def update_E(self):        # electric source function here    def update_H(self):        # magnetic source function hereclass Grid:    # ... [initialization]    def update_E(self):        # ... [electric field update equation]        for source in self.sources:            source.update_E()    def update_H(self):        # ... [magnetic field update equation]        for source in self.sources:            source.update_H()```### Lossy MediumWhen a material has a _electric conductivity_ Ïƒ, a conduction-current willensure that the medium is lossy. Ampere's law with a conduction current becomes```python    curl(H) = Ïƒ*E + Îµ*Îµ0*dE/dt```Making the usual substitutions, this becomes:```python    E(t+dt) - E(t) = sc*inv(Îµ)*curl_H(t+dt/2) - dt*inv(Îµ)*Ïƒ*E(t+dt/2)/Îµ0```This update equation depends on the electric field on a half-integer time step (a_magnetic field time step_). We need to substitute `E(t+dt/2)=(E(t)+E(t+dt))/2` tointerpolate the electric field to the correct time step.```python    (1 + 0.5*dt*inv(Îµ)*Ïƒ/âˆšÎµ0)*E(t+dt) = sc*inv(Îµ)*curl_H(t+dt/2) + (1 - 0.5*dt*inv(Îµ)*Ïƒ/Îµ0)*E(t)```Which, yield the new update equations:```python    f = 0.5*inv(Îµ)*Ïƒ*sc*du/(Îµ0*c)    E *= inv(1 + f) * (1 - f)    E += inv(1 + f)*sc*inv(Îµ)*curl_H```Note that the more complicated the permittivity tensor Îµ is, the more timeconsuming this algorithm will be. It is therefore sometimes a nice hack totransfer the absorption to the magnetic domain by introducing a(_nonphysical_) magnetic conductivity, because the permeability tensor Âµ isusually just equal to one:```python    f = 0.5*inv(Î¼)*Ïƒm*sc*du/(Î¼0*c)    H *= inv(1 + f) * (1 - f)    H += inv(1 + f)*sc*inv(Âµ)*curl_E```### Energy Density and Poynting VectorThe electromagnetic energy density can be given by```python    e = (1/2)*Îµ*Îµ0*E**2 + (1/2)*Âµ*Âµ0*H**2```making the above substitutions, this becomes in simulation units:```python    e = (1/2)*Îµ*E**2 + (1/2)*Âµ*H**2```The Poynting vector is given by```python    P = EÃ—H```Which in simulation units becomes```python    P = c*EÃ—H```The energy introduced by a source `Es` can be derived from tracking the changein energy density```python    de = Îµ*EsÂ·E + (1/2)*Îµ*Es**2```This could also be derived from Poyntings energy conservation law:```python    de/dt = -grad(S) - JÂ·E```where the first term just describes the redistribution of energy in a volumeand the second term describes the energy introduced by a current density.Note: although it is unphysical, one could also have introduced a magneticsource. This source would have introduced the following energy:```python    de = Îµ*HsÂ·H + (1/2)*Âµ*Hs**2```Since the Âµ-tensor is usually just equal to one, using a magnetic source termis often more efficient.Similarly, one can also keep track of the absorbed energy due to an electricconductivity in the following way:```python    f = 0.5*inv(Îµ)*Ïƒ*sc*du/(Îµ0*c)    Enoabs = E + sc*inv(Îµ)*curl_H    E *= inv(1 + f) * (1 - f)    E += inv(1 + f)*sc*inv(Îµ)*curl_H    dE = Enoabs - E    e_abs += Îµ*E*dE + 0.5*Îµ*dE**2```or if we want to keep track of the absorbed energy by magnetic a magneticconductivity:```python    f = 0.5*inv(Î¼)*Ïƒm*sc*du/(Î¼0*c)    Hnoabs = E + sc*inv(Âµ)*curl_E    H *= inv(1 + f) * (1 - f)    H += inv(1 + f)*sc*inv(Âµ)*curl_E    dH = Hnoabs - H    e_abs += Âµ*H*dH + 0.5*Âµ*dH**2```The electric term and magnetic term in the energy density are usually of thesame size. Therefore, the same amount of energy will be absorbed by introducinga _magnetic conductivity_ Ïƒm as by introducing a _electric conductivity_ Ïƒ if:```python    inv(Âµ)*Ïƒm/Âµ0 = inv(Îµ)*Ïƒ/Îµ0```### Boundary Conditions#### Periodic Boundary ConditionsAssuming we want periodic boundary conditions along the `X`-direction, then wehave to make sure that the fields at `Xlow` and `Xhigh` are the same. This hasto be enforced after performing the update equations:Note that the electric field `E` is dependent on `curl_H`, which means that thefirst indices of `E` will not be updated through the update equations. It'sthose indices that need to be set through the periodic boundary condition.Concretely: `E[0]` needs to be set to equal `E[-1]`. For the magnetic field,the inverse is true: `H` is dependent on `curl_E`, which means that its lastindices will not be set. This has to be done by the boundary condition: `H[-1]`needs to be set equal to `H[0]`:```pythonclass PeriodicBoundaryX:    # ... [initialization]    def update_E(self):        self.grid.E[0, :, :, :] = self.grid.E[-1, :, :, :]    def update_H(self):        self.grid.H[-1, :, :, :] = self.grid.H[0, :, :, :]class Grid:    # ... [initialization]    def update_E(self):        # ... [electric field update equation]        # ... [electric field source update equations]        for boundary in self.boundaries:            boundary.update_E()    def update_H(self):        # ... [magnetic field update equation]        # ... [magnetic field source update equations]        for boundary in self.boundaries:            boundary.update_H()```#### Perfectly Matched Layera Perfectly Matched Layer (PML) is the state of the art forintroducing absorbing boundary conditions in an FDTD grid.A PML is an impedance-matched absorbing area in the grid. It turns out thatfor a impedance-matching condition to hold, the PML can only be absorbing ina single direction. This is what makes a PML in fact a nonphysical material.Consider Ampere's law for the `Ez` component, where we use the following substitutions:`E := âˆšÎµ0*E`, `H := âˆšÂµ0*H` and `Ïƒ := inv(Îµ)*Ïƒ/Îµ0` arealready introduced:```python    Îµ*dEz/dt + Îµ*Ïƒ*Ez = c*dHy/dx - c*dHx/dy```This becomes in the frequency domain:```python    iÏ‰*Îµ*Ez + Îµ*Ïƒ*Ez = c*dHy/dx - c*dHx/dy```We can split this equation in a x-propagating wave and a y-propagating wave:```python    iÏ‰*Îµ*Ezx + Îµ*Ïƒx*Ezx = iÏ‰*Îµ*(1 + Ïƒx/iÏ‰)*Ezx = c*dHy/dx    iÏ‰*Îµ*Ezy + Îµ*Ïƒy*Ezy = iÏ‰*Îµ*(1 + Ïƒy/iÏ‰)*Ezy = -c*dHx/dy```We can define the `S`-operators as follows```python    Su = 1 + Ïƒu/iÏ‰          with u in {x, y, z}```In general, we prefer to add a stability factor `au` and a scaling factor `ku` to `Su`:```python    Su = ku + Ïƒu/(iÏ‰+au)    with u in {x, y, z}```Summing the two equations for `Ez` back together after dividing by the respective `S`-operator gives```python    iÏ‰*Îµ*Ez = (c/Sx)*dHy/dx - (c/Sy)*dHx/dy```Converting this back to the time domain gives```python    Îµ*dEz/dt = c*sx[*]dHy/dx - c*sx[*]dHx/dy```where `sx` denotes the inverse Fourier transform of `(1/Sx)` and `[*]` denotes a convolution.The expression for `su` can be proven [after some derivation] to look as follows:```python    su = (1/ku)*Î´(t) + Cu(t)    with u in {x, y, z}```where `Î´(t)` denotes the Dirac delta function and `C(t)` an exponentiallydecaying function given by:```python    Cu(t) = -(Ïƒu/ku**2)*exp(-(au+Ïƒu/ku)*t)     for all t &gt; 0 and u in {x, y, z}```Plugging this in gives:```python    dEz/dt = (c/kx)*inv(Îµ)*dHy/dx - (c/ky)*inv(Îµ)*dHx/dy + c*inv(Îµ)*Cx[*]dHy/dx - c*inv(Îµ)*Cx[*]dHx/dy           = (c/kx)*inv(Îµ)*dHy/dx - (c/ky)*inv(Îµ)*dHx/dy + c*inv(Îµ)*Ð¤ez/du      with du=dx=dy=dz```This can be written as an update equation:```python    Ez += (1/kx)*sc*inv(Îµ)*dHy - (1/ky)*sc*inv(Îµ)*dHx + sc*inv(Îµ)*Ð¤ez```Where we defined `Ð¤eu` as```python    Ð¤eu = Î¨euv - Î¨ezw           with u, v, w in {x, y, z}```and `Î¨euv` as the convolution updating the component `Eu` by taking the derivative of `Hw` in the `v` direction:```python    Î¨euv = dv*Cv[*]dHw/dv     with u, v, w in {x, y, z}```This can be rewritten [after some derivation] as an update equation in itself:```python     Î¨euv = bv*Î¨euv + cv*dv*(dHw/dv)          = bv*Î¨euv + cv*dHw            with u, v, w in {x, y, z}```Where the constants `bu` and `cu` are derived to be:```python    bu = exp(-(au + Ïƒu/ku)*dt)              with u in {x, y, z}    cu = Ïƒu*(bu - 1)/(Ïƒu*ku + au*ku**2)     with u in {x, y, z}```The final PML algorithm for the electric field now becomes:1. Update `Ð¤e=[Ð¤ex, Ð¤ey, Ð¤ez]` by using the update equation for the `Î¨`-components.2. Update the electric fields the normal way3. Add `Ð¤e` to the electric fields.or as python code:```pythonclass PML(Boundary):    # ... [initialization]    def update_phi_E(self): # update convolution        self.psi_Ex *= self.bE        self.psi_Ey *= self.bE        self.psi_Ez *= self.bE        c = self.cE        Hx = self.grid.H[self.locx]        Hy = self.grid.H[self.locy]        Hz = self.grid.H[self.locz]        self.psi_Ex[:, 1:, :, 1] += (Hz[:, 1:, :] - Hz[:, :-1, :]) * c[:, 1:, :, 1]        self.psi_Ex[:, :, 1:, 2] += (Hy[:, :, 1:] - Hy[:, :, :-1]) * c[:, :, 1:, 2]        self.psi_Ey[:, :, 1:, 2] += (Hx[:, :, 1:] - Hx[:, :, :-1]) * c[:, :, 1:, 2]        self.psi_Ey[1:, :, :, 0] += (Hz[1:, :, :] - Hz[:-1, :, :]) * c[1:, :, :, 0]        self.psi_Ez[1:, :, :, 0] += (Hy[1:, :, :] - Hy[:-1, :, :]) * c[1:, :, :, 0]        self.psi_Ez[:, 1:, :, 1] += (Hx[:, 1:, :] - Hx[:, :-1, :]) * c[:, 1:, :, 1]        self.phi_E[..., 0] = self.psi_Ex[..., 1] - self.psi_Ex[..., 2]        self.phi_E[..., 1] = self.psi_Ey[..., 2] - self.psi_Ey[..., 0]        self.phi_E[..., 2] = self.psi_Ez[..., 0] - self.psi_Ez[..., 1]    def update_E(self): # update PML located at self.loc        self.grid.E[self.loc] += (            self.grid.courant_number            * self.grid.inverse_permittivity[self.loc]            * self.phi_E        )class Grid:    # ... [initialization]    def update_E(self):        for boundary in self.boundaries:            boundary.update_phi_E()        # ... [electric field update equation]        # ... [electric field source update equations]        for boundary in self.boundaries:            boundary.update_E()```The same has to be applied for the magnetic field.These update equations for the PML were based on[Schneider, Chap. 11](https://www.eecs.wsu.edu/~schneidj/ufdtd).## Units&lt;!---flaport, if you have the time, I'd appreciate it if you could confirmthat I've understood this correctly.I'm adding this because I got pretty confused regarding the units;if you think it's self-evident, feel free to remove.In particular, is the H := âˆšÂµ0*H scaling really applied nowhere in the library?Can this be assumed?---&gt;As a bare FDTD library, this is dimensionally agnostic for any unit system you may choose.No conversion factors are applied within the library API; this is left to the user.(The code used to calculate the Courant limit may be a sticking point depending on the time scale involved).However, as noted above (`H := âˆšÂµ0*H`), it is generally good numerical practice to scale all values toget the maximum precision from floating-point types.In particular, a scaling scheme detailed in [&quot;Novel architectures for brain-inspired photonic computers&quot;](https://www.photonics.intec.ugent.be/download/phd_259.pdf), Chapters 4.1.2 and 4.1.6, is highly recommended.A set of conversion functions to and from reduced units are available for users in conversions.py.&lt;!---On the other hand, use of this scaling scheme really makes most of the new functions less useful,because the results don't have physical dimensions by default and have to be scaled by weirdcoefficients by the user (scale impedance?!?)grid.H_scaling_factor = sqrt(mu0) ?---&gt;## LinterYou can run a linter in the root using `pylint fdtd`.## LicenseÂ© Floris laporte - [MIT License](license)</longdescription>
</pkgmetadata>