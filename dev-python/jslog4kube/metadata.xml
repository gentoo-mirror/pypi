<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># jslog4kube (python/JSON logging for kubernetes pod/containers)## Why?  * provide a JSON-to-stdout setup for python  * provide the same JSON-to-stdout setup for [gunicorn](http://gunicorn.org)  * because creating complex log collector configs to handle whatever    that other person thought was a good-idea-at-the-time is for the birds.We want to make it easier for our clients and ourselves to start new projectsthat emit good logging.### making it goTwo environment variables configure this module:  * `KUBE_META`: specifies the mount-point for the Kubernetes downward-API  [volumes](https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/) bits (default: /etc/meta)  * `KUBE_META_ENV_PREFIX`: the textual prefix for any  [environment variables](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)  targetted for inclusion in this pod’s log records (default: X)------------------------------------------------------------------------------------------- These bits have been verified to be functional under python 2.7.13, 3.5.3 and 3.6.1-------------------------------------------------------------------------------------------```pythonfrom logging.config import dictConfigfrom jslog4kube import LOGGINGdictConfig(LOGGING)```#### From Djangoproject `settings.py````pythonfrom jslog4kube import LOGGING```#### [gunicorn](http://gunicorn.org)gunicorn.conf```pythonaccess_log_format = 'remote!%({X-Forwarded-For}i)s|method!%(m)s|url-path!%(U)s|query!%(q)s|username!%(u)s|protocol!%(H)s|status!%(s)s|response-length!%(b)s|referrer!%(f)s|user-agent!%(a)s|request-time!%(L)s'accesslog = '-'logger_class = 'jslog4kube.GunicornLogger'```gunicorn CLI```bashgunicorn -c /path/to/gunicorn.conf [rest of your options here]```This will produce the following kind of output:```json{  &quot;asctime&quot;: &quot;2017-07-12 16:07:34,624&quot;,  &quot;message&quot;: &quot;Booting worker with pid: 6801&quot;,  &quot;name&quot;: &quot;gunicorn.error&quot;,  &quot;created&quot;: 1499893654.6243172,  &quot;filename&quot;: &quot;glogging.py&quot;,  &quot;module&quot;: &quot;glogging&quot;,  &quot;funcName&quot;: &quot;info&quot;,  &quot;lineno&quot;: 247,  &quot;msecs&quot;: 624.3171691894531,  &quot;pathname&quot;: &quot;/home/gladiatr/.virtualenvs/json-logs-for-kube/lib/python3.6/site-packages/gunicorn/glogging.py&quot;,  &quot;process&quot;: 6801,  &quot;processName&quot;: &quot;MainProcess&quot;,  &quot;relativeCreated&quot;: 70.62673568725586,  &quot;thread&quot;: 140275859264576,  &quot;threadName&quot;: &quot;MainThread&quot;,  &quot;levelname&quot;: &quot;INFO&quot;,  &quot;x_node_name&quot;: &quot;ip-10-70-59-190.eu-central-1.compute.internal&quot;,  &quot;x_sa_name&quot;: &quot;default&quot;,  &quot;x_pod_ip&quot;: &quot;100.96.1.11&quot;,  &quot;build&quot;: &quot;5000&quot;,  &quot;builder&quot;: &quot;Stephen Spencer&quot;,  &quot;image&quot;: &quot;gladiatr72/kube-demo&quot;,  &quot;version&quot;: &quot;1.0.2&quot;,  &quot;app&quot;: &quot;kube-demo&quot;,  &quot;env&quot;: &quot;dev&quot;,  &quot;pod-template-hash&quot;: &quot;2802633501&quot;,  &quot;something&quot;: &quot;else&quot;}{  &quot;asctime&quot;: &quot;2017-07-12 21:08:16,354&quot;,  &quot;message&quot;: &quot;in view: Chameleon&quot;,  &quot;name&quot;: &quot;efk.views&quot;,  &quot;created&quot;: 1499893696.3544216,  &quot;filename&quot;: &quot;views.py&quot;,  &quot;module&quot;: &quot;views&quot;,  &quot;funcName&quot;: &quot;Chameleon&quot;,  &quot;lineno&quot;: 12,  &quot;msecs&quot;: 354.42161560058594,  &quot;pathname&quot;: &quot;/home/gladiatr/git/json-logs-for-kube/demo/efk/views.py&quot;,  &quot;process&quot;: 6800,  &quot;processName&quot;: &quot;MainProcess&quot;,  &quot;relativeCreated&quot;: 41800.73118209839,  &quot;thread&quot;: 140275726399232,  &quot;threadName&quot;: &quot;&lt;concurrent.futures.thread.ThreadPoolExecutor object at 0x7f947f4b0828&gt;_0&quot;,  &quot;levelname&quot;: &quot;INFO&quot;,  &quot;x_node_name&quot;: &quot;ip-10-70-59-190.eu-central-1.compute.internal&quot;,  &quot;x_sa_name&quot;: &quot;default&quot;,  &quot;x_pod_ip&quot;: &quot;100.96.1.11&quot;,  &quot;build&quot;: &quot;5000&quot;,  &quot;builder&quot;: &quot;Stephen Spencer&quot;,  &quot;image&quot;: &quot;gladiatr72/kube-demo&quot;,  &quot;version&quot;: &quot;1.0.2&quot;,  &quot;app&quot;: &quot;kube-demo&quot;,  &quot;env&quot;: &quot;dev&quot;,  &quot;pod-template-hash&quot;: &quot;2802633501&quot;,  &quot;something&quot;: &quot;else&quot;,  &quot;additional data&quot;: &quot;whee&quot;}{  &quot;asctime&quot;: &quot;2017-07-12 21:08:16,369&quot;,  &quot;message&quot;: &quot;(access record)&quot;,  &quot;name&quot;: &quot;gunicorn.access&quot;,  &quot;created&quot;: 1499893696.3695881,  &quot;filename&quot;: &quot;glogging.py&quot;,  &quot;module&quot;: &quot;glogging&quot;,  &quot;funcName&quot;: &quot;access&quot;,  &quot;lineno&quot;: 327,  &quot;msecs&quot;: 369.58813667297363,  &quot;pathname&quot;: &quot;/home/gladiatr/.virtualenvs/json-logs-for-kube/lib/python3.6/site-packages/gunicorn/glogging.py&quot;,  &quot;process&quot;: 6800,  &quot;processName&quot;: &quot;MainProcess&quot;,  &quot;relativeCreated&quot;: 41815.89770317078,  &quot;thread&quot;: 140275726399232,  &quot;threadName&quot;: &quot;&lt;concurrent.futures.thread.ThreadPoolExecutor object at 0x7f947f4b0828&gt;_0&quot;,  &quot;levelname&quot;: &quot;INFO&quot;,  &quot;x_node_name&quot;: &quot;ip-10-70-59-190.eu-central-1.compute.internal&quot;,  &quot;x_sa_name&quot;: &quot;default&quot;,  &quot;x_pod_ip&quot;: &quot;100.96.1.11&quot;,  &quot;build&quot;: &quot;5000&quot;,  &quot;builder&quot;: &quot;Stephen Spencer&quot;,  &quot;image&quot;: &quot;gladiatr72/kube-demo&quot;,  &quot;version&quot;: &quot;1.0.2&quot;,  &quot;app&quot;: &quot;kube-demo&quot;,  &quot;env&quot;: &quot;dev&quot;,  &quot;pod-template-hash&quot;: &quot;2802633501&quot;,  &quot;something&quot;: &quot;else&quot;,  &quot;access&quot;: {    &quot;remote&quot;: &quot;10.0.1.195&quot;,    &quot;method&quot;: &quot;GET&quot;,    &quot;url-path&quot;: &quot;/&quot;,    &quot;query&quot;: &quot;&quot;,    &quot;username&quot;: &quot;-&quot;,    &quot;protocol&quot;: &quot;HTTP/1.0&quot;,    &quot;status&quot;: &quot;200&quot;,    &quot;response-length&quot;: &quot;140&quot;,    &quot;referrer&quot;: &quot;-&quot;,    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36&quot;,    &quot;request-time&quot;: &quot;0.019269&quot;  }}```## Example Kubernetes deployment:```yamlapiVersion: extensions/v1beta1kind: Deploymentmetadata:         &lt;&lt;-- This is not the metadata you are looking for  name: kube-demo  labels:    project: kube-demo    environment: devspec:  replicas: 1  selector:    matchLabels:      app: kube-demo      env: dev  template:    metadata:      labels:        app: kube-demo        env: dev        something: else      annotations:        build: &quot;5000&quot;        builder: &quot;Stephen Spencer&quot;        image: &quot;gladiatr72/kube-demo&quot;        version: &quot;1.0.2&quot;```### Currently only `metadata.(labels|annotations)` are supported for exposure via volume.(_Reasons_, right?)```yaml    spec:      volumes:          name: podinfo          downwardAPI:            items:              - path: labels                fieldRef:                  fieldPath: metadata.labels              - path: annotations                fieldRef:                  fieldPath: metadata.annotations      containers:        - name: kube-demo          image: gladiatr72/kube-demo:1.0.2          volumeMounts:            -              name: run              mountPath: /run            -              name: podinfo              readOnly: true              mountPath: /etc/meta  &lt;&lt;-- KUBE_META must equal this```### environment variable prefixes(or: how to avoid looking like a complete idiot when you spam your data-storepassword into your logging system)You can use whatever letter or sequence for the prefix as long as it gets matchedwith the value of `KUBE_META_ENV_PREFIX`.```yaml          env:            - name: MEMCACHE_HOST              value: unix:/run/memcache.sock            - name: DJANGO_SETTINGS_MODULE              value: &quot;revsys.settings.dev&quot;            - name: DJANGO_FQDN              value: kube-demo.dev.revsys.com            - name: *X_NODE_NAME              valueFrom:                fieldRef:                 fieldPath: spec.nodeName            - name: *X_POD_IP              valueFrom:                fieldRef:                  fieldPath: status.podIP            - name: *X_SA_NAME              valueFrom:                fieldRef:                  fieldPath: spec.serviceAccountName            - name: REDIS_PASSWORD  (oh, nos!)              valueFrom:                secretKeyRef:                  name: redis                  key: pass          ports:            - containerPort: 8000    * unmagical prefix set in KUBE_META_ENV_PREFIX```## The logging configurationIt’s just a standard python dictionary. The most obvious thing to changeis the handler definition.```pythonfrom jslog4kube import LOGGINGLOGGING_HANDLERS = {    'mypackage': {        'handlers': ['json-stdout'],        'formatters': ['json'],        'propagate’: False,        'level’: 'ERROR',    }}LOGGING['handlers'].update(LOGGING_HANDLERS)```## Setup your python/django apps to log correctlyThe `LOGGING` dict this provides sets up the &quot;general&quot; things to log, but ifyou want to include your own Python libraries or Django apps you need to specifythem.  To specify a Django app named 'foo', you would simply adjust the `LOGGING` dict like this:```LOGGERS = {    'foo': {        'handlers': ['json-stdout'],        'formatters': ['json'],        'propagate': True,        'level': 'INFO',    }}LOGGING['loggers'].update(LOGGERS)dictConfig(LOGGING)```Or if you want to log EVERYTHING at an `DEBUG` level you can set a blank (aka default) logger:```LOGGERS = {    '': {        'handlers': ['json-stdout'],        'formatters': ['json'],        'propagate': True,        'level': 'DEBUG',    }}LOGGING['loggers'].update(LOGGERS)dictConfig(LOGGING)```## UsageThis is normal Python logging so you can do something simple like our info callbelow or more complex like the debug call and add additional data to the log information:```import logginglogger = logging.getLogger(__name__)logger.info(&quot;Simple log message&quot;)foo = 12bar = 'something else'logger.debug(&quot;More complicated message&quot;, extra={  &quot;foo&quot;: foo,  &quot;bar&quot;: bar,})```## Need help?[REVSYS](http://www.revsys.com?utm_medium=github&amp;utm_source=jslog4kube) can help with your Python, Django, and infrastructure projects. If you have a question about this project, please open a GitHub issue. If you love us and want to keep track of our goings-on, here's where you can find us online:&lt;a href=&quot;https://revsys.com?utm_medium=github&amp;utm_source=jslog4kube&quot;&gt;&lt;img src=&quot;https://pbs.twimg.com/profile_images/915928618840285185/sUdRGIn1_400x400.jpg&quot; height=&quot;50&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/revsys&quot;&gt;&lt;img src=&quot;https://cdn1.iconfinder.com/data/icons/new_twitter_icon/256/bird_twitter_new_simple.png&quot; height=&quot;43&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/revsysllc/&quot;&gt;&lt;img src=&quot;https://cdn3.iconfinder.com/data/icons/picons-social/57/06-facebook-512.png&quot; height=&quot;50&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/revsys/&quot;&gt;&lt;img src=&quot;https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png&quot; height=&quot;53&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://gitlab.com/revsys&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/GitLab_Logo.svg/2000px-GitLab_Logo.svg.png&quot; height=&quot;44&quot; /&gt;&lt;/a&gt;</longdescription>
</pkgmetadata>