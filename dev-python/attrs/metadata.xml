<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://www.attrs.org/&quot;&gt;    &lt;img src=&quot;https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg&quot; width=&quot;35%&quot; alt=&quot;attrs&quot; /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;   &lt;a href=&quot;https://www.attrs.org/en/stable/&quot;&gt;       &lt;img src=&quot;https://img.shields.io/badge/Docs-RTD-black&quot; alt=&quot;Documentation&quot; /&gt;   &lt;/a&gt;   &lt;a href=&quot;https://github.com/python-attrs/attrs/blob/main/LICENSE&quot;&gt;      &lt;img src=&quot;https://img.shields.io/badge/license-MIT-C06524&quot; alt=&quot;License: MIT&quot; /&gt;   &lt;/a&gt;   &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/6482&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/6482/badge&quot;&gt;&lt;/a&gt;   &lt;a href=&quot;https://pypi.org/project/attrs/&quot;&gt;      &lt;img src=&quot;https://img.shields.io/pypi/v/attrs&quot; /&gt;   &lt;/a&gt;   &lt;a href=&quot;https://pepy.tech/project/attrs&quot;&gt;      &lt;img src=&quot;https://static.pepy.tech/personalized-badge/attrs?period=month&amp;units=international_system&amp;left_color=grey&amp;right_color=blue&amp;left_text=Downloads%20/%20Month&quot; alt=&quot;Downloads per month&quot; /&gt;   &lt;/a&gt;   &lt;a href=&quot;https://zenodo.org/badge/latestdoi/29918975&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/29918975.svg&quot; alt=&quot;DOI&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;!-- teaser-begin --&gt;*attrs* is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka [dunder methods](https://www.attrs.org/en/latest/glossary.html#term-dunder-methods)).[Trusted by NASA](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement) for Mars missions since 2020!Its main goal is to help you to write **concise** and **correct** software without slowing down your code.## Sponsors*attrs* would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).Especially those generously supporting us at the *The Organization* tier and higher:&lt;p align=&quot;center&quot;&gt;   &lt;a href=&quot;https://www.variomedia.de/&quot;&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Variomedia.svg&quot; width=&quot;200&quot; height=&quot;60&quot;&gt;&lt;/img&gt;   &lt;/a&gt;   &lt;a href=&quot;https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&amp;utm_medium=referral&amp;utm_campaign=enterprise&amp;utm_term=repo&quot;&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Tidelift.svg&quot; width=&quot;200&quot; height=&quot;60&quot;&gt;&lt;/img&gt;   &lt;/a&gt;   &lt;a href=&quot;https://sentry.io/&quot;&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Sentry.svg&quot; width=&quot;200&quot; height=&quot;60&quot;&gt;&lt;/img&gt;   &lt;/a&gt;   &lt;a href=&quot;https://filepreviews.io/&quot;&gt;      &lt;img src=&quot;https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/FilePreviews.svg&quot; width=&quot;200&quot; height=&quot;60&quot;&gt;&lt;/img&gt;   &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;   &lt;strong&gt;Please consider &lt;a href=&quot;https://github.com/sponsors/hynek&quot;&gt;joining them&lt;/a&gt; to help make &lt;em&gt;attrs&lt;/em&gt;â€™s maintenance more sustainable!&lt;/strong&gt;&lt;/p&gt;&lt;!-- teaser-end --&gt;## Example*attrs* gives you a class decorator and a way to declaratively define the attributes on that class:&lt;!-- code-begin --&gt;```pycon&gt;&gt;&gt; from attrs import asdict, define, make_class, Factory&gt;&gt;&gt; @define... class SomeClass:...     a_number: int = 42...     list_of_numbers: list[int] = Factory(list)......     def hard_math(self, another_number):...         return self.a_number + sum(self.list_of_numbers) * another_number&gt;&gt;&gt; sc = SomeClass(1, [1, 2, 3])&gt;&gt;&gt; scSomeClass(a_number=1, list_of_numbers=[1, 2, 3])&gt;&gt;&gt; sc.hard_math(3)19&gt;&gt;&gt; sc == SomeClass(1, [1, 2, 3])True&gt;&gt;&gt; sc != SomeClass(2, [3, 2, 1])True&gt;&gt;&gt; asdict(sc){'a_number': 1, 'list_of_numbers': [1, 2, 3]}&gt;&gt;&gt; SomeClass()SomeClass(a_number=42, list_of_numbers=[])&gt;&gt;&gt; C = make_class(&quot;C&quot;, [&quot;a&quot;, &quot;b&quot;])&gt;&gt;&gt; C(&quot;foo&quot;, &quot;bar&quot;)C(a='foo', b='bar')```After *declaring* your attributes, *attrs* gives you:- a concise and explicit overview of the class's attributes,- a nice human-readable `__repr__`,- equality-checking methods,- an initializer,- and much more,*without* writing dull boilerplate code again and again and *without* runtime performance penalties.**Hate type annotations**!?No problem!Types are entirely **optional** with *attrs*.Simply assign `attrs.field()` to the attributes instead of annotating them with types.---This example uses *attrs*'s modern APIs that have been introduced in version 20.1.0, and the *attrs* package import name that has been added in version 21.3.0.The classic APIs (`@attr.s`, `attr.ib`, plus their serious-business aliases) and the `attr` package import name will remain **indefinitely**.Please check out [*On The Core API Names*](https://www.attrs.org/en/latest/names.html) for a more in-depth explanation.## Data ClassesOn the tin, *attrs* might remind you of `dataclasses` (and indeed, `dataclasses` [are a descendant](https://hynek.me/articles/import-attrs/) of *attrs*).In practice it does a lot more and is more flexible.For instance it allows you to define [special handling of NumPy arrays for equality checks](https://www.attrs.org/en/stable/comparison.html#customization), or allows more ways to [plug into the initialization process](https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization).For more details, please refer to our [comparison page](https://www.attrs.org/en/stable/why.html#data-classes).## Project Information- [**Changelog**](https://www.attrs.org/en/stable/changelog.html)- [**Documentation**](https://www.attrs.org/)- [**PyPI**](https://pypi.org/project/attrs/)- [**Source Code**](https://github.com/python-attrs/attrs)- [**Contributing**](https://github.com/python-attrs/attrs/blob/main/.github/CONTRIBUTING.md)- [**Third-party Extensions**](https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs)- **License**: [MIT](https://www.attrs.org/en/latest/license.html)- **Get Help**: please use the `python-attrs` tag on [StackOverflow](https://stackoverflow.com/questions/tagged/python-attrs)- **Supported Python Versions**: 3.6 and later### *attrs* for EnterpriseAvailable as part of the Tidelift Subscription.The maintainers of *attrs* and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.[Learn more.](https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&amp;utm_medium=referral&amp;utm_campaign=enterprise&amp;utm_term=repo)## Changes in This Release### Backwards-incompatible Changes- Python 3.5 is not supported anymore.  [#988](https://github.com/python-attrs/attrs/issues/988)### Deprecations- Python 3.6 is now deprecated and support will be removed in the next release.  [#1017](https://github.com/python-attrs/attrs/issues/1017)### Changes- `attrs.field()` now supports an *alias* option for explicit `__init__` argument names.  Get `__init__` signatures matching any taste, peculiar or plain!  The [PEP 681 compatible](https://peps.python.org/pep-0681/#field-specifier-parameters) *alias* option can be use to override private attribute name mangling, or add other arbitrary field argument name overrides.  [#950](https://github.com/python-attrs/attrs/issues/950)- `attrs.NOTHING` is now an enum value, making it possible to use with e.g. [`typing.Literal`](https://docs.python.org/3/library/typing.html#typing.Literal).  [#983](https://github.com/python-attrs/attrs/issues/983)- Added missing re-import of `attr.AttrsInstance` to the `attrs` namespace.  [#987](https://github.com/python-attrs/attrs/issues/987)- Fix slight performance regression in classes with custom `__setattr__` and speedup even more.  [#991](https://github.com/python-attrs/attrs/issues/991)- Class-creation performance improvements by switching performance-sensitive templating operations to f-strings.  You can expect an improvement of about 5% -- even for very simple classes.  [#995](https://github.com/python-attrs/attrs/issues/995)- `attrs.has()` is now a [`TypeGuard`](https://docs.python.org/3/library/typing.html#typing.TypeGuard) for `AttrsInstance`.  That means that type checkers know a class is an instance of an `attrs` class if you check it using `attrs.has()` (or `attr.has()`) first.  [#997](https://github.com/python-attrs/attrs/issues/997)- Made `attrs.AttrsInstance` stub available at runtime and fixed type errors related to the usage of `attrs.AttrsInstance` in *Pyright*.  [#999](https://github.com/python-attrs/attrs/issues/999)- On Python 3.10 and later, call [`abc.update_abstractmethods()`](https://docs.python.org/3/library/abc.html#abc.update_abstractmethods) on dict classes after creation.  This improves the detection of abstractness.  [#1001](https://github.com/python-attrs/attrs/issues/1001)- *attrs*'s pickling methods now use dicts instead of tuples.  That is safer and more robust across different versions of a class.  [#1009](https://github.com/python-attrs/attrs/issues/1009)- Added `attrs.validators.not_(wrapped_validator)` to logically invert *wrapped_validator* by accepting only values where *wrapped_validator* rejects the value with a `ValueError` or `TypeError` (by default, exception types configurable).  [#1010](https://github.com/python-attrs/attrs/issues/1010)- The type stubs for `attrs.cmp_using()` now have default values.  [#1027](https://github.com/python-attrs/attrs/issues/1027)- To conform with [PEP 681](https://peps.python.org/pep-0681/), `attr.s()` and `attrs.define()` now accept *unsafe_hash* in addition to *hash*.  [#1065](https://github.com/python-attrs/attrs/issues/1065)---[Full changelog](https://www.attrs.org/en/stable/changelog.html)</longdescription>
</pkgmetadata>