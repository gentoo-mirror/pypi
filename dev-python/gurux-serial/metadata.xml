<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>See An [Gurux](http://www.gurux.org/ &quot;Gurux&quot;) for an overview.Join the Gurux Community or follow [@Gurux](https://twitter.com/guruxorg &quot;@Gurux&quot;) for project updates.With gurux.serial component you can send data easily syncronously or asyncronously using serial port connection.Open Source GXNet media component, made by Gurux Ltd, is a part of GXMedias set of media components, which programming interfaces help you implement communication by chosen connection type. Gurux media components also support the following connection types: serial port.For more info check out [Gurux](http://www.gurux.org/ &quot;Gurux&quot;).We are updating documentation on Gurux web page. If you have problems you can ask your questions in Gurux [Forum](http://www.gurux.org/forum).You can get source codes from http://www.github.com/gurux or intall package: ```pythonpip install gurux-commonpip install gurux-serial```Simple example=========================== Before use you must set following settings:* PortName* BaudRate* DataBits* Parity* StopBitsIt is also good to add listener to listen following events.* onError* onReceived* onMediaStateChange* onTrace* onPropertyChangedThis example sends data to the serial port and waits reply.Change serial port before use.```pythonimport timefrom gurux_common import ReceiveParametersfrom gurux_common import IGXMediaListenerfrom gurux_common.enums.TraceLevel import TraceLevelfrom gurux_serial import GXSerial#pylint: disable=no-self-argumentclass sampleclient(IGXMediaListener):    def __init__(self):        #List available serial ports.        print(&quot;Available ports:&quot;)        print(str(GXSerial.getPortNames()))        #Define End Of Packet char.        eop = '\r'        #TODO: Update correct port and serial port settings.        media = GXSerial(&quot;SERIAL PORT TO USE&quot;)        #Start to listen events from the media.        media.addListener(self)        #Show all traces.        media.trace = TraceLevel.VERBOSE        #Set EOP for the media.        media.eop = eop        try:            #Open the connection.            media.open()            r = ReceiveParameters()            r.eop = eop            #Minimium amount of bytes to receive.            r.count = 5            #Wait reply for 2 seconds.            r.waitTime = 2000            ############################            #Send data synchronously.            with media.getSynchronous():                media.send(&quot;Hello world!&quot;)                #Send EOP                media.send('\r')                ret = media.receive(r)                if ret:                    print(str(r.reply.decode(&quot;ascii&quot;)))                else:                    raise Exception(&quot;Failed to receive reply from the server.&quot;)            ############################            #Send async data.            media.send(&quot;Notify from the meter!\r&quot;)            #Wait 1 second to receive reply from the server.            time.sleep(1)        except Exception as ex:            print(ex)        media.close()        media.removeListener(self)    def onError(self, sender, ex):        &quot;&quot;&quot;        Represents the method that will handle the error event of a Gurux        component.        sender :  The source of the event.        ex : An Exception object that contains the event data.        &quot;&quot;&quot;        print(&quot;Error has occured. &quot; + str(ex))    def onReceived(self, sender, e):        &quot;&quot;&quot;Media component sends received data through this method.        sender : The source of the event.        e : Event arguments.        &quot;&quot;&quot;        print(&quot;New data is received. &quot; + str(e))    def onMediaStateChange(self, sender, e):        &quot;&quot;&quot;Media component sends notification, when its state changes.        sender : The source of the event.        e : Event arguments.        &quot;&quot;&quot;        print(&quot;Media state changed. &quot; + str(e))    def onTrace(self, sender, e):        &quot;&quot;&quot;Called when the Media is sending or receiving data.        sender : The source of the event.        e : Event arguments.        &quot;&quot;&quot;        print(&quot;trace:&quot; + str(e))    def onPropertyChanged(self, sender, e):        &quot;&quot;&quot;        Event is raised when a property is changed on a component.        sender : The source of the event.        e : Event arguments.        &quot;&quot;&quot;        print(&quot;Property {!r} has hanged.&quot;.format(str(e)))if __name__ == '__main__':    sampleclient()```</longdescription>
</pkgmetadata>