<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># django-jsonsuit![image][1] ![image][2] ![image][3]Django goodies to dress JSON data in a suit.## DocumentationThe full documentation is at &lt;https://tooreht.github.io/django-jsonsuit&gt;.  An example project can be found at &lt;https://github.com/tooreht/django-jsonsuit-example&gt;.## Features- Editable and readonly widget- Change JSON syntax highlighter themes- Set custom widget media (JS &amp; CSS) files- Use custom HTML templates## QuickstartInstall django-jsonsuit:    pip install django-jsonsuitAdd it to your `INSTALLED_APPS`:``` sourceCodeINSTALLED_APPS = (    ...    'jsonsuit.apps.JSONSuitConfig',    ...)```## Usage### Widgetsdjango-jsonsuit currently provides two widgets to dress your JSON data:1. `JSONSuit`: Widget that displays JSON data with indentation and syntax highlighting as default, but allows to toggle between the standard django `Textarea` for editing.2. `ReadonlyJSONSuit`: Widget that simply displays JSON data with indentation and syntax highlighting. It is useful for JSON fields that contain readonly data.**Note**: Because a widget in django is only responsible for displaying fields, it has no direct access to its field properties. Thus there is no easy way to check if the field is readonly. The readonly behaviour is even handled differently among django forms, model forms and admin. This is why the `ReadonlyJSONSuit` was introduced.**Note**: When using multiple form instances or multiple forms with equal field names on the same page use [Formsets](https://docs.djangoproject.com/en/dev/topics/forms/formsets/) or [prefixes](https://docs.djangoproject.com/en/dev/ref/forms/api/#prefixes-for-forms) to avoid HTML element id clashes.#### JSONSuitIn a form or model admin, enable a JSON suit for a particular field:```pythonfrom jsonsuit.widgets import JSONSuitclass JSONForm(forms.ModelForm):  class Meta:    model = Test    fields = '__all__'    widgets = {      'myjsonfield': JSONSuit(),    }class JSONAdmin(admin.ModelAdmin):  form = JSONForm```Enable JSON suit for every JSONField of a model:```pythonfrom django.db import modelsclass JSONAdmin(admin.ModelAdmin):  formfield_overrides = {    models.JSONField: {'widget': JSONSuit }  }```#### ReadonlyJSONSuitIn a form or model admin, enable a readonly JSON suit for a particular field:```pythonfrom jsonsuit.widgets import ReadonlyJSONSuitclass ReadonlyJSONForm(forms.ModelForm):  class Meta:    model = Test    fields = '__all__'    widgets = {      'myjsonfield': ReadonlyJSONSuit(),    }class ReadonlyJSONAdmin(admin.ModelAdmin):  form = ReadonlyJSONForm```Enable readonly JSON suit for every JSONField of a model:```pythonfrom django.db import modelsclass ReadonlyJSONAdmin(admin.ModelAdmin):  formfield_overrides = {    models.JSONField: {'widget': ReadonlyJSONSuit }  }```### Template TagsUse the jsonsuit template tag to display serializable objects in templates. Note that in order to use the `jsonsuit`, `jsonsuit_css` and `jsonsuit_js` tags, they must be loaded using `{% load jsonsuit %}`. ```html{% extends &quot;ui/base.html&quot; %}{% load jsonsuit %}{% block title %}{% trans &quot;JSONSuit Template Tag&quot; %}{% endblock %}{% block styles %}    {{ block.super }}    {% jsonsuit_css %} &lt;!-- include jsonsuit CSS files --&gt;{% endblock %}{% block content %}&lt;div class=&quot;row&quot;&gt;  &lt;div class=&quot;col-md-4&quot;&gt;      &lt;h2&gt;Unnamed Suit&lt;/h2&gt;      {% jsonsuit data %} &lt;!-- with no parameter supplied,                               a uuid is generated as                               HTML attribute value to                               identify each individual suit:                               data-jsonsuit=&quot;&lt;uuid&gt;&quot; --&gt;  &lt;/div&gt;  &lt;div class=&quot;col-md-8&quot;&gt;      &lt;h2&gt;Named Suit&lt;/h2&gt;      {% jsonsuit data 'suit_name' %} &lt;!-- for each suit,                                           an optional string                                           can be supplied, which                                           serves as HTML attribute                                           value: data-jsonsuit=&quot;&lt;suit_name&gt;&quot; --&gt;  &lt;/div&gt;&lt;/div&gt;{% endblock %}{% block scripts %}    {{ block.super }}    {% jsonsuit_js %} &lt;!-- include jsonsuit JS files --&gt;{% endblock %}```### ThemeSet JSON syntax highlighter theme in settings:```pythonJSONSUIT_WIDGET_THEME = 'twilight'```Available themes: `coy`, `dark`, `default`, `funky`, `okaidia`, `solarizedlight`, `twilight`, `tomorrow`. Defaults to the `default` theme.### Custom Widget MediaSet custom widget media (JS &amp; CSS) files:```pythonJSONSUIT_WIDGET_MEDIA_JS = (    'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myscripts.js')JSONSUIT_WIDGET_MEDIA_CSS = {    'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/mystyles.css')}JSONSUIT_READONLY_WIDGET_MEDIA_JS = (    'jsonsuit/js/mysyntaxhighlighter.js', 'jsonsuit/js/myreadonlyscripts.js')JSONSUIT_READONLY_WIDGET_MEDIA_CSS = {    'all': ('jsonsuit/css/mytheme.css', 'jsonsuit/css/myreadonlystyles.css')}```To only replace the syntax highlighter assets for all widgets, simply change:```pythonJSONSUIT_SYNTAX_HIGHLIGHTER_JS = ('jsonsuit/js/mysyntaxhighlighter.js',)JSONSUIT_SYNTAX_HIGHLIGHTER_CSS = ('jsonsuit/css/mytheme.css',)```### Custom HTML templateOverride `jsonsuit/widget.html` or `jsonsuit/readonly_widget.html` template:```bashjsonsuit/templates└── jsonsuit    └── widget.html    └── readonly_widget.html```## Running TestsDoes the code actually work?    source &lt;YOURVIRTUALENV&gt;/bin/activate    (myenv) $ pip install tox    (myenv) $ tox## Development commands    pip install -r requirements_dev.txt    invoke -l## CreditsProject dependencies:- [prism](http://prismjs.com/)- [vanilla-js](http://vanilla-js.com/)Project documentation:- [MkDocs](http://www.mkdocs.org/)Tools used in rendering this package:- [Cookiecutter]- [cookiecutter-djangopackage]- [Zest.releaser]  [1]: https://badge.fury.io/py/django-jsonsuit.svg  [2]: https://github.com/tooreht/django-jsonsuit/actions/workflows/check.yml/badge.svg?branch=master  [3]: https://codecov.io/gh/tooreht/django-jsonsuit/branch/master/graph/badge.svg  [Cookiecutter]: https://github.com/audreyr/cookiecutter  [cookiecutter-djangopackage]: https://github.com/pydanny/cookiecutter-djangopackage  [Zest.releaser]: https://zestreleaser.readthedocs.io</longdescription>
</pkgmetadata>