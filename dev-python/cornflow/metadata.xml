<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Cornflow=========.. image:: https://github.com/baobabsoluciones/cornflow/workflows/build/badge.svg?style=svg    :target: https://github.com/baobabsoluciones/cornflow/actions.. image:: https://github.com/baobabsoluciones/cornflow/workflows/docs/badge.svg?style=svg    :target: https://github.com/baobabsoluciones/cornflow/actions.. image:: https://github.com/baobabsoluciones/cornflow/workflows/integration/badge.svg?style=svg    :target: https://github.com/baobabsoluciones/cornflow/actions.. image:: https://img.shields.io/pypi/v/cornflow-client.svg?style=svg   :target: https://pypi.python.org/pypi/cornflow-client.. image:: https://img.shields.io/pypi/pyversions/cornflow-client.svg?style=svg   :target: https://pypi.python.org/pypi/cornflow-client.. image:: https://img.shields.io/badge/License-Apache2.0-blueCornflow is an open source multi-solver optimization server with a REST API built using `flask &lt;https://flask.palletsprojects.com&gt;`_, `airflow &lt;https://airflow.apache.org/&gt;`_ and `pulp &lt;https://coin-or.github.io/pulp/&gt;`_.While most deployment servers are based on the solving technique (MIP, CP, NLP, etc.), Cornflow focuses on the optimization problems themselves. However, it does not impose any constraint on the type of problem and solution method to use.With Cornflow you can deploy a Traveling Salesman Problem solver next to a Knapsack solver or a Nurse Rostering Problem solver. As long as you describe the input and output data, you can upload any solution method for any problem and then use it with any data you want.Cornflow helps you formalize your problem by proposing development guidelines. It also provides a range of functionalities around your deployed solution method, namely:* storage of users, instances, solutions and solution logs.* deployment and maintenance of models, solvers and algorithms.* scheduling of executions in remote machines.* management of said executions: start, monitor, interrupt.* centralizing of commercial licenses.* scenario storage and comparison.* user management, roles and groups... contents:: **Table of Contents**Installation instructions-------------------------------Cornflow is tested with Ubuntu 20.04, python &gt;= 3.5 and git.Download the Cornflow project and install requirements::    git clone git@github.com:baobabsoluciones/cornflow.git    cd cornflow-server    python3 -m venv venv    venv/bin/pip3 install -r requirements-dev.txtactivate the virtual environment and run Cornflow::    source venv/bin/activate    export FLASK_APP=cornflow.app    flask run**Cornflow needs a running installation of Airflow to operate and more configuration**. Check `the installation docs &lt;https://baobabsoluciones.github.io/cornflow/main/install.html&gt;`_ for more details on installing airflow, configuring the application and initializing the database.Using cornflow to solve a PuLP model---------------------------------------We're going to test the cornflow server by using the `cornflow-client` and the `pulp` python package::    pip install cornflow-client pulpInitialize the api client::    from cornflow_client import CornFlow    email = 'some_email@gmail.com'    pwd = 'Some_password1'    username = 'some_name'    client = CornFlow(url=&quot;http://127.0.0.1:5000&quot;)Create a user::    config = dict(username=username, email=email, pwd=pwd)    client.sign_up(**config)Log in::    client.login(username=username, pwd=pwd)Prepare an instance::    import pulp    prob = pulp.LpProblem(&quot;test_export_dict_MIP&quot;, pulp.LpMinimize)    x = pulp.LpVariable(&quot;x&quot;, 0, 4)    y = pulp.LpVariable(&quot;y&quot;, -1, 1)    z = pulp.LpVariable(&quot;z&quot;, 0, None, pulp.LpInteger)    prob += x + 4 * y + 9 * z, &quot;obj&quot;    prob += x + y &lt;= 5, &quot;c1&quot;    prob += x + z &gt;= 10, &quot;c2&quot;    prob += -y + z == 7.5, &quot;c3&quot;    data = prob.to_dict()    insName = 'test_export_dict_MIP'    description = 'very small example'Send instance::    instance = client.create_instance(data, name=insName, description=description, schema=&quot;solve_model_dag&quot;,)Solve an instance::    config = dict(        solver = &quot;PULP_CBC_CMD&quot;,        timeLimit = 10    )    execution = client.create_execution(        instance['id'], config, name='execution1', description='execution of a very small instance',        schema=&quot;solve_model_dag&quot;,    )Check the status of an execution::    status = client.get_status(execution[&quot;id&quot;])    print(status['state'])    # 1 means &quot;finished correctly&quot;Retrieve a solution::    results = client.get_solution(execution['id'])    print(results['data'])    # returns a json with the solved pulp object    _vars, prob = pulp.LpProblem.from_dict(results['data'])Retrieve the log of the solver::    log = client.get_log(execution['id'])    print(log['log'])    # json format of the solver logUsing cornflow to deploy a solution method---------------------------------------------To deploy a cornflow solution method, the following tasks need to be accomplished:#. Create I/O schemas for the new problem (e.g., “TSP format”).#. Create a solve function (e.g., a 2-opt heuristic).#. Do a PR to a compatible repo linked to a server instance (e.g., like `this one &lt;https://github.com/baobabsoluciones/cornflow&gt;`_).For more details on each part, check the `deployment guide &lt;https://baobabsoluciones.github.io/cornflow/guides/deploy_solver.html&gt;`_.Using cornflow to solve a problem-------------------------------------------For this example we only need the cornflow_client package. We will test the graph-coloring demo defined `here &lt;https://github.com/baobabsoluciones/cornflow-dags-public/tree/main/DAG/graph_coloring&gt;`_. We will use the test server to solve it.Initialize the api client::    from cornflow_client import CornFlow    email = 'readme@gmail.com'    pwd = 'some_password'    username = 'some_name'    client = CornFlow(url=&quot;https://devsm.cornflow.baobabsoluciones.app/&quot;)    client.login(username=username, pwd=pwd)solve a graph coloring problem and get the solution::    data = dict(pairs=[dict(n1=0, n2=1), dict(n1=1, n2=2), dict(n1=1, n2=3)])    instance = client.create_instance(data, name='gc_4_1', description='very small gc problem', schema=&quot;graph_coloring&quot;)    config = dict()    execution = client.create_execution(        instance['id'], config, name='gc_4_1_exec', description='execution of very small gc problem',        schema=&quot;graph_coloring&quot;,    )    status = client.get_status(execution[&quot;id&quot;])    print(status['state'])    solution = client.get_solution(execution[&quot;id&quot;])    print(solution['data']['assignment'])Running tests and coverage------------------------------Then you have to run the following commands::    export FLASK_ENV=testingFinally you can run all the tests with the following command::    python -m unittest discover -s cornflow.testsIf you want to only run the unit tests (without a local airflow webserver)::    python -m unittest discover -s cornflow.tests.unitIf you want to only run the integration test with a local airflow webserver::    python -m unittest discover -s cornflow.tests.integrationAfter if you want to check the coverage report you need to run::    coverage run  --source=./cornflow/ -m unittest discover -s=./cornflow/tests/    coverage report -mor to get the html reports::    coverage html</longdescription>
</pkgmetadata>