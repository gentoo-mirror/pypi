<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># uuid_shortener[![Build Status](https://travis-ci.com/El-Sam/uuid_shortener.svg?branch=master)](https://travis-ci.com/El-Sam/uuid_shortener)[![PyPI supported versions](https://img.shields.io/pypi/pyversions/uuid-shortener-py.svg)](https://pypi.python.org/pypi/uuid-shortener-py)[![PyPI version](https://badge.fury.io/py/uuid-shortener-py.svg)](https://badge.fury.io/py/uuid-shortener-py)**uuid_shortener** is a library for shortening UUIDs into an alphanumerical format suitable for usage in URLs.The alphanumerical format is Flicker base 58 encoding.## Installationfrom [Pypi](https://pypi.org/project/uuid-shortener-py/):` pip install uuid-shortener-py `## Module usageThe `UuidShortener` object can be created with/without a prefix.##### Example 1: without prefix```pythonfrom uuid_shortener import UuidShortenerfrom uuid import uuid4if __name__ == &quot;__main__&quot;:    print('******** Without prefix')    shortener = UuidShortener()    uuid_4 = uuid4()    short_uuid = shortener.shorten(uuid_4)    unshortened_uuid = shortener.unshorten(short_uuid)    print(f'Uuid to shorten: {uuid_4}')    print(f'shortened uuid: {short_uuid}')    print(f'unshortened uuid(original uuid): {shortener.unshorten(short_uuid)}')```##### Output 1:```******** Without prefixUuid to shorten: 177d1b53-77d5-42b2-8b8f-8d86579deb52shortened uuid: 3Ueemi554rN46ioLFw3dZGunshortened uuid(original uuid): 177d1b53-77d5-42b2-8b8f-8d86579deb52```-----##### Example 2: with prefix```pythonfrom uuid_shortener import UuidShortenerfrom uuid import uuid4if __name__ == &quot;__main__&quot;:    print('******** With prefix')    shortener = UuidShortener('meow')    uuid_4 = uuid4()    short_uuid = shortener.shorten(uuid_4)    unshortened_uuid = shortener.unshorten(short_uuid)    print(f'Uuid to shorten: {uuid_4}')    print(f'shortened uuid: {short_uuid}')    print(f'unshortened uuid (original uuid): {shortener.unshorten(short_uuid)}')```##### Output 2:```******** With prefixUuid to shorten: 2bea23d4-2b96-485d-8788-0c606ab93319shortened uuid: meow-6qwbaCZnHtxJsj4uJTKJSVunshortened uuid (original uuid): 2bea23d4-2b96-485d-8788-0c606ab93319```##### As an easy, one-way generator```pythonfrom uuid_shortener import ShortUuidGeneratorfrom uuid import uuid4if __name__ == &quot;__main__&quot;:    print('******** Generator')    uuid_gen = ShortUuidGenerator(prefix='meow', uuid=uuid4)    print('Shortened uuid 1: {}'.format( uuid_gen() ))    print('Shortened uuid 2: {}'.format( uuid_gen() ))```##### Output 3:```******** GeneratorShortened uuid 1: meow-9ubC52uXU1MM9PcrUMaNNcShortened uuid 2: meow-wqTnxvHfWzrPvREcVi5RAf```## License[MIT](./LICENSE)</longdescription>
</pkgmetadata>