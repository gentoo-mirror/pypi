<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># âš¡ DataHub Actions FrameworkWelcome to DataHub Actions! The Actions framework makes responding to realtime changes in your Metadata Graph easy, enabling you to seamlessly integrate [DataHub](https://github.com/datahub-project/datahub) into a broader events-based architecture.For a detailed introduction, check out the [original announcement](https://www.youtube.com/watch?v=7iwNxHgqxtg&amp;t=2189s) of the DataHub Actions Framework at the DataHub April 2022 Town Hall. For a more in-depth look at use cases and concepts, check out [DataHub Actions Concepts](../docs/concepts.md). ## QuickstartTo get started right away, check out the [DataHub Actions Quickstart](../docs/quickstart.md) Guide.## PrerequisitesThe DataHub Actions CLI commands are an extension of the base `datahub` CLI commands. We recommendfirst installing the `datahub` CLI:```shellpython3 -m pip install --upgrade pip wheel setuptoolspython3 -m pip install --upgrade acryl-datahubdatahub --version```&gt; Note that the Actions Framework requires a version of `acryl-datahub` &gt;= v0.8.34## InstallationNext, simply install the `acryl-datahub-actions` package from PyPi:```shellpython3 -m pip install --upgrade pip wheel setuptoolspython3 -m pip install --upgrade acryl-datahub-actionsdatahub actions version```## Configuring an ActionActions are configured using a YAML file, much in the same way DataHub ingestion sources are. An action configuration file consists of the following1. Action Pipeline Name (Should be unique and static)2. Source Configurations3. Transform + Filter Configurations4. Action Configuration5. Pipeline Options (Optional)6. DataHub API configs (Optional - required for select actions)With each component being independently pluggable and configurable. ```yml# 1. Required: Action Pipeline Namename: &lt;action-pipeline-name&gt;# 2. Required: Event Source - Where to source event from.source:  type: &lt;source-type&gt;  config:    # Event Source specific configs (map)# 3a. Optional: Filter to run on events (map)filter:   event_type: &lt;filtered-event-type&gt;  event:    # Filter event fields by exact-match    &lt;filtered-event-fields&gt;# 3b. Optional: Custom Transformers to run on events (array)transform:  - type: &lt;transformer-type&gt;    config:       # Transformer-specific configs (map)# 4. Required: Action - What action to take on events. action:  type: &lt;action-type&gt;  config:    # Action-specific configs (map)# 5. Optional: Additional pipeline options (error handling, etc)options:   retry_count: 0 # The number of times to retry an Action with the same event. (If an exception is thrown). 0 by default.   failure_mode: &quot;CONTINUE&quot; # What to do when an event fails to be processed. Either 'CONTINUE' to make progress or 'THROW' to stop the pipeline. Either way, the failed event will be logged to a failed_events.log file.   failed_events_dir: &quot;/tmp/datahub/actions&quot;  # The directory in which to write a failed_events.log file that tracks events which fail to be processed. Defaults to &quot;/tmp/logs/datahub/actions&quot;. # 6. Optional: DataHub API configurationdatahub:  server: &quot;http://localhost:8080&quot; # Location of DataHub API  # token: &lt;your-access-token&gt; # Required if Metadata Service Auth enabled```### Example: Hello WorldAn simple configuration file for a &quot;Hello World&quot; action, which simply prints all events it receives, is```yml# 1. Action Pipeline Namename: &quot;hello_world&quot;# 2. Event Source: Where to source event from.source:  type: &quot;kafka&quot;  config:    connection:      bootstrap: ${KAFKA_BOOTSTRAP_SERVER:-localhost:9092}      schema_registry_url: ${SCHEMA_REGISTRY_URL:-http://localhost:8081}# 3. Action: What action to take on events. action:  type: &quot;hello_world&quot;```We can modify this configuration further to filter for specific events, by adding a &quot;filter&quot; block.```yml# 1. Action Pipeline Namename: &quot;hello_world&quot;# 2. Event Source - Where to source event from.source:  type: &quot;kafka&quot;  config:    connection:      bootstrap: ${KAFKA_BOOTSTRAP_SERVER:-localhost:9092}      schema_registry_url: ${SCHEMA_REGISTRY_URL:-http://localhost:8081}# 3. Filter - Filter events that reach the Actionfilter:  event_type: &quot;EntityChangeEvent_v1&quot;  event:    category: &quot;TAG&quot;    operation: &quot;ADD&quot;    modifier: &quot;urn:li:tag:pii&quot;# 4. Action - What action to take on events. action:  type: &quot;hello_world&quot;```## Running an ActionTo run a new Action, just use the `actions` CLI command```datahub actions -c &lt;config.yml&gt;``` Once the Action is running, you will see```Action Pipeline with name '&lt;action-pipeline-name&gt;' is now running.```### Running multiple ActionsYou can run multiple actions pipeline within the same command. Simply provide multiple config files by restating the &quot;-c&quot; command line argument.For example,```datahub actions -c &lt;config-1.yaml&gt; -c &lt;config-2.yaml&gt;```### Running in debug modeSimply append the `--debug` flag to the CLI to run your action in debug mode.```datahub actions -c &lt;config.yaml&gt; --debug```### Stopping an ActionJust issue a Control-C as usual. You should see the Actions Pipeline shut down gracefully, with a smallsummary of processing results.```Actions Pipeline with name '&lt;action-pipeline-name' has been stopped.```## Supported EventsTwo event types are currently supported. Read more about them below.- [Entity Change Event V1](../docs/events/entity-change-event.md)- [Metadata Change Log V1](../docs/events/metadata-change-log-event.md)## Supported Event SourcesCurrently, the only event source that is officially supported is `kafka`, which polls for eventsvia a Kafka Consumer. - [Kafka Event Source](../docs/sources/kafka-event-source.md)## Supported ActionsBy default, DataHub supports a set of standard actions plugins. These can be found inside the folder`src/datahub-actions/plugins`. Some pre-included Actions include- [Hello World](../docs/actions/hello_world.md)- [Executor](../docs/actions/executor.md)## Development### Build and TestNotice that we support all actions command using a separate `datahub-actions` CLI entry point. Feel free to use this during development.```# Build datahub-actions module./gradlew datahub-actions:build# Drop into virtual envcd datahub-actions &amp;&amp; source venv/bin/activate # Start hello world action datahub-actions actions -c ../examples/hello_world.yaml# Start ingestion executor actiondatahub-actions actions -c ../examples/executor.yaml# Start multiple actions datahub-actions actions -c ../examples/executor.yaml -c ../examples/hello_world.yaml```### Developing a TransformerTo develop a new Transformer, check out the [Developing a Transformer](../docs/guides/developing-a-transformer.md) guide. ### Developing an ActionTo develop a new Action, check out the [Developing an Action](../docs/guides/developing-an-action.md) guide. ## ContributingContributing guidelines follow those of the [main DataHub project](https://github.com/datahub-project/datahub/blob/master/docs/CONTRIBUTING.md). We are accepting contributions for Actions, Transformers, and general framework improvements (tests, error handling, etc).## ResourcesCheck out the [original announcement](https://www.youtube.com/watch?v=7iwNxHgqxtg&amp;t=2189s) of the DataHub Actions Framework at the DataHub April 2022 Town Hall. ## License[Apache 2.0](./LICENSE)</longdescription>
</pkgmetadata>