<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h2 align=&quot;center&quot;&gt;Manipulate keep a changelog files&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://pypi.org/project/keepachangelog/&quot;&gt;&lt;img alt=&quot;pypi version&quot; src=&quot;https://img.shields.io/pypi/v/keepachangelog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://travis-ci.com/Colin-b/keepachangelog&quot;&gt;&lt;img alt=&quot;Build status&quot; src=&quot;https://api.travis-ci.com/Colin-b/keepachangelog.svg?branch=master&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://travis-ci.com/Colin-b/keepachangelog&quot;&gt;&lt;img alt=&quot;Coverage&quot; src=&quot;https://img.shields.io/badge/coverage-100%25-brightgreen&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/psf/black&quot;&gt;&lt;img alt=&quot;Code style: black&quot; src=&quot;https://img.shields.io/badge/code%20style-black-000000.svg&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://travis-ci.com/Colin-b/keepachangelog&quot;&gt;&lt;img alt=&quot;Number of tests&quot; src=&quot;https://img.shields.io/badge/tests-31 passed-blue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/keepachangelog/&quot;&gt;&lt;img alt=&quot;Number of downloads&quot; src=&quot;https://img.shields.io/pypi/dm/keepachangelog&quot;&gt;&lt;/a&gt;&lt;/p&gt;* [Convert to dict](#convert-changelog-to-dict)* [Release a new version](#release)* [Add changelog retrieval REST API endpoint](#endpoint)  * [Starlette](#starlette)  * [Flask-RestX](#flask-restx)## Convert changelog to dictConvert changelog markdown file following [keep a changelog](https://keepachangelog.com/en/1.1.0/) format into python dict.```pythonimport keepachangelogchanges = keepachangelog.to_dict(&quot;path/to/CHANGELOG.md&quot;)````changes` would look like:```pythonchanges = {    &quot;1.1.0&quot;: {        &quot;changed&quot;: [            &quot;Enhancement 1 (1.1.0)&quot;,            &quot;sub enhancement 1&quot;,            &quot;sub enhancement 2&quot;,            &quot;Enhancement 2 (1.1.0)&quot;,        ],        &quot;release_date&quot;: &quot;2018-05-31&quot;,        &quot;version&quot;: &quot;1.1.0&quot;,        &quot;semantic_version&quot;: {            &quot;major&quot;: 1,            &quot;minor&quot;: 1,            &quot;patch&quot;: 0,            &quot;prerelease&quot;: None,            &quot;buildmetadata&quot;: None,        },        &quot;url&quot;: &quot;https://github.test_url/test_project/compare/v1.0.1...v1.1.0&quot;,    },    &quot;1.0.1&quot;: {        &quot;fixed&quot;: [            &quot;Bug fix 1 (1.0.1)&quot;,            &quot;sub bug 1&quot;,            &quot;sub bug 2&quot;,            &quot;Bug fix 2 (1.0.1)&quot;,        ],        &quot;release_date&quot;: &quot;2018-05-31&quot;,        &quot;version&quot;: &quot;1.0.1&quot;,        &quot;semantic_version&quot;: {            &quot;major&quot;: 1,            &quot;minor&quot;: 0,            &quot;patch&quot;: 1,            &quot;prerelease&quot;: None,            &quot;buildmetadata&quot;: None,        },        &quot;url&quot;: &quot;https://github.test_url/test_project/compare/v1.0.0...v1.0.1&quot;,    },    &quot;1.0.0&quot;: {        &quot;deprecated&quot;: [&quot;Known issue 1 (1.0.0)&quot;, &quot;Known issue 2 (1.0.0)&quot;],        &quot;release_date&quot;: &quot;2017-04-10&quot;,        &quot;version&quot;: &quot;1.0.0&quot;,        &quot;semantic_version&quot;: {            &quot;major&quot;: 1,            &quot;minor&quot;: 0,            &quot;patch&quot;: 0,            &quot;prerelease&quot;: None,            &quot;buildmetadata&quot;: None,        },        &quot;url&quot;: &quot;https://github.test_url/test_project/releases/tag/v1.0.0&quot;,    },}```For a markdown file with the following content:```markdown# ChangelogAll notable changes to this project will be documented in this file.The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).## [Unreleased]### Changed- Release note 1.- Release note 2.### Added- Enhancement 1 - sub enhancement 1 - sub enhancement 2- Enhancement 2### Fixed- Bug fix 1 - sub bug 1 - sub bug 2- Bug fix 2### Security- Known issue 1- Known issue 2### Deprecated- Deprecated feature 1- Future removal 2### Removed- Deprecated feature 2- Future removal 1## [1.1.0] - 2018-05-31### Changed- Enhancement 1 (1.1.0) - sub enhancement 1 - sub enhancement 2- Enhancement 2 (1.1.0)## [1.0.1] - 2018-05-31### Fixed- Bug fix 1 (1.0.1) - sub bug 1 - sub bug 2- Bug fix 2 (1.0.1)## [1.0.0] - 2017-04-10### Deprecated- Known issue 1 (1.0.0)- Known issue 2 (1.0.0)[Unreleased]: https://github.test_url/test_project/compare/v1.1.0...HEAD[1.1.0]: https://github.test_url/test_project/compare/v1.0.1...v1.1.0[1.0.1]: https://github.test_url/test_project/compare/v1.0.0...v1.0.1[1.0.0]: https://github.test_url/test_project/releases/tag/v1.0.0````show_unreleased` parameter can be specified in order to include `Unreleased` section information.Note that `release_date` will be set to None in such as case.### Retrieving the raw contentIf for some reason you would like to retrieve the raw content of a release you can use `to_raw_dict` instead.```pythonimport keepachangelogchanges = keepachangelog.to_raw_dict(&quot;path/to/CHANGELOG.md&quot;)````changes` would look like:```pythonchanges = {    &quot;1.1.0&quot;: {        &quot;raw&quot;: &quot;&quot;&quot;### Changed- Enhancement 1 (1.1.0) - sub enhancement 1 - sub enhancement 2- Enhancement 2 (1.1.0)&quot;&quot;&quot;,        &quot;release_date&quot;: &quot;2018-05-31&quot;,        &quot;version&quot;: &quot;1.1.0&quot;,        &quot;semantic_version&quot;: {            &quot;major&quot;: 1,            &quot;minor&quot;: 1,            &quot;patch&quot;: 0,            &quot;prerelease&quot;: None,            &quot;buildmetadata&quot;: None,        },        &quot;url&quot;: &quot;https://github.test_url/test_project/compare/v1.0.1...v1.1.0&quot;,    },    &quot;1.0.1&quot;: {        &quot;raw&quot;: &quot;&quot;&quot;### Fixed- Bug fix 1 (1.0.1) - sub bug 1 - sub bug 2- Bug fix 2 (1.0.1)&quot;&quot;&quot;,        &quot;release_date&quot;: &quot;2018-05-31&quot;,        &quot;version&quot;: &quot;1.0.1&quot;,        &quot;semantic_version&quot;: {            &quot;major&quot;: 1,            &quot;minor&quot;: 0,            &quot;patch&quot;: 1,            &quot;prerelease&quot;: None,            &quot;buildmetadata&quot;: None,        },        &quot;url&quot;: &quot;https://github.test_url/test_project/compare/v1.0.0...v1.0.1&quot;,    },    &quot;1.0.0&quot;: {        &quot;raw&quot;: &quot;&quot;&quot;### Deprecated- Known issue 1 (1.0.0)- Known issue 2 (1.0.0)&quot;&quot;&quot;,        &quot;release_date&quot;: &quot;2017-04-10&quot;,        &quot;version&quot;: &quot;1.0.0&quot;,        &quot;semantic_version&quot;: {            &quot;major&quot;: 1,            &quot;minor&quot;: 0,            &quot;patch&quot;: 0,            &quot;prerelease&quot;: None,            &quot;buildmetadata&quot;: None,        },        &quot;url&quot;: &quot;https://github.test_url/test_project/releases/tag/v1.0.0&quot;,    },}```## ReleaseYou can create a new release by using `keepachangelog.release` function.```pythonimport keepachangelognew_version = keepachangelog.release(&quot;path/to/CHANGELOG.md&quot;)```This will:* If `new_version` parameter is not provided, guess the new version number and return it:  * `Removed` or `Changed` sections will be considered as breaking changes, thus incrementing the major version.  * If the only section is `Fixed`, only patch will be incremented.  * Otherwise, minor will be incremented.* Update changelog.  * Unreleased section content will be moved into a new section.  * `[Unreleased]` link will be updated.  * New link will be created corresponding to the new section (based on the format of the Unreleased link).## Endpoint### StarletteAn helper function is available to create a [starlette](https://www.starlette.io) endpoint to retrieve changelog as JSON.```pythonfrom starlette.applications import Starlettefrom keepachangelog.starlette import add_changelog_endpointapp = Starlette()# /changelog endpoint will return the dict extracted from the changelog as JSON.add_changelog_endpoint(app, &quot;path/to/CHANGELOG.md&quot;)```Note: [starlette](https://pypi.python.org/pypi/starlette) module must be installed.### Flask-RestXAn helper function is available to create a [Flask-RestX](https://flask-restx.readthedocs.io/en/latest/) endpoint to retrieve changelog as JSON.```pythonimport flaskimport flask_restxfrom keepachangelog.flask_restx import add_changelog_endpointapp = flask.Flask(__name__)api = flask_restx.Api(app)# /changelog endpoint will return the dict extracted from the changelog as JSON.add_changelog_endpoint(api, &quot;path/to/CHANGELOG.md&quot;)```Note: [flask-restx](https://pypi.python.org/pypi/flask-restx) module must be installed.## How to install1. [python 3.6+](https://www.python.org/downloads/) must be installed2. Use pip to install module:```shpython -m pip install keepachangelog```</longdescription>
</pkgmetadata>