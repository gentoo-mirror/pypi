<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Contrib[![Build Status](https://travis-ci.com/spack/contrib.svg?branch=master)](https://travis-ci.com/spack/contrib)[![codecov](https://codecov.io/gh/spack/contrib/branch/master/graph/badge.svg)](https://codecov.io/gh/spack/contrib)[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)A python package for making stacked area plots of contributions to a gitrepository over time.  Plots can show contributions by authors, or byorganizations.&lt;p align=&quot;center&quot;&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/spack/contrib/master/data/spack-pkgs-plot.png&quot; width=600&gt;&lt;/p&gt;## Installation`contrib` is on PyPI, so you can just `pip install` it:```console$ pip install contrib```Alternately, you can clone this project, add its directory to your`PYTHONPATH`, and add the `bin` directory to your `PATH`.## UsageTo use `contrib`, you'll need to create a configuration file telling itwhere to find your code.  Below is an example for Spack; you can findcomplete code in the[spack-contributions](https://github.com/spack/spack-contributions) repo.Here's an example `contrib.yaml`:```yamlcontrib:  # Path to your git repository. to run git blame on.  # Consider making this a git submodule.  repo:   ./spack  # JSON file mapping authors to organizations (optional)  orgmap: ./author-to-org.json  # Separate parts of the repository to process (optional).  For each  # commit, contrib will look for files that match the patterns in each  # part.  For a simple repo, you may only need one regular expression  # per part.  In Spack, the packages have moved around in the repo over  # time, so we provide multiple patterns.  Contrib will use the first  # pattern matched by any file in each commit.  parts:    packages:      - ^var/spack/repos/builtin/packages/.*\.py$      - ^var/spack/packages/.*\.py$      - ^lib/spack/spack/packages/.*\.py$```The `repo` needs to be in your local filesystem, preferably in the samedirectory as `contrib.yaml`.  `orgmap` is optional (see below for how togenerate it).  `parts` is also optional; if you do not specify it, therewill be one part called `all` that matches everything:```yaml    parts:      all:        - ^.*$```You can name your parts anything; see the example above for how to modela repository where different logical parts have moved around insubdirectories.### Mapping authors to organizationsThe `orgmap` (`author-to-org.json` in the example above) is optional.  Ifyou choose to provide it, it should be simple `json` dictionary mappingauthors to organizations:```json{  &quot;Author 1&quot;: &quot;UIUC&quot;,  &quot;Author 2&quot;: &quot;LBL&quot;,  ...  &quot;Author N&quot;: &quot;LLNL&quot;}```You can run `contrib --update-org-map` to generate an `orgmap` to startwith.  `contrib` will look at your repository's history and generate thefile automatically:```console$ contrib --update-org-map==&gt; Added 503 new authors to 'author-to-org.json'==&gt; New orgmap file created in 'author-to-org.json'.==&gt; Add it to './contrib.yaml' like this:    contrib:        orgmap: author-to-org.json```If you then add this file to your `contrib.yaml`, you can update it lateras your repository evolves:```console$ contrib --update-org-map==&gt; Added 10 new authors to 'author-to-org.json'```Newly added authors will be labeled as `unknown &lt;email from git&gt;` in the`json` file:```json  &quot;Author 1&quot;: &quot;unknown &lt;foo@bar.com&gt;&quot;,  &quot;Author 2&quot;: &quot;unknown &lt;444532+someusername@users.noreply.github.com&gt;&quot;,  &quot;Author 3&quot;: &quot;unknown &lt;user@example.com&gt;&quot;,```You can replace these with valid organizations, or just leave them andthey'll show up as &quot;unknown&quot; in the `contrib`  plots.### RunningOnce you've got all of that set up, you can run `contrib` in thedirectory where `contrib.yaml` lives:```console$ lsauthor-to-org.json  contrib.yaml$ contrib==&gt; Indexing 49 commits.STARTED       0/49 53ab298e88f80454f7f7c20ef200a3dbd0870473    packages: processed 45/3487 blames (9.04/s)...```By default, `contrib` will sample 50 commits from your repository andplot them.  If you want it to plot fewer samples, you can run `contrib--samples SAMPLES` where `SAMPLES` is a number of your choosing.`contrib` tries to use the available processors on the machine it isrun, and by default it will run parallel `git blame` jobs.  You cancontrol the parallelism with the `--jobs JOBS` argument.`contrib` has to run `git blame` for each sampled commit and for eachfile matched by the `parts` section of your `contrib.yaml` file (or forall files if `parts` is not provided), so it can take a long time to runif your repo's history is long.  `contrib`'s output shows how many `gitblame` calls remain and how fast blames are currently completing.### Cached data`contrib` caches results of `git blame` in a directory called`line-data`.  For large repositories, this can get to be quite large, somake sure you have a decent amount of space available (gigabytes forlarge repositories).## LicenseContrib is part of the Spack project. Spack is distributed under theterms of both the MIT license and the Apache License (Version 2.0). Usersmay choose either license, at their option.All new contributions must be made under both the MIT and Apache-2.0licenses.See [LICENSE-MIT](https://github.com/spack/contrib/blob/master/LICENSE-MIT),[LICENSE-APACHE](https://github.com/spack/contrib/blob/master/LICENSE-APACHE),[COPYRIGHT](https://github.com/spack/contrib/blob/master/COPYRIGHT), and[NOTICE](https://github.com/spack/contrib/blob/master/NOTICE) for details.SPDX-License-Identifier: (Apache-2.0 OR MIT)LLNL-CODE-647188</longdescription>
</pkgmetadata>