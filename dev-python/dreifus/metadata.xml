<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># dreifusOpenCV, OpenGL, Pytorch3D, ... you never know which camera coordinate convention you are currently using?  You always have to try `invert()` on your &quot;pose&quot; matrices because you never know whether they are cam2world orworld2cam?  The dreifus library is what you need!   dreifus (German for tripod) assists you in dealing with 3D cameras in Python.## 1. Installation```shellpip install dreifus```## 2. Usage### 2.1. Extrinsic (Pose) matricesTranslating between coordinate conventions made easy:```pythonfrom dreifus.matrix import Pose, CameraCoordinateConvention, PoseType# wrap some 4x4 extrinsic matrix# Default assumed coordinate convention: OPEN_CV# Default assumed pose type: WORLD_2_CAM pose = Pose(some_extrinsic_matrix, pose_type=..., camera_coordinate_convention=...)# Translate between coordinate conventionspose.change_camera_coordinate_convention(CameraCoordinateConvention.OPEN_GL)# Ensure your pose transforms into the direction you expectpose.change_pose_type(PoseType.CAM_2_WORLD)```### 2.2. Intrinsics```pythonfrom dreifus.matrix import Intrinsicsintrinsics = Intrinsics(fx, fy, cx, cy)# Adapt your intrinsics to images downscaled by a factor of 2xintrinsics.rescale(0.5)# Adapt your intrinsics to an image cropped at (50, 50) left-topintrinsics.crop(50, 50)```## 3. VisualizationThe visualization tools will automatically interpret your camera poses correctly, as long as you specified `camera_coordinate_convention` and `pose_type` correctly.```pythonimport pyvista as pvfrom dreifus.pyvista import add_coordinate_axes, add_camera_frustumpose = Pose(...)  # Some extrinsicsintrinsics = Intrinsics(...)  # Some intrinsicsimage = ...  # Some images taken from that viewp = pv.Plotter()add_coordinate_axes(p)add_camera_frustum(p, pose, intrinsics, image=image)p.show()```Render a pyvista scene from a specific camera:```pythonimport pyvista as pvfrom dreifus.pyvista import render_from_camerap = pv.Plotter(window_size=[IMG_W, IMG_H], off_screen=True)p.background_color = (0, 0, 0, 0)image = render_from_camera(p, pose, intrinsics)```</longdescription>
</pkgmetadata>