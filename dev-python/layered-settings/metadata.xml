<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># layered-settings`layered-settings` is a simple and configurable hierarchical settings library for Python, including Django, Flask, or any otherscripts that need settings from potentially a variety of sources. With it you can loadsettings from the environment, Amazon's SSM, local configparser .ini files, and more.## InstallationThe package is available on pip as `layered-settings`. Run:`pip install layered-settings`If you want to use the AWS SSM layer, include the [ssm] extra:`pip install layered-settings[ssm]`then import via:`from layered_settings import initialize_settings, loaders`## Example Usage```pythonimport osfrom layered_settings import initialize_settingsfrom layered_settings import loadersget_setting = initialize_settings(    sources=[        # Lowest priority is setting-defaults.ini.  All configuration values should be defaulted in here.        # The `loaders.ConfigParserLoader` is optional - if you pass a string ending in .ini, it wraps it in        # a `loaders.ConfigParserLoader` for you.        loaders.ConfigParserLoader(os.path.join(SCRIPT_DIR, &quot;setting-defaults.ini&quot;)),        # Next priority is a &quot;user&quot; settings file.        os.path.expanduser(&quot;~/.app-settings.ini&quot;),        # You can include a dictionary in the sources too...        {            &quot;general&quot;: {&quot;CLIENT_NAME&quot;: &quot;client&quot;},            &quot;email&quot;: {&quot;EMAIL_HOST&quot;: &quot;smtp.example.com&quot;, &quot;EMAIL_PORT&quot;: 25},        },        # If we are able/willing to reach out to AWS, do so.  A `None` in the initialize_settings sources        # will simply be ignored.        loaders.SSMLoader(f&quot;/app/stage/&quot;, aws_region=&quot;us-east-1&quot;) if ALLOW_SSM_CONFIGURATION else None,        # Top priority -- env var in the format APP__section__key.        loaders.EnvLoader(&quot;APP__{section}__{key}&quot;),    ])DATABASE_HOST = get_setting(&quot;database&quot;, &quot;DATABASE_HOST&quot;)AWS_SECRET_KEY = get_setting(&quot;aws&quot;, &quot;AWS_SECRET_KEY&quot;)...```## Frameworks SupportedThis library is tested using Python 3.x.</longdescription>
</pkgmetadata>