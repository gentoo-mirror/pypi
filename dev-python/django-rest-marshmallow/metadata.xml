<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div class=&quot;badges&quot;&gt;    &lt;a href=&quot;http://travis-ci.org/marshmallow-code/django-rest-marshmallow&quot;&gt;        &lt;img src=&quot;https://badgen.net/travis/marshmallow-code/django-rest-marshmallow/master&quot;        alt=&quot;Travis CI&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/django-rest-marshmallow&quot;&gt;        &lt;img src=&quot;https://badgen.net/pypi/v/django-rest-marshmallow&quot;        alt=&quot;django-rest-marshmallow on PyPI&quot;&gt;    &lt;/a&gt;    &lt;a href=&quot;https://marshmallow.readthedocs.io/en/latest/upgrading.html&quot;&gt;        &lt;img src=&quot;https://badgen.net/badge/marshmallow/2,3?list=1&quot;        alt=&quot;marshmallow 3 compatible&quot;&gt;    &lt;/a&gt;&lt;/div&gt;---# [django-rest-marshmallow](https://marshmallow-code.github.io/django-rest-marshmallow/)[Marshmallow schemas][marshmallow] for Django REST framework.---## Overview`django-rest-marshmallow` provides an alternative serializer implementation to the built-in serializers, by using the python [marshmallow] library, but exposing the same API as REST framework's `Serializer` class.## Requirements* Python (2.7, 3.5+)* Django REST framework (3.8+)* Marshmallow (2.15+ and 3.0.0b18+)## InstallationInstall using `pip`...```bash$ pip install django-rest-marshmallow```---## UsageDefine your schemas as you would with marshmallow, but importing the `Schema` class from `rest_marshmallow` instead.```pythonfrom rest_marshmallow import Schema, fieldsclass CustomerSchema(Schema):    name = fields.String()    email = fields.Email()    created_at = fields.DateTime()```The Schema class has the same interface as a Django REST framework serializer, so you can use it in your generic views...```pythonclass CustomerListView(generics.ListAPIView):    queryset = Customer.objects.all()    serializer_class = CustomerSchema```Or use the serializer API directly, for either serialization...```pythonserializer = CustomerSchema(queryset, many=True)return Response(serializer.data)```Or for validation...```pythonserializer = CustomerSchema(data=request.data)serializer.is_valid(raise_exception=True)serializer.validated_data```#### Instance create and updateIf you want to support `serializer.save()` you'll need to define the `.create()` and/or `.update()` methods explicitly.```pythonclass CustomerSchema(Schema):    name = fields.String()    email = fields.Email()    created_at = fields.DateTime()    def create(self, validated_data):        return Customer.objects.create(**validated_data)    def update(self, instance, validated_data):        for key, value in validated_data.items():            setattr(instance, key, value)        instance.save()        return instance```You can now use `.save()` from your view codeâ€¦```pythonserializer = CustomerSchema(data=request.data)serializer.is_valid(raise_exception=True)serializer.save()return Response(serializer.data, status=status.HTTP_201_CREATED)```Or use the schema together with generic views that create or update instances...```pythonclass CustomerListView(generics.ListCreateAPIView):    queryset = Customer.objects.all()    serializer_class = CustomerSchema```Note that you should always use the `create()` and `update()` methods instead of overriding the `make_object()` marshmallow method.#### Nested representationsFor nested representations, use marshmallow's standard `Nested` field as usual.```pythonfrom rest_marshmallow import fields, Schemaclass ArtistSchema(Schema):    name = fields.String()class AlbumSchema(Schema):    title = fields.String()    release_date = fields.Date()    artist = fields.Nested(ArtistSchema)```#### Excluding fieldsThe marshmallow `only` and `exclude` arguments are also valid as serializer arguments:```pythonserializer = CustomerSchema(queryset, many=True, only=('name', 'email'))return Response(serializer.data)```---## TestingInstall testing requirements.```bash$ pip install -r requirements.txt```Run with runtests.```bash$ ./runtests.py```You can also use the excellent [tox](http://tox.readthedocs.org/en/latest/) testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run:```bash$ tox```## DocumentationTo build the documentation, you'll need to install `mkdocs`.```bash$ pip install mkdocs```To preview the documentation:```bash$ mkdocs serveRunning at: http://127.0.0.1:8000/```To build the documentation:```bash$ mkdocs build```[marshmallow]: https://marshmallow.readthedocs.org/en/latest/</longdescription>
</pkgmetadata>