<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># numpydoc_decoratorThis package allows you to build [numpy-styledocstrings](https://numpydoc.readthedocs.io/en/latest/format.html#sections)programmatically and apply them using a decorator. This can be usefulbecause:-   Parts of your documentation, such as parameter descriptions, can be    shared between functions, avoiding the need to repeat yourself.-   Type information for parameters and return values is automatically    picked up from type annotations and added to the docstring, avoiding    the need to maintain type information in two places.## Installation`pip install numpydoc_decorator`## Usage### Documentation a functionHere is an example of documenting a function:```pythonfrom numpydoc_decorator import doc@doc(    summary=&quot;Say hello to someone.&quot;,    extended_summary=&quot;&quot;&quot;        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do        eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad        minim veniam, quis nostrud exercitation ullamco laboris nisi ut        aliquip ex ea commodo consequat. Duis aute irure dolor in        reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in        culpa qui officia deserunt mollit anim id est laborum.    &quot;&quot;&quot;,    parameters=dict(        name=&quot;The name of the person to greet.&quot;,        language=&quot;The language in which to greet as an ISO 639-1 code.&quot;,    ),    returns=&quot;A pleasant greeting.&quot;,    raises=dict(        NotImplementedError=&quot;If the requested language has not been implemented yet.&quot;,        ValueError=&quot;If the language is not a valid ISO 639-1 code.&quot;    ),    see_also=dict(        print=&quot;You could use this function to print your greeting.&quot;,    ),    notes=&quot;&quot;&quot;        This function is useful when greeting someone else. If you would        like something to talk about next, you could try [1]_.    &quot;&quot;&quot;,    references={        &quot;1&quot;: &quot;&quot;&quot;            O. McNoleg, &quot;The integration of GIS, remote sensing, expert systems            and adaptive co-kriging for environmental habitat modelling of the            Highland Haggis using object-oriented, fuzzy-logic and neural-            network techniques,&quot; Computers &amp; Geosciences, vol. 22, pp. 585-588,            1996.        &quot;&quot;&quot;,    },    examples=&quot;&quot;&quot;        Here is how to greet a friend in English:        &gt;&gt;&gt; print(greet(&quot;Ford Prefect&quot;))        Hello Ford Prefect!        Here is how to greet someone in another language:        &gt;&gt;&gt; print(greet(&quot;Tricia MacMillan&quot;, language=&quot;fr&quot;))        Salut Tricia MacMillan!    &quot;&quot;&quot;,)def greet(    name: str,    language: str = &quot;en&quot;,) -&gt; str:    if len(language) != 2:        raise ValueError(&quot;language must be an ISO 639-1 code&quot;)    if language == &quot;en&quot;:        return f&quot;Hello {name}!&quot;    elif language == &quot;fr&quot;:        return f&quot;Salut {name}!&quot;    else:        raise NotImplementedError(f&quot;language {language} not implemented&quot;)```Here is the docstring that will be created and attached to thedecorated function:```&gt;&gt;&gt; print(greet.__doc__)Say hello to someone.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed doeiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim adminim veniam, quis nostrud exercitation ullamco laboris nisi utaliquip ex ea commodo consequat. Duis aute irure dolor inreprehenderit in voluptate velit esse cillum dolore eu fugiat nullapariatur. Excepteur sint occaecat cupidatat non proident, sunt inculpa qui officia deserunt mollit anim id est laborum.Parameters----------name : str    The name of the person to greet.language : str, optional, default: 'en'    The language in which to greet as an ISO 639-1 code.Returns-------str    A pleasant greeting.Raises------NotImplementedError    If the requested language has not been implemented yet.ValueError    If the language is not a valid ISO 639-1 code.See Also--------print : You could use this function to print your greeting.Notes-----This function is useful when greeting someone else. If you would likesomething to talk about next, you could try [1]_.References----------.. [1] O. McNoleg, &quot;The integration of GIS, remote sensing, expert systems    and adaptive co-kriging for environmental habitat modelling of the    Highland Haggis using object-oriented, fuzzy-logic and neural- network    techniques,&quot; Computers &amp; Geosciences, vol. 22, pp. 585-588, 1996.Examples--------Here is how to greet a friend in English:&gt;&gt;&gt; print(greet(&quot;Ford Prefect&quot;))Hello Ford Prefect!Here is how to greet someone in another language:&gt;&gt;&gt; print(greet(&quot;Tricia MacMillan&quot;, language=&quot;fr&quot;))Salut Tricia MacMillan!```### Shared parametersIf you have parameters which are common to multiple functions, hereis an approach you can take:```pythonfrom numpydoc_decorator import docfrom typing_extensions import Annotatedclass params:    name = Annotated[str, &quot;The name of a person.&quot;]    language = Annotated[str, &quot;An ISO 639-1 language code.&quot;]@doc(    summary=&quot;Say hello to someone you know.&quot;,    returns=&quot;A personal greeting.&quot;,)def say_hello(    name: params.name,    language: params.language,) -&gt; str:    pass@doc(    summary=&quot;Say goodbye to someone you know.&quot;,    returns=&quot;A personal parting.&quot;,)def say_goodbye(    name: params.name,    language: params.language,) -&gt; str:    pass```Here are the generated docstrings:```&gt;&gt;&gt; print(say_hello.__doc__)Say hello to someone you know.Parameters----------name : str    The name of a person.language : str    An ISO 639-1 language code.Returns-------str    A personal greeting.``````&gt;&gt;&gt; print(say_goodbye.__doc__)Say goodbye to someone you know.Parameters----------name : str    The name of a person.language : str    An ISO 639-1 language code.Returns-------str    A personal parting.```## NotesThere are probably lots of edge cases that this package has notcovered yet. If you find something doesn't work as expected, ordeviates from the [numpydoc style guide](https://numpydoc.readthedocs.io/en/latest/format.html)in an unreasonable way, please feel free to submit a pull request.Note that this package does deviate from the numpydoc style guideunder some circumstances. For example, if a function does not haveany type annotations, then there will be no type information in thedocstring. The rationale for this is that all type information, ifprovided, should be provided through type annotations. However, somefunctions may choose not to annotate types for some or all parameters,but we still want to document them as best we can.</longdescription>
</pkgmetadata>