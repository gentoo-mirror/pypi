<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>=========multilint=========.. image:: https://github.com/adamchainz/multilint/workflows/CI/badge.svg?branch=master   :target: https://github.com/adamchainz/multilint/actions?workflow=CI.. image:: https://img.shields.io/pypi/v/multilint.svg   :target: https://pypi.org/project/multilint/.. image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target: https://github.com/python/black----**Unmaintained:** I'm no longer maintaining this package because it's forPython 2 compatibility and all other projects I've used it on are now Python 3only. If you want to continue maintenance please contact me.----Run multiple python linters easily.Installation and Usage----------------------Install with **pip**:.. code-block:: sh    python -m pip install multilintRun with:.. code-block:: sh    multilintPython 3.5 to 3.8  supported.How It Works------------I like to keep my projects tidy with a standard set of linters. Running themall turned out to be easier with a wrapper script, which I ended upcopy-pasting between them all. This project stops me needing to copy/paste,centralizing running all these neat tools.In order, it will check if these linters are installed, and if so, run them:* `Black &lt;https://pypi.org/project/black/&gt;`_, to autoformat code* `Flake8 &lt;https://pypi.org/project/flake8/&gt;`_, to check code quality* `Isort &lt;https://pypi.org/project/isort/&gt;`_, in 'diff' mode to show where imports aren't sorted* `Modernize &lt;https://pypi.org/project/modernize/&gt;`_, in 'diff' mode to show where python 2/3 compatibility with  ``six`` is missingIf any of them fail, ``multilint`` stops and dies with a non-zero exit code.Otherwise it succeeds!You need to configure the paths that will be linted (by default, only``setup.py`` is linted). Put a section in your ``setup.cfg`` like:.. code-block:: ini    [tool:multilint]    paths = my_package            tests            setup.pyYou can also pass the paths as arguments to ``multilint``, which will overridethe ``settings``, like:.. code-block:: sh    multilint path/my_file.py path/folder1**Note:** previously ``multilint`` supported running ``setup.py check`` if youpassed a ``setup.py`` file. This was removed as the command is deprecated. Youshould instead use ``twine check`` as per the `python packaging documentation&lt;https://packaging.python.org/guides/making-a-pypi-friendly-readme#validating-restructuredtext-markup&gt;`__.Usage With ``tox``------------------I normally run my tests with ``tox``. An example ``tox.ini`` to use``multilint`` to run your tests on Python 3.5-3.8 and do your linting on Python3.8 would look like:.. code-block:: ini    [tox]    envlist =        py{35,36,37,38},        py38-codestyle    [testenv]    deps = -rrequirements.txt    commands = pytest    [testenv:py38-codestyle]    commands = multilintThen just put ``multilint``, plus the linters you want it to run (e.g.``flake8``) in your ``requirements.txt``.</longdescription>
</pkgmetadata>