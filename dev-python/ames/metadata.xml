<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ames[![DOI](https://data.caltech.edu/badge/110025475.svg)](https://data.caltech.edu/badge/latestdoi/110025475)Automated Metadata ServiceManage metadata from different sources.  The examples in the package arespecific to Caltech repositories, but could be generalized.  This packageis currently in development and will have additional sources and matchersadded over time.## Basic InstallYou need to have Python 3.7 on your machine([Miniconda](https://docs.conda.io/en/latest/miniconda.html) is a greatinstallation option).If you just need the python functions to write your own code(like codemeta_to_datacite) open a terminal and type `pip install ames`## Full InstallYou need to have Python 3.7 on your machine([Miniconda](https://docs.conda.io/en/latest/miniconda.html) is a greatinstallation option).  Test whether you have python installed by opening a terminal oranaconda prompt window and typing `python -V`, which should print version 3.7or greater.### Clone amesIt's best to download this software using git.  To install git, type`conda install git` in your terminal or anaconda prompt window.  Then find where youwant the ames folder to live on your computer in File Explorer or Finder(This could be the Desktop or Documents folder, for example).  Type `cd `in anaconda prompt or terminal and drag the location from the file browser intothe terminal window.  The path to the locationwill show up, so your terminal will show a command like`cd /Users/tmorrell/Desktop`.  Hit enter.  Then type`git clone https://github.com/caltechlibrary/ames.git`. Once youhit enter you'll see an epxml_to_datacite folder.  Type `cd ames`### InstallNow that you're in the ames folder, type `python setup.py install`.  You cannow run all the different operations described below.### UpdatingWhen there is a new version of the software, go to the amesfolder in anaconda prompt or terminal and type `git pull`.  You shouldn't need to re-dothe installation steps unless there are major updates.## Organization### Harvesters-   crossref_refs - Harvest references in datacite metadata from crossref event data-   caltechdata - Harvest metadata from CaltechDATA-   cd_github - Harvest GitHub repos and codemeta files from CaltechDATA-   matomo - Harvest web statistics from matomo-   caltechfeeds - Harvest Caltech Library metadata from feeds.library.caltech.edu### Matchers-   caltechdata - Match content in CaltechDATA-   update_datacite - Match content in DataCite## Example OperationsThe run scripts show examples of using ames to perform a specific updateoperation.### CodeMeta managementIn the test directory these is an example of using the codemeta_to_datacitefunction to convert a codemeta file to DataCite standard metdata### CodeMeta UpdatingCollect GitHub records in CaltechDATA, search for a codemeta.json file, andupdate CaltechDATA with new metadata.#### CodeMeta SetupYou need to set an environmental variable with your token to accessCaltechDATA `export TINDTOK=`#### CodeMeta UsageType `python run_codemeta.py`.### CaltechDATA Citation AlertsHarvest citation data from the Crossref Event Data API, records inCaltechDATA, match records, update metadata in CaltechDATA, and send email touser.#### Citation Alerts SetupYou need to set environmental variables with your token to accessCaltechDATA `export TINDTOK=` and Mailgun `export MAILTOK=`.#### Citation Alerts UsageType `python run_event_data.py`. You'll be prompted for confirmation if anynew citations are found.  ### Media UpdatesUpdate media records in DataCite that indicate the files associated with a DOI.#### Media SetupYou need to set an environmental variable with your password for your DataCiteaccount using `export DATACITE=`#### Media UsageType `python run_media_update.py`.  ### CaltechDATA metadata checksThis will run checks on the quality of metadata in CaltechDATA.  Currently thisverifies whether redundent links are present in the related identifier section.  It also can update metadata with DataCite.#### Metadata Checks SetupYou need to set environmental variables with your token to accessCaltechDATA `export TINDTOK=`#### Metadata Checks UsageType `python run_caltechdata_checks.py`.### CaltechDATA Metadata UpdatesThis will improve the quality of metadata in CaltechDATA.  This option isbroken up into updates that should run frequently (currently every 10 minutes)and daily. Frequent updates include adding a recommended citation to thedescriptions, and daily updates include adding CaltechTHESIS DOIs toCaltechDATA.#### Metadata Updates SetupYou need to set environmental variables with your token to accessCaltechDATA `export TINDTOK=`#### Metadata Updates UsageType `python run_caltechdata_updates.py` or `python run_caltechdata_daily.py`.### CaltechDATA COUNTER Usage ReportsThis will harvest download and view information from matomo and format it intoa COUNTER report.  This feature is still being tested.  #### Usage Report SetupYou need to set environmental variables with your token to accessMatomo `export MATTOK=`#### Usage Report UsageType `python run_usage.py`.### Archives ReportsRuns reports on ArchivesSpace.  Current reports:-   accession_report: Returns accession records that match a certain subject-   format_report: Returns large report on accessions with certain media formatsExample usage:python run_archives_report.py accession_report accession.csv -subject &quot;Manuscript Collection&quot;### Update EprintsPerform update options using the Eprints API. Supports url updates to https forresolver field, special character updates, and adjusting the item modified date(which also regenerates the public view of the page).Example usage:python run_eprints_updates.py update_date authors -recid 83420 -user tmorrell -password ### CODA ReportsRuns reports on Caltech Library repositories.  Current reports:-   doi_report: Records (optionally filtered by year) and their DOIs.-   thesis_report: Matches Eprints tsv export for CaltechTHESIS-   thesis_metadata: Matches Eprints metadata tsv export for CaltechTHESIS-   creator_report: Finds records where an Eprints Creator ID has an ORCIDbut it is not included on all records.  Also lists cases where an author hastwo ORCIDS.-   creator_search: Export a google sheet with the author lists of all    publications associated with an author id. Requires -creator argument-   people_search: Search across the CaltechPEOPLE collection by division-   file_report: Records that have potential problems with the attached files-   status_report: Reports on any records with an incorrect status in feeds-   record_number_report: Reports on records where the record number and resolverURL don't match-   alt_url_report: Reports on records with discontinure alt_url field-   license_report: Report out the license types in CaltechDATA#### Report UsageType something like `python run_coda_report.py doi_report thesis report.tsv -year 1977-1978`-   The first option is the report type-   Next is the repository (thesis or authors)-   Next is the output file name (include .csv or .tsv extension, will show up in current directory)#### Report Options-   Some reports include a -year option to return just the records from a specific year (1977) or arange (1977-1978)-   Some reports include a -group option to return just the records with aspecific group name.  Surround long names with quotes (e.g. &quot;Keck Institute for Space Studies&quot;)-   Some reports include a -item option to return just records with aspecific item type.  Supported types include:    -   CaltechDATA item types (Dataset, Software, ...)    -   CaltechAUTHORS item types (article, monograph, ...)    -   CaltechAUTHORS monograph sub-types        - discussion_paper        - documentation        - manual        - other        - project_report        - report        - technical_report        - white_paper        - working_paperThere are some additional technical arguments if you want to change the default behavior.-   Adding `-source eprints` will pull report data from Eprints instead of feeds.  This isvery slow.  You may need to add -username and -password to provide logincredentials-   Adding `-sample XXX` allows you to select a number of randomly selected records.  This makes it  more reasonable to pull data directly from Eprints.You can combine multiple options to build more complex queries, such as thisrequest for reports from a group:```consolepython run_coda_report.py doi_report authors keck_tech_reports.csv -group &quot;Keck Institute for Space Studies&quot; -item technical_report project_report discussion_paper``````consolepython run_coda_report.py people_search people chem.csv -search &quot;Chemistry and Chemical Engineering Division&quot;```</longdescription>
</pkgmetadata>