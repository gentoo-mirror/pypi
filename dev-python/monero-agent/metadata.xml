<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Monero Wallet Python implementation===================================|Build Status|Pure-python Monero Wallet implementation in Python3.Implements transaction signing protocol designed for Trezor hardwarewallet as described in`monero-trezor-doc &lt;https://github.com/ph4r05/monero-trezor-doc&gt;`__.The main purpose of this repo is to provide host side (agent) for thetransaction signing with the Trezor hardware wallet. The repo alsocontains the initial implementation for the Trezor side. The Trezorprotocol side underwent heavy refactoring and is about to be merged tothe `trezor-core &lt;https://github.com/ph4r05/trezor-core&gt;`__ repository.The repo provides integration tests for Trezor wallet transactionsigning.-  PR adding Monero support to the Trezor hardware wallet (client side   of the signing protocol):   https://github.com/trezor/trezor-core/pull/293-  PR adding Trezor hardware support to official Monero codebase:   https://github.com/monero-project/monero/pull/4241Supported features-------------------  Full RingCT (one UTXO)-  Simple RingCT (more than 1 UTXOs)-  Sub-addresses-  Key image sync-  Bulletproofs (batch verification, signing, ready for v9 fork)-  Ledger protocol implementation, HW wallet sideRoadmap--------  Spend proof-  Reserver proof-  Multisig-  Wallet implementation (funds receiving, UTXO mixing)-  Ledger protocol implementation, host sideProtocol--------In order to support RingCT on hardware wallet with limited resources asubdivided protocol had to be implemented. It is not feasible to processthe signed transaction in one run on the hardware wallet with tens ofUTXOs and multiple outputs.The introduction to the topic is described here:https://github.com/ph4r05/monero-trezor-docThe documentation can be out of sync from the code. Take this sourcecode as a primary reference.In the current protocol it is assumed there may be multiple input UTXO(tens to hundreds). So it is optimized to work incrementally, one UTXOat a time. This is reasonable to assume as your funds may be scatteredover many small transactions. On the other hand we assume the number ofoutputs is relatively small (small units) as it usually is in the Monerotransactions.It is quite easy to extend protocol to work with large amounts ofoutputs but due to the message structure which is later signed it willbe needed to add two more roundrips with sending output related data oneby one to the Trezor for incremental hashing.Outputs are pinned in the beginning of the protocol - number of outputsis fixed at this point in the Trezor and HMAC with unique key (indexdependent) is generated for each output. So in further roundtrips it isassured only previously pinned outputs in the exact given order areprocessed. The same principle is used for each data produced by theTrezor which are later used as inputs.Project structure-----------------Agent &lt;-&gt; TrezorAgent is an object supposed to run on the host PC where Trezor is the HWwallet implementation. ``agent.py`` and ``trezor.py`` are mainly portsof the C++ code to the Python for PoC, experimentation and testing.These versions are not optimized for usage in HW environment.Optimized versions are ``agent_lite.py`` and ``trezor_lite.py``.Currently, the agent functionality is used just for testing and as aPoC. The Trezor support has been integrated to the official Monero`CLI &lt;https://github.com/monero-project/monero&gt;`__ and`GUI &lt;https://github.com/monero-project/monero-gui&gt;`__ wallets.Serialize lib-------------The project depends on my ``monero-serialize`` library. Data objectsused in the Monero are defined there, it supports serialization /deserialization to binary format. The serialized binary messages arehashed during the transaction signature.https://github.com/ph4r05/monero-serializeCrypto------Monero uses Ed25519 elliptic curve. The pure-python implementation isnot optimized to avoid side-channel leaks (e.g., timing) as it servesmainly as PoC.The project uses Ed25519 implementation which works in extended Edwardscoordinates ``(x, y, z, t)``.The only code directly handling point representation is ``crypto.py``.All other objects are using ``crypto.py`` to do the EC computation.Point representation is opaque to the other modules.The opaque point representation can be converted to bytearrayrepresentation suitable for transport (compressed, y-coordinate + signflag) using ``crypto.encodepoint()`` and ``crypto.decodepoint()``.Scalars are represented as integers (no encoding / decoding is needed).However, we are working in modular ring so for scalar operations such asaddition, division, comparison use the ``crypto.sc_*`` methods.Trezor-crypto-------------Additionally to pure-python crypto backend, there is a production-ready``trezor-crypto`` backend. I implemented required Monero-relatedcryptographic algorithms to the`trezor-crypto &lt;https://github.com/ph4r05/trezor-crypto&gt;`__ (TCRY). TCRYimplements constant-time curve operations, uses`libsodium &lt;https://github.com/jedisct1/libsodium&gt;`__ to generate randomvalues. Borromean Range proof was reimplemented in C for CPU and memoryefficiency.I created a python binding`py-trezor-crypto &lt;https://github.com/ph4r05/py-trezor-crypto&gt;`__ whichcan be installed from pip. The pip builds`trezor-crypto &lt;https://github.com/ph4r05/trezor-crypto&gt;`__ library.Please refer to the readme of the`py-trezor-crypto &lt;https://github.com/ph4r05/py-trezor-crypto&gt;`__ forinstallation details (dependencies).To install python bindings with agent run:.. code:: bash    pip install -U --no-cache 'monero_agent[tcry]'    # Or laternativelly    pip install -U --no-cache py_trezor_crypto_ph4 Dependencies:-  libsodium-  pkg-config-  gcc-  python-devTravis tests with both crypto backends. In order to test with TCRYinstall all its dependencies. ``libsodium`` is the only one dependencyfor the shared lib. For more info take a look at``travis-install-libtrezor-crypto.sh``.Crypto dependency is selected based on the ``EC_BACKEND`` env var. ``0``is for Python backend, ``1`` for TCRY. Path to the TCRY is specified via``LIBTREZOR_CRYPTO_PATH`` env var. If the TCRY is not found or could notbe loaded the code fallbacks to python backend. This behaviour can bechanged by setting ``EC_BACKEND_FORCE`` env var to ``1``.TCRY is also 20 times faster (unit tests)... code:: bash    $&gt; EC_BACKEND_FORCE=1 EC_BACKEND=0  ./venv/bin/python -m unittest monero_glue_test/test_*.py    ...s................................................................    ----------------------------------------------------------------------    Ran 68 tests in 416.823s    OKTCRY backend:.. code:: bash    $&gt;  EC_BACKEND_FORCE=1 EC_BACKEND=1  ./venv/bin/python -m unittest monero_glue_test/test_*.py    ....................................................................    ----------------------------------------------------------------------    Ran 68 tests in 84.057s    OKTesting with Trezor-------------------.. code:: bash    pip3 install -U --no-cache monero-agent py_trezor_crypto_ph4     python3 -m unittest trezor_monero_test.test_trezor    # To test only one transaction:    TREZOR_TEST_ONLY_TX=1 TREZOR_TEST_NUM_TX=1 python3 -m unittest trezor_monero_test.test_trezor    # To test with interactive Trezor prompts:    TREZOR_TEST_INTERACTIVE=1 TREZOR_TEST_ONLY_TX=1 TREZOR_TEST_NUM_TX=1 python3 -m unittest trezor_monero_test.test_trezor    # Note: if testing with local py files, use trezor_monero_test/test_trezor.pyMore on using the repo----------------------Please refer to the `PoC.md &lt;PoC.md&gt;`__ for more usage examples.Memory considerations~~~~~~~~~~~~~~~~~~~~~Python uses arbitrary precision integers with a memory overhead. Thefollowing command shows the amount of memory required for certain datatypes and sizes:.. code:: python    &gt;&gt;&gt; sys.getsizeof(0)    24    &gt;&gt;&gt; sys.getsizeof(2**32-1)  # 4B num    32    &gt;&gt;&gt; sys.getsizeof(2**64-1)  # 8B num    36    &gt;&gt;&gt; sys.getsizeof(2**256-1)  # 32B num    60    &gt;&gt;&gt; sys.getsizeof(b'\x00'*32)  # 32B hex    65    &gt;&gt;&gt; sys.getsizeof(b'\x00'*64)  # 64B hex    97Monero works in EC with 32 B numbers. To store a 32 B number it takes 60B in integer representation and 65 B in the byte string encodedrepresentation (some ed25519 libraries and mininero use thisrepresentation). For scalars it is apparently more effective to storeintegers naturally, saving both memory and CPU cycles with recoding.EC point arithmetics can use classic point coordinates ``(x, y)`` orextended Edwards point coordinates ``(x,y,z,t)``. It takes 64 and 80 Bto store tuple of 2 and 4 elements respectively. It thus take 184 B and320 B to store an EC point in the natural form compared to the 65 B byterepresentation.Donations=========Thanks for your support!Monero donation address:::    88np3NiHwTVDZCNAZWth856ZwriMpp3iRBoAEy4yGWpR17eqqtQYs1RiwcWZexg8Wa8x143p2pu8LWJ7qYutJHjhTQB8gC1Internal notes==============-  Signing client version 3 is not yet implemented. Subaddr index is   needed for each UTXO.-  CLSAG algorithm is implemented, but not yet used in the signing   clientRelated projects================-  `monero-trezor-doc &lt;https://github.com/ph4r05/monero-trezor-doc&gt;`__ -   Technical report describing the integration design-  `monero-serialize &lt;https://github.com/ph4r05/monero-serialize&gt;`__ -   Monero serialization library-  `trezor-crypto &lt;https://github.com/ph4r05/trezor-crypto&gt;`__ - Trezor   crypto library, low-level crypto functions-  `py-trezor-crypto &lt;https://github.com/ph4r05/py-trezor-crypto&gt;`__ -   Python binding for Trezor Crypto-  `py-cryptonight &lt;https://github.com/ph4r05/py-cryptonight&gt;`__ -   Python binding for Cryptonight hash function-  `trezor-firmware &lt;https://github.com/ph4r05/trezor-firmware&gt;`__ -   Trezor firmware monorepository, contains whole firmware, with Monero   integration-  `trezor-core &lt;https://github.com/ph4r05/trezor-core&gt;`__ - Deprecated   Trezor core repo (now included in monorepo)-  `trezor-crypto &lt;https://github.com/ph4r05/trezor-crypto&gt;`__ -   Deprecated Trezor crypto repo with low-level crypto functions (now   included in monorepo)-  `trezor-common &lt;https://github.com/ph4r05/trezor-common&gt;`__ -   Deprecated Trezor common repo with protobuf messages and common   artifacts (now included in monorepo).. |Build Status| image:: https://travis-ci.org/ph4r05/monero-agent.svg?branch=master   :target: https://travis-ci.org/ph4r05/monero-agent</longdescription>
</pkgmetadata>