<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Iterated-sums signature in RustThis is an implementation of the one-dimensional iterated-sums signature in Rust,with Python 3 bindings.## Installation### From PyPINormally, this package can be installed by running```bashpip3 install o3iss```### From sourceCurretly we provide wheels for Linux, macOS and 64-bit Windows.If your system is not included in any of these targets, you will have to compile the package yourself.This will require you to have a Rust compiler, which can be obtained from [https://www.rust-lang.org/tools/install].Start by cloning this repository by running```bashgit clone https://github.com/ntapiam/o3iss.git```Then, enter the directory and run```bashpython3 setup.py install```This should compile and install the package on your system.## UsageThis implementation offers only a single function: `iss.compute` with signature `(np.ndarray, int) -&gt; np.ndarray`where both the input and ouput arrays are one-dimensional.In `v0.1.2`, we introduced partial support for the `sklearn` framework.Example (assuming that `sktime` is present):```python3from iss import IssClassifierfrom sktime.datasets import load_gunpointfrom sktime.utils.data_processing import from_nested_to_2d_arrayXtrain, ytrain = load_gunpoint(split=&quot;train&quot;, return_X_y=True)Xtest, ytest = load_gunpoint(split=&quot;test&quot;, return_X_y=True)Xtrain, Xtest = (    from_nested_to_2d_array(Xtrain).to_numpy(),    from_nested_to_2d_array(Xtest).to_numpy(),)ytrain, ytest = ytrain.astype(int), ytest.astype(int)clf = IssClassifier(level=3, n_jobs=7)clf.fit(Xtrain, ytrain)print(clf.score(Xtest, ytest))&gt;&gt; 0.9133333333333333```# TO DO- [ ] Multidimensional signature- [ ] Proper `sklearn` integration- [x] Produce a proper Python 3 package</longdescription>
</pkgmetadata>