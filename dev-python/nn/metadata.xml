<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A neural network library built on top of TensorFlow for quickly building deep learning models.[![Build Status](https://travis-ci.org/marella/nn.svg?branch=master)](https://travis-ci.org/marella/nn)## Usage`nn.Tensor` is the core data structure which is a wrapper for `tf.Tensor` and provides additional functionality. It can be created using the `nn.tensor()` function:```pyimport nna = nn.tensor([1, 2, 3])assert isinstance(a, nn.Tensor)assert a.shape == (3, )```It supports method chaining:```pyc = a.square().sum()assert c.numpy() == 14```and can be used with `tf.Tensor` objects:```pyimport tensorflow as tfb = tf.constant(2)c = (a - b).square().sum()assert c.numpy() == 2```It can also be used with high level APIs such as `tf.keras`:```pymodel = nn.Sequential([  nn.Dense(128, activation='relu'),  nn.Dropout(0.2),  nn.Dense(10)])y = model(x)assert isinstance(y, nn.Tensor)```and to perform automatic differentiation and optimization:```pyoptimizer = nn.Adam()with nn.GradientTape() as tape:    outputs = model(inputs)    loss = (targets - outputs).square().mean()grads = tape.gradient(loss, model.trainable_variables)optimizer.apply_gradients(zip(grads, model.trainable_variables))```To use it with ops that expect `tf.Tensor` objects as inputs, wrap the ops using `nn.op()`:```pymean = nn.op(tf.reduce_mean)c = mean(a)assert isinstance(c, nn.Tensor)maximum = nn.op(tf.maximum, binary=True)c = maximum(a, b)assert isinstance(c, nn.Tensor)```or convert it to a `tf.Tensor` object using the `tf()` method or `nn.tf()` function:```pyb = a.tf()assert isinstance(b, tf.Tensor)b = nn.tf(a)assert isinstance(b, tf.Tensor)```See more examples [here][examples].## InstallationRequirements:-   TensorFlow &gt;= 2.0-   Python &gt;= 3.6Install from PyPI (recommended):```shpip install nn```Alternatively, install from source:```shgit clone https://github.com/marella/nn.gitcd nnpip install -e .```[TensorFlow] should be installed separately.## TestingTo run tests, install dependencies:```shpip install -e .[tests]```and run:```shpytest tests```[tensorflow]: https://www.tensorflow.org/install[examples]: https://github.com/marella/train/tree/master/examples</longdescription>
</pkgmetadata>