<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># prefect-databricksVisit the full docs [here](https://PrefectHQ.github.io/prefect-databricks) to see additional examples and the API reference. &lt;p align=&quot;center&quot;&gt;    &lt;a href=&quot;https://pypi.python.org/pypi/prefect-databricks/&quot; alt=&quot;PyPI version&quot;&gt;        &lt;img alt=&quot;PyPI&quot; src=&quot;https://img.shields.io/pypi/v/prefect-databricks?color=0052FF&amp;labelColor=090422&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/PrefectHQ/prefect-databricks/&quot; alt=&quot;Stars&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/stars/PrefectHQ/prefect-databricks?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://pepy.tech/badge/prefect-databricks/&quot; alt=&quot;Downloads&quot;&gt;        &lt;img src=&quot;https://img.shields.io/pypi/dm/prefect-databricks?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://github.com/PrefectHQ/prefect-databricks/pulse&quot; alt=&quot;Activity&quot;&gt;        &lt;img src=&quot;https://img.shields.io/github/commit-activity/m/PrefectHQ/prefect-databricks?color=0052FF&amp;labelColor=090422&quot; /&gt;&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;https://prefect-community.slack.com&quot; alt=&quot;Slack&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/slack-join_community-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=slack&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://discourse.prefect.io/&quot; alt=&quot;Discourse&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052FF&amp;labelColor=090422&amp;logo=discourse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;## Welcome!Prefect integrations for interacting with DatabricksThe tasks within this collection were created by a code generator using the service's OpenAPI spec.The service's REST API documentation can be found [here](https://docs.databricks.com/dev-tools/api/latest/index.html).## Getting Started### Python setupRequires an installation of Python 3.7+.We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.These tasks are designed to work with Prefect 2. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).### InstallationInstall `prefect-databricks` with `pip`:```bashpip install prefect-databricks```A list of available blocks in `prefect-databricks` and their setup instructions can be found [here](https://PrefectHQ.github.io/prefect-databricks/#blocks-catalog).### Lists jobs on the Databricks instance```pythonfrom prefect import flowfrom prefect_databricks import DatabricksCredentialsfrom prefect_databricks.jobs import jobs_list@flowdef example_execute_endpoint_flow():    databricks_credentials = DatabricksCredentials.load(&quot;my-block&quot;)    jobs = jobs_list(        databricks_credentials,        limit=5    )    return jobsexample_execute_endpoint_flow()```### Use `with_options` to customize options on any existing task or flow```pythoncustom_example_execute_endpoint_flow = example_execute_endpoint_flow.with_options(    name=&quot;My custom flow name&quot;,    retries=2,    retry_delay_seconds=10,)```### Launch a new cluster and run a Databricks notebookNotebook named `example.ipynb` on Databricks which accepts a name parameter:```pythonname = dbutils.widgets.get(&quot;name&quot;)message = f&quot;Don't worry {name}, I got your request! Welcome to prefect-databricks!&quot;print(message)```Prefect flow that launches a new cluster to run `example.ipynb`:```pythonfrom prefect import flowfrom prefect_databricks import DatabricksCredentialsfrom prefect_databricks.jobs import jobs_runs_submitfrom prefect_databricks.models.jobs import (    AutoScale,    AwsAttributes,    JobTaskSettings,    NotebookTask,    NewCluster,)@flowdef jobs_runs_submit_flow(notebook_path, **base_parameters):    databricks_credentials = DatabricksCredentials.load(&quot;my-block&quot;)    # specify new cluster settings    aws_attributes = AwsAttributes(        availability=&quot;SPOT&quot;,        zone_id=&quot;us-west-2a&quot;,        ebs_volume_type=&quot;GENERAL_PURPOSE_SSD&quot;,        ebs_volume_count=3,        ebs_volume_size=100,    )    auto_scale = AutoScale(min_workers=1, max_workers=2)    new_cluster = NewCluster(        aws_attributes=aws_attributes,        autoscale=auto_scale,        node_type_id=&quot;m4.large&quot;,        spark_version=&quot;10.4.x-scala2.12&quot;,        spark_conf={&quot;spark.speculation&quot;: True},    )    # specify notebook to use and parameters to pass    notebook_task = NotebookTask(        notebook_path=notebook_path,        base_parameters=base_parameters,    )    # compile job task settings    job_task_settings = JobTaskSettings(        new_cluster=new_cluster,        notebook_task=notebook_task,        task_key=&quot;prefect-task&quot;    )    run = jobs_runs_submit(        databricks_credentials=databricks_credentials,        run_name=&quot;prefect-job&quot;,        tasks=[job_task_settings]    )    return runjobs_runs_submit_flow(&quot;/Users/username@gmail.com/example.ipynb&quot;, name=&quot;Marvin&quot;)```Note, instead of using the built-in models, you may also input valid JSON. For example, `AutoScale(min_workers=1, max_workers=2)` is equivalent to `{&quot;min_workers&quot;: 1, &quot;max_workers&quot;: 2}`.For more tips on how to use tasks and flows in a Collection, check out [Using Collections](https://orion-docs.prefect.io/collections/usage/)!## ResourcesIf you encounter any bugs while using `prefect-databricks`, feel free to open an issue in the [prefect-databricks](https://github.com/PrefectHQ/prefect-databricks) repository.If you have any questions or issues while using `prefect-databricks`, you can find help in either the [Prefect Discourse forum](https://discourse.prefect.io/) or the [Prefect Slack community](https://prefect.io/slack).Feel free to star or watch [`prefect-databricks`](https://github.com/PrefectHQ/prefect-databricks) for updates too!## ContributingIf you'd like to help contribute to fix an issue or add a feature to `prefect-databricks`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).Here are the steps:1. [Fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)2. [Clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)3. Install the repository and its dependencies:```pip install -e &quot;.[dev]&quot;```4. Make desired changes5. Add tests6. Insert an entry to [CHANGELOG.md](https://github.com/PrefectHQ/prefect-databricks/blob/main/CHANGELOG.md)7. Install `pre-commit` to perform quality checks prior to commit:```pre-commit install```8. `git commit`, `git push`, and create a pull request</longdescription>
</pkgmetadata>