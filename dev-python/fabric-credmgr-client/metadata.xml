<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI](https://img.shields.io/pypi/v/fabric_credmgr_client?style=plastic)](https://pypi.org/project/fabric_credmgr_client/)# Fabric Credential Manager ClientThis is Fabric Credential Manager APIThis Python package is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:- API version: 1.0.1- Package version: 1.0.0- Build package: io.swagger.codegen.v3.generators.python.PythonClientCodegen## Requirements.Python 3.9+## Installation &amp; Usage### pip installIf the python package is hosted on Github, you can install directly from Github```shpip install git+https://github.com/fabric-testbed/fabric_credmgr.git```(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/fabric-testbed/fabric_credmgr.git`)Then import the package:```pythonimport fabric_cm.credmgr.credmgr_proxy ```### SetuptoolsInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).```shpython setup.py install --user```(or `sudo python setup.py install` to install the package for all users)Then import the package:```pythonfrom fabric_cm.credmgr.credmgr_proxy import CredmgrProxy```## Getting StartedPlease follow the [installation procedure](#installation--usage) and then run the following:```pythonfrom fabric_cm.credmgr.credmgr_proxy import CredmgrProxyfrom fabric_cm.credmgr.swagger_client.rest import ApiExceptioncredmgr_proxy = CredmgrProxy(credmgr_host=&quot;https://dev-2.fabric-testbed.net/&quot;)try:    version = credmgr_proxy.version_get()    print(version)except ApiException as e:    print(&quot;Exception when calling CredmgrProxy-&gt;version_get: %s\n&quot; % e)try:    version = credmgr_proxy.certs_get()    print(version)except ApiException as e:    print(&quot;Exception when calling CredmgrProxy-&gt;certs_get: %s\n&quot; % e)try:    version = credmgr_proxy.refresh(project_id='12345', scope='all', refresh_token='TOKEN')    print(version)except ApiException as e:    print(&quot;Exception when calling CredmgrProxy-&gt;refresh: %s\n&quot; % e)try:    version = credmgr_proxy.revoke(refresh_token='TOKEN')    print(version)except ApiException as e:    print(&quot;Exception when calling CredmgrProxy-&gt;revoke: %s\n&quot; % e)```## Documentation for API EndpointsAll URIs are relative to *http://127.0.0.1:7000/*Class | Method | HTTP request | Description------------ | ------------- | ------------- | -------------*DefaultApi* | [**certs_get**](docs/DefaultApi.md#certs_get) | **GET** /certs | Return Public Keys to verify signature of the tokens*TokensApi* | [**tokens_create_post**](docs/TokensApi.md#tokens_create_post) | **POST** /tokens/create | Generate tokens for an user*TokensApi* | [**tokens_refresh_post**](docs/TokensApi.md#tokens_refresh_post) | **POST** /tokens/refresh | Refresh tokens for an user*TokensApi* | [**tokens_revoke_post**](docs/TokensApi.md#tokens_revoke_post) | **POST** /tokens/revoke | Revoke a refresh token for an user*VersionApi* | [**version_get**](docs/VersionApi.md#version_get) | **GET** /version | Version## Documentation For Models - [Jwks](docs/Jwks.md) - [JwksKeys](docs/JwksKeys.md) - [Request](docs/Request.md) - [Status200OkNoContent](docs/Status200OkNoContent.md) - [Status200OkNoContentData](docs/Status200OkNoContentData.md) - [Status200OkSingle](docs/Status200OkSingle.md) - [Status400BadRequest](docs/Status400BadRequest.md) - [Status400BadRequestErrors](docs/Status400BadRequestErrors.md) - [Status401Unauthorized](docs/Status401Unauthorized.md) - [Status401UnauthorizedErrors](docs/Status401UnauthorizedErrors.md) - [Status403Forbidden](docs/Status403Forbidden.md) - [Status403ForbiddenErrors](docs/Status403ForbiddenErrors.md) - [Status404NotFound](docs/Status404NotFound.md) - [Status404NotFoundErrors](docs/Status404NotFoundErrors.md) - [Status500InternalServerError](docs/Status500InternalServerError.md) - [Status500InternalServerErrorErrors](docs/Status500InternalServerErrorErrors.md) - [Token](docs/Token.md) - [Tokens](docs/Tokens.md) - [Version](docs/Version.md) - [VersionData](docs/VersionData.md)## Documentation For Authorization All endpoints do not require authorization.## Authorkthare10@unc.edu</longdescription>
</pkgmetadata>