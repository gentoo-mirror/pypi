<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Local Emulator for Google Cloud Storage[![CI](https://github.com/oittaa/gcp-storage-emulator/actions/workflows/main.yml/badge.svg)](https://github.com/oittaa/gcp-storage-emulator/actions/workflows/main.yml)[![PyPI](https://img.shields.io/pypi/v/gcp-storage-emulator.svg)](https://pypi.org/project/gcp-storage-emulator/)[![codecov](https://codecov.io/gh/oittaa/gcp-storage-emulator/branch/main/graph/badge.svg?token=GpiSgoXsGL)](https://codecov.io/gh/oittaa/gcp-storage-emulator)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)Google doesn't (yet) ship an emulator for the Cloud Storage API like they do forCloud Datastore.This is a stub emulator so you can run your tests and do local development withouthaving to connect to the production Storage APIs.**THIS IS A WORK IN PROGRESS AND ONLY SUPPORTS A LIMITED SUBSET OF THE API**---## Installation`pip install gcp-storage-emulator`## CLI Usage### Starting the emulatorStart the emulator with:```bashgcp-storage-emulator start```By default, the server will listen on `http://localhost:9023` and data is stored under `./.cloudstorage`. You can configure the folder using the env variables `STORAGE_BASE` (default `./`) and `STORAGE_DIR` (default `.cloudstorage`).If you wish to run the emulator in a testing environment or if you don't want to persist any data, you can use the `--in-memory` parameter. For tests, you might want to consider starting up the server from your code (see the [Python APIs](#python-apis))If you're using the Google client library (e.g. `google-cloud-storage` for Python) then you can set the `STORAGE_EMULATOR_HOST` environment variable to tell the library to connect to your emulator endpoint rather than the standard `https://storage.googleapis.com`, e.g.:```bashexport STORAGE_EMULATOR_HOST=http://localhost:9023```### Wiping dataYou can wipe the data by running```bashgcp-storage-emulator wipe```You can pass `--keep-buckets` to wipe the data while keeping the buckets.#### ExampleUse in-memory storage and automatically create default storage bucket `my-bucket`.```bashgcp-storage-emulator start --host=localhost --port=9023 --in-memory --default-bucket=my-bucket```## Python APIsTo start a server from your code you can do```pythonfrom gcp_storage_emulator.server import create_serverserver = create_server(&quot;localhost&quot;, 9023, in_memory=False)server.start()# ........server.stop()```You can wipe the data by calling `server.wipe()`This can also be achieved (e.g. during tests) by hitting the `/wipe` HTTP endpoint#### Example```pythonimport osfrom google.cloud import storagefrom gcp_storage_emulator.server import create_serverHOST = &quot;localhost&quot;PORT = 9023BUCKET = &quot;test-bucket&quot;# default_bucket parameter creates the bucket automaticallyserver = create_server(HOST, PORT, in_memory=True, default_bucket=BUCKET)server.start()os.environ[&quot;STORAGE_EMULATOR_HOST&quot;] = f&quot;http://{HOST}:{PORT}&quot;client = storage.Client()bucket = client.bucket(BUCKET)blob = bucket.blob(&quot;blob1&quot;)blob.upload_from_string(&quot;test1&quot;)blob = bucket.blob(&quot;blob2&quot;)blob.upload_from_string(&quot;test2&quot;)for blob in bucket.list_blobs():    content = blob.download_as_bytes()    print(f&quot;Blob [{blob.name}]: {content}&quot;)server.stop()```## DockerPull the Docker image.```bashdocker pull oittaa/gcp-storage-emulator```Inside the container instance, the value of the `PORT` environment variable always reflects the port to which requests are sent. It defaults to `8080`. The directory used for the emulated storage is located under `/storage` in the container. In the following example the host's directory `$(pwd)/cloudstorage` will be bound to the emulated storage.```bashdocker run -d \  -e PORT=9023 \  -p 9023:9023 \  --name gcp-storage-emulator \  -v &quot;$(pwd)/cloudstorage&quot;:/storage \  oittaa/gcp-storage-emulator``````pythonimport osfrom google.cloud import exceptions, storageHOST = &quot;localhost&quot;PORT = 9023BUCKET = &quot;test-bucket&quot;os.environ[&quot;STORAGE_EMULATOR_HOST&quot;] = f&quot;http://{HOST}:{PORT}&quot;client = storage.Client()try:    bucket = client.create_bucket(BUCKET)except exceptions.Conflict:    bucket = client.bucket(BUCKET)blob = bucket.blob(&quot;blob1&quot;)blob.upload_from_string(&quot;test1&quot;)print(blob.download_as_bytes())```</longdescription>
</pkgmetadata>