<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Next-action[![PyPI](https://img.shields.io/pypi/v/next-action.svg)](https://pypi.org/project/next-action/)[![Updates](https://pyup.io/repos/github/fniessink/next-action/shield.svg)](https://pyup.io/repos/github/fniessink/next-action/)[![Build Status](https://travis-ci.com/fniessink/next-action.svg?branch=master)](https://travis-ci.com/fniessink/next-action)[![SonarQube Badge](https://sonarcloud.io/api/project_badges/measure?project=fniessink%3Anext-action&amp;metric=alert_status)](https://sonarcloud.io/dashboard?id=fniessink%3Anext-action)Determine the next action to work on from a list of actions in a todo.txt file.Don't know what *Todo.txt* is? See &lt;https://github.com/todotxt/todo.txt&gt; for the *Todo.txt* specification.*Next-action* is not a tool for editing todo.txt files, see &lt;http://todotxt.org&gt; for available options.## Table of contents- [Demo](#demo)- [Installation](#installation)  - [*Next-action*](#next-action)  - [Tab completion for *Next-action*](#tab-completion-for-next-action)- [Usage](#usage)  - [Limiting the tasks from which next actions are selected](#limiting-the-tasks-from-which-next-actions-are-selected)  - [Showing more than one next action](#showing-more-than-one-next-action)  - [Task dependencies](#task-dependencies)  - [Output options](#output-options)  - [Configuring *Next-action*](#configuring-next-action)  - [Option details](#option-details)- [Recent changes](#recent-changes)- [Developing *Next-action*](#developing-next-action)  - [Installing the development environment and dependencies](#installing-the-development-environment-and-dependencies)  - [Running unit tests](#running-unit-tests)  - [Running feature tests](#running-feature-tests)  - [Running quality checks](#running-quality-checks)  - [Generating documentation](#generating-documentation)  - [Source code structure and dependencies](#source-code-structure-and-dependencies)## Demo![gif](https://raw.githubusercontent.com/fniessink/next-action/master/docs/demo.gif)## Installation### *Next-action**Next-action* requires Python 3.6 or newer.`pip install --upgrade next-action`### Tab completion for *Next-action*To install tab completion for *Next-action* in the Bash shell, follow these steps:- Download [extra/.next-action-completion.bash](https://raw.githubusercontent.com/fniessink/next-action/master/extra/.next-action-completion.bash)  and save it in your home folder.- Next, add this line to your `~/.bash_profile` file:  ```bash  source ~/.next-action-completion.bash  ```- Then, open a new terminal.Typing `next-action [TAB]` should give you the possible command line options. Hitting tab after an option that takesarguments, shows the possible arguments.## Usage```console$ next-action --helpUsage: next-action [-h] [-V] [-c [&lt;config.cfg&gt;] | -w] [-f &lt;todo.txt&gt; ...] [-b] [-g [&lt;group&gt;]] [-l] [-r &lt;ref&gt;][-s [&lt;style&gt;]] [-a | -n &lt;number&gt;] [-d [&lt;due date&gt;] | -o] [-p [&lt;priority&gt;]] [-u] [--] [&lt;context|project&gt;...]Show the next action in your todo.txt. The next action is selected from the tasks in the todo.txt file basedon task properties such as priority, due date, and creation date. Limit the tasks from which the next actionis selected by specifying contexts the tasks must have and/or projects the tasks must belong to.Optional arguments:  -h, --help            show this help message and exit  -V, --version         show program's version number and exitConfiguration options:  -c [&lt;config.cfg&gt;], --config-file [&lt;config.cfg&gt;]                        filename of configuration file to read (default: ~/.next-action.cfg); omit filename                        to not read any configuration file  -w, --write-config-file                        generate a sample configuration file and exitInput options:  -f &lt;todo.txt&gt;, --file &lt;todo.txt&gt;                        filename of todo.txt file to read; can be '-' to read from standard input; argument                        can be repeated to read tasks from multiple todo.txt files (default: ~/todo.txt)Output options:  -b, --blocked         show the tasks blocked by the next action, if any (default: False)  -g [&lt;group&gt;], --groupby [&lt;group&gt;]                        group the next actions; available groups: context, duedate, priority, project,                        source (default: None)  -l, --line-number     reference next actions with the line number in their todo.txt file (default: False)  -r {always,never,multiple}, --reference {always,never,multiple}                        reference next actions with the name of their todo.txt file (default: when reading                        multiple todo.txt files)  -s [&lt;style&gt;], --style [&lt;style&gt;]                        colorize the output; available styles: abap, algol, algol_nu, arduino, autumn,                        borland, bw, colorful, default, emacs, friendly, fruity, igor, lovelace, manni,                        monokai, murphy, native, paraiso-dark, paraiso-light, pastie, perldoc, rainbow_dash,                        rrt, sas, solarized-dark, solarized-light, stata, stata-dark, stata-light, tango,                        trac, vim, vs, xcode (default: None)  -u, --open-urls       open the urls in the next actions, if any (default: False)Show multiple next actions:  -a, --all             show all next actions  -n &lt;number&gt;, --number &lt;number&gt;                        number of next actions to show (default: 1)Limit the tasks from which the next actions are selected:  -d [&lt;due date&gt;], --due [&lt;due date&gt;]                        show only next actions with a due date; if a date is given, show only next actions                        due on or before that date  -o, --overdue         show only overdue next actions  -p [&lt;priority&gt;], --priority [&lt;priority&gt;]                        minimum priority (A-Z) of next actions to show (default: None)  @&lt;context&gt; ...        contexts the next action must have  +&lt;project&gt; ...        projects the next action must be part of; if repeated the next action must be part                        of at least one of the projects  -@&lt;context&gt; ...       contexts the next action must not have  -+&lt;project&gt; ...       projects the next action must not be part ofUse -- to separate options with optional arguments from contexts and projects, in order to handle caseswhere a context or project is mistaken for an argument to an option.```Assuming your todo.txt file is in your home folder, running *Next-action* without arguments will show the next actionyou should do. For example, given this[todo.txt](https://raw.githubusercontent.com/fniessink/next-action/master/docs/todo.txt), calling mom would be the nextaction:```console$ next-action(A) Call mom @phone```The next action is determined using priority. Due date is considered after priority, with tasks due earlier gettingprecedence over tasks due later. Creation date is considered after due date, with older tasks getting precedence overnewer tasks. Finally, tasks that belong to more projects get precedence over tasks that belong to fewer projects.Several types of tasks can not be a next action:- completed tasks (~~`x This is a completed task`~~),- tasks with a creation date in the future (`9999-01-01 Start preparing for five-digit years`),- tasks with a future threshold date (`Start preparing for emigration to Mars t:3000-01-01`),- blocked tasks (see [task dependencies](#task-dependencies) below), and- hidden tasks (`This is a hidden task h:1`).### Limiting the tasks from which next actions are selected#### By contexts and/or projectsYou can limit the tasks from which *Next-action* picks the next action by passing contexts and/or projects:```console$ next-action @work(C) Finish proposal for important client @work$ next-action +DogHouse(G) Buy wood for new +DogHouse @store$ next-action +DogHouse @homeGet rid of old +DogHouse @home```When you supply multiple contexts and/or projects, the next action belongs to all of the contexts and at least one ofthe projects:```console$ next-action +DogHouse +PaintHouse @store @weekend(B) Buy paint to +PaintHouse @store @weekend```It is also possible to exclude contexts, which means the next action will not have the specified contexts:```console$ next-action +PaintHouse -@storeBorrow ladder from the neighbors +PaintHouse @home```And of course, in a similar vein, projects can be excluded:```console$ next-action -+PaintHouse @store(G) Buy wood for new +DogHouse @store```If no tasks match the combination of tasks and projects, it's time to get some coffee:```console$ next-action +DogHouse @weekendNothing to do! ðŸ˜´```If there's nothing to do because you use contexts or projects that aren't present in the todo.txt file, *Next-action*will warn you:```console$ next-action +PaintGarage @freetimeNothing to do! (warning: unknown context: freetime; unknown project: PaintGarage)```#### By due dateTo limit the the tasks from which the next action is selected to actions with a due date, use the `--due` option:```console$ next-action @home --due(K) Pay October invoice @home due:2020-10-28```Add a due date to select a next action from tasks due on or before that date:```console$ next-action @home --due &quot;2020-10-01&quot;(L) Pay September invoice @home due:2020-09-28```To make sure you have no overdue actions, or work on overdue actions first, limit the tasks from which the next actionis selected to overdue actions:```console$ next-action --overdueBuy flowers due:2018-02-14```#### By priorityTo make sure you work on important tasks rather than urgent tasks, you can make sure the tasks from which thenext action is selected have at least a minimum priority:```console$ next-action @work --priority C(C) Finish proposal for important client @work```### Showing more than one next actionTo show more than one next action, supply the number you think you can handle:```console$ next-action --number 3(A) Call mom @phone(B) Buy paint to +PaintHouse @store @weekend(C) Finish proposal for important client @work```Or show all next actions, e.g. for a specific context:```console$ next-action --all @store(B) Buy paint to +PaintHouse @store @weekend(G) Buy wood for new +DogHouse @storeBuy groceries @store +DinnerParty before:meal```Note again that completed tasks, tasks with a future creation or threshold date, and blocked tasks are never the nextaction.### Task dependencies*Next-action* takes task dependencies into account when determining the next actions. For example, that cooking a mealdepends on buying groceries and that doing the dishes comes after cooking the meal can be specified as follows:```console$ grep +DinnerParty docs/todo.txtBuy groceries @store +DinnerParty before:mealCook meal @home +DinnerParty id:meal due:2018-07-01Take out the garbage @home +DinnerParty due:2018-07-02Do the dishes @home +DinnerParty after:meal```This means that buying groceries blocks cooking the meal; cooking, and thus doing the dishes as well, can't be doneuntil buying the groceries has been completed:```console$ next-action --all +DinnerPartyBuy groceries @store +DinnerParty before:mealTake out the garbage @home +DinnerParty due:2018-07-02```Note how buying the groceries comes before taking out the garbage even though buying the groceries has no due date andtaking out the garbage does. As buying groceries has to be done before cooking the meal and cooking the meal does havea due date, buying groceries takes on the same due date as cooking the meal. Priority is taken into account in asimilar way.To show which tasks are blocked by the next action, use the `--blocked` option:```console$ next-action --blocked --all +DinnerPartyBuy groceries @store +DinnerParty before:mealblocks:- Cook meal @home +DinnerParty id:meal due:2018-07-01  blocks:  - Do the dishes @home +DinnerParty after:mealTake out the garbage @home +DinnerParty due:2018-07-02```If you always want to see the tasks that are blocked by the next action, you can configure this in the configurationfile. See the section below on how to configure *Next-action*.Additional notes:- The ids can be any string without whitespace.- Instead of `before` you can also use `p` (for &quot;parent&quot;) because some other tools that work with *Todo.txt* files  use that.- A task can block multiple other tasks by repeating the before key,  e.g. `Buy groceries before:cooking and before:sending_invites`.- A task can be blocked by multiple other tasks by repeating the after key,  e.g. `Eat meal after:cooking and after:setting_the_table`.- If a task blocks one or more tasks, the blocking task takes on the priority and due date of the tasks it is blocking:  - the blocking task is considered to have a priority that is the maximum of its own priority and the priorities of    the tasks it is blocking, and  - the blocking task is considered to have a due date that is the minimum of its own due date and the due dates of    the tasks it is blocking.### Output optionsBy default, *Next-action* references the todo.txt file from which actions were read if you read tasks from multipletodo.txt files. The `--reference` option controls this:```console$ next-action --reference always(A) Call mom @phone [docs/todo.txt]```Use `--reference never` to not show the source files, even when tasks are read from multiple todo.txt files. Topermanently change this, configure the `reference` option in the configuration file. See the section below on how toconfigure *Next-action*.To make *Next-action* reference the line number that tasks have in their source todo.txt files, use the `--line-number`option:```console$ next-action --line-number(A) Call mom @phone [1]```It's also possible to have *Next-action* show both the source file and the line number:```console$ next-action --line-number --reference always(A) Call mom @phone [docs/todo.txt:1]```See the section below on how to configure *Next-action* to always show the source file and/or line number.The next actions can be colorized using the `--style` argument. Run `next-action --help` to see the list of possiblestyles.When you've decided on a style you prefer, it makes sense to configure the style in the configuration file. See thesection below on how to configure *Next-action*.Not passing an argument to `--style` cancels the style that is configured in the configuration file, if any.When showing multiple next actions, these can be grouped by passing the `--groupby` option:```console$ next-action --number 5 --groupby contextphone:- (A) Call mom @phonestore:- (B) Buy paint to +PaintHouse @store @weekend- (G) Buy wood for new +DogHouse @storeweekend:- (B) Buy paint to +PaintHouse @store @weekendwork:- (C) Finish proposal for important client @workhome:- (K) Pay October invoice @home due:2020-10-28```*Next-action* sorts the groups according to the most important next action in the group. Actions may be repeatedif they belong to multiple groups, as is the case with the `Buy paint` task above.If you always want to group next actions, you can configure this in the configuration file. See the sectionbelow on how to configure *Next-action*.To open URLs in the description of the next actions, use the `--open-urls` command line option.### Configuring *Next-action*In addition to specifying options on the command-line, you can also configure options in a configuration file. Theconfiguration file format is [YAML](http://yaml.org). The options currently supported are which todo.txt files must beread, how many next actions should be shown, output styling, and context and/or project filters.#### Writing the configuration fileTo get started, you can tell *Next-action* to generate a configuration file with the default options:```console$ next-action --write-config-file# Configuration file for Next-action. Edit the settings below as you like.file: ~/todo.txtnumber: 1reference: multiplestyle: default```To make this the configuration that *Next-action* reads by default, redirect the output to `~/.next-action.cfg` likethis: `next-action --write-config-file &gt; ~/.next-action.cfg`.Any additional options specified on the command line are used to generate the configuration file:```console$ next-action --write-config-file --blocked --groupby context --number 3 --file ~/tasks.txt --style fruity --priority Z -@waiting# Configuration file for Next-action. Edit the settings below as you like.blocked: truefile: ~/tasks.txtfilters:- -@waitinggroupby: contextnumber: 3priority: Zreference: multiplestyle: fruity```#### Reading the configuration fileBy default, *Next-action* tries to read a file called[.next-action.cfg](https://raw.githubusercontent.com/fniessink/next-action/master/docs/.next-action.cfg) in your homefolder.If you want to use a configuration file that is not in the default location (`~/.next-action.cfg`), you'll need toexplicitly specify its location:```console$ next-action --config-file docs/.next-action.cfg(A) Call mom @phone```To skip reading the default configuration file, and also not read an alternative configuration file, use the`--config-file` option without arguments.#### Configuring a default todo.txtA default todo.txt file to use can be specified like this in the configuration file:```yamlfile: ~/Dropbox/todo.txt```Multiple todo.txt files can be listed, if needed:```yamlfile:  - personal-todo.txt  - work-todo.txt  - big-project/tasks.txt```#### Configuring the number of next actions to showThe number of next actions to show can be specified like this:```yamlnumber: 3```Or you can have *Next-action* show all next actions:```yamlall: True```#### Configuring the tasks from which next actions are selected##### Limiting by contexts and/or projectsYou can limit the tasks from which the next action is selected by specifying contexts and/or projects to filter on,just like you would do on the command line:```yamlfilters: -+FutureProject @work -@waiting```This would make *Next-action* by default select next actions from tasks with a `@work` context and without the`@waiting` context and not belonging to the `+FutureProject`.An alternative syntax is:```yamlfilters:  - -+FutureProject  - '@work'  - -@waiting```Note that filters starting with `@` need to be in quotes. This is a[YAML restriction](http://yaml.org/spec/1.1/current.html#c-directive).##### Limiting by priorityThe minimum priority of next actions to show can be specified as well:```yamlpriority: Z```This could be useful if you, for example, keep a backlog of ideas without priority in your todo.txt file andprioritize only the tasks that are actionable.Specifying a value on the command line overrides the priority in the configuration file, e.g.`next-action --priority C`. To override the priority set in the configuration but not set another minimum priority,use the priority option without argument: `next-action --priority`.#### Configuring the outputWhether the next actions should have a reference to the todo.txt file from which they were read can be configured usingthe `reference` keyword:```yamlreference: always```Possible values are `always`, `never`, or `multiple`. The latter means that the filename is only added when you readtasks from multiple todo.txt files. The default value is `multiple`.Whether the next actions should have a reference to their line number in the todo.txt file from which they were readcan be configured using the `line_number` keyword:```yamlline_number: true```The output style can be configured using the `style` keyword:```yamlstyle: colorful```Run `next-action --help` to see the list of possible styles.To always see the tasks blocked by the next action, put this in your configuration file:```yamlblocked: true```Next actions can be configured to be grouped as follows:```yamlgroupby: priority```Possible grouping options are by `context`, `duedate`, `priority`, `project`, and `source`. Specifying a value onthe command line overrides the grouping in the configuration file, e.g. `next-action --groupby project`.To cancel the grouping set in the configuration file all together, use the groupby option without argument:`next-action --groupby`.To always open URLs, use the `open_urls` option:```yamlopen_urls: true```### Option details#### PrecedenceOptions in the configuration file override the default options. Command-line options in turn override options in theconfiguration file.If you have a configuration file with default options that you occasionally want to ignore, you can skip reading theconfiguration file entirely with the `--no-config-file` option.#### Optional arguments followed by positional argumentsWhen you use an option that takes an optional argument, but have it followed by a positional argument, *Next-action*will interpret the positional argument as the argument to the option and complain, e.g.:```console$ next-action --due @homeUsage: next-action [-h] [-V] [-c [&lt;config.cfg&gt;] | -w] [-f &lt;todo.txt&gt; ...] [-b] [-g [&lt;group&gt;]] [-l] [-r &lt;ref&gt;][-s [&lt;style&gt;]] [-a | -n &lt;number&gt;] [-d [&lt;due date&gt;] | -o] [-p [&lt;priority&gt;]] [-u] [--] [&lt;context|project&gt;...]next-action: error: argument -d/--due: invalid date: @home```There's two ways to help *Next-action* figure out what you mean. Either reverse the order of the arguments:```console$ next-action @home --due(K) Pay October invoice @home due:2020-10-28```Or use `--` to separate the option from the positional argument(s):```console$ next-action --due -- @home(K) Pay October invoice @home due:2020-10-28```## Recent changesSee the [change log](https://github.com/fniessink/next-action/blob/master/CHANGELOG.md).## Developing *Next-action*### Installing the development environment and dependenciesWe use Docker as development environment. To build the Docker image with all the development dependencies make sureyou have Git and Docker installed. Then, follow these steps:- Clone the repository: `git clone https://github.com/fniessink/next-action.git`.- Enter the folder: `cd next-action`.- Build the Docker image: `docker build . -t next-action-dev`.The `docker-compose.yml` contains services for each of the development tools. These are described below.### Running unit testsTo run the unit tests and check their code coverage:```console$ docker-compose --no-ansi up unittestRecreating next-action_unittest_1 ...Recreating next-action_unittest_1 ... doneAttaching to next-action_unittest_1unittest_1                | ----------------------------------------------------------------------unittest_1                | Ran 271 tests in 6.171sunittest_1                |unittest_1                | OKunittest_1                | Name    Stmts   Miss Branch BrPart  Coverunittest_1                | -----------------------------------------unittest_1                | -----------------------------------------unittest_1                | TOTAL    1625      0    248      0   100%unittest_1                |unittest_1                | 31 files skipped due to complete coverage.next-action_unittest_1 exited with code 0```The HTML coverage report is written to `build/unittest-coverage/`.### Running feature testsTo run the feature tests and measure their code coverage:```console$ docker-compose --no-ansi up behaveRecreating next-action_behave_1 ...Recreating next-action_behave_1 ... doneAttaching to next-action_behave_1behave_1                  | 17 features passed, 0 failed, 0 skippedbehave_1                  | 123 scenarios passed, 0 failed, 0 skippedbehave_1                  | 411 steps passed, 0 failed, 0 skipped, 0 undefinedbehave_1                  | Took 4m15.737sbehave_1                  | Name    Stmts   Miss Branch BrPart  Coverbehave_1                  | -----------------------------------------behave_1                  | -----------------------------------------behave_1                  | TOTAL     509      0    228      0   100%behave_1                  |behave_1                  | 13 files skipped due to complete coverage.next-action_behave_1 exited with code 0```The HTML coverage report is written to `build/feature-coverage/`.### Running quality checksThe tools Mypy, Pylint, Pycodestyle, Pydocstyle, Bandit, Pyroma, and Vulture are used to check for quality issues inthe Python code. Shellcheck is used evaluate the Bash code. Gherkin feature files are checked with Gherkin-lint.The Markdown files are evaluated with Markdownlint. The Dockerfile is checked with Hadolint. The docker-compose.yml ischecked with Docker-compose.To run the quality checks:```console$ docker-compose --no-ansi up qualityRecreating next-action_quality_1 ...Recreating next-action_quality_1 ... doneAttaching to next-action_quality_1quality_1                 | Generated HTML report (via XSLT): /Users/fniessink/workspace/next-action/build/mypy/index.htmlquality_1                 | Success: no issues found in 13 source filesquality_1                 |quality_1                 | ------------------------------------quality_1                 | Your code has been rated at 10.00/10quality_1                 |quality_1                 | ------------------------------quality_1                 | Checking .quality_1                 | Found next-actionquality_1                 | ------------------------------quality_1                 | Final rating: 10/10quality_1                 | Your cheese is so fresh most people think it's a cream: Mascarponequality_1                 | ------------------------------next-action_quality_1 exited with code 0```### Generating documentationThis `README.md` file is generated with `docker-compose up docs`.The dependency graph below is created with Pydeps and the package and class diagrams below are created withPyreverse (part of Pylint).### Source code structure and dependenciesThe dependency graph shows the relationships between the packages and modules in the code base and the third-partypackages used. When the user imvokes *Next-action* from the command-line, the `next_action()` method in the`next_action` package is run. The `next_action()` method uses the `next_action.arguments` package to parse thecommand-line arguments and the configuration file. The *Todo.txt* file is read into a domain model using the`next_action.todotxt` package. The `next_action.pick_action` module contains the logic to select the next action.Finally, the output is formatted using the `next_action.output` package.![png](https://raw.githubusercontent.com/fniessink/next-action/master/docs/dependencies.png)The package diagram created by Pyreverse looks quite similar.![png](https://raw.githubusercontent.com/fniessink/next-action/master/docs/packages.png)The class diagram created by Pyreverse shows the classes used. The biggest one is the `NextActionArgumentParser` class,responsible for parsing the command-line arguments. The other two relevant classes are the `Task` class for holdinginformation about an individual task and the `Tasks` class that contains a collection of tasks.![png](https://raw.githubusercontent.com/fniessink/next-action/master/docs/classes.png)</longdescription>
</pkgmetadata>