<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription> &lt;a id=&quot;top&quot;&gt;&lt;/a&gt; &lt;p align=&quot;center&quot;&gt;     &lt;img src=&quot;https://raw.githubusercontent.com/spec-first/connexion/main/docs/images/logo_banner.svg&quot; width=&quot;100%&quot;/&gt; &lt;/p&gt; &lt;p align=&quot;center&quot;&gt;     &lt;a href=&quot;https://pypi.org/project/connexion&quot;&gt;&lt;img alt=&quot;coveralls&quot; src=&quot;https://img.shields.io/pypi/status/connexion.svg?style=flat-square&amp;color=brightgreen&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://pypi.org/project/connexion&quot;&gt;&lt;img alt=&quot;PyPI version&quot; src=&quot;https://img.shields.io/pypi/v/connexion?color=brightgreen&amp;style=flat-square&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://github.com/spec-first/connexion/blob/main/LICENSE&quot;&gt;&lt;img alt=&quot;License&quot; src=&quot;https://img.shields.io/pypi/l/connexion?style=flat-square&amp;color=brightgreen&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://github.com/spec-first/connexion/actions/workflows/pipeline.yml&quot;&gt;&lt;img alt=&quot;GitHub Workflow Status&quot; src=&quot;https://img.shields.io/github/actions/workflow/status/spec-first/connexion/pipeline.yml?style=flat-square&quot;&gt;&lt;/a&gt;     &lt;a href=&quot;https://coveralls.io/github/spec-first/connexion?branch=main&quot;&gt;&lt;img alt=&quot;Coveralls&quot; src=&quot;https://img.shields.io/coverallsCoverage/github/spec-first/connexion?style=flat-square&quot;&gt;&lt;/a&gt;     &lt;br&gt;     &lt;br&gt;     &lt;a href=&quot;https://connexion.readthedocs.io/en/stable/&quot;&gt;&lt;strong&gt;Explore the docs ¬ª&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;---Connexion is a modern Python web framework that makes spec-first and api-first development easy.You describe your API in an [OpenAPI][OpenAPI] (or [Swagger][Swagger]) specification with as much detail as you want and Connexion will guarantee that it works as you specified.It works either standalone, or in combination with any ASGI or WSGI-compatible framework!&lt;p align=&quot;center&quot;&gt;   &lt;br&gt;   &lt;a href=&quot;https://connexion.readthedocs.io/en/latest/v3.html&quot;&gt;&lt;strong&gt;üì¢ Connexion 3 was recently released! Read about the changes here ¬ª&lt;/strong&gt;&lt;/a&gt;   &lt;br&gt;   &lt;br&gt;&lt;/p&gt;## ‚ú® FeaturesConnexion provides the following functionality **based on your specification**:- üöè **Automatic route registration**, no ``@route`` decorators needed- üîí **Authentication**, split from your application logic- üîé **Request and response validation** of headers, parameters, and body- üì¨ **Parameter parsing and injection**, no request object needed- üì® **Response serialization**, you can return regular Python objects- üì∫ **A Swagger UI console** with live documentation and ‚Äòtry it out‚Äô feature- üß© **Pluggability**, in all dimensionsConnexion also **helps you write your OpenAPI specification** and develop against it by providing a command line interface which lets you test and mock your specification.```shell   connexion run openapi.yaml``` &lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## ü™§ Why ConnexionWith Connexion, you write the spec first. Connexion then calls your Pythoncode, handling the mapping from the specification to the code. Thisincentivizes you to write the specification so that all of yourdevelopers can understand what your API does, even before you write asingle line of code.If multiple teams depend on your APIs, you can use Connexion to easilysend them the documentation of your API. This guarantees that your API willfollow the specification that you wrote. This is a different process fromthe one offered by most frameworks, which generate a specification*after* you've written the code.Some disadvantages of generating specifications based on code is thatthey often end up lacking details or mix your documentation with the implementationlogic of your application.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## ‚öíÔ∏è How to Use### InstallationYou can install connexion using pip:```shell    $ pip install connexion```Connexion provides 'extras' with optional dependencies to unlock additional features:- `swagger-ui`: Enables a Swagger UI console for your application.- `uvicorn`: Enables to run the your application using `app.run()` for  development instead of using an external ASGI server.- `flask`: Enables the `FlaskApp` to build applications compatible with the Flask  ecosystem.You can install them as follows:```shell    $ pip install connexion[swagger-ui]    $ pip install connexion[swagger-ui,uvicorn].```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;### Creating your applicationConnexion can be used either as a standalone application or as a middleware wrapping an existingASGI (or WSGI) application written using a different framework. The standalone application can bebuilt using either the `AsyncApp` or `FlaskApp`.- The `AsyncApp` is a lightweight application with native asynchronous support. Use it if you  are starting a new project and have no specific reason to use one of the other options.  ```Python      from connexion import AsyncApp      app = AsyncApp(__name__)  ```- The `FlaskApp` leverages the `Flask` framework, which is useful if you're migrating from  connexion 2.X or you want to leverage the `Flask` ecosystem.  ```python      from connexion import FlaskApp      app = FlaskApp(__name__)  ```- The `ConnexionMiddleware` can be wrapped around any existing ASGI or WSGI application.  Use it if you already have an application written in a different framework and want to add  functionality provided by connexion  ```python      from asgi_framework import App      from connexion import ConnexionMiddleware      app = App(__name__)      app = ConnexionMiddleware(app)  ```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;### Registering an APIWhile you can register individual routes on your application, Connexion really shines when youregister an API defined by an OpenAPI (or Swagger) specification.The operation described in your specification is automatically linked to your Python view function via the ``operationId``**run.py**```python   def post_greeting(name: str, greeting: str):  # Paramaeters are automatically unpacked       return f&quot;{greeting} {name}&quot;, 200          # Responses are automatically serialized   app.add_api(&quot;openapi.yaml&quot;)```**openapi.yaml**```yaml   ...   paths:     /greeting/{name}:       post:         operationId: run.post_greeting         responses:           200:             content:               text/plain:                 schema:                   type: string         parameters:           - name: name             in: path             required: true             schema:               type: string           - name: greeting             in: query             required: true             schema:               type: string```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;### Running your applicationIf you installed connexion using `connexion[uvicorn]`, you can run it using the`run` method. This is only recommended for development:```python    app.run()```In production, run your application using an ASGI server such as `uvicorn`. If you defined your`app` in a python module called `run.py`, you can run it as follows:```shell    $ uvicorn run:app```Or with gunicorn:```shell    $ gunicorn -k uvicorn.workers.UvicornWorker run:app```----Now you're able to run and use Connexion!See the [examples][examples] folder for more examples.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## üôè ThanksWe'd like to thank all of Connexion's contributors for working on thisproject, Swagger/OpenAPI for their support, and Zalando for originally developing and releasing Connexion.### Sponsors[![ML6](https://raw.githubusercontent.com/spec-first/connexion/main/docs/images/sponsors/ML6.png)][ML6]Sponsors help us dedicate time to maintain Connexion. Want to help?&lt;a href=&quot;https://github.com/sponsors/spec-first&quot;&gt;&lt;strong&gt;Explore the options ¬ª&lt;/strong&gt;&lt;/a&gt;&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## üìú ChangesA full changelog is maintained on the [GitHub releases page][Releases].&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## ü§≤ ContributingWe welcome your ideas, issues, and pull requests. Just follow theusual/standard GitHub practices.For easy development, install connexion using poetry with all extras, andinstall the pre-commit hooks to automatically run black formatting and static analysis checks.```shell    pip install poetry    poetry install --all-extras    pre-commit install```You can find out more about how Connexion works and where to apply your changes by having a lookat our [architecture][Architecture].Unless you explicitly state otherwise in advance, any non trivialcontribution intentionally submitted for inclusion in this project by youto the steward of this repository shall be under theterms and conditions of Apache License 2.0 written below, without anyadditional copyright information, terms or conditions.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#top&quot;&gt;back to top&lt;/a&gt;)&lt;/p&gt;## üìö Recommended ResourcesAbout the advantages of working spec-first:* [Blog Atlassian][Blog Atlassian]* [API guidelines Zalando][API guidelines Zalando]* [Blog ML6][Blog ML6]* [Blog Zalando][Blog Zalando]Tools to help you work spec-first:* [Online swagger editor][Online swagger editor]* [VS Code plugin][VS Code plugin]* [Pycharm plugin][Pycharm plugin][OpenAPI]: https://openapis.org/[Swagger]: http://swagger.io/open-source-integrations/[Blog atlassian]: https://www.atlassian.com/blog/technology/spec-first-api-development[Blog ML6]: https://blog.ml6.eu/why-we-decided-to-help-maintain-connexion-c9f449877083[Blog Zalando]: https://engineering.zalando.com/posts/2016/12/crafting-effective-microservices-in-python.html[API guidelines Zalando]: https://opensource.zalando.com/restful-api-guidelines/#api-first[Online swagger editor]: https://editor.swagger.io/[VS Code plugin]: https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi[Pycharm plugin]: https://plugins.jetbrains.com/plugin/14837-openapi-swagger-editor[examples]: https://github.com/spec-first/connexion/blob/main/examples[ML6]: https://www.ml6.eu[Releases]: https://github.com/spec-first/connexion/releases[Architecture]: https://github.com/spec-first/connexion/blob/main/docs/images/architecture.png</longdescription>
</pkgmetadata>