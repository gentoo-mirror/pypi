<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Planetary Computer SDK for PythonPython library for interacting with the Microsoft Planetary Computer.For general questions or discussions about the Planetary Computer, use the [microsoft/PlanetaryComputer](http://github.com/microsoft/PlanetaryComputer) repository.## Installation```pythonpip install planetary-computer```If you have an API subscription key, you may provide it to the library by using the included configuration CLI:```bashplanetarycomputer configure```Alternatively, a subscription key may be provided by specifying it in the `PC_SDK_SUBSCRIPTION_KEY` environment variable. A subcription key is not required for interacting with the service, however having one in place allows for less restricted rate limiting.## UsageThis library assists with signing Azure Blob Storage URLs. The `sign` function operates directly on an HREF string, as well as several [PySTAC](https://github.com/stac-utils/pystac) objects: `Asset`, `Item`, and `ItemCollection`. In addition, the `sign` function accepts a [STAC API Client](https://pystac-client.readthedocs.io/en/stable/) `ItemSearch`, which performs a search and returns the resulting `ItemCollection` with all assets signed.### Automatic signingIf you're using pystac-client we recommend you use its feature to [automatically sign results](https://pystac-client.readthedocs.io/en/stable/usage.html#automatically-modifying-results) with ``planetary_computer.sign_inplace``:```pythonimport planetary_computerimport pystac_clientfrom pystac_client import Clientimport planetary_computer, requestsapi = Client.open(   'https://planetarycomputer.microsoft.com/api/stac/v1',   modifier=planetary_computer.sign_inplace,)```Now all the results you get from that client will be signed.### Manual signingAlternatively, you can manually call ``planetary_computer.sign`` on your results.```pythonfrom pystac import Asset, Item, ItemCollectionfrom pystac_client import ItemSearchimport planetary_computer as pc# The sign function may be called directly on the Itemraw_item: Item = ...item: Item = pc.sign(raw_item)# Now use the item however you want. All appropriate assets are signed for read access.# The sign function also works with an Assetraw_asset: Asset = raw_item.assets['SR_B4']asset = pc.sign(raw_asset)# The sign function also works with an HREFraw_href: str = raw_asset.hrefhref = pc.sign(raw_href)# The sign function also works with an ItemCollectionraw_item_collection = ItemCollection([raw_item])item_collection = pc.sign(raw_item_collection)# The sign function also accepts an ItemSearch, and signs the resulting ItemCollectionsearch = ItemSearch(    url=...,    bbox=...,    collections=...,    limit=...,    max_items=...,)signed_item_collection = pc.sign(search)```### Convenience methodsYou'll occasionally need to interact with the Blob Storage container directly, rather thanusing STAC items. We include two convenience methods for this:* `planetary_computer.get_container_client`: Get an [`azure.storage.blob.ContainerClient`](https://learn.microsoft.com/en-us/python/api/azure-storage-blob/azure.storage.blob.containerclient?view=azure-python)* `planetary_computer.get_adlfs_filesystem`: Get an [`adlfs.AzureBlobFilesystem`](https://github.com/fsspec/adlfs)## DevelopmentThe following steps may be followed in order to develop locally:```bash## Create and activate venvpython3 -m venv envsource env/bin/activate## Install requirementspython3 -m pip install -r requirements-dev.txt## Install locallypip install -e .## Format code./scripts/format## Run tests./scripts/test```## ContributingThis project welcomes contributions and suggestions.  Most contributions require you to agree to aContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant usthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.When you submit a pull request, a CLA bot will automatically determine whether you need to providea CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructionsprovided by the bot. You will only need to do this once across all repos using our CLA.This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) orcontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.## TrademarksThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsofttrademarks or logos is subject to and must follow[Microsoft's Trademark &amp; Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.Any use of third-party trademarks or logos are subject to those third-party's policies.</longdescription>
</pkgmetadata>