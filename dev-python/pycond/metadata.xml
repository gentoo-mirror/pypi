<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>---author: gkversion: 20230212---# pycond: Lightweight Declarative Condition Expressions[![Build Status](https://travis-ci.org/axiros/pycond.svg?branch=master)](https://travis-ci.org/axiros/pycond) [![codecov](https://codecov.io/gh/axiros/pycond/branch/master/graph/badge.svg)](https://codecov.io/gh/axiros/pycond)[![PyPI    version][pypisvg]][pypi] [![][blacksvg]][black][blacksvg]: https://img.shields.io/badge/code%20style-black-000000.svg[black]: https://github.com/ambv/black[pypisvg]: https://img.shields.io/pypi/v/pycond.svg[pypi]: https://badge.fury.io/py/pycond&lt;!-- badges: http://thomas-cokelaer.info/blog/2014/08/1013/ --&gt;&lt;!-- TOC --&gt;# Table Of Contents- &lt;a name=&quot;toc1&quot;&gt;&lt;/a&gt;[What](#what)- &lt;a name=&quot;toc2&quot;&gt;&lt;/a&gt;[Why](#why)    - &lt;a name=&quot;toc3&quot;&gt;&lt;/a&gt;[Alternatives](#alternatives)- &lt;a name=&quot;toc4&quot;&gt;&lt;/a&gt;[Mechanics](#mechanics)    - &lt;a name=&quot;toc5&quot;&gt;&lt;/a&gt;[Parsing](#parsing)    - &lt;a name=&quot;toc6&quot;&gt;&lt;/a&gt;[Building](#building)    - &lt;a name=&quot;toc7&quot;&gt;&lt;/a&gt;[Structured Conditions](#structured-conditions)    - &lt;a name=&quot;toc8&quot;&gt;&lt;/a&gt;[Evaluation](#evaluation)    - &lt;a name=&quot;toc9&quot;&gt;&lt;/a&gt;[Default Lookup](#default-lookup)    - &lt;a name=&quot;toc10&quot;&gt;&lt;/a&gt;[Passing State](#passing-state)    - &lt;a name=&quot;toc11&quot;&gt;&lt;/a&gt;[Deep Lookup / Nested State / Lists](#deep-lookup-nested-state-lists)        - &lt;a name=&quot;toc12&quot;&gt;&lt;/a&gt;[Lookup Performance: Prebuilt Deep Getters](#lookup-performance-prebuilt-deep-getters)        - &lt;a name=&quot;toc13&quot;&gt;&lt;/a&gt;[Best Practices](#best-practices)    - &lt;a name=&quot;toc14&quot;&gt;&lt;/a&gt;[Prefixed Data](#prefixed-data)    - &lt;a name=&quot;toc15&quot;&gt;&lt;/a&gt;[Attributes Access](#attributes-access)    - &lt;a name=&quot;toc16&quot;&gt;&lt;/a&gt;[Custom Lookup And Value Passing](#custom-lookup-and-value-passing)    - &lt;a name=&quot;toc17&quot;&gt;&lt;/a&gt;[Lazy Evaluation](#lazy-evaluation)    - &lt;a name=&quot;toc18&quot;&gt;&lt;/a&gt;[Condition Operators (Comparators)](#condition-operators-comparators)        - &lt;a name=&quot;toc19&quot;&gt;&lt;/a&gt;[Using Symbolic Operators](#using-symbolic-operators)        - &lt;a name=&quot;toc20&quot;&gt;&lt;/a&gt;[Extending Condition Operators](#extending-condition-operators)        - &lt;a name=&quot;toc21&quot;&gt;&lt;/a&gt;[Negation `not`](#negation-not)        - &lt;a name=&quot;toc22&quot;&gt;&lt;/a&gt;[Reversal `rev`](#reversal-rev)        - &lt;a name=&quot;toc23&quot;&gt;&lt;/a&gt;[Wrapping Condition Operators](#wrapping-condition-operators)            - &lt;a name=&quot;toc24&quot;&gt;&lt;/a&gt;[Global Wrapping](#global-wrapping)        - &lt;a name=&quot;toc25&quot;&gt;&lt;/a&gt;[Condition Local Wrapping](#condition-local-wrapping)        - &lt;a name=&quot;toc26&quot;&gt;&lt;/a&gt;[Combining Operations](#combining-operations)    - &lt;a name=&quot;toc27&quot;&gt;&lt;/a&gt;[Details](#details)        - &lt;a name=&quot;toc28&quot;&gt;&lt;/a&gt;[Debugging Lookups](#debugging-lookups)        - &lt;a name=&quot;toc29&quot;&gt;&lt;/a&gt;[Enabling/Disabling of Branches](#enabling-disabling-of-branches)        - &lt;a name=&quot;toc30&quot;&gt;&lt;/a&gt;[Building Conditions From Text](#building-conditions-from-text)            - &lt;a name=&quot;toc31&quot;&gt;&lt;/a&gt;[Grammar](#grammar)            - &lt;a name=&quot;toc32&quot;&gt;&lt;/a&gt;[Atomic Conditions](#atomic-conditions)            - &lt;a name=&quot;toc33&quot;&gt;&lt;/a&gt;[Nesting](#nesting)        - &lt;a name=&quot;toc34&quot;&gt;&lt;/a&gt;[Tokenizing Details](#tokenizing-details)            - &lt;a name=&quot;toc35&quot;&gt;&lt;/a&gt;[Functioning](#functioning)            - &lt;a name=&quot;toc36&quot;&gt;&lt;/a&gt;[Separator `sep`](#separator-sep)            - &lt;a name=&quot;toc37&quot;&gt;&lt;/a&gt;[Apostrophes](#apostrophes)            - &lt;a name=&quot;toc38&quot;&gt;&lt;/a&gt;[Escaping](#escaping)        - &lt;a name=&quot;toc39&quot;&gt;&lt;/a&gt;[Building](#building)            - &lt;a name=&quot;toc40&quot;&gt;&lt;/a&gt;[Autoconv: Casting of values into python simple types](#autoconv-casting-of-values-into-python-simple-types)    - &lt;a name=&quot;toc41&quot;&gt;&lt;/a&gt;[Context On Demand](#context-on-demand)    - &lt;a name=&quot;toc42&quot;&gt;&lt;/a&gt;[Lookup Providers](#lookup-providers)        - &lt;a name=&quot;toc43&quot;&gt;&lt;/a&gt;[Accepted Signatures](#accepted-signatures)        - &lt;a name=&quot;toc44&quot;&gt;&lt;/a&gt;[Parametrized Lookup Functions](#parametrized-lookup-functions)        - &lt;a name=&quot;toc45&quot;&gt;&lt;/a&gt;[Namespace](#namespace)    - &lt;a name=&quot;toc46&quot;&gt;&lt;/a&gt;[Caching](#caching)    - &lt;a name=&quot;toc47&quot;&gt;&lt;/a&gt;[Extensions](#extensions)    - &lt;a name=&quot;toc48&quot;&gt;&lt;/a&gt;[Named Conditions: Qualification](#named-conditions-qualification)    - &lt;a name=&quot;toc49&quot;&gt;&lt;/a&gt;[Options](#options)    - &lt;a name=&quot;toc50&quot;&gt;&lt;/a&gt;[Partial Evaluation](#partial-evaluation)    - &lt;a name=&quot;toc51&quot;&gt;&lt;/a&gt;[Streaming Data](#streaming-data)        - &lt;a name=&quot;toc52&quot;&gt;&lt;/a&gt;[Filtering](#filtering)        - &lt;a name=&quot;toc53&quot;&gt;&lt;/a&gt;[Streaming Classification](#streaming-classification)        - &lt;a name=&quot;toc54&quot;&gt;&lt;/a&gt;[Selective Classification](#selective-classification)    - &lt;a name=&quot;toc55&quot;&gt;&lt;/a&gt;[Treating of Booleans (Conditions, Not Names)](#treating-of-booleans-conditions-not-names)    - &lt;a name=&quot;toc56&quot;&gt;&lt;/a&gt;[Asyncronous Operations](#asyncronous-operations)        - &lt;a name=&quot;toc57&quot;&gt;&lt;/a&gt;[Asyncronous Filter](#asyncronous-filter)&lt;!-- TOC --&gt;# &lt;a href=&quot;#toc1&quot;&gt;What&lt;/a&gt;You have a bunch of data, possibly streaming...```csvid,first_name,last_name,email,gender,ip_address1,Rufe,Morstatt,rmorstatt0@newsvine.de,Male,216.70.69.1202,Kaela,Scott,scott@opera.com,Female,73.248.145.44,2(...)```... and you need to filter. For now lets say we have them already as list of dicts.You can do it imperatively:```pythonfoo_users = [    u    for u in users    if (u['gender'] == 'Male' or u['last_name'] == 'Scott') and '@' in u['email']]```or you have this module assemble a condition function from a declaration like:```pythonfrom pycond import make_filtercond = 'email contains .de and gender eq Male or last_name eq Scott'is_foo = make_filter(cond) # the built filter function is first```and then apply as often as you need, against varying state / facts / models (...):```foo_users = filter(is_foo, users)```with roughly the same performance (factor 2-3) than the handcrafted python.&gt; In real life performance is often **better** then using imperative code, due to`pycond's` [lazy evaluation](#context-on-demand-and-lazy-evaluation) feature. # &lt;a href=&quot;#toc2&quot;&gt;Why&lt;/a&gt;When the developer can decide upon the filters to apply on data he'll certainlyuse Python's excellent expressive possibilities directly, e.g. as shown abovethrough list comprehensions.   But what if the filtering conditions are based on decisions outside of the program'scontrol? I.e. from an end user, hitting the program via the network, in a somehow serialized form, which is rarely directly evaluatable Python.This is the main use case for this module.  ## &lt;a href=&quot;#toc3&quot;&gt;Alternatives&lt;/a&gt;But why yet another tool for such a standard job?  There is a list of great tools and frameworks where condition parsing is a (small) part of them, e.g. [pyke](http://pyke.sourceforge.net/) or [durable](https://pypi.python.org/pypi/durable_rules) and many in the django world or from SQL statement parsers.`1.` I just needed a very **slim** tool for only the parsing into functions - but this pretty transparent and customizablepycond allows to customize- the list of condition operators- the list of combination operators- the general behavior of condition operators via global or condition local wrappers- their names- the tokenizer- the value lookup functionand ships as zero dependency single module.All evaluation is done via [partials](https://stackoverflow.com/a/3252425/4583360) and not lambdas, i.e. operations can be introspected and debugged very simply, through breakpoints or custom logging operator or lookup wrappers.`2.` Simplicity of the grammar: Easy to type directly, readable by nonprogrammers but also synthesisable from structured data, e.g. from a web framework.`3.` Performance: Good enough to have &quot;pyconditions&quot; used within [stream filters](https://github.com/ReactiveX/RxPY).With the current feature set we are sometimes a factor 2-3 worse but (due to lazy eval) often better,compared with handcrafted list comprehensions.# &lt;a href=&quot;#toc4&quot;&gt;Mechanics&lt;/a&gt;&lt;!-- md_links_for: github --&gt;&lt;!-- autogen tutorial --&gt;## &lt;a href=&quot;#toc5&quot;&gt;Parsing&lt;/a&gt;pycond parses the condition expressions according to a set of constraints given to the parser in the `tokenizer` function.The result of the tokenizer is given to the builder.```pythonimport pycond as pcexpr = '[a eq b and [c lt 42 or foo eq bar]]'cond = pc.to_struct(pc.tokenize(expr, sep=' ', brkts='[]'))print('filter:', cond)# test:data = [    {'a': 'b', 'c': 1, 'foo': 42},    {'a': 'not b', 'c': 1},]filtered = list(filter(pc.make_filter(expr), data))print('matching:', filtered)return cond, len(filtered)```Output:```filter: [['a', 'eq', 'b', 'and', ['c', 'lt', '42', 'or', 'foo', 'eq', 'bar']]]matching: [{'a': 'b', 'c': 1, 'foo': 42}]```## &lt;a href=&quot;#toc6&quot;&gt;Building&lt;/a&gt;After parsing, the builder is assembling a nested set of operator functions,combined via combining operators. The functions are partials, i.e. not yetevaluated - but information about the necessary keys is already available:```pythonf, meta = pc.parse_cond('foo eq bar')assert meta['keys'] == ['foo']assert f(state={'foo': 'bar'}) == True```Note: The `make_filter` function is actually a convencience function for`parse_cond`, ignoring that meta information and calling with`state=&lt;filter val&gt;`## &lt;a href=&quot;#toc7&quot;&gt;Structured Conditions&lt;/a&gt;Other processes may deliver condition structures via serializable formats (e.g.json). If you pass such already tokenized constructs to the `pycond` function,then the tokenizer is bypassed:```pythoncond = [['a', 'eq', 'b'], 'or', ['c', 'in', ['foo', 'bar']]]assert pc.pycond(cond)(state={'a': 'b'}) == True# json support is built in:cond_as_json = json.dumps(cond)assert pc.pycond(cond_as_json)(state={'a': 'b'}) == True```## &lt;a href=&quot;#toc8&quot;&gt;Evaluation&lt;/a&gt;The result of the builder is a 'pycondition', i.e. a function which can be run many times against varying state of the system.How state is evaluated is customizable at build and run time.## &lt;a href=&quot;#toc9&quot;&gt;Default Lookup&lt;/a&gt;&quot;Lookup&quot; denotes the process of deriving the actual values to evaluate, from a given state. Can be simple gets, getattrs, walks into the structure - or arbitrary, via custom lookup functions.The default is to *get* lookup keys within expressions from an initially empty `State` dict within the module. This is *not* thread safe, i.e. not to be used in async or non cooperative multitasking environments.```pythonf = pc.pycond('foo eq bar')assert f() == Falsepc.State['foo'] = 'bar'  # not thread safe!assert f() == True```(`pycond` is a shortcut for `parse_cond`, when meta infos are not required).## &lt;a href=&quot;#toc10&quot;&gt;Passing State&lt;/a&gt;Using a state argument at evaluation *is* thread safe:  ```pythonassert pc.pycond('a gt 2')(state={'a': 42}) == Trueassert pc.pycond('a gt 2')(state={'a': -2}) == False```## &lt;a href=&quot;#toc11&quot;&gt;Deep Lookup / Nested State / Lists&lt;/a&gt;You may supply a path seperator for diving into nested structures like so:  ```pythonm = {'a': {'b': [{'c': 1}]}}assert pc.pycond('a.b.0.c', deep='.')(state=m) == Trueassert pc.pycond('a.b.1.c', deep='.')(state=m) == Falseassert pc.pycond('a.b.0.c eq 1', deep='.')(state=m) == True# convencience argument for string conditions:assert pc.pycond('deep: a.b.0.c')(state=m) == True# This is how you express deep access via structured conditions:assert pc.pycond([('a', 'b', 0, 'c'), 'eq', 1])(state=m) == True# Since tuples are not transferrable in json, we also allow deep paths as list:# We apply heuristics to exclude expressions or conditions:c = [[['a', 'b', 0, 'c'], 'eq', 1], 'and', 'a']f, nfos = pc.parse_cond(c)# sorting order for keys: tuples at end, sorted by len, rest default py sorted:assert f(state=m) == True and nfos['keys'] == ['a', ('a', 'b', 0, 'c')]```- The structure may also contain objects, then we use getattribute to get to the next value.- `deep=&quot;.&quot;` is actually just convience notation for supplying the following &quot;lookup function&quot; (see below):```pythonm = {'a': {'b': [{'c': 1}]}}assert pc.pycond('a.b.0.c', lookup=pc.state_get_deep)(state=m) == True```### &lt;a href=&quot;#toc12&quot;&gt;Lookup Performance: Prebuilt Deep Getters&lt;/a&gt;The value lookup within nested structures can be stored into item and attribute getters (or , alternatively, an evaluated synthesized lookup function), built, when the first item has a matching structure.- Upside: [Performance](./test/test_getter_perf.py) is a few times better compared to when the structure of items is explored each time, as with the 'deep' parameter.- Downside: The lookup remains as built for the first structurely matching item. Schematic changes like from a key within a dict to an attribute will not except but deliver always False for the  actual condition value matching.- `pycond.Getters.state_get_deep2`: A list of item and attribute getters is built at first successfull lookup evaluation.- `pycond.Getters.state_get_evl`: An expression like &quot;lambda state=state['a'].b[0]['c']&quot; is built and evaluated, then applied to the items.    - Fastest way to get to the values at evaluation time.      - Security: Round brackets within key names are forbidden and deliver always false - but an eval is an eval i.e. potentially evil.These two additional &quot;deep&quot; lookup functions are conveniently made accessible by supplying a `deep2` or `deep3` argument:```pythonm = {'a': {'b': [{'c': 1}]}}# 3 times faster than deep. Safe.assert pc.pycond('a.b.0.c', deep2='.')(state=m) == True# 4 times faster than deep. Eval involved.assert pc.pycond('a.b.0.c', deep3='.')(state=m) == True```The evaluation results for the keys are cached. The cache is cleared after 1Mio entries but can be cleared manually via `pc.clear_caches()` any time before that.### &lt;a href=&quot;#toc13&quot;&gt;Best Practices&lt;/a&gt;- Lookup keys change all the time, not many items checked for specific key: Use `deep`- Many items to be checked with same keys, input from untrusted users: Use `deep2`- Many items to be checked with same keys, input from trusted users: Use `deep3`## &lt;a href=&quot;#toc14&quot;&gt;Prefixed Data&lt;/a&gt;When data is passed through processing pipelines, it often is passed with headers. So it may be useful to pass a global prefix to access the payload like so:```pythonm = {'payload': {'b': [{'c': 1}], 'id': 123}}assert pc.pycond('b.0.c', deep='.', prefix='payload')(state=m) == True```## &lt;a href=&quot;#toc15&quot;&gt;Attributes Access&lt;/a&gt;Since version 20210221 we try attributes when objects are not dicts:```pythonclass MyObj:    val = {'a': 'b'}m = {'payload': {'obj': MyObj()}}cond = [['obj.val.a', 'eq', 'b']]assert pc.pycond(cond, deep='.', prefix='payload')(state=m) == True```## &lt;a href=&quot;#toc16&quot;&gt;Custom Lookup And Value Passing&lt;/a&gt;You can supply your own function for value acquisition.- Signature: See example.- Returns: The value for the key from the current state plus the  compare value for the operator function.  ```python# must return a (key, value) tuple:model = {'eve': {'last_host': 'somehost'}}def my_lu(k, v, req, user, model=model):    print('user check. locals:', dict(locals()))    return (model.get(user) or {}).get(k), req[v]f = pc.pycond('last_host eq host', lookup=my_lu)req = {'host': 'somehost'}assert f(req=req, user='joe') == Falseassert f(req=req, user='eve') == True```Output:```user check. locals: {'k': 'last_host', 'v': 'host', 'req': {'host': 'somehost'}, 'user': 'joe', 'model': {'eve': {'last_host': 'somehost'}}}user check. locals: {'k': 'last_host', 'v': 'host', 'req': {'host': 'somehost'}, 'user': 'eve', 'model': {'eve': {'last_host': 'somehost'}}}```&gt; as you can see in the example, the state parameter is just a conventionfor `pyconds'` [title: default lookup function, fmatch:pycond.py, lmatch:def state_get] &lt; SRC &gt; .## &lt;a href=&quot;#toc17&quot;&gt;Lazy Evaluation&lt;/a&gt;This is avoiding unnecessary calculations in many cases:When an evaluation branch contains an &quot;and&quot; or &quot;and_not&quot; combinator, thenat runtime we evaluate the first expression - and stop if it is alreadyFalse.Same when first expression is True, followed by &quot;or&quot; or &quot;or_not&quot;.That way expensive deep branch evaluations are omitted or, whenthe lookup is done lazy, the values won't be even fetched:```pythonevaluated = []def myget(key, val, cfg, state=None, **kw):    evaluated.append(key)    return pc.state_get(key, val, cfg, state, **kw)f = pc.pycond('[a eq b] or foo eq bar and baz eq bar', lookup=myget)assert f(state={'foo': 42}) == False# the value for &quot;baz&quot; is not even fetched and the whole (possibly# deep) branch after the last and is ignored:assert evaluated == ['a', 'foo']print(evaluated)evaluated.clear()f = pc.pycond('[[a eq b] or foo eq bar] and baz eq bar', lookup=myget)assert f(state={'a': 'b', 'baz': 'bar'}) == True# the value for &quot;baz&quot; is not even fetched and the whole (possibly# deep) branch after the last and is ignored:assert evaluated == ['a', 'baz']print(evaluated)```Output:```['a', 'foo']['a', 'baz']```Remember that all keys occurring in a condition(which may be provided by the user at runtime) are returned by the condition parser. Means that building of evaluation contexts[can be done](  # context-on-demand-and-lazy-evaluation), based on the data actually needed and not more.## &lt;a href=&quot;#toc18&quot;&gt;Condition Operators (Comparators)&lt;/a&gt;All boolean[standardlib operators](https://docs.python.org/2/library/operator.html)are available by default:```pythonfrom pytest2md import html_table as tbl  # just a table gen.from pycond import get_opsfor k in 'nr', 'str':    s = 'Default supported ' + k + ' operators...(click to extend)'    print(tbl(get_ops()[k], [k + ' operator', 'alias'], summary=s))```&lt;details&gt;&lt;summary&gt;Default supported nr operators...(click to extend)&lt;/summary&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;nr operator&lt;/td&gt;&lt;td&gt;alias&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;add&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;and_&lt;/td&gt;&lt;td&gt;&amp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;eq&lt;/td&gt;&lt;td&gt;==&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;floordiv&lt;/td&gt;&lt;td&gt;//&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ge&lt;/td&gt;&lt;td&gt;&gt;=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gt&lt;/td&gt;&lt;td&gt;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;iadd&lt;/td&gt;&lt;td&gt;+=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;iand&lt;/td&gt;&lt;td&gt;&amp;=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ifloordiv&lt;/td&gt;&lt;td&gt;//=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ilshift&lt;/td&gt;&lt;td&gt;&lt;&lt;=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;imod&lt;/td&gt;&lt;td&gt;%=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;imul&lt;/td&gt;&lt;td&gt;*=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ior&lt;/td&gt;&lt;td&gt;|=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ipow&lt;/td&gt;&lt;td&gt;**=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;irshift&lt;/td&gt;&lt;td&gt;&gt;&gt;=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;is_&lt;/td&gt;&lt;td&gt;is&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;is_not&lt;/td&gt;&lt;td&gt;is&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;isub&lt;/td&gt;&lt;td&gt;-=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;itruediv&lt;/td&gt;&lt;td&gt;/=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ixor&lt;/td&gt;&lt;td&gt;^=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;le&lt;/td&gt;&lt;td&gt;&lt;=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lshift&lt;/td&gt;&lt;td&gt;&lt;&lt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lt&lt;/td&gt;&lt;td&gt;&lt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mod&lt;/td&gt;&lt;td&gt;%&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;mul&lt;/td&gt;&lt;td&gt;*&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ne&lt;/td&gt;&lt;td&gt;!=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;or_&lt;/td&gt;&lt;td&gt;|&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pow&lt;/td&gt;&lt;td&gt;**&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;rshift&lt;/td&gt;&lt;td&gt;&gt;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sub&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;truediv&lt;/td&gt;&lt;td&gt;/&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xor&lt;/td&gt;&lt;td&gt;^&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;itemgetter&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;length_hint&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/details&gt;&lt;details&gt;&lt;summary&gt;Default supported str operators...(click to extend)&lt;/summary&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;str operator&lt;/td&gt;&lt;td&gt;alias&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;attrgetter&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;concat&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;contains&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;countOf&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;iconcat&lt;/td&gt;&lt;td&gt;+=&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;indexOf&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;methodcaller&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/details&gt;### &lt;a href=&quot;#toc19&quot;&gt;Using Symbolic Operators&lt;/a&gt;By default pycond uses text style operators.- `ops_use_symbolic` switches processwide to symbolic style only.- `ops_use_symbolic_and_txt` switches processwide to both notations allowed.```pythonpc.ops_use_symbolic()pc.State['foo'] = 'bar'assert pc.pycond('foo == bar')() == Truetry:    # this raises now, text ops not known anymore:    pc.pycond('foo eq bar')except:    pc.ops_use_symbolic_and_txt(allow_single_eq=True)    assert pc.pycond('foo = bar')() == True    assert pc.pycond('foo == bar')() == True    assert pc.pycond('foo eq bar')() == True    assert pc.pycond('foo != baz')() == True```&gt; Operator namespace(s) should be assigned at process start, they are global.### &lt;a href=&quot;#toc20&quot;&gt;Extending Condition Operators&lt;/a&gt;```pythonpc.OPS['maybe'] = lambda a, b: int(time.time()) % 2# valid expression now:assert pc.pycond('a maybe b')() in (True, False)```### &lt;a href=&quot;#toc21&quot;&gt;Negation `not`&lt;/a&gt;Negates the result of the condition operator:```pythonpc.State['foo'] = 'abc'assert pc.pycond('foo eq abc')() == Trueassert pc.pycond('foo not eq abc')() == False```### &lt;a href=&quot;#toc22&quot;&gt;Reversal `rev`&lt;/a&gt;Reverses the arguments before calling the operator  ```pythonpc.State['foo'] = 'abc'assert pc.pycond('foo contains a')() == Trueassert pc.pycond('foo rev contains abc')() == True```&gt; `rev` and `not` can be combined in any order.### &lt;a href=&quot;#toc23&quot;&gt;Wrapping Condition Operators&lt;/a&gt;#### &lt;a href=&quot;#toc24&quot;&gt;Global Wrapping&lt;/a&gt;You may globally wrap all evaluation time condition operations through a custom function:```pythonl = []def hk(f_op, a, b, l=l):    l.append((getattr(f_op, '__name__', ''), a, b))    return f_op(a, b)pc.run_all_ops_thru(hk)  # globally wrap the operatorspc.State.update({'a': 1, 'b': 2, 'c': 3})f = pc.pycond('a gt 0 and b lt 3 and not c gt 4')assert l == []f()expected_log = [('gt', 1, 0.0), ('lt', 2, 3.0), ('gt', 3, 4.0)]assert l == expected_logpc.ops_use_symbolic_and_txt()```You may compose such wrappers via repeated application of the `run_all_ops_thru` API function.### &lt;a href=&quot;#toc25&quot;&gt;Condition Local Wrapping&lt;/a&gt;This is done through the `ops_thru` parameter as shown:```pythondef myhk(f_op, a, b):    return Truepc.State['a'] = 1f = pc.pycond('a eq 2')assert f() == Falsef = pc.pycond('a eq 2', ops_thru=myhk)assert f() == True```&gt; Using `ops_thru` is a good way to debug unexpected results, since you&gt; can add breakpoints or loggers there.### &lt;a href=&quot;#toc26&quot;&gt;Combining Operations&lt;/a&gt;You can combine single conditions with- `and`- `and not`- `or`- `or not`- `xor` by default.The combining functions are stored in `pycond.COMB_OPS` dict and may be extended.&gt; Do not use spaces for the names of combining operators. The user may use them but they are replaced at before tokenizing time, like `and not` -&gt; `and_not`.## &lt;a href=&quot;#toc27&quot;&gt;Details&lt;/a&gt;### &lt;a href=&quot;#toc28&quot;&gt;Debugging Lookups&lt;/a&gt;pycond provides a key getter which prints out every lookup.  ```pythonf = pc.pycond('[[a eq b] or foo eq bar] or [baz eq bar]', lookup=pc.dbg_get)assert f(state={'foo': 'bar'}) == True```Output:```Lookup: a b -&gt; NoneLookup: foo bar -&gt; bar```### &lt;a href=&quot;#toc29&quot;&gt;Enabling/Disabling of Branches&lt;/a&gt;Insert booleans like shown:  ```pythonf = pc.pycond(['foo', 'and', ['bar', 'eq', 1]])assert f(state={'foo': 1}) == Falsef = pc.pycond(['foo', 'and', [True, 'or', ['bar', 'eq', 1]]])assert f(state={'foo': 1}) == True```### &lt;a href=&quot;#toc30&quot;&gt;Building Conditions From Text&lt;/a&gt;Condition functions are created internally from structured expressions -but those are[hard to type](  # lazy-dynamic-context-assembly),involving many apostropies.The text based condition syntax is intended for situations when end userstype them into text boxes directly.#### &lt;a href=&quot;#toc31&quot;&gt;Grammar&lt;/a&gt;Combine atomic conditions with boolean operators and nesting brackets like:```[&lt; atom1 &gt; &lt; and | or | and not|... &gt; &lt;atom2 &gt; ] &lt; and|or... &gt; [ [ &lt; atom3 &gt; ....```#### &lt;a href=&quot;#toc32&quot;&gt;Atomic Conditions&lt;/a&gt;```[not] &lt; lookup_key &gt; [[rev] [not] &lt; condition operator (co) &gt; &lt;value &gt; ]```- When just `lookup_key` is given, then `co` is set to the `truthy` function:```pythondef truthy(key, val=None):    return operatur.truth(k)```so such an expression is valid and True:```pythonpc.State.update({'foo': 1, 'bar': 'a', 'baz': []})assert pc.pycond('[ foo and bar and not baz]')() == True```- When `not lookup_key` is given, then `co` is set to the `falsy`  function:```pythonm = {'x': 'y', 'falsy_val': {}}# normal wayassert pc.pycond(['foo', 'eq', None])(state=m) == True# using &quot;not&quot; as prefix:assert pc.pycond('not foo')(state=m) == Trueassert pc.pycond(['not', 'foo'])(state=m) == Trueassert pc.pycond('not falsy_val')(state=m) == Trueassert pc.pycond('x and not foo')(state=m) == Trueassert pc.pycond('y and not falsy_val')(state=m) == False```#### &lt;a href=&quot;#toc33&quot;&gt;Nesting&lt;/a&gt;Combined conditions may be arbitrarily nested using brackets &quot;[&quot; and &quot;]&quot;.&gt; Via the `brkts` config parameter you may change those to other separators at build time.### &lt;a href=&quot;#toc34&quot;&gt;Tokenizing Details&lt;/a&gt;&gt; Brackets as strings in this flat list form, e.g. `['[', 'a', 'and' 'b', ']'...]`#### &lt;a href=&quot;#toc35&quot;&gt;Functioning&lt;/a&gt;The tokenizers job is to take apart expression strings for the builder.#### &lt;a href=&quot;#toc36&quot;&gt;Separator `sep`&lt;/a&gt;Separates the different parts of an expression. Default is ' '.```pythonpc.State['a'] = 42assert pc.pycond('a.eq.42', sep='.')() == True```&gt; sep can be a any single character including binary.Bracket characters do not need to be separated, the tokenizer will do:```python# equal:assert (    pc.pycond('[[a eq 42] and b]')() == pc.pycond('[ [ a eq 42 ] and b ]')())```&gt; The condition functions themselves do not evaluate equal - those&gt; had been assembled two times.#### &lt;a href=&quot;#toc37&quot;&gt;Apostrophes&lt;/a&gt;By putting strings into Apostrophes you can tell the tokenizer to not further inspect them, e.g. for the seperator:```pythonpc.State['a'] = 'Hello World'assert pc.pycond('a eq &quot;Hello World&quot;')() == True```#### &lt;a href=&quot;#toc38&quot;&gt;Escaping&lt;/a&gt;Tell the tokenizer to not interpret the next character:```pythonpc.State['b'] = 'Hello World'assert pc.pycond('b eq Hello\ World')() == True```### &lt;a href=&quot;#toc39&quot;&gt;Building&lt;/a&gt;#### &lt;a href=&quot;#toc40&quot;&gt;Autoconv: Casting of values into python simple types&lt;/a&gt;Expression string values are automatically cast into bools and numbers via the public `pycond.py_type` function.This can be prevented by setting the `autoconv` parameter to `False` or by using Apostrophes:```pythonpc.State['a'] = '42'assert pc.pycond('a eq 42')() == False# compared as string nowassert pc.pycond('a eq &quot;42&quot;')() == True# compared as string nowassert pc.pycond('a eq 42', autoconv=False)() == True```If you do not want to provide a custom lookup function(where you can do what you want)but want to have looked up keys autoconverted then use:```pythonfor id in '1', 1:    pc.State['id'] = id    assert pc.pycond('id lt 42', autoconv_lookups=True)```## &lt;a href=&quot;#toc41&quot;&gt;Context On Demand&lt;/a&gt;Often the conditions are in user space, applied on data streams underthe developer's control only at development time.The end user might pick only a few keys from many offered within an API.pycond's `ctx_builder` allows to only calculate those keys at runtime,the user decided to base conditions upon:At condition build time hand over a namespace for *all * functions whichare available to build the ctx.`pycon` will return a context builder function for you, calling only those functionswhich the condition actually requires.```pythonpc.ops_use_symbolic_and_txt(allow_single_eq=True)# Condition the end user configured, e.g. at program run time:cond = [    ['group_type', 'in', ['lab', 'first1k', 'friendly', 'auto']],    'and',    [        [            [                [                    ['cur_q', '&lt;', 0.5],                    'and',                    ['delta_q', '&gt;=', 0.15],                ],                'and',                ['dt_last_enforce', '&gt;', 28800],            ],            'and',            ['cur_hour', 'in', [3, 4, 5]],        ],        'or',        [            [                [                    ['cur_q', '&lt;', 0.5],                    'and',                    ['delta_q', '&gt;=', 0.15],                ],                'and',                ['dt_last_enforce', '&gt;', 28800],            ],            'and',            ['clients', '=', 0],        ],    ],]# Getters for API keys offered to the user, involving potentially# expensive to fetch context delivery functions:# Signature must provide minimum a positional for the current# state:class ApiCtxFuncs:    def expensive_but_not_needed_here(ctx):        raise Exception(&quot;Won't run with cond. from above&quot;)    def cur_q(ctx):        print('Calculating cur_q')        return 0.1    def cur_hour(ctx):        print('Calculating cur_hour')        return 4    def dt_last_enforce(ctx):        print('Calculating dt_last_enforce')        return 10000000    def delta_q(ctx):        print('Calculating (expensive) delta_q')        time.sleep(0.1)        return 1    def clients(ctx):        print('Calculating clients')        return 0if sys.version_info[0] &lt; 3:    # we don't think it is a good idea to make the getter API stateful ;-)    p2m.convert_to_staticmethods(ApiCtxFuncs)f, nfos = pc.parse_cond(cond, ctx_provider=ApiCtxFuncs)# now we create (incomplete) data..data1 = {'group_type': 'xxx'}, Falsedata2 = {'group_type': 'lab'}, True# this key stores a context builder function, calculating the complete data:make_ctx = nfos['complete_ctx']t0 = time.time()for event, expected in data1, data2:    assert f(state=make_ctx(event)) == expectedprint('Calc.Time (delta_q was called twice):', round(time.time() - t0, 4)),return cond, ApiCtxFuncs```Output:```Calculating clientsCalculating cur_hourCalculating cur_qCalculating (expensive) delta_qCalculating dt_last_enforceCalculating clientsCalculating cur_hourCalculating cur_qCalculating (expensive) delta_qCalculating dt_last_enforceCalc.Time (delta_q was called twice): 0.2006```## &lt;a href=&quot;#toc42&quot;&gt;Lookup Providers&lt;/a&gt;ContextBuilders are interesting but we can do better.We still calculated values for keys which might(dependent on the data) be not needed in dead ends of a lazily evaluated condition.Lets avoid calculating these values, remembering the [custom lookup function](#custom-lookup-and-value-passing) feature.This is where lookup providers come in, providing namespaces for functions to be called conditionally.Pycond [treats the condition keys as function names][pycond.py#614] within that namespace and calls them, when needed.### &lt;a href=&quot;#toc43&quot;&gt;Accepted Signatures&lt;/a&gt;Lookup provider functions may have the following signatures:```pythonclass F:    # simple data passing    def f1(data):        &quot;&quot;&quot;simple return a value being compared, getting passed the state/data&quot;&quot;&quot;        return data['a']    # simple, with ctx    def f2(data, **kw):        &quot;&quot;&quot;        simple return a value being compared, getting passed the state/data        All context information within kw, compare value not modifiable        &quot;&quot;&quot;        return data['b']    # full pycond compliant signature,    def f3(key, val, cfg, data, **kw):        &quot;&quot;&quot;        full pycond signature.        val is the value as defined by the condition, and which you could return modified        kw holds the cache, cfg holds the setup        v has to be returned:        &quot;&quot;&quot;        return data['c'], 100  # not 45!    # applied al    def f4(*a, **kw):        &quot;&quot;&quot;        Full variant(always when varargs are involved)        &quot;&quot;&quot;        return a[3]['d'], 'foo'_ = 'and'f = pc.pycond(    [        [':f1', 'eq', 42],        _,        [':f2', 'eq', 43, _, ':f3', 'eq', 45],        _,        [':f4', 'eq', 'foo'],    ],    lookup_provider=F,)assert f(state={'a': 42, 'b': 43, 'c': 100, 'd': 'foo'}) == True```### &lt;a href=&quot;#toc44&quot;&gt;Parametrized Lookup Functions&lt;/a&gt;Via the 'params' parameter you may supply keyword args to lookup functions:  ```pythonclass F:    def hello(k, v, cfg, data, count, **kw):        return data['foo'] == count, 0m = pc.pycond([':hello'], lookup_provider=F, params={'hello': {'count': 2}})(    state={'foo': 2})assert m == True```### &lt;a href=&quot;#toc45&quot;&gt;Namespace&lt;/a&gt;- Lookup functions can be found in nested class hirarchies or dicts. Separator is colon(':')- As shown above, if they are flat within a toplevel class or dict you should still prefix with ':', to get build time exception(MissingLookupFunction) when not present- You can switch that behaviour off per condition build as config arg, as shown below- You can switch that behaviour off globally via `pc.prefixed_lookup_funcs=False`Warning: This is a breaking API change with pre-20200610 versions, where the prefix was not required to find functions in, back then, only flat namespaces. Use the global switch after import to get the old behaviour.```pythonclass F:    def a(data):        return data['foo']    class inner:        def b(data):            return data['bar']m = {'c': {'d': {'func': lambda data: data['baz']}}}# for the inner lookup the first prefix may be omitted:_ = 'and'cond = [    [':a', 'eq', 'foo1'],    _,    ['inner:b', 'eq', 'bar1'],    _,    [        'c:d',        'eq',        'baz1',    ],]c = pc.pycond(cond, lookup_provider=F, lookup_provider_dict=m)assert c(state={'foo': 'foo1', 'bar': 'bar1', 'baz': 'baz1'}) == True# Prefix checking on / off:try:    pc.pycond([':xx', 'and', cond])    i = 9 / 0  # above will raise this:except pc.MissingLookupFunction:    passtry:    pc.pycond([':xx', 'and', cond], prefixed_lookup_funcs=False)    i = 9 / 0  # above will raise this:except pc.MissingLookupFunction:    passcond[0] = 'a'  # remove prefix, will still be foundc = pc.pycond(    ['xx', 'or', cond],    lookup_provider=F,    lookup_provider_dict=m,    prefixed_lookup_funcs=False,)assert c(state={'foo': 'foo1', 'bar': 'bar1', 'baz': 'baz1'}) == True```You can switch that prefix needs off - and pycond will then check the state for key presence:```python# we let pycond generate the lookup function (we use the simple signature type):f = pc.pycond(cond, lookup_provider=ApiCtxFuncs, prefixed_lookup_funcs=False)# Same events as above:data1 = {'group_type': 'xxx'}, Falsedata2 = {'group_type': 'lab'}, Truet0 = time.time()for event, expected in data1, data2:    # we will lookup only once:    assert f(state=event) == expectedprint(    'Calc.Time (delta_q was called just once):',    round(time.time() - t0, 4),)# The deep switch keeps working:cond2 = [cond, 'or', ['a-0-b', 'eq', 42]]f = pc.pycond(    cond2,    lookup_provider=ApiCtxFuncs,    deep='-',    prefixed_lookup_funcs=False,)data2[0]['a'] = [{'b': 42}]print('sample:', data2[0])assert f(state=data2[0]) == True```Output:```Calculating cur_qCalculating (expensive) delta_qCalculating dt_last_enforceCalculating cur_hourCalc.Time (delta_q was called just once): 0.1004sample: {'group_type': 'lab', 'a': [{'b': 42}]}Calculating cur_qCalculating (expensive) delta_qCalculating dt_last_enforceCalculating cur_hour```The output demonstrates that we did not even call the value provider functions for the dead branches of the condition.NOTE: Instead of providing a class tree you may also provide a dict of functions as `lookup_provider_dict` argument, see `qualify` examples below.## &lt;a href=&quot;#toc46&quot;&gt;Caching&lt;/a&gt;Note: Currently you cannot override these defaults. Drop an issue if you need to.- Builtin state lookups: Not cached- Custom `lookup` functions: Not cached(you can implement caching within those functions)- Lookup provider return values: Cached, i.e. called only once, per data set- Named condition sets(see below): Cached## &lt;a href=&quot;#toc47&quot;&gt;Extensions&lt;/a&gt;We deliver a few lookup function [extensions][pycond.py#711]- for time checks- for os.environ checks(re-evaluated at runtime)```pythonfrom datetime import datetime as dtfrom os import environ as envthis_sec = dt.now().secondthis_utc_hour = dt.utcnow().hourf = pc.pycond(    [        ['env:foo', 'eq', 'bar'],        'and',        # not breaking the build when the sec just jumps:        ['dt:second', 'in', [this_sec, this_sec + 1, 0]],        'and',        ['utc:hour', 'eq', this_utc_hour],    ])env['foo'] = 'bar'assert f(state={'a': 1}) == True```## &lt;a href=&quot;#toc48&quot;&gt;Named Conditions: Qualification&lt;/a&gt;Instead of just delivering booleans, pycond can be used to determine a whole set ofinformation about data declaratively, like so:  ```python# We accept different forms of delivery.# The first full text is restricted to simple flat dicts only:for c in [    'one: a gt 10, two: a gt 10 or foo eq bar',    {'one': 'a gt 10', 'two': 'a gt 10 or foo eq bar'},    {        'one': ['a', 'gt', 10],        'two': ['a', 'gt', 10, 'or', 'foo', 'eq', 'bar'],    },]:    f = pc.qualify(c)    r = f({'foo': 'bar', 'a': 0})    assert r == {'one': False, 'two': True}```We may refer to results of other named conditions and also can pass named condition sets as lists instead of dicts:  ```pythondef run(q):    print('Running', q)    class F:        def custom(data):            return data.get('a')    f = pc.qualify(q, lookup_provider=F)    assert f({'a': 'b'}) == {        'first': True,        'listed': [False, False],        'thrd': True,        'zero': True,        'last': True,    }    res = f({'c': 'foo', 'x': 1})    assert res == {        'first': False,        'listed': [False, True],        'thrd': False,        'zero': True,        'last': True,    }q = {    'thrd': ['k', 'or', ':first'],    'listed': [['foo'], ['c', 'eq', 'foo']],    'zero': [['x', 'eq', 1], 'or', ':thrd'],    'first': [':custom', 'eq', 'b'],    'last': True,  # you might want to do this to always get at least one matcher, e.g. for data streaming}# as list of conditions:run(q)# as dict:q = dict([[k, v] for k, v in q.items()])run(q)```Output:```Running {'thrd': ['k', 'or', ':first'], 'listed': [['foo'], ['c', 'eq', 'foo']], 'zero': [['x', 'eq', 1], 'or', ':thrd'], 'first': [':custom', 'eq', 'b'], 'last': True}Running {'thrd': ['k', 'or', ':first'], 'listed': [['foo'], ['c', 'eq', 'foo']], 'zero': [['x', 'eq', 1], 'or', ':thrd'], 'first': [':custom', 'eq', 'b'], 'last': True}```WARNING: For performance reasons there is no built in circular reference check. You'll run into python's built in recursion checker!## &lt;a href=&quot;#toc49&quot;&gt;Options&lt;/a&gt;- into: Put the matched named conditions into the original data- prefix: Work from a prefix nested in the root- add_cached: Return also the data from function result cacheHere a few variants to parametrize behaviour, by example:  ```pythonconds = {    0: ['foo'],    1: ['bar'],    2: ['func'],    3: ['n'],    'n': ['bar'],}class F:    def func(*a, **kw):        return True, 0q = lambda d, **kw: pc.qualify(    conds, lookup_provider=F, prefixed_lookup_funcs=False, **kw)(d)m = q({'bar': 1})assert m == {0: False, 1: True, 2: True, 3: True, 'n': True}# return data, with matched conds in:m = q({'bar': 1}, into='conds')assert m == {    'bar': 1,    'conds': {0: False, 1: True, 2: True, 3: True, 'n': True},}def msg():    return {'bar': 1, 'pl': {'a': 1}}# add_cached == True -&gt; it's put into the cond results:m = q(msg(), into='conds', add_cached=True)assert m == {    'bar': 1,    'conds': {0: False, 1: True, 2: True, 3: True, 'n': True, 'func': True},    'pl': {'a': 1},}m = q(msg(), into='conds', add_cached='pl')assert m == {    'bar': 1,    'conds': {0: False, 1: True, 2: True, 3: True, 'n': True},    # n had been put into the cache, was not evaled twice:    'pl': {'a': 1, 'func': True, 'n': True},}m = q({'bar': 1}, add_cached='pl')assert m == {0: False, 1: True, 2: True, 3: True, 'n': True, 'func': True}# prefix -&gt; Nr 1, bar,  should NOT be True, since not in pl now:m = q(    msg(),    prefix='pl',    into='conds',    add_cached='pl',)assert m == {    'bar': 1,    'conds': {0: False, 1: False, 2: True, 3: False, 'n': False},    'pl': {'a': 1, 'func': True, 'n': False},}```## &lt;a href=&quot;#toc50&quot;&gt;Partial Evaluation&lt;/a&gt;If you either supply a key called 'root' OR supply it as argument to `qualify`, pycond will only evaluate named conditions required to calculate the root key:```pythoncalled = []def expensive_func(k, v, cfg, data, **kw):    called.append(data)    return 1, vdef xx(k, v, cfg, data, **kw):    called.append(data)    return data.get('a'), vfuncs = {'exp': {'func': expensive_func}, 'xx': {'func': xx}}q = {    'root': ['foo', 'and', ':bar'],    'bar': [        ['somecond'],        'or',        [[':exp', 'eq', 1], 'and', ':baz'],    ],    'x': [':xx'],    'baz': [':exp', 'lt', 10],}qualifier = pc.qualify(q, lookup_provider_dict=funcs, add_cached=True)d = {'foo': 1}r = qualifier(d)# root, bar, baz had been calculated, not xassert r == {'root': True, 'bar': True, 'baz': True, 'exp': 1}# expensive_func result, which was cached, is also returned.# expensive_func only called once allthough result evaluated for bar and baz:assert len(called) == 1called.clear()f = pc.qualify(q, lookup_provider_dict=funcs, root='x', add_cached=True)assert f({'a': 1}) == {'x': True, 'xx': 1}assert f({'b': 1}) == {'x': False, 'xx': None}assert called == [{'a': 1}, {'b': 1}]```This means pycond can be used as a lightweight declarative function dispatching framework.## &lt;a href=&quot;#toc51&quot;&gt;Streaming Data&lt;/a&gt;Since version 20200601 and Python 3.x versions, pycond can deliver[ReactiveX](https://github.com/ReactiveX/RxPY) compliant stream operators.Lets first set up a test data stream, by defining a function `rx_setup` like so:```python# simply `import rx as Rx and rx = rx.operators`:# import pycond as pc, like always:Rx, rx, GS = pc.import_rx('GS')def push_through(*test_pipe, items=4):    &quot;&quot;&quot;    Function which takes a set of operators and runs an 'rx.interval' stream, until count items are through    &quot;&quot;&quot;    # stream sink result holder plus a stream completer:    l, compl = [], rx.take(items)    l.clear()  # clear any previous results    def next_(x):        # simply remember what went through in a list:        l.append(x)    def err(*a):        # should never happen:        print('exception', a)    stream = Rx.interval(0.01)  # numbers, each on its own thread    # turns the ints into dicts: {'i': 1}, then {'i': 2} and so on:    # (we start from 1, the first 0 we filter out)    stream = stream.pipe(        rx.filter(lambda i: i &gt; 0), rx.map(lambda i: {'i': i})    )    # defines the stream through the tested operators:    test_pipe = test_pipe + (compl,)    s = stream.pipe(*test_pipe)    # runs the stream:    d = s.subscribe(        on_error=err,        on_next=next_,        on_completed=lambda: l.append('completed'),    )    # blocks until completed:    while not (l and l[-1] == 'completed'):        time.sleep(0.001)    l.pop()  # removes completed indicator    return l  # returns all processed messagesreturn Rx, rx, push_through```Lets test the setup by having some messages streamed through:```pythonRx, rx, push_through = rx_setup()# test test setup:r = push_through(items=3)assert r == [{'i': 1}, {'i': 2}, {'i': 3}]```-&gt; test setup works.### &lt;a href=&quot;#toc52&quot;&gt;Filtering&lt;/a&gt;This is the most simple operation: A simple stream filter.```pythonRx, rx, push_through = rx_setup()# ask pycond for a stream filter based on a condition:pcfilter = partial(pc.rxop, ['i', 'mod', 2])r = push_through(pcfilter())odds = [{'i': 1}, {'i': 3}, {'i': 5}, {'i': 7}]assert r == odds# try the stream filter with message headered data:pl = 'payload'r = push_through(rx.map(lambda i: {pl: i}), pcfilter(prefix=pl))print('Full messages passed:', r)r = [m[pl] for m in r]assert len(r) == 4assert r == odds```Output:```Full messages passed: [{'payload': {'i': 1}}, {'payload': {'i': 3}}, {'payload': {'i': 5}}, {'payload': {'i': 7}}]```### &lt;a href=&quot;#toc53&quot;&gt;Streaming Classification&lt;/a&gt;Using named condition dicts we can classify data, i.e. tag it, in order to process subsequently:```pythonRx, rx, push_through = rx_setup()# generate a set of classifiers:conds = [['i', 'mod', i] for i in range(2, 4)]def run(offs=0):    # and get a classifying operator from pycond, adding the results in place, at key 'mod':    r = push_through(pc.rxop(conds, into='mod'))    i, j = 0 + offs, 1 + offs    assert r == [        {'i': 1, 'mod': {i: 1, j: 1}},        {'i': 2, 'mod': {i: 0, j: 2}},        {'i': 3, 'mod': {i: 1, j: 0}},        {'i': 4, 'mod': {i: 0, j: 1}},    ]# this will automatically number the classifiers, from 0:run()# we can also provide the names of the classifiers by passing a dict:# here we pass 2 and 3 as those names:conds = dict([(i, ['i', 'mod', i]) for i in range(2, 4)])run(2)```Normally the data has headers, so thats a good place to keep the classification tags.### &lt;a href=&quot;#toc54&quot;&gt;Selective Classification&lt;/a&gt;We fall back to an alternative condition evaluation(which could be a function call) * only * when a previous condition evaluation returns something falsy - by providing a * root condition*.When it evaluated, possibly requiring evaluation of other conditions, we return:  ```pythonRx, rx, push_through = rx_setup()# using the list style:conds = [[i, [['i', 'mod', i], 'or', ':alt']] for i in range(2, 4)]conds.append(['alt', ['i', 'gt', 1]])# provide the root condition. Only when it evals falsy, the named &quot;alt&quot; condiction will be evaluated:r = push_through(pc.rxop(conds, into='mod', root=2, add_cached=True))assert r == [    # evaluation of alt was not required:    {'i': 1, 'mod': {2: True}},    # evaluation of alt was required:    {'i': 2, 'mod': {2: True, 'alt': True}},    {'i': 3, 'mod': {2: True}},    {'i': 4, 'mod': {2: True, 'alt': True}},]```## &lt;a href=&quot;#toc55&quot;&gt;Treating of Booleans (Conditions, Not Names)&lt;/a&gt;For the special case of booleans in a condition list we do not treat them as names.  ```python# 2 unnamed conditions -&gt; keys will be positionalqs = pc.qualify([True, False])res = qs({'a': 1})assert res == {0: True, 1: False}  # and not {True: False}# 2 named condsqs = pc.qualify([[1, ['a', 'eq', 1]], [2, ['b', 'eq', 42]]])res = qs({'a': 1})assert res == {1: True, 2: False}```## &lt;a href=&quot;#toc56&quot;&gt;Asyncronous Operations&lt;/a&gt;WARNING: Early Version. Only for the gevent platform.Selective classification allows to call condition functions only when other criteria are met.That makes it possible to read e.g. from a database only when data is really required - and not always, &quot;just in case&quot;.pycond allows to define, that blocking operations should be run * async* within the stream, possibly giving up order.### &lt;a href=&quot;#toc57&quot;&gt;Asyncronous Filter&lt;/a&gt;First a simple filter, which gives up order but does not block:```pythonRx, rx, push_through = rx_setup()class F:    def check(k, v, cfg, data, t0=[], **kw):        # will be on different thread:        i, pointer = data['i'], ''        if not t0:            t0.append(now())        if i == 1:            # ints are fired at 0.01, i.e. the 1 will land 4 after 1:            time.sleep(0.048)            pointer = '   &lt;----- not in order, blocked'        # demonstrate that item 1 is not blocking anything - just order is disturbed:        print('item %s: %.3fs %s' % (i, now() - t0[0], pointer))        return i % 2, v# have the operator built for us - with a single condition filter:rxop = pc.rxop(    [':check'],    into='mod',    lookup_provider=F,    asyn=['check'],)r = push_through(rxop, items=5)assert [m['i'] for m in r] == [3, 5, 1, 7, 9]```Output:```item 2: 0.011s item 3: 0.022s item 4: 0.034s item 5: 0.045s item 1: 0.049s    &lt;----- not in order, blockeditem 6: 0.057s item 7: 0.068s item 8: 0.079s item 9: 0.090s```Finally asyncronous classification, i.e. evaluation of multiple conditions:```pythondef _thn(msg, data):    return print('thread:', cur_thread().name, msg, data)# push_through just runs a stream of {'i': &lt;nr&gt;} through a given operator:Rx, rx, push_through = rx_setup()# Defining a simple 'set' of classifiers, here as list, with one single key: 42:conds = [    [        42,        [            ['i', 'lt', 100],            'and',            [[':odd', 'eq', 1], 'or', ['i', 'eq', 2]],            'and_not',            [':blocking', 'eq', 3],        ],    ]]class F:    &quot;&quot;&quot;    Namespace for condition lookup functions.    You may also pass a dict(lookup_provider_dict)    We provide the functions for 'odd' and 'blocking'.    &quot;&quot;&quot;    def odd(k, v, cfg, data, **kw):        # just print the threadname.        # will go up, interval stream has each nr on its own thread:        _thn('odd', data)        # fullfill condition only for odd numbers        # -&gt; even nrs won't even run func 'blocking':        return data['i'] % 2, v    def blocking(k, v, cfg, data, **kw):        i = data['i']        # will be on different thread:        _thn('blocking', data)        if i == 1:            # two others will &quot;overtake the i=1 item,            # since the interval stream is firing every 0.01 secs:            time.sleep(0.028)        elif i == 2:            # Exceptions, incl. timeouts, will simply be forwarded to cfg['err_handler']            # i.e. also timeout mgmt have to be done here, in the custom functions themselves.            # Rationale for not providing a timeout monitoring within pycond itself:            # Async ops are done with libs, which ship with their own timeout params.            # No need to re-invent / overlay with our own monitoring of that.            # In the err handler, then further arrangements can be done.            raise TimeoutError('ups')        elif i == 5:            1 / 0        return data['i'], verrors = []def handle_err(item, cfg, ctx, exc, t=errors, **kw):    # args are: [item, cfg]    if 'ups' in str(exc):        assert item['i'] == 2        assert exc.__class__ == TimeoutError        t.append(item)    else:        assert item['i'] == 5        assert exc.__class__ == ZeroDivisionError        t.append(item)# have the operator built for us:rxop = pc.rxop(    conds,    into='mod',    lookup_provider=F,    err_handler=handle_err,    asyn=['blocking'],)r = push_through(rxop, items=5)assert [m['i'] for m in r] == [3, 1, 4, 6, 7]assert [m['mod'][42] for m in r] == [False, True, False, False, True]# item 2 caused a timeout:assert [t['i'] for t in errors] == [2, 5]```Output:```thread: Thread-55 odd {'i': 1}thread: Dummy-57 blocking {'i': 1}thread: Thread-56 odd {'i': 2}thread: Dummy-59 blocking {'i': 2}thread: Thread-58 odd {'i': 3}thread: Dummy-61 blocking {'i': 3}thread: Thread-60 odd {'i': 4}thread: Thread-62 odd {'i': 5}thread: Dummy-64 blocking {'i': 5}thread: Thread-63 odd {'i': 6}thread: Thread-65 odd {'i': 7}thread: Dummy-67 blocking {'i': 7}```*Auto generated by [pytest2md](https://github.com/axiros/pytest2md), running [./tests/test_tutorial.py](./tests/test_tutorial.py)&lt;!-- autogen tutorial --&gt;&lt;!-- autogenlinks --&gt;[pycond.py#614]: https://github.com/axiros/pycond/blob/54fea4c6b0cdc62bcf0b984214649344b1a77230/pycond.py#L614[pycond.py#711]: https://github.com/axiros/pycond/blob/54fea4c6b0cdc62bcf0b984214649344b1a77230/pycond.py#L711</longdescription>
</pkgmetadata>