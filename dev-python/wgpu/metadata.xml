<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![CI](https://github.com/pygfx/wgpu-py/workflows/CI/badge.svg)](https://github.com/pygfx/wgpu-py/actions)[![Documentation Status](https://readthedocs.org/projects/wgpu-py/badge/?version=latest)](https://wgpu-py.readthedocs.io)[![PyPI version](https://badge.fury.io/py/wgpu.svg)](https://badge.fury.io/py/wgpu)# wgpu-pyA Python implementation of WebGPU - the next generation GPU API.&lt;img width=300 src='https://raw.githubusercontent.com/pygfx/wgpu-py/main/examples/screenshots/cube.png' /&gt;&lt;img width=300 src='https://raw.githubusercontent.com/pygfx/wgpu-py/main/examples/screenshots/triangle_auto.png' /&gt;## IntroductionIn short, this is a Python lib wrapping[wgpu-native](https://github.com/gfx-rs/wgpu) and exposing it with a PythonicAPI similar to the [WebGPU spec](https://gpuweb.github.io/gpuweb/).The OpenGL API is old and showing it's cracks. New API's like Vulkan, Metal andDX12 provide a modern way to control the GPU, but these API's are too low-levelfor general use. The WebGPU API follows the same concepts, but with a simpler(higher level) spelling. The Python `wgpu` library brings the WebGPU API toPython.To get an idea of what this API looks like have a look at[triangle.py](https://github.com/pygfx/wgpu-py/blob/main/examples/triangle.py)and the other [examples](https://github.com/pygfx/wgpu-py/blob/main/examples/).## Status&gt; **Note**&gt;&gt; The wgpu-API has not settled yet, use with care!* Coverage of the WebGPU spec is complete enough to build e.g.  [pygfx](https://github.com/pygfx/pygfx).* Test coverage of the API is 100%.* Support for Windows, Linux, and MacOS (Intel and M1).* Until WebGPU settles as a standard, its specification may change, and with  that our API will probably too. Check the [changelog](CHANGELOG.md) when you  upgrade!## Installation```pip install wgpu glfw```Linux users should make sure that **pip &gt;= 20.3**. That should do thetrick on most systems. See [getting started](https://wgpu-py.readthedocs.io/en/stable/start.html)for details.## UsageAlso see the [online documentation](https://wgpu-py.readthedocs.io) and the [examples](https://github.com/pygfx/wgpu-py/tree/main/examples).The full API is accessable via the main namespace:```pyimport wgpu```But to use it, you need to select a backend first. You do this by importing it.There is currently only one backend:```pyimport wgpu.backends.rs```To render to the screen you can use a variety of GUI toolkits:```py# The auto backend selects either the glfw, qt or jupyter backendfrom wgpu.gui.auto import WgpuCanvas, run, call_later# Visualizations can be embedded as a widget in a Qt application.# Import PySide6, PyQt6, PySide2 or PyQt5 before running the line below.# The code will detect and use the library that is imported.from wgpu.gui.qt import WgpuCanvas# Visualizations can be embedded as a widget in a wx application.from wgpu.gui.wx import WgpuCanvas```Some functions in the original `wgpu-native` API are async. In the Python API,the default functions are all sync (blocking), making things easy for general use.Async versions of these functions are available, so wgpu can also workwell with Asyncio or Trio.## LicenseThis code is distributed under the 2-clause BSD license.## Developers* Clone the repo.* Install devtools using `pip install -r dev-requirements.txt` (you can replace  `pip` with `pipenv` to install to a virtualenv).* Install wgpu-py in editable mode by running `pip install -e .`, this will also  install runtime dependencies as needed.* Run `python download-wgpu-native.py` to download the upstream wgpu-native  binaries.  * Or alternatively point the `WGPU_LIB_PATH` environment variable to a custom    build.* Use `black .` to apply autoformatting.* Use `flake8 .` to check for flake errors.* Use `pytest .` to run the tests.* Use `pip wheel --no-deps .` to build a wheel.### Changing the upstream wgpu-native version* Use the optional arguments to `python download-wgpu-native.py --help` to  download a different version of the upstream wgpu-native binaries.* The file `wgpu/resources/wgpu_native-version` will be updated by the script to  track which version we depend upon.## TestingThe test suite is divided into multiple parts:* `pytest -v tests` runs the core unit tests.* `pytest -v examples` tests the examples.* `pytest -v wgpu/__pyinstaller` tests if wgpu is properly supported by  pyinstaller.* `pytest -v codegen` lints the generated binding code.There are two types of tests for examples included:### Type 1: Checking if examples can runWhen running the test suite, pytest will run every example in a subprocess, tosee if it can run and exit cleanly. You can opt out of this mechanism byincluding the comment `# run_example = false` in the module.### Type 2: Checking if examples output an imageYou can also (independently) opt-in to output testing for examples, by includingthe comment `# test_example = true` in the module. Output testing means the testsuite will attempt to import the `canvas` instance global from your example, andcall it to see if an image is produced.To support this type of testing, ensure the following requirements are met:* The `WgpuCanvas` class is imported from the `wgpu.gui.auto` module.* The `canvas` instance is exposed as a global in the module.* A rendering callback has been registered with `canvas.request_draw(fn)`.Reference screenshots are stored in the `examples/screenshots` folder, the testsuite will compare the rendered image with the reference.Note: this step will be skipped when not running on CI. Since images will havesubtle differences depending on the system on which they are rendered, thatwould make the tests unreliable.For every test that fails on screenshot verification, diffs will be generatedfor the rgb and alpha channels and made available in the`examples/screenshots/diffs` folder. On CI, the `examples/screenshots` folderwill be published as a build artifact so you can download and inspect thedifferences.If you want to update the reference screenshot for a given example, you can grabthose from the build artifacts as well and commit them to your branch.</longdescription>
</pkgmetadata>