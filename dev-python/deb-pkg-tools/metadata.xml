<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>deb-pkg-tools: Debian packaging tools=====================================.. image:: https://travis-ci.org/xolox/python-deb-pkg-tools.svg?branch=master   :target: https://travis-ci.org/xolox/python-deb-pkg-tools.. image:: https://coveralls.io/repos/xolox/python-deb-pkg-tools/badge.png?branch=master   :target: https://coveralls.io/r/xolox/python-deb-pkg-tools?branch=masterThe Python package `deb-pkg-tools` is a collection of functions to build andinspect `Debian binary packages`_ and repositories of binary packages. Itsprimary use case is to automate builds.Some of the functionality is exposed in the command line interface (documented below)because it's very convenient to use in shell scripts, while other functionalityis meant to be used as a Python API. The package is currently tested on cPython2.7, 3.5+ and PyPy (2.7).Please note that `deb-pkg-tools` is quite opinionated about how Debian binarypackages should be built and it enforces some of these opinions on its users.Most of this can be avoided with optional function arguments and/or environmentvariables. If you find something that doesn't work to your liking and you can'twork around it, feel free to ask for an additional configuration option; I tryto keep an open mind about the possible use cases of my projects... contents::Status------On the one hand the `deb-pkg-tools` package is based on my experiences withDebian packages and repositories over the past couple of years, on the otherhand `deb-pkg-tools` itself is quite young. Then again most functionality iscovered by automated tests; at the time of writing coverage is around 90% (someof the error handling is quite tricky to test if we also want to test thenon-error case, which is of course the main focus :-)Installation------------The `deb-pkg-tools` package is available on PyPI_ which means installationshould be as simple as:.. code-block:: console   $ pip install deb-pkg-toolsThere's actually a multitude of ways to install Python packages (e.g. the `peruser site-packages directory`_, `virtual environments`_ or just installingsystem wide) and I have no intention of getting into that discussion here, soif this intimidates you then read up on your options before returning to theseinstructions ;-).When `deb-pkg-tools` is being used to scan thousands of ``*.deb`` archives asignificant speedup may be achieved using memcached:.. code-block:: console   $ pip install &quot;deb-pkg-tools[memcached]&quot;Under the hood `deb-pkg-tools` uses several programs provided by Debian, thedetails are available in the dependencies_ section. To install these programs:.. code-block:: console  $ sudo apt-get install dpkg-dev fakeroot lintianUsage-----There are two ways to use the `deb-pkg-tools` package: As a command lineprogram and as a Python API. For details about the Python API please refer tothe API documentation available on `Read the Docs`_. The command line interfaceis described below... A DRY solution to avoid duplication of the `deb-pkg-tools --help' text:.... [[[cog.. from humanfriendly.usage import inject_usage.. inject_usage('deb_pkg_tools.cli').. ]]]**Usage:** `deb-pkg-tools [OPTIONS] ...`Wrapper for the deb-pkg-tools Python project that implements various tools toinspect, build and manipulate Debian binary package archives and relatedentities like trivial repositories.**Supported options:**.. csv-table::   :header: Option, Description   :widths: 30, 70   &quot;``-i``, ``--inspect=FILE``&quot;,&quot;Inspect the metadata in the Debian binary package archive given by ``FILE``   (similar to &quot;&quot;dpkg ``--info``&quot;&quot;).&quot;   &quot;``-c``, ``--collect=DIR``&quot;,&quot;Copy the package archive(s) given as positional arguments (and all package   archives required by the given package archives) into the directory given   by ``DIR``.&quot;   &quot;``-C``, ``--check=FILE``&quot;,&quot;Perform static analysis on a package archive and its dependencies in order   to recognize common errors as soon as possible.&quot;   &quot;``-p``, ``--patch=FILE``&quot;,&quot;Patch fields into the existing control file given by ``FILE``. To be used   together with the ``-s``, ``--set`` option.&quot;   &quot;``-s``, ``--set=LINE``&quot;,&quot;A line to patch into the control file (syntax: &quot;&quot;Name: Value&quot;&quot;). To be used   together with the ``-p``, ``--patch`` option.&quot;   &quot;``-b``, ``--build=DIR``&quot;,&quot;Build a Debian binary package with &quot;&quot;dpkg-deb ``--build``&quot;&quot; (and lots of   intermediate Python magic, refer to the API documentation of the project   for full details) based on the binary package template in the directory   given by ``DIR``. The resulting archive is located in the system wide   temporary directory (usually /tmp).&quot;   &quot;``-u``, ``--update-repo=DIR``&quot;,&quot;Create or update the trivial Debian binary package repository in the   directory given by ``DIR``.&quot;   &quot;``-a``, ``--activate-repo=DIR``&quot;,&quot;Enable &quot;&quot;apt-get&quot;&quot; to install packages from the trivial repository (requires   root/sudo privilege) in the directory given by ``DIR``. Alternatively you can   use the ``-w``, ``--with-repo`` option.&quot;   &quot;``-d``, ``--deactivate-repo=DIR``&quot;,&quot;Cleans up after ``--activate-repo`` (requires root/sudo privilege).   Alternatively you can use the ``-w``, ``--with-repo`` option.&quot;   &quot;``-w``, ``--with-repo=DIR``&quot;,&quot;Create or update a trivial package repository, activate the repository, run   the positional arguments as an external command (usually &quot;&quot;apt-get install&quot;&quot;)   and finally deactivate the repository.&quot;   &quot;``--gc``, ``--garbage-collect``&quot;,&quot;Force removal of stale entries from the persistent (on disk) package   metadata cache. Garbage collection is performed automatically by the   deb-pkg-tools command line interface when the last garbage collection   cycle was more than 24 hours ago, so you only need to do it manually   when you want to control when it happens (for example by a daily   cron job scheduled during idle hours :-).&quot;   &quot;``-y``, ``--yes``&quot;,Assume the answer to interactive questions is yes.   &quot;``-v``, ``--verbose``&quot;,Make more noise! (useful during debugging)   &quot;``-h``, ``--help``&quot;,Show this message and exit... [[[end]]]One thing to note is that the operation of ``deb-pkg-tools --update-repo`` canbe influenced by a configuration file. For details about this, please refer tothe documentation on `deb_pkg_tools.repo.select_gpg_key()`_... _dependencies:Dependencies------------The following external programs are required by `deb-pkg-tools` (depending onwhich functionality you want to use of course):=====================  =============Program                Package=====================  =============``apt-ftparchive``     ``apt-utils````apt-get``            ``apt````cp``                 ``coreutils````dpkg-deb``           ``dpkg````dpkg-architecture``  ``dpkg-dev````du``                 ``coreutils````fakeroot``           ``fakeroot````gpg``                ``gnupg````gzip``               ``gzip````lintian``            ``lintian``=====================  =============The majority of these programs/packages will already be installed on mostDebian based systems so you should only need the following to get started:.. code-block:: console    $ sudo apt-get install dpkg-dev fakeroot lintianPlatform compatibility----------------------Several things can be tweaked via environment variables if they don't work foryour system or platform. For example on Mac OS X the ``cp`` command doesn'thave an ``-l`` parameter and the ``root`` user and group may not exist, butdespite these things it can still be useful to test package builds on Mac OSX. The following environment variables can be used to adjust such factors:.. csv-table::   :header-rows: 1   Environment variable,Default value   `$DPT_ALLOW_FAKEROOT_OR_SUDO`_,true   `$DPT_CHOWN_FILES`_,true   `$DPT_FORCE_ENTROPY`_,false   `$DPT_HARD_LINKS`_,true   `$DPT_PARSE_STRICT`_,true   `$DPT_RESET_SETGID`_,true   `$DPT_ROOT_GROUP`_,root   `$DPT_ROOT_USER`_,root   `$DPT_SUDO`_,trueEnvironment variables for boolean options support the strings ``yes``,``true``, ``1``, ``no``, ``false`` and ``0`` (case is ignored).Disabling sudo usage~~~~~~~~~~~~~~~~~~~~To disable any use of ``sudo`` you can use the following:.. code-block:: bash   export DPT_ALLOW_FAKEROOT_OR_SUDO=false   export DPT_CHOWN_FILES=false   export DPT_RESET_SETGID=false   export DPT_SUDO=falseContact-------The latest version of `deb-pkg-tools` is available on PyPI_ and GitHub_. Thedocumentation is hosted on `Read the Docs`_. For bug reports please create anissue on GitHub_. If you have questions, suggestions, etc. feel free to send mean e-mail at `peter@peterodding.com`_.License-------This software is licensed under the `MIT license`_.Â© 2020 Peter Odding... External references:.. _deb_pkg_tools.repo.select_gpg_key(): https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.repo.select_gpg_key.. _Debian binary packages: https://www.debian.org/doc/debian-policy/ch-binary.html.. _$DPT_ALLOW_FAKEROOT_OR_SUDO: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.package.ALLOW_FAKEROOT_OR_SUDO.. _$DPT_CHOWN_FILES: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.package.ALLOW_CHOWN.. _$DPT_FORCE_ENTROPY: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.gpg.FORCE_ENTROPY.. _$DPT_HARD_LINKS: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.package.ALLOW_HARD_LINKS.. _$DPT_PARSE_STRICT: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.package.PARSE_STRICT.. _$DPT_RESET_SETGID: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.package.ALLOW_RESET_SETGID.. _$DPT_ROOT_GROUP: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.package.ROOT_GROUP.. _$DPT_ROOT_USER: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.package.ROOT_USER.. _$DPT_SUDO: https://deb-pkg-tools.readthedocs.io/en/latest/#deb_pkg_tools.repo.ALLOW_SUDO.. _GitHub: https://github.com/xolox/python-deb-pkg-tools.. _MIT license: http://en.wikipedia.org/wiki/MIT_License.. _per user site-packages directory: https://www.python.org/dev/peps/pep-0370/.. _peter@peterodding.com: peter@peterodding.com.. _PyPI: https://pypi.python.org/pypi/deb-pkg-tools.. _Read the Docs: https://deb-pkg-tools.readthedocs.io.. _virtual environments: http://docs.python-guide.org/en/latest/dev/virtualenvs/</longdescription>
</pkgmetadata>