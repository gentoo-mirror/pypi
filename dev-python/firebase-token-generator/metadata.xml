<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Firebase Token Generator - Python[Firebase Custom Login](https://www.firebase.com/docs/web/guide/simple-login/custom.html)gives you complete control over user authentication by allowing you to authenticate userswith secure JSON Web Tokens (JWTs). The auth payload stored in those tokens is availablefor use in your Firebase [security rules](https://www.firebase.com/docs/security/api/rule/).This is a token generator library for Python which allows you to easily create those JWTs.## InstallationThe Firebase Python token generator library is available via pip:```bash$ pip install firebase-token-generator```## A Note About Security**IMPORTANT:** Because token generation requires your Firebase Secret, you should only generatetokens on *trusted servers*. Never embed your Firebase Secret directly into your application andnever share your Firebase Secret with a connected client.## Generating TokensTo generate tokens, you'll need your Firebase Secret which you can find by entering your FirebaseURL into a browser and clicking the &quot;Secrets&quot; tab on the left-hand navigation menu.Once you've downloaded the library and grabbed your Firebase Secret, you can generate a token withthis snippet of Python code:```pythonfrom firebase_token_generator import create_tokenauth_payload = {&quot;uid&quot;: &quot;1&quot;, &quot;auth_data&quot;: &quot;foo&quot;, &quot;other_auth_data&quot;: &quot;bar&quot;}token = create_token(&quot;&lt;YOUR_FIREBASE_SECRET&gt;&quot;, auth_payload)```The payload passed to `create_token()` is made available for use within yoursecurity rules via the [`auth` variable](https://www.firebase.com/docs/security/api/rule/auth.html).This is how you pass trusted authentication details (e.g. the client's user ID)to your Firebase security rules. The payload can contain any data of yourchoosing, however it must contain a &quot;uid&quot; key, which must be a string of lessthan 256 characters. The generated token must be less than 1024 characters intotal.## Token OptionsA second `options` argument can be passed to `create_token()` to modify how Firebase treats thetoken. Available options are:* **expires** (int or datetime) - A timestamp (as number of seconds since the epoch) or `datetime`denoting the time after which this token should no longer be valid.* **notBefore** (int or datetime) - A timestamp (as number of seconds since the epoch) or `datetime`denoting the time before which this token should be rejected by the server.* **admin** (bool) - Set to `True` if you want to disable all security rules for this client. Thiswill provide the client with read and write access to your entire Firebase.* **debug** (bool) - Set to `True` to enable debug output from your security rules. You shouldgenerally *not* leave this set to `True` in production (as it slows down the rules implementationand gives your users visibility into your rules), but it can be helpful for debugging.* **simulate** (bool) - If `True`, Firebase will run security rules but not actually make anydata changes. Note that this is internal-only for now.Here is an example of how to use the second `options` argument:```pythonfrom firebase_token_generator import create_tokenauth_payload = {&quot;uid&quot;: &quot;1&quot;, &quot;auth_data&quot;: &quot;foo&quot;, &quot;other_auth_data&quot;: &quot;bar&quot;}options = {&quot;admin&quot;: True}token = create_token(&quot;&lt;YOUR_FIREBASE_SECRET&gt;&quot;, auth_payload, options)```</longdescription>
</pkgmetadata>