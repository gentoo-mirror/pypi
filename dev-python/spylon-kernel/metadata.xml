<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># spylon-kernel[![Build Status](https://travis-ci.org/maxpoint/spylon-kernel.svg?branch=master)](https://travis-ci.org/maxpoint/spylon-kernel)[![codecov](https://codecov.io/gh/maxpoint/spylon-kernel/branch/master/graph/badge.svg)](https://codecov.io/gh/maxpoint/spylon-kernel)A Scala [Jupyter kernel](http://jupyter.readthedocs.io/en/latest/projects/kernels.html) that uses [metakernel](https://github.com/Calysto/metakernel) in combination with [py4j](https://www.py4j.org/).## Prerequisites* Apache Spark 2.1.1 compiled for Scala 2.11* Jupyter Notebook* Python 3.5+## InstallYou can install the spylon-kernel package using `pip` or `conda`.```bashpip install spylon-kernel# orconda install -c conda-forge spylon-kernel```## Using it as a Scala KernelYou can use spylon-kernel as Scala kernel for Jupyter Notebook. Do this when you wantto work with Spark in Scala with a bit of Python code mixed in.Create a kernel spec for Jupyter notebook by running the following command:```bashpython -m spylon_kernel install```Launch `jupyter notebook` and you should see a `spylon-kernel` as an optionin the *New* dropdown menu.See [the basic example notebook](./examples/basic_example.ipynb) for informationabout how to intiialize a Spark session and use it both in Scala and Python.## Using it as an IPython MagicYou can also use spylon-kernel as a magic in an IPython notebook. Do this whenyou want to mix a little bit of Scala into your primarily Python notebook.```pythonfrom spylon_kernel import register_ipython_magicsregister_ipython_magics()``````scala%%scalaval x = 8x```## Using it as a LibraryFinally, you can use spylon-kernel as a Python library. Do this when youwant to evaluate a string of Scala code in a Python script or shell.```pythonfrom spylon_kernel import get_scala_interpreterinterp = get_scala_interpreter()# Evaluate the result of a scala code block.interp.interpret(&quot;&quot;&quot;    val x = 8    x&quot;&quot;&quot;)interp.last_result()```# Release ProcessPush a tag and submit a source dist to PyPI.```git commit -m 'REL: 0.2.1' --allow-emptygit tag -a 0.2.1 # and enter the same message as the commitgit push origin master # or send a PR# if everything builds / tests cleanly, release to pypimake release```Then update https://github.com/conda-forge/spylon-kernel-feedstock.</longdescription>
</pkgmetadata>