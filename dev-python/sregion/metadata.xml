<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![python package](https://github.com/gbrammer/sregion/actions/workflows/python-package.yml/badge.svg)# sregionParsing of IVOA S_REGION stringsThe STS-C formalism is described at http://www.ivoa.net/Documents/latest/STC-S.html, though [it seems](https://github.com/astropy/regions/issues/21) that it was never adopted as an official standard.  Nevertheless, the `s_region` strings do seem to have been adopted as a sort of pseudostandard in [IVOA-compliant](https://wiki.ivoa.net/twiki/bin/view/IVOA/DCPToolsFITS) datasets / databases.[`astropy-regions`](https://github.com/astropy/regions) would probably be a better place to put this, but I'm not interested in all of the full astropy coordinate compatibility for now.## Examples```python&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from sregion import SRegion## Polygon string#&gt;&gt;&gt; sr = SRegion('POLYGON 0.0 0.0 0.0 1.0 1.0 1.0 1.0 0.0')&gt;&gt;&gt; print(sr.area)[1.0]&gt;&gt;&gt; print(sr.centroid)[array([0.5, 0.5])]## Circle string#&gt;&gt;&gt; for i in range(4,10):&gt;&gt;&gt;     sr = SRegion('CIRCLE 10 10 1', ncircle=2**i)&gt;&gt;&gt;     print(f'ncircle={2**i:&gt;3} {sr.area[0]/np.pi:.5f} {sr.centroid[0]}')ncircle= 16 0.97450 [10. 10.]ncircle= 32 0.99359 [10. 10.]ncircle= 64 0.99839 [10. 10.]ncircle=128 0.99960 [10. 10.]ncircle=256 0.99990 [10. 10.]ncircle=512 0.99997 [10. 10.]# Circle with radius in angular units&gt;&gt;&gt; import astropy.units as u&gt;&gt;&gt; sr = SRegion('CIRCLE 10 10 1&quot;', ncircle=256)&gt;&gt;&gt; print(f'{sr.sky_area(unit=u.arcsec**2)[0]:.5f}')3.14128 arcsec2## From WCS objects#&gt;&gt;&gt; from astropy.wcs import WCS&gt;&gt;&gt; wcs = WCS()&gt;&gt;&gt; wcs.pixel_shape = [601,601]&gt;&gt;&gt; wcs.wcs.cdelt *= 0.1/3600&gt;&gt;&gt; wcs.wcs.crpix[1] = 300&gt;&gt;&gt; wcs.wcs.crval = [0,0]&gt;&gt;&gt; print(SRegion(wcs).sky_area())[&lt;Quantity 1. arcmin2&gt;]## From arrays#&gt;&gt;&gt; x = np.array([0, 0, 1, 1])&gt;&gt;&gt; y = np.array([0, 1, 1, 0])&gt;&gt;&gt; sr = SRegion(np.array([x, y]).T)&gt;&gt;&gt; print(sr.area)[1.0]&gt;&gt;&gt; print(sr.centroid)[array([0.5, 0.5])]# # To s_region string#&gt;&gt;&gt; print(sr.s_region)POLYGON 0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000## To matplotlib path object(s)#&gt;&gt;&gt; print(sr.path[0].contains_point([0.5, 0.5]))True&gt;&gt;&gt; print(sr.path[0].contains_points([[0.5, 0.5], [2.0, 2.0]]))[ True False]## To matplotlib patch(es)#&gt;&gt;&gt; import matplotlib.pyplot as plt&gt;&gt;&gt; fig, ax = plt.subplots(1,1,figsize=(2,2))&gt;&gt;&gt; for p in sr.patch(alpha=0.5, fc='r'):&gt;&gt;&gt;     ax.add_patch(p)&gt;&gt;&gt; ax.set_xlim(-1, 2)&gt;&gt;&gt; ax.set_ylim(*ax.get_xlim())&gt;&gt;&gt; ax.grid()## To shapely polygons# &gt;&gt;&gt; sr.shapely[&lt;shapely.geometry.polygon.Polygon at 0x18055b910&gt;]## To DS9 region(s)#&gt;&gt;&gt; for r in sr.region:&gt;&gt;&gt;    print(r)polygon(0.000000,0.000000,0.000000,1.000000,1.000000,1.000000,1.000000,0.000000)&gt;&gt;&gt; sr.ds9_properties = 'color=red width=2'&gt;&gt;&gt; sr.label = 'my_group'&gt;&gt;&gt; for r in sr.region:&gt;&gt;&gt;    print(r)polygon(0.000000,0.000000,0.000000,1.000000,1.000000,1.000000,1.000000,0.000000) # color=red width=2 text={my_group}    ```</longdescription>
</pkgmetadata>