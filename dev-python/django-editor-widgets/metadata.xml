<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django-editor-widgetsThis package provides some custom widgets to use monaco or tinymce editors in django admin.**remark**: From version 4.0 static files for tinymce and monaco editors are removed.## InstallationTo install the package by `pip` run following command```sh# From Github (latest updates)$ pip install git+https://github.com/giorgi94/django-editor-widgets.git# Or$ pip install django-editor-widgets```## UsageTo start using the package in your project, you need to open `settings.py` file and add following lines```python# settings.pyfrom pathlib import Path# import configurations for editorfrom djangoeditorwidgets.config import init_web_editor_config# set base dir by Path instead of os.pathBASE_DIR = Path(__file__).resolve().parent.parent# Application definitionINSTALLED_APPS = [    ...    'djangoeditorwidgets',    ...]MEDIA_URL = &quot;/media/&quot;MEDIA_ROOT = BASE_DIR / &quot;media&quot;STATIC_URL = &quot;/static/&quot;STATIC_ROOT = BASE_DIR / &quot;static&quot;WEB_EDITOR_DOWNLOAD, WEB_EDITOR_CONFIG = init_web_editor_config(    # set the directory where files are downloaded    BASE_DIR / &quot;static_cdn&quot;,    # set static url prefix    STATIC_URL)```In current version uses `Path` instead of `os.path` to manage files and directories. If needed configuration parameters can be written manually```pythonfrom os.path import joinWEB_EDITOR_DOWNLOAD = {    &quot;to&quot;: BASE_DIR / &quot;static_cdn&quot;,    &quot;tinymce&quot;: {        &quot;url&quot;: &quot;https://download.tiny.cloud/tinymce/community/tinymce_5.10.3.zip&quot;,        &quot;target&quot;: &quot;tinymce/js/tinymce&quot;,    },    &quot;monaco&quot;: {        &quot;url&quot;: &quot;https://registry.npmjs.org/monaco-editor/-/monaco-editor-0.32.1.tgz&quot;,        &quot;target&quot;: &quot;package/min&quot;,    },}WEB_EDITOR_CONFIG = {    &quot;tinymce&quot;: {        &quot;js&quot;: [            join(STATIC_URL, &quot;tinymce/tinymce.min.js&quot;),            join(STATIC_URL, &quot;djangoeditorwidgets/tinymce/tinymce.config.js&quot;),            join(STATIC_URL, &quot;djangoeditorwidgets/tinymce/tinymce.init.js&quot;),        ],        &quot;css&quot;: {            &quot;all&quot;: [                join(STATIC_URL, &quot;djangoeditorwidgets/tinymce/tinymce.custom.css&quot;),            ]        },    },    &quot;monaco&quot;: {        &quot;js&quot;: [            join(STATIC_URL, &quot;monaco/vs/loader.js&quot;),            join(STATIC_URL, &quot;djangoeditorwidgets/monaco/monaco.config.js&quot;),        ],        &quot;css&quot;: {            &quot;all&quot;: [                join(STATIC_URL, &quot;djangoeditorwidgets/monaco/monaco.custom.css&quot;),            ]        },    },}```### CommandsStatic files are removed from the package, instead it provides management command to download and extract files to given  location```bash$ python manage.py download_editpr_scripts```### TinyMCETo use tinymce editor in admin, we need to change default widget in the form with `TinymceWidget````python# forms.pyfrom django import formsfrom djangoeditorwidgets.widgets import TinymceWidgetfrom .models import TextModelclass TextModelForm(forms.ModelForm):    class Meta:        model = TextModel        fields = '__all__'        widgets = {            'text': TinymceWidget(name=&quot;default&quot;)        }```By `name` argument we can modify selector and can define multiple configs for tinymce editor.### Monaco EditorIn lastest verions of `sqlite3` and `mariadb` we now have `json field`, it is more limited compared to `postgresql` but can handle json validation and parsing```python# models.pyimport jsonfrom django.db import modelsclass JSONModel(models.Model):    title = models.CharField(max_length=50)    text = models.JSONField(null=True)    def __str__(self):        return self.title# forms.pyfrom django import formsfrom djangoeditorwidgets.widgets import MonacoEditorWidgetfrom .models import JSONModelclass JsonModelForm(forms.ModelForm):    class Meta:        model = JSONModel        fields = &quot;__all__&quot;        widgets = {            &quot;text&quot;: MonacoEditorWidget(name=&quot;default&quot;, language=&quot;json&quot;, wordwrap=True)        }```## RemarkUnlike other django package which are for Rich web editors, this package allows developer to fully use capablities and custom plugins for the web editor, like tinymce or monaco, since configurations doesn't go through django settings.</longdescription>
</pkgmetadata>