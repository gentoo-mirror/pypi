<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Metapype for EML&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/PASTAplus/metapype-eml/master/docs/metapype.png&quot; width=&quot;300&quot; height=&quot;200&quot;/&gt;&lt;/p&gt;#### A lightweight Python 3 library for generating EML metadata[comment]: &lt;&gt; ([![Build Status]&amp;#40;https://travis-ci.org/PASTAplus/metapype-eml.svg?branch=master&amp;#41;]&amp;#40;https://travis-ci.org/PASTAplus/metapype-eml&amp;#41;)![metapype](https://github.com/PASTAplus/metapype-eml/workflows/metapype-build/badge.svg)&lt;hr /&gt;Metapype is a Python 3 library for building, saving, and exporting scientificmetadata using a flexible metadata content model in a hierarchical tree-likestructure. Metapype only provides the primitives (as a Python applicationprogrammable interface) for operating on metadata; it is expected that clientapplications will use the Metapype API to build more robust and user-friendlyapplications.This version of Metapype is designed to reflect the content structure of theEcological Metadata Language (EML) XML schema (version 2.2.0); it is not,however, locked into a specific version of EML. As such, Metapype can supportmultiple versions of metadata standards.Metapype is divided into a metadata content model and a set of validationrules that enforce model compliance to a specific metadata standard, includingits version. Compliance only implies that the metadata model conforms to thesyntactical requirements of the metadata standard, but not necessarily tosemantic requirements, like adherence to a particular controlled vocabularyfor keywords or requiring additional descriptive content within the model whenthe standard does not require it. As an extension to the validation componentof Metapype, there is also an evaluation process that ensures the modelconforms to practices and requirements beyond the metadata standard.#### Metadata Content ModelThe metadata content model is designed as an [orderedtree](https://en.wikipedia.org/wiki/Tree_(graph_theory)#Ordered_tree). Nodechildren follow a rule-based order and can be reached via directed edges fromtheir parent node. Each child node can have only one parent, which isrepresented by a single reverse edge from the child to its parent; only theroot node may be without a &quot;true&quot; parent.Metapype uses a `Node` class for modeling elements of the EML XML schema. Nodeinstances must be constructed with a `name` parameter, which corresponds tothe element name as declared in the schema\*. Node edges for either parent orchildren are constructed of the node's respective address in memory. Nodeinstances capture the primary characteristics of the corresponding EML elementbeing modeled, including XML attributes, content, and sub-elements of complextypes. Attributes of a node instance may be accessed through setters andgetters (see the Node API).&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/PASTAplus/metapype-eml/master/docs/node.png&quot; /&gt;&lt;/p&gt;A compliant EML 2.2.0 metadata content model tree is found in the followingdiagram (this diagram represents an instance of a Metapype tree model):&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/PASTAplus/metapype-eml/master/docs/eml_model.png&quot;/&gt;&lt;/p&gt;#### Metadata Validation RulesMetadata validation is critical to ensure that the working model complies withall requirements and constraints declared within the metadata standard, and inthis case, the EML 2.2.0 XML schema. A valid metadata content model implies thatevery node of the tree complies with the syntax of the metadata standard beingmodeled. Metapype can process the model instance through a series of*validation* rules to ensure compliance with the EML XML schema. A criticalexception is raised if any node within the model fails validation duringprocessing.A metadata validation rule is a codified set of constraints declaredin a JSON format. A rule is divided into three distinct sections that are usedto verify: 1) attribute information, 2) sub-element (or children) definitions,and 3) content information. Rule functions implicitlyreturn `None` unless an exception occurs during the evaluation process;exceptions are of the class `exceptions.MetapypeRuleError`.The following is an example of the &quot;access&quot; rule:```JSON&quot;accessRule&quot; : [    {        &quot;id&quot;: [false],        &quot;system&quot;: [false],        &quot;scope&quot;: [false, &quot;document&quot;, &quot;system&quot;],        &quot;order&quot;: [false, &quot;allowFirst&quot;, &quot;denyFirst&quot;],        &quot;authSystem&quot;: [true]    },    [        [[&quot;allow&quot;, 1, 1], [&quot;deny&quot;, 1, 1], 1, null]    ],    {        &quot;content_rules&quot; : [&quot;emptyContent&quot;]    }],```This `access_rule` example demonstrates the use of all three rule sections: 1)The element specific constraints validate the value of a specific node attribute.In this case, the `order` attribute, if defined, must have a value of either`allowFirst` or `denyFirst` only. 2) The XML attributes rule defines theset of acceptable attributes to be `id`, `system`, `order`, and `authSystem`;all defined attributes are *optional* except the `authSystem`,which is *required*. And finally, 3) the sub-element children section defines asingle node choice of either an `allow` or `deny` child, along with thecardinality of 1 to infinity.### Metadata Evaluation RulesSimilar to the process used for validation of a model instance to the EML XMLschema, Metapype also supports a process to *evaluate* a model instanceagainst rules that are more semantic in nature. Evaluation rules differ fromvalidation rules in that they do not result in an exception, but ratherevaluate one or more nodes to somewhat &quot;soft&quot; requirements (e.g., the numberof active words in a title or that an `individaulName` node has both `surName`**AND** `givenName` children, even though the EML XML schema does not requireboth) and only return information about the evaluation outcome for a node.And because evaluation rules do not have to test every node in the modelinstance, there can be fewer rules that need to be executed.Evaluation rules are written as Python conditional statements (e.g., `if`,`else`, or `elif`), but do not follow any typical pattern because of the widedifference in the constraints declared for various nodes. Evaluation rulessimply return a Unicode string value with an explanation of the evaluationresult, which could be the string `PASS` if the evaluation is acceptable or arecommendation for improving the node content. The user accessible function`evaluate.tree` requires an empty Python dictionary to be passed as aparameter. This dictionary is recursively populated with evaluation resultsfrom the `evaluate.node` function and assigned to the `node_id` key.As an example, the following evaluation rule inspects the title node:```Pythondef _title_rule(node: Node) -&gt; str:    evaluation = PASS    title = node.content    if title is not None:        length = len(title.split(' '))        if length &lt; 10:            _ = ('&quot;{0}&quot; is too short, should '                 'have at least 10 words')            evaluation = _.format(title)    return evaluation```The resulting dictionary from running the `evaluate.tree` function returnsthe following:```Text{    140101084713592: '(title) &quot;Green sea turtle counts: Tortuga Island 20017&quot; is too short, should have at least 10 words',    140101084713704: '(individualName) Should have both a &quot;givenName&quot; and &quot;surName&quot;',    140101084713872: '(individualName) PASS'}```### Using Metapype for EMLThe Metapype Python API can be used to generate metadata that is compliantwith the Ecological Metadata Language standard. Using Metapype for thispurpose is typically separated into two steps: first, build a Metapype modelinstance beginning with an &quot;eml&quot; node as the *root* node, followed byvalidating the model instance to ensure it complies with the EML standard.Validation can be performed on a single node using the `validate.node`function or on an entire model tree beginning with a specified *root* nodeusing the `validate.tree` function (to validate for EML compliance, the modelroot node as defined by  the &quot;eml&quot; name should be passed).The following code example demonstrates these two steps:```Pythonimport loggingfrom metapype.eml.exceptions import MetapypeRuleErrorimport metapype.eml.names as namesimport metapype.eml.validate as validatefrom metapype.model.node import Nodedef main():    eml = Node(names.EML)    eml.add_attribute('packageId', 'edi.23.1')    eml.add_attribute('system', 'metapype')    access = Node(names.ACCESS, parent=eml)    access.add_attribute('authSystem', 'pasta')    access.add_attribute('order', 'allowFirst')    eml.add_child(access)    allow = Node(names.ALLOW, parent=access)    access.add_child(allow)    principal = Node(names.PRINCIPAL, parent=allow)    principal.content = 'uid=gaucho,o=EDI,dc=edirepository,dc=org'    allow.add_child(principal)    permission = Node(names.PERMISSION, parent=allow)    permission.content = 'all'    allow.add_child(permission)    dataset = Node(names.DATASET, parent=eml)    eml.add_child(dataset)    title = Node(names.TITLE, parent=dataset)    title.content = 'Green sea turtle counts: Tortuga Island 20017'    dataset.add_child(title)    creator = Node(names.CREATOR, parent=dataset)    dataset.add_child(creator)    individualName_creator = Node(names.INDIVIDUALNAME, parent=creator)    creator.add_child(individualName_creator)    surName_creator = Node(names.SURNAME, parent=individualName_creator)    surName_creator.content = 'Gaucho'    individualName_creator.add_child(surName_creator)    contact = Node(names.CONTACT, parent=dataset)    dataset.add_child(contact)    individualName_contact = Node(names.INDIVIDUALNAME, parent=contact)    contact.add_child(individualName_contact)    surName_contact = Node(names.SURNAME, parent=individualName_contact)    surName_contact.content = 'Gaucho'    individualName_contact.add_child(surName_contact)    try:        validate.tree(eml)    except MetapypeRuleError as e:        logging.error(e)            return 0if __name__ == &quot;__main__&quot;:    main()``` In the above example, the &quot;eml&quot; node is created and used as the anchor node for the root of the model tree. Sub-element descendant nodes are created and then added to higher-level nodes as children. Although this example is quite small, it does produce metadata that conforms to EML 2.1.1 standard.Metapype can convert a model instance tree to either EML-specific *XML* or to*JSON* Unicode strings by using either the `export.to_xml` or `io.to_json`functions, respectively. The string value can then be saved directly to the filesystem or passed to other functions for additional processing. Metapype can alsoconvert a Metapype valid JSON Unicode string back into a model instance tree byusing the `io.from_json` function. This is important for saving incomplete orsub-tree instances to the file system (e.g., for reusable model components),which can be reloaded at a later time. The following code example demonstratesusing both the *XML* and *JSON* functions:```Pythonimport jsonimport metapype.eml.exportimport metapype.eml.names as namesimport metapype.model.metapype_iofrom metapype.model.node import Node# Write EML XMLeml = Node(names.EML)eml.add_attribute('packageId', 'edi.23.1')eml.add_attribute('system', 'metapype')xml_str = metapype.eml.export.to_xml(eml)with open('test_eml.xml', 'w') as f:    f.write(xml_str)# Write JSONjson_str = metapype.model.metapype_io.to_json(eml)with open('test_eml.json', 'w') as f:    f.write(json_str)# Read JSONwith open('test_eml.json', 'r') as f:    json_str = f.read()eml = metapype.model.metapype_io.from_json(json.loads(json_str))```&lt;hr/&gt;\*Actually, the metadata content model may contain any hierarchical content thatcan be entered into the existing Node data structure, but will not validate asan EML metadata content model either at the node or the tree level.</longdescription>
</pkgmetadata>