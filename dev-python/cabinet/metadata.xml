<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cabinetA Python library to easily manage data with MongoDB and across other files.Supports a cli, email, and event logging.## MongoDB Update! - 2023-06-25- In this latest release, the tool has been redesigned from the ground up to use MongoDB.- MongoDB elevates Cabinet to the best of both worlds: a secure database with the ability to edit   as if it were a JSON structure.- Every function has been tested for compatibility with earlier releases, but it's likely  there will be some edge case bugs to iron out. I use this tool extremely often in my day-to-day  use, so these should be patched quickly, once discovered. Please report issues as you find them.## Features- Read and write data in MongoDB and/or the JSON files of your choice- Provides easy shortcuts to MongoDB actions- Log to a file/directory of your choice without having to configure `logger` each time- Send/receive mail using `cabinet.Cabinet().mail()`## Structure- Data is stored in MongoDB; simply plug in your credentials.- Logs are written to `~/.cabinet/log/LOG_DAILY_YYYY-MM-DD` by default  - this can be changed as needed (per log or otherwise)## Installation and Setup```bash  python3 -m pip install cabinet  cabinet --config```## CLI usage```Usage: cabinet [OPTIONS]Options:  -h, --help              Show this help message and exit  --configure, -config    Configure  --export                Export the data in MongoDB to a JSON file  --edit, -e              Edit MongoDB in the default editor as a JSON file  --edit-file, -ef        Edit a specific file  --no-create             (for -ef) Do not create file if it does not exist  --get, -g               Get a property from MongoDB (nesting supported)  --put, -p               Put a property into MongoDB (nesting supported)  --remove, -rm           Removes a property from MongoDB  --get-file              Returns the file specified  --strip                 (for --get-file) Whether to strip file content whitespace  --log, -l               Log a message to the default location  --level                 (for -l) Log level [debug, info, warn, error, critical]  -v, --version           show version number and exitMail:  --mail                Sends an email  --subject SUBJECT, -s SUBJECT                        Email subject  --body BODY, -b BODY  Email body  --to TO_ADDR, -t TO_ADDR```## Configuration- Upon first launch, the tool will prompt you to enter your MongoDB credentials, as well as  the cluster name and Database name. These are stored only within the package, as a file named  `cabinet_config.json`.### edit_file() shortcuts- see example below to enable something like  - `cabinet -ef shopping` from the terminal    - rather than `cabinet -ef &quot;/home/{username}/path/to/shopping_list.md&quot;`  - or `cabinet.Cabinet().edit(&quot;shopping&quot;)`    - rather than `cabinet.Cabinet().edit(&quot;/home/{username}/path/to/whatever.md&quot;)`file:```# example only; these commands will be unique to your setup{  &quot;path&quot;: {    &quot;edit&quot;: {      &quot;shopping&quot;: {        &quot;value&quot;: &quot;/home/{username}/path/to/whatever.md&quot;,      },      &quot;todo&quot;: {        &quot;value&quot;: &quot;/home/{username}/path/to/whatever.md&quot;,      }    }  }}```set from terminal:```cabinet -p edit shopping value &quot;/home/{username}/path/to/whatever.md&quot;cabinet -p edit todo value &quot;/home/{username}/path/to/whatever.md&quot;```### mail- It is NEVER a good idea to store your password in plaintext; for this reason, I strongly recommend a &quot;throwaway&quot; account that is only used for sending emails- Gmail (as of May 2022) and most other mainstream email providers won't work with this; for support, search for sending mail from your email provider with `smtplib`.- In MongoDB, add the `email` object to make your settings file look like this example:file:```{    &quot;email&quot;: {        &quot;from&quot;: &quot;throwaway@example.com&quot;,        &quot;from_pw&quot;: &quot;example&quot;,        &quot;from_name&quot;: &quot;Raspberry Pi&quot;,        &quot;to&quot;: &quot;destination@protonmail.com&quot;,        &quot;smtp_server&quot;: &quot;example.com&quot;,        &quot;imap_server&quot;: &quot;example.com&quot;,        &quot;port&quot;: 123    }}```set from terminal:```cabinet -p email from throwaway@example.comcabinet -p email from_pw example...```## Examples### `put`python:```from cabinet import Cabinetcab = Cabinet()cab.put(&quot;employee&quot;, &quot;Tyler&quot;, &quot;salary&quot;, 7.25)```or terminal:```cabinet -p employee Tyler salary 7.25```results in this structure in MongoDB:```{    &quot;employee&quot;: {        &quot;Tyler&quot;: {            &quot;salary&quot;: 7.25 # or &quot;7.25&quot; if done from terminal        }    }}```### `get`python:```from cabinet import Cabinetcab = Cabinet()print(cab.get(&quot;employee&quot;, &quot;Tyler&quot;, &quot;salary&quot;))```or terminal:```cabinet -g employee Tyler salary```results in:```7.25```### `remove`python:```from cabinet import Cabinetcab = Cabinet()cab.remove(&quot;employee&quot;, &quot;Tyler&quot;, &quot;salary&quot;)```or terminal:```cabinet -rm employee Tyler salary```results in this structure in MongoDB:```{    &quot;employee&quot;: {        &quot;tyler&quot;: {}    }}```### `edit_file`python:```from cabinet import Cabinetcab = Cabinet()# if put(&quot;path&quot;, &quot;edit&quot;, &quot;shopping&quot;, &quot;/path/to/shopping.md&quot;) has been called, this will edit the file assigned to that shortcut.# opens file in Vim, saves upon exitcab.edit(&quot;shopping&quot;)# or you can edit a file directly...cab.edit(&quot;/path/to/shopping.md&quot;)```terminal:```# assumes path -&gt; edit -&gt; shopping -&gt; path/to/shopping.md has been setcabinet -ef shopppingor cabinet -ef &quot;/path/to/shopping.md&quot;```### `mail`python:```from cabinet import Mailmail = Mail()mail.send('Test Subject', 'Test Body')```terminal:```cabinet --mail --subject &quot;Test Subject&quot; --body &quot;Test Body&quot;# orcabinet --mail -s &quot;Test Subject&quot; -b &quot;Test Body&quot;```### `log`python:```from cabinet import Cabinetcab = Cabinet()# writes to a file named LOG_DAILY_YYYY-MM-DD in the default log folder (or cab.get('path', 'log')) inside a YYYY-MM-DD foldercab.log(&quot;Connection timed out&quot;) # defaults to 'info' if no level is setcab.log(&quot;This function hit a breakpoint&quot;, level=&quot;debug&quot;)cab.log(&quot;Looks like the server is on fire&quot;, level=&quot;critical&quot;)cab.log(&quot;This is fine&quot;, level=&quot;info&quot;)# writes to a file named LOG_TEMPERATUREcab.log(&quot;30&quot;, log_name=&quot;LOG_TEMPERATURE&quot;)# writes to a file named LOG_TEMPERATURE in /home/{username}/weathercab.log(&quot;30&quot;, log_name=&quot;LOG_TEMPERATURE&quot;, file_path=&quot;/home/{username}/weather&quot;)    # format    # 2021-12-29 19:29:27,896 — INFO — 30```terminal:```# defaults to 'info' if no level is setcab -l &quot;Connection timed out&quot; # -l and --log are interchangeablecab --log &quot;Connection timed out&quot;# change levels with --levelcab --log &quot;Server is on fire&quot; --level &quot;critical&quot;```## Dependencies- Python &gt;= 3.6- smtplib## Disclaimers- Although I've done quite a bit of testing, I can't guarantee everything that works on my machine will work on yours. Always back up your data to multiple places to avoid data loss.- If you find any issues, please contact me... or get your hands dirty and raise a PR!## Unit Tests- Unit tests are available in `test/`; use `pytest test/` to run them.## Author- Tyler Woodfin  - [GitHub](https://www.github.com/tylerjwoodfin)  - [Website](http://tyler.cloud)</longdescription>
</pkgmetadata>