<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Python bindings for libarc2## IntroductionThis library presents a python interface to the low-level `libarc2` libraryused to interface with ArC TWOâ„¢. Most of the user-facing facilities of`libarc2` are present in this library. That being said, `pyarc2` itself isstill relatively low-level and a general understanding of the internals ofArC TWO is required.## Use`pyarc2` maps most of the functionality of `libarc2` so the API translatesfairly transparent. Most of the interaction with ArC TWO will be through the`Instrument` class that encapsulates the implemented functionality of`libarc2`. The library will keep being updated as new functionality is added.For instance to read the current between two channels you can write```pythonfrom pyarc2 import Instrument, find_ids# low voltage channel (typically grounded)LOWV = 7# high voltage channelHIGHV = 33# read-out voltageVREAD = 0.2# Get the ID of the first available ArC TWOarc2id = find_ids()[0]# firmware; shipped with your boardfw = 'arc2fw.bin'# connect to the boardarc = Instrument(arc2id, fw)current = arc.read_one(LOWV, HIGHV, VREAD)print('I = %g A' % current)```## Additional functionality`pyarc2` can also be used to implement new plugins based on `libarc2`.  Accessto the lower level object is done via `Instrument::inner()` and`Instrument::inner_mut()`. These plugins can fully leverage `libarc2`functionality but require some familiarity with Rust and the `libarc2` API.</longdescription>
</pkgmetadata>