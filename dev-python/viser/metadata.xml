<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;h1&gt;  viser&lt;/h1&gt;**`pip install viser`** &amp;nbsp;&amp;nbsp;&amp;bull;&amp;nbsp;&amp;nbsp; **[[API Reference](https://nerfstudio-project.github.io/viser) ]**![pyright](https://github.com/nerfstudio-project/viser/workflows/pyright/badge.svg)![mypy](https://github.com/nerfstudio-project/viser/workflows/mypy/badge.svg)![typescript](https://github.com/nerfstudio-project/viser/workflows/typescript-compile/badge.svg)[![pypi](https://img.shields.io/pypi/pyversions/viser)](https://pypi.org/project/viser)---`viser` is a library for interactive 3D visualization + Python, inspired bytools like [Pangolin](https://github.com/stevenlovegrove/Pangolin),[rviz](https://wiki.ros.org/rviz/), and[meshcat](https://github.com/rdeits/meshcat).&gt; **Warning**&gt; `viser` is in a working state, but under development. Large changes may be made,&gt; and backwards compatibility can't yet be guaranteed.As a standalone visualization tool, `viser` features include:- Web interface for easy use on remote machines.- Python API for sending 3D primitives to the browser.- Python-configurable inputs: buttons, checkboxes, text inputs, sliders,  dropdowns, gizmos.- Support for multiple panels and view-synchronized connections.The `viser.infra` backend can also be used to build custom web applications(example:[the Nerfstudio viewer](https://github.com/nerfstudio-project/nerfstudio)). Itsupports:- Websocket / HTTP server management, on a shared port.- Asynchronous server/client communication infrastructure.- Client state persistence logic.- Typed serialization; synchronization between Python dataclass and TypeScript  interfaces.## Running examples```bash# Clone the repository.git clone https://github.com/nerfstudio-project/viser.git# Install the package.# You can also install via pip: `pip install viser`.cd ./viserpip install -e .# Run an example.pip install -e .[examples]python ./examples/4_gui.py```After an example script is running, you can connect by navigating to the printedURL (default: `http://localhost:8080`).## Setup (client development)This is only needed for client-side development. The automatically hosted viewershould be sufficient otherwise.```bashcd ./viser/viser/clientyarnyarn start```## Demos### Interactive SMPL-X Examplehttps://user-images.githubusercontent.com/6992947/228734499-87d8a12a-df1a-4511-a4e0-0a46bd8532fd.mov### Interactive NeRF rendering(code not released)https://user-images.githubusercontent.com/6992947/232163875-ff788455-f074-4bd3-9154-5330b5ed4733.mov</longdescription>
</pkgmetadata>