<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>SDIF for Python===============-  Author: Eduardo Moguillansky-  Contact: ``eduardo.moguillansky@gmail.com``This is a python wrapper to IRCAMâ€™s sdif library(http://sourceforge.net/projects/sdif/files/sdif/) to read and writeSDIF files. It consists of a core written in Cython and some otherutilities written in Python. The SDIF library is included in the packageand built together with the python wrapper. **NB**: This software is released under the GPL v3 license.--------------Install-------.. code:: bash   pip install pysdif3--------------Build from source-----------------.. code:: bash   git clone https://github.com/gesellkammer/pysdif3   cd pysdif3   python3 setup.py install--------------Introduction------------Sdif files are used to store time-based analysis. A Sdif file consistsof time-tagged frames, each frame consisting of one or more matrices.Read a Sdif file, read only selected matrices~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python          from pysdif import *   sdif = SdifFile(&quot;path.sdif&quot;)   # get metadata   print(sdif.get_NVTs())   for frame in sdif:       print(frame.time, frame.signature)       for matrix in frame:           if matrix.signature == b'1MAT':               print(matrix.get_data())Write a Sdif file modifying a previous one~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   from pysdif import *   infile = SdifFile(&quot;source.sdif&quot;)   outfile = SdifFile(&quot;out.sdif&quot;, &quot;w&quot;).clone_definitions(infile)   for inframe in infile:       if inframe.signature != b'1TRC':           continue       with outfile.new_frame(inframe.signature, inframe.time) as outframe:           for matrix in inframe:               # 1TRC has columns index, freq, amp, phase               data = matrix.get_data(copy=True)               # modify frequency               data[:,1] *= 2               outframe.add_matrix(matrix.signature, data)   outfile.close()Write a SDIF file from scratch~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.. code:: python   from pysdif import *   import numpy as np   sdif = SdifFile(&quot;rbep.sdif&quot;, &quot;w&quot;)   # Add some metadata. This is optional   sdif.add_NVT({'creator': 'pysdif3'})   # Add any matrix definitions. In this case we add only one definition   # This is a matrix named &quot;RBEP&quot; with 6 columns   # Each row in this matrix represents a breakpoint within a frame   # Index: partial index to which a breakpoint belongs   # Frequency: the freq. of the breakpoint   # Amplitude: the amplitude of the breakpoint   # Phase: the phase   # Bandwidth: the &quot;noisyness&quot; of the breakpoint   # Offset: the time offset in relation to the frame time   sdif.add_matrix_type(&quot;RBEP&quot;, &quot;Index, Frequency, Amplitude, Phase, Bandwidth, Offset&quot;)   # After all matrix types are defined we define the frames. A frame is defined   # in terms of the matrices it accepts.   # Here we define a frame named &quot;RBEP&quot; which takes only matrices of type &quot;RBEP&quot;   sdif.add_frame_type(&quot;RBEP&quot;, [&quot;RBEP ReassignedBandEnhancedPartials&quot;])   # Now we need to add the data. Since there is just one matrix per frame   # in this sdif we can use the shortcut sdif.new_frame_one_matrix which    # creates a frame and adds a matrix all at once   # The data is just fake data for the sake of an example   data = np.array([       [1, 440, 0.1, 0, 0, 0],       [2, 1000, 0.2, 0, 0, 0],    ], dtype=float)   sdif.new_frame_one_matrix(frame_sig=&quot;RBEP&quot;, time=0.5, matrix_sig=&quot;RBEP&quot;, data=data)   # A second frame   data = np.array([       [1, 442, 0.1, 0, 0, 0],       [2, 1100, 0.1, 0, 0, 0]   ], dtype=float)   sdif.new_frame_one_matrix(frame_sig=&quot;RBEP&quot;, time=0.6, matrix_sig=&quot;RBEP&quot;, data=data)   sdif.close()--------------Documentation-------------https://pysdif3.readthedocs.io/</longdescription>
</pkgmetadata>