<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># bcpy&lt;table&gt;&lt;tr&gt;  &lt;td&gt;Latest Release&lt;/td&gt;  &lt;td&gt;    &lt;a href=&quot;https://pypi.org/project/bcpy/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/bcpy.svg&quot; alt=&quot;latest release&quot; /&gt;    &lt;/a&gt;  &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;License&lt;/td&gt;  &lt;td&gt;    &lt;a href=&quot;https://github.com/titan550/bcpy/blob/master/LICENSE&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/l/bcpy.svg&quot; alt=&quot;license&quot; /&gt;    &lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Build Status (master)&lt;/td&gt;  &lt;td&gt;    &lt;a href=&quot;https://travis-ci.org/titan550/bcpy&quot;&gt;    &lt;img src=&quot;https://api.travis-ci.org/titan550/bcpy.svg?branch=master&quot; alt=&quot;travis build status&quot; /&gt;    &lt;/a&gt;  &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;## What is it?This package is a wrapper for Microsoft's SQL Server bcp utility. Current database drivers available in Python are not fast enough for transferring millions of records (yes, I have tried [pyodbc fast_execute_many](https://github.com/mkleehammer/pyodbc/wiki/Features-beyond-the-DB-API#fast_executemany)). Despite the IO hits, the fastest option by far is saving the data to a CSV file in file system (preferably /dev/shm tmpfs) and using the bcp utility to transfer the CSV file to SQL Server.## How Can I Install It?1. Make sure your computeer has the [requirements](#requirements).1. You can download and install this package from PyPI repository by running the command below.```bashpip install bcpy```## ExamplesFollowing examples show you how to load (1) flat files and (2) DataFrame objects to SQL Server using this package.### Flat FileFollowing example assumes that you have a comma separated file with no qualifier in path 'tests/data1.csv'. The code below sends the the file to SQL Server.```pythonimport bcpysql_config = {    'server': 'sql_server_hostname',    'database': 'database_name',    'username': 'test_user',    'password': 'test_user_password1234'}sql_table_name = 'test_data1'csv_file_path = 'tests/data1.csv'flat_file = bcpy.FlatFile(qualifier='', path=csv_file_path)sql_table = bcpy.SqlTable(sql_config, table=sql_table_name)flat_file.to_sql(sql_table)```### DataFrameThe following example creates a DataFrame with 100 rows and 4 columns populated with random data and then it sends it to SQL Server.```pythonimport bcpyimport numpy as npimport pandas as pdsql_config = {    'server': 'sql_server_hostname',    'database': 'database_name',    'username': 'test_user',    'password': 'test_user_password1234'}table_name = 'test_dataframe'df = pd.DataFrame(np.random.randint(-100, 100, size=(100, 4)),                  columns=list('ABCD'))bdf = bcpy.DataFrame(df)sql_table = bcpy.SqlTable(sql_config, table=table_name)bdf.to_sql(sql_table)```## RequirementsYou need a working version of Microsoft bcp installed in your system. Your PATH environment variable should contain the directory of the bcp utility. Following are the installation tutorials for different operating systems.- [Dockerfile (Ubuntu 18.04)](./bcp.Dockerfile)- [Linux](https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools)- [Mac](https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-2017#macos)- [Windows](https://docs.microsoft.com/en-us/sql/tools/bcp-utility)</longdescription>
</pkgmetadata>