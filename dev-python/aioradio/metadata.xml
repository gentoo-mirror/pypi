<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aioradioGeneric asynchronous i/o python utilities for AWS services (SQS, S3, DynamoDB, Secrets Manager), Redis, MSSQL (pyodbc), JIRA and more.## AWS S3 example codeaioradio abstracts using aiobotocore and aioboto3 making async AWS funtion calls simple one liners.Besides what is shown below in the examples, there is also support for SQS, DynamoDB and Secrets Manager.```pythonimport asynciofrom aioradio.aws.s3 import (    create_bucket,    delete_s3_object,    download_file,    get_object,    list_s3_objects,    upload_file)async def main():    s3_bucket = 'aioradio'    s3_prefix = 'test'    filename = 'hello_world.txt'    s3_key = f'{s3_prefix}/{filename}'    # create an s3 bucket called aioradio    await create_bucket(bucket=s3_bucket)    # create hello_world.txt file    with open(filename, 'w') as file_handle:        file_handle.write('hello world of aioradio!')    # upload the file from s3 and confirm it now exists in s3    await upload_file(bucket=s3_bucket, filepath=filename, s3_key=s3_key)    assert s3_key in await list_s3_objects(bucket=s3_bucket, s3_prefix=s3_prefix)    # test downloading the file    await download_file(bucket=s3_bucket, filepath=filename, s3_key=s3_key)    # test getting file data to object    result = await get_object(bucket=s3_bucket, s3_key=s3_key)    assert result == b'hello world of aioradio!'    # delete the file from s3    await delete_s3_object(bucket=s3_bucket, s3_prefix=s3_key)    assert s3_key not in await list_s3_objects(bucket=s3_bucket, s3_prefix=s3_prefix)asyncio.get_event_loop().run_until_complete(main())```## MSSQL example codeaioredis uses the pyodbc library to work with ODBC databases.It currently has support for connecting and sending queries to mssql.```pythonimport asynciofrom aioradio.pyodbc import establish_pyodbc_connectionfrom aioradio.pyodbc import pyodbc_query_fetchonefrom aioradio.pyodbc import pyodbc_query_fetchalldef main():    conn = establish_pyodbc_connection(host='your-host', user='your-user', pwd='your-password')    query = &quot;SELECT homeruns FROM MLB.dbo.LosAngelesAngels WHERE lastname = 'Trout' AND year = '2020'&quot;    row = pyodbc_query_fetchone(conn=conn, query=query)    print(row)    query = &quot;SELECT homeruns FROM MLB.dbo.LosAngelesAngels WHERE lastname = 'Trout'&quot;    rows = pyodbc_query_fetchall(conn=conn, query=query)    print(rows)asyncio.get_event_loop().run_until_complete(main())```## Jira example codeJira uses the async library httpx behind the scene to send http requests.```pythonimport asynciofrom aioradio.jira import add_comment_to_jirafrom aioradio.jira import get_jira_issuefrom aioradio.jira import post_jira_issueasync def main():    # create a jira ticket    url = 'https://aioradio.atlassian.net/rest/api/2/issue/'    payload = {        &quot;fields&quot;: {            &quot;project&quot;: {&quot;key&quot;: &quot;aioradio&quot;},            &quot;issuetype&quot;: {&quot;name&quot;: &quot;Task&quot;},            &quot;reporter&quot;: {&quot;accountId&quot;: &quot;somebodies-account-id&quot;},            &quot;priority&quot;: {&quot;name&quot;: &quot;Medium&quot;},            &quot;summary&quot;: &quot;Aioradio rocks!&quot;,            &quot;description&quot;: &quot;Aioradio Review&quot;,            &quot;labels&quot;: [&quot;aioradio&quot;],            &quot;assignee&quot;: {&quot;accountId&quot;: &quot;somebodies-account-id&quot;}        }    }    resp = await post_jira_issue(url=url, jira_user='your-user', jira_token='your-password', payload=payload)    jira_id = resp.json()['key']    # get jira ticket info    resp = await get_jira_issue(url=f'{url}/{jira_id}', jira_user='your-user', jira_token='your-password')    # add comment to jira ticket    comment = 'aioradio rocks!'    response = await add_comment_to_jira(url=url, jira_user='your-user', jira_token='your-password', comment=comment)asyncio.get_event_loop().run_until_complete(main())```## INSTALLING FOR DIRECT DEVELOPMENT OF AIORADIOInstall [python 3.11.X](https://www.python.org/downloads/)Make sure you've installed [ODBC drivers](https://docs.microsoft.com/en-us/sql/connect/python/pyodbc/step-1-configure-development-environment-for-pyodbc-python-development), required for using the python package pyodbc.Clone aioradio locally and navigate to the root directoryInstall and activate python VirtualEnv```bashpython3.11 -m venv envsource env/bin/activate```Install python modules included in requirements.txt```bashpip install cythonpip install -r aioradio/requirements.txt```Run Makefile command from the root directory to test all is good before issuing push to master```make all```## AUTHORS* **Tim Reichard** - [aioradio](https://github.com/nrccua/aioradio)See also the list of [contributors](https://github.com/nrccua/aioradio/graphs/contributors) who participated in this project.## ACKNOWLEDGEMENTS* **Pedro Artiga** - Developer contributing to aioradio.</longdescription>
</pkgmetadata>