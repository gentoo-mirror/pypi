<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># MagicDBA fully typed Firestore ORM for python -- the easiest way to store data.MagicDB inherets from Pydantic, so you get all the power of Pydantic models with the functionality of Firestore: https://pydantic-docs.helpmanual.io/.## Instalation```pip install magicdb```## Initialize the DBMagicDB is initialized via a Firestore service account json which you download from your Firebase console.Once you have the json, you must tell MagicDB where it is, either by 1) setting the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to the json path, or by 2) calling magicdb.connect with the path:```python# 1)# You can set the env variable from the terminal too: export GOOGLE_APPLICATION_CREDENTIALS=&quot;path/to/my-service-account.json&quot;import osos.environ[&quot;GOOGLE_APPLICATION_CREDENTIALS&quot;] = &quot;path/to/my-service-account.json&quot;# OR# 2)import magicdbmagicdb.connect(from_file=&quot;path/to/my-service-account.json&quot;)```## Example```pythonfrom magicdb.Models import MagicModelclass Salesman(MagicModel):    name: str = None    company: str = Nones = Salesman()s.name = 'Jim's.save()# Get Salesmans = Salesman.collection.get(s.id)print(s.name) # Jim```## FieldsUse any type [mypy](http://mypy-lang.org/) will accept!#### Fields Example```pythonfrom datetime import datetimeclass Manager(MagicModel):name: strage: intcompany: str = 'Dunder Mifflin'startedWorkingAt: datetime = None# m = Manager(name='Michael Scott', age=44)  # you must pass in the required fields on initializing the object.m.age = 45m.save()  # Success! New doc in collection &quot;manager&quot; as: { name: Michael Scott, age: 45, company: Dunder Mifflin }m = Manager(name='Dwight Schrute') # Exception since age is required but not given```You can also add other Objects as a field.### NestedModel Example```pythonclass Dog(MagicModel):age: intowner: Managerdog = Dog()dog.age = 3dog.owner = Manager(name='Robert California', age=59)dog.save()print(dog)```## CollectionsThe collection name for a class defaults to the class' name in lowercase. To set the collection name, use the `Meta` class.### Meta Example```pythonclass Student(MagicModel):name: str = Noneschool: str = 'UPenn'class Meta:collection_name = 'students's = Student(name='Amy Gutman')s.save()  # creates a new document in the &quot;students&quot; collectionprint(s)  # name='Amy Gutman' school='UPenn'```You can also inheret classes.### Inheritance Example```pythonclass ExchangeStudent(Student):originalCountry: strclass Meta:collection_name = 'exchangeStudents'e = ExchangeStudent(originalCountry='UK')print(e.school)  # UPenne.save()print(e)  # name=None school='UPenn' originalCountry='UK'```## QueriesYou can make queries with the same syntax you would using the Python firebase-admin SDK. But FireORM returns the objects.### Queries Example```pythone = ExchangeStudent(originalCountry='UK')print(e.school)  # UPenne.save()print(e)  # name=None school='UPenn' originalCountry='UK'managers = Manager.collection.where('name', '==', 'Michael Scott').limit(1).stream()print(managers) # [Manager(name='Michael Scott', age=45, company='Dunder Mifflin', startedWorkingAt=None)]print(managers[0].id)manager = Manager.collection.get('0mIWZ8FfgQzBanCllqsV')print(manager) # name='Michael Scott' age=45 company='Dunder Mifflin' startedWorkingAt=None```</longdescription>
</pkgmetadata>