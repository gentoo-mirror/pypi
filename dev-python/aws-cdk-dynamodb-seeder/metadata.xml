<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aws-cdk-dynamodb-seeder [![Mentioned in Awesome CDK](https://awesome.re/mentioned-badge.svg)](https://github.com/eladb/awesome-cdk)![build](https://github.com/elegantdevelopment/aws-cdk-dynamodb-seeder/workflows/build/badge.svg)[![codecov](https://codecov.io/gh/elegantdevelopment/aws-cdk-dynamodb-seeder/branch/master/graph/badge.svg)](https://codecov.io/gh/elegantdevelopment/aws-cdk-dynamodb-seeder)[![dependencies Status](https://david-dm.org/elegantdevelopment/aws-cdk-dynamodb-seeder/status.svg)](https://david-dm.org/elegantdevelopment/aws-cdk-dynamodb-seeder)[![npm](https://img.shields.io/npm/dt/aws-cdk-dynamodb-seeder)](https://www.npmjs.com/package/aws-cdk-dynamodb-seeder)[![npm version](https://badge.fury.io/js/aws-cdk-dynamodb-seeder.svg)](https://badge.fury.io/js/aws-cdk-dynamodb-seeder)[![NuGet version](https://badge.fury.io/nu/ElegantDevelopment.AWSCDKDynamoDBSeeder.svg)](https://badge.fury.io/nu/ElegantDevelopment.AWSCDKDynamoDBSeeder)[![PyPI version](https://badge.fury.io/py/aws-cdk-dynamodb-seeder.svg)](https://badge.fury.io/py/aws-cdk-dynamodb-seeder)[![Maven Central](https://img.shields.io/maven-central/v/io.github.elegantdevelopment/AWSCDKDynamoDBSeeder?color=brightgreen)](https://repo1.maven.org/maven2/io/github/elegantdevelopment/AWSCDKDynamoDBSeeder/)A simple CDK JSON seeder for DynamoDB## Why this packageGlad you asked!Using [AWS CDK](https://aws.amazon.com/cdk) for automating infrastructure deployments is an amazing way of integrating the development and operations into one process and one codebase.However, building dev or test environments that come pre-populated with data can be tricky, especially when using [Amazon DynamoDB](https://aws.amazon.com/dynamodb).## How do I use itInstall using your favourite package manager:```shyarn add aws-cdk-dynamodb-seeder```### Example TypeScript usage```python# Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826from aws_cdk_dynamodb_seeder import Seedermy_table = Table(stack, &quot;MyTable&quot;,    table_name=&quot;MyTable&quot;,    partition_key={&quot;name&quot;: &quot;Id&quot;, &quot;type&quot;: AttributeType.STRING})Seeder(stack, &quot;MySeeder&quot;,    table=my_table,    setup=require(&quot;./items-to-put.json&quot;),    teardown=require(&quot;./keys-to-delete.json&quot;),    refresh_on_update=True)```For a more in-depth example, see: [elegantdevelopment/aws-cdk-dynamodb-seeder-examples](https://github.com/elegantdevelopment/aws-cdk-dynamodb-seeder-examples).### Importing seed dataData passed into `setup` (&quot;Items&quot; to put) or `teardown` (&quot;Keys&quot; to delete) should be an `array` of objects (that are, in turn, representations of `string` to [AttributeValue](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html) maps).* `setup` elements should use the format of `params.Item` from [AWS.DynamoDB.DocumentClient.put()](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#put-property)* `teardown` elements should use the format of `params.Key` from [AWS.DynamoDB.DocumentClient.delete()](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#delete-property)## VersioningWe will *attempt* to align the major and minor version of this package with [AWS CDK](https://aws.amazon.com/cdk), but always check our release descriptions for compatibility.We currently support [![GitHub package.json dependency version (prod)](https://img.shields.io/github/package-json/dependency-version/elegantdevelopment/aws-cdk-dynamodb-seeder-examples/@aws-cdk/core)](https://github.com/aws/aws-cdk)## InternalsBehind the scenes we use an [AwsCustomResource](https://docs.aws.amazon.com/cdk/api/latest/typescript/api/custom-resources/awscustomresource.html) as a representation of the related table's seed state. The custom resource's event handlers invoke a [Function](https://docs.aws.amazon.com/cdk/api/latest/typescript/api/aws-lambda/function.html#aws_lambda_Function) to perform setup and/or teardown actions.### Deploying a stackOn deployment, we write copies of your seed data locally and use a [BucketDeployment](https://docs.aws.amazon.com/cdk/api/latest/typescript/api/aws-s3-deployment/bucketdeployment.html#aws_s3_deployment_BucketDeployment) to write it to an S3 [Bucket](https://docs.aws.amazon.com/cdk/api/latest/typescript/api/aws-s3/bucket.html#aws_s3_Bucket).We then create the handler function and custom resource to field seed requests (the `onCreate` event will immediate fire as the stack deploys, reading the data from the bucket and seeding the table using [AWS.DynamoDB.DocumentClient](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html)).### Updating a stackOn a stack update, the `onUpdate` handler is triggered when `refreshOnUpdate` is `true`.This will run [AWS.DynamoDB.DocumentClient.delete()](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#delete-property) on every teardown &quot;Key&quot; followed by [AWS.DynamoDB.DocumentClient.put()](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#put-property) on every setup &quot;Item&quot;.### Destroying a stackWhen the stack is destroyed, the event handler's `onDelete` function will be invoked, providing `teardown` is set.This simply runs [AWS.DynamoDB.DocumentClient.delete()](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#delete-property) on every teardown &quot;Key&quot; before destroying the `Seeder`'s resources.&lt;!-- Internals --&gt;</longdescription>
</pkgmetadata>