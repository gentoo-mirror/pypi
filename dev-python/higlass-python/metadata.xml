<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># higlass-python ðŸ”ŽA fresh Python library for [`higlass`](https://github.com/higlass/higlass) builton top of:* [`higlass-schema`](https://github.com/higlass/higlass-schema): Pydantic models for HiGlass.* [`higlass-widget`](https://github.com/higlass/higlass-widget): A cross-platform [AnyWidget](https://github.com/manzt/anywidget) for Jupyter environments.[![License](https://img.shields.io/pypi/l/higlass-python.svg?color=green)](https://github.com/higlass/higlass-python/raw/main/LICENSE)[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/higlass/higlass-python/blob/main/examples/Examples.ipynb)## Installation```shpip install higlass-python```## Usage```pythonimport higlass as hg# Remote data source (tileset)tileset1 = hg.remote(    uid=&quot;CQMd6V_cRw6iCI_-Unl3PQ&quot;,    server=&quot;https://higlass.io/api/v1/&quot;,    name=&quot;Rao et al. (2014) GM12878 MboI (allreps) 1kb&quot;,)# Local tilesettileset2 = hg.cooler(&quot;../data/dataset.mcool&quot;)# Create a `hg.HeatmapTrack` for each tilesettrack1 = tileset1.track(&quot;heatmap&quot;)track2 = tileset2.track(&quot;heatmap&quot;)# Create two independent `hg.View`s, one for each heatmapview1 = hg.view(track1, width=6)view2 = hg.view(track2, width=6)# Lock zoom &amp; location for each `View`view_lock = hg.lock(view1, view2)# Concatenate views horizontally and apply synchronization lock(view1 | view2).locks(view_lock)```![Side-by-side Hi-C heatmaps, linked by pan and zoom](https://user-images.githubusercontent.com/24403730/159050305-e6a48f03-fba1-4ff7-8eee-2e9c5c40ef88.gif)To learn more about the new API, check out the[updated documentation](http://docs-python.higlass.io/).## Upgrade Guide**higlass-python** v1.0 is a total rewrite of our priorimplementation, aimed to offer a more ergonomic and flexible API. While thismight present challenges when upgrading existing code, we've prepared[documentation](http://docs-python.higlass.io/) to guide you through the new API usage.If you find a missing feature, please open an issue â€“ we're committed tosupporting your use cases with the new API.Despite the large changes in v1.0, we will strive to avoid breaking changesgoing forward. However, because of the complete rewrite, the v1.0 releasedoesn't strictly adhere to semantic versioning. You can think of it as a pre-1.0release, with breaking changes and new features included in minor releases, andbug fixes in patch releases.We will aim for strict semantic versioning with the v2.0 release. Your feedbackand understanding are greatly appreciated.## Development**higlass-python** uses[the recommended](https://packaging.python.org/en/latest/flow/#) `hatchling`build-system, which is convenient to use via the[`hatch` CLI](https://hatch.pypa.io/latest/). We recommend installing `hatch`globally (e.g., via `pipx`) and running the various commands defined within`pyproject.toml`. `hatch` will take care of creating and synchronizing a virtualenvironment with all dependencies defined in `pyproject.toml`.### Commands CheatsheetAll commands are run from the root of the project, from a terminal:| Command                | Action                                                              || :--------------------- | :------------------------------------------------------------------ || `hatch run fix`        | Format project with `black .` and apply linting with `ruff --fix .` || `hatch run lint`       | Lint project with `ruff .`.                                         || `hatch run test`       | Run unit tests with `pytest` in latest Python version.              || `hatch run test:test`  | Run unit tests with `pytest` in all target Python versions.         || `hatch run docs:build` | Build the documentation in `docs/_build/html`.                      || `hatch run docs:serve` | Start an dev-server for live editing RST files in `docs/`.          |&gt; **Note**: `hatch build` and `hatch publish` are available to build and publish&gt; the project to PyPI, but all releases are handled automatically via CI.Alternatively, you can develop **higlass-python** by manually creating a virtualenvironment and managing installation and dependencies with `pip`. For example,create a virtual environment with `conda`:```bashconda create -n higlass python=3.11conda activate higlass```and install **higlass-python** in _editable_ mode with all optionaldependencies:```bashpip install -e &quot;.[dev,fuse,docs]&quot;```Our CI checks formatting (`black .`), linting (`ruff .`), and tests (`pytest`).</longdescription>
</pkgmetadata>