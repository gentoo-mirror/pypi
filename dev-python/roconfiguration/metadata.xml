<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![Build](https://github.com/Neoteroi/roconfiguration/workflows/Build/badge.svg)[![pypi](https://img.shields.io/pypi/v/roconfiguration.svg)](https://pypi.python.org/pypi/roconfiguration)[![versions](https://img.shields.io/pypi/pyversions/roconfiguration.svg)](https://github.com/Neoteroi/roconfiguration)[![codecov](https://codecov.io/gh/Neoteroi/roconfiguration/branch/main/graph/badge.svg?token=VzAnusWIZt)](https://codecov.io/gh/Neoteroi/roconfiguration)[![license](https://img.shields.io/github/license/Neoteroi/roconfiguration.svg)](https://github.com/Neoteroi/roconfiguration/blob/master/LICENSE)# Python configuration utilitiesImplementation of key-value pair based configuration for Python applications.**Features:*** support for most common sources of application settings* support for overriding settings in sequence* support for nested structures and lists, using attribute notation* strategy to use environment specific settingsThis library is freely inspired by .NET Core `Microsoft.Extensions.Configuration` namespace and its pleasant design (_ref. [MSDN documentation](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.1), [Microsoft Extensions Configuration Deep Dive](https://www.paraesthesia.com/archive/2018/06/20/microsoft-extensions-configuration-deep-dive/)_).The main class is influenced by Luciano Ramalho`s example ofJSON structure explorer using attribute notation, in his book [Fluent Python](http://shop.oreilly.com/product/0636920032519.do).## Supported sources:* **yaml** files* **json** files* **ini** files* environmental variables* dictionaries* keys and values## Installation```bashpip install roconfiguration```# Examples### YAML file and environmental variablesIn this example, configuration will be comprised of anything inside a file`settings.yaml` and environmental variables. Settings are applied in order, soenvironmental variables with matching name override values from the `yaml`file.```pythonfrom roconfiguration import Configurationconfig = Configuration()config.add_yaml_file(&quot;settings.yaml&quot;)config.add_environmental_variables()```### YAML file, optional file by environmentIn this example, if an environmental variable with name `APP_ENVIRONMENT` andvalue `dev` exists, and a configuration file with name `settings.dev.yaml` ispresent, it is read to override values configured in `settings.yaml` file.```pythonimport osfrom roconfiguration import Configurationenvironment_name = os.environ[&quot;APP_ENVIRONMENT&quot;]config = Configuration()config.add_yaml_file(&quot;settings.yaml&quot;)config.add_yaml_file(f&quot;settings.{environment_name}.yaml&quot;, optional=True)config.add_environmental_variables()```### Filtering environmental variables by prefix```pythonimport osfrom roconfiguration import Configurationconfig = Configuration()# will read only environmental variables# starting with &quot;APP_&quot;, case insensitivelyconfig.add_environmental_variables(&quot;APP_&quot;)```### Ini filesIni files are parsed using the built-in `configparser` module, thereforesupport `[DEFAULT]` section; all values are kept as strings.```pythonfrom roconfiguration import Configurationconfig = Configuration()config.add_ini_file(&quot;settings.ini&quot;)```### JSON filesJSON files are parsed using the built-in `json` module.```pythonfrom roconfiguration import Configurationconfig = Configuration()config.add_json_file(&quot;settings.json&quot;)```### Dictionaries```pythonfrom roconfiguration import Configurationconfig = Configuration({&quot;host&quot;: &quot;localhost&quot;, &quot;port&quot;: 8080})config.add_map({&quot;hello&quot;: &quot;world&quot;, &quot;example&quot;: [{&quot;id&quot;: 1}, {&quot;id&quot;: 2}]})assert config.host == &quot;localhost&quot;assert config.port == 8080assert config.hello == &quot;world&quot;assert config.example[0].id == 1assert config.example[1].id == 2```### Keys and values```pythonfrom roconfiguration import Configurationconfig = Configuration({&quot;host&quot;: &quot;localhost&quot;, &quot;port&quot;: 8080})config.add_value(&quot;port&quot;, 44555)assert config.host == &quot;localhost&quot;assert config.port == 44555```### Overriding nested values```pythonconfig = Configuration(    {        &quot;a&quot;: {            &quot;b&quot;: 1,            &quot;c&quot;: 2,            &quot;d&quot;: {                &quot;e&quot;: 3,                &quot;f&quot;: 4,            },        }    })assert config.a.b == 1assert config.a.d.e == 3assert config.a.d.f == 4config.add_value(&quot;a:d:e&quot;, 5)assert config.a.d.e == 5assert config.a.d.f == 4```### Overriding nested values using env variables```pythonconfig = Configuration(    {        &quot;a&quot;: {            &quot;b&quot;: 1,            &quot;c&quot;: 2,            &quot;d&quot;: {                &quot;e&quot;: 3,                &quot;f&quot;: 4,            },        }    })assert config.a.b == 1assert config.a.d.e == 3assert config.a.d.f == 4# NB: if an env variable such as:# a:d:e=5# or...# a__d__e=5## is defined, it overrides the value  from the dictionaryconfig.add_environmental_variables()assert config.a.d.e == 5```### Overriding values in list items using env variables```pythonconfig = Configuration(    {        &quot;b2c&quot;: [            {&quot;tenant&quot;: &quot;1&quot;},            {&quot;tenant&quot;: &quot;2&quot;},            {&quot;tenant&quot;: &quot;3&quot;},        ]    })config.add_value(&quot;b2c:1:tenant&quot;, &quot;4&quot;)assert config.b2c[0].tenant == &quot;1&quot;assert config.b2c[1].tenant == &quot;4&quot;assert config.b2c[2].tenant == &quot;3&quot;```---# Develop and run tests locally```bashpip install -r requirements.txt# run tests using automatic discovery:pytest```</longdescription>
</pkgmetadata>