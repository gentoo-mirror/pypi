<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>QTrio - a library bringing Qt GUIs together with ``async`` and ``await`` via Trio=================================================================================Resources---------=================================  =================================  =============================`Documentation &lt;documentation_&gt;`_  `Read the Docs &lt;documentation_&gt;`_  |documentation badge|`Chat &lt;chat_&gt;`_                    `Gitter &lt;chat_&gt;`_                  |chat badge|`Forum &lt;forum_&gt;`_                  `Discourse &lt;forum_&gt;`_              |forum badge|`Issues &lt;issues_&gt;`_                `GitHub &lt;issues_&gt;`_                |issues badge|`Repository &lt;repository_&gt;`_        `GitHub &lt;repository_&gt;`_            |repository badge|`Tests &lt;tests_&gt;`_                  `GitHub Actions &lt;tests_&gt;`_         |tests badge|`Coverage &lt;coverage_&gt;`_            `Codecov &lt;coverage_&gt;`_             |coverage badge|`Distribution &lt;distribution_&gt;`_    `PyPI &lt;distribution_&gt;`_            | |version badge|                                                                      | |python versions badge|                                                                      | |python interpreters badge|=================================  =================================  =============================Introduction------------Note:    This library is in early development.  It works.  It has tests.  It has    documentation.  Expect breaking changes as we explore a clean API.  By paying this    price you get the privilege to provide feedback via    `GitHub issues &lt;https://github.com/altendky/qtrio/issues&gt;`__ to help shape our    future.  ``:]``The QTrio project's goal is to bring the friendly concurrency of Trio using Python's``async`` and ``await`` syntax together with the GUI features of Qt to enable morecorrect code and a more pleasant developer experience.  QTrio is `permissively licensed&lt;https://github.com/altendky/qtrio/blob/main/LICENSE&gt;`__ to avoid introducingrestrictions beyond those of the underlying Python Qt library you choose.  Both PySide2and PyQt5 are supported.By enabling use of ``async`` and ``await`` it is possible in some cases to writerelated code more concisely and clearly than you would get with the signal and slotmechanisms of Qt concurrency.  In this set of small examples we will allow the user toinput their name then use that input to generate an output message.  The user will beable to cancel the input to terminate the program early.  In the first example we willdo it in the form of a classic &quot;hello&quot; console program.  Well, classic plus a bit ofboilerplate to allow explicit testing without using special external tooling.  Thensecond, the form of a general Qt program implementing this same activity.  And finally,the QTrio way... code-block:: python    # A complete runnable source file with imports and helpers is available in    # either the documentation readme examples or in the repository under    # qtrio/examples/readme/console.py.    def main(        input_file: typing.TextIO = sys.stdin, output_file: typing.TextIO = sys.stdout    ) -&gt; None:        try:            output_file.write(&quot;What is your name? &quot;)            output_file.flush()            name = input_file.readline()[:-1]            output_file.write(f&quot;Hi {name}, welcome to the team!\n&quot;)        except KeyboardInterrupt:            passNice and concise, including the cancellation via ``ctrl+c``.  This is because we canstay in one scope thus using both local variables and a ``try``/``except`` block.  Thiskind of explodes when you shift into a classic Qt GUI setup... code-block:: python    # A complete runnable source file with imports and helpers is available in    # either the documentation readme examples or in the repository under    # qtrio/examples/readme/qt.py.    class Main:        def __init__(            self,            application: QtWidgets.QApplication,            input_dialog: typing.Optional[QtWidgets.QInputDialog] = None,            output_dialog: typing.Optional[QtWidgets.QMessageBox] = None,        ):            self.application = application            if input_dialog is None:  # pragma: no cover                input_dialog = create_input()            if output_dialog is None:  # pragma: no cover                output_dialog = create_output()            self.input_dialog = input_dialog            self.output_dialog = output_dialog        def setup(self) -&gt; None:            self.input_dialog.accepted.connect(self.input_accepted)            self.input_dialog.rejected.connect(self.input_rejected)            self.input_dialog.show()        def input_accepted(self) -&gt; None:            name = self.input_dialog.textValue()            self.output_dialog.setText(f&quot;Hi {name}, welcome to the team!&quot;)            self.output_dialog.finished.connect(self.output_finished)            self.output_dialog.show()        def input_rejected(self) -&gt; None:            self.application.quit()        def output_finished(self) -&gt; None:            self.application.quit()The third example, below, shows how using ``async`` and ``await`` allows us toreturn to the more concise and clear description of the sequenced activity.Most of the code is just setup for testability with only the last four linesreally containing the activity... code-block:: python    # A complete runnable source file with imports and helpers is available in    # either the documentation readme examples or in the repository under    # qtrio/examples/readme/qtrio_example.py.    async def main(        *,        task_status: trio_typing.TaskStatus[Dialogs] = trio.TASK_STATUS_IGNORED,    ) -&gt; None:        dialogs = Dialogs()        task_status.started(dialogs)        with contextlib.suppress(qtrio.UserCancelledError):            name = await dialogs.input.wait()            dialogs.output.text = f&quot;Hi {name}, welcome to the team!&quot;            await dialogs.output.wait().. _chat: https://gitter.im/python-trio/general.. |chat badge| image:: https://img.shields.io/badge/chat-join%20now-blue.svg?color=royalblue&amp;logo=Gitter&amp;logoColor=whitesmoke   :target: `chat`_   :alt: Support chatroom.. _forum: https://trio.discourse.group.. |forum badge| image:: https://img.shields.io/badge/forum-join%20now-blue.svg?color=royalblue&amp;logo=Discourse&amp;logoColor=whitesmoke   :target: `forum`_   :alt: Support forum.. _documentation: https://qtrio.readthedocs.io.. |documentation badge| image:: https://img.shields.io/badge/docs-read%20now-blue.svg?color=royalblue&amp;logo=Read-the-Docs&amp;logoColor=whitesmoke   :target: `documentation`_   :alt: Documentation.. _distribution: https://pypi.org/project/qtrio.. |version badge| image:: https://img.shields.io/pypi/v/qtrio.svg?color=indianred&amp;logo=PyPI&amp;logoColor=whitesmoke   :target: `distribution`_   :alt: Latest distribution version.. |python versions badge| image:: https://img.shields.io/pypi/pyversions/qtrio.svg?color=indianred&amp;logo=PyPI&amp;logoColor=whitesmoke   :alt: Supported Python versions   :target: `distribution`_.. |python interpreters badge| image:: https://img.shields.io/pypi/implementation/qtrio.svg?color=indianred&amp;logo=PyPI&amp;logoColor=whitesmoke   :alt: Supported Python interpreters   :target: `distribution`_.. _issues: https://github.com/altendky/qtrio/issues.. |issues badge| image:: https://img.shields.io/github/issues/altendky/qtrio?color=royalblue&amp;logo=GitHub&amp;logoColor=whitesmoke   :target: `issues`_   :alt: Issues.. _repository: https://github.com/altendky/qtrio.. |repository badge| image:: https://img.shields.io/github/last-commit/altendky/qtrio.svg?color=seagreen&amp;logo=GitHub&amp;logoColor=whitesmoke   :target: `repository`_   :alt: Repository.. _tests: https://github.com/altendky/qtrio/actions?query=branch%3Amaster.. |tests badge| image:: https://img.shields.io/github/workflow/status/altendky/qtrio/CI/main?color=seagreen&amp;logo=GitHub-Actions&amp;logoColor=whitesmoke   :target: `tests`_   :alt: Tests.. _coverage: https://codecov.io/gh/altendky/qtrio.. |coverage badge| image:: https://img.shields.io/codecov/c/github/altendky/qtrio/main?color=seagreen&amp;logo=Codecov&amp;logoColor=whitesmoke   :target: `coverage`_   :alt: Test coverage</longdescription>
</pkgmetadata>