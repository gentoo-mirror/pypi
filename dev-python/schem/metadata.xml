<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># SChemhttps://pypi.org/project/schem/. Install with `pip install schem`Clean Room implementation of the backend of SpaceChem (https://www.zachtronics.com/spacechem).## Usage (CLI)```python -m schem [-h] [--version] [-l LEVEL_FILE] [--max-cycles MAX_CYCLES]                [--check-precog] [--max-precog-check-cycles MAX_PRECOG_CHECK_CYCLES]                [--seed SEED] [--hash-states HASH_STATES]                [--export] [--no-run] [--strict]                [--json | --verbose] [--debug [DEBUG]]                [solution_files ...]```E.g. `python -m schem` will validate the cycles-reactors-symbols score of any solution export(s) in the user's clipboard. See `python -m schem --help` for details.## Usage (python)Supposing `level_export`, `solution_export` are strings as exported by SpaceChem CE:```pythonfrom schem import Level, Solution# Load a solutionsolution = Solution(solution_export)  # Auto-use appropriate official levelsolution = Solution(solution_export, level=level_export)  # Custom levelsolution = Solution(solution_export, level=Level(level_export))  # Alternative# Run a solutionsolution.run()# =&gt; Score(cycles=45, reactors=1, symbols=14)# Check the expected score that was in the export's metadatasolution.expected_score# =&gt; Score(cycles=44, reactors=1, symbols=14)# Reset the run state of a solutionsolution.reset()# Validate that a solution matched its expected scoresolution.validate()# =/&gt; ScoreError(&quot;[Of Pancakes and Spaceships] 44-1-14 &quot;Cycles&quot; by Zig: Expected 44 cycles but got 45.&quot;)# Check if a solution uses precognitionsolution.is_precognitive()  # slow# =&gt; False# Bundle method for calling validate() if expected score is present, else run(), optionally checking precog,# and returning a dict of all this info and any errorsolution.evaluate()# =&gt; {&quot;level_name&quot;: &quot;Tunnels III&quot;,#     &quot;resnet_id&quot;: (1, 1, 3),  # Volume, Issue, Puzzle#     &quot;author&quot;: &quot;Zig&quot;,#     &quot;cycles&quot;: 244,#     &quot;reactors&quot;: 1,#     &quot;symbols&quot;: 14,#     &quot;solution_name&quot;: &quot;symbols&quot;,#     &quot;error&quot;: ScoreError(&quot;[Tunnels III] 243-1-14 \&quot;symbols\&quot; by Zig: Expected 243 cycles but got 244.&quot;)#}solution.evaluate(check_precog=True)# =&gt; {&quot;level_name&quot;: &quot;Challenge: Going Green&quot;,#     &quot;author&quot;: &quot;Zig&quot;,#     &quot;cycles: 3578,#     &quot;reactors&quot;: 1,#     &quot;symbols&quot;: 103,#     &quot;solution_name&quot;: &quot;assumes 2nd input&quot;,#     &quot;precog&quot;: true,#     &quot;precog_explanation&quot;: &quot;Solution is precognitive; failed whenever molecule 2 was Hydrogen Sulfide, for 9 such#                            appearances (whereas solution success rate was otherwise 100%).&quot;#}# Re-export the solution. Sorts export lines to ensure uniquenesssolution.export_str()# =&gt; &quot;SOLUTION:...&quot;```</longdescription>
</pkgmetadata>