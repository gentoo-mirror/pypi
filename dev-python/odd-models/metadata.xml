<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![PyPI version](https://badge.fury.io/py/odd-models.svg)](https://badge.fury.io/py/odd-models)# OpenDataDiscovery Models packageHas some useful tools for working with OpenDataDiscovery. Such as:1. Generated Python models from OpenDataDiscovery specification.2. API Client for working with OpenDataDiscovery.3. API for manual discovering data entities.### Installation```bashpip install odd-models```### Models using example**odd-models.models** package provides automatically generated Python model by OpenDataDiscovery specification.It can be used for creating data entities for uploading them into the Platform.Code example ([full code](./examples/postgres_models.py)):```pythonfrom oddrn_generator import PostgresqlGeneratorfrom odd_models.models import DataEntity, DataSet, DataSetField, DataSetFieldType, DataEntityType, Type, MetadataExtensiongenerator = PostgresqlGenerator(host_settings=&quot;localhost&quot;, databases=&quot;my_database&quot;, schemas=&quot;public&quot;)DataEntity(    oddrn=generator.get_oddrn_by_path(&quot;tables&quot;, &quot;my_table&quot;),    name=&quot;my_table&quot;,    type=DataEntityType.TABLE,    metadata=[MetadataExtension(schema_url=&quot;https://example.com/schema.json&quot;, metadata={&quot;env&quot;: &quot;DEV&quot;})],    dataset=DataSet(        field_list=[            DataSetField(                oddrn=generator.get_oddrn_by_path(&quot;tables_columns&quot;, &quot;name&quot;),                name=&quot;name&quot;,                type=DataSetFieldType(                    type=Type.TYPE_STRING,                    logical_type='str',                    is_nullable=False                ),            )        ]    ))```### HTTP Client for OpenDataDiscovery___**odd-models.client** package provides API client for OpenDataDiscovery API.Client provides an API for working with OpenDataDiscovery Platform.It has various methods for working with data sources, data entities, management etc.Code example([full code](./examples/client.py)):```pythonfrom odd_models.api_client.v2.odd_api_client import Clientfrom examples.postgres_models import data_entity_listclient = Client(host=&quot;http://localhost:8080&quot;)client.auth(name=&quot;dev_aws_token&quot;, description=&quot;Token for dev AWS account data sources&quot;)client.ingest_data_entity_list(data_entity_list)```### Manual Discovery API___When there is no programmatic way to discover data sources and data entities, **odd-models.discovery** package provides API for manual discovery of data sources and data entities.Code example([full code](./examples/lambda_discovery.py)):```pythonfrom odd_models.discovery import DataSourcefrom odd_models.discovery.data_assets import AWSLambda, S3Artifactfrom odd_models.discovery.data_assets.data_asset_list import DataAssetsListwith DataSource(&quot;//cloud/aws/dev&quot;) as data_source:    validation_lambda = AWSLambda.from_params(        region=&quot;eu-central-1&quot;, account=&quot;0123456789&quot;, function_name=&quot;validation&quot;    )    input_artifact = S3Artifact.from_url(&quot;s3://bucket/folder/test_data.csv&quot;)    results = S3Artifact.from_url(&quot;s3://bucket/folder/test_result.csv&quot;)    metrics = S3Artifact.from_url(&quot;s3://bucket/folder/test_metrics.json&quot;)    input_artifact &gt;&gt; validation_lambda &gt;&gt; DataAssetsList([results, metrics])    data_source.add_data_asset(validation_lambda)```# Development### Installation```bash# Install dependenciespoetry install# Activate virtual environmentpoetry shell```### Generating models```bash# Generate models. Will generate models pydantic into odd_models/modelsmake generate_models# Generate api client. Will generate api client into odd_models/api_clientmake generate_client```### Tests```bashpytest .```### Docker build```bashdocker build -t odd-models .```</longdescription>
</pkgmetadata>