<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;a name=&quot;readme-top&quot;&gt;&lt;/a&gt;&lt;!-- PROJECT SHIELDS --&gt;&lt;!--*** I'm using markdown &quot;reference style&quot; links for readability.*** Reference links are enclosed in brackets [ ] instead of parentheses ( ).*** See the bottom of this document for the declaration of the reference variables*** for contributors-url, forks-url, etc. This is an optional, concise syntax you may use.*** https://www.markdownguide.org/basic-syntax/#reference-style-links--&gt;&lt;!-- PROJECT LOGO --&gt;&lt;div align=&quot;center&quot;&gt;  &lt;h1 align=&quot;center&quot;&gt;LibGal&lt;/h1&gt;  &lt;p align=&quot;center&quot;&gt;    Librería para agilizar el desarrollo en Python.    &lt;br/&gt;    &lt;br/&gt;    &lt;a href=&quot;https://github.com/jeanmgonzalez/libgal&quot;&gt;&lt;strong&gt;Explorar el proyecto»&lt;/strong&gt;&lt;/a&gt;    &lt;br /&gt;    &lt;br /&gt;    &lt;a href=&quot;https://github.com/jeanmgonzalez/libgal/issues&quot;&gt;Reportar error&lt;/a&gt;  &lt;/p&gt;&lt;/div&gt;&lt;!-- TABLE OF CONTENTS --&gt;&lt;details&gt;  &lt;summary&gt;Tabla de Contenidos&lt;/summary&gt;  &lt;ol&gt;    &lt;li&gt;      &lt;a href=&quot;#descripción-general&quot;&gt;Descripción General&lt;/a&gt;    &lt;/li&gt;    &lt;li&gt;      &lt;a href=&quot;#instalalación&quot;&gt;Instalación&lt;/a&gt;    &lt;/li&gt;    &lt;li&gt;      &lt;a href=&quot;#funcionalidades&quot;&gt;Funcionalidades&lt;/a&gt;      &lt;ul&gt;        &lt;li&gt;&lt;a href=&quot;#variables-de-entorno&quot;&gt;Variables de Entorno&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#registro-de-logs&quot;&gt;Registro de Logs&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#selenium-web-browser-firefox&quot;&gt;Selenium Web Browser Firefox&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#teradata&quot;&gt;Teradata&lt;/a&gt;          &lt;ul&gt;            &lt;li&gt;&lt;a href=&quot;#teradataerror&quot;&gt;TeradataError&lt;/a&gt;&lt;/li&gt;          &lt;/ul&gt;        &lt;/li&gt;        &lt;li&gt;          &lt;a href=&quot;#sqlalchemy&quot;&gt;SQLAlchemy&lt;/a&gt;          &lt;ul&gt;            &lt;li&gt;&lt;a href=&quot;#select&quot;&gt;Select&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#insert&quot;&gt;Insert&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#query&quot;&gt;Query&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=&quot;#sqlalchemyerror&quot;&gt;SQLAlchemyError&lt;/a&gt;&lt;/li&gt;          &lt;/ul&gt;        &lt;/li&gt;      &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;&lt;a href=&quot;#contacto&quot;&gt;Contacto&lt;/a&gt;&lt;/li&gt;  &lt;/ol&gt;&lt;/details&gt;&lt;br/&gt;&lt;!-- ABOUT THE LIBRARY --&gt;## **Descripción General** &lt;br&gt;Esta librería python fue desarrollada con la finalidad de agilizar el desarrollo de aplicaciones con funciones configurables minimizando de esta forma nuestro código python, evitando a su vez la replicación de  código en distintos proyectos, permitiendonos centrar en la funcionalidad principal de la aplicación a desarrollar.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;Ir arriba&lt;/a&gt;)&lt;/p&gt;&lt;!-- INSTALACIÓN --&gt;## **Instalación**&lt;br&gt;La instación de esta librería se hace mediante siguiente sentencia:```pythonpip install libgal```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;Ir arriba&lt;/a&gt;)&lt;/p&gt;&lt;!-- FUNCIONALIDADES --&gt;## **Funcionalidades**&lt;br&gt;Para hacer uso de las diferentes funcionalidades de esta librería basta con importar la misma en nuestro código con la siguiente sentencia:&lt;br&gt;```pythonimport libgal```&lt;br&gt;Una vez importada la librería solo nos queda instanciar en una variable la función que necesitemos tal como se muestra a continuación.&lt;br&gt;```pythonbrowser=libgal.variables_entorno()```&lt;!-- FUNCIONALIDAD - Variables de Entorno --&gt;### **Variables de Entorno**&lt;br&gt;Para poder usar las variables de entorno de forma local con esta librería será necesario crear un archivo de texto cuyo nombre y extensión será “.env”. Dentro de este mismo archivo “.env” podemos especificar todas las variables secrets y configmap que utilizará nuestra aplicación, tal como se muestra en el siguiente ejemplo:&lt;br&gt;```sh#SECRETSUSERNAME = usuario@correo.comPASSWORD = contraseña#CONFIGMAPAPI_PREDICT=https://url.com/predictAPI_AUDIENCIAS=https://url.com/audienciasCANT_POST=10 #Cantidad de últimos posts a descargar```&lt;br&gt;Es importante mencionar que al momento de desplegar nuestra aplicación no se debe subir este archivo “.env” ya que solo es para ejecuciones y pruebas en modo local simulando estar en el entorno productivo donde se debe manejar un sistema de secrets.&lt;br&gt;Ahora bien, para poder usar estas variables dentro de nuestro código solo será necesario importar la librería LIBGAL e instanciar en una variable la función VARIABLES_ENTORNO, indicando como parametro la ruta y nombre del archivo .env y así poder acceder a las variables de entorno indicado en el mismo, tal cómo se muestra en el siguiente ejemplo:&lt;br&gt;```pythonimport libgalve=libgal.variables_entorno('.env')api_predict=ve['API_PREDICT']api_audiencias=ve['API_AUDIENCIAS']```&lt;br&gt;Nótese que para invocar los nombres de las variables es necesario escribirlas en mayúscula.&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;Ir arriba&lt;/a&gt;)&lt;/p&gt;&lt;!-- Registro de Logs --&gt;### **Registro de Logs**  &lt;br&gt;Haciendo uso de esta librería no nos tenemos que preocupar por la configuración de nuestros registros logs, ya que la misma se encarga de ello mediante unos pocos pasos. Para hacer esto, solo debemos llamar la función LOGGER de la librería y asignarla a una variable para poder usar en el resto de nuestro código.&lt;br&gt;La función LOGGER consta de dos parámetros de configuración de tipo string:&lt;br&gt;***format_output:** *(Requerido, Tipo String)* Indica el tipo de formato para el registro log de nuestra aplicación. Por los momentos consta de dos tipos: “JSON” usado para los logs dentro del entorno Openshift y “CSV” para generar el log en una sola línea separados por coma (,).&lt;br&gt;***app_name:** *(Requerido, Tipo String)* En este parámetro especificaremos el nombre de nuestra aplicación. Recordemos que nuestro archivo Python principal deberá llamar APP.PY.&lt;br&gt;Para crear un registro log mediante esta función en nuestra aplicación solo debemos hacer uso de nuestra variable tipo LOGGER de forma muy similar al “print” de Python pero con un agregado adicional y es que podemos definir el nivel de Log para cada registro, tal como lo veremos en el siguiente código de ejemplo:&lt;br&gt;```pythonImport libgallog=libgal.logger(format_output=&quot;JSON&quot;, app_name=&quot;Instagram&quot;)log.info(&quot;Esto es un registro informativo&quot;)log.error(&quot;Esto es un registro de error&quot;)log.warning(&quot;Esto es un registro de advertencia&quot;)log.critical(&quot;Esto es un registro de error crítico&quot;)log.exception(&quot;Esto es un registro de excepción&quot;)log.log(&quot;Esto es un registro de log&quot;)```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;ir arriba&lt;/a&gt;)&lt;/p&gt;&lt;!-- Selenium Web Browser Firefox --&gt;### **Selenium Web Browser Firefox**&lt;br&gt;Mediante la librería podemos hacer la invocación de un Web Browser de Selenium para nuestras automatizaciones, test y/o extracciones de datos de cualquier página web. Esto se logra invocando la función Firefox de la librería e instanciándola a una variable. &lt;br&gt;La función consta de 4 parámetros de configuración:&lt;br&gt;***webdriver_path:** *(Requerido, Tipo String)*  Ruta del driver geckodriver utilizado para levantar e invocar el Web Browser de Firefox.&lt;br&gt;***browser_path:** *(Requerido, Tipo String)* Ruta del ejecutable Firefox.exe del servidor o equipo local necesario para levantar el Web Browser.&lt;br&gt;***url:** *(Requerido, Tipo String)* Dirección Web con la que vamos a mediante el Web Browser.&lt;br&gt;* Hidden: (Opcional, Tipo Booleano) Indica si el Web Browser se oculta durante su ejecución. False predeterminado.&lt;br&gt;Ejemplo:```pythonimport libgalbrowser=libgal.firefox(webdriver_path=r&quot;C:\webdrivers\geckodriver.exe&quot;,browser_path=r&quot;C:\Program Files\Mozilla Firefox\firefox.exe&quot;,url=&quot;https://bolsar.info/Cauciones.php&quot;)```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;ir arriba&lt;/a&gt;)&lt;/p&gt;### **Teradata**&lt;br&gt;Para simplificar un poco las conexiones a Teradata Database se agregó esta nueva funcionalidad.La misma consta de solo 3 parámetros:***Host:** *(Requerido, Tipo String)* Indica el servidor de base de datos al cual nos deseamos conectar.***User:** *(Requerido, Tipo String)* Usuario necesario para la conexión al servidor de base de datos.***Password:** *(Requerido, Tipo String)* Contraseña con la que se autentica el usuario para poderse conectar a la base de datos.***Logmech:** *(Opcional, Tipo String)* Indica el mecanismo de autenticación del usuario. Esta función utiliza LDAP por defecto.&lt;br&gt;Un ejemplo de su uso puede ser el siguiente:```pythonimport libgalcon=libgal.teradata(host='servidor', user='tu_user', password='tu_password', logmech='TD2')```&lt;br&gt;### TeradataError&lt;br&gt;Mediante esta función podemos acceder a las diferentes excepciones de error de TeradataSQL, tal como se muestra en el siguiente ejemplo:```pythonimport libgalconexion=libgal.teradata(host='host', user='user', password='password', logmech='TD2')try:  data=('1', 'Descripción 1')  query=&quot;INSERT INTO esquema.tabla(codigo, descripcion) VALUES (?,?)&quot;  with conexion.cursor() as cursor:      cursor.execute(query,data)      conexion.commit()    print(&quot;Los datos fueron almacenados correctmente.&quot;)except libgal.TeradataError as e:  print(e)  ```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;Ir arriba&lt;/a&gt;)&lt;/p&gt;### **HTML_Parser**&lt;br&gt;Está función sirve para hacer búsquedas rápidas de etiquetas y textos dentro de un código HTML mediante funciones nativas de Beautiful Soup. Para esto solo será necesario instanciar la función en una variable pasándole por parámetro un string o variable de tipo string contentiva del código HTML a trabajar, tal cómo se muestra a continuación:&lt;br&gt;```pythonimport libgalhtml='&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Sacré bleu!&lt;/body&gt;&lt;/html&gt;'soup=libgal.html_parser(html)```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;Ir arriba&lt;/a&gt;)&lt;/p&gt;### **SQLAlchemy**&lt;br&gt;Esta función encapsula algunas de las funcionalidades de SQLAlchemy. La funcionalidad principal de su uso consiste en la adopción de la progamación de acceso a datos mediante ORMs lo que nos permite cambiar de base de datos sin necesidad de cambiar las instrucciones CRUD dentro de nuestro código.&lt;br&gt;Para la instanciación de la misma es necesario definir los siguientes parámetros:***Host:** *(Requerido, Tipo String)* Indica el servidor de base de datos al cual nos deseamos conectar.***User:** *(Requerido, Tipo String)* Usuario necesario para la conexión al servidor de base de datos.***Password:** *(Requerido, Tipo String)* Contraseña con la que se autentica el usuario para poderse conectar a la base de datos.***Driver:** *(Requerido, Tipo String)* Indica el tipo de base de datos al que nos estamos conectando. Por los momentos solo podemos definir los siguientes valores: Teradata y/o MySQL.***Logmech:** *(Opcional, Tipo String)* Indica el mecanismo de autenticación del usuario. Es función utiliza LDAP por defecto.Para comenzar a interactuar con esta función podemos seguir el siguiente ejemplo:&lt;br&gt;```pythonimport libgalcon=libgal.sqlalchemy(host='host', user='usuario', password='password', driver='teradata', logmech='TD2')```&lt;br&gt;Para poder intectuar con las tablas de la base es necesario crear objetos que harán referencia a las mismas tal como se muestra en el siguiente ejemplo:&lt;br&gt;```python#Creación de modelos de TablasBase = con.Base()# Defino clase de la tablaclass clase_tabla(Base):    __tablename__ = 'nombre_tabla'    __table_args__ = {'schema': 'nombre_esquema'}    campo_clave = libgal.Column(libgal.Integer, primary_key=True)    descripcion = libgal.Column(libgal.String)    def __repr__(self):        return f&quot;&lt;dato(campo_clave='{self.campo_clave}', descripcion={self.descripcion})&gt;&quot;```&lt;br&gt;Notese que se creó una clase con los mismos atributos definidos para la creación de la tabla en el motor de la base de datos. A partir de aquí podemos crear objetos con los que podemos interactuar y que impactarán en la tabla de la base.Se recomienda usar sesiones para interactuar con las tablas. Estas son definidas de la siguiente forma:&lt;br&gt;```pythonsession=con.Session()```&lt;br&gt;### Select&lt;br&gt;Para listar todos los registros y campos de una tabla con SQLAlchemy solo debemos crear un objeto de la siguiente forma:&lt;br&gt;```pythonquery_tabla = session.query(clase_tabla)datos=query_tabla.all()```&lt;br&gt;En caso de que se quiera hacer un select con campos específicos y que además se quiera filtrar los registros con algunos valores de uno o más campos, lo podemos hacer de la siguiente manera:&lt;br&gt;```pythonquery_tabla = session.query(clase_tabla.campo_clave, clase_tabla.descripcion).filter(clase_tabla.campo_clave==1)datos=query_tabla.all()```&lt;br&gt;### Insert&lt;br&gt;Para agregar un registro en la tabla solo creamos un objeto mediante la clase de la tabla que vamos a trabajar, tal como se muestra en el siguiente ejemplo:&lt;br&gt;```pythonnuevo_dato = clase_tabla(campo_clave=1, descripcion='Descripción del registro')session = bd.Session()session.add(nuevo_dato)session.commit()session.close()```&lt;br&gt;### Query&lt;br&gt;En caso de que se requiera hacer una query especializada, con campos calculados o que implique dos o más tablas, mediante la conexión que creamos para interactuar con la base de datos, disponibilizamos un método llamado QUERY, el cual puede ser invocado como se muestra a continuación:&lt;br&gt;```pythonimport libgalcon=libgal.sqlalchemy(host='host', user='usuario', password='password', driver='teradata')otra_query=con.query(&quot;select * from tabla where campo='valor'&quot;)```### SQLAlchemyError&lt;br&gt;Mediante esta función podemos acceder a las diferentes excepciones de error de SQLAlchemy, tal como se muestra en el siguiente ejemplo:```pythonimport libgalcon=libgal.sqlalchemy(host='host', user='user', password='password', driver='teradata', logmech='TD2')with con.Session() as session:    try:        session.add(nuevo_dato)        session.commit()            print(&quot;Datos almacenadas correctamente&quot;)    except libgal.SQLAlchemyError as e:        session.rollback()        print(e)```&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;Ir arriba&lt;/a&gt;)&lt;/p&gt;&lt;!-- CONTACTO--&gt;## Contacto&lt;br&gt;Jean González - [@jeanmgonzalez](https://github.com/jeanmgonzalez)[![LinkedIn][linkedin-shield]][linkedin-url-jean]&lt;br&gt;Julian Girandez - [@julgiraldez](https://github.com/JuLGiraldez)[![LinkedIn][linkedin-shield]][linkedin-url-juli]&lt;br&gt;Link del proyecto: [https://github.com/jeanmgonzalez/libgal](https://github.com/jeanmgonzalez/libgal)&lt;br&gt;&lt;p align=&quot;right&quot;&gt;(&lt;a href=&quot;#readme-top&quot;&gt;ir arriba&lt;/a&gt;)&lt;/p&gt;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt;[contributors-shield]: https://img.shields.io/github/contributors/othneildrew/Best-README-Template.svg?style=for-the-badge[contributors-url]: https://github.com/othneildrew/Best-README-Template/graphs/contributors[forks-shield]: https://img.shields.io/github/forks/othneildrew/Best-README-Template.svg?style=for-the-badge[forks-url]: https://github.com/othneildrew/Best-README-Template/network/members[stars-shield]: https://img.shields.io/github/stars/othneildrew/Best-README-Template.svg?style=for-the-badge[stars-url]: https://github.com/othneildrew/Best-README-Template/stargazers[issues-shield]: https://img.shields.io/github/issues/othneildrew/Best-README-Template.svg?style=for-the-badge[issues-url]: https://github.com/Banco-Galicia/libgal/issues[license-shield]: https://img.shields.io/github/license/othneildrew/Best-README-Template.svg?style=for-the-badge[license-url]: https://github.com/othneildrew/Best-README-Template/blob/master/LICENSE.txt[linkedin-shield]:https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&amp;logo=linkedin&amp;colorB=555[linkedin-url-jean]: https://www.linkedin.com/in/bidata/[linkedin-url-juli]: https://www.linkedin.com/in/julian-leandro-giraldez/[product-screenshot]: images/screenshot.png[Next.js]: https://img.shields.io/badge/next.js-000000?style=for-the-badge&amp;logo=nextdotjs&amp;logoColor=white[Next-url]: https://nextjs.org/[React.js]: https://img.shields.io/badge/React-20232A?style=for-the-badge&amp;logo=react&amp;logoColor=61DAFB[React-url]: https://reactjs.org/[Vue.js]: https://img.shields.io/badge/Vue.js-35495E?style=for-the-badge&amp;logo=vuedotjs&amp;logoColor=4FC08D[Vue-url]: https://vuejs.org/[Angular.io]: https://img.shields.io/badge/Angular-DD0031?style=for-the-badge&amp;logo=angular&amp;logoColor=white[Angular-url]: https://angular.io/[Svelte.dev]: https://img.shields.io/badge/Svelte-4A4A55?style=for-the-badge&amp;logo=svelte&amp;logoColor=FF3E00[Svelte-url]: https://svelte.dev/[Laravel.com]: https://img.shields.io/badge/Laravel-FF2D20?style=for-the-badge&amp;logo=laravel&amp;logoColor=white[Laravel-url]: https://laravel.com[Bootstrap.com]: https://img.shields.io/badge/Bootstrap-563D7C?style=for-the-badge&amp;logo=bootstrap&amp;logoColor=white[Bootstrap-url]: https://getbootstrap.com[JQuery.com]: https://img.shields.io/badge/jQuery-0769AD?style=for-the-badge&amp;logo=jquery&amp;logoColor=white[JQuery-url]: https://jquery.com </longdescription>
</pkgmetadata>