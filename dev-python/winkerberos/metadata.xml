<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===========WinKerberos===========:Info: See `github &lt;https://github.com/mongodb-labs/winkerberos&gt;`_ for the latest source.:Author: Bernie Hackett &lt;bernie@mongodb.com&gt;About=====A native Kerberos client implementation for Python on Windows. This modulemimics the API of `pykerberos &lt;https://pypi.python.org/pypi/pykerberos&gt;`_ toimplement Kerberos authentication with Microsoft's Security Support ProviderInterface (SSPI). It supports Python 2.7 and 3.5+.Installation============WinKerberos is in the `Python Package Index (pypi)&lt;https://pypi.python.org/pypi/winkerberos&gt;`_. Use `pip&lt;https://pypi.python.org/pypi/pip&gt;`_ to install it::  python -m pip install winkerberosWinKerberos requires Windows 7 / Windows Server 2008 R2 or newer.Building and installing from source===================================You must have the correct version of VC++ installed for your version ofPython:- Python 3.5+ - Visual Studio 2015+ (Any version)- Python 2.7 - `Microsoft Visual C++ Compiler for Python 2.7`_.. _`Microsoft Visual C++ Compiler for Python 2.7`: https://www.microsoft.com/en-us/download/details.aspx?id=44266Once you have the required compiler installed, run the following command fromthe root directory of the WinKerberos source::    python setup.py installBuilding HTML documentation===========================First install `Sphinx &lt;https://pypi.python.org/pypi/Sphinx&gt;`_::    python -m pip install SphinxThen run the following command from the root directory of the WinKerberossource::    python setup.py docExamples========This is a simplified example of a complete authentication sessionfollowing RFC-4752, section 3.1:.. code-block:: python    import winkerberos as kerberos    def send_response_and_receive_challenge(response):        # Your server communication code here...        pass    def authenticate_kerberos(service, user, channel_bindings=None):        # Initialize the context object with a service principal.        status, ctx = kerberos.authGSSClientInit(service)        # GSSAPI is a &quot;client goes first&quot; SASL mechanism. Send the        # first &quot;response&quot; to the server and recieve its first        # challenge.        if channel_bindings is not None:            status = kerberos.authGSSClientStep(                ctx, &quot;&quot;, channel_bindings=channel_bindings)        else:            status = kerberos.authGSSClientStep(ctx, &quot;&quot;)        response = kerberos.authGSSClientResponse(ctx)        challenge = send_response_and_receive_challenge(response)        # Keep processing challenges and sending responses until        # authGSSClientStep reports AUTH_GSS_COMPLETE.        while status == kerberos.AUTH_GSS_CONTINUE:            if channel_bindings is not None:                status = kerberos.authGSSClientStep(                    ctx, challenge, channel_bindings=channel_bindings)            else:                status = kerberos.authGSSClientStep(ctx, challenge)            response = kerberos.authGSSClientResponse(ctx) or ''            challenge = send_response_and_receive_challenge(response)        # Decrypt the server's last challenge        kerberos.authGSSClientUnwrap(ctx, challenge)        data = kerberos.authGSSClientResponse(ctx)        # Encrypt a response including the user principal to authorize.        kerberos.authGSSClientWrap(ctx, data, user)        response = kerberos.authGSSClientResponse(ctx)        # Complete authentication.        send_response_and_receive_challenge(response)Channel bindings can be generated with help from the cryptography_ module. See`&lt;https://tools.ietf.org/html/rfc5929#section-4.1&gt;`_ for the rules regardinghash algorithm choice:.. code-block:: python    from cryptography import x509    from cryptography.hazmat.backends import default_backend    from cryptography.hazmat.primitives import hashes    def channel_bindings(ssl_socket):        server_certificate = ssl_socket.getpeercert(True)        cert = x509.load_der_x509_certificate(server_certificate, default_backend())        hash_algorithm = cert.signature_hash_algorithm        if hash_algorithm.name in ('md5', 'sha1'):            digest = hashes.Hash(hashes.SHA256(), default_backend())        else:            digest = hashes.Hash(hash_algorithm, default_backend())        digest.update(server_certificate)        application_data = b&quot;tls-server-end-point:&quot; + digest.finalize()        return kerberos.channelBindings(application_data=application_data).. _cryptography: https://pypi.python.org/pypi/cryptographyViewing API Documentation without Sphinx========================================Use the help function in the python interactive shell:.. code-block:: python    &gt;&gt;&gt; import winkerberos    &gt;&gt;&gt; help(winkerberos)</longdescription>
</pkgmetadata>