<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>====================WebDriver Test Tools====================|pypi||github|A front-end testing framework using `Selenium WebDriver`_ and Python... |pypi| image:: https://img.shields.io/pypi/v/webdriver-test-tools.svg    :alt: PyPI    :target: http://pypi.python.org/pypi/webdriver-test-tools.. |github| image:: https://img.shields.io/badge/GitHub--green.svg?style=social&amp;logo=github    :alt: GitHub    :target: https://github.com/connordelacruz/webdriver-test-tools.. _Selenium WebDriver: https://www.seleniumhq.org/docs/03_webdriver.jsp.. contents::    :depth: 2Overview========WebDriver Test Tools provides a framework and utilities for writing front-end functional tests.Features--------- Framework for writing cross-browser front-end test suites- Pre-defined test functions for commonly used test procedures- Utilities and extended functionality for the Selenium WebDriver package- Implementation of the `Page Object Model`_ with pre-defined page objects for  common elements (navbars, forms, etc)- Command line tool for quickly generating files and directories for new test  projects- Mobile device layout emulation for responsive tests- Headless browser testing- Support for running tests on `BrowserStack`_.. _Page Object Model: https://martinfowler.com/bliki/PageObject.html.. _BrowserStack: https://www.browserstack.com/This project uses Selenium WebDriver for automated browser actions and thepython unittest library for the test framework, documentation for which can befound below:- `Selenium with Python  &lt;https://seleniumhq.github.io/selenium/docs/api/py/api.html&gt;`__- `Python unit testing framework  &lt;https://docs.python.org/3/library/unittest.html&gt;`__Documentation-------------Full documentation for WebDriver Test Tools:    - `WebDriver Test Tools Docs`_: Framework documentation    - `webdriver_test_tools Package API`_: Python package API.. _WebDriver Test Tools Docs: https://connordelacruz.com/webdriver-test-tools/.. _webdriver_test_tools Package API: https://connordelacruz.com/webdriver-test-tools/webdriver_test_tools.htmlSet Up======Prerequisites-------------Python~~~~~~-  Python 3.4+-  pip (included by default with Python 3.4+)Drivers~~~~~~~.. _driver-table:In order to use Selenium, drivers will need to be installed for any browsertests will be run on. Below are currently supported drivers, their defaultenabled/disabled status, and their supported features:+----------------------+--------------------+-------------------+---------------+| Driver               | Enabled by Default | Headless Browsing | Mobile Layout |+======================+====================+===================+===============+| `Google Chrome`_     | ✓                  | ✓                 | ✓             |+----------------------+--------------------+-------------------+---------------+| `Firefox`_           | ✓                  | ✓                 |               |+----------------------+--------------------+-------------------+---------------+| `Safari`_            |                    |                   |               |+----------------------+--------------------+-------------------+---------------+| `Edge`_              |                    |                   |               |+----------------------+--------------------+-------------------+---------------+| `Internet Explorer`_ |                    |                   |               |+----------------------+--------------------+-------------------+---------------+Cross-platform browsers are enabled by default, while platform-specific browsersare disabled by default. You can enable or disable drivers in``&lt;test_package&gt;/config/browser.py`` by setting the corresponding value in``BrowserConfig.ENABLED_BROWSERS`` to ``True`` or ``False``, respectively... _Google Chrome: https://sites.google.com/a/chromium.org/chromedriver/downloads.. _Firefox: https://github.com/mozilla/geckodriver/releases.. _Safari: https://webkit.org/blog/6900/webdriver-support-in-safari-10/ .. _Internet Explorer: https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver.. _Edge: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/The following documentation goes into detail on configuring browsers fortesting:    - `Testing with Additional Browsers`_: Enabling/disabling browsers, per-test      skipping for certain browsers, emulating mobile browsers, and headless      browser testing    - `BrowserStack Support`_: Enabling and configuring testing on BrowserStack.. _Testing with Additional Browsers: https://connordelacruz.com/webdriver-test-tools/additional_browsers.html.. _BrowserStack Support: https://connordelacruz.com/webdriver-test-tools/browserstack.htmlInstallation------------The package can be installed using pip:::    pip install webdriver-test-tools**Note:** Command may be ``pip3`` instead of ``pip`` depending on the system.Creating a Test Suite---------------------The package itself does not contain test cases. To generate files for a new testsuite, change into the desired directory and run:::    wtt initThis will generate a new test package with template files and projectdirectories.The following documentation goes into detail on test projects:    - `Test Projects`_: Test project setup, configuration, command line usage,      and directory structure    - `Example Test Project`_: Step-by-step tutorial with a simple example test      project.. _Test Projects: https://connordelacruz.com/webdriver-test-tools/test_projects.html.. _Example Test Project: https://connordelacruz.com/webdriver-test-tools/example_project.htmlCommand Line Usage==================To initialize a new test project in the current directory:::    wtt init [&lt;package_name&gt;] [&lt;&quot;Project Title&quot;&gt;] [--no-gitignore] [--no-readme]Where:- ``&lt;package_name&gt;``: Name for the new test package. (alphanumeric characters  and underscores only. Cannot start with a number)- ``&lt;&quot;Project Title&quot;&gt;``: (Optional) Friendly name for the test project. Defaults  to the value of &lt;package_name&gt; if not provided- ``--no-gitignore``: Do not create .gitignore files for project root and log  directory- ``--no-readme``: Do not generate README file with usage infoIf no arguments are provided, a prompt will walk you through projectinitialization.For info on command line arguments:::    wtt --helpTo print the version number:::    wtt --version**Note:** ``wtt`` and ``webdriver_test_tools`` can be used interchangeably.Contributing============Please read the `contributing guidelines`_ for details on reporting bugs,requesting features, and making contributions to the project... _contributing guidelines: https://github.com/connordelacruz/webdriver-test-tools/blob/master/.github/CONTRIBUTING.rst=====================Test Project Overview=====================Setup=====Initialization--------------To generate files for a new test suite, change into the desired directory andrun:::    wtt initThis will generate a new test package with template files and projectdirectories.(Optional) Setup Virtual Environment------------------------------------If using `virtualenv &lt;https://virtualenv.pypa.io/en/latest/&gt;`_, initialize thevirtual environment before installing the test package:::      virtualenv venv   source ./venv/bin/activateTest Package Installation-------------------------After initializing the test project, run the following command from the projectroot directory:::    pip install -e .Installing with the ``-e`` flag will update the package automatically whenchanges are made to the source code.Configuration-------------After initializing a project, the URL of the site to be tested will need to beconfigured. In ``&lt;test_package&gt;/config/site.py``, set the ``SITE_URL`` and``BASE_URL`` of the ``SiteConfig`` class. You can add any other URLs you'll needas class variables as well. Basic Command Line Usage========================**Usage:**::    &lt;test_package&gt; [-h] &lt;command&gt;If no ``&lt;command&gt;`` is specified, the ``run`` command will be executed bydefault.**Note:** If the test package was not installed with ``pip``, run test packagescommands using ``python -m &lt;test_package&gt; &lt;command&gt;``.For info on command line arguments, use the ``--help`` (or ``-h``) argument:::    &lt;test_package&gt; --helpCreating New Project Files--------------------------New tests and page objects can be generated using the ``new`` command:::    &lt;test_package&gt; new [&lt;type&gt;] [&lt;module_name&gt;] [&lt;ClassName&gt;] [-d &lt;description&gt;] [-f]Where:- ``&lt;type&gt;``: The type of file to create (``test`` or ``page``)- ``&lt;module_name&gt;``: Filename to use for the new python module- ``&lt;ClassName&gt;``: Name to use for the initial class- ``&lt;description&gt;``: (Optional) Description for the initial class- ``-f``: (Optional) Force overwrite if a file with the same name already existsIf no arguments are provided, a prompt will walk you through generating the newfile. Alternatively, you can skip the prompts by using the arguments shown inthe following sections.Creating New Tests~~~~~~~~~~~~~~~~~~New test modules can be generated using the ``new test`` command:::    &lt;test_package&gt; new test &lt;module_name&gt; &lt;TestCaseClass&gt;Where ``&lt;module_name&gt;`` is the filename for the new test and ``&lt;TestCaseClass&gt;``is the class name for the test case.The ``--description`` (or ``-d``) argument can be used to add a description forthe initial test case class:::    &lt;test_package&gt; new test &lt;module_name&gt; &lt;TestCaseClass&gt; -d &quot;Test case description&quot;If a test module with the same ``&lt;module_name&gt;`` already exists, ``new test``will not overwrite it by default. The ``--force`` (or ``-f``) argument can beused to force overwrite existing files:::    &lt;test_package&gt; new test &lt;module_name&gt; &lt;TestCaseClass&gt; --forceCreating New Page Objects~~~~~~~~~~~~~~~~~~~~~~~~~New page object modules can be generated using the ``new page`` command:::    &lt;test_package&gt; new page &lt;module_name&gt; &lt;PageObjectClass&gt;Where ``&lt;module_name&gt;`` is the filename for the new module and``&lt;PageObjectClass&gt;`` is the class name for the page object.The ``--description`` (or ``-d``) argument can be used to add a description forthe initial page object class:::    &lt;test_package&gt; new page &lt;module_name&gt; &lt;PageObjectClass&gt; -d &quot;Page object description&quot;By default, the new class will be a generic ``BasePage`` subclass. The``--prototype`` (or ``-p``) argument can be used to specify a `page objectprototype`_ class to use as a parent class for the new page object:::   &lt;test_package&gt; new page &lt;module_name&gt; &lt;PageObjectClass&gt; -p &lt;prototype&gt;For a list of valid ``&lt;prototype&gt;`` options, run ``&lt;test_package&gt; new page--help``... _page object prototype: https://connordelacruz.com/webdriver-test-tools/utilities.html#page-object-prototypesPage object prototypes support YAML file parsing to simplify the syntax ofrepresenting elements. Whether YAML files or Python-only files are generated bydefault is configured in ``&lt;test_package&gt;/config/projectfiles.py`` by settingthe ``ENABLE_PAGE_OBJECT_YAML`` variable of the ``ProjectFilesConfig`` class.The default setting can be overridden by using command line arguments. If``ENABLE_PAGE_OBJECT_YAML`` is ``True``, the ``--no-yaml`` (or ``-Y``) argumentcan be used to only generate ``.py`` files:::      &lt;test_package&gt; new page &lt;args&gt; --no-yamlIf ``ENABLE_PAGE_OBJECT_YAML`` is ``False``, the ``--yaml`` (or ``-y``) argumentcan be used to generate ``.py`` and ``.yml`` files for supported prototypes:::   &lt;test_package&gt; new page &lt;args&gt; --yaml.. _Page Object YAML Files documentation: https://connordelacruz.com/webdriver-test-tools/yaml.htmlIf a page module with the same ``&lt;module_name&gt;`` already exists, ``new page``will not overwrite it by default. The ``--force`` (or ``-f``) argument can beused to force overwrite existing files:::    &lt;test_package&gt; new page &lt;module_name&gt; &lt;PageObjectClass&gt; --forceRunning Tests-------------Basic Usage~~~~~~~~~~~To run all tests:::    &lt;test_package&gt;Running Specific Tests~~~~~~~~~~~~~~~~~~~~~~To run all test cases in one or more modules, use the ``--module`` (or ``-m``)argument:::    &lt;test_package&gt; --module &lt;test_module&gt; [&lt;test_module&gt; ...]To skip all test cases in one or more modules, use the ``--skip-module`` (or``-S``) argument:::    &lt;test_package&gt; --skip-module &lt;test_module&gt; [&lt;test_module&gt; ...]To run specific test case classes or methods, use the ``--test`` (or ``-t``)argument:::    &lt;test_package&gt; --test &lt;TestClass&gt;[.&lt;test_method&gt;] [&lt;TestClass&gt;[.&lt;test_method&gt;] ...]To skip certain test cases or methods, use the ``--skip`` (or ``-s``) argument:::    &lt;test_package&gt; --skip &lt;TestClass&gt;[.&lt;test_method&gt;] [&lt;TestClass&gt;[.&lt;test_method&gt;] ...]The ``--test`` and ``--skip`` arguments both support wildcards (``*``) in classand method names.These arguments can be used together. When combined, they are processed in thefollowing order:    #. ``--skip-module`` removes the specified modules from the set of tests    #. ``--module`` reduces the set of tests to those in the specified modules    #. ``--test`` reduces the set of tests to the specified classes and methods    #. ``--skip`` removes the specified classes and methods from the set of testsUsing Specific Browsers~~~~~~~~~~~~~~~~~~~~~~~To do any of the above in specific browsers rather than running in all availablebrowsers, use the ``--browser`` (or ``-b``) argument:::    &lt;test_package&gt; &lt;args&gt; --browser &lt;browser&gt; [&lt;browser ...]For a list of options you can specify with ``--browser``, run ``&lt;test_package&gt;--help``.Using Headless Browsers~~~~~~~~~~~~~~~~~~~~~~~By default, tests run using the browser's GUI. While it can be helpful to seewhat's going on during test execution, loading and rendering the browser windowcan be resource-intensive and slows down performance during test execution.To improve performance, tests can be run in `headless browsers`_ using the``--headless`` (or ``-H``) argument:::    &lt;test_package&gt; &lt;args&gt; --headless**Note:** When using the ``--headless`` argument, tests will only be run withthe following web drivers that support running in a headless environment:    * `Chrome &lt;https://developers.google.com/web/updates/2017/04/headless-chrome&gt;`__    * `Firefox &lt;https://developer.mozilla.org/en-US/Firefox/Headless_mode&gt;`__.. _headless browsers: https://en.wikipedia.org/wiki/Headless_browserUsing BrowserStack~~~~~~~~~~~~~~~~~~Test projects can be configured to run tests on `BrowserStack`_. OnceBrowserStack support is enabled, tests can be run on BrowserStack using the``--browserstack`` (or ``-B``) argument:::    &lt;test_package&gt; &lt;args&gt; --browserstackSee the documentation on `BrowserStack Support`_ for more details and setupinstructions... _BrowserStack: https://www.browserstack.com/.. _BrowserStack Support: https://connordelacruz.com/webdriver-test-tools/browserstack.htmlConfiguring Output~~~~~~~~~~~~~~~~~~By default, detailed output is displayed when running tests. To reduce orsuppress output, use the ``--verbosity`` (or ``-v``) argument:::    &lt;test_package&gt; &lt;args&gt; --verbosity &lt;level&gt;Where ``&lt;level&gt;`` is one of the following:    * 0 - Final results only    * 1 - Final results and progress indicator    * 2 - Full output**Note:** The default output level can be changed in``&lt;test_package&gt;/config/test.py`` by setting the ``DEFAULT_VERBOSITY``attribute of the ``TestSuiteConfig`` class.List Available Tests--------------------Basic Usage~~~~~~~~~~~To print a list of available test classes and methods:::    &lt;test_package&gt; listTo include docstrings for each test class and method in output:::    &lt;test_package&gt; list --verboseListing Specific Tests~~~~~~~~~~~~~~~~~~~~~~To only list test classes from specific modules:::    &lt;test_package&gt; list --module &lt;test_module&gt; [&lt;test_module&gt; ...]To omit specific modules:::    &lt;test_package&gt; list --skip-module &lt;test_module&gt; [&lt;test_module&gt; ...]To only list specific test classes:::    &lt;test_package&gt; list --test &lt;TestClass&gt; [&lt;TestClass&gt; ...]To skip certain test classes in output:::    &lt;test_package&gt; --skip &lt;TestClass&gt; [&lt;TestClass&gt; ...]See `Running Specific Tests`_ for more info on these arguments.Project Structure=================``wtt init`` will create the following files and directoriesinside the project directory:::    &lt;project-directory&gt;/    ├── README.rst    ├── setup.py    └── &lt;test_package&gt;/        ├── __main__.py        ├── __init__.py        ├── config/        │   ├── __init__.py        │   ├── browser.py        │   ├── browserstack.py        │   ├── projectfiles.py        │   ├── site.py        │   ├── test.py        │   └── webdriver.py        ├── data.py        ├── log/        ├── pages/        │   └── __init__.py        ├── screenshot/        └── tests/            └── __init__.pyThis test structure is designed to be used with the `Page Object Model&lt;https://martinfowler.com/bliki/PageObject.html&gt;`__. Interaction with the pageshould be handled by page objects to minimize the need to alter tests wheneverthe HTML is changed.Test Project Root Contents--------------------------* ``setup.py``: Python package setup file that allows the new test suite to be  installed as a pip package.Test Package Root Contents--------------------------* ``__main__.py``: Required to run tests from the command line. * ``__init__.py``: Empty init file so Python recognizes the directory as a  package.* ``data.py``: Module for storing static data for tests that must use specific  values (e.g. emails, usernames, etc).Test Package Directories------------------------config/~~~~~~~Configurations used by test scripts for site URLs, web driver options, and thepython unittest framework.* ``browser.py``: Configure which browsers to run tests in.* ``browserstack.py``: Enable and configure testing with `BrowserStack  &lt;https://browserstack.com&gt;`__.* ``projectfiles.py``: Configure defaults for generating project files with the  ``new`` command.* ``site.py``: Configure URLs used for testing.* ``test.py``: Configure the ``unittest.TestRunner`` class.* ``webdriver.py``: Configure WebDrivers and log output directory.log/~~~~Default output directory for WebDriver logs. This can be changed in``config/webdriver.py``.pages/~~~~~~Page object classes for pages and components. These classes should handlelocating and interacting with elements on the page. See `Creating New PageObjects`_ for info on generating new page object modules.screenshot/~~~~~~~~~~~Default output directory for screenshots taken during test execution. This can be changed in ``config/webdriver.py``.tests/~~~~~~Test case modules. These use page objects to interact with elements and assertthat the expected behavior occurs. See `Creating New Tests`_ for info ongenerating new test modules.</longdescription>
</pkgmetadata>