<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Superspreader ü¶†Superspreader is a little helper library that simplifies working with spreadsheets.It is built on top of [openpyxl](https://openpyxl.readthedocs.io/en/stable/).OpenPyXL is its only dependency.Instead of looping over rows and columns manually, the structure of a spreadsheetis described in a class:```from superspreader import fieldsfrom superspreader.sheets import BaseSheetclass AlbumSheet(BaseSheet):    &quot;&quot;&quot;    This class describes a sheet in an Excel document    &quot;&quot;&quot;    sheet_name = &quot;Albums&quot; # The sheet is named ‚Äúalbums‚Äù    header_rows = 3 # The sheet has three header rows    # The column labels are in the second row.    # It is *not* zero based to match the Excel row number    label_row = 2    # The columns    artist = fields.CharField(source=&quot;Artist&quot;, required=True)    album = fields.CharField(source=&quot;Album&quot;)    release_date = fields.DateField(source=&quot;Release Date&quot;)    average_review = fields.FloatField(source=&quot;Average Review&quot;)    chart_position = fields.IntegerField(source=&quot;Chart Position&quot;)```Ready? Let‚Äôs load an Excel spreadsheet!```if __name__ == &quot;__main__&quot;:    sheet = AlbumSheet(&quot;albums.xlsx&quot;)    # Load and parse data from the document    sheet.load()    print(sheet.has_errors)    # False    print(sheet.errors)    # []    print(sheet.infos)    # []    for row_dict in sheet:        print(row_dict)# {'artist': 'David Bowie', 'album': 'Toy', 'release_date': datetime.date(2022, 1, 7), 'average_review': 4.3, 'chart_position': 5}# {'artist': 'The Wombats', 'album': 'Fix Yourself, Not The World', 'release_date': datetime.date(2022, 3, 7), 'average_review': 3.9, 'chart_position': 7}# {'artist': 'Kokoroko', 'album': 'Could We Be More', 'release_date': datetime.date(2022, 8, 1), 'average_review': 4.7, 'chart_position': 30}```In `tests/spreadsheets` is a sample spreadsheet that is used for testing. Feel free to fiddle around.There‚Äôs a lot more to say and I‚Äôll update the documentation as I go.## Field paramsFields must have a `source`‚Äù`parameter, that holds the column name for the spreadsheet.`unique=True` may be used to indicate that a field‚Äôs value must be unique.## Adding static &amp; dynamic data to rowsTo provide additional data, use `extra_data`. Data from the spreadsheet take precedence over extra data.```extra_data = {    &quot;status&quot;: &quot;released&quot;}sheet = AlbumSheet(&quot;albums.xlsx&quot;, extra_data=extra_data)sheet.load()# {'artist': 'David Bowie', 'album': 'Toy', 'release_date': datetime.date(2022, 1, 7), 'average_review': 4.3, 'chart_position': 5, 'status': 'released'}```Use a callable for dynamic extra data:```extra_data = {    &quot;summary&quot;: lambda row: f&quot;‚Äú{row.get('album')}‚Äù by {row.get('artist')}&quot;}sheet = AlbumSheet(&quot;albums.xlsx&quot;, extra_data=extra_data)# {'artist': 'David Bowie', 'album': 'Toy', 'release_date': datetime.date(2022, 1, 7), 'average_review': 4.3, 'chart_position': 5, 'summary': '‚ÄúToy‚Äù by David Bowie'}```## Changelog### 0.2.7- Adds support for unique validation### 0.2.3- Adds support for inheriting sheets (before that, fields from base classes weren‚Äôt recognized)### 0.2.2- Adds support for callables in `extra_data`### 0.2.1- Adds support for providing field defaults by setting the `default` attribute or providing an instance-label value: `fields.CharField(source=&quot;Album&quot;, default=&quot;not specified&quot;)`---The API is inspired by [Django‚Äôs model API](https://docs.djangoproject.com/en/dev/ref/models/) and [ElasticSearch DSL](https://elasticsearch-dsl.readthedocs.io/en/latest/persistence.html#document).</longdescription>
</pkgmetadata>