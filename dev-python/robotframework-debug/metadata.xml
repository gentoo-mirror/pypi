<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Debug Library for Robot Framework=================================.. contents::   :local:Introduction------------This Library is a Fork by Ren√© Rohner from the original robotframework-debuglibrary by Xie YanboRobotframework-RobotDebug is a debug library for `RobotFramework`_,which can be used as an interactive shell(REPL) also... _`RobotFramework`: http://robotframework.orgInstallation------------To install using ``pip``::    pip install robotframework-debugUsage-----You can use this as a library, import ``RobotDebug`` and call ``Debug`` keyword in your test files like this::    *** Settings ***    Library         RobotDebug    ** test case **    SOME TEST        # some keywords...        Debug        # some else...        ${count} =  Get Element Count  name:div_nameOr you can run it standalone as a ``RobotFramework`` shell::    $ irobot    [...snap...]    &gt;&gt;&gt;&gt;&gt; Enter interactive shell    &gt; help    Input Robotframework keywords, or commands listed below.    Use &quot;libs&quot; or &quot;l&quot; to see available libraries,    use &quot;keywords&quot; or &quot;k&quot; to see the list of library keywords,    use the TAB keyboard key to autocomplete keywords.    Documented commands (type help &lt;topic&gt;):    ========================================    EOF  continue  docs  help  keywords  libs  ll        n     pdb  selenium    c    d         exit  k     l         list  longlist  next  s    step    &gt; log  hello    &gt; get time    &lt; '2011-10-13 18:50:31'    &gt; # use TAB to auto complete commands    &gt; BuiltIn.Get Time    &lt; '2011-10-13 18:50:39'    &gt; import library  String    &gt; get substring  helloworld  5  8    &lt; 'wor'    &gt; # define variables as you wish    &gt; ${secs} =  Get Time  epoch    # ${secs} = 1474814470    &gt; Log to console  ${secs}    1474814470    &gt; @{list} =  Create List    hello    world    # @{list} = ['hello', 'world']    &gt; Log to console  ${list}    ['hello', 'world']    &gt; &amp;{dict} =  Create Dictionary    name=admin    email=admin@test.local    # &amp;{dict} = {'name': 'admin', 'email': 'admin@test.local'}    &gt; Log  ${dict.name}    &gt; # print value if you input variable name only    &gt; ${list}    [u'hello', u'world']    &gt; ${dict.name}    admin    &gt; exit    &gt;&gt;&gt;&gt;&gt; Exit shell.The interactive shell support auto-completion for robotframework keywords andcommands. Try input ``BuiltIn.`` then hit ``Control + Space`` key to feeling it.The history will save at ``~/.rfdebug_history`` default or any filedefined in environment variable ``RFDEBUG_HISTORY``.In case you don't remember the name of keyword during using ``irobot``,there are commands ``libs`` or ``ls`` to list the imported libraries andbuilt-in libraries, and ``keywords &lt;lib name&gt;`` or ``k`` to listkeywords of a library.``irobot`` accept any ``robot`` arguments, but by default, ``rfdebug``disabled all logs with ``-l None -x None -o None -L None -r None``.Step debugging**************``RobotDebug`` support step debugging since version ``2.1.0``.You can use ``step``/``s``, ``next``/``n``, ``continue``/``c``,``list``/``l`` and ``longlist``/``ll`` to trace and view the codestep by step like in ``pdb``::    $ robot some.robot    [...snap...]    &gt;&gt;&gt;&gt;&gt; Enter interactive shell    &gt; l    Please run `step` or `next` command first.    &gt; s    .&gt; /Users/xyb/some.robot(7)    -&gt; log to console  hello    =&gt; BuiltIn.Log To Console  hello    &gt; l      2   Library  RobotDebug      3      4   ** test case **      5   test      6       debug      7 -&gt;    log to console  hello      8       log to console  world    &gt; n    hello    .&gt; /Users/xyb/some.robot(8)    -&gt; log to console  world    =&gt; BuiltIn.Log To Console  world    &gt; c    &gt;&gt;&gt;&gt;&gt; Exit shell.    worldNote: Single-step debugging does not support ``FOR`` loops currently.Submitting issues-----------------Bugs and enhancements are tracked in the `issue tracker&lt;https://github.com/imbus/robotframework-debug/issues&gt;`_.Before submitting a new issue, it is always a good idea to check is thesame bug or enhancement already reported. If it is, please add your commentsto the existing issue instead of creating a new one.Development-----------If you want to develop and run RobotDebug locally, you can use ::    $ python RobotDebug/shell.py tests/step.robot`shell.py` is calling `robot` through a child process, so it will interruptpython debugging capabilities. If you want to debug in tools like vscode,pdb, you should run ::    $ python -m robot tests/step.robotIf you want to run the test, please install the dependency packages firstand then execute the test ::    $ python setup.py develop    $ python setup.py testSince RF takes over stdout, debugging information can be output with ::    import sys    print('some information', file=sys.stdout)License-------This software is licensed under the ``New BSD License``. See the ``LICENSE``file in the top distribution directory for the full license text... # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround</longdescription>
</pkgmetadata>