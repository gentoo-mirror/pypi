<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>.. note that this README gets 'include'ed into the main documentation============================================== trustme: #1 quality TLS certs while you wait==============================================.. image:: https://vignette2.wikia.nocookie.net/jadensadventures/images/1/1e/Kaa%27s_hypnotic_eyes.jpg/revision/latest?cb=20140310173415   :width: 200px   :align: rightYou wrote a cool network client or server. It encrypts connectionsusing `TLS&lt;https://en.wikipedia.org/wiki/Transport_Layer_Security&gt;`__. Your testsuite needs to make TLS connections to itself.Uh oh. Your test suite *probably* doesn't have a valid TLScertificate. Now what?``trustme`` is a tiny Python package that does one thing: it gives youa `fake &lt;https://martinfowler.com/bliki/TestDouble.html&gt;`__certificate authority (CA) that you can use to generate fake TLS certsto use in your tests. Well, technically they're real certs, they'rejust signed by your CA, which nobody trusts. But you can trustit. Trust me.Vital statistics================**Install:** ``pip install -U trustme``**Documentation:** https://trustme.readthedocs.io**Bug tracker and source code:** https://github.com/python-trio/trustme**Tested on:** Python 3.8+, CPython and PyPy**License:** MIT or Apache 2, your choice.**Code of conduct:** Contributors are requested to follow our `code ofconduct&lt;https://github.com/python-trio/trustme/blob/master/CODE_OF_CONDUCT.md&gt;`__in all project spaces.Cheat sheet===========Programmatic usage:.. code-block:: python   import trustme   # ----- Creating certs -----   # Look, you just created your certificate authority!   ca = trustme.CA()   # And now you issued a cert signed by this fake CA   # https://en.wikipedia.org/wiki/Example.org   server_cert = ca.issue_cert(&quot;test-host.example.org&quot;)   # That's it!   # ----- Using your shiny new certs -----   # You can configure SSL context objects to trust this CA:   ca.configure_trust(ssl_context)   # Or configure them to present the server certificate   server_cert.configure_cert(ssl_context)   # You can use standard library or PyOpenSSL context objects here,   # trustme is happy either way.   # ----- or -----   # Save the PEM-encoded data to a file to use in non-Python test   # suites:   ca.cert_pem.write_to_path(&quot;ca.pem&quot;)   server_cert.private_key_and_cert_chain_pem.write_to_path(&quot;server.pem&quot;)   # ----- or -----   # Put the PEM-encoded data in a temporary file, for libraries that   # insist on that:   with ca.cert_pem.tempfile() as ca_temp_path:       requests.get(&quot;https://...&quot;, verify=ca_temp_path)Command line usage:.. code-block:: console   $ # Certs may be generated from anywhere. Here's where we are:   $ pwd   /tmp   $ # ----- Creating certs -----   $ python -m trustme   Generated a certificate for 'localhost', '127.0.0.1', '::1'   Configure your server to use the following files:     cert=/tmp/server.pem     key=/tmp/server.key   Configure your client to use the following files:     cert=/tmp/client.pem   $ # ----- Using certs -----   $ gunicorn --keyfile server.key --certfile server.pem app:app   $ curl --cacert client.pem https://localhost:8000/   Hello, world!FAQ===**Should I use these certs for anything real?** Certainly not.**Why not just use self-signed certificates?** These are morerealistic. You don't have to disable your certificate validation codein your test suite, which is good because you want to test what yourun in production, and you would *never* disable your certificatevalidation code in production, right? Plus, they're just as easy towork with. Actually easier, in many cases.**What if I want to test how my code handles some bizarre TLSconfiguration?** We think trustme hits a sweet spot of ease-of-useand generality as it is. The defaults are carefully chosen to workon all major operating systems and be as fast as possible. We don'twant to turn trustme into a second-rate re-export of everything in`cryptography &lt;https://cryptography.io&gt;`__. If you have more complexneeds, consider using them directly, possibly starting from thetrustme code.**Will you automate installing CA cert into system trust store?** No.`mkcert &lt;https://github.com/FiloSottile/mkcert&gt;`__ already does thiswell, and we would not have anything to add.</longdescription>
</pkgmetadata>