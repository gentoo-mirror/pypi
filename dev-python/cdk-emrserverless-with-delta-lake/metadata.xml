<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># cdk-emrserverless-with-delta-lake[![License](https://img.shields.io/badge/License-Apache%202.0-green)](https://opensource.org/licenses/Apache-2.0) [![Release](https://github.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/actions/workflows/release.yml/badge.svg)](https://github.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/actions/workflows/release.yml/badge.svg) [![npm downloads](https://img.shields.io/npm/dt/cdk-emrserverless-with-delta-lake?label=npm%20downloads&amp;style=plastic)](https://img.shields.io/npm/dt/cdk-emrserverless-with-delta-lake?label=npm%20downloads&amp;style=plastic) [![pypi downloads](https://img.shields.io/pypi/dw/cdk-emrserverless-with-delta-lake?label=pypi%20downloads&amp;style=plastic)](https://img.shields.io/pypi/dw/cdk-emrserverless-with-delta-lake?label=pypi%20downloads&amp;style=plastic) [![NuGet downlods](https://img.shields.io/nuget/dt/Emrserverless.With.Delta.Lake?label=NuGet%20downloads&amp;style=plastic)](https://img.shields.io/nuget/dt/Emrserverless.With.Delta.Lake?label=NuGet%20downloads&amp;style=plastic) [![repo languages](https://img.shields.io/github/languages/count/HsiehShuJeng/cdk-emrserverless-with-delta-lake?style=plastic)](https://img.shields.io/github/languages/count/HsiehShuJeng/cdk-emrserverless-with-delta-lake?style=plastic)| npm (JS/TS) | PyPI (Python) | Maven (Java) | Go | NuGet || --- | --- | --- | --- | --- || [Link](https://www.npmjs.com/package/cdk-emrserverless-with-delta-lake) | [Link](https://pypi.org/project/cdk-emrserverless-with-delta-lake/) | [Link](https://search.maven.org/artifact/io.github.hsiehshujeng/cdk-emrserverless-quickdemo-with-delta-lake) | [Link](https://github.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake-go) | [Link](https://www.nuget.org/packages/Emrserverless.With.Delta.Lake/) |![high level architecture](https://raw.githubusercontent.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/main/images/high%20level%20architecture.png)This constrcut builds an EMR studio, a cluster template for the EMR Studio, and an EMR Serverless application. 2 S3 buckets will be created, one is for the EMR Studio workspace and the other one is for EMR Serverless applications. Besides, the VPC and the subnets for the EMR Studio will be tagged `{&quot;Key&quot;: &quot;for-use-with-amazon-emr-managed-policies&quot;, &quot;Value&quot;: &quot;true&quot;}` via a custom resource. This is necessary for the [service role](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-service-role.html#emr-studio-service-role-instructions) of EMR Studio.This construct is for analysts, data engineers, and anyone who wants to know how to process **Delta Lake data** with EMR serverless.![cfn designer](https://github.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/blob/main/images/cfn-designer.png?raw=true)They build the construct via [cdkv2](https://docs.aws.amazon.com/cdk/v2/guide/home.html) and build a serverless job within the EMR application generated by the construct via AWS CLI within few minutes. After the EMR serverless job is finished, they can then check the processed result done by the EMR serverless job on an EMR notebook through the cluster template.![app history](https://github.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/blob/main/images/spark%20jobs.png?raw=true)# TOC* [Requirements](#requirements)* [Before deployment](#before-deployment)* [Minimal content for deployment](#minimal-content-for-deployment)* [After deployment](#after-deployment)* [Create an EMR Serverless application](#create-an-emr-serverless-app)* [Check the executing job](#check-the-executing-job)* [Check results from an EMR notebook via cluster template](#check-results-from-an-emr-notebook-via-cluster-template)* [Fun facts](#fun-facts)* [Future work](#future-work)# Requirements1. Your current identity has the `AdministratorAccess` power.2. [An IAM user](https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html) named `Administrator` with the `AdministratorAccess` power.   * This is related to the Portfolio of AWS Service Catalog created by the construct, which is required for [EMR cluster tempaltes](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-cluster-templates.html).   * You can choose whatsoever identity you wish to associate with the Product in the Porfolio for creating an EMR cluster via cluster tempalte. Check `serviceCatalogProps` in the `EmrServerless` construct for detail, otherwise, the IAM user mentioned above will be chosen to set up with the Product.# Before deploymentYou might want to execute the following command.```shPROFILE_NAME=&quot;scott.hsieh&quot;# If you only have one credentials on your local machine, just ignore `--profile`, buddy.cdk bootstrap aws://${AWS_ACCOUNT_ID}/${AWS_REGION} --profile ${PROFILE_NAME}```# Minimal content for deployment```python#!/usr/bin/env nodeimport * as cdk from 'aws-cdk-lib';import { Construct } from 'constructs';import { EmrServerless } from 'cdk-emrserverless-with-delta-lake';class TypescriptStack extends cdk.Stack {  constructor(scope: Construct, id: string, props?: cdk.StackProps) {    super(scope, id, props);    new EmrServerless(this, 'EmrServerless');  }}const app = new cdk.App();new TypescriptStack(app, 'TypescriptStack', {  stackName: 'emr-studio',  env: {    region: process.env.CDK_DEFAULT_REGION,    account: process.env.CDK_DEFAULT_ACCOUNT,  },});```# After deploymentPromise me, darling, make advantage on the CloudFormation outputs.  All you need is **copy-paste**, **copy-paste**, **copy-paste**, life should be always that easy.![cfn outputs](https://raw.githubusercontent.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/main/images/cfn-outputs.png)1. **Define the following environment variables on your current session.**   ```   export PROFILE_NAME=&quot;${YOUR_PROFILE_NAME}&quot;   export JOB_ROLE_ARN=&quot;${copy-paste-thank-you}&quot;   export APPLICATION_ID=&quot;${copy-paste-thank-you}&quot;   export SERVERLESS_BUCKET_NAME=&quot;${copy-paste-thank-you}&quot;   export DELTA_LAKE_SCRIPT_NAME=&quot;delta-lake-demo&quot;   ```2. **Copy partial NYC-taxi data into the EMR Serverless bucket.**   ```sh   aws s3 cp s3://nyc-tlc/trip\ data/ s3://${SERVERLESS_BUCKET_NAME}/nyc-taxi/ --exclude &quot;*&quot; --include &quot;yellow_tripdata_2021-*.parquet&quot; --recursive --profile ${PROFILE_NAME}   ```3. **Create a Python script for processing Delta Lake**   ```sh   touch ${DELTA_LAKE_SCRIPT_NAME}.py   cat &lt;&lt; EOF &gt; ${DELTA_LAKE_SCRIPT_NAME}.py   from pyspark.sql import SparkSession   import uuid   if __name__ == &quot;__main__&quot;:       &quot;&quot;&quot;           Delta Lake with EMR Serverless, take NYC taxi as example.       &quot;&quot;&quot;       spark = SparkSession \\           .builder \\           .config(&quot;spark.sql.extensions&quot;, &quot;io.delta.sql.DeltaSparkSessionExtension&quot;) \\           .config(&quot;spark.sql.catalog.spark_catalog&quot;, &quot;org.apache.spark.sql.delta.catalog.DeltaCatalog&quot;) \\           .enableHiveSupport() \\           .appName(&quot;Delta-Lake-OSS&quot;) \\           .getOrCreate()       url = &quot;s3://${SERVERLESS_BUCKET_NAME}/emr-serverless-spark/delta-lake/output/1.2.1/%s/&quot; % str(           uuid.uuid4())       # creates a Delta table and outputs to target S3 bucket       spark.range(5).write.format(&quot;delta&quot;).save(url)       # reads a Delta table and outputs to target S3 bucket       spark.read.format(&quot;delta&quot;).load(url).show()       # The source for the second Delta table.       base = spark.read.parquet(           &quot;s3://${SERVERLESS_BUCKET_NAME}/nyc-taxi/*.parquet&quot;)       # The sceond Delta table, oh ya.       base.write.format(&quot;delta&quot;) \\           .mode(&quot;overwrite&quot;) \\           .save(&quot;s3://${SERVERLESS_BUCKET_NAME}/emr-serverless-spark/delta-lake/nyx-tlc-2021&quot;)       spark.stop()   EOF   ```4. **Upload the script and required jars into the serverless bucket**   ```sh   # upload script   aws s3 cp delta-lake-demo.py s3://${SERVERLESS_BUCKET_NAME}/scripts/${DELTA_LAKE_SCRIPT_NAME}.py --profile ${PROFILE_NAME}   # download jars and upload them   DELTA_VERSION=&quot;2.2.0&quot;   DELTA_LAKE_CORE=&quot;delta-core_2.13-${DELTA_VERSION}.jar&quot;   DELTA_LAKE_STORAGE=&quot;delta-storage-${DELTA_VERSION}.jar&quot;   curl https://repo1.maven.org/maven2/io/delta/delta-core_2.13/${DELTA_VERSION}/${DELTA_LAKE_CORE} --output ${DELTA_LAKE_CORE}   curl https://repo1.maven.org/maven2/io/delta/delta-storage/${DELTA_VERSION}/${DELTA_LAKE_STORAGE} --output ${DELTA_LAKE_STORAGE}   aws s3 mv ${DELTA_LAKE_CORE} s3://${SERVERLESS_BUCKET_NAME}/jars/${${DELTA_LAKE_CORE}} --profile ${PROFILE_NAME}   aws s3 mv ${DELTA_LAKE_STORAGE} s3://${SERVERLESS_BUCKET_NAME}/jars/${DELTA_LAKE_STORAGE} --profile ${PROFILE_NAME}   ```# Create an EMR Serverless appRememeber, you got so much information to copy and paste from the CloudFormation outputs.![cfn outputs](https://raw.githubusercontent.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/main/images/cfn-outputs.png)```shaws emr-serverless start-job-run \  --application-id ${APPLICATION_ID} \  --execution-role-arn ${JOB_ROLE_ARN} \  --name 'shy-shy-first-time' \  --job-driver '{        &quot;sparkSubmit&quot;: {            &quot;entryPoint&quot;: &quot;s3://'${SERVERLESS_BUCKET_NAME}'/scripts/'${DELTA_LAKE_SCRIPT_NAME}'.py&quot;,            &quot;sparkSubmitParameters&quot;: &quot;--conf spark.executor.cores=1 --conf spark.executor.memory=4g --conf spark.driver.cores=1 --conf spark.driver.memory=4g --conf spark.executor.instances=1 --conf spark.jars=s3://'${SERVERLESS_BUCKET_NAME}'/jars/delta-core_2.12-1.2.0.jar,s3://'${SERVERLESS_BUCKET_NAME}'/jars/delta-storage-1.2.0.jar&quot;        }    }' \  --configuration-overrides '{        &quot;monitoringConfiguration&quot;: {            &quot;s3MonitoringConfiguration&quot;: {                &quot;logUri&quot;: &quot;s3://'${SERVERLESS_BUCKET_NAME}'/serverless-log/&quot;        }    }}' \--profile ${PROFILE_NAME}```If you execute with success, you should see similar reponse as the following:```sh{    &quot;applicationId&quot;: &quot;00f1gvklchoqru25&quot;,    &quot;jobRunId&quot;: &quot;00f1h0ipd2maem01&quot;,    &quot;arn&quot;: &quot;arn:aws:emr-serverless:ap-northeast-1:630778274080:/applications/00f1gvklchoqru25/jobruns/00f1h0ipd2maem01&quot;}```and got a Delta Lake data under `s3://${SERVERLESS_BUCKET_NAME}/emr-serverless-spark/delta-lake/nyx-tlc-2021/`.![Delta Lake data](https://raw.githubusercontent.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/main/images/delta%20lake%20data.png)# Check the executing jobAccess the EMR Studio via the URL from the CloudFormation outputs. It should look very similar to the following url: `https://es-pilibalapilibala.emrstudio-prod.ap-northeast-1.amazonaws.com`, i.e., weird string and region won't be the same as mine.1. **Enter into the application**   ![enter into the app](https://raw.githubusercontent.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/main/images/enter-serverless-app.png)2. **Enter into the executing job**# Check results from an EMR notebook via cluster template1. Create a workspace and an EMR cluster via the cluster template on the AWS Console   ![create workspace](https://raw.githubusercontent.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/main/images/create%20workspace.png)2. Check the results delivered by the EMR serverless application via an EMR notebook.# Fun facts1. You can assign multiple jars as a comma-separated list to the `spark.jars` as [the Spark page](https://spark.apache.org/docs/latest/configuration.html#runtime-environment) says for your EMR Serverless job. The UI will complain, you still can start the job. Don't be afraid, just click it like when you were child, facing authority fearlessly.   ![ui bug](https://raw.githubusercontent.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/main/images/ui-bug.png)2. To fully delet a stack with the construct, you need to make sure there is no more workspace within the EMR Studio. Aside from that, you also need to remove the associated identity from the Service Catalog (this is a necessary resource for the cluster template).3. Version inconsistency on Spark history. Possibly it can be ignored yet still made me wonder why the versions are different.   ![naughty inconsistency](https://raw.githubusercontent.com/HsiehShuJeng/cdk-emrserverless-with-delta-lake/main/images/Spark%20history.png)4. So far, I still haven't figured out how to make the s3a URI work. The s3 URI is fine while the serverless app will complain that it couldn't find proper credentials provider to read the s3a URI.# Future work1. Custom resuorce for EMR Serverless2. Make the construct more flexible for users3. Compare Databricks Runtime and EMR Serverless.</longdescription>
</pkgmetadata>