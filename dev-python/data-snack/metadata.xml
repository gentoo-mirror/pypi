<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Data Snack # AboutData Snack is a minimalistic framework for storing and accessing structured data.It uses an `Entity` objects to define a schema for your data. `Snack` provides an interfacefor automatically serializing and storing entities in a cache database of you choice. General interface that allows you to use different backends: redis, memcached.## Features- `Entity` objects are stored in a compress form to reduce memory usage.- `Snack` is using `Entity` fields to define a unique key to represent an object stored in the db.- `Snack` is supporting batch saving and reading data to achieve high performance.## Core concepts- `Entity` - a class defines a schema of single object stored in db- `key fields` - a list of fields (defined as a list of `str` values)  that will be used to create a key for a given `Entity` object.- `key values` - a list of values for `key fields` from given `Entity`- `key` - a `str` value created for a given Entity    - created in a format: `&lt;Entity type name&gt;-&lt;key value 1&gt;_&lt;key value 2&gt;...&lt;key value N&gt;`## InstallData Snack can be easily installed using pypi repository.```bashpip install data_snack```# UsageThis examples shows a basic usage of defining an entity and using `Snack` to save and load it from the cache.More examples can be found in the [Examples](examples/examples.md) section.## Example 1 - Creating new entities and saving### 1. Define entitiesThe first thing you need to do is to define an `Entity`.Entities are used to define a common structure of the objects stores in your database.We are recommending adding data validation to your entities. The easiest way is using `pydantic` for type validation of all entity fields.```pythonfrom pydantic.dataclasses import dataclassfrom typing import Textfrom data_snack.entities import Entity@dataclassclass Person(Entity):    index: Text    name: Text```### 2. Connect to RedisConnect to you a cache database of your choice.In this example we are using `Redis`, but you could also use `Memcached` if you want.```pythonimport redisredis_connection = redis.Redis(host='127.0.0.1', port=6379, password='')```### 3. Create Snack instanceIn this step we create a `Snack` instance and connect it to our `Redis` database.Notice, that `Redis` client is wrapped in our `RedisConnection` class to ensure shared interface.And at least we can register all entities that will be used in our project.For each entity we specify a list of fields that will be used to define keys when saving our data.```pythonfrom data_snack import Snackfrom data_snack.connections.redis import RedisConnectionsnack = Snack(connection=RedisConnection(redis_connection))  # create instancesnack.register_entity(Person, key_fields=['index'])  # register your entity```### 4. Save and load your entities using SnackYou are ready to save and load data using `Snack`.```pythonsnack.set(Person(&quot;1&quot;, &quot;John&quot;))# 'Person-1'entity = snack.get(Person, [&quot;1&quot;])# Person(index='1', name='John')snack.set_many([Person(&quot;1&quot;, &quot;John&quot;), Person(&quot;2&quot;, &quot;Anna&quot;)])# ['Person-1', 'Person-2']entities = snack.get_many(Person, [[&quot;1&quot;], [&quot;2&quot;]])# [Person(index='1', name='John'), Person(index='2', name='Anna')]```#### 4.1 Set expire time for entitiesYou can also specify number of seconds until the item is expired using `Snack`.```pythonsnack.set(Person(&quot;1&quot;, &quot;John&quot;), expire=100)# 'Person-1'```### 5. Delete your entities using SnackAfter you're done with your data you can delete it using `Snack`.```pythonsnack.delete(Person, [&quot;1&quot;])# Person(index='1', name='John')snack.delete_many(Person, [[&quot;1&quot;], [&quot;2&quot;]])# [Person(index='1', name='John'), Person(index='2', name='Anna')]```# Documentation## Access documentationWIP. Documentation will be hosted on github pages.## Setup documentationSetup documentation directory```bashmkdir docscd docs```Create documentation scaffold. Make sure to select an option with separated directories for `source` and `build`.```bashsphinx-quickstart```Update `extensions` in `docs/source/conf.py`.```pythonextensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']```## Update apidoc documentationBefore you start make sure to import project `src` directory at the very top of `docs/source/conf.py` file.```pythonimport sysimport ossys.path.insert(0, os.path.abspath(os.path.join('..', '..', 'src')))```Since documentation uses additional modules (other than base `data-snack`), we need to install additional requirements:```bashpip install -r docs/requirements.txt```Update the scaffold and generate the html docs.```bashsphinx-apidoc -o ./source ../src/data_snackmake html```# ContactPlugin was created by the Data Science team from [Webinterpret](https://www.webinterpret.com/).</longdescription>
</pkgmetadata>