<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![Travis Status](https://travis-ci.com/josch/img2pdf.svg?branch=main)](https://app.travis-ci.com/josch/img2pdf)[![Appveyor Status](https://ci.appveyor.com/api/projects/status/2kws3wkqvi526llj/branch/main?svg=true)](https://ci.appveyor.com/project/josch/img2pdf/branch/main)img2pdf=======Lossless conversion of raster images to PDF. You should use img2pdf if yourpriorities are (in this order): 1. **always lossless**: the image embedded in the PDF will always have the    exact same color information for every pixel as the input 2. **small**: if possible, the difference in filesize between the input image    and the output PDF will only be the overhead of the PDF container itself 3. **fast**: if possible, the input image is just pasted into the PDF document    as-is without any CPU hungry re-encoding of the pixel dataConventional conversion software (like ImageMagick) would either: 1. not be lossless because lossy re-encoding to JPEG 2. not be small because using wasteful flate encoding of raw pixel data 3. not be fast because input data gets re-encodedAnother advantage of not having to re-encode the input (in most commonsituations) is, that img2pdf is able to handle much larger input than othersoftware, because the raw pixel data never has to be loaded into memory.The following table shows how img2pdf handles different input depending on theinput file format and image color space.| Format                                | Colorspace                     | Result        || ------------------------------------- | ------------------------------ | ------------- || JPEG                                  | any                            | direct        || JPEG2000                              | any                            | direct        || PNG (non-interlaced, no transparency) | any                            | direct        || TIFF (CCITT Group 4)                  | monochrome                     | direct        || any                                   | any except CMYK and monochrome | PNG Paeth     || any                                   | monochrome                     | CCITT Group 4 || any                                   | CMYK                           | flate         |For JPEG, JPEG2000, non-interlaced PNG and TIFF images with CCITT Group 4encoded data, img2pdf directly embeds the image data into the PDF withoutre-encoding it. It thus treats the PDF format merely as a container format forthe image data. In these cases, img2pdf only increases the filesize by the sizeof the PDF container (typically around 500 to 700 bytes). Since data is onlycopied and not re-encoded, img2pdf is also typically faster than othersolutions for these input formats.For all other input types, img2pdf first has to transform the pixel data tomake it compatible with PDF. In most cases, the PNG Paeth filter is applied tothe pixel data. For monochrome input, CCITT Group 4 is used instead. Only forCMYK input no filter is applied before finally applying flate compression.Usage-----The images must be provided as files because img2pdf needs to seek in the filedescriptor.If no output file is specified with the `-o`/`--output` option, output will bedone to stdout. A typical invocation is:$ img2pdf img1.png img2.jpg -o out.pdfThe detailed documentation can be accessed by running:$ img2pdf --helpBugs---- - If you find a JPEG, JPEG2000, PNG or CCITT Group 4 encoded TIFF file that,   when embedded into the PDF cannot be read by the Adobe Acrobat Reader,   please contact me. - An error is produced if the input image is broken. This commonly happens if   the input image has an invalid EXIF Orientation value of zero. Even though   only nine different values from 1 to 9 are permitted, Anroid phones and   Canon DSLR cameras produce JPEG images with the invalid value of zero.   Either fix your input images with `exiftool` or similar software before   passing the JPEG to `img2pdf` or run `img2pdf` with `--rotation=ifvalid`   (if you run img2pdf from the commandline) or by passing   `rotation=img2pdf.Rotation.ifvalid` as an argument to `convert()` when using   img2pdf as a library. - img2pdf uses PIL (or Pillow) to obtain image meta data and to convert the   input if necessary. To prevent decompression bomb denial of service attacks,   Pillow limits the maximum number of pixels an input image is allowed to   have. If you are sure that you know what you are doing, then you can disable   this safeguard by passing the `--pillow-limit-break` option to img2pdf. This   allows one to process even very large input images.Installation------------On a Debian- and Ubuntu-based systems, img2pdf can be installed from theofficial repositories:$ apt install img2pdfIf you want to install it using pip, you can run:$ pip3 install img2pdfIf you prefer to install from source code use:$ cd img2pdf/$ pip3 install .To test the console script without installing the package on your system,use virtualenv:$ cd img2pdf/$ virtualenv ve$ ve/bin/pip3 install .You can then test the converter using:$ ve/bin/img2pdf -o test.pdf src/tests/test.jpgFor Microsoft Windows users, PyInstaller based .exe files are produced byappveyor. If you don't want to install Python before using img2pdf you can headto appveyor and click on &quot;Artifacts&quot; to download the latest version:https://ci.appveyor.com/project/josch/img2pdfGUI---There exists an experimental GUI with all settings currently disabled. You candirectly convert images to PDF but you cannot set any options via the GUI yet.If you are interested in adding more features to the PDF, please submit a mergerequest. The GUI is based on tkinter and works on Linux, Windows and MacOS.![](screenshot.png)Library-------The package can also be used as a library:import img2pdf# opening from filenamewith open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert('test.jpg'))# opening from file handlewith open(&quot;name.pdf&quot;,&quot;wb&quot;) as f1, open(&quot;test.jpg&quot;) as f2:f1.write(img2pdf.convert(f2))# using in-memory image datawith open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert(&quot;\x89PNG...&quot;)# multiple inputs (variant 1)with open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert(&quot;test1.jpg&quot;, &quot;test2.png&quot;))# multiple inputs (variant 2)with open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert([&quot;test1.jpg&quot;, &quot;test2.png&quot;]))# convert all files ending in .jpg inside a directorydirname = &quot;/path/to/images&quot;imgs = []for fname in os.listdir(dirname):if not fname.endswith(&quot;.jpg&quot;):continuepath = os.path.join(dirname, fname)if os.path.isdir(path):continueimgs.append(path)with open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert(imgs))# convert all files ending in .jpg in a directory and its subdirectoriesdirname = &quot;/path/to/images&quot;imgs = []for r, _, f in os.walk(dirname):for fname in f:if not fname.endswith(&quot;.jpg&quot;):continueimgs.append(os.path.join(r, fname))with open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert(imgs))# convert all files matching a globimport globwith open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert(glob.glob(&quot;/path/to/*.jpg&quot;)))# ignore invalid rotation values in the input imageswith open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert('test.jpg'), rotation=img2pdf.Rotation.ifvalid)# writing to file descriptorwith open(&quot;name.pdf&quot;,&quot;wb&quot;) as f1, open(&quot;test.jpg&quot;) as f2:img2pdf.convert(f2, outputstream=f1)# specify paper size (A4)a4inpt = (img2pdf.mm_to_pt(210),img2pdf.mm_to_pt(297))layout_fun = img2pdf.get_layout_fun(a4inpt)with open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert('test.jpg', layout_fun=layout_fun))# use a fixed dpi of 300 instead of reading it from the imagedpix = dpiy = 300layout_fun = img2pdf.get_fixed_dpi_layout_fun((dpix, dpiy))with open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert('test.jpg', layout_fun=layout_fun))# create a PDF/A-1b compliant document by passing an ICC profilewith open(&quot;name.pdf&quot;,&quot;wb&quot;) as f:f.write(img2pdf.convert('test.jpg', pdfa=&quot;/usr/share/color/icc/sRGB.icc&quot;))Comparison to ImageMagick-------------------------Create a large test image:$ convert logo: -resize 8000x original.jpgConvert it into PDF using ImageMagick and img2pdf:$ time img2pdf original.jpg -o img2pdf.pdf$ time convert original.jpg imagemagick.pdfNotice how ImageMagick took an order of magnitude longer to do the conversionthan img2pdf. It also used twice the memory.Now extract the image data from both PDF documents and compare it to theoriginal:$ pdfimages -all img2pdf.pdf tmp$ compare -metric AE original.jpg tmp-000.jpg null:0$ pdfimages -all imagemagick.pdf tmp$ compare -metric AE original.jpg tmp-000.jpg null:118716To get lossless output with ImageMagick we can use Zip compression but thatunnecessarily increases the size of the output:$ convert original.jpg -compress Zip imagemagick.pdf$ pdfimages -all imagemagick.pdf tmp$ compare -metric AE original.jpg tmp-000.png null:0$ stat --format=&quot;%s %n&quot; original.jpg img2pdf.pdf imagemagick.pdf1535837 original.jpg1536683 img2pdf.pdf9397809 imagemagick.pdfComparison to pdfLaTeX----------------------pdfLaTeX performs a lossless conversion from included images to PDF by default.If the input is a JPEG, then it simply embeds the JPEG into the PDF in the sameway as img2pdf does it. But for other image formats it uses flate compressionof the plain pixel data and thus needlessly increases the output file size:$ convert logo: -resize 8000x original.png$ cat &lt;&lt; END &gt; pdflatex.tex\documentclass{article}\usepackage{graphicx}\begin{document}\includegraphics{original.png}\end{document}END$ pdflatex pdflatex.tex$ stat --format=&quot;%s %n&quot; original.png pdflatex.pdf4500182 original.png9318120 pdflatex.pdfComparison to podofoimg2pdf---------------------------Like pdfLaTeX, podofoimg2pdf is able to perform a lossless conversion from JPEGto PDF by plainly embedding the JPEG data into the pdf container. But just likepdfLaTeX it uses flate compression for all other file formats, thus sometimesresulting in larger files than necessary.$ convert logo: -resize 8000x original.png$ podofoimg2pdf out.pdf original.pngstat --format=&quot;%s %n&quot; original.png out.pdf4500181 original.png9335629 out.pdfIt also only supports JPEG, PNG and TIF as input and lacks many of theconvenience features of img2pdf like page sizes, borders, rotation andmetadata.Comparison to Tesseract OCR---------------------------Tesseract OCR comes closest to the functionality img2pdf provides. It is ableto convert JPEG and PNG input to PDF without needlessly increasing the filesizeand is at the same time lossless. So if your input is JPEG and PNG images, thenyou should safely be able to use Tesseract instead of img2pdf. For other input,Tesseract might not do a lossless conversion. For example it converts CMYKinput to RGB and removes the alpha channel from images with transparency. Formultipage TIFF or animated GIF, it will only convert the first frame.</longdescription>
</pkgmetadata>