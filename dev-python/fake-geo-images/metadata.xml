<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># fake-geo-imagesA module to programmatically create geotiff images which can be used for unit tests.&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;./coverage.svg&quot;&gt;&lt;/p&gt;The underlying idea is that in order to write unit tests for geospatial image processsing algorithms, it is necessary to have an actual input image file or array. Organising these test images becomes a chore over time,they should not be stored in git as they are large binary data and when stored outside, there alwaysis the danger that they are not updated according to changes in the code repo.**fake-geo-images** provides a solution to the problem by providing simple code that allows to creategeospatial images (so far geotiffs) in a parameterised way. ## Install package```bashpip install fake-geo-images```## Run tests```bashpytest```## UsageIn the following an example unit test for a hypothetical NDVI function.```pythonimport numpy as npimport rasterio as riofrom pathlib import Pathfrom rasterio.transform import from_originfrom my_image_processing import ndvifrom fake_geo_images.fakegeoimages import FakeGeoImagedef test_ndvi():    &quot;&quot;&quot;    A unit test if an NDVI method works in general    &quot;&quot;&quot;    # Create 4-band image simulating RGBN as needed for NDVI    test_image, _ = FakeGeoImage(        300,        150,        4,        &quot;uint16&quot;,        out_dir=Path(&quot;/tmp&quot;),        crs=4326,        nodata=0,        nodata_fill=3,        cog=False,    ).create(seed=42, transform=from_origin(13.428596, 52.494384, 0.000006, 0.000006))    ndvi_image = ndvi(test_image)    with rio.open(str(ndvi_image)) as src:        ndvi_array = src.read()        # NDVI only has one band of same size as input bands        assert ndvi_array.shape == (1, 300, 150)        # NDVI has float values between -1 and 1        assert ndvi_array.dtype == np.float        assert ndvi_array.min &gt;= -1        assert ndvi_array.max &lt;= 1```</longdescription>
</pkgmetadata>