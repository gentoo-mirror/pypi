<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># GitHub Action Utils[![GitHub release (latest by date)](https://img.shields.io/github/v/release/saadmk11/github-action-utils?style=flat-square)](https://github.com/saadmk11/github-action-utils/releases/latest)![GitHub Workflow Status](https://img.shields.io/github/workflow/status/saadmk11/github-action-utils/Test?label=Test&amp;style=flat-square)![Codecov](https://img.shields.io/codecov/c/github/saadmk11/github-action-utils?style=flat-square&amp;token=ugjHXbEKib)[![GitHub](https://img.shields.io/github/license/saadmk11/github-action-utils?style=flat-square)](https://github.com/saadmk11/github-action-utils/blob/main/LICENSE)[![GitHub stars](https://img.shields.io/github/stars/saadmk11/github-action-utils?color=success&amp;style=flat-square)](https://github.com/saadmk11/github-action-utils/stargazers)![Actions Workflow Run](https://user-images.githubusercontent.com/24854406/180658147-9cfddcfe-ef51-40bc-8e0f-1949482e6a09.png)This package is a collection of python functions that can be used to run [GitHub Action Workflow Commands](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions) from a python script inside an action workflow run.## Requirements**Python:** 3.6, 3.7, 3.8, 3.9, 3.10, 3.11## InstallationInstall `github-action-utils` using pip:```consolepip install github-action-utils```## Example### Example Code```pythonimport github_action_utils as gha_utilswith gha_utils.group(&quot;My Group&quot;):    gha_utils.set_output(&quot;test_var&quot;, &quot;test_value&quot;)    gha_utils.save_state(&quot;state&quot;, &quot;val&quot;)    gha_utils.debug(&quot;Debug message&quot;)    gha_utils.warning(        &quot;Warning message&quot;, title=&quot;Warning Title&quot;, file=&quot;example.py&quot;,        col=1, end_column=2, line=5, end_line=6,    )    gha_utils.warning(&quot;Another warning message&quot;)    gha_utils.error(        &quot;Error message&quot;, title=&quot;Error Title&quot;, file=&quot;example.py&quot;,        col=1, end_column=2, line=1, end_line=2,    )    gha_utils.notice(&quot;Another notice message&quot;)    gha_utils.append_job_summary(&quot;# Hello World&quot;)    gha_utils.append_job_summary(&quot;- Point 1&quot;)    gha_utils.append_job_summary(&quot;- Point 2&quot;)```### Can be used inside a Workflow```yamlname: run-python-scripton:  pull_request:    branches: [ &quot;main&quot; ]jobs:  build:    runs-on: ubuntu-latest    steps:    - uses: actions/checkout@v3    - name: Set up Python 3.10      uses: actions/setup-python@v3      with:        python-version: &quot;3.10&quot;    - name: Install dependencies      run: python -m pip install github-action-utils    - name: Run Python Script      shell: python      run: |        import github_action_utils as gha_utils        with gha_utils.group(&quot;My Group&quot;):            gha_utils.error(                &quot;Error message&quot;, title=&quot;Error Title&quot;, file=&quot;example.py&quot;,                col=1, end_column=2, line=1, end_line=2,            )            gha_utils.notice(&quot;Another notice message&quot;)            gha_utils.append_job_summary(&quot;# Hello World&quot;)```#### Colorful Grouped Build Log Output![s3](https://user-images.githubusercontent.com/24854406/180003937-5839856e-09f9-47e7-8b62-f5126a78cad6.png)#### Log Annotations and Build Summery![s2](https://user-images.githubusercontent.com/24854406/180003153-99434824-d08c-4a54-9a89-4c6163def1b2.png)#### Log Annotations Associated with a File![s](https://user-images.githubusercontent.com/24854406/180003164-12735d03-a452-4bef-96a6-f1dc4298756e.png)## Available FunctionsThis section documents all the functions provided by `github-action-utils`. The functions in the package should be used inside a workflow run.**Note:** You can run the commands using python's `subprocess` module by using `use_subprocess` function parameter or `COMMANDS_USE_SUBPROCESS` environment variable.### **`echo(message, use_subprocess=False)`**Prints specified message to the action workflow console.**example:**```python&gt;&gt; from github_action_utils import echo&gt;&gt; echo(&quot;Hello World&quot;)# Output:# Hello World```### **`debug(message, use_subprocess=False)`**Prints colorful debug message to the action workflow console.GitHub Actions Docs: [debug](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-a-debug-message)**example:**```python&gt;&gt; from github_action_utils import debug&gt;&gt; debug(&quot;Hello World&quot;)# Output:# ::debug ::Hello World```### **`notice(message, title=None, file=None, col=None, end_column=None, line=None, end_line=None, use_subprocess=False)`**Prints colorful notice message to the action workflow console.GitHub Actions Docs: [notice](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-a-notice-message)**example:**```python&gt;&gt; from github_action_utils import notice&gt;&gt; notice(    &quot;test message&quot;,    title=&quot;test title&quot;,    file=&quot;abc.py&quot;,    col=1,    end_column=2,    line=4,    end_line=5,)# Output:# ::notice title=test title,file=abc.py,col=1,endColumn=2,line=4,endLine=5::test message=```### **`warning(message, title=None, file=None, col=None, end_column=None, line=None, end_line=None, use_subprocess=False)`**Prints colorful warning message to the action workflow console.GitHub Actions Docs: [warning](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-a-warning-message)**example:**```python&gt;&gt; from github_action_utils import warning&gt;&gt; warning(    &quot;test message&quot;,    title=&quot;test title&quot;,    file=&quot;abc.py&quot;,    col=1,    end_column=2,    line=4,    end_line=5,)# Output:# ::warning title=test title,file=abc.py,col=1,endColumn=2,line=4,endLine=5::test message```### **`error(message, title=None, file=None, col=None, end_column=None, line=None, end_line=None, use_subprocess=False)`**Prints colorful error message to the action workflow console.GitHub Actions Docs: [error](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-a-error-message)**example:**```python&gt;&gt; from github_action_utils import error&gt;&gt; error(    &quot;test message&quot;,    title=&quot;test title&quot;,    file=&quot;abc.py&quot;,    col=1,    end_column=2,    line=4,    end_line=5,)# Output:# ::error title=test title,file=abc.py,col=1,endColumn=2,line=4,endLine=5::test message```### **`set_output(name, value)`**Sets a step's output parameter by writing to `GITHUB_OUTPUT` environment file. Note that the step will need an `id` to be defined to later retrieve the output value.GitHub Actions Docs: [set_output](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter)**example:**```python&gt;&gt; from github_action_utils import set_output&gt;&gt; set_output(&quot;my_output&quot;, &quot;test value&quot;)```### **`save_state(name, value)`**Creates an environment variable by writing this to the `GITHUB_STATE` environment file which is available to workflow's pre: or post: actions.GitHub Actions Docs: [save_state](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#sending-values-to-the-pre-and-post-actions)**example:**```python&gt;&gt; from github_action_utils import save_state&gt;&gt; save_state(&quot;my_state&quot;, &quot;test value&quot;)```### **`get_state(name)`**Gets state environment variable from running workflow.**example:**```python&gt;&gt; from github_action_utils import get_state&gt;&gt; get_state(&quot;test_name&quot;)# Output:# test_value```### **`get_user_input(name)`**Gets user input from running workflow.**example:**```python&gt;&gt; from github_action_utils import get_user_input&gt;&gt; get_user_input(&quot;my_input&quot;)# Output:# my value```### **`begin_stop_commands(token=None, use_subprocess=False)` and `end_stop_commands(token, use_subprocess=False)`**Stops processing any workflow commands. This special command allows you to log anything without accidentally running a workflow command.GitHub Actions Docs: [stop_commands](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#stopping-and-starting-workflow-commands)**example:**```python&gt;&gt; from github_action_utils import echo, begin_stop_commands, end_stop_commands, stop_commands&gt;&gt; begin_stop_commands(token=&quot;my_token&quot;)&gt;&gt; echo(&quot;Hello World&quot;)&gt;&gt; end_stop_commands(&quot;my_token&quot;)# Output:# ::stop-commands ::my_token# Hello World# ::my_token::# ====================# Using Stop Commands Context Manager# ====================&gt;&gt; with stop_commands(token=&quot;my_token&quot;):...   echo(&quot;Hello World&quot;)# Output:# ::stop-commands ::my_token# Hello World# ::my_token::```### **`start_group(title, use_subprocess=False)` and `end_group(use_subprocess=False)`**Creates an expandable group in the workflow log.GitHub Actions Docs: [group](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines)**example:**```python&gt;&gt; from github_action_utils import echo, start_group, end_group, group&gt;&gt; start_group(&quot;My Group Title&quot;)&gt;&gt; echo(&quot;Hello World&quot;)&gt;&gt; end_group()# Output:# ::group ::My Group Title# Hello World# ::endgroup::# ====================# Using Group Context Manager# ====================&gt;&gt; with group(&quot;My Group Title&quot;):...   echo(&quot;Hello World&quot;)# Output:# ::group ::My Group Title# Hello World# ::endgroup::```### **`add_mask(value, use_subprocess=False)`**Masking a value prevents a string or variable from being printed in the workflow console.GitHub Actions Docs: [add_mask](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#masking-a-value-in-log)**example:**```python&gt;&gt; from github_action_utils import add_mask&gt;&gt; add_mask(&quot;test value&quot;)# Output:# ::add-mask ::test value```### **`set_env(name, value)`**Creates an environment variable by writing this to the `GITHUB_ENV` environment file which is available to any subsequent steps in a workflow job.GitHub Actions Docs: [set_env](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable)**example:**```python&gt;&gt; from github_action_utils import set_env&gt;&gt; set_env(&quot;my_env&quot;, &quot;test value&quot;)```### **`get_workflow_environment_variables()`**Gets all environment variables from the `GITHUB_ENV` environment file which is available to the workflow.GitHub Actions Docs: [set_env](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable)**example:**```python&gt;&gt; from github_action_utils import get_workflow_environment_variables&gt;&gt; get_workflow_environment_variables()# Output:# {&quot;my_env&quot;: &quot;test value&quot;}```### **`get_env(name)`**Gets all environment variables from `os.environ` or the `GITHUB_ENV` environment file which is available to the workflow.This can also be used to get [environment variables set by GitHub Actions](https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables).GitHub Actions Docs: [set_env](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable)**example:**```python&gt;&gt; from github_action_utils import get_env&gt;&gt; get_env(&quot;my_env&quot;)&gt;&gt; get_env(&quot;GITHUB_API_URL&quot;)# Output:# test value# https://api.github.com```### **`append_job_summary(markdown_text)`**Sets some custom Markdown for each job so that it will be displayed on the summary page of a workflow run.GitHub Actions Docs: [append_job_summary](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary)**example:**```python&gt;&gt; from github_action_utils import append_job_summary&gt;&gt; append_job_summary(&quot;# test summary&quot;)```### **`overwrite_job_summary(markdown_text)`**Clears all content for the current step, and adds new job summary.GitHub Actions Docs: [overwrite_job_summary](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#overwriting-job-summaries)**example:**```python&gt;&gt; from github_action_utils import overwrite_job_summary&gt;&gt; overwrite_job_summary(&quot;# test summary&quot;)```### **`remove_job_summary()`**completely removes job summary for the current step.GitHub Actions Docs: [remove_job_summary](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#removing-job-summaries)**example:**```python&gt;&gt; from github_action_utils import remove_job_summary&gt;&gt; remove_job_summary()```### **`add_system_path(path)`**Prepends a directory to the system PATH variable (`GITHUB_PATH`) and automatically makes it available to all subsequent actions in the current job.GitHub Actions Docs: [add_system_path](https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path)**example:**```python&gt;&gt; from github_action_utils import add_system_path&gt;&gt; add_system_path(&quot;var/path/to/file&quot;)```### **`event_payload()`**Get GitHub Event payload that triggered the workflow.More details: [GitHub Actions Event Payload](https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads)**example:**```python&gt;&gt; from github_action_utils import event_payload&gt;&gt; event_payload()# Output:# {&quot;action&quot;: &quot;opened&quot;, &quot;number&quot;: 1, &quot;pull_request&quot;: {&quot;url&quot;: &quot;https://api.github.com/repos/octocat/Hello-World/pulls/1&quot;}, &quot;repository&quot;: {&quot;url&quot;: &quot;https://api.github.com/repos/octocat/Hello-World&quot;}, &quot;sender&quot;: {&quot;login&quot;: &quot;octocat&quot;}...}```# LicenseThe code in this project is released under the [MIT License](LICENSE).</longdescription>
</pkgmetadata>