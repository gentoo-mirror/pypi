<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># drakaina![Drakaina](content/drakaina.png &quot;Drakaina&quot;){width=200px height=205px}[![image](https://img.shields.io/pypi/v/drakaina.svg)](https://pypi.python.org/pypi/drakaina)[![image](https://img.shields.io/pypi/l/drakaina.svg)](https://pypi.python.org/pypi/drakaina)[![image](https://img.shields.io/pypi/pyversions/drakaina.svg)](https://pypi.python.org/pypi/drakaina)[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v1.json)](https://github.com/charliermarsh/ruff)[![Code style: black](https://img.shields.io/badge/code%20style-black-black.svg)](https://github.com/psf/black)[![libera manifesto](https://img.shields.io/badge/libera-manifesto-lightgrey.svg)](https://liberamanifesto.com)‚ùó WIPModule for simple RPC service implementation## QuickstartDrakaina may be installed via `pip` and requires Python 3.7 or higher :```shellpip install drakaina```A minimal Drakaina example is:```pythonfrom drakaina import remote_procedurefrom drakaina.wsgi import WSGIHandler@remote_proceduredef my_method():    return &quot;Hello Bro! ‚úãÔ∏è&quot;@remote_procedure(name=&quot;something.get&quot;)def get_some_string():    return &quot;You called `something.get`.&quot;@remote_procedure(provide_request=True)def do_something_with_environ(request):    return f&quot;You called `do_something_with_environ`. Request: {request}.&quot;@remote_procedure()def tell_the_middleware_something():    return &quot;You called `tell_the_middleware_something`. It has a some extra conditions.&quot;async def asynchronous_procedure():    await asyncio.sleep(5)    return &quot;Ding-Dong üîî!&quot;&quot;&quot;&quot;&gt;&gt;&gt; JsonRPCv2().handle({&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;my_method&quot;, &quot;id&quot;: 1})or define WSGI application&quot;&quot;&quot;app = WSGIHandler(route=&quot;/jrpc&quot;)```Drakaina may be ran with any WSGI-compliant server,such as [Gunicorn](http://gunicorn.org).```shellgunicorn main:app```## Features- Serializers layer.  - `json`, `orjson`, `ujson` and `msgpack` serializers.- `login_required` and `check_permissions` decorators.- WSGI protocol implementation  - CORS middleware  - JWT Authorization middleware.  - Compatible with simple middlewares for others wsgi-frameworks,    like as [Werkzeug](https://palletsprojects.com/p/werkzeug/),    [Flask](https://palletsprojects.com/p/flask/)# Documentation## Installation```shellpip install drakaina```## Middlewares### CORS### JWTDrakaina may be installed via `pip` and requires Python 3.7 or higher :```shellpip install drakaina[jwt]```A minimal Drakaina example is:```pythonfrom functools import partialfrom drakaina import ENV_IS_AUTHENTICATEDfrom drakaina import ENV_USER_IDfrom drakaina import remote_procedurefrom drakaina import check_permissionsfrom drakaina import login_requiredfrom drakaina import match_anyfrom drakaina.contrib.jwt.middleware import JWTAuthenticationMiddlewarefrom drakaina.wsgi import WSGIHandlerimport user_store@login_required@remote_procedure(provide_request=True)def my_method(request):    assert request[ENV_IS_AUTHENTICATED]    return f&quot;Hello Bro ‚úã! Your ID={request[ENV_USER_ID]}&quot;@check_permissions([&quot;user_read&quot;, &quot;user:admin&quot;, &quot;username:johndoe&quot;], match_any)@remote_proceduredef my_method():    return &quot;Hello Bro! ‚úãÔ∏è&quot;def get_user(request, payload):    user_id = request[ENV_USER_ID] or payload[&quot;user_id&quot;]    return user_store.get(id=user_id)def get_jwt_scopes(request, payload):    # here `scp` is the key for the scopes value in the token payload    return payload.get(&quot;scp&quot;)app = WSGIHandler(    middlewares=[        partial(            JWTAuthenticationMiddleware,            secret_phrase=&quot;_secret_&quot;,            credentials_required=True,            auth_scheme=&quot;Bearer&quot;,            # token_getter=custom_implementation_get_token,            user_getter=get_user,            scopes_getter=get_jwt_scopes,            # revoke_checker=is_revoked,        )    ])```### Using with DjangoCreate file `rpc_views.py` in your django application.Define function and wrap it `remote_procedure` decorator:```pythonfrom drakaina import remote_procedure@remote_proceduredef my_method():    return &quot;Hello, Django Bro! ‚úã&quot;```Add `RPCView` class to urlpatterns. The `as_view` methodmust accept the `autodiscover` argument as the name ofthe remote procedure files.```pythonfrom django.urls import pathfrom drakaina.contrib.django.views import RPCViewurlpatterns = [    ...,    path(&quot;api/&quot;, RPCView.as_view(autodiscover=&quot;rpc_views&quot;)),]```### JWT Authentication in your Django projectWrap an instance of `RPCView` with the `JWTAuthenticationMiddleware`.```pythonfrom django.urls import pathfrom drakaina.contrib.django import RPCView, JWTAuthenticationMiddlewareurlpatterns = [    ...,    path(&quot;api/&quot;, JWTAuthenticationMiddleware(        RPCView.as_view(autodiscover=&quot;rpc_views&quot;)    )),]```Define the parameters in the `settings.py` file.```python...DRAKAINA_JWT_SECRET_KEY = &quot;__SECRET_KEY__&quot;...```## LicenseApache License 2.0## Artwork&quot;[drakaina.png](content/drakaina.png)&quot; by Korolko Anastasia is licensed under&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;&lt;img alt=&quot;License Creative Commons&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-sa/4.0/80x15.png&quot; /&gt;&lt;/a&gt; ([CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)).</longdescription>
</pkgmetadata>