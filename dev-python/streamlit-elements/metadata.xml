<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>âœ¨ Streamlit Elements &amp;nbsp; [![GitHub][github_badge]][github_link] [![PyPI][pypi_badge]][pypi_link]=====================Create a draggable and resizable dashboard in Streamlit, featuring Material UI widgets, Monaco editor (Visual Studio Code), Nivo charts, and more!Demo----[![Open in Streamlit][share_badge]][share_link][![Preview][share_video]][share_link][share_badge]: https://static.streamlit.io/badges/streamlit_badge_black_white.svg[share_link]: https://share.streamlit.io/okld/streamlit-gallery/main?p=elements[share_video]: https://github.com/okld/streamlit-elements/raw/main/demo.gif[github_badge]: https://badgen.net/badge/icon/GitHub?icon=github&amp;color=black&amp;label[github_link]: https://github.com/okld/streamlit-elements[pypi_badge]: https://badgen.net/pypi/v/streamlit-elements?icon=pypi&amp;color=black&amp;label[pypi_link]: https://pypi.org/project/streamlit-elementsGetting started---------------### 1. IntroductionStreamlit Elements is a component that gives you the tools to compose beautiful applications with Material UI widgets, Monaco, Nivo charts, and more.It also includes a feature to create draggable and resizable dashboards.#### Installation```shpip install streamlit-elements==0.1```**Caution**: It is recommended to pin the version to 0.1. Future versions might introduce breaking API changes.#### Available elements and objectsHere is a list of elements and objects you can import in your app:Element   | Description:--------:|:-----------elements  | Create a frame where elements will be displayed.dashboard | Build a draggable and resizable dashboard.mui       | Material UI (MUI) widgets and icons.html      | HTML objects.editor    | Monaco code and diff editor that powers Visual Studio Code.nivo      | Nivo chart library.media     | Media player.sync      | Callback to synchronize Streamlit's session state with elements events data.lazy      | Defer a callback call until another non-lazy callback is called.#### Caution- A few Material UI widgets may not work as expected (ie. modal dialogs and snackbars).- Using many element frames can significantly impact your app's performance. Try to gather elements in few frames at most.---### 2. Display elements#### 2.1. Create an element with a child```python# First, import the elements you needfrom streamlit_elements import elements, mui, html# Create a frame where Elements widgets will be displayed.## Elements widgets will not render outside of this frame.# Native Streamlit widgets will not render inside this frame.## elements() takes a key as parameter.# This key can't be reused by another frame or Streamlit widget.with elements(&quot;new_element&quot;):    # Let's create a Typography element with &quot;Hello world&quot; as children.    # The first step is to check Typography's documentation on MUI:    # https://mui.com/components/typography/    #    # Here is how you would write it in React JSX:    #    # &lt;Typography&gt;    #   Hello world    # &lt;/Typography&gt;    mui.Typography(&quot;Hello world&quot;)```- MUI Typography: https://mui.com/components/typography/---#### 2.2. Create an element with multiple children```pythonwith elements(&quot;multiple_children&quot;):    # You have access to Material UI icons using: mui.icon.IconNameHere    #    # Multiple children can be added in a single element.    #    # &lt;Button&gt;    #   &lt;EmojiPeople /&gt;    #   &lt;DoubleArrow /&gt;    #   Hello world    # &lt;/Button&gt;    mui.Button(        mui.icon.EmojiPeople,        mui.icon.DoubleArrow,        &quot;Button with multiple children&quot;    )    # You can also add children to an element using a 'with' statement.    #    # &lt;Button&gt;    #   &lt;EmojiPeople /&gt;    #   &lt;DoubleArrow /&gt;    #   &lt;Typography&gt;    #     Hello world    #   &lt;/Typography&gt;    # &lt;/Button&gt;    with mui.Button:        mui.icon.EmojiPeople()        mui.icon.DoubleArrow()        mui.Typography(&quot;Button with multiple children&quot;)```- MUI button: https://mui.com/components/buttons/- MUI icons: https://mui.com/components/material-icons/---#### 2.3. Create an element with nested children```pythonwith elements(&quot;nested_children&quot;):    # You can nest children using multiple 'with' statements.    #    # &lt;Paper&gt;    #   &lt;Typography&gt;    #     &lt;p&gt;Hello world&lt;/p&gt;    #     &lt;p&gt;Goodbye world&lt;/p&gt;    #   &lt;/Typography&gt;    # &lt;/Paper&gt;    with mui.Paper:        with mui.Typography:            html.p(&quot;Hello world&quot;)            html.p(&quot;Goodbye world&quot;)```- MUI paper: https://mui.com/components/paper/---#### 2.4. Add properties to an element```pythonwith elements(&quot;properties&quot;):    # You can add properties to elements with named parameters.    #    # To find all available parameters for a given element, you can    # refer to its related documentation on mui.com for MUI widgets,    # on https://microsoft.github.io/monaco-editor/ for Monaco editor,    # and so on.    #    # &lt;Paper elevation={3} variant=&quot;outlined&quot; square&gt;    #   &lt;TextField label=&quot;My text input&quot; defaultValue=&quot;Type here&quot; variant=&quot;outlined&quot; /&gt;    # &lt;/Paper&gt;    with mui.Paper(elevation=3, variant=&quot;outlined&quot;, square=True):        mui.TextField(            label=&quot;My text input&quot;,            defaultValue=&quot;Type here&quot;,            variant=&quot;outlined&quot;,        )    # If you must pass a parameter which is also a Python keyword, you can append an    # underscore to avoid a syntax error.    #    # &lt;Collapse in /&gt;    mui.Collapse(in_=True)    # mui.collapse(in=True)    # &gt; Syntax error: 'in' is a Python keyword:```- MUI text field: https://mui.com/components/text-fields/---#### 2.5. Apply custom CSS styles##### 2.5.1. Material UI elements```pythonwith elements(&quot;style_mui_sx&quot;):    # For Material UI elements, use the 'sx' property.    #    # &lt;Box    #   sx={{    #     bgcolor: 'background.paper',    #     boxShadow: 1,    #     borderRadius: 2,    #     p: 2,    #     minWidth: 300,    #   }}    # &gt;    #   Some text in a styled box    # &lt;/Box&gt;    mui.Box(        &quot;Some text in a styled box&quot;,        sx={            &quot;bgcolor&quot;: &quot;background.paper&quot;,            &quot;boxShadow&quot;: 1,            &quot;borderRadius&quot;: 2,            &quot;p&quot;: 2,            &quot;minWidth&quot;: 300,        }    )```- MUI's **sx** property: https://mui.com/system/the-sx-prop/##### 2.5.2. Other elements```pythonwith elements(&quot;style_elements_css&quot;):    # For any other element, use the 'css' property.    #    # &lt;div    #   css={{    #     backgroundColor: 'hotpink',    #     '&amp;:hover': {    #         color: 'lightgreen'    #     }    #   }}    # &gt;    #   This has a hotpink background    # &lt;/div&gt;    html.div(        &quot;This has a hotpink background&quot;,        css={            &quot;backgroundColor&quot;: &quot;hotpink&quot;,            &quot;&amp;:hover&quot;: {                &quot;color&quot;: &quot;lightgreen&quot;            }        }    )```- Emotion's **css** property: https://emotion.sh/docs/css-prop#object-styles---### 3. Callbacks#### 3.1. Retrieve an element's data```pythonimport streamlit as stwith elements(&quot;callbacks_retrieve_data&quot;):    # Some element allows executing a callback on specific event.    #    # const [name, setName] = React.useState(&quot;&quot;)    # const handleChange = (event) =&gt; {    #   // You can see here that a text field value    #   // is stored in event.target.value    #   setName(event.target.value)    # }    #    # &lt;TextField    #   label=&quot;Input some text here&quot;    #   onChange={handleChange}    # /&gt;    # Initialize a new item in session state called &quot;my_text&quot;    if &quot;my_text&quot; not in st.session_state:        st.session_state.my_text = &quot;&quot;    # When text field changes, this function will be called.    # To know which parameters are passed to the callback,    # you can refer to the element's documentation.    def handle_change(event):        st.session_state.my_text = event.target.value    # Here we display what we have typed in our text field    mui.Typography(st.session_state.my_text)    # And here we give our 'handle_change' callback to the 'on_change'    # property of the text field.    mui.TextField(label=&quot;Input some text here&quot;, onChange=handle_change)```- MUI text field event: https://mui.com/components/text-fields/#uncontrolled-vs-controlled- MUI text field API: https://mui.com/api/text-field/---#### 3.2. Synchronize a session state item with an element event using sync()```pythonwith elements(&quot;callbacks_sync&quot;):    # If you just want to store callback parameters into Streamlit's session state    # like above, you can also use the special function sync().    #    # When an on_change event occurs, the callback is called with an event data object    # as argument. In the example below, we are synchronizing that event data object with    # the session state item 'my_event'.    #    # If an event passes more than one parameter, you can synchronize as many session state item    # as needed like so:    # &gt;&gt;&gt; sync(&quot;my_first_param&quot;, &quot;my_second_param&quot;)    #    # If you want to ignore the first parameter of an event but keep synchronizing the second,    # pass None to sync:    # &gt;&gt;&gt; sync(None, &quot;second_parameter_to_keep&quot;)    from streamlit_elements import sync    if &quot;my_event&quot; not in st.session_state:        st.session_state.my_event = None    if st.session_state.my_event is not None:        text = st.session_state.my_event.target.value    else:        text = &quot;&quot;    mui.Typography(text)    mui.TextField(label=&quot;Input some text here&quot;, onChange=sync(&quot;my_event&quot;))```---#### 3.3. Avoid too many reloads with lazy()```pythonwith elements(&quot;callbacks_lazy&quot;):    # With the two first examples, each time you input a letter into the text field,    # the callback is invoked but the whole app is reloaded as well.    #    # To avoid reloading the whole app on every input, you can wrap your callback with    # lazy(). This will defer the callback invocation until another non-lazy callback    # is invoked. This can be useful to implement forms.    from streamlit_elements import lazy    if &quot;first_name&quot; not in st.session_state:        st.session_state.first_name = None        st.session_state.last_name = None    if st.session_state.first_name is not None:        first_name = st.session_state.first_name.target.value    else:        first_name = &quot;John&quot;    if st.session_state.last_name is not None:        last_name = st.session_state.last_name.target.value    else:        last_name = &quot;Doe&quot;    def set_last_name(event):        st.session_state.last_name = event    # Display first name and last name    mui.Typography(&quot;Your first name: &quot;, first_name)    mui.Typography(&quot;Your last name: &quot;, last_name)    # Lazily synchronize on_change with first_name and last_name state.    # Inputting some text won't synchronize the value yet.    mui.TextField(label=&quot;First name&quot;, onChange=lazy(sync(&quot;first_name&quot;)))    # You can also pass regular python functions to lazy().    mui.TextField(label=&quot;Last name&quot;, onChange=lazy(set_last_name))    # Here we give a non-lazy callback to on_click using sync().    # We are not interested in getting on_click event data object,    # so we call sync() with no argument.    #    # You can use either sync() or a regular python function.    # As long as the callback is not wrapped with lazy(), its invocation will    # also trigger every other defered callbacks.    mui.Button(&quot;Update first namd and last name&quot;, onClick=sync())```---#### 3.4. Invoke a callback when a sequence is pressed using event.on_hotkey()```pythonwith elements(&quot;callbacks_hotkey&quot;):    # Invoke a callback when a specific hotkey sequence is pressed.    #    # For more information regarding sequences syntax and supported keys,    # go to Mousetrap's project page linked below.    #    # /!\ Hotkeys work if you don't have focus on Streamlit Elements's frame /!\    # /!\ As with other callbacks, this reruns the whole app /!\    from streamlit_elements import event    def hotkey_pressed():        print(&quot;Hotkey pressed&quot;)    event.Hotkey(&quot;g&quot;, hotkey_pressed)    # If you want your hotkey to work even in text fields, set bind_inputs to True.    event.Hotkey(&quot;h&quot;, hotkey_pressed, bindInputs=True)    mui.TextField(label=&quot;Try pressing 'h' while typing some text here.&quot;)    # If you want to override default hotkeys (ie. ctrl+f to search in page),    # set override_default to True.    event.Hotkey(&quot;ctrl+f&quot;, hotkey_pressed, overrideDefault=True)```- Mousetrap: https://craig.is/killing/mice- Github page: https://github.com/ccampbell/mousetrap---#### 3.5. Invoke a callback periodically using event.on_interval()```pythonwith elements(&quot;callbacks_interval&quot;):    # Invoke a callback every n seconds.    #    # /!\ As with other callbacks, this reruns the whole app /!\    def call_every_second():        print(&quot;Hello world&quot;)    event.Interval(1, call_every_second)```---### 4. Draggable and resizable dashboard```pythonwith elements(&quot;dashboard&quot;):    # You can create a draggable and resizable dashboard using    # any element available in Streamlit Elements.    from streamlit_elements import dashboard    # First, build a default layout for every element you want to include in your dashboard    layout = [        # Parameters: element_identifier, x_pos, y_pos, width, height, [item properties...]        dashboard.Item(&quot;first_item&quot;, 0, 0, 2, 2),        dashboard.Item(&quot;second_item&quot;, 2, 0, 2, 2, isDraggable=False, moved=False),        dashboard.Item(&quot;third_item&quot;, 0, 2, 1, 1, isResizable=False),    ]    # Next, create a dashboard layout using the 'with' syntax. It takes the layout    # as first parameter, plus additional properties you can find in the GitHub links below.    with dashboard.Grid(layout):        mui.Paper(&quot;First item&quot;, key=&quot;first_item&quot;)        mui.Paper(&quot;Second item (cannot drag)&quot;, key=&quot;second_item&quot;)        mui.Paper(&quot;Third item (cannot resize)&quot;, key=&quot;third_item&quot;)    # If you want to retrieve updated layout values as the user move or resize dashboard items,    # you can pass a callback to the onLayoutChange event parameter.    def handle_layout_change(updated_layout):        # You can save the layout in a file, or do anything you want with it.        # You can pass it back to dashboard.Grid() if you want to restore a saved layout.        print(updated_layout)    with dashboard.Grid(layout, onLayoutChange=handle_layout_change):        mui.Paper(&quot;First item&quot;, key=&quot;first_item&quot;)        mui.Paper(&quot;Second item (cannot drag)&quot;, key=&quot;second_item&quot;)        mui.Paper(&quot;Third item (cannot resize)&quot;, key=&quot;third_item&quot;)```- Dashboard item properties: https://github.com/react-grid-layout/react-grid-layout#grid-item-props- Dashboard grid properties (Streamlit Elements uses the Responsive grid layout):  - https://github.com/react-grid-layout/react-grid-layout#grid-layout-props  - https://github.com/react-grid-layout/react-grid-layout#responsive-grid-layout-props---### 5. Other third-party elements#### 5.1. Monaco code and diff editor```pythonwith elements(&quot;monaco_editors&quot;):    # Streamlit Elements embeds Monaco code and diff editor that powers Visual Studio Code.    # You can configure editor's behavior and features with the 'options' parameter.    #    # Streamlit Elements uses an unofficial React implementation (GitHub links below for    # documentation).    from streamlit_elements import editor    if &quot;content&quot; not in st.session_state:        st.session_state.content = &quot;Default value&quot;    mui.Typography(&quot;Content: &quot;, st.session_state.content)    def update_content(value):        st.session_state.content = value    editor.Monaco(        height=300,        defaultValue=st.session_state.content,        onChange=lazy(update_content)    )    mui.Button(&quot;Update content&quot;, onClick=sync())    editor.MonacoDiff(        original=&quot;Happy Streamlit-ing!&quot;,        modified=&quot;Happy Streamlit-in' with Elements!&quot;,        height=300,    )```- Monaco examples and properties: https://github.com/suren-atoyan/monaco-react- Code editor options: https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IStandaloneEditorConstructionOptions.html- Diff editor options:  https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IStandaloneDiffEditorConstructionOptions.html- Monaco project page:  https://microsoft.github.io/monaco-editor/---#### 5.2. Nivo charts```pythonwith elements(&quot;nivo_charts&quot;):    # Streamlit Elements includes 45 dataviz components powered by Nivo.    from streamlit_elements import nivo    DATA = [        { &quot;taste&quot;: &quot;fruity&quot;, &quot;chardonay&quot;: 93, &quot;carmenere&quot;: 61, &quot;syrah&quot;: 114 },        { &quot;taste&quot;: &quot;bitter&quot;, &quot;chardonay&quot;: 91, &quot;carmenere&quot;: 37, &quot;syrah&quot;: 72 },        { &quot;taste&quot;: &quot;heavy&quot;, &quot;chardonay&quot;: 56, &quot;carmenere&quot;: 95, &quot;syrah&quot;: 99 },        { &quot;taste&quot;: &quot;strong&quot;, &quot;chardonay&quot;: 64, &quot;carmenere&quot;: 90, &quot;syrah&quot;: 30 },        { &quot;taste&quot;: &quot;sunny&quot;, &quot;chardonay&quot;: 119, &quot;carmenere&quot;: 94, &quot;syrah&quot;: 103 },    ]    with mui.Box(sx={&quot;height&quot;: 500}):        nivo.Radar(            data=DATA,            keys=[ &quot;chardonay&quot;, &quot;carmenere&quot;, &quot;syrah&quot; ],            indexBy=&quot;taste&quot;,            valueFormat=&quot;&gt;-.2f&quot;,            margin={ &quot;top&quot;: 70, &quot;right&quot;: 80, &quot;bottom&quot;: 40, &quot;left&quot;: 80 },            borderColor={ &quot;from&quot;: &quot;color&quot; },            gridLabelOffset=36,            dotSize=10,            dotColor={ &quot;theme&quot;: &quot;background&quot; },            dotBorderWidth=2,            motionConfig=&quot;wobbly&quot;,            legends=[                {                    &quot;anchor&quot;: &quot;top-left&quot;,                    &quot;direction&quot;: &quot;column&quot;,                    &quot;translateX&quot;: -50,                    &quot;translateY&quot;: -40,                    &quot;itemWidth&quot;: 80,                    &quot;itemHeight&quot;: 20,                    &quot;itemTextColor&quot;: &quot;#999&quot;,                    &quot;symbolSize&quot;: 12,                    &quot;symbolShape&quot;: &quot;circle&quot;,                    &quot;effects&quot;: [                        {                            &quot;on&quot;: &quot;hover&quot;,                            &quot;style&quot;: {                                &quot;itemTextColor&quot;: &quot;#000&quot;                            }                        }                    ]                }            ],            theme={                &quot;background&quot;: &quot;#FFFFFF&quot;,                &quot;textColor&quot;: &quot;#31333F&quot;,                &quot;tooltip&quot;: {                    &quot;container&quot;: {                        &quot;background&quot;: &quot;#FFFFFF&quot;,                        &quot;color&quot;: &quot;#31333F&quot;,                    }                }            }        )```- Nivo charts: https://nivo.rocks/- Github page: https://github.com/plouc/nivo---#### 5.3. Media player```pythonwith elements(&quot;media_player&quot;):    # Play video from many third-party sources: YouTube, Facebook, Twitch,    # SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, DailyMotion and Kaltura.    #    # This element is powered by ReactPlayer (GitHub link below).    from streamlit_elements import media    media.Player(url=&quot;https://www.youtube.com/watch?v=iik25wqIuFo&quot;, controls=True)```- ReactPlayer properties: https://github.com/cookpete/react-player#props</longdescription>
</pkgmetadata>