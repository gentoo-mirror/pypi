<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># gitbetterCustom git shell. Type less, commit more.## InstallationInstall with:&lt;pre&gt;pip install gitbetter&lt;/pre&gt;## UsageLaunch from a terminal by entering `gitbetter`.&lt;br&gt;Type `help` or `?` for a list of commands.&lt;br&gt;Type `help {command}` for detailed help with a specific command.&lt;br&gt;By default, If you enter a command that isn't built into `gitbetter`, it will be executed directly with `os.system()`,allowing you to perform any command not defined by `gitbetter` that your shell supports without having to exit.&lt;br&gt;To toggle this behavior, run the `toggle_unrecognized_command_behavior` (`gitbetter` uses `tab` for autocomplete, so you can type `&quot;tog&quot;`+`tab` instead of typing out the whole command name).&lt;br&gt;When toggled to off, an unrecognized syntax message will be printed if you type in a command `gitbetter` doesn't recognize.&lt;br&gt;The current state of this setting is printed at the bottom when running the `help` command.&lt;br&gt;You can still execute a command in the shell regardless of this setting with the `sys` command.&lt;pre&gt;C:\gitbetter&gt;gitbetterStarting gitbetter...Enter 'help' or '?' for command help.gitbetter::C:\gitbetter&gt;helpBuilt in Git commands (type '{command} -h' or '{command} --help'):==================================================================add            filter_branch  rebase                                versionam             format_patch   reflog                                whatchangedannotate       fsck           remote                                worktreearchive        gc             repackbisect         git            replaceblame          gitk           request_pullbranch         gitweb         rererebugreport      grep           resetbundle         gui            restorecd             help           revertcheckout       init           rmcherry_pick    instaweb       scalarcitool         log            shortlogclean          maintenance    showclone          merge          show_branchcommit         merge_tree     sparse_checkoutconfig         mergetool      stashcount_objects  mv             statusdescribe       notes          submodulediagnose       pack_refs      switchdiff           prune          sysdifftool       pull           tagfast_export    push           toggle_unrecognized_command_behaviorfast_import    quit           verify_commitfetch          range_diff     verify_tagConvenience commands (type 'help {command}'):=============================================add_url   commitall      delete_gh_repo  loggy         new_branch     push_newamend     commitf        ignore          make_private  new_gh_remote  undobranches  delete_branch  initcommit      make_public   new_repoUnrecognized command behavior: Execute in shell with os.system()^Essentially makes this shell function as a super-shell of whatever shell you launched gitbetter from.^gitbetter::C:\gitbetter&gt;help commitfStage and commit a list of files.Parser help for commitf:usage: gitbetter [-h] -m MESSAGE [files ...]positional arguments:  files                 List of files to stage and commit.options:  -h, --help            show this help message and exit  -m MESSAGE, --message MESSAGE                        The commit message to use.gitbetter::C:\gitbetter&gt;help loggy&gt;&gt;&gt; git --oneline --name-only --abbrev-commit --graphgitbetter::C:\gitbetter&gt;loggy*   3e780ec (HEAD -&gt; main, tag: v1.0.0) Merge branch 'my-feature'|\| * b4478a3 feat: new print statement| | test.py* | eb89c2e docs: update readme|/|   README.md* fc6b7ac (origin/main) docs: update readme| README.md* 2a75c0c docs: added a comment| test.py* d22129a feat: new print statement| gitbetter_test.py* 1a002d7 chore: add items to ignore| .gitignore* 92cb7e7 Initial commit  .gitignore  LICENSE.txt  README.md  gitbetter_test.py  test.py  test.txt&lt;/pre&gt;Bindings can be accessed programmatically through the `Git` class.&lt;br&gt;&lt;pre&gt;&gt;&gt;&gt; from gitbetter import Git&gt;&gt;&gt; git = Git()&gt;&gt;&gt; git.loggy()*   3e780ec (HEAD -&gt; main, tag: v1.0.0) Merge branch 'my-feature'|\| * b4478a3 feat: new print statement| | test.py* | eb89c2e docs: update readme|/|   README.md* fc6b7ac (origin/main) docs: update readme| README.md* 2a75c0c docs: added a comment| test.py* d22129a feat: new print statement| gitbetter_test.py* 1a002d7 chore: add items to ignore| .gitignore* 92cb7e7 Initial commit  .gitignore  LICENSE.txt  README.md  gitbetter_test.py  test.py  test.txt&gt;&gt;&gt; git.list_branches()* main                3e780ec [origin/main: ahead 3] Merge branch 'my-feature'  remotes/origin/main fc6b7ac docs: update readme&lt;/pre&gt;The `stdout` of `Git` functions can be returned as a string rather than being printed to the terminalby passing `True` to the `Git` constructor or setting the member variable `capture_stdout` to `True`.&lt;pre&gt;&gt;&gt;&gt; from gitbetter import Git&gt;&gt;&gt; git = Git(True)# or&gt;&gt;&gt; git.capture_stdout = True&gt;&gt;&gt; log = git.loggy()&gt;&gt;&gt; print(log)*   3e780ec (HEAD -&gt; main, tag: v1.0.0) Merge branch 'my-feature'|\| * b4478a3 feat: new print statement| | test.py* | eb89c2e docs: update readme|/|   README.md* fc6b7ac (origin/main) docs: update readme| README.md* 2a75c0c docs: added a comment| test.py* d22129a feat: new print statement| gitbetter_test.py* 1a002d7 chore: add items to ignore| .gitignore* 92cb7e7 Initial commit  .gitignore  LICENSE.txt  README.md  gitbetter_test.py  test.py  test.txt&gt;&gt;&gt; git.list_branches()* main                3e780ec [origin/main: ahead 3] Merge branch 'my-feature'  remotes/origin/main fc6b7ac docs: update readme&lt;/pre&gt;If capturing stdout is only desired for a set of functions, the `capture_output` function can be used as a context manager.Upon entering the context, the `capture_stdout` property is set to `True`and then set back to `False` upon exiting the context.&lt;pre&gt;&gt;&gt;&gt; git = Git()&gt;&gt;&gt; with git.capture_output():...  status = git.status()...&gt;&gt;&gt; print(status)On branch stdout-context-managerYour branch is up to date with 'main'.Changes not staged for commit:  (use &quot;git add &lt;\file&gt;...&quot; to update what will be committed)  (use &quot;git restore &lt;\file&gt;...&quot; to discard changes in working directory)        modified:   src/gitbetter/git.pyno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)&lt;/pre&gt;</longdescription>
</pkgmetadata>