<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>About backlash-------------------------backlash is a swiss army knife for web applications debugging, which provides:    - An Interactive In Browser Debugger based on a Werkzeug Debugger fork ported to WebOb    - Crash reporting by email and on Sentry    - Slow requests reporting by email and on Sentry.Backlash was born as a replacement for WebError in TurboGears2.3 versions.Installing-------------------------------backlash can be installed from pypi::    pip install backlashshould just work for most of the usersDebugging and Console----------------------------------Backlash supports both debugging applications on crash and realtime console,both are based on the Werkzeug Debugger and adapted to work with WebOb.The debugging function is provided by the ``DebuggedApplication`` middleware,wrapping your application with this middleware will intercept any exceptionand display the traceback and an interactive console in your browser.An interactive console will also be always available at ``/__console__`` path.Context Injectors+++++++++++++++++++++++++++++The ``DebuggedApplication`` middleware also makes possible to provide one or more``context injectors``, those are simple python functions that will be called whenan exception is raised to retrieve the context to store and make back available duringdebugging.Context injectors have to return a dictionary which will be merged into the currentrequest context, the request context itself will be made available inside the debuggeras the ``ctx`` object.This feature is used for example by TurboGears to provide back some of the objectswhich were available during execution like the current request.Example+++++++++++++++++++++++++++++++The DebuggedApplication middleware is used by TurboGears in the following way::    def _turbogears_backlash_context(environ):        tgl = environ.get('tg.locals')        return {'request':getattr(tgl, 'request', None)}    app = backlash.DebuggedApplication(app, context_injectors=[_turbogears_backlash_context])Exception Tracing---------------------------------------The ``TraceErrorsMiddleware`` provides a WSGI middleware that intercepts any exceptionraised during execution, retrieves a traceback object and provides it to one or more``reporters`` to log the error.By default the ``EmailReporter`` and ``SentryReporter`` are provided to send errorreports by email and on Sentry.The ``EmailReporter`` supports most of the options WebError ErrorMiddleware to provide somekind of backward compatibility and make possible a quick transition.While this function is easily replicable using the python logging SMTPHandler, theTraceErrorsMiddleware is explicitly meant for web applications crash reportingwhich has the benefit of being able to provide more complete information and keep a clearand separate process in managing errors.Example++++++++++++++++++++++++++++++++The TraceErrorsMiddleware is used by TurboGears in the following way::    from backlash.trace_errors import EmailReporter    def _turbogears_backlash_context(environ):       tgl = environ.get('tg.locals')       return {'request':getattr(tgl, 'request', None)}    app = backlash.TraceErrorsMiddleware(app, [EmailReporter(**errorware)],                                         context_injectors=[_turbogears_backlash_context])Slow Requests Tracing---------------------------------------The ``TraceSlowRequestsMiddleware`` provides a WSGI middleware that tracks requestsexecution time and reports requests that took more than a specified interval to complete(by default 25 seconds).It is also possible to exclude a list of paths that start with a specified stringto avoid reporting long polling connections or other kind of requests that areexpected to have a long life spawn.Example++++++++++++++++++++++++++++++++The TraceSlowRequestsMiddleware is used by TurboGears in the following way::    from backlash.trace_errors import EmailReporter    def _turbogears_backlash_context(environ):       tgl = environ.get('tg.locals')       return {'request':getattr(tgl, 'request', None)}    app = backlash.TraceSlowRequestsMiddleware(app, [EmailReporter(**errorware)],                                               interval=25, exclude_paths=None,                                               context_injectors=[_turbogears_backlash_context])</longdescription>
</pkgmetadata>