<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>![NetHack Learning Environment (NLE)](https://github.com/facebookresearch/nle/raw/main/dat/nle/logo.png)--------------------------------------------------------------------------------&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;https://circleci.com/gh/facebookresearch/nle&quot;&gt;    &lt;img src=&quot;https://circleci.com/gh/facebookresearch/nle.svg?style=shield&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://github.com/facebookresearch/nle/actions/workflows/build_docker.yml&quot;&gt;    &lt;img src=&quot;https://github.com/facebookresearch/nle/actions/workflows/test_and_deploy.yml/badge.svg?branch=main&quot; /&gt;  &lt;/a&gt;  &lt;a href=&quot;https://pypi.python.org/pypi/nle/&quot;&gt;    &lt;img src=&quot;https://img.shields.io/pypi/v/nle.svg&quot; /&gt;  &lt;/a&gt;   &lt;a href=&quot;https://pepy.tech/project/nle&quot;&gt;    &lt;img src=&quot;https://static.pepy.tech/personalized-badge/nle?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=orange&amp;left_text=Downloads&quot; /&gt;  &lt;/a&gt;   &lt;a href=&quot;https://twitter.com/NetHack_LE&quot;&gt;    &lt;img src=&quot;https://img.shields.io/twitter/follow/NetHack_LE?label=Twitter&amp;style=social&quot; alt=&quot;Twitter&quot; /&gt;  &lt;/a&gt; &lt;/p&gt;The NetHack Learning Environment (NLE) is a Reinforcement Learning environment presented at [NeurIPS 2020](https://neurips.cc/Conferences/2020).NLE is based on [NetHack 3.6.6](https://github.com/NetHack/NetHack/tree/NetHack-3.6.6_PostRelease) and designed to provide a standard RL interface to the game, and comes with tasks that function as a first step to evaluate agents on this new environment.NetHack is one of the oldest and arguably most impactful videogames in history,as well as being one of the hardest roguelikes currently being played by humans.It is procedurally generated, rich in entities and dynamics, and overall anextremely challenging environment for current state-of-the-art RL agents, whilebeing much cheaper to run compared to other challenging testbeds. Through NLE,we wish to establish NetHack as one of the next challenges for research indecision making and machine learning.You can read more about NLE in the [NeurIPS 2020 paper](https://arxiv.org/abs/2006.13760), and about NetHack in its [originalREADME](./README.nh), at [nethack.org](https://nethack.org/), and on the[NetHack wiki](https://nethackwiki.com).![Example of an agent running on NLE](https://github.com/facebookresearch/nle/raw/main/dat/nle/example_run.gif)### NLE Language WrapperWe thank [ngoodger](https://github.com/ngoodger) for implementing the [NLE Language Wrapper](https://github.com/ngoodger/nle-language-wrapper) that translates the non-language observations from NetHack tasks into similar language representations. Actions can also be optionally provided in text form which are converted to the Discrete actions of the NLE.### NetHack Learning DatasetThe NetHack Learning Dataset (NLD) code now ships with `NLE`, allowing users to the load large-scale datasets featured in [Dungeons and Data: A Large-Scale NetHack Dataset](), while also generating and loading their own datasets.```pythonimport nle.dataset as nldif not nld.db.exists():    nld.db.create()    # NB: Different methods are used for data based on NLE and data from NAO.    nld.add_nledata_directory(&quot;/path/to/nld-aa&quot;, &quot;nld-aa-v0&quot;)    nld.add_altorg_directory(&quot;/path/to/nld-nao&quot;, &quot;nld-nao-v0&quot;)dataset = nld.TtyrecDataset(&quot;nld-aa-v0&quot;, batch_size=128, ...)for i, mb in enumerate(dataset):    foo(mb) # etc...```For information on how to download NLD-AA and NLD-NAO, see the dataset doc [here](./DATASET.md).Otherwise checkout the tutorial Colab notebook [here](https://colab.research.google.com/drive/1GRP15SbOEDjbyhJGMDDb2rXAptRQztUD?usp=sharing).# Papers using the NetHack Learning Environment- Izumiya and Simo-Serra [Inventory Management with Attention-Based Meta Actions](https://esslab.jp/~ess/publications/IzumiyaCOG2021.pdf) (Waseda University, CoG 2021).- Samvelyan et al. [MiniHack the Planet: A Sandbox for Open-Ended Reinforcement Learning Research](https://arxiv.org/abs/2109.13202) (FAIR, UCL, Oxford, NeurIPS 2021).- Zhang et al. [BeBold: Exploration Beyond the Boundary of Explored Regions](https://arxiv.org/abs/2012.08621) (Berkley, FAIR, Dec 2020).- KÃ¼ttler et al. [The NetHack Learning Environment](https://arxiv.org/abs/2006.13760) (FAIR, Oxford, NYU, Imperial, UCL, NeurIPS 2020).Open a [pullrequest](https://github.com/facebookresearch/nle/edit/main/README.md)to add papers.# Getting startedStarting with NLE environments is extremely simple, provided one is familiarwith other gym / RL environments.## InstallationNLE requires `python&gt;=3.5`, `cmake&gt;=3.15` to be installed and available both when building thepackage, and at runtime.On **MacOS**, one can use `Homebrew` as follows:``` bash$ brew install cmake```On a plain **Ubuntu 18.04** distribution, `cmake` and other dependenciescan be installed by doing:```bash# Python and most build deps$ sudo apt-get install -y build-essential autoconf libtool pkg-config \    python3-dev python3-pip python3-numpy git flex bison libbz2-dev# recent cmake version$ wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | sudo apt-key add -$ sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'$ sudo apt-get update &amp;&amp; apt-get --allow-unauthenticated install -y \    cmake \    kitware-archive-keyring```Afterwards it's a matter of setting up your environment. We advise using a condaenvironment for this:```bash$ conda create -y -n nle python=3.8$ conda activate nle$ pip install nle```NOTE: If you want to extend / develop NLE, please install the package as follows:``` bash$ git clone https://github.com/facebookresearch/nle --recursive$ pip install -e &quot;.[dev]&quot;$ pre-commit install```## DockerWe have provided some docker images. Please see the [relevantREADME](docker/README.md).## Trying it outAfter installation, one can try out any of the provided tasks as follows:```python&gt;&gt;&gt; import gym&gt;&gt;&gt; import nle&gt;&gt;&gt; env = gym.make(&quot;NetHackScore-v0&quot;)&gt;&gt;&gt; env.reset()  # each reset generates a new dungeon&gt;&gt;&gt; env.step(1)  # move agent '@' north&gt;&gt;&gt; env.render()```NLE also comes with a few scripts that allow to get some environment rollouts,and play with the action space:```bash# Play NetHackStaircase-v0 as a human$ python -m nle.scripts.play# Use a random agent$ python -m nle.scripts.play --mode random# Play the full game using directly the NetHack internal interface# (Useful for debugging outside of the gym environment)$ python -m nle.scripts.play --env NetHackScore-v0 # works with random agent too# See all the options$ python -m nle.scripts.play --help```Note that `nle.scripts.play` can also be run with `nle-play`, if the packagehas been properly installed.Additionally, a [TorchBeast](https://github.com/facebookresearch/torchbeast)agent is bundled in `nle.agent` together with a simple model to provide astarting point for experiments:``` bash$ pip install &quot;nle[agent]&quot;$ python -m nle.agent.agent --num_actors 80 --batch_size 32 --unroll_length 80 --learning_rate 0.0001 --entropy_cost 0.0001 --use_lstm --total_steps 1000000000```Plot the mean return over the last 100 episodes:```bash$ python -m nle.scripts.plot``````                              averaged episode return  140 +---------------------------------------------------------------------+      |             +             +            ++-+ ++++++++++++++++++++++++|      |             :             :          ++++++++||||||||||||||||||||||||  120 |-+...........:.............:...+-+.++++|||||||||||||||||||||||||||||||      |             :        +++++++++++++++||||||||||AAAAAAAAAAAAAAAAAAAAAA|      |            +++++++++++++||||||||||||||AAAAAAAAAAAA|||||||||||||||||||  100 |-+......+++++|+|||||||||||||||||||||||AA||||||||||||||||||||||||||||||      |       +++|||||||||||||||AAAAAAAAAAAAAA|||||||||||+++++++++++++++++++|      |    ++++|||||AAAAAAAAAAAAAA||||||||||||++++++++++++++-+:             |   80 |-++++|||||AAAAAA|||||||||||||||||||||+++++-+...........:...........+-|      | ++|||||AAA|||||||||||||||++++++++++++-+ :             :             |   60 |++||AAAAA|||||+++++++++++++-+............:.............:...........+-|      |++|AA||||++++++-|-+        :             :             :             |      |+|AA|||+++-+ :             :             :             :             |   40 |+|A+++++-+...:.............:.............:.............:...........+-|      |+AA+-+       :             :             :             :             |      |AA-+         :             :             :             :             |   20 |AA-+.........:.............:.............:.............:...........+-|      |++-+         :             :             :             :             |      |+-+          :             :             :             :             |    0 |-+...........:.............:.............:.............:...........+-|      |+            :             :             :             :             |      |+            +             +             +             +             |  -20 +---------------------------------------------------------------------+      0           2e+08         4e+08         6e+08         8e+08         1e+09                                       steps```# ContributingWe welcome contributions to NLE. If you are interested in contributing pleasesee [this document](./CONTRIBUTING.md).# ArchitectureNLE is direct fork of [NetHack](https://github.com/nethack/nethack) andtherefore contains code that operates on many different levels of abstraction.This ranges from low-level game logic, to the higher-level administration ofrepeated nethack games, and finally to binding of these games to Python `gym`environment.If you want to learn more about the architecture of `nle` and how it worksunder the hood, checkout the [architecture document](./doc/nle/ARCHITECTURE.md).This may be a useful starting point for anyone looking to contribute to thelower level elements of NLE.# Related Environments- [gym\_nethack](http://campbelljc.com/research/gym_nethack/)- [rogueinabox](https://github.com/rogueinabox/rogueinabox)- [rogue-gym](https://github.com/kngwyu/rogue-gym)- [MiniGrid](https://github.com/maximecb/gym-minigrid)- [CoinRun](https://github.com/openai/coinrun)- [MineRL](http://minerl.io/docs)- [Project Malmo](https://www.microsoft.com/en-us/research/project/project-malmo/)- [OpenAI Procgen Benchmark](https://openai.com/blog/procgen-benchmark/)- [Obstacle Tower](https://github.com/Unity-Technologies/obstacle-tower-env)# Interview about the environment with Weights&amp;Biases[Facebook AI Researchâs Tim &amp; Heiner on democratizing reinforcement learning research.](https://www.youtube.com/watch?v=oYSNXTkeCtw)[![Interview with Weigths&amp;Biases](https://img.youtube.com/vi/oYSNXTkeCtw/0.jpg)](https://www.youtube.com/watch?v=oYSNXTkeCtw)# CitationIf you use NLE in any of your work, please cite:```@inproceedings{kuettler2020nethack,  author    = {Heinrich K{\&quot;{u}}ttler and               Nantas Nardelli and               Alexander H. Miller and               Roberta Raileanu and               Marco Selvatici and               Edward Grefenstette and               Tim Rockt{\&quot;{a}}schel},  title     = {{The NetHack Learning Environment}},  booktitle = {Proceedings of the Conference on Neural Information Processing Systems (NeurIPS)},  year      = {2020},}```If you use NLD or the datasets in any of your work, please cite:```@inproceedings{hambro2022dungeonsanddata,  author    = {Eric Hambro and               Roberta Raileanu and               Danielle Rothermel and               Vegard Mella and               Tim Rockt{\&quot;{a}}schel and               Heinrich K{\&quot;{u}}ttler and               Naila Murray},  title     = {{Dungeons and Data: A Large-Scale NetHack Dataset}},  booktitle = {Thirty-sixth Conference on Neural Information Processing Systems Datasets and Benchmarks Track},  year      = {2022},  url       = {https://openreview.net/forum?id=zHNNSzo10xN}}```</longdescription>
</pkgmetadata>