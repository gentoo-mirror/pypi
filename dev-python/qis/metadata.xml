<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>## **Quantitative Investment Strategies: QIS** &lt;a name=&quot;analytics&quot;&gt;&lt;/a&gt;qis package implements analytics for visualisation of financial data, performancereporting, analysis of quantitative strategies. qis package is split into 5 main modules with the dependecy path increasing sequentially as follows.1. ```qis.utils``` is module containing low level utilities for operations with pandas, numpy, and datetimes.2. ```qis.perfstats``` is module for computing performance statistics and performance attribution including returns, volatilities, etc.3. ```qis.plots``` is module for plotting and visualization apis.4. ```qis.models``` is module containing statistical models including filtering and regressions.5. ```qis.portfolio``` is high level module for analysis, simulation, backtesting, and reporting of quant strategies.```qis.examples``` contains scripts with illustrations of QIS analytics.# Table of contents1. [Analytics](#analytics)2. [Installation](#installation)3. [Examples](#examples)   1. [Visualization of price data](#price)   2. [Multi assets factsheet](#multiassets)   3. [Strategy factsheet](#strategy)   4. [Strategy benchmark factsheet](#strategybenchmark)   5. [Multi strategy factsheet](#multistrategy)   6. [Notebooks](#notebooks)4. [Contributions](#contributions)5. [Updates](#updates)6. [ToDos](#todos)7. [Disclaimer](#disclaimer)## **Updates** &lt;a name=&quot;updates&quot;&gt;&lt;/a&gt;## **Installation** &lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;install using```python pip install qis```upgrade using```python pip install --upgrade qis```close using```python git clone https://github.com/ArturSepp/QuantInvestStrats```Core dependencies:    python = &quot;&gt;=3.8,&lt;3.11&quot;,    numba = &quot;&gt;=0.56.4&quot;,    numpy = &quot;&gt;=1.22.4&quot;,    scipy = &quot;&gt;=1.10&quot;,    statsmodels = &quot;&gt;=0.13.5&quot;,    pandas = &quot;&gt;=1.5.2&quot;,    matplotlib = &quot;&gt;=3.2.2&quot;,    seaborn = &quot;&gt;=0.12.2&quot;Optional dependencies:    yfinance &quot;&gt;=0.1.38&quot; (for getting test price data),    pybloqs &quot;&gt;=1.2.13&quot; (for producing html and pdf factsheets)## **Examples** &lt;a name=&quot;examples&quot;&gt;&lt;/a&gt;### 1. Visualization of price data &lt;a name=&quot;price&quot;&gt;&lt;/a&gt;The script is located in ```qis.examples.performances``` (https://github.com/ArturSepp/QuantInvestStrats/blob/master/qis/examples/performances.py)```python import matplotlib.pyplot as pltimport seaborn as snsimport yfinance as yfimport qis# define tickers and fetch price datatickers = ['SPY', 'QQQ', 'EEM', 'TLT', 'IEF', 'LQD', 'HYG', 'GLD']prices = yf.download(tickers, start=None, end=None)['Adj Close'][tickers].dropna()# plotting price data with minimum usagewith sns.axes_style(&quot;darkgrid&quot;):    fig, ax = plt.subplots(1, 1, figsize=(10, 7))    qis.plot_prices(prices=prices, x_date_freq='A', ax=ax)```![image info](qis/examples/figures/perf1.PNG)```python # 2-axis plot with drawdowns using sns styleswith sns.axes_style(&quot;darkgrid&quot;):    fig, axs = plt.subplots(2, 1, figsize=(10, 7))    qis.plot_prices_with_dd(prices=prices, x_date_freq='A', axs=axs)```![image info](qis/examples/figures/perf2.PNG)```python # plot risk-adjusted performance table with excess Sharpe ratioust_3m_rate = yf.download('^IRX', start=None, end=None)['Adj Close'].dropna() / 100.0# set parameters for computing performance stats including returns vols and regressionsperf_params = qis.PerfParams(freq='M', freq_reg='Q', rates_data=ust_3m_rate)fig = qis.plot_ra_perf_table(prices=prices,                             perf_columns=[PerfStat.TOTAL_RETURN, PerfStat.PA_RETURN, PerfStat.VOL, PerfStat.SHARPE,                                           PerfStat.SHARPE_EXCESS, PerfStat.MAX_DD, PerfStat.MAX_DD_VOL,                                           PerfStat.SKEWNESS, PerfStat.KURTOSIS],                             title=f&quot;Risk-adjusted performance: {qis.get_time_period_label(prices, date_separator='-')}&quot;,                             perf_params=perf_params)```![image info](qis/examples/figures/perf3.PNG)### 2. Multi assets factsheet &lt;a name=&quot;multiassets&quot;&gt;&lt;/a&gt;This report is adopted for reporting the risk-adjusted performance of several assets with the goalof cross-sectional comparisionRun example in ```qis.examples.factsheets.multi_assets.py``` https://github.com/ArturSepp/QuantInvestStrats/blob/master/qis/examples/factsheets/multi_assets.py![image info](qis/examples/figures/multiassets.PNG)### 3. Strategy factsheet &lt;a name=&quot;strategy&quot;&gt;&lt;/a&gt;This report is adopted for report performance, risk, and trading statisticsfor either backtested or actual strategy    with strategy data passed as PortfolioData objectRun example in ```qis.examples.factsheets.strategy.py``` https://github.com/ArturSepp/QuantInvestStrats/blob/master/qis/examples/factsheets/strategy.py![image info](qis/examples/figures/strategy.PNG)### 4. Strategy benchmark factsheet &lt;a name=&quot;strategybenchmark&quot;&gt;&lt;/a&gt;This report is adopted for report performance and marginal comparison  of strategy vs a benchmark strategy (data for both are passed using individual PortfolioData object)Run example in ```qis.examples.factsheets.strategy_benchmark.py``` https://github.com/ArturSepp/QuantInvestStrats/blob/master/qis/examples/factsheets/strategy_benchmark.py![image info](qis/examples/figures/strategy_benchmark.PNG)### 5. Multi strategy factsheet &lt;a name=&quot;multistrategy&quot;&gt;&lt;/a&gt;This report is adopted to examine the sensitivity of backtested strategy to a parameter or set of parameters:Run example in ```qis.examples.factsheets.multi_strategy.py``` https://github.com/ArturSepp/QuantInvestStrats/blob/master/qis/examples/factsheets/multi_strategy.py![image info](qis/examples/figures/multi_strategy.PNG)### 6. Notebooks &lt;a name=&quot;notebooks&quot;&gt;&lt;/a&gt;Recommended package to work with notebooks:  ```python pip install notebook```Starting local server```python jupyter notebook```## **Contributions** &lt;a name=&quot;contributions&quot;&gt;&lt;/a&gt;If you are interested in extending and improving QIS analytics, please consider contributing to the library.I have found it is a good practice to isolate general purpose and low level analytics and visualizations, which can be outsourced and shared, while keeping the focus on developing high level commercial applications.There are a number of requirements:- The code is [Pep 8 compliant](https://peps.python.org/pep-0008/)- Reliance on common Python data types including numpy arrays, pandas, and dataclasses.- Transparent naming of functions and data types with enough comments. Type annotations of functions and arguments is a must.- Each submodule has a unit test for core functions and a localised entry point to core functions.- Avoid &quot;super&quot; pythonic constructions. Readability is the priority.## **Updates** &lt;a name=&quot;updates&quot;&gt;&lt;/a&gt;#### 30 December 2022,  Version 1.0.1 released#### 08 July 2023, Version 2.0.1 releasedCore Changes1. Portfolio optimization (qis.portfolio.optimisation) layer is removed with corefunctionality moved to a stand-alone Python package: Backtesting Optimal Portfolio (bop)    * This allows to remove the dependency from cvxpy and sklearn packages and thus to simplify the dependency management for qis2.Added factsheet reporting using pybloqs package https://github.com/man-group/PyBloqs* Pybloqs is a versatile tool to create customised reporting using Matplotlib figures and tableand thus leveraging QIS visualisation analytics3. New factsheets are added* Examples are added for the four type of reports:    1. multi assets: report performance of several assets with goal of cross-sectional comparision:    see qis.examples.factsheets.multi_asset.py  2. strategy: report performance, risk, and trading statictics for either backtested or actual strategy    with strategy data passed as PortfolioData object: see qis.examples.factsheets.strategy.py  3. strategy vs benchmark: report performance and marginal comparison  of strategy vs a benchmark strategy (data for both are passed using individual PortfolioData object):   see qis.examples.factsheets.strategy_benchmark.py  4. multi_strategy: report for a list of strategies with individual PortfolioData. This report is   useful to examine the sensetivity of backtested strategy to a parameter or set of parameters:   see qis.examples.factsheets.multi_strategy## **ToDos** &lt;a name=&quot;todos&quot;&gt;&lt;/a&gt;1. Enhanced documentation and readme examples.2. Docstrings for key functions.3. Reporting analytics and factsheets generation enhancing to matplotlib.## **Disclaimer** &lt;a name=&quot;disclaimer&quot;&gt;&lt;/a&gt;QIS package is distributed FREE &amp; WITHOUT ANY WARRANTY under the GNU GENERAL PUBLIC LICENSE.See the [LICENSE.txt](https://github.com/ArturSepp/QuantInvestStrats/blob/master/LICENSE.txt) in the release for details.Please report any bugs or suggestions by opening an [issue](https://github.com/ArturSepp/QuantInvestStrats/issues).</longdescription>
</pkgmetadata>