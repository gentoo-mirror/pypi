<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># PyConsoleCMDTools![PyPI - Downloads](https://img.shields.io/pypi/dm/consolecmdtools)![GitHub release](https://img.shields.io/github/v/release/kyan001/PyConsoleCMDTools)[![GitHub license](https://img.shields.io/github/license/kyan001/PyConsoleCMDTools.svg)](https://github.com/kyan001/PyConsoleCMDTools/blob/master/LICENSE)## Installation```shpip install consolecmdtools  # installpip install --upgrade consolecmdtools  # updatepython -m consolecmdtools  # examples```## Get Started```pythonimport consolecmdtools as cctprint(cct.__version__)```## Functions```python&gt;&gt;&gt; cct.banner(&quot;hello, world!&quot;)  # Generate banner for text########################    hello, world!    ########################&gt;&gt;&gt; cct.md5(&quot;blah blah blah&quot;)  # Return md5 hash for text.'55e562bfee2bde4f9e71b8885eb5e303'&gt;&gt;&gt; cct.md5(42)  # Return md5 hash for number.'a1d0c6e83f027327d8461063f4ac58a6'&gt;&gt;&gt; cct.md5('file.txt')  # Return md5 hash for file.'d07aa6ddab4d6d2d2891aa9f3625a5db'&gt;&gt;&gt; cct.md5('file.txt', force_text=True)  # Force to return the md5 has for text, even the file exists.'3d8e577bddb17db339eae0b3d9bcf180'&gt;&gt;&gt; cct.crc32(&quot;blah blah blah&quot;)  # Return crc32 hash for text.753353432&gt;&gt;&gt; cct.crc32(42)  # Return crc32 hash for number.841265288&gt;&gt;&gt; cct.crc32('file.txt')  # Return crc32 hash for file.1030388931&gt;&gt;&gt; cct.crc32('file.txt', force_text=True)  # Force to return the md5 has for text, even the file exists.3774289445&gt;&gt;&gt; cct.main_color('image.jpg')  # Get theme color of image.(152, 156, 69)  # RGB value&gt;&gt;&gt; cct.main_color('http://image-url/image', is_url=True)  # Get theme color of web image.(152, 156, 69)  # RGB value&gt;&gt;&gt; cct.main_color('image.jpg', scale=500)  # Cost more time to generate a preciser color. default scale is 200.(152, 156, 69)&gt;&gt;&gt; cct.main_color('image.jpg', triplet='hex')  # Return color in hex triplet format. default mode is 'rgb'.'#989C45'&gt;&gt;&gt; cct.clear_screen()  # Clear the console.&gt;&gt;&gt; cct.get_py_cmd()  # Get python running command for different OS.'python3'&gt;&gt;&gt; cct.run_cmd(&quot;echo hello&quot;)  # Run console command. If the command failed, a warning message echoed. Returns bool.*| __RUN COMMAND__________________________| (Command) echo hellohello`&gt;&gt;&gt; cct.read_cmd(&quot;echo hello&quot;)  # Run a command and return the output.'hello\n'&gt;&gt;&gt; cct.is_cmd_exist(&quot;ls&quot;)  # Test if a command is exist.True&gt;&gt;&gt; cct.get_path(&quot;./file.txt&quot;)  # Get the absolute path.Path('/path/to/file.txt')  # Path Object which is a subclass of str.&gt;&gt;&gt; cct.get_path(&quot;./file.txt&quot;).split('/')  # Path Object can be used as str.['path', 'to', 'file.txt']&gt;&gt;&gt; cct.get_path(&quot;./file.txt&quot;).path  # Get the original path.'./file.txt'&gt;&gt;&gt; cct.get_path(&quot;./file.txt&quot;).abs  # Get the absolute path. Same as `get_path(&quot;./file.txt&quot;)` itself.&gt;&gt;&gt; cct.get_path(&quot;/path/to/file.txt&quot;).basename  # Get the basename of the file or dir.'file.txt'&gt;&gt;&gt; cct.get_path(&quot;/path/to/file.txt&quot;).ext  # Get the extension of the path. If the path is a dir, return ''.'txt'&gt;&gt;&gt; cct.get_path(&quot;/path/to/file.txt&quot;).stem  # Get the name of the path without extension. If the path is a dir, return its basename.'file'&gt;&gt;&gt; cct.get_path(&quot;/path/to/file.txt&quot;).parent  # Get the parent dir path of the file or dir.'/path/to'&gt;&gt;&gt; cct.get_path(&quot;/path/to/file.txt&quot;).parent.basename  # Get the parent dir path's basename of the file or dir.'to'&gt;&gt;&gt; cct.select_path()  # Show file dialog to get file path. Additional args pass to tkinter.filedialog.askopenfilename()'/path/to/file'&gt;&gt;&gt; cct.select_path(multiple=True)  # Show file dialog to get multiple file paths.['/path/to/file1', '/path/to/file2']&gt;&gt;&gt; cct.select_path(dir=True)  # Show file dialog to get dir path.'/path/to/dir'&gt;&gt;&gt; cct.bfs_walk(&quot;/path/to/root&quot;)  # Get all paths in the root dir using Breadth-first search.['/path/to/root', '/path/to/root/folder', '/path/to/root/folder/file1', '/path/to/root/folder/file2']&gt;&gt;&gt; cct.get_paths(&quot;/path/to/root&quot;, filter=lambda path: path.name.startswith(&quot;f&quot;))  # Filter paths and return as list[str]['/path/to/root/folder', '/path/to/root/folder/file1', '/path/to/root/folder/file2']&gt;&gt;&gt; cct.ls_tree(root=&quot;/path/to/root&quot;)  # Show folders and files in a tree.üìÇ root\‚îú‚îÄ‚îÄüìÅ folder\‚îÇ   ‚îú‚îÄ‚îÄüìÑ file1‚îÇ   ‚îú‚îÄ‚îÄüìÑ file2&gt;&gt;&gt; cct.ls_tree(root=&quot;/path/to/root&quot;, show_icon=False, ascii=True)  # Show without icons, using ASCII chars.root/|-- folder/|  |-- file1|  |-- file2&gt;&gt;&gt; cct.ls_tree(root=&quot;/path/to/root&quot;, to_visible=lambda path: path.is_dir())  # Show only folders.üìÇ root\‚îú‚îÄ‚îÄüìÅ folder\&gt;&gt;&gt; cct.ls_tree(root=&quot;/path/to/root&quot;, to_highlight=lambda path: path.name == &quot;file1&quot;)  # Highlight certain file.üìÇ root\‚îú‚îÄ‚îÄüìÅ folder\‚îÇ   ‚îú‚îÄ‚îÄüìÑ file1  # highlighted‚îÇ   ‚îú‚îÄ‚îÄüìÑ file2&gt;&gt;&gt; cct.ls_tree(root=&quot;/path/to/root&quot;, add_suffix=lambda path: &quot;(current)&quot; if pathe.name == &quot;file1&quot; else &quot;&quot;)  # Add suffix to path name.üìÇ root\‚îú‚îÄ‚îÄüìÅ folder\‚îÇ   ‚îú‚îÄ‚îÄüìÑ file1 (current)‚îÇ   ‚îú‚îÄ‚îÄüìÑ file2&gt;&gt;&gt; cct.show_in_file_manager(&quot;/path/to/file&quot;)  # Show file in Explorer/Finder/File Manager.&gt;&gt;&gt; cct.show_in_file_manager(&quot;/path/to/file&quot;, ask=True)  # Ask before show.&gt;&gt;&gt; cct.diff(&quot;str1&quot;, &quot;str2&quot;)  # Compare 2 strings, return the list of diffs.[  # you can use `&quot;\n&quot;.join(diff)` to print the diff.    &quot;-str1&quot;,    &quot;+str2&quot;]&gt;&gt;&gt; cct.diff(&quot;str1&quot;, &quot;str2&quot;, meta=True)  # show meta data in the first 3 lines.[    &quot;--- &lt;class 'str'&gt;&quot;,    &quot;+++ &lt;class 'str'&gt;&quot;,    &quot;@@ -1 +1 @@&quot;,    &quot;-str1&quot;,    &quot;+str2&quot;]&gt;&gt;&gt; cct.diff([&quot;a&quot;, &quot;b&quot;], [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])  # Compare 2 lists and print diffs.[    &quot;+c&quot;]&gt;&gt;&gt; cct.diff([&quot;a&quot;, &quot;b&quot;], [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], context=2)  # Show diffs with 2 extra context lines.[    &quot; a&quot;,  # context line    &quot; b&quot;,  # context line    &quot;+c&quot;  # diff]&gt;&gt;&gt; cct.diff(&quot;/path/to/file1&quot;, &quot;/path/to/file2&quot;)  # Compare between 2 files.&gt;&gt;&gt; cct.diff(&quot;/path/to/file1&quot;, &quot;str&quot;)  # Compare between file and str/list.&gt;&gt;&gt; cct.diff('str', 'str')  # If no diff, return [].[]&gt;&gt;&gt; cct.update_file('file', 'http://file-url')  # Update file if the file is not as same as url content.False  # if already up-to-date.&gt;&gt;&gt; cct.read_file('file')  # Read file using different encoding automatically.&quot;file content&quot;&gt;&gt;&gt; cct.move_file(&quot;/path/to/src&quot;, &quot;/path/to/dst&quot;)  # Move file from src to dst, overwrite if dst already exists.&gt;&gt;&gt; cct.move_file(&quot;/path/to/src&quot;, &quot;/path/to/dst&quot;, copy=True)  # Copy file from src to dst.&gt;&gt;&gt; cct.move_file(&quot;/path/to/src&quot;, &quot;/path/to/dst&quot;, backup=True)  # Backup dst file before move or copy.&gt;&gt;&gt; cct.move_file(&quot;/path/to/src&quot;, &quot;/path/to/dst&quot;, msgout=print)  # Use `print` to handle output logs.&gt;&gt;&gt; cct.ajax('http://ajax-url')  # Start a AJAX request.{'result': 'data'}  # As python dict.&gt;&gt;&gt; cct.ajax('http://ajax-url', {'data': 'value'})  # AJAX request with param.{'result': 'data'}&gt;&gt;&gt; cct.ajax('http://ajax-url', method='post')  # AJAX request using post. default is 'get'.{'result': 'data'}&gt;&gt;&gt; if not cct.is_admin():  # Check does the script has admin privileges....     cct.runas_admin(__file__)  # run the script with admin privileges.... else:...     # your code here```## Updates* 2021-01-29 v3.0.0:    * Deprecated `image_to_color()`, add `main_color()`.        * use `main_color(..., is_url=True)` instead of `image_to_color(...)`</longdescription>
</pkgmetadata>