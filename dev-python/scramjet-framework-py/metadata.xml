<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Scramjet in Python==================&lt;p align=&quot;center&quot;&gt;    &lt;a&gt;&lt;img src=&quot;https://img.shields.io/github/license/scramjetorg/framework-python?color=green&amp;style=plastic&quot; alt=&quot;GitHub license&quot; /&gt;&lt;/a&gt;    &lt;a&gt;&lt;img src=&quot;https://img.shields.io/github/v/tag/scramjetorg/framework-python?label=version&amp;color=blue&amp;style=plastic&quot; alt=&quot;version&quot; /&gt;&lt;/a&gt;    &lt;a&gt;&lt;img src=&quot;https://img.shields.io/github/stars/scramjetorg/framework-python?color=pink&amp;style=plastic&quot; alt=&quot;GitHub stars&quot; /&gt;&lt;/a&gt;    &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=7F7V65C43EBMW&quot;&gt;        &lt;img src=&quot;https://img.shields.io/badge/Donate-PayPal-green.svg?color=yellow&amp;style=plastic&quot; alt=&quot;Donate&quot; /&gt;    &lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;‚≠ê Star us on GitHub ‚Äî it motivates us a lot! üöÄ &lt;/p&gt;&lt;p align=&quot;center&quot;&gt;    &lt;img src=&quot;https://assets.scramjet.org/images/framework-logo-256.svg&quot; width=&quot;420&quot; alt=&quot;Scramjet Framework&quot;&gt;&lt;/p&gt;Scramjet is a simple reactive stream programming framework. The code is writtenby chaining functions that transform the streamed data, including well knownmap, filter and reduce.The main advantage of Scramjet is running asynchronous operations on your datastreams concurrently. It allows you to perform the transformations bothsynchronously and asynchronously by using the same API - so now you can &quot;map&quot;your stream from whatever source and call any number of API's consecutively.[Originally written](https://github.com/scramjetorg/scramjet) on top of node.jsobject streams, Scramjet is now being ported into Python. This is what ishappening in this repository.&gt;_Tested with Python 3.8.10 and Ubuntu 20.04._## Table of contents- [Installation](#installation)- [Usage](#usage)- [Requesting features](#requesting-features)- [Reporting bugs](#reporting-bugs)- [Contributing](#contributing)- [Development Setup](#development-setup)## InstallationSince this is a pre-release version it is not available as a pip package yet. However, it can be used in your `requirements.txt` file by referring to this git repository:```bashpip install scramjet-framework-py```After adding Scramjet Framework as dependency, it needs to be instaled via `pip`.## UsageBasic building block of Scramjet is the `Stream` class. It reads input inchunks, performs operations on these chunks and produces an iterable outputthat can be collected and written somewhere.**Creating a stream** is done using `read_from` class method. It acceptsany iterable or an object implementing .read() method as the input, and returnsa `Stream` instance.**Transforming a stream:*** `map` - transform each chunk in a stream using specified function.* `filter` - keep only chunks for which specified function evaluates to `True`.* `flatmap` - run specified function on each chunk, and return all of its results as separate chunks.* `batch` - convert a stream of chunks into a stream of lists of chunks.Each of these methods return the modified stream, so they can be chained likethis: `some_stream.map(...).filter(...).batch(...)`**Collecting data** from the stream (asynchronous):* `write_to` - write all resulting stream chunks into a target.* `to_list` - return a list with all stream chunks.* `reduce` - combine all chunks using specified function.Examples :books:--------Let's say we have a `fruits.csv` file like this:```csvorange,sweet,1lemon,sour,2pigface,salty,5banana,sweet,3cranberries,bitter,6```and we want to write the names of the sweet fruits to a separate file.To do this, write an async function like this:```pythonwith open(&quot;misc/fruits.csv&quot;) as file_in, open(&quot;sweet.txt&quot;, &quot;w&quot;) as file_out:    await (        Stream        .read_from(file_in)        .map(lambda line: line.split(','))        .filter(lambda record: record[1] == &quot;sweet&quot;)        .map(lambda record: f&quot;{record[0]}\n&quot;)        .write_to(file_out)    )```and that's it!You can find more examples in [`hello_datastream.py`](./hello_datastream.py)file. They don't require any additional dependencies, just the standard library,so you can run them simply with:```bashpython hello_datastream.py```## Requesting FeaturesAnything missing? Or maybe there is something which would make using Scramjet Framework much easier or efficient? Don't hesitate to fill up a [new feature request](https://github.com/scramjetorg/framework-python/issues/new)! We really appreciate all feedback.## Reporting bugsIf you have found a bug, inconsistent or confusing behavior please fill up a [new bug report](https://github.com/scramjetorg/framework-python/issues/new).## ContributingYou can contribute to this project by giving us feedback ([reporting bugs](#reporting-bugs) and [requesting features](#reporting-features)) and also by writing code yourself!The easiest way is to [create a fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) of this repository and then [create a pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) with all your changes. In most cases, you should branch from and target `main` branch.Please refer to [Development Setup](#development-setup) section on how to setup this project.## Development Setup1. Install Python3 interpreter on your computer. Refer to [official docs](https://wiki.python.org/moin/BeginnersGuide/Download).2. Install `git` version control system. Refer to [official docs](https://git-scm.com/downloads).3. Clone this repository:```bashgit clone git@github.com:scramjetorg/framework-python.git```4. Create and activate a virtualenv:```bashsudo apt install python3-virtualenvvirtualenv -p python3 venv.venv/bin/activate```5. Check Python version:```bash$ python --versionPython 3.8.10```6. Install dependencies:```bashpip install -r dev-requirements.txt```7. Run test cases (with activated virtualenv):```bashpytest```&gt; :bulb: **HINT:** add a filename if you want to limit which tests are run8. If you want to enable detailed debug logging, set one of the following env variables:```bashPYFCA_DEBUG=1       # debug pyfcaDATASTREAM_DEBUG=1  # debug datastreamSCRAMJET_DEBUG=1    # debug both```</longdescription>
</pkgmetadata>