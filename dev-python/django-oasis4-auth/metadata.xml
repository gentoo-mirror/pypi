<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[English](#oasis4-authentication-package-for-DJANGO&amp;copy;)# Módulo de autenticación OASIS4 para DJANGO&amp;copy;Este módulo permite a DJANGO&amp;copy; interactuar con OASIS4 y realizar acciones como el registro de usuario y su autenticacíón, utilizando un sistema de dos pasos.El módulo ofrece tres (3) servicios API para el registro de los usuarios, ingreso al sistema y validación del código de autorización.## Versiones* 1.0.7: Incorpora una tarea para la sincronización de los usuarios desde la tabla origen en OASIS4.* 1.0.5: Corrige un bug que se presentaba con la autenticación anónima derivada de la actualización de librerías.* 1.0.4: Corrige un bug que creaba el usuario en la tabla de usuarios ignorando el segundo nombre y apellido.## APIs* [Registro](#registro)* [Acceso al sistema](#login-1)* [Validación del código](#validate-1)### *Registro*Esta API permite realizar el proceso de registro de usuarios. El sistema valida el correo electrónico y el númerodel documento de identificación del usuario contra los datos que existen en la base de datos de *OASIS4&amp;copy;*.El API se accede a través de https://&lt;dominio&gt;/&lt;modulo&gt;/register/ y recibe como parte de la solicitud HTTP un setde datos en formato JSON con los parámetros requeridos para su funcionamiento.#### Parámetros* ***customer_id***: Número de identificación del cliente* ***email***: Correo electrónico, debe ser el registrado en *OASIS4&amp;copy;*.* ***password***: El password asignado por el usuario en la forma de registro online.#### Retorna&gt; El API retorna un objeto Response con el estado HTTP 200 si no existen errores y un objeto JSON.````pythoncustomer_data = {    &quot;first_name&quot;: &quot;&quot;,    &quot;last_name&quot;: &quot;&quot;,    &quot;location&quot;: &quot;&quot;,    &quot;address&quot;: &quot;&quot;,    &quot;phone&quot;: 0,    &quot;mobile&quot;: 0,    &quot;email&quot;: &quot;&quot;,    &quot;customer_id&quot;: 0,    &quot;document_type&quot;: 0,    &quot;is_valid&quot;: True,    &quot;type&quot;: 0}data_return = {    &quot;token&quot;: &quot;asdasdas&quot;,    &quot;data&quot;: customer_data}````##### Objeto customer_data* *first_name*: Nombre o nombres del usuario registrado en la base *OASIS4&amp;copy;*.* *last_name*: Apellidos registrados en la base de datos *OASIS4&amp;copy;*.* *location*: Nombre de la ciudad registrada en la base de datos *OASIS4&amp;copy;*.* *address*: Dirección registrada en la base de datos *OASIS4&amp;copy;*.* *phone*: Número telefónico registrado en la base de datos *OASIS4&amp;copy;*.* *mobile*: Número celular registrado en la base de datos *OASIS4&amp;copy;*.* *email*: Correo electrónico registrado en la base de datos *OASIS4&amp;copy;*.* *customer_id*: Documento de identificación registrado en la base de datos *OASIS4&amp;copy;*.* *document_type*: Tipo de documento registrado en la base de datos *OASIS4&amp;copy;*.* *is_valid*: Indica si el usuario se encuentra válido en la base de datos *OASIS4&amp;copy;*.* *type*: Código del tipo de usuario asociado.  * 0: Sin relación  * 1: Cliente  * 2: Asociado##### JSON data_return&gt; Diccionario de datos que se retorna a través del objeto Response HTTP.* *token*: Token utilizado para la validación del segundo paso de autenticación* *data*: Objeto que contiene los [datos básicos del cliente](#objeto-customerdata)### *Login*Este API realiza el proceso de autenticación de los usuarios a través de los parámetros &quot;email&quot; y &quot;password&quot;. En caso deque la autenticación sea exitosa, envía el código para el segundo paso de la autenticación.El API se expone a través de https://&lt;dominio&gt;/&lt;modulo&gt;/login/ y recibe en formato JSON los siguientes parémtros.#### Parámetros* ***email***: Correo electrónico del usuario, previamente registrado, para la autenticación.* ***password***: Clave del usuario#### Retorna&gt; El API retorna un objeto *Response HTTP* con estado 200 si no existen errores y un objeto JSON.````pythondata_return = {            &quot;token&quot;: &quot;asdkjahs&quot;        }````##### *JSON* data_return&gt; Objeto *JSON* que se envía a través del Response HTTP.* *token*: Clave token para validar el código de autorización en el segundo paso.### *Validate*Este API realiza el proceso de autenticación con el token y el código de autorización enviado al correo electrónico.El API se accede a travésde https://&lt;domain&gt;/&lt;module&gt;/validate/ y recibe un objeto JSON con los parámetros requeridos.#### Parámetros* ***token***: Clave token enviada desde el [login](#login-1) o [register](#registro)* ***code***: Código de autorización enviado al correo electrónico.### Retorna&gt; El API genera un objeto Response basado en la acción originaria y asociada al token. Si es exitoso el procdeso retorna&gt; un estado HTTP 200.* Registro: El API solamente retorna el estado* Acceso (Login): El API retorna el estado y un objeto JSON.````pythondata_return = {    &quot;token&quot;: &quot;asdaskjhiuuh&quot;,    &quot;payload&quot;: {},    &quot;user&quot;: {        &quot;full_name&quot;: &quot;&quot;,        &quot;document_id&quot;: 0,        &quot;type&quot;: &quot;&quot;    }}````* *token*: Java Web Token generado a partir de la autenticacion HTTP.* *payload*: Carga de datos del JWT.* *user*: Objeto con los datos básicos del usuario.  * *full_name*: Nombre completo del usuario  * *document_id*: Número del documento de identificación  * *type*: Descriptivo del tipo de relación que contiene el cliente con la entidad.***[Spanish](#módulo-de-autenticación-oasis4-para-DJANGO&amp;copy;)# OASIS4 Authentication Package for DJANGO&amp;copy;This package allow to DJANGO&amp;copy; interact with *OASIS4&amp;copy;* and make actions like register and authenticate users for login, with a two steps authentication system. The package offers three API Endpoints for user registration, login user and authenticate code validation.## Versions* 1.0.7: Include a task to syn users from OASIS4 entity.* 1.0.5: Fix a bug with anonymous authentication on login after upgrade libraries.* 1.0.4: Fix a bug that create the username ignoring second name and first last name. ## Endpoints* [Register](#register)* [Login](#login)* [Validate](#validate)### *Register*This endpoint make a user registration process, validating the email and document id with *OASIS4* databaseThe endpoint is https://&lt;domain&gt;/&lt;module&gt;/register/ and receive a json body with some **required parameters**.#### Parameters* ***customer_id***: identification number registered at *OASIS4&amp;copy;* database for validation purposes.* ***email***: email previously registered at *OASIS4&amp;copy* database.* ***password***: password entered by user in the registration form.#### Return&gt; The endpoint returns a response with **HTTP Status 200** if ok and json body.```pythoncustomer_data = {    &quot;first_name&quot;: &quot;&quot;,    &quot;last_name&quot;: &quot;&quot;,    &quot;location&quot;: &quot;&quot;,    &quot;address&quot;: &quot;&quot;,    &quot;phone&quot;: 0,    &quot;mobile&quot;: 0,    &quot;email&quot;: &quot;&quot;,    &quot;customer_id&quot;: 0,    &quot;document_type&quot;: 0,    &quot;is_valid&quot;: True,    &quot;type&quot;: 0}data_return = {    &quot;token&quot;: &quot;asdasdas&quot;,    &quot;data&quot;: customer_data}```##### customer_data *object*:&gt; Set of features that represent a customer or partner.* *first_name*: First name registered in *OASIS4&amp;copy;* database.* *last_name*: Last name registered in *OASIS4&amp;copy;* database.* *location*: City registered in *OASIS4&amp;copy;* database.* *address*: Address registered in *OASIS4&amp;copy;* database.* *phone*: Phone number registered in *OASIS4&amp;copy;* database.* *mobile*: Mobile phone number registered in *OASIS4&amp;copy;* database.* *email*: Email registered in *OASIS4&amp;copy;* database.* *customer_id*: ID number registered in *OASIS4&amp;copy;* database.* *document_type*: Document type from *OASIS4&amp;copy;* database.* *is_valid*: True if user is valid, otherwise False.* *type*: User type in system:  * 0 -&gt; Not relationship with company.  * 1 -&gt; Customer relationship.  * 2 -&gt; Partner relationship.##### data_return *JSON*&gt; Set of values to be returned through HTTP Response.* *token*: Token to validate code at second pass authenticate.* *data*: [Customer data object](#customerdata-object-)### *Login*This endpoint make a login authentication for users, and send an email with authorization code for second step authentication.The endpoint is https://&lt;domain&gt;/&lt;module&gt;/login/ and receive a json body with **required parameters**:#### Parameters* ***email***: Email registered at system to authenticate.* ***password***: User password#### Return&gt; The endpoint returns a response object with **HTTP Status 200** if ok and json body.````pythondata_return = {            &quot;token&quot;: &quot;asdkjahs&quot;        }````##### data_return *dict*&gt; Set of values to be returned through HTTP Response.* *token*: Token to validate second step authorization code.### *Validate*This endpoint performs the authentication with the token and the authorization code sent to the email.The endpoint is https://&lt;domain&gt;/&lt;module&gt;/validate/ and receive a json body with **required parameters**:#### Parameters* ***token***: Token received from [login](#login) or [register](#register) endpoints.* ***code***: Authentication code received via email.#### Return&gt; The endpoint return a Response based on the action that originates it with *HTTP Status 200* if ok.* Register Action: The endpoint return only status code.* Login Action: The endpoint return status code (200) and json body.````pythondata_return = {    &quot;token&quot;: str(token_data.access_token),    &quot;payload&quot;: token_data.payload,    &quot;user&quot;: {        &quot;full_name&quot;: self.__data.get_full_name(),        &quot;document_id&quot;: self.__data.profile.document_id,        &quot;type&quot;: self.__data.profile.type    }}````##### data_return *dict*&gt; Set of values to be return via HTTP Response.* *token*: Java Web Token to authenticate HTTP Requests.* *payload*: Java Web Token payload.* *user*: Basic user information  * *full_name*: User full name  * *document_id*: Document id of user  * *type*: Descriptive user type</longdescription>
</pkgmetadata>