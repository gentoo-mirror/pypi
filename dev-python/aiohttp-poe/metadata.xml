<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># aiohttp_poeAn implementation of the Poe protocol using aiohttp.To run it:- Create a virtual environment (Python 3.7 or higher)- `pip install .`- `python -m aiohttp_poe`- In a different terminal, run [ngrok](https://ngrok.com/) to make it publicly  accessible## Write your own botThis package can also be used as a base to write your own bot. You can inherit from`aiohttp_poe.PoeBot` to make a bot:```pythonfrom aiohttp_poe import PoeBot, runclass EchoBot(PoeBot):    async def get_response(self, query, request):        last_message = query[&quot;query&quot;][-1][&quot;content&quot;]        yield self.text_event(last_message)if __name__ == &quot;__main__&quot;:    run(EchoBot())```## Enable authenticationPoe servers send requests containing Authorization HTTP header in the format &quot;Bearer&lt;api_key&gt;,&quot; where api_key is the API key configured in the bot settings. \To validate the requests are from Poe Servers, you can either set the environmentvariable POE_API_KEY or pass the parameter api_key in the run function like:```pythonif __name__ == &quot;__main__&quot;:    run(EchoBot(), api_key=&lt;key&gt;)```For a more advanced example that exercises more of the Poe protocol, see[Catbot](./src/aiohttp_poe/samples/catbot.py).</longdescription>
</pkgmetadata>