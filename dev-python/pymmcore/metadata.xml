<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pymmcore: Python bindings for MMCore====================================The pymmcore package provides Python 3.x bindings to Micro-Manager's MMCore(the low-level device control/acquisition interface).Using pymmcore, you can control and acquire images from all of the microscopedevices supported by Micro-Manager, but without the GUI application.Not to be confused with[pycro-manager](https://github.com/micro-manager/pycro-manager), which allowscontrol of the entire Micro-Manager application, including its Java APIs, andmore.You might also be interested in[pymmcore-plus](https://pymmcore-plus.readthedocs.io) which wraps this library and provides extra functionality.Note: pymmcore is similar to the legacy MMCorePy module (Python 2.x only),previously distributed with the Micro-Manager application. However, the Pythonpackage for pymmcore is named `pymmcore` instead of `MMCorePy`. This is in partto avoid importing the wrong package on systems where `pymmcore` (usuallyinstalled via `pip`) and `MMCorePy` (installed with the Micro-Manager app orbuilt by the user) both exist.Because pymmcore is distributed separately from Micro-Manager, it needs to be&quot;pointed&quot; at an existing Micro-Manager installation to access device adapters.(See the example below.)Installing----------Windows (Python 3.7-3.11), macOS (Python 3.7-3.11, 64-bit), and Linux (Python3.7-3.11) are supported. Only 64-bit is supported for Python 3.10 and later.```python -m pip install --user pymmcore```You can leave out the `--user` if installing into a virtual environment(recommended).Or install via conda:```conda install -c conda-forge pymmcore```Installation by `pip` should use binary wheels. If `pip` falls back to buildingfrom source code, it will probably fail. If this happens in a supportedenvironment, please [file abug](https://github.com/micro-manager/pymmcore/issues). To manually build fromsource, the scripts in `.github/workflows` should serve as a starting point.You also need a working installation of the Micro-Manager application.Quick example-------------```pythonimport pymmcoreimport os.pathmm_dir = &quot;C:/Program Files/Micro-Manager-2.0.x&quot;mmc = pymmcore.CMMCore()mmc.setDeviceAdapterSearchPaths([mm_dir])mmc.loadSystemConfiguration(os.path.join(mm_dir, &quot;MMConfig_demo.cfg&quot;))mmc.snapImage()mmc.getImage()```We do not currently have Python-specific documentation for MMCore. The [Javadocumentation](https://micro-manager.org/apidoc/mmcorej/latest/) is probablythe best resource (start at the class `CMMCore`). There is also [C++documentation](https://micro-manager.org/apidoc/MMCore/latest/).Matching Micro-Manager and pymmcore versions--------------------------------------------The version number of pymmcore is independent of the Micro-Manager versionnumber; instead it tracks the MMCore and device interface versions.In order to use a given Micro-Manager installation, the _device interfaceversion_ must match between pymmcore and the Micro-Manager device adapters(`mmgr_dal_*.dll` on Windows).The device interface version of a given Micro-Manager installation can beviewed in **Help** &gt; **About Micro-Manager**.The device interface version of a given pymmcore version is the fourth part inthe version number, and can also be viewed as follows:```pythonimport pymmcorepymmcore.CMMCore().getAPIVersionInfo()```Note that `getAPIVersionInfo()` should not be confused with `getVersionInfo()`,which returns the version number of MMCore. (The MMCore version is the first 3parts of the pymmcore version.)- For example, pymmcore `10.1.1.69.0` is based on MMCore `10.1.1` and has  device interface version `69`.- The device interface version can change independently of the MMCore version,  although it is less common for the device interface version to be incremented  without a corresponding version change of MMCore.- Older versions of pymmcore did not include the device interface version in  their version number.For a list of device interface versions for each pymmcore version, see the[Releases](https://github.com/micro-manager/pymmcore/releases) page.Loading device adapters on Windows----------------------------------The majority of device adapters should load once`setDeviceAdapterSearchPaths()` has been called with the correct directories,as in the above example. However, you may have trouble with device adaptersthat in turn depend on external DLLs (typically equipment vendor libraries).To fix this, _first ensure that the Micro-Manager application can correctlyload all the devices_ using the same configuration file. Then, use one of thefollowing:- Temporarily change the current directory to the Micro-Manager installation  when loading the configuration file (use `os.chdir()`).- Add the Micro-Manager directory to the `PATH` environment variable.The first method mimics how the Micro-Manager application works (it always runwith the current directory set to the installation directory). However, thesecond method may be more robust in case the external DLLs in turn loadadditional DLLs at a later time.Please report any cases where the Micro-Manager application can load aconfiguration but pymmcore cannot, even when using the above methods.Code of Conduct---------------This project is covered by the [Micro-Manager Code of Conduct](https://github.com/micro-manager/micro-manager/blob/master/CodeOfConduct.md).License-------The license for pymmcore itself is LGPL 2.1 (see `LICENSE.txt`). The MMCorecomponent of Micro-Manager (which gets built into pymmcore) is also under thesame license. Other parts of Micro-Manager are under different licenses.</longdescription>
</pkgmetadata>