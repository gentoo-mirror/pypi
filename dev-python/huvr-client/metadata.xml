<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># HUVR ClientA Python client (with examples) to connect to HUVRdata.You must be an active customer of HUVRdata.com for this library to be useful.The client is a thin wrapper around the Python `requests` library. It is provided asa convenience to help customers access their data.See the https://docs.huvrdata.app for detailed specs on specific API endpoints.  Along with guides for most common use cases.## Usage### InstallationUse pip to install the client.   See pip/python installation best practices: https://docs.python-guide.org/starting/installation/```bashpip install huvr-client```### Client InitializationYou will need a service account in the HUVRdata platform to use this client.  Please contact your HUVRdata representative to get your credentials.```pyfrom huvr_client import get_huvr_client# Create a client with your credentialsclient = get_huvr_client(    base_url=&quot;https://demo.huvrdata.app&quot;,    client_id=&quot;my-company.service-account@demo.huvrdata.app&quot;,    client_secret=&quot;my-secret&quot;)```#### AuthenticationThe client will be authenticated for 1 hour.  After that, you will need to re-authenticate.```pyclient.authenticate(    client_id=&quot;my-company.service-account@demo.huvrdata.app&quot;,    client_secret=&quot;my-secret&quot;)```### Fetch Data Examplepass `params` to specify filters_for full list of available filters - see [API docs](https://docs.huvrdata.app)_```pypagination_data = client.projects.list(params={    &quot;asset_search&quot;: &quot;my-site/my-asset&quot;})# some responses will contain pagination info {next, previous, count, results}projects = pagination_data[&quot;results&quot;]# result data will be raw python dicts/lists etcfor project in projects:    print(project[&quot;name&quot;])```### Post Data Examplepass `json` to request when creating/updating data_for full list of expected json data - see [API docs](https://docs.huvrdata.app)_```pyproject = client.projects.create(json={    &quot;name&quot;: &quot;My Project&quot;,    &quot;asset&quot;: 24,  # asset id    &quot;type&quot;: 36,  # project type id})# result data will be raw python dicts/lists etcprint(project[&quot;id&quot;])```### Raw Request Exampleif requesting a non-json or &quot;internal&quot; endpoint, can make a raw request.this will return a standard python `requests.Response` object```pyresponse = client.request(    method=&quot;GET&quot;,    path=&quot;/api/.../&quot;,    # params={...},    # json={...},    # headers={...},    # data={...},)response.content  # access raw bytes, or .json(), etc```## Contributing / InternalsDocker Required: https://www.docker.com### Run CodegenAll API endpoints are generated from the OpenAPI spec.To regenerate the client code, first, obtain a link to the latest OpenAPI spec at https://docs.huvrdata.app/openapi/. Then run the following command:```bashmake generate_client open_api_url=&quot;https://docs.huvrdata.app/openapi/&lt;version&gt;&quot;```If a new _module_ is added to the spec, you will need to add it to the `huvr_client/client.py` file.### Testcreate a `tests/.env.yaml` file based on the `tests/.example.env.yaml` file.```bashmake test```can also open a shell in the test container```bashmake ipython```then:```pyclient = get_huvr_client(...)```### PublishGenerate a Release on GitHub.  This will trigger a GitHub Action to publish the package to PyPi.</longdescription>
</pkgmetadata>