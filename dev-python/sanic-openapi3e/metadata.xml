<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Sanic OpenAPI v3eOpenAPI v3 support for Sanic. Document and describe all parameters, including sanic path params. python 3.6+; sanic 18.12.0+ but sanic 20.12.0 and later are recommended.[![Pythons](https://img.shields.io/pypi/pyversions/sanic-openapi3e.svg)](https://img.shields.io/pypi/pyversions/sanic-openapi3e.svg)[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336)](https://pycqa.github.io/isort/)[![Downloads](https://pepy.tech/badge/sanic-openapi3e)](https://pepy.tech/project/sanic-openapi3e)## Installation```shellpip install sanic-openapi3e```## Usage### Import blueprint and use simple decorators to document routes:```pythonimport sanicimport sanic.responsefrom sanic_openapi3e import openapi_blueprint, swagger_blueprint, docapp = sanic.Sanic(strict_slashes=True)app.blueprint(openapi_blueprint)app.blueprint(swagger_blueprint)@app.get(&quot;/user/&lt;user_id&gt;&quot;)@doc.summary(&quot;Fetches a user by ID&quot;)@doc.response(200, &quot;The user&quot;)async def get_user(request, user_id):    return sanic.response.json({&quot;user_id&quot;: user_id})app.go_fast()```You'll now have a specification at the URL `/openapi/spec.json` anda YAML version at `/openapi/spec.yml`. p.s.: Clicking on the `/openapi/spec.yml` link in a browser will generally download a file and your computer will openan application to read it. To see the YAML spec in the browser as a plain text file, add a `?as_text` query string like `/openapi/spec.yml?as_text` instead.Your routes will be automatically categorized by their blueprints' names.Below are some simple examples, which you can copy/paste, run, and point your browser to http://127.0.0.1:8000/swagger/ to see them in action.### Describe route path parametersIf you have path parameters, you will want to describe them:```pythonimport sanicimport sanic.responsefrom sanic_openapi3e import openapi_blueprint, swagger_blueprint, docapp = sanic.Sanic(strict_slashes=True)app.blueprint(openapi_blueprint)app.blueprint(swagger_blueprint)@app.get(&quot;/examples/test_id/&lt;an_id:int&gt;&quot;)@doc.parameter(name=&quot;an_id&quot;, description=&quot;An ID&quot;, required=True, _in=&quot;path&quot;)def test_id(request, an_id):    d = locals()    del d[&quot;request&quot;]  # not JSON serializable    return sanic.response.json(d)app.go_fast()`````sanic-openapiv3e`` will recognise that the path parameter ``an_id`` isdescribed with ``@doc.parameter`` and will merge the details together.You may wish to specify that a parameter be limited to a set of choices,such as day-of-week or that it has a minimum value. These can be done for parameters in ``path``, ``query``, ``header`` and ``cookie``:```pythonimport sanicimport sanic.requestimport sanic.responsefrom sanic_openapi3e import openapi_blueprint, swagger_blueprint, docapp = sanic.Sanic(strict_slashes=True)app.blueprint(openapi_blueprint)app.blueprint(swagger_blueprint)int_min_4 = doc.Schema(    _type=&quot;integer&quot;, _format=&quot;int32&quot;, minimum=4, description=&quot;Minimum: 4&quot;)  @app.get(&quot;/test/some_ids&quot;)@doc.parameter(    name=&quot;ids&quot;,    description=&quot;Some IDs&quot;,    required=True,    choices=[1, 3, 5, 7, 11, 13],    _in=&quot;query&quot;,    schema=doc.Schema.Integers,)def test_some_ids(request: sanic.request.Request):    query = request.query_string    return sanic.response.json(query)@app.get(&quot;/examples/test_id_min/&lt;an_id:int&gt;&quot;)@doc.parameter(    name=&quot;an_id&quot;, description=&quot;An ID&quot;, required=True, _in=&quot;path&quot;, schema=int_min_4)def test_id_min(request, an_id: int):    d = locals()    del d[&quot;request&quot;]  # not JSON serializable    return sanic.response.json(d)app.go_fast()```### Describe your tagsOpenAPI uses &quot;tags&quot; (there can be more than one per route) to group the endpoints. It's nice to be able to group your endpoints into tags givenby the blueprint's name, but sometimes you will want to give them betternames: ``@doc.tag(&quot;tag name&quot;)``. Better still is to give a description to these tags (which shows up nicely in Swagger UI), so ``@doc.tag(&quot;tag name&quot;, description=&quot;tag description&quot;)``. You don't have to add the description more than once, ``sanic-openapiv3e`` will make it available, so while you'll want to decorate each endpoint with ``@doc.tag(...)``, only one of these willneed the description. If you try to set different descriptions for the same tag, ``sanic-openapiv3e`` will raise an exception showing the tagname and the conflicting descriptions.### Share and reuse common parameters in your appYou probably have some common parameters that appear in many places in your API. Days of the week? Pagination where the minimum value must begreater than zero? OpenAPI v3 has the concept of &quot;components&quot; which canbe shared. Setting them up is easy:```pythonimport sanic.requestimport sanic.responsefrom sanic import Sanicfrom sanic_openapi3e import openapi_blueprint, swagger_blueprint, docdays_of_week = doc.Schema(    _type=&quot;string&quot;,    description=&quot;Days of the week, short, English&quot;,    enum=[&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;],)app = Sanic(strict_slashes=True)app.blueprint(openapi_blueprint)app.blueprint(swagger_blueprint)schemas = {    &quot;int.min4&quot;: doc.Schema(        title=&quot;int.min4&quot;,        _type=&quot;integer&quot;,        _format=&quot;int32&quot;,        minimum=4,        description=&quot;Minimum: 4&quot;,    ),    &quot;days&quot;: days_of_week,}components = doc.Components(schemas=schemas)app.config.OPENAPI_COMPONENTS = components# ^^ the line above adds these to OAS v3's &quot;components&quot;# the next two, which would ordinarily live in your blueprints's module,# reuse these shared components.int_min_4_ref = doc.Reference(&quot;#/components/schemas/int.min4&quot;)dow_ref = doc.Reference(&quot;#/components/schemas/days&quot;)@app.get(&quot;/simple/01/from/&lt;start&gt;/to/&lt;end&gt;/in/&lt;hops:int&gt;&quot;)@doc.parameter(    name=&quot;start&quot;, description=&quot;Start day&quot;, required=True, _in=&quot;path&quot;, schema=dow_ref)@doc.parameter(    name=&quot;end&quot;, description=&quot;End day&quot;, required=True, _in=&quot;path&quot;, schema=dow_ref)@doc.parameter(    name=&quot;hops&quot;,    description=&quot;hops to use&quot;,    required=True,    _in=&quot;path&quot;,    schema=int_min_4_ref,)def get_start_end_hops(request, start: str, end: str, hops: int):    d = locals()    del d[&quot;request&quot;]  # not JSON serializable    return sanic.response.json(d)app.go_fast()```### Deprecate route paths and/or parametersA parameter can be marked as ``deprecated=True``:```pythonimport sanicimport sanic.requestimport sanic.responsefrom sanic_openapi3e import openapi_blueprint, swagger_blueprint, docapp = sanic.Sanic(strict_slashes=True)app.blueprint(openapi_blueprint)app.blueprint(swagger_blueprint)@app.get(&quot;/examples/test_parameter__deprecated/&lt;an_id:int&gt;&quot;)@doc.parameter(    name=&quot;an_id&quot;, description=&quot;An ID&quot;, required=True, _in=&quot;path&quot;, deprecated=True)@doc.summary(&quot;A path deprecated parameter&quot;)@doc.description(&quot;The parameter should be marked as deprecated&quot;)def param__deprecated(request, an_id: int):    d = locals()    del d[&quot;request&quot;]  # not JSON serializable    return sanic.response.json(d)app.go_fast()```as can a whole route with ``@doc.deprecated()``:```pythonimport sanicimport sanic.requestimport sanic.responsefrom sanic_openapi3e import openapi_blueprint, swagger_blueprint, docapp = sanic.Sanic(strict_slashes=True)app.blueprint(openapi_blueprint)app.blueprint(swagger_blueprint)@app.get(&quot;/examples/test_path__deprecated/&lt;an_id:int&gt;&quot;)@doc.parameter(    name=&quot;an_id&quot;,    description=&quot;An ID&quot;,    required=True,    _in=&quot;path&quot;,)@doc.summary(&quot;A path with parameter examples&quot;)@doc.description(&quot;This is marked as being deprecated&quot;)@doc.deprecated()def path__deprecated(request, an_id: int):    d = locals()    del d[&quot;request&quot;]  # not JSON serializable    return sanic.response.json(d)app.go_fast()```Please note, that while many python decorators can be called without the `()`, this one reallydoes require the `()` at the end of `@doc.deprecated()`.### Exclude routes from appearing in the OpenAPI spec (and swagger)Need to soft-launch an endpoint, or keep your swagger simple? Add a `@doc.exclude` and it won't be in the OpenAPI spec at all (unless youhave set your `app.config.SHOW_OPENAPI_EXCLUDED = True` when a **second** spec at `/openapi/spec.all.json` will be created which willhave all routes, including excluded. ```pythonimport sanicimport sanic.requestimport sanic.responsefrom sanic_openapi3e import openapi_blueprint, swagger_blueprint, docapp = sanic.Sanic(strict_slashes=True)app.blueprint(openapi_blueprint)app.blueprint(swagger_blueprint)@app.get(&quot;/test/alpha_release&quot;)@doc.exclude@doc.parameter(    name=&quot;ids&quot;,    description=&quot;Some IDs&quot;,    required=True,    choices=[1, 3, 5, 7, 11, 13],    _in=&quot;query&quot;,    schema=doc.Schema.Integers,)def test_some_ids(request: sanic.request.Request):    query = request.query_string    return sanic.response.json(query)app.go_fast()```### Predefined components for responsesThere are predefimed components for common responses. You can overwrite and append these per route.## Control spec generation```pythonapp.config.API_VERSION = '1.0.0'app.config.API_TITLE = 'An API'app.config.API_DESCRIPTION = 'An API description'```To have a `contact`, set at least one of (but preferably all)`app.config.API_CONTACT_NAME`,`app.config.API_CONTACT_URL` or`app.config.API_CONTACT_EMAIL`.To have a `license`, `set app.config.API_LICENSE_NAME` andoptionally `app.config.API_LICENSE_URL` (all str, but the Swagger UI expects this to be a URL).To have a `termsOfService`, set`app.config.API_TERMS_OF_SERVICE_URL` (a str, but the Swagger UIexpects to use this as a URL).Setting `components`, `security` and `externalDocs` requires you to* first create the relevant objects somewhere in your code (near to  where you create the `app`),* set the appropriate `app.config.OPENAPI_COMPONENTS`,  `app.config.OPENAPI_SECURITY`,    `app.config.OPENAPI_EXTERNAL_DOCS`.By default, the YAML spec is served on `/openapi/spec.yml` with the content-type of `application/x-yaml` but you canoverwrite that by setting `app.config.OPENAPI_YAML_CONTENTTYPE` to something like `text/plain`. This lets you viewyour spec in a browser, and it still works with `/swagger` :-)### Configure how the operationId is madeThe default code for creating the operationId creates unique (as they must be) strings fromthe following code:```pythondef default_operation_id_fn(method: str, uri: str, route: sanic.router.Route) -&gt; str:    uri_for_operation_id: str = uri    for parameter in route.parameters:      uri_for_operation_id = re.sub(            &quot;&lt;&quot; + parameter.name + &quot;.*?&gt;&quot;, parameter.name, uri_for_operation_id        )    return &quot;{}~~{}&quot;.format(method.upper(), uri_for_operation_id).replace(&quot;/&quot;, &quot;~&quot;)```You can implement your own code (as long as the method signature matches this), and set that tobe used in the app config:`app.config.OPENAPI_OPERATION_ID_FN = my_operation_id_fn`For example, to make `camelCase` operationIds from the Routes' handlers (but be advised you thatyou must ensure your handlers' function names are globally unique, not &quot;just&quot; unique within theBlueprint), you could use the supplied `camel_case_operation_id_fn`:```pythondef camel_case_operation_id_fn(method: str, uri: str, route: sanic.router.Route) -&gt; str:  if hasattr(route.handler, &quot;__class__&quot;) and hasattr(route.handler, &quot;handlers&quot;):    # These are `sanic.view.CompositeView`s    _method_handler = route.handler.handlers.get(method.upper())    if _method_handler:      handler_name = method + &quot;_&quot; + _method_handler.__name__    else:      raise ValueError(f&quot;No {method.upper()} handler found for {uri} handlers: {route.handler.handlers}&quot;)  elif hasattr(route.handler, &quot;__name__&quot;):    if len(route.methods) &gt; 1:      # This fn will be called many times, once per method, but we should prefix the handler_name with this      # prefix to make the operationIds globally unique. If the route is only used by one method, use that      # handler's name.      handler_name = method + &quot;_&quot; + route.handler.__name__    else:      handler_name = route.handler.__name__  else:    raise NotImplementedError()  return simple_snake2camel(handler_name)```and set it like `app.config.OPENAPI_OPERATION_ID_FN = sanic_openapi3e.openapi.camel_case_operation_id_fn`Note that this does not change the `parameter`'s  names.    hide_openapi_self = app.config.get(&quot;HIDE_OPENAPI_SELF&quot;, True)    show_excluded = app.config.get(&quot;SHOW_OPENAPI_EXCLUDED&quot;, False)    show_unused_tags = app.config.get(&quot;SHOW_OPENAPI_UNUSED_TAGS&quot;, False)In practice, you don't usually want to document the `/swagger` nor `/openapi` routes, but by setting `app.config.HIDE_OPENAPI_SELF = False`you can have them appear in the generated spec (and therefore swagger too). Your `@doc.exclude` annotations are always respected, but if your config has `app.config.SHOW_OPENAPI_EXCLUDED = True` then a **second** spec at `/openapi/spec.all.json` is created. You generally won't want these to be on your production deployment, but you may want it for devand test purposes. | app.config | Purpose ||---|---|app.config.get(&quot;HIDE_OPENAPI_SELF&quot;, True) | If True, hide the /openapi and /swagger endpoints from the swagger UI. Usually set to True.app.config.get(&quot;HIDE_SANIC_STATIC&quot;, True) | If True, hide any sanic paths designed to serve up static files like images. Usually set to True.app.config.get(&quot;SHOW_OPENAPI_EXCLUDED&quot;, False) | See above.app.config.get(&quot;SHOW_OPENAPI_UNUSED_TAGS&quot;, False) | If True, your spec will include tags which have no visible routes. Usually set to False.app.config.get(&quot;OPENAPI_OPERATION_ID_FN&quot;, default_operation_id_fn) | See above.app.config.get(&quot;OPENAPI_COMPONENTS&quot;) | Allows you to build your own `Components` for the spec.app.config.get(&quot;API_CONTACT_NAME&quot;) | If set, creates a `Contact` with a `.name`. Combines with the other `Contact` attributes.app.config.get(&quot;API_CONTACT_URL&quot;) | If set, creates a `Contact` with a `.url`. Combines with the other `Contact` attributes.app.config.get(&quot;API_CONTACT_EMAIL&quot;) | If set, creates a `Contact` with a `.email`. Combines with the other `Contact` attributes.app.config.get(&quot;API_LICENSE_NAME&quot;) | If set, creates a `License` with a `.name`. Combines with the other `License` attributes.app.config.get(&quot;API_LICENSE_URL&quot;) | If set, creates a `License` with a `.url`. Combines with the other `License` attributes.app.config.get(&quot;API_TITLE&quot;, &quot;API&quot;) | Set a better `.name` than &quot;API&quot; for your API!app.config.get(&quot;API_DESCRIPTION&quot;, &quot;Description&quot;) | Set a better `.description` than &quot;Description&quot; for your API!app.config.get(&quot;API_TERMS_OF_SERVICE_URL&quot;) | If set, adds a `termsOfService` to your `.info`app.config.get(&quot;API_VERSION&quot;, &quot;v1.0.0&quot;) | Set a better `.version` for your API!app.config.get(&quot;OPENAPI_SERVERS&quot;) | Allows you to build your own `Servers` for the spec.app.config.get(&quot;OPENAPI_SECURITY&quot;) | Allows you to build your own `Security` for the spec.app.config.get(&quot;OPENAPI_EXTERNAL_DOCS&quot;) | If set, adds an `ExternalDocumentation` to your specapp.config.get(&quot;OPENAPI_YAML_CONTENTTYPE&quot;, default_yaml_content_type) | See your `/openapi/spec.yml` in a browser by setting this to `text/plain`## OAS Object maturity`sanic-openapi3e` is being used in production, and all of the spec is implemented. Most of the spec is known to be inproduction use, but some of the spec's objects are marked here as &quot;beta&quot; due to no known production use.| Class | sanic-openapi3e maturity | notes ||---|---|---|Components | production/stable |  |Contact | production/stable |  |Example | production/stable |  |ExternalDocumentation | production/stable |  |Info | production/stable |  |License | production/stable |  |Link | beta | no known usageMediaType | production/stable |  |OAuthFlow | production/stable |  |OAuthFlows | production/stable |  |OpenAPIv3 | production/stable |  |Operation | production/stable |  |Parameter | production/stable |  |PathItem | production/stable |  |Paths | production/stable |  |Reference | production/stable |  |RequestBody | production/stable |  |Responses | production/stable |  |Schema | production/stable |  |SecurityScheme | production/stable |  |Server | production/stable |  |Tag | production/stable |  |Response | production/stable | no known use of the &quot;default&quot; value |SecurityRequirement | beta | only the `[]` empty-list override knownDiscriminator | beta | no known usageEncoding | stable | no known usage |Header | production/stable |  |ServerVariable | beta | no known usageXML | beta | no known usageCallback | none | not implemented`sanic-openapi3e` is built to create [OpenAPI 3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md)specs. ## Changelog* v0.9.10  * Adds CORS `Access-Control-Allow-Origin: *` headers to the OpenAPI `/openapi/spec*` endpoints. * v0.9.9  * Fixes type validation bug for `oneOf`.* v0.9.8  * Further extends complex `Schema` objects by extending how `allOf`, `oneOf`, `anyOf`, and `not` are handled.* v0.9.7  * Extends the ability to define complex `Schema` objects.* v0.9.6  * Fixes a bug where None values in examples would cause a runtime error.* v0.9.5  * Improves how the `.components.responses` are rendered.  * Fixes issues with the &quot;static&quot;/&quot;frozen&quot; predefined `Schema` objects.* v0.9.4   * Adds a `@doc.responses()` to give an easier way of documenting a route.* v0.9.3  * Adds a `@doc.security()` to override security requirements on a route.  * Removes entries with `false` values from the spec if `false` is the default value. This makes the specs smaller and    are more idiomatic.* v0.9.2  * Fixes an issue of rendering SecurityRequirement when there were no entries in the list.</longdescription>
</pkgmetadata>