<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># ebdtable2graph![Unittests status badge](https://github.com/Hochfrequenz/ebd_table_to_graph/workflows/Unittests/badge.svg)![Coverage status badge](https://github.com/Hochfrequenz/ebd_table_to_graph/workflows/Coverage/badge.svg)![Linting status badge](https://github.com/Hochfrequenz/ebd_table_to_graph/workflows/Linting/badge.svg)![Black status badge](https://github.com/Hochfrequenz/ebd_table_to_graph/workflows/Black/badge.svg)![PyPi Status Badge](https://img.shields.io/pypi/v/ebdtable2graph)This repository contains the source code of the Python package [`ebdtable2graph`](https://pypi.org/project/ebdtable2graph).## RationaleAssume, that you scraped the Entscheidungsbaumdiagramm tables by EDI@Energy from their somewhat &quot;digitized&quot; PDF/DOCX files.Also assume, that the result of your scraping is a [`ebdtable2graph.models.EbdTable`](src/ebdtable2graph/models/ebd_table.py).The package `ebdtable2graph` contains logic to convert your scraped data into a graph.This graph can then be exported e.g. as SVG and/or UML.## How to use `ebdtable2graph`?Install the package from pypi:```bashpip install ebdtable2graph```### Create an Instance of `EbdTable``EbdTable` contains the raw data by BDEW in a machine-readable format.Creating instances of `EbdTable` is out of scope for this package.Ask Hochfrequenz for support on this topic.In the following example we hard code the information.```pythonfrom ebdtable2graph.graph_conversion import convert_table_to_graphfrom ebdtable2graph.models import EbdCheckResult, EbdTable, EbdTableMetaData, EbdTableRow, EbdTableSubRow, EbdGraphebd_table: EbdTable  # this is the result of scraping the docx fileebd_table = EbdTable(  # this data shouldn't be handwritten    metadata=EbdTableMetaData(        ebd_code=&quot;E_0003&quot;,        chapter=&quot;7.39 AD: Bestellung der Aggregationsebene der Bilanzkreissummenzeitreihe auf Ebene der Regelzone&quot;,        sub_chapter=&quot;7.39.1 E_0003_Bestellung der Aggregationsebene RZ prüfen&quot;,        role=&quot;ÜNB&quot;,    ),    rows=[        EbdTableRow(            step_number=&quot;1&quot;,            description=&quot;Erfolgt der Eingang der Bestellung fristgerecht?&quot;,            sub_rows=[                EbdTableSubRow(                    check_result=EbdCheckResult(result=False, subsequent_step_number=None),                    result_code=&quot;A01&quot;,                    note=&quot;Fristüberschreitung&quot;,                ),                EbdTableSubRow(                    check_result=EbdCheckResult(result=True, subsequent_step_number=&quot;2&quot;),                    result_code=None,                    note=None,                ),            ],        ),        EbdTableRow(            step_number=&quot;2&quot;,            description=&quot;Erfolgt die Bestellung zum Monatsersten 00:00 Uhr?&quot;,            sub_rows=[                EbdTableSubRow(                    check_result=EbdCheckResult(result=False, subsequent_step_number=None),                    result_code=&quot;A02&quot;,                    note=&quot;Gewählter Zeitpunkt nicht zulässig&quot;,                ),                EbdTableSubRow(                    check_result=EbdCheckResult(result=True, subsequent_step_number=&quot;Ende&quot;),                    result_code=None,                    note=None,                ),            ],        ),    ],)assert isinstance(ebd_table, EbdTable)ebd_graph = convert_table_to_graph(ebd_table)assert isinstance(ebd_graph, EbdGraph)```#### Export as PlantUML```pythonfrom ebdtable2graph import convert_graph_to_plantumlplantuml_code = convert_graph_to_plantuml(ebd_graph)with open(&quot;e_0003.puml&quot;, &quot;w+&quot;, encoding=&quot;utf-8&quot;) as uml_file:    uml_file.write(plantuml_code)```The file `e_0003.puml` now looks like this:```puml@startuml...if (&lt;b&gt;1: &lt;/b&gt; Erfolgt der Eingang der Bestellung fristgerecht?) then (ja)else (nein)    :A01;    note left        Fristüberschreitung    endnote    kill;endifif (&lt;b&gt;2: &lt;/b&gt; Erfolgt die Bestellung zum Monatsersten 00:00 Uhr?) then (ja)    endelse (nein)    :A02;    note left        Gewählter Zeitpunkt nicht zulässig    endnote    kill;endif@enduml```#### Export as SVGYou can also export the graph as SVG```pythonfrom ebdtable2graph import convert_plantuml_to_svg_krokisvg_code = convert_plantuml_to_svg_kroki(plantuml_code)with open(&quot;e_0003.svg&quot;, &quot;w+&quot;, encoding=&quot;utf-8&quot;) as svg_file:    svg_file.write(svg_code)```![](mwe_e0003.svg)## How to use this Repository on Your Machine (for development)Please follow the instructions inour [Python Template Repository](https://github.com/Hochfrequenz/python_template_repository#how-to-use-this-repository-on-your-machine). And for further information, see the [Tox Repository](https://github.com/tox-dev/tox).## ContributeYou are very welcome to contribute to this template repository by opening a pull request against the main branch.## Related Tools and ContextThis repository is part of the [Hochfrequenz Libraries and Tools for a truly digitized market communication](https://github.com/Hochfrequenz/digital_market_communication/).</longdescription>
</pkgmetadata>