<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>A simple CAPTCHA image generator.This module provides a single class (Claptcha) that can create on the flyPIL Image instances, BytesIO objects or save image files containing a simpleCAPTCHA strings. Its build on top of Pillow package.It is required that user provides a TTF file with font to be used in imagesand either a string with CAPTCHA text or a callable object returning stringsto be used in images.Examples:&gt;&gt;&gt; from claptcha import Claptcha&gt;&gt;&gt;&gt;&gt;&gt; # Initialize Claptcha object&gt;&gt;&gt; c = Claptcha(&quot;Text&quot;, &quot;FreeMono.ttf&quot;)&gt;&gt;&gt;&gt;&gt;&gt; # Create a PIL Image object, return it and provided text&gt;&gt;&gt; c.image('Text', &lt;PIL.Image.Image image mode=RGB size=200x80 at 0xB741406C&gt;)&gt;&gt;&gt;&gt;&gt;&gt; # Create a BytesIO object, return it and provided text&gt;&gt;&gt; c.bytes('Text', &lt;_io.BytesIO object at 0xb71e87dc&gt;)&gt;&gt;&gt;&gt;&gt;&gt; # Save image in 'claptcha.png' file, return its path and provided text&gt;&gt;&gt; c.write('claptcha.png')('Text', 'test.png')&gt;&gt;&gt;&gt;&gt;&gt; def captchaStr():...     return &quot;TextFromFunc&quot;...&gt;&gt;&gt; # Redefine c: change its size to 100x30, use bicubic resampling filter&gt;&gt;&gt; # and add white noise&gt;&gt;&gt; from PIL import Image&gt;&gt;&gt; c = Claptcha(captchaStr, &quot;FreeMono.ttf&quot;, (100,30),...              resampling=Image.BICUBIC, noise=0.3)&gt;&gt;&gt; c.image('TextFromFunc', &lt;PIL.Image.Image image mode=RGB size=100x30 at 0xB73EE66C&gt;)</longdescription>
</pkgmetadata>