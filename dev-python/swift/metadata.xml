<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>===============OpenStack Swift===============.. image:: https://governance.openstack.org/tc/badges/swift.svg    :target: https://governance.openstack.org/tc/reference/tags/index.html.. Change things from this point onOpenStack Swift is a distributed object storage system designed to scalefrom a single machine to thousands of servers. Swift is optimized formulti-tenancy and high concurrency. Swift is ideal for backups, web and mobilecontent, and any other unstructured data that can grow without bound.Swift provides a simple, REST-based API fully documented athttps://docs.openstack.org/swift/latest/.Swift was originally developed as the basis for Rackspace's Cloud Filesand was open-sourced in 2010 as part of the OpenStack project. It hassince grown to include contributions from many companies and has spawneda thriving ecosystem of 3rd party tools. Swift's contributors are listedin the AUTHORS file.Docs----To build documentation run::    pip install -r requirements.txt -r doc/requirements.txt    sphinx-build -W -b html doc/source doc/build/htmland then browse to doc/build/html/index.html. These docs are auto-generatedafter every commit and available online athttps://docs.openstack.org/swift/latest/.For Developers--------------Getting Started~~~~~~~~~~~~~~~Swift is part of OpenStack and follows the code contribution, review, andtesting processes common to all OpenStack projects.If you would like to start contributing, check out these`notes &lt;CONTRIBUTING.rst&gt;`__ to help you get started.The best place to get started is the`&quot;SAIO - Swift All In One&quot; &lt;https://docs.openstack.org/swift/latest/development_saio.html&gt;`__.This document will walk you through setting up a development cluster ofSwift in a VM. The SAIO environment is ideal for running small-scaletests against Swift and trying out new features and bug fixes.Tests~~~~~There are three types of tests included in Swift's source tree.#. Unit tests#. Functional tests#. Probe testsUnit tests check that small sections of the code behave properly. For example,a unit test may test a single function to ensure that various input gives theexpected output. This validates that the code is correct and regressions arenot introduced.Functional tests check that the client API is working as expected. These canbe run against any endpoint claiming to support the Swift API (although sometests require multiple accounts with different privilege levels). These are&quot;black box&quot; tests that ensure that client apps written against Swift willcontinue to work.Probe tests are &quot;white box&quot; tests that validate the internal workings of aSwift cluster. They are written to work against the`&quot;SAIO - Swift All In One&quot; &lt;https://docs.openstack.org/swift/latest/development_saio.html&gt;`__dev environment. For example, a probe test may create an object, delete onereplica, and ensure that the background consistency processes find and correctthe error.You can run unit tests with ``.unittests``, functional tests with``.functests``, and probe tests with ``.probetests``. There is anadditional ``.alltests`` script that wraps the other three.To fully run the tests, the target environment must use a filesystem thatsupports large xattrs. XFS is strongly recommended. For unit tests and in-process functional tests, either mount ``/tmp`` with XFS or provide anotherXFS filesystem via the ``TMPDIR`` environment variable. Without this setting,tests should still pass, but a very large number will be skipped.Code Organization~~~~~~~~~~~~~~~~~-  bin/: Executable scripts that are the processes run by the deployer-  doc/: Documentation-  etc/: Sample config files-  examples/: Config snippets used in the docs-  swift/: Core code   -  account/: account server   -  cli/: code that backs some of the CLI tools in bin/   -  common/: code shared by different modules      -  middleware/: &quot;standard&quot;, officially-supported middleware      -  ring/: code implementing Swift's ring   -  container/: container server   -  locale/: internationalization (translation) data   -  obj/: object server   -  proxy/: proxy server-  test/: Unit, functional, and probe testsData Flow~~~~~~~~~Swift is a WSGI application and uses eventlet's WSGI server. After theprocesses are running, the entry point for new requests is the``Application`` class in ``swift/proxy/server.py``. From there, acontroller is chosen, and the request is processed. The proxy may chooseto forward the request to a back-end server. For example, the entrypoint for requests to the object server is the ``ObjectController``class in ``swift/obj/server.py``.For Deployers-------------Deployer docs are also available athttps://docs.openstack.org/swift/latest/. A good starting point is athttps://docs.openstack.org/swift/latest/deployment_guide.htmlThere is an `ops runbook &lt;https://docs.openstack.org/swift/latest/ops_runbook/index.html&gt;`__that gives information about how to diagnose and troubleshoot common issueswhen running a Swift cluster.You can run functional tests against a Swift cluster with``.functests``. These functional tests require ``/etc/swift/test.conf``to run. A sample config file can be found in this source tree in``test/sample.conf``.For Client Apps---------------For client applications, official Python language bindings are providedat https://github.com/openstack/python-swiftclient.Complete API documentation athttps://docs.openstack.org/api-ref/object-store/There is a large ecosystem of applications and libraries that support andwork with OpenStack Swift. Several are listed on the`associated projects &lt;https://docs.openstack.org/swift/latest/associated_projects.html&gt;`__page.--------------For more information come hang out in #openstack-swift on OFTC.Thanks,The Swift Development Team</longdescription>
</pkgmetadata>