<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>[![mplfinance Checks](https://github.com/matplotlib/mplfinance/actions/workflows/mplfinance_checks.yml/badge.svg?branch=master)](https://github.com/matplotlib/mplfinance/actions/workflows/mplfinance_checks.yml)# mplfinancematplotlib utilities for the visualization, and visual analysis, of financial data##  Installation```bashpip install --upgrade mplfinance```- mplfinance requires [matplotlib](https://pypi.org/project/matplotlib/) and [pandas](https://pypi.org/project/pandas/)---## &lt;a name=&quot;announcements&quot;&gt;&lt;/a&gt;**&amp;roarr; [Latest Release Information](https://github.com/matplotlib/mplfinance/releases) &amp;loarr;**#### &lt;a name=&quot;announcements&quot;&gt;&lt;/a&gt; &amp;roarr; **[Older Release Information](https://github.com/matplotlib/mplfinance/blob/master/RELEASE_NOTES.md)**---## &lt;a name=&quot;tutorials&quot;&gt;&lt;/a&gt;Contents and Tutorials  - **[The New API](https://github.com/matplotlib/mplfinance#newapi)**  - **[Tutorials](https://github.com/matplotlib/mplfinance#tutorials)**    - **[Basic Usage](https://github.com/matplotlib/mplfinance#usage)**    - **[Customizing the Appearance of Plots](https://github.com/matplotlib/mplfinance/blob/master/markdown/customization_and_styles.md)**     - **[Adding Your Own Technical Studies to Plots](https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb)**    - **[Subplots: Multiple Plots on a Single Figure](https://github.com/matplotlib/mplfinance/blob/master/markdown/subplots.md)**    - **[Fill Between: Filling Plots with Color](https://github.com/matplotlib/mplfinance/blob/master/examples/fill_between.ipynb)**    - **[Price-Movement Plots (Renko, P&amp;F, etc)](https://github.com/matplotlib/mplfinance/blob/master/examples/price-movement_plots.ipynb)**    - **[Trends, Support, Resistance, and Trading Lines](https://github.com/matplotlib/mplfinance/blob/master/examples/using_lines.ipynb)**    - **[Coloring Individual Candlesticks](https://github.com/matplotlib/mplfinance/blob/master/examples/marketcolor_overrides.ipynb)** (New: December 2021)    - **[Saving the Plot to a File](https://github.com/matplotlib/mplfinance/blob/master/examples/savefig.ipynb)**    - **[Animation/Updating your plots in realtime](https://github.com/matplotlib/mplfinance/blob/master/markdown/animation.md)**   - **&amp;roarr; [Latest Release Info](https://github.com/matplotlib/mplfinance/releases) &amp;loarr;**  - **[Older Release Info](https://github.com/matplotlib/mplfinance/blob/master/RELEASE_NOTES.md)**  - **[Some Background History About This Package](https://github.com/matplotlib/mplfinance#history)**  - **[Old API Availability](https://github.com/matplotlib/mplfinance#oldapi)**---## &lt;a name=&quot;newapi&quot;&gt;&lt;/a&gt;The New APIThis repository, `matplotlib/mplfinance`, contains a new **matplotlib finance** API that makes it easier to create financial plots.  It interfaces nicely with **Pandas** DataFrames.  *More importantly, **the new API automatically does the extra matplotlib work that the user previously had to do &quot;manually&quot; with the old API.***   (The old API is still available within this package; see below).The conventional way to import the new API is as follows:```python    import mplfinance as mpf```The most common usage is then to call```python    mpf.plot(data)```where `data` is a `Pandas DataFrame` object containing Open, High, Low and Close data, with a Pandas `DatetimeIndex`.Details on how to call the new API can be found below under **[Basic Usage](https://github.com/matplotlib/mplfinance#usage)**, as well as in the jupyter notebooks in the **[examples](https://github.com/matplotlib/mplfinance/blob/master/examples/)** folder.I am very interested to hear from you regarding what you think of the new `mplfinance`, plus any suggestions you may have for improvement.  You can reach me at **dgoldfarb.github@gmail.com**  or, if you prefer, provide feedback or a ask question on our **[issues page.](https://github.com/matplotlib/mplfinance/issues/new/choose)**---## &lt;a name=&quot;usage&quot;&gt;&lt;/a&gt;Basic UsageStart with a Pandas DataFrame containing OHLC data.  For example,```pythonimport pandas as pddaily = pd.read_csv('examples/data/SP500_NOV2019_Hist.csv',index_col=0,parse_dates=True)daily.index.name = 'Date'daily.shapedaily.head(3)daily.tail(3)```    (20, 5)&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;Open&lt;/th&gt;      &lt;th&gt;High&lt;/th&gt;      &lt;th&gt;Low&lt;/th&gt;      &lt;th&gt;Close&lt;/th&gt;      &lt;th&gt;Volume&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;Date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-01&lt;/th&gt;      &lt;td&gt;3050.72&lt;/td&gt;      &lt;td&gt;3066.95&lt;/td&gt;      &lt;td&gt;3050.72&lt;/td&gt;      &lt;td&gt;3066.91&lt;/td&gt;      &lt;td&gt;510301237&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-04&lt;/th&gt;      &lt;td&gt;3078.96&lt;/td&gt;      &lt;td&gt;3085.20&lt;/td&gt;      &lt;td&gt;3074.87&lt;/td&gt;      &lt;td&gt;3078.27&lt;/td&gt;      &lt;td&gt;524848878&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-05&lt;/th&gt;      &lt;td&gt;3080.80&lt;/td&gt;      &lt;td&gt;3083.95&lt;/td&gt;      &lt;td&gt;3072.15&lt;/td&gt;      &lt;td&gt;3074.62&lt;/td&gt;      &lt;td&gt;585634570&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;...&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;Open&lt;/th&gt;      &lt;th&gt;High&lt;/th&gt;      &lt;th&gt;Low&lt;/th&gt;      &lt;th&gt;Close&lt;/th&gt;      &lt;th&gt;Volume&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;Date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-26&lt;/th&gt;      &lt;td&gt;3134.85&lt;/td&gt;      &lt;td&gt;3142.69&lt;/td&gt;      &lt;td&gt;3131.00&lt;/td&gt;      &lt;td&gt;3140.52&lt;/td&gt;      &lt;td&gt;986041660&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-27&lt;/th&gt;      &lt;td&gt;3145.49&lt;/td&gt;      &lt;td&gt;3154.26&lt;/td&gt;      &lt;td&gt;3143.41&lt;/td&gt;      &lt;td&gt;3153.63&lt;/td&gt;      &lt;td&gt;421853938&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-29&lt;/th&gt;      &lt;td&gt;3147.18&lt;/td&gt;      &lt;td&gt;3150.30&lt;/td&gt;      &lt;td&gt;3139.34&lt;/td&gt;      &lt;td&gt;3140.98&lt;/td&gt;      &lt;td&gt;286602291&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;After importing mplfinance, plotting OHLC data is as simple as calling `mpf.plot()` on the dataframe```pythonimport mplfinance as mpfmpf.plot(daily)```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_4_1.png)&lt;br&gt;The default plot type, as you can see above, is `'ohlc'`.  Other plot types can be specified with the keyword argument `type`, for example, `type='candle'`, `type='line'`, `type='renko'`, or `type='pnf'````pythonmpf.plot(daily,type='candle')```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_6_1.png)```pythonmpf.plot(daily,type='line')```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_7_1.png)```pythonyear = pd.read_csv('examples/data/SPY_20110701_20120630_Bollinger.csv',index_col=0,parse_dates=True)year.index.name = 'Date'mpf.plot(year,type='renko')```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_8_1.png)```pythonmpf.plot(year,type='pnf')```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_5_1.png)---&lt;br&gt;We can also plot moving averages with the `mav` keyword- use a scalar for a single moving average - use a tuple or list of integers for multiple moving averages```pythonmpf.plot(daily,type='ohlc',mav=4)```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_9_1.png)```pythonmpf.plot(daily,type='candle',mav=(3,6,9))```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_10_1.png)---We can also display `Volume````pythonmpf.plot(daily,type='candle',mav=(3,6,9),volume=True)```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_12_1.png)Notice, in the above chart, there are no gaps along the x-coordinate, even though there are days on which there was no trading.  ***Non-trading days are simply not shown*** (since there are no prices for those days).- However, sometimes people like to see these gaps, so that they can tell, with a quick glance, where the weekends and holidays fall.  - Non-trading days can be displayed with the **`show_nontrading`** keyword.  - Note that for these purposes **non-trading** intervals are those that ***are not represented in the data at all***.  (There are simply no rows for those dates or datetimes).  This is because, when data is retrieved from an exchange or other market data source, that data typically will *not* include rows for non-trading days (weekends and holidays for example).  Thus ...  - **`show_nontrading=True`** will display all dates (all time intervals) between the first time stamp and the last time stamp in the data (regardless of whether rows exist for those dates or datetimes).  - **`show_nontrading=False`** (the default value) will show ***only*** dates (or datetimes) that have actual rows in the data.  (This means that if there are rows in your DataFrame that exist but contain only **`NaN`** values, these rows *will still appear* on the plot even if **`show_nontrading=False`**)- For example, in the chart below, you can easily see weekends, as well as a gap at Thursday, November 28th for the U.S. Thanksgiving holiday.```pythonmpf.plot(daily,type='candle',mav=(3,6,9),volume=True,show_nontrading=True)```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_14_1.png)---We can also plot intraday data:```pythonintraday = pd.read_csv('examples/data/SP500_NOV2019_IDay.csv',index_col=0,parse_dates=True)intraday = intraday.drop('Volume',axis=1) # Volume is zero anyway for this intraday data setintraday.index.name = 'Date'intraday.shapeintraday.head(3)intraday.tail(3)```    (1563, 4)&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;Open&lt;/th&gt;      &lt;th&gt;Close&lt;/th&gt;      &lt;th&gt;High&lt;/th&gt;      &lt;th&gt;Low&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;Date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-05 09:30:00&lt;/th&gt;      &lt;td&gt;3080.80&lt;/td&gt;      &lt;td&gt;3080.49&lt;/td&gt;      &lt;td&gt;3081.47&lt;/td&gt;      &lt;td&gt;3080.30&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-05 09:31:00&lt;/th&gt;      &lt;td&gt;3080.33&lt;/td&gt;      &lt;td&gt;3079.36&lt;/td&gt;      &lt;td&gt;3080.33&lt;/td&gt;      &lt;td&gt;3079.15&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-05 09:32:00&lt;/th&gt;      &lt;td&gt;3079.43&lt;/td&gt;      &lt;td&gt;3079.68&lt;/td&gt;      &lt;td&gt;3080.46&lt;/td&gt;      &lt;td&gt;3079.43&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;...&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;Open&lt;/th&gt;      &lt;th&gt;Close&lt;/th&gt;      &lt;th&gt;High&lt;/th&gt;      &lt;th&gt;Low&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;Date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-08 15:57:00&lt;/th&gt;      &lt;td&gt;3090.73&lt;/td&gt;      &lt;td&gt;3090.70&lt;/td&gt;      &lt;td&gt;3091.02&lt;/td&gt;      &lt;td&gt;3090.52&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-08 15:58:00&lt;/th&gt;      &lt;td&gt;3090.73&lt;/td&gt;      &lt;td&gt;3091.04&lt;/td&gt;      &lt;td&gt;3091.13&lt;/td&gt;      &lt;td&gt;3090.58&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2019-11-08 15:59:00&lt;/th&gt;      &lt;td&gt;3091.16&lt;/td&gt;      &lt;td&gt;3092.91&lt;/td&gt;      &lt;td&gt;3092.91&lt;/td&gt;      &lt;td&gt;3090.96&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;The above dataframe contains Open,High,Low,Close data at 1 minute intervals for the S&amp;P 500 stock index for November 5, 6, 7 and 8, 2019.  Let's look at the last hour of trading on November 6th, with a 7 minute and 12 minute moving average.```pythoniday = intraday.loc['2019-11-06 15:00':'2019-11-06 16:00',:]mpf.plot(iday,type='candle',mav=(7,12))```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_18_1.png)  The &quot;time-interpretation&quot; of the `mav` integers depends on the frequency of the data, because the mav integers are the *number of data points* used in the Moving Average (not the number of days or minutes, etc).  Notice above that for intraday data the x-axis automatically displays TIME *instead of* date.  Below we see that if the intraday data spans into two (or more) trading days the x-axis automatically displays *BOTH* TIME and DATE```pythoniday = intraday.loc['2019-11-05':'2019-11-06',:]mpf.plot(iday,type='candle')```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_20_1.png)---In the plot below, we see what an intraday plot looks like when we **display non-trading time periods** with **`show_nontrading=True`** for intraday data spanning into two or more days.```pythonmpf.plot(iday,type='candle',show_nontrading=True)```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_22_1.png)---Below: 4 days of intraday data with `show_nontrading=True````pythonmpf.plot(intraday,type='ohlc',show_nontrading=True)```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_24_1.png)---Below: the same 4 days of intraday data with `show_nontrading` defaulted to `False`.```pythonmpf.plot(intraday,type='line') ```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_26_1.png)---Below: Daily data spanning across a year boundary automatically adds the *YEAR* to the DATE format```pythondf = pd.read_csv('examples/data/yahoofinance-SPY-20080101-20180101.csv',index_col=0,parse_dates=True)df.shapedf.head(3)df.tail(3)```    (2519, 6)&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;Open&lt;/th&gt;      &lt;th&gt;High&lt;/th&gt;      &lt;th&gt;Low&lt;/th&gt;      &lt;th&gt;Close&lt;/th&gt;      &lt;th&gt;Adj Close&lt;/th&gt;      &lt;th&gt;Volume&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;Date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2007-12-31&lt;/th&gt;      &lt;td&gt;147.100006&lt;/td&gt;      &lt;td&gt;147.610001&lt;/td&gt;      &lt;td&gt;146.059998&lt;/td&gt;      &lt;td&gt;146.210007&lt;/td&gt;      &lt;td&gt;118.624741&lt;/td&gt;      &lt;td&gt;108126800&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2008-01-02&lt;/th&gt;      &lt;td&gt;146.529999&lt;/td&gt;      &lt;td&gt;146.990005&lt;/td&gt;      &lt;td&gt;143.880005&lt;/td&gt;      &lt;td&gt;144.929993&lt;/td&gt;      &lt;td&gt;117.586205&lt;/td&gt;      &lt;td&gt;204935600&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2008-01-03&lt;/th&gt;      &lt;td&gt;144.910004&lt;/td&gt;      &lt;td&gt;145.490005&lt;/td&gt;      &lt;td&gt;144.070007&lt;/td&gt;      &lt;td&gt;144.860001&lt;/td&gt;      &lt;td&gt;117.529449&lt;/td&gt;      &lt;td&gt;125133300&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;...&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;  &lt;thead&gt;    &lt;tr style=&quot;text-align: right;&quot;&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;Open&lt;/th&gt;      &lt;th&gt;High&lt;/th&gt;      &lt;th&gt;Low&lt;/th&gt;      &lt;th&gt;Close&lt;/th&gt;      &lt;th&gt;Adj Close&lt;/th&gt;      &lt;th&gt;Volume&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;Date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2017-12-27&lt;/th&gt;      &lt;td&gt;267.380005&lt;/td&gt;      &lt;td&gt;267.730011&lt;/td&gt;      &lt;td&gt;267.010010&lt;/td&gt;      &lt;td&gt;267.320007&lt;/td&gt;      &lt;td&gt;267.320007&lt;/td&gt;      &lt;td&gt;57751000&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-12-28&lt;/th&gt;      &lt;td&gt;267.890015&lt;/td&gt;      &lt;td&gt;267.920013&lt;/td&gt;      &lt;td&gt;267.450012&lt;/td&gt;      &lt;td&gt;267.869995&lt;/td&gt;      &lt;td&gt;267.869995&lt;/td&gt;      &lt;td&gt;45116100&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-12-29&lt;/th&gt;      &lt;td&gt;268.529999&lt;/td&gt;      &lt;td&gt;268.549988&lt;/td&gt;      &lt;td&gt;266.640015&lt;/td&gt;      &lt;td&gt;266.859985&lt;/td&gt;      &lt;td&gt;266.859985&lt;/td&gt;      &lt;td&gt;96007400&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;```pythonmpf.plot(df[700:850],type='bars',volume=True,mav=(20,40))```![png](https://raw.githubusercontent.com/matplotlib/mplfinance/master/readme_files/readme_29_1.png)For more examples of using mplfinance, please see the jupyter notebooks in the **[`examples`](https://github.com/matplotlib/mplfinance/blob/master/examples/)** directory.---## &lt;a name=&quot;history&quot;&gt;&lt;/a&gt;Some HistoryMy name is Daniel Goldfarb.  In November 2019, I became the maintainer of `matplotlib/mpl-finance`.  That module is being deprecated in favor of the current `matplotlib/mplfinance`.  The old `mpl-finance` consisted of code extracted from the deprecated `matplotlib.finance` module along with a few examples of usage.  It has been mostly un-maintained for the past three years.  It is my intention to archive the `matplotlib/mpl-finance` repository soon, and direct everyone to `matplotlib/mplfinance`.  The main reason for the rename is to avoid confusion with the hyphen and the underscore: As it was, `mpl-finance` was *installed with the hyphen, but imported with an underscore `mpl_finance`.*  Going forward it will be a simple matter of both installing and importing `mplfinance`.---## &lt;a name=&quot;oldapi&quot;&gt;&lt;/a&gt;Old API availability**With this new ` mplfinance ` package installed, in addition to the new API, users can still access the old API**.&lt;br&gt; The old API may be removed someday, but for the foreseeable future we will keep it ... at least until we are very confident that users of the old API can accomplish the same things with the new API.  To access the old API with the new ` mplfinance ` package installed, change the old import statements**from:**```python    from mpl_finance import &lt;method&gt;```**to:**```python    from mplfinance.original_flavor import &lt;method&gt;```where `&lt;method&gt;` indicates the method you want to import, for example:```python    from mplfinance.original_flavor import candlestick_ohlc```</longdescription>
</pkgmetadata>