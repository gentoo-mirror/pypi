<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Django Translations[![build](https://travis-ci.com/bbmokhtari/django-translations.svg?branch=master)](https://travis-ci.com/bbmokhtari/django-translations)[![python](https://img.shields.io/badge/python-%3E%3D3.6%2C%20%3C4-0073b7)](https://pypi.org/project/django-translations/)[![django](https://img.shields.io/badge/django-%3E%3D2.2%2C%20%3C4-0C4B33)](https://pypi.org/project/django-translations/)Django model translation for perfectionists with deadlines.## GoalThere are two types of content, each of which has its own challenges for translation:- Static content: This is the content which is defined in the code.  _e.g. &quot;Please enter a valid email address.&quot;_  Django already provides a  [solution](https://docs.djangoproject.com/en/2.2/topics/i18n/translation/)  for translating static content.- Dynamic content: This is the content which is stored in the database.  _(We can't know it beforehand!)_  Django Translations provides a solution  for translating dynamic content.## CompatibilityCurrently, this project is incompatible with PostgreSQL.## Requirements- Python (\&gt;=3.6, \&lt;4)- Django (\&gt;=2.2, \&lt;4)## Installation1.  Install Django Translations using pip:        ``` bash    $ pip install django-translations    ```2.  Add `translations` to the `INSTALLED_APPS` in the settings of your    project:        ``` python    INSTALLED_APPS += [        'translations',    ]    ```3.  Run `migrate`:        ``` bash    $ python manage.py migrate    ```4.  Configure Django internationalization and localization settings:        ``` python    USE_I18N = True          # use internationalization    USE_L10N = True          # use localization        MIDDLEWARE += [          # locale middleware        'django.middleware.locale.LocaleMiddleware',    ]        LANGUAGE_CODE = 'en-us'  # default (fallback) language    LANGUAGES = (            # supported languages        ('en', 'English'),        ('en-gb', 'English (Great Britain)'),        ('de', 'German'),        ('tr', 'Turkish'),    )    ```        Please note that these settings are for Django itself.## Basic Usage### ModelInherit `Translatable` in any model you want translated:``` pythonfrom translations.models import Translatableclass Continent(Translatable):    code = models.Charfield(...)    name = models.Charfield(...)    denonym = models.Charfield(...)    class TranslatableMeta:        fields = ['name', 'denonym']```No migrations needed afterwards.### AdminUse the admin extensions:``` pythonfrom translations.admin import TranslatableAdmin, TranslationInlineclass ContinentAdmin(TranslatableAdmin):    inlines = [TranslationInline,]```This provides specialized translation inlines for the model.![image](https://raw.githubusercontent.com/bbmokhtari/django-translations/master/docs/_static/admin.png)## QuerySetUse the queryset extensions:``` python&gt;&gt;&gt; from sample.models import Continent&gt;&gt;&gt; continents = Continent.objects.all(... ).distinct(           # familiar distinct... ).probe(['en', 'de']  # probe (filter, exclude, etc.) in English and German... ).filter(             # familiar filtering...     countries__cities__name__startswith='K√∂ln'... ).translate('de'      # translate the results in German... ).translate_related(  # translate these relations as well...     'countries', 'countries__cities',... )&gt;&gt;&gt; print(continents)&lt;TranslatableQuerySet [    &lt;Continent: Europa&gt;,]&gt;&gt;&gt;&gt; print(continents[0].countries.all())&lt;TranslatableQuerySet [    &lt;Country: Deutschland&gt;,]&gt;&gt;&gt;&gt; print(continents[0].countries.all()[0].cities.all())&lt;TranslatableQuerySet [    &lt;City: K√∂ln&gt;,]&gt;```This provides a powerful yet familiar interface to work with the querysets.## ContextUse the translation context:``` python&gt;&gt;&gt; from translations.context import Context&gt;&gt;&gt; from sample.models import Continent&gt;&gt;&gt; continents = Continent.objects.all()&gt;&gt;&gt; relations = ('countries', 'countries__cities',)&gt;&gt;&gt; with Context(continents, *relations) as context:...     context.read('de')    # read the translations onto the context...     print(':')            # use the objects like before...     print(continents)...     print(continents[0].countries.all())...     print(continents[0].countries.all()[0].cities.all())... ...     continents[0].countries.all()[0].name = 'Change the name'...     context.update('de')  # update the translations from the context... ...     context.delete('de')  # delete the translations of the context... ...     context.reset()       # reset the translations of the context...     print(':')            # use the objects like before...     print(continents)...     print(continents[0].countries.all())...     print(continents[0].countries.all()[0].cities.all()):&lt;TranslatableQuerySet [    &lt;Continent: Asien&gt;,    &lt;Continent: Europa&gt;,]&gt;&lt;TranslatableQuerySet [    &lt;Country: Deutschland&gt;,]&gt;&lt;TranslatableQuerySet [    &lt;City: K√∂ln&gt;,]&gt;:&lt;TranslatableQuerySet [    &lt;Continent: Asia&gt;,    &lt;Continent: Europe&gt;,]&gt;&lt;TranslatableQuerySet [    &lt;Country: Germany&gt;,]&gt;&lt;TranslatableQuerySet [    &lt;City: Cologne&gt;,]&gt;```This can CRUD the translations of any objects (instance, queryset, list) and their relations.## DocumentationFor more interesting capabilities browse through the[documentation](http://bbmokhtari.github.io/django-translations).## Support the projectTo support the project you can:- ‚≠êÔ∏è: [Star](http://github.com/bbmokhtari/django-translations/) it on GitHub.- üíª: [Contribute](https://bbmokhtari.github.io/django-translations/contribution.html) to the code base.- ‚òïÔ∏è: [Buy](https://bbmokhtari.github.io/django-translations/donation.html) the maintainers coffee.</longdescription>
</pkgmetadata>