<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>Cerami======Cerami is a python library that hopefully provides some sanity to boto3's DynamoDB client. Its intended use is as a library to help define table data through the creation of models and create sane, readable, and reproducable DynamoDB requests.Please read the `Full Documentation`_.. _Full Documentation: https://cerami.readthedocs.io/en/latest/ Quickstart==========Install-------.. code-block::    pip install ceramiI have boto3 and aws credentials set up---------------------------------------.. code-block:: python    # create the db singleton    import boto3    from cerami import Cerami    dynamodb = boto3.client('dynamodb')    db = Cerami(dynamodb).. code-block:: python    # create classes that inherit from the singleton    from cerami.datatype import String, Set, Datetime    from cerami.decorators import primary_key    @primary_key('name', 'artist')    class Album(db.Model):__tablename__ = &quot;Albums&quot;name = String()artist = String()songs = Set(String())released_date = Datetime()    # Some Query Examples    Album.scan \.filter(Album.released_date.begins_with(&quot;1996&quot;)) \.execute()    Album.query \.key(Album.name == &quot;The Black Album&quot;) \.execute()    Album.get \.key(Album.name == &quot;Reasonable Doubt&quot;) \.key(Album.artist == &quot;Jay-Z&quot;) \.execute()I have never used boto3 or dynamodb before------------------------------------------You can run DynamoDB locally!You need to install the aws2 cli and have dynamo db running locally. Dynamodb requires java to run locally as well so good luck if you dont have it. Try these steps first and see how it goes.Download DynamoDB Locally~~~~~~~~~~~~~~~~~~~~~~~~~1. `Download DynamoDB Locally`_2. Unzip/Untar the content3. Move to somewhere you wont lose it... _Download DynamoDB Locally: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.htmlDownload the AWS2 CLI~~~~~~~~~~~~~~~~~~~~~1. `Download the AWS2 CLI`_2. Follow the install instructions.. _Download the AWS2 CLI`: https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.htmlConfigure the AWS2 CLI~~~~~~~~~~~~~~~~~~~~~~In order to run DynamoDB locally, you need to configure your aws as such:.. code-block::    aws2 configure.. code-block::    # These are the actual values to use with the local dynamodb instance    AWS Access Key ID: &quot;fakeMyKeyId&quot;    AWS Secret Access Key: &quot;fakeSecretAccessKey&quot;    us-west-1Starting DynamoDB Locally~~~~~~~~~~~~~~~~~~~~~~~~~.. code-block::    java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDbCreating a DynamoDB Table~~~~~~~~~~~~~~~~~~~~~~~~~.. code-block:: python    import boto3    dynamodb = boto3.client('dynamodb', endpoint_url=&quot;http://localhost:8000&quot;)    dynamodb.create_table(        TableName='Albums',        KeySchema=[            {                'AttributeName': 'name',                'KeyType': 'HASH'  #Partition key            },            {                'AttributeName': 'artist',                'KeyType': 'Range', # Sort key            },        ],        AttributeDefinitions=[            {                'AttributeName': 'name',                'AttributeType': 'S'            },            {                'AttributeName': 'artist',                'AttributeType': 'S'            },        ],        ProvisionedThroughput={            'ReadCapacityUnits': 10,            'WriteCapacityUnits': 10        }    )Using Cerami~~~~~~~~~~~~.. code-block:: python    # Create the db singleton    import boto3    from cerami import Cerami    dynamodb = boto3.client('dynamodb', endpoint_url=&quot;http://localhost:8000&quot;)    db = Cerami(dynamodb).. code-block:: python    # create classes that inherit from the singleton    from cerami.datatype import String, Set, Datetime    from cerami.decorators import primary_key    @primary_key('name', 'artist')    class Album(db.Model):__tablename__ = &quot;Albums&quot;name = String()artist = String()songs = Set(String())released_date = Datetime()</longdescription>
</pkgmetadata>