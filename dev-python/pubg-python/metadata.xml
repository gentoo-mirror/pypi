<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># pubg-python![pypi](https://img.shields.io/pypi/pyversions/pubg-python)![wheel](https://img.shields.io/pypi/wheel/pubg-python)A python wrapper for the PUBG Developer API[PUBG Developer API Official Documentation](https://documentation.playbattlegrounds.com/en/introduction.html)## InstallationTo install the wrapper, simply use `pip````pip install pubg-python```or `pipenv````pipenv install pubg-python```## Usage### Specifying a shardThe PUBG API shards data by platform and region, and therefore requires a shard to be specified in the URL for most requests.```pythonfrom pubg_python import PUBG, Shardapi = PUBG('&lt;api-key&gt;', Shard.PC_NA)```A list of shards can be found [here](https://documentation.playbattlegrounds.com/en/making-requests.html#regions) and the wrapper constants [here](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)## Samples* Samples  * [Official docs](https://documentation.playbattlegrounds.com/en/samples.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)### A sample of matches can be retrieved as a starting point```pythonsample = api.samples().get()for match in sample.matches:    print(match.id)```### Samples can also be filtered by a creation date```pythonsample = api.samples().filter(created_at_start='2018-01-01T00:00:00Z').get()for match in sample.matches:    print(match.id)```## Players* Players  * [Official docs](https://documentation.playbattlegrounds.com/en/players.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)### Retrieving a single player```pythonplayer = api.players().get('account.3654e255b77b409e87b10dcb086ab00d')for match in player.matches:    match_data = api.matches().get(match.id)```### Retrieving a list of players filtering by names```pythonplayers = api.players().filter(player_names=['Name1', 'Name2'])for player in players:    player_id = player.id```### Retrieving a list of players filtering by ids```pythonplayers = api.players().filter(player_ids=['account.3654e255b77b409e87b10dcb086ab00d'])for player in players:    player_name = player.name```## Matches* Matches  * [Official docs](https://documentation.playbattlegrounds.com/en/matches.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)### Retrieving a single match```pythonmatch = api.matches().get('276f5bcb-a831-4e8c-a610-d2073692069e')```### Retrieving a list of matches filtering by ids**Still unavailable in the API**```pythonmatch_ids = [    '276f5bcb-a831-4e8c-a610-d2073692069e',    'fasf9082-21de-dkle-13ke-qlamd13nab3a',]matches = api.matches().filter(match_ids=match_ids)for match in matches:    print(match)```## Telemetry* Telemetry events  * [Official docs](https://documentation.playbattlegrounds.com/en/telemetry-events.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/telemetry/events.py)* Event objects  * [Official docs](https://documentation.playbattlegrounds.com/en/telemetry-objects.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/telemetry/objects.py)### Processing a match Telemetry data```pythonmatch = api.matches().get('276f5bcb-a831-4e8c-a610-d2073692069e')asset = match.assets[0]telemetry = api.telemetry(asset.url)print(len(telemetry.events))&gt;&gt; 16871```### Filtering specific events in a telemetry objectSometimes you're interested in a set of very specific events, so there is a helper function to filter those for you:```pythonmatch = api.matches().get('276f5bcb-a831-4e8c-a610-d2073692069e')asset = match.assets[0]telemetry = api.telemetry(asset.url)player_kill_events = telemetry.events_from_type('LogPlayerKill')player_position_events = telemetry.events_from_type('LogPlayerPosition')```### Loading a local Telemetry fileIf you want to load a previously downloaded telemetry file, there is a helpermethod to create a Telemetry object from it:```pythonfrom pubg_python import Telemetrytelemetry = Telemetry.from_json('telemetry.json', shard='pc')````shard` defaults to `pc` but you need to specify if you're loading a `xbox` telemetry file.## Tournaments* Tournaments  * [Official docs](https://documentation.playbattlegrounds.com/en/tournaments-endpoint.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)### Retrieving a single tournament```pythontournament = api.tournaments().get('na-ppc')```### Retrieving a list of tournaments```pythontournaments = api.tournaments()for tournament in tournaments:    print(tournament)```## Seasons* Seasons  * [Official docs](https://documentation.pubg.com/en/seasons-endpoint.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)### Retrieving the list of seasons```pythonseasons = api.seasons()```### Retrieving seasons information for a list of players```pythonplayers_seasons = api.seasons(    season_id='division.bro.official.2018-09', game_mode='solo').filter(player_ids=['epickitten'])```It's also possible to retrieve lifetime stats, instead of a season_id:```pythonplayers_seasons = api.seasons(    season_id='lifetime', game_mode='solo').filter(player_ids=['epickitten'])```### Retrieving season data for a specific player```pythonseason_data = api.seasons(    'division.bro.official.2018-09' , player_id='epickitten').get()```It's also possible to retrieve lifetime stats, instead of a season_id:```pythonseason_data = api.seasons(    'lifetime' , player_id='epickitten').get()```## Weapon Mastery* Weapon Mastery  * [Official docs](https://documentation.pubg.com/en/weapon-mastery-endpoint.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)### Retrieving a weapon mastery data```pythonplayers = api.players().filter(player_names=['epickitten'])[0]player = players[0]wm = api.weapon_mastery(player.id).get()print(wm.weapon_summaries)```## Leaderboards* Leaderboards  * [Official docs](https://documentation.pubg.com/en/leaderboards-endpoint.html)  * [Data structure](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)### Retrieving a leaderboard```python# Leaderboards stats are only available for PC playersapi.shard = Shard.STEAMsolo_leaderboard = api.leaderboards(game_mode='solo').page(0).get()solo_fpp_leaderboard = api.leaderboards(game_mode='solo-fpp').page(0).get()duo_leaderboard = api.leaderboards(game_mode='duo').page(0).get()duo_fpp_leaderboard = api.leaderboards(game_mode='duo-fpp').page(0).get()squad_leaderboard = api.leaderboards(game_mode='squad').page(0).get()squad_fpp_leaderboard = api.leaderboards(game_mode='squad-fpp').page(0).get()````page` is always required, even when querying the first leaderboard page.## Playing around with dataAn example of how you can manipulate the data:The domain is all specified [here](https://github.com/ramonsaraiva/pubg-python/blob/master/pubg_python/domain/base.py)```pythonplayers = api.players().filter(player_names=['epickitten'])player = players[0]player.matches&gt;&gt; [&lt;Match bd6aae34-be05-4094-981c-083285c7e861&gt;, &lt;Match 276f5bcb-a831-4e8c-a610-d2073692069e&gt;, ..]match = api.matches().get(player.matches[0].id)match.game_mode&gt;&gt; 'solo'match.duration&gt;&gt; 1899match.rosters&gt;&gt; [&lt;Roster d542eaee-cd02-4f4e-ad7f-ed5ea71a17cf&gt;, &lt;Roster e9f0962a-ebd4-4d86-b134-95783b713800&gt;, ..]roster = match.rosters[0]roster.participants&gt;&gt; [&lt;Participant 7cc76d1b-a80e-4997-8eb8-d4b3c1ed4f44&gt;]participant = roster.participans[0]participant.name&gt;&gt; 'urdaddyYO'participant.damage_dealt&gt;&gt; 291.08participant.kills&gt;&gt; 2participant.ride_distance&gt;&gt; 3204.53467participant.walk_distance&gt;&gt; 2262.81714participant.time_survived&gt;&gt; 1367participant.player_id&gt;&gt; account.edb9910f1e9c4f3b9addb87d9329b57cplayer = api.players().get(participant.player_id)player&gt;&gt; account.edb9910f1e9c4f3b9addb87d9329b57cplayer.matches&gt;&gt; [&lt;Match b3dcd7e8-2270-4fdd-8389-af77acf2d6c2&gt;, &lt;Match 2ebb1a9c-ab5e-4264-971f-df77a00918a9&gt;, ..]```### RatelimitsEach application has a limited amount of requests allowed per minute.The ratelimit is managed through HTTP headers (`X-Ratelimit-Limit`, `X-Ratelimit-Reset`, etc..).In order to facilitate heavy tasks, it is possible to retrieve those values from the `RateLimitError`. The values available in the exception instance are `rl_limit` (integer) and `rl_reset` (datetime).An example snippet that would use this information in favor of processing something big:```pythonapi = PUBG('my-super-secret-key', Shard.STEAM)while True:    try:        print('Processing samples...')        api.samples().get()    except RateLimitError as error:        sleep_seconds = (error.rl_reset - datetime.now()).total_seconds()        if sleep_seconds &gt; 0:            print('Reached my limit! sleeping for {}'.format(sleep_seconds))            time.sleep(sleep_seconds)```### Limits and Offsets**Currently disabled from the official API**Offsetting 5 matches and limitting by 10```pythonmatches = api.matches().limit(10).offset(5)```### Sorting**Currently disabled from the official API**`sort` defaults to ascending, you can use `ascending=False` for a descending sort```pythonmatches = api.matches().limit(10).sort('createdAt')matches = api.matches().limit(10).sort('createdAt', ascending=False)```### FilteringSome endpoints allow you to apply filters, for example, filtering players by names:```pythonplayers = api.players().filter(player_names=['Name1', 'Name2'])```Or filtering players by ids:```pythonplayers = api.players().filter(player_ids=['account.3654e255b77b409e87b10dcb086ab00d'])```### PaginationUse `next()` for the next page and `prev()` for the previous one:```pythonmatches = api.matches()next_matches = matches.next()previous_matches = matches.prev()```## Changelog[CHANGELOG.md](https://github.com/ramonsaraiva/pubg-python/blob/master/CHANGELOG.md)</longdescription>
</pkgmetadata>