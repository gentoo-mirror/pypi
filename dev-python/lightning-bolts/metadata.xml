<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/Lightning-AI/lightning-bolts/raw/0.6.0.post1/docs/source/_images/logos/bolts_logo.png&quot; width=&quot;400px&quot;&gt;**Deep Learning components for extending PyTorch Lightning**______________________________________________________________________&lt;p align=&quot;center&quot;&gt;  &lt;a href=&quot;#install&quot;&gt;Installation&lt;/a&gt; •  &lt;a href=&quot;https://lightning-bolts.readthedocs.io/en/latest/&quot;&gt;Latest Docs&lt;/a&gt; •  &lt;a href=&quot;https://lightning-bolts.readthedocs.io/en/0.6.0.post1&quot;&gt;Stable Docs&lt;/a&gt; •  &lt;a href=&quot;#what-is-bolts&quot;&gt;About&lt;/a&gt; •  &lt;a href=&quot;#team&quot;&gt;Community&lt;/a&gt; •  &lt;a href=&quot;https://www.pytorchlightning.ai/&quot;&gt;Website&lt;/a&gt; •  &lt;a href=&quot;https://www.grid.ai/&quot;&gt;Grid AI&lt;/a&gt; •  &lt;a href=&quot;#license&quot;&gt;License&lt;/a&gt;&lt;/p&gt;[![PyPI Status](https://badge.fury.io/py/lightning-bolts.svg)](https://badge.fury.io/py/lightning-bolts)[![PyPI Status](https://pepy.tech/badge/lightning-bolts)](https://pepy.tech/project/lightning-bolts)[![Build Status](https://dev.azure.com/Lightning-AI/lightning%20Bolts/_apis/build/status/Lightning-AI.lightning-bolts?branchName=master)](https://dev.azure.com/Lightning-AI/lightning%20Bolts/_build?definitionId=31&amp;_a=summary&amp;repositoryFilter=13&amp;branchFilter=4923%2C4923)[![codecov](https://codecov.io/gh/Lightning-AI/lightning-bolts/release/0.6.0.post1/graph/badge.svg?token=O8p0qhvj90)](https://codecov.io/gh/Lightning-AI/lightning-bolts)[![Documentation Status](https://readthedocs.org/projects/lightning-bolts/badge/?version=latest)](https://lightning-bolts.readthedocs.io/en/latest/)[![Slack](https://img.shields.io/badge/slack-chat-green.svg?logo=slack)](https://www.pytorchlightning.ai/community)[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/PytorchLightning/lightning-bolts/blob/master/LICENSE)&lt;/div&gt;______________________________________________________________________## Getting StartedPip / Conda```bashpip install lightning-bolts```&lt;details&gt;  &lt;summary&gt;Other installations&lt;/summary&gt;Install bleeding-edge (no guarantees)```bashpip install git+https://github.com/PytorchLightning/lightning-bolts.git@master --upgrade```To install all optional dependencies```bashpip install lightning-bolts[&quot;extra&quot;]```&lt;/details&gt;## What is BoltsBolts provides a variety of components to extend PyTorch Lightning such as callbacks &amp; datasets, for applied research and production.## News- Sept 22: [Leverage Sparsity for Faster Inference with Lightning Flash and SparseML](https://devblog.pytorchlightning.ai/leverage-sparsity-for-faster-inference-with-lightning-flash-and-sparseml-cdda1165622b)- Aug 26: [Fine-tune Transformers Faster with Lightning Flash and Torch ORT](https://devblog.pytorchlightning.ai/fine-tune-transformers-faster-with-lightning-flash-and-torch-ort-ec2d53789dc3)#### Example 1: Accelerate Lightning Training with the Torch ORT CallbackTorch ORT converts your model into an optimized ONNX graph, speeding up training &amp; inference when using NVIDIA or AMD GPUs. See the [documentation](https://lightning-bolts.readthedocs.io/en/latest/callbacks/torch_ort.html) for more details.```pythonfrom pytorch_lightning import LightningModule, Trainerimport torchvision.models as modelsfrom pl_bolts.callbacks import ORTCallbackclass VisionModel(LightningModule):    def __init__(self):        super().__init__()        self.model = models.vgg19_bn(pretrained=True)    ...model = VisionModel()trainer = Trainer(gpus=1, callbacks=ORTCallback())trainer.fit(model)```#### Example 2: Introduce Sparsity with the SparseMLCallback to Accelerate InferenceWe can introduce sparsity during fine-tuning with [SparseML](https://github.com/neuralmagic/sparseml), which ultimately allows us to leverage the [DeepSparse](https://github.com/neuralmagic/deepsparse) engine to see performance improvements at inference time.```pythonfrom pytorch_lightning import LightningModule, Trainerimport torchvision.models as modelsfrom pl_bolts.callbacks import SparseMLCallbackclass VisionModel(LightningModule):    def __init__(self):        super().__init__()        self.model = models.vgg19_bn(pretrained=True)    ...model = VisionModel()trainer = Trainer(gpus=1, callbacks=SparseMLCallback(recipe_path=&quot;recipe.yaml&quot;))trainer.fit(model)```## Are specific research implementations supported?We'd like to encourage users to contribute general components that will help a broad range of problems, however components that help specifics domains will also be welcomed!For example a callback to help train SSL models would be a great contribution, however the next greatest SSL model from your latest paper would be a good contribution to [Lightning Flash](https://github.com/PyTorchLightning/lightning-flash).Use [Lightning Flash](https://github.com/PyTorchLightning/lightning-flash) to train, predict and serve state-of-the-art models for applied research. We suggest looking at our [VISSL](https://lightning-flash.readthedocs.io/en/latest/integrations/vissl.html) Flash integration for SSL based tasks.## Contribute!Bolts is supported by the PyTorch Lightning team and the PyTorch Lightning community!Join our Slack and/or read our [CONTRIBUTING](./.github/CONTRIBUTING.md) guidelines to get help becoming a contributor!______________________________________________________________________## LicensePlease observe the Apache 2.0 license that is listed in this repository.In addition the Lightning framework is Patent Pending.</longdescription>
</pkgmetadata>