<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># FastLabel Python SDK## Table of Contents- [Installation](#installation)- [Usage](#usage)  - [Limitation](#limitation)- [Task](#task)  - [Image](#image)  - [Image Classification](#image-classification)  - [Sequential Image](#sequential-image)  - [Video](#video)  - [Video Classification](#video-classification)  - [Text](#text)  - [Text Classification](#text-classification)  - [Audio](#audio)  - [Audio Classification](#audio-classification)  - [PCD](#pcd)  - [Sequential PCD](#sequential-pcd)  - [DICOM](#dicom)  - [Common](#common)- [Annotation](#annotation)- [Project](#project)- [Dataset](#dataset)- [Converter](#converter)  - [FastLabel To COCO](#fastlabel-to-coco)  - [FastLabel To YOLO](#fastlabel-to-yolo)  - [FastLabel To Pascal VOC](#fastlabel-to-pascal-voc)  - [FastLabel To labelme](#fastlabel-to-labelme)  - [FastLabel To Segmentation](#fastlabel-to-segmentation)  - [COCO To FastLabel](#coco-to-fastlabel)  - [YOLO To FastLabel](#yolo-to-fastlabel)  - [Pascal VOC To FastLabel](#pascal-voc-to-fastlabel)  - [labelme To FastLabel](#labelme-to-fastlabel)- [API Docs](#api-docs)## Installation```bashpip install --upgrade fastlabel```&gt; Python version 3.8 or greater is required## UsageConfigure API Key in environment variable.```bashexport FASTLABEL_ACCESS_TOKEN=&quot;YOUR_ACCESS_TOKEN&quot;```Initialize fastlabel client.```pythonimport fastlabelclient = fastlabel.Client()```### LimitationAPI is allowed to call 10000 times per 10 minutes. If you create/delete a large size of tasks, please wait a second for every requests.## Task### ImageSupported following project types:- Image - Bounding Box- Image - Polygon- Image - Keypoint- Image - Line- Image - Segmentation- Image - Pose Estimation- Image - All#### Create TaskCreate a new task.```pythontask_id = client.create_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.jpg&quot;,    file_path=&quot;./sample.jpg&quot;)```Create a new task with pre-defined annotations. (Class should be configured on your project in advance)```pythontask_id = client.create_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.jpg&quot;,    file_path=&quot;./sample.jpg&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[{        &quot;type&quot;: &quot;bbox&quot;,        &quot;value&quot;: &quot;annotation-value&quot;,        &quot;attributes&quot;: [            {                &quot;key&quot;: &quot;attribute-key&quot;,                &quot;value&quot;: &quot;attribute-value&quot;            }        ],        &quot;points&quot;: [            100,  # top-left x            100,  # top-left y            200,  # bottom-right x            200   # bottom-right y        ]    }])```&gt; Check [examples/create_image_task.py](/examples/create_image_task.py).##### Limitation- You can upload up to a size of 20 MB.#### Create Integrated Image TaskCreate a new task by integrated image.(Project storage setting should be configured in advance.)```pythontask_id = client.create_integrated_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    file_path=&quot;&lt;integrated-storage-dir&gt;/sample.jpg&quot;,    storage_type=&quot;gcp&quot;,)```Create a new task with pre-defined annotations. (Class should be configured on your project in advance)```pythontask_id = client.create_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    file_path=&quot;&lt;integrated-storage-dir&gt;/sample.jpg&quot;,    storage_type=&quot;gcp&quot;,    annotations=[{        &quot;type&quot;: &quot;bbox&quot;,        &quot;value&quot;: &quot;annotation-value&quot;,        &quot;attributes&quot;: [            {                &quot;key&quot;: &quot;attribute-key&quot;,                &quot;value&quot;: &quot;attribute-value&quot;            }        ],        &quot;points&quot;: [            100,  # top-left x            100,  # top-left y            200,  # bottom-right x            200   # bottom-right y        ]    }])```##### Limitation- You can upload up to a size of 20 MB.#### Find TaskFind a single task.```pythontask = client.find_image_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_image_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 1000 tasks)```pythontasks = client.get_image_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```- Filter and Get tasks. (Up to 1000 tasks)```pythontasks = client.get_image_tasks(    project=&quot;YOUR_PROJECT_SLUG&quot;,    status=&quot;approved&quot;, # status can be 'pending', 'registered', 'completed', 'skipped', 'reviewed' 'sent_back', 'approved', 'declined'    tags=[&quot;tag1&quot;, &quot;tag2&quot;] # up to 10 tags)```Get a large size of tasks. (Over 1000 tasks)```pythonimport time# Iterate pages until new tasks are empty.all_tasks = []offset = Nonewhile True:    time.sleep(1)    tasks = client.get_image_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;, offset=offset)    all_tasks.extend(tasks)    if len(tasks) &gt; 0:        offset = len(all_tasks)  # Set the offset    else:        break```&gt; Please wait a second before sending another requests!#### Update TasksUpdate a single task.```pythontask_id = client.update_image_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    annotations=[        {            &quot;type&quot;: &quot;bbox&quot;,            &quot;value&quot;: &quot;cat&quot;            &quot;attributes&quot;: [                { &quot;key&quot;: &quot;kind&quot;, &quot;value&quot;: &quot;Scottish field&quot; }            ],            &quot;points&quot;: [                100,  # top-left x                100,  # top-left y                200,  # bottom-right x                200   # bottom-right y            ]        }    ],)```#### ResponseExample of a single image task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;cat.jpg&quot;,    &quot;width&quot;: 100,   # image width    &quot;height&quot;: 100,  # image height    &quot;url&quot;: &quot;YOUR_TASK_URL&quot;,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;priority&quot;: 10,    &quot;tags&quot;: [],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;annotations&quot;: [        {            &quot;attributes&quot;: [                { &quot;key&quot;: &quot;kind&quot;, &quot;name&quot;: &quot;Kind&quot;, &quot;type&quot;: &quot;text&quot;, &quot;value&quot;: &quot;Scottish field&quot; }            ],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;points&quot;: [                100,  # top-left x                100,  # top-left y                200,  # bottom-right x                200   # bottom-right y            ],            &quot;rotation&quot;: 0,            &quot;title&quot;: &quot;Cat&quot;,            &quot;type&quot;: &quot;bbox&quot;,            &quot;value&quot;: &quot;cat&quot;        }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```Example when the project type is Image - Pose Estimation```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;person.jpg&quot;,    &quot;width&quot;: 255,   # image width    &quot;height&quot;: 255,  # image height    &quot;url&quot;: &quot;YOUR_TASK_URL&quot;,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;priority&quot;: 10,    &quot;tags&quot;: [],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;annotations&quot;:[       {          &quot;type&quot;:&quot;pose_estimation&quot;,          &quot;title&quot;:&quot;jesture&quot;,          &quot;value&quot;:&quot;jesture&quot;,          &quot;color&quot;:&quot;#10c414&quot;,          &quot;attributes&quot;: [],          &quot;keypoints&quot;:[             {                &quot;name&quot;:&quot;頭&quot;,                &quot;key&quot;:&quot;head&quot;,                &quot;value&quot;:[                   102.59, # x                   23.04,  # y                   1       # 0:invisible, 1:visible                ],                &quot;edges&quot;:[                   &quot;right_shoulder&quot;,                   &quot;left_shoulder&quot;                ]             },             {                &quot;name&quot;:&quot;右肩&quot;,                &quot;key&quot;:&quot;right_shoulder&quot;,                &quot;value&quot;:[                   186.69,                   114.11,                   1                ],                &quot;edges&quot;:[                   &quot;head&quot;                ]             },             {                &quot;name&quot;:&quot;左肩&quot;,                &quot;key&quot;:&quot;left_shoulder&quot;,                &quot;value&quot;:[                   37.23,                   109.29,                   1                ],                &quot;edges&quot;:[                   &quot;head&quot;                ]             }          ]       }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```#### Export Image With AnnotationsGet tasks and export images with annotations.Only support the following image extension.- jpeg- jpg- png- tif- tiff- bmp```pythontasks = client.get_image_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)client.export_image_with_annotations(    tasks=tasks, image_dir=&quot;IMAGE_DIR&quot;, output_dir=&quot;OUTPUT_DIR&quot;)```#### Integrate TaskThis function is alpha version. It is subject to major changes in the future.Integration is possible only when tasks are registered from the objects divided by the dataset.Only bbox and polygon annotation types are supported.In the case of a task divided under the following conditions.- Dataset slug: `image`- Object name: `cat.jpg`- Split count: `3×3`Objects are registered in the data set in the following form.- image/cat/1.jpg- image/cat/2.jpg- image/cat/3.jpg- (omit)- image/cat/9.jpgThe annotations at the edges of the image are combined. However, annotations with a maximum length of 300px may not work.In this case, SPLIT_IMAGE_TASK_NAME_PREFIX specifies `image/cat`.```pythontask = client.find_integrated_image_task_by_prefix(    project=&quot;YOUR_PROJECT_SLUG&quot;,    prefix=&quot;SPLIT_IMAGE_TASK_NAME_PREFIX&quot;,)```##### ResponseExample of a integrated image task object```python{    'name': 'image/cat.jpg',    &quot;annotations&quot;: [        {            &quot;attributes&quot;: [],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;confidenceScore&quot;; -1,            &quot;keypoints&quot;: [],            &quot;points&quot;: [200,200,300,400],            &quot;rotation&quot;: 0,            &quot;title&quot;: &quot;Bird&quot;,            &quot;type&quot;: &quot;polygon&quot;,            &quot;value&quot;: &quot;bird&quot;        }    ],}```### Image ClassificationSupported following project types:- Image - Classification#### Create TaskCreate a new task.```pythontask_id = client.create_image_classification_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.jpg&quot;,    file_path=&quot;./sample.jpg&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    attributes=[        {            &quot;key&quot;: &quot;attribute-key&quot;,            &quot;value&quot;: &quot;attribute-value&quot;        }    ],)```##### Limitation- You can upload up to a size of 20 MB.#### Create Integrated Image Classification TaskCreate a new classification task by integrated image.(Project storage setting should be configured in advance.)```pythontask_id = client.create_integrated_image_classification_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    file_path=&quot;&lt;integrated-storage-dir&gt;/sample.jpg&quot;,    storage_type=&quot;gcp&quot;,)```#### Find TaskFind a single task.```pythontask = client.find_image_classification_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_image_classification_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 1000 tasks)```pythontasks = client.get_image_classification_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TasksUpdate a single task.```pythontask_id = client.update_image_classification_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    attributes=[        {            &quot;key&quot;: &quot;attribute-key&quot;,            &quot;value&quot;: &quot;attribute-value&quot;        }    ],)```#### ResponseExample of a single image classification task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;cat.jpg&quot;,    &quot;width&quot;: 100,   # image width    &quot;height&quot;: 100,  # image height    &quot;url&quot;: &quot;YOUR_TASK_URL&quot;,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    &quot;tags&quot;: [],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;attributes&quot;: [        {            &quot;key&quot;: &quot;kind&quot;,            &quot;name&quot;: &quot;Kind&quot;,            &quot;type&quot;: &quot;text&quot;,            &quot;value&quot;: &quot;Scottish field&quot;        }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```### Sequential ImageSupported following project types:- Sequential Image - Bounding Box- Sequential Image - Polygon- Sequential Image - Keypoint- Sequential Image - Line- Sequential Image - Segmentation#### Create TaskCreate a new task.```pythontask = client.create_sequential_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample&quot;,    folder_path=&quot;./sample&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[{        &quot;type&quot;: &quot;segmentation&quot;,        &quot;value&quot;: &quot;annotation-value&quot;,        &quot;attributes&quot;: [            {                &quot;key&quot;: &quot;attribute-key&quot;,                &quot;value&quot;: &quot;attribute-value&quot;            }        ],        &quot;content&quot;: &quot;01.jpg&quot;,        &quot;points&quot;: [[[            100,            100,            300,            100,            300,            300,            100,            300,            100,            100        ]]] # clockwise rotation    }])```##### Limitation- You can upload up to a size of 20 MB.- You can upload up to a total size of 512 MB.- You can upload up to 250 files in total.#### Find TaskFind a single task.```pythontask = client.find_sequential_image_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_sequential_image_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks.```pythontasks = client.get_sequential_image_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TaskUpdate a single task.```pythontask_id = client.update_sequential_image_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[        {            &quot;type&quot;: &quot;bbox&quot;,            &quot;value&quot;: &quot;cat&quot;,            &quot;content&quot;: &quot;cat1.jpg&quot;,            &quot;attributes&quot;: [                { &quot;key&quot;: &quot;key&quot;, &quot;value&quot;: &quot;value1&quot; }            ],            &quot;points&quot;: [990, 560, 980, 550]        }    ])```#### ResponseExample of a single task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;cat.jpg&quot;,    &quot;contents&quot;: [        {            &quot;name&quot;: &quot;content-name&quot;,            &quot;url&quot;: &quot;content-url&quot;,            &quot;width&quot;: 100,            &quot;height&quot;: 100,        }    ],    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;priority&quot;: 10,    &quot;tags&quot;: [],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;annotations&quot;: [        {            &quot;content&quot;: &quot;content-name&quot;            &quot;attributes&quot;: [],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;points&quot;: [[[                100,                100,                300,                100,                300,                300,                100,                300,                100,                100            ]]]            &quot;title&quot;: &quot;Cat&quot;,            &quot;type&quot;: &quot;bbox&quot;,            &quot;value&quot;: &quot;cat&quot;        }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```### VideoSupported following project types:- Video - Bounding Box- Video - Keypoint- Video - Line#### Create TaskCreate a new task.```pythontask_id = client.create_video_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.mp4&quot;,    file_path=&quot;./sample.mp4&quot;)```Create a new task with pre-defined annotations. (Class should be configured on your project in advance)```pythontask_id = client.create_video_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.mp4&quot;,    file_path=&quot;./sample.mp4&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[{        &quot;type&quot;: &quot;bbox&quot;,        &quot;value&quot;: &quot;person&quot;,        &quot;points&quot;: {            &quot;1&quot;: {  # number of frame                &quot;value&quot;: [                    100,  # top-left x                    100,  # top-left y                    200,  # bottom-right x                    200   # bottom-right y                ],                # Make sure to set `autogenerated` False for the first and last frame. &quot;1&quot; and &quot;3&quot; frames in this case.                # Otherwise, annotation is auto-completed for rest of frames when you edit.                &quot;autogenerated&quot;: False            },            &quot;2&quot;: {                &quot;value&quot;: [                    110,                    110,                    220,                    220                ],                &quot;autogenerated&quot;: True            },            &quot;3&quot;: {                &quot;value&quot;: [                    120,                    120,                    240,                    240                ],                &quot;autogenerated&quot;: False            }        }    }])```##### Limitation- You can upload up to a size of 250 MB.- You can upload only videos with H.264 encoding.- You can upload only MP4 file format.#### Find TaskFind a single task.```pythontask = client.find_video_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_video_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 10 tasks)```pythontasks = client.get_video_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TaskUpdate a single task.```pythontask_id = client.update_video_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    annotations=[{        &quot;type&quot;: &quot;bbox&quot;,        &quot;value&quot;: &quot;bird&quot;,        &quot;points&quot;: {            &quot;1&quot;: {                &quot;value&quot;: [                    100,                    100,                    200,                    200                ],                &quot;autogenerated&quot;: False            },            &quot;2&quot;: {                &quot;value&quot;: [                    110,                    110,                    220,                    220                ],                &quot;autogenerated&quot;: True            },            &quot;3&quot;: {                &quot;value&quot;: [                    120,                    120,                    240,                    240                ],                &quot;autogenerated&quot;: False            }        }    }])```#### Integrate VideoThis function is alpha version. It is subject to major changes in the future.Integration is possible only when tasks are registered from the objects divided by the dataset.In the case of a task divided under the following conditions.- Dataset slug: `video`- Object name: `cat.mp4`- Split count: `3`Objects are registered in the data set in the following form.- video/cat/1.mp4- video/cat/2.mp4- video/cat/3.mp4In this case, SPLIT_VIDEO_TASK_NAME_PREFIX specifies `video/cat`.```pythontask = client.find_integrated_video_task_by_prefix(    project=&quot;YOUR_PROJECT_SLUG&quot;,    prefix=&quot;SPLIT_VIDEO_TASK_NAME_PREFIX&quot;,)```#### ResponseExample of a single vide task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;cat.jpg&quot;,    &quot;width&quot;: 100,   # image width    &quot;height&quot;: 100,  # image height    &quot;fps&quot;: 30.0,    # frame per seconds    &quot;frameCount&quot;: 480,  # total frame count of video    &quot;duration&quot;: 16.0,   # total duration of video    &quot;url&quot;: &quot;YOUR_TASK_URL&quot;,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;priority&quot;: 10,    &quot;tags&quot;: [],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;annotations&quot;: [        {            &quot;attributes&quot;: [],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;points&quot;: {                &quot;1&quot;: {  # number of frame                    &quot;value&quot;: [                        100,  # top-left x                        100,  # top-left y                        200,  # bottom-right x                        200   # bottom-right y                    ],                    &quot;autogenerated&quot;: False  # False when annotated manually. True when auto-generated by system.                },                &quot;2&quot;: {                    &quot;value&quot;: [                        110,                        110,                        220,                        220                    ],                    &quot;autogenerated&quot;: True                },                &quot;3&quot;: {                    &quot;value&quot;: [                        120,                        120,                        240,                        240                    ],                    &quot;autogenerated&quot;: False                }            },            &quot;title&quot;: &quot;Cat&quot;,            &quot;type&quot;: &quot;bbox&quot;,            &quot;value&quot;: &quot;cat&quot;        }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```### Video ClassificationSupported following project types:- Video - Classification (Single)#### Create TaskCreate a new task.```pythontask_id = client.create_video_classification_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.mp4&quot;,    file_path=&quot;./sample.mp4&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    attributes=[        {            &quot;key&quot;: &quot;attribute-key&quot;,            &quot;value&quot;: &quot;attribute-value&quot;        }    ],)```##### Limitation- You can upload up to a size of 250 MB.#### Find TaskFind a single task.```pythontask = client.find_video_classification_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_video_classification_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 1000 tasks)```pythontasks = client.get_video_classification_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TasksUpdate a single task.```pythontask_id = client.update_video_classification_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    attributes=[        {            &quot;key&quot;: &quot;attribute-key&quot;,            &quot;value&quot;: &quot;attribute-value&quot;        }    ],)```### TextSupported following project types:- Text - NER#### Create TaskCreate a new task.```pythontask_id = client.create_text_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.txt&quot;,    file_path=&quot;./sample.txt&quot;)```Create a new task with pre-defined annotations. (Class should be configured on your project in advance)```pythontask_id = client.create_text_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.txt&quot;,    file_path=&quot;./sample.txt&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[{        &quot;type&quot;: &quot;ner&quot;,        &quot;value&quot;: &quot;person&quot;,        &quot;start&quot;: 0,        &quot;end&quot;: 10,        &quot;text&quot;: &quot;1234567890&quot;    }])```##### Limitation- You can upload up to a size of 2 MB.#### Find TaskFind a single task.```pythontask = client.find_text_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_text_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 10 tasks)```pythontasks = client.get_text_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TaskUpdate a single task.```pythontask_id = client.update_text_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    annotations=[{        &quot;type&quot;: &quot;bbox&quot;,        &quot;value&quot;: &quot;bird&quot;,        &quot;start&quot;: 0,        &quot;end&quot;: 10,        &quot;text&quot;: &quot;0123456789&quot;    }])```#### ResponseExample of a single text task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;cat.txt&quot;,    &quot;url&quot;: &quot;YOUR_TASK_URL&quot;,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;priority&quot;: 10,    &quot;tags&quot;: [],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;annotations&quot;: [        {            &quot;attributes&quot;: [],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;text&quot;: &quot;0123456789&quot;,            &quot;start&quot;: 0,            &quot;end&quot;: 10,            &quot;title&quot;: &quot;Cat&quot;,            &quot;type&quot;: &quot;ner&quot;,            &quot;value&quot;: &quot;cat&quot;        }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```### Text ClassificationSupported following project types:- Text - Classification (Single)#### Create TaskCreate a new task.```pythontask_id = client.create_text_classification_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.txt&quot;,    file_path=&quot;./sample.txt&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    attributes=[        {            &quot;key&quot;: &quot;attribute-key&quot;,            &quot;value&quot;: &quot;attribute-value&quot;        }    ],)```##### Limitation- You can upload up to a size of 2 MB.#### Find TaskFind a single task.```pythontask = client.find_text_classification_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_text_classification_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 1000 tasks)```pythontasks = client.get_text_classification_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TasksUpdate a single task.```pythontask_id = client.update_text_classification_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    attributes=[        {            &quot;key&quot;: &quot;attribute-key&quot;,            &quot;value&quot;: &quot;attribute-value&quot;        }    ],)```### AudioSupported following project types:- Audio - Segmentation#### Create TaskCreate a new task.```pythontask_id = client.create_audio_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.mp3&quot;,    file_path=&quot;./sample.mp3&quot;)```Create a new task with pre-defined annotations. (Class should be configured on your project in advance)```pythontask_id = client.create_audio_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.mp3&quot;,    file_path=&quot;./sample.mp3&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[{        &quot;type&quot;: &quot;segmentation&quot;,        &quot;value&quot;: &quot;person&quot;,        &quot;start&quot;: 0.4,        &quot;end&quot;: 0.5    }])```##### Limitation- You can upload up to a size of 120 MB.#### Find TaskFind a single task.```pythontask = client.find_audio_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_audio_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 10 tasks)```pythontasks = client.get_audio_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TaskUpdate a single task.```pythontask_id = client.update_audio_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    annotations=[{        &quot;type&quot;: &quot;segmentation&quot;,        &quot;value&quot;: &quot;bird&quot;,        &quot;start&quot;: 0.4,        &quot;end&quot;: 0.5    }])```#### ResponseExample of a single audio task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;cat.mp3&quot;,    &quot;url&quot;: &quot;YOUR_TASK_URL&quot;,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;priority&quot;: 10,    &quot;tags&quot;: [],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;annotations&quot;: [        {            &quot;attributes&quot;: [],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;start&quot;: 0.4,            &quot;end&quot;: 0.5,            &quot;title&quot;: &quot;Bird&quot;,            &quot;type&quot;: &quot;segmentation&quot;,            &quot;value&quot;: &quot;bird&quot;        }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```#### Integrate TaskThis function is alpha version. It is subject to major changes in the future.Integration is possible only when tasks are registered from the objects divided by the dataset.In the case of a task divided under the following conditions.- Dataset slug: `audio`- Object name: `voice.mp3`- Split count: `3`Objects are registered in the data set in the following form.- audio/voice/1.mp3- audio/voice/2.mp3- audio/voice/3.mp3Annotations are combined when the end point specified in the annotation is the end time of the task and the start point of the next task is 0 seconds.In this case, SPLIT_AUDIO_TASK_NAME_PREFIX specifies `audio/voice`.```pythontask = client.find_integrated_audio_task_by_prefix(    project=&quot;YOUR_PROJECT_SLUG&quot;,    prefix=&quot;SPLIT_AUDIO_TASK_NAME_PREFIX&quot;,)```##### ResponseExample of a integrated audio task object```python{    'name': 'audio/voice.mp3',    &quot;annotations&quot;: [        {            &quot;attributes&quot;: [],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;start&quot;: 0.4,            &quot;end&quot;: 0.5,            &quot;title&quot;: &quot;Bird&quot;,            &quot;type&quot;: &quot;segmentation&quot;,            &quot;value&quot;: &quot;bird&quot;        }    ],}```### Audio ClassificationSupported following project types:- Audio - Classification (Single)#### Create TaskCreate a new task.```pythontask_id = client.create_audio_classification_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.mp3&quot;,    file_path=&quot;./sample.mp3&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    attributes=[        {            &quot;key&quot;: &quot;attribute-key&quot;,            &quot;value&quot;: &quot;attribute-value&quot;        }    ],)```##### Limitation- You can upload up to a size of 120 MB.#### Find TaskFind a single task.```pythontask = client.find_audio_classification_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_audio_classification_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 1000 tasks)```pythontasks = client.get_audio_classification_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TasksUpdate a single task.```pythontask_id = client.update_audio_classification_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    attributes=[        {            &quot;key&quot;: &quot;attribute-key&quot;,            &quot;value&quot;: &quot;attribute-value&quot;        }    ],)```### PCDSupported following project types:- PCD - Cuboid- PCD - Segmentation#### Create TaskCreate a new task.```pythontask_id = client.create_pcd_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.pcd&quot;,    file_path=&quot;./sample.pcd&quot;)```Create a new task with pre-defined annotations. (Class should be configured on your project in advance)Annotation Type: cuboid```pythontask_id = client.create_pcd_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.pcd&quot;,    file_path=&quot;./sample.pcd&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[        {            &quot;type&quot;: &quot;cuboid&quot;,            &quot;value&quot;: &quot;car&quot;,            &quot;points&quot;: [ # For cuboid, it is a 9-digit number.                1, # Coordinate X                2, # Coordinate Y                3, # Coordinate Z                1, # Rotation x                1, # Rotation Y                1, # Rotation Z                2, # Length X                2, # Length Y                2  # Length Z            ],        }    ],)```Annotation Type: segmentation```pythontask_id = client.create_pcd_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.pcd&quot;,    file_path=&quot;./sample.pcd&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[        {            &quot;type&quot;: &quot;segmentation&quot;,            &quot;value&quot;: &quot;car&quot;,            &quot;points&quot;: [1, 2, 3, 4, 5], # For segmentation, it is an arbitrary numeric array.        }    ],)```##### Limitation- You can upload up to a size of 30 MB.#### Find TaskFind a single task.```pythontask = client.find_pcd_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_pcd_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 1000 tasks)```pythontasks = client.get_pcd_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TaskUpdate a single task.```pythontask_id = client.update_pcd_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    annotations=[        {            &quot;type&quot;: &quot;cuboid&quot;,            &quot;value&quot;: &quot;car&quot;,            &quot;points&quot;: [ # For cuboid, it is a 9-digit number.                1, # Coordinate X                2, # Coordinate Y                3, # Coordinate Z                1, # Rotation x                1, # Rotation Y                1, # Rotation Z                2, # Length X                2, # Length Y                2  # Length Z            ],        }    ],)```#### ResponseExample of a single PCD task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;sample.pcd&quot;,    &quot;url&quot;: &quot;YOUR_TASK_URL&quot;,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;priority&quot;: 10,    &quot;tags&quot;: [&quot;tag1&quot;, &quot;tag2&quot;],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;approver&quot;: &quot;APPROVER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;externalApprover&quot;: &quot;EXTERNAL_APPROVER_NAME&quot;,    &quot;annotations&quot;: [        {            &quot;attributes&quot;: [],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;title&quot;: &quot;Car&quot;,            &quot;type&quot;: &quot;segmentation&quot;,            &quot;value&quot;: &quot;car&quot;,            &quot;points&quot;: [1, 2, 3, 1, 1, 1, 2, 2, 2],        }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```### Sequential PCDSupported following project types:- Sequential PCD - Cuboid#### Create TasksCreate a new task.```pythontask_id = client.create_sequential_pcd_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;drive_record&quot;,    folder_path=&quot;./drive_record/&quot;, # Path where sequence PCD files are directory)```The order of frames is determined by the ascending order of PCD file names located in the specified directory.File names are optional, but we recommend naming them in a way that makes the order easy to understand.```./drive_record/├── 0001.pcd =&gt; frame 1├── 0002.pcd =&gt; frame 2...└── xxxx.pcd =&gt; frame n```Create a new task with pre-defined annotations. (Class should be configured on your project in advance)```pythontask_id = client.create_sequential_pcd_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;drive_record&quot;,    folder_path=&quot;./drive_record/&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    annotations=[        {            &quot;type&quot;: &quot;cuboid&quot;, # annotation class type            &quot;value&quot;: &quot;human&quot;, # annotation class value            &quot;points&quot;: {                &quot;1&quot;: { # number of frame                    &quot;value&quot;: [ # For cuboid, it is a 9-digit number.                        1, # Coordinate X                        2, # Coordinate Y                        3, # Coordinate Z                        1, # Rotation x                        1, # Rotation Y                        1, # Rotation Z                        2, # Length X                        2, # Length Y                        2  # Length Z                    ],                    # Make sure to set `autogenerated` False for the first and last frame. &quot;1&quot; and &quot;3&quot; frames in this case.                    # Otherwise, annotation is auto-completed for rest of frames when you edit.                    &quot;autogenerated&quot;: False,                },                &quot;2&quot;: {                    &quot;value&quot;: [                        11,                        12,                        13,                        11,                        11,                        11,                        12,                        12,                        12                    ],                    &quot;autogenerated&quot;: True,                },                &quot;3&quot;: {                    &quot;value&quot;: [                        21,                        22,                        23,                        21,                        21,                        21,                        22,                        22,                        22                    ],                    &quot;autogenerated&quot;: False,                },            },        },    ])```##### LimitationYou can upload up to a size of 30 MB per file.#### Find TasksFind a single task.```pythontask = client.find_sequential_pcd_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontask = client.find_sequential_pcd_task(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 10 tasks)```pythontasks = client.get_sequential_pcd_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TasksUpdate a single task.```pythontask_id = client.update_sequential_pcd_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    annotations=[        {            &quot;type&quot;: &quot;cuboid&quot;,            &quot;value&quot;: &quot;human&quot;,            &quot;points&quot;: {                &quot;1&quot;: {                    &quot;value&quot;: [                        1,                        2,                        3,                        1,                        1,                        1,                        2,                        2,                        2                    ],                    &quot;autogenerated&quot;: False,                },                &quot;2&quot;: {                    &quot;value&quot;: [                        11,                        12,                        13,                        11,                        11,                        11,                        12,                        12,                        12                    ],                    &quot;autogenerated&quot;: False,                },            },        },    ])```#### ResponseExample of a single Sequential PCD task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;YOUR_TASK_NAME&quot;,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;priority&quot;: 10,    &quot;annotations&quot;: [        {            &quot;id&quot;: &quot;YOUR_TASK_ANNOTATION_ID&quot;,            &quot;type&quot;: &quot;cuboid&quot;,            &quot;title&quot;: &quot;human&quot;,            &quot;value&quot;: &quot;human&quot;,            &quot;color&quot;: &quot;#4bdd62&quot;,            &quot;attributes&quot;: [],            &quot;points&quot;: {                &quot;1&quot;: {                    &quot;value&quot;: [2.61, 5.07, 0, 0, 0, 0, 2, 2, 2],                    &quot;autogenerated&quot;: False,                },                &quot;2&quot;: {                    &quot;value&quot;: [2.61, 5.07, 0, 0, 0, 0, 2, 2, 2],                    &quot;autogenerated&quot;: True,                },                &quot;3&quot;: {                    &quot;value&quot;: [2.61, 5.07, 0, 0, 0, 0, 2, 2, 2],                    &quot;autogenerated&quot;: False,                },            },        },        {            &quot;id&quot;: &quot;YOUR_TASK_ANNOTATION_ID&quot;,            &quot;type&quot;: &quot;cuboid&quot;,            &quot;title&quot;: &quot;building&quot;,            &quot;value&quot;: &quot;building&quot;,            &quot;color&quot;: &quot;#223543&quot;,            &quot;attributes&quot;: [],            &quot;points&quot;: {                &quot;1&quot;: {                    &quot;value&quot;: [2.8, -8.64, 0.15, 0, 0, 0, 4.45, 4.2, 2],                    &quot;autogenerated&quot;: False,                },                &quot;2&quot;: {                    &quot;value&quot;: [2.8, -8.64, 0.15, 0, 0, 0, 4.45, 4.2, 2],                    &quot;autogenerated&quot;: True,                },                &quot;3&quot;: {                    &quot;value&quot;: [2.8, -8.64, 0.15, 0, 0, 0, 4.45, 4.2, 2],                    &quot;autogenerated&quot;: True,                },                &quot;4&quot;: {                    &quot;value&quot;: [2.8, -8.64, 0.15, 0, 0, 0, 4.45, 4.2, 2],                    &quot;autogenerated&quot;: True,                },                &quot;5&quot;: {                    &quot;value&quot;: [2.8, -8.64, 0.15, 0, 0, 0, 4.45, 4.2, 2],                    &quot;autogenerated&quot;: True,                },            },        },    ],    &quot;tags&quot;: [],    &quot;assignee&quot;: None,    &quot;reviewer&quot;: None,    &quot;approver&quot;: None,    &quot;externalAssignee&quot;: None,    &quot;externalReviewer&quot;: None,    &quot;externalApprover&quot;: None,    &quot;createdAt&quot;: &quot;2023-03-24T08:39:08.524Z&quot;,    &quot;updatedAt&quot;: &quot;2023-03-24T08:39:08.524Z&quot;,}```### DICOMSupported following project types:- DICOM -Bounding Box#### Create TaskCreate a new task.You should receive task import history status [Find Task Import History](#find-task-import-history).Once you receive the status completed, you can get the task.```pythonhistory = client.create_dicom_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    file_path=&quot;./sample.zip&quot;)```#### Limitation- You can upload up to a size of 2 GB per file.#### Find TaskFind a single task.```pythontask = client.find_dicom_task(task_id=&quot;YOUR_TASK_ID&quot;)```Find a single task by name.```pythontasks = client.find_dicom_task_by_name(project=&quot;YOUR_PROJECT_SLUG&quot;, task_name=&quot;YOUR_TASK_NAME&quot;)```#### Get TasksGet tasks. (Up to 1000 tasks)```pythontasks = client.get_dicom_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Update TasksUpdate a single task.```pythontask_id = client.update_dicom_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    assignee=&quot;USER_SLUG&quot;,    tags=[&quot;tag1&quot;, &quot;tag2&quot;])```#### ResponseExample of a single dicom task object```python{    &quot;id&quot;: &quot;YOUR_TASK_ID&quot;,    &quot;name&quot;: &quot;dicom.zip&quot;,    &quot;url&quot;: &quot;YOUR_TASK_URL&quot;,    'height': 512,    'width': 512,    &quot;status&quot;: &quot;registered&quot;,    &quot;externalStatus&quot;: &quot;registered&quot;,    &quot;tags&quot;: [],    &quot;assignee&quot;: &quot;ASSIGNEE_NAME&quot;,    &quot;reviewer&quot;: &quot;REVIEWER_NAME&quot;,    &quot;externalAssignee&quot;: &quot;EXTERNAL_ASSIGNEE_NAME&quot;,    &quot;externalReviewer&quot;: &quot;EXTERNAL_REVIEWER_NAME&quot;,    &quot;annotations&quot;: [        {            &quot;attributes&quot;: [],            &quot;color&quot;: &quot;#b36d18&quot;,            &quot;contentId&quot;: &quot;CONTENT_ID&quot;            &quot;points&quot;: [100, 200, 100, 200],            &quot;title&quot;: &quot;Heart&quot;,            &quot;type&quot;: &quot;bbox&quot;,            &quot;value&quot;: &quot;heart&quot;        }    ],    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```### CommonAPIs for update and delete and count are same over all tasks.#### Update TaskUpdate a single task status, tags and assignee.```pythontask_id = client.update_task(    task_id=&quot;YOUR_TASK_ID&quot;,    status=&quot;approved&quot;,    priority=10, # (optional) none: 0, low: 10, medium: 20, high: 30    tags=[&quot;tag1&quot;, &quot;tag2&quot;],    assignee=&quot;USER_SLUG&quot;)```#### Delete TaskDelete a single task.```pythonclient.delete_task(task_id=&quot;YOUR_TASK_ID&quot;)```#### Delete Task AnnotationDelete annotations in a task.```pythonclient.delete_task_annotations(task_id=&quot;YOUR_TASK_ID&quot;)```#### Get Tasks Id and Name map```pythonid_name_map = client.get_task_id_name_map(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### Count Task```pythontask_count = client.count_tasks(    project=&quot;YOUR_PROJECT_SLUG&quot;,    status=&quot;approved&quot;, # status can be 'pending', 'registered', 'completed', 'skipped', 'reviewed' 'sent_back', 'approved', 'declined'    tags=[&quot;tag1&quot;, &quot;tag2&quot;] # up to 10 tags)```#### Create Task from S3Task creation from S3.- Support project  - Image  - Video  - Audio  - Text- To use it, you need to set the contents of the following link.  &lt;https://docs.fastlabel.ai/docs/integrations-aws-s3&gt;- Setup AWS S3 properties```pythonstatus = client.update_aws_s3_storage(    project=&quot;YOUR_PROJECT_SLUG&quot;,    bucket_name=&quot;S3_BUCKET_NAME&quot;,    bucket_region=&quot;S3_REGIONS&quot;,)```- Run create task from AWS S3```pythonhistory = client.create_task_from_aws_s3(    project=&quot;YOUR_PROJECT_SLUG&quot;,)```- Get AWS S3 import status```pythonhistory = client.get_aws_s3_import_status_by_project(    project=&quot;YOUR_PROJECT_SLUG&quot;,)```#### Find Task Import HistoryFind a single history.```pythonhistory = client.find_history(history_id=&quot;YOUR_HISTORY_ID&quot;)```#### Get Task Import Histories```pythonhistories = client.get_histories(project=&quot;YOUR_PROJECT_SLUG&quot;)```#### ResponseExample of a single history object```python{    &quot;id&quot;: &quot;YOUR_HISTORY_ID&quot;,    &quot;storageType&quot;: &quot;zip&quot;,    &quot;status&quot;: &quot;running&quot;,    &quot;createdAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;,    &quot;updatedAt&quot;: &quot;2021-02-22T11:25:27.158Z&quot;}```## Annotation### Create AnnotationCreate a new annotation.```pythonannotation_id = client.create_annotation(    project=&quot;YOUR_PROJECT_SLUG&quot;, type=&quot;bbox&quot;, value=&quot;cat&quot;, title=&quot;Cat&quot;)```Create a new annotation with color and attributes.```pythonattributes = [    {        &quot;type&quot;: &quot;text&quot;,        &quot;name&quot;: &quot;Kind&quot;,        &quot;key&quot;: &quot;kind&quot;    },    {        &quot;type&quot;: &quot;select&quot;,        &quot;name&quot;: &quot;Size&quot;,        &quot;key&quot;: &quot;size&quot;,        &quot;options&quot;: [ # select, radio and checkbox type requires options            {                &quot;title&quot;: &quot;Large&quot;,                &quot;value&quot;: &quot;large&quot;            },            {                &quot;title&quot;: &quot;Small&quot;,                &quot;value&quot;: &quot;small&quot;            },        ]    },]annotation_id = client.create_annotation(    project=&quot;YOUR_PROJECT_SLUG&quot;, type=&quot;bbox&quot;, value=&quot;cat&quot;, title=&quot;Cat&quot;, color=&quot;#FF0000&quot;, attributes=attributes)```Create a new classification annotation.```pythonannotation_id = client.create_classification_annotation(    project=&quot;YOUR_PROJECT_SLUG&quot;, attributes=attributes)```### Find AnnotationFind an annotation.```pythonannotation = client.find_annotation(annotation_id=&quot;YOUR_ANNOTATION_ID&quot;)```Find an annotation by value.```pythonannotation = client.find_annotation_by_value(project=&quot;YOUR_PROJECT_SLUG&quot;, value=&quot;cat&quot;)```Find an annotation by value in classification project.```pythonannotation = client.find_annotation_by_value(    project=&quot;YOUR_PROJECT_SLUG&quot;, value=&quot;classification&quot;) # &quot;classification&quot; is fixed value```### Get AnnotationsGet annotations. (Up to 1000 annotations)```pythonannotations = client.get_annotations(project=&quot;YOUR_PROJECT_SLUG&quot;)```### ResponseExample of an annotation object```python{    &quot;id&quot;: &quot;YOUR_ANNOTATION_ID&quot;,    &quot;type&quot;: &quot;bbox&quot;,    &quot;value&quot;: &quot;cat&quot;,    &quot;title&quot;: &quot;Cat&quot;,    &quot;color&quot;: &quot;#FF0000&quot;,    &quot;order&quot;: 1,    &quot;vertex&quot;: 0,    &quot;attributes&quot;: [        {            &quot;id&quot;: &quot;YOUR_ATTRIBUTE_ID&quot;,            &quot;key&quot;: &quot;kind&quot;,            &quot;name&quot;: &quot;Kind&quot;,            &quot;options&quot;: [],            &quot;order&quot;: 1,            &quot;type&quot;: &quot;text&quot;,            &quot;value&quot;: &quot;&quot;        },        {            &quot;id&quot;: &quot;YOUR_ATTRIBUTE_ID&quot;,            &quot;key&quot;: &quot;size&quot;,            &quot;name&quot;: &quot;Size&quot;,            &quot;options&quot;: [                {&quot;title&quot;: &quot;Large&quot;, &quot;value&quot;: &quot;large&quot;},                {&quot;title&quot;: &quot;Small&quot;, &quot;value&quot;: &quot;small&quot;}            ],            &quot;order&quot;: 2,            &quot;type&quot;: &quot;select&quot;,            &quot;value&quot;: &quot;&quot;        }    ],    &quot;createdAt&quot;: &quot;2021-05-25T05:36:50.459Z&quot;,    &quot;updatedAt&quot;: &quot;2021-05-25T05:36:50.459Z&quot;}```Example when the annotation type is Pose Estimation```python{   &quot;id&quot;:&quot;b12c81c3-ddec-4f98-b41b-cef7f77d26a4&quot;,   &quot;type&quot;:&quot;pose_estimation&quot;,   &quot;title&quot;:&quot;jesture&quot;,   &quot;value&quot;:&quot;jesture&quot;,   &quot;color&quot;:&quot;#10c414&quot;,   &quot;order&quot;:1,   &quot;attributes&quot;: [],   &quot;keypoints&quot;:[      {         &quot;id&quot;:&quot;b03ea998-a2f1-4733-b7e9-78cdf73bd38a&quot;,         &quot;name&quot;:&quot;頭&quot;,         &quot;key&quot;:&quot;head&quot;,         &quot;color&quot;:&quot;#0033CC&quot;,         &quot;edges&quot;:[            &quot;195f5852-c516-498b-b392-24513ce3ea67&quot;,            &quot;06b5c968-1786-4d75-a719-951e915e5557&quot;         ],         &quot;value&quot;: []      },      {         &quot;id&quot;:&quot;195f5852-c516-498b-b392-24513ce3ea67&quot;,         &quot;name&quot;:&quot;右肩&quot;,         &quot;key&quot;:&quot;right_shoulder&quot;,         &quot;color&quot;:&quot;#0033CC&quot;,         &quot;edges&quot;:[            &quot;b03ea998-a2f1-4733-b7e9-78cdf73bd38a&quot;         ],         &quot;value&quot;: []      },      {         &quot;id&quot;:&quot;06b5c968-1786-4d75-a719-951e915e5557&quot;,         &quot;name&quot;:&quot;左肩&quot;,         &quot;key&quot;:&quot;left_shoulder&quot;,         &quot;color&quot;:&quot;#0033CC&quot;,         &quot;edges&quot;:[            &quot;b03ea998-a2f1-4733-b7e9-78cdf73bd38a&quot;         ],         &quot;value&quot;: []      }   ],   &quot;createdAt&quot;:&quot;2021-11-21T09:59:46.714Z&quot;,   &quot;updatedAt&quot;:&quot;2021-11-21T09:59:46.714Z&quot;}```### Update AnnotationUpdate an annotation.```pythonannotation_id = client.update_annotation(    annotation_id=&quot;YOUR_ANNOTATION_ID&quot;, value=&quot;cat2&quot;, title=&quot;Cat2&quot;, color=&quot;#FF0000&quot;)```Update an annotation with attributes.```pythonattributes = [    {        &quot;id&quot;: &quot;YOUR_ATTRIBUTE_ID&quot;,  # check by sdk get methods        &quot;type&quot;: &quot;text&quot;,        &quot;name&quot;: &quot;Kind2&quot;,        &quot;key&quot;: &quot;kind2&quot;    },    {        &quot;id&quot;: &quot;YOUR_ATTRIBUTE_ID&quot;,        &quot;type&quot;: &quot;select&quot;,        &quot;name&quot;: &quot;Size2&quot;,        &quot;key&quot;: &quot;size2&quot;,        &quot;options&quot;: [            {                &quot;title&quot;: &quot;Large2&quot;,                &quot;value&quot;: &quot;large2&quot;            },            {                &quot;title&quot;: &quot;Small2&quot;,                &quot;value&quot;: &quot;small2&quot;            },        ]    },]annotation_id = client.update_annotation(    annotation_id=&quot;YOUR_ANNOTATION_ID&quot;, value=&quot;cat2&quot;, title=&quot;Cat2&quot;, color=&quot;#FF0000&quot;, attributes=attributes)```Update a classification annotation.```pythonannotation_id = client.update_classification_annotation(    project=&quot;YOUR_PROJECT_SLUG&quot;, attributes=attributes)```### Delete AnnotationDelete an annotation.```pythonclient.delete_annotation(annotation_id=&quot;YOUR_ANNOTATION_ID&quot;)```## Project### Create ProjectCreate a new project.```pythonproject_id = client.create_project(    type=&quot;image_bbox&quot;, name=&quot;ImageNet&quot;, slug=&quot;image-net&quot;)```### Find ProjectFind a project.```pythonproject = client.find_project(project_id=&quot;YOUR_PROJECT_ID&quot;)```Find a project by slug.```pythonproject = client.find_project_by_slug(slug=&quot;YOUR_PROJECT_SLUG&quot;)```### Get ProjectsGet projects. (Up to 1000 projects)```pythonprojects = client.get_projects()```### ResponseExample of a project object```python{    &quot;id&quot;: &quot;YOUR_PROJECT_ID&quot;,    &quot;type&quot;: &quot;image_bbox&quot;,    &quot;slug&quot;: &quot;YOUR_PROJECT_SLUG&quot;,    &quot;name&quot;: &quot;YOUR_PROJECT_NAME&quot;,    &quot;isPixel&quot;: False,    &quot;jobSize&quot;: 10,    &quot;status&quot;: &quot;active&quot;,    &quot;createdAt&quot;: &quot;2021-04-20T03:20:41.427Z&quot;,    &quot;updatedAt&quot;: &quot;2021-04-20T03:20:41.427Z&quot;,}```### Update ProjectUpdate a project.```pythonproject_id = client.update_project(    project_id=&quot;YOUR_PROJECT_ID&quot;, name=&quot;NewImageNet&quot;, slug=&quot;new-image-net&quot;, job_size=20)```### Delete ProjectDelete a project.```pythonclient.delete_project(project_id=&quot;YOUR_PROJECT_ID&quot;)```### Copy ProjectCopy a project.```pythonproject_id = client.copy_project(project_id=&quot;YOUR_PROJECT_ID&quot;)```## Tags### Get TagsGet tags. (Up to 1000 tags)keyword are search terms in the tag name (Optional).offset is the starting position number to fetch (Optional).limit is the max number to fetch (Optional).If you need to fetch more than 1000 tags, please loop this method using offset and limit.In the sample code below, you can fetch 1000 tags starting from the 2001st position.```pythonprojects = client.get_tags(    project=&quot;YOUR_PROJECT_SLUG&quot;,    keyword=&quot;dog&quot;, # (Optional)    offset=2000,  # (Optional)    limit=1000,  # (Optional. Default is 100.))```### ResponseExample of tags object```python[    {        &quot;id&quot;: &quot;YOUR_TAG_ID&quot;,        &quot;name&quot;: &quot;YOUR_TAG_NAME&quot;,        &quot;order&quot;: 1,        &quot;createdAt&quot;: &quot;2023-08-14T11: 32: 36.462Z&quot;,        &quot;updatedAt&quot;: &quot;2023-08-14T11: 32: 36.462Z&quot;    }]```### Delete TagsDelete tags.```pythonclient.delete_tags(    tag_ids=[        &quot;YOUR_TAG_ID_1&quot;,        &quot;YOUR_TAG_ID_2&quot;,    ],)```## Dataset### Create DatasetCreate a new dataset.```pythondataset = client.create_dataset(    name=&quot;object-detection&quot;, # Only lowercase alphanumeric characters + hyphen is available    tags=[&quot;cat&quot;, &quot;dog&quot;], # max 5 tags per dataset.    visibility=&quot;workspace&quot;, # visibility can be 'workspace' or 'public' or 'organization'    license=&quot;The MIT License&quot; # Optional)```#### Response DatasetSee API docs for details.```python{    'id': 'YOUR_DATASET_ID',    'name': 'object-detection',    'tags': ['cat', 'dog'],    'visibility': 'workspace',    'license': 'The MIT License',    'createdAt': '2022-10-31T02:20:00.248Z',    'updatedAt': '2022-10-31T02:20:00.248Z'}```### Find DatasetFind a single dataset.```pythondataset = client.find_dataset(dataset_id=&quot;YOUR_DATASET_ID&quot;)```Success response is the same as when created.### Get DatasetGet all datasets in the workspace. (Up to 1000 tasks)```pythondatasets = client.get_datasets()```The success response is the same as when created, but it is an array.You can filter by keywords and visibility, tags.```pythondatasets = client.get_datasets(    keyword=&quot;dog&quot;,    tags=[&quot;cat&quot;, &quot;dog&quot;], # max 5 tags per dataset.    license=&quot;mit&quot;,    visibility=&quot;workspace&quot;, # visibility can be 'workspace' or 'public' or 'organization'.)```If you wish to retrieve more than 1000 datasets, please refer to the Task [sample code](#get-tasks).### Update DatasetUpdate a single dataset.```pythondataset = client.update_dataset(    dataset_id=&quot;YOUR_DATASET_ID&quot;, name=&quot;object-detection&quot;, tags=[&quot;cat&quot;, &quot;dog&quot;])```Success response is the same as when created.### Delete DatasetDelete a single dataset.**⚠️ The dataset object and its associated tasks that dataset has will also be deleted, so check carefully before executing.**```pythonclient.delete_dataset(dataset_id=&quot;YOUR_DATASET_ID&quot;)```### Create Dataset ObjectCreate object in the dataset.The types of objects that can be created are &quot;image&quot;, &quot;video&quot;, and &quot;audio&quot;.There are type-specific methods. but they can be used in the same way.Created object are automatically assigned to the &quot;latest&quot; dataset version.```pythondataset_object = client.create_dataset_object(    dataset=&quot;YOUR_DATASET_NAME&quot;,    name=&quot;brushwood_dog.jpg&quot;,    file_path=&quot;./brushwood_dog.jpg&quot;,    tags=[&quot;dog&quot;], # max 5 tags per dataset object.    annotations=[        {            &quot;keypoints&quot;: [                {                    &quot;value&quot;: [                        102.59,                        23.04,                        1                    ],                    &quot;key&quot;: &quot;head&quot;                }            ],            &quot;attributes&quot;: [                {                    &quot;value&quot;: &quot;Scottish field&quot;,                    &quot;key&quot;: &quot;kind&quot;                }            ],            &quot;confidenceScore&quot;: 0,            &quot;rotation&quot;: 0,            &quot;points&quot;: [                0            ],            &quot;value&quot;: &quot;dog&quot;,            &quot;type&quot;: &quot;bbox&quot; # type can be 'bbox', 'segmentation'.        }    ])```#### Response Dataset ObjectSee API docs for details.```python{    'id': 'YOUR_DATASET_OBJECT_ID',    'name': 'brushwood_dog.jpg',    'size': 6717,    'height': 225,    'width': 225,    'tags': [        'dog'    ],    &quot;annotations&quot;: [        {            &quot;id&quot;: &quot;YOUR_DATASET_OBJECT_ANNOTATION_ID&quot;,            &quot;type&quot;: &quot;bbox&quot;,            &quot;title&quot;: &quot;dog&quot;,            &quot;value&quot;: &quot;dog&quot;,            &quot;points&quot;: [                0            ],            &quot;attributes&quot;: [                {                    &quot;value&quot;: &quot;Scottish field&quot;,                    &quot;key&quot;: &quot;kind&quot;,                    &quot;name&quot;: &quot;Kind&quot;,                    &quot;type&quot;: &quot;text&quot;                }            ],            &quot;keypoints&quot;: [                {                    &quot;edges&quot;: [                        &quot;right_shoulder&quot;,                        &quot;left_shoulder&quot;                    ],                    &quot;value&quot;: [                        102.59,                        23.04,                        1                    ],                    &quot;key&quot;: &quot;head&quot;,                    &quot;name&quot;: &quot;頭&quot;                }            ],            &quot;rotation&quot;: 0,            &quot;color&quot;: &quot;#FF0000&quot;,            &quot;confidenceScore&quot;: -1        }    ],    'createdAt': '2022-10-30T08:32:20.748Z',    'updatedAt': '2022-10-30T08:32:20.748Z'}```### Find Dataset ObjectFind a single dataset object.```pythondataset_object = client.find_dataset_object(    dataset_object_id=&quot;YOUR_DATASET_OBJECT_ID&quot;)```Success response is the same as when created.### Get Dataset ObjectGet all dataset object in the dataset. (Up to 1000 tasks)```pythondataset_objects = client.get_dataset_objects(dataset=&quot;YOUR_DATASET_NAME&quot;)```The success response is the same as when created, but it is an array.You can filter by version and tags.```pythondataset_objects = client.get_dataset_objects(    dataset=&quot;YOUR_DATASET_NAME&quot;,    version=&quot;latest&quot;, # default is &quot;latest&quot;    tags=[&quot;cat&quot;],)```### Delete Dataset ObjectDelete a single dataset object.```pythonclient.delete_dataset_object(dataset_object_id=&quot;YOUR_DATASET_OBJECT_ID&quot;)```## Converter### FastLabel To COCOSupport the following annotation types.- bbox- polygon- pose estimationGet tasks and export as a [COCO format](https://cocodataset.org/#format-data) file.```pythonproject_slug = &quot;YOUR_PROJECT_SLUG&quot;tasks = client.get_image_tasks(project=project_slug)client.export_coco(project=project_slug, tasks=tasks)```Export with specifying output directory and file name.```pythonclient.export_coco(project=&quot;YOUR_PROJECT_SLUG&quot;, tasks=tasks, output_dir=&quot;YOUR_DIRECTROY&quot;, output_file_name=&quot;YOUR_FILE_NAME&quot;)```If you would like to export pose estimation type annotations, please pass annotations.```pythonproject_slug = &quot;YOUR_PROJECT_SLUG&quot;tasks = client.get_image_tasks(project=project_slug)annotations = client.get_annotations(project=project_slug)client.export_coco(project=project_slug, tasks=tasks, annotations=annotations, output_dir=&quot;YOUR_DIRECTROY&quot;, output_file_name=&quot;YOUR_FILE_NAME&quot;)```### FastLabel To YOLOSupport the following annotation types.- bbox- polygonGet tasks and export as YOLO format files.```pythonproject_slug = &quot;YOUR_PROJECT_SLUG&quot;tasks = client.get_image_tasks(project=project_slug)client.export_yolo(project=project_slug, tasks=tasks, output_dir=&quot;YOUR_DIRECTROY&quot;)```Get tasks and export as YOLO format files with classes.txtYou can use fixed classes.txt and arrange order of each annotaiton file's order```pythonproject_slug = &quot;YOUR_PROJECT_SLUG&quot;tasks = client.get_image_tasks(project=project_slug)annotations = client.get_annotations(project=project_slug)classes = list(map(lambda annotation: annotation[&quot;value&quot;], annotations))client.export_yolo(project=project_slug, tasks=tasks, classes=classes, output_dir=&quot;YOUR_DIRECTROY&quot;)```### FastLabel To Pascal VOCSupport the following annotation types.- bbox- polygonGet tasks and export as Pascal VOC format files.```pythonproject_slug = &quot;YOUR_PROJECT_SLUG&quot;tasks = client.get_image_tasks(project=project_slug)client.export_pascalvoc(project=project_slug, tasks=tasks)```### FastLabel To labelmeSupport the following annotation types.- bbox- polygon- points- lineGet tasks and export as labelme format files.```pythontasks = client.get_image_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)client.export_labelme(tasks)```### FastLabel To SegmentationGet tasks and export index color instance/semantic segmentation (PNG files).Only support the following annotation types.- bbox- polygon- segmentation (Hollowed points are not supported.)```pythontasks = client.get_image_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)client.export_instance_segmentation(tasks)``````pythontasks = client.get_image_tasks(project=&quot;YOUR_PROJECT_SLUG&quot;)client.export_semantic_segmentation(tasks)```### COCO To FastLabelSupported bbox , polygon or pose_estimation annotation type.Convert annotation file of [COCO format](https://cocodataset.org/#format-data) as a Fastlabel format and create task.file_path: COCO annotation json file path```pythonannotations_map = client.convert_coco_to_fastlabel(file_path=&quot;./sample.json&quot;, annotation_type=&quot;bbox&quot;)# annotation_type = &quot;bbox&quot;, &quot;polygon&quot; or &quot;pose_estimationtask_id = client.create_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.jpg&quot;,    file_path=&quot;./sample.jpg&quot;,    annotations=annotations_map.get(&quot;sample.jpg&quot;))```Example of converting annotations to create multiple tasks.In the case of the following tree structure.```dataset├── annotation.json├── sample1.jpg└── sample2.jpg```Example source code.```pythonimport fastlabelproject = &quot;YOUR_PROJECT_SLUG&quot;input_file_path = &quot;./dataset/annotation.json&quot;input_dataset_path = &quot;./dataset/&quot;annotations_map = client.convert_coco_to_fastlabel(file_path=input_file_path)for image_file_path in glob.iglob(os.path.join(input_dataset_path, &quot;**/**.jpg&quot;), recursive=True):    time.sleep(1)    name = image_file_path.replace(os.path.join(*[input_dataset_path, &quot;&quot;]), &quot;&quot;)    file_path = image_file_path    annotations = annotations_map.get(name) if annotations_map.get(name) is not None else []    task_id = client.create_image_task(        project=project,        name=name,        file_path=file_path,        annotations=annotations    )```### YOLO To FastLabelSupported bbox annotation type.Convert annotation file of YOLO format as a Fastlabel format and create task.classes_file_path: YOLO classes text file pathdataset_folder_path: Folder path containing YOLO Images and annotation```pythonannotations_map = client.convert_yolo_to_fastlabel(    classes_file_path=&quot;./classes.txt&quot;,    dataset_folder_path=&quot;./dataset/&quot;)task_id = client.create_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.jpg&quot;,    file_path=&quot;./dataset/sample.jpg&quot;,    annotations=annotations_map.get(&quot;sample.jpg&quot;))```Example of converting annotations to create multiple tasks.In the case of the following tree structure.```yolo├── classes.txt└── dataset    ├── sample1.jpg    ├── sample1.txt    ├── sample2.jpg    └── sample2.txt```Example source code.```pythonimport fastlabelproject = &quot;YOUR_PROJECT_SLUG&quot;input_file_path = &quot;./classes.txt&quot;input_dataset_path = &quot;./dataset/&quot;annotations_map = client.convert_yolo_to_fastlabel(    classes_file_path=input_file_path,    dataset_folder_path=input_dataset_path)for image_file_path in glob.iglob(os.path.join(input_dataset_path, &quot;**/**.jpg&quot;), recursive=True):    time.sleep(1)    name = image_file_path.replace(os.path.join(*[input_dataset_path, &quot;&quot;]), &quot;&quot;)    file_path = image_file_path    annotations = annotations_map.get(name) if annotations_map.get(name) is not None else []    task_id = client.create_image_task(        project=project,        name=name,        file_path=file_path,        annotations=annotations    )```### Pascal VOC To FastLabelSupported bbox annotation type.Convert annotation file of Pascal VOC format as a Fastlabel format and create task.folder_path: Folder path including pascal VOC format annotation files```pythonannotations_map = client.convert_pascalvoc_to_fastlabel(folder_path=&quot;./dataset/&quot;)task_id = client.create_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.jpg&quot;,    file_path=&quot;./dataset/sample.jpg&quot;,    annotations=annotations_map.get(&quot;sample.jpg&quot;))```Example of converting annotations to create multiple tasks.In the case of the following tree structure.```dataset├── sample1.jpg├── sample1.xml├── sample2.jpg└── sample2.xml```Example source code.```pythonimport fastlabelproject = &quot;YOUR_PROJECT_SLUG&quot;input_dataset_path = &quot;./dataset/&quot;annotations_map = client.convert_pascalvoc_to_fastlabel(folder_path=input_dataset_path)for image_file_path in glob.iglob(os.path.join(input_dataset_path, &quot;**/**.jpg&quot;), recursive=True):    time.sleep(1)    name = image_file_path.replace(os.path.join(*[input_dataset_path, &quot;&quot;]), &quot;&quot;)    file_path = image_file_path    annotations = annotations_map.get(name) if annotations_map.get(name) is not None else []    task_id = client.create_image_task(        project=project,        name=name,        file_path=file_path,        annotations=annotations    )```### labelme To FastLabelSupport the following annotation types.- bbox- polygon- points- lineConvert annotation file of labelme format as a Fastlabel format and create task.folder_path: Folder path including labelme format annotation files```pythonannotations_map = client.convert_labelme_to_fastlabel(folder_path=&quot;./dataset/&quot;)task_id = client.create_image_task(    project=&quot;YOUR_PROJECT_SLUG&quot;,    name=&quot;sample.jpg&quot;,    file_path=&quot;./sample.jpg&quot;,    annotations=annotations_map.get(&quot;sample.jpg&quot;))```Example of converting annotations to create multiple tasks.In the case of the following tree structure.```dataset├── sample1.jpg├── sample1.json├── sample2.jpg└── sample2.json```Example source code.```pythonimport fastlabelproject = &quot;YOUR_PROJECT_SLUG&quot;input_dataset_path = &quot;./dataset/&quot;annotations_map = client.convert_labelme_to_fastlabel(folder_path=input_dataset_path)for image_file_path in glob.iglob(os.path.join(input_dataset_path, &quot;**/**.jpg&quot;), recursive=True):    time.sleep(1)    name = image_file_path.replace(os.path.join(*[input_dataset_path, &quot;&quot;]), &quot;&quot;)    file_path = image_file_path    annotations = annotations_map.get(name) if annotations_map.get(name) is not None else []    task_id = client.create_image_task(        project=project,        name=name,        file_path=file_path,        annotations=annotations    )```&gt; Please check const.COLOR_PALLETE for index colors.## Execute endpointCreate the endpoint from the screen at first.Currently, the feature to create endpoints is in alpha and is not available to users.If you would like to try it out, please contact a FastLabel representative.```pythonimport fastlabelimport numpy as npimport cv2import base64client = fastlabel.Client()ENDPOINT_NAME = &quot;YOUR ENDPOINT NAME&quot;IMAGE_FILE_PATH = &quot;YOUR IMAGE FILE PATH&quot;RESULT_IMAGE_FILE_PATH = &quot;YOUR RESULT IMAGE FILE PATH&quot;def base64_to_cv(img_str):  if &quot;base64,&quot; in img_str:      img_str = img_str.split(&quot;,&quot;)[1]  img_raw = np.frombuffer(base64.b64decode(img_str), np.uint8)  img = cv2.imdecode(img_raw, cv2.IMREAD_UNCHANGED)  return imgif __name__ == '__main__':  # Execute endpoint  response = client.execute_endpoint(      endpoint_name=ENDPOINT_NAME, file_path=IMAGE_PATH)  # Show  result  print(response[&quot;json&quot;])  # Save result  img = base64_to_cv(response[&quot;file&quot;])  cv2.imwrite(RESULT_IMAGE_FILE_PATH, img)```## Model Monitoring### Create Request ResultsYou can integrate the results of model endpoint calls,which are targeted for aggregation in model monitoring, from an external source.```pythonfrom datetime import datetimeimport pytzimport fastlabelclient = fastlabel.Client()jst = pytz.timezone(&quot;Asia/Tokyo&quot;)dt_jst = datetime(2023, 5, 8, 12, 10, 53, tzinfo=jst)client.create_model_monitoring_request_results(    name=&quot;model-monitoring-name&quot;,  # The name of your model monitoring name    results=[        {            &quot;status&quot;: &quot;success&quot;,  # success or failed            &quot;result&quot;: [                {                    &quot;value&quot;: &quot;person&quot;,  # The value of the inference class returned by your model                    &quot;confidenceScore&quot;: 0.92,  # 0 ~ 1                }            ],            &quot;requestAt&quot;: dt_jst.isoformat(),  # The time when your endpoint accepted the request        }    ],)```## API DocsCheck [this](https://api.fastlabel.ai/docs/) for further information.</longdescription>
</pkgmetadata>