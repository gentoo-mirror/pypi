<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription># Unofficial Wrapper for the Vinter API![Code Coverage](https://img.shields.io/badge/Coverage-100%25-brightgreen.svg)This is an unofficial wrapper for the Vinter API. It is not affiliated with Vinter in any way.## Installation```bashpip install vinterunofficial```## Documentation[VinterAPIDocumentation](https://www.vinterapi.com/)## Usage## Valid AssetType API- single_assets- multi_assets- staking_yields- nav## Valid AssetType Websocket- single_assets- multi_assets- nav## Important Notes About the Library- The library supports both synchronous and asynchronous requests.- The library is still in development and may have bugs.- All the methods are documented in the source code.- All the methods are callable from both the synchronous and asynchronous classes.- The asynchronous class is called VinterAPIAsync.- The synchronous class is called VinterAPI.- The asynchronous class repeats the same methods as the synchronous class, but can be called with the await keyword.## Version of the Library```pythonimport vinterunofficialprint(vinterunofficial.__version__)```## Importing the library```pythonfrom vinterunofficial import VinterAPI, VinterAPIAsync```### Get Latest Data```pythonfrom vinterunofficial import VinterAPIvinter = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;single_assets&quot;)selected_symbol = &quot;btc-usd-p-d&quot;# Get the latest value of the assetdata = vinter.get_latest_data(selected_symbol, limit=1)# The returned data is a list of dictionaries as shown in the sample response in the documentation# You can also increase the limit to get more than one value which will return a list ordered by the latest to the oldestcurrent_price = data[0][&quot;value&quot;]created_at = data[0][&quot;created_at&quot;]print(&quot;The current price of {} is {} at {}&quot;.format(selected_symbol, current_price, created_at))```### Get Historical Data Between Time Ranges```pythonfrom vinterunofficial import VinterAPIvinter = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;single_assets&quot;)selected_symbol = &quot;btc-usd-p-d&quot;# Get the latest value of the assetdata = vinter.get_data_by_time(symbol=selected_symbol, start=&quot;2023-01-01T00:00:00Z&quot;, end=&quot;2023-01-05T23:59:59Z&quot;)# The returned data is a list of dictionaries as shown in the sample response in the documentation# You can also increase the limit default is 1000, Max is 2000.# The returned order will be from oldest to latest so that its easier to loop through start time to get historical data in a paginated api responses.print(f&quot;The Response : {data}&quot;)```### If you just want the latest value```pythonfrom vinterunofficial import VinterAPIvinter = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;single_assets&quot;)selected_symbol = &quot;btc-usd-p-d&quot;# Get the latest value of the assetcurrent_price = vinter.get_latest_value(selected_symbol)print(&quot;The current price of {} is {}&quot;.format(selected_symbol, current_price))```### Get All Active Symbols```pythonfrom vinterunofficial import VinterAPIsingle_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;single_assets&quot;)multi_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;multi_assets&quot;)all_active_symbol_multi = [asset[&quot;symbol&quot;] for asset in multi_assets.get_all_active_symbols()]all_active_symbol_single = [asset[&quot;symbol&quot;] for asset in single_assets.get_all_active_symbols()]print(&quot;All active symbols for multi assets: {}&quot;.format(all_active_symbol_multi))print(&quot;All active symbols for single assets: {}&quot;.format(all_active_symbol_single))```### Get Contribution of Single Asset```pythonfrom vinterunofficial import VinterAPIsingle_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;single_assets&quot;)selected_symbol = &quot;btc-usd-p-r&quot;single_asset_contribution = single_assets.get_contributions(selected_symbol)print(&quot;The contribution of {} is {}&quot;.format(selected_symbol, single_asset_contribution))```### Get Weight of Multi Asset```pythonfrom vinterunofficial import VinterAPImulti_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;multi_assets&quot;)selected_symbol = &quot;vnby-bold1-2-d&quot;multi_asset_weight = multi_assets.get_current_rebalance_weight(selected_symbol)print(&quot;The weight of {} is {}&quot;.format(selected_symbol, multi_asset_weight))```### Get Next Rebalance Date of Multi Asset```pythonfrom vinterunofficial import VinterAPImulti_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;multi_assets&quot;)selected_symbol = &quot;vnby-bold1-2-d&quot;next_rebalance_date = multi_assets.get_next_rebalance_date(selected_symbol)print(&quot;The next rebalance date of {} is {}&quot;.format(selected_symbol, next_rebalance_date))```### Get Previous Rebalance Date of Multi Asset```pythonfrom vinterunofficial import VinterAPImulti_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;multi_assets&quot;)selected_symbol = &quot;vnby-bold1-2-d&quot;previous_rebalance_date = multi_assets.get_previous_rebalance_date(selected_symbol)print(&quot;The previous rebalance date of {} is {}&quot;.format(selected_symbol, previous_rebalance_date))```### Get Next Review Date of Multi Asset```pythonfrom vinterunofficial import VinterAPImulti_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;multi_assets&quot;)selected_symbol = &quot;vnby-bold1-2-d&quot;next_review_date = multi_assets.get_next_review_date(selected_symbol)print(&quot;The next review date of {} is {}&quot;.format(selected_symbol, next_review_date))```### Get Previous Review Date of Multi Asset```pythonfrom vinterunofficial import VinterAPImulti_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;multi_assets&quot;)selected_symbol = &quot;vnby-bold1-2-d&quot;previous_review_date = multi_assets.get_previous_review_date(selected_symbol)print(&quot;The previous review date of {} is {}&quot;.format(selected_symbol, previous_review_date))```### Get Next Rebalance Weight of Multi Asset```pythonfrom vinterunofficial import VinterAPImulti_assets = VinterAPI(api_key=&quot;&lt;APIKey&gt;&quot;, asset_type=&quot;multi_assets&quot;)selected_symbol = &quot;vnby-bold1-2-d&quot;next_rebalance_weight = multi_assets.get_next_rebalance_weight(selected_symbol)print(&quot;The next rebalance weight of {} is {}&quot;.format(selected_symbol, next_rebalance_weight))```### Websocket```pythonfrom vinterunofficial import VinterAPIWSdef on_message(ws, message):    print(message)        #ws.close() # Uncomment this line to close the websocket after receiving a messagedef on_error(ws, error):    print(error)def on_close(ws, close_status_code, close_msg):    print(&quot;### closed ###&quot;)    print(f&quot;close_status_code: {close_status_code} close_msg: {close_msg}&quot;)def on_open(ws):    print(&quot;### open ###&quot;)vinter_ws = VinterAPIWS(    symbol=&quot;btc-usd-p-r&quot;,    token=&quot;&lt;APIKey&gt;&quot;,    asset_type=&quot;single_assets&quot;,    on_message=on_message,    on_error=on_error,    on_close=on_close,    on_open=on_open,)vinter_ws.open()```</longdescription>
</pkgmetadata>